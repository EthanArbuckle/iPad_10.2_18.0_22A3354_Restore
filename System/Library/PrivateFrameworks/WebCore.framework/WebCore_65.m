unsigned int *WebCore::Element::hideNonceSlow(WebCore::Element *this)
{
  uint64_t v2;
  unsigned int *result;
  void *v4;
  uint64_t v5;
  WTF::String *v6;
  __n128 v7;
  unsigned int v8;
  int v9;
  unsigned int v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  char v18;
  WTF::StringImpl *v19;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  result = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v2 + 192));
  if (result)
  {
    do
      v8 = __ldaxr(result);
    while (__stlxr(v8 + 1, result));
  }
  v9 = *((unsigned __int8 *)result + 232);
  if (!atomic_load(result))
  {
    __break(0xC471u);
    JUMPOUT(0x1959BD254);
  }
  do
    v11 = __ldaxr(result);
  while (__stlxr(v11 - 1, result));
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  if (v9)
  {
    if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0
      && WebCore::Element::isNonceable(this, (unsigned __int8 *)v4, v5, v6, v7))
    {
      v12 = (WTF::StringImpl **)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 216);
    }
    else
    {
      v12 = (WTF::StringImpl **)MEMORY[0x1E0CBF3B8];
    }
    v13 = *v12;
    if (*v12)
      *(_DWORD *)v13 += 2;
    v19 = v13;
    WebCore::Element::setAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::nonceAttr, MEMORY[0x1E0CBF3B8], 0, &v16, v7);
    if (v18 && v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v14);
      else
        *(_DWORD *)v17 -= 2;
    }
    result = (unsigned int *)WebCore::Element::setNonce(this, (const WTF::AtomString *)&v19);
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        return (unsigned int *)WTF::StringImpl::destroy(v13, v15);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return result;
}

void *WebCore::Element::setAttribute@<X0>(WebCore::Element *this@<X0>, const WebCore::QualifiedName *a2@<X1>, WTF::StringImpl **a3@<X2>, WTF::String *a4@<X3>, _QWORD *a5@<X8>, __n128 a6@<Q0>)
{
  int v6;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WebCore::Element *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  int v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  unsigned int v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;

  v6 = (int)a4;
  v11 = *((_QWORD *)this + 13);
  if (v11)
  {
    if (*(_QWORD *)a2 == WebCore::HTMLNames::styleAttr && (*(_BYTE *)(v11 + 4) & 8) != 0)
    {
      WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(this, (unsigned __int8 *)a2, a6, (uint64_t)a3, a4);
    }
    else if ((*((_WORD *)this + 14) & 0x20) != 0)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, const WebCore::QualifiedName *))(**((_QWORD **)this + 20) + 48))(&v55, *((_QWORD *)this + 20), a2);
      if ((_BYTE)v56)
      {
        WTF::AtomString::AtomString((WTF::AtomString *)&v58, &v55);
        WebCore::Element::setSynchronizedLazyAttribute(this, a2, (const WTF::AtomString *)&v58);
        v47 = v58;
        v58 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
            WTF::StringImpl::destroy(v47, v46);
          else
            *(_DWORD *)v47 -= 2;
        }
        if ((_BYTE)v56)
        {
          v48 = v55;
          v55 = 0;
          if (v48)
          {
            if (*(_DWORD *)v48 == 2)
              WTF::StringImpl::destroy(v48, v46);
            else
              *(_DWORD *)v48 -= 2;
          }
        }
      }
    }
  }
  if (!v6)
    goto LABEL_6;
  v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 40) + 8);
  v21 = *(_QWORD *)(v20 + 704);
  if (v21)
  {
    v22 = *(_QWORD *)(v21 + 8);
    if (v22)
      v20 = v22;
  }
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v20 + 192) + 136))(v20 + 192) + 464) & 0x200000000000000) == 0)
  {
LABEL_6:
    v12 = *((_QWORD *)this + 13);
    if (v12
      && ((v13 = *(_DWORD *)(v12 + 4), (v13 & 1) != 0)
        ? (v14 = *(uint64_t **)(v12 + 40), v15 = *(_DWORD *)(v12 + 52))
        : (v14 = (uint64_t *)(v12 + 32), v15 = v13 >> 5),
          v15))
    {
      v16 = 0;
      v17 = *(_QWORD *)a2;
      while (1)
      {
        v18 = *v14;
        if (*v14 == v17
          || *(_QWORD *)(v18 + 24) == *(_QWORD *)(v17 + 24) && *(_QWORD *)(v18 + 32) == *(_QWORD *)(v17 + 32))
        {
          break;
        }
        ++v16;
        v14 += 2;
        if (v15 == v16)
          goto LABEL_14;
      }
    }
    else
    {
LABEL_14:
      v16 = 0xFFFFFFFFLL;
    }
    result = WebCore::Element::setAttributeInternal(this, v16, a2, a3, 0);
LABEL_16:
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return result;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Element *))(*(_QWORD *)this + 104))(&v55, this);
  WTF::AtomString::convertToASCIILowercase((WTF::AtomString *)(*(_QWORD *)a2 + 24));
  WebCore::trustedTypeForAttribute((WebCore *)&v55, &v52, (WTF::StringImpl **)(*((_QWORD *)this + 12) + 32), (WTF::StringImpl **)(*(_QWORD *)a2 + 32), &v58);
  v24 = v52;
  v52 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = v55;
  v55 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = v58;
  if (v58)
    *(_DWORD *)v58 += 2;
  v54 = v26;
  v27 = *a3;
  if (*a3)
    *(_DWORD *)v27 += 2;
  v52 = v27;
  v53 = 3;
  v28 = v59;
  if (v59)
    *(_DWORD *)v59 += 2;
  v51 = v28;
  WebCore::trustedTypesCompliantAttributeValue((uint64_t)&v55, (uint64_t)&v54, (uint64_t)&v52, (uint64_t)this, (uint64_t)&v51);
  v30 = v51;
  v51 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v29);
    else
      *(_DWORD *)v30 -= 2;
  }
  if (v53 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11TrustedHTMLENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13TrustedScriptENSA_ISF_EENSC_ISF_EEEENS7_INS8_16TrustedScriptURLENSA_ISJ_EENSC_ISJ_EEEENS6_10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v53])(&v50, &v52);
  v31 = v54;
  v54 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v29);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = v57;
  if (v57)
  {
    if (v57 != 1)
    {
      v49 = (WebCore::Element *)std::__throw_bad_variant_access[abi:sn180100]();
      return (void *)WebCore::Element::supportsFocus(v49);
    }
    v33 = v56;
    v56 = 0;
    *(_BYTE *)a5 = (_BYTE)v55;
    a5[1] = v33;
    *((_BYTE *)a5 + 16) = 1;
  }
  else
  {
    v35 = *((_QWORD *)this + 13);
    if (v35
      && ((v36 = *(_DWORD *)(v35 + 4), (v36 & 1) != 0)
        ? (v37 = *(uint64_t **)(v35 + 40), v38 = *(_DWORD *)(v35 + 52))
        : (v37 = (uint64_t *)(v35 + 32), v38 = v36 >> 5),
          v38))
    {
      v39 = 0;
      v40 = *(_QWORD *)a2;
      while (1)
      {
        v41 = *v37;
        if (*v37 == v40
          || *(_QWORD *)(v41 + 24) == *(_QWORD *)(v40 + 24) && *(_QWORD *)(v41 + 32) == *(_QWORD *)(v40 + 32))
        {
          break;
        }
        ++v39;
        v37 += 2;
        if (v38 == v39)
          goto LABEL_58;
      }
    }
    else
    {
LABEL_58:
      v39 = 0xFFFFFFFFLL;
    }
    v42 = v55;
    v55 = 0;
    v50 = v42;
    WTF::AtomString::AtomString(&v52, &v50);
    WebCore::Element::setAttributeInternal(this, v39, a2, &v52, 0);
    v44 = v52;
    v52 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v43);
      else
        *(_DWORD *)v44 -= 2;
    }
    v45 = v50;
    v50 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, v43);
      else
        *(_DWORD *)v45 -= 2;
    }
  }
  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v32])(&v52, &v55);
  result = WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(&v58, v34);
  if (!(_DWORD)v32)
    goto LABEL_16;
  return result;
}

uint64_t WebCore::Element::supportsFocus(WebCore::Element *this)
{
  return (0xEu >> ((*((_QWORD *)this + 9) >> 58) & 3)) & 1;
}

uint64_t WebCore::Element::tabIndexForBindings(WebCore::Element *this)
{
  unint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;

  v1 = *((_QWORD *)this + 9);
  v2 = (v1 >> 58) & 3;
  switch((_DWORD)v2)
  {
    case 1:
      v3 = 0;
      v4 = 0;
      return v4 | v3;
    case 3:
      v3 = *(_DWORD *)((v1 & 0xFFFFFFFFFFFFLL) + 0x1C);
      v4 = v3 & 0xFFFFFF00;
      v3 = v3;
      return v4 | v3;
    case 2:
      v4 = -256;
      v3 = 255;
      return v4 | v3;
  }
  return (*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)this + 1120))(this);
}

WTF::StringImpl *WebCore::Element::setTabIndexForBindings(WebCore::Element *this, WTF::AtomString *a2)
{
  return WebCore::Element::setIntegralAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::tabindexAttr, a2);
}

WTF::StringImpl *WebCore::Element::setIntegralAttribute(WebCore::Element *this, const WebCore::QualifiedName *a2, WTF::AtomString *a3)
{
  __n128 v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  _QWORD v10[3];

  WTF::AtomString::number(a3);
  WebCore::Element::setAttribute(this, a2, &v9, 0, v10, v5);
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v10, v6);
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::Element::isKeyboardFocusable(WebCore::Element *this, WebCore::KeyboardEvent *a2)
{
  uint64_t result;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;

  result = (*(uint64_t (**)(WebCore::Element *, WebCore::KeyboardEvent *))(*(_QWORD *)this + 552))(this, a2);
  if ((_DWORD)result)
  {
    if (((*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)this + 1120))(this) & 0x80000000) == 0
      || (result = (*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)this + 544))(this), (_DWORD)result))
    {
      v5 = *((_QWORD *)this + 9);
      v6 = (v5 >> 58) & 3;
      if ((_DWORD)v6 == 2)
        return 0;
      v7 = v5 & 0xFFFFFFFFFFFFLL;
      if ((_DWORD)v6 == 3 && (*(_DWORD *)(v7 + 28) & 0x80000000) != 0)
      {
        return 0;
      }
      else
      {
        if (v7 && (v9 = *(_QWORD *)(v7 + 88)) != 0)
        {
          v10 = *(_DWORD *)(v9 + 24);
          *(_DWORD *)(v9 + 24) = v10 + 2;
          v8 = (*(unsigned __int8 *)(v9 + 192) >> 1) & 1;
          if (v10)
          {
            *(_DWORD *)(v9 + 24) = v10;
          }
          else if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v9, v4);
          }
        }
        else
        {
          v8 = 0;
        }
        return v8 ^ 1u;
      }
    }
  }
  return result;
}

uint64_t WebCore::Element::isMouseFocusable(WebCore::Element *this)
{
  return (*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)this + 552))(this);
}

BOOL WebCore::Element::shouldUseInputMethod(WebCore::Element *this)
{
  return WebCore::Node::computeEditability((uint64_t)this, 0, 0) != 0;
}

uint64_t WebCore::Element::dispatchMouseEvent(uint64_t a1, uint64_t a2, WebCore *a3, int a4, uint64_t a5, int a6)
{
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  WebCore *v15;
  WTF::StringImpl *v16;
  WTF *v17;
  WebCore::MouseEvent *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::PointerCaptureController::CapturingData *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned __int8 *v38;
  int v39;
  int v40;
  uint64_t *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WebCore *v45;
  unint64_t StatusReg;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  char v60;
  WTF *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF *v65;
  int v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  WebCore::MouseEvent *v76;
  WebCore::EventNames **v77;
  int v78;
  int v79;
  unint64_t v80;
  uint64_t v81;
  WebCore::EventNames **v82;
  WebCore::EventNames *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  WTF *v88;
  int v89;
  int v90;
  char v91;
  __int16 v92;
  char v93;
  WTF *v94;
  _DWORD *v95;
  WTF::StringImpl *v96;
  WTF *v97;
  WTF *v98;
  void *v99;
  char v101;
  uint64_t *v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  WTF *v106;
  WTF *v107;
  WebCore *v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  _QWORD *v113;
  WebCore *v114;
  WTF *v115;
  WebCore::MouseEvent *v116;
  int32x2_t v117;
  WTF *v118;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1)
    && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 680) + 696) & 0x20) == 0
    || (v12 = *(unsigned __int8 *)(a2 + 8) - 8, v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), v12 <= 2)
    && ((0x80004000200uLL >> (16 * v12)) & *(unsigned __int16 *)(v13 + 3292)) == 0)
  {
    v21 = 0;
    v20 = 0;
    return v21 | (v20 << 8);
  }
  v14 = *(WTF **)(v13 + 528);
  if (v14)
  {
    v14 = (WTF *)*((_QWORD *)v14 + 1);
    if (v14)
    {
      v14 = (WTF *)*((_QWORD *)v14 + 14);
      if (v14)
        ++*(_DWORD *)v14;
    }
  }
  v118 = v14;
  v15 = WebCore::MouseEvent::create(a3, (uint64_t *)&v118, (uint64_t *)a2, a4, a5, (uint64_t *)&v116);
  v17 = v118;
  v118 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
    {
      v41 = (uint64_t *)*((_QWORD *)v17 + 2);
      *((_QWORD *)v17 + 2) = 0;
      if (v41)
      {
        if (*v41)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v41, v16);
        WTF::fastFree((WTF *)v41, v16);
      }
      v42 = (unsigned int *)*((_QWORD *)v17 + 1);
      *((_QWORD *)v17 + 1) = 0;
      if (v42)
      {
        do
        {
          v43 = __ldaxr(v42);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v42));
        if (!v44)
        {
          atomic_store(1u, v42);
          WTF::fastFree((WTF *)v42, v16);
        }
      }
      v15 = (WebCore *)WTF::fastFree(v17, v16);
    }
    else
    {
      --*(_DWORD *)v17;
    }
  }
  v18 = v116;
  v19 = *((_QWORD *)v116 + 3);
  if (v19)
  {
    if (!*(_DWORD *)(v19 + 4))
    {
      v20 = 0;
      v21 = 1;
      goto LABEL_139;
    }
    *(_DWORD *)(a1 + 24) += 2;
    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 528);
    if (!v22 || (v23 = *(_QWORD *)(v22 + 8)) == 0)
    {
      v70 = 0;
      v21 = 1;
      goto LABEL_95;
    }
    v24 = *(_QWORD *)(v23 + 24);
    if (!v24 || (v25 = *(_QWORD *)(v24 + 8)) == 0)
    {
      v21 = 1;
      goto LABEL_90;
    }
    ++*(_DWORD *)v25;
    v26 = *(WebCore::PointerCaptureController::CapturingData **)(v25 + 88);
    if (*(_DWORD *)(a2 + 96) != 1)
    {
      v27 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v27 || (v15 = *(WebCore **)(v27 + 96)) == 0)
        v15 = (WebCore *)WebCore::threadGlobalDataSlow(v15);
      v28 = *((_QWORD *)v15 + 5);
      if (!v28)
      {
        v108 = v15;
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v15);
        v28 = *((_QWORD *)v108 + 5);
      }
      if (*((_QWORD *)v18 + 3) != *(_QWORD *)(v28 + 400))
      {
        v29 = *((_QWORD *)v26 + 1);
        if (v29)
        {
          v30 = *(unsigned int *)(a2 + 96);
          v31 = *(_DWORD *)(v29 - 8);
          v32 = (~(v30 << 32) + v30) ^ ((unint64_t)(~(v30 << 32) + v30) >> 22);
          v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
          v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
          v35 = v31 & ((v34 >> 31) ^ v34);
          v36 = *(_QWORD *)(v29 + 16 * v35);
          if (v36 == v30)
          {
LABEL_34:
            v38 = *(unsigned __int8 **)(v29 + 16 * v35 + 8);
            if (v38)
            {
              ++*(_DWORD *)v38;
              v39 = v38[42];
              WTF::RefCounted<WebCore::PointerCaptureController::CapturingData>::deref((WebCore::PointerCaptureController::CapturingData *)v38, v16);
              if (v39)
              {
                v21 = 1;
                v40 = 1;
                goto LABEL_84;
              }
            }
          }
          else
          {
            v37 = 1;
            while (v36 != 0x8000000000000000)
            {
              v35 = ((_DWORD)v35 + v37) & v31;
              v36 = *(_QWORD *)(v29 + 16 * v35);
              ++v37;
              if (v36 == v30)
                goto LABEL_34;
            }
          }
        }
      }
    }
    if (*(_BYTE *)(a2 + 49))
    {
      v40 = 0;
      v21 = 1;
      goto LABEL_84;
    }
    WebCore::PointerCaptureController::pointerEventForMouseEvent(v26, v18, (WTF **)(a2 + 104), (const WTF::StringImpl *)*(unsigned int *)(a2 + 96), (WebCore::EventNames ***)&v118);
    v16 = v118;
    if (!v118)
      goto LABEL_78;
    v45 = (WebCore *)WebCore::PointerCaptureController::dispatchEvent(v26, v118, (WebCore::EventTarget *)a1);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v47 = *(_QWORD *)(StatusReg + 736);
    if (!v47 || (v45 = *(WebCore **)(v47 + 96)) == 0)
      v45 = (WebCore *)WebCore::threadGlobalDataSlow(v45);
    v48 = (_QWORD *)*((_QWORD *)v45 + 5);
    if (!v48)
    {
      v114 = v45;
      v45 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v45);
      v48 = (_QWORD *)*((_QWORD *)v114 + 5);
    }
    v49 = *((_QWORD *)v18 + 3);
    if (v49 != v48[50] && v49 != v48[156] && v49 != v48[155] && v49 != v48[152] && v49 != v48[153])
    {
      v50 = *((_QWORD *)v26 + 1);
      if (v50)
      {
        v51 = *((unsigned int *)v118 + 44);
        v52 = *(_DWORD *)(v50 - 8);
        v53 = (~(v51 << 32) + v51) ^ ((unint64_t)(~(v51 << 32) + v51) >> 22);
        v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
        v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
        v56 = v52 & ((v55 >> 31) ^ v55);
        v57 = *(_QWORD *)(v50 + 16 * v56);
        if (v57 == v51)
        {
LABEL_67:
          v45 = *(WebCore **)(v50 + 16 * v56 + 8);
          if (v45)
          {
            ++*(_DWORD *)v45;
            v59 = *((unsigned __int8 *)v45 + 42);
            v45 = WTF::RefCounted<WebCore::PointerCaptureController::CapturingData>::deref(v45, v16);
            if (v59)
            {
              v60 = 0;
              v21 = 1;
              goto LABEL_80;
            }
          }
        }
        else
        {
          v58 = 1;
          while (v57 != 0x8000000000000000)
          {
            v56 = ((_DWORD)v56 + v58) & v52;
            v57 = *(_QWORD *)(v50 + 16 * v56);
            ++v58;
            if (v57 == v51)
              goto LABEL_67;
          }
        }
      }
    }
    v61 = v118;
    if ((*((_BYTE *)v118 + 20) & 0xC0) != 0)
    {
      v62 = *(_QWORD *)(StatusReg + 736);
      if (!v62 || (v63 = *(_QWORD *)(v62 + 96)) == 0)
        v63 = WebCore::threadGlobalDataSlow(v45);
      v64 = *(_QWORD *)(v63 + 40);
      if (!v64)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v63);
        v64 = *(_QWORD *)(v63 + 40);
      }
      if (*((_QWORD *)v61 + 3) == *(_QWORD *)(v64 + 1488))
      {
        v21 = 0;
        v60 = 0;
LABEL_80:
        v65 = v118;
        v118 = 0;
        if (v65)
        {
          if (*((_DWORD *)v65 + 4) == 1)
          {
            v101 = v60;
            (*(void (**)(WTF *))(*(_QWORD *)v65 + 8))(v65);
            v60 = v101;
          }
          else
          {
            --*((_DWORD *)v65 + 4);
          }
        }
        v40 = 1;
        v66 = 1;
        if ((v60 & 1) != 0)
        {
LABEL_85:
          if (*(_DWORD *)v25 == 1)
          {
            WebCore::Page::~Page(v25);
            WTF::fastFree(v98, v99);
          }
          else
          {
            --*(_DWORD *)v25;
          }
          if ((v40 | v66 ^ 1) != 1)
          {
LABEL_100:
            v21 = 0;
            v20 = 0;
            goto LABEL_137;
          }
          v67 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 528);
          if (!v67 || (v23 = *(_QWORD *)(v67 + 8)) == 0)
          {
            v70 = 0;
            goto LABEL_95;
          }
LABEL_90:
          v68 = (unsigned int *)(v23 + 8);
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 + 1, v68));
          v70 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v23 + 280) + 16) + 1200))(*(_QWORD *)(*(_QWORD *)(v23 + 280) + 16));
          do
          {
            v71 = __ldaxr(v68);
            v72 = v71 - 1;
          }
          while (__stlxr(v72, v68));
          if (!v72)
          {
            atomic_store(1u, v68);
            v106 = (WTF *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v106 = off_1E31FE290;
            *((_QWORD *)v106 + 1) = v68;
            v118 = v106;
            WTF::ensureOnMainThread();
            v107 = v118;
            v118 = 0;
            if (v107)
              (*(void (**)(WTF *))(*(_QWORD *)v107 + 8))(v107);
          }
LABEL_95:
          v73 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          *(_DWORD *)(v73 + 24) += 2;
          v74 = *(_QWORD *)(v73 + 688);
          if (!v74)
            v74 = WebCore::Document::ensureQuirks((WebCore::Document *)v73);
          v75 = WebCore::Quirks::triggerOptionalStorageAccessQuirk(v74, a1, a2, a3, a4, a5, v70, a6);
          if (*(_DWORD *)(v73 + 24) == 2)
          {
            if ((*(_WORD *)(v73 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v73, v16);
          }
          else
          {
            *(_DWORD *)(v73 + 24) -= 2;
          }
          if ((v75 & 1) != 0)
            goto LABEL_100;
          v76 = v116;
          v77 = (WebCore::EventNames **)(*(uint64_t (**)(uint64_t, WebCore::MouseEvent *))(*(_QWORD *)a1 + 48))(a1, v116);
          v78 = *((_DWORD *)v76 + 5);
          if ((v78 & 0x40) != 0)
          {
            v79 = 1;
          }
          else
          {
            v79 = 0;
            v20 = 0;
            if ((v78 & 0x80) == 0)
              goto LABEL_106;
          }
          v21 = 0;
          v20 = v79;
LABEL_106:
          v80 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
          v81 = *(_QWORD *)(v80 + 736);
          if (!v81 || (v82 = *(WebCore::EventNames ***)(v81 + 96)) == 0)
          {
            v77 = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)v77);
            v82 = v77;
          }
          v83 = v82[5];
          if (!v83)
          {
            v77 = WebCore::ThreadGlobalData::initializeEventNames(v82);
            v83 = v82[5];
          }
          if (*((_QWORD *)v76 + 3) != *((_QWORD *)v83 + 50) || *((_DWORD *)v76 + 20) != 2)
            goto LABEL_137;
          v84 = *(_QWORD *)(v80 + 736);
          if (!v84 || (v85 = *(_QWORD *)(v84 + 96)) == 0)
            v85 = WebCore::threadGlobalDataSlow((WebCore *)v77);
          v86 = *(_QWORD *)(v85 + 40);
          if (!v86)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v85);
            v86 = *(_QWORD *)(v85 + 40);
          }
          v113 = (_QWORD *)(v86 + 584);
          v87 = *((_DWORD *)v76 + 5);
          v88 = (WTF *)*((_QWORD *)v76 + 9);
          if (v88)
            ++*(_DWORD *)v88;
          v111 = (v87 >> 1) & 1;
          v112 = (v87 >> 2) & 1;
          v115 = v88;
          v110 = *((_DWORD *)v76 + 20);
          v89 = *((_DWORD *)v76 + 24);
          v90 = *((_DWORD *)v76 + 25) / 64;
          v109 = *((unsigned __int8 *)v76 + 84);
          if ((unsigned __int16)(*((_WORD *)v76 + 77) + 2) >= 5u)
            v91 = 3;
          else
            v91 = *((_WORD *)v76 + 77);
          v92 = *((_WORD *)v76 + 78);
          v93 = *((_BYTE *)v76 + 158);
          v94 = (WTF *)*((_QWORD *)v76 + 11);
          v95 = (_DWORD *)bmalloc::api::isoAllocate();
          v118 = v94;
          v117.i32[0] = v89 / 64;
          v117.i32[1] = v90;
          WebCore::MouseEvent::MouseEvent((uint64_t)v95, 76, v113, v111, v112, 1, (uint64_t *)&v115, v110, 0.0, 0.0, &v118, &v117, v109, SHIDWORD(v109), v91, v92, v93, a5);
          v97 = v115;
          v115 = 0;
          if (v97)
          {
            if (*(_DWORD *)v97 == 1)
            {
              v102 = (uint64_t *)*((_QWORD *)v97 + 2);
              *((_QWORD *)v97 + 2) = 0;
              if (v102)
              {
                if (*v102)
                  WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v102, v96);
                WTF::fastFree((WTF *)v102, v96);
              }
              v103 = (unsigned int *)*((_QWORD *)v97 + 1);
              *((_QWORD *)v97 + 1) = 0;
              if (v103)
              {
                do
                {
                  v104 = __ldaxr(v103);
                  v105 = v104 - 1;
                }
                while (__stlxr(v105, v103));
                if (!v105)
                {
                  atomic_store(1u, v103);
                  WTF::fastFree((WTF *)v103, v96);
                }
              }
              WTF::fastFree(v97, v96);
            }
            else
            {
              --*(_DWORD *)v97;
            }
          }
          if ((*((_BYTE *)v116 + 20) & 0x80) != 0)
            v95[5] |= 0x80u;
          (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a1 + 48))(a1, v95);
          if ((v95[5] & 0xC0) != 0)
          {
            if (v95[4] != 1)
            {
              v21 = 0;
LABEL_136:
              --v95[4];
              goto LABEL_137;
            }
            (*(void (**)(_DWORD *))(*(_QWORD *)v95 + 8))(v95);
            v21 = 0;
          }
          else
          {
            if (v95[4] != 1)
              goto LABEL_136;
            (*(void (**)(_DWORD *))(*(_QWORD *)v95 + 8))(v95);
          }
LABEL_137:
          if (*(_DWORD *)(a1 + 24) == 2)
          {
            if ((*(_WORD *)(a1 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)a1, v16);
          }
          else
          {
            *(_DWORD *)(a1 + 24) -= 2;
          }
LABEL_139:
          v18 = v116;
          if (!v116)
            return v21 | (v20 << 8);
          goto LABEL_14;
        }
LABEL_84:
        v66 = v40;
        v40 = 0;
        goto LABEL_85;
      }
      v21 = 0;
    }
    else
    {
LABEL_78:
      v21 = 1;
    }
    v60 = 1;
    goto LABEL_80;
  }
  v20 = 0;
  v21 = 1;
LABEL_14:
  if (*((_DWORD *)v18 + 4) == 1)
    (*(void (**)(WebCore::MouseEvent *))(*(_QWORD *)v18 + 8))(v18);
  else
    --*((_DWORD *)v18 + 4);
  return v21 | (v20 << 8);
}

BOOL WebCore::Element::dispatchWheelEvent(_QWORD *a1, uint64_t a2, _BYTE *a3, int a4)
{
  WTF *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  float v12;
  float v13;
  int v14;
  uint64_t *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;

  v8 = *(WTF **)(*(_QWORD *)(a1[5] + 8) + 528);
  if (v8)
  {
    v8 = (WTF *)*((_QWORD *)v8 + 1);
    if (v8)
    {
      v8 = (WTF *)*((_QWORD *)v8 + 14);
      if (v8)
        ++*(_DWORD *)v8;
    }
  }
  v20 = v8;
  v9 = (_DWORD *)bmalloc::api::isoAllocate();
  WebCore::WheelEvent::WheelEvent((uint64_t)v9, (uint64_t *)a2, (uint64_t *)&v20, a4);
  v11 = v20;
  v20 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
    {
      v16 = (uint64_t *)*((_QWORD *)v11 + 2);
      *((_QWORD *)v11 + 2) = 0;
      if (v16)
      {
        if (*v16)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v16, v10);
        WTF::fastFree((WTF *)v16, v10);
      }
      v17 = (unsigned int *)*((_QWORD *)v11 + 1);
      *((_QWORD *)v11 + 1) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          WTF::fastFree((WTF *)v17, v10);
        }
      }
      WTF::fastFree(v11, v10);
    }
    else
    {
      --*(_DWORD *)v11;
    }
  }
  v13 = *(float *)(a2 + 68);
  v12 = *(float *)(a2 + 72);
  if (v13 != 0.0)
  {
    if (v13 < 0.0)
      v13 = -v13;
    if (v13 >= 0.00000011921)
      goto LABEL_35;
  }
  if (v12 == 0.0)
    goto LABEL_10;
  if (v12 < 0.0)
    v12 = -v12;
  if (v12 < 0.00000011921)
LABEL_10:
    v9[5] |= 0x10u;
  else
LABEL_35:
    *a3 |= 1u;
  (*(void (**)(_QWORD *, _DWORD *))(*a1 + 48))(a1, v9);
  v14 = v9[5];
  if ((v14 & 0x40) != 0)
  {
    *a3 |= 2u;
    v14 = v9[5];
  }
  if ((v14 & 0x80) != 0)
  {
    *a3 |= 4u;
    v14 = v9[5];
  }
  if (v9[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
  else
    --v9[4];
  return (v14 & 0xC0) == 0;
}

BOOL WebCore::Element::dispatchKeyEvent(WebCore::Element *this, const WebCore::PlatformKeyboardEvent *a2)
{
  WTF *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  const WTF::AtomString *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v21;
  WTF *v22;
  WTF *v23;

  v4 = *(WTF **)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v4)
  {
    v4 = (WTF *)*((_QWORD *)v4 + 1);
    if (v4)
    {
      v4 = (WTF *)*((_QWORD *)v4 + 14);
      if (v4)
        ++*(_DWORD *)v4;
    }
  }
  v23 = v4;
  v5 = (_DWORD *)bmalloc::api::isoAllocate();
  WebCore::KeyboardEvent::KeyboardEvent((uint64_t)v5, (uint64_t)a2, (uint64_t (**)())&v23);
  v7 = v23;
  v23 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      v17 = (uint64_t *)*((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 2) = 0;
      if (v17)
      {
        if (*v17)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v17, v6);
        WTF::fastFree((WTF *)v17, v6);
      }
      v18 = (unsigned int *)*((_QWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          WTF::fastFree((WTF *)v18, v6);
        }
      }
      WTF::fastFree(v7, v6);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      if (WebCore::AXObjectCache::gAccessibilityEnhancedUserInterfaceEnabled
        && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 640) + 8) + 8) + 136) + 688) & 0x100000000) != 0
        && ((MEMORY[0x19AEA53F4](*((_QWORD *)v5 + 14), "U+0009", 6) & 1) != 0
         || WebCore::focusDirectionForKey((WebCore *)(v5 + 28), v12)))
      {
        v5[5] |= 0x10u;
      }
      do
      {
        v13 = __ldaxr(v10);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v10));
      if (!v14)
      {
        atomic_store(1u, v10);
        v21 = (WTF *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v21 = off_1E31FE290;
        *((_QWORD *)v21 + 1) = v10;
        v23 = v21;
        WTF::ensureOnMainThread();
        v22 = v23;
        v23 = 0;
        if (v22)
          (*(void (**)(WTF *))(*(_QWORD *)v22 + 8))(v22);
      }
    }
  }
  (*(void (**)(WebCore::Element *, _DWORD *))(*(_QWORD *)this + 48))(this, v5);
  v15 = v5[5];
  if (v5[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
  else
    --v5[4];
  return (v15 & 0xC0) == 0;
}

uint64_t WebCore::Element::cloneElementWithoutChildren@<X0>(WebCore::Element *this@<X0>, WebCore::Element **a2@<X8>)
{
  WebCore::Element *v5;
  uint64_t v6;
  WebCore::TreeScope *v7;
  __n128 v8;

  (*(void (**)(WebCore::Element **__return_ptr))(*(_QWORD *)this + 1112))(a2);
  v5 = *a2;
  WebCore::Element::cloneAttributesFromElement(v5, this, v6, v7, v8);
  return (*(uint64_t (**)(WebCore::Element *, WebCore::Element *))(*(_QWORD *)v5 + 496))(v5, this);
}

void WebCore::Element::addShadowRoot(WebCore *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  void *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WebCore::Document *v16;
  void *v18;
  WTF *v19;
  int v21;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  uint64_t v31;
  _BYTE v32[88];

  v4 = *a2;
  *(_DWORD *)(*a2 + 24) += 2;
  ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  ++WebCore::ScriptDisallowedScope::s_count;
  if ((*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1959BE990);
    }
    goto LABEL_3;
  }
  v5 = *((_QWORD *)a1 + 9);
  if ((v5 & 0xFFFFFFFFFFFFLL) != 0)
  {
    v23 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 0x38);
    if (v23)
    {
      if ((*(_QWORD *)(v23 + 16) & 0x1FLL) == 0x12)
      {
LABEL_3:
        WebCore::RenderTreeUpdater::tearDownRenderers(a1, 1);
        v5 = *((_QWORD *)a1 + 9);
      }
    }
  }
  v6 = v5 & 0xFFFFFFFFFFFFLL;
  if (!v6)
  {
    WebCore::Node::materializeRareData(a1);
    v6 = *((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL;
  }
  v7 = *a2;
  *a2 = 0;
  v8 = *(_QWORD *)(v6 + 88);
  *(_QWORD *)(v6 + 88) = v7;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  v9 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a1);
  if (v9)
  {
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 + 1, v9));
  }
  v12 = *(_QWORD *)(v4 + 200);
  *(_QWORD *)(v4 + 200) = v9;
  if (v12)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v12);
      v28 = *(unsigned int *)(v12 + 28);
      if ((_DWORD)v28)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v28));
      v29 = *(WTF **)(v12 + 16);
      if (v29)
      {
        *(_QWORD *)(v12 + 16) = 0;
        *(_DWORD *)(v12 + 24) = 0;
        WTF::fastFree(v29, v10);
      }
      WTF::fastFree((WTF *)v12, v10);
    }
  }
  v15 = *((_QWORD *)a1 + 5);
  *(_QWORD *)(v4 + 112) = v15;
  *(_QWORD *)(v4 + 104) = *(_QWORD *)(v15 + 8);
  v30 = (WTF *)v32;
  v31 = 11;
  WebCore::notifyChildNodeInserted((uint64_t)a1, v4, (uint64_t)&v30);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v27 = WebCore::InspectorInstrumentation::instrumentingAgents(*(WebCore::InspectorInstrumentation **)(*((_QWORD *)a1 + 5) + 8), v16);
    if (v27)
      WebCore::InspectorInstrumentation::didPushShadowRootImpl(v27, a1, (WebCore::ShadowRoot *)v4);
  }
  WebCore::Node::invalidateStyle((uint64_t)a1, 4u, 2);
  if (HIDWORD(v31))
  {
    v24 = v30;
    v25 = 8 * HIDWORD(v31);
    do
    {
      v26 = *(_QWORD *)v24;
      *(_QWORD *)v24 = 0;
      if (v26)
      {
        if (*(_DWORD *)(v26 + 24) == 2)
        {
          if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v26);
        }
        else
        {
          *(_DWORD *)(v26 + 24) -= 2;
        }
      }
      v24 = (WTF *)((char *)v24 + 8);
      v25 -= 8;
    }
    while (v25);
  }
  v19 = v30;
  if (v32 != (_BYTE *)v30 && v30 != 0)
  {
    v30 = 0;
    LODWORD(v31) = 0;
    WTF::fastFree(v19, v18);
  }
  --WebCore::ScriptDisallowedScope::s_count;
  v21 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
    && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove != 0)
  {
    WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)&v30, v18);
    v21 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  }
  WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v21 - 1;
  if (!*(_BYTE *)(v4 + 193))
    (*(void (**)(WebCore *, uint64_t))(*(_QWORD *)a1 + 1104))(a1, v4);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
}

uint64_t WebCore::Element::cloneDataFromElement(WebCore::Element *this, const WebCore::Element *a2, uint64_t a3, WebCore::TreeScope *a4, __n128 a5)
{
  WebCore::Element::cloneAttributesFromElement(this, a2, a3, a4, a5);
  return (*(uint64_t (**)(WebCore::Element *, const WebCore::Element *))(*(_QWORD *)this + 496))(this, a2);
}

WebCore::Document *WebCore::Element::cloneElementWithoutAttributesAndChildren@<X0>(WebCore::Element *this@<X0>, WebCore::Document *a2@<X1>, WebCore::Node **a3@<X8>)
{
  return WebCore::Document::createElement(a2, (WebCore::Element *)((char *)this + 96), 0, a3);
}

uint64_t WebCore::Element::detachAttribute@<X0>(WebCore::Element *this@<X0>, WTF::StringImpl *a2@<X1>, WebCore::Attr **a3@<X8>)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t *v9;
  WebCore::TreeScope *v10;
  WebCore::Attr *v11;
  uint64_t v12;
  _DWORD **v13;
  uint64_t v14;
  void *v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t result;
  WebCore::Attr *v19;

  v6 = *((_QWORD *)this + 13);
  if (v6)
    v7 = (*(_DWORD *)(v6 + 4) & 1) == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (*(_DWORD *)(v6 + 52) > a2)
    {
      v8 = *(_QWORD *)(v6 + 40);
      goto LABEL_10;
    }
LABEL_21:
    result = 332;
    __break(0xC471u);
    return result;
  }
  if (a2 >= *(_DWORD *)(v6 + 4) >> 5)
    goto LABEL_21;
  v8 = v6 + 32;
LABEL_10:
  v9 = (uint64_t *)(v8 + 16 * a2);
  WebCore::Element::attrIfExists((uint64_t)this, v9, &v19);
  v11 = v19;
  if (v19)
  {
    WebCore::Element::detachAttrNodeFromElementWithValue((uint64_t)this, v19, (const WTF::AtomString *)(v8 + 16 * a2 + 8), v10);
  }
  else
  {
    v12 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    *(_DWORD *)(v12 + 24) += 2;
    v13 = (_DWORD **)(v8 + 16 * a2 + 8);
    v14 = bmalloc::api::isoAllocate();
    v11 = (WebCore::Attr *)v14;
    *(_OWORD *)(v14 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v14 + 24) = 0x200000000002;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 40) = v12 + 96;
    *(_OWORD *)(v14 + 48) = 0u;
    *(_OWORD *)(v14 + 64) = 0u;
    ++*(_DWORD *)(v12 + 3324);
    *(_QWORD *)v14 = off_1E33A0600;
    *(_QWORD *)(v14 + 80) = 0;
    v16 = (_DWORD *)*v9;
    if (*v9)
      ++*v16;
    *(_QWORD *)(v14 + 88) = v16;
    v17 = *v13;
    if (*v13)
      *v17 += 2;
    *(_QWORD *)(v14 + 96) = v17;
    *(_QWORD *)(v14 + 104) = 0;
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12, v15);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  result = (uint64_t)WebCore::Element::removeAttributeInternal((uint64_t)this, a2, 0);
  *a3 = v11;
  return result;
}

uint64_t WebCore::ElementData::attributeAt(WebCore::ElementData *this, unsigned int a2)
{
  unsigned int v2;
  char *v3;
  uint64_t result;

  v2 = *((_DWORD *)this + 1);
  if (this && (v2 & 1) != 0)
  {
    if (*((_DWORD *)this + 13) > a2)
    {
      v3 = (char *)*((_QWORD *)this + 5);
      return (uint64_t)&v3[16 * a2];
    }
  }
  else if (a2 < v2 >> 5)
  {
    v3 = (char *)this + 32;
    return (uint64_t)&v3[16 * a2];
  }
  result = 332;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::Element::attrIfExists@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if ((*(_BYTE *)(result + 22) & 0x80) == 0)
  {
LABEL_2:
    v3 = 0;
    goto LABEL_3;
  }
  v4 = *(_DWORD *)(WebCore::attrNodeListMap(void)::map - 8);
  v5 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  for (i = 1; ; ++i)
  {
    v10 = v8;
    v11 = *(_QWORD *)(WebCore::attrNodeListMap(void)::map + 24 * v8);
    if (v11 == -1)
      goto LABEL_8;
    if (!v11)
      break;
    if (*(_QWORD *)(v11 + 8) == result)
      goto LABEL_10;
LABEL_8:
    v8 = (v10 + i) & v4;
  }
  v10 = *(_DWORD *)(WebCore::attrNodeListMap(void)::map - 4);
LABEL_10:
  v12 = WebCore::attrNodeListMap(void)::map + 24 * v10;
  v13 = *(unsigned int *)(v12 + 20);
  if (!(_DWORD)v13)
    goto LABEL_2;
  v14 = *(uint64_t **)(v12 + 8);
  v15 = *a2;
  v16 = 8 * v13;
  while (1)
  {
    v3 = *v14;
    v17 = *(_QWORD *)(*v14 + 88);
    if (v17 == v15 || *(_QWORD *)(v17 + 24) == *(_QWORD *)(v15 + 24) && *(_QWORD *)(v17 + 32) == *(_QWORD *)(v15 + 32))
      break;
    v3 = 0;
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
  *(_DWORD *)(v3 + 24) += 2;
LABEL_3:
  *a3 = v3;
  return result;
}

uint64_t WebCore::Element::detachAttrNodeFromElementWithValue(uint64_t this, WebCore::Attr *a2, const WTF::AtomString *a3, WebCore::TreeScope *a4)
{
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int i;
  uint64_t *v21;
  uint64_t v22;

  WebCore::Attr::detachFromElementWithValue(a2, a3, (uint64_t)a3, a4);
  if ((*(_BYTE *)(this + 22) & 0x80) != 0)
  {
    {
      if (WebCore::attrNodeListMap(void)::map)
      {
        v15 = *(_DWORD *)(WebCore::attrNodeListMap(void)::map - 8);
        v16 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
        v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
        v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
        v19 = v15 & ((v18 >> 31) ^ v18);
        for (i = 1; ; ++i)
        {
          v21 = (uint64_t *)(WebCore::attrNodeListMap(void)::map + 24 * v19);
          v22 = *v21;
          if (*v21 != -1)
          {
            if (!v22)
            {
              v21 = (uint64_t *)(WebCore::attrNodeListMap(void)::map
                              + 24 * *(unsigned int *)(WebCore::attrNodeListMap(void)::map - 4));
              goto LABEL_26;
            }
            if (*(_QWORD *)(v22 + 8) == this)
              goto LABEL_26;
          }
          v19 = (v19 + i) & v15;
        }
      }
      v21 = 0;
    }
    else
    {
      v21 = 0;
      WebCore::attrNodeListMap(void)::map = 0;
    }
LABEL_26:
    v7 = v21 + 1;
  }
  else
  {
    v7 = 0;
  }
  v8 = *((unsigned int *)v7 + 3);
  if (!(_DWORD)v8)
    goto LABEL_11;
  v9 = *v7;
  v10 = *((_QWORD *)a2 + 11);
  v11 = *v7 + 8;
  v12 = *((unsigned int *)v7 + 3);
  do
  {
    result = *(_QWORD *)v9;
    if (*(_QWORD *)(*(_QWORD *)v9 + 88) == v10)
      break;
    v9 += 8;
    v11 += 8;
    --v12;
  }
  while (v12);
  *(_QWORD *)v9 = 0;
  if (*(_DWORD *)(result + 24) == 2)
  {
    if ((*(_WORD *)(result + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)result);
      v8 = *((unsigned int *)v7 + 3);
    }
  }
  else
  {
    *(_DWORD *)(result + 24) -= 2;
  }
  result = (uint64_t)memmove((void *)v9, (const void *)(v9 + 8), *v7 + 8 * v8 - v11);
  v14 = *((_DWORD *)v7 + 3) - 1;
  *((_DWORD *)v7 + 3) = v14;
  if (!v14)
  {
LABEL_11:
    {
      WebCore::attrNodeListMap(void)::map = 0;
    }
    result = WTF::HashMap<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>(this, v6);
    *(_QWORD *)(this + 16) &= ~0x80000000000000uLL;
  }
  return result;
}

WTF::StringImpl **WebCore::Element::removeAttributeInternal(uint64_t a1, WTF::StringImpl *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::QualifiedName::QualifiedNameImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WebCore::TreeScope *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL hasPendingFullStyleRebuild;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  WTF::StringImpl ***v24;
  WTF::StringImpl *v25;
  WTF::StringImpl **v26;
  void *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WebCore::QualifiedName::QualifiedNameImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl **result;
  WTF *v37;
  void *v38;
  WTF *v39;
  void *v40;
  uint64_t *v41;
  void *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Inspector::InspectorDebuggerAgent **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WebCore::QualifiedName::QualifiedNameImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;

  v6 = WebCore::Element::ensureUniqueElementData((WebCore::Element *)a1);
  if (*(_DWORD *)(v6 + 52) <= a2)
  {
    __break(0xC471u);
    goto LABEL_124;
  }
  v7 = v6;
  v8 = a2;
  v9 = *(_QWORD *)(v6 + 40);
  v10 = *(WebCore::QualifiedName::QualifiedNameImpl **)(v9 + 16 * a2);
  if (v10)
    ++*(_DWORD *)v10;
  v65 = v10;
  v11 = *(WTF::StringImpl **)(v9 + 16 * a2 + 8);
  if (v11)
    *(_DWORD *)v11 += 2;
  v64 = v11;
  WebCore::Element::attrIfExists(a1, (uint64_t *)&v65, &v61);
  v14 = v61;
  if (v61)
  {
    if (*(_DWORD *)(v7 + 52) > a2)
    {
      WebCore::Element::detachAttrNodeFromElementWithValue(a1, v61, (const WTF::AtomString *)(*(_QWORD *)(v7 + 40) + 16 * a2 + 8), v13);
      if (*((_DWORD *)v14 + 6) == 2)
      {
        if ((*((_WORD *)v14 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v14);
      }
      else
      {
        *((_DWORD *)v14 + 6) -= 2;
      }
      goto LABEL_7;
    }
    __break(0xC471u);
LABEL_124:
    JUMPOUT(0x1959BF598);
  }
LABEL_7:
  if (a3)
  {
    WebCore::UniqueElementData::removeAttribute((WebCore::UniqueElementData *)v7, a2);
  }
  else
  {
    if (v65 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::idAttr)
    {
      WebCore::Element::updateId((WebCore::Element *)a1, (WTF::AtomString *)&v64, MEMORY[0x1E0CBF2F8], 0);
    }
    else if (v65 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::nameAttr)
    {
      if ((*(_BYTE *)(a1 + 22) & 0x18) != 0 && v64 != (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8])
      {
        WebCore::Element::updateNameForTreeScope((WebCore::Element *)a1, *(WebCore::TreeScope **)(a1 + 40), (const WTF::AtomString *)&v64, MEMORY[0x1E0CBF2F8]);
        if ((*(_QWORD *)(a1 + 16) & 0x18000000000000) == 0x8000000000000)
        {
          v57 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          if (v57)
          {
            if ((*(_WORD *)(v57 + 3358) & 1) != 0)
            {
              *(_DWORD *)(v57 + 24) += 2;
              WebCore::Element::updateNameForDocument((WebCore::Element *)a1, (WebCore::HTMLDocument *)v57, (const WTF::AtomString *)&v64, MEMORY[0x1E0CBF2F8]);
              if (*(_DWORD *)(v57 + 24) == 2)
              {
                if ((*(_WORD *)(v57 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v57);
              }
              else
              {
                *(_DWORD *)(v57 + 24) -= 2;
              }
            }
          }
        }
      }
    }
    else if (v65 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::forAttr
           && (*(_WORD *)(a1 + 28) & 0x10) != 0
           && *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::labelTag + 24))
    {
      v12 = *(_QWORD *)(a1 + 40);
      if (*(_QWORD *)(v12 + 56))
        WebCore::HTMLLabelElement::updateLabel((WebCore::HTMLLabelElement *)a1, (WebCore::TreeScopeOrderedMap **)v12, (const WTF::AtomString *)&v64, MEMORY[0x1E0CBF2F8]);
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 3364) & 2) != 0)
    {
      WebCore::MutationObserverInterestGroup::createIfNeeded(a1, 2, 32, (uint64_t)&v65, (uint64_t *)&v61);
      v41 = (uint64_t *)v61;
      if (v61)
      {
        WebCore::MutationRecord::createAttributes(a1, (uint64_t)&v65, (_DWORD **)&v64, (uint64_t *)&v67);
        WebCore::MutationObserverInterestGroup::enqueueMutationRecord(v41, &v67);
        v43 = v67;
        v67 = 0;
        if (v43)
        {
          if (*((_DWORD *)v43 + 2) == 1)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v43 + 8))(v43);
          else
            --*((_DWORD *)v43 + 2);
        }
        v61 = 0;
        if (*v41)
          WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::deallocateTable((WebCore::MutationObserver **)*v41, v42);
        WTF::fastFree((WTF *)v41, v42);
      }
    }
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    *(_DWORD *)(v15 + 24) += 2;
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v44 = *(_QWORD *)(v15 + 528);
      if (v44)
      {
        v45 = *(_QWORD *)(v44 + 8);
        if (v45)
        {
          v46 = *(_QWORD *)(v45 + 24);
          if (v46)
          {
            v47 = *(_QWORD *)(v46 + 8);
            if (v47)
              goto LABEL_83;
          }
        }
      }
      v52 = *(_QWORD *)(v15 + 2632);
      if (v52)
      {
        v53 = *(_QWORD *)(v52 + 8);
        if (v53)
        {
          v54 = *(_QWORD *)(v53 + 528);
          if (v54)
          {
            v55 = *(_QWORD *)(v54 + 8);
            if (v55)
            {
              v56 = *(_QWORD *)(v55 + 24);
              if (v56)
              {
                v47 = *(_QWORD *)(v56 + 8);
                if (v47)
                {
LABEL_83:
                  v48 = *(_QWORD *)(*(_QWORD *)(v47 + 80) + 8);
                  v49 = *(Inspector::InspectorDebuggerAgent ***)(v48 + 152);
                  if (v49)
                    WebCore::PageDOMDebuggerAgent::willModifyDOMAttr(v49, (WebCore::Element *)a1);
                  v50 = *(_QWORD *)(v48 + 40);
                  if (v50)
                    *(_BYTE *)(v50 + 438) = v64 == (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
                }
              }
            }
          }
        }
      }
    }
    if (*(_DWORD *)(v15 + 24) == 2)
    {
      if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v15);
    }
    else
    {
      *(_DWORD *)(v15 + 24) -= 2;
    }
    if ((*(_BYTE *)(a1 + 22) & 8) == 0)
      goto LABEL_29;
    v17 = *(uint64_t **)(a1 + 40);
    v18 = v17[1];
    if (!*(_QWORD *)(v18 + 1944) || *(_BYTE *)(v18 + 3405))
      goto LABEL_29;
    if ((*(_BYTE *)(a1 + 70) & 4) != 0)
    {
      v21 = *v17;
      v22 = (*(_WORD *)(v21 + 28) & 0x80) == 0 || v21 == 0;
      v23 = v21 + 216;
      if (v22)
        v23 = v18 + 1328;
      if (!*(_BYTE *)(*(_QWORD *)v23 + 236))
        goto LABEL_29;
    }
    v19 = *(_QWORD *)(v18 + 1272);
    if (v19 && (*(_BYTE *)(v19 + 70) & 4) != 0)
    {
LABEL_29:
      LOBYTE(v61) = 0;
      v62 = a1;
      v63 = 0;
    }
    else
    {
      hasPendingFullStyleRebuild = WebCore::Document::hasPendingFullStyleRebuild((WebCore::Document *)v18);
      LOBYTE(v61) = !hasPendingFullStyleRebuild;
      v62 = a1;
      v63 = 0;
      if (!hasPendingFullStyleRebuild)
      {
        WebCore::Style::AttributeChangeInvalidation::invalidateStyle((WTF::StringImpl *)&v61, (const WebCore::QualifiedName *)&v65, (const WTF::AtomString *)&v64, MEMORY[0x1E0CBF2F8]);
        WebCore::Style::AttributeChangeInvalidation::invalidateStyleWithRuleSets((WebCore::Style::AttributeChangeInvalidation *)&v61);
      }
    }
    v24 = (WTF::StringImpl ***)(*(_QWORD *)(v7 + 40) + 16 * v8);
    v25 = (WTF::StringImpl *)v24[1];
    v24[1] = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = *v24;
    *v24 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v26);
        WTF::fastFree(v39, v40);
      }
      else
      {
        --*(_DWORD *)v26;
      }
    }
    memmove(v24, v24 + 2, *(_QWORD *)(v7 + 40) + 16 * *(unsigned int *)(v7 + 52) - (_QWORD)(v24 + 2));
    --*(_DWORD *)(v7 + 52);
    if ((_BYTE)v61)
      WebCore::Style::AttributeChangeInvalidation::invalidateStyleWithRuleSets((WebCore::Style::AttributeChangeInvalidation *)&v61);
    if (v63)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(v63, v27);
    WebCore::Element::notifyAttributeChanged((WebCore::Element *)a1, (WTF::StringImpl ***)&v65, &v64, MEMORY[0x1E0CBF2F8]);
    v29 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    *(_DWORD *)(v29 + 24) += 2;
    v30 = v65;
    v31 = (WTF::StringImpl *)*((_QWORD *)v65 + 2);
    if (v31)
    {
      *(_DWORD *)v31 += 2;
      v61 = v31;
      v58 = (WTF::StringImpl *)*((_QWORD *)v30 + 3);
      if (v58)
        *(_DWORD *)v58 += 2;
      v67 = v58;
      WTF::makeAtomString<WTF::AtomString,char,WTF::AtomString>(&v61, 58, &v67, (WTF::AtomString *)&v66);
      v59 = v67;
      v67 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, v28);
        else
          *(_DWORD *)v59 -= 2;
      }
      v60 = v61;
      v61 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
          WTF::StringImpl::destroy(v60, v28);
        else
          *(_DWORD *)v60 -= 2;
      }
    }
    else
    {
      v32 = (WTF::StringImpl *)*((_QWORD *)v65 + 3);
      if (v32)
        *(_DWORD *)v32 += 2;
      v66 = v32;
    }
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v51 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)v29, v28);
      if (v51)
        WebCore::InspectorInstrumentation::didRemoveDOMAttrImpl(v51, (WebCore::Element *)a1, (const WTF::AtomString *)&v66);
    }
    v34 = v66;
    v66 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v28);
      else
        *(_DWORD *)v34 -= 2;
    }
    if (*(_DWORD *)(v29 + 24) == 2)
    {
      if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v29);
    }
    else
    {
      *(_DWORD *)(v29 + 24) -= 2;
    }
    WebCore::Node::dispatchSubtreeModifiedEvent(a1);
    v11 = v64;
  }
  v64 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v35);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = (WTF::StringImpl **)v65;
  v65 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
      return (WTF::StringImpl **)WTF::fastFree(v37, v38);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::Element::removeAttribute(WebCore::Element *this, const WebCore::QualifiedName *a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 13);
  if (!v2)
    return 0;
  v4 = *(_DWORD *)(v2 + 4);
  if ((v4 & 1) != 0)
  {
    v5 = *(uint64_t **)(v2 + 40);
    v6 = *(_DWORD *)(v2 + 52);
  }
  else
  {
    v5 = (uint64_t *)(v2 + 32);
    v6 = v4 >> 5;
  }
  if (!v6)
    return 0;
  v7 = 0;
  v8 = *(_QWORD *)a2;
  while (1)
  {
    v9 = *v5;
    if (*v5 == v8 || *(_QWORD *)(v9 + 24) == *(_QWORD *)(v8 + 24) && *(_QWORD *)(v9 + 32) == *(_QWORD *)(v8 + 32))
      break;
    v7 = (WTF::StringImpl *)((char *)v7 + 1);
    v5 += 2;
    if ((WTF::StringImpl *)v6 == v7)
      return 0;
  }
  WebCore::Element::removeAttributeInternal((uint64_t)this, v7, 0);
  return 1;
}

WTF::StringImpl **WebCore::Element::setBooleanAttribute(WTF::StringImpl **this, const WebCore::QualifiedName *a2, int a3, __n128 a4)
{
  WTF::StringImpl *v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  char v15;

  if (a3)
  {
    this = (WTF::StringImpl **)WebCore::Element::setAttribute((WebCore::Element *)this, a2, MEMORY[0x1E0CBF3B8], 0, &v13, a4);
    if (v15)
    {
      this = (WTF::StringImpl **)v14;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          return (WTF::StringImpl **)WTF::StringImpl::destroy(v14, v12);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }
  else
  {
    v5 = this[13];
    if (v5)
    {
      v6 = *((_DWORD *)v5 + 1);
      if ((v6 & 1) != 0)
      {
        v7 = (uint64_t *)*((_QWORD *)v5 + 5);
        v8 = *((_DWORD *)v5 + 13);
      }
      else
      {
        v7 = (uint64_t *)((char *)v5 + 32);
        v8 = v6 >> 5;
      }
      if (v8)
      {
        v9 = 0;
        v10 = *(_QWORD *)a2;
        while (1)
        {
          v11 = *v7;
          if (*v7 == v10
            || *(_QWORD *)(v11 + 24) == *(_QWORD *)(v10 + 24) && *(_QWORD *)(v11 + 32) == *(_QWORD *)(v10 + 32))
          {
            break;
          }
          v9 = (WTF::StringImpl *)((char *)v9 + 1);
          v7 += 2;
          if ((WTF::StringImpl *)v8 == v9)
            return this;
        }
        return WebCore::Element::removeAttributeInternal((uint64_t)this, v9, 0);
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::Element::synchronizeAllAttributes(WTF::StringImpl *this, unsigned __int8 *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  WTF::StringImpl *v6;

  v5 = *((_QWORD *)this + 13);
  if (v5)
  {
    v6 = this;
    if ((*(_BYTE *)(v5 + 4) & 8) != 0)
      this = WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(this, a2, a5, a3, a4);
    if ((*((_WORD *)v6 + 14) & 0x20) != 0)
      return WebCore::SVGElement::synchronizeAllAttributes(v6);
  }
  return this;
}

WebCore::SVGElement *WebCore::Element::getAttributeNames@<X0>(WebCore::SVGElement *this@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, WTF::String *a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v7;
  WebCore::SVGElement *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  WebCore::SVGElement *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  char v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  WTF::StringImpl *v29;
  _DWORD *v30;

  v7 = *((_QWORD *)this + 13);
  if (v7)
  {
    v8 = this;
    if ((*(_BYTE *)(v7 + 4) & 8) != 0)
      this = WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(this, a2, a6, a3, a4);
    if ((*((_WORD *)v8 + 14) & 0x20) != 0)
      this = WebCore::SVGElement::synchronizeAllAttributes(v8);
    v9 = *((_QWORD *)v8 + 13);
    if (v9)
    {
      v10 = *(_DWORD *)(v9 + 4);
      if ((v10 & 1) != 0)
      {
        v12 = *(_DWORD *)(v9 + 52);
        if (v12)
        {
          v11 = *(_QWORD *)(v9 + 40);
          *(_QWORD *)(a5 + 8) = 0;
          if (v12 >> 29)
          {
            __break(0xC471u);
            goto LABEL_45;
          }
LABEL_10:
          this = (WebCore::SVGElement *)WTF::fastMalloc((WTF *)(8 * v12));
          v13 = this;
          v14 = 0;
          v15 = 0;
          *(_DWORD *)(a5 + 8) = v12;
          *(_QWORD *)a5 = this;
          while (1)
          {
            v16 = *(_QWORD *)(v11 + 16 * v15);
            v17 = *(WTF::StringImpl **)(v16 + 16);
            if (v17)
            {
              *(_DWORD *)v17 += 2;
              v20 = *(_QWORD *)(v16 + 24);
              if (v20)
              {
                v21 = *(_DWORD *)(v20 + 4);
                *(_DWORD *)v20 += 2;
                if (v21 < 0)
                  goto LABEL_43;
              }
              else
              {
                v21 = 0;
              }
              v22 = *((_DWORD *)v17 + 1);
              v23 = __OFADD__(v21, 1);
              v24 = v21 + 1;
              v25 = v23;
              if (v22 < 0 || (v25 & 1) != 0 || (v26 = (v22 + v24), __OFADD__(v22, v24)))
              {
LABEL_43:
                v30 = 0;
LABEL_44:
                __break(0xC471u);
LABEL_45:
                JUMPOUT(0x1959BF878);
              }
              v27 = *((_DWORD *)v17 + 4);
              if (v20)
                v28 = (*((_DWORD *)v17 + 4) & 4) == 0;
              else
                v28 = 1;
              if (!v28)
                v27 = *(unsigned __int8 *)(v20 + 16);
              this = (WebCore::SVGElement *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v26, (v27 >> 2) & 1, (uint64_t)v17, 58, v20, &v30);
              if (!v30)
                goto LABEL_44;
              if (v20)
              {
                if (*(_DWORD *)v20 == 2)
                  this = (WebCore::SVGElement *)WTF::StringImpl::destroy((WTF::StringImpl *)v20, v29);
                else
                  *(_DWORD *)v20 -= 2;
              }
              if (*(_DWORD *)v17 == 2)
                this = (WebCore::SVGElement *)WTF::StringImpl::destroy(v17, v29);
              else
                *(_DWORD *)v17 -= 2;
            }
            else
            {
              v18 = *(_DWORD **)(v16 + 24);
              if (v18)
                *v18 += 2;
              v30 = v18;
            }
            *((_QWORD *)v13 + v14++) = v30;
            *(_DWORD *)(a5 + 12) = v14;
            v19 = v15 + 1;
            v15 = (v15 + 1);
            if (v12 == v19)
              return this;
          }
        }
      }
      else if (v10 >= 0x20)
      {
        v11 = v9 + 32;
        v12 = v10 >> 5;
        *(_QWORD *)(a5 + 8) = 0;
        goto LABEL_10;
      }
    }
  }
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  return this;
}

uint64_t WebCore::Element::hasFocusableStyle(WebCore::Element *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t result;
  int v5;

  v1 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v1)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      v1 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
    if ((*(_DWORD *)(v1 + 96) & 0x17 | 8) != 0x1A && (*(_BYTE *)(v1 + 120) & 0x30) == 0)
    {
      v2 = *(_DWORD *)(*(_QWORD *)(v1 + 104) + 236);
      if ((v2 & 0x1000000) == 0)
      {
        if ((v2 & 0x18000000) == 0x10000000)
        {
          v3 = v1 + 88;
          return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 40) + 636) & 0xC0000) != 0;
        }
        return 1;
      }
    }
  }
  else
  {
    result = (uint64_t)WebCore::Element::resolveComputedStyle((uint64_t)this, 1);
    if (!result)
      return result;
    if ((*(_DWORD *)(result + 16) & 0x17 | 8) != 0x1A && (*(_BYTE *)(result + 40) & 0x30) == 0)
    {
      v5 = *(_DWORD *)(*(_QWORD *)(result + 24) + 236);
      if ((v5 & 0x1000000) == 0)
      {
        if ((v5 & 0x18000000) == 0x10000000)
        {
          v3 = result + 8;
          return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 40) + 636) & 0xC0000) != 0;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t WebCore::Element::isFocusable(WebCore::Element *this)
{
  uint64_t result;
  uint64_t v3;
  __int16 v4;
  void *v5;
  int hasFocusableStyle;

  if ((*((_BYTE *)this + 22) & 8) == 0
    || !(*(unsigned int (**)(WebCore::Element *))(*(_QWORD *)this + 544))(this))
  {
    return 0;
  }
  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v3 = *((_QWORD *)this + 4);
    if (!v3)
      return WebCore::Element::hasFocusableStyle(this);
    v4 = *(_WORD *)(v3 + 28);
    if ((v4 & 8) == 0)
      return WebCore::Element::hasFocusableStyle(this);
    while ((v4 & 0x10) == 0
         || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::canvasTag + 24))
    {
      v3 = *(_QWORD *)(v3 + 32);
      if (v3)
      {
        v4 = *(_WORD *)(v3 + 28);
        if ((v4 & 8) != 0)
          continue;
      }
      return WebCore::Element::hasFocusableStyle(this);
    }
    *(_DWORD *)(v3 + 24) += 2;
    hasFocusableStyle = WebCore::Element::hasFocusableStyle((WebCore::Element *)v3);
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, v5);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
    if (hasFocusableStyle)
      return WebCore::Element::hasFocusableStyle(this);
    return 0;
  }
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    return WebCore::Element::hasFocusableStyle(this);
  result = 105;
  __break(0xC471u);
  return result;
}

BOOL WebCore::Element::isUserActionElementInActiveChain(WebCore::Element *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WebCore::Element *v10;
  int v11;
  int v13;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v3 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v3 + 2;
  v4 = *(_QWORD *)(v2 + 1280);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WebCore::Element **)(v4 + 16 * v9);
    if (v10 == this)
    {
LABEL_3:
      v11 = *(_DWORD *)(v4 + 16 * v9 + 8) & 2;
      goto LABEL_4;
    }
    v13 = 1;
    while (v10)
    {
      v9 = ((_DWORD)v9 + v13) & v5;
      v10 = *(WebCore::Element **)(v4 + 16 * v9);
      ++v13;
      if (v10 == this)
        goto LABEL_3;
    }
  }
  v11 = 0;
LABEL_4:
  if (v3)
  {
    *(_DWORD *)(v2 + 24) = v3;
  }
  else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v2);
  }
  return v11 != 0;
}

BOOL WebCore::Element::isUserActionElementActive(WebCore::Element *this)
{
  uint64_t v1;
  int v2;
  _BOOL8 hasFlag;

  v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v2 = *(_DWORD *)(v1 + 24);
  *(_DWORD *)(v1 + 24) = v2 + 2;
  hasFlag = WebCore::UserActionElementSet::hasFlag((uint64_t *)(v1 + 1280), (uint64_t)this, 1);
  if (v2)
  {
    *(_DWORD *)(v1 + 24) = v2;
  }
  else if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  return hasFlag;
}

BOOL WebCore::Element::isUserActionElementFocused(WebCore::Element *this)
{
  uint64_t v1;
  int v2;
  _BOOL8 hasFlag;

  v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v2 = *(_DWORD *)(v1 + 24);
  *(_DWORD *)(v1 + 24) = v2 + 2;
  hasFlag = WebCore::UserActionElementSet::hasFlag((uint64_t *)(v1 + 1280), (uint64_t)this, 8);
  if (v2)
  {
    *(_DWORD *)(v1 + 24) = v2;
  }
  else if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  return hasFlag;
}

BOOL WebCore::Element::isUserActionElementHovered(WebCore::Element *this)
{
  uint64_t v1;
  int v2;
  _BOOL8 hasFlag;

  v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v2 = *(_DWORD *)(v1 + 24);
  *(_DWORD *)(v1 + 24) = v2 + 2;
  hasFlag = WebCore::UserActionElementSet::hasFlag((uint64_t *)(v1 + 1280), (uint64_t)this, 4);
  if (v2)
  {
    *(_DWORD *)(v1 + 24) = v2;
  }
  else if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  return hasFlag;
}

BOOL WebCore::Element::isUserActionElementDragged(WebCore::Element *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WebCore::Element *v10;
  int v11;
  int v13;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v3 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v3 + 2;
  v4 = *(_QWORD *)(v2 + 1280);
  if (!v4)
    goto LABEL_10;
  v5 = *(_DWORD *)(v4 - 8);
  v6 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  v10 = *(WebCore::Element **)(v4 + 16 * v9);
  if (v10 != this)
  {
    v13 = 1;
    while (v10)
    {
      v9 = ((_DWORD)v9 + v13) & v5;
      v10 = *(WebCore::Element **)(v4 + 16 * v9);
      ++v13;
      if (v10 == this)
        goto LABEL_3;
    }
LABEL_10:
    v11 = 0;
    if (v3)
      goto LABEL_4;
    goto LABEL_11;
  }
LABEL_3:
  v11 = *(_DWORD *)(v4 + 16 * v9 + 8) & 0x10;
  if (v3)
  {
LABEL_4:
    *(_DWORD *)(v2 + 24) = v3;
    return v11 != 0;
  }
LABEL_11:
  if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v2);
  return v11 != 0;
}

BOOL WebCore::Element::isUserActionElementHasFocusVisible(WebCore::Element *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WebCore::Element *v10;
  int v11;
  int v13;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v3 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v3 + 2;
  v4 = *(_QWORD *)(v2 + 1280);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WebCore::Element **)(v4 + 16 * v9);
    if (v10 == this)
    {
LABEL_3:
      v11 = *(_DWORD *)(v4 + 16 * v9 + 8) & 0x20;
      goto LABEL_4;
    }
    v13 = 1;
    while (v10)
    {
      v9 = ((_DWORD)v9 + v13) & v5;
      v10 = *(WebCore::Element **)(v4 + 16 * v9);
      ++v13;
      if (v10 == this)
        goto LABEL_3;
    }
  }
  v11 = 0;
LABEL_4:
  if (v3)
  {
    *(_DWORD *)(v2 + 24) = v3;
  }
  else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v2);
  }
  return v11 != 0;
}

uint64_t WebCore::Element::asFormListedElement(WebCore::Element *this)
{
  return 0;
}

uint64_t WebCore::Element::asValidatedFormListedElement(WebCore::Element *this)
{
  return 0;
}

uint64_t WebCore::Element::asAttachmentAssociatedElement(WebCore::Element *this)
{
  return 0;
}

BOOL WebCore::Element::isUserActionElementHasFocusWithin(WebCore::Element *this)
{
  uint64_t v1;
  int v2;
  _BOOL8 hasFlag;

  v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v2 = *(_DWORD *)(v1 + 24);
  *(_DWORD *)(v1 + 24) = v2 + 2;
  hasFlag = WebCore::UserActionElementSet::hasFlag((uint64_t *)(v1 + 1280), (uint64_t)this, 64);
  if (v2)
  {
    *(_DWORD *)(v1 + 24) = v2;
  }
  else if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  return hasFlag;
}

void WebCore::Element::setActive(uint64_t a1, void *a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  _BYTE v23[32];

  v3 = a3;
  v4 = (int)a2;
  v5 = a1;
  if ((*(_BYTE *)(a1 + 54) & 2) == 0)
  {
    if ((a2 & 1) == 0)
      return;
    goto LABEL_10;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(_DWORD *)(v6 + 24);
  *(_DWORD *)(v6 + 24) = v7 + 2;
  v8 = *(_QWORD *)(v6 + 1280);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(_QWORD *)(v8 + 16 * v13);
    if (v14 == v5)
    {
LABEL_6:
      v15 = *(_BYTE *)(v8 + 16 * v13 + 8) & 1;
      goto LABEL_7;
    }
    v20 = 1;
    while (v14)
    {
      v13 = ((_DWORD)v13 + v20) & v9;
      v14 = *(_QWORD *)(v8 + 16 * v13);
      ++v20;
      if (v14 == v5)
        goto LABEL_6;
    }
  }
  v15 = 0;
LABEL_7:
  if (v7)
  {
    *(_DWORD *)(v6 + 24) = v7;
  }
  else if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
  {
    v21 = v5;
    WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    v3 = a3;
    v5 = v21;
  }
  if (v15 != v4)
  {
LABEL_10:
    v16 = (_QWORD *)v5;
    WebCore::Style::PseudoClassChangeInvalidation::PseudoClassChangeInvalidation((uint64_t)v23, v5, (WTF::StringImpl *)0xB, v4, v3);
    WebCore::UserActionElementSet::setFlags((uint64_t *)(*(_QWORD *)(v16[5] + 8) + 1280), (uint64_t)v16, v4, 1);
    WebCore::Style::PseudoClassChangeInvalidation::~PseudoClassChangeInvalidation((WebCore::Style::PseudoClassChangeInvalidation *)v23, v17);
    v18 = v16[8] & 0xFFFFFFFFFFFFLL;
    if (v18)
    {
      if ((*(_BYTE *)((v16[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        goto LABEL_24;
      ++*(_DWORD *)((v16[8] & 0xFFFFFFFFFFFFLL) + 0x10);
      if (((*(uint64_t (**)(_QWORD *))(*v16 + 960))(v16) & 1) == 0
        && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 88) + 32) + 148) & 0x1FC000) != 0)
      {
        WebCore::RenderObject::repaint(v18, 0);
      }
      v19 = *(_DWORD *)(v18 + 16);
      if (!v19)
      {
LABEL_24:
        __break(0xC471u);
        JUMPOUT(0x1959C0188);
      }
      *(_DWORD *)(v18 + 16) = v19 - 1;
    }
  }
}

uint64_t WebCore::Style::PseudoClassChangeInvalidation::PseudoClassChangeInvalidation(uint64_t a1, uint64_t a2, WTF::StringImpl *a3, int a4, int a5)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v12;
  BOOL hasPendingFullStyleRebuild;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if ((*(_BYTE *)(a2 + 22) & 8) == 0)
    goto LABEL_15;
  v7 = *(uint64_t **)(a2 + 40);
  v8 = v7[1];
  if (!*(_QWORD *)(v8 + 1944) || *(_BYTE *)(v8 + 3405))
    goto LABEL_15;
  if ((*(_BYTE *)(a2 + 70) & 4) != 0)
  {
    v14 = *v7;
    v15 = (*(_WORD *)(v14 + 28) & 0x80) == 0 || v14 == 0;
    v16 = v14 + 216;
    if (v15)
      v16 = v8 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v16 + 236))
      goto LABEL_15;
  }
  v12 = *(_QWORD *)(v8 + 1272);
  if (v12 && (*(_BYTE *)(v12 + 70) & 4) != 0)
  {
LABEL_15:
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    hasPendingFullStyleRebuild = WebCore::Document::hasPendingFullStyleRebuild((WebCore::Document *)v8);
    *(_BYTE *)a1 = !hasPendingFullStyleRebuild;
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    if (!hasPendingFullStyleRebuild)
    {
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)a1, a3, a4, a5);
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(*(_QWORD *)(a1 + 8), (unsigned __int8 **)(a1 + 16));
    }
  }
  return a1;
}

uint64_t WebCore::Element::setFocus(uint64_t result, _BOOL8 a2, char a3)
{
  _BOOL8 HaveFocusVisibleWhenFocused;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL hasPendingFullStyleRebuild;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  int v38;
  void *v39;
  int v40;
  uint64_t v41;
  int v42;
  void *v43;
  _BOOL4 hasFlag;
  uint64_t v45;
  WebCore::Node *ElementSibling;
  WebCore::Element *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;

  HaveFocusVisibleWhenFocused = a2;
  v5 = result;
  if ((*(_BYTE *)(result + 54) & 2) != 0)
  {
    v37 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8);
    v38 = *(_DWORD *)(v37 + 24);
    *(_DWORD *)(v37 + 24) = v38 + 2;
    result = WebCore::UserActionElementSet::hasFlag((uint64_t *)(v37 + 1280), result, 8);
    v40 = result;
    if (v38)
    {
      *(_DWORD *)(v37 + 24) = v38;
    }
    else if ((*(_WORD *)(v37 + 30) & 0x400) == 0)
    {
      result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v37, v39);
    }
    if (v40 == HaveFocusVisibleWhenFocused)
      return result;
  }
  else if (!a2)
  {
    return result;
  }
  if ((*(_BYTE *)(v5 + 22) & 8) == 0)
    goto LABEL_17;
  v6 = *(uint64_t **)(v5 + 40);
  v7 = v6[1];
  if (!*(_QWORD *)(v7 + 1944) || *(_BYTE *)(v7 + 3405))
    goto LABEL_17;
  if ((*(_BYTE *)(v5 + 70) & 4) != 0)
  {
    v10 = *v6;
    v11 = (*(_WORD *)(v10 + 28) & 0x80) == 0 || v10 == 0;
    v12 = v10 + 216;
    if (v11)
      v12 = v7 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v12 + 236))
      goto LABEL_17;
  }
  v8 = *(_QWORD *)(v7 + 1272);
  if (v8 && (*(_BYTE *)(v8 + 70) & 4) != 0)
  {
LABEL_17:
    LOBYTE(v48) = 0;
    v50 = 0;
    v51 = 0;
    v49 = v5;
  }
  else
  {
    hasPendingFullStyleRebuild = WebCore::Document::hasPendingFullStyleRebuild((WebCore::Document *)v7);
    LOBYTE(v48) = !hasPendingFullStyleRebuild;
    v50 = 0;
    v51 = 0;
    v49 = v5;
    if (!hasPendingFullStyleRebuild)
    {
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v48, (WTF::StringImpl *)0x1D, HaveFocusVisibleWhenFocused, 0);
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v48, (WTF::StringImpl *)0x1E, HaveFocusVisibleWhenFocused, 0);
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v49, &v50);
    }
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
  *(_DWORD *)(v13 + 24) += 2;
  v14 = (uint64_t *)(v13 + 1280);
  if (HaveFocusVisibleWhenFocused)
    WebCore::UserActionElementSet::setFlags(v14, v5, 8);
  else
    WebCore::UserActionElementSet::clearFlags(v14, v5, 8);
  if (*(_DWORD *)(v13 + 24) == 2)
  {
    if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v13, v15);
  }
  else
  {
    *(_DWORD *)(v13 + 24) -= 2;
  }
  v16 = **(_QWORD **)(v5 + 40);
  if (v16)
    v17 = (*(_WORD *)(v16 + 28) & 0x80) == 0;
  else
    v17 = 1;
  if (v17)
    goto LABEL_39;
  *(_DWORD *)(v16 + 24) += 2;
  v52 = v16;
  v18 = HaveFocusVisibleWhenFocused ? 16 : 0;
  do
  {
    *(_BYTE *)(v16 + 192) = *(_BYTE *)(v16 + 192) & 0xEF | v18;
    v19 = *(_QWORD *)(v16 + 200);
    if (v19)
      v20 = *(_QWORD *)(v19 + 8);
    else
      v20 = 0;
    WebCore::Node::invalidateStyle(v20, 3u, 0);
    if ((*(_BYTE *)(v20 + 71) & 1) != 0)
    {
      v45 = *(_QWORD *)(v20 + 32);
      if (!v45 || (*(_WORD *)(v45 + 28) & 8) == 0 || (*(_BYTE *)(v45 + 70) & 4) == 0)
      {
        ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling(v20);
        WebCore::invalidateForSiblingCombinators(ElementSibling, v47);
      }
    }
    if ((*(_WORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v52 + 200) + 8) + 40) + 28) & 0x80) != 0)
      v21 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v52 + 200) + 8) + 40);
    else
      v21 = 0;
    WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=(&v52, v21);
    v16 = v52;
  }
  while (v52);
  if (v5)
  {
LABEL_39:
    *(_DWORD *)(v5 + 24) += 2;
    v23 = v5;
    while (1)
    {
      v24 = v23;
      if ((*(_BYTE *)(v23 + 54) & 2) != 0)
        break;
      if (HaveFocusVisibleWhenFocused)
        goto LABEL_42;
LABEL_67:
      v35 = WebCore::Node::parentElementInComposedTree((WebCore::Node *)v24);
      v23 = v35;
      if (v35)
        *(_DWORD *)(v35 + 24) += 2;
      if (*(_DWORD *)(v24 + 24) == 2)
      {
        if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v24, v22);
      }
      else
      {
        *(_DWORD *)(v24 + 24) -= 2;
      }
      if (!v23)
        goto LABEL_78;
    }
    v41 = *(_QWORD *)(*(_QWORD *)(v23 + 40) + 8);
    v42 = *(_DWORD *)(v41 + 24);
    *(_DWORD *)(v41 + 24) = v42 + 2;
    hasFlag = WebCore::UserActionElementSet::hasFlag((uint64_t *)(v41 + 1280), v24, 64);
    if (v42)
    {
      *(_DWORD *)(v41 + 24) = v42;
    }
    else if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v41, v43);
    }
    if (hasFlag == HaveFocusVisibleWhenFocused)
      goto LABEL_67;
LABEL_42:
    if ((*(_BYTE *)(v24 + 22) & 8) == 0)
      goto LABEL_56;
    v25 = *(uint64_t **)(v24 + 40);
    v26 = v25[1];
    if (!*(_QWORD *)(v26 + 1944) || *(_BYTE *)(v26 + 3405))
      goto LABEL_56;
    if ((*(_BYTE *)(v24 + 70) & 4) != 0)
    {
      v29 = *v25;
      v30 = (*(_WORD *)(v29 + 28) & 0x80) == 0 || v29 == 0;
      v31 = v29 + 216;
      if (v30)
        v31 = v26 + 1328;
      if (!*(_BYTE *)(*(_QWORD *)v31 + 236))
        goto LABEL_56;
    }
    v27 = *(_QWORD *)(v26 + 1272);
    if (v27 && (*(_BYTE *)(v27 + 70) & 4) != 0)
    {
LABEL_56:
      LOBYTE(v52) = 0;
      v53 = v24;
      v54 = 0;
      v55 = 0;
    }
    else
    {
      v28 = WebCore::Document::hasPendingFullStyleRebuild((WebCore::Document *)v26);
      LOBYTE(v52) = !v28;
      v53 = v24;
      v54 = 0;
      v55 = 0;
      if (!v28)
      {
        WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v52, (WTF::StringImpl *)0x1F, HaveFocusVisibleWhenFocused, 0);
        WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v53, &v54);
      }
    }
    v32 = *(_QWORD *)(*(_QWORD *)(v24 + 40) + 8);
    *(_DWORD *)(v32 + 24) += 2;
    v33 = (uint64_t *)(v32 + 1280);
    if (HaveFocusVisibleWhenFocused)
      WebCore::UserActionElementSet::setFlags(v33, v24, 64);
    else
      WebCore::UserActionElementSet::clearFlags(v33, v24, 64);
    if (*(_DWORD *)(v32 + 24) == 2)
    {
      if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v32, v34);
    }
    else
    {
      *(_DWORD *)(v32 + 24) -= 2;
    }
    if ((_BYTE)v52)
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v53, &v55);
    if (v55)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v55, v34);
    if (v54)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v54, v34);
    goto LABEL_67;
  }
LABEL_78:
  if (HaveFocusVisibleWhenFocused && (a3 & 1) == 0)
    HaveFocusVisibleWhenFocused = WebCore::shouldAlwaysHaveFocusVisibleWhenFocused((WebCore *)v5, (const WebCore::Element *)v22);
  WebCore::Element::setHasFocusVisible(v5, (void *)HaveFocusVisibleWhenFocused);
  if ((_BYTE)v48)
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v49, &v51);
  if (v51)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v51, v36);
  result = (uint64_t)v50;
  if (v50)
    return WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v50, v36);
  return result;
}

WebCore::Node *WebCore::Element::invalidateStyle(WebCore::Node *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  WebCore::Node *v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::Node *ElementSibling;
  WebCore::Element *v35;

  v1 = (uint64_t)this;
  if ((*((_BYTE *)this + 22) & 8) == 0)
    goto LABEL_48;
  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (!*(_QWORD *)(v2 + 1944))
    goto LABEL_48;
  if (*(_BYTE *)(v2 + 3405))
    goto LABEL_48;
  if (*(_BYTE *)(v2 + 3392))
    goto LABEL_48;
  *((_WORD *)this + 15) |= 0x10u;
  v3 = *((_QWORD *)this + 8);
  v4 = HIWORD(v3) & 7;
  if (v4 > 2)
    goto LABEL_48;
  *((_QWORD *)this + 8) = v3 & 0xFFF8FFFFFFFFFFFFLL | 0x3000000000000;
  if ((_DWORD)v4)
    goto LABEL_48;
  *((_DWORD *)this + 6) += 2;
  v5 = *((unsigned __int16 *)this + 14);
  if ((v5 & 0x80) != 0)
  {
    v13 = *((_QWORD *)this + 25);
    if (!v13)
      goto LABEL_39;
LABEL_32:
    v6 = *(WebCore::Node **)(v13 + 8);
    goto LABEL_33;
  }
  if ((~v5 & 0x408) == 0)
  {
    this = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)this + 368))(this);
    if ((_DWORD)this)
    {
      v13 = *(_QWORD *)(v1 + 112);
      if (!v13)
        goto LABEL_39;
      goto LABEL_32;
    }
  }
  v6 = *(WebCore::Node **)(v1 + 32);
  if (!v6)
    goto LABEL_39;
  v7 = *((_WORD *)v6 + 14);
  if ((v7 & 0x80) != 0)
  {
    v13 = *((_QWORD *)v6 + 25);
    if (!v13)
      goto LABEL_39;
    goto LABEL_32;
  }
  if ((v7 & 8) == 0)
    goto LABEL_39;
  if ((*((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL) == 0
    || (v11 = *(_QWORD *)((*((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL) + 0x58)) == 0)
  {
LABEL_14:
    *((_QWORD *)v6 + 8) |= 0x10000000000000uLL;
    do
    {
      if ((*((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v10 = *(_QWORD *)((*((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
        if (v10)
          *(_QWORD *)(v10 + 64) |= 0x8000000000000uLL;
      }
      v8 = *((_QWORD *)v6 + 8);
      if ((v8 & 0x8000000000000) != 0)
        break;
      *((_QWORD *)v6 + 8) = v8 | 0x8000000000000;
      this = (WebCore::Node *)*((_QWORD *)v6 + 4);
      if (!this)
        break;
      v9 = *((_WORD *)this + 14);
      if ((v9 & 0x80) != 0)
      {
        v14 = *((_QWORD *)this + 25);
        if (!v14)
          break;
        this = *(WebCore::Node **)(v14 + 8);
      }
      else
      {
        if ((v9 & 8) == 0)
          break;
        if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
        {
          v12 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
          if (v12)
          {
            this = *(WebCore::Node **)(v12 + 224);
            if (!this)
              break;
            this = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)this + 16))(this);
          }
        }
      }
      v6 = this;
    }
    while (this);
    if (!v1)
      goto LABEL_41;
    goto LABEL_39;
  }
  this = *(WebCore::Node **)(v11 + 224);
  if (!this)
    goto LABEL_39;
  this = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *, uint64_t))(*(_QWORD *)this + 16))(this, v1);
  v6 = this;
LABEL_33:
  if (v6)
    goto LABEL_14;
LABEL_39:
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    v22 = *(_WORD *)(v1 + 30);
    if ((v22 & 0x400) == 0)
    {
      v23 = *(_WORD *)(v1 + 28);
      if ((v23 & 0xF000) == 0x9000)
      {
        this = (WebCore::Node *)WebCore::Document::removedLastRef((WebCore::Document *)v1);
      }
      else
      {
        if ((v23 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 160) + 16))(*(_QWORD *)(v1 + 160));
          v22 = *(_WORD *)(v1 + 30);
        }
        *(_WORD *)(v1 + 30) = v22 | 0x400;
        this = (WebCore::Node *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1);
      }
    }
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
LABEL_41:
  v15 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8);
  v16 = *(_QWORD *)(v15 + 1272);
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 64);
    if ((v17 & 0x8000000000000) != 0 || (v17 & 0x7000000000000) != 0 || (*(_WORD *)(v16 + 30) & 0x20) != 0)
    {
      *(_DWORD *)(v15 + 24) += 2;
      *(_QWORD *)(v15 + 64) |= 0x8000000000000uLL;
      if (((*(_QWORD *)(v15 + 1536) & 0xFFFFFFFFFFFFLL) == 0
         || *(double *)((*(_QWORD *)(v15 + 1536) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
        && !*(_BYTE *)(v15 + 3362))
      {
        *(_QWORD *)(v15 + 1528) = 0;
        WTF::MonotonicTime::now(this);
        this = (WebCore::Node *)WebCore::TimerBase::setNextFireTime(v15 + 1504, v18 + 0.0);
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v24 = *(_QWORD *)(v15 + 528);
          if (v24)
          {
            v25 = *(_QWORD *)(v24 + 8);
            if (v25)
            {
              v26 = *(_QWORD *)(v25 + 24);
              if (v26)
              {
                v27 = *(_QWORD *)(v26 + 8);
                if (v27)
                  goto LABEL_67;
              }
            }
          }
          v28 = *(_QWORD *)(v15 + 2632);
          if (v28)
          {
            v29 = *(_QWORD *)(v28 + 8);
            if (v29)
            {
              v30 = *(_QWORD *)(v29 + 528);
              if (v30)
              {
                v31 = *(_QWORD *)(v30 + 8);
                if (v31)
                {
                  v32 = *(_QWORD *)(v31 + 24);
                  if (v32)
                  {
                    v27 = *(_QWORD *)(v32 + 8);
                    if (v27)
                    {
LABEL_67:
                      this = *(WebCore::Node **)(*(_QWORD *)(v27 + 80) + 8);
                      if (this)
                        this = WebCore::InspectorInstrumentation::didScheduleStyleRecalculationImpl(this, (WebCore::Document *)v15);
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        v20 = *(_WORD *)(v15 + 30);
        if ((v20 & 0x400) == 0)
        {
          v21 = *(_WORD *)(v15 + 28);
          if ((v21 & 0xF000) == 0x9000)
          {
            this = (WebCore::Node *)WebCore::Document::removedLastRef((WebCore::Document *)v15);
          }
          else
          {
            if ((v21 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v15 + 160) + 16))(*(_QWORD *)(v15 + 160));
              v20 = *(_WORD *)(v15 + 30);
            }
            *(_WORD *)(v15 + 30) = v20 | 0x400;
            this = (WebCore::Node *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
          }
        }
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
    }
  }
LABEL_48:
  if ((*(_BYTE *)(v1 + 71) & 1) != 0)
  {
    v33 = *(_QWORD *)(v1 + 32);
    if (!v33 || (*(_WORD *)(v33 + 28) & 8) == 0 || (*(_BYTE *)(v33 + 70) & 4) == 0)
    {
      ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling(v1);
      return WebCore::invalidateForSiblingCombinators(ElementSibling, v35);
    }
  }
  return this;
}

uint64_t WebCore::Element::setHasFocusVisible(uint64_t this, void *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t *v7;
  int v8;

  v2 = (int)a2;
  v3 = this;
  v4 = *(_QWORD *)(*(_QWORD *)(this + 40) + 8);
  v5 = *(_DWORD *)(v4 + 24);
  v6 = v5 + 2;
  *(_DWORD *)(v4 + 24) = v5 + 2;
  if ((*(_BYTE *)(this + 54) & 2) == 0)
  {
    if (!(_DWORD)a2)
      goto LABEL_5;
    v7 = (uint64_t *)(v4 + 1280);
    goto LABEL_4;
  }
  *(_DWORD *)(v4 + 24) = v5 + 4;
  v7 = (uint64_t *)(v4 + 1280);
  this = WebCore::UserActionElementSet::hasFlag((uint64_t *)(v4 + 1280), this, 32);
  v8 = this;
  if (v6)
  {
    *(_DWORD *)(v4 + 24) = v6;
  }
  else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
  {
    this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  }
  if (v8 != v2)
  {
    if (v2)
    {
LABEL_4:
      this = (uint64_t)WebCore::UserActionElementSet::setFlags(v7, v3, 32);
      goto LABEL_5;
    }
    this = (uint64_t)WebCore::UserActionElementSet::clearFlags((uint64_t *)(v4 + 1280), v3, 32);
  }
LABEL_5:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return this;
}

BOOL WebCore::shouldAlwaysHaveFocusVisibleWhenFocused(WebCore *this, const WebCore::Element *a2)
{
  uint64_t v3;

  v3 = 1;
  if (((*(uint64_t (**)(WebCore *, const WebCore::Element *))(*(_QWORD *)this + 880))(this, a2) & 1) == 0
    && !WebCore::Node::computeEditability((uint64_t)this, 1, 0))
  {
    return (*((_WORD *)this + 14) & 0x10) != 0
        && *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24);
  }
  return v3;
}

uint64_t WebCore::Element::setHasTentativeFocus(uint64_t this, int a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = this;
  *(_DWORD *)(this + 24) += 2;
  v4 = *(unsigned __int16 *)(this + 28);
  if ((v4 & 0x80) != 0)
  {
    v13 = *(_QWORD *)(this + 200);
    if (!v13)
      goto LABEL_31;
LABEL_38:
    v5 = *(_QWORD *)(v13 + 8);
    goto LABEL_39;
  }
  if ((~v4 & 0x408) == 0)
  {
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 368))(this);
    if ((_DWORD)this)
    {
      v13 = *(_QWORD *)(v3 + 112);
      if (!v13)
        goto LABEL_31;
      goto LABEL_38;
    }
  }
  v5 = *(_QWORD *)(v3 + 32);
  if (!v5)
    goto LABEL_31;
  v6 = *(_WORD *)(v5 + 28);
  if ((v6 & 0x80) != 0)
  {
    v13 = *(_QWORD *)(v5 + 200);
    if (!v13)
      goto LABEL_31;
    goto LABEL_38;
  }
  if ((v6 & 8) == 0)
    goto LABEL_31;
  if ((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_8;
  v11 = *(_QWORD *)((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
  if (!v11)
    goto LABEL_8;
  this = *(_QWORD *)(v11 + 224);
  if (!this)
    goto LABEL_31;
  this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)this + 16))(this, v3);
  v5 = this;
LABEL_39:
  if (v5)
  {
    do
    {
LABEL_8:
      *(_DWORD *)(v5 + 24) += 2;
      v7 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
      *(_DWORD *)(v7 + 24) += 2;
      v8 = (uint64_t *)(v7 + 1280);
      if (a2)
        WebCore::UserActionElementSet::setFlags(v8, v5, 64);
      else
        WebCore::UserActionElementSet::clearFlags(v8, v5, 64);
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
      this = *(_QWORD *)(v5 + 32);
      if (!this)
        break;
      v9 = *(_WORD *)(this + 28);
      if ((v9 & 0x80) != 0)
      {
        v12 = *(_QWORD *)(this + 200);
        if (!v12)
          break;
        this = *(_QWORD *)(v12 + 8);
      }
      else
      {
        if ((v9 & 8) == 0)
          break;
        if ((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) != 0)
        {
          v10 = *(_QWORD *)((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
          if (v10)
          {
            this = *(_QWORD *)(v10 + 224);
            if (!this)
              break;
            this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)this + 16))(this, v5);
          }
        }
      }
      v5 = this;
    }
    while (this);
  }
LABEL_31:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return this;
}

unsigned __int8 *WebCore::Element::setHovered(unsigned __int8 *result, void *a2, int a3)
{
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL hasPendingFullStyleRebuild;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void (**v16)(WebCore::RenderThemeIOS *__hidden);
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  _BYTE v32[20];

  v4 = (int)a2;
  v5 = (uint64_t)result;
  if ((result[54] & 2) != 0)
  {
    result = *(unsigned __int8 **)(*((_QWORD *)result + 5) + 8);
    v18 = *((_DWORD *)result + 6);
    *((_DWORD *)result + 6) = v18 + 2;
    v19 = *((_QWORD *)result + 160);
    if (v19)
    {
      v20 = *(_DWORD *)(v19 - 8);
      v21 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
      v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
      v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
      v24 = v20 & ((v23 >> 31) ^ v23);
      v25 = *(_QWORD *)(v19 + 16 * v24);
      if (v25 == v5)
      {
LABEL_39:
        v26 = *(_DWORD *)(v19 + 16 * v24 + 8);
        if (v18)
        {
LABEL_40:
          *((_DWORD *)result + 6) = v18;
          goto LABEL_41;
        }
LABEL_53:
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = (unsigned __int8 *)WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
LABEL_41:
        if (v4 == (v26 & 4) >> 2)
          return result;
        goto LABEL_3;
      }
      v27 = 1;
      while (v25)
      {
        v24 = ((_DWORD)v24 + v27) & v20;
        v25 = *(_QWORD *)(v19 + 16 * v24);
        ++v27;
        if (v25 == v5)
          goto LABEL_39;
      }
    }
    LOBYTE(v26) = 0;
    if (v18)
      goto LABEL_40;
    goto LABEL_53;
  }
  if ((a2 & 1) == 0)
    return result;
LABEL_3:
  if ((*(_BYTE *)(v5 + 22) & 8) == 0)
    goto LABEL_17;
  v6 = *(uint64_t **)(v5 + 40);
  v7 = v6[1];
  if (!*(_QWORD *)(v7 + 1944) || *(_BYTE *)(v7 + 3405))
    goto LABEL_17;
  if ((*(_BYTE *)(v5 + 70) & 4) != 0)
  {
    v10 = *v6;
    v11 = (*(_WORD *)(v10 + 28) & 0x80) == 0 || v10 == 0;
    v12 = v10 + 216;
    if (v11)
      v12 = v7 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v12 + 236))
      goto LABEL_17;
  }
  v8 = *(_QWORD *)(v7 + 1272);
  if (v8 && (*(_BYTE *)(v8 + 70) & 4) != 0)
  {
LABEL_17:
    LOBYTE(v29) = 0;
    v30 = 0;
    v31 = 0;
    *((_QWORD *)&v29 + 1) = v5;
  }
  else
  {
    hasPendingFullStyleRebuild = WebCore::Document::hasPendingFullStyleRebuild((WebCore::Document *)v7);
    LOBYTE(v29) = !hasPendingFullStyleRebuild;
    v30 = 0;
    v31 = 0;
    *((_QWORD *)&v29 + 1) = v5;
    if (!hasPendingFullStyleRebuild)
    {
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v29, (WTF::StringImpl *)0x25, v4, a3);
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(*((uint64_t *)&v29 + 1), &v30);
    }
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
  *(_DWORD *)(v13 + 24) += 2;
  WebCore::UserActionElementSet::setFlags((uint64_t *)(v13 + 1280), v5, v4, 4);
  if (*(_DWORD *)(v13 + 24) == 2)
  {
    if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v13, v14);
  }
  else
  {
    *(_DWORD *)(v13 + 24) -= 2;
  }
  if ((_BYTE)v29)
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(*((uint64_t *)&v29 + 1), &v31);
  if (v31)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v31, v14);
  result = v30;
  if (v30)
    result = (unsigned __int8 *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v30, v14);
  v15 = *(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL;
  if (v15)
  {
    if ((*(_BYTE *)(v15 + 45) & 2) != 0)
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 32) + 8) + 88) + 32) + 148) & 0x1FC000) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1959C11A0);
      }
    }
    else if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 88) + 32) + 148) & 0x1FC000) != 0)
    {
      ++*(_DWORD *)(v15 + 16);
      {
        v16 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
      }
      else
      {
        v28 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
        *(_OWORD *)(v28 + 40) = 0u;
        *(_OWORD *)(v28 + 24) = 0u;
        v16 = &off_1E335BC30;
        *(_QWORD *)v28 = &off_1E335BC30;
      }
      result = (unsigned __int8 *)((uint64_t (*)(uint64_t *))v16[24])(&WebCore::RenderTheme::singleton(void)::theme);
      if ((_DWORD)result
        && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 24) + 8) + 40)
                                                                                             + 8)
                                                                                 + 1944)
                                                                     + 24)
                                                         + 8)
                                             + 40)
                                 + 8)
                     + 3382))
      {
        LOBYTE(v29) = 0;
        LOBYTE(v30) = 0;
        v32[0] = 0;
        v32[16] = 0;
        result = (unsigned __int8 *)WebCore::RenderObject::issueRepaint(v15, &v29, 0, 0, (uint64_t)v32);
      }
      v17 = *(_DWORD *)(v15 + 16);
      if (!v17)
      {
        __break(0xC471u);
        JUMPOUT(0x1959C11E8);
      }
      *(_DWORD *)(v15 + 16) = v17 - 1;
    }
  }
  return result;
}

unsigned int *WebCore::Element::setBeingDragged(unsigned int *this, void *a2)
{
  int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL hasPendingFullStyleRebuild;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned __int8 *v26;

  v2 = (int)a2;
  v3 = (uint64_t)this;
  if ((*((_BYTE *)this + 54) & 2) != 0)
  {
    this = *(unsigned int **)(*((_QWORD *)this + 5) + 8);
    v13 = this[6];
    this[6] = v13 + 2;
    v14 = *((_QWORD *)this + 160);
    if (v14)
    {
      v15 = *(_DWORD *)(v14 - 8);
      v16 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
      v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
      v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
      v19 = v15 & ((v18 >> 31) ^ v18);
      v20 = *(_QWORD *)(v14 + 16 * v19);
      if (v20 == v3)
      {
LABEL_31:
        v21 = (*(unsigned __int8 *)(v14 + 16 * v19 + 8) >> 4) & 1;
        if (v13)
        {
LABEL_32:
          this[6] = v13;
          goto LABEL_33;
        }
LABEL_40:
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
LABEL_33:
        if (v21 == v2)
          return this;
        goto LABEL_3;
      }
      v22 = 1;
      while (v20)
      {
        v19 = ((_DWORD)v19 + v22) & v15;
        v20 = *(_QWORD *)(v14 + 16 * v19);
        ++v22;
        if (v20 == v3)
          goto LABEL_31;
      }
    }
    v21 = 0;
    if (v13)
      goto LABEL_32;
    goto LABEL_40;
  }
  if ((a2 & 1) == 0)
    return this;
LABEL_3:
  if ((*(_BYTE *)(v3 + 22) & 8) == 0)
    goto LABEL_17;
  v4 = *(uint64_t **)(v3 + 40);
  v5 = v4[1];
  if (!*(_QWORD *)(v5 + 1944) || *(_BYTE *)(v5 + 3405))
    goto LABEL_17;
  if ((*(_BYTE *)(v3 + 70) & 4) != 0)
  {
    v8 = *v4;
    v9 = (*(_WORD *)(v8 + 28) & 0x80) == 0 || v8 == 0;
    v10 = v8 + 216;
    if (v9)
      v10 = v5 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v10 + 236))
      goto LABEL_17;
  }
  v6 = *(_QWORD *)(v5 + 1272);
  if (v6 && (*(_BYTE *)(v6 + 70) & 4) != 0)
  {
LABEL_17:
    LOBYTE(v23) = 0;
    v25 = 0;
    v26 = 0;
    v24 = v3;
  }
  else
  {
    hasPendingFullStyleRebuild = WebCore::Document::hasPendingFullStyleRebuild((WebCore::Document *)v5);
    LOBYTE(v23) = !hasPendingFullStyleRebuild;
    v25 = 0;
    v26 = 0;
    v24 = v3;
    if (!hasPendingFullStyleRebuild)
    {
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v23, (WTF::StringImpl *)0xA, v2, 0);
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v24, (unsigned __int8 **)&v25);
    }
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
  *(_DWORD *)(v11 + 24) += 2;
  WebCore::UserActionElementSet::setFlags((uint64_t *)(v11 + 1280), v3, v2, 16);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v12);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if ((_BYTE)v23)
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v24, &v26);
  if (v26)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v26, v12);
  this = v25;
  if (v25)
    return (unsigned int *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v25, v12);
  return this;
}

unsigned int *WebCore::Element::scrollIntoView(WebCore::Element *a1, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v5;
  uint64_t v6;
  unsigned int *result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  __int16 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t *v27;
  char *v28;
  uint64_t *v29;
  WTF *v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t v41;
  int v42;
  int v43;
  BOOL v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  char v54;
  WebCore::RenderElement *v55;
  unsigned int v56;
  int v57;
  WebCore::Node *v58;
  void *v59;
  char v60;
  void *v61;
  char v62;
  void *v63;
  __int128 v64;
  uint64_t *v65;
  char v66;
  char v67;
  char v68;
  char v69;
  _QWORD v70[2];
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  BOOL v74;

  v5 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(v5 + 1584);
  if (v6)
    WebCore::ContentVisibilityDocumentState::updateContentRelevancyForScrollIfNeeded(v6, a1);
  result = (unsigned int *)WebCore::Document::updateLayout(v5, 0xAu, 0);
  v74 = 0;
  if ((*((_WORD *)a1 + 14) & 0x10) == 0)
    goto LABEL_6;
  v9 = *(_QWORD *)(*((_QWORD *)a1 + 12) + 24);
  if (v9 == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
  {
    result = (unsigned int *)WebCore::HTMLOptionElement::ownerSelectElement(a1);
    v47 = (uint64_t)result;
    if (!result)
      goto LABEL_6;
  }
  else
  {
    if (v9 != *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24))
      goto LABEL_6;
    v47 = *((_QWORD *)a1 + 4);
    if (!v47
      || (*(_WORD *)(v47 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v47 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
    {
      goto LABEL_6;
    }
  }
  v48 = *(_DWORD *)(v47 + 24);
  *(_DWORD *)(v47 + 24) = v48 + 2;
  v49 = *(_QWORD *)(v47 + 64) & 0xFFFFFFFFFFFFLL;
  if (v49)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v47 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1959C1ADCLL);
    }
    if (*(_BYTE *)((*(_QWORD *)(v47 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 18)
    {
      ++*(_DWORD *)((*(_QWORD *)(v47 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
      if (*(_BYTE *)(v47 + 300))
        WebCore::HTMLSelectElement::recalcListItems(v47, (void *)1, 1u);
      v50 = *(unsigned int *)(v47 + 196);
      if ((_DWORD)v50)
      {
        v51 = 0;
        while (1)
        {
          v52 = *(_QWORD *)(*(_QWORD *)(v47 + 184) + 8 * v51);
          if (v52)
          {
            if (*(WebCore::Element **)(v52 + 8) == a1)
              break;
          }
          if (v50 == ++v51)
            goto LABEL_92;
        }
        WebCore::RenderListBox::scrollToRevealElementAtListIndex((WebCore::RenderListBox *)v49, v51);
      }
      else
      {
LABEL_92:
        LODWORD(v51) = 0;
      }
      *(_QWORD *)&v64 = 0;
      result = (unsigned int *)WebCore::RenderListBox::itemBoundingBoxRect((WebCore::RenderListBox *)v49, (const WebCore::LayoutPoint *)&v64, v51);
      v2 = result;
      v11 = *(uint64_t **)(v49 + 8);
      if (v11)
        goto LABEL_96;
      v63 = v8;
      v11 = (uint64_t *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v11 = 1;
      v11[1] = v49;
      result = *(unsigned int **)(v49 + 8);
      *(_QWORD *)(v49 + 8) = v11;
      if (result)
      {
        if (*result == 1)
        {
          result = (unsigned int *)WTF::fastFree((WTF *)result, v61);
          v11 = *(uint64_t **)(v49 + 8);
          v8 = v63;
          if (!v11)
          {
LABEL_97:
            v53 = *(_DWORD *)(v49 + 16);
            if (!v53)
            {
              __break(0xC471u);
              JUMPOUT(0x1959C1AFCLL);
            }
            v54 = 0;
            *(_DWORD *)(v49 + 16) = v53 - 1;
            v48 = *(_DWORD *)(v47 + 24) - 2;
            if (*(_DWORD *)(v47 + 24) != 2)
              goto LABEL_99;
            goto LABEL_109;
          }
LABEL_96:
          ++*(_DWORD *)v11;
          goto LABEL_97;
        }
        --*result;
      }
      v8 = v63;
      goto LABEL_96;
    }
  }
  v11 = 0;
  v54 = 1;
  if (v48)
  {
LABEL_99:
    *(_DWORD *)(v47 + 24) = v48;
    goto LABEL_100;
  }
LABEL_109:
  if ((*(_WORD *)(v47 + 30) & 0x400) == 0)
  {
    v58 = (WebCore::Node *)v47;
    v59 = v8;
    v60 = v54;
    result = WebCore::Node::removedLastRef(v58, v8);
    v54 = v60;
    v8 = v59;
  }
LABEL_100:
  if ((v54 & 1) == 0)
  {
    *((_QWORD *)&v73 + 1) = v8;
    if (v11)
      v55 = (WebCore::RenderElement *)v11[1];
    else
      v55 = 0;
    WebCore::RenderElement::absoluteAnchorRectWithScrollMargin(v55, &v74, (uint64_t)&v64);
    v56 = (_DWORD)v2 + v64;
    if (__OFADD__((_DWORD)v2, (_DWORD)v64))
      v56 = (v2 >> 31) + 0x7FFFFFFF;
    LODWORD(v73) = v56;
    v57 = HIDWORD(v2) + DWORD1(v64);
    if (__OFADD__(HIDWORD(v2), DWORD1(v64)))
      v57 = (HIDWORD(v2) >> 31) + 0x7FFFFFFF;
    DWORD1(v73) = v57;
LABEL_11:
    LOBYTE(v13) = *(_BYTE *)(a2 + 16);
    if ((_BYTE)v13)
    {
      v13 = *(unsigned __int8 *)(a2 + 4);
      v14 = *(_DWORD *)(a2 + 12);
      if (v14)
      {
        if (v14 != 1)
        {
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_125:
          v62 = 2;
          switch(v43)
          {
            case 0:
            case 1:
              v62 = v42;
              break;
            case 2:
            case 4:
              v62 = 3;
              break;
            default:
              break;
          }
          LOBYTE(v64) = 0;
          v44 = (v62 & 6) == 2;
          v45 = &v71;
          if ((v62 & 6) == 2)
            v46 = v70;
          else
            v46 = &v71;
          if (!v44)
            v45 = v70;
          *((_QWORD *)&v64 + 1) = v46;
          v65 = v45;
          v66 = 0;
          if (!v17)
            LOBYTE(v13) = 0;
          v67 = v13;
          v68 = 0;
          v69 = 0;
          result = (unsigned int *)WebCore::LocalFrameView::scrollRectToVisible(&v73, v11[1], v74, (int **)&v64);
          v12 = *(_DWORD *)v11 - 1;
          goto LABEL_70;
        }
        v15 = *(unsigned __int16 *)(a2 + 8);
        v16 = *(_WORD *)(a2 + 6);
        v17 = *(unsigned __int8 *)(a2 + 5);
        v18 = HIBYTE(v16);
      }
      else
      {
        LOBYTE(v16) = 2 * (v13 == 0);
        v18 = 1;
        v15 = 259;
        v17 = 1;
        LOBYTE(v13) = 0;
      }
    }
    else
    {
      LOBYTE(v16) = 0;
      v18 = 1;
      v15 = 259;
      v17 = 1;
    }
    v19 = v11[1];
    v20 = (unsigned __int16)*(_DWORD *)(v19 + 124) >> 13;
    v21 = &WebCore::ScrollAlignment::alignCenterAlways;
    if (v15 >= 0x100)
    {
      v24 = v15;
      v25 = *(_DWORD *)(v19 + 120);
      v26 = v20 - 6;
      v23 = &qword_1969F6B4C;
      v22 = &WebCore::ScrollAlignment::alignCenterAlways;
      switch(v24)
      {
        case 0:
          if ((v25 & 0x4000000) != 0)
            v27 = &WebCore::ScrollAlignment::alignBottomAlways;
          else
            v27 = &WebCore::ScrollAlignment::alignTopAlways;
          v23 = &qword_1969F6B5C;
          if ((v25 & 0x4000000) != 0)
            v23 = &qword_1969F6B8C;
          v28 = (char *)&WebCore::ScrollAlignment::alignRightAlways;
          v29 = (uint64_t *)&WebCore::ScrollAlignment::alignLeftAlways;
          goto LABEL_35;
        case 1:
          break;
        case 2:
          if ((v25 & 0x4000000) != 0)
            v27 = &WebCore::ScrollAlignment::alignTopAlways;
          else
            v27 = &WebCore::ScrollAlignment::alignBottomAlways;
          v23 = &qword_1969F6B8C;
          if ((v25 & 0x4000000) != 0)
            v23 = &qword_1969F6B5C;
          v28 = (char *)&WebCore::ScrollAlignment::alignLeftAlways;
          v29 = (uint64_t *)&WebCore::ScrollAlignment::alignRightAlways;
LABEL_35:
          v31 = (v25 & 0x4000000) == 0;
          if ((v25 & 0x4000000) != 0)
            v32 = (uint64_t *)v28;
          else
            v32 = v29;
          v33 = (uint64_t *)(v28 + 8);
          v34 = v29 + 1;
          if (!v31)
            v34 = v33;
          if (v26 <= 0xFFFFFFFB)
            v22 = v32;
          else
            v22 = v27;
          if (v26 <= 0xFFFFFFFB)
            v23 = v34;
          break;
        default:
          goto LABEL_18;
      }
    }
    else
    {
LABEL_18:
      v22 = (uint64_t *)&WebCore::ScrollAlignment::alignToEdgeIfNeeded;
      v23 = (uint64_t *)&WebCore::ScrollAlignment::alignToEdgeIfNeeded + 1;
    }
    v35 = *v23;
    v71 = *v22;
    v72 = v35;
    if (v20 >= 6)
      v36 = 0;
    else
      v36 = 0x30203020100uLL >> (8 * v20);
    if (v18)
      v37 = v16;
    else
      v37 = 0;
    v38 = &qword_1969F6B4C;
    switch(v37)
    {
      case 0:
        v39 = v36 - 1;
        if ((v36 - 1) < 3u)
        {
          v21 = (&off_1E33A49D0)[v39];
          v39 = (char)v39;
          v40 = &off_1E33A49E8;
          goto LABEL_57;
        }
        v21 = &WebCore::ScrollAlignment::alignTopAlways;
        goto LABEL_60;
      case 1:
        goto LABEL_61;
      case 2:
        v39 = v36 - 1;
        if ((v36 - 1) >= 3u)
        {
          v21 = &WebCore::ScrollAlignment::alignBottomAlways;
LABEL_60:
          v38 = v21 + 1;
        }
        else
        {
          v21 = (&off_1E33A4A00)[v39];
          v39 = (char)v39;
          v40 = &off_1E33A4A18;
LABEL_57:
          v38 = v40[v39];
        }
LABEL_61:
        v41 = *v38;
        v70[0] = *v21;
        v70[1] = v41;
        BYTE4(v72) = 0;
        v42 = (unsigned __int16)*(_DWORD *)(v11[1] + 124) >> 13;
        v43 = v42 - 1;
        break;
      default:
        v21 = (uint64_t *)&WebCore::ScrollAlignment::alignToEdgeIfNeeded;
        goto LABEL_60;
    }
    goto LABEL_125;
  }
LABEL_6:
  v10 = *((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL;
  if (!v10)
    goto LABEL_72;
  if ((*(_BYTE *)(v10 + 45) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1959C194CLL);
  }
  v11 = *(uint64_t **)(v10 + 8);
  if (!v11)
  {
    v11 = (uint64_t *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    v11[1] = v10;
    v30 = *(WTF **)(v10 + 8);
    *(_QWORD *)(v10 + 8) = v11;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
      {
        result = (unsigned int *)WTF::fastFree(v30, v8);
        v11 = *(uint64_t **)(v10 + 8);
        if (!v11)
          goto LABEL_72;
      }
      else
      {
        --*(_DWORD *)v30;
      }
    }
  }
  v12 = (*(_DWORD *)v11)++;
  result = (unsigned int *)v11[1];
  if (result)
  {
    WebCore::RenderElement::absoluteAnchorRectWithScrollMargin((WebCore::RenderElement *)result, &v74, (uint64_t)&v64);
    v73 = v64;
    goto LABEL_11;
  }
LABEL_70:
  if (v12)
    *(_DWORD *)v11 = v12;
  else
    result = (unsigned int *)WTF::fastFree((WTF *)v11, v8);
LABEL_72:
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v5, v8);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::Element::scrollIntoView(WebCore::Element *this, int a2)
{
  uint64_t v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  __int128 v10;
  __int128 *v11;
  __int16 v12;
  char v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  BOOL v18;

  v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  result = WebCore::Document::updateLayout(v4, 0xAu, 0);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  v7 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v7)
  {
    if ((*(_BYTE *)(v7 + 45) & 2) != 0)
    {
      __break(0xC471u);
    }
    else
    {
      ++*(_DWORD *)(v7 + 16);
      v18 = 0;
      WebCore::RenderElement::absoluteAnchorRectWithScrollMargin((WebCore::RenderElement *)v7, &v18, (uint64_t)&v10);
      v17 = v10;
      v8 = &WebCore::ScrollAlignment::alignBottomAlways;
      if (a2)
        v8 = &WebCore::ScrollAlignment::alignTopAlways;
      v16 = *(_OWORD *)v8;
      v15 = WebCore::ScrollAlignment::alignToEdgeIfNeeded;
      BYTE12(v15) = 0;
      LOBYTE(v10) = 0;
      *((_QWORD *)&v10 + 1) = &v15;
      v11 = &v16;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      result = WebCore::LocalFrameView::scrollRectToVisible(&v17, v7, v18, (int **)&v10);
      v9 = *(_DWORD *)(v7 + 16);
      if (v9)
      {
        *(_DWORD *)(v7 + 16) = v9 - 1;
        return result;
      }
      __break(0xC471u);
    }
    JUMPOUT(0x1959C1CC0);
  }
  return result;
}

unsigned int *WebCore::Element::scrollIntoViewIfNeeded(WebCore::Element *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *result;
  void *v7;
  uint64_t v8;
  __int128 *v9;
  int v10;
  __int128 v11;
  __int128 *v12;
  __int16 v13;
  char v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  BOOL v19;

  v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v5 = *(_QWORD *)(v4 + 1584);
  if (v5)
    WebCore::ContentVisibilityDocumentState::updateContentRelevancyForScrollIfNeeded(v5, this);
  result = (unsigned int *)WebCore::Document::updateLayout(v4, 0xAu, 0);
  v8 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v8)
  {
    if ((*(_BYTE *)(v8 + 45) & 2) != 0)
    {
      __break(0xC471u);
    }
    else
    {
      ++*(_DWORD *)(v8 + 16);
      v19 = 0;
      WebCore::RenderElement::absoluteAnchorRectWithScrollMargin((WebCore::RenderElement *)v8, &v19, (uint64_t)&v11);
      v9 = &WebCore::ScrollAlignment::alignToEdgeIfNeeded;
      v18 = v11;
      if (a2)
        v9 = (__int128 *)&WebCore::ScrollAlignment::alignCenterIfNeeded;
      v16 = *v9;
      v17 = v16;
      BYTE12(v16) = 0;
      LOBYTE(v11) = 0;
      *((_QWORD *)&v11 + 1) = &v16;
      v12 = &v17;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      result = (unsigned int *)WebCore::LocalFrameView::scrollRectToVisible(&v18, v8, v19, (int **)&v11);
      v10 = *(_DWORD *)(v8 + 16);
      if (v10)
      {
        *(_DWORD *)(v8 + 16) = v10 - 1;
        goto LABEL_9;
      }
      __break(0xC471u);
    }
    JUMPOUT(0x1959C1E2CLL);
  }
LABEL_9:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v4, v7);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::Element::scrollIntoViewIfNotVisible(WebCore::Element *this, int a2)
{
  uint64_t v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  __int128 *v8;
  int v9;
  __int128 v10;
  __int128 *v11;
  __int16 v12;
  char v13;
  char v14;
  __int128 v15;
  __int128 v16;
  BOOL v17;

  v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  result = WebCore::Document::updateLayout(v4, 0xAu, 0);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  v7 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v7)
  {
    if ((*(_BYTE *)(v7 + 45) & 2) != 0)
    {
      __break(0xC471u);
    }
    else
    {
      ++*(_DWORD *)(v7 + 16);
      v17 = 0;
      WebCore::RenderElement::absoluteAnchorRectWithScrollMargin((WebCore::RenderElement *)v7, &v17, (uint64_t)&v10);
      v8 = (__int128 *)&WebCore::ScrollAlignment::alignToEdgeIfNotVisible;
      if (a2)
        v8 = (__int128 *)&WebCore::ScrollAlignment::alignCenterIfNotVisible;
      v15 = *v8;
      v16 = v10;
      LOBYTE(v10) = 0;
      *((_QWORD *)&v10 + 1) = &v15;
      v11 = &v15;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      result = WebCore::LocalFrameView::scrollRectToVisible(&v16, v7, v17, (int **)&v10);
      v9 = *(_DWORD *)(v7 + 16);
      if (v9)
      {
        *(_DWORD *)(v7 + 16) = v9 - 1;
        return result;
      }
      __break(0xC471u);
    }
    JUMPOUT(0x1959C1F78);
  }
  return result;
}

uint64_t WebCore::Element::scrollTo(uint64_t result, double *a2, __int8 a3, __int8 a4, uint64_t a5, __int8 a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  unint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  const WebCore::RenderElement *v21;
  double v22;
  uint64_t v23;
  float v24;
  int v25;
  const WebCore::RenderElement *v26;
  double v27;
  int v28;
  int v29;
  double v30;
  double v31;
  double v32;
  int v33;
  int v34;
  double v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  _DWORD *v43;
  int8x16_t v44;
  _DWORD v45[2];

  v11 = result;
  v12 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8);
  *(_DWORD *)(v12 + 24) += 2;
  if ((*(_DWORD *)(*(_QWORD *)(v12 + 680) + 664) & 1) != 0 || *(_QWORD *)(v12 + 1272) != result)
  {
    v13 = *(_QWORD *)(v12 + 528);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 288);
        if (v15)
        {
          ++*(_DWORD *)(v15 + 8);
          *(_BYTE *)(v15 + 1373) = 0;
          if ((*(_QWORD *)(v15 + 872) & 0xFFFFFFFFFFFFLL) != 0)
            WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v15 + 840));
          result = WebCore::LocalFrameView::cancelScheduledTextFragmentIndicatorTimer(v15, (WTF::StringImpl *)a2);
          if (*(_DWORD *)(v15 + 8) == 1)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          else
            --*(_DWORD *)(v15 + 8);
        }
      }
    }
    if (!*((_BYTE *)a2 + 16))
      goto LABEL_35;
    if (!*((_BYTE *)a2 + 32))
      goto LABEL_35;
    if (a2[1] != 0.0)
      goto LABEL_35;
    if (a2[3] != 0.0)
      goto LABEL_35;
    i = *(_QWORD *)(v12 + 1272);
    if (i == v11)
      goto LABEL_35;
    if (i)
    {
      if ((*(_WORD *)(i + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
      {
        for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
        {
          if ((*(_WORD *)(i + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
          {
            break;
          }
        }
      }
      else
      {
        i = 0;
      }
    }
    if (i == v11
      || (*(_BYTE *)(v11 + 54) & 0x20) != 0
      || (*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) != 0
      && *(_QWORD *)((*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) + 0x24))
    {
LABEL_35:
      WebCore::Document::updateLayout(v12, 0xAu, 0);
      result = WebCore::Document::scrollingElement((WebCore::Document *)v12);
      if (result == v11)
      {
        v43 = *(_DWORD **)(v12 + 696);
        if (v43)
        {
          ++v43[6];
          result = WebCore::LocalDOMWindow::scrollTo((uint64_t)v43, a2, a3, a4, a5, a6);
          if (v43[6] == 1)
            result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v43 + 72))(v43);
          else
            --v43[6];
        }
      }
      else
      {
        v17 = *(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL;
        if (v17 && (*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
        {
          v18 = *(_DWORD *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
          *(_DWORD *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v18;
          if ((*(_BYTE *)(v17 + 22) & 1) != 0)
          {
            v19 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v17 + 1192))(v17);
            v22 = (double)(int)WebCore::adjustForAbsoluteZoom(v19, v20, v21, *(float *)(*(_QWORD *)(v17 + 104) + 184));
            v23 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v17 + 1200))(v17);
            v24 = *(float *)(*(_QWORD *)(v17 + 104) + 184);
            v27 = (double)(int)WebCore::adjustForAbsoluteZoom(v23, v25, v26, v24);
            v28 = *(unsigned __int8 *)a2;
            v29 = *((unsigned __int8 *)a2 + 1);
            v30 = a2[1];
            v31 = 0.0;
            if ((*(_QWORD *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
              v30 = 0.0;
            if (!*((_BYTE *)a2 + 16))
              v30 = v22;
            if (((_QWORD)a2[3] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
              v31 = a2[3];
            if (*((_BYTE *)a2 + 32))
              v27 = v31;
            v32 = v30 * v24;
            if (v32 > -2147483650.0)
              v33 = (int)v32;
            else
              v33 = 0x80000000;
            if (v32 < 2147483650.0)
              v34 = v33;
            else
              v34 = 0x7FFFFFFF;
            v35 = v27 * v24;
            if (v35 > -2147483650.0)
              v36 = (int)v35;
            else
              v36 = 0x80000000;
            if (v35 < 2147483650.0)
              v37 = v36;
            else
              v37 = 0x7FFFFFFF;
            v45[0] = v34;
            v45[1] = v37;
            if (v29)
              v38 = v28;
            else
              v38 = 0;
            v39 = WebCore::useSmoothScrolling(v38, v11);
            if (v39)
              *(_QWORD *)(v11 + 48) |= 0x20000000000000uLL;
            v41.i8[0] = 1;
            v41.i32[1] = 16843009;
            v41.i64[1] = 0x101010101010101;
            v41.i8[1] = a3;
            v41.i8[2] = v39;
            v41.i8[3] = a4;
            v40.i64[0] = a5;
            v42 = vextq_s8(v41, v40, 0xCuLL);
            v42.i32[0] = v41.i32[0];
            v42.i8[12] = a6;
            v44 = v42;
            result = WebCore::RenderBox::setScrollPosition(v17, (WebCore::RenderLayerScrollableArea *)v45, &v44);
            v18 = *(_DWORD *)(v17 + 16);
          }
          if (!v18)
          {
            result = 286;
            __break(0xC471u);
            return result;
          }
          *(_DWORD *)(v17 + 16) = v18 - 1;
        }
      }
    }
  }
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::Element::offsetLeftForBindings(WebCore::Element *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[3];
  uint64_t v28;

  v2 = WebCore::Element::offsetLeft(this);
  v3 = WebCore::Element::offsetParent(this);
  if (!v3)
    return v2;
  v5 = v3;
  v6 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v6 + 2;
  if ((*(_BYTE *)(v3 + 22) & 0x10) == 0 || (v7 = *((_QWORD *)this + 5), *(_QWORD *)(v3 + 40) == v7))
  {
    v11 = v3;
    if (!v6)
    {
LABEL_34:
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, v4);
      return v2;
    }
LABEL_21:
    *(_DWORD *)(v11 + 24) = v6;
    return v2;
  }
  v26 = 0;
  v28 = v7;
  if (v7)
  {
    do
    {
      WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add(v27, &v26, &v28);
      v7 = *(_QWORD *)(v7 + 16);
      v28 = v7;
    }
    while (v7);
    v9 = v26;
    v10 = v26 == 0;
    if (v26)
    {
      while (1)
      {
        v11 = v5;
        v12 = *(_QWORD *)(v5 + 40);
        v13 = *(_DWORD *)(v9 - 8);
        v14 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
        v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
        v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
        v17 = v13 & ((v16 >> 31) ^ v16);
        v18 = *(_QWORD *)(v9 + 8 * v17);
        if (v18 == v12)
          break;
        v19 = 1;
        while (v18)
        {
          v17 = (v17 + v19) & v13;
          v18 = *(_QWORD *)(v9 + 8 * v17);
          ++v19;
          if (v18 == v12)
            goto LABEL_33;
        }
        v20 = WebCore::Element::offsetLeft((WebCore::Element *)v5);
        v21 = WebCore::Element::offsetParent((WebCore::Element *)v5);
        v5 = v21;
        if (v21)
          *(_DWORD *)(v21 + 24) += 2;
        if (*(_DWORD *)(v11 + 24) == 2)
        {
          if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v11, v8);
        }
        else
        {
          *(_DWORD *)(v11 + 24) -= 2;
        }
        v2 = (v20 + v2);
        if (!v5)
          goto LABEL_31;
      }
LABEL_33:
      WTF::fastFree((WTF *)(v9 - 16), v8);
      v6 = *(_DWORD *)(v5 + 24) - 2;
      if (*(_DWORD *)(v5 + 24) == 2)
        goto LABEL_34;
      goto LABEL_21;
    }
  }
  do
  {
    v23 = v5;
    v24 = WebCore::Element::offsetLeft((WebCore::Element *)v5);
    v25 = WebCore::Element::offsetParent((WebCore::Element *)v5);
    v5 = v25;
    if (v25)
      *(_DWORD *)(v25 + 24) += 2;
    if (*(_DWORD *)(v23 + 24) == 2)
    {
      if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v23, v8);
    }
    else
    {
      *(_DWORD *)(v23 + 24) -= 2;
    }
    v2 = (v24 + v2);
  }
  while (v5);
  v9 = 0;
  v10 = 1;
LABEL_31:
  if (!v10)
    WTF::fastFree((WTF *)(v9 - 16), v8);
  return v2;
}

uint64_t WebCore::Element::offsetLeft(WebCore::Element *this)
{
  uint64_t v2;
  void *v3;
  _DWORD *v4;
  uint64_t result;
  WebCore::RenderBoxModelObject *v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  WebCore::Document::updateLayout(v2, 6u, (uint64_t)this);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  v4 = (_DWORD *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL);
  if (!v4 || (*((_BYTE *)v4 + 45) & 8) == 0)
    return 0;
  ++v4[4];
  v6 = (WebCore::RenderBoxModelObject *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 880))(v4);
  result = WebCore::adjustOffsetForZoomAndSubpixelLayout((WebCore *)v4, v6, v7);
  v8 = v4[4];
  if (v8)
  {
    v4[4] = v8 - 1;
  }
  else
  {
    result = 286;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::Element::offsetParent(WebCore::Element *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  WebCore::RenderElement *v5;
  int v6;
  uint64_t v7;
  int v8;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  WebCore::Document::updateLayout(v2, 6u, (uint64_t)this);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  v4 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return 0;
  if ((*(_BYTE *)(v4 + 45) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1959C27ACLL);
  }
  ++*(_DWORD *)(v4 + 16);
  v5 = WebCore::RenderObject::offsetParent((WebCore::RenderObject *)v4, v3);
  if (v5)
  {
    v6 = *((_DWORD *)v5 + 4);
    *((_DWORD *)v5 + 4) = v6 + 1;
    if ((*((_BYTE *)v5 + 45) & 1) != 0)
    {
      v7 = 0;
      if (v6 == -1)
        goto LABEL_22;
    }
    else
    {
      v7 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
      if (v7 && (*(_WORD *)(v7 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1959C27D4);
      }
      if (v6 == -1)
      {
LABEL_22:
        __break(0xC471u);
        JUMPOUT(0x1959C278CLL);
      }
    }
    *((_DWORD *)v5 + 4) = v6;
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_DWORD *)(v4 + 16);
  if (!v8)
    goto LABEL_22;
  *(_DWORD *)(v4 + 16) = v8 - 1;
  return v7;
}

uint64_t WebCore::adjustOffsetForZoomAndSubpixelLayout@<X0>(WebCore *this@<X0>, WebCore::RenderBoxModelObject *a2@<X1>, int a3@<W8>)
{
  int v4;
  unsigned int v5;
  int v6;
  float v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  int v13;
  int v14;
  int v15;
  int v16;
  double v17;

  v4 = ((int)((_DWORD)a2 - (a3 & 0xFFFFFFC0) + 32) >> 6) + (int)a2 / 64;
  v5 = v4 << 6;
  if (v4 < -33554432)
    v5 = 0x80000000;
  if (v4 <= 0x1FFFFFF)
    v6 = v5;
  else
    v6 = 0x7FFFFFFF;
  v7 = *(float *)(*((_QWORD *)this + 13) + 184);
  if (v7 == 1.0)
    goto LABEL_24;
  ++*((_DWORD *)this + 4);
  v8 = *((_QWORD *)this + 4);
  v9 = 1.0;
  if (v8)
  {
    v10 = *(_QWORD *)(v8 + 8);
    if (v10)
    {
      ++*(_DWORD *)(v10 + 16);
      while (1)
      {
        v11 = v10;
        v12 = v7;
        v7 = *(float *)(*(_QWORD *)(v10 + 104) + 184);
        v13 = *(_DWORD *)(v10 + 16);
        if (v7 != v12)
          break;
        *(_DWORD *)(v11 + 16) = v13 + 1;
        v14 = *((_DWORD *)this + 4);
        if (!v14)
          goto LABEL_30;
        *((_DWORD *)this + 4) = v14 - 1;
        v10 = *(_QWORD *)(v11 + 32);
        if (v10)
        {
          v10 = *(_QWORD *)(v10 + 8);
          if (v10)
            ++*(_DWORD *)(v10 + 16);
        }
        v15 = *(_DWORD *)(v11 + 16);
        if (!v15)
        {
          __break(0xC471u);
          JUMPOUT(0x1959C29B4);
        }
        *(_DWORD *)(v11 + 16) = v15 - 1;
        this = (WebCore *)v11;
        if (!v10)
        {
          this = (WebCore *)v11;
          goto LABEL_20;
        }
      }
      if (!v13)
      {
LABEL_30:
        __break(0xC471u);
        JUMPOUT(0x1959C2994);
      }
      v9 = *(float *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 588);
      *(_DWORD *)(v11 + 16) = v13 - 1;
    }
  }
LABEL_20:
  if (*((_BYTE *)this + 46) == 49)
    v9 = *(float *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 588);
  v16 = *((_DWORD *)this + 4);
  if (!v16)
  {
    __break(0xC471u);
    JUMPOUT(0x1959C29D4);
  }
  *((_DWORD *)this + 4) = v16 - 1;
  if (v9 == 1.0)
LABEL_24:
    v17 = floor((double)v6 * 0.015625);
  else
    v17 = round((double)v6 * 0.015625 / v9);
  return (int)v17;
}

uint64_t WebCore::Element::offsetTopForBindings(WebCore::Element *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[3];
  uint64_t v28;

  v2 = WebCore::Element::offsetTop(this);
  v3 = WebCore::Element::offsetParent(this);
  if (!v3)
    return v2;
  v5 = v3;
  v6 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v6 + 2;
  if ((*(_BYTE *)(v3 + 22) & 0x10) == 0 || (v7 = *((_QWORD *)this + 5), *(_QWORD *)(v3 + 40) == v7))
  {
    v11 = v3;
    if (!v6)
    {
LABEL_34:
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, v4);
      return v2;
    }
LABEL_21:
    *(_DWORD *)(v11 + 24) = v6;
    return v2;
  }
  v26 = 0;
  v28 = v7;
  if (v7)
  {
    do
    {
      WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add(v27, &v26, &v28);
      v7 = *(_QWORD *)(v7 + 16);
      v28 = v7;
    }
    while (v7);
    v9 = v26;
    v10 = v26 == 0;
    if (v26)
    {
      while (1)
      {
        v11 = v5;
        v12 = *(_QWORD *)(v5 + 40);
        v13 = *(_DWORD *)(v9 - 8);
        v14 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
        v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
        v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
        v17 = v13 & ((v16 >> 31) ^ v16);
        v18 = *(_QWORD *)(v9 + 8 * v17);
        if (v18 == v12)
          break;
        v19 = 1;
        while (v18)
        {
          v17 = (v17 + v19) & v13;
          v18 = *(_QWORD *)(v9 + 8 * v17);
          ++v19;
          if (v18 == v12)
            goto LABEL_33;
        }
        v20 = WebCore::Element::offsetTop((WebCore::Element *)v5);
        v21 = WebCore::Element::offsetParent((WebCore::Element *)v5);
        v5 = v21;
        if (v21)
          *(_DWORD *)(v21 + 24) += 2;
        if (*(_DWORD *)(v11 + 24) == 2)
        {
          if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v11, v8);
        }
        else
        {
          *(_DWORD *)(v11 + 24) -= 2;
        }
        v2 = (v20 + v2);
        if (!v5)
          goto LABEL_31;
      }
LABEL_33:
      WTF::fastFree((WTF *)(v9 - 16), v8);
      v6 = *(_DWORD *)(v5 + 24) - 2;
      if (*(_DWORD *)(v5 + 24) == 2)
        goto LABEL_34;
      goto LABEL_21;
    }
  }
  do
  {
    v23 = v5;
    v24 = WebCore::Element::offsetTop((WebCore::Element *)v5);
    v25 = WebCore::Element::offsetParent((WebCore::Element *)v5);
    v5 = v25;
    if (v25)
      *(_DWORD *)(v25 + 24) += 2;
    if (*(_DWORD *)(v23 + 24) == 2)
    {
      if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v23, v8);
    }
    else
    {
      *(_DWORD *)(v23 + 24) -= 2;
    }
    v2 = (v24 + v2);
  }
  while (v5);
  v9 = 0;
  v10 = 1;
LABEL_31:
  if (!v10)
    WTF::fastFree((WTF *)(v9 - 16), v8);
  return v2;
}

uint64_t WebCore::Element::offsetTop(WebCore::Element *this)
{
  uint64_t v2;
  void *v3;
  _DWORD *v4;
  uint64_t result;
  WebCore::RenderBoxModelObject *v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  WebCore::Document::updateLayout(v2, 6u, (uint64_t)this);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  v4 = (_DWORD *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL);
  if (!v4 || (*((_BYTE *)v4 + 45) & 8) == 0)
    return 0;
  ++v4[4];
  v6 = (WebCore::RenderBoxModelObject *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 888))(v4);
  result = WebCore::adjustOffsetForZoomAndSubpixelLayout((WebCore *)v4, v6, v7);
  v8 = v4[4];
  if (v8)
  {
    v4[4] = v8 - 1;
  }
  else
  {
    result = 286;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::Element::offsetParentForBindings@<X0>(WebCore::Element *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  const WebCore::Node *v7;
  const WebCore::Node *v8;
  void *v9;

  result = WebCore::Element::offsetParent(this);
  if (!result)
  {
    *a2 = 0;
    return result;
  }
  v5 = result;
  *(_DWORD *)(result + 24) += 2;
  *a2 = result;
  if ((*(_BYTE *)(result + 22) & 0x10) != 0)
  {
    while (1)
    {
      v6 = v5;
      if ((*(_BYTE *)(v5 + 22) & 0x18) == 0)
        break;
      v8 = **(const WebCore::Node ***)(v5 + 40);
      if (v8)
        goto LABEL_7;
LABEL_8:
      result = WebCore::Element::offsetParent((WebCore::Element *)v5);
      v5 = result;
      if (result)
        *(_DWORD *)(result + 24) += 2;
      *a2 = result;
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v6, v9);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
      if (!v5)
        return result;
    }
    v7 = (const WebCore::Node *)v5;
    do
    {
      v8 = v7;
      v7 = (const WebCore::Node *)*((_QWORD *)v7 + 4);
    }
    while (v7);
LABEL_7:
    result = WebCore::Node::isDescendantOrShadowDescendantOf((const WebCore::Node ***)this, v8);
    if ((result & 1) != 0)
      return result;
    goto LABEL_8;
  }
  return result;
}

unsigned int WebCore::Element::clientLeft(WebCore::Element *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unsigned int result;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  double v11;
  double v12;
  int v13;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  WebCore::Document::updateLayout(v2, 6u, (uint64_t)this);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  v4 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (!v4 || (*(_BYTE *)(v4 + 45) & 4) == 0)
    return 0;
  ++*(_DWORD *)(v4 + 16);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1016))(v4);
  v8 = ((int)(v6 - (v7 & 0xFFFFFFC0) + 32) >> 6) + v6 / 64;
  v9 = v8 << 6;
  if (v8 < -33554432)
    v9 = 0x80000000;
  if (v8 <= 0x1FFFFFF)
    v10 = v9;
  else
    v10 = 0x7FFFFFFF;
  v11 = (float)((float)((float)v10 * 0.015625) / *(float *)(*(_QWORD *)(v4 + 104) + 184)) * 64.0;
  if (v11 >= 2147483650.0)
  {
    v12 = 33554432.0;
  }
  else if (v11 <= -2147483650.0)
  {
    v12 = -33554432.0;
  }
  else
  {
    v12 = (double)(int)v11 * 0.015625;
  }
  v13 = *(_DWORD *)(v4 + 16);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x1959C2F40);
  }
  result = llround(v12);
  *(_DWORD *)(v4 + 16) = v13 - 1;
  return result;
}

unsigned int WebCore::Element::clientTop(WebCore::Element *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unsigned int result;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  double v11;
  double v12;
  int v13;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  WebCore::Document::updateLayout(v2, 6u, (uint64_t)this);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  v4 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (!v4 || (*(_BYTE *)(v4 + 45) & 4) == 0)
    return 0;
  ++*(_DWORD *)(v4 + 16);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1000))(v4);
  v8 = ((int)(v6 - (v7 & 0xFFFFFFC0) + 32) >> 6) + v6 / 64;
  v9 = v8 << 6;
  if (v8 < -33554432)
    v9 = 0x80000000;
  if (v8 <= 0x1FFFFFF)
    v10 = v9;
  else
    v10 = 0x7FFFFFFF;
  v11 = (float)((float)((float)v10 * 0.015625) / *(float *)(*(_QWORD *)(v4 + 104) + 184)) * 64.0;
  if (v11 >= 2147483650.0)
  {
    v12 = 33554432.0;
  }
  else if (v11 <= -2147483650.0)
  {
    v12 = -33554432.0;
  }
  else
  {
    v12 = (double)(int)v11 * 0.015625;
  }
  v13 = *(_DWORD *)(v4 + 16);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x1959C30CCLL);
  }
  result = llround(v12);
  *(_DWORD *)(v4 + 16) = v13 - 1;
  return result;
}

uint64_t WebCore::Element::clientHeight(WebCore::Element *this)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  double v19;
  double v20;
  int v21;
  unint64_t v22;
  int v23;
  const WebCore::RenderElement *v24;

  v3 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  WebCore::Document::updateLayoutIfDimensionsOutOfDate(v3, (uint64_t)this, 2);
  v5 = *(_QWORD *)(v3 + 1944);
  if (!v5 || *(_BYTE *)(v3 + 3405))
  {
    v1 = 0;
    goto LABEL_10;
  }
  ++*(_DWORD *)(v5 + 16);
  if (*(_BYTE *)(v3 + 3384) == 2)
  {
    if ((*((_WORD *)this + 14) & 0x10) == 0
      || (WebCore::Element *)WebCore::Document::bodyOrFrameset((WebCore::Document *)v3) != this)
    {
LABEL_5:
      v6 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
      if (v6 && (*(_BYTE *)(v6 + 45) & 4) != 0)
      {
        ++*(_DWORD *)(v6 + 16);
        v9 = WebCore::RenderBox::clientHeight((WebCore::RenderBox *)v6);
        v11 = ((int)(v9 - (v10 & 0xFFFFFFC0) + 32) >> 6) + v9 / 64;
        v12 = v11 << 6;
        if (v11 < -33554432)
          v12 = 0x80000000;
        if (v11 <= 0x1FFFFFF)
          v13 = v12;
        else
          v13 = 0x7FFFFFFF;
        v14 = *(unsigned __int8 *)(v6 + 46);
        if (v14 == 63 || v14 == 35)
        {
          v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1000))(v6);
          v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1008))(v6);
          v16 = v1 + v15;
          if (__OFADD__((_DWORD)v1, v15))
            v16 = (v1 >> 31) + 0x7FFFFFFF;
          v17 = __OFADD__(v13, v16);
          v18 = v13 + v16;
          if (v17)
            v13 = (v13 >> 31) + 0x7FFFFFFF;
          else
            v13 = v18;
        }
        v19 = (float)((float)((float)v13 * 0.015625) / *(float *)(*(_QWORD *)(v6 + 104) + 184)) * 64.0;
        if (v19 >= 2147483650.0)
        {
          v20 = 33554432.0;
        }
        else if (v19 <= -2147483650.0)
        {
          v20 = -33554432.0;
        }
        else
        {
          v20 = (double)(int)v19 * 0.015625;
        }
        v21 = *(_DWORD *)(v6 + 16);
        if (!v21)
        {
          __break(0xC471u);
          JUMPOUT(0x1959C3320);
        }
        LODWORD(v1) = llround(v20);
        *(_DWORD *)(v6 + 16) = v21 - 1;
      }
      else
      {
        v1 = 0;
      }
      goto LABEL_8;
    }
  }
  else if (*(WebCore::Element **)(v3 + 1272) != this)
  {
    goto LABEL_5;
  }
  v22 = WebCore::ScrollView::layoutSize(*(WebCore::ScrollView **)(v5 + 248));
  v1 = WebCore::adjustForAbsoluteZoom(HIDWORD(v22), v23, v24, *(float *)(*(_QWORD *)(v5 + 104) + 184));
LABEL_8:
  v7 = *(_DWORD *)(v5 + 16);
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x1959C3300);
  }
  *(_DWORD *)(v5 + 16) = v7 - 1;
LABEL_10:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return v1;
}

uint64_t WebCore::Element::scrollLeft(WebCore::Element *this)
{
  uint64_t v2;
  void *v3;
  WebCore::Element *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  float v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  int v21;
  float v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *v25;
  WTF *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  double v32;
  _QWORD *v34;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  WebCore::Document::updateLayout(v2, 6u, (uint64_t)this);
  if ((*(_QWORD *)(*(_QWORD *)(v2 + 680) + 664) & 1) != 0)
  {
    if (*(_BYTE *)(v2 + 3384) == 2)
    {
      v28 = WebCore::Document::body((WebCore::Document *)v2);
      if (v28)
      {
        v29 = v28;
        *(_DWORD *)(v28 + 24) += 2;
        if (WebCore::Document::isBodyPotentiallyScrollable(v2, (_QWORD *)v28))
          v4 = 0;
        else
          v4 = (WebCore::Element *)v29;
        if (*(_DWORD *)(v29 + 24) == 2)
        {
          if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v29, v3);
        }
        else
        {
          *(_DWORD *)(v29 + 24) -= 2;
        }
      }
      else
      {
        v4 = 0;
      }
    }
    else
    {
      v4 = *(WebCore::Element **)(v2 + 1272);
    }
  }
  else
  {
    v4 = (WebCore::Element *)WebCore::Document::body((WebCore::Document *)v2);
  }
  if (v4 == this)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
    if (!v11)
      goto LABEL_7;
    v12 = *(_QWORD *)(v11 + 8);
    if (!v12 || !*(_QWORD *)(v12 + 288))
      goto LABEL_7;
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    v15 = *(_QWORD *)(v12 + 288);
    if (*(_QWORD *)(v15 + 40))
      v16 = WebCore::ScrollView::unobscuredContentRect(v15, 0);
    else
      v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v15 + 64) + 832))(v15 + 64, 0, 1);
    v6 = v16;
    v17 = *(float *)(v12 + 592);
    v18 = *(_QWORD *)(v12 + 24);
    v19 = 1.0;
    if (v18)
    {
      v20 = *(_QWORD *)(v18 + 8);
      if (v20)
      {
        v21 = (*(_DWORD *)v20)++;
        if (*(_QWORD *)(*(_QWORD *)(v12 + 128) + 8) == v12 && !*(_BYTE *)(v20 + 1098))
          v19 = *(float *)(v20 + 356);
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::Page::~Page(v20);
          WTF::fastFree(v26, v27);
        }
      }
    }
    v22 = v17 * v19;
    if ((float)(v17 * v19) != 1.0)
    {
      if (v22 <= 1.0)
        v30 = v6;
      else
        v30 = v6 + 1;
      v6 = (int)((double)v30 / v22);
    }
    do
    {
      v23 = __ldaxr(v13);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v13));
    if (!v24)
    {
      atomic_store(1u, v13);
      v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v25 = off_1E31FE290;
      v25[1] = v13;
      v34 = v25;
      WTF::ensureOnMainThread();
      if (v34)
        (*(void (**)(_QWORD *))(*v34 + 8))(v34);
    }
  }
  else
  {
    v5 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
    if (!v5 || (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) == 0)
    {
LABEL_7:
      v6 = 0;
      goto LABEL_8;
    }
    ++*(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1192))(v5);
    v6 = v8;
    v9 = *(float *)(*(_QWORD *)(v5 + 104) + 184);
    if (v9 != 1.0)
    {
      v31 = v8 - 1;
      if ((int)v8 >= 0)
        v31 = v8 + 1;
      if (v9 <= 1.0)
        v31 = v8;
      v32 = (double)v31 / v9 + dbl_1968DE9C0[(double)v31 / v9 < 0.0];
      if (v32 >= -2147483650.0 && v32 <= 2147483650.0)
        v6 = (int)v32;
      else
        v6 = 0;
    }
    v10 = *(_DWORD *)(v5 + 16);
    if (!v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1959C35C0);
    }
    *(_DWORD *)(v5 + 16) = v10 - 1;
  }
LABEL_8:
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v6;
}

unint64_t WebCore::Element::scrollTop(WebCore::Element *this)
{
  uint64_t v2;
  void *v3;
  WebCore::Element *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  float v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  int v21;
  float v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *v25;
  WTF *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  double v32;
  _QWORD *v34;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  WebCore::Document::updateLayout(v2, 6u, (uint64_t)this);
  if ((*(_QWORD *)(*(_QWORD *)(v2 + 680) + 664) & 1) != 0)
  {
    if (*(_BYTE *)(v2 + 3384) == 2)
    {
      v28 = WebCore::Document::body((WebCore::Document *)v2);
      if (v28)
      {
        v29 = v28;
        *(_DWORD *)(v28 + 24) += 2;
        if (WebCore::Document::isBodyPotentiallyScrollable(v2, (_QWORD *)v28))
          v4 = 0;
        else
          v4 = (WebCore::Element *)v29;
        if (*(_DWORD *)(v29 + 24) == 2)
        {
          if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v29, v3);
        }
        else
        {
          *(_DWORD *)(v29 + 24) -= 2;
        }
      }
      else
      {
        v4 = 0;
      }
    }
    else
    {
      v4 = *(WebCore::Element **)(v2 + 1272);
    }
  }
  else
  {
    v4 = (WebCore::Element *)WebCore::Document::body((WebCore::Document *)v2);
  }
  if (v4 == this)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
    if (!v11)
      goto LABEL_7;
    v12 = *(_QWORD *)(v11 + 8);
    if (!v12 || !*(_QWORD *)(v12 + 288))
      goto LABEL_7;
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    v15 = *(_QWORD *)(v12 + 288);
    if (*(_QWORD *)(v15 + 40))
      v16 = WebCore::ScrollView::unobscuredContentRect(v15, 0);
    else
      v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v15 + 64) + 832))(v15 + 64, 0, 1);
    v6 = HIDWORD(v16);
    v17 = *(float *)(v12 + 592);
    v18 = *(_QWORD *)(v12 + 24);
    v19 = 1.0;
    if (v18)
    {
      v20 = *(_QWORD *)(v18 + 8);
      if (v20)
      {
        v21 = (*(_DWORD *)v20)++;
        if (*(_QWORD *)(*(_QWORD *)(v12 + 128) + 8) == v12 && !*(_BYTE *)(v20 + 1098))
          v19 = *(float *)(v20 + 356);
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::Page::~Page(v20);
          WTF::fastFree(v26, v27);
        }
      }
    }
    v22 = v17 * v19;
    if ((float)(v17 * v19) != 1.0)
    {
      if (v22 <= 1.0)
        v30 = v6;
      else
        v30 = v6 + 1;
      v6 = (int)((double)v30 / v22);
    }
    do
    {
      v23 = __ldaxr(v13);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v13));
    if (!v24)
    {
      atomic_store(1u, v13);
      v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v25 = off_1E31FE290;
      v25[1] = v13;
      v34 = v25;
      WTF::ensureOnMainThread();
      if (v34)
        (*(void (**)(_QWORD *))(*v34 + 8))(v34);
    }
  }
  else
  {
    v5 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
    if (!v5 || (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) == 0)
    {
LABEL_7:
      v6 = 0;
      goto LABEL_8;
    }
    ++*(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1200))(v5);
    v6 = v8;
    v9 = *(float *)(*(_QWORD *)(v5 + 104) + 184);
    if (v9 != 1.0)
    {
      v31 = v8 - 1;
      if ((int)v8 >= 0)
        v31 = v8 + 1;
      if (v9 <= 1.0)
        v31 = v8;
      v32 = (double)v31 / v9 + dbl_1968DE9C0[(double)v31 / v9 < 0.0];
      if (v32 >= -2147483650.0 && v32 <= 2147483650.0)
        v6 = (int)v32;
      else
        v6 = 0;
    }
    v10 = *(_DWORD *)(v5 + 16);
    if (!v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1959C38FCLL);
    }
    *(_DWORD *)(v5 + 16) = v10 - 1;
  }
LABEL_8:
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v6;
}

unsigned int *WebCore::Element::setScrollLeft(WebCore::Element *this, int a2)
{
  uint64_t v4;
  unsigned int *result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  WebCore::LocalFrameView *v25;
  unsigned int v26;
  unsigned int v27;
  WTF *v28;
  void *v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  unsigned int *v35;

  v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  WebCore::Document::updateLayout(v4, 6u, (uint64_t)this);
  v34 = xmmword_1968DF820;
  result = (unsigned int *)WebCore::useSmoothScrolling(0, (uint64_t)this);
  BYTE2(v34) = (_BYTE)result;
  if ((_DWORD)result)
    *((_QWORD *)this + 6) |= 0x20000000000000uLL;
  if ((*(_QWORD *)(*(_QWORD *)(v4 + 680) + 664) & 1) != 0)
  {
    v7 = *(_QWORD *)(v4 + 1272);
    if (*(_BYTE *)(v4 + 3384) != 2 || !v7)
      goto LABEL_5;
    if ((*(_WORD *)(v7 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    {
      v32 = *(_QWORD *)(v7 + 80);
      if (v32)
      {
        while ((*(_WORD *)(v32 + 28) & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(v32 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
        {
          v7 = 0;
          v32 = *(_QWORD *)(v32 + 56);
          if (!v32)
            goto LABEL_5;
        }
        *(_DWORD *)(v32 + 24) += 2;
        result = (unsigned int *)WebCore::Document::isBodyPotentiallyScrollable(v4, (_QWORD *)v32);
        if ((_DWORD)result)
          v7 = 0;
        else
          v7 = v32;
        if (*(_DWORD *)(v32 + 24) == 2)
        {
          v33 = v7;
          if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)v32, v6);
          v7 = v33;
        }
        else
        {
          *(_DWORD *)(v32 + 24) -= 2;
        }
        goto LABEL_5;
      }
    }
LABEL_68:
    v7 = 0;
    goto LABEL_5;
  }
  v7 = *(_QWORD *)(v4 + 1272);
  if (!v7)
    goto LABEL_5;
  if ((*(_WORD *)(v7 + 28) & 0x10) == 0)
    goto LABEL_68;
  if (*(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    goto LABEL_68;
  v31 = *(_QWORD *)(v7 + 80);
  if (!v31)
    goto LABEL_68;
  while ((*(_WORD *)(v31 + 28) & 0x10) == 0
       || *(_QWORD *)(*(_QWORD *)(v31 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
  {
    v7 = 0;
    v31 = *(_QWORD *)(v31 + 56);
    if (!v31)
      goto LABEL_5;
  }
  v7 = v31;
LABEL_5:
  if ((WebCore::Element *)v7 == this)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 8);
      if (v16)
      {
        if (*(_QWORD *)(v16 + 288))
        {
          v17 = (unsigned int *)(v16 + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
          v19 = *(float *)(v16 + 592) * (float)a2;
          v20 = *(_QWORD *)(v16 + 24);
          v21 = 1.0;
          if (v20)
          {
            v22 = *(_QWORD *)(v20 + 8);
            if (v22)
            {
              v23 = (*(_DWORD *)v22)++;
              if (*(_QWORD *)(*(_QWORD *)(v16 + 128) + 8) == v16 && !*(_BYTE *)(v22 + 1098))
                v21 = *(float *)(v22 + 356);
              if (v23)
              {
                *(_DWORD *)v22 = v23;
              }
              else
              {
                WebCore::Page::~Page(v22);
                WTF::fastFree(v28, v29);
              }
            }
          }
          v24 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v16 + 288) + 64) + 832))(*(_QWORD *)(v16 + 288) + 64, 0, 1);
          LODWORD(v35) = (int)(float)(v19 * v21);
          HIDWORD(v35) = HIDWORD(v24);
          v25 = *(WebCore::LocalFrameView **)(v16 + 288);
          if (v25)
          {
            ++*((_DWORD *)v25 + 2);
            result = (unsigned int *)WebCore::LocalFrameView::setScrollPosition(v25, (WTF::StringImpl *)&v35, &v34);
            if (*((_DWORD *)v25 + 2) == 1)
              result = (unsigned int *)(*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)v25 + 8))(v25);
            else
              --*((_DWORD *)v25 + 2);
          }
          else
          {
            result = (unsigned int *)WebCore::LocalFrameView::setScrollPosition(0, (WTF::StringImpl *)&v35, &v34);
          }
          do
          {
            v26 = __ldaxr(v17);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v17));
          if (!v27)
          {
            atomic_store(1u, v17);
            v30 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v30 = off_1E31FE290;
            *((_QWORD *)v30 + 1) = v17;
            v35 = v30;
            WTF::ensureOnMainThread();
            result = v35;
            v35 = 0;
            if (result)
              result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
          }
        }
      }
    }
  }
  else
  {
    v8 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
    if (v8 && (*(_BYTE *)(v8 + 45) & 4) != 0)
    {
      ++*(_DWORD *)(v8 + 16);
      v9 = *(float *)(*(_QWORD *)(v8 + 104) + 184) * (float)a2;
      if (v9 >= 2147500000.0)
      {
        v10 = 0x7FFFFFFFLL;
      }
      else if (v9 <= -2147500000.0)
      {
        v10 = 0x80000000;
      }
      else
      {
        v10 = (int)v9;
      }
      result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v8 + 1224))(v8, v10, &v34);
      v11 = *(_QWORD *)(v8 + 144);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 264);
        if (v12)
        {
          v13 = *(_DWORD *)(v12 + 72);
          *(_BYTE *)(v12 + 48) = 1;
          *(_DWORD *)(v12 + 72) = v13 + 1;
          if (v13 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x1959C3E20);
          }
          *(_DWORD *)(v12 + 72) = v13;
        }
      }
      v14 = *(_DWORD *)(v8 + 16);
      if (!v14)
      {
        __break(0xC471u);
        JUMPOUT(0x1959C3E00);
      }
      *(_DWORD *)(v8 + 16) = v14 - 1;
    }
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::Element::setScrollTop(WebCore::Element *this, int a2)
{
  uint64_t v4;
  unsigned int *result;
  void *v6;
  WebCore::Element *v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  int v19;
  float v20;
  WebCore::LocalFrameView *v21;
  unsigned int *v22;
  _DWORD v23[2];
  __int128 v24;

  v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  WebCore::Document::updateLayout(v4, 6u, (uint64_t)this);
  v24 = xmmword_1968DF820;
  result = (unsigned int *)WebCore::useSmoothScrolling(0, (uint64_t)this);
  BYTE2(v24) = (_BYTE)result;
  if ((_DWORD)result)
    *((_QWORD *)this + 6) |= 0x20000000000000uLL;
  if ((*(_QWORD *)(*(_QWORD *)(v4 + 680) + 664) & 1) != 0)
  {
    if (*(_BYTE *)(v4 + 3384) == 2)
    {
      result = (unsigned int *)WebCore::Document::body((WebCore::Document *)v4);
      if (result)
      {
        v22 = result;
        result[6] += 2;
        result = (unsigned int *)WebCore::Document::isBodyPotentiallyScrollable(v4, result);
        if ((_DWORD)result)
          v7 = 0;
        else
          v7 = (WebCore::Element *)v22;
        if (v22[6] == 2)
        {
          if ((*((_WORD *)v22 + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)v22, v6);
        }
        else
        {
          v22[6] -= 2;
        }
      }
      else
      {
        v7 = 0;
      }
    }
    else
    {
      v7 = *(WebCore::Element **)(v4 + 1272);
    }
  }
  else
  {
    result = (unsigned int *)WebCore::Document::body((WebCore::Document *)v4);
    v7 = (WebCore::Element *)result;
  }
  if (v7 == this)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 8);
      if (v16)
      {
        if (*(_QWORD *)(v16 + 288))
        {
          v17 = (unsigned int *)(v16 + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
          v19 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v16 + 288) + 64) + 832))(*(_QWORD *)(v16 + 288) + 64, 0, 1);
          v20 = *(float *)(v16 + 592) * (float)a2;
          v23[0] = v19;
          v23[1] = (int)(float)(v20 * WebCore::LocalFrame::frameScaleFactor((WebCore::LocalFrame *)v16));
          v21 = *(WebCore::LocalFrameView **)(v16 + 288);
          if (v21)
          {
            ++*((_DWORD *)v21 + 2);
            WebCore::LocalFrameView::setScrollPosition(v21, (WTF::StringImpl *)v23, &v24);
            if (*((_DWORD *)v21 + 2) == 1)
              (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v21 + 8))(v21);
            else
              --*((_DWORD *)v21 + 2);
          }
          else
          {
            WebCore::LocalFrameView::setScrollPosition(0, (WTF::StringImpl *)v23, &v24);
          }
          result = WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v16 + 8));
        }
      }
    }
  }
  else
  {
    v8 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
    if (v8 && (*(_BYTE *)(v8 + 45) & 4) != 0)
    {
      ++*(_DWORD *)(v8 + 16);
      v9 = *(float *)(*(_QWORD *)(v8 + 104) + 184) * (float)a2;
      if (v9 >= 2147500000.0)
      {
        v10 = 0x7FFFFFFFLL;
      }
      else if (v9 <= -2147500000.0)
      {
        v10 = 0x80000000;
      }
      else
      {
        v10 = (int)v9;
      }
      result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v8 + 1232))(v8, v10, &v24);
      v11 = *(_QWORD *)(v8 + 144);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 264);
        if (v12)
        {
          v13 = *(_DWORD *)(v12 + 72);
          *(_BYTE *)(v12 + 48) = 1;
          *(_DWORD *)(v12 + 72) = v13 + 1;
          if (v13 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x1959C4124);
          }
          *(_DWORD *)(v12 + 72) = v13;
        }
      }
      v14 = *(_DWORD *)(v8 + 16);
      if (!v14)
      {
        __break(0xC471u);
        JUMPOUT(0x1959C40B0);
      }
      *(_DWORD *)(v8 + 16) = v14 - 1;
    }
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::Element::scrollWidth(WebCore::Element *this)
{
  uint64_t v2;
  void *v3;
  WebCore::Element *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  int v14;
  float v15;
  unsigned int v16;
  unsigned int v17;
  WTF *v19;
  void *v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  int v28;
  int v29;
  double v30;
  _QWORD *v32;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  WebCore::Document::updateLayoutIfDimensionsOutOfDate(v2, (uint64_t)this, 1);
  if ((*(_QWORD *)(*(_QWORD *)(v2 + 680) + 664) & 1) != 0)
  {
    if (*(_BYTE *)(v2 + 3384) == 2)
    {
      v23 = WebCore::Document::body((WebCore::Document *)v2);
      if (!v23)
        goto LABEL_39;
      v24 = v23;
      *(_DWORD *)(v23 + 24) += 2;
      if (WebCore::Document::isBodyPotentiallyScrollable(v2, (_QWORD *)v23))
        v4 = 0;
      else
        v4 = (WebCore::Element *)v24;
      if (*(_DWORD *)(v24 + 24) == 2)
      {
        if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v24, v3);
      }
      else
      {
        *(_DWORD *)(v24 + 24) -= 2;
      }
    }
    else
    {
      v4 = *(WebCore::Element **)(v2 + 1272);
    }
  }
  else
  {
    v4 = (WebCore::Element *)WebCore::Document::body((WebCore::Document *)v2);
  }
  if (v4 == this)
  {
    WebCore::Document::updateLayout(v2, 2u, 0);
    v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        if (*(_QWORD *)(v6 + 288))
        {
          v7 = (unsigned int *)(v6 + 8);
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 + 1, v7));
          v9 = *(unsigned int *)(*(_QWORD *)(v6 + 288) + 256);
          v10 = *(float *)(v6 + 592);
          v11 = *(_QWORD *)(v6 + 24);
          v12 = 1.0;
          if (v11)
          {
            v13 = *(_QWORD *)(v11 + 8);
            if (v13)
            {
              v14 = (*(_DWORD *)v13)++;
              if (*(_QWORD *)(*(_QWORD *)(v6 + 128) + 8) == v6 && !*(_BYTE *)(v13 + 1098))
                v12 = *(float *)(v13 + 356);
              if (v14)
              {
                *(_DWORD *)v13 = v14;
              }
              else
              {
                WebCore::Page::~Page(v13);
                WTF::fastFree(v19, v20);
              }
            }
          }
          v15 = v10 * v12;
          if ((float)(v10 * v12) != 1.0)
          {
            if (v15 <= 1.0)
              v21 = v9;
            else
              v21 = v9 + 1;
            v9 = (int)((double)v21 / v15);
          }
          do
          {
            v16 = __ldaxr(v7);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v7));
          if (!v17)
          {
            atomic_store(1u, v7);
            v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v22 = off_1E31FE290;
            v22[1] = v7;
            v32 = v22;
            WTF::ensureOnMainThread();
            if (v32)
              (*(void (**)(_QWORD *))(*v32 + 8))(v32);
          }
          goto LABEL_18;
        }
      }
    }
LABEL_41:
    v9 = 0;
    goto LABEL_18;
  }
LABEL_39:
  v25 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (!v25 || (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) == 0)
    goto LABEL_41;
  ++*(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 1208))(v25);
  v9 = v26;
  v27 = *(float *)(*(_QWORD *)(v25 + 104) + 184);
  if (v27 != 1.0)
  {
    v29 = v26 - 1;
    if ((int)v26 >= 0)
      v29 = v26 + 1;
    if (v27 <= 1.0)
      v29 = v26;
    v30 = (double)v29 / v27 + dbl_1968DE9C0[(double)v29 / v27 < 0.0];
    if (v30 >= -2147483650.0 && v30 <= 2147483650.0)
      v9 = (int)v30;
    else
      v9 = 0;
  }
  v28 = *(_DWORD *)(v25 + 16);
  if (!v28)
  {
    __break(0xC471u);
    JUMPOUT(0x1959C4414);
  }
  *(_DWORD *)(v25 + 16) = v28 - 1;
LABEL_18:
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v9;
}

uint64_t WebCore::Element::scrollHeight(WebCore::Element *this)
{
  uint64_t v2;
  void *v3;
  WebCore::Element *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  int v15;
  float v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  float v21;
  int v22;
  WTF *v23;
  void *v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  double v30;
  _QWORD *v32;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  WebCore::Document::updateLayoutIfDimensionsOutOfDate(v2, (uint64_t)this, 2);
  if ((*(_QWORD *)(*(_QWORD *)(v2 + 680) + 664) & 1) != 0)
  {
    if (*(_BYTE *)(v2 + 3384) == 2)
    {
      v27 = WebCore::Document::body((WebCore::Document *)v2);
      if (!v27)
        goto LABEL_5;
      v28 = v27;
      *(_DWORD *)(v27 + 24) += 2;
      if (WebCore::Document::isBodyPotentiallyScrollable(v2, (_QWORD *)v27))
        v4 = 0;
      else
        v4 = (WebCore::Element *)v28;
      if (*(_DWORD *)(v28 + 24) == 2)
      {
        if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v28, v3);
      }
      else
      {
        *(_DWORD *)(v28 + 24) -= 2;
      }
    }
    else
    {
      v4 = *(WebCore::Element **)(v2 + 1272);
    }
  }
  else
  {
    v4 = (WebCore::Element *)WebCore::Document::body((WebCore::Document *)v2);
  }
  if (v4 == this)
  {
    WebCore::Document::updateLayout(v2, 2u, 0);
    v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
    if (!v7)
      goto LABEL_7;
    v8 = *(_QWORD *)(v7 + 8);
    if (!v8 || !*(_QWORD *)(v8 + 288))
      goto LABEL_7;
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v6 = *(unsigned int *)(*(_QWORD *)(v8 + 288) + 260);
    v11 = *(float *)(v8 + 592);
    v12 = *(_QWORD *)(v8 + 24);
    v13 = 1.0;
    if (v12)
    {
      v14 = *(_QWORD *)(v12 + 8);
      if (v14)
      {
        v15 = (*(_DWORD *)v14)++;
        if (*(_QWORD *)(*(_QWORD *)(v8 + 128) + 8) == v8 && !*(_BYTE *)(v14 + 1098))
          v13 = *(float *)(v14 + 356);
        if (v15)
        {
          *(_DWORD *)v14 = v15;
        }
        else
        {
          WebCore::Page::~Page(v14);
          WTF::fastFree(v23, v24);
        }
      }
    }
    v16 = v11 * v13;
    if ((float)(v11 * v13) != 1.0)
    {
      if (v16 <= 1.0)
        v25 = v6;
      else
        v25 = v6 + 1;
      v6 = (int)((double)v25 / v16);
    }
    do
    {
      v17 = __ldaxr(v9);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v9));
    if (!v18)
    {
      atomic_store(1u, v9);
      v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v26 = off_1E31FE290;
      v26[1] = v9;
      v32 = v26;
      WTF::ensureOnMainThread();
      if (v32)
        (*(void (**)(_QWORD *))(*v32 + 8))(v32);
    }
    goto LABEL_21;
  }
LABEL_5:
  v5 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (!v5 || (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) == 0)
  {
LABEL_7:
    v6 = 0;
    goto LABEL_21;
  }
  ++*(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1216))(v5);
  v6 = v20;
  v21 = *(float *)(*(_QWORD *)(v5 + 104) + 184);
  if (v21 != 1.0)
  {
    v29 = v20 - 1;
    if ((int)v20 >= 0)
      v29 = v20 + 1;
    if (v21 <= 1.0)
      v29 = v20;
    v30 = (double)v29 / v21 + dbl_1968DE9C0[(double)v29 / v21 < 0.0];
    if (v30 >= -2147483650.0 && v30 <= 2147483650.0)
      v6 = (int)v30;
    else
      v6 = 0;
  }
  v22 = *(_DWORD *)(v5 + 16);
  if (!v22)
  {
    __break(0xC471u);
    JUMPOUT(0x1959C4734);
  }
  *(_DWORD *)(v5 + 16) = v22 - 1;
LABEL_21:
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v6;
}

uint64_t WebCore::Element::boundsInRootViewSpace(WebCore::Element *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::ScrollView *v6;
  int v7;
  WebCore::Element *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  BOOL v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  unint64_t v31;
  float v32;
  float v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  int v43;
  _OWORD *v44;
  __int128 v45;
  float v46[8];
  uint64_t v47;
  _OWORD v48[2];
  float v49;
  float v50;
  float v51;
  float v52;
  char v53;
  WTF *v54;
  uint64_t v55;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  WebCore::Document::updateLayout(v2, 2u, 0);
  v4 = *(_QWORD *)(v2 + 528);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0 && (v6 = *(WebCore::ScrollView **)(v5 + 288)) != 0)
  {
    ++*((_DWORD *)v6 + 2);
    v54 = 0;
    v55 = 0;
    if ((*((_BYTE *)this + 28) & 0x20) == 0)
      goto LABEL_13;
    v7 = *((_DWORD *)this + 6);
    *((_DWORD *)this + 6) = v7 + 2;
    if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_9;
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1959C4B58);
    }
    if (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 103
      || (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 680) & 0x800000000000) != 0)
    {
LABEL_9:
      v8 = 0;
    }
    else
    {
      *((_DWORD *)this + 6) = v7 + 4;
      v7 += 2;
      v8 = this;
    }
    if (v7)
    {
      *((_DWORD *)this + 6) = v7;
    }
    else if ((*((_WORD *)this + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(this, v3);
    }
    if (v8)
    {
      WebCore::SVGElement::getBoundingBox(v8, (uint64_t)&v49);
      if (v53)
      {
        WebCore::ContainerNode::checkedRenderer((uint64_t)&v47, *((_QWORD *)this + 8));
        v40 = v47;
        v46[0] = v49;
        v46[1] = v50;
        v46[2] = v49 + v51;
        v46[3] = v50;
        v46[4] = v49 + v51;
        v46[5] = v50 + v52;
        v46[6] = v49;
        v46[7] = v50 + v52;
        WebCore::RenderObject::localToContainerQuad(v47, v46, 0, 2u, v48);
        if (HIDWORD(v55) == (_DWORD)v55)
        {
          WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatQuad>((uint64_t)&v54, (unint64_t)v48);
        }
        else
        {
          v43 = HIDWORD(v55) + 1;
          v44 = (_OWORD *)((char *)v54 + 32 * HIDWORD(v55));
          v45 = v48[1];
          *v44 = v48[0];
          v44[1] = v45;
          HIDWORD(v55) = v43;
        }
        if (v40)
        {
          v41 = *(_DWORD *)(v40 + 16);
          if (!v41)
          {
            __break(0xC471u);
            JUMPOUT(0x1959C4BECLL);
          }
          *(_DWORD *)(v40 + 16) = v41 - 1;
        }
      }
      if (*((_DWORD *)v8 + 6) == 2)
      {
        if ((*((_WORD *)v8 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v8, v39);
      }
      else
      {
        *((_DWORD *)v8 + 6) -= 2;
      }
    }
    else
    {
LABEL_13:
      v9 = *((_QWORD *)this + 8);
      v10 = v9 & 0xFFFFFFFFFFFFLL;
      if ((v9 & 0xFFFFFFFFFFFFLL) != 0)
      {
        v11 = *(_BYTE *)((v9 & 0xFFFFFFFFFFFFLL) + 0x2D);
        if ((v11 & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1959C4B78);
        }
        if ((v11 & 8) != 0
          || ((*(_BYTE *)(v10 + 52) & 7) == 4 ? (v42 = (*(_BYTE *)(v10 + 53) & 1) == 0) : (v42 = 0), v42))
        {
          ++*(_DWORD *)(v10 + 16);
          (*(void (**)(uint64_t, WTF **, _QWORD))(*(_QWORD *)v10 + 392))(v10, &v54, 0);
          v12 = *(_DWORD *)(v10 + 16);
          if (!v12)
          {
            __break(0xC471u);
            JUMPOUT(0x1959C4B98);
          }
          *(_DWORD *)(v10 + 16) = v12 - 1;
        }
      }
    }
    WebCore::unitedBoundingBoxes((unsigned int *)&v54);
    v17 = floorf(v13);
    v18 = 2147500000.0;
    if (v17 < 2147500000.0)
    {
      v18 = -2147500000.0;
      v19 = v17 <= -2147500000.0;
      v20 = (float)(int)v17;
      if (!v19)
        v18 = v20;
    }
    v21 = floorf(v14);
    v22 = 2147500000.0;
    if (v21 < 2147500000.0)
    {
      v22 = -2147500000.0;
      if (v21 > -2147500000.0)
        v22 = (float)(int)v21;
    }
    v23 = v14 + v16;
    v24 = ceilf(v13 + v15);
    v25 = 2147500000.0;
    if (v24 < 2147500000.0)
    {
      v25 = -2147500000.0;
      v19 = v24 <= -2147500000.0;
      v26 = (float)(int)v24;
      if (!v19)
        v25 = v26;
    }
    v27 = ceilf(v23);
    v28 = 2147500000.0;
    if (v27 < 2147500000.0)
    {
      v28 = -2147500000.0;
      v19 = v27 <= -2147500000.0;
      v29 = (float)(int)v27;
      if (!v19)
        v28 = v29;
    }
    if (v18 >= 2147500000.0)
    {
      v30 = 0x7FFFFFFFLL;
    }
    else if (v18 <= -2147500000.0)
    {
      v30 = 0x80000000;
    }
    else
    {
      v30 = (int)v18;
    }
    if (v22 >= 2147500000.0)
    {
      v31 = 0x7FFFFFFF00000000;
    }
    else if (v22 <= -2147500000.0)
    {
      v31 = 0x8000000000000000;
    }
    else
    {
      v31 = (unint64_t)(int)v22 << 32;
    }
    v32 = v25 - v18;
    v33 = v28 - v22;
    if (v32 >= 2147500000.0)
    {
      v34 = 0x7FFFFFFFLL;
    }
    else if (v32 <= -2147500000.0)
    {
      v34 = 0x80000000;
    }
    else
    {
      v34 = (int)v32;
    }
    if (v33 >= 2147500000.0)
    {
      v35 = 0x7FFFFFFF00000000;
    }
    else if (v33 <= -2147500000.0)
    {
      v35 = 0x8000000000000000;
    }
    else
    {
      v35 = (unint64_t)(int)v33 << 32;
    }
    *(_QWORD *)&v48[0] = v31 | v30;
    *((_QWORD *)&v48[0] + 1) = v35 | v34;
    v36 = WebCore::ScrollView::contentsToRootView(v6, (const WebCore::IntRect *)v48);
    v37 = v54;
    if (v54)
    {
      v54 = 0;
      LODWORD(v55) = 0;
      WTF::fastFree(v37, v3);
    }
    if (*((_DWORD *)v6 + 2) == 1)
      (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v6 + 8))(v6);
    else
      --*((_DWORD *)v6 + 2);
  }
  else
  {
    v36 = 0;
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v36;
}

uint64_t WebCore::ContainerNode::checkedRenderer(uint64_t this, uint64_t a2)
{
  if ((a2 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((a2 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      this = 105;
      __break(0xC471u);
    }
    else
    {
      *(_QWORD *)this = a2 & 0xFFFFFFFFFFFFLL;
      ++*(_DWORD *)((a2 & 0xFFFFFFFFFFFFLL) + 0x10);
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

uint64_t WebCore::Element::boundingBoxInRootViewCoordinates(WebCore::Element *this)
{
  WebCore::RenderObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::ScrollView *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int v9;
  _QWORD v11[2];

  v1 = (WebCore::RenderObject *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL);
  if (!v1)
    return 0;
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    goto LABEL_17;
  }
  ++*(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  v3 = *(_QWORD *)(v2 + 528);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
    v5 = *(WebCore::ScrollView **)(v4 + 288);
  else
    v5 = 0;
  v11[0] = WebCore::RenderObject::absoluteBoundingBoxRect(v1, 1, 0);
  v11[1] = v6;
  v8 = WebCore::ScrollView::contentsToRootView(v5, (const WebCore::IntRect *)v11);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v7);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  v9 = *((_DWORD *)v1 + 4);
  if (!v9)
  {
    __break(0xC471u);
LABEL_17:
    JUMPOUT(0x1959C4DA0);
  }
  *((_DWORD *)v1 + 4) = v9 - 1;
  return v8;
}

uint64_t WebCore::Element::absoluteEventBoundsOfElementAndDescendants(WebCore::Element *this, BOOL *a2)
{
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  WebCore::Element *v8;
  void *v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v23;
  float v24;
  float v25;
  float v27;
  float v29;
  float v30;
  float v32;
  float v33;
  double v34;
  int v35;
  unsigned int v36;
  double v37;
  unsigned int v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t result;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  BOOL v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v68;
  float v70;
  float v72;
  double v73;
  int v74;
  double v75;
  unsigned int v76;
  double v77;
  unsigned int v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int16 v98;
  int v99;
  __int16 v100;
  uint64_t v101;
  int v102;
  int v104;
  int *v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  __int16 v115;
  int v116;
  __int16 v117;
  uint64_t v118;
  int v119;
  WebCore::Node *v122;
  uint64_t v123;
  int *v124;
  int v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  unsigned int v130;
  uint64_t v131;
  int v132;
  signed int v133;
  signed int v134;
  int v135;
  BOOL v136;
  unsigned int v137;
  int v138;
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  void *v144;
  float v145;
  float v146;
  float v147;
  float v148;
  double v149;
  int v150;
  double v151;
  unsigned int v152;
  double v153;
  uint64_t v154;
  uint64_t v155;
  double v156;
  unint64_t v157;
  uint64_t v158;
  WTF *v159;
  uint64_t v160;
  uint64_t v161;
  WTF *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  void *v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v173;
  float v174;
  float v175;
  float v177;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  double v184;
  int v185;
  double v186;
  unsigned int v187;
  double v188;
  uint64_t v189;
  uint64_t v190;
  double v191;
  unint64_t v192;
  int v193;
  WTF *v194;
  uint64_t v195;
  int *v196;
  WTF *v197;
  uint64_t v198;
  char v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  __int128 v208;
  float v209;
  float v210;
  float v211;
  float v212;

  *a2 = 0;
  v4 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    v5 = *(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D);
    if ((v5 & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1959C5A5CLL);
    }
    if ((*((_WORD *)this + 14) & 0x20) == 0)
      goto LABEL_92;
    v6 = *((_DWORD *)this + 6);
    v7 = v6 + 2;
    *((_DWORD *)this + 6) = v6 + 2;
    if ((*(_BYTE *)(v4 + 45) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1959C5A7CLL);
    }
    if (*(_BYTE *)(v4 + 46) == 103
      || (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 680) & 0x800000000000) != 0)
    {
      v8 = 0;
      if (v6)
      {
LABEL_8:
        *((_DWORD *)this + 6) = v6;
LABEL_9:
        if (v8)
        {
          if ((*(unsigned int (**)(WebCore::Element *))(*(_QWORD *)v8 + 1184))(v8)
            && (v10 = *((_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFLL) != 0)
          {
            if ((*(_BYTE *)((*((_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1959C5A9CLL);
            }
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 232))(v10);
            v15 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
            if (v15)
            {
              if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x1959C5ADCLL);
              }
              ++*(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
            }
            v200 = v11;
            v201 = v12;
            v202 = v11 + v13;
            v203 = v12;
            v204 = v11 + v13;
            v205 = v12 + v14;
            v206 = v11;
            v207 = v12 + v14;
            WebCore::RenderObject::localToContainerQuad(v15, &v200, 0, 2u, &v208);
            v16 = v209;
            v17 = v210;
            if (v211 >= v209)
              v18 = v209;
            else
              v18 = v211;
            v19 = *(float *)&v208;
            if (*((float *)&v208 + 2) >= *(float *)&v208)
              v20 = *(float *)&v208;
            else
              v20 = *((float *)&v208 + 2);
            if (v18 >= v20)
              v18 = v20;
            v21 = fabsf(v18);
            if (v21 == INFINITY || v21 > 2147500000.0)
              v18 = (float)((SLODWORD(v18) >> 31) ^ 0x7FFFFFFF);
            if (v212 >= v210)
              v23 = v210;
            else
              v23 = v212;
            if (*((float *)&v208 + 3) >= *((float *)&v208 + 1))
              v24 = *((float *)&v208 + 1);
            else
              v24 = *((float *)&v208 + 3);
            if (v23 >= v24)
              v23 = v24;
            v25 = fabsf(v23);
            if (v25 == INFINITY || v25 > 2147500000.0)
              v23 = (float)((SLODWORD(v23) >> 31) ^ 0x7FFFFFFF);
            if (*(float *)&v208 < *((float *)&v208 + 2))
              v19 = *((float *)&v208 + 2);
            if (v209 < v211)
              v16 = v211;
            if (v19 >= v16)
              v16 = v19;
            v27 = fabsf(v16);
            if (v27 == INFINITY || v27 > 2147500000.0)
              v16 = (float)((SLODWORD(v16) >> 31) ^ 0x7FFFFFFF);
            if (*((float *)&v208 + 1) >= *((float *)&v208 + 3))
              v29 = *((float *)&v208 + 1);
            else
              v29 = *((float *)&v208 + 3);
            if (v210 < v212)
              v17 = v212;
            if (v29 >= v17)
              v17 = v29;
            v30 = fabsf(v17);
            if (v30 == INFINITY || v30 > 2147500000.0)
              v17 = (float)((SLODWORD(v17) >> 31) ^ 0x7FFFFFFF);
            v32 = v16 - v18;
            v33 = v17 - v23;
            v34 = v18 * 64.0;
            if (v34 > -2147483650.0)
              v35 = (int)v34;
            else
              v35 = 0x80000000;
            if (v34 < 2147483650.0)
              v36 = v35;
            else
              v36 = 0x7FFFFFFF;
            v37 = v23 * 64.0;
            if (v37 > -2147483650.0)
              v38 = (int)v37;
            else
              v38 = 0x80000000;
            if (v37 < 2147483650.0)
              v39 = v38;
            else
              v39 = 0x7FFFFFFFLL;
            v40 = v32 * 64.0;
            v41 = 0x7FFFFFFFLL;
            v42 = 0x80000000;
            if (v40 > -2147483650.0)
              v42 = (int)v40;
            if (v40 < 2147483650.0)
              v41 = v42;
            v43 = v33 * 64.0;
            if (v43 >= 2147483650.0)
            {
              v44 = 0x7FFFFFFF00000000;
            }
            else if (v43 <= -2147483650.0)
            {
              v44 = 0x8000000000000000;
            }
            else
            {
              v44 = (unint64_t)(int)v43 << 32;
            }
            if (v15)
            {
              v45 = *(_DWORD *)(v15 + 16);
              if (!v45)
              {
                __break(0xC471u);
                JUMPOUT(0x1959C5ABCLL);
              }
              *(_DWORD *)(v15 + 16) = v45 - 1;
            }
            v46 = v44 | v41;
          }
          else
          {
            v46 = 0;
            v39 = 0;
            v36 = 0;
          }
          if (*((_DWORD *)v8 + 6) == 2)
          {
            if ((*((_WORD *)v8 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v8, v9);
          }
          else
          {
            *((_DWORD *)v8 + 6) -= 2;
          }
          goto LABEL_96;
        }
        v47 = *((_QWORD *)this + 8);
        v4 = v47 & 0xFFFFFFFFFFFFLL;
        if ((v47 & 0xFFFFFFFFFFFFLL) == 0)
        {
          v48 = 1;
LABEL_183:
          v87 = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)v4, 1, a2);
          v89 = (_DWORD)v87 << 6;
          if ((int)v87 < -33554432)
            v89 = 0x80000000;
          if ((int)v87 <= 0x1FFFFFF)
            v36 = v89;
          else
            v36 = 0x7FFFFFFF;
          v90 = HIDWORD(v87) << 6;
          if (SHIDWORD(v87) < -33554432)
            v90 = 0x80000000;
          if (SHIDWORD(v87) <= 0x1FFFFFF)
            v39 = v90;
          else
            v39 = 0x7FFFFFFFLL;
          v91 = ((_DWORD)v88 << 6);
          if ((int)v88 < -33554432)
            v91 = 0x80000000;
          v92 = 0x8000000000000000;
          if (SHIDWORD(v88) >= -33554432)
            v92 = HIDWORD(v88) << 38;
          if ((int)v88 > 0x1FFFFFF)
            v91 = 0x7FFFFFFFLL;
          v93 = 0x7FFFFFFF00000000;
          if (SHIDWORD(v88) <= 0x1FFFFFF)
            v93 = v92;
          v46 = v93 | v91;
          if ((v48 & 1) != 0)
            goto LABEL_96;
          goto LABEL_202;
        }
        v5 = *(_BYTE *)((v47 & 0xFFFFFFFFFFFFLL) + 0x2D);
LABEL_92:
        if ((v5 & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1959C5B3CLL);
        }
        ++*(_DWORD *)(v4 + 16);
        if ((v5 & 4) == 0)
        {
          v48 = 0;
          goto LABEL_183;
        }
        if ((*(_BYTE *)(v4 + 23) & 0x10) != 0)
        {
          v141 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 648))(v4);
          if (v141)
          {
            v142 = v141;
            v124 = (int *)(v141 + 16);
            ++*(_DWORD *)(v141 + 16);
            v199 = 0;
            v197 = 0;
            v198 = 0;
            if (WebCore::RenderFragmentedFlow::absoluteQuadsForBox(v141, &v197, (uint64_t)&v199, (int *)v4))
            {
              WebCore::unitedBoundingBoxes((unsigned int *)&v197);
              v149 = v148 * 64.0;
              if (v149 > -2147483650.0)
                v150 = (int)v149;
              else
                v150 = 0x80000000;
              if (v149 < 2147483650.0)
                v36 = v150;
              else
                v36 = 0x7FFFFFFF;
              v151 = v145 * 64.0;
              if (v151 > -2147483650.0)
                v152 = (int)v151;
              else
                v152 = 0x80000000;
              if (v151 < 2147483650.0)
                v39 = v152;
              else
                v39 = 0x7FFFFFFFLL;
              v153 = v146 * 64.0;
              v154 = 0x80000000;
              if (v153 > -2147483650.0)
                v154 = (int)v153;
              if (v153 < 2147483650.0)
                v155 = v154;
              else
                v155 = 0x7FFFFFFFLL;
              v156 = v147 * 64.0;
              v157 = 0x8000000000000000;
              if (v156 > -2147483650.0)
                v157 = (unint64_t)(int)v156 << 32;
              if (v156 < 2147483650.0)
                v158 = v157;
              else
                v158 = 0x7FFFFFFF00000000;
              v159 = v197;
              if (v197)
              {
                v197 = 0;
                LODWORD(v198) = 0;
                WTF::fastFree(v159, v144);
              }
              v125 = *v124;
              if (!*v124)
              {
                __break(0xC471u);
                JUMPOUT(0x1959C60BCLL);
              }
              v46 = v158 | v155;
LABEL_316:
              LOBYTE(v81) = 0;
              *v124 = v125 - 1;
LABEL_317:
              v126 = *(_DWORD *)(v4 + 16);
              if (!v126)
              {
                __break(0xC471u);
                JUMPOUT(0x1959C5AFCLL);
              }
              *(_DWORD *)(v4 + 16) = v126 - 1;
              result = v36 | (unint64_t)(v39 << 32);
              if ((v81 & 1) != 0)
                return result;
              goto LABEL_97;
            }
            v160 = *(_QWORD *)(v142 + 32);
            if (v160)
            {
              v161 = *(_QWORD *)(v160 + 8);
              if (v161)
              {
                if ((*(_BYTE *)(v161 + 45) & 4) != 0)
                {
                  ++*(_DWORD *)(v161 + 16);
                  v163 = *(_QWORD *)(v161 + 192);
                  if (v163)
                  {
                    v164 = *(_QWORD *)(v163 + 4);
                    v165 = *(_QWORD *)(v163 + 12);
                  }
                  else
                  {
                    v164 = WebCore::RenderBox::flippedClientBoxRect((WebCore::RenderBox *)v161);
                  }
                  v200 = (float)(int)v164 * 0.015625;
                  v201 = (float)SHIDWORD(v164) * 0.015625;
                  v202 = v200 + (float)((float)(int)v165 * 0.015625);
                  v203 = v201;
                  v204 = v202;
                  v205 = v201 + (float)((float)SHIDWORD(v165) * 0.015625);
                  v206 = v200;
                  v207 = v205;
                  WebCore::RenderObject::localToContainerQuad(v161, &v200, 0, 2u, &v208);
                  v167 = *(float *)&v208;
                  v168 = v209;
                  if (v211 >= v209)
                    v169 = v209;
                  else
                    v169 = v211;
                  if (*((float *)&v208 + 2) >= *(float *)&v208)
                    v170 = *(float *)&v208;
                  else
                    v170 = *((float *)&v208 + 2);
                  if (v169 >= v170)
                    v169 = v170;
                  v171 = fabsf(v169);
                  if (v171 == INFINITY || v171 > 2147500000.0)
                    v169 = (float)((SLODWORD(v169) >> 31) ^ 0x7FFFFFFF);
                  if (v212 >= v210)
                    v173 = v210;
                  else
                    v173 = v212;
                  if (*((float *)&v208 + 3) >= *((float *)&v208 + 1))
                    v174 = *((float *)&v208 + 1);
                  else
                    v174 = *((float *)&v208 + 3);
                  if (v173 >= v174)
                    v173 = v174;
                  v175 = fabsf(v173);
                  if (v175 == INFINITY || v175 > 2147500000.0)
                    v173 = (float)((SLODWORD(v173) >> 31) ^ 0x7FFFFFFF);
                  if (*(float *)&v208 < *((float *)&v208 + 2))
                    v167 = *((float *)&v208 + 2);
                  if (v209 < v211)
                    v168 = v211;
                  if (v167 < v168)
                    v167 = v168;
                  v177 = fabsf(v167);
                  if (v177 == INFINITY || v177 > 2147500000.0)
                    v167 = (float)((SLODWORD(v167) >> 31) ^ 0x7FFFFFFF);
                  if (*((float *)&v208 + 1) >= *((float *)&v208 + 3))
                    v179 = *((float *)&v208 + 1);
                  else
                    v179 = *((float *)&v208 + 3);
                  if (v210 >= v212)
                    v180 = v210;
                  else
                    v180 = v212;
                  if (v179 < v180)
                    v179 = v180;
                  v181 = fabsf(v179);
                  if (v181 == INFINITY || v181 > 2147500000.0)
                    v179 = (float)((SLODWORD(v179) >> 31) ^ 0x7FFFFFFF);
                  v182 = v167 - v169;
                  v183 = v179 - v173;
                  v184 = v169 * 64.0;
                  if (v184 > -2147483650.0)
                    v185 = (int)v184;
                  else
                    v185 = 0x80000000;
                  if (v184 < 2147483650.0)
                    v36 = v185;
                  else
                    v36 = 0x7FFFFFFF;
                  v186 = v173 * 64.0;
                  if (v186 > -2147483650.0)
                    v187 = (int)v186;
                  else
                    v187 = 0x80000000;
                  if (v186 < 2147483650.0)
                    v39 = v187;
                  else
                    v39 = 0x7FFFFFFFLL;
                  v188 = v182 * 64.0;
                  v189 = 0x80000000;
                  if (v188 > -2147483650.0)
                    v189 = (int)v188;
                  if (v188 < 2147483650.0)
                    v190 = v189;
                  else
                    v190 = 0x7FFFFFFFLL;
                  v191 = v183 * 64.0;
                  if (v191 >= 2147483650.0)
                  {
                    v192 = 0x7FFFFFFF00000000;
                  }
                  else if (v191 <= -2147483650.0)
                  {
                    v192 = 0x8000000000000000;
                  }
                  else
                  {
                    v192 = (unint64_t)(int)v191 << 32;
                  }
                  v193 = *(_DWORD *)(v161 + 16);
                  if (!v193)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1959C6138);
                  }
                  *(_DWORD *)(v161 + 16) = v193 - 1;
                  v194 = v197;
                  if (v197)
                  {
                    v197 = 0;
                    LODWORD(v198) = 0;
                    WTF::fastFree(v194, v166);
                  }
                  v125 = *v124;
                  if (!*v124)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1959C6158);
                  }
                  v46 = v192 | v190;
                  goto LABEL_316;
                }
              }
            }
            v162 = v197;
            if (v197)
            {
              v197 = 0;
              LODWORD(v198) = 0;
              WTF::fastFree(v162, v143);
            }
            if (!*v124)
            {
              __break(0xC471u);
              JUMPOUT(0x1959C6118);
            }
            --*v124;
          }
        }
        v52 = *(_QWORD *)(v4 + 192);
        if (v52)
        {
          v53 = *(_QWORD *)(v52 + 4);
          v54 = *(_QWORD *)(v52 + 12);
        }
        else
        {
          v53 = WebCore::RenderBox::flippedClientBoxRect((WebCore::RenderBox *)v4);
        }
        v200 = (float)(int)v53 * 0.015625;
        v201 = (float)SHIDWORD(v53) * 0.015625;
        v202 = v200 + (float)((float)(int)v54 * 0.015625);
        v203 = v201;
        v204 = v202;
        v205 = v201 + (float)((float)SHIDWORD(v54) * 0.015625);
        v206 = v200;
        v207 = v205;
        WebCore::RenderObject::localToContainerQuad(v4, &v200, 0, 2u, &v208);
        v56 = v209;
        v55 = v210;
        if (v211 >= v209)
          v57 = v209;
        else
          v57 = v211;
        v58 = *((float *)&v208 + 1);
        v59 = *(float *)&v208;
        if (*((float *)&v208 + 2) >= *(float *)&v208)
          v60 = *(float *)&v208;
        else
          v60 = *((float *)&v208 + 2);
        if (v57 >= v60)
          v57 = v60;
        v61 = fabsf(v57);
        v62 = v61 != INFINITY && v61 <= 2147500000.0;
        v63 = (float)((SLODWORD(v57) >> 31) ^ 0x7FFFFFFF);
        if (v62)
          v63 = v57;
        if (v212 >= v210)
          v64 = v210;
        else
          v64 = v212;
        if (*((float *)&v208 + 3) >= *((float *)&v208 + 1))
          v65 = *((float *)&v208 + 1);
        else
          v65 = *((float *)&v208 + 3);
        if (v64 >= v65)
          v64 = v65;
        v66 = fabsf(v64);
        if (v66 == INFINITY || v66 > 2147500000.0)
          v64 = (float)((SLODWORD(v64) >> 31) ^ 0x7FFFFFFF);
        if (*(float *)&v208 < *((float *)&v208 + 2))
          v59 = *((float *)&v208 + 2);
        if (v209 < v211)
          v56 = v211;
        if (v59 >= v56)
          v56 = v59;
        v68 = fabsf(v56);
        if (v68 == INFINITY || v68 > 2147500000.0)
          v56 = (float)((SLODWORD(v56) >> 31) ^ 0x7FFFFFFF);
        if (*((float *)&v208 + 1) < *((float *)&v208 + 3))
          v58 = *((float *)&v208 + 3);
        if (v210 < v212)
          v55 = v212;
        if (v58 >= v55)
          v55 = v58;
        v70 = fabsf(v55);
        if (v70 == INFINITY || v70 > 2147500000.0)
          v55 = (float)((SLODWORD(v55) >> 31) ^ 0x7FFFFFFF);
        v72 = v55 - v64;
        v73 = v63 * 64.0;
        if (v73 > -2147483650.0)
          v74 = (int)v73;
        else
          v74 = 0x80000000;
        if (v73 < 2147483650.0)
          v36 = v74;
        else
          v36 = 0x7FFFFFFF;
        v75 = v64 * 64.0;
        if (v75 > -2147483650.0)
          v76 = (int)v75;
        else
          v76 = 0x80000000;
        if (v75 < 2147483650.0)
          v39 = v76;
        else
          v39 = 0x7FFFFFFFLL;
        v77 = (float)(v56 - v63) * 64.0;
        if (v77 >= 2147483650.0)
        {
          v78 = 0x7FFFFFFF;
        }
        else if (v77 > -2147483650.0)
        {
          v78 = (int)v77;
        }
        else
        {
          v78 = 0x80000000;
        }
        v79 = v72 * 64.0;
        if (v79 >= 2147483650.0)
        {
          v80 = 0x7FFFFFFFLL;
        }
        else if (v79 <= -2147483650.0)
        {
          v80 = 0x80000000;
        }
        else
        {
          v80 = (int)v79;
        }
        v46 = v78 | (unint64_t)(v80 << 32);
        if (*(_BYTE *)(v4 + 46) == 49)
        {
LABEL_256:
          LOBYTE(v81) = 1;
          goto LABEL_317;
        }
        if ((*(_BYTE *)(v4 + 45) & 1) != 0)
          goto LABEL_202;
        v81 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
        if (!v81)
          goto LABEL_317;
        if ((*(_WORD *)(v81 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1959C5BFCLL);
        }
        v82 = WebCore::RenderBlock::positionedObjects(*(WebCore::RenderBlock **)(*(_QWORD *)(*(_QWORD *)(v81 + 40) + 8)
                                                                               + 1944));
        if (!v82 || (v84 = v82, (v85 = *(_QWORD **)(v82 + 8)) == 0))
        {
LABEL_255:
          if (WebCore::RenderElement::canContainAbsolutelyPositionedObjects((WebCore::RenderElement *)v4))
            goto LABEL_256;
          v106 = (int *)WebCore::RenderObject::containingBlockForPositionType(2, v4);
          if (v106)
          {
            v196 = v106 + 4;
            ++v106[4];
            v107 = WebCore::RenderBlock::positionedObjects((WebCore::RenderBlock *)v106);
            if (!v107 || (v109 = v107, (v110 = *(_QWORD **)(v107 + 8)) == 0))
            {
LABEL_315:
              v124 = v196;
              v125 = *v196;
              if (!*v196)
              {
                __break(0xC471u);
                JUMPOUT(0x1959C5C5CLL);
              }
              goto LABEL_316;
            }
            while (1)
            {
              v111 = *(_QWORD *)(*v110 + 8);
              if (v111)
                break;
              v110 = (_QWORD *)v110[2];
              if (!v110)
                goto LABEL_315;
            }
LABEL_263:
            v112 = *(_DWORD *)(v111 + 16) + 1;
            *(_DWORD *)(v111 + 16) = v112;
            if (v111 == v4)
            {
              v119 = 5;
              goto LABEL_302;
            }
            if ((*(_BYTE *)(v4 + 45) & 1) != 0)
            {
              v113 = 0;
            }
            else
            {
              v113 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
              if (v113)
              {
                if ((*(_WORD *)(v113 + 28) & 8) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1959C5BACLL);
                }
                *(_DWORD *)(v113 + 24) += 2;
              }
            }
            if ((*(_BYTE *)(v111 + 45) & 1) != 0 || (v114 = *(_QWORD *)(*(_QWORD *)(v111 + 24) + 8)) == 0)
            {
              v119 = 0;
              if (v113)
                goto LABEL_299;
              goto LABEL_301;
            }
            v115 = *(_WORD *)(v114 + 28);
            if ((v115 & 8) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1959C5BCCLL);
            }
            v116 = *(_DWORD *)(v114 + 24);
            *(_DWORD *)(v114 + 24) = v116 + 2;
            if (v113 == v114)
            {
              v119 = 1;
              if (v116)
                goto LABEL_298;
              goto LABEL_285;
            }
            v117 = *(_WORD *)(v113 + 28);
            if ((v117 & 0xF000) == 0x9000)
            {
              if ((v115 & 0xF000) != 0x9000 && **(_QWORD **)(v114 + 40) == v113)
              {
                v119 = (*(unsigned __int8 *)(v114 + 22) >> 3) & 1;
                if (v116)
                {
LABEL_298:
                  *(_DWORD *)(v114 + 24) = v116;
                  if (v113)
                  {
LABEL_299:
                    if (*(_DWORD *)(v113 + 24) == 2)
                    {
                      if ((*(_WORD *)(v113 + 30) & 0x400) == 0)
                      {
                        v122 = (WebCore::Node *)v113;
                        v123 = v109;
                        WebCore::Node::removedLastRef(v122, v108);
                        v109 = v123;
                      }
                    }
                    else
                    {
                      *(_DWORD *)(v113 + 24) -= 2;
                    }
                  }
LABEL_301:
                  v112 = *(_DWORD *)(v111 + 16);
LABEL_302:
                  if (!v112)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1959C5B8CLL);
                  }
                  *(_DWORD *)(v111 + 16) = v112 - 1;
                  if (v119 == 5 || !v119)
                  {
                    while (1)
                    {
                      v110 = (_QWORD *)v110[2];
                      if (!v110)
                        break;
                      v111 = *(_QWORD *)(*v110 + 8);
                      if (v111)
                      {
                        ++*(_DWORD *)(v109 + 24);
                        goto LABEL_263;
                      }
                    }
                    ++*(_DWORD *)(v109 + 24);
                  }
                  goto LABEL_315;
                }
LABEL_285:
                v195 = v109;
                if ((*(_WORD *)(v114 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v114, v108);
                v109 = v195;
                if (!v113)
                  goto LABEL_301;
                goto LABEL_299;
              }
            }
            else if ((v117 & 4) != 0
                   && *(_QWORD *)(v113 + 80)
                   && ((*(unsigned __int8 *)(v114 + 22) ^ *(unsigned __int8 *)(v113 + 22)) & 8) == 0)
            {
              v118 = v114;
              do
              {
                v118 = *(_QWORD *)(v118 + 32);
                v119 = v118 != 0;
              }
              while (v118 != v113 && v118 != 0);
LABEL_297:
              if (v116)
                goto LABEL_298;
              goto LABEL_285;
            }
            v119 = 0;
            goto LABEL_297;
          }
LABEL_202:
          LOBYTE(v81) = 0;
          goto LABEL_317;
        }
        while (1)
        {
          v86 = *(_QWORD *)(*v85 + 8);
          if (v86)
            break;
          v85 = (_QWORD *)v85[2];
          if (!v85)
            goto LABEL_255;
        }
LABEL_203:
        v94 = *(_DWORD *)(v86 + 16) + 1;
        *(_DWORD *)(v86 + 16) = v94;
        if (v86 == v4)
        {
          v104 = 3;
LABEL_246:
          if (!v94)
          {
            __break(0xC471u);
            JUMPOUT(0x1959C5B1CLL);
          }
          *(_DWORD *)(v86 + 16) = v94 - 1;
          if (v104 != 3 && v104)
            goto LABEL_202;
          while (1)
          {
            v85 = (_QWORD *)v85[2];
            if (!v85)
              break;
            v86 = *(_QWORD *)(*v85 + 8);
            if (v86)
            {
              ++*(_DWORD *)(v84 + 24);
              goto LABEL_203;
            }
          }
          ++*(_DWORD *)(v84 + 24);
          goto LABEL_255;
        }
        if ((*(_DWORD *)(v86 + 20) & 0x1800000) != 0x1000000)
          goto LABEL_244;
        v95 = v86;
        if ((*(_BYTE *)(v86 + 45) & 2) != 0)
          v95 = *(_QWORD *)(*(_QWORD *)(v86 + 32) + 8);
        if ((*(_QWORD *)(v95 + 96) & 0x380000) != 0x300000)
          goto LABEL_244;
        if ((*(_BYTE *)(v4 + 45) & 1) != 0)
        {
          v96 = 0;
          if ((*(_BYTE *)(v86 + 45) & 1) != 0)
            goto LABEL_244;
        }
        else
        {
          v96 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
          if (v96 && (*(_WORD *)(v96 + 28) & 8) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1959C5C1CLL);
          }
          if ((*(_BYTE *)(v86 + 45) & 1) != 0)
            goto LABEL_244;
        }
        v97 = *(_QWORD *)(*(_QWORD *)(v86 + 24) + 8);
        if (!v97)
        {
LABEL_244:
          v104 = 0;
          goto LABEL_245;
        }
        v98 = *(_WORD *)(v97 + 28);
        if ((v98 & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1959C5C3CLL);
        }
        v99 = *(_DWORD *)(v97 + 24);
        *(_DWORD *)(v97 + 24) = v99 + 2;
        if (v96 == v97)
        {
          v102 = 1;
          if (v99)
            goto LABEL_231;
        }
        else
        {
          v100 = *(_WORD *)(v96 + 28);
          if ((v100 & 0xF000) == 0x9000)
          {
            if ((v98 & 0xF000) != 0x9000 && **(_QWORD **)(v97 + 40) == v96)
              v102 = (*(unsigned __int8 *)(v97 + 22) >> 3) & 1;
            else
              v102 = 0;
            if (v99)
              goto LABEL_231;
          }
          else
          {
            if ((v100 & 4) != 0
              && *(_QWORD *)(v96 + 80)
              && ((*(unsigned __int8 *)(v97 + 22) ^ *(unsigned __int8 *)(v96 + 22)) & 8) == 0)
            {
              v101 = v97;
              do
              {
                v101 = *(_QWORD *)(v101 + 32);
                v102 = v101 != 0;
              }
              while (v101 != v96 && v101 != 0);
            }
            else
            {
              v102 = 0;
            }
            if (v99)
            {
LABEL_231:
              *(_DWORD *)(v97 + 24) = v99;
              if ((v102 & 1) != 0)
              {
LABEL_232:
                v104 = 1;
LABEL_245:
                v94 = *(_DWORD *)(v86 + 16);
                goto LABEL_246;
              }
              goto LABEL_244;
            }
          }
        }
        if ((*(_WORD *)(v97 + 30) & 0x400) != 0)
        {
          if (v102)
            goto LABEL_232;
        }
        else
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v97, v83);
          if ((v102 & 1) != 0)
            goto LABEL_232;
        }
        goto LABEL_244;
      }
    }
    else
    {
      *((_DWORD *)this + 6) = v6 + 4;
      v6 += 2;
      v8 = this;
      if (v7)
        goto LABEL_8;
    }
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(this, a2);
    goto LABEL_9;
  }
  v46 = 0;
  v39 = 0;
  v36 = 0;
LABEL_96:
  result = v36 | (unint64_t)(v39 << 32);
LABEL_97:
  v50 = *((_QWORD *)this + 10);
  if (v50)
  {
    v51 = HIDWORD(v46);
    while ((*(_WORD *)(v50 + 28) & 8) == 0)
    {
      v50 = *(_QWORD *)(v50 + 56);
      if (!v50)
        return result;
    }
LABEL_320:
    *(_DWORD *)(v50 + 24) += 2;
    LOBYTE(v208) = 0;
    v127 = WebCore::Element::absoluteEventBoundsOfElementAndDescendants((WebCore::Element *)v50, (BOOL *)&v208);
    *a2 |= v208;
    if ((int)v128 >= 1 && SHIDWORD(v128) >= 1)
    {
      if ((int)v46 < 1 || (int)v51 < 1)
      {
        v36 = v127;
        v39 = HIDWORD(v127);
        LODWORD(v46) = v128;
        v51 = HIDWORD(v128);
      }
      else
      {
        if ((int)v127 >= (int)v36)
          v130 = v36;
        else
          v130 = v127;
        if (SHIDWORD(v127) >= (int)v39)
          v131 = v39;
        else
          v131 = HIDWORD(v127);
        v132 = v36 + v46;
        if (__OFADD__(v36, (_DWORD)v46))
          v132 = (v36 >> 31) + 0x7FFFFFFF;
        v133 = v127 + v128;
        if (__OFADD__((_DWORD)v127, (_DWORD)v128))
          v133 = (v127 >> 31) + 0x7FFFFFFF;
        if (v132 <= v133)
          v132 = v133;
        v134 = v39 + v51;
        if (__OFADD__((_DWORD)v39, (_DWORD)v51))
          v134 = (v39 >> 31) + 0x7FFFFFFF;
        v135 = HIDWORD(v127) + HIDWORD(v128);
        if (__OFADD__(HIDWORD(v127), HIDWORD(v128)))
          v135 = (HIDWORD(v127) >> 31) + 0x7FFFFFFF;
        if (v134 > v135)
          v135 = v134;
        v136 = __OFSUB__(v132, v130);
        v137 = v132 - v130;
        v138 = (v132 >> 31) + 0x7FFFFFFF;
        if (v136)
          LODWORD(v46) = v138;
        else
          LODWORD(v46) = v137;
        v136 = __OFSUB__(v135, (_DWORD)v131);
        v139 = v135 - v131;
        v140 = (v135 >> 31) + 0x7FFFFFFF;
        if (v136)
          LODWORD(v51) = v140;
        else
          LODWORD(v51) = v139;
        v36 = v130;
        v39 = v131;
      }
    }
    if (*(_DWORD *)(v50 + 24) == 2)
    {
      if ((*(_WORD *)(v50 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v50, (void *)v128);
    }
    else
    {
      *(_DWORD *)(v50 + 24) -= 2;
    }
    while (1)
    {
      v50 = *(_QWORD *)(v50 + 56);
      if (!v50)
        return v36 | (unint64_t)(v39 << 32);
      if ((*(_WORD *)(v50 + 28) & 8) != 0)
        goto LABEL_320;
    }
  }
  return result;
}

uint64_t WebCore::Element::absoluteEventHandlerBounds(WebCore::Element *this, BOOL *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0 && *(_QWORD *)(v3 + 288))
    return WebCore::Element::absoluteEventBoundsOfElementAndDescendants(this, a2);
  else
    return 0;
}

WTF *WebCore::Element::getClientRects@<X0>(WebCore::Element *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  _DWORD *v6;
  int hasAssociatedSVGLayoutBox;
  void *v8;
  int v9;
  WebCore::Element *v10;
  int v11;
  void *v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  int v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  int v26;
  _OWORD *v27;
  _OWORD *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  WTF *result;
  int v37;
  _OWORD *v38;
  __int128 v39;
  _OWORD *v40;
  __int128 v41;
  BOOL v42;
  _QWORD v43[4];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  WTF *v48;
  uint64_t v49;

  v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  WebCore::Document::updateLayout(v4, 6u, (uint64_t)this);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  v6 = (_DWORD *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL);
  if (v6)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1959C6564);
    }
    ++*(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
  }
  v48 = 0;
  v49 = 0;
  if ((*((_BYTE *)this + 28) & 0x20) != 0)
  {
    *((_DWORD *)this + 6) += 2;
    hasAssociatedSVGLayoutBox = WebCore::SVGElement::hasAssociatedSVGLayoutBox(this);
    v9 = *((_DWORD *)this + 6);
    if (hasAssociatedSVGLayoutBox)
    {
      v9 += 2;
      *((_DWORD *)this + 6) = v9;
      v10 = this;
    }
    else
    {
      v10 = 0;
    }
    v11 = v9 - 2;
    if (v11)
    {
      *((_DWORD *)this + 6) = v11;
    }
    else if ((*((_WORD *)this + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(this, v8);
    }
    if (v10)
    {
      if ((*(unsigned int (**)(WebCore::Element *))(*(_QWORD *)v10 + 1184))(v10))
      {
        v13 = *((_QWORD *)v10 + 8) & 0xFFFFFFFFFFFFLL;
        if (v13)
        {
          if ((*(_BYTE *)((*((_QWORD *)v10 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1959C6584);
          }
          LODWORD(v44) = (*(float (**)(uint64_t))(*(_QWORD *)v13 + 232))(v13);
          *((float *)&v44 + 1) = v14;
          *((float *)&v44 + 2) = *(float *)&v44 + v15;
          *((float *)&v44 + 3) = v14;
          *(float *)&v45 = *(float *)&v44 + v15;
          *((float *)&v45 + 1) = v14 + v16;
          DWORD2(v45) = v44;
          *((float *)&v45 + 3) = v14 + v16;
          WebCore::RenderObject::localToContainerQuad((uint64_t)v6, (float *)&v44, 0, 2u, &v46);
          v17 = HIDWORD(v49);
          if (HIDWORD(v49) == (_DWORD)v49)
          {
            v18 = (_OWORD *)WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v48, HIDWORD(v49) + 1, (unint64_t)&v46);
            v17 = HIDWORD(v49);
            v19 = (_OWORD *)((char *)v48 + 32 * HIDWORD(v49));
            v20 = v18[1];
            *v19 = *v18;
            v19[1] = v20;
          }
          else
          {
            v38 = (_OWORD *)((char *)v48 + 32 * HIDWORD(v49));
            v39 = v47;
            *v38 = v46;
            v38[1] = v39;
          }
          HIDWORD(v49) = v17 + 1;
        }
      }
      if (*((_DWORD *)v10 + 6) == 2)
      {
        if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v10, v12);
      }
      else
      {
        *((_DWORD *)v10 + 6) -= 2;
      }
      goto LABEL_20;
    }
  }
  WebCore::listBoxElementBoundingBox((unsigned int *)&v46, this);
  if (BYTE8(v47))
  {
    v21 = v46;
    *(_QWORD *)&v46 = 0;
    if (v6)
    {
      v22 = v6[4];
      if (!v22)
      {
        __break(0xC471u);
        JUMPOUT(0x1959C65A4);
      }
      v6[4] = v22 - 1;
    }
    v23 = (float32x2_t)vdup_n_s32(0x3C800000u);
    v24 = vmul_f32(vcvt_f32_s32(*(int32x2_t *)((char *)&v46 + 8)), v23);
    v25 = vadd_f32(v24, vmul_f32(vcvt_f32_s32(*(int32x2_t *)&v47), v23));
    v43[0] = v24;
    v43[1] = __PAIR64__(v24.u32[1], v25.u32[0]);
    v24.i32[1] = v25.i32[1];
    v43[2] = v25;
    v43[3] = v24;
    WebCore::RenderObject::localToContainerQuad(v21, (float *)v43, 0, 2u, &v44);
    v26 = HIDWORD(v49);
    if (HIDWORD(v49) == (_DWORD)v49)
    {
      v27 = (_OWORD *)WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v48, HIDWORD(v49) + 1, (unint64_t)&v44);
      v26 = HIDWORD(v49);
      v28 = (_OWORD *)((char *)v48 + 32 * HIDWORD(v49));
      v29 = v27[1];
      *v28 = *v27;
      v28[1] = v29;
    }
    else
    {
      v40 = (_OWORD *)((char *)v48 + 32 * HIDWORD(v49));
      v41 = v45;
      *v40 = v44;
      v40[1] = v41;
    }
    HIDWORD(v49) = v26 + 1;
    goto LABEL_28;
  }
  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) == 0)
  {
LABEL_20:
    v21 = (uint64_t)v6;
    goto LABEL_28;
  }
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1959C65C4);
  }
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 8) != 0
    || ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 4
      ? (v42 = (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x35) & 1) == 0)
      : (v42 = 0),
        v21 = (uint64_t)v6,
        v42))
  {
    (*(void (**)(_DWORD *, WTF **, _QWORD))(*(_QWORD *)v6 + 392))(v6, &v48, 0);
    goto LABEL_20;
  }
LABEL_28:
  if (HIDWORD(v49))
  {
    v30 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    *(_DWORD *)(v30 + 24) += 2;
    v31 = v21;
    if ((*(_BYTE *)(v21 + 45) & 2) != 0)
    {
      v31 = *(_QWORD *)(v21 + 32);
      if (v31)
        v31 = *(_QWORD *)(v31 + 8);
    }
    WebCore::Document::convertAbsoluteToClientQuads(v30, (uint64_t)&v48, v31 + 80);
    if (*(_DWORD *)(v30 + 24) == 2)
    {
      if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v30, v32);
    }
    else
    {
      *(_DWORD *)(v30 + 24) -= 2;
    }
    v33 = WTF::fastMalloc((WTF *)0x18);
    v34 = (_QWORD *)WebCore::DOMRectList::DOMRectList(v33, (uint64_t)&v48);
  }
  else
  {
    v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    v34[1] = 0;
    v34[2] = 0;
    *v34 = 1;
  }
  *a2 = v34;
  result = v48;
  if (v48)
  {
    v48 = 0;
    LODWORD(v49) = 0;
    result = (WTF *)WTF::fastFree(result, v35);
  }
  if (v21)
  {
    v37 = *(_DWORD *)(v21 + 16);
    if (!v37)
    {
      __break(0xC471u);
      JUMPOUT(0x1959C6544);
    }
    *(_DWORD *)(v21 + 16) = v37 - 1;
  }
  return result;
}

unint64_t WebCore::Element::screenRect(WebCore::Element *this)
{
  WebCore::RenderObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD v11[2];
  _QWORD v12[2];

  v1 = (WebCore::RenderObject *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL);
  if (!v1)
    return 0;
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    goto LABEL_18;
  }
  ++*(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
    v4 = *(_QWORD *)(v3 + 288);
  else
    v4 = 0;
  v11[0] = WebCore::RenderObject::absoluteBoundingBoxRect(v1, 1, 0);
  v11[1] = v5;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 312))(v4);
  if (*(_QWORD *)(v4 + 40))
  {
    result = WebCore::ScrollView::platformContentsToScreen((id *)v4, (const WebCore::IntRect *)v11);
  }
  else
  {
    v8 = v6;
    if (v6)
    {
      v12[0] = WebCore::ScrollView::contentsToRootView((WebCore::ScrollView *)v4, (const WebCore::IntRect *)v11);
      v12[1] = v9;
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 96))(v8, v12);
    }
    else
    {
      result = 0;
    }
  }
  v10 = *((_DWORD *)v1 + 4);
  if (!v10)
  {
    __break(0xC471u);
LABEL_18:
    JUMPOUT(0x1959C672CLL);
  }
  *((_DWORD *)v1 + 4) = v10 - 1;
  return result;
}

uint64_t WebCore::Element::getAttribute(WebCore::Element *this, const WTF::AtomString *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t AttributeInternal;

  AttributeInternal = WebCore::Element::getAttributeInternal(this, a2, a3, a4, a5);
  if (AttributeInternal)
    return AttributeInternal + 8;
  else
    return MEMORY[0x1E0CBF2F8];
}

uint64_t WebCore::Element::getAttributeInternal(WebCore::Element *this, const WTF::AtomString *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v7;
  int v9;
  __int16 v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  uint64_t v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  const WTF::StringImpl *v29;
  char v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WebCore::QualifiedName::QualifiedNameImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  char v38;

  v5 = *((_QWORD *)this + 13);
  if (!v5)
    return 0;
  v7 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return 0;
  v9 = *(_DWORD *)(v7 + 4);
  if (!v9)
    return 0;
  v11 = *((_WORD *)this + 14);
  if ((*(_BYTE *)(v5 + 4) & 8) == 0)
    goto LABEL_7;
  if ((v11 & 0x10) != 0 && (*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3358) & 1) != 0)
  {
    if (v9 != 5)
      goto LABEL_7;
    v26 = *(_QWORD *)(v7 + 8);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v26 & 0xDF) != 0x53
        || (*(_BYTE *)(v26 + 1) & 0xDF) != 0x54
        || (*(_BYTE *)(v26 + 2) & 0xDF) != 0x59
        || (*(_BYTE *)(v26 + 3) & 0xDF) != 0x4C)
      {
        goto LABEL_7;
      }
      v27 = *(unsigned __int8 *)(v26 + 4);
    }
    else
    {
      if ((*(_WORD *)v26 & 0xFFDF) != 0x53
        || (*(_WORD *)(v26 + 2) & 0xFFDF) != 0x54
        || (*(_WORD *)(v26 + 4) & 0xFFDF) != 0x59
        || (*(_WORD *)(v26 + 6) & 0xFFDF) != 0x4C)
      {
        goto LABEL_7;
      }
      v27 = *(unsigned __int16 *)(v26 + 8);
    }
    if ((v27 & 0xFFFFFFDF) == 0x45)
    {
LABEL_56:
      WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(this, (unsigned __int8 *)a2, a5, a3, a4);
      goto LABEL_12;
    }
  }
  else if (v7 == *(_QWORD *)(WebCore::HTMLNames::styleAttr + 24))
  {
    goto LABEL_56;
  }
LABEL_7:
  if ((v11 & 0x20) != 0)
  {
    WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v35, MEMORY[0x1E0CBF2F8], (WTF::StringImpl **)a2, MEMORY[0x1E0CBF2F8]);
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WebCore::QualifiedName::QualifiedNameImpl **))(**((_QWORD **)this + 20) + 48))(&v37, *((_QWORD *)this + 20), &v35);
    if (v38)
    {
      WTF::AtomString::AtomString((WTF::AtomString *)&v36, &v37);
      WebCore::Element::setSynchronizedLazyAttribute((WTF::StringImpl **)this, &v35, &v36);
      v32 = v36;
      v36 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, a2);
        else
          *(_DWORD *)v32 -= 2;
      }
      if (v38)
      {
        v33 = v37;
        v37 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            WTF::StringImpl::destroy(v33, a2);
          else
            *(_DWORD *)v33 -= 2;
        }
      }
    }
    v12 = (WTF::StringImpl **)v35;
    v35 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v12);
        WTF::fastFree(v24, v25);
      }
      else
      {
        --*(_DWORD *)v12;
      }
    }
  }
LABEL_12:
  v13 = *((_QWORD *)this + 13);
  if ((*((_WORD *)this + 14) & 0x10) != 0)
    v14 = *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3358) & 1;
  else
    v14 = 0;
  v15 = *(_DWORD *)(v13 + 4);
  if (v13 && (v15 & 1) != 0)
  {
    v16 = *(_DWORD *)(v13 + 52);
    if (!v16)
      return 0;
    v17 = *(WTF::StringImpl **)(v13 + 40);
  }
  else
  {
    if (v15 < 0x20)
      return 0;
    v16 = v15 >> 5;
    v17 = (WTF::StringImpl *)(v13 + 32);
  }
  if (v14)
  {
    v28 = v16;
    WTF::AtomString::convertToASCIILowercase(a2);
    v16 = v28;
  }
  else
  {
    v18 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v18 += 2;
    v37 = v18;
  }
  v19 = 0;
  v20 = v16;
  do
  {
    if (*(_QWORD *)(*(_QWORD *)v17 + 16))
    {
      v34 = v20;
      WebCore::QualifiedName::toString(v17, &v36);
      v30 = WTF::equal(v36, v37, v29);
      v31 = v36;
      v36 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, a2);
        else
          *(_DWORD *)v31 -= 2;
      }
      v20 = v34;
      if ((v30 & 1) != 0)
        goto LABEL_27;
    }
    else
    {
      v21 = *(WTF::StringImpl **)(*(_QWORD *)v17 + 24);
      if (v21 == v37)
        goto LABEL_28;
    }
    ++v19;
    v17 = (WTF::StringImpl *)((char *)v17 + 16);
  }
  while (v20 != v19);
  LODWORD(v19) = -1;
LABEL_27:
  v21 = v37;
LABEL_28:
  v37 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, a2);
    else
      *(_DWORD *)v21 -= 2;
  }
  if ((_DWORD)v19 != -1)
  {
    v22 = *(_DWORD *)(v13 + 4);
    if (v13 && (v22 & 1) != 0)
    {
      if (*(_DWORD *)(v13 + 52) > v19)
      {
        v23 = *(_QWORD *)(v13 + 40);
        return v23 + 16 * v19;
      }
    }
    else if (v19 < v22 >> 5)
    {
      v23 = v13 + 32;
      return v23 + 16 * v19;
    }
    __break(0xC471u);
    JUMPOUT(0x1959C69F4);
  }
  return 0;
}

uint64_t WebCore::Element::getAttributeForBindings@<X0>(WebCore::Element *a1@<X0>, const WTF::AtomString *a2@<X1>, uint64_t a3@<X2>, WTF::String *a4@<X3>, WTF::StringImpl **a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t result;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16[5];
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  result = WebCore::Element::getAttributeInternal(a1, a2, a3, a4, a6);
  if (!result)
  {
    v10 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (!*MEMORY[0x1E0CBF2F8])
    {
LABEL_4:
      *a5 = v10;
      return result;
    }
LABEL_3:
    *(_DWORD *)v10 += 2;
    goto LABEL_4;
  }
  v11 = result;
  result = (*(uint64_t (**)(WebCore::Element *, uint64_t))(*(_QWORD *)a1 + 608))(a1, result);
  if ((result & 1) == 0 || (a3 - 1) > 2)
  {
    v10 = *(WTF::StringImpl **)(v11 + 8);
    if (!v10)
      goto LABEL_4;
    goto LABEL_3;
  }
  v16[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v16);
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Element *, WTF::StringImpl **, uint64_t, uint64_t))(*(_QWORD *)a1 + 616))(&v17, a1, v16, v11, a3);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    v18 = v13;
    if ((*((_BYTE *)v13 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v15 = v18;
      v13 = v19;
      v19 = 0;
      v18 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v12);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    v14 = v17;
    *a5 = v13;
    v17 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  else
  {
    *a5 = 0;
  }
  result = (uint64_t)v16[0];
  v16[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::Element::getAttributeNS(WebCore::Element *this, WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  WTF::String *v5;
  __n128 v6;
  uint64_t Attribute;
  WTF::StringImpl **v8;
  WTF *v10;
  void *v11;
  WebCore::QualifiedName::QualifiedNameImpl *v12;

  WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v12, MEMORY[0x1E0CBF2F8], a3, a2);
  Attribute = WebCore::Element::getAttribute(this, (const WebCore::QualifiedName *)&v12, v4, v5, v6);
  v8 = (WTF::StringImpl **)v12;
  v12 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v8);
      WTF::fastFree(v10, v11);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  return Attribute;
}

WTF::StringImpl *WebCore::Element::toggleAttribute@<X0>(WTF::AtomString *a1@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, WTF::String *a4@<X3>, uint64_t a5@<X8>, int32x4_t a6@<Q0>)
{
  uint64_t v7;
  unint64_t v9;
  __int16 v10;
  _WORD *v12;
  int v13;
  BOOL v14;
  unint64_t i;
  int v16;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v22;
  __int16 v23;
  WTF::StringImpl **v24;
  int v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  int v37;
  int v38;
  BOOL v39;
  int v40;
  char v41;
  uint64_t v42;
  unsigned int v43;
  BOOL v44;
  WTF::StringImpl *v45;
  const WTF::StringImpl *v46;
  char v47;
  WTF::StringImpl *v48;
  char v49;
  WTF::StringImpl **v50;
  WTF::StringImpl *result;
  WTF *v52;
  void *v53;
  WTF *v54;
  void *v55;
  uint64_t v56;
  char v57;
  int v58;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  uint64_t *v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  WebCore::QualifiedName::QualifiedNameImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  char v74;

  v7 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
  {
    v56 = 0;
    goto LABEL_96;
  }
  v9 = *(unsigned int *)(v7 + 4);
  if (!(_DWORD)v9)
    goto LABEL_130;
  v10 = a3;
  v12 = *(_WORD **)(v7 + 8);
  if ((*(_BYTE *)(v7 + 16) & 4) == 0)
  {
    v69 = *(WTF::StringImpl **)(v7 + 8);
    if ((WebCore::isValidNameASCII<char16_t>(v12, v9) & 1) != 0
      || (WebCore::isValidNameNonASCII((uint64_t)v69, v9, a6) & 1) != 0)
    {
      goto LABEL_18;
    }
LABEL_130:
    v56 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      LODWORD(v7) = *(_DWORD *)(v56 + 4);
      *(_DWORD *)v56 += 2;
      if ((v7 & 0x80000000) != 0)
        goto LABEL_149;
      v57 = 0;
LABEL_97:
      v39 = __OFADD__((_DWORD)v7, 1);
      v58 = v7 + 1;
      if (!v39 && !__OFADD__(v58, 25))
      {
        v59 = (v57 & 1) != 0 || (*(_BYTE *)(v56 + 16) & 4) != 0;
        result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>>((v58 + 25), v59, "Invalid qualified name: '", 0x19u, v56, 39, &v70);
        v61 = v70;
        if (v70)
        {
          *(_BYTE *)a5 = 3;
          *(_QWORD *)(a5 + 8) = v61;
          *(_DWORD *)(a5 + 16) = 1;
          v70 = 0;
          if ((v57 & 1) == 0)
          {
            if (*(_DWORD *)v56 != 2)
            {
              *(_DWORD *)v56 -= 2;
              return result;
            }
            result = (WTF::StringImpl *)v56;
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a1);
          }
          return result;
        }
LABEL_150:
        __break(0xC471u);
        JUMPOUT(0x1959C7374);
      }
LABEL_149:
      v70 = 0;
      goto LABEL_150;
    }
    LODWORD(v7) = 0;
LABEL_96:
    v57 = 1;
    goto LABEL_97;
  }
  v13 = *(unsigned __int8 *)v12;
  if ((v13 | 0x20u) - 97 >= 0x1A && v13 != 95 && v13 != 58)
    goto LABEL_129;
  if (v9 >= 2)
  {
    v14 = 0;
    for (i = 1; i != v9; v14 = i >= v9)
    {
      v16 = *((unsigned __int8 *)v12 + i);
      if ((v16 | 0x20u) - 97 >= 0x1A && (v16 - 48) >= 0xA)
      {
        v18 = v16 - 45;
        v19 = v18 > 0x32;
        v20 = (1 << v18) & 0x4000000002003;
        if (v19 || v20 == 0)
          break;
      }
      ++i;
    }
    if (!v14)
    {
LABEL_129:
      if ((WebCore::isValidNameNonASCII((uint64_t)v12, v9, a6) & 1) == 0)
        goto LABEL_130;
    }
  }
LABEL_18:
  v22 = *(_QWORD *)(a2 + 104);
  if (!v22)
    goto LABEL_25;
  v23 = *(_WORD *)(a2 + 28);
  if ((*(_BYTE *)(v22 + 4) & 8) != 0)
  {
    if ((v23 & 0x10) != 0)
    {
      v60 = *(_QWORD *)a1;
      if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) + 3358) & 1) != 0)
      {
        if (!v60 || *(_DWORD *)(v60 + 4) != 5)
          goto LABEL_20;
        v62 = *(_QWORD *)(v60 + 8);
        if ((*(_BYTE *)(v60 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v62 & 0xDF) != 0x53
            || (*(_BYTE *)(v62 + 1) & 0xDF) != 0x54
            || (*(_BYTE *)(v62 + 2) & 0xDF) != 0x59
            || (*(_BYTE *)(v62 + 3) & 0xDF) != 0x4C)
          {
            goto LABEL_20;
          }
          v63 = *(unsigned __int8 *)(v62 + 4);
        }
        else
        {
          if ((*(_WORD *)v62 & 0xFFDF) != 0x53
            || (*(_WORD *)(v62 + 2) & 0xFFDF) != 0x54
            || (*(_WORD *)(v62 + 4) & 0xFFDF) != 0x59
            || (*(_WORD *)(v62 + 6) & 0xFFDF) != 0x4C)
          {
            goto LABEL_20;
          }
          v63 = *(unsigned __int16 *)(v62 + 8);
        }
        if ((v63 & 0xFFFFFFDF) != 0x45)
          goto LABEL_20;
LABEL_105:
        WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)a2, (unsigned __int8 *)a1, (__n128)a6, a3, a4);
        goto LABEL_25;
      }
    }
    else
    {
      v60 = *(_QWORD *)a1;
    }
    if (v60 != *(_QWORD *)(WebCore::HTMLNames::styleAttr + 24))
      goto LABEL_20;
    goto LABEL_105;
  }
LABEL_20:
  if ((v23 & 0x20) != 0)
  {
    WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v71, MEMORY[0x1E0CBF2F8], (WTF::StringImpl **)a1, MEMORY[0x1E0CBF2F8]);
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WebCore::QualifiedName::QualifiedNameImpl **))(**(_QWORD **)(a2 + 160) + 48))(&v73, *(_QWORD *)(a2 + 160), &v71);
    if (v74)
    {
      WTF::AtomString::AtomString((WTF::AtomString *)&v72, &v73);
      WebCore::Element::setSynchronizedLazyAttribute((WTF::StringImpl **)a2, &v71, &v72);
      v64 = v72;
      v72 = 0;
      if (v64)
      {
        if (*(_DWORD *)v64 == 2)
          WTF::StringImpl::destroy(v64, a1);
        else
          *(_DWORD *)v64 -= 2;
      }
      if (v74)
      {
        v65 = v73;
        v73 = 0;
        if (v65)
        {
          if (*(_DWORD *)v65 == 2)
            WTF::StringImpl::destroy(v65, a1);
          else
            *(_DWORD *)v65 -= 2;
        }
      }
    }
    v24 = (WTF::StringImpl **)v71;
    v71 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v24);
        WTF::fastFree(v52, v53);
      }
      else
      {
        --*(_DWORD *)v24;
      }
    }
  }
LABEL_25:
  v25 = v10;
  if ((*(_WORD *)(a2 + 28) & 0x10) != 0 && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) + 3358) & 1) != 0)
  {
    WTF::AtomString::convertToASCIILowercase(a1);
  }
  else
  {
    v26 = *(WTF::StringImpl **)a1;
    if (*(_QWORD *)a1)
      *(_DWORD *)v26 += 2;
    v72 = v26;
  }
  v27 = HIBYTE(v10);
  v28 = *(_QWORD *)(a2 + 104);
  if (!v28)
    goto LABEL_79;
  v29 = *(_DWORD *)(v28 + 4);
  if ((v29 & 1) != 0)
  {
    LODWORD(v30) = *(_DWORD *)(v28 + 52);
    if ((_DWORD)v30)
    {
      v31 = *(uint64_t **)(v28 + 40);
      goto LABEL_37;
    }
LABEL_79:
    if (v27 && !v25)
      goto LABEL_81;
    WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v73, MEMORY[0x1E0CBF2F8], &v72, MEMORY[0x1E0CBF2F8]);
    if (*MEMORY[0x1E0CBF3B8])
      WebCore::Element::addAttributeInternal((WebCore::TreeScope **)a2, (WebCore::TreeScope *)&v73, MEMORY[0x1E0CBF3B8], 0);
    v50 = (WTF::StringImpl **)v73;
    v73 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v50);
        WTF::fastFree(v54, v55);
      }
      else
      {
        --*(_DWORD *)v50;
      }
    }
    goto LABEL_87;
  }
  if (v29 < 0x20)
    goto LABEL_79;
  LODWORD(v30) = v29 >> 5;
  v31 = (uint64_t *)(v28 + 32);
LABEL_37:
  v32 = v72;
  if (v72)
    *(_DWORD *)v72 += 2;
  v33 = 0;
  v30 = v30;
  do
  {
    v34 = *v31;
    v35 = *(_DWORD **)(*v31 + 16);
    if (v35)
    {
      v66 = v31;
      v67 = v30;
      v68 = *(WTF::StringImpl **)(*v31 + 16);
      *v35 += 2;
      v36 = *(_QWORD *)(v34 + 24);
      if (v36)
      {
        v37 = *(_DWORD *)(v36 + 4);
        *(_DWORD *)v36 += 2;
        if (v37 < 0)
          goto LABEL_147;
      }
      else
      {
        v37 = 0;
      }
      v38 = v35[1];
      v39 = __OFADD__(v37, 1);
      v40 = v37 + 1;
      v41 = v39;
      if (v38 < 0 || (v41 & 1) != 0 || (v42 = (v38 + v40), __OFADD__(v38, v40)))
      {
LABEL_147:
        v73 = 0;
LABEL_148:
        __break(0xC471u);
        JUMPOUT(0x1959C7368);
      }
      v43 = v35[4];
      if (v36)
        v44 = (v35[4] & 4) == 0;
      else
        v44 = 1;
      if (!v44)
        v43 = *(unsigned __int8 *)(v36 + 16);
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v42, (v43 >> 2) & 1, (uint64_t)v35, 58, v36, &v73);
      if (!v73)
        goto LABEL_148;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v36, v45);
        else
          *(_DWORD *)v36 -= 2;
      }
      if (*(_DWORD *)v68 == 2)
        WTF::StringImpl::destroy(v68, v45);
      else
        *(_DWORD *)v68 -= 2;
      v47 = WTF::equal(v73, v32, v46);
      v48 = v73;
      v73 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
          WTF::StringImpl::destroy(v48, a1);
        else
          *(_DWORD *)v48 -= 2;
      }
      v31 = v66;
      v30 = v67;
      if ((v47 & 1) != 0)
        goto LABEL_72;
    }
    else if (*(WTF::StringImpl **)(v34 + 24) == v32)
    {
      goto LABEL_72;
    }
    ++v33;
    v31 += 2;
  }
  while (v30 != v33);
  v33 = 0xFFFFFFFFLL;
LABEL_72:
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, a1);
    else
      *(_DWORD *)v32 -= 2;
  }
  if ((_DWORD)v33 == -1)
    goto LABEL_79;
  if (!v27 || !v25)
  {
    WebCore::Element::removeAttributeInternal(a2, (WTF::StringImpl *)v33, 0);
LABEL_81:
    v49 = 0;
    goto LABEL_88;
  }
LABEL_87:
  v49 = 1;
LABEL_88:
  *(_BYTE *)a5 = v49;
  *(_DWORD *)(a5 + 16) = 0;
  result = v72;
  v72 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a1);
    *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::Element::setAttribute@<X0>(WebCore::Element *this@<X0>, WTF::AtomString *a2@<X1>, uint64_t a3@<X2>, WTF::String *a4@<X3>, uint64_t a5@<X8>, int32x4_t a6@<Q0>)
{
  uint64_t v6;
  uint64_t v8;
  unint64_t v10;
  _WORD *v13;
  int v14;
  BOOL v15;
  unint64_t i;
  int v17;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v23;
  __int16 v24;
  WTF::StringImpl **v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl **v37;
  WTF::StringImpl *result;
  WTF *v39;
  void *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  WebCore::QualifiedName::QualifiedNameImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  const WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  const WTF::StringImpl *v62;
  char v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  WebCore::QualifiedName::QualifiedNameImpl **v70;
  WebCore::QualifiedName::QualifiedNameImpl *v71;
  int v72;
  unsigned int v73;
  WTF::StringImpl *v74;
  const WTF::StringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  const WTF::StringImpl *v78;
  char v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  int v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WebCore::QualifiedName::QualifiedNameImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  WTF::StringImpl **v98;

  v8 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_115;
  v10 = *(unsigned int *)(v8 + 4);
  if (!(_DWORD)v10)
    goto LABEL_113;
  v13 = *(_WORD **)(v8 + 8);
  if ((*(_BYTE *)(v8 + 16) & 4) == 0)
  {
    v85 = *(_QWORD *)(v8 + 8);
    if ((WebCore::isValidNameASCII<char16_t>(v13, v10) & 1) != 0
      || (WebCore::isValidNameNonASCII(v85, v10, a6) & 1) != 0)
    {
      goto LABEL_19;
    }
LABEL_113:
    v8 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v8 += 2;
LABEL_115:
    v96 = (WTF::StringImpl *)v8;
    WTF::makeString<WTF::ASCIILiteral,WTF::AtomString,char>("Invalid qualified name: '", 26, (uint64_t *)&v96, 39, &v97);
    v58 = v97;
    *(_BYTE *)a5 = 3;
    *(_QWORD *)(a5 + 8) = v58;
    *(_BYTE *)(a5 + 16) = 1;
    v97 = 0;
    result = v96;
    v96 = 0;
    if (result)
      goto LABEL_57;
    return result;
  }
  v14 = *(unsigned __int8 *)v13;
  if ((v14 | 0x20u) - 97 >= 0x1A && v14 != 95 && v14 != 58)
    goto LABEL_112;
  if (v10 >= 2)
  {
    v15 = 0;
    for (i = 1; i != v10; v15 = i >= v10)
    {
      v17 = *((unsigned __int8 *)v13 + i);
      if ((v17 | 0x20u) - 97 >= 0x1A && (v17 - 48) >= 0xA)
      {
        v19 = v17 - 45;
        v20 = v19 > 0x32;
        v21 = (1 << v19) & 0x4000000002003;
        if (v20 || v21 == 0)
          break;
      }
      ++i;
    }
    if (!v15)
    {
LABEL_112:
      if ((WebCore::isValidNameNonASCII((uint64_t)v13, v10, a6) & 1) == 0)
        goto LABEL_113;
    }
  }
LABEL_19:
  v23 = *((_QWORD *)this + 13);
  if (!v23)
    goto LABEL_26;
  v24 = *((_WORD *)this + 14);
  if ((*(_BYTE *)(v23 + 4) & 8) != 0)
  {
    if ((v24 & 0x10) != 0)
    {
      v43 = *(_QWORD *)a2;
      if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3358) & 1) != 0)
      {
        if (!v43 || *(_DWORD *)(v43 + 4) != 5)
          goto LABEL_21;
        v44 = *(_QWORD *)(v43 + 8);
        if ((*(_BYTE *)(v43 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v44 & 0xDF) != 0x53
            || (*(_BYTE *)(v44 + 1) & 0xDF) != 0x54
            || (*(_BYTE *)(v44 + 2) & 0xDF) != 0x59
            || (*(_BYTE *)(v44 + 3) & 0xDF) != 0x4C)
          {
            goto LABEL_21;
          }
          v45 = *(unsigned __int8 *)(v44 + 4);
        }
        else
        {
          if ((*(_WORD *)v44 & 0xFFDF) != 0x53
            || (*(_WORD *)(v44 + 2) & 0xFFDF) != 0x54
            || (*(_WORD *)(v44 + 4) & 0xFFDF) != 0x59
            || (*(_WORD *)(v44 + 6) & 0xFFDF) != 0x4C)
          {
            goto LABEL_21;
          }
          v45 = *(unsigned __int16 *)(v44 + 8);
        }
        if ((v45 & 0xFFFFFFDF) != 0x45)
          goto LABEL_21;
LABEL_71:
        WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(this, (unsigned __int8 *)a2, (__n128)a6, a3, a4);
        goto LABEL_26;
      }
    }
    else
    {
      v43 = *(_QWORD *)a2;
    }
    if (v43 != *(_QWORD *)(WebCore::HTMLNames::styleAttr + 24))
      goto LABEL_21;
    goto LABEL_71;
  }
LABEL_21:
  if ((v24 & 0x20) != 0)
  {
    WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v98, MEMORY[0x1E0CBF2F8], (WTF::StringImpl **)a2, MEMORY[0x1E0CBF2F8]);
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl ***))(**((_QWORD **)this + 20) + 48))(&v89, *((_QWORD *)this + 20), &v98);
    if ((_BYTE)v90)
    {
      WTF::AtomString::AtomString((WTF::AtomString *)&v92, &v89);
      WebCore::Element::setSynchronizedLazyAttribute((WTF::StringImpl **)this, (WebCore::QualifiedName::QualifiedNameImpl **)&v98, &v92);
      v65 = v92;
      v92 = 0;
      if (v65)
      {
        if (*(_DWORD *)v65 == 2)
          WTF::StringImpl::destroy(v65, a2);
        else
          *(_DWORD *)v65 -= 2;
      }
      if ((_BYTE)v90)
      {
        v66 = v89;
        v89 = 0;
        if (v66)
        {
          if (*(_DWORD *)v66 == 2)
            WTF::StringImpl::destroy(v66, a2);
          else
            *(_DWORD *)v66 -= 2;
        }
      }
    }
    v25 = v98;
    v98 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
        WTF::fastFree(v41, v42);
      }
      else
      {
        --*(_DWORD *)v25;
      }
    }
  }
LABEL_26:
  if ((*((_WORD *)this + 14) & 0x10) != 0 && (*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3358) & 1) != 0)
  {
    WTF::AtomString::convertToASCIILowercase(a2);
  }
  else
  {
    v26 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v26 += 2;
    v95 = v26;
  }
  v27 = *((_QWORD *)this + 13);
  if (!v27)
    goto LABEL_45;
  v28 = *(_DWORD *)(v27 + 4);
  if ((v28 & 1) != 0)
  {
    v29 = *(_DWORD *)(v27 + 52);
    if (v29)
    {
      v30 = *(WTF::StringImpl **)(v27 + 40);
      goto LABEL_34;
    }
LABEL_45:
    WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v94, MEMORY[0x1E0CBF2F8], &v95, MEMORY[0x1E0CBF2F8]);
    v32 = 0xFFFFFFFFLL;
    goto LABEL_46;
  }
  if (v28 < 0x20)
    goto LABEL_45;
  v29 = v28 >> 5;
  v30 = (WTF::StringImpl *)(v27 + 32);
LABEL_34:
  v31 = v95;
  if (v95)
    *(_DWORD *)v95 += 2;
  v32 = 0;
  v6 = v29;
  do
  {
    if (*(_QWORD *)(*(_QWORD *)v30 + 16))
    {
      v59 = v31;
      v60 = v30;
      WebCore::QualifiedName::toString(v30, &v89);
      v61 = v59;
      v63 = WTF::equal(v89, v59, v62);
      v64 = v89;
      v89 = 0;
      if (v64)
      {
        if (*(_DWORD *)v64 == 2)
          WTF::StringImpl::destroy(v64, a2);
        else
          *(_DWORD *)v64 -= 2;
      }
      v31 = v61;
      v30 = v60;
      if ((v63 & 1) != 0)
        goto LABEL_41;
    }
    else if (*(WTF::StringImpl **)(*(_QWORD *)v30 + 24) == v31)
    {
      goto LABEL_41;
    }
    ++v32;
    v30 = (WTF::StringImpl *)((char *)v30 + 16);
  }
  while (v6 != v32);
  v32 = 0xFFFFFFFFLL;
LABEL_41:
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, a2);
    else
      *(_DWORD *)v31 -= 2;
  }
  if ((_DWORD)v32 == -1)
    goto LABEL_45;
  v46 = *(WebCore::QualifiedName::QualifiedNameImpl **)WebCore::Element::attributeAt(this, v32);
  if (v46)
    ++*(_DWORD *)v46;
  v94 = v46;
LABEL_46:
  v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 40) + 8);
  v34 = *(_QWORD *)(v33 + 704);
  if (v34)
  {
    v35 = *(_QWORD *)(v34 + 8);
    if (v35)
      v33 = v35;
  }
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v33 + 192) + 136))(v33 + 192) + 464) & 0x200000000000000) == 0)
  {
    if (*(_DWORD *)(a3 + 8) == 3)
    {
      WebCore::Element::setAttributeInternal(this, v32, (WebCore::TreeScope *)&v94, (WTF::StringImpl **)a3, 0);
      goto LABEL_52;
    }
LABEL_179:
    v83 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_180;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Element *))(*(_QWORD *)this + 104))(&v89, this);
  WTF::AtomString::convertToASCIILowercase((WebCore::QualifiedName::QualifiedNameImpl *)((char *)v94 + 24));
  WebCore::trustedTypeForAttribute((WebCore *)&v89, (WTF::AtomStringImpl **)&v98, (WTF::StringImpl **)(*((_QWORD *)this + 12) + 32), (WTF::StringImpl **)v94 + 4, &v92);
  v48 = (WTF::StringImpl *)v98;
  v98 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v47);
    else
      *(_DWORD *)v48 -= 2;
  }
  v49 = v89;
  v89 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v47);
    else
      *(_DWORD *)v49 -= 2;
  }
  v50 = v92;
  if (v92)
    *(_DWORD *)v92 += 2;
  v88 = v50;
  v51 = v93;
  if (v93)
    *(_DWORD *)v93 += 2;
  v87 = v51;
  WebCore::trustedTypesCompliantAttributeValue((uint64_t)&v89, (uint64_t)&v88, a3, (uint64_t)this, (uint64_t)&v87);
  v53 = v87;
  v87 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v52);
    else
      *(_DWORD *)v53 -= 2;
  }
  v54 = v88;
  v88 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, v52);
    else
      *(_DWORD *)v54 -= 2;
  }
  LODWORD(v6) = v91;
  if (v91)
  {
    if (v91 == 1)
    {
      v55 = v90;
      v90 = 0;
      *(_BYTE *)a5 = (_BYTE)v89;
      *(_QWORD *)(a5 + 8) = v55;
      v56 = 1;
      *(_BYTE *)(a5 + 16) = 1;
      goto LABEL_105;
    }
    goto LABEL_179;
  }
  v67 = *((_QWORD *)this + 13);
  if (!v67)
  {
    v32 = 0xFFFFFFFFLL;
    goto LABEL_172;
  }
  v68 = *(_DWORD *)(v67 + 4);
  if ((v68 & 1) != 0)
    v69 = *(_DWORD *)(v67 + 52);
  else
    v69 = v68 >> 5;
  if (v69 <= v32)
  {
    v72 = *(_DWORD *)(v67 + 4) & 1;
    v71 = v94;
  }
  else
  {
    v70 = (WebCore::QualifiedName::QualifiedNameImpl **)WebCore::ElementData::attributeAt((WebCore::ElementData *)v67, v32);
    v71 = v94;
    if (*v70 == v94)
      goto LABEL_171;
    v67 = *((_QWORD *)this + 13);
    v68 = *(_DWORD *)(v67 + 4);
    v72 = v68 & 1;
  }
  if (v72)
  {
    v73 = *(_DWORD *)(v67 + 52);
    if (v73)
    {
      v74 = *(WTF::StringImpl **)(v67 + 40);
      goto LABEL_140;
    }
LABEL_162:
    v32 = 0xFFFFFFFFLL;
    goto LABEL_171;
  }
  if (v68 < 0x20)
    goto LABEL_162;
  v73 = v68 >> 5;
  v74 = (WTF::StringImpl *)(v67 + 32);
LABEL_140:
  v75 = (const WTF::StringImpl *)*((_QWORD *)v71 + 3);
  if (v75)
    *(_DWORD *)v75 += 2;
  v76 = 0;
  v77 = v73;
  while (!*(_QWORD *)(*(_QWORD *)v74 + 16))
  {
    if (*(const WTF::StringImpl **)(*(_QWORD *)v74 + 24) == v75)
      goto LABEL_167;
LABEL_145:
    ++v76;
    v74 = (WTF::StringImpl *)((char *)v74 + 16);
    if (v77 == v76)
    {
      v32 = 0xFFFFFFFFLL;
      goto LABEL_168;
    }
  }
  WebCore::QualifiedName::toString(v74, &v98);
  v79 = WTF::equal((WTF *)v98, v75, v78);
  v80 = (WTF::StringImpl *)v98;
  v98 = 0;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
      WTF::StringImpl::destroy(v80, v52);
    else
      *(_DWORD *)v80 -= 2;
  }
  if ((v79 & 1) == 0)
    goto LABEL_145;
LABEL_167:
  v32 = v76;
LABEL_168:
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
      WTF::StringImpl::destroy(v75, v52);
    else
      *(_DWORD *)v75 -= 2;
  }
LABEL_171:
  if (v91)
    goto LABEL_179;
LABEL_172:
  v81 = v89;
  v89 = 0;
  v86 = v81;
  WTF::AtomString::AtomString((WTF::StringImpl **)&v98, &v86);
  WebCore::Element::setAttributeInternal(this, v32, (WebCore::TreeScope *)&v94, (WTF::StringImpl **)&v98, 0);
  v83 = (WTF::StringImpl *)v98;
  v98 = 0;
  if (!v83)
    goto LABEL_175;
  if (*(_DWORD *)v83 != 2)
  {
    *(_DWORD *)v83 -= 2;
    goto LABEL_175;
  }
LABEL_180:
  WTF::StringImpl::destroy(v83, v82);
LABEL_175:
  v84 = v86;
  v86 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
      WTF::StringImpl::destroy(v84, v82);
    else
      *(_DWORD *)v84 -= 2;
  }
  v56 = 0;
LABEL_105:
  ((void (*)(WTF::StringImpl ***, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v56])(&v98, &v89);
  WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(&v92, v57);
  if (!(_DWORD)v6)
  {
LABEL_52:
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
  }
  v37 = (WTF::StringImpl **)v94;
  v94 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v37);
      WTF::fastFree(v39, v40);
    }
    else
    {
      --*(_DWORD *)v37;
    }
  }
  result = v95;
  v95 = 0;
  if (result)
  {
LABEL_57:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v36);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::Element::attributeAt(WebCore::Element *this, unsigned int a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t result;

  v2 = *((_QWORD *)this + 13);
  if (v2)
    v3 = (*(_DWORD *)(v2 + 4) & 1) == 0;
  else
    v3 = 1;
  if (v3)
  {
    if (a2 < *(_DWORD *)(v2 + 4) >> 5)
    {
      v4 = v2 + 32;
      return v4 + 16 * a2;
    }
  }
  else if (*(_DWORD *)(v2 + 52) > a2)
  {
    v4 = *(_QWORD *)(v2 + 40);
    return v4 + 16 * a2;
  }
  result = 332;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::trustedTypesCompliantAttributeValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Element *v11;
  const WebCore::QualifiedName *v12;
  const WTF::AtomString *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD v18[12];
  _QWORD *v19;

  v17 = a4;
  v18[0] = a2;
  v18[1] = &v17;
  v18[2] = a5;
  v18[3] = a2;
  v18[4] = &v17;
  v18[5] = a5;
  v18[6] = a2;
  v18[7] = &v17;
  v18[8] = a5;
  v18[9] = a2;
  v18[10] = &v17;
  v18[11] = a5;
  v5 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v5 != -1)
  {
    v19 = v18;
    ((void (*)(uint64_t *__return_ptr, _QWORD **, uint64_t))off_1E33A4538[v5])(&v14, &v19, a3);
    v7 = v16;
    if (!v16)
    {
      v9 = v14;
      v14 = 0;
      *(_QWORD *)a1 = v9;
      goto LABEL_6;
    }
    if (v16 == 1)
    {
      v8 = v15;
      v15 = 0;
      *(_BYTE *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v8;
LABEL_6:
      *(_DWORD *)(a1 + 16) = v7;
      return ((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v7])(v18, &v14);
    }
  }
  v11 = (WebCore::Element *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::Element::setAttributeWithoutOverwriting(v11, v12, v13);
}

WTF::StringImpl **WebCore::Element::setAttributeWithoutOverwriting(WTF::StringImpl **this, const WebCore::QualifiedName *a2, WTF::StringImpl **a3, WTF::String *a4, __n128 a5)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = (uint64_t)this;
  v8 = this[13];
  if (!v8)
    return WebCore::Element::addAttributeInternal((WebCore::TreeScope **)v7, a2, a3, 0);
  if (*(_QWORD *)a2 == WebCore::HTMLNames::styleAttr && (*((_BYTE *)v8 + 4) & 8) != 0)
  {
    this = (WTF::StringImpl **)WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)this, (unsigned __int8 *)a2, a5, (uint64_t)a3, a4);
  }
  else if ((*((_WORD *)this + 14) & 0x20) != 0)
  {
    this = (WTF::StringImpl **)WebCore::SVGElement::synchronizeAttribute((WebCore::SVGElement *)this, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
  }
  v9 = *(_QWORD *)(v7 + 104);
  if (!v9)
    return WebCore::Element::addAttributeInternal((WebCore::TreeScope **)v7, a2, a3, 0);
  v10 = *(_DWORD *)(v9 + 4);
  if ((v10 & 1) != 0)
  {
    v11 = *(uint64_t **)(v9 + 40);
    LODWORD(v12) = *(_DWORD *)(v9 + 52);
    if (!(_DWORD)v12)
      return WebCore::Element::addAttributeInternal((WebCore::TreeScope **)v7, a2, a3, 0);
  }
  else
  {
    v11 = (uint64_t *)(v9 + 32);
    LODWORD(v12) = v10 >> 5;
    if (!(_DWORD)v12)
      return WebCore::Element::addAttributeInternal((WebCore::TreeScope **)v7, a2, a3, 0);
  }
  v13 = *(_QWORD *)a2;
  v12 = v12;
  while (1)
  {
    v14 = *v11;
    if (*v11 == v13 || *(_QWORD *)(v14 + 24) == *(_QWORD *)(v13 + 24) && *(_QWORD *)(v14 + 32) == *(_QWORD *)(v13 + 32))
      break;
    v11 += 2;
    if (!--v12)
      return WebCore::Element::addAttributeInternal((WebCore::TreeScope **)v7, a2, a3, 0);
  }
  return this;
}

WTF::StringImpl **WebCore::Element::addAttributeInternal(WebCore::TreeScope **this, WebCore::TreeScope *a2, WTF::StringImpl **a3, int a4)
{
  WebCore::QualifiedName::QualifiedNameImpl **v5;
  WebCore::TreeScopeOrderedMap *v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WebCore::TreeScope *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL hasPendingFullStyleRebuild;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  WTF::StringImpl **v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  WTF::StringImpl **v38;
  void *v39;
  const WTF::AtomString *v40;
  uint64_t v41;
  WebCore::TreeScope *v42;
  uint64_t v43;
  uint64_t v44;
  WebCore::QualifiedName::QualifiedNameImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl **result;
  uint64_t v50;
  WTF *v51;
  void *v52;
  uint64_t *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  unsigned __int8 *v64;
  void *v65;
  WebCore::UniqueElementData *v66;
  _QWORD *v67;
  _QWORD *v68;
  WebCore::HTMLLabelElement *v69;
  WebCore::CollectionNamedElementCache **v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl **v74;
  WTF::StringImpl *v75;
  WTF::StringImpl **v76;
  WTF *v77;
  void *v78;
  WTF *v79;
  unsigned int *v81;
  WTF::StringImpl *v82;
  WTF *v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  WTF::StringImpl **v87;
  WTF::StringImpl *v88;
  WTF::StringImpl **v89;
  WTF *v90;
  void *v91;
  WTF::StringImpl *v92;
  WTF *v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD **v96;
  _DWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  Inspector::InspectorDebuggerAgent **v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unsigned int *v123;
  _DWORD *v124;
  uint64_t v125;
  uint64_t v126;
  _DWORD **v127;
  _DWORD *v128;
  WTF *v129;
  uint64_t v131;
  WTF *v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  void *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  _QWORD *v142;
  WebCore::Node *v143;
  WebCore::Event *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WebCore::QualifiedName::QualifiedNameImpl *v147;
  WebCore::TreeScope *v148;
  WebCore::AXObjectCache *v149;
  __n128 v150;
  WebCore::AXObjectCache *v151;
  int v152;
  uint64_t v153;
  WTF::StringImpl *v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t *v158;
  unsigned int v159;
  uint64_t v160;
  WebCore::CollectionNamedElementCache *v161;
  uint64_t v163;
  uint64_t v164;
  WTF::StringImpl *v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  WebCore::QualifiedName::QualifiedNameImpl *v173;
  uint64_t v174;
  uint64_t *v175;
  WebCore::QualifiedName::QualifiedNameImpl *v176;
  WebCore::QualifiedName::QualifiedNameImpl *v178;
  uint64_t v179;
  uint64_t *v181;
  WebCore::QualifiedName::QualifiedNameImpl *v182;
  WTF::StringImpl *v187;
  WebCore::HTMLLabelElement *v188;
  unsigned __int8 *v189;
  WTF::StringImpl *v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  _BYTE v193[64];

  v5 = (WebCore::QualifiedName::QualifiedNameImpl **)a2;
  if (a4)
  {
    v66 = (WebCore::UniqueElementData *)WebCore::Element::ensureUniqueElementData((WebCore::Element *)this);
    return WebCore::UniqueElementData::addAttribute(v66, v5, a3);
  }
  v7 = *(WebCore::TreeScopeOrderedMap **)a2;
  v8 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  if (*(_QWORD *)a2 == WebCore::HTMLNames::idAttr)
  {
    WebCore::Element::updateId((WebCore::Element *)this, MEMORY[0x1E0CBF2F8], a3, 0);
  }
  else if (v7 == (WebCore::TreeScopeOrderedMap *)WebCore::HTMLNames::nameAttr)
  {
    if ((*((_BYTE *)this + 22) & 0x18) != 0 && (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8] != *a3)
    {
      WebCore::Element::updateNameForTreeScope((WebCore::Element *)this, this[5], MEMORY[0x1E0CBF2F8], a3);
      if (((unint64_t)this[2] & 0x18000000000000) == 0x8000000000000)
      {
        v133 = *((_QWORD *)this[5] + 1);
        if (v133)
        {
          if ((*(_WORD *)(v133 + 3358) & 1) != 0)
          {
            *(_DWORD *)(v133 + 24) += 2;
            WebCore::Element::updateNameForDocument((WebCore::Element *)this, (WebCore::HTMLDocument *)v133, MEMORY[0x1E0CBF2F8], a3);
            if (*(_DWORD *)(v133 + 24) == 2)
            {
              if ((*(_WORD *)(v133 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v133);
            }
            else
            {
              *(_DWORD *)(v133 + 24) -= 2;
            }
          }
        }
      }
    }
  }
  else if (v7 == (WebCore::TreeScopeOrderedMap *)WebCore::HTMLNames::forAttr
         && (*((_WORD *)this + 14) & 0x10) != 0
         && *((_QWORD *)this[12] + 3) == *(_QWORD *)(WebCore::HTMLNames::labelTag + 24))
  {
    a2 = this[5];
    if (*((_QWORD *)a2 + 7))
      WebCore::HTMLLabelElement::updateLabel((WebCore::HTMLLabelElement *)this, (WebCore::TreeScopeOrderedMap **)a2, MEMORY[0x1E0CBF2F8], a3);
  }
  if ((*(_BYTE *)(*((_QWORD *)this[5] + 1) + 3364) & 2) != 0)
  {
    WebCore::Node::registeredMutationObservers((uint64_t)this, 2, (uint64_t)v5, &v191);
    if (v191)
    {
      if (*((_DWORD *)v191 - 3))
      {
        v135 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v135 = 0;
        v136 = v191;
        v191 = 0;
        *(_QWORD *)v135 = v136;
        *(_BYTE *)(v135 + 8) = 32;
        if (v191)
          WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::deallocateTable((WebCore::MutationObserver **)v191, v134);
        WebCore::MutationRecord::createAttributes((uint64_t)this, (uint64_t)v5, MEMORY[0x1E0CBF2F8], (uint64_t *)&v191);
        WebCore::MutationObserverInterestGroup::enqueueMutationRecord((uint64_t *)v135, &v191);
        v138 = v191;
        v191 = 0;
        if (v138)
        {
          if (*((_DWORD *)v138 + 2) == 1)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v138 + 8))(v138);
          else
            --*((_DWORD *)v138 + 2);
        }
        if (*(_QWORD *)v135)
          WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::deallocateTable(*(WebCore::MutationObserver ***)v135, v137);
        WTF::fastFree((WTF *)v135, v137);
      }
      else
      {
        WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::deallocateTable((WebCore::MutationObserver **)v191, a2);
      }
    }
  }
  v9 = *((_QWORD *)this[5] + 1);
  *(_DWORD *)(v9 + 24) += 2;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v99 = *(_QWORD *)(v9 + 528);
    if (v99)
    {
      v100 = *(_QWORD *)(v99 + 8);
      if (v100)
      {
        v101 = *(_QWORD *)(v100 + 24);
        if (v101)
        {
          v102 = *(_QWORD *)(v101 + 8);
          if (v102)
            goto LABEL_200;
        }
      }
    }
    v111 = *(_QWORD *)(v9 + 2632);
    if (v111)
    {
      v112 = *(_QWORD *)(v111 + 8);
      if (v112)
      {
        v113 = *(_QWORD *)(v112 + 528);
        if (v113)
        {
          v114 = *(_QWORD *)(v113 + 8);
          if (v114)
          {
            v115 = *(_QWORD *)(v114 + 24);
            if (v115)
            {
              v102 = *(_QWORD *)(v115 + 8);
              if (v102)
              {
LABEL_200:
                v103 = *(_QWORD *)(*(_QWORD *)(v102 + 80) + 8);
                v104 = *(Inspector::InspectorDebuggerAgent ***)(v103 + 152);
                if (v104)
                  WebCore::PageDOMDebuggerAgent::willModifyDOMAttr(v104, (WebCore::Element *)this);
                v105 = *(_QWORD *)(v103 + 40);
                if (v105)
                  *(_BYTE *)(v105 + 438) = *v8 == *a3;
              }
            }
          }
        }
      }
    }
  }
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v9);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
  if ((*((_BYTE *)this + 22) & 8) == 0)
    goto LABEL_23;
  v11 = this[5];
  v12 = *((_QWORD *)v11 + 1);
  if (!*(_QWORD *)(v12 + 1944) || *(_BYTE *)(v12 + 3405))
    goto LABEL_23;
  if ((*((_BYTE *)this + 70) & 4) != 0)
  {
    v15 = *(_QWORD *)v11;
    v16 = (*(_WORD *)(v15 + 28) & 0x80) == 0 || v15 == 0;
    v17 = v15 + 216;
    if (v16)
      v17 = v12 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v17 + 236))
      goto LABEL_23;
  }
  v13 = *(_QWORD *)(v12 + 1272);
  if (v13 && (*(_BYTE *)(v13 + 70) & 4) != 0)
  {
LABEL_23:
    LOBYTE(v187) = 0;
    v188 = (WebCore::HTMLLabelElement *)this;
    v189 = 0;
  }
  else
  {
    hasPendingFullStyleRebuild = WebCore::Document::hasPendingFullStyleRebuild((WebCore::Document *)v12);
    LOBYTE(v187) = !hasPendingFullStyleRebuild;
    v188 = (WebCore::HTMLLabelElement *)this;
    v189 = 0;
    if (!hasPendingFullStyleRebuild)
    {
      WebCore::Style::AttributeChangeInvalidation::invalidateStyle((WTF::StringImpl *)&v187, (const WebCore::QualifiedName *)v5, MEMORY[0x1E0CBF2F8], (const WTF::AtomString *)a3);
      WebCore::Style::AttributeChangeInvalidation::invalidateStyleWithRuleSets((WebCore::Style::AttributeChangeInvalidation *)&v187);
    }
  }
  v18 = (uint64_t *)(this + 13);
  v19 = (uint64_t)this[13];
  if (!v19)
  {
    v60 = WTF::fastMalloc((WTF *)0x78);
    *(_QWORD *)v60 = 0x100000001;
    *(_OWORD *)(v60 + 8) = 0u;
    *(_OWORD *)(v60 + 24) = 0u;
    *(_QWORD *)(v60 + 40) = v60 + 56;
    *(_QWORD *)(v60 + 48) = 4;
    v61 = *v18;
    *v18 = v60;
    if (!v61)
      goto LABEL_26;
    if (*(_DWORD *)v61 != 1)
    {
      --*(_DWORD *)v61;
      goto LABEL_26;
    }
    v71 = *(unsigned int *)(v61 + 4);
    if ((v71 & 1) != 0)
    {
      v72 = *(unsigned int *)(v61 + 52);
      if ((_DWORD)v72)
      {
        v73 = 16 * v72;
        v74 = (WTF::StringImpl **)(*(_QWORD *)(v61 + 40) + 8);
        do
        {
          v75 = *v74;
          *v74 = 0;
          if (v75)
          {
            if (*(_DWORD *)v75 == 2)
              WTF::StringImpl::destroy(v75, a2);
            else
              *(_DWORD *)v75 -= 2;
          }
          v76 = (WTF::StringImpl **)*(v74 - 1);
          *(v74 - 1) = 0;
          if (v76)
          {
            if (*(_DWORD *)v76 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v76);
              WTF::fastFree(v77, v78);
            }
            else
            {
              --*(_DWORD *)v76;
            }
          }
          v74 += 2;
          v73 -= 16;
        }
        while (v73);
      }
      v79 = *(WTF **)(v61 + 40);
      if ((WTF *)(v61 + 56) != v79 && v79 != 0)
      {
        *(_QWORD *)(v61 + 40) = 0;
        *(_DWORD *)(v61 + 48) = 0;
        WTF::fastFree(v79, a2);
      }
      v81 = *(unsigned int **)(v61 + 32);
      *(_QWORD *)(v61 + 32) = 0;
      if (v81)
      {
        if (*v81 == 1)
        {
          v121 = v81[1];
          if (v121 >= 0x10)
          {
            v122 = 0;
            v123 = (unsigned int *)((char *)v81 + ((v121 >> 3) & 0x1FFFFFFE) + 8);
            do
            {
              v124 = (_DWORD *)(*v123 | ((unint64_t)*((unsigned __int8 *)v123 + 4) << 32));
              if (*v124 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v124, a2);
              else
                *v124 -= 2;
              ++v122;
              v123 = (unsigned int *)((char *)v123 + 5);
            }
            while (v122 < (unint64_t)v81[1] >> 4);
          }
          WTF::fastFree((WTF *)v81, a2);
        }
        else
        {
          --*v81;
        }
      }
      v82 = *(WTF::StringImpl **)(v61 + 24);
      *(_QWORD *)(v61 + 24) = 0;
      if (v82)
      {
        if (*(_DWORD *)v82 == 2)
          WTF::StringImpl::destroy(v82, a2);
        else
          *(_DWORD *)v82 -= 2;
      }
      v83 = *(WTF **)(v61 + 16);
      *(_QWORD *)(v61 + 16) = 0;
      if (v83)
      {
        if (*((_DWORD *)v83 + 2) == 1)
          WebCore::SpaceSplitStringData::destroy(v83, a2);
        else
          --*((_DWORD *)v83 + 2);
      }
      v84 = *(_QWORD *)(v61 + 8);
      *(_QWORD *)(v61 + 8) = 0;
      if (!v84)
        goto LABEL_150;
      v85 = *(_DWORD *)v84 - 1;
      if (*(_DWORD *)v84 != 1)
        goto LABEL_149;
      if ((*(_BYTE *)(v84 + 4) & 8) != 0)
      {
        v125 = *(unsigned int *)(v84 + 28);
        if ((_DWORD)v125)
        {
          v126 = 16 * v125;
          v127 = (_DWORD **)(*(_QWORD *)(v84 + 16) + 8);
          do
          {
            v128 = *v127;
            *v127 = 0;
            if (v128)
            {
              if (*v128 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v128, a2);
              else
                *v128 -= 2;
            }
            v127 += 2;
            v126 -= 16;
          }
          while (v126);
        }
LABEL_241:
        v129 = *(WTF **)(v84 + 16);
        if ((WTF *)(v84 + 32) != v129 && v129 != 0)
        {
          *(_QWORD *)(v84 + 16) = 0;
          *(_DWORD *)(v84 + 24) = 0;
          WTF::fastFree(v129, a2);
        }
        v131 = *(_QWORD *)(v84 + 8);
        *(_QWORD *)(v84 + 8) = 0;
        if (v131)
          (*(void (**)(uint64_t))(*(_QWORD *)v131 + 8))(v131);
        v132 = (WTF *)v84;
        goto LABEL_249;
      }
    }
    else
    {
      if (v71 >= 0x20)
      {
        v86 = v71 >> 5;
        v87 = (WTF::StringImpl **)(v61 + 40);
        do
        {
          v88 = *v87;
          *v87 = 0;
          if (v88)
          {
            if (*(_DWORD *)v88 == 2)
              WTF::StringImpl::destroy(v88, a2);
            else
              *(_DWORD *)v88 -= 2;
          }
          v89 = (WTF::StringImpl **)*(v87 - 1);
          *(v87 - 1) = 0;
          if (v89)
          {
            if (*(_DWORD *)v89 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v89);
              WTF::fastFree(v90, v91);
            }
            else
            {
              --*(_DWORD *)v89;
            }
          }
          v87 += 2;
          --v86;
        }
        while (v86);
      }
      v92 = *(WTF::StringImpl **)(v61 + 24);
      *(_QWORD *)(v61 + 24) = 0;
      if (v92)
      {
        if (*(_DWORD *)v92 == 2)
          WTF::StringImpl::destroy(v92, a2);
        else
          *(_DWORD *)v92 -= 2;
      }
      v93 = *(WTF **)(v61 + 16);
      *(_QWORD *)(v61 + 16) = 0;
      if (v93)
      {
        if (*((_DWORD *)v93 + 2) == 1)
          WebCore::SpaceSplitStringData::destroy(v93, a2);
        else
          --*((_DWORD *)v93 + 2);
      }
      v84 = *(_QWORD *)(v61 + 8);
      *(_QWORD *)(v61 + 8) = 0;
      if (!v84)
        goto LABEL_150;
      v85 = *(_DWORD *)v84 - 1;
      if (*(_DWORD *)v84 != 1)
      {
LABEL_149:
        *(_DWORD *)v84 = v85;
LABEL_150:
        WTF::fastFree((WTF *)v61, a2);
        goto LABEL_26;
      }
      if ((*(_BYTE *)(v84 + 4) & 8) != 0)
      {
        v94 = *(unsigned int *)(v84 + 28);
        if ((_DWORD)v94)
        {
          v95 = 16 * v94;
          v96 = (_DWORD **)(*(_QWORD *)(v84 + 16) + 8);
          do
          {
            v97 = *v96;
            *v96 = 0;
            if (v97)
            {
              if (*v97 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v97, a2);
              else
                *v97 -= 2;
            }
            v96 += 2;
            v95 -= 16;
          }
          while (v95);
        }
        goto LABEL_241;
      }
    }
    WebCore::ImmutableStyleProperties::~ImmutableStyleProperties((WebCore::ImmutableStyleProperties *)v84, a2);
LABEL_249:
    WTF::fastFree(v132, a2);
    goto LABEL_150;
  }
  if ((*(_BYTE *)(v19 + 4) & 1) == 0)
  {
    v62 = WTF::fastMalloc((WTF *)0x78);
    v191 = (WTF::StringImpl *)WebCore::UniqueElementData::UniqueElementData(v62, v19);
    WTF::RefPtr<WebCore::ElementData,WTF::RawPtrTraits<WebCore::ElementData>,WTF::DefaultRefDerefTraits<WebCore::ElementData>>::operator=<WebCore::UniqueElementData>((uint64_t *)this + 13, (WTF::StringImpl *)&v191);
    v63 = v191;
    v191 = 0;
    if (v63)
      WebCore::ElementData::deref((uint64_t)v63, a2);
  }
LABEL_26:
  v20 = *v18;
  v21 = *v5;
  if (*v5)
    ++*(_DWORD *)v21;
  v191 = v21;
  v22 = *a3;
  if (*a3)
    *(_DWORD *)v22 += 2;
  v192 = v22;
  v23 = *(unsigned int *)(v20 + 52);
  if ((_DWORD)v23 == *(_DWORD *)(v20 + 48))
  {
    v53 = (uint64_t *)WTF::Vector<WebCore::Attribute,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v20 + 40, v23 + 1, (unint64_t)&v191);
    v54 = *(unsigned int *)(v20 + 52);
    v55 = (_QWORD *)(*(_QWORD *)(v20 + 40) + 16 * v54);
    v56 = *v53;
    *v53 = 0;
    *v55 = v56;
    v57 = v53[1];
    v53[1] = 0;
    v55[1] = v57;
    v58 = v192;
    *(_DWORD *)(v20 + 52) = v54 + 1;
    v192 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, a2);
      else
        *(_DWORD *)v58 -= 2;
    }
  }
  else
  {
    v24 = *(_QWORD *)(v20 + 40);
    v191 = 0;
    v25 = (WTF::StringImpl **)(v24 + 16 * v23);
    *v25 = v21;
    v25[1] = v22;
    *(_DWORD *)(v20 + 52) = v23 + 1;
    v192 = 0;
  }
  v26 = (WTF::StringImpl **)v191;
  v191 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v26);
      WTF::fastFree(v51, v52);
    }
    else
    {
      --*(_DWORD *)v26;
    }
  }
  if (!(_BYTE)v187)
    goto LABEL_47;
  v27 = (uint64_t)v188;
  v28 = (uint64_t *)*((_QWORD *)v188 + 5);
  v29 = *v28;
  if (*v28 && (*(_WORD *)(v29 + 28) & 0x80) != 0)
    v30 = v29 + 216;
  else
    v30 = v28[1] + 1328;
  v31 = *(_QWORD *)v30;
  if (!*(_QWORD *)(*(_QWORD *)v30 + 32))
  {
    if (*(_QWORD *)(v31 + 24))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v31);
    else
      WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v31);
    v98 = *(_QWORD *)(v31 + 32);
    if (*(_DWORD *)(v98 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v98 + 32));
    if (*(_BYTE *)(v98 + 242)
      || *(_BYTE *)(v98 + 243)
      || *(_BYTE *)(v98 + 244)
      || *(_BYTE *)(v98 + 245)
      || *(_BYTE *)(v98 + 246)
      || *(_BYTE *)(v98 + 247)
      || *(_BYTE *)(v98 + 248))
    {
      *(_BYTE *)(v31 + 236) = 1;
    }
  }
  v32 = *(_QWORD *)(v31 + 32);
  v33 = *(_BYTE *)(v32 + 350);
  *(_BYTE *)(v32 + 350) = 1;
  if (v189)
  {
    v35 = *((unsigned int *)v189 - 1);
    v36 = &v189[32 * v35];
    if (*((_DWORD *)v189 - 3))
    {
      v34 = v189;
      if ((_DWORD)v35)
      {
        v59 = 32 * v35;
        v34 = v189;
        while (*v34 >= 0xFEu)
        {
          v34 += 32;
          v59 -= 32;
          if (!v59)
          {
            v34 = v36;
            goto LABEL_43;
          }
        }
      }
      goto LABEL_43;
    }
    v34 = &v189[32 * v35];
  }
  else
  {
    v34 = 0;
    v35 = 0;
  }
  v36 = &v189[32 * v35];
LABEL_43:
  if (v189)
    v37 = &v189[32 * *((unsigned int *)v189 - 1)];
  else
    v37 = 0;
  while (v34 != v37)
  {
    WebCore::Style::Invalidator::Invalidator((uint64_t)&v191, (uint64_t)(v34 + 8));
    v64 = v34 + 32;
    WebCore::Style::Invalidator::invalidateStyleWithMatchElement((uint64_t)&v191, v27);
    WebCore::Style::Invalidator::~Invalidator((WebCore::Style::Invalidator *)&v191, v65);
    v34 = v36;
    if (v64 != v36)
    {
      v34 = v64;
      while (*v34 >= 0xFEu)
      {
        v34 += 32;
        if (v34 == v36)
        {
          v34 = v36;
          break;
        }
      }
    }
  }
  *(_BYTE *)(v32 + 350) = v33;
LABEL_47:
  if (v189)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v189, a2);
  v38 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  (*((void (**)(WebCore::TreeScope **, WebCore::QualifiedName::QualifiedNameImpl **, _QWORD, WTF::StringImpl **, _QWORD))*this
   + 56))(this, v5, MEMORY[0x1E0CBF2F8], a3, 0);
  v41 = *((_QWORD *)this[5] + 1);
  *(_QWORD *)(v41 + 1288) = ++WebCore::Document::s_globalTreeVersion;
  if (((unint64_t)this[9] & 0x3000000000000000) == 0x2000000000000000)
    WebCore::CustomElementReactionQueue::enqueueAttributeChangedCallbackIfNeeded((WebCore::Element *)this, (WTF::StringImpl ***)v5, MEMORY[0x1E0CBF2F8], a3, v40);
  v42 = this[5];
  if (*v38 == *a3)
    goto LABEL_62;
  v43 = *((_QWORD *)v42 + 1);
  if (*(_DWORD *)(v43 + 1772) && *v5 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::classAttr
    || *(_DWORD *)(v43 + 1776)
    && (*v5 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::idAttr
     || *v5 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::nameAttr)
    || *(_DWORD *)(v43 + 1780) && *v5 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::nameAttr
    || *(_DWORD *)(v43 + 1784)
    && (*v5 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::forAttr
     || *v5 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::typeAttr)
    || *(_DWORD *)(v43 + 1788)
    && ((v147 = *v5, *v5 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::nameAttr)
     || v147 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::idAttr
     || v147 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::forAttr
     || v147 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::formAttr
     || v147 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::typeAttr)
    || *(_DWORD *)(v43 + 1792) && *v5 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::hrefAttr
    || *(_DWORD *)(v43 + 1796))
  {
    v191 = (WTF::StringImpl *)v193;
    v192 = (WTF::StringImpl *)8;
    v67 = *(_QWORD **)(v43 + 1752);
    if (!v67)
      goto LABEL_110;
    v164 = *((unsigned int *)v67 - 3);
    if (v164 < 9)
    {
      v165 = (WTF::StringImpl *)v193;
    }
    else
    {
      if (v164 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1959C91ECLL);
      }
      v165 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v164));
      LODWORD(v192) = v164;
      v191 = v165;
      v67 = *(_QWORD **)(v43 + 1752);
      if (!v67)
        goto LABEL_352;
      LODWORD(v164) = *((_DWORD *)v67 - 3);
    }
    if ((_DWORD)v164)
    {
      v166 = *((unsigned int *)v67 - 1);
      v167 = v67;
      if ((_DWORD)v166)
      {
        v168 = 8 * v166;
        v167 = v67;
        while ((unint64_t)(*v167 + 1) <= 1)
        {
          ++v167;
          v168 -= 8;
          if (!v168)
            goto LABEL_352;
        }
      }
      v170 = &v67[v166];
      if (v167 != v170)
      {
        v169 = HIDWORD(v192);
        v171 = *v167;
LABEL_355:
        *((_QWORD *)v191 + v169++) = v171;
        while (++v167 != v170)
        {
          v171 = *v167;
          if ((unint64_t)(*v167 + 1) > 1)
          {
            if (v167 != v170)
              goto LABEL_355;
            break;
          }
        }
        HIDWORD(v192) = v169;
        v165 = v191;
        goto LABEL_360;
      }
    }
LABEL_352:
    v169 = HIDWORD(v192);
LABEL_360:
    if (v169)
    {
      v172 = 8 * v169;
      do
      {
        if (*(_BYTE *)(*(_QWORD *)v165 + 32) != 2)
        {
          switch(*(_BYTE *)(*(_QWORD *)v165 + 32))
          {
            case 1:
              v178 = *v5;
              v179 = WebCore::HTMLNames::classAttr;
              goto LABEL_372;
            case 3:
              v178 = *v5;
              v181 = &WebCore::HTMLNames::nameAttr;
              goto LABEL_382;
            case 4:
              v173 = *v5;
              v174 = WebCore::HTMLNames::forAttr;
              v175 = &WebCore::HTMLNames::typeAttr;
              goto LABEL_364;
            case 5:
              v182 = *v5;
              if (*v5 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::nameAttr
                || v182 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::idAttr
                || v182 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::forAttr
                || v182 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::formAttr
                || v182 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::typeAttr)
              {
                goto LABEL_397;
              }
              goto LABEL_368;
            case 6:
              v178 = *v5;
              v181 = &WebCore::HTMLNames::hrefAttr;
LABEL_382:
              v179 = *v181;
LABEL_372:
              if (v178 == (WebCore::QualifiedName::QualifiedNameImpl *)v179)
                goto LABEL_397;
              goto LABEL_368;
            case 7:
              goto LABEL_397;
            default:
              goto LABEL_368;
          }
        }
        v173 = *v5;
        v174 = WebCore::HTMLNames::idAttr;
        v175 = &WebCore::HTMLNames::nameAttr;
LABEL_364:
        v176 = (WebCore::QualifiedName::QualifiedNameImpl *)*v175;
        if (v173 == (WebCore::QualifiedName::QualifiedNameImpl *)v174 || v173 == v176)
LABEL_397:
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v165 + 80))(*(_QWORD *)v165, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v165 + 24) + 40) + 8));
LABEL_368:
        v165 = (WTF::StringImpl *)((char *)v165 + 8);
        v172 -= 8;
      }
      while (v172);
      v165 = v191;
    }
    if (v193 != (_BYTE *)v165 && v165 != 0)
    {
      v191 = 0;
      LODWORD(v192) = 0;
      WTF::fastFree(v165, v39);
    }
LABEL_110:
    v191 = (WTF::StringImpl *)v193;
    v192 = (WTF::StringImpl *)8;
    v68 = *(_QWORD **)(v43 + 1760);
    if (!v68)
    {
LABEL_111:
      v69 = (WebCore::HTMLLabelElement *)this;
      do
      {
        v70 = (WebCore::CollectionNamedElementCache **)(*((_QWORD *)v69 + 9) & 0xFFFFFFFFFFFFLL);
        if (v70 && *v70)
          WebCore::NodeListsNodeData::invalidateCachesForAttribute(*v70, (const WebCore::QualifiedName *)v5);
        v69 = (WebCore::HTMLLabelElement *)*((_QWORD *)v69 + 4);
      }
      while (v69);
      v42 = this[5];
      goto LABEL_61;
    }
    v153 = *((unsigned int *)v68 - 3);
    if (v153 >= 9)
    {
      if (v153 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1959C91DCLL);
      }
      v154 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v153));
      LODWORD(v192) = v153;
      v191 = v154;
      v68 = *(_QWORD **)(v43 + 1760);
      if (!v68)
        goto LABEL_322;
      LODWORD(v153) = *((_DWORD *)v68 - 3);
    }
    else
    {
      v154 = (WTF::StringImpl *)v193;
    }
    if ((_DWORD)v153)
    {
      v155 = *((unsigned int *)v68 - 1);
      v156 = v68;
      if ((_DWORD)v155)
      {
        v157 = 8 * v155;
        v156 = v68;
        while ((unint64_t)(*v156 + 1) <= 1)
        {
          ++v156;
          v157 -= 8;
          if (!v157)
            goto LABEL_322;
        }
      }
      v158 = &v68[v155];
      if (v156 != v158)
      {
        v159 = HIDWORD(v192);
        v163 = *v156;
LABEL_338:
        *((_QWORD *)v191 + v159++) = v163;
        while (++v156 != v158)
        {
          v163 = *v156;
          if ((unint64_t)(*v156 + 1) > 1)
          {
            if (v156 != v158)
              goto LABEL_338;
            break;
          }
        }
        HIDWORD(v192) = v159;
        v154 = v191;
        goto LABEL_323;
      }
    }
LABEL_322:
    v159 = HIDWORD(v192);
LABEL_323:
    if (v159)
    {
      v160 = 8 * v159;
      do
      {
        v161 = *(WebCore::CollectionNamedElementCache **)v154;
        v154 = (WTF::StringImpl *)((char *)v154 + 8);
        WebCore::HTMLCollection::invalidateCacheForAttribute(v161, (uint64_t *)v5);
        v160 -= 8;
      }
      while (v160);
      v154 = v191;
    }
    if (v193 != (_BYTE *)v154 && v154 != 0)
    {
      v191 = 0;
      LODWORD(v192) = 0;
      WTF::fastFree(v154, v39);
    }
    goto LABEL_111;
  }
LABEL_61:
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v149 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(*((WebCore::Document **)v42 + 1));
    if (v149)
    {
      v151 = v149;
      ++*((_DWORD *)v149 + 2);
      WebCore::AXObjectCache::deferAttributeChangeIfNeeded(v149, (WebCore::Element *)this, v5, MEMORY[0x1E0CBF2F8], (const WTF::AtomString *)a3, v150);
      v152 = *((_DWORD *)v151 + 2);
      if (!v152)
      {
        __break(0xC471u);
        JUMPOUT(0x1959C9118);
      }
      *((_DWORD *)v151 + 2) = v152 - 1;
      v42 = this[5];
    }
  }
LABEL_62:
  v44 = *((_QWORD *)v42 + 1);
  *(_DWORD *)(v44 + 24) += 2;
  v45 = *v5;
  v46 = (WTF::StringImpl *)*((_QWORD *)*v5 + 2);
  if (v46)
  {
    *(_DWORD *)v46 += 2;
    v191 = v46;
    v139 = (WTF::StringImpl *)*((_QWORD *)v45 + 3);
    if (v139)
      *(_DWORD *)v139 += 2;
    v187 = v139;
    WTF::makeAtomString<WTF::AtomString,char,WTF::AtomString>(&v191, 58, &v187, (WTF::AtomString *)&v190);
    v140 = v187;
    v187 = 0;
    if (v140)
    {
      if (*(_DWORD *)v140 == 2)
        WTF::StringImpl::destroy(v140, (WTF::StringImpl *)v39);
      else
        *(_DWORD *)v140 -= 2;
    }
    v141 = v191;
    v191 = 0;
    if (v141)
    {
      if (*(_DWORD *)v141 == 2)
        WTF::StringImpl::destroy(v141, (WTF::StringImpl *)v39);
      else
        *(_DWORD *)v141 -= 2;
    }
  }
  else
  {
    v47 = (WTF::StringImpl *)*((_QWORD *)v45 + 3);
    if (v47)
      *(_DWORD *)v47 += 2;
    v190 = v47;
  }
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v106 = *(_QWORD *)(v44 + 528);
    if (v106)
    {
      v107 = *(_QWORD *)(v106 + 8);
      if (v107)
      {
        v108 = *(_QWORD *)(v107 + 24);
        if (v108)
        {
          v109 = *(_QWORD *)(v108 + 8);
          if (v109)
            goto LABEL_208;
        }
      }
    }
    v116 = *(_QWORD *)(v44 + 2632);
    if (v116)
    {
      v117 = *(_QWORD *)(v116 + 8);
      if (v117)
      {
        v118 = *(_QWORD *)(v117 + 528);
        if (v118)
        {
          v119 = *(_QWORD *)(v118 + 8);
          if (v119)
          {
            v120 = *(_QWORD *)(v119 + 24);
            if (v120)
            {
              v109 = *(_QWORD *)(v120 + 8);
              if (v109)
              {
LABEL_208:
                v110 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v109 + 80) + 8) + 40);
                if (v110)
                  WebCore::InspectorDOMAgent::didModifyDOMAttr(v110, (WebCore::Element *)this, (const WTF::AtomString *)&v190, (const WTF::AtomString *)a3);
              }
            }
          }
        }
      }
    }
  }
  result = (WTF::StringImpl **)v190;
  v190 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v39);
    else
      *(_DWORD *)result -= 2;
  }
  if (*(_DWORD *)(v44 + 24) == 2)
  {
    if ((*(_WORD *)(v44 + 30) & 0x400) == 0)
      result = (WTF::StringImpl **)WebCore::Node::removedLastRef((WebCore::Node *)v44);
  }
  else
  {
    *(_DWORD *)(v44 + 24) -= 2;
  }
  if ((*((_BYTE *)this + 22) & 0x10) == 0)
  {
    v50 = *((_QWORD *)this[5] + 1);
    if (!*(_BYTE *)(v50 + 3268) && (*(_WORD *)(v50 + 3292) & 1) != 0)
    {
      result = (WTF::StringImpl **)WebCore::eventNames((WebCore *)result);
      v142 = result + 7;
      if (this[4]
        || (v148 = this[2], ((unint64_t)v148 & 0x1000000000000) != 0)
        && (result = (WTF::StringImpl **)WebCore::EventListenerMap::find(((unint64_t)v148 & 0xFFFFFFFFFFFFLL) + 16, v142)) != 0)
      {
        v191 = 0;
        v187 = 0;
        v143 = (WebCore::Node *)WebCore::MutationEvent::operator new(112);
        WebCore::MutationEvent::MutationEvent((uint64_t)v143, v142, 1, 0, 0, (_DWORD **)&v191, (_DWORD **)&v187);
        WebCore::EventDispatcher::dispatchScopedEvent((WebCore::EventDispatcher *)this, v143, v144);
        if (*((_DWORD *)v143 + 4) == 1)
          (*(void (**)(WebCore::Node *))(*(_QWORD *)v143 + 8))(v143);
        else
          --*((_DWORD *)v143 + 4);
        v146 = v187;
        v187 = 0;
        if (v146)
        {
          if (*(_DWORD *)v146 == 2)
            WTF::StringImpl::destroy(v146, v145);
          else
            *(_DWORD *)v146 -= 2;
        }
        result = (WTF::StringImpl **)v191;
        v191 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)result, v145);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::Element::setAttributeWithoutSynchronization(WebCore::Element *this, const WebCore::QualifiedName *a2, WTF::StringImpl **a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *((_QWORD *)this + 13);
  if (v5
    && ((v6 = *(_DWORD *)(v5 + 4), (v6 & 1) != 0)
      ? (v7 = *(uint64_t **)(v5 + 40), v8 = *(_DWORD *)(v5 + 52))
      : (v7 = (uint64_t *)(v5 + 32), v8 = v6 >> 5),
        v8))
  {
    v9 = 0;
    v10 = *(_QWORD *)a2;
    while (1)
    {
      v11 = *v7;
      if (*v7 == v10
        || *(_QWORD *)(v11 + 24) == *(_QWORD *)(v10 + 24) && *(_QWORD *)(v11 + 32) == *(_QWORD *)(v10 + 32))
      {
        break;
      }
      ++v9;
      v7 += 2;
      if (v8 == v9)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    v9 = 0xFFFFFFFFLL;
  }
  return WebCore::Element::setAttributeInternal(this, v9, a2, a3, 0);
}

WTF::StringImpl **WebCore::Element::setSynchronizedLazyAttribute(WTF::StringImpl **this, WebCore::QualifiedName::QualifiedNameImpl **a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v5;
  unsigned int v6;
  WebCore::QualifiedName::QualifiedNameImpl **v7;
  unsigned int v8;
  uint64_t v9;
  WebCore::QualifiedName::QualifiedNameImpl *v10;
  WebCore::QualifiedName::QualifiedNameImpl *v11;

  v5 = this[13];
  if (v5
    && ((v6 = *((_DWORD *)v5 + 1), (v6 & 1) != 0)
      ? (v7 = (WebCore::QualifiedName::QualifiedNameImpl **)*((_QWORD *)v5 + 5), v8 = *((_DWORD *)v5 + 13))
      : (v7 = (WebCore::QualifiedName::QualifiedNameImpl **)((char *)v5 + 32), v8 = v6 >> 5),
        v8))
  {
    v9 = 0;
    v10 = *a2;
    while (1)
    {
      v11 = *v7;
      if (*v7 == v10 || *((_QWORD *)v11 + 3) == *((_QWORD *)v10 + 3) && *((_QWORD *)v11 + 4) == *((_QWORD *)v10 + 4))
        break;
      ++v9;
      v7 += 2;
      if (v8 == v9)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    v9 = 0xFFFFFFFFLL;
  }
  if (*a3)
  {
    this = (WTF::StringImpl **)WebCore::Element::ensureUniqueElementData((WebCore::Element *)this);
    if ((_DWORD)v9 == -1)
    {
      return WebCore::UniqueElementData::addAttribute((WebCore::UniqueElementData *)this, a2, a3);
    }
    else if (*((_DWORD *)this + 13) <= v9)
    {
      __break(0xC471u);
    }
    else
    {
      return (WTF::StringImpl **)WebCore::Attribute::setValue((WTF::StringImpl *)((char *)this[5] + 16 * v9), (const WTF::AtomString *)a3);
    }
  }
  else if ((_DWORD)v9 != -1)
  {
    return WebCore::Element::removeAttributeInternal((uint64_t)this, (WTF::StringImpl *)v9, 1);
  }
  return this;
}

void WebCore::Element::notifyAttributeChanged(WebCore::Element *a1, WTF::StringImpl ***a2, WTF::StringImpl **a3, WTF::StringImpl **a4)
{
  const WTF::AtomString *v8;
  uint64_t v9;
  WebCore::AXObjectCache *v10;
  __n128 v11;
  WebCore::AXObjectCache *v12;
  int v13;

  (*(void (**)(WebCore::Element *))(*(_QWORD *)a1 + 448))(a1);
  v9 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
  *(_QWORD *)(v9 + 1288) = ++WebCore::Document::s_globalTreeVersion;
  if ((*((_QWORD *)a1 + 9) & 0x3000000000000000) == 0x2000000000000000)
    WebCore::CustomElementReactionQueue::enqueueAttributeChangedCallbackIfNeeded(a1, a2, a3, a4, v8);
  if (*a3 != *a4)
  {
    WebCore::Node::invalidateNodeListAndCollectionCachesInAncestorsForAttribute(a1, (const WebCore::QualifiedName *)a2);
    if (WebCore::Document::hasEverCreatedAnAXObjectCache)
    {
      v10 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*((_QWORD *)a1 + 5) + 8));
      if (v10)
      {
        v12 = v10;
        ++*((_DWORD *)v10 + 2);
        WebCore::AXObjectCache::deferAttributeChangeIfNeeded(v10, a1, (WebCore::QualifiedName::QualifiedNameImpl **)a2, (unsigned int **)a3, (const WTF::AtomString *)a4, v11);
        v13 = *((_DWORD *)v12 + 2);
        if (v13)
          *((_DWORD *)v12 + 2) = v13 - 1;
        else
          __break(0xC471u);
      }
    }
  }
}

BOOL WebCore::Element::needsStyleInvalidation(WebCore::Element *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  BOOL v11;

  if ((*((_BYTE *)this + 22) & 8) == 0)
    return 0;
  v1 = (uint64_t *)*((_QWORD *)this + 5);
  v2 = v1[1];
  if (!*(_QWORD *)(v2 + 1944) || *(_BYTE *)(v2 + 3405))
    return 0;
  if ((*((_BYTE *)this + 70) & 4) != 0)
  {
    v7 = *v1;
    v8 = (*(_WORD *)(v7 + 28) & 0x80) == 0 || v7 == 0;
    v9 = v7 + 216;
    if (v8)
      v9 = v2 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v9 + 236))
      return 0;
  }
  v3 = *(_QWORD *)(v2 + 1272);
  if (v3)
  {
    if ((*(_BYTE *)(v3 + 70) & 4) != 0)
      return 0;
  }
  if (*(_BYTE *)(v2 + 3362))
    return 1;
  v4 = *(unsigned __int8 *)(v2 + 3390);
  if (!*(_BYTE *)(v2 + 3390) && (*(_BYTE *)(v2 + 70) & 8) == 0 && !*(_QWORD *)(v2 + 1560))
  {
    v5 = *(_QWORD *)(v2 + 1328);
    if (!*(_BYTE *)(v5 + 233) && !*(_BYTE *)(v5 + 234))
      return 1;
  }
  v10 = *(unsigned __int8 *)(v2 + 3391);
  if (v4)
    v11 = v10 == 0;
  else
    v11 = 0;
  return !v11;
}

WebCore::Node *WebCore::Element::invalidateStyleForSubtree(WebCore::Element *this)
{
  WebCore::Node *result;
  uint64_t v3;
  WebCore::Node *ElementSibling;
  WebCore::Element *v5;

  result = (WebCore::Node *)WebCore::Node::invalidateStyle((uint64_t)this, 4u, 0);
  if ((*((_BYTE *)this + 71) & 1) != 0)
  {
    v3 = *((_QWORD *)this + 4);
    if (!v3 || (*(_WORD *)(v3 + 28) & 8) == 0 || (*(_BYTE *)(v3 + 70) & 4) == 0)
    {
      ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)this);
      return WebCore::invalidateForSiblingCombinators(ElementSibling, v5);
    }
  }
  return result;
}

WTF *WebCore::Element::partAttributeChanged(WebCore::Element *this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL hasPendingFullStyleRebuild;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  WTF *result;
  WTF *v16;
  int v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20;
  WTF::StringImpl *v21;
  WTF *v22;
  WTF::StringImpl *v23;

  v3 = *a2;
  if (*a2 && *((_DWORD *)v3 + 1))
  {
    *(_DWORD *)v3 += 2;
    v23 = v3;
    WebCore::SpaceSplitStringData::create((WebCore::SpaceSplitStringData *)&v23, (const WTF::AtomString *)a2, &v22);
    v21 = v23;
    v23 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v21 -= 2;
    }
    if (v22)
      goto LABEL_32;
  }
  else
  {
    v22 = 0;
  }
  v4 = *((_QWORD *)this + 9);
  if ((v4 & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v16 = *(WTF **)((v4 & 0xFFFFFFFFFFFFLL) + 0xD0);
  if (!v16)
    goto LABEL_5;
  v17 = *((_DWORD *)v16 + 2);
  *((_DWORD *)v16 + 2) = v17 + 1;
  if (v17)
    *((_DWORD *)v16 + 2) = v17;
  else
    WebCore::SpaceSplitStringData::destroy(v16, (WTF::StringImpl *)a2);
LABEL_32:
  v4 = *((_QWORD *)this + 9);
  v18 = v4 & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0xFFFFFFFFFFFFLL) == 0)
  {
    WebCore::Node::materializeRareData(this);
    v4 = *((_QWORD *)this + 9);
    v18 = v4 & 0xFFFFFFFFFFFFLL;
  }
  v19 = v22;
  v22 = 0;
  v20 = *(WTF **)(v18 + 208);
  *(_QWORD *)(v18 + 208) = v19;
  if (v20)
  {
    if (*((_DWORD *)v20 + 2) == 1)
    {
      WebCore::SpaceSplitStringData::destroy(v20, (WTF::StringImpl *)a2);
      v4 = *((_QWORD *)this + 9);
    }
    else
    {
      --*((_DWORD *)v20 + 2);
    }
  }
LABEL_5:
  v5 = v4 & 0xFFFFFFFFFFFFLL;
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 200);
    if (v6)
    {
      if (!*(_BYTE *)(v6 + 16))
        *(_BYTE *)(v6 + 17) = 1;
    }
  }
  v7 = *((_QWORD *)this + 2);
  if ((v7 & 0x8000000000000) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)this + 5);
    v9 = v8[1];
    if (*(_QWORD *)(v9 + 1944))
    {
      if (!*(_BYTE *)(v9 + 3405))
      {
        if ((*((_BYTE *)this + 70) & 4) == 0)
          goto LABEL_13;
        v12 = *v8;
        v13 = (*(_WORD *)(v12 + 28) & 0x80) == 0 || v12 == 0;
        v14 = v12 + 216;
        if (v13)
          v14 = v9 + 1328;
        if (*(_BYTE *)(*(_QWORD *)v14 + 236))
        {
LABEL_13:
          v10 = *(_QWORD *)(v9 + 1272);
          if (!v10 || (*(_BYTE *)(v10 + 70) & 4) == 0)
          {
            hasPendingFullStyleRebuild = WebCore::Document::hasPendingFullStyleRebuild((WebCore::Document *)v9);
            if ((v7 & 0x10000000000000) != 0 && !hasPendingFullStyleRebuild)
              WebCore::Node::invalidateStyle((uint64_t)this, 3u, 0);
          }
        }
      }
    }
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      return (WTF *)WebCore::SpaceSplitStringData::destroy(result, (WTF::StringImpl *)a2);
    else
      --*((_DWORD *)result + 2);
  }
  return result;
}

uint64_t WTF::HashMap<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::remove(uint64_t *a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t result;
  WebCore::QualifiedName::QualifiedNameImpl **v4;
  WTF::StringImpl ***v5;
  WTF::StringImpl ***v6;
  unsigned int v7;

  result = *a1;
  if (!result)
    return result;
  v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>(result, a2);
  v5 = (WTF::StringImpl ***)*a1;
  if (!v4)
  {
    if (!v5)
      return 0;
    v7 = *((_DWORD *)v5 - 1);
    v6 = &v5[3 * v7];
LABEL_5:
    v5 += 3 * v7;
    if (v5 != v6)
      goto LABEL_6;
    return 0;
  }
  v6 = (WTF::StringImpl ***)v4;
  if (v5)
  {
    v7 = *((_DWORD *)v5 - 1);
    goto LABEL_5;
  }
LABEL_6:
  if (v5 != v6)
    WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::remove(a1, v6);
  return 1;
}

uint64_t WebCore::Style::PseudoClassChangeInvalidation::PseudoClassChangeInvalidation(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL hasPendingFullStyleRebuild;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  if ((*(_BYTE *)(a2 + 22) & 8) == 0)
    goto LABEL_15;
  v4 = *(uint64_t **)(a2 + 40);
  v5 = v4[1];
  if (!*(_QWORD *)(v5 + 1944) || *(_BYTE *)(v5 + 3405))
    goto LABEL_15;
  if ((*(_BYTE *)(a2 + 70) & 4) != 0)
  {
    v8 = *v4;
    v9 = (*(_WORD *)(v8 + 28) & 0x80) == 0 || v8 == 0;
    v10 = v8 + 216;
    if (v9)
      v10 = v5 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v10 + 236))
      goto LABEL_15;
  }
  v6 = *(_QWORD *)(v5 + 1272);
  if (v6 && (*(_BYTE *)(v6 + 70) & 4) != 0)
  {
LABEL_15:
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    hasPendingFullStyleRebuild = WebCore::Document::hasPendingFullStyleRebuild((WebCore::Document *)v5);
    *(_BYTE *)a1 = !hasPendingFullStyleRebuild;
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    if (!hasPendingFullStyleRebuild)
    {
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)a1, (WTF::StringImpl *)0x2B, 2, 0);
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(*(_QWORD *)(a1 + 8), (unsigned __int8 **)(a1 + 16));
    }
  }
  return a1;
}

_QWORD *WebCore::ElementIterator<WebCore::Element>::traverseNext(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  BOOL v6;

  v1 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v3 = (_QWORD *)v2[10];
  if (!v3)
  {
    if (v2 == v1)
    {
LABEL_13:
      v4 = 0;
      goto LABEL_4;
    }
    while (1)
    {
      v3 = (_QWORD *)v2[7];
      if (v3)
        break;
      v2 = (_QWORD *)v2[4];
      if (v2)
        v6 = v2 == v1;
      else
        v6 = 1;
      if (v6)
        goto LABEL_13;
    }
  }
  if ((*((_WORD *)v3 + 14) & 8) == 0)
  {
    while (v3 != v1)
    {
      while (1)
      {
        v4 = (_QWORD *)v3[7];
        if (v4)
          break;
        v3 = (_QWORD *)v3[4];
        if (v3)
          v5 = v3 == v1;
        else
          v5 = 1;
        if (v5)
          goto LABEL_13;
      }
      v3 = (_QWORD *)v3[7];
      if ((*((_WORD *)v4 + 14) & 8) != 0)
        goto LABEL_4;
    }
    goto LABEL_13;
  }
  v4 = v3;
LABEL_4:
  result[1] = v4;
  return result;
}

uint64_t WebCore::Element::getElementAttribute@<X0>(WebCore::Element *this@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;
  WTF::StringImpl *v7;
  int *v8;
  int v9;
  int v10;
  const WebCore::TreeScope *v11;
  uint64_t v12;
  const WebCore::QualifiedName *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  const WebCore::Node *v19;
  const WebCore::Node *v20;
  int *v21;

  v5 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  if (v5)
  {
    v12 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xE0);
    if (v12)
    {
      v13 = (const WebCore::QualifiedName *)a2;
      v14 = v5;
      result = (uint64_t)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>(v12, a2);
      v15 = *(_QWORD *)(v14 + 224);
      if (result)
      {
        if (!v15)
          goto LABEL_13;
        v17 = *(_DWORD *)(v15 - 4);
      }
      else
      {
        a2 = (WebCore::QualifiedName::QualifiedNameImpl **)v13;
        if (!v15)
          goto LABEL_2;
        v17 = *(_DWORD *)(v15 - 4);
        result = v15 + 24 * v17;
      }
      a2 = (WebCore::QualifiedName::QualifiedNameImpl **)v13;
      if (result != v15 + 24 * v17)
      {
LABEL_13:
        if (!*(_DWORD *)(result + 20))
        {
          __break(0xC471u);
          return result;
        }
        v16 = **(_QWORD **)(result + 8);
        if (v16)
        {
          v18 = *(_QWORD *)(v16 + 8);
          if (v18)
          {
            *(_DWORD *)(v18 + 24) += 2;
            if ((*(_BYTE *)(v18 + 22) & 0x18) != 0)
            {
              v20 = **(const WebCore::Node ***)(v18 + 40);
            }
            else
            {
              v19 = (const WebCore::Node *)v18;
              do
              {
                v20 = v19;
                v19 = (const WebCore::Node *)*((_QWORD *)v19 + 4);
              }
              while (v19);
            }
            result = WebCore::Node::isDescendantOrShadowDescendantOf((const WebCore::Node ***)this, v20);
            if ((_DWORD)result)
            {
              *a3 = v18;
            }
            else
            {
              *a3 = 0;
              if (*(_DWORD *)(v18 + 24) == 2)
              {
                if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
                  return WebCore::Node::removedLastRef((WebCore::Node *)v18);
              }
              else
              {
                *(_DWORD *)(v18 + 24) -= 2;
              }
            }
            return result;
          }
        }
LABEL_15:
        *a3 = 0;
        return result;
      }
    }
  }
LABEL_2:
  result = WebCore::Element::getAttribute(this, (const WebCore::QualifiedName *)a2);
  v8 = *(int **)result;
  if (!*(_QWORD *)result)
    goto LABEL_15;
  v9 = *v8;
  v10 = v8[1];
  *v8 += 2;
  v21 = v8;
  if (v10 && (v11 = (const WebCore::TreeScope *)*((_QWORD *)this + 5), (result = *((_QWORD *)v11 + 3)) != 0))
  {
    result = (uint64_t)WebCore::TreeScopeOrderedMap::getElementById((unsigned int *)result, (const WTF::AtomString *)&v21, v11, a3);
    v9 = *v8 - 2;
  }
  else
  {
    *a3 = 0;
  }
  if (!v9)
    return WTF::StringImpl::destroy((WTF::StringImpl *)v8, v7);
  *v8 = v9;
  return result;
}

WebCore::QualifiedName::QualifiedNameImpl **WTF::HashMap<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::find(WebCore::QualifiedName::QualifiedNameImpl ***a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  WebCore::QualifiedName::QualifiedNameImpl **result;

  result = *a1;
  if (result)
  {
    result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>((uint64_t)result, a2);
    if (!result)
    {
      if (*a1)
        return &(*a1)[3 * *((unsigned int *)*a1 - 1)];
      else
        return 0;
    }
  }
  return result;
}

uint64_t WebCore::Element::setElementAttribute(WebCore::Element *this, const WebCore::QualifiedName *a2, WebCore::Element *a3, __n128 a4)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  WTF *v15;
  unsigned int v16;
  uint64_t result;
  void *v18;
  WTF *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  WTF *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  WTF *v28;
  WebCore::QualifiedName::QualifiedNameImpl **v29;
  uint64_t v30;
  WTF::StringImpl ***v31;
  unsigned int v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[24];
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  char v54;

  if (!a3)
  {
    if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) == 0)
      return WebCore::Element::removeAttribute(this, a2);
    v22 = (uint64_t *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 224);
    v23 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xE0);
    if (!v23)
      return WebCore::Element::removeAttribute(this, a2);
    v29 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>(v23, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v30 = *v22;
    if (v29)
    {
      v31 = (WTF::StringImpl ***)v29;
      if (!v30)
        goto LABEL_42;
      v32 = *(_DWORD *)(v30 - 4);
    }
    else
    {
      if (!v30)
        return WebCore::Element::removeAttribute(this, a2);
      v32 = *(_DWORD *)(v30 - 4);
      v31 = (WTF::StringImpl ***)(v30 + 24 * v32);
    }
    v30 += 24 * v32;
    if ((WTF::StringImpl ***)v30 != v31)
    {
LABEL_42:
      if ((WTF::StringImpl ***)v30 != v31)
        WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::remove(v22, v31);
    }
    return WebCore::Element::removeAttribute(this, a2);
  }
  WebCore::Element::setAttribute(this, a2, MEMORY[0x1E0CBF3B8], 0, &v52, a4);
  if (v54)
  {
    v8 = v53;
    v53 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  v9 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  if (!v9)
  {
    WebCore::Node::materializeRareData(this);
    v9 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  }
  v10 = (uint64_t *)(v9 + 224);
  v11 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a3);
  v12 = v11;
  if (v11)
  {
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 + 1, v11));
  }
  v14 = 1;
  v51 = 1;
  v15 = (WTF *)WTF::fastMalloc((WTF *)8);
  v50 = v15;
  if (v12)
  {
    do
      v16 = __ldaxr(v12);
    while (__stlxr(v16 + 1, v12));
    v14 = HIDWORD(v51) + 1;
  }
  *(_QWORD *)v15 = v12;
  HIDWORD(v51) = v14;
  result = (uint64_t)WTF::HashMap<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName const&,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v49, v10, (WebCore::QualifiedName::QualifiedNameImpl **)a2, (uint64_t)&v50);
  v19 = v50;
  if (HIDWORD(v51))
  {
    v24 = (WTF *)((char *)v50 + 8 * HIDWORD(v51));
    do
    {
      result = *(_QWORD *)v19;
      *(_QWORD *)v19 = 0;
      if (result)
      {
        do
        {
          v25 = __ldaxr((unsigned int *)result);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, (unsigned int *)result));
        if (!v26)
        {
          atomic_store(1u, (unsigned int *)result);
          v27 = *(unsigned int *)(result + 28);
          if ((_DWORD)v27)
          {
            v48 = result;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v27));
            result = v48;
          }
          v28 = *(WTF **)(result + 16);
          if (v28)
          {
            *(_QWORD *)(result + 16) = 0;
            *(_DWORD *)(result + 24) = 0;
            v47 = result;
            WTF::fastFree(v28, v18);
            result = v47;
          }
          result = WTF::fastFree((WTF *)result, v18);
        }
      }
      v19 = (WTF *)((char *)v19 + 8);
    }
    while (v19 != v24);
    v19 = v50;
    if (!v50)
    {
LABEL_15:
      if (v12)
        goto LABEL_16;
      goto LABEL_18;
    }
  }
  else if (!v50)
  {
    goto LABEL_15;
  }
  v50 = 0;
  LODWORD(v51) = 0;
  result = WTF::fastFree(v19, v18);
  if (v12)
  {
    do
    {
LABEL_16:
      v20 = __ldaxr(v12);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v12));
    if (!v21)
    {
      atomic_store(1u, v12);
      v33 = v12[7];
      if ((_DWORD)v33)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v12 + 2), (WTF::StringImpl *)(*((_QWORD *)v12 + 2) + 32 * v33));
      v34 = (WTF *)*((_QWORD *)v12 + 2);
      if (v34)
      {
        *((_QWORD *)v12 + 2) = 0;
        v12[6] = 0;
        WTF::fastFree(v34, v18);
      }
      result = WTF::fastFree((WTF *)v12, v18);
    }
  }
LABEL_18:
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v35 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    if (*(_BYTE *)(v35 + 3362) || *(_BYTE *)(v35 + 3405))
    {
      while (1)
      {
        v43 = *(_QWORD *)(v35 + 528);
        if (!v43)
          break;
        v44 = *(_QWORD *)(v43 + 8);
        if (!v44)
          break;
        v45 = *(_QWORD *)(v44 + 120);
        if (!v45)
          break;
        v46 = *(_QWORD *)(v45 + 8);
        if (!v46)
          break;
        v35 = *(_QWORD *)(*(_QWORD *)(v46 + 40) + 8);
      }
    }
    else
    {
      v36 = *(_QWORD *)(v35 + 528);
      if (v36)
      {
        v37 = *(_QWORD *)(v36 + 8);
        if (v37)
        {
          v38 = *(_QWORD *)(*(_QWORD *)(v37 + 128) + 8);
          if (v38 && *(_BYTE *)(v38 + 144) == 0)
          {
            v40 = *(_QWORD *)(v38 + 296);
            if (v40)
              v35 = v40;
          }
        }
      }
    }
    v41 = *(_QWORD *)(v35 + 1488);
    if (v41)
    {
      ++*(_DWORD *)(v41 + 8);
      result = (uint64_t)WebCore::AXObjectCache::updateRelations((uint64_t **)v41, this, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
      v42 = *(_DWORD *)(v41 + 8);
      if (!v42)
      {
        __break(0xC471u);
        JUMPOUT(0x1959C9EECLL);
      }
      *(_DWORD *)(v41 + 8) = v42 - 1;
    }
  }
  return result;
}

WTF::StringImpl **WebCore::Element::getElementsArrayAttribute@<X0>(WebCore::Element *this@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, uint64_t a3@<X2>, WTF::String *a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v9;
  WebCore::QualifiedName::QualifiedNameImpl **v10;
  WebCore::QualifiedName::QualifiedNameImpl **v11;
  WebCore::QualifiedName::QualifiedNameImpl **v12;
  unint64_t v13;
  uint64_t v14;
  WTF::StringImpl **result;
  WebCore::QualifiedName::QualifiedNameImpl *v16;
  WebCore::QualifiedName::QualifiedNameImpl *v17;
  const WTF::AtomString *v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  WTF *v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  WebCore::QualifiedName::QualifiedNameImpl *v26;
  WebCore::QualifiedName::QualifiedNameImpl *v27;
  uint64_t v28;
  const WebCore::Node *v29;
  const WebCore::Node *v30;
  uint64_t v31;
  WebCore::Node *v32;
  uint64_t *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF *v36;
  void *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  const WTF::AtomString *v43;
  uint64_t v44;
  const WebCore::TreeScope *v45;
  unsigned int *v46;
  WebCore::Node *v47;
  uint64_t v48;
  WebCore::Node *v49;
  uint64_t *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  WTF *v53;
  WebCore::QualifiedName::QualifiedNameImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  WebCore::Node *v57;
  WebCore::Node *v58;

  v9 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  if (!v9)
    goto LABEL_7;
  v10 = WTF::HashMap<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::find((WebCore::QualifiedName::QualifiedNameImpl ***)(v9 + 224), a2);
  v11 = v10;
  v12 = *(WebCore::QualifiedName::QualifiedNameImpl ***)(v9 + 224);
  if (v12)
    v12 += 3 * *((unsigned int *)v12 - 1);
  if (v12 == v10)
  {
LABEL_7:
    v16 = *a2;
    if (*a2)
      ++*(_DWORD *)v16;
    v54 = v16;
    if (v16 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_labelledbyAttr
      && !WebCore::Element::hasAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_labelledbyAttr, a3, a4, a6)&& WebCore::Element::hasAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_labeledbyAttr, a3, a4, a6))
    {
      v17 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_labeledbyAttr;
      if (WebCore::HTMLNames::aria_labeledbyAttr)
        ++*(_DWORD *)WebCore::HTMLNames::aria_labeledbyAttr;
      v54 = v17;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v16);
          WTF::fastFree(v36, v37);
        }
        else
        {
          --*(_DWORD *)v16;
        }
      }
    }
    if (WebCore::Element::hasAttribute(this, (const WebCore::QualifiedName *)&v54, a3, a4, a6))
    {
      v19 = *(WTF::StringImpl **)WebCore::Element::getAttribute(this, (const WebCore::QualifiedName *)&v54);
      if (v19 && *((_DWORD *)v19 + 1))
      {
        *(_DWORD *)v19 += 2;
        v55 = v19;
        WebCore::SpaceSplitStringData::create((WebCore::SpaceSplitStringData *)&v55, v18, &v53);
        v39 = v55;
        v55 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, v38);
          else
            *(_DWORD *)v39 -= 2;
        }
        v55 = 0;
        v56 = 0;
        if (!v53)
          goto LABEL_61;
        v40 = *((unsigned int *)v53 + 3);
        if (!(_DWORD)v40)
          goto LABEL_61;
        if (v40 >> 29)
        {
          __break(0xC471u);
LABEL_83:
          JUMPOUT(0x1959CA370);
        }
        v41 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v40));
        LODWORD(v56) = v40;
        v55 = v41;
        if (v53 && (v42 = *((unsigned int *)v53 + 3), (_DWORD)v42))
        {
          v43 = (WTF *)((char *)v53 + 16);
          v44 = 8 * v42;
          do
          {
            if (*(_QWORD *)v43)
            {
              if (*(_DWORD *)(*(_QWORD *)v43 + 4))
              {
                v45 = (const WebCore::TreeScope *)*((_QWORD *)this + 5);
                v46 = (unsigned int *)*((_QWORD *)v45 + 3);
                if (v46)
                {
                  WebCore::TreeScopeOrderedMap::getElementById(v46, v43, v45, (uint64_t *)&v58);
                  v47 = v58;
                  if (v58)
                  {
                    v57 = v58;
                    v58 = 0;
                    LODWORD(v48) = HIDWORD(v56);
                    if (HIDWORD(v56) == (_DWORD)v56)
                    {
                      v50 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v55, HIDWORD(v56) + 1, (unint64_t)&v57);
                      v48 = HIDWORD(v56);
                      v51 = v55;
                      v52 = *v50;
                      *v50 = 0;
                      *((_QWORD *)v51 + v48) = v52;
                    }
                    else
                    {
                      v57 = 0;
                      *((_QWORD *)v55 + HIDWORD(v56)) = v47;
                    }
                    HIDWORD(v56) = v48 + 1;
                    v49 = v57;
                    v57 = 0;
                    if (v49)
                    {
                      if (*((_DWORD *)v49 + 6) == 2)
                      {
                        if ((*((_WORD *)v49 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v49);
                      }
                      else
                      {
                        *((_DWORD *)v49 + 6) -= 2;
                      }
                    }
                  }
                }
              }
            }
            v43 = (const WTF::AtomString *)((char *)v43 + 8);
            v44 -= 8;
          }
          while (v44);
          v20 = HIDWORD(v56);
        }
        else
        {
LABEL_61:
          v20 = 0;
        }
      }
      else
      {
        v20 = 0;
        v53 = 0;
        v55 = 0;
        v56 = 0;
      }
      WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v55, v20);
      *(_QWORD *)a5 = v55;
      *(_QWORD *)(a5 + 8) = v56;
      *(_BYTE *)(a5 + 16) = 1;
      v22 = v53;
      v53 = 0;
      if (v22)
      {
        if (*((_DWORD *)v22 + 2) == 1)
          WebCore::SpaceSplitStringData::destroy(v22, v21);
        else
          --*((_DWORD *)v22 + 2);
      }
    }
    else
    {
      *(_BYTE *)a5 = 0;
      *(_BYTE *)(a5 + 16) = 0;
    }
    result = (WTF::StringImpl **)v54;
    v54 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v23, v24);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
    return result;
  }
  v13 = 0;
  v55 = 0;
  v56 = 0;
  v14 = *((unsigned int *)v10 + 5);
  if (!(_DWORD)v14)
    goto LABEL_6;
  if (v14 >> 29)
  {
    __break(0xC471u);
    goto LABEL_83;
  }
  LODWORD(v56) = *((_DWORD *)v10 + 5);
  v55 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v14));
  v25 = *((unsigned int *)v11 + 5);
  if ((_DWORD)v25)
  {
    v26 = v11[1];
    v27 = (WebCore::QualifiedName::QualifiedNameImpl *)((char *)v26 + 8 * v25);
    while (1)
    {
      if (!*(_QWORD *)v26)
        goto LABEL_45;
      v28 = *(_QWORD *)(*(_QWORD *)v26 + 8);
      if (!v28)
        goto LABEL_45;
      *(_DWORD *)(v28 + 24) += 2;
      v29 = (const WebCore::Node *)v28;
      if ((*(_BYTE *)(v28 + 22) & 0x18) != 0)
      {
        v30 = **(const WebCore::Node ***)(v28 + 40);
      }
      else
      {
        do
        {
          v30 = v29;
          v29 = (const WebCore::Node *)*((_QWORD *)v29 + 4);
        }
        while (v29);
      }
      if (WebCore::Node::isDescendantOrShadowDescendantOf((const WebCore::Node ***)this, v30))
      {
        v58 = (WebCore::Node *)v28;
        LODWORD(v31) = HIDWORD(v56);
        if (HIDWORD(v56) == (_DWORD)v56)
        {
          v33 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v55, HIDWORD(v56) + 1, (unint64_t)&v58);
          v31 = HIDWORD(v56);
          v34 = v55;
          v35 = *v33;
          *v33 = 0;
          *((_QWORD *)v34 + v31) = v35;
        }
        else
        {
          v58 = 0;
          *((_QWORD *)v55 + HIDWORD(v56)) = v28;
        }
        HIDWORD(v56) = v31 + 1;
        v32 = v58;
        v58 = 0;
        if (!v32)
          goto LABEL_45;
        if (*((_DWORD *)v32 + 6) == 2)
        {
          if ((*((_WORD *)v32 + 15) & 0x400) == 0)
            goto LABEL_51;
        }
        else
        {
          *((_DWORD *)v32 + 6) -= 2;
        }
      }
      else if (*(_DWORD *)(v28 + 24) == 2)
      {
        if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
        {
          v32 = (WebCore::Node *)v28;
LABEL_51:
          WebCore::Node::removedLastRef(v32);
        }
      }
      else
      {
        *(_DWORD *)(v28 + 24) -= 2;
      }
LABEL_45:
      v26 = (WebCore::QualifiedName::QualifiedNameImpl *)((char *)v26 + 8);
      if (v26 == v27)
      {
        v13 = HIDWORD(v56);
        goto LABEL_6;
      }
    }
  }
  v13 = 0;
LABEL_6:
  result = (WTF::StringImpl **)WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v55, v13);
  *(_QWORD *)a5 = v55;
  *(_QWORD *)(a5 + 8) = v56;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

uint64_t WebCore::Element::setElementsArrayAttribute(WebCore::Element *this, WebCore::QualifiedName *a2, uint64_t a3, __n128 a4)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t result;
  void *v21;
  WTF *v22;
  WTF *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  WebCore::QualifiedName::QualifiedNameImpl **v30;
  WTF::StringImpl ***v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  char v54;

  if (!*(_BYTE *)(a3 + 16))
  {
    if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) == 0)
      return WebCore::Element::removeAttribute(this, a2);
    v6 = (*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 224;
    v29 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xE0);
    if (!v29)
      return WebCore::Element::removeAttribute(this, a2);
    v30 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>(v29, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v9 = *(_QWORD *)v6;
    if (v30)
    {
      v31 = (WTF::StringImpl ***)v30;
      if (!v9)
        goto LABEL_41;
      v32 = *(_DWORD *)(v9 - 4);
      goto LABEL_40;
    }
LABEL_44:
    if (!v9)
      return WebCore::Element::removeAttribute(this, a2);
    v32 = *(_DWORD *)(v9 - 4);
    v31 = (WTF::StringImpl ***)(v9 + 24 * v32);
LABEL_40:
    v9 += 24 * v32;
    if ((WTF::StringImpl ***)v9 != v31)
    {
LABEL_41:
      if ((WTF::StringImpl ***)v9 != v31)
        WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::remove((uint64_t *)v6, v31);
    }
    return WebCore::Element::removeAttribute(this, a2);
  }
  v6 = a3;
  WebCore::Element::setAttribute(this, a2, MEMORY[0x1E0CBF3B8], 0, &v52, a4);
  if (v54)
  {
    v8 = v53;
    v53 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  v9 = *(unsigned __int8 *)(v6 + 16);
  if (!*(_BYTE *)(v6 + 16))
  {
    __break(1u);
    goto LABEL_44;
  }
  v50 = 0;
  v51 = 0;
  v10 = *(unsigned int *)(v6 + 12);
  if ((_DWORD)v10)
  {
    if (v10 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1959CA6ECLL);
    }
    v11 = (WTF *)WTF::fastMalloc((WTF *)(8 * v10));
    LODWORD(v51) = v10;
    v50 = v11;
    v12 = *(unsigned int *)(v6 + 12);
    if ((_DWORD)v12)
    {
      v13 = v11;
      v14 = 0;
      v15 = *(uint64_t **)v6;
      v16 = *(_QWORD *)v6 + 8 * v12;
      do
      {
        v17 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(*v15);
        if (v17)
        {
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
          v14 = HIDWORD(v51);
          v13 = v50;
        }
        *((_QWORD *)v13 + v14++) = v17;
        HIDWORD(v51) = v14;
        ++v15;
      }
      while (v15 != (uint64_t *)v16);
    }
  }
  v19 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  if (!v19)
  {
    WebCore::Node::materializeRareData(this);
    v19 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  }
  result = (uint64_t)WTF::HashMap<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName const&,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v49, (uint64_t *)(v19 + 224), (WebCore::QualifiedName::QualifiedNameImpl **)a2, (uint64_t)&v50);
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v33 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    if (*(_BYTE *)(v33 + 3362) || *(_BYTE *)(v33 + 3405))
    {
      while (1)
      {
        v45 = *(_QWORD *)(v33 + 528);
        if (!v45)
          break;
        v46 = *(_QWORD *)(v45 + 8);
        if (!v46)
          break;
        v47 = *(_QWORD *)(v46 + 120);
        if (!v47)
          break;
        v48 = *(_QWORD *)(v47 + 8);
        if (!v48)
          break;
        v33 = *(_QWORD *)(*(_QWORD *)(v48 + 40) + 8);
      }
    }
    else
    {
      v34 = *(_QWORD *)(v33 + 528);
      if (v34)
      {
        v35 = *(_QWORD *)(v34 + 8);
        if (v35)
        {
          v36 = *(_QWORD *)(*(_QWORD *)(v35 + 128) + 8);
          if (v36 && *(_BYTE *)(v36 + 144) == 0)
          {
            v38 = *(_QWORD *)(v36 + 296);
            if (v38)
              goto LABEL_77;
          }
        }
      }
    }
    while (1)
    {
      v39 = *(_QWORD *)(v33 + 1488);
      if (!v39)
        break;
      v40 = *(_DWORD *)(v39 + 8) + 1;
      *(_DWORD *)(v39 + 8) = v40;
      if (*(_BYTE *)(v6 + 16))
      {
        v41 = *(unsigned int *)(v6 + 12);
        if ((_DWORD)v41)
        {
          v42 = *(_QWORD *)v6;
          v43 = 8 * v41;
          do
          {
            v44 = *(_QWORD *)v42;
            *(_DWORD *)(*(_QWORD *)v42 + 24) += 2;
            result = (uint64_t)WebCore::AXObjectCache::updateRelations((uint64_t **)v39, this, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
            if (*(_DWORD *)(v44 + 24) == 2)
            {
              if ((*(_WORD *)(v44 + 30) & 0x400) == 0)
                result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v44, v21);
            }
            else
            {
              *(_DWORD *)(v44 + 24) -= 2;
            }
            v42 += 8;
            v43 -= 8;
          }
          while (v43);
          v40 = *(_DWORD *)(v39 + 8);
        }
        if (!v40)
        {
          __break(0xC471u);
          JUMPOUT(0x1959CA738);
        }
        *(_DWORD *)(v39 + 8) = v40 - 1;
        break;
      }
      result = std::__throw_bad_optional_access[abi:sn180100]();
LABEL_77:
      v33 = v38;
    }
  }
  v22 = v50;
  if (HIDWORD(v51))
  {
    v23 = (WTF *)((char *)v50 + 8 * HIDWORD(v51));
    do
    {
      v24 = *(_QWORD *)v22;
      *(_QWORD *)v22 = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr((unsigned int *)v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, (unsigned int *)v24));
        if (!v26)
        {
          atomic_store(1u, (unsigned int *)v24);
          v27 = *(unsigned int *)(v24 + 28);
          if ((_DWORD)v27)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v24 + 16), (WTF::StringImpl *)(*(_QWORD *)(v24 + 16) + 32 * v27));
          v28 = *(WTF **)(v24 + 16);
          if (v28)
          {
            *(_QWORD *)(v24 + 16) = 0;
            *(_DWORD *)(v24 + 24) = 0;
            WTF::fastFree(v28, v21);
          }
          result = WTF::fastFree((WTF *)v24, v21);
        }
      }
      v22 = (WTF *)((char *)v22 + 8);
    }
    while (v22 != v23);
    v22 = v50;
  }
  if (v22)
    return WTF::fastFree(v22, v21);
  return result;
}

uint64_t WebCore::Element::ensureUniqueElementData(WebCore::Element *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WebCore::ElementData *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  unsigned int *v20;
  WTF::StringImpl *v21;
  WTF *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  WTF::StringImpl **v26;
  WTF::StringImpl *v27;
  WTF::StringImpl **v28;
  WTF *v29;
  void *v30;
  WTF::StringImpl *v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD **v35;
  _DWORD *v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD **v43;
  _DWORD *v44;
  WTF *v45;
  uint64_t v47;
  WTF *v48;
  WebCore::ElementData *v49;

  v1 = (uint64_t *)((char *)this + 104);
  v2 = *((_QWORD *)this + 13);
  if (!v2)
  {
    v4 = WTF::fastMalloc((WTF *)0x78);
    *(_QWORD *)v4 = 0x100000001;
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_QWORD *)(v4 + 40) = v4 + 56;
    *(_QWORD *)(v4 + 48) = 4;
    v6 = *v1;
    *v1 = v4;
    if (!v6)
      return *v1;
    if (*(_DWORD *)v6 != 1)
    {
      --*(_DWORD *)v6;
      return *v1;
    }
    v10 = *(unsigned int *)(v6 + 4);
    if ((v10 & 1) != 0)
    {
      v11 = *(unsigned int *)(v6 + 52);
      if ((_DWORD)v11)
      {
        v12 = 16 * v11;
        v13 = (WTF::StringImpl **)(*(_QWORD *)(v6 + 40) + 8);
        do
        {
          v14 = *v13;
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v5);
            else
              *(_DWORD *)v14 -= 2;
          }
          v15 = (WTF::StringImpl **)*(v13 - 1);
          *(v13 - 1) = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v15);
              WTF::fastFree(v16, v17);
            }
            else
            {
              --*(_DWORD *)v15;
            }
          }
          v13 += 2;
          v12 -= 16;
        }
        while (v12);
      }
      v18 = *(WTF **)(v6 + 40);
      if ((WTF *)(v6 + 56) != v18 && v18 != 0)
      {
        *(_QWORD *)(v6 + 40) = 0;
        *(_DWORD *)(v6 + 48) = 0;
        WTF::fastFree(v18, v5);
      }
      v20 = *(unsigned int **)(v6 + 32);
      *(_QWORD *)(v6 + 32) = 0;
      if (v20)
      {
        if (*v20 == 1)
        {
          v37 = v20[1];
          if (v37 >= 0x10)
          {
            v38 = 0;
            v39 = (unsigned int *)((char *)v20 + ((v37 >> 3) & 0x1FFFFFFE) + 8);
            do
            {
              v40 = (_DWORD *)(*v39 | ((unint64_t)*((unsigned __int8 *)v39 + 4) << 32));
              if (*v40 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v40, v5);
              else
                *v40 -= 2;
              ++v38;
              v39 = (unsigned int *)((char *)v39 + 5);
            }
            while (v38 < (unint64_t)v20[1] >> 4);
          }
          WTF::fastFree((WTF *)v20, v5);
        }
        else
        {
          --*v20;
        }
      }
      v21 = *(WTF::StringImpl **)(v6 + 24);
      *(_QWORD *)(v6 + 24) = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v5);
        else
          *(_DWORD *)v21 -= 2;
      }
      v22 = *(WTF **)(v6 + 16);
      *(_QWORD *)(v6 + 16) = 0;
      if (v22)
      {
        if (*((_DWORD *)v22 + 2) == 1)
          WebCore::SpaceSplitStringData::destroy(v22, v5);
        else
          --*((_DWORD *)v22 + 2);
      }
      v23 = *(_QWORD *)(v6 + 8);
      *(_QWORD *)(v6 + 8) = 0;
      if (!v23)
        goto LABEL_39;
      v24 = *(_DWORD *)v23 - 1;
      if (*(_DWORD *)v23 != 1)
        goto LABEL_38;
      if ((*(_BYTE *)(v23 + 4) & 8) != 0)
      {
        v41 = *(unsigned int *)(v23 + 28);
        if ((_DWORD)v41)
        {
          v42 = 16 * v41;
          v43 = (_DWORD **)(*(_QWORD *)(v23 + 16) + 8);
          do
          {
            v44 = *v43;
            *v43 = 0;
            if (v44)
            {
              if (*v44 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v44, v5);
              else
                *v44 -= 2;
            }
            v43 += 2;
            v42 -= 16;
          }
          while (v42);
        }
LABEL_85:
        v45 = *(WTF **)(v23 + 16);
        if ((WTF *)(v23 + 32) != v45 && v45 != 0)
        {
          *(_QWORD *)(v23 + 16) = 0;
          *(_DWORD *)(v23 + 24) = 0;
          WTF::fastFree(v45, v5);
        }
        v47 = *(_QWORD *)(v23 + 8);
        *(_QWORD *)(v23 + 8) = 0;
        if (v47)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
        v48 = (WTF *)v23;
        goto LABEL_93;
      }
    }
    else
    {
      if (v10 >= 0x20)
      {
        v25 = v10 >> 5;
        v26 = (WTF::StringImpl **)(v6 + 40);
        do
        {
          v27 = *v26;
          *v26 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v5);
            else
              *(_DWORD *)v27 -= 2;
          }
          v28 = (WTF::StringImpl **)*(v26 - 1);
          *(v26 - 1) = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
              WTF::fastFree(v29, v30);
            }
            else
            {
              --*(_DWORD *)v28;
            }
          }
          v26 += 2;
          --v25;
        }
        while (v25);
      }
      v31 = *(WTF::StringImpl **)(v6 + 24);
      *(_QWORD *)(v6 + 24) = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v5);
        else
          *(_DWORD *)v31 -= 2;
      }
      v32 = *(WTF **)(v6 + 16);
      *(_QWORD *)(v6 + 16) = 0;
      if (v32)
      {
        if (*((_DWORD *)v32 + 2) == 1)
          WebCore::SpaceSplitStringData::destroy(v32, v5);
        else
          --*((_DWORD *)v32 + 2);
      }
      v23 = *(_QWORD *)(v6 + 8);
      *(_QWORD *)(v6 + 8) = 0;
      if (!v23)
        goto LABEL_39;
      v24 = *(_DWORD *)v23 - 1;
      if (*(_DWORD *)v23 != 1)
      {
LABEL_38:
        *(_DWORD *)v23 = v24;
LABEL_39:
        WTF::fastFree((WTF *)v6, v5);
        return *v1;
      }
      if ((*(_BYTE *)(v23 + 4) & 8) != 0)
      {
        v33 = *(unsigned int *)(v23 + 28);
        if ((_DWORD)v33)
        {
          v34 = 16 * v33;
          v35 = (_DWORD **)(*(_QWORD *)(v23 + 16) + 8);
          do
          {
            v36 = *v35;
            *v35 = 0;
            if (v36)
            {
              if (*v36 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v36, v5);
              else
                *v36 -= 2;
            }
            v35 += 2;
            v34 -= 16;
          }
          while (v34);
        }
        goto LABEL_85;
      }
    }
    WebCore::ImmutableStyleProperties::~ImmutableStyleProperties((WebCore::ImmutableStyleProperties *)v23, v5);
LABEL_93:
    WTF::fastFree(v48, v5);
    goto LABEL_39;
  }
  if ((*(_BYTE *)(v2 + 4) & 1) == 0)
  {
    v7 = WTF::fastMalloc((WTF *)0x78);
    v49 = (WebCore::ElementData *)WebCore::UniqueElementData::UniqueElementData(v7, v2);
    WTF::RefPtr<WebCore::ElementData,WTF::RawPtrTraits<WebCore::ElementData>,WTF::DefaultRefDerefTraits<WebCore::ElementData>>::operator=<WebCore::UniqueElementData>(v1, (WTF::StringImpl *)&v49);
    v9 = v49;
    v49 = 0;
    if (v9)
      WebCore::ElementData::deref((uint64_t)v9, v8);
  }
  return *v1;
}

uint64_t WebCore::Element::partNames@<X0>(uint64_t this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    v2 = *(_QWORD *)((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) + 0xD0);
    if (v2)
      ++*(_DWORD *)(v2 + 8);
  }
  *a2 = v2;
  return this;
}

uint64_t WebCore::Element::absoluteLinkURL@<X0>(WebCore::Element *this@<X0>, uint64_t a2@<X2>, WTF::String *a3@<X3>, WTF::URL *a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t result;
  uint64_t *v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  if ((*((_WORD *)this + 15) & 1) == 0)
  {
    *(_QWORD *)a4 = 0;
    return WTF::URL::invalidate(a4);
  }
  if ((*((_WORD *)this + 14) & 0x20) == 0
    || *(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::SVGNames::aTag + 24))
  {
    v8 = &WebCore::HTMLNames::hrefAttr;
    goto LABEL_6;
  }
  v9 = *(WTF::StringImpl **)WebCore::Element::getAttribute(this, (const WebCore::QualifiedName *)&WebCore::SVGNames::hrefAttr, a2, a3, a5);
  if (!v9)
  {
    v8 = &WebCore::XLinkNames::hrefAttr;
LABEL_6:
    v9 = *(WTF::StringImpl **)WebCore::Element::getAttribute(this, (const WebCore::QualifiedName *)v8, a2, a3, a5);
    if (!v9)
      goto LABEL_11;
  }
  v10 = *((_DWORD *)v9 + 1);
  *(_DWORD *)v9 += 2;
  v12 = v9;
  if (v10)
  {
    result = (uint64_t)WebCore::Document::completeURL(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8), &v12, *(_QWORD *)(*((_QWORD *)this + 5) + 8) + 848, 0, a4);
    v9 = v12;
    goto LABEL_12;
  }
LABEL_11:
  *(_QWORD *)a4 = 0;
  result = WTF::URL::invalidate(a4);
LABEL_12:
  v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      return WTF::StringImpl::destroy(v9, v11);
    else
      *(_DWORD *)v9 -= 2;
  }
  return result;
}

uint64_t WebCore::Element::allowsDoubleTapGesture(WebCore::Element *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (!v1)
    goto LABEL_5;
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    v1 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 88) + 40) + 460) != 1)
    return 0;
LABEL_5:
  v2 = *((_QWORD *)this + 4);
  if (!v2 || (*(_WORD *)(v2 + 28) & 8) == 0)
    return 1;
  *(_DWORD *)(v2 + 24) += 2;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 336))(v2);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v3;
}

uint64_t WebCore::Element::styleResolver(WebCore::Element *this)
{
  _QWORD *v1;
  BOOL v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (_QWORD *)*((_QWORD *)this + 5);
  if (*v1)
    v2 = (*(_WORD *)(*v1 + 28) & 0x80) == 0;
  else
    v2 = 1;
  if (v2)
    v5 = v1[1] + 1328;
  else
    v5 = *v1 + 216;
  v3 = *(_QWORD *)v5;
  if (!*(_QWORD *)(*(_QWORD *)v5 + 32))
  {
    if (*(_QWORD *)(v3 + 24))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v3);
    else
      WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v3);
    v6 = *(_QWORD *)(v3 + 32);
    if (*(_DWORD *)(v6 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
    {
      v7 = *(_QWORD *)(v3 + 32);
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v6 + 32));
      v6 = v7;
    }
    if (*(_BYTE *)(v6 + 242)
      || *(_BYTE *)(v6 + 243)
      || *(_BYTE *)(v6 + 244)
      || *(_BYTE *)(v6 + 245)
      || *(_BYTE *)(v6 + 246)
      || *(_BYTE *)(v6 + 247)
      || *(_BYTE *)(v6 + 248))
    {
      *(_BYTE *)(v3 + 236) = 1;
    }
  }
  return *(_QWORD *)(v3 + 32);
}

void WebCore::Element::resolveStyle(uint64_t a1@<X0>, uint64_t a2@<X1>, WebCore::Node **a3@<X8>)
{
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD **)(a1 + 40);
  if (*v6)
    v7 = (*(_WORD *)(*v6 + 28) & 0x80) == 0;
  else
    v7 = 1;
  if (v7)
    v9 = v6[1] + 1328;
  else
    v9 = *v6 + 216;
  v8 = *(_QWORD *)v9;
  if (!*(_QWORD *)(*(_QWORD *)v9 + 32))
  {
    if (*(_QWORD *)(v8 + 24))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v8);
    else
      WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v8);
    v11 = *(_QWORD *)(v8 + 32);
    if (*(_DWORD *)(v11 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
    {
      v12 = *(_QWORD *)(v8 + 32);
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v11 + 32), v10);
      v11 = v12;
    }
    if (*(_BYTE *)(v11 + 242)
      || *(_BYTE *)(v11 + 243)
      || *(_BYTE *)(v11 + 244)
      || *(_BYTE *)(v11 + 245)
      || *(_BYTE *)(v11 + 246)
      || *(_BYTE *)(v11 + 247)
      || *(_BYTE *)(v11 + 248))
    {
      *(_BYTE *)(v8 + 236) = 1;
    }
  }
  WebCore::Style::Resolver::styleForElement(*(_QWORD *)(v8 + 32), a1, a2, 0, a3);
}

WebCore::Node *WebCore::invalidateForSiblingCombinators(WebCore::Node *this, WebCore::Element *a2)
{
  WebCore::Node *v2;
  WebCore::Node *v3;
  uint64_t v4;
  WebCore::Node *ElementChild;
  uint64_t ElementSibling;
  WebCore::Node *v7;
  WebCore::Node *v8;
  WebCore::Node *v9[3];

  if (this)
  {
    v9[1] = v2;
    v9[2] = v3;
    do
    {
      v4 = *((_QWORD *)this + 8);
      if ((v4 & 0x200000000000000) != 0)
      {
        v7 = this;
        WebCore::Node::invalidateStyle((uint64_t)this, 3u, 0);
        this = v7;
        v4 = *((_QWORD *)v7 + 8);
      }
      if ((v4 & 0x400000000000000) != 0)
      {
        v8 = this;
        ElementChild = (WebCore::Node *)WebCore::ContainerNode::firstElementChild(this);
        if (ElementChild)
        {
          *((_DWORD *)ElementChild + 6) += 2;
          v9[0] = ElementChild;
          do
          {
            WebCore::Node::invalidateStyle((uint64_t)ElementChild, 4u, 0);
            ElementSibling = WebCore::Node::nextElementSibling((uint64_t)v9[0]);
            WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)v9, ElementSibling);
            ElementChild = v9[0];
          }
          while (v9[0]);
        }
        this = v8;
        v4 = *((_QWORD *)v8 + 8);
      }
      if ((v4 & 0x100000000000000) == 0)
        break;
      this = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)this);
    }
    while (this);
  }
  return this;
}

WTF::MonotonicTime *WebCore::Element::invalidateStyleForSubtreeInternal(WTF::MonotonicTime *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  WTF::MonotonicTime *v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if ((*((_BYTE *)this + 22) & 8) == 0)
    return this;
  v1 = (uint64_t)this;
  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (!*(_QWORD *)(v2 + 1944))
    return this;
  if (*(_BYTE *)(v2 + 3405))
    return this;
  if (*(_BYTE *)(v2 + 3392))
    return this;
  *((_WORD *)this + 15) |= 0x10u;
  v3 = *((_QWORD *)this + 8);
  v4 = HIWORD(v3) & 7;
  if (v4 > 3)
    return this;
  *((_QWORD *)this + 8) = v3 & 0xFFF8FFFFFFFFFFFFLL | 0x4000000000000;
  if ((_DWORD)v4)
    return this;
  *((_DWORD *)this + 6) += 2;
  v5 = *((unsigned __int16 *)this + 14);
  if ((v5 & 0x80) != 0)
  {
    v13 = *((_QWORD *)this + 25);
    if (!v13)
      goto LABEL_39;
LABEL_32:
    v6 = *(WTF::MonotonicTime **)(v13 + 8);
    goto LABEL_33;
  }
  if ((~v5 & 0x408) == 0)
  {
    this = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)this + 368))(this);
    if ((_DWORD)this)
    {
      v13 = *(_QWORD *)(v1 + 112);
      if (!v13)
        goto LABEL_39;
      goto LABEL_32;
    }
  }
  v6 = *(WTF::MonotonicTime **)(v1 + 32);
  if (!v6)
    goto LABEL_39;
  v7 = *((_WORD *)v6 + 14);
  if ((v7 & 0x80) != 0)
  {
    v13 = *((_QWORD *)v6 + 25);
    if (!v13)
      goto LABEL_39;
    goto LABEL_32;
  }
  if ((v7 & 8) == 0)
    goto LABEL_39;
  if ((*((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL) == 0
    || (v11 = *(_QWORD *)((*((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL) + 0x58)) == 0)
  {
LABEL_14:
    *((_QWORD *)v6 + 8) |= 0x10000000000000uLL;
    do
    {
      if ((*((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v10 = *(_QWORD *)((*((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
        if (v10)
          *(_QWORD *)(v10 + 64) |= 0x8000000000000uLL;
      }
      v8 = *((_QWORD *)v6 + 8);
      if ((v8 & 0x8000000000000) != 0)
        break;
      *((_QWORD *)v6 + 8) = v8 | 0x8000000000000;
      this = (WTF::MonotonicTime *)*((_QWORD *)v6 + 4);
      if (!this)
        break;
      v9 = *((_WORD *)this + 14);
      if ((v9 & 0x80) != 0)
      {
        v14 = *((_QWORD *)this + 25);
        if (!v14)
          break;
        this = *(WTF::MonotonicTime **)(v14 + 8);
      }
      else
      {
        if ((v9 & 8) == 0)
          break;
        if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
        {
          v12 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
          if (v12)
          {
            this = *(WTF::MonotonicTime **)(v12 + 224);
            if (!this)
              break;
            this = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)this + 16))(this);
          }
        }
      }
      v6 = this;
    }
    while (this);
    if (!v1)
      goto LABEL_41;
    goto LABEL_39;
  }
  this = *(WTF::MonotonicTime **)(v11 + 224);
  if (!this)
    goto LABEL_39;
  this = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *, uint64_t))(*(_QWORD *)this + 16))(this, v1);
  v6 = this;
LABEL_33:
  if (v6)
    goto LABEL_14;
LABEL_39:
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    v22 = *(_WORD *)(v1 + 30);
    if ((v22 & 0x400) == 0)
    {
      v23 = *(_WORD *)(v1 + 28);
      if ((v23 & 0xF000) == 0x9000)
      {
        this = (WTF::MonotonicTime *)WebCore::Document::removedLastRef((WebCore::Document *)v1);
      }
      else
      {
        if ((v23 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 160) + 16))(*(_QWORD *)(v1 + 160));
          v22 = *(_WORD *)(v1 + 30);
        }
        *(_WORD *)(v1 + 30) = v22 | 0x400;
        this = (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1);
      }
    }
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
LABEL_41:
  v15 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8);
  v16 = *(_QWORD *)(v15 + 1272);
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 64);
    if ((v17 & 0x8000000000000) != 0 || (v17 & 0x7000000000000) != 0 || (*(_WORD *)(v16 + 30) & 0x20) != 0)
    {
      *(_DWORD *)(v15 + 24) += 2;
      *(_QWORD *)(v15 + 64) |= 0x8000000000000uLL;
      if (((*(_QWORD *)(v15 + 1536) & 0xFFFFFFFFFFFFLL) == 0
         || *(double *)((*(_QWORD *)(v15 + 1536) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
        && !*(_BYTE *)(v15 + 3362))
      {
        *(_QWORD *)(v15 + 1528) = 0;
        WTF::MonotonicTime::now(this);
        this = (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime(v15 + 1504, v18 + 0.0);
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v24 = *(_QWORD *)(v15 + 528);
          if (v24)
          {
            v25 = *(_QWORD *)(v24 + 8);
            if (v25)
            {
              v26 = *(_QWORD *)(v25 + 24);
              if (v26)
              {
                v27 = *(_QWORD *)(v26 + 8);
                if (v27)
                  goto LABEL_66;
              }
            }
          }
          v28 = *(_QWORD *)(v15 + 2632);
          if (v28)
          {
            v29 = *(_QWORD *)(v28 + 8);
            if (v29)
            {
              v30 = *(_QWORD *)(v29 + 528);
              if (v30)
              {
                v31 = *(_QWORD *)(v30 + 8);
                if (v31)
                {
                  v32 = *(_QWORD *)(v31 + 24);
                  if (v32)
                  {
                    v27 = *(_QWORD *)(v32 + 8);
                    if (v27)
                    {
LABEL_66:
                      this = *(WTF::MonotonicTime **)(*(_QWORD *)(v27 + 80) + 8);
                      if (this)
                        this = WebCore::InspectorInstrumentation::didScheduleStyleRecalculationImpl(this, (WebCore::Document *)v15);
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        v20 = *(_WORD *)(v15 + 30);
        if ((v20 & 0x400) == 0)
        {
          v21 = *(_WORD *)(v15 + 28);
          if ((v21 & 0xF000) == 0x9000)
          {
            return (WTF::MonotonicTime *)WebCore::Document::removedLastRef((WebCore::Document *)v15);
          }
          else
          {
            if ((v21 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v15 + 160) + 16))(*(_QWORD *)(v15 + 160));
              v20 = *(_WORD *)(v15 + 30);
            }
            *(_WORD *)(v15 + 30) = v20 | 0x400;
            return (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
          }
        }
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
    }
  }
  return this;
}

WebCore::Node *WebCore::Element::invalidateStyleAndLayerComposition(WebCore::Element *this)
{
  WebCore::Node *result;
  uint64_t v3;
  WebCore::Node *ElementSibling;
  WebCore::Element *v5;

  result = (WebCore::Node *)WebCore::Node::invalidateStyle((uint64_t)this, 3u, 1);
  if ((*((_BYTE *)this + 71) & 1) != 0)
  {
    v3 = *((_QWORD *)this + 4);
    if (!v3 || (*(_WORD *)(v3 + 28) & 8) == 0 || (*(_BYTE *)(v3 + 70) & 4) == 0)
    {
      ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)this);
      return WebCore::invalidateForSiblingCombinators(ElementSibling, v5);
    }
  }
  return result;
}

uint64_t WebCore::Element::invalidateRenderer(WebCore::Element *this)
{
  return WebCore::Node::invalidateStyle((uint64_t)this, 0, 2);
}

uint64_t WebCore::Element::invalidateForQueryContainerSizeChange(WebCore::Element *this)
{
  uint64_t result;

  result = WebCore::Node::invalidateStyle((uint64_t)this, 4u, 0);
  *((_QWORD *)this + 6) |= 0x10000000000000uLL;
  return result;
}

_QWORD *WebCore::Element::invalidateForResumingAnchorPositionedElementResolution(WebCore::Element *this)
{
  WebCore::Node::invalidateStyle((uint64_t)this, 3u, 0);
  return WebCore::Node::markAncestorsForInvalidatedStyle(this);
}

BOOL WebCore::Element::hasDisplayContents(WebCore::Element *this)
{
  uint64_t v2;

  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  v2 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x38);
  return v2 && (*(_QWORD *)(v2 + 16) & 0x1FLL) == 18;
}

double WebCore::Element::storeDisplayContentsOrNoneStyle(WebCore::Node *a1, uint64_t *a2)
{
  uint64_t v3;
  double result;
  uint64_t v6;
  WebCore::RenderStyle *v7;
  WTF *v8;
  void *v9;

  v3 = *((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL;
  if (!v3)
  {
    WebCore::Node::materializeRareData(a1);
    v3 = *((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL;
  }
  v6 = *a2;
  *a2 = 0;
  v7 = *(WebCore::RenderStyle **)(v3 + 56);
  *(_QWORD *)(v3 + 56) = v6;
  if (v7)
  {
    WebCore::RenderStyle::~RenderStyle(v7, a2);
    if (*(_DWORD *)v8)
    {
      result = 0.0;
      *((_OWORD *)v8 + 2) = 0u;
      *((_OWORD *)v8 + 3) = 0u;
      *(_OWORD *)v8 = 0u;
      *((_OWORD *)v8 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v8, v9);
    }
  }
  return result;
}

uint64_t WebCore::Element::attributeContainsJavaScriptURL(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 600))(a1);
  if ((_DWORD)result)
    return WTF::protocolIsJavaScript();
  return result;
}

uint64_t *WebCore::Element::didMoveToNewDocument(WebCore::Element *this, WebCore::Document *a2, WebCore::Document *a3, WTF::String *a4)
{
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  WTF::String *v10;
  __n128 v11;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t *IdAttribute;
  WTF::StringImpl **Attribute;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((*((_BYTE *)a2 + 3384) == 2) != (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3384) == 2))
  {
    WebCore::Element::ensureUniqueElementData(this);
    v15 = *((_QWORD *)this + 13);
    if (v15)
    {
      if (!*(_QWORD *)(v15 + 24)
        || (IdAttribute = WebCore::Element::getIdAttribute(this),
            WebCore::Element::notifyAttributeChanged(this, (WTF::StringImpl ***)&WebCore::HTMLNames::idAttr, MEMORY[0x1E0CBF2F8], (WTF::StringImpl **)IdAttribute), (v15 = *((_QWORD *)this + 13)) != 0))
      {
        if (*(_QWORD *)(v15 + 16))
        {
          Attribute = (WTF::StringImpl **)WebCore::Element::getAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::classAttr, v13, a4, v14);
          WebCore::Element::notifyAttributeChanged(this, (WTF::StringImpl ***)&WebCore::HTMLNames::classAttr, MEMORY[0x1E0CBF2F8], Attribute);
        }
      }
    }
  }
  if ((*((_QWORD *)this + 9) & 0x3000000000000000) == 0x2000000000000000)
    WebCore::CustomElementReactionQueue::enqueueAdoptedCallbackIfNeeded(this, a2, a3, a4);
  v7 = (*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)this + 1088))(this);
  if (v7)
  {
    v18 = *(unsigned int *)(v7 + 12);
    if ((_DWORD)v18)
    {
      v19 = *(_QWORD *)v7;
      v20 = 8 * v18;
      do
      {
        if (*(_QWORD *)v19)
        {
          v8 = *(_DWORD **)(*(_QWORD *)v19 + 8);
          if (v8[25])
          {
            WebCore::Document::removeIntersectionObserver((uint64_t)a2, v8);
            WebCore::Document::addIntersectionObserver(a3, *(WebCore::IntersectionObserver **)(*(_QWORD *)v19 + 8));
          }
        }
        v19 += 8;
        v20 -= 8;
      }
      while (v20);
    }
  }
  if ((*((_BYTE *)this + 23) & 6) != 0 && (*((_WORD *)this + 15) & 8) != 0)
  {
    WebCore::Document::removeElementWithLangAttrMatchingDocumentElement(a2, this);
    *((_WORD *)this + 15) &= ~8u;
  }
  return WebCore::Element::updateEffectiveLangState(this, v8, v9, v10, v11);
}

WTF::StringImpl *WebCore::ElementRareData::setEffectiveLang(WebCore::ElementRareData *this, const WTF::AtomString *a2)
{
  _DWORD *v3;
  WTF::StringImpl *result;

  v3 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v3 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

BOOL WebCore::Element::hasEquivalentAttributes(WebCore::Element *this, const WebCore::Element *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v7;
  uint64_t v8;
  WebCore::ElementData *v9;
  WebCore::ElementData *v10;
  unsigned int v12;
  unsigned int v13;

  v7 = *((_QWORD *)this + 13);
  if (v7)
  {
    if ((*(_BYTE *)(v7 + 4) & 8) != 0)
      WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(this, (unsigned __int8 *)a2, a5, a3, a4);
    if ((*((_WORD *)this + 14) & 0x20) != 0)
      WebCore::SVGElement::synchronizeAllAttributes(this);
  }
  v8 = *((_QWORD *)a2 + 13);
  if (v8)
  {
    if ((*(_BYTE *)(v8 + 4) & 8) != 0)
      WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(a2, (unsigned __int8 *)a2, a5, a3, a4);
    if ((*((_WORD *)a2 + 14) & 0x20) != 0)
      WebCore::SVGElement::synchronizeAllAttributes(a2);
    v9 = (WebCore::ElementData *)*((_QWORD *)a2 + 13);
  }
  else
  {
    v9 = 0;
  }
  v10 = (WebCore::ElementData *)*((_QWORD *)this + 13);
  if (v10 == v9)
    return 1;
  if (v10)
    return WebCore::ElementData::isEquivalent(v10, v9);
  if (!v9)
    return 1;
  v12 = *((_DWORD *)v9 + 1);
  if ((v12 & 1) != 0)
    v13 = *((_DWORD *)v9 + 13);
  else
    v13 = v12 >> 5;
  return v13 == 0;
}

BOOL WebCore::ElementData::isEquivalent(WebCore::ElementData *this, const WebCore::ElementData *a2)
{
  unsigned int v2;
  BOOL v3;
  char v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *i;
  uint64_t v15;
  _BOOL8 result;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *j;
  uint64_t v23;
  int v24;
  unsigned int v26;

  v2 = *((_DWORD *)this + 1);
  v3 = (v2 & 1) == 0 || this == 0;
  v4 = v3;
  if (!a2)
  {
    if ((v4 & 1) != 0)
      v26 = v2 >> 5;
    else
      v26 = *((_DWORD *)this + 13);
    return v26 == 0;
  }
  v5 = v2 >> 5;
  if ((v4 & 1) != 0)
    v6 = v2 >> 5;
  else
    v6 = *((_DWORD *)this + 13);
  v7 = *((_DWORD *)a2 + 1);
  if ((v7 & 1) != 0)
    v8 = *((_DWORD *)a2 + 13);
  else
    v8 = v7 >> 5;
  if (v6 != v8)
    return 0;
  if ((v2 & 1) != 0)
  {
    v9 = (char *)*((_QWORD *)this + 5);
    v5 = *((_DWORD *)this + 13);
  }
  else
  {
    v9 = (char *)this + 32;
  }
  if (!v5)
    return 1;
  if ((v7 & 1) == 0)
  {
    LODWORD(v10) = v7 >> 5;
    if (v7 >> 5 <= 1)
      v10 = 1;
    else
      v10 = v10;
    if (v7 >= 0x20)
    {
      v11 = 0;
      do
      {
        v12 = *(_QWORD *)&v9[16 * v11];
        v13 = v10;
        for (i = (_QWORD *)((char *)a2 + 40); ; i += 2)
        {
          v15 = *(i - 1);
          if (v15 == v12
            || *(_QWORD *)(v15 + 24) == *(_QWORD *)(v12 + 24) && *(_QWORD *)(v15 + 32) == *(_QWORD *)(v12 + 32))
          {
            break;
          }
          result = 0;
          if (!--v13)
            return result;
        }
        v3 = *(_QWORD *)&v9[16 * v11 + 8] == *i;
        result = v3;
        v17 = v11 + 1;
        v11 = (v11 + 1);
      }
      while (v3 && v5 != v17);
      return result;
    }
    return 0;
  }
  if (!*((_DWORD *)a2 + 13))
    return 0;
  v19 = 0;
  do
  {
    v20 = *(_QWORD *)&v9[16 * v19];
    v21 = *((unsigned int *)a2 + 13);
    for (j = (_QWORD *)(*((_QWORD *)a2 + 5) + 8); ; j += 2)
    {
      v23 = *(j - 1);
      if (v23 == v20
        || *(_QWORD *)(v23 + 24) == *(_QWORD *)(v20 + 24) && *(_QWORD *)(v23 + 32) == *(_QWORD *)(v20 + 32))
      {
        break;
      }
      result = 0;
      if (!--v21)
        return result;
    }
    v3 = *(_QWORD *)&v9[16 * v19 + 8] == *j;
    result = v3;
    v24 = v19 + 1;
    v19 = (v19 + 1);
  }
  while (v3 && v5 != v24);
  return result;
}

WTF::StringImpl *WebCore::Element::nodeName@<X0>(WTF::StringImpl *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v2 = *((_QWORD *)this + 12);
  v3 = *(WTF::StringImpl **)(v2 + 16);
  if (v3)
  {
    *(_DWORD *)v3 += 2;
    v9 = v3;
    v5 = *(WTF::StringImpl **)(v2 + 24);
    if (v5)
      *(_DWORD *)v5 += 2;
    v8 = v5;
    WTF::makeString<WTF::String,char,WTF::String>((uint64_t)&v9, 58, (uint64_t *)&v8, a2);
    v7 = v8;
    v8 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    this = v9;
    v9 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v6);
      else
        *(_DWORD *)this -= 2;
    }
  }
  else
  {
    v4 = *(_DWORD **)(v2 + 24);
    if (v4)
      *v4 += 2;
    *a2 = v4;
  }
  return this;
}

void *WebCore::Element::setPrefix@<X0>(WebCore::Element *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>, int32x4_t a4@<Q0>)
{
  WTF::StringImpl **v4;
  void *result;
  uint64_t v8;
  _QWORD v9[2];
  char v10;

  v4 = a2;
  result = WebCore::Node::checkSetPrefix((uint64_t *)this, (const WTF::AtomString *)a2, v9, a4);
  if (v10)
  {
    v8 = v9[1];
    *(_BYTE *)a3 = v9[0];
    *(_QWORD *)(a3 + 8) = v8;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    if (!*v4 || !*((_DWORD *)*v4 + 1))
      v4 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    result = WebCore::QualifiedName::setPrefix((WTF::StringImpl ***)this + 12, v4);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t WebCore::Element::imageSourceURL(WebCore::Element *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    return MEMORY[0x1E0CBF2F8];
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) == 0)
  {
    v3 = v1 + 32;
    LODWORD(v4) = v2 >> 5;
    if ((_DWORD)v4)
      goto LABEL_4;
    return MEMORY[0x1E0CBF2F8];
  }
  v3 = *(_QWORD *)(v1 + 40);
  LODWORD(v4) = *(_DWORD *)(v1 + 52);
  if (!(_DWORD)v4)
    return MEMORY[0x1E0CBF2F8];
LABEL_4:
  v4 = v4;
  for (result = v3 + 8; ; result += 16)
  {
    v6 = *(_QWORD *)(result - 8);
    if (v6 == WebCore::HTMLNames::srcAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
    {
      break;
    }
    if (!--v4)
      return MEMORY[0x1E0CBF2F8];
  }
  return result;
}

uint64_t WebCore::Element::lastRememberedLogicalWidth(WebCore::Element *this)
{
  uint64_t v2;

  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  v2 = *(unsigned int *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x90);
  if ((_DWORD)v2 == -64)
    return 0;
  else
    return v2 | 0x100000000;
}

uint64_t WebCore::Element::lastRememberedLogicalHeight(WebCore::Element *this)
{
  uint64_t v2;

  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  v2 = *(unsigned int *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x94);
  if ((_DWORD)v2 == -64)
    return 0;
  else
    return v2 | 0x100000000;
}

_QWORD *WebCore::Element::removeFromTopLayer(WebCore::Element *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t v18;
  WTF *v19;
  void *v20;
  int v21;
  uint64_t v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[2];
  WTF::StringImpl *v30;
  _QWORD *v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 23) & 0x20) == 0)
  {
    __break(0xC471u);
    goto LABEL_61;
  }
  ++WebCore::ScriptDisallowedScope::s_count;
  v29[0] = &off_1E33A48C0;
  v31 = v29;
  WebCore::forEachRenderLayer(*((_QWORD *)this + 8), v29);
  v2 = v31;
  if (v31 == v29)
  {
    v3 = 4;
    v2 = v29;
  }
  else
  {
    if (!v31)
      goto LABEL_7;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_7:
  v4 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1959CBE4CLL);
    }
    v5 = *(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
    *(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10) = v5;
    if ((*(_BYTE *)(v4 + 21) & 0x40) == 0)
    {
      if (v5)
      {
LABEL_11:
        *(_DWORD *)(v4 + 16) = v5 - 1;
        goto LABEL_12;
      }
LABEL_52:
      __break(0xC471u);
      JUMPOUT(0x1959CBF90);
    }
    v28 = v4;
    v19 = *(WTF **)(WebCore::RenderObject::rareData((WebCore::RenderObject *)v4) + 16);
    if (v19)
    {
      v21 = *(_DWORD *)v19 + 1;
      *(_DWORD *)v19 = v21;
      v22 = *((_QWORD *)v19 + 1);
      if (v22)
      {
        ++*(_DWORD *)(v22 + 16);
        v21 = *(_DWORD *)v19;
      }
      v23 = v21 - 1;
      if (v23)
      {
        *(_DWORD *)v19 = v23;
        if (!v22)
          goto LABEL_51;
        goto LABEL_43;
      }
      WTF::fastFree(v19, v20);
      if (v22)
      {
LABEL_43:
        WebCore::Styleable::fromRenderer(v22, (const WebCore::RenderElement *)v20, (uint64_t)v29);
        if (v32)
        {
          WebCore::Styleable::elementWasRemoved((WebCore::Styleable *)v29);
          if (v32)
          {
            if ((_BYTE)v31)
            {
              v25 = v30;
              v30 = 0;
              if (v25)
              {
                if (*(_DWORD *)v25 == 2)
                  WTF::StringImpl::destroy(v25, v24);
                else
                  *(_DWORD *)v25 -= 2;
              }
            }
          }
        }
        v26 = *(_DWORD *)(v22 + 16);
        if (v26)
        {
          *(_DWORD *)(v22 + 16) = v26 - 1;
          goto LABEL_51;
        }
        __break(0xC471u);
LABEL_61:
        JUMPOUT(0x1959CBE2CLL);
      }
    }
LABEL_51:
    v4 = v28;
    v5 = *(_DWORD *)(v28 + 16);
    if (v5)
      goto LABEL_11;
    goto LABEL_52;
  }
LABEL_12:
  WebCore::Document::removeTopLayerElement(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8), (uint64_t)this);
  *((_QWORD *)this + 2) &= ~0x2000000000000000uLL;
  v6 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v7 = *(uint64_t **)(v6 + 1584);
  if (v7)
  {
    v14 = *v7;
    if (v14)
    {
      if (*(_DWORD *)(v14 + 100))
      {
        *(_BYTE *)(v6 + 3368) |= 4u;
        WebCore::Document::scheduleRenderingUpdate((_QWORD *)v6, 64);
      }
    }
  }
  WebCore::Node::invalidateStyle((uint64_t)this, 3u, 0);
  v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1272);
  if (v8)
  {
    *(_DWORD *)(v8 + 24) += 2;
    WebCore::Node::invalidateStyle(v8, 3u, 0);
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  v10 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v11 = *(uint64_t **)(v10 + 3096);
  if (v11)
  {
    v15 = 0;
    v16 = (uint64_t *)(v10 + 3104);
    while (1)
    {
      v17 = (uint64_t **)(v15 ? v15 + 1 : v16);
      v15 = *v17;
      v18 = *v15;
      if ((*(_WORD *)(*v15 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v18 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::dialogTag + 24))
      {
        break;
      }
      if (v15 == v11)
        goto LABEL_17;
    }
    *(_DWORD *)(v18 + 24) += 2;
    WebCore::Node::invalidateStyle(v18, 3u, 0);
    if (*(_DWORD *)(v18 + 24) == 2)
    {
      if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v18, v27);
    }
    else
    {
      *(_DWORD *)(v18 + 24) -= 2;
    }
  }
LABEL_17:
  v29[0] = &off_1E33A4908;
  v31 = v29;
  WebCore::forEachRenderLayer(*((_QWORD *)this + 8), v29);
  result = v31;
  if (v31 == v29)
  {
    v13 = 4;
    result = v29;
    goto LABEL_21;
  }
  if (v31)
  {
    v13 = 5;
LABEL_21:
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
  }
  --WebCore::ScriptDisallowedScope::s_count;
  return result;
}

unsigned int *WebCore::Element::attachShadow@<X0>(unsigned int *result@<X0>, const WTF::AtomString *a2@<X1>, uint64_t a3@<X8>)
{
  char v3;
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unsigned __int8 v31;
  uint64_t v32;
  char v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  uint64_t v37;
  WebCore::Style::Scope *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  WebCore::Node *v42;
  WTF *v43;
  void *v44;
  char v45;
  uint64_t v46;
  WTF::StringImpl *v47;

  if (!*(_BYTE *)a2)
  {
    v45 = 33;
LABEL_75:
    *(_BYTE *)a3 = v45;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  v5 = result;
  if ((result[7] & 0x10) == 0)
    goto LABEL_74;
  v6 = (char *)a2;
  v7 = *((_QWORD *)result + 12);
  v8 = *(unsigned __int16 *)(v7 + 10);
  if (v8 > 0x38 || ((1 << v8) & 0x17E2020000600C0) == 0)
  {
    v10 = v8 - 72;
    v11 = v10 > 0x26;
    v12 = (1 << v10) & 0x4200040101;
    if (v11 || v12 == 0)
    {
      v14 = *(WTF::StringImpl **)(v7 + 24);
      if (v14)
        *(_DWORD *)v14 += 2;
      v47 = v14;
      v15 = WebCore::Document::validateCustomElementName((WebCore::Document *)&v47, a2);
      if (!v15)
      {
        v16 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 5) + 8) + 696);
        if (v16)
        {
          ++*(_DWORD *)(v16 + 24);
          v17 = *(_QWORD *)(v16 + 264);
          if (v17)
          {
            v18 = *(_DWORD *)(v17 + 16);
            *(_DWORD *)(v17 + 16) = v18 + 1;
            v19 = *(_QWORD *)(v17 + 72);
            if (v19)
            {
              v20 = *(_DWORD *)(v17 + 80);
              v21 = v20 - 1;
              v22 = *(_DWORD *)(v17 + 88);
              v23 = *((_DWORD *)v47 + 4);
              v24 = (v22 ^ (v23 >> 8)) & (v20 - 1);
              v25 = *(unsigned int **)(v19 + 8 * v24);
              if (v25)
              {
                v26 = v23 >> 8;
                v27 = -1;
                do
                {
                  a2 = (const WTF::AtomString *)v25[4];
                  if (++v27 > ((v24 + v20 - ((v22 ^ (a2 >> 8)) & v21)) & v21))
                    break;
                  if (v25 == (unsigned int *)v47 && a2 >> 8 == v26)
                  {
                    if (v18)
                    {
                      v3 = 0;
                      *(_DWORD *)(v17 + 16) = v18;
                    }
                    else
                    {
                      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
                      v3 = 0;
                    }
                    goto LABEL_30;
                  }
                  v24 = (v24 + 1) & v21;
                  v25 = *(unsigned int **)(v19 + 8 * v24);
                }
                while (v25);
              }
            }
            if (v18)
              *(_DWORD *)(v17 + 16) = v18;
            else
              (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
          }
          v3 = 1;
LABEL_30:
          if (*(_DWORD *)(v16 + 24) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 72))(v16);
          else
            --*(_DWORD *)(v16 + 24);
        }
        else
        {
          v3 = 1;
        }
      }
      result = (unsigned int *)v47;
      v47 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *result -= 2;
      }
      if (((v15 == 0) & v3) == 0)
      {
LABEL_74:
        v45 = 6;
        goto LABEL_75;
      }
    }
  }
  v28 = *((_QWORD *)v5 + 9);
  if ((v28 & 0xFFFFFFFFFFFFLL) != 0 && (v40 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFLL) + 0x58)) != 0)
  {
    v41 = *(_DWORD *)(v40 + 24);
    *(_DWORD *)(v40 + 24) = v41 + 2;
    if ((*(_BYTE *)(v40 + 192) & 0x40) != 0 && *v6 == *(_BYTE *)(v40 + 193))
    {
      WebCore::ChildListMutationScope::ChildListMutationScope(&v47, (WebCore::ContainerNode *)v40);
      WebCore::ContainerNode::removeChildren(v40);
      *(_BYTE *)(v40 + 192) &= ~0x40u;
      *(_QWORD *)a3 = v40;
      *(_DWORD *)(a3 + 16) = 0;
      result = (unsigned int *)v47;
      v47 = 0;
      if (result)
      {
        if (*result == 1)
        {
          WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator((WebCore::ChildListMutationAccumulator *)result, a2);
          result = (unsigned int *)WTF::fastFree(v43, v44);
        }
        else
        {
          --*result;
        }
      }
      v41 = *(_DWORD *)(v40 + 24) - 2;
    }
    else
    {
      *(_BYTE *)a3 = 6;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 16) = 1;
    }
    if (v41)
    {
      *(_DWORD *)(v40 + 24) = v41;
      return result;
    }
    if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
    {
      v42 = (WebCore::Node *)v40;
      return WebCore::Node::removedLastRef(v42, a2);
    }
  }
  else
  {
    v29 = *(_QWORD *)(*((_QWORD *)v5 + 5) + 8);
    v30 = *v6;
    v31 = v6[4];
    v32 = v28 & 0x3000000000000000;
    v46 = a3;
    if (v32 != 0x3000000000000000 || (v5[7] & 0x100) != 0)
      v33 = 32 * (v32 == 0x2000000000000000);
    else
      v33 = 32;
    v34 = v6[3] != 0;
    v35 = v6[2] != 0;
    v36 = v6[1] != 0;
    v37 = bmalloc::api::isoAllocate();
    *(_OWORD *)(v37 + 8) = xmmword_1968BC9D0;
    *(_DWORD *)(v37 + 24) = 2;
    *(_WORD *)(v37 + 28) = -20348;
    *(_OWORD *)(v37 + 30) = 0u;
    *(_OWORD *)(v37 + 46) = 0u;
    *(_OWORD *)(v37 + 62) = 0u;
    *(_WORD *)(v37 + 78) = 0;
    ++*(_DWORD *)(v29 + 3324);
    *(_QWORD *)(v37 + 80) = 0;
    *(_QWORD *)(v37 + 88) = 0;
    *(_QWORD *)(v37 + 96) = v37;
    *(_QWORD *)(v37 + 104) = v29;
    *(_QWORD *)(v37 + 112) = v29 + 96;
    *(_OWORD *)(v37 + 120) = 0u;
    *(_OWORD *)(v37 + 136) = 0u;
    *(_OWORD *)(v37 + 152) = 0u;
    *(_OWORD *)(v37 + 168) = 0u;
    *(_QWORD *)(v37 + 184) = 0;
    *(_QWORD *)(v37 + 40) = v37 + 96;
    *(_QWORD *)v37 = off_1E33A7A70;
    *(_BYTE *)(v37 + 192) = (2 * v36) | (4 * v35) | (8 * v34) | v33 | *(_BYTE *)(v37 + 192) & 0x80;
    *(_BYTE *)(v37 + 193) = v30;
    *(_BYTE *)(v37 + 194) = v31;
    *(_QWORD *)(v37 + 200) = 0;
    *(_QWORD *)(v37 + 208) = 0;
    v38 = (WebCore::Style::Scope *)WTF::fastMalloc((WTF *)0x140);
    *(_QWORD *)(v37 + 216) = WebCore::Style::Scope::Scope(v38, (WebCore::ShadowRoot *)v37);
    *(_QWORD *)(v37 + 224) = 0;
    *(_BYTE *)(v37 + 232) = 0;
    *(_BYTE *)(v37 + 240) = 0;
    v39 = *(_QWORD *)(v37 + 16);
    *(_QWORD *)(v37 + 16) = v39 | 0x10000000000000;
    if (!*(_BYTE *)(v37 + 193))
      *(_QWORD *)(v37 + 16) = v39 | 0x30000000000000;
    *(_DWORD *)(v37 + 24) += 2;
    v47 = (WTF::StringImpl *)v37;
    WebCore::Element::addShadowRoot((WebCore *)v5, (uint64_t *)&v47);
    result = (unsigned int *)v47;
    if (v47)
    {
      if (*((_DWORD *)v47 + 6) == 2)
      {
        if ((*((_WORD *)v47 + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef(v47, a2);
      }
      else
      {
        *((_DWORD *)v47 + 6) -= 2;
      }
    }
    *(_QWORD *)v46 = v37;
    *(_DWORD *)(v46 + 16) = 0;
    if (*(_DWORD *)(v37 + 24) == 2)
    {
      if ((*(_WORD *)(v37 + 30) & 0x400) == 0)
      {
        v42 = (WebCore::Node *)v37;
        return WebCore::Node::removedLastRef(v42, a2);
      }
    }
    else
    {
      *(_DWORD *)(v37 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::Element::attachDeclarativeShadow@<X0>(uint64_t result@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Node *v10;
  int v11;
  WebCore::Element *v12;
  _BYTE v13[5];
  WebCore::Node *v14;
  uint64_t v15;
  unsigned int v16;

  if ((*(_QWORD *)(result + 72) & 0xFFFFFFFFFFFFLL) != 0
    && *(_QWORD *)((*(_QWORD *)(result + 72) & 0xFFFFFFFFFFFFLL) + 0x58))
  {
    *(_BYTE *)a6 = 6;
    *(_QWORD *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 16) = 1;
    return result;
  }
  v13[0] = a2;
  v13[1] = a3;
  v13[2] = a4;
  v13[3] = a5;
  v13[4] = 1;
  WebCore::Element::attachShadow((unsigned int *)result, (const WTF::AtomString *)v13, (uint64_t)&v14);
  v8 = v16;
  if (!v16)
  {
    v10 = v14;
    v11 = *((_DWORD *)v14 + 6);
    *((_DWORD *)v14 + 6) = v11 + 2;
    *((_BYTE *)v10 + 192) |= 0x60u;
    *(_QWORD *)a6 = v10;
    *(_DWORD *)(a6 + 16) = 0;
    if (v11)
    {
      *((_DWORD *)v10 + 6) = v11;
    }
    else if ((*((_WORD *)v10 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v10, v7);
    }
    return ((uint64_t (*)(_BYTE *, WebCore::Node **))off_1E33A4568[v8])(v13, &v14);
  }
  if (v16 == 1)
  {
    v9 = v15;
    v15 = 0;
    *(_BYTE *)a6 = (_BYTE)v14;
    *(_QWORD *)(a6 + 8) = v9;
    *(_DWORD *)(a6 + 16) = 1;
    return ((uint64_t (*)(_BYTE *, WebCore::Node **))off_1E33A4568[v8])(v13, &v14);
  }
  v12 = (WebCore::Element *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::Element::createUserAgentShadowRoot(v12);
}

uint64_t WebCore::Element::createUserAgentShadowRoot(WebCore::Element *this)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::Style::Scope *v4;
  uint64_t v5;
  void *v6;
  WebCore::Node *v8;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v3 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v3 + 8) = xmmword_1968BC9D0;
  *(_DWORD *)(v3 + 24) = 2;
  *(_WORD *)(v3 + 28) = -20348;
  *(_OWORD *)(v3 + 30) = 0u;
  *(_OWORD *)(v3 + 46) = 0u;
  *(_OWORD *)(v3 + 62) = 0u;
  *(_WORD *)(v3 + 78) = 0;
  ++*(_DWORD *)(v2 + 3324);
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = v3;
  *(_QWORD *)(v3 + 104) = v2;
  *(_QWORD *)(v3 + 112) = v2 + 96;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_QWORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 40) = v3 + 96;
  *(_QWORD *)v3 = off_1E33A7A70;
  *(_BYTE *)(v3 + 192) &= 0x80u;
  *(_WORD *)(v3 + 193) = 256;
  *(_QWORD *)(v3 + 200) = 0;
  *(_QWORD *)(v3 + 208) = 0;
  v4 = (WebCore::Style::Scope *)WTF::fastMalloc((WTF *)0x140);
  *(_QWORD *)(v3 + 216) = WebCore::Style::Scope::Scope(v4, (WebCore::ShadowRoot *)v3);
  *(_QWORD *)(v3 + 224) = 0;
  *(_BYTE *)(v3 + 232) = 0;
  *(_BYTE *)(v3 + 240) = 0;
  v5 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v5 | 0x10000000000000;
  if (!*(_BYTE *)(v3 + 193))
    *(_QWORD *)(v3 + 16) = v5 | 0x30000000000000;
  v8 = (WebCore::Node *)v3;
  WebCore::Element::addShadowRoot(this, (uint64_t *)&v8);
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, v6);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  return v3;
}

uint64_t WebCore::Element::setIsDefinedCustomElement(WebCore::Element *this, WebCore::JSCustomElementInterface *a2)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  char v15;

  result = WebCore::Node::setCustomElementState((uint64_t)this, (void *)2);
  v6 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  if (!v6)
  {
    result = WebCore::Node::materializeRareData(this);
    v6 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  }
  if (!*(_QWORD *)(v6 + 96))
  {
    result = WTF::fastMalloc((WTF *)0x60);
    *(_DWORD *)result = 0;
    ++*((_DWORD *)a2 + 4);
    *(_QWORD *)(result + 8) = a2;
    *(_QWORD *)(result + 16) = result + 32;
    *(_QWORD *)(result + 24) = 1;
    *(_BYTE *)(result + 88) = 0;
    v7 = *(_QWORD *)(v6 + 96);
    *(_QWORD *)(v6 + 96) = result;
    if (v7)
    {
      v8 = *(unsigned int *)(v7 + 28);
      v9 = *(WTF **)(v7 + 16);
      if ((_DWORD)v8)
      {
        v12 = 56 * v8;
        v13 = (unsigned int *)((char *)v9 + 40);
        do
        {
          if (*((_BYTE *)v13 + 8))
          {
            v14 = *v13;
            if ((_DWORD)v14 != -1)
              ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS6_13QualifiedNameEN3WTF10AtomStringESC_EEENS7_21FormAssociatedPayloadEbNS_7variantIJDnNSB_6RefPtrINS6_4FileENSB_12RawPtrTraitsISH_EENSB_21DefaultRefDerefTraitsISH_EEEENSB_6StringENSG_INS6_11DOMFormDataENSI_ISO_EENSK_ISO_EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSV_EEEDcOSW_DpOT0____fmatrix[v14])(&v15, v13 - 6);
            *v13 = -1;
          }
          v13 += 14;
          v12 -= 56;
        }
        while (v12);
        v9 = *(WTF **)(v7 + 16);
      }
      if ((WTF *)(v7 + 32) != v9 && v9 != 0)
      {
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        WTF::fastFree(v9, v5);
      }
      result = *(_QWORD *)(v7 + 8);
      *(_QWORD *)(v7 + 8) = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 16) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        else
          --*(_DWORD *)(result + 16);
      }
      if (*(_DWORD *)v7)
      {
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
      }
      else
      {
        result = WTF::fastFree((WTF *)v7, v5);
      }
    }
  }
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    result = WebCore::InspectorInstrumentation::instrumentingAgents(*(WebCore::InspectorInstrumentation **)(*((_QWORD *)this + 5) + 8), (WebCore::Document *)v5);
    if (result)
    {
      result = *(_QWORD *)(result + 40);
      if (result)
        return WebCore::InspectorDOMAgent::didChangeCustomElementState(result, this);
    }
  }
  return result;
}

uint64_t WebCore::Node::setCustomElementState(uint64_t a1, void *a2)
{
  int v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 hasPendingFullStyleRebuild;
  int v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;

  if ((*(_WORD *)(a1 + 28) & 8) == 0)
  {
    result = 96;
    __break(0xC471u);
    return result;
  }
  v2 = (int)a2;
  if ((*(_BYTE *)(a1 + 22) & 8) == 0)
    goto LABEL_17;
  v4 = *(uint64_t **)(a1 + 40);
  v5 = v4[1];
  if (!*(_QWORD *)(v5 + 1944) || *(_BYTE *)(v5 + 3405))
    goto LABEL_17;
  if ((*(_BYTE *)(a1 + 70) & 4) != 0)
  {
    v9 = *v4;
    v10 = (*(_WORD *)(v9 + 28) & 0x80) == 0 || v9 == 0;
    v11 = v9 + 216;
    if (v10)
      v11 = v5 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v11 + 236))
      goto LABEL_17;
  }
  v6 = *(_QWORD *)(v5 + 1272);
  if (v6 && (*(_BYTE *)(v6 + 70) & 4) != 0)
  {
LABEL_17:
    LOBYTE(v13) = 0;
    v15 = 0;
    v16 = 0;
    v14 = a1;
  }
  else
  {
    hasPendingFullStyleRebuild = WebCore::Document::hasPendingFullStyleRebuild((WebCore::Document *)v5);
    LOBYTE(v13) = !hasPendingFullStyleRebuild;
    v15 = 0;
    v16 = 0;
    v14 = a1;
    if (!hasPendingFullStyleRebuild)
    {
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v13, (WTF::StringImpl *)0x14, (v2 & 0xFFFFFFFD) == 0, 0);
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v14, &v15);
      v8 = v13;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 72) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(v2 & 3) << 60);
      if (v8)
        WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v14, &v16);
      goto LABEL_19;
    }
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 72) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(v2 & 3) << 60);
LABEL_19:
  if (v16)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v16, a2);
  result = (uint64_t)v15;
  if (v15)
    return WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v15, a2);
  return result;
}

WTF *WebCore::Element::setIsFailedCustomElement(WebCore::Element *this)
{
  WTF *result;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  result = (WTF *)WebCore::Node::setCustomElementState((uint64_t)this, (void *)3);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v10 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    v11 = *(_QWORD *)(v10 + 528);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 24);
        if (v13)
        {
          v14 = *(_QWORD *)(v13 + 8);
          if (v14)
            goto LABEL_27;
        }
      }
    }
    v15 = *(_QWORD *)(v10 + 2632);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 8);
      if (v16)
      {
        v17 = *(_QWORD *)(v16 + 528);
        if (v17)
        {
          v18 = *(_QWORD *)(v17 + 8);
          if (v18)
          {
            v19 = *(_QWORD *)(v18 + 24);
            if (v19)
            {
              v14 = *(_QWORD *)(v19 + 8);
              if (v14)
              {
LABEL_27:
                result = *(WTF **)(*(_QWORD *)(*(_QWORD *)(v14 + 80) + 8) + 40);
                if (result)
                  result = (WTF *)WebCore::InspectorDOMAgent::didChangeCustomElementState((uint64_t)result, this);
              }
            }
          }
        }
      }
    }
  }
  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v5 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x60);
    if (v5)
    {
      if (*(_DWORD *)(v5 + 24))
      {
        v6 = *(unsigned int *)(v5 + 28);
        result = *(WTF **)(v5 + 16);
        if ((_DWORD)v6)
        {
          v7 = 56 * v6;
          v8 = (unsigned int *)((char *)result + 40);
          do
          {
            if (*((_BYTE *)v8 + 8))
            {
              v9 = *v8;
              if ((_DWORD)v9 != -1)
                ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS6_13QualifiedNameEN3WTF10AtomStringESC_EEENS7_21FormAssociatedPayloadEbNS_7variantIJDnNSB_6RefPtrINS6_4FileENSB_12RawPtrTraitsISH_EENSB_21DefaultRefDerefTraitsISH_EEEENSB_6StringENSG_INS6_11DOMFormDataENSI_ISO_EENSK_ISO_EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSV_EEEDcOSW_DpOT0____fmatrix[v9])(&v20, v8 - 6);
              *v8 = -1;
            }
            v8 += 14;
            v7 -= 56;
          }
          while (v7);
          *(_DWORD *)(v5 + 28) = 0;
          result = *(WTF **)(v5 + 16);
        }
        if ((WTF *)(v5 + 32) == result)
        {
          if (result)
            return result;
          goto LABEL_15;
        }
        if (!result
          || (*(_QWORD *)(v5 + 16) = 0,
              *(_DWORD *)(v5 + 24) = 0,
              WTF::fastFree(result, v3),
              (result = *(WTF **)(v5 + 16)) == 0))
        {
LABEL_15:
          *(_QWORD *)(v5 + 16) = v5 + 32;
          *(_DWORD *)(v5 + 24) = 1;
        }
      }
    }
  }
  return result;
}

unsigned int *WebCore::Element::clearReactionQueueFromFailedCustomElement(unsigned int *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  char v7;

  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v2 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x60);
    if (v2)
    {
      if (*(_DWORD *)(v2 + 24))
      {
        v3 = *(unsigned int *)(v2 + 28);
        this = *(unsigned int **)(v2 + 16);
        if ((_DWORD)v3)
        {
          v4 = 56 * v3;
          v5 = this + 10;
          do
          {
            if (*((_BYTE *)v5 + 8))
            {
              v6 = *v5;
              if ((_DWORD)v6 != -1)
                ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS6_13QualifiedNameEN3WTF10AtomStringESC_EEENS7_21FormAssociatedPayloadEbNS_7variantIJDnNSB_6RefPtrINS6_4FileENSB_12RawPtrTraitsISH_EENSB_21DefaultRefDerefTraitsISH_EEEENSB_6StringENSG_INS6_11DOMFormDataENSI_ISO_EENSK_ISO_EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSV_EEEDcOSW_DpOT0____fmatrix[v6])(&v7, v5 - 6);
              *v5 = -1;
            }
            v5 += 14;
            v4 -= 56;
          }
          while (v4);
          *(_DWORD *)(v2 + 28) = 0;
          this = *(unsigned int **)(v2 + 16);
        }
        if ((unsigned int *)(v2 + 32) == this)
        {
          if (this)
            return this;
          goto LABEL_14;
        }
        if (!this
          || (*(_QWORD *)(v2 + 16) = 0,
              *(_DWORD *)(v2 + 24) = 0,
              WTF::fastFree((WTF *)this, a2),
              (this = *(unsigned int **)(v2 + 16)) == 0))
        {
LABEL_14:
          *(_QWORD *)(v2 + 16) = v2 + 32;
          *(_DWORD *)(v2 + 24) = 1;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::Element::setIsCustomElementUpgradeCandidate(WebCore::Element *this)
{
  uint64_t result;
  WebCore::Document *v3;

  result = WebCore::Node::setCustomElementState((uint64_t)this, (void *)1);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    result = WebCore::InspectorInstrumentation::instrumentingAgents(*(WebCore::InspectorInstrumentation **)(*((_QWORD *)this + 5) + 8), v3);
    if (result)
    {
      result = *(_QWORD *)(result + 40);
      if (result)
        return WebCore::InspectorDOMAgent::didChangeCustomElementState(result, this);
    }
  }
  return result;
}

WebCore::Element *WebCore::Element::enqueueToUpgrade(WebCore::Element *this, WebCore::JSCustomElementInterface *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  _DWORD *v10;
  uint64_t v11;
  unsigned int v12;
  _BYTE *v13;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  char v18;
  char v19;

  v4 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  if (!v4)
  {
    WebCore::Node::materializeRareData(this);
    v4 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  }
  if (!*(_QWORD *)(v4 + 96))
  {
    v5 = WTF::fastMalloc((WTF *)0x60);
    *(_DWORD *)v5 = 0;
    ++*((_DWORD *)a2 + 4);
    *(_QWORD *)(v5 + 8) = a2;
    *(_QWORD *)(v5 + 16) = v5 + 32;
    *(_QWORD *)(v5 + 24) = 1;
    *(_BYTE *)(v5 + 88) = 0;
    v6 = *(_QWORD *)(v4 + 96);
    *(_QWORD *)(v4 + 96) = v5;
    if (v6)
    {
      v7 = *(unsigned int *)(v6 + 28);
      v8 = *(WTF **)(v6 + 16);
      if ((_DWORD)v7)
      {
        v15 = 56 * v7;
        v16 = (unsigned int *)((char *)v8 + 40);
        do
        {
          if (*((_BYTE *)v16 + 8))
          {
            v17 = *v16;
            if ((_DWORD)v17 != -1)
              ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS6_13QualifiedNameEN3WTF10AtomStringESC_EEENS7_21FormAssociatedPayloadEbNS_7variantIJDnNSB_6RefPtrINS6_4FileENSB_12RawPtrTraitsISH_EENSB_21DefaultRefDerefTraitsISH_EEEENSB_6StringENSG_INS6_11DOMFormDataENSI_ISO_EENSK_ISO_EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSV_EEEDcOSW_DpOT0____fmatrix[v17])(&v18, v16 - 6);
            *v16 = -1;
          }
          v16 += 14;
          v15 -= 56;
        }
        while (v15);
        v8 = *(WTF **)(v6 + 16);
      }
      if ((WTF *)(v6 + 32) != v8 && v8 != 0)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        WTF::fastFree(v8, a2);
      }
      v10 = *(_DWORD **)(v6 + 8);
      *(_QWORD *)(v6 + 8) = 0;
      if (v10)
      {
        if (v10[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
        else
          --v10[4];
      }
      if (*(_DWORD *)v6)
      {
        *(_OWORD *)(v6 + 64) = 0u;
        *(_OWORD *)(v6 + 80) = 0u;
        *(_OWORD *)(v6 + 32) = 0u;
        *(_OWORD *)(v6 + 48) = 0u;
        *(_OWORD *)v6 = 0u;
        *(_OWORD *)(v6 + 16) = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v6, a2);
      }
    }
    v11 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x60);
    v19 = 1;
    v12 = *(_DWORD *)(v11 + 28);
    if (v12 == *(_DWORD *)(v11 + 24))
    {
      WTF::Vector<WebCore::CustomElementReactionQueueItem,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CustomElementReactionQueueItem::Type>(v11 + 16, &v19);
    }
    else
    {
      v13 = (_BYTE *)(*(_QWORD *)(v11 + 16) + 56 * v12);
      *v13 = 1;
      v13[8] = 0;
      v13[48] = 0;
      ++*(_DWORD *)(v11 + 28);
    }
  }
  return WebCore::CustomElementReactionQueue::enqueueElementOnAppropriateElementQueue(this, a2);
}

uint64_t WebCore::Element::checkedCustomElementDefaultARIA@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  void *v6;
  bmalloc::api *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  char v15;

  v3 = *(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL;
  v4 = *(_DWORD **)(v3 + 0x68);
  if (!v4)
  {
    v5 = this;
    this = bmalloc::api::isoAllocate();
    *(_DWORD *)this = 0;
    *(_QWORD *)(this + 8) = 0;
    v7 = *(bmalloc::api **)(v3 + 104);
    *(_QWORD *)(v3 + 104) = this;
    if (v7)
    {
      v8 = *((_QWORD *)v7 + 1);
      if (v8)
      {
        v9 = *(unsigned int *)(v8 - 4);
        if ((_DWORD)v9)
        {
          v10 = *((_QWORD *)v7 + 1);
          do
          {
            v11 = *(WTF::StringImpl ***)v10;
            if (*(_QWORD *)v10 != -1)
            {
              v12 = *(unsigned int *)(v10 + 24);
              if ((_DWORD)v12 != -1)
              {
                ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF10AtomStringENS6_7WeakPtrIN7WebCore7ElementENS9_30WeakPtrImplWithEventTargetDataENS6_12RawPtrTraitsISB_EEEENS6_6VectorISE_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v12])(&v15, v10 + 8);
                v11 = *(WTF::StringImpl ***)v10;
              }
              *(_DWORD *)(v10 + 24) = -1;
              *(_QWORD *)v10 = 0;
              if (v11)
              {
                if (*(_DWORD *)v11 == 1)
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v11);
                  WTF::fastFree(v13, v14);
                }
                else
                {
                  --*(_DWORD *)v11;
                }
              }
            }
            v10 += 32;
            --v9;
          }
          while (v9);
        }
        this = WTF::fastFree((WTF *)(v8 - 16), v6);
      }
      if (*(_DWORD *)v7)
      {
        *(_QWORD *)v7 = 0;
        *((_QWORD *)v7 + 1) = 0;
      }
      else
      {
        this = bmalloc::api::isoDeallocate(v7, v6);
      }
    }
    v4 = *(_DWORD **)((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) + 0x68);
  }
  *a2 = v4;
  ++*v4;
  return this;
}

unsigned int *WebCore::Element::childrenChanged(uint64_t a1, _BYTE *a2)
{
  unsigned int *result;
  void *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  result = (unsigned int *)WebCore::ContainerNode::childrenChanged(a1, a2);
  if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v6 = *(_QWORD *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v6)
    {
      v7 = *(_DWORD *)(v6 + 24);
      *(_DWORD *)(v6 + 24) = v7 + 2;
      v8 = *a2;
      if ((v8 - 2) < 3)
      {
        result = *(unsigned int **)(v6 + 224);
        if (!result)
          goto LABEL_9;
        v9 = 14;
      }
      else
      {
        if (v8 != 8 && v8 != 5)
          goto LABEL_9;
        result = *(unsigned int **)(v6 + 224);
        if (!result)
          goto LABEL_9;
        v9 = 13;
      }
      v10 = v6;
      result = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v9))();
      v6 = v10;
      v7 = *(_DWORD *)(v10 + 24) - 2;
LABEL_9:
      if (v7)
      {
        *(_DWORD *)(v6 + 24) = v7;
      }
      else if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      {
        return WebCore::Node::removedLastRef((WebCore::Node *)v6, v5);
      }
    }
  }
  return result;
}

const WTF::AtomString *WebCore::Element::setAttributeEventListener(WebCore::Element *this, WTF::StringImpl **a2, const WebCore::QualifiedName *a3, const WTF::AtomString *a4)
{
  uint64_t v6;
  const WTF::AtomString *result;
  uint64_t v8;
  const WTF::AtomString *v9;
  const WTF::AtomString *v10;

  WebCore::JSLazyEventListener::create(this, a3, a4, (uint64_t *)&v9);
  v10 = v9;
  {
    v6 = WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
  }
  else
  {
    v8 = WebCore::g_commonVMOrNull;
    if (!WebCore::g_commonVMOrNull)
      v8 = WebCore::commonVMSlow(0);
    v6 = *(_QWORD *)(*(_QWORD *)(v8 + 41456) + 16);
    WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = v6;
  }
  WebCore::EventTarget::setAttributeEventListener(this, a2, &v10, v6);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 4) == 1)
      return (const WTF::AtomString *)(*(uint64_t (**)(const WTF::AtomString *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 4);
  }
  return result;
}

WTF::StringImpl *WebCore::Element::description@<X0>(WebCore::Element *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  const WebCore::Element *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  char v15;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 1;
  WebCore::Node::description(this, &v11);
  v6 = v11;
  if (v11)
  {
    v7 = *(_DWORD *)v11;
    *(_DWORD *)v11 += 2;
    v12 = v6;
    v14 = *((_DWORD *)v6 + 1);
    v11 = 0;
    if (v7)
      *(_DWORD *)v6 = v7;
    else
      WTF::StringImpl::destroy(v6, v4);
  }
  else
  {
    v12 = 0;
    v14 = 0;
  }
  WebCore::appendAttributes((WTF::StringBuilder *)&v12, this, v5);
  result = v12;
  if (v12
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v12),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v12),
        (result = v12) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v8);
      result = v12;
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WebCore::Element::attrNodeList(WebCore::Element *this)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int i;
  uint64_t *v8;
  uint64_t v9;

  if ((*((_BYTE *)this + 22) & 0x80) == 0)
    return 0;
  {
    if (WebCore::attrNodeListMap(void)::map)
    {
      v2 = *(_DWORD *)(WebCore::attrNodeListMap(void)::map - 8);
      v3 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
      v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
      v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
      v6 = v2 & ((v5 >> 31) ^ v5);
      for (i = 1; ; ++i)
      {
        v8 = (uint64_t *)(WebCore::attrNodeListMap(void)::map + 24 * v6);
        v9 = *v8;
        if (*v8 != -1)
        {
          if (!v9)
          {
            v8 = (uint64_t *)(WebCore::attrNodeListMap(void)::map
                           + 24 * *(unsigned int *)(WebCore::attrNodeListMap(void)::map - 4));
            return v8 + 1;
          }
          if (*(WebCore::Element **)(v9 + 8) == this)
            return v8 + 1;
        }
        v6 = (v6 + i) & v2;
      }
    }
    v8 = 0;
  }
  else
  {
    v8 = 0;
    WebCore::attrNodeListMap(void)::map = 0;
  }
  return v8 + 1;
}

WebCore *WebCore::Element::attachAttributeNodeIfNeeded(WebCore *this, WebCore::Attr *a2)
{
  WebCore *v3;
  WebCore *v4;
  WebCore::Element *v5;
  WebCore *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;

  v3 = this;
  v4 = (WebCore *)*((_QWORD *)a2 + 10);
  if (v4)
    v4 = (WebCore *)*((_QWORD *)v4 + 1);
  if (v4 != this)
  {
    ++WebCore::ScriptDisallowedScope::s_count;
    WebCore::Attr::attachToElement(a2, this);
    this = (WebCore *)WebCore::ensureAttrNodeListForElement(v3, v5);
    v6 = this;
    v7 = *((unsigned int *)this + 3);
    if ((_DWORD)v7 == *((_DWORD *)this + 2))
    {
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= v7 + 1)
        v10 = v7 + 1;
      else
        v10 = v9;
      if (v10 >> 29)
      {
        __break(0xC471u);
        return this;
      }
      v11 = *(void **)this;
      v12 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
      *((_DWORD *)v6 + 2) = v10;
      *(_QWORD *)v6 = v12;
      this = (WebCore *)memcpy(v12, v11, 8 * v7);
      if (v11)
      {
        if (*(void **)v6 == v11)
        {
          *(_QWORD *)v6 = 0;
          *((_DWORD *)v6 + 2) = 0;
        }
        this = (WebCore *)WTF::fastFree((WTF *)v11, v13);
      }
      v7 = *((unsigned int *)v6 + 3);
      v14 = *(_QWORD *)v6;
      *((_DWORD *)a2 + 6) += 2;
      v15 = (_QWORD *)(v14 + 8 * v7);
    }
    else
    {
      v15 = (_QWORD *)(*(_QWORD *)this + 8 * v7);
      *((_DWORD *)a2 + 6) += 2;
    }
    *v15 = a2;
    *((_DWORD *)v6 + 3) = v7 + 1;
    --WebCore::ScriptDisallowedScope::s_count;
  }
  return this;
}

_QWORD *WebCore::ensureAttrNodeListForElement(WebCore *this, WebCore::Element *a2)
{
  uint64_t v2;
  unsigned int *v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int **v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int **v19;
  uint64_t v20;
  unsigned int *v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  WTF *v32;

  v2 = *((_QWORD *)this + 2);
  if ((v2 & 0x80000000000000) == 0)
  {
    *((_QWORD *)this + 2) = v2 | 0x80000000000000;
    {
      WebCore::attrNodeListMap(void)::map = 0;
    }
    v3 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    v5 = v3;
    do
      v6 = __ldaxr(v3);
    while (__stlxr(v6 + 1, v3));
    v7 = WebCore::attrNodeListMap(void)::map;
    if (WebCore::attrNodeListMap(void)::map
      || (WTF::HashTable<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashMap<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>>::expand(),
          (v7 = WebCore::attrNodeListMap(void)::map) != 0))
    {
      v8 = *(_DWORD *)(v7 - 8);
    }
    else
    {
      v8 = 0;
    }
    v9 = 0;
    v10 = *((_QWORD *)v5 + 1);
    v11 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = (v13 >> 31) ^ v13;
    for (i = 1; ; ++i)
    {
      v16 = v14 & v8;
      v17 = (_QWORD *)(v7 + 24 * v16);
      v18 = *v17;
      if (!*v17)
        break;
      if (v18 == -1)
      {
        v9 = (unsigned int **)(v7 + 24 * v16);
      }
      else if (*(_QWORD *)(v18 + 8) == v10)
      {
        do
        {
          v29 = __ldaxr(v5);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v5));
        if (!v30)
        {
          atomic_store(1u, v5);
          v31 = v5[7];
          if ((_DWORD)v31)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v5 + 2), (WTF::StringImpl *)(*((_QWORD *)v5 + 2) + 32 * v31));
          v32 = (WTF *)*((_QWORD *)v5 + 2);
          if (v32)
          {
            *((_QWORD *)v5 + 2) = 0;
            v5[6] = 0;
            WTF::fastFree(v32, v4);
          }
          WTF::fastFree((WTF *)v5, v4);
        }
        return v17 + 1;
      }
      v14 = i + v16;
    }
    if (v9)
    {
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      --*(_DWORD *)(v7 - 16);
      *v9 = v5;
      v17 = v9;
    }
    else
    {
      *v17 = v5;
    }
    v19 = (unsigned int **)(v17 + 1);
    v20 = *((unsigned int *)v17 + 5);
    if ((_DWORD)v20)
      WTF::VectorTypeOperations<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>>::destruct(*v19, &(*v19)[2 * v20]);
    v21 = *v19;
    if (*v19)
    {
      v17[1] = 0;
      *((_DWORD *)v17 + 4) = 0;
      WTF::fastFree((WTF *)v21, v4);
    }
    *v19 = 0;
    v17[2] = 0;
    if (WebCore::attrNodeListMap(void)::map)
      v22 = *(_DWORD *)(WebCore::attrNodeListMap(void)::map - 12) + 1;
    else
      v22 = 1;
    *(_DWORD *)(WebCore::attrNodeListMap(void)::map - 12) = v22;
    if (WebCore::attrNodeListMap(void)::map)
      v23 = *(_DWORD *)(WebCore::attrNodeListMap(void)::map - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(WebCore::attrNodeListMap(void)::map - 16) + v23);
    v25 = *(unsigned int *)(WebCore::attrNodeListMap(void)::map - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24)
        return v17 + 1;
    }
    else
    {
      if (3 * v25 > 4 * v24)
        return v17 + 1;
      if (!(_DWORD)v25)
      {
        v27 = 8;
LABEL_33:
        v28 = (uint64_t)WTF::HashTable<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashMap<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>>::rehash(v27, v17);
        goto LABEL_34;
      }
    }
    v27 = (_DWORD)v25 << (6 * *(_DWORD *)(WebCore::attrNodeListMap(void)::map - 12) >= (2 * v25));
    goto LABEL_33;
  }
  {
    WebCore::attrNodeListMap(void)::map = 0;
  }
  v28 = WTF::HashMap<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::find<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>((uint64_t)this);
LABEL_34:
  v17 = (_QWORD *)v28;
  return v17 + 1;
}

unsigned int *WebCore::Element::setAttributeNode@<X0>(WebCore::Element *this@<X0>, WebCore::Attr *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v6;
  unsigned int *result;
  unsigned __int8 *v8;
  uint64_t v9;
  WTF::String *v10;
  __n128 v11;
  WebCore::Node *v12;
  uint64_t v13;
  WebCore::Element *v14;
  BOOL v15;
  uint64_t v16;
  WTF::String *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::TreeScope *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WebCore::Element **v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  WebCore::Element **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  _DWORD *v67;
  _DWORD *v68;
  WebCore::Node *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WebCore::Element *v80;
  WebCore::Attr *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  int v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WebCore::Node *v89;
  WTF::StringImpl *v90;
  WebCore::Element **v91;
  int v92;
  WebCore::Element *v93;
  WTF::StringImpl *v94;
  WebCore::Element **v95;
  WTF::StringImpl **v96;
  WTF::StringImpl **v97;
  WebCore::Element **v98;
  WTF::StringImpl **v99;
  WTF::StringImpl **v100;
  WebCore::Element **v101;
  WTF::StringImpl **v102;
  WTF::StringImpl **v103;
  WebCore::Element **v104;
  WTF::StringImpl **v105;
  WTF::StringImpl ***v106;

  v6 = (unsigned __int8 *)a2 + 88;
  result = (unsigned int *)WebCore::Element::attrIfExists((uint64_t)this, (uint64_t *)a2 + 11, &v89);
  v12 = v89;
  if (v89 == a2)
  {
    *(_QWORD *)a3 = a2;
    *(_DWORD *)(a3 + 16) = 0;
    return result;
  }
  v13 = *((_QWORD *)a2 + 10);
  if (!v13 || ((v14 = *(WebCore::Element **)(v13 + 8)) != 0 ? (v15 = v14 == this) : (v15 = 1), v15))
  {
    ++WebCore::ScriptDisallowedScope::s_count;
    v16 = *((_QWORD *)this + 13);
    if (v16)
    {
      if ((*(_BYTE *)(v16 + 4) & 8) != 0)
        WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(this, v8, v11, v9, v10);
      if ((*((_WORD *)this + 14) & 0x20) != 0)
        WebCore::SVGElement::synchronizeAllAttributes(this);
    }
    --WebCore::ScriptDisallowedScope::s_count;
    v18 = WebCore::Element::ensureUniqueElementData(this);
    v20 = *((_QWORD *)a2 + 10);
    if (v20 && (v22 = *(_QWORD *)(v20 + 8)) != 0)
    {
      *(_DWORD *)(v22 + 24) += 2;
      WebCore::Element::getAttributeForBindings(v22, v6, 1, v17, &v88, v19);
      if (*(_DWORD *)(v22 + 24) == 2)
      {
        if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v22, v23);
      }
      else
      {
        *(_DWORD *)(v22 + 24) -= 2;
      }
    }
    else
    {
      v21 = (WTF::StringImpl *)*((_QWORD *)a2 + 12);
      if (v21)
        *(_DWORD *)v21 += 2;
      v88 = v21;
    }
    v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 40) + 8);
    v25 = *(_QWORD *)(v24 + 704);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
        v24 = v26;
    }
    if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v24 + 192) + 136))(v24 + 192) + 464) & 0x200000000000000) == 0)
      goto LABEL_67;
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Element *))(*(_QWORD *)this + 104))(&v94, this);
    WTF::AtomString::convertToASCIILowercase((WTF::AtomString *)(*(_QWORD *)v6 + 24));
    WebCore::trustedTypeForAttribute((WebCore *)&v94, &v90, (WTF::StringImpl **)(*((_QWORD *)this + 12) + 32), (WTF::StringImpl **)(*(_QWORD *)v6 + 32), &v86);
    v29 = v90;
    v90 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v28);
      else
        *(_DWORD *)v29 -= 2;
    }
    v30 = v94;
    v94 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v28);
      else
        *(_DWORD *)v30 -= 2;
    }
    v31 = v86;
    if (v86)
      *(_DWORD *)v86 += 2;
    v85 = v31;
    v32 = v88;
    if (v88)
      *(_DWORD *)v88 += 2;
    v83 = v32;
    v84 = 3;
    v33 = v87;
    if (v87)
      *(_DWORD *)v87 += 2;
    v82 = v33;
    v93 = this;
    v94 = (WTF::StringImpl *)&v85;
    v95 = &v93;
    v96 = &v82;
    v97 = &v85;
    v98 = &v93;
    v99 = &v82;
    v100 = &v85;
    v101 = &v93;
    v102 = &v82;
    v103 = &v85;
    v104 = &v93;
    v105 = &v82;
    v106 = (WTF::StringImpl ***)&v94;
    std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::trustedTypesCompliantAttributeValue(WTF::String,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&,WebCore::Element *,WTF::String)::$_0,WebCore::trustedTypesCompliantAttributeValue(WTF::String,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&,WebCore::Element *,WTF::String)::$_1,WebCore::trustedTypesCompliantAttributeValue(WTF::String,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&,WebCore::Element *,WTF::String)::$_2,WebCore::trustedTypesCompliantAttributeValue(WTF::String,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&,WebCore::Element *,WTF::String)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&>(&v106, &v83, (uint64_t)&v90);
    if (v92)
    {
      if (v92 != 1)
        goto LABEL_161;
      v34 = v91;
      v91 = 0;
      LOBYTE(v94) = (_BYTE)v90;
      v95 = v34;
    }
    else
    {
      v35 = v90;
      v90 = 0;
      v94 = v35;
    }
    LODWORD(v96) = v92;
    ((void (*)(WTF::StringImpl ****, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v92])(&v106, &v90);
    v36 = v82;
    v82 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v36 -= 2;
    }
    if (v84 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11TrustedHTMLENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13TrustedScriptENSA_ISF_EENSC_ISF_EEEENS7_INS8_16TrustedScriptURLENSA_ISJ_EENSC_ISJ_EEEENS6_10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v84])(&v90, &v83);
    v37 = v85;
    v85 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v37 -= 2;
    }
    v38 = (int)v96;
    if (!(_DWORD)v96)
    {
      v40 = v94;
      v94 = 0;
      if (v40)
      {
        v83 = v40;
        if ((*((_BYTE *)v40 + 16) & 0x10) == 0)
        {
          WTF::AtomStringImpl::addSlowCase();
          v41 = v83;
          v40 = v90;
          v90 = 0;
          v83 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
              WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v41 -= 2;
          }
        }
      }
      v42 = v88;
      v88 = v40;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v8);
        else
          *(_DWORD *)v42 -= 2;
      }
LABEL_58:
      if ((_DWORD)v96 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v96])(&v90, &v94);
      v43 = v87;
      v87 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
          WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v8);
        else
          *(_DWORD *)v43 -= 2;
      }
      v44 = v86;
      v86 = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
        {
          WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v8);
          if (v38)
          {
LABEL_131:
            result = (unsigned int *)v88;
            v88 = 0;
            if (result)
            {
              if (*result == 2)
                result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v8);
              else
                *result -= 2;
            }
            goto LABEL_134;
          }
LABEL_67:
          v45 = *(_DWORD *)(v18 + 4);
          v46 = *(_DWORD *)(v18 + 52);
          v47 = v45 >> 5;
          if ((v45 & 1) != 0)
            v48 = *(_QWORD *)(v18 + 40);
          else
            v48 = v18 + 32;
          if ((*(_DWORD *)(v18 + 4) & 1) == 0)
            v46 = v47;
          if (!v46)
          {
LABEL_87:
            WebCore::Element::attachAttributeNodeIfNeeded(this, a2);
            v57 = *(_DWORD *)(v18 + 4);
            v58 = v57 >> 5;
            if ((v57 & 1) != 0)
              v59 = *(uint64_t **)(v18 + 40);
            else
              v59 = (uint64_t *)(v18 + 32);
            if ((*(_DWORD *)(v18 + 4) & 1) != 0)
              v60 = *(unsigned int *)(v18 + 52);
            else
              v60 = v58;
            if ((_DWORD)v60)
            {
              v61 = 0;
              v62 = *(_QWORD *)v6;
              while (1)
              {
                v63 = *v59;
                if (*v59 == v62
                  || *(_QWORD *)(v63 + 24) == *(_QWORD *)(v62 + 24) && *(_QWORD *)(v63 + 32) == *(_QWORD *)(v62 + 32))
                {
                  goto LABEL_129;
                }
                ++v61;
                v59 += 2;
                if (v60 == v61)
                  goto LABEL_128;
              }
            }
            goto LABEL_128;
          }
          v49 = 0;
          v50 = 0;
          v51 = *(_QWORD *)v6;
          v52 = 16 * v46;
          while (1)
          {
            v53 = *(_QWORD *)(v48 + v50);
            if (v53 == v51
              || *(_QWORD *)(v53 + 24) == *(_QWORD *)(v51 + 24) && *(_QWORD *)(v53 + 32) == *(_QWORD *)(v51 + 32))
            {
              break;
            }
            v50 += 16;
            v49 = (v49 + 1);
            if (v52 == v50)
              goto LABEL_87;
          }
          v54 = *((_QWORD *)this + 13);
          if (v54)
            v55 = (*(_DWORD *)(v54 + 4) & 1) == 0;
          else
            v55 = 1;
          if (v55)
          {
            if (v49 < *(_DWORD *)(v54 + 4) >> 5)
            {
              v56 = v54 + 32;
              if (!v12)
              {
LABEL_103:
                v64 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
                *(_DWORD *)(v64 + 24) += 2;
                v65 = bmalloc::api::isoAllocate();
                *(_OWORD *)(v65 + 8) = xmmword_1968BC9D0;
                *(_QWORD *)(v65 + 24) = 0x200000000002;
                *(_QWORD *)(v65 + 32) = 0;
                *(_QWORD *)(v65 + 40) = v64 + 96;
                *(_OWORD *)(v65 + 48) = 0u;
                *(_OWORD *)(v65 + 64) = 0u;
                ++*(_DWORD *)(v64 + 3324);
                *(_QWORD *)v65 = off_1E33A0600;
                *(_QWORD *)(v65 + 80) = 0;
                v67 = *(_DWORD **)v6;
                if (*(_QWORD *)v6)
                  ++*v67;
                *(_QWORD *)(v65 + 88) = v67;
                v68 = *(_DWORD **)(v56 + v50 + 8);
                if (v68)
                  *v68 += 2;
                *(_QWORD *)(v65 + 96) = v68;
                *(_QWORD *)(v65 + 104) = 0;
                v69 = v89;
                v89 = (WebCore::Node *)v65;
                if (v69)
                {
                  if (*((_DWORD *)v69 + 6) == 2)
                  {
                    if ((*((_WORD *)v69 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v69, v66);
                  }
                  else
                  {
                    *((_DWORD *)v69 + 6) -= 2;
                  }
                }
                if (*(_DWORD *)(v64 + 24) == 2)
                {
                  if ((*(_WORD *)(v64 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v64, v66);
                }
                else
                {
                  *(_DWORD *)(v64 + 24) -= 2;
                }
LABEL_112:
                WebCore::Element::attachAttributeNodeIfNeeded(this, a2);
                v70 = *(_QWORD *)(v56 + v50);
                v71 = *((_QWORD *)a2 + 11);
                if (v70 == v71
                  || *(_QWORD *)(v70 + 24) == *(_QWORD *)(v71 + 24) && *(_QWORD *)(v70 + 32) == *(_QWORD *)(v71 + 32))
                {
                  v79 = this;
                  v61 = v49;
                  goto LABEL_130;
                }
                WebCore::Element::removeAttributeInternal((uint64_t)this, (WTF::StringImpl *)v49, 0);
                v72 = WebCore::Element::ensureUniqueElementData(this);
                v73 = *(_DWORD *)(v72 + 4);
                v74 = v73 >> 5;
                if ((v73 & 1) != 0)
                  v75 = *(uint64_t **)(v72 + 40);
                else
                  v75 = (uint64_t *)(v72 + 32);
                if ((*(_DWORD *)(v72 + 4) & 1) != 0)
                  v76 = *(unsigned int *)(v72 + 52);
                else
                  v76 = v74;
                if ((_DWORD)v76)
                {
                  v61 = 0;
                  v77 = *(_QWORD *)v6;
                  do
                  {
                    v78 = *v75;
                    if (*v75 == v77
                      || *(_QWORD *)(v78 + 24) == *(_QWORD *)(v77 + 24)
                      && *(_QWORD *)(v78 + 32) == *(_QWORD *)(v77 + 32))
                    {
                      goto LABEL_129;
                    }
                    ++v61;
                    v75 += 2;
                  }
                  while (v76 != v61);
                }
LABEL_128:
                v61 = 0xFFFFFFFFLL;
LABEL_129:
                v79 = this;
LABEL_130:
                WebCore::Element::setAttributeInternal(v79, v61, (WebCore::TreeScope *)v6, &v88, 0);
                v12 = 0;
                *(_QWORD *)a3 = v89;
                *(_DWORD *)(a3 + 16) = 0;
                goto LABEL_131;
              }
LABEL_86:
              WebCore::Element::detachAttrNodeFromElementWithValue((uint64_t)this, v12, (const WTF::AtomString *)(v56 + v50 + 8), v27);
              goto LABEL_112;
            }
          }
          else if (*(_DWORD *)(v54 + 52) > v49)
          {
            v56 = *(_QWORD *)(v54 + 40);
            if (!v12)
              goto LABEL_103;
            goto LABEL_86;
          }
          __break(0xC471u);
          JUMPOUT(0x1959CDF7CLL);
        }
        *(_DWORD *)v44 -= 2;
      }
      if (v38)
        goto LABEL_131;
      goto LABEL_67;
    }
    if ((_DWORD)v96 == 1)
    {
      v39 = v95;
      v95 = 0;
      *(_BYTE *)a3 = (_BYTE)v94;
      *(_QWORD *)(a3 + 8) = v39;
      *(_DWORD *)(a3 + 16) = 1;
      goto LABEL_58;
    }
LABEL_161:
    v80 = (WebCore::Element *)std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned int *)WebCore::Element::setAttributeNodeNS(v80, v81);
  }
  *(_BYTE *)a3 = 7;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 1;
LABEL_134:
  v89 = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v12, v8);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::Element::setAttributeNodeNS@<X0>(WebCore::Element *this@<X0>, WebCore::Attr *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v6;
  unsigned int *result;
  WTF::StringImpl *v8;
  WTF::String *v9;
  __n128 v10;
  WebCore::Node *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WebCore::Element *v14;
  BOOL v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::String *v22;
  __n128 v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WebCore::Element **v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33;
  WebCore::Element **v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  WebCore::TreeScope *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const WTF::AtomString *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  _DWORD *v55;
  _DWORD *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  int v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WebCore::Node *v64;
  WTF::StringImpl *v65;
  WebCore::Element **v66;
  int v67;
  WebCore::Element *v68;
  WTF::StringImpl *v69;
  WebCore::Element **v70;
  WTF::StringImpl **v71;
  WTF::StringImpl **v72;
  WebCore::Element **v73;
  WTF::StringImpl **v74;
  WTF::StringImpl **v75;
  WebCore::Element **v76;
  WTF::StringImpl **v77;
  WTF::StringImpl **v78;
  WebCore::Element **v79;
  WTF::StringImpl **v80;
  WTF::StringImpl ***v81;

  v6 = (unsigned __int8 *)a2 + 88;
  result = (unsigned int *)WebCore::Element::attrIfExists((uint64_t)this, (uint64_t *)a2 + 11, &v64);
  v11 = v64;
  if (v64 == a2)
  {
    *(_QWORD *)a3 = a2;
    *(_DWORD *)(a3 + 16) = 0;
    return result;
  }
  v12 = *((_QWORD *)a2 + 10);
  if (!v12)
    goto LABEL_3;
  v14 = *(WebCore::Element **)(v12 + 8);
  if (v14)
    v15 = v14 == this;
  else
    v15 = 1;
  if (v15)
  {
    v16 = *(_QWORD *)(v12 + 8);
    if (v16)
    {
      *(_DWORD *)(v16 + 24) += 2;
      WebCore::Element::getAttributeForBindings(v16, v6, 1, v9, &v63, v10);
      if (*(_DWORD *)(v16 + 24) == 2)
      {
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v16, v17);
      }
      else
      {
        *(_DWORD *)(v16 + 24) -= 2;
      }
LABEL_15:
      v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 40) + 8);
      v19 = *(_QWORD *)(v18 + 704);
      if (v19)
      {
        v20 = *(_QWORD *)(v19 + 8);
        if (v20)
          v18 = v20;
      }
      if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v18 + 192) + 136))(v18 + 192) + 464) & 0x200000000000000) == 0)
        goto LABEL_58;
      (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Element *))(*(_QWORD *)this + 104))(&v69, this);
      WebCore::trustedTypeForAttribute((WebCore *)&v69, (WTF::AtomStringImpl **)(*(_QWORD *)v6 + 24), (WTF::StringImpl **)(*((_QWORD *)this + 12) + 32), (WTF::StringImpl **)(*(_QWORD *)v6 + 32), &v61);
      v25 = v69;
      v69 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v24);
        else
          *(_DWORD *)v25 -= 2;
      }
      v26 = v61;
      if (v61)
        *(_DWORD *)v61 += 2;
      v60 = v26;
      v27 = v63;
      if (v63)
        *(_DWORD *)v63 += 2;
      v58 = v27;
      v59 = 3;
      v28 = v62;
      if (v62)
        *(_DWORD *)v62 += 2;
      v57 = v28;
      v68 = this;
      v69 = (WTF::StringImpl *)&v60;
      v70 = &v68;
      v71 = &v57;
      v72 = &v60;
      v73 = &v68;
      v74 = &v57;
      v75 = &v60;
      v76 = &v68;
      v77 = &v57;
      v78 = &v60;
      v79 = &v68;
      v80 = &v57;
      v81 = (WTF::StringImpl ***)&v69;
      std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::trustedTypesCompliantAttributeValue(WTF::String,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&,WebCore::Element *,WTF::String)::$_0,WebCore::trustedTypesCompliantAttributeValue(WTF::String,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&,WebCore::Element *,WTF::String)::$_1,WebCore::trustedTypesCompliantAttributeValue(WTF::String,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&,WebCore::Element *,WTF::String)::$_2,WebCore::trustedTypesCompliantAttributeValue(WTF::String,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&,WebCore::Element *,WTF::String)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&>(&v81, &v58, (uint64_t)&v65);
      if (v67)
      {
        if (v67 != 1)
          goto LABEL_112;
        v29 = v66;
        v66 = 0;
        LOBYTE(v69) = (_BYTE)v65;
        v70 = v29;
      }
      else
      {
        v30 = v65;
        v65 = 0;
        v69 = v30;
      }
      LODWORD(v71) = v67;
      ((void (*)(WTF::StringImpl ****, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v67])(&v81, &v65);
      v31 = v57;
      v57 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v8);
        else
          *(_DWORD *)v31 -= 2;
      }
      if (v59 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11TrustedHTMLENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13TrustedScriptENSA_ISF_EENSC_ISF_EEEENS7_INS8_16TrustedScriptURLENSA_ISJ_EENSC_ISJ_EEEENS6_10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v59])(&v65, &v58);
      v32 = v60;
      v60 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v8);
        else
          *(_DWORD *)v32 -= 2;
      }
      v33 = (int)v71;
      if (!(_DWORD)v71)
      {
        v35 = v69;
        v69 = 0;
        if (v35)
        {
          v58 = v35;
          if ((*((_BYTE *)v35 + 16) & 0x10) == 0)
          {
            WTF::AtomStringImpl::addSlowCase();
            v36 = v58;
            v35 = v65;
            v65 = 0;
            v58 = 0;
            if (v36)
            {
              if (*(_DWORD *)v36 == 2)
                WTF::StringImpl::destroy(v36, v8);
              else
                *(_DWORD *)v36 -= 2;
            }
          }
        }
        v37 = v63;
        v63 = v35;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, v8);
          else
            *(_DWORD *)v37 -= 2;
        }
        goto LABEL_49;
      }
      if ((_DWORD)v71 == 1)
      {
        v34 = v70;
        v70 = 0;
        *(_BYTE *)a3 = (_BYTE)v69;
        *(_QWORD *)(a3 + 8) = v34;
        *(_DWORD *)(a3 + 16) = 1;
LABEL_49:
        if ((_DWORD)v71 != -1)
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v71])(&v65, &v69);
        v38 = v62;
        v62 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v8);
          else
            *(_DWORD *)v38 -= 2;
        }
        v39 = v61;
        v61 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
          {
            WTF::StringImpl::destroy(v39, v8);
            if (v33)
            {
LABEL_81:
              result = (unsigned int *)v63;
              v63 = 0;
              if (result)
              {
                if (*result == 2)
                  result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
                else
                  *result -= 2;
              }
              goto LABEL_84;
            }
            goto LABEL_58;
          }
          *(_DWORD *)v39 -= 2;
        }
        if (v33)
          goto LABEL_81;
LABEL_58:
        ++WebCore::ScriptDisallowedScope::s_count;
        v40 = *((_QWORD *)this + 13);
        if (v40)
        {
          if ((*(_BYTE *)(v40 + 4) & 8) != 0)
            WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(this, (unsigned __int8 *)v8, v23, v21, v22);
          if ((*((_WORD *)this + 14) & 0x20) != 0)
            WebCore::SVGElement::synchronizeAllAttributes(this);
        }
        v41 = WebCore::Element::ensureUniqueElementData(this);
        v43 = *(_DWORD *)(v41 + 4);
        v44 = *(_DWORD *)(v41 + 52);
        v45 = v43 >> 5;
        if ((v43 & 1) != 0)
          v46 = *(uint64_t **)(v41 + 40);
        else
          v46 = (uint64_t *)(v41 + 32);
        if ((*(_DWORD *)(v41 + 4) & 1) != 0)
          v47 = v44;
        else
          v47 = v45;
        if (!(_DWORD)v47)
        {
LABEL_79:
          v48 = 0xFFFFFFFFLL;
          goto LABEL_80;
        }
        v48 = 0;
        v49 = *(_QWORD *)v6;
        v50 = (const WTF::AtomString *)(*(_QWORD *)(v41 + 40) + 8);
        while (1)
        {
          v51 = *v46;
          if (*v46 == v49
            || *(_QWORD *)(v51 + 24) == *(_QWORD *)(v49 + 24) && *(_QWORD *)(v51 + 32) == *(_QWORD *)(v49 + 32))
          {
            break;
          }
          ++v48;
          v50 = (const WTF::AtomString *)((char *)v50 + 16);
          v46 += 2;
          if (v47 == v48)
            goto LABEL_79;
        }
        if (v11)
        {
          if (v44 > v48)
          {
            WebCore::Element::detachAttrNodeFromElementWithValue((uint64_t)this, v11, v50, v42);
LABEL_80:
            --WebCore::ScriptDisallowedScope::s_count;
            WebCore::Element::attachAttributeNodeIfNeeded(this, a2);
            WebCore::Element::setAttributeInternal(this, v48, (WebCore::TreeScope *)v6, &v63, 0);
            *(_QWORD *)a3 = v11;
            *(_DWORD *)(a3 + 16) = 0;
            v11 = 0;
            goto LABEL_81;
          }
        }
        else
        {
          v52 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
          *(_DWORD *)(v52 + 24) += 2;
          if (v44 > v48)
          {
            v53 = bmalloc::api::isoAllocate();
            v11 = (WebCore::Node *)v53;
            *(_OWORD *)(v53 + 8) = xmmword_1968BC9D0;
            *(_QWORD *)(v53 + 24) = 0x200000000002;
            *(_QWORD *)(v53 + 32) = 0;
            *(_QWORD *)(v53 + 40) = v52 + 96;
            *(_OWORD *)(v53 + 48) = 0u;
            *(_OWORD *)(v53 + 64) = 0u;
            ++*(_DWORD *)(v52 + 3324);
            *(_QWORD *)v53 = off_1E33A0600;
            *(_QWORD *)(v53 + 80) = 0;
            v55 = *(_DWORD **)v6;
            if (*(_QWORD *)v6)
              ++*v55;
            *(_QWORD *)(v53 + 88) = v55;
            v56 = *(_DWORD **)v50;
            if (*(_QWORD *)v50)
              *v56 += 2;
            *(_QWORD *)(v53 + 96) = v56;
            *(_QWORD *)(v53 + 104) = 0;
            v64 = (WebCore::Node *)v53;
            if (*(_DWORD *)(v52 + 24) == 2)
            {
              if ((*(_WORD *)(v52 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v52, v54);
            }
            else
            {
              *(_DWORD *)(v52 + 24) -= 2;
            }
            goto LABEL_80;
          }
        }
LABEL_113:
        __break(0xC471u);
        JUMPOUT(0x1959CE5E4);
      }
LABEL_112:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_113;
    }
LABEL_3:
    v13 = (WTF::StringImpl *)*((_QWORD *)a2 + 12);
    if (v13)
      *(_DWORD *)v13 += 2;
    v63 = v13;
    goto LABEL_15;
  }
  *(_BYTE *)a3 = 7;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 1;
LABEL_84:
  v64 = 0;
  if (v11)
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v11, v8);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::Element::removeAttributeNode@<X0>(uint64_t this@<X0>, WebCore::Attr *a2@<X1>, uint64_t a3@<X2>, WTF::String *a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v7 = this;
  v9 = *((_QWORD *)a2 + 10);
  if (v9)
    v9 = *(_QWORD *)(v9 + 8);
  if (v9 != this)
    goto LABEL_17;
  v10 = *(_QWORD *)(this + 104);
  if (!v10)
    goto LABEL_17;
  if ((*(_BYTE *)(v10 + 4) & 8) != 0)
    this = (uint64_t)WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)this, (unsigned __int8 *)a2, a6, a3, a4);
  if ((*(_WORD *)(v7 + 28) & 0x20) != 0)
    this = (uint64_t)WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v7);
  v11 = *(_QWORD *)(v7 + 104);
  if (!v11
    || ((v12 = *(_DWORD *)(v11 + 4), (v12 & 1) != 0)
      ? (v13 = *(_QWORD *)(v11 + 40), v14 = *(_DWORD *)(v11 + 52))
      : (v13 = v11 + 32, v14 = v12 >> 5),
        !v14))
  {
LABEL_17:
    *(_BYTE *)a5 = 5;
    *(_QWORD *)(a5 + 8) = 0;
    v20 = 1;
LABEL_18:
    *(_DWORD *)(a5 + 16) = v20;
    return this;
  }
  v15 = 0;
  v16 = 0;
  v17 = *((_QWORD *)a2 + 11);
  v18 = 16 * v14;
  while (1)
  {
    v19 = *(_QWORD *)(v13 + v16);
    if (v19 == v17 || *(_QWORD *)(v19 + 24) == *(_QWORD *)(v17 + 24) && *(_QWORD *)(v19 + 32) == *(_QWORD *)(v17 + 32))
      break;
    v16 += 16;
    v15 = (v15 + 1);
    if (v18 == v16)
      goto LABEL_17;
  }
  *((_DWORD *)a2 + 6) += 2;
  if ((v12 & 1) != 0)
  {
    if (*(_DWORD *)(v11 + 52) > v15)
    {
      v21 = *(_QWORD *)(v11 + 40);
      goto LABEL_24;
    }
  }
  else if (v15 < v12 >> 5)
  {
    v21 = v11 + 32;
LABEL_24:
    WebCore::Element::detachAttrNodeFromElementWithValue(v7, a2, (const WTF::AtomString *)(v21 + v16 + 8), a4);
    this = WebCore::Element::removeAttributeInternal(v7, v15, 0);
    v20 = 0;
    *(_QWORD *)a5 = a2;
    goto LABEL_18;
  }
  this = 332;
  __break(0xC471u);
  return this;
}

uint64_t WebCore::Element::parseAttributeName@<X0>(WTF::StringImpl **this@<X0>, const WTF::AtomString *a2@<X1>, uint64_t a3@<X8>, int32x4_t a4@<Q0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  char v17;

  WebCore::Document::parseQualifiedName(this, a2, (uint64_t)&v14, a4);
  v6 = v16;
  if (v16)
  {
    if (v16 == 1)
    {
      v10 = v15;
      v15 = 0;
      *(_BYTE *)a3 = v14;
      *(_QWORD *)(a3 + 8) = v10;
      *(_DWORD *)(a3 + 16) = 1;
      return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13QualifiedNameENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v6])(&v17, &v14);
    }
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_23;
  }
  v7 = v14;
  v14 = 0;
  v8 = *(_QWORD *)(v7 + 16);
  if (v8 && *(_DWORD *)(v8 + 4) && !*(_QWORD *)(v7 + 32)
    || v8 == WebCore::xmlAtomData && *(_QWORD *)(v7 + 32) != WebCore::XMLNames::xmlNamespaceURI)
  {
LABEL_12:
    *(_BYTE *)a3 = 11;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    if (*(_DWORD *)v7 != 1)
    {
      --*(_DWORD *)v7;
      return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13QualifiedNameENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v6])(&v17, &v14);
    }
LABEL_23:
    v11 = v6;
    WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v7);
    WTF::fastFree(v12, v13);
    v6 = v11;
    return ((uint64_t (*)(_QWORD, _QWORD))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13QualifiedNameENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v6])(&v17, &v14);
  }
  if (v8 == WebCore::xmlnsAtomData || (!v8 || !*(_DWORD *)(v8 + 4)) && *(_QWORD *)(v7 + 24) == WebCore::xmlnsAtomData)
  {
    if (*(_QWORD *)(v7 + 32) != WebCore::XMLNSNames::xmlnsNamespaceURI)
      goto LABEL_12;
  }
  else if (*(_QWORD *)(v7 + 32) == WebCore::XMLNSNames::xmlnsNamespaceURI)
  {
    goto LABEL_12;
  }
  *(_QWORD *)a3 = v7;
  *(_DWORD *)(a3 + 16) = 0;
  return ((uint64_t (*)(_QWORD, _QWORD))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13QualifiedNameENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v6])(&v17, &v14);
}

void *WebCore::Element::setAttributeNS@<X0>(WebCore::Element *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::AtomString *a3@<X2>, const WTF::AtomString *a4@<X3>, _QWORD *a5@<X8>, int32x4_t a6@<Q0>)
{
  _DWORD *v6;
  void *result;
  _DWORD *v8;
  int v9;
  char v10;

  v6 = *(_DWORD **)a4;
  if (*(_QWORD *)a4)
    *v6 += 2;
  v8 = v6;
  v9 = 3;
  result = WebCore::Element::setAttributeNS(a2, a3, this, (uint64_t)&v8, a5, a6);
  if (v9 != -1)
    return (void *)((uint64_t (*)(char *, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11TrustedHTMLENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13TrustedScriptENSA_ISF_EENSC_ISF_EEEENS7_INS8_16TrustedScriptURLENSA_ISJ_EENSC_ISJ_EEEENS6_10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v9])(&v10, &v8);
  return result;
}

void *WebCore::Element::setAttributeNS@<X0>(WTF::StringImpl **this@<X1>, WTF::AtomString *a2@<X2>, WebCore::Element *a3@<X0>, uint64_t a4@<X3>, _QWORD *a5@<X8>, int32x4_t a6@<Q0>)
{
  WebCore::QualifiedName::QualifiedNameImpl **v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl **v18;
  WTF::AtomStringImpl **v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  int v25;
  WTF::StringImpl *v26;
  uint64_t (*v27)();
  WTF::StringImpl *v28;
  __n128 v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF *v32;
  void *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF *v44;
  void *v45;
  WTF *v46;
  void *v47;
  WebCore::UniqueElementData *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  char v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  char v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  unsigned int v62;
  WTF::StringImpl *v63;
  WebCore::QualifiedName::QualifiedNameImpl **v64;
  int v65;
  WebCore::QualifiedName::QualifiedNameImpl *v66;
  WTF::StringImpl *v67;
  WebCore::QualifiedName::QualifiedNameImpl **v68;
  WTF::StringImpl **v69;
  WTF::StringImpl **v70;
  WebCore::QualifiedName::QualifiedNameImpl **v71;
  WTF::StringImpl **v72;
  WTF::StringImpl **v73;
  WebCore::QualifiedName::QualifiedNameImpl **v74;
  WTF::StringImpl **v75;
  WTF::StringImpl **v76;
  WebCore::QualifiedName::QualifiedNameImpl **v77;
  WTF::StringImpl **v78;
  WTF::StringImpl **v79;

  WebCore::Element::parseAttributeName(this, a2, (uint64_t)&v60, a6);
  v10 = v62;
  if (!v62)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 5) + 8) + 40) + 8);
    v13 = *(_QWORD *)(v12 + 704);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
        v12 = v14;
    }
    if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v12 + 192) + 136))(v12 + 192) + 464) & 0x200000000000000) == 0)
    {
      v16 = v60;
      v60 = 0;
      v67 = v16;
      if (*(_DWORD *)(a4 + 8) != 3)
        goto LABEL_78;
      WebCore::Element::setAttribute(a3, (const WebCore::QualifiedName *)&v67, (WTF::StringImpl **)a4, 0, &v57, v15);
      if (v59 && v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, v17);
        else
          *(_DWORD *)v58 -= 2;
      }
      v18 = (WTF::StringImpl **)v67;
      v67 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v18);
          WTF::fastFree(v32, v33);
        }
        else
        {
          --*(_DWORD *)v18;
        }
      }
LABEL_65:
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      return (void *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13QualifiedNameENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v10])(&v67, &v60);
    }
    v19 = (WTF::AtomStringImpl **)v60;
    if (v60)
      ++*(_DWORD *)v60;
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Element *))(*(_QWORD *)a3 + 104))(&v67, a3);
    WebCore::trustedTypeForAttribute((WebCore *)&v67, v19 + 3, (WTF::StringImpl **)(*((_QWORD *)a3 + 12) + 32), v19 + 4, &v55);
    v21 = v67;
    v67 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v55;
    if (v55)
      *(_DWORD *)v55 += 2;
    v54 = v22;
    v23 = v56;
    if (v56)
      *(_DWORD *)v56 += 2;
    v53 = v23;
    v66 = a3;
    v67 = (WTF::StringImpl *)&v54;
    v68 = &v66;
    v69 = &v53;
    v70 = &v54;
    v71 = &v66;
    v72 = &v53;
    v73 = &v54;
    v74 = &v66;
    v75 = &v53;
    v76 = &v54;
    v77 = &v66;
    v78 = &v53;
    v24 = *(unsigned int *)(a4 + 8);
    if ((_DWORD)v24 == -1)
      goto LABEL_78;
    v79 = &v67;
    ((void (*)(WTF::StringImpl **__return_ptr, WTF::StringImpl ***, uint64_t))off_1E33A4538[v24])(&v63, &v79, a4);
    v25 = v65;
    if (v65)
    {
      if (v65 != 1)
        goto LABEL_78;
      LOBYTE(v26) = (_BYTE)v63;
      v6 = v64;
      v64 = 0;
      LOBYTE(v67) = (_BYTE)v63;
      v68 = v6;
    }
    else
    {
      v26 = v63;
      v63 = 0;
      v67 = v26;
    }
    LODWORD(v69) = v65;
    v27 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v65];
    ((void (*)(WTF::StringImpl ***, WTF::StringImpl **))v27)(&v79, &v63);
    v30 = v53;
    v53 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v28);
      else
        *(_DWORD *)v30 -= 2;
    }
    v31 = v54;
    v54 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::destroy(v31, v28);
        if (v25)
          goto LABEL_37;
        goto LABEL_42;
      }
      *(_DWORD *)v31 -= 2;
    }
    if (v25)
    {
LABEL_37:
      v68 = 0;
      *(_BYTE *)a5 = (_BYTE)v26;
      a5[1] = v6;
      *((_BYTE *)a5 + 16) = 1;
      goto LABEL_55;
    }
LABEL_42:
    v60 = 0;
    v34 = v67;
    v66 = (WebCore::QualifiedName::QualifiedNameImpl *)v19;
    v67 = 0;
    if (v34)
    {
      v79 = (WTF::StringImpl **)v34;
      if ((*((_BYTE *)v34 + 16) & 0x10) == 0)
      {
        WTF::AtomStringImpl::addSlowCase();
        v36 = (WTF::StringImpl *)v79;
        v34 = v63;
        v63 = 0;
        v79 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, v35);
          else
            *(_DWORD *)v36 -= 2;
        }
      }
    }
    v63 = v34;
    WebCore::Element::setAttribute(a3, (const WebCore::QualifiedName *)&v66, &v63, 0, &v50, v29);
    if (v52 && v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v37);
      else
        *(_DWORD *)v51 -= 2;
    }
    v38 = v63;
    v63 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v37);
      else
        *(_DWORD *)v38 -= 2;
    }
    v39 = (WTF::StringImpl **)v66;
    v66 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v39);
        WTF::fastFree(v46, v47);
      }
      else
      {
        --*(_DWORD *)v39;
      }
    }
LABEL_55:
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))v27)(&v63, &v67);
    v41 = v56;
    v56 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v40);
      else
        *(_DWORD *)v41 -= 2;
    }
    v42 = v55;
    v55 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
      {
        WTF::StringImpl::destroy(v42, v40);
        if (!v19)
          goto LABEL_64;
        goto LABEL_62;
      }
      *(_DWORD *)v42 -= 2;
    }
    if (!v19)
      goto LABEL_64;
LABEL_62:
    if (*(_DWORD *)v19 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
      WTF::fastFree(v44, v45);
    }
    else
    {
      --*(_DWORD *)v19;
    }
LABEL_64:
    if (v25)
      return (void *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13QualifiedNameENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v10])(&v67, &v60);
    goto LABEL_65;
  }
  if (v62 == 1)
  {
    v11 = v61;
    v61 = 0;
    *(_BYTE *)a5 = (_BYTE)v60;
    a5[1] = v11;
    *((_BYTE *)a5 + 16) = 1;
    return (void *)((uint64_t (*)(_QWORD, _QWORD))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13QualifiedNameENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v10])(&v67, &v60);
  }
LABEL_78:
  v48 = (WebCore::UniqueElementData *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::UniqueElementData::removeAttribute(v48, v49);
}

void *WebCore::UniqueElementData::removeAttribute(WebCore::UniqueElementData *this, WTF::StringImpl *a2)
{
  WTF::StringImpl ***v3;
  WTF::StringImpl *v4;
  WTF::StringImpl **v5;
  void *result;
  WTF *v7;
  void *v8;

  v3 = (WTF::StringImpl ***)(*((_QWORD *)this + 5) + 16 * a2);
  v4 = (WTF::StringImpl *)v3[1];
  v3[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *v3;
  *v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
      WTF::fastFree(v7, v8);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  result = memmove(v3, v3 + 2, *((_QWORD *)this + 5) + 16 * *((unsigned int *)this + 13) - (_QWORD)(v3 + 2));
  --*((_DWORD *)this + 13);
  return result;
}

uint64_t WebCore::Element::removeAttribute(WebCore::Element *this, const WTF::AtomString *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  const WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  char v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  v2 = *((_QWORD *)this + 13);
  if (!v2)
    return 0;
  if ((*((_WORD *)this + 14) & 0x10) != 0 && (*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3358) & 1) != 0)
  {
    WTF::AtomString::convertToASCIILowercase(a2);
    v2 = *((_QWORD *)this + 13);
  }
  else
  {
    v4 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v4 += 2;
    v21 = v4;
  }
  v5 = *(_DWORD *)(v2 + 4);
  if (v2 && (v5 & 1) != 0)
  {
    v6 = *(_DWORD *)(v2 + 52);
    if (!v6)
      goto LABEL_32;
    v7 = *(WTF::StringImpl **)(v2 + 40);
  }
  else
  {
    if (v5 < 0x20)
      goto LABEL_32;
    v6 = v5 >> 5;
    v7 = (WTF::StringImpl *)(v2 + 32);
  }
  v8 = v21;
  if (v21)
    *(_DWORD *)v21 += 2;
  v9 = 0;
  v10 = v6;
  do
  {
    if (*(_QWORD *)(*(_QWORD *)v7 + 16))
    {
      v19 = v7;
      v20 = v10;
      v14 = v8;
      WebCore::QualifiedName::toString(v7, &v22);
      v18 = v14;
      v16 = WTF::equal(v22, v14, v15);
      v17 = v22;
      v22 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, a2);
        else
          *(_DWORD *)v17 -= 2;
      }
      v8 = v18;
      v7 = v19;
      v10 = v20;
      if ((v16 & 1) != 0)
        goto LABEL_17;
    }
    else if (*(WTF::StringImpl **)(*(_QWORD *)v7 + 24) == v8)
    {
      goto LABEL_17;
    }
    ++v9;
    v7 = (WTF::StringImpl *)((char *)v7 + 16);
  }
  while (v10 != v9);
  v9 = 0xFFFFFFFFLL;
LABEL_17:
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  if ((_DWORD)v9 != -1)
  {
    WebCore::Element::removeAttributeInternal((uint64_t)this, (WTF::StringImpl *)v9, 0);
    v11 = 1;
LABEL_22:
    v12 = v21;
    goto LABEL_23;
  }
LABEL_32:
  v12 = v21;
  if (v21 == *(WTF::StringImpl **)(WebCore::HTMLNames::styleAttr + 24))
  {
    if ((*(_BYTE *)(*((_QWORD *)this + 13) + 4) & 8) != 0 && (*((_WORD *)this + 14) & 0x70) != 0)
      WebCore::StyledElement::removeAllInlineStyleProperties(this, a2);
    v11 = 0;
    goto LABEL_22;
  }
  v11 = 0;
LABEL_23:
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  return v11;
}

uint64_t WebCore::Element::removeAttributeNS(WebCore::Element *this, WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF *v7;
  void *v8;
  WebCore::QualifiedName::QualifiedNameImpl *v9;

  WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v9, MEMORY[0x1E0CBF2F8], a3, a2);
  v4 = WebCore::Element::removeAttribute(this, (const WebCore::QualifiedName *)&v9);
  v5 = (WTF::StringImpl **)v9;
  v9 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
      WTF::fastFree(v7, v8);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  return v4;
}

uint64_t WebCore::Element::getAttributeNode@<X0>(uint64_t this@<X0>, const WTF::AtomString *a2@<X1>, uint64_t a3@<X2>, WTF::String *a4@<X3>, WTF::StringImpl **a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  WTF::StringImpl *v22;
  const WTF::StringImpl *v23;
  char v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  v7 = *(_QWORD *)(this + 104);
  if (!v7)
    goto LABEL_27;
  v9 = this;
  if ((*(_BYTE *)(v7 + 4) & 8) == 0)
    goto LABEL_3;
  if ((*(_WORD *)(this + 28) & 0x10) != 0 && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(this + 40) + 8) + 3358) & 1) != 0)
  {
    this = WTF::equalLettersIgnoringASCIICase((uint64_t *)a2, "style", 6uLL);
    if ((this & 1) != 0)
      goto LABEL_43;
  }
  else if (*(_QWORD *)a2 == *(_QWORD *)(WebCore::HTMLNames::styleAttr + 24))
  {
LABEL_43:
    this = (uint64_t)WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)v9, (unsigned __int8 *)a2, a6, a3, a4);
    goto LABEL_7;
  }
LABEL_3:
  if ((*(_WORD *)(v9 + 28) & 0x20) != 0)
  {
    WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v30, MEMORY[0x1E0CBF2F8], (WTF::StringImpl **)a2, MEMORY[0x1E0CBF2F8]);
    WebCore::SVGElement::synchronizeAttribute((WebCore::SVGElement *)v9, &v30);
    this = (uint64_t)v30;
    v30 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)this);
        this = WTF::fastFree(v20, v21);
      }
      else
      {
        --*(_DWORD *)this;
      }
    }
  }
LABEL_7:
  v10 = *(_QWORD *)(v9 + 104);
  if ((*(_WORD *)(v9 + 28) & 0x10) != 0)
    v11 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 8) + 3358) & 1;
  else
    v11 = 0;
  v12 = *(_DWORD *)(v10 + 4);
  if (v10 && (v12 & 1) != 0)
  {
    v13 = *(_DWORD *)(v10 + 52);
    if (!v13)
      goto LABEL_27;
    v14 = *(WTF::StringImpl **)(v10 + 40);
  }
  else
  {
    if (v12 < 0x20)
      goto LABEL_27;
    v13 = v12 >> 5;
    v14 = (WTF::StringImpl *)(v10 + 32);
  }
  if (v11)
  {
    v27 = v13;
    v22 = v14;
    WTF::AtomString::convertToASCIILowercase(a2);
    v13 = v27;
    v14 = v22;
  }
  else
  {
    v15 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v15 += 2;
    v30 = v15;
  }
  v16 = 0;
  v17 = v13;
  do
  {
    if (*(_QWORD *)(*(_QWORD *)v14 + 16))
    {
      v26 = v14;
      v28 = v17;
      WebCore::QualifiedName::toString(v14, &v29);
      v24 = WTF::equal(v29, v30, v23);
      v25 = v29;
      v29 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, a2);
        else
          *(_DWORD *)v25 -= 2;
      }
      v14 = v26;
      v17 = v28;
      if ((v24 & 1) != 0)
        goto LABEL_22;
    }
    else
    {
      this = *(_QWORD *)(*(_QWORD *)v14 + 24);
      if ((WTF::StringImpl *)this == v30)
        goto LABEL_23;
    }
    ++v16;
    v14 = (WTF::StringImpl *)((char *)v14 + 16);
  }
  while (v17 != v16);
  LODWORD(v16) = -1;
LABEL_22:
  this = (uint64_t)v30;
LABEL_23:
  v30 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
    else
      *(_DWORD *)this -= 2;
  }
  if ((_DWORD)v16 == -1)
    goto LABEL_27;
  v18 = *(_DWORD *)(v10 + 4);
  if (v10 && (v18 & 1) != 0)
  {
    if (*(_DWORD *)(v10 + 52) <= v16)
      goto LABEL_47;
    v19 = *(_QWORD *)(v10 + 40);
    if (v19)
      goto LABEL_32;
LABEL_27:
    *a5 = 0;
    return this;
  }
  if (v16 >= v18 >> 5)
  {
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x1959CF2ECLL);
  }
  v19 = v10 + 32;
LABEL_32:
  this = (uint64_t)WebCore::Element::ensureAttr((WebCore::TreeScope **)v9, (const WebCore::QualifiedName *)(v19 + 16 * v16), (uint64_t *)&v30);
  *a5 = v30;
  return this;
}

WebCore::QualifiedName::QualifiedNameImpl *WebCore::Element::getAttributeNodeNS@<X0>(WebCore::QualifiedName::QualifiedNameImpl *this@<X0>, WTF::StringImpl **a2@<X1>, WTF::StringImpl **a3@<X2>, uint64_t *a4@<X8>)
{
  WebCore::QualifiedName::QualifiedNameImpl *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  WTF::String *v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  const WebCore::QualifiedName *v13;
  WebCore::QualifiedName::QualifiedNameImpl *v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  WebCore::QualifiedName::QualifiedNameImpl *v19;

  if (*((_QWORD *)this + 13))
  {
    v5 = this;
    WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v19, MEMORY[0x1E0CBF2F8], a3, a2);
    v10 = *((_QWORD *)v5 + 13);
    if (v10)
    {
      if (v19 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::styleAttr
        && (*(_BYTE *)(v10 + 4) & 8) != 0)
      {
        WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(v5, v6, v9, v7, v8);
      }
      else if ((*((_WORD *)v5 + 14) & 0x20) != 0)
      {
        WebCore::SVGElement::synchronizeAttribute(v5, &v19);
      }
    }
    v11 = *((_QWORD *)v5 + 13);
    v12 = *(_DWORD *)(v11 + 4);
    if (v11 && (v12 & 1) != 0)
    {
      v13 = *(const WebCore::QualifiedName **)(v11 + 40);
      LODWORD(v11) = *(_DWORD *)(v11 + 52);
    }
    else
    {
      v13 = (const WebCore::QualifiedName *)(v11 + 32);
      LODWORD(v11) = v12 >> 5;
    }
    this = v19;
    if ((_DWORD)v11)
    {
      v11 = v11;
      while (1)
      {
        v14 = *(WebCore::QualifiedName::QualifiedNameImpl **)v13;
        if (*(WebCore::QualifiedName::QualifiedNameImpl **)v13 == v19
          || *((_QWORD *)v14 + 3) == *((_QWORD *)v19 + 3) && *((_QWORD *)v14 + 4) == *((_QWORD *)v19 + 4))
        {
          break;
        }
        v13 = (const WebCore::QualifiedName *)((char *)v13 + 16);
        if (!--v11)
        {
          *a4 = 0;
          v19 = 0;
          goto LABEL_21;
        }
      }
      WebCore::Element::ensureAttr((WebCore::TreeScope **)v5, v13, &v18);
      v15 = v18;
      this = v19;
    }
    else
    {
      v15 = 0;
    }
    *a4 = v15;
    v19 = 0;
    if (this)
    {
LABEL_21:
      if (*(_DWORD *)this == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)this);
        return (WebCore::QualifiedName::QualifiedNameImpl *)WTF::fastFree(v16, v17);
      }
      else
      {
        --*(_DWORD *)this;
      }
    }
  }
  else
  {
    *a4 = 0;
  }
  return this;
}

BOOL WebCore::Element::hasAttribute(WebCore::Element *this, const WTF::AtomString *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  WTF::StringImpl **v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unsigned int v18;
  WTF *v19;
  void *v20;
  WTF::StringImpl *v21;
  const WTF::StringImpl *v22;
  char v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;

  v5 = *((_QWORD *)this + 13);
  if (!v5)
    return 0;
  if ((*(_BYTE *)(v5 + 4) & 8) == 0)
    goto LABEL_3;
  if ((*((_WORD *)this + 14) & 0x10) != 0 && (*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3358) & 1) != 0)
  {
    if ((WTF::equalLettersIgnoringASCIICase((uint64_t *)a2, "style", 6uLL) & 1) != 0)
      goto LABEL_41;
  }
  else if (*(_QWORD *)a2 == *(_QWORD *)(WebCore::HTMLNames::styleAttr + 24))
  {
LABEL_41:
    WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(this, (unsigned __int8 *)a2, a5, a3, a4);
    goto LABEL_7;
  }
LABEL_3:
  if ((*((_WORD *)this + 14) & 0x20) != 0)
  {
    WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v29, MEMORY[0x1E0CBF2F8], (WTF::StringImpl **)a2, MEMORY[0x1E0CBF2F8]);
    WebCore::SVGElement::synchronizeAttribute(this, &v29);
    v8 = (WTF::StringImpl **)v29;
    v29 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v8);
        WTF::fastFree(v19, v20);
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
  }
LABEL_7:
  v9 = *((_QWORD *)this + 13);
  if ((*((_WORD *)this + 14) & 0x10) != 0)
    v10 = *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3358) & 1;
  else
    v10 = 0;
  v11 = *(_DWORD *)(v9 + 4);
  if (v9 && (v11 & 1) != 0)
  {
    LODWORD(v12) = *(_DWORD *)(v9 + 52);
    if ((_DWORD)v12)
    {
      v13 = *(WTF::StringImpl **)(v9 + 40);
      goto LABEL_13;
    }
    return 0;
  }
  if (v11 < 0x20)
    return 0;
  LODWORD(v12) = v11 >> 5;
  v13 = (WTF::StringImpl *)(v9 + 32);
LABEL_13:
  if (v10)
  {
    v26 = v12;
    v21 = v13;
    WTF::AtomString::convertToASCIILowercase(a2);
    LODWORD(v12) = v26;
    v13 = v21;
  }
  else
  {
    v14 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v14 += 2;
    v29 = v14;
  }
  v15 = 0;
  v12 = v12;
  do
  {
    if (*(_QWORD *)(*(_QWORD *)v13 + 16))
    {
      v25 = v13;
      v27 = v12;
      WebCore::QualifiedName::toString(v13, &v28);
      v23 = WTF::equal(v28, v29, v22);
      v24 = v28;
      v28 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, a2);
        else
          *(_DWORD *)v24 -= 2;
      }
      v13 = v25;
      v12 = v27;
      if ((v23 & 1) != 0)
        goto LABEL_22;
    }
    else
    {
      v16 = *(WTF::StringImpl **)(*(_QWORD *)v13 + 24);
      if (v16 == v29)
        goto LABEL_23;
    }
    ++v15;
    v13 = (WTF::StringImpl *)((char *)v13 + 16);
  }
  while (v12 != v15);
  LODWORD(v15) = -1;
LABEL_22:
  v16 = v29;
LABEL_23:
  v29 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  if ((_DWORD)v15 == -1)
    return 0;
  v18 = *(_DWORD *)(v9 + 4);
  if (!v9 || (v18 & 1) == 0)
  {
    if (v15 < v18 >> 5)
      return 1;
LABEL_45:
    __break(0xC471u);
    JUMPOUT(0x1959CF6C0);
  }
  if (*(_DWORD *)(v9 + 52) <= v15)
    goto LABEL_45;
  return *(_QWORD *)(v9 + 40) != 0;
}

uint64_t WebCore::Element::findFocusDelegateForTarget@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  WebCore::Element *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  WebCore::Node *v15;
  int v16;
  int v17;
  WebCore::Node *v18;

  if ((*(_WORD *)(a1 + 28) & 8) != 0 && (*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    result = *(_QWORD *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (result)
    {
      v10 = *(_DWORD *)(result + 24);
      *(_DWORD *)(result + 24) = v10 + 2;
      v11 = *(_BYTE *)(result + 192);
      if ((v11 & 2) == 0)
        *a3 = 0;
      if (v10)
      {
        *(_DWORD *)(result + 24) = v10;
      }
      else if ((*(_WORD *)(result + 30) & 0x400) == 0)
      {
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      }
      if ((v11 & 2) == 0)
        return result;
    }
  }
  result = WebCore::autoFocusDelegate((uint64_t)a3, a1, (int)a2);
  v8 = *a3;
  if (*a3)
    return result;
  *a3 = 0;
  v9 = *(_QWORD *)(a1 + 80);
  if (!v9)
    goto LABEL_7;
  while ((*(_WORD *)(v9 + 28) & 8) == 0)
  {
    v8 = 0;
    v9 = *(_QWORD *)(v9 + 56);
    if (!v9)
      goto LABEL_7;
  }
LABEL_52:
  while (1)
  {
    *(_DWORD *)(v9 + 24) += 2;
    if ((_DWORD)a2)
    {
      if ((_DWORD)a2 != 2)
        break;
    }
    result = WebCore::isProgramaticallyFocusable((WebCore *)v9, v7);
    if ((result & 1) != 0)
      goto LABEL_67;
LABEL_58:
    if ((*(_QWORD *)(v9 + 72) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_59;
    v15 = *(WebCore::Node **)((*(_QWORD *)(v9 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (!v15)
      goto LABEL_59;
    v16 = *((_DWORD *)v15 + 6);
    *((_DWORD *)v15 + 6) = v16 + 2;
    if ((*((_BYTE *)v15 + 192) & 2) == 0)
    {
      if (v16)
      {
        v17 = 0;
LABEL_40:
        *((_DWORD *)v15 + 6) = v16;
        goto LABEL_60;
      }
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef(v15, v7);
LABEL_59:
      v17 = 0;
      goto LABEL_60;
    }
    v18 = v15;
    result = WebCore::Element::findFocusDelegateForTarget(v15, a2);
    if (*a3)
    {
      v17 = 1;
    }
    else
    {
      v17 = 0;
      *a3 = 0;
    }
    v16 = *((_DWORD *)v18 + 6) - 2;
    if (*((_DWORD *)v18 + 6) != 2)
    {
      v15 = v18;
      goto LABEL_40;
    }
    if ((*((_WORD *)v18 + 15) & 0x400) == 0)
      result = (uint64_t)WebCore::Node::removedLastRef(v18, v7);
LABEL_60:
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v9, v7);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
    if (v17)
      return result;
    v12 = *(_QWORD *)(v9 + 80);
    if (!v12)
    {
      if (v9 == a1)
        goto LABEL_66;
      while (1)
      {
        v12 = *(_QWORD *)(v9 + 56);
        if (v12)
          break;
        v9 = *(_QWORD *)(v9 + 32);
        if (v9)
          v14 = v9 == a1;
        else
          v14 = 1;
        if (v14)
          goto LABEL_66;
      }
    }
    v9 = v12;
    if ((*(_WORD *)(v12 + 28) & 8) == 0)
    {
      while (v12 != a1)
      {
        while (1)
        {
          v9 = *(_QWORD *)(v12 + 56);
          if (v9)
            break;
          v12 = *(_QWORD *)(v12 + 32);
          if (v12)
            v13 = v12 == a1;
          else
            v13 = 1;
          if (v13)
            goto LABEL_66;
        }
        v12 = *(_QWORD *)(v12 + 56);
        if ((*(_WORD *)(v9 + 28) & 8) != 0)
          goto LABEL_52;
      }
LABEL_66:
      v8 = 0;
      goto LABEL_7;
    }
  }
  if ((_DWORD)a2 != 1)
    goto LABEL_58;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 568))(v9);
  if ((result & 1) == 0)
    goto LABEL_58;
LABEL_67:
  v8 = v9;
LABEL_7:
  *a3 = v8;
  return result;
}

uint64_t WebCore::autoFocusDelegate(uint64_t result, uint64_t a2, int a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  int v19;
  WebCore::Node *v20;

  v5 = (_QWORD *)result;
  if ((*(_WORD *)(a2 + 28) & 8) != 0 && (*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    result = *(_QWORD *)((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (result)
    {
      v8 = *(_DWORD *)(result + 24);
      *(_DWORD *)(result + 24) = v8 + 2;
      v9 = *(_BYTE *)(result + 192);
      if ((v9 & 2) == 0)
        *v5 = 0;
      if (v8)
      {
        *(_DWORD *)(result + 24) = v8;
      }
      else if ((*(_WORD *)(result + 30) & 0x400) == 0)
      {
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, (void *)a2);
      }
      if ((v9 & 2) == 0)
        return result;
    }
  }
  v6 = *(_QWORD *)(a2 + 80);
  if (!v6)
    goto LABEL_4;
  while ((*(_WORD *)(v6 + 28) & 8) == 0)
  {
    v7 = 0;
    v6 = *(_QWORD *)(v6 + 56);
    if (!v6)
      goto LABEL_7;
  }
  do
  {
LABEL_16:
    *(_DWORD *)(v6 + 24) += 2;
    v10 = *(_QWORD *)(v6 + 104);
    if (!v10
      || ((v11 = *(unsigned int *)(v10 + 4), (v11 & 1) != 0)
        ? (v12 = *(uint64_t **)(v10 + 40), v13 = *(unsigned int *)(v10 + 52))
        : (v12 = (uint64_t *)(v10 + 32), v13 = v11 >> 5),
          !v13))
    {
LABEL_32:
      v15 = 3;
      goto LABEL_33;
    }
    while (1)
    {
      v14 = *v12;
      if (*v12 == WebCore::HTMLNames::autofocusAttr
        || *(_QWORD *)(v14 + 24) == *(_QWORD *)(WebCore::HTMLNames::autofocusAttr + 24)
        && *(_QWORD *)(v14 + 32) == *(_QWORD *)(WebCore::HTMLNames::autofocusAttr + 32))
      {
        break;
      }
      v12 += 2;
      if (!--v13)
        goto LABEL_32;
    }
    if ((*(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_27;
    result = *(_QWORD *)((*(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (!result)
      goto LABEL_27;
    v19 = *(_DWORD *)(result + 24);
    *(_DWORD *)(result + 24) = v19 + 2;
    if ((*(_BYTE *)(result + 192) & 2) == 0)
    {
      if (v19)
      {
        *(_DWORD *)(result + 24) = v19;
LABEL_27:
        switch(a3)
        {
          case 0:
            goto LABEL_30;
          case 1:
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 568))(v6);
            if ((result & 1) != 0)
            {
LABEL_78:
              v7 = v6;
              goto LABEL_7;
            }
            break;
          case 2:
LABEL_30:
            result = WebCore::isProgramaticallyFocusable((WebCore *)v6, (WebCore::Element *)a2);
            if ((result & 1) != 0)
              goto LABEL_78;
            break;
        }
        v15 = 0;
        goto LABEL_33;
      }
      goto LABEL_74;
    }
    v20 = (WebCore::Node *)result;
    result = WebCore::Element::findFocusDelegateForTarget();
    if (!*v5)
    {
      *v5 = 0;
      if (*((_DWORD *)v20 + 6) != 2)
      {
        *((_DWORD *)v20 + 6) -= 2;
        goto LABEL_27;
      }
      result = (uint64_t)v20;
LABEL_74:
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, (void *)a2);
      goto LABEL_27;
    }
    if (*((_DWORD *)v20 + 6) == 2)
    {
      if ((*((_WORD *)v20 + 15) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef(v20, (void *)a2);
    }
    else
    {
      *((_DWORD *)v20 + 6) -= 2;
    }
    v15 = 1;
LABEL_33:
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v6, (void *)a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
    if (v15 != 3 && v15)
      return result;
    v16 = *(_QWORD *)(v6 + 80);
    if (!v16)
    {
      if (v6 == a2)
        goto LABEL_4;
      while (1)
      {
        v16 = *(_QWORD *)(v6 + 56);
        if (v16)
          break;
        v6 = *(_QWORD *)(v6 + 32);
        if (v6)
          v18 = v6 == a2;
        else
          v18 = 1;
        if (v18)
          goto LABEL_4;
      }
    }
    v6 = v16;
  }
  while ((*(_WORD *)(v16 + 28) & 8) != 0);
  while (v16 != a2)
  {
    while (1)
    {
      v6 = *(_QWORD *)(v16 + 56);
      if (v6)
        break;
      v16 = *(_QWORD *)(v16 + 32);
      if (v16)
        v17 = v16 == a2;
      else
        v17 = 1;
      if (v17)
        goto LABEL_4;
    }
    v16 = *(_QWORD *)(v16 + 56);
    if ((*(_WORD *)(v6 + 28) & 8) != 0)
      goto LABEL_16;
  }
LABEL_4:
  v7 = 0;
LABEL_7:
  *v5 = v7;
  return result;
}

uint64_t WebCore::isProgramaticallyFocusable(WebCore *this, WebCore::Element *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;

  ++WebCore::ScriptDisallowedScope::s_count;
  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v6 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v6)
    {
      v7 = *(_DWORD *)(v6 + 24);
      *(_DWORD *)(v6 + 24) = v7 + 2;
      if ((*(_BYTE *)(v6 + 192) & 2) != 0)
      {
        if (v7)
        {
          v4 = 0;
          *(_DWORD *)(v6 + 24) = v7;
          goto LABEL_5;
        }
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
LABEL_18:
        v4 = 0;
        goto LABEL_5;
      }
      if (v7)
      {
        *(_DWORD *)(v6 + 24) = v7;
      }
      else if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
      }
    }
  }
  v3 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if ((!WebCore::Style::Scope::hasPendingSheets(*(WebCore::Style::Scope **)(v3 + 1328)) || *(_BYTE *)(v3 + 3379))
    && !(*(unsigned int (**)(WebCore *))(*(_QWORD *)this + 552))(this))
  {
    goto LABEL_18;
  }
  v4 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 544))(this);
LABEL_5:
  --WebCore::ScriptDisallowedScope::s_count;
  return v4;
}

unsigned int *WebCore::Element::focus(unsigned int *this, _DWORD *a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  WebCore::SecurityOrigin *v17;
  WebCore::SecurityOrigin *v18;
  WTF::StringImpl *v19;
  const WebCore::SecurityOrigin *v20;
  int v21;
  char v22;
  _QWORD *v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  WebCore::Node *v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::Node *v32;
  uint64_t v33;
  int v34;
  WTF *v35;
  void *v36;
  WTF *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WebCore::Page *v44;
  WebCore::Node *v45;
  WebCore::Node *v46;
  WebCore::Node *v47;
  WebCore::Node *v48;
  WebCore::Node *v49;
  WebCore::Node *v50;

  if ((*((_BYTE *)this + 22) & 8) != 0)
  {
    v3 = this;
    v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    *(_DWORD *)(v4 + 24) += 2;
    if (*(unsigned int **)(v4 + 1248) == this)
    {
      v5 = *(_QWORD *)(v4 + 528);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 24);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 8);
            if (v8)
            {
              ++*(_DWORD *)v8;
              this = (unsigned int *)(*(uint64_t (**)(_QWORD, unsigned int *, _DWORD *))(**(_QWORD **)(*(_QWORD *)(v8 + 48) + 16)
                                                                                                 + 864))(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 16), this, a2);
              if (*(_DWORD *)v8 == 1)
              {
                WebCore::Page::~Page(v8);
                this = (unsigned int *)WTF::fastFree(v9, v10);
              }
              else
              {
                --*(_DWORD *)v8;
              }
            }
          }
        }
      }
LABEL_9:
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
      return this;
    }
    this[6] += 2;
    v49 = (WebCore::Node *)this;
    if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1959D0118);
      }
      if (!WebCore::Style::Scope::hasPendingSheets(*(WebCore::Style::Scope **)(v4 + 1328)) || *(_BYTE *)(v4 + 3379))
        WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v4);
    }
    if (*(_QWORD *)(*((_QWORD *)v3 + 5) + 8) != v4)
      goto LABEL_50;
    if ((*((_QWORD *)v3 + 9) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v33 = *(_QWORD *)((*((_QWORD *)v3 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
      if (v33)
      {
        v34 = *(_DWORD *)(v33 + 24);
        *(_DWORD *)(v33 + 24) = v34 + 2;
        if ((*(_BYTE *)(v33 + 192) & 2) != 0)
        {
          v39 = v33;
          v40 = *(_QWORD *)(v4 + 1248);
          if (v40)
            *(_DWORD *)(v40 + 24) += 2;
          if (WebCore::Node::containsIncludingShadowDOM((WebCore::Node *)v33, (const WebCore::Node *)v40))
          {
            v41 = *(_QWORD *)(v4 + 528);
            if (v41)
            {
              v42 = *(_QWORD *)(v41 + 8);
              if (v42)
              {
                v43 = *(_QWORD *)(v42 + 24);
                if (v43)
                {
                  v44 = *(WebCore::Page **)(v43 + 8);
                  if (v44)
                  {
                    ++*(_DWORD *)v44;
                    (*(void (**)(_QWORD, uint64_t, _DWORD *))(**(_QWORD **)(*((_QWORD *)v44 + 6) + 16)
                                                                      + 864))(*(_QWORD *)(*((_QWORD *)v44 + 6) + 16), v40, a2);
                    WTF::RefCounted<WebCore::Page>::deref(v44);
                  }
                }
              }
            }
            if (v40)
            {
              if (*(_DWORD *)(v40 + 24) == 2)
              {
                if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v40, a2);
              }
              else
              {
                *(_DWORD *)(v40 + 24) -= 2;
              }
            }
          }
          else
          {
            WebCore::Element::findFocusDelegateForTarget(v39, (void *)*((unsigned __int8 *)a2 + 3), (uint64_t *)&v50);
            WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v49, (uint64_t *)&v50);
            v47 = v50;
            v50 = 0;
            if (v47)
            {
              if (*((_DWORD *)v47 + 6) == 2)
              {
                if ((*((_WORD *)v47 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v47, a2);
              }
              else
              {
                *((_DWORD *)v47 + 6) -= 2;
              }
            }
            v48 = v49;
            if (v40)
            {
              if (*(_DWORD *)(v40 + 24) == 2)
              {
                if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v40, a2);
              }
              else
              {
                *(_DWORD *)(v40 + 24) -= 2;
              }
            }
            if (v48)
            {
              if (*(_DWORD *)(v39 + 24) == 2)
              {
                if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v39, a2);
              }
              else
              {
                *(_DWORD *)(v39 + 24) -= 2;
              }
              goto LABEL_22;
            }
          }
          if (*(_DWORD *)(v39 + 24) != 2)
          {
            *(_DWORD *)(v39 + 24) -= 2;
            goto LABEL_50;
          }
          if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
          {
            v32 = (WebCore::Node *)v39;
LABEL_63:
            WebCore::Node::removedLastRef(v32, a2);
          }
LABEL_50:
          this = (unsigned int *)v49;
          v49 = 0;
          if (this)
          {
            if (this[6] == 2)
            {
              if ((*((_WORD *)this + 15) & 0x400) == 0)
                this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
            }
            else
            {
              this[6] -= 2;
            }
          }
          goto LABEL_9;
        }
        if (v34)
        {
          *(_DWORD *)(v33 + 24) = v34;
        }
        else if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v33, a2);
        }
      }
    }
    if ((WebCore::isProgramaticallyFocusable((WebCore *)v3, (WebCore::Element *)a2) & 1) == 0)
      goto LABEL_50;
LABEL_22:
    v11 = *(_QWORD *)(v4 + 528);
    if (!v11)
      goto LABEL_44;
    v12 = *(_QWORD *)(v11 + 8);
    if (!v12)
      goto LABEL_44;
    v13 = *(_QWORD *)(v12 + 24);
    if (!v13)
      goto LABEL_44;
    v14 = *(_QWORD *)(v13 + 8);
    if (!v14)
      goto LABEL_44;
    ++*(_DWORD *)v14;
    v15 = (unsigned int *)(v12 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    if (!*(_BYTE *)(v12 + 616) && *(_QWORD *)(*(_QWORD *)(v12 + 128) + 8) != v12)
    {
      WebCore::Document::topOrigin((WebCore::Document *)v4, (WTF::StringImpl *)a2);
      v18 = v17;
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v4 + 192), v19);
      if (!WebCore::SecurityOrigin::isSameOriginDomain(v18, v20))
      {
        v25 = 1;
        do
        {
LABEL_37:
          v26 = __ldaxr(v15);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v15));
        if (!v27)
        {
          atomic_store(1u, v15);
          v45 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v45 = off_1E31FE290;
          *((_QWORD *)v45 + 1) = v15;
          v50 = v45;
          WTF::ensureOnMainThread();
          v46 = v50;
          v50 = 0;
          if (v46)
            (*(void (**)(WebCore::Node *))(*(_QWORD *)v46 + 8))(v46);
        }
        v28 = *(_DWORD *)v14 - 1;
        if (v25)
        {
          if (*(_DWORD *)v14 == 1)
          {
            WebCore::Page::~Page(v14);
            WTF::fastFree(v35, v36);
          }
          else
          {
            *(_DWORD *)v14 = v28;
          }
          goto LABEL_50;
        }
        if (*(_DWORD *)v14 == 1)
        {
          WebCore::Page::~Page(v14);
          WTF::fastFree(v37, v38);
        }
        else
        {
          *(_DWORD *)v14 = v28;
        }
LABEL_44:
        v29 = v49;
        v30 = *(unsigned __int8 *)a2;
        if (*((_BYTE *)a2 + 5))
          v31 = 3;
        else
          v31 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v49 + 848))(v49);
        (*(void (**)(WebCore::Node **__return_ptr, WebCore::Node *))(*(_QWORD *)v29 + 672))(&v50, v29);
        if (v50)
        {
          (*(void (**)(WebCore::Node *, uint64_t, uint64_t))(*(_QWORD *)v50 + 680))(v50, v30, v31);
          v32 = v50;
          v50 = 0;
          if (v32)
          {
            if (*((_DWORD *)v32 + 6) != 2)
            {
              *((_DWORD *)v32 + 6) -= 2;
              goto LABEL_50;
            }
            if ((*((_WORD *)v32 + 15) & 0x400) == 0)
              goto LABEL_63;
          }
        }
        goto LABEL_50;
      }
    }
    LODWORD(v50) = *a2;
    WORD2(v50) = *((_WORD *)a2 + 2);
    v21 = *((unsigned __int8 *)a2 + 3);
    if (v21 == 2)
    {
      if (*(_BYTE *)(v4 + 3366) == 1)
      {
        v22 = 0;
        goto LABEL_34;
      }
    }
    else if (v21 == 1)
    {
      goto LABEL_35;
    }
    v22 = 1;
LABEL_34:
    BYTE4(v50) = v22;
LABEL_35:
    v23 = *(_QWORD **)(v14 + 72);
    ++*(_DWORD *)v23;
    v24 = WebCore::FocusController::setFocusedElement(v23, (uint64_t)v49, (unsigned int *)v12, &v50);
    if (!*(_DWORD *)v23)
    {
      __break(0xC471u);
      JUMPOUT(0x1959D021CLL);
    }
    --*(_DWORD *)v23;
    v25 = v24 ^ 1;
    goto LABEL_37;
  }
  return this;
}

uint64_t WebCore::Element::focusForBindings(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 3) = 2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 656))(a1);
}

uint64_t WebCore::Element::focusAppearanceUpdateTarget@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  if (this)
    *(_DWORD *)(this + 24) += 2;
  *a2 = this;
  return this;
}

uint64_t WebCore::Element::updateFocusAppearance(WebCore::Node *a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  WebCore::Node *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15[2];
  __int128 v16;
  _BYTE v17[104];

  result = WebCore::Node::isRootEditableElement(a1);
  if ((_DWORD)result)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8) + 528);
    if (!v6)
      return result;
    v7 = *(_QWORD *)(v6 + 8);
    if (!v7)
      return result;
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    if ((WebCore::Node *)WebCore::VisibleSelection::rootEditableElement((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(v7 + 296) + 3064) + 56)) == a1)
      return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v7 + 8));
    WebCore::firstPositionInOrBeforeNode((uint64_t)a1, v10, (uint64_t)v15);
    WebCore::VisiblePosition::VisiblePosition((uint64_t)&v16, (WebCore::VisiblePosition *)v15, 1);
    WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)v17, (const WebCore::VisiblePosition *)&v16, 0);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v16);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v15);
    if (WebCore::FrameSelection::shouldChangeSelection(*(WebCore::FrameSelection **)(*(_QWORD *)(v7 + 296) + 3064), (const WebCore::VisibleSelection *)v17))
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v7 + 296) + 3064);
      LODWORD(v16) = 2;
      *(_QWORD *)((char *)&v16 + 4) = 5;
      HIDWORD(v16) = 1;
      WebCore::FrameSelection::setSelection(v11, (uint64_t)v17, 6u, v16, *((uint64_t *)&v16 + 1), 0, 0);
      WebCore::FrameSelection::revealSelection(*(_QWORD *)(*(_QWORD *)(v7 + 296) + 3064), a3, (uint64_t)&WebCore::ScrollAlignment::alignCenterIfNeeded, (BOOL *)1, 1);
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v17);
      return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v7 + 8));
    }
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v17);
    result = (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v7 + 8));
  }
  v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8) + 528);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
    {
      v14 = *(_DWORD **)(v13 + 288);
      if (v14)
      {
        ++v14[2];
        result = WebCore::LocalFrameView::scheduleScrollToFocusedElement((uint64_t)v14, a3);
        if (v14[2] == 1)
          return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
        else
          --v14[2];
      }
    }
  }
  return result;
}

unsigned int *WebCore::Element::blur(WebCore::TreeScope **this)
{
  unsigned int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  unsigned int *v12;
  unsigned int *v13;

  result = (unsigned int *)WebCore::TreeScope::focusedElementInScope(this[5]);
  if (result == (unsigned int *)this)
  {
    v3 = *((_QWORD *)this[5] + 1);
    v4 = *(_QWORD *)(v3 + 528);
    if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
    {
      v6 = (unsigned int *)(v5 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 72);
      ++*(_DWORD *)v8;
      WORD2(v13) = 0;
      LODWORD(v13) = 0;
      result = (unsigned int *)WebCore::FocusController::setFocusedElement(v8, 0, (unsigned int *)v5, &v13);
      if (!*(_DWORD *)v8)
      {
        __break(0xC471u);
        JUMPOUT(0x1959D05E0);
      }
      --*(_DWORD *)v8;
      do
      {
        v9 = __ldaxr(v6);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v6));
      if (!v10)
      {
        atomic_store(1u, v6);
        v12 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v12 = off_1E31FE290;
        *((_QWORD *)v12 + 1) = v6;
        v13 = v12;
        WTF::ensureOnMainThread();
        result = v13;
        v13 = 0;
        if (result)
          return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
    else
    {
      *(_DWORD *)(v3 + 24) += 2;
      WORD2(v13) = 0;
      LODWORD(v13) = 0;
      result = (unsigned int *)WebCore::Document::setFocusedElement((WebCore::Document *)v3, 0, &v13);
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v3, v11);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::Element::runFocusingStepsForAutofocus(WebCore::Element *this)
{
  int v2;
  __int16 v3;

  v3 = 0;
  v2 = 0;
  return (*(uint64_t (**)(WebCore::Element *, int *))(*(_QWORD *)this + 656))(this, &v2);
}

uint64_t WebCore::Element::dispatchFocusInEventIfNeeded(uint64_t result, WebCore::EventTarget **a2)
{
  uint64_t v2;
  int v3;
  WebCore::EventDispatcher *v5;
  BOOL v6;
  _QWORD *v7;
  WTF *v8;
  WebCore::EventTarget *v9;
  WebCore::Node *v10;
  WebCore::Event *v11;
  WTF::StringImpl *v12;
  WebCore::EventTarget *v13;
  WTF *v14;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8);
  v3 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v3 + 2;
  if ((*(_BYTE *)(v2 + 3293) & 0x10) != 0)
  {
    v5 = (WebCore::EventDispatcher *)result;
    if (WebCore::ScriptDisallowedScope::s_count)
    {
      v6 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
        && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 0;
      if (v6 && !webThreadDelegateMessageScopeCount)
      {
        result = 3841;
        __break(0xC471u);
        return result;
      }
    }
    v7 = (_QWORD *)(WebCore::eventNames((WebCore *)result) + 824);
    v8 = *(WTF **)(v2 + 528);
    if (v8)
    {
      v8 = (WTF *)*((_QWORD *)v8 + 1);
      if (v8)
      {
        v8 = (WTF *)*((_QWORD *)v8 + 14);
        if (v8)
          ++*(_DWORD *)v8;
      }
    }
    v14 = v8;
    v9 = *a2;
    *a2 = 0;
    v13 = v9;
    v10 = (WebCore::Node *)bmalloc::api::isoAllocate();
    WebCore::FocusEvent::FocusEvent((uint64_t)v10, v7, 1, 0, (uint64_t *)&v14, 0, (uint64_t *)&v13);
    WebCore::EventDispatcher::dispatchScopedEvent(v5, v10, v11);
    if (*((_DWORD *)v10 + 4) == 1)
      (*(void (**)(WebCore::Node *))(*(_QWORD *)v10 + 8))(v10);
    else
      --*((_DWORD *)v10 + 4);
    if (v13)
      WebCore::EventTarget::deref(v13);
    result = (uint64_t)v14;
    v14 = 0;
    if (result)
      result = (uint64_t)WTF::RefCounted<WebCore::WindowProxy>::deref((uint64_t **)result, v12);
    v3 = *(_DWORD *)(v2 + 24) - 2;
  }
  if (v3)
  {
    *(_DWORD *)(v2 + 24) = v3;
  }
  else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
  {
    return WebCore::Node::removedLastRef((WebCore::Node *)v2);
  }
  return result;
}

WebCore::Node *WebCore::Element::dispatchFocusOutEventIfNeeded(WebCore::Node *result, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  WebCore::EventDispatcher *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::Event *v14;
  uint64_t v15;
  unsigned int v16;
  _DWORD *v17;
  WebCore::Node *v18;

  v2 = *(_QWORD *)(*((_QWORD *)result + 5) + 8);
  v3 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v3 + 2;
  if ((*(_BYTE *)(v2 + 3293) & 0x20) != 0)
  {
    v5 = result;
    if (WebCore::ScriptDisallowedScope::s_count)
    {
      v6 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
        && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 0;
      if (v6 && !webThreadDelegateMessageScopeCount)
      {
        __break(0xC471u);
        JUMPOUT(0x1959D09C4);
      }
    }
    v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v7 || (result = *(WebCore::Node **)(v7 + 96)) == 0)
      result = (WebCore::Node *)WebCore::threadGlobalDataSlow(result);
    v8 = *((_QWORD *)result + 5);
    if (!v8)
    {
      v18 = result;
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)result);
      v8 = *((_QWORD *)v18 + 5);
    }
    v9 = *(_QWORD *)(v2 + 528);
    if (v9 && (v10 = *(_QWORD *)(v9 + 8)) != 0)
    {
      v11 = *(_DWORD **)(v10 + 112);
      if (v11)
        ++*v11;
    }
    else
    {
      v11 = 0;
    }
    v12 = *a2;
    *a2 = 0;
    v13 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v13);
    *(_QWORD *)(v13 + 8) = 0;
    v16 = *(_DWORD *)(v13 + 20) & 0xFFC00000 | 0x21020A | (*(_QWORD *)(v8 + 832) != 0);
    *(_DWORD *)(v13 + 16) = 1;
    *(_DWORD *)(v13 + 20) = v16;
    v17 = *(_DWORD **)(v8 + 832);
    if (v17)
      *v17 += 2;
    *(_QWORD *)(v13 + 24) = v17;
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 40) = 0;
    *(_QWORD *)(v13 + 48) = 0;
    *(_QWORD *)(v13 + 56) = v15;
    *(_QWORD *)(v13 + 64) = 0;
    *(_QWORD *)(v13 + 72) = v11;
    *(_DWORD *)(v13 + 80) = 0;
    *(_QWORD *)v13 = off_1E33A4D68;
    *(_QWORD *)(v13 + 88) = v12;
    result = WebCore::EventDispatcher::dispatchScopedEvent(v5, (WebCore::Node *)v13, v14);
    if (*(_DWORD *)(v13 + 16) == 1)
      result = (WebCore::Node *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    else
      --*(_DWORD *)(v13 + 16);
    v3 = *(_DWORD *)(v2 + 24) - 2;
  }
  if (v3)
  {
    *(_DWORD *)(v2 + 24) = v3;
  }
  else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
  {
    return (WebCore::Node *)WebCore::Node::removedLastRef((WebCore::Node *)v2);
  }
  return result;
}

uint64_t WebCore::Element::dispatchFocusEvent(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _DWORD *v18;
  uint64_t result;
  WTF *v20;
  void *v21;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 528);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 24);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          ++*(_DWORD *)v7;
          a1 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(*(_QWORD *)(v7 + 48) + 16) + 848))(*(_QWORD *)(*(_QWORD *)(v7 + 48) + 16), a1);
          if (*(_DWORD *)v7 == 1)
          {
            WebCore::Page::~Page(v7);
            a1 = (_QWORD *)WTF::fastFree(v20, v21);
          }
          else
          {
            --*(_DWORD *)v7;
          }
        }
      }
    }
  }
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow((WebCore *)a1);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v3[5] + 8) + 528);
  if (v11 && (v12 = *(_QWORD *)(v11 + 8)) != 0)
  {
    v13 = *(_DWORD **)(v12 + 112);
    if (v13)
      ++*v13;
  }
  else
  {
    v13 = 0;
  }
  v14 = *a2;
  *a2 = 0;
  v15 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v15);
  *(_QWORD *)(v15 + 8) = 0;
  v17 = *(_DWORD *)(v15 + 20) & 0xFFC00000 | 0x210208 | (*(_QWORD *)(v10 + 816) != 0);
  *(_DWORD *)(v15 + 16) = 1;
  *(_DWORD *)(v15 + 20) = v17;
  v18 = *(_DWORD **)(v10 + 816);
  if (v18)
    *v18 += 2;
  *(_QWORD *)(v15 + 40) = 0;
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 24) = v18;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 56) = v16;
  *(_QWORD *)(v15 + 64) = 0;
  *(_QWORD *)(v15 + 72) = v13;
  *(_DWORD *)(v15 + 80) = 0;
  *(_QWORD *)v15 = off_1E33A4D68;
  *(_QWORD *)(v15 + 88) = v14;
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v3 + 48))(v3, v15);
  if (*(_DWORD *)(v15 + 16) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  --*(_DWORD *)(v15 + 16);
  return result;
}

uint64_t WebCore::Element::dispatchBlurEvent(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _DWORD *v18;
  uint64_t result;
  WTF *v20;
  void *v21;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 528);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 24);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          ++*(_DWORD *)v7;
          a1 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(*(_QWORD *)(v7 + 48) + 16) + 856))(*(_QWORD *)(*(_QWORD *)(v7 + 48) + 16), a1);
          if (*(_DWORD *)v7 == 1)
          {
            WebCore::Page::~Page(v7);
            a1 = (_QWORD *)WTF::fastFree(v20, v21);
          }
          else
          {
            --*(_DWORD *)v7;
          }
        }
      }
    }
  }
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow((WebCore *)a1);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v3[5] + 8) + 528);
  if (v11 && (v12 = *(_QWORD *)(v11 + 8)) != 0)
  {
    v13 = *(_DWORD **)(v12 + 112);
    if (v13)
      ++*v13;
  }
  else
  {
    v13 = 0;
  }
  v14 = *a2;
  *a2 = 0;
  v15 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v15);
  *(_QWORD *)(v15 + 8) = 0;
  v17 = *(_DWORD *)(v15 + 20) & 0xFFC00000 | 0x210208 | (*(_QWORD *)(v10 + 304) != 0);
  *(_DWORD *)(v15 + 16) = 1;
  *(_DWORD *)(v15 + 20) = v17;
  v18 = *(_DWORD **)(v10 + 304);
  if (v18)
    *v18 += 2;
  *(_QWORD *)(v15 + 40) = 0;
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 24) = v18;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 56) = v16;
  *(_QWORD *)(v15 + 64) = 0;
  *(_QWORD *)(v15 + 72) = v13;
  *(_DWORD *)(v15 + 80) = 0;
  *(_QWORD *)v15 = off_1E33A4D68;
  *(_QWORD *)(v15 + 88) = v14;
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v3 + 48))(v3, v15);
  if (*(_DWORD *)(v15 + 16) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  --*(_DWORD *)(v15 + 16);
  return result;
}

BOOL WebCore::Element::dispatchMouseForceWillBegin(WebCore::Element *this)
{
  uint64_t v1;
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WebCore *v18;
  WTF *v19;
  WTF::StringImpl *v20;
  WTF *v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  WTF *v36;
  _DWORD *v37;
  _QWORD *v38;
  __int16 v39;
  char v40;
  char v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if ((*(_WORD *)(v1 + 3292) & 0x100) == 0)
    return 0;
  v3 = *(_QWORD *)(v1 + 528);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v6 = (unsigned int *)(v4 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(v4 + 640);
  if (*(_BYTE *)(v8 + 308))
    v9 = *(_QWORD *)(v8 + 300);
  else
    v9 = 0;
  v10 = *(_QWORD *)(v8 + 312);
  v11 = (WebCore *)WTF::WallTime::now(this);
  v38 = (_QWORD *)v12;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 254;
  v43 = v9;
  v44 = v10;
  v46 = 0;
  v45 = 0;
  v47 = 0x3FF0000000000000;
  v48 = 1;
  {
    v13 = (WTF::StringImpl *)WebCore::mousePointerEventType(void)::mouseType;
    if (!WebCore::mousePointerEventType(void)::mouseType)
      goto LABEL_14;
    v14 = *(_DWORD *)WebCore::mousePointerEventType(void)::mouseType;
  }
  else
  {
    v13 = (WTF::StringImpl *)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
    v14 = WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl + 2;
    WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::mousePointerEventType(void)::mouseType = (uint64_t)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
  }
  *(_DWORD *)v13 = v14 + 2;
LABEL_14:
  v49 = v13;
  v50 = 1;
  v51 = 0;
  v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v15 || (v16 = *(_QWORD *)(v15 + 96)) == 0)
    v16 = WebCore::threadGlobalDataSlow(v11);
  v17 = *(_QWORD *)(v16 + 40);
  if (!v17)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v16);
    v17 = *(_QWORD *)(v16 + 40);
  }
  v18 = (WebCore *)(v17 + 2440);
  v19 = *(WTF **)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v19)
  {
    v19 = (WTF *)*((_QWORD *)v19 + 1);
    if (v19)
    {
      v19 = (WTF *)*((_QWORD *)v19 + 14);
      if (v19)
        ++*(_DWORD *)v19;
    }
  }
  v36 = v19;
  WebCore::MouseEvent::create(v18, (uint64_t *)&v36, (uint64_t *)&v38, 0, 0, (uint64_t *)&v37);
  v21 = v36;
  v36 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 1)
    {
      v30 = (uint64_t *)*((_QWORD *)v21 + 2);
      *((_QWORD *)v21 + 2) = 0;
      if (v30)
      {
        if (*v30)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v30, v20);
        WTF::fastFree((WTF *)v30, v20);
      }
      v31 = (unsigned int *)*((_QWORD *)v21 + 1);
      *((_QWORD *)v21 + 1) = 0;
      if (v31)
      {
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          atomic_store(1u, v31);
          WTF::fastFree((WTF *)v31, v20);
        }
      }
      WTF::fastFree(v21, v20);
    }
    else
    {
      --*(_DWORD *)v21;
    }
  }
  v22 = v37;
  v23 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = v23 + 2;
  v24 = *((_QWORD *)v22 + 6);
  if ((WebCore::Element *)v24 == this)
  {
    if ((*((_BYTE *)this + 22) & 2) != 0)
    {
      if (v23)
      {
        *((_DWORD *)this + 6) = v23;
      }
      else if ((*((_WORD *)this + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(this, v20);
      }
    }
    else
    {
      (*(void (**)(WebCore::Element *))(*(_QWORD *)this + 96))(this);
    }
  }
  else
  {
    *((_QWORD *)v22 + 6) = this;
    if (!v24)
      goto LABEL_43;
    if ((*(_BYTE *)(v24 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v24 + 24) == 2)
      {
        if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v24, v20);
      }
      else
      {
        *(_DWORD *)(v24 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 96))(v24);
    }
    if (*((_QWORD *)v22 + 6))
LABEL_43:
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 176))(v22);
  }
  (*(void (**)(WebCore::Element *, _DWORD *))(*(_QWORD *)this + 48))(this, v22);
  v2 = (v22[5] & 0xC0) != 0;
  if (v22[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
  else
    --v22[4];
  v26 = v49;
  v49 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v25);
    else
      *(_DWORD *)v26 -= 2;
  }
  do
  {
    v27 = __ldaxr(v6);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, v6));
  if (!v28)
  {
    atomic_store(1u, v6);
    v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v34 = off_1E31FE290;
    v34[1] = v6;
    v38 = v34;
    WTF::ensureOnMainThread();
    v35 = (uint64_t)v38;
    v38 = 0;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  return v2;
}

uint64_t WebCore::Element::enqueueSecurityPolicyViolationEvent(uint64_t a1, WTF::StringImpl *a2)
{
  WebCore *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  _QWORD *v13;

  v4 = (WebCore *)WebCore::Document::eventLoop(*(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8), a2);
  v5 = (uint64_t)v4;
  *(_DWORD *)(a1 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(v4);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = (_QWORD *)(v8 + 1752);
  v10 = bmalloc::api::isoAllocate();
  WebCore::SecurityPolicyViolationEvent::SecurityPolicyViolationEvent(v10, v9, (unsigned __int8 *)a2, 1);
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v11 = &off_1E33A4808;
  v11[1] = a1;
  v11[2] = a1;
  v11[3] = v10;
  v13 = v11;
  WebCore::EventLoopTaskGroup::queueTask(v5, 0, (uint64_t *)&v13);
  result = (uint64_t)v13;
  v13 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WebCore::Element::setHTMLUnsafe@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  __n128 v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  WebCore::Element *v19;
  WebCore::Text *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  WTF::StringImpl *v25[2];
  WTF::StringImpl **v26;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) + 8);
  v7 = *(_QWORD *)(v6 + 704);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v6 = v8;
  }
  v9 = (WTF::StringImpl *)(v6 + 192);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v25[0] = v9;
  v25[1] = (WTF::StringImpl *)&v21;
  v10 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v10 == -1)
    goto LABEL_19;
  v26 = v25;
  ((void (*)(WTF::StringImpl **__return_ptr, WTF::StringImpl ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore26trustedTypeCompliantStringERNS8_22ScriptExecutionContextEONS_7variantIJNS6_6RefPtrINS8_11TrustedHTMLENS6_12RawPtrTraitsISD_EENS6_21DefaultRefDerefTraitsISD_EEEENS6_6StringEEEERKSJ_E3__0JZNS8_26trustedTypeCompliantStringESA_SL_SN_E3__1EEEEEJNS0_6__implIJSI_SJ_EEEEEEDcOT_DpOT0____fmatrix[v10])(&v22, &v26, a2);
  v13 = v21;
  v21 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (v24)
  {
    if (v24 == 1)
    {
      v14 = v23;
      v23 = 0;
      *(_BYTE *)a3 = (_BYTE)v22;
      *(_QWORD *)(a3 + 8) = v14;
      v15 = 1;
      *(_BYTE *)(a3 + 16) = 1;
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v15])(v25, &v22);
    }
LABEL_19:
    v19 = (WebCore::Element *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::Element::mergeWithNextTextNode(v19, v20);
  }
  v16 = v22;
  v22 = 0;
  v25[0] = v16;
  WebCore::Element::replaceChildrenWithMarkup(a1, (unsigned int **)v25, 12, a3, v12);
  result = v25[0];
  v25[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  v15 = v24;
  if (v24 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v15])(v25, &v22);
  return result;
}

unsigned int *WebCore::Element::mergeWithNextTextNode@<X0>(unsigned int *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  __int16 v7;
  __int16 v8;

  v4 = *((_QWORD *)this + 7);
  if (v4 && (*(_WORD *)(v4 + 28) & 2) != 0)
  {
    *(_DWORD *)(v4 + 24) += 2;
    this = (unsigned int *)WebCore::CharacterData::appendData((uint64_t)this, (const WTF::String *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 32);
    if (v6)
    {
      *(_DWORD *)(v6 + 24) += 2;
      this = (unsigned int *)WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v6, (WebCore::Node *)v4, a2);
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        v7 = *(_WORD *)(v6 + 30);
        if ((v7 & 0x400) == 0)
        {
          v8 = *(_WORD *)(v6 + 28);
          if ((v8 & 0xF000) == 0x9000)
          {
            this = WebCore::Document::removedLastRef((WebCore::Document *)v6, v5);
          }
          else
          {
            if ((v8 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 160) + 16))(*(_QWORD *)(v6 + 160));
              v7 = *(_WORD *)(v6 + 30);
            }
            *(_WORD *)(v6 + 30) = v7 | 0x400;
            this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
          }
        }
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return this;
}

WTF *WebCore::Element::innerHTML@<X0>(WebCore::Element *this@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  WTF *v3;
  WTF *result;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  v8 = 0;
  v9 = 0;
  WebCore::serializeFragment((uint64_t)this, 1, 0, 1, 0, 0, (uint64_t *)&v10, (uint64_t *)&v8, a2);
  if (HIDWORD(v9))
    WTF::VectorDestructor<true,WebCore::MarkupExclusionRule>::destruct(v8, (WTF *)((char *)v8 + 24 * HIDWORD(v9)));
  v3 = v8;
  if (v8)
  {
    v8 = 0;
    LODWORD(v9) = 0;
    WTF::fastFree(v3, v2);
  }
  if (HIDWORD(v11))
  {
    v5 = v10;
    v6 = 8 * HIDWORD(v11);
    do
    {
      v7 = *(_QWORD *)v5;
      *(_QWORD *)v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)(v7 + 24) == 2)
        {
          if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v7, v2);
        }
        else
        {
          *(_DWORD *)(v7 + 24) -= 2;
        }
      }
      v5 = (WTF *)((char *)v5 + 8);
      v6 -= 8;
    }
    while (v6);
  }
  result = v10;
  if (v10)
  {
    v10 = 0;
    LODWORD(v11) = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

WTF *WebCore::Element::outerHTML@<X0>(WebCore::Element *this@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  WTF *v3;
  WTF *result;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  v8 = 0;
  v9 = 0;
  WebCore::serializeFragment((uint64_t)this, 0, 0, 1, 0, 0, (uint64_t *)&v10, (uint64_t *)&v8, a2);
  if (HIDWORD(v9))
    WTF::VectorDestructor<true,WebCore::MarkupExclusionRule>::destruct(v8, (WTF *)((char *)v8 + 24 * HIDWORD(v9)));
  v3 = v8;
  if (v8)
  {
    v8 = 0;
    LODWORD(v9) = 0;
    WTF::fastFree(v3, v2);
  }
  if (HIDWORD(v11))
  {
    v5 = v10;
    v6 = 8 * HIDWORD(v11);
    do
    {
      v7 = *(_QWORD *)v5;
      *(_QWORD *)v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)(v7 + 24) == 2)
        {
          if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v7, v2);
        }
        else
        {
          *(_DWORD *)(v7 + 24) -= 2;
        }
      }
      v5 = (WTF *)((char *)v5 + 8);
      v6 -= 8;
    }
    while (v6);
  }
  result = v10;
  if (v10)
  {
    v10 = 0;
    LODWORD(v11) = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

WTF::StringImpl *WebCore::Element::setOuterHTML@<X0>(WebCore::Node *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  __n128 v14;
  WTF::StringImpl *result;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl **v20;
  WebCore::Node *v21;
  void *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void *v29;
  __int16 v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  __int16 v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  char v42;
  WebCore::Node *v43;
  WTF::StringImpl **v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  int v48;

  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8) + 40) + 8);
  v8 = *(_QWORD *)(v7 + 704);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
      v7 = v9;
  }
  v10 = v7 + 192;
  v11 = &v37;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v43 = (WebCore::Node *)v10;
  v44 = &v37;
  v12 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v12 == -1)
    goto LABEL_104;
  v40 = (WTF::StringImpl *)&v43;
  ((void (*)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore26trustedTypeCompliantStringERNS8_22ScriptExecutionContextEONS_7variantIJNS6_6RefPtrINS8_11TrustedHTMLENS6_12RawPtrTraitsISD_EENS6_21DefaultRefDerefTraitsISD_EEEENS6_6StringEEEERKSJ_E3__0JZNS8_26trustedTypeCompliantStringESA_SL_SN_E3__1EEEEEJNS0_6__implIJSI_SJ_EEEEEEDcOT_DpOT0____fmatrix[v12])(&v46, &v40, a2);
  result = v37;
  v37 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  if (v48)
  {
    if (v48 == 1)
    {
      v16 = v47;
      v47 = 0;
      *(_BYTE *)a3 = (_BYTE)v46;
      *(_QWORD *)(a3 + 8) = v16;
LABEL_14:
      *(_BYTE *)(a3 + 16) = 1;
      goto LABEL_64;
    }
    goto LABEL_104;
  }
  a2 = *((_QWORD *)a1 + 4);
  if (!a2)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    goto LABEL_64;
  }
  if ((*(_WORD *)(a2 + 28) & 8) == 0)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 4;
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 24) += 2;
  v10 = *((_QWORD *)a1 + 6) & 0xFFFFFFFFFFFFLL;
  if (v10)
    *(_DWORD *)((*((_QWORD *)a1 + 6) & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
  v11 = (WTF::StringImpl **)*((_QWORD *)a1 + 7);
  if (v11)
    *((_DWORD *)v11 + 6) += 2;
  v17 = v46;
  v46 = 0;
  v40 = v17;
  WebCore::createFragmentForInnerOuterHTML(a2, (unsigned int **)&v40, 1u, (uint64_t)&v43, v14);
  v19 = v40;
  v40 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  v3 = v45;
  if (!v45)
  {
    v21 = v43;
    v43 = 0;
    WebCore::ContainerNode::replaceChild((WebCore::ContainerNode *)a2, v21, a1, (uint64_t)&v40);
    if (*((_DWORD *)v21 + 6) == 2)
    {
      if ((*((_WORD *)v21 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v21, v22);
    }
    else
    {
      *((_DWORD *)v21 + 6) -= 2;
    }
    if (v42)
    {
      v23 = v41;
      v41 = 0;
      *(_BYTE *)a3 = (_BYTE)v40;
      *(_QWORD *)(a3 + 8) = v23;
      *(_BYTE *)(a3 + 16) = 1;
    }
    else
    {
      if (v11)
      {
        v24 = (unint64_t)v11[6] & 0xFFFFFFFFFFFFLL;
        if (v24)
        {
          if ((*(_WORD *)(((unint64_t)v11[6] & 0xFFFFFFFFFFFFLL) + 0x1C) & 2) != 0)
          {
            *(_DWORD *)(((unint64_t)v11[6] & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
            v25 = *(_QWORD *)(v24 + 56);
            if (v25 && (*(_WORD *)(v25 + 28) & 2) != 0)
            {
              *(_DWORD *)(v25 + 24) += 2;
              WebCore::CharacterData::appendData(v24, (const WTF::String *)(v25 + 80));
              v26 = *(_QWORD *)(v25 + 32);
              if (v26)
              {
                *(_DWORD *)(v26 + 24) += 2;
                WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v26, (WebCore::Node *)v25, &v37);
                if (*(_DWORD *)(v26 + 24) == 2)
                {
                  v30 = *(_WORD *)(v26 + 30);
                  if ((v30 & 0x400) == 0)
                  {
                    v31 = *(_WORD *)(v26 + 28);
                    if ((v31 & 0xF000) == 0x9000)
                    {
                      WebCore::Document::removedLastRef((WebCore::Document *)v26, v22);
                    }
                    else
                    {
                      if ((v31 & 0x20) != 0)
                      {
                        (*(void (**)(_QWORD))(**(_QWORD **)(v26 + 160) + 16))(*(_QWORD *)(v26 + 160));
                        v30 = *(_WORD *)(v26 + 30);
                      }
                      *(_WORD *)(v26 + 30) = v30 | 0x400;
                      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 72))(v26);
                    }
                  }
                }
                else
                {
                  *(_DWORD *)(v26 + 24) -= 2;
                }
              }
              else
              {
                v37 = 0;
                v38 = 0;
                v39 = 0;
              }
              if (*(_DWORD *)(v25 + 24) == 2)
              {
                if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v25, v22);
              }
              else
              {
                *(_DWORD *)(v25 + 24) -= 2;
              }
            }
            else
            {
              v37 = 0;
              v38 = 0;
              v39 = 0;
            }
            if ((_BYTE)v39)
            {
              v27 = v38;
              *(_BYTE *)a3 = (_BYTE)v37;
              *(_QWORD *)(a3 + 8) = v27;
              *(_BYTE *)(a3 + 16) = 1;
              if (*(_DWORD *)(v24 + 24) == 2)
              {
                if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v24, v22);
              }
              else
              {
                *(_DWORD *)(v24 + 24) -= 2;
              }
              goto LABEL_52;
            }
            if (*(_DWORD *)(v24 + 24) == 2)
            {
              if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v24, v22);
            }
            else
            {
              *(_DWORD *)(v24 + 24) -= 2;
            }
          }
        }
      }
      if (v10)
      {
        if ((*(_WORD *)(v10 + 28) & 2) != 0)
        {
          v32 = *(_QWORD *)(v10 + 56);
          if (v32 && (*(_WORD *)(v32 + 28) & 2) != 0)
          {
            *(_DWORD *)(v32 + 24) += 2;
            WebCore::CharacterData::appendData(v10, (const WTF::String *)(v32 + 80));
            v33 = *(_QWORD *)(v32 + 32);
            if (v33)
            {
              *(_DWORD *)(v33 + 24) += 2;
              WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v33, (WebCore::Node *)v32, &v37);
              if (*(_DWORD *)(v33 + 24) == 2)
              {
                v35 = *(_WORD *)(v33 + 30);
                if ((v35 & 0x400) == 0)
                {
                  v36 = *(_WORD *)(v33 + 28);
                  if ((v36 & 0xF000) == 0x9000)
                  {
                    WebCore::Document::removedLastRef((WebCore::Document *)v33, v22);
                  }
                  else
                  {
                    if ((v36 & 0x20) != 0)
                    {
                      (*(void (**)(_QWORD))(**(_QWORD **)(v33 + 160) + 16))(*(_QWORD *)(v33 + 160));
                      v35 = *(_WORD *)(v33 + 30);
                    }
                    *(_WORD *)(v33 + 30) = v35 | 0x400;
                    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 72))(v33);
                  }
                }
              }
              else
              {
                *(_DWORD *)(v33 + 24) -= 2;
              }
            }
            else
            {
              v37 = 0;
              v38 = 0;
              v39 = 0;
            }
            if (*(_DWORD *)(v32 + 24) == 2)
            {
              if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v32, v22);
            }
            else
            {
              *(_DWORD *)(v32 + 24) -= 2;
            }
          }
          else
          {
            v37 = 0;
            v38 = 0;
            v39 = 0;
          }
          if ((_BYTE)v39)
          {
            v34 = v38;
            *(_BYTE *)a3 = (_BYTE)v37;
            *(_QWORD *)(a3 + 8) = v34;
            *(_BYTE *)(a3 + 16) = 1;
            if (*(_DWORD *)(v10 + 24) != 2)
            {
              *(_DWORD *)(v10 + 24) -= 2;
LABEL_103:
              v10 = 0;
              goto LABEL_52;
            }
LABEL_105:
            if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v10, v22);
            goto LABEL_103;
          }
        }
        if (*(_DWORD *)(v10 + 24) == 2)
        {
          if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v10, v22);
        }
        else
        {
          *(_DWORD *)(v10 + 24) -= 2;
        }
      }
      v10 = 0;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
LABEL_52:
    if (v42)
    {
      v28 = v41;
      v41 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v22);
        else
          *(_DWORD *)v28 -= 2;
      }
    }
    goto LABEL_56;
  }
  if (v45 != 1)
  {
LABEL_104:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_105;
  }
  v20 = v44;
  v44 = 0;
  *(_BYTE *)a3 = (_BYTE)v43;
  *(_QWORD *)(a3 + 8) = v20;
  *(_BYTE *)(a3 + 16) = 1;
LABEL_56:
  result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WebCore::Node **))off_1E33A4588[v3])(&v40, &v43);
  if (v11)
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v11, v29);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v10, v29);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  if (*(_DWORD *)(a2 + 24) == 2)
  {
    if ((*(_WORD *)(a2 + 30) & 0x400) == 0)
      result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)a2, v29);
  }
  else
  {
    *(_DWORD *)(a2 + 24) -= 2;
  }
LABEL_64:
  if (v48 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WebCore::Node **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v48])(&v43, &v46);
  return result;
}

WTF::StringImpl *WebCore::Element::setInnerHTML@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  __n128 v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  int v17;
  uint64_t v18;
  WebCore::Element *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  WTF::StringImpl *v24[2];
  WTF::StringImpl **v25;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) + 8);
  v7 = *(_QWORD *)(v6 + 704);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v6 = v8;
  }
  v9 = (WTF::StringImpl *)(v6 + 192);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v24[0] = v9;
  v24[1] = (WTF::StringImpl *)&v20;
  v10 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v10 == -1)
    goto LABEL_19;
  v25 = v24;
  ((void (*)(WTF::StringImpl **__return_ptr, WTF::StringImpl ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore26trustedTypeCompliantStringERNS8_22ScriptExecutionContextEONS_7variantIJNS6_6RefPtrINS8_11TrustedHTMLENS6_12RawPtrTraitsISD_EENS6_21DefaultRefDerefTraitsISD_EEEENS6_6StringEEEERKSJ_E3__0JZNS8_26trustedTypeCompliantStringESA_SL_SN_E3__1EEEEEJNS0_6__implIJSI_SJ_EEEEEEDcOT_DpOT0____fmatrix[v10])(&v21, &v25, a2);
  v13 = v20;
  v20 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (v23)
  {
    if (v23 == 1)
    {
      v18 = v22;
      v22 = 0;
      *(_BYTE *)a3 = (_BYTE)v21;
      *(_QWORD *)(a3 + 8) = v18;
      v17 = 1;
      *(_BYTE *)(a3 + 16) = 1;
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v17])(v24, &v21);
    }
LABEL_19:
    v19 = (WebCore::Element *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::Element::innerText(v19);
  }
  v14 = v21;
  v21 = 0;
  v24[0] = v14;
  WebCore::Element::replaceChildrenWithMarkup(a1, (unsigned int **)v24, 0, a3, v12);
  result = v24[0];
  v24[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  v17 = v23;
  if (v23 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v17])(v24, &v21);
  return result;
}

unsigned int *WebCore::Element::innerText@<X0>(WebCore::Element *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v4;
  unsigned int *result;
  void *v6;
  WTF::StringBuilder *v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  int v17;
  WebCore::Node *v18;
  int v19;

  v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  result = (unsigned int *)WebCore::Document::updateLayout(v4, 2u, 0);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) == 0)
    return (unsigned int *)WebCore::Node::textContent(this, (const WebCore::Node *)1, v7, a2, v8);
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1959D1FC0);
  }
  v9 = *(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x20);
  if (v9 && (v10 = *(_QWORD *)(v9 + 8)) != 0 && (*(_BYTE *)(*(_QWORD *)(v10 + 104) + 239) & 0x18) != 0)
  {
    *a2 = 0;
  }
  else
  {
    *((_DWORD *)this + 6) += 4;
    v11 = *((_WORD *)this + 14);
    if ((v11 & 1) != 0)
    {
      v13 = *((_QWORD *)this + 10);
      if (v13)
        LODWORD(v13) = *(_DWORD *)(v13 + 4);
    }
    else if ((v11 & 4) != 0 && (v12 = *((_QWORD *)this + 10)) != 0)
    {
      LODWORD(v13) = 0;
      do
      {
        LODWORD(v13) = v13 + 1;
        v12 = *(_QWORD *)(v12 + 56);
      }
      while (v12);
    }
    else
    {
      LODWORD(v13) = 0;
    }
    v16 = this;
    v17 = 0;
    v18 = this;
    v19 = v13;
    WebCore::plainText(&v16, 0, 0, (const WTF::String *)a2);
    v15 = v18;
    v18 = 0;
    if (v15)
    {
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15, v14);
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
    }
    result = (unsigned int *)v16;
    v16 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, v14);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  return result;
}

void WebCore::Element::title(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::Element::userAgentPart(WebCore::Element *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    return MEMORY[0x1E0CBF2F8];
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) != 0)
  {
    v3 = *(_QWORD *)(v1 + 40);
    LODWORD(v4) = *(_DWORD *)(v1 + 52);
  }
  else
  {
    v3 = v1 + 32;
    LODWORD(v4) = v2 >> 5;
  }
  if (!(_DWORD)v4)
    return MEMORY[0x1E0CBF2F8];
  v4 = v4;
  for (result = v3 + 8; ; result += 16)
  {
    v6 = *(_QWORD *)(result - 8);
    if (v6 == WebCore::HTMLNames::useragentpartAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
    {
      break;
    }
    if (!--v4)
      return MEMORY[0x1E0CBF2F8];
  }
  return result;
}

WTF::StringImpl *WebCore::Element::setUserAgentPart(WebCore::Element *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (v3
    && ((v4 = *(_DWORD *)(v3 + 4), (v4 & 1) != 0)
      ? (v5 = *(uint64_t **)(v3 + 40), v6 = *(_DWORD *)(v3 + 52))
      : (v5 = (uint64_t *)(v3 + 32), v6 = v4 >> 5),
        v6))
  {
    v7 = 0;
    while (1)
    {
      v8 = *v5;
      if (*v5 == WebCore::HTMLNames::useragentpartAttr
        || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
        && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
      {
        break;
      }
      ++v7;
      v5 += 2;
      if (v6 == v7)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    v7 = 0xFFFFFFFFLL;
  }
  return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, a2, 0);
}

unsigned int *WebCore::Element::willBecomeFullscreenElement(unsigned int *this)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int *v3;
  BOOL v4;
  void *v5;
  BOOL v6;

  v1 = (unsigned int *)*((_QWORD *)this + 10);
  if (v1)
  {
    v2 = this;
    while ((v1[7] & 8) == 0)
    {
      v1 = (unsigned int *)*((_QWORD *)v1 + 7);
      if (!v1)
        return this;
    }
    do
    {
LABEL_15:
      v1[6] += 2;
      this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v1 + 728))(v1);
      if (v1[6] == 2)
      {
        if ((*((_WORD *)v1 + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v1, v5);
      }
      else
      {
        v1[6] -= 2;
      }
      v3 = (unsigned int *)*((_QWORD *)v1 + 10);
      if (!v3)
      {
        if (v1 == v2)
          return this;
        while (1)
        {
          v3 = (unsigned int *)*((_QWORD *)v1 + 7);
          if (v3)
            break;
          v1 = (unsigned int *)*((_QWORD *)v1 + 4);
          if (v1)
            v4 = v1 == v2;
          else
            v4 = 1;
          if (v4)
            return this;
        }
      }
      v1 = v3;
    }
    while ((v3[7] & 8) != 0);
    while (v3 != v2)
    {
      while (1)
      {
        v1 = (unsigned int *)*((_QWORD *)v3 + 7);
        if (v1)
          break;
        v3 = (unsigned int *)*((_QWORD *)v3 + 4);
        if (v3)
          v6 = v3 == v2;
        else
          v6 = 1;
        if (v6)
          return this;
      }
      v3 = (unsigned int *)*((_QWORD *)v3 + 7);
      if ((v1[7] & 8) != 0)
        goto LABEL_15;
    }
  }
  return this;
}

unsigned int *WebCore::Element::addToTopLayer(WebCore::Element *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  unsigned int *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 23) & 0x20) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1959D23C4);
  }
  ++WebCore::ScriptDisallowedScope::s_count;
  v12[0] = &off_1E33A4830;
  v13 = v12;
  WebCore::forEachRenderLayer(*((_QWORD *)this + 8), v12);
  v2 = v13;
  if (v13 == v12)
  {
    v3 = 4;
    v2 = v12;
    goto LABEL_6;
  }
  if (v13)
  {
    v3 = 5;
LABEL_6:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  WebCore::Document::addTopLayerElement((WebCore::Document *)v4, this);
  *((_QWORD *)this + 2) |= 0x2000000000000000uLL;
  v5 = *(uint64_t **)(v4 + 1584);
  if (v5)
  {
    v11 = *v5;
    if (v11)
    {
      if (*(_DWORD *)(v11 + 100))
      {
        *(_BYTE *)(v4 + 3368) |= 4u;
        WebCore::Document::scheduleRenderingUpdate((_QWORD *)v4, 64);
      }
    }
  }
  WebCore::Node::invalidateStyle((uint64_t)this, 3u, 0);
  v6 = *(_QWORD *)(v4 + 1272);
  if (v6)
  {
    *(_DWORD *)(v6 + 24) += 2;
    WebCore::Node::invalidateStyle(v6, 3u, 0);
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v12[0] = &off_1E33A4878;
  v13 = v12;
  WebCore::forEachRenderLayer(*((_QWORD *)this + 8), v12);
  result = (unsigned int *)v13;
  if (v13 == v12)
  {
    v10 = 4;
    result = (unsigned int *)v12;
  }
  else
  {
    if (!v13)
      goto LABEL_16;
    v10 = 5;
  }
  result = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v10))();
LABEL_16:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v4, v8);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  --WebCore::ScriptDisallowedScope::s_count;
  return result;
}

uint64_t WebCore::forEachRenderLayer(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  char v3;
  int v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WebCore::Element *v14;
  _QWORD v15[3];
  _QWORD *v16;
  _BYTE v17[24];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = result & 0xFFFFFFFFFFFFLL;
  if ((result & 0xFFFFFFFFFFFFLL) != 0)
  {
    v3 = *(_BYTE *)((result & 0xFFFFFFFFFFFFLL) + 0x2D);
    if ((v3 & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1959D25CCLL);
    }
    if ((*(_BYTE *)((result & 0xFFFFFFFFFFFFLL) + 0x2D) & 0x10) != 0)
    {
      v4 = *(_DWORD *)((result & 0xFFFFFFFFFFFFLL) + 0x10);
      v5 = v4 + 1;
      *(_DWORD *)((result & 0xFFFFFFFFFFFFLL) + 0x10) = v4 + 1;
      if ((v3 & 8) == 0)
      {
        if ((*(_BYTE *)((result & 0xFFFFFFFFFFFFLL) + 0x15) & 0x80) != 0)
        {
          v13 = a2[3];
          if (!v13)
          {
            v14 = (WebCore::Element *)std::__throw_bad_function_call[abi:sn180100]();
            return WebCore::Element::renderOrDisplayContentsStyle(v14);
          }
          result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 48))(v13, *(_QWORD *)(v2 + 144));
          v5 = *(_DWORD *)(v2 + 16);
        }
        goto LABEL_23;
      }
      *(_DWORD *)((result & 0xFFFFFFFFFFFFLL) + 0x10) = v4 + 2;
      v6 = (_QWORD *)a2[3];
      if (v6)
      {
        if (v6 == a2)
        {
          v16 = v15;
          (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v15);
          v7 = v16;
        }
        else
        {
          v7 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
          v16 = v7;
        }
        v9 = operator new(0x28uLL);
        v8 = v9;
        *v9 = &off_1E33A45A8;
        v10 = v9 + 1;
        if (v7)
        {
          if (v7 == v15)
          {
            v9[4] = v10;
            (*(void (**)(_QWORD *))(v15[0] + 24))(v15);
          }
          else
          {
            v9[4] = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v7 + 16))(v7, v10);
          }
LABEL_14:
          v18 = v8;
          WebCore::RenderBoxModelObject::forRendererAndContinuations(v2, (uint64_t)v17);
          if (v18)
            (*(void (**)(_QWORD *))(*v18 + 40))(v18);
          result = (uint64_t)v16;
          if (v16 == v15)
          {
            v11 = 4;
            result = (uint64_t)v15;
          }
          else
          {
            if (!v16)
            {
LABEL_21:
              v12 = *(_DWORD *)(v2 + 16);
              if (!v12)
              {
                __break(0xC471u);
                JUMPOUT(0x1959D2634);
              }
              v5 = v12 - 1;
              *(_DWORD *)(v2 + 16) = v12 - 1;
LABEL_23:
              if (!v5)
              {
                __break(0xC471u);
                JUMPOUT(0x1959D2614);
              }
              *(_DWORD *)(v2 + 16) = v5 - 1;
              return result;
            }
            v11 = 5;
          }
          result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v11))();
          goto LABEL_21;
        }
      }
      else
      {
        v16 = 0;
        v8 = operator new(0x28uLL);
        *v8 = &off_1E33A45A8;
      }
      v8[4] = 0;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t WebCore::Element::renderOrDisplayContentsStyle(WebCore::Element *this)
{
  uint64_t v1;

  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) == 0
    || (v1 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x38)) == 0
    || (*(_QWORD *)(v1 + 16) & 0x1FLL) != 0x12)
  {
    v1 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
    if (v1)
    {
      if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        v1 = *(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x20);
        if (v1)
          v1 = *(_QWORD *)(v1 + 8);
      }
      v1 += 80;
    }
  }
  return v1;
}

uint64_t WebCore::Element::renderOrDisplayContentsStyle(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  if (!*((_BYTE *)a2 + 16))
  {
    if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v3 = *(_QWORD *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
      if (v3)
      {
        if ((*(_QWORD *)(v3 + 16) & 0x1FLL) == 0x12)
          return v3;
      }
    }
    v2 = *(_QWORD *)(a1 + 64);
LABEL_4:
    v3 = v2 & 0xFFFFFFFFFFFFLL;
    if (v3)
    {
      if ((*(_BYTE *)(v3 + 45) & 2) != 0)
      {
        v3 = *(_QWORD *)(v3 + 32);
        if (v3)
          v3 = *(_QWORD *)(v3 + 8);
      }
      v3 += 80;
    }
    return v3;
  }
  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 72);
  if (*a2 == 6)
  {
    if ((v6 & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_17;
    v15 = (uint64_t *)((v6 & 0xFFFFFFFFFFFFLL) + 168);
  }
  else
  {
    v7 = v6 & 0xFFFFFFFFFFFFLL;
    if (v5 != 7 || v7 == 0)
      goto LABEL_17;
    v15 = (uint64_t *)(v7 + 176);
  }
  v14 = *v15;
  if (v14)
  {
    if ((*(_QWORD *)(v14 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v3 = *(_QWORD *)((*(_QWORD *)(v14 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
      if (v3)
      {
        if ((*(_QWORD *)(v3 + 16) & 0x1FLL) == 0x12)
          return v3;
      }
    }
    v2 = *(_QWORD *)(v14 + 64);
    goto LABEL_4;
  }
LABEL_17:
  v9 = v6 & 0xFFFFFFFFFFFFLL;
  if (!v9 || (v10 = *(_QWORD *)(v9 + 56)) == 0 || (*(_QWORD *)(v10 + 16) & 0x1FLL) != 0x12)
  {
    v3 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v3)
      return v3;
    if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      v3 = *(_QWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
      if (v3)
        v3 = *(_QWORD *)(v3 + 8);
    }
    v10 = v3 + 80;
  }
  v3 = *(_QWORD *)(v10 + 48);
  if (!v3)
    return v3;
  v11 = *(unsigned int *)(v3 + 12);
  if ((_DWORD)v11)
  {
    v12 = *(uint64_t **)v3;
    v13 = 8 * v11;
    do
    {
      v3 = *v12;
      if (((*(_QWORD *)(*v12 + 16) >> 43) & 0x1F) == v5
        && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 40) + 592) == *((_QWORD *)a2 + 1))
      {
        break;
      }
      v3 = 0;
      ++v12;
      v13 -= 8;
    }
    while (v13);
    return v3;
  }
  return 0;
}

uint64_t WebCore::Element::resolvePseudoElementStyle(WebCore::Element *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::StringImpl *v14;
  WTF *v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::StyleRareNonInheritedData *v21;
  uint64_t v22;
  BOOL v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  void *v26;
  WebCore::RenderStyle *v27;
  WTF *v28;
  WTF *v29;
  void *v30;
  WTF *v32;
  void *v33;
  WebCore::RenderStyle *v34;
  int v35;
  WTF::StringImpl *v36;
  char v37;
  WebCore::RenderStyle *v38;
  char v39;

  if ((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) == 0
    || (v5 = *(_QWORD *)((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) + 0x30)) == 0
    && ((v5 = *(_QWORD *)((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) + 0x38)) == 0
     || ((v22 = *(_QWORD *)(v5 + 16) & 0x1FLL, v22 != 26) ? (v23 = v22 == 18) : (v23 = 1), !v23)))
  {
    v4 = *((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL;
    if (v4)
    {
      if ((*(_BYTE *)((*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        v4 = *(_QWORD *)((*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL) + 0x20);
        if (v4)
          v4 = *(_QWORD *)(v4 + 8);
      }
      v5 = v4 + 80;
    }
    else
    {
      v5 = 0;
    }
  }
  v6 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
  *(_DWORD *)(v6 + 24) += 2;
  WebCore::Style::PostResolutionCallbackDisabler::PostResolutionCallbackDisabler(&v39, v6, 0);
  v35 = *a2;
  v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  if (v7)
    *(_DWORD *)v7 += 2;
  v36 = v7;
  v37 = 1;
  WebCore::Document::styleForElementIgnoringPendingStylesheets((WebCore::Style *)v6, a1, (int *)v5, (uint64_t)&v35, &v38);
  if (v37 && v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v8);
    else
      *(_DWORD *)v36 -= 2;
  }
  v9 = (uint64_t)v38;
  if (!v38)
  {
    {
      WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
    }
    v9 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v9 = 0;
    v10 = (_DWORD *)qword_1ECE913C0;
    *(_QWORD *)(v9 + 8) = qword_1ECE913C0;
    ++*v10;
    *(_QWORD *)(v9 + 16) = qword_1ECE913C8;
    v11 = qword_1ECE913D0;
    ++*(_DWORD *)qword_1ECE913D0;
    *(_QWORD *)(v9 + 24) = v11;
    v12 = qword_1ECE913D8;
    ++*(_DWORD *)qword_1ECE913D8;
    *(_QWORD *)(v9 + 32) = v12;
    *(_QWORD *)(v9 + 40) = qword_1ECE913E0;
    *(_QWORD *)(v9 + 48) = 0;
    v13 = qword_1ECE913F0;
    ++*(_DWORD *)qword_1ECE913F0;
    *(_QWORD *)(v9 + 56) = v13;
    v38 = (WebCore::RenderStyle *)v9;
    WebCore::RenderStyle::inheritFrom((WebCore::RenderStyle *)v9, (const WebCore::RenderStyle *)v5, v14);
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(v9 + 16) & 0xFFFF07FFFFFFFFFFLL | ((unint64_t)(*a2 & 0x1F) << 43);
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 40) + 592) != *((_QWORD *)a2 + 1))
    {
      v15 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)(v9 + 8));
      v17 = (_DWORD *)*((_QWORD *)v15 + 5);
      if (*v17 == 1)
      {
        v20 = *((_QWORD *)v15 + 5);
      }
      else
      {
        v18 = v15;
        v19 = WTF::fastMalloc((WTF *)0x288);
        v20 = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v19, (uint64_t)v17);
        v21 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v18 + 5);
        *((_QWORD *)v18 + 5) = v20;
        if (v21)
        {
          if (*(_DWORD *)v21 == 1)
          {
            WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v21, v16);
            WTF::fastFree(v32, v33);
            v20 = *((_QWORD *)v18 + 5);
          }
          else
          {
            --*(_DWORD *)v21;
          }
        }
      }
      v24 = (_DWORD *)*((_QWORD *)a2 + 1);
      if (v24)
        *v24 += 2;
      v25 = *(WTF::StringImpl **)(v20 + 592);
      *(_QWORD *)(v20 + 592) = v24;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v16);
        else
          *(_DWORD *)v25 -= 2;
      }
    }
  }
  v38 = 0;
  v34 = (WebCore::RenderStyle *)v9;
  WebCore::RenderStyle::addCachedPseudoStyle(v5, (uint64_t *)&v34);
  v27 = v34;
  v34 = 0;
  if (v27)
  {
    WebCore::RenderStyle::~RenderStyle(v27, v26);
    if (*(_DWORD *)v28)
    {
      *((_OWORD *)v28 + 2) = 0u;
      *((_OWORD *)v28 + 3) = 0u;
      *(_OWORD *)v28 = 0u;
      *((_OWORD *)v28 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v28, v26);
    }
  }
  if (v38)
  {
    WebCore::RenderStyle::~RenderStyle(v38, v26);
    if (*(_DWORD *)v29)
    {
      *((_OWORD *)v29 + 2) = 0u;
      *((_OWORD *)v29 + 3) = 0u;
      *(_OWORD *)v29 = 0u;
      *((_OWORD *)v29 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v29, v26);
    }
  }
  WebCore::Style::PostResolutionCallbackDisabler::~PostResolutionCallbackDisabler((WebCore::Style::PostResolutionCallbackDisabler *)&v39, v26);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v30);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return v9;
}

uint64_t WebCore::Element::computedStyle(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  if ((*(_BYTE *)(a1 + 22) & 8) == 0)
    return 0;
  v4 = *(unsigned __int8 *)(a2 + 16);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *(_QWORD *)(a1 + 72);
    goto LABEL_4;
  }
  v5 = *(_QWORD *)(a1 + 72);
  if (*(_DWORD *)a2 == 6)
  {
    if ((v5 & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_4;
    v13 = (uint64_t *)((v5 & 0xFFFFFFFFFFFFLL) + 168);
  }
  else
  {
    v11 = v5 & 0xFFFFFFFFFFFFLL;
    if (*(_DWORD *)a2 != 7 || v11 == 0)
      goto LABEL_4;
    v13 = (uint64_t *)(v11 + 176);
  }
  v14 = *v13;
  if (!*v13)
  {
LABEL_4:
    v6 = v5 & 0xFFFFFFFFFFFFLL;
    if (!v6
      || (result = *(_QWORD *)(v6 + 48)) == 0
      && ((result = *(_QWORD *)(v6 + 56)) == 0
       || ((v9 = *(_QWORD *)(result + 16) & 0x1FLL, v9 != 26) ? (v10 = v9 == 18) : (v10 = 1), !v10)))
    {
      v7 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
      if (v7)
      {
        if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          v7 = *(_QWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
          if (v7)
            v7 = *(_QWORD *)(v7 + 8);
        }
        result = v7 + 80;
      }
      else
      {
        result = (uint64_t)WebCore::Element::resolveComputedStyle(a1, 0);
        v4 = *(unsigned __int8 *)(a2 + 16);
      }
    }
    if (v4)
    {
      result = WebCore::RenderStyle::getCachedPseudoStyle(result, a2);
      if (!result)
        return WebCore::Element::resolvePseudoElementStyle((WebCore::Element *)a1, (int *)a2);
    }
    return result;
  }
  *(_DWORD *)(v14 + 24) += 2;
  v16 = WebCore::Node::computedStyle((WebCore::Node *)v14);
  if (*(_DWORD *)(v14 + 24) == 2)
  {
    if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v14, v15);
  }
  else
  {
    *(_DWORD *)(v14 + 24) -= 2;
  }
  return v16;
}

WTF::StringImpl *WebCore::Element::locale(WebCore::Element *this)
{
  uint64_t v1;
  WTF::StringImpl **v2;
  void *v3;
  WTF::StringImpl *CachedLocale;
  uint64_t v6;

  v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v1 + 24) += 2;
  if ((*((_BYTE *)this + 30) & 8) != 0)
  {
LABEL_2:
    if (*(_QWORD *)(v1 + 1720))
      v2 = (WTF::StringImpl **)(v1 + 1720);
    else
      v2 = (WTF::StringImpl **)(v1 + 1712);
    goto LABEL_5;
  }
  v6 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  if (!v6 || (v2 = (WTF::StringImpl **)(v6 + 64), !*(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x40)))
  {
    if ((*((_BYTE *)this + 22) & 8) == 0)
    {
      v2 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      goto LABEL_5;
    }
    goto LABEL_2;
  }
LABEL_5:
  CachedLocale = WebCore::Document::getCachedLocale((WebCore::Document *)v1, v2);
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1, v3);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  return CachedLocale;
}

WebCore::SVGElement *WebCore::Element::normalizeAttributes(WebCore::SVGElement *this, unsigned __int8 *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  WebCore::SVGElement *v6;
  uint64_t v7;
  unsigned int v8;
  WebCore::SVGElement *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *((_QWORD *)this + 13);
  if (v5)
  {
    v6 = this;
    if ((*(_BYTE *)(v5 + 4) & 8) != 0)
      this = WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(this, a2, a5, a3, a4);
    if ((*((_WORD *)v6 + 14) & 0x20) != 0)
      this = WebCore::SVGElement::synchronizeAllAttributes(v6);
    v7 = *((_QWORD *)v6 + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) != 0)
      {
        if (!*(_DWORD *)(v7 + 52))
          return this;
      }
      else if (!(v8 >> 5))
      {
        return this;
      }
      this = (WebCore::SVGElement *)WebCore::Element::attrNodeList(v6);
      if (this)
      {
        v9 = this;
        v10 = *((unsigned int *)this + 3);
        if ((_DWORD)v10)
        {
          if (v10 >> 29)
          {
            __break(0xC471u);
          }
          else
          {
            v11 = 8 * v10;
            v12 = WTF::fastMalloc((WTF *)(8 * v10));
            v13 = (WTF *)v12;
            v14 = *((unsigned int *)v9 + 3);
            if ((_DWORD)v14)
            {
              v15 = *(uint64_t **)v9;
              v16 = 8 * v14;
              v17 = (_QWORD *)v12;
              do
              {
                v18 = *v15;
                if (*v15)
                  *(_DWORD *)(v18 + 24) += 2;
                *v17++ = v18;
                ++v15;
                v16 -= 8;
              }
              while (v16);
            }
            v19 = 0;
            do
            {
              WebCore::Node::normalize(*(WebCore::Node **)((char *)v13 + v19));
              v19 += 8;
            }
            while (v11 != v19);
            v21 = 0;
            do
            {
              v22 = *(_QWORD *)((char *)v13 + v21);
              *(_QWORD *)((char *)v13 + v21) = 0;
              if (v22)
              {
                if (*(_DWORD *)(v22 + 24) == 2)
                {
                  if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v22, v20);
                }
                else
                {
                  *(_DWORD *)(v22 + 24) -= 2;
                }
              }
              v21 += 8;
            }
            while (v11 != v21);
            return (WebCore::SVGElement *)WTF::fastFree(v13, v20);
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::Element::beforePseudoElement(WebCore::Element *this)
{
  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
    return *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xA8);
  else
    return 0;
}

uint64_t WebCore::Element::afterPseudoElement(WebCore::Element *this)
{
  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
    return *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xB0);
  else
    return 0;
}

uint64_t WebCore::Element::clearBeforePseudoElementSlow(WebCore::Element *this, WebCore::Page *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  result = *(_QWORD *)(v3 + 0xA8);
  if (result)
  {
    WebCore::PseudoElement::clearHostElement((WebCore::PseudoElement *)result, a2);
    result = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xA8);
    *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xA8) = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
  }
  else
  {
    *(_QWORD *)(v3 + 168) = 0;
  }
  return result;
}

uint64_t WebCore::Element::clearAfterPseudoElementSlow(WebCore::Element *this, WebCore::Page *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  result = *(_QWORD *)(v3 + 0xB0);
  if (result)
  {
    WebCore::PseudoElement::clearHostElement((WebCore::PseudoElement *)result, a2);
    result = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xB0);
    *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xB0) = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
  }
  else
  {
    *(_QWORD *)(v3 + 176) = 0;
  }
  return result;
}

uint64_t WebCore::Element::matchesInvalidPseudoClass(WebCore::Element *this)
{
  return 0;
}

uint64_t WebCore::Element::matchesUserValidPseudoClass(WebCore::Element *this)
{
  return 0;
}

uint64_t WebCore::Element::matchesUserInvalidPseudoClass(WebCore::Element *this)
{
  return 0;
}

uint64_t WebCore::Element::matchesReadWritePseudoClass(WebCore::Element *this)
{
  return 0;
}

uint64_t WebCore::Element::matches@<X0>(WebCore::Element *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>, int16x8_t a4@<Q0>)
{
  __n128 v6;
  uint64_t v7;
  uint64_t v9;
  WebCore::Element *v10;
  const WTF::String *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  char v15;

  WebCore::Document::selectorQueryForString(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8), a2, (uint64_t)&v12, a4);
  v7 = v14;
  if (!v14)
  {
    *(_BYTE *)a3 = WebCore::SelectorDataList::matches((unsigned int ***)(v12 + 8), this, v6);
LABEL_3:
    *(_DWORD *)(a3 + 16) = v7;
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore13SelectorQueryENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v7])(&v15, &v12);
  }
  if (v14 == 1)
  {
    v9 = v13;
    v13 = 0;
    *(_BYTE *)a3 = v12;
    *(_QWORD *)(a3 + 8) = v9;
    goto LABEL_3;
  }
  v10 = (WebCore::Element *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::Element::closest(v10, v11);
}

uint64_t WebCore::Element::closest@<X0>(WebCore::Element *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>, int16x8_t a4@<Q0>)
{
  __n128 v6;
  uint64_t v7;
  uint64_t v9;
  WebCore::Element *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char v14;

  WebCore::Document::selectorQueryForString(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8), a2, (uint64_t)&v11, a4);
  v7 = v13;
  if (!v13)
  {
    *(_QWORD *)a3 = WebCore::SelectorDataList::closest((const WebCore::CSSSelector ***)(v11 + 8), this, v6);
LABEL_3:
    *(_DWORD *)(a3 + 16) = v7;
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore13SelectorQueryENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v7])(&v14, &v11);
  }
  if (v13 == 1)
  {
    v9 = v12;
    v12 = 0;
    *(_BYTE *)a3 = v11;
    *(_QWORD *)(a3 + 8) = v9;
    goto LABEL_3;
  }
  v10 = (WebCore::Element *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::Element::classList(v10);
}

uint64_t WebCore::Element::classList(WebCore::Element *this)
{
  uint64_t v2;
  uint64_t result;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF *v11;

  v2 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  if (!v2)
  {
    WebCore::Node::materializeRareData(this);
    v2 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  }
  result = *(_QWORD *)(v2 + 80);
  if (!result)
  {
    result = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)result = this;
    *(_QWORD *)(result + 8) = &WebCore::HTMLNames::classAttr;
    *(_WORD *)(result + 16) = 256;
    *(_QWORD *)(result + 24) = result + 40;
    *(_QWORD *)(result + 32) = 1;
    *(_QWORD *)(result + 48) = 0;
    v5 = *(_QWORD *)(v2 + 80);
    *(_QWORD *)(v2 + 80) = result;
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 48);
      *(_QWORD *)(v5 + 48) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v7 = *(unsigned int *)(v5 + 36);
      if ((_DWORD)v7)
      {
        v8 = *(WTF::StringImpl ***)(v5 + 24);
        v9 = 8 * v7;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v4);
            else
              *(_DWORD *)v10 -= 2;
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      v11 = *(WTF **)(v5 + 24);
      if ((WTF *)(v5 + 40) != v11 && v11 != 0)
      {
        *(_QWORD *)(v5 + 24) = 0;
        *(_DWORD *)(v5 + 32) = 0;
        WTF::fastFree(v11, v4);
      }
      WTF::fastFree((WTF *)v5, v4);
      return *(_QWORD *)(v2 + 80);
    }
  }
  return result;
}

uint64_t WebCore::Element::part(WebCore::Element *this)
{
  uint64_t v2;
  uint64_t result;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF *v11;

  v2 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  if (!v2)
  {
    WebCore::Node::materializeRareData(this);
    v2 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  }
  result = *(_QWORD *)(v2 + 200);
  if (!result)
  {
    result = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)result = this;
    *(_QWORD *)(result + 8) = &WebCore::HTMLNames::partAttr;
    *(_WORD *)(result + 16) = 256;
    *(_QWORD *)(result + 24) = result + 40;
    *(_QWORD *)(result + 32) = 1;
    *(_QWORD *)(result + 48) = 0;
    v5 = *(_QWORD *)(v2 + 200);
    *(_QWORD *)(v2 + 200) = result;
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 48);
      *(_QWORD *)(v5 + 48) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v7 = *(unsigned int *)(v5 + 36);
      if ((_DWORD)v7)
      {
        v8 = *(WTF::StringImpl ***)(v5 + 24);
        v9 = 8 * v7;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v4);
            else
              *(_DWORD *)v10 -= 2;
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      v11 = *(WTF **)(v5 + 24);
      if ((WTF *)(v5 + 40) != v11 && v11 != 0)
      {
        *(_QWORD *)(v5 + 24) = 0;
        *(_DWORD *)(v5 + 32) = 0;
        WTF::fastFree(v11, v4);
      }
      WTF::fastFree((WTF *)v5, v4);
      return *(_QWORD *)(v2 + 200);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::Element::getURLAttribute@<X0>(WebCore::Element *this@<X0>, const WebCore::QualifiedName *a2@<X1>, uint64_t a3@<X2>, WTF::String *a4@<X3>, WTF::URL *a5@<X8>, __n128 a6@<Q0>)
{
  WebCore::Document *v7;
  _QWORD *Attribute;

  v7 = *(WebCore::Document **)(*((_QWORD *)this + 5) + 8);
  Attribute = (_QWORD *)WebCore::Element::getAttribute(this, a2, a3, a4, a6);
  return WebCore::Document::completeURL(v7, Attribute, (uint64_t)v7 + 848, 0, a5);
}

uint64_t WebCore::Element::getIntegralAttribute(WebCore::Element *this, const WebCore::QualifiedName *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v9;

  v5 = *(_QWORD *)WebCore::Element::getAttribute(this, a2, a3, a4, a5);
  if (v5)
  {
    v6 = *(uint64_t **)(v5 + 8);
    v7 = *(unsigned int *)(v5 + 4) | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v6 = 0;
    v7 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v6, v7, &v9);
  if (HIDWORD(v9))
    return 0;
  else
    return v9;
}

uint64_t WebCore::Element::getUnsignedIntegralAttribute(WebCore::Element *this, const WebCore::QualifiedName *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;

  v5 = *(_QWORD *)WebCore::Element::getAttribute(this, a2, a3, a4, a5);
  if (v5)
  {
    v6 = *(uint64_t **)(v5 + 8);
    v7 = *(unsigned int *)(v5 + 4) | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v6 = 0;
    v7 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v6, v7, &v9);
  if (HIDWORD(v9) == 1)
    return 0;
  if (HIDWORD(v9))
    std::__throw_bad_variant_access[abi:sn180100]();
  result = v9;
  if ((v9 & 0x80000000) != 0)
    return 0;
  return result;
}

WTF::StringImpl *WebCore::Element::setUnsignedIntegralAttribute(WebCore::Element *this, const WebCore::QualifiedName *a2, int a3)
{
  __n128 v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v11;

  WTF::AtomString::number((WTF::AtomString *)(a3 & ~(a3 >> 31)));
  WebCore::Element::setAttribute(this, a2, &v8, 0, &v9, v5);
  if (v11 && v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v6);
    else
      *(_DWORD *)v10 -= 2;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *WebCore::Element::webkitRequestFullscreen(WebCore::Element *this)
{
  _DWORD *result;
  _DWORD *v2;
  __int16 v3;

  v3 = 0;
  v2 = 0;
  (*(void (**)(WebCore::Element *, __int16 *, _DWORD **))(*(_QWORD *)this + 976))(this, &v3, &v2);
  result = v2;
  v2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

unsigned int *WebCore::Element::requestFullscreen(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  unsigned int *result;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  void *v14;
  WebCore::FullscreenManager *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  WebCore::Node *v19;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(uint64_t **)(v5 + 1992);
  if (!v6)
  {
    v11 = WTF::fastMalloc((WTF *)0x90);
    *(_QWORD *)v11 = 0;
    *(_DWORD *)(v11 + 8) = 0;
    v12 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v5);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 16) = v12;
    *(_BYTE *)(v11 + 40) = 0;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
    *(_OWORD *)(v11 + 80) = 0u;
    *(_OWORD *)(v11 + 96) = 0u;
    *(_OWORD *)(v11 + 112) = 0u;
    *(_DWORD *)(v11 + 127) = 0;
    *(_QWORD *)(v11 + 136) = WTF::cryptographicallyRandomNumber<unsigned long long>();
    v15 = *(WebCore::FullscreenManager **)(v5 + 1992);
    *(_QWORD *)(v5 + 1992) = v11;
    if (v15)
    {
      WebCore::FullscreenManager::~FullscreenManager(v15, v14);
      if (*(_DWORD *)(v16 + 8))
      {
        *(_OWORD *)(v16 + 112) = 0u;
        *(_OWORD *)(v16 + 128) = 0u;
        *(_OWORD *)(v16 + 80) = 0u;
        *(_OWORD *)(v16 + 96) = 0u;
        *(_OWORD *)(v16 + 48) = 0u;
        *(_OWORD *)(v16 + 64) = 0u;
        *(_OWORD *)(v16 + 16) = 0u;
        *(_OWORD *)(v16 + 32) = 0u;
        *(_OWORD *)v16 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v16, v17);
      }
    }
    v6 = *(uint64_t **)(v5 + 1992);
  }
  *(_DWORD *)(a1 + 24) += 2;
  v19 = (WebCore::Node *)a1;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E33A4950;
  v18 = v7;
  WebCore::FullscreenManager::requestFullscreenForElement(v6, (uint64_t *)&v19, a3, 0, (uint64_t *)&v18, 1);
  v9 = (uint64_t)v18;
  v18 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = (unsigned int *)v19;
  v19 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, v8);
    }
    else
    {
      result[6] -= 2;
    }
  }
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v5, v8);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return result;
}

unsigned __int8 *WebCore::Element::setFullscreenFlag(WebCore::Element *this, void *a2)
{
  int v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 hasPendingFullStyleRebuild;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *result;
  uint64_t v15;
  WebCore::Element *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;

  v2 = (int)a2;
  if ((*((_BYTE *)this + 22) & 8) == 0)
    goto LABEL_18;
  v4 = (uint64_t *)*((_QWORD *)this + 5);
  v5 = v4[1];
  if (!*(_QWORD *)(v5 + 1944) || *(_BYTE *)(v5 + 3405))
    goto LABEL_18;
  if ((*((_BYTE *)this + 70) & 4) != 0)
  {
    v10 = *v4;
    v11 = (*(_WORD *)(v10 + 28) & 0x80) == 0 || v10 == 0;
    v12 = v10 + 216;
    if (v11)
      v12 = v5 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v12 + 236))
      goto LABEL_18;
  }
  v6 = *(_QWORD *)(v5 + 1272);
  if (v6 && (*(_BYTE *)(v6 + 70) & 4) != 0)
  {
LABEL_18:
    LOBYTE(v15) = 0;
    v17 = 0;
    v18 = 0;
    v16 = this;
  }
  else
  {
    hasPendingFullStyleRebuild = WebCore::Document::hasPendingFullStyleRebuild((WebCore::Document *)v5);
    LOBYTE(v15) = !hasPendingFullStyleRebuild;
    v17 = 0;
    v18 = 0;
    v16 = this;
    if (!hasPendingFullStyleRebuild)
    {
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v15, (WTF::StringImpl *)0x20, v2, 0);
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v15, (WTF::StringImpl *)0x2F, v2, 0);
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v16, &v17);
      v8 = v15;
      v9 = 0x40000000000000;
      if (!v2)
        v9 = 0;
      *((_QWORD *)this + 6) = *((_QWORD *)this + 6) & 0xFFBFFFFFFFFFFFFFLL | v9;
      if (v8)
        WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v16, &v18);
      goto LABEL_22;
    }
  }
  v13 = 0x40000000000000;
  if (!v2)
    v13 = 0;
  *((_QWORD *)this + 6) = *((_QWORD *)this + 6) & 0xFFBFFFFFFFFFFFFFLL | v13;
LABEL_22:
  if (v18)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v18, a2);
  result = v17;
  if (v17)
    return (unsigned __int8 *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v17, a2);
  return result;
}

BOOL WebCore::Element::hasPointerCapture(WebCore::Element *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WebCore::PointerCaptureController::CapturingData *v16;
  _BOOL8 v17;
  WTF *v18;
  void *v19;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 24);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 0;
  v6 = (*(_DWORD *)v5)++;
  v7 = *(_QWORD *)(v5 + 88);
  if (!*(_BYTE *)(v7 + 17) || (v8 = *(_QWORD *)(v7 + 8)) == 0)
  {
LABEL_14:
    v17 = 0;
    if (v6)
      goto LABEL_15;
    goto LABEL_13;
  }
  v9 = *(_DWORD *)(v8 - 8);
  v10 = ~((unint64_t)a2 << 32) + a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  v14 = *(_QWORD *)(v8 + 16 * v13);
  if (v14 != a2)
  {
    v15 = 1;
    while (v14 != 0x8000000000000000)
    {
      v13 = ((_DWORD)v13 + v15) & v9;
      v14 = *(_QWORD *)(v8 + 16 * v13);
      ++v15;
      if (v14 == a2)
        goto LABEL_11;
    }
    goto LABEL_14;
  }
LABEL_11:
  v16 = *(WebCore::PointerCaptureController::CapturingData **)(v8 + 16 * v13 + 8);
  if (!v16)
    goto LABEL_14;
  ++*(_DWORD *)v16;
  v17 = *((_QWORD *)v16 + 1) == (_QWORD)this;
  WTF::RefCounted<WebCore::PointerCaptureController::CapturingData>::deref(v16, a2);
  v6 = *(_DWORD *)v5 - 1;
  if (*(_DWORD *)v5 != 1)
  {
LABEL_15:
    *(_DWORD *)v5 = v6;
    return v17;
  }
LABEL_13:
  WebCore::Page::~Page(v5);
  WTF::fastFree(v18, v19);
  return v17;
}

WebCore::IntersectionObserver *WebCore::Element::disconnectFromIntersectionObserversSlow(WebCore::IntersectionObserver *result, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  unsigned int v8;
  unsigned int v9;
  WebCore::Element *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *((unsigned int *)a2 + 7);
  if ((_DWORD)v3)
  {
    v10 = result;
    v11 = a2[2];
    v12 = 24 * v3;
    do
    {
      if (*(_QWORD *)v11)
      {
        result = *(WebCore::IntersectionObserver **)(*(_QWORD *)v11 + 8);
        if (result)
          result = (WebCore::IntersectionObserver *)WebCore::IntersectionObserver::targetDestroyed(result, v10);
      }
      v11 += 24;
      v12 -= 24;
    }
    while (v12);
  }
  if (*((_DWORD *)a2 + 6))
  {
    v4 = *((_DWORD *)a2 + 7);
    v5 = (WTF *)a2[2];
    if (v4)
    {
      v7 = (WTF *)((char *)v5 + 24 * v4);
      do
      {
        result = *(WebCore::IntersectionObserver **)v5;
        *(_QWORD *)v5 = 0;
        if (result)
        {
          do
          {
            v8 = __ldaxr((unsigned int *)result);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, (unsigned int *)result));
          if (!v9)
          {
            atomic_store(1u, (unsigned int *)result);
            result = (WebCore::IntersectionObserver *)WTF::fastFree(result, a2);
          }
        }
        v5 = (WTF *)((char *)v5 + 24);
      }
      while (v5 != v7);
      *((_DWORD *)a2 + 7) = 0;
      v5 = (WTF *)a2[2];
    }
    if (v5)
    {
      a2[2] = 0;
      *((_DWORD *)a2 + 6) = 0;
      result = (WebCore::IntersectionObserver *)WTF::fastFree(v5, a2);
    }
  }
  v6 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v6)
  {
    v14 = *a2;
    v15 = 8 * v6;
    do
    {
      if (*(_QWORD *)v14)
      {
        result = *(WebCore::IntersectionObserver **)(*(_QWORD *)v14 + 8);
        if (result)
          result = (WebCore::IntersectionObserver *)WebCore::IntersectionObserver::rootDestroyed(result);
      }
      v14 += 8;
      v15 -= 8;
    }
    while (v15);
  }
  if (*((_DWORD *)a2 + 2))
  {
    v13 = *((unsigned int *)a2 + 3);
    result = (WebCore::IntersectionObserver *)*a2;
    if ((_DWORD)v13)
    {
      WTF::VectorTypeOperations<WTF::WeakPtr<WebCore::IntersectionObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::destruct((unsigned int *)result, (char *)result + 8 * v13);
      *((_DWORD *)a2 + 3) = 0;
      result = (WebCore::IntersectionObserver *)*a2;
    }
    if (result)
    {
      *a2 = 0;
      *((_DWORD *)a2 + 2) = 0;
      return (WebCore::IntersectionObserver *)WTF::fastFree(result, a2);
    }
  }
  return result;
}

WTF *WebCore::Element::ensureIntersectionObserverData(WebCore::Element *this)
{
  uint64_t v1;
  WTF *result;
  WTF **v4;
  WTF *v5;
  WTF *v6;

  v1 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  if (!v1)
  {
    WebCore::Node::materializeRareData(this);
    v1 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  }
  v5 = *(WTF **)(v1 + 128);
  v4 = (WTF **)(v1 + 128);
  result = v5;
  if (!v5)
  {
    result = (WTF *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)result = 0u;
    *((_OWORD *)result + 1) = 0u;
    v6 = *v4;
    *v4 = result;
    if (v6)
    {
      std::default_delete<WebCore::IntersectionObserverData>::operator()[abi:sn180100]((int)v4, v6);
      return *v4;
    }
  }
  return result;
}

uint64_t WebCore::Element::intersectionObserverDataIfExists(WebCore::Element *this)
{
  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
    return *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x80);
  else
    return 0;
}

uint64_t WebCore::Element::ensureAnimationRareData(WebCore::Node *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t result;
  _DWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  uint64_t v20;
  WebCore::ElementAnimationRareData *v21;

  v3 = *((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL;
  if (!v3)
  {
    WebCore::Node::materializeRareData(a1);
    v3 = *((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL;
  }
  v5 = *(uint64_t **)(v3 + 152);
  v6 = *(unsigned int *)(v3 + 164);
  if ((_DWORD)v6)
  {
    if (*(_BYTE *)(a2 + 16))
    {
      v18 = 8 * v6;
      while (1)
      {
        result = *v5;
        if (*(_BYTE *)(*v5 + 96))
        {
          if (*(_DWORD *)(result + 80) == *(_DWORD *)a2 && *(_QWORD *)(result + 88) == *(_QWORD *)(a2 + 8))
            break;
        }
        ++v5;
        v18 -= 8;
        if (!v18)
          goto LABEL_4;
      }
    }
    else
    {
      v20 = 8 * v6;
      while (1)
      {
        result = *v5;
        if (!*(_BYTE *)(*v5 + 96))
          break;
        ++v5;
        v20 -= 8;
        if (!v20)
          goto LABEL_4;
      }
    }
  }
  else
  {
LABEL_4:
    result = WTF::fastMalloc((WTF *)0x70);
    *(_BYTE *)(result + 96) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_BYTE *)(result + 80) = 0;
    if (*(_BYTE *)(a2 + 16))
    {
      *(_DWORD *)(result + 80) = *(_DWORD *)a2;
      v8 = *(_DWORD **)(a2 + 8);
      if (v8)
        *v8 += 2;
      *(_QWORD *)(result + 88) = v8;
      *(_BYTE *)(result + 96) = 1;
    }
    *(_WORD *)(result + 104) = 0;
    v21 = (WebCore::ElementAnimationRareData *)result;
    v9 = *(unsigned int *)(v3 + 164);
    if ((_DWORD)v9 == *(_DWORD *)(v3 + 160))
    {
      v10 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3 + 152, v9 + 1, (unint64_t)&v21);
      v12 = *(unsigned int *)(v3 + 164);
      v13 = *(_QWORD *)(v3 + 152);
      v14 = *v10;
      *v10 = 0;
      *(_QWORD *)(v13 + 8 * v12) = v14;
      result = (uint64_t)v21;
      v15 = v12 + 1;
      *(_DWORD *)(v3 + 164) = v15;
      v21 = 0;
      if (result)
      {
        WebCore::ElementAnimationRareData::~ElementAnimationRareData((WebCore::ElementAnimationRareData *)result, v11);
        result = WTF::fastFree(v16, v17);
        v15 = *(_DWORD *)(v3 + 164);
      }
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v3 + 152) + 8 * v9) = result;
      v15 = v9 + 1;
      *(_DWORD *)(v3 + 164) = v15;
    }
    if (v15)
      return *(_QWORD *)(*(_QWORD *)(v3 + 152) + 8 * v15 - 8);
    else
      __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::Element::keyframeEffectStack(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  v3 = *(unsigned int *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
  if (!(_DWORD)v3)
    return 0;
  v4 = *(uint64_t **)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
  if (*(_BYTE *)(a2 + 16))
  {
    v5 = 8 * v3;
    while (1)
    {
      v6 = *v4;
      if (*(_BYTE *)(*v4 + 96))
      {
        if (*(_DWORD *)(v6 + 80) == *(_DWORD *)a2 && *(_QWORD *)(v6 + 88) == *(_QWORD *)(a2 + 8))
          break;
      }
      result = 0;
      ++v4;
      v5 -= 8;
      if (!v5)
        return result;
    }
  }
  else
  {
    v8 = 8 * v3;
    result = 0;
    while (1)
    {
      v6 = *v4;
      if (!*(_BYTE *)(*v4 + 96))
        break;
      ++v4;
      v8 -= 8;
      if (!v8)
        return result;
    }
  }
  return *(_QWORD *)v6;
}

uint64_t WebCore::Element::ensureKeyframeEffectStack(WebCore::Node *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  WTF::StringImpl *v4;
  WebCore::KeyframeEffectStack *v5;
  WTF *v6;
  void *v7;

  v2 = WebCore::Element::ensureAnimationRareData(a1, a2);
  result = *(_QWORD *)v2;
  if (!*(_QWORD *)v2)
  {
    result = WTF::fastMalloc((WTF *)0x50);
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_QWORD *)(result + 64) = 0;
    *(_BYTE *)(result + 72) = 1;
    v5 = *(WebCore::KeyframeEffectStack **)v2;
    *(_QWORD *)v2 = result;
    if (v5)
    {
      WebCore::KeyframeEffectStack::~KeyframeEffectStack(v5, v4);
      WTF::fastFree(v6, v7);
      return *(_QWORD *)v2;
    }
  }
  return result;
}

uint64_t WebCore::Element::animations(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  v3 = *(unsigned int *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
  if (!(_DWORD)v3)
    return 0;
  v4 = *(uint64_t **)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
  if (*(_BYTE *)(a2 + 16))
  {
    v5 = 8 * v3;
    while (1)
    {
      v6 = *v4;
      if (*(_BYTE *)(*v4 + 96))
      {
        if (*(_DWORD *)(v6 + 80) == *(_DWORD *)a2 && *(_QWORD *)(v6 + 88) == *(_QWORD *)(a2 + 8))
          break;
      }
      result = 0;
      ++v4;
      v5 -= 8;
      if (!v5)
        return result;
    }
  }
  else
  {
    v8 = 8 * v3;
    result = 0;
    while (1)
    {
      v6 = *v4;
      if (!*(_BYTE *)(*v4 + 96))
        break;
      ++v4;
      v8 -= 8;
      if (!v8)
        return result;
    }
  }
  return v6 + 16;
}

uint64_t WebCore::Element::hasCompletedTransitionForProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;
  uint64_t *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int j;
  unsigned int v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int v19;
  _BOOL4 v21;
  BOOL v23;
  char v24;
  BOOL v25;
  uint64_t v26;
  char v27;
  char *v28;

  if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  v4 = *(unsigned int *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
  if (!(_DWORD)v4)
    return 0;
  v6 = *(uint64_t **)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
  if (*(_BYTE *)(a2 + 16))
  {
    for (i = 8 * v4; i; i -= 8)
    {
      v8 = *v6;
      if (*(_BYTE *)(*v6 + 96))
      {
        if (*(_DWORD *)(v8 + 80) == *(_DWORD *)a2 && *(_QWORD *)(v8 + 88) == *(_QWORD *)(a2 + 8))
          break;
      }
      result = 0;
      ++v6;
    }
  }
  else
  {
    v10 = 8 * v4;
    result = 0;
    while (1)
    {
      v8 = *v6;
      if (!*(_BYTE *)(*v6 + 96))
        break;
      ++v6;
      v10 -= 8;
      if (!v10)
        return result;
    }
  }
  v11 = *(_QWORD *)(v8 + 64);
  if (!v11)
    return 0;
  v12 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v12 != -1)
  {
    v13 = *(_DWORD *)(v11 - 8);
    v28 = &v27;
    v14 = ((uint64_t (*)(char **, uint64_t))off_1E33A4968[v12])(&v28, a3);
    for (j = 0; ; v14 = j + v16)
    {
      v16 = v14 & v13;
      v17 = (unsigned __int16 *)(v11 + 24 * (v14 & v13));
      v18 = *((unsigned int *)v17 + 2);
      v19 = *(_DWORD *)(a3 + 8);
      v21 = v19 == (_DWORD)v18 && v19 != -1;
      if ((_DWORD)v18 == -1 || !v21)
      {
        v23 = v19 == -1;
        if ((_DWORD)v18 != -1)
          v23 = v21;
        if (v23)
          return 1;
      }
      else
      {
        v28 = &v27;
        v24 = ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E33A4978[v18])(&v28, v11 + 24 * v16, a3);
        if ((v24 & 1) != 0)
          return 1;
        LODWORD(v18) = *((_DWORD *)v17 + 2);
      }
      if ((_DWORD)v18)
        v25 = 0;
      else
        v25 = *v17 == 0;
      if (v25)
        return 0;
      ++j;
    }
  }
  v26 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::Element::hasRunningTransitionForProperty(v26);
}

BOOL WebCore::Element::hasRunningTransitionForProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  uint64_t v4;
  uint64_t *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int j;
  unsigned int v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int v19;
  _BOOL4 v21;
  BOOL v23;
  char v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char *v29;

  if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  v4 = *(unsigned int *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
  if (!(_DWORD)v4)
    return 0;
  v6 = *(uint64_t **)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
  if (*(_BYTE *)(a2 + 16))
  {
    for (i = 8 * v4; i; i -= 8)
    {
      v8 = *v6;
      if (*(_BYTE *)(*v6 + 96))
      {
        if (*(_DWORD *)(v8 + 80) == *(_DWORD *)a2 && *(_QWORD *)(v8 + 88) == *(_QWORD *)(a2 + 8))
          break;
      }
      result = 0;
      ++v6;
    }
  }
  else
  {
    v10 = 8 * v4;
    result = 0;
    while (1)
    {
      v8 = *v6;
      if (!*(_BYTE *)(*v6 + 96))
        break;
      ++v6;
      v10 -= 8;
      if (!v10)
        return result;
    }
  }
  v11 = *(_QWORD *)(v8 + 72);
  if (!v11)
    return 0;
  v12 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v12 != -1)
  {
    v13 = *(_DWORD *)(v11 - 8);
    v29 = &v28;
    v14 = ((uint64_t (*)(char **, uint64_t))off_1E33A4968[v12])(&v29, a3);
    for (j = 0; ; v14 = j + v16)
    {
      v16 = v14 & v13;
      v17 = (unsigned __int16 *)(v11 + 24 * (v14 & v13));
      v18 = *((unsigned int *)v17 + 2);
      v19 = *(_DWORD *)(a3 + 8);
      v21 = v19 == (_DWORD)v18 && v19 != -1;
      if ((_DWORD)v18 == -1 || !v21)
      {
        v23 = v19 == -1;
        if ((_DWORD)v18 != -1)
          v23 = v21;
        if (v23)
          return 1;
      }
      else
      {
        v29 = &v28;
        v24 = ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E33A4978[v18])(&v29, v11 + 24 * v16, a3);
        if ((v24 & 1) != 0)
          return 1;
        LODWORD(v18) = *((_DWORD *)v17 + 2);
      }
      if ((_DWORD)v18)
        v25 = 0;
      else
        v25 = *v17 == 0;
      if (v25)
        return 0;
      ++j;
    }
  }
  v26 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::Element::hasRunningTransitions(v26, v27);
}

BOOL WebCore::Element::hasRunningTransitions(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  v3 = *(unsigned int *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
  if (!(_DWORD)v3)
    return 0;
  v4 = *(uint64_t **)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
  if (*(_BYTE *)(a2 + 16))
  {
    for (i = 8 * v3; i; i -= 8)
    {
      v6 = *v4;
      if (*(_BYTE *)(*v4 + 96))
      {
        if (*(_DWORD *)(v6 + 80) == *(_DWORD *)a2 && *(_QWORD *)(v6 + 88) == *(_QWORD *)(a2 + 8))
          break;
      }
      result = 0;
      ++v4;
    }
  }
  else
  {
    v8 = 8 * v3;
    result = 0;
    while (1)
    {
      v6 = *v4;
      if (!*(_BYTE *)(*v4 + 96))
        break;
      ++v4;
      v8 -= 8;
      if (!v8)
        return result;
    }
  }
  v9 = *(_QWORD *)(v6 + 72);
  return v9 && *(_DWORD *)(v9 - 12) != 0;
}

_QWORD *WebCore::Element::setAnimationsCreatedByMarkup(_QWORD *result, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  WTF *v16;
  _DWORD *v17;
  uint64_t v18;
  WTF *v19;

  if (!*a3 || !*(_DWORD *)(*a3 - 12))
  {
    if ((result[9] & 0xFFFFFFFFFFFFLL) == 0)
      return result;
    v4 = *(unsigned int *)((result[9] & 0xFFFFFFFFFFFFLL) + 0xA4);
    if (!(_DWORD)v4)
      return result;
    v5 = *(uint64_t **)((result[9] & 0xFFFFFFFFFFFFLL) + 0x98);
    if (*(_BYTE *)(a2 + 16))
    {
      v6 = 8 * v4;
      while (1)
      {
        v7 = *v5;
        if (*(_BYTE *)(*v5 + 96))
        {
          v8 = *(_DWORD *)(v7 + 80);
          v9 = *(_QWORD *)(v7 + 88);
          if (v8 == *(_DWORD *)a2 && v9 == *(_QWORD *)(a2 + 8))
            break;
        }
        ++v5;
        v6 -= 8;
        if (!v6)
          return result;
      }
    }
    else
    {
      v11 = 8 * v4;
      while (*(_BYTE *)(*v5 + 96))
      {
        ++v5;
        v11 -= 8;
        if (!v11)
          return result;
      }
    }
  }
  result = (_QWORD *)WebCore::Element::ensureAnimationRareData(result, a2);
  v13 = a3[2];
  v14 = *(_OWORD *)a3;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v15 = result[5];
  v16 = (WTF *)result[6];
  *(_OWORD *)(result + 5) = v14;
  result[7] = v13;
  if (v16)
  {
    v18 = v15;
    do
    {
      v19 = (WTF *)*((_QWORD *)v16 + 2);
      v17 = *(_DWORD **)v16;
      *(_QWORD *)v16 = 0;
      if (v17)
      {
        if (v17[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 72))(v17);
        else
          --v17[6];
      }
      result = (_QWORD *)WTF::fastFree(v16, v12);
      v15 = v18;
      v16 = v19;
    }
    while (v19);
  }
  if (v15)
    return (_QWORD *)WTF::fastFree((WTF *)(v15 - 16), v12);
  return result;
}

uint64_t WebCore::Element::ensureCompletedTransitionsByProperty(WebCore::Node *a1, uint64_t a2)
{
  return WebCore::Element::ensureAnimationRareData(a1, a2) + 64;
}

_QWORD *WebCore::Element::ensureResizeObserverData(WebCore::Element *this)
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF *v9;
  unsigned int **v10;
  uint64_t v11;
  WTF *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  if (!v1)
  {
    WebCore::Node::materializeRareData(this);
    v1 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  }
  v3 = *(_QWORD **)(v1 + 136);
  if (!v3)
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = 0;
    v3[1] = 0;
    v5 = *(WTF **)(v1 + 136);
    *(_QWORD *)(v1 + 136) = v3;
    if (v5)
    {
      v6 = *((unsigned int *)v5 + 3);
      if ((_DWORD)v6)
      {
        v10 = *(unsigned int ***)v5;
        v11 = *(_QWORD *)v5 + 8 * v6;
        do
        {
          v12 = v5;
          v13 = *v10;
          *v10 = 0;
          if (v13)
          {
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v13);
              WTF::fastFree((WTF *)v13, v4);
            }
          }
          ++v10;
          v5 = v12;
        }
        while (v10 != (unsigned int **)v11);
      }
      v7 = *(WTF **)v5;
      if (*(_QWORD *)v5)
      {
        *(_QWORD *)v5 = 0;
        *((_DWORD *)v5 + 2) = 0;
        v9 = v5;
        WTF::fastFree(v7, v4);
        v5 = v9;
      }
      WTF::fastFree(v5, v4);
      return *(_QWORD **)(v1 + 136);
    }
  }
  return v3;
}

uint64_t WebCore::Element::isSpellCheckingEnabled(WebCore::Element *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  WebCore::Element **v9;
  __int16 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  if (!this)
    return 1;
  while (1)
  {
    v1 = *((_QWORD *)this + 13);
    if (!v1)
    {
LABEL_14:
      v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      goto LABEL_15;
    }
    v2 = *(unsigned int *)(v1 + 4);
    if ((v2 & 1) != 0)
    {
      v3 = *(_QWORD *)(v1 + 40);
      v4 = *(unsigned int *)(v1 + 52);
      if (!v4)
        goto LABEL_14;
    }
    else
    {
      v3 = v1 + 32;
      v4 = v2 >> 5;
      if (!(v2 >> 5))
        goto LABEL_14;
    }
    v5 = (uint64_t *)(v3 + 8);
    while (1)
    {
      v6 = *(v5 - 1);
      if (v6 == WebCore::HTMLNames::spellcheckAttr
        || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::spellcheckAttr + 24)
        && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::spellcheckAttr + 32))
      {
        break;
      }
      v5 += 2;
      if (!--v4)
        goto LABEL_14;
    }
LABEL_15:
    v7 = *v5;
    if (!v7)
      goto LABEL_19;
    v8 = *(_DWORD *)(v7 + 4);
    if (!v8)
      return 1;
    if (v8 != 4)
      break;
    v11 = *(_QWORD *)(v7 + 8);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v11 & 0xDF) != 0x54
        || (*(_BYTE *)(v11 + 1) & 0xDF) != 0x52
        || (*(_BYTE *)(v11 + 2) & 0xDF) != 0x55)
      {
        goto LABEL_19;
      }
      v12 = *(unsigned __int8 *)(v11 + 3);
    }
    else
    {
      if ((*(_WORD *)v11 & 0xFFDF) != 0x54
        || (*(_WORD *)(v11 + 2) & 0xFFDF) != 0x52
        || (*(_WORD *)(v11 + 4) & 0xFFDF) != 0x55)
      {
        goto LABEL_19;
      }
      v12 = *(unsigned __int16 *)(v11 + 6);
    }
    if ((v12 & 0xFFFFFFDF) == 0x45)
      return 1;
LABEL_19:
    if ((*((_WORD *)this + 14) & 0x80) != 0)
    {
      v15 = *((_QWORD *)this + 25);
      if (!v15)
        return 1;
      v9 = (WebCore::Element **)(v15 + 8);
    }
    else
    {
      v9 = (WebCore::Element **)((char *)this + 32);
    }
    this = *v9;
    if (!*v9)
      return 1;
    v10 = *((_WORD *)this + 14);
    if ((v10 & 0x80) != 0)
    {
      v16 = *((_QWORD *)this + 25);
      if (!v16)
        return 1;
      this = *(WebCore::Element **)(v16 + 8);
    }
    else if ((v10 & 8) == 0)
    {
      return 1;
    }
    if (!this)
      return 1;
  }
  if (v8 != 5)
    goto LABEL_19;
  v13 = *(_QWORD *)(v7 + 8);
  if ((*(_BYTE *)(v7 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v13 & 0xDF) == 0x46
      && (*(_BYTE *)(v13 + 1) & 0xDF) == 0x41
      && (*(_BYTE *)(v13 + 2) & 0xDF) == 0x4C
      && (*(_BYTE *)(v13 + 3) & 0xDF) == 0x53)
    {
      v14 = *(unsigned __int8 *)(v13 + 4);
      goto LABEL_39;
    }
    goto LABEL_19;
  }
  if ((*(_WORD *)v13 & 0xFFDF) != 0x46
    || (*(_WORD *)(v13 + 2) & 0xFFDF) != 0x41
    || (*(_WORD *)(v13 + 4) & 0xFFDF) != 0x4C
    || (*(_WORD *)(v13 + 6) & 0xFFDF) != 0x53)
  {
    goto LABEL_19;
  }
  v14 = *(unsigned __int16 *)(v13 + 8);
LABEL_39:
  if ((v14 & 0xFFFFFFDF) != 0x45)
    goto LABEL_19;
  return 0;
}

uint64_t WebCore::Element::isWritingSuggestionsEnabled(WebCore::Element *this, void *a2)
{
  int v3;
  int v4;
  int v5;
  uint64_t *v6;
  WebCore::Element *v7;
  WebCore::Element *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;

  if ((*((_WORD *)this + 14) & 0x10) == 0
    || *(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    goto LABEL_6;
  }
  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = v3 + 2;
  if ((*((_BYTE *)this + 160) & 0x18) != 0)
  {
    if (v3)
    {
      *((_DWORD *)this + 6) = v3;
    }
    else if ((*((_WORD *)this + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(this, a2);
    }
    goto LABEL_6;
  }
  v24 = *(_DWORD *)(*((_QWORD *)this + 30) + 12) & 0x288020;
  if (v3)
  {
    *((_DWORD *)this + 6) = v3;
  }
  else if ((*((_WORD *)this + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(this, a2);
  }
  if (!v24)
  {
LABEL_6:
    if ((*((_WORD *)this + 14) & 0x10) == 0
      || *(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24))
    {
      goto LABEL_11;
    }
    v4 = *((_DWORD *)this + 6);
    *((_DWORD *)this + 6) = v4 + 2;
    v5 = *((_BYTE *)this + 160) & 0x18;
    if (v4)
    {
      *((_DWORD *)this + 6) = v4;
    }
    else if ((*((_WORD *)this + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(this, a2);
    }
    if (v5)
    {
LABEL_11:
      if (!WebCore::Node::computeEditability((uint64_t)this, 0, 1))
        return 0;
    }
  }
  *((_DWORD *)this + 6) += 2;
  v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  v7 = this;
  do
  {
    v8 = v7;
    v9 = *((_QWORD *)v7 + 13);
    if (!v9)
    {
LABEL_25:
      v13 = v6;
      goto LABEL_26;
    }
    v10 = *(unsigned int *)(v9 + 4);
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD *)(v9 + 40);
      v12 = *(unsigned int *)(v9 + 52);
      if (!v12)
        goto LABEL_25;
    }
    else
    {
      v11 = v9 + 32;
      v12 = v10 >> 5;
      if (!(v10 >> 5))
        goto LABEL_25;
    }
    v13 = (uint64_t *)(v11 + 8);
    while (1)
    {
      v14 = *(v13 - 1);
      if (v14 == WebCore::HTMLNames::writingsuggestionsAttr
        || *(_QWORD *)(v14 + 24) == *(_QWORD *)(WebCore::HTMLNames::writingsuggestionsAttr + 24)
        && *(_QWORD *)(v14 + 32) == *(_QWORD *)(WebCore::HTMLNames::writingsuggestionsAttr + 32))
      {
        break;
      }
      v13 += 2;
      if (!--v12)
        goto LABEL_25;
    }
LABEL_26:
    v15 = *v13;
    if (!v15)
      goto LABEL_30;
    v16 = *(_DWORD *)(v15 + 4);
    if (!v16)
      goto LABEL_62;
    if (v16 == 4)
    {
      v18 = *(_QWORD *)(v15 + 8);
      if ((*(_BYTE *)(v15 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v18 & 0xDF) != 0x54
          || (*(_BYTE *)(v18 + 1) & 0xDF) != 0x52
          || (*(_BYTE *)(v18 + 2) & 0xDF) != 0x55)
        {
          goto LABEL_30;
        }
        v19 = *(unsigned __int8 *)(v18 + 3);
      }
      else
      {
        if ((*(_WORD *)v18 & 0xFFDF) != 0x54
          || (*(_WORD *)(v18 + 2) & 0xFFDF) != 0x52
          || (*(_WORD *)(v18 + 4) & 0xFFDF) != 0x55)
        {
          goto LABEL_30;
        }
        v19 = *(unsigned __int16 *)(v18 + 6);
      }
      if ((v19 & 0xFFFFFFDF) != 0x45)
        goto LABEL_30;
LABEL_62:
      v22 = 1;
      goto LABEL_63;
    }
    if (v16 != 5)
      goto LABEL_30;
    v20 = *(_QWORD *)(v15 + 8);
    if ((*(_BYTE *)(v15 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v20 & 0xDF) == 0x46
        && (*(_BYTE *)(v20 + 1) & 0xDF) == 0x41
        && (*(_BYTE *)(v20 + 2) & 0xDF) == 0x4C
        && (*(_BYTE *)(v20 + 3) & 0xDF) == 0x53)
      {
        v21 = *(unsigned __int8 *)(v20 + 4);
LABEL_49:
        if ((v21 & 0xFFFFFFDF) != 0x45)
          goto LABEL_30;
        v22 = 0;
LABEL_63:
        if (*((_DWORD *)v7 + 6) == 2)
        {
          if ((*((_WORD *)v7 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v7, a2);
        }
        else
        {
          *((_DWORD *)v7 + 6) -= 2;
        }
        return v22;
      }
    }
    else if ((*(_WORD *)v20 & 0xFFDF) == 0x46
           && (*(_WORD *)(v20 + 2) & 0xFFDF) == 0x41
           && (*(_WORD *)(v20 + 4) & 0xFFDF) == 0x4C
           && (*(_WORD *)(v20 + 6) & 0xFFDF) == 0x53)
    {
      v21 = *(unsigned __int16 *)(v20 + 8);
      goto LABEL_49;
    }
LABEL_30:
    v17 = WebCore::Node::parentElementInComposedTree(v7);
    v7 = (WebCore::Element *)v17;
    if (v17)
      *(_DWORD *)(v17 + 24) += 2;
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, a2);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  while (v7);
  v25 = *((_QWORD *)this + 13);
  if (!v25)
    goto LABEL_89;
  v26 = *(_DWORD *)(v25 + 4);
  if ((v26 & 1) != 0)
  {
    v27 = *(_QWORD *)(v25 + 40);
    LODWORD(v28) = *(_DWORD *)(v25 + 52);
    if ((_DWORD)v28)
      goto LABEL_75;
    goto LABEL_89;
  }
  v27 = v25 + 32;
  LODWORD(v28) = v26 >> 5;
  if (!(_DWORD)v28)
  {
LABEL_89:
    v29 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_90;
  }
LABEL_75:
  v28 = v28;
  v29 = (uint64_t *)(v27 + 8);
  while (1)
  {
    v30 = *(v29 - 1);
    if (v30 == WebCore::HTMLNames::autocompleteAttr
      || *(_QWORD *)(v30 + 24) == *(_QWORD *)(WebCore::HTMLNames::autocompleteAttr + 24)
      && *(_QWORD *)(v30 + 32) == *(_QWORD *)(WebCore::HTMLNames::autocompleteAttr + 32))
    {
      break;
    }
    v29 += 2;
    if (!--v28)
    {
      v29 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_90:
  v31 = *v29;
  if (*v29)
  {
    v32 = *(_DWORD *)v31;
    v33 = *(_DWORD *)(v31 + 4);
    *(_DWORD *)v31 += 2;
    if (v33 == 3)
    {
      v38 = *(_QWORD *)(v31 + 8);
      if ((*(_BYTE *)(v31 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v38 & 0xDF) != 0x4F || (*(_BYTE *)(v38 + 1) & 0xDF) != 0x46)
          goto LABEL_92;
        v39 = *(unsigned __int8 *)(v38 + 2);
      }
      else
      {
        if ((*(_WORD *)v38 & 0xFFDF) != 0x4F || (*(_WORD *)(v38 + 2) & 0xFFDF) != 0x46)
          goto LABEL_92;
        v39 = *(unsigned __int16 *)(v38 + 4);
      }
      if ((v39 & 0xFFFFFFDF) != 0x46)
        goto LABEL_92;
      v22 = 0;
LABEL_116:
      if (v32)
        *(_DWORD *)v31 = v32;
      else
        WTF::StringImpl::destroy((WTF::StringImpl *)v31, (WTF::StringImpl *)a2);
      return v22;
    }
  }
LABEL_92:
  v34 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v34 + 24) += 2;
  v35 = *(_QWORD *)(v34 + 688);
  if (!v35)
    v35 = WebCore::Document::ensureQuirks((WebCore::Document *)v34);
  if (!*(_QWORD *)v35 || (v36 = *(_QWORD *)(*(_QWORD *)v35 + 8)) == 0)
  {
LABEL_98:
    v22 = 1;
    goto LABEL_112;
  }
  v37 = *(_QWORD *)(v36 + 680);
  if (*(_BYTE *)(v37 + 243))
  {
    if (*(_BYTE *)(v37 + 242))
      goto LABEL_111;
    goto LABEL_98;
  }
  if ((*(_QWORD *)(v37 + 688) & 0x80000) == 0)
    goto LABEL_98;
LABEL_111:
  v40 = WebCore::Document::topDocument(v36);
  v41 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)(v40 + 736));
  v22 = WTF::operator==(v41, v42, "mail.google.com", 16) ^ 1;
LABEL_112:
  if (*(_DWORD *)(v34 + 24) == 2)
  {
    if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v34, a2);
  }
  else
  {
    *(_DWORD *)(v34 + 24) -= 2;
  }
  if (v31)
  {
    v32 = *(_DWORD *)v31 - 2;
    goto LABEL_116;
  }
  return v22;
}

void WebCore::Element::updateNameForTreeScope(WebCore::Element *this, WebCore::TreeScope *a2, const WTF::AtomString *a3, WTF::StringImpl **a4)
{
  WebCore::TreeScopeOrderedMap *v7;
  WebCore::TreeScopeOrderedMap *v8;
  void *v9;
  uint64_t *v10;

  if (*(_QWORD *)a3)
  {
    if (*(_DWORD *)(*(_QWORD *)a3 + 4))
    {
      v7 = (WebCore::TreeScopeOrderedMap *)*((_QWORD *)a2 + 4);
      if (v7)
        WebCore::TreeScopeOrderedMap::remove(v7, a3, this);
    }
  }
  if (*a4 && *((_DWORD *)*a4 + 1))
  {
    v8 = (WebCore::TreeScopeOrderedMap *)*((_QWORD *)a2 + 4);
    if (!v8)
    {
      v8 = (WebCore::TreeScopeOrderedMap *)WTF::fastMalloc((WTF *)8);
      *(_QWORD *)v8 = 0;
      v10 = (uint64_t *)*((_QWORD *)a2 + 4);
      *((_QWORD *)a2 + 4) = v8;
      if (v10)
      {
        if (*v10)
          WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(*v10, v9);
        WTF::fastFree((WTF *)v10, v9);
        v8 = (WebCore::TreeScopeOrderedMap *)*((_QWORD *)a2 + 4);
      }
    }
    WebCore::TreeScopeOrderedMap::add(v8, a4, (const WebCore::TreeScope **)this, a2);
  }
}

void WebCore::Element::updateId(WebCore::Element *a1, WTF::AtomString *a2, WTF::StringImpl **a3, int a4)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WebCore::TreeScope *v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  WebCore::TreeScope *v13;

  if ((*((_BYTE *)a1 + 22) & 0x18) != 0)
  {
    v6 = *(_QWORD *)a2;
    v7 = *a3;
    if (*(WTF::StringImpl **)a2 != *a3)
    {
      v9 = (WebCore::TreeScope *)*((_QWORD *)a1 + 5);
      if (v6 && *(_DWORD *)(v6 + 4))
      {
        v13 = v9;
        v12 = a4;
        WebCore::TreeScope::removeElementById(v9, a2, a1, a4);
        v9 = v13;
        a4 = v12;
        v7 = *a3;
      }
      if (v7 && *((_DWORD *)v7 + 1))
        WebCore::TreeScope::addElementById(v9, a3, (const WebCore::TreeScope **)a1, a4);
      if ((*((_QWORD *)a1 + 2) & 0x18000000000000) == 0x8000000000000)
      {
        v10 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
        if (v10)
          v11 = (*(_WORD *)(v10 + 3358) & 1) == 0;
        else
          v11 = 1;
        if (!v11)
        {
          *(_DWORD *)(v10 + 24) += 2;
          WebCore::Element::updateIdForDocument(a1, v10, a2, a3, 1);
          if (*(_DWORD *)(v10 + 24) == 2)
          {
            if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v10);
          }
          else
          {
            *(_DWORD *)(v10 + 24) -= 2;
          }
        }
      }
    }
  }
}

uint64_t WebCore::Element::resetStyleRelations(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 72);
  *(_QWORD *)(this + 64) &= 0xF7DFFFFFFFFFFFFFLL;
  if ((v1 & 0xFFFFFFFFFFFFLL) != 0)
    *(_WORD *)((v1 & 0xFFFFFFFFFFFFLL) + 0x1A) = 0;
  return this;
}

uint64_t WebCore::Element::resetChildStyleRelations(uint64_t this)
{
  *(_QWORD *)(this + 64) &= 0xAF3FFFFFFFFFFFFFLL;
  return this;
}

void *WebCore::ElementData::makeUniqueCopy(WebCore::ElementData *this, const WebCore::UniqueElementData *a2)
{
  int v4;
  WebCore::UniqueElementData *v5;
  void *result;

  v4 = *((_DWORD *)a2 + 1);
  v5 = (WebCore::UniqueElementData *)WTF::fastMalloc((WTF *)0x78);
  if ((v4 & 1) != 0)
    result = WebCore::UniqueElementData::UniqueElementData(v5, a2);
  else
    result = WebCore::UniqueElementData::UniqueElementData((uint64_t)v5, (uint64_t)a2);
  *(_QWORD *)this = result;
  return result;
}

uint64_t *WTF::RefPtr<WebCore::ElementData,WTF::RawPtrTraits<WebCore::ElementData>,WTF::DefaultRefDerefTraits<WebCore::ElementData>>::operator=<WebCore::UniqueElementData>(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  WTF *v12;
  void *v13;
  WTF *v14;
  unsigned int *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  WTF::StringImpl **v24;
  WTF *v25;
  void *v26;
  WTF::StringImpl *v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD **v31;
  _DWORD *v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int *v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD **v39;
  _DWORD *v40;
  WTF *v41;
  uint64_t v43;
  WTF *v44;

  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 != 1)
    {
      --*(_DWORD *)v4;
      return a1;
    }
    v6 = *(unsigned int *)(v4 + 4);
    if ((v6 & 1) != 0)
    {
      v7 = *(unsigned int *)(v4 + 52);
      if ((_DWORD)v7)
      {
        v8 = 16 * v7;
        v9 = (WTF::StringImpl **)(*(_QWORD *)(v4 + 40) + 8);
        do
        {
          v10 = *v9;
          *v9 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, a2);
            else
              *(_DWORD *)v10 -= 2;
          }
          v11 = (WTF::StringImpl **)*(v9 - 1);
          *(v9 - 1) = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v11);
              WTF::fastFree(v12, v13);
            }
            else
            {
              --*(_DWORD *)v11;
            }
          }
          v9 += 2;
          v8 -= 16;
        }
        while (v8);
      }
      v14 = *(WTF **)(v4 + 40);
      if ((WTF *)(v4 + 56) != v14 && v14 != 0)
      {
        *(_QWORD *)(v4 + 40) = 0;
        *(_DWORD *)(v4 + 48) = 0;
        WTF::fastFree(v14, a2);
      }
      v16 = *(unsigned int **)(v4 + 32);
      *(_QWORD *)(v4 + 32) = 0;
      if (v16)
      {
        if (*v16 == 1)
        {
          v33 = v16[1];
          if (v33 >= 0x10)
          {
            v34 = 0;
            v35 = (unsigned int *)((char *)v16 + ((v33 >> 3) & 0x1FFFFFFE) + 8);
            do
            {
              v36 = (_DWORD *)(*v35 | ((unint64_t)*((unsigned __int8 *)v35 + 4) << 32));
              if (*v36 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v36, a2);
              else
                *v36 -= 2;
              ++v34;
              v35 = (unsigned int *)((char *)v35 + 5);
            }
            while (v34 < (unint64_t)v16[1] >> 4);
          }
          WTF::fastFree((WTF *)v16, a2);
        }
        else
        {
          --*v16;
        }
      }
      v17 = *(WTF::StringImpl **)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, a2);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = *(WTF **)(v4 + 16);
      *(_QWORD *)(v4 + 16) = 0;
      if (v18)
      {
        if (*((_DWORD *)v18 + 2) == 1)
          WebCore::SpaceSplitStringData::destroy(v18, a2);
        else
          --*((_DWORD *)v18 + 2);
      }
      v19 = *(_QWORD *)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (!v19)
        goto LABEL_35;
      v20 = *(_DWORD *)v19 - 1;
      if (*(_DWORD *)v19 != 1)
        goto LABEL_34;
      if ((*(_BYTE *)(v19 + 4) & 8) != 0)
      {
        v37 = *(unsigned int *)(v19 + 28);
        if ((_DWORD)v37)
        {
          v38 = 16 * v37;
          v39 = (_DWORD **)(*(_QWORD *)(v19 + 16) + 8);
          do
          {
            v40 = *v39;
            *v39 = 0;
            if (v40)
            {
              if (*v40 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v40, a2);
              else
                *v40 -= 2;
            }
            v39 += 2;
            v38 -= 16;
          }
          while (v38);
        }
LABEL_81:
        v41 = *(WTF **)(v19 + 16);
        if ((WTF *)(v19 + 32) != v41 && v41 != 0)
        {
          *(_QWORD *)(v19 + 16) = 0;
          *(_DWORD *)(v19 + 24) = 0;
          WTF::fastFree(v41, a2);
        }
        v43 = *(_QWORD *)(v19 + 8);
        *(_QWORD *)(v19 + 8) = 0;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
        v44 = (WTF *)v19;
        goto LABEL_89;
      }
    }
    else
    {
      if (v6 >= 0x20)
      {
        v21 = v6 >> 5;
        v22 = (WTF::StringImpl **)(v4 + 40);
        do
        {
          v23 = *v22;
          *v22 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, a2);
            else
              *(_DWORD *)v23 -= 2;
          }
          v24 = (WTF::StringImpl **)*(v22 - 1);
          *(v22 - 1) = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v24);
              WTF::fastFree(v25, v26);
            }
            else
            {
              --*(_DWORD *)v24;
            }
          }
          v22 += 2;
          --v21;
        }
        while (v21);
      }
      v27 = *(WTF::StringImpl **)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, a2);
        else
          *(_DWORD *)v27 -= 2;
      }
      v28 = *(WTF **)(v4 + 16);
      *(_QWORD *)(v4 + 16) = 0;
      if (v28)
      {
        if (*((_DWORD *)v28 + 2) == 1)
          WebCore::SpaceSplitStringData::destroy(v28, a2);
        else
          --*((_DWORD *)v28 + 2);
      }
      v19 = *(_QWORD *)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (!v19)
        goto LABEL_35;
      v20 = *(_DWORD *)v19 - 1;
      if (*(_DWORD *)v19 != 1)
      {
LABEL_34:
        *(_DWORD *)v19 = v20;
LABEL_35:
        WTF::fastFree((WTF *)v4, a2);
        return a1;
      }
      if ((*(_BYTE *)(v19 + 4) & 8) != 0)
      {
        v29 = *(unsigned int *)(v19 + 28);
        if ((_DWORD)v29)
        {
          v30 = 16 * v29;
          v31 = (_DWORD **)(*(_QWORD *)(v19 + 16) + 8);
          do
          {
            v32 = *v31;
            *v31 = 0;
            if (v32)
            {
              if (*v32 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v32, a2);
              else
                *v32 -= 2;
            }
            v31 += 2;
            v30 -= 16;
          }
          while (v30);
        }
        goto LABEL_81;
      }
    }
    WebCore::ImmutableStyleProperties::~ImmutableStyleProperties((WebCore::ImmutableStyleProperties *)v19, a2);
LABEL_89:
    WTF::fastFree(v44, a2);
    goto LABEL_35;
  }
  return a1;
}

BOOL WebCore::Element::canContainRangeEndPoint(WebCore::Element *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v10;
  int v11;

  v1 = *((_QWORD *)this + 13);
  if (v1
    && ((v2 = *(_DWORD *)(v1 + 4), (v2 & 1) != 0)
      ? (v3 = *(_QWORD *)(v1 + 40), LODWORD(v4) = *(_DWORD *)(v1 + 52))
      : (v3 = v1 + 32, LODWORD(v4) = v2 >> 5),
        (_DWORD)v4))
  {
    v4 = v4;
    v5 = (uint64_t *)(v3 + 8);
    while (1)
    {
      v6 = *(v5 - 1);
      if (v6 == WebCore::HTMLNames::roleAttr
        || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
        && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
      {
        break;
      }
      v5 += 2;
      if (!--v4)
      {
        v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v7 = *v5;
  if (*v5 && *(_DWORD *)(v7 + 4) == 3)
  {
    v10 = *(_QWORD *)(v7 + 8);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v10 & 0xDF) == 0x49 && (*(_BYTE *)(v10 + 1) & 0xDF) == 0x4D)
      {
        v11 = *(unsigned __int8 *)(v10 + 2);
LABEL_20:
        v8 = (v11 & 0xFFFFFFDF) == 71;
        return !v8;
      }
    }
    else if ((*(_WORD *)v10 & 0xFFDF) == 0x49 && (*(_WORD *)(v10 + 2) & 0xFFDF) == 0x4D)
    {
      v11 = *(unsigned __int16 *)(v10 + 4);
      goto LABEL_20;
    }
  }
  v8 = 0;
  return !v8;
}

uint64_t WebCore::Element::completeURLsInAttributeValue@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, WTF::StringImpl **a5@<X8>)
{
  return WebCore::Element::resolveURLStringIfNeeded(a1, (WTF::StringImpl **)(a3 + 8), a4, a2, a5);
}

void WebCore::Element::replaceURLsInAttributeValue(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v2;
  _DWORD *v3;

  v2 = *(_DWORD **)a1;
  if (*(_QWORD *)a1)
    ++*v2;
  *a2 = v2;
  v3 = *(_DWORD **)(a1 + 8);
  if (v3)
    *v3 += 2;
  a2[1] = v3;
}

uint64_t WebCore::Element::insertAdjacent@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, WebCore::Node **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  WebCore::Node *v11;
  uint64_t v12;
  int v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  void *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  WebCore::Node *v22;
  void *v23;
  int v24;
  uint64_t v25;
  WebCore::Node *v26;
  _BYTE v27[8];
  uint64_t v28;
  unsigned __int8 v29;

  v5 = *a2;
  if (*a2)
  {
    switch(*(_DWORD *)(v5 + 4))
    {
      case 8:
        v20 = *(_QWORD *)(v5 + 8);
        if ((*(_BYTE *)(v5 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v20 & 0xDF) != 0x41
            || (*(_BYTE *)(v20 + 1) & 0xDF) != 0x46
            || (*(_BYTE *)(v20 + 2) & 0xDF) != 0x54
            || (*(_BYTE *)(v20 + 3) & 0xDF) != 0x45
            || (*(_BYTE *)(v20 + 4) & 0xDF) != 0x52
            || (*(_BYTE *)(v20 + 5) & 0xDF) != 0x45
            || (*(_BYTE *)(v20 + 6) & 0xDF) != 0x4E)
          {
            goto LABEL_2;
          }
          v21 = *(unsigned __int8 *)(v20 + 7);
        }
        else
        {
          if ((*(_WORD *)v20 & 0xFFDF) != 0x41
            || (*(_WORD *)(v20 + 2) & 0xFFDF) != 0x46
            || (*(_WORD *)(v20 + 4) & 0xFFDF) != 0x54
            || (*(_WORD *)(v20 + 6) & 0xFFDF) != 0x45
            || (*(_WORD *)(v20 + 8) & 0xFFDF) != 0x52
            || (*(_WORD *)(v20 + 10) & 0xFFDF) != 0x45
            || (*(_WORD *)(v20 + 12) & 0xFFDF) != 0x4E)
          {
            goto LABEL_2;
          }
          v21 = *(unsigned __int16 *)(v20 + 14);
        }
        if ((v21 & 0xFFFFFFDF) != 0x44)
          goto LABEL_2;
        v10 = *(_QWORD *)(result + 32);
        if (!v10)
          goto LABEL_120;
        *(_DWORD *)(v10 + 24) += 2;
        v11 = *a3;
        v22 = *(WebCore::Node **)(result + 56);
        if (v22)
          *((_DWORD *)v22 + 6) += 2;
        v26 = v22;
        goto LABEL_67;
      case 9:
        v17 = *(_QWORD *)(v5 + 8);
        if ((*(_BYTE *)(v5 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v17 & 0xDF) != 0x42
            || (*(_BYTE *)(v17 + 1) & 0xDF) != 0x45
            || (*(_BYTE *)(v17 + 2) & 0xDF) != 0x46
            || (*(_BYTE *)(v17 + 3) & 0xDF) != 0x4F
            || (*(_BYTE *)(v17 + 4) & 0xDF) != 0x52
            || (*(_BYTE *)(v17 + 5) & 0xDF) != 0x45
            || (*(_BYTE *)(v17 + 6) & 0xDF) != 0x45
            || (*(_BYTE *)(v17 + 7) & 0xDF) != 0x4E)
          {
            goto LABEL_2;
          }
          v18 = *(unsigned __int8 *)(v17 + 8);
        }
        else
        {
          if ((*(_WORD *)v17 & 0xFFDF) != 0x42
            || (*(_WORD *)(v17 + 2) & 0xFFDF) != 0x45
            || (*(_WORD *)(v17 + 4) & 0xFFDF) != 0x46
            || (*(_WORD *)(v17 + 6) & 0xFFDF) != 0x4F
            || (*(_WORD *)(v17 + 8) & 0xFFDF) != 0x52
            || (*(_WORD *)(v17 + 10) & 0xFFDF) != 0x45
            || (*(_WORD *)(v17 + 12) & 0xFFDF) != 0x45
            || (*(_WORD *)(v17 + 14) & 0xFFDF) != 0x4E)
          {
            goto LABEL_2;
          }
          v18 = *(unsigned __int16 *)(v17 + 16);
        }
        if ((v18 & 0xFFFFFFDF) != 0x44)
          goto LABEL_2;
        result = WebCore::ContainerNode::appendChild(result, *a3, (uint64_t)v27);
        goto LABEL_51;
      case 0xA:
        v12 = *(_QWORD *)(v5 + 8);
        if ((*(_BYTE *)(v5 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v12 & 0xDF) != 0x41
            || (*(_BYTE *)(v12 + 1) & 0xDF) != 0x46
            || (*(_BYTE *)(v12 + 2) & 0xDF) != 0x54
            || (*(_BYTE *)(v12 + 3) & 0xDF) != 0x45
            || (*(_BYTE *)(v12 + 4) & 0xDF) != 0x52
            || (*(_BYTE *)(v12 + 5) & 0xDF) != 0x42
            || (*(_BYTE *)(v12 + 6) & 0xDF) != 0x45
            || (*(_BYTE *)(v12 + 7) & 0xDF) != 0x47
            || (*(_BYTE *)(v12 + 8) & 0xDF) != 0x49)
          {
            goto LABEL_2;
          }
          v13 = *(unsigned __int8 *)(v12 + 9);
        }
        else
        {
          if ((*(_WORD *)v12 & 0xFFDF) != 0x41
            || (*(_WORD *)(v12 + 2) & 0xFFDF) != 0x46
            || (*(_WORD *)(v12 + 4) & 0xFFDF) != 0x54
            || (*(_WORD *)(v12 + 6) & 0xFFDF) != 0x45
            || (*(_WORD *)(v12 + 8) & 0xFFDF) != 0x52
            || (*(_WORD *)(v12 + 10) & 0xFFDF) != 0x42
            || (*(_WORD *)(v12 + 12) & 0xFFDF) != 0x45
            || (*(_WORD *)(v12 + 14) & 0xFFDF) != 0x47
            || (*(_WORD *)(v12 + 16) & 0xFFDF) != 0x49)
          {
            goto LABEL_2;
          }
          v13 = *(unsigned __int16 *)(v12 + 18);
        }
        if ((v13 & 0xFFFFFFDF) != 0x4E)
          goto LABEL_2;
        v14 = *a3;
        v15 = *(WebCore::Node **)(result + 80);
        if (v15)
          *((_DWORD *)v15 + 6) += 2;
        v26 = v15;
        WebCore::ContainerNode::insertBefore(result, (uint64_t *)v14, &v26, (uint64_t)v27);
        result = (uint64_t)v26;
        v26 = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 24) == 2)
          {
            if ((*(_WORD *)(result + 30) & 0x400) == 0)
              result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v16);
          }
          else
          {
            *(_DWORD *)(result + 24) -= 2;
          }
        }
LABEL_51:
        v6 = v29;
        if (v29)
        {
          v19 = v28;
          *(_BYTE *)a4 = v27[0];
          *(_QWORD *)(a4 + 8) = v19;
          goto LABEL_3;
        }
        *(_QWORD *)a4 = *a3;
        goto LABEL_4;
      case 0xB:
        v8 = *(_QWORD *)(v5 + 8);
        if ((*(_BYTE *)(v5 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v8 & 0xDF) != 0x42
            || (*(_BYTE *)(v8 + 1) & 0xDF) != 0x45
            || (*(_BYTE *)(v8 + 2) & 0xDF) != 0x46
            || (*(_BYTE *)(v8 + 3) & 0xDF) != 0x4F
            || (*(_BYTE *)(v8 + 4) & 0xDF) != 0x52
            || (*(_BYTE *)(v8 + 5) & 0xDF) != 0x45
            || (*(_BYTE *)(v8 + 6) & 0xDF) != 0x42
            || (*(_BYTE *)(v8 + 7) & 0xDF) != 0x45
            || (*(_BYTE *)(v8 + 8) & 0xDF) != 0x47
            || (*(_BYTE *)(v8 + 9) & 0xDF) != 0x49)
          {
            goto LABEL_2;
          }
          v9 = *(unsigned __int8 *)(v8 + 10);
        }
        else
        {
          if ((*(_WORD *)v8 & 0xFFDF) != 0x42
            || (*(_WORD *)(v8 + 2) & 0xFFDF) != 0x45
            || (*(_WORD *)(v8 + 4) & 0xFFDF) != 0x46
            || (*(_WORD *)(v8 + 6) & 0xFFDF) != 0x4F
            || (*(_WORD *)(v8 + 8) & 0xFFDF) != 0x52
            || (*(_WORD *)(v8 + 10) & 0xFFDF) != 0x45
            || (*(_WORD *)(v8 + 12) & 0xFFDF) != 0x42
            || (*(_WORD *)(v8 + 14) & 0xFFDF) != 0x45
            || (*(_WORD *)(v8 + 16) & 0xFFDF) != 0x47
            || (*(_WORD *)(v8 + 18) & 0xFFDF) != 0x49)
          {
            goto LABEL_2;
          }
          v9 = *(unsigned __int16 *)(v8 + 20);
        }
        if ((v9 & 0xFFFFFFDF) != 0x4E)
          goto LABEL_2;
        v10 = *(_QWORD *)(result + 32);
        if (v10)
        {
          *(_DWORD *)(v10 + 24) += 2;
          v11 = *a3;
          *(_DWORD *)(result + 24) += 2;
          v26 = (WebCore::Node *)result;
LABEL_67:
          WebCore::ContainerNode::insertBefore(v10, (uint64_t *)v11, &v26, (uint64_t)v27);
          result = (uint64_t)v26;
          v26 = 0;
          if (result)
          {
            if (*(_DWORD *)(result + 24) == 2)
            {
              if ((*(_WORD *)(result + 30) & 0x400) == 0)
                result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v23);
            }
            else
            {
              *(_DWORD *)(result + 24) -= 2;
            }
          }
          v24 = v29;
          if (v29)
          {
            v25 = v28;
            *(_BYTE *)a4 = v27[0];
            *(_QWORD *)(a4 + 8) = v25;
            v24 = 1;
          }
          else
          {
            *(_QWORD *)a4 = *a3;
          }
          *(_DWORD *)(a4 + 16) = v24;
          if (*(_DWORD *)(v10 + 24) == 2)
          {
            if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
              result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v10, v23);
          }
          else
          {
            *(_DWORD *)(v10 + 24) -= 2;
          }
        }
        else
        {
LABEL_120:
          *(_QWORD *)a4 = 0;
          *(_DWORD *)(a4 + 16) = 0;
        }
        break;
      default:
        goto LABEL_2;
    }
  }
  else
  {
LABEL_2:
    *(_BYTE *)a4 = 9;
    *(_QWORD *)(a4 + 8) = 0;
LABEL_3:
    v6 = 1;
LABEL_4:
    *(_DWORD *)(a4 + 16) = v6;
  }
  return result;
}

uint64_t WebCore::Element::insertAdjacentElement@<X0>(WebCore::Element *this@<X0>, const WTF::String *a2@<X1>, WebCore::Element *a3@<X2>, uint64_t a4@<X8>)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  WebCore::Node *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  *((_DWORD *)a3 + 6) += 2;
  v11 = a3;
  WebCore::Element::insertAdjacent((uint64_t)this, (uint64_t *)a2, &v11, (uint64_t)&v12);
  if (*((_DWORD *)a3 + 6) == 2)
  {
    if ((*((_WORD *)a3 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(a3, v6);
  }
  else
  {
    *((_DWORD *)a3 + 6) -= 2;
  }
  v7 = v14;
  if (!v14)
  {
    if (v12 && (*(_WORD *)(v12 + 28) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1959D5B50);
    }
    *(_QWORD *)a4 = v12;
    goto LABEL_9;
  }
  if (v14 == 1)
  {
    v8 = v13;
    v13 = 0;
    *(_BYTE *)a4 = v12;
    *(_QWORD *)(a4 + 8) = v8;
LABEL_9:
    *(_DWORD *)(a4 + 16) = v7;
    return __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore4NodeENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v7](&v11, &v12);
  }
  v10 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::Element::insertAdjacentHTML(v10);
}

uint64_t WebCore::Element::insertAdjacentHTML@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  WebCore::Node *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  _QWORD v58[2];
  int v59;

  v7 = *a2;
  if (!*a2)
    goto LABEL_2;
  switch(*(_DWORD *)(v7 + 4))
  {
    case 8:
      v17 = *(_QWORD *)(v7 + 8);
      if ((*(_BYTE *)(v7 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v17 & 0xDF) != 0x41
          || (*(_BYTE *)(v17 + 1) & 0xDF) != 0x46
          || (*(_BYTE *)(v17 + 2) & 0xDF) != 0x54
          || (*(_BYTE *)(v17 + 3) & 0xDF) != 0x45
          || (*(_BYTE *)(v17 + 4) & 0xDF) != 0x52
          || (*(_BYTE *)(v17 + 5) & 0xDF) != 0x45
          || (*(_BYTE *)(v17 + 6) & 0xDF) != 0x4E)
        {
          goto LABEL_2;
        }
        v18 = *(unsigned __int8 *)(v17 + 7);
      }
      else
      {
        if ((*(_WORD *)v17 & 0xFFDF) != 0x41
          || (*(_WORD *)(v17 + 2) & 0xFFDF) != 0x46
          || (*(_WORD *)(v17 + 4) & 0xFFDF) != 0x54
          || (*(_WORD *)(v17 + 6) & 0xFFDF) != 0x45
          || (*(_WORD *)(v17 + 8) & 0xFFDF) != 0x52
          || (*(_WORD *)(v17 + 10) & 0xFFDF) != 0x45
          || (*(_WORD *)(v17 + 12) & 0xFFDF) != 0x4E)
        {
          goto LABEL_2;
        }
        v18 = *(unsigned __int16 *)(v17 + 14);
      }
      if ((v18 & 0xFFFFFFDF) == 0x44)
        goto LABEL_30;
      goto LABEL_2;
    case 9:
      v24 = *(_QWORD *)(v7 + 8);
      if ((*(_BYTE *)(v7 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v24 & 0xDF) != 0x42
          || (*(_BYTE *)(v24 + 1) & 0xDF) != 0x45
          || (*(_BYTE *)(v24 + 2) & 0xDF) != 0x46
          || (*(_BYTE *)(v24 + 3) & 0xDF) != 0x4F
          || (*(_BYTE *)(v24 + 4) & 0xDF) != 0x52
          || (*(_BYTE *)(v24 + 5) & 0xDF) != 0x45
          || (*(_BYTE *)(v24 + 6) & 0xDF) != 0x45
          || (*(_BYTE *)(v24 + 7) & 0xDF) != 0x4E)
        {
          goto LABEL_2;
        }
        v25 = *(unsigned __int8 *)(v24 + 8);
      }
      else
      {
        if ((*(_WORD *)v24 & 0xFFDF) != 0x42
          || (*(_WORD *)(v24 + 2) & 0xFFDF) != 0x45
          || (*(_WORD *)(v24 + 4) & 0xFFDF) != 0x46
          || (*(_WORD *)(v24 + 6) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v24 + 8) & 0xFFDF) != 0x52
          || (*(_WORD *)(v24 + 10) & 0xFFDF) != 0x45
          || (*(_WORD *)(v24 + 12) & 0xFFDF) != 0x45
          || (*(_WORD *)(v24 + 14) & 0xFFDF) != 0x4E)
        {
          goto LABEL_2;
        }
        v25 = *(unsigned __int16 *)(v24 + 16);
      }
      v19 = a1;
      if ((v25 & 0xFFFFFFDF) == 0x44)
        goto LABEL_59;
      goto LABEL_2;
    case 0xA:
      v22 = *(_QWORD *)(v7 + 8);
      if ((*(_BYTE *)(v7 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v22 & 0xDF) != 0x41
          || (*(_BYTE *)(v22 + 1) & 0xDF) != 0x46
          || (*(_BYTE *)(v22 + 2) & 0xDF) != 0x54
          || (*(_BYTE *)(v22 + 3) & 0xDF) != 0x45
          || (*(_BYTE *)(v22 + 4) & 0xDF) != 0x52
          || (*(_BYTE *)(v22 + 5) & 0xDF) != 0x42
          || (*(_BYTE *)(v22 + 6) & 0xDF) != 0x45
          || (*(_BYTE *)(v22 + 7) & 0xDF) != 0x47
          || (*(_BYTE *)(v22 + 8) & 0xDF) != 0x49)
        {
          goto LABEL_2;
        }
        v23 = *(unsigned __int8 *)(v22 + 9);
      }
      else
      {
        if ((*(_WORD *)v22 & 0xFFDF) != 0x41
          || (*(_WORD *)(v22 + 2) & 0xFFDF) != 0x46
          || (*(_WORD *)(v22 + 4) & 0xFFDF) != 0x54
          || (*(_WORD *)(v22 + 6) & 0xFFDF) != 0x45
          || (*(_WORD *)(v22 + 8) & 0xFFDF) != 0x52
          || (*(_WORD *)(v22 + 10) & 0xFFDF) != 0x42
          || (*(_WORD *)(v22 + 12) & 0xFFDF) != 0x45
          || (*(_WORD *)(v22 + 14) & 0xFFDF) != 0x47
          || (*(_WORD *)(v22 + 16) & 0xFFDF) != 0x49)
        {
          goto LABEL_2;
        }
        v23 = *(unsigned __int16 *)(v22 + 18);
      }
      v19 = a1;
      if ((v23 & 0xFFFFFFDF) == 0x4E)
        goto LABEL_59;
      goto LABEL_2;
    case 0xB:
      v15 = *(_QWORD *)(v7 + 8);
      if ((*(_BYTE *)(v7 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v15 & 0xDF) != 0x42
          || (*(_BYTE *)(v15 + 1) & 0xDF) != 0x45
          || (*(_BYTE *)(v15 + 2) & 0xDF) != 0x46
          || (*(_BYTE *)(v15 + 3) & 0xDF) != 0x4F
          || (*(_BYTE *)(v15 + 4) & 0xDF) != 0x52
          || (*(_BYTE *)(v15 + 5) & 0xDF) != 0x45
          || (*(_BYTE *)(v15 + 6) & 0xDF) != 0x42
          || (*(_BYTE *)(v15 + 7) & 0xDF) != 0x45
          || (*(_BYTE *)(v15 + 8) & 0xDF) != 0x47
          || (*(_BYTE *)(v15 + 9) & 0xDF) != 0x49)
        {
          goto LABEL_2;
        }
        v16 = *(unsigned __int8 *)(v15 + 10);
      }
      else
      {
        if ((*(_WORD *)v15 & 0xFFDF) != 0x42
          || (*(_WORD *)(v15 + 2) & 0xFFDF) != 0x45
          || (*(_WORD *)(v15 + 4) & 0xFFDF) != 0x46
          || (*(_WORD *)(v15 + 6) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v15 + 8) & 0xFFDF) != 0x52
          || (*(_WORD *)(v15 + 10) & 0xFFDF) != 0x45
          || (*(_WORD *)(v15 + 12) & 0xFFDF) != 0x42
          || (*(_WORD *)(v15 + 14) & 0xFFDF) != 0x45
          || (*(_WORD *)(v15 + 16) & 0xFFDF) != 0x47
          || (*(_WORD *)(v15 + 18) & 0xFFDF) != 0x49)
        {
          goto LABEL_2;
        }
        v16 = *(unsigned __int16 *)(v15 + 20);
      }
      if ((v16 & 0xFFFFFFDF) == 0x4E)
      {
LABEL_30:
        v19 = *(_QWORD *)(a1 + 32);
        if (!v19)
          goto LABEL_34;
        v20 = *(_DWORD *)(v19 + 24);
        *(_DWORD *)(v19 + 24) = v20 + 2;
        v21 = *(_WORD *)(v19 + 28) & 0xF000;
        if (v20)
        {
          *(_DWORD *)(v19 + 24) = v20;
        }
        else if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v19, a2);
        }
        if (v21 == 36864)
        {
LABEL_34:
          v8 = 4;
          goto LABEL_3;
        }
LABEL_59:
        v26 = *(_WORD *)(v19 + 28);
        if ((v26 & 8) != 0)
          v27 = v19;
        else
          v27 = 0;
        if (v27)
        {
          *(_DWORD *)(v27 + 24) += 2;
          if ((v26 & 0x10) == 0
            || (v28 = *(_QWORD *)(*(_QWORD *)(v19 + 40) + 8), (*(_WORD *)(v28 + 3358) & 1) == 0)
            || *(_QWORD *)(*(_QWORD *)(v19 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
          {
            v59 = 0;
            goto LABEL_67;
          }
        }
        else
        {
          v28 = *(_QWORD *)(*(_QWORD *)(v19 + 40) + 8);
        }
        *(_DWORD *)(v28 + 24) += 2;
        v36 = bmalloc::api::isoAllocate();
        v19 = v36;
        *(_OWORD *)(v36 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v36 + 24) = 0x101C00000002;
        *(_QWORD *)(v36 + 32) = 0;
        *(_QWORD *)(v36 + 40) = v28 + 96;
        a6 = 0uLL;
        *(_OWORD *)(v36 + 48) = 0u;
        *(_OWORD *)(v36 + 64) = 0u;
        ++*(_DWORD *)(v28 + 3324);
        *(_QWORD *)(v36 + 80) = 0;
        *(_QWORD *)(v36 + 88) = 0;
        v38 = WebCore::HTMLNames::bodyTag;
        if (WebCore::HTMLNames::bodyTag)
          ++*(_DWORD *)WebCore::HTMLNames::bodyTag;
        *(_QWORD *)(v36 + 96) = v38;
        *(_QWORD *)(v36 + 104) = 0;
        *(_QWORD *)v36 = off_1E33B5118;
        v59 = 0;
        if (*(_DWORD *)(v28 + 24) == 2)
        {
          if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v28, v37);
        }
        else
        {
          *(_DWORD *)(v28 + 24) -= 2;
        }
        if (v27)
        {
          if (*(_DWORD *)(v27 + 24) == 2)
          {
            if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v27, v37);
          }
          else
          {
            *(_DWORD *)(v27 + 24) -= 2;
          }
        }
LABEL_67:
        v58[0] = 0;
        WebCore::createFragmentForInnerOuterHTML(v19, a3, 1u, (uint64_t)&v55, a6);
        if (*(_DWORD *)(v19 + 24) == 2)
        {
          if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v19, v29);
        }
        else
        {
          *(_DWORD *)(v19 + 24) -= 2;
        }
        v30 = v57;
        if (v57)
        {
          if (v57 == 1)
          {
            v31 = v56;
            v56 = 0;
            *(_BYTE *)a5 = v55;
            *(_QWORD *)(a5 + 8) = v31;
            *(_BYTE *)(a5 + 16) = 1;
LABEL_82:
            ((void (*)(uint64_t *, uint64_t *))off_1E33A4588[v30])(&v52, &v55);
            v9 = 0;
            return ((uint64_t (*)(uint64_t *, _QWORD *))off_1E33A4600[v9])(&v55, v58);
          }
LABEL_162:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_163:
          __break(0xC471u);
          JUMPOUT(0x1959D649CLL);
        }
        if (a4)
        {
          v32 = v55;
          if ((*(_WORD *)(v55 + 28) & 4) != 0)
          {
            v39 = *(_QWORD *)(v55 + 80);
            if (v39)
            {
              v50 = (void *)(a4 + 16);
              LODWORD(v40) = *(_DWORD *)(a4 + 12);
              do
              {
                v41 = v40;
                if ((_DWORD)v40 == *(_DWORD *)(a4 + 8))
                {
                  v43 = v40 + 1;
                  v44 = v41 + (v41 >> 2);
                  if (v44 >= 0x10)
                    v45 = v44 + 1;
                  else
                    v45 = 16;
                  if (v45 <= v43)
                    v46 = v41 + 1;
                  else
                    v46 = v45;
                  v47 = *(void **)a4;
                  if (v46 < 0xC)
                  {
                    v48 = (void *)(a4 + 16);
                    *(_QWORD *)a4 = v50;
                    *(_DWORD *)(a4 + 8) = 11;
                  }
                  else
                  {
                    if (v46 >> 29)
                      goto LABEL_163;
                    v48 = (void *)WTF::fastMalloc((WTF *)(8 * v46));
                    *(_DWORD *)(a4 + 8) = v46;
                    *(_QWORD *)a4 = v48;
                  }
                  memcpy(v48, v47, 8 * v41);
                  if (v50 != v47 && v47)
                  {
                    if (*(void **)a4 == v47)
                    {
                      *(_QWORD *)a4 = 0;
                      *(_DWORD *)(a4 + 8) = 0;
                    }
                    WTF::fastFree((WTF *)v47, v49);
                  }
                  v40 = *(unsigned int *)(a4 + 12);
                  v42 = (_QWORD *)(*(_QWORD *)a4 + 8 * v40);
                }
                else
                {
                  v42 = (_QWORD *)(*(_QWORD *)a4 + 8 * v40);
                }
                *(_DWORD *)(v39 + 24) += 2;
                *v42 = v39;
                LODWORD(v40) = v40 + 1;
                *(_DWORD *)(a4 + 12) = v40;
                v39 = *(_QWORD *)(v39 + 56);
              }
              while (v39);
            }
          }
        }
        else
        {
          v32 = v55;
        }
        v55 = 0;
        v51 = (WebCore::Node *)v32;
        WebCore::Element::insertAdjacent(a1, a2, &v51, (uint64_t)&v52);
        if (v32)
        {
          if (*(_DWORD *)(v32 + 24) == 2)
          {
            if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v32, v33);
          }
          else
          {
            *(_DWORD *)(v32 + 24) -= 2;
          }
        }
        v34 = v54;
        if (v54)
        {
          if (v54 != 1)
            goto LABEL_162;
          v35 = v53;
          v53 = 0;
          *(_BYTE *)a5 = v52;
          *(_QWORD *)(a5 + 8) = v35;
          *(_BYTE *)(a5 + 16) = 1;
        }
        else
        {
          *(_QWORD *)a5 = 0;
          *(_QWORD *)(a5 + 8) = 0;
          *(_QWORD *)(a5 + 16) = 0;
        }
        __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore4NodeENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v34](&v51, &v52);
        goto LABEL_82;
      }
LABEL_2:
      v8 = 9;
LABEL_3:
      LOBYTE(v58[0]) = v8;
      v9 = 1;
      v59 = 1;
      v58[1] = 0;
      *(_BYTE *)a5 = v8;
      *(_QWORD *)(a5 + 8) = 0;
      *(_BYTE *)(a5 + 16) = 1;
      return ((uint64_t (*)(uint64_t *, _QWORD *))off_1E33A4600[v9])(&v55, v58);
    default:
      goto LABEL_2;
  }
}

WTF::StringImpl *WebCore::Element::insertAdjacentHTML@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  __n128 v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *result;
  uint64_t v21;
  uint64_t *v22;
  _DWORD **v23;
  _QWORD *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  int v28;
  WTF::StringImpl *v29[2];
  WTF::StringImpl **v30;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) + 8);
  v9 = *(_QWORD *)(v8 + 704);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
      v8 = v10;
  }
  v11 = (WTF::StringImpl *)(v8 + 192);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v29[0] = v11;
  v29[1] = (WTF::StringImpl *)&v25;
  v12 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v12 == -1)
    goto LABEL_19;
  v30 = v29;
  ((void (*)(WTF::StringImpl **__return_ptr, WTF::StringImpl ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore26trustedTypeCompliantStringERNS8_22ScriptExecutionContextEONS_7variantIJNS6_6RefPtrINS8_11TrustedHTMLENS6_12RawPtrTraitsISD_EENS6_21DefaultRefDerefTraitsISD_EEEENS6_6StringEEEERKSJ_E3__0JZNS8_26trustedTypeCompliantStringESA_SL_SN_E3__1EEEEEJNS0_6__implIJSI_SJ_EEEEEEDcOT_DpOT0____fmatrix[v12])(&v26, &v30, a3);
  v15 = v25;
  v25 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (v28)
  {
    if (v28 == 1)
    {
      v16 = v27;
      v27 = 0;
      *(_BYTE *)a4 = (_BYTE)v26;
      *(_QWORD *)(a4 + 8) = v16;
      v17 = 1;
      *(_BYTE *)(a4 + 16) = 1;
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v17])(v29, &v26);
    }
LABEL_19:
    v21 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::Element::insertAdjacentText(v21, v22, v23, v24);
  }
  v18 = v26;
  v26 = 0;
  v29[0] = v18;
  WebCore::Element::insertAdjacentHTML(a1, a2, (unsigned int **)v29, 0, a4, v14);
  result = v29[0];
  v29[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
    else
      *(_DWORD *)result -= 2;
  }
  v17 = v28;
  if (v28 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v17])(v29, &v26);
  return result;
}

unsigned int *WebCore::Element::insertAdjacentText@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _DWORD **a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v16;
  WTF::StringImpl **v17;
  uint64_t *v18;
  WebCore::Node *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = bmalloc::api::isoAllocate();
  v10 = v9;
  *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v9 + 24) = 0x300300000002;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v8 + 96;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  ++*(_DWORD *)(v8 + 3324);
  v11 = *a3;
  if (*a3 || (v11 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v11 += 2;
  *(_QWORD *)(v9 + 80) = v11;
  *(_QWORD *)v9 = off_1E33A8078;
  v19 = (WebCore::Node *)v9;
  WebCore::Element::insertAdjacent(a1, a2, &v19, (uint64_t)&v20);
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v10, v12);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  v13 = v22;
  if (!v22)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return (unsigned int *)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore4NodeENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v13](&v19, &v20);
  }
  if (v22 == 1)
  {
    v14 = v21;
    v21 = 0;
    *(_BYTE *)a4 = v20;
    a4[1] = v14;
    *((_BYTE *)a4 + 16) = 1;
    return (unsigned int *)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore4NodeENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v13](&v19, &v20);
  }
  v16 = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::Element::findAnchorElementForLink(v16, v17, v18);
}

unsigned int *WebCore::Element::findAnchorElementForLink@<X0>(unsigned int *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unsigned __int8 *v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char v21;
  unsigned int v22;

  if ((*((_WORD *)this + 15) & 1) == 0)
    goto LABEL_28;
  v5 = *((_QWORD *)this + 13);
  if (!v5)
    goto LABEL_13;
  v6 = *(_DWORD *)(v5 + 4);
  if ((v6 & 1) == 0)
  {
    v7 = v5 + 32;
    LODWORD(v8) = v6 >> 5;
    if ((_DWORD)v8)
      goto LABEL_5;
LABEL_13:
    v9 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_14;
  }
  v7 = *(_QWORD *)(v5 + 40);
  LODWORD(v8) = *(_DWORD *)(v5 + 52);
  if (!(_DWORD)v8)
    goto LABEL_13;
LABEL_5:
  v8 = v8;
  v9 = (_QWORD *)(v7 + 8);
  while (1)
  {
    v10 = *(v9 - 1);
    if (v10 == WebCore::HTMLNames::hrefAttr
      || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 24)
      && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 32))
    {
      break;
    }
    v9 += 2;
    if (!--v8)
    {
      v9 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_14:
  if (!*v9)
  {
LABEL_28:
    *a3 = 0;
    return this;
  }
  v11 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v11 + 24) += 2;
  WebCore::Document::completeURL((WebCore::Document *)v11, v9, v11 + 848, 0, (WTF::URL *)&v20);
  if ((v21 & 1) != 0 && v20 && *((_DWORD *)v20 + 1) > v22 && WTF::equalIgnoringFragmentIdentifier())
  {
    WTF::URL::fragmentIdentifier((WTF::URL *)&v20);
    if ((v13 & 0xFF00000000) != 0)
      WTF::String::String();
    else
      WTF::String::String();
    v15 = v19;
    v16 = *a2;
    *a2 = v19;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v14);
      else
        *(_DWORD *)v16 -= 2;
      v15 = *a2;
    }
    if (v15)
    {
      v17 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
      v18 = *((unsigned int *)v15 + 1) | ((unint64_t)((*((_DWORD *)v15 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v17 = 0;
      v18 = 0x100000000;
    }
    WebCore::TreeScope::findAnchor(v11 + 96, v17, v18, a3);
  }
  else
  {
    *a3 = 0;
  }
  this = (unsigned int *)v20;
  v20 = 0;
  if (this)
  {
    if (*this == 2)
      this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v12);
    else
      *this -= 2;
  }
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v11, v12);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  return this;
}

uint64_t WebCore::Element::animate@<X0>(uint64_t a1@<X0>, JSC::JSGlobalObject *a2@<X1>, JSC::JSCell ***a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  _DWORD *v17;
  JSC::JSGlobalObject *v18;
  _DWORD *v19;
  JSC::JSCell ***v20;
  int v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  JSC::JSGlobalObject *v28;
  JSC::JSCell ***v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  WTF::StringImpl *v34;
  __n128 v35;
  WebCore::WebAnimation *v36;
  WTF::StringImpl *v37;
  WebCore::WebAnimation *v39;
  _DWORD *v40;
  __n128 v41;
  uint64_t result;
  void *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  WTF::StringImpl *v55;
  int v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  _DWORD *v59;
  unsigned __int8 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  WTF::StringImpl **v64;
  uint64_t v65;
  int v66;
  __int128 v67;
  __int128 v68;
  WTF::StringImpl *v69;
  int v70;
  WTF::StringImpl *v71;
  int v72;
  WebCore::Document *v73;
  uint64_t v74;
  int v75;
  __int128 v76;
  __int128 v77;
  WTF::StringImpl *v78;
  int v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  _DWORD *v82;
  unsigned __int8 v83;
  uint64_t v84;
  unsigned int v85;
  char v86[8];
  _BYTE v87[72];
  int v88;
  char v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v9 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v9 += 2;
  LOBYTE(v62) = 0;
  HIDWORD(v62) = 1;
  v86[0] = 0;
  v89 = 0;
  if (!*(_BYTE *)(a4 + 120))
  {
    v19 = 0;
    v21 = 0;
    v15 = v9;
    goto LABEL_62;
  }
  LOBYTE(v74) = 0;
  v85 = -1;
  v10 = *(unsigned int *)(a4 + 112);
  if ((_DWORD)v10 == -1)
  {
    v65 = 0;
    v72 = 0;
    goto LABEL_112;
  }
  ((void (*)(_BYTE **, uint64_t *, uint64_t))off_1E33A4620[v10])(&v51, &v74, a4 + 8);
  v85 = v10;
  v65 = 0;
  v72 = 0;
  if (!(_DWORD)v10)
  {
    v19 = 0;
    v21 = 0;
    v65 = v74;
    v15 = v9;
    goto LABEL_49;
  }
  if ((_DWORD)v10 != 1)
    goto LABEL_112;
  LOBYTE(v51) = 0;
  LODWORD(v52) = -1;
  v12 = v75;
  if (v75 != -1)
  {
    ((void (*)(uint64_t **, _BYTE **, uint64_t *))off_1E33A4640[v75])(&v63, &v51, &v74);
    LODWORD(v52) = v12;
  }
  v53 = v76;
  v54 = v77;
  v13 = v78;
  if (v78)
    *(_DWORD *)v78 += 2;
  v55 = v13;
  v56 = v79;
  v14 = v80;
  if (v80)
    *(_DWORD *)v80 += 2;
  v57 = v14;
  v15 = v81;
  if (v81)
    *(_DWORD *)v81 += 2;
  v58 = v15;
  LOBYTE(v59) = 0;
  v60 = 0;
  v16 = v83;
  if (v83)
  {
    v17 = v82;
    if (v82)
      ++v82[2];
    v59 = v17;
    v16 = 1;
    v60 = 1;
  }
  v61 = v84;
  if (v15)
    *(_DWORD *)v15 += 2;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v11);
      v16 = v60;
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v62 = v61;
  v18 = a2;
  if (v16)
  {
    v19 = v59;
    v20 = a3;
    if (v59)
      ++v59[2];
    v21 = 1;
  }
  else
  {
    v20 = a3;
    v19 = 0;
    v21 = 0;
  }
  if (v72 == -1)
    goto LABEL_37;
  if (v72 != 1)
  {
    ((void (*)(uint64_t **, uint64_t *))off_1E33A4650[v72])(&v63, &v65);
LABEL_37:
    LOBYTE(v65) = 0;
    v72 = -1;
    v66 = -1;
    v22 = v52;
    if ((_DWORD)v52 != -1)
    {
      ((void (*)(uint64_t **, uint64_t *, _BYTE **))off_1E33A4998[v52])(&v63, &v65, &v51);
      v66 = v22;
    }
    v67 = v53;
    v68 = v54;
    v69 = v55;
    v70 = v56;
    v23 = v57;
    v55 = 0;
    v57 = 0;
    v71 = v23;
    v72 = 1;
    a3 = v20;
    a2 = v18;
    goto LABEL_48;
  }
  if (v66 == -1)
  {
    a3 = v20;
    if ((_DWORD)v52 == -1)
      goto LABEL_42;
LABEL_41:
    v63 = &v65;
    ((void (*)(uint64_t **, uint64_t *, _BYTE **))off_1E33A4988[v52])(&v63, &v65, &v51);
    goto LABEL_42;
  }
  a3 = v20;
  if ((_DWORD)v52 != -1)
    goto LABEL_41;
  ((void (*)(uint64_t **, uint64_t *))off_1E33A4630[v66])(&v63, &v65);
  v66 = -1;
LABEL_42:
  v67 = v53;
  v68 = v54;
  v24 = v55;
  v55 = 0;
  v25 = v69;
  v69 = v24;
  a2 = v18;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v11);
    else
      *(_DWORD *)v25 -= 2;
  }
  v70 = v56;
  v26 = v57;
  v57 = 0;
  v27 = v71;
  v71 = v26;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v11);
    else
      *(_DWORD *)v27 -= 2;
  }
LABEL_48:
  WebCore::KeyframeAnimationOptions::~KeyframeAnimationOptions((WebCore::KeyframeAnimationOptions *)&v51, v11);
LABEL_49:
  if (!v89)
  {
    v28 = a2;
    v29 = a3;
    v87[0] = 0;
    v88 = -1;
    v30 = v72;
    if (v72 != -1)
    {
      ((void (*)(_BYTE **, _BYTE *, uint64_t *))off_1E33A4680[v72])(&v51, v87, &v65);
      v88 = v30;
    }
    v89 = 1;
    a3 = v29;
    a2 = v28;
    goto LABEL_58;
  }
  if (v88 != -1)
  {
    if (v72 == -1)
    {
      ((void (*)(_BYTE **, _BYTE *))off_1E33A4650[v88])(&v51, v87);
      v88 = -1;
      goto LABEL_58;
    }
LABEL_57:
    v51 = v87;
    ((void (*)(_BYTE **))off_1E33A4660[v72])(&v51);
LABEL_58:
    if (v72 != -1)
      ((void (*)(_BYTE **, uint64_t *))off_1E33A4650[v72])(&v51, &v65);
    goto LABEL_60;
  }
  if (v72 != -1)
    goto LABEL_57;
LABEL_60:
  if (v85 != -1)
    ((void (*)(_BYTE **, uint64_t *))*(&off_1E33A4610 + v85))(&v51, &v74);
LABEL_62:
  v31 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  *(_DWORD *)(v31 + 24) += 2;
  WebCore::KeyframeEffect::create(a2, (WebCore::Node *)v31, a1, a3, (uint64_t)v86, (uint64_t)&v73);
  if (v75)
  {
    if (v75 == 1)
    {
      v32 = v74;
      v74 = 0;
      *(_BYTE *)a5 = (_BYTE)v73;
      *(_QWORD *)(a5 + 8) = v32;
      v33 = 1;
      *(_DWORD *)(a5 + 16) = 1;
LABEL_80:
      result = ((uint64_t (*)(_BYTE **, WebCore::Document **))off_1E33A4690[v33])(&v51, &v73);
      v45 = v15;
      goto LABEL_81;
    }
LABEL_112:
    v50 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::Element::getAnimations(v50);
  }
  v35.n128_f64[0] = WebCore::WebAnimation::create((WebCore::WebAnimation *)v31, v73, (WebCore::WebAnimation **)&v64);
  v36 = (WebCore::WebAnimation *)v64;
  v37 = v64[18];
  v64[18] = v15;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v34);
    else
      *(_DWORD *)v37 -= 2;
  }
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v46 = *((_QWORD *)v36 + 5);
    if (v46)
    {
      v47 = *(_QWORD *)(v46 + 8);
      if (v47)
      {
        v48 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v47 - 96), v34);
        if (v48)
        {
          v49 = *(_QWORD *)(v48 + 80);
          if (v49)
            WebCore::InspectorAnimationAgent::didChangeWebAnimationName(v49, v36);
        }
      }
    }
  }
  v39 = (WebCore::WebAnimation *)v64;
  if (v21)
  {
    if (v19)
      ++v19[2];
    v51 = v19;
    (*(void (**)(WebCore::WebAnimation *, _BYTE **, __n128))(*(_QWORD *)v39 + 136))(v39, &v51, v35);
    v40 = v51;
    v51 = 0;
    if (v40)
    {
      if (v40[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
      else
        --v40[2];
    }
  }
  v41.n128_f64[0] = (*(double (**)(WebCore::WebAnimation *, uint64_t *, __n128))(*(_QWORD *)v39 + 256))(v39, &v62, v35);
  result = WebCore::WebAnimation::play((uint64_t)v39, 1, (uint64_t)&v51, v41);
  if ((_BYTE)v53)
  {
    v44 = v52;
    *(_BYTE *)a5 = (_BYTE)v51;
    *(_QWORD *)(a5 + 8) = v44;
    *(_DWORD *)(a5 + 16) = 1;
    if (*((_DWORD *)v39 + 6) == 1)
      result = (*(uint64_t (**)(WebCore::WebAnimation *))(*(_QWORD *)v39 + 72))(v39);
    else
      --*((_DWORD *)v39 + 6);
  }
  else
  {
    *(_QWORD *)a5 = v39;
    *(_DWORD *)(a5 + 16) = 0;
  }
  v15 = 0;
  v45 = 0;
  v33 = v75;
  if (v75 != -1)
    goto LABEL_80;
LABEL_81:
  if (*(_DWORD *)(v31 + 24) == 2)
  {
    if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
      result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v31, v43);
  }
  else
  {
    *(_DWORD *)(v31 + 24) -= 2;
  }
  if (v89 && v88 != -1)
    result = ((uint64_t (*)(WebCore::Document **, _BYTE *))off_1E33A4650[v88])(&v73, v87);
  if (v19 && v21)
  {
    if (v19[2] == 1)
    {
      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
      if (!v45)
        return result;
      goto LABEL_91;
    }
    --v19[2];
  }
  if (!v45)
    return result;
LABEL_91:
  if (*(_DWORD *)v45 == 2)
    return WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v43);
  *(_DWORD *)v45 -= 2;
  return result;
}

unsigned int *WebCore::Element::getAnimations@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  WTF *v6;
  void *v7;
  unsigned int *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unsigned int ***v16;
  uint64_t v17;
  unsigned int **v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  unsigned int **v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int **v34;
  WTF *v35;
  WTF *v36;
  unsigned int v37;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  *(_DWORD *)(v5 + 24) += 2;
  if ((a2 & 0xFF00) != 0 && (_BYTE)a2)
  {
    v6 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v6 = off_1E33A49B8;
    *((_QWORD *)v6 + 1) = a1;
    v36 = v6;
    WebCore::Document::matchingAnimations((WebCore::Document *)v5, &v36, a3);
    result = (unsigned int *)v36;
    v36 = 0;
    if (result)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
LABEL_15:
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v5, v7);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
    return result;
  }
  v9 = *(_QWORD *)(v5 + 528);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 120);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
        {
          *(_DWORD *)(v12 + 24) += 2;
          v13 = *(_QWORD *)(*(_QWORD *)(v12 + 40) + 8);
          *(_DWORD *)(v13 + 24) += 2;
          WebCore::Document::updateLayout(v13, 0, 0);
          if (*(_DWORD *)(v13 + 24) == 2)
          {
            if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v13, v14);
          }
          else
          {
            *(_DWORD *)(v13 + 24) -= 2;
          }
          if (*(_DWORD *)(v12 + 24) == 2)
          {
            if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v12, v14);
          }
          else
          {
            *(_DWORD *)(v12 + 24) -= 2;
          }
        }
      }
    }
  }
  result = (unsigned int *)WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v5);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_15;
  v15 = *(unsigned int *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
  if (!(_DWORD)v15)
    goto LABEL_15;
  v16 = *(unsigned int ****)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
  v17 = 8 * v15;
  while (1)
  {
    v18 = *v16;
    if (!*((_BYTE *)*v16 + 96))
      break;
    ++v16;
    v17 -= 8;
    if (!v17)
      goto LABEL_58;
  }
  result = *v18;
  if (*v18)
  {
    WebCore::KeyframeEffectStack::sortedEffects((unsigned int ***)&v36, (unsigned int **)result);
    result = (unsigned int *)v36;
    if (v37)
    {
      v19 = 0;
      v20 = 0;
      v21 = 8 * v37;
      v22 = v36;
      v34 = (unsigned int **)((char *)v36 + v21);
      v35 = v36;
      do
      {
        v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v22 + 8) + 96) + 8);
        if (*(_BYTE *)(v23 + 158))
        {
          v24 = v19;
          if (v19 == *(_DWORD *)(a3 + 8))
          {
            v25 = v19 + ((unint64_t)v19 >> 2);
            if (v25 >= 0x10)
              v26 = v25 + 1;
            else
              v26 = 16;
            if (v26 <= (unint64_t)v19 + 1)
              v27 = v19 + 1;
            else
              v27 = v26;
            if (v27 >> 29)
            {
              __break(0xC471u);
              return result;
            }
            v28 = (char *)WTF::fastMalloc((WTF *)(8 * v27));
            *(_DWORD *)(a3 + 8) = v27;
            *(_QWORD *)a3 = v28;
            result = (unsigned int *)memcpy(v28, v20, 8 * v19);
            if (v20)
            {
              if (v28 == v20)
              {
                *(_QWORD *)a3 = 0;
                *(_DWORD *)(a3 + 8) = 0;
              }
              result = (unsigned int *)WTF::fastFree((WTF *)v20, v7);
              v24 = *(unsigned int *)(a3 + 12);
              v20 = *(char **)a3;
              v19 = *(_DWORD *)(a3 + 12);
            }
            else
            {
              v20 = v28;
            }
            ++*(_DWORD *)(v23 + 24);
            v29 = &v20[8 * v24];
          }
          else
          {
            v29 = &v20[8 * v19];
            ++*(_DWORD *)(v23 + 24);
          }
          ++v19;
          *(_QWORD *)v29 = v23;
          *(_DWORD *)(a3 + 12) = v19;
        }
        v22 = (WTF *)((char *)v22 + 8);
        v21 -= 8;
      }
      while (v21);
      v30 = (unsigned int **)v35;
      do
      {
        v31 = *v30;
        *v30 = 0;
        if (v31)
        {
          do
          {
            v32 = __ldaxr(v31);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, v31));
          if (!v33)
          {
            atomic_store(1u, v31);
            WTF::fastFree((WTF *)v31, v7);
          }
        }
        ++v30;
      }
      while (v30 != v34);
      result = (unsigned int *)v36;
    }
    if (result)
      result = (unsigned int *)WTF::fastFree((WTF *)result, v7);
  }
LABEL_58:
  if (v5)
    goto LABEL_15;
  return result;
}

uint64_t WebCore::Element::identifier(WebCore::Element *this)
{
  unsigned int *v2;
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int i;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  WTF *v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;

  {
    WebCore::elementIdentifiersMap(void)::map = 0;
  }
  v2 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
  v4 = v2;
  do
    v5 = __ldaxr(v2);
  while (__stlxr(v5 + 1, v2));
  v6 = WebCore::elementIdentifiersMap(void)::map;
  if (WebCore::elementIdentifiersMap(void)::map
    || (WTF::HashTable<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashMap<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>>::rehash(&WebCore::elementIdentifiersMap(void)::map, 8u, 0), (v6 = WebCore::elementIdentifiersMap(void)::map) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
  v9 = *((_QWORD *)v4 + 1);
  v10 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = (v12 >> 31) ^ v12;
  for (i = 1; ; ++i)
  {
    v15 = v13 & v7;
    v16 = (uint64_t *)(v6 + 16 * v15);
    v17 = *v16;
    if (*v16 != -1)
      break;
    v8 = (uint64_t *)(v6 + 16 * v15);
LABEL_14:
    v13 = i + v15;
  }
  if (!v17)
  {
    if (v8)
    {
      *v8 = 0;
      v8[1] = 0;
      --*(_DWORD *)(v6 - 16);
      *v8 = (uint64_t)v4;
      v16 = v8;
    }
    else
    {
      *v16 = (uint64_t)v4;
    }
    *((_QWORD *)this + 6) |= 0x1000000000000uLL;
    v16[1] = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    if (WebCore::elementIdentifiersMap(void)::map)
      v23 = *(_DWORD *)(WebCore::elementIdentifiersMap(void)::map - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(WebCore::elementIdentifiersMap(void)::map - 12) = v23;
    if (WebCore::elementIdentifiersMap(void)::map)
      v24 = *(_DWORD *)(WebCore::elementIdentifiersMap(void)::map - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(WebCore::elementIdentifiersMap(void)::map - 16) + v24);
    v26 = *(unsigned int *)(WebCore::elementIdentifiersMap(void)::map - 4);
    if (v26 > 0x400)
    {
      if (v26 > 2 * v25)
        return v16[1];
    }
    else
    {
      if (3 * v26 > 4 * v25)
        return v16[1];
      if (!(_DWORD)v26)
      {
        v27 = 8;
        goto LABEL_37;
      }
    }
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(WebCore::elementIdentifiersMap(void)::map - 12) >= (2 * v26));
LABEL_37:
    v16 = WTF::HashTable<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashMap<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>>::rehash(&WebCore::elementIdentifiersMap(void)::map, v27, v16);
    return v16[1];
  }
  if (*(_QWORD *)(v17 + 8) != v9)
    goto LABEL_14;
  v18 = *(_QWORD *)(v6 + 16 * v15 + 8);
  do
  {
    v19 = __ldaxr(v4);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, v4));
  if (!v20)
  {
    atomic_store(1u, v4);
    v21 = v4[7];
    if ((_DWORD)v21)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v4 + 2), (WTF::StringImpl *)(*((_QWORD *)v4 + 2) + 32 * v21));
    v22 = (WTF *)*((_QWORD *)v4 + 2);
    if (v22)
    {
      *((_QWORD *)v4 + 2) = 0;
      v4[6] = 0;
      WTF::fastFree(v22, v3);
    }
    WTF::fastFree((WTF *)v4, v3);
  }
  return v18;
}

uint64_t WebCore::Element::fromIdentifier(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *i;
  uint64_t v5;

  {
    v1 = 0;
    WebCore::elementIdentifiersMap(void)::map = 0;
    return v1;
  }
  v1 = WebCore::elementIdentifiersMap(void)::map;
  if (WebCore::elementIdentifiersMap(void)::map)
  {
    if (*(_DWORD *)(WebCore::elementIdentifiersMap(void)::map - 12))
    {
      v2 = *(unsigned int *)(WebCore::elementIdentifiersMap(void)::map - 4);
      if ((_DWORD)v2)
      {
        v3 = 16 * v2;
        for (i = (_QWORD *)WebCore::elementIdentifiersMap(void)::map; (unint64_t)(*i + 1) <= 1; i += 2)
        {
          v3 -= 16;
          if (!v3)
            return 0;
        }
      }
      else
      {
        i = (_QWORD *)WebCore::elementIdentifiersMap(void)::map;
      }
      v5 = WebCore::elementIdentifiersMap(void)::map + 16 * v2;
      if (i != (_QWORD *)v5)
      {
LABEL_11:
        if (i[1] == a1)
          return *(_QWORD *)(*i + 8);
        while (1)
        {
          i += 2;
          if (i == (_QWORD *)v5)
            break;
          if ((unint64_t)(*i + 1) > 1)
          {
            v1 = 0;
            if (i != (_QWORD *)v5)
              goto LABEL_11;
            return v1;
          }
        }
      }
    }
    return 0;
  }
  return v1;
}

uint64_t WebCore::Element::ensureFormAssociatedCustomElement(WebCore::Element *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  void *v6;
  unsigned int v7;
  WTF *v8;
  void *v9;

  result = (*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)this + 856))(this);
  if ((result & 1) != 0)
  {
    v3 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
    if (!v3)
    {
      result = WebCore::Node::materializeRareData(this);
      v3 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
    }
    if (!*(_QWORD *)(v3 + 112))
    {
      v4 = WTF::fastMalloc((WTF *)0x70);
      *(_OWORD *)(v4 + 8) = 0u;
      *(_OWORD *)(v4 + 24) = 0u;
      *(_QWORD *)(v4 + 40) = 0;
      *(_WORD *)(v4 + 48) = 3;
      *(_BYTE *)(v4 + 50) = *(_BYTE *)(v4 + 50) & 0xFC | 2;
      *(_DWORD *)(v4 + 52) = 0;
      *(_QWORD *)v4 = off_1E33B3048;
      v5 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>((uint64_t)this);
      if (v5)
      {
        do
          v7 = __ldaxr(v5);
        while (__stlxr(v7 + 1, v5));
      }
      *(_QWORD *)(v4 + 56) = v5;
      *(_WORD *)(v4 + 64) &= 0xFC00u;
      *(_QWORD *)(v4 + 96) = 0;
      *(_DWORD *)(v4 + 104) = 0;
      *(_QWORD *)(v4 + 72) = 0;
      *(_QWORD *)(v4 + 80) = 0;
      *(_DWORD *)(v4 + 88) = 0;
      result = *(_QWORD *)(v3 + 112);
      *(_QWORD *)(v3 + 112) = v4;
      if (result)
      {
        WebCore::FormAssociatedCustomElement::~FormAssociatedCustomElement((WebCore::FormAssociatedCustomElement *)result, v6);
        return WTF::fastFree(v8, v9);
      }
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

BOOL WebCore::Element::isPopoverShowing(WebCore::Element *this)
{
  uint64_t v2;

  return (*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0
      && (v2 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xE8)) != 0
      && *(_BYTE *)(v2 + 1) != 0;
}

BOOL WebCore::Element::isRelevantToUser(WebCore::Element *this)
{
  return (*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0
      && *(unsigned __int16 *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x20) >= 0x100u
      && *(_WORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x20) != 0;
}

uint64_t WebCore::Element::checkVisibility(WebCore::Node *a1, unsigned __int8 *a2)
{
  WebCore::Node *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WebCore::Node *v8;
  WebCore::Node *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WebCore::Node *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  char v22[8];
  WTF::StringImpl *v23;
  char v24;

  v3 = a1;
  WebCore::Document::updateStyleIfNeeded(*(WebCore::Document **)(*((_QWORD *)a1 + 5) + 8));
  v22[0] = 0;
  v24 = 0;
  v5 = (*(uint64_t (**)(WebCore::Node *, char *))(*(_QWORD *)v3 + 264))(v3, v22);
  if (v24)
  {
    v6 = v23;
    v23 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
      {
        WTF::StringImpl::destroy(v6, v4);
        if (v5)
          goto LABEL_6;
        return 0;
      }
      *(_DWORD *)v6 -= 2;
    }
  }
  if (!v5)
    return 0;
LABEL_6:
  if ((*(_QWORD *)(v5 + 16) & 0x1FLL) == 0x12 || a2[1] | a2[4] && (*(_BYTE *)(v5 + 40) & 0x30) != 0)
    return 0;
  v8 = (WebCore::Node *)WebCore::Node::parentElementInComposedTree(v3);
  v9 = v8;
  if (v8)
  {
    *((_DWORD *)v8 + 6) += 2;
    v11 = *(_QWORD *)(v5 + 24);
    v10 = v5 + 24;
    if ((*(_DWORD *)(v11 + 236) & 0x18000000) == 0x10000000)
    {
      v22[0] = 0;
      v24 = 0;
      v13 = (*(uint64_t (**)(WebCore::Node *, char *))(*(_QWORD *)v8 + 264))(v8, v22);
      if (v24)
      {
        v14 = v23;
        v23 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v12);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
      if ((*(_DWORD *)(*(_QWORD *)(v13 + 24) + 236) & 0x18000000) == 0x10000000)
      {
LABEL_25:
        v7 = 0;
LABEL_47:
        if (*((_DWORD *)v9 + 6) == 2)
        {
          if ((*((_WORD *)v9 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v9, v12);
        }
        else
        {
          *((_DWORD *)v9 + 6) -= 2;
        }
        return v7;
      }
    }
  }
  else
  {
    v10 = v5 + 24;
  }
  if (a2[2] && v9 && (*(_DWORD *)(*(_QWORD *)v10 + 236) & 0x18000000) == 0x8000000)
  {
    v22[0] = 0;
    v24 = 0;
    v15 = (*(uint64_t (**)(WebCore::Node *, char *))(*(_QWORD *)v9 + 264))(v9, v22);
    if (v24)
    {
      v16 = v23;
      v23 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v12);
        else
          *(_DWORD *)v16 -= 2;
      }
    }
    if ((*(_DWORD *)(*(_QWORD *)(v15 + 24) + 236) & 0x18000000) == 0x8000000)
      goto LABEL_25;
  }
  *((_DWORD *)v3 + 6) += 2;
  while (1)
  {
    v17 = v3;
    v22[0] = 0;
    v24 = 0;
    v18 = (*(uint64_t (**)(WebCore::Node *, char *))(*(_QWORD *)v3 + 264))(v3, v22);
    if (v24)
    {
      v19 = v23;
      v23 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v12);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    if ((*(_QWORD *)(v18 + 16) & 0x1FLL) == 0x1A
      || *a2 | a2[3] && *(float *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) + 32) + 4) == 0.0)
    {
      break;
    }
    v20 = WebCore::Node::parentElementInComposedTree(v17);
    v3 = (WebCore::Node *)v20;
    if (v20)
      *(_DWORD *)(v20 + 24) += 2;
    if (*((_DWORD *)v17 + 6) == 2)
    {
      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v17, v12);
    }
    else
    {
      *((_DWORD *)v17 + 6) -= 2;
    }
    if (!v3)
    {
      v7 = 1;
      if (!v9)
        return v7;
      goto LABEL_47;
    }
  }
  if (*((_DWORD *)v17 + 6) == 2)
  {
    if ((*((_WORD *)v17 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v17, v12);
    v7 = 0;
    if (v9)
      goto LABEL_47;
  }
  else
  {
    v7 = 0;
    *((_DWORD *)v17 + 6) -= 2;
    if (v9)
      goto LABEL_47;
  }
  return v7;
}

_DWORD *WebCore::Element::makeTargetBlankIfHasDanglingMarkup@<X0>(WebCore::Element *this@<X0>, _QWORD *a2@<X8>, double a3@<D0>, double a4@<D1>, float a5@<S2>)
{
  _DWORD *result;
  double v9;
  double v10;
  float v11;
  _DWORD *v12;

  result = *(_DWORD **)this;
  if (!result)
    goto LABEL_12;
  if (WTF::StringImpl::find((uint64_t)result, 0xAu, 0, a3, a4, a5) == -1)
  {
    result = *(_DWORD **)this;
    if (!*(_QWORD *)this)
      goto LABEL_12;
    if (WTF::StringImpl::find((uint64_t)result, 0xDu, 0, v9, v10, v11) == -1)
    {
      result = *(_DWORD **)this;
      if (!*(_QWORD *)this)
        goto LABEL_12;
      result = (_DWORD *)WTF::StringImpl::find((uint64_t)result, 9u, 0, v9, v10, v11);
      if (result == (_DWORD *)-1)
      {
LABEL_10:
        v12 = *(_DWORD **)this;
        if (*(_QWORD *)this)
          *v12 += 2;
        goto LABEL_13;
      }
    }
  }
  result = *(_DWORD **)this;
  if (*(_QWORD *)this)
  {
    result = (_DWORD *)WTF::StringImpl::find((uint64_t)result, 0x3Cu, 0, v9, v10, v11);
    if (result != (_DWORD *)-1)
      return (_DWORD *)WTF::AtomStringImpl::add();
    goto LABEL_10;
  }
LABEL_12:
  v12 = 0;
LABEL_13:
  *a2 = v12;
  return result;
}

uint64_t WebCore::Element::hasCustomState(WebCore::Element *this, const WTF::AtomString *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int i;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  bmalloc::api *v11;
  void *v12;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 672) & 0x4000000000) == 0)
    return 0;
  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  v2 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xF0);
  if (!v2)
    return 0;
  v3 = *(_DWORD *)(v2 + 8);
  *(_DWORD *)(v2 + 8) = v3 + 1;
  v4 = *(_QWORD *)(v2 + 16);
  if (v4)
  {
    v5 = 0;
    for (i = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; i = v5 + v7)
    {
      v7 = i & *(_DWORD *)(v4 - 8);
      v8 = *(_QWORD **)(v4 + 8 * v7);
      if (v8 != (_QWORD *)-1)
      {
        if (!v8)
          goto LABEL_11;
        if (*v8 == *(_QWORD *)a2)
          break;
      }
      ++v5;
    }
    v9 = 1;
    if (!v3)
      goto LABEL_15;
  }
  else
  {
LABEL_11:
    v9 = 0;
    if (!v3)
    {
LABEL_15:
      WebCore::CustomStateSet::~CustomStateSet((WebCore::CustomStateSet *)v2, a2);
      bmalloc::api::isoDeallocate(v11, v12);
      return v9;
    }
  }
  *(_DWORD *)(v2 + 8) = v3;
  return v9;
}

uint64_t WebCore::Element::ensureCustomStateSet(WebCore::Element *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  void *v5;
  unsigned int v6;
  WebCore::CustomStateSet *v7;
  bmalloc::api *v9;
  void *v10;

  v2 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  if (!v2)
  {
    WebCore::Node::materializeRareData(this);
    v2 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  }
  v3 = *(_QWORD *)(v2 + 240);
  if (!v3)
  {
    v3 = bmalloc::api::isoAllocate();
    *(_QWORD *)v3 = 0;
    *(_DWORD *)(v3 + 8) = 1;
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    v4 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    if (v4)
    {
      do
        v6 = __ldaxr(v4);
      while (__stlxr(v6 + 1, v4));
    }
    *(_QWORD *)(v3 + 40) = v4;
    v7 = *(WebCore::CustomStateSet **)(v2 + 240);
    *(_QWORD *)(v2 + 240) = v3;
    if (v7)
    {
      if (*((_DWORD *)v7 + 2) == 1)
      {
        WebCore::CustomStateSet::~CustomStateSet(v7, v5);
        bmalloc::api::isoDeallocate(v9, v10);
        return *(_QWORD *)(v2 + 240);
      }
      else
      {
        --*((_DWORD *)v7 + 2);
      }
    }
  }
  return v3;
}

uint64_t WebCore::Element::isInVisibilityAdjustmentSubtree(WebCore::Element *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  WTF *v10;
  void *v11;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  ++*(_DWORD *)v4;
  if (*(_BYTE *)(v4 + 1099))
  {
    v5 = *(_QWORD *)(v2 + 120);
    if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
    {
      *(_DWORD *)(v6 + 24) += 2;
      v8 = WebCore::Element::isInVisibilityAdjustmentSubtree((WebCore::Element *)v6);
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
    }
    else
    {
      while ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) == 0
           || (*(_BYTE *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xF8) & 1) == 0)
      {
        this = (WebCore::Element *)*((_QWORD *)this + 4);
        if (!this || (*((_WORD *)this + 14) & 8) == 0)
          goto LABEL_14;
      }
      v8 = 1;
    }
  }
  else
  {
LABEL_14:
    v8 = 0;
  }
  if (*(_DWORD *)v4 == 1)
  {
    WebCore::Page::~Page(v4);
    WTF::fastFree(v10, v11);
  }
  else
  {
    --*(_DWORD *)v4;
  }
  return v8;
}

uint64_t WebCore::operator<<(uint64_t a1, char a2)
{
  if ((a2 - 1) <= 7u && ((0x8Bu >> (a2 - 1)) & 1) != 0)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if ((a2 - 1) <= 7u && ((0x8Bu >> (a2 - 1)) & 1) != 0)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if ((a2 & 1) == 0)
    WTF::TextStream::operator<<();
  return a1;
}

WebCore::Node *WebCore::Element::topmostPopoverAncestor(WebCore::Node *this, void *a2)
{
  char v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  WebCore::Node **v33;
  WebCore::Node *v34;
  WebCore::Node *v35;
  int v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  WebCore::Node *v41;
  uint64_t v42;
  void *v43;
  WebCore::Node *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  WebCore::Node **v50;
  uint64_t *v51;
  WebCore::Node *v52;
  _QWORD *v53;

  v2 = (char)a2;
  v53 = 0;
  v4 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3120);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_39;
  }
  v5 = 0;
  do
  {
    v6 = v5;
    v7 = *v4;
    *(_DWORD *)(*v4 + 24) += 2;
    v8 = (uint64_t)v53;
    if (v53
      || (WTF::HashTable<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,WTF::KeyValuePair<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,unsigned long>>,WTF::DefaultHash<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>,WTF::HashMap<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,unsigned long,WTF::DefaultHash<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>,WTF::HashTraits<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>>::rehash((uint64_t *)&v53, 8u), (v8 = (uint64_t)v53) != 0))
    {
      v9 = *(_DWORD *)(v8 - 8);
    }
    else
    {
      v9 = 0;
    }
    v10 = 0;
    ++v5;
    v11 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = (v13 >> 31) ^ v13;
    for (i = 1; ; ++i)
    {
      v16 = v14 & v9;
      v17 = (uint64_t *)(v8 + 16 * v16);
      v18 = *v17;
      if (*v17 != -1)
        break;
      v10 = (_QWORD *)(v8 + 16 * v16);
LABEL_12:
      v14 = i + v16;
    }
    if (!v18)
    {
      if (v10)
      {
        *v10 = 0;
        v10[1] = 0;
        --*(_DWORD *)(v8 - 16);
        *v10 = v7;
      }
      else
      {
        *v17 = v7;
        v10 = (_QWORD *)(v8 + 16 * v16);
      }
      v10[1] = v6;
      if (v53)
        v19 = *((_DWORD *)v53 - 3) + 1;
      else
        v19 = 1;
      *((_DWORD *)v53 - 3) = v19;
      if (v53)
        v20 = *((_DWORD *)v53 - 3);
      else
        v20 = 0;
      v21 = (*((_DWORD *)v53 - 4) + v20);
      v22 = *((unsigned int *)v53 - 1);
      if (v22 > 0x400)
      {
        if (v22 > 2 * v21)
          goto LABEL_32;
      }
      else
      {
        if (3 * v22 > 4 * v21)
          goto LABEL_32;
        if (!(_DWORD)v22)
        {
          v23 = 8;
          goto LABEL_31;
        }
      }
      v23 = (_DWORD)v22 << (6 * *((_DWORD *)v53 - 3) >= (2 * v22));
LABEL_31:
      WTF::HashTable<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,WTF::KeyValuePair<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,unsigned long>>,WTF::DefaultHash<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>,WTF::HashMap<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,unsigned long,WTF::DefaultHash<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>,WTF::HashTraits<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>>::rehash((uint64_t *)&v53, v23);
      goto LABEL_32;
    }
    if (v18 != v7)
      goto LABEL_12;
    if (v7)
    {
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
LABEL_32:
    v4 = (_QWORD *)v4[2];
  }
  while (v4);
LABEL_39:
  if ((v2 & 1) == 0)
  {
    v50 = &v52;
    v51 = (uint64_t *)&v53;
    v52 = 0;
    v35 = (WebCore::Node *)WebCore::Node::parentElementInComposedTree(this);
    goto LABEL_73;
  }
  *((_DWORD *)this + 6) += 2;
  v24 = (uint64_t)v53;
  if (v53
    || (WTF::HashTable<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,WTF::KeyValuePair<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,unsigned long>>,WTF::DefaultHash<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>,WTF::HashMap<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,unsigned long,WTF::DefaultHash<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>,WTF::HashTraits<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>>::rehash((uint64_t *)&v53, 8u), (v24 = (uint64_t)v53) != 0))
  {
    v25 = *(_DWORD *)(v24 - 8);
  }
  else
  {
    v25 = 0;
  }
  v26 = 0;
  v27 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
  v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
  v30 = (v29 >> 31) ^ v29;
  v31 = 1;
  while (2)
  {
    v32 = v30 & v25;
    v33 = (WebCore::Node **)(v24 + 16 * v32);
    v34 = *v33;
    if (*v33 == (WebCore::Node *)-1)
    {
      v26 = (_QWORD *)(v24 + 16 * v32);
      goto LABEL_49;
    }
    if (!v34)
    {
      if (v26)
      {
        *v26 = 0;
        v26[1] = 0;
        --*(_DWORD *)(v24 - 16);
        *v26 = this;
      }
      else
      {
        *v33 = this;
        v26 = (_QWORD *)(v24 + 16 * v32);
      }
      v26[1] = v5;
      if (v53)
        v36 = *((_DWORD *)v53 - 3) + 1;
      else
        v36 = 1;
      *((_DWORD *)v53 - 3) = v36;
      if (v53)
        v37 = *((_DWORD *)v53 - 3);
      else
        v37 = 0;
      v38 = (*((_DWORD *)v53 - 4) + v37);
      v39 = *((unsigned int *)v53 - 1);
      if (v39 > 0x400)
      {
        if (v39 > 2 * v38)
          goto LABEL_70;
      }
      else
      {
        if (3 * v39 > 4 * v38)
          goto LABEL_70;
        if (!(_DWORD)v39)
        {
          v40 = 8;
          goto LABEL_69;
        }
      }
      v40 = (_DWORD)v39 << (6 * *((_DWORD *)v53 - 3) >= (2 * v39));
LABEL_69:
      WTF::HashTable<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,WTF::KeyValuePair<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,unsigned long>>,WTF::DefaultHash<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>,WTF::HashMap<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,unsigned long,WTF::DefaultHash<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>,WTF::HashTraits<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>>::rehash((uint64_t *)&v53, v40);
      goto LABEL_70;
    }
    if (v34 != this)
    {
LABEL_49:
      v30 = v31 + v32;
      ++v31;
      continue;
    }
    break;
  }
  if (this)
  {
    if (*((_DWORD *)this + 6) == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(this, a2);
    }
    else
    {
      *((_DWORD *)this + 6) -= 2;
    }
  }
LABEL_70:
  v50 = &v52;
  v51 = (uint64_t *)&v53;
  v52 = 0;
  v41 = (WebCore::Node *)WebCore::Node::parentElementInComposedTree(this);
  WebCore::Element::topmostPopoverAncestor(WebCore::Element::TopLayerElementType)::$_0::operator()((uint64_t)&v50, v41);
  v42 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xE8) + 16);
  if (v42)
    v35 = *(WebCore::Node **)(v42 + 8);
  else
    v35 = 0;
LABEL_73:
  WebCore::Element::topmostPopoverAncestor(WebCore::Element::TopLayerElementType)::$_0::operator()((uint64_t)&v50, v35);
  v44 = v52;
  v52 = 0;
  if (v44)
  {
    if (*((_DWORD *)v44 + 6) == 2)
    {
      if ((*((_WORD *)v44 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v44, v43);
    }
    else
    {
      *((_DWORD *)v44 + 6) -= 2;
    }
  }
  v45 = (uint64_t)v53;
  if (v53)
  {
    v46 = *((unsigned int *)v53 - 1);
    if ((_DWORD)v46)
    {
      v47 = v53;
      do
      {
        v48 = *v47;
        if (*v47 != -1)
        {
          *v47 = 0;
          if (v48)
          {
            if (*(_DWORD *)(v48 + 24) == 2)
            {
              if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v48, v43);
            }
            else
            {
              *(_DWORD *)(v48 + 24) -= 2;
            }
          }
        }
        v47 += 2;
        --v46;
      }
      while (v46);
    }
    WTF::fastFree((WTF *)(v45 - 16), v43);
  }
  return v44;
}

uint64_t WebCore::Element::topmostPopoverAncestor(WebCore::Element::TopLayerElementType)::$_0::operator()(uint64_t result, WebCore::Node *this)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int j;
  uint64_t v21;
  uint64_t v22;

  if (this)
  {
    v2 = (uint64_t)this;
    v3 = (uint64_t **)result;
    *((_DWORD *)this + 6) += 2;
    while (1)
    {
      v4 = v2;
      if ((*(_WORD *)(v2 + 28) & 0x10) != 0 && (*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v5 = *(_BYTE **)((*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) + 0xE8);
        if (v5)
        {
          if (*v5 == 1 && v5[1])
            break;
        }
      }
      result = WebCore::Node::parentElementInComposedTree((WebCore::Node *)v2);
      v2 = result;
      if (result)
        *(_DWORD *)(result + 24) += 2;
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, this);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
      if (!v2)
        return result;
    }
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2, this);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
    v6 = *v3;
    result = **v3;
    if (result)
    {
      v7 = *v3[1];
      if (v7)
      {
        v8 = *(_DWORD *)(v7 - 8);
        v9 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
        v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
        v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
        v12 = v8 & ((v11 >> 31) ^ v11);
        for (i = 1; ; ++i)
        {
          v14 = v12;
          v15 = *(_QWORD *)(v7 + 16 * v12);
          if (v15 != -1)
          {
            if (!v15)
              goto LABEL_27;
            if (v15 == result)
              break;
          }
          v12 = (v14 + i) & v8;
        }
        v15 = *(_QWORD *)(v7 + 16 * v14 + 8);
LABEL_27:
        v16 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
        v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
        v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
        v19 = v8 & ((v18 >> 31) ^ v18);
        for (j = 1; ; ++j)
        {
          v21 = v19;
          v22 = *(_QWORD *)(v7 + 16 * v19);
          if (v22 != -1)
          {
            if (!v22)
              return result;
            if (v22 == v2)
              break;
          }
          v19 = (v21 + j) & v8;
        }
        if (v15 < *(_QWORD *)(v7 + 16 * v21 + 8))
        {
          *(_DWORD *)(v2 + 24) += 2;
          *v6 = v2;
          if (*(_DWORD *)(result + 24) == 2)
          {
            if ((*(_WORD *)(result + 30) & 0x400) == 0)
              return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, this);
          }
          else
          {
            *(_DWORD *)(result + 24) -= 2;
          }
        }
      }
    }
    else
    {
      *(_DWORD *)(v2 + 24) += 2;
      *v6 = v2;
    }
  }
  return result;
}

uint64_t *WTF::RefPtr<WebCore::StyleProperties,WTF::RawPtrTraits<WebCore::StyleProperties>,WTF::DefaultRefDerefTraits<WebCore::StyleProperties>>::operator=<WebCore::ImmutableStyleProperties>(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _DWORD **v8;
  _DWORD *v9;
  WTF *v10;
  uint64_t v12;
  WTF *v13;

  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      if ((*(_BYTE *)(v4 + 4) & 8) != 0)
      {
        v6 = *(unsigned int *)(v4 + 28);
        if ((_DWORD)v6)
        {
          v7 = 16 * v6;
          v8 = (_DWORD **)(*(_QWORD *)(v4 + 16) + 8);
          do
          {
            v9 = *v8;
            *v8 = 0;
            if (v9)
            {
              if (*v9 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, a2);
              else
                *v9 -= 2;
            }
            v8 += 2;
            v7 -= 16;
          }
          while (v7);
        }
        v10 = *(WTF **)(v4 + 16);
        if ((WTF *)(v4 + 32) != v10 && v10 != 0)
        {
          *(_QWORD *)(v4 + 16) = 0;
          *(_DWORD *)(v4 + 24) = 0;
          WTF::fastFree(v10, a2);
        }
        v12 = *(_QWORD *)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        v13 = (WTF *)v4;
      }
      else
      {
        WebCore::ImmutableStyleProperties::~ImmutableStyleProperties((WebCore::ImmutableStyleProperties *)v4, a2);
      }
      WTF::fastFree(v13, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return a1;
}

WebCore::UniqueElementData *WebCore::UniqueElementData::UniqueElementData(WebCore::UniqueElementData *this, const WebCore::UniqueElementData *a2)
{
  int v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  WebCore::UniqueElementData *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  const WebCore::StyleProperties *v15;
  WebCore::MutableStyleProperties *v16;
  WTF::StringImpl *v17;
  WebCore::MutableStyleProperties *v18;
  WTF *v19;
  void *v20;

  v4 = *((_DWORD *)a2 + 1) & 0x1E | 1;
  *(_DWORD *)this = 1;
  *((_DWORD *)this + 1) = v4;
  *((_QWORD *)this + 1) = 0;
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    ++*(_DWORD *)(v5 + 8);
  *((_QWORD *)this + 2) = v5;
  v6 = (_DWORD *)*((_QWORD *)a2 + 3);
  if (v6)
    *v6 += 2;
  *((_QWORD *)this + 3) = v6;
  v7 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (v7)
    ++*v7;
  v8 = *((unsigned int *)a2 + 13);
  result = (WebCore::UniqueElementData *)((char *)this + 56);
  *((_QWORD *)this + 4) = v7;
  *((_QWORD *)this + 5) = (char *)this + 56;
  *((_DWORD *)this + 12) = 4;
  *((_DWORD *)this + 13) = v8;
  if (v8 >= 5)
  {
    if (v8 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    result = (WebCore::UniqueElementData *)WTF::fastMalloc((WTF *)(16 * v8));
    *((_DWORD *)this + 12) = v8;
    *((_QWORD *)this + 5) = result;
  }
  v10 = *((unsigned int *)a2 + 13);
  if ((_DWORD)v10)
  {
    v11 = *((_QWORD *)a2 + 5);
    v12 = v11 + 16 * v10;
    do
    {
      v13 = *(_DWORD **)v11;
      if (*(_QWORD *)v11)
        ++*v13;
      *(_QWORD *)result = v13;
      v14 = *(_DWORD **)(v11 + 8);
      if (v14)
        *v14 += 2;
      *((_QWORD *)result + 1) = v14;
      v11 += 16;
      result = (WebCore::UniqueElementData *)((char *)result + 16);
    }
    while (v11 != v12);
  }
  v15 = (const WebCore::StyleProperties *)*((_QWORD *)a2 + 1);
  if (v15)
  {
    v16 = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
    WebCore::MutableStyleProperties::MutableStyleProperties(v16, v15);
    v18 = (WebCore::MutableStyleProperties *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v16;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
      {
        if ((*((_BYTE *)v18 + 4) & 8) != 0)
          WebCore::MutableStyleProperties::~MutableStyleProperties(v18, v17);
        else
          WebCore::ImmutableStyleProperties::~ImmutableStyleProperties(v18, v17);
        WTF::fastFree(v19, v20);
      }
      else
      {
        --*(_DWORD *)v18;
      }
    }
  }
  return this;
}

void WebCore::DocumentType::~DocumentType(WebCore::DocumentType *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::Node::~Node(this, a2);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::Node::~Node(this, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

void WebCore::DragEvent::~DragEvent(WebCore::DragEvent *this, void *a2)
{
  WebCore::DataTransfer *v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = off_1E33A3FA0;
  v3 = (WebCore::DataTransfer *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::DataTransfer::~DataTransfer(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  *(_QWORD *)this = off_1E33A5C38;
  v4 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v4)
  {
    if ((*(_BYTE *)(v4 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
    }
  }
  WebCore::UIEvent::~UIEvent(this, (WTF::StringImpl *)a2);
}

{
  WebCore::DataTransfer *v3;
  uint64_t v4;
  bmalloc::api *v5;
  void *v6;
  WTF *v7;
  void *v8;

  *(_QWORD *)this = off_1E33A3FA0;
  v3 = (WebCore::DataTransfer *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::DataTransfer::~DataTransfer(v3, a2);
      WTF::fastFree(v7, v8);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  *(_QWORD *)this = off_1E33A5C38;
  v4 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v4)
  {
    if ((*(_BYTE *)(v4 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
    }
  }
  WebCore::UIEvent::~UIEvent(this, (WTF::StringImpl *)a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

uint64_t WebCore::MouseEvent::relatedTarget(WebCore::MouseEvent *this)
{
  return *((_QWORD *)this + 20);
}

unsigned int *WebCore::MouseEvent::setRelatedTarget(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *result;

  v3 = *a2;
  *a2 = 0;
  result = *(unsigned int **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v3;
  if (result)
  {
    if ((*((_BYTE *)result + 22) & 2) != 0)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      }
      else
      {
        result[6] -= 2;
      }
    }
    else
    {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 96))(result);
    }
  }
  return result;
}

uint64_t *WebCore::UserActionElementSet::setFlags(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  if (a3)
    return WebCore::UserActionElementSet::setFlags(a1, a2, a4);
  else
    return WebCore::UserActionElementSet::clearFlags(a1, a2, a4);
}

uint64_t WebCore::RenderObject::isAtomicInlineLevelBox(WebCore::RenderObject *this)
{
  WebCore::RenderObject *v1;
  unsigned int v2;
  BOOL v3;
  int v4;
  WebCore::RenderObject *v6;

  v1 = this;
  if ((*((_BYTE *)this + 45) & 2) != 0)
    v1 = *(WebCore::RenderObject **)(*((_QWORD *)this + 4) + 8);
  v2 = *((_DWORD *)v1 + 24) & 0x1F;
  v3 = v2 > 0x19;
  v4 = (1 << v2) & 0x3528029;
  if (v3 || v4 == 0)
    return 0;
  v6 = this;
  if ((*((_BYTE *)this + 45) & 2) != 0)
    v6 = *(WebCore::RenderObject **)(*((_QWORD *)this + 4) + 8);
  if ((*((_BYTE *)v6 + 96) & 0x1F) != 0)
    return 1;
  else
    return (*((unsigned __int8 *)this + 20) >> 1) & 1;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::trustedTypesCompliantAttributeValue(WTF::String,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&,WebCore::Element *,WTF::String)::$_0,WebCore::trustedTypesCompliantAttributeValue(WTF::String,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&,WebCore::Element *,WTF::String)::$_1,WebCore::trustedTypesCompliantAttributeValue(WTF::String,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&,WebCore::Element *,WTF::String)::$_2,WebCore::trustedTypesCompliantAttributeValue(WTF::String,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&,WebCore::Element *,WTF::String)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD **v5;
  WTF::StringImpl *result;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::SecurityContext *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v5 = *(_QWORD ***)a1;
  result = **(WTF::StringImpl ***)(*(_QWORD *)a1 + 24);
  if (result)
  {
    result = (WTF::StringImpl *)MEMORY[0x19AEA53F4](result, "TrustedHTML", 11);
    if (!(_DWORD)result)
    {
      v8 = (WTF::StringImpl *)*v5[3];
      if (v8)
        *(_DWORD *)v8 += 2;
      if ((MEMORY[0x19AEA53F4](v8, "TrustedHTML", 11) & 1) != 0)
      {
        v9 = 0;
      }
      else if ((MEMORY[0x19AEA53F4](v8, "TrustedScript", 13) & 1) != 0)
      {
        v9 = 1;
      }
      else if (MEMORY[0x19AEA53F4](v8, "TrustedScriptURL", 16))
      {
        v9 = 2;
      }
      else
      {
        v9 = 0;
      }
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v5[4] + 40) + 8) + 40) + 8);
      v11 = *(_QWORD *)(v10 + 704);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
          v10 = v12;
      }
      v13 = (WebCore::SecurityContext *)(v10 + 192);
      v14 = *(WTF::StringImpl **)(*(_QWORD *)a2 + 16);
      if (v14)
        *(_DWORD *)v14 += 2;
      v16 = v14;
      WebCore::trustedTypeCompliantString((WebCore::DOMWindow *)v9, v13, &v16, v5[5], a3);
      result = v16;
      v16 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
          if (!v8)
            return result;
          goto LABEL_24;
        }
        *(_DWORD *)result -= 2;
      }
      if (!v8)
        return result;
LABEL_24:
      if (*(_DWORD *)v8 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v8, v15);
      *(_DWORD *)v8 -= 2;
      return result;
    }
  }
  v7 = *(_DWORD **)(*(_QWORD *)a2 + 16);
  if (v7)
    *v7 += 2;
  *(_QWORD *)a3 = v7;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::trustedTypesCompliantAttributeValue(WTF::String,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&,WebCore::Element *,WTF::String)::$_0,WebCore::trustedTypesCompliantAttributeValue(WTF::String,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&,WebCore::Element *,WTF::String)::$_1,WebCore::trustedTypesCompliantAttributeValue(WTF::String,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&,WebCore::Element *,WTF::String)::$_2,WebCore::trustedTypesCompliantAttributeValue(WTF::String,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&,WebCore::Element *,WTF::String)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD **v5;
  WTF::StringImpl *result;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::SecurityContext *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v5 = *(_QWORD ***)a1;
  result = **(WTF::StringImpl ***)(*(_QWORD *)a1 + 48);
  if (result)
  {
    result = (WTF::StringImpl *)MEMORY[0x19AEA53F4](result, "TrustedScript", 13);
    if (!(_DWORD)result)
    {
      v8 = (WTF::StringImpl *)*v5[6];
      if (v8)
        *(_DWORD *)v8 += 2;
      if ((MEMORY[0x19AEA53F4](v8, "TrustedHTML", 11) & 1) != 0)
      {
        v9 = 0;
      }
      else if ((MEMORY[0x19AEA53F4](v8, "TrustedScript", 13) & 1) != 0)
      {
        v9 = 1;
      }
      else if (MEMORY[0x19AEA53F4](v8, "TrustedScriptURL", 16))
      {
        v9 = 2;
      }
      else
      {
        v9 = 0;
      }
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v5[7] + 40) + 8) + 40) + 8);
      v11 = *(_QWORD *)(v10 + 704);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
          v10 = v12;
      }
      v13 = (WebCore::SecurityContext *)(v10 + 192);
      v14 = *(WTF::StringImpl **)(*(_QWORD *)a2 + 16);
      if (v14)
        *(_DWORD *)v14 += 2;
      v16 = v14;
      WebCore::trustedTypeCompliantString((WebCore::DOMWindow *)v9, v13, &v16, v5[8], a3);
      result = v16;
      v16 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
          if (!v8)
            return result;
          goto LABEL_24;
        }
        *(_DWORD *)result -= 2;
      }
      if (!v8)
        return result;
LABEL_24:
      if (*(_DWORD *)v8 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v8, v15);
      *(_DWORD *)v8 -= 2;
      return result;
    }
  }
  v7 = *(_DWORD **)(*(_QWORD *)a2 + 16);
  if (v7)
    *v7 += 2;
  *(_QWORD *)a3 = v7;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::trustedTypesCompliantAttributeValue(WTF::String,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&,WebCore::Element *,WTF::String)::$_0,WebCore::trustedTypesCompliantAttributeValue(WTF::String,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&,WebCore::Element *,WTF::String)::$_1,WebCore::trustedTypesCompliantAttributeValue(WTF::String,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&,WebCore::Element *,WTF::String)::$_2,WebCore::trustedTypesCompliantAttributeValue(WTF::String,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&,WebCore::Element *,WTF::String)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD **v5;
  WTF::StringImpl *result;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::SecurityContext *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v5 = *(_QWORD ***)a1;
  result = **(WTF::StringImpl ***)(*(_QWORD *)a1 + 72);
  if (result)
  {
    result = (WTF::StringImpl *)MEMORY[0x19AEA53F4](result, "TrustedScriptURL", 16);
    if (!(_DWORD)result)
    {
      v8 = (WTF::StringImpl *)*v5[9];
      if (v8)
        *(_DWORD *)v8 += 2;
      if ((MEMORY[0x19AEA53F4](v8, "TrustedHTML", 11) & 1) != 0)
      {
        v9 = 0;
      }
      else if ((MEMORY[0x19AEA53F4](v8, "TrustedScript", 13) & 1) != 0)
      {
        v9 = 1;
      }
      else if (MEMORY[0x19AEA53F4](v8, "TrustedScriptURL", 16))
      {
        v9 = 2;
      }
      else
      {
        v9 = 0;
      }
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v5[10] + 40) + 8) + 40) + 8);
      v11 = *(_QWORD *)(v10 + 704);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
          v10 = v12;
      }
      v13 = (WebCore::SecurityContext *)(v10 + 192);
      v14 = *(WTF::StringImpl **)(*(_QWORD *)a2 + 16);
      if (v14)
        *(_DWORD *)v14 += 2;
      v16 = v14;
      WebCore::trustedTypeCompliantString((WebCore::DOMWindow *)v9, v13, &v16, v5[11], a3);
      result = v16;
      v16 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
          if (!v8)
            return result;
          goto LABEL_24;
        }
        *(_DWORD *)result -= 2;
      }
      if (!v8)
        return result;
LABEL_24:
      if (*(_DWORD *)v8 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v8, v15);
      *(_DWORD *)v8 -= 2;
      return result;
    }
  }
  v7 = *(_DWORD **)(*(_QWORD *)a2 + 16);
  if (v7)
    *v7 += 2;
  *(_QWORD *)a3 = v7;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

WTF::StringImpl ****std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::trustedTypesCompliantAttributeValue(WTF::String,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&,WebCore::Element *,WTF::String)::$_0,WebCore::trustedTypesCompliantAttributeValue(WTF::String,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&,WebCore::Element *,WTF::String)::$_1,WebCore::trustedTypesCompliantAttributeValue(WTF::String,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&,WebCore::Element *,WTF::String)::$_2,WebCore::trustedTypesCompliantAttributeValue(WTF::String,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&,WebCore::Element *,WTF::String)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString> const&>@<X0>(WTF::StringImpl ****result@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl ***v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;

  v5 = *result;
  v6 = ***result;
  if (v6)
  {
    *(_DWORD *)v6 += 2;
    if ((MEMORY[0x19AEA53F4](v6, "TrustedHTML", 11) & 1) != 0)
    {
      v7 = 0;
    }
    else if ((MEMORY[0x19AEA53F4](v6, "TrustedScript", 13) & 1) != 0)
    {
      v7 = 1;
    }
    else if (MEMORY[0x19AEA53F4](v6, "TrustedScriptURL", 16))
    {
      v7 = 2;
    }
    else
    {
      v7 = 0;
    }
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v5[1] + 5) + 8) + 40) + 8);
    v10 = *(_QWORD *)(v9 + 704);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
        v9 = v11;
    }
    result = (WTF::StringImpl ****)WebCore::trustedTypeCompliantString((WebCore::DOMWindow *)v7, (WebCore::SecurityContext *)(v9 + 192), a2, (uint64_t *)v5[2], a3);
    if (*(_DWORD *)v6 == 2)
      return (WTF::StringImpl ****)WTF::StringImpl::destroy(v6, v12);
    else
      *(_DWORD *)v6 -= 2;
  }
  else
  {
    v8 = *a2;
    if (*a2)
      *(_DWORD *)v8 += 2;
    *(_QWORD *)a3 = v8;
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

WTF::StringImpl *WebCore::Attribute::setValue(WebCore::Attribute *this, const WTF::AtomString *a2)
{
  _DWORD *v3;
  WTF::StringImpl *result;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::PopoverData::~PopoverData(WebCore::PopoverData *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v9 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v9)
      {
        v15 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v9));
        v3 = v15;
      }
      v10 = *(WTF **)(v3 + 16);
      if (v10)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v13 = v3;
        WTF::fastFree(v10, a2);
        v3 = v13;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v11 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v11)
      {
        v16 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v11));
        v6 = v16;
      }
      v12 = *(WTF **)(v6 + 16);
      if (v12)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        v14 = v6;
        WTF::fastFree(v12, a2);
        v6 = v14;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
}

uint64_t WTF::HashMap<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::find<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>(uint64_t a1)
{
  int v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  int i;
  uint64_t *v7;
  uint64_t v8;

  if (WebCore::attrNodeListMap(void)::map)
  {
    v1 = *(_DWORD *)(WebCore::attrNodeListMap(void)::map - 8);
    v2 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
    v3 = 9 * ((v2 + ~(v2 << 13)) ^ ((v2 + ~(v2 << 13)) >> 8));
    v4 = (v3 ^ (v3 >> 15)) + ~((v3 ^ (v3 >> 15)) << 27);
    v5 = v1 & ((v4 >> 31) ^ v4);
    for (i = 1; ; ++i)
    {
      v7 = (uint64_t *)(WebCore::attrNodeListMap(void)::map + 24 * v5);
      v8 = *v7;
      if (*v7 != -1)
      {
        if (!v8)
          return WebCore::attrNodeListMap(void)::map + 24 * *(unsigned int *)(WebCore::attrNodeListMap(void)::map - 4);
        if (*(_QWORD *)(v8 + 8) == a1)
          return (uint64_t)v7;
      }
      v5 = (v5 + i) & v1;
    }
  }
  return 0;
}

uint64_t *WTF::HashTable<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashMap<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>>::expand()
{
  int v0;
  unsigned int v1;

  if (WebCore::attrNodeListMap(void)::map && (v0 = *(_DWORD *)(WebCore::attrNodeListMap(void)::map - 4)) != 0)
    v1 = v0 << (6 * *(_DWORD *)(WebCore::attrNodeListMap(void)::map - 12) >= (2 * v0));
  else
    v1 = 8;
  return WTF::HashTable<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashMap<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>>::rehash(v1, 0);
}

uint64_t *WTF::HashTable<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashMap<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>>::rehash(unsigned int a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  _DWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t *result;

  v3 = WebCore::attrNodeListMap(void)::map;
  if (WebCore::attrNodeListMap(void)::map)
  {
    v4 = *(_DWORD *)(WebCore::attrNodeListMap(void)::map - 4);
    v5 = *(_DWORD *)(WebCore::attrNodeListMap(void)::map - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v6 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(24 * a1 + 16));
  WebCore::attrNodeListMap(void)::map = (uint64_t)(v6 + 4);
  v6[2] = a1 - 1;
  v6[3] = a1;
  *v6 = 0;
  *(_DWORD *)(WebCore::attrNodeListMap(void)::map - 12) = v5;
  if (v4)
  {
    v8 = 0;
    v9 = 0;
    v10 = v4;
    do
    {
      v11 = (uint64_t *)(v3 + 24 * v8);
      v12 = *v11;
      if (*v11)
      {
        if (v12 != -1)
        {
          v13 = WebCore::attrNodeListMap(void)::map;
          if (WebCore::attrNodeListMap(void)::map)
            v14 = *(_DWORD *)(WebCore::attrNodeListMap(void)::map - 8);
          else
            v14 = 0;
          v15 = ~(*(_QWORD *)(v12 + 8) << 32) + *(_QWORD *)(v12 + 8);
          v16 = (v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13);
          v17 = (9 * (v16 ^ (v16 >> 8))) ^ ((9 * (v16 ^ (v16 >> 8))) >> 15);
          v18 = v14 & (((v17 + ~(v17 << 27)) >> 31) ^ (v17 + ~((_DWORD)v17 << 27)));
          v19 = 1;
          do
          {
            v20 = v18;
            v21 = (uint64_t *)(WebCore::attrNodeListMap(void)::map + 24 * v18);
            v18 = (v18 + v19++) & v14;
          }
          while (*v21);
          v22 = v20;
          WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~KeyValuePair(v21, v7);
          v23 = *v11;
          *v11 = 0;
          *v21 = v23;
          v24 = v13 + 24 * v22;
          v25 = v3 + 24 * v8;
          *(_QWORD *)(v24 + 8) = 0;
          *(_QWORD *)(v24 + 16) = 0;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          *(_QWORD *)(v24 + 8) = v26;
          LODWORD(v26) = *(_DWORD *)(v25 + 16);
          *(_DWORD *)(v25 + 16) = 0;
          *(_DWORD *)(v24 + 16) = v26;
          LODWORD(v26) = *(_DWORD *)(v25 + 20);
          *(_DWORD *)(v25 + 20) = 0;
          *(_DWORD *)(v24 + 20) = v26;
          WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~KeyValuePair((uint64_t *)v25, v27);
          if (v11 == a2)
            v9 = v21;
        }
      }
      else
      {
        WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~KeyValuePair((uint64_t *)(v3 + 24 * v8), v7);
      }
      ++v8;
    }
    while (v8 != v10);
    goto LABEL_16;
  }
  v9 = 0;
  result = 0;
  if (v3)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v3 - 16), v7);
    return v9;
  }
  return result;
}

uint64_t *WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~KeyValuePair(uint64_t *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *((unsigned int *)a1 + 5);
  if ((_DWORD)v3)
  {
    v9 = (uint64_t *)a1[1];
    v10 = 8 * v3;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)(v11 + 24) == 2)
        {
          if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v11);
        }
        else
        {
          *(_DWORD *)(v11 + 24) -= 2;
        }
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v4 = (WTF *)a1[1];
  if (v4)
  {
    a1[1] = 0;
    *((_DWORD *)a1 + 4) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *a1;
  *a1 = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v12 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v12)
      {
        v15 = v5;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v12));
        v5 = v15;
      }
      v13 = *(WTF **)(v5 + 16);
      if (v13)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        v14 = v5;
        WTF::fastFree(v13, a2);
        v5 = v14;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

unsigned int *WTF::VectorTypeOperations<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>>::destruct(unsigned int *result, void *a2)
{
  unsigned int **v3;

  if (result != a2)
  {
    v3 = (unsigned int **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
        }
        else
        {
          result[6] -= 2;
        }
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::Attribute,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::Attribute,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 5)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 4;
    goto LABEL_12;
  }
  if (!(v9 >> 28))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 16 * v10);
    if ((void *)(v4 + 16) != v5 && v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void **WTF::Vector<WebCore::Attribute,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void **v6;
  void **v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v6 = result;
    v7 = (void **)*result;
    v8 = *((unsigned int *)result + 3);
    if (v5 < 5)
    {
      v9 = result + 2;
      *v6 = v6 + 2;
      *((_DWORD *)v6 + 2) = 4;
    }
    else
    {
      if (v5 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)(16 * v5));
      *((_DWORD *)v6 + 2) = v5;
      *v6 = v9;
    }
    result = (void **)memcpy(v9, v7, 16 * v8);
    if (v6 + 2 != v7 && v7)
    {
      if (*v6 == v7)
      {
        *v6 = 0;
        *((_DWORD *)v6 + 2) = 0;
      }
      return (void **)WTF::fastFree((WTF *)v7, v10);
    }
  }
  return result;
}

_QWORD *std::__function::__func<WebCore::forEachRenderLayer(WebCore::Element &,std::function<void ()(WebCore::RenderLayer &)> const&)::$_0,std::allocator<WebCore::forEachRenderLayer(WebCore::Element &,std::function<void ()(WebCore::RenderLayer &)> const&)::$_0>,void ()(WebCore::RenderBoxModelObject &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E33A45A8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<WebCore::forEachRenderLayer(WebCore::Element &,std::function<void ()(WebCore::RenderLayer &)> const&)::$_0,std::allocator<WebCore::forEachRenderLayer(WebCore::Element &,std::function<void ()(WebCore::RenderLayer &)> const&)::$_0>,void ()(WebCore::RenderBoxModelObject &)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E33A45A8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::forEachRenderLayer(WebCore::Element &,std::function<void ()(WebCore::RenderLayer &)> const&)::$_0,std::allocator<WebCore::forEachRenderLayer(WebCore::Element &,std::function<void ()(WebCore::RenderLayer &)> const&)::$_0>,void ()(WebCore::RenderBoxModelObject &)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &off_1E33A45A8;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    }
    else
    {
      v2[4] = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
    }
  }
  else
  {
    v2[4] = 0;
  }
  return v2;
}

uint64_t std::__function::__func<WebCore::forEachRenderLayer(WebCore::Element &,std::function<void ()(WebCore::RenderLayer &)> const&)::$_0,std::allocator<WebCore::forEachRenderLayer(WebCore::Element &,std::function<void ()(WebCore::RenderLayer &)> const&)::$_0>,void ()(WebCore::RenderBoxModelObject &)>::__clone(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_1E33A45A8;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

_QWORD *std::__function::__func<WebCore::forEachRenderLayer(WebCore::Element &,std::function<void ()(WebCore::RenderLayer &)> const&)::$_0,std::allocator<WebCore::forEachRenderLayer(WebCore::Element &,std::function<void ()(WebCore::RenderLayer &)> const&)::$_0>,void ()(WebCore::RenderBoxModelObject &)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<WebCore::forEachRenderLayer(WebCore::Element &,std::function<void ()(WebCore::RenderLayer &)> const&)::$_0,std::allocator<WebCore::forEachRenderLayer(WebCore::Element &,std::function<void ()(WebCore::RenderLayer &)> const&)::$_0>,void ()(WebCore::RenderBoxModelObject &)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<WebCore::forEachRenderLayer(WebCore::Element &,std::function<void ()(WebCore::RenderLayer &)> const&)::$_0,std::allocator<WebCore::forEachRenderLayer(WebCore::Element &,std::function<void ()(WebCore::RenderLayer &)> const&)::$_0>,void ()(WebCore::RenderBoxModelObject &)>::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl **v3;
  char v4;
  WTF::StringImpl **v5;
  WTF::AtomString *v6;

  if ((*(_BYTE *)(a2 + 21) & 0x80) != 0)
  {
    v2 = *(_QWORD *)(result + 32);
    if (v2)
    {
      return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 48))(v2, *(_QWORD *)(a2 + 144));
    }
    else
    {
      v3 = (WTF::StringImpl **)std::__throw_bad_function_call[abi:sn180100]();
      return WTF::makeAtomString<WTF::AtomString,char,WTF::AtomString>(v3, v4, v5, v6);
    }
  }
  return result;
}

uint64_t WTF::makeAtomString<WTF::AtomString,char,WTF::AtomString>@<X0>(WTF::StringImpl **a1@<X0>, char a2@<W1>, WTF::StringImpl **a3@<X2>, WTF::AtomString *a4@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t result;
  WTF::StringImpl *v8;

  v5 = *a1;
  if (*a1)
    *(_DWORD *)v5 += 2;
  v6 = *a3;
  if (*a3)
  {
    *(_DWORD *)v6 += 2;
    result = WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>((uint64_t)v5, a2, (uint64_t)v6, a4);
    if (*(_DWORD *)v6 == 2)
      result = WTF::StringImpl::destroy(v6, v8);
    else
      *(_DWORD *)v6 -= 2;
  }
  else
  {
    result = WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>((uint64_t)v5, a2, 0, a4);
  }
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      result = WTF::StringImpl::destroy(v5, v8);
    else
      *(_DWORD *)v5 -= 2;
  }
  if (!*(_QWORD *)a4)
    __break(0xC471u);
  return result;
}

uint64_t WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, WTF::AtomString *a4@<X8>)
{
  uint64_t v4;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  char v10;
  unsigned int v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *__dst[17];

  v4 = result;
  __dst[16] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if (result)
    v6 = *(_DWORD *)(result + 4);
  else
    v6 = 0;
  if (a3)
  {
    v7 = *(_DWORD *)(a3 + 4);
    if (v7 < 0)
    {
LABEL_27:
      *(_QWORD *)a4 = 0;
      return result;
    }
  }
  else
  {
    v7 = 0;
  }
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  v10 = v8;
  if (v6 < 0)
    goto LABEL_27;
  if ((v10 & 1) != 0)
    goto LABEL_27;
  result = (v6 + v9);
  if (__OFADD__(v6, v9))
    goto LABEL_27;
  if (v4 && (*(_BYTE *)(v4 + 16) & 4) == 0)
  {
    if (result < 0x40)
      goto LABEL_30;
    v12 = 0;
  }
  else if (a3)
  {
    v11 = *(_DWORD *)(a3 + 16);
    if (result < 0x40)
    {
      if ((v11 & 4) != 0)
      {
LABEL_16:
        WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>((char *)__dst, v4, a2, a3);
        return WTF::AtomStringImpl::add();
      }
LABEL_30:
      WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>((char *)__dst, v4, a2, a3);
      return WTF::AtomStringImpl::add();
    }
    v12 = (v11 >> 2) & 1;
  }
  else
  {
    if (result < 0x40)
      goto LABEL_16;
    v12 = 1;
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>(result, v12, v4, a2, a3, __dst);
  WTF::AtomString::AtomString(a4, __dst[0]);
  result = (uint64_t)__dst[0];
  __dst[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>(char *__dst, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v9;

  v9 = a2;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v9, __dst);
  v7 = v9;
  if (v9)
    v7 = *(unsigned int *)(v9 + 4);
  __dst[v7] = a3;
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::AtomString,void>>(&__dst[v7 + 1], a4);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>(char *__dst, uint64_t a2, char a3, uint64_t a4)
{
  int8x16_t *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  char *v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int16 v21;
  char *v22;
  char *result;
  int8x16_t *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int16 v35;
  int8x16x2_t v36;
  int8x16x2_t v37;
  int8x16x2_t v38;
  int8x16x2_t v39;
  int8x16x2_t v40;
  int8x16x2_t v41;

  if (a2)
  {
    v8 = *(int8x16_t **)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v10 = &__dst[2 * v9];
      if (v9 >= 0x40)
      {
        v11 = &__dst[2 * (v9 & 0xFFFFFFC0)];
        v13 = 0uLL;
        v14 = __dst;
        do
        {
          v36.val[0] = *v8;
          v15 = v8[1];
          v38.val[0] = v8[2];
          v16 = v8[3];
          v8 += 4;
          v17 = v16;
          v38.val[1] = 0uLL;
          v40.val[0] = v15;
          v36.val[1] = 0uLL;
          v18 = v14;
          vst2q_s8(v18, v36);
          v18 += 32;
          v40.val[1] = 0uLL;
          vst2q_s8(v18, v40);
          v19 = v14 + 64;
          vst2q_s8(v19, v38);
          v20 = v14 + 96;
          vst2q_s8(v20, *(int8x16x2_t *)(&v13 - 1));
          v14 += 128;
        }
        while (v14 != v11);
      }
      else
      {
        v11 = __dst;
      }
      while (v11 != v10)
      {
        v21 = v8->u8[0];
        v8 = (int8x16_t *)((char *)v8 + 1);
        *(_WORD *)v11 = v21;
        v11 += 2;
      }
    }
    else if ((_DWORD)v9 == 1)
    {
      *(_WORD *)__dst = v8->i16[0];
    }
    else if ((_DWORD)v9)
    {
      memcpy(__dst, v8, 2 * v9);
    }
    v12 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v12 = 0;
  }
  v22 = &__dst[2 * v12];
  *(_WORD *)v22 = a3;
  result = v22 + 2;
  if (a4)
  {
    v24 = *(int8x16_t **)(a4 + 8);
    v25 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      v26 = &result[2 * v25];
      if (v25 >= 0x40)
      {
        v27 = &result[2 * (v25 & 0xFFFFFFC0)];
        v28 = 0uLL;
        do
        {
          v37.val[0] = *v24;
          v29 = v24[1];
          v39.val[0] = v24[2];
          v30 = v24[3];
          v24 += 4;
          v31 = v30;
          v39.val[1] = 0uLL;
          v41.val[0] = v29;
          v37.val[1] = 0uLL;
          v32 = result;
          vst2q_s8(v32, v37);
          v32 += 32;
          v41.val[1] = 0uLL;
          vst2q_s8(v32, v41);
          v33 = result + 64;
          vst2q_s8(v33, v39);
          v34 = result + 96;
          vst2q_s8(v34, *(int8x16x2_t *)(&v28 - 1));
          result += 128;
        }
        while (result != v27);
        result = v27;
      }
      while (result != v26)
      {
        v35 = v24->u8[0];
        v24 = (int8x16_t *)((char *)v24 + 1);
        *(_WORD *)result = v35;
        result += 2;
      }
    }
    else if ((_DWORD)v25 == 1)
    {
      *(_WORD *)result = v24->i16[0];
    }
    else if ((_DWORD)v25)
    {
      return (char *)memcpy(result, v24, 2 * v25);
    }
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  int v9;
  uint64_t v11;
  _WORD *v12;
  int8x16_t *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  char *v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int16 v26;
  _WORD *v27;
  int8x16_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  char *v36;
  char *v37;
  char *v38;
  __int16 v39;
  uint64_t v40;
  int8x16x2_t v41;
  int8x16x2_t v42;
  int8x16x2_t v43;
  int8x16x2_t v44;
  int8x16x2_t v45;
  int8x16x2_t v46;

  v9 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v11 = v40;
        if (v40)
        {
          *(_DWORD *)v40 = 2;
          *(_DWORD *)(v40 + 4) = v9;
          *(_QWORD *)(v40 + 8) = v40 + 20;
          *(_DWORD *)(v40 + 16) = 4;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>((char *)(v40 + 20), a3, a4, a5);
        }
        goto LABEL_34;
      }
LABEL_38:
      v11 = 0;
      goto LABEL_34;
    }
LABEL_37:
    v11 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_34;
  }
  if (!(_DWORD)result)
    goto LABEL_37;
  if (result > 0x7FFFFFEF)
    goto LABEL_38;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v11 = v40;
  if (v40)
  {
    v12 = (_WORD *)(v40 + 20);
    *(_DWORD *)v40 = 2;
    *(_DWORD *)(v40 + 4) = v9;
    *(_QWORD *)(v40 + 8) = v40 + 20;
    *(_DWORD *)(v40 + 16) = 0;
    if (a3)
    {
      v13 = *(int8x16_t **)(a3 + 8);
      v14 = *(unsigned int *)(a3 + 4);
      if ((*(_BYTE *)(a3 + 16) & 4) != 0)
      {
        v15 = (char *)&v12[v14];
        if (v14 >= 0x40)
        {
          v16 = (char *)&v12[v14 & 0xFFFFFFC0];
          v18 = 0uLL;
          v19 = (char *)(v40 + 20);
          do
          {
            v41.val[0] = *v13;
            v20 = v13[1];
            v43.val[0] = v13[2];
            v21 = v13[3];
            v13 += 4;
            v22 = v21;
            v43.val[1] = 0uLL;
            v45.val[0] = v20;
            v41.val[1] = 0uLL;
            v23 = v19;
            vst2q_s8(v23, v41);
            v23 += 32;
            v45.val[1] = 0uLL;
            vst2q_s8(v23, v45);
            v24 = v19 + 64;
            vst2q_s8(v24, v43);
            v25 = v19 + 96;
            vst2q_s8(v25, *(int8x16x2_t *)(&v18 - 1));
            v19 += 128;
          }
          while (v19 != v16);
        }
        else
        {
          v16 = (char *)(v40 + 20);
        }
        while (v16 != v15)
        {
          v26 = v13->u8[0];
          v13 = (int8x16_t *)((char *)v13 + 1);
          *(_WORD *)v16 = v26;
          v16 += 2;
        }
      }
      else if ((_DWORD)v14 == 1)
      {
        *v12 = v13->i16[0];
      }
      else if ((_DWORD)v14)
      {
        memcpy((void *)(v40 + 20), v13, 2 * v14);
      }
      v17 = *(unsigned int *)(a3 + 4);
    }
    else
    {
      v17 = 0;
    }
    v27 = &v12[v17];
    *v27 = a4;
    result = (uint64_t)(v27 + 1);
    if (a5)
    {
      v28 = *(int8x16_t **)(a5 + 8);
      v29 = *(unsigned int *)(a5 + 4);
      if ((*(_BYTE *)(a5 + 16) & 4) != 0)
      {
        v30 = result + 2 * v29;
        if (v29 >= 0x40)
        {
          v31 = result + 2 * (v29 & 0xFFFFFFC0);
          v32 = 0uLL;
          do
          {
            v42.val[0] = *v28;
            v33 = v28[1];
            v44.val[0] = v28[2];
            v34 = v28[3];
            v28 += 4;
            v35 = v34;
            v44.val[1] = 0uLL;
            v46.val[0] = v33;
            v42.val[1] = 0uLL;
            v36 = (char *)result;
            vst2q_s8(v36, v42);
            v36 += 32;
            v46.val[1] = 0uLL;
            vst2q_s8(v36, v46);
            v37 = (char *)(result + 64);
            vst2q_s8(v37, v44);
            v38 = (char *)(result + 96);
            vst2q_s8(v38, *(int8x16x2_t *)(&v32 - 1));
            result += 128;
          }
          while (result != v31);
          result = v31;
        }
        while (result != v30)
        {
          v39 = v28->u8[0];
          v28 = (int8x16_t *)((char *)v28 + 1);
          *(_WORD *)result = v39;
          result += 2;
        }
      }
      else if ((_DWORD)v29 == 1)
      {
        *(_WORD *)result = v28->i16[0];
      }
      else if ((_DWORD)v29)
      {
        result = (uint64_t)memcpy((void *)result, v28, 2 * v29);
      }
    }
  }
LABEL_34:
  *a6 = v11;
  return result;
}

uint64_t WTF::HashMap<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>(uint64_t result, void *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int i;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!WebCore::attrNodeListMap(void)::map)
    return result;
  v2 = *(_DWORD *)(WebCore::attrNodeListMap(void)::map - 8);
  v3 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  for (i = 1; ; ++i)
  {
    v8 = WebCore::attrNodeListMap(void)::map + 24 * v6;
    v9 = *(_QWORD *)v8;
    if (*(_QWORD *)v8 == -1)
      goto LABEL_6;
    if (!v9)
      break;
    if (*(_QWORD *)(v9 + 8) == result)
    {
      v10 = *(_DWORD *)(WebCore::attrNodeListMap(void)::map - 4);
      goto LABEL_8;
    }
LABEL_6:
    v6 = (v6 + i) & v2;
  }
  v10 = *(_DWORD *)(WebCore::attrNodeListMap(void)::map - 4);
  v8 = WebCore::attrNodeListMap(void)::map + 24 * v10;
LABEL_8:
  if (WebCore::attrNodeListMap(void)::map + 24 * v10 != v8)
  {
    v11 = *(_QWORD *)v8;
    *(_QWORD *)v8 = 0;
    if (v11)
    {
      do
      {
        v16 = __ldaxr((unsigned int *)v11);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, (unsigned int *)v11));
      if (!v17)
      {
        atomic_store(1u, (unsigned int *)v11);
        v18 = *(unsigned int *)(v11 + 28);
        if ((_DWORD)v18)
        {
          v24 = v11;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v18));
          v11 = v24;
        }
        v19 = *(WTF **)(v11 + 16);
        if (v19)
        {
          *(_QWORD *)(v11 + 16) = 0;
          *(_DWORD *)(v11 + 24) = 0;
          v23 = v11;
          WTF::fastFree(v19, a2);
          v11 = v23;
        }
        WTF::fastFree((WTF *)v11, a2);
      }
    }
    *(_QWORD *)v8 = -1;
    v12 = *(unsigned int *)(v8 + 20);
    if ((_DWORD)v12)
    {
      v20 = *(uint64_t **)(v8 + 8);
      v21 = 8 * v12;
      do
      {
        v22 = *v20;
        *v20 = 0;
        if (v22)
        {
          if (*(_DWORD *)(v22 + 24) == 2)
          {
            if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v22);
          }
          else
          {
            *(_DWORD *)(v22 + 24) -= 2;
          }
        }
        ++v20;
        v21 -= 8;
      }
      while (v21);
    }
    result = *(_QWORD *)(v8 + 8);
    if (result)
    {
      *(_QWORD *)(v8 + 8) = 0;
      *(_DWORD *)(v8 + 16) = 0;
      result = WTF::fastFree((WTF *)result, a2);
    }
    ++*(_DWORD *)(WebCore::attrNodeListMap(void)::map - 16);
    if (WebCore::attrNodeListMap(void)::map)
      v13 = *(_DWORD *)(WebCore::attrNodeListMap(void)::map - 12) - 1;
    else
      v13 = -1;
    *(_DWORD *)(WebCore::attrNodeListMap(void)::map - 12) = v13;
    if (WebCore::attrNodeListMap(void)::map)
    {
      v14 = *(_DWORD *)(WebCore::attrNodeListMap(void)::map - 4);
      if (6 * *(_DWORD *)(WebCore::attrNodeListMap(void)::map - 12) < v14 && v14 >= 9)
        return (uint64_t)WTF::HashTable<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashMap<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>>::rehash(v14 >> 1, 0);
    }
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN7WebCore24KeyframeAnimationOptionsEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSE_1EJdS9_EEERKSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN7WebCore24KeyframeAnimationOptionsEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSE_1EJdS9_EEERKSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  char v12;

  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 8) = -1;
  v5 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E33A4640[v5])(&v12, a2, a3);
    *(_DWORD *)(a2 + 8) = v5;
  }
  v7 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v7;
  v8 = *(_DWORD **)(a3 + 48);
  if (v8)
    *v8 += 2;
  *(_QWORD *)(a2 + 48) = v8;
  *(_WORD *)(a2 + 56) = *(_WORD *)(a3 + 56);
  *(_WORD *)(a2 + 58) = *(_WORD *)(a3 + 58);
  v9 = *(_DWORD **)(a3 + 64);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(a2 + 64) = v9;
  v10 = *(_DWORD **)(a3 + 72);
  if (v10)
    *v10 += 2;
  *(_QWORD *)(a2 + 72) = v10;
  *(_BYTE *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  if (*(_BYTE *)(a3 + 88))
  {
    v11 = *(_QWORD *)(a3 + 80);
    if (v11)
      ++*(_DWORD *)(v11 + 8);
    *(_QWORD *)(a2 + 80) = v11;
    *(_BYTE *)(a2 + 88) = 1;
  }
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a3 + 96);
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN7WebCore21KeyframeEffectOptionsEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSE_1EJdS9_EEERKSQ_EEEDcSI_DpT0_(uint64_t *a1, _QWORD *a2, double *a3)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  char v7;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 72);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      *a2 = *(_QWORD *)a3;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E33A4650[v5])(&v7, v4);
  }
  result = *a3;
  *(double *)v4 = *a3;
  *(_DWORD *)(v4 + 72) = 0;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN7WebCore21KeyframeEffectOptionsEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSE_1EJdS9_EEERKSQ_EEEDcSI_DpT0_(WTF::StringImpl *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _DWORD *v11;
  _DWORD *v12;
  __int128 v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 72);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v7 = *(unsigned int *)(a2 + 8);
      v8 = *(unsigned int *)(a3 + 8);
      if ((_DWORD)v7 == -1)
      {
        if ((_DWORD)v8 == -1)
          goto LABEL_16;
      }
      else if ((_DWORD)v8 == -1)
      {
        ((void (*)(char *, uint64_t))off_1E33A4630[v7])(&v18, a2);
        *(_DWORD *)(a2 + 8) = -1;
LABEL_16:
        v13 = *(_OWORD *)(a3 + 32);
        *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
        *(_OWORD *)(a2 + 32) = v13;
        v14 = *(_DWORD **)(a3 + 48);
        if (v14)
          *v14 += 2;
        v15 = *(WTF::StringImpl **)(a2 + 48);
        *(_QWORD *)(a2 + 48) = v14;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v15 -= 2;
        }
        *(_WORD *)(a2 + 56) = *(_WORD *)(a3 + 56);
        *(_WORD *)(a2 + 58) = *(_WORD *)(a3 + 58);
        v16 = *(_DWORD **)(a3 + 64);
        if (v16)
          *v16 += 2;
        result = *(WTF::StringImpl **)(a2 + 64);
        *(_QWORD *)(a2 + 64) = v16;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)result -= 2;
        }
        return result;
      }
      v17 = a2;
      ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E33A4670[v8])(&v17, a2, a3);
      goto LABEL_16;
    }
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E33A4650[v5])(&v19, v4);
  }
  *(_DWORD *)(v4 + 72) = -1;
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 8) = -1;
  v9 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v9 != -1)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t, uint64_t))off_1E33A4640[v9])(&v20, v4, a3);
    *(_DWORD *)(v4 + 8) = v9;
  }
  v10 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v4 + 32) = v10;
  v11 = *(_DWORD **)(a3 + 48);
  if (v11)
    *v11 += 2;
  *(_QWORD *)(v4 + 48) = v11;
  *(_WORD *)(v4 + 56) = *(_WORD *)(a3 + 56);
  *(_WORD *)(v4 + 58) = *(_WORD *)(a3 + 58);
  v12 = *(_DWORD **)(a3 + 64);
  if (v12)
    *v12 += 2;
  *(_QWORD *)(v4 + 64) = v12;
  *(_DWORD *)(v4 + 72) = 1;
  return result;
}

uint64_t WebCore::ElementData::deref(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  WebCore::ImmutableStyleProperties *v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WebCore::MutableStyleProperties *v16;
  unint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  WTF::StringImpl **v20;
  WTF *v21;
  void *v22;
  WTF *v23;
  void *v24;
  WTF *v25;
  void *v26;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = *(unsigned int *)(this + 4);
    if ((v3 & 1) != 0)
    {
      v4 = *(unsigned int *)(this + 52);
      if ((_DWORD)v4)
      {
        v5 = 16 * v4;
        v6 = (WTF::StringImpl **)(*(_QWORD *)(this + 40) + 8);
        do
        {
          v7 = *v6;
          *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, a2);
            else
              *(_DWORD *)v7 -= 2;
          }
          v8 = (WTF::StringImpl **)*(v6 - 1);
          *(v6 - 1) = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v8);
              WTF::fastFree(v9, v10);
            }
            else
            {
              --*(_DWORD *)v8;
            }
          }
          v6 += 2;
          v5 -= 16;
        }
        while (v5);
      }
      v11 = *(WTF **)(v2 + 40);
      if ((WTF *)(v2 + 56) != v11 && v11 != 0)
      {
        *(_QWORD *)(v2 + 40) = 0;
        *(_DWORD *)(v2 + 48) = 0;
        WTF::fastFree(v11, a2);
      }
      v13 = *(WebCore::ImmutableStyleProperties **)(v2 + 32);
      *(_QWORD *)(v2 + 32) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
        {
          WebCore::ImmutableStyleProperties::~ImmutableStyleProperties(v13, a2);
          WTF::fastFree(v25, v26);
        }
        else
        {
          --*(_DWORD *)v13;
        }
      }
    }
    else if (v3 >= 0x20)
    {
      v17 = v3 >> 5;
      v18 = (WTF::StringImpl **)(this + 40);
      do
      {
        v19 = *v18;
        *v18 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, a2);
          else
            *(_DWORD *)v19 -= 2;
        }
        v20 = (WTF::StringImpl **)*(v18 - 1);
        *(v18 - 1) = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
            WTF::fastFree(v21, v22);
          }
          else
          {
            --*(_DWORD *)v20;
          }
        }
        v18 += 2;
        --v17;
      }
      while (v17);
    }
    v14 = *(WTF::StringImpl **)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, a2);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = *(WTF **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v15)
    {
      if (*((_DWORD *)v15 + 2) == 1)
        WebCore::SpaceSplitStringData::destroy(v15, a2);
      else
        --*((_DWORD *)v15 + 2);
    }
    v16 = *(WebCore::MutableStyleProperties **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
      {
        if ((*((_BYTE *)v16 + 4) & 8) != 0)
          WebCore::MutableStyleProperties::~MutableStyleProperties(v16, a2);
        else
          WebCore::ImmutableStyleProperties::~ImmutableStyleProperties(v16, a2);
        WTF::fastFree(v23, v24);
      }
      else
      {
        --*(_DWORD *)v16;
      }
    }
    return WTF::fastFree((WTF *)v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::ShareableElementData,WTF::RawPtrTraits<WebCore::ShareableElementData>,WTF::DefaultRefDerefTraits<WebCore::ShareableElementData>>,WTF::Ref<WebCore::ShareableElementData,WTF::RawPtrTraits<WebCore::ShareableElementData>,WTF::DefaultRefDerefTraits<WebCore::ShareableElementData>>,WTF::IdentityExtractor,WebCore::DocumentSharedObjectPool::ShareableElementDataHash,WTF::HashTraits<WTF::Ref<WebCore::ShareableElementData,WTF::RawPtrTraits<WebCore::ShareableElementData>,WTF::DefaultRefDerefTraits<WebCore::ShareableElementData>>>,WTF::HashTraits<WTF::Ref<WebCore::ShareableElementData,WTF::RawPtrTraits<WebCore::ShareableElementData>,WTF::DefaultRefDerefTraits<WebCore::ShareableElementData>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      if (*v13)
      {
        if (*v13 != -1)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = WebCore::DocumentSharedObjectPool::ShareableElementDataHash::hash((uint64_t *)(v6 + 8 * v11));
          v17 = 0;
          do
          {
            v18 = v16 & v15;
            v16 = ++v17 + v18;
          }
          while (*(_QWORD *)(v14 + 8 * v18));
          v19 = (uint64_t *)(v14 + 8 * v18);
          *v19 = 0;
          v20 = *v13;
          *v13 = 0;
          *v19 = v20;
          v21 = *v13;
          *v13 = 0;
          if (v21)
            WebCore::ElementData::deref(v21, v10);
          if (v13 == a3)
            v12 = v19;
        }
      }
      else
      {
        *v13 = 0;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WebCore::DocumentSharedObjectPool::ShareableElementDataHash::hash(uint64_t *a1)
{
  uint64_t v1;
  BOOL v2;
  int v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v16;

  v1 = *a1;
  if (*a1)
    v2 = (*(_DWORD *)(*a1 + 4) & 1) == 0;
  else
    v2 = 1;
  if (v2)
    v16 = *(_DWORD *)(*a1 + 4) >> 5;
  else
    v16 = *(_DWORD *)(v1 + 52);
  v3 = -1640531527;
  if (v16)
  {
    v4 = (unint64_t *)(v1 + 32);
    v5 = &v4[2 * v16];
    do
    {
      v6 = *v4;
      v7 = v4[1];
      v4 += 2;
      v8 = (v6 >> 5) & 0x7FFF800 ^ ((v3 + (unsigned __int16)v6) << 16) ^ (v3 + (unsigned __int16)v6);
      v9 = (v6 >> 37) & 0x7FFF800 ^ ((v8 + WORD2(v6) + (v8 >> 11)) << 16) ^ (v8 + WORD2(v6) + (v8 >> 11));
      v10 = (v7 >> 5) & 0x7FFF800 ^ ((v9 + (unsigned __int16)v7 + (v9 >> 11)) << 16) ^ (v9 + (unsigned __int16)v7 + (v9 >> 11));
      v11 = v10 + WORD2(v7) + (v10 >> 11);
      LODWORD(v6) = (v7 >> 37) & 0x7FFF800 ^ (v11 << 16);
      v3 = (v6 ^ v11) + ((v6 ^ v11) >> 11);
    }
    while (v4 != v5);
  }
  v12 = (v3 ^ (8 * v3)) + ((v3 ^ (8 * v3)) >> 5);
  v13 = (v12 ^ (4 * v12)) + ((v12 ^ (4 * v12)) >> 15);
  v14 = v13 ^ (v13 << 10);
  if (v14)
    return v14;
  else
    return 0x800000;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DocumentStorageAccess::hasStorageAccess(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E33A46C0;
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentStorageAccess::hasStorageAccess(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E33A46C0;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentStorageAccess::hasStorageAccess(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,BOOL>::call(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
      return WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*(_QWORD *)(result + 16), a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DocumentStorageAccess::requestStorageAccess(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,WebCore::RequestStorageAccessResult>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E33A46E8;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentStorageAccess::requestStorageAccess(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,WebCore::RequestStorageAccessResult>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E33A46E8;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::DocumentStorageAccess::requestStorageAccess(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,WebCore::RequestStorageAccessResult>::call(WTF::StringImpl *result, unsigned __int8 *a2)
{
  int v2;
  int v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44[3];

  v2 = *a2;
  v3 = a2[1];
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v6 = *((_QWORD *)result + 2);
  if (!v6 || !*(_QWORD *)(v6 + 8))
    goto LABEL_55;
  v7 = result;
  v8 = *((_QWORD *)result + 1);
  if ((v2 - 1) >= 2)
  {
    if (v2)
    {
      v17 = 0;
      v18 = v8 + 24;
      v10 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8);
      v11 = (_DWORD *)(v10 + 24);
      *(_DWORD *)(v10 + 24) += 2;
      goto LABEL_10;
    }
    v18 = v8 + 24;
    v10 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8);
    v11 = (_DWORD *)(v10 + 24);
    *(_DWORD *)(v10 + 24) += 2;
    if (v3)
    {
      LOBYTE(v17) = 0;
      goto LABEL_26;
    }
    v42 = v8 + 24;
    v9 = v8;
  }
  else
  {
    v9 = *((_QWORD *)result + 1);
    v42 = v8 + 24;
    v10 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8);
    v11 = (_DWORD *)(v10 + 24);
    *(_DWORD *)(v10 + 24) += 2;
  }
  v12 = v10;
  v13 = WebCore::Document::eventLoop((WebCore::Document *)v10, (WTF::StringImpl *)a2);
  v14 = (unsigned int *)*((_QWORD *)v7 + 2);
  if (v14)
  {
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
  }
  v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v16 = &off_1E33A4710;
  *((_QWORD *)v16 + 1) = v9;
  *((_QWORD *)v16 + 2) = v14;
  v44[0] = v16;
  WebCore::EventLoopTaskGroup::queueMicrotask(v13, (uint64_t *)v44);
  result = v44[0];
  if (v44[0])
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v44[0] + 8))(v44[0]);
  v17 = 1;
  v10 = v12;
  v8 = v9;
  v18 = v42;
  if (!v2)
  {
    if (!v3)
    {
LABEL_27:
      v24 = *((_QWORD *)v7 + 3);
      v25 = *(_QWORD *)(v24 + 24);
      if (v25 && *(_QWORD *)v25 && (*(_BYTE *)(v25 + 8) & 3) == 0)
      {
        v26 = **(uint64_t ***)(v24 + 32);
        v27 = v17;
        JSC::JSLockHolder::JSLockHolder();
        WebCore::DeferredPromise::callFunction(v24, v26, 1, (objc_class *)0xA);
        result = (WTF::StringImpl *)MEMORY[0x19AEA32A0](v44);
        LOBYTE(v17) = v27;
      }
      if ((v17 & 1) == 0)
        goto LABEL_53;
      goto LABEL_47;
    }
LABEL_26:
    ++*(_BYTE *)(v8 + 32);
    goto LABEL_27;
  }
LABEL_10:
  if (v2 != 2)
  {
    if (v2 == 1)
    {
      v19 = *((_QWORD *)v7 + 3);
      v20 = *(_QWORD *)(v19 + 24);
      if (v20)
      {
        if (*(_QWORD *)v20 && (*(_BYTE *)(v20 + 8) & 3) == 0)
        {
          v21 = *(_QWORD *)(v19 + 32);
          if (!v21 || (*(_BYTE *)(v21 + 8) & 3) != 0)
          {
            LOBYTE(v22) = v17;
            v23 = 0;
          }
          else
          {
            LOBYTE(v22) = v17;
            v23 = *(uint64_t **)v21;
          }
          JSC::JSLockHolder::JSLockHolder();
          WebCore::DeferredPromise::callFunction(v19, v23, 0, (objc_class *)0xA);
          result = (WTF::StringImpl *)MEMORY[0x19AEA32A0](v44);
          goto LABEL_19;
        }
      }
    }
LABEL_46:
    if (!v17)
      goto LABEL_53;
LABEL_47:
    v36 = *(_QWORD *)(*(_QWORD *)v18 + 8);
    *(_DWORD *)(v36 + 24) += 2;
    v37 = WebCore::Document::eventLoop((WebCore::Document *)v36, (WTF::StringImpl *)a2);
    v38 = (unsigned int *)*((_QWORD *)v7 + 2);
    if (v38)
    {
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 + 1, v38));
    }
    v40 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v40 = &off_1E33A4738;
    *((_QWORD *)v40 + 1) = v8;
    *((_QWORD *)v40 + 2) = v38;
    v44[0] = v40;
    WebCore::EventLoopTaskGroup::queueMicrotask(v37, (uint64_t *)v44);
    result = v44[0];
    if (v44[0])
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v44[0] + 8))(v44[0]);
    if (*(_DWORD *)(v36 + 24) == 2)
    {
      if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
        result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v36, a2);
    }
    else
    {
      *(_DWORD *)(v36 + 24) -= 2;
    }
    goto LABEL_53;
  }
  v22 = v17;
  v28 = *((_QWORD *)v7 + 3);
  v44[0] = 0;
  WebCore::DeferredPromise::reject(v28, (JSC::JSGlobalObject *)4, (JSC::JSGlobalObject *)v44, 0);
  result = v44[0];
  v44[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  v29 = *(_QWORD *)(v10 + 528);
  v17 = v22;
  if (!v29)
    goto LABEL_46;
  v30 = *(_QWORD *)(v29 + 8);
  if (!v30)
    goto LABEL_46;
  v31 = (unsigned int *)(v30 + 8);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 + 1, v31));
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v10 + 192), (WTF::StringImpl *)a2);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v43, (const WebCore::SecurityOriginData *)(v33 + 8));
  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((WTF::ASCIICaseInsensitiveHash *)&v43, (uint64_t *)(v30 + 648), (uint64_t)v44);
  result = v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  v17 = v22;
  do
  {
    v34 = __ldaxr(v31);
    v35 = v34 - 1;
  }
  while (__stlxr(v35, v31));
  if (v35)
    goto LABEL_46;
  atomic_store(1u, v31);
  v41 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v41 = off_1E31FE290;
  *((_QWORD *)v41 + 1) = v31;
  v44[0] = v41;
  WTF::ensureOnMainThread();
  result = v44[0];
  v44[0] = 0;
  if (result)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
LABEL_19:
  if ((v22 & 1) != 0)
    goto LABEL_47;
LABEL_53:
  if (*v11 == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
  }
  else
  {
    *v11 -= 2;
  }
LABEL_55:
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      if (!v4)
        return result;
      goto LABEL_59;
    }
    *(_DWORD *)v5 -= 2;
  }
  if (!v4)
    return result;
LABEL_59:
  if (*(_DWORD *)v4 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
  *(_DWORD *)v4 -= 2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DocumentStorageAccess::requestStorageAccess(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(WebCore::RequestStorageAccessResult)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E33A4710;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentStorageAccess::requestStorageAccess(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(WebCore::RequestStorageAccessResult)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E33A4710;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::DocumentStorageAccess::requestStorageAccess(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(WebCore::RequestStorageAccessResult)::{lambda(void)#1},void>::call(unsigned int *result)
{
  uint64_t v1;

  v1 = *((_QWORD *)result + 2);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
      return WebCore::DocumentStorageAccess::enableTemporaryTimeUserGesture(*((WebCore::DocumentStorageAccess **)result
                                                                            + 1));
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DocumentStorageAccess::requestStorageAccess(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(WebCore::RequestStorageAccessResult)::{lambda(void)#2},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E33A4738;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentStorageAccess::requestStorageAccess(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(WebCore::RequestStorageAccessResult)::{lambda(void)#2},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E33A4738;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::UserGestureIndicator *WTF::Detail::CallableWrapper<WebCore::DocumentStorageAccess::requestStorageAccess(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(WebCore::RequestStorageAccessResult)::{lambda(void)#2},void>::call(WebCore::UserGestureIndicator *result)
{
  uint64_t v1;
  uint64_t v2;
  WTF *v3;
  void *v4;

  v1 = *((_QWORD *)result + 2);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = *((_QWORD *)result + 1);
    result = *(WebCore::UserGestureIndicator **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (result)
    {
      WebCore::UserGestureIndicator::~UserGestureIndicator(result);
      return (WebCore::UserGestureIndicator *)WTF::fastFree(v3, v4);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DocumentStorageAccess::requestStorageAccessQuirk(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0,void,WebCore::RequestStorageAccessResult>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E33A4760;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentStorageAccess::requestStorageAccessQuirk(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0,void,WebCore::RequestStorageAccessResult>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E33A4760;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentStorageAccess::requestStorageAccessQuirk(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0,void,WebCore::RequestStorageAccessResult>::call(uint64_t result, unsigned __int8 *a2)
{
  int v2;
  int v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  _QWORD *v21;
  int v22;
  _QWORD *v23;

  v2 = *a2;
  v3 = a2[1];
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v6 = *(_QWORD *)(result + 16);
  if (!v6 || !*(_QWORD *)(v6 + 8))
    goto LABEL_31;
  v7 = result;
  v8 = *(_QWORD *)(result + 8);
  v9 = v2 == 1 || v3 == 0;
  v10 = v9;
  if (v9)
  {
    v22 = v10;
    v11 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8);
    *(_DWORD *)(v11 + 24) += 2;
    v12 = WebCore::Document::eventLoop((WebCore::Document *)v11, (WTF::StringImpl *)a2);
    v13 = *(unsigned int **)(v7 + 16);
    if (v13)
    {
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v15 = &off_1E33A4788;
    v15[1] = v8;
    v15[2] = v13;
    v23 = v15;
    WebCore::EventLoopTaskGroup::queueMicrotask(v12, (uint64_t *)&v23);
    result = (uint64_t)v23;
    if (v23)
      result = (*(uint64_t (**)(_QWORD *))(*v23 + 8))(v23);
    v10 = v22;
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  if ((v2 - 1) >= 2)
  {
    if (v2)
      goto LABEL_24;
    if (v3)
      ++*(_BYTE *)(v8 + 32);
    v16 = *(_QWORD *)(v7 + 24);
    *(_QWORD *)(v7 + 24) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 16))(v16, 0);
  }
  else
  {
    v16 = *(_QWORD *)(v7 + 24);
    *(_QWORD *)(v7 + 24) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, 1);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
LABEL_24:
  if (v10)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8);
    *(_DWORD *)(v17 + 24) += 2;
    v18 = WebCore::Document::eventLoop((WebCore::Document *)v17, (WTF::StringImpl *)a2);
    v19 = *(unsigned int **)(v7 + 16);
    if (v19)
    {
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 + 1, v19));
    }
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v21 = &off_1E33A47B0;
    v21[1] = v8;
    v21[2] = v19;
    v23 = v21;
    WebCore::EventLoopTaskGroup::queueMicrotask(v18, (uint64_t *)&v23);
    result = (uint64_t)v23;
    if (v23)
      result = (*(uint64_t (**)(_QWORD *))(*v23 + 8))(v23);
    if (*(_DWORD *)(v17 + 24) == 2)
    {
      if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v17, a2);
    }
    else
    {
      *(_DWORD *)(v17 + 24) -= 2;
    }
  }
LABEL_31:
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      result = WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      if (!v4)
        return result;
      goto LABEL_35;
    }
    *(_DWORD *)v5 -= 2;
  }
  if (!v4)
    return result;
LABEL_35:
  if (*(_DWORD *)v4 == 2)
    return WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
  *(_DWORD *)v4 -= 2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DocumentStorageAccess::requestStorageAccessQuirk(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0::operator()(WebCore::RequestStorageAccessResult)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E33A4788;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentStorageAccess::requestStorageAccessQuirk(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0::operator()(WebCore::RequestStorageAccessResult)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E33A4788;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::DocumentStorageAccess::requestStorageAccessQuirk(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0::operator()(WebCore::RequestStorageAccessResult)::{lambda(void)#1},void>::call(unsigned int *result)
{
  uint64_t v1;

  v1 = *((_QWORD *)result + 2);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
      return WebCore::DocumentStorageAccess::enableTemporaryTimeUserGesture(*((WebCore::DocumentStorageAccess **)result
                                                                            + 1));
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DocumentStorageAccess::requestStorageAccessQuirk(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0::operator()(WebCore::RequestStorageAccessResult)::{lambda(void)#2},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E33A47B0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentStorageAccess::requestStorageAccessQuirk(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0::operator()(WebCore::RequestStorageAccessResult)::{lambda(void)#2},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E33A47B0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::UserGestureIndicator *WTF::Detail::CallableWrapper<WebCore::DocumentStorageAccess::requestStorageAccessQuirk(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0::operator()(WebCore::RequestStorageAccessResult)::{lambda(void)#2},void>::call(WebCore::UserGestureIndicator *result)
{
  uint64_t v1;
  uint64_t v2;
  WTF *v3;
  void *v4;

  v1 = *((_QWORD *)result + 2);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = *((_QWORD *)result + 1);
    result = *(WebCore::UserGestureIndicator **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (result)
    {
      WebCore::UserGestureIndicator::~UserGestureIndicator(result);
      return (WebCore::UserGestureIndicator *)WTF::fastFree(v3, v4);
    }
  }
  return result;
}

uint64_t **WTF::RefCounted<WebCore::WindowProxy>::deref(uint64_t **this, WTF::StringImpl *a2)
{
  WTF *v2;
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = (WTF *)this;
  if (*(_DWORD *)this == 1)
  {
    v3 = this[2];
    this[2] = 0;
    if (v3)
    {
      if (*v3)
        WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v3, a2);
      WTF::fastFree((WTF *)v3, a2);
    }
    v4 = (unsigned int *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
    return (uint64_t **)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

WebCore::Node *WebCore::EventTarget::deref(WebCore::Node *this)
{
  if (!this || (*((_QWORD *)this + 2) & 0x2000000000000) == 0)
    return (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)this + 96))(this);
  if (*((_DWORD *)this + 6) == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      return (WebCore::Node *)WebCore::Node::removedLastRef(this);
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
  return this;
}

uint64_t *WTF::HashTable<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashMap<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      atomic_store(1u, (unsigned int *)v2);
      v11 = *(unsigned int *)(v2 + 28);
      v16 = result;
      v15 = a2;
      if ((_DWORD)v11)
      {
        v14 = v2;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v2 + 16), (WTF::StringImpl *)(*(_QWORD *)(v2 + 16) + 32 * v11));
        v2 = v14;
      }
      v12 = *(WTF **)(v2 + 16);
      if (v12)
      {
        *(_QWORD *)(v2 + 16) = 0;
        *(_DWORD *)(v2 + 24) = 0;
        v13 = v2;
        WTF::fastFree(v12, a2);
        v2 = v13;
      }
      WTF::fastFree((WTF *)v2, a2);
      result = v16;
      a2 = v15;
    }
  }
  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v5 = *result;
  if (*result)
    v6 = *(_DWORD *)(v5 - 12) - 1;
  else
    v6 = -1;
  *(_DWORD *)(v5 - 12) = v6;
  v7 = *result;
  if (*result)
  {
    v8 = 6 * *(_DWORD *)(v7 - 12);
    v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
      return WTF::HashTable<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashMap<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>>::rehash(result, v9 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashMap<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  WTF *v30;
  _QWORD *result;
  uint64_t v32;
  uint64_t v33;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ~(*(_QWORD *)(v14 + 8) << 32) + *(_QWORD *)(v14 + 8);
          v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
          v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
          v20 = v16 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (_QWORD *)(v15 + 16 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v24[1] = *(_QWORD *)(v6 + 16 * v11 + 8);
          v26 = *v13;
          *v13 = 0;
          if (v26)
          {
            do
            {
              v27 = __ldaxr((unsigned int *)v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, (unsigned int *)v26));
            if (!v28)
            {
              atomic_store(1u, (unsigned int *)v26);
              v29 = *(unsigned int *)(v26 + 28);
              if ((_DWORD)v29)
              {
                v33 = v26;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v26 + 16), (WTF::StringImpl *)(*(_QWORD *)(v26 + 16) + 32 * v29));
                v26 = v33;
              }
              v30 = *(WTF **)(v26 + 16);
              if (v30)
              {
                *(_QWORD *)(v26 + 16) = 0;
                *(_DWORD *)(v26 + 24) = 0;
                v32 = v26;
                WTF::fastFree(v30, v10);
                v26 = v32;
              }
              WTF::fastFree((WTF *)v26, v10);
            }
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatQuad>(uint64_t a1, unint64_t a2)
{
  _OWORD *v3;
  _OWORD *v4;
  __int128 v5;

  v3 = (_OWORD *)WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = (_OWORD *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12));
  v5 = v3[1];
  *v4 = *v3;
  v4[1] = v5;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  _OWORD *v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  __int128 v13;
  __int128 v14;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 27))
  {
    v6 = result;
    v7 = *(WTF **)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v11 = 32 * v8;
      v12 = v7;
      do
      {
        v13 = *(_OWORD *)v12;
        v14 = *((_OWORD *)v12 + 1);
        v12 = (WTF *)((char *)v12 + 32);
        *v9 = v13;
        v9[1] = v14;
        v9 += 2;
        v11 -= 32;
      }
      while (v11);
    }
    if (v7)
    {
      if (*(WTF **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::remove(uint64_t *a1, WTF::StringImpl ***a2)
{
  WTF::StringImpl **v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v12;
  void *v13;

  v4 = *a2;
  *a2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v4);
      WTF::fastFree(v12, v13);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  *a2 = (WTF::StringImpl **)-1;
  result = WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 1), a2);
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      return WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(a1, v10 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(uint64_t *a1, unsigned int a2, WebCore::QualifiedName::QualifiedNameImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::QualifiedName::QualifiedNameImpl **v15;
  WTF::StringImpl **v16;
  WTF::StringImpl **v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  WTF::StringImpl **v21;
  WebCore::QualifiedName::QualifiedNameImpl *v22;
  int v23;
  WTF::StringImpl **v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  BOOL v31;
  WTF *v32;
  void *v33;
  int v34;
  void *v35;
  WTF::StringImpl **v36;
  WebCore::QualifiedName::QualifiedNameImpl *v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::QualifiedName::QualifiedNameImpl *v40;
  WTF *v41;
  void *v42;
  WTF *v43;
  void *v44;
  WTF *v45;
  void *v46;
  WTF *v47;
  void *v48;
  uint64_t result;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v55;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_DWORD *)WebCore::nullName;
    if (WebCore::nullName)
    {
      v11 = (_QWORD *)(v7 + 24);
      do
      {
        ++*v10;
        *(v11 - 1) = v10;
        *v11 = 0;
        v11[1] = 0;
        v11 += 3;
        --v9;
      }
      while (v9);
    }
    else
    {
      v50 = (_QWORD *)(v7 + 16);
      do
      {
        *v50 = 0;
        v50[1] = 0;
        v50[2] = 0;
        v50 += 3;
        --v9;
      }
      while (v9);
    }
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v12 = 0;
    v13 = 0;
    v14 = v5;
    v51 = v5;
    v52 = v4;
    do
    {
      v15 = (WebCore::QualifiedName::QualifiedNameImpl **)(v4 + 24 * v12);
      v16 = (WTF::StringImpl **)*v15;
      if (*v15 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
      {
        v17 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
          v18 = (*(_DWORD *)WebCore::nullName)++;
          if (v18)
          {
            *(_DWORD *)v17 = v18;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v17);
            WTF::fastFree(v41, v42);
          }
        }
        if (v16 == v17)
        {
          WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 + 24 * v12 + 8, v8);
          v21 = (WTF::StringImpl **)*v15;
          *v15 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v21);
              WTF::fastFree(v47, v48);
            }
            else
            {
              --*(_DWORD *)v21;
            }
          }
        }
        else
        {
          v55 = v13;
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v22 = *v15;
          v23 = *((_DWORD *)*v15 + 1);
          if (!v23)
          {
            v23 = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*v15);
            *((_DWORD *)v22 + 1) = v23;
          }
          v24 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
          {
            v25 = 0;
            do
            {
              v26 = v23 & v20;
              v27 = v19 + 24 * (v23 & v20);
              if (v24)
              {
                v28 = (*(_DWORD *)v24)++;
                v29 = *(WTF::StringImpl ***)v27;
                if (v28)
                {
                  *(_DWORD *)v24 = v28;
                  v30 = (uint64_t)v24;
                }
                else
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v24);
                  WTF::fastFree(v32, v33);
                  v30 = WebCore::nullName;
                }
              }
              else
              {
                v30 = 0;
                v29 = *(WTF::StringImpl ***)v27;
              }
              v23 = ++v25 + v26;
              v31 = v29 == v24;
              v24 = (WTF::StringImpl **)v30;
            }
            while (!v31);
          }
          else
          {
            v34 = 0;
            do
            {
              v27 = v19 + 24 * (v23 & v20);
              v23 = ++v34 + (v23 & v20);
            }
            while (*(_QWORD *)v27);
          }
          WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v27 + 8, v8);
          v36 = *(WTF::StringImpl ***)v27;
          *(_QWORD *)v27 = 0;
          v14 = v51;
          v4 = v52;
          v13 = v55;
          if (v36)
          {
            if (*(_DWORD *)v36 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v36);
              WTF::fastFree(v43, v44);
            }
            else
            {
              --*(_DWORD *)v36;
            }
          }
          v37 = *v15;
          *v15 = 0;
          *(_QWORD *)v27 = v37;
          v38 = v52 + 24 * v12;
          *(_QWORD *)(v27 + 8) = 0;
          *(_QWORD *)(v27 + 16) = 0;
          v39 = *(_QWORD *)(v38 + 8);
          v38 += 8;
          *(_QWORD *)v38 = 0;
          *(_QWORD *)(v27 + 8) = v39;
          LODWORD(v37) = *(_DWORD *)(v38 + 8);
          *(_DWORD *)(v38 + 8) = 0;
          *(_DWORD *)(v27 + 16) = (_DWORD)v37;
          LODWORD(v37) = *(_DWORD *)(v38 + 12);
          *(_DWORD *)(v38 + 12) = 0;
          *(_DWORD *)(v27 + 20) = (_DWORD)v37;
          WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v38, v35);
          v40 = *v15;
          *v15 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v40);
              WTF::fastFree(v45, v46);
            }
            else
            {
              --*(_DWORD *)v40;
            }
          }
          if (v15 == a3)
            v13 = v27;
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v13;
}

WebCore::QualifiedName::QualifiedNameImpl **WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  unsigned int v4;
  WebCore::QualifiedName::QualifiedNameImpl *v5;
  int v6;
  WTF::StringImpl **v7;
  int v8;
  int v9;
  WebCore::QualifiedName::QualifiedNameImpl **v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  unsigned int v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  WebCore::QualifiedName::QualifiedNameImpl *v19;
  int i;
  WebCore::QualifiedName::QualifiedNameImpl *v22;

  if (!a1)
    return 0;
  v4 = *(_DWORD *)(a1 - 8);
  v5 = *a2;
  v6 = *((_DWORD *)*a2 + 1);
  if (!v6)
  {
    v6 = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a2);
    *((_DWORD *)v5 + 1) = v6;
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v8 = 0;
    while (1)
    {
      v9 = v6 & v4;
      v10 = (WebCore::QualifiedName::QualifiedNameImpl **)(a1 + 24 * (v6 & v4));
      if (v7)
      {
        v11 = (*(_DWORD *)v7)++;
        v12 = (WTF::StringImpl **)*v10;
        if (v11)
        {
          *(_DWORD *)v7 = v11;
          v13 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = (WTF::StringImpl **)*v10;
      }
      if (v12 == v7)
        break;
      if (*v10 != (WebCore::QualifiedName::QualifiedNameImpl *)-1 && *v10 == *a2)
        return v10;
      v6 = ++v8 + v9;
      v7 = (WTF::StringImpl **)v13;
    }
    return 0;
  }
  v17 = v6 & v4;
  v10 = (WebCore::QualifiedName::QualifiedNameImpl **)(a1 + 24 * (v6 & v4));
  v18 = *v10;
  if (!*v10)
    return 0;
  v19 = *a2;
  if (v18 == (WebCore::QualifiedName::QualifiedNameImpl *)-1 || v18 != v19)
  {
    for (i = 1; ; ++i)
    {
      v17 = (v17 + i) & v4;
      v10 = (WebCore::QualifiedName::QualifiedNameImpl **)(a1 + 24 * v17);
      v22 = *v10;
      if (!*v10)
        break;
      if (v22 != (WebCore::QualifiedName::QualifiedNameImpl *)-1 && v22 == v19)
        return v10;
    }
    return 0;
  }
  return v10;
}

WTF::StringImpl **WTF::HashMap<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName const&,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2, WebCore::QualifiedName::QualifiedNameImpl **a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  WebCore::QualifiedName::QualifiedNameImpl *v9;
  int v10;
  int *v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  int i;
  int v15;
  WTF::StringImpl **v16;
  int v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  WTF::StringImpl **v19;
  int *v20;
  WTF::StringImpl **v21;
  WTF *v22;
  void *v23;
  unsigned int v24;
  WebCore::QualifiedName::QualifiedNameImpl *v25;
  int v26;
  WTF::StringImpl *v27;
  WebCore::QualifiedName::QualifiedNameImpl *v28;
  WTF::StringImpl **result;
  uint64_t v30;
  WTF *v31;
  WTF *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  WTF *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  WTF *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  WTF *v57;
  void *v58;
  uint64_t *v59;
  uint64_t v60;

  v6 = a2;
  v7 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(a2, 8u, 0), (v7 = *v6) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = *a3;
  v10 = *((_DWORD *)*a3 + 1);
  if (!v10)
  {
    v10 = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a3);
    *((_DWORD *)v9 + 1) = v10;
  }
  v11 = &webThreadDelegateMessageScopeCount;
  v12 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v59 = v6;
    v60 = a4;
    v13 = 0;
    for (i = 1; ; ++i)
    {
      v15 = v10 & v8;
      v16 = (WTF::StringImpl **)(v7 + 24 * (v10 & v8));
      if (v12)
      {
        v17 = (*(_DWORD *)v12)++;
        v18 = *v16;
        if (v17)
        {
          *(_DWORD *)v12 = v17;
          v19 = v12;
        }
        else
        {
          v20 = v11;
          v21 = v13;
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v12);
          WTF::fastFree(v22, v23);
          v13 = v21;
          v11 = v20;
          v19 = (WTF::StringImpl **)*((_QWORD *)v20 + 254);
        }
      }
      else
      {
        v19 = 0;
        v18 = *v16;
      }
      if (v18 == (WebCore::QualifiedName::QualifiedNameImpl *)v12)
        break;
      if (*v16 == (WTF::StringImpl *)-1)
      {
        v13 = v16;
      }
      else if (*v16 == *a3)
      {
        goto LABEL_52;
      }
      v10 = i + v15;
      v12 = v19;
    }
LABEL_26:
    v6 = v59;
    a4 = v60;
    if (v13)
    {
      v27 = (WTF::StringImpl *)*((_QWORD *)v11 + 254);
      if (v27)
        ++*(_DWORD *)v27;
      v13[1] = 0;
      v13[2] = 0;
      *v13 = v27;
      --*(_DWORD *)(*v59 - 16);
      v16 = v13;
    }
LABEL_30:
    v28 = *a3;
    if (*a3)
      ++*(_DWORD *)v28;
    result = (WTF::StringImpl **)*v16;
    *v16 = v28;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        result = (WTF::StringImpl **)WTF::fastFree(v57, v58);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
    v30 = *((unsigned int *)v16 + 5);
    v31 = v16[1];
    if ((_DWORD)v30)
    {
      v32 = (WTF *)((char *)v31 + 8 * v30);
      do
      {
        v33 = *(_QWORD *)v31;
        *(_QWORD *)v31 = 0;
        if (v33)
        {
          do
          {
            v34 = __ldaxr((unsigned int *)v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, (unsigned int *)v33));
          if (!v35)
          {
            atomic_store(1u, (unsigned int *)v33);
            v36 = *(unsigned int *)(v33 + 28);
            if ((_DWORD)v36)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v33 + 16), (WTF::StringImpl *)(*(_QWORD *)(v33 + 16) + 32 * v36));
            v37 = *(WTF **)(v33 + 16);
            if (v37)
            {
              *(_QWORD *)(v33 + 16) = 0;
              *(_DWORD *)(v33 + 24) = 0;
              WTF::fastFree(v37, a2);
            }
            result = (WTF::StringImpl **)WTF::fastFree((WTF *)v33, a2);
          }
        }
        v31 = (WTF *)((char *)v31 + 8);
      }
      while (v31 != v32);
      v31 = v16[1];
    }
    if (v31)
    {
      v16[1] = 0;
      *((_DWORD *)v16 + 4) = 0;
      result = (WTF::StringImpl **)WTF::fastFree(v31, a2);
    }
    v38 = *(WTF::StringImpl **)a4;
    *(_QWORD *)a4 = 0;
    v16[1] = v38;
    LODWORD(v38) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = 0;
    *((_DWORD *)v16 + 4) = (_DWORD)v38;
    LODWORD(v38) = *(_DWORD *)(a4 + 12);
    *(_DWORD *)(a4 + 12) = 0;
    *((_DWORD *)v16 + 5) = (_DWORD)v38;
    v39 = *v6;
    if (*v6)
      v40 = *(_DWORD *)(v39 - 12) + 1;
    else
      v40 = 1;
    *(_DWORD *)(v39 - 12) = v40;
    v52 = *v6;
    if (*v6)
      v53 = *(_DWORD *)(v52 - 12);
    else
      v53 = 0;
    v54 = (*(_DWORD *)(v52 - 16) + v53);
    v55 = *(unsigned int *)(v52 - 4);
    if (v55 > 0x400)
    {
      if (v55 <= 2 * v54)
        goto LABEL_76;
    }
    else if (3 * v55 <= 4 * v54)
    {
      if (!(_DWORD)v55)
      {
        v56 = 8;
LABEL_79:
        result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v6, v56, v16);
        v16 = result;
        v52 = *v6;
        if (*v6)
          LODWORD(v55) = *(_DWORD *)(v52 - 4);
        else
          LODWORD(v55) = 0;
        goto LABEL_81;
      }
LABEL_76:
      v56 = (_DWORD)v55 << (6 * *(_DWORD *)(v52 - 12) >= (2 * v55));
      goto LABEL_79;
    }
LABEL_81:
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v52 + 24 * v55;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  v24 = v10 & v8;
  v16 = (WTF::StringImpl **)(v7 + 24 * (v10 & v8));
  v25 = *v16;
  if (!*v16)
    goto LABEL_30;
  v59 = v6;
  v60 = a4;
  v13 = 0;
  v26 = 1;
  while (1)
  {
    if (v25 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
    {
      v13 = v16;
      goto LABEL_25;
    }
    if (v25 == *a3)
      break;
LABEL_25:
    v24 = (v24 + v26) & v8;
    v16 = (WTF::StringImpl **)(v7 + 24 * v24);
    v25 = *v16;
    ++v26;
    if (!*v16)
      goto LABEL_26;
  }
LABEL_52:
  v41 = *v59;
  if (*v59)
    v42 = *(_DWORD *)(v41 - 4);
  else
    v42 = 0;
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v41 + 24 * v42;
  *(_BYTE *)(a1 + 16) = 0;
  v43 = *((unsigned int *)v16 + 5);
  if ((_DWORD)v43)
  {
    v44 = v16[1];
    v45 = (WTF::StringImpl *)((char *)v44 + 8 * v43);
    do
    {
      v46 = *(_QWORD *)v44;
      *(_QWORD *)v44 = 0;
      if (v46)
      {
        do
        {
          v47 = __ldaxr((unsigned int *)v46);
          v48 = v47 - 1;
        }
        while (__stlxr(v48, (unsigned int *)v46));
        if (!v48)
        {
          atomic_store(1u, (unsigned int *)v46);
          v49 = *(unsigned int *)(v46 + 28);
          if ((_DWORD)v49)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v46 + 16), (WTF::StringImpl *)(*(_QWORD *)(v46 + 16) + 32 * v49));
          v50 = *(WTF **)(v46 + 16);
          if (v50)
          {
            *(_QWORD *)(v46 + 16) = 0;
            *(_DWORD *)(v46 + 24) = 0;
            WTF::fastFree(v50, a2);
          }
          WTF::fastFree((WTF *)v46, a2);
        }
      }
      v44 = (WTF::StringImpl *)((char *)v44 + 8);
    }
    while (v44 != v45);
  }
  result = (WTF::StringImpl **)v16[1];
  if (result)
  {
    v16[1] = 0;
    *((_DWORD *)v16 + 4) = 0;
    result = (WTF::StringImpl **)WTF::fastFree((WTF *)result, a2);
  }
  v51 = *(WTF::StringImpl **)v60;
  *(_QWORD *)v60 = 0;
  v16[1] = v51;
  LODWORD(v51) = *(_DWORD *)(v60 + 8);
  *(_DWORD *)(v60 + 8) = 0;
  *((_DWORD *)v16 + 4) = (_DWORD)v51;
  LODWORD(v51) = *(_DWORD *)(v60 + 12);
  *(_DWORD *)(v60 + 12) = 0;
  *((_DWORD *)v16 + 5) = (_DWORD)v51;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Element::enqueueSecurityPolicyViolationEvent(WebCore::SecurityPolicyViolationEventInit &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *a1 = &off_1E33A4808;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Element::enqueueSecurityPolicyViolationEvent(WebCore::SecurityPolicyViolationEventInit &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E33A4808;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::Element::enqueueSecurityPolicyViolationEvent(WebCore::SecurityPolicyViolationEventInit &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WebCore::Node *v2;
  unsigned int *result;
  void *v4;

  v1 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(v1 + 22) & 8) != 0)
    return (unsigned int *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v1 + 48))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 24));
  v2 = *(WebCore::Node **)(*(_QWORD *)(v1 + 40) + 8);
  *((_DWORD *)v2 + 6) += 2;
  result = (unsigned int *)(*(uint64_t (**)(WebCore::Node *, _QWORD))(*(_QWORD *)v2 + 48))(v2, *(_QWORD *)(a1 + 24));
  if (*((_DWORD *)v2 + 6) == 2)
  {
    if ((*((_WORD *)v2 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v2, v4);
  }
  else
  {
    *((_DWORD *)v2 + 6) -= 2;
  }
  return result;
}

void std::__function::__func<WebCore::Element::addToTopLayer(void)::$_0,std::allocator<WebCore::Element::addToTopLayer(void)::$_0>,void ()(WebCore::RenderLayer &)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::Element::addToTopLayer(void)::$_0,std::allocator<WebCore::Element::addToTopLayer(void)::$_0>,void ()(WebCore::RenderLayer &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E33A4830;
  return result;
}

void std::__function::__func<WebCore::Element::addToTopLayer(void)::$_0,std::allocator<WebCore::Element::addToTopLayer(void)::$_0>,void ()(WebCore::RenderLayer &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E33A4830;
}

WebCore::RenderLayer *std::__function::__func<WebCore::Element::addToTopLayer(void)::$_0,std::allocator<WebCore::Element::addToTopLayer(void)::$_0>,void ()(WebCore::RenderLayer &)>::operator()(uint64_t a1, WebCore::RenderLayer *a2, WebCore::RenderLayer *a3)
{
  return WebCore::RenderLayer::establishesTopLayerWillChange(a2, (uint64_t)a2, a3);
}

void std::__function::__func<WebCore::Element::addToTopLayer(void)::$_1,std::allocator<WebCore::Element::addToTopLayer(void)::$_1>,void ()(WebCore::RenderLayer &)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::Element::addToTopLayer(void)::$_1,std::allocator<WebCore::Element::addToTopLayer(void)::$_1>,void ()(WebCore::RenderLayer &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E33A4878;
  return result;
}

void std::__function::__func<WebCore::Element::addToTopLayer(void)::$_1,std::allocator<WebCore::Element::addToTopLayer(void)::$_1>,void ()(WebCore::RenderLayer &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E33A4878;
}

WebCore::RenderLayer *std::__function::__func<WebCore::Element::addToTopLayer(void)::$_1,std::allocator<WebCore::Element::addToTopLayer(void)::$_1>,void ()(WebCore::RenderLayer &)>::operator()(uint64_t a1, WebCore::RenderElement **a2)
{
  return WebCore::RenderLayer::establishesTopLayerDidChange(a2, a2);
}

void std::__function::__func<WebCore::Element::removeFromTopLayer(void)::$_0,std::allocator<WebCore::Element::removeFromTopLayer(void)::$_0>,void ()(WebCore::RenderLayer &)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::Element::removeFromTopLayer(void)::$_0,std::allocator<WebCore::Element::removeFromTopLayer(void)::$_0>,void ()(WebCore::RenderLayer &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E33A48C0;
  return result;
}

void std::__function::__func<WebCore::Element::removeFromTopLayer(void)::$_0,std::allocator<WebCore::Element::removeFromTopLayer(void)::$_0>,void ()(WebCore::RenderLayer &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E33A48C0;
}

WebCore::RenderLayer *std::__function::__func<WebCore::Element::removeFromTopLayer(void)::$_0,std::allocator<WebCore::Element::removeFromTopLayer(void)::$_0>,void ()(WebCore::RenderLayer &)>::operator()(uint64_t a1, WebCore::RenderLayer *a2, WebCore::RenderLayer *a3)
{
  return WebCore::RenderLayer::establishesTopLayerWillChange(a2, (uint64_t)a2, a3);
}

void std::__function::__func<WebCore::Element::removeFromTopLayer(void)::$_1,std::allocator<WebCore::Element::removeFromTopLayer(void)::$_1>,void ()(WebCore::RenderLayer &)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::Element::removeFromTopLayer(void)::$_1,std::allocator<WebCore::Element::removeFromTopLayer(void)::$_1>,void ()(WebCore::RenderLayer &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E33A4908;
  return result;
}

void std::__function::__func<WebCore::Element::removeFromTopLayer(void)::$_1,std::allocator<WebCore::Element::removeFromTopLayer(void)::$_1>,void ()(WebCore::RenderLayer &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E33A4908;
}

WebCore::RenderLayer *std::__function::__func<WebCore::Element::removeFromTopLayer(void)::$_1,std::allocator<WebCore::Element::removeFromTopLayer(void)::$_1>,void ()(WebCore::RenderLayer &)>::operator()(uint64_t a1, WebCore::RenderElement **a2)
{
  return WebCore::RenderLayer::establishesTopLayerDidChange(a2, a2);
}

unsigned int *WTF::Vector<WTF::WeakPtr<WebCore::ResizeObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, void *a2)
{
  unsigned int v2;
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int **v6;
  unsigned int v7;
  unsigned int v8;

  v2 = a2;
  v3 = result;
  v4 = result[3];
  if ((void *)v4 != a2)
  {
    v5 = *(_QWORD *)result + 8 * v4;
    v6 = (unsigned int **)(*(_QWORD *)result + 8 * (_QWORD)a2);
    do
    {
      result = *v6;
      *v6 = 0;
      if (result)
      {
        do
        {
          v7 = __ldaxr(result);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, result));
        if (!v8)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      ++v6;
    }
    while (v6 != (unsigned int **)v5);
  }
  v3[3] = v2;
  return result;
}

WTF::StringImpl **WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::StringImpl::StaticStringImpl &>(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;

  *(_DWORD *)a2 += 2;
  v6 = a2;
  WTF::AtomString::AtomString(a1, &v6);
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

BOOL WTF::Detail::CallableWrapper<WebCore::Element::getAnimations(std::optional<WebCore::GetAnimationsOptions>)::$_0,BOOL,WebCore::Element&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int16 v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == a2)
    return 1;
  v3 = *(_WORD *)(v2 + 28);
  if ((v3 & 0xF000) == 0x9000)
  {
    if (**(_QWORD **)(a2 + 40) == v2 && (*(_WORD *)(a2 + 28) & 0xF000) != 0x9000)
      return (*(unsigned __int8 *)(a2 + 22) >> 3) & 1;
    return 0;
  }
  if ((v3 & 4) == 0
    || !*(_QWORD *)(v2 + 80)
    || ((*(unsigned __int8 *)(a2 + 22) ^ *(unsigned __int8 *)(v2 + 22)) & 8) != 0)
  {
    return 0;
  }
  do
  {
    a2 = *(_QWORD *)(a2 + 32);
    result = a2 != 0;
  }
  while (a2 != v2 && a2 != 0);
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,WTF::KeyValuePair<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,unsigned long>>,WTF::DefaultHash<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>,WTF::HashMap<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,unsigned long,WTF::DefaultHash<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>,WTF::HashTraits<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (uint64_t *)(v4 + 16 * i);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 16 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = (_QWORD *)(v12 + 16 * v19);
          v22 = *(_QWORD *)(v4 + 16 * i + 8);
          *v21 = 0;
          v23 = *v10;
          *v10 = 0;
          *v21 = v23;
          v21[1] = v22;
          v24 = *v10;
          *v10 = 0;
          if (v24)
          {
            if (*(_DWORD *)(v24 + 24) == 2)
            {
              if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v24, v8);
            }
            else
            {
              *(_DWORD *)(v24 + 24) -= 2;
            }
          }
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WebCore::ElementInternals::form@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int *v4;
  void *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v3 = *(_QWORD *)(this + 16);
  if (!v3)
    goto LABEL_17;
  v4 = *(int **)(v3 + 8);
  if (!v4)
    goto LABEL_17;
  this = (*(uint64_t (**)(int *))(*(_QWORD *)v4 + 856))(v4);
  if (!(_DWORD)this)
    goto LABEL_17;
  v6 = v4[6];
  v4[6] = v6 + 2;
  if ((*((_BYTE *)v4 + 23) & 8) != 0)
  {
    v7 = *((_QWORD *)v4 + 9) & 0x3000000000000000;
    if (v7 == 0x2000000000000000 || v7 == 0x3000000000000000 && (v4[7] & 0x100) == 0)
    {
      this = (*(uint64_t (**)(int *))(*(_QWORD *)v4 + 856))(v4);
      if ((this & 1) == 0)
      {
        this = 5670;
        __break(0xC471u);
        return this;
      }
      v8 = *(_QWORD **)((*((_QWORD *)v4 + 9) & 0xFFFFFFFFFFFFLL) + 0x70);
      v6 = v4[6] - 2;
      if (v4[6] == 2)
        goto LABEL_15;
LABEL_8:
      v4[6] = v6;
      goto LABEL_9;
    }
  }
  v8 = 0;
  if (v6)
    goto LABEL_8;
LABEL_15:
  if ((*((_WORD *)v4 + 15) & 0x400) == 0)
    this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
LABEL_9:
  if (!v8)
  {
LABEL_17:
    *(_BYTE *)a2 = 6;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    return this;
  }
  (*(void (**)(_QWORD *))(*v8 + 88))(v8);
  v9 = v8[1];
  if (v9)
  {
    v9 = *(_QWORD *)(v9 + 8);
    if (v9)
      *(_DWORD *)(v9 + 24) += 2;
  }
  *(_QWORD *)a2 = v9;
  *(_DWORD *)(a2 + 16) = 0;
  return (*(uint64_t (**)(_QWORD *))(*v8 + 96))(v8);
}

uint64_t WebCore::ElementInternals::setFormValue@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(result + 16);
  if (!v5
    || (v6 = *(_QWORD *)(v5 + 8)) == 0
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 856))(v6), !(_DWORD)result))
  {
LABEL_16:
    *(_BYTE *)a4 = 6;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  v10 = *(_DWORD *)(v6 + 24);
  *(_DWORD *)(v6 + 24) = v10 + 2;
  if ((*(_BYTE *)(v6 + 23) & 8) == 0
    || (v11 = *(_QWORD *)(v6 + 72) & 0x3000000000000000, v11 != 0x2000000000000000)
    && (v11 != 0x3000000000000000 || (*(_WORD *)(v6 + 28) & 0x100) != 0))
  {
    v12 = 0;
    if (!v10)
      goto LABEL_14;
    goto LABEL_8;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 856))(v6);
  if ((result & 1) != 0)
  {
    v12 = *(_QWORD *)((*(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL) + 0x70);
    v10 = *(_DWORD *)(v6 + 24) - 2;
    if (*(_DWORD *)(v6 + 24) == 2)
    {
LABEL_14:
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v6, v9);
LABEL_9:
      if (v12)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
        WebCore::FormAssociatedCustomElement::setFormValue(v12, a2, a3);
        *(_QWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 96))(v12);
      }
      goto LABEL_16;
    }
LABEL_8:
    *(_DWORD *)(v6 + 24) = v10;
    goto LABEL_9;
  }
  result = 5670;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::ElementInternals::setValidity@<X0>(uint64_t result@<X0>, unsigned __int16 a2@<W1>, WTF::StringImpl **a3@<X2>, const WebCore::Node ***a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)(result + 16);
  if (!v6
    || (v7 = *(_QWORD *)(v6 + 8)) == 0
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 856))(v7), !(_DWORD)result))
  {
LABEL_16:
    *(_BYTE *)a5 = 6;
    *(_QWORD *)(a5 + 8) = 0;
    *(_BYTE *)(a5 + 16) = 1;
    return result;
  }
  v12 = *(_DWORD *)(v7 + 24);
  *(_DWORD *)(v7 + 24) = v12 + 2;
  if ((*(_BYTE *)(v7 + 23) & 8) == 0
    || (v13 = *(_QWORD *)(v7 + 72) & 0x3000000000000000, v13 != 0x2000000000000000)
    && (v13 != 0x3000000000000000 || (*(_WORD *)(v7 + 28) & 0x100) != 0))
  {
    v14 = 0;
    if (!v12)
      goto LABEL_14;
    goto LABEL_8;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 856))(v7);
  if ((result & 1) != 0)
  {
    v14 = *(_QWORD *)((*(_QWORD *)(v7 + 72) & 0xFFFFFFFFFFFFLL) + 0x70);
    v12 = *(_DWORD *)(v7 + 24) - 2;
    if (*(_DWORD *)(v7 + 24) == 2)
    {
LABEL_14:
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v7, v11);
LABEL_9:
      if (v14)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 88))(v14);
        WebCore::FormAssociatedCustomElement::setValidity(v14, (WTF::StringImpl *)a2, a3, a4, a5);
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 96))(v14);
      }
      goto LABEL_16;
    }
LABEL_8:
    *(_DWORD *)(v7 + 24) = v12;
    goto LABEL_9;
  }
  result = 5670;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::ElementInternals::willValidate@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int *v4;
  void *v5;
  int v6;
  uint64_t v7;
  _BYTE *v8;
  char v9;
  int v10;
  char v11;

  v3 = *(_QWORD *)(this + 16);
  if (!v3)
    goto LABEL_18;
  v4 = *(int **)(v3 + 8);
  if (!v4)
    goto LABEL_18;
  this = (*(uint64_t (**)(int *))(*(_QWORD *)v4 + 856))(v4);
  if (!(_DWORD)this)
    goto LABEL_18;
  v6 = v4[6];
  v4[6] = v6 + 2;
  if ((*((_BYTE *)v4 + 23) & 8) != 0)
  {
    v7 = *((_QWORD *)v4 + 9) & 0x3000000000000000;
    if (v7 == 0x2000000000000000 || v7 == 0x3000000000000000 && (v4[7] & 0x100) == 0)
    {
      this = (*(uint64_t (**)(int *))(*(_QWORD *)v4 + 856))(v4);
      if ((this & 1) == 0)
      {
        this = 5670;
        __break(0xC471u);
        return this;
      }
      v8 = *(_BYTE **)((*((_QWORD *)v4 + 9) & 0xFFFFFFFFFFFFLL) + 0x70);
      v6 = v4[6] - 2;
      if (v4[6] == 2)
        goto LABEL_16;
LABEL_8:
      v4[6] = v6;
      goto LABEL_9;
    }
  }
  v8 = 0;
  if (v6)
    goto LABEL_8;
LABEL_16:
  if ((*((_WORD *)v4 + 15) & 0x400) == 0)
    this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
LABEL_9:
  if (!v8)
  {
LABEL_18:
    *(_BYTE *)a2 = 6;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    return this;
  }
  (*(void (**)(_BYTE *))(*(_QWORD *)v8 + 88))(v8);
  v9 = v8[48];
  if ((v9 & 4) == 0 || (v8[50] & 3) == 2)
  {
    v8[48] = v9 | 4;
    v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 336))(v8);
    v9 = v8[48];
    if (((v10 ^ ((v9 & 2) == 0)) & 1) == 0)
    {
      if (v10)
        v11 = 2;
      else
        v11 = 0;
      v9 = v9 & 0xFD | v11;
      v8[48] = v9;
    }
  }
  *(_BYTE *)a2 = (v9 & 2) != 0;
  *(_DWORD *)(a2 + 16) = 0;
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 96))(v8);
}

uint64_t WebCore::ElementInternals::validity@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(this + 16);
  if (!v3
    || (v4 = *(_QWORD *)(v3 + 8)) == 0
    || (this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 856))(v4), !(_DWORD)this))
  {
LABEL_16:
    *(_BYTE *)a2 = 6;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    return this;
  }
  v6 = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v6 + 2;
  if ((*(_BYTE *)(v4 + 23) & 8) == 0
    || (v7 = *(_QWORD *)(v4 + 72) & 0x3000000000000000, v7 != 0x2000000000000000)
    && (v7 != 0x3000000000000000 || (*(_WORD *)(v4 + 28) & 0x100) != 0))
  {
    v8 = 0;
    if (!v6)
      goto LABEL_14;
    goto LABEL_8;
  }
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 856))(v4);
  if ((this & 1) != 0)
  {
    v8 = *(_QWORD *)((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) + 0x70);
    v6 = *(_DWORD *)(v4 + 24) - 2;
    if (*(_DWORD *)(v4 + 24) == 2)
    {
LABEL_14:
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
LABEL_9:
      if (v8)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 88))(v8);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 88))(v8);
        *(_QWORD *)a2 = v8;
        *(_DWORD *)(a2 + 16) = 0;
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
      }
      goto LABEL_16;
    }
LABEL_8:
    *(_DWORD *)(v4 + 24) = v6;
    goto LABEL_9;
  }
  this = 5670;
  __break(0xC471u);
  return this;
}

uint64_t WebCore::ElementInternals::validationMessage@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int *v4;
  void *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _DWORD *v9;

  v3 = *(_QWORD *)(this + 16);
  if (!v3)
    goto LABEL_18;
  v4 = *(int **)(v3 + 8);
  if (!v4)
    goto LABEL_18;
  this = (*(uint64_t (**)(int *))(*(_QWORD *)v4 + 856))(v4);
  if (!(_DWORD)this)
    goto LABEL_18;
  v6 = v4[6];
  v4[6] = v6 + 2;
  if ((*((_BYTE *)v4 + 23) & 8) != 0)
  {
    v7 = *((_QWORD *)v4 + 9) & 0x3000000000000000;
    if (v7 == 0x2000000000000000 || v7 == 0x3000000000000000 && (v4[7] & 0x100) == 0)
    {
      this = (*(uint64_t (**)(int *))(*(_QWORD *)v4 + 856))(v4);
      if ((this & 1) == 0)
      {
        this = 5670;
        __break(0xC471u);
        return this;
      }
      v8 = *(_QWORD **)((*((_QWORD *)v4 + 9) & 0xFFFFFFFFFFFFLL) + 0x70);
      v6 = v4[6] - 2;
      if (v4[6] == 2)
        goto LABEL_16;
LABEL_8:
      v4[6] = v6;
      goto LABEL_9;
    }
  }
  v8 = 0;
  if (v6)
    goto LABEL_8;
LABEL_16:
  if ((*((_WORD *)v4 + 15) & 0x400) == 0)
    this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
LABEL_9:
  if (!v8)
  {
LABEL_18:
    *(_BYTE *)a2 = 6;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    return this;
  }
  (*(void (**)(_QWORD *))(*v8 + 88))(v8);
  v9 = (_DWORD *)v8[4];
  if (v9)
    *v9 += 2;
  *(_QWORD *)a2 = v9;
  *(_DWORD *)(a2 + 16) = 0;
  return (*(uint64_t (**)(_QWORD *))(*v8 + 96))(v8);
}

uint64_t WebCore::ElementInternals::reportValidity@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  WebCore::ValidatedFormListedElement *v8;

  v3 = *(_QWORD *)(this + 16);
  if (!v3
    || (v4 = *(_QWORD *)(v3 + 8)) == 0
    || (this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 856))(v4), !(_DWORD)this))
  {
LABEL_16:
    *(_BYTE *)a2 = 6;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    return this;
  }
  v6 = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v6 + 2;
  if ((*(_BYTE *)(v4 + 23) & 8) == 0
    || (v7 = *(_QWORD *)(v4 + 72) & 0x3000000000000000, v7 != 0x2000000000000000)
    && (v7 != 0x3000000000000000 || (*(_WORD *)(v4 + 28) & 0x100) != 0))
  {
    v8 = 0;
    if (!v6)
      goto LABEL_14;
    goto LABEL_8;
  }
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 856))(v4);
  if ((this & 1) != 0)
  {
    v8 = *(WebCore::ValidatedFormListedElement **)((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) + 0x70);
    v6 = *(_DWORD *)(v4 + 24) - 2;
    if (*(_DWORD *)(v4 + 24) == 2)
    {
LABEL_14:
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
LABEL_9:
      if (v8)
      {
        (*(void (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)v8 + 88))(v8);
        *(_BYTE *)a2 = WebCore::ValidatedFormListedElement::reportValidity(v8);
        *(_DWORD *)(a2 + 16) = 0;
        return (*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)v8 + 96))(v8);
      }
      goto LABEL_16;
    }
LABEL_8:
    *(_DWORD *)(v4 + 24) = v6;
    goto LABEL_9;
  }
  this = 5670;
  __break(0xC471u);
  return this;
}

uint64_t WebCore::ElementInternals::checkValidity@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  _BYTE *v8;

  v3 = *(_QWORD *)(this + 16);
  if (!v3
    || (v4 = *(_QWORD *)(v3 + 8)) == 0
    || (this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 856))(v4), !(_DWORD)this))
  {
LABEL_16:
    *(_BYTE *)a2 = 6;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    return this;
  }
  v6 = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v6 + 2;
  if ((*(_BYTE *)(v4 + 23) & 8) == 0
    || (v7 = *(_QWORD *)(v4 + 72) & 0x3000000000000000, v7 != 0x2000000000000000)
    && (v7 != 0x3000000000000000 || (*(_WORD *)(v4 + 28) & 0x100) != 0))
  {
    v8 = 0;
    if (!v6)
      goto LABEL_14;
    goto LABEL_8;
  }
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 856))(v4);
  if ((this & 1) != 0)
  {
    v8 = *(_BYTE **)((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) + 0x70);
    v6 = *(_DWORD *)(v4 + 24) - 2;
    if (*(_DWORD *)(v4 + 24) == 2)
    {
LABEL_14:
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
LABEL_9:
      if (v8)
      {
        (*(void (**)(_BYTE *))(*(_QWORD *)v8 + 88))(v8);
        *(_BYTE *)a2 = WebCore::ValidatedFormListedElement::checkValidity(v8, 0);
        *(_DWORD *)(a2 + 16) = 0;
        return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 96))(v8);
      }
      goto LABEL_16;
    }
LABEL_8:
    *(_DWORD *)(v4 + 24) = v6;
    goto LABEL_9;
  }
  this = 5670;
  __break(0xC471u);
  return this;
}

uint64_t WebCore::ElementInternals::labels@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = *(_QWORD *)(this + 16);
  if (!v3
    || (v4 = *(_QWORD *)(v3 + 8)) == 0
    || (this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 856))(v4), !(_DWORD)this))
  {
LABEL_16:
    *(_BYTE *)a2 = 6;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    return this;
  }
  v6 = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v6 + 2;
  if ((*(_BYTE *)(v4 + 23) & 8) == 0
    || (v7 = *(_QWORD *)(v4 + 72) & 0x3000000000000000, v7 != 0x2000000000000000)
    && (v7 != 0x3000000000000000 || (*(_WORD *)(v4 + 28) & 0x100) != 0))
  {
    v8 = 0;
    if (!v6)
      goto LABEL_14;
    goto LABEL_8;
  }
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 856))(v4);
  if ((this & 1) != 0)
  {
    v8 = *(_QWORD **)((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) + 0x70);
    v6 = *(_DWORD *)(v4 + 24) - 2;
    if (*(_DWORD *)(v4 + 24) == 2)
    {
LABEL_14:
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
LABEL_9:
      if (v8)
      {
        (*(void (**)(_QWORD *))(*v8 + 88))(v8);
        WebCore::HTMLElement::labels(*(WebCore::HTMLElement **)(v8[7] + 8), (_QWORD *)a2);
        *(_DWORD *)(a2 + 16) = 0;
        return (*(uint64_t (**)(_QWORD *))(*v8 + 96))(v8);
      }
      goto LABEL_16;
    }
LABEL_8:
    *(_DWORD *)(v4 + 24) = v6;
    goto LABEL_9;
  }
  this = 5670;
  __break(0xC471u);
  return this;
}

void WebCore::ElementInternals::setAttributeWithoutSynchronization(WebCore::ElementInternals *this, WebCore::QualifiedName::QualifiedNameImpl **a2, const WTF::AtomString *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  const WebCore::QualifiedName *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  WebCore::AXObjectCache *v17;
  const WTF::AtomString *v18;
  __n128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  _BYTE v27[24];

  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      *(_DWORD *)(v6 + 24) += 2;
  }
  else
  {
    v6 = 0;
  }
  v7 = (unsigned int *)*WebCore::computeValueForAttribute((WebCore *)v6, a2, a3);
  if (v7)
    *v7 += 2;
  v26 = v7;
  WebCore::Element::checkedCustomElementDefaultARIA(v6, &v25);
  v8 = (_DWORD *)v25;
  WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName const&,WTF::AtomString const&>((uint64_t *)(v25 + 8), a2, (_DWORD **)a3, (uint64_t)v27);
  if (v8)
  {
    if (!*v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1959DDC6CLL);
    }
    --*v8;
  }
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8);
    if (*(_BYTE *)(v11 + 3362) || *(_BYTE *)(v11 + 3405))
    {
      while (1)
      {
        v21 = *(_QWORD *)(v11 + 528);
        if (!v21)
          break;
        v22 = *(_QWORD *)(v21 + 8);
        if (!v22)
          break;
        v23 = *(_QWORD *)(v22 + 120);
        if (!v23)
          break;
        v24 = *(_QWORD *)(v23 + 8);
        if (!v24)
          break;
        v11 = *(_QWORD *)(*(_QWORD *)(v24 + 40) + 8);
      }
    }
    else
    {
      v12 = *(_QWORD *)(v11 + 528);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
        {
          v14 = *(_QWORD *)(*(_QWORD *)(v13 + 128) + 8);
          if (v14 && *(_BYTE *)(v14 + 144) == 0)
          {
            v16 = *(_QWORD *)(v14 + 296);
            if (v16)
              v11 = v16;
          }
        }
      }
    }
    v17 = *(WebCore::AXObjectCache **)(v11 + 1488);
    if (v17)
    {
      ++*((_DWORD *)v17 + 2);
      v18 = (const WTF::AtomString *)WebCore::computeValueForAttribute((WebCore *)v6, a2, v10);
      WebCore::AXObjectCache::deferAttributeChangeIfNeeded(v17, (WebCore::Element *)v6, a2, &v26, v18, v19);
      v20 = *((_DWORD *)v17 + 2);
      if (!v20)
      {
        __break(0xC471u);
        JUMPOUT(0x1959DDD58);
      }
      *((_DWORD *)v17 + 2) = v20 - 1;
      v7 = v26;
    }
  }
  v26 = 0;
  if (v7)
  {
    if (*v7 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v7, v9);
    else
      *v7 -= 2;
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v9);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
}

_QWORD *WebCore::computeValueForAttribute(WebCore *this, WebCore::QualifiedName::QualifiedNameImpl **a2, const WebCore::QualifiedName *a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::QualifiedName::QualifiedNameImpl *v8;
  _QWORD *result;
  WebCore::QualifiedName::QualifiedNameImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::ElementInternals *v19;
  const WebCore::QualifiedName *v20;
  _QWORD v21[2];
  _QWORD *v22;

  v4 = *((_QWORD *)this + 13);
  if (!v4)
    goto LABEL_12;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) == 0)
  {
    v6 = v4 + 32;
    LODWORD(v7) = v5 >> 5;
    if ((_DWORD)v7)
      goto LABEL_4;
LABEL_12:
    result = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v6 = *(_QWORD *)(v4 + 40);
  LODWORD(v7) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v7)
    goto LABEL_12;
LABEL_4:
  v8 = *a2;
  v7 = v7;
  result = (_QWORD *)(v6 + 8);
  while (1)
  {
    v10 = (WebCore::QualifiedName::QualifiedNameImpl *)*(result - 1);
    if (v10 == v8 || *((_QWORD *)v10 + 3) == *((_QWORD *)v8 + 3) && *((_QWORD *)v10 + 4) == *((_QWORD *)v8 + 4))
      break;
    result += 2;
    if (!--v7)
    {
      result = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v11 = *((_QWORD *)this + 9);
  if ((v11 & 0x3000000000000000) == 0x2000000000000000
    || (v11 & 0x3000000000000000) == 0x3000000000000000 && (*((_WORD *)this + 14) & 0x100) == 0)
  {
    v12 = v11 & 0xFFFFFFFFFFFFLL;
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 104);
      if (v13)
      {
        v14 = *(_DWORD *)v13;
        v15 = *(_DWORD *)v13 + 1;
        *(_DWORD *)v13 = v15;
        if (*result)
        {
          if (!v15)
            goto LABEL_31;
        }
        else
        {
          v16 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>((uint64_t *)(v13 + 8), a2);
          v17 = *(_QWORD *)(v13 + 8);
          if (v17)
            v17 += 32 * *(unsigned int *)(v17 - 4);
          if (v17 == v16)
          {
            result = (_QWORD *)MEMORY[0x1E0CBF2F8];
          }
          else
          {
            v21[0] = this;
            v21[1] = this;
            v18 = *(unsigned int *)(v16 + 24);
            if ((_DWORD)v18 == -1)
            {
              v19 = (WebCore::ElementInternals *)std::__throw_bad_variant_access[abi:sn180100]();
              return (_QWORD *)WebCore::ElementInternals::attributeWithoutSynchronization(v19, v20);
            }
            v22 = v21;
            result = (_QWORD *)((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore24CustomElementDefaultARIA17valueForAttributeERKNS8_7ElementERKNS8_13QualifiedNameEE3__0JZNKS9_17valueForAttributeESC_SF_E3__1ZNKS9_17valueForAttributeESC_SF_E3__2EEEEEJRKNS0_6__implIJNS6_10AtomStringENS6_7WeakPtrISA_NS8_30WeakPtrImplWithEventTargetDataENS6_12RawPtrTraitsISO_EEEENS6_6VectorISR_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEEEEDcOT_DpOT0____fmatrix[v18])(&v22, v16 + 8);
          }
          if (!*(_DWORD *)v13)
          {
LABEL_31:
            __break(0xC471u);
            JUMPOUT(0x1959DDEF0);
          }
          v14 = *(_DWORD *)v13 - 1;
        }
        *(_DWORD *)v13 = v14;
      }
    }
  }
  return result;
}

uint64_t WebCore::ElementInternals::attributeWithoutSynchronization(WebCore::ElementInternals *this, const WebCore::QualifiedName *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::ElementInternals *v13;
  const WebCore::QualifiedName *v14;
  _QWORD v15[2];
  _QWORD *v16;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = 0;
      *(_DWORD *)(v3 + 24) += 2;
      goto LABEL_4;
    }
  }
  else
  {
    v3 = 0;
  }
  v4 = 1;
LABEL_4:
  v5 = *(_QWORD *)(v3 + 72);
  if ((v5 & 0x3000000000000000) != 0x2000000000000000
    && ((v5 & 0x3000000000000000) != 0x3000000000000000 || (*(_WORD *)(v3 + 28) & 0x100) != 0)
    || (v6 = v5 & 0xFFFFFFFFFFFFLL) == 0
    || (v7 = *(_QWORD *)(v6 + 104)) == 0)
  {
    v11 = MEMORY[0x1E0CBF2F8];
    if ((v4 & 1) != 0)
      return v11;
LABEL_19:
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
    return v11;
  }
  ++*(_DWORD *)v7;
  v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>((uint64_t *)(v7 + 8), (WebCore::QualifiedName::QualifiedNameImpl **)a2);
  v9 = *(_QWORD *)(v7 + 8);
  if (v9)
    v9 += 32 * *(unsigned int *)(v9 - 4);
  if (v9 == v8)
  {
    v11 = MEMORY[0x1E0CBF2F8];
LABEL_17:
    if (!*(_DWORD *)v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1959DE04CLL);
    }
    --*(_DWORD *)v7;
    if ((v4 & 1) != 0)
      return v11;
    goto LABEL_19;
  }
  v15[0] = v3;
  v15[1] = v3;
  v10 = *(unsigned int *)(v8 + 24);
  if ((_DWORD)v10 != -1)
  {
    v16 = v15;
    v11 = ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore24CustomElementDefaultARIA17valueForAttributeERKNS8_7ElementERKNS8_13QualifiedNameEE3__0JZNKS9_17valueForAttributeESC_SF_E3__1ZNKS9_17valueForAttributeESC_SF_E3__2EEEEEJRKNS0_6__implIJNS6_10AtomStringENS6_7WeakPtrISA_NS8_30WeakPtrImplWithEventTargetDataENS6_12RawPtrTraitsISO_EEEENS6_6VectorISR_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEEEEDcOT_DpOT0____fmatrix[v10])(&v16, v8 + 8);
    goto LABEL_17;
  }
  v13 = (WebCore::ElementInternals *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::ElementInternals::getElementAttribute(v13, v14);
}

unsigned int *WebCore::ElementInternals::getElementAttribute@<X0>(unsigned int *this@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  WebCore::ElementInternals *v12;
  const WebCore::QualifiedName *v13;
  WebCore::Element *v14;
  _QWORD v15[4];
  _QWORD *v16;

  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = 0;
      *(_DWORD *)(v5 + 24) += 2;
      goto LABEL_4;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = 1;
LABEL_4:
  v7 = *(_QWORD *)(v5 + 72);
  if (((v7 & 0x3000000000000000) == 0x2000000000000000
     || (v7 & 0x3000000000000000) == 0x3000000000000000 && (*(_WORD *)(v5 + 28) & 0x100) == 0)
    && (v8 = v7 & 0xFFFFFFFFFFFFLL) != 0
    && (v9 = *(_QWORD *)(v8 + 104)) != 0)
  {
    ++*(_DWORD *)v9;
    this = (unsigned int *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>((uint64_t *)(v9 + 8), a2);
    v10 = *(unsigned int **)(v9 + 8);
    if (v10)
      v10 += 8 * *(v10 - 1);
    *a3 = 0;
    if (v10 != this)
    {
      v15[0] = v5;
      v15[1] = a3;
      v15[2] = v5;
      v15[3] = a3;
      v11 = this[6];
      if ((_DWORD)v11 == -1)
      {
        v12 = (WebCore::ElementInternals *)std::__throw_bad_variant_access[abi:sn180100]();
        return (unsigned int *)WebCore::ElementInternals::setElementAttribute(v12, v13, v14);
      }
      v16 = v15;
      this = (unsigned int *)((uint64_t (*)(_QWORD **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore24CustomElementDefaultARIA19elementForAttributeERKNS8_7ElementERKNS8_13QualifiedNameEE3__0JZNKS9_19elementForAttributeESC_SF_E3__1ZNKS9_19elementForAttributeESC_SF_E3__2EEEEEJRKNS0_6__implIJNS6_10AtomStringENS6_7WeakPtrISA_NS8_30WeakPtrImplWithEventTargetDataENS6_12RawPtrTraitsISO_EEEENS6_6VectorISR_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEEEEDcOT_DpOT0____fmatrix[v11])(&v16, this + 2);
    }
    if (!*(_DWORD *)v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1959DE1B0);
    }
    --*(_DWORD *)v9;
  }
  else
  {
    *a3 = 0;
  }
  if ((v6 & 1) == 0)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return this;
}

void WebCore::ElementInternals::setElementAttribute(WebCore::ElementInternals *this, WebCore::QualifiedName::QualifiedNameImpl **a2, WebCore::Element *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  WebCore::CustomElementDefaultARIA *v8;
  WTF::StringImpl *v9;
  const WebCore::QualifiedName *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  WebCore::AXObjectCache *v17;
  const WTF::AtomString *v18;
  __n128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::CustomElementDefaultARIA *v25;
  unsigned int *v26;

  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      *(_DWORD *)(v6 + 24) += 2;
  }
  else
  {
    v6 = 0;
  }
  v7 = (unsigned int *)*WebCore::computeValueForAttribute((WebCore *)v6, a2, a3);
  if (v7)
    *v7 += 2;
  v26 = v7;
  WebCore::Element::checkedCustomElementDefaultARIA(v6, &v25);
  v8 = v25;
  WebCore::CustomElementDefaultARIA::setElementForAttribute(v25, a2, a3);
  if (v8)
  {
    if (!*(_DWORD *)v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1959DE2E0);
    }
    --*(_DWORD *)v8;
  }
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8);
    if (*(_BYTE *)(v11 + 3362) || *(_BYTE *)(v11 + 3405))
    {
      while (1)
      {
        v21 = *(_QWORD *)(v11 + 528);
        if (!v21)
          break;
        v22 = *(_QWORD *)(v21 + 8);
        if (!v22)
          break;
        v23 = *(_QWORD *)(v22 + 120);
        if (!v23)
          break;
        v24 = *(_QWORD *)(v23 + 8);
        if (!v24)
          break;
        v11 = *(_QWORD *)(*(_QWORD *)(v24 + 40) + 8);
      }
    }
    else
    {
      v12 = *(_QWORD *)(v11 + 528);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
        {
          v14 = *(_QWORD *)(*(_QWORD *)(v13 + 128) + 8);
          if (v14 && *(_BYTE *)(v14 + 144) == 0)
          {
            v16 = *(_QWORD *)(v14 + 296);
            if (v16)
              v11 = v16;
          }
        }
      }
    }
    v17 = *(WebCore::AXObjectCache **)(v11 + 1488);
    if (v17)
    {
      ++*((_DWORD *)v17 + 2);
      v18 = (const WTF::AtomString *)WebCore::computeValueForAttribute((WebCore *)v6, a2, v10);
      WebCore::AXObjectCache::deferAttributeChangeIfNeeded(v17, (WebCore::Element *)v6, a2, &v26, v18, v19);
      v20 = *((_DWORD *)v17 + 2);
      if (!v20)
      {
        __break(0xC471u);
        JUMPOUT(0x1959DE3CCLL);
      }
      *((_DWORD *)v17 + 2) = v20 - 1;
      v7 = v26;
    }
  }
  v26 = 0;
  if (v7)
  {
    if (*v7 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v7, v9);
    else
      *v7 -= 2;
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v9);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
}

unsigned int *WebCore::ElementInternals::getElementsArrayAttribute@<X0>(unsigned int *this@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  WebCore::Element *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[6];
  _QWORD *v19;

  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = 0;
      *(_DWORD *)(v5 + 24) += 2;
      goto LABEL_4;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = 1;
LABEL_4:
  v7 = *(_QWORD *)(v5 + 72);
  if ((v7 & 0x3000000000000000) != 0x2000000000000000
    && ((v7 & 0x3000000000000000) != 0x3000000000000000 || (*(_WORD *)(v5 + 28) & 0x100) != 0)
    || (v8 = v7 & 0xFFFFFFFFFFFFLL) == 0
    || (v9 = *(_QWORD *)(v8 + 104)) == 0)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    if ((v6 & 1) != 0)
      return this;
    goto LABEL_19;
  }
  ++*(_DWORD *)v9;
  v16 = 0;
  v17 = 0;
  this = (unsigned int *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>((uint64_t *)(v9 + 8), a2);
  v10 = *(unsigned int **)(v9 + 8);
  if (v10)
    v10 += 8 * *(v10 - 1);
  if (v10 == this)
  {
    v12 = 0;
    v13 = 0;
  }
  else
  {
    v18[0] = v5;
    v18[1] = &v16;
    v18[2] = v5;
    v18[3] = &v16;
    v18[4] = &v16;
    v18[5] = v5;
    v11 = this[6];
    if ((_DWORD)v11 == -1)
    {
      v14 = std::__throw_bad_variant_access[abi:sn180100]();
      return (unsigned int *)WebCore::ElementInternals::setElementsArrayAttribute(v14, v15);
    }
    v19 = v18;
    this = (unsigned int *)((uint64_t (*)(_QWORD **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore24CustomElementDefaultARIA20elementsForAttributeERKNS8_7ElementERKNS8_13QualifiedNameEE3__0JZNKS9_20elementsForAttributeESC_SF_E3__1ZNKS9_20elementsForAttributeESC_SF_E3__2EEEEEJRKNS0_6__implIJNS6_10AtomStringENS6_7WeakPtrISA_NS8_30WeakPtrImplWithEventTargetDataENS6_12RawPtrTraitsISO_EEEENS6_6VectorISR_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEEEEDcOT_DpOT0____fmatrix[v11])(&v19, this + 2);
    v12 = v16;
    v13 = v17;
  }
  *(_QWORD *)a3 = v12;
  *(_QWORD *)(a3 + 8) = v13;
  *(_BYTE *)(a3 + 16) = 1;
  if (!*(_DWORD *)v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1959DE550);
  }
  --*(_DWORD *)v9;
  if ((v6 & 1) == 0)
  {
LABEL_19:
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return this;
}

void WebCore::ElementInternals::setElementsArrayAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, const WebCore::QualifiedName *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  const WebCore::QualifiedName *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  WebCore::AXObjectCache *v17;
  const WTF::AtomString *v18;
  __n128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  unsigned int *v26;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      *(_DWORD *)(v6 + 24) += 2;
  }
  else
  {
    v6 = 0;
  }
  v7 = (unsigned int *)*WebCore::computeValueForAttribute((WebCore *)v6, a2, a3);
  if (v7)
    *v7 += 2;
  v26 = v7;
  WebCore::Element::checkedCustomElementDefaultARIA(v6, &v25);
  v8 = v25;
  WebCore::CustomElementDefaultARIA::setElementsForAttribute((uint64_t)v25, a2, (uint64_t)a3);
  if (v8)
  {
    if (!*v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1959DE680);
    }
    --*v8;
  }
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8);
    if (*(_BYTE *)(v11 + 3362) || *(_BYTE *)(v11 + 3405))
    {
      while (1)
      {
        v21 = *(_QWORD *)(v11 + 528);
        if (!v21)
          break;
        v22 = *(_QWORD *)(v21 + 8);
        if (!v22)
          break;
        v23 = *(_QWORD *)(v22 + 120);
        if (!v23)
          break;
        v24 = *(_QWORD *)(v23 + 8);
        if (!v24)
          break;
        v11 = *(_QWORD *)(*(_QWORD *)(v24 + 40) + 8);
      }
    }
    else
    {
      v12 = *(_QWORD *)(v11 + 528);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
        {
          v14 = *(_QWORD *)(*(_QWORD *)(v13 + 128) + 8);
          if (v14 && *(_BYTE *)(v14 + 144) == 0)
          {
            v16 = *(_QWORD *)(v14 + 296);
            if (v16)
              v11 = v16;
          }
        }
      }
    }
    v17 = *(WebCore::AXObjectCache **)(v11 + 1488);
    if (v17)
    {
      ++*((_DWORD *)v17 + 2);
      v18 = (const WTF::AtomString *)WebCore::computeValueForAttribute((WebCore *)v6, a2, v10);
      WebCore::AXObjectCache::deferAttributeChangeIfNeeded(v17, (WebCore::Element *)v6, a2, &v26, v18, v19);
      v20 = *((_DWORD *)v17 + 2);
      if (!v20)
      {
        __break(0xC471u);
        JUMPOUT(0x1959DE76CLL);
      }
      *((_DWORD *)v17 + 2) = v20 - 1;
      v7 = v26;
    }
  }
  v26 = 0;
  if (v7)
  {
    if (*v7 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v7, v9);
    else
      *v7 -= 2;
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v9);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
}

uint64_t WebCore::ErrorEvent::ErrorEvent(uint64_t a1, _QWORD *a2, unsigned __int8 *a3, int a4)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  _QWORD *Allocator;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;

  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  v9 = *a3;
  v10 = a3[1];
  v11 = a3[2];
  *(_QWORD *)(a1 + 8) = 0;
  if (a4)
    v12 = 1966592;
  else
    v12 = 1966080;
  v13 = v12 | (2 * v9) | (4 * v10) | (8 * v11) | (*a2 != 0) | *(_DWORD *)(a1 + 20) & 0xFFC00000;
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = v13;
  v14 = (_DWORD *)*a2;
  if (*a2)
  {
    *v14 += 2;
    v13 = *(_DWORD *)(a1 + 20);
  }
  *(_QWORD *)(a1 + 24) = v14;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 20) = v13 | 0x4000;
  *(_QWORD *)a1 = off_1E33A4A80;
  v15 = (_DWORD *)*((_QWORD *)a3 + 1);
  if (v15)
    *v15 += 2;
  *(_QWORD *)(a1 + 72) = v15;
  v16 = (_DWORD *)*((_QWORD *)a3 + 2);
  if (v16)
    *v16 += 2;
  *(_QWORD *)(a1 + 80) = v16;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a3 + 3);
  v17 = *((_QWORD *)a3 + 4);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if ((v17 & 0xFFFE000000000002) != 0)
  {
    *(_QWORD *)(a1 + 96) = v17;
  }
  else
  {
    if (v17)
    {
      if ((v17 & 8) != 0)
        v21 = (v17 - 112) | 1;
      else
        v21 = v17 & 0xFFFFFFFFFFFFC000;
      if ((v21 & 1) != 0)
        v22 = v21 + 47;
      else
        v22 = *(_QWORD *)v21 + 32;
      Allocator = *(_QWORD **)(v22 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v22 + 16) = *Allocator;
      *Allocator = v17;
      Allocator[1] = 0;
      Allocator[2] = 0;
    }
    else
    {
      Allocator = 0;
    }
    __dmb(0xAu);
    v19 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = Allocator;
    if (v19)
      *(_QWORD *)(v19 + 8) = 3;
  }
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  return a1;
}

uint64_t WebCore::Event::Event(uint64_t a1, char a2, _QWORD *a3, int a4, int a5, int a6)
{
  uint64_t v12;
  _BOOL4 v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  _DWORD *v19;

  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  *(_QWORD *)a1 = off_1E33A4B48;
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *a3 != 0;
  if (a4)
    v14 = 2;
  else
    v14 = 0;
  if (a5)
    v15 = 4;
  else
    v15 = 0;
  v16 = *(_DWORD *)(a1 + 20) & 0xFFC00000;
  v17 = v14 & 0xFFC07FFF | ((a2 & 0x7F) << 15);
  if (a6)
    v18 = 8;
  else
    v18 = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = v17 | v15 | v18 | v16 | v13 | 0x200;
  v19 = (_DWORD *)*a3;
  if (*a3)
    *v19 += 2;
  *(_QWORD *)(a1 + 24) = v19;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 64) = 0;
  return a1;
}

uint64_t WebCore::ErrorEvent::error(WebCore::ErrorEvent *this, JSC::JSGlobalObject *a2)
{
  JSC::JSCell *v4;
  uint64_t v5;
  unsigned int *v7;
  void *v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  unsigned int *v12;

  v4 = (JSC::JSCell *)*((_QWORD *)this + 12);
  if (!v4)
  {
    v5 = *((_QWORD *)this + 13);
    if (!v5)
      return 2;
    v4 = *(JSC::JSCell **)v5;
    if (!*(_QWORD *)v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      return 2;
  }
  if (((unint64_t)v4 & 0xFFFE000000000002) == 0
    && *((unsigned __int8 *)v4 + 5) >= 0x17u
    && *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)JSC::JSCell::getObject(v4) & 0xFFFFFFFE) + 0x28) + 3320) != *((_QWORD *)a2 + 415))
  {
    WebCore::ErrorEvent::trySerializeError((uint64_t *)this, a2, &v12);
    v7 = v12;
    if (!v12)
      return 2;
    v4 = (JSC::JSCell *)WebCore::SerializedScriptValue::deserialize((uint64_t)v12, a2, a2, 1, 0);
    v12 = 0;
    do
    {
      v9 = __ldaxr(v7);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v7));
    if (!v10)
    {
      atomic_store(1u, v7);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v7 + 2), v8);
      WTF::fastFree((WTF *)v7, v11);
    }
  }
  return (uint64_t)v4;
}

uint64_t *WebCore::ErrorEvent::trySerializeError@<X0>(uint64_t *this@<X0>, JSC::JSGlobalObject *a2@<X1>, unsigned int **a3@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD v18[2];
  int v19;
  WTF *v20;
  uint64_t v21;

  v4 = (unsigned int *)this[14];
  if (v4)
  {
    do
LABEL_2:
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    goto LABEL_6;
  }
  v6 = this;
  if (*((_BYTE *)this + 120))
  {
    v4 = 0;
    goto LABEL_6;
  }
  v7 = this[12];
  if (!v7)
  {
    v8 = this[13];
    if (v8 && (v7 = *(_QWORD *)v8) != 0)
    {
      if ((*(_BYTE *)(v8 + 8) & 3) != 0)
        v7 = 10;
    }
    else
    {
      v7 = 10;
    }
  }
  v20 = 0;
  v21 = 0;
  v17[0] = 0;
  v17[1] = 0;
  WebCore::SerializedScriptValue::create(a2, v7, (uint64_t)v17, (uint64_t)&v20, 0, 0, 0, (uint64_t)v18);
  if (!v19)
  {
    v10 = (unsigned int *)v18[0];
    v18[0] = 0;
LABEL_14:
    ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21SerializedScriptValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v19])(v17, v18);
    v4 = v10;
    goto LABEL_15;
  }
  v10 = 0;
  v4 = 0;
  if (v19 != -1)
    goto LABEL_14;
LABEL_15:
  this = (uint64_t *)v20;
  if (!HIDWORD(v21))
  {
    if (!v20)
      goto LABEL_17;
    goto LABEL_30;
  }
  v16 = 8 * HIDWORD(v21);
  do
  {
    this = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(this, v9)+ 1;
    v16 -= 8;
  }
  while (v16);
  this = (uint64_t *)v20;
  if (v20)
  {
LABEL_30:
    v20 = 0;
    LODWORD(v21) = 0;
    this = (uint64_t *)WTF::fastFree((WTF *)this, v9);
  }
LABEL_17:
  v11 = (unsigned int *)v6[14];
  v6[14] = (uint64_t)v4;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      v14 = (WTF *)v11;
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v11 + 2), v9);
      this = (uint64_t *)WTF::fastFree(v14, v15);
    }
    v4 = (unsigned int *)v6[14];
  }
  *((_BYTE *)v6 + 120) = 1;
  if (v4)
    goto LABEL_2;
LABEL_6:
  *a3 = v4;
  return this;
}

uint64_t WebCore::ErrorEvent::isErrorEvent(WebCore::ErrorEvent *this)
{
  return 1;
}

uint64_t WebCore::Event::Event(uint64_t result, char a2, _QWORD *a3, int a4, int a5, int a6, int a7, double a8)
{
  _BOOL4 v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  _DWORD *v15;

  *(_QWORD *)result = off_1E33A4B48;
  *(_QWORD *)(result + 8) = 0;
  v8 = *a3 != 0;
  if (a4)
    v9 = 2;
  else
    v9 = 0;
  if (a5)
    v10 = 4;
  else
    v10 = 0;
  if (a6)
    v11 = 8;
  else
    v11 = 0;
  v12 = *(_DWORD *)(result + 20) & 0xFFC00000;
  v13 = v9 & 0xFFC07FFF | ((a2 & 0x7F) << 15);
  if (a7)
    v14 = 512;
  else
    v14 = 0;
  *(_DWORD *)(result + 16) = 1;
  *(_DWORD *)(result + 20) = v13 | v10 | v11 | v14 | v12 | v8;
  v15 = (_DWORD *)*a3;
  if (*a3)
    *v15 += 2;
  *(_QWORD *)(result + 24) = v15;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(double *)(result + 56) = a8;
  *(_QWORD *)(result + 64) = 0;
  return result;
}

uint64_t WebCore::Event::createForBindings@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  uint64_t result;
  unsigned int v5;
  uint64_t v6;

  v3 = bmalloc::api::isoAllocate();
  result = WTF::MonotonicTime::now((WTF::MonotonicTime *)v3);
  *(_QWORD *)v3 = off_1E33A4B48;
  *(_QWORD *)(v3 + 8) = 0;
  v5 = *(_DWORD *)(v3 + 20) & 0xFFC00000 | 0x1E8000;
  *(_DWORD *)(v3 + 16) = 1;
  *(_DWORD *)(v3 + 20) = v5;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_QWORD *)(v3 + 56) = v6;
  *(_QWORD *)(v3 + 64) = 0;
  *a1 = v3;
  return result;
}

uint64_t WebCore::Event::initEvent(uint64_t this, const WTF::AtomString *a2, int a3, int a4)
{
  int v4;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  int v12;
  int v13;

  v4 = *(_DWORD *)(this + 20);
  if ((v4 & 0x3000) == 0)
  {
    v8 = this;
    *(_DWORD *)(this + 20) = v4 & 0xFFFFFD8E | 1;
    v9 = *(_QWORD *)(this + 48);
    *(_QWORD *)(v8 + 48) = 0;
    if (v9)
    {
      if ((*(_BYTE *)(v9 + 22) & 2) != 0)
      {
        if (*(_DWORD *)(v9 + 24) == 2)
        {
          if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
        }
        else
        {
          *(_DWORD *)(v9 + 24) -= 2;
        }
      }
      else
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
      }
    }
    v10 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v10 += 2;
    v11 = *(WTF::StringImpl **)(v8 + 24);
    *(_QWORD *)(v8 + 24) = v10;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, a2);
      else
        *(_DWORD *)v11 -= 2;
    }
    if (a3)
      v12 = 2;
    else
      v12 = 0;
    if (a4)
      v13 = 4;
    else
      v13 = 0;
    *(_DWORD *)(v8 + 20) = v13 | v12 | *(_DWORD *)(v8 + 20) & 0xFFFFFFF9;
    this = *(_QWORD *)(v8 + 64);
    *(_QWORD *)(v8 + 64) = 0;
    if (this)
    {
      if (*(_DWORD *)(this + 16) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      else
        --*(_DWORD *)(this + 16);
    }
  }
  return this;
}

unsigned int *WebCore::Event::setTarget(unsigned int *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;

  v2 = *a2;
  if (*((_QWORD *)result + 6) != *a2)
  {
    v3 = result;
    *a2 = 0;
    result = (unsigned int *)*((_QWORD *)result + 6);
    *((_QWORD *)v3 + 6) = v2;
    if (result)
    {
      if ((*((_BYTE *)result + 22) & 2) != 0)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
        }
        else
        {
          result[6] -= 2;
        }
      }
      else
      {
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 96))(result);
      }
      v2 = *((_QWORD *)v3 + 6);
    }
    if (v2)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v3 + 176))(v3);
  }
  return result;
}

double WebCore::Event::timeStampForBindings(WebCore::Event *this, WebCore::ScriptExecutionContext *a2)
{
  void *v4;
  WebCore::LocalDOMWindow *v5;
  uint64_t v6;
  double v7;
  double v8;
  bmalloc::api *v10;
  void *v11;

  if (((*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 64))(a2) & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 74);
    if (v6)
    {
      ++*(_DWORD *)(v6 + 16);
      goto LABEL_6;
    }
    return 0.0;
  }
  if (*((_BYTE *)a2 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1959DF074);
  }
  v5 = (WebCore::LocalDOMWindow *)*((_QWORD *)a2 + 63);
  if (!v5)
    return 0.0;
  ++*((_DWORD *)v5 + 6);
  v6 = WebCore::LocalDOMWindow::performance(v5);
  ++*(_DWORD *)(v6 + 16);
  if (*((_DWORD *)v5 + 6) == 1)
    (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v5 + 72))(v5);
  else
    --*((_DWORD *)v5 + 6);
LABEL_6:
  v7 = *(double *)&WebCore::timePrecision
     * floor((*((double *)this + 7) - *(double *)(v6 + 168)) / *(double *)&WebCore::timePrecision)
     * 1000.0;
  if (v7 >= 0.0)
    v8 = v7;
  else
    v8 = 0.0;
  if (*(_DWORD *)(v6 + 16) == 1)
  {
    WebCore::Performance::~Performance((WebCore::Performance *)v6, v4);
    bmalloc::api::isoDeallocate(v10, v11);
  }
  else
  {
    --*(_DWORD *)(v6 + 16);
  }
  return v8;
}

WebCore::Performance **WTF::RefPtr<WebCore::Performance,WTF::RawPtrTraits<WebCore::Performance>,WTF::DefaultRefDerefTraits<WebCore::Performance>>::operator=(WebCore::Performance **a1, WebCore::Performance *a2)
{
  WebCore::Performance *v3;
  bmalloc::api *v5;
  void *v6;

  if (a2)
    ++*((_DWORD *)a2 + 4);
  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    if (*((_DWORD *)v3 + 4) == 1)
    {
      WebCore::Performance::~Performance(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 4);
    }
  }
  return a1;
}

char *WebCore::Event::debugDescription@<X0>(WebCore::Event *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  char *result;
  _OWORD *v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _WORD *v21;
  uint64_t v22;
  _BYTE *v23;
  size_t v24;
  uint64_t v25;
  _BYTE *v26;
  char *v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  char *v31;
  __int128 v32;
  char *v33;
  int8x16_t v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  char *v38;
  char *v39;
  __int16 v40;
  _WORD *v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  int8x16_t v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  char *v50;
  char *v51;
  __int16 v52;
  char *v53;
  char *v54;
  __int128 v55;
  int8x16_t v56;
  __int128 v57;
  __int128 v58;
  char *v59;
  char *v60;
  char *v61;
  __int16 v62;
  char *v63;
  int8x16_t *v64;
  char *v65;
  char *v66;
  __int128 v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  char *v71;
  char *v72;
  char *v73;
  __int16 v74;
  uint64_t v75;
  unsigned __int128 *v76;
  unsigned __int128 *v77;
  unsigned __int128 v78;
  char v79;
  size_t v80;
  size_t v81;
  uint64_t v83;
  _DWORD __n[3];
  int8x16x2_t v85;
  int8x16x2_t v86;
  int8x16x2_t v87;
  int8x16x2_t v88;
  int8x16x2_t v89;
  int8x16x2_t v90;
  int8x16x2_t v91;
  int8x16x2_t v92;
  int8x16x2_t v93;
  int8x16x2_t v94;
  int8x16x2_t v95;
  int8x16x2_t v96;

  *(_QWORD *)&__n[1] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 3);
  if (v2)
    *(_DWORD *)v2 += 2;
  v3 = *((_DWORD *)this + 5);
  if ((v3 & 2) != 0)
    v4 = " bubbles ";
  else
    v4 = " ";
  if ((v3 & 2) != 0)
    v5 = 10;
  else
    v5 = 2;
  if ((v3 & 4) != 0)
    v6 = "cancelable ";
  else
    v6 = " ";
  if ((v3 & 4) != 0)
    v7 = 12;
  else
    v7 = 2;
  result = (char *)WTF::Internal::appendHex();
  __n[0] = (_DWORD)v9;
  v80 = v5 - 1;
  if ((unint64_t)(v5 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1959DF6C0);
  }
  v81 = v7 - 1;
  if ((unint64_t)(v7 - 1) >> 31)
  {
    __break(0xC471u);
LABEL_110:
    JUMPOUT(0x1959DF364);
  }
  if (v2)
  {
    v10 = *(_DWORD *)(v2 + 4);
    if ((v9 & 0x80000000) != 0)
      goto LABEL_58;
  }
  else
  {
    v10 = 0;
    if ((v9 & 0x80000000) != 0)
      goto LABEL_58;
  }
  v11 = (_DWORD)v9 + 2;
  if (__OFADD__((_DWORD)v9, 2))
    goto LABEL_58;
  v12 = __OFADD__((_DWORD)v81, v11);
  v13 = v81 + v11;
  if (v12)
    goto LABEL_58;
  v12 = __OFADD__((_DWORD)v80, v13);
  v14 = v80 + v13;
  if (v12)
    goto LABEL_58;
  v12 = __OFADD__(v14, 1);
  v15 = v14 + 1;
  if (v12)
    goto LABEL_58;
  v12 = __OFADD__(v15, 7);
  v16 = v15 + 7;
  v17 = v12;
  if (v10 < 0)
    goto LABEL_58;
  if (v17)
    goto LABEL_58;
  v18 = (v10 + v16);
  if (__OFADD__(v10, v16))
    goto LABEL_58;
  v19 = (v3 >> 12) & 3;
  if (!v2 || (*(_BYTE *)(v2 + 16) & 4) != 0)
  {
    if ((_DWORD)v18)
    {
      if ((v18 & 0x80000000) != 0)
        goto LABEL_58;
      WTF::tryFastCompactMalloc((WTF *)(v18 + 20));
      v20 = v83;
      if (!v83)
        goto LABEL_58;
      v23 = (_BYTE *)(v83 + 20);
      *(_DWORD *)v83 = 2;
      *(_DWORD *)(v83 + 4) = v18;
      *(_QWORD *)(v83 + 8) = v83 + 20;
      *(_DWORD *)(v83 + 16) = 4;
      if (v2)
      {
        v9 = *(_OWORD **)(v2 + 8);
        v24 = *(unsigned int *)(v2 + 4);
        if ((*(_BYTE *)(v2 + 16) & 4) != 0)
        {
          if ((_DWORD)v24)
          {
            if ((_DWORD)v24 == 1)
              *v23 = *(_BYTE *)v9;
            else
              memcpy((void *)(v83 + 20), v9, v24);
          }
        }
        else
        {
          if (v24 < 0x10)
          {
            v76 = (unsigned __int128 *)(v83 + 20);
          }
          else
          {
            v76 = (unsigned __int128 *)&v23[v24 & 0xFFFFFFF0];
            v77 = (unsigned __int128 *)(v83 + 20);
            do
            {
              v78 = (unsigned __int128)vld2q_s8((const char *)v9);
              v9 += 2;
              *v77++ = v78;
            }
            while (v77 != v76);
          }
          while (v76 != (unsigned __int128 *)&v23[v24])
          {
            v79 = *(_BYTE *)v9;
            v9 = (_OWORD *)((char *)v9 + 2);
            *(_BYTE *)v76 = v79;
            v76 = (unsigned __int128 *)((char *)v76 + 1);
          }
        }
        v25 = *(unsigned int *)(v2 + 4);
      }
      else
      {
        v25 = 0;
      }
      v26 = &v23[v25];
      *(_DWORD *)(v26 + 3) = 543519585;
      *(_DWORD *)v26 = 1634234400;
      v26[7] = v19 | 0x30;
      v27 = v26 + 8;
      if ((_DWORD)v80)
      {
        if ((_DWORD)v80 == 1)
          *v27 = *v4;
        else
          memcpy(v26 + 8, v4, v80);
      }
      v28 = &v27[v80];
      if ((_DWORD)v81)
      {
        if ((_DWORD)v81 == 1)
          *v28 = *v6;
        else
          memcpy(&v27[v80], v6, v81);
      }
      *(_WORD *)&v28[v81] = 30768;
      result = &v28[v81 + 2];
      if (__n[0])
      {
        v9 = (_OWORD *)((char *)__n - __n[0]);
        v29 = a2;
        if (__n[0] == 1)
          *result = *(_BYTE *)v9;
        else
          result = (char *)memcpy(result, v9, __n[0]);
        goto LABEL_90;
      }
    }
    else
    {
      v20 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    v29 = a2;
    goto LABEL_90;
  }
  if ((_DWORD)v18)
  {
    if (v18 <= 0x7FFFFFEF)
    {
      result = (char *)WTF::tryFastCompactMalloc((WTF *)(2 * v18 + 20));
      v20 = v83;
      if (v83)
      {
        v21 = (_WORD *)(v83 + 20);
        *(_DWORD *)v83 = 2;
        *(_DWORD *)(v83 + 4) = v18;
        *(_QWORD *)(v83 + 8) = v83 + 20;
        *(_DWORD *)(v83 + 16) = 0;
        v9 = *(_OWORD **)(v2 + 8);
        v22 = *(unsigned int *)(v2 + 4);
        if ((*(_BYTE *)(v2 + 16) & 4) != 0)
        {
          v30 = (char *)&v21[v22];
          if (v22 >= 0x40)
          {
            v31 = (char *)&v21[v22 & 0xFFFFFFC0];
            v32 = 0uLL;
            v33 = (char *)(v83 + 20);
            do
            {
              v85.val[0] = (int8x16_t)*v9;
              v34 = *((int8x16_t *)v9 + 1);
              v89.val[0] = (int8x16_t)v9[2];
              v35 = v9[3];
              v9 += 4;
              v36 = v35;
              v89.val[1] = 0uLL;
              v93.val[0] = v34;
              v85.val[1] = 0uLL;
              v37 = v33;
              vst2q_s8(v37, v85);
              v37 += 32;
              v93.val[1] = 0uLL;
              vst2q_s8(v37, v93);
              v38 = v33 + 64;
              vst2q_s8(v38, v89);
              v39 = v33 + 96;
              vst2q_s8(v39, *(int8x16x2_t *)(&v32 - 1));
              v33 += 128;
            }
            while (v33 != v31);
          }
          else
          {
            v31 = (char *)(v83 + 20);
          }
          while (v31 != v30)
          {
            v40 = *(unsigned __int8 *)v9;
            v9 = (_OWORD *)((char *)v9 + 1);
            *(_WORD *)v31 = v40;
            v31 += 2;
          }
        }
        else if ((_DWORD)v22 == 1)
        {
          *v21 = *(_WORD *)v9;
        }
        else if ((_DWORD)v22)
        {
          result = (char *)memcpy((void *)(v83 + 20), v9, 2 * v22);
        }
        v41 = &v21[*(unsigned int *)(v2 + 4)];
        *(_QWORD *)v41 = 0x61006800700020;
        *((_DWORD *)v41 + 2) = 6619251;
        v41[6] = 32;
        v41[7] = v19 | 0x30;
        v42 = (char *)(v41 + 8);
        v43 = &v42[2 * v80];
        if ((v80 & 0x7FFFFFC0) != 0)
        {
          v44 = &v42[2 * (v80 & 0x7FFFFFC0)];
          v45 = 0uLL;
          do
          {
            v86.val[0] = *(int8x16_t *)v4;
            v46 = *((int8x16_t *)v4 + 1);
            v90.val[0] = (int8x16_t)*((_OWORD *)v4 + 2);
            v47 = *((_OWORD *)v4 + 3);
            v4 += 64;
            v48 = v47;
            v90.val[1] = 0uLL;
            v94.val[0] = v46;
            v86.val[1] = 0uLL;
            v49 = v42;
            vst2q_s8(v49, v86);
            v49 += 32;
            v94.val[1] = 0uLL;
            vst2q_s8(v49, v94);
            v50 = v42 + 64;
            vst2q_s8(v50, v90);
            v51 = v42 + 96;
            vst2q_s8(v51, *(int8x16x2_t *)(&v45 - 1));
            v42 += 128;
          }
          while (v42 != v44);
          v42 = v44;
        }
        while (v42 != v43)
        {
          v52 = *(unsigned __int8 *)v4++;
          *(_WORD *)v42 = v52;
          v42 += 2;
        }
        v53 = &v43[2 * v81];
        if ((v81 & 0x7FFFFFC0) != 0)
        {
          v54 = &v43[2 * (v81 & 0x7FFFFFC0)];
          v55 = 0uLL;
          v29 = a2;
          do
          {
            v87.val[0] = *(int8x16_t *)v6;
            v56 = *((int8x16_t *)v6 + 1);
            v91.val[0] = (int8x16_t)*((_OWORD *)v6 + 2);
            v57 = *((_OWORD *)v6 + 3);
            v6 += 64;
            v58 = v57;
            v91.val[1] = 0uLL;
            v95.val[0] = v56;
            v87.val[1] = 0uLL;
            v59 = v43;
            vst2q_s8(v59, v87);
            v59 += 32;
            v95.val[1] = 0uLL;
            vst2q_s8(v59, v95);
            v60 = v43 + 64;
            vst2q_s8(v60, v91);
            v61 = v43 + 96;
            vst2q_s8(v61, *(int8x16x2_t *)(&v55 - 1));
            v43 += 128;
          }
          while (v43 != v54);
          v43 = v54;
        }
        else
        {
          v29 = a2;
        }
        while (v43 != v53)
        {
          v62 = *(unsigned __int8 *)v6++;
          *(_WORD *)v43 = v62;
          v43 += 2;
        }
        *(_DWORD *)v53 = 7864368;
        v63 = v53 + 4;
        v64 = (int8x16_t *)((char *)__n - __n[0]);
        v65 = &v63[2 * __n[0]];
        if (__n[0] >= 0x40u)
        {
          v66 = &v63[2 * (__n[0] & 0xFFFFFFC0)];
          v67 = 0uLL;
          do
          {
            v88.val[0] = *v64;
            v68 = v64[1];
            v92.val[0] = v64[2];
            v69 = v64[3];
            v64 += 4;
            v70 = v69;
            v92.val[1] = 0uLL;
            v96.val[0] = v68;
            v88.val[1] = 0uLL;
            v71 = v63;
            vst2q_s8(v71, v88);
            v71 += 32;
            v96.val[1] = 0uLL;
            vst2q_s8(v71, v96);
            v72 = v63 + 64;
            vst2q_s8(v72, v92);
            v73 = v63 + 96;
            vst2q_s8(v73, *(int8x16x2_t *)(&v67 - 1));
            v63 += 128;
          }
          while (v63 != v66);
          v63 = v66;
        }
        while (v63 != v65)
        {
          v74 = v64->u8[0];
          v64 = (int8x16_t *)((char *)v64 + 1);
          *(_WORD *)v63 = v74;
          v63 += 2;
        }
LABEL_90:
        *v29 = v20;
        if (!v2)
          return result;
        goto LABEL_91;
      }
    }
LABEL_58:
    *a2 = 0;
    __break(0xC471u);
    goto LABEL_110;
  }
  v75 = MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
  *a2 = v75;
LABEL_91:
  if (*(_DWORD *)v2 == 2)
    return (char *)WTF::StringImpl::destroy((WTF::StringImpl *)v2, (WTF::StringImpl *)v9);
  *(_DWORD *)v2 -= 2;
  return result;
}

WebCore::Node *WebCore::resetAfterDispatchInShadowTree(WebCore *this, WebCore::Event *a2)
{
  uint64_t v3;
  WebCore::Node *result;
  WebCore::Node *v5;

  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 6) = 0;
    if ((*(_BYTE *)(v3 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v3);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t, WebCore::Event *))(*(_QWORD *)v3 + 96))(v3, a2);
    }
    if (*((_QWORD *)this + 6))
      (*(void (**)(WebCore *, WebCore::Event *))(*(_QWORD *)this + 176))(this, a2);
  }
  v5 = 0;
  (*(void (**)(WebCore *, WebCore::Node **))(*(_QWORD *)this + 160))(this, &v5);
  result = v5;
  v5 = 0;
  if (result)
  {
    if ((*((_BYTE *)result + 22) & 2) != 0)
    {
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return (WebCore::Node *)WebCore::Node::removedLastRef(result);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
    }
    else
    {
      return (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)result + 96))(result);
    }
  }
  return result;
}

WTF *WebCore::EventDispatcher::dispatchEvent(unsigned int *a1, WebCore::Event *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;
  void *v11;
  void *v12;
  WTF *v13;
  WTF *result;
  WTF *v15;
  WTF *v16;
  int v17;
  unsigned int v18;
  uint64_t v19;

  WebCore::EventPath::EventPath((uint64_t)&v15, a1);
  v5 = **(_QWORD **)a1;
  if (v5)
  {
    if ((*(_BYTE *)(v5 + 22) & 2) != 0)
      *(_DWORD *)(v5 + 24) += 2;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5);
    v7 = (_QWORD *)((char *)a2 + 48);
    v6 = *((_QWORD *)a2 + 6);
    if (v6 == v5)
    {
      if ((*(_BYTE *)(v5 + 22) & 2) != 0)
      {
        if (*(_DWORD *)(v5 + 24) == 2)
        {
          if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v5, v4);
        }
        else
        {
          *(_DWORD *)(v5 + 24) -= 2;
        }
      }
      else
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
      }
      goto LABEL_8;
    }
    *v7 = v5;
    if (!v6)
    {
LABEL_28:
      (*(void (**)(WebCore::Event *))(*(_QWORD *)a2 + 176))(a2);
      goto LABEL_8;
    }
  }
  else
  {
    v7 = (_QWORD *)((char *)a2 + 48);
    v6 = *((_QWORD *)a2 + 6);
    if (!v6)
      goto LABEL_8;
    *v7 = 0;
  }
  if ((*(_BYTE *)(v6 + 22) & 2) != 0)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v4);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
  }
  if (*v7)
    goto LABEL_28;
LABEL_8:
  v8 = v15;
  if (v15)
    goto LABEL_12;
  v8 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v8 = 1;
  *((_QWORD *)v8 + 1) = &v15;
  v9 = v15;
  v15 = v8;
  if (!v9)
    goto LABEL_12;
  if (*(_DWORD *)v9 != 1)
  {
    --*(_DWORD *)v9;
LABEL_12:
    ++*(_DWORD *)v8;
    goto LABEL_13;
  }
  WTF::fastFree(v9, v4);
  v8 = v15;
  if (v15)
    goto LABEL_12;
LABEL_13:
  v10 = (WTF *)*((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      WTF::fastFree(v10, v4);
    else
      --*(_DWORD *)v10;
  }
  *((_DWORD *)a2 + 5) &= ~0x80u;
  WebCore::dispatchEventInDOM((uint64_t)a2, (uint64_t)&v15);
  WebCore::Event::resetAfterDispatch(a2, v11);
  if (v18)
    WTF::VectorDestructor<true,WebCore::EventContext>::destruct((uint64_t)v16, (WTF *)((char *)v16 + 64 * (unint64_t)v18));
  v13 = v16;
  if (&v19 != (uint64_t *)v16 && v16)
  {
    v16 = 0;
    v17 = 0;
    WTF::fastFree(v13, v12);
  }
  result = v15;
  if (v15)
  {
    *((_QWORD *)v15 + 1) = 0;
    v15 = 0;
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v12);
    else
      --*(_DWORD *)result;
  }
  return result;
}

unsigned __int8 *WebCore::EventListenerMap::clear(unsigned __int8 *this, void *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v2 = this;
  v3 = this + 16;
  if (__ldaxr(this + 16))
  {
    __clrex();
LABEL_3:
    this = (unsigned __int8 *)MEMORY[0x19AEA534C](this + 16);
    goto LABEL_4;
  }
  if (__stxr(1u, v3))
    goto LABEL_3;
LABEL_4:
  v5 = *((unsigned int *)v2 + 3);
  if ((_DWORD)v5)
  {
    v6 = *(unsigned __int8 **)v2;
    v7 = *(_QWORD *)v2 + 32 * v5;
    do
    {
      v8 = *((unsigned int *)v6 + 5);
      if ((_DWORD)v8)
      {
        v9 = (uint64_t *)*((_QWORD *)v6 + 1);
        v10 = 8 * v8;
        do
        {
          v11 = *v9++;
          *(_BYTE *)(v11 + 4) |= 8u;
          v10 -= 8;
        }
        while (v10);
      }
      v6 += 32;
    }
    while (v6 != (unsigned __int8 *)v7);
  }
  if (*((_DWORD *)v2 + 2))
  {
    v12 = *((unsigned int *)v2 + 3);
    this = *(unsigned __int8 **)v2;
    if ((_DWORD)v12)
    {
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct((WTF::StringImpl *)this, (WTF::StringImpl *)&this[32 * v12]);
      *((_DWORD *)v2 + 3) = 0;
      this = *(unsigned __int8 **)v2;
    }
    if (this)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      this = (unsigned __int8 *)WTF::fastFree((WTF *)this, a2);
    }
  }
  v13 = __ldxr(v3);
  if (v13 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  if (__stlxr(0, v3))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return this;
}

uint64_t WebCore::EventListenerMap::replace(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  char v22;
  uint64_t v23;
  WTF *v24;
  int v25;
  _DWORD *v26;

  v9 = result;
  v10 = (unsigned __int8 *)(result + 16);
  if (__ldaxr((unsigned __int8 *)(result + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 16);
LABEL_5:
  v12 = *(unsigned int *)(v9 + 12);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD *)v9 + 8;
    v14 = 32 * v12;
    while (*(_QWORD *)(v13 - 8) != *a2)
    {
      v13 += 32;
      v14 -= 32;
      if (!v14)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    v13 = 0;
  }
  if (!*(_DWORD *)(v13 + 12))
    goto LABEL_30;
  v15 = 0;
  v16 = *a5;
  while (1)
  {
    v17 = *(_QWORD *)v13;
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v13 + 8 * v15) + 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, a3);
    if ((_DWORD)result)
    {
      if ((v16 != 0) == (*(_BYTE *)(*(_QWORD *)(v17 + 8 * v15) + 4) & 1))
        break;
    }
    if (++v15 >= *(unsigned int *)(v13 + 12))
      goto LABEL_30;
  }
  if (v15 >= *(unsigned int *)(v13 + 12))
  {
LABEL_30:
    __break(0xC471u);
    return result;
  }
  v19 = *(_QWORD *)v13;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v13 + 8 * v15) + 4) |= 8u;
  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  v21 = *(_BYTE *)(result + 4) & 0xFE | *a5;
  *(_BYTE *)(result + 4) = v21;
  v22 = v21 & 0xFD | (2 * a5[1]);
  *(_BYTE *)(result + 4) = v22;
  *(_BYTE *)(result + 4) = v22 & 0xF3 | (4 * a5[2]);
  v23 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 8) = v23;
  v24 = *(WTF **)(v19 + 8 * v15);
  *(_QWORD *)(v19 + 8 * v15) = result;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
    {
      v26 = (_DWORD *)*((_QWORD *)v24 + 1);
      *((_QWORD *)v24 + 1) = 0;
      if (v26)
      {
        if (v26[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
        else
          --v26[4];
      }
      result = WTF::fastFree(v24, v20);
    }
    else
    {
      --*(_DWORD *)v24;
    }
  }
  v25 = __ldxr(v10);
  if (v25 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v10);
  }
  if (__stlxr(0, v10))
    return WTF::Lock::unlockSlow((WTF::Lock *)v10);
  return result;
}

uint64_t WebCore::EventListenerMap::find(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v2)
    return 0;
  result = *(_QWORD *)a1 + 8;
  v4 = 32 * v2;
  while (*(_QWORD *)(result - 8) != *a2)
  {
    result += 32;
    v4 -= 32;
    if (!v4)
      return 0;
  }
  return result;
}

uint64_t WebCore::EventListenerMap::add(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3, unsigned __int8 *a4)
{
  unsigned __int8 *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WTF *v15;
  char v16;
  char v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  unsigned int *v27;
  _DWORD *v28;
  unsigned int *v29;
  unsigned int v30;
  WTF *v31;
  uint64_t v32;
  WTF *v33;
  _DWORD *v34;
  WTF *v35;
  WTF::StringImpl *v37;
  uint64_t v38;
  int v39;
  uint64_t result;
  WTF::StringImpl **v41;
  void *v42;
  WTF **v43;
  int *v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  _DWORD *v63;
  int v64;
  int v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  WTF *v68;
  int v69;
  unsigned int v70;
  uint64_t v71;

  v8 = (unsigned __int8 *)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)(a1 + 16)))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C](a1 + 16);
    goto LABEL_4;
  }
  if (__stxr(1u, v8))
    goto LABEL_3;
LABEL_4:
  v10 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v10)
  {
LABEL_8:
    v13 = WTF::fastMalloc((WTF *)0x10);
    v15 = (WTF *)v13;
    v16 = *(_BYTE *)(v13 + 4) & 0xFE | *a4;
    *(_BYTE *)(v13 + 4) = v16;
    v17 = v16 & 0xFD | (2 * a4[1]);
    *(_BYTE *)(v13 + 4) = v17;
    *(_BYTE *)(v13 + 4) = v17 & 0xF3 | (4 * a4[2]);
    v18 = *a3;
    *a3 = 0;
    *(_QWORD *)(v13 + 8) = v18;
    *(_DWORD *)v13 = 2;
    v66 = v13;
    v19 = *a2;
    if (*a2)
    {
      *(_DWORD *)v19 += 2;
      v20 = v66;
    }
    else
    {
      v20 = v13;
    }
    v67 = v19;
    v68 = (WTF *)&v71;
    v71 = v20;
    v69 = 1;
    v70 = 1;
    v21 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v21 == *(_DWORD *)(a1 + 8))
    {
      v22 = WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)a1, v21 + 1, (unint64_t)&v67);
      v23 = (_QWORD *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12));
      v24 = *(_QWORD *)v22;
      *(_QWORD *)v22 = 0;
      *v23 = v24;
      v25 = v23 + 3;
      v23[1] = v23 + 3;
      v26 = v23 + 1;
      v27 = (unsigned int *)v23 + 5;
      v23[2] = 1;
      v28 = v23 + 2;
      v14 = *(void **)(v22 + 8);
      if (v14 == (void *)(v22 + 24))
      {
        memcpy(v25, v14, 8 * *(unsigned int *)(v22 + 20));
      }
      else
      {
        *(_QWORD *)(v22 + 8) = v22 + 24;
        *v26 = v14;
        v64 = *(_DWORD *)(v22 + 16);
        *(_DWORD *)(v22 + 16) = 1;
        *v28 = v64;
      }
      v29 = (unsigned int *)(v22 + 20);
    }
    else
    {
      v29 = &v70;
      v41 = (WTF::StringImpl **)(*(_QWORD *)a1 + 32 * v21);
      v67 = 0;
      *v41 = v19;
      v42 = v41 + 3;
      v41[1] = (WTF::StringImpl *)(v41 + 3);
      v43 = v41 + 1;
      v27 = (unsigned int *)v41 + 5;
      v41[2] = (WTF::StringImpl *)1;
      v44 = (int *)(v41 + 2);
      v45 = v68;
      if (v68 == (WTF *)&v71)
      {
        memcpy(v42, &v71, 8 * v70);
      }
      else
      {
        v68 = (WTF *)&v71;
        *v43 = v45;
        v65 = v69;
        v69 = 1;
        *v44 = v65;
      }
    }
    v30 = *v29;
    *v29 = 0;
    *v27 = v30;
    ++*(_DWORD *)(a1 + 12);
    if (v70)
    {
      v31 = v68;
      v32 = 8 * v70;
      do
      {
        v33 = *(WTF **)v31;
        *(_QWORD *)v31 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 1)
          {
            v34 = (_DWORD *)*((_QWORD *)v33 + 1);
            *((_QWORD *)v33 + 1) = 0;
            if (v34)
            {
              if (v34[4] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
              else
                --v34[4];
            }
            WTF::fastFree(v33, v14);
          }
          else
          {
            --*(_DWORD *)v33;
          }
        }
        v31 = (WTF *)((char *)v31 + 8);
        v32 -= 8;
      }
      while (v32);
    }
    v35 = v68;
    if (&v71 != (uint64_t *)v68 && v68 != 0)
    {
      v68 = 0;
      v69 = 0;
      WTF::fastFree(v35, v14);
    }
    v37 = v67;
    v67 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)v37 -= 2;
    }
    if (*(_DWORD *)v15 == 1)
    {
      v63 = (_DWORD *)*((_QWORD *)v15 + 1);
      *((_QWORD *)v15 + 1) = 0;
      if (v63)
      {
        if (v63[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v63 + 8))(v63);
        else
          --v63[4];
      }
      WTF::fastFree(v15, v14);
    }
    else
    {
      --*(_DWORD *)v15;
    }
    goto LABEL_33;
  }
  v11 = *(_QWORD *)a1 + 24;
  v12 = 32 * v10;
  while (*(WTF::StringImpl **)(v11 - 24) != *a2)
  {
    v11 += 32;
    v12 -= 32;
    if (!v12)
      goto LABEL_8;
  }
  if (*(_DWORD *)(v11 - 4))
  {
    v46 = 0;
    v47 = *a3;
    v48 = *a4;
    while (1)
    {
      v49 = *(_QWORD *)(v11 - 16);
      v50 = *(_QWORD *)(*(_QWORD *)(v49 + 8 * v46) + 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 16))(v50, v47))
      {
        if ((v48 != 0) == (*(_BYTE *)(*(_QWORD *)(v49 + 8 * v46) + 4) & 1))
          break;
      }
      if (++v46 >= (unint64_t)*(unsigned int *)(v11 - 4))
        goto LABEL_49;
    }
    v38 = 0;
LABEL_34:
    v39 = __ldxr(v8);
    if (v39 == 1)
    {
      if (!__stlxr(0, v8))
        return v38;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    return v38;
  }
LABEL_49:
  result = WTF::fastMalloc((WTF *)0x10);
  v51 = result;
  *(_DWORD *)result = 1;
  v52 = *(_BYTE *)(result + 4) & 0xFE | *a4;
  *(_BYTE *)(result + 4) = v52;
  v53 = v52 & 0xFD | (2 * a4[1]);
  *(_BYTE *)(result + 4) = v53;
  *(_BYTE *)(result + 4) = v53 & 0xF3 | (4 * a4[2]);
  v54 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 8) = v54;
  v55 = *(unsigned int *)(v11 - 4);
  if ((_DWORD)v55 != *(_DWORD *)(v11 - 8))
  {
    *(_QWORD *)(*(_QWORD *)(v11 - 16) + 8 * v55) = result;
    *(_DWORD *)(v11 - 4) = v55 + 1;
LABEL_33:
    v38 = 1;
    goto LABEL_34;
  }
  v56 = v55 + (v55 >> 2);
  if (v56 >= 2)
    v57 = v56 + 1;
  else
    v57 = 2;
  if (v57 <= v55 + 1)
    v58 = v55 + 1;
  else
    v58 = v57;
  v59 = *(void **)(v11 - 16);
  if (v58 < 2)
  {
    *(_QWORD *)(v11 - 16) = v11;
    *(_DWORD *)(v11 - 8) = 1;
    v60 = (void *)v11;
LABEL_59:
    memcpy(v60, v59, 8 * v55);
    if ((void *)v11 != v59 && v59)
    {
      if (*(void **)(v11 - 16) == v59)
      {
        *(_QWORD *)(v11 - 16) = 0;
        *(_DWORD *)(v11 - 8) = 0;
      }
      WTF::fastFree((WTF *)v59, v61);
    }
    v62 = *(unsigned int *)(v11 - 4);
    *(_QWORD *)(*(_QWORD *)(v11 - 16) + 8 * v62) = v51;
    *(_DWORD *)(v11 - 4) = v62 + 1;
    goto LABEL_33;
  }
  if (!(v58 >> 29))
  {
    v60 = (void *)WTF::fastMalloc((WTF *)(8 * v58));
    *(_DWORD *)(v11 - 8) = v58;
    *(_QWORD *)(v11 - 16) = v60;
    goto LABEL_59;
  }
  __break(0xC471u);
  return result;
}

unsigned __int8 *WebCore::EventListenerMap::removeFirstEventListenerCreatedFromMarkup(unsigned __int8 *this, const WTF::AtomString *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  int v18;

  v3 = (uint64_t)this;
  v4 = this + 16;
  if (__ldaxr(this + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this + 16);
LABEL_5:
  v6 = (char *)*(unsigned int *)(v3 + 12);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = *(_QWORD *)v3;
    v9 = 20;
    while (1)
    {
      v10 = (_DWORD *)(v8 + v9);
      if (*(_QWORD *)(v8 + v9 - 20) == *(_QWORD *)a2)
        break;
      ++v7;
      v9 += 32;
      if (v6 == v7)
        goto LABEL_22;
    }
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = 8 * v11;
      while (1)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v10 - 3) + v12);
        v15 = *(_QWORD *)(v14 + 8);
        if (!*(_BYTE *)(v15 + 20) && (*(_BYTE *)(v15 + 40) & 2) != 0)
          break;
        v12 += 8;
        if (v13 == v12)
          goto LABEL_19;
      }
      *(_BYTE *)(v14 + 4) |= 8u;
      v16 = *(_QWORD *)(v10 - 3);
      v17 = *(WTF **)(v16 + v12);
      *(_QWORD *)(v16 + v12) = 0;
      if (v17)
        WTF::RefCounted<WebCore::RegisteredEventListener>::deref(v17, a2);
      this = (unsigned __int8 *)memmove((void *)(v16 + v12), (const void *)(v16 + v12 + 8), *(_QWORD *)(v10 - 3) + 8 * *v10 - v16 - v12 - 8);
      --*v10;
      LODWORD(v6) = *(_DWORD *)(v3 + 12);
    }
LABEL_19:
    if (v6 <= v7)
    {
      __break(0xC471u);
      return this;
    }
    if (!*(_DWORD *)(*(_QWORD *)v3 + v9))
      this = (unsigned __int8 *)WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::remove((uint64_t *)v3, v7);
  }
LABEL_22:
  v18 = __ldxr(v4);
  if (v18 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return this;
}

unsigned int *WebCore::EventListenerMap::copyEventListenersNotCreatedFromMarkupToTarget(unsigned int *this, WebCore::EventTarget *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WebCore::AbortSignal *v12;
  bmalloc::api *v13;
  void *v14;
  char v15;
  __int16 v16;
  char v17;
  WebCore::AbortSignal *v18;
  unsigned int *v19;

  v2 = this[3];
  if ((_DWORD)v2)
  {
    v4 = *(_QWORD *)this;
    v5 = *(_QWORD *)this + 32 * v2;
    do
    {
      v6 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v6)
      {
        v7 = *(uint64_t **)(v4 + 8);
        v8 = 8 * v6;
        do
        {
          v9 = *v7;
          v10 = *(_QWORD *)(*v7 + 8);
          if (*(_BYTE *)(v10 + 20) || (*(_BYTE *)(v10 + 40) & 2) == 0)
          {
            ++*(_DWORD *)(v10 + 16);
            v19 = (unsigned int *)v10;
            v15 = *(_BYTE *)(v9 + 4) & 1;
            v16 = 0;
            v17 = 0;
            v18 = 0;
            (*(void (**)(WebCore::EventTarget *, uint64_t, unsigned int **, char *))(*(_QWORD *)a2 + 24))(a2, v4, &v19, &v15);
            v12 = v18;
            v18 = 0;
            if (v12)
            {
              if (*((_DWORD *)v12 + 6) == 1)
              {
                WebCore::AbortSignal::~AbortSignal(v12, v11);
                bmalloc::api::isoDeallocate(v13, v14);
              }
              else
              {
                --*((_DWORD *)v12 + 6);
              }
            }
            this = v19;
            v19 = 0;
            if (this)
            {
              if (this[4] == 1)
                this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
              else
                --this[4];
            }
          }
          ++v7;
          v8 -= 8;
        }
        while (v8);
      }
      v4 += 32;
    }
    while (v4 != v5);
  }
  return this;
}

unsigned int *WebCore::EventLoopTaskGroup::removeScheduledTimer(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      ++*(_DWORD *)(v5 + 8);
      WTF::WeakHashSet<WebCore::EventLoopTimer,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::EventLoopTimer>((unsigned int *)(v5 + 40), a2);
      *(_QWORD *)(v5 + 128) = 0x7FF8000000000000;
      if (*(_DWORD *)(v5 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      else
        --*(_DWORD *)(v5 + 8);
    }
  }
  return WTF::WeakHashSet<WebCore::EventLoopTimer,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::EventLoopTimer>((unsigned int *)(a1 + 24), a2);
}

unsigned int *WebCore::EventLoopTaskGroup::removeRepeatingTimer(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      ++*(_DWORD *)(v5 + 8);
      WTF::WeakHashSet<WebCore::EventLoopTimer,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::EventLoopTimer>((unsigned int *)(v5 + 56), a2);
      *(_QWORD *)(v5 + 128) = 0x7FF8000000000000;
      if (*(_DWORD *)(v5 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      else
        --*(_DWORD *)(v5 + 8);
    }
  }
  return WTF::WeakHashSet<WebCore::EventLoopTimer,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::EventLoopTimer>((unsigned int *)(a1 + 24), a2);
}

uint64_t *WebCore::EventLoopTimerHandle::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  if (*a2)
    ++*(_DWORD *)(v3 + 48);
  v4 = *a1;
  *a1 = v3;
  if (v4)
    WTF::RefCounted<WebCore::EventLoopTimer>::deref(v4 + 48, a2);
  return a1;
}

uint64_t *WebCore::EventLoopTimerHandle::operator=(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  void *v11;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
    {
      v5 = *(_QWORD *)(v3 + 64);
      *(_QWORD *)(v3 + 64) = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      v6 = *(_QWORD *)(v3 + 56);
      if (v6)
      {
        *(_QWORD *)(v6 + 8) = 0;
        v7 = *(unsigned int **)(v3 + 56);
        *(_QWORD *)(v3 + 56) = 0;
        if (v7)
        {
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v7);
            WTF::fastFree((WTF *)v7, a2);
          }
        }
      }
      else
      {
        *(_QWORD *)(v3 + 56) = 0;
      }
      WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)v3);
      WTF::fastFree(v10, v11);
    }
    else
    {
      --*(_DWORD *)(v3 + 48);
    }
  }
  return a1;
}

unsigned int *WebCore::EventLoopTimer::create(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t StatusReg;
  unsigned int *result;
  unsigned int v7;
  uint64_t v8;

  v4 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)(v4 + 48) = 1;
  *(_QWORD *)v4 = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  result = *(unsigned int **)(StatusReg + 736);
  if (!result)
    result = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v7 = __ldaxr(result);
  while (__stlxr(v7 + 1, result));
  *(_QWORD *)(v4 + 40) = result;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)v4 = off_1E33A4C48;
  v8 = *a2;
  *a2 = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 64) = v8;
  *(_WORD *)(v4 + 88) = 1;
  *(_BYTE *)(v4 + 90) = 0;
  *a1 = v4;
  return result;
}

uint64_t WebCore::TimerBase::setTimerAlignment(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  result = a2[1];
  if (result)
    goto LABEL_16;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = a2;
  v9 = (unsigned int *)a2[1];
  a2[1] = result;
  if (!v9)
    goto LABEL_16;
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (!v11)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, a2);
  }
  result = a2[1];
  if (result)
  {
LABEL_16:
    do
      v4 = __ldaxr((unsigned int *)result);
    while (__stlxr(v4 + 1, (unsigned int *)result));
  }
  v5 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = result;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      return WTF::fastFree((WTF *)v5, a2);
    }
  }
  return result;
}

uint64_t WebCore::EventLoopTimer::suspend(uint64_t this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::TimerBase *v4;

  *(_BYTE *)(this + 89) = 1;
  if ((*(_QWORD *)(this + 32) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v1 = *(double *)((*(_QWORD *)(this + 32) & 0xFFFFFFFFFFFFLL) + 8);
    v4 = (WebCore::TimerBase *)this;
    *(_BYTE *)(this + 90) = v1 != 0.0;
    if (v1 != 0.0)
    {
      this = WebCore::TimerBase::nextUnalignedFireInterval((WebCore::TimerBase *)this);
      v2 = *((_QWORD *)v4 + 3);
      *((_QWORD *)v4 + 9) = v3;
      *((_QWORD *)v4 + 10) = v2;
      if ((*((_QWORD *)v4 + 4) & 0xFFFFFFFFFFFFLL) != 0)
        return WebCore::TimerBase::stopSlowCase(v4);
    }
  }
  else
  {
    *(_BYTE *)(this + 90) = 0;
  }
  return this;
}

unsigned int *WTF::WeakHashSet<WebCore::EventLoopTimer,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::Ref<WebCore::EventLoopTimer,WTF::RawPtrTraits<WebCore::EventLoopTimer>,WTF::DefaultRefDerefTraits<WebCore::EventLoopTimer>>>(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  unsigned int *result;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;

  v6 = a2[3];
  v7 = a2[2] + 1;
  a2[2] = v7;
  if (v7 > v6)
  {
    v22 = *(_QWORD *)a2;
    if (!*(_QWORD *)a2)
    {
LABEL_20:
      LODWORD(v22) = 0;
      a2[2] = 0;
LABEL_21:
      v23 = v22;
LABEL_22:
      a2[3] = 2 * v23;
      goto LABEL_2;
    }
    v24 = *(unsigned int *)(v22 - 4);
    if (!(_DWORD)v24)
      goto LABEL_40;
    v25 = 0;
    do
    {
      v26 = --v24;
      v27 = *(_QWORD *)(v22 + 8 * v24);
      if ((unint64_t)(v27 + 1) >= 2 && !*(_QWORD *)(v27 + 8))
      {
        *(_QWORD *)(v22 + 8 * v24) = 0;
        do
        {
          v28 = __ldaxr((unsigned int *)v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, (unsigned int *)v27));
        if (!v29)
        {
          atomic_store(1u, (unsigned int *)v27);
          v34 = v22;
          v35 = v24;
          v36 = v24;
          WTF::fastFree((WTF *)v27, a2);
          v24 = v35;
          v26 = v36;
          v22 = v34;
        }
        *(_QWORD *)(v22 + 8 * v26) = -1;
        ++v25;
      }
    }
    while (v26);
    v22 = *(_QWORD *)a2;
    if (v25)
    {
      *(_DWORD *)(v22 - 16) += v25;
      v32 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        v33 = *(_DWORD *)(v32 - 12);
      else
        v33 = 0;
      *(_DWORD *)(v32 - 12) = v33 - v25;
      v22 = *(_QWORD *)a2;
    }
    if (!v22)
      goto LABEL_20;
    v30 = *(_DWORD *)(v22 - 4);
    if (v30 < 9 || 6 * *(_DWORD *)(v22 - 12) >= v30)
    {
LABEL_40:
      a2[2] = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a2);
      v22 = *(_QWORD *)a2;
      a2[2] = 0;
      if (!v22)
        goto LABEL_21;
    }
    LODWORD(v22) = *(_DWORD *)(v22 - 12);
    v23 = 0x7FFFFFFF;
    if (v22 >= 0x7FFFFFFF)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_2:
  v8 = *a3;
  v9 = *(_QWORD *)(*a3 + 56);
  if (!v9)
  {
    v9 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = v8;
    v11 = *(unsigned int **)(v8 + 56);
    *(_QWORD *)(v8 + 56) = v9;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v10);
      }
      v9 = *(_QWORD *)(v8 + 56);
    }
  }
  do
    v14 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v14 + 1, (unsigned int *)v9));
  do
    v15 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v15 + 1, (unsigned int *)v9));
  v37 = (WTF *)v9;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a2, &v37, a1);
  result = (unsigned int *)v37;
  v37 = 0;
  if (result)
  {
    do
    {
      v20 = __ldaxr(result);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, result));
    if (!v21)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v16);
    }
  }
  if (v9)
  {
    do
    {
      v18 = __ldaxr((unsigned int *)v9);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, (unsigned int *)v9));
    if (!v19)
    {
      atomic_store(1u, (unsigned int *)v9);
      return (unsigned int *)WTF::fastFree((WTF *)v9, v16);
    }
  }
  return result;
}

uint64_t WebCore::EventLoop::scheduleRepeatingTask(WebCore::TimerBase **a1, uint64_t a2, _QWORD *a3, int a4, uint64_t *a5, double a6, double a7)
{
  WTF::MonotonicTime *v13;
  WebCore::TimerBase *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  WebCore::TimerBase *v18;
  uint64_t v19;
  void *v20;
  double v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::TimerBase *v25;
  _BYTE v26[24];

  v13 = (WTF::MonotonicTime *)WebCore::EventLoopTimer::create((uint64_t *)&v25, a5);
  v14 = v25;
  if (a3)
    v13 = (WTF::MonotonicTime *)WebCore::TimerBase::setTimerAlignment((uint64_t)v25, a3);
  v15 = 0x1000000000000;
  if (!a4)
    v15 = 0;
  *((_QWORD *)v14 + 4) = *((_QWORD *)v14 + 4) & 0xFEFFFFFFFFFFFFLL | v15;
  if (*((_BYTE *)v14 + 89))
  {
    *((_BYTE *)v14 + 90) = 1;
    *((double *)v14 + 9) = a6;
    *((double *)v14 + 10) = a7;
  }
  else
  {
    *((double *)v14 + 3) = a7;
    WTF::MonotonicTime::now(v13);
    WebCore::TimerBase::setNextFireTime((uint64_t)v14, a6 + v16);
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v14 + 8) + 16) + 8) + 40) == 1)
  {
    *((_BYTE *)v14 + 89) = 1;
    if ((*((_QWORD *)v14 + 4) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v22 = *(double *)((*((_QWORD *)v14 + 4) & 0xFFFFFFFFFFFFLL) + 8);
      *((_BYTE *)v14 + 90) = v22 != 0.0;
      if (v22 != 0.0)
      {
        WebCore::TimerBase::nextUnalignedFireInterval(v14);
        v23 = *((_QWORD *)v14 + 3);
        *((_QWORD *)v14 + 9) = v24;
        *((_QWORD *)v14 + 10) = v23;
        if ((*((_QWORD *)v14 + 4) & 0xFFFFFFFFFFFFLL) != 0)
          WebCore::TimerBase::stopSlowCase(v14);
      }
    }
    else
    {
      *((_BYTE *)v14 + 90) = 0;
    }
  }
  v17 = *((_QWORD *)v14 + 8);
  if (v17)
  {
    v17 = *(_QWORD *)(v17 + 16);
    if (v17)
      v17 = *(_QWORD *)(v17 + 8);
  }
  WTF::WeakHashSet<WebCore::EventLoopTimer,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::EventLoopTimer>((uint64_t)v26, (_DWORD *)(v17 + 24), (uint64_t)v14);
  v18 = v25;
  *a1 = v25;
  v19 = (uint64_t)v18 + 48;
  ++*((_DWORD *)v18 + 12);
  WTF::WeakHashSet<WebCore::EventLoopTimer,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::Ref<WebCore::EventLoopTimer,WTF::RawPtrTraits<WebCore::EventLoopTimer>,WTF::DefaultRefDerefTraits<WebCore::EventLoopTimer>>>((uint64_t)v26, (_DWORD *)(a2 + 56), (uint64_t *)&v25);
  *(_QWORD *)(a2 + 128) = 0x7FF8000000000000;
  return WTF::RefCounted<WebCore::EventLoopTimer>::deref(v19, v20);
}

unsigned int *WTF::WeakHashSet<WebCore::EventLoopTaskGroup,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::EventLoopTaskGroup>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  unsigned int *result;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int **v23;
  unsigned int v25;
  void *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  WTF *v35;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v9 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v10 = v9;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v10;
      goto LABEL_6;
    }
    v20 = *(unsigned int *)(v8 - 4);
    if (!(_DWORD)v20)
      goto LABEL_31;
    v21 = 0;
    v22 = v20 - 1;
    do
    {
      v23 = (unsigned int **)(v8 + 8 * v22);
      if ((unint64_t)*v23 + 1 >= 2 && !*((_QWORD *)*v23 + 1))
      {
        v34 = v21;
        v33 = v22;
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v23, a2);
        v22 = v33;
        v21 = v34 + 1;
      }
    }
    while ((unint64_t)v22--);
    v8 = *(_QWORD *)a1;
    if (v21)
    {
      *(_DWORD *)(v8 - 16) += v21;
      v31 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v32 = *(_DWORD *)(v31 - 12);
      else
        v32 = 0;
      *(_DWORD *)(v31 - 12) = v32 - v21;
      v8 = *(_QWORD *)a1;
    }
    if (!v8)
      goto LABEL_3;
    v25 = *(_DWORD *)(v8 - 4);
    if (v25 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v25)
    {
LABEL_31:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v8 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_4;
      }
    }
    v9 = *(_DWORD *)(v8 - 12);
    v10 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v11 = *a2;
  if (!*a2)
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = a2;
    v28 = (unsigned int *)*a2;
    *a2 = v11;
    if (v28)
    {
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v28);
        WTF::fastFree((WTF *)v28, v27);
      }
      v11 = *a2;
    }
  }
  do
    v12 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v12 + 1, (unsigned int *)v11));
  do
    v13 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v13 + 1, (unsigned int *)v11));
  v35 = (WTF *)v11;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v35, a3);
  result = (unsigned int *)v35;
  v35 = 0;
  if (result)
  {
    do
    {
      v18 = __ldaxr(result);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, result));
    if (!v19)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v14);
    }
  }
  if (v11)
  {
    do
    {
      v16 = __ldaxr((unsigned int *)v11);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v11));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)v11);
      return (unsigned int *)WTF::fastFree((WTF *)v11, v14);
    }
  }
  return result;
}

_BYTE *WebCore::EventLoopTaskGroup::stopAndDiscardAllTasks(_BYTE *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  int v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;

  this[40] = 3;
  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      v4 = *(unsigned int *)(v2 + 36);
      v5 = (char *)(v3 + 8 * v4);
      if ((_DWORD)v4)
      {
        v6 = this;
        v7 = 0;
        v8 = *(_QWORD *)(v2 + 24);
        v9 = (char *)(v3 + 8 * v4);
        v10 = v9;
        while (1)
        {
          this = *(_BYTE **)v3;
          v11 = *(_QWORD *)(*(_QWORD *)v3 + 16);
          if (!v11 || *(void **)(v11 + 8) != v6)
            goto LABEL_7;
          v12 = (char *)v3;
          if (v10 != (char *)(*(_QWORD *)(v2 + 24) + 8 * *(unsigned int *)(v2 + 36)))
          {
            if ((char *)v3 != v9)
            {
              memmove(v10, v9, v8 - (_QWORD)v9);
              v12 = &v10[v8 - (_QWORD)v9];
              this = *(_BYTE **)v3;
              *(_QWORD *)v3 = 0;
              v9 = (char *)(v3 + 8);
              if (!this)
                goto LABEL_16;
              goto LABEL_15;
            }
            v12 = v10;
          }
          *(_QWORD *)v3 = 0;
          v9 = (char *)(v3 + 8);
LABEL_15:
          this = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 8))(this);
LABEL_16:
          ++v7;
          v10 = v12;
LABEL_7:
          v3 += 8;
          v8 += 8;
          if (v3 >= (unint64_t)v5)
          {
            v3 = *(_QWORD *)(v2 + 24);
            LODWORD(v4) = *(_DWORD *)(v2 + 36);
            v5 = v10;
            goto LABEL_17;
          }
        }
      }
      v7 = 0;
      v9 = (char *)(v3 + 8 * v4);
LABEL_17:
      v13 = (char *)(v3 + 8 * v4);
      if (v9 != v13)
      {
        this = memmove(v5, v9, v13 - v9);
        LODWORD(v4) = *(_DWORD *)(v2 + 36);
      }
      *(_DWORD *)(v2 + 36) = v4 - v7;
    }
  }
  return this;
}

unsigned int *WebCore::EventLoop::stopGroup(unsigned int *this, WebCore::EventLoopTaskGroup *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  char *v5;
  int v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;

  v2 = this;
  v3 = *((_QWORD *)this + 3);
  v4 = this[9];
  v5 = (char *)(v3 + 8 * v4);
  if ((_DWORD)v4)
  {
    v7 = 0;
    v8 = *((_QWORD *)this + 3);
    v9 = (char *)(v3 + 8 * v4);
    v10 = v9;
    while (1)
    {
      this = *(unsigned int **)v3;
      v11 = *(_QWORD *)(*(_QWORD *)v3 + 16);
      if (!v11 || *(WebCore::EventLoopTaskGroup **)(v11 + 8) != a2)
        goto LABEL_5;
      v12 = (char *)v3;
      if (v10 != (char *)(v2[3] + 8 * *((unsigned int *)v2 + 9)))
      {
        if ((char *)v3 != v9)
        {
          memmove(v10, v9, v8 - (_QWORD)v9);
          v12 = &v10[v8 - (_QWORD)v9];
          this = *(unsigned int **)v3;
          *(_QWORD *)v3 = 0;
          v9 = (char *)(v3 + 8);
          if (!this)
            goto LABEL_14;
          goto LABEL_13;
        }
        v12 = v10;
      }
      *(_QWORD *)v3 = 0;
      v9 = (char *)(v3 + 8);
LABEL_13:
      this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
LABEL_14:
      ++v7;
      v10 = v12;
LABEL_5:
      v3 += 8;
      v8 += 8;
      if (v3 >= (unint64_t)v5)
      {
        v3 = v2[3];
        LODWORD(v4) = *((_DWORD *)v2 + 9);
        v5 = v10;
        goto LABEL_15;
      }
    }
  }
  v7 = 0;
  v9 = (char *)(v3 + 8 * v4);
LABEL_15:
  v13 = (char *)(v3 + 8 * v4);
  if (v9 != v13)
  {
    this = (unsigned int *)memmove(v5, v9, v13 - v9);
    LODWORD(v4) = *((_DWORD *)v2 + 9);
  }
  *((_DWORD *)v2 + 9) = v4 - v7;
  return this;
}

unsigned int *WebCore::EventLoop::addAssociatedContext(WebCore::EventLoop *this, WebCore::ScriptExecutionContext *a2)
{
  _BYTE v3[24];

  return WTF::WeakHashSet<WebCore::ScriptExecutionContext,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::ScriptExecutionContext>((uint64_t)this + 104, a2, (uint64_t)v3);
}

unsigned int *WTF::WeakHashSet<WebCore::ScriptExecutionContext,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::ScriptExecutionContext>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  unsigned int *result;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int **v23;
  unsigned int v25;
  void *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  WTF *v35;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v9 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v10 = v9;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v10;
      goto LABEL_6;
    }
    v20 = *(unsigned int *)(v8 - 4);
    if (!(_DWORD)v20)
      goto LABEL_31;
    v21 = 0;
    v22 = v20 - 1;
    do
    {
      v23 = (unsigned int **)(v8 + 8 * v22);
      if ((unint64_t)*v23 + 1 >= 2 && !*((_QWORD *)*v23 + 1))
      {
        v34 = v21;
        v33 = v22;
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v23, a2);
        v22 = v33;
        v21 = v34 + 1;
      }
    }
    while ((unint64_t)v22--);
    v8 = *(_QWORD *)a1;
    if (v21)
    {
      *(_DWORD *)(v8 - 16) += v21;
      v31 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v32 = *(_DWORD *)(v31 - 12);
      else
        v32 = 0;
      *(_DWORD *)(v31 - 12) = v32 - v21;
      v8 = *(_QWORD *)a1;
    }
    if (!v8)
      goto LABEL_3;
    v25 = *(_DWORD *)(v8 - 4);
    if (v25 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v25)
    {
LABEL_31:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v8 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_4;
      }
    }
    v9 = *(_DWORD *)(v8 - 12);
    v10 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v11 = a2[13];
  if (!v11)
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = a2 + 12;
    v28 = (unsigned int *)a2[13];
    a2[13] = v11;
    if (v28)
    {
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v28);
        WTF::fastFree((WTF *)v28, v27);
      }
      v11 = a2[13];
    }
  }
  do
    v12 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v12 + 1, (unsigned int *)v11));
  do
    v13 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v13 + 1, (unsigned int *)v11));
  v35 = (WTF *)v11;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v35, a3);
  result = (unsigned int *)v35;
  v35 = 0;
  if (result)
  {
    do
    {
      v18 = __ldaxr(result);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, result));
    if (!v19)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v14);
    }
  }
  if (v11)
  {
    do
    {
      v16 = __ldaxr((unsigned int *)v11);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v11));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)v11);
      return (unsigned int *)WTF::fastFree((WTF *)v11, v14);
    }
  }
  return result;
}

double **WebCore::EventLoop::nextTimerFireTime(void)const::$_0::operator()<WTF::WeakHashSet<WebCore::EventLoopTimer,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const>(double **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *a2;
  if (!*a2)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = v3;
    v3 = v2 + 8 * v4;
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v3 = v2 + 8 * v4;
  if (!*(_DWORD *)(v2 - 12))
    goto LABEL_3;
  if (!(_DWORD)v4)
  {
    v15 = 0;
    v5 = *a2;
    goto LABEL_43;
  }
  v14 = 8 * v4;
  v5 = *a2;
  while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
  {
    v5 += 8;
    v14 -= 8;
    if (!v14)
    {
      v5 = v3;
      break;
    }
  }
LABEL_4:
  if (!v2)
  {
    v6 = 0;
    goto LABEL_6;
  }
  v15 = *(unsigned int *)(v2 - 4);
LABEL_43:
  v6 = v2 + 8 * v15;
LABEL_6:
  if (v6 != v5)
  {
    while (!*(_QWORD *)(*(_QWORD *)v5 + 8))
    {
      v16 = v5 + 8;
      v5 = v3;
      if (v16 != v3)
      {
        v5 = v16;
        while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
        {
          v5 += 8;
          if (v5 == v3)
          {
            v5 = v3;
            break;
          }
        }
      }
      if (v5 == v6)
      {
        v5 = v6;
        break;
      }
    }
  }
  if (v2)
    v2 += 8 * *(unsigned int *)(v2 - 4);
  while (v5 != v2)
  {
    v7 = *(_QWORD *)(*(_QWORD *)v5 + 8);
    if (!*(_BYTE *)(v7 + 89))
    {
      v8 = *(_QWORD *)(v7 + 32) & 0xFFFFFFFFFFFFLL;
      v9 = 0.0;
      if (v8)
        v9 = *(double *)(v8 + 8);
      if (v9 < **result)
      {
        v10 = 0;
        if (v8)
          v10 = *(_QWORD *)(v8 + 8);
        *(_QWORD *)*result = v10;
      }
    }
    v11 = v5 + 8;
    v12 = v3;
    if (v11 != v3)
    {
      v12 = v11;
      while ((unint64_t)(*(_QWORD *)v12 + 1) <= 1)
      {
        v12 += 8;
        if (v12 == v3)
        {
          v12 = v3;
          break;
        }
      }
    }
    v5 = v6;
    if (v12 != v6)
    {
      v5 = v12;
      if (!*(_QWORD *)(*(_QWORD *)v12 + 8))
      {
        while (1)
        {
          v13 = v5 + 8;
          v5 = v3;
          if (v13 != v3)
          {
            v5 = v13;
            while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
            {
              v5 += 8;
              if (v5 == v3)
              {
                v5 = v3;
                break;
              }
            }
          }
          if (v5 == v6)
            break;
          if (*(_QWORD *)(*(_QWORD *)v5 + 8))
            goto LABEL_23;
        }
        v5 = v6;
      }
    }
LABEL_23:
    ++*((_DWORD *)a2 + 2);
  }
  return result;
}

uint64_t *WebCore::EventLoopTaskGroup::suspend(WebCore::EventLoopTaskGroup *this)
{
  uint64_t *v2;
  uint64_t *result;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  WebCore::TimerBase *v10;
  uint64_t *v11[5];
  uint64_t *v12;
  uint64_t *v13;

  *((_BYTE *)this + 40) = 1;
  v2 = (uint64_t *)((char *)this + 24);
  WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t *)this + 3, &v12);
  result = WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v2, v11);
  while (v13 != v11[1])
  {
    v4 = *(_QWORD *)(*v13 + 8);
    *(_BYTE *)(v4 + 89) = 1;
    if ((*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v5 = *(double *)((*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFLL) + 8);
      v10 = (WebCore::TimerBase *)v4;
      *(_BYTE *)(v4 + 90) = v5 != 0.0;
      if (v5 != 0.0)
      {
        WebCore::TimerBase::nextUnalignedFireInterval((WebCore::TimerBase *)v4);
        v6 = *((_QWORD *)v10 + 3);
        *((_QWORD *)v10 + 9) = v7;
        *((_QWORD *)v10 + 10) = v6;
        if ((*((_QWORD *)v10 + 4) & 0xFFFFFFFFFFFFLL) != 0)
          WebCore::TimerBase::stopSlowCase(v10);
      }
    }
    else
    {
      *(_BYTE *)(v4 + 90) = 0;
    }
    result = WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v12);
  }
  v8 = *((_QWORD *)this + 2);
  if (v8)
  {
    result = *(uint64_t **)(v8 + 8);
    if (result)
    {
      v9 = *((_DWORD *)result + 2);
      *((_DWORD *)result + 2) = v9 + 1;
      result[16] = 0x7FF8000000000000;
      if (v9)
        *((_DWORD *)result + 2) = v9;
      else
        return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    }
  }
  return result;
}

uint64_t *WebCore::EventLoopTaskGroup::resume(WebCore::EventLoopTaskGroup *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *result;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t *v19[5];
  uint64_t *v20;
  uint64_t *v21;

  *((_BYTE *)this + 40) = 0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_DWORD *)(v3 + 8);
      *(_DWORD *)(v3 + 8) = v4 + 1;
      ++*(_DWORD *)(v3 + 96);
      v5 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        if (*(_QWORD *)(v5 + 8))
        {
          v6 = *(_QWORD *)(v3 + 88);
          if (v6)
          {
            v7 = *(_DWORD *)(v6 - 8);
            v8 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
            v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
            v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
            v11 = v7 & ((v10 >> 31) ^ v10);
            for (i = 1; ; ++i)
            {
              v13 = *(_QWORD *)(v6 + 8 * v11);
              if (v13 != -1)
              {
                if (!v13)
                  goto LABEL_13;
                if (v13 == v5)
                  break;
              }
              v11 = (v11 + i) & v7;
            }
            if (!*(_BYTE *)(v3 + 120))
            {
              *(_BYTE *)(v3 + 120) = 1;
              (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
              v4 = *(_DWORD *)(v3 + 8) - 1;
            }
          }
        }
      }
LABEL_13:
      *(_QWORD *)(v3 + 128) = 0x7FF8000000000000;
      if (v4)
        *(_DWORD *)(v3 + 8) = v4;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v14 = (uint64_t *)((char *)this + 24);
  WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v14, &v20);
  result = WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v14, v19);
  while (v21 != v19[1])
  {
    v16 = *(_QWORD *)(*v21 + 8);
    *(_BYTE *)(v16 + 89) = 0;
    if (*(_BYTE *)(v16 + 90))
    {
      v17 = *(double *)(v16 + 72);
      *(_QWORD *)(v16 + 24) = *(_QWORD *)(v16 + 80);
      WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
      WebCore::TimerBase::setNextFireTime(v16, v17 + v18);
    }
    result = WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v20);
  }
  return result;
}

uint64_t WebCore::EventLoopTaskGroup::queueTask(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  if (*(_BYTE *)(result + 40) != 3)
  {
    v2 = *(_QWORD *)(result + 16);
    if (v2)
    {
      v3 = *(_DWORD **)(v2 + 8);
      if (v3)
      {
        ++v3[2];
        if (!*((_BYTE *)v3 + 120))
        {
          *((_BYTE *)v3 + 120) = 1;
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 24))(v3);
        }
        result = (uint64_t)(v3 + 6);
        v5 = v3[9];
        if ((_DWORD)v5 == v3[8])
        {
          result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v5 + 1, (unint64_t)a2);
          a2 = (uint64_t *)result;
          v5 = v3[9];
          v6 = (_QWORD *)(*((_QWORD *)v3 + 3) + 8 * v5);
        }
        else
        {
          v6 = (_QWORD *)(*(_QWORD *)result + 8 * v5);
        }
        v7 = *a2;
        *a2 = 0;
        *v6 = v7;
        v3[9] = v5 + 1;
        if (v3[2] == 1)
          return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        else
          --v3[2];
      }
    }
  }
  return result;
}

uint64_t *WebCore::EventLoopTaskGroup::runAtEndOfMicrotaskCheckpoint(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  void *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;

  if (*((_BYTE *)result + 40) != 3)
  {
    v2 = result;
    v3 = result[2];
    if (v3)
    {
      result = *(uint64_t **)(v3 + 8);
      if (result)
      {
        v5 = (*(uint64_t (**)(uint64_t *))(*result + 16))(result);
        v6 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v6 = off_1E33A0990;
        *(_BYTE *)(v6 + 8) = 8;
        v7 = *v2;
        if (*v2)
          goto LABEL_20;
        v7 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v7 = 1;
        *(_QWORD *)(v7 + 8) = v2;
        v15 = (unsigned int *)*v2;
        *v2 = v7;
        if (!v15)
          goto LABEL_20;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v15);
          WTF::fastFree((WTF *)v15, v14);
        }
        v7 = *v2;
        if (*v2)
        {
LABEL_20:
          do
            v8 = __ldaxr((unsigned int *)v7);
          while (__stlxr(v8 + 1, (unsigned int *)v7));
        }
        *(_QWORD *)(v6 + 16) = v7;
        *(_QWORD *)v6 = off_1E33A4C70;
        v9 = *a2;
        *a2 = 0;
        *(_QWORD *)(v6 + 24) = v9;
        v18 = (uint64_t *)v6;
        v10 = (_QWORD *)(v5 + 40);
        v11 = *(unsigned int *)(v5 + 52);
        if ((_DWORD)v11 == *(_DWORD *)(v5 + 48))
        {
          v12 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, v11 + 1, (unint64_t)&v18);
          v11 = *(unsigned int *)(v5 + 52);
          v13 = (uint64_t *)(*(_QWORD *)(v5 + 40) + 8 * v11);
          v6 = *v12;
        }
        else
        {
          v13 = (uint64_t *)(*v10 + 8 * v11);
          v12 = (uint64_t *)&v18;
        }
        *v12 = 0;
        *v13 = v6;
        *(_DWORD *)(v5 + 52) = v11 + 1;
        result = v18;
        v18 = 0;
        if (result)
          return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t WebCore::EventLoopTaskGroup::scheduleTask@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>, double a5@<D0>)
{
  uint64_t *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;

  if (*(_BYTE *)(result + 40) != 3
    && (v6 = (uint64_t *)result, (v7 = *(_QWORD *)(result + 16)) != 0)
    && (v8 = *(_DWORD **)(v7 + 8)) != 0)
  {
    ++v8[2];
    v12 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v12 = off_1E33A0990;
    *(_BYTE *)(v12 + 8) = a2;
    v13 = *v6;
    if (*v6)
      goto LABEL_20;
    v13 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = v6;
    v17 = (unsigned int *)*v6;
    *v6 = v13;
    if (!v17)
      goto LABEL_20;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v16);
    }
    v13 = *v6;
    if (*v6)
    {
LABEL_20:
      do
        v14 = __ldaxr((unsigned int *)v13);
      while (__stlxr(v14 + 1, (unsigned int *)v13));
    }
    *(_QWORD *)(v12 + 16) = v13;
    *(_QWORD *)v12 = off_1E33A4C70;
    v15 = *a3;
    *a3 = 0;
    *(_QWORD *)(v12 + 24) = v15;
    v20 = v12;
    WebCore::EventLoop::scheduleTask((uint64_t)v8, 0, 0, &v20, a4, a5);
    result = v20;
    if (v20)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    if (v8[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

uint64_t WebCore::EventLoopTaskGroup::scheduleRepeatingTask@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t *a3@<X2>, WebCore::TimerBase **a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;

  if (*(_BYTE *)(result + 40) != 3
    && (v7 = (uint64_t *)result, (v8 = *(_QWORD *)(result + 16)) != 0)
    && (v9 = *(_DWORD **)(v8 + 8)) != 0)
  {
    ++v9[2];
    v14 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v14 = off_1E33A0990;
    *(_BYTE *)(v14 + 8) = a2;
    v15 = *v7;
    if (*v7)
      goto LABEL_20;
    v15 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v15 = 1;
    *(_QWORD *)(v15 + 8) = v7;
    v19 = (unsigned int *)*v7;
    *v7 = v15;
    if (!v19)
      goto LABEL_20;
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v18);
    }
    v15 = *v7;
    if (*v7)
    {
LABEL_20:
      do
        v16 = __ldaxr((unsigned int *)v15);
      while (__stlxr(v16 + 1, (unsigned int *)v15));
    }
    *(_QWORD *)(v14 + 16) = v15;
    *(_QWORD *)v14 = off_1E33A4C70;
    v17 = *a3;
    *a3 = 0;
    *(_QWORD *)(v14 + 24) = v17;
    v22 = v14;
    WebCore::EventLoop::scheduleRepeatingTask(a4, (uint64_t)v9, 0, 0, &v22, a5, a6);
    result = v22;
    if (v22)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    if (v9[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

uint64_t WebCore::EventLoopTaskGroup::scheduleRepeatingTask@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t *a5@<X4>, WebCore::TimerBase **a6@<X8>, double a7@<D0>, double a8@<D1>)
{
  uint64_t *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;

  if (*(_BYTE *)(result + 40) != 3
    && (v9 = (uint64_t *)result, (v10 = *(_QWORD *)(result + 16)) != 0)
    && (v11 = *(_DWORD **)(v10 + 8)) != 0)
  {
    ++v11[2];
    v18 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v18 = off_1E33A0990;
    *(_BYTE *)(v18 + 8) = a4;
    v19 = *v9;
    if (*v9)
      goto LABEL_20;
    v19 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = v9;
    v23 = (unsigned int *)*v9;
    *v9 = v19;
    if (!v23)
      goto LABEL_20;
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, v22);
    }
    v19 = *v9;
    if (*v9)
    {
LABEL_20:
      do
        v20 = __ldaxr((unsigned int *)v19);
      while (__stlxr(v20 + 1, (unsigned int *)v19));
    }
    *(_QWORD *)(v18 + 16) = v19;
    *(_QWORD *)v18 = off_1E33A4C70;
    v21 = *a5;
    *a5 = 0;
    *(_QWORD *)(v18 + 24) = v21;
    v26 = v18;
    WebCore::EventLoop::scheduleRepeatingTask(a6, (uint64_t)v11, a2, a3, &v26, a7, a8);
    result = v26;
    if (v26)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    if (v11[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
  }
  else
  {
    *a6 = 0;
  }
  return result;
}

uint64_t WebCore::EventLoopTaskGroup::adjustTimerNextFireTime(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t result;
  uint64_t v5;
  int v6;

  result = *a2;
  if (*a2)
  {
    if (*(_BYTE *)(result + 89))
    {
      if (*(_BYTE *)(result + 90))
      {
        *(double *)(result + 72) = a3 + *(double *)(result + 72);
      }
      else
      {
        *(_BYTE *)(result + 90) = 1;
        *(double *)(result + 72) = a3;
        *(_QWORD *)(result + 80) = 0;
      }
    }
    else
    {
      result = WebCore::TimerBase::setNextFireTime(result, a3 + *(double *)((*(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFLL) + 8));
    }
    v5 = *(_QWORD *)(a1 + 16);
    if (v5)
    {
      result = *(_QWORD *)(v5 + 8);
      if (result)
      {
        v6 = *(_DWORD *)(result + 8);
        *(_DWORD *)(result + 8) = v6 + 1;
        *(_QWORD *)(result + 128) = 0x7FF8000000000000;
        if (v6)
          *(_DWORD *)(result + 8) = v6;
        else
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t WebCore::EventLoopTaskGroup::adjustTimerRepeatInterval(uint64_t result, uint64_t *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = *a2;
  if (*a2)
  {
    v4 = result;
    if (*(_BYTE *)(v3 + 89))
    {
      if (*(_BYTE *)(v3 + 90))
      {
        *(float64x2_t *)(v3 + 72) = vaddq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&a3, 0), *(float64x2_t *)(v3 + 72));
      }
      else
      {
        *(_BYTE *)(v3 + 90) = 1;
        *(double *)(v3 + 72) = a3;
        *(double *)(v3 + 80) = a3;
      }
    }
    else
    {
      result = WebCore::TimerBase::setNextFireTime(*a2, a3 + *(double *)((*(_QWORD *)(v3 + 32) & 0xFFFFFFFFFFFFLL) + 8));
      *(double *)(v3 + 24) = a3 + *(double *)(v3 + 24);
    }
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      result = *(_QWORD *)(v5 + 8);
      if (result)
      {
        v6 = *(_DWORD *)(result + 8);
        *(_DWORD *)(result + 8) = v6 + 1;
        *(_QWORD *)(result + 128) = 0x7FF8000000000000;
        if (v6)
          *(_DWORD *)(result + 8) = v6;
        else
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *WTF::WeakHashSet<WebCore::EventLoopTimer,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::EventLoopTimer>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  unsigned int *result;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  WTF *v37;

  v6 = a2[3];
  v7 = a2[2] + 1;
  a2[2] = v7;
  if (v7 > v6)
  {
    v21 = *(_QWORD *)a2;
    if (!*(_QWORD *)a2)
    {
LABEL_20:
      v22 = 0;
      a2[2] = 0;
LABEL_21:
      v23 = v22;
LABEL_22:
      a2[3] = 2 * v23;
      goto LABEL_2;
    }
    v24 = *(unsigned int *)(v21 - 4);
    if (!(_DWORD)v24)
      goto LABEL_40;
    v25 = 0;
    do
    {
      v26 = --v24;
      v27 = *(_QWORD *)(v21 + 8 * v24);
      if ((unint64_t)(v27 + 1) >= 2 && !*(_QWORD *)(v27 + 8))
      {
        *(_QWORD *)(v21 + 8 * v24) = 0;
        do
        {
          v28 = __ldaxr((unsigned int *)v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, (unsigned int *)v27));
        if (!v29)
        {
          atomic_store(1u, (unsigned int *)v27);
          v36 = v25;
          v34 = v24;
          v35 = v24;
          WTF::fastFree((WTF *)v27, a2);
          v24 = v34;
          v26 = v35;
          v25 = v36;
        }
        *(_QWORD *)(v21 + 8 * v26) = -1;
        ++v25;
      }
    }
    while (v26);
    v21 = *(_QWORD *)a2;
    if (v25)
    {
      *(_DWORD *)(v21 - 16) += v25;
      v32 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        v33 = *(_DWORD *)(v32 - 12);
      else
        v33 = 0;
      *(_DWORD *)(v32 - 12) = v33 - v25;
      v21 = *(_QWORD *)a2;
    }
    if (!v21)
      goto LABEL_20;
    v30 = *(_DWORD *)(v21 - 4);
    if (v30 < 9 || 6 * *(_DWORD *)(v21 - 12) >= v30)
    {
LABEL_40:
      a2[2] = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a2);
      v21 = *(_QWORD *)a2;
      a2[2] = 0;
      if (!v21)
      {
        v22 = 0;
        goto LABEL_21;
      }
    }
    v22 = *(_DWORD *)(v21 - 12);
    v23 = 0x7FFFFFFF;
    if (v22 >= 0x7FFFFFFF)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_2:
  v8 = *(_QWORD *)(a3 + 56);
  if (!v8)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = a3;
    v10 = *(unsigned int **)(a3 + 56);
    *(_QWORD *)(a3 + 56) = v8;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v9);
      }
      v8 = *(_QWORD *)(a3 + 56);
    }
  }
  do
    v13 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v13 + 1, (unsigned int *)v8));
  do
    v14 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v14 + 1, (unsigned int *)v8));
  v37 = (WTF *)v8;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a2, &v37, a1);
  result = (unsigned int *)v37;
  v37 = 0;
  if (result)
  {
    do
    {
      v19 = __ldaxr(result);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, result));
    if (!v20)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v15);
    }
  }
  if (v8)
  {
    do
    {
      v17 = __ldaxr((unsigned int *)v8);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v8));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v8);
      return (unsigned int *)WTF::fastFree((WTF *)v8, v15);
    }
  }
  return result;
}

BOOL WebCore::Document::hasEventListenersOfType(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 3296);
  if (v2)
  {
    v3 = *(_DWORD *)(a1 + 3304);
    v4 = v3 - 1;
    v5 = *(_DWORD *)(a1 + 3312);
    v6 = *(_DWORD *)(a2 + 16);
    v7 = (v5 ^ (v6 >> 8)) & (v3 - 1);
    v8 = *(_QWORD *)(v2 + 16 * v7);
    if (v8)
    {
      v9 = v6 >> 8;
      v10 = -1;
      do
      {
        v11 = *(_DWORD *)(v8 + 16);
        if (++v10 > (((_DWORD)v7 + v3 - ((v5 ^ (v11 >> 8)) & v4)) & v4))
          break;
        if (v8 == a2 && v11 >> 8 == v9)
          return *(_DWORD *)(v2 + 16 * v7 + 8) != 0;
        v7 = ((_DWORD)v7 + 1) & v4;
        v8 = *(_QWORD *)(v2 + 16 * v7);
      }
      while (v8);
    }
  }
  return 0;
}

void WebCore::EventLoopTimer::~EventLoopTimer(WebCore::EventLoopTimer *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 7);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 7) = 0;
  }
  WebCore::TimerBase::~TimerBase(this);
}

{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  void *v9;

  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 7);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 7) = 0;
  }
  WebCore::TimerBase::~TimerBase(this);
  WTF::fastFree(v8, v9);
}

WTF *WTF::RefCounted<WebCore::RegisteredEventListener>::deref(WTF *this, void *a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = (_DWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v3)
    {
      if (v3[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      else
        --v3[4];
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

WTF::StringImpl *WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  void *v10;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 4)
    v4 = v3 + 1;
  else
    v4 = 4;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF::StringImpl **)result;
      v8 = (WTF::StringImpl *)(*(_QWORD *)result + 32 * *((unsigned int *)result + 3));
      v9 = WTF::fastMalloc((WTF *)(32 * v5));
      *((_DWORD *)v6 + 2) = v5;
      *(_QWORD *)v6 = v9;
      result = WTF::VectorMover<false,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::move(v7, v8, v9);
      if (v7)
      {
        if (*(WTF::StringImpl **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          *((_DWORD *)v6 + 2) = 0;
        }
        return (WTF::StringImpl *)WTF::fastFree(v7, v10);
      }
    }
  }
  return result;
}

uint64_t WTF::RefCounted<WebCore::EventLoopTimer>::deref(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  void *v9;

  v2 = result;
  if (*(_DWORD *)result == 1)
  {
    v3 = *(_QWORD *)(result + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *(_QWORD *)(v2 + 8);
    if (v4)
    {
      *(_QWORD *)(v4 + 8) = 0;
      v5 = *(unsigned int **)(v2 + 8);
      *(_QWORD *)(v2 + 8) = 0;
      if (v5)
      {
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          atomic_store(1u, v5);
          WTF::fastFree((WTF *)v5, a2);
        }
      }
    }
    else
    {
      *(_QWORD *)(v2 + 8) = 0;
    }
    WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v2 - 48));
    return WTF::fastFree(v8, v9);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::EventPath::buildPath(WebCore::EventPath *this, WebCore::Node *a2, WebCore::Event *a3)
{
  WTF::StringImpl *v5;
  int v6;
  WebCore::Node *v7;
  uint64_t result;
  int v9;
  WebCore::Node *v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  WTF *v17;
  WTF::StringImpl *v18;
  WTF *v19;
  WTF *v20;
  WTF::StringImpl *v21;
  WTF *v22;
  WTF *v23;
  WTF *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  WebCore *v28;
  WebCore **v29;
  WebCore::Node *v30;
  WebCore::Node *v31;
  uint64_t v32;
  WTF *v33;
  WTF *v34;
  uint64_t v35;
  WTF *v36;
  WTF *v37;
  uint64_t v38;
  WTF *v39;
  WTF *v40;
  WTF *v41;
  WTF *v42;
  WebCore::Node *v43;
  WebCore::Node *v44;
  WebCore *Ref;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF **v51;
  WTF **v52;
  uint64_t v53;
  WTF **v54;
  WTF **v55;
  uint64_t v56;
  WTF **v57;
  WTF **v58;
  uint64_t v59;
  WTF **v60;
  WTF **v61;
  uint64_t v62;
  WTF **v63;
  WTF **v64;
  uint64_t v65;
  WTF **v66;
  WTF **v67;
  uint64_t v68;
  BOOL v69;
  WTF *v70;
  uint64_t v71;
  WTF *v72;
  unsigned int v73;
  unsigned int v74;
  WTF *v75;
  uint64_t *v76;
  unsigned int *v77;
  WTF *v78;
  uint64_t v79;
  WTF *v80;
  unsigned int v81;
  unsigned int v82;
  WTF *v83;
  uint64_t *v84;
  unsigned int *v85;
  WTF *v86;
  uint64_t v87;
  WTF *v88;
  unsigned int v89;
  unsigned int v90;
  WTF *v91;
  uint64_t *v92;
  unsigned int *v93;
  WTF *v94;
  uint64_t v95;
  WTF *v96;
  unsigned int v97;
  unsigned int v98;
  WebCore::DOMWrapperWorld *v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF *v107;
  void *v108;
  uint64_t v109;
  WTF *v110;
  WTF *v111;
  unsigned int *v112;
  WTF *v113;
  uint64_t v114;
  WTF *v115;
  unsigned int v116;
  unsigned int v117;
  WebCore::DOMWrapperWorld *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  WTF *v126;
  void *v127;
  uint64_t v128;
  WTF *v129;
  WTF *v130;
  unsigned int *v131;
  WTF *v132;
  uint64_t v133;
  WTF *v134;
  unsigned int v135;
  unsigned int v136;
  WebCore::DOMWrapperWorld *v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  WTF *v145;
  void *v146;
  uint64_t v147;
  WTF *v148;
  WTF *v149;
  unsigned int *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  int v155;
  WebCore *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _DWORD *v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  WebCore **v165;
  WebCore *v166;
  WebCore::Node **v167;
  WebCore::Node *v168;
  uint64_t v169;
  WebCore::Node *v170;
  WTF *v171;
  uint64_t v172;
  WTF *v173;
  WTF **v174;
  WTF *v175;
  WTF *v176;
  uint64_t v177;
  uint64_t v178;
  BOOL v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  WTF *v195;
  WTF *v196;
  WTF *v197;
  WebCore::Node *v198;
  int v199;
  unsigned int v201;
  WebCore *v202;
  WebCore::Node *v203;
  WebCore::Node *v204;
  WTF *v205[2];
  WTF *v206[2];
  uint64_t v207;

  if (((*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a3 + 88))(a3) & 1) != 0
    || ((*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a3 + 56))(a3) & 1) != 0)
  {
    v6 = 1;
  }
  else if ((*(unsigned int (**)(WebCore::Event *))(*(_QWORD *)a3 + 120))(a3))
  {
    v6 = 2;
  }
  else
  {
    v6 = 0;
  }
  v7 = a2;
  v199 = v6;
  if ((~*((unsigned __int16 *)a2 + 14) & 0x408) == 0)
  {
    v7 = a2;
    result = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)a2 + 368))(a2);
    if ((_DWORD)result)
    {
      v189 = *((_QWORD *)a2 + 14);
      if (!v189)
        return result;
      v7 = *(WebCore::Node **)(v189 + 8);
      if (!v7)
        return result;
    }
  }
  *((_DWORD *)v7 + 6) += 2;
  v9 = *((unsigned __int16 *)v7 + 14);
  if ((~v9 & 0x408) != 0)
    goto LABEL_7;
  if (!(*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)v7 + 368))(v7))
  {
    LOWORD(v9) = *((_WORD *)v7 + 14);
LABEL_7:
    v10 = v7;
    if ((v9 & 0x20) != 0)
    {
      v178 = **((_QWORD **)v7 + 5);
      v179 = !v178 || (*(_WORD *)(v178 + 28) & 0x80) == 0;
      v10 = v7;
      if (!v179)
      {
        v10 = v7;
        if (!*(_BYTE *)(v178 + 193))
        {
          v180 = *(_QWORD *)(v178 + 200);
          v10 = v7;
          if (v180)
          {
            v181 = *(_QWORD *)(v180 + 8);
            v10 = v7;
            if (v181)
            {
              v10 = v7;
              if ((*(_WORD *)(v181 + 28) & 0x20) != 0)
              {
                v10 = v7;
                if (*(_QWORD *)(*(_QWORD *)(v181 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::useTag + 24))
                {
                  v182 = *(_DWORD *)(v181 + 24);
                  *(_DWORD *)(v181 + 24) = v182 + 2;
                  if (v182)
                  {
                    *(_DWORD *)(v181 + 24) = v182;
                  }
                  else if ((*(_WORD *)(v181 + 30) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef((WebCore::Node *)v181);
                  }
                  v10 = (WebCore::Node *)v181;
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_8;
  }
  v190 = *((_QWORD *)v7 + 14);
  if (v190)
  {
    v10 = *(WebCore::Node **)(v190 + 8);
    if (v10)
LABEL_8:
      *((_DWORD *)v10 + 6) += 2;
  }
  else
  {
    v10 = 0;
  }
  v201 = 0;
  v11 = 0;
  v12 = (uint64_t *)((char *)this + 8);
LABEL_10:
  v198 = (WebCore::Node *)v11;
LABEL_15:
  v11 = (uint64_t)v7;
  v14 = *((unsigned __int16 *)v7 + 14);
  if ((~v14 & 0x408) != 0)
    goto LABEL_16;
  while (1)
  {
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 368))(v11))
    {
      LOWORD(v14) = *(_WORD *)(v11 + 28);
LABEL_16:
      v15 = v11;
      if ((v14 & 0x20) != 0)
      {
        v68 = **(_QWORD **)(v11 + 40);
        v69 = !v68 || (*(_WORD *)(v68 + 28) & 0x80) == 0;
        v15 = v11;
        if (!v69)
        {
          v15 = v11;
          if (!*(_BYTE *)(v68 + 193))
          {
            v185 = *(_QWORD *)(v68 + 200);
            v15 = v11;
            if (v185)
            {
              v186 = *(_QWORD *)(v185 + 8);
              v15 = v11;
              if (v186)
              {
                v15 = v11;
                if ((*(_WORD *)(v186 + 28) & 0x20) != 0)
                {
                  v15 = v11;
                  if (*(_QWORD *)(*(_QWORD *)(v186 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::useTag + 24))
                  {
                    v187 = *(_DWORD *)(v186 + 24);
                    *(_DWORD *)(v186 + 24) = v187 + 2;
                    if (v187)
                    {
                      *(_DWORD *)(v186 + 24) = v187;
                    }
                    else if ((*(_WORD *)(v186 + 30) & 0x400) == 0)
                    {
                      WebCore::Node::removedLastRef((WebCore::Node *)v186);
                    }
                    v15 = v186;
LABEL_457:
                    v6 = v199;
                    v12 = (uint64_t *)((char *)this + 8);
                  }
                }
              }
            }
          }
        }
      }
      *(_DWORD *)(v15 + 24) += 2;
      v16 = (*(unsigned __int8 *)(v15 + 22) >> 4) & 1;
      goto LABEL_18;
    }
    v15 = *(_QWORD *)(v11 + 112);
    if (v15)
    {
      v15 = *(_QWORD *)(v15 + 8);
      if (v15)
        goto LABEL_457;
    }
    LOBYTE(v16) = 0;
    v6 = v199;
    v12 = (uint64_t *)((char *)this + 8);
LABEL_18:
    *(_DWORD *)(v11 + 24) += 2;
    v202 = (WebCore *)v11;
    v203 = (WebCore::Node *)v15;
    if (v10)
    {
      if ((*((_BYTE *)v10 + 22) & 2) != 0)
        *((_DWORD *)v10 + 6) += 2;
      else
        (*(void (**)(WebCore::Node *))(*(_QWORD *)v10 + 88))(v10);
    }
    v204 = v10;
    *(_OWORD *)v205 = 0u;
    *(_OWORD *)v206 = 0u;
    LODWORD(v207) = v201;
    BYTE4(v207) = v16;
    *(_WORD *)((char *)&v207 + 5) = 0;
    HIBYTE(v207) = v6;
    if (v6 != 2)
      goto LABEL_31;
    v17 = (WTF *)WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v17 = 1;
    *((_QWORD *)v17 + 1) = 0;
    *((_QWORD *)v17 + 2) = 0;
    v19 = v205[1];
    v205[1] = v17;
    if (v19)
    {
      if (*(_DWORD *)v19 == 1)
      {
        v59 = *((unsigned int *)v19 + 5);
        if ((_DWORD)v59)
        {
          v60 = (WTF **)*((_QWORD *)v19 + 1);
          v61 = &v60[v59];
          do
          {
            v70 = *v60;
            *v60 = 0;
            if (v70)
            {
              if (*(_DWORD *)v70 == 1)
              {
                v71 = *((_QWORD *)v70 + 2);
                *((_QWORD *)v70 + 2) = 0;
                if (v71)
                {
                  if ((*(_BYTE *)(v71 + 22) & 2) != 0)
                  {
                    if (*(_DWORD *)(v71 + 24) == 2)
                    {
                      if ((*(_WORD *)(v71 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v71);
                    }
                    else
                    {
                      *(_DWORD *)(v71 + 24) -= 2;
                    }
                  }
                  else
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 96))(v71);
                  }
                }
                v72 = (WTF *)*((_QWORD *)v70 + 1);
                *((_QWORD *)v70 + 1) = 0;
                if (v72)
                {
                  if (*(_DWORD *)v72 == 1)
                  {
                    v76 = (uint64_t *)*((_QWORD *)v72 + 2);
                    *((_QWORD *)v72 + 2) = 0;
                    if (v76)
                    {
                      if (*v76)
                        WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v76, v18);
                      WTF::fastFree((WTF *)v76, v18);
                    }
                    v77 = (unsigned int *)*((_QWORD *)v72 + 1);
                    *((_QWORD *)v72 + 1) = 0;
                    if (v77)
                    {
                      do
                      {
                        v73 = __ldaxr(v77);
                        v74 = v73 - 1;
                      }
                      while (__stlxr(v74, v77));
                      if (!v74)
                      {
                        atomic_store(1u, v77);
                        WTF::fastFree((WTF *)v77, v18);
                      }
                    }
                    WTF::fastFree(v72, v18);
                  }
                  else
                  {
                    --*(_DWORD *)v72;
                  }
                }
                WTF::fastFree(v70, v18);
              }
              else
              {
                --*(_DWORD *)v70;
              }
            }
            ++v60;
          }
          while (v60 != v61);
        }
        v75 = (WTF *)*((_QWORD *)v19 + 1);
        if (v75)
        {
          *((_QWORD *)v19 + 1) = 0;
          *((_DWORD *)v19 + 4) = 0;
          WTF::fastFree(v75, v18);
        }
        WTF::fastFree(v19, v18);
        v12 = (uint64_t *)((char *)this + 8);
      }
      else
      {
        --*(_DWORD *)v19;
      }
    }
    v20 = (WTF *)WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v20 = 1;
    *((_QWORD *)v20 + 1) = 0;
    *((_QWORD *)v20 + 2) = 0;
    v22 = v206[0];
    v206[0] = v20;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
      {
        v62 = *((unsigned int *)v22 + 5);
        if ((_DWORD)v62)
        {
          v63 = (WTF **)*((_QWORD *)v22 + 1);
          v64 = &v63[v62];
          do
          {
            v78 = *v63;
            *v63 = 0;
            if (v78)
            {
              if (*(_DWORD *)v78 == 1)
              {
                v79 = *((_QWORD *)v78 + 2);
                *((_QWORD *)v78 + 2) = 0;
                if (v79)
                {
                  if ((*(_BYTE *)(v79 + 22) & 2) != 0)
                  {
                    if (*(_DWORD *)(v79 + 24) == 2)
                    {
                      if ((*(_WORD *)(v79 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v79);
                    }
                    else
                    {
                      *(_DWORD *)(v79 + 24) -= 2;
                    }
                  }
                  else
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v79 + 96))(v79);
                  }
                }
                v80 = (WTF *)*((_QWORD *)v78 + 1);
                *((_QWORD *)v78 + 1) = 0;
                if (v80)
                {
                  if (*(_DWORD *)v80 == 1)
                  {
                    v84 = (uint64_t *)*((_QWORD *)v80 + 2);
                    *((_QWORD *)v80 + 2) = 0;
                    if (v84)
                    {
                      if (*v84)
                        WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v84, v21);
                      WTF::fastFree((WTF *)v84, v21);
                    }
                    v85 = (unsigned int *)*((_QWORD *)v80 + 1);
                    *((_QWORD *)v80 + 1) = 0;
                    if (v85)
                    {
                      do
                      {
                        v81 = __ldaxr(v85);
                        v82 = v81 - 1;
                      }
                      while (__stlxr(v82, v85));
                      if (!v82)
                      {
                        atomic_store(1u, v85);
                        WTF::fastFree((WTF *)v85, v21);
                      }
                    }
                    WTF::fastFree(v80, v21);
                  }
                  else
                  {
                    --*(_DWORD *)v80;
                  }
                }
                WTF::fastFree(v78, v21);
              }
              else
              {
                --*(_DWORD *)v78;
              }
            }
            ++v63;
          }
          while (v63 != v64);
        }
        v83 = (WTF *)*((_QWORD *)v22 + 1);
        if (v83)
        {
          *((_QWORD *)v22 + 1) = 0;
          *((_DWORD *)v22 + 4) = 0;
          WTF::fastFree(v83, v21);
        }
        WTF::fastFree(v22, v21);
        v12 = (uint64_t *)((char *)this + 8);
      }
      else
      {
        --*(_DWORD *)v22;
      }
    }
    v23 = (WTF *)WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v23 = 1;
    *((_QWORD *)v23 + 1) = 0;
    *((_QWORD *)v23 + 2) = 0;
    v24 = v206[1];
    v206[1] = v23;
    if (!v24)
      goto LABEL_31;
    if (*(_DWORD *)v24 != 1)
    {
      --*(_DWORD *)v24;
LABEL_31:
      if ((*(_WORD *)(v11 + 28) & 0x10) != 0)
        goto LABEL_32;
      goto LABEL_188;
    }
    v65 = *((unsigned int *)v24 + 5);
    if ((_DWORD)v65)
    {
      v66 = (WTF **)*((_QWORD *)v24 + 1);
      v67 = &v66[v65];
      do
      {
        v86 = *v66;
        *v66 = 0;
        if (v86)
        {
          if (*(_DWORD *)v86 == 1)
          {
            v87 = *((_QWORD *)v86 + 2);
            *((_QWORD *)v86 + 2) = 0;
            if (v87)
            {
              if ((*(_BYTE *)(v87 + 22) & 2) != 0)
              {
                if (*(_DWORD *)(v87 + 24) == 2)
                {
                  if ((*(_WORD *)(v87 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v87);
                }
                else
                {
                  *(_DWORD *)(v87 + 24) -= 2;
                }
              }
              else
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v87 + 96))(v87);
              }
            }
            v88 = (WTF *)*((_QWORD *)v86 + 1);
            *((_QWORD *)v86 + 1) = 0;
            if (v88)
            {
              if (*(_DWORD *)v88 == 1)
              {
                v92 = (uint64_t *)*((_QWORD *)v88 + 2);
                *((_QWORD *)v88 + 2) = 0;
                if (v92)
                {
                  if (*v92)
                    WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v92, v5);
                  WTF::fastFree((WTF *)v92, v5);
                }
                v93 = (unsigned int *)*((_QWORD *)v88 + 1);
                *((_QWORD *)v88 + 1) = 0;
                if (v93)
                {
                  do
                  {
                    v89 = __ldaxr(v93);
                    v90 = v89 - 1;
                  }
                  while (__stlxr(v90, v93));
                  if (!v90)
                  {
                    atomic_store(1u, v93);
                    WTF::fastFree((WTF *)v93, v5);
                  }
                }
                WTF::fastFree(v88, v5);
              }
              else
              {
                --*(_DWORD *)v88;
              }
            }
            WTF::fastFree(v86, v5);
          }
          else
          {
            --*(_DWORD *)v86;
          }
        }
        ++v66;
      }
      while (v66 != v67);
    }
    v91 = (WTF *)*((_QWORD *)v24 + 1);
    if (v91)
    {
      *((_QWORD *)v24 + 1) = 0;
      *((_DWORD *)v24 + 4) = 0;
      WTF::fastFree(v91, v5);
    }
    WTF::fastFree(v24, v5);
    v12 = (uint64_t *)((char *)this + 8);
    if ((*(_WORD *)(v11 + 28) & 0x10) != 0)
    {
LABEL_32:
      v25 = *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::formTag + 24);
      goto LABEL_33;
    }
LABEL_188:
    v25 = 0;
LABEL_33:
    BYTE5(v207) = v25;
    v26 = *((unsigned int *)this + 5);
    if ((_DWORD)v26 == *((_DWORD *)this + 4))
    {
      WTF::Vector<WebCore::EventContext,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::EventContext>((uint64_t)v12, (unint64_t)&v202);
    }
    else
    {
      v27 = *v12;
      v28 = v202;
      if (v202)
        *((_DWORD *)v202 + 6) += 2;
      v29 = (WebCore **)(v27 + (v26 << 6));
      *v29 = v28;
      v30 = v203;
      if (v203)
      {
        if ((*((_BYTE *)v203 + 22) & 2) != 0)
          *((_DWORD *)v203 + 6) += 2;
        else
          (*(void (**)(WebCore::Node *))(*(_QWORD *)v203 + 88))(v203);
      }
      v29[1] = v30;
      v31 = v204;
      if (v204)
      {
        if ((*((_BYTE *)v204 + 22) & 2) != 0)
          *((_DWORD *)v204 + 6) += 2;
        else
          (*(void (**)(WebCore::Node *))(*(_QWORD *)v204 + 88))(v204);
      }
      v32 = v27 + (v26 << 6);
      *(_QWORD *)(v32 + 16) = v31;
      v33 = v205[0];
      if (v205[0])
        *((_DWORD *)v205[0] + 6) += 2;
      *(_QWORD *)(v32 + 24) = v33;
      v34 = v205[1];
      if (v205[1])
        ++*(_DWORD *)v205[1];
      v35 = v27 + (v26 << 6);
      *(_QWORD *)(v35 + 32) = v34;
      v36 = v206[0];
      if (v206[0])
        ++*(_DWORD *)v206[0];
      *(_QWORD *)(v35 + 40) = v36;
      v37 = v206[1];
      if (v206[1])
        ++*(_DWORD *)v206[1];
      v38 = v27 + (v26 << 6);
      *(_QWORD *)(v38 + 48) = v37;
      *(_QWORD *)(v38 + 56) = v207;
      ++*((_DWORD *)this + 5);
    }
    v39 = v206[1];
    v206[1] = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 != 1)
      {
        --*(_DWORD *)v39;
        goto LABEL_54;
      }
      v50 = *((unsigned int *)v39 + 5);
      if ((_DWORD)v50)
      {
        v51 = (WTF **)*((_QWORD *)v39 + 1);
        v52 = &v51[v50];
        while (1)
        {
          v94 = *v51;
          *v51 = 0;
          if (!v94)
            goto LABEL_198;
          if (*(_DWORD *)v94 == 1)
          {
            v95 = *((_QWORD *)v94 + 2);
            *((_QWORD *)v94 + 2) = 0;
            if (v95)
            {
              if ((*(_BYTE *)(v95 + 22) & 2) != 0)
              {
                if (*(_DWORD *)(v95 + 24) == 2)
                {
                  if ((*(_WORD *)(v95 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v95);
                }
                else
                {
                  *(_DWORD *)(v95 + 24) -= 2;
                }
              }
              else
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v95 + 96))(v95);
              }
            }
            v96 = (WTF *)*((_QWORD *)v94 + 1);
            *((_QWORD *)v94 + 1) = 0;
            if (v96)
            {
              if (*(_DWORD *)v96 == 1)
              {
                v111 = (WTF *)*((_QWORD *)v96 + 2);
                *((_QWORD *)v96 + 2) = 0;
                if (v111)
                {
                  v109 = *(_QWORD *)v111;
                  if (*(_QWORD *)v111)
                  {
                    v195 = v111;
                    v106 = *(unsigned int *)(v109 - 4);
                    if ((_DWORD)v106)
                    {
                      v105 = *(_QWORD *)v111;
                      do
                      {
                        v99 = *(WebCore::DOMWrapperWorld **)v105;
                        if (*(_QWORD *)v105 != -1)
                        {
                          v100 = *(_QWORD *)(v105 + 8);
                          if (v100)
                          {
                            v101 = (uint64_t *)(v100 - 16);
                            v102 = *(_QWORD *)(((v100 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
                            v103 = *(uint64_t **)(v100 - 8);
                            if (v103)
                            {
                              v104 = *v101;
                              *v103 = *v101;
                              *(_QWORD *)(v104 + 8) = v103;
                              *v101 = 0;
                              v101[1] = 0;
                            }
                            *v101 = *(_QWORD *)(v102 + 40);
                            *(_QWORD *)(v102 + 40) = v101;
                            *(_QWORD *)(v105 + 8) = 0;
                            v99 = *(WebCore::DOMWrapperWorld **)v105;
                          }
                          *(_QWORD *)v105 = 0;
                          if (v99)
                          {
                            if (*(_DWORD *)v99 == 1)
                            {
                              v191 = v109;
                              WebCore::DOMWrapperWorld::~DOMWrapperWorld(v99, v5);
                              WTF::fastFree(v107, v108);
                              v109 = v191;
                            }
                            else
                            {
                              --*(_DWORD *)v99;
                            }
                          }
                        }
                        v105 += 16;
                        --v106;
                      }
                      while (v106);
                    }
                    WTF::fastFree((WTF *)(v109 - 16), v5);
                    v6 = v199;
                    v111 = v195;
                  }
                  WTF::fastFree(v111, v5);
                }
                v112 = (unsigned int *)*((_QWORD *)v96 + 1);
                *((_QWORD *)v96 + 1) = 0;
                if (v112)
                {
                  do
                  {
                    v97 = __ldaxr(v112);
                    v98 = v97 - 1;
                  }
                  while (__stlxr(v98, v112));
                  if (!v98)
                  {
                    atomic_store(1u, v112);
                    WTF::fastFree((WTF *)v112, v5);
                  }
                }
                WTF::fastFree(v96, v5);
              }
              else
              {
                --*(_DWORD *)v96;
              }
            }
            WTF::fastFree(v94, v5);
            v12 = (uint64_t *)((char *)this + 8);
            if (++v51 == v52)
              break;
          }
          else
          {
            --*(_DWORD *)v94;
LABEL_198:
            if (++v51 == v52)
              break;
          }
        }
      }
      v110 = (WTF *)*((_QWORD *)v39 + 1);
      if (v110)
      {
        *((_QWORD *)v39 + 1) = 0;
        *((_DWORD *)v39 + 4) = 0;
        WTF::fastFree(v110, v5);
      }
      WTF::fastFree(v39, v5);
    }
LABEL_54:
    v40 = v206[0];
    v206[0] = 0;
    if (!v40)
      goto LABEL_57;
    if (*(_DWORD *)v40 != 1)
    {
      --*(_DWORD *)v40;
      goto LABEL_57;
    }
    v53 = *((unsigned int *)v40 + 5);
    if ((_DWORD)v53)
    {
      v54 = (WTF **)*((_QWORD *)v40 + 1);
      v55 = &v54[v53];
      while (1)
      {
        v113 = *v54;
        *v54 = 0;
        if (!v113)
          goto LABEL_240;
        if (*(_DWORD *)v113 == 1)
        {
          v114 = *((_QWORD *)v113 + 2);
          *((_QWORD *)v113 + 2) = 0;
          if (v114)
          {
            if ((*(_BYTE *)(v114 + 22) & 2) != 0)
            {
              if (*(_DWORD *)(v114 + 24) == 2)
              {
                if ((*(_WORD *)(v114 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v114);
              }
              else
              {
                *(_DWORD *)(v114 + 24) -= 2;
              }
            }
            else
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v114 + 96))(v114);
            }
          }
          v115 = (WTF *)*((_QWORD *)v113 + 1);
          *((_QWORD *)v113 + 1) = 0;
          if (v115)
          {
            if (*(_DWORD *)v115 == 1)
            {
              v130 = (WTF *)*((_QWORD *)v115 + 2);
              *((_QWORD *)v115 + 2) = 0;
              if (v130)
              {
                v128 = *(_QWORD *)v130;
                if (*(_QWORD *)v130)
                {
                  v196 = v130;
                  v125 = *(unsigned int *)(v128 - 4);
                  if ((_DWORD)v125)
                  {
                    v124 = *(_QWORD *)v130;
                    do
                    {
                      v118 = *(WebCore::DOMWrapperWorld **)v124;
                      if (*(_QWORD *)v124 != -1)
                      {
                        v119 = *(_QWORD *)(v124 + 8);
                        if (v119)
                        {
                          v120 = (uint64_t *)(v119 - 16);
                          v121 = *(_QWORD *)(((v119 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
                          v122 = *(uint64_t **)(v119 - 8);
                          if (v122)
                          {
                            v123 = *v120;
                            *v122 = *v120;
                            *(_QWORD *)(v123 + 8) = v122;
                            *v120 = 0;
                            v120[1] = 0;
                          }
                          *v120 = *(_QWORD *)(v121 + 40);
                          *(_QWORD *)(v121 + 40) = v120;
                          *(_QWORD *)(v124 + 8) = 0;
                          v118 = *(WebCore::DOMWrapperWorld **)v124;
                        }
                        *(_QWORD *)v124 = 0;
                        if (v118)
                        {
                          if (*(_DWORD *)v118 == 1)
                          {
                            v192 = v128;
                            WebCore::DOMWrapperWorld::~DOMWrapperWorld(v118, v5);
                            WTF::fastFree(v126, v127);
                            v128 = v192;
                          }
                          else
                          {
                            --*(_DWORD *)v118;
                          }
                        }
                      }
                      v124 += 16;
                      --v125;
                    }
                    while (v125);
                  }
                  WTF::fastFree((WTF *)(v128 - 16), v5);
                  v6 = v199;
                  v130 = v196;
                }
                WTF::fastFree(v130, v5);
              }
              v131 = (unsigned int *)*((_QWORD *)v115 + 1);
              *((_QWORD *)v115 + 1) = 0;
              if (v131)
              {
                do
                {
                  v116 = __ldaxr(v131);
                  v117 = v116 - 1;
                }
                while (__stlxr(v117, v131));
                if (!v117)
                {
                  atomic_store(1u, v131);
                  WTF::fastFree((WTF *)v131, v5);
                }
              }
              WTF::fastFree(v115, v5);
            }
            else
            {
              --*(_DWORD *)v115;
            }
          }
          WTF::fastFree(v113, v5);
          v12 = (uint64_t *)((char *)this + 8);
          if (++v54 == v55)
            break;
        }
        else
        {
          --*(_DWORD *)v113;
LABEL_240:
          if (++v54 == v55)
            break;
        }
      }
    }
    v129 = (WTF *)*((_QWORD *)v40 + 1);
    if (v129)
    {
      *((_QWORD *)v40 + 1) = 0;
      *((_DWORD *)v40 + 4) = 0;
      WTF::fastFree(v129, v5);
    }
    WTF::fastFree(v40, v5);
LABEL_57:
    v41 = v205[1];
    v205[1] = 0;
    if (!v41)
      goto LABEL_60;
    if (*(_DWORD *)v41 != 1)
    {
      --*(_DWORD *)v41;
      goto LABEL_60;
    }
    v56 = *((unsigned int *)v41 + 5);
    if ((_DWORD)v56)
    {
      v57 = (WTF **)*((_QWORD *)v41 + 1);
      v58 = &v57[v56];
      while (1)
      {
        v132 = *v57;
        *v57 = 0;
        if (!v132)
          goto LABEL_282;
        if (*(_DWORD *)v132 == 1)
        {
          v133 = *((_QWORD *)v132 + 2);
          *((_QWORD *)v132 + 2) = 0;
          if (v133)
          {
            if ((*(_BYTE *)(v133 + 22) & 2) != 0)
            {
              if (*(_DWORD *)(v133 + 24) == 2)
              {
                if ((*(_WORD *)(v133 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v133);
              }
              else
              {
                *(_DWORD *)(v133 + 24) -= 2;
              }
            }
            else
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v133 + 96))(v133);
            }
          }
          v134 = (WTF *)*((_QWORD *)v132 + 1);
          *((_QWORD *)v132 + 1) = 0;
          if (v134)
          {
            if (*(_DWORD *)v134 == 1)
            {
              v149 = (WTF *)*((_QWORD *)v134 + 2);
              *((_QWORD *)v134 + 2) = 0;
              if (v149)
              {
                v147 = *(_QWORD *)v149;
                if (*(_QWORD *)v149)
                {
                  v197 = v149;
                  v144 = *(unsigned int *)(v147 - 4);
                  if ((_DWORD)v144)
                  {
                    v143 = *(_QWORD *)v149;
                    do
                    {
                      v137 = *(WebCore::DOMWrapperWorld **)v143;
                      if (*(_QWORD *)v143 != -1)
                      {
                        v138 = *(_QWORD *)(v143 + 8);
                        if (v138)
                        {
                          v139 = (uint64_t *)(v138 - 16);
                          v140 = *(_QWORD *)(((v138 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
                          v141 = *(uint64_t **)(v138 - 8);
                          if (v141)
                          {
                            v142 = *v139;
                            *v141 = *v139;
                            *(_QWORD *)(v142 + 8) = v141;
                            *v139 = 0;
                            v139[1] = 0;
                          }
                          *v139 = *(_QWORD *)(v140 + 40);
                          *(_QWORD *)(v140 + 40) = v139;
                          *(_QWORD *)(v143 + 8) = 0;
                          v137 = *(WebCore::DOMWrapperWorld **)v143;
                        }
                        *(_QWORD *)v143 = 0;
                        if (v137)
                        {
                          if (*(_DWORD *)v137 == 1)
                          {
                            v193 = v147;
                            WebCore::DOMWrapperWorld::~DOMWrapperWorld(v137, v5);
                            WTF::fastFree(v145, v146);
                            v147 = v193;
                          }
                          else
                          {
                            --*(_DWORD *)v137;
                          }
                        }
                      }
                      v143 += 16;
                      --v144;
                    }
                    while (v144);
                  }
                  WTF::fastFree((WTF *)(v147 - 16), v5);
                  v6 = v199;
                  v149 = v197;
                }
                WTF::fastFree(v149, v5);
              }
              v150 = (unsigned int *)*((_QWORD *)v134 + 1);
              *((_QWORD *)v134 + 1) = 0;
              if (v150)
              {
                do
                {
                  v135 = __ldaxr(v150);
                  v136 = v135 - 1;
                }
                while (__stlxr(v136, v150));
                if (!v136)
                {
                  atomic_store(1u, v150);
                  WTF::fastFree((WTF *)v150, v5);
                }
              }
              WTF::fastFree(v134, v5);
            }
            else
            {
              --*(_DWORD *)v134;
            }
          }
          WTF::fastFree(v132, v5);
          v12 = (uint64_t *)((char *)this + 8);
          if (++v57 == v58)
            break;
        }
        else
        {
          --*(_DWORD *)v132;
LABEL_282:
          if (++v57 == v58)
            break;
        }
      }
    }
    v148 = (WTF *)*((_QWORD *)v41 + 1);
    if (v148)
    {
      *((_QWORD *)v41 + 1) = 0;
      *((_DWORD *)v41 + 4) = 0;
      WTF::fastFree(v148, v5);
    }
    WTF::fastFree(v41, v5);
LABEL_60:
    v42 = v205[0];
    v205[0] = 0;
    if (v42)
    {
      if (*((_DWORD *)v42 + 6) == 2)
      {
        if ((*((_WORD *)v42 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v42);
      }
      else
      {
        *((_DWORD *)v42 + 6) -= 2;
      }
    }
    v43 = v204;
    v204 = 0;
    if (v43)
    {
      if ((*((_BYTE *)v43 + 22) & 2) != 0)
      {
        if (*((_DWORD *)v43 + 6) == 2)
        {
          if ((*((_WORD *)v43 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v43);
        }
        else
        {
          *((_DWORD *)v43 + 6) -= 2;
        }
      }
      else
      {
        (*(void (**)(WebCore::Node *))(*(_QWORD *)v43 + 96))(v43);
      }
    }
    v44 = v203;
    v203 = 0;
    if (v44)
    {
      if ((*((_BYTE *)v44 + 22) & 2) != 0)
      {
        if (*((_DWORD *)v44 + 6) == 2)
        {
          if ((*((_WORD *)v44 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v44);
        }
        else
        {
          *((_DWORD *)v44 + 6) -= 2;
        }
      }
      else
      {
        (*(void (**)(WebCore::Node *))(*(_QWORD *)v44 + 96))(v44);
      }
    }
    Ref = v202;
    v202 = 0;
    if (Ref)
    {
      if (*((_DWORD *)Ref + 6) == 2)
      {
        if ((*((_WORD *)Ref + 15) & 0x400) == 0)
          Ref = (WebCore *)WebCore::Node::removedLastRef(Ref);
      }
      else
      {
        *((_DWORD *)Ref + 6) -= 2;
      }
    }
    v46 = *(_WORD *)(v11 + 28);
    if ((v46 & 0x80) != 0)
    {
      *(_DWORD *)(v11 + 24) += 2;
      if (v198)
      {
        if (*((_DWORD *)v198 + 6) == 2)
        {
          if ((*((_WORD *)v198 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v198);
        }
        else
        {
          *((_DWORD *)v198 + 6) -= 2;
        }
      }
      v151 = *((_QWORD *)v10 + 5);
      v152 = *(_QWORD *)(v11 + 40);
      if ((*((_BYTE *)a2 + 22) & 2) != 0 && **((_QWORD **)a2 + 5) == v11 && (*((_DWORD *)a3 + 5) & 8) == 0)
      {
        result = v11;
        goto LABEL_356;
      }
      v153 = *(_QWORD *)(v11 + 200);
      if (!v153)
      {
        v7 = 0;
        goto LABEL_331;
      }
      v7 = *(WebCore::Node **)(v153 + 8);
      if (v7)
      {
        v154 = 0;
        *((_DWORD *)v7 + 6) += 2;
      }
      else
      {
LABEL_331:
        v154 = 1;
      }
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v11);
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
      if ((v154 & 1) != 0)
      {
        result = v11;
        v11 = (uint64_t)v7;
        goto LABEL_356;
      }
      if (*(_BYTE *)(v11 + 193) != 2)
        --v201;
      if (v151 == v152)
      {
        v155 = *((unsigned __int16 *)v7 + 14);
        if ((~v155 & 0x408) != 0)
        {
LABEL_339:
          v156 = v7;
          if ((v155 & 0x20) != 0)
          {
            WebCore::SVGElement::correspondingUseElement((uint64_t)v7, &v202);
            v156 = v202;
            if (v202)
            {
              if (*((_DWORD *)v202 + 6) == 2)
              {
                if ((*((_WORD *)v202 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v202);
              }
              else
              {
                *((_DWORD *)v202 + 6) -= 2;
              }
            }
            else
            {
              v156 = v7;
            }
          }
LABEL_340:
          *((_DWORD *)v156 + 6) += 2;
        }
        else
        {
          if (!(*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)v7 + 368))(v7))
          {
            LOWORD(v155) = *((_WORD *)v7 + 14);
            goto LABEL_339;
          }
          v188 = *((_QWORD *)v7 + 14);
          if (v188)
          {
            v156 = *(WebCore **)(v188 + 8);
            if (v156)
            {
              v6 = v199;
              v12 = (uint64_t *)((char *)this + 8);
              goto LABEL_340;
            }
          }
          else
          {
            v156 = 0;
          }
          v6 = v199;
          v12 = (uint64_t *)((char *)this + 8);
        }
        if (*((_DWORD *)v10 + 6) == 2)
        {
          if ((*((_WORD *)v10 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v10);
        }
        else
        {
          *((_DWORD *)v10 + 6) -= 2;
        }
        v10 = v156;
      }
      if (!v7)
      {
        result = v11;
        v11 = 0;
        goto LABEL_356;
      }
      goto LABEL_10;
    }
    v47 = *(_QWORD *)(v11 + 32);
    if (!v47)
      break;
    *(_DWORD *)(v47 + 24) += 2;
    if ((*(_WORD *)(v47 + 28) & 8) == 0)
    {
      v7 = (WebCore::Node *)v47;
      v13 = *(_DWORD *)(v11 + 24) - 2;
      if (*(_DWORD *)(v11 + 24) != 2)
        goto LABEL_14;
      goto LABEL_78;
    }
    if ((*(_QWORD *)(v47 + 72) & 0xFFFFFFFFFFFFLL) == 0
      || (v48 = *(_QWORD *)((*(_QWORD *)(v47 + 72) & 0xFFFFFFFFFFFFLL) + 0x58)) == 0)
    {
      v7 = (WebCore::Node *)v47;
      goto LABEL_13;
    }
    *(_DWORD *)(v48 + 24) += 2;
    v49 = *(_QWORD *)(v48 + 224);
    if (v49 && (v183 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, v11)) != 0)
    {
      v7 = (WebCore::Node *)v183;
      *(_DWORD *)(v183 + 24) += 2;
      v184 = v201;
      if (*(_BYTE *)(v48 + 193) != 2)
        v184 = v201 + 1;
      v201 = v184;
      if (*(_DWORD *)(v47 + 24) == 2)
      {
        if ((*(_WORD *)(v47 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v47);
      }
      else
      {
        *(_DWORD *)(v47 + 24) -= 2;
      }
    }
    else
    {
      v7 = (WebCore::Node *)v47;
    }
    if (*(_DWORD *)(v48 + 24) == 2)
    {
      if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v48);
LABEL_13:
      v13 = *(_DWORD *)(v11 + 24) - 2;
      if (*(_DWORD *)(v11 + 24) != 2)
        goto LABEL_14;
      goto LABEL_78;
    }
    *(_DWORD *)(v48 + 24) -= 2;
    v13 = *(_DWORD *)(v11 + 24) - 2;
    if (*(_DWORD *)(v11 + 24) != 2)
    {
LABEL_14:
      *(_DWORD *)(v11 + 24) = v13;
      goto LABEL_15;
    }
LABEL_78:
    if ((*(_WORD *)(v11 + 30) & 0x400) != 0)
      goto LABEL_15;
    WebCore::Node::removedLastRef((WebCore::Node *)v11);
    v11 = (uint64_t)v7;
    v14 = *((unsigned __int16 *)v7 + 14);
    if ((~v14 & 0x408) != 0)
      goto LABEL_16;
  }
  if ((v46 & 0xF000) == 0x9000)
  {
    v157 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v157 || (v158 = *(_QWORD *)(v157 + 96)) == 0)
      v158 = WebCore::threadGlobalDataSlow(Ref);
    v159 = *(_QWORD *)(v158 + 40);
    if (!v159)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v158);
      v159 = *(_QWORD *)(v158 + 40);
    }
    if (*((_QWORD *)a3 + 3) != *(_QWORD *)(v159 + 1104) && v10 != 0)
    {
      v161 = *(_DWORD **)(v11 + 696);
      if (v161)
      {
        v162 = v161[6];
        v161[6] = v162 + 1;
        if ((*((_BYTE *)v161 + 22) & 2) != 0)
          v161[6] = v162 + 3;
        else
          (*(void (**)(_DWORD *))(*(_QWORD *)v161 + 88))(v161);
        *(_DWORD *)(v11 + 24) += 2;
        v202 = (WebCore *)v11;
        v203 = (WebCore::Node *)v161;
        if ((*((_BYTE *)v10 + 22) & 2) != 0)
          *((_DWORD *)v10 + 6) += 2;
        else
          (*(void (**)(WebCore::Node *))(*(_QWORD *)v10 + 88))(v10);
        v204 = v10;
        *(_OWORD *)v205 = 0u;
        *(_OWORD *)v206 = 0u;
        v207 = v201 | 0x300000000000000;
        v163 = *((unsigned int *)this + 5);
        if ((_DWORD)v163 == *((_DWORD *)this + 4))
        {
          WTF::Vector<WebCore::EventContext,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::EventContext>((uint64_t)v12, (unint64_t)&v202);
        }
        else
        {
          v164 = *v12;
          v165 = (WebCore **)(*v12 + (v163 << 6));
          v166 = v202;
          if (v202)
            *((_DWORD *)v202 + 6) += 2;
          *v165 = v166;
          v167 = v165 + 1;
          v168 = v203;
          if (v203)
          {
            if ((*((_BYTE *)v203 + 22) & 2) != 0)
              *((_DWORD *)v203 + 6) += 2;
            else
              (*(void (**)(WebCore::Node *))(*(_QWORD *)v203 + 88))(v203);
          }
          *v167 = v168;
          v169 = v164 + (v163 << 6);
          v170 = v204;
          if (v204)
          {
            if ((*((_BYTE *)v204 + 22) & 2) != 0)
              *((_DWORD *)v204 + 6) += 2;
            else
              (*(void (**)(WebCore::Node *))(*(_QWORD *)v204 + 88))(v204);
          }
          *(_QWORD *)(v169 + 16) = v170;
          v171 = v205[0];
          if (v205[0])
            *((_DWORD *)v205[0] + 6) += 2;
          *(_QWORD *)(v169 + 24) = v171;
          v172 = v164 + (v163 << 6);
          v173 = v205[1];
          if (v205[1])
            ++*(_DWORD *)v205[1];
          *(_QWORD *)(v172 + 32) = v173;
          v174 = (WTF **)(v172 + 40);
          v175 = v206[0];
          if (v206[0])
            ++*(_DWORD *)v206[0];
          *v174 = v175;
          v176 = v206[1];
          if (v206[1])
            ++*(_DWORD *)v206[1];
          v177 = v164 + (v163 << 6);
          *(_QWORD *)(v177 + 48) = v176;
          *(_QWORD *)(v177 + 56) = v207;
          ++*((_DWORD *)this + 5);
        }
        WebCore::EventContext::~EventContext((WebCore::EventContext *)&v202, v5);
        if (v161[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v161 + 72))(v161);
        else
          --v161[6];
      }
    }
  }
  result = (uint64_t)v198;
  if (v198)
  {
LABEL_356:
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v10);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v11);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  return result;
}

WebCore::Node *WebCore::EventPath::setRelatedTarget(WebCore::EventPath *this, WebCore::Node *a2, WebCore::Node *a3)
{
  uint64_t v5;
  void *v6;
  WebCore::Node *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  WebCore::TreeScope *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  WebCore::TreeScope **v18;
  __int16 v19;
  WebCore::Node *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  __int16 v28;
  WebCore::TreeScope *v29;
  __int16 v30;
  WTF *v31;
  uint64_t i;
  uint64_t *v33;
  uint64_t v34;
  __int16 v35;
  WTF *v36;
  WebCore::Node *v38;
  WebCore::Node *result;
  uint64_t v40;
  WebCore::Node *v42;
  WebCore::Node *v43;
  WebCore::Node *v44;
  WTF *v45;
  int v46;
  unsigned int v47;
  uint64_t v48;

  v42 = a3;
  *((_DWORD *)a3 + 6) += 2;
  if (!*((_DWORD *)this + 5))
  {
    __break(0xC471u);
LABEL_111:
    JUMPOUT(0x1959E4180);
  }
  v5 = **((_QWORD **)this + 1);
  *(_DWORD *)(v5 + 24) += 2;
  WebCore::RelatedNodeRetargeter::RelatedNodeRetargeter((uint64_t *)&v43, (uint64_t *)&v42, v5);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    v7 = a2;
    if ((*(_WORD *)(v5 + 30) & 0x400) != 0)
      goto LABEL_5;
    WebCore::Node::removedLastRef((WebCore::Node *)v5);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  v7 = a2;
LABEL_5:
  if (v42)
  {
    if (*((_DWORD *)v42 + 6) == 2)
    {
      if ((*((_WORD *)v42 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v42);
        v7 = a2;
      }
    }
    else
    {
      *((_DWORD *)v42 + 6) -= 2;
    }
  }
  v8 = **((_QWORD **)v7 + 5);
  v9 = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v8 + 24) = v9 + 2;
  v10 = *((unsigned int *)this + 5);
  if (!(_DWORD)v10)
  {
LABEL_68:
    if (v9)
    {
      *(_DWORD *)(v8 + 24) = v9;
    }
    else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v8);
    }
    goto LABEL_70;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = v10 << 6;
  v40 = v8;
  while (1)
  {
    if (v12 >= *((unsigned int *)this + 5))
    {
      __break(0xC471u);
      JUMPOUT(0x1959E42DCLL);
    }
    v15 = *((_QWORD *)this + 1);
    v16 = (uint64_t *)(v15 + v11);
    if ((*(unsigned __int8 *)(v15 + v11 + 63) | 2) == 3)
      break;
    v18 = (WebCore::TreeScope **)v13;
LABEL_38:
    ++v12;
    v11 += 64;
    v13 = (WebCore::TreeScope *)v18;
    if (v14 == v11)
      goto LABEL_61;
  }
  v17 = *v16;
  *(_DWORD *)(v17 + 24) = *(_DWORD *)(*v16 + 24) + 2;
  v18 = *(WebCore::TreeScope ***)(v17 + 40);
  v19 = *((_WORD *)*v18 + 14);
  if ((!*v18 || (v19 & 0xF000) != 0x9000) && (v19 & 0x80) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1959E42B4);
  }
  *((_DWORD *)*v18 + 6) += 2;
  if (v13 && v13 != (WebCore::TreeScope *)v18)
  {
    WebCore::RelatedNodeRetargeter::moveToNewTreeScope((uint64_t)&v43, v13, v18);
    v8 = v40;
    v7 = a2;
  }
  v20 = v44;
  if (v44)
    *((_DWORD *)v44 + 6) += 2;
  if (v7 != a3)
  {
    v21 = v15 + v11;
    if (v20 != *(WebCore::Node **)(v15 + v11 + 16))
    {
      v22 = *(_QWORD *)(v21 + 24);
      *(_QWORD *)(v21 + 24) = v20;
      if (v22)
      {
        if (*(_DWORD *)(v22 + 24) == 2)
        {
          if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v22);
            v8 = v40;
            v7 = a2;
          }
        }
        else
        {
          *(_DWORD *)(v22 + 24) -= 2;
        }
      }
      *(_BYTE *)(v15 + v11 + 62) = 1;
      goto LABEL_30;
    }
    WTF::VectorDestructor<true,WebCore::EventContext>::destruct(*((_QWORD *)this + 1) + v11, (WTF::StringImpl *)(*((_QWORD *)this + 1) + ((unint64_t)*((unsigned int *)this + 5) << 6)));
    *((_DWORD *)this + 5) = v12;
    if (v20)
    {
      v8 = v40;
      if (*((_DWORD *)v20 + 6) != 2)
      {
        v25 = 0;
        *((_DWORD *)v20 + 6) -= 2;
        v26 = (uint64_t *)v18;
        v18 = (WebCore::TreeScope **)v13;
LABEL_56:
        v7 = a2;
        goto LABEL_31;
      }
      if ((*((_WORD *)v20 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v20);
    }
    v25 = 0;
    v26 = (uint64_t *)v18;
    v18 = (WebCore::TreeScope **)v13;
    v8 = v40;
    goto LABEL_56;
  }
  v23 = v15 + v11;
  v24 = *(_QWORD *)(v23 + 24);
  *(_QWORD *)(v23 + 24) = v20;
  if (v24)
  {
    if (*(_DWORD *)(v24 + 24) == 2)
    {
      if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v24);
        v8 = v40;
        v7 = a2;
      }
    }
    else
    {
      *(_DWORD *)(v24 + 24) -= 2;
    }
  }
  *(_BYTE *)(v23 + 62) = 1;
  if (*(_QWORD *)v23 != v8)
  {
LABEL_30:
    v25 = 1;
    v26 = (uint64_t *)v13;
    if (!v13)
      goto LABEL_35;
    goto LABEL_31;
  }
  WTF::VectorDestructor<true,WebCore::EventContext>::destruct(*((_QWORD *)this + 1) + v11 + 64, (WTF::StringImpl *)(*((_QWORD *)this + 1) + ((unint64_t)*((unsigned int *)this + 5) << 6)));
  v8 = v40;
  v7 = a2;
  v25 = 0;
  *((_DWORD *)this + 5) = v12 + 1;
  v26 = (uint64_t *)v18;
  v18 = (WebCore::TreeScope **)v13;
LABEL_31:
  v27 = *v26;
  v28 = *(_WORD *)(*v26 + 28);
  if ((!v27 || (v28 & 0xF000) != 0x9000) && (v28 & 0x80) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1959E42D4);
  }
  if (*(_DWORD *)(v27 + 24) == 2)
  {
    if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v27);
    v8 = v40;
    v7 = a2;
  }
  else
  {
    *(_DWORD *)(v27 + 24) -= 2;
  }
LABEL_35:
  if (*(_DWORD *)(v17 + 24) == 2)
  {
    if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v17);
      v8 = v40;
      v7 = a2;
    }
  }
  else
  {
    *(_DWORD *)(v17 + 24) -= 2;
  }
  if (v25)
    goto LABEL_38;
LABEL_61:
  if (v18)
  {
    v29 = *v18;
    v30 = *((_WORD *)*v18 + 14);
    if ((!*v18 || (v30 & 0xF000) != 0x9000) && (v30 & 0x80) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1959E4294);
    }
    if (*((_DWORD *)v29 + 6) == 2)
    {
      if ((*((_WORD *)v29 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v29);
        v8 = v40;
      }
    }
    else
    {
      *((_DWORD *)v29 + 6) -= 2;
    }
  }
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 24) - 2;
    goto LABEL_68;
  }
LABEL_70:
  if (v47)
  {
    v31 = v45;
    for (i = 8 * v47; i; i -= 8)
    {
      v33 = *(uint64_t **)v31;
      *(_QWORD *)v31 = 0;
      if (v33)
      {
        v34 = *v33;
        v35 = *(_WORD *)(*v33 + 28);
        if ((!v34 || (v35 & 0xF000) != 0x9000) && (v35 & 0x80) == 0)
        {
          __break(0xC471u);
          goto LABEL_111;
        }
        if (*(_DWORD *)(v34 + 24) == 2)
        {
          if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v34);
        }
        else
        {
          *(_DWORD *)(v34 + 24) -= 2;
        }
      }
      v31 = (WTF *)((char *)v31 + 8);
    }
  }
  v36 = v45;
  if (&v48 != (uint64_t *)v45 && v45 != 0)
  {
    v45 = 0;
    v46 = 0;
    WTF::fastFree(v36, v6);
  }
  v38 = v44;
  v44 = 0;
  if (v38)
  {
    if (*((_DWORD *)v38 + 6) == 2)
    {
      if ((*((_WORD *)v38 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v38);
    }
    else
    {
      *((_DWORD *)v38 + 6) -= 2;
    }
  }
  result = v43;
  v43 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

WebCore::Node *WebCore::EventPath::retargetTouchLists(WebCore::Node *this, const WebCore::TouchEvent *a2)
{
  WebCore::Node *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t j;
  uint64_t v10;
  uint64_t v11;
  uint64_t k;

  v3 = this;
  v4 = *((_QWORD *)a2 + 21);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 + 20);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
        this = WebCore::EventPath::retargetTouch(v3, 0, *(WebCore::Touch **)(*(_QWORD *)(v4 + 8) + 8 * i));
    }
  }
  v7 = *((_QWORD *)a2 + 22);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 + 20);
    if ((_DWORD)v8)
    {
      for (j = 0; j != v8; ++j)
        this = WebCore::EventPath::retargetTouch(v3, 1, *(WebCore::Touch **)(*(_QWORD *)(v7 + 8) + 8 * j));
    }
  }
  v10 = *((_QWORD *)a2 + 23);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 + 20);
    if ((_DWORD)v11)
    {
      for (k = 0; k != v11; ++k)
        this = WebCore::EventPath::retargetTouch(v3, 2, *(WebCore::Touch **)(*(_QWORD *)(v10 + 8) + 8 * k));
    }
  }
  return this;
}

uint64_t WebCore::RelatedNodeRetargeter::moveToNewTreeScope(uint64_t this, WebCore::TreeScope *a2, WebCore::TreeScope **a3)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  if (!*(_BYTE *)(this + 100))
  {
    v3 = this;
    this = *(_QWORD *)(this + 8);
    if (*(WebCore::TreeScope **)(this + 40) == a2)
    {
      v5 = *(_DWORD *)(v3 + 96);
      if (a3[2] != a2)
      {
        *(_DWORD *)(v3 + 96) = v5 + 1;
        if ((*(_WORD *)(*(_QWORD *)a2 + 28) & 0x80) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1959E45B0);
        }
        v6 = *(_QWORD *)(*(_QWORD *)a2 + 200);
        if (v6)
        {
          v6 = *(_QWORD *)(v6 + 8);
          if (v6)
            *(_DWORD *)(v6 + 24) += 2;
        }
        *(_QWORD *)(v3 + 8) = v6;
LABEL_9:
        if (*(_DWORD *)(this + 24) == 2)
        {
          if ((*(_WORD *)(this + 30) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)this);
        }
        else
        {
          *(_DWORD *)(this + 24) -= 2;
        }
        return this;
      }
      if (v5)
      {
        v7 = (uint64_t *)(v3 + 16);
        v8 = *(_DWORD *)(v3 + 28);
        if (!v8)
        {
          v9 = *(_QWORD **)(*(_QWORD *)v3 + 40);
          v19 = v9;
          if (v9)
          {
            do
            {
              v10 = *(unsigned int *)(v3 + 28);
              if ((_DWORD)v10 == *(_DWORD *)(v3 + 24))
              {
                this = WTF::Vector<WTF::RefPtr<WebCore::TreeScope,WTF::RawPtrTraits<WebCore::TreeScope>,WTF::DefaultRefDerefTraits<WebCore::TreeScope>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TreeScope*&>(v3 + 16, (uint64_t *)&v19);
              }
              else
              {
                v11 = *v7;
                v12 = *(_WORD *)(*v9 + 28);
                if ((!*v9 || (v12 & 0xF000) != 0x9000) && (v12 & 0x80) == 0)
                  goto LABEL_41;
                *(_DWORD *)(*v9 + 24) += 2;
                *(_QWORD *)(v11 + 8 * v10) = v9;
                *(_DWORD *)(v3 + 28) = v10 + 1;
              }
              v9 = (_QWORD *)v9[2];
              v19 = v9;
            }
            while (v9);
            v5 = *(_DWORD *)(v3 + 96);
            v8 = *(_DWORD *)(v3 + 28);
          }
          else
          {
            v8 = 0;
          }
        }
        v13 = v5 - 1;
        if (v8 <= v5 - 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1959E45D8);
        }
        v14 = *v7;
        if (*(WebCore::TreeScope ***)(*v7 + 8 * v13) == a3)
        {
          *(_DWORD *)(v3 + 96) = v13;
          v15 = (uint64_t *)v3;
          if (v5 != 1)
          {
            v16 = v5 - 2;
            if (v8 <= v16)
            {
LABEL_41:
              __break(0xC471u);
              JUMPOUT(0x1959E44F0);
            }
            v17 = **(_QWORD **)(v14 + 8 * v16);
            if ((*(_WORD *)(v17 + 28) & 0x80) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1959E45D0);
            }
            v18 = *(_QWORD *)(v17 + 200);
            if (!v18)
            {
LABEL_34:
              this = *(_QWORD *)(v3 + 8);
              *(_QWORD *)(v3 + 8) = v18;
              if (!this)
                return this;
              goto LABEL_9;
            }
            v15 = (uint64_t *)(v18 + 8);
          }
          v18 = *v15;
          if (*v15)
            *(_DWORD *)(v18 + 24) += 2;
          goto LABEL_34;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::EventPath::adjustForDisabledFormControl(uint64_t this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(unsigned int *)(this + 20);
  if ((_DWORD)v1)
  {
    v2 = this;
    v3 = 0;
    v4 = 0;
    while (1)
    {
      this = *(_QWORD *)(*(_QWORD *)(v2 + 8) + v3);
      if (this)
      {
        if ((*(_WORD *)(this + 28) & 8) != 0)
        {
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 960))(this);
          v1 = *(unsigned int *)(v2 + 20);
          if ((_DWORD)this)
            break;
        }
      }
      ++v4;
      v3 += 64;
      if (v4 >= v1)
        return this;
    }
    this = WTF::VectorDestructor<true,WebCore::EventContext>::destruct(*(_QWORD *)(v2 + 8) + v3, (WTF::StringImpl *)(*(_QWORD *)(v2 + 8) + (v1 << 6)));
    *(_DWORD *)(v2 + 20) = v4;
  }
  return this;
}

WebCore::Node *WebCore::EventPath::retargetTouch(WebCore::Node *result, int a2, WebCore::Touch *a3)
{
  uint64_t v3;
  WebCore::Node *v4;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WebCore::TreeScope **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  WebCore::TreeScope *v14;
  uint64_t v15;
  uint64_t *v16;
  __int16 v17;
  WebCore::Node *v18;
  uint64_t *v19;
  uint64_t v20;
  char **v21;
  uint64_t v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  WebCore::Node *v26;
  uint64_t v27;
  __int16 v28;
  WebCore::TreeScope *v29;
  __int16 v30;
  WTF *v31;
  uint64_t i;
  uint64_t *v33;
  uint64_t v34;
  __int16 v35;
  WTF *v36;
  WebCore::Node *v38;
  WebCore::Node *v39;
  WebCore::Node *v40;
  WebCore::Node *v41;
  WTF *v42;
  int v43;
  unsigned int v44;
  uint64_t v45;

  v3 = *((_QWORD *)a3 + 2);
  if (v3 && (*(_QWORD *)(v3 + 16) & 0x2000000000000) != 0)
  {
    v4 = result;
    *(_DWORD *)(v3 + 24) += 2;
    v39 = (WebCore::Node *)v3;
    if (!*((_DWORD *)result + 5))
    {
      __break(0xC471u);
LABEL_95:
      JUMPOUT(0x1959E49B8);
    }
    v7 = **((_QWORD **)result + 1);
    *(_DWORD *)(v7 + 24) += 2;
    WebCore::RelatedNodeRetargeter::RelatedNodeRetargeter((uint64_t *)&v40, (uint64_t *)&v39, v7);
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
    if (v39)
    {
      if (*((_DWORD *)v39 + 6) == 2)
      {
        if ((*((_WORD *)v39 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v39);
      }
      else
      {
        *((_DWORD *)v39 + 6) -= 2;
      }
    }
    v9 = *((unsigned int *)v4 + 5);
    if ((_DWORD)v9)
    {
      v10 = 0;
      v11 = (uint64_t *)*((_QWORD *)v4 + 1);
      v12 = &v11[8 * v9];
      v13 = v11 + 4;
      do
      {
        v14 = (WebCore::TreeScope *)v10;
        v16 = v13 - 4;
        v15 = *(v13 - 4);
        *(_DWORD *)(v15 + 24) += 2;
        v10 = *(WebCore::TreeScope ***)(v15 + 40);
        v17 = *((_WORD *)*v10 + 14);
        if ((!*v10 || (v17 & 0xF000) != 0x9000) && (v17 & 0x80) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1959E4AB0);
        }
        *((_DWORD *)*v10 + 6) += 2;
        if (v14 && v14 != (WebCore::TreeScope *)v10)
          WebCore::RelatedNodeRetargeter::moveToNewTreeScope((uint64_t)&v40, v14, v10);
        if (*((_BYTE *)v13 + 31) == 2)
        {
          v18 = v41;
          if (v41)
            *((_DWORD *)v41 + 6) += 2;
          if (a2 == 2)
          {
            v19 = v11 + 6;
          }
          else if (a2 == 1)
          {
            v19 = v11 + 5;
          }
          else if (a2)
          {
            v19 = v13;
          }
          else
          {
            v19 = v11 + 4;
          }
          v20 = *v19;
          WebCore::Touch::cloneWithNewTarget(a3, v18, (uint64_t *)&v39);
          v21 = (char **)(v20 + 8);
          v22 = *(unsigned int *)(v20 + 20);
          if ((_DWORD)v22 == *(_DWORD *)(v20 + 16))
          {
            v23 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v22 + 1, (unint64_t)&v39);
            v22 = *(unsigned int *)(v20 + 20);
            v24 = (char *)(*(_QWORD *)(v20 + 8) + 8 * v22);
          }
          else
          {
            v24 = &(*v21)[8 * v22];
            v23 = (uint64_t *)&v39;
          }
          v25 = *v23;
          *v23 = 0;
          *(_QWORD *)v24 = v25;
          *(_DWORD *)(v20 + 20) = v22 + 1;
          v26 = v39;
          v39 = 0;
          if (v26)
            WTF::RefCounted<WebCore::Touch>::deref(v26, v8);
          if (v18)
          {
            if (*((_DWORD *)v18 + 6) == 2)
            {
              if ((*((_WORD *)v18 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v18);
            }
            else
            {
              *((_DWORD *)v18 + 6) -= 2;
            }
          }
        }
        if (v14)
        {
          v27 = *(_QWORD *)v14;
          v28 = *(_WORD *)(*(_QWORD *)v14 + 28);
          if ((!*(_QWORD *)v14 || (v28 & 0xF000) != 0x9000) && (v28 & 0x80) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1959E4AD0);
          }
          if (*(_DWORD *)(v27 + 24) == 2)
          {
            if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v27);
          }
          else
          {
            *(_DWORD *)(v27 + 24) -= 2;
          }
        }
        if (*(_DWORD *)(v15 + 24) == 2)
        {
          if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v15);
        }
        else
        {
          *(_DWORD *)(v15 + 24) -= 2;
        }
        v13 += 8;
        v11 = v16 + 8;
      }
      while (v16 + 8 != v12);
      v29 = *v10;
      v30 = *((_WORD *)*v10 + 14);
      if ((!*v10 || (v30 & 0xF000) != 0x9000) && (v30 & 0x80) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1959E4A90);
      }
      if (*((_DWORD *)v29 + 6) == 2)
      {
        if ((*((_WORD *)v29 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v29);
      }
      else
      {
        *((_DWORD *)v29 + 6) -= 2;
      }
    }
    if (v44)
    {
      v31 = v42;
      for (i = 8 * v44; i; i -= 8)
      {
        v33 = *(uint64_t **)v31;
        *(_QWORD *)v31 = 0;
        if (v33)
        {
          v34 = *v33;
          v35 = *(_WORD *)(*v33 + 28);
          if ((!v34 || (v35 & 0xF000) != 0x9000) && (v35 & 0x80) == 0)
          {
            __break(0xC471u);
            goto LABEL_95;
          }
          if (*(_DWORD *)(v34 + 24) == 2)
          {
            if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v34);
          }
          else
          {
            *(_DWORD *)(v34 + 24) -= 2;
          }
        }
        v31 = (WTF *)((char *)v31 + 8);
      }
    }
    v36 = v42;
    if (&v45 != (uint64_t *)v42 && v42 != 0)
    {
      v42 = 0;
      v43 = 0;
      WTF::fastFree(v36, v8);
    }
    v38 = v41;
    v41 = 0;
    if (v38)
    {
      if (*((_DWORD *)v38 + 6) == 2)
      {
        if ((*((_WORD *)v38 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v38);
      }
      else
      {
        *((_DWORD *)v38 + 6) -= 2;
      }
    }
    result = v40;
    v40 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return (WebCore::Node *)WebCore::Node::removedLastRef(result);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
    }
  }
  return result;
}

WebCore::Node *WebCore::EventPath::computePathUnclosedToTarget@<X0>(WebCore::EventPath *this@<X0>, const WebCore::EventTarget *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  WebCore::Node *result;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _WORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;

  *(_QWORD *)(a3 + 8) = 0;
  v3 = *((unsigned int *)this + 5);
  if (!(_DWORD)v3)
  {
    __break(0xC471u);
    JUMPOUT(0x1959E4E14);
  }
  if (v3 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x1959E4E3CLL);
  }
  result = (WebCore::Node *)WTF::fastMalloc((WTF *)(8 * v3));
  *(_DWORD *)(a3 + 8) = v3;
  *(_QWORD *)a3 = result;
  v9 = *((unsigned int *)this + 5);
  if (!(_DWORD)v9)
    goto LABEL_62;
  v10 = 0;
  v11 = *((_QWORD *)this + 1);
  v12 = -1;
  while (*(const WebCore::EventTarget **)(v11 + v10 + 8) != a2)
  {
    v10 += 64;
    ++v12;
    if (v9 << 6 == v10)
      goto LABEL_62;
  }
  v39 = v3;
  v13 = v12 + 1;
  if (v12 + 1 >= v9)
  {
LABEL_62:
    __break(0xC471u);
    JUMPOUT(0x1959E4B80);
  }
  v14 = v11 + v10;
  v15 = *(_DWORD *)(v14 + 56);
  v16 = v12;
  v38 = v15;
  while (1)
  {
    v17 = *(_DWORD *)(v14 + 56);
    if (v15 >= v17)
    {
      v18 = *(_QWORD *)(v14 + 8);
      v19 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v19 == *(_DWORD *)(a3 + 8))
      {
        result = (WebCore::Node *)WTF::Vector<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::EventTarget&>(a3, *(_QWORD *)(v14 + 8));
      }
      else
      {
        v20 = *(_QWORD *)a3;
        if ((*(_BYTE *)(v18 + 22) & 2) != 0)
          *(_DWORD *)(v18 + 24) += 2;
        else
          result = (WebCore::Node *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v18 + 88))(*(_QWORD *)(v14 + 8));
        *(_QWORD *)(v20 + 8 * v19) = v18;
        *(_DWORD *)(a3 + 12) = v19 + 1;
      }
      v15 = v17;
    }
    if (v16 == -1)
      break;
    if (v16 >= *((unsigned int *)this + 5))
    {
      __break(0xC471u);
      JUMPOUT(0x1959E4E1CLL);
    }
    v14 = *((_QWORD *)this + 1) + (--v13 << 6);
    --v16;
  }
  v21 = *(unsigned int *)(a3 + 12);
  if (v21 >= 2)
  {
    v29 = 0;
    v30 = (v21 - 1);
    v31 = *(_QWORD *)a3;
    v32 = 8 * v21;
    do
    {
      if (v32 == v29)
      {
        __break(0xC471u);
        JUMPOUT(0x1959E4E2CLL);
      }
      if (v30 >= v21)
      {
        __break(0xC471u);
        JUMPOUT(0x1959E4E34);
      }
      v33 = *(_QWORD *)(v31 + v29);
      *(_QWORD *)(v31 + v29) = 0;
      v34 = *(_QWORD *)(v31 + 8 * v30);
      *(_QWORD *)(v31 + 8 * v30) = 0;
      v35 = *(_WORD **)(v31 + v29);
      *(_QWORD *)(v31 + v29) = v34;
      if (v35)
      {
        if ((v35[11] & 2) == 0)
        {
          v37 = v32;
          (*(void (**)(_WORD *))(*(_QWORD *)v35 + 96))(v35);
          goto LABEL_50;
        }
        if (*((_DWORD *)v35 + 6) != 2)
        {
          *((_DWORD *)v35 + 6) -= 2;
          goto LABEL_42;
        }
        if ((v35[15] & 0x400) == 0)
        {
          v37 = v32;
          WebCore::Node::removedLastRef((WebCore::Node *)v35, v8);
LABEL_50:
          v32 = v37;
        }
      }
LABEL_42:
      result = *(WebCore::Node **)(v31 + 8 * v30);
      *(_QWORD *)(v31 + 8 * v30) = v33;
      if (result)
      {
        if ((*((_BYTE *)result + 22) & 2) == 0)
        {
          v36 = v32;
          result = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)result + 96))(result);
          goto LABEL_53;
        }
        if (*((_DWORD *)result + 6) == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
          {
            v36 = v32;
            result = (WebCore::Node *)WebCore::Node::removedLastRef(result, v8);
LABEL_53:
            v32 = v36;
          }
        }
        else
        {
          *((_DWORD *)result + 6) -= 2;
        }
      }
      v29 += 8;
      --v30;
    }
    while (((4 * v21) & 0x3FFFFFFF8) != v29);
  }
  v22 = v12 + 2;
  v23 = v38;
  if (v12 + 2 < v39)
  {
    do
    {
      if (v22 >= *((unsigned int *)this + 5))
      {
        __break(0xC471u);
        JUMPOUT(0x1959E4E24);
      }
      v24 = *((_QWORD *)this + 1) + v10;
      v25 = *(_DWORD *)(v24 + 120);
      if (v23 >= v25)
      {
        v26 = *(_QWORD *)(v24 + 72);
        v27 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v27 == *(_DWORD *)(a3 + 8))
        {
          result = (WebCore::Node *)WTF::Vector<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::EventTarget&>(a3, v26);
        }
        else
        {
          v28 = *(_QWORD *)a3;
          if ((*(_BYTE *)(v26 + 22) & 2) != 0)
            *(_DWORD *)(v26 + 24) += 2;
          else
            result = (WebCore::Node *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 88))(v26);
          *(_QWORD *)(v28 + 8 * v27) = v26;
          *(_DWORD *)(a3 + 12) = v27 + 1;
        }
        v23 = v25;
      }
      ++v22;
      v10 += 64;
    }
    while ((v39 << 6) - 64 != v10);
  }
  return result;
}

uint64_t WebCore::EventPath::EventPath(uint64_t a1, unsigned int *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v6;
  WTF *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  WTF *v23;
  unsigned int v24;
  WebCore::EventContext *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  WTF *v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  WTF **v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  uint64_t v50;
  WTF **v51;
  uint64_t v52;
  WTF *v53;
  WTF *v54;
  uint64_t v55;
  WTF **v56;
  uint64_t v57;
  WTF *v58;
  WTF *v59;
  uint64_t v60;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  _DWORD *v69;
  _DWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[6];

  v3 = (WTF *)(a1 + 24);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_QWORD *)(a1 + 16) = 32;
  v4 = a2[3];
  if ((_DWORD)v4)
  {
    if (v4 >> 26)
    {
      __break(0xC471u);
      goto LABEL_167;
    }
    v6 = WTF::fastMalloc((WTF *)(v4 << 6));
    v7 = (WTF *)v6;
    if (a2[3])
    {
      v8 = 0;
      v9 = (_QWORD *)(v6 + 32);
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v8);
        v11 = **(_QWORD **)a2;
        if (v10)
        {
          if ((*(_BYTE *)(v10 + 22) & 2) != 0)
            *(_DWORD *)(v10 + 24) += 2;
          else
            (*(void (**)(_QWORD))(*(_QWORD *)v10 + 88))(*(_QWORD *)(*(_QWORD *)a2 + 8 * v8));
        }
        v71 = 0;
        v72 = v10;
        if (v11)
        {
          if ((*(_BYTE *)(v11 + 22) & 2) != 0)
          {
            v12 = 0;
            *(_DWORD *)(v11 + 24) += 2;
            v73[0] = v11;
            memset(&v73[1], 0, 40);
          }
          else
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 88))(v11);
            v12 = v71;
            v73[0] = v11;
            memset(&v73[1], 0, 40);
            if (v71)
              *(_DWORD *)(v71 + 24) += 2;
          }
        }
        else
        {
          v12 = 0;
          memset(v73, 0, sizeof(v73));
        }
        *(v9 - 4) = v12;
        v13 = v72;
        if (v72)
        {
          if ((*(_BYTE *)(v72 + 22) & 2) != 0)
            *(_DWORD *)(v72 + 24) += 2;
          else
            (*(void (**)(uint64_t))(*(_QWORD *)v72 + 88))(v72);
        }
        *(v9 - 3) = v13;
        v14 = v73[0];
        if (v73[0])
        {
          if ((*(_BYTE *)(v73[0] + 22) & 2) != 0)
            *(_DWORD *)(v73[0] + 24) += 2;
          else
            (*(void (**)(_QWORD))(*(_QWORD *)v73[0] + 88))(v73[0]);
        }
        *(v9 - 2) = v14;
        v15 = v73[1];
        if (v73[1])
          *(_DWORD *)(v73[1] + 24) += 2;
        *(v9 - 1) = v15;
        v16 = v73[2];
        if (v73[2])
          ++*(_DWORD *)v73[2];
        *v9 = v16;
        v17 = v73[3];
        if (v73[3])
          ++*(_DWORD *)v73[3];
        v9[1] = v17;
        v18 = v73[4];
        if (v73[4])
          ++*(_DWORD *)v73[4];
        v9[2] = v18;
        v9[3] = v73[5];
        ++v8;
        WebCore::EventContext::~EventContext((WebCore::EventContext *)&v71, (WTF::StringImpl *)a2);
        v9 += 8;
      }
      while (v8 < a2[3]);
    }
    else
    {
      LODWORD(v8) = 0;
    }
    v19 = *(unsigned int *)(a1 + 20);
    if (v19 > v8)
    {
      v20 = v8;
      WTF::VectorDestructor<true,WebCore::EventContext>::destruct(*(_QWORD *)(a1 + 8) + ((unint64_t)v8 << 6), (WTF::StringImpl *)(*(_QWORD *)(a1 + 8) + (v19 << 6)));
      *(_DWORD *)(a1 + 20) = v8;
      v21 = v8;
      goto LABEL_51;
    }
    v22 = *(_DWORD *)(a1 + 16);
    if (v8 > v22)
    {
      if (v22)
      {
        v23 = *(WTF **)(a1 + 8);
        if ((_DWORD)v19)
        {
          WTF::VectorDestructor<true,WebCore::EventContext>::destruct((uint64_t)v23, (WTF *)((char *)v23 + 64 * v19));
          *(_DWORD *)(a1 + 20) = 0;
          v23 = *(WTF **)(a1 + 8);
        }
        if (v3 == v23
          || v23 && (*(_QWORD *)(a1 + 8) = 0, *(_DWORD *)(a1 + 16) = 0, WTF::fastFree(v23, a2), *(_QWORD *)(a1 + 8)))
        {
          v24 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          *(_QWORD *)(a1 + 8) = v3;
          v24 = 32;
          *(_DWORD *)(a1 + 16) = 32;
        }
      }
      else
      {
        v24 = 0;
      }
      if (v24 < v8)
      {
        v25 = *(WebCore::EventContext **)(a1 + 8);
        v26 = *(unsigned int *)(a1 + 20);
        if (v8 < 0x21)
        {
          *(_QWORD *)(a1 + 8) = v3;
          *(_DWORD *)(a1 + 16) = 32;
          v27 = v3;
          goto LABEL_49;
        }
        if (!(v8 >> 26))
        {
          v27 = (_QWORD *)WTF::fastMalloc((WTF *)((unint64_t)v8 << 6));
          *(_DWORD *)(a1 + 16) = v8;
          *(_QWORD *)(a1 + 8) = v27;
LABEL_49:
          WTF::VectorMover<false,WebCore::EventContext>::move(v25, (WebCore::EventContext *)((char *)v25 + 64 * v26), v27);
          if (v3 != v25 && v25)
          {
            if (*(WebCore::EventContext **)(a1 + 8) == v25)
            {
              *(_QWORD *)(a1 + 8) = 0;
              *(_DWORD *)(a1 + 16) = 0;
            }
            WTF::fastFree(v25, a2);
          }
          goto LABEL_50;
        }
        __break(0xC471u);
LABEL_167:
        JUMPOUT(0x1959E5604);
      }
    }
  }
  else
  {
    v7 = 0;
    LODWORD(v8) = 0;
  }
LABEL_50:
  v20 = *(unsigned int *)(a1 + 20);
  v21 = *(_DWORD *)(a1 + 20);
LABEL_51:
  v28 = *(uint64_t **)(a1 + 8);
  if (v21)
  {
    v29 = (WTF *)((char *)v7 + 64 * v20);
    v30 = v7;
    do
    {
      v31 = *(_QWORD *)v30;
      if (*(_QWORD *)v30)
        *(_DWORD *)(v31 + 24) += 2;
      v32 = *v28;
      *v28 = v31;
      if (v32)
      {
        if (*(_DWORD *)(v32 + 24) == 2)
        {
          if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v32, a2);
        }
        else
        {
          *(_DWORD *)(v32 + 24) -= 2;
        }
      }
      v33 = *((_QWORD *)v30 + 1);
      if (v33)
      {
        if ((*(_BYTE *)(v33 + 22) & 2) != 0)
          *(_DWORD *)(v33 + 24) += 2;
        else
          (*(void (**)(_QWORD))(*(_QWORD *)v33 + 88))(*((_QWORD *)v30 + 1));
      }
      v34 = v28[1];
      v28[1] = v33;
      if (v34)
      {
        if ((*(_BYTE *)(v34 + 22) & 2) != 0)
        {
          if (*(_DWORD *)(v34 + 24) == 2)
          {
            if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v34, a2);
          }
          else
          {
            *(_DWORD *)(v34 + 24) -= 2;
          }
        }
        else
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 96))(v34);
        }
      }
      v35 = *((_QWORD *)v30 + 2);
      if (v35)
      {
        if ((*(_BYTE *)(v35 + 22) & 2) != 0)
          *(_DWORD *)(v35 + 24) += 2;
        else
          (*(void (**)(_QWORD))(*(_QWORD *)v35 + 88))(*((_QWORD *)v30 + 2));
      }
      v36 = v28[2];
      v28[2] = v35;
      if (v36)
      {
        if ((*(_BYTE *)(v36 + 22) & 2) != 0)
        {
          if (*(_DWORD *)(v36 + 24) == 2)
          {
            if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v36, a2);
          }
          else
          {
            *(_DWORD *)(v36 + 24) -= 2;
          }
        }
        else
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 96))(v36);
        }
      }
      v37 = *((_QWORD *)v30 + 3);
      if (v37)
        *(_DWORD *)(v37 + 24) += 2;
      v38 = v28[3];
      v28[3] = v37;
      if (v38)
      {
        if (*(_DWORD *)(v38 + 24) == 2)
        {
          if ((*(_WORD *)(v38 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v38, a2);
        }
        else
        {
          *(_DWORD *)(v38 + 24) -= 2;
        }
      }
      v39 = (_DWORD *)*((_QWORD *)v30 + 4);
      if (v39)
        ++*v39;
      v40 = v28[4];
      v28[4] = (uint64_t)v39;
      if (v40)
      {
        if (*(_DWORD *)v40 == 1)
        {
          v45 = *(unsigned int *)(v40 + 20);
          if ((_DWORD)v45)
          {
            v46 = *(WTF ***)(v40 + 8);
            v47 = 8 * v45;
            do
            {
              v48 = *v46;
              *v46 = 0;
              if (v48)
                WTF::RefCounted<WebCore::Touch>::deref(v48, (WTF::StringImpl *)a2);
              ++v46;
              v47 -= 8;
            }
            while (v47);
          }
          v49 = *(WTF **)(v40 + 8);
          if (v49)
          {
            *(_QWORD *)(v40 + 8) = 0;
            *(_DWORD *)(v40 + 16) = 0;
            WTF::fastFree(v49, a2);
          }
          WTF::fastFree((WTF *)v40, a2);
        }
        else
        {
          --*(_DWORD *)v40;
        }
      }
      v41 = (_DWORD *)*((_QWORD *)v30 + 5);
      if (v41)
        ++*v41;
      v42 = v28[5];
      v28[5] = (uint64_t)v41;
      if (v42)
      {
        if (*(_DWORD *)v42 == 1)
        {
          v50 = *(unsigned int *)(v42 + 20);
          if ((_DWORD)v50)
          {
            v51 = *(WTF ***)(v42 + 8);
            v52 = 8 * v50;
            do
            {
              v53 = *v51;
              *v51 = 0;
              if (v53)
                WTF::RefCounted<WebCore::Touch>::deref(v53, (WTF::StringImpl *)a2);
              ++v51;
              v52 -= 8;
            }
            while (v52);
          }
          v54 = *(WTF **)(v42 + 8);
          if (v54)
          {
            *(_QWORD *)(v42 + 8) = 0;
            *(_DWORD *)(v42 + 16) = 0;
            WTF::fastFree(v54, a2);
          }
          WTF::fastFree((WTF *)v42, a2);
        }
        else
        {
          --*(_DWORD *)v42;
        }
      }
      v43 = (_DWORD *)*((_QWORD *)v30 + 6);
      if (v43)
        ++*v43;
      v44 = v28[6];
      v28[6] = (uint64_t)v43;
      if (v44)
      {
        if (*(_DWORD *)v44 == 1)
        {
          v55 = *(unsigned int *)(v44 + 20);
          if ((_DWORD)v55)
          {
            v56 = *(WTF ***)(v44 + 8);
            v57 = 8 * v55;
            do
            {
              v58 = *v56;
              *v56 = 0;
              if (v58)
                WTF::RefCounted<WebCore::Touch>::deref(v58, (WTF::StringImpl *)a2);
              ++v56;
              v57 -= 8;
            }
            while (v57);
          }
          v59 = *(WTF **)(v44 + 8);
          if (v59)
          {
            *(_QWORD *)(v44 + 8) = 0;
            *(_DWORD *)(v44 + 16) = 0;
            WTF::fastFree(v59, a2);
          }
          WTF::fastFree((WTF *)v44, a2);
        }
        else
        {
          --*(_DWORD *)v44;
        }
      }
      v28[7] = *((_QWORD *)v30 + 7);
      v30 = (WTF *)((char *)v30 + 64);
      v28 += 8;
    }
    while (v30 != v29);
    v60 = *(unsigned int *)(a1 + 20);
    v28 = *(uint64_t **)(a1 + 8);
  }
  else
  {
    v60 = 0;
  }
  if (v60 != v8)
  {
    v62 = &v28[8 * v60];
    v63 = (uint64_t *)((char *)v7 + 64 * v60);
    do
    {
      v64 = *v63;
      if (*v63)
        *(_DWORD *)(v64 + 24) += 2;
      *v62 = v64;
      v65 = v63[1];
      if (v65)
      {
        if ((*(_BYTE *)(v65 + 22) & 2) != 0)
          *(_DWORD *)(v65 + 24) += 2;
        else
          (*(void (**)(uint64_t))(*(_QWORD *)v65 + 88))(v63[1]);
      }
      v62[1] = v65;
      v66 = v63[2];
      if (v66)
      {
        if ((*(_BYTE *)(v66 + 22) & 2) != 0)
          *(_DWORD *)(v66 + 24) += 2;
        else
          (*(void (**)(uint64_t))(*(_QWORD *)v66 + 88))(v63[2]);
      }
      v62[2] = v66;
      v67 = v63[3];
      if (v67)
        *(_DWORD *)(v67 + 24) += 2;
      v62[3] = v67;
      v68 = (_DWORD *)v63[4];
      if (v68)
        ++*v68;
      v62[4] = (uint64_t)v68;
      v69 = (_DWORD *)v63[5];
      if (v69)
        ++*v69;
      v62[5] = (uint64_t)v69;
      v70 = (_DWORD *)v63[6];
      if (v70)
        ++*v70;
      v62[6] = (uint64_t)v70;
      v62[7] = v63[7];
      v63 += 8;
      v62 += 8;
    }
    while (v63 != (uint64_t *)((char *)v7 + 64 * (unint64_t)v8));
  }
  *(_DWORD *)(a1 + 20) = v8;
  if ((_DWORD)v8)
    WTF::VectorDestructor<true,WebCore::EventContext>::destruct((uint64_t)v7, (WTF *)((char *)v7 + 64 * (unint64_t)v8));
  if (v7)
    WTF::fastFree(v7, a2);
  return a1;
}

uint64_t *WebCore::RelatedNodeRetargeter::RelatedNodeRetargeter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  WTF *v7;
  WTF *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  unint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  unsigned int v23;
  WTF *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  WTF *v29;
  WTF **v30;
  uint64_t v31;
  __int16 v32;
  unsigned int v33;
  __int16 v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  __int16 v67;
  WTF *v69;
  WTF *v70;
  uint64_t v71;
  _BYTE v72[64];

  v3 = a3;
  v5 = *a2;
  *a2 = 0;
  *a1 = v5;
  *(_DWORD *)(v5 + 24) += 2;
  a1[1] = v5;
  a1[2] = (uint64_t)(a1 + 4);
  v6 = a1 + 2;
  a1[3] = 8;
  *((_DWORD *)a1 + 24) = 0;
  *((_BYTE *)a1 + 100) = 0;
  v7 = *(WTF **)(a3 + 40);
  v8 = *(WTF **)(v5 + 40);
  v9 = *(_WORD *)(*(_QWORD *)v8 + 28);
  if ((!*(_QWORD *)v8 || (v9 & 0xF000) != 0x9000) && (v9 & 0x80) == 0)
  {
    __break(0xC471u);
    goto LABEL_177;
  }
  *(_DWORD *)(*(_QWORD *)v8 + 24) += 2;
  if (v8 != v7 || (*(_BYTE *)(a3 + 22) & 8) == 0 || (*(_BYTE *)(v5 + 22) & 8) == 0)
  {
    if (*((_QWORD *)v8 + 1) != *((_QWORD *)v7 + 1)
      || (v13 = *(_QWORD *)(v5 + 16), (v13 & 0x28000000000000) == 0x20000000000000))
    {
      *((_BYTE *)a1 + 100) = 1;
      a1[1] = 0;
      v14 = *(_DWORD *)(v5 + 24);
      goto LABEL_20;
    }
    if (((v13 >> 51) & 1) != (*(_BYTE *)(a3 + 22) & 8) >> 3)
    {
      *((_BYTE *)a1 + 100) = 1;
      *(_DWORD *)(v5 + 24) += 2;
      v16 = v5;
      while (1)
      {
        v17 = *(_QWORD *)(v16 + 16);
        if ((v17 & 0x10000000000000) == 0)
          break;
        if ((v17 & 0x18000000000000) != 0)
        {
          v18 = **(_QWORD **)(v16 + 40);
        }
        else
        {
          do
          {
            v18 = v16;
            v16 = *(_QWORD *)(v16 + 32);
          }
          while (v16);
        }
        if ((*(_WORD *)(v18 + 28) & 0x80) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1959E5D7CLL);
        }
        v16 = *(_QWORD *)(v18 + 200);
        if (v16)
        {
          v16 = *(_QWORD *)(v16 + 8);
          if (v16)
            continue;
        }
        goto LABEL_94;
      }
      *(_DWORD *)(v16 + 24) += 2;
LABEL_94:
      a1[1] = v16;
      if (!v5)
        goto LABEL_6;
      v14 = *(_DWORD *)(v5 + 24) - 2;
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) != 0)
        {
LABEL_99:
          if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v5);
          goto LABEL_6;
        }
        v48 = v5;
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
        v5 = v48;
        v14 = *(_DWORD *)(v48 + 24);
      }
      else
      {
        *(_DWORD *)(v5 + 24) = v14;
      }
LABEL_20:
      v15 = v14 - 2;
      if (v15)
      {
        *(_DWORD *)(v5 + 24) = v15;
        goto LABEL_6;
      }
      goto LABEL_99;
    }
    v70 = v8;
    v19 = v8;
    do
    {
      v20 = *((unsigned int *)a1 + 7);
      if ((_DWORD)v20 == *((_DWORD *)a1 + 6))
      {
        WTF::Vector<WTF::RefPtr<WebCore::TreeScope,WTF::RawPtrTraits<WebCore::TreeScope>,WTF::DefaultRefDerefTraits<WebCore::TreeScope>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TreeScope*&>((uint64_t)(a1 + 2), (uint64_t *)&v70);
      }
      else
      {
        v21 = *v6;
        v22 = *(_WORD *)(*(_QWORD *)v19 + 28);
        if ((!*(_QWORD *)v19 || (v22 & 0xF000) != 0x9000) && (v22 & 0x80) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1959E58A4);
        }
        *(_DWORD *)(*(_QWORD *)v19 + 24) += 2;
        *(_QWORD *)(v21 + 8 * v20) = v19;
        *((_DWORD *)a1 + 7) = v20 + 1;
      }
      v19 = (WTF *)*((_QWORD *)v19 + 2);
      v70 = v19;
    }
    while (v19);
    v69 = v8;
    v70 = (WTF *)v72;
    v71 = 8;
    if (v7)
    {
      v23 = 0;
      v24 = (WTF *)v72;
      do
      {
        v25 = v23;
        if (v23 == (_DWORD)v71)
        {
          v26 = v23 + ((unint64_t)v23 >> 2);
          if (v26 >= 0x10)
            v27 = v26 + 1;
          else
            v27 = 16;
          if (v27 <= (unint64_t)v23 + 1)
            v28 = v23 + 1;
          else
            v28 = v27;
          if (v28 < 9)
          {
            v70 = (WTF *)v72;
            LODWORD(v71) = 8;
            v29 = (WTF *)v72;
          }
          else
          {
            if (v28 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1959E5E24);
            }
            v29 = (WTF *)WTF::fastMalloc((WTF *)(8 * v28));
            LODWORD(v71) = v28;
            v70 = v29;
          }
          memcpy(v29, v24, 8 * v25);
          if (v72 == (_BYTE *)v24)
          {
            v24 = v70;
          }
          else
          {
            if (v70 == v24)
            {
              v70 = 0;
              LODWORD(v71) = 0;
            }
            WTF::fastFree(v24, a2);
            v24 = v70;
          }
          v33 = HIDWORD(v71);
          v31 = *(_QWORD *)v7;
          v34 = *(_WORD *)(*(_QWORD *)v7 + 28);
          if ((!*(_QWORD *)v7 || (v34 & 0xF000) != 0x9000) && (v34 & 0x80) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1959E59F4);
          }
          v30 = (WTF **)((char *)v24 + 8 * HIDWORD(v71));
        }
        else
        {
          v30 = (WTF **)((char *)v24 + 8 * v23);
          v31 = *(_QWORD *)v7;
          v32 = *(_WORD *)(*(_QWORD *)v7 + 28);
          if (*(_QWORD *)v7 && (v32 & 0xF000) == 0x9000)
          {
            v33 = v23;
          }
          else
          {
            v33 = v23;
            if ((v32 & 0x80) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1959E5E1CLL);
            }
          }
        }
        *(_DWORD *)(v31 + 24) += 2;
        *v30 = v7;
        v23 = v33 + 1;
        HIDWORD(v71) = v33 + 1;
        v7 = (WTF *)*((_QWORD *)v7 + 2);
      }
      while (v7);
      v35 = *((_DWORD *)a1 + 7);
      if (v35)
      {
        if (v33 != -1)
        {
          v36 = 0;
          v37 = *v6;
          v38 = v35 - 1;
          v39 = v33;
          while (*(_QWORD *)(v37 + 8 * v38) == *((_QWORD *)v70 + v39))
          {
            v40 = v36 - 1;
            if (v33 + v36)
            {
              --v38;
              --v39;
              --v36;
              if (v40 + v35)
                continue;
            }
            v41 = v35 + v40;
            v42 = v33 + v40 + 1;
            goto LABEL_81;
          }
          v42 = v33 + v36 + 1;
          v41 = v35 + v36;
LABEL_81:
          if (v35 == v41 + 1)
          {
            v43 = *a1;
            if ((*(_BYTE *)(*a1 + 22) & 8) == 0 && (*(_BYTE *)(v3 + 22) & 8) == 0)
            {
              v44 = *a1;
              if (v41)
              {
                if (v35 <= v41 - 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1959E5E4CLL);
                }
                v45 = **(_QWORD **)(v37 + 8 * (v41 - 1));
                if ((*(_WORD *)(v45 + 28) & 0x80) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1959E5DDCLL);
                }
                v46 = **(_QWORD **)(v45 + 40);
                if (v46)
                  v47 = (*(_WORD *)(v46 + 28) & 0x80) == 0;
                else
                  v47 = 1;
                if (v47)
                {
                  v44 = 0;
                }
                else
                {
                  v44 = *(_QWORD *)(v46 + 200);
                  if (v44)
                    v44 = *(_QWORD *)(v44 + 8);
                }
              }
              if (v42)
              {
                v49 = v42 - 1;
                if (v23 <= v49)
                {
                  __break(0xC471u);
LABEL_177:
                  JUMPOUT(0x1959E573CLL);
                }
                v50 = **((_QWORD **)v70 + v49);
                if ((*(_WORD *)(v50 + 28) & 0x80) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1959E5DFCLL);
                }
                v51 = **(_QWORD **)(v50 + 40);
                if (v51)
                  v52 = (*(_WORD *)(v51 + 28) & 0x80) == 0;
                else
                  v52 = 1;
                if (!v52 && (v53 = *(_QWORD *)(v51 + 200)) != 0)
                  v3 = *(_QWORD *)(v53 + 8);
                else
                  v3 = 0;
              }
              if ((*(_BYTE *)(v3 + 22) & 0x18) != 0)
              {
                v54 = **(_QWORD **)(v3 + 40);
              }
              else
              {
                do
                {
                  v54 = v3;
                  v3 = *(_QWORD *)(v3 + 32);
                }
                while (v3);
              }
              if ((*(_BYTE *)(v44 + 22) & 0x18) != 0)
              {
                v55 = **(_QWORD **)(v44 + 40);
              }
              else
              {
                do
                {
                  v55 = v44;
                  v44 = *(_QWORD *)(v44 + 32);
                }
                while (v44);
              }
              if (v54 != v55)
              {
                *((_BYTE *)a1 + 100) = 1;
                while (1)
                {
                  v56 = *(_QWORD *)(v43 + 16);
                  if ((v56 & 0x10000000000000) == 0)
                    break;
                  if ((v56 & 0x18000000000000) != 0)
                  {
                    v57 = **(_QWORD **)(v43 + 40);
                  }
                  else
                  {
                    do
                    {
                      v57 = v43;
                      v43 = *(_QWORD *)(v43 + 32);
                    }
                    while (v43);
                  }
                  if ((*(_WORD *)(v57 + 28) & 0x80) == 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1959E5DBCLL);
                  }
                  v58 = *(_QWORD *)(v57 + 200);
                  if (!v58)
                  {
                    v43 = 0;
                    goto LABEL_160;
                  }
                  v43 = *(_QWORD *)(v58 + 8);
                  if (!v43)
                    goto LABEL_160;
                }
                *(_DWORD *)(v43 + 24) += 2;
LABEL_160:
                v62 = a1[1];
                a1[1] = v43;
                if (!v62)
                  goto LABEL_141;
                goto LABEL_139;
              }
            }
          }
          *((_DWORD *)a1 + 24) = v41;
          v59 = a1;
          if (v41)
          {
            if (v35 <= v41 - 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1959E5E44);
            }
            v60 = **(_QWORD **)(v37 + 8 * (v41 - 1));
            if ((*(_WORD *)(v60 + 28) & 0x80) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1959E5D9CLL);
            }
            v61 = *(_QWORD *)(v60 + 200);
            if (!v61)
            {
LABEL_138:
              v62 = a1[1];
              a1[1] = v61;
              if (!v62)
              {
LABEL_141:
                v63 = v70;
                if (HIDWORD(v71))
                {
                  v64 = 8 * HIDWORD(v71);
                  do
                  {
                    v65 = *(uint64_t **)v63;
                    *(_QWORD *)v63 = 0;
                    if (v65)
                    {
                      v66 = *v65;
                      v67 = *(_WORD *)(*v65 + 28);
                      if ((!v66 || (v67 & 0xF000) != 0x9000) && (v67 & 0x80) == 0)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1959E5D00);
                      }
                      if (*(_DWORD *)(v66 + 24) == 2)
                      {
                        if ((*(_WORD *)(v66 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v66);
                      }
                      else
                      {
                        *(_DWORD *)(v66 + 24) -= 2;
                      }
                    }
                    v63 = (WTF *)((char *)v63 + 8);
                    v64 -= 8;
                  }
                  while (v64);
                  v63 = v70;
                }
                v8 = v69;
                if (v72 != (_BYTE *)v63 && v63 != 0)
                {
                  v70 = 0;
                  LODWORD(v71) = 0;
                  WTF::fastFree(v63, a2);
                }
                goto LABEL_6;
              }
LABEL_139:
              if (*(_DWORD *)(v62 + 24) == 2)
              {
                if ((*(_WORD *)(v62 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v62);
              }
              else
              {
                *(_DWORD *)(v62 + 24) -= 2;
              }
              goto LABEL_141;
            }
            v59 = (uint64_t *)(v61 + 8);
          }
          v61 = *v59;
          if (*v59)
            *(_DWORD *)(v61 + 24) += 2;
          goto LABEL_138;
        }
LABEL_173:
        __break(0xC471u);
        JUMPOUT(0x1959E5E3CLL);
      }
    }
    else if (*((_DWORD *)a1 + 7))
    {
      goto LABEL_173;
    }
    __break(0xC471u);
    JUMPOUT(0x1959E5E34);
  }
LABEL_6:
  v10 = *(_QWORD *)v8;
  v11 = *(_WORD *)(*(_QWORD *)v8 + 28);
  if ((!*(_QWORD *)v8 || (v11 & 0xF000) != 0x9000) && (v11 & 0x80) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1959E5760);
  }
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v10);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  return a1;
}

uint64_t WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(WebCore::EventTarget *a1, WTF::StringImpl **a2, uint64_t a3, _DWORD *a4)
{
  WebCore::DOMWrapperWorld *v8;
  uint64_t result;
  unint64_t v10;
  WebCore::EventListener *v11;
  uint64_t v12;
  WebCore::AbortSignal *v13;
  _DWORD *v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *Allocator;
  uint64_t v19;
  WebCore::InspectorInstrumentation *v21;
  _QWORD *v22;
  WTF *v23;
  void *v24;
  bmalloc::api *v25;
  void *v26;
  WebCore::InspectorInstrumentation *v27;
  WebCore::ScriptExecutionContext *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WebCore::AbortSignal *v33;
  uint64_t v34;
  uint64_t v35;

  v8 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(16 * (*a4 & 0xFFFFFFFE) + 0x28) + 3320);
  ++*(_DWORD *)v8;
  result = WebCore::EventTarget::attributeEventListener((uint64_t)a1, a2, (uint64_t)v8, &v35);
  if ((a3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a3 + 5) <= 0x16u)
  {
    if (!v35)
      goto LABEL_13;
    LOBYTE(v32) = 0;
    (*(void (**)(WebCore::EventTarget *, WTF::StringImpl **, uint64_t, uint64_t *))(*(_QWORD *)a1 + 32))(a1, a2, v35, &v32);
  }
  else
  {
    v11 = (WebCore::EventListener *)v35;
    if (v35)
    {
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        v27 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(WebCore::EventTarget *))(*(_QWORD *)a1 + 8))(a1);
        if (v27)
        {
          v29 = (_QWORD *)WebCore::InspectorInstrumentation::instrumentingAgents(v27, v28);
          if (v29)
            WebCore::InspectorInstrumentation::willRemoveEventListenerImpl(v29, a1, a2, v11, 0);
        }
      }
      v16 = v35;
      *(_BYTE *)(v35 + 40) &= ~2u;
      if ((a3 & 8) != 0)
        v10 = (a3 - 112) | 1;
      else
        v10 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v10 & 1) != 0)
        v17 = v10 + 47;
      else
        v17 = *(_QWORD *)v10 + 32;
      Allocator = *(_QWORD **)(v17 + 16);
      if (!Allocator)
      {
        v31 = v17;
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
        v17 = v31;
      }
      *(_QWORD *)(v17 + 16) = *Allocator;
      *Allocator = a3;
      Allocator[1] = 0;
      Allocator[2] = 0;
      v19 = *(_QWORD *)(v16 + 48);
      *(_QWORD *)(v16 + 48) = Allocator;
      if (v19)
        *(_QWORD *)(v19 + 8) = 3;
      if ((*(_BYTE *)(v16 + 40) & 4) == 0)
      {
        JSC::Weak<JSC::JSObject>::Weak(&v32, (uint64_t)a4, 0, 0);
        v30 = *(_QWORD *)(v16 + 56);
        *(_QWORD *)(v16 + 56) = v32;
        if (v30)
          *(_QWORD *)(v30 + 8) = 3;
        *(_BYTE *)(v16 + 40) |= 4u;
      }
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        v21 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(WebCore::EventTarget *))(*(_QWORD *)a1 + 8))(a1);
        if (v21)
        {
          v22 = (_QWORD *)WebCore::InspectorInstrumentation::instrumentingAgents(v21, (WebCore::ScriptExecutionContext *)v10);
          if (v22)
            WebCore::InspectorInstrumentation::didAddEventListenerImpl(v22, a1, (const WTF::AtomString *)a2, (WebCore::EventListener *)v16, 0);
        }
      }
    }
    else
    {
      v12 = WTF::fastMalloc((WTF *)0x48);
      v33 = 0;
      v34 = WebCore::JSEventListener::JSEventListener(v12, a3, (uint64_t)a4, 1, 0, (uint64_t)v8);
      LOBYTE(v32) = 0;
      *(_WORD *)((char *)&v32 + 1) = 0;
      BYTE3(v32) = 0;
      (*(void (**)(WebCore::EventTarget *, WTF::StringImpl **, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 24))(a1, a2, &v34, &v32);
      v13 = v33;
      v33 = 0;
      if (v13)
      {
        if (*((_DWORD *)v13 + 6) == 1)
        {
          WebCore::AbortSignal::~AbortSignal(v13, (void *)v10);
          bmalloc::api::isoDeallocate(v25, v26);
        }
        else
        {
          --*((_DWORD *)v13 + 6);
        }
      }
      v14 = (_DWORD *)v34;
      v34 = 0;
      if (v14)
      {
        if (v14[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
        else
          --v14[4];
      }
    }
  }
  result = v35;
  if (v35)
  {
    if (*(_DWORD *)(v35 + 16) == 1)
      result = (*(uint64_t (**)(void))(*(_QWORD *)v35 + 8))();
    else
      --*(_DWORD *)(v35 + 16);
  }
LABEL_13:
  if (*(_DWORD *)v8 == 1)
  {
    WebCore::DOMWrapperWorld::~DOMWrapperWorld(v8, (WTF::StringImpl *)v10);
    return WTF::fastFree(v23, v24);
  }
  else
  {
    --*(_DWORD *)v8;
  }
  return result;
}

WebCore::ContextDestructionObserver *WebCore::EventTarget::create@<X0>(WebCore::EventTarget *this@<X0>, WebCore::EventTargetConcrete *a2@<X8>)
{
  return WebCore::EventTargetConcrete::create(a2, this);
}

WebCore::ContextDestructionObserver *WebCore::EventTargetConcrete::create(WebCore::EventTargetConcrete *this, WebCore::ScriptExecutionContext *a2)
{
  uint64_t v4;
  WebCore::ContextDestructionObserver *result;

  v4 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v4 + 24) = 1;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = &unk_1E33A4FC0;
  result = WebCore::ContextDestructionObserver::ContextDestructionObserver((WebCore::ContextDestructionObserver *)(v4 + 32), a2);
  *(_QWORD *)v4 = off_1E33A4CC8;
  *(_QWORD *)(v4 + 32) = &unk_1E33A4D40;
  *(_QWORD *)this = v4;
  return result;
}

void WebCore::EventTarget::~EventTarget(WebCore::EventTarget *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = &unk_1E33A4FC0;
  v3 = *((_QWORD *)this + 2);
  if ((v3 & 0x1000000000000) != 0)
  {
    v10 = v3 & 0xFFFFFFFFFFFFLL;
    if (*(_DWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 0x18))
    {
      v11 = *(unsigned int *)((v3 & 0xFFFFFFFFFFFFLL) + 0x1C);
      if ((_DWORD)v11)
      {
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v11));
        *(_DWORD *)(v10 + 28) = 0;
      }
      v12 = *(WTF **)(v10 + 16);
      if (v12)
      {
        *(_QWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 24) = 0;
        WTF::fastFree(v12, a2);
      }
    }
  }
  v4 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    *(_QWORD *)((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) + 8) = 0;
    do
    {
      v6 = __ldaxr((unsigned int *)v4);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v4));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v8)
      {
        v14 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v8));
        v4 = v14;
      }
      v9 = *(WTF **)(v4 + 16);
      if (v9)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v13 = v4;
        WTF::fastFree(v9, a2);
        v4 = v13;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WebCore::EventTarget::isPaymentRequest(WebCore::EventTarget *this)
{
  return 0;
}

uint64_t WebCore::EventTarget::addEventListener(WebCore *a1, WTF::StringImpl **a2, uint64_t *a3, unsigned __int8 *a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  char v30;
  unsigned __int8 v31;
  int v32;
  _DWORD *v33;
  WebCore::EventListener *v34;
  int v35;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  WTF *v45;
  WebCore::InspectorInstrumentation *v46;
  WebCore::ScriptExecutionContext *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  WTF::StringImpl *v54;
  void *v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60[2];
  uint64_t v61;
  char v62;
  uint64_t v63;

  v8 = *((_QWORD *)a4 + 1);
  if (v8 && *(_BYTE *)(v8 + 156))
    return 0;
  v9 = *(unsigned __int16 *)(a4 + 1);
  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v10 || (v11 = *(_QWORD *)(v10 + 96)) == 0)
    v11 = WebCore::threadGlobalDataSlow(a1);
  v12 = *(_QWORD *)(v11 + 40);
  if (!v12)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v11);
    v12 = *(_QWORD *)(v11 + 40);
  }
  v13 = *(_QWORD *)(v12 + 2552);
  if (v13)
  {
    v14 = *(_DWORD *)(v12 + 2560);
    v15 = v14 - 1;
    v16 = *(_DWORD *)(v12 + 2568);
    v17 = *((_DWORD *)*a2 + 4);
    v18 = (v16 ^ (v17 >> 8)) & (v14 - 1);
    v19 = *(WTF::StringImpl **)(v13 + 16 * v18);
    if (v19)
    {
      v20 = v17 >> 8;
      v21 = -1;
      do
      {
        v22 = *((_DWORD *)v19 + 4);
        if (++v21 > (((_DWORD)v18 + v14 - ((v16 ^ (v22 >> 8)) & v15)) & v15))
          break;
        if (v19 == *a2 && v22 >> 8 == v20)
        {
          LODWORD(v13) = *(_DWORD *)(v13 + 16 * v18 + 8);
          goto LABEL_16;
        }
        v18 = ((_DWORD)v18 + 1) & v15;
        v19 = *(WTF::StringImpl **)(v13 + 16 * v18);
      }
      while (v19);
    }
    LODWORD(v13) = 0;
  }
LABEL_16:
  v23 = v9 >> 8;
  if (!(v9 >> 8))
  {
    v24 = WORD1(v13);
    if ((v24 & 0x200) != 0)
    {
      if (WebCore::Quirks::shouldMakeEventListenerPassive(WebCore::EventTarget const&,WebCore::EventTypeInfo const&)::$_0::operator()((uint64_t)a1))
      {
        v49 = WebCore::Quirks::shouldMakeEventListenerPassive(WebCore::EventTarget const&,WebCore::EventTypeInfo const&)::$_1::operator()((uint64_t)a1);
        if (v49)
        {
          v50 = 0x2000000;
          goto LABEL_55;
        }
      }
    }
    else if ((v24 & 0x400) != 0)
    {
      if (WebCore::Quirks::shouldMakeEventListenerPassive(WebCore::EventTarget const&,WebCore::EventTypeInfo const&)::$_0::operator()((uint64_t)a1))
      {
        v49 = WebCore::Quirks::shouldMakeEventListenerPassive(WebCore::EventTarget const&,WebCore::EventTypeInfo const&)::$_1::operator()((uint64_t)a1);
        if (v49)
        {
          v50 = 0x4000000;
LABEL_55:
          v51 = *(_QWORD *)(*(_QWORD *)(v49 + 680) + 688) & v50;
          v23 = v51 != 0;
          if (v51)
            LOBYTE(v9) = 1;
          goto LABEL_20;
        }
      }
    }
    v23 = 0;
  }
LABEL_20:
  v25 = 0;
  v26 = *a3;
  if (*a3 && !*(_BYTE *)(v26 + 20))
    v25 = (*(_BYTE *)(v26 + 40) & 2) == 0;
  v27 = *((_QWORD *)a1 + 2);
  if ((v27 & 0x1000000000000) == 0)
  {
    if ((v27 & 0xFFFFFFFFFFFFLL) == 0)
    {
      v38 = WTF::fastCompactMalloc((WTF *)0x28);
      *(_DWORD *)v38 = 1;
      *(_QWORD *)(v38 + 16) = 0;
      *(_QWORD *)(v38 + 24) = 0;
      *(_QWORD *)(v38 + 8) = a1;
      *(_BYTE *)(v38 + 32) = 0;
      v40 = *((_QWORD *)a1 + 2);
      *((_QWORD *)a1 + 2) = v40 & 0xFFFF000000000000 | v38;
      v41 = v40 & 0xFFFFFFFFFFFFLL;
      if ((v40 & 0xFFFFFFFFFFFFLL) != 0)
      {
        do
        {
          v42 = __ldaxr((unsigned int *)v41);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, (unsigned int *)v41));
        if (!v43)
        {
          atomic_store(1u, (unsigned int *)v41);
          v44 = *(unsigned int *)(v41 + 28);
          if ((_DWORD)v44)
          {
            v59 = v41;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v41 + 16), (WTF::StringImpl *)(*(_QWORD *)(v41 + 16) + 32 * v44));
            v41 = v59;
          }
          v45 = *(WTF **)(v41 + 16);
          if (v45)
          {
            *(_QWORD *)(v41 + 16) = 0;
            *(_DWORD *)(v41 + 24) = 0;
            v58 = v41;
            WTF::fastFree(v45, v39);
            v41 = v58;
          }
          WTF::fastFree((WTF *)v41, v39);
        }
      }
    }
    __dmb(0xAu);
    v27 = *((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = v27 | 0x1000000000000;
    v26 = *a3;
  }
  v28 = (v27 & 0xFFFFFFFFFFFFLL) + 16;
  ++*(_DWORD *)(v26 + 16);
  v60[0] = v26;
  if ((_BYTE)v9)
    v29 = v23 == 0;
  else
    v29 = 1;
  v30 = !v29;
  v31 = a4[3];
  LOBYTE(v63) = *a4;
  BYTE1(v63) = v30;
  BYTE2(v63) = v31;
  v32 = WebCore::EventListenerMap::add(v28, a2, v60, (unsigned __int8 *)&v63);
  v33 = (_DWORD *)v60[0];
  v60[0] = 0;
  if (v33)
  {
    if (v33[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
    else
      --v33[4];
  }
  if (!v32)
    return 0;
  if (*((_QWORD *)a4 + 1))
  {
    v57 = (unsigned int *)*((_QWORD *)a4 + 1);
    v52 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>((uint64_t)a1);
    if (v52)
    {
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 + 1, v52));
    }
    v60[0] = (uint64_t)v52;
    v54 = *a2;
    if (*a2)
      *(_DWORD *)v54 += 2;
    v60[1] = (uint64_t)v54;
    WTF::WeakPtr<WebCore::ResizeObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v61, *a3);
    v62 = *a4;
    WTF::Function<void ()(JSC::JSValue)>::Function<WebCore::EventTarget::addEventListener(WTF::AtomString const&,WTF::Ref<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,WebCore::AddEventListenerOptions const&)::$_1,void>(&v63, v60);
    WebCore::AbortSignal::addAlgorithm(v57, &v63);
    v56 = v63;
    v63 = 0;
    if (v56)
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
    WebCore::EventTarget::addEventListener(WTF::AtomString const&,WTF::Ref<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,WebCore::AddEventListenerOptions const&)::$_1::~$_1(v60, v55);
  }
  if (v25)
  {
    v34 = (WebCore::EventListener *)*a3;
    v35 = *a4;
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v46 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)a1 + 8))(a1);
      if (v46)
      {
        v48 = (_QWORD *)WebCore::InspectorInstrumentation::instrumentingAgents(v46, v47);
        if (v48)
          WebCore::InspectorInstrumentation::didAddEventListenerImpl(v48, a1, (const WTF::AtomString *)a2, v34, v35 != 0);
      }
    }
  }
  (*(void (**)(WebCore *))(*(_QWORD *)a1 + 80))(a1);
  return 1;
}

uint64_t *WTF::Function<void ()(JSC::JSValue)>::Function<WebCore::EventTarget::addEventListener(WTF::AtomString const&,WTF::Ref<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,WebCore::AddEventListenerOptions const&)::$_1,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;

  v4 = WTF::fastMalloc((WTF *)0x28);
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)v4 = &off_1E33A4F40;
  *(_QWORD *)(v4 + 8) = v5;
  v6 = (_DWORD *)a2[1];
  if (v6)
    *v6 += 2;
  *(_QWORD *)(v4 + 16) = v6;
  v7 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(v4 + 24) = v7;
  *(_BYTE *)(v4 + 32) = *((_BYTE *)a2 + 24);
  *a1 = v4;
  return a1;
}

uint64_t *WebCore::EventTarget::addEventListener(WTF::AtomString const&,WTF::Ref<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,WebCore::AddEventListenerOptions const&)::$_1::~$_1(uint64_t *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *a1;
  *a1 = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v11 = *(unsigned int *)(v7 + 28);
      if ((_DWORD)v11)
      {
        v14 = v7;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v11));
        v7 = v14;
      }
      v12 = *(WTF **)(v7 + 16);
      if (v12)
      {
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v13 = v7;
        WTF::fastFree(v12, a2);
        v7 = v13;
      }
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return a1;
}

uint64_t WebCore::EventTarget::addEventListenerForBindings(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[6];
  _QWORD *v7;

  if (*a3)
  {
    v6[0] = result;
    v6[1] = a2;
    v6[2] = a3;
    v6[3] = result;
    v6[4] = a2;
    v6[5] = a3;
    v4 = *(unsigned int *)(a4 + 16);
    if ((_DWORD)v4 == -1)
    {
      v5 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::EventTarget::removeEventListenerForBindings(v5);
    }
    else
    {
      v7 = v6;
      return ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZN7WebCore11EventTarget27addEventListenerForBindingsERKNS6_10AtomStringEONS6_6RefPtrINS8_13EventListenerENS6_12RawPtrTraitsISE_EENS6_21DefaultRefDerefTraitsISE_EEEEONS_7variantIJNS8_23AddEventListenerOptionsEbEEEE3__0JZNS9_27addEventListenerForBindingsESC_SK_SO_E3__1EEEEEJRNS0_6__implIJSM_bEEEEEEDcOT_DpOT0____fmatrix[v4])(&v7, a4);
    }
  }
  return result;
}

uint64_t WebCore::EventTarget::removeEventListenerForBindings(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  WebCore::InspectorInstrumentation *v5;
  WTF::StringImpl **v6;
  const WTF::AtomString **v7;
  uint64_t v8;
  _QWORD v9[6];
  _QWORD *v10;

  if (*a3)
  {
    v9[0] = result;
    v9[1] = a2;
    v9[2] = a3;
    v9[3] = result;
    v9[4] = a2;
    v9[5] = a3;
    v4 = *(unsigned int *)(a4 + 4);
    if ((_DWORD)v4 == -1)
    {
      v5 = (WebCore::InspectorInstrumentation *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::EventTarget::setAttributeEventListener(v5, v6, v7, v8);
    }
    else
    {
      v10 = v9;
      return ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZN7WebCore11EventTarget30removeEventListenerForBindingsERKNS6_10AtomStringEONS6_6RefPtrINS8_13EventListenerENS6_12RawPtrTraitsISE_EENS6_21DefaultRefDerefTraitsISE_EEEEONS_7variantIJNS8_20EventListenerOptionsEbEEEE3__0JZNS9_30removeEventListenerForBindingsESC_SK_SO_E3__1EEEEEJRNS0_6__implIJSM_bEEEEEEDcOT_DpOT0____fmatrix[v4])(&v10, a4);
    }
  }
  return result;
}

uint64_t WebCore::EventTarget::setAttributeEventListener(WebCore::InspectorInstrumentation *a1, WTF::StringImpl **a2, const WTF::AtomString **a3, uint64_t a4)
{
  WebCore::EventListener *v7;
  const WTF::AtomString *v8;
  uint64_t v9;
  WTF::AtomString *v10;
  void *v11;
  WebCore::AbortSignal *v12;
  const WTF::AtomString *v13;
  bmalloc::api *v15;
  void *v16;
  void (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  WebCore::EventListener *v20;
  _DWORD *v21;
  _DWORD *v22;
  WebCore::AbortSignal *v23;
  const WTF::AtomString *v24;
  WTF::AtomString *v25;

  WebCore::EventTarget::attributeEventListener((uint64_t)a1, a2, a4, (uint64_t *)&v25);
  v8 = *a3;
  v9 = *a3 != 0;
  v10 = v25;
  if (!*a3)
  {
    if (!v25)
      return 0;
    LOBYTE(v22) = 0;
    (*(void (**)(WebCore::InspectorInstrumentation *, WTF::StringImpl **, WTF::AtomString *, _DWORD **))(*(_QWORD *)a1 + 32))(a1, a2, v25, &v22);
    goto LABEL_19;
  }
  if (v25)
  {
    WebCore::InspectorInstrumentation::willRemoveEventListener(a1, a2, v25, v7);
    v18 = (uint64_t)*a3;
    v19 = ((*((_QWORD *)a1 + 2) & 0xFFFFFFFFFFFFLL) + 16) & ((uint64_t)(*((_QWORD *)a1 + 2) << 15) >> 63);
    *(_DWORD *)(v18 + 16) = *((_DWORD *)*a3 + 4) + 1;
    v22 = (_DWORD *)v18;
    LOWORD(v24) = 0;
    BYTE2(v24) = 0;
    WebCore::EventListenerMap::replace(v19, a2, (uint64_t)v10, (uint64_t *)&v22, (unsigned __int8 *)&v24);
    v21 = v22;
    v22 = 0;
    if (v21)
    {
      if (v21[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
      else
        --v21[4];
    }
    WebCore::InspectorInstrumentation::didAddEventListener(a1, (WebCore::EventTarget *)a2, *a3, v20);
LABEL_19:
    if (*((_DWORD *)v10 + 4) != 1)
    {
      --*((_DWORD *)v10 + 4);
      return v9;
    }
    v17 = *(void (**)(void))(*(_QWORD *)v10 + 8);
    goto LABEL_12;
  }
  v23 = 0;
  v24 = v8;
  *a3 = 0;
  LOBYTE(v22) = 0;
  *(_WORD *)((char *)&v22 + 1) = 0;
  BYTE3(v22) = 0;
  v9 = (*(uint64_t (**)(WebCore::InspectorInstrumentation *, WTF::StringImpl **, const WTF::AtomString **, _DWORD **))(*(_QWORD *)a1 + 24))(a1, a2, &v24, &v22);
  v12 = v23;
  v23 = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(v12, v11);
      bmalloc::api::isoDeallocate(v15, v16);
    }
    else
    {
      --*((_DWORD *)v12 + 6);
    }
  }
  v13 = v24;
  v24 = 0;
  if (v13)
  {
    if (*((_DWORD *)v13 + 4) != 1)
    {
      --*((_DWORD *)v13 + 4);
      return v9;
    }
    v17 = *(void (**)(void))(*(_QWORD *)v13 + 8);
LABEL_12:
    v17();
  }
  return v9;
}

uint64_t *WebCore::EventTarget::eventListeners(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 16);
  if ((v2 & 0x1000000000000) != 0 && (v3 = v2 & 0xFFFFFFFFFFFFLL, v4 = *(unsigned int *)(v3 + 28), (_DWORD)v4))
  {
    v5 = *(_QWORD *)(v3 + 16) + 8;
    v6 = 32 * v4;
    while (*(_QWORD *)(v5 - 8) != *a2)
    {
      v5 += 32;
      v6 -= 32;
      if (!v6)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    v5 = 0;
  }
  {
    WebCore::EventTarget::eventListeners(WTF::AtomString const&)::emptyVector = (uint64_t)algn_1ECE90528;
    qword_1ECE90520 = 1;
  }
  if (v5)
    return (uint64_t *)v5;
  else
    return &WebCore::EventTarget::eventListeners(WTF::AtomString const&)::emptyVector;
}

uint64_t WebCore::EventTarget::dispatchEventForBindings@<X0>(uint64_t this@<X0>, WebCore::Event *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int v6;

  if ((*((_DWORD *)a2 + 5) & 0x3001) == 1)
  {
    v5 = this;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    if (this)
    {
      *((_DWORD *)a2 + 5) &= ~0x200u;
      this = (*(uint64_t (**)(uint64_t, WebCore::Event *))(*(_QWORD *)v5 + 48))(v5, a2);
      v6 = 0;
      *(_BYTE *)a3 = (*((_DWORD *)a2 + 5) & 0x40) == 0;
    }
    else
    {
      v6 = 0;
      *(_BYTE *)a3 = 0;
    }
  }
  else
  {
    *(_BYTE *)a3 = 8;
    *(_QWORD *)(a3 + 8) = 0;
    v6 = 1;
  }
  *(_DWORD *)(a3 + 16) = v6;
  return this;
}

_QWORD *WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>::Vector(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _DWORD **v7;
  uint64_t v8;
  _DWORD *v9;

  v4 = *(unsigned int *)(a2 + 12);
  result = (_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = v4;
  if (v4 >= 2)
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    result = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v4));
    *(_DWORD *)(a1 + 8) = v4;
    *(_QWORD *)a1 = result;
  }
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD ***)a2;
    v8 = 8 * v6;
    do
    {
      v9 = *v7;
      if (*v7)
        ++*v9;
      *result++ = v9;
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  return (_QWORD *)a1;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  _DWORD *v7;
  WTF *v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *(WTF **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
        {
          v7 = (_DWORD *)*((_QWORD *)v6 + 1);
          *((_QWORD *)v6 + 1) = 0;
          if (v7)
          {
            if (v7[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
            else
              --v7[4];
          }
          WTF::fastFree(v6, a2);
        }
        else
        {
          --*(_DWORD *)v6;
        }
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v8 = *(WTF **)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v8 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v8, a2);
  }
  return a1;
}

WTF::StringImpl *WebCore::Event::setType(WebCore::Event *this, const WTF::AtomString *a2)
{
  WTF::StringImpl *result;

  if (a2)
    *(_DWORD *)a2 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = a2;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::EventTarget::removeAllEventListeners(uint64_t this, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  v2 = (_QWORD *)this;
  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 96);
    if (v4)
      goto LABEL_3;
  }
  else
  {
    this = WTF::Thread::initializeCurrentTLS((WTF::Thread *)this);
    v3 = this;
    v4 = *(_QWORD *)(this + 96);
    if (v4)
      goto LABEL_3;
  }
  v4 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)(v4 + 8) = 1;
  v7 = (unsigned int *)(v4 + 8);
  *(_QWORD *)v4 = off_1E31F4A70;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v8 = 0;
  *(_QWORD *)(v4 + 16) = v8;
  *(_QWORD *)v4 = off_1E3407108;
  *(_BYTE *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  v9 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v9 + 28) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = 0;
  *(_WORD *)(v9 + 24) = 0;
  if (WTF::isUIThread((WTF *)v9))
  {
    {
      WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
      qword_1ECE90CE8 = 0;
    }
    WebCore::ThreadTimers::setSharedTimer((uint64_t **)v9, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
  }
  *(_QWORD *)(v4 + 48) = v9;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_BYTE *)(v4 + 88) = 0;
  if (pthread_main_np())
  {
    WebCore::sharedMainThreadStaticData = v4;
    do
      v10 = __ldaxr(v7);
    while (__stlxr(v10 + 1, v7));
  }
  this = *(_QWORD *)(v3 + 96);
  *(_QWORD *)(v3 + 96) = v4;
  if (this)
  {
    v11 = (unsigned int *)(this + 8);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)(this + 8));
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    }
  }
LABEL_3:
  if (*(_BYTE *)(v4 + 88))
  {
    __break(0xC471u);
    JUMPOUT(0x1959E6FA4);
  }
  *(_BYTE *)(v4 + 88) = 1;
  v5 = v2[2];
  if ((v5 & 0x1000000000000) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFLL;
    if (*(_DWORD *)(v6 + 28))
    {
      WebCore::EventListenerMap::clear((unsigned __int8 *)(v6 + 16), a2);
      this = (*(uint64_t (**)(_QWORD *))(*v2 + 80))(v2);
    }
  }
  *(_BYTE *)(v4 + 88) = 0;
  return this;
}

uint64_t WebCore::createExtensionsStyleSheet(uint64_t *a1, const WebCore::Document *a2, const WTF::URL *a3, const WTF::String *a4, char a5)
{
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  __int128 v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  void *v21;
  uint64_t result;
  void *v23;
  WTF *v24;
  void *v25;
  WTF *v26;
  void *v27;
  uint64_t v28;
  __int16 v29;
  WebCore::StyleSheetContents *v30;
  WTF::StringImpl *v31;
  __int128 v32;
  __int128 v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  __int16 v36;

  WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)&v31, a2, a3, MEMORY[0x1E0CBF738]);
  v10 = WTF::fastMalloc((WTF *)0xD8);
  v12 = v10;
  *(_DWORD *)v10 = 1;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  v13 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v13 += 2;
  *(_QWORD *)(v10 + 24) = v13;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  v14 = WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  *(_QWORD *)(v10 + 112) = v14;
  *(_WORD *)(v10 + 120) = 0;
  *(_BYTE *)(v10 + 122) = 1;
  *(_QWORD *)(v10 + 123) = 0;
  *(_BYTE *)(v10 + 131) = 0;
  v15 = v31;
  if (v31)
    *(_DWORD *)v31 += 2;
  *(_QWORD *)(v10 + 136) = v15;
  v16 = v33;
  *(_OWORD *)(v10 + 144) = v32;
  *(_OWORD *)(v10 + 160) = v16;
  v17 = v34;
  if (v34)
  {
    *(_DWORD *)v34 += 2;
    v18 = v35;
    *(_QWORD *)(v12 + 176) = v17;
    *(_QWORD *)(v12 + 184) = v18;
    *(_WORD *)(v12 + 192) = v36;
    *(_QWORD *)(v12 + 200) = 0;
    *(_QWORD *)(v12 + 208) = 0;
    v34 = 0;
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v11);
    else
      *(_DWORD *)v17 -= 2;
  }
  else
  {
    v28 = v35;
    *(_QWORD *)(v12 + 176) = 0;
    *(_QWORD *)(v12 + 184) = v28;
    *(_WORD *)(v12 + 192) = v36;
    *(_QWORD *)(v12 + 200) = 0;
    *(_QWORD *)(v12 + 208) = 0;
    v34 = 0;
  }
  v19 = v31;
  v31 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v11);
    else
      *(_DWORD *)v19 -= 2;
  }
  ++*(_DWORD *)v12;
  v30 = (WebCore::StyleSheetContents *)v12;
  v29 = 257;
  v20 = WTF::fastMalloc((WTF *)0x98);
  v31 = 0;
  *a1 = WebCore::CSSStyleSheet::CSSStyleSheet(v20, (uint64_t *)&v30, (uint64_t)a2, &v31, 0, &v29);
  if (v30)
  {
    if (*(_DWORD *)v30 == 1)
    {
      WebCore::StyleSheetContents::~StyleSheetContents(v30, v21);
      WTF::fastFree(v26, v27);
    }
    else
    {
      --*(_DWORD *)v30;
    }
  }
  *(_BYTE *)(v12 + 120) = a5 ^ 1;
  result = WebCore::StyleSheetContents::parseString((WebCore::StyleSheetContents *)v12, a4);
  if (*(_DWORD *)v12 == 1)
  {
    WebCore::StyleSheetContents::~StyleSheetContents((WebCore::StyleSheetContents *)v12, v23);
    return WTF::fastFree(v24, v25);
  }
  else
  {
    --*(_DWORD *)v12;
  }
  return result;
}

void WebCore::ExtensionStyleSheets::updatePageUserSheet(WebCore::ExtensionStyleSheets *this, void *a2)
{
  _DWORD *v3;
  void *v4;
  uint64_t v5;
  WebCore::Style::Scope *v6;
  void *v7;
  int v8;
  uint64_t v9;
  WebCore::Style::Scope *v10;
  int v11;

  v3 = (_DWORD *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
    v9 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    *(_DWORD *)(v9 + 24) += 2;
    v10 = *(WebCore::Style::Scope **)(v9 + 1328);
    ++*((_DWORD *)v10 + 2);
    WebCore::Style::Scope::didChangeStyleSheetEnvironment(v10, a2);
    v11 = *((_DWORD *)v10 + 2);
    if (!v11)
      goto LABEL_18;
    *((_DWORD *)v10 + 2) = v11 - 1;
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  if (!WebCore::ExtensionStyleSheets::pageUserSheet(this, (const WTF::String *)a2))
    return;
  v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(WebCore::Style::Scope **)(v5 + 1328);
  ++*((_DWORD *)v6 + 2);
  WebCore::Style::Scope::didChangeStyleSheetEnvironment(v6, v4);
  v8 = *((_DWORD *)v6 + 2);
  if (!v8)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1959E72ECLL);
  }
  *((_DWORD *)v6 + 2) = v8 - 1;
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v7);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
}

WTF::StringImpl *WebCore::ExtensionStyleSheets::updateInjectedStyleSheetCache(void)const::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  __int128 v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  _DWORD *v17;
  uint64_t *v18;
  int v19;
  _DWORD *v20;
  WTF::StringImpl *result;
  uint64_t v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  __int128 v47;
  WTF::StringImpl *v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v5 = *(WTF::StringImpl **)(a2 + 8);
  if (v5)
  {
    *(_DWORD *)v5 += 2;
    v48 = v5;
    v6 = *(_OWORD *)(a2 + 32);
    v49 = *(_OWORD *)(a2 + 16);
    v50 = v6;
    WebCore::createExtensionsStyleSheet(&v51, (const WebCore::Document *)v4, (const WTF::URL *)&v48, (const WTF::String *)a2, *(_BYTE *)(a2 + 81));
    v48 = 0;
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v7);
    else
      *(_DWORD *)v5 -= 2;
  }
  else
  {
    v48 = 0;
    v47 = *(_OWORD *)(a2 + 32);
    v49 = *(_OWORD *)(a2 + 16);
    v50 = v47;
    WebCore::createExtensionsStyleSheet(&v51, (const WebCore::Document *)v4, (const WTF::URL *)&v48, (const WTF::String *)a2, *(_BYTE *)(a2 + 81));
    v48 = 0;
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  v8 = v51;
  ++*(_DWORD *)(v51 + 8);
  v10 = (uint64_t *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 56);
  if (v9
    || (WTF::HashTable<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::String>>,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashMap<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::String,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>>::rehash((uint64_t *)(a1 + 56), 8u, 0), (v9 = *v10) != 0))
  {
    v11 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    v11 = 0;
  }
  v12 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v11 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v9 + 16 * v15);
  v17 = (_DWORD *)*v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    while (v17 != (_DWORD *)v8)
    {
      if (v17 == (_DWORD *)-1)
        v18 = v16;
      v15 = (v15 + v19) & v11;
      v16 = (uint64_t *)(v9 + 16 * v15);
      v17 = (_DWORD *)*v16;
      ++v19;
      if (!*v16)
      {
        if (v18)
        {
          *v18 = 0;
          v18[1] = 0;
          --*(_DWORD *)(*v10 - 16);
          v16 = v18;
        }
        goto LABEL_17;
      }
    }
    v24 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v24 += 2;
    result = (WTF::StringImpl *)v16[1];
    v16[1] = (uint64_t)v24;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        if (!v8)
          goto LABEL_43;
        goto LABEL_30;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v8)
      goto LABEL_43;
LABEL_30:
    if (*(_DWORD *)(v8 + 8) == 1)
      result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    else
      --*(_DWORD *)(v8 + 8);
    goto LABEL_43;
  }
LABEL_17:
  *v16 = v8;
  v20 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v20 += 2;
  result = (WTF::StringImpl *)v16[1];
  v16[1] = (uint64_t)v20;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  v22 = *v10;
  if (*v10)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v25 = *v10;
  if (*v10)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 <= 0x400)
  {
    if (3 * v28 > 4 * v27)
      goto LABEL_43;
    if (!(_DWORD)v28)
    {
      v29 = 8;
      goto LABEL_42;
    }
LABEL_39:
    v29 = (_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28));
LABEL_42:
    result = (WTF::StringImpl *)WTF::HashTable<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::String>>,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashMap<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::String,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>>::rehash((uint64_t *)(a1 + 56), v29, (_DWORD **)v16);
    goto LABEL_43;
  }
  if (v28 <= 2 * v27)
    goto LABEL_39;
LABEL_43:
  v30 = v51;
  if (*(_BYTE *)(*(_QWORD *)(v51 + 24) + 120))
  {
    v31 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v31 != *(_DWORD *)(a1 + 32))
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v31) = v51;
      *(_DWORD *)(a1 + 36) = v31 + 1;
      return result;
    }
    v32 = v31 + (v31 >> 2);
    if (v32 >= 0x10)
      v33 = v32 + 1;
    else
      v33 = 16;
    if (v33 <= v31 + 1)
      v34 = v31 + 1;
    else
      v34 = v33;
    if (!(v34 >> 29))
    {
      v35 = *(void **)(a1 + 24);
      v36 = (void *)WTF::fastMalloc((WTF *)(8 * v34));
      *(_DWORD *)(a1 + 32) = v34;
      *(_QWORD *)(a1 + 24) = v36;
      result = (WTF::StringImpl *)memcpy(v36, v35, 8 * v31);
      if (v35)
      {
        if (*(void **)(a1 + 24) == v35)
        {
          *(_QWORD *)(a1 + 24) = 0;
          *(_DWORD *)(a1 + 32) = 0;
        }
        result = (WTF::StringImpl *)WTF::fastFree((WTF *)v35, v37);
      }
      v38 = *(unsigned int *)(a1 + 36);
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v38) = v30;
      *(_DWORD *)(a1 + 36) = v38 + 1;
      return result;
    }
LABEL_82:
    __break(0xC471u);
    JUMPOUT(0x1959E7780);
  }
  v39 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v39 != *(_DWORD *)(a1 + 48))
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v39) = v51;
    *(_DWORD *)(a1 + 52) = v39 + 1;
    return result;
  }
  v40 = v39 + (v39 >> 2);
  if (v40 >= 0x10)
    v41 = v40 + 1;
  else
    v41 = 16;
  if (v41 <= v39 + 1)
    v42 = v39 + 1;
  else
    v42 = v41;
  if (v42 >> 29)
    goto LABEL_82;
  v43 = *(void **)(a1 + 40);
  v44 = (void *)WTF::fastMalloc((WTF *)(8 * v42));
  *(_DWORD *)(a1 + 48) = v42;
  *(_QWORD *)(a1 + 40) = v44;
  result = (WTF::StringImpl *)memcpy(v44, v43, 8 * v39);
  if (v43)
  {
    if (*(void **)(a1 + 40) == v43)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 48) = 0;
    }
    result = (WTF::StringImpl *)WTF::fastFree((WTF *)v43, v45);
  }
  v46 = *(unsigned int *)(a1 + 52);
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v46) = v30;
  *(_DWORD *)(a1 + 52) = v46 + 1;
  return result;
}

void WebCore::ExtensionStyleSheets::injectPageSpecificUserStyleSheet(WebCore::ExtensionStyleSheets *this, const WebCore::UserStyleSheet *a2)
{
  _QWORD *v3;
  uint64_t v4;
  WebCore::UserStyleSheet *v5;
  uint64_t v6;
  WebCore::Style::Scope *v7;
  void *v8;
  int v9;

  v3 = (_QWORD *)((char *)this + 104);
  v4 = *((unsigned int *)this + 29);
  if ((_DWORD)v4 == *((_DWORD *)this + 28))
  {
    a2 = (const WebCore::UserStyleSheet *)WTF::Vector<WebCore::UserStyleSheet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v3, v4 + 1, (unint64_t)a2);
    v5 = (WebCore::UserStyleSheet *)(*((_QWORD *)this + 13) + 104 * *((unsigned int *)this + 29));
  }
  else
  {
    v5 = (WebCore::UserStyleSheet *)(*v3 + 104 * v4);
  }
  WebCore::UserStyleSheet::UserStyleSheet(v5, a2);
  ++*((_DWORD *)this + 29);
  *((_BYTE *)this + 64) = 0;
  v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *(WebCore::Style::Scope **)(v6 + 1328);
  ++*((_DWORD *)v7 + 2);
  WebCore::Style::Scope::didChangeStyleSheetEnvironment(v7, v8);
  v9 = *((_DWORD *)v7 + 2);
  if (v9)
  {
    *((_DWORD *)v7 + 2) = v9 - 1;
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void WebCore::ExtensionStyleSheets::removePageSpecificUserStyleSheet(WebCore::ExtensionStyleSheets *this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  uint64_t v9;
  WebCore::Style::Scope *v10;
  void *v11;
  void *v12;
  int v13;

  if (*((_DWORD *)this + 29))
  {
    v5 = 0;
    v6 = 0;
    while ((WTF::equal(*(WTF **)(*((_QWORD *)this + 13) + v5 + 8), a2[1], a3) & 1) == 0)
    {
      ++v6;
      v5 += 104;
      if (v6 >= *((unsigned int *)this + 29))
        return;
    }
    v8 = *((_QWORD *)this + 13) + v5;
    WebCore::UserStyleSheet::~UserStyleSheet((WebCore::UserStyleSheet *)v8, v7);
    WTF::VectorMover<false,WebCore::UserStyleSheet>::moveOverlapping((WTF::StringImpl *)(v8 + 104), (WTF::StringImpl *)(*((_QWORD *)this + 13) + 104 * *((unsigned int *)this + 29)), v8);
    --*((_DWORD *)this + 29);
    *((_BYTE *)this + 64) = 0;
    v9 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    *(_DWORD *)(v9 + 24) += 2;
    v10 = *(WebCore::Style::Scope **)(v9 + 1328);
    ++*((_DWORD *)v10 + 2);
    WebCore::Style::Scope::didChangeStyleSheetEnvironment(v10, v11);
    v13 = *((_DWORD *)v10 + 2);
    if (v13)
    {
      *((_DWORD *)v10 + 2) = v13 - 1;
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v9, v12);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
}

void WebCore::ExtensionStyleSheets::addUserStyleSheet(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  WebCore::Style::Scope *v15;
  void *v16;
  int v17;
  __int16 v18;
  uint64_t v19;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v18 = 0;
  v5 = WTF::fastMalloc((WTF *)0x98);
  v19 = 0;
  WebCore::CSSStyleSheet::CSSStyleSheet(v5, a2, v4, &v19, 0, &v18);
  v7 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v7 == *(_DWORD *)(a1 + 80))
  {
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= v7 + 1)
      v10 = v7 + 1;
    else
      v10 = v9;
    if (v10 >> 29)
      goto LABEL_25;
    v11 = *(void **)(a1 + 72);
    v12 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
    *(_DWORD *)(a1 + 80) = v10;
    *(_QWORD *)(a1 + 72) = v12;
    memcpy(v12, v11, 8 * v7);
    if (v11)
    {
      if (*(void **)(a1 + 72) == v11)
      {
        *(_QWORD *)(a1 + 72) = 0;
        *(_DWORD *)(a1 + 80) = 0;
      }
      WTF::fastFree((WTF *)v11, v6);
    }
    v7 = *(unsigned int *)(a1 + 84);
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 72) + 8 * v7);
  }
  else
  {
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 72) + 8 * v7);
  }
  *v13 = v5;
  *(_DWORD *)(a1 + 84) = v7 + 1;
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  *(_DWORD *)(v14 + 24) += 2;
  v15 = *(WebCore::Style::Scope **)(v14 + 1328);
  ++*((_DWORD *)v15 + 2);
  WebCore::Style::Scope::didChangeStyleSheetEnvironment(v15, v6);
  v17 = *((_DWORD *)v15 + 2);
  if (!v17)
  {
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x1959E7B70);
  }
  *((_DWORD *)v15 + 2) = v17 - 1;
  if (*(_DWORD *)(v14 + 24) == 2)
  {
    if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v14, v16);
  }
  else
  {
    *(_DWORD *)(v14 + 24) -= 2;
  }
}

void WebCore::ExtensionStyleSheets::addAuthorStyleSheetForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  WebCore::Style::Scope *v15;
  void *v16;
  int v17;
  __int16 v18;
  uint64_t v19;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v18 = 0;
  v5 = WTF::fastMalloc((WTF *)0x98);
  v19 = 0;
  WebCore::CSSStyleSheet::CSSStyleSheet(v5, a2, v4, &v19, 0, &v18);
  v7 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v7 == *(_DWORD *)(a1 + 96))
  {
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= v7 + 1)
      v10 = v7 + 1;
    else
      v10 = v9;
    if (v10 >> 29)
      goto LABEL_25;
    v11 = *(void **)(a1 + 88);
    v12 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
    *(_DWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 88) = v12;
    memcpy(v12, v11, 8 * v7);
    if (v11)
    {
      if (*(void **)(a1 + 88) == v11)
      {
        *(_QWORD *)(a1 + 88) = 0;
        *(_DWORD *)(a1 + 96) = 0;
      }
      WTF::fastFree((WTF *)v11, v6);
    }
    v7 = *(unsigned int *)(a1 + 100);
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 88) + 8 * v7);
  }
  else
  {
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 88) + 8 * v7);
  }
  *v13 = v5;
  *(_DWORD *)(a1 + 100) = v7 + 1;
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  *(_DWORD *)(v14 + 24) += 2;
  v15 = *(WebCore::Style::Scope **)(v14 + 1328);
  ++*((_DWORD *)v15 + 2);
  WebCore::Style::Scope::didChangeStyleSheetEnvironment(v15, v6);
  v17 = *((_DWORD *)v15 + 2);
  if (!v17)
  {
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x1959E7D3CLL);
  }
  *((_DWORD *)v15 + 2) = v17 - 1;
  if (*(_DWORD *)(v14 + 24) == 2)
  {
    if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v14, v16);
  }
  else
  {
    *(_DWORD *)(v14 + 24) -= 2;
  }
}

void WebCore::ExtensionStyleSheets::addDisplayNoneSelector(WTF **this, WTF::StringImpl **a2, const WTF::String *a3, int a4)
{
  WebCore::ExtensionStyleSheets *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned int v8;
  WTF *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  WTF::StringImpl *v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  _QWORD *v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _DWORD *v39;
  WTF::StringImpl *v40;
  _DWORD *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  WTF::StringImpl *v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  WTF **v57;
  WTF *v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  char v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  _DWORD *v66;
  WTF *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  _DWORD *v73;
  unsigned int v74;
  int v75;
  WTF *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF **v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  WebCore::ContentExtensions::ContentExtensionStyleSheet *v84;
  WTF *v85;
  WebCore::ExtensionStyleSheets *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  void *v92;
  WebCore::ExtensionStyleSheets *v93;
  void *v94;
  void *v95;
  uint64_t v96;
  _QWORD *v97;
  void *v98;
  uint64_t v99;
  WebCore::Style::Scope *v100;
  int v101;
  WTF *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;

  v4 = (WebCore::ExtensionStyleSheets *)this;
  v6 = *((unsigned int *)this + 38);
  v5 = *((unsigned int *)this + 39);
  if (10 * v5 >= (unint64_t)(9 * v6)
    || (v6 <= 2 * (int)v5 ? (v7 = *((_BYTE *)this + 164) == 0) : (v7 = 1), !v7))
  {
    if ((_DWORD)v6)
      v8 = 2 * v6;
    else
      v8 = 8;
    v9 = this[18];
    v10 = WTF::fastZeroedMalloc((WTF *)(16 * v8));
    v4 = (WebCore::ExtensionStyleSheets *)this;
    this[18] = (WTF *)v10;
    *((_DWORD *)this + 38) = v8;
    v12 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    *((_DWORD *)this + 40) = (v14 >> 31) ^ v14;
    *((_BYTE *)this + 164) = 0;
    if ((_DWORD)v6)
    {
      v15 = 0;
      v105 = v9;
      v106 = v6;
      do
      {
        v16 = (char *)v9 + 16 * v15;
        v17 = *(WTF::StringImpl **)v16;
        if (*(_QWORD *)v16)
        {
          v18 = *((_DWORD *)v4 + 38);
          v19 = *((_DWORD *)v4 + 40);
          v20 = *((_DWORD *)v17 + 4);
          v108 = v18;
          if (v20 < 0x100)
          {
            v21 = WTF::StringImpl::hashSlowCase(v17);
            v18 = v108;
            v4 = (WebCore::ExtensionStyleSheets *)this;
          }
          else
          {
            v21 = v20 >> 8;
          }
          v107 = v15;
          v22 = v18 - 1;
          v23 = (v21 ^ v19) & (v18 - 1);
          v24 = *((_QWORD *)v4 + 18);
          v25 = (WTF::StringImpl **)(v24 + 16 * v23);
          v26 = *v25;
          if (*v25)
          {
            v27 = 0;
            v28 = (_QWORD *)((char *)v9 + 16 * v107 + 8);
            do
            {
              v29 = *((_DWORD *)v26 + 4);
              if (v29 < 0x100)
              {
                v30 = WTF::StringImpl::hashSlowCase(v26);
                v18 = v108;
                v4 = (WebCore::ExtensionStyleSheets *)this;
              }
              else
              {
                v30 = v29 >> 8;
              }
              v31 = (v23 + v18 - ((v30 ^ v19) & v22)) & v22;
              if (v27 > v31)
              {
                v32 = *(WTF::StringImpl **)v16;
                v33 = (_DWORD *)*v28;
                *(_QWORD *)v16 = 0;
                *((_QWORD *)v16 + 1) = 0;
                v34 = *v25;
                *v25 = 0;
                v35 = *(WTF::StringImpl **)v16;
                *(_QWORD *)v16 = v34;
                if (v35)
                {
                  if (*(_DWORD *)v35 == 2)
                  {
                    WTF::StringImpl::destroy(v35, v11);
                    v18 = v108;
                    v4 = (WebCore::ExtensionStyleSheets *)this;
                  }
                  else
                  {
                    *(_DWORD *)v35 -= 2;
                  }
                }
                v36 = v24 + 16 * v23;
                v38 = *(_QWORD *)(v36 + 8);
                v37 = (_QWORD *)(v36 + 8);
                *v37 = 0;
                v39 = (_DWORD *)*v28;
                *v28 = v38;
                if (v39)
                {
                  if (v39[2] == 1)
                  {
                    (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 8))(v39);
                    v18 = v108;
                    v4 = (WebCore::ExtensionStyleSheets *)this;
                  }
                  else
                  {
                    --v39[2];
                  }
                }
                v40 = *v25;
                *v25 = v32;
                if (v40)
                {
                  if (*(_DWORD *)v40 == 2)
                  {
                    WTF::StringImpl::destroy(v40, v11);
                    v18 = v108;
                    v4 = (WebCore::ExtensionStyleSheets *)this;
                  }
                  else
                  {
                    *(_DWORD *)v40 -= 2;
                  }
                }
                v41 = (_DWORD *)*v37;
                *v37 = v33;
                if (v41)
                {
                  if (v41[2] == 1)
                  {
                    (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 8))(v41);
                    v18 = v108;
                    v4 = (WebCore::ExtensionStyleSheets *)this;
                  }
                  else
                  {
                    --v41[2];
                  }
                }
                v27 = v31;
              }
              v23 = ((_DWORD)v23 + 1) & v22;
              ++v27;
              v24 = *((_QWORD *)v4 + 18);
              v25 = (WTF::StringImpl **)(v24 + 16 * v23);
              v26 = *v25;
            }
            while (*v25);
          }
          v42 = *(WTF::StringImpl **)v16;
          *(_QWORD *)v16 = 0;
          v43 = *v25;
          *v25 = v42;
          v9 = v105;
          v6 = v106;
          v15 = v107;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
            {
              WTF::StringImpl::destroy(v43, v11);
              v4 = (WebCore::ExtensionStyleSheets *)this;
            }
            else
            {
              *(_DWORD *)v43 -= 2;
            }
          }
          v44 = v24 + 16 * v23;
          v45 = (char *)v105 + 16 * v107;
          v46 = *((_QWORD *)v45 + 1);
          *((_QWORD *)v45 + 1) = 0;
          v47 = *(_DWORD **)(v44 + 8);
          *(_QWORD *)(v44 + 8) = v46;
          if (v47)
          {
            if (v47[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 8))(v47);
              v4 = (WebCore::ExtensionStyleSheets *)this;
            }
            else
            {
              --v47[2];
            }
          }
        }
        v48 = (_DWORD *)*((_QWORD *)v16 + 1);
        *((_QWORD *)v16 + 1) = 0;
        if (v48)
        {
          if (v48[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v48 + 8))(v48);
            v4 = (WebCore::ExtensionStyleSheets *)this;
          }
          else
          {
            --v48[2];
          }
        }
        v49 = *(WTF::StringImpl **)v16;
        *(_QWORD *)v16 = 0;
        if (v49)
        {
          if (*(_DWORD *)v49 == 2)
          {
            WTF::StringImpl::destroy(v49, v11);
            v4 = (WebCore::ExtensionStyleSheets *)this;
          }
          else
          {
            *(_DWORD *)v49 -= 2;
          }
        }
        ++v15;
      }
      while (v15 != v6);
      goto LABEL_59;
    }
    if (v9)
    {
LABEL_59:
      WTF::fastFree(v9, v11);
      v4 = (WebCore::ExtensionStyleSheets *)this;
      LODWORD(v6) = *((_DWORD *)this + 38);
      goto LABEL_60;
    }
    LODWORD(v6) = 8;
  }
LABEL_60:
  v50 = v6 - 1;
  v51 = *((_DWORD *)v4 + 40);
  v52 = *((_DWORD *)*a2 + 4);
  if (v52 < 0x100)
  {
    v54 = WTF::StringImpl::hashSlowCase(*a2);
    v4 = (WebCore::ExtensionStyleSheets *)this;
    v53 = v54;
  }
  else
  {
    v53 = v52 >> 8;
  }
  v55 = (v53 ^ v51) & v50;
  v56 = *((_QWORD *)v4 + 18);
  v57 = (WTF **)(v56 + 16 * v55);
  v58 = *v57;
  if (*v57)
  {
    v59 = 0;
    while (1)
    {
      v60 = *((_DWORD *)v58 + 4);
      if (v60 < 0x100)
      {
        v61 = WTF::StringImpl::hashSlowCase(v58);
        v4 = (WebCore::ExtensionStyleSheets *)this;
      }
      else
      {
        v61 = v60 >> 8;
      }
      v62 = (v55 + v6 - ((v61 ^ v51) & v50)) & v50;
      if (v59 > v62)
        break;
      if (v61 == v53)
      {
        v63 = WTF::equal(*v57, *a2, a3);
        v4 = (WebCore::ExtensionStyleSheets *)this;
        if ((v63 & 1) != 0)
          goto LABEL_117;
      }
      v56 = *((_QWORD *)v4 + 18);
      v55 = ((_DWORD)v55 + 1) & v50;
      ++v59;
      v57 = (WTF **)(v56 + 16 * v55);
      v58 = *v57;
      if (!*v57)
      {
        if (v59 >= 0x80)
          *((_BYTE *)v4 + 164) = 1;
        goto LABEL_74;
      }
    }
    if (v59 >= 0x80)
      *((_BYTE *)v4 + 164) = 1;
    v67 = *v57;
    *v57 = 0;
    v68 = v56 + 16 * v55;
    v71 = *(_QWORD *)(v68 + 8);
    v69 = (_QWORD *)(v68 + 8);
    v70 = v71;
    *v69 = 0;
    *v57 = 0;
    v57[1] = 0;
    v72 = *a2;
    if (*a2)
      *(_DWORD *)v72 += 2;
    *v57 = v72;
    v73 = (_DWORD *)*v69;
    *v69 = 0;
    if (v73)
    {
      if (v73[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v73 + 8))(v73);
        v4 = (WebCore::ExtensionStyleSheets *)this;
      }
      else
      {
        --v73[2];
      }
    }
    while (1)
    {
      v55 = ((_DWORD)v55 + 1) & v50;
      v79 = *((_QWORD *)v4 + 18);
      v80 = (WTF **)(v79 + 16 * v55);
      v81 = *v80;
      if (!*v80)
        break;
      v74 = *((_DWORD *)v81 + 4);
      if (v74 < 0x100)
      {
        v75 = WTF::StringImpl::hashSlowCase(v81);
        v4 = (WebCore::ExtensionStyleSheets *)this;
      }
      else
      {
        v75 = v74 >> 8;
      }
      if (++v62 > (((_DWORD)v55 + (_DWORD)v6 - ((v75 ^ v51) & v50)) & v50))
      {
        v76 = *v80;
        *v80 = 0;
        v77 = v79 + 16 * v55;
        v78 = *(_QWORD *)(v77 + 8);
        *v80 = v67;
        *(_QWORD *)(v77 + 8) = v70;
        v70 = v78;
        v67 = v76;
        v62 = (v55 + v6 - ((v75 ^ v51) & v50)) & v50;
      }
    }
    *v80 = v67;
    v82 = v79 + 16 * v55;
    v66 = *(_DWORD **)(v82 + 8);
    *(_QWORD *)(v82 + 8) = v70;
    if (v66)
      goto LABEL_94;
  }
  else
  {
LABEL_74:
    v64 = *a2;
    if (*a2)
      *(_DWORD *)v64 += 2;
    *v57 = v64;
    v65 = v56 + 16 * v55;
    v66 = *(_DWORD **)(v65 + 8);
    *(_QWORD *)(v65 + 8) = 0;
    if (v66)
    {
LABEL_94:
      if (v66[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v66 + 8))(v66);
        v4 = (WebCore::ExtensionStyleSheets *)this;
      }
      else
      {
        --v66[2];
      }
    }
  }
  ++*((_DWORD *)v4 + 39);
  v83 = *(_QWORD *)(*((_QWORD *)v4 + 1) + 8);
  *(_DWORD *)(v83 + 24) += 2;
  v84 = (WebCore::ContentExtensions::ContentExtensionStyleSheet *)WTF::fastMalloc((WTF *)0x20);
  WebCore::ContentExtensions::ContentExtensionStyleSheet::ContentExtensionStyleSheet(v84, (WebCore::Document *)v83);
  v85 = v57[1];
  v57[1] = v84;
  if (v85)
  {
    if (*((_DWORD *)v85 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v85 + 8))(v85);
    else
      --*((_DWORD *)v85 + 2);
  }
  if (*(_DWORD *)(v83 + 24) != 2)
  {
    *(_DWORD *)(v83 + 24) -= 2;
LABEL_101:
    v86 = (WebCore::ExtensionStyleSheets *)this;
    goto LABEL_102;
  }
  v86 = (WebCore::ExtensionStyleSheets *)this;
  if ((*(_WORD *)(v83 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v83);
    goto LABEL_101;
  }
LABEL_102:
  v87 = *((_QWORD *)v57[1] + 2);
  v88 = *((unsigned int *)v86 + 21);
  if ((_DWORD)v88 == *((_DWORD *)v86 + 20))
  {
    v89 = v88 + (v88 >> 2);
    if (v89 >= 0x10)
      v90 = v89 + 1;
    else
      v90 = 16;
    if (v90 <= v88 + 1)
      v91 = v88 + 1;
    else
      v91 = v90;
    if (v91 >> 29)
      goto LABEL_131;
    v92 = (void *)*((_QWORD *)v86 + 9);
    v93 = v86;
    v94 = (void *)WTF::fastMalloc((WTF *)(8 * v91));
    *((_DWORD *)v93 + 20) = v91;
    *((_QWORD *)v93 + 9) = v94;
    memcpy(v94, v92, 8 * v88);
    if (v92)
    {
      if (*((void **)v93 + 9) == v92)
      {
        *((_QWORD *)v93 + 9) = 0;
        *((_DWORD *)v93 + 20) = 0;
      }
      WTF::fastFree((WTF *)v92, v95);
    }
    v88 = *((unsigned int *)v93 + 21);
    v96 = *((_QWORD *)v93 + 9);
    v86 = v93;
    if (v87)
      ++*(_DWORD *)(v87 + 8);
    v97 = (_QWORD *)(v96 + 8 * v88);
  }
  else
  {
    v97 = (_QWORD *)(*((_QWORD *)v86 + 9) + 8 * v88);
    if (v87)
      ++*(_DWORD *)(v87 + 8);
  }
  *v97 = v87;
  *((_DWORD *)v86 + 21) = v88 + 1;
LABEL_117:
  if (WebCore::ContentExtensions::ContentExtensionStyleSheet::addDisplayNoneSelector(v57[1], (WTF::StringImpl **)a3, a4))
  {
    v99 = *((_QWORD *)this[1] + 1);
    *(_DWORD *)(v99 + 24) += 2;
    v100 = *(WebCore::Style::Scope **)(v99 + 1328);
    ++*((_DWORD *)v100 + 2);
    WebCore::Style::Scope::didChangeStyleSheetEnvironment(v100, v98);
    v101 = *((_DWORD *)v100 + 2);
    if (v101)
    {
      *((_DWORD *)v100 + 2) = v101 - 1;
      if (*(_DWORD *)(v99 + 24) == 2)
      {
        if ((*(_WORD *)(v99 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v99);
      }
      else
      {
        *(_DWORD *)(v99 + 24) -= 2;
      }
      return;
    }
LABEL_131:
    __break(0xC471u);
    JUMPOUT(0x1959E8500);
  }
}

void WebCore::ExtensionStyleSheets::maybeAddContentExtensionSheet(WebCore::ExtensionStyleSheets *this, WTF::StringImpl **a2, WebCore::StyleSheetContents *a3)
{
  WebCore::ExtensionStyleSheets *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  WTF **v13;
  WTF *v14;
  int v15;
  unsigned int v16;
  int v17;
  char v18;
  uint64_t v19;
  void *v20;
  const WTF::StringImpl *v21;
  WebCore::ExtensionStyleSheets *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  WTF *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  WTF::StringImpl *v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  WTF::StringImpl *v42;
  unsigned int v43;
  _QWORD *v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  WTF::StringImpl *v48;
  _DWORD *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _DWORD *v55;
  WTF::StringImpl *v56;
  _DWORD *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _DWORD *v63;
  _DWORD *v64;
  WTF::StringImpl *v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  char v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  _DWORD *v82;
  WTF *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  _DWORD *v89;
  _DWORD *v90;
  WTF *v91;
  void *v92;
  unsigned int v93;
  int v94;
  WTF *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF **v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  void *v106;
  WebCore::ExtensionStyleSheets *v107;
  void *v108;
  uint64_t *v109;
  uint64_t v110;
  WebCore::Style::Scope *v111;
  int v112;
  uint64_t v113;
  WTF *v114;
  uint64_t v115;
  uint64_t v117;
  int v118;
  __int16 v120;
  WebCore::StyleSheetContents *v121;
  uint64_t v122;

  v4 = this;
  v5 = *((_QWORD *)this + 15);
  if (v5)
  {
    v6 = *((_DWORD *)this + 32);
    v7 = v6 - 1;
    v8 = *((_DWORD *)this + 34);
    v9 = *((_DWORD *)*a2 + 4);
    if (v9 < 0x100)
    {
      v11 = WTF::StringImpl::hashSlowCase(*a2);
      v4 = this;
      v10 = v11;
      v5 = *((_QWORD *)this + 15);
    }
    else
    {
      v10 = v9 >> 8;
    }
    v12 = (v10 ^ v8) & v7;
    v13 = (WTF **)(v5 + 16 * v12);
    v14 = *v13;
    if (*v13)
    {
      v15 = -1;
      do
      {
        v16 = *((_DWORD *)v14 + 4);
        if (v16 < 0x100)
        {
          v17 = WTF::StringImpl::hashSlowCase(v14);
          v4 = this;
        }
        else
        {
          v17 = v16 >> 8;
        }
        if (++v15 > ((v12 + v6 - ((v17 ^ v8) & v7)) & v7))
          break;
        if (v17 == v10)
        {
          v18 = WTF::equal(*v13, *a2, a3);
          v4 = this;
          if ((v18 & 1) != 0)
            return;
        }
        v12 = (v12 + 1) & v7;
        v13 = (WTF **)(*((_QWORD *)v4 + 15) + 16 * v12);
        v14 = *v13;
      }
      while (*v13);
    }
  }
  ++*(_DWORD *)a3;
  v121 = a3;
  v19 = *(_QWORD *)(*((_QWORD *)v4 + 1) + 8);
  *(_DWORD *)(v19 + 24) += 2;
  v120 = 0;
  v122 = 0;
  v113 = WTF::fastMalloc((WTF *)0x98);
  WebCore::CSSStyleSheet::CSSStyleSheet(v113, (uint64_t *)&v121, v19, &v122, 0, &v120);
  if (*(_DWORD *)(v19 + 24) != 2)
  {
    *(_DWORD *)(v19 + 24) -= 2;
LABEL_16:
    v22 = this;
    goto LABEL_17;
  }
  v22 = this;
  if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v19);
    goto LABEL_16;
  }
LABEL_17:
  if (v121)
  {
    if (*(_DWORD *)v121 == 1)
    {
      WebCore::StyleSheetContents::~StyleSheetContents(v121, v20);
      WTF::fastFree(v91, v92);
      v22 = this;
    }
    else
    {
      --*(_DWORD *)v121;
    }
  }
  v24 = *((unsigned int *)v22 + 32);
  v23 = *((unsigned int *)v22 + 33);
  if (10 * v23 >= (unint64_t)(9 * v24) || v24 <= 2 * (int)v23 && *((_BYTE *)v22 + 140))
  {
    if ((_DWORD)v24)
      v25 = 2 * v24;
    else
      v25 = 8;
    v26 = (WTF *)*((_QWORD *)v22 + 15);
    v27 = WTF::fastZeroedMalloc((WTF *)(16 * v25));
    v22 = this;
    *((_QWORD *)this + 15) = v27;
    *((_DWORD *)this + 32) = v25;
    v28 = (~(v27 << 32) + v27) ^ ((unint64_t)(~(v27 << 32) + v27) >> 22);
    v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
    v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
    *((_DWORD *)this + 34) = (v30 >> 31) ^ v30;
    *((_BYTE *)this + 140) = 0;
    if ((_DWORD)v24)
    {
      v31 = 0;
      v114 = v26;
      v115 = v24;
      do
      {
        v32 = (char *)v26 + 16 * v31;
        v33 = *(WTF::StringImpl **)v32;
        if (*(_QWORD *)v32)
        {
          v34 = *((_DWORD *)v22 + 32);
          v35 = *((_DWORD *)v22 + 34);
          v36 = *((_DWORD *)v33 + 4);
          v118 = v34;
          if (v36 < 0x100)
          {
            v37 = WTF::StringImpl::hashSlowCase(v33);
            v34 = v118;
            v22 = this;
          }
          else
          {
            v37 = v36 >> 8;
          }
          v117 = v31;
          v38 = v34 - 1;
          v39 = (v37 ^ v35) & (v34 - 1);
          v40 = *((_QWORD *)v22 + 15);
          v41 = (WTF::StringImpl **)(v40 + 16 * v39);
          v42 = *v41;
          if (*v41)
          {
            v43 = 0;
            v44 = (_QWORD *)((char *)v26 + 16 * v117 + 8);
            do
            {
              v45 = *((_DWORD *)v42 + 4);
              if (v45 < 0x100)
              {
                v46 = WTF::StringImpl::hashSlowCase(v42);
                v34 = v118;
                v22 = this;
              }
              else
              {
                v46 = v45 >> 8;
              }
              v47 = (v39 + v34 - ((v46 ^ v35) & v38)) & v38;
              if (v43 > v47)
              {
                v48 = *(WTF::StringImpl **)v32;
                v49 = (_DWORD *)*v44;
                *(_QWORD *)v32 = 0;
                *((_QWORD *)v32 + 1) = 0;
                v50 = *v41;
                *v41 = 0;
                v51 = *(WTF::StringImpl **)v32;
                *(_QWORD *)v32 = v50;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                  {
                    WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v20);
                    v34 = v118;
                    v22 = this;
                  }
                  else
                  {
                    *(_DWORD *)v51 -= 2;
                  }
                }
                v52 = v40 + 16 * v39;
                v54 = *(_QWORD *)(v52 + 8);
                v53 = (_QWORD *)(v52 + 8);
                *v53 = 0;
                v55 = (_DWORD *)*v44;
                *v44 = v54;
                if (v55)
                {
                  if (v55[2] == 1)
                  {
                    (*(void (**)(_DWORD *))(*(_QWORD *)v55 + 8))(v55);
                    v34 = v118;
                    v22 = this;
                  }
                  else
                  {
                    --v55[2];
                  }
                }
                v56 = *v41;
                *v41 = v48;
                if (v56)
                {
                  if (*(_DWORD *)v56 == 2)
                  {
                    WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v20);
                    v34 = v118;
                    v22 = this;
                  }
                  else
                  {
                    *(_DWORD *)v56 -= 2;
                  }
                }
                v57 = (_DWORD *)*v53;
                *v53 = v49;
                if (v57)
                {
                  if (v57[2] == 1)
                  {
                    (*(void (**)(_DWORD *))(*(_QWORD *)v57 + 8))(v57);
                    v34 = v118;
                    v22 = this;
                  }
                  else
                  {
                    --v57[2];
                  }
                }
                v43 = v47;
              }
              v39 = ((_DWORD)v39 + 1) & v38;
              ++v43;
              v40 = *((_QWORD *)v22 + 15);
              v41 = (WTF::StringImpl **)(v40 + 16 * v39);
              v42 = *v41;
            }
            while (*v41);
          }
          v58 = *(WTF::StringImpl **)v32;
          *(_QWORD *)v32 = 0;
          v59 = *v41;
          *v41 = v58;
          v26 = v114;
          v24 = v115;
          v31 = v117;
          if (v59)
          {
            if (*(_DWORD *)v59 == 2)
            {
              WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v20);
              v22 = this;
            }
            else
            {
              *(_DWORD *)v59 -= 2;
            }
          }
          v60 = v40 + 16 * v39;
          v61 = (char *)v114 + 16 * v117;
          v62 = *((_QWORD *)v61 + 1);
          *((_QWORD *)v61 + 1) = 0;
          v63 = *(_DWORD **)(v60 + 8);
          *(_QWORD *)(v60 + 8) = v62;
          if (v63)
          {
            if (v63[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v63 + 8))(v63);
              v22 = this;
            }
            else
            {
              --v63[2];
            }
          }
        }
        v64 = (_DWORD *)*((_QWORD *)v32 + 1);
        *((_QWORD *)v32 + 1) = 0;
        if (v64)
        {
          if (v64[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v64 + 8))(v64);
            v22 = this;
          }
          else
          {
            --v64[2];
          }
        }
        v65 = *(WTF::StringImpl **)v32;
        *(_QWORD *)v32 = 0;
        if (v65)
        {
          if (*(_DWORD *)v65 == 2)
          {
            WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v20);
            v22 = this;
          }
          else
          {
            *(_DWORD *)v65 -= 2;
          }
        }
        ++v31;
      }
      while (v31 != v24);
      goto LABEL_76;
    }
    if (v26)
    {
LABEL_76:
      WTF::fastFree(v26, v20);
      v22 = this;
      LODWORD(v24) = *((_DWORD *)this + 32);
      goto LABEL_77;
    }
    LODWORD(v24) = 8;
  }
LABEL_77:
  v66 = v24 - 1;
  v67 = *((_DWORD *)v22 + 34);
  v68 = *((_DWORD *)*a2 + 4);
  if (v68 < 0x100)
  {
    v70 = WTF::StringImpl::hashSlowCase(*a2);
    v22 = this;
    v69 = v70;
  }
  else
  {
    v69 = v68 >> 8;
  }
  v71 = (v69 ^ v67) & v66;
  v72 = *((_QWORD *)v22 + 15);
  v73 = v72 + 16 * v71;
  v74 = *(WTF **)v73;
  if (!*(_QWORD *)v73)
  {
LABEL_91:
    v80 = *a2;
    if (*a2)
      *(_DWORD *)v80 += 2;
    *(_QWORD *)v73 = v80;
    v81 = v72 + 16 * v71;
    ++*(_DWORD *)(v113 + 8);
    v82 = *(_DWORD **)(v81 + 8);
    *(_QWORD *)(v81 + 8) = v113;
    if (!v82)
      goto LABEL_119;
    goto LABEL_117;
  }
  v75 = 0;
  while (1)
  {
    v76 = *((_DWORD *)v74 + 4);
    if (v76 < 0x100)
    {
      v77 = WTF::StringImpl::hashSlowCase(v74);
      v22 = this;
    }
    else
    {
      v77 = v76 >> 8;
    }
    v78 = (v71 + v24 - ((v77 ^ v67) & v66)) & v66;
    if (v75 > v78)
      break;
    if (v77 == v69)
    {
      v79 = WTF::equal(*(WTF **)v73, *a2, v21);
      v22 = this;
      if ((v79 & 1) != 0)
      {
        ++*(_DWORD *)(v113 + 8);
        v90 = *(_DWORD **)(v73 + 8);
        *(_QWORD *)(v73 + 8) = v113;
        if (v90)
        {
          if (v90[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v90 + 8))(v90);
            v22 = this;
          }
          else
          {
            --v90[2];
          }
        }
        goto LABEL_120;
      }
    }
    v72 = *((_QWORD *)v22 + 15);
    v71 = ((_DWORD)v71 + 1) & v66;
    ++v75;
    v73 = v72 + 16 * v71;
    v74 = *(WTF **)v73;
    if (!*(_QWORD *)v73)
    {
      if (v75 >= 0x80)
        *((_BYTE *)v22 + 140) = 1;
      goto LABEL_91;
    }
  }
  if (v75 >= 0x80)
    *((_BYTE *)v22 + 140) = 1;
  v83 = *(WTF **)v73;
  *(_QWORD *)v73 = 0;
  v84 = v72 + 16 * v71;
  v87 = *(_QWORD *)(v84 + 8);
  v85 = (uint64_t *)(v84 + 8);
  v86 = v87;
  *v85 = 0;
  *(_QWORD *)v73 = 0;
  *(_QWORD *)(v73 + 8) = 0;
  v88 = *a2;
  if (*a2)
    *(_DWORD *)v88 += 2;
  *(_QWORD *)v73 = v88;
  ++*(_DWORD *)(v113 + 8);
  v89 = (_DWORD *)*v85;
  *v85 = v113;
  if (v89)
  {
    if (v89[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v89 + 8))(v89);
      v22 = this;
    }
    else
    {
      --v89[2];
    }
  }
  while (1)
  {
    v71 = ((_DWORD)v71 + 1) & v66;
    v98 = *((_QWORD *)v22 + 15);
    v99 = (WTF **)(v98 + 16 * v71);
    v100 = *v99;
    if (!*v99)
      break;
    v93 = *((_DWORD *)v100 + 4);
    if (v93 < 0x100)
    {
      v94 = WTF::StringImpl::hashSlowCase(v100);
      v22 = this;
    }
    else
    {
      v94 = v93 >> 8;
    }
    if (++v78 > (((_DWORD)v71 + (_DWORD)v24 - ((v94 ^ v67) & v66)) & v66))
    {
      v95 = *v99;
      *v99 = 0;
      v96 = v98 + 16 * v71;
      v97 = *(_QWORD *)(v96 + 8);
      *v99 = v83;
      *(_QWORD *)(v96 + 8) = v86;
      v86 = v97;
      v83 = v95;
      v78 = (v71 + v24 - ((v94 ^ v67) & v66)) & v66;
    }
  }
  *v99 = v83;
  v101 = v98 + 16 * v71;
  v82 = *(_DWORD **)(v101 + 8);
  *(_QWORD *)(v101 + 8) = v86;
  if (v82)
  {
LABEL_117:
    if (v82[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v82 + 8))(v82);
      v22 = this;
    }
    else
    {
      --v82[2];
    }
  }
LABEL_119:
  ++*((_DWORD *)v22 + 33);
LABEL_120:
  v102 = *((unsigned int *)v22 + 21);
  if ((_DWORD)v102 == *((_DWORD *)v22 + 20))
  {
    v103 = v102 + (v102 >> 2);
    if (v103 >= 0x10)
      v104 = v103 + 1;
    else
      v104 = 16;
    if (v104 <= v102 + 1)
      v105 = v102 + 1;
    else
      v105 = v104;
    if (v105 >> 29)
    {
LABEL_142:
      __break(0xC471u);
      JUMPOUT(0x1959E8DD8);
    }
    v106 = (void *)*((_QWORD *)v22 + 9);
    v107 = v22;
    v108 = (void *)WTF::fastMalloc((WTF *)(8 * v105));
    *((_DWORD *)v107 + 20) = v105;
    *((_QWORD *)v107 + 9) = v108;
    memcpy(v108, v106, 8 * v102);
    if (v106)
    {
      if (*((void **)v107 + 9) == v106)
      {
        *((_QWORD *)v107 + 9) = 0;
        *((_DWORD *)v107 + 20) = 0;
      }
      WTF::fastFree((WTF *)v106, v20);
    }
    v102 = *((unsigned int *)v107 + 21);
    v109 = (uint64_t *)(*((_QWORD *)v107 + 9) + 8 * v102);
    v22 = v107;
  }
  else
  {
    v109 = (uint64_t *)(*((_QWORD *)v22 + 9) + 8 * v102);
  }
  *v109 = v113;
  *((_DWORD *)v22 + 21) = v102 + 1;
  v110 = *(_QWORD *)(*((_QWORD *)v22 + 1) + 8);
  *(_DWORD *)(v110 + 24) += 2;
  v111 = *(WebCore::Style::Scope **)(v110 + 1328);
  ++*((_DWORD *)v111 + 2);
  WebCore::Style::Scope::didChangeStyleSheetEnvironment(v111, v20);
  v112 = *((_DWORD *)v111 + 2);
  if (!v112)
    goto LABEL_142;
  *((_DWORD *)v111 + 2) = v112 - 1;
  if (*(_DWORD *)(v110 + 24) == 2)
  {
    if ((*(_WORD *)(v110 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v110);
  }
  else
  {
    *(_DWORD *)(v110 + 24) -= 2;
  }
}

uint64_t WebCore::FocusEvent::isFocusEvent(WebCore::FocusEvent *this)
{
  return 1;
}

uint64_t WebCore::FocusEvent::FocusEvent(uint64_t a1, _QWORD *a2, int a3, int a4, uint64_t *a5, int a6, uint64_t *a7)
{
  uint64_t v14;
  _BOOL4 v15;
  unsigned int v16;
  int v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;

  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *a2 != 0;
  v16 = *(_DWORD *)(a1 + 20) & 0xFFC00000;
  if (a4)
    v17 = 4;
  else
    v17 = 0;
  if (a3)
    v18 = 2163210;
  else
    v18 = 2163208;
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = v18 | v17 | v16 | v15;
  v19 = (_DWORD *)*a2;
  if (*a2)
    *v19 += 2;
  *(_QWORD *)(a1 + 24) = v19;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v14;
  *(_QWORD *)(a1 + 64) = 0;
  v20 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 72) = v20;
  *(_DWORD *)(a1 + 80) = a6;
  *(_QWORD *)a1 = off_1E33A4D68;
  v21 = *a7;
  *a7 = 0;
  *(_QWORD *)(a1 + 88) = v21;
  return a1;
}

WebCore::FragmentDirectiveGenerator *WebCore::FragmentDirectiveGenerator::FragmentDirectiveGenerator(WebCore::FragmentDirectiveGenerator *this, const WebCore::SimpleRange *a2)
{
  *(_QWORD *)this = 0;
  WTF::URL::invalidate(this);
  WebCore::FragmentDirectiveGenerator::generateFragmentDirective(this, a2);
  return this;
}

{
  *(_QWORD *)this = 0;
  WTF::URL::invalidate(this);
  WebCore::FragmentDirectiveGenerator::generateFragmentDirective(this, a2);
  return this;
}

WTF::StringImpl *WebCore::FragmentDirectiveGenerator::generateFragmentDirective(WebCore::FragmentDirectiveGenerator *this, const WebCore::SimpleRange *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WebCore::Range *v7;
  WebCore *v8;
  const WebCore::SimpleRange *v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;
  int v14;
  void *v15;
  VisiblePosition *v16;
  unsigned int v17;
  const WTF::String *v18;
  WTF::StringImpl *v19;
  VisiblePosition *v20;
  WTF::StringImpl *v21;
  const WTF::String *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  char v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  _BYTE *v42;
  _BYTE *v43;
  size_t v44;
  uint64_t v45;
  _WORD *v46;
  int8x16_t *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  char *v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  char *v57;
  char *v58;
  char *v59;
  __int16 v60;
  char *v61;
  int8x16_t *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  char *v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  char *v72;
  char *v73;
  char *v74;
  __int16 v75;
  char *v76;
  char *v77;
  int8x16_t *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  __int128 v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  char *v86;
  char *v87;
  char *v88;
  __int16 v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  int v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  int v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  const WTF::String *v101;
  WTF::StringImpl *v102;
  VisiblePosition *v103;
  WTF::StringImpl *v104;
  const WTF::String *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  const WTF::String *v108;
  const WTF::String *v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  int v116;
  char v117;
  int v118;
  int v119;
  BOOL v120;
  int v121;
  BOOL v122;
  unsigned int v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  _WORD *v126;
  int8x16_t *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  int v131;
  _BOOL4 v132;
  _BYTE *v133;
  _BYTE *v134;
  size_t v135;
  uint64_t v136;
  _BYTE *v137;
  _BYTE *v138;
  size_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  char *v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  char *v147;
  char *v148;
  char *v149;
  __int16 v150;
  char *v151;
  int8x16_t *v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  __int128 v157;
  char *v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  char *v162;
  char *v163;
  char *v164;
  __int16 v165;
  char *v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  __int128 v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *result;
  unsigned __int128 *v174;
  unsigned __int128 *v175;
  unsigned __int128 v176;
  unsigned __int128 *v177;
  unsigned __int128 *v178;
  unsigned __int128 v179;
  unsigned __int128 *v180;
  unsigned __int128 *v181;
  unsigned __int128 v182;
  char v183;
  char v184;
  char v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  int v191;
  char v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  WebCore::Node *v195;
  int v196;
  char v197;
  char v198;
  WebCore::Node *v199[2];
  char v200;
  WTF::StringImpl *v201;
  WTF::StringImpl *v202;
  __int128 v203;
  __int128 v204;
  int8x16x2_t v205;
  int8x16x2_t v206;
  int8x16x2_t v207;
  int8x16x2_t v208;
  int8x16x2_t v209;
  int8x16x2_t v210;
  int8x16x2_t v211;
  int8x16x2_t v212;
  int8x16x2_t v213;
  int8x16x2_t v214;
  int8x16x2_t v215;
  int8x16x2_t v216;
  int8x16x2_t v217;
  int8x16x2_t v218;
  int8x16x2_t v219;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = v202;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 8);
  v6 = *(WTF::StringImpl **)(v5 + 736);
  if (v6)
    *(_DWORD *)v6 += 2;
  v202 = v6;
  v203 = *(_OWORD *)(v5 + 744);
  v204 = *(_OWORD *)(v5 + 760);
  v7 = (WebCore::Range *)bmalloc::api::isoAllocate();
  v8 = WebCore::Range::Range(v7, (WebCore::Document *)v5);
  WebCore::setBothEndpoints(v8, a2, v9);
  WebCore::Range::toString(v7, &v201);
  if (*((_DWORD *)v7 + 2) == 1)
    (*(void (**)(WebCore::Range *))(*(_QWORD *)v7 + 8))(v7);
  else
    --*((_DWORD *)v7 + 2);
  v10 = *((_QWORD *)a2 + 2);
  *(_DWORD *)(v10 + 24) += 2;
  v11 = *((_DWORD *)a2 + 6);
  v195 = (WebCore::Node *)v10;
  v196 = v11;
  v197 = 0;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v195, (uint64_t)v199);
  v200 = 1;
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v10, v12);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  v13 = *(_QWORD *)a2;
  *(_DWORD *)(v13 + 24) = *(_DWORD *)(*(_QWORD *)a2 + 24) + 2;
  v14 = *((_DWORD *)a2 + 2);
  v189 = (WTF::StringImpl *)v13;
  LODWORD(v190) = v14;
  BYTE4(v190) = 0;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v189, (uint64_t)&v195);
  v198 = 1;
  if (*(_DWORD *)(v13 + 24) == 2)
  {
    if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v13, v15);
  }
  else
  {
    *(_DWORD *)(v13 + 24) -= 2;
  }
  if (!v201)
    goto LABEL_169;
  v17 = *((_DWORD *)v201 + 1);
  if (v17 >= 0x12C)
  {
    WebCore::nextWordsFromPosition((WebCore *)&v189, &v195, v16);
    WTF::percentEncodeFragmentDirectiveSpecialCharacters((WTF *)&v189, v18);
    v21 = v189;
    v189 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v19);
      else
        *(_DWORD *)v21 -= 2;
    }
    WebCore::previousWordsFromPosition((WebCore *)&v189, v199, v20);
    WTF::percentEncodeFragmentDirectiveSpecialCharacters((WTF *)&v189, v22);
    v24 = v189;
    v189 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
      {
        WTF::StringImpl::destroy(v24, v23);
        if (!v4)
        {
LABEL_19:
          v25 = v194;
          if (v194)
            *(_DWORD *)v194 += 2;
          v26 = v193;
          if (v193)
            *(_DWORD *)v193 += 2;
          if (v4)
          {
            v27 = *((_DWORD *)v4 + 1);
            if (v25)
              goto LABEL_25;
          }
          else
          {
            v27 = 0;
            if (v25)
            {
LABEL_25:
              v28 = *((_DWORD *)v25 + 1);
              if (v26)
                goto LABEL_26;
              goto LABEL_76;
            }
          }
          v28 = 0;
          if (v26)
          {
LABEL_26:
            v29 = *((_DWORD *)v26 + 1);
            if (v29 < 0)
              goto LABEL_80;
LABEL_27:
            v30 = __OFADD__(v29, 1);
            v31 = v29 + 1;
            v32 = v30;
            if (v28 < 0 || (v32 & 1) != 0)
              goto LABEL_80;
            v30 = __OFADD__(v28, v31);
            v33 = v28 + v31;
            v34 = v30;
            if (v27 < 0)
              goto LABEL_80;
            if (v34)
              goto LABEL_80;
            v35 = v27 + v33;
            if (__OFADD__(v27, v33))
              goto LABEL_80;
            if (v4 && (*((_BYTE *)v4 + 16) & 4) == 0)
            {
              if (v35)
              {
                v36 = v35;
LABEL_58:
                if (v35 <= 0x7FFFFFEF)
                {
                  WTF::tryFastCompactMalloc((WTF *)(2 * v36 + 20));
                  v41 = v189;
                  if (v189)
                  {
                    v46 = (_WORD *)((char *)v189 + 20);
                    *(_DWORD *)v189 = 2;
                    *((_DWORD *)v41 + 1) = v35;
                    *((_QWORD *)v41 + 1) = (char *)v41 + 20;
                    *((_DWORD *)v41 + 4) = 0;
                    if (v4)
                    {
                      v47 = (int8x16_t *)*((_QWORD *)v4 + 1);
                      v48 = *((unsigned int *)v4 + 1);
                      if ((*((_BYTE *)v4 + 16) & 4) != 0)
                      {
                        v49 = (char *)&v46[v48];
                        if (v48 >= 0x40)
                        {
                          v50 = (char *)&v46[v48 & 0xFFFFFFC0];
                          v52 = 0uLL;
                          v53 = (char *)v41 + 20;
                          do
                          {
                            v205.val[0] = *v47;
                            v54 = v47[1];
                            v210.val[0] = v47[2];
                            v55 = v47[3];
                            v47 += 4;
                            v56 = v55;
                            v210.val[1] = 0uLL;
                            v215.val[0] = v54;
                            v205.val[1] = 0uLL;
                            v57 = v53;
                            vst2q_s8(v57, v205);
                            v57 += 32;
                            v215.val[1] = 0uLL;
                            vst2q_s8(v57, v215);
                            v58 = v53 + 64;
                            vst2q_s8(v58, v210);
                            v59 = v53 + 96;
                            vst2q_s8(v59, *(int8x16x2_t *)(&v52 - 1));
                            v53 += 128;
                          }
                          while (v53 != v50);
                        }
                        else
                        {
                          v50 = (char *)v41 + 20;
                        }
                        while (v50 != v49)
                        {
                          v60 = v47->u8[0];
                          v47 = (int8x16_t *)((char *)v47 + 1);
                          *(_WORD *)v50 = v60;
                          v50 += 2;
                        }
                      }
                      else if ((_DWORD)v48 == 1)
                      {
                        *v46 = v47->i16[0];
                      }
                      else if ((_DWORD)v48)
                      {
                        memcpy((char *)v41 + 20, v47, 2 * v48);
                      }
                      v51 = *((unsigned int *)v4 + 1);
                    }
                    else
                    {
                      v51 = 0;
                    }
                    v61 = (char *)&v46[v51];
                    if (v25)
                    {
                      v62 = (int8x16_t *)*((_QWORD *)v25 + 1);
                      v63 = *((unsigned int *)v25 + 1);
                      if ((*((_BYTE *)v25 + 16) & 4) != 0)
                      {
                        v64 = &v61[2 * v63];
                        if (v63 >= 0x40)
                        {
                          v65 = &v61[2 * (v63 & 0xFFFFFFC0)];
                          v67 = 0uLL;
                          v68 = v61;
                          do
                          {
                            v206.val[0] = *v62;
                            v69 = v62[1];
                            v211.val[0] = v62[2];
                            v70 = v62[3];
                            v62 += 4;
                            v71 = v70;
                            v211.val[1] = 0uLL;
                            v216.val[0] = v69;
                            v206.val[1] = 0uLL;
                            v72 = v68;
                            vst2q_s8(v72, v206);
                            v72 += 32;
                            v216.val[1] = 0uLL;
                            vst2q_s8(v72, v216);
                            v73 = v68 + 64;
                            vst2q_s8(v73, v211);
                            v74 = v68 + 96;
                            vst2q_s8(v74, *(int8x16x2_t *)(&v67 - 1));
                            v68 += 128;
                          }
                          while (v68 != v65);
                        }
                        else
                        {
                          v65 = v61;
                        }
                        while (v65 != v64)
                        {
                          v75 = v62->u8[0];
                          v62 = (int8x16_t *)((char *)v62 + 1);
                          *(_WORD *)v65 = v75;
                          v65 += 2;
                        }
                      }
                      else if ((_DWORD)v63 == 1)
                      {
                        *(_WORD *)v61 = v62->i16[0];
                      }
                      else if ((_DWORD)v63)
                      {
                        memcpy(v61, v62, 2 * v63);
                      }
                      v66 = *((unsigned int *)v25 + 1);
                    }
                    else
                    {
                      v66 = 0;
                    }
                    v76 = &v61[2 * v66];
                    *(_WORD *)v76 = 44;
                    v77 = v76 + 2;
                    if (v26)
                    {
                      v78 = (int8x16_t *)*((_QWORD *)v26 + 1);
                      v79 = *((unsigned int *)v26 + 1);
                      if ((*((_BYTE *)v26 + 16) & 4) != 0)
                      {
                        v80 = &v77[2 * v79];
                        if (v79 >= 0x40)
                        {
                          v81 = &v77[2 * (v79 & 0xFFFFFFC0)];
                          v82 = 0uLL;
                          do
                          {
                            v207.val[0] = *v78;
                            v83 = v78[1];
                            v212.val[0] = v78[2];
                            v84 = v78[3];
                            v78 += 4;
                            v85 = v84;
                            v212.val[1] = 0uLL;
                            v217.val[0] = v83;
                            v207.val[1] = 0uLL;
                            v86 = v77;
                            vst2q_s8(v86, v207);
                            v86 += 32;
                            v217.val[1] = 0uLL;
                            vst2q_s8(v86, v217);
                            v87 = v77 + 64;
                            vst2q_s8(v87, v212);
                            v88 = v77 + 96;
                            vst2q_s8(v88, *(int8x16x2_t *)(&v82 - 1));
                            v77 += 128;
                          }
                          while (v77 != v81);
                          v77 = v81;
                        }
                        while (v77 != v80)
                        {
                          v89 = v78->u8[0];
                          v78 = (int8x16_t *)((char *)v78 + 1);
                          *(_WORD *)v77 = v89;
                          v77 += 2;
                        }
                      }
                      else if ((_DWORD)v79 == 1)
                      {
                        *(_WORD *)v77 = v78->i16[0];
                      }
                      else if ((_DWORD)v79)
                      {
                        memcpy(v77, v78, 2 * v79);
                      }
                    }
                    goto LABEL_116;
                  }
                }
                goto LABEL_80;
              }
LABEL_360:
              v41 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
              *MEMORY[0x1E0CBEF70] += 2;
              goto LABEL_116;
            }
            if (v25)
            {
              v37 = *((_DWORD *)v25 + 4);
              if (!v26 || (v37 & 4) == 0)
              {
                v36 = v35;
                v38 = v35 == 0;
                if ((v37 & 4) != 0)
                  goto LABEL_46;
                goto LABEL_57;
              }
            }
            else if (!v26)
            {
              if (!v35)
                goto LABEL_360;
              v39 = 0;
              v40 = 0;
              v36 = v35;
              if ((v35 & 0x80000000) != 0)
                goto LABEL_80;
              goto LABEL_48;
            }
            v36 = v35;
            v38 = v35 == 0;
            if ((*((_BYTE *)v26 + 16) & 4) != 0)
            {
LABEL_46:
              v39 = (uint64_t)v25;
              v40 = (uint64_t)v26;
              if (v38)
                goto LABEL_360;
              if ((v35 & 0x80000000) != 0)
                goto LABEL_80;
LABEL_48:
              WTF::tryFastCompactMalloc((WTF *)(v36 + 20));
              v41 = v189;
              if (v189)
              {
                v42 = (char *)v189 + 20;
                *(_DWORD *)v189 = 2;
                *((_DWORD *)v41 + 1) = v35;
                *((_QWORD *)v41 + 1) = (char *)v41 + 20;
                *((_DWORD *)v41 + 4) = 4;
                if (v4)
                {
                  v43 = (_BYTE *)*((_QWORD *)v4 + 1);
                  v44 = *((unsigned int *)v4 + 1);
                  if ((*((_BYTE *)v4 + 16) & 4) != 0)
                  {
                    if ((_DWORD)v44)
                    {
                      if ((_DWORD)v44 == 1)
                        *v42 = *v43;
                      else
                        memcpy((char *)v41 + 20, v43, v44);
                    }
                  }
                  else
                  {
                    if (v44 < 0x10)
                    {
                      v174 = (unsigned __int128 *)((char *)v41 + 20);
                    }
                    else
                    {
                      v174 = (unsigned __int128 *)&v42[v44 & 0xFFFFFFF0];
                      v175 = (unsigned __int128 *)((char *)v41 + 20);
                      do
                      {
                        v176 = (unsigned __int128)vld2q_s8(v43);
                        v43 += 32;
                        *v175++ = v176;
                      }
                      while (v175 != v174);
                    }
                    while (v174 != (unsigned __int128 *)&v42[v44])
                    {
                      v183 = *v43;
                      v43 += 2;
                      *(_BYTE *)v174 = v183;
                      v174 = (unsigned __int128 *)((char *)v174 + 1);
                    }
                  }
                  v45 = *((unsigned int *)v4 + 1);
                }
                else
                {
                  v45 = 0;
                }
                WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v42[v45], v39, 44, v40);
LABEL_116:
                WTF::URL::setFragmentIdentifier();
                if (*(_DWORD *)v41 == 2)
                {
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v15);
                  if (!v26)
                    goto LABEL_120;
                }
                else
                {
                  *(_DWORD *)v41 -= 2;
                  if (!v26)
                    goto LABEL_120;
                }
                if (*(_DWORD *)v26 == 2)
                  WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v15);
                else
                  *(_DWORD *)v26 -= 2;
LABEL_120:
                if (v25)
                {
                  if (*(_DWORD *)v25 == 2)
                  {
                    WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v15);
                    if (v4)
                    {
LABEL_124:
                      if (*(_DWORD *)v4 == 2)
                        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)v15);
                      else
                        *(_DWORD *)v4 -= 2;
                    }
LABEL_126:
                    v90 = v193;
                    v193 = 0;
                    if (v90)
                    {
                      if (*(_DWORD *)v90 == 2)
                        WTF::StringImpl::destroy(v90, (WTF::StringImpl *)v15);
                      else
                        *(_DWORD *)v90 -= 2;
                    }
                    v91 = v194;
                    v194 = 0;
                    if (v91)
                    {
                      if (*(_DWORD *)v91 == 2)
                        WTF::StringImpl::destroy(v91, (WTF::StringImpl *)v15);
                      else
                        *(_DWORD *)v91 -= 2;
                    }
                    if (!v201)
                      goto LABEL_169;
                    v17 = *((_DWORD *)v201 + 1);
                    goto LABEL_134;
                  }
                  *(_DWORD *)v25 -= 2;
                }
                if (v4)
                  goto LABEL_124;
                goto LABEL_126;
              }
LABEL_80:
              __break(0xC471u);
              JUMPOUT(0x1959E9318);
            }
LABEL_57:
            if (!v38)
              goto LABEL_58;
            goto LABEL_360;
          }
LABEL_76:
          v29 = 0;
          goto LABEL_27;
        }
LABEL_18:
        *(_DWORD *)v4 += 2;
        goto LABEL_19;
      }
      *(_DWORD *)v24 -= 2;
    }
    if (!v4)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_134:
  if (v17 - 21 <= 0x116)
  {
    v190 = 0;
    v192 = 1;
    if (v4)
    {
      v92 = *((_DWORD *)v4 + 1);
      *(_DWORD *)v4 += 2;
    }
    else
    {
      v92 = 0;
    }
    v189 = v4;
    v191 = v92;
    WTF::percentEncodeFragmentDirectiveSpecialCharacters((WTF *)&v201, (const WTF::String *)v15);
    v94 = v194;
    if (v191 || v190)
    {
      if (v194 && (*((_BYTE *)v194 + 16) & 4) == 0)
        WTF::StringBuilder::append();
      else
        WTF::StringBuilder::append();
LABEL_147:
      v96 = v194;
      v194 = 0;
      if (v96)
      {
        if (*(_DWORD *)v96 == 2)
          WTF::StringImpl::destroy(v96, v93);
        else
          *(_DWORD *)v96 -= 2;
      }
      if (v190)
      {
        v98 = v191;
        v97 = v190;
      }
      else
      {
        v97 = v189;
        v98 = v191;
        if (!v189)
          goto LABEL_155;
      }
      if ((*((_BYTE *)v97 + 16) & 4) == 0)
      {
        if (v98 && v98 < 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1959E9EFCLL);
        }
        goto LABEL_160;
      }
LABEL_155:
      if (v98 && v98 < 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1959E9EA4);
      }
LABEL_160:
      WTF::URL::setFragmentIdentifier();
      v99 = v190;
      v190 = 0;
      if (v99)
      {
        if (*(_DWORD *)v99 == 2)
          WTF::StringImpl::destroy(v99, (WTF::StringImpl *)v15);
        else
          *(_DWORD *)v99 -= 2;
      }
      v100 = v189;
      v189 = 0;
      if (v100)
      {
        if (*(_DWORD *)v100 == 2)
          WTF::StringImpl::destroy(v100, (WTF::StringImpl *)v15);
        else
          *(_DWORD *)v100 -= 2;
      }
      if (!v201)
        goto LABEL_169;
      v17 = *((_DWORD *)v201 + 1);
      goto LABEL_168;
    }
    if (v194)
      *(_DWORD *)v194 += 2;
    v95 = v189;
    v189 = v94;
    if (v95)
    {
      if (*(_DWORD *)v95 == 2)
      {
        WTF::StringImpl::destroy(v95, v93);
        v94 = v194;
        if (!v194)
          goto LABEL_146;
        goto LABEL_145;
      }
      *(_DWORD *)v95 -= 2;
    }
    if (!v94)
    {
LABEL_146:
      v191 = (int)v94;
      goto LABEL_147;
    }
LABEL_145:
    LODWORD(v94) = *((_DWORD *)v94 + 1);
    goto LABEL_146;
  }
LABEL_168:
  if (v17 > 0x14)
    goto LABEL_313;
LABEL_169:
  WebCore::previousWordsFromPosition((WebCore *)&v189, &v195, v16);
  WTF::percentEncodeFragmentDirectiveSpecialCharacters((WTF *)&v189, v101);
  v104 = v189;
  v189 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
      WTF::StringImpl::destroy(v104, v102);
    else
      *(_DWORD *)v104 -= 2;
  }
  WebCore::nextWordsFromPosition((WebCore *)&v189, v199, v103);
  WTF::percentEncodeFragmentDirectiveSpecialCharacters((WTF *)&v189, v105);
  v107 = v189;
  v189 = 0;
  if (!v107)
  {
LABEL_175:
    if (!v4)
      goto LABEL_177;
    goto LABEL_176;
  }
  if (*(_DWORD *)v107 != 2)
  {
    *(_DWORD *)v107 -= 2;
    goto LABEL_175;
  }
  WTF::StringImpl::destroy(v107, v106);
  if (v4)
LABEL_176:
    *(_DWORD *)v4 += 2;
LABEL_177:
  WTF::percentEncodeFragmentDirectiveSpecialCharacters((WTF *)&v194, v106);
  WTF::percentEncodeFragmentDirectiveSpecialCharacters((WTF *)&v201, v108);
  WTF::percentEncodeFragmentDirectiveSpecialCharacters((WTF *)&v193, v109);
  v110 = (uint64_t)v187;
  if (v4)
    v111 = *((_DWORD *)v4 + 1);
  else
    v111 = 0;
  v112 = (uint64_t)v186;
  if (v188)
  {
    v113 = *((_DWORD *)v188 + 1);
    if (v187)
      goto LABEL_181;
  }
  else
  {
    v113 = 0;
    if (v187)
    {
LABEL_181:
      v114 = *((_DWORD *)v187 + 1);
      if (v186)
        goto LABEL_182;
LABEL_259:
      v115 = 0;
      goto LABEL_183;
    }
  }
  v114 = 0;
  if (!v186)
    goto LABEL_259;
LABEL_182:
  v115 = *((_DWORD *)v186 + 1);
  if (v115 < 0)
    goto LABEL_268;
LABEL_183:
  v30 = __OFADD__(v115, 2);
  v116 = v115 + 2;
  v117 = v30;
  if (v114 < 0)
    goto LABEL_268;
  if ((v117 & 1) != 0)
    goto LABEL_268;
  v30 = __OFADD__(v114, v116);
  v118 = v114 + v116;
  if (v30)
    goto LABEL_268;
  v30 = __OFADD__(v118, 2);
  v119 = v118 + 2;
  v120 = v30;
  if (v113 < 0 || v120)
    goto LABEL_268;
  v30 = __OFADD__(v113, v119);
  v121 = v113 + v119;
  v122 = v30;
  if (v111 < 0)
    goto LABEL_268;
  if (v122)
    goto LABEL_268;
  v123 = v111 + v121;
  if (__OFADD__(v111, v121))
    goto LABEL_268;
  if (v4 && (*((_BYTE *)v4 + 16) & 4) == 0 || v188 && (*((_BYTE *)v188 + 16) & 4) == 0)
  {
    if (v123)
    {
      v124 = v123;
LABEL_206:
      if (v123 <= 0x7FFFFFEF)
      {
        WTF::tryFastCompactMalloc((WTF *)(2 * v124 + 20));
        v125 = v189;
        if (v189)
        {
          v126 = (_WORD *)((char *)v189 + 20);
          *(_DWORD *)v189 = 2;
          *((_DWORD *)v125 + 1) = v123;
          *((_QWORD *)v125 + 1) = (char *)v125 + 20;
          *((_DWORD *)v125 + 4) = 0;
          if (v4)
          {
            v127 = (int8x16_t *)*((_QWORD *)v4 + 1);
            v128 = *((unsigned int *)v4 + 1);
            if ((*((_BYTE *)v4 + 16) & 4) != 0)
            {
              v129 = (char *)&v126[v128];
              if (v128 >= 0x40)
              {
                v130 = (char *)&v126[v128 & 0xFFFFFFC0];
                v142 = 0uLL;
                v143 = (char *)v125 + 20;
                do
                {
                  v208.val[0] = *v127;
                  v144 = v127[1];
                  v213.val[0] = v127[2];
                  v145 = v127[3];
                  v127 += 4;
                  v146 = v145;
                  v213.val[1] = 0uLL;
                  v218.val[0] = v144;
                  v208.val[1] = 0uLL;
                  v147 = v143;
                  vst2q_s8(v147, v208);
                  v147 += 32;
                  v218.val[1] = 0uLL;
                  vst2q_s8(v147, v218);
                  v148 = v143 + 64;
                  vst2q_s8(v148, v213);
                  v149 = v143 + 96;
                  vst2q_s8(v149, *(int8x16x2_t *)(&v142 - 1));
                  v143 += 128;
                }
                while (v143 != v130);
              }
              else
              {
                v130 = (char *)v125 + 20;
              }
              while (v130 != v129)
              {
                v150 = v127->u8[0];
                v127 = (int8x16_t *)((char *)v127 + 1);
                *(_WORD *)v130 = v150;
                v130 += 2;
              }
            }
            else if ((_DWORD)v128 == 1)
            {
              *v126 = v127->i16[0];
            }
            else if ((_DWORD)v128)
            {
              memcpy((char *)v125 + 20, v127, 2 * v128);
            }
            v141 = *((unsigned int *)v4 + 1);
          }
          else
          {
            v141 = 0;
          }
          v151 = (char *)&v126[v141];
          if (v188)
          {
            v152 = (int8x16_t *)*((_QWORD *)v188 + 1);
            v153 = *((unsigned int *)v188 + 1);
            if ((*((_BYTE *)v188 + 16) & 4) != 0)
            {
              v154 = &v151[2 * v153];
              if (v153 >= 0x40)
              {
                v155 = &v151[2 * (v153 & 0xFFFFFFC0)];
                v157 = 0uLL;
                v158 = v151;
                do
                {
                  v209.val[0] = *v152;
                  v159 = v152[1];
                  v214.val[0] = v152[2];
                  v160 = v152[3];
                  v152 += 4;
                  v161 = v160;
                  v214.val[1] = 0uLL;
                  v219.val[0] = v159;
                  v209.val[1] = 0uLL;
                  v162 = v158;
                  vst2q_s8(v162, v209);
                  v162 += 32;
                  v219.val[1] = 0uLL;
                  vst2q_s8(v162, v219);
                  v163 = v158 + 64;
                  vst2q_s8(v163, v214);
                  v164 = v158 + 96;
                  vst2q_s8(v164, *(int8x16x2_t *)(&v157 - 1));
                  v158 += 128;
                }
                while (v158 != v155);
              }
              else
              {
                v155 = v151;
              }
              while (v155 != v154)
              {
                v165 = v152->u8[0];
                v152 = (int8x16_t *)((char *)v152 + 1);
                *(_WORD *)v155 = v165;
                v155 += 2;
              }
            }
            else if ((_DWORD)v153 == 1)
            {
              *(_WORD *)v151 = v152->i16[0];
            }
            else if ((_DWORD)v153)
            {
              memcpy(v151, v152, 2 * v153);
            }
            v156 = *((unsigned int *)v188 + 1);
          }
          else
          {
            v156 = 0;
          }
          v166 = &v151[2 * v156];
          *(_DWORD *)v166 = 2883629;
          WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v166 + 4, (uint64_t)v187, (int8x16_t *)",-", 2, (uint64_t)v186);
          goto LABEL_293;
        }
      }
LABEL_268:
      __break(0xC471u);
      JUMPOUT(0x1959E9AE0);
    }
LABEL_239:
    v125 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_293;
  }
  if (v187)
  {
    v131 = *((_DWORD *)v187 + 4);
    if (!v186 || (v131 & 4) == 0)
    {
      v124 = v123;
      v132 = v123 == 0;
      if ((v131 & 4) != 0)
        goto LABEL_218;
LABEL_238:
      if (!v132)
        goto LABEL_206;
      goto LABEL_239;
    }
  }
  else if (!v186)
  {
    if (!v123)
      goto LABEL_239;
    v110 = 0;
    v112 = 0;
    v124 = v123;
    if ((v123 & 0x80000000) != 0)
      goto LABEL_268;
    goto LABEL_220;
  }
  v124 = v123;
  v132 = v123 == 0;
  if ((*((_BYTE *)v186 + 16) & 4) == 0)
    goto LABEL_238;
LABEL_218:
  if (v132)
    goto LABEL_239;
  if ((v123 & 0x80000000) != 0)
    goto LABEL_268;
LABEL_220:
  WTF::tryFastCompactMalloc((WTF *)(v124 + 20));
  v125 = v189;
  if (!v189)
    goto LABEL_268;
  v133 = (char *)v189 + 20;
  *(_DWORD *)v189 = 2;
  *((_DWORD *)v125 + 1) = v123;
  *((_QWORD *)v125 + 1) = (char *)v125 + 20;
  *((_DWORD *)v125 + 4) = 4;
  if (v4)
  {
    v134 = (_BYTE *)*((_QWORD *)v4 + 1);
    v135 = *((unsigned int *)v4 + 1);
    if ((*((_BYTE *)v4 + 16) & 4) != 0)
    {
      if ((_DWORD)v135)
      {
        if ((_DWORD)v135 == 1)
          *v133 = *v134;
        else
          memcpy((char *)v125 + 20, v134, v135);
      }
    }
    else
    {
      if (v135 < 0x10)
      {
        v177 = (unsigned __int128 *)((char *)v125 + 20);
      }
      else
      {
        v177 = (unsigned __int128 *)&v133[v135 & 0xFFFFFFF0];
        v178 = (unsigned __int128 *)((char *)v125 + 20);
        do
        {
          v179 = (unsigned __int128)vld2q_s8(v134);
          v134 += 32;
          *v178++ = v179;
        }
        while (v178 != v177);
      }
      while (v177 != (unsigned __int128 *)&v133[v135])
      {
        v184 = *v134;
        v134 += 2;
        *(_BYTE *)v177 = v184;
        v177 = (unsigned __int128 *)((char *)v177 + 1);
      }
    }
    v136 = *((unsigned int *)v4 + 1);
  }
  else
  {
    v136 = 0;
  }
  v137 = &v133[v136];
  if (v188)
  {
    v138 = (_BYTE *)*((_QWORD *)v188 + 1);
    v139 = *((unsigned int *)v188 + 1);
    if ((*((_BYTE *)v188 + 16) & 4) != 0)
    {
      if ((_DWORD)v139)
      {
        if ((_DWORD)v139 == 1)
          *v137 = *v138;
        else
          memcpy(v137, v138, v139);
      }
    }
    else
    {
      if (v139 < 0x10)
      {
        v180 = (unsigned __int128 *)v137;
      }
      else
      {
        v180 = (unsigned __int128 *)&v137[v139 & 0xFFFFFFF0];
        v181 = (unsigned __int128 *)v137;
        do
        {
          v182 = (unsigned __int128)vld2q_s8(v138);
          v138 += 32;
          *v181++ = v182;
        }
        while (v181 != v180);
      }
      while (v180 != (unsigned __int128 *)&v137[v139])
      {
        v185 = *v138;
        v138 += 2;
        *(_BYTE *)v180 = v185;
        v180 = (unsigned __int128 *)((char *)v180 + 1);
      }
    }
    v140 = *((unsigned int *)v188 + 1);
  }
  else
  {
    v140 = 0;
  }
  WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v137[v140], "-,", 2u, v110, ",-", 2u, v112);
LABEL_293:
  WTF::URL::setFragmentIdentifier();
  if (*(_DWORD *)v125 == 2)
    WTF::StringImpl::destroy(v125, (WTF::StringImpl *)v15);
  else
    *(_DWORD *)v125 -= 2;
  if (v186)
  {
    if (*(_DWORD *)v186 == 2)
      WTF::StringImpl::destroy(v186, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v186 -= 2;
  }
  if (v187)
  {
    if (*(_DWORD *)v187 == 2)
      WTF::StringImpl::destroy(v187, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v187 -= 2;
  }
  if (!v188)
  {
LABEL_304:
    if (v4)
      goto LABEL_305;
    goto LABEL_307;
  }
  if (*(_DWORD *)v188 != 2)
  {
    *(_DWORD *)v188 -= 2;
    goto LABEL_304;
  }
  WTF::StringImpl::destroy(v188, (WTF::StringImpl *)v15);
  if (v4)
  {
LABEL_305:
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v4 -= 2;
  }
LABEL_307:
  v167 = v193;
  v193 = 0;
  if (v167)
  {
    if (*(_DWORD *)v167 == 2)
      WTF::StringImpl::destroy(v167, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v167 -= 2;
  }
  v168 = v194;
  v194 = 0;
  if (v168)
  {
    if (*(_DWORD *)v168 == 2)
      WTF::StringImpl::destroy(v168, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v168 -= 2;
  }
LABEL_313:
  v169 = v202;
  if (v202)
    *(_DWORD *)v202 += 2;
  v170 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = v169;
  if (v170)
  {
    if (*(_DWORD *)v170 == 2)
      WTF::StringImpl::destroy(v170, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v170 -= 2;
  }
  v171 = v204;
  *(_OWORD *)((char *)this + 8) = v203;
  *(_OWORD *)((char *)this + 24) = v171;
  if (v195)
  {
    if (*((_DWORD *)v195 + 6) == 2)
    {
      if ((*((_WORD *)v195 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v195, v15);
    }
    else
    {
      *((_DWORD *)v195 + 6) -= 2;
    }
  }
  if (v199[0])
  {
    if (*((_DWORD *)v199[0] + 6) == 2)
    {
      if ((*((_WORD *)v199[0] + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v199[0], v15);
    }
    else
    {
      *((_DWORD *)v199[0] + 6) -= 2;
    }
  }
  v172 = v201;
  v201 = 0;
  if (v172)
  {
    if (*(_DWORD *)v172 == 2)
      WTF::StringImpl::destroy(v172, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v172 -= 2;
  }
  result = v202;
  v202 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v15);
      if (!v4)
        return result;
      goto LABEL_331;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v4)
    return result;
LABEL_331:
  if (*(_DWORD *)v4 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, (WTF::StringImpl *)v15);
  *(_DWORD *)v4 -= 2;
  return result;
}

unsigned int *WebCore::nextWordsFromPosition(WebCore *this, _BYTE *a2, VisiblePosition *a3)
{
  WebCore::Node *v4;
  int v5;
  WTF::StringImpl *v7;
  WebCore::Node *v8;
  unsigned int v9;
  WebCore::Node *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  int v17;
  WebCore::Document *v18;
  WebCore::Range *v19;
  void *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  int v25;
  uint64_t v26;
  int v27;
  char v28;
  unsigned int v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WebCore::Node *v36;
  int v37;
  unsigned int v38;
  WebCore::Node *v39;
  int v40;
  int v41;
  char v42;
  unsigned int v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unsigned int *result;
  unsigned int *v52;
  char v54[8];
  WTF::StringImpl *v55;
  char v56;
  char v57[8];
  WTF::StringImpl *v58;
  char v59;
  WebCore::Node *v60;
  unsigned int v61;
  char v62;
  char v63;
  WebCore::Node *v64;
  unsigned int v65;
  char v66;
  char v67;
  WTF::StringImpl *v68[3];

  v4 = *(WebCore::Node **)a2;
  if (*(_QWORD *)a2)
    *((_DWORD *)v4 + 6) += 2;
  v64 = v4;
  v65 = *((_DWORD *)a2 + 2);
  v66 = a2[12];
  v52 = (unsigned int *)(a2 + 8);
  v67 = a2[16];
  v5 = -4;
  do
  {
    if (__CFADD__(v5++, 1))
      break;
    WebCore::nextBoundary((uint64_t)v68, (uint64_t)&v64, (WebCore::Node *)WebCore::nextWordPositionBoundary);
    WebCore::VisiblePosition::honorEditingBoundaryAtOrAfter((WebCore::Node *)&v64, (const WebCore::VisiblePosition *)v68, 0, (uint64_t)&v60);
    v7 = v68[0];
    v68[0] = 0;
    if (v7)
    {
      if (*((_DWORD *)v7 + 6) == 2)
      {
        if ((*((_WORD *)v7 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v7, a2);
      }
      else
      {
        *((_DWORD *)v7 + 6) -= 2;
      }
    }
    v8 = v60;
    if (v60 && (*((_DWORD *)v60 + 6) += 2, v9 = v62 & 7, v9 <= 4))
    {
      v10 = v8;
      if (((1 << v9) & 0x19) == 0)
        v10 = (WebCore::Node *)*((_QWORD *)v8 + 4);
    }
    else
    {
      v10 = 0;
    }
    v11 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v12 = *(_DWORD *)(v11 + 24);
      *(_DWORD *)(v11 + 24) = v12 + 2;
      v13 = a2[12] & 7;
      if (v13 > 4)
      {
        v14 = 0;
      }
      else
      {
        v14 = (WebCore::Node *)v11;
        if (((1 << v13) & 0x19) == 0)
          v14 = *(WebCore::Node **)(v11 + 32);
      }
      if (v12)
      {
        *(_DWORD *)(v11 + 24) = v12;
      }
      else if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
      }
    }
    else
    {
      v14 = 0;
    }
    if (!v8)
    {
      if (v10 != v14)
        break;
LABEL_23:
      v15 = v64;
      v64 = v8;
      if (v15)
      {
        if (*((_DWORD *)v15 + 6) == 2)
        {
          if ((*((_WORD *)v15 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v15, a2);
        }
        else
        {
          *((_DWORD *)v15 + 6) -= 2;
        }
      }
      v65 = v61;
      v66 = v62;
      v67 = v63;
      if (!v8)
        continue;
      goto LABEL_27;
    }
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, a2);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
    if (v10 == v14)
    {
      *((_DWORD *)v8 + 6) += 2;
      goto LABEL_23;
    }
LABEL_27:
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, a2);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  while (v10 == v14);
  v16 = v64;
  if (!v64)
    goto LABEL_60;
  v17 = *((_DWORD *)v64 + 6);
  *((_DWORD *)v64 + 6) = v17 + 2;
  v18 = *(WebCore::Document **)(*((_QWORD *)v16 + 5) + 8);
  if (v17)
  {
    *((_DWORD *)v16 + 6) = v17;
  }
  else if ((*((_WORD *)v16 + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(v16, a2);
  }
  if (!v18)
  {
LABEL_60:
    *(_QWORD *)this = 0;
    goto LABEL_119;
  }
  v19 = (WebCore::Range *)bmalloc::api::isoAllocate();
  WebCore::Range::Range(v19, v18);
  v21 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
  {
    v26 = 0;
    v29 = 0;
    v68[0] = 0;
LABEL_146:
    v28 = 1;
    goto LABEL_73;
  }
  v22 = *(_DWORD *)(v21 + 24) + 2;
  *(_DWORD *)(v21 + 24) = v22;
  v23 = a2[12] & 7;
  if (v23 > 4)
  {
    v24 = 0;
  }
  else
  {
    if (((1 << v23) & 0x19) != 0)
    {
      v24 = (WTF::StringImpl *)v21;
      goto LABEL_54;
    }
    v24 = *(WTF::StringImpl **)(v21 + 32);
    if (v24)
    {
      v22 = *((_DWORD *)v24 + 6);
LABEL_54:
      *((_DWORD *)v24 + 6) = v22 + 2;
      v22 = *(_DWORD *)(v21 + 24);
    }
  }
  v25 = v22 - 2;
  if (v25)
  {
    *(_DWORD *)(v21 + 24) = v25;
  }
  else if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v21, v20);
  }
  v26 = *(_QWORD *)a2;
  v68[0] = v24;
  if (!v26)
  {
    v29 = 0;
    goto LABEL_146;
  }
  *(_DWORD *)(v26 + 24) += 2;
  v27 = a2[12] & 7;
  if ((a2[12] & 7) != 0)
  {
    switch(v27)
    {
      case 4:
        v30 = *(_WORD *)(v26 + 28);
        if ((v30 & 1) != 0)
        {
          v32 = *(_QWORD *)(v26 + 80);
          if (v32)
          {
            v28 = 0;
            v29 = *(_DWORD *)(v32 + 4);
            goto LABEL_73;
          }
          goto LABEL_65;
        }
        if ((v30 & 4) == 0 || (v31 = *(_QWORD *)(v26 + 80)) == 0)
        {
LABEL_65:
          v28 = 0;
          v29 = 0;
          goto LABEL_73;
        }
        v29 = 0;
        do
        {
          ++v29;
          v31 = *(_QWORD *)(v31 + 56);
        }
        while (v31);
        break;
      case 1:
        v29 = WebCore::Node::computeNodeIndex((WebCore::Node *)v26);
        break;
      case 2:
        v28 = 0;
        v29 = WebCore::Node::computeNodeIndex((WebCore::Node *)v26) + 1;
        goto LABEL_73;
      default:
        goto LABEL_65;
    }
    v28 = 0;
    goto LABEL_73;
  }
  v28 = 0;
  v29 = *v52;
LABEL_73:
  WebCore::Range::setStart((uint64_t)v19, (uint64_t *)v68, v29, (uint64_t)v57);
  if (!v59 || (v34 = v58, v58 = 0, !v34))
  {
LABEL_77:
    if ((v28 & 1) != 0)
      goto LABEL_80;
    goto LABEL_78;
  }
  if (*(_DWORD *)v34 != 2)
  {
    *(_DWORD *)v34 -= 2;
    goto LABEL_77;
  }
  WTF::StringImpl::destroy(v34, v33);
  if ((v28 & 1) == 0)
  {
LABEL_78:
    if (*(_DWORD *)(v26 + 24) == 2)
    {
      if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v26, v33);
    }
    else
    {
      *(_DWORD *)(v26 + 24) -= 2;
    }
  }
LABEL_80:
  v35 = v68[0];
  v68[0] = 0;
  if (v35)
  {
    if (*((_DWORD *)v35 + 6) == 2)
    {
      if ((*((_WORD *)v35 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v35, v33);
    }
    else
    {
      *((_DWORD *)v35 + 6) -= 2;
    }
  }
  v36 = v64;
  if (v64)
  {
    v37 = *((_DWORD *)v64 + 6) + 2;
    *((_DWORD *)v64 + 6) = v37;
    v38 = v66 & 7;
    if (v38 > 4)
    {
      v39 = 0;
    }
    else
    {
      if (((1 << v38) & 0x19) != 0)
      {
        v39 = v36;
        goto LABEL_87;
      }
      v39 = (WebCore::Node *)*((_QWORD *)v36 + 4);
      if (v39)
      {
        v37 = *((_DWORD *)v39 + 6);
LABEL_87:
        *((_DWORD *)v39 + 6) = v37 + 2;
        v37 = *((_DWORD *)v36 + 6);
      }
    }
    v40 = v37 - 2;
    if (v40)
    {
      *((_DWORD *)v36 + 6) = v40;
      goto LABEL_90;
    }
    if ((*((_WORD *)v36 + 15) & 0x400) != 0)
    {
LABEL_90:
      v68[0] = v39;
    }
    else
    {
      WebCore::Node::removedLastRef(v36, v33);
      v36 = v64;
      v68[0] = v39;
      if (!v64)
      {
        v43 = 0;
        goto LABEL_148;
      }
    }
    *((_DWORD *)v36 + 6) += 2;
    v41 = v66 & 7;
    if ((v66 & 7) == 0)
    {
      v42 = 0;
      v43 = v65;
      goto LABEL_103;
    }
    switch(v41)
    {
      case 4:
        v44 = *((_WORD *)v36 + 14);
        if ((v44 & 1) != 0)
        {
          v46 = *((_QWORD *)v36 + 10);
          if (v46)
          {
            v42 = 0;
            v43 = *(_DWORD *)(v46 + 4);
            goto LABEL_103;
          }
          goto LABEL_97;
        }
        if ((v44 & 4) == 0 || (v45 = *((_QWORD *)v36 + 10)) == 0)
        {
LABEL_97:
          v42 = 0;
          v43 = 0;
          goto LABEL_103;
        }
        v43 = 0;
        do
        {
          ++v43;
          v45 = *(_QWORD *)(v45 + 56);
        }
        while (v45);
        break;
      case 1:
        v43 = WebCore::Node::computeNodeIndex(v36);
        break;
      case 2:
        v42 = 0;
        v43 = WebCore::Node::computeNodeIndex(v36) + 1;
        goto LABEL_103;
      default:
        goto LABEL_97;
    }
    v42 = 0;
    goto LABEL_103;
  }
  v43 = 0;
  v68[0] = 0;
LABEL_148:
  v42 = 1;
LABEL_103:
  WebCore::Range::setEnd((uint64_t)v19, (uint64_t *)v68, v43, (uint64_t)v54);
  if (!v56 || (v48 = v55, v55 = 0, !v48))
  {
LABEL_107:
    if ((v42 & 1) != 0)
      goto LABEL_110;
    goto LABEL_108;
  }
  if (*(_DWORD *)v48 != 2)
  {
    *(_DWORD *)v48 -= 2;
    goto LABEL_107;
  }
  WTF::StringImpl::destroy(v48, v47);
  if ((v42 & 1) == 0)
  {
LABEL_108:
    if (*((_DWORD *)v36 + 6) == 2)
    {
      if ((*((_WORD *)v36 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v36, v47);
    }
    else
    {
      *((_DWORD *)v36 + 6) -= 2;
    }
  }
LABEL_110:
  v49 = v68[0];
  v68[0] = 0;
  if (v49)
  {
    if (*((_DWORD *)v49 + 6) == 2)
    {
      if ((*((_WORD *)v49 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v49, v47);
    }
    else
    {
      *((_DWORD *)v49 + 6) -= 2;
    }
  }
  WebCore::Range::toString(v19, v68);
  WTF::String::trim();
  v50 = v68[0];
  v68[0] = 0;
  if (!v50)
  {
LABEL_116:
    if (!v19)
      goto LABEL_119;
    goto LABEL_117;
  }
  if (*(_DWORD *)v50 != 2)
  {
    *(_DWORD *)v50 -= 2;
    goto LABEL_116;
  }
  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)a2);
  if (v19)
  {
LABEL_117:
    if (*((_DWORD *)v19 + 2) == 1)
      (*(void (**)(WebCore::Range *))(*(_QWORD *)v19 + 8))(v19);
    else
      --*((_DWORD *)v19 + 2);
  }
LABEL_119:
  result = (unsigned int *)v64;
  v64 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::previousWordsFromPosition(WebCore *this, _BYTE *a2, VisiblePosition *a3)
{
  WebCore::Node *v4;
  int v5;
  WTF::StringImpl *v7;
  WebCore::Node *v8;
  unsigned int v9;
  WebCore::Node *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  uint64_t v16;
  int v17;
  WebCore::Document *v18;
  WebCore::Range *v19;
  void *v20;
  WebCore::Node *v21;
  int v22;
  unsigned int v23;
  WebCore::Node *v24;
  int v25;
  int v26;
  char v27;
  unsigned int v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  WTF::StringImpl *v38;
  int v39;
  uint64_t v40;
  int v41;
  char v42;
  unsigned int v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unsigned int *result;
  unsigned int *v52;
  char v54[8];
  WTF::StringImpl *v55;
  char v56;
  char v57[8];
  WTF::StringImpl *v58;
  char v59;
  WebCore::Node *v60;
  unsigned int v61;
  char v62;
  char v63;
  WebCore::Node *v64;
  unsigned int v65;
  char v66;
  char v67;
  WTF::StringImpl *v68[3];

  v4 = *(WebCore::Node **)a2;
  if (*(_QWORD *)a2)
    *((_DWORD *)v4 + 6) += 2;
  v64 = v4;
  v65 = *((_DWORD *)a2 + 2);
  v66 = a2[12];
  v52 = (unsigned int *)(a2 + 8);
  v67 = a2[16];
  v5 = -4;
  do
  {
    if (__CFADD__(v5++, 1))
      break;
    WebCore::previousBoundary((uint64_t)v68, (uint64_t)&v64, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))WebCore::previousWordPositionBoundary, 0);
    WebCore::VisiblePosition::honorEditingBoundaryAtOrBefore((WebCore::Node *)&v64, (const WebCore::VisiblePosition *)v68, 0, (uint64_t)&v60);
    v7 = v68[0];
    v68[0] = 0;
    if (v7)
    {
      if (*((_DWORD *)v7 + 6) == 2)
      {
        if ((*((_WORD *)v7 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v7, a2);
      }
      else
      {
        *((_DWORD *)v7 + 6) -= 2;
      }
    }
    v8 = v60;
    if (v60 && (*((_DWORD *)v60 + 6) += 2, v9 = v62 & 7, v9 <= 4))
    {
      v10 = v8;
      if (((1 << v9) & 0x19) == 0)
        v10 = (WebCore::Node *)*((_QWORD *)v8 + 4);
    }
    else
    {
      v10 = 0;
    }
    v11 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v12 = *(_DWORD *)(v11 + 24);
      *(_DWORD *)(v11 + 24) = v12 + 2;
      v13 = a2[12] & 7;
      if (v13 > 4)
      {
        v14 = 0;
      }
      else
      {
        v14 = (WebCore::Node *)v11;
        if (((1 << v13) & 0x19) == 0)
          v14 = *(WebCore::Node **)(v11 + 32);
      }
      if (v12)
      {
        *(_DWORD *)(v11 + 24) = v12;
      }
      else if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
      }
    }
    else
    {
      v14 = 0;
    }
    if (!v8)
    {
      if (v10 != v14)
        break;
LABEL_23:
      v15 = v64;
      v64 = v8;
      if (v15)
      {
        if (*((_DWORD *)v15 + 6) == 2)
        {
          if ((*((_WORD *)v15 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v15, a2);
        }
        else
        {
          *((_DWORD *)v15 + 6) -= 2;
        }
      }
      v65 = v61;
      v66 = v62;
      v67 = v63;
      if (!v8)
        continue;
      goto LABEL_27;
    }
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, a2);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
    if (v10 == v14)
    {
      *((_DWORD *)v8 + 6) += 2;
      goto LABEL_23;
    }
LABEL_27:
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, a2);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  while (v10 == v14);
  v16 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_60;
  v17 = *(_DWORD *)(v16 + 24);
  *(_DWORD *)(v16 + 24) = v17 + 2;
  v18 = *(WebCore::Document **)(*(_QWORD *)(v16 + 40) + 8);
  if (v17)
  {
    *(_DWORD *)(v16 + 24) = v17;
  }
  else if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v16, a2);
  }
  if (!v18)
  {
LABEL_60:
    *(_QWORD *)this = 0;
    goto LABEL_119;
  }
  v19 = (WebCore::Range *)bmalloc::api::isoAllocate();
  WebCore::Range::Range(v19, v18);
  v21 = v64;
  if (v64)
  {
    v22 = *((_DWORD *)v64 + 6) + 2;
    *((_DWORD *)v64 + 6) = v22;
    v23 = v66 & 7;
    if (v23 > 4)
    {
      v24 = 0;
    }
    else
    {
      if (((1 << v23) & 0x19) != 0)
      {
        v24 = v21;
        goto LABEL_54;
      }
      v24 = (WebCore::Node *)*((_QWORD *)v21 + 4);
      if (v24)
      {
        v22 = *((_DWORD *)v24 + 6);
LABEL_54:
        *((_DWORD *)v24 + 6) = v22 + 2;
        v22 = *((_DWORD *)v21 + 6);
      }
    }
    v25 = v22 - 2;
    if (v25)
    {
      *((_DWORD *)v21 + 6) = v25;
      goto LABEL_57;
    }
    if ((*((_WORD *)v21 + 15) & 0x400) != 0)
    {
LABEL_57:
      v68[0] = v24;
    }
    else
    {
      WebCore::Node::removedLastRef(v21, v20);
      v21 = v64;
      v68[0] = v24;
      if (!v64)
      {
        v28 = 0;
        goto LABEL_146;
      }
    }
    *((_DWORD *)v21 + 6) += 2;
    v26 = v66 & 7;
    if ((v66 & 7) == 0)
    {
      v27 = 0;
      v28 = v65;
      goto LABEL_73;
    }
    switch(v26)
    {
      case 4:
        v29 = *((_WORD *)v21 + 14);
        if ((v29 & 1) != 0)
        {
          v31 = *((_QWORD *)v21 + 10);
          if (v31)
          {
            v27 = 0;
            v28 = *(_DWORD *)(v31 + 4);
            goto LABEL_73;
          }
          goto LABEL_65;
        }
        if ((v29 & 4) == 0 || (v30 = *((_QWORD *)v21 + 10)) == 0)
        {
LABEL_65:
          v27 = 0;
          v28 = 0;
          goto LABEL_73;
        }
        v28 = 0;
        do
        {
          ++v28;
          v30 = *(_QWORD *)(v30 + 56);
        }
        while (v30);
        break;
      case 1:
        v28 = WebCore::Node::computeNodeIndex(v21);
        break;
      case 2:
        v27 = 0;
        v28 = WebCore::Node::computeNodeIndex(v21) + 1;
        goto LABEL_73;
      default:
        goto LABEL_65;
    }
    v27 = 0;
    goto LABEL_73;
  }
  v28 = 0;
  v68[0] = 0;
LABEL_146:
  v27 = 1;
LABEL_73:
  WebCore::Range::setStart((uint64_t)v19, (uint64_t *)v68, v28, (uint64_t)v57);
  if (!v59 || (v33 = v58, v58 = 0, !v33))
  {
LABEL_77:
    if ((v27 & 1) != 0)
      goto LABEL_80;
    goto LABEL_78;
  }
  if (*(_DWORD *)v33 != 2)
  {
    *(_DWORD *)v33 -= 2;
    goto LABEL_77;
  }
  WTF::StringImpl::destroy(v33, v32);
  if ((v27 & 1) == 0)
  {
LABEL_78:
    if (*((_DWORD *)v21 + 6) == 2)
    {
      if ((*((_WORD *)v21 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v21, v32);
    }
    else
    {
      *((_DWORD *)v21 + 6) -= 2;
    }
  }
LABEL_80:
  v34 = v68[0];
  v68[0] = 0;
  if (v34)
  {
    if (*((_DWORD *)v34 + 6) == 2)
    {
      if ((*((_WORD *)v34 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v34, v32);
    }
    else
    {
      *((_DWORD *)v34 + 6) -= 2;
    }
  }
  v35 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
  {
    v40 = 0;
    v43 = 0;
    v68[0] = 0;
LABEL_148:
    v42 = 1;
    goto LABEL_103;
  }
  v36 = *(_DWORD *)(v35 + 24) + 2;
  *(_DWORD *)(v35 + 24) = v36;
  v37 = a2[12] & 7;
  if (v37 > 4)
  {
    v38 = 0;
  }
  else
  {
    if (((1 << v37) & 0x19) != 0)
    {
      v38 = (WTF::StringImpl *)v35;
      goto LABEL_87;
    }
    v38 = *(WTF::StringImpl **)(v35 + 32);
    if (v38)
    {
      v36 = *((_DWORD *)v38 + 6);
LABEL_87:
      *((_DWORD *)v38 + 6) = v36 + 2;
      v36 = *(_DWORD *)(v35 + 24);
    }
  }
  v39 = v36 - 2;
  if (v39)
  {
    *(_DWORD *)(v35 + 24) = v39;
  }
  else if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v35, v32);
  }
  v40 = *(_QWORD *)a2;
  v68[0] = v38;
  if (!v40)
  {
    v43 = 0;
    goto LABEL_148;
  }
  *(_DWORD *)(v40 + 24) += 2;
  v41 = a2[12] & 7;
  if ((a2[12] & 7) != 0)
  {
    switch(v41)
    {
      case 4:
        v44 = *(_WORD *)(v40 + 28);
        if ((v44 & 1) != 0)
        {
          v46 = *(_QWORD *)(v40 + 80);
          if (v46)
          {
            v42 = 0;
            v43 = *(_DWORD *)(v46 + 4);
            goto LABEL_103;
          }
          goto LABEL_97;
        }
        if ((v44 & 4) == 0 || (v45 = *(_QWORD *)(v40 + 80)) == 0)
        {
LABEL_97:
          v42 = 0;
          v43 = 0;
          goto LABEL_103;
        }
        v43 = 0;
        do
        {
          ++v43;
          v45 = *(_QWORD *)(v45 + 56);
        }
        while (v45);
        break;
      case 1:
        v43 = WebCore::Node::computeNodeIndex((WebCore::Node *)v40);
        break;
      case 2:
        v42 = 0;
        v43 = WebCore::Node::computeNodeIndex((WebCore::Node *)v40) + 1;
        goto LABEL_103;
      default:
        goto LABEL_97;
    }
    v42 = 0;
    goto LABEL_103;
  }
  v42 = 0;
  v43 = *v52;
LABEL_103:
  WebCore::Range::setEnd((uint64_t)v19, (uint64_t *)v68, v43, (uint64_t)v54);
  if (!v56 || (v48 = v55, v55 = 0, !v48))
  {
LABEL_107:
    if ((v42 & 1) != 0)
      goto LABEL_110;
    goto LABEL_108;
  }
  if (*(_DWORD *)v48 != 2)
  {
    *(_DWORD *)v48 -= 2;
    goto LABEL_107;
  }
  WTF::StringImpl::destroy(v48, v47);
  if ((v42 & 1) == 0)
  {
LABEL_108:
    if (*(_DWORD *)(v40 + 24) == 2)
    {
      if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v40, v47);
    }
    else
    {
      *(_DWORD *)(v40 + 24) -= 2;
    }
  }
LABEL_110:
  v49 = v68[0];
  v68[0] = 0;
  if (v49)
  {
    if (*((_DWORD *)v49 + 6) == 2)
    {
      if ((*((_WORD *)v49 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v49, v47);
    }
    else
    {
      *((_DWORD *)v49 + 6) -= 2;
    }
  }
  WebCore::Range::toString(v19, v68);
  WTF::String::trim();
  v50 = v68[0];
  v68[0] = 0;
  if (!v50)
  {
LABEL_116:
    if (!v19)
      goto LABEL_119;
    goto LABEL_117;
  }
  if (*(_DWORD *)v50 != 2)
  {
    *(_DWORD *)v50 -= 2;
    goto LABEL_116;
  }
  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)a2);
  if (v19)
  {
LABEL_117:
    if (*((_DWORD *)v19 + 2) == 1)
      (*(void (**)(WebCore::Range *))(*(_QWORD *)v19 + 8))(v19);
    else
      --*((_DWORD *)v19 + 2);
  }
LABEL_119:
  result = (unsigned int *)v64;
  v64 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

uint64_t WebCore::FragmentDirectiveParser::FragmentDirectiveParser(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 1;
  *(_BYTE *)(a1 + 48) = 0;
  WebCore::FragmentDirectiveParser::parseFragmentDirective(a1, a2, a3);
  *(_QWORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 44) = BYTE4(a3);
  *(_DWORD *)(a1 + 40) = a3;
  *(_BYTE *)(a1 + 48) = 1;
  return a1;
}

{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 1;
  *(_BYTE *)(a1 + 48) = 0;
  WebCore::FragmentDirectiveParser::parseFragmentDirective(a1, a2, a3);
  *(_QWORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 44) = BYTE4(a3);
  *(_DWORD *)(a1 + 40) = a3;
  *(_BYTE *)(a1 + 48) = 1;
  return a1;
}

WTF *WebCore::FragmentDirectiveParser::parseFragmentDirective(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v6;
  WTF *result;
  void *v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  const char *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  unint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  unint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  unint64_t v58;
  WTF::StringImpl *v59;
  unint64_t v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  char *v63;
  _DWORD *v64;
  WTF::StringImpl *v65;
  _QWORD *v66;
  _DWORD *v67;
  _DWORD *v68;
  _DWORD *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl **v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  WTF::StringImpl **v81;
  WTF::StringImpl *v82;
  WTF::StringImpl **v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF::StringImpl **v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl **v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  _DWORD *v100;
  WTF::StringImpl *v101;
  _DWORD *v102;
  WTF::StringImpl *v103;
  _DWORD *v104;
  WTF::StringImpl *v105;
  _DWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  _DWORD *v110;
  _DWORD *v111;
  _DWORD *v112;
  _DWORD *v113;
  int v114;
  uint64_t v115;
  WTF::StringImpl *v116[2];
  WTF::StringImpl *v117[2];
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  unsigned int v120;
  unsigned int v121;
  BOOL v122;
  WTF::StringImpl *v123;
  uint64_t v124;
  const char **v125;
  unsigned int v126;
  unsigned int v127;
  BOOL v128;
  uint64_t v129;
  uint64_t v130;
  __int16 v131;
  char v132;
  WTF::StringImpl *v133;
  uint64_t v134;

  v133 = 0;
  v134 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = (unsigned int *)v116[0];
  v129 = a2;
  v130 = a3;
  v131 = 38;
  v132 = 0;
  v125 = (const char **)&v129;
  v126 = 0;
  v128 = (_DWORD)a3 == 0;
  result = (WTF *)WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v125);
  v9 = v130;
  v10 = v126;
  v115 = a1;
  v114 = v130;
  if (v126 != (_DWORD)v130 || (v11 = 0, !v128))
  {
    while (1)
    {
      v27 = *((unsigned int *)v125 + 2);
      if (v27 <= v10)
      {
        v15 = 0x100000000;
        v19 = "";
        goto LABEL_46;
      }
      LODWORD(v15) = v127;
      if (v27 - v10 <= v127)
      {
        if (!v10)
        {
          v19 = *v125;
          v15 = (uint64_t)v125[1];
          goto LABEL_46;
        }
        LODWORD(v15) = v27 - v10;
      }
      v28 = v10;
      v15 = v15;
      v29 = v27 - v10;
      if (*((_BYTE *)v125 + 12))
      {
        if (v29 < v15)
          goto LABEL_279;
        v19 = &(*v125)[v28];
        v15 = v15 | 0x100000000;
      }
      else
      {
        if (v29 < v15)
        {
LABEL_279:
          __break(1u);
          goto LABEL_284;
        }
        v19 = &(*v125)[2 * v28];
      }
LABEL_46:
      v123 = (WTF::StringImpl *)v19;
      v124 = v15;
      if (!WTF::StringView::startsWith())
        goto LABEL_212;
      if (v6)
      {
        v30 = v6[1];
        if (v124 <= v30)
        {
LABEL_20:
          v12 = 0x100000000;
          v14 = (WTF::StringImpl *)"";
          goto LABEL_51;
        }
        if ((_DWORD)v30)
        {
          v13 = v124 - v30;
          v12 = v13;
          if (BYTE4(v124))
          {
            if (v13 < v13)
              goto LABEL_279;
            v14 = (WTF::StringImpl *)((char *)v123 + v30);
            v12 = v13 | 0x100000000;
          }
          else
          {
            if (v13 < v13)
              goto LABEL_279;
            v14 = (WTF::StringImpl *)((char *)v123 + 2 * v30);
          }
          goto LABEL_51;
        }
      }
      else if (!(_DWORD)v124)
      {
        goto LABEL_20;
      }
      v14 = v123;
      v12 = v124;
LABEL_51:
      v116[0] = v14;
      v116[1] = (WTF::StringImpl *)v12;
      LOWORD(v117[0]) = 44;
      BYTE2(v117[0]) = 0;
      v119 = (WTF::StringImpl *)v116;
      v120 = 0;
      v122 = (_DWORD)v12 == 0;
      WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v119);
      v31 = (int)v116[1];
      v32 = v120;
      if (v120 == LODWORD(v116[1]) && v122)
      {
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
LABEL_100:
        v49 = v34 - v33;
        v48 = v34;
        goto LABEL_101;
      }
      v33 = 0;
      v34 = 0;
      v35 = 0;
      v36 = 0;
      do
      {
        v37 = *((unsigned int *)v119 + 2);
        if (v37 <= v32)
          goto LABEL_185;
        LODWORD(v38) = v121;
        if (v37 - v32 <= v121)
        {
          if (!v32)
          {
            v16 = *(WTF::StringImpl **)v119;
            v38 = *((_QWORD *)v119 + 1);
            goto LABEL_63;
          }
          LODWORD(v38) = v37 - v32;
        }
        v39 = v32;
        v38 = v38;
        v40 = v37 - v32;
        if (*((_BYTE *)v119 + 12))
        {
          if (v40 < v38)
            goto LABEL_279;
          v16 = (WTF::StringImpl *)(*(_QWORD *)v119 + v39);
          v38 = v38 | 0x100000000;
        }
        else
        {
          if (v40 < v38)
            goto LABEL_279;
          v16 = (WTF::StringImpl *)(*(_QWORD *)v119 + 2 * v39);
        }
LABEL_63:
        if (!(_DWORD)v38)
          goto LABEL_185;
        if ((v38 & 0xFF00000000) != 0)
        {
          WTF::String::String();
          if (v33)
            goto LABEL_66;
        }
        else
        {
          WTF::String::String();
          if (v33)
          {
LABEL_66:
            v42 = v36;
            if (v34 + 1 != v33)
              goto LABEL_82;
            goto LABEL_74;
          }
        }
        if (v34)
        {
          if (v34 != v36 - 1)
          {
            v33 = 0;
            goto LABEL_82;
          }
          v42 = v36;
        }
        else
        {
          v42 = 0;
          if (v36)
          {
            v33 = 0;
            goto LABEL_82;
          }
        }
LABEL_74:
        v43 = v42 + (v42 >> 2);
        if (v43 <= 0xF)
          v43 = 15;
        if (v43 >= 0x1FFFFFFF)
        {
          __break(0xC471u);
          JUMPOUT(0x1959EBC44);
        }
        v36 = v43 + 1;
        v44 = (char *)WTF::fastMalloc((WTF *)(8 * (v43 + 1)));
        v45 = v44;
        if (v33 <= v34)
        {
          memcpy(&v44[8 * v33], &v35[8 * v33], 8 * v34 - 8 * v33);
        }
        else
        {
          memcpy(v44, v35, 8 * v34);
          memcpy(&v45[8 * v36 + 8 * (v33 - v42)], &v35[8 * v33], 8 * v42 - 8 * v33);
          v33 = v36 + v33 - v42;
        }
        v36 = v36;
        if (v35)
        {
          if (v45 == v35)
          {
            v36 = 0;
            v45 = 0;
          }
          WTF::fastFree((WTF *)v35, v41);
        }
        v35 = v45;
LABEL_82:
        v46 = v118;
        v118 = 0;
        *(_QWORD *)&v35[8 * v34] = v46;
        if (v34 == v36 - 1)
          v34 = 0;
        else
          ++v34;
        v47 = v118;
        v118 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
            WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v41);
          else
            *(_DWORD *)v47 -= 2;
        }
        WTF::StringView::SplitResult::Iterator::operator++();
        v32 = v120;
      }
      while (v120 != v31 || !v122);
      if (v33 <= v34)
        goto LABEL_100;
      v48 = v34 + v36;
      v49 = v34 + v36 - v33;
LABEL_101:
      if (v49 > 4 || v48 == v33)
        goto LABEL_185;
      *(_OWORD *)v116 = 0u;
      *(_OWORD *)v117 = 0u;
      if (v33 == v34)
        goto LABEL_284;
      if (*(_QWORD *)&v35[8 * v33])
      {
        if (WTF::StringImpl::endsWith())
        {
          v50 = *(WTF::StringImpl **)&v35[8 * v33];
          if (v50)
          {
            if (*((_DWORD *)v50 + 1) >= 2u)
            {
              *(_QWORD *)&v35[8 * v33] = 0;
              if (v33 == v36 - 1)
                v33 = 0;
              else
                ++v33;
              WTF::URLParser::formURLDecode();
              if ((_BYTE)v120)
              {
                v51 = v119;
                v119 = 0;
                v23 = v117[0];
                v117[0] = v51;
                if (v23)
                {
                  v24 = *(_DWORD *)v23 - 2;
                  if (*(_DWORD *)v23 == 2)
                  {
                    WTF::StringImpl::destroy(v23, v16);
                    if ((_BYTE)v120)
                    {
                      v23 = v119;
                      v119 = 0;
                      if (v23)
                      {
                        v24 = *(_DWORD *)v23 - 2;
                        if (*(_DWORD *)v23 != 2)
                          goto LABEL_114;
                        WTF::StringImpl::destroy(v23, v16);
                      }
                    }
                  }
                  else
                  {
LABEL_114:
                    *(_DWORD *)v23 = v24;
                  }
                }
              }
              if (*(_DWORD *)v50 == 2)
                WTF::StringImpl::destroy(v50, v16);
              else
                *(_DWORD *)v50 -= 2;
            }
          }
        }
      }
      if (v33 == v34)
      {
        __break(0xC471u);
        JUMPOUT(0x1959EBC1CLL);
      }
      if (v34)
        v52 = v34;
      else
        v52 = v36;
      v53 = v52 - 1;
      if (*(_QWORD *)&v35[8 * v52 - 8])
      {
        if (WTF::StringImpl::startsWith())
        {
          v54 = *(WTF::StringImpl **)&v35[8 * v53];
          if (v54)
          {
            if (*((_DWORD *)v54 + 1) >= 2u)
            {
              WTF::StringImpl::substring(v54);
              v20 = v119;
              v56 = *(WTF::StringImpl **)&v35[8 * v53];
              *(_QWORD *)&v35[8 * v53] = v119;
              if (v56)
              {
                if (*(_DWORD *)v56 == 2)
                {
                  WTF::StringImpl::destroy(v56, v55);
                  v20 = *(WTF::StringImpl **)&v35[8 * v53];
                }
                else
                {
                  *(_DWORD *)v56 -= 2;
                }
              }
              *(_QWORD *)&v35[8 * v53] = 0;
              if (v20)
              {
                WTF::URLParser::formURLDecode();
                if (*(_DWORD *)v20 == 2)
                  WTF::StringImpl::destroy(v20, v16);
                else
                  *(_DWORD *)v20 -= 2;
              }
              else
              {
                WTF::URLParser::formURLDecode();
              }
              if ((_BYTE)v120)
              {
                v57 = v119;
                v119 = 0;
                v25 = v117[1];
                v117[1] = v57;
                if (v25)
                {
                  v26 = *(_DWORD *)v25 - 2;
                  if (*(_DWORD *)v25 == 2)
                  {
                    WTF::StringImpl::destroy(v25, v16);
                    if ((_BYTE)v120)
                    {
                      v25 = v119;
                      v119 = 0;
                      if (v25)
                      {
                        v26 = *(_DWORD *)v25 - 2;
                        if (*(_DWORD *)v25 != 2)
                          goto LABEL_134;
                        WTF::StringImpl::destroy(v25, v16);
                      }
                    }
                  }
                  else
                  {
LABEL_134:
                    *(_DWORD *)v25 = v26;
                  }
                }
              }
              v34 = v53;
            }
          }
        }
      }
      v58 = v34 - v33;
      if (v34 < v33)
        v58 = v36 - v33 + v34;
      if (v58 == 1 || v58 == 2)
      {
        if (v34 == v33)
        {
          __break(0xC471u);
          JUMPOUT(0x1959EBC3CLL);
        }
        WTF::URLParser::formURLDecode();
        if ((_BYTE)v120)
        {
          v59 = v119;
          v119 = 0;
          v17 = v116[0];
          v116[0] = v59;
          if (v17)
          {
            v18 = *(_DWORD *)v17 - 2;
            if (*(_DWORD *)v17 == 2)
            {
              WTF::StringImpl::destroy(v17, v16);
              if ((_BYTE)v120)
              {
                v17 = v119;
                v119 = 0;
                if (v17)
                {
                  v18 = *(_DWORD *)v17 - 2;
                  if (*(_DWORD *)v17 != 2)
                    goto LABEL_144;
                  WTF::StringImpl::destroy(v17, v16);
                }
              }
            }
            else
            {
LABEL_144:
              *(_DWORD *)v17 = v18;
            }
          }
        }
        if (v34 >= v33)
          v60 = 0;
        else
          v60 = v36;
        if (v34 - v33 + v60 == 2)
        {
          WTF::URLParser::formURLDecode();
          if ((_BYTE)v120)
          {
            v61 = v119;
            v119 = 0;
            v21 = v116[1];
            v116[1] = v61;
            if (v21)
            {
              v22 = *(_DWORD *)v21 - 2;
              if (*(_DWORD *)v21 == 2)
              {
                WTF::StringImpl::destroy(v21, v16);
                if ((_BYTE)v120)
                {
                  v21 = v119;
                  v119 = 0;
                  if (v21)
                  {
                    v22 = *(_DWORD *)v21 - 2;
                    if (*(_DWORD *)v21 != 2)
                      goto LABEL_152;
                    WTF::StringImpl::destroy(v21, v16);
                  }
                }
              }
              else
              {
LABEL_152:
                *(_DWORD *)v21 = v22;
              }
            }
          }
        }
        v62 = HIDWORD(v134);
        if (HIDWORD(v134) == (_DWORD)v134)
        {
          v63 = WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v133, HIDWORD(v134) + 1, (unint64_t)v116);
          v64 = *(_DWORD **)v63;
          if (*(_QWORD *)v63)
            *v64 += 2;
          v62 = HIDWORD(v134);
          v65 = v133;
          v66 = (_QWORD *)((char *)v133 + 32 * HIDWORD(v134));
          *v66 = v64;
          v67 = (_DWORD *)*((_QWORD *)v63 + 1);
          if (v67)
            *v67 += 2;
          v66[1] = v67;
          v68 = (_DWORD *)*((_QWORD *)v63 + 2);
          if (v68)
            *v68 += 2;
          *((_QWORD *)v65 + 4 * v62 + 2) = v68;
          v69 = (_DWORD *)*((_QWORD *)v63 + 3);
          if (v69)
            *v69 += 2;
          *((_QWORD *)v65 + 4 * v62 + 3) = v69;
        }
        else
        {
          v70 = v116[0];
          if (v116[0])
            *(_DWORD *)v116[0] += 2;
          v71 = v133;
          v72 = (WTF::StringImpl **)((char *)v133 + 32 * v62);
          *v72 = v70;
          v73 = v116[1];
          if (v116[1])
            *(_DWORD *)v116[1] += 2;
          v72[1] = v73;
          v74 = v117[0];
          if (v117[0])
            *(_DWORD *)v117[0] += 2;
          *((_QWORD *)v71 + 4 * v62 + 2) = v74;
          v75 = v117[1];
          if (v117[1])
            *(_DWORD *)v117[1] += 2;
          *((_QWORD *)v71 + 4 * v62 + 3) = v75;
        }
        HIDWORD(v134) = v62 + 1;
      }
      v76 = v117[1];
      v117[1] = 0;
      if (v76)
      {
        if (*(_DWORD *)v76 == 2)
          WTF::StringImpl::destroy(v76, v16);
        else
          *(_DWORD *)v76 -= 2;
      }
      v77 = v117[0];
      v117[0] = 0;
      if (v77)
      {
        if (*(_DWORD *)v77 == 2)
          WTF::StringImpl::destroy(v77, v16);
        else
          *(_DWORD *)v77 -= 2;
      }
      v78 = v116[1];
      v116[1] = 0;
      if (v78)
      {
        if (*(_DWORD *)v78 == 2)
          WTF::StringImpl::destroy(v78, v16);
        else
          *(_DWORD *)v78 -= 2;
      }
      v79 = v116[0];
      v116[0] = 0;
      if (v79)
      {
        if (*(_DWORD *)v79 == 2)
          WTF::StringImpl::destroy(v79, v16);
        else
          *(_DWORD *)v79 -= 2;
      }
LABEL_185:
      if (v33 <= v34)
      {
        if (v33 != v34)
        {
          v83 = (WTF::StringImpl **)&v35[8 * v33];
          v84 = 8 * v34 - 8 * v33;
          do
          {
            v85 = *v83;
            *v83 = 0;
            if (v85)
            {
              if (*(_DWORD *)v85 == 2)
                WTF::StringImpl::destroy(v85, v16);
              else
                *(_DWORD *)v85 -= 2;
            }
            ++v83;
            v84 -= 8;
          }
          while (v84);
        }
      }
      else
      {
        if (v34)
        {
          v80 = 8 * v34;
          v81 = (WTF::StringImpl **)v35;
          do
          {
            v82 = *v81;
            *v81 = 0;
            if (v82)
            {
              if (*(_DWORD *)v82 == 2)
                WTF::StringImpl::destroy(v82, v16);
              else
                *(_DWORD *)v82 -= 2;
            }
            ++v81;
            v80 -= 8;
          }
          while (v80);
        }
        if (v33 != v36)
        {
          v86 = (WTF::StringImpl **)&v35[8 * v33];
          v87 = 8 * v36 - 8 * v33;
          do
          {
            v88 = *v86;
            *v86 = 0;
            if (v88)
            {
              if (*(_DWORD *)v88 == 2)
                WTF::StringImpl::destroy(v88, v16);
              else
                *(_DWORD *)v88 -= 2;
            }
            ++v86;
            v87 -= 8;
          }
          while (v87);
        }
      }
      a1 = v115;
      v9 = v114;
      if (v35)
        WTF::fastFree((WTF *)v35, v16);
LABEL_212:
      result = (WTF *)WTF::StringView::SplitResult::Iterator::operator++();
      v10 = v126;
      if (v126 == v9 && v128)
      {
        v11 = HIDWORD(v134);
        break;
      }
    }
  }
  v89 = *(unsigned int *)(a1 + 12);
  if (v89 <= v11)
  {
    v92 = *(_DWORD *)(a1 + 8);
    if (v11 > v92)
    {
      if (v92)
      {
        if ((_DWORD)v89)
        {
          WTF::VectorDestructor<true,WebCore::ImageResource>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 32 * v89));
          *(_DWORD *)(a1 + 12) = 0;
        }
        result = *(WTF **)a1;
        if (*(_QWORD *)a1)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
          result = (WTF *)WTF::fastFree(result, v8);
        }
      }
      if (*(_DWORD *)(a1 + 8) < v11)
      {
        if (v11 >> 27)
        {
LABEL_284:
          __break(0xC471u);
          JUMPOUT(0x1959EBBFCLL);
        }
        v93 = *(WTF::StringImpl **)a1;
        v94 = (WTF::StringImpl *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12));
        v95 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(32 * v11));
        *(_DWORD *)(a1 + 8) = v11;
        *(_QWORD *)a1 = v95;
        result = WTF::VectorMover<false,WebCore::ImageResource>::move(v93, v94, v95);
        if (v93)
        {
          if (*(WTF::StringImpl **)a1 == v93)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          result = (WTF *)WTF::fastFree(v93, v8);
        }
      }
    }
    v90 = *(unsigned int *)(a1 + 12);
    v91 = *(_DWORD *)(a1 + 12);
  }
  else
  {
    v90 = v11;
    result = WTF::VectorDestructor<true,WebCore::ImageResource>::destruct((WTF::StringImpl *)(*(_QWORD *)a1 + 32 * v11), (WTF::StringImpl *)(*(_QWORD *)a1 + 32 * v89));
    *(_DWORD *)(a1 + 12) = v11;
    v91 = v11;
  }
  v96 = v133;
  v97 = *(WTF::StringImpl **)a1;
  if (v91)
  {
    v98 = (WTF::StringImpl *)((char *)v133 + 32 * v90);
    v99 = v133;
    do
    {
      v100 = *(_DWORD **)v99;
      if (*(_QWORD *)v99)
        *v100 += 2;
      v101 = *(WTF::StringImpl **)v97;
      *(_QWORD *)v97 = v100;
      if (v101)
      {
        if (*(_DWORD *)v101 == 2)
          WTF::StringImpl::destroy(v101, (WTF::StringImpl *)v8);
        else
          *(_DWORD *)v101 -= 2;
      }
      v102 = (_DWORD *)*((_QWORD *)v99 + 1);
      if (v102)
        *v102 += 2;
      v103 = (WTF::StringImpl *)*((_QWORD *)v97 + 1);
      *((_QWORD *)v97 + 1) = v102;
      if (v103)
      {
        if (*(_DWORD *)v103 == 2)
          WTF::StringImpl::destroy(v103, (WTF::StringImpl *)v8);
        else
          *(_DWORD *)v103 -= 2;
      }
      v104 = (_DWORD *)*((_QWORD *)v99 + 2);
      if (v104)
        *v104 += 2;
      v105 = (WTF::StringImpl *)*((_QWORD *)v97 + 2);
      *((_QWORD *)v97 + 2) = v104;
      if (v105)
      {
        if (*(_DWORD *)v105 == 2)
          WTF::StringImpl::destroy(v105, (WTF::StringImpl *)v8);
        else
          *(_DWORD *)v105 -= 2;
      }
      v106 = (_DWORD *)*((_QWORD *)v99 + 3);
      if (v106)
        *v106 += 2;
      result = (WTF *)*((_QWORD *)v97 + 3);
      *((_QWORD *)v97 + 3) = v106;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v8);
        else
          *(_DWORD *)result -= 2;
      }
      v99 = (WTF::StringImpl *)((char *)v99 + 32);
      v97 = (WTF::StringImpl *)((char *)v97 + 32);
    }
    while (v99 != v98);
    v91 = *(_DWORD *)(a1 + 12);
    v97 = *(WTF::StringImpl **)a1;
  }
  if (v91 != v11)
  {
    v107 = v91;
    v108 = (_QWORD *)((char *)v97 + 32 * v91);
    v109 = (_QWORD *)((char *)v96 + 32 * v107);
    do
    {
      v110 = (_DWORD *)*v109;
      if (*v109)
        *v110 += 2;
      *v108 = v110;
      v111 = (_DWORD *)v109[1];
      if (v111)
        *v111 += 2;
      v108[1] = v111;
      v112 = (_DWORD *)v109[2];
      if (v112)
        *v112 += 2;
      v108[2] = v112;
      v113 = (_DWORD *)v109[3];
      if (v113)
        *v113 += 2;
      v108[3] = v113;
      v109 += 4;
      v108 += 4;
    }
    while (v109 != (_QWORD *)((char *)v96 + 32 * v11));
  }
  *(_DWORD *)(a1 + 12) = v11;
  if (!v6)
  {
LABEL_272:
    if (!v11)
      goto LABEL_274;
    goto LABEL_273;
  }
  if (*v6 != 2)
  {
    *v6 -= 2;
    goto LABEL_272;
  }
  result = (WTF *)WTF::StringImpl::destroy((WTF::StringImpl *)v6, (WTF::StringImpl *)v8);
  if (v11)
LABEL_273:
    result = WTF::VectorDestructor<true,WebCore::ImageResource>::destruct(v96, (WTF::StringImpl *)((char *)v96 + 32 * v11));
LABEL_274:
  if (v96)
    return (WTF *)WTF::fastFree(v96, v8);
  return result;
}

void WebCore::FocusEvent::~FocusEvent(WebCore::FocusEvent *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    if ((*(_BYTE *)(v3 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3);
    }
  }
  WebCore::UIEvent::~UIEvent(this, (WTF::StringImpl *)a2);
}

{
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;

  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    if ((*(_BYTE *)(v3 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3);
    }
  }
  WebCore::UIEvent::~UIEvent(this, (WTF::StringImpl *)a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WebCore::FocusEvent::relatedTarget(WebCore::FocusEvent *this)
{
  return *((_QWORD *)this + 11);
}

unsigned int *WebCore::FocusEvent::setRelatedTarget(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *result;

  v3 = *a2;
  *a2 = 0;
  result = *(unsigned int **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v3;
  if (result)
  {
    if ((*((_BYTE *)result + 22) & 2) != 0)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      }
      else
      {
        result[6] -= 2;
      }
    }
    else
    {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 96))(result);
    }
  }
  return result;
}

uint64_t WebCore::EventTargetConcrete::eventTargetInterface(WebCore::EventTargetConcrete *this)
{
  return 47;
}

uint64_t WebCore::EventTargetConcrete::scriptExecutionContext(WebCore::EventTargetConcrete *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

void WebCore::EventTargetConcrete::~EventTargetConcrete(WebCore::EventTargetConcrete *this, void *a2)
{
  void *v3;

  WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::EventTargetConcrete *)((char *)this + 32), a2);
  WebCore::EventTarget::~EventTarget(this, v3);
}

{
  void *v3;
  bmalloc::api *v4;
  void *v5;

  WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::EventTargetConcrete *)((char *)this + 32), a2);
  WebCore::EventTarget::~EventTarget(this, v3);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WebCore::EventTargetConcrete::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::EventTargetConcrete::derefEventTarget(_DWORD *this, void *a2)
{
  WebCore::EventTarget *v2;
  void *v3;
  bmalloc::api *v4;
  void *v5;

  v2 = (WebCore::EventTarget *)this;
  if (this[6] == 1)
  {
    WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)(this + 8), a2);
    WebCore::EventTarget::~EventTarget(v2, v3);
    return (_DWORD *)bmalloc::api::isoDeallocate(v4, v5);
  }
  else
  {
    --this[6];
  }
  return this;
}

void `non-virtual thunk to'WebCore::EventTargetConcrete::~EventTargetConcrete(WebCore::EventTargetConcrete *this, void *a2)
{
  WebCore::EventTarget *v2;
  void *v3;

  v2 = (WebCore::EventTargetConcrete *)((char *)this - 32);
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
  WebCore::EventTarget::~EventTarget(v2, v3);
}

{
  WebCore::EventTarget *v2;
  void *v3;
  bmalloc::api *v4;
  void *v5;

  v2 = (WebCore::EventTargetConcrete *)((char *)this - 32);
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
  WebCore::EventTarget::~EventTarget(v2, v3);
  bmalloc::api::isoDeallocate(v4, v5);
}

void WebCore::FormDataEvent::~FormDataEvent(WebCore::FormDataEvent *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = off_1E33A4E58;
  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  WebCore::Event::~Event(this, a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;

  *(_QWORD *)this = off_1E33A4E58;
  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::EventTarget&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 > v4)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
  }
  v12 = *(unsigned int *)(v3 + 12);
  v13 = *(_QWORD *)v3;
  if ((*(_BYTE *)(a2 + 22) & 2) != 0)
  {
    *(_DWORD *)(a2 + 24) += 2;
    v14 = v12;
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
    v14 = *(_DWORD *)(v3 + 12);
  }
  *(_QWORD *)(v13 + 8 * v12) = a2;
  *(_DWORD *)(v3 + 12) = v14 + 1;
  return result;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::EventTarget::addEventListenerForBindings(WTF::AtomString const&,WTF::RefPtr<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,std::variant<WebCore::AddEventListenerOptions,BOOL> &&)::$_0,WebCore::EventTarget::addEventListenerForBindings(WTF::AtomString const&,WTF::RefPtr<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &,std::variant<WebCore::AddEventListenerOptions,BOOL>)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::variant,BOOL> &>(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _DWORD *result;
  _DWORD *v8;

  v3 = *a1;
  v4 = **a1;
  v5 = v3[1];
  v6 = (_QWORD *)v3[2];
  v8 = (_DWORD *)*v6;
  *v6 = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD **, uint64_t))(*(_QWORD *)v4 + 24))(v4, v5, &v8, a2);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::EventTarget::addEventListenerForBindings(WTF::AtomString const&,WTF::RefPtr<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,std::variant<WebCore::AddEventListenerOptions,BOOL> &&)::$_0,WebCore::EventTarget::addEventListenerForBindings(WTF::AtomString const&,WTF::RefPtr<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &,std::variant<WebCore::AddEventListenerOptions,BOOL>)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::variant,BOOL> &>(uint64_t *a1, char *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  WebCore::AbortSignal *v8;
  _DWORD *result;
  bmalloc::api *v10;
  void *v11;
  char v12;
  __int16 v13;
  char v14;
  WebCore::AbortSignal *v15;
  _DWORD *v16;

  v2 = *a1;
  v3 = *a2;
  v4 = *(_QWORD *)(*a1 + 24);
  v5 = *(_QWORD *)(v2 + 32);
  v6 = *(_QWORD **)(v2 + 40);
  v16 = (_DWORD *)*v6;
  *v6 = 0;
  v12 = v3;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD **, char *))(*(_QWORD *)v4 + 24))(v4, v5, &v16, &v12);
  v8 = v15;
  v15 = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(v8, v7);
      bmalloc::api::isoDeallocate(v10, v11);
    }
    else
    {
      --*((_DWORD *)v8 + 6);
    }
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::EventTarget::removeEventListenerForBindings(WTF::AtomString const&,WTF::RefPtr<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,std::variant<WebCore::EventListenerOptions,BOOL> &&)::$_0,WebCore::EventTarget::removeEventListenerForBindings(WTF::AtomString const&,WTF::RefPtr<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &,std::variant<WebCore::EventListenerOptions,BOOL>)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::variant,BOOL> &>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)**a1 + 32))(**a1, (*a1)[1], *(_QWORD *)(*a1)[2], a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::EventTarget::removeEventListenerForBindings(WTF::AtomString const&,WTF::RefPtr<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,std::variant<WebCore::EventListenerOptions,BOOL> &&)::$_0,WebCore::EventTarget::removeEventListenerForBindings(WTF::AtomString const&,WTF::RefPtr<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &,std::variant<WebCore::EventListenerOptions,BOOL>)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::variant,BOOL> &>(uint64_t *a1, char *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a1;
  v3 = *a2;
  v4 = *(_QWORD *)(*a1 + 24);
  v5 = *(_QWORD *)(v2 + 32);
  v6 = **(_QWORD **)(v2 + 40);
  v8 = v3;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 32))(v4, v5, v6, &v8);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::String>>,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashMap<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::String,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  WTF::StringImpl *v6;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *(_DWORD **)v4;
      if (*(_QWORD *)v4 != -1)
      {
        v6 = *(WTF::StringImpl **)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
          {
            WTF::StringImpl::destroy(v6, a2);
            v5 = *(_DWORD **)v4;
          }
          else
          {
            *(_DWORD *)v6 -= 2;
          }
        }
        *(_QWORD *)v4 = 0;
        if (v5)
        {
          if (v5[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
          else
            --v5[2];
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::String>>,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashMap<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::String,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>>::rehash(uint64_t *a1, unsigned int a2, _DWORD **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD **v13;
  _DWORD *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  _DWORD *v32;
  _DWORD *v33;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (_DWORD **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (_DWORD *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = v17 + 16 * v24;
          v27 = *(WTF::StringImpl **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 != 2)
            {
              *(_DWORD *)v27 -= 2;
              goto LABEL_22;
            }
            WTF::StringImpl::destroy(v27, v10);
            v33 = *(_DWORD **)v26;
            *(_QWORD *)v26 = 0;
            if (v33)
            {
              if (v33[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
              else
                --v33[2];
            }
          }
          else
          {
LABEL_22:
            *(_QWORD *)v26 = 0;
          }
          v28 = *v13;
          *v13 = 0;
          *(_QWORD *)v26 = v28;
          v29 = v6 + 16 * v11;
          v30 = *(_QWORD *)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          *(_QWORD *)(v26 + 8) = v30;
          v31 = *(WTF::StringImpl **)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v10);
            else
              *(_DWORD *)v31 -= 2;
          }
          v32 = *v13;
          *v13 = 0;
          if (v32)
          {
            if (v32[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
            else
              --v32[2];
          }
          if (v13 == a3)
            v12 = v26;
          goto LABEL_31;
        }
        v15 = v6 + 16 * v11;
        v16 = *(WTF::StringImpl **)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
          {
            WTF::StringImpl::destroy(v16, v10);
            v14 = *v13;
          }
          else
          {
            *(_DWORD *)v16 -= 2;
          }
        }
        *v13 = 0;
        if (v14)
        {
          if (v14[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
          else
            --v14[2];
        }
      }
LABEL_31:
      if (++v11 == v7)
        goto LABEL_42;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_42:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

_QWORD *WTF::Vector<WebCore::EventContext,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::EventContext>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _QWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;

  result = (_QWORD *)WTF::Vector<WebCore::EventContext,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = result;
  v5 = *(unsigned int *)(a1 + 12);
  v6 = *(_QWORD *)a1;
  v7 = (_QWORD *)(*(_QWORD *)a1 + (v5 << 6));
  v8 = *result;
  if (*result)
    *(_DWORD *)(v8 + 24) += 2;
  *v7 = v8;
  v9 = v7 + 1;
  v10 = result[1];
  if (v10)
  {
    if ((*(_BYTE *)(v10 + 22) & 2) != 0)
      *(_DWORD *)(v10 + 24) += 2;
    else
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v10 + 88))(result[1]);
  }
  *v9 = v10;
  v11 = v6 + (v5 << 6);
  v12 = v4[2];
  if (v12)
  {
    if ((*(_BYTE *)(v12 + 22) & 2) != 0)
      *(_DWORD *)(v12 + 24) += 2;
    else
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v12 + 88))(v4[2]);
  }
  *(_QWORD *)(v11 + 16) = v12;
  v13 = v4[3];
  if (v13)
    *(_DWORD *)(v13 + 24) += 2;
  *(_QWORD *)(v11 + 24) = v13;
  v14 = v6 + (v5 << 6);
  v15 = (_DWORD *)v4[4];
  if (v15)
    ++*v15;
  *(_QWORD *)(v14 + 32) = v15;
  v16 = (_QWORD *)(v14 + 40);
  v17 = (_DWORD *)v4[5];
  if (v17)
    ++*v17;
  *v16 = v17;
  v18 = (_DWORD *)v4[6];
  if (v18)
    ++*v18;
  v19 = v6 + (v5 << 6);
  *(_QWORD *)(v19 + 48) = v18;
  *(_QWORD *)(v19 + 56) = v4[7];
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<WebCore::EventContext,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WebCore::EventContext *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  void *v19;

  v3 = a3;
  v5 = *(WebCore::EventContext **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WebCore::EventContext *)((char *)v5 + 64 * (unint64_t)*(unsigned int *)(a1 + 12)),
        (unint64_t)v6 <= a3))
  {
    v12 = *(unsigned int *)(a1 + 8);
    v13 = v12 + (v12 >> 2);
    if (v13 >= 0x10)
      v14 = v13 + 1;
    else
      v14 = 16;
    if (v14 <= a2)
      v15 = a2;
    else
      v15 = v14;
    if (v15 > v12)
    {
      v16 = *(unsigned int *)(a1 + 12);
      if (v15 < 0x21)
      {
        v17 = (_QWORD *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 32;
      }
      else
      {
        if (v15 >> 26)
        {
          __break(0xC471u);
          JUMPOUT(0x1959EC83CLL);
        }
        v17 = (_QWORD *)WTF::fastMalloc((WTF *)(v15 << 6));
        *(_DWORD *)(a1 + 8) = v15;
        *(_QWORD *)a1 = v17;
      }
      WTF::VectorMover<false,WebCore::EventContext>::move(v5, (WebCore::EventContext *)((char *)v5 + 64 * v16), v17);
      if ((WebCore::EventContext *)(a1 + 16) != v5 && v5)
      {
        if (*(WebCore::EventContext **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v18);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v10 = a2;
    else
      v10 = v9;
    if (v10 > v7)
    {
      if (v10 < 0x21)
      {
        v11 = (_QWORD *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 32;
      }
      else
      {
        if (v10 >> 26)
        {
          __break(0xC471u);
          JUMPOUT(0x1959EC844);
        }
        v11 = (_QWORD *)WTF::fastMalloc((WTF *)(v10 << 6));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
      }
      WTF::VectorMover<false,WebCore::EventContext>::move(v5, v6, v11);
      if ((WebCore::EventContext *)(a1 + 16) != v5 && v5)
      {
        if (*(WebCore::EventContext **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v19);
      }
    }
    return *(_QWORD *)a1 + ((uint64_t)(v3 - (_QWORD)v5) >> 6 << 6);
  }
  return v3;
}

void WTF::VectorMover<false,WebCore::EventContext>::move(WebCore::EventContext *this, WTF::StringImpl *a2, _QWORD *a3)
{
  WebCore::EventContext *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;

  if (this != a2)
  {
    v5 = this;
    do
    {
      v6 = *(_QWORD *)v5;
      if (*(_QWORD *)v5)
        *(_DWORD *)(v6 + 24) += 2;
      *a3 = v6;
      v7 = *((_QWORD *)v5 + 1);
      if (v7)
      {
        if ((*(_BYTE *)(v7 + 22) & 2) != 0)
          *(_DWORD *)(v7 + 24) += 2;
        else
          (*(void (**)(_QWORD))(*(_QWORD *)v7 + 88))(*((_QWORD *)v5 + 1));
      }
      a3[1] = v7;
      v8 = *((_QWORD *)v5 + 2);
      if (v8)
      {
        if ((*(_BYTE *)(v8 + 22) & 2) != 0)
          *(_DWORD *)(v8 + 24) += 2;
        else
          (*(void (**)(_QWORD))(*(_QWORD *)v8 + 88))(*((_QWORD *)v5 + 2));
      }
      a3[2] = v8;
      v9 = *((_QWORD *)v5 + 3);
      if (v9)
        *(_DWORD *)(v9 + 24) += 2;
      a3[3] = v9;
      v10 = (_DWORD *)*((_QWORD *)v5 + 4);
      if (v10)
        ++*v10;
      a3[4] = v10;
      v11 = (_DWORD *)*((_QWORD *)v5 + 5);
      if (v11)
        ++*v11;
      a3[5] = v11;
      v12 = (_DWORD *)*((_QWORD *)v5 + 6);
      if (v12)
        ++*v12;
      a3[6] = v12;
      a3[7] = *((_QWORD *)v5 + 7);
      WebCore::EventContext::~EventContext(v5, a2);
      v5 = (WebCore::EventContext *)((char *)v5 + 64);
      a3 += 8;
    }
    while (v5 != a2);
  }
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::TreeScope,WTF::RawPtrTraits<WebCore::TreeScope>,WTF::DefaultRefDerefTraits<WebCore::TreeScope>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TreeScope*&>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 > v4)
  {
    v9 = *(void **)result;
    if (v8 < 9)
    {
      v10 = (void *)(result + 16);
      *(_QWORD *)v3 = v3 + 16;
      *(_DWORD *)(v3 + 8) = 8;
    }
    else
    {
      if (v8 >> 29)
        goto LABEL_23;
      v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
      *(_DWORD *)(v3 + 8) = v8;
      *(_QWORD *)v3 = v10;
    }
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if ((void *)(v3 + 16) != v9 && v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
  }
  v12 = *(unsigned int *)(v3 + 12);
  v13 = *(_QWORD *)v3;
  v14 = *a2;
  if (*a2)
  {
    v15 = *(_WORD *)(*(_QWORD *)v14 + 28);
    if ((!*(_QWORD *)v14 || (v15 & 0xF000) != 0x9000) && (v15 & 0x80) == 0)
    {
LABEL_23:
      __break(0xC471u);
      JUMPOUT(0x1959ECAA4);
    }
    *(_DWORD *)(*(_QWORD *)v14 + 24) += 2;
  }
  *(_QWORD *)(v13 + 8 * v12) = v14;
  *(_DWORD *)(v3 + 12) = v12 + 1;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::EventTarget::addEventListener(WTF::AtomString const&,WTF::Ref<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,WebCore::AddEventListenerOptions const&)::$_1,void,JSC::JSValue>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = &off_1E33A4F40;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = a1[1];
  a1[1] = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v11 = *(unsigned int *)(v7 + 28);
      if ((_DWORD)v11)
      {
        v14 = v7;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v11));
        v7 = v14;
      }
      v12 = *(WTF **)(v7 + 16);
      if (v12)
      {
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v13 = v7;
        WTF::fastFree(v12, a2);
        v7 = v13;
      }
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::EventTarget::addEventListener(WTF::AtomString const&,WTF::Ref<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,WebCore::AddEventListenerOptions const&)::$_1,void,JSC::JSValue>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = &off_1E33A4F40;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v11 = *(unsigned int *)(v7 + 28);
      if ((_DWORD)v11)
      {
        v14 = v7;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v11));
        v7 = v14;
      }
      v12 = *(WTF **)(v7 + 16);
      if (v12)
      {
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v13 = v7;
        WTF::fastFree(v12, a2);
        v7 = v13;
      }
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::EventTarget::addEventListener(WTF::AtomString const&,WTF::Ref<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,WebCore::AddEventListenerOptions const&)::$_1,void,JSC::JSValue>::call(unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unsigned int *v5;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *((_QWORD *)result + 3);
      if (v3)
      {
        if (*(_QWORD *)(v3 + 8))
        {
          if ((*(_BYTE *)(v2 + 22) & 2) != 0)
          {
            *(_DWORD *)(v2 + 24) += 2;
          }
          else
          {
            v5 = result;
            (*(void (**)(uint64_t))(*(_QWORD *)v2 + 88))(v2);
            result = v5;
          }
          result = (unsigned int *)(*(uint64_t (**)(uint64_t, unsigned int *))(*(_QWORD *)v2 + 32))(v2, result + 4);
          if ((*(_BYTE *)(v2 + 22) & 2) != 0)
          {
            if (*(_DWORD *)(v2 + 24) == 2)
            {
              if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
                return WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
            }
            else
            {
              *(_DWORD *)(v2 + 24) -= 2;
            }
          }
          else
          {
            return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 96))(v2);
          }
        }
      }
    }
  }
  return result;
}

void WebCore::UserStyleSheet::~UserStyleSheet(WebCore::UserStyleSheet *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  v3 = *((unsigned int *)this + 19);
  if ((_DWORD)v3)
  {
    v9 = (WTF::StringImpl **)*((_QWORD *)this + 8);
    v10 = 8 * v3;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v4 = (WTF *)*((_QWORD *)this + 8);
  if (v4)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((unsigned int *)this + 15);
  if ((_DWORD)v5)
  {
    v12 = (WTF::StringImpl **)*((_QWORD *)this + 6);
    v13 = 8 * v5;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  v6 = (WTF *)*((_QWORD *)this + 6);
  if (v6)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::ExtensionStyleSheets::updateInjectedStyleSheetCache(void)::$_1,void,WebCore::UserStyleSheet const&>::call(WTF::StringImpl *result, uint64_t a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!*(_BYTE *)(a2 + 96))
  {
    v3 = result;
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)result + 1) + 8) + 8);
    if (!*(_BYTE *)(a2 + 80)
      || (v5 = *(_QWORD *)(v4 + 528)) == 0
      || (v6 = *(_QWORD *)(v5 + 8)) == 0
      || (v7 = *(_QWORD *)(v6 + 120)) == 0
      || !*(_QWORD *)(v7 + 8))
    {
      result = (WTF::StringImpl *)WebCore::UserContentURLPattern::matchesPatterns((const WTF::URL *)(v4 + 736), a2 + 48, a2 + 64);
      if ((_DWORD)result)
        return WebCore::ExtensionStyleSheets::updateInjectedStyleSheetCache(void)const::$_0::operator()(**((_QWORD **)v3 + 2), a2);
    }
  }
  return result;
}

WebCore::UserStyleSheet *WebCore::UserStyleSheet::UserStyleSheet(WebCore::UserStyleSheet *this, const WebCore::UserStyleSheet *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD *v11;
  uint64_t v12;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD **v18;
  uint64_t v19;
  _DWORD *v20;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)this = v4;
  v5 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v5)
    *v5 += 2;
  *((_QWORD *)this + 1) = v5;
  v6 = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 2) = v6;
  v7 = *((unsigned int *)a2 + 15);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 15) = v7;
  if ((_DWORD)v7)
  {
    if (v7 >> 29)
      goto LABEL_22;
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v7));
    *((_DWORD *)this + 14) = v7;
    *((_QWORD *)this + 6) = v11;
    v12 = *((unsigned int *)a2 + 15);
    if ((_DWORD)v12)
    {
      v13 = (_DWORD **)*((_QWORD *)a2 + 6);
      v14 = 8 * v12;
      do
      {
        v15 = *v13;
        if (*v13)
          *v15 += 2;
        *v11++ = v15;
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
  }
  v8 = *((unsigned int *)a2 + 19);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 19) = v8;
  if (!(_DWORD)v8)
    goto LABEL_7;
  if (v8 >> 29)
  {
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x1959ED078);
  }
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v8));
  *((_DWORD *)this + 18) = v8;
  *((_QWORD *)this + 8) = v16;
  v17 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v17)
  {
    v18 = (_DWORD **)*((_QWORD *)a2 + 8);
    v19 = 8 * v17;
    do
    {
      v20 = *v18;
      if (*v18)
        *v20 += 2;
      *v16++ = v20;
      ++v18;
      v19 -= 8;
    }
    while (v19);
  }
LABEL_7:
  v9 = *((_OWORD *)a2 + 5);
  *((_BYTE *)this + 96) = *((_BYTE *)a2 + 96);
  *((_OWORD *)this + 5) = v9;
  return this;
}

char *WTF::Vector<WebCore::UserStyleSheet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)((char *)v5 + 104 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x2762763)
      {
        __break(0xC471u);
        JUMPOUT(0x1959ED238);
      }
      v17 = (WTF::StringImpl *)((char *)v5 + 104 * *(unsigned int *)(a1 + 12));
      v18 = 104 * v16;
      v19 = WTF::fastMalloc((WTF *)(104 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF8) / 0x68;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::UserStyleSheet>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v9 >= 0x2762763)
      {
        __break(0xC471u);
        JUMPOUT(0x1959ED240);
      }
      v10 = 104 * v9;
      v11 = WTF::fastMalloc((WTF *)(104 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x68;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::UserStyleSheet>::move(v5, v6, v11);
      v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::UserStyleSheet>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  for (; result != a2; a3 += 104)
  {
    v5 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    *(_QWORD *)a3 = v5;
    v6 = *((_QWORD *)result + 1);
    *((_QWORD *)result + 1) = 0;
    *(_QWORD *)(a3 + 8) = v6;
    v7 = *(_DWORD *)(a3 + 16) & 0xFFFFFFFE | *((_DWORD *)result + 4) & 1;
    *(_DWORD *)(a3 + 16) = v7;
    v8 = v7 & 0xFFFFFFFD | (2 * ((*((_DWORD *)result + 4) >> 1) & 1));
    *(_DWORD *)(a3 + 16) = v8;
    v9 = v8 & 0xFFFFFFFB | (4 * ((*((_DWORD *)result + 4) >> 2) & 1));
    *(_DWORD *)(a3 + 16) = v9;
    v10 = v9 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)result + 4) >> 3) & 7));
    *(_DWORD *)(a3 + 16) = v10;
    *(_DWORD *)(a3 + 16) = *((_DWORD *)result + 4) & 0xFFFFFFC0 | v10 & 0x3F;
    *(_OWORD *)(a3 + 20) = *(_OWORD *)((char *)result + 20);
    *(_QWORD *)(a3 + 36) = *(_QWORD *)((char *)result + 36);
    *(_DWORD *)(a3 + 44) = *((_DWORD *)result + 11);
    *((_DWORD *)result + 4) &= ~1u;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    v11 = *((_QWORD *)result + 6);
    *((_QWORD *)result + 6) = 0;
    *(_QWORD *)(a3 + 48) = v11;
    LODWORD(v11) = *((_DWORD *)result + 14);
    *((_DWORD *)result + 14) = 0;
    *(_DWORD *)(a3 + 56) = v11;
    LODWORD(v11) = *((_DWORD *)result + 15);
    *((_DWORD *)result + 15) = 0;
    *(_DWORD *)(a3 + 60) = v11;
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    v12 = *((_QWORD *)result + 8);
    *((_QWORD *)result + 8) = 0;
    *(_QWORD *)(a3 + 64) = v12;
    LODWORD(v12) = *((_DWORD *)result + 18);
    *((_DWORD *)result + 18) = 0;
    *(_DWORD *)(a3 + 72) = v12;
    LODWORD(v12) = *((_DWORD *)result + 19);
    *((_DWORD *)result + 19) = 0;
    *(_DWORD *)(a3 + 76) = v12;
    v13 = *((_OWORD *)result + 5);
    *(_BYTE *)(a3 + 96) = *((_BYTE *)result + 96);
    *(_OWORD *)(a3 + 80) = v13;
    WebCore::UserStyleSheet::~UserStyleSheet(result, a2);
    result = (WTF::StringImpl *)(v14 + 104);
  }
  return result;
}

void WTF::VectorMover<false,WebCore::UserStyleSheet>::moveOverlapping(WTF::StringImpl *a1, WTF::StringImpl *a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if ((unint64_t)a1 <= a3)
  {
    if (a2 != a1)
    {
      v5 = 0;
      v6 = a3 + a2 - a1;
      do
      {
        v7 = (uint64_t)a2 + v5 - 104;
        v8 = *(_QWORD *)v7;
        v9 = v6 + v5;
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v9 - 104) = v8;
        v10 = *(_QWORD *)((char *)a2 + v5 - 96);
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v9 - 96) = v10;
        v11 = *(_DWORD *)(v6 + v5 - 88) & 0xFFFFFFFE | *(_DWORD *)((_BYTE *)a2 + v5 - 88) & 1;
        *(_DWORD *)(v9 - 88) = v11;
        v12 = v11 & 0xFFFFFFFD | (2 * ((*(_DWORD *)((char *)a2 + v5 - 88) >> 1) & 1));
        *(_DWORD *)(v9 - 88) = v12;
        v13 = v12 & 0xFFFFFFFB | (4 * ((*(_DWORD *)((char *)a2 + v5 - 88) >> 2) & 1));
        *(_DWORD *)(v9 - 88) = v13;
        v14 = v13 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)((char *)a2 + v5 - 88) >> 3) & 7));
        *(_DWORD *)(v9 - 88) = v14;
        *(_DWORD *)(v9 - 88) = *(_DWORD *)((_BYTE *)a2 + v5 - 88) & 0xFFFFFFC0 | v14 & 0x3F;
        *(_OWORD *)(v9 - 84) = *(_OWORD *)((char *)a2 + v5 - 84);
        *(_QWORD *)(v9 - 68) = *(_QWORD *)((char *)a2 + v5 - 68);
        *(_DWORD *)(v9 - 60) = *(_DWORD *)((char *)a2 + v5 - 60);
        *(_DWORD *)(v7 + 16) = *(_DWORD *)((_BYTE *)a2 + v5 - 88) & 0xFFFFFFFE;
        *(_QWORD *)(v9 - 56) = 0;
        *(_QWORD *)(v9 - 48) = 0;
        v15 = *(_QWORD *)((char *)a2 + v5 - 56);
        *(_QWORD *)(v7 + 48) = 0;
        *(_QWORD *)(v9 - 56) = v15;
        LODWORD(v15) = *(_DWORD *)((char *)a2 + v5 - 48);
        *(_DWORD *)(v7 + 56) = 0;
        *(_DWORD *)(v9 - 48) = v15;
        LODWORD(v15) = *(_DWORD *)((char *)a2 + v5 - 44);
        *(_DWORD *)(v7 + 60) = 0;
        *(_DWORD *)(v9 - 44) = v15;
        *(_QWORD *)(v9 - 40) = 0;
        *(_QWORD *)(v9 - 32) = 0;
        v16 = *(_QWORD *)((char *)a2 + v5 - 40);
        *(_QWORD *)(v7 + 64) = 0;
        *(_QWORD *)(v9 - 40) = v16;
        LODWORD(v16) = *(_DWORD *)((char *)a2 + v5 - 32);
        *(_DWORD *)(v7 + 72) = 0;
        *(_DWORD *)(v9 - 32) = v16;
        LODWORD(v16) = *(_DWORD *)((char *)a2 + v5 - 28);
        *(_DWORD *)(v7 + 76) = 0;
        *(_DWORD *)(v9 - 28) = v16;
        v17 = *(_OWORD *)((char *)a2 + v5 - 24);
        *(_BYTE *)(v9 - 8) = *((_BYTE *)a2 + v5 - 8);
        *(_OWORD *)(v9 - 24) = v17;
        WebCore::UserStyleSheet::~UserStyleSheet((WebCore::UserStyleSheet *)v7, a2);
        v5 -= 104;
      }
      while ((WTF::StringImpl *)((char *)a2 + v5) != a1);
    }
  }
  else
  {
    WTF::VectorMover<false,WebCore::UserStyleSheet>::move(a1, a2, a3);
  }
}

_BYTE *WebCore::FragmentDirectiveRangeFinder::rangeOfStringInRange(_BYTE *result, WebCore *a2, uint64_t *a3, int a4, int a5)
{
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  _DWORD *v32;
  uint64_t v33;
  unint64_t v34;
  WTF *v35;
  __int16 v36;
  uint64_t v37;
  unsigned __int8 v39;
  BOOL v40;
  int v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  __int16 v54;
  uint64_t v55;
  unsigned __int8 v57;
  _BOOL4 v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  WTF *v73;
  WTF *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  WTF::StringImpl *v81;
  int v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  int v88;
  WTF::StringImpl *v89;
  WebCore::Node *v90;
  int v91;
  int v92;
  uint64_t IgnoringASCIICase;
  int v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  char v102;
  WebCore::Node *v103;
  WebCore::Node *v104;
  int v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  WTF *v109;
  WebCore::Node *v110;
  uint64_t v111;
  int v112;
  int v113;
  char v114;
  WebCore::Node *v115;
  WebCore::Node *v116;
  WebCore::Node *v117;
  int isBoundary;
  int v119;
  int v120;
  uint64_t v121;
  int v122;
  __int16 v123;
  uint64_t v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  int v127;
  int v128;
  unsigned __int8 v129;
  unsigned __int8 v130;
  unsigned __int8 v131;
  unsigned __int8 v132;
  WebCore::Node *v133;
  int v134;
  WebCore::Node *v135;
  int v136;
  WebCore::Node *v137;
  WebCore::Node *v138;
  WebCore::Node *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  BOOL v160;
  uint64_t v161;
  uint64_t v162;
  int v164;
  int v165;
  uint64_t v167;
  uint64_t v168;
  WTF *v169;
  uint64_t v170;
  uint64_t v171;
  _DWORD *v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  int v176;
  int v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  WebCore::Node *v181;
  WTF *__src;
  WTF *__srcb;
  WTF *__srca;
  int v185;
  __int16 v186;
  WebCore *v187;
  WebCore::Node *v189;
  int v190;
  unsigned __int8 v191;
  WebCore::Node *v192;
  uint64_t v193;
  unsigned __int8 v194;
  WTF::StringImpl *v195;
  int v196;
  WebCore::Node *v197;
  int v198;
  uint64_t v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  int v202;
  char v203;
  WTF::StringImpl *v204;

  v187 = a2;
  v5 = result;
  v6 = a3 + 2;
  v7 = *a3;
  if (*a3 != a3[2] || *((_DWORD *)a3 + 2) != *((_DWORD *)a3 + 6))
  {
    if (a4)
      v11 = 67;
    else
      v11 = 65;
    if (a5)
      v11 |= 0x80u;
    v186 = v11;
    *(_DWORD *)(v7 + 24) += 2;
    v12 = v7;
    while (1)
    {
      v13 = *(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL;
      if (!v13)
        goto LABEL_33;
      if ((*(_BYTE *)((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        v13 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
      if ((*(_QWORD *)(v13 + 96) & 0x1FLL) == 0x1A
        || (v14 = *(_WORD *)(v12 + 28), (v14 & 0x10) != 0)
        && ((v15 = *(_QWORD *)(*(_QWORD *)(v12 + 96) + 24), v15 == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
         || v15 == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24)
         || v15 == *(_QWORD *)(WebCore::HTMLNames::meterTag + 24)
         || v15 == *(_QWORD *)(WebCore::HTMLNames::objectTag + 24)
         || v15 == *(_QWORD *)(WebCore::HTMLNames::progressTag + 24)
         || v15 == *(_QWORD *)(WebCore::HTMLNames::styleTag + 24)
         || v15 == *(_QWORD *)(WebCore::HTMLNames::scriptTag + 24)
         || v15 == *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
        || (v14 & 8) != 0
        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 824))(v12)
        && *(_QWORD *)(*(_QWORD *)(v12 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::audioTag + 24))
      {
LABEL_33:
        v18 = *(_QWORD *)(v7 + 56);
        if (!v18)
        {
          v19 = v7;
          do
          {
            v19 = *(_QWORD *)(v19 + 32);
            if (!v19)
            {
              *v5 = 0;
              v5[32] = 0;
              v21 = 1;
              goto LABEL_42;
            }
            v18 = *(_QWORD *)(v19 + 56);
          }
          while (!v18);
        }
        *(_DWORD *)(v18 + 24) += 2;
        v20 = *a3;
        *a3 = v18;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        *((_DWORD *)a3 + 2) = 0;
        v21 = 2;
        goto LABEL_42;
      }
      if ((*(_WORD *)(v12 + 28) & 0x80) != 0)
        break;
      v16 = (uint64_t *)(v12 + 32);
LABEL_29:
      v12 = *v16;
      if (!*v16)
        goto LABEL_49;
    }
    v17 = *(_QWORD *)(v12 + 200);
    if (v17)
    {
      v16 = (uint64_t *)(v17 + 8);
      goto LABEL_29;
    }
LABEL_49:
    v22 = *(_WORD *)(v7 + 28);
    if ((v22 & 2) == 0)
      goto LABEL_542;
    v23 = *(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v23)
      goto LABEL_542;
    if ((*(_BYTE *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      v23 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
    v24 = v7;
    if ((*(_BYTE *)(v23 + 120) & 0x30) != 0)
    {
LABEL_542:
      while (1)
      {
        v25 = v7;
        if ((v22 & 4) == 0 || (v7 = *(_QWORD *)(v7 + 80)) == 0)
        {
          v7 = *(_QWORD *)(v25 + 56);
          if (!v7)
            break;
        }
LABEL_60:
        *(_DWORD *)(v7 + 24) += 2;
        v27 = *a3;
        *a3 = v7;
        if (v27)
        {
          if (*(_DWORD *)(v27 + 24) == 2)
          {
            if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v27);
          }
          else
          {
            *(_DWORD *)(v27 + 24) -= 2;
          }
        }
        *((_DWORD *)a3 + 2) = 0;
        *(_DWORD *)(v7 + 24) += 2;
        if (*(_DWORD *)(v25 + 24) == 2)
        {
          if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v25);
        }
        else
        {
          *(_DWORD *)(v25 + 24) -= 2;
        }
        v22 = *(_WORD *)(v7 + 28);
        v21 = 2;
        if ((v22 & 0xF000) != 0xA000)
          goto LABEL_42;
      }
      v26 = v25;
      while (1)
      {
        v26 = *(_QWORD *)(v26 + 32);
        if (!v26)
          break;
        v7 = *(_QWORD *)(v26 + 56);
        if (v7)
          goto LABEL_60;
      }
      *v5 = 0;
      v5[32] = 0;
      v21 = 1;
      v7 = v25;
      goto LABEL_42;
    }
    while (1)
    {
      if ((*(_WORD *)(v24 + 28) & 2) == 0)
      {
        v28 = *(_QWORD *)(v24 + 64) & 0xFFFFFFFFFFFFLL;
        if (v28)
        {
          if ((*(_BYTE *)((*(_QWORD *)(v24 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            v28 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v24 + 64) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
          v29 = *(_DWORD *)(v28 + 96) & 0x1F;
          v40 = v29 > 0x17;
          v30 = (1 << v29) & 0xA94016;
          if (!v40 && v30 != 0)
            break;
        }
      }
      v24 = *(_QWORD *)(v24 + 32);
      if (!v24)
      {
        v24 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
        v32 = (_DWORD *)(v24 + 24);
        *(_DWORD *)(v24 + 24) += 2;
        goto LABEL_84;
      }
    }
    v32 = (_DWORD *)(v24 + 24);
    *(_DWORD *)(v24 + 24) += 2;
    if (!v7)
    {
      *v5 = 0;
      v5[32] = 0;
      v21 = 3;
      goto LABEL_521;
    }
LABEL_84:
    v172 = v32;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v175 = v24;
    v185 = a5;
    while (2)
    {
      v36 = *(_WORD *)(v24 + 28);
      __src = v35;
      if ((v36 & 0xF000) == 0x9000)
      {
        if (**(_QWORD **)(v7 + 40) == v24 && (*(_WORD *)(v7 + 28) & 0xF000) != 0x9000)
        {
          v24 = v175;
          if ((*(_BYTE *)(v7 + 22) & 8) == 0)
            goto LABEL_257;
          goto LABEL_96;
        }
        v24 = v175;
      }
      else
      {
        if ((v36 & 4) == 0
          || !*(_QWORD *)(v24 + 80)
          || ((*(unsigned __int8 *)(v7 + 22) ^ *(unsigned __int8 *)(v24 + 22)) & 8) != 0)
        {
          goto LABEL_257;
        }
        v37 = v7;
        do
          v37 = *(_QWORD *)(v37 + 32);
        while (v37 != v24 && v37 != 0);
        if (!v37)
          goto LABEL_257;
LABEL_96:
        v180 = v34;
        *(_DWORD *)(v7 + 24) += 2;
        v195 = (WTF::StringImpl *)v7;
        v196 = 0;
        v39 = WebCore::treeOrder<(WebCore::TreeType)0>((int *)&v195, (uint64_t)v6);
        v40 = v39 != 129 && (char)v39 < 1;
        v41 = v40;
        v42 = v195;
        v195 = 0;
        if (v42)
        {
          if (*((_DWORD *)v42 + 6) == 2)
          {
            if ((*((_WORD *)v42 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v42);
          }
          else
          {
            *((_DWORD *)v42 + 6) -= 2;
          }
        }
        v35 = __src;
        if (!v41)
          goto LABEL_257;
        v43 = *(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL;
        if (v43)
        {
          v44 = *(_WORD *)(v7 + 28);
          if ((v44 & 8) != 0)
          {
            v50 = *(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL;
            if ((*(_BYTE *)(v50 + 0x2D) & 2) != 0)
              v50 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
            v51 = *(_DWORD *)(v50 + 96) & 0x1F;
            v40 = v51 > 0x17;
            v52 = (1 << v51) & 0xA94016;
            if (!v40 && v52 != 0)
              goto LABEL_257;
          }
          if ((*(_BYTE *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            v43 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
          if ((*(_QWORD *)(v43 + 96) & 0x1FLL) != 0x1A)
          {
            if ((v44 & 0x10) == 0
              || (v45 = *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24), v45 != *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
              && v45 != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24)
              && v45 != *(_QWORD *)(WebCore::HTMLNames::meterTag + 24)
              && v45 != *(_QWORD *)(WebCore::HTMLNames::objectTag + 24)
              && v45 != *(_QWORD *)(WebCore::HTMLNames::progressTag + 24)
              && v45 != *(_QWORD *)(WebCore::HTMLNames::styleTag + 24)
              && v45 != *(_QWORD *)(WebCore::HTMLNames::scriptTag + 24)
              && v45 != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
            {
              v173 = v33;
              if ((v44 & 8) == 0
                || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 824))(v7)
                || (v35 = __src,
                    *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::audioTag + 24)))
              {
                v33 = v7;
LABEL_124:
                v46 = *(_WORD *)(v33 + 28);
                if ((v46 & 2) != 0 && (*(_QWORD *)(v33 + 64) & 0xFFFFFFFFFFFFLL) != 0)
                {
                  if ((*(_BYTE *)((*(_QWORD *)(v33 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
                    goto LABEL_534;
                  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v33 + 64) & 0xFFFFFFFFFFFFLL) + 0x20) + 8)
                                 + 120) & 0x30) != 0)
                  {
                    v24 = v175;
                    goto LABEL_126;
                  }
                  v69 = v173;
                  if ((_DWORD)v173 == (_DWORD)v180)
                  {
                    v70 = v173 + ((unint64_t)v173 >> 2);
                    if (v70 >= 0x10)
                      v71 = v70 + 1;
                    else
                      v71 = 16;
                    if (v71 <= (unint64_t)v173 + 1)
                      v72 = v173 + 1;
                    else
                      v72 = v71;
                    v180 = v72;
                    if (v72 >> 29)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1959EEC94);
                    }
                    v73 = (WTF *)WTF::fastMalloc((WTF *)(8 * v72));
                    memcpy(v73, __src, 8 * v173);
                    if (__src)
                    {
                      if (v73 == __src)
                        v74 = 0;
                      else
                        v74 = v73;
                      if (v73 == __src)
                        v75 = 0;
                      else
                        v75 = v180;
                      v180 = v75;
                      WTF::fastFree(__src, a2);
                      v35 = v74;
                    }
                    else
                    {
                      v35 = v73;
                    }
                    v173 = (v173 + 1);
                    *(_DWORD *)(v33 + 24) += 2;
                    *((_QWORD *)v35 + v69) = v33;
                    v46 = *(_WORD *)(v33 + 28);
                  }
                  else
                  {
                    v173 = (v173 + 1);
                    *(_DWORD *)(v33 + 24) += 2;
                    v35 = __src;
                    *((_QWORD *)__src + v69) = v33;
                  }
                  v24 = v175;
                }
                else
                {
LABEL_126:
                  v35 = __src;
                }
                v34 = v180;
                if ((v46 & 4) != 0 && (v7 = *(_QWORD *)(v33 + 80)) != 0 || (v7 = *(_QWORD *)(v33 + 56)) != 0)
                {
LABEL_133:
                  *(_DWORD *)(v7 + 24) += 2;
                }
                else
                {
                  v47 = v33;
                  while (1)
                  {
                    v47 = *(_QWORD *)(v47 + 32);
                    if (!v47)
                      break;
                    v7 = *(_QWORD *)(v47 + 56);
                    if (v7)
                      goto LABEL_133;
                  }
                  v7 = 0;
                }
                if (*(_DWORD *)(v33 + 24) == 2)
                {
                  if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
                  {
                    __srcb = v35;
                    WebCore::Node::removedLastRef((WebCore::Node *)v33);
                    v34 = v180;
                    v35 = __srcb;
                  }
                }
                else
                {
                  *(_DWORD *)(v33 + 24) -= 2;
                }
                v33 = v173;
                if (!v7)
                  goto LABEL_257;
                continue;
              }
            }
          }
        }
        v48 = *(_QWORD *)(v7 + 56);
        if (v48)
        {
LABEL_142:
          *(_DWORD *)(v48 + 24) += 2;
        }
        else
        {
          v49 = v7;
          while (1)
          {
            v49 = *(_QWORD *)(v49 + 32);
            if (!v49)
              break;
            v48 = *(_QWORD *)(v49 + 56);
            if (v48)
              goto LABEL_142;
          }
          v48 = 0;
        }
        if (*(_DWORD *)(v7 + 24) == 2)
        {
          if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v7);
            v35 = __src;
          }
        }
        else
        {
          *(_DWORD *)(v7 + 24) -= 2;
        }
        if (!v48)
        {
          v7 = 0;
          v24 = v175;
          goto LABEL_257;
        }
        v173 = v33;
        while (2)
        {
          v33 = v48;
          v24 = v175;
          v54 = *(_WORD *)(v175 + 28);
          if ((v54 & 0xF000) != 0x9000)
          {
            if ((v54 & 4) == 0
              || !*(_QWORD *)(v175 + 80)
              || ((*(unsigned __int8 *)(v33 + 22) ^ *(unsigned __int8 *)(v175 + 22)) & 8) != 0)
            {
              goto LABEL_255;
            }
            v55 = v33;
            do
              v55 = *(_QWORD *)(v55 + 32);
            while (v55 != v175 && v55 != 0);
            if (!v55)
              goto LABEL_255;
LABEL_167:
            *(_DWORD *)(v33 + 24) += 2;
            v195 = (WTF::StringImpl *)v33;
            v196 = 0;
            v57 = WebCore::treeOrder<(WebCore::TreeType)0>((int *)&v195, (uint64_t)v6);
            v59 = v57 != 129 && (char)v57 < 1;
            v60 = v195;
            v195 = 0;
            if (v60)
            {
              if (*((_DWORD *)v60 + 6) == 2)
              {
                if ((*((_WORD *)v60 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v60);
              }
              else
              {
                *((_DWORD *)v60 + 6) -= 2;
              }
            }
            v35 = __src;
            if (v59)
            {
              v61 = *(_QWORD *)(v33 + 64) & 0xFFFFFFFFFFFFLL;
              if (v61)
              {
                v62 = *(_WORD *)(v33 + 28);
                if ((v62 & 8) != 0)
                {
                  v65 = *(_QWORD *)(v33 + 64) & 0xFFFFFFFFFFFFLL;
                  if ((*(_BYTE *)(v65 + 0x2D) & 2) != 0)
                    v65 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v33 + 64) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
                  v66 = *(_DWORD *)(v65 + 96) & 0x1F;
                  v40 = v66 > 0x17;
                  v67 = (1 << v66) & 0xA94016;
                  if (!v40 && v67 != 0)
                  {
LABEL_255:
                    v7 = v33;
                    goto LABEL_256;
                  }
                }
                if ((*(_BYTE *)((*(_QWORD *)(v33 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                  v61 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v33 + 64) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
                if ((*(_QWORD *)(v61 + 96) & 0x1FLL) != 0x1A)
                {
                  if ((v62 & 0x10) == 0
                    || (v63 = *(_QWORD *)(*(_QWORD *)(v33 + 96) + 24),
                        v63 != *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
                    && v63 != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24)
                    && v63 != *(_QWORD *)(WebCore::HTMLNames::meterTag + 24)
                    && v63 != *(_QWORD *)(WebCore::HTMLNames::objectTag + 24)
                    && v63 != *(_QWORD *)(WebCore::HTMLNames::progressTag + 24)
                    && v63 != *(_QWORD *)(WebCore::HTMLNames::styleTag + 24)
                    && v63 != *(_QWORD *)(WebCore::HTMLNames::scriptTag + 24)
                    && v63 != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
                  {
                    if ((v62 & 8) == 0)
                      goto LABEL_124;
                    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v33 + 824))(v33))
                      goto LABEL_124;
                    v35 = __src;
                    if (*(_QWORD *)(*(_QWORD *)(v33 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::audioTag + 24))
                      goto LABEL_124;
                  }
                }
              }
              v48 = *(_QWORD *)(v33 + 56);
              if (v48)
              {
LABEL_198:
                *(_DWORD *)(v48 + 24) += 2;
              }
              else
              {
                v64 = v33;
                while (1)
                {
                  v64 = *(_QWORD *)(v64 + 32);
                  if (!v64)
                    break;
                  v48 = *(_QWORD *)(v64 + 56);
                  if (v48)
                    goto LABEL_198;
                }
                v48 = 0;
              }
              if (*(_DWORD *)(v33 + 24) == 2)
              {
                if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)v33);
                  v35 = __src;
                }
              }
              else
              {
                *(_DWORD *)(v33 + 24) -= 2;
              }
              if (!v48)
              {
                v7 = 0;
                LODWORD(v33) = v173;
                v24 = v175;
                goto LABEL_257;
              }
              continue;
            }
            v7 = v33;
LABEL_256:
            LODWORD(v33) = v173;
LABEL_257:
            v204 = 0;
            __srca = v35;
            if ((_DWORD)v33)
            {
              v76 = 0;
              v171 = v33;
              v200 = 0;
              v201 = 0;
              v202 = 0;
              v203 = 1;
              v174 = v33;
              v77 = 8 * v33;
              while (1)
              {
                v78 = *(_QWORD *)((char *)v35 + v76);
                v79 = *(_QWORD *)(v78 + 80);
                if (v202)
                  v80 = 0;
                else
                  v80 = v201 == 0;
                if (v80)
                {
                  if (v79)
                    *(_DWORD *)v79 += 2;
                  v81 = v200;
                  v200 = (WTF::StringImpl *)v79;
                  if (v81)
                  {
                    if (*(_DWORD *)v81 == 2)
                    {
                      WTF::StringImpl::destroy(v81, a2);
                      v35 = __srca;
                      v79 = *(_QWORD *)(v78 + 80);
                    }
                    else
                    {
                      *(_DWORD *)v81 -= 2;
                    }
                  }
                  v82 = v185;
                  if (v79)
                    LODWORD(v79) = *(_DWORD *)(v79 + 4);
                  v202 = v79;
                  goto LABEL_272;
                }
                if (v79)
                {
                  v82 = v185;
                  if ((*(_BYTE *)(v79 + 16) & 4) == 0)
                  {
                    WTF::StringBuilder::append();
                    goto LABEL_277;
                  }
                }
                else
                {
                  v82 = v185;
                }
                WTF::StringBuilder::append();
LABEL_277:
                v35 = __srca;
LABEL_272:
                v76 += 8;
                if (v77 == v76)
                {
                  v83 = v200;
                  if (v200
                    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v200),
                        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v200),
                        (v83 = v200) != 0))
                  {
                    *(_DWORD *)v83 += 2;
                  }
                  v84 = v204;
                  v204 = v83;
                  if (v84)
                  {
                    if (*(_DWORD *)v84 == 2)
                      WTF::StringImpl::destroy(v84, a2);
                    else
                      *(_DWORD *)v84 -= 2;
                  }
                  WebCore::foldQuoteMarks((WebCore *)&v204, &v195);
                  v86 = v195;
                  v195 = 0;
                  v87 = v204;
                  v204 = v86;
                  if (v87)
                  {
                    v88 = *(_DWORD *)v87 - 2;
                    if (*(_DWORD *)v87 != 2)
                      goto LABEL_289;
                    WTF::StringImpl::destroy(v87, v85);
                    v87 = v195;
                    v195 = 0;
                    if (v87)
                    {
                      v88 = *(_DWORD *)v87 - 2;
                      if (*(_DWORD *)v87 == 2)
                        WTF::StringImpl::destroy(v87, v126);
                      else
LABEL_289:
                        *(_DWORD *)v87 = v88;
                    }
                  }
                  WebCore::foldQuoteMarks(v187, &v199);
                  LOBYTE(v189) = 1;
                  v192 = 0;
                  v193 = 0;
                  v89 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
                  *(_QWORD *)v89 = off_1E33ADFB8;
                  *((_QWORD *)v89 + 1) = &v192;
                  *((_QWORD *)v89 + 2) = &v189;
                  v195 = v89;
                  WebCore::forEachMatch(a3, (WebCore *)&v199, v186, &v195);
                  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v89 + 8))(v89);
                  WebCore::rangeForMatch((uint64_t)&v195, a3, v186, (int)v192, v193);
                  v90 = v197;
                  v91 = v196;
                  v92 = v198;
                  if (v195 != v197 || v196 != v198)
                  {
                    *(_QWORD *)v5 = v195;
                    *((_DWORD *)v5 + 2) = v91;
                    *((_QWORD *)v5 + 2) = v90;
                    *((_DWORD *)v5 + 6) = v92;
                    v120 = 1;
                    v5[32] = 1;
                    v195 = 0;
                    v197 = 0;
                    v35 = __srca;
                    LODWORD(v33) = v174;
                    goto LABEL_427;
                  }
                  v35 = __srca;
                  LOBYTE(v192) = 0;
                  v194 = 0;
                  LOBYTE(v189) = 0;
                  v191 = 0;
LABEL_293:
                  if (v199)
                    a2 = *(WebCore **)(v199 + 8);
                  else
                    a2 = 0;
                  if (!v204)
                    goto LABEL_399;
                  IgnoringASCIICase = WTF::StringImpl::findIgnoringASCIICase();
                  v35 = __srca;
                  if (IgnoringASCIICase == -1)
                    goto LABEL_399;
                  v94 = IgnoringASCIICase;
                  v95 = 0;
                  v96 = 8 * v171;
                  v97 = (unint64_t *)__srca;
                  while (1)
                  {
                    v98 = *v97;
                    v99 = *(_QWORD *)(*v97 + 80);
                    if (v99)
                    {
                      v100 = *(_DWORD *)(v99 + 4);
                      if (v100 + v95 > IgnoringASCIICase)
                        goto LABEL_304;
                    }
                    else
                    {
                      if (IgnoringASCIICase < v95)
                      {
LABEL_304:
                        v102 = 0;
                        *(_DWORD *)(v98 + 24) += 2;
                        v177 = IgnoringASCIICase - v95;
                        v101 = 1;
LABEL_305:
                        if (v194 == v101)
                        {
                          if (v194)
                          {
                            v103 = v192;
                            v192 = (WebCore::Node *)v98;
                            if (v103)
                            {
                              if (*((_DWORD *)v103 + 6) == 2)
                              {
                                if ((*((_WORD *)v103 + 15) & 0x400) == 0)
                                {
                                  WebCore::Node::removedLastRef(v103);
                                  v35 = __srca;
                                }
                              }
                              else
                              {
                                *((_DWORD *)v103 + 6) -= 2;
                              }
                            }
                            v98 = 0;
                            LODWORD(v193) = v177;
                          }
                        }
                        else if (v194)
                        {
                          v104 = v192;
                          v192 = 0;
                          if (v104)
                          {
                            if (*((_DWORD *)v104 + 6) == 2)
                            {
                              if ((*((_WORD *)v104 + 15) & 0x400) == 0)
                              {
                                v179 = v98;
                                WebCore::Node::removedLastRef(v104);
                                v98 = v179;
                                v35 = __srca;
                              }
                            }
                            else
                            {
                              *((_DWORD *)v104 + 6) -= 2;
                            }
                          }
                          v194 = 0;
                        }
                        else
                        {
                          v192 = (WebCore::Node *)v98;
                          LODWORD(v193) = v177;
                          v194 = 1;
                          v98 = 0;
                        }
                        if ((v102 & 1) == 0 && v98)
                        {
                          if (*(_DWORD *)(v98 + 24) == 2)
                          {
                            if ((*(_WORD *)(v98 + 30) & 0x400) == 0)
                              WebCore::Node::removedLastRef((WebCore::Node *)v98);
                            v98 = 0;
                            v35 = __srca;
                          }
                          else
                          {
                            *(_DWORD *)(v98 + 24) -= 2;
                            v98 = 0;
                          }
                        }
                        v178 = v98;
                        if (v199)
                          v105 = *(_DWORD *)(v199 + 4);
                        else
                          v105 = 0;
                        v106 = 0;
                        v107 = v105 + v94;
                        v108 = 8 * v171;
                        v109 = v35;
                        while (2)
                        {
                          v110 = *(WebCore::Node **)v109;
                          v111 = *(_QWORD *)(*(_QWORD *)v109 + 80);
                          if (v111)
                          {
                            v112 = *(_DWORD *)(v111 + 4);
                            if (v106 + v112 + 1 > v107)
                              goto LABEL_330;
LABEL_326:
                            v106 += v112;
                            v109 = (WTF *)((char *)v109 + 8);
                            v108 -= 8;
                            if (!v108)
                            {
                              v113 = 0;
                              v181 = (WebCore::Node *)(v180 & 0xFFFFFFFFFFFFFF00);
                              v114 = 1;
                              goto LABEL_331;
                            }
                            continue;
                          }
                          break;
                        }
                        if (v106 + 1 <= v107)
                        {
                          v112 = 0;
                          goto LABEL_326;
                        }
LABEL_330:
                        v114 = 0;
                        *((_DWORD *)v110 + 6) += 2;
                        v176 = v107 - v106;
                        v113 = 1;
                        v181 = v110;
LABEL_331:
                        if (v191 != v113)
                        {
                          if (!v191)
                          {
                            v189 = v181;
                            v190 = v176;
                            v191 = 1;
                            v116 = 0;
                            goto LABEL_344;
                          }
                          v117 = v189;
                          v189 = 0;
                          if (v117)
                          {
                            if (*((_DWORD *)v117 + 6) == 2)
                            {
                              if ((*((_WORD *)v117 + 15) & 0x400) == 0)
                              {
                                WebCore::Node::removedLastRef(v117);
                                v35 = __srca;
                              }
                            }
                            else
                            {
                              *((_DWORD *)v117 + 6) -= 2;
                            }
                          }
                          v191 = 0;
LABEL_342:
                          v116 = v181;
                          goto LABEL_344;
                        }
                        if (!v191)
                          goto LABEL_342;
                        v115 = v189;
                        v189 = v181;
                        if (v115)
                        {
                          if (*((_DWORD *)v115 + 6) == 2)
                          {
                            if ((*((_WORD *)v115 + 15) & 0x400) == 0)
                            {
                              WebCore::Node::removedLastRef(v115);
                              v35 = __srca;
                            }
                          }
                          else
                          {
                            *((_DWORD *)v115 + 6) -= 2;
                          }
                        }
                        v116 = 0;
                        v190 = v176;
LABEL_344:
                        if ((v114 & 1) != 0)
                        {
                          v180 = (unint64_t)v116;
                          goto LABEL_350;
                        }
                        if (v116)
                        {
                          if (*((_DWORD *)v116 + 6) != 2)
                          {
                            *((_DWORD *)v116 + 6) -= 2;
                            goto LABEL_349;
                          }
                          if ((*((_WORD *)v116 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v116);
                          v180 = 0;
                          v35 = __srca;
                        }
                        else
                        {
LABEL_349:
                          v180 = 0;
                        }
LABEL_350:
                        if (a4)
                        {
                          WTF::wordBreakIterator();
                          isBoundary = ubrk_isBoundary();
                          v35 = __srca;
                          if (!isBoundary)
                            goto LABEL_293;
                        }
                        if (v82)
                        {
                          WTF::wordBreakIterator();
                          v119 = ubrk_isBoundary();
                          v35 = __srca;
                          if (!v119)
                            goto LABEL_293;
                        }
                        v121 = *((_QWORD *)v35 + v171 - 1);
                        if (v121 == *v6)
                        {
                          v123 = *(_WORD *)(v121 + 28);
                          if (v121 && (v123 & 1) != 0)
                          {
                            v125 = *(_QWORD *)(v121 + 80);
                            if (v125)
                              LODWORD(v125) = *(_DWORD *)(v125 + 4);
                          }
                          else if ((v123 & 4) != 0 && (v124 = *(_QWORD *)(v121 + 80)) != 0)
                          {
                            LODWORD(v125) = 0;
                            do
                            {
                              LODWORD(v125) = v125 + 1;
                              v124 = *(_QWORD *)(v124 + 56);
                            }
                            while (v124);
                          }
                          else
                          {
                            LODWORD(v125) = 0;
                          }
                          v122 = *((_DWORD *)a3 + 6) - v125;
                        }
                        else
                        {
                          v122 = 0;
                        }
                        v127 = v199;
                        if (v199)
                          v127 = *(_DWORD *)(v199 + 4);
                        v128 = (int)v204;
                        if (v204)
                          v128 = *((_DWORD *)v204 + 1);
                        if (v127 + v94 > (v128 + v122))
                        {
LABEL_399:
                          v120 = 0;
                          *v5 = 0;
                          goto LABEL_400;
                        }
                        LODWORD(v33) = v174;
                        if (!v194)
                          goto LABEL_415;
                        if (!v191)
                          goto LABEL_415;
                        v129 = WebCore::treeOrder<(WebCore::TreeType)0>((int *)a3, (uint64_t)&v192);
                        v35 = __srca;
                        if (v129 == 129)
                          goto LABEL_415;
                        if ((char)v129 > 0)
                          goto LABEL_415;
                        v130 = WebCore::treeOrder<(WebCore::TreeType)0>((int *)&v192, (uint64_t)v6);
                        v35 = __srca;
                        if (v130 == 129 || (char)v130 > 0)
                          goto LABEL_415;
                        if (!v191)
                        {
                          std::__throw_bad_optional_access[abi:sn180100]();
                          JUMPOUT(0x1959EEC9CLL);
                        }
                        v131 = WebCore::treeOrder<(WebCore::TreeType)0>((int *)a3, (uint64_t)&v189);
                        v35 = __srca;
                        if (v131 == 129
                          || (char)v131 > 0
                          || (v132 = WebCore::treeOrder<(WebCore::TreeType)0>((int *)&v189, (uint64_t)v6),
                              v35 = __srca,
                              v132 == 129)
                          || (char)v132 >= 1)
                        {
LABEL_415:
                          v120 = 0;
                          *v5 = 0;
                          goto LABEL_416;
                        }
                        if (v194 && v191)
                        {
                          v133 = v192;
                          *((_DWORD *)v192 + 6) += 2;
                          v134 = v193;
                          v135 = v189;
                          *((_DWORD *)v189 + 6) += 2;
                          v136 = v190;
                          *(_QWORD *)v5 = v133;
                          *((_DWORD *)v5 + 2) = v134;
                          *((_QWORD *)v5 + 2) = v135;
                          *((_DWORD *)v5 + 6) = v136;
                          v120 = 1;
                          v35 = __srca;
LABEL_400:
                          LODWORD(v33) = v174;
LABEL_416:
                          v5[32] = v120;
                          if (v191)
                          {
                            v137 = v189;
                            v189 = 0;
                            if (v137)
                            {
                              if (*((_DWORD *)v137 + 6) == 2)
                              {
                                if ((*((_WORD *)v137 + 15) & 0x400) == 0)
                                {
                                  WebCore::Node::removedLastRef(v137);
                                  v35 = __srca;
                                }
                              }
                              else
                              {
                                *((_DWORD *)v137 + 6) -= 2;
                              }
                            }
                          }
                          if (v194)
                          {
                            v138 = v192;
                            v192 = 0;
                            if (v138)
                            {
                              if (*((_DWORD *)v138 + 6) == 2)
                              {
                                if ((*((_WORD *)v138 + 15) & 0x400) == 0)
                                {
                                  WebCore::Node::removedLastRef(v138);
                                  v35 = __srca;
                                }
                              }
                              else
                              {
                                *((_DWORD *)v138 + 6) -= 2;
                              }
                            }
                          }
                          v139 = v197;
                          v197 = 0;
                          if (v139)
                          {
                            if (*((_DWORD *)v139 + 6) == 2)
                            {
                              if ((*((_WORD *)v139 + 15) & 0x400) == 0)
                                WebCore::Node::removedLastRef(v139);
                              v35 = __srca;
                            }
                            else
                            {
                              *((_DWORD *)v139 + 6) -= 2;
                            }
                          }
LABEL_427:
                          v140 = v195;
                          v195 = 0;
                          if (v140)
                          {
                            if (*((_DWORD *)v140 + 6) == 2)
                            {
                              if ((*((_WORD *)v140 + 15) & 0x400) == 0)
                              {
                                WebCore::Node::removedLastRef(v140);
                                v35 = __srca;
                              }
                            }
                            else
                            {
                              *((_DWORD *)v140 + 6) -= 2;
                            }
                          }
                          v141 = (WTF::StringImpl *)v199;
                          v199 = 0;
                          if (v141)
                          {
                            if (*(_DWORD *)v141 == 2)
                            {
                              WTF::StringImpl::destroy(v141, a2);
                              v35 = __srca;
                            }
                            else
                            {
                              *(_DWORD *)v141 -= 2;
                            }
                          }
                          v142 = v201;
                          v201 = 0;
                          if (v142)
                          {
                            if (*(_DWORD *)v142 == 2)
                            {
                              WTF::StringImpl::destroy(v142, a2);
                              v35 = __srca;
                            }
                            else
                            {
                              *(_DWORD *)v142 -= 2;
                            }
                          }
                          v143 = v200;
                          v200 = 0;
                          if (v143)
                          {
                            if (*(_DWORD *)v143 == 2)
                            {
                              WTF::StringImpl::destroy(v143, a2);
                              v35 = __srca;
                            }
                            else
                            {
                              *(_DWORD *)v143 -= 2;
                            }
                          }
                          v144 = v204;
                          v204 = 0;
                          if (v144)
                          {
                            if (*(_DWORD *)v144 != 2)
                            {
                              *(_DWORD *)v144 -= 2;
                              goto LABEL_442;
                            }
                            WTF::StringImpl::destroy(v144, a2);
                            v35 = __srca;
                            if (!v120)
                            {
LABEL_445:
                              if (v7)
                                goto LABEL_446;
                              v145 = v33;
                              v21 = 3;
LABEL_509:
                              v168 = 8 * v145;
                              v169 = v35;
                              do
                              {
                                v170 = *(_QWORD *)v169;
                                *(_QWORD *)v169 = 0;
                                if (v170)
                                {
                                  if (*(_DWORD *)(v170 + 24) == 2)
                                  {
                                    if ((*(_WORD *)(v170 + 30) & 0x400) == 0)
                                    {
                                      WebCore::Node::removedLastRef((WebCore::Node *)v170);
                                      v35 = __srca;
                                    }
                                  }
                                  else
                                  {
                                    *(_DWORD *)(v170 + 24) -= 2;
                                  }
                                }
                                v169 = (WTF *)((char *)v169 + 8);
                                v168 -= 8;
                              }
                              while (v168);
LABEL_517:
                              v24 = v175;
LABEL_518:
                              if (v35)
                                WTF::fastFree(v35, a2);
                              v32 = v172;
                              if (v24)
                              {
LABEL_521:
                                if (*v32 == 2)
                                {
                                  if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
                                    WebCore::Node::removedLastRef((WebCore::Node *)v24);
                                }
                                else
                                {
                                  *v32 -= 2;
                                }
                              }
                              if (!v7)
LABEL_44:
                                __asm { BR              X9 }
LABEL_42:
                              if (*(_DWORD *)(v7 + 24) == 2)
                              {
                                if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
                                  WebCore::Node::removedLastRef((WebCore::Node *)v7);
                              }
                              else
                              {
                                *(_DWORD *)(v7 + 24) -= 2;
                              }
                              goto LABEL_44;
                            }
                          }
                          else
                          {
LABEL_442:
                            if (!v120)
                              goto LABEL_445;
                          }
                          v145 = v33;
                          v21 = 1;
                          goto LABEL_509;
                        }
                        __break(1u);
LABEL_534:
                        __break(0xC471u);
                        JUMPOUT(0x1959EEC8CLL);
                      }
                      v100 = 0;
                    }
                    v95 += v100;
                    ++v97;
                    v96 -= 8;
                    if (!v96)
                    {
                      v101 = 0;
                      v98 = v178 & 0xFFFFFFFFFFFFFF00;
                      v102 = 1;
                      goto LABEL_305;
                    }
                  }
                }
              }
            }
            *v5 = 0;
            v5[32] = 0;
            if (!v7)
            {
              v21 = 3;
              goto LABEL_518;
            }
LABEL_446:
            v146 = *a3;
            if (v7 != *a3)
            {
              v147 = 0;
              v148 = v7;
              do
              {
                v148 = *(_QWORD *)(v148 + 32);
                ++v147;
              }
              while (v148);
              v149 = 0;
              v150 = v147 - 1;
              v151 = *a3;
              do
              {
                v151 = *(_QWORD *)(v151 + 32);
                ++v149;
              }
              while (v151);
              v152 = v149 - 1;
              v153 = v149 - v147;
              v154 = v147 - v149;
              if (v150 >= v152)
                v155 = v7;
              else
                v155 = *a3;
              if (v150 >= v152)
                v156 = *a3;
              else
                v156 = v7;
              if (v150 >= v152)
                v153 = v154;
              if (v153)
              {
                v167 = v155;
                do
                {
                  v155 = *(_QWORD *)(v167 + 32);
                  v157 = v167;
                  v167 = v155;
                  --v153;
                }
                while (v153);
              }
              else
              {
                v157 = 0;
              }
              if (v155 == v156)
              {
                v159 = 0;
              }
              else
              {
                v158 = v156;
                v156 = v155;
                do
                {
                  v157 = v156;
                  v159 = v158;
                  v156 = *(_QWORD *)(v156 + 32);
                  v158 = *(_QWORD *)(v158 + 32);
                }
                while (v156 != v158);
              }
              v160 = v150 >= v152;
              v161 = v150 < v152 ? v159 : v157;
              v162 = v160 ? v159 : v157;
              if (v156 && v161 != 0)
              {
                if (v162)
                {
                  v164 = *(unsigned __int16 *)(v161 + 28);
                  v165 = *(unsigned __int16 *)(v162 + 28);
                  if (((v164 | v165) & 0x80) != 0)
                  {
                    if ((v165 & 0x80) == 0 || (v164 & 0x80) != 0)
                      goto LABEL_485;
                  }
                  else
                  {
                    if (v161 == v162)
                      goto LABEL_485;
                    do
                      v161 = *(_QWORD *)(v161 + 56);
                    while (v161 != v162 && v161 != 0);
                    if (v161)
                      goto LABEL_485;
                  }
                }
                v145 = v33;
                *(_DWORD *)(v7 + 24) += 2;
                *a3 = v7;
                if (v146)
                {
                  if (*(_DWORD *)(v146 + 24) == 2)
                  {
                    if ((*(_WORD *)(v146 + 30) & 0x400) == 0)
                    {
                      WebCore::Node::removedLastRef((WebCore::Node *)v146);
                      v35 = __srca;
                    }
                  }
                  else
                  {
                    *(_DWORD *)(v146 + 24) -= 2;
                  }
                }
                v21 = 0;
                *((_DWORD *)a3 + 2) = 0;
                if (v145)
                  goto LABEL_509;
                goto LABEL_517;
              }
            }
LABEL_485:
            *v5 = 0;
            v5[32] = 0;
            v145 = v33;
            v21 = 1;
            if (v145)
              goto LABEL_509;
            goto LABEL_517;
          }
          break;
        }
        if (**(_QWORD **)(v33 + 40) == v175 && (*(_WORD *)(v33 + 28) & 0xF000) != 0x9000)
        {
          v24 = v175;
          v35 = __src;
          if ((*(_BYTE *)(v33 + 22) & 8) == 0)
            goto LABEL_255;
          goto LABEL_167;
        }
        v7 = v33;
        LODWORD(v33) = v173;
        v24 = v175;
      }
      break;
    }
    v35 = __src;
    goto LABEL_257;
  }
  *result = 0;
  result[32] = 0;
  return result;
}

WTF::StringImpl *WebCore::FragmentDirectiveRangeFinder::advanceRangeStartToNextNonWhitespace(WTF::StringImpl *this, WebCore::SimpleRange *a2, __n128 a3, uint64_t a4, uint64_t a5, WTF::StringBuilder *a6)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  unsigned int v33;
  __int16 v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;

  v6 = this;
  v7 = *(_QWORD *)a2;
  *(_DWORD *)(v7 + 24) = *(_DWORD *)(*(_QWORD *)a2 + 24) + 2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = *((_QWORD *)a2 + 2);
  *(_DWORD *)(v9 + 24) += 2;
  v10 = *((_DWORD *)a2 + 6);
  if (v7 == v9 && v8 == v10)
  {
LABEL_129:
    *(_QWORD *)v6 = v7;
    *((_DWORD *)v6 + 2) = v8;
    *((_QWORD *)v6 + 2) = v7;
    *((_DWORD *)v6 + 6) = v10;
    *((_BYTE *)v6 + 32) = 1;
  }
  else
  {
    while (1)
    {
      *(_DWORD *)(v7 + 24) += 2;
      v12 = *(_WORD *)(v7 + 28);
      if (v7 && (v12 & 1) != 0)
      {
        v14 = *(_QWORD *)(v7 + 80);
        if (v14)
          LODWORD(v14) = *(_DWORD *)(v14 + 4);
      }
      else if ((v12 & 4) != 0 && (v13 = *(_QWORD *)(v7 + 80)) != 0)
      {
        LODWORD(v14) = 0;
        do
        {
          LODWORD(v14) = v14 + 1;
          v13 = *(_QWORD *)(v13 + 56);
        }
        while (v13);
      }
      else
      {
        LODWORD(v14) = 0;
      }
      v15 = v7;
      if (v8 == (_DWORD)v14)
      {
        if ((v12 & 4) == 0 || (v16 = *(_QWORD *)(v7 + 80)) == 0)
        {
          v16 = *(_QWORD *)(v7 + 56);
          if (!v16)
          {
            v17 = v7;
            do
            {
              v17 = *(_QWORD *)(v17 + 32);
              if (!v17)
                goto LABEL_77;
              v16 = *(_QWORD *)(v17 + 56);
            }
            while (!v16);
          }
        }
LABEL_51:
        *(_DWORD *)(v16 + 24) += 2;
        if (*(_DWORD *)(v7 + 24) == 2)
        {
          if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
            this = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v7);
          v8 = 0;
        }
        else
        {
          v8 = 0;
          *(_DWORD *)(v7 + 24) -= 2;
        }
        v24 = 2;
      }
      else
      {
        while (1)
        {
          v18 = *(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL;
          if (!v18)
            break;
          if ((*(_BYTE *)((*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            v18 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
          if ((*(_QWORD *)(v18 + 96) & 0x1FLL) == 0x1A)
            break;
          v19 = *(_WORD *)(v15 + 28);
          if ((v19 & 0x10) != 0)
          {
            v20 = *(_QWORD *)(*(_QWORD *)(v15 + 96) + 24);
            if (v20 == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24)
              || v20 == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24)
              || v20 == *(_QWORD *)(WebCore::HTMLNames::meterTag + 24)
              || v20 == *(_QWORD *)(WebCore::HTMLNames::objectTag + 24)
              || v20 == *(_QWORD *)(WebCore::HTMLNames::progressTag + 24)
              || v20 == *(_QWORD *)(WebCore::HTMLNames::styleTag + 24)
              || v20 == *(_QWORD *)(WebCore::HTMLNames::scriptTag + 24)
              || v20 == *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
            {
              break;
            }
          }
          if ((v19 & 8) != 0)
          {
            this = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 824))(v15);
            if ((_DWORD)this)
            {
              if (*(_QWORD *)(*(_QWORD *)(v15 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::audioTag + 24))
                break;
            }
          }
          if ((*(_WORD *)(v15 + 28) & 0x80) != 0)
          {
            v22 = *(_QWORD *)(v15 + 200);
            if (!v22)
            {
LABEL_65:
              v25 = *(_WORD *)(v7 + 28);
              if ((v25 & 2) == 0)
                goto LABEL_143;
              v26 = *(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL;
              if (!v26)
                goto LABEL_143;
              if ((*(_BYTE *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                v26 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
              if ((*(_BYTE *)(v26 + 120) & 0x30) != 0)
              {
LABEL_143:
                if ((v25 & 4) != 0)
                {
                  v16 = *(_QWORD *)(v7 + 80);
                  if (v16)
                    goto LABEL_51;
                }
                v16 = *(_QWORD *)(v7 + 56);
                if (v16)
                  goto LABEL_51;
                v27 = v7;
                while (1)
                {
                  v27 = *(_QWORD *)(v27 + 32);
                  if (!v27)
                    goto LABEL_77;
                  v16 = *(_QWORD *)(v27 + 56);
                  if (v16)
                    goto LABEL_51;
                }
              }
              WebCore::Node::textContent((WebCore::Node *)v7, 0, a6, &v42, a3);
              WTF::String::substringSharingImpl((WTF::String *)&v42);
              v29 = MEMORY[0x19AEA53F4](v41, "&nbsp;", 6);
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, v28);
                else
                  *(_DWORD *)v41 -= 2;
              }
              if (v29)
                LODWORD(v30) = v8 + 6;
              else
                LODWORD(v30) = v8;
              WTF::String::substringSharingImpl((WTF::String *)&v42);
              v41 = 0;
              if (MEMORY[0x19AEA53F4](0, "&nbsp", 5))
                v30 = (v30 + 5);
              else
                v30 = v30;
              if (v42 && *((_DWORD *)v42 + 1) > v30)
              {
                v32 = *((_QWORD *)v42 + 1);
                if ((*((_BYTE *)v42 + 16) & 4) != 0)
                  v33 = *(unsigned __int8 *)(v32 + v30);
                else
                  v33 = *(unsigned __int16 *)(v32 + 2 * v30);
                if (v33 > 0x7F)
                {
                  if (!u_isUWhiteSpace(v33))
                    goto LABEL_117;
                }
                else if (v33 - 9 >= 5 && v33 != 32)
                {
                  goto LABEL_117;
                }
                v34 = *(_WORD *)(v7 + 28);
                if (v7 && (v34 & 1) != 0)
                {
                  v37 = *(_QWORD *)(v7 + 80);
                  if (v37)
                  {
                    v36 = *(_DWORD *)(v37 + 4);
                    goto LABEL_106;
                  }
                }
                else if ((v34 & 4) != 0)
                {
                  v35 = *(_QWORD *)(v7 + 80);
                  if (v35)
                  {
                    v36 = 0;
                    do
                    {
                      ++v36;
                      v35 = *(_QWORD *)(v35 + 56);
                    }
                    while (v35);
LABEL_106:
                    v38 = v30 + 1;
                    if ((int)v30 + 1 < v36)
                    {
                      v39 = *(_DWORD *)(v7 + 24);
                      *(_DWORD *)(v7 + 24) = v39 + 2;
                      if (v39)
                      {
                        v24 = 0;
                        *(_DWORD *)(v7 + 24) = v39;
                        v16 = v7;
                        v8 = v38;
                      }
                      else
                      {
                        v8 = v30 + 1;
                        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v7);
                        v24 = 0;
                        v16 = v7;
                      }
                      goto LABEL_118;
                    }
                  }
                }
                if ((v34 & 4) != 0 && (v16 = *(_QWORD *)(v7 + 80)) != 0 || (v16 = *(_QWORD *)(v7 + 56)) != 0)
                {
LABEL_115:
                  *(_DWORD *)(v16 + 24) += 2;
                  if (*(_DWORD *)(v7 + 24) == 2)
                  {
                    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v7);
                    v8 = 0;
                    v24 = 0;
                  }
                  else
                  {
                    v8 = 0;
                    v24 = 0;
                    *(_DWORD *)(v7 + 24) -= 2;
                  }
                  goto LABEL_118;
                }
                v40 = v7;
                while (1)
                {
                  v40 = *(_QWORD *)(v40 + 32);
                  if (!v40)
                    break;
                  v16 = *(_QWORD *)(v40 + 56);
                  if (v16)
                    goto LABEL_115;
                }
              }
LABEL_117:
              v16 = 0;
              *(_QWORD *)v6 = v7;
              *((_DWORD *)v6 + 2) = v8;
              *((_QWORD *)v6 + 2) = v9;
              *((_DWORD *)v6 + 6) = v10;
              v24 = 1;
              *((_BYTE *)v6 + 32) = 1;
              v9 = 0;
LABEL_118:
              this = v42;
              v42 = 0;
              if (this)
              {
                if (*(_DWORD *)this == 2)
                  this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v31);
                else
                  *(_DWORD *)this -= 2;
              }
              goto LABEL_54;
            }
            v21 = (uint64_t *)(v22 + 8);
          }
          else
          {
            v21 = (uint64_t *)(v15 + 32);
          }
          v15 = *v21;
          if (!*v21)
            goto LABEL_65;
        }
        if ((*(_WORD *)(v7 + 28) & 4) != 0)
        {
          v16 = *(_QWORD *)(v7 + 80);
          if (v16)
            goto LABEL_51;
        }
        v16 = *(_QWORD *)(v7 + 56);
        if (v16)
          goto LABEL_51;
        v23 = v7;
        while (1)
        {
          v23 = *(_QWORD *)(v23 + 32);
          if (!v23)
            break;
          v16 = *(_QWORD *)(v23 + 56);
          if (v16)
            goto LABEL_51;
        }
LABEL_77:
        v16 = 0;
        *(_QWORD *)v6 = v7;
        *((_DWORD *)v6 + 2) = v8;
        *((_QWORD *)v6 + 2) = v9;
        *((_DWORD *)v6 + 6) = v10;
        v24 = 1;
        *((_BYTE *)v6 + 32) = 1;
        v9 = 0;
      }
LABEL_54:
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          this = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v7);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
      if ((v24 | 2) != 2)
        break;
      v7 = v16;
      if (v16 == v9)
      {
        v7 = v16;
        if (v8 == v10)
        {
          v7 = v16;
          v8 = v10;
          goto LABEL_129;
        }
      }
    }
    if (v9)
    {
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          this = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v9);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
    }
    if (v16)
    {
      if (*(_DWORD *)(v16 + 24) == 2)
      {
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v16);
      }
      else
      {
        *(_DWORD *)(v16 + 24) -= 2;
      }
    }
  }
  return this;
}

unsigned int *WebCore::FragmentDirectiveRangeFinder::findRangesFromTextDirectives@<X0>(unsigned int *result@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;
  WebCore::Node *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringBuilder *v22;
  __n128 v23;
  WebCore::Node *v24;
  unsigned int v25;
  WebCore::Node *v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  WebCore::Node *v30;
  WebCore::Node *v31;
  int v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  WebCore::Node *v35;
  int v36;
  WebCore::Node *v37;
  int v38;
  uint64_t v39;
  WebCore::Node *v40;
  int v41;
  WebCore::Node *v42;
  uint64_t v43;
  WebCore::Node *v44;
  WebCore::Node *v45;
  WebCore::Node *v46;
  uint64_t v47;
  WebCore::Node *v48;
  WebCore::Node *v49;
  WebCore::Node *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WebCore::Node *v54;
  WebCore::Node *v55;
  WebCore::Node *v56;
  WebCore::Node *v57;
  WebCore::Node *v58;
  WebCore::Node *v59;
  uint64_t v60;
  WebCore::Node *v61;
  int v62;
  WebCore::Node *v63;
  int v64;
  WebCore::Node *v65;
  int v66;
  WebCore::Node *v68;
  WebCore::Node *v69;
  WebCore::Node *v70;
  int v71;
  WebCore::Node *v73;
  int v74;
  WebCore::Node *v75;
  WebCore::Node *v76;
  WebCore::Node *v77;
  int v78;
  WebCore::Node *v79;
  WebCore::Node *v80;
  WebCore::Node *v81;
  WebCore::Node *v82;
  WebCore::Node *v83;
  WebCore::Node *v84;
  int v85;
  WebCore::Node *v87;
  WebCore::Node *v88;
  WebCore::Node *v89;
  WebCore::Node *v90;
  WebCore::Node *v91;
  uint64_t v92;
  WebCore::Node *v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WebCore::Node *v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  WebCore::Node *v110;
  WebCore::Node *v111;
  WebCore::Node *v112;
  uint64_t v113;
  uint64_t v115;
  WTF::StringImpl **v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WebCore::Node *v124;
  int v125;
  WebCore::Node *v126;
  int v127;
  char v128;
  WebCore::Node *v129;
  int v130;
  char v131;
  WebCore::Node *v132;
  int v133;
  WebCore::Node *v134;
  int v135;
  char v136;
  WebCore::Node *v137;
  int v138;
  unsigned __int8 v139;
  WebCore::Node *v140;
  int v141;
  WebCore::Node *v142;
  int v143;
  char v144;
  WebCore::Node *v145;
  int v146;
  WebCore::Node *v147;
  int v148;
  char v149;
  WebCore::Node *v150;
  int v151;
  WebCore::Node *v152;
  int v153;
  char v154;
  WebCore::Node *v155;
  int v156;
  WebCore::Node *v157;
  int v158;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v5 = result[3];
  if (!(_DWORD)v5)
    return result;
  v6 = (uint64_t)a2;
  v7 = *(WTF::StringImpl ***)result;
  v115 = *(_QWORD *)result + 32 * v5;
  v8 = &v122;
  do
  {
    v9 = *v7;
    if (*v7)
      *(_DWORD *)v9 += 2;
    v10 = v7[1];
    if (v10)
      *(_DWORD *)v10 += 2;
    v11 = v7[2];
    if (v11)
      *(_DWORD *)v11 += 2;
    v117 = v7;
    v12 = v7[3];
    if (v12)
      *(_DWORD *)v12 += 2;
    if (v9)
      *(_DWORD *)v9 += 2;
    v120 = v9;
    if (v10)
      *(_DWORD *)v10 += 2;
    v121 = v10;
    if (v11)
      *(_DWORD *)v11 += 2;
    v118 = v9;
    v122 = v11;
    if (v12)
      *(_DWORD *)v12 += 2;
    v123 = v12;
    *(_DWORD *)(v6 + 24) += 4;
    v13 = *(_WORD *)(v6 + 28);
    v119 = v11;
    if ((v13 & 1) != 0)
    {
      v14 = *(_QWORD *)(v6 + 80);
      if (v14)
        LODWORD(v14) = *(_DWORD *)(v14 + 4);
    }
    else
    {
      LODWORD(v14) = 0;
      if ((v13 & 4) != 0)
      {
        v15 = *(_QWORD *)(v6 + 80);
        if (v15)
        {
          LODWORD(v14) = 0;
          do
          {
            LODWORD(v14) = v14 + 1;
            v15 = *(_QWORD *)(v15 + 56);
          }
          while (v15);
        }
      }
    }
    v155 = (WebCore::Node *)v6;
    v156 = 0;
    v157 = (WebCore::Node *)v6;
    v158 = v14;
    LOBYTE(v150) = 0;
    v154 = 0;
    if (v10)
      v16 = 1;
    else
      v16 = v12 == 0;
    v17 = v16;
    LOBYTE(v145) = 0;
    v149 = 0;
    while (1)
    {
      if (v155 == v157 && v156 == v158)
      {
LABEL_305:
        LOBYTE(v124) = 0;
        v128 = 0;
        break;
      }
      if (!v122)
      {
        WebCore::FragmentDirectiveRangeFinder::rangeOfStringInRange(&v140, (WebCore *)&v120, (uint64_t *)&v155, 1, v17);
        std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t)&v145, (uint64_t *)&v140);
        v53 = v119;
        if (v144)
        {
          v54 = v142;
          v142 = 0;
          if (v54)
          {
            if (*((_DWORD *)v54 + 6) == 2)
            {
              if ((*((_WORD *)v54 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v54);
            }
            else
            {
              *((_DWORD *)v54 + 6) -= 2;
            }
          }
          v55 = v140;
          v140 = 0;
          if (v55)
          {
            if (*((_DWORD *)v55 + 6) == 2)
            {
              if ((*((_WORD *)v55 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v55);
            }
            else
            {
              *((_DWORD *)v55 + 6) -= 2;
            }
          }
        }
        if (!v149)
        {
          LOBYTE(v124) = 0;
          v128 = 0;
          v6 = (uint64_t)a2;
          goto LABEL_315;
        }
        v56 = v145;
        *((_DWORD *)v145 + 6) += 2;
        v129 = v56;
        v130 = v146;
        v131 &= 0xF0u;
        WebCore::Position::next((uint64_t)&v129, 0, (uint64_t)&v134);
        WebCore::makeBoundaryPoint((uint64_t *)&v134, (uint64_t)&v140);
        v57 = v134;
        v134 = 0;
        if (v57)
        {
          if (*((_DWORD *)v57 + 6) == 2)
          {
            if ((*((_WORD *)v57 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v57);
          }
          else
          {
            *((_DWORD *)v57 + 6) -= 2;
          }
        }
        v58 = v129;
        v129 = 0;
        if (v58)
        {
          if (*((_DWORD *)v58 + 6) == 2)
          {
            if ((*((_WORD *)v58 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v58);
          }
          else
          {
            *((_DWORD *)v58 + 6) -= 2;
          }
        }
        if (!(_BYTE)v142)
          goto LABEL_305;
        v59 = v140;
        *((_DWORD *)v140 + 6) += 2;
        v60 = (uint64_t)v155;
        v155 = v59;
        if (v60)
        {
          if (*(_DWORD *)(v60 + 24) == 2)
          {
            if ((*(_WORD *)(v60 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v60);
          }
          else
          {
            *(_DWORD *)(v60 + 24) -= 2;
          }
        }
        v156 = v141;
        if (*((_DWORD *)v59 + 6) == 2)
        {
          if ((*((_WORD *)v59 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v59);
        }
        else
        {
          *((_DWORD *)v59 + 6) -= 2;
        }
        goto LABEL_161;
      }
      WebCore::FragmentDirectiveRangeFinder::rangeOfStringInRange(&v140, (WebCore *)v8, (uint64_t *)&v155, 1, 0);
      if (!v144)
        goto LABEL_305;
      v19 = v140;
      *((_DWORD *)v140 + 6) += 2;
      v129 = v19;
      v130 = v141;
      v131 &= 0xF0u;
      WebCore::Position::next((uint64_t)&v129, 0, (uint64_t)&v134);
      v24 = v134;
      if (v134)
      {
        v25 = v136 & 7;
        if (v25 <= 4)
        {
          v26 = v134;
          if (((1 << v25) & 0x19) != 0 || (v26 = (WebCore::Node *)*((_QWORD *)v134 + 4)) != 0)
          {
            *((_DWORD *)v26 + 6) += 2;
            switch(v25)
            {
              case 0u:
                v27 = 0;
                v4 = v135;
LABEL_53:
                v3 = (uint64_t)v26;
                goto LABEL_54;
              case 4u:
                v28 = *((_WORD *)v24 + 14);
                if ((v28 & 1) == 0)
                {
                  if ((v28 & 4) == 0)
                    break;
                  v29 = *((_QWORD *)v24 + 10);
                  if (!v29)
                    break;
                  v4 = 0;
                  do
                  {
                    ++v4;
                    v29 = *(_QWORD *)(v29 + 56);
                  }
                  while (v29);
LABEL_52:
                  v27 = 0;
                  goto LABEL_53;
                }
                v52 = *((_QWORD *)v24 + 10);
                if (v52)
                {
                  v27 = 0;
                  v4 = *(_DWORD *)(v52 + 4);
                  goto LABEL_53;
                }
                break;
              case 1u:
                v4 = WebCore::Node::computeNodeIndex(v24);
                goto LABEL_52;
              case 2u:
                v27 = 0;
                v4 = WebCore::Node::computeNodeIndex(v24) + 1;
                goto LABEL_53;
            }
            v4 = 0;
            goto LABEL_52;
          }
        }
      }
      v3 &= 0xFFFFFFFFFFFFFF00;
      v27 = 1;
LABEL_54:
      v30 = v134;
      v134 = 0;
      if (v30)
      {
        if (*((_DWORD *)v30 + 6) == 2)
        {
          if ((*((_WORD *)v30 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v30);
        }
        else
        {
          *((_DWORD *)v30 + 6) -= 2;
        }
      }
      v31 = v129;
      v129 = 0;
      if (v31)
      {
        if (*((_DWORD *)v31 + 6) == 2)
        {
          if ((*((_WORD *)v31 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v31);
        }
        else
        {
          *((_DWORD *)v31 + 6) -= 2;
        }
      }
      if (!v27)
      {
        *(_DWORD *)(v3 + 24) += 2;
        v33 = (uint64_t)v155;
        v155 = (WebCore::Node *)v3;
        if (v33)
        {
          if (*(_DWORD *)(v33 + 24) == 2)
          {
            if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v33);
          }
          else
          {
            *(_DWORD *)(v33 + 24) -= 2;
          }
        }
        v34 = v8;
        v156 = v4;
        v35 = v142;
        v36 = v143;
        v37 = v157;
        v38 = v158;
        *((_DWORD *)v142 + 6) += 2;
        *((_DWORD *)v37 + 6) += 2;
        if (v154)
        {
          v39 = (uint64_t)v150;
          v150 = v35;
          if (v39)
          {
            if (*(_DWORD *)(v39 + 24) == 2)
            {
              if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v39);
            }
            else
            {
              *(_DWORD *)(v39 + 24) -= 2;
            }
          }
          v151 = v36;
          v40 = v152;
          v152 = v37;
          v8 = v34;
          if (v40)
          {
            if (*((_DWORD *)v40 + 6) == 2)
            {
              if ((*((_WORD *)v40 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v40);
            }
            else
            {
              *((_DWORD *)v40 + 6) -= 2;
            }
          }
          v153 = v38;
          if (!v154)
            goto LABEL_395;
        }
        else
        {
          v150 = v35;
          v151 = v36;
          v152 = v37;
          v153 = v38;
          v154 = 1;
          v8 = v34;
        }
        WebCore::FragmentDirectiveRangeFinder::advanceRangeStartToNextNonWhitespace((WTF::StringImpl *)&v134, (WebCore::SimpleRange *)&v150, v23, v20, v21, v22);
        v41 = v139;
        if (v154 == v139)
        {
          if (v154)
          {
            v42 = v134;
            v134 = 0;
            v43 = (uint64_t)v150;
            v150 = v42;
            if (v43)
            {
              if (*(_DWORD *)(v43 + 24) == 2)
              {
                if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v43);
              }
              else
              {
                *(_DWORD *)(v43 + 24) -= 2;
              }
            }
            v151 = v135;
            v44 = v137;
            v137 = 0;
            v45 = v152;
            v152 = v44;
            if (v45)
            {
              if (*((_DWORD *)v45 + 6) == 2)
              {
                if ((*((_WORD *)v45 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v45);
              }
              else
              {
                *((_DWORD *)v45 + 6) -= 2;
              }
            }
            v153 = v138;
            if (!v41)
              goto LABEL_100;
            goto LABEL_94;
          }
        }
        else
        {
          if (!v154)
          {
            v150 = v134;
            v151 = v135;
            v51 = v137;
            v134 = 0;
            v137 = 0;
            v152 = v51;
            v153 = v138;
            v154 = 1;
            if (v139)
              goto LABEL_94;
            goto LABEL_100;
          }
          v46 = v152;
          v152 = 0;
          if (v46)
          {
            if (*((_DWORD *)v46 + 6) == 2)
            {
              if ((*((_WORD *)v46 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v46);
            }
            else
            {
              *((_DWORD *)v46 + 6) -= 2;
            }
          }
          v47 = (uint64_t)v150;
          v150 = 0;
          if (v47)
          {
            if (*(_DWORD *)(v47 + 24) == 2)
            {
              if ((*(_WORD *)(v47 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v47);
            }
            else
            {
              *(_DWORD *)(v47 + 24) -= 2;
            }
          }
          v154 = 0;
        }
        if (v41)
        {
LABEL_94:
          if (v137)
          {
            if (*((_DWORD *)v137 + 6) == 2)
            {
              if ((*((_WORD *)v137 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v137);
            }
            else
            {
              *((_DWORD *)v137 + 6) -= 2;
            }
          }
          if (v134)
          {
            if (*((_DWORD *)v134 + 6) == 2)
            {
              if ((*((_WORD *)v134 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v134);
            }
            else
            {
              *((_DWORD *)v134 + 6) -= 2;
            }
          }
        }
LABEL_100:
        if (!v154 || v150 == v152 && v151 == v153)
          goto LABEL_118;
        WebCore::FragmentDirectiveRangeFinder::rangeOfStringInRange(&v134, (WebCore *)&v120, (uint64_t *)&v150, 0, v17);
        std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t)&v145, (uint64_t *)&v134);
        if (v139)
        {
          v48 = v137;
          v137 = 0;
          if (v48)
          {
            if (*((_DWORD *)v48 + 6) == 2)
            {
              if ((*((_WORD *)v48 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v48);
            }
            else
            {
              *((_DWORD *)v48 + 6) -= 2;
            }
          }
          v49 = v134;
          v134 = 0;
          if (v49)
          {
            if (*((_DWORD *)v49 + 6) == 2)
            {
              if ((*((_WORD *)v49 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v49);
            }
            else
            {
              *((_DWORD *)v49 + 6) -= 2;
            }
          }
        }
        if (!v149)
        {
LABEL_118:
          LOBYTE(v124) = 0;
          v128 = 0;
          v32 = 1;
        }
        else
        {
          if (!v154)
            goto LABEL_394;
          if (v146 == v151 && v145 == v150)
            v32 = 0;
          else
            v32 = 2;
        }
        if (*(_DWORD *)(v3 + 24) == 2)
        {
          if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v3);
        }
        else
        {
          *(_DWORD *)(v3 + 24) -= 2;
        }
        goto LABEL_121;
      }
      LOBYTE(v124) = 0;
      v128 = 0;
      v32 = 1;
LABEL_121:
      if (v142)
      {
        if (*((_DWORD *)v142 + 6) == 2)
        {
          if ((*((_WORD *)v142 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v142);
        }
        else
        {
          *((_DWORD *)v142 + 6) -= 2;
        }
      }
      if (*((_DWORD *)v19 + 6) == 2)
      {
        if ((*((_WORD *)v19 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v19);
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
      if (v32 != 2)
      {
        if (v32)
          break;
LABEL_161:
        if (!v149)
        {
LABEL_394:
          __break(1u);
LABEL_395:
          v113 = std::__throw_bad_optional_access[abi:sn180100]();
          return (unsigned int *)WebCore::FullscreenManager::requestFullscreenForElement(v113);
        }
        v61 = v147;
        v62 = v148;
        v63 = v157;
        v64 = v158;
        *((_DWORD *)v147 + 6) += 2;
        *((_DWORD *)v63 + 6) += 2;
        v129 = v61;
        v130 = v62;
        v132 = v63;
        v133 = v64;
        while (1)
        {
          v65 = v129;
          v66 = v130;
          if (v129 == v132 && v130 == v133)
          {
            v85 = v130;
            v84 = v129;
            goto LABEL_256;
          }
          if (v121)
          {
            v17 = v123 == 0;
            WebCore::FragmentDirectiveRangeFinder::rangeOfStringInRange(&v140, (WebCore *)&v121, (uint64_t *)&v129, 1, v123 == 0);
            if (!v144)
              goto LABEL_261;
            if (!v149)
              goto LABEL_394;
            v68 = v142;
            *((_DWORD *)v142 + 6) += 2;
            v69 = v147;
            v147 = v68;
            if (v69)
            {
              if (*((_DWORD *)v69 + 6) == 2)
              {
                if ((*((_WORD *)v69 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v69);
              }
              else
              {
                *((_DWORD *)v69 + 6) -= 2;
              }
            }
            v148 = v143;
            if (*((_DWORD *)v68 + 6) == 2)
            {
              if ((*((_WORD *)v68 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v68);
            }
            else
            {
              *((_DWORD *)v68 + 6) -= 2;
            }
            if (v140)
            {
              if (*((_DWORD *)v140 + 6) == 2)
              {
                if ((*((_WORD *)v140 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v140);
              }
              else
              {
                *((_DWORD *)v140 + 6) -= 2;
              }
            }
          }
          if (!v149)
            goto LABEL_261;
          v70 = v147;
          v71 = v148;
          if (v145 == v147 && v146 == v148)
            goto LABEL_261;
          if (!v123)
            break;
          v73 = v157;
          v74 = v158;
          *((_DWORD *)v147 + 6) += 2;
          *((_DWORD *)v73 + 6) += 2;
          v140 = v70;
          v141 = v71;
          v142 = v73;
          v143 = v74;
          v144 = 1;
          WebCore::FragmentDirectiveRangeFinder::advanceRangeStartToNextNonWhitespace((WTF::StringImpl *)&v134, (WebCore::SimpleRange *)&v140, v23, v20, v21, v22);
          std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t)&v140, (uint64_t *)&v134);
          if (v139)
          {
            v75 = v137;
            v137 = 0;
            if (v75)
            {
              if (*((_DWORD *)v75 + 6) == 2)
              {
                if ((*((_WORD *)v75 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v75);
              }
              else
              {
                *((_DWORD *)v75 + 6) -= 2;
              }
            }
            v76 = v134;
            v134 = 0;
            if (v76)
            {
              if (*((_DWORD *)v76 + 6) == 2)
              {
                if ((*((_WORD *)v76 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v76);
              }
              else
              {
                *((_DWORD *)v76 + 6) -= 2;
              }
            }
          }
          if (!v144)
            goto LABEL_261;
          WebCore::FragmentDirectiveRangeFinder::rangeOfStringInRange(&v134, (WebCore *)&v123, (uint64_t *)&v140, 0, 1);
          if (v139)
          {
            if (!v144)
              goto LABEL_394;
            v77 = v134;
            if (v134 == v140 && v135 == v141)
            {
              LOBYTE(v124) = 0;
              v128 = 0;
              v78 = 1;
              if (v149)
              {
                v124 = v145;
                v125 = v146;
                v79 = v147;
                v145 = 0;
                v147 = 0;
                v126 = v79;
                v127 = v148;
                v128 = 1;
              }
            }
            else if (v121)
            {
              if (!v149)
                goto LABEL_394;
              v80 = v147;
              *((_DWORD *)v147 + 6) += 2;
              v81 = v129;
              v129 = v80;
              if (v81)
              {
                if (*((_DWORD *)v81 + 6) == 2)
                {
                  if ((*((_WORD *)v81 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v81);
                }
                else
                {
                  *((_DWORD *)v81 + 6) -= 2;
                }
              }
              v78 = 0;
              v130 = v148;
            }
            else
            {
              v78 = 5;
            }
            if (v137)
            {
              if (*((_DWORD *)v137 + 6) == 2)
              {
                if ((*((_WORD *)v137 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v137);
              }
              else
              {
                *((_DWORD *)v137 + 6) -= 2;
              }
            }
            if (v77)
            {
              if (*((_DWORD *)v77 + 6) == 2)
              {
                if ((*((_WORD *)v77 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v77);
              }
              else
              {
                *((_DWORD *)v77 + 6) -= 2;
              }
            }
          }
          else
          {
            LOBYTE(v124) = 0;
            v128 = 0;
            v78 = 1;
          }
          if (v144)
          {
            v82 = v142;
            v142 = 0;
            if (v82)
            {
              if (*((_DWORD *)v82 + 6) == 2)
              {
                if ((*((_WORD *)v82 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v82);
              }
              else
              {
                *((_DWORD *)v82 + 6) -= 2;
              }
            }
            v83 = v140;
            v140 = 0;
            if (v83)
            {
              if (*((_DWORD *)v83 + 6) == 2)
              {
                if ((*((_WORD *)v83 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v83);
              }
              else
              {
                *((_DWORD *)v83 + 6) -= 2;
              }
            }
          }
          if (v78)
          {
            if (v78 != 5)
              goto LABEL_262;
            v84 = v129;
            v65 = v132;
            v85 = v130;
            v66 = v133;
LABEL_256:
            if (v84 != v65 || v85 != v66)
            {
              v78 = 0;
              goto LABEL_262;
            }
LABEL_261:
            LOBYTE(v124) = 0;
            v128 = 0;
            v78 = 1;
            goto LABEL_262;
          }
        }
        v124 = v145;
        v125 = v146;
        v145 = 0;
        v147 = 0;
        v126 = v70;
        v127 = v148;
        v78 = 1;
        v128 = 1;
LABEL_262:
        v87 = v132;
        v132 = 0;
        if (v87)
        {
          if (*((_DWORD *)v87 + 6) == 2)
          {
            if ((*((_WORD *)v87 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v87);
          }
          else
          {
            *((_DWORD *)v87 + 6) -= 2;
          }
        }
        v88 = v129;
        v129 = 0;
        if (v88)
        {
          if (*((_DWORD *)v88 + 6) == 2)
          {
            if ((*((_WORD *)v88 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v88);
          }
          else
          {
            *((_DWORD *)v88 + 6) -= 2;
          }
        }
        if (v78)
          break;
      }
    }
    if (!v149)
    {
      v6 = (uint64_t)a2;
LABEL_314:
      v53 = v119;
      goto LABEL_315;
    }
    v89 = v147;
    v147 = 0;
    if (v89)
    {
      if (*((_DWORD *)v89 + 6) == 2)
      {
        if ((*((_WORD *)v89 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v89);
      }
      else
      {
        *((_DWORD *)v89 + 6) -= 2;
      }
    }
    v90 = v145;
    v145 = 0;
    v6 = (uint64_t)a2;
    if (!v90)
      goto LABEL_314;
    v53 = v119;
    if (*((_DWORD *)v90 + 6) == 2)
    {
      if ((*((_WORD *)v90 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v90);
    }
    else
    {
      *((_DWORD *)v90 + 6) -= 2;
    }
LABEL_315:
    if (v154)
    {
      v91 = v152;
      v152 = 0;
      if (v91)
      {
        if (*((_DWORD *)v91 + 6) == 2)
        {
          if ((*((_WORD *)v91 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v91);
        }
        else
        {
          *((_DWORD *)v91 + 6) -= 2;
        }
      }
      v92 = (uint64_t)v150;
      v150 = 0;
      if (v92)
      {
        if (*(_DWORD *)(v92 + 24) == 2)
        {
          if ((*(_WORD *)(v92 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v92);
        }
        else
        {
          *(_DWORD *)(v92 + 24) -= 2;
        }
      }
    }
    v93 = v157;
    v157 = 0;
    if (v93)
    {
      if (*((_DWORD *)v93 + 6) == 2)
      {
        if ((*((_WORD *)v93 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v93);
      }
      else
      {
        *((_DWORD *)v93 + 6) -= 2;
      }
    }
    v94 = (uint64_t)v155;
    v155 = 0;
    if (v94)
    {
      if (*(_DWORD *)(v94 + 24) == 2)
      {
        if ((*(_WORD *)(v94 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v94);
      }
      else
      {
        *(_DWORD *)(v94 + 24) -= 2;
      }
    }
    v95 = v123;
    v123 = 0;
    if (v95)
    {
      if (*(_DWORD *)v95 == 2)
        WTF::StringImpl::destroy(v95, a2);
      else
        *(_DWORD *)v95 -= 2;
    }
    v96 = v122;
    v122 = 0;
    if (v96)
    {
      if (*(_DWORD *)v96 == 2)
        WTF::StringImpl::destroy(v96, a2);
      else
        *(_DWORD *)v96 -= 2;
    }
    v97 = v121;
    v121 = 0;
    if (v97)
    {
      if (*(_DWORD *)v97 == 2)
        WTF::StringImpl::destroy(v97, a2);
      else
        *(_DWORD *)v97 -= 2;
    }
    v98 = v120;
    v120 = 0;
    if (v98)
    {
      if (*(_DWORD *)v98 == 2)
        WTF::StringImpl::destroy(v98, a2);
      else
        *(_DWORD *)v98 -= 2;
    }
    if (v128)
    {
      v99 = v124;
      v100 = v125;
      if (v124 != v126 || v125 != v127)
      {
        v101 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v101 == *(_DWORD *)(a3 + 8))
        {
          v102 = WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v101 + 1, (unint64_t)&v124);
          v103 = *(unsigned int *)(a3 + 12);
          v104 = v103 + 1;
          v105 = *(_QWORD *)a3 + 32 * v103;
          v106 = *(_QWORD *)v102;
          *(_DWORD *)(v106 + 24) = *(_DWORD *)(*(_QWORD *)v102 + 24) + 2;
          *(_QWORD *)v105 = v106;
          *(_DWORD *)(v105 + 8) = *(_DWORD *)(v102 + 8);
          v107 = *(_QWORD *)(v102 + 16);
          *(_DWORD *)(v107 + 24) += 2;
          *(_QWORD *)(v105 + 16) = v107;
          *(_DWORD *)(v105 + 24) = *(_DWORD *)(v102 + 24);
          *(_DWORD *)(a3 + 12) = v104;
          if (!v128)
            goto LABEL_353;
        }
        else
        {
          v108 = v101 + 1;
          v109 = *(_QWORD *)a3 + 32 * v101;
          *((_DWORD *)v124 + 6) += 2;
          *(_QWORD *)v109 = v99;
          *(_DWORD *)(v109 + 8) = v100;
          v110 = v126;
          *((_DWORD *)v126 + 6) += 2;
          *(_QWORD *)(v109 + 16) = v110;
          *(_DWORD *)(v109 + 24) = v127;
          *(_DWORD *)(a3 + 12) = v108;
        }
      }
      v111 = v126;
      v126 = 0;
      if (v111)
      {
        if (*((_DWORD *)v111 + 6) == 2)
        {
          if ((*((_WORD *)v111 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v111);
        }
        else
        {
          *((_DWORD *)v111 + 6) -= 2;
        }
      }
      v112 = v124;
      v124 = 0;
      if (v112)
      {
        if (*((_DWORD *)v112 + 6) == 2)
        {
          if ((*((_WORD *)v112 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v112);
        }
        else
        {
          *((_DWORD *)v112 + 6) -= 2;
        }
      }
    }
LABEL_353:
    result = (unsigned int *)v118;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::destroy(v12, a2);
        result = (unsigned int *)v118;
      }
      else
      {
        *(_DWORD *)v12 -= 2;
      }
    }
    if (!v53)
    {
LABEL_359:
      if (!v10)
        goto LABEL_362;
LABEL_360:
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, a2);
        result = (unsigned int *)v118;
      }
      else
      {
        *(_DWORD *)v10 -= 2;
      }
      goto LABEL_362;
    }
    if (*(_DWORD *)v53 != 2)
    {
      *(_DWORD *)v53 -= 2;
      goto LABEL_359;
    }
    WTF::StringImpl::destroy(v53, a2);
    result = (unsigned int *)v118;
    if (v10)
      goto LABEL_360;
LABEL_362:
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *result -= 2;
    }
    v7 = v117 + 4;
  }
  while (v117 + 4 != (WTF::StringImpl **)v115);
  return result;
}

unsigned int *WebCore::FullscreenManager::requestFullscreenForElement(uint64_t *a1, uint64_t *a2, uint64_t *a3, int a4, uint64_t *a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  WebCore::LocalDOMWindow **v22;
  WTF *v23;
  WTF *isMainThread;
  WebCore::Document *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  unsigned int *result;
  uint64_t v37;
  void *v38;
  unsigned int v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  unsigned int *v52;
  void *v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  WTF *v70;
  unsigned int v71;
  uint64_t v72;
  __int128 v73;
  WTF::Logger *v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  NSObject *v84;
  uint64_t v85;
  void *v86;
  char *v87;
  unsigned __int8 *v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  WTF::Logger *v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  WTF::Logger *v100;
  uint64_t v101;
  WTF::StringImpl **v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  int v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF *v113;
  void *v114;
  unsigned __int8 *v115;
  int v116;
  _QWORD *v117;
  WTF *v118;
  void *v119;
  uint64_t v120;
  char v121;
  uint64_t *v122;
  WTF *v123;
  char v124;
  WTF::StringImpl *v125;
  __int128 v126;
  __int128 v127;
  WTF::Logger *v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  uint8_t buf[16];
  WTF::StringImpl *v134[2];
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v12 = a1[17];
  *(_QWORD *)&v126 = "FullscreenManager";
  *((_QWORD *)&v126 + 1) = 18;
  *(_QWORD *)&v127 = "requestFullscreenForElement";
  *((_QWORD *)&v127 + 1) = v12;
  if (!*a3 || (WebCore::Document::isFullyActive(*(WebCore::Document **)(a1[2] + 8)) & 1) != 0)
  {
    v122 = a1;
    v13 = *a1;
    if (*a1)
      goto LABEL_204;
    v13 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = a1;
    v15 = (unsigned int *)*a1;
    *a1 = v13;
    if (!v15)
      goto LABEL_204;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, v14);
    }
    v13 = *a1;
    if (*a1)
    {
LABEL_204:
      do
        v18 = __ldaxr((unsigned int *)v13);
      while (__stlxr(v18 + 1, (unsigned int *)v13));
    }
    v123 = (WTF *)v13;
    v19 = *a2;
    if ((*(_WORD *)(*a2 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v19 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::dialogTag + 24))
    {
      if (*(_BYTE *)(WebCore::Document::logger(*(WebCore::Document **)(a1[2] + 8)) + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogFullscreen, 1u, (WTF::Logger::LogSiteIdentifier *)&v126, "Element to fullscreen is a <dialog>; failing.");
      goto LABEL_43;
    }
    v20 = *(_QWORD *)(v19 + 72) & 0xFFFFFFFFFFFFLL;
    if (v20 && (v75 = *(_QWORD *)(v20 + 232)) != 0)
    {
      v21 = a1 + 2;
      v22 = *(WebCore::LocalDOMWindow ***)(a1[2] + 8);
      if (*(_BYTE *)(v75 + 1))
      {
        if (*(_BYTE *)(WebCore::Document::logger((WebCore::Document *)v22) + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogFullscreen, 1u, (WTF::Logger::LogSiteIdentifier *)&v126, "Element to fullscreen is an open popover; failing.");
        goto LABEL_43;
      }
    }
    else
    {
      v21 = a1 + 2;
      v22 = *(WebCore::LocalDOMWindow ***)(a1[2] + 8);
    }
    if (v22[87])
    {
      v23 = (WTF *)WebCore::LocalDOMWindow::consumeTransientActivation(v22[87]);
      if ((v23 & 1) != 0)
      {
        if (!*a3)
        {
          isMainThread = (WTF *)WTF::isMainThread(v23);
          if ((_DWORD)isMainThread)
          {
            {
              if (WebCore::currentToken(void)::token
                && !*(_DWORD *)(WebCore::currentToken(void)::token + 68)
                && *(_BYTE *)(WebCore::currentToken(void)::token + 16) == 1)
              {
                if (WTF::isMainThread(isMainThread))
                {
                  {
                    v115 = (unsigned __int8 *)WebCore::currentToken(void)::token;
                    if (WebCore::currentToken(void)::token)
                      ++*(_DWORD *)WebCore::currentToken(void)::token;
                  }
                  else
                  {
                    v115 = 0;
                    WebCore::currentToken(void)::token = 0;
                  }
                }
                else
                {
                  v115 = 0;
                }
                v116 = v115[40];
                if (*(_DWORD *)v115 == 1)
                {
                  WebCore::UserGestureToken::~UserGestureToken((WebCore::UserGestureToken *)v115, v114);
                  WTF::fastFree(v118, v119);
                  if (!v116)
                  {
LABEL_190:
                    if (*(_BYTE *)(WebCore::Document::logger(*(WebCore::Document **)(*v21 + 8)) + 12))
                      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogFullscreen, 1u, (WTF::Logger::LogSiteIdentifier *)&v126, "Current gesture is EscapeKey; failing.");
                    v117 = *(_QWORD **)(*v21 + 8);
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    WebCore::Document::addConsoleMessage(v117, 8, 2, (WTF::StringImpl **)buf, 0);
                    v107 = *(WTF::StringImpl **)buf;
                    *(_QWORD *)buf = 0;
                    if (!v107)
                      goto LABEL_43;
                    goto LABEL_157;
                  }
                }
                else
                {
                  --*(_DWORD *)v115;
                  if (!v116)
                    goto LABEL_190;
                }
              }
            }
            else
            {
              WebCore::currentToken(void)::token = 0;
            }
          }
        }
        v25 = *(WebCore::Document **)(*v21 + 8);
        v26 = *((_QWORD *)v25 + 66);
        if (!v26
          || (v27 = *(_QWORD *)(v26 + 8)) == 0
          || (v28 = *(_QWORD *)(v27 + 24)) == 0
          || (v29 = *(_QWORD *)(v28 + 8)) == 0
          || (*(_QWORD *)(*(_QWORD *)(v29 + 112) + 704) & 0x80000000000000) == 0)
        {
          if (*(_BYTE *)(WebCore::Document::logger(v25) + 12))
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogFullscreen, 1u, (WTF::Logger::LogSiteIdentifier *)&v126, "!page() or fullscreen not enabled; failing.");
          goto LABEL_43;
        }
        v41 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(v29 + 48) + 16) + 1176))(*(_QWORD *)(*(_QWORD *)(v29 + 48) + 16), *a2, 1);
        if ((v41 & 1) != 0
          || (v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v21 + 8) + 528)
                                                                              + 8)
                                                                  + 24)
                                                      + 8)
                                          + 48)
                              + 16),
              ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v42 + 1176))(v42, *a2, 0) & 1) != 0))
        {
          if (*(_BYTE *)(WebCore::Document::logger(*(WebCore::Document **)(*v21 + 8)) + 12)
            && WebCore::LogFullscreen
            && byte_1ECE7C238 >= 3u)
          {
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogFullscreen, 3, (WTF::Logger::LogSiteIdentifier *)&v126);
          }
          v44 = *a2;
          *(_DWORD *)(v44 + 24) = *(_DWORD *)(*a2 + 24) + 2;
          v45 = a1[6];
          a1[6] = v44;
          if (v45)
          {
            if (*(_DWORD *)(v45 + 24) == 2)
            {
              if ((*(_WORD *)(v45 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v45, v43);
            }
            else
            {
              *(_DWORD *)(v45 + 24) -= 2;
            }
          }
          v46 = *(_QWORD *)(*v21 + 8);
          v121 = v41;
          if (*(_BYTE *)(v46 + 3362) || *(_BYTE *)(v46 + 3405))
          {
            while (1)
            {
              v108 = *(_QWORD *)(v46 + 528);
              if (!v108)
                break;
              v109 = *(_QWORD *)(v108 + 8);
              if (!v109)
                break;
              v110 = *(_QWORD *)(v109 + 120);
              if (!v110)
                break;
              v111 = *(_QWORD *)(v110 + 8);
              if (!v111)
                break;
              v46 = *(_QWORD *)(*(_QWORD *)(v111 + 40) + 8);
            }
          }
          else
          {
            v47 = *(_QWORD *)(v46 + 528);
            if (v47)
            {
              v48 = *(_QWORD *)(v47 + 8);
              if (v48)
              {
                v49 = *(_QWORD *)(*(_QWORD *)(v48 + 128) + 8);
                if (v49 && *(_BYTE *)(v49 + 144) == 0)
                {
                  v51 = *(_QWORD *)(v49 + 296);
                  if (v51)
                    v46 = v51;
                }
              }
            }
          }
          v52 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v46);
          if (v52)
          {
            do
              v54 = __ldaxr(v52);
            while (__stlxr(v54 + 1, v52));
          }
          v55 = a1[3];
          a1[3] = (uint64_t)v52;
          if (v55)
          {
            do
            {
              v56 = __ldaxr((unsigned int *)v55);
              v57 = v56 - 1;
            }
            while (__stlxr(v57, (unsigned int *)v55));
            if (!v57)
            {
              atomic_store(1u, (unsigned int *)v55);
              v112 = *(unsigned int *)(v55 + 28);
              if ((_DWORD)v112)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v55 + 16), (WTF::StringImpl *)(*(_QWORD *)(v55 + 16) + 32 * v112));
              v113 = *(WTF **)(v55 + 16);
              if (v113)
              {
                *(_QWORD *)(v55 + 16) = 0;
                *(_DWORD *)(v55 + 24) = 0;
                WTF::fastFree(v113, v53);
              }
              WTF::fastFree((WTF *)v55, v53);
            }
          }
          v58 = *(_QWORD *)(a1[2] + 8);
          *(_DWORD *)(v58 + 24) += 2;
          v59 = WebCore::Document::eventLoop((WebCore::Document *)v58, (WTF::StringImpl *)v53);
          v60 = *a1;
          v120 = v59;
          if (*a1)
            goto LABEL_205;
          v60 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v60 = 1;
          *(_QWORD *)(v60 + 8) = a1;
          v62 = (unsigned int *)*a1;
          *a1 = v60;
          if (!v62)
            goto LABEL_205;
          do
          {
            v63 = __ldaxr(v62);
            v64 = v63 - 1;
          }
          while (__stlxr(v64, v62));
          if (!v64)
          {
            atomic_store(1u, v62);
            WTF::fastFree((WTF *)v62, v61);
          }
          v60 = *a1;
          if (*a1)
          {
LABEL_205:
            do
              v65 = __ldaxr((unsigned int *)v60);
            while (__stlxr(v65 + 1, (unsigned int *)v60));
          }
          v66 = *a2;
          *a2 = 0;
          v67 = *a3;
          *a3 = 0;
          v68 = *a5;
          *a5 = 0;
          v69 = v122;
          v70 = v123;
          if (v123)
          {
            do
              v71 = __ldaxr((unsigned int *)v123);
            while (__stlxr(v71 + 1, (unsigned int *)v123));
          }
          *(_OWORD *)buf = v126;
          *(_OWORD *)v134 = v127;
          v72 = WTF::fastMalloc((WTF *)0x70);
          *(_QWORD *)v72 = off_1E33A50D8;
          *(_QWORD *)(v72 + 8) = a1;
          *(_QWORD *)(v72 + 16) = v60;
          *(_QWORD *)(v72 + 24) = v66;
          v73 = *(_OWORD *)v134;
          *(_OWORD *)(v72 + 72) = *(_OWORD *)buf;
          *(_QWORD *)(v72 + 32) = v67;
          *(_QWORD *)(v72 + 40) = v68;
          *(_DWORD *)(v72 + 48) = a4;
          *(_BYTE *)(v72 + 52) = v121;
          *(_QWORD *)(v72 + 56) = v69;
          *(_QWORD *)(v72 + 64) = v70;
          *(_OWORD *)(v72 + 88) = v73;
          *(_DWORD *)(v72 + 104) = a6;
          v128 = (WTF::Logger *)v72;
          WebCore::EventLoopTaskGroup::queueTask(v120, 9, (uint64_t *)&v128);
          v74 = v128;
          v128 = 0;
          if (v74)
            (*(void (**)(WTF::Logger *))(*(_QWORD *)v74 + 8))(v74);
          if (*(_DWORD *)(v58 + 24) == 2)
          {
            if ((*(_WORD *)(v58 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v58, v38);
          }
          else
          {
            *(_DWORD *)(v58 + 24) -= 2;
          }
          goto LABEL_44;
        }
        if (!*(_BYTE *)(WebCore::Document::logger(*(WebCore::Document **)(*v21 + 8)) + 12))
        {
LABEL_43:
          WebCore::FullscreenManager::requestFullscreenForElement(WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::FullscreenManager::FullscreenCheckType,WTF::CompletionHandler<void ()(BOOL)> &&,unsigned int)::$_0::operator()((unsigned int *)&v122, a2, a3);
          v37 = *a5;
          *a5 = 0;
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 16))(v37, 0);
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
LABEL_44:
          result = (unsigned int *)v123;
          v123 = 0;
          if (result)
          {
            do
            {
              v39 = __ldaxr(result);
              v40 = v39 - 1;
            }
            while (__stlxr(v40, result));
            if (!v40)
            {
              atomic_store(1u, result);
              return (unsigned int *)WTF::fastFree((WTF *)result, v38);
            }
          }
          return result;
        }
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v126);
        WTF::String::String((WTF::String *)&v130, "page does not support fullscreen for element; failing.");
        if (v131)
        {
          v76 = *((_DWORD *)v131 + 1);
          if (v130)
          {
LABEL_96:
            v77 = *((_DWORD *)v130 + 1);
LABEL_97:
            if ((v77 | v76) < 0 || (v78 = (v76 + v77), __OFADD__(v76, v77)))
            {
              v132 = 0;
              goto LABEL_198;
            }
            if (v131)
            {
              v79 = *((_DWORD *)v131 + 4);
              v80 = (v79 >> 2) & 1;
              if (v130 && (v79 & 4) != 0)
                goto LABEL_102;
            }
            else
            {
              if (v130)
              {
LABEL_102:
                v80 = (*((unsigned __int8 *)v130 + 16) >> 2) & 1;
                goto LABEL_103;
              }
              v80 = 1;
            }
LABEL_103:
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v78, v80, (uint64_t)v131, (uint64_t)v130, &v132);
            if (v132)
            {
              v82 = v130;
              v130 = 0;
              if (v82)
              {
                if (*(_DWORD *)v82 == 2)
                  WTF::StringImpl::destroy(v82, v81);
                else
                  *(_DWORD *)v82 -= 2;
              }
              v83 = v131;
              v131 = 0;
              if (v83)
              {
                if (*(_DWORD *)v83 == 2)
                  WTF::StringImpl::destroy(v83, v81);
                else
                  *(_DWORD *)v83 -= 2;
              }
              v84 = qword_1ECE7C248;
              v85 = os_log_type_enabled((os_log_t)qword_1ECE7C248, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v85)
              {
                WTF::String::utf8();
                v87 = v128 ? (char *)v128 + 16 : 0;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = v87;
                _os_log_impl(&dword_1940B8000, v84, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
                v85 = (uint64_t)v128;
                v128 = 0;
                if (v85)
                {
                  if (*(_DWORD *)v85 == 1)
                    v85 = WTF::fastFree((WTF *)v85, v86);
                  else
                    --*(_DWORD *)v85;
                }
              }
              if (WebCore::LogFullscreen && byte_1ECE7C238)
              {
                v88 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                while (1)
                {
                  v89 = *v88;
                  if ((v89 & 1) != 0)
                    break;
                  v90 = __ldaxr(v88);
                  if (v90 == v89)
                  {
                    if (!__stxr(v89 | 1, v88))
                    {
                      v91 = WTF::Logger::observers((WTF::Logger *)v85);
                      v92 = *(unsigned int *)(v91 + 12);
                      if ((_DWORD)v92)
                      {
                        v93 = *(uint64_t **)v91;
                        v94 = *(_QWORD *)v91 + 8 * v92;
                        do
                        {
                          v95 = *v93;
                          *(_DWORD *)buf = 0;
                          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v126);
                          LODWORD(v134[0]) = 0;
                          WTF::String::String((WTF::String *)&v134[1], "page does not support fullscreen for element; failing.");
                          v128 = 0;
                          v129 = 0;
                          v96 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                          LODWORD(v129) = 2;
                          v128 = v96;
                          v97 = HIDWORD(v129);
                          *((_DWORD *)v96 + 4 * HIDWORD(v129)) = *(_DWORD *)buf;
                          v98 = *(_QWORD *)&buf[8];
                          if (*(_QWORD *)&buf[8])
                            **(_DWORD **)&buf[8] += 2;
                          *((_QWORD *)v96 + 2 * v97 + 1) = v98;
                          *((_DWORD *)v96 + 4 * (v97 + 1)) = v134[0];
                          v99 = v134[1];
                          if (v134[1])
                            *(_DWORD *)v134[1] += 2;
                          *((_QWORD *)v96 + 2 * (v97 + 1) + 1) = v99;
                          HIDWORD(v129) = v97 + 2;
                          (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v95 + 16))(v95, &WebCore::LogFullscreen, 1, &v128);
                          v100 = v128;
                          if (HIDWORD(v129))
                          {
                            v101 = 16 * HIDWORD(v129);
                            v102 = (WTF::StringImpl **)((char *)v128 + 8);
                            do
                            {
                              v103 = *v102;
                              *v102 = 0;
                              if (v103)
                              {
                                if (*(_DWORD *)v103 == 2)
                                  WTF::StringImpl::destroy(v103, (WTF::StringImpl *)v86);
                                else
                                  *(_DWORD *)v103 -= 2;
                              }
                              v102 += 2;
                              v101 -= 16;
                            }
                            while (v101);
                            v100 = v128;
                          }
                          if (v100)
                          {
                            v128 = 0;
                            LODWORD(v129) = 0;
                            WTF::fastFree(v100, v86);
                          }
                          v104 = v134[1];
                          v134[1] = 0;
                          if (v104)
                          {
                            if (*(_DWORD *)v104 == 2)
                              WTF::StringImpl::destroy(v104, (WTF::StringImpl *)v86);
                            else
                              *(_DWORD *)v104 -= 2;
                          }
                          v105 = *(WTF::StringImpl **)&buf[8];
                          *(_QWORD *)&buf[8] = 0;
                          if (v105)
                          {
                            if (*(_DWORD *)v105 == 2)
                              WTF::StringImpl::destroy(v105, (WTF::StringImpl *)v86);
                            else
                              *(_DWORD *)v105 -= 2;
                          }
                          ++v93;
                        }
                        while (v93 != (uint64_t *)v94);
                      }
                      v106 = __ldxr(v88);
                      if (v106 == 1)
                      {
                        if (!__stlxr(0, v88))
                          break;
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                      break;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                }
              }
              v107 = v132;
              v132 = 0;
              if (!v107)
                goto LABEL_43;
LABEL_157:
              if (*(_DWORD *)v107 == 2)
                WTF::StringImpl::destroy(v107, (WTF::StringImpl *)v86);
              else
                *(_DWORD *)v107 -= 2;
              goto LABEL_43;
            }
LABEL_198:
            __break(0xC471u);
            JUMPOUT(0x1959F1004);
          }
        }
        else
        {
          v76 = 0;
          if (v130)
            goto LABEL_96;
        }
        v77 = 0;
        goto LABEL_97;
      }
      v22 = *(WebCore::LocalDOMWindow ***)(*v21 + 8);
    }
    if (*(_BYTE *)(WebCore::Document::logger((WebCore::Document *)v22) + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [34]>((uint64_t)&WebCore::LogFullscreen, 1u, (WTF::Logger::LogSiteIdentifier *)&v126, "!hasTransientActivation; failing.");
    goto LABEL_43;
  }
  v30 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v124 = 33;
  v128 = 0;
  buf[0] = 33;
  v31 = v125;
  if (v125)
    *(_DWORD *)v125 += 2;
  *(_QWORD *)&buf[8] = v31;
  WebCore::DeferredPromise::reject(v30, buf, 0, &v128);
  v33 = *(WTF::StringImpl **)&buf[8];
  *(_QWORD *)&buf[8] = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v32);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = v125;
  v125 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v32);
    else
      *(_DWORD *)v34 -= 2;
  }
  if (*(_BYTE *)(WebCore::Document::logger(*(WebCore::Document **)(a1[2] + 8)) + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogFullscreen, 1u, (WTF::Logger::LogSiteIdentifier *)&v126, "Document is not fully active; failing.");
  v35 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 16))(v35, 0);
  return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
}

unsigned int *WebCore::FullscreenManager::requestFullscreenForElement(WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::FullscreenManager::FullscreenCheckType,WTF::CompletionHandler<void ()(BOOL)> &&,unsigned int)::$_0::operator()(unsigned int *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  void *v25;
  unsigned int *v26;
  WTF::StringImpl *v27;
  char v28;
  int v29;
  objc_class *v30;

  v3 = *((_QWORD *)result + 1);
  if (!v3 || !*(_QWORD *)(v3 + 8))
    return result;
  v6 = result;
  v7 = *(_QWORD *)result;
  v8 = *(_QWORD *)result;
  v11 = *(_QWORD *)(v8 + 96);
  v9 = v8 + 96;
  v10 = v11;
  v12 = *(_QWORD *)(*(_QWORD *)(v9 - 80) + 8);
  *(_DWORD *)(v12 + 24) += 2;
  v13 = *(_QWORD *)(v9 + 8);
  if (v11)
  {
    if (v13 + 1 != v10)
      goto LABEL_12;
    goto LABEL_11;
  }
  v14 = *(unsigned int *)(v7 + 120);
  if (v13)
  {
    if (v13 != v14 - 1)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (!(_DWORD)v14)
  {
LABEL_11:
    WTF::Deque<WebCore::GCReachableRef<WebCore::Node,void>,0ul>::expandCapacity(v9);
    v13 = *(_QWORD *)(v7 + 104);
    goto LABEL_12;
  }
  v13 = 0;
LABEL_12:
  v15 = *(_QWORD *)(v7 + 112);
  v16 = *a2;
  *(_DWORD *)(v16 + 24) += 2;
  *(_QWORD *)(v15 + 8 * v13) = v16;
  {
    WebCore::GCReachableRefMap::map(void)::map = 0;
  }
  v30 = (objc_class *)v16;
  v29 = 0;
  WTF::HashMap<WebCore::EventTarget *,unsigned int,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&WebCore::GCReachableRefMap::map(void)::map, &v30, &v29, (uint64_t)&v26);
  ++v26[2];
  if (v28)
    *(_QWORD *)(v16 + 16) |= 0x4000000000000uLL;
  v18 = *(_QWORD *)(v7 + 104);
  if (v18 == *(unsigned int *)(v7 + 120) - 1)
    v19 = 0;
  else
    v19 = v18 + 1;
  *(_QWORD *)(v7 + 104) = v19;
  v20 = *a3;
  if (*a3)
  {
    v30 = 0;
    LOBYTE(v26) = 33;
    v27 = 0;
    WebCore::DeferredPromise::reject(v20, (unsigned __int8 *)&v26, 0, &v30);
    v21 = v27;
    v27 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v17);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  v22 = WebCore::Document::eventLoop((WebCore::Document *)v12, v17);
  v23 = *((_QWORD *)v6 + 1);
  *((_QWORD *)v6 + 1) = 0;
  v24 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v24 = &off_1E33A5060;
  *((_QWORD *)v24 + 1) = v23;
  v26 = v24;
  WebCore::EventLoopTaskGroup::queueTask(v22, 9, (uint64_t *)&v26);
  result = v26;
  v26 = 0;
  if (result)
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v12, v25);
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::FullscreenManager::cancelFullscreen(WebCore::FullscreenManager *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  unsigned int *result;
  void *v21;
  uint64_t v22;
  BOOL v23;
  WebCore::Node *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  WebCore::FullscreenManager *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  char *v50;
  const char *v51;
  WTF::StringImpl *v52;
  const char *v53;
  uint64_t v54;
  char v55;
  WTF::StringImpl *v56;
  objc_class *v57;

  v3 = *((_QWORD *)this + 3);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0)
  {
    v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
    if (*(_BYTE *)(v4 + 3362) || *(_BYTE *)(v4 + 3405))
    {
      while (1)
      {
        v30 = *(_QWORD *)(v4 + 528);
        if (!v30)
          break;
        v31 = *(_QWORD *)(v30 + 8);
        if (!v31)
          break;
        v32 = *(_QWORD *)(v31 + 120);
        if (!v32)
          break;
        v33 = *(_QWORD *)(v32 + 8);
        if (!v33)
          break;
        v4 = *(_QWORD *)(*(_QWORD *)(v33 + 40) + 8);
      }
    }
    else
    {
      v5 = *(_QWORD *)(v4 + 528);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          v7 = *(_QWORD *)(*(_QWORD *)(v6 + 128) + 8);
          if (v7 && *(_BYTE *)(v7 + 144) == 0)
          {
            v9 = *(_QWORD *)(v7 + 296);
            if (v9)
              v4 = v9;
          }
        }
      }
    }
  }
  *(_DWORD *)(v4 + 24) += 2;
  v10 = *(_QWORD *)(v4 + 1992);
  if (!v10)
  {
    v25 = WTF::fastMalloc((WTF *)0x90);
    *(_QWORD *)v25 = 0;
    *(_DWORD *)(v25 + 8) = 0;
    v26 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v4);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 + 1, v26));
    *(_QWORD *)(v25 + 24) = 0;
    *(_QWORD *)(v25 + 32) = 0;
    *(_QWORD *)(v25 + 16) = v26;
    *(_BYTE *)(v25 + 40) = 0;
    *(_OWORD *)(v25 + 48) = 0u;
    *(_OWORD *)(v25 + 64) = 0u;
    *(_OWORD *)(v25 + 80) = 0u;
    *(_OWORD *)(v25 + 96) = 0u;
    *(_OWORD *)(v25 + 112) = 0u;
    *(_DWORD *)(v25 + 127) = 0;
    *(_QWORD *)(v25 + 136) = WTF::cryptographicallyRandomNumber<unsigned long long>();
    v28 = *(WebCore::FullscreenManager **)(v4 + 1992);
    *(_QWORD *)(v4 + 1992) = v25;
    if (v28)
    {
      WebCore::FullscreenManager::~FullscreenManager(v28, a2);
      if (*(_DWORD *)(v29 + 8))
      {
        *(_OWORD *)(v29 + 112) = 0u;
        *(_OWORD *)(v29 + 128) = 0u;
        *(_OWORD *)(v29 + 80) = 0u;
        *(_OWORD *)(v29 + 96) = 0u;
        *(_OWORD *)(v29 + 48) = 0u;
        *(_OWORD *)(v29 + 64) = 0u;
        *(_OWORD *)(v29 + 16) = 0u;
        *(_OWORD *)(v29 + 32) = 0u;
        *(_OWORD *)v29 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v29, a2);
      }
    }
    v10 = *(_QWORD *)(v4 + 1992);
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 8);
  v12 = *(_QWORD *)(v11 + 3096);
  if (v12)
  {
    v34 = 0;
    v35 = v11 + 3104;
    while (1)
    {
      v36 = (uint64_t *)(v34 ? v34 + 8 : v35);
      v34 = *v36;
      if ((*(_BYTE *)(*(_QWORD *)v34 + 54) & 0x40) != 0)
        break;
      if (v34 == v12)
        goto LABEL_16;
    }
    v37 = WebCore::Document::logger(*(WebCore::Document **)(*((_QWORD *)this + 2) + 8));
    v39 = *((_QWORD *)this + 17);
    v51 = "FullscreenManager";
    v52 = (WTF::StringImpl *)18;
    v53 = "cancelFullscreen";
    v54 = v39;
    if (*(_BYTE *)(v37 + 12))
    {
      if (WebCore::LogFullscreen && byte_1ECE7C238 >= 3u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogFullscreen, 3, (WTF::Logger::LogSiteIdentifier *)&v51);
    }
    *((_BYTE *)this + 40) = 1;
    v41 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
    *(_DWORD *)(v41 + 24) += 2;
    v42 = WebCore::Document::eventLoop((WebCore::Document *)v41, v38);
    v43 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      goto LABEL_92;
    v43 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v43 = 1;
    *(_QWORD *)(v43 + 8) = this;
    v45 = *(unsigned int **)this;
    *(_QWORD *)this = v43;
    if (!v45)
      goto LABEL_92;
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
    {
      atomic_store(1u, v45);
      WTF::fastFree((WTF *)v45, v44);
    }
    v43 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
LABEL_92:
      do
        v48 = __ldaxr((unsigned int *)v43);
      while (__stlxr(v48 + 1, (unsigned int *)v43));
    }
    v49 = *((_QWORD *)this + 17);
    v50 = (char *)WTF::fastMalloc((WTF *)0x40);
    *(_QWORD *)v50 = &off_1E33A5128;
    *((_QWORD *)v50 + 1) = this;
    *((_QWORD *)v50 + 2) = v43;
    *((_QWORD *)v50 + 3) = v4;
    *((_QWORD *)v50 + 4) = "FullscreenManager";
    *((_QWORD *)v50 + 5) = 18;
    *((_QWORD *)v50 + 6) = "cancelFullscreen";
    *((_QWORD *)v50 + 7) = v49;
    v51 = v50;
    WebCore::EventLoopTaskGroup::queueTask(v42, 9, (uint64_t *)&v51);
    result = (unsigned int *)v51;
    v51 = 0;
    if (result)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    if (*(_DWORD *)(v41 + 24) != 2)
    {
      *(_DWORD *)(v41 + 24) -= 2;
      return result;
    }
    if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
    {
      v24 = (WebCore::Node *)v41;
      return WebCore::Node::removedLastRef(v24, v21);
    }
  }
  else
  {
LABEL_16:
    v13 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v13)
    {
      if (*(_DWORD *)(v13 + 24) == 2)
      {
        if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v13, a2);
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
    }
    v14 = *((_QWORD *)this + 4);
    if (v14)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v55 = 33;
      v57 = 0;
      LOBYTE(v51) = 33;
      v15 = v56;
      if (v56)
        *(_DWORD *)v56 += 2;
      v52 = v15;
      WebCore::DeferredPromise::reject(v14, (unsigned __int8 *)&v51, 0, &v57);
      v17 = v52;
      v52 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = v56;
      v56 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v16);
        else
          *(_DWORD *)v18 -= 2;
      }
      v19 = (_DWORD *)*((_QWORD *)this + 4);
      *((_QWORD *)this + 4) = 0;
      if (v19)
      {
        if (v19[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 16))(v19);
        else
          --v19[4];
      }
    }
    result = (unsigned int *)WebCore::Document::logger(*(WebCore::Document **)(*((_QWORD *)this + 2) + 8));
    v22 = *((_QWORD *)this + 17);
    v51 = "FullscreenManager";
    v52 = (WTF::StringImpl *)18;
    v53 = "cancelFullscreen";
    v54 = v22;
    if (*((_BYTE *)result + 12))
    {
      if (WebCore::LogFullscreen)
        v23 = byte_1ECE7C238 >= 3u;
      else
        v23 = 0;
      if (v23)
        result = (unsigned int *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogFullscreen, 3u, (WTF::Logger::LogSiteIdentifier *)&v51, "Cancelling pending fullscreen request.");
    }
    if (v4)
    {
      if (*(_DWORD *)(v4 + 24) != 2)
      {
        *(_DWORD *)(v4 + 24) -= 2;
        return result;
      }
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      {
        v24 = (WebCore::Node *)v4;
        return WebCore::Node::removedLastRef(v24, v21);
      }
    }
  }
  return result;
}

unsigned int *WebCore::FullscreenManager::exitFullscreen(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unsigned int *result;
  WTF *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  WebCore::FullscreenManager *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  WebCore::FullscreenManager *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  _BYTE v60[7];
  unsigned int *v61;
  WTF *v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;

  v4 = WebCore::Document::logger(*(WebCore::Document **)(*(_QWORD *)(a1 + 16) + 8));
  v5 = *(_QWORD *)(a1 + 136);
  v62 = (WTF *)"FullscreenManager";
  v63 = 18;
  v64 = "exitFullscreen";
  v65 = v5;
  if (*(_BYTE *)(v4 + 12))
  {
    if (WebCore::LogFullscreen && byte_1ECE7C238 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogFullscreen, 3, (WTF::Logger::LogSiteIdentifier *)&v62);
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  *(_DWORD *)(v7 + 24) += 2;
  WebCore::documentsToUnfullscreen((WebCore *)&v62, (WebCore::Document *)v7);
  v9 = *(_QWORD *)(a1 + 24);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 8)) == 0)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    if (*(_BYTE *)(v10 + 3362) || *(_BYTE *)(v10 + 3405))
    {
      while (1)
      {
        v51 = *(_QWORD *)(v10 + 528);
        if (!v51)
          break;
        v52 = *(_QWORD *)(v51 + 8);
        if (!v52)
          break;
        v53 = *(_QWORD *)(v52 + 120);
        if (!v53)
          break;
        v54 = *(_QWORD *)(v53 + 8);
        if (!v54)
          break;
        v10 = *(_QWORD *)(*(_QWORD *)(v54 + 40) + 8);
      }
    }
    else
    {
      v11 = *(_QWORD *)(v10 + 528);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
        {
          v13 = *(_QWORD *)(*(_QWORD *)(v12 + 128) + 8);
          if (v13 && *(_BYTE *)(v13 + 144) == 0)
          {
            v15 = *(_QWORD *)(v13 + 296);
            if (v15)
              v10 = v15;
          }
        }
      }
    }
  }
  *(_DWORD *)(v10 + 24) += 2;
  v16 = HIDWORD(v63);
  if (HIDWORD(v63))
  {
    v17 = v62;
    while (*(_QWORD *)v17 != v10)
    {
      v17 = (WTF *)((char *)v17 + 8);
      if (!--v16)
        goto LABEL_36;
    }
    v18 = *(_QWORD *)(v10 + 1992);
    if (!v18)
    {
      v46 = WTF::fastMalloc((WTF *)0x90);
      *(_QWORD *)v46 = 0;
      *(_DWORD *)(v46 + 8) = 0;
      v47 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v10);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 + 1, v47));
      *(_QWORD *)(v46 + 24) = 0;
      *(_QWORD *)(v46 + 32) = 0;
      *(_QWORD *)(v46 + 16) = v47;
      *(_BYTE *)(v46 + 40) = 0;
      *(_OWORD *)(v46 + 48) = 0u;
      *(_OWORD *)(v46 + 64) = 0u;
      *(_OWORD *)(v46 + 80) = 0u;
      *(_OWORD *)(v46 + 96) = 0u;
      *(_OWORD *)(v46 + 112) = 0u;
      *(_DWORD *)(v46 + 127) = 0;
      *(_QWORD *)(v46 + 136) = WTF::cryptographicallyRandomNumber<unsigned long long>();
      v49 = *(WebCore::FullscreenManager **)(v10 + 1992);
      *(_QWORD *)(v10 + 1992) = v46;
      if (v49)
      {
        WebCore::FullscreenManager::~FullscreenManager(v49, v8);
        if (*(_DWORD *)(v50 + 8))
        {
          *(_OWORD *)(v50 + 112) = 0u;
          *(_OWORD *)(v50 + 128) = 0u;
          *(_OWORD *)(v50 + 80) = 0u;
          *(_OWORD *)(v50 + 96) = 0u;
          *(_OWORD *)(v50 + 48) = 0u;
          *(_OWORD *)(v50 + 64) = 0u;
          *(_OWORD *)(v50 + 16) = 0u;
          *(_OWORD *)(v50 + 32) = 0u;
          *(_OWORD *)v50 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v50, v8);
        }
      }
      v18 = *(_QWORD *)(v10 + 1992);
    }
    v19 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v18 + 16) + 8) + 3096);
    if (v19)
    {
      v20 = 0;
      while (1)
      {
        v21 = *(_QWORD *)(*v19 + 48);
        if ((v21 & 0x40000000000000) != 0 && (v20 & 1) != 0)
          break;
        v20 |= (v21 >> 54) & 1;
        v19 = (_QWORD *)v19[2];
        if (!v19)
        {
          if ((v20 & 1) == 0)
            break;
          *(_DWORD *)(v10 + 24) += 2;
          if (*(_DWORD *)(v7 + 24) == 2)
          {
            if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v7, v8);
            v22 = 0;
          }
          else
          {
            v22 = 0;
            *(_DWORD *)(v7 + 24) -= 2;
          }
          v7 = v10;
          goto LABEL_37;
        }
      }
    }
  }
LABEL_36:
  v22 = 1;
LABEL_37:
  v23 = *(_QWORD *)(v7 + 1992);
  if (!v23)
  {
    v41 = WTF::fastMalloc((WTF *)0x90);
    *(_QWORD *)v41 = 0;
    *(_DWORD *)(v41 + 8) = 0;
    v42 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v7);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
    *(_QWORD *)(v41 + 24) = 0;
    *(_QWORD *)(v41 + 32) = 0;
    *(_QWORD *)(v41 + 16) = v42;
    *(_BYTE *)(v41 + 40) = 0;
    *(_OWORD *)(v41 + 48) = 0u;
    *(_OWORD *)(v41 + 64) = 0u;
    *(_OWORD *)(v41 + 80) = 0u;
    *(_OWORD *)(v41 + 96) = 0u;
    *(_OWORD *)(v41 + 112) = 0u;
    *(_DWORD *)(v41 + 127) = 0;
    *(_QWORD *)(v41 + 136) = WTF::cryptographicallyRandomNumber<unsigned long long>();
    v44 = *(WebCore::FullscreenManager **)(v7 + 1992);
    *(_QWORD *)(v7 + 1992) = v41;
    if (v44)
    {
      WebCore::FullscreenManager::~FullscreenManager(v44, v8);
      if (*(_DWORD *)(v45 + 8))
      {
        *(_OWORD *)(v45 + 112) = 0u;
        *(_OWORD *)(v45 + 128) = 0u;
        *(_OWORD *)(v45 + 80) = 0u;
        *(_OWORD *)(v45 + 96) = 0u;
        *(_OWORD *)(v45 + 48) = 0u;
        *(_OWORD *)(v45 + 64) = 0u;
        *(_OWORD *)(v45 + 16) = 0u;
        *(_OWORD *)(v45 + 32) = 0u;
        *(_OWORD *)v45 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v45, v8);
      }
    }
    v23 = *(_QWORD *)(v7 + 1992);
  }
  v24 = *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8);
  v25 = *(uint64_t **)(v24 + 3096);
  if (v25)
  {
    v55 = 0;
    v56 = (uint64_t *)(v24 + 3104);
    while (1)
    {
      v57 = v55 ? v55 + 1 : v56;
      v55 = (uint64_t *)*v57;
      v58 = *v55;
      if ((*(_BYTE *)(*v55 + 54) & 0x40) != 0)
        break;
      if (v55 == v25)
        goto LABEL_39;
    }
    v59 = *(_DWORD *)(v58 + 24);
    *(_DWORD *)(v58 + 24) = v59 + 2;
    if ((*(_BYTE *)(v58 + 22) & 8) == 0)
    {
      WebCore::FullscreenManager::addDocumentToFullscreenChangeEventQueue((WebCore::FullscreenManager *)a1, (WebCore::Document *)v7);
      WebCore::Element::setFullscreenFlag((WebCore::Element *)v58, 0);
      if ((*(_WORD *)(v58 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v58 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
      {
        *(_BYTE *)(v58 + 152) = 0;
      }
      WebCore::Element::removeFromTopLayer((WebCore::Element *)v58);
      v59 = *(_DWORD *)(v58 + 24) - 2;
    }
    if (v59)
    {
      *(_DWORD *)(v58 + 24) = v59;
    }
    else if ((*(_WORD *)(v58 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v58, v8);
    }
  }
LABEL_39:
  *(_BYTE *)(a1 + 40) = 1;
  v26 = WebCore::Document::eventLoop((WebCore::Document *)v7, (WTF::StringImpl *)v8);
  v27 = *a2;
  *a2 = 0;
  v28 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    goto LABEL_111;
  v28 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v28 = 1;
  *(_QWORD *)(v28 + 8) = a1;
  v30 = *(unsigned int **)a1;
  *(_QWORD *)a1 = v28;
  if (!v30)
    goto LABEL_111;
  do
  {
    v31 = __ldaxr(v30);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, v30));
  if (!v32)
  {
    atomic_store(1u, v30);
    WTF::fastFree((WTF *)v30, v29);
  }
  v28 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
LABEL_111:
    do
      v33 = __ldaxr((unsigned int *)v28);
    while (__stlxr(v33 + 1, (unsigned int *)v28));
  }
  v34 = *(_QWORD *)(a1 + 136);
  v35 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v35 = &off_1E33A5150;
  *(_QWORD *)(v35 + 8) = a1;
  *(_QWORD *)(v35 + 16) = v27;
  *(_QWORD *)(v35 + 24) = v28;
  *(_BYTE *)(v35 + 32) = v22;
  *(_DWORD *)(v35 + 33) = *(_DWORD *)v60;
  *(_DWORD *)(v35 + 36) = *(_DWORD *)&v60[3];
  *(_QWORD *)(v35 + 40) = "FullscreenManager";
  *(_QWORD *)(v35 + 48) = 18;
  *(_QWORD *)(v35 + 56) = "exitFullscreen";
  *(_QWORD *)(v35 + 64) = v34;
  v61 = (unsigned int *)v35;
  WebCore::EventLoopTaskGroup::queueTask(v26, 9, (uint64_t *)&v61);
  result = v61;
  v61 = 0;
  if (result)
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v10, v36);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  v38 = v62;
  if (HIDWORD(v63))
  {
    v39 = 8 * HIDWORD(v63);
    v40 = v62;
    do
    {
      result = *(unsigned int **)v40;
      *(_QWORD *)v40 = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result, v36);
        }
        else
        {
          result[6] -= 2;
        }
      }
      v40 = (WTF *)((char *)v40 + 8);
      v39 -= 8;
    }
    while (v39);
  }
  if (v38)
    result = (unsigned int *)WTF::fastFree(v38, v36);
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v7, v36);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  return result;
}

void WebCore::documentsToUnfullscreen(WebCore *this, WebCore::Document *a2)
{
  void *v4;
  _QWORD *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  char v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  WebCore::FullscreenManager *v27;
  uint64_t v28;

  *((_DWORD *)a2 + 6) += 2;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)this = v5;
  v6 = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6 + 2;
  *v5 = a2;
  *((_QWORD *)this + 1) = 0x100000001;
  if (v6)
  {
    *((_DWORD *)a2 + 6) = v6;
  }
  else if ((*((_WORD *)a2 + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(a2, v4);
  }
  v7 = 1;
  do
  {
    if (!v7)
    {
LABEL_50:
      __break(0xC471u);
      JUMPOUT(0x1959F1F28);
    }
    v8 = v5[v7 - 1];
    *(_DWORD *)(v8 + 24) += 2;
    v9 = *(_QWORD *)(v8 + 1992);
    if (!v9)
    {
      v24 = WTF::fastMalloc((WTF *)0x90);
      *(_QWORD *)v24 = 0;
      *(_DWORD *)(v24 + 8) = 0;
      v25 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 + 1, v25));
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0;
      *(_QWORD *)(v24 + 16) = v25;
      *(_BYTE *)(v24 + 40) = 0;
      *(_OWORD *)(v24 + 48) = 0u;
      *(_OWORD *)(v24 + 64) = 0u;
      *(_OWORD *)(v24 + 80) = 0u;
      *(_OWORD *)(v24 + 96) = 0u;
      *(_OWORD *)(v24 + 112) = 0u;
      *(_DWORD *)(v24 + 127) = 0;
      *(_QWORD *)(v24 + 136) = WTF::cryptographicallyRandomNumber<unsigned long long>();
      v27 = *(WebCore::FullscreenManager **)(v8 + 1992);
      *(_QWORD *)(v8 + 1992) = v24;
      if (v27)
      {
        WebCore::FullscreenManager::~FullscreenManager(v27, v4);
        if (*(_DWORD *)(v28 + 8))
        {
          *(_OWORD *)(v28 + 112) = 0u;
          *(_OWORD *)(v28 + 128) = 0u;
          *(_OWORD *)(v28 + 80) = 0u;
          *(_OWORD *)(v28 + 96) = 0u;
          *(_OWORD *)(v28 + 48) = 0u;
          *(_OWORD *)(v28 + 64) = 0u;
          *(_OWORD *)(v28 + 16) = 0u;
          *(_OWORD *)(v28 + 32) = 0u;
          *(_OWORD *)v28 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v28, v4);
        }
      }
      v9 = *(_QWORD *)(v8 + 1992);
    }
    v10 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 8) + 3096);
    if (!v10)
      goto LABEL_31;
    v11 = 0;
    v12 = v7;
    do
    {
      v13 = *(_QWORD *)(*v10 + 48);
      if ((v13 & 0x40000000000000) != 0 && (v11 & 1) != 0)
        goto LABEL_30;
      v11 |= (v13 >> 54) & 1;
      v10 = (_QWORD *)v10[2];
    }
    while (v10);
    if ((v11 & 1) == 0)
    {
LABEL_30:
      if (!v8)
        return;
LABEL_31:
      v23 = 0;
      goto LABEL_32;
    }
    v14 = *(_QWORD *)(v8 + 528);
    if (!v14)
      goto LABEL_31;
    v15 = *(_QWORD *)(v14 + 8);
    if (!v15)
      goto LABEL_31;
    v16 = *(_QWORD *)(v15 + 120);
    if (!v16)
      goto LABEL_31;
    v17 = *(_QWORD *)(v16 + 8);
    if (!v17
      || *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24)
      && *(_BYTE *)(v17 + 152))
    {
      goto LABEL_31;
    }
    v18 = *(_QWORD *)(*(_QWORD *)(v17 + 40) + 8);
    if (v7 == *((_DWORD *)this + 2))
    {
      v19 = v7 + ((unint64_t)v7 >> 2);
      if (v19 >= 0x10)
        v20 = v19 + 1;
      else
        v20 = 16;
      if (v20 <= (unint64_t)v7 + 1)
        v21 = v7 + 1;
      else
        v21 = v20;
      if (v21 >> 29)
        goto LABEL_50;
      v22 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v21));
      *((_DWORD *)this + 2) = v21;
      *(_QWORD *)this = v22;
      memcpy(v22, v5, 8 * v7);
      if (v5)
      {
        if (v22 == v5)
        {
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
        }
        WTF::fastFree((WTF *)v5, v4);
        v22 = *(_QWORD **)this;
      }
    }
    else
    {
      v22 = v5;
    }
    ++v7;
    *(_DWORD *)(v18 + 24) += 2;
    v22[v12] = v18;
    *((_DWORD *)this + 3) = v7;
    v23 = 1;
    v5 = v22;
LABEL_32:
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, v4);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  while ((v23 & 1) != 0);
}

uint64_t WebCore::FullscreenManager::addDocumentToFullscreenChangeEventQueue(WebCore::FullscreenManager *this, WebCore::Document *a2)
{
  WebCore::Document *v2;
  uint64_t v4;
  uint64_t v5;
  WebCore::Document **v6;
  WebCore::Document *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  void *v16;
  WebCore::FullscreenManager *v17;
  uint64_t v18;
  void *v19;
  WebCore::Document **v20;
  WebCore::Document **v21;
  WebCore::Document ***v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  void *v26;
  WebCore::FullscreenManager *v27;
  uint64_t v28;
  void *v29;
  WebCore::Document *v30;
  uint64_t v31;
  char v32;
  int v33;

  v2 = a2;
  v4 = *((_QWORD *)a2 + 249);
  if (!v4)
  {
    v13 = WTF::fastMalloc((WTF *)0x90);
    *(_QWORD *)v13 = 0;
    *(_DWORD *)(v13 + 8) = 0;
    v14 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v2);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    *(_QWORD *)(v13 + 24) = 0;
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 16) = v14;
    *(_BYTE *)(v13 + 40) = 0;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_OWORD *)(v13 + 64) = 0u;
    *(_OWORD *)(v13 + 80) = 0u;
    *(_OWORD *)(v13 + 96) = 0u;
    *(_OWORD *)(v13 + 112) = 0u;
    *(_DWORD *)(v13 + 127) = 0;
    *(_QWORD *)(v13 + 136) = WTF::cryptographicallyRandomNumber<unsigned long long>();
    v17 = (WebCore::FullscreenManager *)*((_QWORD *)v2 + 249);
    *((_QWORD *)v2 + 249) = v13;
    if (v17)
    {
      WebCore::FullscreenManager::~FullscreenManager(v17, v16);
      if (*(_DWORD *)(v18 + 8))
      {
        *(_OWORD *)(v18 + 112) = 0u;
        *(_OWORD *)(v18 + 128) = 0u;
        *(_OWORD *)(v18 + 80) = 0u;
        *(_OWORD *)(v18 + 96) = 0u;
        *(_OWORD *)(v18 + 48) = 0u;
        *(_OWORD *)(v18 + 64) = 0u;
        *(_OWORD *)(v18 + 16) = 0u;
        *(_OWORD *)(v18 + 32) = 0u;
        *(_OWORD *)v18 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v18, v19);
      }
    }
    v4 = *((_QWORD *)v2 + 249);
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8);
  v6 = *(WebCore::Document ***)(v5 + 3096);
  if (v6)
  {
    v20 = 0;
    v21 = (WebCore::Document **)(v5 + 3104);
    while (1)
    {
      v22 = (WebCore::Document ***)(v20 ? v20 + 1 : v21);
      v20 = *v22;
      v7 = *v20;
      if ((*((_BYTE *)*v20 + 54) & 0x40) != 0)
        break;
      if (v20 == v6)
      {
        if (!v4)
        {
          v23 = WTF::fastMalloc((WTF *)0x90);
          *(_QWORD *)v23 = 0;
          *(_DWORD *)(v23 + 8) = 0;
          v24 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v2);
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 + 1, v24));
          *(_QWORD *)(v23 + 24) = 0;
          *(_QWORD *)(v23 + 32) = 0;
          *(_QWORD *)(v23 + 16) = v24;
          *(_BYTE *)(v23 + 40) = 0;
          *(_OWORD *)(v23 + 48) = 0u;
          *(_OWORD *)(v23 + 64) = 0u;
          *(_OWORD *)(v23 + 80) = 0u;
          *(_OWORD *)(v23 + 96) = 0u;
          *(_OWORD *)(v23 + 112) = 0u;
          *(_DWORD *)(v23 + 127) = 0;
          *(_QWORD *)(v23 + 136) = WTF::cryptographicallyRandomNumber<unsigned long long>();
          v27 = (WebCore::FullscreenManager *)*((_QWORD *)v2 + 249);
          *((_QWORD *)v2 + 249) = v23;
          if (v27)
          {
            WebCore::FullscreenManager::~FullscreenManager(v27, v26);
            if (*(_DWORD *)(v28 + 8))
            {
              *(_OWORD *)(v28 + 112) = 0u;
              *(_OWORD *)(v28 + 128) = 0u;
              *(_OWORD *)(v28 + 80) = 0u;
              *(_OWORD *)(v28 + 96) = 0u;
              *(_OWORD *)(v28 + 48) = 0u;
              *(_OWORD *)(v28 + 64) = 0u;
              *(_OWORD *)(v28 + 16) = 0u;
              *(_OWORD *)(v28 + 32) = 0u;
              *(_OWORD *)v28 = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v28, v29);
            }
          }
          v4 = *((_QWORD *)v2 + 249);
        }
        goto LABEL_3;
      }
    }
  }
  else
  {
LABEL_3:
    v7 = *(WebCore::Document **)(v4 + 56);
  }
  if (v7)
    v2 = v7;
  *((_DWORD *)v2 + 6) += 2;
  {
    WebCore::GCReachableRefMap::map(void)::map = 0;
  }
  v30 = v2;
  v33 = 0;
  result = (uint64_t)WTF::HashMap<WebCore::EventTarget *,unsigned int,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&WebCore::GCReachableRefMap::map(void)::map, &v30, &v33, (uint64_t)&v31);
  ++*(_DWORD *)(v31 + 8);
  if (v32)
    *((_QWORD *)v2 + 2) |= 0x4000000000000uLL;
  v10 = *((_QWORD *)this + 8);
  v9 = *((_QWORD *)this + 9);
  if (v10)
  {
    if (v9 + 1 != v10)
      goto LABEL_19;
    goto LABEL_18;
  }
  v11 = *((unsigned int *)this + 22);
  if (!v9)
  {
    if ((_DWORD)v11)
    {
      v9 = 0;
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v9 == v11 - 1)
  {
LABEL_18:
    result = WTF::Deque<WebCore::GCReachableRef<WebCore::Node,void>,0ul>::expandCapacity((uint64_t)this + 64);
    v9 = *((_QWORD *)this + 9);
  }
LABEL_19:
  *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v9) = v2;
  if (v9 == *((unsigned int *)this + 22) - 1)
    v12 = 0;
  else
    v12 = v9 + 1;
  *((_QWORD *)this + 9) = v12;
  return result;
}

void WebCore::FullscreenManager::finishExitFullscreen(WebCore::FullscreenManager *a1, WebCore::Document *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v12;
  WebCore::FullscreenManager *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unint64_t v26;
  WTF *v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  void *v46;
  WebCore::FullscreenManager *v47;
  uint64_t v48;
  void *v49;
  WTF *v50;
  WTF *v51;
  WTF *v52;
  WTF *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  WTF *v62;
  unsigned int v63;
  void *v64;
  WTF *v65;
  unsigned int v66;
  uint64_t v67;
  WebCore::Document **v68;
  WebCore::Document **v69;
  WebCore::Document *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  void *v78;
  WebCore::FullscreenManager *v79;
  uint64_t v80;
  void *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  WebCore::Document **v86;
  WebCore::Document *v87;
  void *v88;
  unint64_t v89;
  void *v90;
  WTF *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  WTF *v95;
  unsigned int v96;

  v6 = *((_QWORD *)a2 + 249);
  if (!v6)
  {
    v9 = WTF::fastMalloc((WTF *)0x90);
    *(_QWORD *)v9 = 0;
    *(_DWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 16) = v10;
    *(_BYTE *)(v9 + 40) = 0;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    *(_OWORD *)(v9 + 80) = 0u;
    *(_OWORD *)(v9 + 96) = 0u;
    *(_OWORD *)(v9 + 112) = 0u;
    *(_DWORD *)(v9 + 127) = 0;
    *(_QWORD *)(v9 + 136) = WTF::cryptographicallyRandomNumber<unsigned long long>();
    v13 = (WebCore::FullscreenManager *)*((_QWORD *)a2 + 249);
    *((_QWORD *)a2 + 249) = v9;
    if (v13)
    {
      WebCore::FullscreenManager::~FullscreenManager(v13, v12);
      if (*(_DWORD *)(v14 + 8))
      {
        *(_OWORD *)(v14 + 112) = 0u;
        *(_OWORD *)(v14 + 128) = 0u;
        *(_OWORD *)(v14 + 80) = 0u;
        *(_OWORD *)(v14 + 96) = 0u;
        *(_OWORD *)(v14 + 48) = 0u;
        *(_OWORD *)(v14 + 64) = 0u;
        *(_OWORD *)(v14 + 16) = 0u;
        *(_OWORD *)(v14 + 32) = 0u;
        *(_OWORD *)v14 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v14, v15);
      }
    }
    v6 = *((_QWORD *)a2 + 249);
  }
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8);
  v8 = *(_QWORD *)(v7 + 3096);
  if (!v8)
    return;
  v16 = 0;
  v17 = v7 + 3104;
  while (1)
  {
    v18 = (uint64_t *)(v16 ? v16 + 8 : v17);
    v16 = *v18;
    if ((*(_BYTE *)(*(_QWORD *)v16 + 54) & 0x40) != 0)
      break;
    if (v16 == v8)
      return;
  }
  v19 = *((_QWORD *)a2 + 66);
  if (v19)
  {
    v20 = *(_QWORD **)(v19 + 8);
    if (v20)
    {
      i = v20[11];
      if (i)
        goto LABEL_26;
      v22 = *(_QWORD *)(v20[6] + 8);
      if (v22)
      {
        for (i = v20[9]; !i; i = *(_QWORD *)(v22 + 72))
        {
          v23 = *(_QWORD *)(v22 + 56);
          if (!v23)
            goto LABEL_89;
          v22 = *(_QWORD *)(v23 + 8);
          if (!v22)
            goto LABEL_89;
        }
LABEL_26:
        v24 = (unsigned int *)(i + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 + 1, v24));
        v94 = 0;
        v26 = 0;
        v27 = 0;
        while (1)
        {
          v28 = (unsigned int *)(i + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 + 1, v28));
          if (!*(_BYTE *)(i + 144))
            break;
          do
          {
            v63 = __ldaxr(v28);
            v35 = --v63 == 0;
          }
          while (__stlxr(v63, v28));
LABEL_36:
          if (v35)
          {
            atomic_store(1u, v28);
            v50 = (WTF *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v50 = off_1E31FE290;
            *((_QWORD *)v50 + 1) = v28;
            v95 = v50;
            WTF::ensureOnMainThread();
            v51 = v95;
            v95 = 0;
            if (v51)
              (*(void (**)(WTF *))(*(_QWORD *)v51 + 8))(v51);
          }
          if (*(_QWORD *)(i + 88))
          {
            i = *(_QWORD *)(i + 88);
          }
          else
          {
            v36 = *(_QWORD *)(*(_QWORD *)(i + 48) + 8);
            if (!v36)
              goto LABEL_44;
            i = *(_QWORD *)(i + 72);
            if (!i)
            {
              while (1)
              {
                v37 = *(_QWORD *)(v36 + 56);
                if (!v37)
                  break;
                v36 = *(_QWORD *)(v37 + 8);
                if (!v36)
                  break;
                i = *(_QWORD *)(v36 + 72);
                if (i)
                  goto LABEL_46;
              }
LABEL_44:
              i = 0;
              v38 = 1;
              goto LABEL_49;
            }
          }
LABEL_46:
          v39 = (unsigned int *)(i + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 + 1, v39));
          v38 = 0;
          do
          {
LABEL_49:
            v41 = __ldaxr(v28);
            v42 = v41 - 1;
          }
          while (__stlxr(v42, v28));
          if (!v42)
          {
            atomic_store(1u, v28);
            v52 = (WTF *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v52 = off_1E31FE290;
            *((_QWORD *)v52 + 1) = v28;
            v95 = v52;
            WTF::ensureOnMainThread();
            v53 = v95;
            v95 = 0;
            if (v53)
              (*(void (**)(WTF *))(*(_QWORD *)v53 + 8))(v53);
          }
          if ((v38 & 1) != 0)
            goto LABEL_90;
        }
        v30 = *(_QWORD *)(i + 296);
        if (!v30)
          goto LABEL_140;
        v31 = *(_QWORD *)(v30 + 1992);
        if (!v31)
        {
          v43 = WTF::fastMalloc((WTF *)0x90);
          *(_QWORD *)v43 = 0;
          *(_DWORD *)(v43 + 8) = 0;
          v44 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v30);
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 + 1, v44));
          *(_QWORD *)(v43 + 24) = 0;
          *(_QWORD *)(v43 + 32) = 0;
          *(_QWORD *)(v43 + 16) = v44;
          *(_BYTE *)(v43 + 40) = 0;
          *(_OWORD *)(v43 + 48) = 0u;
          *(_OWORD *)(v43 + 64) = 0u;
          *(_OWORD *)(v43 + 80) = 0u;
          *(_OWORD *)(v43 + 96) = 0u;
          *(_OWORD *)(v43 + 112) = 0u;
          *(_DWORD *)(v43 + 127) = 0;
          *(_QWORD *)(v43 + 136) = WTF::cryptographicallyRandomNumber<unsigned long long>();
          v47 = *(WebCore::FullscreenManager **)(v30 + 1992);
          *(_QWORD *)(v30 + 1992) = v43;
          if (v47)
          {
            WebCore::FullscreenManager::~FullscreenManager(v47, v46);
            if (*(_DWORD *)(v48 + 8))
            {
              *(_OWORD *)(v48 + 112) = 0u;
              *(_OWORD *)(v48 + 128) = 0u;
              *(_OWORD *)(v48 + 80) = 0u;
              *(_OWORD *)(v48 + 96) = 0u;
              *(_OWORD *)(v48 + 48) = 0u;
              *(_OWORD *)(v48 + 64) = 0u;
              *(_OWORD *)(v48 + 16) = 0u;
              *(_OWORD *)(v48 + 32) = 0u;
              *(_OWORD *)v48 = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v48, v49);
            }
          }
          v31 = *(_QWORD *)(v30 + 1992);
        }
        v32 = *(_QWORD *)(*(_QWORD *)(v31 + 16) + 8);
        v33 = *(_QWORD *)(v32 + 3096);
        if (!v33)
        {
LABEL_140:
          do
          {
LABEL_35:
            v34 = __ldaxr(v28);
            v35 = --v34 == 0;
          }
          while (__stlxr(v34, v28));
          goto LABEL_36;
        }
        v54 = 0;
        v55 = v32 + 3104;
        while (1)
        {
          v56 = (uint64_t *)(v54 ? v54 + 8 : v55);
          v54 = *v56;
          if ((*(_BYTE *)(*(_QWORD *)v54 + 54) & 0x40) != 0)
            break;
          if (v54 == v33)
            goto LABEL_35;
        }
        v57 = *(_QWORD *)(i + 296);
        if (v94 == 1)
          goto LABEL_74;
        if (v94)
        {
LABEL_86:
          *(_DWORD *)(v57 + 24) += 2;
          --v94;
          *((_QWORD *)v27 + v94) = v57;
          goto LABEL_35;
        }
        if (!v26)
        {
LABEL_74:
          v58 = v26 + (v26 >> 2);
          if (v58 <= 0xF)
            v58 = 15;
          if (v58 >= 0x1FFFFFFF)
          {
            __break(0xC471u);
            return;
          }
          v59 = v58 + 1;
          v60 = WTF::fastMalloc((WTF *)(8 * (v58 + 1)));
          v62 = (WTF *)v60;
          if (v94)
          {
            memcpy((void *)(v60 + 8 * (v59 + v94 - v26)), (char *)v27 + 8 * v94, 8 * v26 - 8 * v94);
            v94 = v59 + v94 - v26;
          }
          else
          {
            v94 = 0;
          }
          v26 = v59;
          if (v27)
          {
            if (v62 == v27)
            {
              v62 = 0;
              v26 = 0;
            }
            WTF::fastFree(v27, v61);
          }
          v27 = v62;
          if (v94)
            goto LABEL_86;
        }
        v94 = v26;
        goto LABEL_86;
      }
    }
  }
LABEL_89:
  v27 = 0;
  v26 = 0;
  v94 = 0;
LABEL_90:
  WebCore::documentsToUnfullscreen((WebCore *)&v95, a2);
  v65 = v95;
  v66 = v96;
  v67 = 8 * v96;
  if (v96)
  {
    if ((a3 & 1) != 0)
    {
      v68 = (WebCore::Document **)((char *)v95 + 8 * v96);
      v69 = (WebCore::Document **)v95;
      do
      {
        WebCore::FullscreenManager::addDocumentToFullscreenChangeEventQueue(a1, *v69);
        v70 = *v69;
        v71 = *((_QWORD *)*v69 + 249);
        if (!v71)
        {
          v75 = WTF::fastMalloc((WTF *)0x90);
          *(_QWORD *)v75 = 0;
          v93 = v75;
          *(_DWORD *)(v75 + 8) = 0;
          v76 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v70);
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 + 1, v76));
          *(_QWORD *)(v93 + 24) = 0;
          *(_QWORD *)(v93 + 32) = 0;
          *(_QWORD *)(v93 + 16) = v76;
          *(_BYTE *)(v93 + 40) = 0;
          *(_OWORD *)(v93 + 48) = 0u;
          *(_OWORD *)(v93 + 64) = 0u;
          *(_OWORD *)(v93 + 80) = 0u;
          *(_OWORD *)(v93 + 96) = 0u;
          *(_OWORD *)(v93 + 112) = 0u;
          *(_DWORD *)(v93 + 127) = 0;
          *(_QWORD *)(v93 + 136) = WTF::cryptographicallyRandomNumber<unsigned long long>();
          v79 = (WebCore::FullscreenManager *)*((_QWORD *)v70 + 249);
          *((_QWORD *)v70 + 249) = v93;
          if (v79)
          {
            WebCore::FullscreenManager::~FullscreenManager(v79, v78);
            if (*(_DWORD *)(v80 + 8))
            {
              *(_OWORD *)(v80 + 112) = 0u;
              *(_OWORD *)(v80 + 128) = 0u;
              *(_OWORD *)(v80 + 80) = 0u;
              *(_OWORD *)(v80 + 96) = 0u;
              *(_OWORD *)(v80 + 48) = 0u;
              *(_OWORD *)(v80 + 64) = 0u;
              *(_OWORD *)(v80 + 16) = 0u;
              *(_OWORD *)(v80 + 32) = 0u;
              *(_OWORD *)v80 = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v80, v81);
            }
          }
          v71 = *((_QWORD *)v70 + 249);
        }
        v72 = *(_QWORD *)(*(_QWORD *)(v71 + 16) + 8);
        v73 = *(_QWORD **)(v72 + 3096);
        if (v73)
        {
          v82 = 0;
          v83 = (_QWORD *)(v72 + 3104);
          do
          {
            if (v82)
              v84 = v82 + 1;
            else
              v84 = v83;
            v82 = (_QWORD *)*v84;
            v74 = *v82;
            if ((*(_BYTE *)(*v82 + 54) & 0x40) != 0)
              break;
            v74 = 0;
          }
          while (v82 != v73);
        }
        else
        {
          v74 = 0;
        }
        WebCore::Element::setFullscreenFlag((WebCore::Element *)v74, 0);
        if ((*(_WORD *)(v74 + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v74 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
        {
          *(_BYTE *)(v74 + 152) = 0;
        }
        WebCore::Element::removeFromTopLayer((WebCore::Element *)v74);
        ++v69;
      }
      while (v69 != v68);
    }
    else
    {
      v85 = 8 * v96;
      v86 = (WebCore::Document **)v95;
      do
      {
        WebCore::FullscreenManager::addDocumentToFullscreenChangeEventQueue(a1, *v86);
        v87 = *v86++;
        WebCore::FullscreenManager::finishExitFullscreen(WebCore::Document &,WebCore::FullscreenManager::ExitMode)::$_0::operator()(*((_QWORD *)v87 + 387), v88);
        v85 -= 8;
      }
      while (v85);
    }
  }
  if (v94)
  {
    v89 = v94;
    do
    {
      WebCore::FullscreenManager::addDocumentToFullscreenChangeEventQueue(a1, *((WebCore::Document **)v27 + v89));
      WebCore::FullscreenManager::finishExitFullscreen(WebCore::Document &,WebCore::FullscreenManager::ExitMode)::$_0::operator()(*(_QWORD *)(*((_QWORD *)v27 + v89) + 3096), v90);
      v89 += v26 + 1;
      do
        v89 -= v26;
      while (v89 >= v26);
    }
    while (v89);
  }
  if (v66)
  {
    v91 = v65;
    do
    {
      v92 = *(_QWORD *)v91;
      *(_QWORD *)v91 = 0;
      if (v92)
      {
        if (*(_DWORD *)(v92 + 24) == 2)
        {
          if ((*(_WORD *)(v92 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v92, v64);
        }
        else
        {
          *(_DWORD *)(v92 + 24) -= 2;
        }
      }
      v91 = (WTF *)((char *)v91 + 8);
      v67 -= 8;
    }
    while (v67);
  }
  if (v65)
    WTF::fastFree(v65, v64);
  if (v94)
    WTF::VectorTypeOperations<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>>::destruct((unsigned int *)v27 + 2 * v94, (char *)v27 + 8 * v26);
  if (v27)
    WTF::fastFree(v27, v64);
}

uint64_t WebCore::FullscreenManager::finishExitFullscreen(WebCore::Document &,WebCore::FullscreenManager::ExitMode)::$_0::operator()(uint64_t result, void *a2)
{
  unint64_t v2;
  unsigned int v3;
  WTF *v4;
  WebCore::Element *v5;
  uint64_t v6;
  WebCore::Element *v7;
  uint64_t v8;
  WebCore::Element *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  if (result)
  {
    v2 = result;
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = *(WebCore::Element **)v2;
      if ((*(_BYTE *)(*(_QWORD *)v2 + 54) & 0x40) != 0)
      {
        result = (uint64_t)WebCore::Element::setFullscreenFlag(*(WebCore::Element **)v2, 0);
        if ((*((_WORD *)v5 + 14) & 0x10) != 0
          && *(_QWORD *)(*((_QWORD *)v5 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
        {
          *((_BYTE *)v5 + 152) = 0;
        }
        v6 = HIDWORD(v12);
        if (HIDWORD(v12) == (_DWORD)v12)
        {
          result = WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v11, HIDWORD(v12) + 1, v2);
          v6 = HIDWORD(v12);
          v4 = v11;
          v7 = *(WebCore::Element **)result;
          *(_DWORD *)(*(_QWORD *)result + 24) += 2;
        }
        else
        {
          v4 = v11;
          v7 = *(WebCore::Element **)v2;
          *(_DWORD *)(*(_QWORD *)v2 + 24) += 2;
        }
        *((_QWORD *)v4 + v6) = v7;
        v3 = v6 + 1;
        HIDWORD(v12) = v3;
      }
      v2 = *(_QWORD *)(v2 + 16);
    }
    while (v2);
    if (!v3)
      goto LABEL_16;
    v8 = 8 * v3;
    do
    {
      v9 = *(WebCore::Element **)v4;
      v4 = (WTF *)((char *)v4 + 8);
      result = (uint64_t)WebCore::Element::removeFromTopLayer(v9);
      v8 -= 8;
    }
    while (v8);
    v4 = v11;
    if (!HIDWORD(v12))
    {
LABEL_16:
      if (!v4)
        return result;
LABEL_27:
      v11 = 0;
      LODWORD(v12) = 0;
      return WTF::fastFree(v4, a2);
    }
    v10 = 8 * HIDWORD(v12);
    do
    {
      result = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
      v4 = (WTF *)((char *)v4 + 8);
      v10 -= 8;
    }
    while (v10);
    v4 = v11;
    if (v11)
      goto LABEL_27;
  }
  return result;
}

uint64_t WebCore::FullscreenManager::isFullscreenEnabled(WebCore::FullscreenManager *this)
{
  uint64_t v1;
  void *v2;
  uint64_t isFeatureEnabled;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  *(_DWORD *)(v1 + 24) += 2;
  isFeatureEnabled = WebCore::PermissionsPolicy::isFeatureEnabled(9u, (_QWORD *)v1, 1);
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1, v2);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  return isFeatureEnabled;
}

uint64_t WebCore::FullscreenManager::willEnterFullscreen(WebCore::FullscreenManager *this, WebCore::Element *a2, WTF::String *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Element *v11;
  WebCore::Element *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  unint64_t v25;
  WTF *v26;
  unint64_t v27;
  unint64_t v28;
  WebCore::Element *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  WebCore::Node *v43;
  uint64_t v44;
  WebCore::RenderObject *v45;
  WebCore::RenderObject *v46;
  WTF *v47;
  WebCore::RenderBlock *v48;
  uint64_t v49;
  WebCore::RenderElement *v50;
  WebCore::RenderElement *v51;
  void *v52;
  int v53;
  void *v54;
  WTF *v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  WebCore::Quirks *v59;
  void *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WebCore::Element *v67;
  const char *v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;

  v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (*(_BYTE *)(v4 + 3362))
  {
    v5 = WebCore::Document::logger((WebCore::Document *)v4);
    v6 = *((_QWORD *)this + 17);
    v68 = "FullscreenManager";
    v69 = 18;
    v70 = "willEnterFullscreen";
    v71 = v6;
    if (*(_BYTE *)(v5 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [42]>((uint64_t)&WebCore::LogFullscreen, 1u, (WTF::Logger::LogSiteIdentifier *)&v68, "Document in the BackForwardCache; bailing");
    return 0;
  }
  v7 = *(_QWORD *)(v4 + 528);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 8)) == 0 || (v9 = *(_QWORD *)(v8 + 24)) == 0 || !*(_QWORD *)(v9 + 8))
  {
    v16 = WebCore::Document::logger((WebCore::Document *)v4);
    v17 = *((_QWORD *)this + 17);
    v68 = "FullscreenManager";
    v69 = 18;
    v70 = "willEnterFullscreen";
    v71 = v17;
    if (*(_BYTE *)(v16 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [36]>((uint64_t)&WebCore::LogFullscreen, 1u, (WTF::Logger::LogSiteIdentifier *)&v68, "Document no longer in page; bailing");
    return 0;
  }
  v11 = a2;
  if ((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v64 = *(_QWORD *)((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0xE8);
    if (v64)
    {
      if (*(_BYTE *)(v64 + 1))
      {
        v65 = WebCore::Document::logger((WebCore::Document *)v4);
        v66 = *((_QWORD *)this + 17);
        v68 = "FullscreenManager";
        v69 = 18;
        v70 = "willEnterFullscreen";
        v71 = v66;
        if (*(_BYTE *)(v65 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogFullscreen, 1u, (WTF::Logger::LogSiteIdentifier *)&v68, "Element to fullscreen is an open popover; bailing.");
        return 0;
      }
    }
  }
  v12 = (WebCore::Element *)*((_QWORD *)this + 6);
  v13 = WebCore::Document::logger((WebCore::Document *)v4);
  if (v12 != v11)
  {
    v14 = *((_QWORD *)this + 17);
    v68 = "FullscreenManager";
    v69 = 18;
    v70 = "willEnterFullscreen";
    v71 = v14;
    if (*(_BYTE *)(v13 + 12) && WebCore::LogFullscreen && byte_1ECE7C238 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogFullscreen, 3u, (WTF::Logger::LogSiteIdentifier *)&v68, "Pending element mismatch; issuing exit fullscreen request");
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8)
                                                                                + 528)
                                                                    + 8)
                                                        + 24)
                                            + 8)
                                + 48)
                    + 16);
    (*(void (**)(uint64_t, WebCore::Element *))(*(_QWORD *)v15 + 1192))(v15, v11);
    return 0;
  }
  v19 = *((_QWORD *)this + 17);
  v68 = "FullscreenManager";
  v69 = 18;
  v70 = "willEnterFullscreen";
  v71 = v19;
  if (*(_BYTE *)(v13 + 12) && WebCore::LogFullscreen && byte_1ECE7C238 >= 3u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogFullscreen, 3, (WTF::Logger::LogSiteIdentifier *)&v68);
  if (((*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)v11 + 824))(v11) & 1) != 0)
  {
    *((_DWORD *)v11 + 6) += 2;
    v20 = *((_DWORD *)v11 + 270);
    if (v20 != 1 && v20 != 4)
      WebCore::HTMLMediaElement::setFullscreenMode(v11, a3);
    WebCore::Element::willBecomeFullscreenElement((unsigned int *)v11);
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11, v21);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
  else
  {
    WebCore::Element::willBecomeFullscreenElement((unsigned int *)v11);
  }
  v22 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v22)
  {
    if (*(_DWORD *)(v22 + 24) == 2)
    {
      if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v22, v21);
    }
    else
    {
      *(_DWORD *)(v22 + 24) -= 2;
    }
  }
  *((_DWORD *)v11 + 6) += 2;
  v23 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v11;
  if (v23)
  {
    if (*(_DWORD *)(v23 + 24) == 2)
    {
      if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v23, v21);
    }
    else
    {
      *(_DWORD *)(v23 + 24) -= 2;
    }
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  *((_DWORD *)v11 + 6) += 2;
  v67 = v11;
  do
  {
    v29 = v11;
    if (v28 != 1)
    {
      if (v28)
      {
        v33 = v28;
        goto LABEL_48;
      }
      if (v27)
        goto LABEL_47;
    }
    v30 = v27 + (v27 >> 2);
    if (v30 <= 0xF)
      v30 = 15;
    if (v30 >= 0x1FFFFFFF)
    {
LABEL_147:
      __break(0xC471u);
      JUMPOUT(0x1959F31ECLL);
    }
    v31 = v30 + 1;
    v32 = WTF::fastMalloc((WTF *)(8 * (v30 + 1)));
    v24 = (WTF *)v32;
    if (v28)
    {
      v33 = v31 + v28 - v27;
      memcpy((void *)(v32 + 8 * v33), (char *)v26 + 8 * v28, 8 * v27 - 8 * v28);
    }
    else
    {
      v33 = 0;
    }
    v25 = v31;
    if (v26)
    {
      if (v24 == v26)
      {
        v24 = 0;
        v25 = 0;
      }
      WTF::fastFree(v26, v21);
    }
    v27 = v25;
    v26 = v24;
    if (!v33)
LABEL_47:
      v33 = v27;
LABEL_48:
    v28 = v33 - 1;
    v34 = *((_DWORD *)v29 + 6) + 2;
    *((_DWORD *)v29 + 6) = v34;
    *((_QWORD *)v26 + v33 - 1) = v29;
    v35 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v29 + 5) + 8) + 528);
    if (v35 && (v36 = *(_QWORD *)(v35 + 8)) != 0 && (v37 = *(_QWORD *)(v36 + 120)) != 0)
    {
      v11 = *(WebCore::Element **)(v37 + 8);
      if (v11)
      {
        v38 = 0;
        *((_DWORD *)v11 + 6) += 2;
        v34 = *((_DWORD *)v29 + 6);
        goto LABEL_53;
      }
    }
    else
    {
      v11 = 0;
    }
    v38 = 1;
LABEL_53:
    v39 = v34 - 2;
    if (v39)
    {
      *((_DWORD *)v29 + 6) = v39;
    }
    else if ((*((_WORD *)v29 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v29, v21);
    }
  }
  while (!v38);
  if (v33 == 1)
    goto LABEL_113;
  v40 = 0;
  while (2)
  {
    if (v40)
      v41 = v40;
    else
      v41 = v25;
    v40 = v41 - 1;
    v42 = *((_QWORD *)v24 + v41 - 1);
    if (v42)
      *(_DWORD *)(v42 + 24) += 2;
    v43 = WebCore::Element::topmostPopoverAncestor((WebCore::Node *)v42, 0);
    WebCore::Document::hideAllPopoversUntil(*(WTF::StringImpl **)(*(_QWORD *)(v42 + 40) + 8), v43, 0, 0);
    v44 = *(_QWORD *)(v42 + 64);
    if ((v44 & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_76;
    if ((*(_BYTE *)((v44 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1959F320CLL);
    }
    v45 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)(v44 & 0xFFFFFFFFFFFFLL));
    if (v45)
    {
      v46 = v45;
      v47 = (WTF *)*((_QWORD *)v45 + 1);
      if (v47)
        goto LABEL_75;
      v47 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v47 = 1;
      *((_QWORD *)v47 + 1) = v46;
      v55 = (WTF *)*((_QWORD *)v46 + 1);
      *((_QWORD *)v46 + 1) = v47;
      if (!v55)
        goto LABEL_75;
      if (*(_DWORD *)v55 != 1)
      {
        --*(_DWORD *)v55;
        goto LABEL_75;
      }
      WTF::fastFree(v55, v54);
      v47 = (WTF *)*((_QWORD *)v46 + 1);
      if (v47)
LABEL_75:
        ++*(_DWORD *)v47;
    }
    else
    {
LABEL_76:
      v47 = 0;
    }
    WebCore::Element::setFullscreenFlag((WebCore::Element *)v42, (void *)1);
    WebCore::Document::resolveStyle(*(_QWORD *)(*(_QWORD *)(v42 + 40) + 8), 1);
    if ((*(_BYTE *)(v42 + 23) & 0x20) != 0)
      WebCore::Element::removeFromTopLayer((WebCore::Element *)v42);
    WebCore::Element::addToTopLayer((WebCore::Element *)v42);
    v49 = *(_QWORD *)(v42 + 64);
    v50 = (WebCore::RenderElement *)(v49 & 0xFFFFFFFFFFFFLL);
    if ((v49 & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((v49 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1959F322CLL);
      }
      ++*(_DWORD *)((v49 & 0xFFFFFFFFFFFFLL) + 0x10);
    }
    if (v47)
      v51 = (WebCore::RenderElement *)*((_QWORD *)v47 + 1);
    else
      v51 = 0;
    WebCore::RenderElement::markRendererDirtyAfterTopLayerChange(v50, v51, v48);
    if (v50)
    {
      v53 = *((_DWORD *)v50 + 4);
      if (!v53)
        goto LABEL_147;
      *((_DWORD *)v50 + 4) = v53 - 1;
    }
    if (v47)
    {
      if (*(_DWORD *)v47 == 1)
        WTF::fastFree(v47, v52);
      else
        --*(_DWORD *)v47;
    }
    if (*(_DWORD *)(v42 + 24) == 2)
    {
      if ((*(_WORD *)(v42 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v42, v52);
    }
    else
    {
      *(_DWORD *)(v42 + 24) -= 2;
    }
    if (v41 != v33)
      continue;
    break;
  }
  v56 = v33 - 1;
  do
  {
    v57 = *((_QWORD *)v24 + v56);
    if (v57)
      *(_DWORD *)(v57 + 24) += 2;
    WebCore::FullscreenManager::addDocumentToFullscreenChangeEventQueue(this, *(WebCore::Document **)(*(_QWORD *)(v57 + 40) + 8));
    if (*(_DWORD *)(v57 + 24) == 2)
    {
      if ((*(_WORD *)(v57 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v57, v58);
    }
    else
    {
      *(_DWORD *)(v57 + 24) -= 2;
    }
    v56 += v25 + 1;
    do
      v56 -= v25;
    while (v56 >= v25);
  }
  while (v56);
LABEL_113:
  if ((*((_WORD *)v67 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)v67 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
  {
    *((_BYTE *)v67 + 152) = 1;
  }
  v59 = *(WebCore::Quirks **)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 688);
  if (!v59)
    v59 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*((_QWORD *)this + 2) + 8));
  if (!WebCore::Quirks::shouldDelayFullscreenEventWhenExitingPictureInPictureQuirk(v59))
    WebCore::FullscreenManager::notifyAboutFullscreenChangeOrError(this);
  if (v33 != 1 && v28 != v25)
  {
    v61 = (uint64_t *)((char *)v24 + 8 * v28);
    v62 = 8 * v25 - 8 * v33 + 8;
    do
    {
      v63 = *v61;
      *v61 = 0;
      if (v63)
      {
        if (*(_DWORD *)(v63 + 24) == 2)
        {
          if ((*(_WORD *)(v63 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v63, v60);
        }
        else
        {
          *(_DWORD *)(v63 + 24) -= 2;
        }
      }
      ++v61;
      v62 -= 8;
    }
    while (v62);
  }
  if (v24)
    WTF::fastFree(v24, v60);
  return 1;
}

unint64_t *WebCore::FullscreenManager::notifyAboutFullscreenChangeOrError(WebCore::FullscreenManager *this)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  void *v15;
  void *v16;
  unint64_t *result;
  void *v18;
  unint64_t v19[3];
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24[8];
  WTF::StringImpl *v25;
  objc_class *v26;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  v3 = *((_OWORD *)this + 4);
  *((_OWORD *)this + 4) = 0u;
  v21 = v3;
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  v22 = v4;
  v23 = 0;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = 0;
  LODWORD(v23) = v4;
  v5 = *((_QWORD *)this + 12);
  v6 = *((_QWORD *)this + 13);
  *((_OWORD *)this + 6) = 0u;
  v19[0] = v5;
  v19[1] = v6;
  v7 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  v19[2] = v7;
  v20 = 0;
  LODWORD(v7) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = 0;
  LODWORD(v20) = v7;
  v8 = *((_QWORD *)this + 4);
  if (v8)
  {
    if (v5 == v6)
    {
      v9 = *(_QWORD *)(v8 + 24);
      if (v9 && *(_QWORD *)v9 && (*(_BYTE *)(v9 + 8) & 3) == 0)
      {
        v10 = *(_QWORD *)(v8 + 32);
        if (!v10 || (*(_BYTE *)(v10 + 8) & 3) != 0)
          v11 = 0;
        else
          v11 = *(uint64_t **)v10;
        JSC::JSLockHolder::JSLockHolder();
        WebCore::DeferredPromise::callFunction(v8, v11, 0, (objc_class *)0xA);
        MEMORY[0x19AEA32A0](v24);
      }
    }
    else
    {
      v25 = 0;
      v26 = 0;
      v24[0] = 33;
      WebCore::DeferredPromise::reject(v8, v24, 0, &v26);
      v13 = v25;
      v25 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    v14 = (_DWORD *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v14)
    {
      if (v14[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
      else
        --v14[4];
    }
  }
  WebCore::FullscreenManager::dispatchFullscreenChangeOrErrorEvent((uint64_t)this, (uint64_t)&v21, 0, 1);
  WebCore::FullscreenManager::dispatchFullscreenChangeOrErrorEvent((uint64_t)this, (uint64_t)v19, 1, 0);
  WTF::Deque<WebCore::GCReachableRef<WebCore::Node,void>,0ul>::~Deque(v19, v15);
  result = WTF::Deque<WebCore::GCReachableRef<WebCore::Node,void>,0ul>::~Deque((unint64_t *)&v21, v16);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return (unint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v2, v18);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::FullscreenManager::didEnterFullscreen(WebCore::FullscreenManager *this)
{
  WebCore::Document *v2;
  WebCore::Quirks *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  BOOL v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;

  v2 = *(WebCore::Document **)(*((_QWORD *)this + 2) + 8);
  v3 = (WebCore::Quirks *)*((_QWORD *)v2 + 86);
  if (!v3)
    v3 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v2);
  if (WebCore::Quirks::shouldDelayFullscreenEventWhenExitingPictureInPictureQuirk(v3))
    WebCore::FullscreenManager::notifyAboutFullscreenChangeOrError(this);
  v4 = *(unsigned __int8 **)(*((_QWORD *)this + 2) + 8);
  if (!*((_QWORD *)this + 7))
  {
    v8 = WebCore::Document::logger((WebCore::Document *)v4);
    v9 = *((_QWORD *)this + 17);
    v13 = "FullscreenManager";
    v14 = 18;
    v15 = "didEnterFullscreen";
    v16 = v9;
    if (*(_BYTE *)(v8 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogFullscreen, 1u, (WTF::Logger::LogSiteIdentifier *)&v13, "No fullscreenElement; bailing");
    return 0;
  }
  v5 = v4[3362];
  v6 = WebCore::Document::logger((WebCore::Document *)v4);
  if (v5)
  {
    v7 = *((_QWORD *)this + 17);
    v13 = "FullscreenManager";
    v14 = 18;
    v15 = "didEnterFullscreen";
    v16 = v7;
    if (*(_BYTE *)(v6 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [42]>((uint64_t)&WebCore::LogFullscreen, 1u, (WTF::Logger::LogSiteIdentifier *)&v13, "Document in the BackForwardCache; bailing");
    return 0;
  }
  v11 = *((_QWORD *)this + 17);
  v13 = "FullscreenManager";
  v14 = 18;
  v15 = "didEnterFullscreen";
  v16 = v11;
  if (*(_BYTE *)(v6 + 12))
  {
    if (WebCore::LogFullscreen)
      v12 = byte_1ECE7C238 >= 3u;
    else
      v12 = 0;
    if (v12)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogFullscreen, 3, (WTF::Logger::LogSiteIdentifier *)&v13);
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 7) + 736))(*((_QWORD *)this + 7));
  return 1;
}

BOOL WebCore::FullscreenManager::willExitFullscreen(WebCore::FullscreenManager *this)
{
  uint64_t v2;
  WebCore::Node *v3;
  unsigned __int8 *v4;
  int v5;
  _BOOL8 v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;

  v2 = 56;
  if (!*((_QWORD *)this + 7))
    v2 = 48;
  v3 = *(WebCore::Node **)((char *)this + v2);
  if (v3)
  {
    *((_DWORD *)v3 + 6) += 2;
    v4 = *(unsigned __int8 **)(*((_QWORD *)this + 2) + 8);
    v5 = v4[3362];
    v6 = v4[3362] == 0;
    v7 = WebCore::Document::logger((WebCore::Document *)v4);
    if (v5)
    {
      v9 = *((_QWORD *)this + 17);
      v15 = "FullscreenManager";
      v16 = 18;
      v17 = "willExitFullscreen";
      v18 = v9;
      if (*(_BYTE *)(v7 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [42]>((uint64_t)&WebCore::LogFullscreen, 1u, (WTF::Logger::LogSiteIdentifier *)&v15, "Document in the BackForwardCache; bailing");
    }
    else
    {
      v10 = *((_QWORD *)this + 17);
      v15 = "FullscreenManager";
      v16 = 18;
      v17 = "willExitFullscreen";
      v18 = v10;
      if (*(_BYTE *)(v7 + 12))
      {
        if (WebCore::LogFullscreen && byte_1ECE7C238 >= 3u)
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogFullscreen, 3, (WTF::Logger::LogSiteIdentifier *)&v15);
      }
      (*(void (**)(WebCore::Node *))(*(_QWORD *)v3 + 744))(v3);
    }
    if (*((_DWORD *)v3 + 6) == 2)
    {
      if ((*((_WORD *)v3 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v3, v8);
    }
    else
    {
      *((_DWORD *)v3 + 6) -= 2;
    }
  }
  else
  {
    v13 = WebCore::Document::logger(*(WebCore::Document **)(*((_QWORD *)this + 2) + 8));
    v14 = *((_QWORD *)this + 17);
    v15 = "FullscreenManager";
    v16 = 18;
    v17 = "willExitFullscreen";
    v18 = v14;
    if (*(_BYTE *)(v13 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogFullscreen, 1u, (WTF::Logger::LogSiteIdentifier *)&v15, "No fullscreenOrPendingElement(); bailing");
    return 0;
  }
  return v6;
}

BOOL WebCore::FullscreenManager::didExitFullscreen(WebCore::FullscreenManager *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  _BOOL8 v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *Ref;
  uint64_t v23;
  double v24;
  WebCore::Document *v25;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;

  v2 = 56;
  if (!*((_QWORD *)this + 7))
    v2 = 48;
  v3 = *(_QWORD *)((char *)this + v2);
  if (v3)
  {
    *(_DWORD *)(v3 + 24) += 2;
    v4 = *(unsigned __int8 **)(*((_QWORD *)this + 2) + 8);
    v5 = v4[3362];
    v6 = v4[3362] == 0;
    v7 = WebCore::Document::logger((WebCore::Document *)v4);
    if (v5)
    {
      v9 = *((_QWORD *)this + 17);
      v35 = "FullscreenManager";
      v36 = 18;
      v37 = "didExitFullscreen";
      v38 = v9;
      if (*(_BYTE *)(v7 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [42]>((uint64_t)&WebCore::LogFullscreen, 1u, (WTF::Logger::LogSiteIdentifier *)&v35, "Document in the BackForwardCache; bailing");
      *((_BYTE *)this + 40) = 0;
    }
    else
    {
      v10 = *((_QWORD *)this + 17);
      v35 = "FullscreenManager";
      v36 = 18;
      v37 = "didExitFullscreen";
      v38 = v10;
      if (*(_BYTE *)(v7 + 12))
      {
        if (WebCore::LogFullscreen && byte_1ECE7C238 >= 3u)
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogFullscreen, 3, (WTF::Logger::LogSiteIdentifier *)&v35);
      }
      v12 = *((_QWORD *)this + 3);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 8)) == 0)
      {
        v13 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
        if (*(_BYTE *)(v13 + 3362) || *(_BYTE *)(v13 + 3405))
        {
          while (1)
          {
            v31 = *(_QWORD *)(v13 + 528);
            if (!v31)
              break;
            v32 = *(_QWORD *)(v31 + 8);
            if (!v32)
              break;
            v33 = *(_QWORD *)(v32 + 120);
            if (!v33)
              break;
            v34 = *(_QWORD *)(v33 + 8);
            if (!v34)
              break;
            v13 = *(_QWORD *)(*(_QWORD *)(v34 + 40) + 8);
          }
        }
        else
        {
          v14 = *(_QWORD *)(v13 + 528);
          if (v14)
          {
            v15 = *(_QWORD *)(v14 + 8);
            if (v15)
            {
              v16 = *(_QWORD *)(*(_QWORD *)(v15 + 128) + 8);
              if (v16 && *(_BYTE *)(v16 + 144) == 0)
              {
                v18 = *(_QWORD *)(v16 + 296);
                if (v18)
                  v13 = v18;
              }
            }
          }
        }
      }
      *(_DWORD *)(v13 + 24) += 2;
      WebCore::FullscreenManager::finishExitFullscreen(this, (WebCore::Document *)v13, 0);
      if (*(_DWORD *)(v13 + 24) == 2)
      {
        if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v13, v19);
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
      v20 = *((_QWORD *)this + 7);
      if (v20)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 752))(v20);
        v21 = *((_QWORD *)this + 7);
        *((_BYTE *)this + 129) = 0;
        *((_QWORD *)this + 7) = 0;
        if (v21)
        {
          if (*(_DWORD *)(v21 + 24) == 2)
          {
            if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v21, v19);
          }
          else
          {
            *(_DWORD *)(v21 + 24) -= 2;
          }
        }
      }
      else
      {
        *((_BYTE *)this + 129) = 0;
        *((_QWORD *)this + 7) = 0;
      }
      Ref = (unsigned int *)*((_QWORD *)this + 6);
      *((_QWORD *)this + 6) = 0;
      if (Ref)
      {
        if (Ref[6] == 2)
        {
          if ((*((_WORD *)Ref + 15) & 0x400) == 0)
            Ref = WebCore::Node::removedLastRef((WebCore::Node *)Ref, v19);
        }
        else
        {
          Ref[6] -= 2;
        }
      }
      *((_BYTE *)this + 40) = 0;
      v23 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
      *(_BYTE *)(v23 + 3390) = 1;
      if (((*(_QWORD *)(v23 + 1536) & 0xFFFFFFFFFFFFLL) == 0
         || *(double *)((*(_QWORD *)(v23 + 1536) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
        && !*(_BYTE *)(v23 + 3362))
      {
        *(_QWORD *)(v23 + 1528) = 0;
        WTF::MonotonicTime::now((WTF::MonotonicTime *)Ref);
        WebCore::TimerBase::setNextFireTime(v23 + 1504, v24 + 0.0);
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v30 = (WTF::StringImpl *)WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)v23, v25);
          if (v30)
            WebCore::InspectorInstrumentation::didScheduleStyleRecalculationImpl(v30, (WebCore::Document *)v23);
        }
      }
      WebCore::FullscreenManager::notifyAboutFullscreenChangeOrError(this);
    }
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, v8);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  else
  {
    v28 = WebCore::Document::logger(*(WebCore::Document **)(*((_QWORD *)this + 2) + 8));
    v29 = *((_QWORD *)this + 17);
    v35 = "FullscreenManager";
    v36 = 18;
    v37 = "didExitFullscreen";
    v38 = v29;
    if (*(_BYTE *)(v28 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogFullscreen, 1u, (WTF::Logger::LogSiteIdentifier *)&v35, "No fullscreenOrPendingElement(); bailing");
    v6 = 0;
    *((_BYTE *)this + 40) = 0;
  }
  return v6;
}

uint64_t WebCore::FullscreenManager::dispatchFullscreenChangeOrErrorEvent(uint64_t result, uint64_t a2, char a3, int a4)
{
  uint64_t v4;
  unint64_t StatusReg;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WebCore *updated;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  WebCore *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  WebCore::EventNames **v45;
  uint64_t v46;
  WebCore::EventNames **v47;
  WebCore::EventNames *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WebCore::EventNames **v52;
  WebCore::EventNames *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WebCore::EventNames **v69;
  WebCore::EventNames *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WebCore::EventNames **v79;
  WebCore::EventNames *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD v89[2];
  char v90;
  int v91;

  v87 = result;
  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      v9 = *(_QWORD *)(a2 + 16);
      v10 = *(_QWORD *)(v9 + 8 * v4);
      *(_QWORD *)(v9 + 8 * v4) = 0;
      v11 = *(_QWORD *)(a2 + 16);
      v12 = *(_QWORD *)(v11 + 8 * v4);
      if (v12)
      {
        {
          WebCore::GCReachableRefMap::map(void)::map = 0;
        }
        v89[0] = v12;
        if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, v89))*(_QWORD *)(v12 + 16) &= ~0x4000000000000uLL;
        v14 = *(_QWORD *)(v11 + 8 * v4);
        *(_QWORD *)(v11 + 8 * v4) = 0;
        if (v14)
        {
          if (*(_DWORD *)(v14 + 24) == 2)
          {
            if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v14, v13);
          }
          else
          {
            *(_DWORD *)(v14 + 24) -= 2;
          }
        }
      }
      else
      {
        *(_QWORD *)(v11 + 8 * v4) = 0;
      }
      v15 = *(unsigned int *)(a2 + 24);
      v16 = *(_QWORD *)a2 == v15 - 1 ? 0 : *(_QWORD *)a2 + 1;
      *(_QWORD *)a2 = v16;
      if ((*(_BYTE *)(v10 + 22) & 8) == 0)
      {
        v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v87 + 16) + 8) + 1272);
        if (v17)
          break;
      }
LABEL_33:
      v22 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 8);
      *(_DWORD *)(v22 + 24) += 2;
      updated = (WebCore *)WebCore::Document::updateViewportArguments(v22);
      if (*(_DWORD *)(v22 + 24) == 2)
      {
        if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
          updated = (WebCore *)WebCore::Node::removedLastRef((WebCore::Node *)v22, v24);
      }
      else
      {
        *(_DWORD *)(v22 + 24) -= 2;
      }
      if (a4)
      {
        if ((*(_WORD *)(v10 + 28) & 8) != 0)
        {
          updated = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 824))(v10);
          if ((_DWORD)updated)
          {
            *(_DWORD *)(v10 + 24) += 2;
            updated = (WebCore *)WebCore::HTMLMediaElement::configureMediaControls((WebCore::HTMLMediaElement *)v10);
            if (*(_DWORD *)(v10 + 24) == 2)
            {
              if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
                updated = (WebCore *)WebCore::Node::removedLastRef((WebCore::Node *)v10, v25);
            }
            else
            {
              *(_DWORD *)(v10 + 24) -= 2;
            }
          }
        }
      }
      v26 = *(_QWORD *)(StatusReg + 736);
      if ((a3 & 1) != 0)
      {
        if (!v26 || (v27 = *(_QWORD *)(v26 + 96)) == 0)
          v27 = WebCore::threadGlobalDataSlow(updated);
        v28 = *(_QWORD *)(v27 + 40);
        if (!v28)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v27);
          v28 = *(_QWORD *)(v27 + 40);
        }
        v29 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v29);
        *(_DWORD *)(v29 + 16) = 1;
        *(_QWORD *)v29 = off_1E33A4B48;
        *(_QWORD *)(v29 + 8) = 0;
        *(_DWORD *)(v29 + 20) = *(_DWORD *)(v29 + 20) & 0xFFC00000 | 0x1E820A | (*(_QWORD *)(v28 + 856) != 0);
        v31 = *(_DWORD **)(v28 + 856);
        if (v31)
          *v31 += 2;
        *(_QWORD *)(v29 + 24) = v31;
        *(_QWORD *)(v29 + 32) = 0;
        *(_QWORD *)(v29 + 40) = 0;
        *(_QWORD *)(v29 + 48) = 0;
        *(_QWORD *)(v29 + 56) = v30;
        *(_QWORD *)(v29 + 64) = 0;
        v32 = (WebCore *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(v10, v29);
        if (*(_DWORD *)(v29 + 16) == 1)
          v32 = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        else
          --*(_DWORD *)(v29 + 16);
        v33 = *(_QWORD *)(StatusReg + 736);
        if (!v33 || (v34 = *(_QWORD *)(v33 + 96)) == 0)
          v34 = WebCore::threadGlobalDataSlow(v32);
        v35 = *(_QWORD *)(v34 + 40);
        if (!v35)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v34);
          v35 = *(_QWORD *)(v34 + 40);
        }
        v36 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v36);
        *(_DWORD *)(v36 + 16) = 1;
        *(_QWORD *)v36 = off_1E33A4B48;
        *(_QWORD *)(v36 + 8) = 0;
        *(_DWORD *)(v36 + 20) = *(_DWORD *)(v36 + 20) & 0xFFC00000 | 0x1E820A | (*(_QWORD *)(v35 + 2384) != 0);
        v38 = *(_DWORD **)(v35 + 2384);
        if (!v38)
          goto LABEL_57;
LABEL_56:
        *v38 += 2;
        goto LABEL_57;
      }
      if (!v26 || (v40 = *(_QWORD *)(v26 + 96)) == 0)
        v40 = WebCore::threadGlobalDataSlow(updated);
      v41 = *(_QWORD *)(v40 + 40);
      if (!v41)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v40);
        v41 = *(_QWORD *)(v40 + 40);
      }
      v42 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v42);
      *(_DWORD *)(v42 + 16) = 1;
      *(_QWORD *)v42 = off_1E33A4B48;
      *(_QWORD *)(v42 + 8) = 0;
      *(_DWORD *)(v42 + 20) = *(_DWORD *)(v42 + 20) & 0xFFC00000 | 0x1E820A | (*(_QWORD *)(v41 + 848) != 0);
      v44 = *(_DWORD **)(v41 + 848);
      if (v44)
        *v44 += 2;
      *(_QWORD *)(v42 + 24) = v44;
      *(_QWORD *)(v42 + 32) = 0;
      *(_QWORD *)(v42 + 40) = 0;
      *(_QWORD *)(v42 + 48) = 0;
      *(_QWORD *)(v42 + 56) = v43;
      *(_QWORD *)(v42 + 64) = 0;
      v45 = (WebCore::EventNames **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(v10, v42);
      if (*(_DWORD *)(v42 + 16) == 1)
        v45 = (WebCore::EventNames **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      else
        --*(_DWORD *)(v42 + 16);
      v46 = *(_QWORD *)(StatusReg + 736);
      if (!v46 || (v47 = *(WebCore::EventNames ***)(v46 + 96)) == 0)
      {
        v45 = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)v45);
        v47 = v45;
      }
      v48 = v47[5];
      if (!v48)
      {
        v45 = WebCore::ThreadGlobalData::initializeEventNames(v47);
        v48 = v47[5];
      }
      v49 = *(_QWORD *)(v10 + 16);
      if ((v49 & 0x1000000000000) != 0)
      {
        v58 = v49 & 0xFFFFFFFFFFFFLL;
        v59 = *(unsigned int *)(v58 + 28);
        if ((_DWORD)v59)
        {
          v60 = *(_QWORD **)(v58 + 16);
          v61 = *((_QWORD *)v48 + 297);
          v62 = 32 * v59;
          while (*v60 != v61)
          {
            v60 += 4;
            v62 -= 32;
            if (!v62)
              goto LABEL_82;
          }
          v68 = *(_QWORD *)(StatusReg + 736);
          if (!v68 || (v69 = *(WebCore::EventNames ***)(v68 + 96)) == 0)
          {
            v45 = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)v45);
            v69 = v45;
          }
          v70 = v69[5];
          if (!v70)
          {
            v45 = WebCore::ThreadGlobalData::initializeEventNames(v69);
            v70 = v69[5];
          }
          v71 = *(_QWORD *)(v10 + 16);
          if ((v71 & 0x1000000000000) != 0)
          {
            v72 = v71 & 0xFFFFFFFFFFFFLL;
            v73 = *(unsigned int *)(v72 + 28);
            if ((_DWORD)v73)
            {
              v74 = *(_QWORD **)(v72 + 16);
              v75 = *((_QWORD *)v70 + 106);
              v76 = 32 * v73;
              while (*v74 != v75)
              {
                v74 += 4;
                v76 -= 32;
                if (!v76)
                  goto LABEL_82;
              }
              goto LABEL_59;
            }
          }
        }
      }
LABEL_82:
      v50 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 8);
      v51 = *(_QWORD *)(StatusReg + 736);
      if (!v51 || (v52 = *(WebCore::EventNames ***)(v51 + 96)) == 0)
      {
        v45 = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)v45);
        v52 = v45;
      }
      v53 = v52[5];
      if (!v53)
      {
        v45 = WebCore::ThreadGlobalData::initializeEventNames(v52);
        v53 = v52[5];
      }
      v54 = *(_QWORD *)(v50 + 16);
      if ((v54 & 0x1000000000000) != 0)
      {
        v63 = v54 & 0xFFFFFFFFFFFFLL;
        v64 = *(unsigned int *)(v63 + 28);
        if ((_DWORD)v64)
        {
          v65 = *(_QWORD **)(v63 + 16);
          v66 = *((_QWORD *)v53 + 297);
          v67 = 32 * v64;
          while (*v65 != v66)
          {
            v65 += 4;
            v67 -= 32;
            if (!v67)
              goto LABEL_88;
          }
          v77 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 8);
          v78 = *(_QWORD *)(StatusReg + 736);
          if (!v78 || (v79 = *(WebCore::EventNames ***)(v78 + 96)) == 0)
          {
            v45 = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)v45);
            v79 = v45;
          }
          v80 = v79[5];
          if (!v80)
          {
            v45 = WebCore::ThreadGlobalData::initializeEventNames(v79);
            v80 = v79[5];
          }
          v81 = *(_QWORD *)(v77 + 16);
          if ((v81 & 0x1000000000000) != 0)
          {
            v82 = v81 & 0xFFFFFFFFFFFFLL;
            v83 = *(unsigned int *)(v82 + 28);
            if ((_DWORD)v83)
            {
              v84 = *(_QWORD **)(v82 + 16);
              v85 = *((_QWORD *)v80 + 106);
              v86 = 32 * v83;
              while (*v84 != v85)
              {
                v84 += 4;
                v86 -= 32;
                if (!v86)
                  goto LABEL_88;
              }
              goto LABEL_59;
            }
          }
        }
      }
LABEL_88:
      v55 = *(_QWORD *)(StatusReg + 736);
      if (!v55 || (v56 = *(_QWORD *)(v55 + 96)) == 0)
        v56 = WebCore::threadGlobalDataSlow((WebCore *)v45);
      v57 = *(_QWORD *)(v56 + 40);
      if (!v57)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v56);
        v57 = *(_QWORD *)(v56 + 40);
      }
      v36 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v36);
      *(_DWORD *)(v36 + 16) = 1;
      *(_QWORD *)v36 = off_1E33A4B48;
      *(_QWORD *)(v36 + 8) = 0;
      *(_DWORD *)(v36 + 20) = *(_DWORD *)(v36 + 20) & 0xFFC00000 | 0x1E820A | (*(_QWORD *)(v57 + 2376) != 0);
      v38 = *(_DWORD **)(v57 + 2376);
      if (v38)
        goto LABEL_56;
LABEL_57:
      *(_QWORD *)(v36 + 24) = v38;
      *(_QWORD *)(v36 + 32) = 0;
      *(_QWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = v37;
      *(_QWORD *)(v36 + 64) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(v10, v36);
      if (*(_DWORD *)(v36 + 16) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      else
        --*(_DWORD *)(v36 + 16);
LABEL_59:
      {
        WebCore::GCReachableRefMap::map(void)::map = 0;
      }
      v89[0] = v10;
      result = WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, v89);
      if ((_DWORD)result)
        *(_QWORD *)(v10 + 16) &= ~0x4000000000000uLL;
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v10, v39);
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
      v4 = *(_QWORD *)a2;
      if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
        return result;
    }
    v18 = *(_QWORD *)(a2 + 8);
    if (v16)
    {
      if (v18 + 1 != v16)
        goto LABEL_25;
    }
    else if (v18)
    {
      if (v18 != v15 - 1)
        goto LABEL_25;
    }
    else if ((_DWORD)v15)
    {
      v18 = 0;
LABEL_25:
      v19 = *(_QWORD *)(a2 + 16);
      *(_DWORD *)(v17 + 24) += 2;
      *(_QWORD *)(v19 + 8 * v18) = v17;
      {
        WebCore::GCReachableRefMap::map(void)::map = 0;
      }
      v88 = v17;
      v91 = 0;
      WTF::HashMap<WebCore::EventTarget *,unsigned int,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&WebCore::GCReachableRefMap::map(void)::map, &v88, &v91, (uint64_t)v89);
      ++*(_DWORD *)(v89[0] + 8);
      if (v90)
        *(_QWORD *)(v17 + 16) |= 0x4000000000000uLL;
      v20 = *(_QWORD *)(a2 + 8);
      if (v20 == *(unsigned int *)(a2 + 24) - 1)
        v21 = 0;
      else
        v21 = v20 + 1;
      *(_QWORD *)(a2 + 8) = v21;
      goto LABEL_33;
    }
    WTF::Deque<WebCore::GCReachableRef<WebCore::Node,void>,0ul>::expandCapacity(a2);
    v18 = *(_QWORD *)(a2 + 8);
    goto LABEL_25;
  }
  return result;
}

unsigned __int8 *WebCore::FullscreenManager::exitRemovedFullscreenElement(WebCore::FullscreenManager *this, WebCore::Element *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11[4];

  v4 = 56;
  if (!*((_QWORD *)this + 7))
    v4 = 48;
  v5 = *(_QWORD *)((char *)this + v4);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  if ((WebCore::Element *)v5 != a2)
  {
    result = WebCore::Element::setFullscreenFlag(a2, 0);
    if ((*((_WORD *)a2 + 14) & 0x10) != 0
      && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
    {
      *((_BYTE *)a2 + 152) = 0;
      if (!v5)
        return result;
      goto LABEL_21;
    }
LABEL_20:
    if (!v5)
      return result;
    goto LABEL_21;
  }
  v8 = WebCore::Document::logger(*(WebCore::Document **)(*((_QWORD *)this + 2) + 8));
  v9 = *((_QWORD *)this + 17);
  v11[0] = (uint64_t)"FullscreenManager";
  v11[1] = 18;
  v11[2] = (uint64_t)"exitRemovedFullscreenElement";
  v11[3] = v9;
  if (*(_BYTE *)(v8 + 12))
  {
    if (WebCore::LogFullscreen)
      v10 = byte_1ECE7C238 >= 3u;
    else
      v10 = 0;
    if (v10)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogFullscreen, 3u, (WTF::Logger::LogSiteIdentifier *)v11, "Fullscreen element removed; exiting fullscreen");
  }
  v11[0] = 0;
  WebCore::FullscreenManager::exitFullscreen((uint64_t)this, v11);
  result = (unsigned __int8 *)v11[0];
  if (!v11[0])
    goto LABEL_20;
  if (*(_DWORD *)(v11[0] + 16) != 1)
  {
    --*(_DWORD *)(v11[0] + 16);
    goto LABEL_20;
  }
  result = (unsigned __int8 *)(*(uint64_t (**)(void))(*(_QWORD *)v11[0] + 16))();
  if (!v5)
    return result;
LABEL_21:
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      return (unsigned __int8 *)WebCore::Node::removedLastRef((WebCore::Node *)v5, v7);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::FullscreenManager::isAnimatingFullscreen(WebCore::FullscreenManager *this)
{
  return *((unsigned __int8 *)this + 130);
}

const char *WebCore::FullscreenManager::setAnimatingFullscreen(const char *this, int a2)
{
  int v2;
  const char *v3;
  unsigned __int8 *v4;
  void *v6;
  uint64_t v7;
  char v8;
  _BYTE v9[2];
  const char *v10;
  uint64_t v11;
  const char *v12;
  unsigned __int8 *v13;
  char v14;
  unsigned __int8 v15;
  unsigned __int8 *v16[2];

  v15 = a2;
  if (*((unsigned __int8 *)this + 130) != a2)
  {
    v2 = a2;
    v3 = this;
    this = (const char *)WebCore::Document::logger(*(WebCore::Document **)(*((_QWORD *)this + 2) + 8));
    v4 = (unsigned __int8 *)*((_QWORD *)v3 + 17);
    v10 = "FullscreenManager";
    v11 = 18;
    v12 = "setAnimatingFullscreen";
    v13 = v4;
    if (this[12])
    {
      if (WebCore::LogFullscreen && byte_1ECE7C238 >= 3u)
      {
        this = (const char *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogFullscreen, 3, (WTF::Logger::LogSiteIdentifier *)&v10);
        v2 = v15;
      }
    }
    LOBYTE(v10) = 0;
    v14 = 0;
    v6 = (void *)*((_QWORD *)v3 + 7);
    if (v6)
    {
      v9[0] = 1;
      v9[1] = v2;
      v16[0] = v9;
      v16[1] = (unsigned __int8 *)1;
      this = (const char *)std::optional<WebCore::Style::PseudoClassChangeInvalidation>::emplace[abi:sn180100]<WebCore::Element &,std::initializer_list<std::pair<WebCore::CSSSelectorPseudoClass,BOOL>> &,void>((uint64_t)&v10, v6, v16);
      v2 = v15;
    }
    *((_BYTE *)v3 + 130) = v2;
    if (!v2)
    {
      v7 = *(_QWORD *)(*((_QWORD *)v3 + 2) + 8);
      *(_DWORD *)(v7 + 24) += 2;
      v8 = v3[128];
      if ((v8 & 1) != 0)
      {
        this = (const char *)WebCore::Document::setNeedsDOMWindowResizeEvent((WebCore::Document *)v7);
        v8 = v3[128];
      }
      if ((v8 & 2) != 0)
        this = (const char *)WebCore::Document::setNeedsVisualViewportResize(v7);
      *((_BYTE *)v3 + 128) = 0;
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          this = (const char *)WebCore::Node::removedLastRef((WebCore::Node *)v7, v6);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
    if (v14)
    {
      if ((_BYTE)v10)
        WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v11, &v13);
      if (v13)
        WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v13, v6);
      this = v12;
      if (v12)
        return (const char *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v12, v6);
    }
  }
  return this;
}

uint64_t WebCore::FullscreenManager::addPendingScheduledResize(uint64_t result, char a2)
{
  *(_BYTE *)(result + 128) |= a2;
  return result;
}

uint64_t *WebCore::GCReachableRefMap::map(WebCore::GCReachableRefMap *this)
{
  {
    WebCore::GCReachableRefMap::map(void)::map = 0;
  }
  return &WebCore::GCReachableRefMap::map(void)::map;
}

WTF::StringImpl *WebCore::IdTargetObserverRegistry::addObserver(WTF::StringImpl *this, WTF::StringImpl **a2, WebCore::IdTargetObserver *a3)
{
  uint64_t v5;
  uint64_t *v6;
  int v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  int i;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  WebCore::IdTargetObserver **v40;
  WebCore::IdTargetObserver *v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;

  if (!*a2 || !*((_DWORD *)*a2 + 1))
    return this;
  v6 = (uint64_t *)((char *)this + 8);
  v5 = *((_QWORD *)this + 1);
  if (v5
    || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)this + 1, 8u, 0), (v5 = *v6) != 0))
  {
    v7 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
  v9 = *a2;
  v10 = *((_DWORD *)*a2 + 4) >> 8;
  for (i = 1; ; ++i)
  {
    v12 = v10 & v7;
    v13 = v5 + 16 * v12;
    this = *(WTF::StringImpl **)v13;
    if (*(_QWORD *)v13 == -1)
    {
      v8 = (_QWORD *)(v5 + 16 * v12);
      goto LABEL_13;
    }
    if (!this)
      break;
    if (this == v9)
      goto LABEL_43;
LABEL_13:
    v10 = i + v12;
  }
  if (v8)
  {
    *v8 = 0;
    v8[1] = 0;
    --*(_DWORD *)(*v6 - 16);
    v9 = *a2;
    v13 = (uint64_t)v8;
  }
  if (v9)
    *(_DWORD *)v9 += 2;
  *(_QWORD *)v13 = v9;
  this = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v15 = *(WTF **)(v13 + 8);
  *(_QWORD *)(v13 + 8) = this;
  if (v15)
  {
    v16 = *((_QWORD *)v15 + 1);
    if (v16)
    {
      v17 = *(unsigned int *)(v16 - 4);
      if ((_DWORD)v17)
      {
        v18 = (uint64_t *)*((_QWORD *)v15 + 1);
        do
        {
          v19 = *v18;
          if (*v18 != -1)
          {
            *v18 = 0;
            if (v19)
            {
              v20 = *(_DWORD *)(v19 + 8);
              if (!v20)
              {
                __break(0xC471u);
                JUMPOUT(0x1959F4940);
              }
              *(_DWORD *)(v19 + 8) = v20 - 1;
            }
          }
          ++v18;
          --v17;
        }
        while (v17);
      }
      this = (WTF::StringImpl *)WTF::fastFree((WTF *)(v16 - 16), v14);
    }
    if (*(_DWORD *)v15)
    {
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
    }
    else
    {
      this = (WTF::StringImpl *)WTF::fastFree(v15, v14);
    }
  }
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
    {
LABEL_39:
      v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
      goto LABEL_42;
    }
  }
  else if (3 * v26 <= 4 * v25)
  {
    if ((_DWORD)v26)
      goto LABEL_39;
    v27 = 8;
LABEL_42:
    this = (WTF::StringImpl *)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(v6, v27, (WTF::StringImpl **)v13);
    v13 = (uint64_t)this;
  }
LABEL_43:
  v28 = *(_QWORD *)(v13 + 8);
  ++*((_DWORD *)a3 + 2);
  v31 = *(_QWORD *)(v28 + 8);
  v30 = (uint64_t *)(v28 + 8);
  v29 = v31;
  if (v31
    || (this = (WTF::StringImpl *)WTF::HashTable<WTF::CheckedRef<WebCore::IdTargetObserver,WTF::RawPtrTraits<WebCore::IdTargetObserver>>,WTF::CheckedRef<WebCore::IdTargetObserver,WTF::RawPtrTraits<WebCore::IdTargetObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedRef<WebCore::IdTargetObserver,WTF::RawPtrTraits<WebCore::IdTargetObserver>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::IdTargetObserver,WTF::RawPtrTraits<WebCore::IdTargetObserver>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::IdTargetObserver,WTF::RawPtrTraits<WebCore::IdTargetObserver>>>>::rehash(v30, 8u), (v29 = *v30) != 0))
  {
    v32 = *(_DWORD *)(v29 - 8);
  }
  else
  {
    v32 = 0;
  }
  v33 = 0;
  v34 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
  v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
  v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
  v37 = (v36 >> 31) ^ v36;
  v38 = 1;
  while (2)
  {
    v39 = v37 & v32;
    v40 = (WebCore::IdTargetObserver **)(v29 + 8 * (v37 & v32));
    v41 = *v40;
    if (*v40 == (WebCore::IdTargetObserver *)-1)
    {
      v33 = (_QWORD *)(v29 + 8 * v39);
      goto LABEL_52;
    }
    if (!v41)
    {
      if (v33)
      {
        *v33 = 0;
        --*(_DWORD *)(*v30 - 16);
        *v33 = a3;
      }
      else
      {
        *v40 = a3;
      }
      v43 = *v30;
      if (*v30)
        v44 = *(_DWORD *)(v43 - 12) + 1;
      else
        v44 = 1;
      *(_DWORD *)(v43 - 12) = v44;
      v45 = *v30;
      if (*v30)
        v46 = *(_DWORD *)(v45 - 12);
      else
        v46 = 0;
      v47 = (*(_DWORD *)(v45 - 16) + v46);
      v48 = *(unsigned int *)(v45 - 4);
      if (v48 > 0x400)
      {
        if (v48 > 2 * v47)
          return this;
      }
      else
      {
        if (3 * v48 > 4 * v47)
          return this;
        if (!(_DWORD)v48)
        {
          v49 = 8;
          return (WTF::StringImpl *)WTF::HashTable<WTF::CheckedRef<WebCore::IdTargetObserver,WTF::RawPtrTraits<WebCore::IdTargetObserver>>,WTF::CheckedRef<WebCore::IdTargetObserver,WTF::RawPtrTraits<WebCore::IdTargetObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedRef<WebCore::IdTargetObserver,WTF::RawPtrTraits<WebCore::IdTargetObserver>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::IdTargetObserver,WTF::RawPtrTraits<WebCore::IdTargetObserver>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::IdTargetObserver,WTF::RawPtrTraits<WebCore::IdTargetObserver>>>>::rehash(v30, v49);
        }
      }
      v49 = (_DWORD)v48 << (6 * *(_DWORD *)(v45 - 12) >= (2 * v48));
      return (WTF::StringImpl *)WTF::HashTable<WTF::CheckedRef<WebCore::IdTargetObserver,WTF::RawPtrTraits<WebCore::IdTargetObserver>>,WTF::CheckedRef<WebCore::IdTargetObserver,WTF::RawPtrTraits<WebCore::IdTargetObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedRef<WebCore::IdTargetObserver,WTF::RawPtrTraits<WebCore::IdTargetObserver>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::IdTargetObserver,WTF::RawPtrTraits<WebCore::IdTargetObserver>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::IdTargetObserver,WTF::RawPtrTraits<WebCore::IdTargetObserver>>>>::rehash(v30, v49);
    }
    if (v41 != a3)
    {
LABEL_52:
      v37 = v38 + v39;
      ++v38;
      continue;
    }
    break;
  }
  v42 = *((_DWORD *)a3 + 2);
  if (!v42)
  {
    __break(0xC471u);
    JUMPOUT(0x1959F4960);
  }
  *((_DWORD *)a3 + 2) = v42 - 1;
  return this;
}

WTF::StringImpl **WebCore::IdTargetObserverRegistry::removeObserver(WTF::StringImpl **this, const WTF::AtomString *a2, WebCore::IdTargetObserver *a3)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  int v8;
  unsigned int i;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int j;
  uint64_t v24;
  WebCore::IdTargetObserver *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;

  v3 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return this;
  if (!*(_DWORD *)(v3 + 4))
    return this;
  v4 = this;
  v6 = (uint64_t *)(this + 1);
  v5 = this[1];
  if (!v5 || !*((_DWORD *)v5 - 3))
    return this;
  v8 = 0;
  for (i = *(_DWORD *)(v3 + 16) >> 8; ; i = v8 + v10)
  {
    v10 = i & *((_DWORD *)v5 - 2);
    v11 = *((_QWORD *)v5 + 2 * v10);
    if (v11 == -1)
      goto LABEL_10;
    if (!v11)
      break;
    if (v11 == v3)
      goto LABEL_12;
LABEL_10:
    ++v8;
  }
  v10 = *((unsigned int *)v5 - 1);
LABEL_12:
  v12 = (char *)v5 + 16 * v10;
  v13 = (WTF::StringImpl *)*((_QWORD *)v12 + 1);
  if (v13)
    ++*(_DWORD *)v13;
  v14 = *((_DWORD *)a3 + 2);
  v15 = v14 + 1;
  *((_DWORD *)a3 + 2) = v14 + 1;
  v17 = (uint64_t *)((char *)v13 + 8);
  v16 = *((_QWORD *)v13 + 1);
  if (v16)
  {
    v18 = *(_DWORD *)(v16 - 8);
    v19 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
    v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
    v22 = v18 & ((v21 >> 31) ^ v21);
    for (j = 1; ; ++j)
    {
      v24 = v22;
      v25 = *(WebCore::IdTargetObserver **)(v16 + 8 * v22);
      if (v25 != (WebCore::IdTargetObserver *)-1)
      {
        if (!v25)
          goto LABEL_32;
        if (v25 == a3)
          break;
      }
      v22 = (v24 + j) & v18;
    }
    if ((_DWORD)v24 != *(_DWORD *)(v16 - 4))
    {
      *(_QWORD *)(v16 + 8 * v24) = 0;
      if (v14 != -1)
      {
        *(_QWORD *)(v16 + 8 * v24) = -1;
        *((_DWORD *)a3 + 2) = v14;
        ++*(_DWORD *)(*v17 - 16);
        v26 = *v17;
        if (*v17)
          v27 = *(_DWORD *)(v26 - 12) - 1;
        else
          v27 = -1;
        *(_DWORD *)(v26 - 12) = v27;
        v28 = *v17;
        if (*v17)
        {
          v29 = 6 * *(_DWORD *)(v28 - 12);
          v30 = *(_DWORD *)(v28 - 4);
          if (v29 < v30 && v30 >= 9)
            this = (WTF::StringImpl **)WTF::HashTable<WTF::CheckedRef<WebCore::IdTargetObserver,WTF::RawPtrTraits<WebCore::IdTargetObserver>>,WTF::CheckedRef<WebCore::IdTargetObserver,WTF::RawPtrTraits<WebCore::IdTargetObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedRef<WebCore::IdTargetObserver,WTF::RawPtrTraits<WebCore::IdTargetObserver>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::IdTargetObserver,WTF::RawPtrTraits<WebCore::IdTargetObserver>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::IdTargetObserver,WTF::RawPtrTraits<WebCore::IdTargetObserver>>>>::rehash((uint64_t *)v13 + 1, v30 >> 1);
        }
        goto LABEL_32;
      }
LABEL_53:
      __break(0xC471u);
      JUMPOUT(0x1959F4C44);
    }
LABEL_32:
    v15 = *((_DWORD *)a3 + 2);
  }
  if (!v15)
    goto LABEL_53;
  *((_DWORD *)a3 + 2) = v15 - 1;
  if (*v17 && *(_DWORD *)(*v17 - 12) || v13 == v4[2])
  {
    if (!*(_DWORD *)v13)
    {
      __break(0xC471u);
      JUMPOUT(0x1959F4C64);
    }
    --*(_DWORD *)v13;
  }
  else
  {
    if (!*(_DWORD *)v13)
    {
      __break(0xC471u);
      JUMPOUT(0x1959F4C84);
    }
    --*(_DWORD *)v13;
    v32 = *v6;
    if (!*v6 || (v32 += 16 * *(unsigned int *)(v32 - 4), (char *)v32 != v12))
    {
      if ((char *)v32 != v12)
      {
        this = (WTF::StringImpl **)WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>>::customDeleteBucket((WTF::StringImpl **)v12, a2);
        ++*(_DWORD *)(*v6 - 16);
        v33 = *v6;
        if (*v6)
          v34 = *(_DWORD *)(v33 - 12) - 1;
        else
          v34 = -1;
        *(_DWORD *)(v33 - 12) = v34;
        v35 = *v6;
        if (*v6)
        {
          v36 = 6 * *(_DWORD *)(v35 - 12);
          v37 = *(_DWORD *)(v35 - 4);
          if (v36 < v37 && v37 >= 9)
            return WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(v6, v37 >> 1, 0);
        }
      }
    }
  }
  return this;
}

WTF::StringImpl **WebCore::IdTargetObserverRegistry::notifyObserversInternal(WTF::StringImpl **this, const WTF::AtomString *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  uint64_t *v5;
  int v6;
  unsigned int i;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  int j;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  unsigned int k;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;

  v3 = this;
  v5 = (uint64_t *)(this + 1);
  v4 = this[1];
  if (v4)
  {
    v6 = 0;
    for (i = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; i = v6 + v8)
    {
      v8 = i & *((_DWORD *)v4 - 2);
      v9 = *((_QWORD *)v4 + 2 * v8);
      if (v9 != -1)
      {
        if (!v9)
          goto LABEL_7;
        if (v9 == *(_QWORD *)a2)
          break;
      }
      ++v6;
    }
    v10 = (WTF::StringImpl *)*((_QWORD *)v4 + 2 * v8 + 1);
    if (v10)
      ++*(_DWORD *)v10;
  }
  else
  {
LABEL_7:
    v10 = 0;
  }
  v11 = this[2];
  this[2] = v10;
  if (v11)
  {
    if (!*(_DWORD *)v11)
      goto LABEL_75;
    --*(_DWORD *)v11;
  }
  if (!v10)
    return this;
  v12 = *((_QWORD *)v10 + 1);
  if (!v12)
  {
    v21 = *(_DWORD *)v10;
    goto LABEL_53;
  }
  v13 = *(unsigned int *)(v12 - 12);
  if (!(_DWORD)v13)
  {
    v21 = *(_DWORD *)v10;
    goto LABEL_50;
  }
  if (v13 >> 29)
  {
LABEL_75:
    __break(0xC471u);
    JUMPOUT(0x1959F504CLL);
  }
  v14 = WTF::fastMalloc((WTF *)(8 * v13));
  v16 = (WTF *)v14;
  v17 = *((_QWORD *)v10 + 1);
  if (v17 && *(_DWORD *)(v17 - 12))
  {
    v18 = *(unsigned int *)(v17 - 4);
    if ((_DWORD)v18)
    {
      v19 = 8 * v18;
      v20 = (uint64_t *)*((_QWORD *)v10 + 1);
      while ((unint64_t)(*v20 + 1) <= 1)
      {
        ++v20;
        v19 -= 8;
        if (!v19)
          goto LABEL_49;
      }
    }
    else
    {
      v20 = (uint64_t *)*((_QWORD *)v10 + 1);
    }
    v22 = (uint64_t *)(v17 + 8 * v18);
    if (v20 != v22)
    {
      v23 = 0;
      v24 = *v20;
      v25 = 1;
LABEL_29:
      v26 = v25;
      ++*(_DWORD *)(v24 + 8);
      *(_QWORD *)(v14 + 8 * v23++) = v24;
      while (++v20 != v22)
      {
        v24 = *v20;
        if ((unint64_t)(*v20 + 1) > 1)
        {
          ++v25;
          if (v20 != v22)
            goto LABEL_29;
          break;
        }
      }
      if (v23)
      {
        if (*((_QWORD *)v3[2] + 1))
        {
          v27 = (uint64_t *)(v14 + 8 * v23);
          v28 = (uint64_t *)v14;
          do
          {
            v29 = *((_QWORD *)v3[2] + 1);
            if (v29)
            {
              v30 = *(_DWORD *)(v29 - 8);
              v31 = *v28;
              v32 = ~(*v28 << 32) + *v28;
              v33 = (v32 ^ (v32 >> 22)) + ~((v32 ^ (v32 >> 22)) << 13);
              v34 = (9 * (v33 ^ (v33 >> 8))) ^ ((9 * (v33 ^ (v33 >> 8))) >> 15);
              v35 = v30 & (((v34 + ~(v34 << 27)) >> 31) ^ (v34 + ~((_DWORD)v34 << 27)));
              for (j = 1; ; ++j)
              {
                v37 = *(_QWORD *)(v29 + 8 * v35);
                if (v37 != -1)
                {
                  if (!v37)
                    goto LABEL_43;
                  if (v37 == v31)
                    break;
                }
                v35 = (v35 + j) & v30;
              }
              (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
            }
LABEL_43:
            ++v28;
          }
          while (v28 != v27);
        }
        v38 = 8 * v26;
        v39 = v16;
        do
        {
          v40 = *(_QWORD *)v39;
          *(_QWORD *)v39 = 0;
          if (v40)
          {
            v41 = *(_DWORD *)(v40 + 8);
            if (!v41)
            {
              __break(0xC471u);
              JUMPOUT(0x1959F508CLL);
            }
            *(_DWORD *)(v40 + 8) = v41 - 1;
          }
          v39 = (WTF *)((char *)v39 + 8);
          v38 -= 8;
        }
        while (v38);
      }
    }
  }
LABEL_49:
  this = (WTF::StringImpl **)WTF::fastFree(v16, v15);
  v10 = v3[2];
  v12 = *((_QWORD *)v10 + 1);
  v21 = *(_DWORD *)v10;
  if (v12)
  {
LABEL_50:
    if (v21)
    {
      v42 = *(_DWORD *)(v12 - 12);
      *(_DWORD *)v10 = v21 - 1;
      v3[2] = 0;
      if (v42)
        return this;
      goto LABEL_55;
    }
LABEL_73:
    __break(0xC471u);
    JUMPOUT(0x1959F506CLL);
  }
LABEL_53:
  if (!v21)
    goto LABEL_73;
  *(_DWORD *)v10 = v21 - 1;
  v3[2] = 0;
LABEL_55:
  v43 = *v5;
  if (*v5)
  {
    v44 = 0;
    for (k = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; k = v44 + v46)
    {
      v46 = k & *(_DWORD *)(v43 - 8);
      v47 = *(_QWORD *)(v43 + 16 * v46);
      if (v47 != -1)
      {
        if (!v47)
          return this;
        if (v47 == *(_QWORD *)a2)
          break;
      }
      ++v44;
    }
    if ((_DWORD)v46 != *(_DWORD *)(v43 - 4))
    {
      this = (WTF::StringImpl **)WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>>::customDeleteBucket((WTF::StringImpl **)(v43 + 16 * v46), a2);
      ++*(_DWORD *)(*v5 - 16);
      v48 = *v5;
      v49 = *v5 ? *(_DWORD *)(v48 - 12) - 1 : -1;
      *(_DWORD *)(v48 - 12) = v49;
      v50 = *v5;
      if (*v5)
      {
        v51 = 6 * *(_DWORD *)(v50 - 12);
        v52 = *(_DWORD *)(v50 - 4);
        if (v51 < v52 && v52 >= 9)
          return WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(v5, v52 >> 1, 0);
      }
    }
  }
  return this;
}

uint64_t WebCore::IdleCallbackController::queueIdleCallback(uint64_t a1, WTF::StringImpl *a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t StatusReg;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  WTF::MonotonicTime *v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::Page *v34;
  WebCore::WindowEventLoop *v35;
  WTF *v37;
  void *v38;
  WebCore::WindowEventLoop *v39;

  v7 = *(_QWORD *)(a1 + 16);
  v5 = a1 + 16;
  v6 = v7;
  v8 = (*(_DWORD *)(v5 - 8) + 1);
  *(_DWORD *)(v5 - 8) = v8;
  v9 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v10 = *(_QWORD *)(v5 + 8);
  if (v7)
  {
    if (v10 + 1 != v6)
      goto LABEL_10;
    goto LABEL_9;
  }
  v11 = *(unsigned int *)(a1 + 40);
  if (!v10)
  {
    if ((_DWORD)v11)
    {
      v10 = 0;
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v10 == v11 - 1)
  {
LABEL_9:
    WTF::Deque<WebCore::IdleCallbackController::IdleRequest,0ul>::expandCapacity(v5);
    v10 = *(_QWORD *)(a1 + 24);
  }
LABEL_10:
  v12 = *(_QWORD *)(a1 + 32) + 16 * v10;
  *(_DWORD *)v12 = v8;
  *(_QWORD *)(v12 + 8) = v9;
  if (v10 == *(unsigned int *)(a1 + 40) - 1)
    v13 = 0;
  else
    v13 = v10 + 1;
  *(_QWORD *)(a1 + 24) = v13;
  if (a3 <= 0.0)
  {
    v29 = *(_QWORD *)(a1 + 80);
    if (v29)
    {
      v30 = *(_QWORD *)(v29 + 8);
      if (v30)
      {
        v31 = *(_QWORD *)(v30 + 528);
        if (v31)
        {
          v32 = *(_QWORD *)(v31 + 8);
          if (v32)
          {
            v33 = *(_QWORD *)(v32 + 24);
            if (v33)
            {
              v34 = *(WebCore::Page **)(v33 + 8);
              if (v34)
              {
                ++*(_DWORD *)v34;
                WebCore::Document::protectedWindowEventLoop((unsigned int *)v30, a2, &v39);
                v35 = v39;
                WebCore::WindowEventLoop::scheduleIdlePeriod((uint64_t)v39, v34);
                if (v35)
                {
                  if (*((_DWORD *)v35 + 2) == 1)
                    (*(void (**)(WebCore::WindowEventLoop *))(*(_QWORD *)v35 + 8))(v35);
                  else
                    --*((_DWORD *)v35 + 2);
                }
                if (*(_DWORD *)v34 == 1)
                {
                  WebCore::Page::~Page(v34);
                  WTF::fastFree(v37, v38);
                }
                else
                {
                  --*(_DWORD *)v34;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    v14 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      goto LABEL_43;
    v14 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = a1;
    v16 = *(unsigned int **)a1;
    *(_QWORD *)a1 = v14;
    if (!v16)
      goto LABEL_43;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, v15);
    }
    v14 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
LABEL_43:
      do
        v19 = __ldaxr((unsigned int *)v14);
      while (__stlxr(v19 + 1, (unsigned int *)v14));
    }
    v20 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v20 = &off_1E33A5188;
    *(_QWORD *)(v20 + 8) = v14;
    *(_DWORD *)(v20 + 16) = v8;
    v21 = WTF::fastMalloc((WTF *)0x38);
    v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v22 = off_1E33A5088;
    *(_QWORD *)v21 = off_1E3407128;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(_OWORD *)(v21 + 8) = 0u;
    *(_OWORD *)(v21 + 24) = 0u;
    v24 = *(unsigned int **)(StatusReg + 736);
    if (!v24)
      v24 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 + 1, v24));
    *(_QWORD *)v21 = off_1E31F7378;
    *(_QWORD *)(v21 + 40) = v24;
    *(_QWORD *)(v21 + 48) = v22;
    v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v26 = &off_1E33A50B0;
    v26[1] = v21;
    v26[2] = v20;
    v27 = *(WTF::MonotonicTime **)(v21 + 48);
    *(_QWORD *)(v21 + 48) = v26;
    if (v27)
      v27 = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)v27 + 8))(v27);
    *(_QWORD *)(v21 + 24) = 0;
    WTF::MonotonicTime::now(v27);
    WebCore::TimerBase::setNextFireTime(v21, a3 + v28);
  }
  return v8;
}

uint64_t WebCore::IdleCallbackController::removeIdleCallback(uint64_t this, int a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (a2 < 1)
    return this;
  v3 = this;
  v4 = *(_QWORD *)(this + 16);
  v5 = *(_QWORD *)(this + 24);
  v6 = (uint64_t *)(this + 16);
  if (v4 > v5)
    v5 += *(unsigned int *)(this + 40);
  v7 = v5 - v4;
  if (v5 != v4)
  {
    while (1)
    {
      v11 = *(_QWORD *)(v3 + 16);
      if (v11 == *(_QWORD *)(v3 + 24))
      {
LABEL_65:
        __break(0xC471u);
        JUMPOUT(0x1959F55ECLL);
      }
      v12 = *(_QWORD *)(v3 + 32) + 16 * v11;
      v13 = *(_DWORD *)v12;
      v14 = *(_DWORD **)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      v15 = *(_QWORD *)(v3 + 32) + 16 * v11;
      this = *(_QWORD *)(v15 + 8);
      *(_QWORD *)(v15 + 8) = 0;
      if (this)
      {
        if (*(_DWORD *)(this + 16) == 1)
        {
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
          v11 = *v6;
        }
        else
        {
          --*(_DWORD *)(this + 16);
        }
      }
      v16 = *(unsigned int *)(v3 + 40);
      v17 = v16 - 1;
      if (v11 == v16 - 1)
        v18 = 0;
      else
        v18 = v11 + 1;
      *(_QWORD *)(v3 + 16) = v18;
      if (v13 == a2)
      {
        if (v14)
        {
          if (v14[4] == 1)
            this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
          else
            --v14[4];
        }
        goto LABEL_33;
      }
      v19 = *(_QWORD *)(v3 + 24);
      if (v18)
        break;
      if (v19)
      {
        if (v19 != v17)
          goto LABEL_29;
LABEL_28:
        this = WTF::Deque<WebCore::IdleCallbackController::IdleRequest,0ul>::expandCapacity((uint64_t)v6);
        v19 = *(_QWORD *)(v3 + 24);
        v17 = *(unsigned int *)(v3 + 40) - 1;
        goto LABEL_29;
      }
      if (!(_DWORD)v16)
        goto LABEL_28;
      v19 = 0;
LABEL_29:
      v20 = *(_QWORD *)(v3 + 32) + 16 * v19;
      *(_DWORD *)v20 = v13;
      *(_QWORD *)(v20 + 8) = v14;
      if (v19 == v17)
        v21 = 0;
      else
        v21 = v19 + 1;
      *(_QWORD *)(v3 + 24) = v21;
LABEL_33:
      if (!--v7)
        goto LABEL_5;
    }
    if (v19 + 1 != v18)
      goto LABEL_29;
    goto LABEL_28;
  }
LABEL_5:
  v8 = *(_QWORD *)(v3 + 48);
  v9 = *(_QWORD *)(v3 + 56);
  if (v8 > v9)
    v9 += *(unsigned int *)(v3 + 72);
  v10 = v9 - v8;
  if (v9 != v8)
  {
    while (1)
    {
      v22 = *(_QWORD *)(v3 + 48);
      if (v22 == *(_QWORD *)(v3 + 56))
        goto LABEL_65;
      v23 = *(_QWORD *)(v3 + 64) + 16 * v22;
      v24 = *(_DWORD *)v23;
      v25 = *(_DWORD **)(v23 + 8);
      *(_QWORD *)(v23 + 8) = 0;
      v26 = *(_QWORD *)(v3 + 64) + 16 * v22;
      this = *(_QWORD *)(v26 + 8);
      *(_QWORD *)(v26 + 8) = 0;
      if (this)
      {
        if (*(_DWORD *)(this + 16) == 1)
        {
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
          v22 = *(_QWORD *)(v3 + 48);
        }
        else
        {
          --*(_DWORD *)(this + 16);
        }
      }
      v27 = *(unsigned int *)(v3 + 72);
      v28 = v27 - 1;
      v29 = v22 == v27 - 1 ? 0 : v22 + 1;
      *(_QWORD *)(v3 + 48) = v29;
      if (v24 != a2)
        break;
      if (v25)
      {
        if (v25[4] == 1)
          this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v25 + 16))(v25);
        else
          --v25[4];
      }
LABEL_61:
      if (!--v10)
        return this;
    }
    v30 = *(_QWORD *)(v3 + 56);
    if (v29)
    {
      if (v30 + 1 != v29)
        goto LABEL_57;
    }
    else if (v30)
    {
      if (v30 != v28)
        goto LABEL_57;
    }
    else if ((_DWORD)v27)
    {
      v30 = 0;
LABEL_57:
      v31 = *(_QWORD *)(v3 + 64) + 16 * v30;
      *(_DWORD *)v31 = v24;
      *(_QWORD *)(v31 + 8) = v25;
      if (v30 == v28)
        v32 = 0;
      else
        v32 = v30 + 1;
      *(_QWORD *)(v3 + 56) = v32;
      goto LABEL_61;
    }
    this = WTF::Deque<WebCore::IdleCallbackController::IdleRequest,0ul>::expandCapacity(v3 + 48);
    v30 = *(_QWORD *)(v3 + 56);
    v28 = *(unsigned int *)(v3 + 72) - 1;
    goto LABEL_57;
  }
  return this;
}

unsigned int *WebCore::IdleCallbackController::startIdlePeriod(WebCore::IdleCallbackController *this, void *a2)
{
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *result;
  WTF::StringImpl *v15;

  v4 = *((_QWORD *)this + 2);
  v5 = *((_QWORD *)this + 3);
  v3 = (unint64_t *)((char *)this + 16);
  if (v4 != v5)
  {
    v6 = *((_QWORD *)this + 7);
    while (1)
    {
      v7 = *((_QWORD *)this + 4) + 16 * v4;
      v8 = *(_DWORD *)v7;
      v9 = *(_QWORD *)(v7 + 8);
      *(_QWORD *)(v7 + 8) = 0;
      v10 = *((_QWORD *)this + 6);
      if (v10)
        break;
      v11 = *((unsigned int *)this + 18);
      if (v6)
      {
        if (v6 != v11 - 1)
          goto LABEL_12;
LABEL_11:
        WTF::Deque<WebCore::IdleCallbackController::IdleRequest,0ul>::expandCapacity((uint64_t)this + 48);
        v6 = *((_QWORD *)this + 7);
        goto LABEL_12;
      }
      if (!(_DWORD)v11)
        goto LABEL_11;
      v6 = 0;
LABEL_12:
      v12 = *((_QWORD *)this + 8) + 16 * v6;
      *(_DWORD *)v12 = v8;
      *(_QWORD *)(v12 + 8) = v9;
      if (v6 == *((unsigned int *)this + 18) - 1)
        v6 = 0;
      else
        ++v6;
      *((_QWORD *)this + 7) = v6;
      v13 = *((unsigned int *)this + 10);
      v4 += v13 + 1;
      do
        v4 -= v13;
      while (v4 >= v13);
      if (v5 == v4)
        goto LABEL_18;
    }
    if (v6 + 1 != v10)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_18:
  result = (unsigned int *)WTF::Deque<WebCore::IdleCallbackController::IdleRequest,0ul>::clear(v3, a2);
  if (*((_QWORD *)this + 6) != *((_QWORD *)this + 7))
    return WebCore::IdleCallbackController::queueTaskToInvokeIdleCallbacks(this, v15);
  return result;
}

WTF *WTF::Deque<WebCore::IdleCallbackController::IdleRequest,0ul>::clear(unint64_t *a1, void *a2)
{
  unint64_t v3;
  unint64_t v4;
  WTF *result;
  uint64_t v6;
  _DWORD **v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD **v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD **v14;
  _DWORD *v15;

  v3 = *a1;
  v4 = a1[1];
  result = (WTF *)a1[2];
  if (v3 <= v4)
  {
    if (v3 == v4)
      goto LABEL_20;
    v9 = 16 * v4 - 16 * v3;
    v10 = (_DWORD **)((char *)result + 16 * v3 + 8);
    do
    {
      v11 = *v10;
      *v10 = 0;
      if (v11)
      {
        if (v11[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
        else
          --v11[4];
      }
      v10 += 2;
      v9 -= 16;
    }
    while (v9);
  }
  else
  {
    if (v4)
    {
      v6 = 16 * v4;
      v7 = (_DWORD **)((char *)result + 8);
      do
      {
        v8 = *v7;
        *v7 = 0;
        if (v8)
        {
          if (v8[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
          else
            --v8[4];
        }
        v7 += 2;
        v6 -= 16;
      }
      while (v6);
      result = (WTF *)a1[2];
      v3 = *a1;
    }
    v12 = *((unsigned int *)a1 + 6);
    if (v3 != v12)
    {
      v13 = 16 * v12 - 16 * v3;
      v14 = (_DWORD **)((char *)result + 16 * v3 + 8);
      do
      {
        v15 = *v14;
        *v14 = 0;
        if (v15)
        {
          if (v15[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
          else
            --v15[4];
        }
        v14 += 2;
        v13 -= 16;
      }
      while (v13);
    }
  }
  result = (WTF *)a1[2];
LABEL_20:
  *a1 = 0;
  a1[1] = 0;
  if (result)
  {
    a1[2] = 0;
    *((_DWORD *)a1 + 6) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

unsigned int *WebCore::IdleCallbackController::queueTaskToInvokeIdleCallbacks(WebCore::IdleCallbackController *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  void *v7;
  unsigned int *result;
  unsigned int *v9;

  v3 = *((_QWORD *)this + 10);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  *(_DWORD *)(v4 + 24) += 2;
  v5 = WebCore::Document::eventLoop((WebCore::Document *)v4, a2);
  *(_DWORD *)(v4 + 24) += 2;
  v6 = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v6 = &off_1E33A51D8;
  *((_QWORD *)v6 + 1) = this;
  *((_QWORD *)v6 + 2) = v4;
  v9 = v6;
  WebCore::EventLoopTaskGroup::queueTask(v5, 6, (uint64_t *)&v9);
  result = v9;
  v9 = 0;
  if (result)
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v4, v7);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return result;
}

double WebCore::IdleDeadline::timeRemaining(WebCore::IdleDeadline *this, WebCore::Document *a2)
{
  WebCore::LocalDOMWindow *v2;
  double v3;
  uint64_t v5;
  WTF::StringImpl *v6;
  double v7;
  double v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  char v13;
  void *v15;
  double v16;
  bmalloc::api *v18;
  void *v19;
  WebCore::WindowEventLoop *v20;
  WebCore::WindowEventLoop *v21;
  WebCore::WindowEventLoop *v22;
  int v23;
  WebCore::WindowEventLoop *v24[3];

  v2 = (WebCore::LocalDOMWindow *)*((_QWORD *)a2 + 87);
  if (!v2)
    return 0.0;
  ++*((_DWORD *)v2 + 6);
  v3 = 0.0;
  if (!*((_BYTE *)this + 4))
  {
    v5 = WebCore::LocalDOMWindow::performance(v2);
    ++*(_DWORD *)(v5 + 16);
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
    v8 = *(double *)&WebCore::timePrecision * floor((v7 - *(double *)(v5 + 168)) / *(double *)&WebCore::timePrecision);
    v9 = (double *)*((_QWORD *)a2 + 368);
    if (v9)
    {
LABEL_4:
      v10 = v8 * 1000.0;
      if (v9[16] >= v9[41] + 0.05)
        v11 = v9[41] + 0.05;
      else
        v11 = v9[16];
      v12 = COERCE_DOUBLE(WebCore::WindowEventLoop::nextRenderingTime((WebCore::WindowEventLoop *)v9));
      if (v11 > v12 && v13 != 0)
        v11 = v12;
      v16 = *(double *)&WebCore::timePrecision
          * floor((v11 - WebCore::Performance::timeResolution(*(WebCore::Performance **)&v12) - *(double *)(v5 + 168))/ *(double *)&WebCore::timePrecision)* 1000.0;
      if (v16 >= v10)
        v3 = v16 - v10;
      else
        v3 = 0.0;
      if (*(_DWORD *)(v5 + 16) == 1)
      {
        WebCore::Performance::~Performance((WebCore::Performance *)v5, v15);
        bmalloc::api::isoDeallocate(v18, v19);
      }
      else
      {
        --*(_DWORD *)(v5 + 16);
      }
      goto LABEL_17;
    }
    WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)a2 + 192), v6);
    WebCore::WindowEventLoop::eventLoopForSecurityOrigin(v20, v24);
    v21 = v24[0];
    v24[0] = 0;
    v22 = (WebCore::WindowEventLoop *)*((_QWORD *)a2 + 368);
    *((_QWORD *)a2 + 368) = v21;
    if (v22)
    {
      v23 = *((_DWORD *)v22 + 2) - 1;
      if (*((_DWORD *)v22 + 2) == 1)
      {
        (*(void (**)(WebCore::WindowEventLoop *))(*(_QWORD *)v22 + 8))(v22);
        v22 = v24[0];
        v24[0] = 0;
        if (!v22)
          goto LABEL_26;
        v23 = *((_DWORD *)v22 + 2) - 1;
        if (*((_DWORD *)v22 + 2) == 1)
        {
          (*(void (**)(WebCore::WindowEventLoop *))(*(_QWORD *)v22 + 8))(v22);
          goto LABEL_26;
        }
      }
      *((_DWORD *)v22 + 2) = v23;
    }
LABEL_26:
    WTF::WeakHashSet<WebCore::ScriptExecutionContext,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::ScriptExecutionContext>(*((_QWORD *)a2 + 368) + 104, (_QWORD *)a2 + 24, (uint64_t)v24);
    v9 = (double *)*((_QWORD *)a2 + 368);
    goto LABEL_4;
  }
LABEL_17:
  if (*((_DWORD *)v2 + 6) == 1)
    (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v2 + 72))(v2);
  else
    --*((_DWORD *)v2 + 6);
  return v3;
}

uint64_t WTF::Deque<WebCore::GCReachableRef<WebCore::Node,void>,0ul>::expandCapacity(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  WTF *v4;
  unsigned int v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(unsigned int *)(result + 24);
  v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF)
    v2 = 15;
  if (v2 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = result;
    v4 = *(WTF **)(result + 16);
    v5 = v2 + 1;
    result = WTF::fastMalloc((WTF *)(8 * (v2 + 1)));
    v7 = (_QWORD *)result;
    *(_DWORD *)(v3 + 24) = v5;
    *(_QWORD *)(v3 + 16) = result;
    v8 = *(_QWORD *)v3;
    v9 = *(_QWORD *)(v3 + 8);
    if (*(_QWORD *)v3 <= v9)
    {
      if (*(_QWORD *)v3 != v9)
      {
        v14 = (uint64_t *)(result + 8 * v8);
        v15 = (uint64_t *)((char *)v4 + 8 * v8);
        v16 = 8 * v9 - 8 * v8;
        do
        {
          v17 = *v15;
          *v15 = 0;
          *v14 = v17;
          v18 = *v15;
          if (*v15)
          {
            {
              WebCore::GCReachableRefMap::map(void)::map = 0;
            }
            v26 = v18;
            if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, &v26))*(_QWORD *)(v18 + 16) &= ~0x4000000000000uLL;
            result = *v15;
            *v15 = 0;
            if (result)
            {
              if (*(_DWORD *)(result + 24) == 2)
              {
                if ((*(_WORD *)(result + 30) & 0x400) == 0)
                  result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
              }
              else
              {
                *(_DWORD *)(result + 24) -= 2;
              }
            }
          }
          else
          {
            *v15 = 0;
          }
          ++v14;
          ++v15;
          v16 -= 8;
        }
        while (v16);
      }
    }
    else
    {
      if (v9)
      {
        v10 = 8 * v9;
        v11 = (uint64_t *)v4;
        do
        {
          v12 = *v11;
          *v11 = 0;
          *v7 = v12;
          v13 = *v11;
          if (*v11)
          {
            {
              WebCore::GCReachableRefMap::map(void)::map = 0;
            }
            v26 = v13;
            if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, &v26))*(_QWORD *)(v13 + 16) &= ~0x4000000000000uLL;
            result = *v11;
            *v11 = 0;
            if (result)
            {
              if (*(_DWORD *)(result + 24) == 2)
              {
                if ((*(_WORD *)(result + 30) & 0x400) == 0)
                  result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
              }
              else
              {
                *(_DWORD *)(result + 24) -= 2;
              }
            }
          }
          else
          {
            *v11 = 0;
          }
          ++v7;
          ++v11;
          v10 -= 8;
        }
        while (v10);
        v5 = *(_DWORD *)(v3 + 24);
        v8 = *(_QWORD *)v3;
        v7 = *(_QWORD **)(v3 + 16);
      }
      v19 = v8 - v1 + v5;
      if (v8 != v1)
      {
        v20 = v5;
        v21 = (uint64_t *)((char *)v4 + 8 * v8);
        v22 = &v7[v20];
        v23 = 8 * v8 - 8 * v1;
        do
        {
          v24 = *v21;
          *v21 = 0;
          *(_QWORD *)((char *)v22 + v23) = v24;
          v25 = *v21;
          if (*v21)
          {
            {
              WebCore::GCReachableRefMap::map(void)::map = 0;
            }
            v26 = v25;
            if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, &v26))*(_QWORD *)(v25 + 16) &= ~0x4000000000000uLL;
            result = *v21;
            *v21 = 0;
            if (result)
            {
              if (*(_DWORD *)(result + 24) == 2)
              {
                if ((*(_WORD *)(result + 30) & 0x400) == 0)
                  result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
              }
              else
              {
                *(_DWORD *)(result + 24) -= 2;
              }
            }
          }
          else
          {
            *v21 = 0;
          }
          ++v21;
          v23 += 8;
        }
        while (v23);
      }
      *(_QWORD *)v3 = v19;
    }
    if (v4)
    {
      if (*(WTF **)(v3 + 16) == v4)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
      }
      return WTF::fastFree(v4, v6);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FullscreenManager::requestFullscreenForElement(WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::FullscreenManager::FullscreenCheckType,WTF::CompletionHandler<void ()(BOOL)> &&,unsigned int)::$_0::operator()(WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E33A5060;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FullscreenManager::requestFullscreenForElement(WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::FullscreenManager::FullscreenCheckType,WTF::CompletionHandler<void ()(BOOL)> &&,unsigned int)::$_0::operator()(WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33A5060;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unint64_t *WTF::Detail::CallableWrapper<WebCore::FullscreenManager::requestFullscreenForElement(WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::FullscreenManager::FullscreenCheckType,WTF::CompletionHandler<void ()(BOOL)> &&,unsigned int)::$_0::operator()(WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>)::{lambda(void)#1},void>::call(unint64_t *result)
{
  unint64_t v1;

  v1 = result[1];
  if (v1)
  {
    result = *(unint64_t **)(v1 + 8);
    if (result)
      return WebCore::FullscreenManager::notifyAboutFullscreenChangeOrError((WebCore::FullscreenManager *)result);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  uint64_t result;

  v3 = *(unsigned int *)(a1 - 4);
  if (!(_DWORD)v3)
    return WTF::fastFree((WTF *)(a1 - 16), a2);
  v4 = 0;
  while (1)
  {
    v5 = (WTF::StringImpl **)(a1 + 16 * v4);
    if (*v5 != (WTF::StringImpl *)-1)
      break;
LABEL_19:
    if (++v4 == v3)
      return WTF::fastFree((WTF *)(a1 - 16), a2);
  }
  v6 = v5[1];
  v5[1] = 0;
  if (!v6)
  {
LABEL_16:
    v12 = *v5;
    *v5 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v12 -= 2;
    }
    goto LABEL_19;
  }
  v7 = *((_QWORD *)v6 + 1);
  if (!v7)
  {
LABEL_14:
    if (*(_DWORD *)v6)
    {
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v6 + 1) = 0;
    }
    else
    {
      WTF::fastFree(v6, a2);
    }
    goto LABEL_16;
  }
  v8 = *(unsigned int *)(v7 - 4);
  if (!(_DWORD)v8)
  {
LABEL_13:
    WTF::fastFree((WTF *)(v7 - 16), a2);
    goto LABEL_14;
  }
  v9 = (uint64_t *)*((_QWORD *)v6 + 1);
  while (1)
  {
    v10 = *v9;
    if (*v9 == -1)
      goto LABEL_12;
    *v9 = 0;
    if (!v10)
      goto LABEL_12;
    v11 = *(_DWORD *)(v10 + 8);
    if (!v11)
      break;
    *(_DWORD *)(v10 + 8) = v11 - 1;
LABEL_12:
    ++v9;
    if (!--v8)
      goto LABEL_13;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Timer::schedule(WTF::Seconds,WTF::Function<void ()(void)> &&)::{lambda(void)#2},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E33A50B0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Timer::schedule(WTF::Seconds,WTF::Function<void ()(void)> &&)::{lambda(void)#2},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E33A50B0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Timer::schedule(WTF::Seconds,WTF::Function<void ()(void)> &&)::{lambda(void)#2},void>::call(uint64_t a1)
{
  uint64_t result;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FullscreenManager::requestFullscreenForElement(WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::FullscreenManager::FullscreenCheckType,WTF::CompletionHandler<void ()(BOOL)> &&,unsigned int)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *a1 = off_1E33A50D8;
  v3 = (unsigned int *)a1[8];
  a1[8] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = a1[5];
  a1[5] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (_DWORD *)a1[4];
  a1[4] = 0;
  if (v7)
  {
    if (v7[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[4];
  }
  v8 = a1[3];
  a1[3] = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  v9 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FullscreenManager::requestFullscreenForElement(WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::FullscreenManager::FullscreenCheckType,WTF::CompletionHandler<void ()(BOOL)> &&,unsigned int)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v2;
  void *v3;

  v2 = (WTF *)WTF::Detail::CallableWrapper<WebCore::FullscreenManager::requestFullscreenForElement(WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::FullscreenManager::FullscreenCheckType,WTF::CompletionHandler<void ()(BOOL)> &&,unsigned int)::$_1,void>::~CallableWrapper(a1, a2);
  return WTF::fastFree(v2, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FullscreenManager::requestFullscreenForElement(WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::FullscreenManager::FullscreenCheckType,WTF::CompletionHandler<void ()(BOOL)> &&,unsigned int)::$_1,void>::call(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  int isFeatureEnabled;
  WebCore::Document *v22;
  _QWORD *v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  char v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  WebCore::FullscreenManager *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  int v56;
  int8x16_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t (*v61)(void);
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  NSObject *v73;
  uint64_t v74;
  void *v75;
  char *v76;
  unsigned __int8 *v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  WTF::Logger *v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF::Logger *v89;
  uint64_t v90;
  WTF::StringImpl **v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  int v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  int8x16_t v100;
  WTF::Logger::LogSiteIdentifier *v101[2];
  WTF::Logger *v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  uint8_t buf[16];
  WTF::StringImpl *v108[2];
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3 || !*(_QWORD *)(v3 + 8))
  {
    v6 = *(_QWORD *)(a1 + 32);
    if (v6)
    {
      v102 = 0;
      buf[0] = 33;
      *(_QWORD *)&buf[8] = 0;
      WebCore::DeferredPromise::reject(v6, buf, 0, &v102);
      v8 = *(WTF::StringImpl **)&buf[8];
      *(_QWORD *)&buf[8] = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
    }
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(v4 + 48) != v5)
  {
    if (*(_BYTE *)(WebCore::Document::logger(*(WebCore::Document **)(*(_QWORD *)(v4 + 16) + 8)) + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [42]>((uint64_t)&WebCore::LogFullscreen, 1u, (WTF::Logger::LogSiteIdentifier *)(a1 + 72), "task - pending element mismatch; failing.");
LABEL_15:
    WebCore::FullscreenManager::requestFullscreenForElement(WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::FullscreenManager::FullscreenCheckType,WTF::CompletionHandler<void ()(BOOL)> &&,unsigned int)::$_0::operator()((unsigned int *)(a1 + 56), (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32));
    v13 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 16))(v13, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v11 = *(_QWORD *)(v4 + 16);
  v12 = *(_QWORD *)(v11 + 8);
  if (*(_BYTE *)(v4 + 40))
  {
    if (*(_BYTE *)(WebCore::Document::logger(*(WebCore::Document **)(v11 + 8)) + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogFullscreen, 1u, (WTF::Logger::LogSiteIdentifier *)(a1 + 72), "task - pending exit fullscreen operation; failing.");
    goto LABEL_15;
  }
  *(_DWORD *)(v12 + 24) += 2;
  v14 = *(_QWORD *)(v12 + 528);
  if ((!v14
     || (v15 = *(_QWORD *)(v14 + 8)) == 0
     || (v16 = *(_QWORD *)(v15 + 24)) == 0
     || (v17 = *(_QWORD *)(v16 + 8)) == 0
     || *(_BYTE *)(v12 + 3437)
     || (*(_WORD *)(v17 + 658) & 4) == 0)
    && *(_DWORD *)(a1 + 104) != 4)
  {
    if (*(_BYTE *)(WebCore::Document::logger((WebCore::Document *)v12) + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [33]>((uint64_t)&WebCore::LogFullscreen, 1u, (WTF::Logger::LogSiteIdentifier *)(a1 + 72), "task - document hidden; failing.");
    goto LABEL_29;
  }
  if ((*(_BYTE *)(v5 + 22) & 8) == 0)
  {
    if (*(_BYTE *)(WebCore::Document::logger((WebCore::Document *)v12) + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogFullscreen, 1u, (WTF::Logger::LogSiteIdentifier *)(a1 + 72), "task - element not in document; failing.");
LABEL_29:
    WebCore::FullscreenManager::requestFullscreenForElement(WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::FullscreenManager::FullscreenCheckType,WTF::CompletionHandler<void ()(BOOL)> &&,unsigned int)::$_0::operator()((unsigned int *)(a1 + 56), (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32));
    v18 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 16))(v18, 0);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
LABEL_82:
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v12, v19);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
    return result;
  }
  v20 = *(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL;
  if (v20)
  {
    v62 = *(_QWORD *)(v20 + 232);
    if (v62)
    {
      if (*(_BYTE *)(v62 + 1))
      {
        if (*(_BYTE *)(WebCore::Document::logger((WebCore::Document *)v12) + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogFullscreen, 1u, (WTF::Logger::LogSiteIdentifier *)(a1 + 72), "Element to fullscreen is an open popover; failing.");
        goto LABEL_29;
      }
    }
  }
  if (!*(_DWORD *)(a1 + 48))
  {
    isFeatureEnabled = WebCore::PermissionsPolicy::isFeatureEnabled(9u, (_QWORD *)v12, 1);
    v22 = *(WebCore::Document **)(*(_QWORD *)(v4 + 16) + 8);
    if (!isFeatureEnabled)
    {
      if (*(_BYTE *)(WebCore::Document::logger(v22) + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogFullscreen, 1u, (WTF::Logger::LogSiteIdentifier *)(a1 + 72), "task - ancestor document does not enable fullscreen; failing.");
      goto LABEL_29;
    }
    v14 = *((_QWORD *)v22 + 66);
  }
  if (!v14)
    goto LABEL_78;
  v23 = *(_QWORD **)(v14 + 8);
  if (!v23)
    goto LABEL_78;
  i = v23[11];
  if (!i)
  {
    v25 = *(_QWORD *)(v23[6] + 8);
    if (!v25)
    {
LABEL_78:
      *(_BYTE *)(v4 + 129) = *(_BYTE *)(a1 + 52);
      v52 = WebCore::Document::eventLoop((WebCore::Document *)v12, a2);
      v53 = *(_QWORD *)(a1 + 16);
      v54 = *(_QWORD *)(a1 + 40);
      v55 = *(_OWORD *)(a1 + 88);
      *(_OWORD *)buf = *(_OWORD *)(a1 + 72);
      *(_OWORD *)v108 = v55;
      v56 = *(_DWORD *)(a1 + 104);
      v57 = *(int8x16_t *)(a1 + 24);
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      v100 = vextq_s8(v57, v57, 8uLL);
      *(_OWORD *)v101 = *(_OWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 64) = 0;
      v58 = WTF::fastMalloc((WTF *)0x68);
      *(_QWORD *)v58 = off_1E33A5100;
      *(_QWORD *)(v58 + 8) = v4;
      *(_QWORD *)(v58 + 16) = v53;
      *(int8x16_t *)(v58 + 24) = v100;
      *(_QWORD *)(v58 + 40) = v54;
      v59 = *(_OWORD *)buf;
      v60 = *(_OWORD *)v108;
      *(_OWORD *)(v58 + 48) = *(_OWORD *)v101;
      *(_OWORD *)(v58 + 64) = v59;
      *(_OWORD *)(v58 + 80) = v60;
      *(_DWORD *)(v58 + 96) = v56;
      v102 = (WTF::Logger *)v58;
      WebCore::EventLoopTaskGroup::queueTask(v52, 9, (uint64_t *)&v102);
      result = (uint64_t)v102;
      v102 = 0;
      if (!result)
        goto LABEL_81;
      v61 = *(uint64_t (**)(void))(*(_QWORD *)result + 8);
LABEL_80:
      result = v61();
LABEL_81:
      if (!v12)
        return result;
      goto LABEL_82;
    }
    for (i = v23[9]; !i; i = *(_QWORD *)(v25 + 72))
    {
      v26 = *(_QWORD *)(v25 + 56);
      if (!v26)
        goto LABEL_78;
      v25 = *(_QWORD *)(v26 + 8);
      if (!v25)
        goto LABEL_78;
    }
  }
  v27 = (unsigned int *)(i + 8);
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 + 1, v27));
  while (1)
  {
    if (!*(_BYTE *)(i + 144))
    {
      v29 = *(_QWORD *)(i + 296);
      v30 = *(_QWORD *)(v29 + 1992);
      if (!v30)
      {
        v42 = WTF::fastMalloc((WTF *)0x90);
        *(_QWORD *)v42 = 0;
        *(_DWORD *)(v42 + 8) = 0;
        v43 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v29);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 + 1, v43));
        *(_QWORD *)(v42 + 24) = 0;
        *(_QWORD *)(v42 + 32) = 0;
        *(_QWORD *)(v42 + 16) = v43;
        *(_BYTE *)(v42 + 40) = 0;
        *(_OWORD *)(v42 + 48) = 0u;
        *(_OWORD *)(v42 + 64) = 0u;
        *(_OWORD *)(v42 + 80) = 0u;
        *(_OWORD *)(v42 + 96) = 0u;
        *(_OWORD *)(v42 + 112) = 0u;
        *(_DWORD *)(v42 + 127) = 0;
        *(_QWORD *)(v42 + 136) = WTF::cryptographicallyRandomNumber<unsigned long long>();
        v45 = *(WebCore::FullscreenManager **)(v29 + 1992);
        *(_QWORD *)(v29 + 1992) = v42;
        if (v45)
        {
          WebCore::FullscreenManager::~FullscreenManager(v45, a2);
          if (*(_DWORD *)(v46 + 8))
          {
            *(_OWORD *)(v46 + 112) = 0u;
            *(_OWORD *)(v46 + 128) = 0u;
            *(_OWORD *)(v46 + 80) = 0u;
            *(_OWORD *)(v46 + 96) = 0u;
            *(_OWORD *)(v46 + 48) = 0u;
            *(_OWORD *)(v46 + 64) = 0u;
            *(_OWORD *)(v46 + 16) = 0u;
            *(_OWORD *)(v46 + 32) = 0u;
            *(_OWORD *)v46 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v46, a2);
          }
        }
        v30 = *(_QWORD *)(v29 + 1992);
      }
      v31 = *(_QWORD *)(*(_QWORD *)(v30 + 16) + 8);
      v32 = *(_QWORD *)(v31 + 3096);
      if (v32)
        break;
    }
LABEL_47:
    v33 = *(_QWORD *)(i + 88);
    if (v33)
      goto LABEL_53;
    v34 = *(_QWORD *)(*(_QWORD *)(i + 48) + 8);
    if (v34)
    {
      v33 = *(_QWORD *)(i + 72);
      if (v33)
      {
LABEL_53:
        v36 = (unsigned int *)(v33 + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 + 1, v36));
        v38 = 0;
        goto LABEL_57;
      }
      while (1)
      {
        v35 = *(_QWORD *)(v34 + 56);
        if (!v35)
          break;
        v34 = *(_QWORD *)(v35 + 8);
        if (!v34)
          break;
        v33 = *(_QWORD *)(v34 + 72);
        if (v33)
          goto LABEL_53;
      }
    }
    v33 = 0;
    v38 = 1;
LABEL_57:
    v39 = (unsigned int *)(i + 8);
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v39);
      v47 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v47 = off_1E31FE290;
      v47[1] = v39;
      *(_QWORD *)buf = v47;
      WTF::ensureOnMainThread();
      v48 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v48)
        (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
    }
    i = v33;
    if ((v38 & 1) != 0)
      goto LABEL_78;
  }
  v49 = 0;
  v50 = v31 + 3104;
  while (1)
  {
    v51 = (uint64_t *)(v49 ? v49 + 8 : v50);
    v49 = *v51;
    if ((*(_BYTE *)(*(_QWORD *)v49 + 54) & 0x40) != 0)
      break;
    if (v49 == v32)
      goto LABEL_47;
  }
  v63 = (unsigned int *)(i + 8);
  do
  {
    v64 = __ldaxr(v63);
    v65 = v64 - 1;
  }
  while (__stlxr(v65, v63));
  if (!v65)
  {
    atomic_store(1u, v63);
    v98 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v98 = off_1E31FE290;
    v98[1] = v63;
    *(_QWORD *)buf = v98;
    WTF::ensureOnMainThread();
    v99 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v99)
      (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
  }
  if (!*(_BYTE *)(WebCore::Document::logger(*(WebCore::Document **)(*(_QWORD *)(v4 + 16) + 8)) + 12))
  {
LABEL_161:
    WebCore::FullscreenManager::requestFullscreenForElement(WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::FullscreenManager::FullscreenCheckType,WTF::CompletionHandler<void ()(BOOL)> &&,unsigned int)::$_0::operator()((unsigned int *)(a1 + 56), (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32));
    v97 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v97 + 16))(v97, 0);
    v61 = *(uint64_t (**)(void))(*(_QWORD *)v97 + 8);
    goto LABEL_80;
  }
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 72));
  result = WTF::String::String((WTF::String *)&v104, "task - descendent document has non-empty fullscreen stack; failing.");
  if (v105)
  {
    v66 = *((_DWORD *)v105 + 1);
    if (v104)
      goto LABEL_98;
LABEL_167:
    v67 = 0;
  }
  else
  {
    v66 = 0;
    if (!v104)
      goto LABEL_167;
LABEL_98:
    v67 = *((_DWORD *)v104 + 1);
  }
  if ((v67 | v66) < 0 || (result = (v66 + v67), __OFADD__(v66, v67)))
  {
    v106 = 0;
  }
  else
  {
    if (v105)
    {
      v68 = *((_DWORD *)v105 + 4);
      v69 = (v68 >> 2) & 1;
      if (v104 && (v68 & 4) != 0)
LABEL_104:
        v69 = (*((unsigned __int8 *)v104 + 16) >> 2) & 1;
    }
    else
    {
      if (v104)
        goto LABEL_104;
      v69 = 1;
    }
    result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v69, (uint64_t)v105, (uint64_t)v104, &v106);
    if (v106)
    {
      v71 = v104;
      v104 = 0;
      if (v71)
      {
        if (*(_DWORD *)v71 == 2)
          WTF::StringImpl::destroy(v71, v70);
        else
          *(_DWORD *)v71 -= 2;
      }
      v72 = v105;
      v105 = 0;
      if (v72)
      {
        if (*(_DWORD *)v72 == 2)
          WTF::StringImpl::destroy(v72, v70);
        else
          *(_DWORD *)v72 -= 2;
      }
      v73 = qword_1ECE7C248;
      v74 = os_log_type_enabled((os_log_t)qword_1ECE7C248, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v74)
      {
        WTF::String::utf8();
        v76 = v102 ? (char *)v102 + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v76;
        _os_log_impl(&dword_1940B8000, v73, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v74 = (uint64_t)v102;
        v102 = 0;
        if (v74)
        {
          if (*(_DWORD *)v74 == 1)
            v74 = WTF::fastFree((WTF *)v74, v75);
          else
            --*(_DWORD *)v74;
        }
      }
      if (WebCore::LogFullscreen && byte_1ECE7C238)
      {
        v77 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v78 = *v77;
          if ((v78 & 1) != 0)
            break;
          v79 = __ldaxr(v77);
          if (v79 == v78)
          {
            if (!__stxr(v78 | 1, v77))
            {
              v80 = WTF::Logger::observers((WTF::Logger *)v74);
              v81 = *(unsigned int *)(v80 + 12);
              if ((_DWORD)v81)
              {
                v82 = *(uint64_t **)v80;
                v83 = *(_QWORD *)v80 + 8 * v81;
                do
                {
                  v84 = *v82;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 72));
                  LODWORD(v108[0]) = 0;
                  WTF::String::String((WTF::String *)&v108[1], "task - descendent document has non-empty fullscreen stack; failing.");
                  v102 = 0;
                  v103 = 0;
                  v85 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                  LODWORD(v103) = 2;
                  v102 = v85;
                  v86 = HIDWORD(v103);
                  *((_DWORD *)v85 + 4 * HIDWORD(v103)) = *(_DWORD *)buf;
                  v87 = *(_QWORD *)&buf[8];
                  if (*(_QWORD *)&buf[8])
                    **(_DWORD **)&buf[8] += 2;
                  *((_QWORD *)v85 + 2 * v86 + 1) = v87;
                  *((_DWORD *)v85 + 4 * (v86 + 1)) = v108[0];
                  v88 = v108[1];
                  if (v108[1])
                    *(_DWORD *)v108[1] += 2;
                  *((_QWORD *)v85 + 2 * (v86 + 1) + 1) = v88;
                  HIDWORD(v103) = v86 + 2;
                  (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v84 + 16))(v84, &WebCore::LogFullscreen, 1, &v102);
                  v89 = v102;
                  if (HIDWORD(v103))
                  {
                    v90 = 16 * HIDWORD(v103);
                    v91 = (WTF::StringImpl **)((char *)v102 + 8);
                    do
                    {
                      v92 = *v91;
                      *v91 = 0;
                      if (v92)
                      {
                        if (*(_DWORD *)v92 == 2)
                          WTF::StringImpl::destroy(v92, (WTF::StringImpl *)v75);
                        else
                          *(_DWORD *)v92 -= 2;
                      }
                      v91 += 2;
                      v90 -= 16;
                    }
                    while (v90);
                    v89 = v102;
                  }
                  if (v89)
                  {
                    v102 = 0;
                    LODWORD(v103) = 0;
                    WTF::fastFree(v89, v75);
                  }
                  v93 = v108[1];
                  v108[1] = 0;
                  if (v93)
                  {
                    if (*(_DWORD *)v93 == 2)
                      WTF::StringImpl::destroy(v93, (WTF::StringImpl *)v75);
                    else
                      *(_DWORD *)v93 -= 2;
                  }
                  v94 = *(WTF::StringImpl **)&buf[8];
                  *(_QWORD *)&buf[8] = 0;
                  if (v94)
                  {
                    if (*(_DWORD *)v94 == 2)
                      WTF::StringImpl::destroy(v94, (WTF::StringImpl *)v75);
                    else
                      *(_DWORD *)v94 -= 2;
                  }
                  ++v82;
                }
                while (v82 != (uint64_t *)v83);
              }
              v95 = __ldxr(v77);
              if (v95 == 1)
              {
                if (!__stlxr(0, v77))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v96 = v106;
      v106 = 0;
      if (v96)
      {
        if (*(_DWORD *)v96 == 2)
          WTF::StringImpl::destroy(v96, (WTF::StringImpl *)v75);
        else
          *(_DWORD *)v96 -= 2;
      }
      goto LABEL_161;
    }
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FullscreenManager::requestFullscreenForElement(WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::FullscreenManager::FullscreenCheckType,WTF::CompletionHandler<void ()(BOOL)> &&,unsigned int)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *a1 = off_1E33A5100;
  v3 = (unsigned int *)a1[7];
  a1[7] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = a1[5];
  a1[5] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[4];
  a1[4] = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  v8 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v8)
  {
    if (v8[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
    else
      --v8[4];
  }
  v9 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FullscreenManager::requestFullscreenForElement(WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::FullscreenManager::FullscreenCheckType,WTF::CompletionHandler<void ()(BOOL)> &&,unsigned int)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v2;
  void *v3;

  v2 = (WTF *)WTF::Detail::CallableWrapper<WebCore::FullscreenManager::requestFullscreenForElement(WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::FullscreenManager::FullscreenCheckType,WTF::CompletionHandler<void ()(BOOL)> &&,unsigned int)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(a1, a2);
  return WTF::fastFree(v2, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FullscreenManager::requestFullscreenForElement(WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::FullscreenManager::FullscreenCheckType,WTF::CompletionHandler<void ()(BOOL)> &&,unsigned int)::$_1::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  _DWORD *v22;
  objc_class *v23;
  WTF::StringImpl *v24;
  unsigned __int8 v25[8];
  WTF::StringImpl *v26;
  objc_class *v27;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2 || !*(_QWORD *)(v2 + 8))
  {
    v12 = *(_QWORD *)(a1 + 24);
    if (v12)
    {
      v23 = 0;
      v25[0] = 33;
      v26 = 0;
      WebCore::DeferredPromise::reject(v12, v25, 0, &v23);
      v14 = v26;
      v26 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
    v15 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 16))(v15, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  v3 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(v3[2] + 8);
  v5 = *(_QWORD *)(v4 + 528);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 24);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          if (!*(_BYTE *)(v4 + 3437) && (*(_WORD *)(v8 + 658) & 4) != 0 || *(_DWORD *)(a1 + 96) == 4)
          {
            v9 = *(_QWORD *)(a1 + 32);
            if (v3[6] == v9 && (*(_BYTE *)(v9 + 22) & 8) != 0)
            {
              if (v3[4])
              {
                if (*(_BYTE *)(WebCore::Document::logger((WebCore::Document *)v4) + 12))
                  WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogFullscreen, 1u, (WTF::Logger::LogSiteIdentifier *)(a1 + 64), "Pending operation cancelled by requestFullscreen() call.");
                v16 = v3[4];
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                LOBYTE(v23) = 33;
                v27 = 0;
                v25[0] = 33;
                v17 = v24;
                if (v24)
                  *(_DWORD *)v24 += 2;
                v26 = v17;
                WebCore::DeferredPromise::reject(v16, v25, 0, &v27);
                v19 = v26;
                v26 = 0;
                if (v19)
                {
                  if (*(_DWORD *)v19 == 2)
                    WTF::StringImpl::destroy(v19, v18);
                  else
                    *(_DWORD *)v19 -= 2;
                }
                v20 = v24;
                v24 = 0;
                if (v20)
                {
                  if (*(_DWORD *)v20 == 2)
                    WTF::StringImpl::destroy(v20, v18);
                  else
                    *(_DWORD *)v20 -= 2;
                }
              }
              v21 = *(_QWORD *)(a1 + 24);
              *(_QWORD *)(a1 + 24) = 0;
              v22 = (_DWORD *)v3[4];
              v3[4] = v21;
              if (v22)
              {
                if (v22[4] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 16))(v22);
                else
                  --v22[4];
              }
              if (*(_BYTE *)(WebCore::Document::logger(*(WebCore::Document **)(v3[2] + 8)) + 12)
                && WebCore::LogFullscreen
                && byte_1ECE7C238 >= 3u)
              {
                WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogFullscreen, 3u, (WTF::Logger::LogSiteIdentifier *)(a1 + 64), "task - success");
              }
              (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 48) + 16) + 1184))(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 16), *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 96));
              v15 = *(_QWORD *)(a1 + 40);
              *(_QWORD *)(a1 + 40) = 0;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, 1);
              return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
            }
          }
        }
      }
    }
  }
  if (*(_BYTE *)(WebCore::Document::logger((WebCore::Document *)v4) + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [53]>((uint64_t)&WebCore::LogFullscreen, 1u, (WTF::Logger::LogSiteIdentifier *)(a1 + 64), "task - page, document, or element mismatch; failing.");
  WebCore::FullscreenManager::requestFullscreenForElement(WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::FullscreenManager::FullscreenCheckType,WTF::CompletionHandler<void ()(BOOL)> &&,unsigned int)::$_0::operator()((unsigned int *)(a1 + 48), (uint64_t *)(a1 + 32), (uint64_t *)(a1 + 24));
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FullscreenManager::cancelFullscreen(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E33A5128;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FullscreenManager::cancelFullscreen(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E33A5128;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::FullscreenManager::cancelFullscreen(void)::$_0,void>::call(unsigned int *result)
{
  uint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  BOOL v11;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  void *v16;
  WebCore::FullscreenManager *v17;
  uint64_t v18;
  void *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;

  v1 = *((_QWORD *)result + 2);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = result;
    v3 = *((_QWORD *)result + 1);
    v4 = *((_QWORD *)result + 3);
    v5 = *(_QWORD *)(v4 + 528);
    if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0 && (v7 = *(_QWORD *)(v6 + 24)) != 0 && *(_QWORD *)(v7 + 8))
    {
      v8 = *(_QWORD *)(v4 + 1992);
      if (!v8)
      {
        v13 = WTF::fastMalloc((WTF *)0x90);
        *(_QWORD *)v13 = 0;
        *(_DWORD *)(v13 + 8) = 0;
        v14 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v4);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        *(_QWORD *)(v13 + 24) = 0;
        *(_QWORD *)(v13 + 32) = 0;
        *(_QWORD *)(v13 + 16) = v14;
        *(_BYTE *)(v13 + 40) = 0;
        *(_OWORD *)(v13 + 48) = 0u;
        *(_OWORD *)(v13 + 64) = 0u;
        *(_OWORD *)(v13 + 80) = 0u;
        *(_OWORD *)(v13 + 96) = 0u;
        *(_OWORD *)(v13 + 112) = 0u;
        *(_DWORD *)(v13 + 127) = 0;
        *(_QWORD *)(v13 + 136) = WTF::cryptographicallyRandomNumber<unsigned long long>();
        v17 = *(WebCore::FullscreenManager **)(v4 + 1992);
        *(_QWORD *)(v4 + 1992) = v13;
        if (v17)
        {
          WebCore::FullscreenManager::~FullscreenManager(v17, v16);
          if (*(_DWORD *)(v18 + 8))
          {
            *(_OWORD *)(v18 + 112) = 0u;
            *(_OWORD *)(v18 + 128) = 0u;
            *(_OWORD *)(v18 + 80) = 0u;
            *(_OWORD *)(v18 + 96) = 0u;
            *(_OWORD *)(v18 + 48) = 0u;
            *(_OWORD *)(v18 + 64) = 0u;
            *(_OWORD *)(v18 + 16) = 0u;
            *(_OWORD *)(v18 + 32) = 0u;
            *(_OWORD *)v18 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v18, v19);
          }
        }
        v8 = *(_QWORD *)(v4 + 1992);
      }
      v9 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 8);
      v10 = *(uint64_t **)(v9 + 3096);
      if (v10)
      {
        v20 = 0;
        v21 = (uint64_t *)(v9 + 3104);
        while (1)
        {
          v22 = v20 ? v20 + 1 : v21;
          v20 = (uint64_t *)*v22;
          v23 = *v20;
          if ((*(_BYTE *)(*v20 + 54) & 0x40) != 0)
            break;
          if (v20 == v10)
            goto LABEL_9;
        }
        *(_DWORD *)(v23 + 24) += 2;
        v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 3) + 528) + 8)
                                                            + 24)
                                                + 8)
                                    + 48)
                        + 16);
        result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 1192))(v24, v23);
        if (*(_DWORD *)(v23 + 24) == 2)
        {
          if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)v23, v25);
        }
        else
        {
          *(_DWORD *)(v23 + 24) -= 2;
        }
      }
      else
      {
LABEL_9:
        result = (unsigned int *)WebCore::Document::logger(*(WebCore::Document **)(*(_QWORD *)(v3 + 16) + 8));
        if (*((_BYTE *)result + 12))
        {
          if (WebCore::LogFullscreen)
            v11 = byte_1ECE7C238 >= 3u;
          else
            v11 = 0;
          if (v11)
            return (unsigned int *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogFullscreen, 3u, (WTF::Logger::LogSiteIdentifier *)(v2 + 8), "Top document has no fullscreen element");
        }
      }
    }
    else
    {
      result = (unsigned int *)WebCore::Document::logger(*(WebCore::Document **)(*(_QWORD *)(v3 + 16) + 8));
      if (*((_BYTE *)result + 12))
      {
        if (WebCore::LogFullscreen && byte_1ECE7C238 >= 3u)
          return (unsigned int *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogFullscreen, 3u, (WTF::Logger::LogSiteIdentifier *)(v2 + 8), "Top document has no page.");
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FullscreenManager::exitFullscreen(WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;

  *a1 = &off_1E33A5150;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FullscreenManager::exitFullscreen(WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;

  *(_QWORD *)this = &off_1E33A5150;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::FullscreenManager::exitFullscreen(WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1,void>::call(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::Document *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  WTF *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  objc_class *v44;

  v1 = result;
  v2 = *((_QWORD *)result + 3);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v3 = *((_QWORD *)result + 1);
    v4 = *(WebCore::Document **)(*(_QWORD *)(v3 + 16) + 8);
    v5 = *((_QWORD *)v4 + 66);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 24);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
          {
            ++*(_DWORD *)v8;
            if (!*(_QWORD *)(v3 + 56) && *(_QWORD *)(v3 + 48))
            {
              if (*(_BYTE *)(WebCore::Document::logger(v4) + 12)
                && WebCore::LogFullscreen
                && byte_1ECE7C238 >= 3u)
              {
                WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogFullscreen, 3u, (WTF::Logger::LogSiteIdentifier *)(v1 + 10), "task - Cancelling pending fullscreen request.");
              }
              result = *(unsigned int **)(v3 + 48);
              *(_QWORD *)(v3 + 48) = 0;
              if (result)
              {
                if (result[6] == 2)
                {
                  if ((*((_WORD *)result + 15) & 0x400) == 0)
                    result = WebCore::Node::removedLastRef((WebCore::Node *)result, v28);
                }
                else
                {
                  result[6] -= 2;
                }
              }
              *(_BYTE *)(v3 + 40) = 0;
              v29 = *((_QWORD *)v1 + 2);
              if (v29)
              {
                v30 = *(_QWORD *)(v29 + 24);
                if (v30)
                {
                  if (*(_QWORD *)v30 && (*(_BYTE *)(v30 + 8) & 3) == 0)
                  {
                    v31 = *(_QWORD *)(v29 + 32);
                    if (!v31 || (*(_BYTE *)(v31 + 8) & 3) != 0)
                      v32 = 0;
                    else
                      v32 = *(uint64_t **)v31;
                    JSC::JSLockHolder::JSLockHolder();
                    WebCore::DeferredPromise::callFunction(v29, v32, 0, (objc_class *)0xA);
                    result = (unsigned int *)MEMORY[0x19AEA32A0](&v42);
                  }
                }
              }
              goto LABEL_75;
            }
            v9 = *(_QWORD *)(v3 + 32);
            if (!v9)
            {
LABEL_17:
              v13 = *((_QWORD *)v1 + 2);
              *((_QWORD *)v1 + 2) = 0;
              v14 = *(_DWORD **)(v3 + 32);
              *(_QWORD *)(v3 + 32) = v13;
              if (v14)
              {
                if (v14[4] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
                else
                  --v14[4];
              }
              if (*((_BYTE *)v1 + 32))
              {
                v15 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8);
                *(_DWORD *)(v15 + 24) += 2;
                WebCore::FullscreenManager::finishExitFullscreen((WebCore::FullscreenManager *)v3, (WebCore::Document *)v15, 1);
                if (*(_DWORD *)(v15 + 24) == 2)
                {
                  if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v15, v16);
                }
                else
                {
                  *(_DWORD *)(v15 + 24) -= 2;
                }
                v17 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8);
                v18 = *(_QWORD *)(v17 + 3096);
                if (v18)
                {
                  v39 = 0;
                  v40 = v17 + 3104;
                  while (1)
                  {
                    v41 = (uint64_t *)(v39 ? v39 + 8 : v40);
                    v39 = *v41;
                    v19 = *(_DWORD **)v39;
                    if ((*(_BYTE *)(*(_QWORD *)v39 + 54) & 0x40) != 0)
                      break;
                    v19 = 0;
                    if (v39 == v18)
                      goto LABEL_25;
                  }
                  v19[6] += 2;
                }
                else
                {
                  v19 = 0;
                }
LABEL_25:
                result = *(unsigned int **)(v3 + 48);
                *(_QWORD *)(v3 + 48) = v19;
                if (result)
                {
                  if (result[6] == 2)
                  {
                    if ((*((_WORD *)result + 15) & 0x400) == 0)
                    {
                      result = WebCore::Node::removedLastRef((WebCore::Node *)result, v19);
                      v19 = *(_DWORD **)(v3 + 48);
                    }
                  }
                  else
                  {
                    result[6] -= 2;
                  }
                }
                if (v19)
                {
                  result = (unsigned int *)(*(uint64_t (**)(_QWORD, _DWORD *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v8 + 48) + 16)
                                                                                                + 1184))(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 16), v19, 1);
                }
                else
                {
                  v33 = *(_QWORD *)(v3 + 32);
                  if (v33)
                  {
                    v34 = *(_QWORD *)(v33 + 24);
                    if (v34 && *(_QWORD *)v34 && (*(_BYTE *)(v34 + 8) & 3) == 0)
                    {
                      v35 = *(_QWORD *)(v33 + 32);
                      if (!v35 || (*(_BYTE *)(v35 + 8) & 3) != 0)
                        v36 = 0;
                      else
                        v36 = *(uint64_t **)v35;
                      JSC::JSLockHolder::JSLockHolder();
                      WebCore::DeferredPromise::callFunction(v33, v36, 0, (objc_class *)0xA);
                      result = (unsigned int *)MEMORY[0x19AEA32A0](&v42);
                      v33 = *(_QWORD *)(v3 + 32);
                      *(_QWORD *)(v3 + 32) = 0;
                      if (!v33)
                        goto LABEL_75;
                    }
                    else
                    {
                      *(_QWORD *)(v3 + 32) = 0;
                    }
                    if (*(_DWORD *)(v33 + 16) == 1)
                      result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
                    else
                      --*(_DWORD *)(v33 + 16);
                  }
                }
              }
              else
              {
                result = (unsigned int *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 48)
                                                                                                 + 16)
                                                                                   + 1192))(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 16), *(_QWORD *)(v3 + 56));
              }
LABEL_75:
              if (*(_DWORD *)v8 == 1)
              {
                WebCore::Page::~Page(v8);
                return (unsigned int *)WTF::fastFree(v37, v38);
              }
              else
              {
                --*(_DWORD *)v8;
              }
              return result;
            }
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v10 = v42;
            v44 = 0;
            LOBYTE(v42) = 33;
            if (v10)
              *(_DWORD *)v10 += 2;
            v43 = v10;
            WebCore::DeferredPromise::reject(v9, (unsigned __int8 *)&v42, 0, &v44);
            v12 = v43;
            v43 = 0;
            if (v12)
            {
              if (*(_DWORD *)v12 == 2)
              {
                WTF::StringImpl::destroy(v12, v11);
                if (!v10)
                  goto LABEL_17;
                goto LABEL_15;
              }
              *(_DWORD *)v12 -= 2;
            }
            if (!v10)
              goto LABEL_17;
LABEL_15:
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v11);
            else
              *(_DWORD *)v10 -= 2;
            goto LABEL_17;
          }
        }
      }
    }
    *(_BYTE *)(v3 + 40) = 0;
    v24 = *((_QWORD *)v1 + 2);
    if (v24)
    {
      v25 = *(_QWORD *)(v24 + 24);
      if (v25)
      {
        if (*(_QWORD *)v25 && (*(_BYTE *)(v25 + 8) & 3) == 0)
        {
          v26 = *(_QWORD *)(v24 + 32);
          if (!v26 || (*(_BYTE *)(v26 + 8) & 3) != 0)
            v27 = 0;
          else
            v27 = *(uint64_t **)v26;
          JSC::JSLockHolder::JSLockHolder();
          WebCore::DeferredPromise::callFunction(v24, v27, 0, (objc_class *)0xA);
          MEMORY[0x19AEA32A0](&v42);
          v4 = *(WebCore::Document **)(*(_QWORD *)(v3 + 16) + 8);
        }
      }
    }
    result = (unsigned int *)WebCore::Document::logger(v4);
    if (*((_BYTE *)result + 12))
      return (unsigned int *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [38]>((uint64_t)&WebCore::LogFullscreen, 1u, (WTF::Logger::LogSiteIdentifier *)(v1 + 10), "task - Document not in page; bailing.");
  }
  else
  {
    v20 = *((_QWORD *)result + 2);
    if (v20)
    {
      v21 = *(_QWORD *)(v20 + 24);
      if (v21)
      {
        if (*(_QWORD *)v21 && (*(_BYTE *)(v21 + 8) & 3) == 0)
        {
          v22 = *(_QWORD *)(v20 + 32);
          if (!v22 || (*(_BYTE *)(v22 + 8) & 3) != 0)
            v23 = 0;
          else
            v23 = *(uint64_t **)v22;
          JSC::JSLockHolder::JSLockHolder();
          WebCore::DeferredPromise::callFunction(v20, v23, 0, (objc_class *)0xA);
          return (unsigned int *)MEMORY[0x19AEA32A0](&v42);
        }
      }
    }
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  WTF::StringImpl *v45;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v23 = *a1;
          if (*a1)
            v24 = *(_DWORD *)(v23 - 8);
          else
            v24 = 0;
          v25 = 0;
          v26 = *((_DWORD *)v14 + 4) >> 8;
          do
          {
            v27 = v26 & v24;
            v26 = ++v25 + v27;
          }
          while (*(_QWORD *)(v23 + 16 * v27));
          v28 = (WTF::StringImpl **)(v23 + 16 * v27);
          v29 = v28[1];
          v28[1] = 0;
          if (v29)
          {
            v30 = *((_QWORD *)v29 + 1);
            if (v30)
            {
              v31 = *(unsigned int *)(v30 - 4);
              if ((_DWORD)v31)
              {
                v32 = (uint64_t *)*((_QWORD *)v29 + 1);
                do
                {
                  v33 = *v32;
                  if (*v32 != -1)
                  {
                    *v32 = 0;
                    if (v33)
                    {
                      v34 = *(_DWORD *)(v33 + 8);
                      if (!v34)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1959F7DC8);
                      }
                      *(_DWORD *)(v33 + 8) = v34 - 1;
                    }
                  }
                  ++v32;
                  --v31;
                }
                while (v31);
              }
              WTF::fastFree((WTF *)(v30 - 16), v10);
            }
            if (*(_DWORD *)v29)
            {
              *(_QWORD *)v29 = 0;
              *((_QWORD *)v29 + 1) = 0;
            }
            else
            {
              WTF::fastFree(v29, v10);
            }
          }
          v35 = *v28;
          *v28 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v35 -= 2;
          }
          v36 = *v13;
          *v13 = 0;
          *v28 = v36;
          v37 = v6 + 16 * v11;
          v38 = *(WTF::StringImpl **)(v37 + 8);
          *(_QWORD *)(v37 + 8) = 0;
          v28[1] = v38;
          v39 = *(WTF **)(v37 + 8);
          *(_QWORD *)(v37 + 8) = 0;
          if (v39)
          {
            v40 = *((_QWORD *)v39 + 1);
            if (v40)
            {
              v41 = *(unsigned int *)(v40 - 4);
              if ((_DWORD)v41)
              {
                v42 = (uint64_t *)*((_QWORD *)v39 + 1);
                do
                {
                  v43 = *v42;
                  if (*v42 != -1)
                  {
                    *v42 = 0;
                    if (v43)
                    {
                      v44 = *(_DWORD *)(v43 + 8);
                      if (!v44)
                      {
LABEL_73:
                        __break(0xC471u);
                        JUMPOUT(0x1959F7DA8);
                      }
                      *(_DWORD *)(v43 + 8) = v44 - 1;
                    }
                  }
                  ++v42;
                  --v41;
                }
                while (v41);
              }
              WTF::fastFree((WTF *)(v40 - 16), v10);
            }
            if (*(_DWORD *)v39)
            {
              *(_QWORD *)v39 = 0;
              *((_QWORD *)v39 + 1) = 0;
            }
            else
            {
              WTF::fastFree(v39, v10);
            }
          }
          v45 = *v13;
          *v13 = 0;
          if (v45)
          {
            if (*(_DWORD *)v45 == 2)
              WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v45 -= 2;
          }
          if (v13 == a3)
            v12 = v28;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(WTF **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            v17 = *((_QWORD *)v16 + 1);
            if (v17)
            {
              v18 = *(unsigned int *)(v17 - 4);
              if ((_DWORD)v18)
              {
                v19 = (uint64_t *)*((_QWORD *)v16 + 1);
                do
                {
                  v20 = *v19;
                  if (*v19 != -1)
                  {
                    *v19 = 0;
                    if (v20)
                    {
                      v21 = *(_DWORD *)(v20 + 8);
                      if (!v21)
                        goto LABEL_73;
                      *(_DWORD *)(v20 + 8) = v21 - 1;
                    }
                  }
                  ++v19;
                  --v18;
                }
                while (v18);
              }
              WTF::fastFree((WTF *)(v17 - 16), v10);
            }
            if (*(_DWORD *)v16)
            {
              *(_QWORD *)v16 = 0;
              *((_QWORD *)v16 + 1) = 0;
            }
            else
            {
              WTF::fastFree(v16, v10);
            }
          }
          v22 = *v13;
          *v13 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v22 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WTF::CheckedRef<WebCore::IdTargetObserver,WTF::RawPtrTraits<WebCore::IdTargetObserver>>,WTF::CheckedRef<WebCore::IdTargetObserver,WTF::RawPtrTraits<WebCore::IdTargetObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedRef<WebCore::IdTargetObserver,WTF::RawPtrTraits<WebCore::IdTargetObserver>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::IdTargetObserver,WTF::RawPtrTraits<WebCore::IdTargetObserver>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::IdTargetObserver,WTF::RawPtrTraits<WebCore::IdTargetObserver>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v4 + 8 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 8 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = (_QWORD *)(v12 + 8 * v19);
          *v21 = 0;
          v22 = *v10;
          *v10 = 0;
          *v21 = v22;
          v23 = *v10;
          *v10 = 0;
          if (v23)
          {
            v24 = *(_DWORD *)(v23 + 8);
            if (!v24)
            {
              result = 286;
              __break(0xC471u);
              return result;
            }
            *(_DWORD *)(v23 + 8) = v24 - 1;
          }
        }
        else
        {
          *v10 = 0;
        }
      }
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

WTF::StringImpl *WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>>::customDeleteBucket(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  result = *a1;
  *a1 = (WTF::StringImpl *)-1;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    v5 = *((_QWORD *)v4 + 1);
    if (v5)
    {
      v6 = *(unsigned int *)(v5 - 4);
      if ((_DWORD)v6)
      {
        v7 = (uint64_t *)*((_QWORD *)v4 + 1);
        do
        {
          v8 = *v7;
          if (*v7 != -1)
          {
            *v7 = 0;
            if (v8)
            {
              v9 = *(_DWORD *)(v8 + 8);
              if (!v9)
              {
                __break(0xC471u);
                JUMPOUT(0x1959F8050);
              }
              *(_DWORD *)(v8 + 8) = v9 - 1;
            }
          }
          ++v7;
          --v6;
        }
        while (v6);
      }
      result = (WTF::StringImpl *)WTF::fastFree((WTF *)(v5 - 16), a2);
    }
    if (*(_DWORD *)v4)
    {
      *(_QWORD *)v4 = 0;
      *((_QWORD *)v4 + 1) = 0;
    }
    else
    {
      return (WTF::StringImpl *)WTF::fastFree(v4, a2);
    }
  }
  return result;
}

uint64_t WTF::Deque<WebCore::IdleCallbackController::IdleRequest,0ul>::expandCapacity(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  WTF *v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;

  v1 = *(unsigned int *)(result + 24);
  v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF)
    v2 = 15;
  if (v2 >= 0xFFFFFFF)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = result;
    v4 = *(WTF **)(result + 16);
    v5 = v2 + 1;
    result = WTF::fastMalloc((WTF *)(16 * (v2 + 1)));
    v7 = result;
    *(_DWORD *)(v3 + 24) = v5;
    *(_QWORD *)(v3 + 16) = result;
    v8 = *(_QWORD *)v3;
    v9 = *(_QWORD *)(v3 + 8);
    v10 = (WTF *)((char *)v4 + 16 * v9);
    if (*(_QWORD *)v3 <= v9)
    {
      if (*(_QWORD *)v3 != v9)
      {
        v13 = result + 16 * v8;
        v14 = (WTF *)((char *)v4 + 16 * v8);
        do
        {
          *(_DWORD *)v13 = *(_DWORD *)v14;
          v15 = *((_QWORD *)v14 + 1);
          *((_QWORD *)v14 + 1) = 0;
          *(_QWORD *)(v13 + 8) = v15;
          result = *((_QWORD *)v14 + 1);
          *((_QWORD *)v14 + 1) = 0;
          if (result)
          {
            if (*(_DWORD *)(result + 16) == 1)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
            else
              --*(_DWORD *)(result + 16);
          }
          v14 = (WTF *)((char *)v14 + 16);
          v13 += 16;
        }
        while (v14 != v10);
      }
    }
    else
    {
      if (v9)
      {
        v11 = v4;
        do
        {
          *(_DWORD *)v7 = *(_DWORD *)v11;
          v12 = *((_QWORD *)v11 + 1);
          *((_QWORD *)v11 + 1) = 0;
          *(_QWORD *)(v7 + 8) = v12;
          result = *((_QWORD *)v11 + 1);
          *((_QWORD *)v11 + 1) = 0;
          if (result)
          {
            if (*(_DWORD *)(result + 16) == 1)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
            else
              --*(_DWORD *)(result + 16);
          }
          v11 = (WTF *)((char *)v11 + 16);
          v7 += 16;
        }
        while (v11 != v10);
        v5 = *(_DWORD *)(v3 + 24);
        v8 = *(_QWORD *)v3;
        v7 = *(_QWORD *)(v3 + 16);
      }
      v16 = v8 - v1 + v5;
      if (v8 != v1)
      {
        v17 = (char *)v4 + 16 * v1;
        v18 = v7 + 16 * v16;
        v19 = (char *)v4 + 16 * v8;
        do
        {
          *(_DWORD *)v18 = *(_DWORD *)v19;
          v20 = *((_QWORD *)v19 + 1);
          *((_QWORD *)v19 + 1) = 0;
          *(_QWORD *)(v18 + 8) = v20;
          result = *((_QWORD *)v19 + 1);
          *((_QWORD *)v19 + 1) = 0;
          if (result)
          {
            if (*(_DWORD *)(result + 16) == 1)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
            else
              --*(_DWORD *)(result + 16);
          }
          v19 += 16;
          v18 += 16;
        }
        while (v19 != v17);
      }
      *(_QWORD *)v3 = v16;
    }
    if (v4)
    {
      if (*(WTF **)(v3 + 16) == v4)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
      }
      return WTF::fastFree(v4, v6);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IdleCallbackController::queueIdleCallback(WTF::Ref<WebCore::IdleRequestCallback,WTF::RawPtrTraits<WebCore::IdleRequestCallback>,WTF::DefaultRefDerefTraits<WebCore::IdleRequestCallback>> &&,WTF::Seconds)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E33A5188;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IdleCallbackController::queueIdleCallback(WTF::Ref<WebCore::IdleRequestCallback,WTF::RawPtrTraits<WebCore::IdleRequestCallback>,WTF::DefaultRefDerefTraits<WebCore::IdleRequestCallback>> &&,WTF::Seconds)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33A5188;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::IdleCallbackController::queueIdleCallback(WTF::Ref<WebCore::IdleRequestCallback,WTF::RawPtrTraits<WebCore::IdleRequestCallback>,WTF::DefaultRefDerefTraits<WebCore::IdleRequestCallback>> &&,WTF::Seconds)::$_0,void>::call(unsigned int *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;

  v2 = *((_QWORD *)result + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 80);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = result;
          *(_DWORD *)(v5 + 24) += 2;
          v7 = WebCore::Document::eventLoop((WebCore::Document *)v5, a2);
          v8 = (unsigned int *)*((_QWORD *)v6 + 1);
          if (v8)
          {
            do
              v9 = __ldaxr(v8);
            while (__stlxr(v9 + 1, v8));
          }
          v10 = v6[4];
          v11 = WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v11 = &off_1E33A51B0;
          *(_QWORD *)(v11 + 8) = v8;
          *(_DWORD *)(v11 + 16) = v10;
          v13 = (unsigned int *)v11;
          WebCore::EventLoopTaskGroup::queueTask(v7, 6, (uint64_t *)&v13);
          result = v13;
          v13 = 0;
          if (result)
            result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
          if (*(_DWORD *)(v5 + 24) == 2)
          {
            if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
              return WebCore::Node::removedLastRef((WebCore::Node *)v5, v12);
          }
          else
          {
            *(_DWORD *)(v5 + 24) -= 2;
          }
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IdleCallbackController::queueIdleCallback(WTF::Ref<WebCore::IdleRequestCallback,WTF::RawPtrTraits<WebCore::IdleRequestCallback>,WTF::DefaultRefDerefTraits<WebCore::IdleRequestCallback>> &&,WTF::Seconds)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E33A51B0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IdleCallbackController::queueIdleCallback(WTF::Ref<WebCore::IdleRequestCallback,WTF::RawPtrTraits<WebCore::IdleRequestCallback>,WTF::DefaultRefDerefTraits<WebCore::IdleRequestCallback>> &&,WTF::Seconds)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33A51B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IdleCallbackController::queueIdleCallback(WTF::Ref<WebCore::IdleRequestCallback,WTF::RawPtrTraits<WebCore::IdleRequestCallback>,WTF::DefaultRefDerefTraits<WebCore::IdleRequestCallback>> &&,WTF::Seconds)::$_0::operator() const(void)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  void *v25;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 80);
      if (v3)
      {
        if (*(_QWORD *)(v3 + 8))
        {
          v5 = *(_QWORD *)(v2 + 16);
          v4 = *(_QWORD *)(v2 + 24);
          if (v5 != v4)
          {
            while (*(_DWORD *)(*(_QWORD *)(v2 + 32) + 16 * v5) != *(_DWORD *)(result + 16))
            {
              v17 = *(unsigned int *)(v2 + 40);
              v5 += v17 + 1;
              do
                v5 -= v17;
              while (v5 >= v17);
              if (v4 == v5)
                return result;
            }
          }
          if (v5 != v4)
          {
            v6 = (WTF *)WTF::fastMalloc((WTF *)8);
            *(_DWORD *)v6 = 1;
            *((_BYTE *)v6 + 4) = 1;
            v7 = *(_QWORD *)(v2 + 24);
            v8 = *(_QWORD *)(v2 + 32) + 16 * v5;
            v9 = *(_DWORD **)(v8 + 8);
            *(_QWORD *)(v8 + 8) = 0;
            if (v7 != v5)
            {
              v10 = *(_QWORD *)(v2 + 32);
              v11 = v10 + 16 * v5;
              v12 = *(_DWORD **)(v11 + 8);
              *(_QWORD *)(v11 + 8) = 0;
              if (v12)
              {
                if (v12[4] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
                else
                  --v12[4];
              }
              v13 = *(_QWORD *)(v2 + 16);
              if (v13 <= v5)
              {
                if (v13 != v5)
                {
                  v18 = 0;
                  v19 = v10 + ((16 * v5 - 16 * v13) & 0xFFFFFFFFFFFFFFF0) + 16 * v13;
                  v20 = 16 * v13 - 16 * v5;
                  do
                  {
                    v21 = v11 + v18;
                    v22 = v19 + v18;
                    *(_DWORD *)v22 = *(_DWORD *)(v11 + v18 - 16);
                    v23 = *(_QWORD *)(v11 + v18 - 8);
                    *(_QWORD *)(v21 - 8) = 0;
                    *(_QWORD *)(v22 + 8) = v23;
                    v24 = *(_DWORD **)(v11 + v18 - 8);
                    *(_QWORD *)(v21 - 8) = 0;
                    if (v24)
                    {
                      if (v24[4] == 1)
                        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 16))(v24);
                      else
                        --v24[4];
                    }
                    v18 -= 16;
                  }
                  while (v20 != v18);
                  v5 = *(_QWORD *)(v2 + 16);
                }
                *(_QWORD *)(v2 + 16) = (v5 + 1) % *(unsigned int *)(v2 + 40);
              }
              else
              {
                v14 = *(_QWORD *)(v2 + 24);
                if (v11 + 16 != v10 + 16 * v14)
                {
                  v15 = (_QWORD *)(v10 + 16 * v5 + 24);
                  v16 = 16 * v14 - 16 * v5 - 16;
                  do
                  {
                    *((_DWORD *)v15 - 6) = *((_DWORD *)v15 - 2);
                    *(v15 - 2) = *v15;
                    *v15 = 0;
                    v15 += 2;
                    v16 -= 16;
                  }
                  while (v16);
                }
                *(_QWORD *)(v2 + 24) = (v14 + (unint64_t)*(unsigned int *)(v2 + 40) - 1)
                                     % *(unsigned int *)(v2 + 40);
              }
            }
            result = (*(uint64_t (**)(_DWORD *, WTF *))(*(_QWORD *)v9 + 40))(v9, v6);
            if (v9[4] == 1)
              result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
            else
              --v9[4];
            if (*(_DWORD *)v6 == 1)
              return WTF::fastFree(v6, v25);
            else
              --*(_DWORD *)v6;
          }
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IdleCallbackController::queueTaskToInvokeIdleCallbacks(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E33A51D8;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IdleCallbackController::queueTaskToInvokeIdleCallbacks(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E33A51D8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::MonotonicTime *WTF::Detail::CallableWrapper<WebCore::IdleCallbackController::queueTaskToInvokeIdleCallbacks(void)::$_0,void>::call(WTF::MonotonicTime *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  WTF *v18;
  WebCore::WindowEventLoop *v19;
  WebCore::WindowEventLoop *v20;
  WebCore::WindowEventLoop *v21;
  int v22;
  WebCore::WindowEventLoop *v23[3];

  v2 = *((_QWORD *)result + 1);
  if (*(_QWORD *)(*((_QWORD *)result + 2) + 2336) != v2)
  {
    __break(0xC471u);
    JUMPOUT(0x1959F89E8);
  }
  v3 = *(_QWORD *)(v2 + 80);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      *(_DWORD *)(v4 + 24) += 2;
      v5 = *(_QWORD *)(v4 + 528);
      if (!v5 || !*(_QWORD *)(v5 + 8))
      {
LABEL_32:
        if (*(_DWORD *)(v4 + 24) == 2)
        {
          if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
            *(double *)&result = COERCE_DOUBLE(WebCore::Node::removedLastRef((WebCore::Node *)v4, a2));
        }
        else
        {
          *(_DWORD *)(v4 + 24) -= 2;
        }
        return result;
      }
      v6 = *(_QWORD *)(v4 + 2944);
      if (v6)
      {
LABEL_7:
        ++*(_DWORD *)(v6 + 8);
        WTF::MonotonicTime::now(result);
        v8 = v7;
        if (*(double *)(v6 + 128) >= *(double *)(v6 + 328) + 0.05)
          v9 = *(double *)(v6 + 328) + 0.05;
        else
          v9 = *(double *)(v6 + 128);
        *(double *)&result = COERCE_DOUBLE(WebCore::WindowEventLoop::nextRenderingTime((WebCore::WindowEventLoop *)v6));
        v10 = *(double *)&result;
        if (v9 <= *(double *)&result || a2 == 0)
          v10 = v9;
        if (v8 < v10)
        {
          v12 = *(_QWORD *)(v2 + 48);
          if (v12 != *(_QWORD *)(v2 + 56))
          {
            v13 = *(_QWORD *)(v2 + 64) + 16 * v12;
            v14 = *(_DWORD **)(v13 + 8);
            *(_QWORD *)(v13 + 8) = 0;
            v15 = *(_QWORD *)(v2 + 64) + 16 * v12;
            v16 = *(_DWORD **)(v15 + 8);
            *(_QWORD *)(v15 + 8) = 0;
            if (v16)
            {
              if (v16[4] == 1)
              {
                (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
                v12 = *(_QWORD *)(v2 + 48);
              }
              else
              {
                --v16[4];
              }
            }
            if (v12 == *(unsigned int *)(v2 + 72) - 1)
              v17 = 0;
            else
              v17 = v12 + 1;
            *(_QWORD *)(v2 + 48) = v17;
            v18 = (WTF *)WTF::fastMalloc((WTF *)8);
            *(_DWORD *)v18 = 1;
            *((_BYTE *)v18 + 4) = 0;
            *(double *)&result = COERCE_DOUBLE((*(uint64_t (**)(_DWORD *, WTF *))(*(_QWORD *)v14 + 40))(v14, v18));
            if (*(_QWORD *)(v2 + 48) != *(_QWORD *)(v2 + 56))
              *(double *)&result = COERCE_DOUBLE(WebCore::IdleCallbackController::queueTaskToInvokeIdleCallbacks((WebCore::IdleCallbackController *)v2, (WTF::StringImpl *)a2));
            if (*(_DWORD *)v18 == 1)
              *(double *)&result = COERCE_DOUBLE(WTF::fastFree(v18, a2));
            else
              --*(_DWORD *)v18;
            if (v14[4] == 1)
              *(double *)&result = COERCE_DOUBLE((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14));
            else
              --v14[4];
          }
        }
        if (*(_DWORD *)(v6 + 8) == 1)
          *(double *)&result = COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6));
        else
          --*(_DWORD *)(v6 + 8);
        goto LABEL_32;
      }
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v4 + 192), (WTF::StringImpl *)a2);
      WebCore::WindowEventLoop::eventLoopForSecurityOrigin(v19, v23);
      v20 = v23[0];
      v23[0] = 0;
      v21 = *(WebCore::WindowEventLoop **)(v4 + 2944);
      *(_QWORD *)(v4 + 2944) = v20;
      if (v21)
      {
        v22 = *((_DWORD *)v21 + 2) - 1;
        if (*((_DWORD *)v21 + 2) == 1)
        {
          (*(void (**)(WebCore::WindowEventLoop *))(*(_QWORD *)v21 + 8))(v21);
          v21 = v23[0];
          v23[0] = 0;
          if (!v21)
            goto LABEL_45;
          v22 = *((_DWORD *)v21 + 2) - 1;
          if (*((_DWORD *)v21 + 2) == 1)
          {
            (*(void (**)(WebCore::WindowEventLoop *))(*(_QWORD *)v21 + 8))(v21);
            goto LABEL_45;
          }
        }
        *((_DWORD *)v21 + 2) = v22;
      }
LABEL_45:
      *(double *)&result = COERCE_DOUBLE(WTF::WeakHashSet<WebCore::ScriptExecutionContext,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::ScriptExecutionContext>(*(_QWORD *)(v4 + 2944) + 104, (_QWORD *)(v4 + 192), (uint64_t)v23));
      v6 = *(_QWORD *)(v4 + 2944);
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t WebCore::TreeScope::hasElementWithId(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v5;
  int i;
  unsigned int v7;
  uint64_t v8;

  v2 = *(uint64_t **)(a1 + 24);
  if (v2)
  {
    v3 = *v2;
    if (v3)
    {
      v5 = 0;
      for (i = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; i = v5 + v7)
      {
        v7 = i & *(_DWORD *)(v3 - 8);
        v8 = *(_QWORD *)(v3 + 40 * v7);
        if (!v8)
          break;
        if (v8 != -1 && v8 == *(_QWORD *)a2)
          return 1;
        ++v5;
      }
    }
  }
  return 0;
}

BOOL WebCore::ImageOverlay::isDataDetectorResult(WebCore::ImageOverlay *this, const WebCore::HTMLElement *a2)
{
  void *v3;
  WebCore::Node *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  WebCore::Node *v11;
  WebCore::Node *v12[2];

  WebCore::ImageOverlay::imageOverlayHost((uint64_t)v12, this);
  v4 = v12[0];
  if (!v12[0])
    return 0;
  {
    v11 = v12[0];
    WTF::AtomStringImpl::add();
    v4 = v11;
    WebCore::ImageOverlay::imageOverlayDataDetectorClass(void)::className = (uint64_t)v12[1];
  }
  v5 = *((_QWORD *)this + 13);
  if (v5 && (v6 = *(_QWORD *)(v5 + 16)) != 0)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(v6 + 16 + 8 * v7);
      v9 = v8 == WebCore::ImageOverlay::imageOverlayDataDetectorClass(void)::className;
      if (v8 == WebCore::ImageOverlay::imageOverlayDataDetectorClass(void)::className)
        break;
      ++v7;
    }
    while (v7 < *(unsigned int *)(v6 + 12));
  }
  else
  {
    v9 = 0;
  }
  if (*((_DWORD *)v4 + 6) == 2)
  {
    if ((*((_WORD *)v4 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v4, v3);
  }
  else
  {
    *((_DWORD *)v4 + 6) -= 2;
  }
  return v9;
}

uint64_t WebCore::ImageOverlay::imageOverlayHost(uint64_t this, const WebCore::Node *a2)
{
  uint64_t *v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  WebCore::Node *v11;
  _QWORD v12[2];

  v2 = (uint64_t *)this;
  v3 = **((_QWORD **)a2 + 5);
  if (v3)
    v4 = (*(_WORD *)(v3 + 28) & 0x80) == 0;
  else
    v4 = 1;
  if (v4 || (v5 = *(_QWORD *)(v3 + 200)) == 0 || (v6 = *(_QWORD *)(v5 + 8)) == 0 || (*(_WORD *)(v6 + 28) & 0x10) == 0)
  {
    *(_QWORD *)this = 0;
    return this;
  }
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL;
  if (v7)
  {
    this = *(_QWORD *)((*(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (this)
    {
      v8 = *(_DWORD *)(this + 24);
      *(_DWORD *)(this + 24) = v8 + 2;
      if (*(_BYTE *)(this + 193))
      {
        if (v8)
        {
          v7 = 0;
          *(_DWORD *)(this + 24) = v8;
          goto LABEL_11;
        }
        if ((*(_WORD *)(this + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)this);
        goto LABEL_21;
      }
      v11 = (WebCore::Node *)this;
      v9 = this + 96;
      {
        v12[0] = "image-overlay";
        v12[1] = 14;
        WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::ImageOverlay::imageOverlayElementIdentifier(void)::identifier, (uint64_t)v12);
      }
      this = WebCore::TreeScope::hasElementWithId(v9, (uint64_t)&WebCore::ImageOverlay::imageOverlayElementIdentifier(void)::identifier);
      v10 = this;
      if (*((_DWORD *)v11 + 6) == 2)
      {
        if ((*((_WORD *)v11 + 15) & 0x400) != 0)
        {
          if ((_DWORD)this)
            goto LABEL_26;
        }
        else
        {
          this = WebCore::Node::removedLastRef(v11);
          if ((v10 & 1) != 0)
            goto LABEL_26;
        }
      }
      else
      {
        *((_DWORD *)v11 + 6) -= 2;
        if ((this & 1) != 0)
        {
LABEL_26:
          *(_DWORD *)(v6 + 24) += 2;
          v7 = v6;
          goto LABEL_11;
        }
      }
    }
LABEL_21:
    v7 = 0;
  }
LABEL_11:
  *v2 = v7;
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v6);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return this;
}

uint64_t WebCore::ImageOverlay::characterRange@<X0>(WebCore::ImageOverlay *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  const WebCore::VisibleSelection *v6;
  uint64_t v7;
  WebCore::Node *v8;
  __int16 v9;
  int v10;
  WebCore::Node *Ref;
  int v12;
  WebCore::Node *v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::Node *v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  WebCore::Node **v19;
  uint64_t v20;
  WebCore::Node **v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  int v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::Node **v34;
  WebCore::Node *v35;
  int v36;
  WebCore::Node *v37;
  int v38;
  char v39;
  WebCore::Node *v40;
  int v41;
  WebCore::Node *v42;
  char v43;
  WebCore::Node *v44;
  int v45;
  WebCore::Node *v46;
  int v47;

  result = WebCore::VisibleSelection::range(this, (uint64_t)&v40);
  if (v43)
  {
    result = WebCore::ImageOverlay::isInsideOverlay(this, v6);
    if ((result & 1) != 0)
    {
      LOBYTE(v35) = 0;
      v39 = 0;
      v7 = *((_QWORD *)this + 8);
      if ((*((_BYTE *)this + 76) & 7u) - 1 <= 1)
        v7 = *(_QWORD *)(v7 + 32);
      v8 = *(WebCore::Node **)(v7 + 32);
      if (v8)
      {
        v9 = *((_WORD *)v8 + 14);
        if ((v9 & 8) != 0)
        {
          while ((v9 & 0x10) == 0
               || *(_QWORD *)(*((_QWORD *)v8 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::divTag + 24))
          {
            v8 = (WebCore::Node *)*((_QWORD *)v8 + 4);
            if (v8)
            {
              v9 = *((_WORD *)v8 + 14);
              if ((v9 & 8) != 0)
                continue;
            }
            goto LABEL_11;
          }
          v19 = (WebCore::Node **)MEMORY[0x1E0CBF2F8];
          while (1)
          {
            *((_DWORD *)v8 + 6) += 2;
            v20 = *((_QWORD *)v8 + 13);
            if (v20)
            {
              v21 = v19;
              if (*(_QWORD *)(v20 + 24))
              {
                v27 = *(unsigned int *)(v20 + 4);
                if ((v27 & 1) != 0)
                {
                  v28 = *(_QWORD **)(v20 + 40);
                  v29 = *(unsigned int *)(v20 + 52);
                }
                else
                {
                  v28 = (_QWORD *)(v20 + 32);
                  v29 = v27 >> 5;
                }
                if (v29)
                {
                  while (1)
                  {
                    v30 = *v28;
                    if (*v28 == WebCore::HTMLNames::idAttr
                      || *(_QWORD *)(v30 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
                      && *(_QWORD *)(v30 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
                    {
                      break;
                    }
                    v28 += 2;
                    if (!--v29)
                      goto LABEL_68;
                  }
                }
                else
                {
LABEL_68:
                  v28 = 0;
                }
                v21 = (WebCore::Node **)(v28 + 1);
              }
            }
            else
            {
              v21 = v19;
            }
            {
              v22 = (WebCore::Node *)WebCore::ImageOverlay::imageOverlayElementIdentifier(void)::identifier;
            }
            else
            {
              v34 = v21;
              result = WTF::AtomStringImpl::add();
              v21 = v34;
              v22 = v44;
              WebCore::ImageOverlay::imageOverlayElementIdentifier(void)::identifier = (uint64_t)v44;
            }
            v23 = *v21;
            v24 = *((_DWORD *)v8 + 6);
            if (v23 == v22)
              break;
            v25 = v24 - 2;
            if (v25)
            {
              *((_DWORD *)v8 + 6) = v25;
            }
            else if ((*((_WORD *)v8 + 15) & 0x400) == 0)
            {
              result = (uint64_t)WebCore::Node::removedLastRef(v8, v6);
            }
            v8 = (WebCore::Node *)*((_QWORD *)v8 + 4);
            if (!v8)
              goto LABEL_11;
            v26 = *((_WORD *)v8 + 14);
            if ((v26 & 8) == 0)
              goto LABEL_11;
            while ((v26 & 0x10) == 0
                 || *(_QWORD *)(*((_QWORD *)v8 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::divTag + 24))
            {
              v8 = (WebCore::Node *)*((_QWORD *)v8 + 4);
              if (v8)
              {
                v26 = *((_WORD *)v8 + 14);
                if ((v26 & 8) != 0)
                  continue;
              }
              goto LABEL_11;
            }
          }
          *((_DWORD *)v8 + 6) = v24 + 4;
          v31 = *((_WORD *)v8 + 14);
          if ((v31 & 1) != 0)
          {
            v33 = *((_QWORD *)v8 + 10);
            if (v33)
            {
              v10 = *(_DWORD *)(v33 + 4);
              goto LABEL_99;
            }
          }
          else if ((v31 & 4) != 0)
          {
            v32 = *((_QWORD *)v8 + 10);
            if (v32)
            {
              v10 = 0;
              do
              {
                ++v10;
                v32 = *(_QWORD *)(v32 + 56);
              }
              while (v32);
              goto LABEL_99;
            }
          }
          v10 = 0;
LABEL_99:
          if (v39)
          {
            Ref = v35;
            v35 = v8;
            if (Ref)
            {
              if (*((_DWORD *)Ref + 6) == 2)
                goto LABEL_113;
              *((_DWORD *)Ref + 6) -= 2;
            }
            goto LABEL_103;
          }
          v35 = v8;
          v36 = 0;
          v37 = v8;
          v38 = v10;
          v39 = 1;
          goto LABEL_108;
        }
      }
      while (1)
      {
LABEL_11:
        if (!v39)
          break;
        WebCore::resolveCharacterRange(&v35, 0, 0, 0, &v44);
        v8 = v44;
        v10 = v45;
        Ref = v46;
        v44 = 0;
        v46 = 0;
        if (Ref)
        {
          v12 = *((_DWORD *)Ref + 6) - 2;
          if (*((_DWORD *)Ref + 6) != 2)
            goto LABEL_14;
          if ((*((_WORD *)Ref + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(Ref, v6);
            Ref = v44;
            v44 = 0;
            if (Ref)
            {
              v12 = *((_DWORD *)Ref + 6) - 2;
              if (*((_DWORD *)Ref + 6) != 2)
              {
LABEL_14:
                *((_DWORD *)Ref + 6) = v12;
                goto LABEL_15;
              }
              if ((*((_WORD *)Ref + 15) & 0x400) == 0)
                Ref = (WebCore::Node *)WebCore::Node::removedLastRef(Ref, v6);
            }
          }
        }
LABEL_15:
        if (v43)
        {
          *((_DWORD *)v8 + 6) += 2;
          v44 = v8;
          v45 = v10;
          v13 = v40;
          *((_DWORD *)v40 + 6) += 2;
          v46 = v13;
          v47 = v41;
          v14 = WebCore::characterCount((int *)&v44, 0);
          v15 = WebCore::characterCount((int *)&v40, 0);
          v16 = v46;
          v46 = 0;
          if (v16)
          {
            if (*((_DWORD *)v16 + 6) == 2)
            {
              if ((*((_WORD *)v16 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v16, v6);
            }
            else
            {
              *((_DWORD *)v16 + 6) -= 2;
            }
          }
          result = (uint64_t)v44;
          v44 = 0;
          if (result)
          {
            if (*(_DWORD *)(result + 24) == 2)
            {
              if ((*(_WORD *)(result + 30) & 0x400) == 0)
                result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
            }
            else
            {
              *(_DWORD *)(result + 24) -= 2;
            }
          }
          *(_QWORD *)a2 = v14;
          *(_QWORD *)(a2 + 8) = v15;
          *(_BYTE *)(a2 + 16) = 1;
          if (*((_DWORD *)v8 + 6) == 2)
          {
            if ((*((_WORD *)v8 + 15) & 0x400) == 0)
              result = (uint64_t)WebCore::Node::removedLastRef(v8, v6);
          }
          else
          {
            *((_DWORD *)v8 + 6) -= 2;
          }
          if (v39)
          {
            v17 = v37;
            v37 = 0;
            if (v17)
            {
              if (*((_DWORD *)v17 + 6) == 2)
              {
                if ((*((_WORD *)v17 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v17, v6);
              }
              else
              {
                *((_DWORD *)v17 + 6) -= 2;
              }
            }
            result = (uint64_t)v35;
            v35 = 0;
            if (result)
            {
              if (*(_DWORD *)(result + 24) == 2)
              {
                if ((*(_WORD *)(result + 30) & 0x400) == 0)
                  result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
              }
              else
              {
                *(_DWORD *)(result + 24) -= 2;
              }
            }
          }
          goto LABEL_32;
        }
        __break(1u);
LABEL_113:
        if ((*((_WORD *)Ref + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(Ref, v6);
LABEL_103:
        v36 = 0;
        result = (uint64_t)v37;
        v37 = v8;
        if (result)
        {
          if (*(_DWORD *)(result + 24) == 2)
          {
            if ((*(_WORD *)(result + 30) & 0x400) == 0)
              result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
          }
          else
          {
            *(_DWORD *)(result + 24) -= 2;
          }
        }
        v38 = v10;
LABEL_108:
        if (*((_DWORD *)v8 + 6) == 2)
        {
          if ((*((_WORD *)v8 + 15) & 0x400) == 0)
            result = (uint64_t)WebCore::Node::removedLastRef(v8, v6);
        }
        else
        {
          *((_DWORD *)v8 + 6) -= 2;
        }
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
LABEL_32:
  if (v43)
  {
    v18 = v42;
    v42 = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 6) == 2)
      {
        if ((*((_WORD *)v18 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v18, v6);
      }
      else
      {
        *((_DWORD *)v18 + 6) -= 2;
      }
    }
    result = (uint64_t)v40;
    v40 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::ImageOverlay::isInsideOverlay(WebCore::ImageOverlay *this, const WebCore::VisibleSelection *a2)
{
  const WebCore::Node *v2;
  WebCore::Node *v3;
  WebCore::Node *v4;
  uint64_t v5;
  uint64_t isInsideOverlay;
  WebCore::Node *v7;
  WebCore::Node *v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  WebCore::Node *v16;
  WebCore::Node *v17;
  char v18;

  WebCore::VisibleSelection::range(this, (uint64_t)&v16);
  if (!v18)
    return 0;
  v3 = v16;
  v4 = v17;
  if (v16 == v17)
    goto LABEL_3;
  v10 = WebCore::depth<(WebCore::TreeType)2>((uint64_t)v16);
  v11 = WebCore::depth<(WebCore::TreeType)2>((uint64_t)v4);
  v12 = v11 - v10;
  v13 = v10 >= v11;
  v14 = v10 - v11;
  if (v10 >= v11)
    v5 = (uint64_t)v3;
  else
    v5 = (uint64_t)v4;
  if (v13)
    v3 = v4;
  if (v13)
    v15 = v14;
  else
    v15 = v12;
  for (; v15; --v15)
    v5 = WebCore::Node::parentInComposedTree((WebCore::Node *)v5);
  if ((WebCore::Node *)v5 == v3)
  {
LABEL_3:
    v5 = (uint64_t)v3;
  }
  else
  {
    do
    {
      v5 = WebCore::Node::parentInComposedTree((WebCore::Node *)v5);
      v3 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v3);
    }
    while ((WebCore::Node *)v5 != v3);
  }
  if (v5)
  {
    *(_DWORD *)(v5 + 24) += 2;
    isInsideOverlay = WebCore::ImageOverlay::isInsideOverlay((WebCore::ImageOverlay *)v5, v2);
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  else
  {
    isInsideOverlay = 0;
  }
  if (v18)
  {
    v7 = v17;
    v17 = 0;
    if (v7)
    {
      if (*((_DWORD *)v7 + 6) == 2)
      {
        if ((*((_WORD *)v7 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v7, v2);
      }
      else
      {
        *((_DWORD *)v7 + 6) -= 2;
      }
    }
    v8 = v16;
    v16 = 0;
    if (v8)
    {
      if (*((_DWORD *)v8 + 6) == 2)
      {
        if ((*((_WORD *)v8 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v8, v2);
      }
      else
      {
        *((_DWORD *)v8 + 6) -= 2;
      }
    }
  }
  return isInsideOverlay;
}

uint64_t WebCore::ImageOverlay::isInsideOverlay(WebCore::ImageOverlay *this, const WebCore::SimpleRange *a2)
{
  WebCore::Node *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t isInsideOverlay;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(WebCore::Node **)this;
  v3 = *((_QWORD *)this + 2);
  if (*(_QWORD *)this == v3)
    goto LABEL_2;
  v8 = WebCore::depth<(WebCore::TreeType)2>(*(_QWORD *)this);
  v9 = WebCore::depth<(WebCore::TreeType)2>(v3);
  v10 = v9 - v8;
  v11 = v8 >= v9;
  v12 = v8 - v9;
  if (v8 >= v9)
    v4 = (uint64_t)v2;
  else
    v4 = v3;
  if (v11)
    v2 = (WebCore::Node *)v3;
  if (v11)
    v13 = v12;
  else
    v13 = v10;
  for (; v13; --v13)
    v4 = WebCore::Node::parentInComposedTree((WebCore::Node *)v4);
  if ((WebCore::Node *)v4 == v2)
  {
LABEL_2:
    v4 = (uint64_t)v2;
  }
  else
  {
    do
    {
      v4 = WebCore::Node::parentInComposedTree((WebCore::Node *)v4);
      v2 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v2);
    }
    while ((WebCore::Node *)v4 != v2);
  }
  if (!v4)
    return 0;
  *(_DWORD *)(v4 + 24) += 2;
  isInsideOverlay = WebCore::ImageOverlay::isInsideOverlay((WebCore::ImageOverlay *)v4, a2);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return isInsideOverlay;
}

uint64_t WebCore::ImageOverlay::isInsideOverlay(WebCore::ImageOverlay *this, const WebCore::Node *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  WebCore::ImageOverlay::imageOverlayHost((uint64_t)&v8, this);
  v3 = v8;
  if (!v8)
    return 0;
  if ((*(_QWORD *)(v8 + 72) & 0xFFFFFFFFFFFFLL) != 0
    && (v5 = *(_QWORD *)((*(_QWORD *)(v8 + 72) & 0xFFFFFFFFFFFFLL) + 0x58)) != 0)
  {
    *(_DWORD *)(v5 + 24) += 2;
    result = WebCore::Node::contains((WebCore::Node *)v5, this);
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      v7 = result;
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
      result = v7;
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  else
  {
    result = WebCore::Node::contains(0, this);
  }
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    v6 = result;
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3);
    return v6;
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return result;
}

WebCore::ImageOverlay *WebCore::ImageOverlay::isOverlayText(WebCore::ImageOverlay *this, const WebCore::Node *a2)
{
  if (this)
    return (WebCore::ImageOverlay *)WebCore::ImageOverlay::isOverlayText(this, a2);
  return this;
}

uint64_t WebCore::ImageOverlay::isOverlayText(WebCore::ImageOverlay *this, const WebCore::Node *a2)
{
  WebCore::ImageOverlay *v2;
  void *v3;
  WebCore::Node *v4;
  uint64_t v5;
  WebCore::Node *v6;
  unsigned int *v7;
  __int16 v8;
  WebCore::Node *v11;
  WebCore::Node *v12;

  v2 = this;
  WebCore::ImageOverlay::imageOverlayHost((uint64_t)&v11, this);
  v4 = v11;
  if (!v11)
    return 0;
  if ((*((_QWORD *)v11 + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v5 = *(_QWORD *)((*((_QWORD *)v11 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v5)
      *(_DWORD *)(v5 + 24) += 2;
  }
  else
  {
    v5 = 0;
  }
  {
    v6 = (WebCore::Node *)WebCore::ImageOverlay::imageOverlayElementIdentifier(void)::identifier;
    if (!WebCore::ImageOverlay::imageOverlayElementIdentifier(void)::identifier)
      goto LABEL_6;
  }
  else
  {
    WTF::AtomStringImpl::add();
    v6 = v12;
    WebCore::ImageOverlay::imageOverlayElementIdentifier(void)::identifier = (uint64_t)v12;
    if (!v12)
      goto LABEL_6;
  }
  if (*((_DWORD *)v6 + 1))
  {
    v7 = *(unsigned int **)(v5 + 120);
    if (v7)
      WebCore::TreeScopeOrderedMap::getElementById(v7, (const WTF::AtomString *)&WebCore::ImageOverlay::imageOverlayElementIdentifier(void)::identifier, (const WebCore::TreeScope *)(v5 + 96), (uint64_t *)&v12);
    else
      v12 = 0;
LABEL_15:
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v3);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
    if (!v12)
    {
      v5 = 0;
      goto LABEL_37;
    }
    v8 = *((_WORD *)v12 + 14);
    if ((v8 & 0xF000) == 0x9000)
    {
      if (**((WebCore::Node ***)v2 + 5) == v12 && (*((_WORD *)v2 + 14) & 0xF000) != 0x9000)
      {
        v5 = (*((unsigned __int8 *)v2 + 22) >> 3) & 1;
LABEL_35:
        if (*((_DWORD *)v12 + 6) == 2)
        {
          if ((*((_WORD *)v12 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v12, v3);
        }
        else
        {
          *((_DWORD *)v12 + 6) -= 2;
        }
        goto LABEL_37;
      }
    }
    else if ((v8 & 4) != 0
           && *((_QWORD *)v12 + 10)
           && ((*((unsigned __int8 *)v2 + 22) ^ *((unsigned __int8 *)v12 + 22)) & 8) == 0)
    {
      do
      {
        v2 = (WebCore::ImageOverlay *)*((_QWORD *)v2 + 4);
        v5 = v2 != 0;
      }
      while (v2 != v12 && v2 != 0);
      goto LABEL_35;
    }
    v5 = 0;
    goto LABEL_35;
  }
LABEL_6:
  v12 = 0;
  if (v5)
    goto LABEL_15;
LABEL_37:
  if (*((_DWORD *)v4 + 6) == 2)
  {
    if ((*((_WORD *)v4 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v4, v3);
  }
  else
  {
    *((_DWORD *)v4 + 6) -= 2;
  }
  return v5;
}

unsigned int *WebCore::ImageOverlay::removeOverlaySoonIfNeeded(unsigned int *this, WebCore::HTMLElement *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  int v7;
  int i;
  unsigned int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  int v18;
  unsigned int *v19;
  unsigned int *v20;

  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v2 = (uint64_t)this;
    this = *(unsigned int **)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (this)
    {
      v3 = this[6];
      this[6] = v3 + 2;
      if (*((_BYTE *)this + 193))
      {
        if (v3)
        {
          this[6] = v3;
          return this;
        }
      }
      else
      {
        {
          v19 = this;
          WTF::AtomStringImpl::add();
          this = v19;
          WebCore::ImageOverlay::imageOverlayElementIdentifier(void)::identifier = (uint64_t)v20;
        }
        v4 = (uint64_t *)*((_QWORD *)this + 15);
        if (v4)
        {
          v5 = *v4;
          if (*v4)
          {
            v6 = this;
            v7 = 0;
            for (i = *(_DWORD *)(WebCore::ImageOverlay::imageOverlayElementIdentifier(void)::identifier + 16) >> 8;
                  ;
                  i = v7 + v9)
            {
              v9 = i & *(_DWORD *)(v5 - 8);
              v10 = *(_QWORD *)(v5 + 40 * v9);
              this = v6;
              if (!v10)
                break;
              if (v10 != -1 && v10 == WebCore::ImageOverlay::imageOverlayElementIdentifier(void)::identifier)
              {
                if (v6[6] == 2)
                {
                  if ((*((_WORD *)v6 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
                }
                else
                {
                  v6[6] -= 2;
                }
                v12 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
                *(_DWORD *)(v12 + 24) += 2;
                v13 = WebCore::Document::eventLoop((WebCore::Document *)v12, a2);
                ++*(_DWORD *)(v13 + 8);
                v14 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v2);
                if (v14)
                {
                  do
                    v15 = __ldaxr(v14);
                  while (__stlxr(v15 + 1, v14));
                }
                v16 = v14;
                v17 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v17 = &off_1E33A5680;
                *((_QWORD *)v17 + 1) = v16;
                v20 = v17;
                WebCore::EventLoopTaskGroup::queueTask(v13, 25, (uint64_t *)&v20);
                this = v20;
                v20 = 0;
                if (this)
                  this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
                v18 = *(_DWORD *)(v13 + 8);
                if (!v18)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1959F99F8);
                }
                *(_DWORD *)(v13 + 8) = v18 - 1;
                if (*(_DWORD *)(v12 + 24) != 2)
                {
                  *(_DWORD *)(v12 + 24) -= 2;
                  return this;
                }
                if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
                {
                  this = (unsigned int *)v12;
                  return WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
                }
                return this;
              }
              ++v7;
            }
          }
        }
        if (this[6] != 2)
        {
          this[6] -= 2;
          return this;
        }
      }
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
    }
  }
  return this;
}

unint64_t WebCore::ImageOverlay::containerRect(WebCore::ImageOverlay *this, WebCore::HTMLElement *a2)
{
  unint64_t v2;
  int64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v7;
  unint64_t v9;

  v2 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (!v2)
    goto LABEL_10;
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    goto LABEL_13;
  }
  if ((((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3) & *(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL)
                                                                                              + 0x35)) != 1)
  {
LABEL_10:
    v4 = 0;
    v5 = 0;
    return v5 & 0xFFFFFFFF00000000 | v4;
  }
  ++*(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
  if (*(float *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + 32) + 4) == 0.0)
  {
    WebCore::Element::offsetWidth(this);
    WebCore::Element::offsetHeight(this);
    v5 = 0;
    v4 = 0;
  }
  else
  {
    v9 = WebCore::RenderReplaced::intrinsicSize(v2);
    v3 = WebCore::RenderReplaced::replacedContentRect((WebCore::RenderReplaced *)v2, (int32x2_t *)&v9);
    v4 = (int)v3 >> 6;
    v5 = v3 >> 38 << 32;
  }
  v7 = *(_DWORD *)(v2 + 16);
  if (!v7)
  {
    __break(0xC471u);
LABEL_13:
    JUMPOUT(0x1959F9BD4);
  }
  *(_DWORD *)(v2 + 16) = v7 - 1;
  return v5 & 0xFFFFFFFF00000000 | v4;
}

void WebCore::ImageOverlay::updateWithTextRecognitionResult(WebCore::ImageOverlay *a1, unint64_t a2, int a3)
{
  uint64_t v6;
  WebCore::HTMLElement *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  _BOOL4 v13;
  unint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  WebCore::StyledElement **v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unint64_t v25;
  uint64_t v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  __double2 v36;
  float v37;
  double v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  double v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float *v49;
  unint64_t v50;
  uint64_t v51;
  float *v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  float v56;
  float v57;
  float v58;
  float v59;
  unint64_t v60;
  unint64_t v61;
  WebCore::StyledElement *v62;
  WebCore::StyledElement *v63;
  uint64_t v64;
  double v65;
  int v66;
  double v67;
  int v68;
  int v69;
  int v70;
  int v71;
  BOOL v72;
  int v73;
  int v74;
  BOOL v75;
  int v76;
  int v77;
  char v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  _BYTE *v83;
  uint64_t v84;
  _DWORD *v85;
  _BYTE *v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  _WORD *v90;
  _BYTE *v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WebCore::StyledElement *v95;
  WebCore::MutableStyleProperties *v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  WTF::String *v99;
  __n128 v100;
  _DWORD *v101;
  WTF::StringImpl *v102;
  WebCore::StyledElement *v103;
  WebCore::MutableStyleProperties *v104;
  WTF::StringImpl *v105;
  uint64_t v106;
  WTF::String *v107;
  __n128 v108;
  _DWORD *v109;
  WebCore::StyledElement *v110;
  int v111;
  WebCore::MutableStyleProperties *v112;
  uint64_t v113;
  int *v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  WTF::String *v117;
  __n128 v118;
  _DWORD *v119;
  uint64_t v120;
  unint64_t v121;
  float v122;
  float v123;
  float v124;
  float v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  __int128 *v129;
  __int128 v130;
  int v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _DWORD *v136;
  int v137;
  uint64_t v138;
  WTF *v139;
  uint64_t v140;
  unsigned int v141;
  unint64_t v142;
  uint64_t v143;
  _OWORD *v144;
  WebCore::StyledElement *v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  __int128 v154;
  uint64_t v155;
  WTF *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  void *v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _DWORD *v174;
  float v175;
  unsigned int v176;
  int v177;
  unsigned int v178;
  int v179;
  unsigned int v180;
  int v181;
  unsigned int v182;
  int v183;
  int v184;
  int v185;
  unsigned int v186;
  int v187;
  unsigned int v188;
  unsigned int v189;
  int v190;
  float v191;
  int v192;
  unsigned int v193;
  int v194;
  unsigned int v195;
  int v196;
  unsigned int v197;
  int v198;
  unsigned int v199;
  int v200;
  unsigned int v201;
  BOOL v202;
  float v204;
  float v205;
  float v206;
  int v207;
  int v208;
  int v209;
  unint64_t v210;
  unsigned int *v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int *v220;
  unsigned int v221;
  uint64_t v222;
  unsigned int v223;
  unsigned int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _DWORD *v228;
  WTF::StringImpl *v229;
  WTF *v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  WebCore::Page *v235;
  WTF *v236;
  void *v237;
  WTF *v238;
  void *v239;
  _QWORD *v240;
  uint64_t v241;
  WebCore::ImageOverlay *v242;
  unint64_t v243;
  int v244;
  unint64_t v245;
  int v246;
  uint64_t v247;
  unint64_t v248;
  WebCore::StyledElement **v249;
  int *v250;
  unint64_t v251;
  uint64_t v252;
  float *v253;
  unsigned int *v254;
  float v255;
  float v256;
  float v257;
  float v258;
  float v259;
  int v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  __int128 v266;
  float v267;
  float v268;
  float v269;
  float v270;
  _QWORD v271[2];
  unsigned int v272;
  uint64_t v273;
  unsigned int v274;
  uint64_t v275;
  unsigned int v276;
  __int128 v277;
  _OWORD v278[7];
  __int128 v279;
  _OWORD v280[7];
  __int128 v281;
  _OWORD v282[7];
  __int128 v283;
  _OWORD __s[7];
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  _OWORD __src[7];
  __int128 v319;
  _OWORD __n_4[7];
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  _BYTE v330[32];
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  uint64_t v337;

  v337 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
  *(_DWORD *)(v6 + 24) += 2;
  WebCore::Document::updateLayout(v6, 2u, 0);
  v9 = WebCore::ImageOverlay::containerRect(a1, v7);
  *(_QWORD *)&v277 = v9;
  *((_QWORD *)&v277 + 1) = v8;
  if ((int)v8 <= 64
    && SHIDWORD(v8) <= 64
    && !*(_DWORD *)(a2 + 44)
    && *(_DWORD *)(a2 + 12) == 1
    && *(_DWORD *)(*(_QWORD *)a2 + 44) == 1)
  {
    goto LABEL_313;
  }
  v245 = HIDWORD(v8);
  v246 = v8;
  WebCore::ImageOverlay::updateSubtree((unint64_t)v271, a1, a2);
  if (!v271[0])
    goto LABEL_13;
  WebCore::Document::updateLayout(v6, 2u, 0);
  v11 = *((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL;
  if (!v11)
    goto LABEL_13;
  if ((*(_BYTE *)((*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1959FB388);
  }
  if ((((*(_BYTE *)((*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3) & *(_BYTE *)((*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL)
                                                                                            + 0x35)) != 1)
  {
LABEL_13:
    WebCore::ImageOverlay::Elements::~Elements((WebCore::ImageOverlay::Elements *)v271, v10);
    goto LABEL_313;
  }
  v12 = *(_DWORD *)((*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
  *(_BYTE *)((*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL) + 0xEB) = 1;
  *(_DWORD *)(v11 + 16) = v12 + 1;
  if (v12 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x1959FB3A8);
  }
  v243 = HIDWORD(v9);
  v244 = v9;
  *(_DWORD *)(v11 + 16) = v12;
  v242 = a1;
  v13 = (*(_WORD *)(v6 + 3358) & 4) != 0 || (*(_DWORD *)(*(_QWORD *)(v11 + 104) + 228) & 0x18000) != 0;
  v251 = a2;
  v252 = v6;
  if (*(_DWORD *)(a2 + 12))
  {
    v14 = 0;
    v15 = (float)v246;
    v258 = (float)(int)v9;
    v259 = (float)(int)v245;
    v202 = !v13;
    v16 = 24;
    if (!v202)
      v16 = 196;
    v250 = &WebCore::staticCSSValuePool[v16 + 3088];
    v257 = (float)SHIDWORD(v9);
    do
    {
      if (v14 >= v272)
      {
        __break(0xC471u);
        JUMPOUT(0x1959FB42CLL);
      }
      v17 = v271[1];
      v18 = *(_QWORD *)a2;
      v19 = (__int128 *)(*(_QWORD *)a2 + 56 * v14);
      v20 = v19[1];
      v266 = *v19;
      *(float *)&v266 = (float)(*(float *)&v266 * v15) + v258;
      *((float *)&v266 + 1) = (float)(*((float *)&v266 + 1) * v259) + v257;
      *((float *)&v266 + 2) = (float)(*((float *)&v266 + 2) * v15) + v258;
      *((float *)&v266 + 3) = (float)(*((float *)&v266 + 3) * v259) + v257;
      v267 = (float)(*(float *)&v20 * v15) + v258;
      v268 = (float)(*((float *)&v20 + 1) * v259) + v257;
      v269 = (float)(*((float *)&v20 + 2) * v15) + v258;
      v270 = (float)(*((float *)&v20 + 3) * v259) + v257;
      if ((WebCore::FloatQuad::isEmpty((WebCore::FloatQuad *)&v266) & 1) == 0)
      {
        v21 = (WebCore::StyledElement **)(v17 + 32 * v14);
        WebCore::ImageOverlay::fitElementToQuad(&v261, *v21, (float *)&v266, 1);
        v22 = v18 + 56 * v14;
        v23 = *(unsigned int *)(v22 + 44);
        if ((_DWORD)v23)
        {
          v249 = (WebCore::StyledElement **)(v17 + 32 * v14);
          if (v23 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1959FB45CLL);
          }
          v24 = (unsigned int *)(v22 + 32);
          v253 = (float *)WTF::fastMalloc((WTF *)(8 * v23));
          v25 = v24[3];
          if ((_DWORD)v25)
          {
            v247 = v18;
            v248 = v14;
            v26 = 0;
            v27 = (float *)(*(_QWORD *)v24 + 20);
            do
            {
              v28 = v27[1];
              v255 = *v27;
              v256 = *(v27 - 1);
              v29 = v27[2];
              v30 = v261;
              v31 = v15;
              v33 = v262;
              v32 = v263;
              v34 = (float)((float)((float)((float)(*(v27 - 3) * v15) + v258) + (float)((float)(v27[3] * v15) + v258))
                          * 0.5)
                  - v261;
              v35 = (float)((float)((float)((float)(*(v27 - 2) * v259) + v257) + (float)((float)(v27[4] * v259) + v257))
                          * 0.5)
                  - v262;
              v36 = __sincos_stret((float)-v265);
              v37 = v34 * v36.__cosval - v36.__sinval * v35 + 0.0;
              v38 = (float)(v37 / v32) + 0.5;
              v39 = 1.0;
              v40 = 1.0;
              if (v38 < 1.0)
              {
                if (v38 <= 0.0)
                  v40 = 0.0;
                else
                  v40 = v38;
              }
              v15 = v31;
              v41 = (float)((float)((float)(v256 * v31) + v258) + (float)((float)(v28 * v31) + v258)) * 0.5;
              v42 = 0.5;
              v43 = (float)((float)((float)((float)((float)(v255 * v259) + v257) + (float)((float)(v29 * v259) + v257))
                                  * 0.5)
                          - v33)
                  * -v36.__sinval
                  + (float)(v41 - v30) * v36.__cosval
                  + 0.0;
              v44 = (float)(v43 / v32) + 0.5;
              if (v44 < 1.0)
              {
                if (v44 <= 0.0)
                  v39 = 0.0;
                else
                  v39 = v44;
              }
              v45 = v32 * v40;
              v46 = v32 * v39;
              if ((float)(v32 * v39) >= (float)(v32 * v40))
                v47 = v32 * v40;
              else
                v47 = v32 * v39;
              if (v45 < v46)
                v45 = v46;
              if (v47 == v45)
              {
                v45 = 0.0;
                v48 = 0.0;
              }
              else
              {
                v48 = v47;
              }
              v49 = &v253[v26];
              *v49 = v48;
              v49[1] = v45;
              v26 += 2;
              v27 += 12;
            }
            while (2 * v25 != v26);
            v50 = 0;
            v51 = v17 + 32 * v248 + 8;
            v52 = v253 + 1;
            v53 = v25;
            v54 = v25;
            v254 = v24;
            while (1)
            {
              if (v50 >= *(unsigned int *)(v51 + 12))
              {
                __break(0xC471u);
                JUMPOUT(0x1959FB404);
              }
              v55 = *(_QWORD *)v51;
              v56 = 0.125;
              if (v54 == 1)
                v56 = 0.0;
              v57 = -v56;
              if (v54 == 1)
              {
                v57 = 0.0;
                if (v50 >= v25)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1959FB40CLL);
                }
                v58 = *(v52 - 1);
                v59 = *v52;
              }
              else if (v50)
              {
                v60 = v53 - 1;
                v61 = v50 - 1;
                if (v50 == v60)
                {
                  if (v61 >= v25)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1959FB434);
                  }
                  if (v50 >= v25)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1959FB43CLL);
                  }
                  v58 = (float)(*(v52 - 2) + *(v52 - 1)) * v42;
                  v59 = *v52;
                }
                else
                {
                  if (v61 >= v25)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1959FB444);
                  }
                  if (v50 >= v25)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1959FB44CLL);
                  }
                  if (v50 + 1 >= v25)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1959FB454);
                  }
                  v58 = (float)(*(v52 - 2) + *(v52 - 1)) * 0.5;
                  v42 = 0.5;
                  v59 = (float)(*v52 + v52[1]) * 0.5;
                }
              }
              else
              {
                if ((_DWORD)v25 == 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1959FB414);
                }
                v58 = *v253;
                v59 = (float)(v253[1] + v253[2]) * v42;
              }
              v62 = *(WebCore::StyledElement **)(v55 + 8 * v50);
              if ((float)((float)(v56 + v59) - (float)(v57 + v58)) <= 0.0 || v264 <= 0.0)
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                *(_QWORD *)&v322 = *(_QWORD *)v330;
                WebCore::StyledElement::setInlineStyleProperty(v62, (WTF::StringImpl *)0x111, (uint64_t)&v322, 0, 0);
                v102 = (WTF::StringImpl *)v322;
                *(_QWORD *)&v322 = 0;
                if (v102)
                  goto LABEL_117;
              }
              else
              {
                WebCore::Document::updateLayoutIfDimensionsOutOfDate(v6, *(_QWORD *)(v55 + 8 * v50), 3);
                v63 = *(WebCore::StyledElement **)(v55 + 8 * v50);
                v64 = *((_QWORD *)v63 + 8) & 0xFFFFFFFFFFFFLL;
                if (v64 && (*(_BYTE *)((*((_QWORD *)v63 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 8) != 0)
                {
                  ++*(_DWORD *)((*((_QWORD *)v63 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
                  v65 = (float)((float)((float)(*(int (**)(uint64_t))(*(_QWORD *)v64 + 896))(v64) * 0.015625)
                              / *(float *)(*(_QWORD *)(v64 + 104) + 184))
                      * 64.0;
                  if (v65 >= 2147483650.0)
                  {
                    v66 = 0x7FFFFFFF;
                  }
                  else if (v65 <= -2147483650.0)
                  {
                    v66 = 0x80000000;
                  }
                  else
                  {
                    v66 = (int)v65;
                  }
                  v67 = (float)((float)((float)(*(int (**)(uint64_t))(*(_QWORD *)v64 + 904))(v64) * 0.015625)
                              / *(float *)(*(_QWORD *)(v64 + 104) + 184))
                      * 64.0;
                  if (v67 >= 2147483650.0)
                  {
                    v68 = 0x7FFFFFFF;
                  }
                  else if (v67 <= -2147483650.0)
                  {
                    v68 = 0x80000000;
                  }
                  else
                  {
                    v68 = (int)v67;
                  }
                  v69 = *(_DWORD *)(v64 + 16);
                  if (!v69)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1959FB368);
                  }
                  *(_DWORD *)(v64 + 16) = v69 - 1;
                  v63 = *(WebCore::StyledElement **)(v55 + 8 * v50);
                  if ((float)((float)v66 * 0.015625) > 0.0 && (float)((float)v68 * 0.015625) > 0.0)
                  {
                    v42 = 0.5;
                    WTF::numberToString();
                    HIDWORD(v285) = strlen((const char *)__s);
                    WTF::numberToString();
                    HIDWORD(v283) = strlen((const char *)v282);
                    WTF::numberToString();
                    HIDWORD(v281) = strlen((const char *)v280);
                    WTF::numberToString();
                    v70 = strlen((const char *)v278);
                    HIDWORD(v279) = v70;
                    if (v70 < 0)
                      goto LABEL_331;
                    if (__OFADD__(v70, 2))
                      goto LABEL_331;
                    v71 = v70 + 4;
                    if (__OFADD__(v70 + 2, 2))
                      goto LABEL_331;
                    if ((HIDWORD(v281) & 0x80000000) != 0)
                      goto LABEL_331;
                    v72 = __OFADD__(HIDWORD(v281), v71);
                    v73 = HIDWORD(v281) + v71;
                    if (v72 || __OFADD__(v73, 6))
                      goto LABEL_331;
                    v74 = v73 + 10;
                    v75 = __OFADD__(v73 + 6, 4);
                    if ((HIDWORD(v283) & 0x80000000) != 0
                      || v75
                      || (v72 = __OFADD__(HIDWORD(v283), v74), v76 = HIDWORD(v283) + v74, v72)
                      || ((v72 = __OFADD__(v76, 4), v77 = v76 + 4, !v72) ? (v78 = 0) : (v78 = 1),
                          (HIDWORD(v285) & 0x80000000) != 0
                       || (v78 & 1) != 0
                       || (v79 = HIDWORD(v285) + v77, __OFADD__(HIDWORD(v285), v77))
                       || (v80 = (v79 + 10), __OFADD__(v79, 10))))
                    {
LABEL_331:
                      *(_QWORD *)v330 = 0;
                      __break(0xC471u);
                      JUMPOUT(0x1959FB3FCLL);
                    }
                    v314 = __s[4];
                    v315 = __s[5];
                    v316 = __s[6];
                    v317 = v285;
                    v310 = __s[0];
                    v311 = __s[1];
                    v312 = __s[2];
                    v313 = __s[3];
                    v304 = v282[2];
                    v305 = v282[3];
                    v302 = v282[0];
                    v303 = v282[1];
                    v308 = v282[6];
                    v309 = v283;
                    v306 = v282[4];
                    v307 = v282[5];
                    v296 = v280[2];
                    v297 = v280[3];
                    v294 = v280[0];
                    v295 = v280[1];
                    v300 = v280[6];
                    v301 = v281;
                    v298 = v280[4];
                    v299 = v280[5];
                    v288 = v278[2];
                    v289 = v278[3];
                    v286 = v278[0];
                    v287 = v278[1];
                    v292 = v278[6];
                    v293 = v279;
                    v290 = v278[4];
                    v291 = v278[5];
                    if (v79 == -10)
                    {
                      v81 = MEMORY[0x1E0CBEF70];
                      *MEMORY[0x1E0CBEF70] += 2;
                    }
                    else
                    {
                      if ((v80 & 0x80000000) != 0)
                        goto LABEL_331;
                      WTF::tryFastCompactMalloc((WTF *)(v80 + 20));
                      v81 = *(_QWORD *)v330;
                      if (!*(_QWORD *)v330)
                        goto LABEL_331;
                      __src[4] = v314;
                      __src[5] = v315;
                      __src[6] = v316;
                      v319 = v317;
                      __src[0] = v310;
                      __src[1] = v311;
                      v82 = v313;
                      __src[2] = v312;
                      **(_DWORD **)v330 = 2;
                      *(_DWORD *)(v81 + 4) = v80;
                      *(_QWORD *)(v81 + 8) = v81 + 20;
                      *(_DWORD *)(v81 + 16) = 4;
                      *(_QWORD *)(v81 + 20) = *(_QWORD *)"translate(";
                      *(_WORD *)(v81 + 28) = 10341;
                      v83 = (_BYTE *)(v81 + 30);
                      __src[3] = v82;
                      v84 = HIDWORD(v319);
                      if (HIDWORD(v319))
                      {
                        if (HIDWORD(v319) == 1)
                          *v83 = __src[0];
                        else
                          memcpy((void *)(v81 + 30), __src, HIDWORD(v319));
                      }
                      v85 = &v83[v84];
                      *v85 = 539785328;
                      v86 = v85 + 1;
                      v321 = v309;
                      __n_4[4] = v306;
                      __n_4[5] = v307;
                      __n_4[6] = v308;
                      __n_4[0] = v302;
                      __n_4[1] = v303;
                      __n_4[2] = v304;
                      __n_4[3] = v305;
                      v87 = HIDWORD(v309);
                      if (HIDWORD(v309))
                      {
                        if (HIDWORD(v309) == 1)
                          *v86 = __n_4[0];
                        else
                          memcpy(v86, __n_4, HIDWORD(v321));
                      }
                      qmemcpy(&v86[v87], "px) scale(", 10);
                      v329 = v301;
                      v326 = v298;
                      v327 = v299;
                      v328 = v300;
                      v322 = v294;
                      v323 = v295;
                      v324 = v296;
                      v88 = &v86[v87 + 10];
                      v325 = v297;
                      v89 = HIDWORD(v301);
                      if (HIDWORD(v301))
                      {
                        if (HIDWORD(v301) == 1)
                          *v88 = v322;
                        else
                          memcpy(v88, &v322, HIDWORD(v329));
                      }
                      v90 = &v88[v89];
                      *v90 = 8236;
                      v91 = v90 + 1;
                      v336 = v293;
                      v333 = v290;
                      v334 = v291;
                      v335 = v292;
                      *(_OWORD *)v330 = v286;
                      *(_OWORD *)&v330[16] = v287;
                      v331 = v288;
                      v332 = v289;
                      v92 = HIDWORD(v293);
                      if (HIDWORD(v293))
                      {
                        if (HIDWORD(v293) == 1)
                          *v91 = v330[0];
                        else
                          memcpy(v91, v330, HIDWORD(v336));
                      }
                      *(_WORD *)&v91[v92] = 8233;
                    }
                    *(_QWORD *)v330 = v81;
                    WebCore::StyledElement::setInlineStyleProperty(v63, (WTF::StringImpl *)0x111, (uint64_t)v330, 0, 0);
                    v94 = *(WTF::StringImpl **)v330;
                    *(_QWORD *)v330 = 0;
                    v6 = v252;
                    v24 = v254;
                    if (v94)
                    {
                      if (*(_DWORD *)v94 == 2)
                        WTF::StringImpl::destroy(v94, v93);
                      else
                        *(_DWORD *)v94 -= 2;
                    }
                    v95 = *(WebCore::StyledElement **)(v55 + 8 * v50);
                    v96 = WebCore::StyledElement::ensureMutableInlineStyle(v95, v93);
                    *v250 += 2;
                    *(_QWORD *)v330 = v250;
                    WebCore::MutableStyleProperties::setProperty(v96, 349, (_DWORD **)v330, 0);
                    v101 = *(_DWORD **)v330;
                    *(_QWORD *)v330 = 0;
                    if (v101)
                    {
                      if (*v101 == 2)
                        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v101, v97);
                      else
                        *v101 -= 2;
                    }
                    WebCore::StyledElement::inlineStyleChanged(v95, (uint64_t)v97, v98, v99, v100);
                    if (*(_BYTE *)(v247 + 56 * v248 + 49))
                    {
                      v103 = *(WebCore::StyledElement **)(v55 + 8 * v50);
                      v104 = WebCore::StyledElement::ensureMutableInlineStyle(v103, (WTF::StringImpl *)v10);
                      WebCore::staticCSSValuePool[5816] += 2;
                      *(_QWORD *)v330 = &WebCore::staticCSSValuePool[5816];
                      WebCore::MutableStyleProperties::setProperty(v104, 3, (_DWORD **)v330, 0);
                      v109 = *(_DWORD **)v330;
                      *(_QWORD *)v330 = 0;
                      if (v109)
                      {
                        if (*v109 == 2)
                          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v109, v105);
                        else
                          *v109 -= 2;
                      }
                      WebCore::StyledElement::inlineStyleChanged(v103, (uint64_t)v105, v106, v107, v108);
                    }
                    goto LABEL_119;
                  }
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                *(_QWORD *)&v322 = *(_QWORD *)v330;
                WebCore::StyledElement::setInlineStyleProperty(v63, (WTF::StringImpl *)0x111, (uint64_t)&v322, 0, 0);
                v102 = (WTF::StringImpl *)v322;
                *(_QWORD *)&v322 = 0;
                v24 = v254;
                if (v102)
                {
LABEL_117:
                  if (*(_DWORD *)v102 == 2)
                    WTF::StringImpl::destroy(v102, (WTF::StringImpl *)v10);
                  else
                    *(_DWORD *)v102 -= 2;
                }
              }
LABEL_119:
              ++v50;
              v53 = v24[3];
              v52 += 2;
              v54 = v24[3];
              if (v50 >= v53)
              {
                a2 = v251;
                v18 = v247;
                v14 = v248;
                break;
              }
            }
          }
          v21 = v249;
        }
        else
        {
          v253 = 0;
        }
        if ((*(_WORD *)(v6 + 3358) & 4) != 0)
        {
          v110 = *v21;
          v111 = *(unsigned __int8 *)(v18 + 56 * v14 + 49);
          v112 = WebCore::StyledElement::ensureMutableInlineStyle(v110, (WTF::StringImpl *)v10);
          v113 = 1616;
          if (!v111)
            v113 = 1612;
          v114 = &WebCore::staticCSSValuePool[v113];
          v114[3088] += 2;
          *(_QWORD *)v330 = v114 + 3088;
          WebCore::MutableStyleProperties::setProperty(v112, 106, (_DWORD **)v330, 0);
          v119 = *(_DWORD **)v330;
          *(_QWORD *)v330 = 0;
          if (v119)
          {
            if (*v119 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v119, v115);
            else
              *v119 -= 2;
          }
          WebCore::StyledElement::inlineStyleChanged(v110, (uint64_t)v115, v116, v117, v118);
        }
        if (v253)
          WTF::fastFree((WTF *)v253, v10);
      }
      ++v14;
    }
    while (v14 < *(unsigned int *)(a2 + 12));
  }
  if (*(_DWORD *)(a2 + 28))
  {
    v120 = 0;
    v121 = 0;
    v122 = (float)v246;
    v123 = (float)(int)v245;
    v124 = (float)v244;
    v125 = (float)(int)v243;
    do
    {
      if (v121 >= v274)
      {
        __break(0xC471u);
        JUMPOUT(0x1959FB424);
      }
      v126 = *(_QWORD *)(v273 + 8 * v121);
      v127 = *(_DWORD *)(v126 + 24) + 2;
      *(_DWORD *)(v126 + 24) = v127;
      v128 = *(_QWORD *)(a2 + 16) + v120;
      if (*(_DWORD *)(v128 + 20))
      {
        v129 = *(__int128 **)(v128 + 8);
        v130 = *v129;
        *(_OWORD *)&v330[16] = v129[1];
        *(_OWORD *)v330 = v130;
        if ((WebCore::FloatQuad::isEmpty((WebCore::FloatQuad *)v330) & 1) == 0)
        {
          *(float *)&v322 = (float)(*(float *)v330 * v122) + v124;
          *((float *)&v322 + 1) = (float)(*(float *)&v330[4] * v123) + v125;
          *((float *)&v322 + 2) = (float)(*(float *)&v330[8] * v122) + v124;
          *((float *)&v322 + 3) = (float)(*(float *)&v330[12] * v123) + v125;
          *(float *)&v323 = (float)(*(float *)&v330[16] * v122) + v124;
          *((float *)&v323 + 1) = (float)(*(float *)&v330[20] * v123) + v125;
          *((float *)&v323 + 2) = (float)(*(float *)&v330[24] * v122) + v124;
          *((float *)&v323 + 3) = (float)(*(float *)&v330[28] * v123) + v125;
          WebCore::ImageOverlay::fitElementToQuad((float *)__n_4, (WebCore::StyledElement *)v126, (float *)&v322, 1);
        }
        v127 = *(_DWORD *)(v126 + 24);
      }
      v131 = v127 - 2;
      if (v131)
      {
        *(_DWORD *)(v126 + 24) = v131;
      }
      else if ((*(_WORD *)(v126 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v126, v10);
      }
      ++v121;
      v132 = *(unsigned int *)(a2 + 28);
      v120 += 24;
    }
    while (v121 < v132);
    if ((_DWORD)v132)
    {
      v133 = *(_QWORD *)(v6 + 528);
      if (v133)
      {
        v134 = *(_QWORD *)(v133 + 8);
        if (v134)
        {
          v135 = *(_QWORD *)(v134 + 24);
          if (v135)
          {
            v136 = *(_DWORD **)(v135 + 8);
            if (v136)
            {
              v137 = (*v136)++;
              if (v137)
              {
                *v136 = v137;
              }
              else
              {
                WebCore::Page::~Page((uint64_t)v136);
                WTF::fastFree(v238, v239);
              }
            }
          }
        }
      }
    }
  }
  __n_4[0] = 0uLL;
  v138 = *(unsigned int *)(a2 + 44);
  if (!(_DWORD)v138)
    goto LABEL_204;
  if (v138 >> 27)
  {
    __break(0xC471u);
    JUMPOUT(0x1959FB46CLL);
  }
  v139 = (WTF *)WTF::fastMalloc((WTF *)(32 * v138));
  DWORD2(__n_4[0]) = v138;
  *(_QWORD *)&__n_4[0] = v139;
  v140 = *(unsigned int *)(a2 + 44);
  if (!(_DWORD)v140)
    goto LABEL_202;
  v141 = 0;
  v142 = 0;
  v143 = 40 * v140;
  v144 = (_OWORD *)(*(_QWORD *)(a2 + 32) + 8);
  do
  {
    if ((WebCore::FloatQuad::isEmpty((WebCore::FloatQuad *)v144) & 1) == 0)
    {
      if (v142 >= v276)
      {
        __break(0xC471u);
        JUMPOUT(0x1959FB464);
      }
      v145 = *(WebCore::StyledElement **)(v275 + 8 * v142);
      *((_DWORD *)v145 + 6) += 2;
      v146 = *((float32x4_t *)v144 + 1);
      *(_OWORD *)v330 = *v144;
      *(float32x2_t *)v147.f32 = vcvt_f32_s32(*(int32x2_t *)((char *)&v277 + 8));
      v147.i64[1] = v147.i64[0];
      *(float32x2_t *)v148.f32 = vcvt_f32_s32(*(int32x2_t *)&v277);
      v148.i64[1] = v148.i64[0];
      *(float32x4_t *)v330 = vaddq_f32(vmulq_f32(*(float32x4_t *)v330, v147), v148);
      *(float32x4_t *)&v330[16] = vaddq_f32(vmulq_f32(v146, v147), v148);
      WebCore::ImageOverlay::fitElementToQuad((float *)&v322, v145, (float *)v330, 0);
      WebCore::ImageOverlay::updateWithTextRecognitionResult(WebCore::HTMLElement &,WebCore::TextRecognitionResult const&,WebCore::ImageOverlay::CacheTextRecognitionResults)::$_5::operator()(v145, 0.8, *((float *)&v322 + 3));
      *(_QWORD *)v330 = v145;
      *(_QWORD *)&v330[8] = *((_QWORD *)&v322 + 1);
      *(_QWORD *)&v330[16] = 1061997773;
      *(_DWORD *)&v330[24] = 1065353216;
      v330[28] = 1;
      if (v141 == DWORD2(__n_4[0]))
      {
        v149 = WTF::Vector<WebCore::ImageOverlay::updateWithTextRecognitionResult(WebCore::HTMLElement &,WebCore::TextRecognitionResult const&,WebCore::ImageOverlay::CacheTextRecognitionResults)::FontSizeAdjustmentState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)__n_4, v141 + 1, (unint64_t)v330);
        v139 = *(WTF **)&__n_4[0];
        v141 = HIDWORD(__n_4[0]);
        v150 = *(_QWORD *)&__n_4[0] + 32 * HIDWORD(__n_4[0]);
        v151 = *(_QWORD *)v149;
        *(_QWORD *)v149 = 0;
        *(_QWORD *)v150 = v151;
        v152 = *(_QWORD *)(v149 + 21);
        *(_OWORD *)(v150 + 8) = *(_OWORD *)(v149 + 8);
        *(_QWORD *)(v150 + 21) = v152;
      }
      else
      {
        v153 = (char *)v139 + 32 * v141;
        *(_QWORD *)v330 = 0;
        *(_QWORD *)v153 = v145;
        v154 = *(_OWORD *)&v330[8];
        *(_QWORD *)(v153 + 21) = *(_QWORD *)&v330[21];
        *(_OWORD *)(v153 + 8) = v154;
      }
      HIDWORD(__n_4[0]) = ++v141;
      v155 = *(_QWORD *)v330;
      *(_QWORD *)v330 = 0;
      if (v155)
      {
        if (*(_DWORD *)(v155 + 24) == 2)
        {
          if ((*(_WORD *)(v155 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v155, v10);
        }
        else
        {
          *(_DWORD *)(v155 + 24) -= 2;
        }
      }
    }
    ++v142;
    v144 = (_OWORD *)((char *)v144 + 40);
    v143 -= 40;
  }
  while (v143);
  a2 = v251;
  v6 = v252;
  if (DWORD2(__n_4[0]) <= v141)
    goto LABEL_204;
  v156 = v139;
  if (v141)
  {
    if (v141 >> 27)
    {
LABEL_345:
      __break(0xC471u);
      JUMPOUT(0x1959FB2D0);
    }
    v157 = v141;
    v158 = WTF::fastMalloc((WTF *)(32 * v141));
    DWORD2(__n_4[0]) = v141;
    *(_QWORD *)&__n_4[0] = v158;
    v156 = v139;
    if ((WTF *)v158 != v139)
    {
      v159 = v158;
      v160 = 0;
      v161 = (_QWORD *)((char *)v139 + 32 * v157);
      do
      {
        v162 = v159 + v160;
        v163 = (_QWORD *)((char *)v139 + v160);
        v164 = *(_QWORD *)((char *)v139 + v160);
        *v163 = 0;
        *(_QWORD *)v162 = v164;
        v165 = *(_OWORD *)((char *)v139 + v160 + 8);
        *(_QWORD *)(v162 + 21) = *(_QWORD *)((char *)v139 + v160 + 21);
        *(_OWORD *)(v162 + 8) = v165;
        v166 = *(_QWORD *)((char *)v139 + v160);
        *v163 = 0;
        if (v166)
        {
          if (*(_DWORD *)(v166 + 24) == 2)
          {
            if ((*(_WORD *)(v166 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v166, v10);
          }
          else
          {
            *(_DWORD *)(v166 + 24) -= 2;
          }
        }
        v160 += 32;
      }
      while (v163 + 4 != v161);
      v156 = (WTF *)v159;
    }
  }
  a2 = v251;
  if (!v139)
    goto LABEL_204;
  if (v156 == v139)
  {
LABEL_202:
    *(_QWORD *)&__n_4[0] = 0;
    DWORD2(__n_4[0]) = 0;
  }
  WTF::fastFree(v139, v10);
LABEL_204:
  v167 = 0;
  LODWORD(v168) = HIDWORD(__n_4[0]);
  do
  {
    if (!(_DWORD)v168)
      goto LABEL_287;
    v260 = v167;
    WebCore::Document::updateLayout(v6, 2u, 0);
    v170 = *(_QWORD *)&__n_4[0];
    v171 = *(_QWORD *)&__n_4[0] + 32 * v168;
    v172 = 32 * v168;
    v173 = *(_QWORD *)&__n_4[0] + 16;
    do
    {
      v174 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(v173 - 16) + 64) & 0xFFFFFFFFFFFFLL);
      if (!v174 || (*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(v173 - 16) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) == 0)
        goto LABEL_260;
      ++v174[4];
      v175 = *(float *)(v173 - 4);
      v176 = v174[41];
      v177 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v174 + 1000))(v174);
      if (__OFSUB__(v176, v177))
        v178 = (v176 >> 31) + 0x7FFFFFFF;
      else
        v178 = v176 - v177;
      v179 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v174 + 1008))(v174);
      if (__OFSUB__(v178, v179))
        v180 = (v178 >> 31) + 0x7FFFFFFF;
      else
        v180 = v178 - v179;
      v181 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v174 + 1360))(v174);
      v182 = v181 << 6;
      if (v181 < -33554432)
        v182 = 0x80000000;
      if (v181 > 0x1FFFFFF)
        v182 = 0x7FFFFFFF;
      v72 = __OFSUB__(v180, v182);
      v183 = v180 - v182;
      if (v72)
        v183 = (v180 >> 31) + 0x7FFFFFFF;
      v184 = v183 & ~(v183 >> 31);
      v185 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v174 + 928))(v174);
      if (__OFSUB__(v184, v185))
        v186 = 0x7FFFFFFF;
      else
        v186 = v184 - v185;
      v187 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v174 + 936))(v174);
      if (__OFSUB__(v186, v187))
        v188 = (v186 >> 31) + 0x7FFFFFFF;
      else
        v188 = v186 - v187;
      if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)v174 + 11) + 40) + 584) & 0x100) != 0)
      {
        v208 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v174 + 1360))(v174);
        v189 = v208 << 6;
        if (v208 > 0x1FFFFFF)
          v189 = 0x7FFFFFFF;
        if (v208 < -33554432)
          v189 = 0x80000000;
      }
      else
      {
        v189 = 0;
      }
      v72 = __OFSUB__(v188, v189);
      v190 = v188 - v189;
      if (v72)
        v190 = (v188 >> 31) + 0x7FFFFFFF;
      v191 = (float)((float)(v190 & ~(v190 >> 31)) * 0.015625) / v175;
      v192 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v174 + 1208))(v174);
      v193 = v174[40];
      v194 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v174 + 1016))(v174);
      if (__OFSUB__(v193, v194))
        v195 = (v193 >> 31) + 0x7FFFFFFF;
      else
        v195 = v193 - v194;
      v196 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v174 + 1024))(v174);
      if (__OFSUB__(v195, v196))
        v197 = (v195 >> 31) + 0x7FFFFFFF;
      else
        v197 = v195 - v196;
      v198 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v174 + 1352))(v174);
      v199 = v198 << 6;
      if (v198 < -33554432)
        v199 = 0x80000000;
      if (v198 > 0x1FFFFFF)
        v199 = 0x7FFFFFFF;
      v72 = __OFSUB__(v197, v199);
      v200 = v197 - v199;
      if (v72)
        v200 = (v197 >> 31) + 0x7FFFFFFF;
      v201 = (((v200 & ~(v200 >> 31) & 0x20u) + 32) >> 6) + ((v200 & ~(v200 >> 31)) >> 6);
      v202 = v191 < 0.9 && v192 == v201;
      if (v202)
      {
        v205 = *(float *)v173;
        *(_DWORD *)(v173 + 4) = *(_DWORD *)v173;
        v204 = *(float *)(v173 + 8);
      }
      else
      {
        if (v191 <= 1.02 && v192 == v201)
        {
          *(_BYTE *)(v173 + 12) = 0;
          goto LABEL_258;
        }
        v204 = *(float *)v173;
        v205 = *(float *)(v173 + 4);
        *(_DWORD *)(v173 + 8) = *(_DWORD *)v173;
      }
      v206 = (float)(v204 + v205) * 0.5;
      *(float *)v173 = v206;
      WebCore::ImageOverlay::updateWithTextRecognitionResult(WebCore::HTMLElement &,WebCore::TextRecognitionResult const&,WebCore::ImageOverlay::CacheTextRecognitionResults)::$_5::operator()(*(WebCore::StyledElement **)(v173 - 16), v206, v175);
LABEL_258:
      v207 = v174[4];
      if (!v207)
        goto LABEL_345;
      v174[4] = v207 - 1;
LABEL_260:
      v173 += 32;
      v172 -= 32;
    }
    while (v172);
    v209 = 0;
    v210 = v170;
    v211 = (unsigned int *)v171;
    v212 = v171;
    do
    {
      if (*(_BYTE *)(v170 + 28))
      {
        v213 = v212;
      }
      else
      {
        v213 = v170;
        if (v212 != *(_QWORD *)&__n_4[0] + 32 * HIDWORD(__n_4[0]))
        {
          if ((unsigned int *)v170 == v211)
          {
            v213 = v212;
          }
          else
          {
            WTF::VectorTypeOperations<WebCore::ImageOverlay::updateWithTextRecognitionResult(WebCore::HTMLElement &,WebCore::TextRecognitionResult const&,WebCore::ImageOverlay::CacheTextRecognitionResults)::FontSizeAdjustmentState>::moveOverlapping(v211, (unsigned int *)v170, v212);
            v213 = v212 + v210 - (_QWORD)v211;
          }
        }
        v214 = *(_QWORD *)v170;
        *(_QWORD *)v170 = 0;
        v211 = (unsigned int *)(v170 + 32);
        if (v214)
        {
          if (*(_DWORD *)(v214 + 24) == 2)
          {
            if ((*(_WORD *)(v214 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v214, v169);
          }
          else
          {
            *(_DWORD *)(v214 + 24) -= 2;
          }
        }
        ++v209;
        v212 = v213;
      }
      v170 += 32;
      v210 += 32;
    }
    while (v170 < v171);
    v215 = HIDWORD(__n_4[0]);
    v10 = (unsigned int *)(*(_QWORD *)&__n_4[0] + 32 * HIDWORD(__n_4[0]));
    if (v211 != v10)
    {
      WTF::VectorTypeOperations<WebCore::ImageOverlay::updateWithTextRecognitionResult(WebCore::HTMLElement &,WebCore::TextRecognitionResult const&,WebCore::ImageOverlay::CacheTextRecognitionResults)::FontSizeAdjustmentState>::moveOverlapping(v211, v10, v213);
      v215 = HIDWORD(__n_4[0]);
    }
    a2 = v251;
    v6 = v252;
    v168 = (v215 - v209);
    HIDWORD(__n_4[0]) = v215 - v209;
    v167 = v260 + 1;
  }
  while (v260 != 10);
  if (v215 != v209)
  {
    v216 = *(_QWORD *)&__n_4[0];
    v217 = *(_QWORD *)&__n_4[0] + 32 * v168;
    do
    {
      WebCore::StyledElement::setInlineStyleProperty(*(WebCore::StyledElement **)v216, (WTF::StringImpl *)0xD, 6, 0, (float)(*(float *)(v216 + 12) * *(float *)(v216 + 20)));
      v216 += 32;
    }
    while (v216 != v217);
  }
LABEL_287:
  v218 = *(_QWORD *)(v6 + 528);
  if (v218)
  {
    v219 = *(_QWORD *)(v218 + 8);
    if (v219)
    {
      v220 = (unsigned int *)(v219 + 8);
      do
        v221 = __ldaxr(v220);
      while (__stlxr(v221 + 1, v220));
      v222 = *(_QWORD *)(v219 + 640);
      if (!*(_BYTE *)(v222 + 183))
      {
        v234 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v222 + 8) + 8) + 24);
        if (v234)
        {
          v235 = *(WebCore::Page **)(v234 + 8);
          if (v235)
          {
            ++*(_DWORD *)v235;
            if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v235 + 6) + 16) + 416))(*(_QWORD *)(*((_QWORD *)v235 + 6) + 16)))
            {
              *(_BYTE *)(v222 + 183) = 1;
              WebCore::Page::scheduleRenderingUpdate((uint64_t)v235, 4096);
            }
            WTF::RefCounted<WebCore::Page>::deref(v235);
          }
        }
      }
      do
      {
        v223 = __ldaxr(v220);
        v224 = v223 - 1;
      }
      while (__stlxr(v224, v220));
      if (!v224)
      {
        atomic_store(1u, v220);
        v240 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v240 = off_1E31FE290;
        v240[1] = v220;
        *(_QWORD *)v330 = v240;
        WTF::ensureOnMainThread();
        v241 = *(_QWORD *)v330;
        *(_QWORD *)v330 = 0;
        if (v241)
          (*(void (**)(uint64_t))(*(_QWORD *)v241 + 8))(v241);
      }
    }
  }
  if (a3)
  {
    v225 = *(_QWORD *)(v6 + 528);
    if (v225)
    {
      v226 = *(_QWORD *)(v225 + 8);
      if (v226)
      {
        v227 = *(_QWORD *)(v226 + 24);
        if (v227)
        {
          v228 = *(_DWORD **)(v227 + 8);
          if (v228)
          {
            ++*v228;
            std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>::pair[abi:sn180100]<true,0>((uint64_t)v330, a2, &v277);
            WTF::WeakHashMap<WebCore::HTMLElement,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>,WebCore::WeakPtrImplWithEventTargetData>::set<WebCore::HTMLElement,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>>((uint64_t)(v228 + 448), v242, (uint64_t)v330);
            WebCore::TextRecognitionResult::~TextRecognitionResult((WebCore::TextRecognitionResult *)v330, v229);
            if (*v228 == 1)
            {
              WebCore::Page::~Page((uint64_t)v228);
              WTF::fastFree(v236, v237);
            }
            else
            {
              --*v228;
            }
          }
        }
      }
    }
  }
  v230 = *(WTF **)&__n_4[0];
  if (HIDWORD(__n_4[0]))
  {
    v231 = 32 * HIDWORD(__n_4[0]);
    v232 = *(uint64_t **)&__n_4[0];
    do
    {
      v233 = *v232;
      *v232 = 0;
      if (v233)
      {
        if (*(_DWORD *)(v233 + 24) == 2)
        {
          if ((*(_WORD *)(v233 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v233, v10);
        }
        else
        {
          *(_DWORD *)(v233 + 24) -= 2;
        }
      }
      v232 += 4;
      v231 -= 32;
    }
    while (v231);
  }
  if (v230)
    WTF::fastFree(v230, v10);
  WebCore::ImageOverlay::Elements::~Elements((WebCore::ImageOverlay::Elements *)v271, v10);
  if (v6)
  {
LABEL_313:
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, (void *)v8);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
}

void WebCore::ImageOverlay::updateSubtree(unint64_t this, WebCore::HTMLElement *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  void *v8;
  WTF::StringBuilder *v9;
  __n128 v10;
  uint64_t v11;
  WebCore::MediaControlsHost *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unint64_t v25;
  unint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unsigned __int8 *v32;
  unint64_t v33;
  int v34;
  BOOL v35;
  BOOL v36;
  const WebCore::TextRecognitionResult *v37;
  unint64_t v38;
  unsigned int v39;
  unint64_t v40;
  int v41;
  unsigned int v42;
  int v43;
  unint64_t v44;
  BOOL v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BOOL4 v49;
  WTF *v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  unsigned __int8 *v59;
  unint64_t v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  unsigned __int8 *v67;
  unint64_t v68;
  int v69;
  WTF::StringImpl *v70;
  unsigned int v71;
  unint64_t v72;
  unsigned int v73;
  unint64_t v74;
  unsigned int v75;
  int v76;
  unint64_t v77;
  unsigned int v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  WTF::StringImpl **v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  void *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  WTF *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  WTF *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  WTF *v107;
  uint64_t v108;
  WebCore::Node *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  WebCore::MutableStyleProperties *v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  WTF::String *v120;
  __n128 v121;
  _DWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int *v126;
  const WTF::AtomString *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  WTF::String *v131;
  WebCore::Element **v132;
  __n128 v133;
  uint64_t v134;
  WTF::String *v135;
  uint64_t *v136;
  const WTF::AtomString *v137;
  int *v138;
  uint64_t v139;
  WebCore::ImageOverlay *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  void *v144;
  void *v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  WebCore::ImageOverlay *v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  void *v154;
  void *v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int *v161;
  uint64_t v162;
  unsigned int v163;
  unsigned int v164;
  int *v165;
  uint64_t v166;
  int v167;
  int *v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  int *v174;
  int *v175;
  unsigned int *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  int v190;
  uint64_t v191;
  int v192;
  WTF *v193;
  void *v194;
  WTF::StringImpl *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  WTF::String *v204;
  WTF *v205;
  __n128 v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  WebCore::Node *v216;
  uint64_t v217;
  void *v218;
  WTF::String *v219;
  uint64_t v220;
  __n128 v221;
  uint64_t v222;
  WebCore::ElementRareData *v223;
  uint64_t v224;
  WTF *v225;
  WTF::StringImpl *v226;
  WTF::StringImpl *v227;
  WTF::StringImpl *v228;
  WTF::StringImpl *v229;
  uint64_t v230;
  int v231;
  unint64_t v232;
  int v233;
  uint64_t v234;
  int *v235;
  _WORD *v236;
  _OWORD *v237;
  uint64_t v238;
  uint64_t v239;
  WTF::StringImpl *v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  WTF::StringImpl **v246;
  uint64_t v247;
  WTF::StringImpl *v248;
  WTF *v249;
  char *v251;
  char *v252;
  __int16 v253;
  void *v254;
  size_t v255;
  uint64_t v256;
  uint64_t v257;
  int *v258;
  WTF::StringImpl *v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  void *v264;
  void *v265;
  WebCore::Node **v266;
  char *v267;
  __int128 v268;
  int8x16_t v269;
  __int128 v270;
  __int128 v271;
  char *v272;
  char *v273;
  char *v274;
  unsigned __int128 *v275;
  unsigned __int128 *v276;
  unsigned __int128 v277;
  char v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  WTF::StringImpl *v282;
  uint64_t v283;
  unsigned int *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _QWORD *v288;
  uint64_t *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  const void **v299;
  uint64_t v300;
  WTF::String *v301;
  WTF *v302;
  __n128 v303;
  WTF::StringImpl *v304;
  WTF::StringImpl *v305;
  WTF::StringImpl *v306;
  uint64_t v307;
  char *v308;
  uint64_t v309;
  uint64_t v310;
  int *v311;
  int *v312;
  uint64_t v313;
  uint64_t v314;
  unsigned int v315;
  uint64_t v316;
  _DWORD **v317;
  uint64_t v318;
  uint64_t v319;
  WTF::String *v320;
  WTF *v321;
  __n128 v322;
  WTF::StringImpl *v323;
  WTF::StringImpl *v324;
  _DWORD **v325;
  uint64_t v326;
  WebCore::Node *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  WTF::StringImpl *v331;
  WTF::StringImpl *v332;
  uint64_t v333;
  uint64_t v334;
  _DWORD *v335;
  WTF::StringImpl *v336;
  WTF::StringImpl *v337;
  WebCore::Node *v338;
  WebCore::MutableStyleProperties *v339;
  WTF::StringImpl *v340;
  uint64_t v341;
  WTF::String *v342;
  __n128 v343;
  int *v344;
  WTF::StringImpl *v345;
  uint64_t v346;
  char *v347;
  uint64_t v348;
  uint64_t v349;
  WebCore::Node *v350;
  WTF *v351;
  WebCore::Node *v352;
  WTF::StringImpl **v353;
  uint64_t v354;
  WTF::StringImpl *v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  void *v360;
  uint64_t v361;
  uint64_t v362;
  int *v363;
  unsigned int v364;
  WTF::StringImpl *v365;
  WTF::StringImpl *v366;
  __int128 v367;
  uint64_t v368;
  uint64_t v369;
  WTF::StringImpl *v370;
  uint64_t *v371;
  uint64_t v372;
  int v373;
  int i;
  unsigned int v375;
  uint64_t v376;
  uint64_t v378;
  int v379;
  char v380;
  uint64_t v381;
  _QWORD *v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t *v386;
  unint64_t v387;
  uint64_t v388;
  int v389;
  uint64_t v390;
  unsigned int v391;
  uint64_t *v392;
  unsigned int v393;
  uint64_t v394;
  uint64_t v395;
  WebCore::ContainerNode *v396;
  unint64_t v397;
  unint64_t v398;
  WebCore::ImageOverlay *v399;
  char v400;
  WebCore::Node *v401;
  unint64_t v402;
  unint64_t v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t v406;
  uint64_t v407;
  unsigned __int8 *v408;
  unint64_t v409;
  uint64_t v410;
  WebCore::Element *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  __int128 v417;
  char v418[8];
  WTF::StringImpl *v419;
  char v420;
  char v421[8];
  WTF::StringImpl *v422;
  char v423;
  char v424[8];
  WTF::StringImpl *v425;
  char v426;
  uint64_t v427;
  WTF::StringImpl *v428;
  char v429;
  WebCore::Node *v430;
  char v431[8];
  WTF::StringImpl *v432;
  char v433;
  uint64_t v434;
  WTF::StringImpl *v435;
  char v436;
  char v437[8];
  WTF::StringImpl *v438;
  char v439;
  char v440[8];
  WTF::StringImpl *v441;
  char v442;
  char v443[8];
  WTF::StringImpl *v444;
  char v445;
  uint64_t v446;
  WTF::StringImpl *v447;
  char v448;
  char v449[8];
  WTF::StringImpl *v450;
  char v451;
  uint64_t v452;
  WTF::StringImpl *v453;
  char v454;
  char v455[8];
  WTF::StringImpl *v456;
  char v457;
  char v458[8];
  WTF::StringImpl *v459;
  char v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  uint64_t v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  uint64_t v468;
  int *v469;
  WTF::StringImpl *v470;
  char v471;
  int8x16x2_t v472;
  int8x16x2_t v473;
  int8x16x2_t v474;

  v6 = (unint64_t)a2;
  v468 = 0;
  v466 = 0u;
  v467 = 0u;
  v465 = 0u;
  if (!(*(unsigned int (**)(WebCore::HTMLElement *))(*(_QWORD *)a2 + 824))(a2))
    goto LABEL_761;
  *(_DWORD *)(v6 + 24) += 2;
  v11 = WebCore::Element::ensureUserAgentShadowRoot((WebCore::Element *)v6);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(WebCore::MediaControlsHost **)(v6 + 1616);
  if (v12)
  {
    ++*(_DWORD *)v12;
    {
      WTF::AtomStringImpl::add();
      WebCore::MediaControlsHost::mediaControlsContainerClassName(void)const::className = v461;
    }
    v13 = *(_QWORD *)(v11 + 80);
    if (v13)
    {
      while (1)
      {
        if ((*(_WORD *)(v13 + 28) & 0x10) != 0)
        {
          v14 = *(_QWORD *)(WebCore::HTMLNames::divTag + 24);
          if (*(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) == v14)
            break;
        }
        v13 = *(_QWORD *)(v13 + 56);
        if (!v13)
          goto LABEL_9;
      }
LABEL_297:
      v123 = *(_QWORD *)(v13 + 104);
      if (v123 && (v124 = *(_QWORD *)(v123 + 16)) != 0)
      {
        v125 = 0;
        while (*(_QWORD *)(v124 + 16 + 8 * v125) != WebCore::MediaControlsHost::mediaControlsContainerClassName(void)const::className)
        {
          if (++v125 >= (unint64_t)*(unsigned int *)(v124 + 12))
            goto LABEL_302;
        }
        *(_DWORD *)(v13 + 24) += 2;
      }
      else
      {
LABEL_302:
        while (1)
        {
          v13 = *(_QWORD *)(v13 + 56);
          if (!v13)
            break;
          if ((*(_WORD *)(v13 + 28) & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) == v14)
            goto LABEL_297;
        }
      }
    }
LABEL_9:
    if (*(_DWORD *)v12 == 1)
    {
      WebCore::MediaControlsHost::~MediaControlsHost(v12, v8);
      WTF::fastFree(v193, v194);
    }
    else
    {
      --*(_DWORD *)v12;
    }
  }
  else
  {
    v13 = 0;
  }
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v8);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v8);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
LABEL_15:
  v401 = (WebCore::Node *)v13;
  v402 = a3;
  if ((*(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL) == 0
    || (v188 = *(_QWORD *)((*(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL) + 0x58)) == 0)
  {
    v400 = 0;
    goto LABEL_17;
  }
  v189 = *(_DWORD *)(v188 + 24);
  v190 = v189 + 2;
  *(_DWORD *)(v188 + 24) = v189 + 2;
  v191 = *(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL;
  if (v191)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1959FDFA4);
    }
    if ((((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3) & *(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL)
                                                                                               + 0x35)) == 1)
    {
      v192 = *(_DWORD *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
      *(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0xEB) = 1;
      *(_DWORD *)(v191 + 16) = v192 + 1;
      if (v192 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x1959FDFC4);
      }
      *(_DWORD *)(v191 + 16) = v192;
    }
  }
  *(_DWORD *)(v188 + 24) = v189 + 4;
  if (!*(_BYTE *)(v188 + 193))
  {
    {
      WTF::AtomStringImpl::add();
      WebCore::ImageOverlay::imageOverlayElementIdentifier(void)::identifier = v461;
    }
    v371 = *(uint64_t **)(v188 + 120);
    if (v371)
    {
      v372 = *v371;
      if (v372)
      {
        v373 = 0;
        v3 = (unint64_t)&webThreadDelegateMessageScopeCount;
        for (i = *(_DWORD *)(WebCore::ImageOverlay::imageOverlayElementIdentifier(void)::identifier + 16) >> 8;
              ;
              i = v373 + v375)
        {
          v375 = i & *(_DWORD *)(v372 - 8);
          v376 = *(_QWORD *)(v372 + 40 * v375);
          if (!v376)
            break;
          if (v376 != -1 && v376 == WebCore::ImageOverlay::imageOverlayElementIdentifier(void)::identifier)
          {
            if (*(_DWORD *)(v188 + 24) == 2)
            {
              if ((*(_WORD *)(v188 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v188, v8);
            }
            else
            {
              *(_DWORD *)(v188 + 24) -= 2;
            }
            if (v13)
            {
              v378 = v13;
              v379 = *(_DWORD *)(v13 + 24) + 2;
              *(_DWORD *)(v13 + 24) = v379;
            }
            else
            {
              v379 = *(_DWORD *)(v188 + 24) + 2;
              *(_DWORD *)(v188 + 24) = v379;
              v378 = v188;
            }
            v4 = *(_QWORD *)(v378 + 80);
            if (v4)
            {
              while ((*(_WORD *)(v4 + 28) & 0x10) == 0
                   || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::divTag + 24))
              {
                v4 = *(_QWORD *)(v4 + 56);
                if (!v4)
                  goto LABEL_790;
              }
              v380 = 0;
              while (1)
              {
                v381 = *(_QWORD *)(v4 + 104);
                if (v381)
                {
                  v382 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                  if (*(_QWORD *)(v381 + 24))
                  {
                    v385 = *(unsigned int *)(v381 + 4);
                    if ((v385 & 1) != 0)
                    {
                      v386 = *(uint64_t **)(v381 + 40);
                      v387 = *(unsigned int *)(v381 + 52);
                    }
                    else
                    {
                      v386 = (uint64_t *)(v381 + 32);
                      v387 = v385 >> 5;
                    }
                    if (v387)
                    {
                      while (1)
                      {
                        v388 = *v386;
                        if (*v386 == WebCore::HTMLNames::idAttr
                          || *(_QWORD *)(v388 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
                          && *(_QWORD *)(v388 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
                        {
                          break;
                        }
                        v386 += 2;
                        if (!--v387)
                          goto LABEL_820;
                      }
                    }
                    else
                    {
LABEL_820:
                      v386 = 0;
                    }
                    v382 = v386 + 1;
                  }
                }
                else
                {
                  v382 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                }
                {
                  v383 = WebCore::ImageOverlay::imageOverlayElementIdentifier(void)::identifier;
                }
                else
                {
                  WTF::AtomStringImpl::add();
                  v383 = v461;
                  WebCore::ImageOverlay::imageOverlayElementIdentifier(void)::identifier = v461;
                }
                if (*v382 == v383)
                {
                  *(_DWORD *)(v4 + 24) += 2;
                  v384 = v465;
                  *(_QWORD *)&v465 = v4;
                  if (v384)
                  {
                    if (*(_DWORD *)(v384 + 24) == 2)
                    {
                      if ((*(_WORD *)(v384 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v384, v8);
                    }
                    else
                    {
                      *(_DWORD *)(v384 + 24) -= 2;
                    }
                  }
                  v380 = 1;
                }
                v4 = *(_QWORD *)(v4 + 56);
                if (!v4)
                  break;
                while ((*(_WORD *)(v4 + 28) & 0x10) == 0
                     || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::divTag + 24))
                {
                  v4 = *(_QWORD *)(v4 + 56);
                  if (!v4)
                    goto LABEL_823;
                }
              }
LABEL_823:
              v379 = *(_DWORD *)(v378 + 24);
            }
            else
            {
LABEL_790:
              v380 = 0;
            }
            v389 = v379 - 2;
            if (v389)
            {
              *(_DWORD *)(v378 + 24) = v389;
            }
            else if ((*(_WORD *)(v378 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v378, v8);
            }
            v400 = v380 & 1;
            goto LABEL_408;
          }
          ++v373;
        }
      }
    }
    v190 = *(_DWORD *)(v188 + 24) - 2;
    if (*(_DWORD *)(v188 + 24) != 2)
      goto LABEL_407;
LABEL_769:
    if ((*(_WORD *)(v188 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v188, v8);
    v400 = 0;
    goto LABEL_408;
  }
  if (v189 == -2)
    goto LABEL_769;
LABEL_407:
  v400 = 0;
  *(_DWORD *)(v188 + 24) = v190;
LABEL_408:
  if (*(_DWORD *)(v188 + 24) == 2)
  {
    if ((*(_WORD *)(v188 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v188, v8);
  }
  else
  {
    *(_DWORD *)(v188 + 24) -= 2;
  }
LABEL_17:
  v411 = (WebCore::Element *)v6;
  if (!(_QWORD)v465)
    goto LABEL_282;
  v15 = *(_QWORD *)(v465 + 80);
  if (v15)
  {
    while ((*(_WORD *)(v15 + 28) & 0x10) == 0
         || *(_QWORD *)(*(_QWORD *)(v15 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::divTag + 24))
    {
      v15 = *(_QWORD *)(v15 + 56);
      if (!v15)
        goto LABEL_22;
    }
    v413 = (uint64_t)&v465 + 8;
    v416 = (uint64_t)&v461 + 8;
    v126 = &webThreadDelegateMessageScopeCount;
    v127 = (const WTF::AtomString *)&WebCore::ImageOverlay::imageOverlayDataDetectorClass(void)::className;
    v128 = &qword_1ECE83000;
    v3 = (unint64_t)&qword_1ECE831C0;
    while (1)
    {
      v129 = *(_QWORD *)(v15 + 104);
      if (v129 && *(_QWORD *)(v129 + 16))
      {
        v132 = (WebCore::Element **)WebCore::Element::classList((WebCore::Element *)v15);
        if ((v126[494] & 1) == 0)
        {
          WTF::AtomStringImpl::add();
          WebCore::ImageOverlay::imageOverlayDataDetectorClass(void)::className = v461;
          *((_BYTE *)v126 + 1976) = 1;
        }
        if (WebCore::DOMTokenList::contains(v132, v127, v130, v131, v133))
        {
          v136 = v128;
          v137 = v127;
          v138 = v126;
          v139 = DWORD1(v467);
          if (DWORD1(v467) != (_DWORD)v467)
          {
            v159 = *((_QWORD *)&v466 + 1);
            *(_DWORD *)(v15 + 24) += 2;
            *(_QWORD *)(v159 + 8 * v139) = v15;
            DWORD1(v467) = v139 + 1;
LABEL_349:
            v126 = v138;
            v127 = v137;
            v128 = v136;
            goto LABEL_388;
          }
          v140 = (WebCore::ImageOverlay *)this;
          v141 = DWORD1(v467) + ((unint64_t)DWORD1(v467) >> 2);
          if (v141 >= 0x10)
            v142 = v141 + 1;
          else
            v142 = 16;
          if (v142 <= (unint64_t)DWORD1(v467) + 1)
            v143 = DWORD1(v467) + 1;
          else
            v143 = v142;
          if (v143 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1959FE378);
          }
          v144 = (void *)*((_QWORD *)&v466 + 1);
          v145 = (void *)WTF::fastMalloc((WTF *)(8 * v143));
          LODWORD(v467) = v143;
          *((_QWORD *)&v466 + 1) = v145;
          memcpy(v145, v144, 8 * v139);
          this = (unint64_t)v140;
          a3 = v402;
          v126 = v138;
          v127 = v137;
          v128 = v136;
          if (v144)
          {
            if (*((void **)&v466 + 1) == v144)
            {
              *((_QWORD *)&v466 + 1) = 0;
              LODWORD(v467) = 0;
            }
            WTF::fastFree((WTF *)v144, v8);
          }
          v146 = DWORD1(v467);
          v147 = DWORD1(v467) + 1;
          v148 = *((_QWORD *)&v466 + 1);
          *(_DWORD *)(v15 + 24) += 2;
          *(_QWORD *)(v148 + 8 * v146) = v15;
          DWORD1(v467) = v147;
        }
        else
        {
          if ((*((_BYTE *)v128 + 433) & 1) == 0)
          {
            WTF::AtomStringImpl::add();
            qword_1ECE831C0 = v461;
            byte_1ECE831B1 = 1;
          }
          if (WebCore::DOMTokenList::contains(v132, (const WTF::AtomString *)&qword_1ECE831C0, v134, v135, v10))
          {
            v136 = v128;
            v137 = v127;
            v138 = v126;
            v149 = HIDWORD(v468);
            if (HIDWORD(v468) != (_DWORD)v468)
            {
              v166 = *((_QWORD *)&v467 + 1);
              *(_DWORD *)(v15 + 24) += 2;
              *(_QWORD *)(v166 + 8 * v149) = v15;
              HIDWORD(v468) = v149 + 1;
              goto LABEL_349;
            }
            v150 = (WebCore::ImageOverlay *)this;
            v151 = HIDWORD(v468) + ((unint64_t)HIDWORD(v468) >> 2);
            if (v151 >= 0x10)
              v152 = v151 + 1;
            else
              v152 = 16;
            if (v152 <= (unint64_t)HIDWORD(v468) + 1)
              v153 = HIDWORD(v468) + 1;
            else
              v153 = v152;
            if (v153 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1959FE380);
            }
            v154 = (void *)*((_QWORD *)&v467 + 1);
            v155 = (void *)WTF::fastMalloc((WTF *)(8 * v153));
            LODWORD(v468) = v153;
            *((_QWORD *)&v467 + 1) = v155;
            memcpy(v155, v154, 8 * v149);
            this = (unint64_t)v150;
            a3 = v402;
            v126 = v138;
            v127 = v137;
            v128 = v136;
            if (v154)
            {
              if (*((void **)&v467 + 1) == v154)
              {
                *((_QWORD *)&v467 + 1) = 0;
                LODWORD(v468) = 0;
              }
              WTF::fastFree((WTF *)v154, v8);
            }
            v156 = HIDWORD(v468);
            v157 = HIDWORD(v468) + 1;
            v158 = *((_QWORD *)&v467 + 1);
            *(_DWORD *)(v15 + 24) += 2;
            *(_QWORD *)(v158 + 8 * v156) = v15;
            HIDWORD(v468) = v157;
          }
          else
          {
            v469 = 0;
            v470 = 0;
            v160 = *(_QWORD *)(v15 + 80);
            if (v160)
            {
              v161 = v126;
              v162 = *(_QWORD *)(v15 + 80);
              while ((*(_WORD *)(v162 + 28) & 0x10) == 0
                   || *(_QWORD *)(*(_QWORD *)(v162 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::divTag + 24))
              {
                v162 = *(_QWORD *)(v162 + 56);
                if (!v162)
                {
                  v163 = 0;
                  v164 = 0;
                  v165 = 0;
                  goto LABEL_373;
                }
              }
              v399 = (WebCore::ImageOverlay *)this;
              v167 = 0;
              v168 = 0;
              v163 = 0;
              while (1)
              {
                v169 = v163;
                if (v163 == v167)
                {
                  v170 = v163 + 1;
                  v171 = v169 + (v169 >> 2);
                  if (v171 >= 0x10)
                    v172 = v171 + 1;
                  else
                    v172 = 16;
                  if (v172 <= v170)
                    v173 = v169 + 1;
                  else
                    v173 = v172;
                  if (v173 >> 29)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1959FE388);
                  }
                  v174 = (int *)WTF::fastMalloc((WTF *)(8 * v173));
                  LODWORD(v470) = v173;
                  v469 = v174;
                  memcpy(v174, v168, 8 * v169);
                  this = (unint64_t)v399;
                  a3 = v402;
                  if (v168)
                  {
                    if (v469 == v168)
                    {
                      v469 = 0;
                      LODWORD(v470) = 0;
                    }
                    WTF::fastFree((WTF *)v168, v8);
                  }
                  v163 = HIDWORD(v470);
                  v168 = v469;
                  v175 = &v469[2 * HIDWORD(v470)];
                }
                else
                {
                  v175 = &v168[2 * v163];
                  this = (unint64_t)v399;
                }
                *(_DWORD *)(v162 + 24) += 2;
                *(_QWORD *)v175 = v162;
                HIDWORD(v470) = ++v163;
                v162 = *(_QWORD *)(v162 + 56);
                if (!v162)
                  break;
                while ((*(_WORD *)(v162 + 28) & 0x10) == 0
                     || *(_QWORD *)(*(_QWORD *)(v162 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::divTag + 24))
                {
                  v162 = *(_QWORD *)(v162 + 56);
                  if (!v162)
                    goto LABEL_372;
                }
                v167 = (int)v470;
              }
LABEL_372:
              v165 = v469;
              v164 = v470;
              v160 = *(_QWORD *)(v15 + 80);
LABEL_373:
              v126 = v161;
              v127 = (const WTF::AtomString *)&WebCore::ImageOverlay::imageOverlayDataDetectorClass(void)::className;
            }
            else
            {
              v163 = 0;
              v164 = 0;
              v165 = 0;
            }
            *(_DWORD *)(v15 + 24) += 2;
            v469 = 0;
            v470 = 0;
            *(_QWORD *)&v461 = v15;
            *((_QWORD *)&v461 + 1) = v165;
            *(_QWORD *)&v462 = __PAIR64__(v163, v164);
            if (v160)
            {
              while ((*(_WORD *)(v160 + 28) & 0x10) == 0
                   || *(_QWORD *)(*(_QWORD *)(v160 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
              {
                v160 = *(_QWORD *)(v160 + 56);
                if (!v160)
                  goto LABEL_380;
              }
              *(_DWORD *)(v160 + 24) += 2;
            }
LABEL_380:
            *((_QWORD *)&v462 + 1) = v160;
            if (DWORD1(v466) == (_DWORD)v466)
            {
              v176 = WTF::Vector<WebCore::ImageOverlay::LineElements,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v465 + 8, DWORD1(v466) + 1, (unint64_t)&v461);
              v177 = *((_QWORD *)&v465 + 1) + 32 * DWORD1(v466);
              v178 = *(_QWORD *)v176;
              *(_QWORD *)v176 = 0;
              *(_QWORD *)(v177 + 8) = 0;
              *(_QWORD *)(v177 + 16) = 0;
              *(_QWORD *)v177 = v178;
              v179 = *((_QWORD *)v176 + 1);
              *((_QWORD *)v176 + 1) = 0;
              *(_QWORD *)(v177 + 8) = v179;
              LODWORD(v179) = v176[4];
              v176[4] = 0;
              *(_DWORD *)(v177 + 16) = v179;
              LODWORD(v179) = v176[5];
              v176[5] = 0;
              *(_DWORD *)(v177 + 20) = v179;
              v180 = (_QWORD *)(v177 + 24);
              v181 = (uint64_t *)(v176 + 6);
            }
            else
            {
              v182 = *((_QWORD *)&v465 + 1) + 32 * DWORD1(v466);
              *(_QWORD *)&v461 = 0;
              *(_QWORD *)(v182 + 8) = 0;
              *(_QWORD *)(v182 + 16) = 0;
              *(_QWORD *)v182 = v15;
              v183 = *((_QWORD *)&v461 + 1);
              *((_QWORD *)&v461 + 1) = 0;
              *(_QWORD *)(v182 + 8) = v183;
              LODWORD(v183) = v462;
              LODWORD(v462) = 0;
              *(_DWORD *)(v182 + 16) = v183;
              LODWORD(v183) = DWORD1(v462);
              DWORD1(v462) = 0;
              *(_DWORD *)(v182 + 20) = v183;
              v180 = (_QWORD *)(v182 + 24);
              v181 = (uint64_t *)&v462 + 1;
            }
            v184 = *v181;
            *v181 = 0;
            *v180 = v184;
            ++DWORD1(v466);
            v185 = *((_QWORD *)&v462 + 1);
            *((_QWORD *)&v462 + 1) = 0;
            if (v185)
            {
              if (*(_DWORD *)(v185 + 24) == 2)
              {
                if ((*(_WORD *)(v185 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v185, v8);
              }
              else
              {
                *(_DWORD *)(v185 + 24) -= 2;
              }
            }
            WTF::Vector<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v461 + 8, v8);
            v187 = v461;
            *(_QWORD *)&v461 = 0;
            if (v187)
            {
              if (*(_DWORD *)(v187 + 24) == 2)
              {
                if ((*(_WORD *)(v187 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v187, v186);
              }
              else
              {
                *(_DWORD *)(v187 + 24) -= 2;
              }
            }
            WTF::Vector<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v469, v186);
          }
        }
      }
LABEL_388:
      v15 = *(_QWORD *)(v15 + 56);
      if (!v15)
        break;
      while ((*(_WORD *)(v15 + 28) & 0x10) == 0
           || *(_QWORD *)(*(_QWORD *)(v15 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::divTag + 24))
      {
        v15 = *(_QWORD *)(v15 + 56);
        if (!v15)
          goto LABEL_22;
      }
    }
  }
LABEL_22:
  v4 = this;
  if (*(_DWORD *)(a3 + 28) != DWORD1(v467))
    goto LABEL_229;
  v16 = *(unsigned int *)(a3 + 12);
  if (v16 != DWORD1(v466))
    goto LABEL_229;
  v17 = *(_DWORD *)(a3 + 44);
  if (v17 != HIDWORD(v468))
    goto LABEL_229;
  if (*(_DWORD *)(a3 + 12))
  {
    v18 = 0;
    v397 = this;
    while (1)
    {
      if (v18 >= DWORD1(v466))
      {
        __break(0xC471u);
        JUMPOUT(0x1959FE3B0);
      }
      v19 = *(_QWORD *)a3;
      v20 = *((_QWORD *)&v465 + 1) + 32 * v18;
      v404 = v18;
      if (*(_BYTE *)(*(_QWORD *)a3 + 56 * v18 + 48) != (*(_QWORD *)(v20 + 24) != 0))
        goto LABEL_229;
      v21 = v19 + 56 * v18 + 32;
      this = v20 + 8;
      v22 = *(_DWORD *)(v19 + 56 * v18 + 44);
      if (v22 != *(_DWORD *)(v20 + 20))
        goto LABEL_229;
      if (v22)
        break;
LABEL_93:
      v18 = v404 + 1;
      if (v404 + 1 >= v16)
      {
        v17 = *(_DWORD *)(a3 + 44);
        goto LABEL_95;
      }
    }
    v3 = 0;
LABEL_32:
    v23 = *(_QWORD *)(*(_QWORD *)v21 + 48 * v3);
    if (v23)
    {
      v24 = *(unsigned __int8 **)(v23 + 8);
      v6 = *(unsigned int *)(v23 + 4);
      v25 = ((unint64_t)*(unsigned int *)(v23 + 16) >> 2) & 1;
    }
    else
    {
      v24 = 0;
      v6 = 0;
      v25 = 1;
    }
    if (v3 >= *(unsigned int *)(this + 12))
    {
      __break(0xC471u);
      JUMPOUT(0x1959FE370);
    }
    WebCore::Node::textContent(*(WebCore::Node **)(*(_QWORD *)this + 8 * v3), 0, v9, (WTF::StringImpl **)&v461, v10);
    v26 = v416 & 0xFFFFFF0000000000;
    v27 = (WTF::StringImpl *)v461;
    if (!(_QWORD)v461)
    {
      v32 = 0;
      v29 = v26 | 0x100000000;
      v416 = v26 | 0x100000000;
      goto LABEL_54;
    }
    v413 = v6;
    v6 = *(_QWORD *)(v461 + 8);
    a3 = *(unsigned int *)(v461 + 4);
    v28 = ((unint64_t)*(unsigned int *)(v461 + 16) >> 2) & 1;
    v29 = v26 | (v28 << 32) | a3;
    v416 = v29;
    if ((_DWORD)v28)
    {
      if (!(_DWORD)a3)
        goto LABEL_51;
      v30 = 0;
      while (1)
      {
        v31 = *(unsigned __int8 *)(v6 + v30);
        if ((v31 - 9) >= 5 && v31 != 32)
          break;
        if (a3 == ++v30)
        {
          v29 = 0x100000000;
          v32 = "";
          goto LABEL_52;
        }
      }
      if ((_DWORD)a3 == 1)
      {
        if (!(_DWORD)v30)
          goto LABEL_51;
        LODWORD(v33) = 0;
      }
      else
      {
        v33 = (a3 - 1);
        do
        {
          if (v33 >= a3)
            goto LABEL_760;
          v34 = *(unsigned __int8 *)(v6 + v33);
          if ((v34 - 9) >= 5 && v34 != 32)
            break;
          --v33;
        }
        while ((_DWORD)v33);
        if (!(_DWORD)v30 && (_DWORD)v33 == (_DWORD)a3 - 1)
        {
LABEL_51:
          v32 = *(unsigned __int8 **)(v461 + 8);
LABEL_52:
          a3 = v402;
          goto LABEL_53;
        }
      }
      v44 = (v33 - v30 + 1);
      if (a3 - v30 < v44)
        goto LABEL_760;
      v32 = (unsigned __int8 *)(v6 + v30);
      v29 = v44 | 0x100000000;
      goto LABEL_52;
    }
    if (!(_DWORD)a3)
      goto LABEL_51;
    v408 = v24;
    v37 = 0;
    v38 = (a3 - 1);
    v32 = *(unsigned __int8 **)(v461 + 8);
    while (1)
    {
      v39 = *(unsigned __int16 *)v32;
      if (v39 > 0xFF)
      {
        v40 = v38;
        v41 = MEMORY[0x19AEA858C]();
        v38 = v40;
        v29 = v416;
        if (v41 != 9)
          goto LABEL_68;
      }
      else if (v39 - 9 >= 5 && v39 != 32)
      {
LABEL_68:
        if (!(_DWORD)v38)
        {
          if (!(_DWORD)v37)
            goto LABEL_79;
          LODWORD(v4) = 0;
LABEL_91:
          v29 = (v4 - (_DWORD)v37 + 1);
          v45 = a3 - (unint64_t)v37 >= v29;
          v4 = v397;
          a3 = v402;
          v24 = v408;
          v6 = v413;
          if (!v45)
            goto LABEL_760;
          goto LABEL_54;
        }
        v4 = v38;
        while (2)
        {
          if (v4 >= a3)
            goto LABEL_760;
          v42 = *(unsigned __int16 *)(v6 + 2 * v4);
          if (v42 > 0xFF)
          {
            v403 = v38;
            v43 = MEMORY[0x19AEA858C]();
            v38 = v403;
            v29 = v416;
            if (v43 != 9)
              break;
            goto LABEL_74;
          }
          if (v42 - 9 < 5 || v42 == 32)
          {
LABEL_74:
            if (!(_DWORD)--v4)
              break;
            continue;
          }
          break;
        }
        if ((_DWORD)v37 || (_DWORD)v4 != (_DWORD)v38)
          goto LABEL_91;
LABEL_79:
        v32 = (unsigned __int8 *)v6;
LABEL_80:
        v4 = v397;
        a3 = v402;
        v24 = v408;
LABEL_53:
        v6 = v413;
LABEL_54:
        v35 = WTF::operator==(v24, v6 | (v25 << 32), v32, v29);
        v36 = v35;
        if (v27)
        {
          if (*(_DWORD *)v27 != 2)
          {
            *(_DWORD *)v27 -= 2;
            goto LABEL_57;
          }
          WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v8);
          if (!v36)
            goto LABEL_229;
        }
        else
        {
LABEL_57:
          if (!v35)
            goto LABEL_229;
        }
        if (++v3 >= *(unsigned int *)(v21 + 12))
        {
          v16 = *(unsigned int *)(a3 + 12);
          goto LABEL_93;
        }
        goto LABEL_32;
      }
      v37 = (const WebCore::TextRecognitionResult *)((char *)v37 + 1);
      v32 += 2;
      if ((const WebCore::TextRecognitionResult *)a3 == v37)
      {
        v29 = 0x100000000;
        v32 = "";
        goto LABEL_80;
      }
    }
  }
LABEL_95:
  this = v4;
  if (!v17)
  {
    v51 = 1;
    goto LABEL_283;
  }
  v46 = 0;
  while (2)
  {
    WTF::String::split();
    if (v46 >= HIDWORD(v468))
    {
      __break(0xC471u);
      JUMPOUT(0x1959FE390);
    }
    v47 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v467 + 1) + 8 * v46) + 80);
    if (!v47)
      goto LABEL_101;
    while ((*(_WORD *)(v47 + 28) & 2) == 0)
    {
      v47 = *(_QWORD *)(v47 + 56);
      if (!v47)
        goto LABEL_101;
    }
    if (!HIDWORD(v461))
    {
      v4 = this;
      LOBYTE(v49) = 0;
      goto LABEL_104;
    }
    v4 = 0;
LABEL_110:
    v52 = v3 & 0xFFFFFF0000000000;
    v53 = *(_QWORD *)(v461 + 8 * v4);
    if (!v53)
    {
      v59 = 0;
      v3 = v52 | 0x100000000;
      goto LABEL_127;
    }
    v54 = *(unsigned __int8 **)(v53 + 8);
    v6 = *(unsigned int *)(v53 + 4);
    v55 = ((unint64_t)*(unsigned int *)(v53 + 16) >> 2) & 1;
    v56 = v52 | (v55 << 32);
    v3 = v56 | v6;
    if ((_DWORD)v55)
    {
      if (!(_DWORD)v6)
      {
LABEL_126:
        v59 = v54;
LABEL_127:
        v6 = v3;
        goto LABEL_128;
      }
      v57 = 0;
      while (1)
      {
        v58 = v54[v57];
        if ((v58 - 9) >= 5 && v58 != 32)
          break;
        if (v6 == ++v57)
        {
          v6 = 0x100000000;
          v59 = "";
          goto LABEL_128;
        }
      }
      if ((_DWORD)v6 == 1)
      {
        if (!(_DWORD)v57)
        {
          v59 = v54;
          v6 = v3;
LABEL_175:
          a3 = v402;
          goto LABEL_128;
        }
        LODWORD(v60) = 0;
      }
      else
      {
        v60 = (v6 - 1);
        do
        {
          if (v60 >= v6)
            goto LABEL_760;
          v61 = v54[v60];
          if ((v61 - 9) >= 5 && v61 != 32)
            break;
          --v60;
        }
        while ((_DWORD)v60);
        if (!(_DWORD)v57 && (_DWORD)v60 == (_DWORD)v6 - 1)
          goto LABEL_126;
      }
      v82 = (v60 - v57 + 1);
      if (v6 - v57 < v82)
        goto LABEL_760;
      v59 = &v54[v57];
      v6 = v82 | 0x100000000;
      goto LABEL_175;
    }
    if (!(_DWORD)v6)
      goto LABEL_126;
    v416 = v56 | v6;
    a3 = this;
    this = 0;
    v3 = (v6 - 1);
    v59 = v54;
    while (1)
    {
      v71 = *(unsigned __int16 *)v59;
      if (v71 <= 0xFF)
        break;
      if (MEMORY[0x19AEA858C]() != 9)
        goto LABEL_163;
LABEL_160:
      ++this;
      v59 += 2;
      if (v6 == this)
      {
        v6 = 0x100000000;
        v59 = "";
        this = a3;
        a3 = v402;
        v3 = v416;
        goto LABEL_128;
      }
    }
    if (v71 - 9 < 5 || v71 == 32)
      goto LABEL_160;
LABEL_163:
    if ((_DWORD)v6 == 1)
    {
      if (!(_DWORD)this)
        goto LABEL_174;
      LODWORD(v72) = 0;
      goto LABEL_208;
    }
    v72 = (v6 - 1);
    while (2)
    {
      if (v72 >= v6)
        goto LABEL_760;
      v73 = *(unsigned __int16 *)&v54[2 * v72];
      if (v73 > 0xFF)
      {
        if (MEMORY[0x19AEA858C]() != 9)
          break;
        goto LABEL_169;
      }
      if (v73 - 9 < 5 || v73 == 32)
      {
LABEL_169:
        if (!(_DWORD)--v72)
          break;
        continue;
      }
      break;
    }
    if (!(_DWORD)this && (_DWORD)v72 == (_DWORD)v3)
    {
LABEL_174:
      v59 = v54;
      v3 = v416;
      v6 = v416;
      this = a3;
      goto LABEL_175;
    }
LABEL_208:
    v81 = v6 - this;
    v6 = (v72 - this + 1);
    this = a3;
    a3 = v402;
    v3 = v416;
    if (v81 < v6)
      goto LABEL_760;
LABEL_128:
    WebCore::Text::wholeText((WebCore::Text *)v47, (WTF::StringImpl *)v8, (WTF::StringImpl **)&v469);
    v62 = v413 & 0xFFFFFF0000000000;
    if (!v469)
    {
      v67 = 0;
      v64 = v62 | 0x100000000;
      v413 = v62 | 0x100000000;
      goto LABEL_147;
    }
    v409 = v6;
    v416 = v3;
    v3 = this;
    v6 = *((_QWORD *)v469 + 1);
    this = v469[1];
    v63 = ((unint64_t)v469[4] >> 2) & 1;
    v64 = v62 | (v63 << 32) | this;
    v413 = v64;
    if (!(_DWORD)v63)
    {
      if (!(_DWORD)this)
      {
LABEL_144:
        v67 = (unsigned __int8 *)*((_QWORD *)v469 + 1);
LABEL_145:
        this = v3;
        goto LABEL_146;
      }
      a3 = 0;
      v74 = (this - 1);
      v67 = (unsigned __int8 *)*((_QWORD *)v469 + 1);
      while (1)
      {
        v75 = *(unsigned __int16 *)v67;
        if (v75 > 0xFF)
        {
          v405 = v74;
          v76 = MEMORY[0x19AEA858C]();
          v74 = v405;
          v64 = v413;
          if (v76 != 9)
            goto LABEL_184;
        }
        else if (v75 - 9 >= 5 && v75 != 32)
        {
LABEL_184:
          if (!(_DWORD)v74)
          {
            if ((_DWORD)a3)
            {
              LODWORD(v77) = 0;
LABEL_213:
              v64 = (v77 - a3 + 1);
              v45 = this - a3 >= v64;
              this = v3;
              a3 = v402;
              v3 = v416;
              v6 = v409;
              if (!v45)
                goto LABEL_760;
              goto LABEL_147;
            }
LABEL_211:
            v67 = (unsigned __int8 *)v6;
            v64 = v413;
            goto LABEL_196;
          }
          v77 = v74;
          while (v77 < this)
          {
            v78 = *(unsigned __int16 *)(v6 + 2 * v77);
            if (v78 > 0xFF)
            {
              v406 = v74;
              v79 = MEMORY[0x19AEA858C]();
              v74 = v406;
              v64 = v413;
              if (v79 != 9)
                goto LABEL_193;
            }
            else if (v78 - 9 >= 5 && v78 != 32)
            {
LABEL_193:
              if (!(_DWORD)a3 && (_DWORD)v77 == (_DWORD)v74)
              {
                v67 = (unsigned __int8 *)v6;
                goto LABEL_196;
              }
              goto LABEL_213;
            }
            if (!(_DWORD)--v77)
              goto LABEL_193;
          }
LABEL_760:
          __break(1u);
LABEL_761:
          v13 = 0;
          goto LABEL_15;
        }
        ++a3;
        v67 += 2;
        if (this == a3)
        {
          v64 = 0x100000000;
          v67 = "";
          this = v3;
          a3 = v402;
          goto LABEL_146;
        }
      }
    }
    if (!(_DWORD)this)
      goto LABEL_144;
    v65 = 0;
    while (1)
    {
      v66 = *(unsigned __int8 *)(v6 + v65);
      if ((v66 - 9) >= 5 && v66 != 32)
        break;
      if (this == ++v65)
      {
        v64 = 0x100000000;
        v67 = "";
        goto LABEL_145;
      }
    }
    if ((_DWORD)this != 1)
    {
      v68 = (this - 1);
      while (v68 < this)
      {
        v69 = *(unsigned __int8 *)(v6 + v68);
        if ((v69 - 9) < 5 || v69 == 32)
        {
          if ((_DWORD)--v68)
            continue;
        }
        if ((_DWORD)v65 || (_DWORD)v68 != (_DWORD)this - 1)
          goto LABEL_204;
        goto LABEL_144;
      }
      goto LABEL_760;
    }
    if (!(_DWORD)v65)
      goto LABEL_211;
    LODWORD(v68) = 0;
LABEL_204:
    v80 = (v68 - v65 + 1);
    if (this - v65 < v80)
      goto LABEL_760;
    v67 = (unsigned __int8 *)(v6 + v65);
    v64 = v80 | 0x100000000;
LABEL_196:
    this = v3;
    a3 = v402;
LABEL_146:
    v3 = v416;
    v6 = v409;
LABEL_147:
    v49 = WTF::operator==(v59, v6, v67, v64);
    v70 = (WTF::StringImpl *)v469;
    v469 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
        WTF::StringImpl::destroy(v70, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v70 -= 2;
    }
    ++v4;
    if (v49)
    {
      while (1)
      {
        v47 = *(_QWORD *)(v47 + 56);
        if (!v47)
          break;
        if ((*(_WORD *)(v47 + 28) & 2) != 0)
        {
          LOBYTE(v49) = 0;
          v48 = HIDWORD(v461);
          if (v4 < HIDWORD(v461))
            goto LABEL_110;
          goto LABEL_102;
        }
      }
LABEL_101:
      v48 = HIDWORD(v461);
      LOBYTE(v49) = 1;
    }
    else
    {
      v48 = HIDWORD(v461);
    }
LABEL_102:
    if (v48)
    {
      v83 = (WTF::StringImpl **)v461;
      v84 = 8 * v48;
      do
      {
        v85 = *v83;
        *v83 = 0;
        if (v85)
        {
          if (*(_DWORD *)v85 == 2)
            WTF::StringImpl::destroy(v85, (WTF::StringImpl *)v8);
          else
            *(_DWORD *)v85 -= 2;
        }
        ++v83;
        v84 -= 8;
      }
      while (v84);
    }
    v4 = this;
LABEL_104:
    v50 = (WTF *)v461;
    if ((_QWORD)v461)
    {
      *(_QWORD *)&v461 = 0;
      DWORD2(v461) = 0;
      WTF::fastFree(v50, v8);
      if (!v49)
        goto LABEL_229;
LABEL_106:
      ++v46;
      v51 = 1;
      this = v4;
      if (v46 >= *(unsigned int *)(a3 + 44))
        goto LABEL_283;
      continue;
    }
    break;
  }
  if (v49)
    goto LABEL_106;
LABEL_229:
  WebCore::ContainerNode::removeChildren(v465);
  v87 = v465;
  if ((_QWORD)v465)
  {
    *(_DWORD *)(v465 + 24) += 2;
    v464 = 0;
    v462 = 0u;
    v463 = 0u;
    v461 = 0u;
    if (*(_DWORD *)(v87 + 24) == 2)
    {
      if ((*(_WORD *)(v87 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v87, v86);
    }
    else
    {
      *(_DWORD *)(v87 + 24) -= 2;
    }
  }
  else
  {
    v464 = 0;
    v462 = 0u;
    v463 = 0u;
    v461 = 0u;
  }
  this = v4;
  if (DWORD1(v466))
  {
    v88 = (uint64_t *)*((_QWORD *)&v465 + 1);
    v89 = *((_QWORD *)&v465 + 1) + 32 * DWORD1(v466);
    do
    {
      v90 = v88[3];
      v88[3] = 0;
      if (v90)
      {
        if (*(_DWORD *)(v90 + 24) == 2)
        {
          if ((*(_WORD *)(v90 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v90, v86);
        }
        else
        {
          *(_DWORD *)(v90 + 24) -= 2;
        }
      }
      v91 = *((unsigned int *)v88 + 5);
      if ((_DWORD)v91)
      {
        v94 = (uint64_t *)v88[1];
        v95 = 8 * v91;
        do
        {
          v96 = *v94;
          *v94 = 0;
          if (v96)
          {
            if (*(_DWORD *)(v96 + 24) == 2)
            {
              if ((*(_WORD *)(v96 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v96, v86);
            }
            else
            {
              *(_DWORD *)(v96 + 24) -= 2;
            }
          }
          ++v94;
          v95 -= 8;
        }
        while (v95);
      }
      v92 = (WTF *)v88[1];
      if (v92)
      {
        v88[1] = 0;
        *((_DWORD *)v88 + 4) = 0;
        WTF::fastFree(v92, v86);
      }
      v93 = *v88;
      *v88 = 0;
      if (v93)
      {
        if (*(_DWORD *)(v93 + 24) == 2)
        {
          if ((*(_WORD *)(v93 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v93, v86);
        }
        else
        {
          *(_DWORD *)(v93 + 24) -= 2;
        }
      }
      v88 += 4;
    }
    while (v88 != (uint64_t *)v89);
  }
  v97 = (WTF *)*((_QWORD *)&v465 + 1);
  if (*((_QWORD *)&v465 + 1))
  {
    *((_QWORD *)&v465 + 1) = 0;
    LODWORD(v466) = 0;
    WTF::fastFree(v97, v86);
  }
  *((_QWORD *)&v465 + 1) = *((_QWORD *)&v461 + 1);
  v98 = v462;
  *((_QWORD *)&v461 + 1) = 0;
  *(_QWORD *)&v462 = 0;
  *(_QWORD *)&v466 = v98;
  if (DWORD1(v467))
  {
    v99 = (uint64_t *)*((_QWORD *)&v466 + 1);
    v100 = 8 * DWORD1(v467);
    do
    {
      v101 = *v99;
      *v99 = 0;
      if (v101)
      {
        if (*(_DWORD *)(v101 + 24) == 2)
        {
          if ((*(_WORD *)(v101 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v101, v86);
        }
        else
        {
          *(_DWORD *)(v101 + 24) -= 2;
        }
      }
      ++v99;
      v100 -= 8;
    }
    while (v100);
  }
  v102 = (WTF *)*((_QWORD *)&v466 + 1);
  if (*((_QWORD *)&v466 + 1))
  {
    *((_QWORD *)&v466 + 1) = 0;
    LODWORD(v467) = 0;
    WTF::fastFree(v102, v86);
  }
  *((_QWORD *)&v466 + 1) = *((_QWORD *)&v462 + 1);
  v103 = v463;
  *((_QWORD *)&v462 + 1) = 0;
  *(_QWORD *)&v463 = 0;
  *(_QWORD *)&v467 = v103;
  if (HIDWORD(v468))
  {
    v104 = (uint64_t *)*((_QWORD *)&v467 + 1);
    v105 = 8 * HIDWORD(v468);
    do
    {
      v106 = *v104;
      *v104 = 0;
      if (v106)
      {
        if (*(_DWORD *)(v106 + 24) == 2)
        {
          if ((*(_WORD *)(v106 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v106, v86);
        }
        else
        {
          *(_DWORD *)(v106 + 24) -= 2;
        }
      }
      ++v104;
      v105 -= 8;
    }
    while (v105);
  }
  v107 = (WTF *)*((_QWORD *)&v467 + 1);
  if (*((_QWORD *)&v467 + 1))
  {
    *((_QWORD *)&v467 + 1) = 0;
    LODWORD(v468) = 0;
    WTF::fastFree(v107, v86);
  }
  *((_QWORD *)&v467 + 1) = *((_QWORD *)&v463 + 1);
  v108 = v464;
  *((_QWORD *)&v463 + 1) = 0;
  v464 = 0;
  v468 = v108;
  WebCore::ImageOverlay::Elements::~Elements((WebCore::ImageOverlay::Elements *)&v461, v86);
LABEL_282:
  v51 = 0;
LABEL_283:
  if (!*(_DWORD *)(a3 + 12) && !*(_DWORD *)(a3 + 28) && !*(_DWORD *)(a3 + 44))
  {
    *(_QWORD *)(this + 48) = 0;
    *(_OWORD *)(this + 16) = 0u;
    *(_OWORD *)(this + 32) = 0u;
    *(_OWORD *)this = 0u;
    v109 = v401;
    goto LABEL_729;
  }
  v398 = this;
  v110 = *(_QWORD *)(*((_QWORD *)v411 + 5) + 8);
  *(_DWORD *)(v110 + 24) += 2;
  v396 = (WebCore::ContainerNode *)WebCore::Element::ensureUserAgentShadowRoot(v411);
  *((_DWORD *)v396 + 6) += 2;
  if ((v51 & 1) == 0)
  {
    if (!(_QWORD)v465)
    {
      v111 = bmalloc::api::isoAllocate();
      v112 = v111;
      *(_OWORD *)(v111 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v111 + 24) = 0x101C00000002;
      *(_QWORD *)(v111 + 32) = 0;
      *(_QWORD *)(v111 + 40) = v110 + 96;
      *(_OWORD *)(v111 + 48) = 0u;
      *(_OWORD *)(v111 + 64) = 0u;
      ++*(_DWORD *)(v110 + 3324);
      *(_QWORD *)(v111 + 80) = 0;
      *(_QWORD *)(v111 + 88) = 0;
      v113 = WebCore::HTMLNames::divTag;
      if (WebCore::HTMLNames::divTag)
        ++*(_DWORD *)WebCore::HTMLNames::divTag;
      *(_QWORD *)(v111 + 96) = v113;
      *(_QWORD *)(v111 + 104) = 0;
      *(_QWORD *)v111 = off_1E33B9CC0;
      v114 = (uint64_t)v401;
      {
        v115 = 0xFFFFFFFFLL;
      }
      else
      {
        WTF::AtomStringImpl::add();
        WebCore::ImageOverlay::imageOverlayElementIdentifier(void)::identifier = v461;
        v390 = *(_QWORD *)(v112 + 104);
        if (v390
          && ((v391 = *(_DWORD *)(v390 + 4), (v391 & 1) != 0)
            ? (v392 = *(uint64_t **)(v390 + 40), v393 = *(_DWORD *)(v390 + 52))
            : (v392 = (uint64_t *)(v390 + 32), v393 = v391 >> 5),
              v393))
        {
          v394 = 0;
          v115 = 0xFFFFFFFFLL;
          v114 = (uint64_t)v401;
          a3 = v402;
          while (1)
          {
            v395 = *v392;
            if (*v392 == WebCore::HTMLNames::idAttr
              || *(_QWORD *)(v395 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
              && *(_QWORD *)(v395 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
            {
              break;
            }
            ++v394;
            v392 += 2;
            if (v393 == v394)
              goto LABEL_293;
          }
          v115 = v394;
        }
        else
        {
          v115 = 0xFFFFFFFFLL;
        }
        v114 = (uint64_t)v401;
        a3 = v402;
      }
LABEL_293:
      WebCore::Element::setAttributeInternal((WTF::StringImpl *)v112, v115, (WebCore::TreeScope *)&WebCore::HTMLNames::idAttr, (WTF::StringImpl **)&WebCore::ImageOverlay::imageOverlayElementIdentifier(void)::identifier, 0);
      WebCore::HTMLElement::setTranslate((WebCore::HTMLElement *)v112);
      if ((*(_WORD *)(v110 + 3358) & 4) != 0)
      {
        v117 = WebCore::StyledElement::ensureMutableInlineStyle((WebCore::StyledElement *)v112, v116);
        WebCore::staticCSSValuePool[4700] += 2;
        *(_QWORD *)&v461 = &WebCore::staticCSSValuePool[4700];
        WebCore::MutableStyleProperties::setProperty(v117, 349, (_DWORD **)&v461, 0);
        v122 = (_DWORD *)v461;
        *(_QWORD *)&v461 = 0;
        if (v122)
        {
          if (*v122 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v122, v118);
          else
            *v122 -= 2;
        }
        WebCore::StyledElement::inlineStyleChanged((WebCore::StyledElement *)v112, (uint64_t)v118, v119, v120, v121);
      }
      if (v114)
      {
        WebCore::ContainerNode::appendChild(v114, (WebCore::Node *)v112, (uint64_t)v458);
        if (!v460)
          goto LABEL_429;
        v195 = v459;
        v459 = 0;
        if (!v195)
          goto LABEL_429;
LABEL_427:
        if (*(_DWORD *)v195 == 2)
          WTF::StringImpl::destroy(v195, (WTF::StringImpl *)v8);
        else
          *(_DWORD *)v195 -= 2;
        goto LABEL_429;
      }
      WebCore::ContainerNode::appendChild((uint64_t)v396, (WebCore::Node *)v112, (uint64_t)v455);
      if (v457)
      {
        v195 = v456;
        v456 = 0;
        if (v195)
          goto LABEL_427;
      }
LABEL_429:
      *(_DWORD *)(v112 + 24) += 2;
      v196 = v465;
      *(_QWORD *)&v465 = v112;
      if (v196)
      {
        if (*(_DWORD *)(v196 + 24) == 2)
        {
          if ((*(_WORD *)(v196 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v196, v8);
        }
        else
        {
          *(_DWORD *)(v196 + 24) -= 2;
        }
      }
      if (*(_DWORD *)(v112 + 24) == 2)
      {
        if ((*(_WORD *)(v112 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v112, v8);
      }
      else
      {
        *(_DWORD *)(v112 + 24) -= 2;
      }
    }
    v197 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v197)
    {
      if (v197 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x1959FE398);
      }
      v198 = WTF::fastMalloc((WTF *)(32 * v197));
      LODWORD(v466) = v197;
      *((_QWORD *)&v465 + 1) = v198;
      v199 = *(_DWORD *)(v402 + 12);
      if (v199)
      {
        v200 = *(_QWORD *)v402;
        v407 = *(_QWORD *)v402 + 56 * v199;
        v414 = v110 + 96;
        v417 = xmmword_1968BC9D0;
        while (1)
        {
          v201 = bmalloc::api::isoAllocate();
          v202 = v201;
          *(_OWORD *)(v201 + 8) = xmmword_1968BC9D0;
          *(_QWORD *)(v201 + 24) = 0x101C00000002;
          *(_QWORD *)(v201 + 32) = 0;
          *(_QWORD *)(v201 + 40) = v414;
          *(_OWORD *)(v201 + 48) = 0u;
          *(_OWORD *)(v201 + 64) = 0u;
          ++*(_DWORD *)(v110 + 3324);
          *(_QWORD *)(v201 + 80) = 0;
          *(_QWORD *)(v201 + 88) = 0;
          v203 = WebCore::HTMLNames::divTag;
          if (WebCore::HTMLNames::divTag)
            ++*(_DWORD *)WebCore::HTMLNames::divTag;
          *(_QWORD *)(v201 + 96) = v203;
          *(_QWORD *)(v201 + 104) = 0;
          *(_QWORD *)v201 = off_1E33B9CC0;
          v205 = (WTF *)WebCore::Element::classList((WebCore::Element *)v201);
          if ((byte_1ECE831B2 & 1) == 0)
          {
            WTF::AtomStringImpl::add();
            qword_1ECE831C8 = v461;
            byte_1ECE831B2 = 1;
          }
          WebCore::DOMTokenList::addInternal(v205, &qword_1ECE831C8, 1uLL, v204, &v452, v206);
          if (v454)
          {
            v208 = v453;
            v453 = 0;
            if (v208)
            {
              if (*(_DWORD *)v208 == 2)
                WTF::StringImpl::destroy(v208, v207);
              else
                *(_DWORD *)v208 -= 2;
            }
          }
          WebCore::ContainerNode::appendChild(v465, (WebCore::Node *)v202, (uint64_t)v449);
          if (v451)
          {
            v210 = v450;
            v450 = 0;
            if (v210)
            {
              if (*(_DWORD *)v210 == 2)
                WTF::StringImpl::destroy(v210, v209);
              else
                *(_DWORD *)v210 -= 2;
            }
          }
          *(_DWORD *)(v202 + 24) += 2;
          v461 = (unint64_t)v202;
          v462 = 0uLL;
          v211 = *(unsigned int *)(v200 + 44);
          if ((_DWORD)v211)
          {
            if (v211 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1959FE368);
            }
            v212 = WTF::fastMalloc((WTF *)(8 * v211));
            LODWORD(v462) = v211;
            *((_QWORD *)&v461 + 1) = v212;
            if (*(_DWORD *)(v200 + 44))
              break;
          }
LABEL_570:
          if (*(_BYTE *)(v200 + 48))
          {
            v279 = bmalloc::api::isoAllocate();
            v280 = v279;
            *(_OWORD *)(v279 + 8) = xmmword_1968BC9D0;
            *(_QWORD *)(v279 + 24) = 0x101C00000002;
            *(_QWORD *)(v279 + 32) = 0;
            *(_QWORD *)(v279 + 40) = v414;
            *(_OWORD *)(v279 + 48) = 0u;
            *(_OWORD *)(v279 + 64) = 0u;
            ++*(_DWORD *)(v110 + 3324);
            *(_QWORD *)(v279 + 80) = 0;
            *(_QWORD *)(v279 + 88) = 0;
            v281 = WebCore::HTMLNames::brTag;
            if (WebCore::HTMLNames::brTag)
              ++*(_DWORD *)WebCore::HTMLNames::brTag;
            *(_QWORD *)(v279 + 96) = v281;
            *(_QWORD *)(v279 + 104) = 0;
            *(_QWORD *)v279 = off_1E33B4C28;
            WebCore::ContainerNode::appendChild(v202, (WebCore::Node *)v279, (uint64_t)v437);
            if (v439)
            {
              v282 = v438;
              v438 = 0;
              if (v282)
              {
                if (*(_DWORD *)v282 == 2)
                  WTF::StringImpl::destroy(v282, v209);
                else
                  *(_DWORD *)v282 -= 2;
              }
            }
            v283 = *((_QWORD *)&v462 + 1);
            *((_QWORD *)&v462 + 1) = v280;
            if (v283)
            {
              if (*(_DWORD *)(v283 + 24) == 2)
              {
                if ((*(_WORD *)(v283 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v283, v209);
              }
              else
              {
                *(_DWORD *)(v283 + 24) -= 2;
              }
            }
          }
          if (DWORD1(v466) == (_DWORD)v466)
          {
            v284 = WTF::Vector<WebCore::ImageOverlay::LineElements,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v465 + 8, DWORD1(v466) + 1, (unint64_t)&v461);
            v285 = *((_QWORD *)&v465 + 1) + 32 * DWORD1(v466);
            v286 = *(_QWORD *)v284;
            *(_QWORD *)v284 = 0;
            *(_QWORD *)(v285 + 8) = 0;
            *(_QWORD *)(v285 + 16) = 0;
            *(_QWORD *)v285 = v286;
            v287 = *((_QWORD *)v284 + 1);
            *((_QWORD *)v284 + 1) = 0;
            *(_QWORD *)(v285 + 8) = v287;
            LODWORD(v287) = v284[4];
            v284[4] = 0;
            *(_DWORD *)(v285 + 16) = v287;
            LODWORD(v287) = v284[5];
            v284[5] = 0;
            *(_DWORD *)(v285 + 20) = v287;
            v288 = (_QWORD *)(v285 + 24);
            v289 = (uint64_t *)(v284 + 6);
          }
          else
          {
            v290 = *((_QWORD *)&v465 + 1) + 32 * DWORD1(v466);
            v291 = v461;
            *(_QWORD *)&v461 = 0;
            *(_QWORD *)(v290 + 8) = 0;
            *(_QWORD *)(v290 + 16) = 0;
            *(_QWORD *)v290 = v291;
            v292 = *((_QWORD *)&v461 + 1);
            *((_QWORD *)&v461 + 1) = 0;
            *(_QWORD *)(v290 + 8) = v292;
            LODWORD(v292) = v462;
            LODWORD(v462) = 0;
            *(_DWORD *)(v290 + 16) = v292;
            LODWORD(v292) = DWORD1(v462);
            DWORD1(v462) = 0;
            *(_DWORD *)(v290 + 20) = v292;
            v288 = (_QWORD *)(v290 + 24);
            v289 = (uint64_t *)&v462 + 1;
          }
          v293 = *v289;
          *v289 = 0;
          *v288 = v293;
          ++DWORD1(v466);
          v294 = *((_QWORD *)&v462 + 1);
          *((_QWORD *)&v462 + 1) = 0;
          if (v294)
          {
            if (*(_DWORD *)(v294 + 24) == 2)
            {
              if ((*(_WORD *)(v294 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v294, v209);
            }
            else
            {
              *(_DWORD *)(v294 + 24) -= 2;
            }
          }
          WTF::Vector<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v461 + 8, v209);
          v295 = v461;
          *(_QWORD *)&v461 = 0;
          if (v295)
          {
            if (*(_DWORD *)(v295 + 24) == 2)
            {
              if ((*(_WORD *)(v295 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v295, v8);
            }
            else
            {
              *(_DWORD *)(v295 + 24) -= 2;
            }
          }
          if (*(_DWORD *)(v202 + 24) == 2)
          {
            if ((*(_WORD *)(v202 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v202, v8);
          }
          else
          {
            *(_DWORD *)(v202 + 24) -= 2;
          }
          v200 += 56;
          if (v200 == v407)
            goto LABEL_604;
        }
        v213 = 0;
        v410 = v200;
        while (2)
        {
          v214 = *(_QWORD *)(v200 + 32);
          v215 = bmalloc::api::isoAllocate();
          v216 = (WebCore::Node *)v215;
          *(_OWORD *)(v215 + 8) = xmmword_1968BC9D0;
          *(_QWORD *)(v215 + 24) = 0x101C00000002;
          *(_QWORD *)(v215 + 32) = 0;
          *(_QWORD *)(v215 + 40) = v414;
          *(_OWORD *)(v215 + 48) = 0u;
          *(_OWORD *)(v215 + 64) = 0u;
          ++*(_DWORD *)(v110 + 3324);
          *(_QWORD *)(v215 + 80) = 0;
          *(_QWORD *)(v215 + 88) = 0;
          v217 = WebCore::HTMLNames::divTag;
          if (WebCore::HTMLNames::divTag)
            ++*(_DWORD *)WebCore::HTMLNames::divTag;
          *(_QWORD *)(v215 + 96) = v217;
          *(_QWORD *)(v215 + 104) = 0;
          *(_QWORD *)v215 = off_1E33B9CC0;
          v220 = WTF::fastCompactMalloc((WTF *)0x100);
          *(_QWORD *)(v220 + 8) = 0;
          *(_QWORD *)(v220 + 16) = 0;
          *(_QWORD *)v220 = 0;
          *(_BYTE *)(v220 + 24) = 1;
          *(_DWORD *)(v220 + 36) = 0;
          *(_DWORD *)(v220 + 40) = 0;
          *(_QWORD *)(v220 + 25) = 0;
          *(_BYTE *)(v220 + 33) = 0;
          v221 = (__n128)v417;
          *(_OWORD *)(v220 + 48) = 0u;
          *(_OWORD *)(v220 + 64) = 0u;
          *(_OWORD *)(v220 + 80) = 0u;
          *(_OWORD *)(v220 + 96) = 0u;
          *(_OWORD *)(v220 + 112) = 0u;
          *(_OWORD *)(v220 + 128) = 0u;
          *(_QWORD *)(v220 + 144) = 0x3F0000003FLL;
          *(_OWORD *)(v220 + 152) = 0u;
          *(_OWORD *)(v220 + 168) = 0u;
          *(_OWORD *)(v220 + 184) = 0u;
          *(_OWORD *)(v220 + 200) = 0u;
          *(_OWORD *)(v220 + 216) = 0u;
          *(_OWORD *)(v220 + 232) = 0u;
          *(_BYTE *)(v220 + 248) = 0;
          v222 = *((_QWORD *)v216 + 9);
          v223 = (WebCore::ElementRareData *)(v222 & 0xFFFFFFFFFFFFLL);
          if ((v222 & 0xFFFFFFFFFFFFLL) != 0)
          {
            if (*(_BYTE *)((v222 & 0xFFFFFFFFFFFFLL) + 0x18))
              WebCore::ElementRareData::~ElementRareData(v223, v218);
            else
              std::__destroy_at[abi:sn180100]<WebCore::NodeRareData,0>((uint64_t)v223, v218);
            WTF::fastFree(v223, v254);
            v222 = *((_QWORD *)v216 + 9);
          }
          *((_QWORD *)v216 + 9) = v222 & 0xFFFF000000000000 | v220;
          v224 = v220 & 0xFFFFFFFFFFFFLL;
          v225 = *(WTF **)((v220 & 0xFFFFFFFFFFFFLL) + 0x50);
          if (!v225)
          {
            v239 = WTF::fastMalloc((WTF *)0x38);
            *(_QWORD *)v239 = v216;
            *(_QWORD *)(v239 + 8) = &WebCore::HTMLNames::classAttr;
            *(_WORD *)(v239 + 16) = 256;
            *(_QWORD *)(v239 + 24) = v239 + 40;
            *(_QWORD *)(v239 + 32) = 1;
            *(_QWORD *)(v239 + 48) = 0;
            v241 = *(_QWORD *)((v220 & 0xFFFFFFFFFFFFLL) + 0x50);
            *(_QWORD *)(v224 + 80) = v239;
            if (v241)
            {
              v242 = v202;
              v243 = v4;
              v244 = *(_QWORD *)(v241 + 48);
              *(_QWORD *)(v241 + 48) = 0;
              if (v244)
                (*(void (**)(uint64_t))(*(_QWORD *)v244 + 8))(v244);
              v245 = *(unsigned int *)(v241 + 36);
              if ((_DWORD)v245)
              {
                v246 = *(WTF::StringImpl ***)(v241 + 24);
                v247 = 8 * v245;
                do
                {
                  v248 = *v246;
                  *v246 = 0;
                  if (v248)
                  {
                    if (*(_DWORD *)v248 == 2)
                      WTF::StringImpl::destroy(v248, v240);
                    else
                      *(_DWORD *)v248 -= 2;
                  }
                  ++v246;
                  v247 -= 8;
                }
                while (v247);
              }
              v249 = *(WTF **)(v241 + 24);
              if ((WTF *)(v241 + 40) != v249 && v249 != 0)
              {
                *(_QWORD *)(v241 + 24) = 0;
                *(_DWORD *)(v241 + 32) = 0;
                WTF::fastFree(v249, v240);
              }
              WTF::fastFree((WTF *)v241, v240);
              v225 = *(WTF **)(v224 + 80);
              v4 = v243;
              v202 = v242;
              v200 = v410;
            }
            else
            {
              v225 = (WTF *)v239;
            }
          }
          if ((byte_1ECE831B3 & 1) == 0)
          {
            WTF::AtomStringImpl::add();
            qword_1ECE831D0 = (uint64_t)v469;
            byte_1ECE831B3 = 1;
          }
          WebCore::DOMTokenList::addInternal(v225, &qword_1ECE831D0, 1uLL, v219, &v446, v221);
          if (v448)
          {
            v227 = v447;
            v447 = 0;
            if (v227)
            {
              if (*(_DWORD *)v227 == 2)
                WTF::StringImpl::destroy(v227, v226);
              else
                *(_DWORD *)v227 -= 2;
            }
          }
          WebCore::ContainerNode::appendChild(v202, v216, (uint64_t)v443);
          if (v445)
          {
            v229 = v444;
            v444 = 0;
            if (v229)
            {
              if (*(_DWORD *)v229 == 2)
                WTF::StringImpl::destroy(v229, v228);
              else
                *(_DWORD *)v229 -= 2;
            }
          }
          v230 = v214 + 48 * v213;
          v231 = *(unsigned __int8 *)(v230 + 40);
          v232 = *(_QWORD *)v230;
          if (!*(_BYTE *)(v230 + 40))
          {
            if (v232)
            {
              *(_DWORD *)v232 += 2;
              v235 = (int *)v232;
            }
            else
            {
              v235 = 0;
            }
            v232 = v4;
            goto LABEL_519;
          }
          if (v232)
          {
            v233 = *(_DWORD *)(v232 + 4);
            *(_DWORD *)v232 += 2;
            if (v233 < 0 || (v234 = (v233 + 1), __OFADD__(v233, 1)))
            {
LABEL_835:
              __break(0xC471u);
              JUMPOUT(0x1959FE2DCLL);
            }
            if ((*(_BYTE *)(v232 + 16) & 4) == 0)
            {
              if (v234 > 0x7FFFFFEF)
                goto LABEL_835;
              WTF::tryFastCompactMalloc((WTF *)(2 * v234 + 20));
              v235 = v469;
              if (!v469)
                goto LABEL_835;
              *v469 = 2;
              v235[1] = v234;
              *((_WORD *)v235 + 10) = 10;
              *((_QWORD *)v235 + 1) = v235 + 5;
              v235[4] = 0;
              v236 = (_WORD *)v235 + 11;
              v237 = *(_OWORD **)(v232 + 8);
              v238 = *(unsigned int *)(v232 + 4);
              if ((*(_BYTE *)(v232 + 16) & 4) == 0)
              {
                if ((_DWORD)v238 == 1)
                {
                  *v236 = *(_WORD *)v237;
                  goto LABEL_519;
                }
                if (!(_DWORD)v238)
                  goto LABEL_519;
                v255 = 2 * v238;
LABEL_518:
                memcpy(v236, v237, v255);
                goto LABEL_519;
              }
              if (v238 >= 0x40)
              {
                v251 = (char *)&v236[v238 & 0xFFFFFFC0];
                v267 = (char *)v235 + 22;
                v268 = 0u;
                do
                {
                  v472.val[0] = (int8x16_t)*v237;
                  v269 = *((int8x16_t *)v237 + 1);
                  v473.val[0] = (int8x16_t)v237[2];
                  v270 = v237[3];
                  v237 += 4;
                  v271 = v270;
                  v473.val[1] = 0u;
                  v474.val[0] = v269;
                  v472.val[1] = 0u;
                  v272 = v267;
                  vst2q_s8(v272, v472);
                  v272 += 32;
                  v474.val[1] = 0u;
                  vst2q_s8(v272, v474);
                  v273 = v267 + 64;
                  vst2q_s8(v273, v473);
                  v274 = v267 + 96;
                  vst2q_s8(v274, *(int8x16x2_t *)(&v268 - 1));
                  v267 += 128;
                }
                while (v267 != v251);
                v417 = v271;
              }
              else
              {
                v251 = (char *)v235 + 22;
              }
              v252 = (char *)&v236[v238];
              while (v251 != v252)
              {
                v253 = *(unsigned __int8 *)v237;
                v237 = (_OWORD *)((char *)v237 + 1);
                *(_WORD *)v251 = v253;
                v251 += 2;
              }
              goto LABEL_519;
            }
          }
          else
          {
            v234 = 1;
          }
          WTF::tryFastCompactMalloc((WTF *)(v234 + 20));
          v235 = v469;
          if (!v469)
            goto LABEL_835;
          *v469 = 2;
          v235[1] = v234;
          *((_BYTE *)v235 + 20) = 10;
          *((_QWORD *)v235 + 1) = v235 + 5;
          v235[4] = 4;
          if (v232)
          {
            v236 = (_WORD *)((char *)v235 + 21);
            v237 = *(_OWORD **)(v232 + 8);
            v255 = *(unsigned int *)(v232 + 4);
            if ((*(_BYTE *)(v232 + 16) & 4) != 0)
            {
              if (!(_DWORD)v255)
                goto LABEL_519;
              if ((_DWORD)v255 == 1)
              {
                *(_BYTE *)v236 = *(_BYTE *)v237;
                goto LABEL_519;
              }
              goto LABEL_518;
            }
            if (v255 < 0x10)
            {
              v275 = (unsigned __int128 *)((char *)v235 + 21);
            }
            else
            {
              v275 = (unsigned __int128 *)((char *)v236 + (v255 & 0xFFFFFFF0));
              v276 = (unsigned __int128 *)((char *)v235 + 21);
              do
              {
                v277 = (unsigned __int128)vld2q_s8((const char *)v237);
                v237 += 2;
                *v276++ = v277;
              }
              while (v276 != v275);
            }
            while (v275 != (unsigned __int128 *)((char *)v236 + v255))
            {
              v278 = *(_BYTE *)v237;
              v237 = (_OWORD *)((char *)v237 + 2);
              *(_BYTE *)v275 = v278;
              v275 = (unsigned __int128 *)((char *)v275 + 1);
            }
          }
LABEL_519:
          v256 = bmalloc::api::isoAllocate();
          v257 = v256;
          *(_OWORD *)(v256 + 8) = xmmword_1968BC9D0;
          *(_QWORD *)(v256 + 24) = 0x300300000002;
          *(_QWORD *)(v256 + 32) = 0;
          *(_QWORD *)(v256 + 40) = v414;
          *(_OWORD *)(v256 + 48) = 0u;
          *(_OWORD *)(v256 + 64) = 0u;
          ++*(_DWORD *)(v110 + 3324);
          v258 = v235;
          if (v235 || (v258 = (int *)*MEMORY[0x1E0CBF738]) != 0)
            *v258 += 2;
          *(_QWORD *)(v256 + 80) = v258;
          *(_QWORD *)v256 = off_1E33A8078;
          WebCore::ContainerNode::appendChild((uint64_t)v216, (WebCore::Node *)v256, (uint64_t)v440);
          if (v442)
          {
            v259 = v441;
            v441 = 0;
            if (v259)
            {
              if (*(_DWORD *)v259 == 2)
                WTF::StringImpl::destroy(v259, v209);
              else
                *(_DWORD *)v259 -= 2;
            }
          }
          if (*(_DWORD *)(v257 + 24) == 2)
          {
            if ((*(_WORD *)(v257 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v257, v209);
          }
          else
          {
            *(_DWORD *)(v257 + 24) -= 2;
          }
          if (v235)
          {
            if (*v235 != 2)
            {
              *v235 -= 2;
              goto LABEL_531;
            }
            WTF::StringImpl::destroy((WTF::StringImpl *)v235, v209);
            if (!v231)
            {
LABEL_536:
              v4 = v232;
              goto LABEL_537;
            }
          }
          else
          {
LABEL_531:
            if (!v231)
              goto LABEL_536;
          }
          if (v232)
          {
            if (*(_DWORD *)v232 != 2)
            {
              v4 = 0;
              *(_DWORD *)v232 -= 2;
              goto LABEL_537;
            }
            WTF::StringImpl::destroy((WTF::StringImpl *)v232, v209);
          }
          v4 = 0;
LABEL_537:
          v260 = DWORD1(v462);
          if (DWORD1(v462) == (_DWORD)v462)
          {
            v261 = DWORD1(v462) + ((unint64_t)DWORD1(v462) >> 2);
            if (v261 >= 0x10)
              v262 = v261 + 1;
            else
              v262 = 16;
            if (v262 <= (unint64_t)DWORD1(v462) + 1)
              v263 = DWORD1(v462) + 1;
            else
              v263 = v262;
            if (v263 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1959FE360);
            }
            v264 = (void *)*((_QWORD *)&v461 + 1);
            v265 = (void *)WTF::fastMalloc((WTF *)(8 * v263));
            LODWORD(v462) = v263;
            *((_QWORD *)&v461 + 1) = v265;
            memcpy(v265, v264, 8 * v260);
            if (v264)
            {
              if (*((void **)&v461 + 1) == v264)
              {
                *((_QWORD *)&v461 + 1) = 0;
                LODWORD(v462) = 0;
              }
              WTF::fastFree((WTF *)v264, v209);
            }
            LODWORD(v260) = DWORD1(v462);
            v266 = (WebCore::Node **)(*((_QWORD *)&v461 + 1) + 8 * DWORD1(v462));
          }
          else
          {
            v266 = (WebCore::Node **)(*((_QWORD *)&v461 + 1) + 8 * DWORD1(v462));
          }
          *v266 = v216;
          DWORD1(v462) = v260 + 1;
          if (++v213 >= (unint64_t)*(unsigned int *)(v200 + 44))
            goto LABEL_570;
          continue;
        }
      }
    }
LABEL_604:
    v296 = *(unsigned int *)(v402 + 28);
    if ((_DWORD)v296)
    {
      if (v296 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1959FE3A0);
      }
      v297 = WTF::fastMalloc((WTF *)(8 * v296));
      LODWORD(v467) = v296;
      *((_QWORD *)&v466 + 1) = v297;
      v298 = *(unsigned int *)(v402 + 28);
      if ((_DWORD)v298)
      {
        v299 = *(const void ***)(v402 + 16);
        v300 = 24 * v298;
        do
        {
          WebCore::DataDetection::createElementForImageOverlay(v110, v299, (uint64_t *)&v469);
          v302 = (WTF *)WebCore::Element::classList((WebCore::Element *)v469);
          {
            WTF::AtomStringImpl::add();
            WebCore::ImageOverlay::imageOverlayDataDetectorClass(void)::className = v461;
          }
          WebCore::DOMTokenList::addInternal(v302, &WebCore::ImageOverlay::imageOverlayDataDetectorClass(void)::className, 1uLL, v301, &v434, v303);
          if (v436)
          {
            v305 = v435;
            v435 = 0;
            if (v305)
            {
              if (*(_DWORD *)v305 == 2)
                WTF::StringImpl::destroy(v305, v304);
              else
                *(_DWORD *)v305 -= 2;
            }
          }
          WebCore::ContainerNode::appendChild(v465, (WebCore::Node *)v469, (uint64_t)v431);
          if (v433)
          {
            v306 = v432;
            v432 = 0;
            if (v306)
            {
              if (*(_DWORD *)v306 == 2)
                WTF::StringImpl::destroy(v306, (WTF::StringImpl *)v8);
              else
                *(_DWORD *)v306 -= 2;
            }
          }
          LODWORD(v307) = DWORD1(v467);
          if (DWORD1(v467) == (_DWORD)v467)
          {
            v308 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v466 + 1, DWORD1(v467) + 1, (unint64_t)&v469);
            v307 = DWORD1(v467);
            v309 = *((_QWORD *)&v466 + 1);
            v310 = *(_QWORD *)v308;
            *(_QWORD *)v308 = 0;
            *(_QWORD *)(v309 + 8 * v307) = v310;
          }
          else
          {
            v311 = v469;
            v469 = 0;
            *(_QWORD *)(*((_QWORD *)&v466 + 1) + 8 * DWORD1(v467)) = v311;
          }
          DWORD1(v467) = v307 + 1;
          v312 = v469;
          v469 = 0;
          if (v312)
          {
            if (v312[6] == 2)
            {
              if ((*((_WORD *)v312 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v312, v8);
            }
            else
            {
              v312[6] -= 2;
            }
          }
          v299 += 3;
          v300 -= 24;
        }
        while (v300);
      }
    }
    v313 = *(unsigned int *)(v402 + 44);
    if ((_DWORD)v313)
    {
      if (v313 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1959FE3A8);
      }
      v314 = WTF::fastMalloc((WTF *)(8 * v313));
      LODWORD(v468) = v313;
      *((_QWORD *)&v467 + 1) = v314;
      v315 = *(_DWORD *)(v402 + 44);
      if (v315)
      {
        v415 = *(_QWORD *)(v402 + 32);
        v412 = v415 + 40 * v315;
        v316 = v110 + 96;
        v317 = (_DWORD **)MEMORY[0x1E0CBF738];
        do
        {
          v318 = bmalloc::api::isoAllocate();
          *(_OWORD *)(v318 + 8) = xmmword_1968BC9D0;
          *(_QWORD *)(v318 + 24) = 0x101C00000002;
          *(_QWORD *)(v318 + 32) = 0;
          *(_QWORD *)(v318 + 40) = v316;
          *(_OWORD *)(v318 + 48) = 0u;
          *(_OWORD *)(v318 + 64) = 0u;
          ++*(_DWORD *)(v110 + 3324);
          *(_QWORD *)(v318 + 80) = 0;
          *(_QWORD *)(v318 + 88) = 0;
          v319 = WebCore::HTMLNames::divTag;
          if (WebCore::HTMLNames::divTag)
            ++*(_DWORD *)WebCore::HTMLNames::divTag;
          *(_QWORD *)(v318 + 96) = v319;
          *(_QWORD *)(v318 + 104) = 0;
          *(_QWORD *)v318 = off_1E33B9CC0;
          v430 = (WebCore::Node *)v318;
          v321 = (WTF *)WebCore::Element::classList((WebCore::Element *)v318);
          if ((byte_1ECE831B1 & 1) == 0)
          {
            WTF::AtomStringImpl::add();
            qword_1ECE831C0 = v461;
            byte_1ECE831B1 = 1;
          }
          WebCore::DOMTokenList::addInternal(v321, &qword_1ECE831C0, 1uLL, v320, &v427, v322);
          if (v429)
          {
            v324 = v428;
            v428 = 0;
            if (v324)
            {
              if (*(_DWORD *)v324 == 2)
                WTF::StringImpl::destroy(v324, v323);
              else
                *(_DWORD *)v324 -= 2;
            }
          }
          WTF::String::split();
          if (HIDWORD(v461))
          {
            v325 = (_DWORD **)v461;
            v326 = 8 * HIDWORD(v461);
            do
            {
              v327 = v430;
              if (*((_QWORD *)v430 + 10))
              {
                v328 = bmalloc::api::isoAllocate();
                v329 = v328;
                *(_OWORD *)(v328 + 8) = xmmword_1968BC9D0;
                *(_QWORD *)(v328 + 24) = 0x101C00000002;
                *(_QWORD *)(v328 + 32) = 0;
                *(_QWORD *)(v328 + 40) = v316;
                *(_OWORD *)(v328 + 48) = 0u;
                *(_OWORD *)(v328 + 64) = 0u;
                ++*(_DWORD *)(v110 + 3324);
                *(_QWORD *)(v328 + 80) = 0;
                *(_QWORD *)(v328 + 88) = 0;
                v330 = WebCore::HTMLNames::brTag;
                if (WebCore::HTMLNames::brTag)
                  ++*(_DWORD *)WebCore::HTMLNames::brTag;
                *(_QWORD *)(v328 + 96) = v330;
                *(_QWORD *)(v328 + 104) = 0;
                *(_QWORD *)v328 = off_1E33B4C28;
                WebCore::ContainerNode::appendChild((uint64_t)v327, (WebCore::Node *)v328, (uint64_t)v424);
                if (v426)
                {
                  v332 = v425;
                  v425 = 0;
                  if (v332)
                  {
                    if (*(_DWORD *)v332 == 2)
                      WTF::StringImpl::destroy(v332, v331);
                    else
                      *(_DWORD *)v332 -= 2;
                  }
                }
                if (*(_DWORD *)(v329 + 24) == 2)
                {
                  if ((*(_WORD *)(v329 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v329, v331);
                }
                else
                {
                  *(_DWORD *)(v329 + 24) -= 2;
                }
                v327 = v430;
              }
              v333 = bmalloc::api::isoAllocate();
              v334 = v333;
              *(_OWORD *)(v333 + 8) = xmmword_1968BC9D0;
              *(_QWORD *)(v333 + 24) = 0x300300000002;
              *(_QWORD *)(v333 + 32) = 0;
              *(_QWORD *)(v333 + 40) = v316;
              *(_OWORD *)(v333 + 48) = 0u;
              *(_OWORD *)(v333 + 64) = 0u;
              ++*(_DWORD *)(v110 + 3324);
              v335 = *v325;
              if (*v325 || (v335 = *v317) != 0)
                *v335 += 2;
              *(_QWORD *)(v333 + 80) = v335;
              *(_QWORD *)v333 = off_1E33A8078;
              WebCore::ContainerNode::appendChild((uint64_t)v327, (WebCore::Node *)v333, (uint64_t)v421);
              if (v423)
              {
                v337 = v422;
                v422 = 0;
                if (v337)
                {
                  if (*(_DWORD *)v337 == 2)
                    WTF::StringImpl::destroy(v337, v336);
                  else
                    *(_DWORD *)v337 -= 2;
                }
              }
              if (*(_DWORD *)(v334 + 24) == 2)
              {
                if ((*(_WORD *)(v334 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v334, v336);
              }
              else
              {
                *(_DWORD *)(v334 + 24) -= 2;
              }
              ++v325;
              v326 -= 8;
            }
            while (v326);
            if (HIDWORD(v461) > 2)
            {
              v338 = v430;
              v339 = WebCore::StyledElement::ensureMutableInlineStyle(v430, v336);
              WebCore::staticCSSValuePool[5088] += 2;
              v469 = &WebCore::staticCSSValuePool[5088];
              WebCore::MutableStyleProperties::setProperty(v339, 249, &v469, 0);
              v344 = v469;
              v469 = 0;
              if (v344)
              {
                if (*v344 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v344, v340);
                else
                  *v344 -= 2;
              }
              WebCore::StyledElement::inlineStyleChanged(v338, (uint64_t)v340, v341, v342, v343);
            }
          }
          WebCore::ContainerNode::appendChild(v465, v430, (uint64_t)v418);
          if (v420)
          {
            v345 = v419;
            v419 = 0;
            if (v345)
            {
              if (*(_DWORD *)v345 == 2)
                WTF::StringImpl::destroy(v345, (WTF::StringImpl *)v8);
              else
                *(_DWORD *)v345 -= 2;
            }
          }
          LODWORD(v346) = HIDWORD(v468);
          if (HIDWORD(v468) == (_DWORD)v468)
          {
            v347 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v467 + 1, HIDWORD(v468) + 1, (unint64_t)&v430);
            v346 = HIDWORD(v468);
            v348 = *((_QWORD *)&v467 + 1);
            v349 = *(_QWORD *)v347;
            *(_QWORD *)v347 = 0;
            *(_QWORD *)(v348 + 8 * v346) = v349;
          }
          else
          {
            v350 = v430;
            v430 = 0;
            *(_QWORD *)(*((_QWORD *)&v467 + 1) + 8 * HIDWORD(v468)) = v350;
          }
          HIDWORD(v468) = v346 + 1;
          if (HIDWORD(v461))
          {
            v353 = (WTF::StringImpl **)v461;
            v354 = 8 * HIDWORD(v461);
            do
            {
              v355 = *v353;
              *v353 = 0;
              if (v355)
              {
                if (*(_DWORD *)v355 == 2)
                  WTF::StringImpl::destroy(v355, (WTF::StringImpl *)v8);
                else
                  *(_DWORD *)v355 -= 2;
              }
              ++v353;
              v354 -= 8;
            }
            while (v354);
          }
          v351 = (WTF *)v461;
          if ((_QWORD)v461)
          {
            *(_QWORD *)&v461 = 0;
            DWORD2(v461) = 0;
            WTF::fastFree(v351, v8);
          }
          v352 = v430;
          v430 = 0;
          if (v352)
          {
            if (*((_DWORD *)v352 + 6) == 2)
            {
              if ((*((_WORD *)v352 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v352, v8);
            }
            else
            {
              *((_DWORD *)v352 + 6) -= 2;
            }
          }
          v415 += 40;
        }
        while (v415 != v412);
      }
    }
  }
  v357 = (uint64_t)v396;
  v356 = v398;
  if ((v400 & 1) != 0)
    goto LABEL_724;
  if ((byte_1ECE831B4 & 1) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    qword_1ECE831D8 = v461;
    byte_1ECE831B4 = 1;
  }
  v358 = *(_QWORD *)(*((_QWORD *)v396 + 5) + 8);
  *(_DWORD *)(v358 + 24) += 2;
  v359 = bmalloc::api::isoAllocate();
  v361 = v359;
  *(_OWORD *)(v359 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v359 + 24) = 0x101C00000002;
  *(_QWORD *)(v359 + 32) = 0;
  *(_QWORD *)(v359 + 40) = v358 + 96;
  *(_OWORD *)(v359 + 48) = 0u;
  *(_OWORD *)(v359 + 64) = 0u;
  ++*(_DWORD *)(v358 + 3324);
  *(_QWORD *)(v359 + 80) = 0;
  *(_QWORD *)(v359 + 88) = 0;
  v362 = WebCore::HTMLNames::styleTag;
  if (WebCore::HTMLNames::styleTag)
    ++*(_DWORD *)WebCore::HTMLNames::styleTag;
  *(_QWORD *)(v359 + 96) = v362;
  *(_QWORD *)(v359 + 104) = 0;
  *(_QWORD *)v359 = off_1E33CD4C8;
  *(_WORD *)(v359 + 112) = 0;
  *(_DWORD *)(v359 + 116) = 0;
  *(_DWORD *)(v359 + 120) = 0;
  *(_OWORD *)(v359 + 128) = 0uLL;
  *(_OWORD *)(v359 + 144) = 0uLL;
  *(_BYTE *)(v359 + 160) = 0;
  if (*(_DWORD *)(v358 + 24) == 2)
  {
    if ((*(_WORD *)(v358 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v358, v360);
  }
  else
  {
    *(_DWORD *)(v358 + 24) -= 2;
  }
  v363 = (int *)qword_1ECE831D8;
  if (qword_1ECE831D8)
    *(_DWORD *)qword_1ECE831D8 += 2;
  v469 = v363;
  v364 = *(unsigned __int16 *)(v361 + 28) >> 12;
  if (v364 == 1)
  {
LABEL_713:
    WebCore::ContainerNode::stringReplaceAll((WebCore::ContainerNode *)v361, (uint64_t)&v469);
    goto LABEL_714;
  }
  if (v364 > 0xB)
  {
LABEL_714:
    v461 = 0uLL;
    *(_QWORD *)&v462 = 0;
    goto LABEL_715;
  }
  if (v364 == 11)
    goto LABEL_713;
  if (((1 << v364) & 0x19C) == 0)
  {
    v357 = (uint64_t)v396;
    v356 = v398;
    goto LABEL_714;
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, int **))(*(_QWORD *)v361 + 120))(&v461, v361, &v469);
  v357 = (uint64_t)v396;
  v356 = v398;
  if ((_BYTE)v462)
  {
    v370 = (WTF::StringImpl *)*((_QWORD *)&v461 + 1);
    *((_QWORD *)&v461 + 1) = 0;
    if (v370)
    {
      if (*(_DWORD *)v370 == 2)
        WTF::StringImpl::destroy(v370, (WTF::StringImpl *)v360);
      else
        *(_DWORD *)v370 -= 2;
      v357 = (uint64_t)v396;
      v356 = v398;
    }
  }
LABEL_715:
  v365 = (WTF::StringImpl *)v469;
  v469 = 0;
  if (v365)
  {
    if (*(_DWORD *)v365 == 2)
      WTF::StringImpl::destroy(v365, (WTF::StringImpl *)v360);
    else
      *(_DWORD *)v365 -= 2;
  }
  WebCore::ContainerNode::appendChild(v357, (WebCore::Node *)v361, (uint64_t)&v469);
  if (v471)
  {
    v366 = v470;
    v470 = 0;
    if (v366)
    {
      if (*(_DWORD *)v366 == 2)
        WTF::StringImpl::destroy(v366, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v366 -= 2;
    }
  }
  if (*(_DWORD *)(v361 + 24) == 2)
  {
    if ((*(_WORD *)(v361 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v361, v8);
  }
  else
  {
    *(_DWORD *)(v361 + 24) -= 2;
  }
LABEL_724:
  v367 = v465;
  v465 = 0uLL;
  *(_OWORD *)v356 = v367;
  *(_QWORD *)&v367 = v466;
  *(_QWORD *)&v466 = 0;
  *(_QWORD *)(v356 + 16) = v367;
  v368 = *((_QWORD *)&v466 + 1);
  *((_QWORD *)&v466 + 1) = 0;
  *(_QWORD *)(v356 + 24) = v368;
  *(_QWORD *)&v367 = v467;
  *(_QWORD *)&v467 = 0;
  *(_QWORD *)(v356 + 32) = v367;
  v369 = *((_QWORD *)&v467 + 1);
  *((_QWORD *)&v467 + 1) = 0;
  *(_QWORD *)(v356 + 40) = v369;
  *(_QWORD *)&v367 = v468;
  v468 = 0;
  *(_QWORD *)(v356 + 48) = v367;
  v109 = v401;
  if (*(_DWORD *)(v357 + 24) == 2)
  {
    if ((*(_WORD *)(v357 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v357, v8);
  }
  else
  {
    *(_DWORD *)(v357 + 24) -= 2;
  }
  if (v110)
  {
    if (*(_DWORD *)(v110 + 24) == 2)
    {
      if ((*(_WORD *)(v110 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v110, v8);
    }
    else
    {
      *(_DWORD *)(v110 + 24) -= 2;
    }
  }
LABEL_729:
  if (v109)
  {
    if (*((_DWORD *)v109 + 6) == 2)
    {
      if ((*((_WORD *)v109 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v109, v8);
    }
    else
    {
      *((_DWORD *)v109 + 6) -= 2;
    }
  }
  WebCore::ImageOverlay::Elements::~Elements((WebCore::ImageOverlay::Elements *)&v465, v8);
}

WTF::StringImpl *WebCore::ImageOverlay::fitElementToQuad(float *a1, WebCore::StyledElement *a2, float *a3, int a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  char v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int8x16_t *v27;
  _BYTE *v28;
  uint64_t v29;
  _DWORD *v30;
  _BYTE *v31;
  uint64_t v32;
  _WORD *v33;
  int8x16_t *v34;
  size_t v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int16 v45;
  char *v46;
  char *v47;
  int8x16_t *p_src;
  char *v49;
  __int128 v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  char *v54;
  char *v55;
  char *v56;
  __int16 v57;
  uint64_t v58;
  _WORD *v59;
  _WORD *v60;
  __int128 v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  char *v65;
  char *v66;
  char *v67;
  __int16 v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *result;
  _WORD *v71;
  _WORD *v72;
  unsigned __int128 v73;
  __int8 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  char v83[16];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  char __s[16];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  size_t __n[2];
  __int128 __src;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  int8x16x2_t v132;
  int8x16x2_t v133;
  int8x16x2_t v134;
  int8x16x2_t v135;
  int8x16x2_t v136;
  int8x16x2_t v137;
  int8x16x2_t v138;
  int8x16x2_t v139;
  int8x16x2_t v140;

  v131 = *MEMORY[0x1E0C80C00];
  WebCore::rotatedBoundingRectWithMinimumAngleOfRotation(a3, 0x13C23D70ALL, a1);
  WebCore::StyledElement::setInlineStyleProperty(a2, (WTF::StringImpl *)0x1C2, 6, 0, a1[2]);
  if (a4)
    WebCore::StyledElement::setInlineStyleProperty(a2, (WTF::StringImpl *)0x189, 6, 0, a1[3]);
  if (a1[4] == 0.0)
  {
    v7 = *MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v7 += 2;
  }
  else
  {
    WTF::numberToString();
    v8 = strlen(__s);
    HIDWORD(v114) = v8;
    if (v8 < 0)
      goto LABEL_98;
    if (__OFADD__(v8, 5))
      goto LABEL_98;
    v9 = (v8 + 12);
    if (__OFADD__(v8 + 5, 7))
      goto LABEL_98;
    v119 = v111;
    v120 = v112;
    v121 = v113;
    *(_OWORD *)__n = v114;
    v115 = *(_OWORD *)__s;
    v116 = v108;
    v117 = v109;
    v118 = v110;
    WTF::tryFastCompactMalloc((WTF *)(v9 + 20));
    v7 = __src;
    if (!(_QWORD)__src)
    {
LABEL_98:
      __break(0xC471u);
LABEL_99:
      JUMPOUT(0x1959FEB7CLL);
    }
    *(_DWORD *)__src = 2;
    *(_DWORD *)(v7 + 4) = v9;
    *(_QWORD *)(v7 + 8) = v7 + 20;
    *(_DWORD *)(v7 + 23) = 677737569;
    *(_DWORD *)(v7 + 16) = 4;
    *(_DWORD *)(v7 + 20) = 1635020658;
    v10 = (_BYTE *)(v7 + 27);
    v127 = v119;
    v128 = v120;
    v129 = v121;
    v130 = *(_OWORD *)__n;
    __src = v115;
    v124 = v116;
    v125 = v117;
    v126 = v118;
    v11 = HIDWORD(__n[1]);
    if (HIDWORD(__n[1]))
    {
      if (HIDWORD(__n[1]) == 1)
        *v10 = __src;
      else
        memcpy((void *)(v7 + 27), &__src, HIDWORD(v130));
    }
    v12 = &v10[v11];
    v12[4] = 32;
    *(_DWORD *)v12 = 694444402;
  }
  WTF::numberToString();
  HIDWORD(v90) = strlen(v83);
  WTF::numberToString();
  v13 = strlen((const char *)&v75);
  HIDWORD(v82) = v13;
  if (v7)
  {
    v14 = *(_DWORD *)(v7 + 4);
    if (v14 < 0)
      goto LABEL_97;
  }
  else
  {
    v14 = 0;
  }
  v15 = __OFADD__(v14, 4);
  v16 = v14 + 4;
  v17 = v15;
  if (v13 < 0)
    goto LABEL_97;
  if ((v17 & 1) != 0)
    goto LABEL_97;
  v15 = __OFADD__(v13, v16);
  v18 = v13 + v16;
  if (v15)
    goto LABEL_97;
  v15 = __OFADD__(v18, 4);
  v19 = v18 + 4;
  v20 = v15;
  if ((HIDWORD(v90) & 0x80000000) != 0)
    goto LABEL_97;
  if (v20)
    goto LABEL_97;
  v21 = HIDWORD(v90) + v19;
  if (__OFADD__(HIDWORD(v90), v19))
    goto LABEL_97;
  v22 = (v21 + 10);
  if (__OFADD__(v21, 10))
    goto LABEL_97;
  if (v7)
  {
    v23 = *(_DWORD *)(v7 + 16);
    v103 = v87;
    v104 = v88;
    v105 = v89;
    v106 = v90;
    v99 = *(_OWORD *)v83;
    v100 = v84;
    v101 = v85;
    v102 = v86;
    v93 = v77;
    v94 = v78;
    v91 = v75;
    v92 = v76;
    v97 = v81;
    v98 = v82;
    v95 = v79;
    v96 = v80;
    if ((v23 & 4) == 0)
    {
      if ((_DWORD)v22)
      {
        if (v22 <= 0x7FFFFFEF)
        {
          WTF::tryFastCompactMalloc((WTF *)(2 * v22 + 20));
          v24 = __src;
          if ((_QWORD)__src)
          {
            *(_DWORD *)__src = 2;
            *(_DWORD *)(v24 + 4) = v22;
            *(_QWORD *)(v24 + 8) = v24 + 20;
            *(_DWORD *)(v24 + 16) = 0;
            v111 = v95;
            v112 = v96;
            v113 = v97;
            v114 = v98;
            *(_OWORD *)__s = v91;
            v108 = v92;
            v109 = v93;
            v110 = v94;
            v25 = (char *)(v24 + 40);
            *(_OWORD *)(v24 + 20) = xmmword_1969F06D0;
            *(_DWORD *)(v24 + 36) = 2621541;
            v119 = v103;
            v120 = v104;
            v121 = v105;
            *(_OWORD *)__n = v106;
            v115 = v99;
            v116 = v100;
            v26 = (char *)(v24 + 40 + 2 * HIDWORD(v106));
            v117 = v101;
            v118 = v102;
            if (HIDWORD(v106) >= 0x40)
            {
              v37 = &v25[2 * (HIDWORD(v106) & 0xFFFFFFC0)];
              v27 = (int8x16_t *)&v115;
              v38 = 0uLL;
              do
              {
                v132.val[0] = *v27;
                v39 = v27[1];
                v135.val[0] = v27[2];
                v40 = v27[3];
                v27 += 4;
                v41 = v40;
                v135.val[1] = 0uLL;
                v138.val[0] = v39;
                v132.val[1] = 0uLL;
                v42 = v25;
                vst2q_s8(v42, v132);
                v42 += 32;
                v138.val[1] = 0uLL;
                vst2q_s8(v42, v138);
                v43 = v25 + 64;
                vst2q_s8(v43, v135);
                v44 = v25 + 96;
                vst2q_s8(v44, *(int8x16x2_t *)(&v38 - 1));
                v25 += 128;
              }
              while (v25 != v37);
              v25 = v37;
            }
            else
            {
              v27 = (int8x16_t *)&v115;
            }
            while (v25 != v26)
            {
              v45 = v27->u8[0];
              v27 = (int8x16_t *)((char *)v27 + 1);
              *(_WORD *)v25 = v45;
              v25 += 2;
            }
            *(_QWORD *)v26 = 0x20002C00780070;
            v46 = v26 + 8;
            v127 = v111;
            v128 = v112;
            v129 = v113;
            v130 = v114;
            __src = *(_OWORD *)__s;
            v124 = v108;
            v125 = v109;
            v126 = v110;
            v47 = &v46[2 * HIDWORD(v114)];
            if (HIDWORD(v114) >= 0x40)
            {
              v49 = &v46[2 * (HIDWORD(v114) & 0xFFFFFFC0)];
              p_src = (int8x16_t *)&__src;
              v50 = 0uLL;
              do
              {
                v133.val[0] = *p_src;
                v51 = p_src[1];
                v136.val[0] = p_src[2];
                v52 = p_src[3];
                p_src += 4;
                v53 = v52;
                v136.val[1] = 0uLL;
                v139.val[0] = v51;
                v133.val[1] = 0uLL;
                v54 = v46;
                vst2q_s8(v54, v133);
                v54 += 32;
                v139.val[1] = 0uLL;
                vst2q_s8(v54, v139);
                v55 = v46 + 64;
                vst2q_s8(v55, v136);
                v56 = v46 + 96;
                vst2q_s8(v56, *(int8x16x2_t *)(&v50 - 1));
                v46 += 128;
              }
              while (v46 != v49);
              v46 = v49;
            }
            else
            {
              p_src = (int8x16_t *)&__src;
            }
            while (v46 != v47)
            {
              v57 = p_src->u8[0];
              p_src = (int8x16_t *)((char *)p_src + 1);
              *(_WORD *)v46 = v57;
              v46 += 2;
            }
            *(_QWORD *)v47 = 0x20002900780070;
            v33 = v47 + 8;
            v34 = *(int8x16_t **)(v7 + 8);
            v58 = *(unsigned int *)(v7 + 4);
            if ((*(_BYTE *)(v7 + 16) & 4) != 0)
            {
              v59 = &v33[v58];
              if (v58 >= 0x40)
              {
                v60 = &v33[v58 & 0xFFFFFFC0];
                v61 = 0uLL;
                do
                {
                  v134.val[0] = *v34;
                  v62 = v34[1];
                  v137.val[0] = v34[2];
                  v63 = v34[3];
                  v34 += 4;
                  v64 = v63;
                  v137.val[1] = 0uLL;
                  v140.val[0] = v62;
                  v134.val[1] = 0uLL;
                  v65 = (char *)v33;
                  vst2q_s8(v65, v134);
                  v65 += 32;
                  v140.val[1] = 0uLL;
                  vst2q_s8(v65, v140);
                  v66 = (char *)(v33 + 32);
                  vst2q_s8(v66, v137);
                  v67 = (char *)(v33 + 48);
                  vst2q_s8(v67, *(int8x16x2_t *)(&v61 - 1));
                  v33 += 64;
                }
                while (v33 != v60);
                v33 = v60;
              }
              while (v33 != v59)
              {
                v68 = v34->u8[0];
                v34 = (int8x16_t *)((char *)v34 + 1);
                *v33++ = v68;
              }
              goto LABEL_78;
            }
            if ((_DWORD)v58 == 1)
            {
              *v33 = v34->i16[0];
              goto LABEL_78;
            }
            if (!(_DWORD)v58)
              goto LABEL_78;
            v35 = 2 * v58;
LABEL_49:
            memcpy(v33, v34, v35);
            goto LABEL_78;
          }
        }
        goto LABEL_97;
      }
LABEL_52:
      v36 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      *(_QWORD *)&__src = v36;
      goto LABEL_79;
    }
    if (!(_DWORD)v22)
      goto LABEL_52;
  }
  else
  {
    v103 = v87;
    v104 = v88;
    v105 = v89;
    v106 = v90;
    v99 = *(_OWORD *)v83;
    v100 = v84;
    v101 = v85;
    v102 = v86;
    v93 = v77;
    v94 = v78;
    v91 = v75;
    v92 = v76;
    v97 = v81;
    v98 = v82;
    v95 = v79;
    v96 = v80;
    if (v21 == -10)
      goto LABEL_52;
  }
  if ((v22 & 0x80000000) != 0 || (WTF::tryFastCompactMalloc((WTF *)(v22 + 20)), (v24 = __src) == 0))
  {
LABEL_97:
    __break(0xC471u);
    goto LABEL_99;
  }
  *(_DWORD *)__src = 2;
  *(_DWORD *)(v24 + 4) = v22;
  *(_QWORD *)(v24 + 8) = v24 + 20;
  *(_DWORD *)(v24 + 16) = 4;
  *(_QWORD *)(v24 + 20) = *(_QWORD *)"translate(";
  *(_WORD *)(v24 + 28) = 10341;
  v28 = (_BYTE *)(v24 + 30);
  v119 = v103;
  v120 = v104;
  v121 = v105;
  *(_OWORD *)__n = v106;
  v115 = v99;
  v116 = v100;
  v117 = v101;
  v118 = v102;
  v29 = HIDWORD(v106);
  if (HIDWORD(v106))
  {
    if (HIDWORD(v106) == 1)
      *v28 = v115;
    else
      memcpy((void *)(v24 + 30), &v115, HIDWORD(v106));
  }
  v30 = &v28[v29];
  *v30 = 539785328;
  v31 = v30 + 1;
  v127 = v95;
  v128 = v96;
  v129 = v97;
  v130 = v98;
  __src = v91;
  v124 = v92;
  v125 = v93;
  v126 = v94;
  v32 = HIDWORD(v98);
  if (HIDWORD(v98))
  {
    if (HIDWORD(v98) == 1)
      *v31 = __src;
    else
      memcpy(v31, &__src, HIDWORD(v130));
  }
  *(_DWORD *)&v31[v32] = 539588720;
  v33 = &v31[v32 + 4];
  if (!v7)
    goto LABEL_78;
  v34 = *(int8x16_t **)(v7 + 8);
  v35 = *(unsigned int *)(v7 + 4);
  if ((*(_BYTE *)(v7 + 16) & 4) == 0)
  {
    v71 = (_WORD *)((char *)v33 + v35);
    if (v35 >= 0x10)
    {
      v72 = (_WORD *)((char *)v33 + (v35 & 0xFFFFFFF0));
      do
      {
        v73 = (unsigned __int128)vld2q_s8(v34->i8);
        v34 += 2;
        *(_OWORD *)v33 = v73;
        v33 += 8;
      }
      while (v33 != v72);
      v33 = v72;
    }
    while (v33 != v71)
    {
      v74 = v34->i8[0];
      v34 = (int8x16_t *)((char *)v34 + 2);
      *(_BYTE *)v33 = v74;
      v33 = (_WORD *)((char *)v33 + 1);
    }
    goto LABEL_78;
  }
  if ((_DWORD)v35)
  {
    if ((_DWORD)v35 == 1)
    {
      *(_BYTE *)v33 = v34->i8[0];
      goto LABEL_78;
    }
    goto LABEL_49;
  }
LABEL_78:
  *(_QWORD *)&__src = v24;
LABEL_79:
  WebCore::StyledElement::setInlineStyleProperty(a2, (WTF::StringImpl *)0x111, (uint64_t)&__src, 0, 0);
  result = (WTF::StringImpl *)__src;
  *(_QWORD *)&__src = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v69);
    else
      *(_DWORD *)result -= 2;
  }
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v7, v69);
    else
      *(_DWORD *)v7 -= 2;
  }
  return result;
}

size_t WebCore::ImageOverlay::updateWithTextRecognitionResult(WebCore::HTMLElement &,WebCore::TextRecognitionResult const&,WebCore::ImageOverlay::CacheTextRecognitionResults)::$_5::operator()(WebCore::StyledElement *a1, float a2, float a3)
{
  float v4;
  float v5;
  size_t result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  float v10;
  _QWORD v11[2];

  v4 = a2 * a3;
  v5 = (float)(v4 / 5.0) + (float)((float)(a3 - v4) / 50.0);
  WebCore::StyledElement::setInlineStyleProperty(a1, (WTF::StringImpl *)0xD, 6, 0, v4);
  v11[0] = "px";
  v11[1] = 3;
  v10 = v5;
  result = WTF::tryMakeString<float,WTF::ASCIILiteral>((uint64_t)v11, &v9);
  if (v9)
  {
    WebCore::StyledElement::setInlineStyleProperty(a1, (WTF::StringImpl *)0x1E0, (uint64_t)&v9, 0, 0);
    v8 = v9;
    v9 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    WebCore::StyledElement::setInlineStyleProperty(a1, (WTF::StringImpl *)0x1AC, 6, 0, (float)(v5 + v5));
    WebCore::StyledElement::setInlineStyleProperty(a1, (WTF::StringImpl *)0x1AD, 6, 0, (float)(v5 + v5));
    WebCore::StyledElement::setInlineStyleProperty(a1, (WTF::StringImpl *)0x1AE, 6, 0, v5);
    return WebCore::StyledElement::setInlineStyleProperty(a1, (WTF::StringImpl *)0x1A9, 6, 0, v5);
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::InlineStyleSheetOwner::clearSheet(WebCore::InlineStyleSheetOwner *this, void *a2)
{
  WebCore::CSSStyleSheet *v2;
  uint64_t result;

  v2 = (WebCore::CSSStyleSheet *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  result = WebCore::CSSStyleSheet::clearOwnerNode(v2, a2);
  if (v2)
  {
    if (*((_DWORD *)v2 + 2) == 1)
      return (*(uint64_t (**)(WebCore::CSSStyleSheet *))(*(_QWORD *)v2 + 8))(v2);
    else
      --*((_DWORD *)v2 + 2);
  }
  return result;
}

WTF::StringImpl *WebCore::InlineStyleSheetOwner::createSheetFromTextContents(WebCore::InlineStyleSheetOwner *this, WebCore::Element *a2, WTF::StringBuilder *a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;

  WebCore::TextNodeTraversal::contentsAsString(a2, a3, &v7);
  WebCore::InlineStyleSheetOwner::createSheet(this, a2, &v7);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::InlineStyleSheetOwner::startLoadingDynamicSheet(uint64_t this, WebCore::Element *a2)
{
  uint64_t v2;
  WebCore::Style::Scope *v3;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  int v8;
  _BYTE v9[24];

  v2 = *(_QWORD *)(this + 40);
  if (v2)
  {
    v3 = *(WebCore::Style::Scope **)(v2 + 8);
    if (v3)
    {
      ++*((_DWORD *)v3 + 2);
      this = WebCore::Style::Scope::hasPendingSheet(v3, a2);
      if ((this & 1) == 0)
      {
        v5 = *((_QWORD *)a2 + 4);
        if (v5 && (v6 = *(_WORD *)(v5 + 28), (v6 & 8) != 0))
        {
          while ((v6 & 0x10) == 0
               || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::headTag + 24))
          {
            v5 = *(_QWORD *)(v5 + 32);
            if (v5)
            {
              v6 = *(_WORD *)(v5 + 28);
              if ((v6 & 8) != 0)
                continue;
            }
            goto LABEL_10;
          }
          v7 = (uint64_t)v3 + 160;
        }
        else
        {
LABEL_10:
          v7 = (uint64_t)v3 + 176;
        }
        this = WTF::WeakHashSet<WebCore::Element const,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>(v7, a2, (uint64_t)v9);
      }
      v8 = *((_DWORD *)v3 + 2);
      if (v8)
      {
        *((_DWORD *)v3 + 2) = v8 - 1;
      }
      else
      {
        this = 286;
        __break(0xC471u);
      }
    }
  }
  return this;
}

uint64_t WebCore::InputEvent::InputEvent(uint64_t a1, _QWORD *a2, _DWORD **a3, int a4, uint64_t *a5, _DWORD **a6, _DWORD **a7, uint64_t a8, int a9, char a10)
{
  uint64_t result;
  uint64_t v19;
  _BOOL4 v20;
  unsigned int v21;
  int v22;
  _DWORD *v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;

  result = WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *a2 != 0;
  v21 = *(_DWORD *)(a1 + 20) & 0xFFC00000;
  if (a4)
    v22 = 2327054;
  else
    v22 = 2327050;
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = v22 | v21 | v20;
  v23 = (_DWORD *)*a2;
  if (*a2)
    *v23 += 2;
  *(_QWORD *)(a1 + 24) = v23;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v19;
  *(_QWORD *)(a1 + 64) = 0;
  v24 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 72) = v24;
  *(_DWORD *)(a1 + 80) = a9;
  *(_QWORD *)a1 = off_1E33A5230;
  v25 = *a3;
  if (*a3)
    *v25 += 2;
  *(_QWORD *)(a1 + 88) = v25;
  v26 = *a6;
  if (*a6)
    *v26 += 2;
  *(_QWORD *)(a1 + 96) = v26;
  v27 = *a7;
  if (*a7)
    ++*v27;
  v28 = *(unsigned int *)(a8 + 12);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = v27;
  *(_DWORD *)(a1 + 124) = v28;
  if (!(_DWORD)v28)
    goto LABEL_19;
  if (!(v28 >> 29))
  {
    v29 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v28));
    *(_DWORD *)(a1 + 120) = v28;
    *(_QWORD *)(a1 + 112) = v29;
    v30 = *(unsigned int *)(a8 + 12);
    if ((_DWORD)v30)
    {
      v31 = *(uint64_t **)a8;
      v32 = 8 * v30;
      do
      {
        v33 = *v31;
        if (*v31)
          ++*(_DWORD *)(v33 + 8);
        *v29++ = v33;
        ++v31;
        v32 -= 8;
      }
      while (v32);
    }
LABEL_19:
    *(_BYTE *)(a1 + 128) = a10;
    return a1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::InvokeEvent::isInvokeEvent(WebCore::InvokeEvent *this)
{
  return 1;
}

unsigned int *WebCore::InvokeEvent::invoker@<X0>(unsigned int *this@<X0>, unsigned int **a2@<X8>)
{
  WebCore::Node *v3;
  uint64_t v4;
  void *v5;
  int v6;
  int v7;
  int v8;
  WebCore::Node *v9;

  v3 = (WebCore::Node *)*((_QWORD *)this + 9);
  if (!v3)
  {
    *a2 = 0;
    return this;
  }
  v4 = *((_QWORD *)this + 4);
  if (!v4 || (*(_QWORD *)(v4 + 16) & 0x2000000000000) == 0)
  {
    *((_DWORD *)v3 + 6) += 2;
    *a2 = (unsigned int *)v3;
    return this;
  }
  *(_DWORD *)(v4 + 24) += 2;
  WebCore::TreeScope::retargetToScope(*(WTF **)(v4 + 40), v3, &v9);
  this = (unsigned int *)v9;
  v6 = *((_DWORD *)v9 + 6);
  v7 = v6 + 2;
  *((_DWORD *)v9 + 6) = v6 + 2;
  if ((this[7] & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1959FF110);
  }
  this[6] = v6 + 4;
  *a2 = this;
  if (v6 != -2)
  {
    this[6] = v7;
LABEL_10:
    v9 = 0;
    goto LABEL_11;
  }
  if ((*((_WORD *)this + 15) & 0x400) != 0)
  {
    v7 = 2;
    goto LABEL_10;
  }
  WebCore::Node::removedLastRef((WebCore::Node *)this, v5);
  this = (unsigned int *)v9;
  v9 = 0;
  if (this)
  {
    v7 = this[6];
LABEL_11:
    v8 = v7 - 2;
    if (v8)
    {
      this[6] = v8;
    }
    else if ((*((_WORD *)this + 15) & 0x400) == 0)
    {
      this = WebCore::Node::removedLastRef((WebCore::Node *)this, v5);
    }
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return this;
}

void WebCore::KeyboardEvent::~KeyboardEvent(WebCore::KeyboardEvent *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WebCore::PlatformKeyboardEvent *v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *((unsigned int *)this + 43);
  if ((_DWORD)v3)
  {
    v11 = 16 * v3;
    v12 = (WTF::StringImpl **)(*((_QWORD *)this + 20) + 8);
    do
    {
      v13 = *v12;
      *v12 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
        {
          v15 = v12;
          v17 = v11;
          WTF::StringImpl::destroy(v13, a2);
          v12 = v15;
          v11 = v17;
        }
        else
        {
          *(_DWORD *)v13 -= 2;
        }
      }
      v14 = *(v12 - 1);
      *(v12 - 1) = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
        {
          v16 = v12;
          v18 = v11;
          WTF::StringImpl::destroy(v14, a2);
          v12 = v16;
          v11 = v18;
        }
        else
        {
          *(_DWORD *)v14 -= 2;
        }
      }
      v12 += 2;
      v11 -= 16;
    }
    while (v11);
  }
  v4 = (WTF *)*((_QWORD *)this + 20);
  if (v4)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WebCore::PlatformKeyboardEvent *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v8)
  {
    WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent(v8, a2);
    WTF::fastFree(v9, v10);
  }
  WebCore::UIEvent::~UIEvent(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::KeyboardEvent::~KeyboardEvent(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::KeyboardEvent::create@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = bmalloc::api::isoAllocate();
  result = WebCore::KeyboardEvent::KeyboardEvent(v6, a1, a2);
  *a3 = result;
  return result;
}

uint64_t WebCore::KeyboardEvent::create@<X0>(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  _DWORD *v16;
  _DWORD *v17;
  char v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;

  v8 = bmalloc::api::isoAllocate();
  result = WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
  v11 = *a2;
  v12 = a2[1];
  v13 = a2[2];
  *(_QWORD *)(v8 + 8) = 0;
  if (a3)
    v14 = 2392576;
  else
    v14 = 2392064;
  v15 = v14 | (2 * v11) | (4 * v12) | (8 * v13) | (*a1 != 0) | *(_DWORD *)(v8 + 20) & 0xFFC00000;
  *(_DWORD *)(v8 + 16) = 1;
  *(_DWORD *)(v8 + 20) = v15;
  v16 = (_DWORD *)*a1;
  if (*a1)
  {
    *v16 += 2;
    v15 = *(_DWORD *)(v8 + 20);
  }
  *(_QWORD *)(v8 + 24) = v16;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = v10;
  *(_QWORD *)(v8 + 64) = 0;
  *(_DWORD *)(v8 + 20) = v15 | 0x4000;
  v17 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v17)
    ++*v17;
  *(_QWORD *)(v8 + 72) = v17;
  *(_DWORD *)(v8 + 80) = *((_DWORD *)a2 + 4);
  v18 = a2[20];
  if (v18)
    v18 = 2;
  if (a2[22])
    v18 |= 1u;
  if (a2[21])
    v18 |= 8u;
  if (a2[23])
    v18 |= 4u;
  if (a2[24])
    v18 |= 0x20u;
  if (a2[25])
    v18 |= 0x10u;
  *(_BYTE *)(v8 + 84) = v18;
  *(_QWORD *)v8 = off_1E33A5590;
  *(_QWORD *)(v8 + 88) = 0;
  v19 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (v19)
    *v19 += 2;
  *(_QWORD *)(v8 + 96) = v19;
  v20 = (_DWORD *)*((_QWORD *)a2 + 5);
  if (v20)
    *v20 += 2;
  *(_QWORD *)(v8 + 104) = v20;
  v21 = (_DWORD *)*((_QWORD *)a2 + 7);
  if (v21)
    *v21 += 2;
  *(_QWORD *)(v8 + 112) = v21;
  *(_DWORD *)(v8 + 120) = *((_DWORD *)a2 + 12);
  *(_WORD *)(v8 + 124) = *((_WORD *)a2 + 26);
  *(_DWORD *)(v8 + 128) = *((_DWORD *)a2 + 16);
  *(_BYTE *)(v8 + 132) = 1;
  *(_DWORD *)(v8 + 136) = *((_DWORD *)a2 + 17);
  *(_BYTE *)(v8 + 140) = 1;
  *(_DWORD *)(v8 + 144) = *((_DWORD *)a2 + 18);
  *(_BYTE *)(v8 + 148) = 1;
  *(_BYTE *)(v8 + 152) = 0;
  *(_QWORD *)(v8 + 160) = 0;
  *(_QWORD *)(v8 + 168) = 0;
  *a4 = v8;
  return result;
}

WTF *WebCore::KeyboardEvent::initKeyboardEvent(WTF *result, const WTF::AtomString *a2, int a3, int a4, _DWORD **a5, _DWORD **a6, int a7, int a8, char a9, char a10, char a11)
{
  WTF *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  char v18;
  char v19;
  WebCore::PlatformKeyboardEvent *v20;
  WTF *v21;
  void *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF **v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  if ((*((_BYTE *)result + 21) & 0x30) == 0)
  {
    v14 = result;
    WebCore::UIEvent::initUIEvent((uint64_t)result, a2, a3, a4, a5, 0);
    v16 = *a6;
    if (*a6)
      *v16 += 2;
    v17 = (WTF::StringImpl *)*((_QWORD *)v14 + 14);
    *((_QWORD *)v14 + 14) = v16;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v15);
      else
        *(_DWORD *)v17 -= 2;
    }
    *((_DWORD *)v14 + 30) = a7;
    if (a8)
      v18 = 2;
    else
      v18 = 0;
    v19 = v18 | a9;
    if (a10)
      v19 |= 8u;
    if (a11)
      v19 |= 4u;
    *((_BYTE *)v14 + 84) = v19;
    if (*((_BYTE *)v14 + 132))
      *((_BYTE *)v14 + 132) = 0;
    *((_BYTE *)v14 + 125) = 0;
    if (*((_BYTE *)v14 + 140))
      *((_BYTE *)v14 + 140) = 0;
    *((_BYTE *)v14 + 124) = 0;
    v20 = (WebCore::PlatformKeyboardEvent *)*((_QWORD *)v14 + 11);
    *((_QWORD *)v14 + 11) = 0;
    if (v20)
    {
      WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent(v20, v15);
      WTF::fastFree(v21, v22);
    }
    if (*((_BYTE *)v14 + 148))
      *((_BYTE *)v14 + 148) = 0;
    v23 = (WTF::StringImpl *)*((_QWORD *)v14 + 13);
    *((_QWORD *)v14 + 13) = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v15);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = (WTF::StringImpl *)*((_QWORD *)v14 + 12);
    *((_QWORD *)v14 + 12) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v15);
      else
        *(_DWORD *)v24 -= 2;
    }
    *((_BYTE *)v14 + 152) = 0;
    v25 = (WTF **)((char *)v14 + 160);
    v26 = *((unsigned int *)v14 + 43);
    if ((_DWORD)v26)
    {
      v27 = 16 * v26;
      v28 = (WTF::StringImpl **)((char *)*v25 + 8);
      do
      {
        v29 = *v28;
        *v28 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v15);
          else
            *(_DWORD *)v29 -= 2;
        }
        v30 = *(v28 - 1);
        *(v28 - 1) = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v15);
          else
            *(_DWORD *)v30 -= 2;
        }
        v28 += 2;
        v27 -= 16;
      }
      while (v27);
    }
    result = *v25;
    if (*v25)
    {
      *((_QWORD *)v14 + 20) = 0;
      *((_DWORD *)v14 + 42) = 0;
      result = (WTF *)WTF::fastFree(result, v15);
    }
    *v25 = 0;
    *((_QWORD *)v14 + 21) = 0;
  }
  return result;
}

uint64_t WebCore::KeyboardEvent::keyCode(WebCore::KeyboardEvent *this)
{
  uint64_t result;
  WebCore *v2;

  if (*((_BYTE *)this + 140))
    return *((unsigned int *)this + 34);
  if (!*((_QWORD *)this + 11))
    return 0;
  v2 = (WebCore *)WebCore::eventNames(this);
  if (*((_QWORD *)this + 3) != *((_QWORD *)v2 + 131)
    && *((_QWORD *)this + 3) != *(_QWORD *)(WebCore::eventNames(v2) + 1072))
  {
    return WebCore::KeyboardEvent::charCode(this);
  }
  result = *(unsigned int *)(*((_QWORD *)this + 11) + 96);
  if ((result - 160) < 6)
    return dword_1969F06E0[(int)result - 160];
  return result;
}

uint64_t WebCore::KeyboardEvent::charCode(WebCore::KeyboardEvent *this)
{
  uint64_t v1;
  WebCore::KeyboardEvent *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::KeyboardEvent *v6;
  int v7;
  char v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  if (*((_BYTE *)this + 132))
    return *((unsigned int *)this + 32);
  v3 = this;
  v4 = *((_QWORD *)this + 9);
  if (!v4)
    goto LABEL_9;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_9;
  this = *(WebCore::KeyboardEvent **)(v5 + 8);
  if (!this)
    goto LABEL_9;
  this = (WebCore::KeyboardEvent *)(*(uint64_t (**)(WebCore::KeyboardEvent *))(*(_QWORD *)this + 128))(this);
  v6 = this;
  if (!this)
  {
LABEL_10:
    v7 = 0;
    v8 = 1;
    goto LABEL_11;
  }
  if (*((_BYTE *)this + 56))
  {
LABEL_9:
    v6 = 0;
    goto LABEL_10;
  }
  ++*((_DWORD *)this + 6);
  this = (WebCore::KeyboardEvent *)WebCore::LocalDOMWindow::frame(this);
  if (this)
  {
    v13 = WebCore::LocalDOMWindow::frame(v6);
    this = (WebCore::KeyboardEvent *)WebCore::EventHandler::needsKeyboardEventDisambiguationQuirks(*(WebCore::EventHandler **)(v13 + 640));
    v7 = (int)this;
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
LABEL_11:
  if (*((_QWORD *)v3 + 11)
    && (*((_QWORD *)v3 + 3) == *(_QWORD *)(WebCore::eventNames(this) + 1056) ? (v9 = 1) : (v9 = v7), v9 == 1))
  {
    v10 = *(WTF::StringImpl **)(*((_QWORD *)v3 + 11) + 56);
    if (v10)
      *(_DWORD *)v10 += 2;
    v14 = v10;
    v1 = WTF::String::characterStartingAt((WTF::String *)&v14);
    v12 = v14;
    v14 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  else
  {
    v1 = 0;
  }
  if ((v8 & 1) == 0)
  {
    if (*((_DWORD *)v6 + 6) == 1)
      (*(void (**)(WebCore::KeyboardEvent *))(*(_QWORD *)v6 + 72))(v6);
    else
      --*((_DWORD *)v6 + 6);
  }
  return v1;
}

uint64_t WebCore::KeyboardEvent::isKeyboardEvent(WebCore::KeyboardEvent *this)
{
  return 1;
}

uint64_t WebCore::KeyboardEvent::which(WebCore::KeyboardEvent *this)
{
  if (*((_BYTE *)this + 148))
    return *((unsigned int *)this + 36);
  else
    return WebCore::KeyboardEvent::keyCode(this);
}

uint64_t WebCore::LiveNodeList::LiveNodeList(uint64_t result, uint64_t a2, char a3)
{
  *(_DWORD *)(result + 16) = 1;
  *(_QWORD *)result = off_1E33A53E8;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(a2 + 24) += 2;
  *(_QWORD *)(result + 24) = a2;
  *(_BYTE *)(result + 32) = a3;
  *(_BYTE *)(result + 33) = 0;
  return result;
}

void WebCore::LiveNodeList::~LiveNodeList(WebCore::LiveNodeList *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E33A53E8;
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)this + 3);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    *(_QWORD *)(v2 + 8) = 3;
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WebCore::LoadableNonModuleScriptBase::LoadableNonModuleScriptBase(uint64_t a1, _DWORD **a2, _DWORD **a3, char a4, char a5, _DWORD **a6, _DWORD **a7, _DWORD **a8, char a9, char a10)
{
  uint64_t result;
  _DWORD *v12;

  result = WebCore::LoadableScript::LoadableScript(a1, a2, a4, a5, a6, a7, a8, a9);
  *(_QWORD *)result = off_1E33A5450;
  *(_QWORD *)(result + 72) = &unk_1E33A54B0;
  *(_QWORD *)(result + 80) = 0;
  *(_BYTE *)(result + 144) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_BYTE *)(result + 104) = 0;
  v12 = *a3;
  if (*a3)
    *v12 += 2;
  *(_QWORD *)(result + 152) = v12;
  *(_BYTE *)(result + 160) = a10;
  return result;
}

void WebCore::LoadableNonModuleScriptBase::~LoadableNonModuleScriptBase(WebCore::LoadableNonModuleScriptBase *this, void *a2)
{
  unsigned int **v3;
  unsigned int *v4;
  unsigned int **v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::CachedResource *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  void *v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  WTF *v25;
  unsigned int *v26;
  _BYTE v27[24];
  unsigned int **v28;

  *(_QWORD *)this = off_1E33A5450;
  *((_QWORD *)this + 9) = &unk_1E33A54B0;
  v3 = (unsigned int **)((char *)this + 72);
  v5 = (unsigned int **)((char *)this + 88);
  v4 = (unsigned int *)*((_QWORD *)this + 11);
  if (v4)
  {
    do
      v6 = __ldaxr(v4);
    while (__stlxr(v6 + 1, v4));
    v26 = v4;
    v7 = *((_QWORD *)v4 + 1);
    if (!v7
      || (v28 = &v26, ++*(_DWORD *)(v7 + 548), (v8 = *(_QWORD *)(v7 + 488)) == 0)
      || !*(_QWORD *)(v8 + 8)
      || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v7 + 464), (uint64_t *)&v28, (uint64_t)v27), (v4 = v26) != 0))
    {
      v9 = (WebCore::CachedResource *)*((_QWORD *)v4 + 1);
      if (v9)
        WebCore::CachedResource::removeClient(v9, v3);
    }
  }
  else
  {
    v26 = 0;
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v26, a2);
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (*((_BYTE *)this + 144))
  {
    v12 = *((_QWORD *)this + 17);
    if (v12)
    {
      v13 = (uint64_t *)(v12 - 16);
      v14 = *(_QWORD *)(((v12 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      v15 = *(uint64_t **)(v12 - 8);
      if (v15)
      {
        v16 = *v13;
        *v15 = *v13;
        *(_QWORD *)(v16 + 8) = v15;
        *v13 = 0;
        v13[1] = 0;
      }
      *v13 = *(_QWORD *)(v14 + 40);
      *(_QWORD *)(v14 + 40) = v13;
      *((_QWORD *)this + 17) = 0;
    }
    if (*((_BYTE *)this + 128))
    {
      v17 = (WTF::StringImpl *)*((_QWORD *)this + 15);
      *((_QWORD *)this + 15) = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v10);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
  }
  v18 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v18)
  {
    do
    {
      v19 = __ldaxr((unsigned int *)v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, (unsigned int *)v18));
    if (!v20)
    {
      atomic_store(1u, (unsigned int *)v18);
      v24 = *(unsigned int *)(v18 + 28);
      if ((_DWORD)v24)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v18 + 16), (WTF::StringImpl *)(*(_QWORD *)(v18 + 16) + 32 * v24));
      v25 = *(WTF **)(v18 + 16);
      if (v25)
      {
        *(_QWORD *)(v18 + 16) = 0;
        *(_DWORD *)(v18 + 24) = 0;
        WTF::fastFree(v25, v10);
      }
      WTF::fastFree((WTF *)v18, v10);
    }
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v5, v10);
  *((_QWORD *)this + 9) = &off_1E33F87C8;
  v22 = *((_QWORD *)this + 10);
  if (v22)
  {
    *(_QWORD *)(v22 + 8) = 0;
    v23 = (WTF *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
        WTF::fastFree(v23, v21);
      else
        --*(_DWORD *)v23;
    }
  }
  else
  {
    *((_QWORD *)this + 10) = 0;
  }
  WebCore::LoadableScript::~LoadableScript(this, v21);
}

uint64_t std::optional<WebCore::LoadableScriptError>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  WTF::StringImpl *v8;

  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = (uint64_t *)(v3 - 16);
      v5 = *(_QWORD *)(((v3 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      v6 = *(uint64_t **)(v3 - 8);
      if (v6)
      {
        v7 = *v4;
        *v6 = *v4;
        *(_QWORD *)(v7 + 8) = v6;
        *v4 = 0;
        v4[1] = 0;
      }
      *v4 = *(_QWORD *)(v5 + 40);
      *(_QWORD *)(v5 + 40) = v4;
      *(_QWORD *)(a1 + 32) = 0;
    }
    if (*(_BYTE *)(a1 + 24))
    {
      v8 = *(WTF::StringImpl **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
    }
  }
  return a1;
}

BOOL WebCore::LoadableNonModuleScriptBase::hasError(WebCore::LoadableNonModuleScriptBase *this)
{
  return *((_BYTE *)this + 144)
      || (*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8) + 557) >> 5) - 3 < 2;
}

uint64_t **std::exchange[abi:sn180100]<std::optional<WebCore::LoadableScriptError>,std::optional<WebCore::LoadableScriptError>>(uint64_t **result, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t **v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;

  *(_BYTE *)result = 0;
  *((_BYTE *)result + 40) = 0;
  v5 = *(unsigned __int8 *)(a2 + 40);
  if (*(_BYTE *)(a2 + 40))
  {
    v6 = result;
    result = (uint64_t **)std::construct_at[abi:sn180100]<WebCore::LoadableScriptError,WebCore::LoadableScriptError,WebCore::LoadableScriptError*>((uint64_t)result, a2);
    *((_BYTE *)v6 + 40) = 1;
    v5 = *(unsigned __int8 *)(a2 + 40);
  }
  if (v5 == *(unsigned __int8 *)(a3 + 40))
  {
    if (v5)
    {
      *(_BYTE *)a2 = *(_BYTE *)a3;
      if (*(unsigned __int8 *)(a2 + 24) == *(unsigned __int8 *)(a3 + 24))
      {
        if (*(_BYTE *)(a2 + 24))
        {
          *(_WORD *)(a2 + 8) = *(_WORD *)(a3 + 8);
          v7 = *(_QWORD *)(a3 + 16);
          *(_QWORD *)(a3 + 16) = 0;
          v8 = *(WTF::StringImpl **)(a2 + 16);
          *(_QWORD *)(a2 + 16) = v7;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v8 -= 2;
          }
        }
      }
      else if (*(_BYTE *)(a2 + 24))
      {
        v14 = *(WTF::StringImpl **)(a2 + 16);
        *(_QWORD *)(a2 + 16) = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v14 -= 2;
        }
        *(_BYTE *)(a2 + 24) = 0;
      }
      else
      {
        *(_WORD *)(a2 + 8) = *(_WORD *)(a3 + 8);
        v15 = *(_QWORD *)(a3 + 16);
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a2 + 16) = v15;
        *(_BYTE *)(a2 + 24) = 1;
      }
      return JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>::operator=((uint64_t **)(a2 + 32), (uint64_t **)(a3 + 32));
    }
  }
  else if (v5)
  {
    v9 = *(_QWORD *)(a2 + 32);
    if (v9)
    {
      v10 = (uint64_t *)(v9 - 16);
      v11 = *(_QWORD *)(((v9 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      v12 = *(uint64_t **)(v9 - 8);
      if (v12)
      {
        v13 = *v10;
        *v12 = *v10;
        *(_QWORD *)(v13 + 8) = v12;
        *v10 = 0;
        v10[1] = 0;
      }
      *v10 = *(_QWORD *)(v11 + 40);
      *(_QWORD *)(v11 + 40) = v10;
      *(_QWORD *)(a2 + 32) = 0;
    }
    if (*(_BYTE *)(a2 + 24))
    {
      result = *(uint64_t ***)(a2 + 16);
      *(_QWORD *)(a2 + 16) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (uint64_t **)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
    }
    *(_BYTE *)(a2 + 40) = 0;
  }
  else
  {
    result = (uint64_t **)std::construct_at[abi:sn180100]<WebCore::LoadableScriptError,WebCore::LoadableScriptError,WebCore::LoadableScriptError*>(a2, a3);
    *(_BYTE *)(a2 + 40) = 1;
  }
  return result;
}

void WebCore::LoadableScriptError::~LoadableScriptError(WebCore::LoadableScriptError *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  WTF::StringImpl *v8;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = (uint64_t *)(v3 - 16);
    v5 = *(_QWORD *)(((v3 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v6 = *(uint64_t **)(v3 - 8);
    if (v6)
    {
      v7 = *v4;
      *v6 = *v4;
      *(_QWORD *)(v7 + 8) = v6;
      *v4 = 0;
      v4[1] = 0;
    }
    *v4 = *(_QWORD *)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;
    *((_QWORD *)this + 4) = 0;
  }
  if (*((_BYTE *)this + 24))
  {
    v8 = (WTF::StringImpl *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, a2);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
}

void WebCore::LoadableNonModuleScriptBase::notifyFinished(WebCore::LoadableScript *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WebCore *v10;
  uint64_t v11;
  uint64_t *v12;
  const WTF::String *v13;
  uint64_t v14;
  void *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  unint64_t v21;
  int *v22;
  int v23;
  WTF::StringImpl *v24;
  unsigned int *v25;
  WebCore::ResourceRequestBase *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unsigned int *v31;
  WebCore::ResourceRequestBase *v32;
  WebCore::CachedResource *v33;
  uint64_t *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unsigned int **v45;
  WTF::StringImpl *v46;
  unsigned int *v47;
  char *v48;
  __int16 v49;
  void *v50;
  char v51;
  uint64_t v52;
  char v53;

  v4 = *(_QWORD *)(a2 + 400);
  if (v4)
  {
    v5 = (uint64_t *)(v4 + 320);
  }
  else
  {
    std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)&v48);
    v5 = &WebCore::CachedResource::resourceError(void)const::emptyError;
  }
  if (*((_BYTE *)v5 + 60) == 2)
  {
    if ((_MergedGlobals_171 & 1) != 0)
    {
      v22 = (int *)qword_1ECE831B8;
      LOBYTE(v48) = 1;
      if (!qword_1ECE831B8)
      {
LABEL_38:
        v49 = 513;
        v50 = v22;
        v51 = 1;
        v52 = 0;
        std::optional<WebCore::LoadableScriptError>::operator=[abi:sn180100]<WebCore::LoadableScriptError,void>((uint64_t)this + 104, (uint64_t)&v48);
        WebCore::LoadableScriptError::~LoadableScriptError((WebCore::LoadableScriptError *)&v48, v24);
        goto LABEL_4;
      }
      v23 = WebCore::LoadableNonModuleScriptBase::notifyFinished(WebCore::CachedResource &,WebCore::NetworkLoadMetrics const&,WebCore::LoadWillContinueInAnotherProcess)::$_0::operator() const(void)::impl;
    }
    else
    {
      v22 = &WebCore::LoadableNonModuleScriptBase::notifyFinished(WebCore::CachedResource &,WebCore::NetworkLoadMetrics const&,WebCore::LoadWillContinueInAnotherProcess)::$_0::operator() const(void)::impl;
      v23 = WebCore::LoadableNonModuleScriptBase::notifyFinished(WebCore::CachedResource &,WebCore::NetworkLoadMetrics const&,WebCore::LoadWillContinueInAnotherProcess)::$_0::operator() const(void)::impl
          + 2;
      WebCore::LoadableNonModuleScriptBase::notifyFinished(WebCore::CachedResource &,WebCore::NetworkLoadMetrics const&,WebCore::LoadWillContinueInAnotherProcess)::$_0::operator() const(void)::impl += 2;
      qword_1ECE831B8 = (uint64_t)&WebCore::LoadableNonModuleScriptBase::notifyFinished(WebCore::CachedResource &,WebCore::NetworkLoadMetrics const&,WebCore::LoadWillContinueInAnotherProcess)::$_0::operator() const(void)::impl;
      _MergedGlobals_171 = 1;
      LOBYTE(v48) = 1;
    }
    *v22 = v23 + 2;
    goto LABEL_38;
  }
LABEL_4:
  v6 = *((_QWORD *)this + 11);
  if (v6)
  {
    do
      v7 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v7 + 1, (unsigned int *)v6));
    v47 = (unsigned int *)v6;
    v8 = *(_QWORD *)(v6 + 8);
    if (v8)
    {
      v45 = &v47;
      ++*(_DWORD *)(v8 + 548);
      v9 = *(_QWORD *)(v8 + 488);
      if (v9)
      {
        if (*(_QWORD *)(v9 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v8 + 464), (uint64_t *)&v45, (uint64_t)&v48);
      }
    }
  }
  else
  {
    v47 = 0;
  }
  if (!*((_BYTE *)this + 144))
  {
    v10 = *(WebCore **)(*((_QWORD *)v47 + 1) + 400);
    if (!v10)
    {
      v20 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
      if (v20 != -1)
      {
        v48 = &v53;
        v45 = (unsigned int **)&v48;
        std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v45, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
      }
      v10 = (WebCore *)&WebCore::CachedResource::response(void)const::staticEmptyResponse;
    }
    if (!WebCore::isScriptAllowedByNosniff(v10, (const WebCore::ResourceResponse *)a2))
    {
      LOBYTE(v48) = 3;
      LOWORD(v45) = 520;
      v25 = v47;
      if (v47)
        v25 = (unsigned int *)*((_QWORD *)v47 + 1);
      v26 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v25 + 40));
      WTF::URL::stringCenterEllipsizedToLength(v26);
      WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"Refused to execute ", 20, (uint64_t *)&v44, (int8x16_t *)" as script because \"X-Content-Type-Options: nosniff\" was given and its Content-Type is not a script MIME type.", 111, &v46);
      v49 = (__int16)v45;
      v27 = v46;
      v46 = 0;
      v50 = v27;
      v51 = 1;
      v52 = 0;
      std::optional<WebCore::LoadableScriptError>::operator=[abi:sn180100]<WebCore::LoadableScriptError,void>((uint64_t)this + 104, (uint64_t)&v48);
      WebCore::LoadableScriptError::~LoadableScriptError((WebCore::LoadableScriptError *)&v48, v28);
      v29 = v46;
      v46 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v29 -= 2;
      }
      v30 = v44;
      v44 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v30 -= 2;
      }
    }
    if (!*((_BYTE *)this + 144))
    {
      v11 = *((_QWORD *)v47 + 1);
      v12 = *(uint64_t **)(v11 + 400);
      if (!v12)
      {
        v21 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
        if (v21 != -1)
        {
          v48 = &v53;
          v45 = (unsigned int **)&v48;
          std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v45, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
        }
        v11 = *((_QWORD *)v47 + 1);
        v12 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
      }
      if (WebCore::shouldBlockResponseDueToMIMEType((uint64_t)v12, *(unsigned __int8 *)(v11 + 16)))
      {
        LOBYTE(v48) = 2;
        LOWORD(v45) = 520;
        v31 = v47;
        if (v47)
          v31 = (unsigned int *)*((_QWORD *)v47 + 1);
        v32 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v31 + 40));
        WTF::URL::stringCenterEllipsizedToLength(v32);
        if (v47)
          v33 = (WebCore::CachedResource *)*((_QWORD *)v47 + 1);
        else
          v33 = 0;
        v34 = WebCore::CachedResource::response(v33);
        v35 = *(WTF::StringImpl **)WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)v34);
        if (v35)
          *(_DWORD *)v35 += 2;
        v42 = v35;
        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Refused to execute ", 20, (uint64_t *)&v43, (uint64_t)" as script because ", 20, (uint64_t *)&v42, (uint64_t)" is not a script MIME type.", 28, &v46);
        v49 = (__int16)v45;
        v36 = v46;
        v46 = 0;
        v50 = v36;
        v51 = 1;
        v52 = 0;
        std::optional<WebCore::LoadableScriptError>::operator=[abi:sn180100]<WebCore::LoadableScriptError,void>((uint64_t)this + 104, (uint64_t)&v48);
        WebCore::LoadableScriptError::~LoadableScriptError((WebCore::LoadableScriptError *)&v48, v37);
        v38 = v46;
        v46 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v38 -= 2;
        }
        v39 = v42;
        v42 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v39 -= 2;
        }
        v40 = v43;
        v43 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
            WTF::StringImpl::destroy(v40, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v40 -= 2;
        }
      }
      if (!*((_BYTE *)this + 144) && (*(_WORD *)(a2 + 557) >> 5) - 3 >= 2)
      {
        v14 = *((_QWORD *)this + 19);
        if (v14)
        {
          if (*(_DWORD *)(v14 + 4)
            && (WebCore::matchIntegrityMetadataSlow((WebCore *)a2, (WebCore::LoadableScript *)((char *)this + 152), v13) & 1) == 0)
          {
            LOBYTE(v48) = 4;
            LOWORD(v45) = 520;
            WebCore::integrityMismatchDescription((WebCore *)a2, (WebCore::LoadableScript *)((char *)this + 152), &v41);
            WTF::makeString<WTF::ASCIILiteral,WTF::String>((int8x16_t *)"Cannot load script ", 20, (uint64_t *)&v41, &v46);
            v49 = (__int16)v45;
            v16 = v46;
            v46 = 0;
            v50 = v16;
            v51 = 1;
            v52 = 0;
            std::optional<WebCore::LoadableScriptError>::operator=[abi:sn180100]<WebCore::LoadableScriptError,void>((uint64_t)this + 104, (uint64_t)&v48);
            WebCore::LoadableScriptError::~LoadableScriptError((WebCore::LoadableScriptError *)&v48, v17);
            v18 = v46;
            v46 = 0;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2)
                WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v18 -= 2;
            }
            v19 = v41;
            v41 = 0;
            if (v19)
            {
              if (*(_DWORD *)v19 == 2)
                WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v19 -= 2;
            }
          }
        }
      }
    }
  }
  WebCore::LoadableScript::notifyClientFinished(this, (void *)a2);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v47, v15);
}

uint64_t std::optional<WebCore::LoadableScriptError>::operator=[abi:sn180100]<WebCore::LoadableScriptError,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 40))
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
    {
      if (*(_BYTE *)(a1 + 24))
      {
        *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
        v4 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = 0;
        v5 = *(WTF::StringImpl **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v4;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
    }
    else if (*(_BYTE *)(a1 + 24))
    {
      v6 = *(WTF::StringImpl **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      *(_BYTE *)(a1 + 24) = 0;
    }
    else
    {
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
      v7 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a1 + 16) = v7;
      *(_BYTE *)(a1 + 24) = 1;
    }
    JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>::operator=((uint64_t **)(a1 + 32), (uint64_t **)(a2 + 32));
  }
  else
  {
    std::construct_at[abi:sn180100]<WebCore::LoadableScriptError,WebCore::LoadableScriptError,WebCore::LoadableScriptError*>(a1, a2);
    *(_BYTE *)(a1 + 40) = 1;
  }
  return a1;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t result;
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];

  v13[0] = a1;
  v13[1] = a2;
  v12[0] = a4;
  v12[1] = a5;
  v11[0] = a7;
  v11[1] = a8;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)v13, a3, (uint64_t)v12, a6, (uint64_t)v11, a9);
  if (!*a9)
    __break(0xC471u);
  return result;
}

void `non-virtual thunk to'WebCore::LoadableNonModuleScriptBase::notifyFinished(uint64_t a1, uint64_t a2)
{
  WebCore::LoadableNonModuleScriptBase::notifyFinished((WebCore::LoadableScript *)(a1 - 72), a2);
}

void WebCore::InvokeEvent::~InvokeEvent(WebCore::InvokeEvent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  WebCore::Event::~Event(this, a2);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  bmalloc::api *v5;
  void *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

uint64_t WebCore::LiveNodeList::isLiveNodeList(WebCore::LiveNodeList *this)
{
  return 1;
}

void WebCore::LoadableClassicScript::~LoadableClassicScript(WebCore::LoadableClassicScript *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::LoadableNonModuleScriptBase::~LoadableNonModuleScriptBase(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::LoadableClassicScript::scriptType(WebCore::LoadableClassicScript *this)
{
  return 0;
}

void `non-virtual thunk to'WebCore::LoadableClassicScript::~LoadableClassicScript(WebCore::LoadableClassicScript *this, void *a2)
{
  WebCore::LoadableNonModuleScriptBase::~LoadableNonModuleScriptBase((WebCore::LoadableClassicScript *)((char *)this - 72), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::LoadableNonModuleScriptBase::~LoadableNonModuleScriptBase((WebCore::LoadableClassicScript *)((char *)this - 72), a2);
  WTF::fastFree(v2, v3);
}

void WebCore::InlineClassicScript::~InlineClassicScript(WebCore::InlineClassicScript *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = off_1E33A7A40;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *(_QWORD *)this = off_1E3392C20;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = off_1E33A7A40;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *(_QWORD *)this = off_1E3392C20;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::InlineClassicScript::scriptType(WebCore::InlineClassicScript *this)
{
  return 0;
}

void WebCore::InputEvent::~InputEvent(WebCore::InputEvent *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::InputEvent::~InputEvent(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  WebCore::DataTransfer *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  void *v12;

  v3 = *((unsigned int *)this + 31);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 14);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 14);
  if (v7)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (WebCore::DataTransfer *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      WebCore::DataTransfer::~DataTransfer(v8, a2);
      WTF::fastFree(v11, v12);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  WebCore::UIEvent::~UIEvent(this, (WTF::StringImpl *)a2);
}

uint64_t WebCore::InputEvent::isInputEvent(WebCore::InputEvent *this)
{
  return 1;
}

unsigned int *WTF::Vector<WebCore::ImageOverlay::LineElements,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unsigned int *v5;
  unsigned int *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(unsigned int **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = &v5[8 * *(unsigned int *)(a1 + 12)], (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x195A009BCLL);
      }
      v18 = &v5[8 * *(unsigned int *)(a1 + 12)];
      v19 = WTF::fastMalloc((WTF *)(32 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::ImageOverlay::LineElements>::move(v5, v18, v19);
      if (v5)
      {
        if (*(unsigned int **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v10 = a2;
    else
      v10 = v9;
    if (v10 <= v7)
    {
      v13 = *(unsigned int **)a1;
    }
    else
    {
      if (v10 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x195A009C4);
      }
      v11 = WTF::fastMalloc((WTF *)(32 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::ImageOverlay::LineElements>::move(v5, v6, v11);
      v13 = *(unsigned int **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v12);
        v13 = *(unsigned int **)a1;
      }
    }
    return &v13[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 5)];
  }
  return (unsigned int *)v3;
}

unsigned int *WTF::VectorMover<false,WebCore::ImageOverlay::LineElements>::move(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (result != a2)
  {
    v5 = (uint64_t)(result + 2);
    do
    {
      v7 = v5 - 8;
      v6 = *(_QWORD *)(v5 - 8);
      *(_QWORD *)(v5 - 8) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = v6;
      v8 = *(_QWORD *)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(a3 + 8) = v8;
      LODWORD(v8) = *(_DWORD *)(v5 + 8);
      *(_DWORD *)(v5 + 8) = 0;
      *(_DWORD *)(a3 + 16) = v8;
      LODWORD(v8) = *(_DWORD *)(v5 + 12);
      *(_DWORD *)(v5 + 12) = 0;
      *(_DWORD *)(a3 + 20) = v8;
      v9 = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(a3 + 24) = v9;
      v10 = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      if (v10)
      {
        if (*(_DWORD *)(v10 + 24) == 2)
        {
          if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
        }
        else
        {
          *(_DWORD *)(v10 + 24) -= 2;
        }
      }
      WTF::Vector<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
      result = *(unsigned int **)(v5 - 8);
      *(_QWORD *)(v5 - 8) = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
        }
        else
        {
          result[6] -= 2;
        }
      }
      v5 += 32;
      a3 += 32;
    }
    while ((unsigned int *)(v7 + 32) != a2);
  }
  return result;
}

size_t WTF::tryMakeString<float,WTF::ASCIILiteral>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  size_t result;
  uint64_t v5;
  _BYTE *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _OWORD v12[7];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD __src[7];
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  WTF::numberToString();
  result = strlen((const char *)v12);
  HIDWORD(v13) = result;
  v6 = *(_BYTE **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
  {
    v7 = 0;
    goto LABEL_3;
  }
  v7 = v5 - 1;
  if (!((unint64_t)(v5 - 1) >> 31))
  {
LABEL_3:
    if ((result & 0x80000000) != 0)
      goto LABEL_18;
    v8 = (result + v7);
    if (__OFADD__((_DWORD)result, (_DWORD)v7))
      goto LABEL_18;
    v18 = v12[4];
    v19 = v12[5];
    v20 = v12[6];
    v21 = v13;
    v14 = v12[0];
    v15 = v12[1];
    v16 = v12[2];
    v17 = v12[3];
    if (!(_DWORD)v8)
    {
      v9 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      goto LABEL_14;
    }
    if ((v8 & 0x80000000) != 0)
    {
LABEL_18:
      v9 = 0;
      goto LABEL_14;
    }
    result = WTF::tryFastCompactMalloc((WTF *)(v8 + 20));
    v9 = *(_QWORD *)&__src[0];
    if (*(_QWORD *)&__src[0])
    {
      v10 = (_BYTE *)(*(_QWORD *)&__src[0] + 20);
      **(_DWORD **)&__src[0] = 2;
      *(_DWORD *)(v9 + 4) = v8;
      *(_QWORD *)(v9 + 8) = v9 + 20;
      *(_DWORD *)(v9 + 16) = 4;
      __src[4] = v18;
      __src[5] = v19;
      __src[6] = v20;
      v23 = v21;
      __src[0] = v14;
      __src[1] = v15;
      __src[2] = v16;
      __src[3] = v17;
      v11 = HIDWORD(v21);
      if (!HIDWORD(v21))
        goto LABEL_11;
      if (HIDWORD(v21) != 1)
      {
        result = (size_t)memcpy((void *)(v9 + 20), __src, HIDWORD(v23));
LABEL_11:
        if ((_DWORD)v7)
          goto LABEL_12;
        goto LABEL_14;
      }
      *v10 = __src[0];
      if ((_DWORD)v7)
      {
LABEL_12:
        result = (size_t)&v10[v11];
        if ((_DWORD)v7 == 1)
          *(_BYTE *)result = *v6;
        else
          result = (size_t)memcpy((void *)result, v6, v7);
      }
    }
LABEL_14:
    *a2 = v9;
    return result;
  }
  result = 124;
  __break(0xC471u);
  return result;
}

void WebCore::ImageOverlay::Elements::~Elements(WebCore::ImageOverlay::Elements *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;

  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)*((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)(v6 + 24) == 2)
        {
          if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
        }
        else
        {
          *(_DWORD *)(v6 + 24) -= 2;
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((unsigned int *)this + 9);
  if ((_DWORD)v8)
  {
    v9 = (uint64_t *)*((_QWORD *)this + 3);
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)(v11 + 24) == 2)
        {
          if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
        }
        else
        {
          *(_DWORD *)(v11 + 24) -= 2;
        }
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v12 = (WTF *)*((_QWORD *)this + 3);
  if (v12)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = *((unsigned int *)this + 5);
  if ((_DWORD)v13)
  {
    v14 = (uint64_t *)*((_QWORD *)this + 1);
    v15 = 32 * v13;
    do
    {
      v16 = v14[3];
      v14[3] = 0;
      if (v16)
      {
        if (*(_DWORD *)(v16 + 24) == 2)
        {
          if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v16, a2);
        }
        else
        {
          *(_DWORD *)(v16 + 24) -= 2;
        }
      }
      WTF::Vector<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v14 + 1), a2);
      v17 = *v14;
      *v14 = 0;
      if (v17)
      {
        if (*(_DWORD *)(v17 + 24) == 2)
        {
          if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v17, a2);
        }
        else
        {
          *(_DWORD *)(v17 + 24) -= 2;
        }
      }
      v14 += 4;
      v15 -= 32;
    }
    while (v15);
  }
  v18 = (WTF *)*((_QWORD *)this + 1);
  if (v18)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v18, a2);
  }
  v19 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v19)
  {
    if (*(_DWORD *)(v19 + 24) == 2)
    {
      if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v19, a2);
    }
    else
    {
      *(_DWORD *)(v19 + 24) -= 2;
    }
  }
}

uint64_t WebCore::KeyboardEvent::KeyboardEvent(uint64_t a1, uint64_t a2, uint64_t (**a3)())
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)();
  char v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int16 v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  int v31;
  const void *v32;
  _DWORD *v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  int v39;
  uint64_t (*v40)();
  uint64_t v41;
  uint64_t v42;
  WebCore::Document *v44;
  uint64_t v45;
  WebCore::Editor *v46;
  void *v47;
  WebCore::Editor *v48;
  uint64_t v49;
  void *v50;
  WTF::StringImpl *v51;

  v6 = *(unsigned __int8 *)(a2 + 8);
  if (v6 == 4)
  {
    v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v11 || (v12 = *(_QWORD *)(v11 + 96)) == 0)
      v12 = WebCore::threadGlobalDataSlow((WebCore *)a1);
    v13 = *(_QWORD *)(v12 + 40);
    if (!v13)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v12);
      v13 = *(_QWORD *)(v12 + 40);
    }
    v10 = (_QWORD *)(v13 + 1056);
  }
  else if (v6 == 2)
  {
    v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
      v8 = WebCore::threadGlobalDataSlow((WebCore *)a1);
    v9 = *(_QWORD *)(v8 + 40);
    if (!v9)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
      v9 = *(_QWORD *)(v8 + 40);
    }
    v10 = (_QWORD *)(v9 + 1072);
  }
  else
  {
    v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v14 || (v15 = *(_QWORD *)(v14 + 96)) == 0)
      v15 = WebCore::threadGlobalDataSlow((WebCore *)a1);
    v16 = *(_QWORD *)(v15 + 40);
    if (!v16)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v15);
      v16 = *(_QWORD *)(v15 + 40);
    }
    v10 = (_QWORD *)(v16 + 1048);
  }
  v51 = *(WTF::StringImpl **)a2;
  WTF::WallTime::approximateMonotonicTime((WTF::WallTime *)&v51);
  v18 = *a3;
  if (*a3)
    ++*(_DWORD *)v18;
  v19 = *(_BYTE *)(a2 + 9);
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xFFC00000 | 0x24820E | (*v10 != 0);
  v20 = (_DWORD *)*v10;
  if (*v10)
    *v20 += 2;
  *(_QWORD *)(a1 + 24) = v20;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v17;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v18;
  *(_DWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 84) = v19;
  *(_QWORD *)a1 = off_1E33A5590;
  v21 = WTF::fastMalloc((WTF *)0x70);
  v22 = v21;
  v24 = *(_OWORD *)(a2 + 16);
  v23 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)v21 = *(_OWORD *)a2;
  *(_OWORD *)(v21 + 16) = v24;
  *(_OWORD *)(v21 + 32) = v23;
  v25 = *(_WORD *)(a2 + 48);
  *(_BYTE *)(v21 + 50) = *(_BYTE *)(a2 + 50);
  *(_WORD *)(v21 + 48) = v25;
  v26 = *(_DWORD **)(a2 + 56);
  if (v26)
    *v26 += 2;
  *(_QWORD *)(v21 + 56) = v26;
  v27 = *(_DWORD **)(a2 + 64);
  if (v27)
    *v27 += 2;
  *(_QWORD *)(v21 + 64) = v27;
  v28 = *(_DWORD **)(a2 + 72);
  if (v28)
    *v28 += 2;
  *(_QWORD *)(v21 + 72) = v28;
  v29 = *(_DWORD **)(a2 + 80);
  if (v29)
    *v29 += 2;
  *(_QWORD *)(v21 + 80) = v29;
  v30 = *(_DWORD **)(a2 + 88);
  if (v30)
    *v30 += 2;
  *(_QWORD *)(v21 + 88) = v30;
  v31 = *(_DWORD *)(a2 + 96);
  *(_WORD *)(v21 + 100) = *(_WORD *)(a2 + 100);
  *(_DWORD *)(v21 + 96) = v31;
  v32 = *(const void **)(a2 + 104);
  *(_QWORD *)(v22 + 104) = v32;
  if (v32)
    CFRetain(v32);
  *(_QWORD *)(a1 + 88) = v22;
  v33 = *(_DWORD **)(a2 + 72);
  if (v33)
    *v33 += 2;
  *(_QWORD *)(a1 + 96) = v33;
  v34 = *(_DWORD **)(a2 + 80);
  if (v34)
    *v34 += 2;
  *(_QWORD *)(a1 + 104) = v34;
  v35 = *(WTF::StringImpl **)(a2 + 88);
  if (v35)
  {
    *(_DWORD *)v35 += 2;
    if ((*((_BYTE *)v35 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v37 = v35;
      v35 = v51;
      v51 = 0;
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v36);
      else
        *(_DWORD *)v37 -= 2;
    }
  }
  *(_QWORD *)(a1 + 112) = v35;
  if (*(_BYTE *)(a2 + 49))
  {
    v38 = 3;
  }
  else
  {
    v39 = *(_DWORD *)(a2 + 96);
    v38 = 1;
    if ((v39 - 160) > 5)
    {
      if ((v39 - 92) >= 2)
      {
        v38 = v39 == 91;
        goto LABEL_51;
      }
    }
    else if (((1 << (v39 + 96)) & 0x15) != 0)
    {
      goto LABEL_51;
    }
    v38 = 2;
  }
LABEL_51:
  *(_DWORD *)(a1 + 120) = v38;
  *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 48);
  v40 = *a3;
  if (*a3)
  {
    v40 = (uint64_t (*)())*((_QWORD *)v40 + 1);
    if (v40)
    {
      v41 = *((_QWORD *)v40 + 1);
      if (v41
        && (v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 128))(v41)) != 0
        && !*(_BYTE *)(v42 + 56))
      {
        v40 = *(uint64_t (**)())(v42 + 72);
        if (v40)
        {
          v40 = (uint64_t (*)())*((_QWORD *)v40 + 1);
          if (v40)
          {
            if (*((_BYTE *)v40 + 178))
            {
              __break(0xC471u);
              JUMPOUT(0x195A01258);
            }
            v40 = (uint64_t (*)())*((_QWORD *)v40 + 30);
            if (v40)
            {
              v40 = (uint64_t (*)())*((_QWORD *)v40 + 1);
              if (v40)
              {
                v44 = (WebCore::Document *)*((_QWORD *)v40 + 37);
                v45 = *((_QWORD *)v44 + 382);
                if (!v45)
                {
                  v46 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
                  WebCore::Editor::Editor(v46, v44);
                  v48 = (WebCore::Editor *)*((_QWORD *)v44 + 382);
                  *((_QWORD *)v44 + 382) = v46;
                  if (v48)
                  {
                    WebCore::Editor::~Editor(v48, v47);
                    if (*(_DWORD *)v49)
                    {
                      *(_QWORD *)(v49 + 496) = 0;
                      *(_OWORD *)(v49 + 464) = 0u;
                      *(_OWORD *)(v49 + 480) = 0u;
                      *(_OWORD *)(v49 + 432) = 0u;
                      *(_OWORD *)(v49 + 448) = 0u;
                      *(_OWORD *)(v49 + 400) = 0u;
                      *(_OWORD *)(v49 + 416) = 0u;
                      *(_OWORD *)(v49 + 368) = 0u;
                      *(_OWORD *)(v49 + 384) = 0u;
                      *(_OWORD *)(v49 + 336) = 0u;
                      *(_OWORD *)(v49 + 352) = 0u;
                      *(_OWORD *)(v49 + 304) = 0u;
                      *(_OWORD *)(v49 + 320) = 0u;
                      *(_OWORD *)(v49 + 272) = 0u;
                      *(_OWORD *)(v49 + 288) = 0u;
                      *(_OWORD *)(v49 + 240) = 0u;
                      *(_OWORD *)(v49 + 256) = 0u;
                      *(_OWORD *)(v49 + 208) = 0u;
                      *(_OWORD *)(v49 + 224) = 0u;
                      *(_OWORD *)(v49 + 176) = 0u;
                      *(_OWORD *)(v49 + 192) = 0u;
                      *(_OWORD *)(v49 + 144) = 0u;
                      *(_OWORD *)(v49 + 160) = 0u;
                      *(_OWORD *)(v49 + 112) = 0u;
                      *(_OWORD *)(v49 + 128) = 0u;
                      *(_OWORD *)(v49 + 80) = 0u;
                      *(_OWORD *)(v49 + 96) = 0u;
                      *(_OWORD *)(v49 + 48) = 0u;
                      *(_OWORD *)(v49 + 64) = 0u;
                      *(_OWORD *)(v49 + 16) = 0u;
                      *(_OWORD *)(v49 + 32) = 0u;
                      *(_OWORD *)v49 = 0u;
                    }
                    else
                    {
                      WTF::fastFree((WTF *)v49, v50);
                    }
                  }
                  v45 = *((_QWORD *)v44 + 382);
                }
                if (*(_QWORD *)(v45 + 32))
                  v40 = WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>::unspecifiedBoolTypeInstance;
                else
                  v40 = 0;
                LOBYTE(v40) = v40 != 0;
              }
            }
          }
        }
      }
      else
      {
        LOBYTE(v40) = 0;
      }
    }
  }
  *(_BYTE *)(a1 + 125) = (_BYTE)v40;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 132) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 148) = 0;
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 101);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  return a1;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::LoadableScriptError,WebCore::LoadableScriptError,WebCore::LoadableScriptError*>(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  JSC::HandleSet *v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  int v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  JSC::HandleSet *v17;
  uint64_t v18;
  uint64_t v19;

  if (!result)
  {
    __break(1u);
    goto LABEL_23;
  }
  *(_BYTE *)result = *(_BYTE *)a2;
  *(_BYTE *)(result + 8) = 0;
  *(_BYTE *)(result + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_WORD *)(result + 8) = *(_WORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(result + 16) = v4;
    *(_BYTE *)(result + 24) = 1;
  }
  *(_QWORD *)(result + 32) = 0;
  v5 = *(_QWORD *)(a2 + 32);
  if (v5)
  {
    v6 = *(JSC::HandleSet **)(((v5 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v7 = (_QWORD *)*((_QWORD *)v6 + 5);
    if (!v7)
    {
      v19 = result;
      v17 = v6;
      v18 = a2;
      JSC::HandleSet::grow(v6);
      v6 = v17;
      a2 = v18;
      result = v19;
      v7 = (_QWORD *)*((_QWORD *)v17 + 5);
    }
    *((_QWORD *)v6 + 5) = *v7;
    v7[2] = 0;
    v8 = v7 + 2;
    *v7 = 0;
    v7[1] = 0;
    *(_QWORD *)(result + 32) = v7 + 2;
    v2 = *(_QWORD *)(a2 + 32);
    if (v2)
      v2 = *(_QWORD *)v2;
    v3 = (unint64_t)(v8 - 2);
    v9 = *v8;
    v11 = (v2 & 0xFFFE000000000002) == 0 && v2 != 0;
    v12 = (v9 & 0xFFFE000000000002) == 0;
    if (!v9)
      v12 = 0;
    if (v12 == v11)
      goto LABEL_20;
    if ((v11 & 1) != 0)
    {
      v13 = *(unint64_t **)((v3 & 0xFFFFFFFFFFFFF000) + 0x10);
      v14 = v13[3];
      v13 += 3;
      *(_QWORD *)v3 = v14;
      *(v8 - 1) = (unint64_t)v13;
      *v13 = v3;
      *(_QWORD *)(v14 + 8) = v3;
LABEL_20:
      *v8 = v2;
      return result;
    }
LABEL_23:
    v16 = *(_QWORD *)v3;
    v15 = *(_QWORD **)(v3 + 8);
    *v15 = *(_QWORD *)v3;
    *(_QWORD *)(v16 + 8) = v15;
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    v8 = *(unint64_t **)(result + 32);
    goto LABEL_20;
  }
  return result;
}

uint64_t **JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(uint64_t **result, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  int v12;
  int v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t v25;

  v2 = *a2;
  if (*a2)
  {
    v5 = *v2;
    v4 = (unint64_t)(v2 - 2);
    v3 = v5;
    v6 = *result;
    if (!*result)
    {
      v7 = **(_QWORD **)((v4 & 0xFFFFFFFFFFFFF000) + 0x10);
      v8 = *(_QWORD **)(v7 + 712);
      if (!v8)
      {
        v25 = v3;
        v23 = v7;
        v24 = result;
        JSC::HandleSet::grow((JSC::HandleSet *)(v7 + 672));
        v7 = v23;
        result = v24;
        v3 = v25;
        v8 = *(_QWORD **)(v23 + 712);
      }
      *(_QWORD *)(v7 + 712) = *v8;
      v8[2] = 0;
      v6 = v8 + 2;
      *v8 = 0;
      v8[1] = 0;
      *result = v8 + 2;
    }
    v9 = (unint64_t)(v6 - 2);
    v10 = *v6;
    v12 = (v3 & 0xFFFE000000000002) == 0 && v3 != 0;
    v13 = (v10 & 0xFFFE000000000002) == 0;
    if (!v10)
      v13 = 0;
    if (v13 != v12)
    {
      if ((v12 & 1) != 0)
      {
        v14 = *(unint64_t **)((v9 & 0xFFFFFFFFFFFFF000) + 0x10);
        v15 = v14[3];
        v14 += 3;
        *(_QWORD *)v9 = v15;
        *(v6 - 1) = (uint64_t)v14;
        *v14 = v9;
        *(_QWORD *)(v15 + 8) = v9;
      }
      else
      {
        v22 = *(_QWORD *)v9;
        v21 = (_QWORD *)*(v6 - 1);
        *v21 = *(_QWORD *)v9;
        *(_QWORD *)(v22 + 8) = v21;
        *(_QWORD *)v9 = 0;
        *(_QWORD *)(v9 + 8) = 0;
        v6 = *result;
      }
    }
    *v6 = v3;
  }
  else
  {
    v16 = *result;
    if (*result)
    {
      v17 = v16 - 2;
      v18 = *(_QWORD *)(((unint64_t)(v16 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v19 = (uint64_t *)*(v16 - 1);
      if (v19)
      {
        v20 = *v17;
        *v19 = *v17;
        *(_QWORD *)(v20 + 8) = v19;
        *v17 = 0;
        v17[1] = 0;
      }
      *v17 = *(_QWORD *)(v18 + 40);
      *(_QWORD *)(v18 + 40) = v17;
      *result = 0;
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::LoadableScriptError,false>::__optional_destruct_base[abi:sn180100]<WebCore::LoadableScriptError>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  JSC::HandleSet *v4;
  _QWORD *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  JSC::HandleSet *v17;
  uint64_t v18;
  uint64_t v19;

  *(_BYTE *)result = *(_BYTE *)a2;
  *(_BYTE *)(result + 8) = 0;
  *(_BYTE *)(result + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_WORD *)(result + 8) = *(_WORD *)(a2 + 8);
    v2 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(result + 16) = v2;
    *(_BYTE *)(result + 24) = 1;
  }
  *(_QWORD *)(result + 32) = 0;
  v3 = *(_QWORD *)(a2 + 32);
  if (v3)
  {
    v4 = *(JSC::HandleSet **)(((v3 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v5 = (_QWORD *)*((_QWORD *)v4 + 5);
    if (!v5)
    {
      v19 = result;
      v17 = v4;
      v18 = a2;
      JSC::HandleSet::grow(v4);
      v4 = v17;
      a2 = v18;
      result = v19;
      v5 = (_QWORD *)*((_QWORD *)v17 + 5);
    }
    *((_QWORD *)v4 + 5) = *v5;
    v5[2] = 0;
    v6 = v5 + 2;
    *v5 = 0;
    v5[1] = 0;
    *(_QWORD *)(result + 32) = v5 + 2;
    v7 = *(_QWORD *)(a2 + 32);
    if (v7)
      v7 = *(_QWORD *)v7;
    v8 = (unint64_t)(v6 - 2);
    v9 = *v6;
    v11 = (v7 & 0xFFFE000000000002) == 0 && v7 != 0;
    v12 = (v9 & 0xFFFE000000000002) == 0;
    if (!v9)
      v12 = 0;
    if (v12 != v11)
    {
      if ((v11 & 1) != 0)
      {
        v13 = *(unint64_t **)((v8 & 0xFFFFFFFFFFFFF000) + 0x10);
        v14 = v13[3];
        v13 += 3;
        *(_QWORD *)v8 = v14;
        *(v6 - 1) = (unint64_t)v13;
        *v13 = v8;
        *(_QWORD *)(v14 + 8) = v8;
      }
      else
      {
        v16 = *(_QWORD *)v8;
        v15 = (_QWORD *)*(v6 - 1);
        *v15 = *(_QWORD *)v8;
        *(_QWORD *)(v16 + 8) = v15;
        *(_QWORD *)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        v6 = *(unint64_t **)(result + 32);
      }
    }
    *v6 = v7;
  }
  *(_BYTE *)(result + 40) = 1;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ImageOverlay::removeOverlaySoonIfNeeded(WebCore::HTMLElement &)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1[1];
  *a1 = &off_1E33A5680;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ImageOverlay::removeOverlaySoonIfNeeded(WebCore::HTMLElement &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33A5680;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::ImageOverlay::removeOverlaySoonIfNeeded(WebCore::HTMLElement &)::$_0,void>::call(unsigned int *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  WTF *v10;
  void *v11;
  WebCore::Node *v12;
  uint64_t v13;
  __int16 v14;
  __int16 v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WebCore::Node *v19;

  v2 = *((_QWORD *)result + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      *(_DWORD *)(v3 + 24) += 2;
      if ((*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL) == 0
        || (v4 = *(_QWORD *)((*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL) + 0x58)) == 0)
      {
LABEL_4:
        if (*(_DWORD *)(v3 + 24) == 2)
        {
          if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
        }
        else
        {
          *(_DWORD *)(v3 + 24) -= 2;
        }
        return result;
      }
      *(_DWORD *)(v4 + 24) += 2;
      {
        v5 = WebCore::ImageOverlay::imageOverlayElementIdentifier(void)::identifier;
        if (!WebCore::ImageOverlay::imageOverlayElementIdentifier(void)::identifier)
          goto LABEL_10;
      }
      else
      {
        result = (unsigned int *)WTF::AtomStringImpl::add();
        v5 = v16;
        WebCore::ImageOverlay::imageOverlayElementIdentifier(void)::identifier = v16;
        if (!v16)
        {
LABEL_10:
          v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 528);
          if (v6)
          {
            v7 = *(_QWORD *)(v6 + 8);
            if (v7)
            {
              v8 = *(_QWORD *)(v7 + 24);
              if (v8)
              {
                v9 = *(_DWORD **)(v8 + 8);
                if (v9)
                {
                  ++*v9;
                  result = (unsigned int *)WTF::WeakHashMap<WebCore::HTMLElement,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>,WebCore::WeakPtrImplWithEventTargetData>::remove((uint64_t)(v9 + 448), (_QWORD *)v3);
                  if (*v9 == 1)
                  {
                    WebCore::Page::~Page((uint64_t)v9);
                    result = (unsigned int *)WTF::fastFree(v10, v11);
                  }
                  else
                  {
                    --*v9;
                  }
                }
              }
            }
          }
          if (*(_DWORD *)(v4 + 24) == 2)
          {
            if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
          }
          else
          {
            *(_DWORD *)(v4 + 24) -= 2;
          }
          goto LABEL_4;
        }
      }
      if (*(_DWORD *)(v5 + 4))
      {
        result = *(unsigned int **)(v4 + 120);
        if (result)
        {
          result = WebCore::TreeScopeOrderedMap::getElementById(result, (const WTF::AtomString *)&WebCore::ImageOverlay::imageOverlayElementIdentifier(void)::identifier, (const WebCore::TreeScope *)(v4 + 96), (uint64_t *)&v19);
          v12 = v19;
          if (v19)
          {
            v13 = *((_QWORD *)v19 + 4);
            if (v13)
            {
              *(_DWORD *)(v13 + 24) += 2;
              result = (unsigned int *)WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v13, v12, &v16);
              if (*(_DWORD *)(v13 + 24) == 2)
              {
                v14 = *(_WORD *)(v13 + 30);
                if ((v14 & 0x400) == 0)
                {
                  v15 = *(_WORD *)(v13 + 28);
                  if ((v15 & 0xF000) == 0x9000)
                  {
                    result = WebCore::Document::removedLastRef((WebCore::Document *)v13, a2);
                  }
                  else
                  {
                    if ((v15 & 0x20) != 0)
                    {
                      (*(void (**)(_QWORD))(**(_QWORD **)(v13 + 160) + 16))(*(_QWORD *)(v13 + 160));
                      v14 = *(_WORD *)(v13 + 30);
                    }
                    *(_WORD *)(v13 + 30) = v14 | 0x400;
                    result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 72))(v13);
                  }
                }
              }
              else
              {
                *(_DWORD *)(v13 + 24) -= 2;
              }
            }
            else
            {
              v16 = 0;
              v17 = 0;
              v18 = 0;
            }
            if ((_BYTE)v18)
            {
              result = (unsigned int *)v17;
              v17 = 0;
              if (result)
              {
                if (*result == 2)
                  result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
                else
                  *result -= 2;
              }
            }
            if (*((_DWORD *)v12 + 6) == 2)
            {
              if ((*((_WORD *)v12 + 15) & 0x400) == 0)
                result = WebCore::Node::removedLastRef(v12, a2);
            }
            else
            {
              *((_DWORD *)v12 + 6) -= 2;
            }
          }
        }
      }
      goto LABEL_10;
    }
  }
  return result;
}

unint64_t WTF::Vector<WebCore::ImageOverlay::updateWithTextRecognitionResult(WebCore::HTMLElement &,WebCore::TextRecognitionResult const&,WebCore::ImageOverlay::CacheTextRecognitionResults)::FontSizeAdjustmentState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<WebCore::ImageOverlay::updateWithTextRecognitionResult(WebCore::HTMLElement &,WebCore::TextRecognitionResult const&,WebCore::ImageOverlay::CacheTextRecognitionResults)::FontSizeAdjustmentState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::ImageOverlay::updateWithTextRecognitionResult(WebCore::HTMLElement &,WebCore::TextRecognitionResult const&,WebCore::ImageOverlay::CacheTextRecognitionResults)::FontSizeAdjustmentState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ImageOverlay::updateWithTextRecognitionResult(WebCore::HTMLElement &,WebCore::TextRecognitionResult const&,WebCore::ImageOverlay::CacheTextRecognitionResults)::FontSizeAdjustmentState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  __int128 v14;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(32 * v5));
      *(_DWORD *)(v6 + 8) = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = result;
        v11 = (WTF *)((char *)v7 + 32 * v8);
        v12 = v7;
        do
        {
          v13 = *(_QWORD *)v12;
          *(_QWORD *)v12 = 0;
          *(_QWORD *)v10 = v13;
          v14 = *(_OWORD *)((char *)v12 + 8);
          *(_QWORD *)(v10 + 21) = *(_QWORD *)((char *)v12 + 21);
          *(_OWORD *)(v10 + 8) = v14;
          result = *(_QWORD *)v12;
          *(_QWORD *)v12 = 0;
          if (result)
          {
            if (*(_DWORD *)(result + 24) == 2)
            {
              if ((*(_WORD *)(result + 30) & 0x400) == 0)
                result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v9);
            }
            else
            {
              *(_DWORD *)(result + 24) -= 2;
            }
          }
          v12 = (WTF *)((char *)v12 + 32);
          v10 += 32;
        }
        while (v12 != v11);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
        }
        return WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

unsigned int *WTF::VectorTypeOperations<WebCore::ImageOverlay::updateWithTextRecognitionResult(WebCore::HTMLElement &,WebCore::TextRecognitionResult const&,WebCore::ImageOverlay::CacheTextRecognitionResults)::FontSizeAdjustmentState>::moveOverlapping(unsigned int *result, unsigned int *a2, unint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;

  v3 = a3;
  v4 = a2;
  v5 = result;
  if ((unint64_t)result <= a3)
  {
    if (a2 != result)
    {
      v8 = (((char *)a2 - (char *)result) & 0xFFFFFFFFFFFFFFE0) + a3 - 32;
      do
      {
        v9 = *((_QWORD *)v4 - 4);
        v4 -= 8;
        *(_QWORD *)v4 = 0;
        *(_QWORD *)v8 = v9;
        v10 = *(_OWORD *)(v4 + 2);
        *(_QWORD *)(v8 + 21) = *(_QWORD *)((char *)v4 + 21);
        *(_OWORD *)(v8 + 8) = v10;
        result = *(unsigned int **)v4;
        *(_QWORD *)v4 = 0;
        if (result)
        {
          if (result[6] == 2)
          {
            if ((*((_WORD *)result + 15) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
          }
          else
          {
            result[6] -= 2;
          }
        }
        v8 -= 32;
      }
      while (v4 != v5);
    }
  }
  else
  {
    while (v5 != v4)
    {
      v6 = *(unsigned int **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)v3 = v6;
      v7 = *(_OWORD *)(v5 + 2);
      *(_QWORD *)(v3 + 21) = *(_QWORD *)((char *)v5 + 21);
      *(_OWORD *)(v3 + 8) = v7;
      result = *(unsigned int **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
        }
        else
        {
          result[6] -= 2;
        }
      }
      v5 += 8;
      v3 += 32;
    }
  }
  return result;
}

void WebCore::LoadableImportMap::execute(WebCore::LoadableImportMap *this, WebCore::ScriptElement *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _DWORD *v12;
  int v13;
  void *v14;
  void *v15;
  _DWORD *v16;
  _DWORD *v17;
  WebCore::LoadableImportMap *v18;
  void *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  WebCore::LoadableImportMap *v31;
  unsigned int *v32;
  _DWORD *v33;
  _DWORD *v34;
  int v35;
  int v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39[3];
  unsigned int **v40;

  v4 = *((_QWORD *)this + 11);
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  v6 = *(unsigned int **)(v5 + 8);
  if (v6)
    goto LABEL_48;
  v6 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
  *v6 = 1;
  *((_QWORD *)v6 + 1) = v5;
  v20 = *(unsigned int **)(v5 + 8);
  *(_QWORD *)(v5 + 8) = v6;
  if (!v20)
    goto LABEL_48;
  do
  {
    v21 = __ldaxr(v20);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, v20));
  if (!v22)
  {
    atomic_store(1u, v20);
    WTF::fastFree((WTF *)v20, v19);
  }
  v6 = *(unsigned int **)(v5 + 8);
  if (v6)
  {
LABEL_48:
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v32 = v6;
    v8 = *((_QWORD *)v6 + 1);
  }
  else
  {
    v8 = 0;
    v32 = 0;
  }
  v39[0] = (uint64_t)&v32;
  ++*(_DWORD *)(v8 + 548);
  v9 = *(_QWORD *)(v8 + 488);
  if (v9 && *(_QWORD *)(v9 + 8))
  {
    WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v8 + 464), v39, (uint64_t)&v33);
    v6 = v32;
    if (v32)
      goto LABEL_9;
LABEL_20:
    v10 = 0;
    goto LABEL_10;
  }
  if (!v6)
    goto LABEL_20;
LABEL_9:
  v10 = (_QWORD *)*((_QWORD *)v6 + 1);
LABEL_10:
  ++*((_DWORD *)this + 2);
  v31 = this;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x90);
  v12 = WebCore::CachedScriptSourceProvider::CachedScriptSourceProvider(v11, v10, 4, &v31);
  ++v12[2];
  v33 = v12;
  v34 = v12;
  v35 = 0;
  (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 24))(v12);
  v37 = 0;
  v36 = v13;
  if (!v10)
    goto LABEL_11;
  v23 = v10[1];
  if (v23)
    goto LABEL_49;
  v23 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v23 = 1;
  *(_QWORD *)(v23 + 8) = v10;
  v28 = (unsigned int *)v10[1];
  v10[1] = v23;
  if (!v28)
    goto LABEL_49;
  do
  {
    v29 = __ldaxr(v28);
    v30 = v29 - 1;
  }
  while (__stlxr(v30, v28));
  if (!v30)
  {
    atomic_store(1u, v28);
    WTF::fastFree((WTF *)v28, v27);
  }
  v23 = v10[1];
  if (v23)
  {
LABEL_49:
    do
      v24 = __ldaxr((unsigned int *)v23);
    while (__stlxr(v24 + 1, (unsigned int *)v23));
    v38 = (unsigned int *)v23;
    v25 = *(_QWORD *)(v23 + 8);
    if (v25)
    {
      v40 = &v38;
      ++*(_DWORD *)(v25 + 548);
      v26 = *(_QWORD *)(v25 + 488);
      if (v26)
      {
        if (*(_QWORD *)(v26 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v25 + 464), (uint64_t *)&v40, (uint64_t)v39);
      }
    }
  }
  else
  {
LABEL_11:
    v38 = 0;
  }
  WebCore::ScriptElement::registerImportMap(a2, (const WebCore::ScriptSourceCode *)&v33);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v38, v14);
  v16 = v34;
  v34 = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  v17 = v33;
  v33 = 0;
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
  v18 = v31;
  v31 = 0;
  if (v18)
  {
    if (*((_DWORD *)v18 + 2) == 1)
      (*(void (**)(WebCore::LoadableImportMap *))(*(_QWORD *)v18 + 8))(v18);
    else
      --*((_DWORD *)v18 + 2);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v32, v15);
}

uint64_t WebCore::LoadableModuleScript::create@<X0>(_DWORD **a1@<X0>, _DWORD **a2@<X1>, char a3@<W2>, char a4@<W3>, _DWORD **a5@<X4>, _DWORD **a6@<X5>, _DWORD **a7@<X6>, char a8@<W7>, uint64_t *a9@<X8>)
{
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t result;
  _DWORD *v25;

  v18 = WTF::fastMalloc((WTF *)0x90);
  v19 = v18;
  *(_DWORD *)(v18 + 8) = 1;
  v20 = *a1;
  if (*a1)
    *v20 += 2;
  *(_QWORD *)(v18 + 16) = v20;
  v21 = *a6;
  if (*a6)
    *v21 += 2;
  *(_QWORD *)(v18 + 24) = v21;
  v22 = *a7;
  if (*a7)
    *v22 += 2;
  *(_QWORD *)(v18 + 32) = v22;
  *(_BYTE *)(v18 + 40) = a8;
  *(_BYTE *)(v18 + 41) = a3;
  *(_BYTE *)(v18 + 42) = a4;
  v23 = *a5;
  if (*a5)
    *v23 += 2;
  *(_QWORD *)(v18 + 56) = 0;
  *(_QWORD *)(v18 + 64) = 0;
  *(_QWORD *)(v18 + 48) = v23;
  *(_QWORD *)v18 = off_1E33A5778;
  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = 1;
  *(_QWORD *)result = off_1E33948A0;
  v25 = *a2;
  if (*a2)
    *v25 += 2;
  *(_QWORD *)(result + 16) = v25;
  *(_BYTE *)(result + 24) = 1;
  *(_QWORD *)(v19 + 72) = result;
  *(_QWORD *)(v19 + 80) = 0;
  *(_BYTE *)(v19 + 88) = 0;
  *(_BYTE *)(v19 + 128) = 0;
  *(_WORD *)(v19 + 136) = 0;
  *a9 = v19;
  return result;
}

uint64_t WebCore::LoadableScript::LoadableScript(uint64_t result, _DWORD **a2, char a3, char a4, _DWORD **a5, _DWORD **a6, _DWORD **a7, char a8)
{
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;

  *(_DWORD *)(result + 8) = 1;
  v8 = *a2;
  if (*a2)
    *v8 += 2;
  *(_QWORD *)(result + 16) = v8;
  v9 = *a6;
  if (*a6)
    *v9 += 2;
  *(_QWORD *)(result + 24) = v9;
  v10 = *a7;
  if (*a7)
    *v10 += 2;
  *(_QWORD *)(result + 32) = v10;
  *(_BYTE *)(result + 40) = a8;
  *(_BYTE *)(result + 41) = a3;
  *(_BYTE *)(result + 42) = a4;
  v11 = *a5;
  if (*a5)
    *v11 += 2;
  *(_QWORD *)result = off_1E33A57D0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = v11;
  return result;
}

void WebCore::LoadableModuleScript::~LoadableModuleScript(WebCore::LoadableModuleScript *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  _DWORD *v10;

  if (*((_BYTE *)this + 128))
  {
    v3 = *((_QWORD *)this + 15);
    if (v3)
    {
      v4 = (uint64_t *)(v3 - 16);
      v5 = *(_QWORD *)(((v3 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      v6 = *(uint64_t **)(v3 - 8);
      if (v6)
      {
        v7 = *v4;
        *v6 = *v4;
        *(_QWORD *)(v7 + 8) = v6;
        *v4 = 0;
        v4[1] = 0;
      }
      *v4 = *(_QWORD *)(v5 + 40);
      *(_QWORD *)(v5 + 40) = v4;
      *((_QWORD *)this + 15) = 0;
    }
    if (*((_BYTE *)this + 112))
    {
      v8 = (WTF::StringImpl *)*((_QWORD *)this + 13);
      *((_QWORD *)this + 13) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
    }
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  WebCore::LoadableScript::~LoadableScript(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::LoadableModuleScript::~LoadableModuleScript(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::LoadableScript::~LoadableScript(WebCore::LoadableScript *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  unsigned int **v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  *(_QWORD *)this = off_1E33A57D0;
  v3 = *((_QWORD *)this + 7);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = (unsigned int **)(v3 + 16 * i);
        v7 = *v6;
        if (*v6 != (unsigned int *)-1)
        {
          *v6 = 0;
          if (v7)
          {
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              atomic_store(1u, v7);
              WTF::fastFree((WTF *)v7, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  *(_QWORD *)this = off_1E33A7A40;
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  *(_QWORD *)this = off_1E3392C20;
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
}

uint64_t WebCore::LoadableModuleScript::isLoaded(WebCore::LoadableModuleScript *this)
{
  return *((unsigned __int8 *)this + 137);
}

uint64_t WebCore::LoadableModuleScript::hasError(WebCore::LoadableModuleScript *this)
{
  return *((unsigned __int8 *)this + 128);
}

_BYTE *WebCore::LoadableModuleScript::takeError@<X0>(_BYTE *this@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  *a2 = 0;
  a2[40] = 0;
  if (this[128])
  {
    v3 = this;
    this = (_BYTE *)std::construct_at[abi:sn180100]<WebCore::LoadableScriptError,WebCore::LoadableScriptError,WebCore::LoadableScriptError*>((uint64_t)a2, (uint64_t)(this + 88));
    a2[40] = 1;
    if (v3[128])
    {
      v5 = *((_QWORD *)v3 + 15);
      if (v5)
      {
        v6 = (uint64_t *)(v5 - 16);
        v7 = *(_QWORD *)(((v5 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v8 = *(uint64_t **)(v5 - 8);
        if (v8)
        {
          v9 = *v6;
          *v8 = *v6;
          *(_QWORD *)(v9 + 8) = v8;
          *v6 = 0;
          v6[1] = 0;
        }
        *v6 = *(_QWORD *)(v7 + 40);
        *(_QWORD *)(v7 + 40) = v6;
        *((_QWORD *)v3 + 15) = 0;
      }
      if (v3[112])
      {
        this = (_BYTE *)*((_QWORD *)v3 + 13);
        *((_QWORD *)v3 + 13) = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v4);
          else
            *(_DWORD *)this -= 2;
        }
      }
      v3[128] = 0;
    }
  }
  return this;
}

uint64_t WebCore::LoadableModuleScript::wasCanceled(WebCore::LoadableModuleScript *this)
{
  return *((unsigned __int8 *)this + 136);
}

void WebCore::LoadableModuleScript::execute(WebCore::LoadableModuleScript *this, WebCore::ScriptElement *a2)
{
  WebCore::ScriptElement::executeModuleScript(a2, this);
}

void WebCore::MessageChannel::MessageChannel(WebCore::MessageChannel *this, WebCore::ScriptExecutionContext *a2)
{
  unint64_t v4;
  unint64_t v5;
  WebCore::ContextDestructionObserver *v6;
  WebCore::ContextDestructionObserver *v7;
  WebCore::ContextDestructionObserver *v8;
  WebCore::ContextDestructionObserver *v9;
  WebCore::ScriptExecutionContext *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  char v14;
  __int128 *v15;

  *(_DWORD *)this = 1;
  v4 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
  if (v4 != -1)
  {
    *(_QWORD *)&v13 = &v15;
    *(_QWORD *)&v12 = &v13;
    std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
  }
  if ((WebCore::Process::globalIdentifier & 1) == 0)
    goto LABEL_10;
  *(_QWORD *)&v13 = WebCore::Process::globalIdentifier;
  *((_QWORD *)&v13 + 1) = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v5 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
  if (v5 != -1)
  {
    *(_QWORD *)&v12 = &v14;
    v15 = &v12;
    std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
  }
  if ((WebCore::Process::globalIdentifier & 1) != 0)
  {
    *(_QWORD *)&v12 = WebCore::Process::globalIdentifier;
    *((_QWORD *)&v12 + 1) = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    v6 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
    v7 = WebCore::MessagePort::MessagePort(v6, a2, &v13, &v12);
    WebCore::ActiveDOMObject::suspendIfNeeded(v7);
    v8 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
    v9 = WebCore::MessagePort::MessagePort(v8, a2, &v12, &v13);
    WebCore::ActiveDOMObject::suspendIfNeeded(v9);
    *((_QWORD *)this + 1) = v6;
    *((_QWORD *)this + 2) = v8;
    if (!*((_BYTE *)a2 + 276))
    {
      v11 = WebCore::MessagePortChannelProvider::fromContext(a2, v10);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, *((_QWORD *)this + 1) + 64, *((_QWORD *)this + 2) + 64);
    }
  }
  else
  {
LABEL_10:
    __break(1u);
  }
}

JSCell *WebCore::MessageEvent::create@<X0>(WTF::StringImpl *a1@<X0>, uint64_t *a2@<X1>, _DWORD **a3@<X2>, _DWORD **a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v12;
  JSC::JSLock *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  JSCell *result;
  const JSCell *v30;
  unint64_t v31;
  const JSCell **v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  JSC::JSLock *v36;
  uint64_t v37;
  _QWORD *v38;
  const JSCell **v39;
  const JSCell *v40;
  JSCell *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  JSC::JSLock *v55;
  BOOL v56;
  uint64_t v57[2];
  WTF *v58;
  uint64_t v59;

  v12 = *((_QWORD *)a1 + 7);
  v13 = *(JSC::JSLock **)(v12 + 112);
  JSC::JSLock::lock(v13);
  v56 = 0;
  v14 = *a2;
  v58 = 0;
  v59 = 0;
  v57[0] = 0;
  v57[1] = 0;
  v15 = (WTF::StringImpl *)WebCore::SerializedScriptValue::deserialize(v14, a1, a1, (uint64_t)a6, (uint64_t)&v58, v57, 0, &v56);
  v17 = v15;
  v18 = v58;
  if (HIDWORD(v59))
  {
    v50 = 8 * HIDWORD(v59);
    do
    {
      v15 = *(WTF::StringImpl **)v18;
      *(_QWORD *)v18 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          v15 = (WTF::StringImpl *)WTF::StringImpl::destroy(v15, v16);
        else
          *(_DWORD *)v15 -= 2;
      }
      v18 = (WTF *)((char *)v18 + 8);
      v50 -= 8;
    }
    while (v50);
    v18 = v58;
  }
  if (v18)
  {
    v58 = 0;
    LODWORD(v59) = 0;
    v15 = (WTF::StringImpl *)WTF::fastFree(v18, v16);
  }
  v55 = v13;
  v19 = *(_QWORD *)(v12 + 712);
  if (!v19)
  {
    v15 = (WTF::StringImpl *)JSC::HandleSet::grow((JSC::HandleSet *)(v12 + 672));
    v19 = *(_QWORD *)(v12 + 712);
  }
  *(_QWORD *)(v12 + 712) = *(_QWORD *)v19;
  *(_QWORD *)(v19 + 16) = 0;
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0;
  v20 = (unint64_t)v17 & 0xFFFE000000000002;
  if (v17 && !v20)
  {
    v21 = *(unint64_t **)((v19 & 0xFFFFFFFFFFFFF000) + 0x10);
    v22 = v21[3];
    v21 += 3;
    *(_QWORD *)v19 = v22;
    *(_QWORD *)(v19 + 8) = v21;
    *v21 = v19;
    *(_QWORD *)(v22 + 8) = v19;
  }
  *(_QWORD *)(v19 + 16) = v17;
  if (v56)
  {
    v25 = a5;
    v27 = (_QWORD *)(WebCore::eventNames(v15) + 1200);
  }
  else
  {
    v23 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v23 || (v24 = *(_QWORD *)(v23 + 96)) == 0)
      v24 = WebCore::threadGlobalDataSlow(v15);
    v25 = a5;
    v26 = *(_QWORD *)(v24 + 40);
    if (!v26)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v24);
      v26 = *(_QWORD *)(v24 + 40);
    }
    v27 = (_QWORD *)(v26 + 1192);
  }
  v28 = bmalloc::api::isoAllocate();
  LODWORD(v59) = 0;
  WebCore::MessageEvent::MessageEvent(v28, v27, (uint64_t)&v58, a3, a4, v25, a6);
  if ((_DWORD)v59 != -1)
    ((void (*)(uint64_t *, WTF **))off_1E33A5818[v59])(v57, &v58);
  result = (JSCell *)WebCore::wrap<WebCore::MessageEvent>((int)a1, a1, v28);
  v30 = result;
  v31 = *(_QWORD *)(v12 + 712);
  if (!v31)
  {
    result = (JSCell *)JSC::HandleSet::grow((JSC::HandleSet *)(v12 + 672));
    v31 = *(_QWORD *)(v12 + 712);
  }
  *(_QWORD *)(v12 + 712) = *(_QWORD *)v31;
  *(_QWORD *)(v31 + 16) = 0;
  v32 = (const JSCell **)(v31 + 16);
  *(_QWORD *)v31 = 0;
  *(_QWORD *)(v31 + 8) = 0;
  if (v30)
  {
    v33 = *(unint64_t **)((v31 & 0xFFFFFFFFFFFFF000) + 0x10);
    v34 = v33[3];
    v33 += 3;
    *(_QWORD *)v31 = v34;
    *(_QWORD *)(v31 + 8) = v33;
    *v33 = v31;
    *(_QWORD *)(v34 + 8) = v31;
  }
  *v32 = v30;
  if (v20)
  {
    *(_QWORD *)(v28 + 144) = v17;
    v49 = *(_QWORD *)(v28 + 152);
    v36 = v55;
    if (v49)
    {
      *(_QWORD *)(v49 + 8) = 3;
      *(_QWORD *)(v28 + 152) = 0;
    }
  }
  else
  {
    result = 0;
    *(_QWORD *)(v28 + 144) = 0;
    if (v17)
    {
      if ((v17 & 8) != 0)
        v51 = ((unint64_t)v17 - 112) | 1;
      else
        v51 = (unint64_t)v17 & 0xFFFFFFFFFFFFC000;
      if ((v51 & 1) != 0)
        v52 = v51 + 47;
      else
        v52 = *(_QWORD *)v51 + 32;
      result = *(JSCell **)(v52 + 16);
      if (!result)
        result = (JSCell *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v52 + 16) = *(_QWORD *)result;
      *(_QWORD *)result = v17;
      *((_QWORD *)result + 1) = 0;
      *((_QWORD *)result + 2) = 0;
    }
    __dmb(0xAu);
    v35 = *(_QWORD *)(v28 + 152);
    *(_QWORD *)(v28 + 152) = result;
    v36 = v55;
    if (v35)
      *(_QWORD *)(v35 + 8) = 3;
    if (v17 && v30 && *(_DWORD *)(v12 + 760) >= *((unsigned __int8 *)v30 + 7))
      result = (JSCell *)JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v12 + 192), v30);
  }
  ++*(_DWORD *)(v28 + 16);
  *a7 = v28;
  v37 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF000) + 0x10);
  v38 = *(_QWORD **)(v37 + 40);
  if (!v38)
  {
    result = (JSCell *)JSC::HandleSet::grow(*(JSC::HandleSet **)((v31 & 0xFFFFFFFFFFFFF000) + 0x10));
    v38 = *(_QWORD **)(v37 + 40);
  }
  *(_QWORD *)(v37 + 40) = *v38;
  v38[2] = 0;
  v39 = (const JSCell **)(v38 + 2);
  *v38 = 0;
  v38[1] = 0;
  a7[1] = (uint64_t)(v38 + 2);
  v40 = *v32;
  if (*v32)
  {
    v41 = *(JSCell **)(((unint64_t)(v39 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v42 = *((_QWORD *)v41 + 3);
    v41 = (JSCell *)((char *)v41 + 24);
    *(v39 - 2) = (const JSCell *)v42;
    *(v39 - 1) = v41;
    *(_QWORD *)v41 = v39 - 2;
    *(_QWORD *)(v42 + 8) = v39 - 2;
  }
  *v39 = v40;
  v43 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF000) + 0x10);
  v44 = *(_QWORD **)(v31 + 8);
  if (v44)
  {
    v45 = *(_QWORD *)v31;
    *v44 = *(_QWORD *)v31;
    *(_QWORD *)(v45 + 8) = v44;
    *(_QWORD *)v31 = 0;
    *(_QWORD *)(v31 + 8) = 0;
  }
  *(_QWORD *)v31 = *(_QWORD *)(v43 + 40);
  *(_QWORD *)(v43 + 40) = v31;
  if (*(_DWORD *)(v28 + 16) == 1)
    result = (JSCell *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  else
    --*(_DWORD *)(v28 + 16);
  v46 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF000) + 0x10);
  v47 = *(_QWORD **)(v19 + 8);
  if (v47)
  {
    v48 = *(_QWORD *)v19;
    *v47 = *(_QWORD *)v19;
    *(_QWORD *)(v48 + 8) = v47;
    *(_QWORD *)v19 = 0;
    *(_QWORD *)(v19 + 8) = 0;
  }
  *(_QWORD *)v19 = *(_QWORD *)(v46 + 40);
  *(_QWORD *)(v46 + 40) = v19;
  if (v36)
    return (JSCell *)JSC::JSLock::unlock(v36);
  return result;
}

WTF *WebCore::MessageEvent::initMessageEvent(WTF *result, const WTF::AtomString *a2, int a3, int a4, uint64_t a5, _DWORD **a6, _DWORD **a7, uint64_t a8, uint64_t *a9)
{
  WTF *v13;
  WTF::StringImpl *v14;
  unsigned __int8 *v15;
  uint64_t v17;
  int v18;
  _QWORD *Allocator;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char *v39;
  char v40;
  char v41;
  char v42;

  if ((*((_BYTE *)result + 21) & 0x30) != 0)
    return result;
  v13 = result;
  WebCore::Event::initEvent((uint64_t)result, a2, a3, a4);
  v15 = (unsigned __int8 *)v13 + 192;
  if (__ldaxr((unsigned __int8 *)v13 + 192))
  {
    __clrex();
  }
  else if (!__stxr(1u, v15))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C]((char *)v13 + 192);
LABEL_6:
  v17 = *((unsigned int *)v13 + 20);
  if ((_DWORD)v17 != -1)
  {
    if (!(_DWORD)v17)
      goto LABEL_10;
    ((void (*)(char *, char *))off_1E33A5818[v17])(&v38, (char *)v13 + 72);
  }
  *((_DWORD *)v13 + 20) = 0;
LABEL_10:
  v18 = __ldxr(v15);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, v15))
LABEL_14:
    WTF::Lock::unlockSlow((WTF *)((char *)v13 + 192));
  if ((a5 & 0xFFFE000000000002) != 0)
  {
    *((_QWORD *)v13 + 18) = a5;
    v36 = *((_QWORD *)v13 + 19);
    if (v36)
    {
      *(_QWORD *)(v36 + 8) = 3;
      *((_QWORD *)v13 + 19) = 0;
    }
  }
  else
  {
    Allocator = 0;
    *((_QWORD *)v13 + 18) = 0;
    if (a5)
    {
      if ((a5 & 8) != 0)
      {
        v14 = (WTF::StringImpl *)((a5 - 112) | 1);
        v37 = (uint64_t)v14 + 47;
      }
      else
      {
        v14 = (WTF::StringImpl *)(a5 & 0xFFFFFFFFFFFFC000);
        v37 = *(_QWORD *)(a5 & 0xFFFFFFFFFFFFC000) + 32;
      }
      Allocator = *(_QWORD **)(v37 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v37 + 16) = *Allocator;
      *Allocator = a5;
      Allocator[1] = 0;
      Allocator[2] = 0;
    }
    __dmb(0xAu);
    v20 = *((_QWORD *)v13 + 19);
    *((_QWORD *)v13 + 19) = Allocator;
    if (v20)
      *(_QWORD *)(v20 + 8) = 3;
  }
  *((_QWORD *)v13 + 20) = 0;
  v21 = *((_QWORD *)v13 + 21);
  if (v21)
  {
    *(_QWORD *)(v21 + 8) = 3;
    *((_QWORD *)v13 + 21) = 0;
  }
  v22 = *a6;
  if (*a6)
    *v22 += 2;
  v23 = (WTF::StringImpl *)*((_QWORD *)v13 + 11);
  *((_QWORD *)v13 + 11) = v22;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v14);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = *a7;
  if (*a7)
    *v24 += 2;
  v25 = (WTF::StringImpl *)*((_QWORD *)v13 + 12);
  *((_QWORD *)v13 + 12) = v24;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v14);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = (char *)v13 + 104;
  if (*((unsigned __int8 *)v13 + 120) != *(unsigned __int8 *)(a8 + 16))
  {
    if (*((_BYTE *)v13 + 120))
    {
      v29 = *((unsigned int *)v13 + 28);
      if ((_DWORD)v29 != -1)
        ((void (*)(char *, void *))off_1E33A5868[v29])(&v41, v26);
      *((_DWORD *)v13 + 28) = -1;
      *((_BYTE *)v13 + 120) = 0;
    }
    else
    {
      *((_BYTE *)v13 + 104) = 0;
      *((_DWORD *)v13 + 28) = -1;
      v30 = *(unsigned int *)(a8 + 8);
      if ((_DWORD)v30 != -1)
      {
        ((void (*)(char *, void *, uint64_t))off_1E33A5880[v30])(&v42, v26, a8);
        *((_DWORD *)v13 + 28) = v30;
      }
      *((_BYTE *)v13 + 120) = 1;
    }
    goto LABEL_45;
  }
  if (*((_BYTE *)v13 + 120))
  {
    v27 = *((unsigned int *)v13 + 28);
    v28 = *(unsigned int *)(a8 + 8);
    if ((_DWORD)v27 == -1)
    {
      if ((_DWORD)v28 == -1)
        goto LABEL_45;
    }
    else if ((_DWORD)v28 == -1)
    {
      ((void (*)(char *, void *))off_1E33A5868[v27])(&v40, v26);
      *((_DWORD *)v13 + 28) = -1;
      goto LABEL_45;
    }
    v39 = (char *)v13 + 104;
    ((void (*)(char **))off_1E33A5898[v28])(&v39);
  }
LABEL_45:
  v31 = *((unsigned int *)v13 + 35);
  if ((_DWORD)v31)
  {
    v32 = (uint64_t *)*((_QWORD *)v13 + 16);
    v33 = 8 * v31;
    do
    {
      v32 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v32, v26)+ 1;
      v33 -= 8;
    }
    while (v33);
  }
  result = (WTF *)*((_QWORD *)v13 + 16);
  if (result)
  {
    *((_QWORD *)v13 + 16) = 0;
    *((_DWORD *)v13 + 34) = 0;
    result = (WTF *)WTF::fastFree(result, v26);
  }
  v34 = *a9;
  *a9 = 0;
  *((_QWORD *)v13 + 16) = v34;
  LODWORD(v34) = *((_DWORD *)a9 + 2);
  *((_DWORD *)a9 + 2) = 0;
  *((_DWORD *)v13 + 34) = v34;
  LODWORD(v34) = *((_DWORD *)a9 + 3);
  *((_DWORD *)a9 + 3) = 0;
  *((_DWORD *)v13 + 35) = v34;
  *((_QWORD *)v13 + 22) = 0;
  v35 = *((_QWORD *)v13 + 23);
  if (v35)
  {
    *(_QWORD *)(v35 + 8) = 3;
    *((_QWORD *)v13 + 23) = 0;
  }
  return result;
}

void *WebCore::MessagePort::bisoHeap(WebCore::MessagePort *this)
{
  return &WebCore::MessagePort::bisoHeap(void)::heap;
}

uint64_t WebCore::MessagePort::operator new(uint64_t this)
{
  if (this == 96)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

BOOL WebCore::MessagePort::isMessagePortAliveForTesting(unint64_t *a1)
{
  _BOOL8 v3;
  int v4;

  if (__ldaxr((unsigned __int8 *)&_MergedGlobals_172))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_172))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](&_MergedGlobals_172);
LABEL_5:
  if ((byte_1ECE831E9 & 1) != 0)
  {
    if (qword_1ECE831F0)
      v3 = WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>(*a1, a1[1]) != 0;
    else
      v3 = 0;
  }
  else
  {
    v3 = 0;
    qword_1ECE831F0 = 0;
    byte_1ECE831E9 = 1;
  }
  v4 = __ldxr((unsigned __int8 *)&_MergedGlobals_172);
  if (v4 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&_MergedGlobals_172))
      return v3;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_172);
  return v3;
}

uint64_t *WTF::ThreadSafeWeakPtr<WebCore::MessagePort>::~ThreadSafeWeakPtr(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *a1;
  *a1 = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

_QWORD *WebCore::MessagePort::create@<X0>(WebCore::ScriptExecutionContext *a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X2>, WebCore::ContextDestructionObserver **a4@<X8>)
{
  WebCore::ContextDestructionObserver *v8;
  WebCore::ContextDestructionObserver *v9;

  v8 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
  v9 = WebCore::MessagePort::MessagePort(v8, a1, a2, a3);
  *a4 = v9;
  return WebCore::ActiveDOMObject::suspendIfNeeded(v9);
}

uint64_t WebCore::MessagePort::close(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  __int128 v4;
  uint64_t v5;

  if (!*(_BYTE *)(this + 57))
  {
    v1 = this;
    *(_BYTE *)(this + 57) = 1;
    v4 = *(_OWORD *)(this + 64);
    v2 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v2 = off_1E33A5990;
    *(_OWORD *)(v2 + 8) = v4;
    v5 = v2;
    WTF::ensureOnMainThread();
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    return WebCore::EventTarget::removeAllEventListeners(v1 + 24, v3);
  }
  return this;
}

uint64_t WebCore::MessagePort::scriptExecutionContext(WebCore::MessagePort *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

void `non-virtual thunk to'WebCore::MessagePort::~MessagePort(WebCore::MessagePort *this, void *a2)
{
  WebCore::MessagePort::~MessagePort((WebCore::MessagePort *)((char *)this - 24), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::MessagePort::~MessagePort((WebCore::MessagePort *)((char *)this - 24), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t **WebCore::MessagePort::disentanglePorts@<X0>(uint64_t **result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD v8[2];
  char v9;
  uint64_t *v10;

  v4 = *((unsigned int *)result + 3);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)result;
    v10 = 0;
    v6 = *result;
    v7 = 8 * v4;
    while (*(_BYTE *)(*v6 + 58))
    {
      WTF::HashTable<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>>::add((uint64_t *)&v10, v6, (uint64_t)v8);
      if (!v9)
        break;
      ++v6;
      v7 -= 8;
      if (!v7)
      {
        WTF::map<0ul,WTF::CrashOnOverflow,16ul,WebCore::MessagePort::disentanglePorts(WTF::Vector<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,WTF::Vector<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, v5);
        *(_QWORD *)a3 = v8[0];
        *(_QWORD *)(a3 + 8) = v8[1];
        *(_DWORD *)(a3 + 16) = 0;
        return WTF::HashSet<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::DefaultHash<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTableTraits>::~HashSet(&v10, a2);
      }
    }
    *(_BYTE *)a3 = 21;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    return WTF::HashSet<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::DefaultHash<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTableTraits>::~HashSet(&v10, a2);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

unsigned int *WebCore::MessagePort::start(unsigned int *this)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int *v10;
  void *v11;
  uint64_t v12;
  unsigned int **v13;
  unsigned int **v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  unsigned int *v18;
  _QWORD *v19;
  char v20;

  if (*((_BYTE *)this + 57))
    return this;
  v1 = this;
  if (!*((_BYTE *)this + 58) || *((_BYTE *)this + 56))
    return this;
  *((_BYTE *)this + 56) = 1;
  v2 = *((_QWORD *)this + 1);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    v4 = v3 - 96;
    v5 = *(unsigned __int8 *)(v3 + 178);
    if (*(_BYTE *)(v3 + 178))
    {
      if (v5 == 1 || v5 == 2)
        ++*(_DWORD *)(v3 + 216);
    }
    else
    {
      *(_DWORD *)(v3 - 264) += 2;
    }
  }
  else
  {
    v4 = 0;
  }
  v6 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  v7 = *((_QWORD *)v1 + 6);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
LABEL_10:
    MEMORY[0x19AEA534C](v7);
    goto LABEL_11;
  }
  if (__stxr(1u, (unsigned __int8 *)v7))
    goto LABEL_10;
LABEL_11:
  ++*(_QWORD *)(v7 + 8);
  v9 = __ldxr((unsigned __int8 *)v7);
  if (v9 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      goto LABEL_16;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_16:
  *(_QWORD *)(v6 + 8) = v1;
  ++*((_QWORD *)v1 + 2);
  v10 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v10 = &off_1E33A5968;
  *((_QWORD *)v10 + 1) = v6;
  v18 = v10;
  v12 = *(unsigned int *)(v4 + 196);
  if ((_DWORD)v12 == *(_DWORD *)(v4 + 192))
  {
    v13 = (unsigned int **)WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4 + 184, v12 + 1, (unint64_t)&v18);
    v12 = *(unsigned int *)(v4 + 196);
    v14 = (unsigned int **)(*(_QWORD *)(v4 + 184) + 8 * v12);
    v10 = *v13;
  }
  else
  {
    v14 = (unsigned int **)(*(_QWORD *)(v4 + 184) + 8 * v12);
    v13 = &v18;
  }
  *v13 = 0;
  *v14 = v10;
  *(_DWORD *)(v4 + 196) = v12 + 1;
  if (!*(_BYTE *)(v4 + 279))
  {
    *(_BYTE *)(v4 + 279) = 1;
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v15 = off_1E33A78D8;
    v19 = v15;
    v20 = 0;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v4 + 336))(v4, &v19);
    v16 = v19;
    v19 = 0;
    if (v16)
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
  }
  this = v18;
  v18 = 0;
  if (this)
    this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
  v17 = *(unsigned __int8 *)(v4 + 274);
  if (*(_BYTE *)(v4 + 274))
  {
    if (v17 == 1)
    {
      if (*(_DWORD *)(v4 + 312) == 1)
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
      else
        --*(_DWORD *)(v4 + 312);
    }
    else if (v17 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v4 + 312));
    }
  }
  else if (*(_DWORD *)(v4 - 168) == 2)
  {
    if ((*(_WORD *)(v4 - 162) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 192), v11);
  }
  else
  {
    *(_DWORD *)(v4 - 168) -= 2;
  }
  return this;
}

unsigned int *WebCore::MessagePort::contextDestroyed(WebCore::MessagePort *this)
{
  void *v2;
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  WebCore::MessagePort::close((uint64_t)this);
  result = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v2);
    }
  }
  return result;
}

WTF *WebCore::MessagePort::dispatchEvent(WTF *this, WebCore::Event *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  if (!*((_BYTE *)this + 57))
  {
    v3 = this;
    v4 = *((_QWORD *)this + 1);
    if (!v4)
      return WebCore::EventTarget::dispatchEvent((WTF *)((char *)v3 + 24), a2);
    v5 = *(_QWORD *)(v4 + 8);
    if (!v5)
      return WebCore::EventTarget::dispatchEvent((WTF *)((char *)v3 + 24), a2);
    this = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 96) + 64))(v5 - 96);
    if (!(_DWORD)this)
      return WebCore::EventTarget::dispatchEvent((WTF *)((char *)v3 + 24), a2);
    v6 = *(_DWORD *)(v5 + 216);
    *(_DWORD *)(v5 + 216) = v6 + 1;
    v7 = *(unsigned __int8 *)(v5 + 305);
    if (v6)
      *(_DWORD *)(v5 + 216) = v6;
    else
      this = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 96) + 40))(v5 - 96);
    if (!v7)
      return WebCore::EventTarget::dispatchEvent((WTF *)((char *)v3 + 24), a2);
  }
  return this;
}

WTF *`non-virtual thunk to'WebCore::MessagePort::dispatchEvent(WTF *this, WebCore::Event *a2)
{
  WebCore::EventTarget *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  if (!*((_BYTE *)this + 33))
  {
    v3 = this;
    v4 = *((_QWORD *)this - 2);
    if (!v4)
      return WebCore::EventTarget::dispatchEvent(v3, a2);
    v5 = *(_QWORD *)(v4 + 8);
    if (!v5)
      return WebCore::EventTarget::dispatchEvent(v3, a2);
    this = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 96) + 64))(v5 - 96);
    if (!(_DWORD)this)
      return WebCore::EventTarget::dispatchEvent(v3, a2);
    v6 = *(_DWORD *)(v5 + 216);
    *(_DWORD *)(v5 + 216) = v6 + 1;
    v7 = *(unsigned __int8 *)(v5 + 305);
    if (v6)
    {
      *(_DWORD *)(v5 + 216) = v6;
      if (v7)
        return this;
      return WebCore::EventTarget::dispatchEvent(v3, a2);
    }
    this = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 96) + 40))(v5 - 96);
    if (!v7)
      return WebCore::EventTarget::dispatchEvent(v3, a2);
  }
  return this;
}

_QWORD *WTF::map<0ul,WTF::CrashOnOverflow,16ul,WebCore::MessagePort::disentanglePorts(WTF::Vector<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,WTF::Vector<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  WebCore::ScriptExecutionContext *v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _OWORD v12[2];

  *result = 0;
  result[1] = 0;
  v2 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v2)
  {
    if (v2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = result;
      result = (_QWORD *)WTF::fastMalloc((WTF *)(32 * v2));
      *((_DWORD *)v4 + 2) = v2;
      *v4 = result;
      v6 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v6)
      {
        v7 = result;
        v8 = 0;
        v9 = *a2;
        v10 = 8 * v6;
        do
        {
          result = WebCore::MessagePort::disentangle(*(WebCore::MessagePort **)(v9 + 8 * v8), v5, v12);
          v11 = v12[1];
          *v7 = v12[0];
          v7[1] = v11;
          v7 += 2;
          *((_DWORD *)v4 + 3) = ++v8;
          v10 -= 8;
        }
        while (v10);
      }
    }
  }
  return result;
}

uint64_t **WTF::HashSet<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::DefaultHash<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTableTraits>::~HashSet(uint64_t **a1, void *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  v3 = *a1;
  if (*a1)
  {
    v4 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v4)
    {
      v5 = *a1;
      do
      {
        if (*v5 != -1)
          v5 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v5, a2);
        ++v5;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  return a1;
}

_QWORD *WTF::map<0ul,WTF::CrashOnOverflow,16ul,WebCore::MessagePort::entanglePorts(WebCore::ScriptExecutionContext &,WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(_QWORD *result, uint64_t a2, WebCore::ScriptExecutionContext **a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  _OWORD *v12;
  WebCore::ScriptExecutionContext *v13;
  WebCore::ContextDestructionObserver *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  int v19;
  WebCore::ContextDestructionObserver *v20;

  *result = 0;
  result[1] = 0;
  v3 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      result = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v3));
      *((_DWORD *)v6 + 2) = v3;
      *v6 = result;
      v7 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v7)
      {
        v8 = result;
        v9 = 0;
        v10 = *(_OWORD **)a2;
        v11 = *(_QWORD *)a2 + 32 * v7;
        do
        {
          v12 = v10 + 1;
          WebCore::MessagePort::create(*a3, v10, v10 + 1, &v20);
          v14 = v20;
          v15 = *(_QWORD *)(*((_QWORD *)v20 + 1) + 8);
          v16 = *(unsigned __int8 *)(v15 + 178);
          if (*(_BYTE *)(v15 + 178))
          {
            if (v16 == 1 || v16 == 2)
              ++*(_DWORD *)(v15 + 216);
          }
          else
          {
            *(_DWORD *)(v15 - 264) += 2;
          }
          v17 = WebCore::MessagePortChannelProvider::fromContext((WebCore::MessagePortChannelProvider *)(v15 - 96), v13);
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 24))(v17, (uint64_t)v14 + 64, (uint64_t)v14 + 80);
          v19 = *(unsigned __int8 *)(v15 + 178);
          if (*(_BYTE *)(v15 + 178))
          {
            if (v19 == 1)
            {
              if (*(_DWORD *)(v15 + 216) == 1)
                result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v15 - 96) + 40))(v15 - 96);
              else
                --*(_DWORD *)(v15 + 216);
            }
            else if (v19 == 2)
            {
              result = WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v15 + 216));
            }
          }
          else if (*(_DWORD *)(v15 - 264) == 2)
          {
            if ((*(_WORD *)(v15 - 258) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)(v15 - 288), v18);
          }
          else
          {
            *(_DWORD *)(v15 - 264) -= 2;
          }
          v8[v9++] = v14;
          *((_DWORD *)v6 + 3) = v9;
          v10 = v12 + 1;
        }
        while (v12 + 1 != (_OWORD *)v11);
      }
    }
  }
  return result;
}

uint64_t WebCore::MessagePort::addEventListener(_BYTE *a1, WTF::StringImpl **a2, uint64_t *a3, unsigned __int8 *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow((WebCore *)a1);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  if (*a2 == *(WTF::StringImpl **)(v10 + 1192))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a3 + 48))(*a3))
      WebCore::MessagePort::start((unsigned int *)a1);
    a1[59] = 1;
  }
  return WebCore::EventTarget::addEventListener((WebCore *)(a1 + 24), a2, a3, a4);
}

uint64_t `non-virtual thunk to'WebCore::MessagePort::addEventListener(WebCore *a1, WTF::StringImpl **a2, uint64_t *a3, unsigned __int8 *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow(a1);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  if (*a2 == *(WTF::StringImpl **)(v10 + 1192))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a3 + 48))(*a3))
      WebCore::MessagePort::start((unsigned int *)a1 - 6);
    *((_BYTE *)a1 + 35) = 1;
  }
  return WebCore::EventTarget::addEventListener(a1, a2, a3, a4);
}

uint64_t WebCore::MessagePort::removeEventListener(WebCore *a1, WTF::StringImpl **a2, WebCore::EventListener *a3, unsigned __int8 *a4)
{
  WebCore *v4;
  uint64_t v5;
  _QWORD *v9;
  WebCore::EventListenerMap *v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  _QWORD *v26;

  v4 = a1;
  v5 = *((_QWORD *)a1 + 5);
  if ((v5 & 0x1000000000000) == 0)
    goto LABEL_13;
  v9 = (_QWORD *)((char *)a1 + 24);
  v10 = (WebCore::EventListenerMap *)((v5 & 0xFFFFFFFFFFFFLL) + 16);
  v11 = *a4;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD *))(*v9 + 8))((_QWORD *)a1 + 3);
    if (v24)
    {
      v26 = (_QWORD *)WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25);
      if (v26)
        WebCore::InspectorInstrumentation::willRemoveEventListenerImpl(v26, (WebCore *)((char *)v4 + 24), a2, a3, v11 != 0);
    }
  }
  a1 = (WebCore *)WebCore::EventListenerMap::remove(v10, (const WTF::AtomString *)a2, a3, *a4);
  if ((_DWORD)a1)
  {
    a1 = (WebCore *)(*(uint64_t (**)(uint64_t))(*v9 + 80))((uint64_t)v4 + 24);
    v13 = 1;
  }
  else
  {
LABEL_13:
    v13 = 0;
  }
  v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v14 || (v15 = *(_QWORD *)(v14 + 96)) == 0)
    v15 = WebCore::threadGlobalDataSlow(a1);
  v16 = *(_QWORD *)(v15 + 40);
  if (!v16)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v15);
    v16 = *(_QWORD *)(v15 + 40);
  }
  v17 = *((_QWORD *)v4 + 5);
  if ((v17 & 0x1000000000000) != 0 && (v19 = v17 & 0xFFFFFFFFFFFFLL, v20 = *(unsigned int *)(v19 + 28), (_DWORD)v20))
  {
    v21 = *(_QWORD **)(v19 + 16);
    v22 = *(_QWORD *)(v16 + 1192);
    v23 = 32 * v20;
    while (*v21 != v22)
    {
      v21 += 4;
      v23 -= 32;
      if (!v23)
        goto LABEL_11;
    }
  }
  else
  {
LABEL_11:
    *((_BYTE *)v4 + 59) = 0;
  }
  return v13;
}

WebCore::MicrotaskQueue *WebCore::MicrotaskQueue::MicrotaskQueue(WebCore::MicrotaskQueue *this, JSC::VM *a2, WebCore::EventLoop *a3)
{
  unsigned int v5;
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  do
    v5 = __ldaxr((unsigned int *)a2);
  while (__stlxr(v5 + 1, (unsigned int *)a2));
  *((_QWORD *)this + 3) = a2;
  v6 = *((_QWORD *)a3 + 2);
  if (v6)
    goto LABEL_13;
  v6 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = a3;
  v8 = (unsigned int *)*((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 2) = v6;
  if (!v8)
    goto LABEL_13;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  v6 = *((_QWORD *)a3 + 2);
  if (v6)
  {
LABEL_13:
    do
      v11 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v11 + 1, (unsigned int *)v6));
  }
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = v6;
  return this;
}

{
  unsigned int v5;
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  do
    v5 = __ldaxr((unsigned int *)a2);
  while (__stlxr(v5 + 1, (unsigned int *)a2));
  *((_QWORD *)this + 3) = a2;
  v6 = *((_QWORD *)a3 + 2);
  if (v6)
    goto LABEL_13;
  v6 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = a3;
  v8 = (unsigned int *)*((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 2) = v6;
  if (!v8)
    goto LABEL_13;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  v6 = *((_QWORD *)a3 + 2);
  if (v6)
  {
LABEL_13:
    do
      v11 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v11 + 1, (unsigned int *)v6));
  }
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = v6;
  return this;
}

uint64_t *WebCore::MicrotaskQueue::append(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = (uint64_t *)a2;
  result = (uint64_t *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 16))
  {
    result = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v5 + 1, a2);
    v2 = result;
    v5 = *(unsigned int *)(a1 + 20);
    v6 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v5);
  }
  else
  {
    v6 = (_QWORD *)(*result + 8 * v5);
  }
  v7 = *v2;
  *v2 = 0;
  *v6 = v7;
  *(_DWORD *)(a1 + 20) = v5 + 1;
  return result;
}

uint64_t *WebCore::MicrotaskQueue::addCheckpointTask(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = (uint64_t *)a2;
  result = (uint64_t *)(a1 + 40);
  v5 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 48))
  {
    result = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v5 + 1, a2);
    v2 = result;
    v5 = *(unsigned int *)(a1 + 52);
    v6 = (_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v5);
  }
  else
  {
    v6 = (_QWORD *)(*result + 8 * v5);
  }
  v7 = *v2;
  *v2 = 0;
  *v6 = v7;
  *(_DWORD *)(a1 + 52) = v5 + 1;
  return result;
}

WebCore *WebCore::MouseEvent::create@<X0>(WebCore *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  char v18;
  int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _DWORD *v25;
  uint64_t v26;
  WebCore *result;
  char v28;
  char v29;
  __int16 v30;
  uint64_t v33;

  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v10 || (v11 = *(_QWORD *)(v10 + 96)) == 0)
    v11 = WebCore::threadGlobalDataSlow(a1);
  v12 = *(_QWORD *)(v11 + 40);
  if (!v12)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v11);
    v12 = *(_QWORD *)(v11 + 40);
  }
  v13 = 2490880;
  if (*(_QWORD *)a1 != *(_QWORD *)(v12 + 1216))
  {
    if (*(_QWORD *)a1 == *(_QWORD *)(v12 + 1224))
      v13 = 2490880;
    else
      v13 = 2490894;
  }
  v33 = *a3;
  WTF::WallTime::approximateMonotonicTime((WTF::WallTime *)&v33);
  v15 = v14;
  v16 = (double)*((int *)a3 + 17);
  v17 = (double)*((int *)a3 + 18);
  v18 = *((_BYTE *)a3 + 9);
  v19 = *((unsigned __int8 *)a3 + 48);
  v30 = *((_WORD *)a3 + 60);
  v20 = a3[11];
  v21 = *((_BYTE *)a3 + 49);
  v22 = bmalloc::api::isoAllocate();
  v23 = v22;
  *(_QWORD *)(v22 + 8) = 0;
  v24 = v13 | (*(_QWORD *)a1 != 0) | *(_DWORD *)(v22 + 20) & 0xFFC00000;
  *(_DWORD *)(v22 + 16) = 1;
  *(_DWORD *)(v22 + 20) = v24;
  v25 = *(_DWORD **)a1;
  if (*(_QWORD *)a1)
    *v25 += 2;
  *(_QWORD *)(v22 + 24) = v25;
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  *(_QWORD *)(v22 + 48) = 0;
  *(_QWORD *)(v22 + 56) = v15;
  *(_QWORD *)(v22 + 64) = 0;
  v26 = *a2;
  *a2 = 0;
  *(_QWORD *)(v22 + 72) = v26;
  *(_DWORD *)(v22 + 80) = a4;
  *(_BYTE *)(v22 + 84) = v18;
  *(_QWORD *)v22 = off_1E33A5D38;
  *(_QWORD *)(v22 + 88) = *(uint64_t *)((char *)a3 + 60);
  *(_QWORD *)(v22 + 96) = 0;
  *(double *)(v22 + 104) = v16;
  *(double *)(v22 + 112) = v17;
  *(_OWORD *)(v22 + 120) = 0u;
  *(_OWORD *)(v22 + 136) = 0u;
  *(_WORD *)(v22 + 152) = 0;
  result = WebCore::MouseRelatedEvent::init((WebCore::MouseRelatedEvent *)v22, 0, (const WebCore::IntPoint *)((char *)a3 + 52));
  *(_QWORD *)v23 = off_1E33A5C38;
  if (v19 == 254)
    v28 = 0;
  else
    v28 = v19;
  *(_WORD *)(v23 + 154) = v28;
  *(_WORD *)(v23 + 156) = v30;
  if (v19 == 254)
    v29 = 0;
  else
    v29 = v21;
  *(_BYTE *)(v23 + 158) = v29;
  *(_BYTE *)(v23 + 159) = v19 != 254;
  if (a5)
  {
    if ((*(_BYTE *)(a5 + 22) & 2) != 0)
      *(_DWORD *)(a5 + 24) += 2;
    else
      result = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 88))(a5);
  }
  *(_QWORD *)(v23 + 160) = a5;
  *(_QWORD *)(v23 + 168) = v20;
  *a6 = v23;
  return result;
}

WebCore *WebCore::MouseEvent::create@<X0>(_QWORD *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t *a5@<X4>, int a6@<W5>, _QWORD *a7@<X6>, const WebCore::IntPoint *a8@<X7>, uint64_t *a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, char a14, int a15, char a16, __int16 a17, uint64_t a18, char a19, char a20,char a21)
{
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  _DWORD *v37;
  uint64_t v38;
  WebCore *result;
  __int16 v40;

  v30 = bmalloc::api::isoAllocate();
  v31 = v30;
  *(_QWORD *)(v30 + 8) = 0;
  if (a3)
    v32 = 4;
  else
    v32 = 0;
  if (a4)
    v33 = 8;
  else
    v33 = 0;
  if (a21)
    v34 = 512;
  else
    v34 = 0;
  if (a2)
    v35 = 2490370;
  else
    v35 = 2490368;
  v36 = v32 | v35 | v33 | v34 | (*a1 != 0) | *(_DWORD *)(v30 + 20) & 0xFFC00000;
  *(_DWORD *)(v30 + 16) = 1;
  *(_DWORD *)(v30 + 20) = v36;
  v37 = (_DWORD *)*a1;
  if (*a1)
    *v37 += 2;
  *(_QWORD *)(v30 + 24) = v37;
  *(_QWORD *)(v30 + 32) = 0;
  *(_QWORD *)(v30 + 40) = 0;
  *(_QWORD *)(v30 + 48) = 0;
  *(double *)(v30 + 56) = a10;
  *(_QWORD *)(v30 + 64) = 0;
  v38 = *a5;
  *a5 = 0;
  *(_QWORD *)(v30 + 72) = v38;
  *(_DWORD *)(v30 + 80) = a6;
  *(_BYTE *)(v30 + 84) = a14;
  *(_QWORD *)v30 = off_1E33A5D38;
  *(_QWORD *)(v30 + 88) = *a7;
  *(_QWORD *)(v30 + 96) = 0;
  *(double *)(v30 + 104) = a11;
  *(double *)(v30 + 112) = a12;
  *(_OWORD *)(v30 + 120) = 0u;
  *(_OWORD *)(v30 + 136) = 0u;
  *(_BYTE *)(v30 + 152) = a20;
  *(_BYTE *)(v30 + 153) = 0;
  result = WebCore::MouseRelatedEvent::init((WebCore::MouseRelatedEvent *)v30, a20, a8);
  *(_QWORD *)v31 = off_1E33A5C38;
  if (a16 == -2)
    v40 = 0;
  else
    v40 = a16;
  *(_WORD *)(v31 + 154) = v40;
  *(_WORD *)(v31 + 156) = a17;
  if (a16 == -2)
    a19 = 0;
  *(_BYTE *)(v31 + 158) = a19;
  *(_BYTE *)(v31 + 159) = a16 != -2;
  if (a18)
  {
    if ((*(_BYTE *)(a18 + 22) & 2) != 0)
      *(_DWORD *)(a18 + 24) += 2;
    else
      result = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a18 + 88))(a18);
  }
  *(_QWORD *)(v31 + 160) = a18;
  *(double *)(v31 + 168) = a13;
  *a9 = v31;
  return result;
}

uint64_t WebCore::MouseEvent::MouseEvent(uint64_t a1, char a2, _QWORD *a3, int a4, int a5, int a6, uint64_t *a7, int a8, double a9, double a10, _QWORD *a11, int32x2_t *a12, char a13, int a14, char a15, __int16 a16, char a17, uint64_t a18)
{
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  _DWORD *v31;
  uint64_t v32;
  __int16 v33;
  int8x8_t v35;
  int8x8_t v38;

  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  v38 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  if (a4)
    v28 = 2;
  else
    v28 = 0;
  if (a5)
    v29 = 4;
  else
    v29 = 0;
  if (a6)
    v30 = 8;
  else
    v30 = 0;
  *(_DWORD *)(a1 + 20) = v28 & 0xFFC07FFF | ((a2 & 0x7F) << 15) | v29 | v30 | *(_DWORD *)(a1 + 20) & 0xFFC00000 | (*a3 != 0) | 0x200;
  v31 = (_DWORD *)*a3;
  if (*a3)
    *v31 += 2;
  *(_QWORD *)(a1 + 24) = v31;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v27;
  *(_QWORD *)(a1 + 64) = 0;
  v32 = *a7;
  *a7 = 0;
  *(_QWORD *)(a1 + 72) = v32;
  *(_DWORD *)(a1 + 80) = a8;
  *(_BYTE *)(a1 + 84) = a13;
  *(_QWORD *)a1 = off_1E33A5D38;
  *(_QWORD *)(a1 + 88) = *a11;
  *(_QWORD *)(a1 + 96) = 0;
  *(double *)(a1 + 104) = a9;
  *(double *)(a1 + 112) = a10;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_WORD *)(a1 + 152) = 0;
  WebCore::MouseRelatedEvent::init((WebCore::MouseRelatedEvent *)a1, 0, (const WebCore::IntPoint *)&v38);
  *(_QWORD *)a1 = off_1E33A5C38;
  if (a15 == -2)
    v33 = 0;
  else
    v33 = a15;
  *(_WORD *)(a1 + 154) = v33;
  *(_WORD *)(a1 + 156) = a16;
  if (a15 == -2)
    a17 = 0;
  *(_BYTE *)(a1 + 158) = a17;
  *(_BYTE *)(a1 + 159) = a15 != -2;
  if (a18)
  {
    if ((*(_BYTE *)(a18 + 22) & 2) != 0)
      *(_DWORD *)(a18 + 24) += 2;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)a18 + 88))(a18);
  }
  *(_QWORD *)(a1 + 160) = a18;
  *(_QWORD *)(a1 + 168) = 0;
  v35 = (int8x8_t)vcgt_s32(*a12, (int32x2_t)0xFE000000FE000000);
  v38 = vorr_s8((int8x8_t)(*(_QWORD *)&v35 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, *a12), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(*a12, 6uLL)), v35));
  WebCore::MouseRelatedEvent::initCoordinates((WebCore::MouseRelatedEvent *)a1, (const WebCore::LayoutPoint *)&v38);
  return a1;
}

WebCore::MouseRelatedEvent *WebCore::MouseEvent::MouseEvent(WebCore::MouseRelatedEvent *a1, char a2, _QWORD *a3, int32x2_t *a4)
{
  uint64_t v6;
  int v7;
  BOOL v8;
  char v9;
  int32x2_t v10;
  int32x2_t v11;
  int8x8_t v12;
  int8x8_t v14;

  v6 = WebCore::MouseRelatedEvent::MouseRelatedEvent((uint64_t)a1, a2, a3, (unsigned __int8 *)a4);
  *(_QWORD *)v6 = off_1E33A5C38;
  v7 = a4[8].u16[0];
  v8 = v7 == 65534;
  if (v7 == 65534)
    LOWORD(v7) = 0;
  *(_WORD *)(v6 + 154) = v7;
  *(_WORD *)(v6 + 156) = a4[8].i16[1];
  *(_BYTE *)(v6 + 158) = 0;
  v9 = !v8;
  *(_BYTE *)(v6 + 159) = v9;
  v10 = a4[9];
  if (v10)
  {
    if ((*(_BYTE *)(*(_QWORD *)&v10 + 22) & 2) != 0)
      *(_DWORD *)(*(_QWORD *)&v10 + 24) += 2;
    else
      (*(void (**)(_QWORD))(**(_QWORD **)&v10 + 88))(*(_QWORD *)&a4[9]);
  }
  *((int32x2_t *)a1 + 20) = v10;
  *((_QWORD *)a1 + 21) = 0;
  v11 = a4[7];
  v12 = (int8x8_t)vcgt_s32(v11, (int32x2_t)0xFE000000FE000000);
  v14 = vorr_s8((int8x8_t)(*(_QWORD *)&v12 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v11), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v11, 6uLL)), v12));
  WebCore::MouseRelatedEvent::initCoordinates(a1, (const WebCore::LayoutPoint *)&v14);
  return a1;
}

void WebCore::MouseEvent::~MouseEvent(WebCore::MouseEvent *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E33A5C38;
  v3 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
  {
    if ((*(_BYTE *)(v3 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3);
    }
  }
  WebCore::UIEvent::~UIEvent(this, (WTF::StringImpl *)a2);
}

{
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;

  *(_QWORD *)this = off_1E33A5C38;
  v3 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
  {
    if ((*(_BYTE *)(v3 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3);
    }
  }
  WebCore::UIEvent::~UIEvent(this, (WTF::StringImpl *)a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

_BYTE *WebCore::MouseEvent::initMouseEvent(_BYTE *result, const WTF::AtomString *a2, int a3, int a4, _DWORD **a5, int a6, unsigned int a7, uint64_t a8, int32x2_t a9, char a10, char a11, char a12, char a13, __int16 a14, uint64_t a15)
{
  _BYTE *v17;
  void *v18;
  char v19;
  char v20;
  __int16 v21;
  uint64_t v22;
  int8x8_t v23;
  int8x8_t v24;

  if ((result[21] & 0x30) == 0)
  {
    v17 = result;
    WebCore::UIEvent::initUIEvent((uint64_t)result, a2, a3, a4, a5, a6);
    *((_QWORD *)v17 + 11) = a7 | (unint64_t)(a8 << 32);
    if (a10)
      v19 = 2;
    else
      v19 = 0;
    v20 = v19 | a11;
    if (a12)
      v20 |= 8u;
    if (a13)
      v20 |= 4u;
    v17[84] = v20;
    if (a14 == -2)
      v21 = 0;
    else
      v21 = a14;
    *((_WORD *)v17 + 77) = v21;
    v17[158] = 0;
    v17[159] = a14 != -2;
    if (a15)
    {
      if ((*(_BYTE *)(a15 + 22) & 2) != 0)
        *(_DWORD *)(a15 + 24) += 2;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)a15 + 88))(a15);
    }
    v22 = *((_QWORD *)v17 + 20);
    *((_QWORD *)v17 + 20) = a15;
    if (v22)
    {
      if ((*(_BYTE *)(v22 + 22) & 2) != 0)
      {
        if (*(_DWORD *)(v22 + 24) == 2)
        {
          if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v22, v18);
        }
        else
        {
          *(_DWORD *)(v22 + 24) -= 2;
        }
      }
      else
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 96))(v22);
      }
    }
    v23 = (int8x8_t)vcgt_s32(a9, (int32x2_t)0xFE000000FE000000);
    v24 = vorr_s8((int8x8_t)(*(_QWORD *)&v23 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, a9), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(a9, 6uLL)), v23));
    result = WebCore::MouseRelatedEvent::initCoordinates((WebCore::MouseRelatedEvent *)v17, (const WebCore::LayoutPoint *)&v24);
    v17[152] = 0;
  }
  return result;
}

uint64_t *WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>::operator=(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    if ((*((_BYTE *)a2 + 22) & 2) != 0)
      a2[6] += 2;
    else
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 88))(a2);
  }
  v4 = *a1;
  *a1 = (uint64_t)a2;
  if (v4)
  {
    if ((*(_BYTE *)(v4 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
    }
  }
  return a1;
}

uint64_t WebCore::MouseEvent::isMouseEvent(WebCore::MouseEvent *this)
{
  return 1;
}

uint64_t WebCore::MouseEvent::which(WebCore::MouseEvent *this)
{
  if (*((_BYTE *)this + 159))
    return (*((__int16 *)this + 77) + 1);
  else
    return 0;
}

WebCore::EventNames **WebCore::MouseEvent::toElement@<X0>(WebCore::EventNames **this@<X0>, WebCore::EventNames **a2@<X8>)
{
  WebCore::EventNames **v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::EventNames *v7;
  WebCore::EventNames *v8;

  v2 = this;
  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v5 = (uint64_t)this;
  }
  v6 = *(_QWORD *)(v5 + 40);
  if (!v6)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
    v6 = *(_QWORD *)(v5 + 40);
  }
  v7 = v2[3];
  if (v7 == *(WebCore::EventNames **)(v6 + 1240) || v7 == *(WebCore::EventNames **)(v6 + 1224))
  {
    v8 = v2[20];
    if (!v8)
      goto LABEL_15;
  }
  else
  {
    v8 = v2[6];
    if (!v8)
      goto LABEL_15;
  }
  if ((*((_BYTE *)v8 + 22) & 2) != 0)
    *((_DWORD *)v8 + 6) += 2;
  else
    this = (WebCore::EventNames **)(*(uint64_t (**)(WebCore::EventNames *))(*(_QWORD *)v8 + 88))(v8);
  if ((*((_BYTE *)v8 + 22) & 2) == 0)
  {
    *a2 = 0;
    return (WebCore::EventNames **)(*(uint64_t (**)(WebCore::EventNames *))(*(_QWORD *)v8 + 96))(v8);
  }
LABEL_15:
  *a2 = v8;
  return this;
}

unsigned int *WebCore::MouseEvent::fromElement@<X0>(unsigned int *this@<X0>, WebCore::Node **a2@<X8>)
{
  unsigned int *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::Node *v8;
  void *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;

  v2 = this;
  v11 = 0;
  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
  {
    this = (unsigned int *)WebCore::threadGlobalDataSlow((WebCore *)this);
    v5 = (uint64_t)this;
  }
  v6 = *(_QWORD *)(v5 + 40);
  if (!v6)
  {
    this = (unsigned int *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
    v6 = *(_QWORD *)(v5 + 40);
  }
  v7 = *((_QWORD *)v2 + 3);
  if (v7 == *(_QWORD *)(v6 + 1240) || v7 == *(_QWORD *)(v6 + 1224))
  {
    this = (unsigned int *)WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>::operator=((uint64_t *)&v11, *((_DWORD **)v2 + 6));
    v8 = 0;
    v10 = v11;
    v11 = 0;
    if (!v10)
      goto LABEL_23;
    v8 = v10;
  }
  else
  {
    v8 = (WebCore::Node *)*((_QWORD *)v2 + 20);
    if (!v8)
    {
LABEL_23:
      *a2 = v8;
      return this;
    }
    if ((*((_BYTE *)v8 + 22) & 2) != 0)
      *((_DWORD *)v8 + 6) += 2;
    else
      this = (unsigned int *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v8 + 88))(v8);
    v11 = 0;
  }
  if ((*((_BYTE *)v8 + 22) & 2) != 0)
    goto LABEL_23;
  *a2 = 0;
  (*(void (**)(WebCore::Node *))(*(_QWORD *)v8 + 96))(v8);
  this = (unsigned int *)v11;
  v11 = 0;
  if (this)
  {
    if ((*((_BYTE *)this + 22) & 2) != 0)
    {
      if (this[6] == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)this, v9);
      }
      else
      {
        this[6] -= 2;
      }
    }
    else
    {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 96))(this);
    }
  }
  return this;
}

void WebCore::LoadableImportMap::~LoadableImportMap(WebCore::LoadableImportMap *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::LoadableNonModuleScriptBase::~LoadableNonModuleScriptBase(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::LoadableImportMap::scriptType(WebCore::LoadableImportMap *this)
{
  return 2;
}

void `non-virtual thunk to'WebCore::LoadableImportMap::~LoadableImportMap(WebCore::LoadableImportMap *this, void *a2)
{
  WebCore::LoadableNonModuleScriptBase::~LoadableNonModuleScriptBase((WebCore::LoadableImportMap *)((char *)this - 72), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::LoadableNonModuleScriptBase::~LoadableNonModuleScriptBase((WebCore::LoadableImportMap *)((char *)this - 72), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::LoadableModuleScript::scriptType(WebCore::LoadableModuleScript *this)
{
  return 1;
}

uint64_t WebCore::MessagePort::ref(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 48);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
LABEL_3:
    this = MEMORY[0x19AEA534C](v1);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)v1))
    goto LABEL_3;
LABEL_4:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

uint64_t WebCore::MessagePort::deref(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  WebCore::MessagePort *v6;
  BOOL v7;
  int v8;
  bmalloc::api *v9;
  void *v10;
  uint64_t v11;

  v2 = *(_QWORD *)(this + 48);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
LABEL_3:
    this = MEMORY[0x19AEA534C](v2);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)v2))
    goto LABEL_3;
LABEL_4:
  v4 = *(_QWORD *)(v2 + 8);
  v5 = v4 - 1;
  *(_QWORD *)(v2 + 8) = v4 - 1;
  if (v4 == 1)
  {
    v11 = *(_QWORD *)(v2 + 16);
    v6 = *(WebCore::MessagePort **)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    v7 = v11 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr((unsigned __int8 *)v2);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
      goto LABEL_8;
  }
  else
  {
    __clrex();
  }
  this = WTF::Lock::unlockSlow((WTF::Lock *)v2);
LABEL_8:
  if (!v5)
  {
    if (v6)
    {
      WebCore::MessagePort::~MessagePort(v6, a2);
      this = bmalloc::api::isoDeallocate(v9, v10);
    }
    if (!v7)
      return WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

uint64_t WebCore::MessagePort::stop(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  __int128 v4;
  uint64_t v5;

  if (!*(_BYTE *)(this + 57))
  {
    v1 = this;
    *(_BYTE *)(this + 57) = 1;
    v4 = *(_OWORD *)(this + 64);
    v2 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v2 = off_1E33A5990;
    *(_OWORD *)(v2 + 8) = v4;
    v5 = v2;
    WTF::ensureOnMainThread();
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    return WebCore::EventTarget::removeAllEventListeners(v1 + 24, v3);
  }
  return this;
}

uint64_t WebCore::MessagePort::eventTargetInterface(WebCore::MessagePort *this)
{
  return 65;
}

uint64_t WebCore::MessagePort::refEventTarget(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 48);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
LABEL_3:
    this = MEMORY[0x19AEA534C](v1);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)v1))
    goto LABEL_3;
LABEL_4:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

uint64_t WebCore::MessagePort::derefEventTarget(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  WebCore::MessagePort *v6;
  BOOL v7;
  int v8;
  bmalloc::api *v9;
  void *v10;
  uint64_t v11;

  v2 = *(_QWORD *)(this + 48);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
LABEL_3:
    this = MEMORY[0x19AEA534C](v2);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)v2))
    goto LABEL_3;
LABEL_4:
  v4 = *(_QWORD *)(v2 + 8);
  v5 = v4 - 1;
  *(_QWORD *)(v2 + 8) = v4 - 1;
  if (v4 == 1)
  {
    v11 = *(_QWORD *)(v2 + 16);
    v6 = *(WebCore::MessagePort **)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    v7 = v11 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr((unsigned __int8 *)v2);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
      goto LABEL_8;
  }
  else
  {
    __clrex();
  }
  this = WTF::Lock::unlockSlow((WTF::Lock *)v2);
LABEL_8:
  if (!v5)
  {
    if (v6)
    {
      WebCore::MessagePort::~MessagePort(v6, a2);
      this = bmalloc::api::isoDeallocate(v9, v10);
    }
    if (!v7)
      return WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

uint64_t WebCore::MessageEvent::MessageEvent(uint64_t a1, _QWORD *a2, uint64_t a3, _DWORD **a4, _DWORD **a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v14;
  unsigned int v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  char v27;

  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *(_DWORD *)(a1 + 20) & 0xFFC00000 | 0x258200 | (*a2 != 0);
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = v15;
  v16 = (_DWORD *)*a2;
  if (*a2)
    *v16 += 2;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v14;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)a1 = off_1E33A5A68;
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = -1;
  v17 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v17 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E33A5840[v17])(&v26, a1 + 72, a3);
    *(_DWORD *)(a1 + 80) = v17;
  }
  v18 = *a4;
  if (*a4)
    *v18 += 2;
  *(_QWORD *)(a1 + 88) = v18;
  v19 = *a5;
  if (*a5)
    *v19 += 2;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = v19;
  *(_BYTE *)(a1 + 120) = 0;
  if (*(_BYTE *)(a6 + 16))
  {
    *(_DWORD *)(a1 + 112) = -1;
    v20 = *(unsigned int *)(a6 + 8);
    if ((_DWORD)v20 != -1)
    {
      ((void (*)(char *))off_1E33A5880[v20])(&v27);
      *(_DWORD *)(a1 + 112) = v20;
    }
    *(_BYTE *)(a1 + 120) = 1;
  }
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v21 = *a7;
  *a7 = 0;
  *(_QWORD *)(a1 + 128) = v21;
  LODWORD(v21) = *((_DWORD *)a7 + 2);
  *((_DWORD *)a7 + 2) = 0;
  *(_DWORD *)(a1 + 136) = v21;
  LODWORD(v21) = *((_DWORD *)a7 + 3);
  *((_DWORD *)a7 + 3) = 0;
  *(_DWORD *)(a1 + 140) = v21;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  __dmb(0xAu);
  v22 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v22)
    *(_QWORD *)(v22 + 8) = 3;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  __dmb(0xAu);
  v23 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v23)
    *(_QWORD *)(v23 + 8) = 3;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  __dmb(0xAu);
  v24 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v24)
    *(_QWORD *)(v24 + 8) = 3;
  *(_BYTE *)(a1 + 192) = 0;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore12MessageEvent10JSValueTagEN3WTF3RefINS8_21SerializedScriptValueENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEENSB_6StringENSC_INS8_4BlobENSE_ISK_EENSG_ISK_EEEENSC_IN3JSC11ArrayBufferENSE_ISP_EENSG_ISP_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIST_LNS0_6_TraitE1EEEEEvRSU_OT_EUlRS10_OT0_E_JRNS0_6__baseILSX_1EJSA_SI_SJ_SN_SS_EEEOS18_EEEDcS10_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore12MessageEvent10JSValueTagEN3WTF3RefINS8_21SerializedScriptValueENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEENSB_6StringENSC_INS8_4BlobENSE_ISK_EENSG_ISK_EEEENSC_IN3JSC11ArrayBufferENSE_ISP_EENSG_ISP_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIST_LNS0_6_TraitE1EEEEEvRSU_OT_EUlRS10_OT0_E_JRNS0_6__baseILSX_1EJSA_SI_SJ_SN_SS_EEEOS18_EEEDcS10_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore12MessageEvent10JSValueTagEN3WTF3RefINS8_21SerializedScriptValueENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEENSB_6StringENSC_INS8_4BlobENSE_ISK_EENSG_ISK_EEEENSC_IN3JSC11ArrayBufferENSE_ISP_EENSG_ISP_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIST_LNS0_6_TraitE1EEEEEvRSU_OT_EUlRS10_OT0_E_JRNS0_6__baseILSX_1EJSA_SI_SJ_SN_SS_EEEOS18_EEEDcS10_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore12MessageEvent10JSValueTagEN3WTF3RefINS8_21SerializedScriptValueENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEENSB_6StringENSC_INS8_4BlobENSE_ISK_EENSG_ISK_EEEENSC_IN3JSC11ArrayBufferENSE_ISP_EENSG_ISP_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIST_LNS0_6_TraitE1EEEEEvRSU_OT_EUlRS10_OT0_E_JRNS0_6__baseILSX_1EJSA_SI_SJ_SN_SS_EEEOS18_EEEDcS10_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WebCore::MessageEvent::MessageEvent(uint64_t a1, _QWORD *a2, unsigned __int8 *a3, int a4)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *Allocator;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;

  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  v9 = *a3;
  v10 = a3[1];
  v11 = a3[2];
  *(_QWORD *)(a1 + 8) = 0;
  if (a4)
    v12 = 2458112;
  else
    v12 = 2457600;
  v13 = v12 | (2 * v9) | (4 * v10) | (8 * v11) | (*a2 != 0) | *(_DWORD *)(a1 + 20) & 0xFFC00000;
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = v13;
  v14 = (_DWORD *)*a2;
  if (*a2)
  {
    *v14 += 2;
    v13 = *(_DWORD *)(a1 + 20);
  }
  *(_QWORD *)(a1 + 24) = v14;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 20) = v13 | 0x4000;
  *(_QWORD *)a1 = off_1E33A5A68;
  *(_DWORD *)(a1 + 80) = 0;
  v15 = (_DWORD *)*((_QWORD *)a3 + 2);
  if (v15)
    *v15 += 2;
  *(_QWORD *)(a1 + 88) = v15;
  v16 = (_DWORD *)*((_QWORD *)a3 + 3);
  if (v16)
    *v16 += 2;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = v16;
  *(_BYTE *)(a1 + 120) = 0;
  if (a3[48])
  {
    *(_DWORD *)(a1 + 112) = -1;
    v17 = *((unsigned int *)a3 + 10);
    if ((_DWORD)v17 != -1)
    {
      ((void (*)(char *))off_1E33A5880[v17])(&v26);
      *(_DWORD *)(a1 + 112) = v17;
    }
    *(_BYTE *)(a1 + 120) = 1;
  }
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v18 = *((_QWORD *)a3 + 7);
  *((_QWORD *)a3 + 7) = 0;
  *(_QWORD *)(a1 + 128) = v18;
  LODWORD(v18) = *((_DWORD *)a3 + 16);
  *((_DWORD *)a3 + 16) = 0;
  *(_DWORD *)(a1 + 136) = v18;
  LODWORD(v18) = *((_DWORD *)a3 + 17);
  *((_DWORD *)a3 + 17) = 0;
  *(_DWORD *)(a1 + 140) = v18;
  v19 = *((_QWORD *)a3 + 1);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  if ((v19 & 0xFFFE000000000002) != 0)
  {
    *(_QWORD *)(a1 + 144) = v19;
  }
  else
  {
    if (v19)
    {
      if ((v19 & 8) != 0)
        v25 = ((v19 - 112) | 1) + 47;
      else
        v25 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFC000) + 32;
      Allocator = *(_QWORD **)(v25 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v25 + 16) = *Allocator;
      *Allocator = v19;
      Allocator[1] = 0;
      Allocator[2] = 0;
    }
    else
    {
      Allocator = 0;
    }
    __dmb(0xAu);
    v21 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 152) = Allocator;
    if (v21)
      *(_QWORD *)(v21 + 8) = 3;
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  __dmb(0xAu);
  v22 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v22)
    *(_QWORD *)(v22 + 8) = 3;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  __dmb(0xAu);
  v23 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v23)
    *(_QWORD *)(v23 + 8) = 3;
  *(_BYTE *)(a1 + 192) = 0;
  return a1;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  unsigned int v8;

  if (*a1)
    v1 = *(_DWORD *)(*a1 - 12);
  else
    v1 = 0;
  v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1)
      goto LABEL_9;
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_7:
    v5 = (double)v1;
    v6 = (double)v4;
    v7 = 0.604166667;
    goto LABEL_10;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400)
    goto LABEL_7;
LABEL_9:
  v5 = (double)v1;
  v6 = (double)v4;
  v7 = 0.416666667;
LABEL_10:
  if (v6 * v7 <= v5)
    LODWORD(v4) = 2 * v4;
  if (v4 <= 8)
    v8 = 8;
  else
    v8 = v4;
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v8, 0);
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unsigned int **v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v11 = 0;
    do
    {
      v14 = (unsigned int **)(v6 + 16 * v13);
      if (*v14 != (unsigned int *)-1)
      {
        if (*v14)
        {
          v17 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::reinsert(*a1, (uint64_t *)(v6 + 16 * v13));
          v18 = *v14;
          *v14 = 0;
          if (v18)
          {
            v19 = v17;
            do
            {
              v15 = __ldaxr(v18);
              v16 = --v15 == 0;
            }
            while (__stlxr(v15, v18));
            v17 = v19;
            if (v16)
            {
              atomic_store(1u, v18);
              WTF::fastFree((WTF *)v18, v10);
              v17 = v19;
            }
          }
          if (v14 == a3)
            v11 = v17;
        }
        else
        {
          *v14 = 0;
        }
      }
      ++v13;
    }
    while (v13 != v7);
    goto LABEL_17;
  }
  v11 = 0;
  result = 0;
  if (v6)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::reinsert(uint64_t a1, uint64_t *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = ~(*a2 << 32) + *a2;
  v4 = (v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13);
  v5 = (9 * (v4 ^ (v4 >> 8))) ^ ((9 * (v4 ^ (v4 >> 8))) >> 15);
  v6 = v2 & (((v5 + ~(v5 << 27)) >> 31) ^ (v5 + ~((_DWORD)v5 << 27)));
  v7 = 1;
  do
  {
    v8 = v6;
    v9 = *(_QWORD *)(a1 + 16 * v6);
    v6 = (v6 + v7++) & v2;
  }
  while (v9);
  result = a1 + 16 * v8;
  *(_QWORD *)result = 0;
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v11;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::end(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    v4 = v2 + 16 * v3;
    *(_QWORD *)result = a2;
    *(_QWORD *)(result + 8) = v4;
  }
  else
  {
    v4 = 0;
    v3 = 0;
    *(_QWORD *)result = a2;
    *(_QWORD *)(result + 8) = 0;
  }
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v4;
  *(_QWORD *)(result + 32) = v2 + 16 * v3;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::MessageEvent::memoryCost(void)::$_0,WebCore::MessageEvent::memoryCost(void)::$_1,WebCore::MessageEvent::memoryCost(void)::$_2,WebCore::MessageEvent::memoryCost(void)::$_3,WebCore::MessageEvent::memoryCost(void)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MessageEvent::JSValueTag,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::String,WebCore::MessageEvent::JSValueTag<WebCore::Blob,WebCore::SerializedScriptValue<WTF::String>,WTF::RawPtrTraits<WTF::Ref><WTF::String>>,WebCore::MessageEvent::JSValueTag<JSC::ArrayBuffer,WebCore::SerializedScriptValue<JSC>,WTF::RawPtrTraits<WTF::Ref><JSC>>> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::MessageEvent::memoryCost(void)::$_0,WebCore::MessageEvent::memoryCost(void)::$_1,WebCore::MessageEvent::memoryCost(void)::$_2,WebCore::MessageEvent::memoryCost(void)::$_3,WebCore::MessageEvent::memoryCost(void)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MessageEvent::JSValueTag,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::String,WebCore::MessageEvent::JSValueTag<WebCore::Blob,WebCore::SerializedScriptValue<WTF::String>,WTF::RawPtrTraits<WTF::Ref><WTF::String>>,WebCore::MessageEvent::JSValueTag<JSC::ArrayBuffer,WebCore::SerializedScriptValue<JSC>,WTF::RawPtrTraits<WTF::Ref><JSC>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a2 + 248);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::MessageEvent::memoryCost(void)::$_0,WebCore::MessageEvent::memoryCost(void)::$_1,WebCore::MessageEvent::memoryCost(void)::$_2,WebCore::MessageEvent::memoryCost(void)::$_3,WebCore::MessageEvent::memoryCost(void)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MessageEvent::JSValueTag,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::String,WebCore::MessageEvent::JSValueTag<WebCore::Blob,WebCore::SerializedScriptValue<WTF::String>,WTF::RawPtrTraits<WTF::Ref><WTF::String>>,WebCore::MessageEvent::JSValueTag<JSC::ArrayBuffer,WebCore::SerializedScriptValue<JSC>,WTF::RawPtrTraits<WTF::Ref><JSC>>> const&>(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a2)
    return (*(_DWORD *)(*(_QWORD *)a2 + 4) << (((*(_DWORD *)(*(_QWORD *)a2 + 16) >> 2) & 1) == 0));
  else
    return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::MessageEvent::memoryCost(void)::$_0,WebCore::MessageEvent::memoryCost(void)::$_1,WebCore::MessageEvent::memoryCost(void)::$_2,WebCore::MessageEvent::memoryCost(void)::$_3,WebCore::MessageEvent::memoryCost(void)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MessageEvent::JSValueTag,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::String,WebCore::MessageEvent::JSValueTag<WebCore::Blob,WebCore::SerializedScriptValue<WTF::String>,WTF::RawPtrTraits<WTF::Ref><WTF::String>>,WebCore::MessageEvent::JSValueTag<JSC::ArrayBuffer,WebCore::SerializedScriptValue<JSC>,WTF::RawPtrTraits<WTF::Ref><JSC>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a2 + 72);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::MessageEvent::memoryCost(void)::$_0,WebCore::MessageEvent::memoryCost(void)::$_1,WebCore::MessageEvent::memoryCost(void)::$_2,WebCore::MessageEvent::memoryCost(void)::$_3,WebCore::MessageEvent::memoryCost(void)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MessageEvent::JSValueTag,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::String,WebCore::MessageEvent::JSValueTag<WebCore::Blob,WebCore::SerializedScriptValue<WTF::String>,WTF::RawPtrTraits<WTF::Ref><WTF::String>>,WebCore::MessageEvent::JSValueTag<JSC::ArrayBuffer,WebCore::SerializedScriptValue<JSC>,WTF::RawPtrTraits<WTF::Ref><JSC>>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *a2;
  if (*(_BYTE *)(*a2 + 64) && (v4 = *(_QWORD *)(v2 + 32)) != 0)
    return *(_QWORD *)(v4 + 32);
  else
    return *(_QWORD *)(v2 + 48);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MessagePort::notifyMessageAvailable(WebCore::MessagePortIdentifier const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E33A5918;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessagePort::notifyMessageAvailable(WebCore::MessagePortIdentifier const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33A5918;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessagePort::notifyMessageAvailable(WebCore::MessagePortIdentifier const&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WebCore::MessagePort *v11;
  BOOL v12;
  int v13;
  bmalloc::api *v14;
  void *v15;
  uint64_t v16;

  v2 = *(_QWORD *)(result + 8);
  if (!v2)
    return result;
  v3 = *(_QWORD *)(result + 16);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_7;
  }
  result = MEMORY[0x19AEA534C](v2);
LABEL_7:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
LABEL_14:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v3)
    return result;
  result = (uint64_t)WebCore::MessagePort::messageAvailable((unsigned int *)v3, a2);
  v7 = *(_QWORD *)(v3 + 48);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_20;
  }
  result = MEMORY[0x19AEA534C](v7);
LABEL_20:
  v9 = *(_QWORD *)(v7 + 8);
  v10 = v9 - 1;
  *(_QWORD *)(v7 + 8) = v9 - 1;
  if (v9 == 1)
  {
    v16 = *(_QWORD *)(v7 + 16);
    v11 = *(WebCore::MessagePort **)(v7 + 24);
    *(_QWORD *)(v7 + 24) = 0;
    v12 = v16 != 0;
  }
  else
  {
    v11 = 0;
    v12 = 1;
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_26;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
LABEL_26:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (!v10)
  {
    if (v11)
    {
      WebCore::MessagePort::~MessagePort(v11, v6);
      result = bmalloc::api::isoDeallocate(v14, v15);
    }
    if (!v12)
      return WTF::fastFree((WTF *)v7, v6);
  }
  return result;
}

void WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::expand(unint64_t *a1)
{
  int v2;
  unsigned int v3;

  if (qword_1ECE831F0 && (v2 = *(_DWORD *)(qword_1ECE831F0 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(qword_1ECE831F0 - 12) >= (2 * v2));
  else
    v3 = 8;
  WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::rehash(v3, a1);
}

void WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::rehash(unsigned int a1, unint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v51;

  v3 = &qword_1ECE83000;
  v4 = qword_1ECE831F0;
  if (qword_1ECE831F0)
  {
    v5 = *(_DWORD *)(qword_1ECE831F0 - 4);
    v6 = *(_DWORD *)(qword_1ECE831F0 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)((32 * a1) | 0x10));
  v9 = (_DWORD *)v7;
  v10 = v7 + 16;
  if (a1)
    bzero((void *)(v7 + 16), 32 * a1);
  qword_1ECE831F0 = v10;
  v9[2] = a1 - 1;
  v9[3] = a1;
  *v9 = 0;
  *(_DWORD *)(qword_1ECE831F0 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    while (1)
    {
      v14 = (unint64_t *)(v4 + 32 * v11);
      v15 = *v14;
      if (*v14 == -1)
        goto LABEL_44;
      v16 = v14[1];
      if (v15 | v16)
      {
        v23 = v3[62];
        v51 = v12;
        if (v23)
          v24 = *(_DWORD *)(v23 - 8);
        else
          v24 = 0;
        v25 = 0;
        v26 = (v15 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v15 - 1640531527) << 16) ^ ((unsigned __int16)v15 - 1640531527);
        v27 = (v15 >> 37) & 0x7FFF800 ^ ((v26 + WORD2(v15) + (v26 >> 11)) << 16) ^ (v26 + WORD2(v15) + (v26 >> 11));
        v28 = (v16 >> 5) & 0x7FFF800 ^ ((v27 + (v27 >> 11) + (unsigned __int16)v16) << 16) ^ (v27 + (v27 >> 11) + (unsigned __int16)v16);
        v29 = (v16 >> 37) & 0x7FFF800 ^ ((v28 + WORD2(v16) + (v28 >> 11)) << 16) ^ (v28 + WORD2(v16) + (v28 >> 11));
        v30 = (v29 + (v29 >> 11)) ^ (8 * (v29 + (v29 >> 11)));
        v31 = (v30 + (v30 >> 5)) ^ (4 * (v30 + (v30 >> 5)));
        v32 = (v31 + (v31 >> 15)) ^ ((v31 + (v31 >> 15)) << 10);
        if (!v32)
          v32 = 0x800000;
        do
        {
          v33 = v32 & v24;
          v34 = v23 + 32 * v33;
          v32 = ++v25 + v33;
        }
        while (*(_OWORD *)v34 != 0);
        v35 = *(_QWORD *)(v34 + 16);
        *(_QWORD *)(v34 + 16) = 0;
        if (v35)
        {
          if (__ldaxr((unsigned __int8 *)v35))
          {
            __clrex();
            goto LABEL_26;
          }
          if (__stxr(1u, (unsigned __int8 *)v35))
LABEL_26:
            MEMORY[0x19AEA534C](v35);
          v37 = *(_QWORD *)(v35 + 16) - 1;
          *(_QWORD *)(v35 + 16) = v37;
          if (v37)
          {
            v48 = __ldxr((unsigned __int8 *)v35);
            if (v48 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v35))
                goto LABEL_32;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v35);
            goto LABEL_32;
          }
          v38 = *(_QWORD *)(v35 + 8);
          v39 = __ldxr((unsigned __int8 *)v35);
          if (v39 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v35))
            {
LABEL_30:
              if (!v38)
                WTF::fastFree((WTF *)v35, v8);
              goto LABEL_32;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v35);
          goto LABEL_30;
        }
LABEL_32:
        *(_OWORD *)v34 = *(_OWORD *)v14;
        v40 = v4 + 32 * v11;
        *(_QWORD *)(v34 + 16) = *(_QWORD *)(v40 + 16);
        v41 = *(_QWORD *)(v40 + 24);
        *(_QWORD *)(v40 + 16) = 0;
        *(_QWORD *)(v40 + 24) = 0;
        *(_QWORD *)(v23 + 32 * v33 + 24) = v41;
        v42 = *(_QWORD *)(v40 + 16);
        *(_QWORD *)(v40 + 16) = 0;
        if (v42)
        {
          if (__ldaxr((unsigned __int8 *)v42))
          {
            __clrex();
            goto LABEL_35;
          }
          if (__stxr(1u, (unsigned __int8 *)v42))
LABEL_35:
            MEMORY[0x19AEA534C](v42);
          v44 = *(_QWORD *)(v42 + 16) - 1;
          *(_QWORD *)(v42 + 16) = v44;
          if (!v44)
          {
            v45 = *(_QWORD *)(v42 + 8);
            v46 = __ldxr((unsigned __int8 *)v42);
            if (v46 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v42))
              {
LABEL_39:
                if (!v45)
                  WTF::fastFree((WTF *)v42, v8);
                goto LABEL_41;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v42);
            goto LABEL_39;
          }
          v49 = __ldxr((unsigned __int8 *)v42);
          if (v49 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v42))
              goto LABEL_41;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v42);
        }
LABEL_41:
        v12 = v51;
        if (v14 == a2)
          v12 = v34;
        v3 = &qword_1ECE83000;
        goto LABEL_44;
      }
      v17 = v4 + 32 * v11;
      v18 = *(_QWORD *)(v17 + 16);
      *(_QWORD *)(v17 + 16) = 0;
      if (!v18)
        goto LABEL_44;
      if (__ldaxr((unsigned __int8 *)v18))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v18))
      {
        goto LABEL_13;
      }
      MEMORY[0x19AEA534C](v18);
LABEL_13:
      v20 = *(_QWORD *)(v18 + 16) - 1;
      *(_QWORD *)(v18 + 16) = v20;
      if (!v20)
      {
        v21 = *(_QWORD *)(v18 + 8);
        v22 = __ldxr((unsigned __int8 *)v18);
        if (v22 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v18))
            goto LABEL_16;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v18);
LABEL_16:
        if (!v21)
          WTF::fastFree((WTF *)v18, v8);
        goto LABEL_44;
      }
      v47 = __ldxr((unsigned __int8 *)v18);
      if (v47 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v18))
          goto LABEL_44;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v18);
LABEL_44:
      if (++v11 == v13)
        goto LABEL_71;
    }
  }
  if (v4)
LABEL_71:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::expand()
{
  int v0;

  if (qword_1ECE831F8 && (v0 = *(_DWORD *)(qword_1ECE831F8 - 4)) != 0)
    return WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::rehash(v0 << (6 * *(_DWORD *)(qword_1ECE831F8 - 12) >= (2 * v0)));
  else
    return WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::rehash(8u);
}

uint64_t WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;

  v2 = qword_1ECE831F8;
  if (qword_1ECE831F8)
  {
    v3 = *(_DWORD *)(qword_1ECE831F8 - 4);
    v4 = *(_DWORD *)(qword_1ECE831F8 - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::allocateTable(a1);
  qword_1ECE831F8 = result;
  *(_DWORD *)(result - 8) = a1 - 1;
  *(_DWORD *)(result - 4) = a1;
  *(_DWORD *)(result - 16) = 0;
  *(_DWORD *)(qword_1ECE831F8 - 12) = v4;
  if (v3)
  {
    v7 = 0;
    v8 = qword_1ECE831F8;
    do
    {
      v9 = v2 + 48 * v7;
      v6 = *(_QWORD *)v9;
      if (*(_QWORD *)v9 != -1)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v6 | v10)
        {
          if (v8)
            v11 = *(_DWORD *)(v8 - 8);
          else
            v11 = 0;
          v12 = 0;
          v13 = (v6 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v6 - 1640531527) << 16) ^ ((unsigned __int16)v6 - 1640531527);
          v14 = (v6 >> 37) & 0x7FFF800 ^ ((v13 + WORD2(v6) + (v13 >> 11)) << 16) ^ (v13 + WORD2(v6) + (v13 >> 11));
          v15 = (v10 >> 5) & 0x7FFF800 ^ ((v14 + (v14 >> 11) + (unsigned __int16)v10) << 16) ^ (v14 + (v14 >> 11) + (unsigned __int16)v10);
          v16 = (v10 >> 37) & 0x7FFF800 ^ ((v15 + WORD2(v10) + (v15 >> 11)) << 16) ^ (v15 + WORD2(v10) + (v15 >> 11));
          v17 = (v16 + (v16 >> 11)) ^ (8 * (v16 + (v16 >> 11)));
          v18 = (v17 + (v17 >> 5)) ^ (4 * (v17 + (v17 >> 5)));
          v19 = (v18 + (v18 >> 15)) ^ ((v18 + (v18 >> 15)) << 10);
          if (v19)
            LODWORD(v6) = v19;
          else
            LODWORD(v6) = 0x800000;
          do
          {
            v20 = v6 & v11;
            v21 = (_OWORD *)(v8 + 48 * v20);
            v6 = ++v12 + v20;
          }
          while (*v21 != 0);
          v22 = *(_OWORD *)v9;
          v23 = *(_OWORD *)(v9 + 32);
          v21[1] = *(_OWORD *)(v9 + 16);
          v21[2] = v23;
          *v21 = v22;
        }
      }
      ++v7;
    }
    while (v7 != v3);
  }
  else if (!v2)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v2 - 16), (void *)v6);
}

uint64_t WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::allocateTable(unsigned int a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = WTF::fastMalloc((WTF *)(48 * a1 + 16)) + 16;
  if (a1)
  {
    v3 = a1;
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 32) = 0;
      *(_OWORD *)v4 = 0uLL;
      *(_OWORD *)(v4 + 16) = 0uLL;
      v4 += 48;
      --v3;
    }
    while (v3);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MessagePort::messageAvailable(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t *v3;
  void *v5;

  v3 = (uint64_t *)a1[1];
  *a1 = &off_1E33A5940;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      --*(_QWORD *)(v3[1] + 16);
      WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v3 + 1, a2);
      WTF::fastFree((WTF *)v3, v5);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessagePort::messageAvailable(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t *v3;
  void *v5;

  v3 = (uint64_t *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33A5940;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      --*(_QWORD *)(v3[1] + 16);
      WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v3 + 1, a2);
      WTF::fastFree((WTF *)v3, v5);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MessagePort::start(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t *v3;
  void *v5;

  v3 = (uint64_t *)a1[1];
  *a1 = &off_1E33A5968;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      --*(_QWORD *)(v3[1] + 16);
      WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v3 + 1, a2);
      WTF::fastFree((WTF *)v3, v5);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessagePort::start(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t *v3;
  void *v5;

  v3 = (uint64_t *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33A5968;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      --*(_QWORD *)(v3[1] + 16);
      WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v3 + 1, a2);
      WTF::fastFree((WTF *)v3, v5);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessagePort::close(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  {
    if (WebCore::globalProvider(void)::globalProvider && *(_QWORD *)(WebCore::globalProvider(void)::globalProvider + 8))
    {
LABEL_4:
      v2 = WebCore::globalProvider(void)::globalProvider;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8) + 40))(*(_QWORD *)(v2 + 8), a1 + 8);
    }
  }
  else
  {
    WebCore::globalProvider(void)::globalProvider = 0;
  }
  v4 = operator new();
  *(_QWORD *)v4 = &off_1E33A90B8;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (uint64_t *)(v4 + 8);
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 8), v4);
  v2 = *v5;
  if (*v5)
  {
    do
      v7 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v7 + 1, (unsigned int *)v2));
  }
  v8 = (unsigned int *)WebCore::globalProvider(void)::globalProvider;
  WebCore::globalProvider(void)::globalProvider = v2;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v6);
    }
    goto LABEL_4;
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8) + 40))(*(_QWORD *)(v2 + 8), a1 + 8);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MessagePort::dispatchMessages(void)::$_0,void,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t *v3;
  void *v5;

  *a1 = &off_1E33A59B8;
  v3 = (uint64_t *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      --*(_QWORD *)(v3[1] + 16);
      WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v3 + 1, a2);
      WTF::fastFree((WTF *)v3, v5);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessagePort::dispatchMessages(void)::$_0,void,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t *v3;
  void *v5;

  *(_QWORD *)this = &off_1E33A59B8;
  v3 = (uint64_t *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      --*(_QWORD *)(v3[1] + 16);
      WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v3 + 1, a2);
      WTF::fastFree((WTF *)v3, v5);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessagePort::dispatchMessages(void)::$_0,void,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&>::call(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::ScriptExecutionContext *v8;
  int v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t *v20;
  _DWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v38;
  unsigned int v39;
  void *v40;
  int v41;
  uint64_t v42;
  int v44;
  WebCore::ScriptExecutionContext *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WebCore::ScriptExecutionContext *v49;
  uint64_t (**v50)();
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  WTF *v59;
  uint64_t *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  WTF *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  WebCore::ScriptExecutionContext *v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  WebCore::ScriptExecutionContext *v76;
  int v77;
  char v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  unsigned int *v81;
  _DWORD *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  char v86;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = *a3;
  *a3 = 0;
  v5 = v3[1];
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v8 = (WebCore::ScriptExecutionContext *)(v6 - 96);
      v9 = *(unsigned __int8 *)(v6 + 178);
      if (*(_BYTE *)(v6 + 178))
      {
        if (v9 == 1 || v9 == 2)
          ++*(_DWORD *)(v6 + 216);
      }
      else
      {
        *(_DWORD *)(v6 - 264) += 2;
      }
      if (WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(v6 - 96)))
      {
        v70 = v6;
        v71 = v4;
        v74 = (WTF::StringImpl *)WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(v6 - 96));
        v11 = *((_QWORD *)v74 + 7);
        do
          v12 = __ldaxr((unsigned int *)v11);
        while (__stlxr(v12 + 1, (unsigned int *)v11));
        v72 = (WebCore::ScriptExecutionContext *)(v6 - 96);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 64))(v6 - 96))
          v13 = v6 - 96;
        else
          v13 = 0;
        v75 = v13;
        v14 = *((_DWORD *)a2 + 3);
        if (v14)
        {
          v15 = *a2;
          v73 = *a2 + 24 * v14;
          while (1)
          {
            if (v75 && *(_BYTE *)(v75 + 401))
              goto LABEL_99;
            if (*(_DWORD *)(v15 + 20))
            {
              v76 = v72;
              WTF::map<0ul,WTF::CrashOnOverflow,16ul,WebCore::MessagePort::entanglePorts(WebCore::ScriptExecutionContext &,WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v84, v15 + 8, &v76);
            }
            else
            {
              v84 = 0;
              v85 = 0;
            }
            v16 = *(unsigned int **)v15;
            *(_QWORD *)v15 = 0;
            v80 = 0;
            v81 = v16;
            v79 = 0;
            LOBYTE(v76) = 0;
            v78 = 0;
            WebCore::MessageEvent::create(v74, (uint64_t *)&v81, (_DWORD **)&v80, (_DWORD **)&v79, (uint64_t)&v76, (uint64_t *)&v84, (uint64_t *)&v82);
            if (v78 && v77 != -1)
              ((void (*)(char *, WebCore::ScriptExecutionContext **))off_1E33A5868[v77])(&v86, &v76);
            v17 = v79;
            v79 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, v10);
              else
                *(_DWORD *)v17 -= 2;
            }
            v18 = v80;
            v80 = 0;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2)
                WTF::StringImpl::destroy(v18, v10);
              else
                *(_DWORD *)v18 -= 2;
            }
            v81 = 0;
            if (v16)
            {
              do
              {
                v38 = __ldaxr(v16);
                v39 = v38 - 1;
              }
              while (__stlxr(v39, v16));
              if (!v39)
              {
                atomic_store(1u, v16);
                WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v16 + 2), v10);
                WTF::fastFree((WTF *)v16, v40);
              }
            }
            v19 = *(_QWORD *)(v11 + 16);
            if (!v19)
              break;
            if (*(_QWORD *)(v11 + 24) != v19)
            {
              __break(0xC471u);
              JUMPOUT(0x195A068BCLL);
            }
            v20 = v83;
            if (v83)
            {
LABEL_73:
              v55 = v20 - 2;
              v56 = *(_QWORD *)(((unint64_t)(v20 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v57 = (uint64_t *)*(v20 - 1);
              if (v57)
              {
                v58 = *v55;
                *v57 = *v55;
                *(_QWORD *)(v58 + 8) = v57;
                *v55 = 0;
                *(v20 - 1) = 0;
              }
              *v55 = *(_QWORD *)(v56 + 40);
              *(_QWORD *)(v56 + 40) = v55;
            }
LABEL_76:
            if (v82)
            {
              if (v82[4] == 1)
                (*(void (**)(void))(*(_QWORD *)v82 + 8))();
              else
                --v82[4];
            }
            if (HIDWORD(v85))
            {
              v60 = v84;
              v61 = 8 * HIDWORD(v85);
              do
              {
                v60 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v60, v10)+ 1;
                v61 -= 8;
              }
              while (v61);
            }
            v59 = (WTF *)v84;
            if (v84)
            {
              v84 = 0;
              LODWORD(v85) = 0;
              WTF::fastFree(v59, v10);
              if (v19)
                goto LABEL_99;
            }
            else if (v19)
            {
              goto LABEL_99;
            }
            v15 += 24;
            if (v15 == v73)
              goto LABEL_99;
          }
          v21 = v82;
          v20 = v83;
          v82 = 0;
          if (v83)
          {
            v22 = *(_QWORD *)(((unint64_t)(v83 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v23 = *(_QWORD **)(v22 + 40);
            if (!v23)
            {
              JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v83 - 2) & 0xFFFFFFFFFFFFF000) + 0x10));
              v23 = *(_QWORD **)(v22 + 40);
            }
            *(_QWORD *)(v22 + 40) = *v23;
            v23[2] = 0;
            v24 = v23 + 2;
            *v23 = 0;
            v23[1] = 0;
            v25 = *v20;
            if (*v20)
            {
              v26 = *(_QWORD **)(((unint64_t)(v24 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v27 = v26[3];
              v26 += 3;
              *(v24 - 2) = v27;
              *(v24 - 1) = (uint64_t)v26;
              *v26 = v24 - 2;
              *(_QWORD *)(v27 + 8) = v24 - 2;
            }
            *v24 = v25;
          }
          else
          {
            v24 = 0;
          }
          v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
          *v28 = &off_1E33A5A08;
          v28[1] = v3;
          v28[2] = v21;
          v28[3] = 0;
          if (v24)
          {
            v29 = *(_QWORD *)(((unint64_t)(v24 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v30 = *(_QWORD *)(v29 + 40);
            if (!v30)
            {
              JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v24 - 2) & 0xFFFFFFFFFFFFF000) + 0x10));
              v30 = *(_QWORD *)(v29 + 40);
            }
            *(_QWORD *)(v29 + 40) = *(_QWORD *)v30;
            *(_QWORD *)(v30 + 16) = 0;
            v31 = (_QWORD *)(v30 + 16);
            *(_QWORD *)v30 = 0;
            *(_QWORD *)(v30 + 8) = 0;
            v28[3] = v30 + 16;
            v32 = *v24;
            if ((*v24 != 0) != (*(_QWORD *)(v30 + 16) != 0))
            {
              if (v32)
              {
                v33 = *(unint64_t **)((v30 & 0xFFFFFFFFFFFFF000) + 0x10);
                v34 = v33[3];
                v33 += 3;
                *(_QWORD *)v30 = v34;
                *(_QWORD *)(v30 + 8) = v33;
                *v33 = v30;
                *(_QWORD *)(v34 + 8) = v30;
              }
              else
              {
                v63 = *(_QWORD *)v30;
                v62 = *(_QWORD **)(v30 + 8);
                *v62 = *(_QWORD *)v30;
                *(_QWORD *)(v63 + 8) = v62;
                *(_QWORD *)v30 = 0;
                *(_QWORD *)(v30 + 8) = 0;
                v31 = (_QWORD *)v28[3];
              }
            }
            *v31 = v32;
          }
          v35 = WTF::fastMalloc((WTF *)0x10);
          *(_DWORD *)v35 = 1;
          v36 = v3[6];
          if (__ldaxr((unsigned __int8 *)v36))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v36))
          {
            goto LABEL_48;
          }
          MEMORY[0x19AEA534C](v36);
LABEL_48:
          ++*(_QWORD *)(v36 + 8);
          v41 = __ldxr((unsigned __int8 *)v36);
          if (v41 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v36))
            {
LABEL_53:
              *(_QWORD *)(v35 + 8) = v3;
              ++v3[2];
              v42 = v3[6];
              if (__ldaxr((unsigned __int8 *)v42))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v42))
              {
                goto LABEL_57;
              }
              MEMORY[0x19AEA534C](v42);
LABEL_57:
              ++*(_QWORD *)(v42 + 8);
              v44 = __ldxr((unsigned __int8 *)v42);
              if (v44 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v42))
                {
LABEL_62:
                  v45 = (WebCore::ScriptExecutionContext *)WTF::fastMalloc((WTF *)0x20);
                  *(_QWORD *)v45 = off_1E33A59E0;
                  *((_QWORD *)v45 + 1) = v3;
                  *((_QWORD *)v45 + 2) = v35;
                  *((_QWORD *)v45 + 3) = v28;
                  v76 = v45;
                  v46 = v3[1];
                  if (v46)
                  {
                    v47 = *(_QWORD *)(v46 + 8);
                    if (v47)
                    {
                      v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v47 - 96) + 104))(v47 - 96);
                      WebCore::EventLoopTaskGroup::queueTask(v48, 15, (uint64_t *)&v76);
                      v49 = v76;
                      v76 = 0;
                      if (!v49)
                        goto LABEL_68;
                      v50 = *(uint64_t (***)())v49;
                    }
                    else
                    {
                      v76 = 0;
                      v50 = off_1E33A59E0;
                    }
                  }
                  else
                  {
                    v76 = 0;
                    v50 = off_1E33A59E0;
                  }
                  v50[1]();
LABEL_68:
                  if (v24)
                  {
                    v51 = v24 - 2;
                    v52 = *(_QWORD *)(((unint64_t)(v24 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                    v53 = (uint64_t *)*(v24 - 1);
                    if (v53)
                    {
                      v54 = *v51;
                      *v53 = *v51;
                      *(_QWORD *)(v54 + 8) = v53;
                      *v51 = 0;
                      *(v24 - 1) = 0;
                    }
                    *v51 = *(_QWORD *)(v52 + 40);
                    *(_QWORD *)(v52 + 40) = v51;
                  }
                  if (v20)
                    goto LABEL_73;
                  goto LABEL_76;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v42);
              goto LABEL_62;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v36);
          goto LABEL_53;
        }
LABEL_99:
        v6 = v70;
        v4 = v71;
        v8 = v72;
        if (v11)
        {
          do
          {
            v64 = __ldaxr((unsigned int *)v11);
            v65 = v64 - 1;
          }
          while (__stlxr(v65, (unsigned int *)v11));
          if (!v65)
          {
            atomic_store(1u, (unsigned int *)v11);
            v68 = (WTF *)MEMORY[0x19AEA3AF8](v11);
            WTF::fastFree(v68, v69);
          }
        }
      }
      v66 = *(unsigned __int8 *)(v6 + 178);
      if (*(_BYTE *)(v6 + 178))
      {
        if (v66 == 1)
        {
          if (*(_DWORD *)(v6 + 216) == 1)
            (*(void (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)v8 + 40))(v8);
          else
            --*(_DWORD *)(v6 + 216);
        }
        else if (v66 == 2)
        {
          WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v6 + 216));
        }
      }
      else if (*(_DWORD *)(v6 - 264) == 2)
      {
        if ((*(_WORD *)(v6 - 258) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 288), v10);
      }
      else
      {
        *(_DWORD *)(v6 - 264) -= 2;
      }
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::MessagePort>(WebCore::MessagePort &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  void *v6;

  *a1 = off_1E33A59E0;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      --*(_QWORD *)(v4[1] + 16);
      WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v4 + 1, a2);
      WTF::fastFree((WTF *)v4, v6);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::MessagePort>(WebCore::MessagePort &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  void *v7;

  *a1 = (uint64_t)off_1E33A59E0;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      --*(_QWORD *)(v4[1] + 16);
      WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v4 + 1, a2);
      WTF::fastFree((WTF *)v4, v7);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v5);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MessagePort::dispatchMessages(void)::$_0::operator()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _DWORD *v7;

  *a1 = &off_1E33A5A08;
  v2 = a1[3];
  if (v2)
  {
    v3 = (uint64_t *)(v2 - 16);
    v4 = *(_QWORD *)(((v2 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v5 = *(uint64_t **)(v2 - 8);
    if (v5)
    {
      v6 = *v3;
      *v5 = *v3;
      *(_QWORD *)(v6 + 8) = v5;
      *v3 = 0;
      v3[1] = 0;
    }
    *v3 = *(_QWORD *)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;
    a1[3] = 0;
  }
  v7 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v7)
  {
    if (v7[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessagePort::dispatchMessages(void)::$_0::operator()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _DWORD *v8;

  *(_QWORD *)this = &off_1E33A5A08;
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = (uint64_t *)(v3 - 16);
    v5 = *(_QWORD *)(((v3 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v6 = *(uint64_t **)(v3 - 8);
    if (v6)
    {
      v7 = *v4;
      *v6 = *v4;
      *(_QWORD *)(v7 + 8) = v6;
      *v4 = 0;
      v4[1] = 0;
    }
    *v4 = *(_QWORD *)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;
    *((_QWORD *)this + 3) = 0;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (v8[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[4];
  }
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebCore::MessagePort::dispatchMessages(void)::$_0::operator()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::{lambda(void)#1},void>::call(WTF *result)
{
  uint64_t v1;
  WebCore::Event *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  v1 = *((_QWORD *)result + 1);
  if (!*(_BYTE *)(v1 + 57))
  {
    v2 = (WebCore::Event *)*((_QWORD *)result + 2);
    v3 = *(_QWORD *)(v1 + 8);
    if (!v3)
      return WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)(v1 + 24), v2);
    v4 = *(_QWORD *)(v3 + 8);
    if (!v4)
      return WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)(v1 + 24), v2);
    result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 - 96) + 64))(v4 - 96);
    if (!(_DWORD)result)
      return WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)(v1 + 24), v2);
    v5 = *(_DWORD *)(v4 + 216);
    *(_DWORD *)(v4 + 216) = v5 + 1;
    v6 = *(unsigned __int8 *)(v4 + 305);
    if (v5)
    {
      *(_DWORD *)(v4 + 216) = v5;
      if (v6)
        return result;
      return WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)(v1 + 24), v2);
    }
    result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 - 96) + 40))(v4 - 96);
    if (!v6)
      return WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)(v1 + 24), v2);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  WebCore::MessagePort *v30;
  BOOL v31;
  int v32;
  bmalloc::api *v33;
  void *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *a2;
  v11 = ~(*a2 << 32) + *a2;
  v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  for (i = 1; ; ++i)
  {
    v16 = v14 & v8;
    v17 = (uint64_t *)(v6 + 8 * v16);
    v18 = *v17;
    if (*v17 != -1)
      break;
    v9 = (uint64_t *)(v6 + 8 * v16);
LABEL_10:
    v14 = i + v16;
  }
  if (!v18)
  {
    if (v9)
    {
      *v9 = 0;
      --*(_DWORD *)(*v4 - 16);
      v10 = *a2;
      v17 = v9;
    }
    v19 = *(_QWORD *)(v10 + 48);
    if (__ldaxr((unsigned __int8 *)v19))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v19))
    {
      goto LABEL_21;
    }
    result = (uint64_t *)MEMORY[0x19AEA534C](v19);
LABEL_21:
    ++*(_QWORD *)(v19 + 8);
    v24 = __ldxr((unsigned __int8 *)v19);
    if (v24 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v19))
      {
LABEL_26:
        v25 = *v17;
        *v17 = v10;
        if (!v25)
          goto LABEL_44;
        v26 = *(_QWORD *)(v25 + 48);
        if (__ldaxr((unsigned __int8 *)v26))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v26))
        {
          goto LABEL_32;
        }
        result = (uint64_t *)MEMORY[0x19AEA534C](v26);
LABEL_32:
        v28 = *(_QWORD *)(v26 + 8);
        v29 = v28 - 1;
        *(_QWORD *)(v26 + 8) = v28 - 1;
        if (v28 == 1)
        {
          v42 = *(_QWORD *)(v26 + 16);
          v30 = *(WebCore::MessagePort **)(v26 + 24);
          *(_QWORD *)(v26 + 24) = 0;
          v31 = v42 != 0;
        }
        else
        {
          v30 = 0;
          v31 = 1;
        }
        v32 = __ldxr((unsigned __int8 *)v26);
        if (v32 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v26))
          {
            if (v29)
              goto LABEL_44;
LABEL_40:
            if (v30)
            {
              WebCore::MessagePort::~MessagePort(v30, a2);
              result = (uint64_t *)bmalloc::api::isoDeallocate(v33, v34);
            }
            if (!v31)
              result = (uint64_t *)WTF::fastFree((WTF *)v26, a2);
LABEL_44:
            v35 = *v4;
            if (*v4)
              v36 = *(_DWORD *)(v35 - 12) + 1;
            else
              v36 = 1;
            *(_DWORD *)(v35 - 12) = v36;
            v37 = *v4;
            if (*v4)
              v38 = *(_DWORD *)(v37 - 12);
            else
              v38 = 0;
            v39 = (*(_DWORD *)(v37 - 16) + v38);
            v40 = *(unsigned int *)(v37 - 4);
            if (v40 > 0x400)
            {
              if (v40 <= 2 * v39)
                goto LABEL_53;
            }
            else if (3 * v40 <= 4 * v39)
            {
              if (!(_DWORD)v40)
              {
                v41 = 8;
LABEL_55:
                result = WTF::HashTable<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>>::rehash(v4, v41, v17);
                v17 = result;
                v37 = *v4;
                if (*v4)
                  v40 = *(unsigned int *)(v37 - 4);
                else
                  v40 = 0;
                goto LABEL_59;
              }
LABEL_53:
              v41 = (_DWORD)v40 << (6 * *(_DWORD *)(v37 - 12) >= (2 * v40));
              goto LABEL_55;
            }
LABEL_59:
            v23 = v37 + 8 * v40;
            v22 = 1;
            goto LABEL_60;
          }
        }
        else
        {
          __clrex();
        }
        result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v26);
        if (v29)
          goto LABEL_44;
        goto LABEL_40;
      }
    }
    else
    {
      __clrex();
    }
    result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v19);
    goto LABEL_26;
  }
  if (v18 != v10)
    goto LABEL_10;
  if ((v7 & 1) != 0)
    v21 = 0;
  else
    v21 = *(unsigned int *)(v6 - 4);
  v22 = 0;
  v23 = v6 + 8 * v21;
LABEL_60:
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v23;
  *(_BYTE *)(a3 + 16) = v22;
  return result;
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  void *v27;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    v13 = v7;
    do
    {
      v14 = (uint64_t *)(v6 + 8 * v11);
      v15 = *v14;
      if (*v14 != -1)
      {
        if (v15)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v17 & ((v20 >> 31) ^ v20);
          v22 = 1;
          do
          {
            v23 = v21;
            v24 = *(_QWORD *)(v16 + 8 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (v24);
          v25 = (uint64_t *)(v16 + 8 * v23);
          WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v25, v10);
          v26 = *v14;
          *v14 = 0;
          *v25 = v26;
          WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref((uint64_t *)(v6 + 8 * v11), v27);
          if (v14 == a3)
            v12 = v25;
        }
        else
        {
          WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref((uint64_t *)(v6 + 8 * v11), v10);
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MicrotaskQueue::performMicrotaskCheckpoint(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  WTF *v6;
  void *v7;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E33A5A30;
  a1[1] = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v6 = (WTF *)MEMORY[0x19AEA3AF8]();
      WTF::fastFree(v6, v7);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MicrotaskQueue::performMicrotaskCheckpoint(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33A5A30;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (WTF *)MEMORY[0x19AEA3AF8]();
      WTF::fastFree(v7, v8);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MicrotaskQueue::performMicrotaskCheckpoint(void)::$_0,void,WebCore::ScriptExecutionContext &>::call(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;

  v2 = result[1];
  if (!*(_BYTE *)(v2 + 93442))
  {
    v3 = *(_QWORD *)(a2 + 152);
    if (v3)
    {
      v4 = *(_DWORD *)v3 + 1;
      *(_DWORD *)v3 = v4;
      v5 = *(_DWORD *)(v3 + 28);
      if (v5)
      {
        v6 = *(_QWORD *)(v3 + 8);
        v7 = *(_QWORD *)(v3 + 16);
        v8 = *(_DWORD *)(v3 + 24);
        *(_QWORD *)(v3 + 16) = 0;
        *(_QWORD *)(v3 + 24) = 0;
        v9 = *(_QWORD *)(v6 + 8);
        if (v9)
          v10 = v9 - 96;
        else
          v10 = 0;
        v11 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v11 = &off_1E33A7328;
        *(_QWORD *)(v11 + 8) = v3;
        *(_QWORD *)(v11 + 16) = v7;
        *(_DWORD *)(v11 + 24) = v8;
        *(_DWORD *)(v11 + 28) = v5;
        v13 = (_QWORD *)v11;
        v14 = 0;
        (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v10 + 336))(v10, &v13);
        result = v13;
        v13 = 0;
        if (result)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        v4 = *(_DWORD *)v3;
      }
      if (!v4)
      {
        __break(0xC471u);
        JUMPOUT(0x195A071D8);
      }
      *(_DWORD *)v3 = v4 - 1;
    }
    v12 = *(_QWORD *)(v2 + 16);
    if (!v12 || *(_QWORD *)(v2 + 24) != v12)
      return (_QWORD *)JSC::VM::clearException((JSC::VM *)v2);
  }
  return result;
}

uint64_t WebCore::MouseRelatedEvent::MouseRelatedEvent(uint64_t a1, char a2, _QWORD *a3, int a4, int a5, int a6, uint64_t *a7, int a8, double a9, double a10, double a11, _QWORD *a12, const WebCore::IntPoint *a13, char a14, int a15, char a16, char a17)
{
  _BOOL4 v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  _DWORD *v25;
  uint64_t v26;

  *(_QWORD *)(a1 + 8) = 0;
  v18 = *a3 != 0;
  if (a4)
    v19 = 2;
  else
    v19 = 0;
  if (a5)
    v20 = 4;
  else
    v20 = 0;
  if (a6)
    v21 = 8;
  else
    v21 = 0;
  v22 = *(_DWORD *)(a1 + 20) & 0xFFC00000;
  v23 = v19 & 0xFFC07FFF | ((a2 & 0x7F) << 15);
  if (a17)
    v24 = 512;
  else
    v24 = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = v23 | v20 | v21 | v24 | v18 | v22;
  v25 = (_DWORD *)*a3;
  if (*a3)
    *v25 += 2;
  *(_QWORD *)(a1 + 24) = v25;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(double *)(a1 + 56) = a9;
  *(_QWORD *)(a1 + 64) = 0;
  v26 = *a7;
  *a7 = 0;
  *(_QWORD *)(a1 + 72) = v26;
  *(_DWORD *)(a1 + 80) = a8;
  *(_BYTE *)(a1 + 84) = a14;
  *(_QWORD *)a1 = off_1E33A5D38;
  *(_QWORD *)(a1 + 88) = *a12;
  *(_QWORD *)(a1 + 96) = 0;
  *(double *)(a1 + 104) = a10;
  *(double *)(a1 + 112) = a11;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_BYTE *)(a1 + 152) = a16;
  *(_BYTE *)(a1 + 153) = 0;
  WebCore::MouseRelatedEvent::init((WebCore::MouseRelatedEvent *)a1, a16, a13);
  return a1;
}

WebCore *WebCore::MouseRelatedEvent::init(WebCore::MouseRelatedEvent *this, char a2, const WebCore::IntPoint *a3)
{
  uint64_t v4;
  WebCore *result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  const WebCore::IntPoint *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  float v35;
  unint64_t v36;
  WTF *v37;
  void *v38;

  if ((a2 & 1) == 0)
  {
    v10 = *((_QWORD *)this + 9);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
        {
          v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 128))(v12);
          if (v14)
          {
            if (!*(_BYTE *)(v14 + 56))
            {
              v16 = *(_QWORD *)(v14 + 72);
              if (v16)
              {
                v17 = *(_QWORD *)(v16 + 8);
                if (v17)
                {
                  if (*(_BYTE *)(v17 + 178))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195A07574);
                  }
                  v18 = *(_QWORD *)(v17 + 240);
                  if (v18)
                  {
                    v19 = *(_QWORD *)(v18 + 8);
                    if (v19)
                    {
                      v20 = *(_QWORD *)(v19 + 288);
                      if (v20)
                      {
                        ++*(_DWORD *)(v20 + 8);
                        v21 = WebCore::ScrollView::windowToContents((WebCore::ScrollView *)v20, a3, v15);
                        v22 = (float)(int)v21;
                        v23 = (float)SHIDWORD(v21);
                        v24 = *(_QWORD *)(v20 + 328);
                        v25 = *(float *)(v24 + 592);
                        v26 = *(_QWORD *)(v24 + 24);
                        v27 = 1.0;
                        if (v26)
                        {
                          v28 = *(_QWORD *)(v26 + 8);
                          if (v28)
                          {
                            v29 = (*(_DWORD *)v28)++;
                            if (*(_QWORD *)(*(_QWORD *)(v24 + 128) + 8) == v24 && !*(_BYTE *)(v28 + 1098))
                              v27 = *(float *)(v28 + 356);
                            if (v29)
                            {
                              *(_DWORD *)v28 = v29;
                            }
                            else
                            {
                              WebCore::Page::~Page((WebCore::Page *)v28);
                              WTF::fastFree(v37, v38);
                            }
                          }
                        }
                        v30 = 1.0 / (float)(v25 * v27);
                        v31 = v30 * v22;
                        v32 = v30 * v23;
                        v33 = floorf(v31 * 64.0);
                        if (v33 >= 2147500000.0)
                        {
                          v34 = 0x7FFFFFFFLL;
                        }
                        else if (v33 <= -2147500000.0)
                        {
                          v34 = 0x80000000;
                        }
                        else
                        {
                          v34 = (int)v33;
                        }
                        v35 = floorf(v32 * 64.0);
                        if (v35 >= 2147500000.0)
                        {
                          v36 = 0x7FFFFFFF00000000;
                        }
                        else if (v35 <= -2147500000.0)
                        {
                          v36 = 0x8000000000000000;
                        }
                        else
                        {
                          v36 = (unint64_t)(int)v35 << 32;
                        }
                        *((_QWORD *)this + 15) = v36 | v34;
                        *((_QWORD *)this + 12) = WebCore::MouseRelatedEvent::pagePointToClientPoint(v36 | v34, v20);
                        if (*(_DWORD *)(v20 + 8) == 1)
                          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
                        else
                          --*(_DWORD *)(v20 + 8);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v4 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 16) = v4;
  *((_QWORD *)this + 17) = v4;
  result = (WebCore *)WebCore::MouseRelatedEvent::computePageLocation(this);
  *((_BYTE *)this + 153) = 0;
  if ((*((_BYTE *)this + 21) & 0x40) == 0)
  {
    v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    {
      result = (WebCore *)WebCore::threadGlobalDataSlow(result);
      v7 = (uint64_t)result;
    }
    v8 = *(_QWORD **)(v7 + 40);
    if (!v8)
    {
      result = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
      v8 = *(_QWORD **)(v7 + 40);
    }
    v9 = *((_QWORD *)this + 3);
    if (v9 != v8[154] && v9 != v8[191] && v9 != v8[262])
    {
      *((_QWORD *)this + 13) = 0;
      *((_QWORD *)this + 14) = 0;
    }
  }
  return result;
}

uint64_t WebCore::MouseRelatedEvent::MouseRelatedEvent(uint64_t a1, char a2, _QWORD *a3, unsigned __int8 *a4)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  _DWORD *v13;
  _DWORD *v14;
  char v15;
  uint64_t v17;

  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  v9 = *a4;
  v10 = a4[1];
  v11 = a4[2];
  *(_QWORD *)(a1 + 8) = 0;
  v12 = ((a2 & 0x7F) << 15) | (2 * v9) | (4 * v10) | (8 * v11) | (*a3 != 0) | *(_DWORD *)(a1 + 20) & 0xFFC00000;
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = v12;
  v13 = (_DWORD *)*a3;
  if (*a3)
  {
    *v13 += 2;
    v12 = *(_DWORD *)(a1 + 20);
  }
  *(_QWORD *)(a1 + 24) = v13;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 20) = v12 | 0x4000;
  v14 = (_DWORD *)*((_QWORD *)a4 + 1);
  if (v14)
    ++*v14;
  *(_QWORD *)(a1 + 72) = v14;
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a4 + 4);
  v15 = a4[20];
  if (v15)
    v15 = 2;
  if (a4[22])
    v15 |= 1u;
  if (a4[21])
    v15 |= 8u;
  if (a4[23])
    v15 |= 4u;
  if (a4[24])
    v15 |= 0x20u;
  if (a4[25])
    v15 |= 0x10u;
  *(_BYTE *)(a1 + 84) = v15;
  *(_QWORD *)a1 = off_1E33A5D38;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a4 + 28);
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a4 + 40);
  *(_WORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  v17 = 0;
  WebCore::MouseRelatedEvent::init((WebCore::MouseRelatedEvent *)a1, 0, (const WebCore::IntPoint *)&v17);
  return a1;
}

_QWORD *WebCore::MouseRelatedEvent::frameViewFromWindowProxy(_QWORD *this, WebCore::WindowProxy *a2)
{
  uint64_t v2;

  if (this)
  {
    v2 = this[1];
    if (!v2)
      return 0;
    this = *(_QWORD **)(v2 + 8);
    if (this)
    {
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *, WebCore::WindowProxy *))(*this + 128))(this, a2);
      if (this)
      {
        if (*((_BYTE *)this + 56))
          return 0;
        this = (_QWORD *)WebCore::LocalDOMWindow::frame((WebCore::LocalDOMWindow *)this);
        if (this)
          return (_QWORD *)this[36];
      }
    }
  }
  return this;
}

uint64_t WebCore::flooredLayoutPoint(WebCore *this, const WebCore::FloatPoint *a2)
{
  float v2;
  int v3;
  uint64_t v4;
  float v6;

  v2 = floorf(*(float *)this * 64.0);
  if (v2 > -2147500000.0)
    v3 = (int)v2;
  else
    v3 = 0x80000000;
  if (v2 < 2147500000.0)
    LODWORD(v4) = v3;
  else
    LODWORD(v4) = 0x7FFFFFFF;
  if (v2 >= 2147500000.0 || v2 <= -2147500000.0)
    v4 = v4;
  else
    v4 = (int)v2;
  v6 = floorf(*((float *)this + 1) * 64.0);
  if (v6 < 2147500000.0 && v6 > -2147500000.0)
    return ((unint64_t)(int)v6 << 32) | v4;
  if (v6 >= 2147500000.0)
    return v4 | 0x7FFFFFFF00000000;
  if (v6 > -2147500000.0)
    return ((unint64_t)(int)v6 << 32) | v4;
  return v4 | 0x8000000000000000;
}

unint64_t WebCore::MouseRelatedEvent::pagePointToClientPoint(unint64_t result, uint64_t a2)
{
  float v2;
  float v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  int v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  unint64_t v17;
  WTF *v18;
  void *v19;

  if (a2)
  {
    v2 = (float)(int)result * 0.015625;
    v3 = (float)SHIDWORD(result) * 0.015625;
    v4 = a2 + 64;
    v5 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a2 + 64) + 832))(a2 + 64, 0, 0);
    v6 = *(_QWORD *)(v4 + 264);
    v7 = *(float *)(v6 + 592);
    v8 = *(_QWORD *)(v6 + 24);
    v9 = 1.0;
    if (v8)
    {
      v10 = *(_QWORD *)(v8 + 8);
      if (v10)
      {
        v11 = (*(_DWORD *)v10)++;
        if (*(_QWORD *)(*(_QWORD *)(v6 + 128) + 8) == v6 && !*(_BYTE *)(v10 + 1098))
          v9 = *(float *)(v10 + 356);
        if (v11)
        {
          *(_DWORD *)v10 = v11;
        }
        else
        {
          WebCore::Page::~Page((WebCore::Page *)v10);
          WTF::fastFree(v18, v19);
        }
      }
    }
    v12 = 1.0 / (float)(v7 * v9);
    v13 = floorf((float)(v2 - (float)(v12 * (float)(int)v5)) * 64.0);
    v14 = 0x7FFFFFFFLL;
    v15 = 0x80000000;
    if (v13 > -2147500000.0)
      v15 = (int)v13;
    if (v13 < 2147500000.0)
      v14 = v15;
    v16 = floorf((float)(v3 - (float)(v12 * (float)SHIDWORD(v5))) * 64.0);
    if (v16 >= 2147500000.0)
    {
      v17 = 0x7FFFFFFF00000000;
    }
    else if (v16 <= -2147500000.0)
    {
      v17 = 0x8000000000000000;
    }
    else
    {
      v17 = (unint64_t)(int)v16 << 32;
    }
    return v17 | v14;
  }
  return result;
}

_BYTE *WebCore::MouseRelatedEvent::computePageLocation(_BYTE *this)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  WTF *v20;
  void *v21;

  v1 = this;
  v2 = *((_QWORD *)this + 15);
  v3 = *((_QWORD *)this + 9);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      this = *(_BYTE **)(v4 + 8);
      if (this)
      {
        this = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 128))(this);
        if (this)
        {
          if (!this[56])
          {
            v5 = *((_QWORD *)this + 9);
            if (v5)
            {
              v6 = *(_QWORD *)(v5 + 8);
              if (v6)
              {
                if (*(_BYTE *)(v6 + 178))
                {
                  __break(0xC471u);
                  JUMPOUT(0x195A07B24);
                }
                v7 = *(_QWORD *)(v6 + 240);
                if (v7)
                {
                  v8 = *(_QWORD *)(v7 + 8);
                  if (v8)
                  {
                    v9 = *(_QWORD *)(v8 + 288);
                    if (v9)
                    {
                      v10 = *(_QWORD *)(v9 + 328);
                      v11 = *(float *)(v10 + 592);
                      v12 = *(_QWORD *)(v10 + 24);
                      v13 = 1.0;
                      if (v12)
                      {
                        this = *(_BYTE **)(v12 + 8);
                        if (this)
                        {
                          v14 = (*(_DWORD *)this)++;
                          if (*(_QWORD *)(*(_QWORD *)(v10 + 128) + 8) == v10 && !this[1098])
                            v13 = *((float *)this + 89);
                          if (v14)
                          {
                            *(_DWORD *)this = v14;
                          }
                          else
                          {
                            WebCore::Page::~Page((WebCore::Page *)this);
                            this = (_BYTE *)WTF::fastFree(v20, v21);
                          }
                        }
                      }
                      v15 = (float)((float)((float)(int)v2 * 0.015625) * (float)(v11 * v13)) * 64.0;
                      v16 = 0x7FFFFFFFLL;
                      v17 = 0x80000000;
                      if (v15 > -2147483650.0)
                        v17 = (int)v15;
                      if (v15 < 2147483650.0)
                        v16 = v17;
                      v18 = (float)((float)((float)SHIDWORD(v2) * 0.015625) * (float)(v11 * v13)) * 64.0;
                      if (v18 >= 2147483650.0)
                      {
                        v19 = 0x7FFFFFFF00000000;
                      }
                      else if (v18 <= -2147483650.0)
                      {
                        v19 = 0x8000000000000000;
                      }
                      else
                      {
                        v19 = (unint64_t)(int)v18 << 32;
                      }
                      v2 = v19 | v16;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  *((_QWORD *)v1 + 18) = v2;
  return this;
}

_BYTE *WebCore::MouseRelatedEvent::initCoordinates(WebCore::MouseRelatedEvent *this, const WebCore::LayoutPoint *a2)
{
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  double v10;
  int v11;
  double v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::LocalFrameView *v25;
  float v26;

  v4 = *((_QWORD *)this + 9);
  v5 = 0.0;
  if (!v4)
    goto LABEL_6;
  v6 = *(_QWORD *)(v4 + 8);
  if (!v6)
    goto LABEL_6;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_6;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 128))(v7);
  if (!v8)
    goto LABEL_6;
  if (*(_BYTE *)(v8 + 56))
    goto LABEL_6;
  v21 = *(_QWORD *)(v8 + 72);
  if (!v21)
    goto LABEL_6;
  v22 = *(_QWORD *)(v21 + 8);
  if (!v22)
    goto LABEL_6;
  if (*(_BYTE *)(v22 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195A07CE4);
  }
  v23 = *(_QWORD *)(v22 + 240);
  if (v23 && (v24 = *(_QWORD *)(v23 + 8)) != 0)
  {
    v25 = *(WebCore::LocalFrameView **)(v24 + 288);
    v9 = 0.0;
    if (v25)
    {
      ++*((_DWORD *)v25 + 2);
      v9 = WebCore::LocalFrameView::documentToClientOffset(v25);
      v5 = v26;
      if (*((_DWORD *)v25 + 2) == 1)
        (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v25 + 8))(v25);
      else
        --*((_DWORD *)v25 + 2);
    }
  }
  else
  {
LABEL_6:
    v9 = 0.0;
  }
  *((_QWORD *)this + 12) = *(_QWORD *)a2;
  v10 = v9 * 64.0;
  if (v10 >= 2147483650.0)
  {
    v11 = 0x7FFFFFFF;
  }
  else if (v10 <= -2147483650.0)
  {
    v11 = 0x80000000;
  }
  else
  {
    v11 = (int)v10;
  }
  v12 = v5 * 64.0;
  if (v12 >= 2147483650.0)
  {
    v13 = 0x7FFFFFFF;
  }
  else if (v12 <= -2147483650.0)
  {
    v13 = 0x80000000;
  }
  else
  {
    v13 = (int)v12;
  }
  v14 = *((_DWORD *)a2 + 1);
  v15 = __OFSUB__(*(_DWORD *)a2, v11);
  LODWORD(v16) = *(_DWORD *)a2 - v11;
  if (v15)
    v16 = ((*(_DWORD *)a2 >> 31) + 0x7FFFFFFF);
  else
    v16 = v16;
  v15 = __OFSUB__(v14, v13);
  v17 = v14 - v13;
  LODWORD(v18) = (v14 >> 31) + 0x7FFFFFFF;
  if (v15)
    v18 = v18;
  else
    v18 = v17;
  v19 = v16 | (v18 << 32);
  *((_QWORD *)this + 15) = v19;
  *((_QWORD *)this + 16) = v19;
  *((_QWORD *)this + 17) = v19;
  result = WebCore::MouseRelatedEvent::computePageLocation(this);
  *((_BYTE *)this + 153) = 0;
  return result;
}

uint64_t WebCore::MouseRelatedEvent::receivedTarget(uint64_t this)
{
  *(_BYTE *)(this + 153) = 0;
  return this;
}

void WebCore::MouseRelatedEvent::computeRelativePosition(int32x2_t *this)
{
  uint64_t v1;
  int32x2_t v3;
  int *v4;
  uint64_t v5;
  void *v6;
  _DWORD *v7;
  float32x2_t v8;
  WTF *v9;
  WTF *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  unint64_t v16;
  int32x2_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::LocalDOMWindow *v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  BOOL v36;
  unsigned int v37;
  unsigned int v38;
  float32x2_t v39;
  __int128 v40;
  __int128 v41;
  char v42;
  char v43;
  WTF *v44;
  WTF *v45;
  uint64_t v46;
  char v47;
  __int16 v48;
  uint64_t v49;

  v1 = (uint64_t)this[6];
  if (v1 && (*(_QWORD *)(v1 + 16) & 0x2000000000000) != 0)
  {
    *(_DWORD *)(v1 + 24) += 2;
    v3 = this[15];
    this[17] = v3;
    v4 = (int *)&this[17];
    this[16] = v3;
    v5 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8);
    *(_DWORD *)(v5 + 24) += 2;
    WebCore::Document::updateLayout(v5, 2u, 0);
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
    v7 = (_DWORD *)(*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL);
    if (v7)
    {
      ++*(_DWORD *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
      v39 = vmul_f32(vcvt_f32_s32(this[18]), (float32x2_t)vdup_n_s32(0x3C800000u));
      v43 = 0;
      v40 = 0u;
      v41 = 0u;
      v42 = 0;
      v45 = 0;
      v46 = 0;
      v44 = 0;
      v47 = 0;
      v48 = 1;
      v49 = 0x100000000;
      (*(void (**)(_DWORD *, uint64_t, float32x2_t *))(*(_QWORD *)v7 + 584))(v7, 2, &v39);
      WebCore::TransformState::flatten((WebCore::TransformState *)&v39, 0);
      v8 = v39;
      v9 = v45;
      v45 = 0;
      if (v9)
        WTF::fastFree(v9, v6);
      v10 = v44;
      v44 = 0;
      if (v10)
        WTF::fastFree(v10, v6);
      v11 = v8.f32[0] * 64.0;
      v12 = 0x7FFFFFFFLL;
      v13 = 0x80000000;
      if (v11 > -2147483650.0)
        v13 = (int)v11;
      if (v11 < 2147483650.0)
        v12 = v13;
      v14 = v8.f32[1] * 64.0;
      v15 = 0x7FFFFFFF00000000;
      v16 = 0x8000000000000000;
      if (v14 > -2147483650.0)
        v16 = (unint64_t)(int)v14 << 32;
      if (v14 < 2147483650.0)
        v15 = v16;
      this[17] = (int32x2_t)(v15 | v12);
      v17 = this[9];
      v18 = 1.0;
      if (v17)
      {
        v19 = *(_QWORD *)(*(_QWORD *)&v17 + 8);
        if (v19)
        {
          v20 = *(_QWORD *)(v19 + 8);
          if (v20)
          {
            v21 = (WebCore::LocalDOMWindow *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 128))(v20);
            if (v21)
            {
              if (!*((_BYTE *)v21 + 56))
              {
                v22 = WebCore::LocalDOMWindow::frame(v21);
                if (v22)
                {
                  v23 = *(_DWORD **)(v22 + 288);
                  if (v23)
                  {
                    ++v23[2];
                    v18 = WebCore::LocalFrameView::documentToAbsoluteScaleFactor((uint64_t)v23, 0);
                    if (v23[2] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
                    else
                      --v23[2];
                  }
                }
              }
            }
          }
        }
      }
      if ((float)(1.0 / v18) != 1.0)
        WebCore::LayoutPoint::scale(v4, 1.0 / v18);
      v24 = v7[4];
      if (!v24)
      {
        __break(0xC471u);
        return;
      }
      v7[4] = v24 - 1;
    }
    v39 = (float32x2_t)v1;
    while (1)
    {
      v25 = *(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL;
      if (v25)
        break;
      WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v39, *(_QWORD *)(v1 + 32));
      v1 = (uint64_t)v39;
      if (!*(_QWORD *)&v39)
      {
        this[19].i8[1] = 1;
        return;
      }
    }
    if ((*(_BYTE *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 0x10) == 0)
    {
      v26 = *(_QWORD *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
      if (!v26 || (v25 = *(_QWORD *)(v26 + 8)) == 0)
      {
        this[19].i8[1] = 1;
        v39 = 0;
LABEL_59:
        if (*(_DWORD *)(v1 + 24) == 2)
        {
          if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v1, v6);
        }
        else
        {
          *(_DWORD *)(v1 + 24) -= 2;
        }
        return;
      }
      while ((*(_BYTE *)(v25 + 45) & 0x10) == 0)
      {
        v27 = *(_QWORD *)(v25 + 32);
        if (v27)
        {
          v25 = *(_QWORD *)(v27 + 8);
          if (v25)
            continue;
        }
        goto LABEL_58;
      }
    }
LABEL_44:
    if ((*(_BYTE *)(v25 + 21) & 0x80) != 0)
    {
      v29 = *(_QWORD *)(v25 + 144);
      if (v29)
      {
        v30 = this[16].u32[0];
        v31 = this[16].u32[1];
        do
        {
          v33 = *(_DWORD *)(v29 + 156);
          v32 = *(_DWORD *)(v29 + 160);
          if (v33 == 0x80000000)
            v34 = 0x7FFFFFFF;
          else
            v34 = -v33;
          if (v32 == 0x80000000)
            v35 = 0x7FFFFFFF;
          else
            v35 = -v32;
          v36 = __OFADD__(v30, v34);
          v37 = v30 + v34;
          v30 = (v30 >> 31) + 0x7FFFFFFF;
          if (!v36)
            v30 = v37;
          v36 = __OFADD__(v31, v35);
          v38 = v31 + v35;
          v31 = (v31 >> 31) + 0x7FFFFFFF;
          if (!v36)
            v31 = v38;
          this[16].i32[0] = v30;
          this[16].i32[1] = v31;
          v29 = *(_QWORD *)(v29 + 40);
        }
        while (v29);
      }
    }
    else
    {
      while (1)
      {
        v28 = *(_QWORD *)(v25 + 32);
        if (!v28)
          break;
        v25 = *(_QWORD *)(v28 + 8);
        if (!v25)
          break;
        if ((*(_BYTE *)(v25 + 45) & 0x10) != 0)
          goto LABEL_44;
      }
    }
LABEL_58:
    this[19].i8[1] = 1;
    v39 = 0;
    if (v1)
      goto LABEL_59;
  }
}

int *WebCore::LayoutPoint::scale(int *this, float a2)
{
  int v2;
  double v3;
  int v4;
  int v5;
  double v6;
  int v7;

  v2 = this[1];
  v3 = (float)((float)((float)*this * 0.015625) * a2) * 64.0;
  if (v3 > -2147483650.0)
    v4 = (int)v3;
  else
    v4 = 0x80000000;
  if (v3 < 2147483650.0)
    v5 = v4;
  else
    v5 = 0x7FFFFFFF;
  *this = v5;
  v6 = (float)((float)((float)v2 * 0.015625) * a2) * 64.0;
  if (v6 >= 2147483650.0)
  {
    v7 = 0x7FFFFFFF;
  }
  else if (v6 <= -2147483650.0)
  {
    v7 = 0x80000000;
  }
  else
  {
    v7 = (int)v6;
  }
  this[1] = v7;
  return this;
}

float WebCore::MouseRelatedEvent::locationInRootViewCoordinates(WebCore::MouseRelatedEvent *this, WebCore::WindowProxy *a2)
{
  _DWORD *v3;
  int v4;
  _DWORD *v5;
  float v6;
  unint64_t v8;

  v3 = WebCore::MouseRelatedEvent::frameViewFromWindowProxy(*((_QWORD **)this + 9), a2);
  if (!v3)
    return (float)*((int *)this + 36) * 0.015625;
  v5 = v3;
  ++v3[2];
  v8 = (((int)(*((_DWORD *)this + 36) - (v4 & 0xFFFFFFC0) + 32) >> 6) + *((_DWORD *)this + 36) / 64) | ((unint64_t)(((int)(*((_DWORD *)this + 37) - (v4 & 0xFFFFFFC0) + 32) >> 6) + *((_DWORD *)this + 37) / 64) << 32);
  v6 = (float)(int)WebCore::ScrollView::contentsToRootView((WebCore::ScrollView *)v3, (const WebCore::IntPoint *)&v8);
  if (v5[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
  else
    --v5[2];
  return v6;
}

uint64_t WebCore::MouseRelatedEvent::layerX(int32x2_t *this)
{
  if (!this[19].i8[1])
    WebCore::MouseRelatedEvent::computeRelativePosition(this);
  return (this[16].i32[0] / 64);
}

uint64_t WebCore::MouseRelatedEvent::layerY(int32x2_t *this)
{
  if (!this[19].i8[1])
    WebCore::MouseRelatedEvent::computeRelativePosition(this);
  return (this[16].i32[1] / 64);
}

uint64_t WebCore::MouseRelatedEvent::offsetX(int32x2_t *this)
{
  int v1;

  if (this[19].i8[0])
    return 0;
  if (!this[19].i8[1])
    WebCore::MouseRelatedEvent::computeRelativePosition(this);
  return (((int)(this[17].i32[0] - (v1 & 0xFFFFFFC0) + 32) >> 6) + this[17].i32[0] / 64);
}

uint64_t WebCore::MouseRelatedEvent::offsetY(int32x2_t *this)
{
  int v1;

  if (this[19].i8[0])
    return 0;
  if (!this[19].i8[1])
    WebCore::MouseRelatedEvent::computeRelativePosition(this);
  return (((int)(this[17].i32[1] - (v1 & 0xFFFFFFC0) + 32) >> 6) + this[17].i32[1] / 64);
}

uint64_t WebCore::MouseRelatedEvent::pageX(WebCore::MouseRelatedEvent *this)
{
  return (*((_DWORD *)this + 30) / 64);
}

uint64_t WebCore::MouseRelatedEvent::pageY(WebCore::MouseRelatedEvent *this)
{
  return (*((_DWORD *)this + 31) / 64);
}

_BYTE *WebCore::MutationEvent::initMutationEvent(_BYTE *this, const WTF::AtomString *a2, int a3, int a4, WebCore::Node *a5, const WTF::String *a6, const WTF::String *a7, const WTF::String *a8, unsigned __int16 a9)
{
  _BYTE *v13;
  void *v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  _DWORD *v20;

  if ((this[21] & 0x30) == 0)
  {
    v13 = this;
    WebCore::Event::initEvent((uint64_t)this, a2, a3, a4);
    if (a5)
      *((_DWORD *)a5 + 6) += 2;
    v15 = *((_QWORD *)v13 + 9);
    *((_QWORD *)v13 + 9) = a5;
    if (v15)
    {
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v15, v14);
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
    }
    v16 = *(_DWORD **)a6;
    if (*(_QWORD *)a6)
      *v16 += 2;
    v17 = (WTF::StringImpl *)*((_QWORD *)v13 + 10);
    *((_QWORD *)v13 + 10) = v16;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = *(_DWORD **)a7;
    if (*(_QWORD *)a7)
      *v18 += 2;
    v19 = (WTF::StringImpl *)*((_QWORD *)v13 + 11);
    *((_QWORD *)v13 + 11) = v18;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = *(_DWORD **)a8;
    if (*(_QWORD *)a8)
      *v20 += 2;
    this = (_BYTE *)*((_QWORD *)v13 + 12);
    *((_QWORD *)v13 + 12) = v20;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)this -= 2;
    }
    *((_WORD *)v13 + 52) = a9;
  }
  return this;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::MutationRecord,WTF::RawPtrTraits<WebCore::MutationRecord>,WTF::DefaultRefDerefTraits<WebCore::MutationRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WTF::Ref<WebCore::MutationRecord,WTF::RawPtrTraits<WebCore::MutationRecord>,WTF::DefaultRefDerefTraits<WebCore::MutationRecord>>>::destruct(*(_DWORD **)a1, (_DWORD **)(*(_QWORD *)a1 + 8 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WebCore::MutationObserver::observe(_DWORD *a1@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char v8;
  BOOL v9;
  BOOL v10;
  char v11;
  _BOOL4 v12;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF *v22;
  unsigned int v23[4];

  v8 = *(_BYTE *)a3;
  if (*(_BYTE *)(a3 + 5))
    v8 |= 8u;
  if (*(_BYTE *)(a3 + 6))
    v9 = *(_BYTE *)(a3 + 7) == 0;
  else
    v9 = 1;
  if (!v9)
    v8 |= 0x20u;
  if (*(_BYTE *)(a3 + 8))
    v10 = *(_BYTE *)(a3 + 9) == 0;
  else
    v10 = 1;
  if (v10)
    v11 = v8;
  else
    v11 = v8 | 0x40;
  v22 = 0;
  *(_QWORD *)v23 = 0;
  *(_QWORD *)((char *)&v23[1] + 1) = 0;
  if (*(_BYTE *)(a3 + 32))
  {
    v15 = *(unsigned int *)(a3 + 28);
    if ((_DWORD)v15)
    {
      v16 = *(_QWORD *)(a3 + 16);
      v17 = 8 * v15;
      do
      {
        WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&v22, v16, (uint64_t)&v21);
        v16 += 8;
        v17 -= 8;
      }
      while (v17);
    }
    v11 |= 0x10u;
  }
  if (*(_BYTE *)(a3 + 2))
  {
    if (!*(_BYTE *)(a3 + 1))
      goto LABEL_18;
    goto LABEL_17;
  }
  if ((v11 & 0x30) != 0)
LABEL_17:
    v11 |= 2u;
LABEL_18:
  if (*(_BYTE *)(a3 + 4))
  {
    if (!*(_BYTE *)(a3 + 3))
      goto LABEL_21;
    goto LABEL_20;
  }
  if ((v11 & 0x40) != 0)
LABEL_20:
    v11 |= 4u;
  if ((v11 & 7) == 0)
    goto LABEL_34;
LABEL_21:
  v12 = (v11 & 2) == 0;
  if ((v11 & 0x30) == 0)
    v12 = 0;
  if ((v11 & 0x44) != 0x40 && !v12)
  {
    WebCore::Node::registerMutationObserver(a2, a1, v11, (uint64_t)&v22);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
LABEL_34:
    *(_BYTE *)a4 = 33;
    a4[1] = 0;
    *((_BYTE *)a4 + 16) = 1;
  }
  v14 = v22;
  if (v22)
  {
    v18 = v23[0];
    if (v23[0])
    {
      v19 = v22;
      do
      {
        v20 = *(WTF::StringImpl **)v19;
        *(_QWORD *)v19 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, a2);
          else
            *(_DWORD *)v20 -= 2;
        }
        v19 = (WTF *)((char *)v19 + 8);
        --v18;
      }
      while (v18);
    }
    WTF::fastFree(v14, a2);
  }
}

WebCore::MutationObserverRegistration *WebCore::MutationObserver::disconnect(WebCore::MutationObserver *this, void *a2)
{
  uint64_t *v3;
  WebCore::MutationObserverRegistration *result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::MutationObserverRegistration **v28;
  uint64_t v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = (uint64_t *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 4) = 0;
    WTF::HashTable<WebCore::GCReachableRef<WebCore::Node,void>,WebCore::GCReachableRef<WebCore::Node,void>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>>::deallocateTable(v3, a2);
  }
  if (*((_DWORD *)this + 6))
  {
    v19 = *((unsigned int *)this + 7);
    if ((_DWORD)v19)
    {
      WTF::VectorDestructor<true,WTF::Ref<WebCore::MutationRecord,WTF::RawPtrTraits<WebCore::MutationRecord>,WTF::DefaultRefDerefTraits<WebCore::MutationRecord>>>::destruct(*((_DWORD **)this + 2), (_DWORD **)(*((_QWORD *)this + 2) + 8 * v19));
      *((_DWORD *)this + 7) = 0;
    }
    v20 = (WTF *)*((_QWORD *)this + 2);
    if (v20)
    {
      *((_QWORD *)this + 2) = 0;
      *((_DWORD *)this + 6) = 0;
      WTF::fastFree(v20, a2);
    }
  }
  result = (WebCore::MutationObserverRegistration *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::HashTable(&v33, (_QWORD *)this + 5);
  v34 = *((_QWORD *)this + 6);
  v6 = v33;
  if (!v33)
  {
    v7 = 0;
    v8 = 0;
LABEL_6:
    v9 = v7;
    v7 = v33 + 8 * v8;
    goto LABEL_7;
  }
  v8 = *(unsigned int *)(v33 - 4);
  v7 = v33 + 8 * v8;
  if (!*(_DWORD *)(v33 - 12))
    goto LABEL_6;
  if (!(_DWORD)v8)
  {
    v13 = 0;
    v9 = v33;
    goto LABEL_23;
  }
  v12 = 8 * v8;
  v9 = v33;
  while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
  {
    v9 += 8;
    v12 -= 8;
    if (!v12)
    {
      v9 = v7;
      break;
    }
  }
LABEL_7:
  if (!v33)
  {
    v10 = 0;
    goto LABEL_9;
  }
  v13 = *(unsigned int *)(v33 - 4);
LABEL_23:
  v10 = v33 + 8 * v13;
LABEL_9:
  if (v10 != v9)
  {
    while (!*(_QWORD *)(*(_QWORD *)v9 + 8))
    {
      v21 = v9 + 8;
      v9 = v7;
      if (v21 != v7)
      {
        v9 = v21;
        while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
        {
          v9 += 8;
          if (v9 == v7)
          {
            v9 = v7;
            break;
          }
        }
      }
      if (v9 == v10)
      {
        v9 = v10;
        break;
      }
    }
  }
  if (v33)
    v11 = v33 + 8 * *(unsigned int *)(v33 - 4);
  else
    v11 = 0;
  if (v9 != v11)
  {
    do
    {
      result = *(WebCore::MutationObserverRegistration **)(*(_QWORD *)v9 + 8);
      v22 = *(_QWORD *)(*((_QWORD *)result + 2) + 8);
      v23 = *(_DWORD *)(v22 + 24) + 2;
      *(_DWORD *)(v22 + 24) = v23;
      if ((*(_QWORD *)(v22 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v26 = *(_QWORD *)((*(_QWORD *)(v22 + 72) & 0xFFFFFFFFFFFFLL) + 8);
        if (v26)
        {
          v27 = *(unsigned int *)(v26 + 12);
          if ((_DWORD)v27)
          {
            v28 = *(WebCore::MutationObserverRegistration ***)v26;
            v29 = *(_QWORD *)v26 + 8;
            while (*v28 != result)
            {
              ++v28;
              v29 += 8;
              if (!--v27)
                goto LABEL_48;
            }
            *v28 = 0;
            WebCore::MutationObserverRegistration::~MutationObserverRegistration(result);
            WTF::fastFree(v30, v31);
            result = (WebCore::MutationObserverRegistration *)memmove(v28, v28 + 1, *(_QWORD *)v26 + 8 * *(unsigned int *)(v26 + 12) - v29);
            --*(_DWORD *)(v26 + 12);
            v23 = *(_DWORD *)(v22 + 24);
          }
        }
      }
LABEL_48:
      v24 = v23 - 2;
      if (v24)
      {
        *(_DWORD *)(v22 + 24) = v24;
      }
      else if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
      {
        result = (WebCore::MutationObserverRegistration *)WebCore::Node::removedLastRef((WebCore::Node *)v22, v5);
      }
      v25 = v7;
      if (v9 + 8 != v7)
      {
        v25 = v9 + 8;
        while ((unint64_t)(*(_QWORD *)v25 + 1) <= 1)
        {
          v25 += 8;
          if (v25 == v7)
          {
            v25 = v7;
            break;
          }
        }
      }
      v9 = v10;
      if (v25 != v10)
      {
        v9 = v25;
        if (!*(_QWORD *)(*(_QWORD *)v25 + 8))
        {
          while (1)
          {
            v32 = v9 + 8;
            v9 = v7;
            if (v32 != v7)
            {
              v9 = v32;
              while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
              {
                v9 += 8;
                if (v9 == v7)
                {
                  v9 = v7;
                  break;
                }
              }
            }
            if (v9 == v10)
              break;
            if (*(_QWORD *)(*(_QWORD *)v9 + 8))
              goto LABEL_56;
          }
          v9 = v10;
        }
      }
LABEL_56:
      LODWORD(v34) = v34 + 1;
    }
    while (v9 != v11);
    v6 = v33;
  }
  if (v6)
  {
    v14 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v14)
    {
      for (i = 0; i != v14; ++i)
      {
        v16 = *(unsigned int **)(v6 + 8 * i);
        if (v16 != (unsigned int *)-1)
        {
          *(_QWORD *)(v6 + 8 * i) = 0;
          if (v16)
          {
            do
            {
              v17 = __ldaxr(v16);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, v16));
            if (!v18)
            {
              atomic_store(1u, v16);
              WTF::fastFree((WTF *)v16, v5);
            }
          }
        }
      }
    }
    return (WebCore::MutationObserverRegistration *)WTF::fastFree((WTF *)(v6 - 16), v5);
  }
  return result;
}

uint64_t **WTF::WeakHashSet<WebCore::MutationObserverRegistration,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v2 = *a2;
  if (!*a2)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v5 = (uint64_t *)(v2 + 8 * v4);
  if (!*(_DWORD *)(v2 - 12))
  {
    v3 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_3;
  }
  v3 = (uint64_t *)*a2;
  if ((_DWORD)v4)
  {
    v8 = 8 * v4;
    v3 = (uint64_t *)*a2;
    while ((unint64_t)(*v3 + 1) <= 1)
    {
      ++v3;
      v8 -= 8;
      if (!v8)
      {
        v3 = v5;
        break;
      }
    }
  }
LABEL_4:
  *result = a2;
  result[1] = v3;
  result[2] = v5;
  if (v2)
  {
    v7 = *(unsigned int *)(v2 - 4);
    v6 = (uint64_t *)(v2 + 8 * v7);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  result[3] = v6;
  result[4] = (uint64_t *)(v2 + 8 * v7);
LABEL_7:
  while (v3 != v6 && !*(_QWORD *)(*v3 + 8))
  {
    v9 = v3 + 1;
    result[1] = v3 + 1;
    v3 = v5;
    if (v9 != v5)
    {
      v3 = v9;
      while ((unint64_t)(*v3 + 1) <= 1)
      {
        result[1] = ++v3;
        if (v3 == v5)
        {
          v3 = v5;
          goto LABEL_7;
        }
      }
    }
  }
  return result;
}

unsigned int *WTF::WeakHashSet<WebCore::MutationObserverRegistration,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::MutationObserverRegistration>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  unsigned int *result;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int **v27;
  unsigned int v29;
  uint64_t v31;
  int v32;
  WTF *v33;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v9 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v10 = v9;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v10;
      goto LABEL_6;
    }
    v24 = *(_DWORD *)(v8 - 4);
    if (!v24)
      goto LABEL_36;
    v25 = 0;
    v26 = v24 - 1;
    do
    {
      v27 = (unsigned int **)(v8 + 8 * v26);
      if ((unint64_t)*v27 + 1 >= 2 && !*((_QWORD *)*v27 + 1))
      {
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v27, a2);
        ++v25;
      }
    }
    while ((unint64_t)v26--);
    v8 = *(_QWORD *)a1;
    if (v25)
    {
      *(_DWORD *)(v8 - 16) += v25;
      v31 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v32 = *(_DWORD *)(v31 - 12);
      else
        v32 = 0;
      *(_DWORD *)(v31 - 12) = v32 - v25;
      v8 = *(_QWORD *)a1;
    }
    if (!v8)
      goto LABEL_3;
    v29 = *(_DWORD *)(v8 - 4);
    if (v29 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v29)
    {
LABEL_36:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v8 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_4;
      }
    }
    v9 = *(_DWORD *)(v8 - 12);
    v10 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v11 = *a2;
  if (!*a2)
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = a2;
    v13 = (unsigned int *)*a2;
    *a2 = v11;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v12);
      }
      v11 = *a2;
    }
  }
  do
    v16 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v16 + 1, (unsigned int *)v11));
  do
    v17 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v17 + 1, (unsigned int *)v11));
  v33 = (WTF *)v11;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v33, a3);
  result = (unsigned int *)v33;
  v33 = 0;
  if (result)
  {
    do
    {
      v22 = __ldaxr(result);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, result));
    if (!v23)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v18);
    }
  }
  if (v11)
  {
    do
    {
      v20 = __ldaxr((unsigned int *)v11);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, (unsigned int *)v11));
    if (!v21)
    {
      atomic_store(1u, (unsigned int *)v11);
      return (unsigned int *)WTF::fastFree((WTF *)v11, v18);
    }
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebCore::MutationObserverRegistration,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::MutationObserverRegistration>(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  WTF *v9;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int **v14;
  unsigned int v16;
  uint64_t v18;
  int v19;

  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  if (v5 > v4)
  {
    v6 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v7 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v8 = v7;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v8;
      goto LABEL_6;
    }
    v11 = *(_DWORD *)(v6 - 4);
    if (!v11)
      goto LABEL_22;
    v12 = 0;
    v13 = v11 - 1;
    do
    {
      v14 = (unsigned int **)(v6 + 8 * v13);
      if ((unint64_t)*v14 + 1 >= 2 && !*((_QWORD *)*v14 + 1))
      {
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v14, a2);
        ++v12;
      }
    }
    while ((unint64_t)v13--);
    v6 = *(_QWORD *)a1;
    if (v12)
    {
      *(_DWORD *)(v6 - 16) += v12;
      v18 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v19 = *(_DWORD *)(v18 - 12);
      else
        v19 = 0;
      *(_DWORD *)(v18 - 12) = v19 - v12;
      v6 = *(_QWORD *)a1;
    }
    if (!v6)
      goto LABEL_3;
    v16 = *(_DWORD *)(v6 - 4);
    if (v16 < 9 || 6 * *(_DWORD *)(v6 - 12) >= v16)
    {
LABEL_22:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v6 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v6)
      {
        v7 = 0;
        goto LABEL_4;
      }
    }
    v7 = *(_DWORD *)(v6 - 12);
    v8 = 0x7FFFFFFF;
    if (v7 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v9 = (WTF *)*a2;
  if (*a2 && *((_QWORD *)v9 + 1))
    return WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)a1, v9);
  else
    return 0;
}

uint64_t *WebCore::MutationObserver::enqueueMutationRecord(uint64_t a1, _QWORD *a2)
{
  WebCore::Document *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];
  WebCore::MutationObserver *v14;
  WebCore::Document *v15;

  v4 = *(WebCore::Document **)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2) + 40) + 8);
  *((_DWORD *)v4 + 6) += 2;
  v15 = v4;
  v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
  WebCore::GCReachableRef<WebCore::ContainerNode,void>::GCReachableRef(&v14, v5);
  WTF::HashTable<WebCore::GCReachableRef<WebCore::Node,void>,WebCore::GCReachableRef<WebCore::Node,void>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>>::add((uint64_t)v13, (uint64_t *)(a1 + 32), (uint64_t *)&v14);
  WebCore::GCReachableRef<WebCore::Node,void>::~GCReachableRef((uint64_t *)&v14);
  v7 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v7 == *(_DWORD *)(a1 + 24))
  {
    WTF::Vector<WTF::Ref<WebCore::MutationRecord,WTF::RawPtrTraits<WebCore::MutationRecord>,WTF::DefaultRefDerefTraits<WebCore::MutationRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::MutationRecord,WTF::RawPtrTraits<WebCore::MutationRecord>,WTF::DefaultRefDerefTraits<WebCore::MutationRecord>>>(a1 + 16, (unint64_t)a2);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *a2;
    *a2 = 0;
    *(_QWORD *)(v11 + 8 * v7) = v12;
    *(_DWORD *)(a1 + 28) = v7 + 1;
  }
  v8 = WebCore::Document::windowEventLoop(v4, v6);
  ++*(_DWORD *)(v8 + 8);
  ++*(_DWORD *)a1;
  v14 = (WebCore::MutationObserver *)a1;
  WTF::HashTable<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::add((uint64_t)v13, (uint64_t *)(v8 + 280), (uint64_t *)&v14);
  if (v14)
    WTF::RefCounted<WebCore::MutationObserver>::deref(v14, v9);
  WebCore::WindowEventLoop::queueMutationObserverCompoundMicrotask((_QWORD *)v8);
  if (*(_DWORD *)(v8 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  else
    --*(_DWORD *)(v8 + 8);
  return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v15);
}

_QWORD *WebCore::MutationObserver::enqueueSlotChangeEvent(_QWORD *result, WTF::StringImpl *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  WebCore::WindowEventLoop *v14;
  WebCore::WindowEventLoop *v15;
  WebCore::WindowEventLoop *v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::WindowEventLoop *v19;
  WebCore::WindowEventLoop *v20;
  WebCore::WindowEventLoop *v21;
  int v22;
  _QWORD *v23;
  int v24;
  WebCore::WindowEventLoop *v25[2];
  char v26;

  v2 = result;
  v3 = *(_QWORD *)(result[5] + 8);
  v4 = *(_QWORD *)(v3 + 2944);
  if (!v4)
  {
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v3 + 192), a2);
    WebCore::WindowEventLoop::eventLoopForSecurityOrigin(v19, v25);
    v20 = v25[0];
    v25[0] = 0;
    v21 = *(WebCore::WindowEventLoop **)(v3 + 2944);
    *(_QWORD *)(v3 + 2944) = v20;
    if (v21)
    {
      v22 = *((_DWORD *)v21 + 2) - 1;
      if (*((_DWORD *)v21 + 2) == 1)
      {
        (*(void (**)(WebCore::WindowEventLoop *))(*(_QWORD *)v21 + 8))(v21);
        v21 = v25[0];
        v25[0] = 0;
        if (!v21)
          goto LABEL_42;
        v22 = *((_DWORD *)v21 + 2) - 1;
        if (*((_DWORD *)v21 + 2) == 1)
        {
          (*(void (**)(WebCore::WindowEventLoop *))(*(_QWORD *)v21 + 8))(v21);
          goto LABEL_42;
        }
      }
      *((_DWORD *)v21 + 2) = v22;
    }
LABEL_42:
    result = WTF::WeakHashSet<WebCore::ScriptExecutionContext,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::ScriptExecutionContext>(*(_QWORD *)(v3 + 2944) + 104, (_QWORD *)(v3 + 192), (uint64_t)v25);
    v4 = *(_QWORD *)(v3 + 2944);
  }
  ++*(_DWORD *)(v4 + 8);
  v5 = *(unsigned int *)(v4 + 276);
  if ((_DWORD)v5 == *(_DWORD *)(v4 + 272))
  {
    v6 = v5 + (v5 >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 <= v5 + 1)
      v8 = v5 + 1;
    else
      v8 = v7;
    if (v8 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v9 = *(WTF **)(v4 + 264);
    v11 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v4 + 272) = v8;
    *(_QWORD *)(v4 + 264) = v11;
    if ((_DWORD)v5)
    {
      v12 = 8 * v5;
      v13 = v9;
      do
      {
        v14 = *(WebCore::WindowEventLoop **)v13;
        *(_QWORD *)v13 = 0;
        *(_QWORD *)v11 = v14;
        v15 = *(WebCore::WindowEventLoop **)v13;
        if (*(_QWORD *)v13)
        {
          {
            WebCore::GCReachableRefMap::map(void)::map = 0;
          }
          v25[0] = v15;
          if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, v25))*((_QWORD *)v15 + 2) &= ~0x4000000000000uLL;
          v16 = *(WebCore::WindowEventLoop **)v13;
          *(_QWORD *)v13 = 0;
          if (v16)
          {
            if (*((_DWORD *)v16 + 6) == 2)
            {
              if ((*((_WORD *)v16 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v16, v10);
            }
            else
            {
              *((_DWORD *)v16 + 6) -= 2;
            }
          }
        }
        else
        {
          *(_QWORD *)v13 = 0;
        }
        v11 = (WTF *)((char *)v11 + 8);
        v13 = (WTF *)((char *)v13 + 8);
        v12 -= 8;
      }
      while (v12);
      v11 = *(WTF **)(v4 + 264);
    }
    if (v9)
    {
      if (v11 == v9)
      {
        *(_QWORD *)(v4 + 264) = 0;
        *(_DWORD *)(v4 + 272) = 0;
      }
      WTF::fastFree(v9, v10);
      v11 = *(WTF **)(v4 + 264);
    }
    v18 = *(unsigned int *)(v4 + 276);
    *((_DWORD *)v2 + 6) += 2;
    *((_QWORD *)v11 + v18) = v2;
  }
  else
  {
    v17 = *(_QWORD *)(v4 + 264);
    *((_DWORD *)v2 + 6) += 2;
    *(_QWORD *)(v17 + 8 * v5) = v2;
  }
  {
    WebCore::GCReachableRefMap::map(void)::map = 0;
  }
  v23 = v2;
  v24 = 0;
  WTF::HashMap<WebCore::EventTarget *,unsigned int,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&WebCore::GCReachableRefMap::map(void)::map, &v23, &v24, (uint64_t)v25);
  ++*((_DWORD *)v25[0] + 2);
  if (v26)
    v2[2] |= 0x4000000000000uLL;
  ++*(_DWORD *)(v4 + 276);
  result = WebCore::WindowEventLoop::queueMutationObserverCompoundMicrotask((_QWORD *)v4);
  if (*(_DWORD *)(v4 + 8) == 1)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  --*(_DWORD *)(v4 + 8);
  return result;
}

uint64_t *WebCore::MutationObserverRegistration::takeTransientRegistrations(uint64_t *this, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;

  v2 = this;
  v3 = a2[4];
  if (v3 && *(_DWORD *)(v3 - 12))
  {
    v5 = WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::begin((_QWORD *)a2[4]);
    v7 = (uint64_t *)(v3 + 8 * *(unsigned int *)(v3 - 4));
    if (v7 != v5)
    {
      v8 = v5;
      v9 = v6;
      do
      {
        v10 = *v8++;
        WebCore::Node::unregisterTransientMutationObserver(v10, a2);
        while (v8 != v9)
        {
          if ((unint64_t)(*v8 + 1) > 1)
            goto LABEL_11;
          ++v8;
        }
        v8 = v9;
LABEL_11:
        ;
      }
      while (v8 != v7);
      v3 = a2[4];
    }
    *v2 = v3;
    a2[4] = 0;
    return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(a2 + 3);
  }
  else
  {
    *this = 0;
  }
  return this;
}

WebCore::InspectorInstrumentation *WebCore::InspectorInstrumentation::didFireObserverCallback(WebCore::InspectorInstrumentation *this, WebCore::ScriptExecutionContext *a2)
{
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    this = (WebCore::InspectorInstrumentation *)WebCore::InspectorInstrumentation::instrumentingAgents(this, a2);
    if (this)
      return (WebCore::InspectorInstrumentation *)WebCore::InspectorInstrumentation::didFireObserverCallbackImpl((uint64_t)this);
  }
  return this;
}

uint64_t WebCore::MutationObserver::notifyMutationObservers(uint64_t this, WebCore::WindowEventLoop *a2)
{
  uint64_t v2;
  WebCore::MutationObserver *v3;
  uint64_t v4;
  WebCore::MutationObserver ***v5;
  void *v6;
  WebCore::MutationObserver **v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  WebCore::MutationObserver **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::HTMLSlotElement **v21;
  WebCore::HTMLSlotElement *v22;
  void *v23;
  void **v24;
  uint64_t v25;
  uint64_t v26[3];
  void **v27;
  uint64_t v28;

  v2 = this;
  v3 = (WebCore::MutationObserver *)(this + 288);
  v4 = *(_QWORD *)(this + 288);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v27 = 0;
    v28 = 0;
    WTF::Mapper<WTF::Vector<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::HashSet<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTableTraits>>(WTF::HashSet<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTableTraits> const&)::{lambda(WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>&&)#1},WTF::Vector<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v27, (_QWORD **)v3);
    if (HIDWORD(v28))
    {
      v24 = v27;
      v25 = 8 * HIDWORD(v28);
      do
      {
        if (WebCore::ActiveDOMCallback::canInvokeCallback(*((WebCore::ActiveDOMCallback **)*v24 + 1), v23))
        {
          WTF::HashSet<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTableTraits>::remove(v3, *v24);
          WTF::HashTable<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::add(v26, (uint64_t *)(v2 + 280), (_DWORD **)v24);
        }
        ++v24;
        v25 -= 8;
      }
      while (v25);
    }
    this = WTF::Vector<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v23);
  }
  v5 = (WebCore::MutationObserver ***)(v2 + 280);
  while (*v5)
  {
    if (!(*((_DWORD *)*v5 - 3) | *(_DWORD *)(v2 + 276)))
      return this;
LABEL_6:
    v27 = 0;
    v28 = 0;
    WTF::Mapper<WTF::Vector<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::HashSet<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTableTraits>>(WTF::HashSet<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTableTraits> const&)::{lambda(WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>&&)#1},WTF::Vector<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v27, (_QWORD **)(v2 + 280));
    v7 = *v5;
    if (*v5)
    {
      *v5 = 0;
      WTF::HashTable<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::deallocateTable(v7, v6);
    }
    v8 = 126 - 2 * __clz(HIDWORD(v28));
    if (HIDWORD(v28))
      v9 = v8;
    else
      v9 = 0;
    std::__introsort<std::_ClassicAlgPolicy,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *,false>((WebCore::MutationObserver *)v27, (WebCore::MutationObserver *)&v27[HIDWORD(v28)], v9, 1);
    v11 = 0;
    v12 = *(unsigned int *)(v2 + 276);
    if ((_DWORD)v12)
    {
      v15 = 0;
      v11 = *(WTF **)(v2 + 264);
      *(_QWORD *)(v2 + 264) = 0;
      *(_QWORD *)(v2 + 272) = 0;
      do
      {
        *(_BYTE *)(*(_QWORD *)((char *)v11 + v15) + 112) = 0;
        v15 += 8;
      }
      while (8 * v12 != v15);
    }
    if (HIDWORD(v28))
    {
      v13 = (WebCore::MutationObserver **)v27;
      v14 = 8 * HIDWORD(v28);
      do
      {
        if (WebCore::ActiveDOMCallback::canInvokeCallback(*((WebCore::ActiveDOMCallback **)*v13 + 1), v10))
          WebCore::MutationObserver::deliver(*v13);
        else
          WTF::HashTable<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::add(v26, (uint64_t *)v3, (_DWORD **)v13);
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
    if ((_DWORD)v12)
    {
      v19 = 8 * v12;
      v20 = 8 * v12;
      v21 = (WebCore::HTMLSlotElement **)v11;
      do
      {
        v22 = *v21++;
        WebCore::HTMLSlotElement::dispatchSlotChangeEvent(v22);
        v20 -= 8;
      }
      while (v20);
      v18 = (uint64_t *)v11;
      do
      {
        v16 = *v18;
        if (*v18)
        {
          {
            WebCore::GCReachableRefMap::map(void)::map = 0;
          }
          v26[0] = v16;
          if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, v26))*(_QWORD *)(v16 + 16) &= ~0x4000000000000uLL;
          v17 = *v18;
          *v18 = 0;
          if (v17)
          {
            if (*(_DWORD *)(v17 + 24) == 2)
            {
              if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v17, v10);
            }
            else
            {
              *(_DWORD *)(v17 + 24) -= 2;
            }
          }
        }
        else
        {
          *v18 = 0;
        }
        ++v18;
        v19 -= 8;
      }
      while (v19);
    }
    if (v11)
      WTF::fastFree(v11, v10);
    this = WTF::Vector<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v10);
  }
  if (*(_DWORD *)(v2 + 276))
    goto LABEL_6;
  return this;
}

WebCore::MutationObserver *WTF::HashSet<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTableTraits>::remove(WebCore::MutationObserver *result, void *a2)
{
  uint64_t v2;
  uint64_t *v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  bmalloc::api *v17;
  void *v18;

  v2 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v3 = (uint64_t *)result;
    v4 = *(_DWORD *)(v2 - 8);
    v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(void **)(v2 + 8 * v8);
    if (v9 != a2)
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(void **)(v2 + 8 * v8);
        ++v10;
        if (v9 == a2)
          goto LABEL_8;
      }
      v8 = *(unsigned int *)(v2 - 4);
    }
LABEL_8:
    if (v8 != *(_DWORD *)(v2 - 4))
    {
      result = *(WebCore::MutationObserver **)(v2 + 8 * v8);
      *(_QWORD *)(v2 + 8 * v8) = -1;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebCore::MutationObserver::~MutationObserver(result, a2);
          result = (WebCore::MutationObserver *)bmalloc::api::isoDeallocate(v17, v18);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      ++*(_DWORD *)(*v3 - 16);
      v11 = *v3;
      if (*v3)
        v12 = *(_DWORD *)(v11 - 12) - 1;
      else
        v12 = -1;
      *(_DWORD *)(v11 - 12) = v12;
      v13 = *v3;
      if (*v3)
      {
        v14 = 6 * *(_DWORD *)(v13 - 12);
        v15 = *(_DWORD *)(v13 - 4);
        if (v14 < v15 && v15 >= 9)
          return (WebCore::MutationObserver *)WTF::HashTable<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::rehash(v3, v15 >> 1, 0);
      }
    }
  }
  return result;
}

BOOL WebCore::MutationObserverInterestGroup::isOldValueRequested(WebCore::MutationObserverInterestGroup *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    v2 = 0;
    v3 = 0;
LABEL_3:
    v4 = v1 + 16 * v3;
    goto LABEL_4;
  }
  v3 = *(unsigned int *)(v1 - 4);
  v4 = v1 + 16 * v3;
  if (!*(_DWORD *)(v1 - 12))
  {
    v2 = v1 + 16 * v3;
    goto LABEL_3;
  }
  v2 = *(_QWORD *)this;
  if ((_DWORD)v3)
  {
    v8 = 16 * v3;
    v2 = *(_QWORD *)this;
    while ((unint64_t)(*(_QWORD *)v2 + 1) <= 1)
    {
      v2 += 16;
      v8 -= 16;
      if (!v8)
      {
        v2 = v4;
        break;
      }
    }
  }
LABEL_4:
  if (v1)
    v1 += 16 * *(unsigned int *)(v1 - 4);
  if (v1 == v2)
    return 0;
  v5 = *((_BYTE *)this + 8);
  do
  {
    result = (*(_BYTE *)(v2 + 8) & v5) != 0;
    if ((*(_BYTE *)(v2 + 8) & v5) != 0)
      break;
    v7 = v2 + 16;
    v2 = v4;
    if (v7 != v4)
    {
      v2 = v7;
      while ((unint64_t)(*(_QWORD *)v2 + 1) <= 1)
      {
        v2 += 16;
        if (v2 == v4)
        {
          v2 = v4;
          break;
        }
      }
    }
  }
  while (v2 != v1);
  return result;
}

WebCore::MutationObserver **WebCore::MutationObserverInterestGroup::enqueueMutationRecord(uint64_t *a1, WTF::StringImpl **a2)
{
  _QWORD *v4;
  WebCore::MutationObserver **result;
  WebCore::MutationObserver **v6;
  WebCore::MutationObserver **v7;
  WebCore::MutationObserver **v8;
  WebCore::MutationObserver **v9;
  WTF::StringImpl *v10;
  WebCore::MutationObserver *v11;
  WTF::StringImpl *v12;
  void *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  void *v19;
  int v20;
  WTF::StringImpl *v21;
  WebCore::MutationObserver *v22;

  v4 = (_QWORD *)*a1;
  result = (WebCore::MutationObserver **)WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::begin((_QWORD *)*a1);
  v6 = result;
  v8 = v7;
  if (v4)
    v9 = (WebCore::MutationObserver **)&v4[2 * *((unsigned int *)v4 - 1)];
  else
    v9 = 0;
  if (v9 == result)
    return result;
  v10 = 0;
  do
  {
    v11 = *v6;
    *(_DWORD *)v11 = *(_DWORD *)*v6 + 1;
    v22 = v11;
    if (((_BYTE)a1[1] & (_BYTE)v6[1]) == 0)
    {
      if (!v10)
      {
        (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)*a2 + 80))(&v21);
        v16 = v21;
        v21 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v15);
          else
            *(_DWORD *)v16 -= 2;
          v17 = *a2;
          v18 = WTF::fastMalloc((WTF *)0x18);
          v10 = (WTF::StringImpl *)v18;
          *(_DWORD *)(v18 + 8) = 1;
          *(_QWORD *)v18 = off_1E33A6118;
          ++*((_DWORD *)v17 + 2);
          *(_QWORD *)(v18 + 16) = v17;
          v20 = *(_DWORD *)(v18 + 8);
          *(_DWORD *)(v18 + 8) = v20 + 1;
          if (!v20)
          {
            goto LABEL_24;
          }
        }
        else
        {
          v10 = *a2;
          if (!*a2)
            goto LABEL_24;
          v20 = *((_DWORD *)v10 + 2) + 1;
        }
        *((_DWORD *)v10 + 2) = v20;
      }
LABEL_24:
      v11 = v22;
      ++*((_DWORD *)v10 + 2);
      v21 = v10;
      goto LABEL_8;
    }
    v12 = *a2;
    *((_DWORD *)v12 + 2) = *((_DWORD *)*a2 + 2) + 1;
    v21 = v12;
LABEL_8:
    WebCore::MutationObserver::enqueueMutationRecord((uint64_t)v11, &v21);
    v14 = v21;
    v21 = 0;
    if (v14)
    {
      if (*((_DWORD *)v14 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v14 + 8))(v14);
      else
        --*((_DWORD *)v14 + 2);
    }
    result = WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>::~Ref(&v22, v13);
    while (1)
    {
      v6 += 2;
      if (v6 == v8)
        break;
      if ((unint64_t)*v6 + 1 > 1)
        goto LABEL_16;
    }
    v6 = v8;
LABEL_16:
    ;
  }
  while (v6 != v9);
  if (v10)
  {
    if (*((_DWORD *)v10 + 2) == 1)
      return (WebCore::MutationObserver **)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v10 + 8))(v10);
    else
      --*((_DWORD *)v10 + 2);
  }
  return result;
}

WebCore::MutationObserver **WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>::~Ref(WebCore::MutationObserver **a1, void *a2)
{
  WebCore::MutationObserver *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::MutationObserver::~MutationObserver(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

void WebCore::MutationObserverRegistration::~MutationObserverRegistration(WebCore::MutationObserverRegistration *this)
{
  uint64_t *v2;
  WebCore::MutationObserver *v3;
  void *v4;
  WTF *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::MutationObserver *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;
  bmalloc::api *v17;
  void *v18;
  bmalloc::api *v19;
  void *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  WTF::StringImpl *v30;

  v2 = (uint64_t *)*((_QWORD *)this + 4);
  if (!v2 || !*((_DWORD *)v2 - 3))
    goto LABEL_2;
  v21 = WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::begin(*((_QWORD **)this + 4));
  v23 = &v2[*((unsigned int *)v2 - 1)];
  if (v23 == v21)
  {
    *((_QWORD *)this + 4) = 0;
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)this + 3);
LABEL_53:
    WTF::HashTable<WebCore::GCReachableRef<WebCore::Node,void>,WebCore::GCReachableRef<WebCore::Node,void>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>>::deallocateTable(v2, v27);
    goto LABEL_2;
  }
  v24 = v21;
  v25 = v22;
  do
  {
    v26 = *v24++;
    WebCore::Node::unregisterTransientMutationObserver(v26, this);
    while (v24 != v25)
    {
      if ((unint64_t)(*v24 + 1) > 1)
        goto LABEL_37;
      ++v24;
    }
    v24 = v25;
LABEL_37:
    ;
  }
  while (v24 != v23);
  v2 = (uint64_t *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)this + 3);
  if (v2)
    goto LABEL_53;
LABEL_2:
  v3 = (WebCore::MutationObserver *)*((_QWORD *)this + 1);
  ++*(_DWORD *)v3;
  WTF::WeakHashSet<WebCore::MutationObserverRegistration,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::MutationObserverRegistration>((uint64_t)v3 + 40, this);
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::MutationObserver::~MutationObserver(v3, v4);
    bmalloc::api::isoDeallocate(v17, v18);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  v5 = (WTF *)*((_QWORD *)this + 6);
  if (v5)
  {
    v28 = *((unsigned int *)this + 14);
    if ((_DWORD)v28)
    {
      v29 = (WTF::StringImpl **)*((_QWORD *)this + 6);
      do
      {
        v30 = *v29;
        *v29 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v4);
          else
            *(_DWORD *)v30 -= 2;
        }
        ++v29;
        --v28;
      }
      while (v28);
    }
    WTF::fastFree(v5, v4);
  }
  v6 = (uint64_t *)*((_QWORD *)this + 4);
  if (v6)
    WTF::HashTable<WebCore::GCReachableRef<WebCore::Node,void>,WebCore::GCReachableRef<WebCore::Node,void>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>>::deallocateTable(v6, v4);
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)v8);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v8));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v8);
      v15 = *(unsigned int *)(v8 + 28);
      if ((_DWORD)v15)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v15));
      v16 = *(WTF **)(v8 + 16);
      if (v16)
      {
        *(_QWORD *)(v8 + 16) = 0;
        *(_DWORD *)(v8 + 24) = 0;
        WTF::fastFree(v16, v4);
      }
      WTF::fastFree((WTF *)v8, v4);
    }
  }
  v9 = (WebCore::MutationObserver *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      WebCore::MutationObserver::~MutationObserver(v9, v4);
      bmalloc::api::isoDeallocate(v19, v20);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v10 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v4);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

uint64_t *WebCore::MutationObserverRegistration::resetObservation(uint64_t a1, char a2, uint64_t a3)
{
  void *v6;
  uint64_t *v8;

  WebCore::MutationObserverRegistration::takeTransientRegistrations((uint64_t *)&v8, (_QWORD *)a1);
  if (v8)
    WTF::HashTable<WebCore::GCReachableRef<WebCore::Node,void>,WebCore::GCReachableRef<WebCore::Node,void>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>>::deallocateTable(v8, v6);
  *(_BYTE *)(a1 + 40) = a2;
  return WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::operator=((uint64_t *)(a1 + 48), a3);
}

uint64_t WebCore::MutationRecord::createCharacterData@<X0>(WebCore::MutationRecord *this@<X0>, WebCore::CharacterData *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  _DWORD *v8;

  result = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(result + 8) = 1;
  *((_DWORD *)this + 6) += 2;
  *(_QWORD *)(result + 16) = this;
  v8 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v8 += 2;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = v8;
  *(_QWORD *)result = off_1E33A60A8;
  *a3 = result;
  return result;
}

WebCore::NameNodeList *WebCore::NameNodeList::NameNodeList(WebCore::NameNodeList *this, WebCore::ContainerNode *a2, const WTF::AtomString *a3)
{
  uint64_t v6;
  _DWORD *v7;
  WebCore::Quirks *v8;

  v6 = WebCore::LiveNodeList::LiveNodeList((uint64_t)this, (uint64_t)a2, 3);
  *(_QWORD *)(v6 + 72) = 0;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_BYTE *)(v6 + 80) &= 0xFCu;
  *(_QWORD *)v6 = off_1E33A5EF0;
  v7 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v7 += 2;
  *((_QWORD *)this + 11) = v7;
  v8 = *(WebCore::Quirks **)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 688);
  if (!v8)
    v8 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*((_QWORD *)a2 + 5) + 8));
  *((_BYTE *)this + 96) = WebCore::Quirks::needsGetElementsByNameQuirk(v8);
  return this;
}

WebCore::NameNodeList *WebCore::NameNodeList::create@<X0>(WebCore::NameNodeList *this@<X0>, WebCore::ContainerNode *a2@<X1>, WebCore::NameNodeList **a3@<X8>)
{
  WebCore::NameNodeList *v7;
  WebCore::NameNodeList *result;

  v7 = (WebCore::NameNodeList *)bmalloc::api::isoAllocate();
  result = WebCore::NameNodeList::NameNodeList(v7, this, a2);
  *a3 = result;
  return result;
}

void WebCore::NameNodeList::~NameNodeList(WebCore::NameNodeList *this)
{
  WebCore::Node *v2;
  WebCore::NodeListsNodeData *v3;
  WTF::StringImpl *v4;
  void *v5;
  WebCore::Node *v6;

  v2 = (WebCore::Node *)*((_QWORD *)this + 3);
  *((_DWORD *)v2 + 6) += 2;
  v6 = v2;
  v3 = (WebCore::NodeListsNodeData *)WebCore::Node::nodeLists(v2);
  WebCore::NodeListsNodeData::removeCacheWithAtomName<WebCore::NameNodeList>(v3, *((_QWORD *)this + 3), (WTF::StringImpl **)this + 11);
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v6);
  WebCore::ContentType::~ContentType((WTF::StringImpl **)this + 11, v4);
  WebCore::CachedLiveNodeList<WebCore::NameNodeList>::~CachedLiveNodeList(this, v5);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::NameNodeList::~NameNodeList(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

WTF::StringImpl *WebCore::NodeListsNodeData::removeCacheWithAtomName<WebCore::NameNodeList>(WebCore::NodeListsNodeData *a1, uint64_t a2, WTF::StringImpl **a3)
{
  BOOL v5;
  WTF::StringImpl *result;
  uint64_t *v7;
  WTF::StringImpl *v8;
  unsigned __int8 *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;

  *(_DWORD *)(a2 + 24) += 2;
  v11 = a2;
  v5 = WebCore::NodeListsNodeData::deleteThisAndUpdateNodeRareDataIfAboutToRemoveLastList(a1, *(WebCore::Node **)(a2 + 72));
  result = (WTF::StringImpl *)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v11);
  if (!v5)
  {
    v7 = (uint64_t *)((char *)a1 + 16);
    LOBYTE(v11) = 0;
    v8 = *a3;
    if (*a3)
      *(_DWORD *)v8 += 2;
    v12 = v8;
    v9 = WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash>,std::pair<unsigned char,WTF::AtomString>>(v7, (unsigned __int8 *)&v11);
    WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::remove(v7, (WTF::StringImpl *)v9);
    result = v12;
    v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebCore::CachedLiveNodeList<WebCore::NameNodeList>::~CachedLiveNodeList(WebCore::LiveNodeList *a1, void *a2)
{
  *(_QWORD *)a1 = off_1E33A61B8;
  if (*((_QWORD *)a1 + 6) || (*((_BYTE *)a1 + 80) & 3) != 0)
    WebCore::Document::unregisterNodeListForInvalidation(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 40) + 8), a1);
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 64, a2);
  WebCore::LiveNodeList::~LiveNodeList(a1);
}

BOOL WebCore::NameNodeList::elementMatches(WebCore::NameNodeList *this, WebCore::Element *a2)
{
  uint64_t v2;
  unsigned int v3;
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  if ((*((_WORD *)a2 + 14) & 0x10) == 0 && !*((_BYTE *)this + 96))
    return 0;
  v2 = *((_QWORD *)a2 + 13);
  if (v2 && (v3 = *(_DWORD *)(v2 + 4), (v3 & 2) != 0))
  {
    if ((v3 & 1) != 0)
    {
      v6 = *(uint64_t **)(v2 + 40);
      LODWORD(v7) = *(_DWORD *)(v2 + 52);
    }
    else
    {
      v6 = (uint64_t *)(v2 + 32);
      LODWORD(v7) = v3 >> 5;
    }
    if ((_DWORD)v7)
    {
      v7 = v7;
      while (1)
      {
        v8 = *v6;
        if (*v6 == WebCore::HTMLNames::nameAttr
          || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
          && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
        {
          break;
        }
        v6 += 2;
        if (!--v7)
          goto LABEL_13;
      }
    }
    else
    {
LABEL_13:
      v6 = 0;
    }
    v4 = v6 + 1;
  }
  else
  {
    v4 = (_QWORD *)MEMORY[0x1E0CBF2F8];
  }
  return *v4 == *((_QWORD *)this + 11);
}

uint64_t WebCore::NamedNodeMap::ref(uint64_t this)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 8) + 24) += 2;
  return this;
}

unsigned int *WebCore::NamedNodeMap::deref(WebCore::NamedNodeMap *this, void *a2)
{
  unsigned int *result;

  result = *(unsigned int **)(*((_QWORD *)this + 1) + 8);
  if (result[6] == 2)
  {
    if ((*((_WORD *)result + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
  }
  else
  {
    result[6] -= 2;
  }
  return result;
}

unsigned int *WebCore::NamedNodeMap::getNamedItem@<X0>(WebCore::NamedNodeMap *this@<X0>, const WTF::AtomString *a2@<X1>, uint64_t a3@<X2>, WTF::String *a4@<X3>, WTF::StringImpl **a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v6;
  unsigned int *result;
  void *v8;

  v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  *(_DWORD *)(v6 + 24) += 2;
  result = (unsigned int *)WebCore::Element::getAttributeNode(v6, a2, a3, a4, a5, a6);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v6, v8);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::NamedNodeMap::getNamedItemNS@<X0>(WebCore::NamedNodeMap *this@<X0>, WTF::StringImpl **a2@<X1>, WTF::StringImpl **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  unsigned int *result;
  void *v6;

  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  result = (unsigned int *)WebCore::Element::getAttributeNodeNS((WebCore::QualifiedName::QualifiedNameImpl *)v4, a2, a3, a4);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::NamedNodeMap::removeNamedItem@<X0>(unsigned int *this@<X0>, const WTF::AtomString *a2@<X1>, uint64_t a3@<X2>, WTF::String *a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;

  v7 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  *(_DWORD *)(v7 + 24) += 2;
  v8 = *(_QWORD *)(v7 + 104);
  if (!v8)
    goto LABEL_16;
  v10 = this;
  if ((*(_BYTE *)(v8 + 4) & 8) != 0)
    this = (unsigned int *)WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)v7, (unsigned __int8 *)a2, a6, a3, a4);
  if ((*(_WORD *)(v7 + 28) & 0x20) != 0)
    this = (unsigned int *)WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v7);
  v11 = *(_QWORD *)(v7 + 104);
  if (!v11)
    goto LABEL_16;
  v12 = *(_DWORD *)(v11 + 4);
  if ((v12 & 1) != 0)
  {
    if (!*(_DWORD *)(v11 + 52))
      goto LABEL_16;
  }
  else if (!(v12 >> 5))
  {
    goto LABEL_16;
  }
  v13 = *(_QWORD *)(*((_QWORD *)v10 + 1) + 8);
  if ((*(_WORD *)(v13 + 28) & 0x10) != 0)
    v14 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 40) + 8) + 3358) & 1;
  else
    v14 = 0;
  this = (unsigned int *)WebCore::Element::findAttributeIndexByName(v7, a2, v14);
  if ((_DWORD)this != -1)
  {
    this = (unsigned int *)WebCore::Element::detachAttribute((WebCore::Element *)v7, (WTF::StringImpl *)this, (WebCore::Attr **)a5);
    v15 = 0;
    goto LABEL_17;
  }
LABEL_16:
  *(_BYTE *)a5 = 5;
  *(_QWORD *)(a5 + 8) = 0;
  v15 = 1;
LABEL_17:
  *(_DWORD *)(a5 + 16) = v15;
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  return this;
}

uint64_t WebCore::Element::findAttributeIndexByName(uint64_t this, const WTF::AtomString *a2, int a3)
{
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  uint64_t *v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  char v18;
  unsigned int v19;
  BOOL v20;
  WTF::StringImpl *v21;
  const WTF::StringImpl *v22;
  char v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  const WTF::StringImpl *v29;

  v3 = *(_QWORD *)(this + 104);
  v4 = *(_DWORD *)(v3 + 4);
  if (v3)
    v5 = (*(_DWORD *)(v3 + 4) & 1) == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = *(_DWORD *)(v3 + 52);
    if (v6)
    {
      v7 = *(uint64_t **)(v3 + 40);
      if (a3)
        goto LABEL_51;
      goto LABEL_8;
    }
    return 0xFFFFFFFFLL;
  }
  if (v4 < 0x20)
    return 0xFFFFFFFFLL;
  v6 = v4 >> 5;
  v7 = (uint64_t *)(v3 + 32);
  if (a3)
  {
LABEL_51:
    v24 = v7;
    this = WTF::AtomString::convertToASCIILowercase(a2);
    v7 = v24;
    goto LABEL_11;
  }
LABEL_8:
  v8 = *(const WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v8 += 2;
  v29 = v8;
LABEL_11:
  v9 = 0;
  v10 = v6;
  do
  {
    v11 = *v7;
    v12 = *(_DWORD **)(*v7 + 16);
    if (v12)
    {
      v25 = v7;
      v26 = v10;
      v27 = *(WTF::StringImpl **)(*v7 + 16);
      *v12 += 2;
      v13 = *(_QWORD *)(v11 + 24);
      if (v13)
      {
        v14 = *(_DWORD *)(v13 + 4);
        *(_DWORD *)v13 += 2;
        if (v14 < 0)
          goto LABEL_54;
      }
      else
      {
        v14 = 0;
      }
      v15 = v12[1];
      v16 = __OFADD__(v14, 1);
      v17 = v14 + 1;
      v18 = v16;
      if (v15 < 0 || (v18 & 1) != 0 || (this = (v15 + v17), __OFADD__(v15, v17)))
      {
LABEL_54:
        v28 = 0;
LABEL_55:
        __break(0xC471u);
        return this;
      }
      v19 = v12[4];
      if (v13)
        v20 = (v12[4] & 4) == 0;
      else
        v20 = 1;
      if (!v20)
        v19 = *(unsigned __int8 *)(v13 + 16);
      this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(this, (v19 >> 2) & 1, (uint64_t)v12, 58, v13, &v28);
      if (!v28)
        goto LABEL_55;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v13, v21);
        else
          *(_DWORD *)v13 -= 2;
      }
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v21);
      else
        *(_DWORD *)v27 -= 2;
      v23 = WTF::equal(v28, v29, v22);
      this = (uint64_t)v28;
      v28 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
        else
          *(_DWORD *)this -= 2;
      }
      v7 = v25;
      v10 = v26;
      if ((v23 & 1) != 0)
        goto LABEL_44;
    }
    else
    {
      this = *(_QWORD *)(v11 + 24);
      if ((const WTF::StringImpl *)this == v29)
        goto LABEL_45;
    }
    ++v9;
    v7 += 2;
  }
  while (v10 != v9);
  v9 = 0xFFFFFFFFLL;
LABEL_44:
  this = (uint64_t)v29;
LABEL_45:
  v29 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
    else
      *(_DWORD *)this -= 2;
  }
  return v9;
}

uint64_t WebCore::NamedNodeMap::supportedPropertyNames@<X0>(WebCore::NamedNodeMap *this@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, WTF::String *a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t result;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t *v23;

  result = (uint64_t)WebCore::Element::getAttributeNames(*(WebCore::SVGElement **)(*((_QWORD *)this + 1) + 8), a2, a3, a4, a5, a6);
  v10 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if ((*(_WORD *)(v10 + 28) & 0x10) == 0 || (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 8) + 3358) & 1) == 0)
    return result;
  v11 = *(uint64_t **)a5;
  v12 = *(unsigned int *)(a5 + 12);
  v13 = (uint64_t *)(*(_QWORD *)a5 + 8 * v12);
  v14 = 0;
  v15 = v13;
  if (!(_DWORD)v12)
    goto LABEL_28;
  v16 = (uint64_t *)(*(_QWORD *)a5 + 8 * v12);
  do
  {
    result = *v11;
    if (!*v11)
      goto LABEL_20;
    v17 = *(_DWORD *)(result + 4);
    if (!v17)
      goto LABEL_20;
    v18 = *(unsigned __int8 **)(result + 8);
    if ((*(_BYTE *)(result + 16) & 4) != 0)
    {
      if (*v18 - 65 < 0x1A)
        goto LABEL_12;
      v19 = 1;
      while (v17 != v19)
      {
        v20 = v18[v19++] - 65;
        if (v20 <= 0x19)
          goto LABEL_12;
      }
    }
    else
    {
      if (*(unsigned __int16 *)v18 - 65 < 0x1A)
      {
LABEL_12:
        if (v16 == (uint64_t *)(*(_QWORD *)a5 + 8 * *(unsigned int *)(a5 + 12)))
        {
          v16 = v11;
        }
        else if (v15 != v11)
        {
          memmove(v16, v15, (char *)v11 - (char *)v15);
          v16 = (uint64_t *)((char *)v16 + (char *)v11 - (char *)v15);
          result = *v11;
        }
        *v11 = 0;
        v15 = v11 + 1;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
          else
            *(_DWORD *)result -= 2;
        }
        ++v14;
        goto LABEL_20;
      }
      v21 = 1;
      while (v17 != v21)
      {
        v22 = *(unsigned __int16 *)&v18[2 * v21++] - 65;
        if (v22 < 0x1A)
          goto LABEL_12;
      }
    }
LABEL_20:
    ++v11;
  }
  while (v11 < v13);
  v11 = *(uint64_t **)a5;
  LODWORD(v12) = *(_DWORD *)(a5 + 12);
  v13 = v16;
LABEL_28:
  v23 = &v11[v12];
  if (v15 != v23)
  {
    result = (uint64_t)memmove(v13, v15, (char *)v23 - (char *)v15);
    LODWORD(v12) = *(_DWORD *)(a5 + 12);
  }
  *(_DWORD *)(a5 + 12) = v12 - v14;
  return result;
}

unsigned int *WebCore::NamedNodeMap::removeNamedItemNS@<X0>(unsigned int *this@<X0>, const WTF::AtomString *a2@<X1>, WTF::StringImpl **a3@<X2>, WTF::String *a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  BOOL v14;
  WebCore::QualifiedName::QualifiedNameImpl **v15;
  int v16;
  uint64_t v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  int v19;
  WTF *v20;
  void *v21;
  WebCore::QualifiedName::QualifiedNameImpl *v22;

  v7 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  *(_DWORD *)(v7 + 24) += 2;
  v8 = *(_QWORD *)(v7 + 104);
  if (!v8)
    goto LABEL_16;
  if ((*(_BYTE *)(v8 + 4) & 8) != 0)
    this = (unsigned int *)WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)v7, (unsigned __int8 *)a2, a6, (uint64_t)a3, a4);
  if ((*(_WORD *)(v7 + 28) & 0x20) != 0)
    this = (unsigned int *)WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v7);
  v11 = *(_QWORD *)(v7 + 104);
  if (!v11)
    goto LABEL_16;
  v12 = *(_DWORD *)(v11 + 4);
  if ((v12 & 1) == 0)
  {
    if (v12 >> 5)
      goto LABEL_9;
LABEL_16:
    *(_BYTE *)a5 = 5;
    *(_QWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 16) = 1;
LABEL_17:
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
    return this;
  }
  if (!*(_DWORD *)(v11 + 52))
    goto LABEL_16;
LABEL_9:
  WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v22, MEMORY[0x1E0CBF2F8], a3, (WTF::StringImpl **)a2);
  v13 = *(_QWORD *)(v7 + 104);
  if (v13)
    v14 = (*(_DWORD *)(v13 + 4) & 1) == 0;
  else
    v14 = 1;
  if (v14)
  {
    v15 = (WebCore::QualifiedName::QualifiedNameImpl **)(v13 + 32);
    v16 = *(_DWORD *)(v13 + 4) >> 5;
  }
  else
  {
    v15 = *(WebCore::QualifiedName::QualifiedNameImpl ***)(v13 + 40);
    v16 = *(_DWORD *)(v13 + 52);
  }
  this = (unsigned int *)v22;
  if (v16)
  {
    v17 = 0;
    while (1)
    {
      v18 = *v15;
      if (*v15 == v22)
        break;
      if (*((_QWORD *)v18 + 3) == *((_QWORD *)v22 + 3) && *((_QWORD *)v18 + 4) == *((_QWORD *)v22 + 4))
        goto LABEL_26;
      ++v17;
      v15 += 2;
      if (v16 == v17)
      {
        v17 = 0xFFFFFFFFLL;
LABEL_26:
        v22 = 0;
        goto LABEL_29;
      }
    }
  }
  else
  {
    v17 = 0xFFFFFFFFLL;
  }
  v22 = 0;
  if (this)
  {
LABEL_29:
    if (*this == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)this);
      this = (unsigned int *)WTF::fastFree(v20, v21);
    }
    else
    {
      --*this;
    }
  }
  if ((_DWORD)v17 == -1)
  {
    *(_BYTE *)a5 = 5;
    *(_QWORD *)(a5 + 8) = 0;
    v19 = 1;
  }
  else
  {
    this = (unsigned int *)WebCore::Element::detachAttribute((WebCore::Element *)v7, (WTF::StringImpl *)v17, (WebCore::Attr **)a5);
    v19 = 0;
  }
  *(_DWORD *)(a5 + 16) = v19;
  if (v7)
    goto LABEL_17;
  return this;
}

unsigned int *WebCore::NamedNodeMap::setNamedItem@<X0>(WebCore::NamedNodeMap *this@<X0>, WebCore::Attr *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned int *result;
  void *v5;

  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  result = WebCore::Element::setAttributeNode((WebCore::Element *)v3, a2, a3);
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v3, v5);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::NamedNodeMap::item@<X0>(unsigned int *this@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, WTF::String *a4@<X3>, uint64_t *a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _DWORD *v17;
  uint64_t v18;
  void *v19;

  v7 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v8 = *(_QWORD *)(v7 + 104);
  if (!v8)
    goto LABEL_10;
  v9 = a2;
  v10 = this;
  if ((*(_BYTE *)(v8 + 4) & 8) != 0)
    this = (unsigned int *)WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(*(WebCore::StyledElement **)(*((_QWORD *)this + 1) + 8), a2, a6, a3, a4);
  if ((*(_WORD *)(v7 + 28) & 0x20) != 0)
    this = (unsigned int *)WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v7);
  v11 = *(_QWORD *)(v7 + 104);
  if (!v11)
    goto LABEL_10;
  v12 = *(_DWORD *)(v11 + 4);
  if (!((v12 & 1) != 0 ? *(_DWORD *)(v11 + 52) : v12 >> 5))
    goto LABEL_10;
  v14 = *(_QWORD *)(*((_QWORD *)v10 + 1) + 8);
  v15 = *(_QWORD *)(v14 + 104);
  if (v15)
    v16 = (*(_DWORD *)(v15 + 4) & 1) == 0;
  else
    v16 = 1;
  if (v16)
  {
    if (v9 < *(_DWORD *)(v15 + 4) >> 5)
    {
      v17 = (_DWORD *)(v14 + 24);
      *(_DWORD *)(v14 + 24) += 2;
      v18 = v15 + 32;
      goto LABEL_19;
    }
LABEL_10:
    *a5 = 0;
    return this;
  }
  if (*(_DWORD *)(v15 + 52) <= v9)
    goto LABEL_10;
  v17 = (_DWORD *)(v14 + 24);
  *(_DWORD *)(v14 + 24) += 2;
  v18 = *(_QWORD *)(v15 + 40);
LABEL_19:
  this = WebCore::Element::ensureAttr((WebCore::TreeScope **)v14, (const WebCore::QualifiedName *)(v18 + 16 * v9), a5);
  if (*(_DWORD *)(v14 + 24) == 2)
  {
    if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v14, v19);
  }
  else
  {
    *v17 = *(_DWORD *)(v14 + 24) - 2;
  }
  return this;
}

uint64_t WebCore::NamedNodeMap::length(WebCore::NamedNodeMap *this, unsigned __int8 *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v12;
  BOOL v13;

  v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v6 = *(_QWORD *)(v5 + 104);
  if (!v6)
    return 0;
  if ((*(_BYTE *)(v6 + 4) & 8) != 0)
    WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(*(WebCore::StyledElement **)(*((_QWORD *)this + 1) + 8), a2, a5, a3, a4);
  if ((*(_WORD *)(v5 + 28) & 0x20) != 0)
    WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v5);
  v8 = *(_QWORD *)(v5 + 104);
  if (!v8)
    return 0;
  v9 = *(_DWORD *)(v8 + 4);
  if (!((v9 & 1) != 0 ? *(_DWORD *)(v8 + 52) : v9 >> 5))
    return 0;
  v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 104);
  if (v12)
    v13 = (*(_DWORD *)(v12 + 4) & 1) == 0;
  else
    v13 = 1;
  if (v13)
    return *(_DWORD *)(v12 + 4) >> 5;
  else
    return *(unsigned int *)(v12 + 52);
}

void WebCore::MouseRelatedEvent::~MouseRelatedEvent(WebCore::MouseRelatedEvent *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::UIEvent::~UIEvent(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::MutationRecord::previousSibling(WebCore::MutationRecord *this)
{
  return 0;
}

uint64_t WebCore::MutationRecord::nextSibling(WebCore::MutationRecord *this)
{
  return 0;
}

uint64_t WebCore::MutationRecord::attributeName(WebCore::MutationRecord *this)
{
  return MEMORY[0x1E0CBF2F8];
}

uint64_t WebCore::MutationRecord::attributeNamespace(WebCore::MutationRecord *this)
{
  return MEMORY[0x1E0CBF2F8];
}

uint64_t WebCore::CachedLiveNodeList<WebCore::NameNodeList>::length(WebCore::LiveNodeList *a1)
{
  return WebCore::CollectionIndexCache<WebCore::NameNodeList,WebCore::ElementDescendantIterator<WebCore::Element>>::nodeCount((uint64_t)a1 + 40, a1);
}

uint64_t WebCore::CachedLiveNodeList<WebCore::NameNodeList>::item(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  char v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v3 = result;
  v4 = *(_BYTE *)(result + 80);
  if ((v4 & 1) != 0 && *(_DWORD *)(result + 60) <= a2)
    return 0;
  if ((*(_BYTE *)(result + 80) & 2) != 0)
  {
    if (*(_DWORD *)(result + 76) <= a2)
    {
      __break(0xC471u);
      return result;
    }
    v13 = *(_QWORD *)(*(_QWORD *)(result + 64) + 8 * a2);
    if (v13)
      return *(_QWORD *)(v13 + 8);
    return 0;
  }
  result = *(_QWORD *)(result + 48);
  if (!result)
  {
    if ((v4 & 1) != 0)
    {
      if (*(_DWORD *)(v3 + 60) - a2 < a2)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3)
          && (v25 = *(_QWORD *)(v3 + 24), (*(_BYTE *)(v25 + 22) & 0x18) != 0))
        {
          v17 = *(uint64_t **)(v25 + 40);
        }
        else
        {
          v17 = (uint64_t *)(v3 + 24);
        }
        v18 = *(_QWORD *)(v3 + 88);
        v19 = *(_BYTE *)(v3 + 96);
        v20 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::NameNodeList>(v18, v19, *v17);
        result = v21;
        *(_QWORD *)(v3 + 40) = v20;
        *(_QWORD *)(v3 + 48) = v21;
        v22 = *(_DWORD *)(v3 + 60);
        if (v22 - 1 > a2)
        {
          WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseBackward<WebCore::NameNodeList>(v18, v19, (uint64_t *)(v3 + 40), v22 + ~a2);
          result = *(_QWORD *)(v3 + 48);
        }
        *(_DWORD *)(v3 + 56) = a2;
        return result;
      }
    }
    else
    {
      WebCore::CachedLiveNodeList<WebCore::NameNodeList>::willValidateIndexCache((WebCore::LiveNodeList *)v3);
    }
    v24 = WebCore::CachedLiveNodeList<WebCore::NameNodeList>::collectionBegin(v3);
    result = v23;
    *(_DWORD *)(v3 + 56) = 0;
    *(_QWORD *)(v3 + 40) = v24;
    *(_QWORD *)(v3 + 48) = v23;
    if (a2)
    {
      if (v23)
      {
        WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::NameNodeList>(*(_QWORD *)(v3 + 88), *(_BYTE *)(v3 + 96), (_QWORD *)(v3 + 40), a2, (_DWORD *)(v3 + 56));
        result = *(_QWORD *)(v3 + 48);
        if (result)
          return result;
        v16 = *(_DWORD *)(v3 + 56) + 1;
        goto LABEL_37;
      }
    }
    else if (v23)
    {
      return result;
    }
    v16 = 0;
LABEL_37:
    result = 0;
    goto LABEL_38;
  }
  v5 = *(_DWORD *)(v3 + 56);
  v6 = a2 - v5;
  if (a2 > v5)
  {
    if ((v4 & 1) != 0 && *(_DWORD *)(v3 + 60) - a2 < v6)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3)
        && (v26 = *(_QWORD *)(v3 + 24), (*(_BYTE *)(v26 + 22) & 0x18) != 0))
      {
        v7 = *(uint64_t **)(v26 + 40);
      }
      else
      {
        v7 = (uint64_t *)(v3 + 24);
      }
      v8 = *(_QWORD *)(v3 + 88);
      v9 = *(_BYTE *)(v3 + 96);
      v10 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::NameNodeList>(v8, v9, *v7);
      result = v11;
      *(_QWORD *)(v3 + 40) = v10;
      *(_QWORD *)(v3 + 48) = v11;
      v12 = *(_DWORD *)(v3 + 60);
      if (v12 - 1 > a2)
      {
        WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseBackward<WebCore::NameNodeList>(v8, v9, (uint64_t *)(v3 + 40), v12 + ~a2);
        result = *(_QWORD *)(v3 + 48);
      }
      *(_DWORD *)(v3 + 56) = a2;
      return result;
    }
    v27 = 0;
    WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::NameNodeList>(*(_QWORD *)(v3 + 88), *(_BYTE *)(v3 + 96), (_QWORD *)(v3 + 40), v6, &v27);
    v15 = v27 + *(_DWORD *)(v3 + 56);
    *(_DWORD *)(v3 + 56) = v15;
    result = *(_QWORD *)(v3 + 48);
    if (result)
      return result;
    v16 = v15 + 1;
LABEL_38:
    *(_DWORD *)(v3 + 60) = v16;
    *(_BYTE *)(v3 + 80) |= 1u;
    return result;
  }
  if (a2 < v5)
  {
    if (v5 - a2 <= a2)
    {
      WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseBackward<WebCore::NameNodeList>(*(_QWORD *)(v3 + 88), *(_BYTE *)(v3 + 96), (uint64_t *)(v3 + 40), v5 - a2);
      *(_DWORD *)(v3 + 56) = a2;
    }
    else
    {
      *(_QWORD *)(v3 + 40) = WebCore::CachedLiveNodeList<WebCore::NameNodeList>::collectionBegin(v3);
      *(_QWORD *)(v3 + 48) = v14;
      *(_DWORD *)(v3 + 56) = 0;
      if (a2)
        WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::NameNodeList>(*(_QWORD *)(v3 + 88), *(_BYTE *)(v3 + 96), (_QWORD *)(v3 + 40), a2, (_DWORD *)(v3 + 56));
    }
    return *(_QWORD *)(v3 + 48);
  }
  return result;
}

uint64_t WebCore::CachedLiveNodeList<WebCore::NameNodeList>::memoryCost(uint64_t a1)
{
  return 8 * *(unsigned int *)(a1 + 72);
}

uint64_t WebCore::NameNodeList::isRootedAtTreeScope(WebCore::NameNodeList *this)
{
  return 0;
}

uint64_t WebCore::CachedLiveNodeList<WebCore::NameNodeList>::invalidateCacheForDocument(uint64_t result, WebCore::Document *this)
{
  _QWORD *v2;
  uint64_t v3;

  if (*(_QWORD *)(result + 48) || (*(_BYTE *)(result + 80) & 3) != 0)
  {
    v2 = (_QWORD *)(result + 40);
    v3 = result;
    WebCore::Document::unregisterNodeListForInvalidation((uint64_t)this, (WebCore::LiveNodeList *)result);
    *v2 = 0;
    v2[1] = 0;
    *(_BYTE *)(v3 + 80) &= 0xFCu;
    return WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(v3 + 64, 0);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::HashTable(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  unsigned int *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int *v31;
  _QWORD *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  _QWORD *v36;

  *a1 = 0;
  if (!*a2)
    return a1;
  v4 = *(unsigned int *)(*a2 - 12);
  if (!(_DWORD)v4)
    return a1;
  v6 = (v4 - 1) | ((v4 - 1) >> 1) | ((((_DWORD)v4 - 1) | ((v4 - 1) >> 1)) >> 2);
  v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
  v8 = (v7 | HIWORD(v7)) + 1;
  if (v8 > 0x400)
  {
    if (v8 > 2 * v4)
      goto LABEL_42;
  }
  else if (3 * v8 > 4 * v4)
  {
LABEL_7:
    v9 = (double)v4;
    v10 = (double)v8;
    v11 = 0.604166667;
    goto LABEL_8;
  }
  LODWORD(v8) = 2 * v8;
  if (v8 <= 0x400)
    goto LABEL_7;
LABEL_42:
  v9 = (double)v4;
  v10 = (double)v8;
  v11 = 0.416666667;
LABEL_8:
  if (v10 * v11 <= v9)
    LODWORD(v8) = 2 * v8;
  if (v8 <= 8)
    v12 = 8;
  else
    v12 = v8;
  v13 = WTF::fastZeroedMalloc((WTF *)(8 * v12 + 16));
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v12;
  *(_DWORD *)(*a1 - 8) = v12 - 1;
  *(_DWORD *)(*a1 - 12) = v4;
  *(_DWORD *)(*a1 - 16) = 0;
  v15 = (_QWORD *)*a2;
  if (*a2)
  {
    v17 = *((unsigned int *)v15 - 1);
    v18 = &v15[v17];
    if (*((_DWORD *)v15 - 3))
    {
      v16 = v15;
      if ((_DWORD)v17)
      {
        v35 = 8 * v17;
        v16 = v15;
        while ((unint64_t)(*v16 + 1) <= 1)
        {
          ++v16;
          v35 -= 8;
          if (!v35)
          {
            v16 = v18;
            goto LABEL_16;
          }
        }
      }
      goto LABEL_16;
    }
    v16 = &v15[v17];
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  v18 = &v15[v17];
LABEL_16:
  if (v15)
    v19 = &v15[*((unsigned int *)v15 - 1)];
  else
    v19 = 0;
  while (v16 != v19)
  {
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 8);
    else
      v21 = 0;
    v22 = (unsigned int *)*v16;
    v23 = ~(*v16 << 32) + *v16;
    v24 = (v23 ^ (v23 >> 22)) + ~((v23 ^ (v23 >> 22)) << 13);
    v25 = (9 * (v24 ^ (v24 >> 8))) ^ ((9 * (v24 ^ (v24 >> 8))) >> 15);
    v26 = v21 & (((v25 + ~(v25 << 27)) >> 31) ^ (v25 + ~((_DWORD)v25 << 27)));
    v27 = 1;
    do
    {
      v28 = v26;
      v29 = *(_QWORD *)(v20 + 8 * v26);
      v26 = (v26 + v27++) & v21;
    }
    while (v29);
    do
      v30 = __ldaxr(v22);
    while (__stlxr(v30 + 1, v22));
    v31 = *(unsigned int **)(v20 + 8 * v28);
    *(_QWORD *)(v20 + 8 * v28) = v22;
    if (v31)
    {
      do
      {
        v33 = __ldaxr(v31);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v31));
      if (!v34)
      {
        atomic_store(1u, v31);
        v36 = v16;
        WTF::fastFree((WTF *)v31, v14);
        v16 = v36;
      }
    }
    v32 = v16 + 1;
    v16 = v18;
    if (v32 != v18)
    {
      v16 = v32;
      while ((unint64_t)(*v16 + 1) <= 1)
      {
        if (++v16 == v18)
        {
          v16 = v18;
          break;
        }
      }
    }
  }
  return a1;
}

WebCore::MutationObserver *std::__introsort<std::_ClassicAlgPolicy,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *,false>(WebCore::MutationObserver *result, WebCore::MutationObserver *a2, uint64_t a3, char a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  char v19;
  BOOL v20;

  v6 = (uint64_t *)result;
LABEL_2:
  v7 = v6;
LABEL_3:
  v8 = 1 - a3;
  while (2)
  {
    v9 = v8;
    v10 = a2 - (WebCore::MutationObserver *)v7;
    v11 = (a2 - (WebCore::MutationObserver *)v7) >> 3;
    if (v11 < 2)
      return result;
    v6 = v7;
    switch(v11)
    {
      case 2uLL:
        v12 = *((_QWORD *)a2 - 1);
        v13 = *v7;
        if (*(_DWORD *)(v12 + 56) < *(_DWORD *)(*v7 + 56))
        {
          *v7 = v12;
          *((_QWORD *)a2 - 1) = v13;
        }
        return result;
      case 3uLL:
        return (WebCore::MutationObserver *)std::__sort3_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *,0>(v7, v7 + 1, (uint64_t *)a2 - 1);
      case 4uLL:
        return (WebCore::MutationObserver *)std::__sort4_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *,0>(v7, v7 + 1, v7 + 2, (uint64_t *)a2 - 1);
      case 5uLL:
        return (WebCore::MutationObserver *)std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *,0>(v7, v7 + 1, v7 + 2, v7 + 3, (uint64_t *)a2 - 1);
      default:
        if (v10 > 191)
        {
          if (v9 == 1)
            return std::__partial_sort[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *>((WebCore::MutationObserver *)v7, a2, (WebCore::MutationObserver **)a2);
          v14 = (uint64_t *)((char *)a2 - 8);
          v15 = v11 >> 1;
          v16 = &v7[v11 >> 1];
          if ((unint64_t)v10 < 0x401)
          {
            std::__sort3_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *,0>(&v7[v11 >> 1], v7, v14);
          }
          else
          {
            std::__sort3_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *,0>(v7, &v7[v11 >> 1], v14);
            std::__sort3_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *,0>(v7 + 1, v16 - 1, (uint64_t *)a2 - 2);
            std::__sort3_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *,0>(v7 + 2, &v7[v15 + 1], (uint64_t *)a2 - 3);
            std::__sort3_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *,0>(v16 - 1, v16, &v7[v15 + 1]);
            v17 = *v7;
            *v7 = *v16;
            *v16 = v17;
          }
          if ((a4 & 1) == 0 && *(_DWORD *)(*(v7 - 1) + 56) >= *(_DWORD *)(*v7 + 56))
          {
            result = std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &>((WebCore::MutationObserver *)v7, (char *)a2);
            v7 = (uint64_t *)result;
            goto LABEL_23;
          }
          v18 = (uint64_t *)std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &>((WebCore::MutationObserver *)v7, a2);
          if ((v19 & 1) == 0)
            goto LABEL_22;
          v20 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *>(v7, v18);
          v7 = v18 + 1;
          result = (WebCore::MutationObserver *)std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *>(v18 + 1, (uint64_t *)a2);
          if (!(_DWORD)result)
          {
            v8 = v9 + 1;
            if (v20)
              continue;
LABEL_22:
            result = (WebCore::MutationObserver *)std::__introsort<std::_ClassicAlgPolicy,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *,false>(v6, v18, -v9, a4 & 1);
            v7 = v18 + 1;
LABEL_23:
            a4 = 0;
            a3 = -v9;
            goto LABEL_3;
          }
          a3 = -v9;
          a2 = (WebCore::MutationObserver *)v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
          return std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *>((WebCore::MutationObserver *)v7, a2);
        else
          return std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *>((WebCore::MutationObserver *)v7, a2);
    }
  }
}

uint64_t *std::__sort3_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *,0>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *result;
  v5 = *(_DWORD *)(*a2 + 56);
  v6 = *(_DWORD *)(*result + 56);
  v7 = *a3;
  v8 = *(_DWORD *)(*a3 + 56);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (*(_DWORD *)(*a2 + 56) < *(_DWORD *)(*result + 56))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (*(_DWORD *)(*a3 + 56) >= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

uint64_t *std::__sort4_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *,0>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *result;
  v6 = *(_DWORD *)(*a2 + 56);
  v7 = *(_DWORD *)(*result + 56);
  v8 = *a3;
  v9 = *(_DWORD *)(*a3 + 56);
  if (v6 >= v7)
  {
    if (v9 >= v6)
    {
      v4 = *a3;
    }
    else
    {
      *a2 = v8;
      *a3 = v4;
      v10 = *result;
      if (*(_DWORD *)(*a2 + 56) < *(_DWORD *)(*result + 56))
      {
        *result = *a2;
        *a2 = v10;
        v4 = *a3;
      }
    }
  }
  else
  {
    if (v9 < v6)
    {
      *result = v8;
LABEL_9:
      *a3 = v5;
      v4 = v5;
      goto LABEL_11;
    }
    *result = v4;
    *a2 = v5;
    v4 = *a3;
    if (*(_DWORD *)(*a3 + 56) < v7)
    {
      *a2 = v4;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(_DWORD *)(*a4 + 56) < *(_DWORD *)(v4 + 56))
  {
    *a3 = *a4;
    *a4 = v4;
    v11 = *a2;
    if (*(_DWORD *)(*a3 + 56) < *(_DWORD *)(*a2 + 56))
    {
      *a2 = *a3;
      *a3 = v11;
      v12 = *result;
      if (*(_DWORD *)(*a2 + 56) < *(_DWORD *)(*result + 56))
      {
        *result = *a2;
        *a2 = v12;
      }
    }
  }
  return result;
}

uint64_t *std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *,0>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *a2;
  v6 = *result;
  v7 = *(_DWORD *)(*a2 + 56);
  v8 = *(_DWORD *)(*result + 56);
  v9 = *a3;
  v10 = *(_DWORD *)(*a3 + 56);
  if (v7 >= v8)
  {
    if (v10 >= v7)
    {
      v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      v11 = *result;
      if (*(_DWORD *)(*a2 + 56) < *(_DWORD *)(*result + 56))
      {
        *result = *a2;
        *a2 = v11;
        v5 = *a3;
      }
    }
  }
  else
  {
    if (v10 < v7)
    {
      *result = v9;
LABEL_9:
      *a3 = v6;
      v5 = v6;
      goto LABEL_11;
    }
    *result = v5;
    *a2 = v6;
    v5 = *a3;
    if (*(_DWORD *)(*a3 + 56) < v8)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(_DWORD *)(*a4 + 56) < *(_DWORD *)(v5 + 56))
  {
    *a3 = *a4;
    *a4 = v5;
    v12 = *a2;
    if (*(_DWORD *)(*a3 + 56) < *(_DWORD *)(*a2 + 56))
    {
      *a2 = *a3;
      *a3 = v12;
      v13 = *result;
      if (*(_DWORD *)(*a2 + 56) < *(_DWORD *)(*result + 56))
      {
        *result = *a2;
        *a2 = v13;
      }
    }
  }
  v14 = *a4;
  if (*(_DWORD *)(*a5 + 56) < *(_DWORD *)(*a4 + 56))
  {
    *a4 = *a5;
    *a5 = v14;
    v15 = *a3;
    if (*(_DWORD *)(*a4 + 56) < *(_DWORD *)(*a3 + 56))
    {
      *a3 = *a4;
      *a4 = v15;
      v16 = *a2;
      if (*(_DWORD *)(*a3 + 56) < *(_DWORD *)(*a2 + 56))
      {
        *a2 = *a3;
        *a3 = v16;
        v17 = *result;
        if (*(_DWORD *)(*a2 + 56) < *(_DWORD *)(*result + 56))
        {
          *result = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

WebCore::MutationObserver *std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *>(WebCore::MutationObserver *result, WebCore::MutationObserver *a2)
{
  WebCore::MutationObserver **v3;
  WebCore::MutationObserver *v4;
  uint64_t v5;
  WebCore::MutationObserver *v6;
  WebCore::MutationObserver *v7;
  WebCore::MutationObserver *v8;
  WebCore::MutationObserver *v9;
  uint64_t i;
  WebCore::MutationObserver **v11;
  WebCore::MutationObserver **v12;
  bmalloc::api *v13;
  void *v14;
  bmalloc::api *v15;
  void *v16;

  if (result == a2)
    return result;
  v3 = (WebCore::MutationObserver **)result;
  v4 = (WebCore::MutationObserver *)((char *)result + 8);
  if ((WebCore::MutationObserver *)((char *)result + 8) == a2)
    return result;
  v5 = 0;
  v6 = result;
  do
  {
    v7 = *(WebCore::MutationObserver **)v6;
    v8 = (WebCore::MutationObserver *)*((_QWORD *)v6 + 1);
    v6 = v4;
    if (*((_DWORD *)v8 + 14) >= *((_DWORD *)v7 + 14))
      goto LABEL_17;
    v9 = 0;
    *(_QWORD *)v4 = 0;
    for (i = v5; ; i -= 8)
    {
      v11 = (WebCore::MutationObserver **)((char *)v3 + i);
      *v11 = 0;
      v11[1] = v7;
      if (!v9)
        goto LABEL_9;
      if (*(_DWORD *)v9 == 1)
        break;
      --*(_DWORD *)v9;
LABEL_9:
      if (!i)
        goto LABEL_13;
LABEL_10:
      v12 = (WebCore::MutationObserver **)((char *)v3 + i);
      v7 = *(WebCore::MutationObserver **)((char *)v3 + i - 8);
      if (*((_DWORD *)v8 + 14) >= *((_DWORD *)v7 + 14))
        goto LABEL_14;
      v9 = *v11;
    }
    WebCore::MutationObserver::~MutationObserver(v9, a2);
    bmalloc::api::isoDeallocate(v13, v14);
    if (i)
      goto LABEL_10;
LABEL_13:
    v12 = v3;
LABEL_14:
    result = *v12;
    *v12 = v8;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::MutationObserver::~MutationObserver(result, a2);
        result = (WebCore::MutationObserver *)bmalloc::api::isoDeallocate(v15, v16);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
LABEL_17:
    v4 = (WebCore::MutationObserver *)((char *)v6 + 8);
    v5 += 8;
  }
  while ((WebCore::MutationObserver *)((char *)v6 + 8) != a2);
  return result;
}

WebCore::MutationObserver *std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *>(WebCore::MutationObserver *result, WebCore::MutationObserver *a2)
{
  WebCore::MutationObserver *v3;
  WebCore::MutationObserver *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  WebCore::MutationObserver **v12;
  bmalloc::api *v13;
  void *v14;
  bmalloc::api *v15;
  void *v16;

  if (result != a2)
  {
    v3 = result;
    v4 = (WebCore::MutationObserver *)((char *)result + 8);
    if ((WebCore::MutationObserver *)((char *)result + 8) != a2)
    {
      v5 = 0;
      v6 = 1;
      do
      {
        v7 = v5;
        v5 = v6;
        v8 = *(_QWORD *)v4;
        if (*(_DWORD *)(*(_QWORD *)v4 + 56) < *(_DWORD *)(*((_QWORD *)v3 + v7) + 56))
        {
          result = 0;
          *(_QWORD *)v4 = 0;
          v9 = *((_QWORD *)v3 + v7);
          do
          {
            v10 = (_QWORD *)((char *)v3 + 8 * v7);
            *v10 = 0;
            v10[1] = v9;
            if (result)
            {
              if (*(_DWORD *)result == 1)
              {
                WebCore::MutationObserver::~MutationObserver(result, a2);
                result = (WebCore::MutationObserver *)bmalloc::api::isoDeallocate(v13, v14);
              }
              else
              {
                --*(_DWORD *)result;
              }
            }
            if (v7 == -1)
            {
              __break(1u);
              return result;
            }
            v11 = v7 - 1;
            v12 = (WebCore::MutationObserver **)((char *)v3 + 8 * v7);
            v9 = (uint64_t)*(v12 - 1);
            result = *v12;
            --v7;
          }
          while (*(_DWORD *)(v8 + 56) < *(_DWORD *)(v9 + 56));
          *((_QWORD *)v3 + v11 + 1) = v8;
          if (result)
          {
            if (*(_DWORD *)result == 1)
            {
              WebCore::MutationObserver::~MutationObserver(result, a2);
              result = (WebCore::MutationObserver *)bmalloc::api::isoDeallocate(v15, v16);
            }
            else
            {
              --*(_DWORD *)result;
            }
          }
        }
        v6 = v5 + 1;
        v4 = (WebCore::MutationObserver *)((char *)v3 + 8 * v5 + 8);
      }
      while (v4 != a2);
    }
  }
  return result;
}

WebCore::MutationObserver *std::__partial_sort[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *>(WebCore::MutationObserver *result, WebCore::MutationObserver *a2, WebCore::MutationObserver **a3)
{
  WebCore::MutationObserver **v4;
  WebCore::MutationObserver *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  WebCore::MutationObserver **v10;
  WebCore::MutationObserver **v11;
  WebCore::MutationObserver *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::MutationObserver *v15;
  WebCore::MutationObserver **v16;
  WebCore::MutationObserver **v17;
  WebCore::MutationObserver *v18;
  WebCore::MutationObserver *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  WTF *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t i;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  WebCore::MutationObserver *v30;
  WebCore::MutationObserver *v31;
  uint64_t v32;
  unint64_t v33;
  WebCore::MutationObserver **v34;
  WebCore::MutationObserver *v35;
  WebCore::MutationObserver *v36;
  WebCore::MutationObserver **v37;
  WebCore::MutationObserver *v38;
  bmalloc::api *v39;
  void *v40;
  bmalloc::api *v42;
  void *v43;
  bmalloc::api *v44;
  void *v45;
  bmalloc::api *v46;
  void *v47;
  uint64_t v48;

  if (result != a2)
  {
    v4 = (WebCore::MutationObserver **)a2;
    v5 = result;
    v6 = a2 - result;
    v7 = (a2 - result) >> 3;
    if (a2 - result >= 9)
    {
      v8 = (unint64_t)(v7 - 2) >> 1;
      v9 = v8 + 1;
      v10 = (WebCore::MutationObserver **)((char *)result + 8 * v8);
      do
      {
        result = std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *>(v5, v7, v10--);
        --v9;
      }
      while (v9);
    }
    if (v4 != a3)
    {
      v11 = v4;
      do
      {
        v12 = *v11;
        if (*((_DWORD *)*v11 + 14) < *(_DWORD *)(*(_QWORD *)v5 + 56))
        {
          *v11 = *(WebCore::MutationObserver **)v5;
          *(_QWORD *)v5 = v12;
          result = std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *>(v5, v7, (WebCore::MutationObserver **)v5);
        }
        ++v11;
      }
      while (v11 != a3);
    }
    if (v6 >= 9)
    {
      v13 = (unint64_t)v6 >> 3;
      while (1)
      {
        v14 = 0;
        v15 = *(WebCore::MutationObserver **)v5;
        *(_QWORD *)v5 = 0;
        v16 = (WebCore::MutationObserver **)v5;
        do
        {
          v17 = v16;
          v16 += v14 + 1;
          if (2 * v14 + 2 >= v13)
          {
            v18 = *v16;
            v14 = (2 * v14) | 1;
          }
          else
          {
            v18 = *v16;
            if (*((_DWORD *)*v16 + 14) >= *((_DWORD *)v16[1] + 14))
            {
              v14 = (2 * v14) | 1;
            }
            else
            {
              v18 = v16[1];
              ++v16;
              v14 = 2 * v14 + 2;
            }
          }
          *v16 = 0;
          v19 = *v17;
          *v17 = v18;
          if (v19)
          {
            if (*(_DWORD *)v19 == 1)
            {
              v20 = *((_QWORD *)v19 + 5);
              if (v20)
              {
                v25 = *(unsigned int *)(v20 - 4);
                if ((_DWORD)v25)
                {
                  for (i = 0; i != v25; ++i)
                  {
                    v27 = *(unsigned int **)(v20 + 8 * i);
                    if (v27 != (unsigned int *)-1)
                    {
                      *(_QWORD *)(v20 + 8 * i) = 0;
                      if (v27)
                      {
                        do
                        {
                          v28 = __ldaxr(v27);
                          v29 = v28 - 1;
                        }
                        while (__stlxr(v29, v27));
                        if (!v29)
                        {
                          atomic_store(1u, v27);
                          v48 = v25;
                          WTF::fastFree((WTF *)v27, a2);
                          v25 = v48;
                        }
                      }
                    }
                  }
                }
                WTF::fastFree((WTF *)(v20 - 16), a2);
              }
              v21 = (uint64_t *)*((_QWORD *)v19 + 4);
              if (v21)
                WTF::HashTable<WebCore::GCReachableRef<WebCore::Node,void>,WebCore::GCReachableRef<WebCore::Node,void>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>>::deallocateTable(v21, a2);
              v22 = *((unsigned int *)v19 + 7);
              if ((_DWORD)v22)
                WTF::VectorDestructor<true,WTF::Ref<WebCore::MutationRecord,WTF::RawPtrTraits<WebCore::MutationRecord>,WTF::DefaultRefDerefTraits<WebCore::MutationRecord>>>::destruct(*((_DWORD **)v19 + 2), (_DWORD **)(*((_QWORD *)v19 + 2) + 8 * v22));
              v23 = (WTF *)*((_QWORD *)v19 + 2);
              if (v23)
              {
                *((_QWORD *)v19 + 2) = 0;
                *((_DWORD *)v19 + 6) = 0;
                WTF::fastFree(v23, a2);
              }
              v24 = (_DWORD *)*((_QWORD *)v19 + 1);
              *((_QWORD *)v19 + 1) = 0;
              if (v24)
              {
                if (v24[4] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 16))(v24);
                else
                  --v24[4];
              }
              bmalloc::api::isoDeallocate(v19, a2);
            }
            else
            {
              --*(_DWORD *)v19;
            }
          }
        }
        while (v14 <= (uint64_t)((unint64_t)(v13 - 2) >> 1));
        if (v16 == --v4)
        {
          result = *v16;
          *v16 = v15;
          if (!result)
            goto LABEL_66;
          goto LABEL_64;
        }
        v30 = *v4;
        *v4 = 0;
        v31 = *v16;
        *v16 = v30;
        if (v31)
        {
          if (*(_DWORD *)v31 == 1)
          {
            WebCore::MutationObserver::~MutationObserver(v31, a2);
            bmalloc::api::isoDeallocate(v42, v43);
          }
          else
          {
            --*(_DWORD *)v31;
          }
        }
        result = *v4;
        *v4 = v15;
        if (result)
        {
          if (*(_DWORD *)result == 1)
          {
            WebCore::MutationObserver::~MutationObserver(result, a2);
            result = (WebCore::MutationObserver *)bmalloc::api::isoDeallocate(v44, v45);
          }
          else
          {
            --*(_DWORD *)result;
          }
        }
        v32 = (char *)(v16 + 1) - (char *)v5;
        if (v32 >= 9)
        {
          v33 = (((unint64_t)v32 >> 3) - 2) >> 1;
          v34 = (WebCore::MutationObserver **)((char *)v5 + 8 * v33);
          v35 = *v16;
          if (*((_DWORD *)*v34 + 14) < *((_DWORD *)*v16 + 14))
            break;
        }
LABEL_66:
        if (v13-- <= 2)
          return result;
      }
      *v16 = 0;
      v36 = *v34;
      while (1)
      {
        v37 = v34;
        *v34 = 0;
        v38 = *v16;
        *v16 = v36;
        if (!v38)
          goto LABEL_57;
        if (*(_DWORD *)v38 != 1)
          break;
        WebCore::MutationObserver::~MutationObserver(v38, a2);
        bmalloc::api::isoDeallocate(v39, v40);
        if (!v33)
        {
LABEL_61:
          result = *v37;
          *v37 = v35;
          if (!result)
            goto LABEL_66;
LABEL_64:
          if (*(_DWORD *)result == 1)
          {
            WebCore::MutationObserver::~MutationObserver(result, a2);
            result = (WebCore::MutationObserver *)bmalloc::api::isoDeallocate(v46, v47);
          }
          else
          {
            --*(_DWORD *)result;
          }
          goto LABEL_66;
        }
LABEL_58:
        v33 = (v33 - 1) >> 1;
        v34 = (WebCore::MutationObserver **)((char *)v5 + 8 * v33);
        v36 = *v34;
        v16 = v37;
        if (*((_DWORD *)*v34 + 14) >= *((_DWORD *)v35 + 14))
          goto LABEL_61;
      }
      --*(_DWORD *)v38;
LABEL_57:
      if (!v33)
        goto LABEL_61;
      goto LABEL_58;
    }
  }
  return result;
}

WebCore::MutationObserver *std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &>(WebCore::MutationObserver *a1, char *a2)
{
  WebCore::MutationObserver *v2;
  WebCore::MutationObserver *v3;
  unsigned int v4;
  char *v5;
  uint64_t v6;
  char *v7;
  WebCore::MutationObserver *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::MutationObserver **v14;
  WebCore::MutationObserver *v15;
  WebCore::MutationObserver *v16;
  bmalloc::api *v18;
  void *v19;
  bmalloc::api *v20;
  void *v21;

  v3 = *(WebCore::MutationObserver **)a1;
  *(_QWORD *)a1 = 0;
  v4 = *((_DWORD *)v3 + 14);
  if (v4 < *(_DWORD *)(*((_QWORD *)a2 - 1) + 56))
  {
    v5 = (char *)a1 + 8;
    while (v5 != a2)
    {
      v6 = *(_QWORD *)v5;
      v5 += 8;
      if (v4 < *(_DWORD *)(v6 + 56))
      {
        v2 = (WebCore::MutationObserver *)(v5 - 8);
        goto LABEL_9;
      }
    }
    goto LABEL_30;
  }
  v7 = (char *)a1 + 8;
  do
  {
    v2 = (WebCore::MutationObserver *)v7;
    if (v7 >= a2)
      break;
    v7 += 8;
  }
  while (v4 >= *(_DWORD *)(*(_QWORD *)v2 + 56));
LABEL_9:
  v8 = (WebCore::MutationObserver *)a2;
  if (v2 < (WebCore::MutationObserver *)a2)
  {
    v8 = (WebCore::MutationObserver *)a2;
    while (v8 != a1)
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 = (WebCore::MutationObserver *)((char *)v8 - 8);
      if (v4 >= *(_DWORD *)(v9 + 56))
        goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_13:
  if (v2 < v8)
  {
    v10 = *(_QWORD *)v2;
    v11 = *(_QWORD *)v8;
LABEL_15:
    *(_QWORD *)v2 = v11;
    v2 = (WebCore::MutationObserver *)((char *)v2 + 8);
    *(_QWORD *)v8 = v10;
    while (v2 != (WebCore::MutationObserver *)a2)
    {
      v12 = *(_QWORD *)v2;
      v2 = (WebCore::MutationObserver *)((char *)v2 + 8);
      v10 = v12;
      if (v4 < *(_DWORD *)(v12 + 56))
      {
        v2 = (WebCore::MutationObserver *)((char *)v2 - 8);
        while (v8 != a1)
        {
          v13 = *((_QWORD *)v8 - 1);
          v8 = (WebCore::MutationObserver *)((char *)v8 - 8);
          v11 = v13;
          if (v4 >= *(_DWORD *)(v13 + 56))
          {
            if (v2 < v8)
              goto LABEL_15;
            goto LABEL_22;
          }
        }
        break;
      }
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
LABEL_22:
  v14 = (WebCore::MutationObserver **)((char *)v2 - 8);
  if ((WebCore::MutationObserver *)((char *)v2 - 8) != a1)
  {
    v15 = *v14;
    *v14 = 0;
    v16 = *(WebCore::MutationObserver **)a1;
    *(_QWORD *)a1 = v15;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
      {
        WebCore::MutationObserver::~MutationObserver(v16, a2);
        bmalloc::api::isoDeallocate(v20, v21);
      }
      else
      {
        --*(_DWORD *)v16;
      }
    }
  }
  a1 = *v14;
  *v14 = v3;
  if (a1)
  {
    if (*(_DWORD *)a1 == 1)
    {
LABEL_31:
      WebCore::MutationObserver::~MutationObserver(a1, a2);
      bmalloc::api::isoDeallocate(v18, v19);
      return v2;
    }
    --*(_DWORD *)a1;
  }
  return v2;
}

WebCore::MutationObserver **std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &>(WebCore::MutationObserver *a1, WebCore::MutationObserver *a2)
{
  WebCore::MutationObserver **v2;
  WebCore::MutationObserver *v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  WebCore::MutationObserver *v8;
  WebCore::MutationObserver *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::MutationObserver *v13;
  WebCore::MutationObserver *v14;
  WebCore::MutationObserver *v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::MutationObserver *v18;
  WebCore::MutationObserver *v19;
  bmalloc::api *v21;
  void *v22;
  bmalloc::api *v23;
  void *v24;

  v3 = *(WebCore::MutationObserver **)a1;
  *(_QWORD *)a1 = 0;
  v4 = (unint64_t)a1 + 8;
  if ((WebCore::MutationObserver *)((char *)a1 + 8) == a2)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v5 = *(_QWORD *)v4;
  v6 = *((_DWORD *)v3 + 14);
  if (*(_DWORD *)(*(_QWORD *)v4 + 56) < v6)
  {
    v7 = 0;
    while (1)
    {
      v8 = (WebCore::MutationObserver *)((char *)a1 + v7 + 16);
      if (v8 == a2)
        goto LABEL_33;
      v5 = *(_QWORD *)v8;
      v7 += 8;
      if (*(_DWORD *)(v5 + 56) >= v6)
      {
        v2 = (WebCore::MutationObserver **)((char *)a1 + v7);
        v4 = (unint64_t)a1 + v7 + 8;
        if (!v7)
          break;
        v9 = a2;
        while (v9 != a1)
        {
          v10 = *((_QWORD *)v9 - 1);
          v9 = (WebCore::MutationObserver *)((char *)v9 - 8);
          if (*(_DWORD *)(v10 + 56) < v6)
            goto LABEL_15;
        }
        goto LABEL_33;
      }
    }
  }
  v9 = a2;
  do
  {
    if (v4 >= (unint64_t)v9)
      break;
    v11 = *((_QWORD *)v9 - 1);
    v9 = (WebCore::MutationObserver *)((char *)v9 - 8);
  }
  while (*(_DWORD *)(v11 + 56) >= v6);
  v2 = (WebCore::MutationObserver **)a1;
LABEL_15:
  if (v4 < (unint64_t)v9)
  {
    v12 = *(_QWORD *)v9;
    v13 = (WebCore::MutationObserver *)v4;
    v14 = v9;
LABEL_17:
    *(_QWORD *)v13 = v12;
    *(_QWORD *)v14 = v5;
    v15 = (WebCore::MutationObserver *)((char *)v13 + 8);
    while (v15 != a2)
    {
      v16 = *(_QWORD *)v15;
      v15 = (WebCore::MutationObserver *)((char *)v15 + 8);
      v5 = v16;
      if (*(_DWORD *)(v16 + 56) >= v6)
      {
        v13 = (WebCore::MutationObserver *)((char *)v15 - 8);
        while (v14 != a1)
        {
          v17 = *((_QWORD *)v14 - 1);
          v14 = (WebCore::MutationObserver *)((char *)v14 - 8);
          v12 = v17;
          if (*(_DWORD *)(v17 + 56) < v6)
          {
            if (v13 < v14)
              goto LABEL_17;
            v2 = (WebCore::MutationObserver **)((char *)v15 - 16);
            goto LABEL_25;
          }
        }
        goto LABEL_33;
      }
    }
    goto LABEL_33;
  }
LABEL_25:
  if (v2 != (WebCore::MutationObserver **)a1)
  {
    v18 = *v2;
    *v2 = 0;
    v19 = *(WebCore::MutationObserver **)a1;
    *(_QWORD *)a1 = v18;
    if (v19)
    {
      if (*(_DWORD *)v19 == 1)
      {
        WebCore::MutationObserver::~MutationObserver(v19, a2);
        bmalloc::api::isoDeallocate(v23, v24);
      }
      else
      {
        --*(_DWORD *)v19;
      }
    }
  }
  a1 = *v2;
  *v2 = v3;
  if (a1)
  {
    if (*(_DWORD *)a1 == 1)
    {
LABEL_34:
      WebCore::MutationObserver::~MutationObserver(a1, a2);
      bmalloc::api::isoDeallocate(v21, v22);
      return v2;
    }
    --*(_DWORD *)a1;
  }
  return v2;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  WebCore::MutationObserver *v37;
  uint64_t v38;
  WebCore::MutationObserver *v39;
  uint64_t i;
  char *v41;
  bmalloc::api *v42;
  void *v43;
  WebCore::MutationObserver **v44;
  WebCore::MutationObserver *v45;
  bmalloc::api *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_DWORD *)(v6 + 56) < *(_DWORD *)(*a1 + 56))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      v17 = *a1;
      v18 = a1[1];
      v19 = *(_DWORD *)(v18 + 56);
      v20 = *(_DWORD *)(*a1 + 56);
      v21 = *(a2 - 1);
      v22 = *(_DWORD *)(v21 + 56);
      if (v19 >= v20)
      {
        if (v22 < v19)
        {
          a1[1] = v21;
          *(a2 - 1) = v18;
          v49 = *a1;
          v48 = a1[1];
          if (*(_DWORD *)(v48 + 56) < *(_DWORD *)(*a1 + 56))
          {
            *a1 = v48;
            a1[1] = v49;
          }
        }
      }
      else
      {
        if (v22 >= v19)
        {
          *a1 = v18;
          a1[1] = v17;
          v55 = *(a2 - 1);
          if (*(_DWORD *)(v55 + 56) >= v20)
            return result;
          a1[1] = v55;
        }
        else
        {
          *a1 = v21;
        }
        *(a2 - 1) = v17;
      }
      return result;
    case 4:
      v23 = a1 + 1;
      v24 = a1[1];
      v25 = a1 + 2;
      v26 = a1[2];
      v27 = *a1;
      v28 = *(_DWORD *)(v24 + 56);
      v29 = *(_DWORD *)(*a1 + 56);
      v30 = *(_DWORD *)(v26 + 56);
      if (v28 >= v29)
      {
        if (v30 >= v28)
        {
LABEL_45:
          v24 = v26;
          goto LABEL_46;
        }
        *v23 = v26;
        *v25 = v24;
        v31 = a1;
        v32 = a1 + 1;
        v33 = v24;
        if (v30 >= v29)
        {
LABEL_46:
          v50 = *(a2 - 1);
          if (*(_DWORD *)(v50 + 56) < *(_DWORD *)(v24 + 56))
          {
            *v25 = v50;
            *(a2 - 1) = v24;
            v51 = *v25;
            v52 = *v23;
            v53 = *(_DWORD *)(v51 + 56);
            if (v53 < *(_DWORD *)(v52 + 56))
            {
              a1[1] = v51;
              a1[2] = v52;
              v54 = *a1;
              if (v53 < *(_DWORD *)(*a1 + 56))
              {
                *a1 = v51;
                a1[1] = v54;
              }
            }
          }
          return 1;
        }
      }
      else
      {
        v31 = a1;
        v32 = a1 + 2;
        v33 = *a1;
        if (v30 >= v28)
        {
          *a1 = v24;
          a1[1] = v27;
          v31 = a1 + 1;
          v32 = a1 + 2;
          v33 = v27;
          if (v30 >= v29)
            goto LABEL_45;
        }
      }
      *v31 = v26;
      *v32 = v27;
      v24 = v33;
      goto LABEL_46;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      v9 = a1[2];
      v10 = a1[1];
      v11 = *a1;
      v12 = *(_DWORD *)(v10 + 56);
      v13 = *(_DWORD *)(*a1 + 56);
      v14 = *(_DWORD *)(v9 + 56);
      if (v12 >= v13)
      {
        if (v14 >= v12)
          goto LABEL_19;
        a1[1] = v9;
        *v8 = v10;
        v15 = a1;
        v16 = a1 + 1;
      }
      else
      {
        v15 = a1;
        v16 = a1 + 2;
        if (v14 < v12)
          goto LABEL_18;
        *a1 = v10;
        a1[1] = v11;
        v15 = a1 + 1;
        v16 = a1 + 2;
      }
      if (v14 >= v13)
        goto LABEL_19;
LABEL_18:
      *v15 = v9;
      *v16 = v11;
LABEL_19:
      v34 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v35 = 0;
      v36 = 0;
      while (1)
      {
        v37 = (WebCore::MutationObserver *)*v34;
        v38 = *v8;
        if (*(_DWORD *)(*v34 + 56) < *(_DWORD *)(v38 + 56))
        {
          v39 = 0;
          *v34 = 0;
          for (i = v35; ; i -= 8)
          {
            v41 = (char *)a1 + i;
            *((_QWORD *)v41 + 2) = 0;
            *((_QWORD *)v41 + 3) = v38;
            if (v39)
            {
              if (*(_DWORD *)v39 == 1)
              {
                WebCore::MutationObserver::~MutationObserver(v39, a2);
                bmalloc::api::isoDeallocate(v42, v43);
              }
              else
              {
                --*(_DWORD *)v39;
              }
            }
            if (i == -16)
            {
              v44 = (WebCore::MutationObserver **)a1;
              goto LABEL_32;
            }
            v38 = *(uint64_t *)((char *)a1 + i + 8);
            if (*((_DWORD *)v37 + 14) >= *(_DWORD *)(v38 + 56))
              break;
            v39 = (WebCore::MutationObserver *)*((_QWORD *)v41 + 2);
          }
          v44 = (WebCore::MutationObserver **)((char *)a1 + i + 16);
LABEL_32:
          v45 = *v44;
          *v44 = v37;
          if (v45)
          {
            if (*(_DWORD *)v45 == 1)
            {
              WebCore::MutationObserver::~MutationObserver(v45, a2);
              bmalloc::api::isoDeallocate(v46, v47);
            }
            else
            {
              --*(_DWORD *)v45;
            }
          }
          if (++v36 == 8)
            return v34 + 1 == a2;
        }
        v8 = v34;
        v35 += 8;
        if (++v34 == a2)
          return 1;
      }
  }
}

WebCore::MutationObserver *std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MutationObserver::notifyMutationObservers(WebCore::WindowEventLoop &)::$_0 &,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>> *>(WebCore::MutationObserver *result, uint64_t a2, WebCore::MutationObserver **a3)
{
  unint64_t v3;
  WebCore::MutationObserver *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  WebCore::MutationObserver **v10;
  uint64_t v11;
  WebCore::MutationObserver *v12;
  WebCore::MutationObserver *v13;
  WebCore::MutationObserver *v14;
  WebCore::MutationObserver **v15;
  WebCore::MutationObserver *v16;
  bmalloc::api *v17;
  void *v18;
  bmalloc::api *v19;
  void *v20;

  v3 = a2 - 2;
  if (a2 >= 2)
  {
    v4 = result;
    v5 = (char *)a3 - (char *)result;
    v6 = v3 >> 1;
    if ((uint64_t)(v3 >> 1) >= ((char *)a3 - (char *)result) >> 3)
    {
      v8 = v5 >> 2;
      v9 = (v5 >> 2) + 1;
      v10 = (WebCore::MutationObserver **)((char *)result + 8 * v9);
      v11 = v8 + 2;
      if (v8 + 2 >= a2)
      {
        v12 = *v10;
      }
      else
      {
        v12 = *v10;
        if (*((_DWORD *)*v10 + 14) < *((_DWORD *)v10[1] + 14))
        {
          v12 = v10[1];
          ++v10;
          v9 = v11;
        }
      }
      v13 = *a3;
      if (*((_DWORD *)v12 + 14) >= *((_DWORD *)*a3 + 14))
      {
        *a3 = 0;
        v14 = *v10;
        do
        {
          v15 = v10;
          *v10 = 0;
          v16 = *a3;
          *a3 = v14;
          if (v16)
          {
            if (*(_DWORD *)v16 == 1)
            {
              WebCore::MutationObserver::~MutationObserver(v16, (void *)a2);
              bmalloc::api::isoDeallocate(v17, v18);
            }
            else
            {
              --*(_DWORD *)v16;
            }
          }
          if (v6 < v9)
            break;
          v10 = (WebCore::MutationObserver **)((char *)v4 + 8 * ((2 * v9) | 1));
          if (2 * v9 + 2 >= a2)
          {
            v14 = *v10;
            v9 = (2 * v9) | 1;
          }
          else
          {
            v14 = *v10;
            if (*((_DWORD *)*v10 + 14) >= *((_DWORD *)v10[1] + 14))
            {
              v9 = (2 * v9) | 1;
            }
            else
            {
              v14 = v10[1];
              ++v10;
              v9 = 2 * v9 + 2;
            }
          }
          a3 = v15;
        }
        while (*((_DWORD *)v14 + 14) >= *((_DWORD *)v13 + 14));
        result = *v15;
        *v15 = v13;
        if (result)
        {
          if (*(_DWORD *)result == 1)
          {
            WebCore::MutationObserver::~MutationObserver(result, (void *)a2);
            return (WebCore::MutationObserver *)bmalloc::api::isoDeallocate(v19, v20);
          }
          else
          {
            --*(_DWORD *)result;
          }
        }
      }
    }
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::RobinHoodHashTable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t i;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 13) = 0;
  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3)
  {
    if (*(_DWORD *)(a2 + 12))
    {
      v6 = WTF::fastZeroedMalloc((WTF *)(8 * v3));
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 16) = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v6);
      *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
      v7 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v7)
      {
        for (i = 0; i < v7; ++i)
        {
          v9 = *(WTF::StringImpl **)(*(_QWORD *)a2 + 8 * i);
          if (v9)
          {
            *(_DWORD *)v9 += 2;
            v12 = v9;
            WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::reinsert((uint64_t *)a1, &v12);
            v11 = v12;
            v12 = 0;
            if (v11)
            {
              if (*(_DWORD *)v11 == 2)
                WTF::StringImpl::destroy(v11, v10);
              else
                *(_DWORD *)v11 -= 2;
            }
            v7 = *(unsigned int *)(a2 + 8);
          }
        }
      }
    }
  }
  return a1;
}

uint64_t *WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::operator=(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;

  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::RobinHoodHashTable((uint64_t)&v7, a2);
  v3 = *a1;
  *a1 = v7;
  v7 = v3;
  v4 = a1[1];
  a1[1] = v8;
  v8 = v4;
  LODWORD(v3) = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 4) = v9;
  v9 = v3;
  LOBYTE(v3) = *((_BYTE *)a1 + 20);
  *((_BYTE *)a1 + 20) = v10;
  v10 = v3;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::~HashSet((uint64_t)&v7, v5);
  return a1;
}

uint64_t *WebCore::`anonymous namespace'::ChildListRecord::type(WebCore::_anonymous_namespace_::ChildListRecord *this)
{
  uint64_t v2;

  if ((_MergedGlobals_173 & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    qword_1ECE83208 = v2;
    _MergedGlobals_173 = 1;
  }
  return &qword_1ECE83208;
}

uint64_t WebCore::`anonymous namespace'::ChildListRecord::addedNodes(WebCore::_anonymous_namespace_::ChildListRecord *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t WebCore::`anonymous namespace'::ChildListRecord::removedNodes(WebCore::_anonymous_namespace_::ChildListRecord *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t WebCore::`anonymous namespace'::ChildListRecord::previousSibling(WebCore::_anonymous_namespace_::ChildListRecord *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t WebCore::`anonymous namespace'::ChildListRecord::nextSibling(WebCore::_anonymous_namespace_::ChildListRecord *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t WebCore::`anonymous namespace'::visitNodeList(WebCore::_anonymous_namespace_ *this, JSC::AbstractSlotVisitor *a2, WebCore::NodeList *a3)
{
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;

  result = (*(uint64_t (**)(JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 16))(a2);
  if ((_DWORD)result)
  {
    v6 = result;
    v7 = 0;
    do
    {
      result = (*(uint64_t (**)(JSC::AbstractSlotVisitor *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v7);
      if (result)
      {
        if ((*(_BYTE *)(result + 22) & 8) == 0)
        {
          while (1)
          {
            v8 = result;
            if ((*(_WORD *)(result + 28) & 0x80) != 0)
            {
              v10 = *(_QWORD *)(result + 200);
              if (!v10)
                goto LABEL_14;
              v9 = (uint64_t *)(v10 + 8);
            }
            else
            {
              v9 = (uint64_t *)(result + 32);
            }
            result = *v9;
            if (!*v9)
              goto LABEL_14;
          }
        }
        v8 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8);
LABEL_14:
        if (v8 && !*((_BYTE *)this + 130))
        {
          result = *((_QWORD *)this + 15);
          v11 = *(_QWORD *)(result + 48);
          v12 = *(_DWORD *)(v11 + 4);
          v13 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
          v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
          v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
          v16 = v12 & ((v15 >> 31) ^ v15);
          v17 = v16;
          while (1)
          {
            v18 = *(_QWORD *)(v11 + 8 * v17 + 16);
            if (!v18)
              break;
            if (v8 == v18)
              goto LABEL_4;
            v17 = (v17 + 1) & v12;
            if (v17 == v16)
            {
              result = 165;
              __break(0xC471u);
              return result;
            }
          }
          result = WTF::ConcurrentPtrHashSet::addSlow();
          if ((_DWORD)result)
          {
            if (*((_BYTE *)this + 131))
              result = (*(uint64_t (**)(WebCore::_anonymous_namespace_ *, uint64_t))(*(_QWORD *)this + 144))(this, v8);
            ++*((_QWORD *)this + 9);
          }
        }
      }
LABEL_4:
      v7 = (v7 + 1);
    }
    while ((_DWORD)v7 != v6);
  }
  return result;
}

void WebCore::`anonymous namespace'::AttributesRecord::~AttributesRecord(WebCore::_anonymous_namespace_::AttributesRecord *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  uint64_t v8;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = off_1E33A6038;
  v5 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[4];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[4];
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
}

{
  WTF *v2;
  void *v3;

  WTF::fastFree(v2, v3);
}

uint64_t WebCore::`anonymous namespace'::RecordWithEmptyNodeLists::addedNodes(WebCore::_anonymous_namespace_::RecordWithEmptyNodeLists *this)
{
  uint64_t result;
  _DWORD *v3;

  result = *((_QWORD *)this + 4);
  if (!result)
  {
    result = bmalloc::api::isoAllocate();
    *(_DWORD *)(result + 16) = 1;
    *(_QWORD *)result = &unk_1E33A84B8;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    v3 = (_DWORD *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = result;
    if (v3)
    {
      if (v3[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        return *((_QWORD *)this + 4);
      }
      else
      {
        --v3[4];
      }
    }
  }
  return result;
}

uint64_t WebCore::`anonymous namespace'::RecordWithEmptyNodeLists::removedNodes(WebCore::_anonymous_namespace_::RecordWithEmptyNodeLists *this)
{
  uint64_t result;
  _DWORD *v3;

  result = *((_QWORD *)this + 5);
  if (!result)
  {
    result = bmalloc::api::isoAllocate();
    *(_DWORD *)(result + 16) = 1;
    *(_QWORD *)result = &unk_1E33A84B8;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    v3 = (_DWORD *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = result;
    if (v3)
    {
      if (v3[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        return *((_QWORD *)this + 5);
      }
      else
      {
        --v3[4];
      }
    }
  }
  return result;
}

uint64_t WebCore::`anonymous namespace'::AttributesRecord::attributeName(WebCore::_anonymous_namespace_::AttributesRecord *this)
{
  return (uint64_t)this + 48;
}

uint64_t WebCore::`anonymous namespace'::AttributesRecord::attributeNamespace(WebCore::_anonymous_namespace_::AttributesRecord *this)
{
  return (uint64_t)this + 56;
}

uint64_t WebCore::`anonymous namespace'::RecordWithEmptyNodeLists::visitNodesConcurrently(uint64_t this, JSC::AbstractSlotVisitor *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  v2 = *(_QWORD *)(this + 16);
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 22) & 8) == 0)
    {
      while (1)
      {
        v3 = v2;
        if ((*(_WORD *)(v2 + 28) & 0x80) != 0)
        {
          v5 = *(_QWORD *)(v2 + 200);
          if (!v5)
            goto LABEL_11;
          v4 = (uint64_t *)(v5 + 8);
        }
        else
        {
          v4 = (uint64_t *)(v2 + 32);
        }
        v2 = *v4;
        if (!v2)
          goto LABEL_11;
      }
    }
    v3 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
LABEL_11:
    if (v3 && !*((_BYTE *)a2 + 130))
    {
      this = *((_QWORD *)a2 + 15);
      v6 = *(_QWORD *)(this + 48);
      v7 = *(_DWORD *)(v6 + 4);
      v8 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
      v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
      v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
      v11 = v7 & ((v10 >> 31) ^ v10);
      v12 = v11;
      while (1)
      {
        v13 = *(_QWORD *)(v6 + 8 * v12 + 16);
        if (!v13)
          break;
        if (v3 == v13)
          return this;
        v12 = (v12 + 1) & v7;
        if (v12 == v11)
        {
          __break(0xC471u);
          JUMPOUT(0x195A0CB74);
        }
      }
      this = WTF::ConcurrentPtrHashSet::addSlow();
      if ((_DWORD)this)
      {
        if (*((_BYTE *)a2 + 131))
          this = (*(uint64_t (**)(JSC::AbstractSlotVisitor *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v3);
        ++*((_QWORD *)a2 + 9);
      }
    }
  }
  return this;
}

void WebCore::`anonymous namespace'::CharacterDataRecord::~CharacterDataRecord(WebCore::_anonymous_namespace_::CharacterDataRecord *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E33A6038;
  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
}

{
  _DWORD *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E33A6038;
  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  WTF::fastFree(this, a2);
}

_QWORD *WebCore::`anonymous namespace'::CharacterDataRecord::type(WebCore::_anonymous_namespace_::CharacterDataRecord *this)
{
  uint64_t v2;

  if ((byte_1ECE83202 & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    qword_1ECE83218 = v2;
    byte_1ECE83202 = 1;
  }
  return &qword_1ECE83218;
}

void WebCore::`anonymous namespace'::MutationRecordWithNullOldValue::~MutationRecordWithNullOldValue(WebCore::_anonymous_namespace_::MutationRecordWithNullOldValue *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
}

void WebCore::`anonymous namespace'::MutationRecordWithNullOldValue::~MutationRecordWithNullOldValue(WebCore::_anonymous_namespace_::MutationRecordWithNullOldValue *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::`anonymous namespace'::MutationRecordWithNullOldValue::addedNodes(WebCore::_anonymous_namespace_::MutationRecordWithNullOldValue *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
}

uint64_t WebCore::`anonymous namespace'::MutationRecordWithNullOldValue::removedNodes(WebCore::_anonymous_namespace_::MutationRecordWithNullOldValue *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
}

uint64_t WebCore::`anonymous namespace'::MutationRecordWithNullOldValue::previousSibling(WebCore::_anonymous_namespace_::MutationRecordWithNullOldValue *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 48))(*((_QWORD *)this + 2));
}

uint64_t WebCore::`anonymous namespace'::MutationRecordWithNullOldValue::nextSibling(WebCore::_anonymous_namespace_::MutationRecordWithNullOldValue *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2));
}

uint64_t WebCore::`anonymous namespace'::MutationRecordWithNullOldValue::attributeName(WebCore::_anonymous_namespace_::MutationRecordWithNullOldValue *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
}

uint64_t WebCore::`anonymous namespace'::MutationRecordWithNullOldValue::attributeNamespace(WebCore::_anonymous_namespace_::MutationRecordWithNullOldValue *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
}

void WebCore::`anonymous namespace'::MutationRecordWithNullOldValue::oldValue(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::`anonymous namespace'::MutationRecordWithNullOldValue::visitNodesConcurrently(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 88))(*(_QWORD *)(a1 + 16));
}

WebCore::MutationObserver *WTF::RefCounted<WebCore::MutationObserver>::deref(WebCore::MutationObserver *result, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebCore::MutationObserver::~MutationObserver(result, a2);
    return (WebCore::MutationObserver *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::MutationObserverRegistration,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorTypeOperations<WTF::WeakPtr<WTF::Observer<void ()>,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::destruct(*(unsigned int **)a1, (void *)(*(_QWORD *)a1 + 8 * v3));
  v4 = *(unsigned int **)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v4 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::HashSet<WebCore::GCReachableRef<WebCore::Node,void>,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t **v4;
  uint64_t v7;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(uint64_t ***)a1;
  if ((_DWORD)v3)
  {
    v7 = 8 * v3;
    do
    {
      if (*v4)
        WTF::HashTable<WebCore::GCReachableRef<WebCore::Node,void>,WebCore::GCReachableRef<WebCore::Node,void>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>>::deallocateTable(*v4, a2);
      ++v4;
      v7 -= 8;
    }
    while (v7);
    v4 = *(uint64_t ***)a1;
  }
  if ((uint64_t **)(a1 + 16) != v4 && v4 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

unsigned int *WTF::Vector<WTF::WeakPtr<WebCore::MutationObserverRegistration,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MutationObserverRegistration&>(unsigned int *result, _QWORD *a2)
{
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  WTF *v10;
  unsigned int **v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;

  v3 = result;
  v4 = result[2];
  v5 = result[3];
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  v9 = *(WTF **)result;
  if (v8 > v4)
  {
    if (v8 < 2)
    {
      v10 = (WTF *)(result + 4);
      *(_QWORD *)result = result + 4;
      result[2] = 1;
      if (!(_DWORD)v5)
      {
LABEL_20:
        if (v3 + 4 != (unsigned int *)v9 && v9)
        {
          if (v10 == v9)
          {
            *(_QWORD *)v3 = 0;
            v3[2] = 0;
          }
          WTF::fastFree(v9, a2);
          v9 = *(WTF **)v3;
        }
        else
        {
          v9 = v10;
        }
        goto LABEL_23;
      }
    }
    else
    {
      if (v8 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v10 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
      v3[2] = v8;
      *(_QWORD *)v3 = v10;
      if (!(_DWORD)v5)
        goto LABEL_20;
    }
    v11 = (unsigned int **)((char *)v9 + 8 * v5);
    v12 = (unsigned int **)v9;
    do
    {
      v13 = *v12;
      *v12 = 0;
      *(_QWORD *)v10 = v13;
      v14 = *v12;
      *v12 = 0;
      if (v14)
      {
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
        {
          atomic_store(1u, v14);
          WTF::fastFree((WTF *)v14, a2);
        }
      }
      v10 = (WTF *)((char *)v10 + 8);
      ++v12;
    }
    while (v12 != v11);
    v10 = *(WTF **)v3;
    goto LABEL_20;
  }
LABEL_23:
  v17 = v3[3];
  result = WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2, (uint64_t)a2);
  v18 = (unsigned int *)*a2;
  if (*a2)
  {
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
  }
  *((_QWORD *)v9 + v17) = v18;
  ++v3[3];
  return result;
}

uint64_t *WTF::Vector<WTF::HashSet<WebCore::GCReachableRef<WebCore::Node,void>,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::HashSet<WebCore::GCReachableRef<WebCore::Node,void>,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTableTraits>>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t *)WTF::Vector<WTF::HashSet<WebCore::GCReachableRef<WebCore::Node,void>,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = 0;
  v6 = *result;
  *result = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WTF::HashSet<WebCore::GCReachableRef<WebCore::Node,void>,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<WTF::HashSet<WebCore::GCReachableRef<WebCore::Node,void>,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WTF::HashSet<WebCore::GCReachableRef<WebCore::Node,void>,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::HashSet<WebCore::GCReachableRef<WebCore::Node,void>,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= (unint64_t)a2)
    v5 = (unint64_t)a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return result;
  v6 = result;
  v7 = *(WTF **)result;
  v8 = *(unsigned int *)(result + 12);
  if (v5 >= 2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    result = WTF::fastMalloc((WTF *)(8 * v5));
    v9 = (_QWORD *)result;
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = result;
    if (!(_DWORD)v8)
      goto LABEL_17;
    goto LABEL_13;
  }
  v9 = (_QWORD *)(result + 16);
  *(_QWORD *)result = result + 16;
  *(_DWORD *)(result + 8) = 1;
  if ((_DWORD)v8)
  {
LABEL_13:
    v10 = 8 * v8;
    v11 = (uint64_t *)v7;
    do
    {
      *v9 = 0;
      v12 = *v11;
      *v11 = 0;
      *v9 = v12;
      result = *v11;
      if (*v11)
        result = WTF::HashTable<WebCore::GCReachableRef<WebCore::Node,void>,WebCore::GCReachableRef<WebCore::Node,void>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>>::deallocateTable((uint64_t *)result, a2);
      ++v9;
      ++v11;
      v10 -= 8;
    }
    while (v10);
  }
LABEL_17:
  if ((WTF *)(v6 + 16) != v7 && v7)
  {
    if (*(WTF **)v6 == v7)
    {
      *(_QWORD *)v6 = 0;
      *(_DWORD *)(v6 + 8) = 0;
    }
    return WTF::fastFree(v7, a2);
  }
  return result;
}

uint64_t *WTF::Mapper<WTF::Vector<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::HashSet<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTableTraits>>(WTF::HashSet<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTableTraits> const&)::{lambda(WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>&&)#1},WTF::Vector<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTableTraits> const&,void>::map(uint64_t *result, _QWORD **a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  _DWORD *v11;

  v2 = result;
  v3 = (uint64_t)*a2;
  if (*a2)
  {
    v4 = *(unsigned int *)(v3 - 12);
    if (!(_DWORD)v4)
    {
      result = WTF::HashTable<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::begin(*a2);
LABEL_5:
      v8 = (uint64_t *)(v3 + 8 * *(unsigned int *)(v3 - 4));
      goto LABEL_6;
    }
    if (v4 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v6 = WTF::fastMalloc((WTF *)(8 * v4));
    *((_DWORD *)v2 + 2) = v4;
    *v2 = v6;
    v3 = (uint64_t)*a2;
    result = WTF::HashTable<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::begin(*a2);
    if (v3)
      goto LABEL_5;
  }
  else
  {
    result = WTF::HashTable<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::begin(0);
  }
  v8 = 0;
LABEL_6:
  if (v8 != result)
  {
    v9 = *v2;
    v10 = *((_DWORD *)v2 + 3);
    do
    {
      v11 = (_DWORD *)*result;
      if (*result)
        ++*v11;
      *(_QWORD *)(v9 + 8 * v10) = v11;
      while (++result != v7)
      {
        if ((unint64_t)(*result + 1) > 1)
          goto LABEL_15;
      }
      result = v7;
LABEL_15:
      ++v10;
    }
    while (result != v8);
    *((_DWORD *)v2 + 3) = v10;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::begin(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (!result)
    return 0;
  v1 = *((unsigned int *)result - 1);
  v2 = &result[v1];
  if (!*((_DWORD *)result - 3))
    return &result[v1];
  if ((_DWORD)v1)
  {
    v3 = 8 * v1;
    while ((unint64_t)(*result + 1) <= 1)
    {
      ++result;
      v3 -= 8;
      if (!v3)
        return v2;
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebCore::MutationObserver **v4;
  uint64_t v5;
  WebCore::MutationObserver *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WebCore::MutationObserver ***)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
        WTF::RefCounted<WebCore::MutationObserver>::deref(v6, a2);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t *WTF::HashTable<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::add(uint64_t *result, uint64_t *a2, _DWORD **a3)
{
  uint64_t *v5;
  uint64_t v6;
  char v7;
  int v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3;
  v10 = (unint64_t)*a3 + ~((_QWORD)*a3 << 32);
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if ((_DWORD *)v15 == v9)
      {
        if ((v7 & 1) != 0)
          v20 = 0;
        else
          v20 = *(unsigned int *)(v6 - 4);
        v25 = 0;
        v26 = v6 + 8 * v20;
        goto LABEL_31;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*a2 - 16);
      v9 = *a3;
      v14 = v16;
    }
  }
  if (v9)
    ++*v9;
  *v14 = (uint64_t)v9;
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_24:
      result = WTF::HashTable<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::expand(a2, v14);
      v14 = result;
      v21 = *a2;
      if (*a2)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_24;
  }
  v26 = v21 + 8 * v24;
  v25 = 1;
LABEL_31:
  *v5 = (uint64_t)v14;
  v5[1] = v26;
  *((_BYTE *)v5 + 16) = v25;
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::deallocateTable(WebCore::MutationObserver **a1, void *a2)
{
  uint64_t v3;
  WebCore::MutationObserver **v4;
  WebCore::MutationObserver *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WebCore::MutationObserver *)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 1)
          {
            WebCore::MutationObserver::~MutationObserver(v5, a2);
            bmalloc::api::isoDeallocate(v6, v7);
          }
          else
          {
            --*(_DWORD *)v5;
          }
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

_QWORD *WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::begin(_QWORD *result)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[2 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[2 * v2];
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v4 -= 16;
      if (!v4)
        return v3;
    }
  }
  return result;
}

BOOL WebCore::NodeListsNodeData::deleteThisAndUpdateNodeRareDataIfAboutToRemoveLastList(WebCore::NodeListsNodeData *this, WebCore::Node *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  WebCore::NodeListsNodeData *v11;
  WTF *v12;
  void *v13;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    LODWORD(v2) = *(_QWORD *)(v2 + 8) != 0;
  v3 = *((_QWORD *)this + 1);
  if (v3)
    LODWORD(v3) = *(_QWORD *)(v3 + 8) != 0;
  v4 = v3 + v2;
  v5 = *((_QWORD *)this + 2);
  if (v5)
    LODWORD(v5) = *(_DWORD *)(v5 - 12);
  v6 = v4 + v5;
  v7 = *((_QWORD *)this + 3);
  if (v7)
    LODWORD(v7) = *(_DWORD *)(v7 - 12);
  v8 = v6 + v7;
  v9 = *((_QWORD *)this + 4);
  if (v9)
    LODWORD(v9) = *(_DWORD *)(v9 - 12);
  v10 = v8 + v9;
  if (v8 + (_DWORD)v9 == 1)
  {
    v11 = *(WebCore::NodeListsNodeData **)((unint64_t)a2 & 0xFFFFFFFFFFFFLL);
    *(_QWORD *)((unint64_t)a2 & 0xFFFFFFFFFFFFLL) = 0;
    if (v11)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v11, a2);
      WTF::fastFree(v12, v13);
    }
  }
  return v10 == 1;
}

uint64_t WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*a1)
  {
    v2 = *a1 + 24 * *(unsigned int *)(*a1 - 4);
    if ((WTF::StringImpl *)v2 != a2)
      goto LABEL_4;
    return 0;
  }
  if (!a2)
    return 0;
  v2 = 0;
LABEL_4:
  if ((WTF::StringImpl *)v2 != a2)
    WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::remove(a1, a2);
  return 1;
}

WTF::StringImpl *WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = WTF::hashTraitsDeleteBucket<WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,std::pair<unsigned char,WTF::AtomString>>((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WTF::StringImpl *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

WTF::StringImpl *WTF::hashTraitsDeleteBucket<WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,std::pair<unsigned char,WTF::AtomString>>(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *(_BYTE *)a1 = -1;
  return result;
}

unsigned __int8 *WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash>,std::pair<unsigned char,WTF::AtomString>>(uint64_t *a1, unsigned __int8 *a2)
{
  unsigned __int8 *result;
  uint64_t v4;

  if (!*a1)
    return 0;
  result = WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash>,std::pair<unsigned char,WTF::AtomString>>(a1, a2);
  v4 = *a1;
  if (!result)
  {
    if (v4)
      return (unsigned __int8 *)(v4 + 24 * *(unsigned int *)(v4 - 4));
    else
      return 0;
  }
  return result;
}

unsigned __int8 *WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash>,std::pair<unsigned char,WTF::AtomString>>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  int v11;
  unsigned __int8 *result;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *((_QWORD *)a2 + 1);
  v5 = *a2;
  v6 = (v5 + (*(_DWORD *)(v4 + 16) >> 8)) & v3;
  v7 = (unsigned __int8 *)(v2 + 24 * v6);
  v8 = *v7;
  v9 = *((_QWORD *)v7 + 1);
  if (!*v7 && v9 == 0)
    return 0;
  v11 = 1;
  do
  {
    if (v8 != 255 && v8 == v5)
    {
      result = v7;
      if (v9 == v4)
        break;
    }
    result = 0;
    v6 = (v6 + v11) & v3;
    v7 = (unsigned __int8 *)(v2 + 24 * v6);
    v8 = *v7;
    v9 = *((_QWORD *)v7 + 1);
    ++v11;
  }
  while (*v7 || v9 != 0);
  return result;
}

uint64_t WebCore::CollectionIndexCache<WebCore::NameNodeList,WebCore::ElementDescendantIterator<WebCore::Element>>::nodeCount(uint64_t a1, WebCore::LiveNodeList *a2)
{
  uint64_t result;

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    return *(unsigned int *)(a1 + 20);
  if ((*(_BYTE *)(a1 + 40) & 2) == 0 && !*(_QWORD *)(a1 + 8))
    WebCore::CachedLiveNodeList<WebCore::NameNodeList>::willValidateIndexCache(a2);
  result = WebCore::CollectionIndexCache<WebCore::NameNodeList,WebCore::ElementDescendantIterator<WebCore::Element>>::computeNodeCountUpdatingListCache(a1, (uint64_t)a2);
  *(_DWORD *)(a1 + 20) = result;
  *(_BYTE *)(a1 + 40) |= 1u;
  return result;
}

uint64_t *WebCore::CachedLiveNodeList<WebCore::NameNodeList>::willValidateIndexCache(WebCore::LiveNodeList *a1)
{
  WebCore::Document *v2;
  WebCore::Document *v4;

  v2 = *(WebCore::Document **)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 40) + 8);
  *((_DWORD *)v2 + 6) += 2;
  v4 = v2;
  WebCore::Document::registerNodeListForInvalidation(v2, a1);
  return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v4);
}

uint64_t WebCore::CollectionIndexCache<WebCore::NameNodeList,WebCore::ElementDescendantIterator<WebCore::Element>>::computeNodeCountUpdatingListCache(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;

  v14 = WebCore::CachedLiveNodeList<WebCore::NameNodeList>::collectionBegin(a2);
  v15 = v4;
  if (!v4)
    return 0;
  v6 = *(_DWORD *)(a1 + 32);
  do
  {
    v7 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v7 == *(_DWORD *)(a1 + 32))
    {
      WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>(a1 + 24, v4);
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 24);
      v9 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v4);
      if (v9)
      {
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
      }
      *(_QWORD *)(v8 + 8 * v7) = v9;
      ++*(_DWORD *)(a1 + 36);
    }
    WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::NameNodeList>(*(_QWORD *)(a2 + 88), *(_BYTE *)(a2 + 96), &v14, 1u, &v13);
    v4 = v15;
  }
  while (v15);
  v11 = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(a1 + 40) |= 2u;
  v12 = v11 - v6;
  if (v12)
    WebCore::reportExtraMemoryAllocatedForCollectionIndexCache((WebCore *)(8 * v12));
  return *(unsigned int *)(a1 + 36);
}

uint64_t WebCore::CachedLiveNodeList<WebCore::NameNodeList>::collectionBegin(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v4;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1)
    && (v4 = *(_QWORD *)(a1 + 24), (*(_BYTE *)(v4 + 22) & 0x18) != 0))
  {
    v2 = *(uint64_t **)(v4 + 40);
  }
  else
  {
    v2 = (uint64_t *)(a1 + 24);
  }
  return WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::begin<WebCore::NameNodeList>(*(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 96), *v2);
}

uint64_t WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::begin<WebCore::NameNodeList>(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  __int16 v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a3 + 80);
  if (v3)
  {
    while (1)
    {
      v5 = *(_WORD *)(v3 + 28);
      if ((v5 & 8) != 0)
        break;
      v3 = *(_QWORD *)(v3 + 56);
      if (!v3)
        return a3;
    }
LABEL_6:
    while (1)
    {
      if ((v5 & 0x10) != 0 || a2)
      {
        v6 = *(_QWORD *)(v3 + 104);
        if (v6)
        {
          v7 = *(unsigned int *)(v6 + 4);
          v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
          if ((v7 & 2) != 0)
          {
            if ((v7 & 1) != 0)
            {
              v13 = *(uint64_t **)(v6 + 40);
              v14 = *(unsigned int *)(v6 + 52);
            }
            else
            {
              v13 = (uint64_t *)(v6 + 32);
              v14 = v7 >> 5;
            }
            if (v14)
            {
              while (1)
              {
                v15 = *v13;
                if (*v13 == WebCore::HTMLNames::nameAttr
                  || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
                  && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
                {
                  break;
                }
                v13 += 2;
                if (!--v14)
                  goto LABEL_40;
              }
            }
            else
            {
LABEL_40:
              v13 = 0;
            }
            v8 = v13 + 1;
          }
        }
        else
        {
          v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
        }
        if (*v8 == a1)
          break;
      }
      v9 = *(_QWORD *)(v3 + 80);
      if (!v9)
      {
        if (v3 == a3)
          return a3;
        while (1)
        {
          v9 = *(_QWORD *)(v3 + 56);
          if (v9)
            break;
          v3 = *(_QWORD *)(v3 + 32);
          if (v3)
            v12 = v3 == a3;
          else
            v12 = 1;
          if (v12)
            return a3;
        }
      }
      v5 = *(_WORD *)(v9 + 28);
      v3 = v9;
      if ((v5 & 8) == 0)
      {
        while (v9 != a3)
        {
          if (!*(_QWORD *)(v9 + 56))
          {
            v10 = v9;
            while (1)
            {
              v10 = *(_QWORD *)(v10 + 32);
              if (!v10 || v10 == a3)
                return a3;
              v9 = *(_QWORD *)(v10 + 56);
              if (v9)
                goto LABEL_21;
            }
          }
          v9 = *(_QWORD *)(v9 + 56);
LABEL_21:
          v5 = *(_WORD *)(v9 + 28);
          if ((v5 & 8) != 0)
          {
            v3 = v9;
            goto LABEL_6;
          }
        }
        return a3;
      }
    }
  }
  return a3;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v8 = *(unsigned int *)(a1 + 12);
  v9 = *(_QWORD *)a1;
  v10 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *(_QWORD *)(v9 + 8 * v8) = v10;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::NameNodeList>(uint64_t result, char a2, _QWORD *a3, unsigned int a4, _DWORD *a5)
{
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _QWORD *v12;
  __int16 v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;

  *a5 = 0;
  if (a4)
  {
    v5 = 0;
    v6 = (_QWORD *)*a3;
    v7 = (_QWORD *)a3[1];
    v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_3:
    v9 = WebCore::HTMLNames::nameAttr;
    while (2)
    {
      v10 = v7[10];
      if (v10)
        goto LABEL_23;
      if (v7 == v6)
      {
LABEL_45:
        a3[1] = 0;
      }
      else
      {
        while (1)
        {
          v10 = v7[7];
          if (v10)
            break;
          v7 = (_QWORD *)v7[4];
          if (v7)
            v11 = v7 == v6;
          else
            v11 = 1;
          if (v11)
            goto LABEL_45;
        }
LABEL_23:
        while (1)
        {
          v14 = *(_WORD *)(v10 + 28);
          if ((v14 & 8) != 0)
            break;
          if ((_QWORD *)v10 == v6)
            goto LABEL_45;
          if (!*(_QWORD *)(v10 + 56))
          {
            v12 = (_QWORD *)v10;
            while (1)
            {
              v12 = (_QWORD *)v12[4];
              if (!v12 || v12 == v6)
                goto LABEL_45;
              v10 = v12[7];
              if (v10)
                goto LABEL_23;
            }
          }
          v10 = *(_QWORD *)(v10 + 56);
        }
        v7 = (_QWORD *)v10;
        a3[1] = v10;
        if ((v14 & 0x10) == 0 && !a2)
          continue;
        v15 = *(_QWORD *)(v10 + 104);
        if (v15)
        {
          v16 = *(unsigned int *)(v15 + 4);
          v17 = v8;
          if ((v16 & 2) != 0)
          {
            if ((v16 & 1) != 0)
            {
              v18 = *(uint64_t **)(v15 + 40);
              v19 = *(unsigned int *)(v15 + 52);
            }
            else
            {
              v18 = (uint64_t *)(v15 + 32);
              v19 = v16 >> 5;
            }
            if (v19)
            {
              while (1)
              {
                v20 = *v18;
                if (*v18 == v9
                  || *(_QWORD *)(v20 + 24) == *(_QWORD *)(v9 + 24) && *(_QWORD *)(v20 + 32) == *(_QWORD *)(v9 + 32))
                {
                  break;
                }
                v18 += 2;
                if (!--v19)
                  goto LABEL_41;
              }
            }
            else
            {
LABEL_41:
              v18 = 0;
            }
            v17 = v18 + 1;
          }
        }
        else
        {
          v17 = v8;
        }
        if (*v17 != result)
          continue;
        *a5 = ++v5;
        if (v5 < a4)
          goto LABEL_3;
      }
      break;
    }
  }
  return result;
}

uint64_t WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::NameNodeList>(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a3 + 88);
  if (v3)
  {
    if ((*(_WORD *)(v3 + 28) & 4) != 0)
    {
      do
      {
        v4 = *(_QWORD *)(v3 + 88);
        if (!v4)
          break;
        v3 = *(_QWORD *)(v3 + 88);
      }
      while ((*(_WORD *)(v4 + 28) & 4) != 0);
    }
    while (1)
    {
      v6 = *(_WORD *)(v3 + 28);
      if ((v6 & 8) != 0)
        break;
      if ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
          do
          {
            v5 = *(_QWORD *)(v3 + 88);
            if (!v5)
              break;
            v3 = *(_QWORD *)(v3 + 88);
          }
          while ((*(_WORD *)(v5 + 28) & 4) != 0);
        }
        else
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
        }
      }
      else
      {
        v3 = *(_QWORD *)(v3 + 32);
        if (v3 == a3)
          return a3;
      }
      if (!v3)
        return a3;
    }
    while (1)
    {
      if ((v6 & 0x10) != 0 || a2)
      {
        v8 = *(_QWORD *)(v3 + 104);
        if (v8)
        {
          v9 = *(unsigned int *)(v8 + 4);
          v10 = (_QWORD *)MEMORY[0x1E0CBF2F8];
          if ((v9 & 2) != 0)
          {
            if ((v9 & 1) != 0)
            {
              v14 = *(uint64_t **)(v8 + 40);
              v15 = *(unsigned int *)(v8 + 52);
            }
            else
            {
              v14 = (uint64_t *)(v8 + 32);
              v15 = v9 >> 5;
            }
            if (v15)
            {
              while (1)
              {
                v16 = *v14;
                if (*v14 == WebCore::HTMLNames::nameAttr
                  || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
                  && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
                {
                  break;
                }
                v14 += 2;
                if (!--v15)
                  goto LABEL_56;
              }
            }
            else
            {
LABEL_56:
              v14 = 0;
            }
            v10 = v14 + 1;
          }
        }
        else
        {
          v10 = (_QWORD *)MEMORY[0x1E0CBF2F8];
        }
        if (*v10 == a1)
          break;
      }
      if ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) == 0)
      {
        v3 = *(_QWORD *)(v3 + 32);
        if (v3 != a3 && v3 != 0)
          goto LABEL_28;
        return a3;
      }
      if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
      {
        v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
        do
        {
          v13 = *(_QWORD *)(v3 + 88);
          if (!v13)
            break;
          v3 = *(_QWORD *)(v3 + 88);
        }
        while ((*(_WORD *)(v13 + 28) & 4) != 0);
      }
      else
      {
        v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
      }
LABEL_28:
      while (1)
      {
        v6 = *(_WORD *)(v3 + 28);
        if ((v6 & 8) != 0)
          break;
        if ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
          {
            v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
            do
            {
              v12 = *(_QWORD *)(v3 + 88);
              if (!v12)
                break;
              v3 = *(_QWORD *)(v3 + 88);
            }
            while ((*(_WORD *)(v12 + 28) & 4) != 0);
          }
          else
          {
            v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
          }
        }
        else
        {
          v3 = *(_QWORD *)(v3 + 32);
          if (v3 == a3)
            return a3;
        }
        if (!v3)
          return a3;
      }
    }
  }
  return a3;
}

uint64_t WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseBackward<WebCore::NameNodeList>(uint64_t result, char a2, uint64_t *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;

  if (a4)
  {
    v4 = *a3;
    v5 = a3[1];
    v6 = WebCore::HTMLNames::nameAttr;
    v7 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    while ((*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_WORD *)((*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
      {
        v5 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL;
        do
        {
          v11 = *(_QWORD *)(v5 + 88);
          if (!v11)
            break;
          v5 = *(_QWORD *)(v5 + 88);
        }
        while ((*(_WORD *)(v11 + 28) & 4) != 0);
      }
      else
      {
        v5 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL;
      }
LABEL_8:
      while (1)
      {
        v9 = *(_WORD *)(v5 + 28);
        if ((v9 & 8) != 0)
          break;
        if ((*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_WORD *)((*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
          {
            v5 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL;
            do
            {
              v10 = *(_QWORD *)(v5 + 88);
              if (!v10)
                break;
              v5 = *(_QWORD *)(v5 + 88);
            }
            while ((*(_WORD *)(v10 + 28) & 4) != 0);
          }
          else
          {
            v5 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL;
          }
        }
        else
        {
          v5 = *(_QWORD *)(v5 + 32);
          if (v5 == v4)
            goto LABEL_45;
        }
        if (!v5)
          goto LABEL_45;
      }
      a3[1] = v5;
      if ((v9 & 0x10) != 0 || a2)
      {
        v12 = *(_QWORD *)(v5 + 104);
        if (v12)
        {
          v13 = *(unsigned int *)(v12 + 4);
          v14 = v7;
          if ((v13 & 2) != 0)
          {
            if ((v13 & 1) != 0)
            {
              v15 = *(uint64_t **)(v12 + 40);
              v16 = *(unsigned int *)(v12 + 52);
            }
            else
            {
              v15 = (uint64_t *)(v12 + 32);
              v16 = v13 >> 5;
            }
            if (v16)
            {
              while (1)
              {
                v17 = *v15;
                if (*v15 == v6
                  || *(_QWORD *)(v17 + 24) == *(_QWORD *)(v6 + 24) && *(_QWORD *)(v17 + 32) == *(_QWORD *)(v6 + 32))
                {
                  break;
                }
                v15 += 2;
                if (!--v16)
                  goto LABEL_43;
              }
            }
            else
            {
LABEL_43:
              v15 = 0;
            }
            v14 = v15 + 1;
          }
        }
        else
        {
          v14 = v7;
        }
        if (*v14 == result && !--a4)
          return result;
      }
    }
    v5 = *(_QWORD *)(v5 + 32);
    if (v5 != v4 && v5 != 0)
      goto LABEL_8;
LABEL_45:
    a3[1] = 0;
  }
  return result;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t result, void *a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = (int)a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 12);
  if ((void *)v4 != a2)
  {
    v5 = *(_QWORD *)result + 8 * v4;
    v6 = (uint64_t *)(*(_QWORD *)result + 8 * (_QWORD)a2);
    do
    {
      result = *v6;
      *v6 = 0;
      if (result)
      {
        do
        {
          v7 = __ldaxr((unsigned int *)result);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, (unsigned int *)result));
        if (!v8)
        {
          atomic_store(1u, (unsigned int *)result);
          v9 = *(unsigned int *)(result + 28);
          if ((_DWORD)v9)
          {
            v12 = result;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v9));
            result = v12;
          }
          v10 = *(WTF **)(result + 16);
          if (v10)
          {
            *(_QWORD *)(result + 16) = 0;
            *(_DWORD *)(result + 24) = 0;
            v11 = result;
            WTF::fastFree(v10, a2);
            result = v11;
          }
          result = WTF::fastFree((WTF *)result, a2);
        }
      }
      ++v6;
    }
    while (v6 != (uint64_t *)v5);
  }
  *(_DWORD *)(v3 + 12) = v2;
  return result;
}

uint64_t WebCore::NativeNodeFilter::NativeNodeFilter(uint64_t a1, WebCore::ScriptExecutionContext *a2, uint64_t *a3)
{
  uint64_t v5;

  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)a1 = &off_1E33A18C0;
  *(_QWORD *)(a1 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)a1, a2);
  *(_QWORD *)a1 = &off_1E33A6230;
  v5 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 24) = v5;
  return a1;
}

{
  uint64_t v5;

  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)a1 = &off_1E33A18C0;
  *(_QWORD *)(a1 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)a1, a2);
  *(_QWORD *)a1 = &off_1E33A6230;
  v5 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 24) = v5;
  return a1;
}

uint64_t WebCore::NativeNodeFilter::hasCallback(WebCore::NativeNodeFilter *this)
{
  return 1;
}

uint64_t WebCore::NativeNodeFilter::acceptNode@<X0>(WebCore::NativeNodeFilter *this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v4;
  uint64_t result;

  v4 = (_DWORD *)*((_QWORD *)this + 3);
  ++v4[2];
  result = (*(uint64_t (**)(_DWORD *, WebCore::Node *))(*(_QWORD *)v4 + 16))(v4, a2);
  *(_WORD *)a3 = result;
  *(_DWORD *)(a3 + 4) = 0;
  if (v4[2] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  --v4[2];
  return result;
}

WebCore::Node *WebCore::commonInclusiveAncestor<(WebCore::TreeType)2>(uint64_t a1, uint64_t a2)
{
  WebCore::Node *v2;
  WebCore::Node *v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;

  v2 = (WebCore::Node *)a1;
  if (a1 == a2)
    return v2;
  v6 = WebCore::depth<(WebCore::TreeType)2>(a1);
  v7 = WebCore::depth<(WebCore::TreeType)2>(a2);
  v8 = v7 - v6;
  v9 = v6 >= v7;
  v10 = v6 - v7;
  if (v6 >= v7)
    v3 = v2;
  else
    v3 = (WebCore::Node *)a2;
  if (v9)
    v2 = (WebCore::Node *)a2;
  v11 = v9 ? v10 : v8;
  for (; v11; --v11)
    v3 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v3);
  if (v3 == v2)
    return v2;
  do
  {
    v3 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v3);
    v2 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v2);
  }
  while (v3 != v2);
  return v3;
}

uint64_t WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  WebCore::Node *v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  WebCore::Node *v14;

  v3 = (WebCore::Node *)result;
  if (result == a2)
  {
    a3[1] = 0;
    a3[2] = 0;
    *a3 = result;
  }
  else
  {
    v6 = WebCore::depth<(WebCore::TreeType)2>(result);
    v7 = WebCore::depth<(WebCore::TreeType)2>(a2);
    if (v6 >= v7)
      result = (uint64_t)v3;
    else
      result = a2;
    if (v6 < v7)
    {
      v8 = v7 - v6;
    }
    else
    {
      v3 = (WebCore::Node *)a2;
      v8 = v6 - v7;
    }
    if (v8)
    {
      v9 = (WebCore::Node *)result;
      do
      {
        result = WebCore::Node::parentInComposedTree(v9);
        v10 = v9;
        v9 = (WebCore::Node *)result;
        --v8;
      }
      while (v8);
    }
    else
    {
      v10 = 0;
    }
    if ((WebCore::Node *)result == v3)
    {
      v12 = 0;
    }
    else
    {
      v11 = v3;
      v3 = (WebCore::Node *)result;
      do
      {
        v10 = v3;
        v12 = v11;
        v3 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v3);
        result = WebCore::Node::parentInComposedTree(v12);
        v11 = (WebCore::Node *)result;
      }
      while (v3 != (WebCore::Node *)result);
    }
    if (v6 >= v7)
      v13 = v10;
    else
      v13 = v12;
    if (v6 >= v7)
      v14 = v12;
    else
      v14 = v10;
    *a3 = v3;
    a3[1] = v13;
    a3[2] = v14;
  }
  return result;
}

uint64_t WebCore::commonInclusiveAncestor<(WebCore::TreeType)1>(uint64_t a1, uint64_t a2)
{
  _QWORD v3[3];

  WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)1>(v3, a1, a2);
  return v3[0];
}

_QWORD *WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)1>(_QWORD *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;

  if (a2 == a3)
  {
    result[1] = 0;
    result[2] = 0;
    *result = a2;
  }
  else
  {
    v3 = 0;
    v4 = a2;
    while (1)
    {
      if ((*(_WORD *)(v4 + 28) & 0x80) == 0)
      {
        v5 = (uint64_t *)(v4 + 32);
        goto LABEL_5;
      }
      v6 = *(_QWORD *)(v4 + 200);
      if (!v6)
        break;
      v5 = (uint64_t *)(v6 + 8);
LABEL_5:
      v4 = *v5;
      if (!v4)
        break;
      ++v3;
    }
    v7 = 0;
    v8 = a3;
    while (1)
    {
      if ((*(_WORD *)(v8 + 28) & 0x80) == 0)
      {
        v9 = (uint64_t *)(v8 + 32);
        goto LABEL_12;
      }
      v10 = *(_QWORD *)(v8 + 200);
      if (!v10)
        break;
      v9 = (uint64_t *)(v10 + 8);
LABEL_12:
      v8 = *v9;
      if (!v8)
        break;
      ++v7;
    }
    v11 = v3 - v7;
    if (v3 >= v7)
      v12 = a2;
    else
      v12 = a3;
    if (v3 >= v7)
      v13 = a3;
    else
      v13 = a2;
    if (v3 < v7)
      v11 = v7 - v3;
    if (v11)
    {
      v14 = v12;
      while (1)
      {
        if ((*(_WORD *)(v14 + 28) & 0x80) != 0)
        {
          v17 = *(_QWORD *)(v14 + 200);
          if (!v17)
          {
            v12 = 0;
            goto LABEL_29;
          }
          v15 = (uint64_t *)(v17 + 8);
        }
        else
        {
          v15 = (uint64_t *)(v14 + 32);
        }
        v12 = *v15;
LABEL_29:
        v16 = v14;
        v14 = v12;
        if (!--v11)
          goto LABEL_36;
      }
    }
    v16 = 0;
LABEL_36:
    if (v12 != v13)
    {
      v18 = v13;
      v13 = v12;
      while (1)
      {
        v16 = v13;
        v19 = v18;
        if ((*(_WORD *)(v13 + 28) & 0x80) == 0)
          break;
        v13 = *(_QWORD *)(v13 + 200);
        if (v13)
        {
          v20 = (uint64_t *)(v13 + 8);
          goto LABEL_40;
        }
LABEL_41:
        if ((*(_WORD *)(v18 + 28) & 0x80) != 0)
        {
          v18 = *(_QWORD *)(v18 + 200);
          if (!v18)
            goto LABEL_44;
          v21 = (uint64_t *)(v18 + 8);
        }
        else
        {
          v21 = (uint64_t *)(v18 + 32);
        }
        v18 = *v21;
LABEL_44:
        if (v13 == v18)
          goto LABEL_51;
      }
      v20 = (uint64_t *)(v13 + 32);
LABEL_40:
      v13 = *v20;
      goto LABEL_41;
    }
    v19 = 0;
LABEL_51:
    v22 = v3 >= v7;
    if (v3 >= v7)
      v23 = v16;
    else
      v23 = v19;
    if (v22)
      v24 = v19;
    else
      v24 = v16;
    *result = v13;
    result[1] = v23;
    result[2] = v24;
  }
  return result;
}

uint64_t WebCore::treeOrder<(WebCore::TreeType)0>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v22;
  unsigned int v23;

  if (a1 == a2)
    return 0;
  v2 = 0;
  v3 = a1;
  do
  {
    v3 = *(_QWORD *)(v3 + 32);
    ++v2;
  }
  while (v3);
  v4 = 0;
  v5 = v2 - 1;
  v6 = a2;
  do
  {
    v6 = *(_QWORD *)(v6 + 32);
    ++v4;
  }
  while (v6);
  v7 = v4 - 1;
  v8 = v4 - v2;
  v9 = v2 - v4;
  if (v5 >= v7)
    v10 = a1;
  else
    v10 = a2;
  if (v5 >= v7)
    v11 = a2;
  else
    v11 = a1;
  if (v5 >= v7)
    v8 = v9;
  if (v8)
  {
    v22 = v10;
    do
    {
      v10 = *(_QWORD *)(v22 + 32);
      v12 = v22;
      v22 = v10;
      --v8;
    }
    while (v8);
  }
  else
  {
    v12 = 0;
  }
  if (v10 == v11)
  {
    v14 = 0;
  }
  else
  {
    v13 = v11;
    v11 = v10;
    do
    {
      v12 = v11;
      v14 = v13;
      v11 = *(_QWORD *)(v11 + 32);
      v13 = *(_QWORD *)(v13 + 32);
    }
    while (v11 != v13);
  }
  v15 = v5 >= v7;
  if (v5 < v7)
    v16 = v14;
  else
    v16 = v12;
  if (v15)
    v17 = v14;
  else
    v17 = v12;
  if (!v11)
    return 129;
  if (!v16)
    return 255;
  if (!v17)
    return 1;
  v18 = *(unsigned __int16 *)(v16 + 28);
  v19 = *(unsigned __int16 *)(v17 + 28);
  if (((v18 | v19) & 0x80) == 0)
  {
    if (v16 == v17)
      return 255;
    do
      v16 = *(_QWORD *)(v16 + 56);
    while (v16 != v17 && v16 != 0);
    if (v16)
      return 255;
    return 1;
  }
  if ((v18 & 0x80) != 0)
    v23 = -127;
  else
    v23 = 1;
  if ((v19 & 0x80) != 0)
    return v23;
  else
    return 0xFFFFFFFFLL;
}

uint64_t WebCore::treeOrder<(WebCore::TreeType)1>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 == a2)
    return 0;
  v13 = v2;
  v14 = v3;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)1>(&v10, a1, a2);
  if (!v10)
    return 129;
  v4 = v11;
  if (!v11)
    return 255;
  if (!v12)
    return 1;
  v5 = *(unsigned __int16 *)(v11 + 28);
  v6 = *(unsigned __int16 *)(v12 + 28);
  if (((v5 | v6) & 0x80) == 0)
  {
    if (v11 == v12)
      return 255;
    do
      v4 = *(_QWORD *)(v4 + 56);
    while (v4 != v12 && v4 != 0);
    if (v4)
      return 255;
    return 1;
  }
  if ((v5 & 0x80) != 0)
    v7 = -127;
  else
    v7 = 1;
  if ((v6 & 0x80) != 0)
    return v7;
  else
    return 0xFFFFFFFFLL;
}

{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  _BOOL4 v9;
  _BOOL4 v10;
  uint64_t v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  char *v15;
  _BOOL4 v17;
  _BOOL4 v18;
  WebCore::Node *v19[2];
  char v20;
  WebCore::Node *v21[2];
  char v22;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)a2;
  if (!*(_QWORD *)a1)
  {
LABEL_27:
    if (!v4)
    {
      v15 = &std::partial_ordering::equivalent;
      return *v15;
    }
LABEL_28:
    v15 = &std::partial_ordering::unordered;
    return *v15;
  }
  if (!v4)
    goto LABEL_28;
  v5 = *(_BYTE *)(a1 + 12) & 7;
  if (v5 > 4)
  {
    v7 = 0;
  }
  else
  {
    v6 = 1 << v5;
    v7 = *(_QWORD *)a1;
    if ((v6 & 0x19) == 0)
      v7 = *(_QWORD *)(v3 + 32);
  }
  v8 = *(_BYTE *)(a2 + 12) & 7;
  if (v8 > 4)
  {
    v9 = 0;
    v10 = v7 != 0;
LABEL_33:
    v17 = v10;
    v18 = v9;
    if (!WebCore::commonInclusiveAncestor<(WebCore::TreeType)1>(v3, v4))
      return 129;
    if (!v17 && !v18 && ((*(_BYTE *)(a2 + 12) ^ *(_BYTE *)(a1 + 12)) & 7) == 0)
      return 0;
    if (v18)
    {
      if ((*(_BYTE *)(a1 + 12) & 7) == 1)
        return 0xFFFFFFFFLL;
      else
        return 1;
    }
    else if ((*(_BYTE *)(a2 + 12) & 7) == 1)
    {
      return 1;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  v9 = 1;
  if (((1 << v8) & 0x19) == 0)
    v9 = *(_QWORD *)(v4 + 32) != 0;
  v10 = v7 != 0;
  if (!v7 || !v9)
    goto LABEL_33;
  WebCore::makeBoundaryPoint((uint64_t *)a1, (uint64_t)v21);
  if (!v22 || (WebCore::makeBoundaryPoint((uint64_t *)a2, (uint64_t)v19), !v20))
  {
    __break(1u);
    goto LABEL_27;
  }
  v11 = WebCore::treeOrder<(WebCore::TreeType)1>((int *)v21, (uint64_t)v19);
  if (v20)
  {
    v12 = v19[0];
    v19[0] = 0;
    if (v12)
    {
      if (*((_DWORD *)v12 + 6) == 2)
      {
        if ((*((_WORD *)v12 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v12);
      }
      else
      {
        *((_DWORD *)v12 + 6) -= 2;
      }
    }
  }
  if (v22)
  {
    v13 = v21[0];
    v21[0] = 0;
    if (v13)
    {
      if (*((_DWORD *)v13 + 6) == 2)
      {
        if ((*((_WORD *)v13 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v13);
      }
      else
      {
        *((_DWORD *)v13 + 6) -= 2;
      }
    }
  }
  return v11;
}

void WebCore::Node::~Node(WebCore::Node *this, void *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  WebCore::ElementRareData *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::InspectorDOMAgent *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WebCore::Node *v35;

  *(_QWORD *)this = off_1E33A6278;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v19 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    v20 = *(_QWORD *)(v19 + 528);
    if (v20)
    {
      v21 = *(_QWORD *)(v20 + 8);
      if (v21)
      {
        v22 = *(_QWORD *)(v21 + 24);
        if (v22)
        {
          v23 = *(_QWORD *)(v22 + 8);
          if (v23)
            goto LABEL_32;
        }
      }
    }
    v28 = *(_QWORD *)(v19 + 2632);
    if (v28)
    {
      v29 = *(_QWORD *)(v28 + 8);
      if (v29)
      {
        v30 = *(_QWORD *)(v29 + 528);
        if (v30)
        {
          v31 = *(_QWORD *)(v30 + 8);
          if (v31)
          {
            v32 = *(_QWORD *)(v31 + 24);
            if (v32)
            {
              v23 = *(_QWORD *)(v32 + 8);
              if (v23)
              {
LABEL_32:
                v24 = *(_QWORD *)(*(_QWORD *)(v23 + 80) + 8);
                v25 = *(_QWORD *)(v24 + 152);
                if (v25)
                {
                  v35 = this;
                  v26 = v25;
                  WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>((uint64_t *)(v25 + 168), (WTF::StringImpl *)&v35);
                  WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>((uint64_t *)(v26 + 176), (WTF::StringImpl *)&v35);
                  WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>((uint64_t *)(v26 + 184), (WTF::StringImpl *)&v35);
                }
                v27 = *(WebCore::InspectorDOMAgent **)(v24 + 40);
                if (v27)
                  WebCore::InspectorDOMAgent::willDestroyDOMNode(v27, this);
              }
            }
          }
        }
      }
    }
  }
  v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *((_QWORD *)this + 5) = 0;
  v5 = *(_DWORD *)(v4 + 3324) - 1;
  *(_DWORD *)(v4 + 3324) = v5;
  if (!v5 && *(_DWORD *)(v4 + 24) <= 1u && (*(_WORD *)(v4 + 30) & 0x400) == 0)
  {
    *(_WORD *)(v4 + 30) |= 0x400u;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
  }
  v6 = *((_QWORD *)this + 9);
  v7 = (WebCore::ElementRareData *)(v6 & 0xFFFFFFFFFFFFLL);
  if ((v6 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(_BYTE *)((v6 & 0xFFFFFFFFFFFFLL) + 0x18))
      WebCore::ElementRareData::~ElementRareData(v7, a2);
    else
      std::__destroy_at[abi:sn180100]<WebCore::NodeRareData,0>((uint64_t)v7, a2);
    WTF::fastFree(v7, v15);
    v6 = *((_QWORD *)this + 9);
  }
  *((_QWORD *)this + 9) = v6 & 0xFFFF000000000000;
  *(_QWORD *)this = &unk_1E33A4FC0;
  v8 = *((_QWORD *)this + 2);
  if ((v8 & 0x1000000000000) != 0)
  {
    v16 = v8 & 0xFFFFFFFFFFFFLL;
    if (*(_DWORD *)((v8 & 0xFFFFFFFFFFFFLL) + 0x18))
    {
      v17 = *(unsigned int *)((v8 & 0xFFFFFFFFFFFFLL) + 0x1C);
      if ((_DWORD)v17)
      {
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v16 + 16), (WTF::StringImpl *)(*(_QWORD *)(v16 + 16) + 32 * v17));
        *(_DWORD *)(v16 + 28) = 0;
      }
      v18 = *(WTF **)(v16 + 16);
      if (v18)
      {
        *(_QWORD *)(v16 + 16) = 0;
        *(_DWORD *)(v16 + 24) = 0;
        WTF::fastFree(v18, a2);
      }
    }
  }
  v9 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
  if (v9)
  {
    *(_QWORD *)((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) + 8) = 0;
    do
    {
      v11 = __ldaxr((unsigned int *)v9);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v9));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(unsigned int *)(v9 + 28);
      if ((_DWORD)v13)
      {
        v34 = v9;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v9 + 16), (WTF::StringImpl *)(*(_QWORD *)(v9 + 16) + 32 * v13));
        v9 = v34;
      }
      v14 = *(WTF **)(v9 + 16);
      if (v14)
      {
        *(_QWORD *)(v9 + 16) = 0;
        *(_DWORD *)(v9 + 24) = 0;
        v33 = v9;
        WTF::fastFree(v14, a2);
        v9 = v33;
      }
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  v10 = *((_QWORD *)this + 1);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 3;
    *((_QWORD *)this + 1) = 0;
  }
}

