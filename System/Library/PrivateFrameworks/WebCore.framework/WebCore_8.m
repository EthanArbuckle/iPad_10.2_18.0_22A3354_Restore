void WebCore::HTMLCollection::~HTMLCollection(WebCore::HTMLCollection *this, WTF::StringImpl *a2)
{
  WebCore::CollectionNamedElementCache *v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  uint64_t *v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  __int16 v15;

  *(_QWORD *)this = off_1E33B7AC0;
  v3 = (WebCore::CollectionNamedElementCache *)*((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8);
    --*(_DWORD *)(v4 + 1776);
  }
  v5 = *(_WORD *)((_BYTE *)this + 21) & 0x1F;
  v6 = v5 > 0x18;
  v7 = (1 << v5) & 0x1C00700;
  if (v6 || v7 == 0)
  {
    if ((*(_QWORD *)(*((_QWORD *)this + 3) + 72) & 0xFFFFFFFFFFFFLL) != 0)
      v9 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 3) + 72) & 0xFFFFFFFFFFFFLL);
    else
      v9 = 0;
    WebCore::NodeListsNodeData::removeCachedCollection(v9, this, (WTF::StringImpl **)&WebCore::starAtomData);
    v3 = (WebCore::CollectionNamedElementCache *)*((_QWORD *)this + 4);
  }
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    WebCore::CollectionNamedElementCache::~CollectionNamedElementCache(v3, a2);
    WTF::fastFree(v10, v11);
  }
  v12 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      v14 = *(_WORD *)(v12 + 30);
      if ((v14 & 0x400) == 0)
      {
        v15 = *(_WORD *)(v12 + 28);
        if ((v15 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v12, a2);
        }
        else
        {
          if ((v15 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v12 + 160) + 16))(*(_QWORD *)(v12 + 160));
            v14 = *(_WORD *)(v12 + 30);
          }
          *(_WORD *)(v12 + 30) = v14 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 72))(v12);
        }
      }
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  v13 = *((_QWORD *)this + 1);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 3;
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t *WebCore::NodeListsNodeData::removeCachedCollection(uint64_t *this, WebCore::HTMLCollection *a2, WTF::StringImpl **a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t **v17;
  WTF *v18;
  void *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  char v22[8];
  WTF::StringImpl *v23;

  v5 = *((_QWORD *)a2 + 3);
  v6 = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 2;
  v7 = *this;
  if (*this)
    LODWORD(v7) = *(_QWORD *)(v7 + 8) != 0;
  v8 = this[1];
  if (v8)
    LODWORD(v8) = *(_QWORD *)(v8 + 8) != 0;
  v9 = v8 + v7;
  v10 = this[2];
  if (v10)
    LODWORD(v10) = *(_DWORD *)(v10 - 12);
  v11 = v9 + v10;
  v12 = this[3];
  if (v12)
    LODWORD(v12) = *(_DWORD *)(v12 - 12);
  v13 = v11 + v12;
  v15 = this + 4;
  v14 = this[4];
  if (v14)
    LODWORD(v14) = *(_DWORD *)(v14 - 12);
  v16 = v13 + v14;
  if (v13 + (_DWORD)v14 == 1)
  {
    v17 = (uint64_t **)(*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL);
    this = *v17;
    *v17 = 0;
    if (this)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData((WebCore::NodeListsNodeData *)this, a2);
      this = (uint64_t *)WTF::fastFree(v18, v19);
      v6 = *(_DWORD *)(v5 + 24) - 2;
    }
  }
  if (v6)
  {
    *(_DWORD *)(v5 + 24) = v6;
  }
  else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
  {
    this = (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
  }
  if (v16 != 1)
  {
    v22[0] = *((_BYTE *)a2 + 21) & 0x1F;
    v20 = *a3;
    if (*a3)
      *(_DWORD *)v20 += 2;
    v23 = v20;
    WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v15, (WTF::StringImpl *)v22);
    this = (uint64_t *)v23;
    v23 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v21);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

uint64_t WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v22;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = *((_QWORD *)a2 + 1);
  v6 = *(unsigned __int8 *)a2;
  v7 = (v6 + (*(_DWORD *)(v5 + 16) >> 8)) & v4;
  v8 = (unsigned __int8 *)(v2 + 24 * v7);
  v9 = *v8;
  v10 = *((_QWORD *)v8 + 1);
  if (!*v8 && v10 == 0)
  {
LABEL_31:
    v13 = *(_DWORD *)(v2 - 4);
    v8 = (unsigned __int8 *)(v2 + 24 * v13);
  }
  else
  {
    v12 = 1;
    while (v9 == 255 || v9 != v6 || v10 != v5)
    {
      v7 = (v7 + v12) & v4;
      v8 = (unsigned __int8 *)(v2 + 24 * v7);
      v9 = *v8;
      v10 = *((_QWORD *)v8 + 1);
      ++v12;
      if (*v8)
        v22 = 0;
      else
        v22 = v10 == 0;
      if (v22)
        goto LABEL_31;
    }
    v13 = *(_DWORD *)(v2 - 4);
  }
  if ((unsigned __int8 *)(v2 + 24 * v13) == v8)
    return 0;
  v14 = (WTF::StringImpl *)*((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  *v8 = -1;
  ++*(_DWORD *)(*a1 - 16);
  v15 = *a1;
  if (*a1)
    v16 = *(_DWORD *)(v15 - 12) - 1;
  else
    v16 = -1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *a1;
  if (*a1)
  {
    v18 = 6 * *(_DWORD *)(v17 - 12);
    v19 = *(_DWORD *)(v17 - 4);
    if (v18 < v19 && v19 >= 9)
      WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash(a1, v19 >> 1, 0);
  }
  return 1;
}

uint64_t WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unsigned __int8 *v22;
  uint64_t v23;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (unsigned __int8 *)v6;
    do
    {
      if (*v14 != 255)
      {
        v23 = v13;
        v15 = v11;
        v16 = v6;
        if (*v14)
          v17 = 0;
        else
          v17 = *((_QWORD *)v14 + 1) == 0;
        if (v17)
        {
          v22 = v14;
          WTF::KeyValuePair<WebCore::CSSPrimitiveValue const*,WTF::String>::~KeyValuePair((uint64_t)v14, v10);
          v14 = v22;
          v11 = v15;
        }
        else
        {
          v18 = (uint64_t)v14;
          WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::reinsert(a1, v14);
          v20 = v19;
          WTF::KeyValuePair<WebCore::CSSPrimitiveValue const*,WTF::String>::~KeyValuePair(v18, v21);
          v14 = (unsigned __int8 *)v18;
          if (v18 == a3)
            v11 = v20;
          else
            v11 = v15;
          v6 = v16;
        }
        v13 = v23;
      }
      v14 += 24;
      --v13;
    }
    while (v13);
    goto LABEL_20;
  }
  result = 0;
  if (v6)
  {
LABEL_20:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::KeyValuePair<WebCore::CSSPrimitiveValue const*,WTF::String>::~KeyValuePair(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

__n128 WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::reinsert(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  BOOL v9;
  __n128 result;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = 0;
  v5 = *a2;
  v6 = v5 + (*(_DWORD *)(*((_QWORD *)a2 + 1) + 16) >> 8);
  do
  {
    v7 = v6 & v3;
    v8 = v2 + 24 * v7;
    v6 = ++v4 + v7;
    if (*(_BYTE *)v8)
      v9 = 0;
    else
      v9 = *(_QWORD *)(v8 + 8) == 0;
  }
  while (!v9);
  *(_QWORD *)(v8 + 8) = 0;
  *(_BYTE *)v8 = v5;
  result = *(__n128 *)(a2 + 8);
  *((_QWORD *)a2 + 1) = 0;
  *(__n128 *)(v8 + 8) = result;
  return result;
}

unint64_t WebCore::jsWebKitNamespace_messageHandlers(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (WTF *)WebCore::WebKitNamespace::messageHandlers(*(WebCore::WebKitNamespace **)(a2 + 24));
  if (v4)
    return WebCore::wrap<WebCore::UserMessageHandlersNamespace>(a1, v3, v4);
  else
    return 2;
}

uint64_t WebCore::WebKitNamespace::messageHandlers(WebCore::WebKitNamespace *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  WebCore::WebKitNamespace *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return *((_QWORD *)this + 3);
  v4 = *(_QWORD *)(v3 + 72);
  if (!v4)
    return *((_QWORD *)this + 3);
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return *((_QWORD *)this + 3);
  if (*(_BYTE *)(v5 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x19439C43CLL);
  }
  v6 = *(_QWORD *)(v5 + 240);
  if (!v6)
    return *((_QWORD *)this + 3);
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return *((_QWORD *)this + 3);
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v7 + 280) + 16) + 1176))(*(_QWORD *)(*(_QWORD *)(v7 + 280) + 16)))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 72) + 8);
    if (*(_BYTE *)(v10 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x19439C45CLL);
    }
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 240) + 8) + 280) + 16);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 1184))(v11);
    return *((_QWORD *)this + 3);
  }
  v8 = qword_1ECE7C478;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C478, OS_LOG_TYPE_ERROR))
  {
    v12 = 134217984;
    v13 = this;
    _os_log_error_impl(&dword_1940B8000, v8, OS_LOG_TYPE_ERROR, "%p - WebKitNamespace::Ignoring messageHandlers() request for non app-bound domain", (uint8_t *)&v12, 0xCu);
  }
  return 0;
}

double WebCore::ResourceResponseBase::cacheControlStaleWhileRevalidate(WebCore::ResourceResponseBase *this)
{
  if ((*((_WORD *)this + 116) & 1) == 0)
    WebCore::ResourceResponseBase::parseCacheControlDirectives(this);
  return *((double *)this + 27);
}

uint64_t WebCore::GraphicsContext::fillRoundedRect(uint64_t a1, float *a2, uint64_t a3, int a4)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  unsigned int v15;

  v7 = a2[4];
  if (v7 != 0.0)
  {
    if (v7 < 0.0)
      v7 = -v7;
    if (v7 >= 0.00000011921)
      goto LABEL_14;
  }
  v8 = a2[5];
  if (v8 != 0.0)
  {
    if (v8 < 0.0)
      v8 = -v8;
    if (v8 >= 0.00000011921)
      goto LABEL_14;
  }
  v9 = a2[6];
  if (v9 != 0.0)
  {
    if (v9 < 0.0)
      v9 = -v9;
    if (v9 >= 0.00000011921)
      goto LABEL_14;
  }
  v10 = a2[7];
  if (v10 != 0.0)
  {
    if (v10 < 0.0)
      v10 = -v10;
    if (v10 >= 0.00000011921)
      goto LABEL_14;
  }
  v11 = a2[8];
  if (v11 != 0.0)
  {
    if (v11 < 0.0)
      v11 = -v11;
    if (v11 >= 0.00000011921)
      goto LABEL_14;
  }
  v12 = a2[9];
  if (v12 != 0.0)
  {
    if (v12 < 0.0)
      v12 = -v12;
    if (v12 >= 0.00000011921)
      goto LABEL_14;
  }
  v13 = a2[10];
  if (v13 == 0.0)
    goto LABEL_8;
  if (v13 < 0.0)
    v13 = -v13;
  if (v13 < 0.00000011921)
  {
LABEL_8:
    v14 = a2[11];
    if (v14 == 0.0)
    {
      LOBYTE(v15) = *(_BYTE *)(a1 + 194);
      return (*(uint64_t (**)(uint64_t, float *, uint64_t, _QWORD))(*(_QWORD *)a1 + 248))(a1, a2, a3, v15);
    }
    if (v14 < 0.0)
      v14 = -v14;
    v15 = *(unsigned __int16 *)(a1 + 194);
    if (v14 < 0.00000011921)
      return (*(uint64_t (**)(uint64_t, float *, uint64_t, _QWORD))(*(_QWORD *)a1 + 248))(a1, a2, a3, v15);
  }
  else
  {
LABEL_14:
    v15 = *(unsigned __int16 *)(a1 + 194);
  }
  if (a4 != v15 >> 8)
  {
    *(_WORD *)(a1 + 194) = v15 | (a4 << 8);
    *(_DWORD *)(a1 + 184) |= 0x20u;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a1 + 8);
  (*(void (**)(uint64_t, float *, uint64_t))(*(_QWORD *)a1 + 256))(a1, a2, a3);
  if ((*(_WORD *)(a1 + 194) & 0xFF00) != 0x100)
  {
    *(_WORD *)(a1 + 194) = *(_WORD *)(a1 + 194) | 0x100;
    *(_DWORD *)(a1 + 184) |= 0x20u;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a1 + 8);
}

void WebCore::JSIntersectionObserverEntryOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::IntersectionObserverEntry *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::IntersectionObserverEntry *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v23;
  bmalloc::api *v24;
  void *v25;

  v3 = *(WebCore::IntersectionObserverEntry **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::IntersectionObserverEntry **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v23 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v23) & v7;
        v12 = *(WebCore::IntersectionObserverEntry **)(v5 + 16 * v11);
        ++v23;
        if (v12 == v3)
          goto LABEL_3;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_3:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v13 = (_QWORD *)(v5 + 16 * v11);
      *v13 = -1;
      v16 = v13[1];
      v15 = v13 + 1;
      v14 = v16;
      if (v16)
      {
        *(_QWORD *)(v14 + 8) = 3;
        *v15 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v17 = *v4;
      if (*v4)
        v18 = *(_DWORD *)(v17 - 12) - 1;
      else
        v18 = -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v4;
      if (*v4)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v21 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::IntersectionObserverEntry::~IntersectionObserverEntry(v3, a2);
    bmalloc::api::isoDeallocate(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WTF::Vector<WebCore::FontRanges,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(_DWORD *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)a1[3] <= a3)
  {
    v6 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WebCore::FontRanges,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v9 = a3 - v5;
    v10 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::FontRanges,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  return v3;
}

_DWORD *WTF::Vector<WebCore::FontRanges,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(_DWORD *result, unint64_t a2)
{
  _DWORD *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD **v15;
  _DWORD *v16;

  if (result[2] < a2)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = result[3];
    if (a2 < 2)
    {
      v6 = result + 4;
      *(_QWORD *)result = result + 4;
      result[2] = 1;
    }
    else
    {
      if (a2 >= 0x6666667)
      {
LABEL_34:
        __break(0xC471u);
        JUMPOUT(0x19439CB1CLL);
      }
      v5 = 40 * a2;
      result = (_DWORD *)WTF::fastMalloc((WTF *)(40 * a2));
      v6 = result;
      v2[2] = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v2 = result;
    }
    if (v4)
    {
      v7 = v3;
      do
      {
        v8 = *((unsigned int *)v7 + 3);
        v9 = v6 + 4;
        *(_QWORD *)v6 = v6 + 4;
        v6[2] = 1;
        v6[3] = v8;
        if (v8 >= 2)
        {
          if (v8 >> 28)
            goto LABEL_34;
          v9 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v8));
          v6[2] = v8;
          *(_QWORD *)v6 = v9;
        }
        v10 = *((unsigned int *)v7 + 3);
        result = *(_DWORD **)v7;
        if ((_DWORD)v10)
        {
          v12 = *(_QWORD **)v7;
          do
          {
            *v9 = *v12;
            v13 = v12[1];
            ++*(_DWORD *)(v13 + 8);
            v9[1] = v13;
            v12 += 2;
            v9 += 2;
          }
          while (v12 != (_QWORD *)&result[4 * v10]);
          *((_BYTE *)v6 + 32) = *((_BYTE *)v7 + 32);
          v14 = 16 * v10;
          v15 = (_DWORD **)(result + 2);
          do
          {
            v16 = *v15;
            *v15 = 0;
            if (v16)
            {
              if (v16[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
              else
                --v16[2];
            }
            v15 += 2;
            v14 -= 16;
          }
          while (v14);
          result = *(_DWORD **)v7;
        }
        else
        {
          *((_BYTE *)v6 + 32) = *((_BYTE *)v7 + 32);
        }
        if ((_DWORD *)((char *)v7 + 16) != result && result != 0)
        {
          *(_QWORD *)v7 = 0;
          *((_DWORD *)v7 + 2) = 0;
          result = (_DWORD *)WTF::fastFree((WTF *)result, (void *)a2);
        }
        v6 += 10;
        v7 = (WTF *)((char *)v7 + 40);
      }
      while (v7 != (WTF *)((char *)v3 + 40 * v4));
    }
    if (v2 + 4 != (_DWORD *)v3 && v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        v2[2] = 0;
      }
      return (_DWORD *)WTF::fastFree(v3, (void *)a2);
    }
  }
  return result;
}

void WebCore::RenderReplaced::localRectsForRepaint(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  signed int v21;
  uint64_t v22;
  uint64_t v23;
  signed int v24;
  signed int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t v34;
  WebCore::ShadowData *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  signed int v39;
  uint64_t v40;
  uint64_t (*v41)();
  WebCore::RenderStyle *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v47;
  uint64_t v48;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  signed int v60;
  int v61;
  int v62;
  float v63;
  float v64;
  float v65;
  WebCore::RenderStyle *v66;
  uint64_t v67;
  float v68;
  double v69;
  int v70;
  int v71;
  _BOOL4 v72;
  int v73;
  signed int v74;
  int v75;

  v5 = *(unsigned __int8 *)(a1 + 46);
  if (v5 != 83)
  {
    if ((*(_BYTE *)(a1 + 52) & 7) != 4)
    {
      v6 = v5 - 67;
      v7 = v6 > 0x13;
      v8 = 1 << v6;
      v9 = 917521;
      goto LABEL_4;
    }
    if (v5 != 85 && (*(_BYTE *)(a1 + 53) & 1) != 0)
    {
      v50 = v5 - 67;
      v7 = v50 > 0x13;
      v8 = 1 << v50;
      v9 = 655377;
LABEL_4:
      v10 = v8 & v9;
      if (v7 || v10 == 0)
        goto LABEL_9;
    }
  }
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
  {
    v54 = a1;
    if ((*(_BYTE *)(a1 + 45) & 0x10) == 0)
    {
      v54 = a1;
      do
        v54 = *(_QWORD *)(*(_QWORD *)(v54 + 32) + 8);
      while ((*(_BYTE *)(v54 + 45) & 0x10) == 0);
    }
    while ((*(_BYTE *)(v54 + 21) & 0x80) == 0)
    {
      do
        v54 = *(_QWORD *)(*(_QWORD *)(v54 + 32) + 8);
      while ((*(_BYTE *)(v54 + 45) & 0x10) == 0);
    }
    v55 = *(_QWORD *)(*(_QWORD *)(v54 + 144) + 224);
    if (v55)
    {
      if (*(_QWORD *)(v55 + 8))
        goto LABEL_77;
    }
  }
LABEL_9:
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 104) + 239) & 4) != 0 || (*(_BYTE *)(a1 + 120) & 0x30) != 0)
  {
    v51 = a1;
    if ((*(_BYTE *)(a1 + 45) & 0x10) == 0)
    {
      v51 = a1;
      do
        v51 = *(_QWORD *)(*(_QWORD *)(v51 + 32) + 8);
      while ((*(_BYTE *)(v51 + 45) & 0x10) == 0);
    }
    while ((*(_BYTE *)(v51 + 21) & 0x80) == 0)
    {
      do
        v51 = *(_QWORD *)(*(_QWORD *)(v51 + 32) + 8);
      while ((*(_BYTE *)(v51 + 45) & 0x10) == 0);
    }
    if ((*(_BYTE *)(*(_QWORD *)(v51 + 144) + 26) & 8) == 0)
    {
LABEL_77:
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 32) = 0;
      return;
    }
  }
  v12 = *(_QWORD *)(a1 + 160);
  v13 = *(_QWORD *)(a1 + 192);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 20);
    v15 = *(_QWORD *)(v13 + 28);
  }
  else
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 160);
  }
  v16 = 0;
  if ((int)v15 < 1)
  {
    v18 = *(_QWORD *)(a1 + 160);
  }
  else
  {
    v17 = HIDWORD(v15);
    v18 = *(_QWORD *)(a1 + 160);
    if (SHIDWORD(v15) >= 1)
    {
      if ((int)v12 < 1 || SHIDWORD(v12) < 1)
      {
        v16 = v14;
        v18 = v15;
      }
      else
      {
        v19 = HIDWORD(v14);
        v20 = __OFADD__((_DWORD)v14, (_DWORD)v15);
        v21 = v14 + v15;
        if (v20)
          v21 = (v14 >> 31) + 0x7FFFFFFF;
        v22 = v14 & ((int)v14 >> 31);
        v23 = HIDWORD(v14) & (SHIDWORD(v14) >> 31);
        if ((int)v12 <= v21)
          v24 = v21;
        else
          v24 = *(_QWORD *)(a1 + 160);
        v25 = v19 + v17;
        if (__OFADD__((_DWORD)v19, (_DWORD)v17))
          v25 = (v19 >> 31) + 0x7FFFFFFF;
        if (SHIDWORD(v12) > v25)
          v25 = HIDWORD(*(_QWORD *)(a1 + 160));
        v20 = __OFSUB__(v24, (_DWORD)v22);
        v26 = v24 - v22;
        if (v20)
          v26 = 0x7FFFFFFF;
        v16 = v22 | (v23 << 32);
        v20 = __OFSUB__(v25, (_DWORD)v23);
        v27 = (v25 - v23);
        if (v20)
          v27 = 0x7FFFFFFFLL;
        v18 = v26 | (unint64_t)(v27 << 32);
      }
    }
  }
  v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944)
                  + 248);
  v29 = *(unsigned int *)(v28 + 508);
  if (!(_DWORD)v29)
  {
    v30 = 0;
LABEL_33:
    LODWORD(v31) = 0;
    goto LABEL_34;
  }
  v30 = *(_QWORD *)(*(_QWORD *)(v28 + 496) + 8 * v29 - 8);
  if (!v30)
    goto LABEL_33;
  v31 = *(_QWORD *)(v30 + 64);
  v30 = v31 & 0xFFFFFFFF00000000;
LABEL_34:
  v32 = HIDWORD(v30);
  v20 = __OFADD__((_DWORD)v16, (_DWORD)v31);
  LODWORD(v31) = v16 + v31;
  if (v20)
    v31 = (v16 >> 31) + 0x7FFFFFFF;
  else
    v31 = v31;
  v34 = HIDWORD(v16);
  v20 = __OFADD__((_DWORD)v34, (_DWORD)v32);
  v33 = v34 + v32;
  LODWORD(v34) = (v34 >> 31) + 0x7FFFFFFF;
  if (v20)
    v34 = v34;
  else
    v34 = v33;
  *(_QWORD *)a3 = v31 | (v34 << 32);
  *(_QWORD *)(a3 + 8) = v18;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 32) = 0;
  if (a2)
  {
    v35 = *(WebCore::ShadowData **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 88);
    if (v35)
    {
      v52 = WebCore::ShadowData::shadowOutsetExtent(v35);
      v37 = HIDWORD(v53);
      if (__OFADD__((_DWORD)v12, HIDWORD(v52)))
        v39 = (v12 >> 31) + 0x7FFFFFFF;
      else
        v39 = v12 + HIDWORD(v52);
      if (__OFADD__(HIDWORD(v12), (_DWORD)v53))
        LODWORD(v38) = (HIDWORD(v12) >> 31) + 0x7FFFFFFF;
      else
        LODWORD(v38) = HIDWORD(v12) + v53;
      v36 = v52;
    }
    else
    {
      v36 = 0;
      LODWORD(v37) = 0;
      v38 = HIDWORD(v12);
      v39 = v12;
    }
    v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 24) + 200);
    if (*(_QWORD *)(v40 + 8))
      v41 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    else
      v41 = 0;
    if (v41 && !WebCore::LengthBox::isZero((WebCore::LengthBox *)(v40 + 80)))
    {
      v56 = WebCore::RenderStyle::imageOutsets(a1 + 80, (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 24) + 200));
      v59 = -v58;
      if (__OFSUB__(0, v58))
        v59 = 0x7FFFFFFF;
      if (v59 < (int)v37)
        LODWORD(v37) = v59;
      v60 = v12 + HIDWORD(v56);
      if (__OFADD__((_DWORD)v12, HIDWORD(v56)))
        v60 = (v12 >> 31) + 0x7FFFFFFF;
      if (v39 <= v60)
        v39 = v60;
      v61 = -(int)v56;
      if (__OFSUB__(0, (_DWORD)v56))
        v61 = 0x7FFFFFFF;
      if (v61 >= (int)v36)
        v36 = v36;
      else
        v36 = v61;
      v62 = HIDWORD(v12) + v57;
      if (__OFADD__(HIDWORD(v12), v57))
        v62 = (HIDWORD(v12) >> 31) + 0x7FFFFFFF;
      if ((int)v38 <= v62)
        LODWORD(v38) = v62;
    }
    v42 = (WebCore::RenderStyle *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 424))(a1);
    v43 = *(_QWORD *)(*((_QWORD *)v42 + 1) + 16);
    v44 = *(unsigned __int8 *)(v43 + 52);
    if ((v44 & 0xF) != 0 && (v44 & 0xE) != 0 && (v44 & 0xF) != 0)
    {
      v63 = *(float *)(v43 + 48);
      v64 = 3.0;
      if (((v63 < 3.0) & (v44 >> 4)) != 0 || v63 > 0.0)
      {
        if (v63 >= 3.0)
          v64 = *(float *)(v43 + 48);
        if ((v44 & 0x10) != 0)
          v65 = v64;
        else
          v65 = *(float *)(v43 + 48);
        if ((float)(v65 + WebCore::RenderStyle::outlineOffset(v42)) > 0.0)
        {
          v66 = (WebCore::RenderStyle *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 424))(a1);
          v67 = *(_QWORD *)(*((_QWORD *)v66 + 1) + 16);
          v68 = 0.0;
          if ((*(_BYTE *)(v67 + 52) & 0xF) != 0)
          {
            v68 = *(float *)(v67 + 48);
            if ((*(_BYTE *)(v67 + 52) & 0x10) != 0 && v68 < 3.0)
              v68 = 3.0;
          }
          v69 = fmaxf(v68 + WebCore::RenderStyle::outlineOffset(v66), 0.0) * 64.0;
          if (v69 >= 2147483650.0)
          {
            v70 = 0x7FFFFFFF;
          }
          else if (v69 <= -2147483650.0)
          {
            v70 = 0x80000000;
          }
          else
          {
            v70 = (int)v69;
          }
          v71 = -v70;
          v72 = __OFSUB__(0, v70);
          v73 = -v70;
          if (__OFSUB__(0, v70))
            v73 = 0x7FFFFFFF;
          if (v73 < (int)v37)
            LODWORD(v37) = v73;
          v74 = v12 + v70;
          if (__OFADD__((_DWORD)v12, v70))
            v74 = (v12 >> 31) + 0x7FFFFFFF;
          if (v39 <= v74)
            v39 = v74;
          if (v72)
            v71 = 0x7FFFFFFF;
          if (v71 >= (int)v36)
            v36 = v36;
          else
            v36 = v71;
          v20 = __OFADD__(HIDWORD(v12), v70);
          v75 = HIDWORD(v12) + v70;
          if (v20)
            v75 = (HIDWORD(v12) >> 31) + 0x7FFFFFFF;
          if ((int)v38 <= v75)
            LODWORD(v38) = v75;
        }
      }
    }
    LODWORD(v47) = v39 - v37;
    if (__OFSUB__(v39, (_DWORD)v37))
      v47 = (v39 >> 31) + 0x7FFFFFFF;
    else
      v47 = v47;
    LODWORD(v48) = (v38 >> 31) + 0x7FFFFFFF;
    if (__OFSUB__((_DWORD)v38, (_DWORD)v36))
      v48 = v48;
    else
      v48 = (v38 - v36);
    *(_QWORD *)(a3 + 16) = v37 | (v36 << 32);
    *(_QWORD *)(a3 + 24) = v47 | (v48 << 32);
    *(_BYTE *)(a3 + 32) = 1;
  }
}

unint64_t WebCore::RenderBox::localOutlineBoundsRepaintRect(WebCore::RenderBox *this)
{
  WebCore::ShadowData *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  WebCore::RenderStyle *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  float v19;
  float v20;
  float v21;
  WebCore::RenderStyle *v22;
  uint64_t v23;
  float v24;
  double v25;
  int v26;
  int v27;
  _BOOL4 v28;
  int v29;

  v2 = *(WebCore::ShadowData **)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 88);
  if (v2)
  {
    v13 = WebCore::ShadowData::shadowOutsetExtent(v2);
    v4 = HIDWORD(v14);
    v3 = v13;
  }
  else
  {
    v3 = 0;
    LODWORD(v4) = 0;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 24) + 200);
  if (*(_QWORD *)(v5 + 8))
    v6 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  else
    v6 = 0;
  if (v6 && !WebCore::LengthBox::isZero((WebCore::LengthBox *)(v5 + 80)))
  {
    v15 = WebCore::RenderStyle::imageOutsets((uint64_t)this + 80, (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 11) + 24) + 200));
    v17 = -v16;
    if (__OFSUB__(0, v16))
      v17 = 0x7FFFFFFF;
    if (v17 < (int)v4)
      LODWORD(v4) = v17;
    v18 = -v15;
    if (__OFSUB__(0, v15))
      v18 = 0x7FFFFFFF;
    if (v18 >= (int)v3)
      v3 = v3;
    else
      v3 = v18;
  }
  v7 = (WebCore::RenderStyle *)(*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 424))(this);
  v8 = *(_QWORD *)(*((_QWORD *)v7 + 1) + 16);
  v9 = *(unsigned __int8 *)(v8 + 52);
  if ((v9 & 0xF) != 0 && (v9 & 0xE) != 0 && (v9 & 0xF) != 0)
  {
    v19 = *(float *)(v8 + 48);
    v20 = 3.0;
    if (((v19 < 3.0) & (v9 >> 4)) != 0 || v19 > 0.0)
    {
      if (v19 >= 3.0)
        v20 = *(float *)(v8 + 48);
      if ((v9 & 0x10) != 0)
        v21 = v20;
      else
        v21 = *(float *)(v8 + 48);
      if ((float)(WebCore::RenderStyle::outlineOffset(v7) + v21) > 0.0)
      {
        v22 = (WebCore::RenderStyle *)(*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 424))(this);
        v23 = *(_QWORD *)(*((_QWORD *)v22 + 1) + 16);
        v24 = 0.0;
        if ((*(_BYTE *)(v23 + 52) & 0xF) != 0)
        {
          v24 = *(float *)(v23 + 48);
          if ((*(_BYTE *)(v23 + 52) & 0x10) != 0 && v24 < 3.0)
            v24 = 3.0;
        }
        v25 = fmaxf(v24 + WebCore::RenderStyle::outlineOffset(v22), 0.0) * 64.0;
        if (v25 >= 2147483650.0)
        {
          v26 = 0x7FFFFFFF;
        }
        else if (v25 <= -2147483650.0)
        {
          v26 = 0x80000000;
        }
        else
        {
          v26 = (int)v25;
        }
        v27 = -v26;
        v28 = __OFSUB__(0, v26);
        v29 = -v26;
        if (__OFSUB__(0, v26))
          v29 = 0x7FFFFFFF;
        if (v29 < (int)v4)
          LODWORD(v4) = v29;
        if (v28)
          v27 = 0x7FFFFFFF;
        if (v27 >= (int)v3)
          v3 = v3;
        else
          v3 = v27;
      }
    }
  }
  return v4 | (v3 << 32);
}

void *WebCore::MemoryCache::singleton(WebCore::MemoryCache *this)
{
  if ((WTF::isMainThread(this) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19439D3E0);
  }
  {
    WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
  }
  return &WebCore::MemoryCache::singleton(void)::memoryCache;
}

WebCore::MemoryCache *WebCore::MemoryCache::MemoryCache(WebCore::MemoryCache *this)
{
  char v3;

  *(_WORD *)this = 0;
  *(_QWORD *)((char *)this + 4) = 0x800000;
  *((_DWORD *)this + 3) = 0x800000;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = (char *)this + 48;
  *((_QWORD *)this + 5) = 32;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_QWORD *)this + 42) = 0;
  WebCore::Timer::Timer<WebCore::MemoryCache,WebCore::MemoryCache>((uint64_t)this + 344, (uint64_t)this);
  std::call_once[abi:sn180100]<WebCore::MemoryCache::MemoryCache(void)::$_0>((uint64_t)&v3);
  return this;
}

uint64_t WebCore::Timer::Timer<WebCore::MemoryCache,WebCore::MemoryCache>(uint64_t a1, uint64_t a2)
{
  unint64_t StatusReg;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;

  *(_QWORD *)a1 = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = *(unsigned int **)(StatusReg + 736);
  if (!v5)
    v5 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = off_1E31F7378;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E33F8F48;
  v7[1] = WebCore::MemoryCache::prune;
  v7[2] = 0;
  v7[3] = a2;
  *(_QWORD *)(a1 + 48) = v7;
  return a1;
}

uint64_t WebCore::RemoteCommandListener::setCreationFunction(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  {
    WebCore::remoteCommandListenerCreationFunction(void)::creationFunction = 0;
  }
  v1 = *a1;
  *a1 = 0;
  result = WebCore::remoteCommandListenerCreationFunction(void)::creationFunction;
  WebCore::remoteCommandListenerCreationFunction(void)::creationFunction = v1;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

double WebCore::LibWebRTCProvider::LibWebRTCProvider(WebCore::LibWebRTCProvider *this)
{
  double result;

  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_BYTE *)this + 48) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 88) = 0;
  *((_BYTE *)this + 120) = 0;
  *((_BYTE *)this + 128) = 0;
  *((_BYTE *)this + 160) = 0;
  *((_DWORD *)this + 42) = 0;
  *((_BYTE *)this + 172) = 0;
  *(_QWORD *)this = off_1E341A5B0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *(_QWORD *)&result = 0x1000100010001;
  *((_DWORD *)this + 48) = 65537;
  *((_WORD *)this + 98) = 0;
  return result;
}

void WebCore::CSSPropertyParserHelpers::consumeClip(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  unsigned int v3;
  __int128 *v6;
  __int128 *v7;
  int *v8;
  WebCore::CSSParserTokenRange *v9;
  WebCore::CSSParserTokenRange *v10;
  __int128 *v11;
  void *v12;
  _BOOL4 v13;
  Rect v14;
  int *v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  int v22;
  int v23;
  _QWORD v24[4];
  int *v25;
  int *v26;
  int *v27;
  __int128 *v28;
  __int128 *v29;
  int *v30;
  int *v31;

  v3 = a2;
  v7 = *this;
  v6 = this[1];
  if (*this >= v6)
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) == 0)
  {
    v22 = *((_DWORD *)v7 + 4);
    if (v22 < 0)
    {
      v22 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
      *((_DWORD *)v7 + 4) = v22;
    }
    if ((unsigned __int16)v22 == 394)
    {
      WebCore::CSSPropertyParserHelpers::consumeIdent(this, a2, a3);
      return;
    }
    v6 = this[1];
  }
  v8 = (int *)*this;
  if (*this >= v6)
  {
    v8 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if (WebCore::CSSParserToken::functionId(v8) != 786)
    goto LABEL_49;
  v11 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction(this, v9);
  v28 = v11;
  v29 = (__int128 *)v10;
  if (v10 <= (WebCore::CSSParserTokenRange *)v11)
  {
    v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v11 & 0x3F) != 0)
    goto LABEL_7;
  v23 = *((_DWORD *)v11 + 4);
  if (v23 < 0)
  {
    v23 = WebCore::cssValueKeywordID(*((_QWORD *)v11 + 1), *((unsigned int *)v11 + 1) | ((unint64_t)((*(_DWORD *)v11 >> 22) & 1) << 32));
    *((_DWORD *)v11 + 4) = v23;
  }
  if ((unsigned __int16)v23 != 394)
  {
LABEL_7:
    v30 = 0;
    v31 = 0;
    WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::LengthRaw>::consumeAndResolve((uint64_t)&v28, (unsigned __int16 **)&v31, (uint64_t)&v30, v3, &v27);
    if (v30)
      WTF::fastFree((WTF *)(v30 - 4), v12);
    if (v31)
      WTF::fastFree((WTF *)(v31 - 4), v12);
  }
  else
  {
    WebCore::CSSPropertyParserHelpers::consumeIdent(&v28, v10, &v27);
  }
  if (!v27)
  {
LABEL_49:
    *a3 = 0;
    return;
  }
  v13 = WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(&v28, (WebCore::CSSParserTokenRange *)v12);
  WebCore::CSSPropertyParserHelpers::consumeClipComponent(&v31, &v28, v3);
  if (v31)
  {
    if (!v13)
    {
      WebCore::CSSPropertyParserHelpers::consumeClipComponent(&v30, &v28, v3);
      if (v30)
        goto LABEL_15;
      goto LABEL_55;
    }
    if (WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(&v28, *(WebCore::CSSParserTokenRange **)&v14))
    {
      WebCore::CSSPropertyParserHelpers::consumeClipComponent(&v30, &v28, v3);
      if (v30
        && WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(&v28, *(WebCore::CSSParserTokenRange **)&v14))
      {
LABEL_15:
        WebCore::CSSPropertyParserHelpers::consumeClipComponent(&v26, &v28, v3);
        v15 = v26;
        if (v26 && v28 == v29)
        {
          v16 = v27;
          v26 = 0;
          v27 = 0;
          v18 = v30;
          v17 = v31;
          v30 = 0;
          v31 = 0;
          v24[0] = v16;
          v24[1] = v17;
          v24[2] = v18;
          v24[3] = v15;
          WebCore::CSSRectValue::create((WebCore::CSSRectValue *)v24, v14, (uint64_t *)&v25);
          *a3 = v25;
          v25 = 0;
          WebCore::RectBase::~RectBase((WebCore::RectBase *)v24);
          v15 = v26;
        }
        else
        {
          *a3 = 0;
        }
        v26 = 0;
        if (v15)
        {
          if (*v15 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, *(WTF::StringImpl **)&v14);
          else
            *v15 -= 2;
        }
        goto LABEL_21;
      }
LABEL_55:
      *a3 = 0;
LABEL_21:
      v19 = v30;
      v30 = 0;
      if (v19)
      {
        if (*v19 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, *(WTF::StringImpl **)&v14);
        else
          *v19 -= 2;
      }
      goto LABEL_24;
    }
  }
  *a3 = 0;
LABEL_24:
  v20 = v31;
  v31 = 0;
  if (v20)
  {
    if (*v20 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, *(WTF::StringImpl **)&v14);
    else
      *v20 -= 2;
  }
  v21 = v27;
  v27 = 0;
  if (v21)
  {
    if (*v21 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, *(WTF::StringImpl **)&v14);
    else
      *v21 -= 2;
  }
}

void WebCore::CSSPropertyParserHelpers::consumeClipComponent(int **a1, __int128 **this, unsigned int a3)
{
  __int128 *v6;
  void *v7;
  int v8;
  uint64_t v9;
  unsigned __int16 *v10;

  v6 = *this;
  if (*this >= this[1])
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_3;
  v8 = *((_DWORD *)v6 + 4);
  if (v8 < 0)
  {
    v8 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = v8;
  }
  if ((unsigned __int16)v8 != 394)
  {
LABEL_3:
    v9 = 0;
    v10 = 0;
    WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::LengthRaw>::consumeAndResolve((uint64_t)this, &v10, (uint64_t)&v9, a3, a1);
    if (v9)
      WTF::fastFree((WTF *)(v9 - 16), v7);
    if (v10)
      WTF::fastFree((WTF *)(v10 - 8), v7);
  }
  else
  {
    WebCore::CSSPropertyParserHelpers::consumeIdent(this, (WebCore::CSSParserTokenRange *)this, a1);
  }
}

int *WebCore::CSSRectValue::create@<X0>(WebCore::CSSRectValue *this@<X0>, Rect a2@<0:X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  int *result;
  _DWORD *v10;
  int v11;
  int v12;

  v6 = WTF::fastCompactMalloc((WTF *)0x28);
  v7 = *(_DWORD **)this;
  v8 = (_DWORD *)*((_QWORD *)this + 1);
  *v7 = **(_DWORD **)this + 2;
  *v8 += 2;
  v10 = (_DWORD *)*((_QWORD *)this + 2);
  result = (int *)*((_QWORD *)this + 3);
  *v10 += 2;
  *result += 2;
  *(_DWORD *)v6 = 2;
  v11 = (*(unsigned __int8 *)(v6 + 6) << 16) & 0xFC0000 | 0x10000;
  *(_WORD *)(v6 + 4) = -30720;
  *(_BYTE *)(v6 + 6) = BYTE2(v11);
  *v7 += 2;
  *v8 += 2;
  *(_QWORD *)(v6 + 8) = v7;
  *(_QWORD *)(v6 + 16) = v8;
  *v10 += 2;
  v12 = *result;
  *result += 2;
  *(_QWORD *)(v6 + 24) = v10;
  *(_QWORD *)(v6 + 32) = result;
  *a3 = v6;
  if (v12)
    *result = v12;
  else
    result = (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v5);
  if (*v10 == 2)
    result = (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v5);
  else
    *v10 -= 2;
  if (*v8 == 2)
    result = (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v5);
  else
    *v8 -= 2;
  if (*v7 == 2)
    return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, v5);
  *v7 -= 2;
  return result;
}

void WebCore::RectBase::~RectBase(WebCore::RectBase *this)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;

  v2 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    if (*v2 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
    else
      *v2 -= 2;
  }
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*v3 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
    else
      *v3 -= 2;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*v4 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
    else
      *v4 -= 2;
  }
  v5 = *(_DWORD **)this;
  *(_QWORD *)this = 0;
  if (v5)
  {
    if (*v5 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
    else
      *v5 -= 2;
  }
}

void WebCore::DocumentFragment::~DocumentFragment(WebCore::DocumentFragment *this, void *a2, uint64_t a3, WebCore::TreeScope *a4)
{
  bmalloc::api *v4;
  void *v5;

  WebCore::ContainerNode::~ContainerNode((uint64_t)this, a2, a3, a4);
  bmalloc::api::isoDeallocate(v4, v5);
}

void WebCore::HTMLOptionElement::~HTMLOptionElement(WebCore::HTMLOptionElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::HTMLInputElement::~HTMLInputElement(WebCore::HTMLInputElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLInputElement::~HTMLInputElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  WebCore::ImageLoader *v8;
  WTF *v9;
  void *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  void *v15;
  WebCore::RadioButtonGroups *v16;
  WTF *v17;
  void *v18;

  v3 = *((_QWORD *)this + 15);
  if (v3 && *(_QWORD *)(v3 + 8))
    (*(void (**)(void))(*((_QWORD *)this + 14) + 80))();
  v4 = *((_QWORD *)this + 30);
  if (v4 && *(_DWORD *)(v4 + 12) == 4096)
  {
    v5 = *((_QWORD *)this + 5);
    v6 = *(_QWORD **)(v5 + 72);
    if (!v6)
    {
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)8);
      v6 = WebCore::RadioButtonGroups::RadioButtonGroups(v14);
      v16 = *(WebCore::RadioButtonGroups **)(v5 + 72);
      *(_QWORD *)(v5 + 72) = v6;
      if (v16)
      {
        WebCore::RadioButtonGroups::~RadioButtonGroups(v16, v15);
        WTF::fastFree(v17, v18);
        v6 = *(_QWORD **)(v5 + 72);
      }
    }
    WebCore::RadioButtonGroups::removeButton((uint64_t)v6, this);
  }
  if ((*((_WORD *)this + 116) & 0x400) != 0)
    WebCore::Document::removeTouchEventHandler(*(_QWORD *)(*((_QWORD *)this + 5) + 8), (uint64_t)this, 0);
  v7 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = (WebCore::ImageLoader *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v8)
  {
    WebCore::ImageLoader::~ImageLoader(v8, a2);
    WTF::fastFree(v9, v10);
  }
  v11 = (_DWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v11)
  {
    if (v11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::HTMLTextFormControlElement::~HTMLTextFormControlElement(this, (WTF::StringImpl *)a2);
}

void WebCore::HTMLDivElement::~HTMLDivElement(WebCore::HTMLDivElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::HTMLScriptElement::~HTMLScriptElement(WebCore::HTMLScriptElement *this, WTF::StringImpl *a2)
{
  bmalloc::api *v3;
  void *v4;

  WebCore::ScriptElement::~ScriptElement((WebCore::HTMLScriptElement *)((char *)this + 112), a2);
  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v3, v4);
}

{
  WebCore::ScriptElement::~ScriptElement((WebCore::HTMLScriptElement *)((char *)this + 112), a2);
  WebCore::Element::~Element((uint64_t)this);
}

void WebCore::ContainerNode::~ContainerNode(uint64_t this, void *a2, uint64_t a3, WebCore::TreeScope *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::ContainerNode *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  uint64_t v26;
  WebCore::ElementRareData *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  WTF *v34;
  void *v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v47;
  uint64_t i;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  WebCore::InspectorDOMAgent *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WebCore::AXObjectCache *v81;
  WebCore::AXObjectCache *v82;
  int v83;
  uint64_t v84;

  *(_QWORD *)this = off_1E33A1428;
  if ((*(_WORD *)(this + 28) & 0xF000) != 0x9000)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(this + 40) + 8);
    *(_DWORD *)(v5 + 24) += 2;
    if ((*(_BYTE *)(this + 22) & 1) != 0)
    {
      WebCore::Document::didRemoveWheelEventHandler(v5, (WebCore::Node *)this, 1);
      WebCore::Document::removeTouchEventListener(v5, this, 1);
      WebCore::Document::didRemoveTouchEventHandler((WebCore::Document *)v5, this, 1);
    }
    v6 = *(_QWORD *)(v5 + 632);
    if (v6)
    {
      v7 = *(_DWORD *)(v6 - 8);
      v8 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
      v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
      v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
      v11 = v7 & ((v10 >> 31) ^ v10);
      v12 = *(WebCore::ContainerNode **)(v6 + 16 * v11);
      if (v12 != (WebCore::ContainerNode *)this)
      {
        v13 = 1;
        while (v12)
        {
          v11 = ((_DWORD)v11 + v13) & v7;
          v12 = *(WebCore::ContainerNode **)(v6 + 16 * v11);
          ++v13;
          if (v12 == (WebCore::ContainerNode *)this)
            goto LABEL_11;
        }
        v11 = *(unsigned int *)(v6 - 4);
      }
LABEL_11:
      if (v11 != *(_DWORD *)(v6 - 4))
      {
        *(_QWORD *)(v6 + 16 * v11) = -1;
        v40 = (uint64_t *)(v5 + 632);
        ++*(_DWORD *)(*(_QWORD *)(v5 + 632) - 16);
        v41 = *(_QWORD *)(v5 + 632);
        if (v41)
          v42 = *(_DWORD *)(v41 - 12) - 1;
        else
          v42 = -1;
        *(_DWORD *)(v41 - 12) = v42;
        v43 = *v40;
        if (*v40)
        {
          v44 = 6 * *(_DWORD *)(v43 - 12);
          v45 = *(_DWORD *)(v43 - 4);
          if (v44 < v45 && v45 >= 9)
            WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::rehash(v40, v45 >> 1, 0);
        }
        v47 = *(_QWORD *)(v5 + 528);
        if (*(unsigned __int8 *)(v5 + 3362) | *(unsigned __int8 *)(v5 + 3405))
        {
          i = v5;
          if (v47)
          {
            v74 = *(_QWORD *)(v47 + 8);
            i = v5;
            if (v74)
            {
              v75 = *(_QWORD *)(v74 + 120);
              i = v5;
              if (v75)
              {
                v76 = *(_QWORD *)(v75 + 8);
                for (i = v5; v76; v76 = *(_QWORD *)(v79 + 8))
                {
                  i = *(_QWORD *)(*(_QWORD *)(v76 + 40) + 8);
                  v77 = *(_QWORD *)(i + 528);
                  if (!v77)
                    break;
                  v78 = *(_QWORD *)(v77 + 8);
                  if (!v78)
                    break;
                  v79 = *(_QWORD *)(v78 + 120);
                  if (!v79)
                    break;
                }
              }
            }
          }
        }
        else
        {
          i = v5;
          if (v47)
          {
            v49 = *(_QWORD *)(v47 + 8);
            i = v5;
            if (v49)
            {
              v50 = *(_QWORD *)(*(_QWORD *)(v49 + 128) + 8);
              v51 = v50 && *(_BYTE *)(v50 + 144) == 0;
              i = v5;
              if (v51)
              {
                v52 = *(_QWORD *)(v50 + 296);
                i = v5;
                if (v52)
                  i = v52;
              }
            }
          }
        }
        if (!*(_BYTE *)(i + 672))
        {
          *(_BYTE *)(i + 672) = 1;
          v53 = *(_QWORD *)(i + 528);
          if (v53)
          {
            v54 = *(_QWORD *)(v53 + 8);
            if (v54)
            {
              v55 = *(_QWORD *)(v54 + 24);
              if (v55)
              {
                v56 = *(_QWORD *)(v54 + 288);
                v57 = *(_QWORD *)(v55 + 8);
                if (v57 && v56 != 0)
                {
                  v59 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(v55 + 8));
                  if (v59)
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v59 + 88))(v59, v56);
                  else
                    WebCore::Page::scheduleRenderingUpdate(v57, 0x2000);
                }
              }
            }
          }
        }
      }
    }
    if (WebCore::Document::hasEverCreatedAnAXObjectCache)
    {
      v81 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow((WebCore::Document *)v5);
      if (v81)
      {
        v82 = v81;
        ++*((_DWORD *)v81 + 2);
        WebCore::AXObjectCache::remove(v81, (WebCore::Node *)this);
        v83 = *((_DWORD *)v82 + 2);
        if (!v83)
        {
          __break(0xC471u);
          return;
        }
        *((_DWORD *)v82 + 2) = v83 - 1;
      }
    }
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  if ((*(_WORD *)(this + 78) & 0x3FF) != 0)
  {
    v80 = *(_QWORD *)(this + 80);
    if (v80)
    {
      *(_DWORD *)(v80 + 24) += 2;
      v84 = v80;
      do
      {
        WebCore::Node::updateAncestorConnectedSubframeCountForRemoval(v80);
        WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=(&v84, *(_QWORD *)(v84 + 56));
        v80 = v84;
      }
      while (v84);
    }
  }
  v14 = WebCore::ScriptDisallowedScope::s_count++;
  v15 = *(_QWORD *)(this + 80);
  if (v15)
  {
    *(_DWORD *)(v15 + 24) += 2;
    do
    {
      v16 = v15;
      v15 = *(_QWORD *)(v15 + 56);
      if (v15)
      {
        *(_DWORD *)(v15 + 24) += 2;
        v18 = (_DWORD *)(v16 + 24);
        v17 = *(_DWORD *)(v16 + 24);
        *(_QWORD *)(v16 + 56) = 0;
        *(_QWORD *)(v16 + 32) = 0;
        *(_DWORD *)(v16 + 24) = v17 & 0xFFFFFFFE;
        *(_QWORD *)(v15 + 48) = (unint64_t)*(unsigned __int16 *)(v15 + 54) << 48;
      }
      else
      {
        v18 = (_DWORD *)(v16 + 24);
        v60 = *(_DWORD *)(v16 + 24);
        *(_QWORD *)(v16 + 56) = 0;
        *(_QWORD *)(v16 + 32) = 0;
        *(_DWORD *)(v16 + 24) = v60 & 0xFFFFFFFE;
      }
      *(_QWORD *)(this + 80) = v15;
      v19 = *(_QWORD *)(*(_QWORD *)(this + 40) + 8);
      v20 = *(_DWORD *)(v19 + 24) + 2;
      *(_DWORD *)(v19 + 24) = v20;
      a2 = *(void **)(v16 + 40);
      if (a2 != (void *)(v19 + 96))
      {
        WebCore::Node::moveTreeToNewScope(v16, (WebCore::Node *)a2, (WebCore::TreeScope *)(v19 + 96), a4);
        v20 = *(_DWORD *)(v19 + 24);
      }
      v21 = v20 - 2;
      if (v21)
      {
        *(_DWORD *)(v19 + 24) = v21;
      }
      else if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v19, a2);
      }
      v22 = *(_QWORD *)(v16 + 16);
      if ((v22 & 0x18000000000000) != 0)
      {
        v36 = (*(_BYTE *)(this + 22) & 0x18) == 0;
        if ((v22 & 0x8000000000000) != 0)
          WebCore::notifyNodeRemovedFromDocument(this, v36, v16);
        else
          WebCore::notifyNodeRemovedFromTree(this, v36, v16);
      }
      if (*v18 == 2)
      {
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v16, a2);
      }
      else
      {
        *v18 -= 2;
      }
    }
    while (v15);
    v14 = WebCore::ScriptDisallowedScope::s_count - 1;
  }
  *(_QWORD *)(this + 88) = 0;
  WebCore::ScriptDisallowedScope::s_count = v14;
  *(_QWORD *)this = off_1E33A6278;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v61 = *(_QWORD *)(*(_QWORD *)(this + 40) + 8);
    v62 = *(_QWORD *)(v61 + 528);
    if (v62)
    {
      v63 = *(_QWORD *)(v62 + 8);
      if (v63)
      {
        v64 = *(_QWORD *)(v63 + 24);
        if (v64)
        {
          v65 = *(_QWORD *)(v64 + 8);
          if (v65)
            goto LABEL_97;
        }
      }
    }
    v69 = *(_QWORD *)(v61 + 2632);
    if (v69)
    {
      v70 = *(_QWORD *)(v69 + 8);
      if (v70)
      {
        v71 = *(_QWORD *)(v70 + 528);
        if (v71)
        {
          v72 = *(_QWORD *)(v71 + 8);
          if (v72)
          {
            v73 = *(_QWORD *)(v72 + 24);
            if (v73)
            {
              v65 = *(_QWORD *)(v73 + 8);
              if (v65)
              {
LABEL_97:
                v66 = *(_QWORD *)(*(_QWORD *)(v65 + 80) + 8);
                v67 = *(uint64_t **)(v66 + 152);
                if (v67)
                {
                  v84 = this;
                  WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>(v67 + 21, (WTF::StringImpl *)&v84);
                  WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>(v67 + 22, (WTF::StringImpl *)&v84);
                  WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>(v67 + 23, (WTF::StringImpl *)&v84);
                }
                v68 = *(WebCore::InspectorDOMAgent **)(v66 + 40);
                if (v68)
                  WebCore::InspectorDOMAgent::willDestroyDOMNode(v68, (WebCore::Node *)this);
              }
            }
          }
        }
      }
    }
  }
  v24 = *(_QWORD *)(*(_QWORD *)(this + 40) + 8);
  *(_QWORD *)(this + 40) = 0;
  v25 = *(_DWORD *)(v24 + 3324) - 1;
  *(_DWORD *)(v24 + 3324) = v25;
  if (!v25 && *(_DWORD *)(v24 + 24) <= 1u && (*(_WORD *)(v24 + 30) & 0x400) == 0)
  {
    *(_WORD *)(v24 + 30) |= 0x400u;
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 72))(v24);
  }
  v26 = *(_QWORD *)(this + 72);
  v27 = (WebCore::ElementRareData *)(v26 & 0xFFFFFFFFFFFFLL);
  if ((v26 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(_BYTE *)((v26 & 0xFFFFFFFFFFFFLL) + 0x18))
      WebCore::ElementRareData::~ElementRareData(v27, a2);
    else
      std::__destroy_at[abi:sn180100]<WebCore::NodeRareData,0>((uint64_t)v27, a2);
    WTF::fastFree(v27, v35);
    v26 = *(_QWORD *)(this + 72);
  }
  *(_QWORD *)(this + 72) = v26 & 0xFFFF000000000000;
  *(_QWORD *)this = &unk_1E33A4FC0;
  v28 = *(_QWORD *)(this + 16);
  if ((v28 & 0x1000000000000) != 0)
  {
    v37 = v28 & 0xFFFFFFFFFFFFLL;
    if (*(_DWORD *)((v28 & 0xFFFFFFFFFFFFLL) + 0x18))
    {
      v38 = *(unsigned int *)((v28 & 0xFFFFFFFFFFFFLL) + 0x1C);
      if ((_DWORD)v38)
      {
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v37 + 16), (WTF::StringImpl *)(*(_QWORD *)(v37 + 16) + 32 * v38));
        *(_DWORD *)(v37 + 28) = 0;
      }
      v39 = *(WTF **)(v37 + 16);
      if (v39)
      {
        *(_QWORD *)(v37 + 16) = 0;
        *(_DWORD *)(v37 + 24) = 0;
        WTF::fastFree(v39, a2);
      }
    }
  }
  v29 = *(_QWORD *)(this + 16) & 0xFFFFFFFFFFFFLL;
  if (v29)
  {
    *(_QWORD *)((*(_QWORD *)(this + 16) & 0xFFFFFFFFFFFFLL) + 8) = 0;
    do
    {
      v31 = __ldaxr((unsigned int *)v29);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, (unsigned int *)v29));
    if (!v32)
    {
      atomic_store(1u, (unsigned int *)v29);
      v33 = *(unsigned int *)(v29 + 28);
      if ((_DWORD)v33)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v29 + 16), (WTF::StringImpl *)(*(_QWORD *)(v29 + 16) + 32 * v33));
      v34 = *(WTF **)(v29 + 16);
      if (v34)
      {
        *(_QWORD *)(v29 + 16) = 0;
        *(_DWORD *)(v29 + 24) = 0;
        WTF::fastFree(v34, a2);
      }
      WTF::fastFree((WTF *)v29, a2);
    }
  }
  v30 = *(_QWORD *)(this + 8);
  if (v30)
  {
    *(_QWORD *)(v30 + 8) = 3;
    *(_QWORD *)(this + 8) = 0;
  }
}

void WebCore::Text::~Text(WebCore::Text *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::CharacterData::~CharacterData((uint64_t)this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::CharacterData::~CharacterData(uint64_t this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WebCore::CharacterData *v10;
  int v11;
  WTF::StringImpl *v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  WebCore::ElementRareData *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  WebCore::InspectorDOMAgent *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WebCore::AXObjectCache *v68;
  WebCore::AXObjectCache *v69;
  int v70;
  uint64_t v71;

  *(_QWORD *)this = off_1E33A0BD8;
  v3 = *(_QWORD *)(*(_QWORD *)(this + 40) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  if ((*(_BYTE *)(this + 22) & 1) != 0)
  {
    WebCore::Document::didRemoveWheelEventHandler(v3, (WebCore::Node *)this, 1);
    WebCore::Document::removeTouchEventListener(v3, this, 1);
    WebCore::Document::didRemoveTouchEventHandler((WebCore::Document *)v3, this, 1);
  }
  v4 = *(_QWORD *)(v3 + 632);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WebCore::CharacterData **)(v4 + 16 * v9);
    if (v10 != (WebCore::CharacterData *)this)
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(WebCore::CharacterData **)(v4 + 16 * v9);
        ++v11;
        if (v10 == (WebCore::CharacterData *)this)
          goto LABEL_10;
      }
      v9 = *(unsigned int *)(v4 - 4);
    }
LABEL_10:
    if (v9 != *(_DWORD *)(v4 - 4))
    {
      *(_QWORD *)(v4 + 16 * v9) = -1;
      v29 = (uint64_t *)(v3 + 632);
      ++*(_DWORD *)(*(_QWORD *)(v3 + 632) - 16);
      v30 = *(_QWORD *)(v3 + 632);
      if (v30)
        v31 = *(_DWORD *)(v30 - 12) - 1;
      else
        v31 = -1;
      *(_DWORD *)(v30 - 12) = v31;
      v32 = *v29;
      if (*v29)
      {
        v33 = 6 * *(_DWORD *)(v32 - 12);
        v34 = *(_DWORD *)(v32 - 4);
        if (v33 < v34 && v34 >= 9)
          WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::rehash(v29, v34 >> 1, 0);
      }
      v36 = *(_QWORD *)(v3 + 528);
      if (*(unsigned __int8 *)(v3 + 3362) | *(unsigned __int8 *)(v3 + 3405))
      {
        i = v3;
        if (v36)
        {
          v62 = *(_QWORD *)(v36 + 8);
          i = v3;
          if (v62)
          {
            v63 = *(_QWORD *)(v62 + 120);
            i = v3;
            if (v63)
            {
              v64 = *(_QWORD *)(v63 + 8);
              for (i = v3; v64; v64 = *(_QWORD *)(v67 + 8))
              {
                i = *(_QWORD *)(*(_QWORD *)(v64 + 40) + 8);
                v65 = *(_QWORD *)(i + 528);
                if (!v65)
                  break;
                v66 = *(_QWORD *)(v65 + 8);
                if (!v66)
                  break;
                v67 = *(_QWORD *)(v66 + 120);
                if (!v67)
                  break;
              }
            }
          }
        }
      }
      else
      {
        i = v3;
        if (v36)
        {
          v38 = *(_QWORD *)(v36 + 8);
          i = v3;
          if (v38)
          {
            v39 = *(_QWORD *)(*(_QWORD *)(v38 + 128) + 8);
            v40 = v39 && *(_BYTE *)(v39 + 144) == 0;
            i = v3;
            if (v40)
            {
              v41 = *(_QWORD *)(v39 + 296);
              i = v3;
              if (v41)
                i = v41;
            }
          }
        }
      }
      if (!*(_BYTE *)(i + 672))
      {
        *(_BYTE *)(i + 672) = 1;
        v42 = *(_QWORD *)(i + 528);
        if (v42)
        {
          v43 = *(_QWORD *)(v42 + 8);
          if (v43)
          {
            v44 = *(_QWORD *)(v43 + 24);
            if (v44)
            {
              v45 = *(_QWORD *)(v43 + 288);
              v46 = *(_QWORD *)(v44 + 8);
              if (v46 && v45 != 0)
              {
                v48 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(v44 + 8));
                if (v48)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 88))(v48, v45);
                else
                  WebCore::Page::scheduleRenderingUpdate(v46, 0x2000);
              }
            }
          }
        }
      }
    }
  }
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v68 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow((WebCore::Document *)v3);
    if (v68)
    {
      v69 = v68;
      ++*((_DWORD *)v68 + 2);
      WebCore::AXObjectCache::remove(v68, (WebCore::Node *)this);
      v70 = *((_DWORD *)v69 + 2);
      if (!v70)
      {
        __break(0xC471u);
        return;
      }
      *((_DWORD *)v69 + 2) = v70 - 1;
    }
  }
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  v12 = *(WTF::StringImpl **)(this + 80);
  *(_QWORD *)(this + 80) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  *(_QWORD *)this = off_1E33A6278;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v49 = *(_QWORD *)(*(_QWORD *)(this + 40) + 8);
    v50 = *(_QWORD *)(v49 + 528);
    if (v50)
    {
      v51 = *(_QWORD *)(v50 + 8);
      if (v51)
      {
        v52 = *(_QWORD *)(v51 + 24);
        if (v52)
        {
          v53 = *(_QWORD *)(v52 + 8);
          if (v53)
            goto LABEL_79;
        }
      }
    }
    v57 = *(_QWORD *)(v49 + 2632);
    if (v57)
    {
      v58 = *(_QWORD *)(v57 + 8);
      if (v58)
      {
        v59 = *(_QWORD *)(v58 + 528);
        if (v59)
        {
          v60 = *(_QWORD *)(v59 + 8);
          if (v60)
          {
            v61 = *(_QWORD *)(v60 + 24);
            if (v61)
            {
              v53 = *(_QWORD *)(v61 + 8);
              if (v53)
              {
LABEL_79:
                v54 = *(_QWORD *)(*(_QWORD *)(v53 + 80) + 8);
                v55 = *(uint64_t **)(v54 + 152);
                if (v55)
                {
                  v71 = this;
                  WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>(v55 + 21, (WTF::StringImpl *)&v71);
                  WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>(v55 + 22, (WTF::StringImpl *)&v71);
                  WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>(v55 + 23, (WTF::StringImpl *)&v71);
                }
                v56 = *(WebCore::InspectorDOMAgent **)(v54 + 40);
                if (v56)
                  WebCore::InspectorDOMAgent::willDestroyDOMNode(v56, (WebCore::Node *)this);
              }
            }
          }
        }
      }
    }
  }
  v14 = *(_QWORD *)(*(_QWORD *)(this + 40) + 8);
  *(_QWORD *)(this + 40) = 0;
  v15 = *(_DWORD *)(v14 + 3324) - 1;
  *(_DWORD *)(v14 + 3324) = v15;
  if (!v15 && *(_DWORD *)(v14 + 24) <= 1u && (*(_WORD *)(v14 + 30) & 0x400) == 0)
  {
    *(_WORD *)(v14 + 30) |= 0x400u;
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 72))(v14);
  }
  v16 = *(_QWORD *)(this + 72);
  v17 = (WebCore::ElementRareData *)(v16 & 0xFFFFFFFFFFFFLL);
  if ((v16 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(_BYTE *)((v16 & 0xFFFFFFFFFFFFLL) + 0x18))
      WebCore::ElementRareData::~ElementRareData(v17, a2);
    else
      std::__destroy_at[abi:sn180100]<WebCore::NodeRareData,0>((uint64_t)v17, a2);
    WTF::fastFree(v17, v25);
    v16 = *(_QWORD *)(this + 72);
  }
  *(_QWORD *)(this + 72) = v16 & 0xFFFF000000000000;
  *(_QWORD *)this = &unk_1E33A4FC0;
  v18 = *(_QWORD *)(this + 16);
  if ((v18 & 0x1000000000000) != 0)
  {
    v26 = v18 & 0xFFFFFFFFFFFFLL;
    if (*(_DWORD *)((v18 & 0xFFFFFFFFFFFFLL) + 0x18))
    {
      v27 = *(unsigned int *)((v18 & 0xFFFFFFFFFFFFLL) + 0x1C);
      if ((_DWORD)v27)
      {
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v26 + 16), (WTF::StringImpl *)(*(_QWORD *)(v26 + 16) + 32 * v27));
        *(_DWORD *)(v26 + 28) = 0;
      }
      v28 = *(WTF **)(v26 + 16);
      if (v28)
      {
        *(_QWORD *)(v26 + 16) = 0;
        *(_DWORD *)(v26 + 24) = 0;
        WTF::fastFree(v28, a2);
      }
    }
  }
  v19 = *(_QWORD *)(this + 16) & 0xFFFFFFFFFFFFLL;
  if (v19)
  {
    *(_QWORD *)((*(_QWORD *)(this + 16) & 0xFFFFFFFFFFFFLL) + 8) = 0;
    do
    {
      v21 = __ldaxr((unsigned int *)v19);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, (unsigned int *)v19));
    if (!v22)
    {
      atomic_store(1u, (unsigned int *)v19);
      v23 = *(unsigned int *)(v19 + 28);
      if ((_DWORD)v23)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v19 + 16), (WTF::StringImpl *)(*(_QWORD *)(v19 + 16) + 32 * v23));
      v24 = *(WTF **)(v19 + 16);
      if (v24)
      {
        *(_QWORD *)(v19 + 16) = 0;
        *(_DWORD *)(v19 + 24) = 0;
        WTF::fastFree(v24, a2);
      }
      WTF::fastFree((WTF *)v19, a2);
    }
  }
  v20 = *(_QWORD *)(this + 8);
  if (v20)
  {
    *(_QWORD *)(v20 + 8) = 3;
    *(_QWORD *)(this + 8) = 0;
  }
}

void WebCore::ScriptElement::~ScriptElement(WebCore::ScriptElement *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WebCore::UserGestureToken *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)this = off_1E33A7350;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebCore::UserGestureToken *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v4, a2);
      WTF::fastFree(v13, v14);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr((unsigned int *)v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v8));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v8);
      v11 = *(unsigned int *)(v8 + 28);
      if ((_DWORD)v11)
      {
        v16 = v8;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v11));
        v8 = v16;
      }
      v12 = *(WTF **)(v8 + 16);
      if (v12)
      {
        *(_QWORD *)(v8 + 16) = 0;
        *(_DWORD *)(v8 + 24) = 0;
        v15 = v8;
        WTF::fastFree(v12, a2);
        v8 = v15;
      }
      WTF::fastFree((WTF *)v8, a2);
    }
  }
}

uint64_t WebCore::ElementData::destroy(WebCore::ElementData *this, WTF::StringImpl *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  WebCore::ImmutableStyleProperties *v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WebCore::MutableStyleProperties *v16;
  unint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  WTF::StringImpl **v21;
  WTF *v22;
  void *v23;
  WTF *v24;
  void *v25;
  WTF *v26;
  void *v27;

  v3 = *((unsigned int *)this + 1);
  if (this && (v3 & 1) != 0)
  {
    v4 = *((unsigned int *)this + 13);
    if ((_DWORD)v4)
    {
      v5 = 16 * v4;
      v6 = (WTF::StringImpl **)(*((_QWORD *)this + 5) + 8);
      do
      {
        v7 = *v6;
        *v6 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, a2);
          else
            *(_DWORD *)v7 -= 2;
        }
        v8 = (WTF::StringImpl **)*(v6 - 1);
        *(v6 - 1) = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v8);
            WTF::fastFree(v9, v10);
          }
          else
          {
            --*(_DWORD *)v8;
          }
        }
        v6 += 2;
        v5 -= 16;
      }
      while (v5);
    }
    v11 = (WTF *)*((_QWORD *)this + 5);
    if ((WebCore::ElementData *)((char *)this + 56) != v11 && v11 != 0)
    {
      *((_QWORD *)this + 5) = 0;
      *((_DWORD *)this + 12) = 0;
      WTF::fastFree(v11, a2);
    }
    v13 = (WebCore::ImmutableStyleProperties *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
      {
        WebCore::ImmutableStyleProperties::~ImmutableStyleProperties(v13, a2);
        WTF::fastFree(v26, v27);
      }
      else
      {
        --*(_DWORD *)v13;
      }
    }
  }
  else if (v3 >= 0x20)
  {
    v18 = v3 >> 5;
    v19 = (WTF::StringImpl **)((char *)this + 40);
    do
    {
      v20 = *v19;
      *v19 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, a2);
        else
          *(_DWORD *)v20 -= 2;
      }
      v21 = (WTF::StringImpl **)*(v19 - 1);
      *(v19 - 1) = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v21);
          WTF::fastFree(v22, v23);
        }
        else
        {
          --*(_DWORD *)v21;
        }
      }
      v19 += 2;
      --v18;
    }
    while (v18);
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v15)
  {
    if (*((_DWORD *)v15 + 2) == 1)
      WebCore::SpaceSplitStringData::destroy(v15, a2);
    else
      --*((_DWORD *)v15 + 2);
  }
  v16 = (WebCore::MutableStyleProperties *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
    {
      if ((*((_BYTE *)v16 + 4) & 8) != 0)
        WebCore::MutableStyleProperties::~MutableStyleProperties(v16, a2);
      else
        WebCore::ImmutableStyleProperties::~ImmutableStyleProperties(v16, a2);
      WTF::fastFree(v24, v25);
    }
    else
    {
      --*(_DWORD *)v16;
    }
  }
  return WTF::fastFree(this, a2);
}

void WebCore::ElementRareData::~ElementRareData(WebCore::ElementRareData *this, void *a2)
{
  WebCore::CustomStateSet *v3;
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF *v20;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  unsigned int v32;
  WTF *v33;
  uint64_t v34;
  WTF *v35;
  bmalloc::api *v36;
  uint64_t v37;
  WebCore::FormAssociatedCustomElement *v38;
  WTF *v39;
  void *v40;
  bmalloc::api *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  WTF *v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  WTF *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl **v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF *v65;
  bmalloc::api *v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WebCore::RenderStyle *v70;
  WTF *v71;
  WebCore::RenderStyle *v72;
  WTF *v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WebCore::MutationObserverRegistration **v80;
  uint64_t v81;
  WebCore::MutationObserverRegistration *v82;
  WTF *v83;
  void *v84;
  WTF *v85;
  WTF **v86;
  WTF *v87;
  WTF *v88;
  uint64_t v89;
  WTF *v90;
  WTF *v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  WTF *v95;
  uint64_t v96;
  unsigned int *v97;
  uint64_t v98;
  bmalloc::api *v99;
  void *v100;
  uint64_t v101;
  WTF::StringImpl **v102;
  WTF::StringImpl *v103;
  __int16 v104;
  __int16 v105;
  __int16 v106;
  __int16 v107;
  __int16 v108;
  __int16 v109;
  WebCore::ElementAnimationRareData **v110;
  uint64_t v111;
  WebCore::ElementAnimationRareData *v112;
  WTF *v113;
  void *v114;
  uint64_t v115;
  uint64_t i;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  WTF *v121;
  uint64_t v122;
  WTF *v123;
  uint64_t v124;
  WTF *v125;
  unsigned int **v126;
  unsigned int **v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int **v131;
  uint64_t v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int **v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  WTF::StringImpl ***v142;
  WTF::StringImpl **v143;
  WTF *v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  WTF::StringImpl **v152;
  WTF *v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  char v160;

  v3 = (WebCore::CustomStateSet *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::CustomStateSet::~CustomStateSet(v3, a2);
      bmalloc::api::isoDeallocate(v99, v100);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  v4 = (WTF *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v4)
  {
    v5 = *((_QWORD *)v4 + 2);
    *((_QWORD *)v4 + 2) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr((unsigned int *)v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, (unsigned int *)v5));
      if (!v7)
      {
        atomic_store(1u, (unsigned int *)v5);
        v122 = *(unsigned int *)(v5 + 28);
        if ((_DWORD)v122)
        {
          v155 = v5;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v122));
          v5 = v155;
        }
        v123 = *(WTF **)(v5 + 16);
        if (v123)
        {
          *(_QWORD *)(v5 + 16) = 0;
          *(_DWORD *)(v5 + 24) = 0;
          v146 = v5;
          WTF::fastFree(v123, a2);
          v5 = v146;
        }
        WTF::fastFree((WTF *)v5, a2);
      }
    }
    v8 = *((_QWORD *)v4 + 1);
    *((_QWORD *)v4 + 1) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr((unsigned int *)v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, (unsigned int *)v8));
      if (!v10)
      {
        atomic_store(1u, (unsigned int *)v8);
        v124 = *(unsigned int *)(v8 + 28);
        if ((_DWORD)v124)
        {
          v156 = v8;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v124));
          v8 = v156;
        }
        v125 = *(WTF **)(v8 + 16);
        if (v125)
        {
          *(_QWORD *)(v8 + 16) = 0;
          *(_DWORD *)(v8 + 24) = 0;
          v147 = v8;
          WTF::fastFree(v125, a2);
          v8 = v147;
        }
        WTF::fastFree((WTF *)v8, a2);
      }
    }
    WTF::fastFree(v4, a2);
  }
  v11 = *((_QWORD *)this + 28);
  if (v11)
  {
    v150 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v150)
    {
      v151 = v11 + 8;
      do
      {
        if (*(_QWORD *)(v151 - 8) != -1)
        {
          WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v151, a2);
          v152 = *(WTF::StringImpl ***)(v151 - 8);
          *(_QWORD *)(v151 - 8) = 0;
          if (v152)
          {
            if (*(_DWORD *)v152 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v152);
              WTF::fastFree(v153, v154);
            }
            else
            {
              --*(_DWORD *)v152;
            }
          }
        }
        v151 += 24;
        --v150;
      }
      while (v150);
    }
    WTF::fastFree((WTF *)(v11 - 16), a2);
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v13)
  {
    if (*((_DWORD *)v13 + 2) == 1)
      WebCore::SpaceSplitStringData::destroy(v13, (WTF::StringImpl *)a2);
    else
      --*((_DWORD *)v13 + 2);
  }
  v14 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 48);
    *(_QWORD *)(v14 + 48) = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = *(unsigned int *)(v14 + 36);
    if ((_DWORD)v16)
    {
      v17 = *(WTF::StringImpl ***)(v14 + 24);
      v18 = 8 * v16;
      do
      {
        v19 = *v17;
        *v17 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v19 -= 2;
        }
        ++v17;
        v18 -= 8;
      }
      while (v18);
    }
    v20 = *(WTF **)(v14 + 24);
    if ((WTF *)(v14 + 40) != v20 && v20 != 0)
    {
      *(_QWORD *)(v14 + 24) = 0;
      *(_DWORD *)(v14 + 32) = 0;
      WTF::fastFree(v20, a2);
    }
    WTF::fastFree((WTF *)v14, a2);
  }
  v22 = (_DWORD *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v22)
  {
    if (v22[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
    else
      --v22[2];
  }
  v23 = (_DWORD *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v23)
  {
    if (v23[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
    else
      --v23[2];
  }
  v24 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v24)
  {
    if (*(_DWORD *)(v24 + 24) == 2)
    {
      v104 = *(_WORD *)(v24 + 30);
      if ((v104 & 0x400) == 0)
      {
        v105 = *(_WORD *)(v24 + 28);
        if ((v105 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v24);
        }
        else
        {
          if ((v105 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v24 + 160) + 16))(*(_QWORD *)(v24 + 160));
            v104 = *(_WORD *)(v24 + 30);
          }
          *(_WORD *)(v24 + 30) = v104 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 72))(v24);
        }
      }
    }
    else
    {
      *(_DWORD *)(v24 + 24) -= 2;
    }
  }
  v25 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v25)
  {
    if (*(_DWORD *)(v25 + 24) == 2)
    {
      v106 = *(_WORD *)(v25 + 30);
      if ((v106 & 0x400) == 0)
      {
        v107 = *(_WORD *)(v25 + 28);
        if ((v107 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v25);
        }
        else
        {
          if ((v107 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v25 + 160) + 16))(*(_QWORD *)(v25 + 160));
            v106 = *(_WORD *)(v25 + 30);
          }
          *(_WORD *)(v25 + 30) = v106 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 72))(v25);
        }
      }
    }
    else
    {
      *(_DWORD *)(v25 + 24) -= 2;
    }
  }
  v26 = *((unsigned int *)this + 41);
  if ((_DWORD)v26)
  {
    v110 = (WebCore::ElementAnimationRareData **)*((_QWORD *)this + 19);
    v111 = 8 * v26;
    do
    {
      v112 = *v110;
      *v110 = 0;
      if (v112)
      {
        WebCore::ElementAnimationRareData::~ElementAnimationRareData(v112, (WTF::StringImpl *)a2);
        WTF::fastFree(v113, v114);
      }
      ++v110;
      v111 -= 8;
    }
    while (v111);
  }
  v27 = (WTF *)*((_QWORD *)this + 19);
  if (v27)
  {
    *((_QWORD *)this + 19) = 0;
    *((_DWORD *)this + 40) = 0;
    WTF::fastFree(v27, a2);
  }
  v28 = (WTF *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v28)
  {
    v29 = *((unsigned int *)v28 + 3);
    if ((_DWORD)v29)
    {
      v136 = *(unsigned int ***)v28;
      v137 = *(_QWORD *)v28 + 8 * v29;
      do
      {
        v138 = *v136;
        *v136 = 0;
        if (v138)
        {
          do
          {
            v139 = __ldaxr(v138);
            v140 = v139 - 1;
          }
          while (__stlxr(v140, v138));
          if (!v140)
          {
            atomic_store(1u, v138);
            WTF::fastFree((WTF *)v138, a2);
          }
        }
        ++v136;
      }
      while (v136 != (unsigned int **)v137);
    }
    v30 = *(WTF **)v28;
    if (*(_QWORD *)v28)
    {
      *(_QWORD *)v28 = 0;
      *((_DWORD *)v28 + 2) = 0;
      WTF::fastFree(v30, a2);
    }
    WTF::fastFree(v28, a2);
  }
  v31 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v31)
  {
    v32 = *(_DWORD *)(v31 + 28);
    if (v32)
    {
      v126 = *(unsigned int ***)(v31 + 16);
      v127 = &v126[3 * v32];
      do
      {
        v128 = *v126;
        *v126 = 0;
        if (v128)
        {
          do
          {
            v129 = __ldaxr(v128);
            v130 = v129 - 1;
          }
          while (__stlxr(v130, v128));
          if (!v130)
          {
            atomic_store(1u, v128);
            WTF::fastFree((WTF *)v128, a2);
          }
        }
        v126 += 3;
      }
      while (v126 != v127);
    }
    v33 = *(WTF **)(v31 + 16);
    if (v33)
    {
      *(_QWORD *)(v31 + 16) = 0;
      *(_DWORD *)(v31 + 24) = 0;
      WTF::fastFree(v33, a2);
    }
    v34 = *(unsigned int *)(v31 + 12);
    if ((_DWORD)v34)
    {
      v131 = *(unsigned int ***)v31;
      v132 = *(_QWORD *)v31 + 8 * v34;
      do
      {
        v133 = *v131;
        *v131 = 0;
        if (v133)
        {
          do
          {
            v134 = __ldaxr(v133);
            v135 = v134 - 1;
          }
          while (__stlxr(v135, v133));
          if (!v135)
          {
            atomic_store(1u, v133);
            WTF::fastFree((WTF *)v133, a2);
          }
        }
        ++v131;
      }
      while (v131 != (unsigned int **)v132);
    }
    v35 = *(WTF **)v31;
    if (*(_QWORD *)v31)
    {
      *(_QWORD *)v31 = 0;
      *(_DWORD *)(v31 + 8) = 0;
      WTF::fastFree(v35, a2);
    }
    WTF::fastFree((WTF *)v31, a2);
  }
  v36 = (bmalloc::api *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v36)
  {
    v37 = *((_QWORD *)v36 + 1);
    *((_QWORD *)v36 + 1) = 0;
    if (v37)
    {
      do
      {
        v45 = __ldaxr((unsigned int *)v37);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, (unsigned int *)v37));
      if (!v46)
      {
        atomic_store(1u, (unsigned int *)v37);
        v47 = *(unsigned int *)(v37 + 28);
        if ((_DWORD)v47)
        {
          v157 = v37;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v37 + 16), (WTF::StringImpl *)(*(_QWORD *)(v37 + 16) + 32 * v47));
          v37 = v157;
        }
        v48 = *(WTF **)(v37 + 16);
        if (v48)
        {
          *(_QWORD *)(v37 + 16) = 0;
          *(_DWORD *)(v37 + 24) = 0;
          v148 = v37;
          WTF::fastFree(v48, a2);
          v37 = v148;
        }
        WTF::fastFree((WTF *)v37, a2);
      }
    }
    if (*(_QWORD *)v36)
    {
      *(_QWORD *)(*(_QWORD *)v36 + 8) = 3;
      *(_QWORD *)v36 = 0;
    }
    bmalloc::api::isoDeallocate(v36, a2);
  }
  v38 = (WebCore::FormAssociatedCustomElement *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v38)
  {
    WebCore::FormAssociatedCustomElement::~FormAssociatedCustomElement(v38, a2);
    WTF::fastFree(v39, v40);
  }
  v41 = (bmalloc::api *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v41)
  {
    v42 = *((_QWORD *)v41 + 1);
    if (v42)
    {
      v43 = *(unsigned int *)(v42 - 4);
      if ((_DWORD)v43)
      {
        v44 = *((_QWORD *)v41 + 1);
        do
        {
          v49 = *(WTF::StringImpl ***)v44;
          if (*(_QWORD *)v44 != -1)
          {
            v50 = *(unsigned int *)(v44 + 24);
            if ((_DWORD)v50 != -1)
            {
              ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF10AtomStringENS6_7WeakPtrIN7WebCore7ElementENS9_30WeakPtrImplWithEventTargetDataENS6_12RawPtrTraitsISB_EEEENS6_6VectorISE_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v50])(&v159, v44 + 8);
              v49 = *(WTF::StringImpl ***)v44;
            }
            *(_DWORD *)(v44 + 24) = -1;
            *(_QWORD *)v44 = 0;
            if (v49)
            {
              if (*(_DWORD *)v49 == 1)
              {
                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
                WTF::fastFree(v51, v52);
              }
              else
              {
                --*(_DWORD *)v49;
              }
            }
          }
          v44 += 32;
          --v43;
        }
        while (v43);
      }
      WTF::fastFree((WTF *)(v42 - 16), a2);
    }
    if (*(_DWORD *)v41)
    {
      *(_QWORD *)v41 = 0;
      *((_QWORD *)v41 + 1) = 0;
    }
    else
    {
      bmalloc::api::isoDeallocate(v41, a2);
    }
  }
  v53 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v53)
  {
    v54 = *(unsigned int *)(v53 + 28);
    v55 = *(WTF **)(v53 + 16);
    if ((_DWORD)v54)
    {
      v96 = 56 * v54;
      v97 = (unsigned int *)((char *)v55 + 40);
      do
      {
        if (*((_BYTE *)v97 + 8))
        {
          v98 = *v97;
          if ((_DWORD)v98 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS6_13QualifiedNameEN3WTF10AtomStringESC_EEENS7_21FormAssociatedPayloadEbNS_7variantIJDnNSB_6RefPtrINS6_4FileENSB_12RawPtrTraitsISH_EENSB_21DefaultRefDerefTraitsISH_EEEENSB_6StringENSG_INS6_11DOMFormDataENSI_ISO_EENSK_ISO_EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSV_EEEDcOSW_DpOT0____fmatrix[v98])(&v160, v97 - 6);
          *v97 = -1;
        }
        v97 += 14;
        v96 -= 56;
      }
      while (v96);
      v55 = *(WTF **)(v53 + 16);
    }
    if ((WTF *)(v53 + 32) != v55 && v55 != 0)
    {
      *(_QWORD *)(v53 + 16) = 0;
      *(_DWORD *)(v53 + 24) = 0;
      WTF::fastFree(v55, a2);
    }
    v57 = *(_DWORD **)(v53 + 8);
    *(_QWORD *)(v53 + 8) = 0;
    if (v57)
    {
      if (v57[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v57 + 16))(v57);
      else
        --v57[4];
    }
    if (*(_DWORD *)v53)
    {
      *(_OWORD *)(v53 + 64) = 0u;
      *(_OWORD *)(v53 + 80) = 0u;
      *(_OWORD *)(v53 + 32) = 0u;
      *(_OWORD *)(v53 + 48) = 0u;
      *(_OWORD *)v53 = 0u;
      *(_OWORD *)(v53 + 16) = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v53, a2);
    }
  }
  v58 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v58)
  {
    if (*(_DWORD *)(v58 + 24) == 2)
    {
      v108 = *(_WORD *)(v58 + 30);
      if ((v108 & 0x400) == 0)
      {
        v109 = *(_WORD *)(v58 + 28);
        if ((v109 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v58);
        }
        else
        {
          if ((v109 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v58 + 160) + 16))(*(_QWORD *)(v58 + 160));
            v108 = *(_WORD *)(v58 + 30);
          }
          *(_WORD *)(v58 + 30) = v108 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v58 + 72))(v58);
        }
      }
    }
    else
    {
      *(_DWORD *)(v58 + 24) -= 2;
    }
  }
  v59 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v59)
  {
    v60 = *(_QWORD *)(v59 + 48);
    *(_QWORD *)(v59 + 48) = 0;
    if (v60)
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
    v61 = *(unsigned int *)(v59 + 36);
    if ((_DWORD)v61)
    {
      v62 = *(WTF::StringImpl ***)(v59 + 24);
      v63 = 8 * v61;
      do
      {
        v64 = *v62;
        *v62 = 0;
        if (v64)
        {
          if (*(_DWORD *)v64 == 2)
            WTF::StringImpl::destroy(v64, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v64 -= 2;
        }
        ++v62;
        v63 -= 8;
      }
      while (v63);
    }
    v65 = *(WTF **)(v59 + 24);
    if ((WTF *)(v59 + 40) != v65 && v65 != 0)
    {
      *(_QWORD *)(v59 + 24) = 0;
      *(_DWORD *)(v59 + 32) = 0;
      WTF::fastFree(v65, a2);
    }
    WTF::fastFree((WTF *)v59, a2);
  }
  v67 = (bmalloc::api *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v67)
  {
    v68 = *((_QWORD *)v67 + 1);
    *((_QWORD *)v67 + 1) = 0;
    if (v68)
    {
      do
      {
        v92 = __ldaxr((unsigned int *)v68);
        v93 = v92 - 1;
      }
      while (__stlxr(v93, (unsigned int *)v68));
      if (!v93)
      {
        atomic_store(1u, (unsigned int *)v68);
        v94 = *(unsigned int *)(v68 + 28);
        if ((_DWORD)v94)
        {
          v158 = v68;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v68 + 16), (WTF::StringImpl *)(*(_QWORD *)(v68 + 16) + 32 * v94));
          v68 = v158;
        }
        v95 = *(WTF **)(v68 + 16);
        if (v95)
        {
          *(_QWORD *)(v68 + 16) = 0;
          *(_DWORD *)(v68 + 24) = 0;
          v149 = v68;
          WTF::fastFree(v95, a2);
          v68 = v149;
        }
        WTF::fastFree((WTF *)v68, a2);
      }
    }
    if (*(_QWORD *)v67)
    {
      *(_QWORD *)(*(_QWORD *)v67 + 8) = 3;
      *(_QWORD *)v67 = 0;
    }
    bmalloc::api::isoDeallocate(v67, a2);
  }
  v69 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v69 -= 2;
  }
  v70 = (WebCore::RenderStyle *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v70)
  {
    WebCore::RenderStyle::~RenderStyle(v70, a2);
    if (*(_DWORD *)v71)
    {
      *((_OWORD *)v71 + 2) = 0u;
      *((_OWORD *)v71 + 3) = 0u;
      *(_OWORD *)v71 = 0u;
      *((_OWORD *)v71 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v71, a2);
    }
  }
  v72 = (WebCore::RenderStyle *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v72)
  {
    WebCore::RenderStyle::~RenderStyle(v72, a2);
    if (*(_DWORD *)v73)
    {
      *((_OWORD *)v73 + 2) = 0u;
      *((_OWORD *)v73 + 3) = 0u;
      *(_OWORD *)v73 = 0u;
      *((_OWORD *)v73 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v73, a2);
    }
  }
  v74 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v74)
  {
    do
    {
      v75 = __ldaxr((unsigned int *)v74);
      v76 = v75 - 1;
    }
    while (__stlxr(v76, (unsigned int *)v74));
    if (!v76)
    {
      atomic_store(1u, (unsigned int *)v74);
      v120 = *(unsigned int *)(v74 + 28);
      if ((_DWORD)v120)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v74 + 16), (WTF::StringImpl *)(*(_QWORD *)(v74 + 16) + 32 * v120));
      v121 = *(WTF **)(v74 + 16);
      if (v121)
      {
        *(_QWORD *)(v74 + 16) = 0;
        *(_DWORD *)(v74 + 24) = 0;
        WTF::fastFree(v121, a2);
      }
      WTF::fastFree((WTF *)v74, a2);
    }
  }
  v77 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v77)
  {
    v78 = *(_QWORD *)(v77 + 16);
    if (v78)
    {
      v115 = *(unsigned int *)(v78 - 4);
      if ((_DWORD)v115)
      {
        for (i = 0; i != v115; ++i)
        {
          v117 = *(unsigned int **)(v78 + 8 * i);
          if (v117 != (unsigned int *)-1)
          {
            *(_QWORD *)(v78 + 8 * i) = 0;
            if (v117)
            {
              do
              {
                v118 = __ldaxr(v117);
                v119 = v118 - 1;
              }
              while (__stlxr(v119, v117));
              if (!v119)
              {
                atomic_store(1u, v117);
                WTF::fastFree((WTF *)v117, a2);
              }
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v78 - 16), a2);
    }
    v79 = *(unsigned int *)(v77 + 12);
    if ((_DWORD)v79)
    {
      v80 = *(WebCore::MutationObserverRegistration ***)v77;
      v81 = 8 * v79;
      do
      {
        v82 = *v80;
        *v80 = 0;
        if (v82)
        {
          WebCore::MutationObserverRegistration::~MutationObserverRegistration(v82);
          WTF::fastFree(v83, v84);
        }
        ++v80;
        v81 -= 8;
      }
      while (v81);
    }
    v85 = *(WTF **)v77;
    if (*(_QWORD *)v77)
    {
      *(_QWORD *)v77 = 0;
      *(_DWORD *)(v77 + 8) = 0;
      WTF::fastFree(v85, a2);
    }
    WTF::fastFree((WTF *)v77, a2);
  }
  v86 = *(WTF ***)this;
  *(_QWORD *)this = 0;
  if (v86)
  {
    v87 = v86[4];
    if (v87)
    {
      v101 = *((unsigned int *)v87 - 1);
      if ((_DWORD)v101)
      {
        v102 = (WTF::StringImpl **)((char *)v87 + 8);
        do
        {
          if (*((unsigned __int8 *)v102 - 8) != 255)
          {
            v103 = *v102;
            *v102 = 0;
            if (v103)
            {
              if (*(_DWORD *)v103 == 2)
                WTF::StringImpl::destroy(v103, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v103 -= 2;
            }
          }
          v102 += 3;
          --v101;
        }
        while (v101);
      }
      WTF::fastFree((WTF *)((char *)v87 - 16), a2);
    }
    v88 = v86[3];
    if (v88)
    {
      v141 = *((unsigned int *)v88 - 1);
      if ((_DWORD)v141)
      {
        v142 = (WTF::StringImpl ***)v86[3];
        do
        {
          v143 = *v142;
          if (*v142 != (WTF::StringImpl **)-1)
          {
            *v142 = 0;
            if (v143)
            {
              if (*(_DWORD *)v143 == 1)
              {
                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v143);
                WTF::fastFree(v144, v145);
              }
              else
              {
                --*(_DWORD *)v143;
              }
            }
          }
          v142 += 2;
          --v141;
        }
        while (v141);
      }
      WTF::fastFree((WTF *)((char *)v88 - 16), a2);
    }
    v89 = (uint64_t)v86[2];
    if (v89)
      WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::deallocateTable(v89, (WTF::StringImpl *)a2);
    v90 = v86[1];
    v86[1] = 0;
    if (v90)
    {
      if (*(_DWORD *)v90 == 1)
        WTF::fastFree(v90, a2);
      else
        --*(_DWORD *)v90;
    }
    v91 = *v86;
    *v86 = 0;
    if (v91)
    {
      if (*(_DWORD *)v91 == 1)
        WTF::fastFree(v91, a2);
      else
        --*(_DWORD *)v91;
    }
    WTF::fastFree((WTF *)v86, a2);
  }
}

void WebCore::CheckboxInputType::~CheckboxInputType(WebCore::CheckboxInputType *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *(_QWORD *)this = off_1E33D5AC0;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v8 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v8)
      {
        v11 = v5;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v8));
        v5 = v11;
      }
      v9 = *(WTF **)(v5 + 16);
      if (v9)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        v10 = v5;
        WTF::fastFree(v9, a2);
        v5 = v10;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WTF::fastFree(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *(_QWORD *)this = off_1E33D5AC0;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v8 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v8)
      {
        v11 = v5;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v8));
        v5 = v11;
      }
      v9 = *(WTF **)(v5 + 16);
      if (v9)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        v10 = v5;
        WTF::fastFree(v9, a2);
        v5 = v10;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
}

void WebCore::TextInputType::~TextInputType(WebCore::TextInputType *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::TextFieldInputType::~TextFieldInputType(WebCore::TextFieldInputType *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  WTF *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;

  *(_QWORD *)this = off_1E33D9AD0;
  *((_QWORD *)this + 4) = &unk_1E33D9EF8;
  *((_QWORD *)this + 6) = &unk_1E33D9F40;
  *((_QWORD *)this + 7) = &unk_1E33D9F68;
  *((_QWORD *)this + 8) = &unk_1E33D9FA8;
  v3 = *((_QWORD *)this + 14);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  v4 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  v8 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  v9 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  v10 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  v11 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((unsigned int *)this + 27);
  if ((_DWORD)v12)
  {
    v26 = 16 * v12;
    v27 = (WTF::StringImpl **)(*((_QWORD *)this + 12) + 8);
    do
    {
      v28 = *v27;
      *v27 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v28 -= 2;
      }
      v29 = *(v27 - 1);
      *(v27 - 1) = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v29 -= 2;
      }
      v27 += 2;
      v26 -= 16;
    }
    while (v26);
  }
  v13 = (WTF *)*((_QWORD *)this + 12);
  if (v13)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v13, a2);
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v15)
  {
    if (*(_DWORD *)(v15 + 24) == 2)
    {
      if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v15, a2);
    }
    else
    {
      *(_DWORD *)(v15 + 24) -= 2;
    }
  }
  v16 = *((_QWORD *)this + 5);
  if (v16)
  {
    *(_QWORD *)(v16 + 8) = 0;
    v22 = (unsigned int *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v22)
    {
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
  *(_QWORD *)this = off_1E33D5AC0;
  v17 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v17)
  {
    do
    {
      v18 = __ldaxr((unsigned int *)v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, (unsigned int *)v17));
    if (!v19)
    {
      atomic_store(1u, (unsigned int *)v17);
      v20 = *(unsigned int *)(v17 + 28);
      if ((_DWORD)v20)
      {
        v30 = v17;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v17 + 16), (WTF::StringImpl *)(*(_QWORD *)(v17 + 16) + 32 * v20));
        v17 = v30;
      }
      v21 = *(WTF **)(v17 + 16);
      if (v21)
      {
        *(_QWORD *)(v17 + 16) = 0;
        *(_DWORD *)(v17 + 24) = 0;
        v25 = v17;
        WTF::fastFree(v21, a2);
        v17 = v25;
      }
      WTF::fastFree((WTF *)v17, a2);
    }
  }
}

void WebCore::HTMLHeadElement::~HTMLHeadElement(WebCore::HTMLHeadElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::HTMLBodyElement::~HTMLBodyElement(WebCore::HTMLBodyElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::HTMLSpanElement::~HTMLSpanElement(WebCore::HTMLSpanElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::HTMLTableCellElement::~HTMLTableCellElement(WebCore::HTMLTableCellElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

_QWORD *WebCore::TreeScope::radioButtonGroups(WebCore::TreeScope *this)
{
  _QWORD *result;
  _QWORD *v3;
  void *v4;
  WebCore::RadioButtonGroups *v5;
  WTF *v6;
  void *v7;

  result = (_QWORD *)*((_QWORD *)this + 9);
  if (!result)
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    result = WebCore::RadioButtonGroups::RadioButtonGroups(v3);
    v5 = (WebCore::RadioButtonGroups *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = result;
    if (v5)
    {
      WebCore::RadioButtonGroups::~RadioButtonGroups(v5, v4);
      WTF::fastFree(v6, v7);
      return (_QWORD *)*((_QWORD *)this + 9);
    }
  }
  return result;
}

void WebCore::HTMLTableSectionElement::~HTMLTableSectionElement(WebCore::HTMLTableSectionElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::HTMLTableRowElement::~HTMLTableRowElement(WebCore::HTMLTableRowElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::RadioInputType::~RadioInputType(WebCore::RadioInputType *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33D5AC0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33D5AC0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

const WebCore::Element **WebCore::Style::Adjuster::propagateToDocumentElementAndInitialContainingBlock(WebCore::Style::Adjuster *this, WebCore::Style::Update *a2, const WebCore::Document *a3)
{
  uint64_t v5;
  uint64_t v6;
  const WebCore::Element **v7;
  const WebCore::Element **result;
  uint64_t v9;
  BOOL v10;
  int v11;
  BOOL v12;
  const WebCore::Element *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  const WebCore::Element **v18;
  char v19;
  uint64_t v20;
  WebCore::Node *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::LocalFrameView *v26;
  unsigned __int8 *v27;
  WebCore::RenderStyle *v28;
  void *v29;
  void *v30;
  int v31;
  WebCore::RenderStyle *v32;
  WebCore::Node *v33;
  void *v34;
  const WebCore::Element *v35;
  int v36;
  int v37;
  unsigned int v38;
  const WebCore::Element **v39;
  WebCore::Node *v40;
  __int16 v41;
  char v42;
  WebCore::RenderStyle *v43;

  v5 = *((_QWORD *)a2 + 159);
  if ((*(_WORD *)(v5 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24)
    && (v6 = *(_QWORD *)(v5 + 80)) != 0)
  {
    while ((*(_WORD *)(v6 + 28) & 0x10) == 0
         || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
    {
      v6 = *(_QWORD *)(v6 + 56);
      if (!v6)
        goto LABEL_7;
    }
    v7 = (const WebCore::Element **)WebCore::Style::Update::elementStyle(this, (const WebCore::Element *)v6);
    v5 = *((_QWORD *)a2 + 159);
  }
  else
  {
LABEL_7:
    v7 = 0;
  }
  result = (const WebCore::Element **)WebCore::Style::Update::elementStyle(this, (const WebCore::Element *)v5);
  if (result)
  {
    if (!v7
      || ((v9 = *((_QWORD *)v7[1] + 5), (*(_BYTE *)(v9 + 642) & 3u) - 3 <= 0xFFFFFFFD)
        ? (v10 = *(_BYTE *)(v9 + 462) == 0)
        : (v10 = 0),
          v10))
    {
      v13 = result[1];
      v14 = *((_QWORD *)v13 + 5);
      v15 = *(_BYTE *)(v14 + 642) & 3;
      if (v15 == 2)
      {
        v15 = 1;
      }
      else if (v15 != 1)
      {
        v15 = *(unsigned __int8 *)(v14 + 462);
      }
      v12 = v15 == 0;
      v11 = *(_DWORD *)(*((_QWORD *)v13 + 4) + 148);
      if ((v11 & 0x10) != 0)
        goto LABEL_24;
      if (!v15)
      {
        if (v7)
        {
          v12 = 1;
          if ((*(_BYTE *)(*((_QWORD *)v7[1] + 4) + 148) & 0x10) != 0)
          {
            v18 = v7;
            goto LABEL_25;
          }
          v16 = 0;
        }
        else
        {
          v16 = 0;
          v12 = 1;
        }
LABEL_26:
        if ((v11 & 8) != 0)
        {
          v7 = result;
        }
        else
        {
          v19 = !v12;
          if (!v7)
            v19 = 1;
          if ((v19 & 1) != 0 || (*(_BYTE *)(*((_QWORD *)v7[1] + 4) + 148) & 8) == 0)
          {
            v17 = 0;
            goto LABEL_34;
          }
        }
        goto LABEL_33;
      }
    }
    else
    {
      v11 = *(_DWORD *)(*((_QWORD *)result[1] + 4) + 148);
      if ((v11 & 0x10) != 0)
      {
        v12 = 0;
LABEL_24:
        v18 = result;
LABEL_25:
        v16 = (unsigned __int16)*((_DWORD *)v18 + 11) >> 13;
        goto LABEL_26;
      }
    }
    v16 = 0;
    v17 = 0;
    v7 = result;
    if ((v11 & 8) == 0)
    {
LABEL_34:
      v20 = *((_QWORD *)a2 + 243);
      if (v16 != (unsigned __int16)*(_DWORD *)(v20 + 124) >> 13
        || v17 != (*(_BYTE *)(v20 + 123) & 4) >> 2)
      {
        v39 = result;
        WebCore::RenderStyle::clonePtr((WebCore::RenderStyle *)(v20 + 80), &v40);
        v21 = v40;
        v22 = *((_DWORD *)v40 + 11);
        if ((unsigned __int16)v22 >> 13 != v16)
          *((_DWORD *)v40 + 11) = v22 & 0xFFFF1FFF | ((v16 & 7) << 13);
        if (v17)
          v23 = 0x4000000;
        else
          v23 = 0;
        *((_DWORD *)v21 + 10) = *((_DWORD *)v21 + 10) & 0xFBFFFFFF | v23;
        v24 = *((_QWORD *)a2 + 66);
        if (v24 && (v25 = *(_QWORD *)(v24 + 8)) != 0)
          v26 = *(WebCore::LocalFrameView **)(v25 + 288);
        else
          v26 = 0;
        v27 = (unsigned __int8 *)WebCore::LocalFrameView::pagination(v26);
        WebCore::RenderStyle::setColumnStylesFromPaginationMode((uint64_t)v21, *v27);
        v28 = v40;
        v40 = 0;
        v43 = v28;
        WebCore::Style::Update::addInitialContainingBlockUpdate((uint64_t)this, (uint64_t *)&v43);
        std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v43, v29);
        std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v40, v30);
        result = v39;
      }
      if (v16 != (unsigned __int16)*((_DWORD *)result + 11) >> 13
        || v17 != (*((_BYTE *)result + 43) & 4) >> 2)
      {
        v31 = v17;
        v32 = (WebCore::RenderStyle *)result;
        result = WebCore::Style::Update::elementUpdate(this, *((const WebCore::Element **)a2 + 159));
        if (!result)
        {
          v33 = (WebCore::Node *)*((_QWORD *)a2 + 159);
          WebCore::RenderStyle::clonePtr(v32, &v40);
          v41 = 0;
          v42 = 0;
          WebCore::Style::Update::addElement((uint64_t *)this, v33, 0, &v40);
          std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v40, v34);
          result = WebCore::Style::Update::elementUpdate(this, *((const WebCore::Element **)a2 + 159));
        }
        v35 = *result;
        v36 = *((_DWORD *)*result + 11);
        if ((unsigned __int16)v36 >> 13 != v16)
        {
          *((_DWORD *)v35 + 11) = v36 & 0xFFFF1FFF | ((v16 & 7) << 13);
          v35 = *result;
        }
        if (v31)
          v37 = 0x4000000;
        else
          v37 = 0;
        *((_DWORD *)v35 + 10) = *((_DWORD *)v35 + 10) & 0xFBFFFFFF | v37;
        v38 = *((unsigned __int8 *)result + 8);
        if (v38 <= 3)
          LOBYTE(v38) = 3;
        *((_BYTE *)result + 8) = v38;
      }
      return result;
    }
LABEL_33:
    v17 = (*((unsigned __int8 *)v7 + 43) >> 2) & 1;
    goto LABEL_34;
  }
  return result;
}

uint64_t WebCore::Style::Update::elementStyle(WebCore::Style::Update *this, const WebCore::Element *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  const WebCore::Element **v8;
  const WebCore::Element *v9;
  int v10;
  uint64_t result;

  v2 = *((_QWORD *)this + 8);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = (const WebCore::Element **)(v2 + 24 * v7);
    v9 = *v8;
    if (*v8 != a2)
    {
      v10 = 1;
      while (v9)
      {
        v7 = (v7 + v10) & v3;
        v8 = (const WebCore::Element **)(v2 + 24 * v7);
        v9 = *v8;
        ++v10;
        if (*v8 == a2)
          goto LABEL_8;
      }
      v8 = (const WebCore::Element **)(v2 + 24 * *(unsigned int *)(v2 - 4));
    }
LABEL_8:
    if (v8 != (const WebCore::Element **)(v2 + 24 * *(unsigned int *)(v2 - 4)))
      return (uint64_t)v8[1];
  }
  if ((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    return (*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 80;
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::DeprecatedGlobalSettings::setAVFoundationEnabled(uint64_t this)
{
  int v1;
  uint64_t v2;
  void *v3;

  {
    v1 = WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings;
  }
  else
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    v1 = 1;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  if (v1 != (_DWORD)this)
  {
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = this;
    v2 = WebCore::PlatformStrategies::mediaStrategy((WebCore::PlatformStrategies *)WebCore::s_platformStrategies);
    return WebCore::MediaStrategy::resetMediaEngines(v2, v3);
  }
  return this;
}

BOOL WebCore::RenderIFrame::requiresLayer(WebCore::RenderIFrame *this, WTF::StringImpl *a2)
{
  return (WebCore::RenderBox::requiresLayer(this, a2) & 1) != 0
      || ((*(uint64_t (**)(WebCore::RenderIFrame *))(*(_QWORD *)this + 1696))(this) & 1) != 0
      || (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 151) & 0x38) != 0;
}

unint64_t WebCore::RenderLayerCompositor::attachScrollingNode(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  char v20[24];
  _QWORD v21[2];

  v8 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 8) + 40) + 8)
                                                                                                 + 528)
                                                                                     + 8)
                                                                         + 24)
                                                             + 8));
  if (!v8)
    return 0;
  v9 = (unint64_t *)a2[32];
  if (!v9)
    return 0;
  switch((int)a3)
  {
    case 2:
      v10 = v9 + 30;
      v11 = v9 + 31;
      v12 = 8;
      goto LABEL_5;
    case 4:
      v10 = v9 + 32;
      v11 = v9 + 33;
      v12 = 16;
      goto LABEL_5;
    case 6:
      v13 = 0;
      v14 = 0;
      v12 = 4;
      goto LABEL_6;
    case 7:
    case 8:
      v10 = v9 + 26;
      v11 = v9 + 27;
      v12 = 1;
      goto LABEL_5;
    default:
      v10 = v9 + 28;
      v11 = v9 + 29;
      v12 = 2;
LABEL_5:
      v13 = *v10;
      v14 = *v11;
LABEL_6:
      WebCore::RenderLayerCompositor::registerScrollingNodeID(a1, v8, v13, v14, a3, a4);
      v17 = v15;
      v21[0] = v15;
      v21[1] = v16;
      if (!v15)
        return v17;
      if (v12 > 7)
      {
        if (v12 == 8)
        {
          v9[30] = v15;
          v18 = v9 + 31;
        }
        else
        {
          v9[32] = v15;
          v18 = v9 + 33;
        }
      }
      else if (v12 == 1)
      {
        v9[26] = v15;
        v18 = v9 + 27;
      }
      else
      {
        if (v12 != 2)
          goto LABEL_19;
        v9[28] = v15;
        v18 = v9 + 29;
      }
      *v18 = v16;
LABEL_19:
      WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebCore::RenderLayer&>((uint64_t)v20, (uint64_t *)(a1 + 312), v21, a2);
      break;
  }
  return v17;
}

uint64_t WebCore::RenderWidget::requiresAcceleratedCompositing(WebCore::RenderWidget *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD **)(*((_QWORD *)this + 3) + 8);
  if (((*(uint64_t (**)(_QWORD *))(*v2 + 192))(v2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1943A0770);
  }
  v3 = v2[14];
  if (v3
    && (v5 = *(_QWORD *)(v3 + 8)) != 0
    && !*(_BYTE *)(v5 + 144)
    && (v6 = *(_QWORD *)(v5 + 296)) != 0
    && (v7 = *(_QWORD *)(v6 + 1944)) != 0)
  {
    v8 = *(_QWORD *)(v7 + 400);
    return v8 && *(unsigned __int8 *)(v8 + 195) != 0;
  }
  else
  {
    result = *((_QWORD *)this + 29);
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
  }
  return result;
}

_DWORD *WebCore::GraphicsLayer::removeAllChildren(_DWORD *this)
{
  _DWORD *v1;
  void *v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  if (this[49])
  {
    v1 = this;
    this = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 912))(this);
    v3 = (WTF *)*((_QWORD *)v1 + 23);
    v4 = v1[49];
    if ((_DWORD)v4)
    {
      v5 = 8 * v4;
      v6 = 8 * v4;
      v7 = (uint64_t *)*((_QWORD *)v1 + 23);
      do
      {
        v8 = *v7++;
        *(_QWORD *)(v8 + 200) = 0;
        v6 -= 8;
      }
      while (v6);
      if (!v1[48])
        return this;
      do
      {
        this = *(_DWORD **)v3;
        *(_QWORD *)v3 = 0;
        if (this)
        {
          if (this[2] == 1)
            this = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
          else
            --this[2];
        }
        v3 = (WTF *)((char *)v3 + 8);
        v5 -= 8;
      }
      while (v5);
      v1[49] = 0;
      v3 = (WTF *)*((_QWORD *)v1 + 23);
    }
    else if (!v1[48])
    {
      return this;
    }
    if (v3)
    {
      *((_QWORD *)v1 + 23) = 0;
      v1[48] = 0;
      return (_DWORD *)WTF::fastFree(v3, v2);
    }
  }
  return this;
}

void PAL::CryptoDigest::create(int a1@<W0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[8];
  unsigned int v10;
  uint64_t v11;

  v4 = WTF::fastMalloc((WTF *)8);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = 0;
  *(_QWORD *)v4 = v5;
  *a2 = v4;
  *(_DWORD *)v5 = a1;
  PAL::createCryptoDigest((uint64_t)v9, a1);
  v6 = *(_QWORD *)v4;
  v7 = *(unsigned int *)(*(_QWORD *)v4 + 16);
  if ((_DWORD)v7 == -1)
  {
    if (v10 == -1)
      return;
  }
  else if (v10 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v7])(&v11, *(_QWORD *)v4 + 8);
    *(_DWORD *)(v6 + 16) = -1;
    v8 = v10;
    if (v10 == -1)
      return;
LABEL_7:
    ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v8])(&v11, v9);
    return;
  }
  v11 = *(_QWORD *)v4 + 8;
  ((void (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRSI_SM_EEEDcmSO_DpOT0____fdiagonal[v10])(&v11);
  v8 = v10;
  if (v10 != -1)
    goto LABEL_7;
}

uint64_t WebCore::CookieJar::sameSiteInfo(_QWORD *a1, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unsigned __int8 v13;
  WTF::StringImpl *v14;
  unsigned __int8 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  v2 = a1[66];
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    v6 = (unsigned int *)(v3 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 280) + 16) + 1080))(*(_QWORD *)(*(_QWORD *)(v3 + 280) + 16)))
    {
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(a1 + 24), v8);
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v26, (const WebCore::SecurityOriginData *)(v9 + 8));
      v10 = WTF::URL::host((WTF::URL *)(a1 + 126));
      v13 = WebCore::RegistrableDomain::matches(&v26, v10, v11);
      v14 = v26;
      v26 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v12);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = 0;
      v16 = 1;
    }
    else
    {
      v17 = a1[66];
      if (v17
        && (v18 = *(_QWORD *)(v17 + 8)) != 0
        && (v19 = *(_DWORD **)(*(_QWORD *)(v18 + 280) + 88)) != 0
        && *(_QWORD **)(v18 + 296) == a1)
      {
        ++v19[6];
        v20 = WebCore::SameSiteInfo::create((WebCore::ResourceRequest *)(v19 + 218), a2);
        v13 = v20;
        v16 = BYTE2(v20);
        v15 = BYTE1(v20);
        if (v19[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 24))(v19);
        else
          --v19[6];
      }
      else
      {
        v16 = 0;
        v15 = 0;
        v13 = 0;
      }
    }
    do
    {
      v21 = __ldaxr(v6);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v6));
    if (!v22)
    {
      atomic_store(1u, v6);
      v24 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v24 = off_1E31FE290;
      *((_QWORD *)v24 + 1) = v6;
      v26 = v24;
      WTF::ensureOnMainThread();
      v25 = v26;
      v26 = 0;
      if (v25)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v25 + 8))(v25);
    }
  }
  else
  {
    v16 = 0;
    v15 = 0;
    v13 = 0;
  }
  return (v16 << 16) | (v15 << 8) | v13;
}

uint64_t WebCore::SameSiteInfo::create(WebCore::ResourceRequest *this, const WTF::String *a2)
{
  int v2;
  char v4;
  int v5;
  int v6;
  char v8;
  int v9;

  v2 = (int)a2;
  v4 = *((_BYTE *)this + 184);
  if ((v4 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v4 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v4;
  }
  v5 = *((unsigned __int8 *)this + 145);
  v6 = v5 == 1;
  if (v5 != 1 && v2 != 0)
  {
    if ((v4 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      v4 = *((_BYTE *)this + 184) | 1;
      *((_BYTE *)this + 184) = v4;
    }
    v6 = *((_BYTE *)this + 148) & 1;
  }
  if ((v4 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v4 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v4;
  }
  v8 = *((_BYTE *)this + 148);
  if ((v4 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  if (WebCore::isSafeMethod((WebCore::ResourceRequest *)((char *)this + 88), a2))
    v9 = 0x10000;
  else
    v9 = 0;
  return v9 & 0xFFFFFEFF | ((v8 & 1) << 8) | v6;
}

uint64_t WebCore::ResourceRequestBase::isTopSite(WebCore::ResourceRequestBase *this)
{
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  return *((_BYTE *)this + 148) & 1;
}

BOOL WebCore::ResourceRequestBase::isSameSite(WebCore::ResourceRequestBase *this)
{
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  return *((_BYTE *)this + 145) == 1;
}

BOOL WebCore::isSafeMethod(WebCore *this, const WTF::String *a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  int v14;
  unsigned __int8 *v15;
  unint64_t v16;
  int v17;
  int v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  int v31;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3 = *(unsigned int *)(v2 + 4);
    switch((int)v3)
    {
      case 3:
        v5 = *(unsigned __int8 **)(v2 + 8);
        if ((*(_BYTE *)(v2 + 16) & 4) != 0)
        {
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v5) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
            return 0;
          v6 = 0;
          v7 = v5 + 1;
          do
          {
            if (v3 - 1 == v6)
              return 1;
            v8 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[v6]);
            v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aGet[++v6]);
          }
          while (v8 == v9);
          return v6 >= v3;
        }
        if ((*(unsigned __int16 *)v5 | (32 * (*(unsigned __int16 *)v5 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
          return 0;
        v22 = 1u;
        do
        {
          v23 = v22;
          if (v3 == v22)
            break;
          v24 = *(unsigned __int16 *)&v5[2 * v22] | (32 * (*(unsigned __int16 *)&v5[2 * v22] - 65 < 0x1A));
          ++v22;
        }
        while (v24 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aGet[v23]));
        goto LABEL_52;
      case 4:
        v10 = *(unsigned __int8 **)(v2 + 8);
        if ((*(_BYTE *)(v2 + 16) & 4) != 0)
        {
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v10) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 72))
            return 0;
          v6 = 0;
          v11 = v10 + 1;
          do
          {
            if (v3 - 1 == v6)
              return 1;
            v12 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[v6]);
            v13 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aHead_0[++v6]);
          }
          while (v12 == v13);
          return v6 >= v3;
        }
        if ((*(unsigned __int16 *)v10 | (32 * (*(unsigned __int16 *)v10 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 72))
          return 0;
        v25 = 1u;
        do
        {
          v23 = v25;
          if (v3 == v25)
            break;
          v26 = *(unsigned __int16 *)&v10[2 * v25] | (32 * (*(unsigned __int16 *)&v10[2 * v25] - 65 < 0x1A));
          ++v25;
        }
        while (v26 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aHead_0[v23]));
        goto LABEL_52;
      case 5:
        v14 = *(_DWORD *)(v2 + 16);
        v15 = *(unsigned __int8 **)(v2 + 8);
        goto LABEL_25;
      case 7:
        v14 = *(_DWORD *)(v2 + 16);
        v15 = *(unsigned __int8 **)(v2 + 8);
        if ((v14 & 4) != 0)
        {
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v15) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
            return 0;
          v16 = 0;
          do
          {
            if (v3 - 1 == v16)
              return 1;
            v17 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v15[v16 + 1]);
            v18 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aOptions_0[++v16]);
          }
          while (v17 == v18);
          if (v16 >= v3)
            return 1;
        }
        else
        {
          if ((*(unsigned __int16 *)v15 | (32 * (*(unsigned __int16 *)v15 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
            return 0;
          v27 = 1u;
          do
          {
            v28 = v27;
            if (v3 == v27)
              break;
            v29 = *(unsigned __int16 *)&v15[2 * v27] | (32
                                                      * (*(unsigned __int16 *)&v15[2 * v27] - 65 < 0x1A));
            ++v27;
          }
          while (v29 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aOptions_0[v28]));
          if (v28 >= v3)
            return 1;
        }
        if ((_DWORD)v3 != 5)
          return 0;
LABEL_25:
        if ((v14 & 4) != 0)
        {
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v15) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
            return 0;
          v6 = 0;
          v19 = v15 + 1;
          do
          {
            if (v3 - 1 == v6)
              return 1;
            v20 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v19[v6]);
            v21 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aTrace_0[++v6]);
          }
          while (v20 == v21);
          return v6 >= v3;
        }
        if ((*(unsigned __int16 *)v15 | (32 * (*(unsigned __int16 *)v15 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
        {
          v30 = 1u;
          do
          {
            v23 = v30;
            if (v3 == v30)
              break;
            v31 = *(unsigned __int16 *)&v15[2 * v30] | (32
                                                      * (*(unsigned __int16 *)&v15[2 * v30] - 65 < 0x1A));
            ++v30;
          }
          while (v31 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aTrace_0[v23]));
LABEL_52:
          if (v23 >= v3)
            return 1;
        }
        break;
      default:
        return 0;
    }
  }
  return 0;
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _BYTE v5[32];
  int v6;
  char v7;

  v2 = *a1;
  *a1 = 0;
  v5[0] = 0;
  v6 = -1;
  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, _BYTE *, uint64_t))off_1E3394350[v3])(&v7, v5, a2);
    v6 = v3;
  }
  result = WTF::Function<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>)>::operator()(v2, (uint64_t)v5);
  if (v6 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v6])(&v7, v5);
  v6 = -1;
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return result;
}

uint64_t WTF::Function<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[32];
  int v6;
  char v7;

  v5[0] = 0;
  v6 = -1;
  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, _BYTE *, uint64_t))off_1E3394350[v3])(&v7, v5, a2);
    v6 = v3;
  }
  result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v5);
  if (v6 != -1)
    return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v6])(&v7, v5);
  return result;
}

uint64_t WebCore::ScriptController::executeAsynchronousUserAgentScriptInWorld(uint64_t a1, WebCore::DOMWrapperWorld *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  WebCore::DOMWrapperWorld *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  WebCore::JSWindowProxy *v17;
  JSCell *v18;
  JSC::Structure *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  _WORD *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  _WORD *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  _QWORD *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  unsigned int v50;
  _QWORD *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  unsigned int v54;
  _QWORD *v55;
  unsigned int v56;
  _QWORD *v57;
  JSValue v58;
  JSValue v59;
  void *v60;
  WTF::StringImpl *v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unsigned __int16 *v69;
  uint64_t v70;
  unsigned int v71;
  BOOL v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unsigned __int16 *v83;
  uint64_t v84;
  unsigned int v85;
  int v86;
  BOOL v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  unsigned __int8 *v92;
  int v93;
  int v94;
  unsigned __int8 *v95;
  uint64_t v96;
  unsigned int v97;
  JSC::VM *v98;
  uint64_t v99;
  char v100;
  int v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  JSC::VM *v105;
  uint64_t v106;
  int v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  _BYTE *v114;
  uint64_t v115;
  unsigned int v116;
  unsigned __int16 *v118;
  uint64_t v119;
  unsigned int v120;
  char v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int *v124;
  uint64_t v125;
  unint64_t Index;
  int v127;
  int hasExceptionsAfterHandlingTraps;
  const WTF::StringImpl *v129;
  const unsigned __int8 *v130;
  uint64_t v131;
  unsigned __int8 *v132;
  unsigned int v133;
  unsigned __int8 *v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  unsigned int *v139;
  uint64_t v140;
  char v141;
  JSC::JSGlobalObject *v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  _BYTE v147[32];
  int v148;
  _BYTE v149[32];
  int v150;
  _BYTE v151[32];
  int v152;
  JSC::Structure *v153[4];
  int v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  JSC::Structure *v158;
  uint64_t v159;
  _QWORD v160[2];
  uint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  WTF::StringImpl *v165;
  uint64_t v166;
  _BYTE *v167;
  _BYTE v168[64];
  uint64_t v169;
  uint64_t v170;

  v9 = a2;
  v10 = a1;
  v170 = *MEMORY[0x1E0C80C00];
  v11 = *(unsigned __int8 *)(a3 + 56);
  WebCore::ScriptController::executeScriptInWorld((uint64_t)v153, a1, a2, a3);
  v12 = v154;
  if ((_DWORD)v11)
    v13 = v154 == 0;
  else
    v13 = 0;
  if (!v13)
  {
    v151[0] = 0;
    v152 = -1;
    if (v154 == -1)
    {
LABEL_7:
      result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>)>::operator()(a4, (uint64_t)v151);
      if (v152 != -1)
        result = ((uint64_t (*)(WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v152])(&v165, v151);
      v152 = -1;
      goto LABEL_10;
    }
LABEL_6:
    ((void (*)(WTF::StringImpl **, _BYTE *, JSC::Structure **))off_1E3393C08[v12])(&v165, v151, v153);
    v152 = v12;
    goto LABEL_7;
  }
  v15 = 0xFFFE000000000002;
  if (((unint64_t)v153[0] & 0xFFFE000000000002) != 0 || *((unsigned __int8 *)v153[0] + 5) <= 0x16u)
  {
    v12 = 0;
    v151[0] = 0;
    v152 = -1;
    goto LABEL_6;
  }
  v16 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 2) + 41952) + 2424);
  if (v16)
    *(_DWORD *)v16 += 2;
  v17 = WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(v10 + 16) + 112), v9);
  if (!v154)
  {
    v142 = (JSC::JSGlobalObject *)*((_QWORD *)v17 + 2);
    v19 = v153[0];
    v157 = 0xFFFFFFFF00000000;
    LOBYTE(v161) = 0;
    v162 = 0;
    v163 = 0;
    v164 = 0;
    v159 = 0;
    memset(v160, 0, 13);
    v158 = v153[0];
    if (((unint64_t)v153[0] & 0xFFFE000000000002) != 0)
      goto LABEL_358;
    v20 = *((_QWORD *)v142 + 7);
    v21 = *((unsigned __int8 *)v153[0] + 5);
    if (v21 > 0x16)
      goto LABEL_20;
    if (v21 != 2)
    {
LABEL_358:
      v140 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)v153, v142);
      if (!v140)
        goto LABEL_61;
      v19 = (JSC::Structure *)v140;
      v20 = *((_QWORD *)v142 + 7);
LABEL_20:
      v5 = (unint64_t)v19 + 6;
      v7 = (unsigned int *)(v16 >> 4);
      v4 = (uint64_t)v19;
      if ((*((_BYTE *)v19 + 6) & 8) == 0)
      {
        v22 = (uint64_t)v19;
        while (1)
        {
          v23 = *(_DWORD *)v22 & 0xFFFFFFFE;
          v24 = 16 * v23;
          if ((_DWORD)v7)
          {
            if ((v7 & ~*(_DWORD *)(16 * v23 + 0x20)) == 0)
            {
              v25 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v24, (JSC::VM *)v20);
              if (v25)
              {
                v165 = (WTF::StringImpl *)v16;
                v26 = JSC::PropertyTable::get(v25, (uint64_t *)&v165);
                v27 = v26;
                if ((_DWORD)v26 != -1)
                  break;
              }
            }
          }
          if ((*(_BYTE *)v5 & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
            goto LABEL_108;
          v4 = *(_QWORD *)(v24 + 48);
          if (!v4)
            v4 = *(_QWORD *)(v22 + 16);
          if ((v4 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v4 + 5) < 0x17u)
          {
            if (!v16)
              goto LABEL_61;
            v38 = *(_DWORD *)(v16 + 16);
            if ((v38 & 0x20) != 0)
              goto LABEL_61;
            v39 = *(_WORD **)(v16 + 8);
            v40 = *(unsigned int *)(v16 + 4);
            if ((v38 & 4) == 0)
            {
              if ((_DWORD)v40)
              {
                v41 = (unsigned __int16)*v39 - 48;
                if (v41 <= 9 && (v40 < 2 || *v39 != 48))
                {
                  v69 = v39 + 1;
                  v70 = v40 - 1;
                  v11 = 10;
                  while (v70)
                  {
                    if (v41 <= 0x19999999)
                    {
                      v71 = *v69 - 48;
                      if (v71 <= 9)
                      {
                        v72 = __CFADD__(v71, 10 * v41);
                        v41 = v71 + 10 * (_DWORD)v41;
                        ++v69;
                        --v70;
                        if (!v72)
                          continue;
                      }
                    }
                    goto LABEL_62;
                  }
                  goto LABEL_199;
                }
              }
              goto LABEL_61;
            }
            if (!(_DWORD)v40)
              goto LABEL_61;
            v41 = *(unsigned __int8 *)v39 - 48;
            if (v41 > 9 || v40 >= 2 && *(_BYTE *)v39 == 48)
              goto LABEL_61;
            v95 = (unsigned __int8 *)v39 + 1;
            v96 = v40 - 1;
            v11 = 10;
            while (v96)
            {
              if (v41 <= 0x19999999)
              {
                v97 = *v95 - 48;
                if (v97 <= 9)
                {
                  v72 = __CFADD__(v97, 10 * v41);
                  v41 = v97 + 10 * (_DWORD)v41;
                  ++v95;
                  --v96;
                  if (!v72)
                    continue;
                }
              }
              goto LABEL_62;
            }
LABEL_199:
            if ((_DWORD)v41 == -1)
            {
LABEL_61:
              v11 = 10;
              goto LABEL_62;
            }
            v98 = (JSC::VM *)*((_QWORD *)v142 + 7);
            v11 = 10;
            while (2)
            {
              v99 = 16 * (*(_DWORD *)v19 & 0xFFFFFFFE);
              v100 = (*(uint64_t (**)(JSC::Structure *, JSC::JSGlobalObject *, uint64_t, unint64_t *))(16 * *(unsigned int *)(v99 + 0x4C) + 0x70))(v19, v142, v41, &v155);
              if (*((_DWORD *)v98 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v98) & 1) != 0)
                goto LABEL_61;
              if ((v100 & 1) != 0)
                goto LABEL_108;
              v101 = BYTE2(v160[1]);
              if (BYTE2(v160[1]) == 3)
              {
                if (BYTE4(v160[1]))
                  goto LABEL_62;
                v102 = *((unsigned __int8 *)v19 + 5);
                if (v102 != 61)
                  goto LABEL_210;
                goto LABEL_215;
              }
              v102 = *((unsigned __int8 *)v19 + 5);
              if (v102 == 61)
              {
                if (BYTE2(v160[1]) == 1)
                  goto LABEL_62;
              }
              else
              {
LABEL_210:
                if ((v102 - 39) <= 0xA)
                {
                  if (JSC::JSArrayBufferView::length(v19) <= v41)
                    goto LABEL_62;
                  v101 = BYTE2(v160[1]);
                }
              }
              if ((*(_WORD *)(v99 + 12) & 0x800) != 0 && v101 != 3)
              {
                if ((*(_WORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                {
                  v103 = (*(uint64_t (**)(JSC::Structure *, JSC::JSGlobalObject *))(16
                                                                                            * *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C)
                                                                                            + 0xB0))(v19, v142);
                }
                else
                {
                  v103 = *(_QWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x30);
                  if (!v103)
                    v103 = *((_QWORD *)v19 + 2);
                }
                if (*((_DWORD *)v98 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v98) & 1) != 0)
                  goto LABEL_61;
              }
              else
              {
LABEL_215:
                v103 = *(_QWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x30);
                if (!v103)
                  v103 = *((_QWORD *)v19 + 2);
              }
              if ((v103 & 0xFFFE000000000002) != 0)
                goto LABEL_62;
              v19 = (JSC::Structure *)v103;
              if (*(unsigned __int8 *)(v103 + 5) <= 0x16u)
                goto LABEL_62;
              continue;
            }
          }
          v5 = v4 + 6;
          v22 = v4;
          if ((*(_BYTE *)(v4 + 6) & 8) != 0)
            goto LABEL_32;
        }
        v65 = HIDWORD(v26);
        if ((int)v26 > 63)
        {
          v66 = *(_QWORD *)(v22 + 8) - 8;
          v67 = 0x3F00000000 - (v26 << 32);
        }
        else
        {
          v66 = v22 + 16;
          v67 = v26 << 32;
        }
        v68 = *(_QWORD *)(v66 + (v67 >> 29));
        if ((v68 & 0xFFFE000000000002) != 0)
        {
LABEL_106:
          v155 = v68;
          v159 = v22;
          goto LABEL_107;
        }
        v74 = *(unsigned __int8 *)(v68 + 5);
        if (v74 != 6)
        {
          if (v74 != 5)
            goto LABEL_106;
LABEL_126:
          JSC::JSObject::fillGetterPropertySlot();
          goto LABEL_108;
        }
        v75 = *(_DWORD *)(v24 + 16) & 3;
        v76 = *(_QWORD *)(v68 + 16);
        if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v68 & 0xFFFFFFFE) + 0x4C))
        {
          v78 = *(_QWORD *)(v68 + 24);
          v77 = *(_QWORD *)(v68 + 32);
          v155 = *(_QWORD *)(v68 + 8);
          v156 = v76;
          LODWORD(v157) = HIDWORD(v26);
          v159 = v22;
LABEL_133:
          BYTE1(v160[1]) = 3;
          if (v75 != 2)
            LOBYTE(v160[1]) = 1;
          BYTE3(v160[1]) = 1;
          v163 = v78;
          v164 = v77;
          goto LABEL_108;
        }
        v155 = *(_QWORD *)(v68 + 8);
        v156 = v76;
        LODWORD(v157) = HIDWORD(v26);
        v159 = v22;
        goto LABEL_142;
      }
LABEL_32:
      if (!v16 || (v28 = *(_DWORD *)(v16 + 16), (v28 & 0x20) != 0))
      {
LABEL_41:
        v10 = *((_QWORD *)v142 + 7);
        v11 = 10;
        goto LABEL_42;
      }
      v29 = *(_WORD **)(v16 + 8);
      v30 = *(unsigned int *)(v16 + 4);
      if ((v28 & 4) == 0)
      {
        if ((_DWORD)v30 && (v31 = (unsigned __int16)*v29 - 48, v31 <= 9))
        {
          if (v30 < 2 || *v29 != 48)
          {
            v83 = v29 + 1;
            v84 = v30 - 1;
            while (v84)
            {
              if (v31 <= 0x19999999)
              {
                v85 = *v83 - 48;
                if (v85 <= 9)
                {
                  v72 = __CFADD__(v85, 10 * v31);
                  v31 = v85 + 10 * v31;
                  ++v83;
                  --v84;
                  if (!v72)
                    continue;
                }
              }
              goto LABEL_37;
            }
            v87 = v31 == -1;
            v33 = v31 & 0xFFFFFF00;
            v32 = 0x100000000;
            if (v31 == -1)
            {
              v32 = 0;
              LOBYTE(v31) = 0;
            }
            if (v87)
              v33 = 0;
            goto LABEL_39;
          }
          v32 = 0;
        }
        else
        {
LABEL_37:
          v32 = 0;
          LOBYTE(v31) = 0;
        }
        v33 = 0;
LABEL_39:
        v31 = v31;
LABEL_40:
        if ((v32 & 0x100000000) == 0)
          goto LABEL_41;
        v104 = v33 | v31;
        v105 = (JSC::VM *)*((_QWORD *)v142 + 7);
        v11 = 10;
        while (1)
        {
          v106 = 16 * (*(_DWORD *)v19 & 0xFFFFFFFE);
          v107 = (*(uint64_t (**)(JSC::Structure *, JSC::JSGlobalObject *, unint64_t, unint64_t *))(16 * *(unsigned int *)(v106 + 0x4C) + 0x70))(v19, v142, v104, &v155);
          v108 = v107;
          if (*((_DWORD *)v105 + 20))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v105);
            if (((hasExceptionsAfterHandlingTraps | v108) & 1) != 0)
            {
              if ((hasExceptionsAfterHandlingTraps & 1) == 0)
                goto LABEL_108;
              goto LABEL_61;
            }
          }
          else if ((v107 & 1) != 0)
          {
            goto LABEL_108;
          }
          v109 = BYTE2(v160[1]);
          if (BYTE2(v160[1]) == 3)
            break;
          v110 = *((unsigned __int8 *)v19 + 5);
          if (v110 != 61)
            goto LABEL_230;
          if (BYTE2(v160[1]) == 1)
            goto LABEL_62;
LABEL_233:
          if ((*(_WORD *)(v106 + 12) & 0x800) == 0 || v109 == 3)
            goto LABEL_235;
          if ((*(_WORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
          {
            v111 = (*(uint64_t (**)(JSC::Structure *, JSC::JSGlobalObject *))(16
                                                                                      * *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C)
                                                                                      + 0xB0))(v19, v142);
          }
          else
          {
            v111 = *(_QWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x30);
            if (!v111)
              v111 = *((_QWORD *)v19 + 2);
          }
          if (*((_DWORD *)v105 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v105) & 1) != 0)
            goto LABEL_61;
LABEL_237:
          if ((v111 & 0xFFFE000000000002) == 0)
          {
            v19 = (JSC::Structure *)v111;
            if (*(unsigned __int8 *)(v111 + 5) > 0x16u)
              continue;
          }
          goto LABEL_62;
        }
        if (BYTE4(v160[1]))
          goto LABEL_62;
        v110 = *((unsigned __int8 *)v19 + 5);
        if (v110 == 61)
        {
LABEL_235:
          v111 = *(_QWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x30);
          if (!v111)
            v111 = *((_QWORD *)v19 + 2);
          goto LABEL_237;
        }
LABEL_230:
        if ((v110 - 39) <= 0xA)
        {
          if (JSC::JSArrayBufferView::length(v19) <= v104)
            goto LABEL_62;
          v109 = BYTE2(v160[1]);
        }
        goto LABEL_233;
      }
      if ((_DWORD)v30)
      {
        v122 = *(unsigned __int8 *)v29 - 48;
        if (v122 <= 9 && (v30 < 2 || *(_BYTE *)v29 != 48))
        {
          v131 = v30 - 1;
          v132 = (unsigned __int8 *)v29 + 1;
          while (v131)
          {
            if (v122 > 0x19999999)
              goto LABEL_269;
            v133 = *v132 - 48;
            if (v133 > 9)
              goto LABEL_269;
            v31 = 0;
            LOBYTE(v30) = 0;
            v32 = 0;
            v72 = __CFADD__(v133, 10 * v122);
            v122 = v133 + 10 * v122;
            --v131;
            ++v132;
            if (v72)
              goto LABEL_271;
          }
          if (v122 == -1)
            v31 = 0;
          else
            v31 = v122 & 0xFFFFFF00;
          if (v122 == -1)
            LOBYTE(v30) = 0;
          else
            LOBYTE(v30) = v122;
          if (v122 == -1)
            v32 = 0;
          else
            v32 = 0x100000000;
          goto LABEL_271;
        }
LABEL_269:
        v31 = 0;
        LOBYTE(v30) = 0;
      }
      else
      {
        v31 = 0;
      }
      v32 = 0;
LABEL_271:
      v33 = v30;
      goto LABEL_40;
    }
    if (*(_QWORD *)(*(_QWORD *)(v20 + 41952) + 1768) == v16)
    {
      v123 = *((_QWORD *)v153[0] + 1);
      if ((v123 & 1) != 0)
        v124 = (unsigned int *)((char *)v153[0] + 16);
      else
        v124 = (unsigned int *)(v123 + 4);
      v125 = *v124;
      if ((v125 & 0x80000000) != 0)
        Index = COERCE__INT64((double)v125) + 0x2000000000000;
      else
        Index = v125 | 0xFFFE000000000000;
      v127 = 14;
    }
    else
    {
      if (!v16)
        goto LABEL_355;
      v113 = *(_DWORD *)(v16 + 16);
      if ((v113 & 0x20) != 0)
        goto LABEL_355;
      v114 = *(_BYTE **)(v16 + 8);
      v115 = *(unsigned int *)(v16 + 4);
      if ((v113 & 4) != 0)
      {
        if (!(_DWORD)v115)
          goto LABEL_355;
        v116 = *v114 - 48;
        if (v116 > 9)
          goto LABEL_355;
        if (v115 >= 2 && *v114 == 48)
          goto LABEL_355;
        v135 = v114 + 1;
        v136 = v115 - 1;
        while (v136)
        {
          if (v116 > 0x19999999)
            goto LABEL_355;
          v137 = *v135 - 48;
          if (v137 > 9)
            goto LABEL_355;
          v121 = 0;
          v72 = __CFADD__(v137, 10 * v116);
          v116 = v137 + 10 * v116;
          ++v135;
          --v136;
          if (v72)
            goto LABEL_356;
        }
      }
      else
      {
        if (!(_DWORD)v115)
          goto LABEL_355;
        v116 = *(unsigned __int16 *)v114 - 48;
        if (v116 > 9)
          goto LABEL_355;
        if (v115 >= 2 && *(_WORD *)v114 == 48)
          goto LABEL_355;
        v118 = (unsigned __int16 *)(v114 + 2);
        v119 = v115 - 1;
        while (v119)
        {
          if (v116 > 0x19999999)
            goto LABEL_355;
          v120 = *v118 - 48;
          if (v120 > 9)
            goto LABEL_355;
          v121 = 0;
          v72 = __CFADD__(v120, 10 * v116);
          v116 = v120 + 10 * v116;
          ++v118;
          --v119;
          if (v72)
            goto LABEL_356;
        }
      }
      if (v116 == -1
        || ((v138 = *((_QWORD *)v153[0] + 1), (v138 & 1) != 0)
          ? (v139 = (unsigned int *)((char *)v153[0] + 16))
          : (v139 = (unsigned int *)(v138 + 4)),
            *v139 <= v116
         || (Index = JSC::JSString::getIndex(v153[0], v142, v116), *(_DWORD *)(v20 + 80))
         && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v20) & 1) != 0))
      {
LABEL_355:
        v121 = 0;
LABEL_356:
        if (*(_DWORD *)(v20 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v20) & 1) != 0)
          goto LABEL_61;
        if ((v121 & 1) != 0)
          goto LABEL_108;
        goto LABEL_358;
      }
      v127 = 10;
    }
    v155 = Index;
    LODWORD(v157) = v127;
    v159 = 0;
    v121 = 1;
    BYTE1(v160[1]) = 1;
    goto LABEL_356;
  }
  while (2)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_173:
    v141 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, unint64_t *))(16 * *(unsigned int *)(v6 + 76) + 0x68))(v4, v142, v16, &v155);
    if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
      goto LABEL_61;
    if ((v141 & 1) != 0)
      goto LABEL_108;
    if (BYTE2(v160[1]) == 3)
    {
      if (BYTE4(v160[1]))
        goto LABEL_61;
      v89 = *(unsigned __int8 *)(v4 + 5);
      if (v89 == 61)
        goto LABEL_48;
    }
    else
    {
      v89 = *(unsigned __int8 *)(v4 + 5);
      if (v89 == 61)
      {
        if (BYTE2(v160[1]) != 1)
          goto LABEL_48;
        goto LABEL_61;
      }
    }
    if (!v16)
      goto LABEL_48;
    if ((v89 - 50) < 0xFFFFFFF5)
      goto LABEL_48;
    v90 = *(_DWORD *)(v16 + 16);
    if ((v90 & 0x20) != 0)
      goto LABEL_48;
    v91 = *(unsigned int *)(v16 + 4);
    if (!(_DWORD)v91)
      goto LABEL_48;
    v92 = *(unsigned __int8 **)(v16 + 8);
    if ((v90 & 4) != 0)
    {
      v93 = *v92;
      if ((_DWORD)v91 == 1)
      {
LABEL_302:
        if ((v93 - 48) >= 0xA)
          goto LABEL_48;
        goto LABEL_61;
      }
      if (v93 == 45)
      {
        v94 = v92[1];
LABEL_306:
        if ((v94 - 48) >= 0xA)
        {
          if ((_DWORD)v91 != 9 || v94 != 73)
            goto LABEL_48;
        }
        else if ((_DWORD)v91 == 2)
        {
          goto LABEL_61;
        }
LABEL_310:
        v5 = v5 & 0xFFFFFF0000000000 | v91 | ((unint64_t)((v90 >> 2) & 1) << 32);
        JSC::jsToNumber();
        v129 = (const WTF::StringImpl *)WTF::numberToString();
        if ((WTF::equal((WTF *)v16, v129, v130) & 1) == 0)
          goto LABEL_48;
        goto LABEL_61;
      }
    }
    else
    {
      v93 = *(unsigned __int16 *)v92;
      if ((_DWORD)v91 == 1)
        goto LABEL_302;
      if (v93 == 45)
      {
        v94 = *((unsigned __int16 *)v92 + 1);
        goto LABEL_306;
      }
    }
    if ((v93 - 48) < 0xA || (_DWORD)v91 == 8 && v93 == 73 || (_DWORD)v91 == 3 && v93 == 78)
      goto LABEL_310;
    while (1)
    {
LABEL_48:
      if ((*(_WORD *)(v6 + 12) & 0x800) == 0)
      {
        v36 = *(_DWORD *)v4;
LABEL_50:
        v37 = *(_QWORD *)(16 * (v36 & 0xFFFFFFFE) + 0x30);
        if (!v37)
          v37 = *(_QWORD *)(v4 + 16);
        goto LABEL_52;
      }
      v36 = *(_DWORD *)v4;
      if (BYTE2(v160[1]) == 3)
        goto LABEL_50;
      v112 = 16 * (v36 & 0xFFFFFFFE);
      if ((*(_WORD *)(v112 + 12) & 0x800) != 0)
      {
        v37 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v112 + 76) + 0xB0))(v4, v142);
      }
      else
      {
        v37 = *(_QWORD *)(v112 + 48);
        if (!v37)
          v37 = *(_QWORD *)(v4 + 16);
      }
      if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
        goto LABEL_61;
LABEL_52:
      if ((v37 & v15) != 0)
        goto LABEL_62;
      v4 = v37;
      if (*(unsigned __int8 *)(v37 + 5) <= 0x16u)
        goto LABEL_62;
LABEL_42:
      v6 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
      if ((*(_BYTE *)(v4 + 6) & 8) != 0)
        goto LABEL_173;
      if ((_DWORD)v7)
      {
        if ((v7 & ~*(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x20)) == 0)
        {
          v34 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE)), (JSC::VM *)v10);
          if (v34)
          {
            v165 = (WTF::StringImpl *)v16;
            v35 = JSC::PropertyTable::get(v34, (uint64_t *)&v165);
            v27 = v35;
            if ((_DWORD)v35 != -1)
              break;
          }
        }
      }
      if ((*(_BYTE *)(v4 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
        goto LABEL_108;
    }
    v65 = HIDWORD(v35);
    if ((int)v35 > 63)
    {
      v80 = *(_QWORD *)(v4 + 8) - 8;
      v81 = 0x3F00000000 - (v35 << 32);
    }
    else
    {
      v80 = v4 + 16;
      v81 = v35 << 32;
    }
    v82 = *(_QWORD *)(v80 + (v81 >> 29));
    if ((v82 & v15) == 0)
    {
      v86 = *(unsigned __int8 *)(v82 + 5);
      if (v86 != 6)
      {
        if (v86 != 5)
          goto LABEL_148;
        goto LABEL_126;
      }
      v75 = *(_DWORD *)(v6 + 16) & 3;
      v88 = *(_QWORD *)(v82 + 16);
      if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v82 & 0xFFFFFFFE) + 0x4C))
      {
        v78 = *(_QWORD *)(v82 + 24);
        v77 = *(_QWORD *)(v82 + 32);
        v155 = *(_QWORD *)(v82 + 8);
        v156 = v88;
        LODWORD(v157) = HIDWORD(v35);
        v159 = v4;
        goto LABEL_133;
      }
      v155 = *(_QWORD *)(v82 + 8);
      v156 = v88;
      LODWORD(v157) = HIDWORD(v35);
      v159 = v4;
LABEL_142:
      BYTE1(v160[1]) = 3;
      if (v75 != 2)
        LOBYTE(v160[1]) = 1;
      goto LABEL_108;
    }
LABEL_148:
    v155 = v82;
    v159 = v4;
LABEL_107:
    v157 = __PAIR64__(v27, v65);
    LOWORD(v160[1]) = 257;
LABEL_108:
    if (BYTE1(v160[1]) == 1)
    {
      v11 = v155;
    }
    else
    {
      if (BYTE1(v160[1]) == 2)
        v79 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v155, v142);
      else
        v79 = JSC::PropertySlot::customGetter();
      v11 = v79;
    }
LABEL_62:
    if (v162)
    {
      v42 = *(_DWORD *)(v161 + 4);
      if (!v42)
      {
        __break(0xC471u);
        JUMPOUT(0x1943A1B14);
      }
      *(_DWORD *)(v161 + 4) = v42 - 1;
    }
    if ((v11 & v15) != 0 || *(unsigned __int8 *)(v11 + 5) <= 0x16u)
    {
      v149[0] = 0;
      v150 = -1;
      v64 = v154;
      if (v154 != -1)
      {
        ((void (*)(WTF::StringImpl **, _BYTE *, JSC::Structure **))off_1E3393C08[v154])(&v165, v149, v153);
        v150 = v64;
      }
      result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>)>::operator()(a4, (uint64_t)v149);
      if (v150 != -1)
        result = ((uint64_t (*)(WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v150])(&v165, v149);
      v150 = -1;
    }
    else
    {
      JSC::getCallData(v11, v18, &v155);
      if ((_BYTE)v155)
      {
        v43 = *a4;
        *a4 = 0;
        v44 = WTF::fastMalloc((WTF *)0x18);
        *(_DWORD *)(v44 + 8) = 1;
        v45 = (unsigned int *)(v44 + 8);
        *(_QWORD *)v44 = &off_1E3394370;
        *(_QWORD *)(v44 + 16) = v43;
        v165 = 0;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 + 1, v45));
        v47 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v47 = &off_1E3394398;
        v47[1] = v44;
        v143 = v47;
        v10 = (uint64_t)v142;
        a4 = (uint64_t *)JSC::JSNativeStdFunction::create();
        if (v143)
          (*(void (**)(_QWORD *))(*v143 + 8))(v143);
        v49 = v165;
        v165 = 0;
        if (v49)
        {
          if (*(_DWORD *)v49 == 2)
            WTF::StringImpl::destroy(v49, v48);
          else
            *(_DWORD *)v49 -= 2;
        }
        v165 = 0;
        do
          v50 = __ldaxr(v45);
        while (__stlxr(v50 + 1, v45));
        v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v51 = &off_1E33943C0;
        v51[1] = v44;
        v144 = v51;
        v5 = JSC::JSNativeStdFunction::create();
        if (v144)
          (*(void (**)(_QWORD *))(*v144 + 8))(v144);
        v53 = v165;
        v165 = 0;
        if (v53)
        {
          if (*(_DWORD *)v53 == 2)
            WTF::StringImpl::destroy(v53, v52);
          else
            *(_DWORD *)v53 -= 2;
        }
        v15 = operator new();
        *(_DWORD *)v15 = 0;
        v6 = WTF::fastMalloc((WTF *)0x20);
        *(_DWORD *)(v6 + 8) = 1;
        v7 = (unsigned int *)(v6 + 8);
        *(_QWORD *)v6 = &off_1E33943E8;
        v165 = 0;
        v166 = 0;
        *(_QWORD *)(v6 + 16) = v44;
        *(_QWORD *)(v6 + 24) = v15;
        WebCore::ScriptController::executeAsynchronousUserAgentScriptInWorld(WebCore::DOMWrapperWorld &,WebCore::RunJavaScriptParameters &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>)> &&)::$_3::~$_3((uint64_t)&v165);
        v4 = *((_QWORD *)v9 + 2) + 192;
        do
          v54 = __ldaxr(v7);
        while (__stlxr(v54 + 1, v7));
        v55 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v55 = off_1E3394410;
        v55[1] = v6;
        v146 = v55;
        JSC::Heap::addFinalizer();
        if (v146)
          (*(void (**)(_QWORD *))(*v146 + 8))(v146);
        v9 = (WebCore::DOMWrapperWorld *)(*((_QWORD *)v9 + 2) + 192);
        do
          v56 = __ldaxr(v7);
        while (__stlxr(v56 + 1, v7));
        v57 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v57 = off_1E3394438;
        v57[1] = v6;
        v145 = v57;
        JSC::Heap::addFinalizer();
        if (v145)
          (*(void (**)(_QWORD *))(*v145 + 8))(v145);
        LOBYTE(v165) = 0;
        v166 = 0x800000000;
        memset(v168, 0, sizeof(v168));
        v167 = &v168[8];
        v169 = 0;
        v58.super.isa = (Class)a4;
        JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t)&v165, v58);
        v59.super.isa = (Class)v5;
        JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t)&v165, v59);
        if (!v154)
        {
          JSC::call();
          result = JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::~MarkedVector((uint64_t)&v165, v60);
          do
          {
            v62 = __ldaxr(v7);
            v63 = v62 - 1;
          }
          while (__stlxr(v63, v7));
          if (!v63)
          {
            atomic_store(1u, (unsigned int *)(v6 + 8));
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
          }
          break;
        }
        continue;
      }
      v147[0] = 0;
      v148 = -1;
      v73 = v154;
      if (v154 != -1)
      {
        ((void (*)(WTF::StringImpl **, _BYTE *, JSC::Structure **))off_1E3393C08[v154])(&v165, v147, v153);
        v148 = v73;
      }
      result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>)>::operator()(a4, (uint64_t)v147);
      if (v148 != -1)
        result = ((uint64_t (*)(WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v148])(&v165, v147);
      v148 = -1;
    }
    break;
  }
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)v16, v61);
    else
      *(_DWORD *)v16 -= 2;
  }
LABEL_10:
  if (v154 != -1)
    return ((uint64_t (*)(WTF::StringImpl **, JSC::Structure **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v154])(&v165, v153);
  return result;
}

void WebCore::ScriptController::executeScriptInWorld(uint64_t a1, uint64_t a2, WebCore::DOMWrapperWorld *a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  NSObject *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t *v17;
  void *v18;
  WebCore::UserGestureToken *v19;
  int v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  char *p_buf;
  _QWORD *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  __int128 v33;
  JSC::JSGlobalObject *v34;
  uint64_t *v35;
  uint64_t *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  int v43;
  WTF::StringImpl *v44;
  void *v45;
  _DWORD *v46;
  _DWORD *v47;
  WTF::StringImpl *v48;
  WTF *v49;
  void *v50;
  WTF *v51;
  void *v52;
  uint64_t *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  objc_class *v60;
  uint64_t v61;
  int v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  BOOL v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  JSValue v71;
  WTF::StringImpl *v72;
  void *v73;
  WTF::StringImpl *v74;
  void *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl **v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  int v81;
  WTF::StringImpl *v82;
  _DWORD *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl **v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  WebCore::Frame *v89;
  uint64_t v90;
  unint64_t StatusReg;
  uint64_t v93;
  WebCore *v94;
  uint64_t v95;
  uint64_t v96;
  JSC::JSGlobalObject *v97;
  JSCell *v98;
  uint64_t v99;
  WTF::StringImpl *v101;
  WebCore::CachedScript *v102;
  unsigned int v103;
  WTF::StringImpl **v104;
  uint64_t v105;
  WebCore *v106;
  uint64_t v107;
  JSC::JSGlobalObject *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  int v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  _DWORD *v115;
  WTF::StringImpl *v116;
  int v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  _QWORD *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  WTF *v141;
  int v142;
  _QWORD v143[3];
  WTF::StringImpl *v144;
  uint64_t v145;
  char v146;
  WTF::StringImpl *v147;
  char v148;
  WTF::StringImpl *v149;
  uint64_t v150;
  char v151;
  WTF::StringImpl *v152;
  char v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  uint64_t v156;
  int v157;
  int v158;
  unsigned int *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  unsigned int v162;
  char v163;
  __int128 v164;
  char v165;
  __int128 buf;
  WTF *v167;
  uint64_t *v168[13];

  v168[10] = *(uint64_t **)MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 280) + 16);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 1176))(v8);
  v10 = *(_QWORD *)(a2 + 16);
  if (!v9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v10 + 280) + 16) + 1184))(*(_QWORD *)(*(_QWORD *)(v10 + 280) + 16));
    v15 = *(unsigned __int8 *)(a4 + 80);
    v16 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 296);
    LOBYTE(v164) = 0;
    v165 = 0;
    v17 = WebCore::UserGestureIndicator::UserGestureIndicator(&v140, v15 | (unsigned __int16)(v15 << 8), v16, 1, 2, &v164, 1);
    if (*(_BYTE *)(a4 + 80) && WTF::isMainThread((WTF *)v17))
    {
      {
        WebCore::currentToken(void)::token = 0;
        goto LABEL_26;
      }
      v19 = (WebCore::UserGestureToken *)WebCore::currentToken(void)::token;
      if (WebCore::currentToken(void)::token)
      {
        v20 = (*(_DWORD *)WebCore::currentToken(void)::token)++;
        v21 = *(unsigned __int8 *)(a4 + 81);
        if (v20)
        {
          *(_DWORD *)v19 = v20;
          if (!v21)
            goto LABEL_26;
        }
        else
        {
          WebCore::UserGestureToken::~UserGestureToken(v19, v18);
          v19 = (WebCore::UserGestureToken *)WTF::fastFree(v49, v50);
          if (!v21)
            goto LABEL_26;
        }
        if (WTF::isMainThread(v19))
        {
          {
            v22 = WebCore::currentToken(void)::token;
            if (WebCore::currentToken(void)::token)
              ++*(_DWORD *)WebCore::currentToken(void)::token;
          }
          else
          {
            v22 = 0;
            WebCore::currentToken(void)::token = 0;
          }
        }
        else
        {
          v22 = 0;
        }
        v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v23 = off_1E3394310;
        *(_QWORD *)&buf = v23;
        v25 = *(unsigned int *)(v22 + 36);
        if ((_DWORD)v25 == *(_DWORD *)(v22 + 32))
        {
          p_buf = WTF::Vector<WebCore::ContentFilter::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v22 + 24, v25 + 1, (unint64_t)&buf);
          v25 = *(unsigned int *)(v22 + 36);
          v27 = (_QWORD *)(*(_QWORD *)(v22 + 24) + 8 * v25);
          v23 = *(_QWORD **)p_buf;
        }
        else
        {
          v27 = (_QWORD *)(*(_QWORD *)(v22 + 24) + 8 * v25);
          p_buf = (char *)&buf;
        }
        *(_QWORD *)p_buf = 0;
        *v27 = v23;
        *(_DWORD *)(v22 + 36) = v25 + 1;
        v28 = buf;
        *(_QWORD *)&buf = 0;
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        if (*(_DWORD *)v22 == 1)
        {
          WebCore::UserGestureToken::~UserGestureToken((WebCore::UserGestureToken *)v22, v24);
          WTF::fastFree(v51, v52);
        }
        else
        {
          --*(_DWORD *)v22;
        }
      }
    }
LABEL_26:
    if (!WebCore::ScriptController::canExecuteScripts(a2, 1u) || *(_BYTE *)(a2 + 32))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_BYTE *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 32) = 1;
LABEL_29:
      WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)&v140);
      return;
    }
    v30 = *(WTF::StringImpl **)(a4 + 16);
    if (v30)
      *(_DWORD *)v30 += 2;
    v137 = v30;
    v138 = *(_OWORD *)(a4 + 24);
    v139 = *(_OWORD *)(a4 + 40);
    if ((v138 & 1) != 0)
    {
      v32 = v30;
    }
    else
    {
      v31 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 296);
      v32 = *(WTF::StringImpl **)(v31 + 736);
      if (v32)
        *(_DWORD *)v32 += 2;
      v137 = v32;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v29);
        else
          *(_DWORD *)v30 -= 2;
      }
      v33 = *(_OWORD *)(v31 + 760);
      v138 = *(_OWORD *)(v31 + 744);
      v139 = v33;
    }
    if (*(_BYTE *)(a4 + 56))
    {
      v34 = *(JSC::JSGlobalObject **)(WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(a2 + 16) + 112), a3)+ 16);
      LOBYTE(buf) = 0;
      v35 = (uint64_t *)&buf;
      *((_QWORD *)&buf + 1) = 0x800000000;
      memset(v168, 0, 72);
      v167 = (WTF *)&v168[1];
      v160 = 0;
      v161 = 0;
      v162 = 0;
      v163 = 1;
      v36 = (uint64_t *)WTF::StringBuilder::append();
      if (*(_BYTE *)(a4 + 72))
      {
        v135 = v32;
        v35 = *(uint64_t **)(a4 + 64);
        if (v35)
        {
          v38 = *((unsigned int *)v35 - 1);
          v39 = &v35[3 * v38];
          if (*((_DWORD *)v35 - 3))
          {
            if ((_DWORD)v38)
            {
              v40 = 24 * v38;
              do
              {
                if ((unint64_t)(*v35 + 1) > 1)
                  goto LABEL_70;
                v35 += 3;
                v40 -= 24;
              }
              while (v40);
              v35 = v39;
            }
            goto LABEL_70;
          }
          v36 = &v35[3 * v38];
        }
        else
        {
          v36 = 0;
          LODWORD(v38) = 0;
        }
        v39 = &v35[3 * v38];
        v35 = v36;
LABEL_70:
        v136 = 0;
        while (1)
        {
          if (!*(_BYTE *)(a4 + 72))
            goto LABEL_233;
          v53 = *(uint64_t **)(a4 + 64);
          if (v53)
            v53 += 3 * *((unsigned int *)v53 - 1);
          if (v35 == v53)
          {
LABEL_133:
            v74 = v136;
            if (v136 && *((_DWORD *)v136 + 1))
            {
              v117 = *(_DWORD *)v136;
              *(_DWORD *)v136 += 2;
              *(_QWORD *)(a1 + 24) = 0;
              *(_QWORD *)a1 = v136;
              *(_QWORD *)(a1 + 8) = 0;
              *(_BYTE *)(a1 + 16) = 0;
              *(_DWORD *)(a1 + 32) = 1;
              v48 = v135;
              if (!v117)
              {
LABEL_215:
                WTF::StringImpl::destroy(v74, v37);
                goto LABEL_201;
              }
LABEL_200:
              *(_DWORD *)v74 = v117;
LABEL_201:
              v118 = v161;
              v161 = 0;
              if (v118)
              {
                if (*(_DWORD *)v118 == 2)
                  WTF::StringImpl::destroy(v118, v37);
                else
                  *(_DWORD *)v118 -= 2;
              }
              v119 = v160;
              v160 = 0;
              if (v119)
              {
                if (*(_DWORD *)v119 == 2)
                  WTF::StringImpl::destroy(v119, v37);
                else
                  *(_DWORD *)v119 -= 2;
              }
              v120 = v168[0];
              if (v168[0])
              {
                v155 = (WTF::StringImpl *)((char *)&buf + 8);
                v130 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v168[0], (uint64_t *)&v155);
                WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v120, v130);
              }
              if (v167 != (WTF *)&v168[1] && v167)
                WTF::fastFree(v167, v37);
              goto LABEL_210;
            }
            v155 = (WTF::StringImpl *)"){";
            LODWORD(v156) = 2;
            v144 = *(WTF::StringImpl **)a4;
            v149 = (WTF::StringImpl *)"})";
            LODWORD(v150) = 2;
            WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v160, (int8x16_t **)&v155, (uint64_t *)&v144, (int8x16_t **)&v149);
            v76 = v160;
            if (v160)
            {
              v77 = (WTF::StringImpl **)(a4 + 16);
            }
            else
            {
              WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v160);
              WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v160);
              v76 = v160;
              v77 = (WTF::StringImpl **)(a4 + 16);
              if (!v160)
              {
LABEL_139:
                v149 = v76;
                v78 = *(unsigned __int8 *)(a4 + 8);
                v144 = 0;
                WebCore::Document::encoding(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 296), v75, &v155);
                v80 = v155;
                if (v155)
                {
                  v81 = *(_DWORD *)v155;
                  *(_DWORD *)v155 += 2;
                  v154 = v80;
                  if (v81)
                    *(_DWORD *)v80 = v81;
                  else
                    WTF::StringImpl::destroy(v80, v79);
                }
                else
                {
                  v154 = 0;
                }
                WebCore::CachedScriptFetcher::create((WebCore::CachedScriptFetcher *)&v154, &v141);
                v143[0] = v141;
                WebCore::ScriptSourceCode::ScriptSourceCode((int32x2_t *)&v155, (_DWORD **)&v149, v78, v77, (int32x2_t *)&v144, 0, v143);
                v83 = (_DWORD *)v143[0];
                v143[0] = 0;
                if (v83)
                {
                  if (v83[2] != 1)
                  {
                    --v83[2];
                    goto LABEL_145;
                  }
                  (*(void (**)(_DWORD *))(*(_QWORD *)v83 + 8))(v83);
                  if (!v80)
                  {
LABEL_148:
                    v84 = v149;
                    v149 = 0;
                    if (v84)
                    {
                      if (*(_DWORD *)v84 == 2)
                        WTF::StringImpl::destroy(v84, v82);
                      else
                        *(_DWORD *)v84 -= 2;
                    }
                    v85 = (WTF::StringImpl **)(v156 + 16);
                    v86 = *(_QWORD *)(a2 + 16);
                    v87 = (unsigned int *)(v86 + 8);
                    do
                      v88 = __ldaxr(v87);
                    while (__stlxr(v88 + 1, v87));
                    v89 = *(WebCore::Frame **)(a2 + 16);
                    v90 = *(_QWORD *)(a2 + 24);
                    *(_QWORD *)(a2 + 24) = v85;
                    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                    {
                      v121 = *((_QWORD *)v89 + 3);
                      if (v121)
                      {
                        v122 = *(_QWORD *)(v121 + 8);
                        if (v122)
                        {
                          v123 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v122 + 80) + 8) + 232);
                          if (v123)
                          {
                            WebCore::TimelineRecordFactory::createEvaluateScriptData((WebCore::TimelineRecordFactory *)v85, (const WTF::String *)(v157 + 1), (WTF::JSONImpl::Value *)(v158 + 1), (uint64_t *)&v149);
                            WebCore::InspectorTimelineAgent::pushCurrentRecord(v123, &v149, 11, 1, v89, 0, 0);
                            v85 = (WTF::StringImpl **)v149;
                            v149 = 0;
                            if (v85)
                            {
                              if (*(_DWORD *)v85 == 1)
                                v85 = (WTF::StringImpl **)WTF::JSONImpl::Value::operator delete();
                              else
                                --*(_DWORD *)v85;
                            }
                          }
                        }
                      }
                    }
                    v154 = 0;
                    LOBYTE(v149) = 0;
                    v153 = 0;
                    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
                    v93 = *(_QWORD *)(StatusReg + 736);
                    if (!v93 || (v85 = *(WTF::StringImpl ***)(v93 + 96)) == 0)
                      v85 = (WTF::StringImpl **)WebCore::threadGlobalDataSlow((WebCore *)v85);
                    v144 = v85[8];
                    v94 = (WebCore *)JSC::JSLockHolder::JSLockHolder();
                    v95 = *(_QWORD *)(StatusReg + 736);
                    if (!v95 || (v94 = *(WebCore **)(v95 + 96)) == 0)
                      v94 = (WebCore *)WebCore::threadGlobalDataSlow(v94);
                    *((_QWORD *)v94 + 8) = v34;
                    v96 = JSC::profiledEvaluate();
                    WebCore::JSExecState::~JSExecState(&v144, v97);
                    if (v154)
                    {
LABEL_161:
                      v99 = 0;
                      goto LABEL_162;
                    }
                    if (!v96)
                      goto LABEL_268;
                    if ((v96 & 0xFFFE000000000002) != 0)
                      goto LABEL_268;
                    v103 = *(unsigned __int8 *)(v96 + 5);
                    if (v103 < 0x17)
                      goto LABEL_268;
                    if ((v103 & 0xFE) == 0x1A)
                      goto LABEL_172;
                    if ((*(_BYTE *)(v96 + 6) & 4) == 0)
                      goto LABEL_268;
                    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(16
                                                                                    * *(unsigned int *)(16 * (*(_DWORD *)v96 & 0xFFFFFFFE) + 0x4C)
                                                                                    + 0x38))(&v144, v96);
                    if (!(_BYTE)v144)
                      goto LABEL_268;
                    v103 = *(unsigned __int8 *)(v96 + 5);
LABEL_172:
                    v104 = v103 == 26
                         ? (WTF::StringImpl **)JSC::JSFunction::getCallData((JSC::JSFunction *)v96, v98)
                         : (WTF::StringImpl **)(*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v96 & 0xFFFFFFFE) + 0x4C) + 0x38))(v143, v96);
                    if (!LOBYTE(v143[0]))
                    {
LABEL_268:
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      v147 = 0;
                      v145 = 0;
                      v146 = 0;
                      v148 = 1;
                      std::__optional_storage_base<WebCore::ExceptionDetails,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ExceptionDetails,false>>((uint64_t)&v149, (WTF::StringImpl *)&v144);
                      if (v148)
                      {
                        v132 = v147;
                        v147 = 0;
                        if (v132)
                        {
                          if (*(_DWORD *)v132 == 2)
                            WTF::StringImpl::destroy(v132, v131);
                          else
                            *(_DWORD *)v132 -= 2;
                        }
                        v133 = v144;
                        v144 = 0;
                        if (v133)
                        {
                          if (*(_DWORD *)v133 == 2)
                            WTF::StringImpl::destroy(v133, v131);
                          else
                            *(_DWORD *)v133 -= 2;
                        }
                      }
                      goto LABEL_161;
                    }
                    v141 = v167;
                    v142 = DWORD2(buf);
                    v105 = *(_QWORD *)(StatusReg + 736);
                    if (!v105 || (v104 = *(WTF::StringImpl ***)(v105 + 96)) == 0)
                      v104 = (WTF::StringImpl **)WebCore::threadGlobalDataSlow((WebCore *)v104);
                    v144 = v104[8];
                    v106 = (WebCore *)JSC::JSLockHolder::JSLockHolder();
                    v107 = *(_QWORD *)(StatusReg + 736);
                    if (!v107 || (v106 = *(WebCore **)(v107 + 96)) == 0)
                      v106 = (WebCore *)WebCore::threadGlobalDataSlow(v106);
                    *((_QWORD *)v106 + 8) = v34;
                    v99 = JSC::profiledCall();
                    WebCore::JSExecState::~JSExecState(&v144, v108);
LABEL_162:
                    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                    {
                      v124 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 24);
                      if (v124)
                      {
                        v125 = *(_QWORD *)(v124 + 8);
                        if (v125)
                        {
                          v126 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v125 + 80) + 8) + 232);
                          if (v126)
                            WebCore::InspectorTimelineAgent::didCompleteCurrentRecord(v126);
                        }
                      }
                    }
                    v101 = v154;
                    if (v154)
                    {
                      if (!v153)
                      {
                        v147 = 0;
                        v144 = 0;
                        v145 = 0;
                        v146 = 0;
                        if (v159)
                          v102 = (WebCore::CachedScript *)*((_QWORD *)v159 + 1);
                        else
                          v102 = 0;
                        WebCore::reportException(v34, (uint64_t)v154, v102, 0, (uint64_t)&v144);
                        v149 = v144;
                        v150 = v145;
                        v151 = v146;
                        v152 = v147;
                        v153 = 1;
                      }
LABEL_183:
                      v109 = v149;
                      if (v149)
                        *(_DWORD *)v149 += 2;
                      v110 = v152;
                      if (v152)
                      {
                        v111 = *(_DWORD *)v152;
                        *(_DWORD *)v152 += 2;
                        v112 = v150;
                        *(_QWORD *)a1 = v109;
                        *(_QWORD *)(a1 + 8) = v112;
                        *(_BYTE *)(a1 + 16) = v151;
                        *(_QWORD *)(a1 + 24) = v110;
                        *(_DWORD *)(a1 + 32) = 1;
                        if (v111)
                          *(_DWORD *)v110 = v111;
                        else
                          WTF::StringImpl::destroy(v110, v101);
                      }
                      else
                      {
                        v127 = v150;
                        *(_QWORD *)a1 = v109;
                        *(_QWORD *)(a1 + 8) = v127;
                        *(_BYTE *)(a1 + 16) = v151;
                        *(_QWORD *)(a1 + 24) = 0;
                        *(_DWORD *)(a1 + 32) = 1;
                      }
                      if (v109)
                      {
                        if (*(_DWORD *)v109 == 2)
                          WTF::StringImpl::destroy(v109, v101);
                        else
                          *(_DWORD *)v109 -= 2;
                      }
                    }
                    else
                    {
                      if (v153)
                        goto LABEL_183;
                      *(_QWORD *)a1 = v99;
                      *(_DWORD *)(a1 + 32) = 0;
                    }
                    *(_QWORD *)(a2 + 24) = v90;
                    if (v86)
                    {
                      do
                      {
                        v113 = __ldaxr(v87);
                        v114 = v113 - 1;
                      }
                      while (__stlxr(v114, v87));
                      if (!v114)
                      {
                        atomic_store(1u, v87);
                        v128 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                        *(_QWORD *)v128 = off_1E31FE290;
                        *((_QWORD *)v128 + 1) = v87;
                        v149 = v128;
                        WTF::ensureOnMainThread();
                        v129 = v149;
                        v149 = 0;
                        if (v129)
                          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v129 + 8))(v129);
                      }
                    }
                    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v159, v101);
                    v115 = (_DWORD *)v156;
                    v156 = 0;
                    v48 = v135;
                    v74 = v136;
                    if (v115)
                    {
                      if (v115[2] == 1)
                        (*(void (**)(_DWORD *))(*(_QWORD *)v115 + 8))(v115);
                      else
                        --v115[2];
                    }
                    v116 = v155;
                    v155 = 0;
                    if (v116)
                    {
                      if (*((_DWORD *)v116 + 2) == 1)
                        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v116 + 8))(v116);
                      else
                        --*((_DWORD *)v116 + 2);
                    }
                    if (!v136)
                      goto LABEL_201;
                    v117 = *(_DWORD *)v136 - 2;
                    if (*(_DWORD *)v136 == 2)
                      goto LABEL_215;
                    goto LABEL_200;
                  }
                }
                else
                {
LABEL_145:
                  if (!v80)
                    goto LABEL_148;
                }
                if (*(_DWORD *)v80 == 2)
                  WTF::StringImpl::destroy(v80, v82);
                else
                  *(_DWORD *)v80 -= 2;
                goto LABEL_148;
              }
            }
            *(_DWORD *)v76 += 2;
            goto LABEL_139;
          }
          v54 = (WTF::StringImpl *)*v35;
          if (v162 || v161)
          {
            if (v54 && (*((_BYTE *)v54 + 16) & 4) == 0)
              WTF::StringBuilder::append();
            else
              WTF::StringBuilder::append();
          }
          else
          {
            if (v54)
              *(_DWORD *)v54 += 2;
            v55 = v160;
            v160 = v54;
            if (v55)
            {
              if (*(_DWORD *)v55 == 2)
                WTF::StringImpl::destroy(v55, v37);
              else
                *(_DWORD *)v55 -= 2;
            }
            v56 = *v35;
            if (*v35)
              LODWORD(v56) = *(_DWORD *)(v56 + 4);
            v162 = v56;
          }
          v57 = WTF::fastMalloc((WTF *)0x100);
          *(_DWORD *)v57 = 1;
          *(_QWORD *)(v57 + 8) = 0;
          *(_QWORD *)(v57 + 16) = 0;
          v58 = v35[1];
          v35[1] = 0;
          *(_QWORD *)(v57 + 8) = v58;
          LODWORD(v58) = *((_DWORD *)v35 + 4);
          *((_DWORD *)v35 + 4) = 0;
          *(_DWORD *)(v57 + 16) = v58;
          LODWORD(v58) = *((_DWORD *)v35 + 5);
          *((_DWORD *)v35 + 5) = 0;
          *(_DWORD *)(v57 + 20) = v58;
          *(_OWORD *)(v57 + 24) = 0u;
          *(_OWORD *)(v57 + 40) = 0u;
          *(_OWORD *)(v57 + 56) = 0u;
          *(_OWORD *)(v57 + 72) = 0u;
          *(_OWORD *)(v57 + 88) = 0u;
          *(_OWORD *)(v57 + 104) = 0u;
          *(_OWORD *)(v57 + 120) = 0u;
          *(_OWORD *)(v57 + 136) = 0u;
          *(_OWORD *)(v57 + 152) = 0u;
          *(_OWORD *)(v57 + 168) = 0u;
          *(_OWORD *)(v57 + 184) = 0u;
          *(_OWORD *)(v57 + 200) = 0u;
          *(_OWORD *)(v57 + 216) = 0u;
          *(_OWORD *)(v57 + 232) = 0u;
          *(_QWORD *)(v57 + 248) = 0;
          *(_QWORD *)(v57 + 248) = WebCore::SerializedScriptValue::computeMemoryCost((WebCore::SerializedScriptValue *)v57);
          v59 = *((_QWORD *)v34 + 7);
          v144 = 0;
          v145 = 0;
          v155 = 0;
          v156 = 0;
          v149 = 0;
          v150 = 0;
          v60 = (objc_class *)WebCore::SerializedScriptValue::deserialize(v57, v34, v34, (uint64_t)&v144, (uint64_t)&v155, (uint64_t *)&v149, 1, 0);
          v36 = (uint64_t *)v144;
          if (HIDWORD(v145))
            break;
          if (v144)
            goto LABEL_132;
LABEL_87:
          v61 = *(_QWORD *)(v59 + 16);
          if (v61)
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v72 = v155;
            v36 = (uint64_t *)v136;
            if (v136)
            {
              if (*(_DWORD *)v136 == 2)
                v36 = (uint64_t *)WTF::StringImpl::destroy(v136, v37);
              else
                *(_DWORD *)v136 -= 2;
            }
            v136 = v72;
          }
          else
          {
            v62 = DWORD2(buf);
            if (DWORD2(buf) == HIDWORD(buf) || v167 != (WTF *)&v168[1] && v167)
            {
              v71.super.isa = v60;
              v36 = (uint64_t *)JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)((char *)&buf + 8), v71);
              if ((_DWORD)v36 == 1)
                LOBYTE(buf) = 1;
            }
            else
            {
              *((_QWORD *)v167 + DWORD2(buf)) = v60;
              DWORD2(buf) = v62 + 1;
            }
            v63 = v35 + 3;
            v35 = v39;
            if (v63 != v39)
            {
              v35 = v63;
              while ((unint64_t)(*v35 + 1) <= 1)
              {
                v35 += 3;
                if (v35 == v39)
                {
                  v35 = v39;
                  break;
                }
              }
            }
            if (!*(_BYTE *)(a4 + 72))
              goto LABEL_233;
            v64 = *(uint64_t **)(a4 + 64);
            if (v64)
              v64 += 3 * *((unsigned int *)v64 - 1);
            if (v35 != v64)
            {
              LOBYTE(v155) = 44;
              if (v161 && ((v65 = v162, v162 < *((_DWORD *)v161 + 1)) ? (v66 = v160 == 0) : (v66 = 0), v66))
              {
                v69 = *((_DWORD *)v161 + 4);
                v70 = *((_QWORD *)v161 + 1);
                ++v162;
                if ((v69 & 4) != 0)
                  *(_BYTE *)(v70 + v65) = 44;
                else
                  *(_WORD *)(v70 + 2 * v65) = 44;
              }
              else
              {
                v36 = (uint64_t *)WTF::StringBuilder::append();
              }
            }
          }
          do
          {
            v67 = __ldaxr((unsigned int *)v57);
            v68 = v67 - 1;
          }
          while (__stlxr(v68, (unsigned int *)v57));
          if (v68)
          {
            if (v61)
              goto LABEL_133;
          }
          else
          {
            atomic_store(1u, (unsigned int *)v57);
            WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v57 + 8), v37);
            v36 = (uint64_t *)WTF::fastFree((WTF *)v57, v73);
            if (v61)
              goto LABEL_133;
          }
        }
        v134 = 8 * HIDWORD(v145);
        do
        {
          v36 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v36, v37)+ 1;
          v134 -= 8;
        }
        while (v134);
        v36 = (uint64_t *)v144;
        if (!v144)
          goto LABEL_87;
LABEL_132:
        v144 = 0;
        LODWORD(v145) = 0;
        v36 = (uint64_t *)WTF::fastFree((WTF *)v36, v37);
        goto LABEL_87;
      }
LABEL_233:
      __break(1u);
LABEL_234:
      (*(void (**)(uint64_t *))(*v36 + 8))(v36);
      if (!v35)
        goto LABEL_62;
      goto LABEL_60;
    }
    v41 = *(unsigned __int8 *)(a4 + 8);
    v155 = 0;
    WebCore::Document::encoding(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 296), v29, &buf);
    v35 = (uint64_t *)buf;
    if ((_QWORD)buf)
    {
      v43 = *(_DWORD *)buf;
      *(_DWORD *)buf += 2;
      v160 = (WTF::StringImpl *)v35;
      if (v43)
        *(_DWORD *)v35 = v43;
      else
        WTF::StringImpl::destroy((WTF::StringImpl *)v35, v42);
    }
    else
    {
      v160 = 0;
    }
    WebCore::CachedScriptFetcher::create((WebCore::CachedScriptFetcher *)&v160, &v144);
    v44 = v144;
    v144 = 0;
    v149 = v44;
    WebCore::ScriptSourceCode::ScriptSourceCode((int32x2_t *)&buf, (_DWORD **)a4, v41, &v137, (int32x2_t *)&v155, 0, &v149);
    WebCore::ScriptController::evaluateInWorld((WebCore::ScriptController *)a2, (const WebCore::ScriptSourceCode *)&buf, a3);
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v168[1], v45);
    v46 = (_DWORD *)*((_QWORD *)&buf + 1);
    *((_QWORD *)&buf + 1) = 0;
    if (v46)
    {
      if (v46[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 8))(v46);
      else
        --v46[2];
    }
    v47 = (_DWORD *)buf;
    *(_QWORD *)&buf = 0;
    if (v47)
    {
      if (v47[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 8))(v47);
      else
        --v47[2];
    }
    v36 = (uint64_t *)v149;
    v149 = 0;
    if (v36)
    {
      if (*((_DWORD *)v36 + 2) == 1)
        goto LABEL_234;
      --*((_DWORD *)v36 + 2);
    }
    if (!v35)
      goto LABEL_62;
LABEL_60:
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v35, v37);
    else
      *(_DWORD *)v35 -= 2;
LABEL_62:
    v48 = v137;
LABEL_210:
    v137 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v37);
      else
        *(_DWORD *)v48 -= 2;
    }
    goto LABEL_29;
  }
  v11 = *(_QWORD **)(v10 + 296);
  if (v11)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::Document::addConsoleMessage(v11, 8, 1, (WTF::StringImpl **)&buf, 0);
    v13 = (WTF::StringImpl *)buf;
    *(_QWORD *)&buf = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  v14 = qword_1ECE7C478;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C478, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = a2;
    _os_log_error_impl(&dword_1940B8000, v14, OS_LOG_TYPE_ERROR, "%p - ScriptController::executeScriptInWorld: Ignoring user script injection for non app-bound domain", (uint8_t *)&buf, 0xCu);
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = 1;
}

uint64_t *WebCore::UserGestureIndicator::UserGestureIndicator(uint64_t *a1, __int16 a2, uint64_t a3, int a4, int a5, __int128 *a6, char a7)
{
  uint64_t v11;
  __int128 v13;
  void *v14;
  void *v15;
  uint64_t v16;
  WebCore::ResourceLoadObserver *v17;
  uint64_t *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WebCore::UserGestureToken *v22;
  unsigned int *v23;
  unsigned int v24;
  _DWORD *v25;
  int v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::UserGestureToken *v31;
  __int128 v32[2];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  {
    v11 = WebCore::currentToken(void)::token;
    if (WebCore::currentToken(void)::token)
      ++*(_DWORD *)WebCore::currentToken(void)::token;
  }
  else
  {
    v11 = 0;
    WebCore::currentToken(void)::token = 0;
  }
  *a1 = v11;
  if ((a2 & 0xFF00) != 0)
  {
    v13 = a6[1];
    v32[0] = *a6;
    v32[1] = v13;
    WebCore::UserGestureToken::create((uint64_t *)&v31, a2, a4, a3, v32, a7);
    {
      WebCore::currentToken(void)::token = 0;
    }
    WTF::RefPtr<WebCore::UserGestureToken,WTF::RawPtrTraits<WebCore::UserGestureToken>,WTF::DefaultRefDerefTraits<WebCore::UserGestureToken>>::operator=<WebCore::UserGestureToken>((uint64_t *)&v31, v14);
    WTF::RefPtr<WebCore::UserGestureToken,WTF::RawPtrTraits<WebCore::UserGestureToken>,WTF::DefaultRefDerefTraits<WebCore::UserGestureToken>>::operator=(&v31, v15);
    if (a3)
    {
      {
        v16 = WebCore::currentToken(void)::token;
      }
      else
      {
        v16 = 0;
        WebCore::currentToken(void)::token = 0;
      }
      if (!*(_DWORD *)(v16 + 68) && *(_BYTE *)(v16 + 16) == 1)
      {
        WebCore::Document::updateLastHandledUserGestureTimestamp(a3, *(double *)(v16 + 72));
        if (!a5)
        {
          v18 = WebCore::ResourceLoadObserver::shared(v17);
          v19 = WebCore::Document::topDocument(a3);
          (*(void (**)(uint64_t *, uint64_t))(*v18 + 32))(v18, v19);
        }
        *(_BYTE *)(WebCore::Document::topDocument(a3) + 3416) = 1;
        v21 = *(_QWORD *)(a3 + 528);
        if (v21)
        {
          v22 = *(WebCore::UserGestureToken **)(v21 + 8);
          if (v22)
          {
            v23 = (unsigned int *)((char *)v22 + 8);
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 + 1, v23));
            if (*((_BYTE *)v22 + 616))
            {
              WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v23);
            }
            else
            {
              v31 = v22;
              do
              {
                v27 = (unsigned int *)((char *)v22 + 8);
                do
                  v28 = __ldaxr(v27);
                while (__stlxr(v28 + 1, v27));
                if (!*((_BYTE *)v22 + 144))
                  *((_BYTE *)v22 + 616) = 1;
                WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v27);
                v29 = *((_QWORD *)v31 + 7);
                if (v29)
                  v30 = *(_QWORD *)(v29 + 8);
                else
                  v30 = 0;
                WTF::RefPtr<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::operator=((uint64_t *)&v31, v30);
                v22 = v31;
              }
              while (v31);
            }
          }
        }
        v25 = *(_DWORD **)(a3 + 696);
        if (v25)
        {
          v26 = v25[6];
          v25[6] = v26 + 1;
          if (a4 == 1)
          {
            WebCore::LocalDOMWindow::notifyActivated((uint64_t)v25, v20, *(double *)(WebCore::currentToken(void)::token + 72));
            v26 = v25[6] - 1;
          }
          if (v26)
            v25[6] = v26;
          else
            (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 72))(v25);
        }
      }
    }
  }
  return a1;
}

{
  return WebCore::UserGestureIndicator::UserGestureIndicator(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t WebCore::Document::topDocument(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_BYTE *)(this + 3362) || *(_BYTE *)(this + 3405))
  {
    while (1)
    {
      v6 = *(_QWORD *)(this + 528);
      if (!v6)
        break;
      v7 = *(_QWORD *)(v6 + 8);
      if (!v7)
        break;
      v8 = *(_QWORD *)(v7 + 120);
      if (!v8)
        break;
      v9 = *(_QWORD *)(v8 + 8);
      if (!v9)
        break;
      this = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 8);
    }
  }
  else
  {
    v1 = *(_QWORD *)(this + 528);
    if (v1)
    {
      v2 = *(_QWORD *)(v1 + 8);
      if (v2)
      {
        v3 = *(_QWORD *)(*(_QWORD *)(v2 + 128) + 8);
        if (v3)
          v4 = *(_BYTE *)(v3 + 144) == 0;
        else
          v4 = 0;
        if (v4)
        {
          v5 = *(_QWORD *)(v3 + 296);
          if (v5)
            return v5;
        }
      }
    }
  }
  return this;
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;

  v1 = result;
  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    atomic_store(1u, result);
    v4 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E31FE290;
    *((_QWORD *)v4 + 1) = v1;
    v5 = v4;
    WTF::ensureOnMainThread();
    result = v5;
    if (v5)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

void WebCore::Document::updateLastHandledUserGestureTimestamp(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(double *)(a1 + 2312) = a2;
  if (a2 != 0.0)
  {
    v4 = *(_QWORD *)(a1 + 2328);
    if (v4)
      *(_BYTE *)(v4 + 48) &= ~8u;
  }
  WebCore::ScriptExecutionContext::didChangeTimerAlignmentInterval((WebCore::ScriptExecutionContext *)(a1 + 192));
  v5 = *(_QWORD *)(a1 + 528);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 120);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          *(_DWORD *)(v8 + 24) += 2;
          v9 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8);
          *(_DWORD *)(v9 + 24) += 2;
          WebCore::Document::updateLastHandledUserGestureTimestamp(v9, a2);
          if (*(_DWORD *)(v9 + 24) == 2)
          {
            if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v9);
          }
          else
          {
            *(_DWORD *)(v9 + 24) -= 2;
          }
          if (*(_DWORD *)(v8 + 24) == 2)
          {
            if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v8);
          }
          else
          {
            *(_DWORD *)(v8 + 24) -= 2;
          }
        }
      }
    }
  }
}

uint64_t WebCore::CachedScriptFetcher::create@<X0>(WebCore::CachedScriptFetcher *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  _DWORD *v6;

  result = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3392C20;
  *(_QWORD *)(result + 16) = 0;
  v6 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v6 += 2;
  *(_QWORD *)(result + 24) = v6;
  *(_QWORD *)(result + 32) = 0;
  *(_WORD *)(result + 40) = 0;
  *(_BYTE *)(result + 42) = 2;
  *a2 = result;
  return result;
}

void WebCore::LocalDOMWindow::notifyActivated(uint64_t a1, WTF::StringImpl *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int *v31;
  WTF::StringImpl *v32;
  const WebCore::SecurityOrigin *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  uint64_t v57;
  unsigned int v58;
  WTF::StringImpl *v59;
  unsigned int v60;
  BOOL v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;

  *(double *)(a1 + 296) = a3;
  v3 = *(_QWORD *)(a1 + 72);
  if (!v3)
    return;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return;
  if (*(_BYTE *)(v4 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x1943A3EF0);
  }
  v5 = *(_QWORD *)(v4 + 240);
  if (!v5)
    return;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return;
  v9 = *(_QWORD *)(v6 + 56);
  if (!v9)
    goto LABEL_37;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    goto LABEL_37;
  v11 = (unsigned int *)(v10 + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  do
  {
    if (!*(_BYTE *)(v10 + 144))
    {
      v13 = (unsigned int *)(v10 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      v15 = *(_QWORD *)(v10 + 296);
      if (v15)
      {
        v16 = *(_QWORD *)(v15 + 696);
        if (v16)
        {
          v17 = *(_DWORD *)(v16 + 24);
          *(_DWORD *)(v16 + 24) = v17 + 1;
          *(double *)(v16 + 296) = a3;
          if (v17)
            *(_DWORD *)(v16 + 24) = v17;
          else
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 72))(v16);
        }
      }
      do
      {
        v18 = __ldaxr(v13);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v13));
      if (!v19)
      {
        atomic_store(1u, v13);
        v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v28 = off_1E31FE290;
        v28[1] = v13;
        v64 = v28;
        WTF::ensureOnMainThread();
        if (v64)
          (*(void (**)(_QWORD *))(*v64 + 8))(v64);
      }
    }
    v20 = *(_QWORD *)(v10 + 56);
    if (!v20)
    {
      v21 = 0;
LABEL_21:
      v22 = 1;
      goto LABEL_26;
    }
    v21 = *(_QWORD *)(v20 + 8);
    if (!v21)
      goto LABEL_21;
    v23 = (unsigned int *)(v21 + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 + 1, v23));
    v22 = 0;
LABEL_26:
    v25 = (unsigned int *)(v10 + 8);
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v25);
      v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v29 = off_1E31FE290;
      v29[1] = v25;
      v65 = v29;
      WTF::ensureOnMainThread();
      if (v65)
        (*(void (**)(_QWORD *))(*v65 + 8))(v65);
    }
    v10 = v21;
  }
  while ((v22 & 1) == 0);
  v3 = *(_QWORD *)(a1 + 72);
  if (!v3)
    return;
LABEL_37:
  v30 = *(_QWORD *)(v3 + 8);
  if (v30)
  {
    if (*(_BYTE *)(v30 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x1943A3F10);
    }
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v30 - 96), a2);
    if (v31)
    {
      v33 = (const WebCore::SecurityOrigin *)v31;
      do
        v34 = __ldaxr(v31);
      while (__stlxr(v34 + 1, v31));
      v35 = *(_QWORD *)(a1 + 72);
      if (!v35)
        goto LABEL_49;
      v35 = *(_QWORD *)(v35 + 8);
      if (!v35)
        goto LABEL_49;
      if (*(_BYTE *)(v35 + 178))
      {
LABEL_109:
        __break(0xC471u);
        JUMPOUT(0x1943A3EB0);
      }
      v35 = *(_QWORD *)(v35 + 240);
      if (v35)
      {
        v35 = *(_QWORD *)(v35 + 8);
        if (v35)
        {
          v36 = (unsigned int *)(v35 + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 + 1, v36));
        }
      }
      while (1)
      {
LABEL_49:
        v38 = *(_QWORD *)(a1 + 72);
        if (v38)
        {
          v38 = *(_QWORD *)(v38 + 8);
          if (v38)
          {
            if (*(_BYTE *)(v38 + 178))
              goto LABEL_109;
            v38 = *(_QWORD *)(v38 + 240);
            if (v38)
              v38 = *(_QWORD *)(v38 + 8);
          }
        }
        v39 = *(_QWORD *)(v35 + 88);
        if (v39)
          goto LABEL_69;
        v40 = *(_QWORD *)(*(_QWORD *)(v35 + 48) + 8);
        if (v40 != v38)
          break;
        v39 = 0;
        v42 = 1;
LABEL_74:
        v47 = (unsigned int *)(v35 + 8);
        do
        {
          v48 = __ldaxr(v47);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v47));
        if (!v49)
        {
          atomic_store(1u, v47);
          v63 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v63 = off_1E31FE290;
          v63[1] = v47;
          v67 = v63;
          WTF::ensureOnMainThread();
          if (v67)
            (*(void (**)(_QWORD *))(*v67 + 8))(v67);
        }
LABEL_77:
        if ((v42 & 1) != 0)
        {
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v33, v32);
          return;
        }
        v35 = v39;
        if (!*(_BYTE *)(v39 + 144))
        {
          v50 = (unsigned int *)(v39 + 8);
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 + 1, v50));
          v52 = *(_QWORD *)(v39 + 296);
          if (v52)
          {
            v53 = *(_QWORD *)(v52 + 696);
            if (v53)
            {
              ++*(_DWORD *)(v53 + 24);
              v54 = *(_QWORD *)(v53 + 72);
              if (v54)
              {
                v55 = *(_QWORD *)(v54 + 8);
                if (v55)
                {
                  if (*(_BYTE *)(v55 + 178))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1943A3ED0);
                  }
                  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v55 - 96), v32);
                  if (v56)
                  {
                    v57 = (uint64_t)v56;
                    do
                      v58 = __ldaxr(v56);
                    while (__stlxr(v58 + 1, v56));
                    if (WebCore::SecurityOrigin::isSameOriginAs((WebCore::SecurityOrigin *)v56, v33))
                      *(double *)(v53 + 296) = a3;
                    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v57, v59);
                  }
                }
              }
              if (*(_DWORD *)(v53 + 24) == 1)
                (*(void (**)(uint64_t))(*(_QWORD *)v53 + 72))(v53);
              else
                --*(_DWORD *)(v53 + 24);
            }
          }
          do
          {
            v60 = __ldaxr(v50);
            v61 = --v60 == 0;
          }
          while (__stlxr(v60, v50));
          v35 = v39;
          if (v61)
          {
            atomic_store(1u, v50);
            v62 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v62 = off_1E31FE290;
            v62[1] = v50;
            v66 = v62;
            WTF::ensureOnMainThread();
            if (v66)
              (*(void (**)(_QWORD *))(*v66 + 8))(v66);
            v35 = v39;
          }
        }
      }
      v39 = *(_QWORD *)(v35 + 72);
      if (v39)
      {
LABEL_69:
        v45 = (unsigned int *)(v39 + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 + 1, v45));
        v42 = 0;
      }
      else
      {
        if (v38)
        {
          while (1)
          {
            v43 = *(_QWORD *)(v40 + 56);
            if (!v43)
              break;
            v40 = *(_QWORD *)(v43 + 8);
            if (v40 == v38 || v40 == 0)
              break;
            v39 = *(_QWORD *)(v40 + 72);
            if (v39)
              goto LABEL_69;
          }
        }
        else
        {
          while (1)
          {
            v41 = *(_QWORD *)(v40 + 56);
            if (!v41)
              break;
            v40 = *(_QWORD *)(v41 + 8);
            if (!v40)
              break;
            v39 = *(_QWORD *)(v40 + 72);
            if (v39)
              goto LABEL_69;
          }
        }
        v39 = 0;
        v42 = 1;
      }
      if (!v35)
        goto LABEL_77;
      goto LABEL_74;
    }
  }
}

uint64_t *WTF::RefPtr<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::operator=(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v10;
  _QWORD *v11;

  if (a2)
  {
    v3 = (unsigned int *)(a2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = *a1;
  *a1 = a2;
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E31FE290;
      v10[1] = v6;
      v11 = v10;
      WTF::ensureOnMainThread();
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    }
  }
  return a1;
}

uint64_t WebCore::HTMLConstructionSite::insertFormattingElement(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;

  result = (uint64_t)WebCore::HTMLConstructionSite::insertHTMLElement(a1, a2);
  v4 = *(__int16 **)(a1 + 56);
  v18 = *v4;
  v19 = *((_BYTE *)v4 + 2);
  v5 = *((_QWORD *)v4 + 1);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  v6 = *((unsigned int *)v4 + 7);
  v21 = 0;
  v22 = 0;
  v20 = v5;
  v23 = v6;
  if ((_DWORD)v6)
  {
    if (v6 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    v7 = WTF::fastMalloc((WTF *)(16 * v6));
    v8 = v7;
    v22 = v6;
    v21 = v7;
    v9 = *((unsigned int *)v4 + 7);
    if ((_DWORD)v9)
    {
      v10 = 0;
      v11 = *((_QWORD *)v4 + 2);
      v12 = v11 + 16 * v9;
      do
      {
        v13 = v11 + v10;
        v14 = *(_DWORD **)(v11 + v10);
        if (v14)
          ++*v14;
        *(_QWORD *)(v7 + v10) = v14;
        v15 = *(_DWORD **)(v13 + 8);
        if (v15)
          *v15 += 2;
        *(_QWORD *)(v7 + v10 + 8) = v15;
        v10 += 16;
      }
      while (v13 + 16 != v12);
    }
  }
  else
  {
    v8 = 0;
  }
  result = (uint64_t)WebCore::HTMLFormattingElementList::ensureNoahsArkCondition((unsigned int *)(a1 + 96), (uint64_t)&v18);
  v16 = *(unsigned int *)(a1 + 108);
  if ((_DWORD)v16 == *(_DWORD *)(a1 + 104))
  {
    result = WTF::Vector<WebCore::HTMLFormattingElementList::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 96, v16 + 1);
    v16 = *(unsigned int *)(a1 + 108);
  }
  v17 = *(_QWORD *)(a1 + 96) + 32 * v16;
  *(_WORD *)v17 = v18;
  *(_BYTE *)(v17 + 2) = v19;
  *(_QWORD *)(v17 + 8) = v5;
  *(_QWORD *)(v17 + 16) = v8;
  *(_DWORD *)(v17 + 24) = v6;
  *(_DWORD *)(v17 + 28) = v6;
  ++*(_DWORD *)(a1 + 108);
  return result;
}

WTF *WebCore::HTMLFormattingElementList::ensureNoahsArkCondition(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  WTF *result;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  WTF *v15;
  int v16;
  WTF *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t *v21;
  WTF *v22;
  WTF *v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  WTF *v37;
  unint64_t v38;
  WTF *v39;
  uint64_t v40;
  _BYTE v41[80];

  v2 = a1[3];
  if (v2 <= 2)
  {
    result = 0;
    v38 = 0;
    goto LABEL_3;
  }
  v39 = (WTF *)v41;
  v40 = 10;
  v5 = *(_DWORD *)(a2 + 28);
  v6 = v2 - 1;
  v7 = 32 * v2;
  do
  {
    if (v6 >= a1[3])
    {
      __break(0xC471u);
      JUMPOUT(0x1943A4488);
    }
    v8 = *(_QWORD *)a1;
    v9 = *(_QWORD *)a1 + v7;
    v10 = *(_QWORD *)(v9 - 24);
    if (!v10)
      break;
    v11 = (WTF *)(v9 - 32);
    v12 = a2;
    if (WebCore::itemsHaveMatchingNames(*(_WORD *)a2, *(_QWORD *)(a2 + 8), *(_WORD *)(v9 - 32), v10)
      && *(_DWORD *)(v8 + v7 - 4) == v5)
    {
      v37 = v11;
      v13 = HIDWORD(v40);
      if (HIDWORD(v40) == (_DWORD)v40)
      {
        WTF::Vector<WebCore::HTMLStackItem const*,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTMLStackItem const*>((uint64_t)&v39, (unint64_t)&v37);
      }
      else
      {
        *((_QWORD *)v39 + HIDWORD(v40)) = v11;
        HIDWORD(v40) = v13 + 1;
      }
    }
    --v6;
    v7 -= 32;
    a2 = v12;
  }
  while (v6 != -1);
  v14 = a2;
  if (HIDWORD(v40) > 2)
  {
    WTF::Vector<WebCore::HTMLStackItem const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<WebCore::HTMLStackItem const* const,18446744073709551615ul>((uint64_t)&v37, (uint64_t *)v39, HIDWORD(v40));
  }
  else
  {
    v37 = 0;
    v38 = 0;
  }
  v15 = v39;
  if (v41 != (_BYTE *)v39 && v39)
  {
    v39 = 0;
    LODWORD(v40) = 0;
    WTF::fastFree(v15, (void *)a2);
  }
  v16 = HIDWORD(v38);
  if (HIDWORD(v38))
  {
    v40 = 0;
    if (HIDWORD(v38) >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v17 = (WTF *)WTF::fastMalloc((WTF *)(8 * HIDWORD(v38)));
      LODWORD(v40) = v16;
      v35 = v17;
      v39 = v17;
      v18 = *(unsigned int *)(v14 + 28);
      v19 = HIDWORD(v38);
      if ((_DWORD)v18)
      {
        v20 = *(uint64_t **)(v14 + 16);
        v21 = &v20[2 * v18];
        v22 = v37;
        while (v19)
        {
          v23 = (WTF *)((char *)v22 + 8 * v19);
          v19 = 0;
          v24 = v35;
          do
          {
            v36 = 0;
            v25 = *(_QWORD *)v22;
            v36 = v25;
            v26 = *(unsigned int *)(v25 + 28);
            if ((_DWORD)v26)
            {
              v27 = *v20;
              v28 = (_QWORD *)(*(_QWORD *)(v25 + 16) + 8);
              v29 = 16 * v26;
              while (1)
              {
                v30 = *(v28 - 1);
                if (v30 == v27
                  || *(_QWORD *)(v30 + 24) == *(_QWORD *)(v27 + 24) && *(_QWORD *)(v30 + 32) == *(_QWORD *)(v27 + 32))
                {
                  break;
                }
                v28 += 2;
                v29 -= 16;
                if (!v29)
                  goto LABEL_34;
              }
              if (*v28 == v20[1])
              {
                if (v19 == (_DWORD)v40)
                {
                  v31 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v39, v19 + 1, (unint64_t)&v36);
                  v19 = HIDWORD(v40);
                  v24 = v39;
                  *((_QWORD *)v39 + HIDWORD(v40)) = *(_QWORD *)v31;
                }
                else
                {
                  *((_QWORD *)v24 + v19) = v25;
                }
                HIDWORD(v40) = ++v19;
              }
            }
LABEL_34:
            v22 = (WTF *)((char *)v22 + 8);
          }
          while (v22 != v23);
          v22 = v39;
          if (v19 <= 2)
          {
            v35 = v39;
            break;
          }
          v32 = v37;
          v37 = v39;
          v35 = v32;
          v39 = v32;
          LODWORD(v32) = v38;
          v38 = __PAIR64__(v19, v40);
          v40 = v32;
          v20 += 2;
          if (v20 == v21)
            goto LABEL_44;
        }
LABEL_47:
        if (!v35)
          goto LABEL_48;
        goto LABEL_49;
      }
      if (HIDWORD(v38) < 3)
      {
LABEL_49:
        v39 = 0;
        LODWORD(v40) = 0;
        WTF::fastFree(v35, (void *)a2);
        goto LABEL_48;
      }
LABEL_44:
      v33 = 2;
      while (1)
      {
        v34 = *(_QWORD *)(*((_QWORD *)v37 + v33) + 8);
        if ((*(_WORD *)(v34 + 28) & 8) == 0)
          break;
        *(_DWORD *)(v34 + 24) += 2;
        v36 = v34;
        WebCore::HTMLFormattingElementList::remove((WebCore::HTMLFormattingElementList *)a1, (WebCore::Element *)v34);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v36);
        if (++v33 >= (unint64_t)HIDWORD(v38))
          goto LABEL_47;
      }
      __break(0xC471u);
    }
    JUMPOUT(0x1943A4470);
  }
LABEL_48:
  result = v37;
LABEL_3:
  if (result)
  {
    v37 = 0;
    LODWORD(v38) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::HTMLFormattingElementList::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF *v11;
  WTF *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 27))
  {
    v6 = result;
    v7 = *(WTF **)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = WTF::fastMalloc((WTF *)(32 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v11 = (WTF *)((char *)v7 + 32 * v8);
      v12 = v7;
      do
      {
        v13 = *(_WORD *)v12;
        *(_BYTE *)(v9 + 2) = *((_BYTE *)v12 + 2);
        *(_WORD *)v9 = v13;
        v14 = *((_QWORD *)v12 + 1);
        *((_QWORD *)v12 + 1) = 0;
        *(_QWORD *)(v9 + 16) = 0;
        *(_QWORD *)(v9 + 24) = 0;
        *(_QWORD *)(v9 + 8) = v14;
        v15 = *((_QWORD *)v12 + 2);
        *((_QWORD *)v12 + 2) = 0;
        *(_QWORD *)(v9 + 16) = v15;
        LODWORD(v15) = *((_DWORD *)v12 + 6);
        *((_DWORD *)v12 + 6) = 0;
        *(_DWORD *)(v9 + 24) = v15;
        LODWORD(v15) = *((_DWORD *)v12 + 7);
        *((_DWORD *)v12 + 7) = 0;
        *(_DWORD *)(v9 + 28) = v15;
        v16 = v9;
        WebCore::HTMLStackItem::~HTMLStackItem(v12, v10);
        v12 = (WTF *)((char *)v12 + 32);
        v9 = v16 + 32;
      }
      while (v12 != v11);
    }
    if (v7)
    {
      if (*(WTF **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void WebCore::FontCache::platformInit(WebCore::FontCache *this)
{
  __CFNotificationCenter *LocalCenter;
  WebCore *v3;
  const __CFString *v4;
  __CFNotificationCenter *v5;
  __CFNotificationCenter *DarwinNotifyCenter;

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, this, (CFNotificationCallback)WebCore::fontCacheRegisteredFontsChangedNotificationCallback, (CFStringRef)*MEMORY[0x1E0CA8370], 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  v3 = CFNotificationCenterGetLocalCenter();
  v4 = (const __CFString *)WebCore::getUIContentSizeCategoryDidChangeNotificationName(v3);
  CFNotificationCenterAddObserver(v3, this, (CFNotificationCallback)WebCore::fontCacheRegisteredFontsChangedNotificationCallback, v4, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  v5 = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(v5, this, (CFNotificationCallback)WebCore::fontCacheRegisteredFontsChangedNotificationCallback, (CFStringRef)*MEMORY[0x1E0DDE098], 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, this, (CFNotificationCallback)WebCore::fontCacheRegisteredFontsChangedNotificationCallback, CFSTR("com.apple.language.changed"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

uint64_t PAL::get_UIKit_UIContentSizeCategoryDidChangeNotification(PAL *this)
{
  if (qword_1ECE7ECA0 != -1)
    dispatch_once(&qword_1ECE7ECA0, &__block_literal_global_12_7);
  return qword_1ECE7EC98;
}

float WebCore::Layout::IntrinsicWidthHandler::maximumContentSize(uint64_t **this)
{
  _BOOL4 v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  float v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  WTF *v15;
  uint64_t v17;
  float v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  __int16 v27;
  unsigned int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  int v34;
  BOOL v35;
  _QWORD v36[2];
  WTF *v37;
  uint64_t v38;
  _QWORD v39[151];
  char v40;
  char v41;
  char v42;
  __int128 v43;
  char v44;
  char v45;
  int v46;
  uint64_t v47;
  char v48;
  char v49;
  _QWORD v50[2];
  int v51;
  WTF *v52[2];
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  uint64_t v57;
  _BYTE v58[312];
  WTF *v59;
  int v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  char v66;
  char v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  int v71;
  __int128 v72;
  __int128 v73;
  char v74;
  char v75;
  _BYTE *v76;
  uint64_t v77;
  _BYTE v78[40];

  if (*((_BYTE *)this + 48))
    v2 = this[2] == 0;
  else
    v2 = 0;
  v3 = (uint64_t)*this;
  v4 = this[1];
  v5 = **this;
  v6 = (uint64_t)(v4 + 2);
  v7 = *((unsigned int *)v4 + 7);
  if ((_DWORD)v7 != 1
    || (v17 = *(_QWORD *)(v5 + 40), *(_BYTE *)(v17 + 180) != 4)
    || *(_BYTE *)(v17 + 181)
    || (*(_BYTE *)(v17 + 182) ? (v18 = *(float *)(v17 + 176)) : (v18 = (float)*(int *)(v17 + 176)),
        v18 != 0.0
     || ((*(_WORD *)(*(_QWORD *)v6 + 21) & 0x30) != 0x10 ? (v19 = *(_QWORD *)v6 == 0) : (v19 = 1),
         !v19 ? (v20 = (*(_WORD *)(*(_QWORD *)v6 + 21) & 0xF) == 0) : (v20 = 0),
         !v20)))
  {
    if (*((_BYTE *)this + 48))
    {
      if (!*((_BYTE *)this + 56) || (*(_DWORD *)(v5 + 56) & 0x28000000) != 0x8000000)
      {
LABEL_7:
        v8 = this[2];
        if (!v8)
          goto LABEL_8;
        v26 = (unint64_t)v8 - 1;
        if (v26 >= v7)
          goto LABEL_8;
        v9 = *(_QWORD *)(*(_QWORD *)v6 + 24 * v26);
        v27 = *(_WORD *)(v9 + 12);
        if (!v9 || (v27 & 0x40) == 0)
          goto LABEL_8;
        v29 = *(_DWORD *)(v9 + 32) & 0x1F;
        v30 = v29 > 0x18;
        v31 = (1 << v29) & 0x1400001;
        v32 = v30 || v31 == 0;
        if (v32
          || ((v33 = v27 & 0xF, v30 = v33 > 0xB, v34 = (1 << v33) & 0x884, !v30) ? (v35 = v34 == 0) : (v35 = 1), !v35))
        {
LABEL_8:
          v9 = **this;
        }
        WebCore::Layout::TextOnlySimpleLineBuilder::TextOnlySimpleLineBuilder((uint64_t)v36, v3, v9, 0, v6);
        v11 = WebCore::Layout::IntrinsicWidthHandler::computedIntrinsicWidthForConstraint((uint64_t)this, 1, (uint64_t)v36, v2);
        v36[0] = &unk_1E33F2BC8;
        if (v61)
        {
          v12 = v59;
          if (v59)
          {
            v59 = 0;
            v60 = 0;
            WTF::fastFree(v12, v10);
          }
        }
        v13 = v56;
        if (v58 != (_BYTE *)v56 && v56)
        {
          v56 = 0;
          LODWORD(v57) = 0;
          WTF::fastFree(v13, v10);
        }
        v14 = v52[0];
        if (v52[0])
        {
          v52[0] = 0;
          LODWORD(v52[1]) = 0;
          WTF::fastFree(v14, v10);
        }
        if (v50[0])
          WTF::fastFree((WTF *)(v50[0] - 16), v10);
        v15 = v37;
        if (v39 != (_QWORD *)v37)
        {
          if (v37)
          {
            v37 = 0;
            LODWORD(v38) = 0;
            WTF::fastFree(v15, v10);
          }
        }
        return v11;
      }
      if ((_DWORD)v7)
      {
        v21 = *(_QWORD *)v6;
        v22 = 24 * v7;
        while (!v21 || (*(_WORD *)(v21 + 21) & 0x4F) != 0)
        {
          v21 += 24;
          v22 -= 24;
          if (!v22)
            return *((float *)this + 13);
        }
        goto LABEL_7;
      }
      return *((float *)this + 13);
    }
    else
    {
      v37 = (WTF *)v39;
      v38 = 10;
      v39[150] = &v37;
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      v49 = 0;
      v51 = 0;
      v43 = 0u;
      *(_QWORD *)((char *)v50 + 7) = 0;
      v50[0] = 0;
      v53 = 0u;
      *(_OWORD *)v52 = 0u;
      v23 = v4[2];
      v24 = *((unsigned int *)v4 + 7);
      v54 = v23;
      v55 = v24;
      v56 = (WTF *)v58;
      v57 = 32;
      v58[256] = 0;
      v58[280] = 0;
      v58[288] = 0;
      v61 = 0;
      v62 = v3;
      v63 = v5;
      v64 = 0;
      v65 = 0;
      v66 = 0;
      v67 = 0;
      v36[0] = &off_1E33F2C50;
      v36[1] = v3;
      v68 = v3 + 16;
      v75 = 0;
      v71 = 0;
      v70 = 0;
      v69 = 0u;
      v74 = 0;
      v73 = 0u;
      v72 = 0u;
      v76 = v78;
      v77 = 1;
      v78[24] = 0;
      v78[28] = 0;
      v78[32] = 0;
      v11 = WebCore::Layout::IntrinsicWidthHandler::computedIntrinsicWidthForConstraint((uint64_t)this, 1, (uint64_t)v36, v2);
      WebCore::Layout::LineBuilder::~LineBuilder((WebCore::Layout::LineBuilder *)v36, v25);
    }
    return v11;
  }
  return WebCore::Layout::IntrinsicWidthHandler::simplifiedMaximumWidth((uint64_t *)this, v2);
}

void WebCore::Layout::LineBuilder::~LineBuilder(WebCore::Layout::LineBuilder *this, void *a2)
{
  WTF *v3;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;
  WebCore::Layout::PlacedFloats::Item *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = (WTF *)*((_QWORD *)this + 235);
  if ((WebCore::Layout::LineBuilder *)((char *)this + 1896) != v3 && v3 != 0)
  {
    *((_QWORD *)this + 235) = 0;
    *((_DWORD *)this + 472) = 0;
    WTF::fastFree(v3, a2);
  }
  v5 = (WTF *)*((_QWORD *)this + 232);
  if (v5)
  {
    *((_QWORD *)this + 232) = 0;
    *((_DWORD *)this + 466) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = *((unsigned int *)this + 463);
  if ((_DWORD)v6)
  {
    v13 = (WebCore::Layout::PlacedFloats::Item *)*((_QWORD *)this + 230);
    v14 = 120 * v6;
    do
    {
      WebCore::Layout::PlacedFloats::Item::~Item(v13);
      v13 = (WebCore::Layout::PlacedFloats::Item *)(v15 + 120);
      v14 -= 120;
    }
    while (v14);
  }
  v7 = (WTF *)*((_QWORD *)this + 230);
  if (v7)
  {
    *((_QWORD *)this + 230) = 0;
    *((_DWORD *)this + 462) = 0;
    WTF::fastFree(v7, a2);
  }
  *(_QWORD *)this = &unk_1E33F2BC8;
  if (*((_BYTE *)this + 1752))
  {
    v8 = (WTF *)*((_QWORD *)this + 217);
    if (v8)
    {
      *((_QWORD *)this + 217) = 0;
      *((_DWORD *)this + 436) = 0;
      WTF::fastFree(v8, a2);
    }
  }
  v9 = (WTF *)*((_QWORD *)this + 176);
  if ((WebCore::Layout::LineBuilder *)((char *)this + 1424) != v9 && v9)
  {
    *((_QWORD *)this + 176) = 0;
    *((_DWORD *)this + 354) = 0;
    WTF::fastFree(v9, a2);
  }
  v10 = (WTF *)*((_QWORD *)this + 170);
  if (v10)
  {
    *((_QWORD *)this + 170) = 0;
    *((_DWORD *)this + 342) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = *((_QWORD *)this + 167);
  if (v11)
    WTF::fastFree((WTF *)(v11 - 16), a2);
  v12 = (WTF *)*((_QWORD *)this + 2);
  if ((WebCore::Layout::LineBuilder *)((char *)this + 32) != v12)
  {
    if (v12)
    {
      *((_QWORD *)this + 2) = 0;
      *((_DWORD *)this + 6) = 0;
      WTF::fastFree(v12, a2);
    }
  }
}

{
  WebCore::Layout::LineBuilder::~LineBuilder(this, a2);
  JUMPOUT(0x19AEA7644);
}

float WebCore::Layout::IntrinsicWidthHandler::computedIntrinsicWidthForConstraint(uint64_t a1, int a2, uint64_t a3, char a4)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v10;
  void (***v11)(__int128 *__return_ptr, _QWORD, _QWORD *, uint64_t *);
  uint64_t v12;
  unint64_t v13;
  float v14;
  float v15;
  float v16;
  unint64_t v17;
  _BOOL4 v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int *v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  float v52;
  float v53;
  float v54;
  BOOL v55;
  unint64_t v56;
  BOOL v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  int v63;
  int v64;
  WTF *v65;
  WTF *v66;
  WTF *v67;
  WTF *v68;
  WTF *v69;
  char v70;
  uint64_t v71;
  WTF *v72;
  uint64_t v73;
  WTF *v74;
  uint64_t v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  WTF *v79;
  __int128 v80;
  WTF *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  uint64_t v87;
  WTF *v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  WTF *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  float v97;
  WTF *v98;
  char v100;
  _DWORD **v101;
  uint64_t v102;
  _DWORD *v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  _DWORD **v111;
  uint64_t v112;
  _DWORD *v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _OWORD *v125;
  uint64_t v126;
  _OWORD *v127;
  uint64_t v128;
  int v129;
  char v130;
  int v131;
  char v132;
  int v133;
  int v134;
  WTF *__dst;
  unint64_t v137;
  unint64_t v138;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  int v143;
  _QWORD v144[5];
  float v145;
  int v146;
  __int128 v147;
  __int128 v148;
  WTF *v149;
  int v150;
  unsigned int v151;
  _BYTE v152[1200];
  WTF *v153;
  uint64_t v154;
  WTF *v155;
  uint64_t v156;
  unsigned __int8 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  WTF *v162;
  uint64_t v163;
  char v164;
  __int16 v165;
  uint64_t v166;
  int v167;
  _OWORD v168[2];
  uint64_t v169;
  int v170;
  char v171;
  BOOL v172;
  BOOL v173;
  char v174;
  WTF *v175;
  int v176;
  int v177;
  char v178;

  if (a2 == 1)
    v4 = 0x7FFFFFFF;
  else
    v4 = 0;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  if (v5 == v8 && v6 == v7)
    return 0.0;
  LOBYTE(v10) = a4;
  v11 = (void (***)(__int128 *__return_ptr, _QWORD, _QWORD *, uint64_t *))a3;
  v141 = 0;
  v142 = 0;
  v143 = 0;
  v12 = 0;
  v13 = v5 >> 8;
  LOBYTE(v169) = 0;
  v178 = 0;
  *(_DWORD *)(a3 + 1788) = a2;
  *(_BYTE *)(a3 + 1792) = 1;
  *(_BYTE *)(a3 + 1784) = a2 == 0;
  __dst = (WTF *)(a1 + 112);
  v140 = v7;
  v126 = a1 + 1352;
  v127 = (_OWORD *)(a1 + 64);
  v125 = (_OWORD *)(a1 + 1456);
  v14 = 0.0;
  v15 = 0.0;
  v16 = 0.0;
  v138 = v8;
  do
  {
    v144[0] = v5 | (v13 << 8);
    v144[1] = v6;
    v144[2] = v8;
    v144[3] = v7;
    v144[4] = 0;
    v145 = (float)v4 * 0.015625;
    v146 = 0;
    (**v11)(&v147, v11, v144, &v169);
    if (v151)
      v18 = *((unsigned __int8 *)v149 + 120 * v151 - 120) - 3 < 2;
    else
      v18 = 0;
    if (HIDWORD(v154))
    {
      v19 = 0;
      v20 = 0;
      v21 = 120 * HIDWORD(v154);
      v22 = (unsigned int *)((char *)v153 + 44);
      do
      {
        v23 = *(v22 - 6);
        v24 = *(v22 - 4);
        v25 = *(v22 - 3);
        v26 = *v22;
        v17 = v22[1];
        v27 = v22[4];
        v28 = v22[5];
        v29 = v22[9];
        v30 = v22[10];
        v31 = __OFSUB__(v30, v24);
        v32 = v30 - v24;
        v33 = *(v22 - 9);
        v22 += 30;
        v34 = (v30 >> 31) + 0x7FFFFFFF;
        if (!v31)
          v34 = v32;
        v31 = __OFADD__(v27, v23);
        v35 = v27 + v23;
        v36 = (v27 >> 31) + 0x7FFFFFFF;
        if (v31)
          v35 = v36;
        v31 = __OFADD__(v35, v28);
        v37 = v35 + v28;
        v38 = (v35 >> 31) + 0x7FFFFFFF;
        if (!v31)
          v38 = v37;
        v31 = __OFADD__(v26, v38);
        v39 = v26 + v38;
        v40 = (v26 >> 31) + 0x7FFFFFFF;
        if (v31)
          v39 = v40;
        v31 = __OFADD__(v39, v29);
        v41 = v39 + v29;
        v42 = (v39 >> 31) + 0x7FFFFFFF;
        if (!v31)
          v42 = v41;
        v31 = __OFADD__(v42, (_DWORD)v17);
        v43 = v42 + v17;
        v44 = (v42 >> 31) + 0x7FFFFFFF;
        if (!v31)
          v44 = v43;
        v31 = __OFADD__(v24, v44);
        v45 = v24 + v44;
        v46 = (v24 >> 31) + 0x7FFFFFFF;
        if (v31)
          v45 = v46;
        v31 = __OFADD__(v45, v25);
        v47 = v45 + v25;
        v48 = (v45 >> 31) + 0x7FFFFFFF;
        if (!v31)
          v48 = v47;
        v49 = v4 - v34;
        if (__OFSUB__(v4, v34))
          v49 = 0x7FFFFFFF;
        if (v20 > v49)
          v49 = v20;
        v31 = __OFADD__(v34, v48);
        v50 = v34 + v48;
        if (v31)
          v50 = (v34 >> 31) + 0x7FFFFFFF;
        if (v19 > v50)
          v50 = v19;
        if (v33)
          v20 = v49;
        else
          v19 = v50;
        v21 -= 120;
      }
      while (v21);
      LOBYTE(v10) = 0;
    }
    else
    {
      v20 = 0;
      v19 = 0;
    }
    v31 = __OFADD__(v19, v20);
    v51 = v19 + v20;
    if (v31)
      v51 = 0x7FFFFFFF;
    v52 = (float)(*((float *)&v159 + 1) + *((float *)&v158 + 1)) + (float)((float)v51 * 0.015625);
    if (v16 < v52)
      v16 = (float)(*((float *)&v159 + 1) + *((float *)&v158 + 1)) + (float)((float)v51 * 0.015625);
    v53 = v14 + (float)(*(float *)&v161 + v52);
    if (v15 >= v53)
      v54 = v15;
    else
      v54 = v53;
    if (v18)
      v14 = 0.0;
    else
      v14 = v53;
    if (v18)
      v15 = v54;
    v6 = *((_QWORD *)&v148 + 1);
    v55 = (HIDWORD(v154) | v157) != 0;
    if (!v143 || (v56 = v142 | (v141 << 8), v56 < (unint64_t)v148))
    {
      v5 = v148;
      goto LABEL_63;
    }
    if (v56 == (_QWORD)v148)
    {
      if (*((_QWORD *)&v148 + 1) != v137)
        v55 = 0;
      if (v137 < *((_QWORD *)&v148 + 1))
      {
        v5 = v148;
        v8 = v138;
        v11 = (void (***)(__int128 *__return_ptr, _QWORD, _QWORD *, uint64_t *))a3;
        v7 = v140;
        goto LABEL_63;
      }
      v5 = v148;
      v8 = v138;
      v11 = (void (***)(__int128 *__return_ptr, _QWORD, _QWORD *, uint64_t *))a3;
      v7 = v140;
      if (v55)
        goto LABEL_63;
    }
    if ((_QWORD)v148 != v8 || (v5 = v8, v6 = v7, *((_QWORD *)&v148 + 1) != v7))
    {
      v6 = 0;
      if (v8 >= (uint64_t)v148 + 1)
        v5 = v148 + 1;
      else
        v5 = v8;
    }
LABEL_63:
    v13 = v5 >> 8;
    v57 = v5 == v8 && v6 == v7;
    v58 = !v57;
    if (v57)
    {
      v128 = v12;
      v70 = v10;
      if (*(_BYTE *)(a1 + 1488))
      {
        v71 = *(_QWORD *)(a1 + 1440);
        if (v71)
        {
          v121 = v58;
          WTF::fastFree((WTF *)(v71 - 16), (void *)v17);
          v58 = v121;
          v70 = v10;
        }
        v72 = *(WTF **)(a1 + 1408);
        v73 = a1;
        if (v72)
        {
          *(_QWORD *)(a1 + 1408) = 0;
          *(_DWORD *)(a1 + 1416) = 0;
          v108 = v58;
          WTF::fastFree(v72, (void *)v17);
          v58 = v108;
          v70 = v10;
          v73 = a1;
        }
        v74 = *(WTF **)(v73 + 1328);
        if (v74)
        {
          *(_QWORD *)(v73 + 1328) = 0;
          *(_DWORD *)(v73 + 1336) = 0;
          v122 = v58;
          WTF::fastFree(v74, (void *)v17);
          v58 = v122;
          v70 = v10;
          v73 = a1;
        }
        v75 = v73;
        v76 = *(unsigned int *)(v73 + 1324);
        if ((_DWORD)v76)
        {
          v111 = (_DWORD **)(*(_QWORD *)(v75 + 1312) + 96);
          v112 = 120 * v76;
          do
          {
            v113 = *v111;
            *v111 = 0;
            if (v113)
            {
              if (v113[2] == 1)
              {
                v116 = v58;
                v124 = v112;
                (*(void (**)(_DWORD *))(*(_QWORD *)v113 + 8))(v113);
                v112 = v124;
                v58 = v116;
                v70 = v10;
              }
              else
              {
                --v113[2];
              }
            }
            v114 = (uint64_t)*(v111 - 12);
            if (v114)
            {
              v115 = *(_DWORD *)(v114 + 8);
              if (!v115)
              {
                __break(0xC471u);
                JUMPOUT(0x1943A5470);
              }
              *(_DWORD *)(v114 + 8) = v115 - 1;
            }
            v111 += 15;
            v112 -= 120;
            v75 = a1;
          }
          while (v112);
        }
        v77 = *(WTF **)(v75 + 1312);
        v78 = v75;
        if (v77)
        {
          *(_QWORD *)(v75 + 1312) = 0;
          *(_DWORD *)(v75 + 1320) = 0;
          v110 = v58;
          WTF::fastFree(v77, (void *)v17);
          v58 = v110;
          v70 = v10;
          v78 = a1;
        }
        v79 = *(WTF **)(v78 + 96);
        v7 = v140;
        if (__dst != v79 && v79)
        {
          *(_QWORD *)(v78 + 96) = 0;
          *(_DWORD *)(v78 + 104) = 0;
          v117 = v58;
          WTF::fastFree(v79, (void *)v17);
          v58 = v117;
          v70 = v10;
          v78 = a1;
        }
        *(_BYTE *)(v78 + 1488) = 0;
      }
      if (v70)
      {
        v80 = v148;
        *v127 = v147;
        v127[1] = v80;
        *(_QWORD *)(a1 + 96) = __dst;
        *(_DWORD *)(a1 + 104) = 10;
        v81 = v149;
        if (v149 == (WTF *)v152)
        {
          v82 = v151;
          if (v151)
          {
            v83 = v58;
            memcpy(__dst, v152, 120 * ((120 * (unint64_t)v151 - 120) / 0x78) + 120);
            v58 = v83;
          }
          v84 = a1;
        }
        else
        {
          v149 = (WTF *)v152;
          *(_QWORD *)(a1 + 96) = v81;
          v109 = v150;
          v82 = v151;
          v150 = 10;
          v84 = a1;
          *(_DWORD *)(a1 + 104) = v109;
        }
        v151 = 0;
        *(_DWORD *)(v84 + 108) = v82;
        v85 = v84;
        v86 = v153;
        v153 = 0;
        *(_QWORD *)(v85 + 1312) = v86;
        v87 = v154;
        v154 = 0;
        *(_QWORD *)(v85 + 1320) = v87;
        v88 = v155;
        v155 = 0;
        *(_QWORD *)(v85 + 1328) = v88;
        v89 = v156;
        v156 = 0;
        *(_QWORD *)(v85 + 1336) = v89;
        *(_BYTE *)(v85 + 1344) = v157;
        v90 = v158;
        v91 = v159;
        v92 = v160;
        *(_QWORD *)(v126 + 48) = v161;
        *(_OWORD *)(v126 + 16) = v91;
        *(_OWORD *)(v126 + 32) = v92;
        *(_OWORD *)v126 = v90;
        v93 = v162;
        v162 = 0;
        *(_QWORD *)(v85 + 1408) = v93;
        *(_QWORD *)&v90 = v163;
        v163 = 0;
        *(_QWORD *)(v85 + 1416) = v90;
        *(_BYTE *)(v85 + 1424) = v164;
        *(_WORD *)(v85 + 1432) = v165;
        v94 = v166;
        v166 = 0;
        *(_QWORD *)(v85 + 1440) = v94;
        *(_DWORD *)(v85 + 1448) = v167;
        v95 = v168[0];
        *(_OWORD *)((char *)v125 + 9) = *(_OWORD *)((char *)v168 + 9);
        *v125 = v95;
        v10 = 1;
        *(_BYTE *)(v85 + 1488) = 1;
        v12 = v128;
      }
      else
      {
        v10 = 0;
        v12 = v128;
      }
    }
    else
    {
      v59 = v178 && v173 || v151 != 0;
      v142 = v5;
      v60 = v12 + 1;
      v170 = HIDWORD(v158);
      v171 = v159;
      v61 = v12;
      v62 = v155;
      v155 = 0;
      v63 = v156;
      v64 = HIDWORD(v156);
      v156 = 0;
      v169 = v61;
      v172 = v18;
      v173 = v59;
      v174 = 0;
      if (v178)
      {
        v65 = v175;
        if (v175)
        {
          v175 = 0;
          v176 = 0;
          v120 = v58;
          WTF::fastFree(v65, (void *)v17);
          v58 = v120;
        }
        v10 = 0;
        v175 = v62;
        v143 = 1;
        v141 = v5 >> 8;
        v137 = v6;
        v12 = v60;
        v176 = v63;
        v177 = v64;
      }
      else
      {
        v10 = 0;
        v175 = v62;
        v176 = v63;
        v177 = v64;
        v143 = 1;
        v178 = 1;
        v141 = v5 >> 8;
        v137 = v6;
        v12 = v60;
      }
      v8 = v138;
      v11 = (void (***)(__int128 *__return_ptr, _QWORD, _QWORD *, uint64_t *))a3;
      v7 = v140;
    }
    if (v166)
    {
      v133 = v10;
      v118 = v58;
      WTF::fastFree((WTF *)(v166 - 16), (void *)v17);
      v58 = v118;
      v10 = v133;
    }
    v66 = v162;
    if (v162)
    {
      v162 = 0;
      LODWORD(v163) = 0;
      v129 = v10;
      v96 = v58;
      WTF::fastFree(v66, (void *)v17);
      v58 = v96;
      v10 = v129;
    }
    v67 = v155;
    if (v155)
    {
      v155 = 0;
      LODWORD(v156) = 0;
      v134 = v10;
      v119 = v58;
      WTF::fastFree(v67, (void *)v17);
      v58 = v119;
      v10 = v134;
    }
    v68 = v153;
    if (HIDWORD(v154))
    {
      v101 = (_DWORD **)((char *)v153 + 96);
      v102 = 120 * HIDWORD(v154);
      do
      {
        v103 = *v101;
        *v101 = 0;
        if (v103)
        {
          if (v103[2] == 1)
          {
            v131 = v10;
            v106 = v58;
            v123 = v102;
            (*(void (**)(_DWORD *))(*(_QWORD *)v103 + 8))(v103);
            v102 = v123;
            v58 = v106;
            v10 = v131;
          }
          else
          {
            --v103[2];
          }
        }
        v104 = (uint64_t)*(v101 - 12);
        if (v104)
        {
          v105 = *(_DWORD *)(v104 + 8);
          if (!v105)
          {
            __break(0xC471u);
            JUMPOUT(0x1943A5390);
          }
          *(_DWORD *)(v104 + 8) = v105 - 1;
        }
        v101 += 15;
        v102 -= 120;
      }
      while (v102);
      v68 = v153;
      v7 = v140;
    }
    if (v68)
    {
      v153 = 0;
      LODWORD(v154) = 0;
      v130 = v10;
      v100 = v58;
      WTF::fastFree(v68, (void *)v17);
      LOBYTE(v58) = v100;
      LOBYTE(v10) = v130;
    }
    v69 = v149;
    if (v152 != (_BYTE *)v149 && v149)
    {
      v149 = 0;
      v150 = 0;
      v132 = v10;
      v107 = v58;
      WTF::fastFree(v69, (void *)v17);
      LOBYTE(v58) = v107;
      LOBYTE(v10) = v132;
    }
  }
  while ((v58 & 1) != 0);
  if (v14 >= v15)
    v97 = v14;
  else
    v97 = v15;
  *(float *)(a1 + 52) = v97;
  *(_BYTE *)(a1 + 56) = 1;
  if (v178)
  {
    v98 = v175;
    if (v175)
    {
      v175 = 0;
      v176 = 0;
      WTF::fastFree(v98, (void *)v17);
    }
  }
  return v16;
}

float WebCore::Layout::TextOnlySimpleLineBuilder::layoutInlineContent@<S0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, WebCore::FontCascadeDescription *a3@<X2>, const WebCore::RenderStyle *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, float a10@<S0>)
{
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;
  uint64_t *v14;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  WTF *v23;
  uint64_t *v24;
  uint64_t v25;
  WTF *v26;
  WebCore::Layout::Line *v27;
  WTF **v28;
  WTF *v29;
  WTF *v30;
  WTF *v31;
  uint64_t v32;
  unsigned int v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _QWORD *v44;
  _DWORD *v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  float v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  float v65;
  uint64_t v66;
  float v67;
  _OWORD *v68;
  __int128 v69;
  WTF **v70;
  unsigned int v71;
  unsigned int v72;
  WTF *v73;
  int v74;
  WebCore::Layout::Box *v75;
  uint64_t LineStyle;
  unint64_t v77;
  float v78;
  uint64_t v79;
  uint64_t *v80;
  __int16 v81;
  int v82;
  BOOL v83;
  int v84;
  uint64_t v85;
  WTF **v86;
  _QWORD *v87;
  WebCore::FontCascadeFonts *v88;
  const WebCore::FontCascadeDescription *v89;
  uint64_t v90;
  WTF *v91;
  float *v92;
  float v93;
  float v94;
  unsigned int v95;
  int v96;
  int *v97;
  __int16 v98;
  float v99;
  WebCore::FontCascadeFonts *v100;
  uint64_t v101;
  WTF *v102;
  uint64_t v103;
  uint64_t v104;
  const WebCore::FontCascade *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  _BOOL4 v113;
  uint64_t v114;
  BOOL v115;
  int v116;
  int v117;
  float v118;
  uint64_t v119;
  float v120;
  uint64_t v121;
  WTF *v122;
  float v123;
  float v124;
  __int128 *v125;
  uint64_t v126;
  uint64_t v127;
  __int128 *v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  int v132;
  float v133;
  char v134;
  int v136;
  float v137;
  float v138;
  char v139;
  char v140;
  float v141;
  float v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  float result;
  BOOL v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  unsigned int v154;
  float v155;
  int v156;
  unsigned int v157;
  unsigned int v158;
  BOOL v159;
  uint64_t *v160;
  unsigned int v161;
  uint64_t v162;
  WebCore::FontCascadeDescription *v163;
  WTF *v164;
  uint64_t v165;
  void *v166;
  void *v167;
  WTF *v168;
  WebCore::FontCascadeDescription *v169;
  uint64_t v170;
  WebCore::FontCascadeDescription *v171;
  uint64_t v172;
  WTF *v173;
  void *v174;
  WTF *v175;
  void *v176;
  uint64_t v177;
  int v178;
  _BOOL4 v179;
  uint64_t v180;
  uint64_t v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  unsigned int v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  WTF *v205;
  WTF *v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  WTF *v212;
  uint64_t v213;
  WTF *v214;
  WebCore::FontCascade *v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  WTF *v219;
  WTF *v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  WTF *v226;
  uint64_t v227;
  WTF *v228;
  uint64_t v229;
  int v230;
  uint64_t *v231;
  uint64_t v232;
  unsigned int v233;
  int v234;
  int v235;
  WebCore::FontCascadeDescription *v236;
  uint64_t *v237;
  WebCore::FontCascadeDescription *v238;
  uint64_t v239;
  WTF *v240;
  WTF *v241;
  int v242;
  uint64_t v243;
  WTF *v244;
  WTF *v245;
  int v246;
  uint64_t *v247;
  WebCore::FontCascadeDescription *v248;
  WTF *v249;
  WebCore::FontCascadeDescription *v250;
  WTF *v251;
  uint64_t v252;
  WebCore::FontCascadeDescription *v253;
  uint64_t v254;
  unsigned int v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  int v260;
  WebCore::FontCascadeDescription *v261;
  void *v262;
  WebCore::FontCascadeDescription *v263;
  WTF *v264;
  WTF *v265;
  uint64_t *v266;
  WTF *v267;
  WebCore::FontCascadeDescription *v268;
  WebCore::Layout::Line *v269;
  _DWORD *v270;
  uint64_t v271;
  WTF *v272[2];
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  uint64_t v279;
  int v280;
  float v281;
  BOOL v282;
  float v283;
  int v284;
  char v285;
  uint64_t v286;
  WTF *v287;
  uint64_t v288;
  _QWORD v289[3];
  uint64_t v290;
  uint64_t v291;
  float v292;
  BOOL v293;
  int v294[3];

  v14 = a2;
  *(_DWORD *)(a1 + 1420) = 0;
  *(_BYTE *)(a1 + 1680) = 0;
  *(_BYTE *)(a1 + 1704) = 0;
  if (*(_BYTE *)(a1 + 1752))
  {
    v17 = *(WTF **)(a1 + 1736);
    if (v17)
    {
      *(_QWORD *)(a1 + 1736) = 0;
      *(_DWORD *)(a1 + 1744) = 0;
      v263 = a3;
      WTF::fastFree(v17, a2);
      a3 = v263;
    }
    *(_BYTE *)(a1 + 1752) = 0;
  }
  LODWORD(v18) = *((unsigned __int8 *)a3 + 40);
  if (!*((_BYTE *)a3 + 40))
  {
LABEL_10:
    LOBYTE(v21) = 0;
    LOBYTE(v19) = 0;
    goto LABEL_11;
  }
  v19 = v14[1];
  if (v19)
  {
    v10 = *v14;
    if (*(_QWORD *)(a1 + 1400) <= (unint64_t)*v14)
      goto LABEL_268;
    v11 = *(_QWORD *)(a1 + 1392);
    v20 = (uint64_t *)(v11 + 24 * v10);
    v12 = *(_WORD *)((char *)v20 + 21);
    if ((v12 & 0xF) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1943A67F8);
    }
    v18 = *(unsigned int *)(v11 + 24 * v10 + 12);
    if (v19 == v18)
      goto LABEL_10;
    v150 = v18 >= v19;
    LODWORD(v18) = v18 - v19;
    if (!v150)
    {
      __break(0xC471u);
      JUMPOUT(0x1943A682CLL);
    }
    v21 = *v20;
    if ((*(_WORD *)(v21 + 12) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1943A684CLL);
    }
    v151 = *((_QWORD *)a3 + 1);
    v11 += 24 * v10;
    LODWORD(v10) = *(_DWORD *)(v11 + 16) + v19;
    LOBYTE(v11) = *(_BYTE *)(v11 + 20);
    a10 = *(float *)&v151;
    if ((v151 & 0xFF00000000) == 0)
      a10 = 0.0;
    v12 = v12 & 0x1B0 | (((v151 & 0xFF00000000) != 0) << 6);
    v13 = v21 >> 8;
    LOBYTE(v19) = 1;
  }
  else
  {
    LOBYTE(v21) = 0;
  }
LABEL_11:
  v22 = (_QWORD *)(a1 + 1260);
  *(_BYTE *)(a1 + 1680) = v21;
  *(_DWORD *)(a1 + 1681) = v13;
  *(_BYTE *)(a1 + 1687) = BYTE6(v13);
  *(_WORD *)(a1 + 1685) = WORD2(v13);
  *(float *)(a1 + 1688) = a10;
  *(_DWORD *)(a1 + 1692) = v18;
  *(_DWORD *)(a1 + 1696) = v10;
  *(_BYTE *)(a1 + 1700) = v11;
  *(_WORD *)(a1 + 1701) = v12;
  *(_BYTE *)(a1 + 1704) = v19;
  v23 = (WTF *)v289;
  v287 = (WTF *)v289;
  v288 = 1;
  *(_BYTE *)(a1 + 1349) = 1;
  v24 = (uint64_t *)(a1 + 1336);
  v25 = *(_QWORD *)(a1 + 1336);
  if (v25)
  {
    *v24 = 0;
    v253 = a3;
    WTF::fastFree((WTF *)(v25 - 16), a2);
    v24 = (uint64_t *)(a1 + 1336);
    v23 = (WTF *)v289;
    a3 = v253;
  }
  *(_DWORD *)(a1 + 1344) = 0;
  *(_DWORD *)(a1 + 1352) = 0;
  *(_QWORD *)(a1 + 1320) = 0;
  *(_BYTE *)(a1 + 1348) = 0;
  *(_BYTE *)(a1 + 1350) = 0;
  *(_DWORD *)(a1 + 1312) = 0;
  if (*(_DWORD *)(a1 + 1368))
  {
    v247 = v24;
    v248 = a3;
    if (*(_DWORD *)(a1 + 1372))
      *(_DWORD *)(a1 + 1372) = 0;
    v249 = *(WTF **)(a1 + 1360);
    if (v249)
    {
      *(_QWORD *)(a1 + 1360) = 0;
      *(_DWORD *)(a1 + 1368) = 0;
      WTF::fastFree(v249, a2);
      v24 = v247;
      v23 = (WTF *)v289;
      a3 = v248;
    }
  }
  if (!*(_DWORD *)(a1 + 24))
    goto LABEL_19;
  if (*(_DWORD *)(a1 + 28))
    *(_DWORD *)(a1 + 28) = 0;
  v26 = *(WTF **)(a1 + 16);
  if ((WTF *)(a1 + 32) != v26)
  {
    if (!v26)
      goto LABEL_363;
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    v236 = a3;
    v237 = v24;
    WTF::fastFree(v26, a2);
    v24 = v237;
    v23 = (WTF *)v289;
    a3 = v236;
    v26 = *(WTF **)(a1 + 16);
  }
  if (!v26)
  {
LABEL_363:
    *(_QWORD *)(a1 + 16) = a1 + 32;
    *(_DWORD *)(a1 + 24) = 10;
  }
LABEL_19:
  v27 = (WebCore::Layout::Line *)(a1 + 8);
  *(_BYTE *)(a1 + 1256) = 0;
  v28 = (WTF **)(a1 + 16);
  *(_BYTE *)(a1 + 1240) = 0;
  *(_BYTE *)(a1 + 1248) = 0;
  *(_DWORD *)(a1 + 1268) = 0;
  *v22 = 0;
  *(_BYTE *)(a1 + 1280) = 0;
  *(_BYTE *)(a1 + 1304) = 0;
  *(_BYTE *)(a1 + 1328) = 0;
  *(_BYTE *)(a1 + 1332) = 0;
  v29 = v287;
  v269 = (WebCore::Layout::Line *)(a1 + 8);
  if (HIDWORD(v288))
  {
    v270 = (_DWORD *)(a1 + 1260);
    v271 = (uint64_t)v14;
    v30 = (WTF *)((char *)v287 + 24 * HIDWORD(v288));
    do
    {
      while (1)
      {
        v31 = *(WTF **)v29;
        v32 = *(_QWORD *)v29 + 16;
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v29 + 24) + 8) + 68) & 8) != 0)
          break;
        v33 = *(_DWORD *)(a1 + 28);
        if (v33)
        {
          v34 = *((float *)*v28 + 30 * v33 - 24) + *((float *)*v28 + 30 * v33 - 23);
          v35 = *(unsigned int *)(a1 + 28);
        }
        else
        {
          v35 = 0;
          v34 = 0.0;
        }
        LOBYTE(v272[0]) = 11;
        v272[1] = v31;
        *(_QWORD *)&v273 = v32;
        *((_QWORD *)&v273 + 1) = LODWORD(v34);
        LOBYTE(v274) = 4;
        DWORD1(v274) = 0;
        BYTE8(v274) = *((_BYTE *)v29 + 20);
        LOBYTE(v275) = 0;
        LOBYTE(v276) = 0;
        BYTE8(v276) = 0;
        LOBYTE(v277) = 0;
        BYTE8(v277) = 0;
        LOBYTE(v279) = 0;
        if (v33 == *(_DWORD *)(a1 + 24))
        {
          v267 = v23;
          v268 = a3;
          v266 = v24;
          v180 = WTF::Vector<WebCore::Layout::Line::Run,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 16, (void *)(v35 + 1), (unint64_t)v272);
          v24 = v266;
          v23 = v267;
          a3 = v268;
          v27 = v269;
          v181 = *(_QWORD *)(a1 + 16) + 120 * *(unsigned int *)(a1 + 28);
          v183 = *(_OWORD *)(v180 + 80);
          v182 = *(_OWORD *)(v180 + 96);
          v184 = *(_OWORD *)(v180 + 64);
          *(_QWORD *)(v181 + 112) = *(_QWORD *)(v180 + 112);
          *(_OWORD *)(v181 + 80) = v183;
          *(_OWORD *)(v181 + 96) = v182;
          *(_OWORD *)(v181 + 64) = v184;
          v185 = *(_OWORD *)v180;
          v186 = *(_OWORD *)(v180 + 16);
          v187 = *(_OWORD *)(v180 + 48);
          *(_OWORD *)(v181 + 32) = *(_OWORD *)(v180 + 32);
          *(_OWORD *)(v181 + 48) = v187;
          *(_OWORD *)v181 = v185;
          *(_OWORD *)(v181 + 16) = v186;
        }
        else
        {
          v36 = (uint64_t)*v28 + 120 * v35;
          v37 = *(_OWORD *)v272;
          v38 = v273;
          v39 = v275;
          *(_OWORD *)(v36 + 32) = v274;
          *(_OWORD *)(v36 + 48) = v39;
          *(_OWORD *)v36 = v37;
          *(_OWORD *)(v36 + 16) = v38;
          v40 = v276;
          v41 = v277;
          v42 = v278;
          *(_QWORD *)(v36 + 112) = v279;
          *(_OWORD *)(v36 + 80) = v41;
          *(_OWORD *)(v36 + 96) = v42;
          *(_OWORD *)(v36 + 64) = v40;
        }
        ++*(_DWORD *)(a1 + 28);
        v29 = (WTF *)((char *)v29 + 24);
        if (v29 == v30)
          goto LABEL_47;
      }
      v43 = *(_QWORD *)(*(_QWORD *)v27 + 8);
      if (*(_DWORD *)(v43 + 8))
      {
        v196 = *(_QWORD *)(v43 + 40);
        v197 = *(_DWORD *)(v196 - 8);
        v198 = ((unint64_t)v31 + ~((_QWORD)v31 << 32)) ^ (((unint64_t)v31 + ~((_QWORD)v31 << 32)) >> 22);
        v199 = 9 * ((v198 + ~(v198 << 13)) ^ ((v198 + ~(v198 << 13)) >> 8));
        v200 = (v199 ^ (v199 >> 15)) + ~((v199 ^ (v199 >> 15)) << 27);
        v201 = v197 & ((v200 >> 31) ^ v200);
        if (*(WTF **)(v196 + 16 * v201) != v31)
        {
          v202 = 1;
          do
            v201 = ((_DWORD)v201 + v202++) & v197;
          while (*(WTF **)(v196 + 16 * v201) != v31);
        }
        v44 = (_QWORD *)(v196 + 16 * v201 + 8);
      }
      else
      {
        v44 = (_QWORD *)((char *)v31 + 104);
      }
      v45 = (_DWORD *)*v44;
      v46 = v45[4];
      v47 = v45[8];
      LODWORD(v45) = v45[12];
      v48 = __OFADD__(v47, (_DWORD)v45);
      v49 = v47 + (_DWORD)v45;
      v50 = (v47 >> 31) + 0x7FFFFFFF;
      if (v48)
        v49 = v50;
      v48 = __OFADD__(v46, v49);
      v51 = v46 + v49;
      v52 = (v46 >> 31) + 0x7FFFFFFF;
      if (v48)
        v53 = v52;
      else
        v53 = v51;
      v54 = *(_DWORD *)(a1 + 28);
      if (v54)
      {
        v55 = *((float *)*v28 + 30 * v54 - 24) + *((float *)*v28 + 30 * v54 - 23);
        v56 = *(unsigned int *)(a1 + 28);
      }
      else
      {
        v56 = 0;
        v55 = 0.0;
      }
      v57 = (float)v53 * 0.015625;
      LOBYTE(v272[0]) = 11;
      v272[1] = v31;
      *(_QWORD *)&v273 = v32;
      *((float *)&v273 + 2) = v55;
      *((float *)&v273 + 3) = v57;
      LOBYTE(v274) = 4;
      DWORD1(v274) = 0;
      BYTE8(v274) = *((_BYTE *)v29 + 20);
      LOBYTE(v275) = 0;
      LOBYTE(v276) = 0;
      BYTE8(v276) = 0;
      LOBYTE(v277) = 0;
      BYTE8(v277) = 0;
      LOBYTE(v279) = 0;
      if (v54 == *(_DWORD *)(a1 + 24))
      {
        v267 = v23;
        v268 = a3;
        v266 = v24;
        v188 = WTF::Vector<WebCore::Layout::Line::Run,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 16, (void *)(v56 + 1), (unint64_t)v272);
        v24 = v266;
        v23 = v267;
        a3 = v268;
        v27 = v269;
        v189 = *(_QWORD *)(a1 + 16) + 120 * *(unsigned int *)(a1 + 28);
        v191 = *(_OWORD *)(v188 + 80);
        v190 = *(_OWORD *)(v188 + 96);
        v192 = *(_OWORD *)(v188 + 64);
        *(_QWORD *)(v189 + 112) = *(_QWORD *)(v188 + 112);
        *(_OWORD *)(v189 + 80) = v191;
        *(_OWORD *)(v189 + 96) = v190;
        *(_OWORD *)(v189 + 64) = v192;
        v193 = *(_OWORD *)v188;
        v194 = *(_OWORD *)(v188 + 16);
        v195 = *(_OWORD *)(v188 + 48);
        *(_OWORD *)(v189 + 32) = *(_OWORD *)(v188 + 32);
        *(_OWORD *)(v189 + 48) = v195;
        *(_OWORD *)v189 = v193;
        *(_OWORD *)(v189 + 16) = v194;
      }
      else
      {
        v58 = (uint64_t)*v28 + 120 * v56;
        v59 = *(_OWORD *)v272;
        v60 = v273;
        v61 = v275;
        *(_OWORD *)(v58 + 32) = v274;
        *(_OWORD *)(v58 + 48) = v61;
        *(_OWORD *)v58 = v59;
        *(_OWORD *)(v58 + 16) = v60;
        v62 = v276;
        v63 = v277;
        v64 = v278;
        *(_QWORD *)(v58 + 112) = v279;
        *(_OWORD *)(v58 + 80) = v63;
        *(_OWORD *)(v58 + 96) = v64;
        *(_OWORD *)(v58 + 64) = v62;
      }
      ++*(_DWORD *)(a1 + 28);
      v65 = v57 + v55;
      if (*(float *)(a1 + 1312) >= (float)(v57 + v55))
        v65 = *(float *)(a1 + 1312);
      *(float *)(a1 + 1312) = v65;
      v66 = *(_QWORD *)v29;
      v67 = 0.0;
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v29 + 24) + 8) + 68) & 8) != 0)
      {
        v229 = *(_QWORD *)(*(_QWORD *)v27 + 8);
        v230 = *(_DWORD *)(v229 + 8);
        v267 = v23;
        v268 = a3;
        if (v230)
        {
          v254 = *(_QWORD *)(v229 + 40);
          v255 = *(_DWORD *)(v254 - 8);
          v256 = (~(v66 << 32) + v66) ^ ((unint64_t)(~(v66 << 32) + v66) >> 22);
          v257 = 9 * ((v256 + ~(v256 << 13)) ^ ((v256 + ~(v256 << 13)) >> 8));
          v258 = (v257 ^ (v257 >> 15)) + ~((v257 ^ (v257 >> 15)) << 27);
          v259 = v255 & ((v258 >> 31) ^ v258);
          if (*(_QWORD *)(v254 + 16 * v259) != v66)
          {
            v260 = 1;
            do
              v259 = ((_DWORD)v259 + v260++) & v255;
            while (*(_QWORD *)(v254 + 16 * v259) != v66);
          }
          v231 = (uint64_t *)(v254 + 16 * v259 + 8);
        }
        else
        {
          v231 = (uint64_t *)(v66 + 104);
        }
        v266 = v24;
        v232 = *v231;
        v233 = *(_DWORD *)(v232 + 36);
        LODWORD(v232) = *(_DWORD *)(v232 + 52);
        v48 = __OFADD__(v233, (_DWORD)v232);
        v234 = v233 + v232;
        v235 = (v233 >> 31) + 0x7FFFFFFF;
        if (v48)
          v234 = v235;
        v294[0] = v234;
        v290 = v66;
        WTF::HashMap<WebCore::Layout::Box const*,float,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::add<WebCore::LayoutUnit &>(v24, &v290, v294, (uint64_t)v272);
        v24 = v266;
        v23 = v267;
        v67 = (float)v294[0] * 0.015625;
        *(float *)(a1 + 1344) = *(float *)(a1 + 1344) + v67;
        v65 = *(float *)(a1 + 1312);
        a3 = v268;
        v27 = v269;
      }
      *(float *)(a1 + 1312) = v65 + v67;
      v29 = (WTF *)((char *)v29 + 24);
    }
    while (v29 != v30);
LABEL_47:
    v29 = v287;
    v22 = v270;
    v14 = (uint64_t *)v271;
  }
  if (v23 != v29 && v29)
  {
    v287 = 0;
    LODWORD(v288) = 0;
    v238 = a3;
    WTF::fastFree(v29, a2);
    a3 = v238;
  }
  v68 = (_OWORD *)(a1 + 1712);
  if (*(unsigned __int8 *)(a1 + 1752) == *((unsigned __int8 *)a3 + 40))
  {
    if (*(_BYTE *)(a1 + 1752))
    {
      v69 = *(_OWORD *)a3;
      *(_DWORD *)(a1 + 1727) = *(_DWORD *)((char *)a3 + 15);
      *v68 = v69;
      if (a3 == (WebCore::FontCascadeDescription *)(a1 + 1712))
      {
        v74 = 1;
      }
      else
      {
        v70 = (WTF **)(a1 + 1736);
        v71 = *(_DWORD *)(a1 + 1748);
        v72 = *((_DWORD *)a3 + 9);
        if (v71 <= v72)
        {
          v160 = v14;
          v161 = *(_DWORD *)(a1 + 1744);
          if (v72 > v161)
          {
            if (v161)
            {
              v250 = a3;
              if (v71)
                *(_DWORD *)(a1 + 1748) = 0;
              v251 = *v70;
              if (*v70)
              {
                *(_QWORD *)(a1 + 1736) = 0;
                *(_DWORD *)(a1 + 1744) = 0;
                WTF::fastFree(v251, a2);
                a3 = v250;
                v161 = *(_DWORD *)(a1 + 1744);
              }
            }
            v162 = *((unsigned int *)a3 + 9);
            if (v161 < v162)
            {
              if (v162 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x1943A6D58);
              }
              v163 = a3;
              v164 = *v70;
              v165 = *(unsigned int *)(a1 + 1748);
              v166 = (void *)WTF::fastMalloc((WTF *)(8 * v162));
              *(_DWORD *)(a1 + 1744) = v162;
              *(_QWORD *)(a1 + 1736) = v166;
              memcpy(v166, v164, 8 * v165);
              a3 = v163;
              if (v164)
              {
                if (*v70 == v164)
                {
                  *(_QWORD *)(a1 + 1736) = 0;
                  *(_DWORD *)(a1 + 1744) = 0;
                }
                WTF::fastFree(v164, v167);
                a3 = v163;
              }
            }
          }
          v72 = *(_DWORD *)(a1 + 1748);
          v14 = v160;
        }
        else
        {
          *(_DWORD *)(a1 + 1748) = v72;
        }
        v168 = *v70;
        if (v72)
        {
          v169 = a3;
          memmove(v168, *((const void **)a3 + 3), 8 * v72);
          a3 = v169;
          v170 = *(unsigned int *)(a1 + 1748);
          v168 = *(WTF **)(a1 + 1736);
        }
        else
        {
          v170 = 0;
        }
        v171 = a3;
        memcpy((char *)v168 + 8 * v170, (const void *)(*((_QWORD *)a3 + 3) + 8 * v170), 8 * *((unsigned int *)a3 + 9) - 8 * v170);
        *(_DWORD *)(a1 + 1748) = *((_DWORD *)v171 + 9);
        v74 = *(unsigned __int8 *)(a1 + 1752);
      }
    }
    else
    {
      v74 = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 1752))
  {
    v73 = *(WTF **)(a1 + 1736);
    if (v73)
    {
      *(_QWORD *)(a1 + 1736) = 0;
      *(_DWORD *)(a1 + 1744) = 0;
      WTF::fastFree(v73, a2);
    }
    v74 = 0;
    *(_BYTE *)(a1 + 1752) = 0;
  }
  else
  {
    v152 = *(_OWORD *)a3;
    *(_DWORD *)(a1 + 1727) = *(_DWORD *)((char *)a3 + 15);
    *v68 = v152;
    v153 = *((unsigned int *)a3 + 9);
    *(_QWORD *)(a1 + 1744) = 0;
    *(_QWORD *)(a1 + 1736) = 0;
    *(_DWORD *)(a1 + 1748) = v153;
    if ((_DWORD)v153)
    {
      if (v153 >> 29)
      {
LABEL_407:
        __break(0xC471u);
        JUMPOUT(0x1943A6504);
      }
      v261 = a3;
      v262 = (void *)WTF::fastMalloc((WTF *)(8 * v153));
      *(_DWORD *)(a1 + 1744) = v153;
      *(_QWORD *)(a1 + 1736) = v262;
      memcpy(v262, *((const void **)v261 + 3), 8 * *((unsigned int *)v261 + 9));
    }
    v74 = 1;
    *(_BYTE *)(a1 + 1752) = 1;
  }
  *(_OWORD *)(a1 + 1376) = *((_OWORD *)v14 + 2);
  *(_DWORD *)(a1 + 1800) = 0;
  *(_BYTE *)(a1 + 1804) = 0;
  *(_BYTE *)(a1 + 1808) = 0;
  v75 = *(WebCore::Layout::Box **)(a1 + 1768);
  if (v74)
    LineStyle = (uint64_t)v75 + 16;
  else
    LineStyle = WebCore::Layout::Box::firstLineStyle(v75);
  if (*(_BYTE *)(a1 + 1796))
  {
    v107 = WebCore::Layout::TextOnlySimpleLineBuilder::placeInlineTextContent(a1, LineStyle, v14, a4, a5, a6, a7, a8);
    v110 = v252;
    goto LABEL_134;
  }
  v290 = *v14;
  v77 = v290;
  v291 = v290;
  v271 = v290;
  v78 = 0.0;
  do
  {
    while (1)
    {
      if (*(_QWORD *)(a1 + 1400) <= v77)
        goto LABEL_268;
      v79 = *(_QWORD *)(a1 + 1392);
      v80 = (uint64_t *)(v79 + 24 * v77);
      v81 = *(_WORD *)((char *)v80 + 21);
      v82 = v81 & 0xF;
      if (v79)
        v83 = v82 == 0;
      else
        v83 = 0;
      if (!v83)
      {
        if ((v82 - 1) >= 2)
        {
          v107 = v14[2];
          v110 = v14[3];
        }
        else
        {
          v292 = v78;
          v291 = v77;
          if (v271 != v77)
            goto LABEL_107;
          WebCore::Layout::Line::append(v269, (const WebCore::Layout::InlineItem *)(v79 + 24 * v271), (const WebCore::RenderStyle *)(*(_QWORD *)(v79 + 24 * v271) + 16), 0.0, (uint64_t)a4);
          v110 = 0;
          v107 = v271 + 1;
        }
        goto LABEL_134;
      }
      if ((v81 & 0x40) != 0)
      {
        v99 = *(float *)(v79 + 24 * v77 + 8);
        goto LABEL_91;
      }
      v84 = v81 & 0x30;
      if (v84 == 16)
      {
        v85 = *v80;
        v86 = *(WTF ***)(LineStyle + 32);
        if ((*(_DWORD *)(*v80 + 56) & 0x28000000) != 0x8000000)
        {
          if (*(_DWORD *)(v79 + 24 * v77 + 12) + *(_DWORD *)(v79 + 24 * v77 + 16) < (*(_DWORD *)(v79 + 24 * v77 + 16)
                                                                                                  + 1))
          {
            __break(0xC471u);
            JUMPOUT(0x1943A66FCLL);
          }
          if ((*(_WORD *)(v85 + 12) & 0x20) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1943A671CLL);
          }
          if ((*(_BYTE *)(v85 + 129) & 1) == 0)
          {
            v215 = (WebCore::FontCascade *)(v86 + 4);
LABEL_267:
            v93 = WebCore::FontCascade::widthOfSpaceString(v215);
            goto LABEL_83;
          }
          v87 = v22;
          v88 = v86[31];
          if (v88)
            ++*(_DWORD *)v88;
          v89 = (const WebCore::FontCascadeDescription *)(v86 + 6);
          v90 = *((_QWORD *)v88 + 13);
          if (v90 && *(_QWORD *)(v90 + 8))
            goto LABEL_78;
          v270 = (_DWORD *)WebCore::FontCascadeFonts::realizeFallbackRangesAt(v88, v89, 0);
          WebCore::FontRanges::glyphDataForCharacter(0x20u, (uint64_t)v270, 1, (uint64_t)v272);
          if (!v272[1] || (v203 = *((_QWORD *)v272[1] + 1)) == 0)
          {
            v204 = 0;
            goto LABEL_237;
          }
          v204 = *(_QWORD *)(v203 + 8);
          if (!v204)
          {
            v204 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v204 = 1;
            *(_QWORD *)(v204 + 8) = v203;
            v264 = *(WTF **)(v203 + 8);
            *(_QWORD *)(v203 + 8) = v204;
            if (v264)
            {
              if (*(_DWORD *)v264 == 1)
              {
                WTF::fastFree(v264, a2);
                v204 = *(_QWORD *)(v203 + 8);
                if (!v204)
                {
LABEL_237:
                  v205 = (WTF *)*((_QWORD *)v88 + 13);
                  *((_QWORD *)v88 + 13) = v204;
                  if (v205)
                  {
                    if (*(_DWORD *)v205 == 1)
                      WTF::fastFree(v205, a2);
                    else
                      --*(_DWORD *)v205;
                  }
                  v206 = v272[1];
                  v272[1] = 0;
                  if (v206)
                  {
                    if (*(_DWORD *)v206 == 1)
                      WTF::fastFree(v206, a2);
                    else
                      --*(_DWORD *)v206;
                  }
                  v207 = *((_QWORD *)v88 + 13);
                  if (v207)
                  {
                    v208 = *(_QWORD *)(v207 + 8);
                    if (v208)
                    {
                      if ((*(_BYTE *)(v208 + 256) & 2) != 0)
                      {
                        v209 = 1;
                        while (1)
                        {
                          v210 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v88, v89, v209);
                          if (!*(_DWORD *)(v210 + 12))
                            break;
                          WebCore::FontRanges::glyphDataForCharacter(0x20u, v210, 0, (uint64_t)v272);
                          if (v272[1])
                            v211 = *((_QWORD *)v272[1] + 1);
                          else
                            v211 = 0;
                          WTF::WeakPtr<WebCore::Font,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v287, v211);
                          v212 = v272[1];
                          v272[1] = 0;
                          if (v212)
                          {
                            if (*(_DWORD *)v212 == 1)
                              WTF::fastFree(v212, a2);
                            else
                              --*(_DWORD *)v212;
                          }
                          v91 = v287;
                          if (v287)
                          {
                            v213 = *((_QWORD *)v287 + 1);
                            if (!v213 || (*(_BYTE *)(v213 + 256) & 2) != 0)
                            {
                              LODWORD(v270) = 0;
                              v287 = 0;
                            }
                            else
                            {
                              v287 = 0;
                              v214 = (WTF *)*((_QWORD *)v88 + 13);
                              *((_QWORD *)v88 + 13) = v91;
                              if (!v214)
                                goto LABEL_79;
                              if (*(_DWORD *)v214 != 1)
                              {
                                --*(_DWORD *)v214;
                                goto LABEL_78;
                              }
                              WTF::fastFree(v214, a2);
                              v91 = v287;
                              v287 = 0;
                              if (!v91)
                                goto LABEL_78;
                              LODWORD(v270) = 2;
                            }
                            if (*(_DWORD *)v91 == 1)
                              WTF::fastFree(v91, a2);
                            else
                              --*(_DWORD *)v91;
                          }
                          else
                          {
                            LODWORD(v270) = 0;
                          }
                          ++v209;
                          if ((_DWORD)v270)
                            goto LABEL_78;
                        }
                      }
                      goto LABEL_78;
                    }
                  }
                  if (!v270[3])
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1943A6CDCLL);
                  }
                  v239 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v270 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v270 + 8), 1);
                  WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)v272, v239);
                  v240 = v272[0];
                  v272[0] = 0;
                  v241 = (WTF *)*((_QWORD *)v88 + 13);
                  *((_QWORD *)v88 + 13) = v240;
                  if (v241)
                  {
                    v242 = *(_DWORD *)v241 - 1;
                    if (*(_DWORD *)v241 == 1)
                    {
                      WTF::fastFree(v241, a2);
                      v241 = v272[0];
                      v272[0] = 0;
                      if (!v241)
                        goto LABEL_78;
                      v242 = *(_DWORD *)v241 - 1;
                      if (*(_DWORD *)v241 == 1)
                      {
                        WTF::fastFree(v241, a2);
                        goto LABEL_78;
                      }
                    }
                    *(_DWORD *)v241 = v242;
                  }
LABEL_78:
                  v91 = (WTF *)*((_QWORD *)v88 + 13);
                  if (v91)
LABEL_79:
                    v92 = (float *)*((_QWORD *)v91 + 1);
                  else
                    v92 = 0;
                  if (*(_DWORD *)v88 == 1)
                  {
                    WebCore::FontCascadeFonts::~FontCascadeFonts(v88, a2);
                    WTF::fastFree(v173, v174);
                  }
                  else
                  {
                    --*(_DWORD *)v88;
                  }
                  WebCore::FontCascadeDescription::resolveFontSizeAdjustFromFontIfNeeded(v89, (const WebCore::Font *)v92);
                  v93 = v92[84] + v92[85];
                  v22 = v87;
                  goto LABEL_83;
                }
              }
              else
              {
                --*(_DWORD *)v264;
              }
            }
          }
          ++*(_DWORD *)v204;
          goto LABEL_237;
        }
      }
      else
      {
        v86 = *(WTF ***)(LineStyle + 32);
        v85 = *v80;
      }
      a2 = (uint64_t *)(v86 + 4);
      v97 = (int *)(v79 + 24 * v77 + 12);
      v96 = *v97;
      v95 = v97[1];
      v98 = *(_WORD *)(v85 + 12);
      if (v84 != 16)
      {
        if ((v98 & 0x20) == 0)
          goto LABEL_407;
        goto LABEL_90;
      }
      if ((v98 & 0x20) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1943A6578);
      }
      if (v96 == -1 || (*(_DWORD *)(v85 + 56) & 0x28000000) != 0x8000000)
        break;
LABEL_90:
      v99 = WebCore::Layout::TextUtil::width((WTF::MemoryPressureHandler *)v85, (uint64_t)a2, v95, v96 + v95, 1, v78);
LABEL_91:
      v78 = v78 + v99;
      if (++v77 >= v14[2])
        goto LABEL_106;
    }
    if ((*(_BYTE *)(v85 + 129) & 1) == 0)
    {
      v215 = (WebCore::FontCascade *)(v86 + 4);
      goto LABEL_267;
    }
    v100 = v86[31];
    if (v100)
      ++*(_DWORD *)v100;
    v101 = *((_QWORD *)v100 + 13);
    if (v101 && *(_QWORD *)(v101 + 8))
      goto LABEL_101;
    v268 = (WebCore::FontCascadeDescription *)(v86 + 6);
    v270 = (_DWORD *)WebCore::FontCascadeFonts::realizeFallbackRangesAt(v100, (const WebCore::FontCascadeDescription *)(v86 + 6), 0);
    WebCore::FontRanges::glyphDataForCharacter(0x20u, (uint64_t)v270, 1, (uint64_t)v272);
    if (!v272[1] || (v217 = *((_QWORD *)v272[1] + 1)) == 0)
    {
      v218 = 0;
      goto LABEL_277;
    }
    v218 = *(_QWORD *)(v217 + 8);
    if (v218)
      goto LABEL_393;
    v218 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v218 = 1;
    *(_QWORD *)(v218 + 8) = v217;
    v265 = *(WTF **)(v217 + 8);
    *(_QWORD *)(v217 + 8) = v218;
    if (!v265)
      goto LABEL_393;
    if (*(_DWORD *)v265 != 1)
    {
      --*(_DWORD *)v265;
LABEL_393:
      ++*(_DWORD *)v218;
      goto LABEL_277;
    }
    WTF::fastFree(v265, a2);
    v218 = *(_QWORD *)(v217 + 8);
    if (v218)
      goto LABEL_393;
LABEL_277:
    v219 = (WTF *)*((_QWORD *)v100 + 13);
    *((_QWORD *)v100 + 13) = v218;
    if (v219)
    {
      if (*(_DWORD *)v219 == 1)
        WTF::fastFree(v219, a2);
      else
        --*(_DWORD *)v219;
    }
    v220 = v272[1];
    v272[1] = 0;
    if (v220)
    {
      if (*(_DWORD *)v220 == 1)
        WTF::fastFree(v220, a2);
      else
        --*(_DWORD *)v220;
    }
    v221 = *((_QWORD *)v100 + 13);
    if (v221)
    {
      v222 = *(_QWORD *)(v221 + 8);
      if (v222)
      {
        if ((*(_BYTE *)(v222 + 256) & 2) != 0)
        {
          v223 = 1;
          while (1)
          {
            v224 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v100, v268, v223);
            if (!*(_DWORD *)(v224 + 12))
              break;
            WebCore::FontRanges::glyphDataForCharacter(0x20u, v224, 0, (uint64_t)v272);
            if (v272[1])
              v225 = *((_QWORD *)v272[1] + 1);
            else
              v225 = 0;
            WTF::WeakPtr<WebCore::Font,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v287, v225);
            v226 = v272[1];
            v272[1] = 0;
            if (v226)
            {
              if (*(_DWORD *)v226 == 1)
                WTF::fastFree(v226, a2);
              else
                --*(_DWORD *)v226;
            }
            v102 = v287;
            if (v287)
            {
              v227 = *((_QWORD *)v287 + 1);
              if (!v227 || (*(_BYTE *)(v227 + 256) & 2) != 0)
              {
                LODWORD(v270) = 0;
                v287 = 0;
              }
              else
              {
                v287 = 0;
                v228 = (WTF *)*((_QWORD *)v100 + 13);
                *((_QWORD *)v100 + 13) = v102;
                if (!v228)
                  goto LABEL_102;
                if (*(_DWORD *)v228 != 1)
                {
                  --*(_DWORD *)v228;
                  goto LABEL_101;
                }
                WTF::fastFree(v228, a2);
                v102 = v287;
                v287 = 0;
                if (!v102)
                  goto LABEL_101;
                LODWORD(v270) = 2;
              }
              if (*(_DWORD *)v102 == 1)
                WTF::fastFree(v102, a2);
              else
                --*(_DWORD *)v102;
            }
            else
            {
              LODWORD(v270) = 0;
            }
            ++v223;
            if ((_DWORD)v270)
              goto LABEL_101;
          }
        }
        goto LABEL_101;
      }
    }
    if (!v270[3])
    {
      __break(0xC471u);
      JUMPOUT(0x1943A6CE4);
    }
    v243 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v270 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v270 + 8), 1);
    WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)v272, v243);
    v244 = v272[0];
    v272[0] = 0;
    v245 = (WTF *)*((_QWORD *)v100 + 13);
    *((_QWORD *)v100 + 13) = v244;
    if (v245)
    {
      v246 = *(_DWORD *)v245 - 1;
      if (*(_DWORD *)v245 == 1)
      {
        WTF::fastFree(v245, a2);
        v245 = v272[0];
        v272[0] = 0;
        if (!v245)
          goto LABEL_101;
        v246 = *(_DWORD *)v245 - 1;
        if (*(_DWORD *)v245 == 1)
        {
          WTF::fastFree(v245, a2);
          goto LABEL_101;
        }
      }
      *(_DWORD *)v245 = v246;
    }
LABEL_101:
    v102 = (WTF *)*((_QWORD *)v100 + 13);
    if (v102)
LABEL_102:
      v103 = *((_QWORD *)v102 + 1);
    else
      v103 = 0;
    if (*(_DWORD *)v100 == 1)
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v100, a2);
      WTF::fastFree(v175, v176);
    }
    else
    {
      --*(_DWORD *)v100;
    }
    v272[0] = v86[21];
    v93 = *(float *)(v103 + 336) + *(float *)(v103 + 340);
LABEL_83:
    v94 = fmaxf(v93, 0.0);
    if (fabsf(v93) == INFINITY)
      v94 = 3.4028e38;
    v78 = v78 + v94;
    ++v77;
  }
  while (v77 < v14[2]);
LABEL_106:
  v292 = v78;
  v291 = v77;
LABEL_107:
  WebCore::Layout::TextOnlySimpleLineBuilder::commitCandidateContent((uint64_t)v272, a1, (WebCore::RenderStyle *)LineStyle, (uint64_t)&v290, v14, a6, a7, a8);
  v107 = (unint64_t)v272[1] + *v14;
  v108 = v14[2];
  v109 = *(_QWORD *)(a1 + 1392);
  if (v107 >= v108 || (_QWORD)v273 || (_BYTE)v274)
  {
    if (!(_QWORD)v273)
    {
LABEL_112:
      v110 = 0;
      goto LABEL_113;
    }
    if (*(_QWORD *)(a1 + 1400) > --v107)
    {
      if ((*(_WORD *)(v109 + 24 * v107 + 21) & 0xF) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1943A6BB4);
      }
      v110 = *(unsigned int *)(v109 + 24 * v107 + 12) - (_QWORD)v273;
      goto LABEL_113;
    }
    goto LABEL_268;
  }
  if (*(_QWORD *)(a1 + 1400) <= v107)
  {
LABEL_268:
    __break(1u);
    goto LABEL_407;
  }
  if ((*(_WORD *)(v109 + 24 * v107 + 21) & 0xFu) - 1 > 1)
    goto LABEL_112;
  WebCore::Layout::Line::append(v269, (const WebCore::Layout::InlineItem *)(v109 + 24 * v107), (const WebCore::RenderStyle *)(*(_QWORD *)(v109 + 24 * v107) + 16), 0.0, v106);
  v110 = 0;
  ++v107;
  v108 = v14[2];
LABEL_113:
  v111 = *(int *)(a1 + 1384);
  v294[0] = v111;
  v113 = v107 == v108 && v110 == 0;
  v293 = v113;
  v287 = (WTF *)LineStyle;
  v288 = a1;
  v289[0] = &v293;
  v289[1] = v294;
  if ((*(_DWORD *)(*(_QWORD *)(LineStyle + 24) + 228) & 0x7000) == 0x4000)
  {
    v114 = v22[66];
    v115 = (v114 & 0xFF00000000) != 0 && (_DWORD)v114 == 0;
    v116 = v115;
    v117 = v116 ^ 1;
    if (!v115 && v113)
      v117 = *(float *)&v111 < *(float *)(a1 + 1312);
  }
  else
  {
    v117 = 0;
  }
  v118 = 0.0;
  if (*(_BYTE *)(a1 + 1248) && *(_DWORD *)(a1 + 28))
  {
    if (v117)
    {
      *(_BYTE *)(a1 + 1256) = 0;
      *(_BYTE *)(a1 + 1240) = 0;
      *(_BYTE *)(a1 + 1248) = 0;
      *(_DWORD *)(a1 + 1268) = 0;
      *v22 = 0;
    }
    else
    {
      WebCore::Layout::Line::TrimmableTrailingContent::remove((WebCore::Layout::Line::TrimmableTrailingContent *)(a1 + 1232), 0.0, v104, v105, v106);
      *(float *)(a1 + 1312) = *(float *)(a1 + 1312) - v118;
      v111 = v294[0];
    }
  }
  *(float *)(a1 + 1800) = v118;
  v119 = v22[66];
  if ((v119 & 0xFF00000000) == 0)
  {
    v120 = *(float *)(a1 + 1312);
    if (*(float *)&v111 < v120)
    {
      v177 = **(_QWORD **)(*(_QWORD *)(a1 + 1760) + 48);
      if ((*(_BYTE *)(*(_QWORD *)(v177 + 40) + 229) & 8) != 0)
      {
        v178 = *(_DWORD *)(v177 + 56);
        if ((v178 & 0x40000000) == 0 && (v178 & 0x38000000) != 0x18000000)
        {
          v179 = WebCore::Layout::TextOnlySimpleLineBuilder::handleLineEnding(WebCore::RenderStyle const&,WebCore::Layout::InlineItemPosition,unsigned long)::$_0::operator()((uint64_t)&v287);
          WebCore::Layout::Line::handleOverflowingNonBreakingSpace((uint64_t)v269, v179, v120 - *(float *)&v111);
          v119 = v22[66];
          v111 = v294[0];
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 1304))
  {
    v155 = *(float *)(a1 + 1296);
    if (v155 != 0.0)
    {
      v156 = *(unsigned __int8 *)(a1 + 1280);
      if (v156 == 2)
      {
        if (!v293)
        {
          *(_BYTE *)(a1 + 1280) = 0;
          *(_BYTE *)(a1 + 1304) = 0;
          goto LABEL_353;
        }
LABEL_183:
        v157 = 1;
      }
      else
      {
        if (v293)
          goto LABEL_183;
LABEL_353:
        v157 = *(_DWORD *)(a1 + 28);
        if (v157)
          v157 = *((unsigned __int8 *)*v28 + 120 * v157 - 120) - 3 < 2;
        if (v156 == 2)
        {
          v155 = 0.0;
          if (!BYTE4(v119))
            goto LABEL_134;
LABEL_191:
          *(float *)(a1 + 1312) = *(float *)(a1 + 1312) - v155;
          goto LABEL_134;
        }
      }
      if (*(_BYTE *)(a1 + 1281))
      {
        if (*(_BYTE *)(a1 + 1281) == 2)
          v158 = v157;
        else
          v158 = 0;
        if (BYTE4(v119))
        {
LABEL_189:
          if ((_DWORD)v119 && (v158 & 1) != 0)
            goto LABEL_134;
          goto LABEL_191;
        }
        if (!v158)
          goto LABEL_134;
      }
      else if (BYTE4(v119))
      {
        LOBYTE(v158) = 1;
        goto LABEL_189;
      }
      if (*(float *)(a1 + 1312) <= *(float *)&v111)
      {
        *(_BYTE *)(a1 + 1280) = 0;
        *(_BYTE *)(a1 + 1304) = 0;
      }
    }
  }
LABEL_134:
  v121 = *(unsigned int *)(a1 + 28);
  v122 = *v28;
  if ((_DWORD)v121)
    v123 = *((float *)*v28 + 30 * v121 - 24) + *((float *)*v28 + 30 * v121 - 23);
  else
    v123 = 0.0;
  v124 = (float)(v123 + *(float *)(a1 + 1344)) + *(float *)(a1 + 1352);
  v125 = &v273;
  v272[0] = (WTF *)&v273;
  LODWORD(v272[1]) = 10;
  v126 = a1 + 32;
  if (v122 == (WTF *)(a1 + 32))
  {
    if ((_DWORD)v121)
    {
      v127 = 120 * v121;
      v128 = &v273;
      do
      {
        v129 = *(_OWORD *)(v126 + 80);
        v128[4] = *(_OWORD *)(v126 + 64);
        v128[5] = v129;
        v128[6] = *(_OWORD *)(v126 + 96);
        *((_QWORD *)v128 + 14) = *(_QWORD *)(v126 + 112);
        v130 = *(_OWORD *)(v126 + 16);
        *v128 = *(_OWORD *)v126;
        v128[1] = v130;
        v131 = *(_OWORD *)(v126 + 48);
        v128[2] = *(_OWORD *)(v126 + 32);
        v128[3] = v131;
        v128 = (__int128 *)((char *)v128 + 120);
        v126 += 120;
        v127 -= 120;
      }
      while (v127);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v126;
    v272[0] = v122;
    v216 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = 10;
    LODWORD(v272[1]) = v216;
  }
  *(_DWORD *)(a1 + 28) = 0;
  HIDWORD(v272[1]) = v121;
  v132 = *(_DWORD *)(a1 + 1312);
  v280 = v132;
  v281 = v124;
  if (*(_BYTE *)(a1 + 1304))
  {
    if (*(_BYTE *)(a1 + 1280))
      v159 = 0;
    else
      v159 = *(_QWORD *)(a1 + 1288) != 0;
    v282 = v159;
    v133 = *(float *)(a1 + 1296);
    v134 = !v159;
  }
  else
  {
    v282 = 0;
    v133 = 0.0;
    v134 = 1;
  }
  v283 = v133;
  v284 = *(_DWORD *)(a1 + 1272);
  v285 = *(_BYTE *)(a1 + 1348);
  v286 = *(_QWORD *)(a1 + 1320);
  v136 = v107 == v14[2] && v110 == 0;
  v137 = *(float *)(a1 + 1384);
  v138 = v124;
  if (v133 != 0.0)
  {
    if (!(_DWORD)v121)
    {
      __break(0xC471u);
      JUMPOUT(0x1943A6D50);
    }
    if (((*((unsigned __int8 *)v272[0] + 120 * v121 - 120) - 3 > 1) & ~v136) != 0)
    {
      v138 = v124 - v133;
    }
    else if (v137 >= v124)
    {
      v138 = v124;
    }
    else
    {
      v138 = *(float *)(a1 + 1384);
    }
  }
  if ((_DWORD)v121)
    v139 = v136;
  else
    v139 = 1;
  if ((v139 & 1) != 0)
    v140 = v136 ^ 1;
  else
    v140 = *((unsigned __int8 *)v272[0] + 120 * v121 - 120) - 5 < 0xFFFFFFFE;
  v141 = v137 - v138;
  v142 = 0.0;
  if (v141 > 0.0)
  {
    v154 = *(_DWORD *)(LineStyle + 40);
    if ((v140 & 1) != 0)
    {
      switch((v154 >> 6) & 0xF)
      {
        case 0u:
        case 4u:
          v142 = v141;
          if ((v154 & 0x4000000) == 0)
            goto LABEL_174;
          break;
        case 1u:
        case 5u:
          if ((v154 & 0x4000000) == 0)
            goto LABEL_211;
          break;
        case 2u:
        case 6u:
          v142 = v141 * 0.5;
          break;
        case 7u:
          goto LABEL_174;
        case 8u:
LABEL_211:
          v142 = v141;
          break;
        default:
          break;
      }
    }
    else
    {
      v172 = *(unsigned int *)(*(_QWORD *)(LineStyle + 24) + 232);
      if (((v172 >> 23) & 7) != 7)
        __asm { BR              X16 }
LABEL_174:
      v142 = 0.0;
    }
  }
  *(_OWORD *)a9 = *(_OWORD *)v14;
  *(_QWORD *)(a9 + 16) = v107;
  *(_QWORD *)(a9 + 24) = v110;
  v143 = a9 + 48;
  *(_QWORD *)(a9 + 32) = a9 + 48;
  *(_DWORD *)(a9 + 40) = 10;
  if ((__int128 *)v272[0] == &v273)
  {
    if ((_DWORD)v121)
    {
      v144 = 120 * v121;
      do
      {
        v145 = v125[5];
        *(_OWORD *)(v143 + 64) = v125[4];
        *(_OWORD *)(v143 + 80) = v145;
        *(_OWORD *)(v143 + 96) = v125[6];
        *(_QWORD *)(v143 + 112) = *((_QWORD *)v125 + 14);
        v146 = v125[1];
        *(_OWORD *)v143 = *v125;
        *(_OWORD *)(v143 + 16) = v146;
        v147 = v125[3];
        *(_OWORD *)(v143 + 32) = v125[2];
        *(_OWORD *)(v143 + 48) = v147;
        v143 += 120;
        v125 = (__int128 *)((char *)v125 + 120);
        v144 -= 120;
      }
      while (v144);
    }
  }
  else
  {
    *(WTF **)(a9 + 32) = v272[0];
    *(_DWORD *)(a9 + 40) = v272[1];
  }
  *(_DWORD *)(a9 + 44) = v121;
  *(_OWORD *)(a9 + 1248) = 0u;
  *(_OWORD *)(a9 + 1264) = 0u;
  *(_BYTE *)(a9 + 1280) = 0;
  *(float *)(a9 + 1288) = v142;
  *(_DWORD *)(a9 + 1292) = v132;
  *(float *)(a9 + 1296) = v124 + v142;
  *(_DWORD *)(a9 + 1300) = *(_DWORD *)(a1 + 1804);
  *(_BYTE *)(a9 + 1304) = *(_BYTE *)(a1 + 1808);
  v148 = *(_QWORD *)(a1 + 1376);
  *(_QWORD *)(a9 + 1308) = v148;
  *(float *)(a9 + 1316) = v137;
  *(_DWORD *)(a9 + 1320) = v148;
  *(_BYTE *)(a9 + 1324) = 0;
  *(_BYTE *)(a9 + 1328) = 0;
  *(_BYTE *)(a9 + 1332) = v134;
  *(float *)(a9 + 1336) = v133;
  *(_QWORD *)(a9 + 1340) = 0;
  *(_QWORD *)(a9 + 1348) = 0;
  *(_QWORD *)(a9 + 1353) = 0;
  *(_BYTE *)(a9 + 1368) = *(_BYTE *)(a1 + 1752) ^ 1;
  *(_BYTE *)(a9 + 1369) = v136;
  *(_QWORD *)(a9 + 1376) = 0;
  *(_DWORD *)(a9 + 1384) = 0;
  *(_BYTE *)(a9 + 1392) = 0;
  *(_QWORD *)(a9 + 1400) = 0;
  result = *(float *)(a1 + 1800);
  *(float *)(a9 + 1408) = result;
  *(_BYTE *)(a9 + 1412) = 0;
  *(_BYTE *)(a9 + 1416) = 0;
  return result;
}

void WebCore::Layout::LineLayoutResult::~LineLayoutResult(WebCore::Layout::LineLayoutResult *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  _DWORD **v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD **v15;

  v3 = *((_QWORD *)this + 172);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = (WTF *)*((_QWORD *)this + 168);
  if (v4)
  {
    *((_QWORD *)this + 168) = 0;
    *((_DWORD *)this + 338) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF *)*((_QWORD *)this + 158);
  if (v5)
  {
    *((_QWORD *)this + 158) = 0;
    *((_DWORD *)this + 318) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = *((unsigned int *)this + 315);
  if ((_DWORD)v6)
  {
    v9 = (_DWORD **)(*((_QWORD *)this + 156) + 96);
    v10 = 120 * v6;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (v11[2] == 1)
        {
          v14 = v10;
          v15 = v9;
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
          v10 = v14;
          v9 = v15;
        }
        else
        {
          --v11[2];
        }
      }
      v12 = (uint64_t)*(v9 - 12);
      if (v12)
      {
        v13 = *(_DWORD *)(v12 + 8);
        if (!v13)
        {
          __break(0xC471u);
          JUMPOUT(0x1943A6F10);
        }
        *(_DWORD *)(v12 + 8) = v13 - 1;
      }
      v9 += 15;
      v10 -= 120;
    }
    while (v10);
  }
  v7 = (WTF *)*((_QWORD *)this + 156);
  if (v7)
  {
    *((_QWORD *)this + 156) = 0;
    *((_DWORD *)this + 314) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (WTF *)*((_QWORD *)this + 4);
  if ((WebCore::Layout::LineLayoutResult *)((char *)this + 48) != v8)
  {
    if (v8)
    {
      *((_QWORD *)this + 4) = 0;
      *((_DWORD *)this + 10) = 0;
      WTF::fastFree(v8, a2);
    }
  }
}

uint64_t ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/Frameworks/MediaAccessibility.framework/MediaAccessibility", 2);
  WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 39;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PAL27ManagedConfigurationLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
  _MergedGlobals_67 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 33;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PAL19VideoToolboxLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/Frameworks/VideoToolbox.framework/VideoToolbox", 2);
  qword_1ECE7EE30 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 34;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PAL19MediaToolboxLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/Frameworks/MediaToolbox.framework/MediaToolbox", 2);
  PAL::MediaToolboxLibrary(BOOL)::frameworkLibrary = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 34;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PAL17WebPrivacyLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/WebPrivacy.framework/WebPrivacy", 2);
  _MergedGlobals_85 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 33;
    __break(0xC471u);
  }
  return result;
}

uint64_t PAL::isLockdownModeEnabled(PAL *this)
{
  size_t v3;
  uint64_t v4;

  if (_MergedGlobals_66 == 1)
  {
    if (qword_1ECE7E400)
      return objc_msgSend((id)objc_msgSend((id)getLockdownModeManagerClass(), "shared"), "enabled");
  }
  else
  {
    qword_1ECE7E400 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/LockdownMode.framework/LockdownMode", 2);
    _MergedGlobals_66 = 1;
    if (qword_1ECE7E400)
      return objc_msgSend((id)objc_msgSend((id)getLockdownModeManagerClass(), "shared"), "enabled");
  }
  v3 = 8;
  v4 = 0;
  return !sysctlbyname("security.mac.lockdown_mode_state", &v4, &v3, 0, 0) && v4 == 1;
}

Class initLockdownModeManager(void)
{
  Class result;

  if ((_MergedGlobals_66 & 1) == 0)
  {
    qword_1ECE7E400 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/LockdownMode.framework/LockdownMode", 2);
    _MergedGlobals_66 = 1;
  }
  result = objc_getClass("LockdownModeManager");
  qword_1ECE7E408 = (uint64_t)result;
  getLockdownModeManagerClass = LockdownModeManagerFunction;
  return result;
}

unsigned int *WebCore::RenderElement::resetTextAutosizing(unsigned int *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::RenderStyle ***v4;
  uint64_t *v5;
  WebCore::RenderStyle **v6;
  uint64_t v7;
  WebCore::RenderStyle **v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                             + 40)
                                                                 + 8)
                                                     + 1944)
                                         + 248)
                             + 328)
                 + 296);
  if (v2)
  {
    v3 = (uint64_t)this;
    *(_DWORD *)(v2 + 24) += 2;
    v4 = *(WebCore::RenderStyle ****)(v2 + 2456);
    if (!v4)
    {
      v4 = (WebCore::RenderStyle ***)WTF::fastMalloc((WTF *)8);
      *v4 = 0;
      v5 = *(uint64_t **)(v2 + 2456);
      *(_QWORD *)(v2 + 2456) = v4;
      if (v5)
      {
        if (*v5)
          WTF::HashTable<WebCore::TextAutoSizingKey,WTF::KeyValuePair<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>>>,WebCore::TextAutoSizingHash,WTF::HashMap<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>,WebCore::TextAutoSizingHash,WebCore::TextAutoSizingTraits,WTF::HashTraits<std::unique_ptr<WebCore::TextAutoSizingValue>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::TextAutoSizingTraits>::deallocateTable(*v5, a2);
        WTF::fastFree((WTF *)v5, a2);
        v4 = *(WebCore::RenderStyle ****)(v2 + 2456);
      }
    }
    v6 = *v4;
    if (*v4)
    {
      *v4 = 0;
      v7 = *((unsigned int *)v6 - 1);
      if ((_DWORD)v7)
      {
        v8 = v6;
        do
        {
          if (*v8 != (WebCore::RenderStyle *)-1)
            v8 = WTF::KeyValuePair<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>>::~KeyValuePair(v8, a2);
          v8 += 3;
          --v7;
        }
        while (v7);
      }
      WTF::fastFree((WTF *)(v6 - 2), a2);
    }
    v22 = 0;
    v23 = 0;
    v21 = 0;
    v9 = WebCore::RenderObject::traverseNext(v3, v3, (uint64_t (*)(unint64_t))WebCore::includeNonFixedHeight, (int *)&v21 + 1, (int *)&v21);
    if (v9)
    {
      v11 = v9;
      ++*(_DWORD *)(v9 + 16);
      while (1)
      {
        v12 = HIDWORD(v23);
        if (HIDWORD(v23))
        {
          while (SHIDWORD(v21) <= *((_DWORD *)v22 + v12 - 1))
          {
            HIDWORD(v23) = --v12;
            if (!v12)
              goto LABEL_19;
          }
          v13 = v12;
        }
        else
        {
LABEL_19:
          v13 = 0;
        }
        if ((_DWORD)v21)
        {
          if (v12 == (_DWORD)v23)
          {
            v14 = WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v22, v13 + 1, (unint64_t)&v21);
            *((_DWORD *)v22 + HIDWORD(v23)) = *(_DWORD *)v14;
          }
          else
          {
            *((_DWORD *)v22 + v13) = v21;
          }
          v12 = ++HIDWORD(v23);
        }
        v15 = *(_BYTE *)(v11 + 52) & 7;
        v16 = v15 == 1 ? v11 : 0;
        if (v16)
          break;
        if (v15 == 1)
          goto LABEL_31;
LABEL_38:
        LODWORD(v21) = 0;
        v19 = WebCore::RenderObject::traverseNext(v11, v3, (uint64_t (*)(unint64_t))WebCore::includeNonFixedHeight, (int *)&v21 + 1, (int *)&v21);
        if (v19)
          ++*(_DWORD *)(v19 + 16);
        v20 = *(_DWORD *)(v11 + 16);
        if (!v20)
        {
          __break(0xC471u);
          JUMPOUT(0x1943A7518);
        }
        *(_DWORD *)(v11 + 16) = v20 - 1;
        v11 = v19;
        if (!v19)
          goto LABEL_45;
      }
      ++*(_DWORD *)(v16 + 16);
      if (v15 == 1)
      {
LABEL_31:
        if (*(_BYTE *)(v11 + 46) != 19)
        {
          if (!v12)
            goto LABEL_35;
          v17 = (int)(v12 - 1);
          if (v17 >= v12)
            goto LABEL_54;
          if (HIDWORD(v21) - *((_DWORD *)v22 + v17) >= 4)
          {
LABEL_35:
            *(_DWORD *)(v11 + 200) = -1;
            *(_BYTE *)(v11 + 204) &= 0xFCu;
          }
        }
      }
      v18 = *(_DWORD *)(v16 + 16);
      if (!v18)
      {
LABEL_54:
        __break(0xC471u);
        JUMPOUT(0x1943A74F8);
      }
      *(_DWORD *)(v16 + 16) = v18 - 1;
      goto LABEL_38;
    }
LABEL_45:
    this = (unsigned int *)v22;
    if (v22)
    {
      v22 = 0;
      LODWORD(v23) = 0;
      this = (unsigned int *)WTF::fastFree((WTF *)this, v10);
    }
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v2, v10);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return this;
}

void WebCore::Comment::~Comment(WebCore::Comment *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::CharacterData::~CharacterData((uint64_t)this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::HTMLCanvasElement::~HTMLCanvasElement(WebCore::HTMLCanvasElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::HTMLCanvasElement::~HTMLCanvasElement(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  WebCore::CanvasBase *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _DWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = (WebCore::HTMLCanvasElement *)((char *)this + 112);
  WebCore::CanvasBase::notifyObserversCanvasDestroyed((WebCore::HTMLCanvasElement *)((char *)this + 112));
  WebCore::CanvasBase::removeCanvasNeedingPreparationForDisplayOrFlush(v2);
  v3 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v11 = 0;
  WebCore::CanvasBase::setImageBuffer(v2, &v11, &v12);
  v5 = v12;
  v12 = 0;
  if (v5)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v5 + 8), v4);
  v6 = v11;
  v11 = 0;
  if (v6)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v6 + 8), v4);
  std::unique_ptr<WebCore::CSSParserContext>::~unique_ptr[abi:sn180100]((WTF::StringImpl ***)this + 33, (WTF::StringImpl *)v4);
  v8 = (_DWORD *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::HTMLCanvasElement *)((char *)this + 224), v7);
  WebCore::CanvasBase::~CanvasBase(v2, v10);
  WebCore::Element::~Element((uint64_t)this);
}

void WebCore::HTMLAudioElement::~HTMLAudioElement(WebCore::HTMLAudioElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLMediaElement::~HTMLMediaElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::DatabaseTracker::emptyDatabaseFilesRemovalTaskDidFinish(WebCore::DatabaseTracker *this)
{
  int v1;
  uint64_t result;

  v1 = __ldxr(WebCore::openDatabaseLock);
  if (v1 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::openDatabaseLock);
  }
  if (__stlxr(0, WebCore::openDatabaseLock))
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::openDatabaseLock);
  return result;
}

void WebCore::Style::BuilderConverter::convertRadius(WebCore::Style::BuilderConverter *this, WebCore::Style::BuilderState *a2, const WebCore::CSSValue *a3, __n128 a4)
{
  uint64_t v6;
  int v7;
  const WebCore::CSSToLengthConversionData *v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  double v14;
  float v15;
  int v17;
  int v18;
  _DWORD *v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  WebCore::CSSCalcValue *v26;
  unsigned __int8 *v27;
  int v28;
  WebCore::CSSCalcValue *v29;
  unsigned __int8 *v30;
  int v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  double v38;
  double v39;
  WTF *v40;

  if (((*((unsigned __int16 *)a3 + 2) | (*((unsigned __int8 *)a3 + 6) << 16)) & 0x3F800) != 0x1B800)
  {
    *(_DWORD *)this = 0;
    *((_WORD *)this + 2) = 4;
    *((_BYTE *)this + 6) = 0;
    *((_DWORD *)this + 2) = 0;
LABEL_82:
    *((_WORD *)this + 6) = 4;
    *((_BYTE *)this + 14) = 0;
    return;
  }
  v6 = *((_QWORD *)a3 + 1);
  v7 = *(unsigned __int16 *)(v6 + 4) | (*(unsigned __int8 *)(v6 + 6) << 16);
  if ((v7 & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1943A7908);
  }
  v8 = (WebCore::Style::BuilderState *)((char *)a2 + 64);
  v9 = *(_WORD *)(v6 + 4) & 0x7F;
  if ((v9 - 63) > 0x11 || ((1 << ((*(_WORD *)(v6 + 4) & 0x7F) - 63)) & 0x34001) == 0)
  {
    if (v9 == 73)
    {
      v22 = *(unsigned __int8 **)(*(_QWORD *)(v6 + 8) + 8);
      v23 = v22[12];
      if (v23 != 1)
      {
        if (v23 == 2)
          goto LABEL_10;
        if ((v23 - 5) > 3)
          goto LABEL_24;
      }
      v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v22 + 72))(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 8));
      LOWORD(v7) = *(_WORD *)(v6 + 4);
    }
    if (v9 != 3)
    {
      v9 = v7 & 0x7F;
      goto LABEL_24;
    }
LABEL_10:
    if ((v7 & 0x7F) == 0x49)
    {
      v34 = *(_QWORD *)(v6 + 8);
      v40 = 0;
      v38 = WebCore::CSSCalcValue::doubleValue(v34, (uint64_t)&v40);
      if (v40)
        WTF::fastFree((WTF *)((char *)v40 - 16), v35);
      a4.n128_f64[0] = v38;
    }
    else
    {
      a4.n128_u64[0] = *(_QWORD *)(v6 + 8);
    }
    a4.n128_f32[0] = a4.n128_f64[0];
    *(_DWORD *)this = a4.n128_u32[0];
    *((_WORD *)this + 2) = 3;
    *((_BYTE *)this + 6) = 1;
    goto LABEL_13;
  }
LABEL_24:
  if ((v9 - 63) > 0x11 || ((1 << (v9 - 63)) & 0x34001) == 0)
  {
    if ((v7 & 0x7F) == 0x49)
    {
      v26 = *(WebCore::CSSCalcValue **)(v6 + 8);
      v27 = (unsigned __int8 *)*((_QWORD *)v26 + 1);
      v28 = v27[12];
      if (v28 != 1)
      {
        if (v28 == 4)
          goto LABEL_72;
        if ((v28 - 5) >= 4)
          goto LABEL_31;
      }
      v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v27 + 72))(*((_QWORD *)v26 + 1));
    }
    if (v9 != 75)
      goto LABEL_31;
    if ((*(_WORD *)(v6 + 4) & 0x7F) == 0x49)
      v26 = *(WebCore::CSSCalcValue **)(v6 + 8);
    else
      v26 = 0;
LABEL_72:
    WebCore::CSSCalcValue::createCalculationValue(v26, v8, &v40);
    WebCore::Length::Length((uint64_t)this, &v40);
    WTF::Ref<WebCore::CalculationValue,WTF::RawPtrTraits<WebCore::CalculationValue>,WTF::DefaultRefDerefTraits<WebCore::CalculationValue>>::~Ref(&v40, v32);
    goto LABEL_13;
  }
LABEL_31:
  a4.n128_f32[0] = WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>(v6, (uint64_t)v8, (uint64_t)&v40, a4);
  v17 = BYTE4(v40);
  if (BYTE4(v40) != 11 && BYTE4(v40) != 13)
  {
    if (BYTE6(v40))
    {
      a4.n128_u32[0] = v40;
      if (*(float *)&v40 >= 0.0)
        goto LABEL_35;
LABEL_88:
      *(_DWORD *)this = 0;
      *((_WORD *)this + 2) = 4;
      *((_BYTE *)this + 6) = 0;
      goto LABEL_13;
    }
    if ((v40 & 0x80000000) != 0)
      goto LABEL_88;
  }
LABEL_35:
  *(_DWORD *)this = 0;
  *((_BYTE *)this + 6) = 0;
  *((_BYTE *)this + 4) = v17;
  *((_BYTE *)this + 5) = BYTE5(v40);
  if ((v17 - 2) >= 9)
  {
    if (v17 != 11)
      goto LABEL_13;
LABEL_55:
    *(_DWORD *)this = (_DWORD)v40;
    goto LABEL_13;
  }
  v18 = BYTE6(v40);
  *((_BYTE *)this + 6) = BYTE6(v40);
  if (!v18)
    goto LABEL_55;
  a4.n128_u32[0] = v40;
  *(_DWORD *)this = (_DWORD)v40;
LABEL_13:
  if (((*((unsigned __int16 *)a3 + 2) | (*((unsigned __int8 *)a3 + 6) << 16)) & 0x3F800) != 0x1B800)
  {
    __break(0xC471u);
    JUMPOUT(0x1943A7928);
  }
  v11 = *((_QWORD *)a3 + 2);
  v12 = *(unsigned __int16 *)(v11 + 4) | (*(unsigned __int8 *)(v11 + 6) << 16);
  if ((v12 & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1943A7948);
  }
  v13 = *(_WORD *)(v11 + 4) & 0x7F;
  if ((v13 - 63) <= 0x11 && ((1 << ((*(_WORD *)(v11 + 4) & 0x7F) - 63)) & 0x34001) != 0)
    goto LABEL_39;
  if (v13 != 73)
    goto LABEL_18;
  v24 = *(unsigned __int8 **)(*(_QWORD *)(v11 + 8) + 8);
  v25 = v24[12];
  if (v25 != 1)
  {
    if (v25 == 2)
      goto LABEL_19;
    if ((v25 - 5) > 3)
    {
LABEL_39:
      v19 = (_DWORD *)((char *)this + 8);
      if ((v13 - 63) <= 0x11 && ((1 << (v13 - 63)) & 0x34001) != 0)
      {
LABEL_43:
        WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>(v11, (uint64_t)v8, (uint64_t)&v40, a4);
        v20 = BYTE4(v40);
        if (BYTE4(v40) != 11 && BYTE4(v40) != 13)
        {
          if (BYTE6(v40))
          {
            if (*(float *)&v40 >= 0.0)
              goto LABEL_47;
            goto LABEL_90;
          }
          if ((v40 & 0x80000000) != 0)
          {
LABEL_90:
            *((_DWORD *)this + 2) = 0;
            goto LABEL_82;
          }
        }
LABEL_47:
        *((_DWORD *)this + 2) = 0;
        *((_BYTE *)this + 14) = 0;
        *((_BYTE *)this + 12) = v20;
        *((_BYTE *)this + 13) = BYTE5(v40);
        if ((v20 - 2) >= 9)
        {
          if (v20 != 11)
            return;
        }
        else
        {
          v21 = BYTE6(v40);
          *((_BYTE *)this + 14) = BYTE6(v40);
          if (v21)
          {
            *v19 = (_DWORD)v40;
            return;
          }
        }
        *v19 = (_DWORD)v40;
        return;
      }
      if ((v12 & 0x7F) == 0x49)
      {
        v29 = *(WebCore::CSSCalcValue **)(v11 + 8);
        v30 = (unsigned __int8 *)*((_QWORD *)v29 + 1);
        v31 = v30[12];
        if (v31 != 1)
        {
          if (v31 == 4)
            goto LABEL_74;
          if ((v31 - 5) > 3)
            goto LABEL_43;
        }
        v13 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v30 + 72))(v30);
      }
      if (v13 != 75)
        goto LABEL_43;
      v29 = *(WebCore::CSSCalcValue **)(v11 + 8);
      if ((*(_WORD *)(v11 + 4) & 0x7F) != 0x49)
        v29 = 0;
LABEL_74:
      WebCore::CSSCalcValue::createCalculationValue(v29, v8, &v40);
      WebCore::Length::Length((uint64_t)this + 8, &v40);
      WTF::Ref<WebCore::CalculationValue,WTF::RawPtrTraits<WebCore::CalculationValue>,WTF::DefaultRefDerefTraits<WebCore::CalculationValue>>::~Ref(&v40, v33);
      return;
    }
  }
  v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v24 + 72))(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 8));
  LOWORD(v12) = *(_WORD *)(v11 + 4);
LABEL_18:
  if (v13 != 3)
  {
    v13 = v12 & 0x7F;
    goto LABEL_39;
  }
LABEL_19:
  if ((v12 & 0x7F) == 0x49)
  {
    v36 = *(_QWORD *)(v11 + 8);
    v40 = 0;
    v39 = WebCore::CSSCalcValue::doubleValue(v36, (uint64_t)&v40);
    if (v40)
      WTF::fastFree((WTF *)((char *)v40 - 16), v37);
    v14 = v39;
  }
  else
  {
    v14 = *(double *)(v11 + 8);
  }
  v15 = v14;
  *((float *)this + 2) = v15;
  *((_WORD *)this + 6) = 3;
  *((_BYTE *)this + 14) = 1;
}

uint64_t WebCore::HTMLImageElement::selectImageSource(uint64_t a1, void *a2)
{
  int v2;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;
  const WTF::String *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int **v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF *v43;
  WTF *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WebCore::Document *v48;
  _QWORD *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  __int128 v54;
  __int128 v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  int v58;
  float v59;
  uint64_t v60;
  _DWORD *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t result;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  WTF *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF *v73;
  void *v74;
  uint64_t v75;
  unint64_t v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  WTF *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t *v86;
  const WTF::String *v87;
  double v88;
  double v89;
  float v90;
  int v91;
  int v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  WTF *v98;
  unsigned int *v99;
  unsigned int v100;
  WTF::StringImpl **v101;
  uint64_t *v102;
  unsigned int v103;
  const WebCore::MQ::MediaQuery *v104;
  uint64_t v105;
  _BOOL4 v106;
  uint64_t v107;
  void *v108;
  void *v109;
  unsigned int v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  unsigned int **v113;
  float v114;
  float v115;
  uint64_t v116;
  unsigned __int8 *v117;
  uint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  _QWORD *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WebCore::Node *v127;
  WTF::StringImpl *v128;
  _BYTE v129[13];
  _BYTE v130[12];
  _QWORD *v131;
  WTF::StringImpl *v132[2];
  unsigned int v133;
  WTF *v134;
  WTF *v135;
  uint64_t v136;
  char v137;
  _QWORD *v138;
  WTF::StringImpl *v139;
  __int128 v140;
  __int128 v141;

  v2 = (int)a2;
  v4 = (uint64_t *)(a1 + 288);
  v5 = *(unsigned int *)(a1 + 300);
  if ((_DWORD)v5)
  {
    v78 = *v4;
    v79 = 24 * v5;
    do
    {
      v78 = WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v78, a2) + 24;
      v79 -= 24;
    }
    while (v79);
  }
  v6 = (WTF *)*v4;
  if (*v4)
  {
    *(_QWORD *)(a1 + 288) = 0;
    *(_DWORD *)(a1 + 296) = 0;
    WTF::fastFree(v6, a2);
  }
  *v4 = 0;
  v4[1] = 0;
  WTF::WeakHashSet<WebCore::HTMLImageElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::HTMLImageElement>(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 2000, (_QWORD *)a1);
  v8 = *(_QWORD *)(a1 + 272);
  if (!v8 || (v127 = *(WebCore::Node **)(v8 + 8)) == 0)
  {
    v128 = 0;
    *(_QWORD *)v129 = 0;
    *(_DWORD *)&v129[8] = 0;
    v129[12] = 1;
    *(_DWORD *)v130 = 1065353216;
    *(_QWORD *)&v130[4] = 0xFFFFFFFFLL;
    goto LABEL_6;
  }
  *((_DWORD *)v127 + 6) += 2;
  v128 = 0;
  *(_QWORD *)v129 = 0;
  *(_DWORD *)&v129[8] = 0;
  v129[12] = 1;
  *(_DWORD *)v130 = 1065353216;
  *(_QWORD *)&v130[4] = 0xFFFFFFFFLL;
  v83 = *((_QWORD *)v127 + 10);
  if (!v83)
    goto LABEL_229;
  *(_DWORD *)(v83 + 24) += 2;
  v138 = (_QWORD *)v83;
  if (v83 == a1)
  {
    v138 = 0;
    v83 = a1;
    goto LABEL_227;
  }
  while (1)
  {
    if ((*(_WORD *)(v83 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v83 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::sourceTag + 24))
    {
      v84 = WebCore::Element::attributeWithoutSynchronization(v83, &WebCore::HTMLNames::srcsetAttr);
      if (*(_QWORD *)v84)
      {
        if (*(_DWORD *)(*(_QWORD *)v84 + 4))
          break;
      }
    }
LABEL_157:
    WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v138, v138[7]);
    v83 = (uint64_t)v138;
    if (v138)
      v85 = v138 == (_QWORD *)a1;
    else
      v85 = 1;
    if (v85)
      goto LABEL_226;
  }
  v86 = (uint64_t *)v84;
  v87 = (const WTF::String *)WebCore::Element::attributeWithoutSynchronization(v83, &WebCore::HTMLNames::typeAttr);
  if (*(_QWORD *)v87)
  {
    WebCore::extractMIMETypeFromTypeAttributeForLookup(&v139, v87, v88, v89, v90);
    if (v139
      && *((_DWORD *)v139 + 1)
      && !WebCore::MIMETypeRegistry::isSupportedImageVideoOrSVGMIMEType(&v139, v7))
    {
      v92 = 0;
      v91 = 4;
    }
    else
    {
      v91 = 0;
      v92 = 1;
    }
    v93 = v139;
    v139 = 0;
    if (v93)
    {
      if (*(_DWORD *)v93 == 2)
        WTF::StringImpl::destroy(v93, v7);
      else
        *(_DWORD *)v93 -= 2;
    }
    if (!v92)
      goto LABEL_205;
  }
  v94 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v95 = *(_QWORD *)(v94 + 1272);
  if (v95)
  {
    *(_DWORD *)(v95 + 24) += 2;
    if (*(_BYTE *)(v94 + 3382))
      v96 = &WebCore::printAtomData;
    else
      v96 = &WebCore::screenAtomData;
    v97 = WebCore::Node::computedStyle((WebCore::Node *)v95);
  }
  else
  {
    v97 = 0;
    if (*(_BYTE *)(v94 + 3382))
      v96 = &WebCore::printAtomData;
    else
      v96 = &WebCore::screenAtomData;
  }
  v98 = (WTF *)*v96;
  if (*v96)
    *(_DWORD *)v98 += 2;
  v134 = v98;
  v99 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v94);
  if (v99)
  {
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 + 1, v99));
  }
  v135 = (WTF *)v99;
  v136 = v97;
  v137 = 2;
  v101 = WebCore::HTMLSourceElement::parsedMediaAttribute((WebCore::HTMLSourceElement *)v83, *(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8));
  v102 = (uint64_t *)v101;
  v103 = *((_DWORD *)v101 + 3);
  if (v103)
  {
    v104 = *v101;
    v105 = 56 * v103 - 56;
    do
    {
      v106 = WebCore::MQ::MediaQueryEvaluator::evaluate((WebCore::MQ::MediaQueryEvaluator *)&v134, v104);
      if (v106)
        break;
      v104 = (const WebCore::MQ::MediaQuery *)((char *)v104 + 56);
      v107 = v105;
      v105 -= 56;
    }
    while (v107);
  }
  else
  {
    v106 = 1;
  }
  if (WebCore::MQ::MediaQueryEvaluator::collectDynamicDependencies(&v134, v102))
  {
    WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v139, (uint64_t)v102);
    BYTE8(v140) = v106;
    v110 = *(_DWORD *)(a1 + 300);
    if (v110 == *(_DWORD *)(a1 + 296))
    {
      WTF::Vector<WebCore::MQ::MediaQueryResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MQ::MediaQueryResult>((uint64_t)v4, (unint64_t)&v139);
    }
    else
    {
      v111 = *(_QWORD *)(a1 + 288) + 24 * v110;
      *(_QWORD *)v111 = 0;
      *(_QWORD *)(v111 + 8) = 0;
      v112 = v139;
      v139 = 0;
      *(_QWORD *)v111 = v112;
      LODWORD(v112) = v140;
      LODWORD(v140) = 0;
      *(_DWORD *)(v111 + 8) = (_DWORD)v112;
      LODWORD(v112) = DWORD1(v140);
      DWORD1(v140) = 0;
      *(_DWORD *)(v111 + 12) = (_DWORD)v112;
      *(_BYTE *)(v111 + 16) = BYTE8(v140);
      ++*(_DWORD *)(a1 + 300);
    }
    WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v139, v109);
  }
  if (v106)
  {
    v113 = (unsigned int **)WebCore::Element::attributeWithoutSynchronization(v83, &WebCore::HTMLNames::sizesAttr);
    WebCore::SizesAttributeParser::SizesAttributeParser((WebCore::SizesAttributeParser *)v132, v113, *(const WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8));
    WTF::Vector<WebCore::MQ::MediaQueryResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::MQ::MediaQueryResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)v4, (uint64_t)v132[1], v133);
    v114 = WebCore::SizesAttributeParser::length((WebCore::SizesAttributeParser *)v132);
    v115 = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8));
    v116 = *v86;
    if (*v86)
    {
      v117 = *(unsigned __int8 **)(v116 + 8);
      v118 = *(unsigned int *)(v116 + 4);
      v119 = ((unint64_t)*(unsigned int *)(v116 + 16) >> 2) & 1;
    }
    else
    {
      v117 = 0;
      v118 = 0;
      v119 = 1;
    }
    v120 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v120 = off_1E33C1970;
    v120[1] = a1;
    v131 = v120;
    WebCore::bestFitSourceForImageAttributes(MEMORY[0x1E0CBF2F8], v117, v118 | (v119 << 32), &v131, (uint64_t)&v139, v115, v114);
    v122 = v139;
    v139 = 0;
    v123 = v128;
    v128 = v122;
    if (v123)
    {
      if (*(_DWORD *)v123 == 2)
      {
        WTF::StringImpl::destroy(v123, v121);
        v125 = v139;
        *(_QWORD *)v129 = v140;
        *(_QWORD *)&v129[5] = *(_QWORD *)((char *)&v140 + 5);
        *(_QWORD *)v130 = v141;
        *(_DWORD *)&v130[8] = DWORD2(v141);
        v139 = 0;
        if (v125)
        {
          if (*(_DWORD *)v125 == 2)
            WTF::StringImpl::destroy(v125, v121);
          else
            *(_DWORD *)v125 -= 2;
        }
        goto LABEL_196;
      }
      *(_DWORD *)v123 -= 2;
    }
    *(_QWORD *)v129 = v140;
    *(_QWORD *)&v129[5] = *(_QWORD *)((char *)&v140 + 5);
    *(_QWORD *)v130 = v141;
    *(_DWORD *)&v130[8] = DWORD2(v141);
    v139 = 0;
LABEL_196:
    v124 = v131;
    v131 = 0;
    if (v124)
      (*(void (**)(_QWORD *))(*v124 + 8))(v124);
    if (*(_DWORD *)&v129[8])
    {
      WebCore::HTMLImageElement::setSourceElement((WebCore::Node *)a1, (WebCore::HTMLSourceElement *)v83);
      v91 = 2;
    }
    else
    {
      v91 = 0;
    }
    WebCore::SizesAttributeParser::~SizesAttributeParser((WebCore::SizesAttributeParser *)v132, v121);
    goto LABEL_202;
  }
  v91 = 4;
LABEL_202:
  WebCore::MQ::MediaQueryEvaluator::~MediaQueryEvaluator((WebCore::MQ::MediaQueryEvaluator *)&v134, v108);
  if (v95)
  {
    if (*(_DWORD *)(v95 + 24) == 2)
    {
      if ((*(_WORD *)(v95 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v95);
    }
    else
    {
      *(_DWORD *)(v95 + 24) -= 2;
    }
  }
LABEL_205:
  if ((v91 | 4) == 4)
    goto LABEL_157;
  v83 = (uint64_t)v138;
LABEL_226:
  v138 = 0;
  if (v83)
  {
LABEL_227:
    if (*(_DWORD *)(v83 + 24) == 2)
    {
      if ((*(_WORD *)(v83 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v83);
    }
    else
    {
      *(_DWORD *)(v83 + 24) -= 2;
    }
  }
LABEL_229:
  if (*((_DWORD *)v127 + 6) == 2)
  {
    if ((*((_WORD *)v127 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v127);
  }
  else
  {
    *((_DWORD *)v127 + 6) -= 2;
  }
LABEL_6:
  v9 = *(_DWORD *)&v129[8];
  if (!*(_DWORD *)&v129[8])
  {
    v10 = *(_QWORD *)(a1 + 280);
    if (v10 && *(_QWORD *)(v10 + 8))
    {
      v139 = 0;
      WTF::WeakPtr<WebCore::HTMLMetaElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::operator=((uint64_t *)(a1 + 280), (uint64_t *)&v139);
      WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr((uint64_t *)&v139, v80);
      WebCore::HTMLImageElement::invalidateAttributeMapping((WebCore::HTMLImageElement *)a1);
    }
    v11 = *(_QWORD *)(a1 + 104);
    v12 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    if (v11)
    {
      v13 = *(_DWORD *)(v11 + 4);
      if ((v13 & 1) != 0)
      {
        v14 = *(_QWORD *)(v11 + 40);
        LODWORD(v15) = *(_DWORD *)(v11 + 52);
      }
      else
      {
        v14 = v11 + 32;
        LODWORD(v15) = v13 >> 5;
      }
      if ((_DWORD)v15)
      {
        v15 = v15;
        v16 = (uint64_t *)(v14 + 8);
        while (1)
        {
          v17 = *(v16 - 1);
          if (v17 == WebCore::HTMLNames::srcAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
          {
            break;
          }
          v16 += 2;
          if (!--v15)
          {
            v16 = (uint64_t *)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      else
      {
        v16 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      }
    }
    else
    {
      v16 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    }
    v18 = *v16;
    if (*v16)
      *(_DWORD *)v18 += 2;
    v132[0] = (WTF::StringImpl *)v18;
    if (v11)
    {
      v19 = *(_DWORD *)(v11 + 4);
      v20 = v19 >> 5;
      if ((v19 & 1) != 0)
      {
        v21 = *(_QWORD *)(v11 + 40);
        LODWORD(v22) = *(_DWORD *)(v11 + 52);
      }
      else
      {
        v21 = v11 + 32;
        LODWORD(v22) = v19 >> 5;
      }
      if ((_DWORD)v22)
      {
        v22 = v22;
        v12 = (uint64_t *)(v21 + 8);
        while (1)
        {
          v23 = *(v12 - 1);
          if (v23 == WebCore::HTMLNames::srcsetAttr
            || *(_QWORD *)(v23 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcsetAttr + 24)
            && *(_QWORD *)(v23 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcsetAttr + 32))
          {
            break;
          }
          v12 += 2;
          if (!--v22)
          {
            v12 = (uint64_t *)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      v24 = *v12;
      if (*v12)
      {
        *(_DWORD *)v24 += 2;
        if ((v19 & 1) != 0)
        {
          v25 = *(_QWORD *)(v11 + 40);
          v20 = *(_DWORD *)(v11 + 52);
        }
        else
        {
          v25 = v11 + 32;
        }
        if (v20)
        {
          v26 = v20;
          v27 = (unsigned int **)(v25 + 8);
          while (1)
          {
            v28 = (uint64_t)*(v27 - 1);
            if (v28 == WebCore::HTMLNames::sizesAttr
              || *(_QWORD *)(v28 + 24) == *(_QWORD *)(WebCore::HTMLNames::sizesAttr + 24)
              && *(_QWORD *)(v28 + 32) == *(_QWORD *)(WebCore::HTMLNames::sizesAttr + 32))
            {
              break;
            }
            v27 += 2;
            if (!--v26)
            {
              v27 = (unsigned int **)MEMORY[0x1E0CBF2F8];
              break;
            }
          }
LABEL_37:
          WebCore::SizesAttributeParser::SizesAttributeParser((WebCore::SizesAttributeParser *)&v134, v27, *(const WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8));
          WTF::Vector<WebCore::MQ::MediaQueryResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::MQ::MediaQueryResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)v4, (uint64_t)v135, HIDWORD(v136));
          v29 = WebCore::SizesAttributeParser::length((WebCore::SizesAttributeParser *)&v134);
          v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 528);
          v31 = 1.0;
          if (v30)
          {
            v32 = *(_QWORD *)(v30 + 8);
            if (v32)
            {
              v33 = *(_QWORD *)(v32 + 24);
              if (v33)
              {
                v34 = *(float **)(v33 + 8);
                if (v34)
                {
                  v35 = (*(_DWORD *)v34)++;
                  v31 = v34[91];
                  if (v35)
                  {
                    *(_DWORD *)v34 = v35;
                  }
                  else
                  {
                    WebCore::Page::~Page((WebCore::Page *)v34);
                    WTF::fastFree(v73, v74);
                  }
                }
              }
            }
          }
          v36 = *(unsigned __int8 **)(v24 + 8);
          v37 = *(unsigned int *)(v24 + 4);
          v38 = (*(_DWORD *)(v24 + 16) >> 2) & 1;
          v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v39 = off_1E33C1998;
          v39[1] = a1;
          v138 = v39;
          WebCore::bestFitSourceForImageAttributes((uint64_t *)v132, v36, v37 | (v38 << 32), &v138, (uint64_t)&v139, v31, v29);
          v40 = v139;
          v139 = 0;
          v41 = v128;
          v128 = v40;
          if (v41)
          {
            if (*(_DWORD *)v41 != 2)
            {
              *(_DWORD *)v41 -= 2;
              goto LABEL_46;
            }
            WTF::StringImpl::destroy(v41, v7);
            v72 = v139;
            *(_QWORD *)v129 = v140;
            *(_QWORD *)&v129[5] = *(_QWORD *)((char *)&v140 + 5);
            *(_QWORD *)v130 = v141;
            *(_DWORD *)&v130[8] = DWORD2(v141);
            v139 = 0;
            if (v72)
            {
              if (*(_DWORD *)v72 == 2)
                WTF::StringImpl::destroy(v72, v7);
              else
                *(_DWORD *)v72 -= 2;
            }
          }
          else
          {
LABEL_46:
            *(_QWORD *)v129 = v140;
            *(_QWORD *)&v129[5] = *(_QWORD *)((char *)&v140 + 5);
            *(_QWORD *)v130 = v141;
            *(_DWORD *)&v130[8] = DWORD2(v141);
            v139 = 0;
          }
          v42 = (uint64_t)v138;
          v138 = 0;
          if (v42)
            (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
          if (HIDWORD(v136))
          {
            v81 = v135;
            v82 = 24 * HIDWORD(v136);
            do
            {
              v81 = (WTF *)(WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v81, v7)+ 24);
              v82 -= 24;
            }
            while (v82);
          }
          v43 = v135;
          if (v135)
          {
            v135 = 0;
            LODWORD(v136) = 0;
            WTF::fastFree(v43, v7);
          }
          v44 = v134;
          v134 = 0;
          if (v44)
          {
            do
            {
              v65 = __ldaxr((unsigned int *)v44);
              v66 = v65 - 1;
            }
            while (__stlxr(v66, (unsigned int *)v44));
            if (!v66)
            {
              atomic_store(1u, (unsigned int *)v44);
              v67 = *((unsigned int *)v44 + 7);
              if ((_DWORD)v67)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v44 + 2), (WTF::StringImpl *)(*((_QWORD *)v44 + 2) + 32 * v67));
              v68 = (WTF *)*((_QWORD *)v44 + 2);
              if (v68)
              {
                *((_QWORD *)v44 + 2) = 0;
                *((_DWORD *)v44 + 6) = 0;
                WTF::fastFree(v68, v7);
              }
              WTF::fastFree(v44, v7);
            }
          }
          if (*(_DWORD *)v24 != 2)
          {
            *(_DWORD *)v24 -= 2;
            goto LABEL_55;
          }
          v71 = (WTF::StringImpl *)v24;
LABEL_113:
          WTF::StringImpl::destroy(v71, v7);
          goto LABEL_55;
        }
LABEL_124:
        v27 = (unsigned int **)MEMORY[0x1E0CBF2F8];
        goto LABEL_37;
      }
    }
    else
    {
      v24 = *v12;
      if (*v12)
      {
        *(_DWORD *)v24 += 2;
        goto LABEL_124;
      }
    }
    if (v18)
    {
      v75 = *(_QWORD *)(v18 + 8);
      v76 = *(unsigned int *)(v18 + 4) | ((unint64_t)((*(_DWORD *)(v18 + 16) >> 2) & 1) << 32);
      *(_DWORD *)v18 += 4;
      v77 = v128;
      v128 = (WTF::StringImpl *)v18;
      if (v77)
      {
        if (*(_DWORD *)v77 == 2)
          WTF::StringImpl::destroy(v77, v7);
        else
          *(_DWORD *)v77 -= 2;
      }
      *(_QWORD *)v129 = v75;
      *(_DWORD *)&v129[8] = v76;
      v129[12] = BYTE4(v76);
      *(_DWORD *)v130 = -1082130432;
      *(_QWORD *)&v130[4] = 0x1FFFFFFFFLL;
      if (*(_DWORD *)v18 == 2)
      {
        v71 = (WTF::StringImpl *)v18;
        goto LABEL_113;
      }
      *(_DWORD *)v18 -= 2;
    }
    else
    {
      v126 = v128;
      v128 = 0;
      if (v126)
      {
        if (*(_DWORD *)v126 == 2)
          WTF::StringImpl::destroy(v126, v7);
        else
          *(_DWORD *)v126 -= 2;
      }
      *(_DWORD *)&v129[8] = 0;
      *(_QWORD *)v129 = 0;
      v129[12] = 1;
      *(_DWORD *)v130 = 1065353216;
      *(_QWORD *)&v130[4] = 0xFFFFFFFFLL;
    }
LABEL_55:
    v45 = v132[0];
    v132[0] = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, v7);
      else
        *(_DWORD *)v45 -= 2;
    }
    v9 = *(_DWORD *)&v129[8];
  }
  v46 = v128;
  if (!v128)
  {
    if (!v9)
    {
      v46 = 0;
      goto LABEL_63;
    }
LABEL_132:
    WTF::StringView::toAtomString((WTF::StringView *)v129, &v139);
    goto LABEL_126;
  }
  if (v9 != *((_DWORD *)v128 + 1))
    goto LABEL_132;
  if ((*((_BYTE *)v128 + 16) & 0x10) != 0)
  {
    *(_DWORD *)v128 += 2;
    goto LABEL_63;
  }
  WTF::AtomStringImpl::addSlowCase(v128, v7);
LABEL_126:
  v46 = v139;
LABEL_63:
  v139 = 0;
  v47 = *(WTF::StringImpl **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v46;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::destroy(v47, v7);
      v70 = v139;
      v139 = 0;
      if (v70)
      {
        if (*(_DWORD *)v70 == 2)
          WTF::StringImpl::destroy(v70, v69);
        else
          *(_DWORD *)v70 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  v48 = *(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8);
  v49 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 640))(a1);
  WebCore::Document::completeURL(v48, v49, (uint64_t)v48 + 848, 0, (WTF::URL *)&v139);
  v51 = v139;
  v139 = 0;
  v52 = *(WTF::StringImpl **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v51;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::destroy(v52, v50);
      v53 = v139;
    }
    else
    {
      v53 = 0;
      *(_DWORD *)v52 -= 2;
    }
  }
  else
  {
    v53 = 0;
  }
  v54 = v140;
  LODWORD(v140) = v140 & 0xFFFFFFFE;
  v55 = v141;
  *(_OWORD *)(a1 + 208) = v54;
  *(_OWORD *)(a1 + 224) = v55;
  v139 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v50);
    else
      *(_DWORD *)v53 -= 2;
  }
  v56 = *(WTF::StringImpl **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, v50);
    else
      *(_DWORD *)v56 -= 2;
  }
  if (*(float *)v130 >= 0.0)
    *(float *)(a1 + 260) = 1.0 / *(float *)v130;
  v57 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
  if (v57)
  {
    if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1943A82A8);
    }
    if ((((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3) & *(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL)
                                                                                               + 0x35)) == 1)
    {
      v58 = *(_DWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
      *(_DWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v58;
      v59 = *(float *)(a1 + 260);
      if (*(float *)(v57 + 236) != v59)
      {
        *(float *)(v57 + 236) = v59;
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 1656))(v57);
        v58 = *(_DWORD *)(v57 + 16);
      }
      if (!v58)
      {
        __break(0xC471u);
        JUMPOUT(0x1943A82C8);
      }
      *(_DWORD *)(v57 + 16) = v58 - 1;
    }
  }
  v60 = *(_QWORD *)(a1 + 176);
  v61 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v61 += 2;
  v62 = *(WTF::StringImpl **)(v60 + 96);
  *(_QWORD *)(v60 + 96) = v61;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, v50);
    else
      *(_DWORD *)v62 -= 2;
  }
  WebCore::ImageLoader::updateFromElement(v60, v2);
  if (*(_DWORD *)(a1 + 300))
    WebCore::Document::addDynamicMediaQueryDependentImage(*(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8), (WebCore::HTMLImageElement *)a1);
  result = (uint64_t)v128;
  if (v128)
  {
    if (*(_DWORD *)v128 == 2)
      return WTF::StringImpl::destroy(v128, v63);
    else
      *(_DWORD *)v128 -= 2;
  }
  return result;
}

BOOL WebCore::SizesAttributeParser::parse(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  const WebCore::CSSParserToken *v8;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  __int128 *v12;
  __int128 *SubRange;
  __int128 *v14;
  __int128 *v15;
  __int128 *v16;
  __int128 *v17;
  const WebCore::Document *v18;
  void *v19;
  _BOOL4 v20;
  void *v21;
  void *v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  __int128 *v29;
  __int128 *v30;
  __int128 *v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  _QWORD v36[4];
  _BYTE v37[56];
  char v38;
  int v39;
  __int128 *v40;
  __int128 *v41;
  uint64_t v42[8];

  v42[7] = *MEMORY[0x1E0C80C00];
  v40 = a2;
  v41 = a3;
  do
  {
    v4 = v40;
    v5 = v41;
    if (v40 == v41)
      break;
    if (v40 >= v41)
    {
      v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        v6 = v41;
        v9 = v40;
      }
      else
      {
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        v9 = v40;
        v6 = v41;
      }
    }
    else
    {
      v6 = v41;
      v9 = v40;
      v12 = v40;
    }
    if (v9 >= v6)
    {
      v8 = (const WebCore::CSSParserToken *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        v9 = v40;
        v6 = v41;
      }
    }
    else
    {
      v8 = (const WebCore::CSSParserToken *)v9;
    }
    if (v9 < v6)
    {
      v10 = v9;
      goto LABEL_5;
    }
    {
      v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      goto LABEL_5;
    }
    v10 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    v9 = v40;
    while (1)
    {
      v6 = v41;
LABEL_5:
      if (v9 == v6)
        break;
      if (v9 >= v6)
      {
        v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v29 = v10;
          v7 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v10 = v29;
          v9 = v40;
          v6 = v41;
        }
      }
      else
      {
        v7 = v9;
      }
      if ((*(_DWORD *)v7 & 0x3F) == 0x15)
      {
        if (v9 != v6)
        {
          v40 = (__int128 *)((char *)v9 + 24);
          goto LABEL_34;
        }
        break;
      }
      v8 = (const WebCore::CSSParserToken *)v9;
      if (v9 >= v6)
      {
        v8 = (const WebCore::CSSParserToken *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v8 = (const WebCore::CSSParserToken *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        }
      }
      WebCore::CSSParserTokenRange::consumeComponentValue(&v40);
      v9 = v40;
      if (v40 >= v41)
      {
        v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v10 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v9 = v40;
        }
      }
      else
      {
        v10 = v40;
      }
      while (1)
      {
        if (v9 >= v41)
        {
          v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            v30 = v10;
            v11 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
            v10 = v30;
            v9 = v40;
          }
        }
        else
        {
          v11 = v9;
        }
        if ((*(_DWORD *)v11 & 0x3F) != 0x10)
          break;
        v9 = (__int128 *)((char *)v9 + 24);
        v40 = v9;
      }
    }
    {
      v31 = v10;
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      v10 = v31;
    }
LABEL_34:
    v39 = 0;
    SubRange = (__int128 *)WebCore::CSSParserTokenRange::makeSubRange((WebCore::CSSParserTokenRange *)&v40, v8, (const WebCore::CSSParserToken *)v10);
    if (WebCore::SizesAttributeParser::calculateLengthInPixels(a1, SubRange, v14, (float *)&v39))
    {
      v15 = (__int128 *)WebCore::CSSParserTokenRange::makeSubRange((WebCore::CSSParserTokenRange *)&v40, (const WebCore::CSSParserToken *)v12, v8);
      v17 = v16;
      v18 = *(const WebCore::Document **)(*(_QWORD *)a1 + 8);
      *((_DWORD *)v18 + 6) += 2;
      v42[0] = (uint64_t)v18;
      WebCore::MediaQueryParserContext::MediaQueryParserContext(v36, v18);
      WebCore::MQ::MediaQueryParser::parseCondition(v15, v17, (uint64_t)v36, (uint64_t)v37);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v42);
      if (v38)
      {
        v20 = WebCore::SizesAttributeParser::mediaConditionMatches(*(WebCore::SizesAttributeParser **)(*(_QWORD *)a1 + 8), (const WebCore::MQ::MediaQuery *)v37);
        WebCore::MQ::MediaQueryEvaluator::MediaQueryEvaluator((uint64_t)v36, (_DWORD **)&WebCore::screenAtomData, 0);
        if (!v38)
          goto LABEL_58;
        if (WebCore::MQ::MediaQueryEvaluator::collectDynamicDependencies(v36, (uint64_t)v37))
        {
          if (!v38)
LABEL_58:
            __break(1u);
          WebCore::MQ::MediaQuery::MediaQuery((uint64_t)v42, (const WebCore::MQ::MediaQuery *)v37);
          WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(&v32, (uint64_t)v42, 1uLL);
          v35 = v20;
          v23 = *(_DWORD *)(a1 + 20);
          if (v23 == *(_DWORD *)(a1 + 16))
          {
            WTF::Vector<WebCore::MQ::MediaQueryResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MQ::MediaQueryResult>(a1 + 8, (unint64_t)&v32);
          }
          else
          {
            v25 = *(_QWORD *)(a1 + 8) + 24 * v23;
            *(_QWORD *)v25 = 0;
            *(_QWORD *)(v25 + 8) = 0;
            v26 = v32;
            v32 = 0;
            *(_QWORD *)v25 = v26;
            LODWORD(v26) = v33;
            v33 = 0;
            *(_DWORD *)(v25 + 8) = v26;
            LODWORD(v26) = v34;
            v34 = 0;
            *(_DWORD *)(v25 + 12) = v26;
            *(_BYTE *)(v25 + 16) = v35;
            ++*(_DWORD *)(a1 + 20);
          }
          WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v22);
          WebCore::MQ::MediaQuery::~MediaQuery((WebCore::MQ::MediaQuery *)v42, v27);
        }
        if (v20)
        {
          *(_DWORD *)(a1 + 24) = v39;
          v24 = 1;
          *(_BYTE *)(a1 + 28) = 1;
        }
        else
        {
          v24 = 2;
        }
        WebCore::MQ::MediaQueryEvaluator::~MediaQueryEvaluator((WebCore::MQ::MediaQueryEvaluator *)v36, v21);
      }
      else
      {
        v24 = 2;
      }
      std::optional<WebCore::MQ::MediaQuery>::~optional((uint64_t)v37, v19);
    }
    else
    {
      v24 = 2;
    }
  }
  while (v24 == 2);
  return v4 != v5;
}

uint64_t WebCore::SizesAttributeParser::effectiveSizeDefaultValue(WebCore::SizesAttributeParser *this)
{
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v8[5];
  int v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  *(_DWORD *)(v1 + 24) += 2;
  v8[0] = v1;
  v2 = *(_QWORD *)(v1 + 1944);
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v8);
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 32);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v4 = v5 + 80;
      else
        v4 = 0;
    }
    v8[0] = v2 + 80;
    v8[1] = v2 + 80;
    v8[2] = v4;
    v8[3] = v2;
    v8[4] = 0;
    v9 = 1065353216;
    v10 = 1;
    v11 = 0;
    v12 = 0;
    v13 = v2 + 80;
    v14 = 0;
    v3.n128_u64[0] = 0x4059000000000000;
    v6 = WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble((uint64_t)v8, (void *)0x19, v3);
    v2 = v6;
    WebCore::CSSToLengthConversionData::~CSSToLengthConversionData((WebCore::CSSToLengthConversionData *)v8);
  }
  return v2;
}

uint64_t WebCore::MQ::Features::LengthSchema::evaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  const WebCore::CSSToLengthConversionData *v7;
  int v8;
  int v9;
  _BOOL4 v11;

  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a3);
  if (!(*(unsigned __int8 *)(a2 + 32) | *(unsigned __int8 *)(a2 + 56)))
    return v5 != 0;
  v6 = v5;
  v7 = (const WebCore::CSSToLengthConversionData *)(a3 + 8);
  v8 = WebCore::MQ::evaluateLengthComparison(v5, a2 + 16, 0, v7);
  v9 = WebCore::MQ::evaluateLengthComparison(v6, a2 + 40, 1, v7);
  v11 = v8 == 1 && v9 == 1;
  if (v9 == 2 || v8 == 2)
    return 2;
  else
    return v11;
}

uint64_t WebCore::MQ::evaluateLengthComparison(int a1, uint64_t a2, int a3, const WebCore::CSSToLengthConversionData *a4)
{
  uint64_t v6;
  int v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v16;
  int v18;
  int v19;
  __n128 v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  double v27;
  double v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  unsigned __int8 *v32;
  int v33;

  if (!*(_BYTE *)(a2 + 16))
    return 1;
  v6 = *(_QWORD *)(a2 + 8);
  if (!v6)
    return 2;
  *(_DWORD *)v6 += 2;
  v9 = *(unsigned __int16 *)(v6 + 4) | (*(unsigned __int8 *)(v6 + 6) << 16);
  v10 = 1;
  if ((v9 & 0x3F800) != 0)
    goto LABEL_6;
  v16 = *(_WORD *)(v6 + 4) & 0x7F;
  if ((v16 - 63) <= 0x11 && ((1 << ((*(_WORD *)(v6 + 4) & 0x7F) - 63)) & 0x34001) != 0)
    goto LABEL_26;
  if (v16 != 73)
    goto LABEL_24;
  v30 = *(unsigned __int8 **)(*(_QWORD *)(v6 + 8) + 8);
  v31 = v30[12];
  if (v31 == 1 || (v31 - 5) < 4)
  {
    v16 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v30 + 72))(v30);
LABEL_24:
    if (v16 == 1)
      goto LABEL_66;
    LOWORD(v9) = *(_WORD *)(v6 + 4);
    goto LABEL_26;
  }
  if (!v30[12])
    goto LABEL_66;
LABEL_26:
  v18 = v9 & 0x7F;
  v19 = (1 << ((v9 & 0x7F) - 63)) & 0x34001;
  if ((v18 - 63) > 0x11 || v19 == 0)
  {
    if (v18 == 73)
    {
      v32 = *(unsigned __int8 **)(*(_QWORD *)(v6 + 8) + 8);
      v33 = v32[12];
      if (v33 != 1 && (v33 - 5) > 3)
        goto LABEL_33;
      v18 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v32 + 72))(v32);
    }
    if (v18 != 2)
      goto LABEL_33;
LABEL_66:
    if (WebCore::CSSPrimitiveValue::doubleValue((WebCore::CSSPrimitiveValue *)v6) == 0.0)
    {
      v10 = 0;
LABEL_6:
      v11 = 0;
      v12 = 0;
      goto LABEL_7;
    }
    goto LABEL_67;
  }
LABEL_33:
  if (!WebCore::CSSPrimitiveValue::isLength((WebCore::CSSPrimitiveValue *)v6))
  {
LABEL_67:
    v11 = 0;
    v12 = 0;
    v10 = 1;
    goto LABEL_7;
  }
  v22 = *(_WORD *)(v6 + 4) & 0x7F;
  if (v22 == 73)
  {
    v27 = WebCore::CSSCalcValue::computeLengthPx(*(WebCore::CSSCalcValue **)(v6 + 8), a4);
  }
  else
  {
    v23 = v22 - 79;
    if (v22 == 63)
      v24 = 22;
    else
      v24 = *(_WORD *)(v6 + 4) & 0x7F;
    if (v22 == 77)
      v25 = 20;
    else
      v25 = v24;
    if (v23 >= 2)
      v26 = v25;
    else
      v26 = 22;
    v21.n128_u64[0] = *(_QWORD *)(v6 + 8);
    v27 = WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble((uint64_t)a4, (void *)v26, v21);
  }
  v28 = v27 * 64.0;
  if (v28 >= 2147483650.0)
  {
    v29 = 0x7FFFFFFF;
  }
  else if (v28 <= -2147483650.0)
  {
    v29 = 0x80000000;
  }
  else
  {
    v29 = (int)v28;
  }
  v10 = 0;
  v12 = v29 & 0xFFFFFF00;
  v11 = v29;
LABEL_7:
  if (*(_DWORD *)v6 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v6, (WTF::StringImpl *)a2);
  else
    *(_DWORD *)v6 -= 2;
  if ((v10 & 1) != 0)
    return 2;
  v13 = v12 | v11;
  if (a3)
    v14 = a1;
  else
    v14 = v12 | v11;
  if (!a3)
    v13 = a1;
  if (*(_BYTE *)(a2 + 16))
  {
    if (*(_BYTE *)a2 != 1)
    {
      switch(*(_BYTE *)a2)
      {
        case 0:
          return v14 < v13;
        case 2:
          return v14 == v13;
        case 3:
          return v14 > v13;
        case 4:
          return v14 >= v13;
        default:
          __break(0xC471u);
          JUMPOUT(0x1943A9254);
      }
    }
    return v14 <= v13;
  }
  else
  {
    __break(1u);
    return v14 < v13;
  }
}

WebCore::Node *WebCore::Style::BuilderConverter::convertLength@<X0>(WebCore::Style::BuilderConverter *this@<X0>, const WebCore::Style::BuilderState *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  WebCore::Node *v10;
  __n128 v11;
  __int16 v12;
  unsigned int v13;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  double v20;
  double v21;
  float v22;
  __int16 v23;
  int v24;
  int v25;
  WebCore::Node *result;
  __int128 v27;
  WebCore::Node *v28;
  double v30;
  float v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  double v35;
  BOOL v37;
  unsigned __int8 *v38;
  int v39;
  _BYTE *v40;
  uint64_t v41;
  unsigned __int8 *v42;
  int v43;
  WebCore::CSSCalcValue *v44;
  void *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const WebCore::Style::BuilderState *v50;
  WebCore::Style::AnchorPositionEvaluator *v51;
  __int128 v52;
  __int128 v53;
  WebCore::Node *v54;
  __int128 v55;
  __n128 v56;
  WTF *v57;

  if (((*((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16)) & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1943A96C0);
  }
  v7 = *((_QWORD *)this + 6);
  if (!v7 || (*(_WORD *)(v7 + 28) & 0x20) == 0)
  {
    v8 = (__int128 *)((char *)this + 64);
LABEL_5:
    v9 = v8[1];
    v52 = *v8;
    v53 = v9;
    v10 = (WebCore::Node *)*((_QWORD *)this + 12);
    if (v10)
      *((_DWORD *)v10 + 6) += 2;
    v54 = v10;
    v55 = *(_OWORD *)((char *)this + 104);
    v11 = *(__n128 *)((char *)this + 120);
    v56 = v11;
    goto LABEL_8;
  }
  if (*(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
  {
    v41 = *(_QWORD *)(v7 + 32);
    v8 = (__int128 *)((char *)this + 64);
    if (v41)
      goto LABEL_5;
  }
  else
  {
    v8 = (__int128 *)((char *)this + 64);
  }
  v27 = v8[1];
  v52 = *v8;
  v53 = v27;
  v28 = (WebCore::Node *)*((_QWORD *)this + 12);
  if (v28)
    *((_DWORD *)v28 + 6) += 2;
  v54 = v28;
  v55 = *(_OWORD *)((char *)this + 104);
  v11 = *(__n128 *)((char *)this + 120);
  v56 = v11;
  LODWORD(v55) = 1065353216;
  BYTE4(v55) = 1;
LABEL_8:
  v12 = *((_WORD *)a2 + 2);
  v13 = v12 & 0x7F;
  if (v13 - 63 <= 0x11 && ((1 << ((*((_WORD *)a2 + 2) & 0x7F) - 63)) & 0x34001) != 0)
  {
LABEL_50:
    if (v13 - 63 <= 0x11 && ((1 << (v13 - 63)) & 0x34001) != 0)
    {
LABEL_93:
      if (WebCore::CSSPrimitiveValue::primitiveType(a2) == 75)
      {
        if ((*((_WORD *)a2 + 2) & 0x7F) == 0x49)
          v44 = (WebCore::CSSCalcValue *)*((_QWORD *)a2 + 1);
        else
          v44 = 0;
        WebCore::CSSCalcValue::createCalculationValue(v44, (const WebCore::CSSToLengthConversionData *)&v52, &v57);
        WebCore::Length::Length(a3, &v57);
        v46 = v57;
        v57 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 1)
          {
            v47 = *((_QWORD *)v46 + 1);
            *((_QWORD *)v46 + 1) = 0;
            if (v47)
              (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
            WTF::fastFree(v46, v45);
          }
          else
          {
            --*(_DWORD *)v46;
          }
        }
      }
      else if (WebCore::CSSPrimitiveValue::primitiveType(a2) == 76)
      {
        if (WebCore::CSSPrimitiveValue::primitiveType(a2) == 76)
          v51 = (WebCore::Style::AnchorPositionEvaluator *)*((_QWORD *)a2 + 1);
        else
          v51 = 0;
        WebCore::Style::AnchorPositionEvaluator::resolveAnchorValue(v51, this, v50, a3);
      }
      else
      {
        *(_DWORD *)a3 = 0;
        *(_WORD *)(a3 + 4) = 4;
        *(_BYTE *)(a3 + 6) = 0;
      }
      goto LABEL_37;
    }
    if ((v12 & 0x7F) == 0x49)
    {
      v42 = *(unsigned __int8 **)(*((_QWORD *)a2 + 1) + 8);
      v43 = v42[12];
      if (v43 != 1)
      {
        if (v43 == 2)
        {
LABEL_58:
          if ((v12 & 0x7F) == 0x49)
          {
            v48 = *((_QWORD *)a2 + 1);
            v57 = 0;
            v30 = WebCore::CSSCalcValue::doubleValue(v48, (uint64_t)&v57);
            if (v57)
              WTF::fastFree((WTF *)((char *)v57 - 16), v49);
          }
          else
          {
            v30 = *((double *)a2 + 1);
          }
          v31 = v30;
          *(float *)a3 = v31;
          *(_WORD *)(a3 + 4) = 3;
          *(_BYTE *)(a3 + 6) = 1;
          goto LABEL_37;
        }
        if ((v43 - 5) > 3)
          goto LABEL_93;
      }
      v13 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v42 + 72))(v42);
    }
    if (v13 != 3)
      goto LABEL_93;
    v12 = *((_WORD *)a2 + 2);
    goto LABEL_58;
  }
  if (v13 == 73)
  {
    v38 = *(unsigned __int8 **)(*((_QWORD *)a2 + 1) + 8);
    v39 = v38[12];
    if (v39 != 1 && (v39 - 5) > 3)
      goto LABEL_50;
    v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v38 + 72))(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8));
  }
  if ((v13 - 60 > 0x15 || ((1 << (v13 - 60)) & 0x201FE7) == 0)
    && v13 - 4 >= 8
    && (v13 < 0x19 || v13 >= 0x31)
    && v13 - 49 >= 6
    && v13 != 81)
  {
    v12 = *((_WORD *)a2 + 2);
    v13 = v12 & 0x7F;
    goto LABEL_50;
  }
  v15 = *((_WORD *)a2 + 2) & 0x7F;
  if (v15 == 73)
  {
    v32 = *((_QWORD *)a2 + 1);
    v33 = *(_DWORD **)(v32 + 8);
    ++v33[2];
    v20 = (*(double (**)(_DWORD *, __int128 *))(*(_QWORD *)v33 + 48))(v33, &v52);
    v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v32 + 8) + 72))(*(_QWORD *)(v32 + 8));
    v35 = fabs(v20);
    if (v34 == 12 && v35 == INFINITY)
    {
      v20 = 0.0;
    }
    else
    {
      if (*(_BYTE *)(v32 + 16))
        v37 = v20 < 0.0;
      else
        v37 = 0;
      if (v37)
        v20 = 0.0;
    }
    if (v33[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
    else
      --v33[2];
  }
  else
  {
    v16 = v15 - 79;
    if (v15 == 63)
      v17 = 22;
    else
      v17 = *((_WORD *)a2 + 2) & 0x7F;
    if (v15 == 77)
      v18 = 20;
    else
      v18 = v17;
    if (v16 >= 2)
      v19 = v18;
    else
      v19 = 22;
    v11.n128_u64[0] = *((_QWORD *)a2 + 1);
    v20 = WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble((uint64_t)&v52, (void *)v19, v11);
  }
  v21 = -33554430.0;
  if (v20 > -33554430.0)
    v21 = v20;
  if (v20 >= 33554429.0)
    v21 = 33554429.0;
  v22 = v21;
  *(float *)a3 = v22;
  *(_BYTE *)(a3 + 4) = 4;
  *(_BYTE *)(a3 + 6) = 1;
  v23 = *((_WORD *)a2 + 2);
  v24 = v23 & 0x7F;
  v25 = 22;
  if ((v24 - 79) >= 2)
  {
    if (v24 == 77)
    {
      v25 = 20;
    }
    else if (v24 != 63)
    {
      v25 = *((_WORD *)a2 + 2) & 0x7F;
      if ((v23 & 0x7F) == 0x49)
      {
        v40 = *(_BYTE **)(*((_QWORD *)a2 + 1) + 8);
        if (v40[12] == 1)
        {
LABEL_77:
          v25 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v40 + 72))(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8));
        }
        else
        {
          v25 = 1;
          switch(v40[12])
          {
            case 0:
              break;
            case 2:
              v25 = 3;
              break;
            case 3:
              v25 = 74;
              break;
            case 4:
              v25 = 75;
              break;
            case 5:
            case 6:
            case 7:
            case 8:
              goto LABEL_77;
            default:
              v25 = 0;
              break;
          }
        }
      }
    }
  }
  *(_BYTE *)(a3 + 5) = v25 == 81;
LABEL_37:
  result = v54;
  v54 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

WebCore::Node *WebCore::Style::BuilderConverter::convertLengthOrAuto(WebCore::Node *this, const WebCore::Style::BuilderState *a2, const WebCore::CSSValue *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  WebCore::Node *v10;
  __n128 v11;
  __int16 v12;
  unsigned int v13;
  __int16 v15;
  int v16;
  int v17;
  __int128 v18;
  WebCore::Node *v19;
  double v21;
  float v22;
  unsigned __int8 *v23;
  int v24;
  _BYTE *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  WebCore::CSSCalcValue *v29;
  void *v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const WebCore::Style::BuilderState *v35;
  WebCore::Style::AnchorPositionEvaluator *v36;
  double v37;
  __int128 v38;
  __int128 v39;
  WebCore::Node *v40;
  __int128 v41;
  __n128 v42;
  WTF *v43;

  v5 = (uint64_t)this;
  v6 = *((unsigned __int16 *)a3 + 2) | (*((unsigned __int8 *)a3 + 6) << 16);
  if ((v6 & 0x3F87F) == 0x50 && *((_WORD *)a3 + 4) == 394)
  {
    *(_DWORD *)((char *)this + 3) = 0;
    *(_DWORD *)this = 0;
    return this;
  }
  if ((v6 & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1943A9B98);
  }
  v7 = *((_QWORD *)a2 + 6);
  if (!v7 || (*(_WORD *)(v7 + 28) & 0x20) == 0)
  {
    v8 = (__int128 *)((char *)a2 + 64);
LABEL_7:
    v9 = v8[1];
    v38 = *v8;
    v39 = v9;
    v10 = (WebCore::Node *)*((_QWORD *)a2 + 12);
    if (v10)
      *((_DWORD *)v10 + 6) += 2;
    v40 = v10;
    v41 = *(_OWORD *)((char *)a2 + 104);
    v11 = *(__n128 *)((char *)a2 + 120);
    v42 = v11;
    goto LABEL_10;
  }
  if (*(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
  {
    v26 = *(_QWORD *)(v7 + 32);
    v8 = (__int128 *)((char *)a2 + 64);
    if (v26)
      goto LABEL_7;
  }
  else
  {
    v8 = (__int128 *)((char *)a2 + 64);
  }
  v18 = v8[1];
  v38 = *v8;
  v39 = v18;
  v19 = (WebCore::Node *)*((_QWORD *)a2 + 12);
  if (v19)
    *((_DWORD *)v19 + 6) += 2;
  v40 = v19;
  v41 = *(_OWORD *)((char *)a2 + 104);
  v11 = *(__n128 *)((char *)a2 + 120);
  v42 = v11;
  LODWORD(v41) = 1065353216;
  BYTE4(v41) = 1;
LABEL_10:
  v12 = *((_WORD *)a3 + 2);
  v13 = v12 & 0x7F;
  if (v13 - 63 > 0x11 || ((1 << ((*((_WORD *)a3 + 2) & 0x7F) - 63)) & 0x34001) == 0)
  {
    if (v13 == 73)
    {
      v23 = *(unsigned __int8 **)(*((_QWORD *)a3 + 1) + 8);
      v24 = v23[12];
      if (v24 != 1 && (v24 - 5) > 3)
        goto LABEL_37;
      v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v23 + 72))(*(_QWORD *)(*((_QWORD *)a3 + 1) + 8));
    }
    if (v13 - 60 <= 0x15 && ((1 << (v13 - 60)) & 0x201FE7) != 0
      || v13 - 4 < 8
      || v13 >= 0x19 && v13 < 0x31
      || v13 - 49 < 6
      || v13 == 81)
    {
      WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>((uint64_t)a3, (uint64_t)&v38, v5, v11);
      v15 = *((_WORD *)a3 + 2);
      v16 = v15 & 0x7F;
      v17 = 22;
      if ((v16 - 79) >= 2)
      {
        if (v16 == 77)
        {
          v17 = 20;
        }
        else if (v16 != 63)
        {
          v17 = *((_WORD *)a3 + 2) & 0x7F;
          if ((v15 & 0x7F) == 0x49)
          {
            v25 = *(_BYTE **)(*((_QWORD *)a3 + 1) + 8);
            if (v25[12] == 1)
            {
LABEL_53:
              v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v25 + 72))(*(_QWORD *)(*((_QWORD *)a3 + 1) + 8));
            }
            else
            {
              v17 = 1;
              switch(v25[12])
              {
                case 0:
                  break;
                case 2:
                  v17 = 3;
                  break;
                case 3:
                  v17 = 74;
                  break;
                case 4:
                  v17 = 75;
                  break;
                case 5:
                case 6:
                case 7:
                case 8:
                  goto LABEL_53;
                default:
                  v17 = 0;
                  break;
              }
            }
          }
        }
      }
      *(_BYTE *)(v5 + 5) = v17 == 81;
      goto LABEL_24;
    }
    v12 = *((_WORD *)a3 + 2);
    v13 = v12 & 0x7F;
  }
LABEL_37:
  if (v13 - 63 > 0x11 || ((1 << (v13 - 63)) & 0x34001) == 0)
  {
    if ((v12 & 0x7F) == 0x49)
    {
      v27 = *(unsigned __int8 **)(*((_QWORD *)a3 + 1) + 8);
      v28 = v27[12];
      if (v28 != 1)
      {
        if (v28 == 2)
          goto LABEL_45;
        if ((v28 - 5) > 3)
          goto LABEL_69;
      }
      v13 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v27 + 72))(v27);
    }
    if (v13 != 3)
      goto LABEL_69;
    v12 = *((_WORD *)a3 + 2);
LABEL_45:
    if ((v12 & 0x7F) == 0x49)
    {
      v33 = *((_QWORD *)a3 + 1);
      v43 = 0;
      v37 = WebCore::CSSCalcValue::doubleValue(v33, (uint64_t)&v43);
      if (v43)
        WTF::fastFree((WTF *)((char *)v43 - 16), v34);
      v21 = v37;
    }
    else
    {
      v21 = *((double *)a3 + 1);
    }
    v22 = v21;
    *(float *)v5 = v22;
    *(_WORD *)(v5 + 4) = 3;
    *(_BYTE *)(v5 + 6) = 1;
    goto LABEL_24;
  }
LABEL_69:
  if (WebCore::CSSPrimitiveValue::primitiveType(a3) == 75)
  {
    if ((*((_WORD *)a3 + 2) & 0x7F) == 0x49)
      v29 = (WebCore::CSSCalcValue *)*((_QWORD *)a3 + 1);
    else
      v29 = 0;
    WebCore::CSSCalcValue::createCalculationValue(v29, (const WebCore::CSSToLengthConversionData *)&v38, &v43);
    WebCore::Length::Length(v5, &v43);
    v31 = v43;
    v43 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
      {
        v32 = *((_QWORD *)v31 + 1);
        *((_QWORD *)v31 + 1) = 0;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        WTF::fastFree(v31, v30);
      }
      else
      {
        --*(_DWORD *)v31;
      }
    }
  }
  else if (WebCore::CSSPrimitiveValue::primitiveType(a3) == 76)
  {
    if (WebCore::CSSPrimitiveValue::primitiveType(a3) == 76)
      v36 = (WebCore::Style::AnchorPositionEvaluator *)*((_QWORD *)a3 + 1);
    else
      v36 = 0;
    WebCore::Style::AnchorPositionEvaluator::resolveAnchorValue(v36, a2, v35, v5);
  }
  else
  {
    *(_DWORD *)v5 = 0;
    *(_WORD *)(v5 + 4) = 4;
    *(_BYTE *)(v5 + 6) = 0;
  }
LABEL_24:
  this = v40;
  v40 = 0;
  if (this)
  {
    if (*((_DWORD *)this + 6) == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(this);
    }
    else
    {
      *((_DWORD *)this + 6) -= 2;
    }
  }
  return this;
}

float WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  double v9;
  double v10;
  float result;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  double v15;
  BOOL v17;

  v5 = *(_WORD *)(a1 + 4) & 0x7F;
  if (v5 == 73)
  {
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_DWORD **)(v12 + 8);
    ++v13[2];
    v9 = (*(double (**)(_DWORD *))(*(_QWORD *)v13 + 48))(v13);
    v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 8) + 72))(*(_QWORD *)(v12 + 8));
    v15 = fabs(v9);
    if (v14 == 12 && v15 == INFINITY)
    {
      v9 = 0.0;
    }
    else
    {
      if (*(_BYTE *)(v12 + 16))
        v17 = v9 < 0.0;
      else
        v17 = 0;
      if (v17)
        v9 = 0.0;
    }
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
  else
  {
    v6 = v5 - 79;
    if (v5 == 63)
      v7 = 22;
    else
      v7 = *(_WORD *)(a1 + 4) & 0x7F;
    if (v5 == 77)
      LODWORD(v8) = 20;
    else
      LODWORD(v8) = v7;
    if (v6 >= 2)
      v8 = v8;
    else
      v8 = 22;
    a4.n128_u64[0] = *(_QWORD *)(a1 + 8);
    v9 = WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble(a2, (void *)v8, a4);
  }
  v10 = -33554430.0;
  if (v9 > -33554430.0)
    v10 = v9;
  if (v9 >= 33554429.0)
    v10 = 33554429.0;
  result = v10;
  *(float *)a3 = result;
  *(_WORD *)(a3 + 4) = 4;
  *(_BYTE *)(a3 + 6) = 1;
  return result;
}

double WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble(uint64_t a1, void *a2, __n128 a3)
{
  int v3;
  __int16 v5;
  BOOL v6;
  double v7;
  float v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  double v22;
  double v23;
  float v24;
  uint64_t *v25;
  uint64_t *v26;
  __int16 v27;
  char v28;
  int v29;
  double v30;
  __n128 v31;
  double v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _BOOL4 v38;
  WebCore::RenderStyle *v39;
  uint64_t v40;
  float v41;
  float v42;
  char v43;
  double v44;
  float v45;
  double v46;
  __n128 v47;
  double v48;
  double v49;
  WTF *v50;
  int v51;
  _BOOL4 v53;
  const WebCore::Length *v54;
  float v55;
  BOOL v56;
  __int16 v57;
  char v58;
  int v59;
  char v60;
  double v61;
  __n128 v62;
  double v63;
  double v64;
  char v65;
  double v66;
  double *v67[2];
  unint64_t v68;

  v3 = (int)a2;
  v68 = a3.n128_u64[0];
  v67[0] = (double *)a1;
  v67[1] = (double *)&v68;
  if (((_DWORD)a2 - 6) >= 6)
  {
    v7 = -1.0;
    switch((int)a2)
    {
      case 4:
      case 5:
      case 67:
      case 69:
      case 71:
      case 81:
        if (*(_BYTE *)(a1 + 50))
          v10 = (void *)*(unsigned __int16 *)(a1 + 48);
        else
          v10 = 0;
        v11 = a1 + 16;
        if (*(_WORD *)(a1 + 48) != 13)
          v11 = a1;
        if (*(_BYTE *)(a1 + 50))
          v12 = v11;
        else
          v12 = a1;
        v13 = *(_QWORD *)(*(_QWORD *)v12 + 32);
        goto LABEL_27;
      case 25:
        v17 = a3.n128_f64[0];
        WebCore::CSSToLengthConversionData::defaultViewportFactor(a1);
        goto LABEL_42;
      case 26:
        v17 = a3.n128_f64[0];
        v18 = *(_QWORD *)(a1 + 56);
        if (v18)
          *(_QWORD *)(v18 + 16) |= 0x20000000uLL;
        v19 = *(_QWORD *)(a1 + 24);
        if (!v19)
          goto LABEL_115;
        WebCore::LocalFrameView::sizeForCSSDefaultViewportUnits(*(WebCore::LocalFrameView **)(v19 + 248));
        v21 = v20 / 100.0;
        goto LABEL_42;
      case 27:
        v17 = a3.n128_f64[0];
        WebCore::CSSToLengthConversionData::defaultViewportFactor(a1);
        goto LABEL_110;
      case 28:
        v17 = a3.n128_f64[0];
        WebCore::CSSToLengthConversionData::defaultViewportFactor(a1);
        goto LABEL_136;
      case 29:
        v17 = a3.n128_f64[0];
        WebCore::CSSToLengthConversionData::defaultViewportFactor(a1);
        goto LABEL_85;
      case 30:
        v17 = a3.n128_f64[0];
        WebCore::CSSToLengthConversionData::defaultViewportFactor(a1);
        goto LABEL_112;
      case 31:
        v17 = a3.n128_f64[0];
        v21 = WebCore::CSSToLengthConversionData::smallViewportFactor((WebCore::CSSToLengthConversionData *)a1);
        goto LABEL_42;
      case 32:
        v17 = a3.n128_f64[0];
        WebCore::CSSToLengthConversionData::smallViewportFactor((WebCore::CSSToLengthConversionData *)a1);
        goto LABEL_114;
      case 33:
        v17 = a3.n128_f64[0];
        v21 = WebCore::CSSToLengthConversionData::smallViewportFactor((WebCore::CSSToLengthConversionData *)a1);
        goto LABEL_110;
      case 34:
        v17 = a3.n128_f64[0];
        v21 = WebCore::CSSToLengthConversionData::smallViewportFactor((WebCore::CSSToLengthConversionData *)a1);
        goto LABEL_136;
      case 35:
        v17 = a3.n128_f64[0];
        v21 = WebCore::CSSToLengthConversionData::smallViewportFactor((WebCore::CSSToLengthConversionData *)a1);
        goto LABEL_85;
      case 36:
        v17 = a3.n128_f64[0];
        v21 = WebCore::CSSToLengthConversionData::smallViewportFactor((WebCore::CSSToLengthConversionData *)a1);
        goto LABEL_112;
      case 37:
        v17 = a3.n128_f64[0];
        v21 = WebCore::CSSToLengthConversionData::largeViewportFactor((WebCore::CSSToLengthConversionData *)a1);
        goto LABEL_42;
      case 38:
        v17 = a3.n128_f64[0];
        WebCore::CSSToLengthConversionData::largeViewportFactor((WebCore::CSSToLengthConversionData *)a1);
        goto LABEL_114;
      case 39:
        v17 = a3.n128_f64[0];
        v21 = WebCore::CSSToLengthConversionData::largeViewportFactor((WebCore::CSSToLengthConversionData *)a1);
        goto LABEL_110;
      case 40:
        v17 = a3.n128_f64[0];
        v21 = WebCore::CSSToLengthConversionData::largeViewportFactor((WebCore::CSSToLengthConversionData *)a1);
        goto LABEL_136;
      case 41:
        v17 = a3.n128_f64[0];
        v21 = WebCore::CSSToLengthConversionData::largeViewportFactor((WebCore::CSSToLengthConversionData *)a1);
        goto LABEL_85;
      case 42:
        v17 = a3.n128_f64[0];
        v21 = WebCore::CSSToLengthConversionData::largeViewportFactor((WebCore::CSSToLengthConversionData *)a1);
        goto LABEL_112;
      case 43:
        v17 = a3.n128_f64[0];
        v21 = WebCore::CSSToLengthConversionData::dynamicViewportFactor((WebCore::CSSToLengthConversionData *)a1);
        goto LABEL_42;
      case 44:
        v17 = a3.n128_f64[0];
        WebCore::CSSToLengthConversionData::dynamicViewportFactor((WebCore::CSSToLengthConversionData *)a1);
        goto LABEL_114;
      case 45:
        v17 = a3.n128_f64[0];
        v21 = WebCore::CSSToLengthConversionData::dynamicViewportFactor((WebCore::CSSToLengthConversionData *)a1);
LABEL_110:
        v56 = v55 < v21;
        goto LABEL_137;
      case 46:
        v17 = a3.n128_f64[0];
        v21 = WebCore::CSSToLengthConversionData::dynamicViewportFactor((WebCore::CSSToLengthConversionData *)a1);
LABEL_136:
        v56 = v21 < v55;
LABEL_137:
        if (v56)
          v21 = v55;
        goto LABEL_42;
      case 47:
        v17 = a3.n128_f64[0];
        v21 = WebCore::CSSToLengthConversionData::dynamicViewportFactor((WebCore::CSSToLengthConversionData *)a1);
LABEL_85:
        if (!*(_QWORD *)a1)
          goto LABEL_115;
        if (((*(_DWORD *)(*(_QWORD *)a1 + 44) >> 13) & 6u) - 6 < 0xFFFFFFFC)
          goto LABEL_114;
        goto LABEL_42;
      case 48:
        v17 = a3.n128_f64[0];
        v21 = WebCore::CSSToLengthConversionData::dynamicViewportFactor((WebCore::CSSToLengthConversionData *)a1);
LABEL_112:
        if (*(_QWORD *)a1)
        {
          if (((*(_DWORD *)(*(_QWORD *)a1 + 44) >> 13) & 6u) - 2 >= 4)
LABEL_42:
            v22 = v21;
          else
LABEL_114:
            v22 = v42;
        }
        else
        {
LABEL_115:
          v22 = 0.0;
        }
        return v22 * v17;
      case 49:
        WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble(WebCore::CSSToLengthConversionData const&,WebCore::CSSUnitType,double)::$_0::operator()(v67, 4);
        if (v65)
          return v30;
        v66 = *(double *)&v68;
        return v66 * WebCore::CSSToLengthConversionData::smallViewportFactor((WebCore::CSSToLengthConversionData *)a1);
      case 50:
        WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble(WebCore::CSSToLengthConversionData const&,WebCore::CSSUnitType,double)::$_0::operator()(v67, 8);
        if (v43)
          return v30;
        v44 = *(double *)&v68;
        WebCore::CSSToLengthConversionData::smallViewportFactor((WebCore::CSSToLengthConversionData *)a1);
        return v44 * v45;
      case 51:
        v57 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)a1 + 44) >> 13;
        v58 = 2;
        switch((unsigned __int16)*(_DWORD *)(*(_QWORD *)a1 + 44) >> 13)
        {
          case 1:
          case 2:
            goto LABEL_118;
          case 3:
          case 5:
            LOBYTE(v57) = 3;
            goto LABEL_118;
          case 4:
            goto LABEL_119;
          default:
            LOBYTE(v57) = 0;
LABEL_118:
            v58 = v57;
LABEL_119:
            if ((v58 & 6) == 2)
              v59 = 8;
            else
              v59 = 4;
            WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble(WebCore::CSSToLengthConversionData const&,WebCore::CSSUnitType,double)::$_0::operator()(v67, v59);
            if (v60)
              return v30;
            v31.n128_u64[0] = v68;
            v34 = a1;
            v35 = 36;
            break;
        }
        goto LABEL_124;
      case 52:
        v27 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)a1 + 44) >> 13;
        v28 = 2;
        switch((unsigned __int16)*(_DWORD *)(*(_QWORD *)a1 + 44) >> 13)
        {
          case 1:
          case 2:
            goto LABEL_59;
          case 3:
          case 5:
            LOBYTE(v27) = 3;
            goto LABEL_59;
          case 4:
            goto LABEL_60;
          default:
            LOBYTE(v27) = 0;
LABEL_59:
            v28 = v27;
LABEL_60:
            if ((v28 & 6) == 2)
              v29 = 4;
            else
              v29 = 8;
            WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble(WebCore::CSSToLengthConversionData const&,WebCore::CSSUnitType,double)::$_0::operator()(v67, v29);
            if (v33)
              return v30;
            v31.n128_u64[0] = v68;
            v34 = a1;
            v35 = 35;
            break;
        }
LABEL_124:
        a3.n128_f64[0] = WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble(v34, v35, v31, v32);
        return a3.n128_f64[0];
      case 53:
        v46 = WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble(a1, 52, a3, -1.0);
        v47.n128_u64[0] = v68;
        v49 = WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble(a1, 51, v47, v48);
        if (v49 >= v46)
          return v46;
        else
          return v49;
      case 54:
        v61 = WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble(a1, 52, a3, -1.0);
        v62.n128_u64[0] = v68;
        v64 = WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble(a1, 51, v62, v63);
        if (v61 >= v64)
          return v61;
        else
          return v64;
      case 60:
      case 74:
      case 75:
        goto LABEL_2;
      case 61:
        v36 = *(unsigned __int16 *)(a1 + 48);
        v38 = v36 == 154 || v36 == 13;
        if (*(_BYTE *)(a1 + 50) && v38)
        {
          v39 = *(WebCore::RenderStyle **)(a1 + 16);
          if (v39)
            goto LABEL_152;
          if (v36 == 13)
            v40 = a1 + 16;
          else
            v40 = a1;
          v41 = (float)*(int *)(WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)(*(_QWORD *)(*(_QWORD *)v40 + 32) + 32), a2)+ 56);
LABEL_153:
          a3.n128_f64[0] = v41;
        }
        else
        {
          a3.n128_f64[0] = (double)(int)WebCore::CSSToLengthConversionData::computedLineHeightForFontUnits((WebCore::CSSToLengthConversionData *)a1, a2);
        }
        v16 = *(double *)&v68;
LABEL_37:
        a3.n128_f64[0] = v16 * a3.n128_f64[0];
        break;
      case 62:
        v50 = *(WTF **)(a1 + 8);
        if (!v50)
          break;
        v51 = *(unsigned __int16 *)(a1 + 48);
        v53 = v51 == 154 || v51 == 13;
        if (*(_BYTE *)(a1 + 50) && v53)
        {
          v54 = (const WebCore::Length *)WebCore::RenderStyle::specifiedLineHeight(*(WebCore::RenderStyle **)(a1 + 8));
          WebCore::RenderStyle::computeLineHeight(v50, v54);
        }
        else
        {
          v39 = *(WebCore::RenderStyle **)(a1 + 8);
LABEL_152:
          v41 = WebCore::RenderStyle::computedLineHeight(v39, a2);
        }
        goto LABEL_153;
      case 65:
      case 66:
      case 68:
      case 70:
      case 72:
        if (*(_BYTE *)(a1 + 50))
          v10 = (void *)*(unsigned __int16 *)(a1 + 48);
        else
          v10 = 0;
        v14 = *(_QWORD *)(a1 + 8);
        if (!v14)
        {
          v25 = (uint64_t *)(a1 + 16);
          if (*(_WORD *)(a1 + 48) != 13)
            v25 = (uint64_t *)a1;
          if (*(_BYTE *)(a1 + 50))
            v26 = v25;
          else
            v26 = (uint64_t *)a1;
          v14 = *v26;
        }
        v13 = *(_QWORD *)(v14 + 32);
LABEL_27:
        a3.n128_f64[0] = WebCore::CSSPrimitiveValue::computeUnzoomedNonCalcLengthDouble(v3, v10, (WebCore::FontCascade *)(v13 + 32), 0, a3.n128_f64[0]);
        break;
      default:
        return v7;
    }
  }
  else
  {
LABEL_2:
    if (*(_BYTE *)(a1 + 50))
      v5 = *(_WORD *)(a1 + 48);
    else
      v5 = 0;
    if ((_DWORD)a2 != 6)
    {
      switch((int)a2)
      {
        case 7:
          a3.n128_f64[0] = a3.n128_f64[0] * 37.7952756;
          break;
        case 8:
          a3.n128_f64[0] = a3.n128_f64[0] * 3.77952756;
          break;
        case 9:
          a3.n128_f64[0] = a3.n128_f64[0] * 96.0;
          break;
        case 10:
          a3.n128_f64[0] = a3.n128_f64[0] * 1.33333333;
          break;
        case 11:
          a3.n128_f64[0] = a3.n128_f64[0] * 16.0;
          break;
        case 25:
        case 26:
        case 29:
        case 30:
        case 31:
        case 32:
        case 35:
        case 36:
        case 37:
        case 38:
        case 41:
        case 42:
        case 43:
        case 44:
        case 47:
        case 48:
          a3.n128_u64[0] = 0;
          break;
        case 27:
        case 28:
        case 33:
        case 34:
        case 39:
        case 40:
        case 45:
        case 46:
          break;
        case 60:
          a3.n128_f64[0] = a3.n128_f64[0] * 0.94488189;
          break;
        case 65:
          v15 = 172;
          if (v5 == 13)
            v15 = 192;
          v16 = *(float *)v15;
          goto LABEL_37;
        case 66:
          a3.n128_f64[0] = *(float *)(WebCore::FontCascade::metricsOfPrimaryFont(0, a2) + 36) * a3.n128_f64[0];
          break;
        case 67:
        case 68:
          a3.n128_f64[0] = *(float *)(WebCore::FontCascade::metricsOfPrimaryFont(0, a2) + 8) * a3.n128_f64[0];
          break;
        case 69:
        case 70:
          v23 = a3.n128_f64[0];
          v24 = WebCore::FontCascade::zeroWidth(0, a2);
          goto LABEL_50;
        case 71:
        case 72:
          v23 = a3.n128_f64[0];
          v24 = *(float *)(WebCore::FontCascade::metricsOfPrimaryFont(0, a2) + 16);
LABEL_50:
          a3.n128_f64[0] = v24 * v23;
          break;
        default:
          a3.n128_u64[0] = -1.0;
          break;
      }
    }
  }
  if (*(_BYTE *)(a1 + 50))
    v6 = *(unsigned __int16 *)(a1 + 48) == 13;
  else
    v6 = 0;
  if (v6)
    return a3.n128_f64[0];
  v7 = a3.n128_f64[0];
  switch(v3)
  {
    case 4:
    case 5:
    case 61:
    case 62:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 81:
      return v7;
    default:
      if (*(_QWORD *)a1)
        v9 = *(float *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 184);
      else
        v9 = 1.0;
      if (*(_BYTE *)(a1 + 44))
        v9 = *(float *)(a1 + 40);
      v7 = a3.n128_f64[0] * v9;
      break;
  }
  return v7;
}

uint64_t WebCore::CSSPrimitiveValue::isFontRelativeLength(int a1)
{
  int v1;
  uint64_t result;

  v1 = a1 - 4;
  result = 1;
  switch(v1)
  {
    case 0:
    case 1:
    case 57:
    case 58:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 77:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

double WebCore::CSSPrimitiveValue::computeUnzoomedNonCalcLengthDouble(int a1, void *a2, WebCore::FontCascade *this, WebCore::LocalFrameView **a4, double result)
{
  uint64_t v5;
  float v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  double v13;
  WebCore::LocalFrameView **v14;
  float v15;
  float v16;
  WebCore::LocalFrameView **v17;
  BOOL v18;
  double v19;
  uint64_t v20;
  int v21;
  double v22;
  double v23;
  double v24;
  double v25;

  if (a1 != 6)
  {
    switch(a1)
    {
      case 4:
      case 65:
      case 81:
        v5 = 172;
        if ((_DWORD)a2 == 13)
          v5 = 192;
        v6 = *(float *)((char *)this + v5);
        goto LABEL_7;
      case 5:
      case 66:
        v22 = result;
        v7 = *(float *)(WebCore::FontCascade::metricsOfPrimaryFont(this, a2) + 36);
        goto LABEL_65;
      case 7:
        v13 = 37.7952756;
        return result * v13;
      case 8:
        v13 = 3.77952756;
        return result * v13;
      case 9:
        v13 = 96.0;
        return result * v13;
      case 10:
        v13 = 1.33333333;
        return result * v13;
      case 11:
        v13 = 16.0;
        return result * v13;
      case 25:
        v22 = result;
        if (!a4)
          goto LABEL_79;
        v10 = WebCore::LocalFrameView::sizeForCSSDefaultViewportUnits(a4[31]);
        goto LABEL_63;
      case 26:
        v22 = result;
        if (!a4)
          goto LABEL_79;
        WebCore::LocalFrameView::sizeForCSSDefaultViewportUnits(a4[31]);
        goto LABEL_69;
      case 27:
        v22 = result;
        if (!a4)
          return v22;
        v10 = WebCore::LocalFrameView::sizeForCSSDefaultViewportUnits(a4[31]);
        goto LABEL_60;
      case 28:
        v22 = result;
        if (!a4)
          return v22;
        v10 = WebCore::LocalFrameView::sizeForCSSDefaultViewportUnits(a4[31]);
        goto LABEL_57;
      case 29:
        v22 = result;
        if (!a4)
          goto LABEL_79;
        v17 = a4;
        v15 = WebCore::LocalFrameView::sizeForCSSDefaultViewportUnits(a4[31]);
        goto LABEL_77;
      case 30:
        v22 = result;
        if (!a4)
          goto LABEL_79;
        v14 = a4;
        v15 = WebCore::LocalFrameView::sizeForCSSDefaultViewportUnits(a4[31]);
        goto LABEL_74;
      case 31:
        v22 = result;
        if (!a4)
          goto LABEL_79;
        v10 = WebCore::RenderView::sizeForCSSSmallViewportUnits((WebCore::RenderView *)a4);
        goto LABEL_63;
      case 32:
        v22 = result;
        if (!a4)
          goto LABEL_79;
        WebCore::RenderView::sizeForCSSSmallViewportUnits((WebCore::RenderView *)a4);
        goto LABEL_69;
      case 33:
        v22 = result;
        if (!a4)
          return v22;
        v10 = WebCore::RenderView::sizeForCSSSmallViewportUnits((WebCore::RenderView *)a4);
        goto LABEL_60;
      case 34:
        v22 = result;
        if (!a4)
          return v22;
        v10 = WebCore::RenderView::sizeForCSSSmallViewportUnits((WebCore::RenderView *)a4);
        goto LABEL_57;
      case 35:
        v22 = result;
        if (!a4)
          goto LABEL_79;
        v17 = a4;
        v15 = WebCore::RenderView::sizeForCSSSmallViewportUnits((WebCore::RenderView *)a4);
        goto LABEL_77;
      case 36:
        v22 = result;
        if (!a4)
          goto LABEL_79;
        v14 = a4;
        v15 = WebCore::RenderView::sizeForCSSSmallViewportUnits((WebCore::RenderView *)a4);
        goto LABEL_74;
      case 37:
        v22 = result;
        if (!a4)
          goto LABEL_79;
        v10 = WebCore::RenderView::sizeForCSSLargeViewportUnits((WebCore::RenderView *)a4);
        goto LABEL_63;
      case 38:
        v22 = result;
        if (!a4)
          goto LABEL_79;
        WebCore::RenderView::sizeForCSSLargeViewportUnits((WebCore::RenderView *)a4);
        goto LABEL_69;
      case 39:
        v22 = result;
        if (!a4)
          return v22;
        v10 = WebCore::RenderView::sizeForCSSLargeViewportUnits((WebCore::RenderView *)a4);
        goto LABEL_60;
      case 40:
        v22 = result;
        if (!a4)
          return v22;
        v10 = WebCore::RenderView::sizeForCSSLargeViewportUnits((WebCore::RenderView *)a4);
        goto LABEL_57;
      case 41:
        v22 = result;
        if (!a4)
          goto LABEL_79;
        v17 = a4;
        v15 = WebCore::RenderView::sizeForCSSLargeViewportUnits((WebCore::RenderView *)a4);
        goto LABEL_77;
      case 42:
        v22 = result;
        if (!a4)
          goto LABEL_79;
        v14 = a4;
        v15 = WebCore::RenderView::sizeForCSSLargeViewportUnits((WebCore::RenderView *)a4);
        goto LABEL_74;
      case 43:
        v22 = result;
        if (!a4)
          goto LABEL_79;
        v10 = WebCore::RenderView::sizeForCSSDynamicViewportUnits((WebCore::RenderView *)a4);
        goto LABEL_63;
      case 44:
        v22 = result;
        if (!a4)
          goto LABEL_79;
        WebCore::RenderView::sizeForCSSDynamicViewportUnits((WebCore::RenderView *)a4);
LABEL_69:
        v19 = v12;
        goto LABEL_64;
      case 45:
        v22 = result;
        if (!a4)
          return v22;
        v10 = WebCore::RenderView::sizeForCSSDynamicViewportUnits((WebCore::RenderView *)a4);
LABEL_60:
        v18 = v11 < v10;
        goto LABEL_61;
      case 46:
        v22 = result;
        if (!a4)
          return v22;
        v10 = WebCore::RenderView::sizeForCSSDynamicViewportUnits((WebCore::RenderView *)a4);
LABEL_57:
        v18 = v10 < v11;
LABEL_61:
        if (v18)
          v10 = v11;
LABEL_63:
        v19 = v10;
        goto LABEL_64;
      case 47:
        v22 = result;
        if (!a4)
          goto LABEL_79;
        v17 = a4;
        v15 = WebCore::RenderView::sizeForCSSDynamicViewportUnits((WebCore::RenderView *)a4);
LABEL_77:
        v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v17[3] + 1) + 40) + 8) + 1272);
        v21 = 1;
        goto LABEL_78;
      case 48:
        v22 = result;
        if (a4)
        {
          v14 = a4;
          v15 = WebCore::RenderView::sizeForCSSDynamicViewportUnits((WebCore::RenderView *)a4);
LABEL_74:
          v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v14[3] + 1) + 40) + 8) + 1272);
          v21 = 0;
LABEL_78:
          v19 = WebCore::lengthOfViewportPhysicalAxisForLogicalAxis(v21, v20, v15, v16);
LABEL_64:
          v7 = v19 / 100.0;
LABEL_65:
          result = v22;
LABEL_8:
          result = v7 * result;
        }
        else
        {
LABEL_79:
          result = 0.0;
        }
        break;
      case 60:
        v13 = 0.94488189;
        return result * v13;
      case 67:
      case 68:
        v25 = result;
        v9 = WebCore::FontCascade::metricsOfPrimaryFont(this, a2);
        result = v25;
        v7 = *(float *)(v9 + 8);
        goto LABEL_8;
      case 69:
      case 70:
        v24 = result;
        v6 = WebCore::FontCascade::zeroWidth(this, a2);
        result = v24;
        goto LABEL_7;
      case 71:
      case 72:
        v23 = result;
        v8 = WebCore::FontCascade::metricsOfPrimaryFont(this, a2);
        result = v23;
        v6 = *(float *)(v8 + 16);
LABEL_7:
        v7 = v6;
        goto LABEL_8;
      default:
        return -1.0;
    }
  }
  return result;
}

float WebCore::LocalFrameView::sizeForCSSDefaultViewportUnits(WebCore::LocalFrameView *this)
{
  int v1;
  float v2;
  int v3;

  if (*((_BYTE *)this + 1224))
  {
    v2 = *((float *)this + 302);
    v1 = *((unsigned __int8 *)this + 1212);
    if (*((_BYTE *)this + 1212) && *((_BYTE *)this + 1220))
      return v2;
  }
  else
  {
    v1 = 0;
    v2 = 0.0;
  }
  if (*((_BYTE *)this + 321))
  {
    if (!v1)
      return (float)(int)*((_QWORD *)this + 31);
  }
  else
  {
    (*(void (**)(char *, uint64_t, _QWORD))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 1, 0);
    if (!v1)
      return (float)v3;
  }
  return v2;
}

WebCore::CSSTokenizer *WebCore::CSSTokenizer::CSSTokenizer(WebCore::CSSTokenizer *this, unsigned int **a2, WebCore::CSSParserObserverWrapper *a3, BOOL *a4)
{
  _QWORD *v8;
  unsigned int *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t (*v23)();
  int v24;
  unsigned int v25;
  uint64_t v26;
  __int128 v27;
  WTF *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31[2];
  uint64_t v32;
  WTF::StringImpl *v33;

  *(_QWORD *)this = (char *)this + 16;
  *((_QWORD *)this + 1) = 8;
  *((_QWORD *)this + 6) = (char *)this + 64;
  v8 = (_QWORD *)((char *)this + 48);
  *((_QWORD *)this + 7) = 32;
  *((_OWORD *)this + 52) = 0u;
  v9 = *a2;
  if (*a2)
  {
    WTF::StringImpl::replace();
    v10 = v31[0];
  }
  else
  {
    v10 = 0;
  }
  v33 = v10;
  WTF::replaceUnpairedSurrogatesWithReplacementCharacter();
  v12 = v31[0];
  v31[0] = 0;
  v13 = v33;
  v33 = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy(v13, v11);
      v31[0] = 0;
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  if (v33 != (WTF::StringImpl *)v9)
  {
    WebCore::CSSTokenizer::registerString(this, (const WTF::String *)&v33);
    v9 = (unsigned int *)v33;
  }
  *((_QWORD *)this + 106) = 0;
  if (v9)
  {
    v14 = v9[1];
    *v9 += 2;
    *((_QWORD *)this + 107) = v14;
    *((_QWORD *)this + 108) = v9;
    v33 = 0;
    if (*v9 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v9, v11);
    else
      *v9 -= 2;
  }
  else
  {
    *((_QWORD *)this + 108) = 0;
    *((_QWORD *)this + 107) = 0;
  }
  if (a4)
    *a4 = 1;
  if (*a2)
  {
    v16 = (*a2)[1];
    if (v16)
    {
      if (v16 < 0x63)
      {
LABEL_17:
        LODWORD(v17) = 0;
        v18 = *((_QWORD *)this + 106);
        v19 = *((_QWORD *)this + 107);
        while (1)
        {
          if (v18 >= v19)
          {
            v22 = 0;
            *((_QWORD *)this + 106) = v18 + 1;
          }
          else
          {
            v20 = *((_QWORD *)this + 108);
            if (*(_DWORD *)(v20 + 4) <= v18)
            {
              __break(0xC471u);
              JUMPOUT(0x1943AAD80);
            }
            v21 = *(_QWORD *)(v20 + 8);
            if ((*(_BYTE *)(v20 + 16) & 4) != 0)
              v22 = *(unsigned __int8 *)(v21 + v18);
            else
              v22 = *(unsigned __int16 *)(v21 + 2 * v18);
            *((_QWORD *)this + 106) = v18 + 1;
            if (v22 > 0x7F)
            {
              ((void (*)(WTF::StringImpl **__return_ptr, WebCore::CSSTokenizer *))WebCore::CSSTokenizer::nameStart)(v31, this);
              goto LABEL_25;
            }
          }
          v23 = WebCore::CSSTokenizer::codePoints[2 * v22];
          if (!v23)
          {
            v31[0] = (WTF::StringImpl *)6;
            v31[1] = 0;
            LOWORD(v32) = v22;
            goto LABEL_27;
          }
          ((void (*)(WTF::StringImpl **__return_ptr, WebCore::CSSTokenizer *))v23)(v31, this);
LABEL_25:
          v24 = (uint64_t)v31[0] & 0x3F;
          if (v24 == 30)
          {
            if (a3)
            {
              WebCore::CSSParserObserverWrapper::addToken(a3, v17);
              *((_QWORD *)a3 + 4) = *v8;
              *((_QWORD *)a3 + 7) = *((_QWORD *)a3 + 5);
            }
            return this;
          }
          if (v24 == 31)
          {
            if (a3)
            {
              if (*((_QWORD *)this + 107) >= *((_QWORD *)this + 106))
                v30 = *((_QWORD *)this + 106);
              else
                v30 = *((_QWORD *)this + 107);
              WebCore::CSSParserObserverWrapper::addComment(a3, v17, v30, *((_DWORD *)this + 15));
            }
            goto LABEL_31;
          }
LABEL_27:
          v25 = *((_DWORD *)this + 15);
          if (v25 == *((_DWORD *)this + 14))
          {
            if (!WTF::Vector<WebCore::CSSParserToken,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)1,WebCore::CSSParserToken&>((uint64_t)v8, (unint64_t)v31))
            {
              if (!a4)
              {
                __break(0xC471u);
                JUMPOUT(0x1943AAE84);
              }
              goto LABEL_54;
            }
          }
          else
          {
            v26 = *((_QWORD *)this + 6) + 24 * v25;
            v27 = *(_OWORD *)v31;
            *(_QWORD *)(v26 + 16) = v32;
            *(_OWORD *)v26 = v27;
            ++*((_DWORD *)this + 15);
          }
          if (a3)
            WebCore::CSSParserObserverWrapper::addToken(a3, v17);
LABEL_31:
          v19 = *((_QWORD *)this + 107);
          v18 = *((_QWORD *)this + 106);
          if (v19 >= v18)
            v17 = *((_QWORD *)this + 106);
          else
            v17 = *((_QWORD *)this + 107);
        }
      }
      if (v16 <= 0x20000000)
      {
        v28 = (WTF *)(24 * (v16 / 3uLL));
        WTF::tryFastMalloc(v28);
        v29 = v31[0];
        if (v31[0])
        {
          *((_DWORD *)this + 14) = v28 / 0x18;
          *((_QWORD *)this + 6) = v29;
          goto LABEL_17;
        }
      }
      if (!a4)
      {
        __break(0xC471u);
        JUMPOUT(0x1943AAE54);
      }
LABEL_54:
      *a4 = 0;
    }
  }
  return this;
}

uint64_t WTF::WeakHashSet<WebCore::HTMLImageElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::HTMLImageElement>(uint64_t a1, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  WTF *v7;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v3;
  if (v3 > v2)
  {
    v4 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v5 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v6 = v5;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v6;
      goto LABEL_6;
    }
    v9 = *(_DWORD *)(v4 - 4);
    if (!v9)
      goto LABEL_10;
    v19 = a2;
    v20 = *(_QWORD *)a1;
    v21 = a1;
    v10 = 0;
    v11 = v9 - 1;
    do
    {
      v12 = (uint64_t *)(v20 + 8 * v11);
      if ((unint64_t)(*v12 + 1) >= 2 && !*(_QWORD *)(*v12 + 8))
      {
        WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deleteBucket(v12, a2);
        ++v10;
      }
    }
    while ((unint64_t)v11--);
    v4 = *(_QWORD *)v21;
    if (v10)
    {
      *(_DWORD *)(v4 - 16) += v10;
      v14 = *(_QWORD *)v21;
      if (*(_QWORD *)v21)
        v15 = *(_DWORD *)(v14 - 12);
      else
        v15 = 0;
      *(_DWORD *)(v14 - 12) = v15 - v10;
      v4 = *(_QWORD *)v21;
    }
    a1 = v21;
    a2 = v19;
    if (!v4)
      goto LABEL_3;
    v16 = *(_DWORD *)(v4 - 4);
    if (v16 < 9 || 6 * *(_DWORD *)(v4 - 12) >= v16)
    {
LABEL_10:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize((uint64_t *)v21);
      a2 = v19;
      a1 = v21;
      v5 = 0;
      v18 = *(_QWORD *)v21;
      *(_DWORD *)(v21 + 8) = 0;
      if (!v18)
        goto LABEL_4;
      v4 = v18;
    }
    v5 = *(_DWORD *)(v4 - 12);
    v6 = 0x7FFFFFFF;
    if (v5 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v7 = (WTF *)(a2[2] & 0xFFFFFFFFFFFFLL);
  if (v7 && *((_QWORD *)v7 + 1))
    return WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>((uint64_t *)a1, v7);
  else
    return 0;
}

float WebCore::LocalFrame::screenSize(WebCore::LocalFrame *this, WebCore::Widget *a2)
{
  float v3;
  uint64_t v4;
  void *v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::DocumentLoader *v12;
  uint64_t v14;
  WebCore::Page *v15;
  float v16;
  float v17;

  v3 = *((float *)this + 155);
  if (v3 <= 0.0 || *((float *)this + 156) <= 0.0)
  {
    v4 = *((_QWORD *)this + 36);
    if (v4)
    {
      ++*(_DWORD *)(v4 + 8);
      WebCore::screenRect((id *)v4, a2);
      v3 = v6;
      v8 = v7;
      if (*(_DWORD *)(v4 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      else
        --*(_DWORD *)(v4 + 8);
    }
    else
    {
      WebCore::screenRect(0, a2);
      v3 = v16;
      v8 = v17;
    }
    v9 = *((_QWORD *)this + 37);
    if (v9)
    {
      *(_DWORD *)(v9 + 24) += 2;
      v10 = *(_QWORD *)(v9 + 528);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
        {
          v12 = *(WebCore::DocumentLoader **)(*(_QWORD *)(v11 + 280) + 88);
          if (v12)
          {
            if (*(_QWORD *)(v11 + 296) == v9)
            {
              ++*((_DWORD *)v12 + 6);
              if (WebCore::DocumentLoader::fingerprintingProtectionsEnabled(v12))
              {
                v14 = *((_QWORD *)this + 3);
                if (v14)
                {
                  v15 = *(WebCore::Page **)(v14 + 8);
                  if (v15)
                  {
                    ++*(_DWORD *)v15;
                    v3 = (*(float (**)(_QWORD, WebCore::LocalFrame *, float, float))(**(_QWORD **)(*((_QWORD *)v15 + 6) + 16)
                                                                                              + 1776))(*(_QWORD *)(*((_QWORD *)v15 + 6) + 16), this, v3, v8);
                    WTF::RefCounted<WebCore::Page>::deref(v15);
                  }
                }
              }
              if (*((_DWORD *)v12 + 6) == 1)
                (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v12 + 24))(v12);
              else
                --*((_DWORD *)v12 + 6);
            }
          }
        }
      }
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v9, v5);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
    }
  }
  return v3;
}

WebCore::Document **WebCore::Style::Adjuster::adjust(WebCore::Style::Adjuster *this, WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  __int16 v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v24;
  unsigned int v25;
  char v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  BOOL v41;
  int v42;
  BOOL v43;
  uint64_t v44;
  WTF *v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  _DWORD *v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  int v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  __int16 v70;
  unsigned int v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  float v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  unsigned __int8 v80;
  int v81;
  int v82;
  int v83;
  int v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t Ref;
  WTF::StringImpl *v91;
  const WebCore::SVGElement *v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  BOOL v98;
  float v100;
  int v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;
  int v108;
  int v109;
  int v110;
  int v111;
  uint64_t v112;
  int v113;
  int v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  WTF::StringImpl *v125;
  int v126;
  WTF::StringImpl *v127;
  WTF *v128;
  _DWORD *v129;
  WTF *v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  WebCore::StyleRareNonInheritedData *v133;
  __int16 v134;
  int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t (*v176)();
  uint64_t (*v177)();
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  _DWORD *v183;
  int v184;
  unsigned __int8 v185;
  uint64_t v186;
  const WebCore::RenderStyle *v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t v193;
  BOOL v194;
  WTF *v195;
  _DWORD *v196;
  WTF *v197;
  uint64_t v198;
  uint64_t v199;
  WTF::StringImpl *v200;
  WebCore::StyleRareNonInheritedData *v201;
  WTF *v202;
  _DWORD *v203;
  WTF *v204;
  uint64_t v205;
  uint64_t v206;
  WTF::StringImpl *v207;
  WebCore::StyleRareNonInheritedData *v208;
  _WORD *v209;
  int v210;
  unint64_t v211;
  unint64_t v212;
  int v213;
  unint64_t v214;
  uint64_t v215;
  unsigned int v216;
  unint64_t v217;
  uint64_t v218;
  BOOL v219;
  WTF *v220;
  _DWORD *v221;
  WTF *v222;
  uint64_t v223;
  uint64_t v224;
  WTF::StringImpl *v225;
  WebCore::StyleRareNonInheritedData *v226;
  WTF *v227;
  _DWORD *v228;
  WTF *v229;
  uint64_t v230;
  uint64_t v231;
  WTF::StringImpl *v232;
  WebCore::StyleRareNonInheritedData *v233;
  _WORD *v234;
  int v235;
  unint64_t v236;
  unint64_t v237;
  int v238;
  unint64_t v239;
  uint64_t v241;
  __int16 v242;
  uint64_t v243;
  uint64_t (*v244)();
  uint64_t (*v245)();
  int v246;
  uint64_t v247;
  __int16 v248;
  uint64_t v249;
  WTF *v250;
  void *v251;
  uint64_t v252;
  unsigned int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  WebCore::StyleRareInheritedData *v257;
  WTF *v258;
  void *v259;
  WTF *v260;
  void *v261;
  WTF *v262;
  void *v263;
  WTF *v264;
  void *v265;
  _QWORD *v266;
  uint64_t v267;
  _DWORD *v268;
  int v269;
  _DWORD *v270;
  int v271;
  WTF *v272;
  void *v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  BOOL v277;
  WTF *v279;
  uint64_t v280;
  const WebCore::FillLayer *v281;
  WebCore::FillLayer *v282;
  uint64_t v283;
  _DWORD *v284;
  WTF::StringImpl *v285;
  WebCore::StyleRareInheritedData *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unsigned __int8 v290;
  uint64_t v291;
  uint64_t v292;
  WebCore::FillLayer *v293;
  WebCore::FillLayer *v294;
  WebCore::FillLayer *v295;
  uint64_t v296;
  _DWORD *v297;
  WTF::StringImpl *v298;
  WebCore::StyleRareInheritedData *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  _DWORD *v304;
  WTF::StringImpl *v305;
  WebCore::StyleRareInheritedData *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t *v309;
  uint64_t v310;
  WTF::StringImpl *v311;
  WebCore::StyleRareInheritedData *v312;
  _QWORD *v313;
  _QWORD *v314;
  _QWORD *v315;
  WTF *v316;
  void *v317;
  WTF *v318;
  uint64_t v319;
  const WebCore::FillLayer *v320;
  int *v321;
  uint64_t v322;
  WebCore::FillLayer *v323;
  WebCore::FillLayer *v324;
  WTF *v325;
  void *v326;
  WTF *v327;
  void *v328;
  WTF *v329;
  void *v330;
  WTF *v331;
  void *v332;
  uint64_t v333;
  WTF *v334;
  void *v335;
  int *v336;
  int *v337;
  int *v338;
  _DWORD *v339;
  int v340;
  uint64_t v341;
  WebCore::StyleRareInheritedData *v342;
  WTF *v343;
  void *v344;
  uint64_t *v345;
  uint64_t v346;
  uint64_t *v347;
  uint64_t *v348;
  uint64_t *v349;
  uint64_t v350;
  uint64_t v351;
  unsigned int v352;
  uint64_t *v353;
  uint64_t v354;
  uint64_t v356;
  _DWORD *v357;
  unsigned int v358;
  uint64_t v359;
  WebCore::StyleRareInheritedData *v360;
  uint64_t v361;
  _DWORD *v362;
  int v363;
  uint64_t v364;
  WebCore::StyleRareInheritedData *v365;
  WTF *v366;
  void *v367;
  uint64_t v368;
  _DWORD *v369;
  WTF::StringImpl *v370;
  WebCore::StyleRareInheritedData *v371;
  unsigned int v372;
  BOOL v373;
  WTF *v374;
  void *v375;
  WTF *v376;
  void *v377;
  unsigned int v378[2];
  int v379;
  WTF::StringImpl *v380;
  char v381;

  v6 = *((_QWORD *)a2 + 2);
  if ((v6 & 0x1F) != 0x12)
    goto LABEL_29;
  v7 = *((_QWORD *)this + 3);
  if (!v7)
  {
    if ((v6 & 0xF80000000000) != 0x480000000000 && *(_QWORD *)(*(_QWORD *)this + 1272))
    {
      if ((v6 & 0xF00000000000) == 0x300000000000)
        goto LABEL_29;
      goto LABEL_10;
    }
LABEL_27:
    v10 = 1;
    goto LABEL_28;
  }
  v8 = (v6 & 0xF80000000000) != 0x480000000000 && (*(_QWORD *)(v7 + 16) & 0x2000000000000000) == 0;
  if (!v8 || *(_QWORD *)(*(_QWORD *)this + 1272) == v7)
    goto LABEL_27;
  v9 = *(_WORD *)(v7 + 28);
  if ((v9 & 0x60) != 0)
  {
LABEL_10:
    v10 = 26;
LABEL_28:
    v6 = v10 | v6 & 0xFFFFFFFFFFFFFFE0;
    *((_QWORD *)a2 + 2) = v6;
    goto LABEL_29;
  }
  if ((v9 & 0x10) != 0)
  {
    v11 = *(unsigned __int16 *)(*(_QWORD *)(v7 + 96) + 10);
    v10 = 26;
    if (v11 <= 0x3F && ((1 << v11) & 0xE001820000280210) != 0)
      goto LABEL_28;
    v13 = v11 - 78;
    v41 = v13 > 0x36;
    v14 = (1 << v13) & 0x60040010020081;
    if (!v41 && v14 != 0)
      goto LABEL_28;
  }
LABEL_29:
  v16 = *((_QWORD *)this + 3);
  if (v16)
  {
    if ((*(_WORD *)(v16 + 28) & 0x10) != 0)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v16 + 96) + 24);
      if (v17 == *(_QWORD *)(WebCore::HTMLNames::frameTag + 24)
        || v17 == *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
      {
        v6 = v6 & 0xFFFFFFFFFFC7FFE0 | 1;
        *((_QWORD *)a2 + 2) = v6;
      }
    }
  }
  if ((v6 & 0x17 | 8) != 0x1A)
  {
    v18 = *((_QWORD *)this + 3);
    if (v18 && (*(_WORD *)(v18 + 28) & 0x10) != 0)
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v18 + 96) + 24);
      if (v19 == *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
      {
        v20 = *((_DWORD *)a2 + 10);
        if (((v20 >> 6) & 0xF) - 4 <= 2)
        {
          *((_DWORD *)a2 + 10) = v20 & 0xFFFFFC3F | 0x1C0;
          v18 = *((_QWORD *)this + 3);
          if ((*(_WORD *)(v18 + 28) & 0x10) == 0)
            goto LABEL_49;
          v19 = *(_QWORD *)(*(_QWORD *)(v18 + 96) + 24);
        }
      }
      if (v19 == *(_QWORD *)(WebCore::HTMLNames::rtTag + 24))
      {
        v6 &= 0xFFFFFFFFF1C7FFFFLL;
        *((_QWORD *)a2 + 2) = v6;
        v18 = *((_QWORD *)this + 3);
        if ((*(_WORD *)(v18 + 28) & 0x10) == 0)
          goto LABEL_49;
        v19 = *(_QWORD *)(*(_QWORD *)(v18 + 96) + 24);
      }
      if (v19 == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
      {
        if ((v6 & 0x1F) > 0x1A)
          v21 = 1;
        else
          v21 = byte_1969FE306[v6 & 0x1F];
        v6 = v6 & 0xFFFFFFFFFFFFFFE0 | v21;
        *((_QWORD *)a2 + 2) = v6;
        v18 = *((_QWORD *)this + 3);
      }
    }
LABEL_49:
    v22 = v6 & 0x1F;
    if ((v22 - 22) < 2)
    {
      if (v18)
      {
        v345 = &WebCore::HTMLNames::rubyTag;
        goto LABEL_685;
      }
    }
    else
    {
      if (v22 != 25)
        goto LABEL_51;
      if (v18)
      {
        v345 = &WebCore::HTMLNames::rtTag;
LABEL_685:
        if (*(_QWORD *)(*(_QWORD *)(v18 + 96) + 24) == *(_QWORD *)(*v345 + 24))
          goto LABEL_51;
      }
    }
    v6 = v6 & 0xFFFFFFFFFFFFFFE0 | (v22 == 23);
    *((_QWORD *)a2 + 2) = v6;
    v18 = *((_QWORD *)this + 3);
LABEL_51:
    if (v18 == *(_QWORD *)(*(_QWORD *)this + 1272) || ((v6 >> 19) & 3 | 4) == 6)
      goto LABEL_56;
    if (v18)
    {
      if ((v6 & 0xF80000000000) != 0x480000000000 && (*(_QWORD *)(v18 + 16) & 0x2000000000000000) == 0)
        goto LABEL_56;
    }
    else if ((v6 & 0xF80000000000) != 0x480000000000)
    {
LABEL_56:
      if ((v6 & 0x180000) == 0x100000
        || (v6 & 0xE000000) != 0
        || (v24 = *((_QWORD *)this + 3)) != 0 && *(_QWORD *)(*(_QWORD *)this + 1272) == v24)
      {
        if ((v6 & 0x1F) > 0x1A)
          v25 = 1;
        else
          v25 = byte_1969FE306[v6 & 0x1F];
        v6 = v6 & 0xFFFFFFFFFFFFFFE0 | v25;
        *((_QWORD *)a2 + 2) = v6;
      }
      if ((v6 & 0xF8000000001FLL) == 0
        && ((*(_DWORD *)(*((_QWORD *)this + 1) + 44) ^ *((_DWORD *)a2 + 11)) & 0xE000) != 0)
      {
        v6 = v6 & 0xFFFFFFFFFFFFFFE0 | 3;
        *((_QWORD *)a2 + 2) = v6;
      }
      v26 = v6;
      if ((v6 & 0x380000) == 0x80000 && (v6 & 0x1E) - 6 <= 3)
      {
        v6 &= 0xFFFFFFFFFFC7FFFFLL;
        *((_QWORD *)a2 + 2) = v6;
      }
      if ((v26 & 0x1Fu) - 6 <= 6)
      {
        v27 = *(_DWORD *)(*((_QWORD *)this + 1) + 44);
        v28 = *((_DWORD *)a2 + 11);
        if ((((unsigned __int16)v28 ^ (unsigned __int16)v27) & 0xE000) != 0)
          *((_DWORD *)a2 + 11) = v28 & 0xFFFF1FFF | ((unsigned __int16)v27 >> 13 << 13);
      }
      if ((v6 & 0x1E) == 0xE)
      {
        v29 = *((_DWORD *)a2 + 11);
        if ((v29 & 0xE000) != 0)
          *((_DWORD *)a2 + 11) = v29 & 0xFFFF1FFF;
      }
      v30 = *((_QWORD *)this + 2);
      v31 = *(_QWORD *)(v30 + 16);
      if ((v31 & 0x1E) == 0xE)
      {
        v6 &= 0xFFFFFFFFF1FFFFFFLL;
        *((_QWORD *)a2 + 2) = v6;
        v30 = *((_QWORD *)this + 2);
        v31 = *(_QWORD *)(v30 + 16);
      }
      if ((v31 & 0x1E) == 0x10 || (v31 & 0x1F) - 19 <= 1)
      {
        if ((v6 & 0x1F) > 0x1A)
          v32 = 1;
        else
          v32 = byte_1969FE306[v6 & 0x1F];
        v6 = v6 & 0xFFFFFFFFF1FFFFE0 | v32;
        *((_QWORD *)a2 + 2) = v6;
        v30 = *((_QWORD *)this + 2);
      }
      if ((*(_BYTE *)(v30 + 16) & 0x1Eu) - 22 <= 3 && (v6 & 0x180000) != 0x100000 && (v6 & 0xE000000) == 0)
      {
        if ((v6 & 0x1F) > 0x1A)
          v33 = 0;
        else
          v33 = byte_1969FE321[v6 & 0x1F];
        v6 = v6 & 0xFFFFFFFFFFFFFFE0 | v33;
        *((_QWORD *)a2 + 2) = v6;
      }
      if ((v6 & 0x1F) <= 0x19 && ((1 << (v6 & 0x1F)) & 0x3400000) != 0)
      {
        v34 = ((v6 >> 22) & 7) - 2;
        if (v34 > 3)
          v35 = 12582912;
        else
          v35 = qword_1969FE340[v34];
        v6 = v35 | v6 & 0xFFFFFFFFFE3FFFFFLL;
        *((_QWORD *)a2 + 2) = v6;
      }
      goto LABEL_97;
    }
    v6 = v6 & 0xFFFFFFFFFFC7FFFFLL | 0x100000;
    *((_QWORD *)a2 + 2) = v6;
    goto LABEL_56;
  }
LABEL_97:
  v37 = (char *)a2 + 8;
  v36 = *((_QWORD *)a2 + 1);
  if ((*(_BYTE *)(*(_QWORD *)(v36 + 8) + 68) & 1) != 0)
    goto LABEL_113;
  v38 = *((_QWORD *)this + 3);
  v39 = *(_QWORD *)(*((_QWORD *)this + 2) + 16);
  if (v38)
  {
    v40 = *(uint64_t **)(v38 + 40);
    if ((*(_QWORD *)(*(_QWORD *)(v40[1] + 680) + 680) & 0x800000000000) != 0)
    {
      if ((*(_WORD *)(v38 + 28) & 0x20) == 0)
        goto LABEL_116;
      v42 = *(_DWORD *)(v38 + 24);
      *(_DWORD *)(v38 + 24) = v42 + 2;
      if (*(_QWORD *)(*(_QWORD *)(v38 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
        goto LABEL_109;
      v241 = *(_QWORD *)(v38 + 32);
      if (v241)
      {
        v242 = *(_WORD *)(v241 + 28);
        if ((v242 & 0x20) == 0
          || *(_QWORD *)(*(_QWORD *)(v241 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::foreignObjectTag + 24))
        {
          if ((*(_BYTE *)(v38 + 22) & 0x10) != 0
            && (v300 = *v40) != 0
            && (*(_WORD *)(v300 + 28) & 0x80) != 0
            && (v301 = *(_QWORD *)(v300 + 200)) != 0
            && (v302 = *(_QWORD *)(v301 + 8)) != 0
            && (*(_WORD *)(v302 + 28) & 0x20) != 0)
          {
            v43 = 0;
            if ((v242 & 0x20) != 0
              || *(_QWORD *)(*(_QWORD *)(v302 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::useTag + 24))
            {
              goto LABEL_110;
            }
          }
          else if ((v242 & 0x20) != 0)
          {
            goto LABEL_109;
          }
        }
      }
      if ((*(_QWORD *)(v38 + 64) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v38 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1943AD1A0);
        }
        v43 = (*(_BYTE *)((*(_QWORD *)(v38 + 64) & 0xFFFFFFFFFFFFLL) + 0x62) & 0x38) == 0;
LABEL_110:
        if (v42)
        {
          *(_DWORD *)(v38 + 24) = v42;
        }
        else if ((*(_WORD *)(v38 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v38);
          v36 = *(_QWORD *)v37;
        }
        if (v43)
          goto LABEL_113;
LABEL_116:
        WebCore::RenderStyle::setUsedZIndex(a2, *(_DWORD *)(*(_QWORD *)(v36 + 8) + 60));
        goto LABEL_117;
      }
LABEL_109:
      v43 = 0;
      goto LABEL_110;
    }
  }
  if ((v6 & 0x380000) != 0)
    goto LABEL_116;
  v41 = (v39 & 0x1E) == 0x10 || (v39 & 0x1F) - 21 > 0xFFFFFFFD;
  if (v41)
    goto LABEL_116;
LABEL_113:
  v44 = *(_QWORD *)(v36 + 8);
  if ((*(_BYTE *)(v44 + 68) & 2) == 0 || *(_DWORD *)(v44 + 64))
  {
    v45 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)a2 + 1);
    v46 = WTF::DataRef<WebCore::StyleBoxData>::access((uint64_t *)v45 + 1);
    *((_BYTE *)v46 + 68) |= 2u;
    v46[16] = 0;
  }
LABEL_117:
  v47 = *(_QWORD *)v37;
  v48 = *((_QWORD *)this + 3);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v37 + 8) + 68) & 2) == 0)
    goto LABEL_128;
  if (v48)
  {
    if (*(_QWORD *)(*(_QWORD *)this + 1272) == v48)
      goto LABEL_127;
    v49 = *(_QWORD *)(v47 + 32);
    if (*(float *)(v49 + 4) < 1.0
      || (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 40) + 8) + 680) + 672) & 0x10) != 0
      && (*(_DWORD *)(*(_QWORD *)(v47 + 40) + 636) & 0x400) != 0
      && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 40) + 636) & 0x380) == 0x80)
    {
      goto LABEL_127;
    }
  }
  else
  {
    v49 = *(_QWORD *)(v47 + 32);
    if (*(float *)(v49 + 4) < 1.0)
      goto LABEL_127;
  }
  if (!*(_DWORD *)(*(_QWORD *)(v49 + 40) + 20))
  {
    v75 = *(_QWORD *)(v47 + 40);
    if (!*(_QWORD *)(v75 + 328)
      && !*(_QWORD *)(v75 + 320)
      && !*(_QWORD *)(v75 + 312)
      && !*(_QWORD *)(v75 + 304)
      && (*(_DWORD *)(v75 + 636) & 0x180) != 0x80)
    {
      v76 = *(float *)(v75 + 260);
      if (v48 && v76 == -1.0)
      {
        if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 40) + 8) + 680) + 680) & 0x800000000000) == 0
          || (*(_WORD *)(v48 + 28) & 0x20) == 0
          || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v48 + 1184))(*((_QWORD *)this + 3))
          || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 1352))(v48) & 1) == 0)
        {
LABEL_393:
          v174 = *(_QWORD *)(*(_QWORD *)v37 + 32);
          v175 = *(_QWORD *)(v174 + 48);
          v176 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
          if (*(_QWORD *)(v175 + 8))
          {
            while (!*(_QWORD *)(v175 + 16))
            {
              v175 = *(_QWORD *)(v175 + 8);
              if (!v175)
                goto LABEL_398;
            }
          }
          else
          {
            if (*(_QWORD *)(v175 + 16))
              v177 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
            else
              v177 = 0;
            if (!v177)
            {
LABEL_398:
              v178 = *(_QWORD *)(*(_QWORD *)v37 + 40);
              if (!*(_QWORD *)(*(_QWORD *)(v178 + 216) + 8))
                v176 = 0;
              if (!v176
                && !*(_QWORD *)(v178 + 264)
                && !*(_QWORD *)(v178 + 208)
                && !*(_DWORD *)(*(_QWORD *)(v174 + 32) + 20)
                && !*(_DWORD *)(*(_QWORD *)(v178 + 72) + 20)
                && (*(_DWORD *)(v178 + 636) & 0x3F00000) == 0x100000)
              {
                v179 = *((_QWORD *)a2 + 2);
                v180 = (v179 >> 19) & 7;
                if (v180 != 3 && v180 != 6)
                {
                  v181 = *(_QWORD *)(v178 + 200);
                  if (!v181 || !*(_BYTE *)(v181 + 32))
                  {
                    v48 = *((_QWORD *)this + 3);
                    if (v48)
                    {
                      if ((v179 & 0xF80000000000) != 0x480000000000
                        && (*(_QWORD *)(v48 + 16) & 0x2000000000000000) == 0)
                      {
LABEL_129:
                        if ((*(_WORD *)(v48 + 28) & 0x10) != 0)
                        {
                          v50 = *(_QWORD *)(*(_QWORD *)(v48 + 96) + 24);
                          if (v50 != *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24))
                            goto LABEL_139;
                          v51 = *((_QWORD *)a2 + 2);
                          LODWORD(v52) = (v51 >> 10) & 7;
                          if ((_DWORD)v52)
                            v52 = v52;
                          else
                            v52 = 4;
                          v53 = v51 & 0xFFFFFFFFFFFF03FFLL | (v52 << 10);
                          LODWORD(v51) = (unsigned __int16)v51 >> 13;
                          if ((_DWORD)v51)
                            v51 = v51;
                          else
                            v51 = 4;
                          *((_QWORD *)a2 + 2) = v53 | (v51 << 13);
                          v48 = *((_QWORD *)this + 3);
                          if ((*(_WORD *)(v48 + 28) & 0x10) != 0)
                          {
                            v50 = *(_QWORD *)(*(_QWORD *)(v48 + 96) + 24);
LABEL_139:
                            if (v50 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
                            {
                              v54 = *(_DWORD *)(v48 + 24) + 2;
                              *(_DWORD *)(v48 + 24) = v54;
                              if (*(_DWORD *)(*(_QWORD *)(v48 + 240) + 12) == 2048)
                              {
                                v55 = (*(unsigned int *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 40) + 642) << 16)) << 32)) & 0x80000000000;
                                v56 = (_DWORD *)*((_QWORD *)a2 + 3);
                                v57 = v56[57];
                                if (((v57 >> 2) & 3) != (v55 == 0))
                                {
                                  if (*v56 != 1)
                                  {
                                    v303 = WTF::fastMalloc((WTF *)0x1A0);
                                    WebCore::StyleRareInheritedData::StyleRareInheritedData(v303, (uint64_t)v56);
                                    v306 = (WebCore::StyleRareInheritedData *)*((_QWORD *)a2 + 3);
                                    *((_QWORD *)a2 + 3) = v304;
                                    if (v306)
                                    {
                                      if (*(_DWORD *)v306 == 1)
                                      {
                                        WebCore::StyleRareInheritedData::~StyleRareInheritedData(v306, v305);
                                        WTF::fastFree(v331, v332);
                                        v304 = (_DWORD *)*((_QWORD *)a2 + 3);
                                      }
                                      else
                                      {
                                        --*(_DWORD *)v306;
                                      }
                                    }
                                    v57 = v304[57];
                                    v56 = v304;
                                  }
                                  v56[57] = (v57 & 0xFFFFFFF3 | (v55 >> 41) & 0x7FFF) ^ 4;
                                  v54 = *(_DWORD *)(v48 + 24);
                                }
                              }
                              v58 = v54 - 2;
                              if (v58)
                              {
                                *(_DWORD *)(v48 + 24) = v58;
                              }
                              else if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
                              {
                                WebCore::Node::removedLastRef((WebCore::Node *)v48);
                              }
                            }
                          }
                        }
                        v59 = *((_QWORD *)this + 3);
                        v60 = **(_QWORD **)(v59 + 40);
                        if (v60)
                          v61 = (*(_WORD *)(v60 + 28) & 0x80) == 0;
                        else
                          v61 = 1;
                        if (!v61 && !*(_BYTE *)(v60 + 193))
                        {
                          v252 = *(_QWORD *)(v59 + 104);
                          if (v252
                            && ((v253 = *(_DWORD *)(v252 + 4), (v253 & 1) != 0)
                              ? (v254 = *(_QWORD *)(v252 + 40), LODWORD(v255) = *(_DWORD *)(v252 + 52))
                              : (v254 = v252 + 32, LODWORD(v255) = v253 >> 5),
                                (_DWORD)v255))
                          {
                            v255 = v255;
                            v266 = (_QWORD *)(v254 + 8);
                            while (1)
                            {
                              v267 = *(v266 - 1);
                              if (v267 == WebCore::HTMLNames::useragentpartAttr
                                || *(_QWORD *)(v267 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
                                && *(_QWORD *)(v267 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
                              {
                                break;
                              }
                              v266 += 2;
                              if (!--v255)
                              {
                                v266 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                                break;
                              }
                            }
                          }
                          else
                          {
                            v266 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                          }
                          if (*v266)
                          {
                            v268 = (_DWORD *)*((_QWORD *)a2 + 3);
                            v269 = v268[57];
                            if ((v269 & 0x30) != 0)
                            {
                              if (*v268 != 1)
                              {
                                v283 = WTF::fastMalloc((WTF *)0x1A0);
                                WebCore::StyleRareInheritedData::StyleRareInheritedData(v283, (uint64_t)v268);
                                v286 = (WebCore::StyleRareInheritedData *)*((_QWORD *)a2 + 3);
                                *((_QWORD *)a2 + 3) = v284;
                                if (v286)
                                {
                                  if (*(_DWORD *)v286 == 1)
                                  {
                                    WebCore::StyleRareInheritedData::~StyleRareInheritedData(v286, v285);
                                    WTF::fastFree(v327, v328);
                                    v284 = (_DWORD *)*((_QWORD *)a2 + 3);
                                  }
                                  else
                                  {
                                    --*(_DWORD *)v286;
                                  }
                                }
                                v269 = v284[57];
                                v268 = v284;
                              }
                              v268[57] = v269 & 0xFFFFFFCF;
                              v59 = *((_QWORD *)this + 3);
                            }
                          }
                        }
                        if ((*(_WORD *)(v59 + 28) & 0x10) != 0
                          && *(_QWORD *)(*(_QWORD *)(v59 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::marqueeTag + 24))
                        {
                          v62 = *((_QWORD *)a2 + 1);
                          *((_QWORD *)a2 + 2) = *((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFF03FFLL | 0x2400;
                          if (((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v62 + 40) + 64) + 20) >> 2) & 7u) - 3 >= 2)
                          {
                            *((_DWORD *)a2 + 10) = *((_DWORD *)a2 + 10) & 0x87FFFC3F | 0x400001C0;
                          }
                          else if (!*(_BYTE *)(*(_QWORD *)(v62 + 8) + 16))
                          {
                            v378[0] = 200;
                            LOWORD(v378[1]) = 4;
                            BYTE2(v378[1]) = 0;
                            WebCore::RenderStyle::setHeight((uint64_t)a2, (WebCore::Length *)v378);
                            if (LOBYTE(v378[1]) == 11)
                            {
                              {
                                WebCore::calculationValues(void)::map = 1;
                                qword_1ECE90C98 = 0;
                              }
                              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v378[0]);
                            }
                          }
                        }
                        v48 = *((_QWORD *)this + 3);
                        if ((*(_QWORD *)(v48 + 72) & 0xFFFFFFFFFFFFLL) != 0
                          && (*(_BYTE *)((*(_QWORD *)(v48 + 72) & 0xFFFFFFFFFFFFLL) + 0xF8) & 1) != 0
                          || (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 239) & 4) != 0)
                        {
                          v270 = (_DWORD *)*((_QWORD *)a2 + 3);
                          v271 = v270[59];
                          if ((v271 & 0x4000000) == 0)
                          {
                            if (*v270 != 1)
                            {
                              v296 = WTF::fastMalloc((WTF *)0x1A0);
                              WebCore::StyleRareInheritedData::StyleRareInheritedData(v296, (uint64_t)v270);
                              v299 = (WebCore::StyleRareInheritedData *)*((_QWORD *)a2 + 3);
                              *((_QWORD *)a2 + 3) = v297;
                              if (v299)
                              {
                                if (*(_DWORD *)v299 == 1)
                                {
                                  WebCore::StyleRareInheritedData::~StyleRareInheritedData(v299, v298);
                                  WTF::fastFree(v329, v330);
                                  v297 = (_DWORD *)*((_QWORD *)a2 + 3);
                                }
                                else
                                {
                                  --*(_DWORD *)v299;
                                }
                              }
                              v271 = v297[59];
                              v270 = v297;
                            }
                            v270[59] = v271 | 0x4000000;
                            v48 = *((_QWORD *)this + 3);
                          }
                        }
                        goto LABEL_161;
                      }
                    }
                    else if ((v179 & 0xF80000000000) != 0x480000000000)
                    {
                      v48 = 0;
                      goto LABEL_161;
                    }
                  }
                }
              }
            }
          }
        }
      }
      else if (v76 == -1.0)
      {
        goto LABEL_393;
      }
    }
  }
LABEL_127:
  WebCore::RenderStyle::setUsedZIndex(a2, 0);
  v48 = *((_QWORD *)this + 3);
LABEL_128:
  if (v48)
    goto LABEL_129;
LABEL_161:
  v63 = *((_QWORD *)a2 + 2);
  if ((v63 & 0xE000000) == 0 && (v63 & 0x180000) != 0x100000)
  {
    if (!v48)
      goto LABEL_172;
    v64 = *(_QWORD *)(v48 + 32);
    if (v64 && (*(_WORD *)(v64 + 28) & 0x80) != 0 && !*(_BYTE *)(v64 + 193))
    {
      v247 = *(_QWORD *)(*(_QWORD *)(v64 + 200) + 8);
      v248 = *(_WORD *)(v247 + 28);
      if ((v248 & 0x80) != 0)
      {
        v249 = *(_QWORD *)(*(_QWORD *)(v247 + 200) + 8);
      }
      else if ((v248 & 8) != 0)
      {
        v249 = v247;
      }
      else
      {
        v249 = 0;
      }
      v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v249 + 824))(v249);
    }
    else
    {
      v65 = 0;
    }
    if ((*(_WORD *)(v48 + 28) & 0x20) != 0)
    {
      v66 = *(_DWORD *)(v48 + 24);
      *(_DWORD *)(v48 + 24) = v66 + 2;
      if (*(_QWORD *)(*(_QWORD *)(v48 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
      {
        if ((v69 = *(_QWORD *)(v48 + 32)) == 0
          || (v70 = *(_WORD *)(v69 + 28), (v70 & 0x20) != 0)
          && *(_QWORD *)(*(_QWORD *)(v69 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::foreignObjectTag + 24)
          || ((*(_BYTE *)(v48 + 22) & 0x10) == 0
           || (v287 = **(_QWORD **)(v48 + 40)) == 0
           || (*(_WORD *)(v287 + 28) & 0x80) == 0
           || (v288 = *(_QWORD *)(v287 + 200)) == 0
           || (v289 = *(_QWORD *)(v288 + 8)) == 0
           || (*(_WORD *)(v289 + 28) & 0x20) == 0
           || *(_QWORD *)(*(_QWORD *)(v289 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::useTag + 24))
          && (v70 & 0x20) == 0)
        {
          if (v66)
          {
            *(_DWORD *)(v48 + 24) = v66;
          }
          else if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v48);
          }
          goto LABEL_186;
        }
      }
      if (v66)
      {
        *(_DWORD *)(v48 + 24) = v66;
      }
      else if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v48);
      }
    }
    if ((v65 & 1) == 0)
    {
LABEL_172:
      v67 = *((_QWORD *)a2 + 2);
      if ((v67 & 0x1F) > 0x14 || ((1 << (v67 & 0x1F)) & 0x128028) == 0)
      {
        v68 = *((_DWORD *)a2 + 10) | (v67 >> 17) & 0x78000;
        goto LABEL_187;
      }
    }
  }
LABEL_186:
  v67 = *((_QWORD *)a2 + 2);
  v68 = *((_DWORD *)a2 + 10) & 0xFFF87FFF | ((((v67 >> 17) >> 15) & 0xF) << 15);
LABEL_187:
  *((_DWORD *)a2 + 10) = v68;
  v71 = (v67 >> 10) & 7;
  if (((v67 >> 10) & 5) == 0)
  {
    if ((v67 & 0xA000) != 0)
    {
      if (v71 == 2)
      {
LABEL_205:
        v67 = v67 & 0xFFFFFFFFFFFFE3FFLL | 0x400;
        goto LABEL_223;
      }
      if (!v71)
      {
        v67 = v67 & 0xFFFFFFFFFFFFE3FFLL | 0x1000;
        goto LABEL_223;
      }
    }
LABEL_224:
    LOWORD(v72) = v67;
    goto LABEL_225;
  }
  if ((v67 & 0x1E) != 4)
  {
    if (((v67 >> 13) & 5) != 0)
    {
      if (v71 == 2)
        goto LABEL_205;
    }
    else
    {
      if ((unsigned __int16)v67 >> 13 == 2)
      {
        v67 = v67 & 0xFFFFFFFFFFFF1FFFLL | 0x2000;
        goto LABEL_223;
      }
      if (!((unsigned __int16)v67 >> 13))
      {
        v67 = v67 & 0xFFFFFFFFFFFF1FFFLL | 0x8000;
        goto LABEL_223;
      }
    }
    goto LABEL_224;
  }
  v72 = v67 & 0xFFFFFFFFFFFFE3FFLL;
  if (v71 == 1)
    v72 = v67;
  v73 = (unsigned __int16)v72 & 0xE000;
  v74 = v72 & 0xFFFFFFFFFFFF1FFFLL;
  if (v73 != 0x2000)
    v72 &= 0xFFFFFFFFFFFF1FFFLL;
  if (v71 != 1 || v73 != 0x2000)
  {
    *((_QWORD *)a2 + 2) = v72;
    LOWORD(v67) = v72;
  }
  if ((v72 & 0x1C00) == 0)
  {
    v67 = v74;
    goto LABEL_223;
  }
  if ((v72 & 0xE000) == 0)
  {
    v67 = v72 & 0xFFFFFFFFFFFFE3FFLL;
LABEL_223:
    *((_QWORD *)a2 + 2) = v67;
    goto LABEL_224;
  }
LABEL_225:
  if (((unsigned __int16)v72 >> 13) - 5 <= 1)
  {
    v77 = *((_QWORD *)this + 3);
    if (!v77
      || (*(_WORD *)(v77 + 28) & 0x10) == 0
      || (v78 = *(_QWORD *)(*(_QWORD *)(v77 + 96) + 24), v78 != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
      && v78 != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
    {
      v79 = (unsigned __int16)v67 >> 13;
      if ((v79 - 7) >= 0xFFFFFFFE)
      {
        switch((unsigned __int16)*((_DWORD *)a2 + 11) >> 13)
        {
          case 1:
            v82 = (v68 >> 26) & 1;
            v81 = 1;
LABEL_717:
            v84 = 0;
            v83 = 0;
            break;
          case 2:
          case 4:
            v81 = 0;
            v82 = (v68 >> 26) & 1;
LABEL_759:
            v84 = 0;
            v83 = 1;
            break;
          case 3:
          case 5:
            v81 = 0;
            goto LABEL_234;
          default:
            v81 = 1;
LABEL_234:
            v82 = (v68 >> 26) & 1;
            switch((unsigned __int16)*((_DWORD *)a2 + 11) >> 13)
            {
              case 1:
              case 3:
              case 5:
                goto LABEL_717;
              case 2:
              case 4:
                goto LABEL_759;
              default:
                v83 = 0;
                v84 = 1;
                break;
            }
            break;
        }
        if (v79 == 5)
        {
          v85 = (v81 & (v82 ^ 1) | v83) == 0;
          v80 = 1;
        }
        else
        {
          v85 = (v84 | v82 & ~v81) == 0;
          v80 = 3;
        }
        if (v85)
          ++v80;
      }
      else
      {
        v80 = 0;
      }
      WebCore::RenderStyle::setColumnStylesFromPaginationMode((uint64_t)a2, v80);
    }
  }
  v86 = *(_QWORD *)v37;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v37 + 8) + 68) & 2) != 0
    && (*(_BYTE *)(*((_QWORD *)a2 + 3) + 234) & 0x40) != 0)
  {
    v87 = *((_QWORD *)a2 + 2);
    if (((v87 >> 10) & 7) - 3 < 2 || ((unsigned __int16)v87 >> 13) - 3 <= 1)
    {
      WebCore::RenderStyle::setUsedZIndex(a2, 0);
      v86 = *((_QWORD *)a2 + 1);
    }
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v86 + 16) + 8) + 8))
  {
    v279 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)a2 + 1);
    WTF::DataRef<WebCore::StyleBackgroundData>::access((uint64_t *)v279 + 2);
    v281 = *(const WebCore::FillLayer **)(v280 + 8);
    if (*(_DWORD *)v281 == 1)
    {
      v282 = *(WebCore::FillLayer **)(v280 + 8);
      goto LABEL_585;
    }
    v292 = v280;
    v293 = (WebCore::FillLayer *)WTF::fastMalloc((WTF *)0x40);
    v282 = WebCore::FillLayer::FillLayer(v293, v281);
    v294 = *(WebCore::FillLayer **)(v292 + 8);
    *(_QWORD *)(v292 + 8) = v282;
    if (!v294)
      goto LABEL_585;
    if (*(_DWORD *)v294 != 1)
    {
      --*(_DWORD *)v294;
      goto LABEL_585;
    }
    WebCore::FillLayer::~FillLayer(v294);
    WTF::fastFree(v316, v317);
    v282 = *(WebCore::FillLayer **)(v292 + 8);
    if (v282)
    {
LABEL_585:
      while (1)
      {
        v295 = v282;
        v282 = (WebCore::FillLayer *)*((_QWORD *)v282 + 1);
        if (!v282)
          break;
        if ((*((_BYTE *)v282 + 60) & 0x80) == 0)
        {
          WTF::Ref<WebCore::FillLayer,WTF::RawPtrTraits<WebCore::FillLayer>,WTF::DefaultRefDerefTraits<WebCore::FillLayer>>::~Ref((WebCore::FillLayer **)v295 + 1);
          break;
        }
      }
    }
    v318 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)a2 + 1);
    WTF::DataRef<WebCore::StyleBackgroundData>::access((uint64_t *)v318 + 2);
    v320 = *(const WebCore::FillLayer **)(v319 + 8);
    if (*(_DWORD *)v320 == 1)
    {
      v321 = *(int **)(v319 + 8);
    }
    else
    {
      v322 = v319;
      v323 = (WebCore::FillLayer *)WTF::fastMalloc((WTF *)0x40);
      v321 = (int *)WebCore::FillLayer::FillLayer(v323, v320);
      v324 = *(WebCore::FillLayer **)(v322 + 8);
      *(_QWORD *)(v322 + 8) = v321;
      if (v324)
      {
        if (*(_DWORD *)v324 == 1)
        {
          WebCore::FillLayer::~FillLayer(v324);
          WTF::fastFree(v325, v326);
          v321 = *(int **)(v322 + 8);
        }
        else
        {
          --*(_DWORD *)v324;
        }
      }
    }
    WebCore::FillLayer::fillUnsetProperties(v321);
    v86 = *(_QWORD *)v37;
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v86 + 32) + 48) + 8))
  {
    v336 = (int *)WebCore::RenderStyle::ensureMaskLayers((WTF **)a2);
    v337 = v336;
    while (1)
    {
      v338 = v337;
      v337 = (int *)*((_QWORD *)v337 + 1);
      if (!v337)
        break;
      if ((v337[15] & 0x80) == 0)
      {
        WTF::Ref<WebCore::FillLayer,WTF::RawPtrTraits<WebCore::FillLayer>,WTF::DefaultRefDerefTraits<WebCore::FillLayer>>::~Ref((WebCore::FillLayer **)v338 + 1);
        break;
      }
    }
    WebCore::FillLayer::fillUnsetProperties(v336);
    v86 = *(_QWORD *)v37;
  }
  v88 = *(_QWORD *)(*(_QWORD *)(v86 + 32) + 64);
  if (v88)
  {
    v274 = *(unsigned int *)(v88 + 20);
    if ((_DWORD)v274)
    {
      v275 = 0;
      v276 = *(_QWORD *)(v88 + 8);
      while (1)
      {
        v277 = (*(_DWORD *)(*(_QWORD *)(v276 + 8 * v275) + 112) & 0xC00) == 0
            && (*(_DWORD *)(*(_QWORD *)(v276 + 8 * v275) + 112) & 0x5F200) == 0;
        if (v277 && (*(_DWORD *)(*(_QWORD *)(v276 + 8 * v275) + 112) & 0x3A0000) == 0)
          break;
        if (v274 == ++v275)
          goto LABEL_562;
      }
      WTF::Vector<WTF::Ref<WebCore::Animation,WTF::RawPtrTraits<WebCore::Animation>,WTF::DefaultRefDerefTraits<WebCore::Animation>>,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::resize(v88 + 8, v275);
      if (*(_DWORD *)(v88 + 20))
      {
LABEL_562:
        WebCore::AnimationList::fillUnsetProperties((WebCore::AnimationList *)v88);
        goto LABEL_250;
      }
    }
    WebCore::RenderStyle::clearAnimations((WTF **)a2);
  }
LABEL_250:
  v89 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v37 + 32) + 72);
  if (v89)
  {
    v95 = *(unsigned int *)(v89 + 20);
    if ((_DWORD)v95)
    {
      v96 = 0;
      v97 = *(_QWORD *)(v89 + 8);
      while (1)
      {
        v98 = (*(_DWORD *)(*(_QWORD *)(v97 + 8 * v96) + 112) & 0xC00) == 0
           && (*(_DWORD *)(*(_QWORD *)(v97 + 8 * v96) + 112) & 0x5F200) == 0;
        if (v98 && (*(_DWORD *)(*(_QWORD *)(v97 + 8 * v96) + 112) & 0x3A0000) == 0)
          break;
        if (v95 == ++v96)
          goto LABEL_269;
      }
      WTF::Vector<WTF::Ref<WebCore::Animation,WTF::RawPtrTraits<WebCore::Animation>,WTF::DefaultRefDerefTraits<WebCore::Animation>>,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::resize(v89 + 8, v96);
      if (*(_DWORD *)(v89 + 20))
      {
LABEL_269:
        WebCore::AnimationList::fillUnsetProperties((WebCore::AnimationList *)v89);
        goto LABEL_251;
      }
    }
    WebCore::RenderStyle::clearTransitions((WTF **)a2);
  }
LABEL_251:
  WebCore::RenderStyle::adjustScrollTimelines(a2);
  WebCore::RenderStyle::adjustViewTimelines((WTF **)a2);
  Ref = WTF::linkedOnOrAfterSDKWithBehavior();
  if ((Ref & 1) != 0)
    goto LABEL_294;
  Ref = *((_QWORD *)this + 3);
  if (!Ref)
    goto LABEL_294;
  Ref = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Ref + 848))(Ref);
  if (!(_DWORD)Ref || *(float *)(*((_QWORD *)a2 + 4) + 204) < 11.0)
    goto LABEL_294;
  v93 = *((_QWORD *)this + 3);
  if ((*(_WORD *)(v93 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v93 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    *(_DWORD *)(v93 + 24) += 2;
    if (*(_DWORD *)(*(_QWORD *)(v93 + 240) + 12) == 256)
      goto LABEL_292;
    v94 = 0;
  }
  else
  {
    v93 = 0;
    v94 = 1;
  }
  v100 = *(float *)(*((_QWORD *)a2 + 3) + 184) + *(float *)(*((_QWORD *)a2 + 3) + 184);
  if (v100 >= 2147500000.0)
  {
    v101 = 0x7FFFFFFF;
  }
  else if (v100 <= -2147500000.0)
  {
    v101 = 0x80000000;
  }
  else
  {
    v101 = (int)v100;
  }
  v102 = *(_QWORD *)v37;
  v103 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v37 + 8) + 8);
  v104 = (v103 - 7) < 4 || v103 == 0;
  if (v104 || (v103 - 5) <= 1)
  {
    v105 = *(_QWORD *)(v102 + 24);
    if (*(_BYTE *)(v105 + 69))
    {
      v378[0] = v101;
      LOWORD(v378[1]) = 4;
      BYTE2(v378[1]) = 0;
      Ref = (uint64_t)WebCore::RenderStyle::setMarginLeft((uint64_t)a2, (WebCore::Length *)v378);
      if (LOBYTE(v378[1]) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        Ref = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v378[0]);
      }
      v102 = *(_QWORD *)v37;
      v105 = *(_QWORD *)(*(_QWORD *)v37 + 24);
    }
    if (*(_BYTE *)(v105 + 53))
    {
      v378[0] = v101;
      LOWORD(v378[1]) = 4;
      BYTE2(v378[1]) = 0;
      Ref = (uint64_t)WebCore::RenderStyle::setMarginRight((uint64_t)a2, (WebCore::Length *)v378);
      if (LOBYTE(v378[1]) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        Ref = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v378[0]);
      }
      v102 = *(_QWORD *)v37;
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(v102 + 8) + 16))
    goto LABEL_291;
  v106 = *(_QWORD *)(v102 + 24);
  if (*(_BYTE *)(v106 + 45))
  {
    v378[0] = v101;
    LOWORD(v378[1]) = 4;
    BYTE2(v378[1]) = 0;
    Ref = (uint64_t)WebCore::RenderStyle::setMarginTop((uint64_t)a2, (WebCore::Length *)v378);
    if (LOBYTE(v378[1]) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      Ref = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v378[0]);
    }
    v106 = *(_QWORD *)(*(_QWORD *)v37 + 24);
  }
  if (!*(_BYTE *)(v106 + 61)
    || (v378[0] = v101,
        LOWORD(v378[1]) = 4,
        BYTE2(v378[1]) = 0,
        Ref = (uint64_t)WebCore::RenderStyle::setMarginBottom((uint64_t)a2, (WebCore::Length *)v378),
        LOBYTE(v378[1]) != 11))
  {
LABEL_291:
    if ((v94 & 1) != 0)
      goto LABEL_294;
    goto LABEL_292;
  }
  {
    WebCore::calculationValues(void)::map = 1;
    qword_1ECE90C98 = 0;
  }
  Ref = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v378[0]);
  if ((v94 & 1) == 0)
  {
LABEL_292:
    if (*(_DWORD *)(v93 + 24) == 2)
    {
      if ((*(_WORD *)(v93 + 30) & 0x400) == 0)
        Ref = WebCore::Node::removedLastRef((WebCore::Node *)v93);
    }
    else
    {
      *(_DWORD *)(v93 + 24) -= 2;
    }
  }
LABEL_294:
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)v37 + 32) + 148) & 0x3F80) == 0)
    goto LABEL_300;
  v107 = *(unsigned __int8 **)(*(_QWORD *)v37 + 8);
  v108 = v107[8];
  v109 = v107[24];
  v110 = v107[16];
  v111 = v107[40];
  {
    v333 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    *(_OWORD *)(v333 + 40) = 0u;
    *(_OWORD *)(v333 + 24) = 0u;
    *(_QWORD *)v333 = &off_1E335BC30;
  }
  Ref = WebCore::RenderTheme::adjustStyle((uint64_t)&WebCore::RenderTheme::singleton(void)::theme, a2, *((const WebCore::Element **)this + 3), a3);
  v112 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 40);
  v113 = *(unsigned __int8 *)(v112 + 642);
  v114 = *(unsigned __int16 *)(v112 + 640);
  v115 = *(unsigned int *)(v112 + 636);
  if ((v113 & 3) != 1)
  {
    v116 = *(_BYTE *)(v112 + 462);
    if ((v113 & 3) == 2)
    {
      if ((v116 & 4) == 0)
        goto LABEL_300;
    }
    else if ((v116 & 4) == 0)
    {
      goto LABEL_300;
    }
  }
  if (((v115 | ((unint64_t)(v114 | (v113 << 16)) << 32)) & 0x300000000000) != 0)
  {
    if (v108
      || (*(unsigned int *)((char *)v378 + 3) = 0,
          v378[0] = 0,
          Ref = WebCore::RenderStyle::setWidth((uint64_t)a2, (WebCore::Length *)v378),
          LOBYTE(v378[1]) != 11))
    {
      if (v109)
        goto LABEL_724;
      goto LABEL_723;
    }
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    Ref = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v378[0]);
    if (!v109)
    {
LABEL_723:
      *(unsigned int *)((char *)v378 + 3) = 0;
      v378[0] = 0;
      Ref = (uint64_t)WebCore::RenderStyle::setMinWidth((uint64_t)a2, (WebCore::Length *)v378);
      if (LOBYTE(v378[1]) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        Ref = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v378[0]);
      }
    }
  }
LABEL_724:
  if ((((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)v37 + 40) + 640) << 32) & 0xC00000000000) == 0)
    goto LABEL_300;
  if (v110
    || (*(unsigned int *)((char *)v378 + 3) = 0,
        v378[0] = 0,
        Ref = WebCore::RenderStyle::setHeight((uint64_t)a2, (WebCore::Length *)v378),
        LOBYTE(v378[1]) != 11))
  {
    if (v111)
      goto LABEL_300;
    goto LABEL_728;
  }
  {
    WebCore::calculationValues(void)::map = 1;
    qword_1ECE90C98 = 0;
  }
  Ref = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v378[0]);
  if (!v111)
  {
LABEL_728:
    *(unsigned int *)((char *)v378 + 3) = 0;
    v378[0] = 0;
    Ref = (uint64_t)WebCore::RenderStyle::setMinHeight((uint64_t)a2, (WebCore::Length *)v378);
    if (LOBYTE(v378[1]) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      Ref = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v378[0]);
    }
  }
LABEL_300:
  v117 = *((_QWORD *)a2 + 2);
  if ((v117 & 0x2000000000000) != 0)
  {
    v117 |= 0x80000000uLL;
    *((_QWORD *)a2 + 2) = v117;
  }
  v118 = *(_QWORD *)(*(_QWORD *)v37 + 40);
  if ((*(_DWORD *)(v118 + 636) & 0x380) != 0x80)
    goto LABEL_334;
  if ((v117 & 0x1C00) != 0)
    goto LABEL_307;
  v119 = *(_QWORD *)(*(_QWORD *)v37 + 32);
  if (*(float *)(v119 + 4) < 1.0
    || (unsigned __int16)v117 & 0xE000 | (*(unsigned int *)(v118 + 636) | ((unint64_t)(*(unsigned __int16 *)(v118 + 640) | (*(unsigned __int8 *)(v118 + 642) << 16)) << 32)) & 0x20000000000000
    || *(_QWORD *)(v118 + 264))
  {
    goto LABEL_307;
  }
  v120 = 1;
  if ((*(_DWORD *)(v118 + 636) & 0x2000000) == 0 && !*(_DWORD *)(*(_QWORD *)(v119 + 32) + 20))
  {
    v243 = *(_QWORD *)(v119 + 48);
    if (*(_QWORD *)(v243 + 8))
    {
      while (!*(_QWORD *)(v243 + 16))
      {
        v243 = *(_QWORD *)(v243 + 8);
        if (!v243)
          goto LABEL_488;
      }
LABEL_307:
      v120 = 1;
      goto LABEL_308;
    }
    if (*(_QWORD *)(v243 + 16))
      v244 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    else
      v244 = 0;
    if (!v244)
    {
LABEL_488:
      if (*(_QWORD *)(*(_QWORD *)(v118 + 216) + 8))
        v245 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
      else
        v245 = 0;
      if (!v245)
      {
        v120 = 1;
        if (!*(_DWORD *)(*(_QWORD *)(v118 + 72) + 20) && (*(_DWORD *)(v118 + 636) & 0x1F00000) == 0x100000)
        {
          if (*(_BYTE *)(v118 + 368))
          {
            Ref = *(_QWORD *)(v118 + 352);
            if (Ref)
            {
              v246 = *(_DWORD *)Ref;
              *(_DWORD *)Ref += 2;
              if (v246)
                *(_DWORD *)Ref = v246;
              else
                Ref = WTF::StringImpl::destroy((WTF::StringImpl *)Ref, v91);
            }
          }
          else
          {
            v120 = 0;
          }
        }
        goto LABEL_308;
      }
      goto LABEL_307;
    }
  }
LABEL_308:
  v121 = *((_QWORD *)this + 3);
  if (v121)
  {
    if ((~*(unsigned __int16 *)(v121 + 28) & 0x408) != 0
      || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v121 + 368))(*((_QWORD *)this + 3)))
    {
      *(_QWORD *)v378 = v121;
      LOBYTE(v379) = 0;
      v381 = 0;
    }
    else
    {
      v122 = *(_QWORD *)(v121 + 112);
      v123 = v122 ? *(_QWORD *)(v122 + 8) : 0;
      v124 = (~*(unsigned __int16 *)(v121 + 28) & 0x408) != 0
           ? 0
           : (*(uint64_t (**)(uint64_t))(*(_QWORD *)v121 + 368))(v121);
      v125 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
      if (*MEMORY[0x1E0CBF2F8])
      {
        v126 = *(_DWORD *)v125;
        *(_QWORD *)v378 = v123;
        v379 = v124;
        *(_DWORD *)v125 = v126 + 4;
        v380 = v125;
        v381 = 1;
        if (v126 == -2)
          WTF::StringImpl::destroy(v125, v91);
        else
          *(_DWORD *)v125 = v126 + 2;
      }
      else
      {
        *(_QWORD *)v378 = v123;
        v379 = v124;
        v380 = 0;
        v381 = 1;
      }
    }
    Ref = WebCore::Styleable::capturedInViewTransition((WebCore::Styleable *)v378, v91);
    v120 |= Ref;
    if (v381)
    {
      Ref = (uint64_t)v380;
      v380 = 0;
      if (Ref)
      {
        if (*(_DWORD *)Ref == 2)
          Ref = WTF::StringImpl::destroy((WTF::StringImpl *)Ref, v127);
        else
          *(_DWORD *)Ref -= 2;
      }
    }
  }
  if (((v120 ^ ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v37 + 40) + 636) & 0x200) == 0)) & 1) == 0)
  {
    v128 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)a2 + 1);
    v129 = (_DWORD *)*((_QWORD *)v128 + 5);
    if (*v129 == 1)
    {
      Ref = *((_QWORD *)v128 + 5);
    }
    else
    {
      v130 = v128;
      v131 = WTF::fastMalloc((WTF *)0x288);
      Ref = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v131, (uint64_t)v129);
      v133 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v130 + 5);
      *((_QWORD *)v130 + 5) = Ref;
      if (v133)
      {
        if (*(_DWORD *)v133 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v133, v132);
          WTF::fastFree(v250, v251);
          Ref = *((_QWORD *)v130 + 5);
        }
        else
        {
          --*(_DWORD *)v133;
        }
      }
    }
    v134 = *(_WORD *)(Ref + 640);
    v135 = 512;
    if (!v120)
      v135 = 0;
    v136 = *(_DWORD *)(Ref + 636) & 0xFFFFFDFF;
    *(_BYTE *)(Ref + 642) = *(_BYTE *)(Ref + 642);
    *(_WORD *)(Ref + 640) = v134;
    *(_DWORD *)(Ref + 636) = v136 | v135;
  }
LABEL_334:
  v137 = *((_QWORD *)this + 3);
  if (v137 && (*(_WORD *)(v137 + 28) & 0x20) != 0)
  {
    *(_DWORD *)(v137 + 24) += 2;
    Ref = (uint64_t)WebCore::Style::Adjuster::adjustSVGElementStyle(a2, (WebCore::RenderStyle *)v137, v92);
    if (*(_DWORD *)(v137 + 24) == 2)
    {
      if ((*(_WORD *)(v137 + 30) & 0x400) == 0)
        Ref = WebCore::Node::removedLastRef((WebCore::Node *)v137);
    }
    else
    {
      *(_DWORD *)(v137 + 24) -= 2;
    }
  }
  v138 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 32);
  v140 = *(_BYTE *)(v138 + 126);
  v139 = (WTF::StringImpl *)(v138 + 126);
  v141 = *(_QWORD *)v37;
  if ((v140 & 0x10) != 0 && (*(_BYTE *)(*(_QWORD *)(v141 + 32) + 126) & 0xF) == 0)
  {
    Ref = WebCore::RenderStyle::setJustifyItems((uint64_t)a2, v139);
    v141 = *((_QWORD *)a2 + 1);
  }
  v142 = *((_QWORD *)a2 + 2);
  if (((v142 >> 10) & 7) - 3 < 2 || ((unsigned __int16)v142 >> 13) - 3 <= 1)
    v143 = 1;
  else
    v143 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 240);
  v144 = *(unsigned __int8 *)(*(_QWORD *)(v141 + 40) + 460);
  v145 = v144 & v143;
  if ((v144 & v143) == 0)
    v145 = 2;
  if ((v144 & 5) != 0)
    v145 = v143;
  if ((v143 & 5) != 0)
    v146 = v144;
  else
    v146 = v145;
  if ((v143 & 2) != 0)
    v147 = 2;
  else
    v147 = v146;
  if (v144 == 1)
    v148 = v143;
  else
    v148 = v147;
  v149 = *((_QWORD *)a2 + 3);
  if (*(unsigned __int8 *)(v149 + 240) != v148)
  {
    if (*(_DWORD *)v149 == 1)
    {
      Ref = *((_QWORD *)a2 + 3);
    }
    else
    {
      v359 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v359, v149);
      v360 = (WebCore::StyleRareInheritedData *)*((_QWORD *)a2 + 3);
      *((_QWORD *)a2 + 3) = Ref;
      if (v360)
      {
        if (*(_DWORD *)v360 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v360, v139);
          WTF::fastFree(v366, v367);
          Ref = *((_QWORD *)a2 + 3);
        }
        else
        {
          --*(_DWORD *)v360;
        }
      }
    }
    *(_BYTE *)(Ref + 240) = v148;
  }
  v150 = *((_QWORD *)this + 3);
  v151 = *(_QWORD *)this;
  v152 = *(_QWORD *)(*(_QWORD *)this + 3096);
  if (v152)
  {
    v346 = 0;
    while (1)
    {
      v347 = (uint64_t *)(v346 ? v346 + 8 : v151 + 3104);
      v346 = *v347;
      if ((*(_WORD *)(*(_QWORD *)v346 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v346 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::dialogTag + 24))
      {
        break;
      }
      if (v346 == v152)
        goto LABEL_359;
    }
    if (*(_QWORD *)(v151 + 1272) == v150)
      goto LABEL_662;
  }
LABEL_359:
  if (v150)
  {
    if ((*(_WORD *)(v150 + 28) & 0x10) != 0)
    {
      v153 = *(_QWORD *)(v150 + 104);
      if (v153)
      {
        v154 = *(_DWORD *)(v153 + 4);
        if ((v154 & 1) != 0)
        {
          v155 = *(uint64_t **)(v153 + 40);
          LODWORD(v156) = *(_DWORD *)(v153 + 52);
          if (!(_DWORD)v156)
            goto LABEL_373;
        }
        else
        {
          v155 = (uint64_t *)(v153 + 32);
          LODWORD(v156) = v154 >> 5;
          if (!(_DWORD)v156)
            goto LABEL_373;
        }
        v156 = v156;
        do
        {
          v157 = *v155;
          if (*v155 == WebCore::HTMLNames::inertAttr
            || *(_QWORD *)(v157 + 24) == *(_QWORD *)(WebCore::HTMLNames::inertAttr + 24)
            && *(_QWORD *)(v157 + 32) == *(_QWORD *)(WebCore::HTMLNames::inertAttr + 32))
          {
            goto LABEL_662;
          }
          v155 += 2;
        }
        while (--v156);
      }
    }
  }
LABEL_373:
  v158 = *(_QWORD *)(v151 + 1992);
  if (!v158)
    goto LABEL_377;
  v159 = *(_DWORD *)(v158 + 8);
  *(_DWORD *)(v158 + 8) = v159 + 1;
  v160 = *(_QWORD *)(*(_QWORD *)(v158 + 16) + 8);
  v161 = *(_QWORD *)(v160 + 3096);
  if (!v161)
    goto LABEL_375;
  v307 = 0;
  v308 = v160 + 3104;
  while (1)
  {
    v309 = (uint64_t *)(v307 ? v307 + 8 : v308);
    v307 = *v309;
    if ((*(_BYTE *)(*(_QWORD *)v307 + 54) & 0x40) != 0)
      break;
    if (v307 == v161)
      goto LABEL_375;
  }
  if (*(_QWORD *)(v151 + 1272) != v150)
  {
LABEL_375:
    if (v159 != -1)
    {
      *(_DWORD *)(v158 + 8) = v159;
      goto LABEL_377;
    }
LABEL_669:
    __break(0xC471u);
    JUMPOUT(0x1943AD328);
  }
  if (v159 == -1)
    goto LABEL_669;
  *(_DWORD *)(v158 + 8) = v159;
LABEL_662:
  v339 = (_DWORD *)*((_QWORD *)a2 + 3);
  v340 = v339[59];
  if ((v340 & 0x1000000) == 0)
  {
    if (*v339 != 1)
    {
      v341 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v341, (uint64_t)v339);
      v342 = (WebCore::StyleRareInheritedData *)*((_QWORD *)a2 + 3);
      *((_QWORD *)a2 + 3) = Ref;
      if (v342)
      {
        if (*(_DWORD *)v342 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v342, v139);
          WTF::fastFree(v343, v344);
          Ref = *((_QWORD *)a2 + 3);
        }
        else
        {
          --*(_DWORD *)v342;
        }
      }
      v340 = *(_DWORD *)(Ref + 236);
      v339 = (_DWORD *)Ref;
    }
    v339[59] = v340 | 0x1000000;
    v150 = *((_QWORD *)this + 3);
  }
LABEL_377:
  if (!v150)
  {
    v173 = 0;
    goto LABEL_430;
  }
  v162 = *(_QWORD *)this;
  v163 = *(uint64_t **)(*(_QWORD *)this + 3096);
  if (v163)
  {
    v348 = 0;
    while (1)
    {
      v349 = v348 ? v348 + 1 : (uint64_t *)(v162 + 3104);
      v348 = (uint64_t *)*v349;
      v350 = *v348;
      if ((*(_WORD *)(*v348 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v350 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::dialogTag + 24))
      {
        break;
      }
      if (v348 == v163)
      {
        v350 = 0;
        break;
      }
    }
    if (v150 == v350)
    {
      if ((*(_WORD *)(v150 + 28) & 0x10) != 0
        && (v351 = *(_QWORD *)(v150 + 104)) != 0
        && ((v352 = *(_DWORD *)(v351 + 4), (v352 & 1) != 0)
          ? (v353 = *(uint64_t **)(v351 + 40), LODWORD(v354) = *(_DWORD *)(v351 + 52))
          : (v353 = (uint64_t *)(v351 + 32), LODWORD(v354) = v352 >> 5),
            (_DWORD)v354))
      {
        v354 = v354;
        while (1)
        {
          v361 = *v353;
          if (*v353 == WebCore::HTMLNames::inertAttr
            || *(_QWORD *)(v361 + 24) == *(_QWORD *)(WebCore::HTMLNames::inertAttr + 24)
            && *(_QWORD *)(v361 + 32) == *(_QWORD *)(WebCore::HTMLNames::inertAttr + 32))
          {
            break;
          }
          v353 += 2;
          if (!--v354)
            goto LABEL_752;
        }
      }
      else
      {
LABEL_752:
        v362 = (_DWORD *)*((_QWORD *)a2 + 3);
        v363 = v362[59];
        if ((v363 & 0x1000000) != 0)
        {
          if (*v362 != 1)
          {
            v364 = WTF::fastMalloc((WTF *)0x1A0);
            WebCore::StyleRareInheritedData::StyleRareInheritedData(v364, (uint64_t)v362);
            v365 = (WebCore::StyleRareInheritedData *)*((_QWORD *)a2 + 3);
            *((_QWORD *)a2 + 3) = Ref;
            if (v365)
            {
              if (*(_DWORD *)v365 == 1)
              {
                WebCore::StyleRareInheritedData::~StyleRareInheritedData(v365, v139);
                WTF::fastFree(v374, v375);
                Ref = *((_QWORD *)a2 + 3);
              }
              else
              {
                --*(_DWORD *)v365;
              }
            }
            v363 = *(_DWORD *)(Ref + 236);
            v362 = (_DWORD *)Ref;
          }
          v362[59] = v363 & 0xFEFFFFFF;
          v150 = *((_QWORD *)this + 3);
          v162 = *(_QWORD *)this;
        }
      }
    }
  }
  v164 = *(_QWORD *)(v162 + 1992);
  if (v164)
  {
    v165 = *(_DWORD *)(v164 + 8) + 1;
    *(_DWORD *)(v164 + 8) = v165;
    v166 = *(_QWORD *)(*(_QWORD *)(v164 + 16) + 8);
    v167 = *(_QWORD **)(v166 + 3096);
    if (v167)
    {
      v313 = 0;
      v314 = (_QWORD *)(v166 + 3104);
      do
      {
        if (v313)
          v315 = v313 + 1;
        else
          v315 = v314;
        v313 = (_QWORD *)*v315;
        v168 = *v313;
        if ((*(_BYTE *)(*v313 + 54) & 0x40) != 0)
          break;
        v168 = 0;
      }
      while (v313 != v167);
    }
    else
    {
      v168 = 0;
    }
    if (v150 != v168)
    {
LABEL_424:
      if (!v165)
      {
        __break(0xC471u);
        JUMPOUT(0x1943ACD24);
      }
      *(_DWORD *)(v164 + 8) = v165 - 1;
      v150 = *((_QWORD *)this + 3);
      goto LABEL_426;
    }
    if (v150)
    {
      if ((*(_WORD *)(v150 + 28) & 0x10) != 0)
      {
        v169 = *(_QWORD *)(v150 + 104);
        if (v169)
        {
          v170 = *(_DWORD *)(v169 + 4);
          if ((v170 & 1) != 0)
          {
            v171 = *(uint64_t **)(v169 + 40);
            LODWORD(v172) = *(_DWORD *)(v169 + 52);
            if (!(_DWORD)v172)
              goto LABEL_421;
          }
          else
          {
            v171 = (uint64_t *)(v169 + 32);
            LODWORD(v172) = v170 >> 5;
            if (!(_DWORD)v172)
              goto LABEL_421;
          }
          v172 = v172;
          do
          {
            v182 = *v171;
            if (*v171 == WebCore::HTMLNames::inertAttr
              || *(_QWORD *)(v182 + 24) == *(_QWORD *)(WebCore::HTMLNames::inertAttr + 24)
              && *(_QWORD *)(v182 + 32) == *(_QWORD *)(WebCore::HTMLNames::inertAttr + 32))
            {
              goto LABEL_424;
            }
            v171 += 2;
          }
          while (--v172);
        }
      }
    }
LABEL_421:
    v183 = (_DWORD *)*((_QWORD *)a2 + 3);
    v184 = v183[59];
    if ((v184 & 0x1000000) != 0)
    {
      if (*v183 != 1)
      {
        v256 = WTF::fastMalloc((WTF *)0x1A0);
        WebCore::StyleRareInheritedData::StyleRareInheritedData(v256, (uint64_t)v183);
        v257 = (WebCore::StyleRareInheritedData *)*((_QWORD *)a2 + 3);
        *((_QWORD *)a2 + 3) = Ref;
        if (v257)
        {
          if (*(_DWORD *)v257 == 1)
          {
            WebCore::StyleRareInheritedData::~StyleRareInheritedData(v257, v139);
            WTF::fastFree(v272, v273);
            Ref = *((_QWORD *)a2 + 3);
          }
          else
          {
            --*(_DWORD *)v257;
          }
        }
        v184 = *(_DWORD *)(Ref + 236);
        v183 = (_DWORD *)Ref;
      }
      v183[59] = v184 & 0xFEFFFFFF;
      v165 = *(_DWORD *)(v164 + 8);
    }
    goto LABEL_424;
  }
LABEL_426:
  v185 = WebCore::Style::Adjuster::computeEventListenerRegionTypes((WebCore::EventNames **)Ref, (uint64_t)v139, v150, *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 241));
  v186 = *((_QWORD *)a2 + 3);
  if (*(unsigned __int8 *)(v186 + 241) != v185)
  {
    v290 = v185;
    if (*(_DWORD *)v186 == 1)
    {
      v291 = *((_QWORD *)a2 + 3);
    }
    else
    {
      v310 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v310, v186);
      v312 = (WebCore::StyleRareInheritedData *)*((_QWORD *)a2 + 3);
      *((_QWORD *)a2 + 3) = v291;
      if (v312)
      {
        if (*(_DWORD *)v312 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v312, v311);
          WTF::fastFree(v334, v335);
          v291 = *((_QWORD *)a2 + 3);
        }
        else
        {
          --*(_DWORD *)v312;
        }
      }
    }
    *(_BYTE *)(v291 + 241) = v290;
  }
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 680) + 712) & 0x400000000000) != 0)
  {
    v187 = (const WebCore::RenderStyle *)*((_QWORD *)this + 3);
    WebCore::Style::Adjuster::adjustmentForTextAutosizing(a2, v187, (uint64_t)v378);
    WebCore::Style::Adjuster::adjustForTextAutosizing((uint64_t)a2, v187, (uint64_t)v378);
  }
  v173 = *((_QWORD *)this + 3);
LABEL_430:
  v188 = *(_QWORD *)(*(_QWORD *)v37 + 40);
  v189 = *(unsigned int *)(v188 + 636);
  v190 = v189 | ((unint64_t)(*(unsigned __int16 *)(v188 + 640) | (*(unsigned __int8 *)(v188 + 642) << 16)) << 32);
  v191 = (v189 >> 18) & 3;
  if (v191)
  {
    if ((*((_BYTE *)a2 + 16) & 0x1F) == 0xD || (*((_BYTE *)a2 + 16) & 0x1Eu) - 14 <= 0xFFFFFFF5)
    {
      if (v191 == 2
        || v173
        && ((v356 = *(_QWORD *)(v173 + 72) & 0xFFFFFFFFFFFFLL) == 0
         || ((v372 = *(unsigned __int16 *)(v356 + 32), v372 >= 0x100) ? (v373 = v372 == 0) : (v373 = 1),
             v373)))
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 40) + 636) & 0xC0000) != 0x80000)
        {
          v357 = (_DWORD *)*((_QWORD *)a2 + 3);
          v358 = v357[59];
          if (((v358 >> 27) & 3) != v191)
          {
            if (*v357 != 1)
            {
              v368 = WTF::fastMalloc((WTF *)0x1A0);
              WebCore::StyleRareInheritedData::StyleRareInheritedData(v368, (uint64_t)v357);
              v371 = (WebCore::StyleRareInheritedData *)*((_QWORD *)a2 + 3);
              *((_QWORD *)a2 + 3) = v369;
              if (v371)
              {
                if (*(_DWORD *)v371 == 1)
                {
                  WebCore::StyleRareInheritedData::~StyleRareInheritedData(v371, v370);
                  WTF::fastFree(v376, v377);
                  v369 = (_DWORD *)*((_QWORD *)a2 + 3);
                }
                else
                {
                  --*(_DWORD *)v371;
                }
              }
              v358 = v369[59];
              v357 = v369;
            }
            v357[59] = v358 & 0xE7FFFFFF | ((v191 & 3) << 27);
            v190 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)v37 + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)v37 + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v37 + 40) + 642) << 16)) << 32);
          }
        }
      }
    }
  }
  if ((v190 & 0xC0000) != 0x40000)
    return WebCore::Style::Adjuster::adjustForSiteSpecificQuirks((WebCore::Document **)this, a2);
  v192 = (v190 >> 44) & 3;
  if ((_DWORD)v192 == 1)
  {
    if ((v190 & 0x300000000000) == 0x200000000000)
      goto LABEL_451;
    v202 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)a2 + 1);
    v203 = (_DWORD *)*((_QWORD *)v202 + 5);
    if (*v203 == 1)
    {
      v206 = *((_QWORD *)v202 + 5);
    }
    else
    {
      v204 = v202;
      v205 = WTF::fastMalloc((WTF *)0x288);
      v206 = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v205, (uint64_t)v203);
      v208 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v204 + 5);
      *((_QWORD *)v204 + 5) = v206;
      if (v208)
      {
        if (*(_DWORD *)v208 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v208, v207);
          WTF::fastFree(v262, v263);
          v206 = *((_QWORD *)v204 + 5);
        }
        else
        {
          --*(_DWORD *)v208;
        }
      }
    }
    v209 = (_WORD *)(v206 + 640);
    v213 = *(unsigned __int8 *)(v206 + 642);
    v214 = (*(unsigned int *)(v206 + 636) | ((unint64_t)(*(unsigned __int16 *)(v206 + 640) | (v213 << 16)) << 32)) & 0xFFFFCFFFFFFFFFFFLL;
    *(_BYTE *)(v206 + 642) = v213;
    *(_DWORD *)(v206 + 636) = v214;
    v212 = (v214 | 0x200000000000) >> 32;
    goto LABEL_450;
  }
  v193 = ~v190 & 0x300000000000;
  if ((_DWORD)v192)
    v194 = 1;
  else
    v194 = v193 == 0;
  if (!v194)
  {
    v195 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)a2 + 1);
    v196 = (_DWORD *)*((_QWORD *)v195 + 5);
    if (*v196 == 1)
    {
      v199 = *((_QWORD *)v195 + 5);
    }
    else
    {
      v197 = v195;
      v198 = WTF::fastMalloc((WTF *)0x288);
      v199 = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v198, (uint64_t)v196);
      v201 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v197 + 5);
      *((_QWORD *)v197 + 5) = v199;
      if (v201)
      {
        if (*(_DWORD *)v201 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v201, v200);
          WTF::fastFree(v258, v259);
          v199 = *((_QWORD *)v197 + 5);
        }
        else
        {
          --*(_DWORD *)v201;
        }
      }
    }
    v209 = (_WORD *)(v199 + 640);
    v210 = *(unsigned __int8 *)(v199 + 642);
    v211 = *(unsigned int *)(v199 + 636) | ((unint64_t)(*(unsigned __int16 *)(v199 + 640) | (v210 << 16)) << 32) | 0x300000000000;
    *(_BYTE *)(v199 + 642) = v210;
    v212 = HIDWORD(v211);
LABEL_450:
    *v209 = v212;
  }
LABEL_451:
  v215 = *(_QWORD *)(*(_QWORD *)v37 + 40);
  v216 = *(unsigned __int16 *)(v215 + 640);
  v217 = *(unsigned int *)(v215 + 636) | ((unint64_t)(v216 | (*(unsigned __int8 *)(v215 + 642) << 16)) << 32);
  if (v216 >> 14 == 1)
  {
    if ((v217 & 0xC00000000000) != 0x800000000000)
    {
      v227 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)a2 + 1);
      v228 = (_DWORD *)*((_QWORD *)v227 + 5);
      if (*v228 == 1)
      {
        v231 = *((_QWORD *)v227 + 5);
      }
      else
      {
        v229 = v227;
        v230 = WTF::fastMalloc((WTF *)0x288);
        v231 = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v230, (uint64_t)v228);
        v233 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v229 + 5);
        *((_QWORD *)v229 + 5) = v231;
        if (v233)
        {
          if (*(_DWORD *)v233 == 1)
          {
            WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v233, v232);
            WTF::fastFree(v264, v265);
            v231 = *((_QWORD *)v229 + 5);
          }
          else
          {
            --*(_DWORD *)v233;
          }
        }
      }
      v234 = (_WORD *)(v231 + 640);
      v238 = *(unsigned __int8 *)(v231 + 642);
      v239 = (*(unsigned int *)(v231 + 636) | ((unint64_t)(*(unsigned __int16 *)(v231 + 640) | (v238 << 16)) << 32)) & 0xFFFF3FFFFFFFFFFFLL;
      *(_BYTE *)(v231 + 642) = v238;
      *(_DWORD *)(v231 + 636) = v239;
      v237 = (v239 | 0x800000000000) >> 32;
      goto LABEL_469;
    }
  }
  else
  {
    v218 = ~v217 & 0xC00000000000;
    if (v216 >> 14)
      v219 = 1;
    else
      v219 = v218 == 0;
    if (!v219)
    {
      v220 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)a2 + 1);
      v221 = (_DWORD *)*((_QWORD *)v220 + 5);
      if (*v221 == 1)
      {
        v224 = *((_QWORD *)v220 + 5);
      }
      else
      {
        v222 = v220;
        v223 = WTF::fastMalloc((WTF *)0x288);
        v224 = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v223, (uint64_t)v221);
        v226 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v222 + 5);
        *((_QWORD *)v222 + 5) = v224;
        if (v226)
        {
          if (*(_DWORD *)v226 == 1)
          {
            WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v226, v225);
            WTF::fastFree(v260, v261);
            v224 = *((_QWORD *)v222 + 5);
          }
          else
          {
            --*(_DWORD *)v226;
          }
        }
      }
      v234 = (_WORD *)(v224 + 640);
      v235 = *(unsigned __int8 *)(v224 + 642);
      v236 = *(unsigned int *)(v224 + 636) | ((unint64_t)(*(unsigned __int16 *)(v224 + 640) | (v235 << 16)) << 32) | 0xC00000000000;
      *(_BYTE *)(v224 + 642) = v235;
      v237 = HIDWORD(v236);
LABEL_469:
      *v234 = v237;
    }
  }
  return WebCore::Style::Adjuster::adjustForSiteSpecificQuirks((WebCore::Document **)this, a2);
}

WTF *WebCore::RenderStyle::adjustScrollTimelines(WebCore::RenderStyle *this)
{
  WTF *result;
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  _DWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 1);
  result = (WebCore::RenderStyle *)((char *)this + 8);
  v3 = *(_QWORD *)(v2 + 40);
  if (*(_DWORD *)(v3 + 516) || *(_DWORD *)(v3 + 484))
  {
    v4 = result;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = WTF::DataRef<WebCore::StyleRareNonInheritedData>::access((uint64_t *)v5 + 5);
    v7 = (uint64_t)(v6 + 118);
    result = WTF::Vector<WTF::RefPtr<WebCore::CSSRule,WTF::RawPtrTraits<WebCore::CSSRule>,WTF::DefaultRefDerefTraits<WebCore::CSSRule>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((WTF *)(v6 + 118), v8);
    if (*(_DWORD *)(v3 + 516))
    {
      v9 = *(_QWORD *)(*(_QWORD *)v4 + 40);
      v10 = *(unsigned int *)(v9 + 500);
      if ((_DWORD)v10)
      {
        v11 = 0;
        v12 = 0;
        while (v12 % v10 < *(unsigned int *)(v9 + 500))
        {
          WebCore::ScrollTimeline::create((_DWORD **)(*(_QWORD *)(v3 + 504) + v11), *(_BYTE *)(*(_QWORD *)(v9 + 488) + v12 % v10), (uint64_t *)&v22);
          v13 = v6[121];
          if ((_DWORD)v13 == v6[120])
          {
            WTF::Vector<std::unique_ptr<WebCore::DetachedOffscreenCanvas>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebCore::DetachedOffscreenCanvas>>(v7, (unint64_t)&v22);
          }
          else
          {
            v14 = *((_QWORD *)v6 + 59);
            v15 = v22;
            v22 = 0;
            *(_QWORD *)(v14 + 8 * v13) = v15;
            v6[121] = v13 + 1;
          }
          result = v22;
          v22 = 0;
          if (result)
          {
            if (*((_DWORD *)result + 2) == 1)
              result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
            else
              --*((_DWORD *)result + 2);
          }
          ++v12;
          v11 += 8;
          if (v12 >= *(unsigned int *)(v3 + 516))
            return result;
        }
        __break(0xC471u);
      }
      else
      {
        v16 = 0;
        v17 = 0;
        v18 = v3;
        do
        {
          WebCore::ScrollTimeline::create((_DWORD **)(*(_QWORD *)(v18 + 504) + v16), 0, (uint64_t *)&v22);
          v19 = v6[121];
          if ((_DWORD)v19 == v6[120])
          {
            WTF::Vector<std::unique_ptr<WebCore::DetachedOffscreenCanvas>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebCore::DetachedOffscreenCanvas>>(v7, (unint64_t)&v22);
          }
          else
          {
            v20 = *((_QWORD *)v6 + 59);
            v21 = v22;
            v22 = 0;
            *(_QWORD *)(v20 + 8 * v19) = v21;
            v6[121] = v19 + 1;
          }
          result = v22;
          v22 = 0;
          if (result)
          {
            if (*((_DWORD *)result + 2) == 1)
              result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
            else
              --*((_DWORD *)result + 2);
          }
          ++v17;
          v18 = v3;
          v16 += 8;
        }
        while (v17 < *(unsigned int *)(v3 + 516));
      }
    }
  }
  return result;
}

WTF **WebCore::RenderStyle::adjustViewTimelines(WTF **this)
{
  WTF **v1;
  uint64_t v2;
  WTF *v3;
  _DWORD *v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  WTF **v17;
  unsigned int v18[2];
  unsigned int v19[2];
  uint64_t v20;

  v1 = this + 1;
  v2 = *((_QWORD *)this[1] + 5);
  if (*(_DWORD *)(v2 + 580) || *(_DWORD *)(v2 + 532))
  {
    v3 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(this + 1);
    v4 = WTF::DataRef<WebCore::StyleRareNonInheritedData>::access((uint64_t *)v3 + 5);
    this = (WTF **)WTF::Vector<WTF::RefPtr<WebCore::CSSRule,WTF::RawPtrTraits<WebCore::CSSRule>,WTF::DefaultRefDerefTraits<WebCore::CSSRule>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((WTF *)(v4 + 130), v5);
    v6 = *(unsigned int *)(v2 + 580);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = 0;
      v9 = *((_QWORD *)*v1 + 5);
      v10 = *(unsigned int *)(v9 + 548);
      v11 = *(unsigned int *)(v9 + 564);
      do
      {
        v12 = v2;
        if ((_DWORD)v10)
        {
          if (v8 % v10 >= *(unsigned int *)(v9 + 548))
          {
            __break(0xC471u);
            JUMPOUT(0x1943ADDE0);
          }
          v13 = *(_BYTE *)(*(_QWORD *)(v9 + 536) + v8 % v10);
        }
        else
        {
          v13 = 0;
        }
        if ((_DWORD)v11)
        {
          if (v8 % v11 >= *(unsigned int *)(v9 + 564))
            goto LABEL_36;
          WebCore::ViewTimelineInsets::ViewTimelineInsets((WebCore::Length *)v18, *(_QWORD *)(v9 + 552) + 24 * (v8 % v11));
          v6 = *(unsigned int *)(v12 + 580);
        }
        else
        {
          *(_QWORD *)v18 = 0;
          *(_QWORD *)v19 = 0;
          v20 = 0;
        }
        if (v8 >= v6)
        {
LABEL_36:
          __break(0xC471u);
          JUMPOUT(0x1943ADD98);
        }
        WebCore::ViewTimeline::create((_DWORD **)(*(_QWORD *)(v12 + 568) + v7), v13, (int *)v18, (uint64_t *)&v17);
        v14 = v4[133];
        if ((_DWORD)v14 == v4[132])
        {
          WTF::Vector<std::unique_ptr<WebCore::DetachedOffscreenCanvas>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebCore::DetachedOffscreenCanvas>>((uint64_t)(v4 + 130), (unint64_t)&v17);
        }
        else
        {
          v15 = *((_QWORD *)v4 + 65);
          v16 = v17;
          v17 = 0;
          *(_QWORD *)(v15 + 8 * v14) = v16;
          v4[133] = v14 + 1;
        }
        this = v17;
        v17 = 0;
        if (this)
        {
          if (*((_DWORD *)this + 2) == 1)
            this = (WTF **)(*((uint64_t (**)(WTF **))*this + 1))(this);
          else
            --*((_DWORD *)this + 2);
        }
        if (BYTE4(v20) && v20 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          this = (WTF **)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v19[1]);
        }
        if (LOBYTE(v19[0]) && LOBYTE(v18[1]) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          this = (WTF **)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v18[0]);
        }
        ++v8;
        v2 = v12;
        v6 = *(unsigned int *)(v12 + 580);
        v7 += 8;
      }
      while (v8 < v6);
    }
  }
  return this;
}

uint64_t WebCore::RenderStyle::setUsedZIndex(WebCore::RenderStyle *this, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int v11;
  int *v12;
  int v13;
  int *v14;
  unsigned int v15;
  int v16;
  int *v17;
  unsigned int v18;
  int v19;
  int *v20;
  unsigned int v21;
  int v22;
  int *v23;
  unsigned int v24;
  int v25;
  int *v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;

  v4 = *((_QWORD *)this + 1);
  result = (uint64_t)this + 8;
  v5 = *(_QWORD *)(v4 + 8);
  if (*(_DWORD *)(v5 + 64) != a2 || (*(_BYTE *)(v5 + 68) & 2) != 0)
  {
    result = (uint64_t)WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = *(_QWORD *)(result + 8);
    if (*(_DWORD *)v6 == 1)
    {
      v7 = *(_QWORD *)(result + 8);
    }
    else
    {
      v8 = result;
      v9 = WTF::fastMalloc((WTF *)0x48);
      v7 = v9;
      *(_QWORD *)v9 = 1;
      *(_WORD *)(v9 + 9) = 0;
      v11 = *(unsigned __int8 *)(v6 + 8);
      *(_BYTE *)(v9 + 8) = v11;
      *(_BYTE *)(v9 + 9) = *(_BYTE *)(v6 + 9);
      if (v11 <= 0xD)
      {
        v12 = (int *)(v9 + 4);
        v13 = 1 << v11;
        if ((v13 & 0x7FC) != 0)
        {
          *(_BYTE *)(v7 + 10) = *(_BYTE *)(v6 + 10);
          *v12 = *(_DWORD *)(v6 + 4);
        }
        else if ((v13 & 0x3003) != 0)
        {
          *v12 = 0;
        }
        else
        {
          *v12 = *(_DWORD *)(v6 + 4);
          WebCore::Length::ref(v12);
        }
      }
      *(_DWORD *)(v7 + 12) = 0;
      v14 = (int *)(v7 + 12);
      *(_WORD *)(v7 + 17) = 0;
      v15 = *(unsigned __int8 *)(v6 + 16);
      *(_BYTE *)(v7 + 16) = v15;
      *(_BYTE *)(v7 + 17) = *(_BYTE *)(v6 + 17);
      if (v15 <= 0xD)
      {
        v16 = 1 << v15;
        if ((v16 & 0x7FC) != 0)
        {
          *(_BYTE *)(v7 + 18) = *(_BYTE *)(v6 + 18);
          *v14 = *(_DWORD *)(v6 + 12);
        }
        else if ((v16 & 0x3003) != 0)
        {
          *v14 = 0;
        }
        else
        {
          *v14 = *(_DWORD *)(v6 + 12);
          WebCore::Length::ref(v14);
        }
      }
      *(_DWORD *)(v7 + 20) = 0;
      v17 = (int *)(v7 + 20);
      *(_WORD *)(v7 + 25) = 0;
      v18 = *(unsigned __int8 *)(v6 + 24);
      *(_BYTE *)(v7 + 24) = v18;
      *(_BYTE *)(v7 + 25) = *(_BYTE *)(v6 + 25);
      if (v18 <= 0xD)
      {
        v19 = 1 << v18;
        if ((v19 & 0x7FC) != 0)
        {
          *(_BYTE *)(v7 + 26) = *(_BYTE *)(v6 + 26);
          *v17 = *(_DWORD *)(v6 + 20);
        }
        else if ((v19 & 0x3003) != 0)
        {
          *v17 = 0;
        }
        else
        {
          *v17 = *(_DWORD *)(v6 + 20);
          WebCore::Length::ref(v17);
        }
      }
      *(_DWORD *)(v7 + 28) = 0;
      v20 = (int *)(v7 + 28);
      *(_WORD *)(v7 + 33) = 0;
      v21 = *(unsigned __int8 *)(v6 + 32);
      *(_BYTE *)(v7 + 32) = v21;
      *(_BYTE *)(v7 + 33) = *(_BYTE *)(v6 + 33);
      if (v21 <= 0xD)
      {
        v22 = 1 << v21;
        if ((v22 & 0x7FC) != 0)
        {
          *(_BYTE *)(v7 + 34) = *(_BYTE *)(v6 + 34);
          *v20 = *(_DWORD *)(v6 + 28);
        }
        else if ((v22 & 0x3003) != 0)
        {
          *v20 = 0;
        }
        else
        {
          *v20 = *(_DWORD *)(v6 + 28);
          WebCore::Length::ref(v20);
        }
      }
      *(_DWORD *)(v7 + 36) = 0;
      v23 = (int *)(v7 + 36);
      *(_WORD *)(v7 + 41) = 0;
      v24 = *(unsigned __int8 *)(v6 + 40);
      *(_BYTE *)(v7 + 40) = v24;
      *(_BYTE *)(v7 + 41) = *(_BYTE *)(v6 + 41);
      if (v24 <= 0xD)
      {
        v25 = 1 << v24;
        if ((v25 & 0x7FC) != 0)
        {
          *(_BYTE *)(v7 + 42) = *(_BYTE *)(v6 + 42);
          *v23 = *(_DWORD *)(v6 + 36);
        }
        else if ((v25 & 0x3003) != 0)
        {
          *v23 = 0;
        }
        else
        {
          *v23 = *(_DWORD *)(v6 + 36);
          WebCore::Length::ref(v23);
        }
      }
      *(_DWORD *)(v7 + 44) = 0;
      v26 = (int *)(v7 + 44);
      *(_WORD *)(v7 + 49) = 0;
      v27 = *(unsigned __int8 *)(v6 + 48);
      *(_BYTE *)(v7 + 48) = v27;
      *(_BYTE *)(v7 + 49) = *(_BYTE *)(v6 + 49);
      if (v27 <= 0xD)
      {
        v28 = 1 << v27;
        if ((v28 & 0x7FC) != 0)
        {
          *(_BYTE *)(v7 + 50) = *(_BYTE *)(v6 + 50);
          *v26 = *(_DWORD *)(v6 + 44);
        }
        else if ((v28 & 0x3003) != 0)
        {
          *v26 = 0;
        }
        else
        {
          *v26 = *(_DWORD *)(v6 + 44);
          WebCore::Length::ref(v26);
        }
      }
      *(_DWORD *)(v7 + 52) = 0;
      result = v7 + 52;
      *(_WORD *)(v7 + 57) = 0;
      v29 = *(unsigned __int8 *)(v6 + 56);
      *(_BYTE *)(v7 + 56) = v29;
      *(_BYTE *)(v7 + 57) = *(_BYTE *)(v6 + 57);
      if (v29 <= 0xD)
      {
        v30 = 1 << v29;
        if ((v30 & 0x7FC) != 0)
        {
          *(_BYTE *)(v7 + 58) = *(_BYTE *)(v6 + 58);
          *(_DWORD *)result = *(_DWORD *)(v6 + 52);
        }
        else if ((v30 & 0x3003) != 0)
        {
          *(_DWORD *)result = 0;
        }
        else
        {
          *(_DWORD *)result = *(_DWORD *)(v6 + 52);
          result = (uint64_t)WebCore::Length::ref((int *)result);
        }
      }
      *(_QWORD *)(v7 + 60) = *(_QWORD *)(v6 + 60);
      v31 = *(_BYTE *)(v7 + 68) & 0xFE | *(_BYTE *)(v6 + 68) & 1;
      *(_BYTE *)(v7 + 68) = v31;
      v32 = v31 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(v6 + 68) >> 1) & 1));
      *(_BYTE *)(v7 + 68) = v32;
      v33 = v32 & 0xFFFFFFFB | (4 * ((*(unsigned __int8 *)(v6 + 68) >> 2) & 1));
      *(_BYTE *)(v7 + 68) = v33;
      v34 = v33 & 0xFFFFFFF7 | (8 * ((*(unsigned __int8 *)(v6 + 68) >> 3) & 1));
      *(_BYTE *)(v7 + 68) = v34;
      *(_BYTE *)(v7 + 68) = *(_BYTE *)(v6 + 68) & 0xF0 | v34 & 0xF;
      v35 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)(v8 + 8) = v7;
      if (v35)
      {
        if (*(_DWORD *)v35 == 1)
        {
          if (*(_BYTE *)(v35 + 56) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v35 + 52));
          }
          if (*(_BYTE *)(v35 + 48) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v35 + 44));
          }
          if (*(_BYTE *)(v35 + 40) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v35 + 36));
          }
          if (*(_BYTE *)(v35 + 32) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v35 + 28));
          }
          if (*(_BYTE *)(v35 + 24) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v35 + 20));
          }
          if (*(_BYTE *)(v35 + 16) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v35 + 12));
          }
          if (*(_BYTE *)(v35 + 8) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v35 + 4));
          }
          result = WTF::fastFree((WTF *)v35, v10);
          v7 = *(_QWORD *)(v8 + 8);
        }
        else
        {
          --*(_DWORD *)v35;
        }
      }
    }
    *(_DWORD *)(v7 + 64) = a2;
    *(_BYTE *)(v7 + 68) &= ~2u;
  }
  return result;
}

double WebCore::AnimationList::fillUnsetProperties(WebCore::AnimationList *this)
{
  unint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double result;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  unint64_t v31;
  uint64_t v32;
  int *v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  int v39;
  unsigned int v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  int *v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int *v70;
  int v71;
  unint64_t v72;
  char v73[8];
  char v74[8];
  int v75;
  char v76[8];
  int v77;
  char v78;

  v1 = *((unsigned int *)this + 5);
  if (!(_DWORD)v1)
    return result;
  v3 = 0;
  v4 = 0;
  v5 = *((_QWORD *)this + 1);
  while ((*(_DWORD *)(*(_QWORD *)(v5 + 8 * v4) + 112) & 0x200) != 0)
  {
    ++v4;
    v3 += 8;
    if (v4 == v1)
      goto LABEL_8;
  }
  if (v4 && v4 < v1)
  {
    v68 = 0;
    while (v68 < v1)
    {
      v69 = *((_QWORD *)this + 1);
      v70 = *(int **)(v69 + v3);
      result = *(double *)(*(_QWORD *)(v69 + 8 * v68) + 56);
      v71 = v70[28];
      v70 += 28;
      *((double *)v70 - 7) = result;
      *v70 = v71 | 0x400200;
      ++v68;
      v1 = *((unsigned int *)this + 5);
      v3 += 8;
      if (v4 + v68 >= v1)
      {
        if (!(_DWORD)v1)
          return result;
        v5 = *((_QWORD *)this + 1);
        goto LABEL_8;
      }
    }
    __break(0xC471u);
LABEL_148:
    JUMPOUT(0x1943AEC30);
  }
LABEL_8:
  v6 = 0;
  while ((*(_DWORD *)(*(_QWORD *)(v5 + 8 * v6) + 112) & 0x400) != 0)
  {
    if (v1 == ++v6)
    {
      v6 = v1;
      break;
    }
  }
  if (v6 && v6 < v1)
  {
    v50 = 0;
    do
    {
      if (v50 >= v1)
      {
        __break(0xC471u);
        JUMPOUT(0x1943AEC68);
      }
      v51 = *((_QWORD *)this + 1) + 8 * v50;
      v52 = *(_QWORD *)(v51 + 8 * v6);
      v53 = *(_DWORD *)(v52 + 112);
      v52 += 112;
      LODWORD(v51) = *(_DWORD *)(*(_QWORD *)v51 + 112) & 3 | 0x800400 | v53 & 0xFFFFFFFC;
      *(_BYTE *)(v52 + 4) = *(_BYTE *)(v52 + 4);
      *(_DWORD *)v52 = v51;
      ++v50;
      v1 = *((unsigned int *)this + 5);
    }
    while (v6 + v50 < v1);
    if (!(_DWORD)v1)
      return result;
    v5 = *((_QWORD *)this + 1);
  }
  v7 = 0;
  v8 = 0;
  while ((*(_DWORD *)(*(_QWORD *)(v5 + 8 * v8) + 112) & 0x800) != 0)
  {
    ++v8;
    v7 += 8;
    if (v8 == v1)
      goto LABEL_14;
  }
  if (v8 && v8 < v1)
  {
    v31 = 0;
    do
    {
      if (v31 >= v1)
      {
        __break(0xC471u);
        JUMPOUT(0x1943AEC38);
      }
      v32 = *((_QWORD *)this + 1);
      v33 = *(int **)(v32 + v7);
      result = *(double *)(*(_QWORD *)(v32 + 8 * v31) + 64);
      v34 = v33[28];
      v33 += 28;
      *((double *)v33 - 6) = result;
      *v33 = v34 | 0x1000800;
      ++v31;
      v1 = *((unsigned int *)this + 5);
      v7 += 8;
    }
    while (v8 + v31 < v1);
    if (!(_DWORD)v1)
      return result;
    v5 = *((_QWORD *)this + 1);
  }
LABEL_14:
  v9 = 0;
  while ((*(_DWORD *)(*(_QWORD *)(v5 + 8 * v9) + 112) & 0x1000) != 0)
  {
    if (v1 == ++v9)
    {
      v9 = v1;
      break;
    }
  }
  if (v9 && v9 < v1)
  {
    v42 = 0;
    do
    {
      if (v42 >= v1)
      {
        __break(0xC471u);
        JUMPOUT(0x1943AEC58);
      }
      v43 = *((_QWORD *)this + 1) + 8 * v42;
      v44 = *(_QWORD *)(v43 + 8 * v9);
      v45 = *(_DWORD *)(v44 + 112);
      v44 += 112;
      LODWORD(v43) = *(_DWORD *)(*(_QWORD *)v43 + 112) & 0xC | 0x2001000 | v45 & 0xFFFFFFF3;
      *(_BYTE *)(v44 + 4) = *(_BYTE *)(v44 + 4);
      *(_DWORD *)v44 = v43;
      ++v42;
      v1 = *((unsigned int *)this + 5);
    }
    while (v9 + v42 < v1);
    if (!(_DWORD)v1)
      return result;
    v5 = *((_QWORD *)this + 1);
  }
  v10 = 0;
  while ((*(_DWORD *)(*(_QWORD *)(v5 + 8 * v10) + 112) & 0x2000) != 0)
  {
    if (v1 == ++v10)
    {
      v10 = v1;
      break;
    }
  }
  if (v10 && v10 < v1)
  {
    v46 = 0;
    do
    {
      if (v46 >= v1)
      {
        __break(0xC471u);
        JUMPOUT(0x1943AEC60);
      }
      v47 = *((_QWORD *)this + 1) + 8 * v46;
      v48 = *(int **)(v47 + 8 * v10);
      result = *(double *)(*(_QWORD *)v47 + 48);
      v49 = v48[28];
      v48 += 28;
      *((double *)v48 - 8) = result;
      *v48 = v49 | 0x4002000;
      ++v46;
      v1 = *((unsigned int *)this + 5);
    }
    while (v10 + v46 < v1);
    if (!(_DWORD)v1)
      return result;
    v5 = *((_QWORD *)this + 1);
  }
  v11 = 0;
  while ((*(_DWORD *)(*(_QWORD *)(v5 + 8 * v11) + 112) & 0x8000) != 0)
  {
    if (v1 == ++v11)
    {
      v11 = v1;
      break;
    }
  }
  if (v11 && v11 < v1)
  {
    v35 = 0;
    do
    {
      if (v35 >= v1)
      {
        __break(0xC471u);
        JUMPOUT(0x1943AEC50);
      }
      v36 = *((_QWORD *)this + 1) + 8 * v35;
      v37 = *(_QWORD *)(v36 + 8 * v11);
      v39 = *(_DWORD *)(v37 + 112);
      v38 = (unsigned int *)(v37 + 112);
      v40 = v39 & 0xF7FF7FCF;
      if ((*(_DWORD *)(*(_QWORD *)v36 + 112) & 0x30) != 0)
        v41 = 134250512;
      else
        v41 = 134250496;
      *v38 = v41 | v40;
      ++v35;
      v1 = *((unsigned int *)this + 5);
    }
    while (v11 + v35 < v1);
    if (!(_DWORD)v1)
      return result;
    v5 = *((_QWORD *)this + 1);
  }
  v12 = 0;
  while ((*(_DWORD *)(*(_QWORD *)(v5 + 8 * v12) + 112) & 0x20000) != 0)
  {
    if (v1 == ++v12)
    {
      v12 = v1;
      break;
    }
  }
  if (v12 && v12 < v1)
  {
    v54 = 0;
    do
    {
      if (v54 >= v1)
      {
        __break(0xC471u);
        JUMPOUT(0x1943AEC40);
      }
      v55 = *((_QWORD *)this + 1);
      v56 = *(_QWORD *)(v55 + 8 * v12 + 8 * v54);
      v57 = *(_QWORD *)(v55 + 8 * v54);
      v76[0] = 0;
      v77 = -1;
      v58 = *(unsigned int *)(v57 + 88);
      if ((_DWORD)v58 != -1)
      {
        ((void (*)(char *, char *, uint64_t))off_1E34073A8[v58])(&v78, v76, v57 + 80);
        v77 = v58;
      }
      WebCore::Animation::fillTimeline(v56, (uint64_t)v76);
      if (v77 != -1)
        ((void (*)(char *, char *))off_1E3407390[v77])(&v78, v76);
      v77 = -1;
      ++v54;
      v1 = *((unsigned int *)this + 5);
    }
    while (v12 + v54 < v1);
    if (!(_DWORD)v1)
      return result;
    v5 = *((_QWORD *)this + 1);
  }
  v13 = 0;
  v14 = 0;
  while ((*(_DWORD *)(*(_QWORD *)(v5 + 8 * v14) + 112) & 0x40000) != 0)
  {
    ++v14;
    v13 += 8;
    if (v14 == v1)
    {
LABEL_29:
      v15 = 0;
      v16 = 0;
      while ((*(_DWORD *)(*(_QWORD *)(v5 + 8 * v16) + 112) & 0x10000) != 0)
      {
        ++v16;
        v15 += 8;
        if (v16 == v1)
          goto LABEL_32;
      }
      if (v16 && v16 < v1)
      {
        v72 = v16;
        v20 = 0;
        do
        {
          if (v20 >= v1)
          {
            __break(0xC471u);
            JUMPOUT(0x1943AEC70);
          }
          v21 = *((_QWORD *)this + 1);
          v22 = *(_QWORD *)(v21 + v15);
          v23 = *(_QWORD *)(v21 + 8 * v20);
          v73[0] = *(_BYTE *)(v23 + 8);
          v74[0] = 0;
          v75 = -1;
          v24 = *(unsigned int *)(v23 + 24);
          if ((_DWORD)v24 != -1)
          {
            ((void (*)(char *, char *, uint64_t))off_1E3407358[v24])(&v78, v74, v23 + 16);
            v75 = v24;
          }
          WebCore::Animation::fillProperty(v22, v73);
          if (v75 != -1)
            ((void (*)(char *, char *))off_1E3407348[v75])(&v78, v74);
          v75 = -1;
          ++v20;
          v1 = *((unsigned int *)this + 5);
          v15 += 8;
        }
        while (v72 + v20 < v1);
        if (!(_DWORD)v1)
          return result;
        v5 = *((_QWORD *)this + 1);
      }
LABEL_32:
      v17 = 0;
      while ((*(_DWORD *)(*(_QWORD *)(v5 + 8 * v17) + 112) & 0x80000) != 0)
      {
        if (v1 == ++v17)
        {
          v17 = v1;
          break;
        }
      }
      if (v17 && v17 < v1)
      {
        v59 = 0;
        do
        {
          if (v59 >= v1)
          {
            __break(0xC471u);
            JUMPOUT(0x1943AEC48);
          }
          v60 = *((_QWORD *)this + 1) + 8 * v59;
          v61 = *(_QWORD *)(v60 + 8 * v17);
          v62 = *(_DWORD *)(v61 + 112);
          v61 += 112;
          LODWORD(v60) = *(_DWORD *)(*(_QWORD *)v60 + 112) & 0xC0 | 0x80080000 | v62 & 0xFFFFFF3F;
          *(_BYTE *)(v61 + 4) = *(_BYTE *)(v61 + 4);
          *(_DWORD *)v61 = v60;
          ++v59;
          v1 = *((unsigned int *)this + 5);
        }
        while (v17 + v59 < v1);
        if (!(_DWORD)v1)
          return result;
        v5 = *((_QWORD *)this + 1);
      }
      v18 = 0;
      v19 = 0;
      while ((*(_DWORD *)(*(_QWORD *)(v5 + 8 * v19) + 112) & 0x100000) != 0)
      {
        ++v19;
        v18 += 8;
        if (v19 == v1)
          return result;
      }
      if (v19 && v19 < v1)
      {
        v63 = 0;
        do
        {
          if (v63 >= v1)
          {
            __break(0xC471u);
            JUMPOUT(0x1943AEC78);
          }
          v64 = *((_QWORD *)this + 1);
          v65 = *(_QWORD *)(v64 + v18);
          v66 = *(_DWORD *)(v65 + 112);
          v65 += 112;
          v67 = *(_DWORD *)(*(_QWORD *)(v64 + 8 * v63) + 112) & 0x100 | 0x100100000 | v66 & 0xFFFFFEFF | ((unint64_t)*(unsigned __int8 *)(v65 + 4) << 32);
          *(_DWORD *)v65 = v67;
          *(_BYTE *)(v65 + 4) = BYTE4(v67);
          ++v63;
          v1 = *((unsigned int *)this + 5);
          v18 += 8;
        }
        while (v19 + v63 < v1);
      }
      return result;
    }
  }
  if (!v14 || v14 >= v1)
    goto LABEL_29;
  v26 = 0;
  do
  {
    if (v26 >= v1)
    {
      __break(0xC471u);
      goto LABEL_148;
    }
    v27 = *((_QWORD *)this + 1);
    v28 = *(_QWORD *)(v27 + v13);
    v29 = *(_QWORD *)(*(_QWORD *)(v27 + 8 * v26) + 96);
    if (v29)
      ++*(_DWORD *)(v29 + 8);
    v30 = *(_DWORD **)(v28 + 96);
    *(_QWORD *)(v28 + 96) = v29;
    if (v30)
    {
      if (v30[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 16))(v30);
      else
        --v30[2];
    }
    *(_DWORD *)(v28 + 112) |= 0x40040000u;
    ++v26;
    v1 = *((unsigned int *)this + 5);
    v13 += 8;
  }
  while (v14 + v26 < v1);
  if ((_DWORD)v1)
  {
    v5 = *((_QWORD *)this + 1);
    goto LABEL_29;
  }
  return result;
}

_BYTE *WebCore::Length::ipcData@<X0>(_BYTE *this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v2 = 0;
  switch(this[4])
  {
    case 0:
    case 0xB:
      break;
    case 1:
      v2 = 1;
      break;
    case 2:
      v4 = this[5];
      *(_QWORD *)(a2 + 4) = *(unsigned int *)this | ((unint64_t)(this[6] == 0) << 32);
      *(_BYTE *)(a2 + 12) = v4;
      v2 = 2;
      break;
    case 3:
      v5 = this[5];
      *(_QWORD *)(a2 + 4) = *(unsigned int *)this | ((unint64_t)(this[6] == 0) << 32);
      *(_BYTE *)(a2 + 12) = v5;
      v2 = 3;
      break;
    case 4:
      v3 = this[5];
      *(_QWORD *)(a2 + 4) = *(unsigned int *)this | ((unint64_t)(this[6] == 0) << 32);
      *(_BYTE *)(a2 + 12) = v3;
      v2 = 4;
      break;
    case 5:
      v6 = this[5];
      *(_QWORD *)(a2 + 4) = *(unsigned int *)this | ((unint64_t)(this[6] == 0) << 32);
      *(_BYTE *)(a2 + 12) = v6;
      v2 = 5;
      break;
    case 6:
      v7 = this[5];
      *(_QWORD *)(a2 + 4) = *(unsigned int *)this | ((unint64_t)(this[6] == 0) << 32);
      *(_BYTE *)(a2 + 12) = v7;
      v2 = 6;
      break;
    case 7:
      v8 = this[5];
      *(_QWORD *)(a2 + 4) = *(unsigned int *)this | ((unint64_t)(this[6] == 0) << 32);
      *(_BYTE *)(a2 + 12) = v8;
      v2 = 7;
      break;
    case 8:
      v9 = this[5];
      *(_QWORD *)(a2 + 4) = *(unsigned int *)this | ((unint64_t)(this[6] == 0) << 32);
      *(_BYTE *)(a2 + 12) = v9;
      v2 = 8;
      break;
    case 9:
      v10 = this[5];
      *(_QWORD *)(a2 + 4) = *(unsigned int *)this | ((unint64_t)(this[6] == 0) << 32);
      *(_BYTE *)(a2 + 12) = v10;
      v2 = 9;
      break;
    case 0xA:
      v11 = this[5];
      *(_QWORD *)(a2 + 4) = *(unsigned int *)this | ((unint64_t)(this[6] == 0) << 32);
      *(_BYTE *)(a2 + 12) = v11;
      v2 = 10;
      break;
    case 0xC:
      v2 = 11;
      break;
    case 0xD:
      v2 = 12;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1943AECF8);
  }
  *(_DWORD *)(a2 + 16) = v2;
  return this;
}

uint64_t ___ZN3PALL12initUIDeviceEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)objc_getClass("UIDevice");
    qword_1ECE7ED40 = result;
    if (result)
    {
LABEL_3:
      PAL::getUIDeviceClass = PAL::UIDeviceFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)objc_getClass("UIDevice");
    qword_1ECE7ED40 = result;
    if (result)
      goto LABEL_3;
  }
  result = 53;
  __break(0xC471u);
  return result;
}

int *WebCore::CSSPropertyParserHelpers::consumeBaselineKeyword(WebCore::CSSPropertyParserHelpers *this, WebCore::CSSParserTokenRange *a2)
{
  uint64_t v3;
  int *result;
  int *v5;
  int v6;

  v3 = WebCore::CSSPropertyParserHelpers::consumeBaselineKeywordRaw(a2, a2);
  if ((v3 & 0xFF0000) != 0)
  {
    if ((unsigned __int16)v3 == 517)
    {
      v5 = &WebCore::staticCSSValuePool[6820];
      *v5 += 2;
      dword_1ECE8CB68 += 2;
      result = (int *)WTF::fastCompactMalloc((WTF *)0x18);
      *result = 2;
      v6 = (*((unsigned __int8 *)result + 6) << 16) & 0xFC0000;
      *((_BYTE *)result + 7) = 1;
      *((_QWORD *)result + 1) = v5;
      *((_QWORD *)result + 2) = &WebCore::staticCSSValuePool[4080];
      *((_WORD *)result + 2) = -18432;
      *((_BYTE *)result + 6) = (v6 | 0x10000u) >> 16;
    }
    else
    {
      result = &WebCore::staticCSSValuePool[4080];
      dword_1ECE8CB68 += 2;
    }
  }
  else
  {
    result = 0;
  }
  *(_QWORD *)this = result;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeBaselineKeywordRaw(WebCore::CSSPropertyParserHelpers *this, WebCore::CSSParserTokenRange *a2)
{
  int v3;
  WTF::StringImpl *v4;
  uint64_t result;
  _DWORD *v7;

  v3 = WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)931,(WebCore::CSSValueID)933>((uint64_t)this);
  WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)248>((uint64_t)&v7, (uint64_t)this);
  result = (uint64_t)v7;
  if (v7)
  {
    if (*v7 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, v4);
    else
      *v7 -= 2;
    if ((unsigned __int16)v3 != 933 || (v3 & 0xFFFF0000) == 0)
      return 65784;
    else
      return 66053;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)931,(WebCore::CSSValueID)933>(uint64_t a1)
{
  unint64_t v2;
  __int128 *v3;
  unsigned int *v4;
  unsigned int v5;
  __int128 *v6;
  unsigned __int16 v7;
  int v8;
  int v9;
  int v10;

  v3 = *(__int128 **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 >= v2)
  {
    v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v3 & 0x3F) != 0)
    goto LABEL_8;
  v4 = *(unsigned int **)a1;
  if (*(_QWORD *)a1 >= v2)
  {
    v4 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v5 = WebCore::CSSParserToken::id(v4);
  if (v5 == 933 || v5 == 931)
  {
    v6 = WebCore::CSSParserTokenRange::consumeIncludingWhitespace((__int128 **)a1);
    v7 = (unsigned __int16)WebCore::CSSParserToken::id((unsigned int *)v6);
    v8 = v7 & 0xFF00;
    v9 = v7;
    v10 = 0x10000;
  }
  else
  {
LABEL_8:
    v9 = 0;
    v10 = 0;
    v8 = 0;
  }
  return v10 | v9 | v8;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)248>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  int *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;

  v3 = (_QWORD *)result;
  v5 = *(__int128 **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_5;
  v6 = *(__int128 **)a2;
  if (*(_QWORD *)a2 >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_5;
  result = *((unsigned int *)v6 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = result;
  }
  if ((unsigned __int16)result != 248)
  {
LABEL_5:
    v7 = 0;
  }
  else
  {
    v9 = *(__int128 **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 == v8)
    {
      v11 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v10 = *(__int128 **)a2;
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v10 = (__int128 *)((char *)v9 + 24);
      *(_QWORD *)a2 = (char *)v9 + 24;
    }
    while (1)
    {
      if ((unint64_t)v10 < v8 || (v11 & 1) != 0)
      {
        if ((unint64_t)v10 >= v8)
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v12 = *(_DWORD *)v10;
      }
      else
      {
        v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
        v11 = 1;
      }
      if ((v12 & 0x3F) != 0x10)
        break;
      v10 = (__int128 *)(*(_QWORD *)a2 + 24);
      *(_QWORD *)a2 = v10;
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((unsigned int *)v9 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
        *((_DWORD *)v9 + 4) = result;
      }
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1943AF344);
      }
    }
    v7 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v7 += 2;
  }
  *v3 = v7;
  return result;
}

uint64_t WebCore::TransformState::flattenWithTransform(WebCore::TransformState *this, float64x2_t *a2, double (*a3)[4][4])
{
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  float64x2_t v11;
  int v12;
  float64x2_t v13;
  int v14;
  float64x2_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  float64x2_t v22;
  double v23;
  float32x2_t v24;
  float64x2_t v25;
  float32x4_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  const double *f64;
  float64x2_t v40;
  float64x2_t v41;
  void *v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  WTF *v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  const double *v60;
  float64x2_t v61;
  uint64_t v62;
  float32x4_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float32x4_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  char v78;
  __int128 v79;
  __int128 v80;
  float64x2_t v81;
  __int128 v82;
  float64x2_t v83;
  __int128 v84;
  float64x2_t v85;
  __int128 v86;
  float64x2x4_t v87;
  float64x2x4_t v88;
  float64x2x4_t v89;
  float64x2x4_t v90;
  float64x2x4_t v91;
  float64x2x4_t v92;
  float64x2x4_t v93;
  float64x2x4_t v94;

  if (*((_DWORD *)this + 28))
  {
    WebCore::TransformationMatrix::inverse(a2->f64, a3, (uint64_t)&v70);
    if (v78)
      v6 = (__int128 *)&v70;
    else
      v6 = &constinit_5;
    v7 = v6[5];
    v83 = (float64x2_t)v6[4];
    v84 = v7;
    v8 = v6[7];
    v85 = (float64x2_t)v6[6];
    v86 = v8;
    v9 = v6[1];
    v79 = *v6;
    v80 = v9;
    v10 = v6[3];
    v81 = (float64x2_t)v6[2];
    v82 = v10;
    if (*((_BYTE *)this + 105))
    {
      if (*(double *)&v84 == 0.0)
      {
        v24 = 0;
      }
      else
      {
        v19 = *(float *)this;
        v20 = *((float *)this + 1);
        v21 = -(*(double *)&v86 + *(double *)&v82 * v20 + *(double *)&v80 * v19) / *(double *)&v84;
        v22 = vaddq_f64(v85, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v81, v20), (float64x2_t)v79, v19), v83, v21));
        v23 = *((double *)&v86 + 1)
            + *((double *)&v82 + 1) * v20
            + v19 * *((double *)&v80 + 1)
            + v21 * *((double *)&v84 + 1);
        if (v23 <= 0.0)
        {
          v69.f64[0] = NAN;
          v69.f64[1] = NAN;
          v22 = (float64x2_t)vbslq_s8((int8x16_t)vnegq_f64(v69), (int8x16_t)vdupq_n_s64(0x4137D78400000000uLL), (int8x16_t)v22);
        }
        else if (v23 != 1.0)
        {
          v22 = vdivq_f64(v22, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v23, 0));
        }
        v24 = vcvt_f32_f64(v22);
      }
      *(float32x2_t *)this = v24;
    }
    if (*((_BYTE *)this + 106))
    {
      WebCore::TransformationMatrix::projectQuad((float64x2_t *)&v79, (const FloatQuad *)((char *)this + 8), (BOOL *)a3, (uint64_t)&v70);
      v11 = v71;
      *(float32x4_t *)((char *)this + 8) = v70;
      *(float64x2_t *)((char *)this + 24) = v11;
      if (*((_BYTE *)this + 72))
      {
        WebCore::TransformationMatrix::projectQuad((float64x2_t *)&v79, (const FloatQuad *)((char *)this + 40), (BOOL *)a3, (uint64_t)&v70);
        v12 = *((unsigned __int8 *)this + 72);
        v13 = v71;
        *(float32x4_t *)((char *)this + 40) = v70;
        *(float64x2_t *)((char *)this + 56) = v13;
        if (!v12)
          *((_BYTE *)this + 72) = 1;
      }
    }
  }
  else
  {
    if (*((_BYTE *)this + 105))
    {
      *(_DWORD *)this = WebCore::TransformationMatrix::mapPoint(a2, (float32x2_t *)this).u32[0];
      *((_DWORD *)this + 1) = v14;
    }
    if (*((_BYTE *)this + 106))
    {
      WebCore::TransformationMatrix::mapQuad(a2, (const FloatQuad *)((char *)this + 8), &v70);
      v15 = v71;
      *(float32x4_t *)((char *)this + 8) = v70;
      *(float64x2_t *)((char *)this + 24) = v15;
      if (*((_BYTE *)this + 72))
      {
        WebCore::TransformationMatrix::mapQuad(a2, (const FloatQuad *)((char *)this + 40), &v70);
        v25 = v71;
        *(float32x4_t *)((char *)this + 40) = v70;
        *(float64x2_t *)((char *)this + 56) = v25;
      }
    }
  }
  v16 = *((_QWORD *)this + 11);
  if (v16)
  {
    if (*((_DWORD *)this + 28)
      && (*(_QWORD *)(v16 + 16) = 0,
          *(_QWORD *)(v16 + 48) = 0,
          *(_QWORD *)(v16 + 64) = 0,
          *(_QWORD *)(v16 + 72) = 0,
          *(_OWORD *)(v16 + 80) = xmmword_1968A14B0,
          *(_QWORD *)(v16 + 112) = 0,
          v16 = *((_QWORD *)this + 11),
          *((_DWORD *)this + 28)))
    {
      v26 = *(float32x4_t *)v16;
      v27 = *(float64x2_t *)(v16 + 16);
      v28 = *(float64x2_t *)(v16 + 48);
      v72 = *(float64x2_t *)(v16 + 32);
      v73 = v28;
      v70 = v26;
      v71 = v27;
      v29 = *(float64x2_t *)(v16 + 64);
      v30 = *(float64x2_t *)(v16 + 80);
      v31 = *(float64x2_t *)(v16 + 112);
      v76 = *(float64x2_t *)(v16 + 96);
      v77 = v31;
      v74 = v29;
      v75 = v30;
      v32 = (float64x2_t)v70;
      v33 = v71;
      v34 = v72;
      v35 = v73;
      v36 = v29;
      v37 = v30;
      v38 = v31;
      v91 = vld4q_dup_f64(a2->f64);
      f64 = a2[2].f64;
      v40 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v91.val[0], (float64x2_t)v70), v91.val[1], v72), v91.val[2], v29), v91.val[3], v76);
      v41 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v91.val[0], v71), v91.val[1], v73), v91.val[2], v30), v91.val[3], v31);
      v87 = vld4q_dup_f64(f64);
      f64 += 4;
      v70 = (float32x4_t)v40;
      v71 = v41;
      v92 = vld4q_dup_f64(f64);
      f64 += 4;
      v72 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v87.val[0], v32), v87.val[1], v72), v87.val[2], v36), v87.val[3], v76);
      v73 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v87.val[0], v33), v87.val[1], v73), v87.val[2], v37), v87.val[3], v38);
      v88 = vld4q_dup_f64(f64);
      v74 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v92.val[0], v32), v92.val[1], v34), v92.val[2], v36), v92.val[3], v76);
      v75 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v92.val[0], v33), v92.val[1], v35), v92.val[2], v37), v92.val[3], v38);
      v76 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v88.val[0], v32), v88.val[1], v34), v88.val[2], v36), v88.val[3], v76);
      v77 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v88.val[0], v33), v88.val[1], v35), v88.val[2], v37), v88.val[3], v38);
    }
    else
    {
      v50 = a2[5];
      v74 = a2[4];
      v75 = v50;
      v51 = a2[7];
      v76 = a2[6];
      v77 = v51;
      v52 = a2[1];
      v70 = *(float32x4_t *)a2;
      v71 = v52;
      v53 = a2[3];
      v72 = a2[2];
      v73 = v53;
      v54 = (float64x2_t)v70;
      v55 = v71;
      v56 = v72;
      v57 = v53;
      v58 = v74;
      v59 = v75;
      v93 = vld4q_dup_f64((const double *)v16);
      v60 = (const double *)(v16 + 32);
      v61 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v93.val[0], v71), v93.val[1], v53), v93.val[2], v75), v93.val[3], v77);
      v89 = vld4q_dup_f64(v60);
      v60 += 4;
      v70 = (float32x4_t)vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v93.val[0], (float64x2_t)v70), v93.val[1], v72), v93.val[2], v74), v93.val[3], v76);
      v71 = v61;
      v94 = vld4q_dup_f64(v60);
      v60 += 4;
      v72 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v89.val[0], v54), v89.val[1], v72), v89.val[2], v74), v89.val[3], v76);
      v73 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v89.val[0], v55), v89.val[1], v57), v89.val[2], v75), v89.val[3], v77);
      v90 = vld4q_dup_f64(v60);
      v74 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v94.val[0], v54), v94.val[1], v56), v94.val[2], v74), v94.val[3], v76);
      v75 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v94.val[0], v55), v94.val[1], v57), v94.val[2], v75), v94.val[3], v77);
      v76 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v90.val[0], v54), v90.val[1], v56), v90.val[2], v58), v90.val[3], v76);
      v77 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v90.val[0], v55), v90.val[1], v57), v90.val[2], v59), v90.val[3], v77);
    }
    v62 = *((_QWORD *)this + 11);
    v63 = v70;
    v64 = v71;
    v65 = v73;
    *(float64x2_t *)(v62 + 32) = v72;
    *(float64x2_t *)(v62 + 48) = v65;
    *(float32x4_t *)v62 = v63;
    *(float64x2_t *)(v62 + 16) = v64;
    v66 = v74;
    v67 = v75;
    v68 = v77;
    *(float64x2_t *)(v62 + 96) = v76;
    *(float64x2_t *)(v62 + 112) = v68;
    *(float64x2_t *)(v62 + 64) = v66;
    *(float64x2_t *)(v62 + 80) = v67;
LABEL_17:
    result = *((_QWORD *)this + 11);
    if (!result)
      goto LABEL_18;
    goto LABEL_32;
  }
  if (!*((_DWORD *)this + 27))
    goto LABEL_17;
  result = WTF::fastMalloc((WTF *)0x80);
  v43 = a2[3];
  v45 = *a2;
  v44 = a2[1];
  *(float64x2_t *)(result + 32) = a2[2];
  *(float64x2_t *)(result + 48) = v43;
  *(float64x2_t *)result = v45;
  *(float64x2_t *)(result + 16) = v44;
  v46 = a2[7];
  v48 = a2[4];
  v47 = a2[5];
  *(float64x2_t *)(result + 96) = a2[6];
  *(float64x2_t *)(result + 112) = v46;
  *(float64x2_t *)(result + 64) = v48;
  *(float64x2_t *)(result + 80) = v47;
  v49 = (WTF *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = result;
  if (v49)
  {
    WTF::fastFree(v49, v42);
    goto LABEL_17;
  }
LABEL_32:
  if (!*((_DWORD *)this + 28))
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 80) = xmmword_1968A14B0;
    *(_QWORD *)(result + 112) = 0;
  }
LABEL_18:
  v18 = *((_QWORD *)this + 10);
  if (v18)
  {
    *(_QWORD *)v18 = 0x3FF0000000000000;
    *(_OWORD *)(v18 + 8) = 0u;
    *(_OWORD *)(v18 + 24) = 0u;
    *(_QWORD *)(v18 + 40) = 0x3FF0000000000000;
    *(_OWORD *)(v18 + 48) = 0u;
    *(_OWORD *)(v18 + 64) = 0u;
    *(_QWORD *)(v18 + 80) = 0x3FF0000000000000;
    *(_OWORD *)(v18 + 88) = 0u;
    *(_OWORD *)(v18 + 104) = 0u;
    *(_QWORD *)(v18 + 120) = 0x3FF0000000000000;
  }
  *((_BYTE *)this + 104) = 0;
  return result;
}

float32x2_t WebCore::TransformationMatrix::projectQuad@<D0>(float64x2_t *this@<X0>, const FloatQuad *a2@<X1>, BOOL *a3@<X2>, uint64_t a4@<X8>)
{
  double v4;
  double m_x;
  double m_y;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  double v18;
  double v19;
  double v20;
  float64x2_t v21;
  float64x2_t v22;
  double v23;
  int v24;
  double v25;
  double v26;
  double v27;
  float64x2_t v28;
  double v29;
  int v30;
  double v31;
  double v32;
  double v33;
  float64x2_t v34;
  double v35;
  int v36;
  double v37;
  double v38;
  double v39;
  float64x2_t v40;
  double v41;
  int v42;
  float32x2_t result;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;

  v4 = this[5].f64[0];
  if (v4 == 0.0)
  {
    v36 = 0;
    v24 = 0;
    v30 = 0;
    v42 = 0;
    result = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
  }
  else
  {
    m_x = a2->var0.m_x;
    m_y = a2->var0.m_y;
    v7 = this[3].f64[0];
    v8 = this[3].f64[1];
    v10 = this[1].f64[0];
    v9 = this[1].f64[1];
    v12 = this[7].f64[0];
    v11 = this[7].f64[1];
    v13 = -(v12 + v7 * m_y + v10 * m_x) / v4;
    v14 = *this;
    v15 = this[2];
    v16 = this[4];
    v17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v15, m_y), *this, m_x), v16, v13);
    v18 = v8 * m_y + m_x * v9;
    v19 = this[5].f64[1];
    v20 = v18 + v13 * v19;
    v21 = this[6];
    v22 = vaddq_f64(v21, v17);
    v23 = v11 + v20;
    if (v11 + v20 <= 0.0)
    {
      v47.f64[0] = NAN;
      v47.f64[1] = NAN;
      v22 = (float64x2_t)vbslq_s8((int8x16_t)vnegq_f64(v47), (int8x16_t)vdupq_n_s64(0x4137D78400000000uLL), (int8x16_t)v22);
      v24 = 1;
    }
    else
    {
      v24 = 0;
      if (v23 != 1.0)
        v22 = vdivq_f64(v22, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v23, 0));
    }
    v25 = a2->var1.m_x;
    v26 = a2->var1.m_y;
    v27 = -(v12 + v7 * v26 + v10 * v25) / v4;
    v28 = vaddq_f64(v21, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v15, v26), v14, v25), v16, v27));
    v29 = v11 + v8 * v26 + v25 * v9 + v27 * v19;
    if (v29 <= 0.0)
    {
      v48.f64[0] = NAN;
      v48.f64[1] = NAN;
      v28 = (float64x2_t)vbslq_s8((int8x16_t)vnegq_f64(v48), (int8x16_t)vdupq_n_s64(0x4137D78400000000uLL), (int8x16_t)v28);
      v30 = 1;
    }
    else
    {
      v30 = 0;
      if (v29 != 1.0)
        v28 = vdivq_f64(v28, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v29, 0));
    }
    v31 = a2->var2.m_x;
    v32 = a2->var2.m_y;
    v33 = -(v12 + v7 * v32 + v10 * v31) / v4;
    v34 = vaddq_f64(v21, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v15, v32), v14, v31), v16, v33));
    v35 = v11 + v8 * v32 + v31 * v9 + v33 * v19;
    if (v35 <= 0.0)
    {
      v49.f64[0] = NAN;
      v49.f64[1] = NAN;
      v34 = (float64x2_t)vbslq_s8((int8x16_t)vnegq_f64(v49), (int8x16_t)vdupq_n_s64(0x4137D78400000000uLL), (int8x16_t)v34);
      v36 = 1;
    }
    else
    {
      v36 = 0;
      if (v35 != 1.0)
        v34 = vdivq_f64(v34, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v35, 0));
    }
    v37 = a2->var3.m_x;
    v38 = a2->var3.m_y;
    v39 = -(v12 + v7 * v38 + v10 * v37) / v4;
    v40 = vaddq_f64(v21, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v15, v38), v14, v37), v16, v39));
    v41 = v11 + v8 * v38 + v37 * v9 + v39 * v19;
    if (v41 <= 0.0)
    {
      v50.f64[0] = NAN;
      v50.f64[1] = NAN;
      v40 = (float64x2_t)vbslq_s8((int8x16_t)vnegq_f64(v50), (int8x16_t)vdupq_n_s64(0x4137D78400000000uLL), (int8x16_t)v40);
      v42 = 1;
    }
    else
    {
      v42 = 0;
      if (v41 != 1.0)
        v40 = vdivq_f64(v40, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v41, 0));
    }
    result = vcvt_f32_f64(v22);
    v44 = vcvt_f32_f64(v28);
    v45 = vcvt_f32_f64(v34);
    v46 = vcvt_f32_f64(v40);
  }
  if (a3)
    *a3 = v24 | v36 | v30 | v42;
  if (v24 && v36 && v30 && v42)
  {
    result = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  else
  {
    *(float32x2_t *)a4 = result;
    *(float32x2_t *)(a4 + 8) = v44;
    *(float32x2_t *)(a4 + 16) = v45;
    *(float32x2_t *)(a4 + 24) = v46;
  }
  return result;
}

double *WebCore::TransformationMatrix::inverse@<X0>(double *this@<X0>, double (*a2)[4][4]@<X2>, uint64_t a3@<X8>)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  double v19[4][4];

  if (this[2] == 0.0
    && this[3] == 0.0
    && this[6] == 0.0
    && this[7] == 0.0
    && this[11] == 0.0
    && this[8] == 0.0
    && this[9] == 0.0
    && this[10] == 1.0
    && this[15] == 1.0)
  {
    v3 = this[1];
    if (v3 == 0.0 && this[4] == 0.0 && *this == 1.0 && this[5] == 1.0)
    {
      v10 = this[12];
      v11 = this[13];
      v12 = this[14];
      if (v10 == 0.0 && v11 == 0.0 && v12 == 0.0)
      {
        *(_OWORD *)(a3 + 64) = xmmword_1969F8F50;
        *(_OWORD *)(a3 + 80) = *(_OWORD *)&qword_1969F8F60;
        *(_OWORD *)(a3 + 96) = xmmword_1969F8F70;
        *(_OWORD *)(a3 + 112) = unk_1969F8F80;
        *(_OWORD *)a3 = constinit_5;
        *(_OWORD *)(a3 + 16) = unk_1969F8F20;
        *(_OWORD *)(a3 + 32) = xmmword_1969F8F30;
        *(_OWORD *)(a3 + 48) = unk_1969F8F40;
      }
      else
      {
        *(_QWORD *)a3 = 0x3FF0000000000000;
        *(_OWORD *)(a3 + 8) = 0u;
        *(_OWORD *)(a3 + 24) = 0u;
        *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
        *(_OWORD *)(a3 + 48) = 0u;
        *(_OWORD *)(a3 + 64) = 0u;
        *(_OWORD *)(a3 + 80) = xmmword_1968A14B0;
        *(double *)(a3 + 96) = -v10;
        *(double *)(a3 + 104) = -v11;
        *(double *)(a3 + 112) = -v12;
        *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
      }
LABEL_14:
      *(_BYTE *)(a3 + 128) = 1;
      return this;
    }
    if (this[14] == 0.0)
    {
      v4 = *this;
      v5 = this[4];
      v6 = this[5];
      if ((unint64_t)(COERCE__INT64(fabs(*this * v6 - v3 * v5)) - 0x10000000000000) >> 53 >= 0x3FF)
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 128) = 0;
        return this;
      }
      v8 = this[12];
      v7 = this[13];
      v9 = 1.0 / (*this * v6 - v3 * v5);
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      *(double *)a3 = v6 * v9;
      *(double *)(a3 + 8) = v9 * -v3;
      *(double *)(a3 + 32) = -(v5 * v9);
      *(double *)(a3 + 40) = v4 * v9;
      *(_OWORD *)(a3 + 64) = constinit_39;
      *(_OWORD *)(a3 + 80) = unk_1969F8FA0;
      *(double *)(a3 + 96) = v9 * (v5 * v7 - v6 * v8);
      *(double *)(a3 + 104) = v9 * (v3 * v8 - v4 * v7);
      *(_OWORD *)(a3 + 112) = xmmword_1968A14C0;
      goto LABEL_14;
    }
  }
  *(_OWORD *)&v19[2][0] = xmmword_1969F8F50;
  *(_OWORD *)&v19[2][2] = *(_OWORD *)&qword_1969F8F60;
  *(_OWORD *)&v19[3][0] = xmmword_1969F8F70;
  *(_OWORD *)&v19[3][2] = unk_1969F8F80;
  *(_OWORD *)&v19[0][0] = constinit_5;
  *(_OWORD *)&v19[0][2] = unk_1969F8F20;
  *(_OWORD *)&v19[1][0] = xmmword_1969F8F30;
  *(_OWORD *)&v19[1][2] = unk_1969F8F40;
  this = (double *)WebCore::inverse((WebCore *)this, (const double (*)[4][4])v19, a2);
  if ((this & 1) != 0)
  {
    v13 = *(_OWORD *)&v19[2][2];
    *(_OWORD *)(a3 + 64) = *(_OWORD *)&v19[2][0];
    *(_OWORD *)(a3 + 80) = v13;
    v14 = *(_OWORD *)&v19[3][2];
    *(_OWORD *)(a3 + 96) = *(_OWORD *)&v19[3][0];
    *(_OWORD *)(a3 + 112) = v14;
    v15 = *(_OWORD *)&v19[0][2];
    *(_OWORD *)a3 = *(_OWORD *)&v19[0][0];
    *(_OWORD *)(a3 + 16) = v15;
    v16 = *(_OWORD *)&v19[1][2];
    v17 = 1;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&v19[1][0];
    *(_OWORD *)(a3 + 48) = v16;
  }
  else
  {
    v17 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 128) = v17;
  return this;
}

float32x2_t WebCore::TransformationMatrix::mapPoint(float64x2_t *this, float32x2_t *a2)
{
  float64x2_t v2;
  double v4;
  double v5;
  float64x2_t v6;
  double v7;

  v2 = *this;
  if (this->f64[0] == 1.0
    && v2.f64[1] == 0.0
    && this[1].f64[0] == 0.0
    && this[1].f64[1] == 0.0
    && this[2].f64[0] == 0.0
    && this[2].f64[1] == 1.0
    && this[3].f64[0] == 0.0
    && this[3].f64[1] == 0.0
    && this[4].f64[0] == 0.0
    && this[4].f64[1] == 0.0
    && this[5].f64[0] == 1.0
    && this[5].f64[1] == 0.0
    && this[7].f64[1] == 1.0)
  {
    return vadd_f32(*a2, vcvt_f32_f64(this[6]));
  }
  else
  {
    v4 = a2->f32[0];
    v5 = a2->f32[1];
    v6 = vmlaq_n_f64(vmlaq_n_f64(this[6], v2, v4), this[2], v5);
    v7 = this[7].f64[1] + v4 * this[1].f64[1] + v5 * this[3].f64[1];
    if (v7 != 1.0 && v7 != 0.0)
      v6 = vdivq_f64(v6, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v7, 0));
    return vcvt_f32_f64(v6);
  }
}

float32_t WebCore::TransformationMatrix::mapQuad@<S0>(float64x2_t *this@<X0>, const FloatQuad *a2@<X1>, float32x4_t *a3@<X8>)
{
  double v3;
  double v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  double m_x;
  double m_y;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  float32_t v22;
  float32_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  float32_t v29;
  float32_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  float32_t v36;
  float32_t v37;
  double v38;
  double v39;
  double v40;
  double v41;
  float32_t v42;

  v4 = this->f64[0];
  v3 = this->f64[1];
  if (this->f64[0] == 1.0
    && v3 == 0.0
    && this[1].f64[0] == 0.0
    && this[1].f64[1] == 0.0
    && this[2].f64[0] == 0.0
    && this[2].f64[1] == 1.0
    && this[3].f64[0] == 0.0
    && this[3].f64[1] == 0.0
    && this[4].f64[0] == 0.0
    && this[4].f64[1] == 0.0
    && this[5].f64[0] == 1.0
    && this[5].f64[1] == 0.0
    && this[7].f64[1] == 1.0)
  {
    v5 = *(float32x4_t *)&a2->var2.m_x;
    *a3 = *(float32x4_t *)&a2->var0.m_x;
    a3[1] = v5;
    v6 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(this[6]), this[6]);
    v7 = vaddq_f32(*a3, v6);
    v8 = vaddq_f32(a3[1], v6);
    *a3 = v7;
    a3[1] = v8;
  }
  else
  {
    m_x = a2->var0.m_x;
    m_y = a2->var0.m_y;
    v11 = this[6].f64[0];
    v12 = this[6].f64[1];
    v14 = this[1].f64[1];
    v13 = this[2].f64[0];
    v15 = v11 + m_x * v4 + m_y * v13;
    v16 = this[2].f64[1];
    v17 = v12 + m_x * v3 + m_y * v16;
    v18 = this[7].f64[1];
    v19 = v18 + m_x * v14;
    v20 = this[3].f64[1];
    v21 = v19 + m_y * v20;
    if (v21 != 1.0 && v21 != 0.0)
    {
      v15 = v15 / v21;
      v17 = v17 / v21;
    }
    v22 = v15;
    v23 = v17;
    a3->f32[0] = v22;
    a3->f32[1] = v23;
    v24 = a2->var1.m_x;
    v25 = a2->var1.m_y;
    v26 = v11 + v24 * v4 + v25 * v13;
    v27 = v12 + v24 * v3 + v25 * v16;
    v28 = v18 + v24 * v14 + v25 * v20;
    if (v28 != 1.0 && v28 != 0.0)
    {
      v26 = v26 / v28;
      v27 = v27 / v28;
    }
    v29 = v26;
    v30 = v27;
    a3->f32[2] = v29;
    a3->f32[3] = v30;
    v31 = a2->var2.m_x;
    v32 = a2->var2.m_y;
    v33 = v11 + v31 * v4 + v32 * v13;
    v34 = v12 + v31 * v3 + v32 * v16;
    v35 = v18 + v31 * v14 + v32 * v20;
    if (v35 != 1.0 && v35 != 0.0)
    {
      v33 = v33 / v35;
      v34 = v34 / v35;
    }
    v36 = v33;
    v37 = v34;
    a3[1].f32[0] = v36;
    a3[1].f32[1] = v37;
    v38 = a2->var3.m_x;
    v39 = a2->var3.m_y;
    v40 = v11 + v38 * v4 + v39 * v13;
    *(double *)v7.i64 = v12 + v38 * v3 + v39 * v16;
    v41 = v18 + v38 * v14 + v39 * v20;
    if (v41 != 1.0 && v41 != 0.0)
    {
      v40 = v40 / v41;
      *(double *)v7.i64 = *(double *)v7.i64 / v41;
    }
    v42 = v40;
    v7.f32[0] = *(double *)v7.i64;
    a3[1].f32[2] = v42;
    a3[1].i32[3] = v7.i32[0];
  }
  return v7.f32[0];
}

CFTypeRef WebCore::ScrollingStateFrameScrollingNode::setContentShadowLayer(CFTypeRef this, const WebCore::LayerRepresentation *a2)
{
  CFTypeRef v3;
  int v4;
  uint64_t v5;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = this;
  v4 = *((_DWORD *)a2 + 8);
  if (v4 != *((_DWORD *)this + 172))
    goto LABEL_8;
  if (v4 != 1)
  {
    if (v4 == 2)
    {
      v10 = *((_QWORD *)a2 + 1);
      v11 = *((_QWORD *)this + 83);
      goto LABEL_23;
    }
    if (v4 != 3)
      return this;
    if (*((_QWORD *)a2 + 2) == *((_QWORD *)this + 84))
    {
      v10 = *((_QWORD *)a2 + 3);
      v11 = *((_QWORD *)this + 85);
LABEL_23:
      if (v10 == v11)
        return this;
    }
LABEL_8:
    v5 = *(_QWORD *)a2;
    goto LABEL_9;
  }
  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == *((_QWORD *)this + 82))
  {
    if (*((_QWORD *)a2 + 2) == *((_QWORD *)this + 84) && *((_QWORD *)a2 + 3) == *((_QWORD *)this + 85))
      return this;
    goto LABEL_8;
  }
LABEL_9:
  if (v5)
    ++*(_DWORD *)(v5 + 8);
  v7 = (_DWORD *)*((_QWORD *)this + 82);
  *((_QWORD *)v3 + 82) = v5;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[2];
  }
  this = (CFTypeRef)*((_QWORD *)a2 + 1);
  *((_QWORD *)v3 + 83) = this;
  *((_OWORD *)v3 + 42) = *((_OWORD *)a2 + 1);
  v8 = *((_DWORD *)a2 + 8);
  *((_DWORD *)v3 + 172) = v8;
  if (v8 == 2)
    this = WebCore::LayerRepresentation::retainPlatformLayer(this, a2);
  v9 = *((_QWORD *)v3 + 5);
  if ((v9 & 0x8000000) == 0)
  {
    *((_QWORD *)v3 + 5) = v9 | 0x8000000;
    return (CFTypeRef)WebCore::ScrollingStateTree::setHasChangedProperties(*((WebCore::ScrollingStateTree **)v3 + 6), 1);
  }
  return this;
}

CFTypeRef WebCore::ScrollingStateFrameScrollingNode::setFooterLayer(CFTypeRef this, const WebCore::LayerRepresentation *a2)
{
  CFTypeRef v3;
  int v4;
  uint64_t v5;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = this;
  v4 = *((_DWORD *)a2 + 8);
  if (v4 != *((_DWORD *)this + 192))
    goto LABEL_8;
  if (v4 != 1)
  {
    if (v4 == 2)
    {
      v10 = *((_QWORD *)a2 + 1);
      v11 = *((_QWORD *)this + 93);
      goto LABEL_23;
    }
    if (v4 != 3)
      return this;
    if (*((_QWORD *)a2 + 2) == *((_QWORD *)this + 94))
    {
      v10 = *((_QWORD *)a2 + 3);
      v11 = *((_QWORD *)this + 95);
LABEL_23:
      if (v10 == v11)
        return this;
    }
LABEL_8:
    v5 = *(_QWORD *)a2;
    goto LABEL_9;
  }
  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == *((_QWORD *)this + 92))
  {
    if (*((_QWORD *)a2 + 2) == *((_QWORD *)this + 94) && *((_QWORD *)a2 + 3) == *((_QWORD *)this + 95))
      return this;
    goto LABEL_8;
  }
LABEL_9:
  if (v5)
    ++*(_DWORD *)(v5 + 8);
  v7 = (_DWORD *)*((_QWORD *)this + 92);
  *((_QWORD *)v3 + 92) = v5;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[2];
  }
  this = (CFTypeRef)*((_QWORD *)a2 + 1);
  *((_QWORD *)v3 + 93) = this;
  *((_OWORD *)v3 + 47) = *((_OWORD *)a2 + 1);
  v8 = *((_DWORD *)a2 + 8);
  *((_DWORD *)v3 + 192) = v8;
  if (v8 == 2)
    this = WebCore::LayerRepresentation::retainPlatformLayer(this, a2);
  v9 = *((_QWORD *)v3 + 5);
  if ((v9 & 0x40000000000) == 0)
  {
    *((_QWORD *)v3 + 5) = v9 | 0x40000000000;
    return (CFTypeRef)WebCore::ScrollingStateTree::setHasChangedProperties(*((WebCore::ScrollingStateTree **)v3 + 6), 1);
  }
  return this;
}

void WebCore::RunLoopObserver::invalidate(WebCore::RunLoopObserver *this)
{
  __CFRunLoopObserver *v2;
  const void *v3;

  v2 = (__CFRunLoopObserver *)*((_QWORD *)this + 2);
  if (v2)
  {
    CFRunLoopObserverInvalidate(v2);
    v3 = (const void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v3)
      CFRelease(v3);
  }
}

uint64_t WebCore::Page::setImageAnimationEnabled(uint64_t this, uint64_t a2)
{
  uint64_t v3;

  if ((*(_QWORD *)(*(_QWORD *)(this + 112) + 704) & 0x8000000000) != 0)
  {
    v3 = this;
    *(_BYTE *)(this + 545) = a2;
    WebCore::Page::updatePlayStateForAllAnimations(*(_QWORD *)(this + 160));
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v3 + 48) + 16) + 1448))(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 16), a2);
  }
  return this;
}

uint64_t WebCore::LocalFrameView::updatePlayStateForAllAnimationsIncludingSubframes(WebCore::LocalFrameView *this)
{
  uint64_t v2;
  uint64_t v4;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = off_1E33FFA08;
  v4 = v2;
  WebCore::LocalFrameView::applyRecursivelyWithVisibleRect(this, &v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WebCore::ContentSecurityPolicyDirectiveList::addDirective(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  size_t v5;
  unint64_t v6;
  size_t v7;
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  size_t v15;
  size_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  size_t v20;
  uint64_t result;
  unsigned __int8 *v22;
  size_t v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  unsigned __int8 *v27;
  unint64_t v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  unsigned __int8 *v32;
  unint64_t v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  unsigned __int8 *v37;
  unint64_t v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  unsigned __int8 *v42;
  unint64_t v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  int v47;
  _WORD *v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  int v52;
  int v53;
  unsigned __int8 *v54;
  unint64_t v55;
  unsigned __int8 *v56;
  int v57;
  int v58;
  uint64_t v59;
  _QWORD *v60;
  __n128 v61;
  WebCore::ContentSecurityPolicy *v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  unsigned __int8 *v65;
  unint64_t v66;
  unsigned __int8 *v67;
  int v68;
  int v69;
  uint64_t v70;
  _QWORD *v71;
  __n128 v72;
  WebCore::ContentSecurityPolicy *v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  unsigned __int8 *v76;
  unint64_t v77;
  unsigned __int8 *v78;
  int v79;
  int v80;
  uint64_t v81;
  _QWORD *v82;
  __n128 v83;
  WebCore::ContentSecurityPolicy *v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  unsigned __int8 *v87;
  unint64_t v88;
  unsigned __int8 *v89;
  int v90;
  int v91;
  uint64_t v92;
  _QWORD *v93;
  __n128 v94;
  WebCore::ContentSecurityPolicy *v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  unsigned __int8 *v98;
  unint64_t v99;
  unsigned __int8 *v100;
  int v101;
  int v102;
  uint64_t v103;
  _QWORD *v104;
  __n128 v105;
  WebCore::ContentSecurityPolicy *v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  unsigned __int8 *v109;
  unint64_t v110;
  unsigned __int8 *v111;
  int v112;
  int v113;
  uint64_t v114;
  _QWORD *v115;
  __n128 v116;
  WebCore::ContentSecurityPolicy *v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  unsigned __int8 *v120;
  unint64_t v121;
  unsigned __int8 *v122;
  int v123;
  int v124;
  uint64_t v125;
  _QWORD *v126;
  __n128 v127;
  WebCore::ContentSecurityPolicy *v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  unsigned __int8 *v131;
  unint64_t v132;
  unsigned __int8 *v133;
  int v134;
  int v135;
  uint64_t v136;
  _QWORD *v137;
  __n128 v138;
  WebCore::ContentSecurityPolicy *v139;
  uint64_t v140;
  WTF::StringImpl *v141;
  unsigned __int8 *v142;
  unint64_t v143;
  unsigned __int8 *v144;
  int v145;
  int v146;
  uint64_t v147;
  _QWORD *v148;
  __n128 v149;
  WebCore::ContentSecurityPolicy *v150;
  uint64_t v151;
  WTF::StringImpl *v152;
  unsigned __int8 *v153;
  unint64_t v154;
  unsigned __int8 *v155;
  int v156;
  int v157;
  uint64_t v158;
  _QWORD *v159;
  __n128 v160;
  WebCore::ContentSecurityPolicy *v161;
  uint64_t v162;
  WTF::StringImpl *v163;
  unsigned __int8 *v164;
  unint64_t v165;
  unsigned __int8 *v166;
  int v167;
  int v168;
  uint64_t v169;
  _QWORD *v170;
  __n128 v171;
  WebCore::ContentSecurityPolicy *v172;
  uint64_t v173;
  WTF::StringImpl *v174;
  unsigned __int8 *v175;
  unint64_t v176;
  unsigned __int8 *v177;
  int v178;
  int v179;
  uint64_t v180;
  _QWORD *v181;
  __n128 v182;
  WebCore::ContentSecurityPolicy *v183;
  uint64_t v184;
  WTF::StringImpl *v185;
  unsigned __int8 *v186;
  unint64_t v187;
  unsigned __int8 *v188;
  int v189;
  int v190;
  _QWORD *v191;
  _QWORD *v192;
  unsigned __int8 *v193;
  unint64_t v194;
  unsigned __int8 *v195;
  int v196;
  int v197;
  uint64_t v198;
  _QWORD *v199;
  __n128 v200;
  WebCore::ContentSecurityPolicy *v201;
  uint64_t v202;
  WTF::StringImpl *v203;
  unsigned __int8 *v204;
  unint64_t v205;
  unsigned __int8 *v206;
  int v207;
  int v208;
  WTF::StringImpl *v209;
  WebCore::ContentSecurityPolicy *v210;
  int8x16_t *v211;
  unint64_t v212;
  WTF::StringImpl *v213;
  WebCore::ContentSecurityPolicy *v214;
  int v215;
  WTF::StringImpl *v216;
  void (***v217)(_QWORD, uint64_t, uint64_t, _QWORD *, _QWORD);
  unsigned __int8 *v218;
  unint64_t v219;
  unsigned __int8 *v220;
  int v221;
  int v222;
  WTF::StringImpl *v223;
  uint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unsigned __int16 *v228;
  unsigned __int16 *i;
  int v230;
  unsigned __int16 *v231;
  unsigned __int16 v232;
  WTF::StringImpl *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t v238;
  unsigned __int8 *v239;
  unint64_t v240;
  unsigned __int8 *v241;
  int v242;
  int v243;
  WTF::StringImpl *v244;
  uint64_t *v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unsigned __int16 *v249;
  unsigned __int16 *j;
  int v251;
  unsigned __int16 *v252;
  unsigned __int16 v253;
  WTF::StringImpl *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  unsigned __int8 *v260;
  unint64_t v261;
  unsigned __int8 *v262;
  int v263;
  int v264;
  unsigned __int8 *v265;
  unint64_t v266;
  unsigned __int8 *v267;
  int v268;
  int v269;
  unsigned __int8 *v270;
  int v271;
  int v272;
  int v273;
  int v274;
  _QWORD *v275;
  _QWORD *v276;
  uint64_t v277;
  _QWORD *v278;
  __n128 v279;
  WebCore::ContentSecurityPolicy *v280;
  uint64_t v281;
  WTF::StringImpl *v282;
  WebCore::ContentSecurityPolicy *v283;
  uint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  __n128 v287;
  WebCore::ContentSecurityPolicy *v288;
  uint64_t v289;
  WTF::StringImpl *v290;
  WebCore::ContentSecurityPolicy *v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD *v294;
  __n128 v295;
  WebCore::ContentSecurityPolicy *v296;
  uint64_t v297;
  WTF::StringImpl *v298;
  uint64_t v299;
  _QWORD *v300;
  __n128 v301;
  WebCore::ContentSecurityPolicy *v302;
  uint64_t v303;
  WTF::StringImpl *v304;
  uint64_t v305;
  _QWORD *v306;
  __n128 v307;
  WebCore::ContentSecurityPolicy *v308;
  uint64_t v309;
  WTF::StringImpl *v310;
  WebCore::ContentSecurityPolicy *v311;
  uint64_t v312;
  uint64_t v313;
  WTF::StringImpl *v314;
  __int128 v315;
  int v316;
  uint64_t v317;
  unint64_t v318;
  int v319;
  unint64_t v320;
  char v321;
  WTF::StringImpl *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t *v326;
  uint64_t v327;
  uint64_t v328;
  int v329;
  uint64_t v330;
  unint64_t v331;
  int v332;
  unint64_t v333;
  char v334;
  WTF::StringImpl *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t *v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  char *v343;
  int v344;
  int v345;
  uint64_t v346;
  _QWORD *v347;
  __n128 v348;
  WebCore::ContentSecurityPolicy *v349;
  uint64_t v350;
  WTF::StringImpl *v351;
  const WTF::URL *v352;
  uint64_t *v353;
  uint64_t v354;
  uint64_t v355;
  WTF::StringImpl *v356;
  WTF::StringImpl *v357;
  WTF::StringImpl *v358;
  WTF *v359;
  void *v360;
  uint64_t v361;
  int v362;
  uint64_t v363;
  int v364;
  uint64_t v365;
  int v366;
  unint64_t v367;
  unint64_t v368;
  int v369;
  uint64_t v370;
  int v371;
  unint64_t v372;
  unint64_t v373;
  int v374;
  uint64_t v375;
  _QWORD *v376;
  __n128 v377;
  WebCore::ContentSecurityPolicy *v378;
  uint64_t v379;
  WTF::StringImpl *v380;
  uint64_t v381;
  int v382;
  uint64_t v383;
  int v384;
  uint64_t v385;
  int v386;
  uint64_t v387;
  int v388;
  uint64_t v389;
  int v390;
  unint64_t v391;
  unint64_t v392;
  int v393;
  uint64_t v394;
  int v395;
  uint64_t v396;
  int v397;
  unint64_t v398;
  unint64_t v399;
  int v400;
  uint64_t v401;
  int v402;
  uint64_t v403;
  int v404;
  unint64_t v405;
  unint64_t v406;
  int v407;
  uint64_t v408;
  int v409;
  unint64_t v410;
  unint64_t v411;
  int v412;
  uint64_t v413;
  int v414;
  uint64_t v415;
  int v416;
  uint64_t v417;
  int v418;
  unint64_t v419;
  unint64_t v420;
  int v421;
  unsigned __int8 *v422;
  unint64_t v423;
  unsigned __int8 *v424;
  int v425;
  int v426;
  WTF::StringImpl *v427;
  unsigned __int16 *v428;
  unint64_t v429;
  int v430;
  WTF::StringImpl *v431;
  WTF::StringImpl *v432;
  unint64_t v433;
  unint64_t v434;
  int v435;
  int v436;
  int v437;
  unint64_t v438;
  unint64_t v439;
  int v440;
  unint64_t v441;
  unint64_t v442;
  int v443;
  int v444;
  WTF::StringImpl *v445;
  WTF::StringImpl *v446;
  WebCore::ContentSecurityPolicy *v447;
  void (***v448)(_QWORD, uint64_t, uint64_t, _QWORD *, _QWORD);
  uint64_t v449;
  uint64_t v450;
  WTF::StringImpl *v451;
  WTF::StringImpl *v452;
  WTF *v453;
  void *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  int v461;
  int v462;
  int v463;
  int v464;
  int v465;
  int v466;
  WTF::StringImpl *v467;
  WTF::StringImpl *v468[3];
  WTF::StringImpl *v469;
  __int128 v470;
  __int128 v471;
  _QWORD v472[3];
  int v473;
  uint64_t v474;

  v474 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return (uint64_t)WebCore::ContentSecurityPolicy::reportUnsupportedDirective(*(WebCore::ContentSecurityPolicy **)a1, (const WTF::String *)v3);
  v4 = (WTF::StringImpl **)a2;
  if (WebCore::ContentSecurityPolicyDirectiveNames::defaultSrc)
    v5 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::defaultSrc);
  else
    v5 = 0;
  v6 = *(unsigned int *)(v3 + 4);
  if (v5 == v6)
  {
    v22 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      if (v5)
      {
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v22) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                    + *WebCore::ContentSecurityPolicyDirectiveNames::defaultSrc))
          goto LABEL_5;
        v23 = 0;
        v24 = v22 + 1;
        while (v5 - 1 != v23)
        {
          v25 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v24[v23]);
          v26 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                   + WebCore::ContentSecurityPolicyDirectiveNames::defaultSrc[++v23]);
          if (v25 != v26)
            goto LABEL_70;
        }
      }
    }
    else if (v5)
    {
      if ((*(unsigned __int16 *)v22 | (32 * (*(unsigned __int16 *)v22 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::defaultSrc))
        goto LABEL_5;
      v361 = 1;
      do
      {
        v23 = v361;
        if (v5 == v361)
          break;
        v362 = *(unsigned __int16 *)&v22[2 * v361] | (32
                                                    * (*(unsigned __int16 *)&v22[2 * v361] - 65 < 0x1A));
        ++v361;
      }
      while (v362 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                         + WebCore::ContentSecurityPolicyDirectiveNames::defaultSrc[v23]));
LABEL_70:
      if (v23 < v5)
        goto LABEL_5;
    }
    if (*(_QWORD *)(a1 + 56))
    {
      result = WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
    }
    else
    {
      v277 = WTF::fastMalloc((WTF *)0x80);
      v278 = WebCore::ContentSecurityPolicyDirective::ContentSecurityPolicyDirective((_QWORD *)v277, (const WebCore::ContentSecurityPolicyDirectiveList *)a1, v4, (const WTF::String *)(v4 + 1));
      *v278 = off_1E34036C8;
      v278[4] = 0;
      v280 = *(WebCore::ContentSecurityPolicy **)a1;
      v278[5] = *(_QWORD *)a1;
      v281 = (uint64_t)(v278 + 5);
      *(_QWORD *)(v277 + 88) = 0;
      *(_BYTE *)(v277 + 96) = 0;
      *(_OWORD *)(v277 + 48) = 0u;
      *(_OWORD *)(v277 + 64) = 0u;
      *(_QWORD *)(v277 + 77) = 0;
      v282 = *v4;
      if (*v4)
        *(_DWORD *)v282 += 2;
      *(_QWORD *)(v277 + 104) = v282;
      *(_BYTE *)(v277 + 112) = *((_BYTE *)v280 + 233);
      *(_BYTE *)(v277 + 121) = 0;
      *(_QWORD *)(v277 + 113) = 0;
      WebCore::ContentSecurityPolicySourceList::parse(v281, (const WTF::String *)(v4 + 1), 0.0, v279);
      result = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 56) = v277;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    v283 = *(WebCore::ContentSecurityPolicy **)a1;
    v284 = *(_QWORD *)(a1 + 56);
    *(_BYTE *)(*(_QWORD *)a1 + 188) |= *(_BYTE *)(v284 + 96);
    goto LABEL_605;
  }
LABEL_5:
  if (WebCore::ContentSecurityPolicyDirectiveNames::scriptSrc)
    v7 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::scriptSrc);
  else
    v7 = 0;
  if (v7 != v6)
    goto LABEL_8;
  v27 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if ((_DWORD)v6)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v27) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                  + *WebCore::ContentSecurityPolicyDirectiveNames::scriptSrc))
        goto LABEL_8;
      v28 = 0;
      v29 = v27 + 1;
      while (v6 - 1 != v28)
      {
        v30 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v29[v28]);
        v31 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                 + WebCore::ContentSecurityPolicyDirectiveNames::scriptSrc[++v28]);
        if (v30 != v31)
          goto LABEL_79;
      }
    }
LABEL_80:
    if (*(_QWORD *)(a1 + 136))
    {
      result = WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
    }
    else
    {
      v285 = WTF::fastMalloc((WTF *)0x80);
      v286 = WebCore::ContentSecurityPolicyDirective::ContentSecurityPolicyDirective((_QWORD *)v285, (const WebCore::ContentSecurityPolicyDirectiveList *)a1, v4, (const WTF::String *)(v4 + 1));
      *v286 = off_1E34036C8;
      v286[4] = 0;
      v288 = *(WebCore::ContentSecurityPolicy **)a1;
      v286[5] = *(_QWORD *)a1;
      v289 = (uint64_t)(v286 + 5);
      *(_QWORD *)(v285 + 88) = 0;
      *(_BYTE *)(v285 + 96) = 0;
      *(_OWORD *)(v285 + 48) = 0u;
      *(_OWORD *)(v285 + 64) = 0u;
      *(_QWORD *)(v285 + 77) = 0;
      v290 = *v4;
      if (*v4)
        *(_DWORD *)v290 += 2;
      *(_QWORD *)(v285 + 104) = v290;
      *(_BYTE *)(v285 + 112) = *((_BYTE *)v288 + 233);
      *(_BYTE *)(v285 + 121) = 0;
      *(_QWORD *)(v285 + 113) = 0;
      WebCore::ContentSecurityPolicySourceList::parse(v289, (const WTF::String *)(v4 + 1), 0.0, v287);
      result = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v285;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    v291 = *(WebCore::ContentSecurityPolicy **)a1;
    v292 = *(_QWORD *)(a1 + 136);
    goto LABEL_432;
  }
  if (!(_DWORD)v6)
    goto LABEL_80;
  if ((*(unsigned __int16 *)v27 | (32 * (*(unsigned __int16 *)v27 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::scriptSrc))
  {
    v363 = 1;
    do
    {
      v28 = v363;
      if (v6 == v363)
        break;
      v364 = *(unsigned __int16 *)&v27[2 * v363] | (32 * (*(unsigned __int16 *)&v27[2 * v363] - 65 < 0x1A));
      ++v363;
    }
    while (v364 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                       + WebCore::ContentSecurityPolicyDirectiveNames::scriptSrc[v28]));
LABEL_79:
    if (v28 >= v6)
      goto LABEL_80;
  }
LABEL_8:
  if (WebCore::ContentSecurityPolicyDirectiveNames::scriptSrcElem)
    v8 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::scriptSrcElem);
  else
    v8 = 0;
  if (v8 != v6)
    goto LABEL_11;
  v32 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if ((_DWORD)v6)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v32) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                  + *WebCore::ContentSecurityPolicyDirectiveNames::scriptSrcElem))
        goto LABEL_11;
      v33 = 0;
      v34 = v32 + 1;
      while (v6 - 1 != v33)
      {
        v35 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v34[v33]);
        v36 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                 + WebCore::ContentSecurityPolicyDirectiveNames::scriptSrcElem[++v33]);
        if (v35 != v36)
          goto LABEL_88;
      }
    }
LABEL_89:
    if (*(_QWORD *)(a1 + 152))
    {
      result = WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
    }
    else
    {
      v293 = WTF::fastMalloc((WTF *)0x80);
      v294 = WebCore::ContentSecurityPolicyDirective::ContentSecurityPolicyDirective((_QWORD *)v293, (const WebCore::ContentSecurityPolicyDirectiveList *)a1, v4, (const WTF::String *)(v4 + 1));
      *v294 = off_1E34036C8;
      v294[4] = 0;
      v296 = *(WebCore::ContentSecurityPolicy **)a1;
      v294[5] = *(_QWORD *)a1;
      v297 = (uint64_t)(v294 + 5);
      *(_QWORD *)(v293 + 88) = 0;
      *(_BYTE *)(v293 + 96) = 0;
      *(_OWORD *)(v293 + 48) = 0u;
      *(_OWORD *)(v293 + 64) = 0u;
      *(_QWORD *)(v293 + 77) = 0;
      v298 = *v4;
      if (*v4)
        *(_DWORD *)v298 += 2;
      *(_QWORD *)(v293 + 104) = v298;
      *(_BYTE *)(v293 + 112) = *((_BYTE *)v296 + 233);
      *(_BYTE *)(v293 + 121) = 0;
      *(_QWORD *)(v293 + 113) = 0;
      WebCore::ContentSecurityPolicySourceList::parse(v297, (const WTF::String *)(v4 + 1), 0.0, v295);
      result = *(_QWORD *)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v293;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    v291 = *(WebCore::ContentSecurityPolicy **)a1;
    v292 = *(_QWORD *)(a1 + 152);
    goto LABEL_432;
  }
  if (!(_DWORD)v6)
    goto LABEL_89;
  if ((*(unsigned __int16 *)v32 | (32 * (*(unsigned __int16 *)v32 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::scriptSrcElem))
  {
    v365 = 1;
    do
    {
      v33 = v365;
      if (v6 == v365)
        break;
      v366 = *(unsigned __int16 *)&v32[2 * v365] | (32 * (*(unsigned __int16 *)&v32[2 * v365] - 65 < 0x1A));
      ++v365;
    }
    while (v366 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                       + WebCore::ContentSecurityPolicyDirectiveNames::scriptSrcElem[v33]));
LABEL_88:
    if (v33 >= v6)
      goto LABEL_89;
  }
LABEL_11:
  if ((_DWORD)v6 != 15)
    goto LABEL_12;
  v37 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v37) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
    {
      v38 = 0;
      v39 = v37 + 1;
      while (v6 - 1 != v38)
      {
        v40 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v39[v38]);
        v41 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aScriptSrcAttr[++v38]);
        if (v40 != v41)
        {
          if (v38 < v6)
            goto LABEL_12;
          goto LABEL_97;
        }
      }
      goto LABEL_97;
    }
  }
  else if ((*(unsigned __int16 *)v37 | (32 * (*(unsigned __int16 *)v37 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
  {
    v367 = 1u;
    do
    {
      v368 = v367;
      if (v6 == v367)
        break;
      v369 = *(unsigned __int16 *)&v37[2 * v367] | (32 * (*(unsigned __int16 *)&v37[2 * v367] - 65 < 0x1A));
      ++v367;
    }
    while (v369 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aScriptSrcAttr[v368]));
    if (v368 >= v6)
    {
LABEL_97:
      if (*(_QWORD *)(a1 + 160))
      {
        result = WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
      }
      else
      {
        v299 = WTF::fastMalloc((WTF *)0x80);
        v300 = WebCore::ContentSecurityPolicyDirective::ContentSecurityPolicyDirective((_QWORD *)v299, (const WebCore::ContentSecurityPolicyDirectiveList *)a1, v4, (const WTF::String *)(v4 + 1));
        *v300 = off_1E34036C8;
        v300[4] = 0;
        v302 = *(WebCore::ContentSecurityPolicy **)a1;
        v300[5] = *(_QWORD *)a1;
        v303 = (uint64_t)(v300 + 5);
        *(_QWORD *)(v299 + 88) = 0;
        *(_BYTE *)(v299 + 96) = 0;
        *(_OWORD *)(v299 + 48) = 0u;
        *(_OWORD *)(v299 + 64) = 0u;
        *(_QWORD *)(v299 + 77) = 0;
        v304 = *v4;
        if (*v4)
          *(_DWORD *)v304 += 2;
        *(_QWORD *)(v299 + 104) = v304;
        *(_BYTE *)(v299 + 112) = *((_BYTE *)v302 + 233);
        *(_BYTE *)(v299 + 121) = 0;
        *(_QWORD *)(v299 + 113) = 0;
        WebCore::ContentSecurityPolicySourceList::parse(v303, (const WTF::String *)(v4 + 1), 0.0, v301);
        result = *(_QWORD *)(a1 + 160);
        *(_QWORD *)(a1 + 160) = v299;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      v291 = *(WebCore::ContentSecurityPolicy **)a1;
      v292 = *(_QWORD *)(a1 + 160);
LABEL_432:
      *((_BYTE *)v291 + 188) |= *(_BYTE *)(v292 + 96);
      return result;
    }
  }
LABEL_12:
  if (WebCore::ContentSecurityPolicyDirectiveNames::styleSrc)
    v9 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::styleSrc);
  else
    v9 = 0;
  if (v9 != v6)
    goto LABEL_15;
  v42 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if ((_DWORD)v6)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v42) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                  + *WebCore::ContentSecurityPolicyDirectiveNames::styleSrc))
        goto LABEL_15;
      v43 = 0;
      v44 = v42 + 1;
      while (v6 - 1 != v43)
      {
        v45 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v44[v43]);
        v46 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                 + WebCore::ContentSecurityPolicyDirectiveNames::styleSrc[++v43]);
        if (v45 != v46)
          goto LABEL_105;
      }
    }
LABEL_106:
    if (*(_QWORD *)(a1 + 144))
    {
      result = WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
    }
    else
    {
      v305 = WTF::fastMalloc((WTF *)0x80);
      v306 = WebCore::ContentSecurityPolicyDirective::ContentSecurityPolicyDirective((_QWORD *)v305, (const WebCore::ContentSecurityPolicyDirectiveList *)a1, v4, (const WTF::String *)(v4 + 1));
      *v306 = off_1E34036C8;
      v306[4] = 0;
      v308 = *(WebCore::ContentSecurityPolicy **)a1;
      v306[5] = *(_QWORD *)a1;
      v309 = (uint64_t)(v306 + 5);
      *(_QWORD *)(v305 + 88) = 0;
      *(_BYTE *)(v305 + 96) = 0;
      *(_OWORD *)(v305 + 48) = 0u;
      *(_OWORD *)(v305 + 64) = 0u;
      *(_QWORD *)(v305 + 77) = 0;
      v310 = *v4;
      if (*v4)
        *(_DWORD *)v310 += 2;
      *(_QWORD *)(v305 + 104) = v310;
      *(_BYTE *)(v305 + 112) = *((_BYTE *)v308 + 233);
      *(_BYTE *)(v305 + 121) = 0;
      *(_QWORD *)(v305 + 113) = 0;
      WebCore::ContentSecurityPolicySourceList::parse(v309, (const WTF::String *)(v4 + 1), 0.0, v307);
      result = *(_QWORD *)(a1 + 144);
      *(_QWORD *)(a1 + 144) = v305;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    v283 = *(WebCore::ContentSecurityPolicy **)a1;
    v284 = *(_QWORD *)(a1 + 144);
    goto LABEL_605;
  }
  if (!(_DWORD)v6)
    goto LABEL_106;
  if ((*(unsigned __int16 *)v42 | (32 * (*(unsigned __int16 *)v42 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::styleSrc))
  {
    v370 = 1;
    do
    {
      v43 = v370;
      if (v6 == v370)
        break;
      v371 = *(unsigned __int16 *)&v42[2 * v370] | (32 * (*(unsigned __int16 *)&v42[2 * v370] - 65 < 0x1A));
      ++v370;
    }
    while (v371 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                       + WebCore::ContentSecurityPolicyDirectiveNames::styleSrc[v43]));
LABEL_105:
    if (v43 >= v6)
      goto LABEL_106;
  }
LABEL_15:
  if ((_DWORD)v6 != 14)
    goto LABEL_16;
  v47 = *(_DWORD *)(v3 + 16);
  v48 = *(_WORD **)(v3 + 8);
  if ((v47 & 4) != 0)
  {
    v49 = *(unsigned __int8 *)v48;
    v50 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v49);
    if (v50 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
    {
      v51 = 0;
      while (v6 - 1 != v51)
      {
        v52 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v48 + v51 + 1));
        v53 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aStyleSrcElem[++v51]);
        if (v52 != v53)
        {
          if (v51 >= v6)
            goto LABEL_598;
          goto LABEL_114;
        }
      }
      goto LABEL_598;
    }
    v50 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115);
    goto LABEL_523;
  }
  LODWORD(v49) = (unsigned __int16)*v48;
  v50 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115);
  if ((v49 | (32 * ((v49 - 65) < 0x1A))) == v50)
  {
    v372 = 1u;
    do
    {
      v373 = v372;
      if (v6 == v372)
        break;
      v374 = (unsigned __int16)v48[v372] | (32 * ((unsigned __int16)v48[v372] - 65 < 0x1A));
      ++v372;
    }
    while (v374 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aStyleSrcElem[v373]));
    if (v373 >= v6)
    {
LABEL_598:
      if (*(_QWORD *)(a1 + 168))
      {
        result = WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
      }
      else
      {
        v375 = WTF::fastMalloc((WTF *)0x80);
        v376 = WebCore::ContentSecurityPolicyDirective::ContentSecurityPolicyDirective((_QWORD *)v375, (const WebCore::ContentSecurityPolicyDirectiveList *)a1, v4, (const WTF::String *)(v4 + 1));
        *v376 = off_1E34036C8;
        v376[4] = 0;
        v378 = *(WebCore::ContentSecurityPolicy **)a1;
        v376[5] = *(_QWORD *)a1;
        v379 = (uint64_t)(v376 + 5);
        *(_QWORD *)(v375 + 88) = 0;
        *(_BYTE *)(v375 + 96) = 0;
        *(_OWORD *)(v375 + 48) = 0u;
        *(_OWORD *)(v375 + 64) = 0u;
        *(_QWORD *)(v375 + 77) = 0;
        v380 = *v4;
        if (*v4)
          *(_DWORD *)v380 += 2;
        *(_QWORD *)(v375 + 104) = v380;
        *(_BYTE *)(v375 + 112) = *((_BYTE *)v378 + 233);
        *(_BYTE *)(v375 + 121) = 0;
        *(_QWORD *)(v375 + 113) = 0;
        WebCore::ContentSecurityPolicySourceList::parse(v379, (const WTF::String *)(v4 + 1), 0.0, v377);
        result = *(_QWORD *)(a1 + 168);
        *(_QWORD *)(a1 + 168) = v375;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      v283 = *(WebCore::ContentSecurityPolicy **)a1;
      v284 = *(_QWORD *)(a1 + 168);
      goto LABEL_605;
    }
LABEL_114:
    if ((v47 & 4) != 0)
    {
LABEL_523:
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v49) == v50)
      {
        v342 = 0;
        v343 = (char *)v48 + 1;
        while (v6 - 1 != v342)
        {
          v344 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v343[v342]);
          v345 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aStyleSrcAttr[++v342]);
          if (v344 != v345)
          {
            if (v342 < v6)
              goto LABEL_16;
            goto LABEL_528;
          }
        }
        goto LABEL_528;
      }
      goto LABEL_16;
    }
  }
  if (v50 == (unsigned __int16)(*v48 | (32 * ((unsigned __int16)*v48 - 65 < 0x1A))))
  {
    v438 = 1u;
    do
    {
      v439 = v438;
      if (v6 == v438)
        break;
      v440 = (unsigned __int16)v48[v438] | (32 * ((unsigned __int16)v48[v438] - 65 < 0x1A));
      ++v438;
    }
    while (v440 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aStyleSrcAttr[v439]));
    if (v439 >= v6)
    {
LABEL_528:
      if (*(_QWORD *)(a1 + 176))
      {
        result = WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
      }
      else
      {
        v346 = WTF::fastMalloc((WTF *)0x80);
        v347 = WebCore::ContentSecurityPolicyDirective::ContentSecurityPolicyDirective((_QWORD *)v346, (const WebCore::ContentSecurityPolicyDirectiveList *)a1, v4, (const WTF::String *)(v4 + 1));
        *v347 = off_1E34036C8;
        v347[4] = 0;
        v349 = *(WebCore::ContentSecurityPolicy **)a1;
        v347[5] = *(_QWORD *)a1;
        v350 = (uint64_t)(v347 + 5);
        *(_QWORD *)(v346 + 88) = 0;
        *(_BYTE *)(v346 + 96) = 0;
        *(_OWORD *)(v346 + 48) = 0u;
        *(_OWORD *)(v346 + 64) = 0u;
        *(_QWORD *)(v346 + 77) = 0;
        v351 = *v4;
        if (*v4)
          *(_DWORD *)v351 += 2;
        *(_QWORD *)(v346 + 104) = v351;
        *(_BYTE *)(v346 + 112) = *((_BYTE *)v349 + 233);
        *(_BYTE *)(v346 + 121) = 0;
        *(_QWORD *)(v346 + 113) = 0;
        WebCore::ContentSecurityPolicySourceList::parse(v350, (const WTF::String *)(v4 + 1), 0.0, v348);
        result = *(_QWORD *)(a1 + 176);
        *(_QWORD *)(a1 + 176) = v346;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      v283 = *(WebCore::ContentSecurityPolicy **)a1;
      v284 = *(_QWORD *)(a1 + 176);
LABEL_605:
      *((_BYTE *)v283 + 189) |= *(_BYTE *)(v284 + 96);
      return result;
    }
  }
LABEL_16:
  if (WebCore::ContentSecurityPolicyDirectiveNames::objectSrc)
    v10 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::objectSrc);
  else
    v10 = 0;
  if (v10 != v6)
    goto LABEL_19;
  v54 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if ((_DWORD)v6)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v54) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                  + *WebCore::ContentSecurityPolicyDirectiveNames::objectSrc))
        goto LABEL_19;
      v55 = 0;
      v56 = v54 + 1;
      while (v6 - 1 != v55)
      {
        v57 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v56[v55]);
        v58 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                 + WebCore::ContentSecurityPolicyDirectiveNames::objectSrc[++v55]);
        if (v57 != v58)
          goto LABEL_122;
      }
    }
LABEL_123:
    if (!*(_QWORD *)(a1 + 120))
    {
      v59 = WTF::fastMalloc((WTF *)0x80);
      v60 = WebCore::ContentSecurityPolicyDirective::ContentSecurityPolicyDirective((_QWORD *)v59, (const WebCore::ContentSecurityPolicyDirectiveList *)a1, v4, (const WTF::String *)(v4 + 1));
      *v60 = off_1E34036C8;
      v60[4] = 0;
      v62 = *(WebCore::ContentSecurityPolicy **)a1;
      v60[5] = *(_QWORD *)a1;
      v63 = (uint64_t)(v60 + 5);
      *(_QWORD *)(v59 + 88) = 0;
      *(_BYTE *)(v59 + 96) = 0;
      *(_OWORD *)(v59 + 48) = 0u;
      *(_OWORD *)(v59 + 64) = 0u;
      *(_QWORD *)(v59 + 77) = 0;
      v64 = *v4;
      if (*v4)
        *(_DWORD *)v64 += 2;
      *(_QWORD *)(v59 + 104) = v64;
      *(_BYTE *)(v59 + 112) = *((_BYTE *)v62 + 233);
      *(_BYTE *)(v59 + 121) = 0;
      *(_QWORD *)(v59 + 113) = 0;
      WebCore::ContentSecurityPolicySourceList::parse(v63, (const WTF::String *)(v4 + 1), 0.0, v61);
      result = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v59;
      if (!result)
        return result;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
  }
  if (!(_DWORD)v6)
    goto LABEL_123;
  if ((*(unsigned __int16 *)v54 | (32 * (*(unsigned __int16 *)v54 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::objectSrc))
  {
    v381 = 1;
    do
    {
      v55 = v381;
      if (v6 == v381)
        break;
      v382 = *(unsigned __int16 *)&v54[2 * v381] | (32 * (*(unsigned __int16 *)&v54[2 * v381] - 65 < 0x1A));
      ++v381;
    }
    while (v382 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                       + WebCore::ContentSecurityPolicyDirectiveNames::objectSrc[v55]));
LABEL_122:
    if (v55 >= v6)
      goto LABEL_123;
  }
LABEL_19:
  if (WebCore::ContentSecurityPolicyDirectiveNames::workerSrc)
    v11 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::workerSrc);
  else
    v11 = 0;
  if (v11 != v6)
    goto LABEL_22;
  v65 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if ((_DWORD)v6)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v65) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                  + *WebCore::ContentSecurityPolicyDirectiveNames::workerSrc))
        goto LABEL_22;
      v66 = 0;
      v67 = v65 + 1;
      while (v6 - 1 != v66)
      {
        v68 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v67[v66]);
        v69 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                 + WebCore::ContentSecurityPolicyDirectiveNames::workerSrc[++v66]);
        if (v68 != v69)
          goto LABEL_134;
      }
    }
LABEL_135:
    if (!*(_QWORD *)(a1 + 192))
    {
      v70 = WTF::fastMalloc((WTF *)0x80);
      v71 = WebCore::ContentSecurityPolicyDirective::ContentSecurityPolicyDirective((_QWORD *)v70, (const WebCore::ContentSecurityPolicyDirectiveList *)a1, v4, (const WTF::String *)(v4 + 1));
      *v71 = off_1E34036C8;
      v71[4] = 0;
      v73 = *(WebCore::ContentSecurityPolicy **)a1;
      v71[5] = *(_QWORD *)a1;
      v74 = (uint64_t)(v71 + 5);
      *(_QWORD *)(v70 + 88) = 0;
      *(_BYTE *)(v70 + 96) = 0;
      *(_OWORD *)(v70 + 48) = 0u;
      *(_OWORD *)(v70 + 64) = 0u;
      *(_QWORD *)(v70 + 77) = 0;
      v75 = *v4;
      if (*v4)
        *(_DWORD *)v75 += 2;
      *(_QWORD *)(v70 + 104) = v75;
      *(_BYTE *)(v70 + 112) = *((_BYTE *)v73 + 233);
      *(_BYTE *)(v70 + 121) = 0;
      *(_QWORD *)(v70 + 113) = 0;
      WebCore::ContentSecurityPolicySourceList::parse(v74, (const WTF::String *)(v4 + 1), 0.0, v72);
      result = *(_QWORD *)(a1 + 192);
      *(_QWORD *)(a1 + 192) = v70;
      if (!result)
        return result;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
  }
  if (!(_DWORD)v6)
    goto LABEL_135;
  if ((*(unsigned __int16 *)v65 | (32 * (*(unsigned __int16 *)v65 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::workerSrc))
  {
    v383 = 1;
    do
    {
      v66 = v383;
      if (v6 == v383)
        break;
      v384 = *(unsigned __int16 *)&v65[2 * v383] | (32 * (*(unsigned __int16 *)&v65[2 * v383] - 65 < 0x1A));
      ++v383;
    }
    while (v384 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                       + WebCore::ContentSecurityPolicyDirectiveNames::workerSrc[v66]));
LABEL_134:
    if (v66 >= v6)
      goto LABEL_135;
  }
LABEL_22:
  if (WebCore::ContentSecurityPolicyDirectiveNames::frameSrc)
    v12 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::frameSrc);
  else
    v12 = 0;
  if (v12 != v6)
    goto LABEL_25;
  v76 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if ((_DWORD)v6)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v76) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                  + *WebCore::ContentSecurityPolicyDirectiveNames::frameSrc))
        goto LABEL_25;
      v77 = 0;
      v78 = v76 + 1;
      while (v6 - 1 != v77)
      {
        v79 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v78[v77]);
        v80 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                 + WebCore::ContentSecurityPolicyDirectiveNames::frameSrc[++v77]);
        if (v79 != v80)
          goto LABEL_146;
      }
    }
LABEL_147:
    if (!*(_QWORD *)(a1 + 88))
    {
      v81 = WTF::fastMalloc((WTF *)0x80);
      v82 = WebCore::ContentSecurityPolicyDirective::ContentSecurityPolicyDirective((_QWORD *)v81, (const WebCore::ContentSecurityPolicyDirectiveList *)a1, v4, (const WTF::String *)(v4 + 1));
      *v82 = off_1E34036C8;
      v82[4] = 0;
      v84 = *(WebCore::ContentSecurityPolicy **)a1;
      v82[5] = *(_QWORD *)a1;
      v85 = (uint64_t)(v82 + 5);
      *(_QWORD *)(v81 + 88) = 0;
      *(_BYTE *)(v81 + 96) = 0;
      *(_OWORD *)(v81 + 48) = 0u;
      *(_OWORD *)(v81 + 64) = 0u;
      *(_QWORD *)(v81 + 77) = 0;
      v86 = *v4;
      if (*v4)
        *(_DWORD *)v86 += 2;
      *(_QWORD *)(v81 + 104) = v86;
      *(_BYTE *)(v81 + 112) = *((_BYTE *)v84 + 233);
      *(_BYTE *)(v81 + 121) = 0;
      *(_QWORD *)(v81 + 113) = 0;
      WebCore::ContentSecurityPolicySourceList::parse(v85, (const WTF::String *)(v4 + 1), 0.0, v83);
      result = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v81;
      if (!result)
        return result;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
  }
  if (!(_DWORD)v6)
    goto LABEL_147;
  if ((*(unsigned __int16 *)v76 | (32 * (*(unsigned __int16 *)v76 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::frameSrc))
  {
    v385 = 1;
    do
    {
      v77 = v385;
      if (v6 == v385)
        break;
      v386 = *(unsigned __int16 *)&v76[2 * v385] | (32 * (*(unsigned __int16 *)&v76[2 * v385] - 65 < 0x1A));
      ++v385;
    }
    while (v386 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                       + WebCore::ContentSecurityPolicyDirectiveNames::frameSrc[v77]));
LABEL_146:
    if (v77 >= v6)
      goto LABEL_147;
  }
LABEL_25:
  if (WebCore::ContentSecurityPolicyDirectiveNames::imgSrc)
    v13 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::imgSrc);
  else
    v13 = 0;
  if (v13 != v6)
    goto LABEL_28;
  v87 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if ((_DWORD)v6)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v87) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                  + *WebCore::ContentSecurityPolicyDirectiveNames::imgSrc))
        goto LABEL_28;
      v88 = 0;
      v89 = v87 + 1;
      while (v6 - 1 != v88)
      {
        v90 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v89[v88]);
        v91 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                 + WebCore::ContentSecurityPolicyDirectiveNames::imgSrc[++v88]);
        if (v90 != v91)
          goto LABEL_158;
      }
    }
LABEL_159:
    if (!*(_QWORD *)(a1 + 96))
    {
      v92 = WTF::fastMalloc((WTF *)0x80);
      v93 = WebCore::ContentSecurityPolicyDirective::ContentSecurityPolicyDirective((_QWORD *)v92, (const WebCore::ContentSecurityPolicyDirectiveList *)a1, v4, (const WTF::String *)(v4 + 1));
      *v93 = off_1E34036C8;
      v93[4] = 0;
      v95 = *(WebCore::ContentSecurityPolicy **)a1;
      v93[5] = *(_QWORD *)a1;
      v96 = (uint64_t)(v93 + 5);
      *(_QWORD *)(v92 + 88) = 0;
      *(_BYTE *)(v92 + 96) = 0;
      *(_OWORD *)(v92 + 48) = 0u;
      *(_OWORD *)(v92 + 64) = 0u;
      *(_QWORD *)(v92 + 77) = 0;
      v97 = *v4;
      if (*v4)
        *(_DWORD *)v97 += 2;
      *(_QWORD *)(v92 + 104) = v97;
      *(_BYTE *)(v92 + 112) = *((_BYTE *)v95 + 233);
      *(_BYTE *)(v92 + 121) = 0;
      *(_QWORD *)(v92 + 113) = 0;
      WebCore::ContentSecurityPolicySourceList::parse(v96, (const WTF::String *)(v4 + 1), 0.0, v94);
      result = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(a1 + 96) = v92;
      if (!result)
        return result;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
  }
  if (!(_DWORD)v6)
    goto LABEL_159;
  if ((*(unsigned __int16 *)v87 | (32 * (*(unsigned __int16 *)v87 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::imgSrc))
  {
    v387 = 1;
    do
    {
      v88 = v387;
      if (v6 == v387)
        break;
      v388 = *(unsigned __int16 *)&v87[2 * v387] | (32 * (*(unsigned __int16 *)&v87[2 * v387] - 65 < 0x1A));
      ++v387;
    }
    while (v388 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                       + WebCore::ContentSecurityPolicyDirectiveNames::imgSrc[v88]));
LABEL_158:
    if (v88 >= v6)
      goto LABEL_159;
  }
LABEL_28:
  if (WebCore::ContentSecurityPolicyDirectiveNames::fontSrc)
    v14 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::fontSrc);
  else
    v14 = 0;
  if (v14 != v6)
    goto LABEL_31;
  v98 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if ((_DWORD)v6)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v98) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                  + *WebCore::ContentSecurityPolicyDirectiveNames::fontSrc))
        goto LABEL_31;
      v99 = 0;
      v100 = v98 + 1;
      while (v6 - 1 != v99)
      {
        v101 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v100[v99]);
        v102 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                  + WebCore::ContentSecurityPolicyDirectiveNames::fontSrc[++v99]);
        if (v101 != v102)
          goto LABEL_170;
      }
    }
LABEL_171:
    if (!*(_QWORD *)(a1 + 64))
    {
      v103 = WTF::fastMalloc((WTF *)0x80);
      v104 = WebCore::ContentSecurityPolicyDirective::ContentSecurityPolicyDirective((_QWORD *)v103, (const WebCore::ContentSecurityPolicyDirectiveList *)a1, v4, (const WTF::String *)(v4 + 1));
      *v104 = off_1E34036C8;
      v104[4] = 0;
      v106 = *(WebCore::ContentSecurityPolicy **)a1;
      v104[5] = *(_QWORD *)a1;
      v107 = (uint64_t)(v104 + 5);
      *(_QWORD *)(v103 + 88) = 0;
      *(_BYTE *)(v103 + 96) = 0;
      *(_OWORD *)(v103 + 48) = 0u;
      *(_OWORD *)(v103 + 64) = 0u;
      *(_QWORD *)(v103 + 77) = 0;
      v108 = *v4;
      if (*v4)
        *(_DWORD *)v108 += 2;
      *(_QWORD *)(v103 + 104) = v108;
      *(_BYTE *)(v103 + 112) = *((_BYTE *)v106 + 233);
      *(_BYTE *)(v103 + 121) = 0;
      *(_QWORD *)(v103 + 113) = 0;
      WebCore::ContentSecurityPolicySourceList::parse(v107, (const WTF::String *)(v4 + 1), 0.0, v105);
      result = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v103;
      if (!result)
        return result;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
  }
  if (!(_DWORD)v6)
    goto LABEL_171;
  if ((*(unsigned __int16 *)v98 | (32 * (*(unsigned __int16 *)v98 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::fontSrc))
  {
    v389 = 1;
    do
    {
      v99 = v389;
      if (v6 == v389)
        break;
      v390 = *(unsigned __int16 *)&v98[2 * v389] | (32 * (*(unsigned __int16 *)&v98[2 * v389] - 65 < 0x1A));
      ++v389;
    }
    while (v390 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                       + WebCore::ContentSecurityPolicyDirectiveNames::fontSrc[v99]));
LABEL_170:
    if (v99 >= v6)
      goto LABEL_171;
  }
LABEL_31:
  if ((_DWORD)v6 != 12)
    goto LABEL_32;
  v109 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v109) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109))
    {
      v110 = 0;
      v111 = v109 + 1;
      while (v6 - 1 != v110)
      {
        v112 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v111[v110]);
        v113 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aManifestSrc[++v110]);
        if (v112 != v113)
        {
          if (v110 < v6)
            goto LABEL_32;
          break;
        }
      }
LABEL_182:
      if (!*(_QWORD *)(a1 + 104))
      {
        v114 = WTF::fastMalloc((WTF *)0x80);
        v115 = WebCore::ContentSecurityPolicyDirective::ContentSecurityPolicyDirective((_QWORD *)v114, (const WebCore::ContentSecurityPolicyDirectiveList *)a1, v4, (const WTF::String *)(v4 + 1));
        *v115 = off_1E34036C8;
        v115[4] = 0;
        v117 = *(WebCore::ContentSecurityPolicy **)a1;
        v115[5] = *(_QWORD *)a1;
        v118 = (uint64_t)(v115 + 5);
        *(_QWORD *)(v114 + 88) = 0;
        *(_BYTE *)(v114 + 96) = 0;
        *(_OWORD *)(v114 + 48) = 0u;
        *(_OWORD *)(v114 + 64) = 0u;
        *(_QWORD *)(v114 + 77) = 0;
        v119 = *v4;
        if (*v4)
          *(_DWORD *)v119 += 2;
        *(_QWORD *)(v114 + 104) = v119;
        *(_BYTE *)(v114 + 112) = *((_BYTE *)v117 + 233);
        *(_BYTE *)(v114 + 121) = 0;
        *(_QWORD *)(v114 + 113) = 0;
        WebCore::ContentSecurityPolicySourceList::parse(v118, (const WTF::String *)(v4 + 1), 0.0, v116);
        result = *(_QWORD *)(a1 + 104);
        *(_QWORD *)(a1 + 104) = v114;
        if (!result)
          return result;
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      return WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
    }
  }
  else if ((*(unsigned __int16 *)v109 | (32 * (*(unsigned __int16 *)v109 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109))
  {
    v391 = 1u;
    do
    {
      v392 = v391;
      if (v6 == v391)
        break;
      v393 = *(unsigned __int16 *)&v109[2 * v391] | (32
                                                   * (*(unsigned __int16 *)&v109[2 * v391] - 65 < 0x1A));
      ++v391;
    }
    while (v393 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aManifestSrc[v392]));
    if (v392 >= v6)
      goto LABEL_182;
  }
LABEL_32:
  if (WebCore::ContentSecurityPolicyDirectiveNames::mediaSrc)
    v15 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::mediaSrc);
  else
    v15 = 0;
  if (v15 != v6)
    goto LABEL_35;
  v120 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if ((_DWORD)v6)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v120) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                   + *WebCore::ContentSecurityPolicyDirectiveNames::mediaSrc))
        goto LABEL_35;
      v121 = 0;
      v122 = v120 + 1;
      while (v6 - 1 != v121)
      {
        v123 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v122[v121]);
        v124 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                  + WebCore::ContentSecurityPolicyDirectiveNames::mediaSrc[++v121]);
        if (v123 != v124)
          goto LABEL_193;
      }
    }
LABEL_194:
    if (!*(_QWORD *)(a1 + 112))
    {
      v125 = WTF::fastMalloc((WTF *)0x80);
      v126 = WebCore::ContentSecurityPolicyDirective::ContentSecurityPolicyDirective((_QWORD *)v125, (const WebCore::ContentSecurityPolicyDirectiveList *)a1, v4, (const WTF::String *)(v4 + 1));
      *v126 = off_1E34036C8;
      v126[4] = 0;
      v128 = *(WebCore::ContentSecurityPolicy **)a1;
      v126[5] = *(_QWORD *)a1;
      v129 = (uint64_t)(v126 + 5);
      *(_QWORD *)(v125 + 88) = 0;
      *(_BYTE *)(v125 + 96) = 0;
      *(_OWORD *)(v125 + 48) = 0u;
      *(_OWORD *)(v125 + 64) = 0u;
      *(_QWORD *)(v125 + 77) = 0;
      v130 = *v4;
      if (*v4)
        *(_DWORD *)v130 += 2;
      *(_QWORD *)(v125 + 104) = v130;
      *(_BYTE *)(v125 + 112) = *((_BYTE *)v128 + 233);
      *(_BYTE *)(v125 + 121) = 0;
      *(_QWORD *)(v125 + 113) = 0;
      WebCore::ContentSecurityPolicySourceList::parse(v129, (const WTF::String *)(v4 + 1), 0.0, v127);
      result = *(_QWORD *)(a1 + 112);
      *(_QWORD *)(a1 + 112) = v125;
      if (!result)
        return result;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
  }
  if (!(_DWORD)v6)
    goto LABEL_194;
  if ((*(unsigned __int16 *)v120 | (32 * (*(unsigned __int16 *)v120 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::mediaSrc))
  {
    v394 = 1;
    do
    {
      v121 = v394;
      if (v6 == v394)
        break;
      v395 = *(unsigned __int16 *)&v120[2 * v394] | (32
                                                   * (*(unsigned __int16 *)&v120[2 * v394] - 65 < 0x1A));
      ++v394;
    }
    while (v395 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                       + WebCore::ContentSecurityPolicyDirectiveNames::mediaSrc[v121]));
LABEL_193:
    if (v121 >= v6)
      goto LABEL_194;
  }
LABEL_35:
  if (WebCore::ContentSecurityPolicyDirectiveNames::connectSrc)
    v16 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::connectSrc);
  else
    v16 = 0;
  if (v16 != v6)
    goto LABEL_38;
  v131 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if ((_DWORD)v6)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v131) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                   + *WebCore::ContentSecurityPolicyDirectiveNames::connectSrc))
        goto LABEL_38;
      v132 = 0;
      v133 = v131 + 1;
      while (v6 - 1 != v132)
      {
        v134 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v133[v132]);
        v135 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                  + WebCore::ContentSecurityPolicyDirectiveNames::connectSrc[++v132]);
        if (v134 != v135)
          goto LABEL_205;
      }
    }
LABEL_206:
    if (!*(_QWORD *)(a1 + 40))
    {
      v136 = WTF::fastMalloc((WTF *)0x80);
      v137 = WebCore::ContentSecurityPolicyDirective::ContentSecurityPolicyDirective((_QWORD *)v136, (const WebCore::ContentSecurityPolicyDirectiveList *)a1, v4, (const WTF::String *)(v4 + 1));
      *v137 = off_1E34036C8;
      v137[4] = 0;
      v139 = *(WebCore::ContentSecurityPolicy **)a1;
      v137[5] = *(_QWORD *)a1;
      v140 = (uint64_t)(v137 + 5);
      *(_QWORD *)(v136 + 88) = 0;
      *(_BYTE *)(v136 + 96) = 0;
      *(_OWORD *)(v136 + 48) = 0u;
      *(_OWORD *)(v136 + 64) = 0u;
      *(_QWORD *)(v136 + 77) = 0;
      v141 = *v4;
      if (*v4)
        *(_DWORD *)v141 += 2;
      *(_QWORD *)(v136 + 104) = v141;
      *(_BYTE *)(v136 + 112) = *((_BYTE *)v139 + 233);
      *(_BYTE *)(v136 + 121) = 0;
      *(_QWORD *)(v136 + 113) = 0;
      WebCore::ContentSecurityPolicySourceList::parse(v140, (const WTF::String *)(v4 + 1), 0.0, v138);
      result = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v136;
      if (!result)
        return result;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
  }
  if (!(_DWORD)v6)
    goto LABEL_206;
  if ((*(unsigned __int16 *)v131 | (32 * (*(unsigned __int16 *)v131 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::connectSrc))
  {
    v396 = 1;
    do
    {
      v132 = v396;
      if (v6 == v396)
        break;
      v397 = *(unsigned __int16 *)&v131[2 * v396] | (32
                                                   * (*(unsigned __int16 *)&v131[2 * v396] - 65 < 0x1A));
      ++v396;
    }
    while (v397 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                       + WebCore::ContentSecurityPolicyDirectiveNames::connectSrc[v132]));
LABEL_205:
    if (v132 >= v6)
      goto LABEL_206;
  }
LABEL_38:
  if ((_DWORD)v6 != 9)
    goto LABEL_39;
  v142 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v142) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
    {
      v143 = 0;
      v144 = v142 + 1;
      while (v6 - 1 != v143)
      {
        v145 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v144[v143]);
        v146 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aChildSrc[++v143]);
        if (v145 != v146)
        {
          if (v143 < v6)
            goto LABEL_39;
          break;
        }
      }
LABEL_217:
      if (!*(_QWORD *)(a1 + 48))
      {
        v147 = WTF::fastMalloc((WTF *)0x80);
        v148 = WebCore::ContentSecurityPolicyDirective::ContentSecurityPolicyDirective((_QWORD *)v147, (const WebCore::ContentSecurityPolicyDirectiveList *)a1, v4, (const WTF::String *)(v4 + 1));
        *v148 = off_1E34036C8;
        v148[4] = 0;
        v150 = *(WebCore::ContentSecurityPolicy **)a1;
        v148[5] = *(_QWORD *)a1;
        v151 = (uint64_t)(v148 + 5);
        *(_QWORD *)(v147 + 88) = 0;
        *(_BYTE *)(v147 + 96) = 0;
        *(_OWORD *)(v147 + 48) = 0u;
        *(_OWORD *)(v147 + 64) = 0u;
        *(_QWORD *)(v147 + 77) = 0;
        v152 = *v4;
        if (*v4)
          *(_DWORD *)v152 += 2;
        *(_QWORD *)(v147 + 104) = v152;
        *(_BYTE *)(v147 + 112) = *((_BYTE *)v150 + 233);
        *(_BYTE *)(v147 + 121) = 0;
        *(_QWORD *)(v147 + 113) = 0;
        WebCore::ContentSecurityPolicySourceList::parse(v151, (const WTF::String *)(v4 + 1), 0.0, v149);
        result = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 48) = v147;
        if (!result)
          return result;
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      return WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
    }
  }
  else if ((*(unsigned __int16 *)v142 | (32 * (*(unsigned __int16 *)v142 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
  {
    v398 = 1u;
    do
    {
      v399 = v398;
      if (v6 == v398)
        break;
      v400 = *(unsigned __int16 *)&v142[2 * v398] | (32
                                                   * (*(unsigned __int16 *)&v142[2 * v398] - 65 < 0x1A));
      ++v398;
    }
    while (v400 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aChildSrc[v399]));
    if (v399 >= v6)
      goto LABEL_217;
  }
LABEL_39:
  if (WebCore::ContentSecurityPolicyDirectiveNames::formAction)
    v17 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::formAction);
  else
    v17 = 0;
  if (v17 != v6)
    goto LABEL_42;
  v153 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if ((_DWORD)v6)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v153) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                   + *WebCore::ContentSecurityPolicyDirectiveNames::formAction))
        goto LABEL_42;
      v154 = 0;
      v155 = v153 + 1;
      while (v6 - 1 != v154)
      {
        v156 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v155[v154]);
        v157 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                  + WebCore::ContentSecurityPolicyDirectiveNames::formAction[++v154]);
        if (v156 != v157)
          goto LABEL_228;
      }
    }
LABEL_229:
    if (!*(_QWORD *)(a1 + 72))
    {
      v158 = WTF::fastMalloc((WTF *)0x80);
      v159 = WebCore::ContentSecurityPolicyDirective::ContentSecurityPolicyDirective((_QWORD *)v158, (const WebCore::ContentSecurityPolicyDirectiveList *)a1, v4, (const WTF::String *)(v4 + 1));
      *v159 = off_1E34036C8;
      v159[4] = 0;
      v161 = *(WebCore::ContentSecurityPolicy **)a1;
      v159[5] = *(_QWORD *)a1;
      v162 = (uint64_t)(v159 + 5);
      *(_QWORD *)(v158 + 88) = 0;
      *(_BYTE *)(v158 + 96) = 0;
      *(_OWORD *)(v158 + 48) = 0u;
      *(_OWORD *)(v158 + 64) = 0u;
      *(_QWORD *)(v158 + 77) = 0;
      v163 = *v4;
      if (*v4)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v158 + 104) = v163;
      *(_BYTE *)(v158 + 112) = *((_BYTE *)v161 + 233);
      *(_BYTE *)(v158 + 121) = 0;
      *(_QWORD *)(v158 + 113) = 0;
      WebCore::ContentSecurityPolicySourceList::parse(v162, (const WTF::String *)(v4 + 1), 0.0, v160);
      result = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v158;
      if (!result)
        return result;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
  }
  if (!(_DWORD)v6)
    goto LABEL_229;
  if ((*(unsigned __int16 *)v153 | (32 * (*(unsigned __int16 *)v153 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::formAction))
  {
    v401 = 1;
    do
    {
      v154 = v401;
      if (v6 == v401)
        break;
      v402 = *(unsigned __int16 *)&v153[2 * v401] | (32
                                                   * (*(unsigned __int16 *)&v153[2 * v401] - 65 < 0x1A));
      ++v401;
    }
    while (v402 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                       + WebCore::ContentSecurityPolicyDirectiveNames::formAction[v154]));
LABEL_228:
    if (v154 >= v6)
      goto LABEL_229;
  }
LABEL_42:
  if (WebCore::ContentSecurityPolicyDirectiveNames::baseURI)
    v18 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::baseURI);
  else
    v18 = 0;
  if (v18 != v6)
    goto LABEL_45;
  v164 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if ((_DWORD)v6)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v164) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                   + *WebCore::ContentSecurityPolicyDirectiveNames::baseURI))
        goto LABEL_45;
      v165 = 0;
      v166 = v164 + 1;
      while (v6 - 1 != v165)
      {
        v167 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v166[v165]);
        v168 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                  + WebCore::ContentSecurityPolicyDirectiveNames::baseURI[++v165]);
        if (v167 != v168)
          goto LABEL_240;
      }
    }
LABEL_241:
    if (!*(_QWORD *)(a1 + 32))
    {
      v169 = WTF::fastMalloc((WTF *)0x80);
      v170 = WebCore::ContentSecurityPolicyDirective::ContentSecurityPolicyDirective((_QWORD *)v169, (const WebCore::ContentSecurityPolicyDirectiveList *)a1, v4, (const WTF::String *)(v4 + 1));
      *v170 = off_1E34036C8;
      v170[4] = 0;
      v172 = *(WebCore::ContentSecurityPolicy **)a1;
      v170[5] = *(_QWORD *)a1;
      v173 = (uint64_t)(v170 + 5);
      *(_QWORD *)(v169 + 88) = 0;
      *(_BYTE *)(v169 + 96) = 0;
      *(_OWORD *)(v169 + 48) = 0u;
      *(_OWORD *)(v169 + 64) = 0u;
      *(_QWORD *)(v169 + 77) = 0;
      v174 = *v4;
      if (*v4)
        *(_DWORD *)v174 += 2;
      *(_QWORD *)(v169 + 104) = v174;
      *(_BYTE *)(v169 + 112) = *((_BYTE *)v172 + 233);
      *(_BYTE *)(v169 + 121) = 0;
      *(_QWORD *)(v169 + 113) = 0;
      WebCore::ContentSecurityPolicySourceList::parse(v173, (const WTF::String *)(v4 + 1), 0.0, v171);
      result = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v169;
      if (!result)
        return result;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
  }
  if (!(_DWORD)v6)
    goto LABEL_241;
  if ((*(unsigned __int16 *)v164 | (32 * (*(unsigned __int16 *)v164 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::baseURI))
  {
    v403 = 1;
    do
    {
      v165 = v403;
      if (v6 == v403)
        break;
      v404 = *(unsigned __int16 *)&v164[2 * v403] | (32
                                                   * (*(unsigned __int16 *)&v164[2 * v403] - 65 < 0x1A));
      ++v403;
    }
    while (v404 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                       + WebCore::ContentSecurityPolicyDirectiveNames::baseURI[v165]));
LABEL_240:
    if (v165 >= v6)
      goto LABEL_241;
  }
LABEL_45:
  if ((_DWORD)v6 != 15)
    goto LABEL_46;
  v175 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v175) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102))
    {
      v176 = 0;
      v177 = v175 + 1;
      while (v6 - 1 != v176)
      {
        v178 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v177[v176]);
        v179 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aFrameAncestors[++v176]);
        if (v178 != v179)
        {
          if (v176 < v6)
            goto LABEL_46;
          break;
        }
      }
LABEL_252:
      if (!*(_BYTE *)(a1 + 17))
      {
        if (!*(_QWORD *)(a1 + 80))
        {
          v180 = WTF::fastMalloc((WTF *)0x80);
          v181 = WebCore::ContentSecurityPolicyDirective::ContentSecurityPolicyDirective((_QWORD *)v180, (const WebCore::ContentSecurityPolicyDirectiveList *)a1, v4, (const WTF::String *)(v4 + 1));
          *v181 = off_1E34036C8;
          v181[4] = 0;
          v183 = *(WebCore::ContentSecurityPolicy **)a1;
          v181[5] = *(_QWORD *)a1;
          v184 = (uint64_t)(v181 + 5);
          *(_QWORD *)(v180 + 88) = 0;
          *(_BYTE *)(v180 + 96) = 0;
          *(_OWORD *)(v180 + 48) = 0u;
          *(_OWORD *)(v180 + 64) = 0u;
          *(_QWORD *)(v180 + 77) = 0;
          v185 = *v4;
          if (*v4)
            *(_DWORD *)v185 += 2;
          *(_QWORD *)(v180 + 104) = v185;
          *(_BYTE *)(v180 + 112) = *((_BYTE *)v183 + 233);
          *(_BYTE *)(v180 + 121) = 0;
          *(_QWORD *)(v180 + 113) = 0;
          WebCore::ContentSecurityPolicySourceList::parse(v184, (const WTF::String *)(v4 + 1), 0.0, v182);
          result = *(_QWORD *)(a1 + 80);
          *(_QWORD *)(a1 + 80) = v180;
          if (!result)
            return result;
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
        return WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
      }
      return WebCore::ContentSecurityPolicy::reportInvalidDirectiveInReportOnlyMode(*(_QWORD *)a1, (const WTF::String *)v3);
    }
  }
  else if ((*(unsigned __int16 *)v175 | (32 * (*(unsigned __int16 *)v175 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102))
  {
    v405 = 1u;
    do
    {
      v406 = v405;
      if (v6 == v405)
        break;
      v407 = *(unsigned __int16 *)&v175[2 * v405] | (32
                                                   * (*(unsigned __int16 *)&v175[2 * v405] - 65 < 0x1A));
      ++v405;
    }
    while (v407 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aFrameAncestors[v406]));
    if (v406 >= v6)
      goto LABEL_252;
  }
LABEL_46:
  if (WebCore::ContentSecurityPolicyDirectiveNames::pluginTypes)
    v19 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::pluginTypes);
  else
    v19 = 0;
  if (v19 != v6)
    goto LABEL_49;
  v186 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if ((_DWORD)v6)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v186) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                   + *WebCore::ContentSecurityPolicyDirectiveNames::pluginTypes))
        goto LABEL_49;
      v187 = 0;
      v188 = v186 + 1;
      while (v6 - 1 != v187)
      {
        v189 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v188[v187]);
        v190 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                  + WebCore::ContentSecurityPolicyDirectiveNames::pluginTypes[++v187]);
        if (v189 != v190)
          goto LABEL_264;
      }
    }
LABEL_265:
    if (!*(_QWORD *)(a1 + 24))
    {
      v191 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
      v192 = WebCore::ContentSecurityPolicyDirective::ContentSecurityPolicyDirective(v191, (const WebCore::ContentSecurityPolicyDirectiveList *)a1, v4, (const WTF::String *)(v4 + 1));
      *v192 = off_1E34036A0;
      v192[4] = 0;
      v192[5] = 0;
      *(_QWORD *)((char *)v192 + 45) = 0;
      WebCore::ContentSecurityPolicyMediaListDirective::parse((WTF::StringImpl *)v192, v4 + 1);
      result = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v191;
      if (!result)
        return result;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
  }
  if (!(_DWORD)v6)
    goto LABEL_265;
  if ((*(unsigned __int16 *)v186 | (32 * (*(unsigned __int16 *)v186 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::pluginTypes))
  {
    v408 = 1;
    do
    {
      v187 = v408;
      if (v6 == v408)
        break;
      v409 = *(unsigned __int16 *)&v186[2 * v408] | (32
                                                   * (*(unsigned __int16 *)&v186[2 * v408] - 65 < 0x1A));
      ++v408;
    }
    while (v409 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                       + WebCore::ContentSecurityPolicyDirectiveNames::pluginTypes[v187]));
LABEL_264:
    if (v187 >= v6)
      goto LABEL_265;
  }
LABEL_49:
  if ((_DWORD)v6 != 12)
    goto LABEL_50;
  v193 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v193) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
    {
      v194 = 0;
      v195 = v193 + 1;
      while (v6 - 1 != v194)
      {
        v196 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v195[v194]);
        v197 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aPrefetchSrc[++v194]);
        if (v196 != v197)
        {
          if (v194 < v6)
            goto LABEL_50;
          break;
        }
      }
LABEL_274:
      if (!*(_QWORD *)(a1 + 128))
      {
        v198 = WTF::fastMalloc((WTF *)0x80);
        v199 = WebCore::ContentSecurityPolicyDirective::ContentSecurityPolicyDirective((_QWORD *)v198, (const WebCore::ContentSecurityPolicyDirectiveList *)a1, v4, (const WTF::String *)(v4 + 1));
        *v199 = off_1E34036C8;
        v199[4] = 0;
        v201 = *(WebCore::ContentSecurityPolicy **)a1;
        v199[5] = *(_QWORD *)a1;
        v202 = (uint64_t)(v199 + 5);
        *(_QWORD *)(v198 + 88) = 0;
        *(_BYTE *)(v198 + 96) = 0;
        *(_OWORD *)(v198 + 48) = 0u;
        *(_OWORD *)(v198 + 64) = 0u;
        *(_QWORD *)(v198 + 77) = 0;
        v203 = *v4;
        if (*v4)
          *(_DWORD *)v203 += 2;
        *(_QWORD *)(v198 + 104) = v203;
        *(_BYTE *)(v198 + 112) = *((_BYTE *)v201 + 233);
        *(_BYTE *)(v198 + 121) = 0;
        *(_QWORD *)(v198 + 113) = 0;
        WebCore::ContentSecurityPolicySourceList::parse(v202, (const WTF::String *)(v4 + 1), 0.0, v200);
        result = *(_QWORD *)(a1 + 128);
        *(_QWORD *)(a1 + 128) = v198;
        if (!result)
          return result;
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      return WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
    }
  }
  else if ((*(unsigned __int16 *)v193 | (32 * (*(unsigned __int16 *)v193 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
  {
    v410 = 1u;
    do
    {
      v411 = v410;
      if (v6 == v410)
        break;
      v412 = *(unsigned __int16 *)&v193[2 * v410] | (32
                                                   * (*(unsigned __int16 *)&v193[2 * v410] - 65 < 0x1A));
      ++v410;
    }
    while (v412 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aPrefetchSrc[v411]));
    if (v411 >= v6)
      goto LABEL_274;
  }
LABEL_50:
  if (WebCore::ContentSecurityPolicyDirectiveNames::sandbox)
    v20 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::sandbox);
  else
    v20 = 0;
  if (v20 != v6)
    goto LABEL_53;
  v204 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if ((_DWORD)v6)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v204) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                   + *WebCore::ContentSecurityPolicyDirectiveNames::sandbox))
        goto LABEL_53;
      v205 = 0;
      v206 = v204 + 1;
      while (v6 - 1 != v205)
      {
        v207 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v206[v205]);
        v208 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                  + WebCore::ContentSecurityPolicyDirectiveNames::sandbox[++v205]);
        if (v207 != v208)
          goto LABEL_285;
      }
    }
    goto LABEL_286;
  }
  if (!(_DWORD)v6)
    goto LABEL_286;
  if ((*(unsigned __int16 *)v204 | (32 * (*(unsigned __int16 *)v204 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::sandbox))
  {
    v413 = 1;
    do
    {
      v205 = v413;
      if (v6 == v413)
        break;
      v414 = *(unsigned __int16 *)&v204[2 * v413] | (32
                                                   * (*(unsigned __int16 *)&v204[2 * v413] - 65 < 0x1A));
      ++v413;
    }
    while (v414 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                       + WebCore::ContentSecurityPolicyDirectiveNames::sandbox[v205]));
LABEL_285:
    if (v205 >= v6)
    {
LABEL_286:
      if (!*(_BYTE *)(a1 + 17))
      {
        if (!*(_BYTE *)(a1 + 18))
        {
          v209 = v4[1];
          *(_BYTE *)(a1 + 18) = 1;
          v467 = 0;
          v210 = *(WebCore::ContentSecurityPolicy **)a1;
          if (v209)
          {
            v211 = (int8x16_t *)*((_QWORD *)v209 + 1);
            v212 = *((unsigned int *)v209 + 1) | ((unint64_t)((*((_DWORD *)v209 + 4) >> 2) & 1) << 32);
          }
          else
          {
            v211 = 0;
            v212 = 0x100000000;
          }
          result = (uint64_t)WebCore::SecurityContext::parseSandboxPolicy(v211, v212, &v467);
          *((_DWORD *)v210 + 44) |= result;
          v213 = v467;
          if (!v467)
            return result;
          v214 = *(WebCore::ContentSecurityPolicy **)a1;
          v215 = *((_DWORD *)v467 + 1);
          *(_DWORD *)v467 += 2;
          if (v215 < 0 || (result = (v215 + 69), __OFADD__(v215, 69)))
          {
            v472[0] = 0;
          }
          else
          {
            result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, (*((_DWORD *)v213 + 4) >> 2) & 1, (int8x16_t *)"Error while parsing the 'sandbox' Content Security Policy directive: ", 0x45u, (uint64_t)v213, v472);
            if (v472[0])
            {
              v468[0] = 0;
              if (*(_DWORD *)(v472[0] + 4) && *((_BYTE *)v214 + 181))
              {
                v217 = (void (***)(_QWORD, uint64_t, uint64_t, _QWORD *, _QWORD))*((_QWORD *)v214 + 2);
                if (v217)
                {
                  (**v217)(v217, 8, 2, v472, 0);
                }
                else
                {
                  v354 = *((_QWORD *)v214 + 1);
                  if (v354)
                  {
                    v355 = *(_QWORD *)(v354 + 8);
                    if (v355)
                    {
                      v469 = 0;
                      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, WTF::StringImpl **, _QWORD, _QWORD, WTF::StringImpl **, _QWORD, _QWORD))(*(_QWORD *)(v355 - 96) + 416))(v355 - 96, 8, 2, v472, v468, 0, 0, &v469, 0, 0);
                      v356 = v469;
                      v469 = 0;
                      if (v356)
                      {
                        if (*(_DWORD *)v356 == 1)
                        {
                          v359 = (WTF *)MEMORY[0x19AEA6024]();
                          WTF::fastFree(v359, v360);
                        }
                        else
                        {
                          --*(_DWORD *)v356;
                        }
                      }
                      v357 = v468[0];
                      v468[0] = 0;
                      if (v357)
                      {
                        if (*(_DWORD *)v357 == 2)
                          WTF::StringImpl::destroy(v357, v216);
                        else
                          *(_DWORD *)v357 -= 2;
                      }
                    }
                  }
                }
              }
              v358 = (WTF::StringImpl *)v472[0];
              v472[0] = 0;
              if (v358)
              {
                if (*(_DWORD *)v358 == 2)
                  WTF::StringImpl::destroy(v358, v216);
                else
                  *(_DWORD *)v358 -= 2;
              }
              if (*(_DWORD *)v213 == 2)
                WTF::StringImpl::destroy(v213, v216);
              else
                *(_DWORD *)v213 -= 2;
              result = (uint64_t)v467;
              v467 = 0;
              if (!result)
                return result;
              goto LABEL_813;
            }
          }
          __break(0xC471u);
          return result;
        }
        return WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
      }
      return WebCore::ContentSecurityPolicy::reportInvalidDirectiveInReportOnlyMode(*(_QWORD *)a1, (const WTF::String *)v3);
    }
  }
LABEL_53:
  if (WebCore::ContentSecurityPolicyDirectiveNames::reportTo)
    result = strlen(WebCore::ContentSecurityPolicyDirectiveNames::reportTo);
  else
    result = 0;
  if (result != v6)
    goto LABEL_56;
  v218 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if ((_DWORD)v6)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v218) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                   + *WebCore::ContentSecurityPolicyDirectiveNames::reportTo))
        goto LABEL_56;
      v219 = 0;
      v220 = v218 + 1;
      while (v6 - 1 != v219)
      {
        v221 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[v219]);
        v222 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                  + WebCore::ContentSecurityPolicyDirectiveNames::reportTo[++v219]);
        if (v221 != v222)
          goto LABEL_304;
      }
    }
LABEL_305:
    if (!*(_DWORD *)(a1 + 212))
    {
      v223 = v4[1];
      if (v223)
      {
        v224 = (uint64_t *)(a1 + 200);
        v225 = *((_QWORD *)v223 + 1);
        v226 = *((unsigned int *)v223 + 1);
        if ((*((_BYTE *)v223 + 16) & 4) != 0)
        {
          if ((_DWORD)v226)
          {
            v316 = -(int)v225;
            do
            {
              v317 = 0;
              v318 = v225;
              v225 += v226;
              while (1)
              {
                v319 = *(unsigned __int8 *)(v318 + v317);
                if ((v319 - 9) >= 5 && v319 != 32)
                  break;
                if (v226 == ++v317)
                  return result;
              }
              v226 -= v317;
              v320 = v318 + v317;
              while (v319 > 0x20u || ((1 << v319) & 0x100003E00) == 0)
              {
                if (!--v226)
                  goto LABEL_458;
                v321 = *(_BYTE *)++v320;
                LOBYTE(v319) = v321;
              }
              v225 = v320;
LABEL_458:
              if (v318 + v317 < v225)
              {
                v322 = v4[1];
                if (v322)
                {
                  v323 = (v316 + v318);
                  a2 = (WTF::StringImpl *)(v323 + v317);
                  if ((_DWORD)v323 + (_DWORD)v317 || *((_DWORD *)v322 + 1) > (v225 - v318 - v317))
                  {
                    v462 = v316;
                    WTF::StringImpl::substring(v322);
                    v316 = v462;
                    v322 = v469;
                  }
                  else
                  {
                    *(_DWORD *)v322 += 2;
                  }
                  v472[0] = v322;
                }
                else
                {
                  v472[0] = 0;
                }
                v324 = *(unsigned int *)(a1 + 212);
                if ((_DWORD)v324 == *(_DWORD *)(a1 + 208))
                {
                  v463 = v316;
                  v326 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 200, v324 + 1, (unint64_t)v472);
                  v316 = v463;
                  v324 = *(unsigned int *)(a1 + 212);
                  v327 = *(_QWORD *)(a1 + 200);
                  v328 = *v326;
                  *v326 = 0;
                  *(_QWORD *)(v327 + 8 * v324) = v328;
                }
                else
                {
                  v325 = *v224;
                  v472[0] = 0;
                  *(_QWORD *)(v325 + 8 * v324) = v322;
                }
                *(_DWORD *)(a1 + 212) = v324 + 1;
                result = v472[0];
                v472[0] = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                  {
                    v461 = v316;
                    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                    v316 = v461;
                  }
                  else
                  {
                    *(_DWORD *)result -= 2;
                  }
                }
              }
            }
            while (v226);
          }
        }
        else if ((_DWORD)v226)
        {
          v227 = -(uint64_t)v225;
          do
          {
            v228 = (unsigned __int16 *)v225;
            v225 += 2 * v226;
            for (i = v228; ; ++i)
            {
              v230 = *i;
              if ((v230 - 9) >= 5 && v230 != 32)
                break;
              ++v228;
              if (!--v226)
                return result;
            }
            v231 = i;
            while ((unsigned __int16)v230 > 0x20u || ((1 << v230) & 0x100003E00) == 0)
            {
              if (!--v226)
                goto LABEL_321;
              v232 = v231[1];
              ++v231;
              LOWORD(v230) = v232;
            }
            v225 = (unint64_t)v231;
LABEL_321:
            if ((unint64_t)i < v225)
            {
              v233 = v4[1];
              if (v233)
              {
                a2 = (WTF::StringImpl *)(((unint64_t)v228 + v227) >> 1);
                if ((_DWORD)a2 || *((_DWORD *)v233 + 1) > ((v225 - (unint64_t)v228) >> 1))
                {
                  v456 = v227;
                  WTF::StringImpl::substring(v233);
                  v227 = v456;
                  v233 = v469;
                }
                else
                {
                  *(_DWORD *)v233 += 2;
                }
                v472[0] = v233;
              }
              else
              {
                v472[0] = 0;
              }
              v234 = *(unsigned int *)(a1 + 212);
              if ((_DWORD)v234 == *(_DWORD *)(a1 + 208))
              {
                v457 = v227;
                v236 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 200, v234 + 1, (unint64_t)v472);
                v227 = v457;
                v234 = *(unsigned int *)(a1 + 212);
                v237 = *(_QWORD *)(a1 + 200);
                v238 = *v236;
                *v236 = 0;
                *(_QWORD *)(v237 + 8 * v234) = v238;
              }
              else
              {
                v235 = *v224;
                v472[0] = 0;
                *(_QWORD *)(v235 + 8 * v234) = v233;
              }
              *(_DWORD *)(a1 + 212) = v234 + 1;
              result = v472[0];
              v472[0] = 0;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                {
                  v455 = v227;
                  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                  v227 = v455;
                }
                else
                {
                  *(_DWORD *)result -= 2;
                }
              }
            }
          }
          while (v226);
        }
      }
      return result;
    }
    return WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
  }
  if (!(_DWORD)v6)
    goto LABEL_305;
  if ((*(unsigned __int16 *)v218 | (32 * (*(unsigned __int16 *)v218 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::reportTo))
  {
    v415 = 1;
    do
    {
      v219 = v415;
      if (v6 == v415)
        break;
      v416 = *(unsigned __int16 *)&v218[2 * v415] | (32
                                                   * (*(unsigned __int16 *)&v218[2 * v415] - 65 < 0x1A));
      ++v415;
    }
    while (v416 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                       + WebCore::ContentSecurityPolicyDirectiveNames::reportTo[v219]));
LABEL_304:
    if (v219 >= v6)
      goto LABEL_305;
  }
LABEL_56:
  if (WebCore::ContentSecurityPolicyDirectiveNames::reportURI)
    result = strlen(WebCore::ContentSecurityPolicyDirectiveNames::reportURI);
  else
    result = 0;
  if (result != v6)
    goto LABEL_59;
  v239 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if ((_DWORD)v6)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v239) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                   + *WebCore::ContentSecurityPolicyDirectiveNames::reportURI))
        goto LABEL_59;
      v240 = 0;
      v241 = v239 + 1;
      while (v6 - 1 != v240)
      {
        v242 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v241[v240]);
        v243 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                  + WebCore::ContentSecurityPolicyDirectiveNames::reportURI[++v240]);
        if (v242 != v243)
          goto LABEL_344;
      }
    }
LABEL_345:
    if (!*(_DWORD *)(a1 + 228))
    {
      v244 = v4[1];
      if (v244)
      {
        v245 = (uint64_t *)(a1 + 216);
        v246 = *((_QWORD *)v244 + 1);
        v247 = *((unsigned int *)v244 + 1);
        if ((*((_BYTE *)v244 + 16) & 4) != 0)
        {
          if ((_DWORD)v247)
          {
            v329 = -(int)v246;
            do
            {
              v330 = 0;
              v331 = v246;
              v246 += v247;
              while (1)
              {
                v332 = *(unsigned __int8 *)(v331 + v330);
                if ((v332 - 9) >= 5 && v332 != 32)
                  break;
                if (v247 == ++v330)
                  return result;
              }
              v247 -= v330;
              v333 = v331 + v330;
              while (v332 > 0x20u || ((1 << v332) & 0x100003E00) == 0)
              {
                if (!--v247)
                  goto LABEL_488;
                v334 = *(_BYTE *)++v333;
                LOBYTE(v332) = v334;
              }
              v246 = v333;
LABEL_488:
              if (v331 + v330 < v246)
              {
                v335 = v4[1];
                if (v335)
                {
                  v336 = (v329 + v331);
                  a2 = (WTF::StringImpl *)(v336 + v330);
                  if ((_DWORD)v336 + (_DWORD)v330 || *((_DWORD *)v335 + 1) > (v246 - v331 - v330))
                  {
                    v465 = v329;
                    WTF::StringImpl::substring(v335);
                    v329 = v465;
                    v335 = v469;
                  }
                  else
                  {
                    *(_DWORD *)v335 += 2;
                  }
                  v472[0] = v335;
                }
                else
                {
                  v472[0] = 0;
                }
                v337 = *(unsigned int *)(a1 + 228);
                if ((_DWORD)v337 == *(_DWORD *)(a1 + 224))
                {
                  v466 = v329;
                  v339 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v337 + 1, (unint64_t)v472);
                  v329 = v466;
                  v337 = *(unsigned int *)(a1 + 228);
                  v340 = *(_QWORD *)(a1 + 216);
                  v341 = *v339;
                  *v339 = 0;
                  *(_QWORD *)(v340 + 8 * v337) = v341;
                }
                else
                {
                  v338 = *v245;
                  v472[0] = 0;
                  *(_QWORD *)(v338 + 8 * v337) = v335;
                }
                *(_DWORD *)(a1 + 228) = v337 + 1;
                result = v472[0];
                v472[0] = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                  {
                    v464 = v329;
                    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                    v329 = v464;
                  }
                  else
                  {
                    *(_DWORD *)result -= 2;
                  }
                }
              }
            }
            while (v247);
          }
        }
        else if ((_DWORD)v247)
        {
          v248 = -(uint64_t)v246;
          do
          {
            v249 = (unsigned __int16 *)v246;
            v246 += 2 * v247;
            for (j = v249; ; ++j)
            {
              v251 = *j;
              if ((v251 - 9) >= 5 && v251 != 32)
                break;
              ++v249;
              if (!--v247)
                return result;
            }
            v252 = j;
            while ((unsigned __int16)v251 > 0x20u || ((1 << v251) & 0x100003E00) == 0)
            {
              if (!--v247)
                goto LABEL_361;
              v253 = v252[1];
              ++v252;
              LOWORD(v251) = v253;
            }
            v246 = (unint64_t)v252;
LABEL_361:
            if ((unint64_t)j < v246)
            {
              v254 = v4[1];
              if (v254)
              {
                a2 = (WTF::StringImpl *)(((unint64_t)v249 + v248) >> 1);
                if ((_DWORD)a2 || *((_DWORD *)v254 + 1) > ((v246 - (unint64_t)v249) >> 1))
                {
                  v459 = v248;
                  WTF::StringImpl::substring(v254);
                  v248 = v459;
                  v254 = v469;
                }
                else
                {
                  *(_DWORD *)v254 += 2;
                }
                v472[0] = v254;
              }
              else
              {
                v472[0] = 0;
              }
              v255 = *(unsigned int *)(a1 + 228);
              if ((_DWORD)v255 == *(_DWORD *)(a1 + 224))
              {
                v460 = v248;
                v257 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v255 + 1, (unint64_t)v472);
                v248 = v460;
                v255 = *(unsigned int *)(a1 + 228);
                v258 = *(_QWORD *)(a1 + 216);
                v259 = *v257;
                *v257 = 0;
                *(_QWORD *)(v258 + 8 * v255) = v259;
              }
              else
              {
                v256 = *v245;
                v472[0] = 0;
                *(_QWORD *)(v256 + 8 * v255) = v254;
              }
              *(_DWORD *)(a1 + 228) = v255 + 1;
              result = v472[0];
              v472[0] = 0;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                {
                  v458 = v248;
                  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                  v248 = v458;
                }
                else
                {
                  *(_DWORD *)result -= 2;
                }
              }
            }
          }
          while (v247);
        }
      }
      return result;
    }
    return WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
  }
  if (!(_DWORD)v6)
    goto LABEL_345;
  if ((*(unsigned __int16 *)v239 | (32 * (*(unsigned __int16 *)v239 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::reportURI))
  {
    v417 = 1;
    do
    {
      v240 = v417;
      if (v6 == v417)
        break;
      v418 = *(unsigned __int16 *)&v239[2 * v417] | (32
                                                   * (*(unsigned __int16 *)&v239[2 * v417] - 65 < 0x1A));
      ++v417;
    }
    while (v418 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                       + WebCore::ContentSecurityPolicyDirectiveNames::reportURI[v240]));
LABEL_344:
    if (v240 >= v6)
      goto LABEL_345;
  }
LABEL_59:
  if ((_DWORD)v6 != 25)
    goto LABEL_60;
  v260 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v260) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
      goto LABEL_715;
    v261 = 0;
    v262 = v260 + 1;
    while (v6 - 1 != v261)
    {
      v263 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v262[v261]);
      v264 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aUpgradeInsecur[++v261]);
      if (v263 != v264)
      {
        if (v261 < v6)
          goto LABEL_60;
        break;
      }
    }
LABEL_384:
    if (*(_BYTE *)(a1 + 17))
      return WebCore::ContentSecurityPolicy::reportInvalidDirectiveInReportOnlyMode(*(_QWORD *)a1, (const WTF::String *)v3);
    if (!*(_BYTE *)(a1 + 19))
    {
      *(_BYTE *)(a1 + 19) = 1;
      v311 = *(WebCore::ContentSecurityPolicy **)a1;
      *((_BYTE *)v311 + 182) = 1;
      v312 = *((_QWORD *)v311 + 1);
      if (!v312)
        return result;
      result = *(_QWORD *)(v312 + 8);
      if (!result)
        return result;
      v313 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result - 96) + 112))(result - 96);
      v314 = *(WTF::StringImpl **)v313;
      if (*(_QWORD *)v313)
        *(_DWORD *)v314 += 2;
      v469 = v314;
      v315 = *(_OWORD *)(v313 + 24);
      v470 = *(_OWORD *)(v313 + 8);
      v471 = v315;
      if ((WTF::URL::protocolIs() & 1) != 0 || WTF::URL::protocolIs())
        WTF::URL::setProtocol();
      v353 = (uint64_t *)((char *)v311 + 192);
      if (WebCore::SecurityOriginData::shouldTreatAsOpaqueOrigin((WebCore::SecurityOriginData *)&v469, v352))
        WebCore::SecurityOriginData::createOpaque((uint64_t)v472);
      else
        WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness((WebCore::SecurityOriginData *)&v469, (uint64_t)v472);
      WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add(v353, (uint64_t)v472, (uint64_t)v468);
      if (v473 != -1)
        ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_14[v473])(v468, v472);
      result = (uint64_t)v469;
      v469 = 0;
      if (!result)
        return result;
      goto LABEL_813;
    }
    return WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
  }
  if ((*(unsigned __int16 *)v260 | (32 * (*(unsigned __int16 *)v260 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
    goto LABEL_715;
  v419 = 1u;
  do
  {
    v420 = v419;
    if (v6 == v419)
      break;
    v421 = *(unsigned __int16 *)&v260[2 * v419] | (32 * (*(unsigned __int16 *)&v260[2 * v419] - 65 < 0x1A));
    ++v419;
  }
  while (v421 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aUpgradeInsecur[v420]));
  if (v420 >= v6)
    goto LABEL_384;
LABEL_60:
  if ((_DWORD)v6 != 23)
  {
    if ((_DWORD)v6 != 13)
      goto LABEL_62;
    v270 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v271 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v270);
      if (v271 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
        return (uint64_t)WebCore::ContentSecurityPolicy::reportUnsupportedDirective(*(WebCore::ContentSecurityPolicy **)a1, (const WTF::String *)v3);
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v270[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
        return (uint64_t)WebCore::ContentSecurityPolicy::reportUnsupportedDirective(*(WebCore::ContentSecurityPolicy **)a1, (const WTF::String *)v3);
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v270[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
        return (uint64_t)WebCore::ContentSecurityPolicy::reportUnsupportedDirective(*(WebCore::ContentSecurityPolicy **)a1, (const WTF::String *)v3);
      v272 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v270[3]);
      if (v272 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
        return (uint64_t)WebCore::ContentSecurityPolicy::reportUnsupportedDirective(*(WebCore::ContentSecurityPolicy **)a1, (const WTF::String *)v3);
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v270[4]) != v271)
        return (uint64_t)WebCore::ContentSecurityPolicy::reportUnsupportedDirective(*(WebCore::ContentSecurityPolicy **)a1, (const WTF::String *)v3);
      v273 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v270[5]);
      if (v273 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v270[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v270[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 45)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v270[8]) != v271
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v270[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 121)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v270[10]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v270[11]) != v273)
      {
        return (uint64_t)WebCore::ContentSecurityPolicy::reportUnsupportedDirective(*(WebCore::ContentSecurityPolicy **)a1, (const WTF::String *)v3);
      }
      v274 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v270[12]);
    }
    else
    {
      v436 = *(unsigned __int16 *)v270 | (32 * (*(unsigned __int16 *)v270 - 65 < 0x1A));
      if (v436 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
        return (uint64_t)WebCore::ContentSecurityPolicy::reportUnsupportedDirective(*(WebCore::ContentSecurityPolicy **)a1, (const WTF::String *)v3);
      if ((*((unsigned __int16 *)v270 + 1) | (32 * (*((unsigned __int16 *)v270 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
        return (uint64_t)WebCore::ContentSecurityPolicy::reportUnsupportedDirective(*(WebCore::ContentSecurityPolicy **)a1, (const WTF::String *)v3);
      if ((*((unsigned __int16 *)v270 + 2) | (32 * (*((unsigned __int16 *)v270 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
        return (uint64_t)WebCore::ContentSecurityPolicy::reportUnsupportedDirective(*(WebCore::ContentSecurityPolicy **)a1, (const WTF::String *)v3);
      v272 = *((unsigned __int16 *)v270 + 3) | (32 * (*((unsigned __int16 *)v270 + 3) - 65 < 0x1A));
      if (v272 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
        return (uint64_t)WebCore::ContentSecurityPolicy::reportUnsupportedDirective(*(WebCore::ContentSecurityPolicy **)a1, (const WTF::String *)v3);
      if ((*((unsigned __int16 *)v270 + 4) | (32 * (*((unsigned __int16 *)v270 + 4) - 65 < 0x1A))) != v436)
        return (uint64_t)WebCore::ContentSecurityPolicy::reportUnsupportedDirective(*(WebCore::ContentSecurityPolicy **)a1, (const WTF::String *)v3);
      v437 = *((unsigned __int16 *)v270 + 5) | (32 * (*((unsigned __int16 *)v270 + 5) - 65 < 0x1A));
      if (v437 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
        || (*((unsigned __int16 *)v270 + 6) | (32 * (*((unsigned __int16 *)v270 + 6) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
        || (*((unsigned __int16 *)v270 + 7) | (32 * (*((unsigned __int16 *)v270 + 7) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 45)
        || (*((unsigned __int16 *)v270 + 8) | (32 * (*((unsigned __int16 *)v270 + 8) - 65 < 0x1A))) != v436
        || (*((unsigned __int16 *)v270 + 9) | (32 * (*((unsigned __int16 *)v270 + 9) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 121)
        || (*((unsigned __int16 *)v270 + 10) | (32 * (*((unsigned __int16 *)v270 + 10) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
        || (*((unsigned __int16 *)v270 + 11) | (32 * (*((unsigned __int16 *)v270 + 11) - 65 < 0x1A))) != v437)
      {
        return (uint64_t)WebCore::ContentSecurityPolicy::reportUnsupportedDirective(*(WebCore::ContentSecurityPolicy **)a1, (const WTF::String *)v3);
      }
      v274 = *((unsigned __int16 *)v270 + 12) | (32 * (*((unsigned __int16 *)v270 + 12) - 65 < 0x1A));
    }
    if (v274 != v272)
      return (uint64_t)WebCore::ContentSecurityPolicy::reportUnsupportedDirective(*(WebCore::ContentSecurityPolicy **)a1, (const WTF::String *)v3);
    if (*(_QWORD *)(a1 + 184))
      return WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
    v275 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
    v276 = WebCore::ContentSecurityPolicyDirective::ContentSecurityPolicyDirective(v275, (const WebCore::ContentSecurityPolicyDirectiveList *)a1, v4, (const WTF::String *)(v4 + 1));
    *v276 = off_1E34036F0;
    *((_WORD *)v276 + 16) = 0;
    v276[5] = 0;
    WebCore::ContentSecurityPolicyTrustedTypesDirective::parse((WTF::StringImpl *)v276, (const WTF::String *)(v4 + 1));
    result = *(_QWORD *)(a1 + 184);
    *(_QWORD *)(a1 + 184) = v275;
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  v265 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v265) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98))
      return (uint64_t)WebCore::ContentSecurityPolicy::reportUnsupportedDirective(*(WebCore::ContentSecurityPolicy **)a1, (const WTF::String *)v3);
    v266 = 0;
    v267 = v265 + 1;
    while (v6 - 1 != v266)
    {
      v268 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v267[v266]);
      v269 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aBlockAllMixedC[++v266]);
      if (v268 != v269)
      {
        if (v266 < v6)
          goto LABEL_62;
        break;
      }
    }
LABEL_392:
    if (!*(_BYTE *)(a1 + 20))
    {
      *(_BYTE *)(a1 + 20) = 1;
      return result;
    }
    return WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
  }
  if ((*(unsigned __int16 *)v265 | (32 * (*(unsigned __int16 *)v265 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98))
    return (uint64_t)WebCore::ContentSecurityPolicy::reportUnsupportedDirective(*(WebCore::ContentSecurityPolicy **)a1, (const WTF::String *)v3);
  v433 = 1u;
  do
  {
    v434 = v433;
    if (v6 == v433)
      break;
    v435 = *(unsigned __int16 *)&v265[2 * v433] | (32 * (*(unsigned __int16 *)&v265[2 * v433] - 65 < 0x1A));
    ++v433;
  }
  while (v435 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aBlockAllMixedC[v434]));
  if (v434 >= v6)
    goto LABEL_392;
LABEL_62:
  if ((_DWORD)v6 != 25)
    return (uint64_t)WebCore::ContentSecurityPolicy::reportUnsupportedDirective(*(WebCore::ContentSecurityPolicy **)a1, (const WTF::String *)v3);
LABEL_715:
  v422 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v422) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
      return (uint64_t)WebCore::ContentSecurityPolicy::reportUnsupportedDirective(*(WebCore::ContentSecurityPolicy **)a1, (const WTF::String *)v3);
    v423 = 0;
    v424 = v422 + 1;
    while (v6 - 1 != v423)
    {
      v425 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v424[v423]);
      v426 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aRequireTrusted_0[++v423]);
      if (v425 != v426)
      {
        if (v423 < v6)
          return (uint64_t)WebCore::ContentSecurityPolicy::reportUnsupportedDirective(*(WebCore::ContentSecurityPolicy **)a1, (const WTF::String *)v3);
        break;
      }
    }
  }
  else
  {
    if ((*(unsigned __int16 *)v422 | (32 * (*(unsigned __int16 *)v422 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
      return (uint64_t)WebCore::ContentSecurityPolicy::reportUnsupportedDirective(*(WebCore::ContentSecurityPolicy **)a1, (const WTF::String *)v3);
    v441 = 1u;
    do
    {
      v442 = v441;
      if (v6 == v441)
        break;
      v443 = *(unsigned __int16 *)&v422[2 * v441] | (32
                                                   * (*(unsigned __int16 *)&v422[2 * v441] - 65 < 0x1A));
      ++v441;
    }
    while (v443 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aRequireTrusted_0[v442]));
    if (v442 < v6)
      return (uint64_t)WebCore::ContentSecurityPolicy::reportUnsupportedDirective(*(WebCore::ContentSecurityPolicy **)a1, (const WTF::String *)v3);
  }
  if (*(_BYTE *)(a1 + 21))
    return WebCore::ContentSecurityPolicy::reportDuplicateDirective(*(_QWORD *)a1, (const WTF::String *)v3);
  v427 = v4[1];
  if (v427)
  {
    v428 = (unsigned __int16 *)*((_QWORD *)v427 + 1);
    v429 = *((unsigned int *)v427 + 1);
    if ((*((_BYTE *)v427 + 16) & 4) == 0)
    {
      if (*((_DWORD *)v427 + 1))
      {
        do
        {
          while (1)
          {
            v430 = *v428;
            if ((v430 - 9) >= 5 && v430 != 32)
              break;
            ++v428;
            if (!--v429)
              goto LABEL_799;
          }
          if (v429 >= 8
            && (v430 & 0xFFFFFFDF) == 7
            && (v428[1] & 0xFFDF) == 0x53
            && (v428[2] & 0xFFDF) == 0x43
            && (v428[3] & 0xFFDF) == 0x52
            && (v428[4] & 0xFFDF) == 0x49
            && (v428[5] & 0xFFDF) == 0x50
            && (v428[6] & 0xFFDF) == 0x54
            && (v428[7] & 0xFFDF) == 7)
          {
            v428 += 8;
            *(_BYTE *)(a1 + 21) = 1;
            v429 -= 8;
          }
          else
          {
            v431 = *(WTF::StringImpl **)a1;
            WTF::String::String();
            WebCore::ContentSecurityPolicy::reportInvalidTrustedTypesSinkGroup(v431, v469);
            result = (uint64_t)v469;
            v469 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v432);
              else
                *(_DWORD *)result -= 2;
            }
          }
        }
        while (v429);
      }
      return result;
    }
  }
  else
  {
    v428 = 0;
    v429 = 0;
  }
  if (v429)
  {
    do
    {
      while (1)
      {
        v444 = *(unsigned __int8 *)v428;
        if ((v444 - 9) < 5 || v444 == 32)
          break;
        if (v429 >= 8
          && (v444 & 0xFFFFFFDF) == 7
          && (*((_BYTE *)v428 + 1) & 0xDF) == 0x53
          && (v428[1] & 0xDF) == 0x43
          && (*((_BYTE *)v428 + 3) & 0xDF) == 0x52
          && (v428[2] & 0xDF) == 0x49
          && (*((_BYTE *)v428 + 5) & 0xDF) == 0x50
          && (v428[3] & 0xDF) == 0x54
          && (*((_BYTE *)v428 + 7) & 0xDF) == 7)
        {
          v428 += 4;
          *(_BYTE *)(a1 + 21) = 1;
          v429 -= 8;
        }
        else
        {
          v445 = *(WTF::StringImpl **)a1;
          WTF::String::String();
          WebCore::ContentSecurityPolicy::reportInvalidTrustedTypesSinkGroup(v445, v469);
          result = (uint64_t)v469;
          v469 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v446);
            else
              *(_DWORD *)result -= 2;
          }
        }
        if (!v429)
          return result;
      }
      v428 = (unsigned __int16 *)((char *)v428 + 1);
      --v429;
    }
    while (v429);
LABEL_799:
    v447 = *(WebCore::ContentSecurityPolicy **)a1;
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v472[0] = v469;
    v468[0] = 0;
    if (v469)
    {
      if (*((_DWORD *)v469 + 1) && *((_BYTE *)v447 + 181))
      {
        v448 = (void (***)(_QWORD, uint64_t, uint64_t, _QWORD *, _QWORD))*((_QWORD *)v447 + 2);
        if (v448)
        {
          (**v448)(v448, 8, 2, v472, 0);
        }
        else
        {
          v449 = *((_QWORD *)v447 + 1);
          if (v449)
          {
            v450 = *(_QWORD *)(v449 + 8);
            if (v450)
            {
              v469 = 0;
              (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, WTF::StringImpl **, _QWORD, _QWORD, WTF::StringImpl **, _QWORD, _QWORD))(*(_QWORD *)(v450 - 96) + 416))(v450 - 96, 8, 2, v472, v468, 0, 0, &v469, 0, 0);
              v451 = v469;
              v469 = 0;
              if (v451)
              {
                if (*(_DWORD *)v451 == 1)
                {
                  v453 = (WTF *)MEMORY[0x19AEA6024]();
                  WTF::fastFree(v453, v454);
                }
                else
                {
                  --*(_DWORD *)v451;
                }
              }
              v452 = v468[0];
              v468[0] = 0;
              if (v452)
              {
                if (*(_DWORD *)v452 == 2)
                  WTF::StringImpl::destroy(v452, v216);
                else
                  *(_DWORD *)v452 -= 2;
              }
            }
          }
        }
      }
      result = v472[0];
      v472[0] = 0;
      if (result)
      {
LABEL_813:
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v216);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

BOOL WebCore::vp9HardwareDecoderAvailable(WebCore *this)
{
  _BOOL8 result;

  {
    if ((unsigned __int16)WebCore::VP9TestingOverrides::singleton(void)::instance >= 0x100u)
      return WebCore::VP9TestingOverrides::singleton(void)::instance == 0;
  }
  else
  {
    xmmword_1EE2F9BB8 = 0u;
    *(_OWORD *)&byte_1EE2F9BC8 = 0u;
    WebCore::VP9TestingOverrides::singleton(void)::instance = 0u;
  }
  {
    if (WebCore::canLoad_VideoToolbox_VTIsHardwareDecodeSupported(void)::loaded)
      return WebCore::softLinkVideoToolboxVTIsHardwareDecodeSupported(1987063865) != 0;
    return 0;
  }
  else
  {
    result = WebCore::init_VideoToolbox_VTIsHardwareDecodeSupported(this);
    WebCore::canLoad_VideoToolbox_VTIsHardwareDecodeSupported(void)::loaded = result;
    if ((_DWORD)result)
      return WebCore::softLinkVideoToolboxVTIsHardwareDecodeSupported(1987063865) != 0;
  }
  return result;
}

BOOL WebCore::init_VideoToolbox_VTIsHardwareDecodeSupported(WebCore *this)
{
  void *v1;

  v1 = (void *)WebCore::VideoToolboxLibrary(0);
  WebCore::softLinkVideoToolboxVTIsHardwareDecodeSupported = (uint64_t (*)(_QWORD))dlsym(v1, "VTIsHardwareDecodeSupported");
  return WebCore::softLinkVideoToolboxVTIsHardwareDecodeSupported != 0;
}

uint64_t WebCore::registerSupplementalVP9Decoder(WebCore *this)
{
  uint64_t result;

  result = WebCore::VideoToolboxLibrary((WebCore *)1);
  if (result)
  {
    result = WebCore::canLoad_VideoToolbox_VTRegisterSupplementalVideoDecoderIfAvailable((WebCore *)result);
    if ((_DWORD)result)
      return WebCore::softLink_VideoToolbox_VTRegisterSupplementalVideoDecoderIfAvailable((WebCore *)0x76703039);
  }
  return result;
}

uint64_t WebCore::VideoToolboxLibrary(WebCore *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore19VideoToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_3_2;
  v3 = (char)this;
  if (WebCore::VideoToolboxLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::VideoToolboxLibrary(BOOL)::once, block);
  return WebCore::VideoToolboxLibrary(BOOL)::frameworkLibrary;
}

BOOL WebCore::canLoad_VideoToolbox_VTRegisterSupplementalVideoDecoderIfAvailable(WebCore *this)
{
  _BOOL8 result;

  if (byte_1EE338119 == 1)
    return _MergedGlobals_42 != 0;
  result = WebCore::init_VideoToolbox_VTRegisterSupplementalVideoDecoderIfAvailable(this);
  _MergedGlobals_42 = result;
  byte_1EE338119 = 1;
  return result;
}

BOOL WebCore::init_VideoToolbox_VTRegisterSupplementalVideoDecoderIfAvailable(WebCore *this)
{
  void *v1;

  v1 = (void *)WebCore::VideoToolboxLibrary(0);
  WebCore::softLinkVideoToolboxVTRegisterSupplementalVideoDecoderIfAvailable = (uint64_t (*)(_QWORD))dlsym(v1, "VTRegisterSupplementalVideoDecoderIfAvailable");
  return WebCore::softLinkVideoToolboxVTRegisterSupplementalVideoDecoderIfAvailable != 0;
}

WTF *WebCore::Layout::InlineFormattingContext::layoutFloatContentOnly(uint64_t *a1, uint64_t a2, uint64_t a3, const WebCore::RenderStyle *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::Layout::FormattingContext *v15;
  WebCore::Layout::LayoutState *v16;
  uint64_t v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  _QWORD v30[12];
  WTF *v31;
  _QWORD v32[3];
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;

  v6 = a1[7];
  v7 = a1[2];
  v35 = v7;
  ++*(_DWORD *)(v7 + 8);
  v36 = *(_OWORD *)(a1 + 3);
  v8 = *(_QWORD *)a1[8];
  v9 = *a1;
  v10 = *(_QWORD *)(a1[1] + 64);
  v32[0] = v6;
  v32[1] = v9;
  v32[2] = v10;
  v33 = 256;
  v34 = 0;
  result = WebCore::Layout::InlineItemsBuilder::build((WTF *)v32, 0, 0, a4);
  v12 = *(unsigned int *)(v6 + 28);
  if (!(_DWORD)v12)
  {
    v35 = 0;
LABEL_28:
    v29 = *(_DWORD *)(v7 + 8);
    if (!v29)
    {
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x1943B4040);
    }
    *(_DWORD *)(v7 + 8) = v29 - 1;
    return result;
  }
  v13 = *(_QWORD *)(v6 + 16);
  v14 = 24 * v12;
  do
  {
    if ((*(_WORD *)(v13 + 21) & 0xF) == 7)
    {
      v15 = *(WebCore::Layout::FormattingContext **)v13;
      v16 = (WebCore::Layout::LayoutState *)a1[1];
      v17 = *(_QWORD *)(*(_QWORD *)v13 + 104);
      if (*((_DWORD *)v16 + 2))
        v18 = 1;
      else
        v18 = v17 == 0;
      if (v18)
        v17 = WebCore::Layout::LayoutState::ensureGeometryForBoxSlow(v16, *(_QWORD *)v13);
      v19 = *(_DWORD *)(a2 + 4);
      v20 = *(_DWORD *)(a2 + 12);
      v21 = *(_DWORD *)(v17 + 16);
      v22 = *(_DWORD *)(v17 + 24);
      v23 = __OFADD__(v19, v21);
      v24 = v19 + v21;
      LODWORD(v25) = (v19 >> 31) + 0x7FFFFFFF;
      v25 = v23 ? v25 : v24;
      v23 = __OFADD__(v20, v22);
      v26 = v20 + v22;
      LODWORD(v27) = (v20 >> 31) + 0x7FFFFFFF;
      v27 = v23 ? v27 : v26;
      *(_QWORD *)v17 = v25 | (v27 << 32);
      v32[0] = *(_QWORD *)(a2 + 4);
      *(_QWORD *)v17 = WebCore::Layout::FloatingContext::positionForFloat(&v35, (uint64_t)v15, v17, v32);
      WebCore::Layout::FloatingContext::makeFloatItem(v15, (uint64_t)&v35, (uint64_t *)v17, 0, 0, (uint64_t)v30);
      WebCore::Layout::PlacedFloats::append(v8, (unint64_t)v30);
      result = v31;
      v31 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1)
          result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
        else
          --*((_DWORD *)result + 2);
      }
      if (v30[0])
      {
        v28 = *(_DWORD *)(v30[0] + 8);
        if (!v28)
          goto LABEL_30;
        *(_DWORD *)(v30[0] + 8) = v28 - 1;
      }
    }
    v13 += 24;
    v14 -= 24;
  }
  while (v14);
  v7 = v35;
  v35 = 0;
  if (v7)
    goto LABEL_28;
  return result;
}

unint64_t WebCore::Layout::FloatingContext::positionForFloat(_QWORD *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  char v12;
  int v13;
  BOOL v14;
  int v15;
  int v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  signed int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  _BOOL4 v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  char v58;
  char v59;
  unsigned __int8 v60;
  int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  int v83;
  unsigned int v84;
  BOOL v86;
  BOOL v87;
  unsigned int v88;
  char v89;
  char v90;
  unsigned __int8 v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  int v97;
  unsigned __int8 v98;
  uint64_t v99;
  _DWORD *v100;
  int v101;
  unint64_t v102;
  int v103;
  _BOOL4 v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  _DWORD *v108;
  int v109;
  unint64_t v110;
  int v111;
  _BOOL4 v112;
  unsigned int v113;
  int v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  unint64_t v119;
  int v120;
  int v121;
  uint64_t v122;
  _DWORD *v123;
  unint64_t v124;
  int v125;
  int v126;
  unsigned int v127;
  int v128;
  unint64_t v129;
  void (**v130)(WebCore::Layout::FloatAvoider *__hidden);
  unint64_t v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  char v138;
  BOOL v139;
  unint64_t v140;
  int v141;
  int v142;
  uint64_t v143;

  v7 = *(_QWORD *)a3;
  v8 = a1[2];
  if (*(_DWORD *)(v8 + 20))
  {
    WebCore::Layout::FloatingContext::absoluteCoordinates((uint64_t)a1, (WebCore::Layout::FormattingContext *)a2, v7, (uint64_t)&v140);
    v20 = v140;
    v21 = HIDWORD(v140);
    v22 = a1[2];
    v23 = *(_DWORD *)(v22 + 20);
    if (v23)
      v24 = *(_QWORD *)(v22 + 8) + 120 * v23 - 120;
    else
      v24 = 0;
    v25 = WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(v24 + 12));
    v26 = HIDWORD(v25);
    v27 = *(_QWORD *)(a2 + 32);
    if ((v27 & 0x70000) == 0)
      goto LABEL_21;
    v87 = (v27 & 0x1Fu) > 0x15 || ((1 << (v27 & 0x1F)) & 0x290016) == 0;
    if (v87 && (*(_BYTE *)(a2 + 12) & 0xFu) - 9 > 1)
      goto LABEL_21;
    v128 = v21;
    v129 = HIDWORD(v25);
    v127 = v20;
    v88 = WORD1(v27) & 7;
    if (v88 == 5)
    {
      v116 = a1[2];
      v117 = *(_DWORD *)(v116 + 20);
      if (v117)
      {
        v118 = *(_QWORD *)(v116 + 8);
        v119 = WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(v118 + 12));
        if (__OFADD__(HIDWORD(v119), v120))
          v121 = (HIDWORD(v119) >> 31) + 0x7FFFFFFF;
        else
          v121 = HIDWORD(v119) + v120;
        if (v117 != 1)
        {
          v122 = 120 * v117 - 120;
          v123 = (_DWORD *)(v118 + 132);
          do
          {
            v124 = WebCore::Layout::BoxGeometry::marginBoxRect(v123);
            v126 = (HIDWORD(v124) >> 31) + 0x7FFFFFFF;
            if (!__OFADD__(HIDWORD(v124), v125))
              v126 = HIDWORD(v124) + v125;
            if (v121 <= v126)
              v121 = v126;
            v123 += 30;
            v122 -= 120;
          }
          while (v122);
        }
        v98 = 1;
      }
      else
      {
        v98 = 0;
        v121 = 0;
      }
      v115 = v121 & 0xFFFFFF00;
      v97 = v121;
LABEL_188:
      v14 = v98 == 0;
      v20 = v127;
      LODWORD(v21) = v128;
      LODWORD(v26) = v129;
      if (!v14)
      {
        v28 = v97 | v115;
LABEL_22:
        if (v28 > (int)v26)
          LODWORD(v26) = v28;
        v29 = *(_DWORD *)(a3 + 24);
        v30 = v21 - v29;
        if (__OFSUB__((_DWORD)v21, v29))
          v30 = (v21 >> 31) + 0x7FFFFFFF;
        if (v30 < (int)v26)
        {
          LODWORD(v21) = v26 + v29;
          if (__OFADD__((_DWORD)v26, v29))
            LODWORD(v21) = (v26 >> 31) + 0x7FFFFFFF;
        }
        v31 = *(_DWORD *)(a3 + 48);
        v32 = *(_DWORD *)(a3 + 8);
        v18 = __OFADD__(v31, v32);
        v33 = v31 + v32;
        if (v18)
          v33 = (v31 >> 31) + 0x7FFFFFFF;
        v34 = *(_DWORD *)(a3 + 32);
        v35 = *(_DWORD *)(a3 + 52);
        v18 = __OFADD__(v33, v35);
        v36 = v33 + v35;
        if (v18)
          v36 = (v33 >> 31) + 0x7FFFFFFF;
        v37 = v34 + v36;
        if (__OFADD__(v34, v36))
          v37 = (v34 >> 31) + 0x7FFFFFFF;
        v38 = *(_DWORD *)(a3 + 68);
        v39 = v37 + v38;
        if (__OFADD__(v37, v38))
          v39 = (v37 >> 31) + 0x7FFFFFFF;
        v41 = *(_DWORD *)(a3 + 16);
        v40 = *(_DWORD *)(a3 + 20);
        v42 = *(_DWORD *)(a3 + 36);
        v18 = __OFADD__(v39, v42);
        v43 = v39 + v42;
        if (v18)
          v43 = (v39 >> 31) + 0x7FFFFFFF;
        v44 = *(_DWORD *)(a3 + 28);
        v45 = v20 | ((unint64_t)v21 << 32);
        v46 = *(_DWORD *)(*a1 + 56);
        v47 = a1[2];
        v48 = (*(_DWORD *)(a2 + 32) >> 25) & 7;
        if (((v46 & 0x4000000) == 0) != (*(_BYTE *)(v47 + 28) != 0))
        {
          if (v48 == 4)
          {
            if ((v46 & 0x4000000) != 0)
              LOBYTE(v48) = 1;
            else
              LOBYTE(v48) = 2;
          }
          else if (v48 == 3)
          {
            if ((v46 & 0x4000000) != 0)
              LOBYTE(v48) = 2;
            else
              LOBYTE(v48) = 1;
          }
          if (*(_BYTE *)(v47 + 28) && v48 == 1)
          {
            v51 = 1;
LABEL_49:
            v130 = off_1E33F2B78;
            v131 = v45;
            v132 = v43;
            v133 = v41;
            v134 = v40;
            v135 = v29;
            v136 = v44;
            v137 = v143;
            v138 = 1;
            v139 = v51;
            if (v51)
            {
              v53 = v143 + v41;
              if (__OFADD__((_DWORD)v143, v41))
                v53 = (v143 >> 31) + 0x7FFFFFFF;
            }
            else
            {
              v18 = __OFSUB__(HIDWORD(v143), v40);
              v52 = HIDWORD(v143) - v40;
              if (v18)
                v52 = (HIDWORD(v143) >> 31) + 0x7FFFFFFF;
              v18 = __OFSUB__(v52, v43);
              v53 = v52 - v43;
              if (v18)
                v53 = (v52 >> 31) + 0x7FFFFFFF;
            }
            LODWORD(v131) = v53;
            WebCore::Layout::findAvailablePosition((uint64_t)&v130, v47 + 8, v143);
            v54 = v131;
            if (v138)
            {
              if (__OFSUB__((_DWORD)v131, v133))
                v54 = (v131 >> 31) + 0x7FFFFFFF;
              else
                v54 = v131 - v133;
            }
            v55 = v54 + v41;
            if (__OFADD__(v54, v41))
              v55 = (v54 >> 31) + 0x7FFFFFFF;
            v19 = v55 - v141;
            if (__OFSUB__(v55, v141))
              v19 = (v55 >> 31) + 0x7FFFFFFF;
            v56 = HIDWORD(v131);
            if (v138)
            {
              if (__OFSUB__(HIDWORD(v131), v135))
                v56 = (HIDWORD(v131) >> 31) + 0x7FFFFFFF;
              else
                v56 = HIDWORD(v131) - v135;
            }
            v57 = v56 + v29;
            if (__OFADD__(v56, v29))
              v57 = (v56 >> 31) + 0x7FFFFFFF;
            v9 = v57 - v142;
            if (__OFSUB__(v57, v142))
              v9 = (v57 >> 31) + 0x7FFFFFFF;
            return v19 | (v9 << 32);
          }
          v86 = v48 == 2 && *(_BYTE *)(v47 + 28) == 0;
        }
        else
        {
          v51 = (v46 & 0x4000000) == 0 && v48 == 1 || v48 == 3;
          if ((v46 & 0x4000000) == 0 || v48 == 3)
            goto LABEL_49;
          v86 = v48 == 2;
        }
        v51 = v86;
        goto LABEL_49;
      }
LABEL_21:
      v28 = v26;
      goto LABEL_22;
    }
    if ((*(_DWORD *)(*a1 + 56) & 0x4000000) != 0)
      v89 = 1;
    else
      v89 = 2;
    if ((*(_DWORD *)(*a1 + 56) & 0x4000000) != 0)
      v90 = 2;
    else
      v90 = 1;
    if (v88 != 3)
      v90 = BYTE2(v27) & 7;
    if (v88 == 4)
      v91 = v89;
    else
      v91 = v90;
    v92 = a1[2];
    if (*(_BYTE *)(v92 + 28))
      v93 = 1;
    else
      v93 = 2;
    v94 = *(_QWORD *)(v92 + 8);
    v95 = *(unsigned int *)(v92 + 20);
    if (v93 == v91)
    {
      if ((_DWORD)v95)
      {
        v96 = 0;
        v97 = 0;
        v98 = 0;
        v99 = 120 * v95;
        v100 = (_DWORD *)(v94 + 12);
        do
        {
          if (!*(v100 - 1))
          {
            v101 = v98;
            v102 = WebCore::Layout::BoxGeometry::marginBoxRect(v100);
            v104 = __OFADD__(HIDWORD(v102), v103);
            v105 = (HIDWORD(v102) >> 31) + 0x7FFFFFFF;
            if (v104)
              v106 = (HIDWORD(v102) >> 31) + 0x7FFFFFFF;
            else
              v106 = HIDWORD(v102) + v103;
            if ((int)(v97 | (v96 << 8)) > v106)
              v106 = v97 | (v96 << 8);
            if (!v104)
              v105 = HIDWORD(v102) + v103;
            if (v101)
              v105 = v106;
            v97 = v105;
            v96 = v105 >> 8;
            v98 = 1;
          }
          v100 += 30;
          v99 -= 120;
        }
        while (v99);
        goto LABEL_187;
      }
    }
    else if ((_DWORD)v95)
    {
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v107 = 120 * v95;
      v108 = (_DWORD *)(v94 + 12);
      do
      {
        if (*(v108 - 1))
        {
          v109 = v98;
          v110 = WebCore::Layout::BoxGeometry::marginBoxRect(v108);
          v112 = __OFADD__(HIDWORD(v110), v111);
          v113 = (HIDWORD(v110) >> 31) + 0x7FFFFFFF;
          if (v112)
            v114 = (HIDWORD(v110) >> 31) + 0x7FFFFFFF;
          else
            v114 = HIDWORD(v110) + v111;
          if ((int)(v97 | (v96 << 8)) > v114)
            v114 = v97 | (v96 << 8);
          if (!v112)
            v113 = HIDWORD(v110) + v111;
          if (v109)
            v113 = v114;
          v97 = v113;
          v96 = v113 >> 8;
          v98 = 1;
        }
        v108 += 30;
        v107 -= 120;
      }
      while (v107);
      goto LABEL_187;
    }
    v98 = 0;
    v97 = 0;
    v96 = 0;
LABEL_187:
    v115 = v96 << 8;
    goto LABEL_188;
  }
  v9 = HIDWORD(v7);
  v10 = *(_DWORD *)(*a1 + 56);
  v11 = *(unsigned __int8 *)(v8 + 28);
  v12 = ((v10 & 0x4000000) == 0) ^ (*(_BYTE *)(v8 + 28) != 0);
  v13 = (*(_DWORD *)(a2 + 32) >> 25) & 7;
  if ((v12 & 1) != 0)
  {
    if ((v10 & 0x4000000) != 0)
      v58 = 1;
    else
      v58 = 2;
    if ((v10 & 0x4000000) != 0)
      v59 = 2;
    else
      v59 = 1;
    if (v13 != 3)
      v59 = (*(_DWORD *)(a2 + 32) >> 25) & 7;
    if (v13 == 4)
      v60 = v58;
    else
      v60 = v59;
    if (v11)
      v61 = 1;
    else
      v61 = 2;
    if (v61 == v60)
      goto LABEL_15;
  }
  else if ((v10 & 0x4000000) != 0 && v13 != 3)
  {
    if (v13 == 2)
    {
LABEL_15:
      v17 = *(_DWORD *)(a3 + 16);
      v18 = __OFADD__(*a4, v17);
      v19 = *a4 + v17;
      if (v18)
        v19 = (*a4 >> 31) + 0x7FFFFFFF;
      return v19 | (v9 << 32);
    }
  }
  else
  {
    v14 = (v10 & 0x4000000) == 0 && v13 == 1;
    v15 = v14;
    if (v13 == 3 || v15 != 0)
      goto LABEL_15;
  }
  v62 = a4[1];
  v18 = __OFADD__(*a4, v62);
  v63 = *a4 + v62;
  v64 = (*a4 >> 31) + 0x7FFFFFFF;
  if (!v18)
    v64 = v63;
  v65 = *(_DWORD *)(a3 + 20);
  v18 = __OFSUB__(v64, v65);
  v66 = v64 - v65;
  v67 = (v64 >> 31) + 0x7FFFFFFF;
  if (!v18)
    v67 = v66;
  v68 = *(_DWORD *)(a3 + 8);
  v69 = *(_DWORD *)(a3 + 48);
  v70 = *(_DWORD *)(a3 + 52);
  v18 = __OFADD__(v69, v68);
  v71 = v69 + v68;
  v72 = (v69 >> 31) + 0x7FFFFFFF;
  if (v18)
    v71 = v72;
  v18 = __OFADD__(v71, v70);
  v73 = v71 + v70;
  v74 = (v71 >> 31) + 0x7FFFFFFF;
  if (!v18)
    v74 = v73;
  v75 = *(_DWORD *)(a3 + 32);
  v76 = *(_DWORD *)(a3 + 36);
  v18 = __OFADD__(v75, v74);
  v77 = v75 + v74;
  v78 = (v75 >> 31) + 0x7FFFFFFF;
  if (v18)
    v77 = v78;
  v79 = *(_DWORD *)(a3 + 68);
  v18 = __OFADD__(v77, v79);
  v80 = v77 + v79;
  v81 = (v77 >> 31) + 0x7FFFFFFF;
  if (!v18)
    v81 = v80;
  v18 = __OFADD__(v81, v76);
  v82 = v81 + v76;
  v83 = (v81 >> 31) + 0x7FFFFFFF;
  if (!v18)
    v83 = v82;
  v18 = __OFSUB__(v67, v83);
  v84 = v67 - v83;
  v19 = (v67 >> 31) + 0x7FFFFFFF;
  if (!v18)
    v19 = v84;
  return v19 | (v9 << 32);
}

WebCore::Layout::FormattingContext *WebCore::Layout::FloatingContext::makeFloatItem@<X0>(WebCore::Layout::FormattingContext *this@<X1>, uint64_t a2@<X0>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  WebCore::Layout::FormattingContext *v15;
  WebCore::Layout::FormattingContext *result;
  unsigned int v17;
  int v18;
  int v19;
  _BOOL4 v22;
  uint64_t v23;
  WebCore::Layout::FormattingContext *v24;
  const WebCore::Layout::Box *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  char v29;
  char v30;
  char v31;
  _BOOL4 v33;
  BOOL v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v11 = *a3;
  v36 = *((_OWORD *)a3 + 2);
  v37 = *((_OWORD *)a3 + 1);
  v12 = a3[1];
  v35 = *((_OWORD *)a3 + 3);
  v13 = a3[8];
  v14 = HIDWORD(*a3);
  v15 = **(WebCore::Layout::FormattingContext ***)(a2 + 16);
  result = WebCore::Layout::FormattingContext::containingBlock(this, this);
  if (result == v15)
  {
    v17 = v11;
  }
  else
  {
    v24 = result;
    v17 = v11;
    do
    {
      result = (WebCore::Layout::FormattingContext *)WebCore::Layout::LayoutState::geometryForBox(*(_QWORD *)(a2 + 8), (uint64_t)v24);
      v26 = *((_DWORD *)result + 1);
      if (__OFADD__(v17, *(_DWORD *)result))
        v17 = (v17 >> 31) + 0x7FFFFFFF;
      else
        v17 += *(_DWORD *)result;
      v27 = __OFADD__((_DWORD)v14, v26);
      v28 = v14 + v26;
      if (v27)
        v14 = (v14 >> 31) + 0x7FFFFFFF;
      else
        v14 = v28;
      if ((*((_WORD *)v24 + 6) & 0x80) != 0)
      {
        v24 = 0;
      }
      else
      {
        result = WebCore::Layout::FormattingContext::containingBlock(v24, v25);
        v24 = result;
      }
    }
    while (v24 != v15);
  }
  v18 = *(_DWORD *)(*(_QWORD *)a2 + 56);
  v19 = (*((_DWORD *)this + 8) >> 25) & 7;
  if (((v18 & 0x4000000) == 0) != (*(_BYTE *)(*(_QWORD *)(a2 + 16) + 28) != 0))
  {
    if ((v18 & 0x4000000) != 0)
      v29 = 1;
    else
      v29 = 2;
    if ((v18 & 0x4000000) != 0)
      v30 = 2;
    else
      v30 = 1;
    if (v19 != 3)
      v30 = (*((_DWORD *)this + 8) >> 25) & 7;
    if (v19 == 4)
      v31 = v29;
    else
      v31 = v30;
    v33 = v31 == 2 && *(_BYTE *)(*(_QWORD *)(a2 + 16) + 28) == 0;
    if (*(_BYTE *)(*(_QWORD *)(a2 + 16) + 28))
      v34 = v31 == 1;
    else
      v34 = 0;
    v22 = v34 || v33;
  }
  else
  {
    v22 = (v18 & 0x4000000) == 0 && v19 == 1 || v19 == 3;
    if ((v18 & 0x4000000) != 0 && v19 != 3)
      v22 = v19 == 2;
  }
  ++*((_DWORD *)this + 2);
  *(_QWORD *)a6 = this;
  *(_DWORD *)(a6 + 8) = !v22;
  *(_QWORD *)(a6 + 12) = v17 | (v14 << 32);
  *(_QWORD *)(a6 + 20) = v12;
  *(_OWORD *)(a6 + 28) = v37;
  *(_OWORD *)(a6 + 44) = v36;
  *(_OWORD *)(a6 + 60) = v35;
  *(_QWORD *)(a6 + 76) = v13;
  *(_QWORD *)(a6 + 84) = v11;
  if ((*((_BYTE *)this + 13) & 2) != 0)
  {
    result = (WebCore::Layout::FormattingContext *)WebCore::Layout::Box::rareData(this);
    v23 = *((_QWORD *)result + 4);
    if (v23)
      ++*(_DWORD *)(v23 + 8);
  }
  else
  {
    v23 = 0;
  }
  *(_QWORD *)(a6 + 96) = v23;
  *(_QWORD *)(a6 + 104) = a4;
  *(_QWORD *)(a6 + 112) = a5;
  return result;
}

uint64_t WebCore::Layout::PlacedFloats::append(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  BOOL v29;

  v3 = result;
  v4 = *(_DWORD *)(a2 + 8);
  v29 = v4 == 0;
  if (v4)
    v5 = 2;
  else
    v5 = 1;
  v6 = *(unsigned int *)(result + 20);
  *(_DWORD *)(result + 24) |= v5;
  v7 = (_QWORD *)(result + 8);
  if (!(_DWORD)v6)
  {
    if (!*(_DWORD *)(result + 16))
    {
      v8 = result + 8;
      v9 = 1;
LABEL_7:
      result = WTF::Vector<WebCore::Layout::PlacedFloats::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, v9, a2);
      v10 = *(_DWORD *)(v3 + 20);
      v11 = *(_QWORD *)(v3 + 8);
      v12 = *(_QWORD *)result;
      *(_QWORD *)(v11 + 120 * v10) = *(_QWORD *)result;
      if (v12)
        ++*(_DWORD *)(v12 + 8);
      v13 = v11 + 120 * v10;
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(result + 8);
      *(_QWORD *)(v13 + 12) = *(_QWORD *)(result + 12);
      *(_DWORD *)(v13 + 20) = *(_DWORD *)(result + 20);
      *(_DWORD *)(v13 + 24) = *(_DWORD *)(result + 24);
      *(_OWORD *)(v13 + 28) = *(_OWORD *)(result + 28);
      *(_OWORD *)(v13 + 44) = *(_OWORD *)(result + 44);
      *(_OWORD *)(v13 + 60) = *(_OWORD *)(result + 60);
      *(_DWORD *)(v13 + 76) = *(_DWORD *)(result + 76);
      *(_DWORD *)(v13 + 80) = *(_DWORD *)(result + 80);
      *(_QWORD *)(v13 + 84) = *(_QWORD *)(result + 84);
      v14 = *(_QWORD *)(result + 96);
      if (v14)
        ++*(_DWORD *)(v14 + 8);
      v15 = v11 + 120 * v10;
      *(_QWORD *)(v15 + 96) = v14;
      *(_OWORD *)(v15 + 104) = *(_OWORD *)(result + 104);
      goto LABEL_12;
    }
    v17 = (_QWORD *)*v7;
    v18 = *(_QWORD *)a2;
    *(_QWORD *)*v7 = *(_QWORD *)a2;
    if (v18)
      ++*(_DWORD *)(v18 + 8);
    *((_DWORD *)v17 + 2) = v4;
    *(_QWORD *)((char *)v17 + 12) = *(_QWORD *)(a2 + 12);
    *((_DWORD *)v17 + 5) = *(_DWORD *)(a2 + 20);
    *((_DWORD *)v17 + 6) = *(_DWORD *)(a2 + 24);
    *(_OWORD *)((char *)v17 + 28) = *(_OWORD *)(a2 + 28);
    *(_OWORD *)((char *)v17 + 44) = *(_OWORD *)(a2 + 44);
    *(_OWORD *)((char *)v17 + 60) = *(_OWORD *)(a2 + 60);
    *((_DWORD *)v17 + 19) = *(_DWORD *)(a2 + 76);
    *((_DWORD *)v17 + 20) = *(_DWORD *)(a2 + 80);
    *(_QWORD *)((char *)v17 + 84) = *(_QWORD *)(a2 + 84);
    v19 = *(_QWORD *)(a2 + 96);
    if (v19)
      ++*(_DWORD *)(v19 + 8);
    goto LABEL_22;
  }
  v16 = *(_QWORD *)(a2 + 28);
  if (v4)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
LABEL_16:
      if ((_DWORD)v6 == *(_DWORD *)(result + 16))
      {
        v9 = v6 + 1;
        v8 = result + 8;
        goto LABEL_7;
      }
      v20 = (_QWORD *)*v7;
      v21 = *(_QWORD *)a2;
      *(_QWORD *)(*v7 + 120 * v6) = *(_QWORD *)a2;
      if (v21)
        ++*(_DWORD *)(v21 + 8);
      v22 = &v20[15 * v6];
      *((_DWORD *)v22 + 2) = v4;
      *(_QWORD *)((char *)v22 + 12) = *(_QWORD *)(a2 + 12);
      *((_DWORD *)v22 + 5) = *(_DWORD *)(a2 + 20);
      *((_DWORD *)v22 + 6) = *(_DWORD *)(a2 + 24);
      *(_OWORD *)((char *)v22 + 28) = *(_OWORD *)(a2 + 28);
      *(_OWORD *)((char *)v22 + 44) = *(_OWORD *)(a2 + 44);
      *(_OWORD *)((char *)v22 + 60) = *(_OWORD *)(a2 + 60);
      *((_DWORD *)v22 + 19) = *(_DWORD *)(a2 + 76);
      *((_DWORD *)v22 + 20) = *(_DWORD *)(a2 + 80);
      *(_QWORD *)((char *)v22 + 84) = *(_QWORD *)(a2 + 84);
      v19 = *(_QWORD *)(a2 + 96);
      if (v19)
        ++*(_DWORD *)(v19 + 8);
      v17 = &v20[15 * v6];
LABEL_22:
      v17[12] = v19;
      *(_OWORD *)(v17 + 13) = *(_OWORD *)(a2 + 104);
LABEL_12:
      ++*(_DWORD *)(v3 + 20);
      return result;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  for (i = 120 * v6; ; i -= 120)
  {
    v24 = v6 - 1;
    if (v6 - 1 >= (unint64_t)*(unsigned int *)(v3 + 20))
      break;
    v25 = *v7 + i;
    if (v29 == (*(_DWORD *)(v25 - 112) == 0))
    {
      v28[0] = a2;
      v28[1] = v25 - 120;
      v28[2] = &v29;
      result = WebCore::Layout::PlacedFloats::append(WebCore::Layout::PlacedFloats::Item)::$_0::operator()((uint64_t)v28);
      if ((result & 1) != 0)
      {
        v26 = (uint64_t)v7;
        v27 = v6;
        return WTF::Vector<WebCore::Layout::PlacedFloats::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WebCore::Layout::PlacedFloats::Item&>(v26, v27, a2);
      }
    }
    --v6;
    if (!v24)
    {
      v26 = (uint64_t)v7;
      v27 = 0;
      return WTF::Vector<WebCore::Layout::PlacedFloats::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WebCore::Layout::PlacedFloats::Item&>(v26, v27, a2);
    }
  }
  __break(0xC471u);
  return result;
}

WebCore::Layout::FormattingContext *WebCore::Layout::FloatingContext::absoluteCoordinates@<X0>(uint64_t a1@<X0>, WebCore::Layout::FormattingContext *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  WebCore::Layout::FormattingContext *v8;
  const WebCore::Layout::Box *v9;
  WebCore::Layout::FormattingContext *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  WebCore::Layout::FormattingContext *v15;
  WebCore::Layout::FormattingContext *result;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  char v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  WebCore::Layout::FormattingContext *v37;
  const WebCore::Layout::Box *v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  WebCore::Layout::FormattingContext *v47;
  int v48;

  v8 = WebCore::Layout::FormattingContext::containingBlock(a2, a2);
  v10 = v8;
  v11 = *(_QWORD *)(a1 + 8);
  if (!*(_DWORD *)(v11 + 8))
  {
    v12 = (uint64_t *)((char *)v8 + 104);
LABEL_3:
    v13 = *v12;
    goto LABEL_4;
  }
  v41 = *(_QWORD *)(v11 + 40);
  if (v41)
  {
    v42 = *(_DWORD *)(v41 - 8);
    v43 = ((unint64_t)v8 + ~((_QWORD)v8 << 32)) ^ (((unint64_t)v8 + ~((_QWORD)v8 << 32)) >> 22);
    v44 = 9 * ((v43 + ~(v43 << 13)) ^ ((v43 + ~(v43 << 13)) >> 8));
    v45 = (v44 ^ (v44 >> 15)) + ~((v44 ^ (v44 >> 15)) << 27);
    v46 = v42 & ((v45 >> 31) ^ v45);
    v47 = *(WebCore::Layout::FormattingContext **)(v41 + 16 * v46);
    if (v47 == v8)
    {
LABEL_49:
      v12 = (uint64_t *)(v41 + 16 * v46 + 8);
      goto LABEL_3;
    }
    v48 = 1;
    while (v47)
    {
      v46 = ((_DWORD)v46 + v48) & v42;
      v47 = *(WebCore::Layout::FormattingContext **)(v41 + 16 * v46);
      ++v48;
      if (v47 == v8)
        goto LABEL_49;
    }
  }
  v13 = 0;
LABEL_4:
  v14 = HIDWORD(a3);
  v15 = **(WebCore::Layout::FormattingContext ***)(a1 + 16);
  result = WebCore::Layout::FormattingContext::containingBlock(a2, v9);
  if (result != v15)
  {
    v37 = result;
    do
    {
      result = (WebCore::Layout::FormattingContext *)WebCore::Layout::LayoutState::geometryForBox(*(_QWORD *)(a1 + 8), (uint64_t)v37);
      v39 = *((_DWORD *)result + 1);
      if (__OFADD__((_DWORD)a3, *(_DWORD *)result))
        LODWORD(a3) = (a3 >> 31) + 0x7FFFFFFF;
      else
        LODWORD(a3) = a3 + *(_DWORD *)result;
      v27 = __OFADD__((_DWORD)v14, v39);
      v40 = v14 + v39;
      if (v27)
        v14 = (v14 >> 31) + 0x7FFFFFFF;
      else
        v14 = v40;
      if ((*((_WORD *)v37 + 6) & 0x80) != 0)
      {
        v37 = 0;
      }
      else
      {
        result = WebCore::Layout::FormattingContext::containingBlock(v37, v38);
        v37 = result;
      }
    }
    while (v37 != v15);
  }
  v17 = a3 | (v14 << 32);
  if (v10 == **(WebCore::Layout::FormattingContext ***)(a1 + 16))
  {
    *(_QWORD *)a4 = v17;
    *(_QWORD *)(a4 + 8) = 0;
    v18 = *(_DWORD *)(v13 + 32);
    v19 = *(_DWORD *)(v13 + 48);
    v27 = __OFADD__(v18, v19);
    v20 = v18 + v19;
    v21 = v27;
    v22 = (v18 >> 31) + 0x7FFFFFFF;
    if ((v21 & 1) == 0)
      v22 = v20;
    v23 = *(_DWORD *)(v13 + 8);
    v27 = __OFADD__(v22, v23);
    v24 = v22 + v23;
    if (v27)
      v24 = (v22 >> 31) + 0x7FFFFFFF;
    *(_DWORD *)(a4 + 16) = v22;
    *(_DWORD *)(a4 + 20) = v24;
  }
  else
  {
    result = (WebCore::Layout::FormattingContext *)WebCore::Layout::FloatingContext::mapTopLeftToPlacedFloatsRoot(a1, v10, *(_QWORD *)v13);
    *(_QWORD *)a4 = v17;
    *(_QWORD *)(a4 + 8) = result;
    v25 = *(_DWORD *)(v13 + 32);
    v26 = *(_DWORD *)(v13 + 48);
    v27 = __OFADD__(v25, v26);
    v28 = v25 + v26;
    v29 = v27;
    v30 = (v25 >> 31) + 0x7FFFFFFF;
    if (v27)
      v31 = v30;
    else
      v31 = v28;
    v27 = __OFADD__((_DWORD)result, v31);
    v32 = (_DWORD)result + v31;
    if (v27)
      v32 = (result >> 31) + 0x7FFFFFFF;
    if (!v29)
      v30 = v28;
    v33 = *(_DWORD *)(v13 + 8);
    v27 = __OFADD__(v30, v33);
    v34 = v30 + v33;
    v35 = (v30 >> 31) + 0x7FFFFFFF;
    if (!v27)
      v35 = v34;
    v27 = __OFADD__((_DWORD)result, v35);
    v36 = (_DWORD)result + v35;
    if (v27)
      v36 = (result >> 31) + 0x7FFFFFFF;
    *(_DWORD *)(a4 + 16) = v32;
    *(_DWORD *)(a4 + 20) = v36;
  }
  return result;
}

WebCore::Layout::FormattingContext *WebCore::Layout::FormattingContext::containingBlock(WebCore::Layout::FormattingContext *this, const WebCore::Layout::Box *a2)
{
  WebCore::Layout::FormattingContext *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;

  if ((*((_WORD *)this + 6) & 0x80) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1943B4F60);
  }
  v2 = this;
  v3 = *((_QWORD *)this + 4);
  if ((v3 & 0x380000) == 0x80000 || (v3 & 0x380000) == 0x180000 || (v3 & 0x180000) != 0x100000)
  {
    do
    {
      v2 = (WebCore::Layout::FormattingContext *)*((_QWORD *)v2 + 10);
      if ((*((_WORD *)v2 + 6) & 0x80) != 0)
        break;
      v4 = *((_QWORD *)v2 + 4);
      if ((v4 & 0x1Fu) <= 0x17 && ((1 << (v4 & 0x1F)) & 0xA00006) != 0)
        break;
      v6 = *((_QWORD *)v2 + 4) & 0x1FLL;
      v7 = v6 > 0xD;
      v8 = (1 << v6) & 0x3008;
      v9 = v7 || v8 == 0;
    }
    while (v9 && !WebCore::Layout::Box::establishesFormattingContext(v2));
  }
  else if (WebCore::Layout::Box::isFixedPositioned(this))
  {
    do
      v2 = (WebCore::Layout::FormattingContext *)*((_QWORD *)v2 + 10);
    while ((*((_WORD *)v2 + 6) & 0x80) == 0 && !WebCore::Layout::Box::isContainingBlockForFixedPosition(v2));
  }
  else if ((*((_QWORD *)v2 + 4) & 0x180000) == 0x100000)
  {
    do
      v2 = (WebCore::Layout::FormattingContext *)*((_QWORD *)v2 + 10);
    while ((*((_WORD *)v2 + 6) & 0x80) == 0 && !WebCore::Layout::Box::isContainingBlockForOutOfFlowPosition(v2));
  }
  else
  {
    return (WebCore::Layout::FormattingContext *)*((_QWORD *)v2 + 10);
  }
  return v2;
}

unint64_t WebCore::Layout::BoxGeometry::marginBoxRect(_DWORD *a1)
{
  unsigned int v1;
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;

  v1 = a1[1];
  v2 = a1[6];
  v3 = v1 - v2;
  if (__OFSUB__(v1, v2))
    v3 = (v1 >> 31) + 0x7FFFFFFF;
  v4 = a1[4];
  v5 = *a1 - v4;
  if (__OFSUB__(*a1, v4))
    v5 = (*a1 >> 31) + 0x7FFFFFFF;
  return v5 | (unint64_t)(v3 << 32);
}

uint64_t WebCore::Layout::FloatAvoider::setHorizontalPosition(uint64_t result, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;

  if (*(_BYTE *)(result + 45))
  {
    v2 = *(_DWORD *)(result + 20);
    v3 = a2 + v2;
    if (__OFADD__(a2, v2))
      v3 = (a2 >> 31) + 0x7FFFFFFF;
    if (*(_BYTE *)(result + 44))
      v4 = v3;
    else
      v4 = a2;
    v5 = *(_DWORD *)(result + 36);
    v6 = __OFADD__(v5, v2);
    v7 = v5 + v2;
    if (v6)
      v7 = (v5 >> 31) + 0x7FFFFFFF;
    if (v7 <= v4)
      v7 = v4;
  }
  else
  {
    v8 = *(_DWORD *)(result + 16);
    v9 = a2 - v8;
    if (__OFSUB__(a2, v8))
      v9 = (a2 >> 31) + 0x7FFFFFFF;
    if (*(_BYTE *)(result + 44))
    {
      v10 = *(_DWORD *)(result + 24);
      v6 = __OFSUB__(v9, v10);
      v11 = v9 - v10;
      v9 = (v9 >> 31) + 0x7FFFFFFF;
      if (!v6)
        v9 = v11;
    }
    v12 = *(_DWORD *)(result + 20);
    v13 = *(_DWORD *)(result + 24);
    v6 = __OFADD__(v12, v8);
    v14 = v12 + v8;
    if (v6)
      v14 = (v12 >> 31) + 0x7FFFFFFF;
    v6 = __OFADD__(v14, v13);
    v15 = v14 + v13;
    v16 = (v14 >> 31) + 0x7FFFFFFF;
    if (!v6)
      v16 = v15;
    v17 = *(_DWORD *)(result + 40);
    v6 = __OFSUB__(v17, v16);
    v18 = v17 - v16;
    v19 = (v17 >> 31) + 0x7FFFFFFF;
    if (v6)
      v18 = v19;
    v6 = __OFADD__(v18, v12);
    v20 = v18 + v12;
    v7 = (v18 >> 31) + 0x7FFFFFFF;
    if (!v6)
      v7 = v20;
    if (v7 >= v9)
      v7 = v9;
  }
  *(_DWORD *)(result + 8) = v7;
  return result;
}

uint64_t WTF::Vector<WebCore::Layout::PlacedFloats::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 120 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::Layout::PlacedFloats::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0x2222223)
  {
    v9 = (uint64_t)v5 + 120 * *(unsigned int *)(result + 12);
    v10 = 120 * v8;
    v11 = WTF::fastMalloc((WTF *)(120 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x78;
    *(_QWORD *)v4 = v11;
    WTF::VectorMover<false,WebCore::Layout::PlacedFloats::Item>::move((uint64_t)v5, v9, v11);
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::VectorMover<false,WebCore::Layout::PlacedFloats::Item>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  if (result != a2)
  {
    for (i = result; i != a2; i += 120)
    {
      v6 = *(_QWORD *)i;
      *(_QWORD *)a3 = *(_QWORD *)i;
      if (v6)
        ++*(_DWORD *)(v6 + 8);
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(i + 8);
      *(_QWORD *)(a3 + 12) = *(_QWORD *)(i + 12);
      *(_DWORD *)(a3 + 20) = *(_DWORD *)(i + 20);
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(i + 24);
      *(_OWORD *)(a3 + 28) = *(_OWORD *)(i + 28);
      *(_OWORD *)(a3 + 44) = *(_OWORD *)(i + 44);
      *(_OWORD *)(a3 + 60) = *(_OWORD *)(i + 60);
      *(_DWORD *)(a3 + 76) = *(_DWORD *)(i + 76);
      *(_DWORD *)(a3 + 80) = *(_DWORD *)(i + 80);
      *(_QWORD *)(a3 + 84) = *(_QWORD *)(i + 84);
      v7 = *(_QWORD *)(i + 96);
      if (v7)
        ++*(_DWORD *)(v7 + 8);
      *(_QWORD *)(a3 + 96) = v7;
      *(_OWORD *)(a3 + 104) = *(_OWORD *)(i + 104);
      result = *(_QWORD *)(i + 96);
      *(_QWORD *)(i + 96) = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 8) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        else
          --*(_DWORD *)(result + 8);
      }
      v8 = *(_QWORD *)i;
      if (*(_QWORD *)i)
      {
        v9 = *(_DWORD *)(v8 + 8);
        if (!v9)
        {
          result = 286;
          __break(0xC471u);
          return result;
        }
        *(_DWORD *)(v8 + 8) = v9 - 1;
      }
      a3 += 120;
    }
  }
  return result;
}

BOOL WebCore::CertificateInfo::containsNonRootSHA1SignedCertificate(SecTrustRef *this)
{
  __SecTrust *v2;
  _BOOL8 v3;
  const __CFArray *v5;
  CFIndex CertificateCount;
  CFIndex v7;
  const void *ValueAtIndex;
  uint64_t v9;
  uint64_t v10;
  const void *v11;

  v2 = *this;
  if (!v2)
    return 0;
  v5 = SecTrustCopyCertificateChain(v2);
  CertificateCount = SecTrustGetCertificateCount(*this);
  if (CertificateCount < 2)
  {
    v3 = 0;
  }
  else
  {
    v7 = CertificateCount;
    ValueAtIndex = CFArrayGetValueAtIndex(v5, 0);
    WTF::checked_cf_cast<__SecCertificate *>(ValueAtIndex);
    if (SecCertificateGetSignatureHashAlgorithm() == 4)
    {
      v3 = 1;
    }
    else
    {
      v9 = 2;
      do
      {
        v10 = v9 - 1;
        if (v7 == v9)
          break;
        v11 = CFArrayGetValueAtIndex(v5, v9 - 1);
        WTF::checked_cf_cast<__SecCertificate *>(v11);
        ++v9;
      }
      while (SecCertificateGetSignatureHashAlgorithm() != 4);
      v3 = v10 < v7 - 1;
    }
  }
  if (v5)
    CFRelease(v5);
  return v3;
}

uint64_t WTF::checked_cf_cast<__SecCertificate *>(CFTypeRef cf)
{
  CFTypeID v2;
  uint64_t result;

  if (!cf)
    return (uint64_t)cf;
  v2 = CFGetTypeID(cf);
  if (v2 == SecCertificateGetTypeID())
    return (uint64_t)cf;
  result = 71;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::DeprecatedGlobalSettings::setTrackingPreventionEnabled(uint64_t this)
{
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  byte_1ECE90A53 = this;
  return this;
}

uint64_t WebCore::Path::Path(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  *(_DWORD *)(a1 + 64) = 0;
  v3 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v3 == -1)
  {
    *(_DWORD *)(a1 + 64) = -1;
  }
  else
  {
    v5 = a1 + 8;
    ((void (*)(uint64_t *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v3])(&v5, a1 + 8, a2 + 8);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int **v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  char v21;

  *(_DWORD *)(a1 + 64) = 0;
  v3 = *(_DWORD *)(a2 + 12);
  if (v3 == 1)
  {
    v13 = *(_QWORD *)a2;
    *(_DWORD *)(a1 + 64) = -1;
    v14 = *(_OWORD *)v13;
    v15 = *(_OWORD *)(v13 + 16);
    v16 = *(_OWORD *)(v13 + 32);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v13 + 48);
    *(_OWORD *)(a1 + 40) = v16;
    *(_OWORD *)(a1 + 24) = v15;
    *(_OWORD *)(a1 + 8) = v14;
    *(_DWORD *)(a1 + 64) = 1;
    return a1;
  }
  if (v3)
  {
    WebCore::PathStream::create((uint64_t *)a2, (uint64_t *)&v20);
    v4 = (uint64_t)v20;
    v20 = 0;
    v5 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v5 != -1)
    {
      v6 = (unsigned int **)(a1 + 8);
      if ((_DWORD)v5 == 2)
      {
        v7 = *v6;
        *v6 = (unsigned int *)v4;
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            atomic_store(1u, v7 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
          }
        }
        goto LABEL_12;
      }
      ((void (*)(char *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v5])(&v21, v6);
    }
    *(_QWORD *)(a1 + 8) = v4;
    *(_DWORD *)(a1 + 64) = 2;
LABEL_12:
    v11 = v20;
    v20 = 0;
    if (v11)
    {
      v17 = v11 + 2;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v11 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
      }
    }
  }
  return a1;
}

WebCore::LengthBox *WebCore::NinePieceImage::Data::copy@<X0>(WebCore::NinePieceImage::Data *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::LengthBox *result;

  v4 = WTF::fastMalloc((WTF *)0x70);
  v5 = v4;
  *(_DWORD *)v4 = 1;
  *(_DWORD *)(v4 + 4) = *((_DWORD *)this + 1);
  v6 = *((_QWORD *)this + 1);
  if (v6)
    ++*(_DWORD *)(v6 + 8);
  *(_QWORD *)(v4 + 8) = v6;
  WebCore::LengthBox::LengthBox((WebCore::LengthBox *)(v4 + 16), (WebCore::NinePieceImage::Data *)((char *)this + 16));
  WebCore::LengthBox::LengthBox((WebCore::LengthBox *)(v5 + 48), (WebCore::NinePieceImage::Data *)((char *)this + 48));
  result = WebCore::LengthBox::LengthBox((WebCore::LengthBox *)(v5 + 80), (WebCore::NinePieceImage::Data *)((char *)this + 80));
  *a2 = v5;
  return result;
}

WebCore::LengthBox *WebCore::LengthBox::LengthBox(WebCore::LengthBox *this, const WebCore::LengthBox *a2)
{
  unsigned int v4;
  int v5;
  int *v6;
  unsigned int v7;
  int v8;
  int *v9;
  unsigned int v10;
  int v11;
  int *v12;
  unsigned int v13;
  int v14;

  *(_DWORD *)this = 0;
  *(_WORD *)((char *)this + 5) = 0;
  v4 = *((unsigned __int8 *)a2 + 4);
  *((_BYTE *)this + 4) = v4;
  *((_BYTE *)this + 5) = *((_BYTE *)a2 + 5);
  if (v4 <= 0xD)
  {
    v5 = 1 << v4;
    if ((v5 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 6) = *((_BYTE *)a2 + 6);
      *(_DWORD *)this = *(_DWORD *)a2;
    }
    else if ((v5 & 0x3003) != 0)
    {
      *(_DWORD *)this = 0;
    }
    else
    {
      *(_DWORD *)this = *(_DWORD *)a2;
      WebCore::Length::ref((int *)this);
    }
  }
  *((_DWORD *)this + 2) = 0;
  v6 = (int *)((char *)this + 8);
  *(_WORD *)((char *)this + 13) = 0;
  v7 = *((unsigned __int8 *)a2 + 12);
  *((_BYTE *)this + 12) = v7;
  *((_BYTE *)this + 13) = *((_BYTE *)a2 + 13);
  if (v7 <= 0xD)
  {
    v8 = 1 << v7;
    if ((v8 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 14) = *((_BYTE *)a2 + 14);
      *v6 = *((_DWORD *)a2 + 2);
    }
    else if ((v8 & 0x3003) != 0)
    {
      *v6 = 0;
    }
    else
    {
      *v6 = *((_DWORD *)a2 + 2);
      WebCore::Length::ref(v6);
    }
  }
  *((_DWORD *)this + 4) = 0;
  v9 = (int *)((char *)this + 16);
  *(_WORD *)((char *)this + 21) = 0;
  v10 = *((unsigned __int8 *)a2 + 20);
  *((_BYTE *)this + 20) = v10;
  *((_BYTE *)this + 21) = *((_BYTE *)a2 + 21);
  if (v10 <= 0xD)
  {
    v11 = 1 << v10;
    if ((v11 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 22) = *((_BYTE *)a2 + 22);
      *v9 = *((_DWORD *)a2 + 4);
    }
    else if ((v11 & 0x3003) != 0)
    {
      *v9 = 0;
    }
    else
    {
      *v9 = *((_DWORD *)a2 + 4);
      WebCore::Length::ref(v9);
    }
  }
  *((_DWORD *)this + 6) = 0;
  v12 = (int *)((char *)this + 24);
  *(_WORD *)((char *)this + 29) = 0;
  v13 = *((unsigned __int8 *)a2 + 28);
  *((_BYTE *)this + 28) = v13;
  *((_BYTE *)this + 29) = *((_BYTE *)a2 + 29);
  if (v13 <= 0xD)
  {
    v14 = 1 << v13;
    if ((v14 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 30) = *((_BYTE *)a2 + 30);
      *v12 = *((_DWORD *)a2 + 6);
      return this;
    }
    if ((v14 & 0x3003) != 0)
    {
      *v12 = 0;
    }
    else
    {
      *v12 = *((_DWORD *)a2 + 6);
      WebCore::Length::ref(v12);
    }
  }
  return this;
}

uint64_t WebCore::CSSSelector::RareData::RareData(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  const WebCore::CSSSelectorList *v8;
  WebCore::CSSSelectorList *v9;
  WTF *v11;

  *(_DWORD *)a1 = 1;
  v4 = *(_DWORD **)(a2 + 8);
  if (v4)
    *v4 += 2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_DWORD **)(a2 + 16);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_DWORD **)(a2 + 32);
  if (v6)
    ++*v6;
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_DWORD **)(a2 + 40);
  if (v7)
    *v7 += 2;
  *(_QWORD *)(a1 + 40) = v7;
  WTF::FixedVector<WebCore::PossiblyQuotedIdentifier>::FixedVector((WTF **)(a1 + 48), *(unsigned int **)(a2 + 48));
  *(_QWORD *)(a1 + 56) = 0;
  v8 = *(const WebCore::CSSSelectorList **)(a2 + 56);
  if (v8)
  {
    v9 = (WebCore::CSSSelectorList *)WTF::fastMalloc((WTF *)8);
    v11 = (WTF *)WebCore::CSSSelectorList::CSSSelectorList(v9, v8);
    std::unique_ptr<WebCore::CSSSelectorList>::operator=[abi:sn180100]((WTF **)(a1 + 56), &v11);
    std::unique_ptr<WebCore::CSSSelectorList>::~unique_ptr[abi:sn180100](&v11);
  }
  return a1;
}

WTF **WTF::FixedVector<WebCore::PossiblyQuotedIdentifier>::FixedVector(WTF **a1, unsigned int *a2)
{
  WTF *v4;
  WTF::StringImpl *v5;
  WTF *v6;

  if (a2)
  {
    WTF::EmbeddedFixedVector<WebCore::PossiblyQuotedIdentifier>::clone(&v6, a2);
    v4 = v6;
    v6 = 0;
    *a1 = v4;
    WTF::FixedVector<WebCore::PossiblyQuotedIdentifier>::~FixedVector(&v6, v5);
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t WebCore::LocalFrameView::setViewExposedRect(uint64_t this, __int128 *a2)
{
  uint64_t v2;
  int v3;
  BOOL v4;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = this;
  v3 = (*(_BYTE *)(this + 1144) != 0) ^ (*((_BYTE *)a2 + 16) != 0);
  if (*(_BYTE *)(this + 1144))
    v4 = *((_BYTE *)a2 + 16) == 0;
  else
    v4 = 1;
  if (v4)
  {
    if (!v3)
      return this;
  }
  else if (*(float *)(this + 1128) == *(float *)a2
         && *(float *)(this + 1132) == *((float *)a2 + 1)
         && *(float *)(this + 1136) == *((float *)a2 + 2)
         && *(float *)(this + 1140) == *((float *)a2 + 3))
  {
    return this;
  }
  v7 = *a2;
  *(_BYTE *)(this + 1144) = *((_BYTE *)a2 + 16);
  *(_OWORD *)(this + 1128) = v7;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 328) + 128) + 8) == *(_QWORD *)(this + 328))
  {
    this = WebCore::LocalFrameView::tiledBacking((WebCore::LocalFrameView *)this);
    if (this)
    {
      v8 = this;
      if ((v3 & 1) == 0)
        WebCore::LocalFrameView::updateTiledBackingAdaptiveSizing((WebCore::LocalFrameView *)v2);
      WebCore::LocalFrameView::adjustTiledBackingCoverage(v2);
      if (*(_BYTE *)(v2 + 1144))
        v9 = *(_QWORD *)(v2 + 1128);
      else
        v9 = 0;
      v12 = v9;
      this = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 96))(v8, &v12);
    }
    v10 = *(_QWORD *)(*(_QWORD *)(v2 + 328) + 24);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        WebCore::Page::scheduleRenderingUpdate(*(_QWORD *)(v10 + 8), 0x4000);
        return WebCore::PageOverlayController::didChangeViewExposedRect(*(WebCore::PageOverlayController **)(v11 + 1232));
      }
    }
  }
  return this;
}

void WebCore::GraphicsContextCG::drawRect(WebCore::GraphicsContextCG *this, const WebCore::FloatRect *a2, float a3)
{
  CGContext *v6;
  uint64_t v7;
  CGContext *v8;
  const WebCore::Color *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  void *v14;
  const WebCore::Color *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  CGRect rects;
  CGFloat x;
  double v24;
  double v25;
  double v26;
  CGFloat v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  CGRect v36;

  v35 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 744) |= 8u;
  v6 = (CGContext *)*((_QWORD *)this + 90);
  v36.origin.x = *(float *)a2;
  v36.origin.y = *((float *)a2 + 1);
  v36.size.width = *((float *)a2 + 2);
  v36.size.height = *((float *)a2 + 3);
  CGContextFillRect(v6, v36);
  if (*((_BYTE *)this + 193))
  {
    v7 = *((_QWORD *)this + 1);
    v21 = v7;
    if ((v7 & 0x8000000000000) != 0)
    {
      v19 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 + 1, v19));
    }
    v8 = (WebCore::GraphicsContextCG *)((char *)this + 96);
    if (!WebCore::operator==(&v21, (uint64_t *)v8))
      WebCore::setCGFillColor(v6, v8, v9);
    v10 = *(float *)a2;
    v11 = *((float *)a2 + 1);
    v12 = *((float *)a2 + 2);
    v13 = *((float *)a2 + 3);
    rects.origin.x = *(float *)a2;
    rects.origin.y = v11;
    rects.size.width = v12;
    rects.size.height = a3;
    x = rects.origin.x;
    v24 = (float)((float)(v11 + v13) - a3);
    v25 = v12;
    v26 = a3;
    v27 = rects.origin.x;
    v28 = (float)(v11 + a3);
    v29 = a3;
    v30 = (float)(v13 + (float)(a3 * -2.0));
    v31 = (float)((float)(v10 + v12) - a3);
    v32 = v28;
    v33 = a3;
    v34 = v30;
    CGContextFillRects(v6, &rects, 4uLL);
    if (!WebCore::operator==(&v21, (uint64_t *)v8))
      WebCore::setCGFillColor(v6, (CGContext *)&v21, v15);
    if ((v21 & 0x8000000000000) != 0)
    {
      v16 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, v14);
      }
    }
  }
}

void WebCore::DatabaseTracker::emptyDatabaseFilesRemovalTaskWillBeScheduled(WebCore::DatabaseTracker *this)
{
  if (__ldaxr(WebCore::openDatabaseLock))
  {
    __clrex();
    goto LABEL_4;
  }
  if (__stxr(1u, WebCore::openDatabaseLock))
LABEL_4:
    JUMPOUT(0x19AEA534CLL);
}

uint64_t WebCore::LocalDOMWindow::webkitNamespace(WebCore::LocalDOMWindow *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WebCore::UserContentProvider *v11;
  WebCore::WebKitNamespace *v12;
  _DWORD *v13;
  WTF *v14;
  void *v15;

  v1 = *((_QWORD *)this + 9);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if (!*(_BYTE *)(v2 + 178))
  {
    v3 = *(_QWORD *)(v2 + 240);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        if (*(WebCore::LocalDOMWindow **)(*(_QWORD *)(v4 + 296) + 696) == this)
        {
          v8 = *(_QWORD *)(v4 + 24);
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 8);
            if (v9)
            {
              v10 = (*(_DWORD *)v9)++;
              v6 = *((_QWORD *)this + 40);
              if (!v6)
              {
                v11 = *(WebCore::UserContentProvider **)(v9 + 936);
                ++*((_DWORD *)v11 + 2);
                v12 = (WebCore::WebKitNamespace *)WTF::fastMalloc((WTF *)0x20);
                WebCore::WebKitNamespace::WebKitNamespace(v12, this, v11);
                v13 = (_DWORD *)*((_QWORD *)this + 40);
                *((_QWORD *)this + 40) = v12;
                if (v13)
                {
                  if (v13[4] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
                  else
                    --v13[4];
                }
                if (*((_DWORD *)v11 + 2) == 1)
                  (*(void (**)(WebCore::UserContentProvider *))(*(_QWORD *)v11 + 8))(v11);
                else
                  --*((_DWORD *)v11 + 2);
                v6 = *((_QWORD *)this + 40);
                v10 = *(_DWORD *)v9 - 1;
              }
              if (v10)
              {
                *(_DWORD *)v9 = v10;
              }
              else
              {
                WebCore::Page::~Page(v9);
                WTF::fastFree(v14, v15);
              }
              return v6;
            }
          }
        }
      }
    }
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

float ___ZN7WebCore15screenPPIFactorEv_block_invoke()
{
  int v0;
  float v1;
  float v2;
  float result;

  v0 = MGGetSInt32Answer();
  MGGetFloat32Answer();
  v2 = 163.0;
  if (v0 && v1 != 0.0)
    v2 = (float)v0 / v1;
  result = v2 / 163.0;
  *(float *)&dword_1ECE81BC4 = v2 / 163.0;
  return result;
}

uint64_t *WebCore::CaptionUserPreferencesMediaAF::setCaptionPreferencesDelegate(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((byte_1EE337E22 & 1) != 0)
  {
    v1 = qword_1EE337E30;
    v2 = *result;
    *result = 0;
    qword_1EE337E30 = v2;
    if (v1)
      return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  else
  {
    byte_1EE337E22 = 1;
    v3 = *result;
    *result = 0;
    qword_1EE337E30 = v3;
  }
  return result;
}

uint64_t WebCore::LocalDOMWindow::navigator(WebCore::LocalDOMWindow *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _DWORD *v10;
  int v11;

  result = *((_QWORD *)this + 19);
  if (!result)
  {
    v3 = *((_QWORD *)this + 9);
    if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
    {
      v5 = v4 - 96;
      v6 = *(unsigned __int8 *)(v4 + 178);
      if (*(_BYTE *)(v4 + 178))
      {
        if (v6 == 1 || v6 == 2)
          ++*(_DWORD *)(v4 + 216);
      }
      else
      {
        *(_DWORD *)(v4 - 264) += 2;
      }
    }
    else
    {
      v5 = 0;
    }
    v7 = bmalloc::api::isoAllocate();
    *(_DWORD *)(v7 + 16) = 1;
    *(_QWORD *)v7 = &off_1E33A18C0;
    *(_QWORD *)(v7 + 8) = 0;
    WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v7, (WebCore::ScriptExecutionContext *)v5);
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)v7 = &off_1E34001D0;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    v8 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    if (v8)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
    *(_QWORD *)(v7 + 64) = v8;
    *(_QWORD *)(v7 + 72) = 0;
    *(_QWORD *)v7 = &off_1E3400100;
    *(_QWORD *)(v7 + 80) = &unk_1E3400178;
    *(_QWORD *)(v7 + 88) = 0;
    *(_WORD *)(v7 + 96) = 0;
    *(_OWORD *)(v7 + 104) = 0u;
    *(_OWORD *)(v7 + 120) = 0u;
    *(_QWORD *)(v7 + 136) = 0;
    *(_QWORD *)(v7 + 144) = v7 + 80;
    v10 = (_DWORD *)*((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = v7;
    if (v10)
    {
      if (v10[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
      else
        --v10[4];
    }
    if (v5)
    {
      v11 = *(unsigned __int8 *)(v5 + 274);
      if (*(_BYTE *)(v5 + 274))
      {
        if (v11 == 1)
        {
          if (*(_DWORD *)(v5 + 312) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
          else
            --*(_DWORD *)(v5 + 312);
        }
        else if (v11 == 2)
        {
          WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v5 + 312));
        }
      }
      else if (*(_DWORD *)(v5 - 168) == 2)
      {
        if ((*(_WORD *)(v5 - 162) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 192));
      }
      else
      {
        *(_DWORD *)(v5 - 168) -= 2;
      }
    }
    return *((_QWORD *)this + 19);
  }
  return result;
}

uint64_t WebCore::BorderData::BorderData(uint64_t this)
{
  WebCore::NinePieceImage::Data *v1;
  WebCore::NinePieceImage::Data *v2;
  uint64_t v3;

  *(_DWORD *)(this + 8) = 1;
  *(_DWORD *)(this + 16) = 1077936128;
  *(_BYTE *)(this + 20) &= 0xE0u;
  *(_DWORD *)(this + 32) = 1;
  *(_DWORD *)(this + 40) = 1077936128;
  *(_BYTE *)(this + 44) &= 0xE0u;
  *(_DWORD *)(this + 56) = 1;
  *(_DWORD *)(this + 64) = 1077936128;
  *(_BYTE *)(this + 68) &= 0xE0u;
  *(_DWORD *)(this + 80) = 1;
  *(_DWORD *)(this + 88) = 1077936128;
  *(_BYTE *)(this + 92) &= 0xE0u;
  {
    v1 = (WebCore::NinePieceImage::Data *)WebCore::NinePieceImage::defaultData(void)::data;
  }
  else
  {
    v3 = this;
    v2 = (WebCore::NinePieceImage::Data *)WTF::fastMalloc((WTF *)0x70);
    v1 = WebCore::NinePieceImage::Data::Data(v2);
    this = v3;
    WebCore::NinePieceImage::defaultData(void)::data = v1;
  }
  ++*(_DWORD *)v1;
  *(_QWORD *)(this + 96) = v1;
  *(_DWORD *)(this + 104) = 0;
  *(_WORD *)(this + 108) = 4;
  *(_BYTE *)(this + 110) = 0;
  *(_DWORD *)(this + 112) = 0;
  *(_WORD *)(this + 116) = 4;
  *(_BYTE *)(this + 118) = 0;
  *(_DWORD *)(this + 120) = 0;
  *(_WORD *)(this + 124) = 4;
  *(_BYTE *)(this + 126) = 0;
  *(_DWORD *)(this + 128) = 0;
  *(_WORD *)(this + 132) = 4;
  *(_BYTE *)(this + 134) = 0;
  *(_DWORD *)(this + 136) = 0;
  *(_WORD *)(this + 140) = 4;
  *(_BYTE *)(this + 142) = 0;
  *(_DWORD *)(this + 144) = 0;
  *(_WORD *)(this + 148) = 4;
  *(_BYTE *)(this + 150) = 0;
  *(_DWORD *)(this + 152) = 0;
  *(_WORD *)(this + 156) = 4;
  *(_BYTE *)(this + 158) = 0;
  *(_DWORD *)(this + 160) = 0;
  *(_WORD *)(this + 164) = 4;
  *(_BYTE *)(this + 166) = 0;
  return this;
}

int8x8_t *WebCore::RenderStyle::RenderStyle(int8x8_t *a1)
{
  WebCore::SVGRenderStyle *v2;
  WTF::StringImpl *v3;
  WebCore::StyleRareInheritedData *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WebCore::StyleInheritedData *v7;
  uint64_t v8;
  void *v9;
  WebCore::SVGRenderStyle *v10;
  WebCore::SVGRenderStyle *v11;
  void *v12;
  WebCore::SVGRenderStyle *v14;

  a1->i32[0] = 0;
  WebCore::StyleNonInheritedData::create(&v14);
  v2 = v14;
  v14 = 0;
  a1[1] = (int8x8_t)v2;
  WTF::Ref<WebCore::StyleNonInheritedData,WTF::RawPtrTraits<WebCore::StyleNonInheritedData>,WTF::DefaultRefDerefTraits<WebCore::StyleNonInheritedData>>::~Ref(&v14, v3);
  v4 = (WebCore::StyleRareInheritedData *)WTF::fastMalloc((WTF *)0x1A0);
  v5 = WebCore::StyleRareInheritedData::StyleRareInheritedData(v4);
  v14 = 0;
  a1[3] = (int8x8_t)v5;
  WTF::Ref<WebCore::StyleRareInheritedData,WTF::RawPtrTraits<WebCore::StyleRareInheritedData>,WTF::DefaultRefDerefTraits<WebCore::StyleRareInheritedData>>::~Ref(&v14, v6);
  v7 = (WebCore::StyleInheritedData *)WTF::fastMalloc((WTF *)0x158);
  v8 = WebCore::StyleInheritedData::StyleInheritedData(v7);
  v14 = 0;
  a1[4] = (int8x8_t)v8;
  WTF::Ref<WebCore::StyleInheritedData,WTF::RawPtrTraits<WebCore::StyleInheritedData>,WTF::DefaultRefDerefTraits<WebCore::StyleInheritedData>>::~Ref((uint64_t *)&v14, v9);
  a1[6] = 0;
  v10 = (WebCore::SVGRenderStyle *)WTF::fastMalloc((WTF *)0x48);
  v11 = WebCore::SVGRenderStyle::SVGRenderStyle(v10);
  v14 = 0;
  a1[7] = (int8x8_t)v11;
  WTF::Ref<WebCore::SVGRenderStyle,WTF::RawPtrTraits<WebCore::SVGRenderStyle>,WTF::DefaultRefDerefTraits<WebCore::SVGRenderStyle>>::~Ref(&v14, v12);
  a1[5] = vorr_s8(vand_s8(a1[5], (int8x8_t)0xFFE0000080000000), (int8x8_t)0x40000001C0);
  a1[2] = 0;
  return a1;
}

WebCore::StyleRareInheritedData *WebCore::StyleRareInheritedData::StyleRareInheritedData(WebCore::StyleRareInheritedData *this)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _DWORD *v7;
  _DWORD *v8;
  WebCore::StyleCustomPropertyData *v10[4];
  char v11;

  *(_QWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 1;
  *((_DWORD *)this + 10) = 1;
  *((_DWORD *)this + 14) = 1;
  *((_DWORD *)this + 18) = 1;
  *((_DWORD *)this + 22) = 1;
  *((_DWORD *)this + 26) = 1;
  *((_DWORD *)this + 30) = 1;
  *((_DWORD *)this + 34) = 1;
  *((_DWORD *)this + 38) = 1;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_DWORD *)this + 44) = 0;
  *((_WORD *)this + 90) = 4;
  *((_BYTE *)this + 182) = 0;
  *((_DWORD *)this + 46) = 1065353216;
  *(_QWORD *)((char *)this + 188) = 0;
  *((_WORD *)this + 98) = WebCore::EventHandler::needsKeyboardEventDisambiguationQuirks(this);
  *((_DWORD *)this + 50) = 0;
  *(_DWORD *)((char *)this + 203) = 0;
  *((_DWORD *)this + 52) = 1082130432;
  v2 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v2 = 1;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 32) = 0;
  v10[0] = 0;
  *((_QWORD *)this + 27) = v2;
  WTF::Ref<WebCore::StyleCustomPropertyData,WTF::RawPtrTraits<WebCore::StyleCustomPropertyData>,WTF::DefaultRefDerefTraits<WebCore::StyleCustomPropertyData>>::~Ref(v10, v3);
  *((_DWORD *)this + 56) = 131074;
  *(int8x8_t *)((char *)this + 228) = vorr_s8(vand_s8(*(int8x8_t *)((char *)this + 228), (int8x8_t)0xC0000000E0020000), (int8x8_t)0x1000130900408003);
  *((_DWORD *)this + 59) = *((_DWORD *)this + 59) & 0xE0000000 | 0xE00040;
  *((_WORD *)this + 120) = 1;
  *((_DWORD *)this + 61) = 1;
  *((_WORD *)this + 124) = 4;
  *((_BYTE *)this + 250) = 0;
  WebCore::StyleColor::StyleColor((uint64_t)this + 256, 0);
  WebCore::StyleColor::StyleColor((uint64_t)this + 272);
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0x100FFFFFFFFFFFFLL;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  v4 = WTF::fastMalloc((WTF *)0x18);
  v5 = WebCore::StyleFilterData::StyleFilterData(v4);
  v10[0] = 0;
  *((_QWORD *)this + 40) = v5;
  WTF::Ref<WebCore::StyleFilterData,WTF::RawPtrTraits<WebCore::StyleFilterData>,WTF::DefaultRefDerefTraits<WebCore::StyleFilterData>>::~Ref((uint64_t *)v10, v6);
  v7 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v7 += 2;
  *((_QWORD *)this + 41) = v7;
  *((_QWORD *)this + 42) = 0x141000000;
  *((_DWORD *)this + 86) = -1082130432;
  WebCore::RenderStyle::initialTapHighlightColor((uint64_t)this + 352);
  *((_BYTE *)this + 368) = 0;
  v8 = (_DWORD *)*WebCore::nameString(0x110u);
  if (v8)
    *v8 += 2;
  *((_QWORD *)this + 47) = v8;
  LOBYTE(v10[0]) = 0;
  v11 = 0;
  WTF::Markable<WebCore::ScrollbarColor,WebCore::ScrollbarColor::MarkableTraits>::Markable((uint64_t)this + 384, (uint64_t)v10);
  std::optional<WebCore::ScrollbarColor>::~optional((uint64_t)v10);
  return this;
}

uint64_t std::optional<WebCore::ScrollbarColor>::~optional(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  char v6;

  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v2])(&v5, a1 + 16);
    *(_DWORD *)(a1 + 24) = -1;
    v3 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v3])(&v6, a1);
    *(_DWORD *)(a1 + 8) = -1;
  }
  return a1;
}

WebCore::StyleNonInheritedData *WebCore::StyleNonInheritedData::create@<X0>(WebCore::StyleNonInheritedData **a1@<X8>)
{
  WebCore::StyleNonInheritedData *v3;
  WebCore::StyleNonInheritedData *result;

  v3 = (WebCore::StyleNonInheritedData *)WTF::fastMalloc((WTF *)0x30);
  result = WebCore::StyleNonInheritedData::StyleNonInheritedData(v3);
  *a1 = result;
  return result;
}

WebCore::StyleBackgroundData *WebCore::StyleBackgroundData::StyleBackgroundData(WebCore::StyleBackgroundData *this)
{
  WebCore::FillLayer *v2;
  WebCore::FillLayer *v4;

  *(_DWORD *)this = 1;
  WebCore::FillLayer::create(0, (uint64_t *)&v4);
  v2 = v4;
  v4 = 0;
  *((_QWORD *)this + 1) = v2;
  WTF::Ref<WebCore::FillLayer,WTF::RawPtrTraits<WebCore::FillLayer>,WTF::DefaultRefDerefTraits<WebCore::FillLayer>>::~Ref(&v4);
  WebCore::StyleColor::StyleColor((uint64_t)this + 16, 0);
  WebCore::BorderValue::BorderValue((uint64_t)this + 32);
  *((_DWORD *)this + 14) = 0;
  return this;
}

WebCore::StyleNonInheritedData *WebCore::StyleNonInheritedData::StyleNonInheritedData(WebCore::StyleNonInheritedData *this)
{
  WebCore::StyleBoxData *v2;
  void *v3;
  WebCore::StyleBackgroundData *v4;
  uint64_t v5;
  void *v6;
  WebCore::StyleSurroundData *v7;
  WebCore::StyleSurroundData *v8;
  void *v9;
  WebCore::StyleMiscNonInheritedData *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WebCore::StyleRareNonInheritedData *v13;
  WebCore::StyleRareNonInheritedData *v14;
  WTF::StringImpl *v15;
  WebCore::StyleMiscNonInheritedData *v17;

  *(_DWORD *)this = 1;
  v2 = (WebCore::StyleBoxData *)WTF::fastMalloc((WTF *)0x48);
  v17 = 0;
  *((_QWORD *)this + 1) = WebCore::StyleBoxData::StyleBoxData(v2);
  WTF::Ref<WebCore::StyleBoxData,WTF::RawPtrTraits<WebCore::StyleBoxData>,WTF::DefaultRefDerefTraits<WebCore::StyleBoxData>>::~Ref((uint64_t *)&v17, v3);
  v4 = (WebCore::StyleBackgroundData *)WTF::fastMalloc((WTF *)0x40);
  v5 = WebCore::StyleBackgroundData::StyleBackgroundData(v4);
  v17 = 0;
  *((_QWORD *)this + 2) = v5;
  WTF::Ref<WebCore::StyleBackgroundData,WTF::RawPtrTraits<WebCore::StyleBackgroundData>,WTF::DefaultRefDerefTraits<WebCore::StyleBackgroundData>>::~Ref((uint64_t *)&v17, v6);
  v7 = (WebCore::StyleSurroundData *)WTF::fastMalloc((WTF *)0x110);
  v8 = WebCore::StyleSurroundData::StyleSurroundData(v7);
  v17 = 0;
  *((_QWORD *)this + 3) = v8;
  WTF::Ref<WebCore::StyleSurroundData,WTF::RawPtrTraits<WebCore::StyleSurroundData>,WTF::DefaultRefDerefTraits<WebCore::StyleSurroundData>>::~Ref((uint64_t *)&v17, v9);
  v10 = (WebCore::StyleMiscNonInheritedData *)WTF::fastMalloc((WTF *)0x98);
  v11 = WebCore::StyleMiscNonInheritedData::StyleMiscNonInheritedData(v10);
  v17 = 0;
  *((_QWORD *)this + 4) = v11;
  WTF::Ref<WebCore::StyleMiscNonInheritedData,WTF::RawPtrTraits<WebCore::StyleMiscNonInheritedData>,WTF::DefaultRefDerefTraits<WebCore::StyleMiscNonInheritedData>>::~Ref(&v17, v12);
  v13 = (WebCore::StyleRareNonInheritedData *)WTF::fastMalloc((WTF *)0x288);
  v14 = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v13);
  v17 = 0;
  *((_QWORD *)this + 5) = v14;
  WTF::Ref<WebCore::StyleRareNonInheritedData,WTF::RawPtrTraits<WebCore::StyleRareNonInheritedData>,WTF::DefaultRefDerefTraits<WebCore::StyleRareNonInheritedData>>::~Ref(&v17, v15);
  return this;
}

WebCore::StyleRareNonInheritedData *WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(WebCore::StyleRareNonInheritedData *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  WebCore::StyleGridData *v7;
  uint64_t v8;
  void *v9;
  WebCore::StyleGridItemData *v10;
  uint64_t v11;
  WebCore::NinePieceImage *v12;
  uint64_t *v13;
  _DWORD *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int *v17;
  WebCore::EventHandler *v18;
  _DWORD *v19;
  char v20;
  int v22[2];
  int v23[2];
  int v24[2];
  unsigned int v25[2];

  *(_DWORD *)this = 1;
  *((_BYTE *)this + 4) = 0;
  *((_BYTE *)this + 12) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_BYTE *)this + 24) = 0;
  *((_DWORD *)this + 7) = 1112014848;
  *((_WORD *)this + 16) = 3;
  *((_BYTE *)this + 34) = 1;
  *((_DWORD *)this + 9) = 1112014848;
  *((_WORD *)this + 20) = 3;
  *((_BYTE *)this + 42) = 1;
  *(_OWORD *)((char *)this + 44) = xmmword_1969FDF50;
  WebCore::StyleMarqueeData::create((uint64_t *)v25);
  v2 = *(_QWORD *)v25;
  *(_QWORD *)v25 = 0;
  *((_QWORD *)this + 8) = v2;
  WTF::Ref<WebCore::StyleMarqueeData,WTF::RawPtrTraits<WebCore::StyleMarqueeData>,WTF::DefaultRefDerefTraits<WebCore::StyleMarqueeData>>::~Ref((uint64_t *)v25, v3);
  v4 = WTF::fastMalloc((WTF *)0x18);
  v5 = WebCore::StyleFilterData::StyleFilterData(v4);
  *(_QWORD *)v25 = 0;
  *((_QWORD *)this + 9) = v5;
  WTF::Ref<WebCore::StyleFilterData,WTF::RawPtrTraits<WebCore::StyleFilterData>,WTF::DefaultRefDerefTraits<WebCore::StyleFilterData>>::~Ref((uint64_t *)v25, v6);
  v7 = (WebCore::StyleGridData *)WTF::fastMalloc((WTF *)0x108);
  v8 = WebCore::StyleGridData::StyleGridData(v7);
  *(_QWORD *)v25 = 0;
  *((_QWORD *)this + 10) = v8;
  WTF::Ref<WebCore::StyleGridData,WTF::RawPtrTraits<WebCore::StyleGridData>,WTF::DefaultRefDerefTraits<WebCore::StyleGridData>>::~Ref((WebCore::StyleGridData **)v25, v9);
  v10 = (WebCore::StyleGridItemData *)WTF::fastMalloc((WTF *)0x48);
  WebCore::StyleGridItemData::StyleGridItemData(v10);
  *((_QWORD *)this + 11) = v11;
  *((_DWORD *)this + 24) = 0;
  *(_DWORD *)((char *)this + 99) = 0;
  *((_DWORD *)this + 26) = 0;
  *(_DWORD *)((char *)this + 107) = 0;
  *((_DWORD *)this + 28) = 0;
  *(_DWORD *)((char *)this + 115) = 0;
  *((_DWORD *)this + 30) = 0;
  *(_DWORD *)((char *)this + 123) = 0;
  *((_WORD *)this + 66) = 4;
  *((_BYTE *)this + 134) = 0;
  *((_DWORD *)this + 32) = 0;
  *((_WORD *)this + 70) = 4;
  *((_BYTE *)this + 142) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_WORD *)this + 74) = 4;
  *((_BYTE *)this + 150) = 0;
  *((_DWORD *)this + 36) = 0;
  *((_WORD *)this + 78) = 4;
  *((_BYTE *)this + 158) = 0;
  *((_DWORD *)this + 38) = 0;
  *(unsigned int *)((char *)v25 + 3) = 0;
  v25[0] = 0;
  *(int *)((char *)v24 + 3) = 0;
  v24[0] = 0;
  *(int *)((char *)v23 + 3) = 0;
  v23[0] = 0;
  memset(v22, 0, 7);
  v12 = (WebCore::NinePieceImage *)WebCore::RectEdges<WebCore::Length>::RectEdges<WebCore::Length>((uint64_t)this + 160, (int *)v25, v24, v23, v22);
  if (LOBYTE(v22[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    v12 = (WebCore::NinePieceImage *)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v22[0]);
  }
  if (LOBYTE(v23[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    v12 = (WebCore::NinePieceImage *)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v23[0]);
  }
  if (LOBYTE(v24[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    v12 = (WebCore::NinePieceImage *)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v24[0]);
  }
  if (LOBYTE(v25[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    v12 = (WebCore::NinePieceImage *)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v25[0]);
  }
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  v13 = WebCore::NinePieceImage::defaultMaskData(v12);
  v14 = (_DWORD *)*v13;
  *v14 = *(_DWORD *)*v13 + 1;
  *((_QWORD *)this + 27) = v14;
  *((_DWORD *)this + 56) = 0;
  *(_DWORD *)((char *)this + 227) = 0;
  *((_DWORD *)this + 58) = 0;
  *(_DWORD *)((char *)this + 235) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_DWORD *)this + 62) = 0;
  *((_WORD *)this + 126) = 4;
  *((_BYTE *)this + 254) = 0;
  *((_QWORD *)this + 32) = 0xBF80000000000000;
  *((_QWORD *)this + 33) = 0;
  *((_DWORD *)this + 70) = 1;
  v15 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v15 = 1;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_BYTE *)(v15 + 32) = 0;
  *(_QWORD *)v25 = 0;
  *((_QWORD *)this + 36) = v15;
  WTF::Ref<WebCore::StyleCustomPropertyData,WTF::RawPtrTraits<WebCore::StyleCustomPropertyData>,WTF::DefaultRefDerefTraits<WebCore::StyleCustomPropertyData>>::~Ref((WebCore::StyleCustomPropertyData **)v25, v16);
  *((_BYTE *)this + 368) = 0;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 337) = 0u;
  *((_BYTE *)this + 376) = 1;
  *((_DWORD *)this + 95) = 0;
  *(_DWORD *)((char *)this + 383) = 0;
  *((_BYTE *)this + 388) = 1;
  *((_DWORD *)this + 98) = 0;
  *(_DWORD *)((char *)this + 395) = 0;
  *((_DWORD *)this + 100) = 0;
  *((_WORD *)this + 202) = 4;
  *((_BYTE *)this + 406) = 0;
  v17 = WebCore::RenderStyle::initialOffsetPosition((uint64_t)this + 408);
  *(_DWORD *)((char *)this + 427) = 0;
  *((_DWORD *)this + 106) = 0;
  *((_DWORD *)this + 108) = 0;
  *(_DWORD *)((char *)this + 435) = 0;
  *((_QWORD *)this + 55) = 0x100000000;
  *((_BYTE *)this + 448) = 0;
  *((_DWORD *)this + 113) = 0;
  *(_DWORD *)((char *)this + 455) = 0;
  *((_DWORD *)this + 115) = 67108865;
  *((_DWORD *)this + 116) = 0;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *((_WORD *)this + 292) = 1;
  v18 = (WebCore::EventHandler *)WebCore::EventHandler::needsKeyboardEventDisambiguationQuirks((WebCore::EventHandler *)v17);
  *((_BYTE *)this + 586) = (_BYTE)v18;
  *((_DWORD *)this + 147) = 1065353216;
  v19 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
  {
    *v19 += 2;
    *(_OWORD *)((char *)this + 600) = 0u;
    *v19 += 2;
  }
  else
  {
    *(_OWORD *)((char *)this + 600) = 0u;
  }
  *((_QWORD *)this + 74) = v19;
  *((_QWORD *)this + 77) = v19;
  *((_BYTE *)this + 624) = 0;
  *((_BYTE *)this + 632) = 0;
  v20 = *((_BYTE *)this + 642);
  *((_WORD *)this + 320) = 0;
  *((_DWORD *)this + 159) = 135266304;
  *((_BYTE *)this + 642) = v20 & 0xC0;
  *((_BYTE *)this + 643) = WebCore::EventHandler::needsKeyboardEventDisambiguationQuirks(v18);
  return this;
}

WebCore::StyleMiscNonInheritedData *WebCore::StyleMiscNonInheritedData::StyleMiscNonInheritedData(WebCore::StyleMiscNonInheritedData *this)
{
  WebCore::StyleDeprecatedFlexibleBoxData *v2;
  uint64_t v3;
  WebCore::StyleFlexibleBoxData *v4;
  uint64_t v5;
  void *v6;
  WebCore::StyleMultiColData *v7;
  WebCore::StyleMultiColData *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unsigned int *v16;
  WebCore::StyleVisitedLinkColorData *v17;
  uint64_t v18;
  unsigned int v24;
  unsigned int *v26;

  *(_QWORD *)this = 0x3F80000000000001;
  v2 = (WebCore::StyleDeprecatedFlexibleBoxData *)WTF::fastMalloc((WTF *)0x14);
  WebCore::StyleDeprecatedFlexibleBoxData::StyleDeprecatedFlexibleBoxData(v2);
  *((_QWORD *)this + 1) = v3;
  v4 = (WebCore::StyleFlexibleBoxData *)WTF::fastMalloc((WTF *)0x18);
  WebCore::StyleFlexibleBoxData::StyleFlexibleBoxData(v4);
  v26 = 0;
  *((_QWORD *)this + 2) = v5;
  WTF::Ref<WebCore::StyleFlexibleBoxData,WTF::RawPtrTraits<WebCore::StyleFlexibleBoxData>,WTF::DefaultRefDerefTraits<WebCore::StyleFlexibleBoxData>>::~Ref((uint64_t *)&v26, v6);
  v7 = (WebCore::StyleMultiColData *)WTF::fastMalloc((WTF *)0x40);
  v8 = WebCore::StyleMultiColData::StyleMultiColData(v7);
  v26 = 0;
  *((_QWORD *)this + 3) = v8;
  WTF::Ref<WebCore::StyleMultiColData,WTF::RawPtrTraits<WebCore::StyleMultiColData>,WTF::DefaultRefDerefTraits<WebCore::StyleMultiColData>>::~Ref(&v26, v9);
  v10 = WTF::fastMalloc((WTF *)0x18);
  v11 = WebCore::StyleFilterData::StyleFilterData(v10);
  v26 = 0;
  *((_QWORD *)this + 4) = v11;
  WTF::Ref<WebCore::StyleFilterData,WTF::RawPtrTraits<WebCore::StyleFilterData>,WTF::DefaultRefDerefTraits<WebCore::StyleFilterData>>::~Ref((uint64_t *)&v26, v12);
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = WebCore::StyleTransformData::StyleTransformData(v13);
  v26 = 0;
  *((_QWORD *)this + 5) = v14;
  WTF::Ref<WebCore::StyleTransformData,WTF::RawPtrTraits<WebCore::StyleTransformData>,WTF::DefaultRefDerefTraits<WebCore::StyleTransformData>>::~Ref((uint64_t *)&v26, v15);
  WebCore::FillLayer::create(1, (uint64_t *)&v26);
  v16 = v26;
  v26 = 0;
  *((_QWORD *)this + 6) = v16;
  WTF::Ref<WebCore::FillLayer,WTF::RawPtrTraits<WebCore::FillLayer>,WTF::DefaultRefDerefTraits<WebCore::FillLayer>>::~Ref((WebCore::FillLayer **)&v26);
  v17 = (WebCore::StyleVisitedLinkColorData *)WTF::fastMalloc((WTF *)0x78);
  v18 = WebCore::StyleVisitedLinkColorData::StyleVisitedLinkColorData(v17);
  v26 = 0;
  *((_QWORD *)this + 7) = v18;
  WTF::Ref<WebCore::StyleVisitedLinkColorData,WTF::RawPtrTraits<WebCore::StyleVisitedLinkColorData>,WTF::DefaultRefDerefTraits<WebCore::StyleVisitedLinkColorData>>::~Ref((WebCore::StyleVisitedLinkColorData **)&v26);
  *((_QWORD *)this + 12) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)((char *)this + 104) = _Q0;
  *((_DWORD *)this + 30) = 0;
  *((_DWORD *)this + 31) = 16777474;
  WebCore::RenderStyle::initialObjectPosition((uint64_t)this + 128);
  v24 = *((_DWORD *)this + 37) & 0xC0000000;
  *((_DWORD *)this + 36) = 0;
  *((_DWORD *)this + 37) = v24;
  return this;
}

uint64_t WebCore::StyleFilterData::StyleFilterData(uint64_t this)
{
  *(_DWORD *)this = 1;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t WebCore::FillLayer::create@<X0>(int a1@<W0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x40);
  result = WebCore::FillLayer::FillLayer(v4, a1);
  *a2 = result;
  return result;
}

uint64_t WebCore::FillLayer::FillLayer(uint64_t result, int a2)
{
  __int16 v2;
  __int16 v3;
  int v4;

  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_WORD *)(result + 28) = 3;
  *(_BYTE *)(result + 30) = 1;
  *(_DWORD *)(result + 32) = 0;
  *(_WORD *)(result + 36) = 3;
  *(_BYTE *)(result + 38) = 1;
  *(_DWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 43) = 0;
  *(_DWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 51) = 0;
  v2 = *(_WORD *)(result + 58) & 0xE000;
  *(_WORD *)(result + 56) = 0;
  if (a2)
    v3 = 6400;
  else
    v3 = 6432;
  *(_WORD *)(result + 58) = v2 | v3;
  if (a2)
    v4 = 9633857;
  else
    v4 = 196673;
  *(_DWORD *)(result + 60) = v4 | (*(unsigned __int8 *)(result + 63) << 24);
  return result;
}

double WebCore::StyleDeprecatedFlexibleBoxData::StyleDeprecatedFlexibleBoxData(WebCore::StyleDeprecatedFlexibleBoxData *this)
{
  double result;

  *(_QWORD *)this = 1;
  *(_QWORD *)&result = 0x100000001;
  *((_QWORD *)this + 1) = 0x100000001;
  *((_BYTE *)this + 16) &= 0x80u;
  return result;
}

double WebCore::StyleFlexibleBoxData::StyleFlexibleBoxData(WebCore::StyleFlexibleBoxData *this)
{
  double result;

  *(_DWORD *)this = 1;
  result = 0.0078125;
  *(_QWORD *)((char *)this + 4) = 0x3F80000000000000;
  *((_DWORD *)this + 3) = 0;
  *(_DWORD *)((char *)this + 15) = 0;
  *((_BYTE *)this + 20) &= 0xF0u;
  return result;
}

uint64_t WebCore::StyleTransformData::StyleTransformData(uint64_t this)
{
  *(_DWORD *)this = 1;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 1112014848;
  *(_WORD *)(this + 28) = 3;
  *(_BYTE *)(this + 30) = 1;
  *(_DWORD *)(this + 32) = 1112014848;
  *(_WORD *)(this + 36) = 3;
  *(_BYTE *)(this + 38) = 1;
  *(_DWORD *)(this + 40) = 0;
  *(_BYTE *)(this + 44) = 4;
  return this;
}

WebCore::StyleInheritedData *WebCore::StyleInheritedData::StyleInheritedData(WebCore::StyleInheritedData *this)
{
  *(_QWORD *)this = 1;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 3) = -1027080192;
  *((_WORD *)this + 8) = 3;
  *((_BYTE *)this + 18) = 1;
  *((_DWORD *)this + 5) = -1027080192;
  *((_WORD *)this + 12) = 3;
  *((_BYTE *)this + 26) = 1;
  WebCore::FontCascade::FontCascade((WebCore::StyleInheritedData *)((char *)this + 32));
  *((_QWORD *)this + 41) = 0x11040000000000FFLL;
  *((_QWORD *)this + 42) = 0x11040000000000FFLL;
  return this;
}

WebCore::StyleSurroundData *WebCore::StyleSurroundData::StyleSurroundData(WebCore::StyleSurroundData *this)
{
  *(_DWORD *)this = 1;
  *((_BYTE *)this + 4) &= 0xF0u;
  *((_DWORD *)this + 2) = 0;
  *(_DWORD *)((char *)this + 11) = 0;
  *((_DWORD *)this + 4) = 0;
  *(_DWORD *)((char *)this + 19) = 0;
  *((_DWORD *)this + 6) = 0;
  *(_DWORD *)((char *)this + 27) = 0;
  *((_DWORD *)this + 8) = 0;
  *(_DWORD *)((char *)this + 35) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_BYTE *)this + 46) = 0;
  *((_WORD *)this + 22) = 4;
  *((_DWORD *)this + 12) = 0;
  *((_BYTE *)this + 54) = 0;
  *((_WORD *)this + 26) = 4;
  *((_DWORD *)this + 14) = 0;
  *((_BYTE *)this + 62) = 0;
  *((_WORD *)this + 30) = 4;
  *((_BYTE *)this + 70) = 0;
  *((_WORD *)this + 34) = 4;
  *((_DWORD *)this + 16) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_BYTE *)this + 78) = 0;
  *((_WORD *)this + 38) = 4;
  *((_DWORD *)this + 20) = 0;
  *((_BYTE *)this + 86) = 0;
  *((_WORD *)this + 42) = 4;
  *((_DWORD *)this + 22) = 0;
  *((_BYTE *)this + 94) = 0;
  *((_WORD *)this + 46) = 4;
  *((_BYTE *)this + 102) = 0;
  *((_WORD *)this + 50) = 4;
  *((_DWORD *)this + 24) = 0;
  WebCore::BorderData::BorderData((uint64_t)this + 104);
  return this;
}

double WebCore::StyleGridItemData::StyleGridItemData(WebCore::StyleGridItemData *this)
{
  double result;

  *(_DWORD *)this = 1;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  return result;
}

double WebCore::StyleMarqueeData::create@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  double result;

  v3 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v3 = 0x600000001;
  *(_WORD *)(v3 + 8) = 4;
  *(_BYTE *)(v3 + 10) = 0;
  result = NAN;
  *(_QWORD *)(v3 + 12) = -4294967211;
  *(_BYTE *)(v3 + 20) = *(_BYTE *)(v3 + 20) & 0xE0 | 1;
  *a1 = v3;
  return result;
}

WebCore::SVGRenderStyle *WebCore::SVGRenderStyle::SVGRenderStyle(WebCore::SVGRenderStyle *this)
{
  WebCore *v2;
  _DWORD *v3;
  WebCore *v4;
  _DWORD *v5;
  WebCore *v6;
  _DWORD *v7;
  WebCore *v8;
  _DWORD *v9;
  WebCore *v10;
  _DWORD *v11;
  WebCore *v12;
  _DWORD *v13;
  _DWORD *v14;

  *(_DWORD *)this = 1;
  v2 = (WebCore *)WebCore::defaultSVGStyle(this);
  v3 = (_DWORD *)*((_QWORD *)v2 + 2);
  ++*v3;
  *((_QWORD *)this + 2) = v3;
  v4 = (WebCore *)WebCore::defaultSVGStyle(v2);
  v5 = (_DWORD *)*((_QWORD *)v4 + 3);
  ++*v5;
  *((_QWORD *)this + 3) = v5;
  v6 = (WebCore *)WebCore::defaultSVGStyle(v4);
  v7 = (_DWORD *)*((_QWORD *)v6 + 4);
  ++*v7;
  *((_QWORD *)this + 4) = v7;
  v8 = (WebCore *)WebCore::defaultSVGStyle(v6);
  v9 = (_DWORD *)*((_QWORD *)v8 + 5);
  ++*v9;
  *((_QWORD *)this + 5) = v9;
  v10 = (WebCore *)WebCore::defaultSVGStyle(v8);
  v11 = (_DWORD *)*((_QWORD *)v10 + 6);
  ++*v11;
  *((_QWORD *)this + 6) = v11;
  v12 = (WebCore *)WebCore::defaultSVGStyle(v10);
  v13 = (_DWORD *)*((_QWORD *)v12 + 7);
  ++*v13;
  *((_QWORD *)this + 7) = v13;
  v14 = *(_DWORD **)(WebCore::defaultSVGStyle(v12) + 64);
  ++*v14;
  *((_QWORD *)this + 8) = v14;
  *((_WORD *)this + 2) = -32192;
  *((_DWORD *)this + 2) = 0;
  return this;
}

uint64_t WebCore::defaultSVGStyle(WebCore *this)
{
  uint64_t v2;
  void *v3;
  WebCore::SVGRenderStyle *v4;

  if ((byte_1ECE848E2 & 1) == 0)
  {
    v2 = WTF::fastMalloc((WTF *)0x48);
    v4 = 0;
    qword_1ECE84938 = WebCore::SVGRenderStyle::SVGRenderStyle(v2);
    WTF::Ref<WebCore::SVGRenderStyle,WTF::RawPtrTraits<WebCore::SVGRenderStyle>,WTF::DefaultRefDerefTraits<WebCore::SVGRenderStyle>>::~Ref(&v4, v3);
    byte_1ECE848E2 = 1;
  }
  return qword_1ECE84938;
}

uint64_t WebCore::SVGRenderStyle::SVGRenderStyle(uint64_t a1)
{
  WebCore::StyleFillData *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  unsigned int *v8;
  void *v9;
  WebCore::StyleMiscData *v10;
  WebCore::StyleMiscData *v11;
  void *v12;
  WebCore::StyleLayoutData *v13;
  uint64_t v14;
  unsigned int *v16;

  *(_DWORD *)a1 = 1;
  v2 = (WebCore::StyleFillData *)WTF::fastMalloc((WTF *)0x40);
  v16 = 0;
  *(_QWORD *)(a1 + 16) = WebCore::StyleFillData::StyleFillData(v2);
  WTF::Ref<WebCore::StyleFillData,WTF::RawPtrTraits<WebCore::StyleFillData>,WTF::DefaultRefDerefTraits<WebCore::StyleFillData>>::~Ref((uint64_t *)&v16, v3);
  v4 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v4 = 0x3F80000000000001;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_DWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_DWORD *)(v4 + 56) = 0;
  *(_WORD *)(v4 + 60) = 4;
  *(_BYTE *)(v4 + 62) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_WORD *)(v4 + 80) = 257;
  v16 = 0;
  *(_QWORD *)(a1 + 24) = v4;
  WTF::Ref<WebCore::StyleStrokeData,WTF::RawPtrTraits<WebCore::StyleStrokeData>,WTF::DefaultRefDerefTraits<WebCore::StyleStrokeData>>::~Ref((uint64_t *)&v16, v5);
  WebCore::StyleTextData::create((WebCore::StyleTextData *)&v16);
  *(_QWORD *)(a1 + 32) = v16;
  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 8) = 0;
  v16 = 0;
  *(_QWORD *)(a1 + 40) = v6;
  WTF::Ref<WebCore::StyleInheritedResourceData,WTF::RawPtrTraits<WebCore::StyleInheritedResourceData>,WTF::DefaultRefDerefTraits<WebCore::StyleInheritedResourceData>>::~Ref((WTF **)&v16, v7);
  WebCore::StyleStopData::create((WebCore::StyleStopData *)&v16);
  v8 = v16;
  v16 = 0;
  *(_QWORD *)(a1 + 48) = v8;
  WTF::Ref<WebCore::StyleStopData,WTF::RawPtrTraits<WebCore::StyleStopData>,WTF::DefaultRefDerefTraits<WebCore::StyleStopData>>::~Ref(&v16, v9);
  v10 = (WebCore::StyleMiscData *)WTF::fastMalloc((WTF *)0x30);
  v11 = WebCore::StyleMiscData::StyleMiscData(v10);
  v16 = 0;
  *(_QWORD *)(a1 + 56) = v11;
  WTF::Ref<WebCore::StyleMiscData,WTF::RawPtrTraits<WebCore::StyleMiscData>,WTF::DefaultRefDerefTraits<WebCore::StyleMiscData>>::~Ref(&v16, v12);
  v13 = (WebCore::StyleLayoutData *)WTF::fastMalloc((WTF *)0x48);
  WebCore::StyleLayoutData::StyleLayoutData(v13);
  v16 = 0;
  *(_QWORD *)(a1 + 64) = v14;
  WTF::Ref<WebCore::StyleLayoutData,WTF::RawPtrTraits<WebCore::StyleLayoutData>,WTF::DefaultRefDerefTraits<WebCore::StyleLayoutData>>::~Ref((WebCore::StyleLayoutData **)&v16);
  *(_WORD *)(a1 + 4) = -32192;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

double WebCore::StyleLayoutData::StyleLayoutData(WebCore::StyleLayoutData *this)
{
  double result;

  *(_QWORD *)&result = 1;
  *(_QWORD *)this = 1;
  *((_WORD *)this + 4) = 4;
  *((_BYTE *)this + 10) = 0;
  *((_DWORD *)this + 3) = 0;
  *((_WORD *)this + 8) = 4;
  *((_BYTE *)this + 18) = 0;
  *((_DWORD *)this + 5) = 0;
  *((_WORD *)this + 12) = 4;
  *((_BYTE *)this + 26) = 0;
  *((_DWORD *)this + 7) = 0;
  *(_DWORD *)((char *)this + 31) = 0;
  *((_DWORD *)this + 9) = 0;
  *(_DWORD *)((char *)this + 39) = 0;
  *((_DWORD *)this + 11) = 0;
  *((_WORD *)this + 24) = 4;
  *((_BYTE *)this + 50) = 0;
  *((_DWORD *)this + 13) = 0;
  *((_WORD *)this + 28) = 4;
  *((_BYTE *)this + 58) = 0;
  *((_QWORD *)this + 8) = 0;
  return result;
}

uint64_t *WebCore::NinePieceImage::defaultMaskData(WebCore::NinePieceImage *this)
{
  WebCore::NinePieceImage::Data *v1;
  WebCore::NinePieceImage::Data *v3;
  WebCore::NinePieceImage::Data *v4[4];

  {
    v3 = (WebCore::NinePieceImage::Data *)WTF::fastMalloc((WTF *)0x70);
    v4[0] = 0;
    WebCore::NinePieceImage::defaultMaskData(void)::maskData = (uint64_t)WebCore::NinePieceImage::Data::Data(v3);
    WebCore::NinePieceImage::~NinePieceImage(v4);
  }
  v1 = WTF::DataRef<WebCore::NinePieceImage::Data>::access((WebCore::NinePieceImage::Data **)&WebCore::NinePieceImage::defaultMaskData(void)::maskData);
  WORD2(v4[0]) = 4;
  BYTE6(v4[0]) = 0;
  LODWORD(v4[0]) = 0;
  WORD2(v4[1]) = 4;
  BYTE6(v4[1]) = 0;
  LODWORD(v4[1]) = 0;
  WORD2(v4[2]) = 4;
  BYTE6(v4[2]) = 0;
  LODWORD(v4[2]) = 0;
  WORD2(v4[3]) = 4;
  BYTE6(v4[3]) = 0;
  LODWORD(v4[3]) = 0;
  std::array<WebCore::Length,4ul>::operator=((WebCore::NinePieceImage::Data *)((char *)v1 + 16), (uint64_t)v4);
  WebCore::LengthBox::~LengthBox((WebCore::LengthBox *)v4);
  *((_BYTE *)v1 + 4) = 0;
  *(_DWORD *)((char *)v4 + 3) = 0;
  LODWORD(v4[0]) = 0;
  memset(&v4[1], 0, 7);
  memset(&v4[2], 0, 7);
  memset(&v4[3], 0, 7);
  std::array<WebCore::Length,4ul>::operator=((WebCore::NinePieceImage::Data *)((char *)v1 + 48), (uint64_t)v4);
  WebCore::LengthBox::~LengthBox((WebCore::LengthBox *)v4);
  return &WebCore::NinePieceImage::defaultMaskData(void)::maskData;
}

WebCore::Length *std::array<WebCore::Length,4ul>::operator=(WebCore::Length *this, uint64_t a2)
{
  unsigned int v4;
  int v5;
  int *v6;
  unsigned int v7;
  int v8;
  int *v9;
  unsigned int v10;
  int v11;
  int *v12;
  unsigned int v13;
  int v14;

  if (this != (WebCore::Length *)a2)
  {
    if (*((_BYTE *)this + 4) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)this);
    }
    v4 = *(unsigned __int8 *)(a2 + 4);
    *((_BYTE *)this + 4) = v4;
    *((_BYTE *)this + 5) = *(_BYTE *)(a2 + 5);
    if (v4 <= 0xD)
    {
      v5 = 1 << v4;
      if ((v5 & 0x7FC) != 0)
      {
        *((_BYTE *)this + 6) = *(_BYTE *)(a2 + 6);
        *(_DWORD *)this = *(_DWORD *)a2;
      }
      else if ((v5 & 0x3003) != 0)
      {
        *(_DWORD *)this = 0;
      }
      else
      {
        *(_DWORD *)this = *(_DWORD *)a2;
        WebCore::Length::ref((int *)this);
      }
    }
    v6 = (int *)((char *)this + 8);
    if (*((_BYTE *)this + 12) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v6);
      v6 = (int *)((char *)this + 8);
    }
    v7 = *(unsigned __int8 *)(a2 + 12);
    *((_BYTE *)this + 12) = v7;
    *((_BYTE *)this + 13) = *(_BYTE *)(a2 + 13);
    if (v7 <= 0xD)
    {
      v8 = 1 << v7;
      if ((v8 & 0x7FC) != 0)
      {
        *((_BYTE *)this + 14) = *(_BYTE *)(a2 + 14);
        *v6 = *(_DWORD *)(a2 + 8);
      }
      else if ((v8 & 0x3003) != 0)
      {
        *v6 = 0;
      }
      else
      {
        *v6 = *(_DWORD *)(a2 + 8);
        WebCore::Length::ref(v6);
      }
    }
    v9 = (int *)((char *)this + 16);
    if (*((_BYTE *)this + 20) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v9);
      v9 = (int *)((char *)this + 16);
    }
    v10 = *(unsigned __int8 *)(a2 + 20);
    *((_BYTE *)this + 20) = v10;
    *((_BYTE *)this + 21) = *(_BYTE *)(a2 + 21);
    if (v10 <= 0xD)
    {
      v11 = 1 << v10;
      if ((v11 & 0x7FC) != 0)
      {
        *((_BYTE *)this + 22) = *(_BYTE *)(a2 + 22);
        *v9 = *(_DWORD *)(a2 + 16);
      }
      else if ((v11 & 0x3003) != 0)
      {
        *v9 = 0;
      }
      else
      {
        *v9 = *(_DWORD *)(a2 + 16);
        WebCore::Length::ref(v9);
      }
    }
    v12 = (int *)((char *)this + 24);
    if (*((_BYTE *)this + 28) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v12);
      v12 = (int *)((char *)this + 24);
    }
    v13 = *(unsigned __int8 *)(a2 + 28);
    *((_BYTE *)this + 28) = v13;
    *((_BYTE *)this + 29) = *(_BYTE *)(a2 + 29);
    if (v13 <= 0xD)
    {
      v14 = 1 << v13;
      if ((v14 & 0x7FC) != 0)
      {
        *((_BYTE *)this + 30) = *(_BYTE *)(a2 + 30);
        *v12 = *(_DWORD *)(a2 + 24);
      }
      else if ((v14 & 0x3003) != 0)
      {
        *v12 = 0;
      }
      else
      {
        *v12 = *(_DWORD *)(a2 + 24);
        WebCore::Length::ref(v12);
      }
    }
  }
  return this;
}

void WebCore::LengthBox::~LengthBox(WebCore::LengthBox *this)
{
  if (*((_BYTE *)this + 28) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 6));
  }
  if (*((_BYTE *)this + 20) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 4));
  }
  if (*((_BYTE *)this + 12) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 2));
  }
  if (*((_BYTE *)this + 4) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)this);
  }
}

WebCore::NinePieceImage::Data *WebCore::NinePieceImage::Data::Data(WebCore::NinePieceImage::Data *this)
{
  unsigned int v3;
  __int16 v4;
  char v5;
  unsigned int v6;
  __int16 v7;
  char v8;
  unsigned int v9;
  __int16 v10;
  char v11;
  unsigned int v12;
  __int16 v13;
  char v14;

  *(_DWORD *)this = 1;
  *(_QWORD *)((char *)this + 4) = 0;
  *((_DWORD *)this + 3) = 0;
  v12 = 100;
  v13 = 3;
  v14 = 0;
  v9 = 100;
  v10 = 3;
  v11 = 0;
  v6 = 100;
  v7 = 3;
  v8 = 0;
  v3 = 100;
  v4 = 3;
  v5 = 0;
  WebCore::RectEdges<WebCore::Length>::RectEdges<WebCore::Length>((uint64_t)this + 16, (int *)&v12, (int *)&v9, (int *)&v6, (int *)&v3);
  if (v4 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v3);
  }
  if (v7 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v6);
  }
  if (v10 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v9);
  }
  if (v13 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v12);
  }
  v12 = 1;
  v13 = 2;
  v14 = 0;
  v9 = 1;
  v10 = 2;
  v11 = 0;
  v6 = 1;
  v7 = 2;
  v8 = 0;
  v3 = 1;
  v4 = 2;
  v5 = 0;
  WebCore::RectEdges<WebCore::Length>::RectEdges<WebCore::Length>((uint64_t)this + 48, (int *)&v12, (int *)&v9, (int *)&v6, (int *)&v3);
  if (v4 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v3);
  }
  if (v7 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v6);
  }
  if (v10 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v9);
  }
  if (v13 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v12);
  }
  *((_DWORD *)this + 20) = 0;
  *((_BYTE *)this + 86) = 0;
  *((_WORD *)this + 42) = 2;
  *((_DWORD *)this + 22) = 0;
  *((_BYTE *)this + 94) = 0;
  *((_WORD *)this + 46) = 2;
  *((_DWORD *)this + 24) = 0;
  *((_BYTE *)this + 102) = 0;
  *((_WORD *)this + 50) = 2;
  *((_BYTE *)this + 110) = 0;
  *((_WORD *)this + 54) = 2;
  *((_DWORD *)this + 26) = 0;
  return this;
}

uint64_t WebCore::RectEdges<WebCore::Length>::RectEdges<WebCore::Length>(uint64_t result, int *a2, int *a3, int *a4, int *a5)
{
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;

  *(_DWORD *)result = 0;
  *(_WORD *)(result + 5) = 0;
  v5 = *((unsigned __int8 *)a2 + 4);
  *(_BYTE *)(result + 4) = v5;
  *(_BYTE *)(result + 5) = *((_BYTE *)a2 + 5);
  if (v5 - 2 < 9)
  {
    v6 = *((unsigned __int8 *)a2 + 6);
    *(_BYTE *)(result + 6) = v6;
    if (v6)
    {
      *(_DWORD *)result = *a2;
      goto LABEL_4;
    }
    v13 = *a2;
    goto LABEL_15;
  }
  if (v5 <= 0xD)
  {
    if (((1 << v5) & 0x3003) != 0)
    {
      *(_DWORD *)result = 0;
    }
    else if (v5 == 11)
    {
      v13 = *a2;
      *a2 = 0;
LABEL_15:
      *(_DWORD *)result = v13;
    }
  }
LABEL_4:
  *((_BYTE *)a2 + 4) = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_WORD *)(result + 13) = 0;
  v7 = *((unsigned __int8 *)a3 + 4);
  *(_BYTE *)(result + 12) = v7;
  *(_BYTE *)(result + 13) = *((_BYTE *)a3 + 5);
  if (v7 - 2 < 9)
  {
    v8 = *((unsigned __int8 *)a3 + 6);
    *(_BYTE *)(result + 14) = v8;
    if (v8)
    {
      *(_DWORD *)(result + 8) = *a3;
      goto LABEL_7;
    }
    v14 = *a3;
    goto LABEL_17;
  }
  if (v7 <= 0xD)
  {
    if (((1 << v7) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 8) = 0;
    }
    else if (v7 == 11)
    {
      v14 = *a3;
      *a3 = 0;
LABEL_17:
      *(_DWORD *)(result + 8) = v14;
    }
  }
LABEL_7:
  *((_BYTE *)a3 + 4) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_WORD *)(result + 21) = 0;
  v9 = *((unsigned __int8 *)a4 + 4);
  *(_BYTE *)(result + 20) = v9;
  *(_BYTE *)(result + 21) = *((_BYTE *)a4 + 5);
  if (v9 - 2 < 9)
  {
    v10 = *((unsigned __int8 *)a4 + 6);
    *(_BYTE *)(result + 22) = v10;
    if (v10)
    {
      *(_DWORD *)(result + 16) = *a4;
      goto LABEL_10;
    }
    v15 = *a4;
    goto LABEL_19;
  }
  if (v9 <= 0xD)
  {
    if (((1 << v9) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 16) = 0;
    }
    else if (v9 == 11)
    {
      v15 = *a4;
      *a4 = 0;
LABEL_19:
      *(_DWORD *)(result + 16) = v15;
    }
  }
LABEL_10:
  *((_BYTE *)a4 + 4) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_WORD *)(result + 29) = 0;
  v11 = *((unsigned __int8 *)a5 + 4);
  *(_BYTE *)(result + 28) = v11;
  *(_BYTE *)(result + 29) = *((_BYTE *)a5 + 5);
  if (v11 - 2 >= 9)
  {
    if (v11 > 0xD)
      goto LABEL_13;
    if (((1 << v11) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 24) = 0;
      goto LABEL_13;
    }
    if (v11 != 11)
      goto LABEL_13;
    v16 = *a5;
    *a5 = 0;
    goto LABEL_21;
  }
  v12 = *((unsigned __int8 *)a5 + 6);
  *(_BYTE *)(result + 30) = v12;
  if (!v12)
  {
    v16 = *a5;
LABEL_21:
    *(_DWORD *)(result + 24) = v16;
    goto LABEL_13;
  }
  *(_DWORD *)(result + 24) = *a5;
LABEL_13:
  *((_BYTE *)a5 + 4) = 0;
  return result;
}

WebCore::StyleGridData *WebCore::StyleGridData::StyleGridData(WebCore::StyleGridData *this)
{
  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = *((_BYTE *)this + 24) & 0xF0 | 5;
  *(_QWORD *)((char *)this + 28) = 0;
  WebCore::RenderStyle::initialGridAutoColumns((uint64_t *)this + 5);
  WebCore::RenderStyle::initialGridAutoColumns((uint64_t *)this + 7);
  *(_OWORD *)((char *)this + 246) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  return this;
}

uint64_t WebCore::StyleBoxData::StyleBoxData(uint64_t this)
{
  *(_QWORD *)this = 1;
  *(_DWORD *)(this + 20) = 0;
  *(_DWORD *)(this + 23) = 0;
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 7) = 0;
  *(_DWORD *)(this + 12) = 0;
  *(_DWORD *)(this + 15) = 0;
  *(_WORD *)(this + 32) = 13;
  *(_BYTE *)(this + 34) = 0;
  *(_DWORD *)(this + 36) = 0;
  *(_DWORD *)(this + 39) = 0;
  *(_DWORD *)(this + 44) = 0;
  *(_WORD *)(this + 48) = 13;
  *(_BYTE *)(this + 50) = 0;
  *(_DWORD *)(this + 60) = 0;
  *(_DWORD *)(this + 64) = 0;
  *(_DWORD *)(this + 55) = 0;
  *(_DWORD *)(this + 52) = 0;
  *(_BYTE *)(this + 68) = 3;
  return this;
}

_QWORD *WebCore::RenderStyle::initialTapHighlightColor@<X0>(uint64_t a1@<X8>)
{
  void (**v3)(WebCore::RenderThemeIOS *__hidden);
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;

  {
    v3 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
  }
  else
  {
    v5 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
    v3 = &off_1E335BC30;
    *(_QWORD *)v5 = &off_1E335BC30;
  }
  result = ((_QWORD *(*)(uint64_t *__return_ptr, uint64_t *))v3[31])(&v6, &WebCore::RenderTheme::singleton(void)::theme);
  *(_QWORD *)a1 = v6;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

void WebCore::RenderThemeIOS::platformTapHighlightColor(_QWORD *a1@<X8>)
{
  *a1 = 0x110400001A1A1A4DLL;
}

uint64_t WebCore::EventHandler::needsKeyboardEventDisambiguationQuirks(WebCore::EventHandler *this)
{
  return 0;
}

int *WebCore::RenderStyle::initialOffsetPosition@<X0>(uint64_t a1@<X8>)
{
  int *result;
  unsigned int v3;
  __int16 v4;
  char v5;
  unsigned int v6;
  __int16 v7;
  char v8;

  v6 = 0;
  v7 = 1;
  v8 = 0;
  v3 = 0;
  v4 = 1;
  v5 = 0;
  result = (int *)WebCore::LengthPoint::LengthPoint(a1, (int *)&v6, (int *)&v3);
  if (v4 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v3);
  }
  if (v7 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v6);
  }
  return result;
}

int *WebCore::RenderStyle::initialObjectPosition@<X0>(uint64_t a1@<X8>)
{
  int *result;
  unsigned int v3;
  __int16 v4;
  char v5;
  unsigned int v6;
  __int16 v7;
  char v8;

  v6 = 1112014848;
  v7 = 3;
  v8 = 1;
  v3 = 1112014848;
  v4 = 3;
  v5 = 1;
  result = (int *)WebCore::LengthPoint::LengthPoint(a1, (int *)&v6, (int *)&v3);
  if (v4 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v3);
  }
  if (v7 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v6);
  }
  return result;
}

uint64_t WebCore::LengthPoint::LengthPoint(uint64_t result, int *a2, int *a3)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;

  *(_DWORD *)result = 0;
  *(_WORD *)(result + 5) = 0;
  v3 = *((unsigned __int8 *)a2 + 4);
  *(_BYTE *)(result + 4) = v3;
  *(_BYTE *)(result + 5) = *((_BYTE *)a2 + 5);
  if (v3 - 2 < 9)
  {
    v4 = *((unsigned __int8 *)a2 + 6);
    *(_BYTE *)(result + 6) = v4;
    if (v4)
    {
      *(_DWORD *)result = *a2;
      goto LABEL_4;
    }
    v7 = *a2;
    goto LABEL_9;
  }
  if (v3 <= 0xD)
  {
    if (((1 << v3) & 0x3003) != 0)
    {
      *(_DWORD *)result = 0;
    }
    else if (v3 == 11)
    {
      v7 = *a2;
      *a2 = 0;
LABEL_9:
      *(_DWORD *)result = v7;
    }
  }
LABEL_4:
  *((_BYTE *)a2 + 4) = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_WORD *)(result + 13) = 0;
  v5 = *((unsigned __int8 *)a3 + 4);
  *(_BYTE *)(result + 12) = v5;
  *(_BYTE *)(result + 13) = *((_BYTE *)a3 + 5);
  if (v5 - 2 >= 9)
  {
    if (v5 > 0xD)
      goto LABEL_7;
    if (((1 << v5) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 8) = 0;
      goto LABEL_7;
    }
    if (v5 != 11)
      goto LABEL_7;
    v8 = *a3;
    *a3 = 0;
    goto LABEL_11;
  }
  v6 = *((unsigned __int8 *)a3 + 6);
  *(_BYTE *)(result + 14) = v6;
  if (!v6)
  {
    v8 = *a3;
LABEL_11:
    *(_DWORD *)(result + 8) = v8;
    goto LABEL_7;
  }
  *(_DWORD *)(result + 8) = *a3;
LABEL_7:
  *((_BYTE *)a3 + 4) = 0;
  return result;
}

int *WebCore::RenderStyle::initialGridAutoColumns@<X0>(uint64_t *a1@<X8>)
{
  int *result;
  _DWORD v4[2];
  unsigned int v5;
  char v6;
  _BYTE v7[8];
  unsigned int v8;
  char v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  memset(v4, 0, 7);
  WebCore::GridLength::GridLength((WebCore::GridLength *)&v5, (const WebCore::Length *)v4);
  WebCore::GridTrackSize::GridTrackSize((uint64_t)v7, (uint64_t)&v5, 0);
  result = (int *)WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, (uint64_t)v7, 1uLL);
  if (v13 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v12);
  }
  if (v11 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v10);
  }
  if (v9 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v8);
  }
  if (v6 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v5);
  }
  if (LOBYTE(v4[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v4[0]);
  }
  return result;
}

uint64_t WebCore::GridTrackSize::GridTrackSize(uint64_t a1, uint64_t a2, int a3)
{
  WebCore::GridLength *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  int v9;
  int *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  int v18;
  BOOL v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  unsigned int v25[2];

  *(_DWORD *)a1 = a3;
  v5 = (WebCore::GridLength *)(a1 + 8);
  if (a3 == 2)
  {
    memset(v25, 0, 7);
    WebCore::GridLength::GridLength(v5, (const WebCore::Length *)v25);
    if (LOBYTE(v25[1]) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v25[0]);
    }
    memset(v25, 0, 7);
    WebCore::GridLength::GridLength((WebCore::GridLength *)(a1 + 32), (const WebCore::Length *)v25);
    if (LOBYTE(v25[1]) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v25[0]);
    }
    WebCore::GridLength::GridLength((WebCore::GridLength *)(a1 + 56), (const WebCore::GridLength *)a2);
  }
  else
  {
    *(_DWORD *)(a1 + 8) = 0;
    *(_WORD *)(a1 + 13) = 0;
    v6 = *(unsigned __int8 *)(a2 + 4);
    *(_BYTE *)(a1 + 12) = v6;
    *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 5);
    if (v6 <= 0xD)
    {
      v7 = 1 << v6;
      if ((v7 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 6);
        *(_DWORD *)v5 = *(_DWORD *)a2;
      }
      else if ((v7 & 0x3003) != 0)
      {
        *(_DWORD *)v5 = 0;
      }
      else
      {
        *(_DWORD *)v5 = *(_DWORD *)a2;
        WebCore::Length::ref((int *)v5);
      }
    }
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) = 0;
    v10 = (int *)(a1 + 32);
    *(_DWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 16) = v8;
    *(_WORD *)(a1 + 37) = 0;
    v11 = *(unsigned __int8 *)(a2 + 4);
    *(_BYTE *)(a1 + 36) = v11;
    *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 5);
    if (v11 <= 0xD)
    {
      v12 = 1 << v11;
      if ((v12 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 6);
        *v10 = *(_DWORD *)a2;
      }
      else if ((v12 & 0x3003) != 0)
      {
        *v10 = 0;
      }
      else
      {
        *v10 = *(_DWORD *)a2;
        WebCore::Length::ref(v10);
      }
    }
    v13 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 40) = v13;
    *(_WORD *)(a1 + 60) = 4;
    *(_BYTE *)(a1 + 62) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
  }
  if (*(_DWORD *)(a1 + 24))
  {
    v16 = 0;
    v15 = *(_WORD *)(a1 + 80) & 0xFFF6;
  }
  else
  {
    v14 = *(unsigned __int8 *)(a1 + 12);
    v15 = *(_WORD *)(a1 + 80) & 0xFFF6 | (v14 == 0) | (8 * (v14 == 7));
    v16 = 4 * (v14 == 8);
  }
  v17 = v16 | v15 & 0xFFFB;
  if (*(_DWORD *)(a1 + 48))
  {
    v21 = 0;
    v20 = v17 & 0xFFCD;
  }
  else
  {
    v18 = *(unsigned __int8 *)(a1 + 36);
    v19 = (v18 & 0xFFFFFFF7) == 3 || v18 == 4;
    v20 = v17 & 0xFFCD | (16 * (v18 == 8)) | (32 * (v18 == 7)) | (2 * (*(_BYTE *)(a1 + 36) == 0));
    if (v19)
      v21 = 256;
    else
      v21 = 0;
  }
  if ((v20 & 0xD) != 0)
    v22 = 64;
  else
    v22 = (*(_DWORD *)a1 == 2) << 6;
  if ((v20 & 0x32) != 0)
    v23 = 128;
  else
    v23 = (*(_DWORD *)a1 == 2) << 7;
  *(_WORD *)(a1 + 80) = v20 & 0xFE3F | v21 | v22 | v23;
  return a1;
}

WebCore::GridLength *WebCore::GridLength::GridLength(WebCore::GridLength *this, const WebCore::Length *a2)
{
  unsigned int v3;
  int v4;

  *(_DWORD *)this = 0;
  *(_WORD *)((char *)this + 5) = 0;
  v3 = *((unsigned __int8 *)a2 + 4);
  *((_BYTE *)this + 4) = v3;
  *((_BYTE *)this + 5) = *((_BYTE *)a2 + 5);
  if (v3 <= 0xD)
  {
    v4 = 1 << v3;
    if ((v4 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 6) = *((_BYTE *)a2 + 6);
      *(_DWORD *)this = *(_DWORD *)a2;
    }
    else if ((v4 & 0x3003) != 0)
    {
      *(_DWORD *)this = 0;
    }
    else
    {
      *(_DWORD *)this = *(_DWORD *)a2;
      WebCore::Length::ref((int *)this);
    }
  }
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  return this;
}

uint64_t *WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  if (a3 < 0x2E8BA2F)
  {
    v5 = 88 * a3;
    v6 = WTF::fastMalloc((WTF *)(88 * a3));
    *((_DWORD *)v3 + 2) = (v5 & 0xFFFFFFF8) / 0x58;
    *v3 = v6;
    v7 = *((_DWORD *)v3 + 3);
    do
    {
      WebCore::GridTrackSize::GridTrackSize(*v3 + 88 * v7, a2);
      v7 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v7;
      a2 += 88;
      v5 -= 88;
    }
    while (v5);
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::GridTrackSize::GridTrackSize(uint64_t a1, uint64_t a2)
{
  int *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  int v8;
  int *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  int v13;
  int *v14;
  unsigned int v15;
  int v16;
  uint64_t v17;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 8) = 0;
  v4 = (int *)(a1 + 8);
  *(_WORD *)(a1 + 13) = 0;
  v5 = *(unsigned __int8 *)(a2 + 12);
  *(_BYTE *)(a1 + 12) = v5;
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  if (v5 <= 0xD)
  {
    v6 = 1 << v5;
    if ((v6 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
      *v4 = *(_DWORD *)(a2 + 8);
    }
    else if ((v6 & 0x3003) != 0)
    {
      *v4 = 0;
    }
    else
    {
      *v4 = *(_DWORD *)(a2 + 8);
      WebCore::Length::ref(v4);
    }
  }
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = 0;
  v9 = (int *)(a1 + 32);
  *(_DWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 16) = v7;
  *(_WORD *)(a1 + 37) = 0;
  v10 = *(unsigned __int8 *)(a2 + 36);
  *(_BYTE *)(a1 + 36) = v10;
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  if (v10 <= 0xD)
  {
    v11 = 1 << v10;
    if ((v11 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
      *v9 = *(_DWORD *)(a2 + 32);
    }
    else if ((v11 & 0x3003) != 0)
    {
      *v9 = 0;
    }
    else
    {
      *v9 = *(_DWORD *)(a2 + 32);
      WebCore::Length::ref(v9);
    }
  }
  v12 = *(_QWORD *)(a2 + 40);
  v13 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = 0;
  v14 = (int *)(a1 + 56);
  *(_DWORD *)(a1 + 48) = v13;
  *(_QWORD *)(a1 + 40) = v12;
  *(_WORD *)(a1 + 61) = 0;
  v15 = *(unsigned __int8 *)(a2 + 60);
  *(_BYTE *)(a1 + 60) = v15;
  *(_BYTE *)(a1 + 61) = *(_BYTE *)(a2 + 61);
  if (v15 <= 0xD)
  {
    v16 = 1 << v15;
    if ((v16 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 62) = *(_BYTE *)(a2 + 62);
      *v14 = *(_DWORD *)(a2 + 56);
    }
    else if ((v16 & 0x3003) != 0)
    {
      *v14 = 0;
    }
    else
    {
      *v14 = *(_DWORD *)(a2 + 56);
      WebCore::Length::ref(v14);
    }
  }
  v17 = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v17;
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  return a1;
}

WebCore::FontCascade *WebCore::FontCascade::FontCascade(WebCore::FontCascade *this)
{
  _DWORD *v2;
  unsigned int v3;
  _QWORD *v4;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_BYTE *)this + 113) = 1;
  *((_BYTE *)this + 120) = 0;
  v2 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v2 += 2;
  *((_QWORD *)this + 16) = v2;
  *((_WORD *)this + 68) = 0;
  *((_DWORD *)this + 35) = 2143289344;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 26216000;
  *((_WORD *)this + 84) = 257;
  v3 = *((_DWORD *)this + 44) & 0x80000000 | 0xE000;
  *((_DWORD *)this + 43) = 0;
  *((_DWORD *)this + 44) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 182);
  *((_WORD *)this + 90) = 0;
  *((_BYTE *)this + 182) = v3 & 0xFC;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = 0x100000001;
  v4[1] = 0;
  *((_QWORD *)this + 23) = v4;
  *((_DWORD *)this + 48) = 0;
  *((_WORD *)this + 98) &= 0xFC00u;
  *((_DWORD *)this + 50) = 0;
  *((_WORD *)this + 102) = 4;
  *((_BYTE *)this + 206) = 0;
  *((_DWORD *)this + 52) = 0;
  *((_WORD *)this + 106) = 4;
  *((_BYTE *)this + 214) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_QWORD *)((char *)this + 223) = 0;
  *((_QWORD *)this + 27) = 0;
  return this;
}

{
  _DWORD *v2;
  unsigned int v3;
  _QWORD *v4;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_BYTE *)this + 113) = 1;
  *((_BYTE *)this + 120) = 0;
  v2 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v2 += 2;
  *((_QWORD *)this + 16) = v2;
  *((_WORD *)this + 68) = 0;
  *((_DWORD *)this + 35) = 2143289344;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 26216000;
  *((_WORD *)this + 84) = 257;
  v3 = *((_DWORD *)this + 44) & 0x80000000 | 0xE000;
  *((_DWORD *)this + 43) = 0;
  *((_DWORD *)this + 44) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 182);
  *((_WORD *)this + 90) = 0;
  *((_BYTE *)this + 182) = v3 & 0xFC;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = 0x100000001;
  v4[1] = 0;
  *((_QWORD *)this + 23) = v4;
  *((_DWORD *)this + 48) = 0;
  *((_WORD *)this + 98) &= 0xFC00u;
  *((_DWORD *)this + 50) = 0;
  *((_WORD *)this + 102) = 4;
  *((_BYTE *)this + 206) = 0;
  *((_DWORD *)this + 52) = 0;
  *((_WORD *)this + 106) = 4;
  *((_BYTE *)this + 214) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_QWORD *)((char *)this + 223) = 0;
  *((_QWORD *)this + 27) = 0;
  return this;
}

uint64_t WebCore::BorderValue::BorderValue(uint64_t this)
{
  *(_DWORD *)(this + 8) = 1;
  *(_DWORD *)(this + 16) = 1077936128;
  *(_BYTE *)(this + 20) &= 0xE0u;
  return this;
}

WebCore::NinePieceImage::Data *WTF::DataRef<WebCore::NinePieceImage::Data>::access(WebCore::NinePieceImage::Data **a1)
{
  WebCore::NinePieceImage::Data *result;
  WebCore::NinePieceImage::Data *v3;
  WTF *v4;
  void *v5;
  WebCore::NinePieceImage::Data *v6;

  result = *a1;
  if (*(_DWORD *)result != 1)
  {
    WebCore::NinePieceImage::Data::copy(result, (uint64_t *)&v6);
    result = v6;
    v3 = *a1;
    *a1 = v6;
    if (v3)
    {
      if (*(_DWORD *)v3 == 1)
      {
        WebCore::NinePieceImage::Data::~Data(v3);
        WTF::fastFree(v4, v5);
        return *a1;
      }
      else
      {
        --*(_DWORD *)v3;
      }
    }
  }
  return result;
}

void WebCore::DocumentFontLoader::fontLoadingTimerFired(WebCore::DocumentFontLoader *this, void *a2)
{
  void *v3;
  WebCore::Document *v4;
  WTF::MonotonicTime *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  WTF *v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;

  WebCore::DocumentFontLoader::loadPendingFonts(this, a2);
  v4 = *(WebCore::Document **)(*(_QWORD *)this + 8);
  v5 = (WTF::MonotonicTime *)*((_QWORD *)v4 + 90);
  if (!v5)
    v5 = (WTF::MonotonicTime *)WebCore::Document::ensureCachedResourceLoader(v4, v3);
  ++*(_DWORD *)v5;
  WebCore::CachedResourceLoader::loadDone(v5, 0, 1);
  if (*(_DWORD *)v5 == 1)
  {
    WebCore::CachedResourceLoader::~CachedResourceLoader(v5, v6);
    WTF::fastFree(v14, v15);
  }
  else
  {
    --*(_DWORD *)v5;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 528);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v11 = *(WTF **)(v8 + 280);
      ++*(_DWORD *)v11;
      WebCore::FrameLoader::checkLoadComplete(v11, 0);
      if (!*(_DWORD *)v11)
      {
        __break(0xC471u);
        JUMPOUT(0x1943B8AC8);
      }
      --*(_DWORD *)v11;
      do
      {
        v12 = __ldaxr(v9);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v9));
      if (!v13)
      {
        atomic_store(1u, v9);
        v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v16 = off_1E31FE290;
        v16[1] = v9;
        v17 = v16;
        WTF::ensureOnMainThread();
        if (v17)
          (*(void (**)(_QWORD *))(*v17 + 8))(v17);
      }
    }
  }
}

void WebCore::DocumentFontLoader::loadPendingFonts(WebCore::DocumentFontLoader *this, void *a2)
{
  WTF *v2;
  uint64_t v3;
  WebCore::Document *v4;
  WebCore::CachedResourceLoader *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  WebCore::CachedResource *v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  unsigned int **v16;
  uint64_t v17;
  WTF *v18;
  void *v19;

  if (!*((_BYTE *)this + 80))
  {
    v2 = (WTF *)*((_QWORD *)this + 8);
    v3 = *((unsigned int *)this + 19);
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 9) = 0;
    v4 = *(WebCore::Document **)(*(_QWORD *)this + 8);
    v5 = (WebCore::CachedResourceLoader *)*((_QWORD *)v4 + 90);
    if (!v5)
      v5 = (WebCore::CachedResourceLoader *)WebCore::Document::ensureCachedResourceLoader(v4, a2);
    v6 = (*(_DWORD *)v5)++;
    v7 = 8 * v3;
    if ((_DWORD)v3)
    {
      v8 = 8 * v3;
      v9 = v2;
      do
      {
        v10 = *(_QWORD *)v9;
        if (*(_QWORD *)v9)
          v11 = *(WebCore::CachedResource **)(v10 + 8);
        else
          v11 = 0;
        if (!*((_BYTE *)v11 + 656))
        {
          *((_BYTE *)v11 + 656) = 1;
          WebCore::CachedResource::load(v11, v5);
          v10 = *(_QWORD *)v9;
        }
        if (v10)
          v10 = *(_QWORD *)(v10 + 8);
        if ((*(_WORD *)(v10 + 557) & 0x4000) == 0)
        {
          v12 = *(_BYTE *)(v10 + 556) & 0x1F;
          v13 = v12 > 0xD;
          v14 = (1 << v12) & 0x2F01;
          if (v13 || v14 == 0)
            --*((_DWORD *)v5 + 22);
        }
        v9 = (WTF *)((char *)v9 + 8);
        v8 -= 8;
      }
      while (v8);
      v6 = *(_DWORD *)v5 - 1;
    }
    if (v6)
    {
      *(_DWORD *)v5 = v6;
      if ((_DWORD)v3)
        goto LABEL_25;
    }
    else
    {
      WebCore::CachedResourceLoader::~CachedResourceLoader(v5, a2);
      WTF::fastFree(v18, v19);
      if ((_DWORD)v3)
      {
LABEL_25:
        v16 = (unsigned int **)v2;
        do
        {
          WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v16, a2);
          v16 = (unsigned int **)(v17 + 8);
          v7 -= 8;
        }
        while (v7);
      }
    }
    if (v2)
      WTF::fastFree(v2, a2);
  }
}

void WebCore::CachedFont::beginLoadIfNeeded(WebCore::CachedResource *this, WebCore::CachedResourceLoader *a2)
{
  if (!*((_BYTE *)this + 656))
  {
    *((_BYTE *)this + 656) = 1;
    WebCore::CachedResource::load(this, a2);
  }
}

uint64_t WebCore::collectVaryingRequestHeaders@<X0>(uint64_t this@<X0>, WebCore::NetworkStorageSession *a2@<X1>, const WebCore::ResourceRequest *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v10 = this;
  if (this)
  {
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v8 = off_1E341D7D0;
    v8[1] = a2;
    v8[2] = &v10;
    v9 = v8;
    WebCore::collectVaryingRequestHeadersInternal((uint64_t)a4, (uint64_t)a3, &v9);
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
  return this;
}

void WebCore::FetchLoader::start(WebCore::FetchLoader *this, WebCore::ScriptExecutionContext *a2, const WebCore::FetchRequest *a3, WTF::StringImpl **a4)
{
  _DWORD *v8;
  __int128 v9;
  int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  char v18;
  WTF::StringImpl *v19;
  unsigned int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  char v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  WTF::StringImpl **v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t (*v36)();
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  unsigned int v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53[2];
  __int128 v54;
  __int128 v55;
  WTF::StringImpl *v56;
  int v57;
  __int16 v58;
  uint64_t v59;
  char v60;
  WTF::StringImpl *v61;
  __int128 v62;
  __int128 v63;
  char v64;
  _BYTE v65[5];
  char v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  WTF::StringImpl *v70;
  int v71;
  _DWORD v72[4];
  _DWORD v73[2];
  _DWORD *v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  char v81;
  char v82;
  char v83;
  __int16 v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v72[0] = *((_DWORD *)a3 + 140);
  *(_DWORD *)((char *)v72 + 3) = *(_DWORD *)((char *)a3 + 563);
  v8 = (_DWORD *)*((_QWORD *)a3 + 71);
  if (v8)
    *v8 += 2;
  v9 = *((_OWORD *)a3 + 37);
  v75 = *((_OWORD *)a3 + 36);
  v76 = v9;
  v73[0] = v72[0];
  *(_DWORD *)((char *)v73 + 3) = *(_DWORD *)((char *)v72 + 3);
  v74 = v8;
  v78 = 0;
  v79 = 0;
  v77 = 0;
  v80 = 0;
  v81 = 1;
  v82 = 0;
  v83 = 0;
  v84 = 20;
  v86 = 0;
  v87 = 0;
  v85 = 201329091;
  if ((*(unsigned int (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 264))(a2))
    v10 = 0;
  else
    v10 = 2;
  v11 = *a4;
  if (v11)
    *(_DWORD *)v11 += 2;
  WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)v65, (const WebCore::ResourceLoaderOptions *)v73);
  v69 = v10;
  v70 = v11;
  v71 = 1;
  v68 = *((_QWORD *)a3 + 79);
  v67 = v67 & 0xFFFFF7F2 | 0xC;
  v12 = (*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 136))(a2);
  v13 = v67;
  if ((*(_QWORD *)(v12 + 440) & 0x8000000000000000) != 0)
    v13 = v67 & 0xF9FFFFFF | ((*((_BYTE *)a3 + 608) & 3) << 25);
  v67 = v13 & 0xF7FFFFFF | (*((unsigned __int8 *)a3 + 640) << 27);
  WebCore::FetchRequest::resourceRequest(a3, (uint64_t)&v61);
  v14 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy(a2);
  v15 = v14;
  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 + 1, v14));
  WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded((uint64_t)v14, (WebCore::ResourceRequest *)&v61, 0, 0);
  if (((*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 264))(a2) & 1) != 0)
    goto LABEL_19;
  if ((v64 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v61);
    v64 |= 1u;
  }
  v53[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v53);
  v18 = WebCore::ContentSecurityPolicy::allowConnectToSource((uint64_t)v15, (WTF::URL *)&v61, 0, (uint64_t)v53);
  v19 = v53[0];
  v53[0] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  if ((v18 & 1) != 0)
  {
LABEL_19:
    if (v15)
    {
      if (!atomic_load(v15))
      {
        __break(0xC471u);
        JUMPOUT(0x1943B92ACLL);
      }
      do
        v21 = __ldaxr(v15);
      while (__stlxr(v21 - 1, v15));
    }
    v22 = (WTF::StringImpl *)*((_QWORD *)a3 + 77);
    if (v22)
      *(_DWORD *)v22 += 2;
    v52 = v22;
    if (MEMORY[0x19AEA53F4]())
    {
      v66 = 1;
      v31 = v52;
      v52 = 0;
      if (!v31)
        goto LABEL_39;
    }
    else
    {
      v24 = MEMORY[0x19AEA53F4](v52, "client", 6);
      v25 = v24;
      if (v24)
      {
        v28 = (WTF::StringImpl **)(*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 112))(a2);
        v27 = &v51;
      }
      else
      {
        v26 = (*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 112))(a2);
        MEMORY[0x19AEA52F8](v53, v26, &v52, 0);
        v27 = &v50;
        v28 = v53;
      }
      WTF::URL::strippedForUseAsReferrer((WTF::URL *)v28);
      v29 = *v27;
      *v27 = 0;
      v30 = v52;
      v52 = v29;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v23);
        else
          *(_DWORD *)v30 -= 2;
      }
      if ((v25 & 1) != 0)
      {
        v31 = v51;
        v51 = 0;
        if (!v31)
        {
LABEL_39:
          if (!v66)
            v66 = (*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 8))(a2);
          v48 = 0;
          WebCore::ThreadableLoader::create(a2, (uint64_t)this, (WebCore::ResourceRequest *)&v61, (uint64_t)v65, &v52, (uint64_t)&v48, &v49);
          v34 = *((_QWORD *)this + 4);
          *((_QWORD *)this + 4) = v49;
          if (v34)
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 40))(v34);
          v35 = v48;
          v48 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, v33);
            else
              *(_DWORD *)v35 -= 2;
          }
          if (*((_QWORD *)this + 4))
            v36 = WTF::RefPtr<WebCore::ThreadableLoader,WTF::RawPtrTraits<WebCore::ThreadableLoader>,WTF::DefaultRefDerefTraits<WebCore::ThreadableLoader>>::unspecifiedBoolTypeInstance;
          else
            v36 = 0;
          *((_BYTE *)this + 48) = v36 != 0;
          v37 = v52;
          v52 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
              WTF::StringImpl::destroy(v37, v33);
            else
              *(_DWORD *)v37 -= 2;
          }
          goto LABEL_52;
        }
      }
      else
      {
        v32 = v50;
        v50 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v23);
          else
            *(_DWORD *)v32 -= 2;
        }
        v31 = v53[0];
        v53[0] = 0;
        if (!v31)
          goto LABEL_39;
      }
    }
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v23);
    else
      *(_DWORD *)v31 -= 2;
    goto LABEL_39;
  }
  v41 = *((_QWORD *)this + 3);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v42 = v53[0];
  if ((v64 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v61);
    v64 |= 1u;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v43 = v53[0];
  if (v42)
    *(_DWORD *)v42 += 2;
  v53[0] = v42;
  v44 = v61;
  if (v61)
    *(_DWORD *)v61 += 2;
  v53[1] = v44;
  v54 = v62;
  v55 = v63;
  if (v43)
    *(_DWORD *)v43 += 2;
  v56 = v43;
  v57 = 0;
  v58 = 2;
  v59 = 0;
  v60 = 1;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v41 + 40))(v41, v53);
  WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v53, v45);
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v33);
    else
      *(_DWORD *)v43 -= 2;
  }
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v33);
    else
      *(_DWORD *)v42 -= 2;
  }
  if (v15)
  {
    if (!atomic_load(v15))
    {
      __break(0xC471u);
      JUMPOUT(0x1943B9300);
    }
    do
      v47 = __ldaxr(v15);
    while (__stlxr(v47 - 1, v15));
  }
LABEL_52:
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v61, v33);
  v39 = v70;
  v70 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v38);
    else
      *(_DWORD *)v39 -= 2;
  }
  WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)v65, v38);
  WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)v73, v40);
}

void WebCore::FetchRequest::resourceRequest(WebCore::FetchRequest *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  void *v38;
  WebCore::FormData *v39;
  WebCore::FormData *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)a2, (WebCore::FetchRequest *)((char *)this + 288));
  v5 = (_DWORD *)*((_QWORD *)this + 55);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a2 + 152) = v5;
  v6 = (_DWORD *)*((_QWORD *)this + 56);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(a2 + 160) = v6;
  v7 = (_DWORD *)*((_QWORD *)this + 57);
  if (v7)
    ++*v7;
  v8 = *((_QWORD *)this + 58);
  *(_QWORD *)(a2 + 168) = v7;
  *(_QWORD *)(a2 + 176) = v8;
  *(_BYTE *)(a2 + 184) = *((_BYTE *)this + 472);
  v9 = (const void *)*((_QWORD *)this + 60);
  *(_QWORD *)(a2 + 192) = v9;
  if (v9)
    CFRetain(v9);
  v10 = *((_QWORD *)this + 19);
  v11 = *(unsigned int *)(v10 + 20);
  v41 = 0;
  LODWORD(v42) = 0;
  HIDWORD(v42) = v11;
  if ((_DWORD)v11)
  {
    if (v11 >> 28)
      goto LABEL_47;
    v12 = WTF::fastMalloc((WTF *)(16 * v11));
    v13 = v12;
    LODWORD(v42) = v11;
    v41 = v12;
    v14 = *(unsigned int *)(v10 + 20);
    if ((_DWORD)v14)
    {
      v15 = 0;
      v16 = *(_QWORD *)(v10 + 8);
      v17 = v16 + 16 * v14;
      do
      {
        v18 = v16 + v15;
        *(_WORD *)(v12 + v15) = *(_WORD *)(v16 + v15);
        v19 = *(_DWORD **)(v16 + v15 + 8);
        if (v19)
          *v19 += 2;
        *(_QWORD *)(v12 + v15 + 8) = v19;
        v15 += 16;
      }
      while (v18 + 16 != v17);
    }
  }
  else
  {
    v13 = 0;
  }
  v20 = 0;
  v21 = *(unsigned int *)(v10 + 36);
  v43 = 0;
  LODWORD(v44) = 0;
  HIDWORD(v44) = v21;
  if (!(_DWORD)v21)
    goto LABEL_17;
  if (v21 >> 28)
  {
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x1943B95F8);
  }
  v27 = WTF::fastMalloc((WTF *)(16 * v21));
  v20 = v27;
  LODWORD(v44) = v21;
  v43 = v27;
  v28 = *(unsigned int *)(v10 + 36);
  if ((_DWORD)v28)
  {
    v29 = 0;
    v30 = *(_QWORD *)(v10 + 24);
    v31 = v30 + 16 * v28;
    do
    {
      v32 = v30 + v29;
      v33 = *(_DWORD **)(v30 + v29);
      if (v33)
        *v33 += 2;
      *(_QWORD *)(v27 + v29) = v33;
      v34 = *(_DWORD **)(v32 + 8);
      if (v34)
        *v34 += 2;
      *(_QWORD *)(v27 + v29 + 8) = v34;
      v29 += 16;
    }
    while (v32 + 16 != v31);
  }
LABEL_17:
  if ((*(_BYTE *)(a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
    *(_BYTE *)(a2 + 184) |= 1u;
  }
  v22 = *(unsigned int *)(a2 + 108);
  if ((_DWORD)v22)
  {
    v35 = 16 * v22;
    v36 = (WTF::StringImpl **)(*(_QWORD *)(a2 + 96) + 8);
    do
    {
      v37 = *v36;
      *v36 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v4);
        else
          *(_DWORD *)v37 -= 2;
      }
      v36 += 2;
      v35 -= 16;
    }
    while (v35);
  }
  v23 = *(WTF **)(a2 + 96);
  if (v23)
  {
    *(_QWORD *)(a2 + 96) = 0;
    *(_DWORD *)(a2 + 104) = 0;
    WTF::fastFree(v23, v4);
  }
  v41 = 0;
  v42 = 0;
  *(_QWORD *)(a2 + 96) = v13;
  *(_DWORD *)(a2 + 104) = v11;
  *(_DWORD *)(a2 + 108) = v11;
  v24 = *(unsigned int *)(a2 + 124);
  if ((_DWORD)v24)
    WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::destruct(*(WTF::StringImpl **)(a2 + 112), (WTF::StringImpl *)(*(_QWORD *)(a2 + 112) + 16 * v24));
  v25 = *(WTF **)(a2 + 112);
  if (v25)
  {
    *(_QWORD *)(a2 + 112) = 0;
    *(_DWORD *)(a2 + 120) = 0;
    WTF::fastFree(v25, v4);
  }
  v43 = 0;
  v44 = 0;
  *(_QWORD *)(a2 + 112) = v20;
  *(_DWORD *)(a2 + 120) = v21;
  *(_DWORD *)(a2 + 124) = v21;
  *(_BYTE *)(a2 + 184) &= ~2u;
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)&v41, v4);
  if (*((_BYTE *)this + 128))
  {
    WebCore::FetchBody::bodyAsFormData((uint64_t *)this + 5, v26, &v40);
    WebCore::ResourceRequestBase::setHTTPBody((WebCore::FormData **)a2, &v40);
    v39 = v40;
    v40 = 0;
    if (v39)
      WTF::RefCounted<WebCore::FormData>::deref(v39, v38);
  }
}

uint64_t WebCore::XMLHttpRequest::prepareToSend(WebCore::XMLHttpRequest *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t result;
  unsigned int *v9;
  char v10;
  unsigned int *v11;
  unsigned int v13;
  char v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  void *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  WTF::StringImpl *v25;

  v3 = *(_QWORD *)(a2 + 8);
  if (!v3)
    goto LABEL_39;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_39;
  v6 = v4 - 96;
  if (*(_BYTE *)(v4 + 178))
  {
LABEL_7:
    if ((*(_WORD *)(a2 + 80) & 0x704) != 0x100)
    {
      v14 = 8;
LABEL_19:
      LOBYTE(v21) = v14;
      LOBYTE(v23) = 1;
      *(_BYTE *)this = v14;
      v22 = 0;
      *((_QWORD *)this + 1) = 0;
      *((_BYTE *)this + 16) = 1;
      *((_BYTE *)this + 24) = 1;
      return WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v21, (WTF::StringImpl *)a2);
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 264))(v4 - 96);
    if ((result & 1) != 0)
      goto LABEL_16;
    WebCore::SecurityContext::checkedContentSecurityPolicy((WebCore::SecurityContext *)(v4 - 96), &v24);
    v9 = v24;
    v21 = 0;
    WTF::URL::invalidate((WTF::URL *)&v21);
    v10 = WebCore::ContentSecurityPolicy::allowConnectToSource((uint64_t)v9, (WTF::URL *)(a2 + 96), 0, (uint64_t)&v21);
    result = (uint64_t)v21;
    v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    v11 = v24;
    if (v24)
    {
      if (!atomic_load(v24))
      {
        result = 286;
        __break(0xC471u);
        return result;
      }
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
    }
    if ((v10 & 1) != 0)
    {
LABEL_16:
      *(_WORD *)(a2 + 80) &= ~0x10u;
      *(_BYTE *)this = 0;
      *((_BYTE *)this + 24) = 0;
      return result;
    }
    if ((*(_WORD *)(a2 + 80) & 1) == 0)
    {
      v14 = 15;
      goto LABEL_19;
    }
    if ((*(_QWORD *)(a2 + 664) & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a2 + 632));
    v20 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v20 = off_1E3483F28;
    *((_QWORD *)v20 + 1) = a2;
    v21 = v20;
    WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::XMLHttpRequest>(a2, (uint64_t (***)())&v21);
    if (v21)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v21 + 8))(v21);
LABEL_39:
    v21 = 0;
    v22 = 0;
    v23 = 0;
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 16) = 0;
    *((_BYTE *)this + 24) = 1;
    return WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v21, (WTF::StringImpl *)a2);
  }
  v7 = (_DWORD *)(v4 - 264);
  *(_DWORD *)(v4 - 264) += 2;
  if (!WebCore::Document::shouldIgnoreSyncXHRs((WebCore::Document *)(v4 - 288)))
  {
    if (*v7 == 2)
    {
      if ((*(_WORD *)(v4 - 258) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 288), (void *)a2);
    }
    else
    {
      *v7 -= 2;
    }
    goto LABEL_7;
  }
  v15 = *(WTF::StringImpl **)(a2 + 96);
  if (v15)
    *(_DWORD *)v15 += 2;
  v25 = v15;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"Ignoring XMLHttpRequest.send() call for '", 42, (uint64_t *)&v25, (int8x16_t *)"' because the maximum number of synchronous failures was reached.", 66, &v21);
  (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v6 + 248))(v4 - 96, 1, 2, &v21, 0);
  v17 = v21;
  v21 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v25;
  v25 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v21 = 0;
  v22 = 0;
  v23 = 0;
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 16) = 0;
  *((_BYTE *)this + 24) = 1;
  result = WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v21, v16);
  if (*v7 == 2)
  {
    if ((*(_WORD *)(v4 - 258) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 288), v19);
  }
  else
  {
    *v7 -= 2;
  }
  return result;
}

uint64_t WebCore::ContentSecurityPolicy::allowConnectToSource(uint64_t a1, WTF::URL *this, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v4;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  _QWORD *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unsigned __int8 v19;
  _QWORD v20[2];
  uint64_t v21;
  WTF::StringImpl *v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a1 + 148))
    return 1;
  v10 = (unsigned __int8 *)WTF::URL::protocol(this);
  if ((WebCore::LegacySchemeRegistry::schemeShouldBypassContentSecurityPolicy(v10, v11, v12, v13) & 1) != 0)
    return 1;
  v22 = 0;
  v21 = 0xFFFFFFFFLL;
  v14 = operator new(0x30uLL);
  *v14 = &off_1E34035A0;
  v14[1] = this;
  v14[2] = a1;
  v14[3] = &v22;
  v14[4] = &v21;
  v14[5] = a4;
  v24 = v14;
  v20[0] = WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForConnectSource;
  v20[1] = 0;
  v19 = a3;
  v4 = WebCore::ContentSecurityPolicy::allPoliciesAllow<WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::URL const&,BOOL)const,WTF::URL const&,BOOL>(a1, (uint64_t)v23, (uint64_t)v20, (uint64_t)this, &v19);
  v16 = v24;
  if (v24 == v23)
  {
    v17 = 4;
    v16 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_9;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_9:
  v18 = v22;
  v22 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v15);
    else
      *(_DWORD *)v18 -= 2;
  }
  return v4;
}

uint64_t WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForConnectSource(WebCore::ContentSecurityPolicyDirectiveList *this, const WTF::URL *a2, char a3)
{
  const WTF::URL *v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;

  v4 = a2;
  v6 = *((_QWORD *)this + 5);
  if (qword_1EE2E4138)
  {
    a2 = (const WTF::URL *)(qword_1EE2E4138 - 1);
    if (qword_1EE2E4138 == 1)
    {
      v7 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      v8 = *MEMORY[0x1E0CBEF70] + 2;
      *MEMORY[0x1E0CBEF70] = v8;
      if (v6)
      {
LABEL_6:
        *(_DWORD *)v7 = v8 + 2;
        goto LABEL_7;
      }
      v11 = (uint64_t *)((char *)this + 56);
      v16 = *((_QWORD *)this + 7);
      if (v16)
      {
        v13 = (WTF::StringImpl **)(v16 + 32);
LABEL_14:
        *(_DWORD *)v7 = v8 + 2;
        goto LABEL_15;
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v7 = v18;
      if (v6)
      {
        if (!v18)
          goto LABEL_7;
        v8 = *(_DWORD *)v18;
        goto LABEL_6;
      }
      v12 = *((_QWORD *)this + 7);
      v11 = (uint64_t *)((char *)this + 56);
      v10 = v12;
      if (v12)
      {
        v13 = (WTF::StringImpl **)(v10 + 32);
        if (!v18)
          goto LABEL_15;
        v8 = *(_DWORD *)v18;
        goto LABEL_14;
      }
    }
LABEL_18:
    v6 = *v11;
LABEL_19:
    if (!v7)
      goto LABEL_22;
    goto LABEL_20;
  }
  if (!v6)
  {
    v11 = (uint64_t *)((char *)this + 56);
    v17 = *((_QWORD *)this + 7);
    if (v17)
    {
      v7 = 0;
      v13 = (WTF::StringImpl **)(v17 + 32);
LABEL_15:
      v14 = *v13;
      *v13 = v7;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      goto LABEL_18;
    }
    v7 = 0;
    goto LABEL_18;
  }
  v7 = 0;
LABEL_7:
  v9 = *(WTF::StringImpl **)(v6 + 32);
  *(_QWORD *)(v6 + 32) = v7;
  if (!v9)
    goto LABEL_19;
  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, a2);
    if (!v7)
      goto LABEL_22;
  }
  else
  {
    *(_DWORD *)v9 -= 2;
    if (!v7)
      goto LABEL_22;
  }
LABEL_20:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, a2);
  else
    *(_DWORD *)v7 -= 2;
LABEL_22:
  if (!v6
    || *(_QWORD *)v4
    && *(_DWORD *)(*(_QWORD *)v4 + 4)
    && WebCore::ContentSecurityPolicySourceList::matches((WebCore::ContentSecurityPolicySourceList *)(v6 + 40), v4, a3))
  {
    return 0;
  }
  return v6;
}

BOOL WebCore::Document::shouldIgnoreSyncXHRs(WebCore::Document *this)
{
  return *((_DWORD *)this + 819) > 5u;
}

void WebCore::XMLHttpRequest::createRequest(WebCore::XMLHttpRequest *this, uint64_t a2)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  WebCore *v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  void *v18;
  WTF::StringImpl *v19;
  __int16 v20;
  uint64_t v21;
  WebCore *v22;
  void *v23;
  __int16 v24;
  uint64_t v25;
  _QWORD *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  WebCore::InspectorInstrumentation *v42;
  uint64_t v43;
  _BYTE *v44;
  WebCore::ScriptExecutionContext *v45;
  uint64_t v46;
  uint64_t v47;
  WebCore::InspectorInstrumentation *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  char v51;
  WebCore::XMLHttpRequestUpload *v52;
  const WTF::AtomString *v53;
  _QWORD *v54;
  WebCore::FormData *v55;
  WebCore::ResourceRequest *v56;
  WTF::MonotonicTime *v57;
  unint64_t v58;
  double v59;
  double v60;
  WTF::StringImpl *v61[2];
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64[14];
  unsigned int v65;
  int v66;
  uint64_t v67;
  int v68;
  _BYTE v69[32];
  WTF *v70[18];
  char v71;
  uint64_t v72;

  if ((*(_WORD *)(a2 + 80) & 1) != 0
    || !WTF::URL::protocolIs()
    || (MEMORY[0x19AEA53F4](*(_QWORD *)(a2 + 168), "GET", 3) & 1) != 0)
  {
    v4 = *(_WORD *)(a2 + 80);
    if ((v4 & 1) != 0)
    {
      v5 = *(_QWORD *)(a2 + 88);
      if (v5)
      {
        v50 = *(_QWORD *)(v5 + 16);
        if ((v50 & 0x1000000000000) != 0)
        {
          if (*(_DWORD *)((v50 & 0xFFFFFFFFFFFFLL) + 0x1C))
            *(_WORD *)(a2 + 80) = v4 | 0x20;
        }
      }
    }
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v70, a2 + 96, 0);
    v72 = 0;
    v71 = 2;
    v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
    if (v6)
      v7 = v6 - 96;
    else
      v7 = 0;
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v7 + 232))(v64);
    WebCore::ResourceRequestBase::setInitiatorIdentifier((WebCore::ResourceRequestBase *)v70, v64[0]);
    v9 = v64[0];
    v64[0] = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    WebCore::ResourceRequestBase::setHTTPMethod(v70, (const WTF::StringImpl **)(a2 + 168));
    if (*(_QWORD *)(a2 + 208))
      WebCore::ResourceRequestBase::setHTTPBody(v70, (WebCore::FormData **)(a2 + 208));
    if (*(_DWORD *)(a2 + 188) || *(_DWORD *)(a2 + 204))
    {
      WebCore::HTTPHeaderMap::HTTPHeaderMap((WebCore::HTTPHeaderMap *)v69, (const WebCore::HTTPHeaderMap *)(a2 + 176));
      WebCore::ResourceRequestBase::setHTTPHeaderFields((uint64_t)v70, (WTF::StringImpl *)v69);
      WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)v69, v49);
    }
    WebCore::ThreadableLoaderOptions::ThreadableLoaderOptions((WebCore::ThreadableLoaderOptions *)v64);
    v10 = *(unsigned __int16 *)(a2 + 80);
    v65 = v65 & 0xFFCFFFFE | (((v10 >> 5) & 1) << 20);
    if ((v10 & 2) != 0)
      v11 = 2;
    else
      v11 = 1;
    BYTE2(v64[0]) = v11;
    BYTE1(v64[0]) = 3;
    v12 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
    if (v12)
      v13 = v12 - 96;
    else
      v13 = 0;
    v14 = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 264))(v13);
    if ((_DWORD)v14)
      v15 = 0;
    else
      v15 = 2;
    v66 = v15;
    v16 = WebCore::cachedResourceRequestInitiatorTypes(v14);
    WTF::String::operator=(&v67, (WTF::StringImpl **)(v16 + 40));
    v68 = 0;
    v65 = v65 & 0xFFFFF7FB | 4;
    v17 = *(_DWORD *)(a2 + 84);
    if (v17)
    {
      if ((*(_WORD *)(a2 + 80) & 1) != 0)
      {
        v56 = WebCore::ResourceRequestBase::setTimeoutInterval((WebCore::ResourceRequestBase *)v70, INFINITY);
        v57 = (WTF::MonotonicTime *)WTF::MonotonicTime::now(v56);
        *(_QWORD *)(a2 + 688) = v58;
        LODWORD(v58) = *(_DWORD *)(a2 + 84);
        v59 = (double)v58 * 0.001;
        *(_QWORD *)(a2 + 656) = 0;
        WTF::MonotonicTime::now(v57);
        WebCore::TimerBase::setNextFireTime(a2 + 632, v59 + v60);
      }
      else
      {
        WebCore::ResourceRequestBase::setTimeoutInterval((WebCore::ResourceRequestBase *)v70, (double)v17 / 1000.0);
      }
    }
    if (*(_BYTE *)(a2 + 697))
      *(_BYTE *)(a2 + 697) = 0;
    *(_WORD *)(a2 + 80) &= ~0x10u;
    WebCore::ResourceRequestBase::httpBody((WebCore::ResourceRequest *)v70, v61);
    v19 = v61[0];
    v20 = *(_WORD *)(a2 + 80) & 0xFFBF | ((v61[0] == 0) << 6);
    *(_WORD *)(a2 + 80) = v20;
    v61[0] = 0;
    if (v19)
    {
      v19 = WTF::RefCounted<WebCore::FormData>::deref(v19, v18);
      v20 = *(_WORD *)(a2 + 80);
    }
    *(_WORD *)(a2 + 80) = v20 | 4;
    if ((v20 & 1) != 0)
    {
      v21 = WebCore::eventNames(v19);
      WebCore::XMLHttpRequestProgressEventThrottle::dispatchProgressEvent((WebCore::XMLHttpRequestProgressEventThrottle *)(a2 + 568), (const WTF::AtomString *)(v21 + 1160));
      v24 = *(_WORD *)(a2 + 80);
      if ((v24 & 0x60) == 0x20)
      {
        v52 = *(WebCore::XMLHttpRequestUpload **)(a2 + 88);
        v53 = (const WTF::AtomString *)(WebCore::eventNames(v22) + 1160);
        WebCore::ResourceRequestBase::httpBody((WebCore::ResourceRequest *)v70, v61);
        v54 = WebCore::FormData::lengthInBytes(v61[0]);
        WebCore::XMLHttpRequestUpload::dispatchProgressEvent(v52, v53, 0, (uint64_t)v54);
        v55 = v61[0];
        v61[0] = 0;
        if (v55)
          WTF::RefCounted<WebCore::FormData>::deref(v55, v23);
        v24 = *(_WORD *)(a2 + 80);
      }
      if ((v24 & 0x704) != 0x104 || *(_BYTE *)(a2 + 240))
        goto LABEL_46;
      v25 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
      if (v25)
        v26 = (_QWORD *)(v25 - 96);
      else
        v26 = 0;
      v61[0] = 0;
      v62 = 0;
      WebCore::ThreadableLoader::create(v26, a2 + 32, (WebCore::ResourceRequest *)v70, (uint64_t)v64, v61, (uint64_t)&v62, (uint64_t *)&v63);
      v27 = v62;
      v62 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v23);
        else
          *(_DWORD *)v27 -= 2;
      }
      v28 = v61[0];
      v61[0] = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v23);
        else
          *(_DWORD *)v28 -= 2;
      }
      v29 = v63;
      if (v63)
      {
        ++*(_DWORD *)(a2 + 24);
        v61[0] = (WTF::StringImpl *)a2;
        v61[1] = v29;
        v63 = 0;
        std::optional<WebCore::XMLHttpRequest::LoadingActivity>::operator=[abi:sn180100]<WebCore::XMLHttpRequest::LoadingActivity,void>(a2 + 224, (uint64_t *)v61);
        WebCore::XMLHttpRequest::LoadingActivity::~LoadingActivity((WebCore::XMLHttpRequest::LoadingActivity *)v61);
        v30 = (uint64_t)v63;
        v63 = 0;
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
      }
    }
    else
    {
      v32 = *(_QWORD *)(a2 + 8);
      if (!v32)
        goto LABEL_99;
      v33 = *(_QWORD *)(v32 + 8);
      if (v33 && !*(_BYTE *)(v33 + 178))
      {
        v34 = (_DWORD *)(v33 - 264);
        *(_DWORD *)(v33 - 264) += 2;
        if ((WebCore::PermissionsPolicy::isFeatureEnabled(8u, (_QWORD *)(v33 - 288), 1) & 1) == 0)
        {
          *(_BYTE *)this = 15;
          *((_QWORD *)this + 1) = 0;
          *((_BYTE *)this + 16) = 1;
          if (*v34 == 2)
          {
            if ((*(_WORD *)(v33 - 258) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)(v33 - 288), v23);
          }
          else
          {
            *v34 -= 2;
          }
          goto LABEL_47;
        }
        if (*v34 == 2)
        {
          if ((*(_WORD *)(v33 - 258) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)(v33 - 288), v23);
        }
        else
        {
          *v34 -= 2;
        }
      }
      v35 = *(_QWORD *)(a2 + 8);
      if (v35)
      {
        v36 = *(_QWORD *)(v35 + 8);
        if (v36)
          v37 = v36 - 96;
        else
          v37 = 0;
      }
      else
      {
LABEL_99:
        v37 = 0;
      }
      WebCore::ScriptExecutionContext::domainForCachePartition(v37, v61);
      WebCore::ResourceRequestBase::setDomainForCachePartition((WebCore::ResourceRequestBase *)v70, (const WTF::String *)v61);
      v39 = v61[0];
      v61[0] = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, v38);
        else
          *(_DWORD *)v39 -= 2;
      }
      v40 = *(_QWORD *)(a2 + 8);
      if (v40)
      {
        v41 = *(_QWORD *)(v40 + 8);
        if (v41)
          v42 = (WebCore::InspectorInstrumentation *)(v41 - 96);
        else
          v42 = 0;
      }
      else
      {
        v42 = 0;
      }
      WebCore::InspectorInstrumentation::willLoadXHRSynchronously(v42, v38);
      v43 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
      if (v43)
        v44 = (_BYTE *)(v43 - 96);
      else
        v44 = 0;
      WebCore::ThreadableLoader::loadResourceSynchronously(v44, (WebCore::ResourceRequest *)v70, a2 + 32, (uint64_t)v64);
      v46 = *(_QWORD *)(a2 + 8);
      if (v46)
      {
        v47 = *(_QWORD *)(v46 + 8);
        if (v47)
          v48 = (WebCore::InspectorInstrumentation *)(v47 - 96);
        else
          v48 = 0;
      }
      else
      {
        v48 = 0;
      }
      WebCore::InspectorInstrumentation::didLoadXHRSynchronously(v48, v45);
    }
    if (*(_BYTE *)(a2 + 697))
    {
      v51 = *(_BYTE *)(a2 + 696);
    }
    else
    {
      if ((*(_WORD *)(a2 + 80) & 0x10) == 0)
      {
LABEL_46:
        *(_QWORD *)this = 0;
        *((_QWORD *)this + 1) = 0;
        *((_QWORD *)this + 2) = 0;
LABEL_47:
        WebCore::ThreadableLoaderOptions::~ThreadableLoaderOptions((WebCore::ThreadableLoaderOptions *)v64, (WTF::StringImpl *)v23);
        WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v70, v31);
        return;
      }
      v51 = 15;
    }
    *(_BYTE *)this = v51;
    *((_QWORD *)this + 1) = 0;
    *((_BYTE *)this + 16) = 1;
    goto LABEL_47;
  }
  WebCore::URLKeepingBlobAlive::clear((WebCore::URLKeepingBlobAlive *)(a2 + 96));
  *(_BYTE *)this = 15;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 1;
}

WebCore::FormData *WebCore::ResourceRequestBase::setHTTPBody(WebCore::FormData **this, WebCore::FormData **a2)
{
  WebCore::FormData *v4;
  WebCore::FormData *result;
  bmalloc::api *v6;
  void *v7;

  if (((_BYTE)this[23] & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    *((_BYTE *)this + 184) |= 1u;
  }
  v4 = *a2;
  *a2 = 0;
  result = this[21];
  this[21] = v4;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::FormData::~FormData(result, a2);
      result = (WebCore::FormData *)bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  *((_BYTE *)this + 184) = (_BYTE)this[23] & 0xF3 | 4;
  return result;
}

uint64_t WebCore::DocumentThreadableLoader::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebCore::ContentSecurityPolicy *v16;
  WTF *v17;
  uint64_t result;
  _BYTE v20[8];
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  char v23;
  WebCore::ContentSecurityPolicy *v24;
  uint64_t v25;

  v25 = 0;
  v24 = 0;
  v20[0] = 0;
  v23 = 0;
  v12 = WTF::fastMalloc((WTF *)0x340);
  v13 = WebCore::DocumentThreadableLoader::DocumentThreadableLoader(v12, a1, a2, 1, a3, a4, &v25, (uint64_t *)&v24, (uint64_t)v20, a5, 1);
  *a6 = v13;
  v15 = *(_QWORD *)(v13 + 32);
  if ((!v15 || !*(_QWORD *)(v15 + 8)) && !*(_BYTE *)(v13 + 528))
  {
    *a6 = 0;
    if (*(_DWORD *)(v13 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
    else
      --*(_DWORD *)(v13 + 8);
  }
  if (v23)
  {
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v14);
      else
        *(_DWORD *)v22 -= 2;
    }
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v14);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  v16 = v24;
  v24 = 0;
  if (v16)
  {
    WebCore::ContentSecurityPolicy::~ContentSecurityPolicy(v16, v14);
    if (atomic_load((unsigned int *)v17))
    {
      *((_OWORD *)v17 + 13) = 0u;
      *((_OWORD *)v17 + 14) = 0u;
      *((_OWORD *)v17 + 11) = 0u;
      *((_OWORD *)v17 + 12) = 0u;
      *((_OWORD *)v17 + 9) = 0u;
      *((_OWORD *)v17 + 10) = 0u;
      *((_OWORD *)v17 + 7) = 0u;
      *((_OWORD *)v17 + 8) = 0u;
      *((_OWORD *)v17 + 5) = 0u;
      *((_OWORD *)v17 + 6) = 0u;
      *((_OWORD *)v17 + 3) = 0u;
      *((_OWORD *)v17 + 4) = 0u;
      *((_OWORD *)v17 + 1) = 0u;
      *((_OWORD *)v17 + 2) = 0u;
      *(_OWORD *)v17 = 0u;
    }
    else
    {
      WTF::fastFree(v17, v14);
    }
  }
  result = v25;
  if (v25)
    return WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v25, v14);
  return result;
}

uint64_t WebCore::DocumentThreadableLoader::DocumentThreadableLoader(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t *a10, char a11)
{
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const WebCore::HTTPHeaderMap *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WebCore::UserContentURLPattern *v47;
  uint64_t v48;
  int v49;
  WTF *v50;
  _DWORD *v51;
  uint64_t v52;
  WTF *v53;
  WTF *v54;
  unsigned int v56;
  uint64_t v57;
  int v58;
  _DWORD *v59;
  WTF::StringImpl *v60;
  _DWORD *v61;
  WTF::StringImpl *v62;
  int v63;
  _DWORD *v65;
  unsigned int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  WTF *v76;
  void *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WebCore::Page *v87;
  WTF *v88;
  uint64_t v89;
  const WTF::String *v90;
  WTF *v91;
  _DWORD *v92;
  __int128 v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WebCore::EventHandler *v103;
  uint64_t v104;
  unsigned int v105;
  int v106;
  WTF::StringImpl **v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  _DWORD *v112;
  _DWORD *v113;
  int v114;
  char v115;
  WTF *v116;
  _DWORD *v117;
  __int128 v118;
  __int128 v119;
  WTF *v120;
  int v121;
  __int16 v122;
  uint64_t v123;
  char v124;

  v16 = a2;
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E33F35A8;
  *(_QWORD *)(a1 + 16) = &unk_1E33F3620;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a3;
  v18 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
  if (v18)
  {
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
  }
  *(_QWORD *)(a1 + 48) = v18;
  WebCore::ResourceLoaderOptions::ResourceLoaderOptions(a1 + 64, (const WebCore::ResourceLoaderOptions *)a6);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a6 + 136);
  v21 = *(_DWORD **)(a6 + 144);
  if (v21)
    *v21 += 2;
  *(_QWORD *)(a1 + 208) = v21;
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a6 + 152);
  *(_BYTE *)(a1 + 224) = 1;
  v22 = *a7;
  *a7 = 0;
  *(_QWORD *)(a1 + 232) = v22;
  v23 = *a10;
  *a10 = 0;
  *(_QWORD *)(a1 + 240) = v23;
  v24 = *(_QWORD *)(a1 + 232);
  if (!v24)
  {
    v25 = *(_QWORD *)(a1 + 48);
    if (v25)
      v25 = *(_QWORD *)(v25 + 8);
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v25 + 192), v20);
    v24 = v26;
  }
  if ((*(_BYTE *)(a5 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a5);
    *(_BYTE *)(a5 + 184) |= 1u;
  }
  {
    WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
  }
  *(_BYTE *)(a1 + 248) = WebCore::SecurityOrigin::canRequest(v24, (WebCore::ThreadableBlobRegistry *)a5, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance);
  v27 = 1;
  *(_BYTE *)(a1 + 249) = 1;
  *(_BYTE *)(a1 + 250) = a4 == 1;
  v28 = *(_QWORD *)(a1 + 72);
  if (v28)
    v27 = *(_DWORD *)(v28 + 4) == 0;
  *(_BYTE *)(a1 + 251) = !v27;
  v29 = *a8;
  *a8 = 0;
  *(_QWORD *)(a1 + 256) = v29;
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  if (*(_BYTE *)(a9 + 24))
  {
    *(_WORD *)(a1 + 264) = *(_WORD *)a9;
    v30 = *(_QWORD *)(a9 + 8);
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a1 + 272) = v30;
    v31 = *(_QWORD *)(a9 + 16);
    *(_QWORD *)(a9 + 16) = 0;
    *(_QWORD *)(a1 + 280) = v31;
    *(_BYTE *)(a1 + 288) = 1;
  }
  *(_BYTE *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 576));
  *(_BYTE *)(a1 + 616) = a11;
  *(_BYTE *)(a1 + 624) = 0;
  *(_BYTE *)(a1 + 824) = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v16 + 680) + 672) & 0x8000000000000) != 0 && !*(_BYTE *)(a1 + 250))
  {
    v84 = *(_QWORD *)(v16 + 528);
    if (!v84
      || (v85 = *(_QWORD *)(v84 + 8)) == 0
      || (v86 = *(_QWORD *)(v85 + 24)) == 0
      || (v87 = *(WebCore::Page **)(v86 + 8)) == 0
      || !WebCore::Page::areSynchronousLoadsAllowed(v87))
    {
      WebCore::Document::didRejectSyncXHRDuringPageDismissal(v16);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v88 = v116;
      if ((*(_BYTE *)(a5 + 184) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a5);
        *(_BYTE *)(a5 + 184) |= 1u;
      }
LABEL_133:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v91 = v116;
      if (v88)
        *(_DWORD *)v88 += 2;
      v116 = v88;
      v92 = *(_DWORD **)a5;
      if (*(_QWORD *)a5)
        *v92 += 2;
      v117 = v92;
      v93 = *(_OWORD *)(a5 + 24);
      v118 = *(_OWORD *)(a5 + 8);
      v119 = v93;
      if (v91)
        *(_DWORD *)v91 += 2;
      v120 = v91;
      v121 = 0;
      v122 = 1;
      v123 = 0;
      v124 = 1;
      WebCore::DocumentThreadableLoader::logErrorAndFail((WebCore::DocumentThreadableLoader *)a1, &v116, v89, v90);
      WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)&v116, v94);
      if (v91)
      {
        if (*(_DWORD *)v91 == 2)
          WTF::StringImpl::destroy(v91, v95);
        else
          *(_DWORD *)v91 -= 2;
      }
      if (v88)
      {
        if (*(_DWORD *)v88 == 2)
          WTF::StringImpl::destroy(v88, v95);
        else
          *(_DWORD *)v88 -= 2;
      }
      return a1;
    }
  }
  v33 = *(unsigned __int8 *)(a1 + 66);
  if (v33 == 1)
  {
    v34 = 16 * *(unsigned __int8 *)(a1 + 248);
  }
  else if (v33 == 2)
  {
    v34 = 16;
  }
  else
  {
    v34 = 0;
  }
  *(_DWORD *)(a1 + 178) = *(_DWORD *)(a1 + 178) & 0xFFFFFFCF | v34;
  if (*(_BYTE *)(a1 + 65) == 3)
  {
    if ((*(_BYTE *)(a5 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a5);
      *(_BYTE *)(a5 + 184) |= 1u;
    }
    v66 = (unsigned int *)(a1 + 536);
    if (*(_BYTE *)(a1 + 568))
    {
      WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::operator=(v66, (unsigned int *)(a5 + 96));
      WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::operator=(a1 + 552, (unsigned int *)(a5 + 112));
    }
    else
    {
      v69 = *(unsigned int *)(a5 + 108);
      *(_QWORD *)v66 = 0;
      *(_QWORD *)(a1 + 544) = 0;
      *(_DWORD *)(a1 + 548) = v69;
      if ((_DWORD)v69)
      {
        if (v69 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x1943BAEA0);
        }
        v70 = WTF::fastMalloc((WTF *)(16 * v69));
        *(_DWORD *)(a1 + 544) = v69;
        *(_QWORD *)(a1 + 536) = v70;
        v71 = *(unsigned int *)(a5 + 108);
        if ((_DWORD)v71)
        {
          v72 = *(_QWORD *)(a5 + 96);
          v73 = v72 + 16 * v71;
          do
          {
            *(_WORD *)v70 = *(_WORD *)v72;
            v74 = *(_DWORD **)(v72 + 8);
            if (v74)
              *v74 += 2;
            *(_QWORD *)(v70 + 8) = v74;
            v72 += 16;
            v70 += 16;
          }
          while (v72 != v73);
        }
      }
      v75 = *(unsigned int *)(a5 + 124);
      *(_QWORD *)(a1 + 560) = 0;
      *(_QWORD *)(a1 + 552) = 0;
      *(_DWORD *)(a1 + 564) = v75;
      if ((_DWORD)v75)
      {
        if (v75 >> 28)
        {
          __break(0xC471u);
          goto LABEL_197;
        }
        v78 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v75));
        *(_DWORD *)(a1 + 560) = v75;
        *(_QWORD *)(a1 + 552) = v78;
        v79 = *(unsigned int *)(a5 + 124);
        if ((_DWORD)v79)
        {
          v80 = *(_QWORD *)(a5 + 112);
          v81 = v80 + 16 * v79;
          do
          {
            v82 = *(_DWORD **)v80;
            if (*(_QWORD *)v80)
              *v82 += 2;
            *v78 = v82;
            v83 = *(_DWORD **)(v80 + 8);
            if (v83)
              *v83 += 2;
            v78[1] = v83;
            v80 += 16;
            v78 += 2;
          }
          while (v80 != v81);
        }
      }
      *(_BYTE *)(a1 + 568) = 1;
    }
    if (*(_BYTE *)(a1 + 65) == 3)
    {
      v67 = WebCore::s_platformStrategies;
      v68 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
      if (!v68)
      {
        v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
        *(_QWORD *)(v67 + 8) = v68;
      }
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 144))(v68) & 1) != 0)
        goto LABEL_101;
    }
  }
  if ((*(_BYTE *)(a1 + 180) & 3) == 0
    && *(_BYTE *)(a1 + 250)
    && (*(_QWORD *)(a1 + 112) || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 392)))
  {
LABEL_101:
    if ((*(_BYTE *)(a5 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a5);
      *(_BYTE *)(a5 + 184) |= 1u;
    }
    *(_BYTE *)(a1 + 177) = WebCore::httpHeadersToKeepFromCleaning((unsigned __int16 **)(a5 + 96), v32);
  }
  v35 = a1 + 264;
  v36 = v16;
  while (1)
  {
    v37 = v36;
    if (!*(_BYTE *)(v36 + 3362) && !*(_BYTE *)(v36 + 3405))
      break;
    v96 = *(_QWORD *)(v36 + 528);
    if (!v96)
      goto LABEL_37;
    v97 = *(_QWORD *)(v96 + 8);
    if (!v97)
      goto LABEL_37;
    v98 = *(_QWORD *)(v97 + 120);
    if (!v98)
      goto LABEL_37;
    v99 = *(_QWORD *)(v98 + 8);
    if (!v99)
      goto LABEL_37;
    do
    {
      v36 = *(_QWORD *)(*(_QWORD *)(v99 + 40) + 8);
      v100 = *(_QWORD *)(v36 + 528);
      if (!v100)
        break;
      v101 = *(_QWORD *)(v100 + 8);
      if (!v101)
        break;
      v102 = *(_QWORD *)(v101 + 120);
      if (!v102)
        break;
      v99 = *(_QWORD *)(v102 + 8);
    }
    while (v99);
LABEL_158:
    if (v36 == v37)
      goto LABEL_37;
  }
  v38 = *(_QWORD *)(v36 + 528);
  if (v38)
  {
    v39 = *(_QWORD *)(v38 + 8);
    if (v39)
    {
      v40 = *(_QWORD *)(*(_QWORD *)(v39 + 128) + 8);
      if (v40 && *(_BYTE *)(v40 + 144) == 0)
      {
        v36 = *(_QWORD *)(v40 + 296);
        if (v36)
          goto LABEL_158;
      }
    }
  }
LABEL_37:
  if (*(_BYTE *)(v37 + 3432))
  {
    if ((*(_BYTE *)(a5 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a5);
      *(_BYTE *)(a5 + 184) |= 1u;
    }
    v103 = (WebCore::EventHandler *)WTF::URL::protocol((WTF::URL *)a5);
    v42 = WebCore::EventHandler::needsKeyboardEventDisambiguationQuirks(v103);
  }
  else
  {
    v42 = 0;
  }
  v43 = *(_QWORD *)(v16 + 528);
  if (v43
    && (v44 = *(_QWORD *)(v43 + 8)) != 0
    && (v45 = *(_QWORD *)(v44 + 24)) != 0
    && (v16 = *(_QWORD *)(v45 + 8)) != 0)
  {
    ++*(_DWORD *)v16;
    if ((*(_BYTE *)(a5 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a5);
      *(_BYTE *)(a5 + 184) |= 1u;
    }
    v46 = *(unsigned int *)(v16 + 1620);
    if ((_DWORD)v46)
    {
      v47 = *(WebCore::UserContentURLPattern **)(v16 + 1608);
      v48 = 32 * v46;
      while (*((_BYTE *)v47 + 24)
           || !WebCore::UserContentURLPattern::matchesScheme(v47, (const WTF::URL *)a5)
           || !WebCore::UserContentURLPattern::matchesHost((const WTF::StringImpl **)v47, (const WTF::URL *)a5)|| (WebCore::UserContentURLPattern::matchesPath(v47, (const WTF::URL *)a5) & 1) == 0)
      {
        v47 = (WebCore::UserContentURLPattern *)((char *)v47 + 32);
        v48 -= 32;
        if (!v48)
        {
          LODWORD(v46) = 0;
          goto LABEL_51;
        }
      }
      LODWORD(v46) = 1;
    }
LABEL_51:
    v42 |= v46;
    if (*(_DWORD *)v16 != 1)
    {
      --*(_DWORD *)v16;
      goto LABEL_53;
    }
    WebCore::Page::~Page(v16);
    WTF::fastFree(v76, v77);
    if (v42)
    {
LABEL_114:
      *(_BYTE *)(a1 + 65) = 2;
      *(_DWORD *)(a1 + 216) = 1;
      *(_BYTE *)(a1 + 224) = 0;
    }
  }
  else
  {
LABEL_53:
    if ((v42 & 1) != 0)
      goto LABEL_114;
  }
  v49 = *(_DWORD *)(a1 + 200);
  if (v49)
  {
    v16 = *(_QWORD *)(a1 + 256);
    if (!v16)
    {
      v104 = *(_QWORD *)(a1 + 48);
      if (v104)
        v104 = *(_QWORD *)(v104 + 8);
      v16 = WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v104 + 192));
    }
    do
      v105 = __ldaxr((unsigned int *)v16);
    while (__stlxr(v105 + 1, (unsigned int *)v16));
    WebCore::ContentSecurityPolicy::responseHeaders(v16, v32, (uint64_t)&v116);
    v50 = v116;
    v51 = v117;
  }
  else
  {
    v50 = 0;
    *(_QWORD *)&v118 = 0;
    v51 = 0;
  }
  v116 = 0;
  v117 = 0;
  v114 = v118;
  v115 = BYTE4(v118);
  v52 = *(unsigned int *)(a1 + 132);
  if ((_DWORD)v52)
  {
    v107 = *(WTF::StringImpl ***)(a1 + 120);
    v108 = 16 * v52;
    v112 = v51;
    do
    {
      v109 = *v107;
      *v107 = 0;
      if (v109)
      {
        if (*(_DWORD *)v109 == 2)
        {
          WTF::StringImpl::destroy(v109, v32);
          v51 = v112;
        }
        else
        {
          *(_DWORD *)v109 -= 2;
        }
      }
      v107 += 2;
      v108 -= 16;
    }
    while (v108);
  }
  v53 = *(WTF **)(a1 + 120);
  if (v53)
  {
    *(_QWORD *)(a1 + 120) = 0;
    *(_DWORD *)(a1 + 128) = 0;
    v113 = v51;
    WTF::fastFree(v53, v32);
    v51 = v113;
  }
  *(_QWORD *)(a1 + 120) = v50;
  *(_QWORD *)(a1 + 128) = v51;
  *(_DWORD *)(a1 + 136) = v114;
  *(_BYTE *)(a1 + 140) = v115;
  v54 = v116;
  if (HIDWORD(v117))
  {
    v110 = 16 * HIDWORD(v117);
    do
    {
      v111 = *(WTF::StringImpl **)v54;
      *(_QWORD *)v54 = 0;
      if (v111)
      {
        if (*(_DWORD *)v111 == 2)
          WTF::StringImpl::destroy(v111, v32);
        else
          *(_DWORD *)v111 -= 2;
      }
      v54 = (WTF *)((char *)v54 + 16);
      v110 -= 16;
    }
    while (v110);
    v54 = v116;
  }
  if (v54)
  {
    v116 = 0;
    LODWORD(v117) = 0;
    WTF::fastFree(v54, v32);
  }
  if (v49 && v16)
  {
    if (atomic_load((unsigned int *)v16))
    {
      do
        v56 = __ldaxr((unsigned int *)v16);
      while (__stlxr(v56 - 1, (unsigned int *)v16));
      goto LABEL_66;
    }
    __break(0xC471u);
LABEL_197:
    JUMPOUT(0x1943BACD4);
  }
LABEL_66:
  if (!*(_BYTE *)(a1 + 288))
  {
    v57 = *(_QWORD *)(a1 + 48);
    if (v57)
      v57 = *(_QWORD *)(v57 + 8);
    v35 = v57 + 216;
  }
  v58 = *(unsigned __int8 *)(a1 + 168);
  *(_WORD *)(a1 + 144) = *(_WORD *)v35;
  v59 = *(_DWORD **)(v35 + 8);
  if (v58)
  {
    if (v59)
      *v59 += 2;
    v60 = *(WTF::StringImpl **)(a1 + 152);
    *(_QWORD *)(a1 + 152) = v59;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, v32);
      else
        *(_DWORD *)v60 -= 2;
    }
    v61 = *(_DWORD **)(v35 + 16);
    if (v61)
      *v61 += 2;
    v62 = *(WTF::StringImpl **)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v61;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
        WTF::StringImpl::destroy(v62, v32);
      else
        *(_DWORD *)v62 -= 2;
    }
  }
  else
  {
    if (v59)
      *v59 += 2;
    *(_QWORD *)(a1 + 152) = v59;
    v65 = *(_DWORD **)(v35 + 16);
    if (v65)
      *v65 += 2;
    *(_QWORD *)(a1 + 160) = v65;
    *(_BYTE *)(a1 + 168) = 1;
  }
  if ((*(_BYTE *)(a5 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a5);
    *(_BYTE *)(a5 + 184) |= 1u;
  }
  if (WTF::URL::protocolIs())
  {
    v63 = (*(_DWORD *)(a6 + 114) & 0x800) == 0;
    *(_BYTE *)(a1 + 248) = v63;
  }
  else
  {
    v63 = *(unsigned __int8 *)(a1 + 248);
  }
  if (v63)
    goto LABEL_86;
  v106 = *(unsigned __int8 *)(a1 + 65);
  if (v106 == 2)
    goto LABEL_86;
  if (v106 == 1)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v88 = v116;
    if ((*(_BYTE *)(a5 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a5);
      *(_BYTE *)(a5 + 184) |= 1u;
    }
    goto LABEL_133;
  }
  if (*(_BYTE *)(a1 + 65))
  {
    WebCore::DocumentThreadableLoader::makeCrossOriginAccessRequest(a1, a5);
    return a1;
  }
LABEL_86:
  WebCore::DocumentThreadableLoader::loadRequest(a1, (WebCore::ResourceRequest *)a5, (const WTF::StringImpl *)1);
  return a1;
}

uint64_t WebCore::SecurityContext::contentSecurityPolicy(WebCore::SecurityContext *this)
{
  uint64_t result;
  WTF::StringImpl *v3;
  WebCore::ContentSecurityPolicy *v4;
  WebCore::ContentSecurityPolicy *v5;
  WTF *v6;
  void *v7;
  WebCore::ContentSecurityPolicy *v9;
  WTF *v10;
  void *v11;
  WebCore::ContentSecurityPolicy *v13;

  result = *((_QWORD *)this + 2);
  if (!result)
  {
    if (*((_BYTE *)this + 89))
    {
      (*(void (**)(WebCore::ContentSecurityPolicy **__return_ptr, WebCore::SecurityContext *))(*(_QWORD *)this + 56))(&v13, this);
      v4 = v13;
      v13 = 0;
      v5 = (WebCore::ContentSecurityPolicy *)*((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v4;
      if (v5)
      {
        WebCore::ContentSecurityPolicy::~ContentSecurityPolicy(v5, v3);
        if (atomic_load((unsigned int *)v6))
        {
          *((_OWORD *)v6 + 13) = 0u;
          *((_OWORD *)v6 + 14) = 0u;
          *((_OWORD *)v6 + 11) = 0u;
          *((_OWORD *)v6 + 12) = 0u;
          *((_OWORD *)v6 + 9) = 0u;
          *((_OWORD *)v6 + 10) = 0u;
          *((_OWORD *)v6 + 7) = 0u;
          *((_OWORD *)v6 + 8) = 0u;
          *((_OWORD *)v6 + 5) = 0u;
          *((_OWORD *)v6 + 6) = 0u;
          *((_OWORD *)v6 + 3) = 0u;
          *((_OWORD *)v6 + 4) = 0u;
          *((_OWORD *)v6 + 1) = 0u;
          *((_OWORD *)v6 + 2) = 0u;
          *(_OWORD *)v6 = 0u;
        }
        else
        {
          WTF::fastFree(v6, v7);
        }
        v9 = v13;
        v13 = 0;
        if (v9)
        {
          WebCore::ContentSecurityPolicy::~ContentSecurityPolicy(v9, (WTF::StringImpl *)v7);
          if (atomic_load((unsigned int *)v10))
          {
            *((_OWORD *)v10 + 13) = 0u;
            *((_OWORD *)v10 + 14) = 0u;
            *((_OWORD *)v10 + 11) = 0u;
            *((_OWORD *)v10 + 12) = 0u;
            *((_OWORD *)v10 + 9) = 0u;
            *((_OWORD *)v10 + 10) = 0u;
            *((_OWORD *)v10 + 7) = 0u;
            *((_OWORD *)v10 + 8) = 0u;
            *((_OWORD *)v10 + 5) = 0u;
            *((_OWORD *)v10 + 6) = 0u;
            *((_OWORD *)v10 + 3) = 0u;
            *((_OWORD *)v10 + 4) = 0u;
            *((_OWORD *)v10 + 1) = 0u;
            *((_OWORD *)v10 + 2) = 0u;
            *(_OWORD *)v10 = 0u;
          }
          else
          {
            WTF::fastFree(v10, v11);
          }
        }
      }
      return *((_QWORD *)this + 2);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__n128 WebCore::NavigationRequester::from@<Q0>(WebCore::NavigationRequester *this@<X0>, WebCore::Document *a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v5;
  unsigned int *v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  unsigned int *v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;
  __int128 v15;

  v5 = (_DWORD *)*((_QWORD *)this + 92);
  if (v5)
    *v5 += 2;
  *(_QWORD *)a3 = v5;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)((char *)this + 744);
  *(_OWORD *)(a3 + 24) = *(_OWORD *)((char *)this + 760);
  WebCore::SecurityContext::securityOrigin((WebCore::NavigationRequester *)((char *)this + 192), a2);
  do
    v8 = __ldaxr(v6);
  while (__stlxr(v8 + 1, v6));
  *(_QWORD *)(a3 + 40) = v6;
  WebCore::Document::topOrigin(this, v7);
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 + 1, v9));
  *(_QWORD *)(a3 + 48) = v9;
  WebCore::SecurityContext::policyContainer((WebCore::NavigationRequester *)((char *)this + 192), v10, a3 + 56);
  *(_OWORD *)(a3 + 136) = *(_OWORD *)((char *)this + 3464);
  *(_QWORD *)(a3 + 152) = *((_QWORD *)this + 435);
  WebCore::Document::pageID(this);
  *(_QWORD *)(a3 + 160) = v12;
  *(_QWORD *)(a3 + 168) = v13;
  result = *((__n128 *)this + 26);
  v15 = *((_OWORD *)this + 27);
  *(__n128 *)(a3 + 176) = result;
  *(_OWORD *)(a3 + 192) = v15;
  *(_DWORD *)(a3 + 208) = *((_DWORD *)this + 67);
  return result;
}

uint64_t WebCore::SecurityContext::referrerPolicy(WebCore::SecurityContext *this)
{
  return *((unsigned __int8 *)this + 80);
}

uint64_t WebCore::ContentSecurityPolicy::responseHeaders@<X0>(uint64_t this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _DWORD *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  _BYTE *i;
  uint64_t v23;
  char v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  WTF::StringImpl *v37;

  v3 = this;
  if (*(_BYTE *)(this + 224))
  {
    LODWORD(v4) = *(_DWORD *)(this + 212);
    goto LABEL_3;
  }
  v5 = *(unsigned int *)(this + 148);
  if (!(_DWORD)v5)
  {
    v6 = 0;
    LODWORD(v4) = 0;
    goto LABEL_7;
  }
  v31 = a3;
  if (v5 >> 28)
    goto LABEL_49;
  this = WTF::fastMalloc((WTF *)(16 * v5));
  v33 = this;
  v4 = *(unsigned int *)(v3 + 148);
  if (!(_DWORD)v4)
    goto LABEL_41;
  if (!*(_BYTE *)(v3 + 232))
  {
    v20 = 0;
    v21 = 0;
    for (i = (_BYTE *)(this + 8); ; i += 16)
    {
      v23 = *(_QWORD *)(v3 + 136);
      this = *(_QWORD *)(*(_QWORD *)(v23 + 8 * v21) + 8);
      if (v20)
      {
        if (this)
          *(_DWORD *)this += 2;
      }
      else if (this)
      {
        WTF::StringImpl::replace();
        this = (uint64_t)v37;
        if (v37)
        {
          WTF::StringImpl::replace();
          this = (uint64_t)v37;
          if (*(_DWORD *)v37 == 2)
          {
            WTF::StringImpl::destroy(v37, a2);
            this = (uint64_t)v37;
          }
          else
          {
            *(_DWORD *)v37 -= 2;
          }
        }
      }
      v24 = *(_BYTE *)(*(_QWORD *)(v23 + 8 * v21) + 16);
      *((_QWORD *)i - 1) = this;
      *i = v24;
      if (v21 + 1 >= (unint64_t)*(unsigned int *)(v3 + 148))
        break;
      v20 = *(unsigned __int8 *)(v3 + 232);
      ++v21;
    }
    LODWORD(v4) = v21 + 1;
LABEL_41:
    a3 = v31;
    v6 = v33;
    goto LABEL_7;
  }
  v9 = 0;
  v10 = *(uint64_t **)(v3 + 136);
  v6 = this;
  do
  {
    v11 = *v10;
    v12 = *(_DWORD **)(*v10 + 8);
    if (v12)
      *v12 += 2;
    v13 = *(_BYTE *)(v11 + 16);
    v14 = this + v9;
    *(_QWORD *)v14 = v12;
    *(_BYTE *)(v14 + 8) = v13;
    v9 += 16;
    ++v10;
  }
  while (16 * v4 != v9);
  a3 = v31;
LABEL_7:
  v7 = *(_DWORD *)(v3 + 184);
  if (!*(_BYTE *)(v3 + 224))
  {
LABEL_13:
    *(_QWORD *)(v3 + 200) = v6;
    *(_DWORD *)(v3 + 208) = v5;
    *(_DWORD *)(v3 + 212) = v4;
    *(_DWORD *)(v3 + 216) = v7;
    *(_BYTE *)(v3 + 220) = 0;
    *(_BYTE *)(v3 + 224) = 1;
    goto LABEL_3;
  }
  v8 = *(unsigned int *)(v3 + 212);
  if ((_DWORD)v8)
  {
    v25 = *(WTF::StringImpl ***)(v3 + 200);
    v26 = 16 * v8;
    v32 = a3;
    v34 = v6;
    v36 = *(_DWORD *)(v3 + 184);
    do
    {
      v27 = *v25;
      *v25 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
        {
          WTF::StringImpl::destroy(v27, a2);
          v7 = v36;
          a3 = v32;
          v6 = v34;
        }
        else
        {
          *(_DWORD *)v27 -= 2;
        }
      }
      v25 += 2;
      v26 -= 16;
    }
    while (v26);
  }
  this = *(_QWORD *)(v3 + 200);
  if (this)
  {
    *(_QWORD *)(v3 + 200) = 0;
    *(_DWORD *)(v3 + 208) = 0;
    v35 = v6;
    v28 = a3;
    v29 = v5;
    v30 = v7;
    this = WTF::fastFree((WTF *)this, a2);
    v7 = v30;
    LODWORD(v5) = v29;
    v6 = v35;
    a3 = v28;
  }
  *(_QWORD *)(v3 + 200) = v6;
  *(_DWORD *)(v3 + 208) = v5;
  *(_DWORD *)(v3 + 212) = v4;
  *(_DWORD *)(v3 + 216) = v7;
  *(_BYTE *)(v3 + 220) = 0;
  v6 = *(unsigned __int8 *)(v3 + 224);
  if (!*(_BYTE *)(v3 + 224))
  {
    __break(1u);
    goto LABEL_13;
  }
LABEL_3:
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 12) = v4;
  if (!(_DWORD)v4)
    goto LABEL_4;
  v15 = a3;
  if (v4 >> 28)
  {
LABEL_49:
    __break(0xC471u);
    JUMPOUT(0x1943BB36CLL);
  }
  this = WTF::fastMalloc((WTF *)(16 * v4));
  a3 = v15;
  *(_DWORD *)(v15 + 8) = v4;
  *(_QWORD *)v15 = this;
  v16 = *(unsigned int *)(v3 + 212);
  if ((_DWORD)v16)
  {
    v17 = *(_QWORD *)(v3 + 200);
    v18 = v17 + 16 * v16;
    do
    {
      v19 = *(_DWORD **)v17;
      if (*(_QWORD *)v17)
        *v19 += 2;
      *(_QWORD *)this = v19;
      *(_BYTE *)(this + 8) = *(_BYTE *)(v17 + 8);
      v17 += 16;
      this += 16;
    }
    while (v17 != v18);
  }
LABEL_4:
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(v3 + 216);
  *(_BYTE *)(a3 + 20) = *(_BYTE *)(v3 + 220);
  return this;
}

uint64_t WebCore::Document::crossOriginOpenerPolicy(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::Document *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Document *i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::Document *v16;
  int v17;
  uint64_t j;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  while (1)
  {
    while (!*((_BYTE *)this + 3362) && !*((_BYTE *)this + 3405))
    {
      v1 = *((_QWORD *)this + 66);
      if (!v1)
        return (uint64_t)this + 240;
      v2 = *(_QWORD *)(v1 + 8);
      if (!v2)
        return (uint64_t)this + 240;
      v3 = *(_QWORD *)(*(_QWORD *)(v2 + 128) + 8);
      if (!v3 || *(_BYTE *)(v3 + 144) != 0)
        return (uint64_t)this + 240;
      v5 = *(WebCore::Document **)(v3 + 296);
      if (!v5 || v5 == this)
        return (uint64_t)this + 240;
      v17 = 0;
LABEL_28:
      if (!v17)
      {
        v16 = *(WebCore::Document **)(v3 + 296);
        if (v16)
          this = v16;
      }
    }
    v8 = *((_QWORD *)this + 66);
    if (!v8)
      break;
    v9 = *(_QWORD *)(v8 + 8);
    if (!v9)
      break;
    v10 = *(_QWORD *)(v9 + 120);
    if (!v10)
      break;
    v11 = *(_QWORD *)(v10 + 8);
    for (i = this; v11; v11 = *(_QWORD *)(v15 + 8))
    {
      i = *(WebCore::Document **)(*(_QWORD *)(v11 + 40) + 8);
      v13 = *((_QWORD *)i + 66);
      if (!v13)
        break;
      v14 = *(_QWORD *)(v13 + 8);
      if (!v14)
        break;
      v15 = *(_QWORD *)(v14 + 120);
      if (!v15)
        break;
    }
    if (i == this)
      break;
    if (!*((_BYTE *)this + 3362) && !*((_BYTE *)this + 3405))
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v9 + 128) + 8);
      v17 = *(unsigned __int8 *)(v3 + 144);
      goto LABEL_28;
    }
    for (j = *(_QWORD *)(v10 + 8); j; j = *(_QWORD *)(v21 + 8))
    {
      this = *(WebCore::Document **)(*(_QWORD *)(j + 40) + 8);
      v19 = *((_QWORD *)this + 66);
      if (!v19)
        break;
      v20 = *(_QWORD *)(v19 + 8);
      if (!v20)
        break;
      v21 = *(_QWORD *)(v20 + 120);
      if (!v21)
        break;
    }
  }
  return (uint64_t)this + 240;
}

unsigned int *WebCore::ThreadableLoader::create@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, WebCore::ResourceRequest *a3@<X2>, uint64_t a4@<X3>, WTF::StringImpl **a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  char v20;
  char v21;
  unsigned int *result;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 80))(a1))
  {
    if (!*((_BYTE *)a1 + 274))
    {
      v14 = (uint64_t)(a1 - 24);
      goto LABEL_4;
    }
    goto LABEL_24;
  }
  v24 = a1[54];
  if (!v24)
  {
LABEL_24:
    v14 = 0;
LABEL_25:
    v21 = 1;
    goto LABEL_12;
  }
  v14 = *(_QWORD *)(v24 + 8);
  if (!v14)
    goto LABEL_25;
LABEL_4:
  *(_DWORD *)(v14 + 24) += 2;
  v15 = *(_QWORD *)(v14 + 528);
  if (!v15)
    goto LABEL_11;
  v16 = *(_QWORD *)(v15 + 8);
  if (!v16)
    goto LABEL_11;
  v17 = *(_QWORD *)(*(_QWORD *)(v16 + 280) + 88);
  if (!v17 || *(_QWORD *)(v16 + 296) != v14)
    goto LABEL_11;
  v18 = *(unsigned __int8 *)(v17 + 3533);
  v19 = *((_BYTE *)a3 + 184);
  if ((v19 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a3);
    v19 = *((_BYTE *)a3 + 184) | 1;
    *((_BYTE *)a3 + 184) = v19;
  }
  v20 = *((_BYTE *)a3 + 148);
  if ((v18 != 0) == ((v20 & 4) == 0))
  {
    v26 = v18;
    v21 = 0;
    *((_BYTE *)a3 + 148) = v20 & 0xFB | (4 * (v26 != 0));
    *((_BYTE *)a3 + 184) = v19 & 0xFD;
  }
  else
  {
LABEL_11:
    v21 = 0;
  }
LABEL_12:
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1) & 1) != 0)
    goto LABEL_28;
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 80))(a1))
    goto LABEL_14;
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1943BB69CLL);
  }
  if (a1[45])
  {
LABEL_28:
    v25 = WTF::fastMalloc((WTF *)0x20);
    result = (unsigned int *)WebCore::WorkerThreadableLoader::WorkerThreadableLoader(v25, (uint64_t)a1, a2, a6, (uint64_t)a3, a4, a5);
    *a7 = (uint64_t)result;
  }
  else
  {
LABEL_14:
    result = (unsigned int *)WebCore::DocumentThreadableLoader::create(v14, a2, (uint64_t)a3, a4, (uint64_t *)a5, a7);
  }
  if ((v21 & 1) == 0)
  {
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v14, v23);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::ScriptExecutionContext::isWorkerGlobalScope(WebCore::ScriptExecutionContext *this)
{
  return 0;
}

uint64_t WebCore::ScriptExecutionContext::globalObject(WebCore::ScriptExecutionContext *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::DOMWrapperWorld *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  if (*((_BYTE *)this + 274))
  {
    if (*((_BYTE *)this + 274) == 1)
    {
      v6 = *((_QWORD *)this + 43);
      if (v6)
      {
        v7 = *(uint64_t **)(v6 + 24);
        if (v7)
        {
          result = *v7;
          if (*v7)
            return result;
        }
        WebCore::WorkerOrWorkletScriptController::initScript(v6);
        v8 = *(_QWORD *)(v6 + 24);
        if (v8)
          return *(_QWORD *)v8;
      }
    }
    return 0;
  }
  v1 = *((_QWORD *)this + 42);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 304);
  {
    v4 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
  }
  else
  {
    v9 = WebCore::g_commonVMOrNull;
    if (!WebCore::g_commonVMOrNull)
      v9 = WebCore::commonVMSlow(0);
    v4 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v9 + 41456) + 16);
    WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v4;
  }
  return *(_QWORD *)(WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(v3 + 16) + 112), v4)
                   + 16);
}

uint64_t WebCore::ScriptExecutionContext::isWorkletGlobalScope(WebCore::ScriptExecutionContext *this)
{
  return 0;
}

void WebCore::XMLHttpRequestProgressEventThrottle::dispatchProgressEvent(WebCore::XMLHttpRequestProgressEventThrottle *this, const WTF::AtomString *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  WebCore::Event *v9;
  WebCore::Event *v10;

  if (*(_QWORD *)a2 == *(_QWORD *)(WebCore::eventNames(this) + 1160))
  {
    *((_BYTE *)this + 49) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
  }
  v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 72);
  if ((v4 & 0x1000000000000) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFLL;
    v6 = *(unsigned int *)(v5 + 28);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD **)(v5 + 16);
      v8 = 32 * v6;
      while (*v7 != *(_QWORD *)a2)
      {
        v7 += 4;
        v8 -= 32;
        if (!v8)
          return;
      }
      WebCore::XMLHttpRequestProgressEvent::create((WebCore::XMLHttpRequestProgressEvent *)&v10, a2, *((_BYTE *)this + 49), *((_QWORD *)this + 3), *((_QWORD *)this + 4));
      v9 = v10;
      WebCore::XMLHttpRequestProgressEventThrottle::dispatchEventWhenPossible(*((WebCore::XMLHttpRequestProgressEventThrottle **)this + 2), (WebCore::Event *)*((unsigned __int8 *)this + 50), v10);
      if (*((_DWORD *)v9 + 4) == 1)
        (*(void (**)(WebCore::Event *))(*(_QWORD *)v9 + 8))(v9);
      else
        --*((_DWORD *)v9 + 4);
    }
  }
}

unsigned int *WebCore::ResourceRequestBase::setHTTPHeaderFields(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int *result;

  if ((*(_BYTE *)(a1 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a1);
    *(_BYTE *)(a1 + 184) |= 1u;
  }
  result = WebCore::HTTPHeaderMap::operator=((unsigned int *)(a1 + 96), a2);
  *(_BYTE *)(a1 + 184) &= ~2u;
  return result;
}

BOOL WebCore::ResourceRequestBase::hasUpload(WebCore::ResourceRequestBase *this, void *a2)
{
  char v3;
  uint64_t v4;
  unsigned int v5;
  _BOOL8 v6;
  uint64_t v7;
  int *v8;
  int v9;
  BOOL v10;

  v3 = *((_BYTE *)this + 184);
  if ((v3 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v3 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v3;
  }
  if ((v3 & 4) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceHTTPBody(this);
    *((_BYTE *)this + 184) |= 4u;
  }
  v4 = *((_QWORD *)this + 21);
  if (!v4)
    return 0;
  ++*(_DWORD *)v4;
  v5 = *(_DWORD *)(v4 + 20);
  if (v5)
  {
    v7 = 48 * v5 - 48;
    v8 = (int *)(*(_QWORD *)(v4 + 8) + 40);
    do
    {
      v9 = *v8;
      v8 += 12;
      v6 = (v9 - 1) < 2;
      v10 = (v9 - 1) < 2 || v7 == 0;
      v7 -= 48;
    }
    while (!v10);
  }
  else
  {
    v6 = 0;
  }
  WTF::RefCounted<WebCore::FormData>::deref((WebCore::FormData *)v4, a2);
  return v6;
}

void WebCore::RenderView::~RenderView(WebCore::RenderView *this, void *a2)
{
  _DWORD *v2;
  void *v3;

  WebCore::RenderView::~RenderView(this, a2);
  if (v2[4])
    bzero(v2, 0x218uLL);
  else
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
}

{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::RenderLayerCompositor *v11;
  WTF *v12;
  void *v13;
  _QWORD *v14;
  WTF *v15;
  WTF *v16;
  WTF *v17;
  WTF *v18;
  uint64_t v19;
  WTF *v20;
  WTF *v22;
  WebCore::Layout::LayoutState *v24;
  bmalloc::api *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  WTF *v30;
  uint64_t v31;
  WTF **v32;
  WTF *v33;
  uint64_t v34;
  WTF **v35;
  WTF *v36;
  uint64_t v37;
  WTF **v38;
  WTF *v39;
  uint64_t v40;
  uint64_t *v41;
  WebCore::Element *v42;
  char v43;

  v3 = *((unsigned int *)this + 60);
  if ((_DWORD)v3 == -1)
    goto LABEL_4;
  if ((_DWORD)v3)
  {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateENS_10unique_ptrIN7WebCore17LayoutIntegration10LineLayoutENS_14default_deleteISA_EEEENS7_INS8_16LegacyLineLayoutENSB_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v3])(&v43, (char *)this + 232);
LABEL_4:
    *((_DWORD *)this + 60) = 0;
  }
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v40 = WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                                         + 40)
                                                                             + 8));
    if (v40)
    {
      v41 = (uint64_t *)v40;
      v42 = (WebCore::Element *)WebCore::RenderElement::element(this);
      WebCore::AXObjectCache::deferRecomputeIsIgnored(v41, v42);
    }
  }
  v4 = (WTF *)*((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  v5 = *((_QWORD *)this + 64);
  if (v5)
  {
    v28 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v28)
    {
      v29 = (WTF **)*((_QWORD *)this + 64);
      do
      {
        v30 = *v29;
        if (*v29 != (WTF *)-1)
        {
          *v29 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 1)
              WTF::fastFree(v30, a2);
            else
              --*(_DWORD *)v30;
          }
        }
        ++v29;
        --v28;
      }
      while (v28);
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  v6 = *((_QWORD *)this + 62);
  if (v6)
  {
    v31 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v31)
    {
      v32 = (WTF **)*((_QWORD *)this + 62);
      do
      {
        v33 = *v32;
        if (*v32 != (WTF *)-1)
        {
          *v32 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 1)
              WTF::fastFree(v33, a2);
            else
              --*(_DWORD *)v33;
          }
        }
        ++v32;
        --v31;
      }
      while (v31);
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  v7 = *((_QWORD *)this + 60);
  if (v7)
  {
    v34 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v34)
    {
      v35 = (WTF **)*((_QWORD *)this + 60);
      do
      {
        v36 = *v35;
        if (*v35 != (WTF *)-1)
        {
          *v35 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 1)
              WTF::fastFree(v36, a2);
            else
              --*(_DWORD *)v36;
          }
        }
        ++v35;
        --v34;
      }
      while (v34);
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 58, a2);
  v9 = *((_QWORD *)this + 56);
  if (v9)
    WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deallocateTable(v9, v8);
  v10 = *((_QWORD *)this + 52);
  if (v10)
  {
    v37 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v37)
    {
      v38 = (WTF **)*((_QWORD *)this + 52);
      do
      {
        v39 = *v38;
        if (*v38 != (WTF *)-1)
        {
          *v38 = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 1)
              WTF::fastFree(v39, v8);
            else
              --*(_DWORD *)v39;
          }
        }
        ++v38;
        --v37;
      }
      while (v37);
    }
    WTF::fastFree((WTF *)(v10 - 16), v8);
  }
  v11 = (WebCore::RenderLayerCompositor *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v11)
  {
    WebCore::RenderLayerCompositor::~RenderLayerCompositor(v11);
    WTF::fastFree(v12, v13);
  }
  v14 = (_QWORD *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v14)
    std::default_delete<WebCore::ImageQualityController>::operator()[abi:sn180100]((uint64_t)this + 376, v14);
  v15 = (WTF *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
      WTF::fastFree(v15, v14);
    else
      --*(_DWORD *)v15;
  }
  v16 = (WTF *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
      WTF::fastFree(v16, v14);
    else
      --*(_DWORD *)v16;
  }
  v17 = (WTF *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
      WTF::fastFree(v17, v14);
    else
      --*(_DWORD *)v17;
  }
  v18 = (WTF *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v18)
  {
    v19 = *((_QWORD *)v18 + 2);
    *((_QWORD *)v18 + 2) = 0;
    if (v19)
    {
      v20 = *(WTF **)(v19 + 144);
      if ((WTF *)(v19 + 160) != v20 && v20 != 0)
      {
        *(_QWORD *)(v19 + 144) = 0;
        *(_DWORD *)(v19 + 152) = 0;
        WTF::fastFree(v20, v14);
      }
      v22 = *(WTF **)v19;
      if (v19 + 16 != *(_QWORD *)v19 && v22 != 0)
      {
        *(_QWORD *)v19 = 0;
        *(_DWORD *)(v19 + 8) = 0;
        WTF::fastFree(v22, v14);
      }
      WTF::fastFree((WTF *)v19, v14);
    }
    WTF::fastFree(v18, v14);
  }
  v24 = (WebCore::Layout::LayoutState *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v24)
  {
    WebCore::Layout::LayoutState::~LayoutState(v24, (WTF::StringImpl *)v14);
    bmalloc::api::isoDeallocate(v25, v26);
  }
  v27 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  WebCore::RenderBlockFlow::~RenderBlockFlow(this, v14);
}

void WebCore::LayoutIntegration::LineLayout::~LineLayout(WebCore::LayoutIntegration::LineLayout *this)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::LayoutIntegration::InlineContent *v4;
  WTF *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  WebCore::LayoutIntegration::InlineContent *v28;
  WTF *v29;
  void *v30;
  WebCore::Layout::InlineDamage *v31;
  bmalloc::api *v32;
  void *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;

  if (!*((_QWORD *)this + 9))
  {
    v2 = *((_QWORD *)this + 2);
    if ((*(_BYTE *)(v2 + 52) & 7) != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1943BBF6CLL);
    }
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40) + 8);
    if (!*(_BYTE *)(v3 + 3405))
      WebCore::Layout::InlineItemsBuilder::populateBreakingPositionCache(*((_QWORD *)this + 5) + 16, v3);
  }
  v4 = (WebCore::LayoutIntegration::InlineContent *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 10) = 0;
    WebCore::LayoutIntegration::InlineContent::~InlineContent(v4);
    WTF::fastFree(v5, v6);
  }
  v7 = *((_QWORD *)this + 3);
  if (v7)
    v8 = *(_QWORD *)(v7 + 8);
  else
    v8 = 0;
  v9 = *(_QWORD *)(*((_QWORD *)this + 2) + 56);
  if (v9 && (*(_WORD *)(v9 + 12) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1943BBF8CLL);
  }
  v12 = *(_QWORD *)(v8 + 16);
  v10 = (uint64_t *)(v8 + 16);
  v11 = v12;
  if (v12)
  {
    v13 = *(_DWORD *)(v11 - 8);
    v14 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
    v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
    v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
    v17 = v13 & ((v16 >> 31) ^ v16);
    v18 = *(_QWORD *)(v11 + 16 * v17);
    if (v18 != v9)
    {
      v37 = 1;
      while (v18)
      {
        v17 = ((_DWORD)v17 + v37) & v13;
        v18 = *(_QWORD *)(v11 + 16 * v17);
        ++v37;
        if (v18 == v9)
          goto LABEL_13;
      }
      v17 = *(unsigned int *)(v11 - 4);
    }
LABEL_13:
    if (v17 != *(_DWORD *)(v11 - 4))
    {
      WTF::HashTable<WebCore::Layout::ElementBox const*,WTF::KeyValuePair<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::InlineContentCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::InlineContentCache>>>,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashMap<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::InlineContentCache>,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashTraits<WebCore::Layout::ElementBox const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::InlineContentCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::ElementBox const*>>::remove(v10, (_QWORD *)(v11 + 16 * v17));
      v7 = *((_QWORD *)this + 3);
    }
  }
  if (v7)
    v7 = *(_QWORD *)(v7 + 8);
  v19 = *(_QWORD *)(*((_QWORD *)this + 2) + 56);
  if (v19 && (*(_WORD *)(v19 + 12) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1943BBFACLL);
  }
  v38 = *(_QWORD *)(*((_QWORD *)this + 2) + 56);
  WTF::HashMap<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::BlockFormattingState>,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashTraits<WebCore::Layout::ElementBox const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::BlockFormattingState>>,WTF::HashTableTraits>::remove((uint64_t *)(v7 + 24), &v38);
  v21 = *((_QWORD *)this + 13);
  if (v21)
    WTF::fastFree((WTF *)(v21 - 16), v20);
  v22 = (unsigned int *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v22)
  {
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, v20);
    }
  }
  v25 = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v25)
  {
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v25);
      WTF::fastFree((WTF *)v25, v20);
    }
  }
  v28 = (WebCore::LayoutIntegration::InlineContent *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v28)
  {
    WebCore::LayoutIntegration::InlineContent::~InlineContent(v28);
    WTF::fastFree(v29, v30);
  }
  v31 = (WebCore::Layout::InlineDamage *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v31)
  {
    WebCore::Layout::InlineDamage::~InlineDamage(v31, v20);
    bmalloc::api::isoDeallocate(v32, v33);
  }
  v34 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v34)
  {
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v34);
      WTF::fastFree((WTF *)v34, v20);
    }
  }
  WebCore::LayoutIntegration::BoxTree::~BoxTree((WebCore::LayoutIntegration::LineLayout *)((char *)this + 8), (unint64_t)v20);
}

void WebCore::LayoutIntegration::InlineContent::~InlineContent(WebCore::LayoutIntegration::InlineContent *this)
{
  void *v2;
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  void *v9;
  WTF *v10;
  _DWORD *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  std::unique_ptr<WTF::HashMap<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>::reset[abi:sn180100]((uint64_t)this + 72, 0);
  v3 = (WTF *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    v4 = *(uint64_t **)v3;
    if (*(_QWORD *)v3)
    {
      v5 = *((unsigned int *)v4 - 1);
      if ((_DWORD)v5)
      {
        v6 = *(uint64_t **)v3;
        do
        {
          v7 = *v6;
          if (*v6 != -1)
          {
            *v6 = 0;
            if (v7)
            {
              v8 = *(_DWORD *)(v7 + 8);
              if (!v8)
                goto LABEL_24;
              *(_DWORD *)(v7 + 8) = v8 - 1;
            }
          }
          v6 += 2;
          --v5;
        }
        while (v5);
      }
      WTF::fastFree((WTF *)(v4 - 2), v2);
    }
    WTF::fastFree(v3, v2);
  }
  WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 48, (WTF::StringImpl *)v2);
  v10 = (WTF *)*((_QWORD *)this + 4);
  if (v10)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v10, v9);
  }
  v11 = (_DWORD *)*((_QWORD *)this + 3);
  if (v11)
  {
    if (!*v11)
    {
LABEL_24:
      __break(0xC471u);
      JUMPOUT(0x1943BC0E8);
    }
    --*v11;
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v12 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v9);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

void WebCore::LayoutIntegration::BoxTree::~BoxTree(WebCore::LayoutIntegration::BoxTree *this, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  WTF *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  BOOL v21;
  int v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int isOverflowVisible;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  WTF *v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  void *v74;
  unsigned int v75;
  uint64_t v76;
  WTF *v77;
  unsigned int v78;
  char v79;
  uint64_t v80;
  _QWORD *v81;
  WebCore::Layout::InlineLevelBox *v82;
  WebCore::Layout::InlineLevelBox *v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;

  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 56);
  if (v3 && (*(_WORD *)(v3 + 12) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1943BC828);
  }
  v4 = *(_QWORD *)(v3 + 120);
  v5 = 1;
  if (!v4)
  {
    v26 = 0;
    v6 = 0;
    goto LABEL_109;
  }
  v6 = 0;
  a2 = 0;
  v7 = 0;
  while (1)
  {
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = *(_QWORD *)(v4 + 112);
        if (v9 && (*(_BYTE *)(v9 + 52) & 7) == 1 && *(_DWORD *)(v9 + 240) == 1 && *(_QWORD *)(v9 + 232))
        {
          v29 = v7;
          if (v7 == (_DWORD)a2)
          {
            v71 = ((unint64_t)a2 >> 2) + a2;
            if (v71 >= 0x10)
              v72 = v71 + 1;
            else
              v72 = 16;
            if (v72 <= (unint64_t)v7 + 1)
              v31 = v7 + 1;
            else
              v31 = v72;
            if (v31 >> 29)
            {
              __break(0xC471u);
LABEL_198:
              JUMPOUT(0x1943BC7B8);
            }
            v73 = a2;
            v30 = WTF::fastMalloc((WTF *)(8 * v31));
            v75 = v73;
            if (v73)
            {
              v80 = 8 * v29;
              v81 = (_QWORD *)v30;
              v82 = v6;
              v83 = v6;
              v87 = v30;
              v89 = v75;
              do
              {
                v84 = *(_QWORD *)v82;
                *(_QWORD *)v83 = 0;
                v83 = (WebCore::Layout::InlineLevelBox *)((char *)v83 + 8);
                *v81++ = v84;
                WebCore::Layout::InlineLevelBox::~InlineLevelBox(v82);
                v75 = v89;
                v30 = v87;
                v82 = v83;
                v80 -= 8;
              }
              while (v80);
            }
            if (v6)
            {
              if ((WTF *)v30 == v6)
                v31 = 0;
              else
                v31 = v31;
              if ((WTF *)v30 == v6)
                v76 = 0;
              else
                v76 = v30;
              v77 = v6;
              v78 = v75;
              WTF::fastFree(v77, v74);
              v30 = v76;
              v7 = v78;
            }
            else
            {
              v7 = v75;
            }
          }
          else
          {
            v30 = (uint64_t)v6;
            v31 = a2;
          }
          *(_QWORD *)(v30 + 8 * v29) = v8;
          ++v7;
          ++*(_DWORD *)(v8 + 8);
          a2 = v31;
          v6 = (WTF *)v30;
        }
        v10 = *(_WORD *)(v8 + 12);
        if ((v10 & 0x400) != 0)
          goto LABEL_27;
        v11 = *(_QWORD *)(v8 + 32);
        v12 = v11 & 0x1F;
        v13 = v12 > 0x17 || ((1 << v12) & 0xA00006) == 0;
        if (!v13
          || ((v11 & 0x1Fu) <= 0xDuLL ? (v21 = ((1 << (v11 & 0x1F)) & 0x3008) == 0) : (v21 = 1), !v21))
        {
          if ((v10 & 0x40) != 0)
          {
            v14 = *(_QWORD *)(v8 + 120);
            if (v14)
            {
              v15 = *(_QWORD *)(v14 + 32);
              if ((v15 & 0xE000000) != 0 || (v15 & 0x180000) == 0x100000)
              {
                v27 = *(_QWORD *)(v8 + 120);
                do
                {
                  v27 = *(_QWORD *)(v27 + 88);
                  if (!v27)
                    goto LABEL_40;
                  v28 = *(_QWORD *)(v27 + 32);
                }
                while ((v28 & 0xE000000) != 0 || (v28 & 0x180000) == 0x100000);
                do
                {
                  do
                  {
                    v14 = *(_QWORD *)(v14 + 88);
                    v15 = *(_QWORD *)(v14 + 32);
                  }
                  while ((v15 & 0xE000000) != 0);
                }
                while ((v15 & 0x180000) == 0x100000);
              }
              v16 = (v15 & 0x1Fu) > 0x19 || ((1 << (v15 & 0x1F)) & 0x3528001) == 0;
              v17 = v15 & 0x1F;
              v18 = !v16 || v17 == 3;
              if (v18 || v17 == 5)
                goto LABEL_27;
            }
          }
        }
LABEL_40:
        if ((*(_WORD *)(v8 + 12) & 0x480) != 0)
          goto LABEL_27;
        v22 = v10 & 0xF;
        if (v22 == 5)
          goto LABEL_27;
        if (v12 > 0x15)
          break;
        if (((1 << v12) & 0x90010) != 0)
        {
          if ((v11 & 0x1Fu) > 0xDuLL || ((1 << (v11 & 0x1F)) & 0x3008) == 0)
            break;
        }
        else if (((1 << v12) & 0x200006) == 0)
        {
          break;
        }
        v23 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 40);
        v24 = (*(_BYTE *)(v23 + 642) & 3u) - 3 <= 0xFFFFFFFD && (*(_BYTE *)(v23 + 462) & 1) == 0;
        if (v24
          || (v88 = a2,
              v79 = WebCore::Layout::Box::isLayoutContainmentBox(void)const::$_0::operator()(v8),
              a2 = v88,
              (v79 & 1) == 0))
        {
          if ((v11 & 0x180000) != 0x100000
            && ((v11 & 0xE000000) != 0 || (*(_QWORD *)(*(_QWORD *)(v8 + 80) + 32) & 0x1ELL) != 0x10))
          {
            break;
          }
        }
LABEL_27:
        if (v8 == v3)
          goto LABEL_107;
        while (1)
        {
          v4 = *(_QWORD *)(v8 + 88);
          if (v4)
            break;
          v8 = *(_QWORD *)(v8 + 80);
          if (v8 == v3 || (*(_WORD *)(v8 + 12) & 0x80) != 0)
            goto LABEL_107;
        }
      }
      if ((v11 & 0x180000) == 0x100000 || (v11 & 0xE000000) == 0)
      {
        if (v12 - 1 >= 2 && v12 != 21)
        {
          if (v12 == 23)
            goto LABEL_27;
          v25 = v11 & 0x1F;
          if (v25 <= 0xD && ((1 << v25) & 0x3008) != 0)
          {
            if (v12 > 0x15)
              goto LABEL_27;
            if (((1 << v12) & 0x90010) != 0)
            {
              if (v25 > 0xD || ((1 << v25) & 0x3008) == 0)
                goto LABEL_27;
              goto LABEL_66;
            }
            if (((1 << v12) & 0x200002) == 0)
              goto LABEL_27;
          }
          else
          {
LABEL_66:
            if (v12 > 0x15)
              goto LABEL_90;
            if (((1 << v12) & 0x90010) != 0)
            {
              if (v25 > 0xD || ((1 << v25) & 0x3008) == 0)
                goto LABEL_90;
            }
            else if (((1 << v12) & 0x200002) == 0)
            {
              goto LABEL_90;
            }
          }
        }
        v32 = a2;
        isOverflowVisible = WebCore::Layout::Box::isOverflowVisible((WebCore::Layout::Box *)v8);
        a2 = v32;
        if (!isOverflowVisible)
          goto LABEL_27;
        v10 = *(_WORD *)(v8 + 12);
        v22 = v10 & 0xF;
        goto LABEL_90;
      }
      if ((v11 & 0x1F) == 1)
        goto LABEL_27;
LABEL_90:
      if (v22 != 6)
      {
        v34 = *(_QWORD *)(v8 + 32);
        if ((v34 & 0x1E) != 0x10)
        {
          v35 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 40);
          v36 = (*(_BYTE *)(v35 + 642) & 3u) - 3 <= 0xFFFFFFFD && (*(_BYTE *)(v35 + 462) & 1) == 0;
          if (v36
            || (v85 = a2,
                v86 = WebCore::Layout::Box::isLayoutContainmentBox(void)const::$_0::operator()(v8),
                a2 = v85,
                (v86 & 1) == 0))
          {
            if ((v34 & 0x180000) != 0x100000
              && ((v34 & 0xE000000) != 0 || (*(_QWORD *)(*(_QWORD *)(v8 + 80) + 32) & 0x1ELL) != 0x10))
            {
              goto LABEL_100;
            }
          }
        }
      }
      goto LABEL_27;
LABEL_100:
      if ((v10 & 0x40) == 0)
        break;
      v4 = *(_QWORD *)(v8 + 120);
    }
    while (v4);
    if (v8 == v3)
      break;
    while (1)
    {
      v4 = *(_QWORD *)(v8 + 88);
      if (v4)
        break;
      v8 = *(_QWORD *)(v8 + 80);
      if (v8 == v3 || (*(_WORD *)(v8 + 12) & 0x80) != 0)
        goto LABEL_107;
    }
  }
LABEL_107:
  v26 = (WTF *)((char *)v6 + 8 * v7);
  if (v7)
  {
    v55 = 0;
    do
    {
      v56 = *(_QWORD **)((char *)v6 + v55);
      v57 = v56[12];
      if (v57)
        v58 = (uint64_t *)(v57 + 88);
      else
        v58 = (uint64_t *)(v56[10] + 120);
      v59 = v56[11];
      if (v59)
        v60 = (uint64_t *)(v59 + 96);
      else
        v60 = (uint64_t *)(v56[10] + 128);
      v56[11] = 0;
      v61 = *v58;
      *v58 = v59;
      v62 = v56[12];
      v56[12] = 0;
      v63 = *v60;
      *v60 = v62;
      if (v63)
      {
        v64 = *(_DWORD *)(v63 + 8);
        if (!v64)
        {
          __break(0xC471u);
          JUMPOUT(0x1943BC904);
        }
        *(_DWORD *)(v63 + 8) = v64 - 1;
      }
      v65 = v56[10];
      if (v65)
      {
        v66 = *(_DWORD *)(v65 + 8);
        if (!v66)
        {
          __break(0xC471u);
          JUMPOUT(0x1943BC924);
        }
        *(_DWORD *)(v65 + 8) = v66 - 1;
      }
      v56[10] = 0;
      v67 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8)
                                                          + 40)
                                              + 8)
                                  + 1944)
                      + 264);
      v90 = v61;
      WebCore::Layout::ElementBox::insertChild(v67, &v90, *(_QWORD *)(v67 + 128));
      if (v90)
        (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
      v55 += 8;
    }
    while (8 * v7 != v55);
    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
LABEL_109:
  v38 = *((_QWORD *)this + 1);
  v39 = *(_QWORD *)(v38 + 56);
  if (v39)
  {
    v40 = *(_WORD *)(v39 + 12);
    if ((v40 & 0x40) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1943BC848);
    }
  }
  else
  {
    LOBYTE(v40) = MEMORY[0xC];
  }
  if ((v40 & 0x40) == 0)
  {
    __break(0xC471u);
    goto LABEL_198;
  }
  v41 = *(_QWORD *)(v39 + 80);
  if (v41 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 24) + 8) + 40) + 8)
                                    + 1944)
                        + 264))
  {
    v43 = *(_QWORD *)(v39 + 88);
    v42 = *(_QWORD *)(v39 + 96);
    v13 = v42 == 0;
    v44 = (uint64_t *)(v42 + 88);
    if (v13)
      v44 = (uint64_t *)(v41 + 120);
    if (v43)
      v45 = (uint64_t *)(v43 + 96);
    else
      v45 = (uint64_t *)(v41 + 128);
    *(_QWORD *)(v39 + 88) = 0;
    v46 = *v44;
    *v44 = v43;
    v47 = *(_QWORD *)(v39 + 96);
    *(_QWORD *)(v39 + 96) = 0;
    v48 = *v45;
    *v45 = v47;
    if (v48)
    {
      v49 = *(_DWORD *)(v48 + 8);
      if (!v49)
      {
        __break(0xC471u);
        JUMPOUT(0x1943BC7E8);
      }
      *(_DWORD *)(v48 + 8) = v49 - 1;
    }
    v50 = *(_QWORD *)(v39 + 80);
    if (v50)
    {
      v51 = *(_DWORD *)(v50 + 8);
      if (!v51)
      {
        __break(0xC471u);
        JUMPOUT(0x1943BC808);
      }
      *(_DWORD *)(v50 + 8) = v51 - 1;
    }
    *(_QWORD *)(v39 + 80) = 0;
    if (v46)
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  }
  else
  {
    WebCore::Layout::ElementBox::destroyChildren((WebCore::Layout::ElementBox *)v39);
  }
  if ((v5 & 1) == 0)
  {
    v68 = v6;
    do
    {
      v69 = *(_QWORD *)v68;
      *(_QWORD *)v68 = 0;
      if (v69)
      {
        v70 = *(_DWORD *)(v69 + 8);
        if (!v70)
        {
          __break(0xC471u);
          JUMPOUT(0x1943BC8E4);
        }
        *(_DWORD *)(v69 + 8) = v70 - 1;
      }
      v68 = (WTF *)((char *)v68 + 8);
    }
    while (v68 != v26);
  }
  if (v6)
    WTF::fastFree(v6, (void *)a2);
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v52 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v52)
    {
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
      {
        atomic_store(1u, v52);
        WTF::fastFree((WTF *)v52, (void *)a2);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

void WebCore::Layout::InlineTextBox::~InlineTextBox(WebCore::Layout::InlineTextBox *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  void *v4;

  *(_QWORD *)this = off_1E33F3100;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Layout::Box::~Box(this, a2);
  if (*((_DWORD *)this + 2))
  {
    *((_QWORD *)this + 16) = 0;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v4);
  }
}

{
  WTF::StringImpl *v3;

  *(_QWORD *)this = off_1E33F3100;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Layout::Box::~Box(this, a2);
}

void WebCore::Layout::ElementBox::~ElementBox(WTF **this)
{
  void *v2;
  WTF *v3;
  WTF *v4;
  int v5;
  WTF *v6;
  void *v7;

  *this = (WTF *)off_1E33F3060;
  WebCore::Layout::ElementBox::destroyChildren((WebCore::Layout::ElementBox *)this);
  v3 = this[17];
  this[17] = 0;
  if (v3)
    WTF::fastFree(v3, v2);
  v4 = this[16];
  if (v4)
  {
    v5 = *((_DWORD *)v4 + 2);
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x1943BCB90);
    }
    *((_DWORD *)v4 + 2) = v5 - 1;
  }
  v6 = this[15];
  this[15] = 0;
  if (v6)
    (*(void (**)(WTF *))(*(_QWORD *)v6 + 8))(v6);
  WebCore::Layout::Box::~Box((WebCore::Layout::Box *)this, v2);
  if (*((_DWORD *)this + 2))
  {
    this[18] = 0;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)this, v7);
  }
}

{
  void *v2;
  WTF *v3;
  WTF *v4;
  int v5;
  WTF *v6;

  *this = (WTF *)off_1E33F3060;
  WebCore::Layout::ElementBox::destroyChildren((WebCore::Layout::ElementBox *)this);
  v3 = this[17];
  this[17] = 0;
  if (v3)
    WTF::fastFree(v3, v2);
  v4 = this[16];
  if (v4)
  {
    v5 = *((_DWORD *)v4 + 2);
    if (!v5)
    {
      __break(0xC471u);
      return;
    }
    *((_DWORD *)v4 + 2) = v5 - 1;
  }
  v6 = this[15];
  this[15] = 0;
  if (v6)
    (*(void (**)(WTF *))(*(_QWORD *)v6 + 8))(v6);
  WebCore::Layout::Box::~Box((WebCore::Layout::Box *)this, v2);
}

void WebCore::Layout::Box::~Box(WebCore::Layout::Box *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  bmalloc::api *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  WebCore::Layout::Box *v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  WebCore::RenderStyle *v26;
  WTF *v27;
  int v28;
  unsigned int v29;
  uint64_t v31;
  WTF *v32;

  *(_QWORD *)this = off_1E33F3040;
  if ((*((_WORD *)this + 6) & 0x200) == 0)
    goto LABEL_2;
  {
    v16 = WebCore::Layout::Box::rareDataMap(void)::map;
    if (WebCore::Layout::Box::rareDataMap(void)::map)
    {
      v17 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
      v18 = WTF::PtrHashBase<WTF::AtomString *,false>::hash((uint64_t)this) & v17;
      v19 = *(WebCore::Layout::Box **)(v16 + 16 * v18);
      if (v19 == this)
      {
LABEL_31:
        v21 = (_QWORD *)(v16 + 16 * v18);
        v22 = WebCore::Layout::Box::rareDataMap(void)::map;
        if (!WebCore::Layout::Box::rareDataMap(void)::map)
          goto LABEL_34;
        v23 = *(unsigned int *)(WebCore::Layout::Box::rareDataMap(void)::map - 4);
      }
      else
      {
        v20 = 1;
        while (v19)
        {
          v18 = ((_DWORD)v18 + v20) & v17;
          v19 = *(WebCore::Layout::Box **)(v16 + 16 * v18);
          ++v20;
          if (v19 == this)
            goto LABEL_31;
        }
        v22 = WebCore::Layout::Box::rareDataMap(void)::map;
        if (!WebCore::Layout::Box::rareDataMap(void)::map)
          goto LABEL_52;
        v23 = *(unsigned int *)(WebCore::Layout::Box::rareDataMap(void)::map - 4);
        v21 = (_QWORD *)(WebCore::Layout::Box::rareDataMap(void)::map + 16 * v23);
      }
      v22 += 16 * v23;
      if ((_QWORD *)v22 != v21)
      {
LABEL_34:
        if ((_QWORD *)v22 != v21)
        {
          v24 = v21[1];
          *v21 = -1;
          v21[1] = 0;
          if (v24)
          {
            v25 = *(_DWORD **)(v24 + 32);
            *(_QWORD *)(v24 + 32) = 0;
            if (v25)
            {
              if (v25[2] == 1)
              {
                v31 = v24;
                (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
                v24 = v31;
              }
              else
              {
                --v25[2];
              }
            }
            v26 = *(WebCore::RenderStyle **)(v24 + 24);
            v32 = (WTF *)v24;
            *(_QWORD *)(v24 + 24) = 0;
            if (v26)
            {
              WebCore::RenderStyle::~RenderStyle(v26, a2);
              if (*(_DWORD *)v27)
              {
                *((_OWORD *)v27 + 2) = 0u;
                *((_OWORD *)v27 + 3) = 0u;
                *(_OWORD *)v27 = 0u;
                *((_OWORD *)v27 + 1) = 0u;
              }
              else
              {
                WTF::fastFree(v27, a2);
              }
            }
            WTF::fastFree(v32, a2);
          }
          ++*(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 16);
          if (WebCore::Layout::Box::rareDataMap(void)::map)
            v28 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 12) - 1;
          else
            v28 = -1;
          *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 12) = v28;
          if (WebCore::Layout::Box::rareDataMap(void)::map)
          {
            v29 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 4);
            if (6 * *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 12) < v29 && v29 >= 9)
              WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::Box::BoxRareData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::Box::BoxRareData>>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::Box::BoxRareData>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::Box::BoxRareData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(v29 >> 1, 0);
          }
        }
      }
    }
  }
  else
  {
    WebCore::Layout::Box::rareDataMap(void)::map = 0;
  }
LABEL_52:
  *((_WORD *)this + 6) &= ~0x200u;
LABEL_2:
  v3 = *((_QWORD *)this + 14);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 56);
    if (!v4)
      goto LABEL_4;
    v12 = *(_QWORD *)(v4 + 112);
    *(_QWORD *)(v4 + 112) = 0;
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 16);
      if (!v13)
      {
        __break(0xC471u);
        JUMPOUT(0x1943BCE78);
      }
      *(_DWORD *)(v12 + 16) = v13 - 1;
    }
    v14 = *(_QWORD *)(v3 + 56);
    if (v14)
    {
      v15 = *(_DWORD *)(v14 + 8);
      if (!v15)
      {
        __break(0xC471u);
        JUMPOUT(0x1943BCE98);
      }
      *(_DWORD *)(v14 + 8) = v15 - 1;
    }
    *(_QWORD *)(v3 + 56) = 0;
    v3 = *((_QWORD *)this + 14);
    if (v3)
    {
LABEL_4:
      v5 = *(_DWORD *)(v3 + 16);
      if (!v5)
      {
        __break(0xC471u);
        JUMPOUT(0x1943BCE58);
      }
      *(_DWORD *)(v3 + 16) = v5 - 1;
    }
  }
  v6 = (bmalloc::api *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v6)
    bmalloc::api::isoDeallocate(v6, a2);
  v7 = *((_QWORD *)this + 12);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 + 8);
    if (!v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1943BCE18);
    }
    *(_DWORD *)(v7 + 8) = v8 - 1;
  }
  v9 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 10);
  if (v10)
  {
    v11 = *(_DWORD *)(v10 + 8);
    if (!v11)
    {
      __break(0xC471u);
      JUMPOUT(0x1943BCE38);
    }
    *(_DWORD *)(v10 + 8) = v11 - 1;
  }
  WebCore::RenderStyle::~RenderStyle((WebCore::Layout::Box *)((char *)this + 16), a2);
}

{
  uint64_t v2;
  void *v3;

  WebCore::Layout::Box::~Box(this, a2);
  if (*(_DWORD *)(v2 + 8))
  {
    *(_QWORD *)(v2 + 112) = 0;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
}

uint64_t *WTF::HashTable<WebCore::Layout::ElementBox const*,WTF::KeyValuePair<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::InlineContentCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::InlineContentCache>>>,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashMap<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::InlineContentCache>,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashTraits<WebCore::Layout::ElementBox const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::InlineContentCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::ElementBox const*>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  v2 = result;
  v3 = a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v3)
  {
    if (*(_BYTE *)(v3 + 1456))
      WebCore::Layout::LineLayoutResult::~LineLayoutResult((WebCore::Layout::LineLayoutResult *)(v3 + 32), a2);
    v4 = *(WTF **)(v3 + 16);
    if (v4)
    {
      *(_QWORD *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
      WTF::fastFree(v4, a2);
    }
    result = (uint64_t *)bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
  }
  ++*(_DWORD *)(*v2 - 16);
  v5 = *v2;
  if (*v2)
    v6 = *(_DWORD *)(v5 - 12) - 1;
  else
    v6 = -1;
  *(_DWORD *)(v5 - 12) = v6;
  v7 = *v2;
  if (*v2)
  {
    v8 = 6 * *(_DWORD *)(v7 - 12);
    v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
      return WTF::HashTable<WebCore::Layout::ElementBox const*,WTF::KeyValuePair<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::InlineContentCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::InlineContentCache>>>,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashMap<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::InlineContentCache>,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashTraits<WebCore::Layout::ElementBox const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::InlineContentCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::ElementBox const*>>::rehash(v2, v9 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashMap<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::BlockFormattingState>,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashTraits<WebCore::Layout::ElementBox const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::BlockFormattingState>>,WTF::HashTableTraits>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  WebCore::Layout::BlockFormattingState *v11;
  bmalloc::api *v12;
  void *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v21;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = ~(*a2 << 32) + *a2;
  v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  v8 = v4 & (((v7 + ~(v7 << 27)) >> 31) ^ ((_DWORD)v7 + ~((_DWORD)v7 << 27)));
  v9 = *(_QWORD *)(v2 + 16 * v8);
  if (v9 != *a2)
  {
    v21 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v21) & v4;
      v9 = *(_QWORD *)(v2 + 16 * v8);
      ++v21;
      if (v9 == *a2)
        goto LABEL_3;
    }
    v8 = *(unsigned int *)(v2 - 4);
  }
LABEL_3:
  if (v8 == *(_DWORD *)(v2 - 4))
    return 0;
  v10 = (_QWORD *)(v2 + 16 * v8);
  v11 = (WebCore::Layout::BlockFormattingState *)v10[1];
  *v10 = -1;
  v10[1] = 0;
  if (v11)
  {
    WebCore::Layout::BlockFormattingState::~BlockFormattingState(v11, a2);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  ++*(_DWORD *)(*a1 - 16);
  v14 = *a1;
  if (*a1)
    v15 = *(_DWORD *)(v14 - 12) - 1;
  else
    v15 = -1;
  *(_DWORD *)(v14 - 12) = v15;
  v16 = *a1;
  if (*a1)
  {
    v17 = 6 * *(_DWORD *)(v16 - 12);
    v18 = *(_DWORD *)(v16 - 4);
    if (v17 < v18 && v18 >= 9)
      WTF::HashTable<WebCore::Layout::ElementBox const*,WTF::KeyValuePair<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::BlockFormattingState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::BlockFormattingState>>>,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashMap<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::BlockFormattingState>,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashTraits<WebCore::Layout::ElementBox const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::BlockFormattingState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::ElementBox const*>>::rehash(a1, v18 >> 1, 0);
  }
  return 1;
}

void WebCore::Layout::BlockFormattingState::~BlockFormattingState(WebCore::Layout::BlockFormattingState *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD **v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _DWORD **v29;
  uint64_t v30;

  v3 = *((_QWORD *)this + 11);
  if (v3)
  {
    v17 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v17)
    {
      v18 = (uint64_t *)*((_QWORD *)this + 11);
      do
      {
        v19 = *v18;
        if (*v18 != -1)
        {
          *v18 = 0;
          if (v19)
          {
            v20 = *(_DWORD *)(v19 + 8);
            if (!v20)
            {
              __break(0xC471u);
              JUMPOUT(0x1943BD324);
            }
            *(_DWORD *)(v19 + 8) = v20 - 1;
          }
        }
        ++v18;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    v21 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v21)
    {
      v22 = (uint64_t *)*((_QWORD *)this + 10);
      do
      {
        v23 = *v22;
        if (*v22 != -1)
        {
          *v22 = 0;
          if (v23)
          {
            v24 = *(_DWORD *)(v23 + 8);
            if (!v24)
            {
              __break(0xC471u);
              JUMPOUT(0x1943BD344);
            }
            *(_DWORD *)(v23 + 8) = v24 - 1;
          }
        }
        v22 += 10;
        --v21;
      }
      while (v21);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v5 = *((unsigned int *)this + 19);
  if ((_DWORD)v5)
  {
    v25 = (uint64_t *)*((_QWORD *)this + 8);
    v26 = 8 * v5;
    do
    {
      v27 = *v25;
      *v25 = 0;
      if (v27)
      {
        v28 = *(_DWORD *)(v27 + 8);
        if (!v28)
          goto LABEL_51;
        *(_DWORD *)(v27 + 8) = v28 - 1;
      }
      ++v25;
      v26 -= 8;
    }
    while (v26);
  }
  v6 = (WTF *)*((_QWORD *)this + 8);
  if (v6)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *((unsigned int *)this + 13);
  if ((_DWORD)v7)
  {
    v12 = 120 * v7;
    v13 = (_DWORD **)(*((_QWORD *)this + 5) + 96);
    do
    {
      v14 = *v13;
      *v13 = 0;
      if (v14)
      {
        if (v14[2] == 1)
        {
          v29 = v13;
          v30 = v12;
          (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
          v13 = v29;
          v12 = v30;
        }
        else
        {
          --v14[2];
        }
      }
      v15 = (uint64_t)*(v13 - 12);
      if (v15)
      {
        v16 = *(_DWORD *)(v15 + 8);
        if (!v16)
        {
          __break(0xC471u);
          JUMPOUT(0x1943BD304);
        }
        *(_DWORD *)(v15 + 8) = v16 - 1;
      }
      v13 += 15;
      v12 -= 120;
    }
    while (v12);
  }
  v8 = (WTF *)*((_QWORD *)this + 5);
  if (v8)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    v10 = *(_DWORD *)(v9 + 8);
    if (!v10)
    {
LABEL_51:
      __break(0xC471u);
      JUMPOUT(0x1943BD188);
    }
    *(_DWORD *)(v9 + 8) = v10 - 1;
  }
  v11 = *((_QWORD *)this + 1);
  if (v11)
    WTF::fastFree((WTF *)(v11 - 16), a2);
}

void WebCore::Layout::LayoutState::~LayoutState(WebCore::Layout::LayoutState *this, WTF::StringImpl *a2)
{
  void *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Layout::BlockFormattingState **v10;
  WebCore::Layout::BlockFormattingState *v11;
  bmalloc::api *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  WTF *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  bmalloc::api **v23;
  bmalloc::api *v24;
  uint64_t v25;
  WebCore::Layout::TableFormattingState **v26;
  WebCore::Layout::TableFormattingState *v27;
  bmalloc::api *v28;
  void *v29;

  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)this + 8, a2);
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 8);
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x1943BD55CLL);
    }
    *(_DWORD *)(v4 + 8) = v5 - 1;
  }
  v6 = *((_QWORD *)this + 5);
  if (v6)
  {
    v22 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v22)
    {
      v23 = (bmalloc::api **)(v6 + 8);
      do
      {
        if (*(v23 - 1) != (bmalloc::api *)-1)
        {
          v24 = *v23;
          *v23 = 0;
          if (v24)
            bmalloc::api::isoDeallocate(v24, v3);
        }
        v23 += 2;
        --v22;
      }
      while (v22);
    }
    WTF::fastFree((WTF *)(v6 - 16), v3);
  }
  v7 = *((_QWORD *)this + 4);
  if (v7)
  {
    v25 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v25)
    {
      v26 = (WebCore::Layout::TableFormattingState **)(v7 + 8);
      do
      {
        if (*(v26 - 1) != (WebCore::Layout::TableFormattingState *)-1)
        {
          v27 = *v26;
          *v26 = 0;
          if (v27)
          {
            WebCore::Layout::TableFormattingState::~TableFormattingState(v27, v3);
            bmalloc::api::isoDeallocate(v28, v29);
          }
        }
        v26 += 2;
        --v25;
      }
      while (v25);
    }
    WTF::fastFree((WTF *)(v7 - 16), v3);
  }
  v8 = *((_QWORD *)this + 3);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      v10 = (WebCore::Layout::BlockFormattingState **)(v8 + 8);
      do
      {
        if (*(v10 - 1) != (WebCore::Layout::BlockFormattingState *)-1)
        {
          v11 = *v10;
          *v10 = 0;
          if (v11)
          {
            WebCore::Layout::BlockFormattingState::~BlockFormattingState(v11, v3);
            bmalloc::api::isoDeallocate(v12, v13);
          }
        }
        v10 += 2;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 16), v3);
  }
  v14 = *((_QWORD *)this + 2);
  if (v14)
  {
    v15 = *(unsigned int *)(v14 - 4);
    if ((_DWORD)v15)
    {
      v16 = (uint64_t *)(v14 + 8);
      do
      {
        if (*(v16 - 1) != -1)
        {
          v17 = *v16;
          *v16 = 0;
          if (v17)
          {
            if (*(_BYTE *)(v17 + 1456))
              WebCore::Layout::LineLayoutResult::~LineLayoutResult((WebCore::Layout::LineLayoutResult *)(v17 + 32), v3);
            v18 = *(WTF **)(v17 + 16);
            if (v18)
            {
              *(_QWORD *)(v17 + 16) = 0;
              *(_DWORD *)(v17 + 24) = 0;
              WTF::fastFree(v18, v3);
            }
            bmalloc::api::isoDeallocate((bmalloc::api *)v17, v3);
          }
        }
        v16 += 2;
        --v15;
      }
      while (v15);
    }
    WTF::fastFree((WTF *)(v14 - 16), v3);
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v19 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        WTF::fastFree((WTF *)v19, v3);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

void WebCore::RenderLayerBacking::~RenderLayerBacking(const WebCore::GraphicsLayer **this)
{
  const WebCore::GraphicsLayer *v2;
  _DWORD **v3;
  const WebCore::GraphicsLayer *v4;
  _DWORD **v5;
  const WebCore::GraphicsLayer *v6;
  _DWORD **v7;
  const WebCore::GraphicsLayer *v8;
  _DWORD **v9;
  _QWORD *v10;
  const WebCore::GraphicsLayer *v11;
  _QWORD *v12;
  _DWORD *v13;
  _BYTE *v14;
  _DWORD *v15;
  _BYTE *v16;
  _DWORD *v17;
  const WebCore::GraphicsLayer *v18;
  const WebCore::GraphicsLayer *v19;
  _DWORD **v20;
  _DWORD **v21;
  _DWORD **v22;
  void *v23;
  const WebCore::GraphicsLayer *v24;
  _DWORD *v25;
  const WebCore::GraphicsLayer *v26;
  const WebCore::GraphicsLayer *v27;
  const WebCore::GraphicsLayer *v28;
  const WebCore::GraphicsLayer *v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  unsigned int *v38;
  unsigned int *v39;
  void *v40;
  unsigned int *v41;
  unsigned int *v42;
  void *v43;
  const WebCore::GraphicsLayer *v44;
  const WebCore::GraphicsLayer *v45;
  _DWORD *v46;
  uint64_t v47;
  const WebCore::GraphicsLayer *v48;
  _DWORD *v49;
  WTF *v50;
  WTF *v51;
  _DWORD *v52;

  WebCore::RenderLayerBacking::updateAncestorClipping((WebCore::RenderLayerBacking *)this, 0, 0);
  v3 = (_DWORD **)(this + 12);
  v2 = this[12];
  if (v2 && !*((_BYTE *)this + 290))
  {
    WebCore::RenderLayerBacking::willDestroyLayer((uint64_t)this, v2);
    WebCore::GraphicsLayer::unparentAndClear((_DWORD *)this + 24);
  }
  WebCore::RenderLayerBacking::updateOverflowControlsLayers((WebCore::RenderLayerBacking *)this, 0, 0, 0);
  v5 = (_DWORD **)(this + 10);
  v4 = this[10];
  if (v4)
  {
    WebCore::RenderLayerBacking::willDestroyLayer((uint64_t)this, v4);
    WebCore::GraphicsLayer::unparentAndClear((_DWORD *)this + 20);
  }
  v7 = (_DWORD **)(this + 11);
  v6 = this[11];
  if (v6)
  {
    WebCore::RenderLayerBacking::willDestroyLayer((uint64_t)this, v6);
    WebCore::GraphicsLayer::unparentAndClear((_DWORD *)this + 22);
  }
  v9 = (_DWORD **)(this + 8);
  v8 = this[8];
  if (v8)
  {
    WebCore::RenderLayerBacking::willDestroyLayer((uint64_t)this, v8);
    WebCore::GraphicsLayer::unparentAndClear((_DWORD *)this + 16);
    (*(void (**)(const WebCore::GraphicsLayer *, uint64_t))(*(_QWORD *)this[9] + 680))(this[9], 1);
  }
  v10 = this + 14;
  if (this[14])
  {
    v48 = this[9];
    v52 = 0;
    (*(void (**)(const WebCore::GraphicsLayer *, _DWORD **))(*(_QWORD *)v48 + 104))(v48, &v52);
    v49 = v52;
    v52 = 0;
    if (v49)
    {
      if (v49[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v49 + 16))(v49);
      else
        --v49[2];
    }
    WebCore::RenderLayerBacking::willDestroyLayer((uint64_t)this, this[14]);
    WebCore::GraphicsLayer::clear(this + 14);
  }
  WebCore::RenderLayerBacking::updateScrollingLayers((WebCore::RenderLayerBacking *)this, 0);
  v12 = this + 9;
  v11 = this[9];
  if (v11)
  {
    v52 = 0;
    (*(void (**)(const WebCore::GraphicsLayer *, _DWORD **))(*(_QWORD *)v11 + 104))(v11, &v52);
    v13 = v52;
    v52 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
      else
        --v13[2];
    }
    v14 = (_BYTE *)*v12;
    v52 = 0;
    (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)v14 + 120))(v14, &v52);
    v15 = v52;
    v52 = 0;
    if (v15)
    {
      if (v15[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
      else
        --v15[2];
    }
    v16 = (_BYTE *)*v12;
    if (*v12 && !v16[169] && (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v16 + 832))(v16))
    {
      v47 = WebCore::RenderView::compositor(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[1] + 4) + 24) + 8)
                                                                                            + 40)
                                                                                + 8)
                                                                    + 1944));
      --*(_DWORD *)(v47 + 204);
    }
  }
  v17 = (_DWORD *)*v10;
  if (*v10)
  {
    {
      WebCore::EmptyGraphicsLayerClient::singleton(void)::client = (uint64_t)off_1E340CF70;
    }
    *((_QWORD *)v17 + 3) = &WebCore::EmptyGraphicsLayerClient::singleton(void)::client;
    v46 = (_DWORD *)*v10;
    *v10 = 0;
    if (v46)
    {
      if (v46[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 16))(v46);
      else
        --v46[2];
    }
  }
  v18 = this[6];
  if (v18)
    WebCore::RenderLayerBacking::removeClippingStackLayers(*(_DWORD **)v18, (WebCore::LayerAncestorClippingStack *)*((unsigned int *)v18 + 3));
  v19 = this[7];
  if (v19)
    WebCore::RenderLayerBacking::removeClippingStackLayers(*(_DWORD **)v19, (WebCore::LayerAncestorClippingStack *)*((unsigned int *)v19 + 3));
  v20 = (_DWORD **)(this + 15);
  WebCore::GraphicsLayer::unparentAndClear((_DWORD *)this + 30);
  v21 = (_DWORD **)(this + 13);
  WebCore::GraphicsLayer::unparentAndClear((_DWORD *)this + 26);
  WebCore::GraphicsLayer::unparentAndClear((_DWORD *)this + 16);
  WebCore::GraphicsLayer::unparentAndClear((_DWORD *)this + 20);
  WebCore::GraphicsLayer::unparentAndClear((_DWORD *)this + 22);
  WebCore::GraphicsLayer::unparentAndClear((_DWORD *)this + 24);
  v22 = (_DWORD **)(this + 20);
  WebCore::GraphicsLayer::unparentAndClear((_DWORD *)this + 40);
  WebCore::GraphicsLayer::unparentAndClear((_DWORD *)this + 42);
  WebCore::GraphicsLayer::unparentAndClear((_DWORD *)this + 18);
  v24 = this[21];
  this[21] = 0;
  if (v24)
  {
    if (*((_DWORD *)v24 + 2) == 1)
      (*(void (**)(const WebCore::GraphicsLayer *))(*(_QWORD *)v24 + 16))(v24);
    else
      --*((_DWORD *)v24 + 2);
  }
  v25 = *v22;
  *v22 = 0;
  if (v25)
  {
    if (v25[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 16))(v25);
    else
      --v25[2];
  }
  v26 = this[19];
  this[19] = 0;
  if (v26)
  {
    if (*((_DWORD *)v26 + 2) == 1)
      (*(void (**)(const WebCore::GraphicsLayer *))(*(_QWORD *)v26 + 16))(v26);
    else
      --*((_DWORD *)v26 + 2);
  }
  v27 = this[18];
  this[18] = 0;
  if (v27)
  {
    if (*((_DWORD *)v27 + 2) == 1)
      (*(void (**)(const WebCore::GraphicsLayer *))(*(_QWORD *)v27 + 16))(v27);
    else
      --*((_DWORD *)v27 + 2);
  }
  v28 = this[17];
  this[17] = 0;
  if (v28)
  {
    if (*((_DWORD *)v28 + 2) == 1)
      (*(void (**)(const WebCore::GraphicsLayer *))(*(_QWORD *)v28 + 16))(v28);
    else
      --*((_DWORD *)v28 + 2);
  }
  v29 = this[16];
  this[16] = 0;
  if (v29)
  {
    if (*((_DWORD *)v29 + 2) == 1)
      (*(void (**)(const WebCore::GraphicsLayer *))(*(_QWORD *)v29 + 16))(v29);
    else
      --*((_DWORD *)v29 + 2);
  }
  v30 = *v20;
  *v20 = 0;
  if (v30)
  {
    if (v30[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 16))(v30);
    else
      --v30[2];
  }
  v31 = (_DWORD *)*v10;
  *v10 = 0;
  if (v31)
  {
    if (v31[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 16))(v31);
    else
      --v31[2];
  }
  v32 = *v21;
  *v21 = 0;
  if (v32)
  {
    if (v32[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 16))(v32);
    else
      --v32[2];
  }
  v33 = *v3;
  *v3 = 0;
  if (v33)
  {
    if (v33[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 16))(v33);
    else
      --v33[2];
  }
  v34 = *v7;
  *v7 = 0;
  if (v34)
  {
    if (v34[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 16))(v34);
    else
      --v34[2];
  }
  v35 = *v5;
  *v5 = 0;
  if (v35)
  {
    if (v35[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 16))(v35);
    else
      --v35[2];
  }
  v36 = (_DWORD *)*v12;
  *v12 = 0;
  if (v36)
  {
    if (v36[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 16))(v36);
    else
      --v36[2];
  }
  v37 = *v9;
  *v9 = 0;
  if (v37)
  {
    if (v37[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 16))(v37);
    else
      --v37[2];
  }
  v38 = (unsigned int *)this[7];
  this[7] = 0;
  if (v38)
  {
    v39 = WTF::Vector<WebCore::LayerAncestorClippingStack::ClippingStackEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v38, v23);
    WTF::fastFree((WTF *)v39, v40);
  }
  v41 = (unsigned int *)this[6];
  this[6] = 0;
  if (v41)
  {
    v42 = WTF::Vector<WebCore::LayerAncestorClippingStack::ClippingStackEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v41, v23);
    WTF::fastFree((WTF *)v42, v43);
  }
  v44 = this[3];
  while (v44)
  {
    v50 = v44;
    v44 = (const WebCore::GraphicsLayer *)*((_QWORD *)v44 + 2);
    v51 = *(WTF **)v50;
    *(_QWORD *)v50 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 1)
        WTF::fastFree(v51, v23);
      else
        --*(_DWORD *)v51;
    }
    WTF::fastFree(v50, v23);
  }
  v45 = this[2];
  if (v45)
    WTF::fastFree((const WebCore::GraphicsLayer *)((char *)v45 - 16), v23);
}

{
  WTF *v1;
  void *v2;

  WebCore::RenderLayerBacking::~RenderLayerBacking(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::RenderLayerBacking::updateAncestorClipping(WebCore::RenderLayerBacking *this, void *a2, const WebCore::RenderLayer *a3)
{
  WebCore::RenderView *v6;
  WebCore::RenderLayer *v7;
  uint64_t v8;
  _BOOL4 v9;
  unsigned int v10;
  WebCore::RenderLayer *v11;
  uint64_t v12;
  int v13;
  int v14;
  _BOOL4 canContainFixedPositionObjects;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  int v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  WTF *v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  WTF *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BOOL4 v51;
  int v52;
  BOOL v53;
  _QWORD *v54;
  unsigned int **v55;
  WebCore::ScrollingCoordinator *v56;
  unsigned int *v57;
  WebCore::ScrollingCoordinator *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  WTF *v63;
  unint64_t v64;
  WTF *v65;
  WTF *v66;
  uint64_t v67;
  void *v68;
  WebCore::ScrollingCoordinator *v69;
  unsigned int *v70;
  uint64_t v71;
  uint64_t v72;
  _DWORD *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  WTF *v79;
  WTF *v80;
  uint64_t v81;
  char v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  unsigned int *v86;
  unsigned int *v87;
  void *v88;
  unsigned int *v89;
  void *v90;
  _DWORD *v91;
  unsigned int **v92;
  _DWORD *v93;
  void *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  WTF *v98;
  unsigned int v99;
  WTF *v100;
  uint64_t v101;
  void *v102;
  _DWORD *v103;
  unsigned int **v104;
  _DWORD *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  WTF *v109;
  uint64_t v110;
  uint64_t v111;
  WebCore::RenderLayerCompositor *v113;
  WebCore::RenderLayerCompositor *v114;
  WTF *v115;
  void *v116;
  WTF **v117;
  uint64_t v118;
  WebCore::RenderLayer *v119;
  WTF *v120;
  uint64_t v121;
  _QWORD v122[2];
  __int128 v123;
  __int128 v124;
  __int128 v125;
  WTF *v126;
  _BYTE v127[48];
  char v128;
  __int128 v129;
  __int128 v130;
  _QWORD v131[10];

  if (!(_DWORD)a2)
  {
    if (!*((_QWORD *)this + 6))
      return 0;
    v69 = (WebCore::ScrollingCoordinator *)WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 24) + 8) + 40) + 8) + 528) + 8) + 24)
                                                                                                 + 8));
    v70 = (unsigned int *)*((_QWORD *)this + 6);
    v71 = v70[3];
    if ((_DWORD)v71)
    {
      v72 = 96 * v71;
      v73 = (_DWORD *)(*(_QWORD *)v70 + 88);
      do
      {
        v74 = *((_QWORD *)v73 - 3);
        if (v74)
        {
          (*(void (**)(WebCore::ScrollingCoordinator *, uint64_t, _QWORD))(*(_QWORD *)v69 + 256))(v69, v74, *((_QWORD *)v73 - 2));
          *((_QWORD *)v73 - 3) = 0;
          *((_QWORD *)v73 - 2) = 0;
        }
        WebCore::GraphicsLayer::unparentAndClear(v73 - 2);
        WebCore::GraphicsLayer::unparentAndClear(v73);
        v73 += 24;
        v72 -= 96;
      }
      while (v72);
      v70 = (unsigned int *)*((_QWORD *)this + 6);
      *((_QWORD *)this + 6) = 0;
      if (!v70)
        goto LABEL_155;
    }
    else
    {
      *((_QWORD *)this + 6) = 0;
    }
    v89 = WTF::Vector<WebCore::LayerAncestorClippingStack::ClippingStackEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v70, v68);
    WTF::fastFree((WTF *)v89, v90);
LABEL_155:
    v93 = (_DWORD *)*((_QWORD *)this + 7);
    v92 = (unsigned int **)((char *)this + 56);
    v91 = v93;
    if (v93)
    {
      WebCore::LayerAncestorClippingStack::clear(v91, v69);
      std::unique_ptr<WebCore::LayerAncestorClippingStack>::operator=[abi:sn180100](v92, v94);
    }
    return 1;
  }
  v6 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32)
                                                                               + 24)
                                                                   + 8)
                                                       + 40)
                                           + 8)
                               + 1944);
  if (!*((_QWORD *)v6 + 50))
  {
    v113 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    WebCore::RenderLayerCompositor::RenderLayerCompositor(v113, v6);
    v114 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v6 + 50);
    *((_QWORD *)v6 + 50) = v113;
    if (v114)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v114);
      WTF::fastFree(v115, v116);
    }
  }
  v7 = (WebCore::RenderLayer *)*((_QWORD *)this + 1);
  v120 = 0;
  v121 = 0;
  if (!a3)
  {
    v53 = 1;
    goto LABEL_108;
  }
  v122[0] = v7;
  v122[1] = &v120;
  v8 = *((_QWORD *)v7 + 4);
  if ((*(_DWORD *)(v8 + 20) & 0x1800000) == 0x1000000)
  {
    v48 = *((_QWORD *)v7 + 4);
    if ((*(_BYTE *)(v8 + 45) & 2) != 0)
      v48 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8);
    v9 = (*(_QWORD *)(v48 + 96) & 0x380000) == 3145728;
  }
  else
  {
    v9 = 0;
  }
  v10 = *(_DWORD *)(v8 + 96);
  if ((*((_BYTE *)v7 + 24) & 4) != 0)
  {
    v12 = *((_QWORD *)v7 + 5);
    v11 = (WebCore::RenderLayer *)v12;
  }
  else
  {
    v11 = v7;
    do
      v11 = (WebCore::RenderLayer *)*((_QWORD *)v11 + 5);
    while (v11 && (*((_BYTE *)v11 + 24) & 0x4A) == 0);
    v12 = *((_QWORD *)v7 + 5);
  }
  if (!v12)
    goto LABEL_107;
  v13 = 0;
  v14 = (v10 >> 19) & 7;
  v117 = (WTF **)v7;
  v119 = v7;
  while (1)
  {
    if (v14 == 6)
    {
      canContainFixedPositionObjects = WebCore::RenderElement::canContainFixedPositionObjects(*(WebCore::RenderElement **)(v12 + 32));
      goto LABEL_19;
    }
    if (v14 == 2)
    {
      canContainFixedPositionObjects = WebCore::RenderElement::canContainAbsolutelyPositionedObjects(*(WebCore::RenderElement **)(v12 + 32));
LABEL_19:
      v16 = canContainFixedPositionObjects;
      goto LABEL_20;
    }
    v16 = 1;
LABEL_20:
    if ((const WebCore::RenderLayer *)v12 == a3)
      break;
    if (!v9
      || (v17 = *(_QWORD *)(v12 + 32), v18 = *(_DWORD *)(v17 + 20), (v18 & 0x1800000) != 0x1000000)
      || ((*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v17 + 88) + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v17 + 88) + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v17 + 88) + 40) + 642) << 16)) << 32)) & 0x20000000000000) == 0)
    {
      if (!v16)
        goto LABEL_30;
      v17 = *(_QWORD *)(v12 + 32);
      v18 = *(_DWORD *)(v17 + 20);
      if ((v18 & 0x1800000) == 0x1000000)
      {
        if ((v18 & 0x10000) == 0
          && (((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v17 + 88) + 40) + 642) << 48) & 0x20000000000000) == 0)
        {
          goto LABEL_29;
        }
      }
      else if ((v18 & 0x10000) == 0)
      {
        goto LABEL_29;
      }
    }
    if ((*(_BYTE *)(v17 + 45) & 4) != 0)
    {
      v19 = *(_QWORD *)(v12 + 264);
      if (v19 && *(_BYTE *)(v19 + 79))
      {
        if (v13
          && (WebCore::RenderLayerCompositor::computeAncestorClippingStack(WebCore::RenderLayer const&,WebCore::RenderLayer const*)const::$_0::operator()((uint64_t)v122, v117, (WTF *)v12, 0), v17 = *(_QWORD *)(v12 + 32), (*(_BYTE *)(v17 + 45) & 4) == 0))
        {
          v118 = 0;
          LODWORD(v38) = 0;
          LODWORD(v35) = 0;
          v129 = 0u;
          v130 = 0u;
        }
        else
        {
          ++*(_DWORD *)(v17 + 16);
          v35 = WebCore::RenderBox::paddingBoxRect((WebCore::RenderBox *)v17);
          v118 = v36;
          v123 = 0u;
          v124 = 0u;
          if (WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)(v17 + 80)))
          {
            v107 = *(_QWORD *)(v17 + 160);
            v131[0] = 0;
            v131[1] = v107;
            WebCore::RenderStyle::getRoundedInnerBorderFor((WebCore::RenderStyle *)(v17 + 80), (const WebCore::LayoutRect *)v131, 1, 1, (uint64_t)&v126);
            v35 = (unint64_t)v126;
            v118 = *(_QWORD *)v127;
            v123 = *(_OWORD *)&v127[8];
            v124 = *(_OWORD *)&v127[24];
          }
          v37 = *(_DWORD *)(v17 + 16);
          if (!v37)
            goto LABEL_193;
          *(_DWORD *)(v17 + 16) = v37 - 1;
          v38 = HIDWORD(v35);
          v129 = v123;
          v130 = v124;
        }
        v39 = WebCore::RenderLayer::convertToLayerCoords(v119, (WebCore::RenderLayer *)v12, 0, 1);
        if (HIDWORD(v39) == 0x80000000)
          v40 = 0x7FFFFFFF;
        else
          v40 = -HIDWORD(v39);
        if ((_DWORD)v39 == 0x80000000)
          v41 = 0x7FFFFFFF;
        else
          v41 = -(int)v39;
        v24 = __OFADD__((_DWORD)v35, v41);
        v42 = v35 + v41;
        if (v24)
          v42 = (v35 >> 31) + 0x7FFFFFFF;
        v43 = (v38 + v40);
        v7 = v119;
        if (__OFADD__((_DWORD)v38, v40))
          v43 = (v38 >> 31) + 0x7FFFFFFF;
        v44 = *(WTF **)v12;
        if (*(_QWORD *)v12)
        {
LABEL_86:
          ++*(_DWORD *)v44;
          goto LABEL_87;
        }
        v99 = v42;
        v44 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v44 = 1;
        *((_QWORD *)v44 + 1) = v12;
        v100 = *(WTF **)v12;
        *(_QWORD *)v12 = v44;
        if (!v100)
        {
LABEL_167:
          v42 = v99;
          goto LABEL_86;
        }
        if (*(_DWORD *)v100 != 1)
        {
          --*(_DWORD *)v100;
          goto LABEL_167;
        }
        WTF::fastFree(v100, a2);
        v44 = *(WTF **)v12;
        v42 = v99;
        if (*(_QWORD *)v12)
          goto LABEL_86;
LABEL_87:
        v126 = v44;
        *(_QWORD *)v127 = v42 | (unint64_t)(v43 << 32);
        *(_QWORD *)&v127[8] = v118;
        *(_OWORD *)&v127[16] = v129;
        *(_OWORD *)&v127[32] = v130;
        v128 = 1;
        v28 = HIDWORD(v121);
        if (HIDWORD(v121) == (unint64_t)v121)
        {
          v29 = WTF::Vector<WebCore::CompositedClipData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v120, HIDWORD(v121) + 1, (unint64_t)&v126);
          v28 = HIDWORD(v121);
        }
        else
        {
          v29 = (uint64_t)&v126;
        }
        v30 = v120;
        if (v28)
        {
          v95 = v28 << 6;
          do
          {
            v96 = (char *)v30 + v95;
            v97 = *(_QWORD *)((char *)v30 + v95 - 64);
            *((_QWORD *)v96 - 8) = 0;
            *(_QWORD *)v96 = v97;
            *(_OWORD *)(v96 + 8) = *(_OWORD *)((char *)v30 + v95 - 56);
            *(_OWORD *)(v96 + 24) = *(_OWORD *)((char *)v30 + v95 - 40);
            *(_OWORD *)(v96 + 40) = *(_OWORD *)((char *)v30 + v95 - 24);
            v96[56] = *((_BYTE *)v30 + v95 - 8);
            v95 -= 64;
          }
          while (v95);
LABEL_93:
          LODWORD(v28) = HIDWORD(v121);
          v7 = v119;
        }
        goto LABEL_64;
      }
      if ((v18 & 0x10000) == 0)
      {
        v13 = 1;
        goto LABEL_27;
      }
      if (!WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)(v17 + 80)))
      {
        v13 = 1;
        v7 = v119;
        goto LABEL_27;
      }
      if (v13)
        WebCore::RenderLayerCompositor::computeAncestorClippingStack(WebCore::RenderLayer const&,WebCore::RenderLayer const*)const::$_0::operator()((uint64_t)v122, v117, (WTF *)v12, 0);
      v20 = *(_QWORD *)(v17 + 160);
      v126 = 0;
      *(_QWORD *)v127 = v20;
      WebCore::RenderStyle::getRoundedInnerBorderFor((WebCore::RenderStyle *)(v17 + 80), (const WebCore::LayoutRect *)&v126, 1, 1, (uint64_t)&v123);
      v7 = v119;
      v21 = WebCore::RenderLayer::convertToLayerCoords(v119, (WebCore::RenderLayer *)v12, 0, 1);
      if (HIDWORD(v21) == 0x80000000)
        v22 = 0x7FFFFFFF;
      else
        v22 = -HIDWORD(v21);
      if ((_DWORD)v21 == 0x80000000)
        v23 = 0x7FFFFFFF;
      else
        v23 = -(int)v21;
      v24 = __OFADD__((_DWORD)v123, v23);
      v25 = v123 + v23;
      if (v24)
        v25 = (v123 >> 31) + 0x7FFFFFFF;
      v24 = __OFADD__(DWORD1(v123), v22);
      v26 = DWORD1(v123) + v22;
      if (v24)
        v26 = (DWORD1(v123) >> 31) + 0x7FFFFFFF;
      *(_QWORD *)&v123 = __PAIR64__(v26, v25);
      v27 = *(WTF **)v12;
      if (*(_QWORD *)v12)
        goto LABEL_60;
      v27 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v27 = 1;
      *((_QWORD *)v27 + 1) = v12;
      v98 = *(WTF **)v12;
      *(_QWORD *)v12 = v27;
      if (!v98)
        goto LABEL_60;
      if (*(_DWORD *)v98 != 1)
      {
        --*(_DWORD *)v98;
        goto LABEL_60;
      }
      WTF::fastFree(v98, a2);
      v27 = *(WTF **)v12;
      if (*(_QWORD *)v12)
LABEL_60:
        ++*(_DWORD *)v27;
      v126 = v27;
      *(_OWORD *)v127 = v123;
      *(_OWORD *)&v127[16] = v124;
      *(_OWORD *)&v127[32] = v125;
      v128 = 0;
      v28 = HIDWORD(v121);
      if (HIDWORD(v121) == (unint64_t)v121)
      {
        v29 = WTF::Vector<WebCore::CompositedClipData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v120, HIDWORD(v121) + 1, (unint64_t)&v126);
        v28 = HIDWORD(v121);
      }
      else
      {
        v29 = (uint64_t)&v126;
      }
      v30 = v120;
      if (v28)
      {
        v47 = v28 << 6;
        do
        {
          v45 = (char *)v30 + v47;
          v46 = *(_QWORD *)((char *)v30 + v47 - 64);
          *((_QWORD *)v45 - 8) = 0;
          *(_QWORD *)v45 = v46;
          *(_OWORD *)(v45 + 8) = *(_OWORD *)((char *)v30 + v47 - 56);
          *(_OWORD *)(v45 + 24) = *(_OWORD *)((char *)v30 + v47 - 40);
          *(_OWORD *)(v45 + 40) = *(_OWORD *)((char *)v30 + v47 - 24);
          v45[56] = *((_BYTE *)v30 + v47 - 8);
          v47 -= 64;
        }
        while (v47);
        goto LABEL_93;
      }
LABEL_64:
      v31 = *(_QWORD *)v29;
      *(_QWORD *)v29 = 0;
      *(_QWORD *)v30 = v31;
      v32 = *(_OWORD *)(v29 + 24);
      v33 = *(_OWORD *)(v29 + 40);
      LOBYTE(v31) = *(_BYTE *)(v29 + 56);
      *(_OWORD *)((char *)v30 + 8) = *(_OWORD *)(v29 + 8);
      *((_BYTE *)v30 + 56) = v31;
      *(_OWORD *)((char *)v30 + 40) = v33;
      *(_OWORD *)((char *)v30 + 24) = v32;
      HIDWORD(v121) = v28 + 1;
      v34 = v126;
      v126 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 1)
          WTF::fastFree(v34, a2);
        else
          --*(_DWORD *)v34;
      }
      v13 = 0;
      v117 = (WTF **)v12;
    }
LABEL_27:
    if (v16)
    {
      v17 = *(_QWORD *)(v12 + 32);
LABEL_29:
      v14 = (*(_DWORD *)(v17 + 96) >> 19) & 7;
    }
LABEL_30:
    if ((WebCore::RenderLayer *)v12 == v11)
    {
      v11 = (WebCore::RenderLayer *)v12;
      if ((*(_BYTE *)(v12 + 24) & 4) != 0)
      {
        v11 = *(WebCore::RenderLayer **)(v12 + 40);
      }
      else
      {
        do
          v11 = (WebCore::RenderLayer *)*((_QWORD *)v11 + 5);
        while (v11 && (*((_BYTE *)v11 + 24) & 0x4A) == 0);
      }
    }
    v12 = *(_QWORD *)(v12 + 40);
    if (!v12)
      goto LABEL_107;
  }
  v50 = *((_QWORD *)a3 + 3);
  v49 = *((_QWORD *)a3 + 4);
  if ((v50 & 0x400000000000) != 0 && (v50 & 0xA) != 0)
  {
    v51 = 0;
  }
  else
  {
    v51 = 1;
    if ((*(_BYTE *)(v49 + 45) & 4) != 0 && v49)
    {
      if ((*(_DWORD *)(v49 + 20) & 0x1800000) == 0x1000000
        && ((*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v49 + 88) + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v49 + 88) + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v49 + 88) + 40) + 642) << 16)) << 32)) & 0x20000000000000) != 0)
      {
        v108 = *(_QWORD *)(v49 + 160);
        v126 = 0;
        v109 = (WTF *)WebCore::RenderBox::clipRect((WebCore::RenderBox *)v49, (const WebCore::LayoutPoint *)&v126, 0);
        v111 = v110;
        *(_QWORD *)&v123 = v109;
        *((_QWORD *)&v123 + 1) = v110;
        v126 = 0;
        *(_QWORD *)v127 = v108;
        WebCore::LayoutRect::intersect((int *)&v126, (const WebCore::LayoutRect *)&v123);
        v51 = v109 == v126 && v111 == *(_QWORD *)v127;
      }
      else
      {
        v51 = 1;
      }
    }
  }
  if (v13)
  {
    v52 = !v51;
    goto LABEL_106;
  }
  if (HIDWORD(v121))
    LOBYTE(v51) = 1;
  if (!v51)
  {
    v52 = 1;
LABEL_106:
    WebCore::RenderLayerCompositor::computeAncestorClippingStack(WebCore::RenderLayer const&,WebCore::RenderLayer const*)const::$_0::operator()((uint64_t)v122, v117, a3, v52);
  }
LABEL_107:
  v53 = HIDWORD(v121) == 0;
LABEL_108:
  v54 = (_QWORD *)*((_QWORD *)v7 + 32);
  v55 = (unsigned int **)(v54 + 6);
  if (!v54[6] && v53)
  {
    v62 = 0;
  }
  else
  {
    v56 = (WebCore::ScrollingCoordinator *)WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54[1] + 32) + 24) + 8) + 40) + 8) + 528) + 8) + 24)
                                                                                                 + 8));
    v57 = (unsigned int *)v54[6];
    if (v57)
    {
      v58 = v56;
      if (HIDWORD(v121))
      {
        if (v57[3] == HIDWORD(v121))
        {
          v59 = 0;
          v60 = 0;
          v61 = 0;
          while (1)
          {
            if (v61 >= HIDWORD(v121))
            {
              __break(0xC471u);
              JUMPOUT(0x1943BE6D8);
            }
            if (!WebCore::operator==((uint64_t *)(*(_QWORD *)v57 + v59), (uint64_t *)((char *)v120 + v60)))
              break;
            ++v61;
            v60 += 64;
            v59 += 96;
            if (v61 >= v57[3])
            {
              v62 = 0;
              goto LABEL_118;
            }
          }
          v57 = *v55;
        }
        WebCore::LayerAncestorClippingStack::updateWithClipData((uint64_t)v57, v58, (uint64_t *)&v120);
        v101 = v54[7];
        if (v101)
          WebCore::LayerAncestorClippingStack::updateWithClipData(v101, v58, (uint64_t *)&v120);
      }
      else
      {
        WebCore::LayerAncestorClippingStack::clear(v57, v56);
        std::unique_ptr<WebCore::LayerAncestorClippingStack>::operator=[abi:sn180100](v55, v102);
        v105 = (_DWORD *)v54[7];
        v104 = (unsigned int **)(v54 + 7);
        v103 = v105;
        if (v105)
        {
          WebCore::LayerAncestorClippingStack::clear(v103, v58);
          std::unique_ptr<WebCore::LayerAncestorClippingStack>::operator=[abi:sn180100](v104, v106);
        }
      }
    }
    else
    {
      v75 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v75 = 0;
      *(_QWORD *)(v75 + 8) = 0;
      if (HIDWORD(v121))
      {
        if (HIDWORD(v121) >= 0x2AAAAAB)
        {
LABEL_193:
          __break(0xC471u);
          JUMPOUT(0x1943BE61CLL);
        }
        v76 = 96 * HIDWORD(v121);
        v77 = WTF::fastMalloc((WTF *)(96 * HIDWORD(v121)));
        *(_DWORD *)(v75 + 8) = (v76 & 0xFFFFFFE0) / 0x60;
        *(_QWORD *)v75 = v77;
        if (HIDWORD(v121))
        {
          v78 = 0;
          v79 = v120;
          v80 = (WTF *)((char *)v120 + 64 * (unint64_t)HIDWORD(v121));
          do
          {
            v81 = *(_QWORD *)v79;
            *(_QWORD *)v79 = 0;
            v82 = *((_BYTE *)v79 + 56);
            v83 = *(_OWORD *)((char *)v79 + 40);
            v84 = *(_OWORD *)((char *)v79 + 24);
            v85 = *(_OWORD *)((char *)v79 + 8);
            *(_QWORD *)v77 = v81;
            *(_OWORD *)(v77 + 8) = v85;
            *(_OWORD *)(v77 + 24) = v84;
            *(_OWORD *)(v77 + 40) = v83;
            *(_BYTE *)(v77 + 56) = v82;
            ++v78;
            *(_OWORD *)(v77 + 64) = 0uLL;
            *(_OWORD *)(v77 + 80) = 0uLL;
            v77 += 96;
            v79 = (WTF *)((char *)v79 + 64);
          }
          while (v79 != v80);
          *(_DWORD *)(v75 + 12) = v78;
        }
      }
      v86 = *v55;
      *v55 = (unsigned int *)v75;
      if (v86)
      {
        v87 = WTF::Vector<WebCore::LayerAncestorClippingStack::ClippingStackEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v86, a2);
        WTF::fastFree((WTF *)v87, v88);
      }
    }
    v62 = 1;
LABEL_118:
    if (HIDWORD(v121))
    {
      v63 = v120;
      v64 = (unint64_t)HIDWORD(v121) << 6;
      do
      {
        v65 = *(WTF **)v63;
        *(_QWORD *)v63 = 0;
        if (v65)
        {
          if (*(_DWORD *)v65 == 1)
            WTF::fastFree(v65, a2);
          else
            --*(_DWORD *)v65;
        }
        v63 = (WTF *)((char *)v63 + 64);
        v64 -= 64;
      }
      while (v64);
    }
  }
  v66 = v120;
  if (v120)
  {
    v120 = 0;
    LODWORD(v121) = 0;
    WTF::fastFree(v66, a2);
  }
  if (!v62)
    return 0;
  v67 = *((_QWORD *)this + 6);
  if (v67)
    WebCore::RenderLayerBacking::ensureClippingStackLayers(this, *(WebCore::LayerAncestorClippingStack **)v67, *(_DWORD *)(v67 + 12));
  return 1;
}

uint64_t WTF::Vector<WebCore::CompositedClipData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  WTF *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 64 * (unint64_t)*(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::CompositedClipData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 26))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = WTF::fastMalloc((WTF *)(v9 << 6));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v13 = v11;
      v14 = v5;
      do
      {
        v15 = *(WTF **)v14;
        *(_QWORD *)v14 = 0;
        *(_QWORD *)v13 = v15;
        v16 = *(_OWORD *)((char *)v14 + 8);
        v17 = *(_OWORD *)((char *)v14 + 24);
        v18 = *(_OWORD *)((char *)v14 + 40);
        *(_BYTE *)(v13 + 56) = *((_BYTE *)v14 + 56);
        *(_OWORD *)(v13 + 40) = v18;
        *(_OWORD *)(v13 + 24) = v17;
        *(_OWORD *)(v13 + 8) = v16;
        WebCore::CompositedClipData::~CompositedClipData((WTF **)v14, v12);
        v14 = (WTF *)(v19 + 64);
        v13 += 64;
      }
      while (v14 != (WTF *)((char *)v5 + 64 * v10));
    }
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

BOOL WebCore::operator==(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *a1;
  if (*a1)
    v2 = *(_QWORD *)(v2 + 8);
  v3 = *a2;
  if (*a2)
    v3 = *(_QWORD *)(v3 + 8);
  if (v2 != v3)
    return 0;
  if (*((_DWORD *)a1 + 2) != *((_DWORD *)a2 + 2) || *((_DWORD *)a1 + 3) != *((_DWORD *)a2 + 3))
    return 0;
  v5 = 0;
  if (*((_DWORD *)a1 + 4) == *((_DWORD *)a2 + 4) && *((_DWORD *)a1 + 5) == *((_DWORD *)a2 + 5))
  {
    v5 = 0;
    if (*((_DWORD *)a1 + 6) == *((_DWORD *)a2 + 6) && *((_DWORD *)a1 + 7) == *((_DWORD *)a2 + 7))
    {
      v5 = 0;
      if (*((_DWORD *)a1 + 8) == *((_DWORD *)a2 + 8) && *((_DWORD *)a1 + 9) == *((_DWORD *)a2 + 9))
      {
        v5 = 0;
        if (*((_DWORD *)a1 + 10) == *((_DWORD *)a2 + 10) && *((_DWORD *)a1 + 11) == *((_DWORD *)a2 + 11))
        {
          v5 = 0;
          if (*((_DWORD *)a1 + 12) == *((_DWORD *)a2 + 12) && *((_DWORD *)a1 + 13) == *((_DWORD *)a2 + 13))
            return *((unsigned __int8 *)a1 + 56) == *((unsigned __int8 *)a2 + 56);
        }
      }
    }
  }
  return v5;
}

{
  uint64_t v2;
  int v3;
  unsigned __int8 v4;
  uint64_t v5;
  int v6;
  unsigned __int8 v7;
  int v9;
  __int16 v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v17;
  uint64_t v18;

  v2 = *a1;
  if (*a1)
    *(_DWORD *)(v2 + 24) += 2;
  v3 = *((_DWORD *)a1 + 2);
  v4 = *((_BYTE *)a1 + 12);
  v5 = *a2;
  if (*a2)
    *(_DWORD *)(v5 + 24) += 2;
  if (v2 != v5)
  {
    v15 = 0;
    if (!v5)
      goto LABEL_37;
    goto LABEL_35;
  }
  v6 = *((_DWORD *)a2 + 2);
  v7 = *((_BYTE *)a2 + 12);
  if ((v4 & 8) == 0 && ((v4 & 7) == 4 || (v4 & 7) == 2))
  {
    if (v2)
    {
      v9 = *(_DWORD *)(v2 + 24);
      *(_DWORD *)(v2 + 24) = v9 + 2;
      v10 = *(_WORD *)(v2 + 28);
      if ((v10 & 1) != 0)
      {
        v17 = *(_QWORD *)(v2 + 80);
        if (v17)
          v3 = *(_DWORD *)(v17 + 4);
        else
          v3 = 0;
      }
      else if ((v10 & 4) != 0 && (v11 = *(_QWORD *)(v2 + 80)) != 0)
      {
        v3 = 0;
        do
        {
          ++v3;
          v11 = *(_QWORD *)(v11 + 56);
        }
        while (v11);
      }
      else
      {
        v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 208))(v2) ^ 1;
        v9 = *(_DWORD *)(v2 + 24) - 2;
      }
      if (v9)
      {
        *(_DWORD *)(v2 + 24) = v9;
      }
      else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
      }
    }
    else
    {
      v3 = 0;
    }
  }
  if ((v7 & 8) == 0 && ((v7 & 7) == 4 || (v7 & 7) == 2))
  {
    if (v5)
    {
      v12 = *(_DWORD *)(v2 + 24);
      *(_DWORD *)(v2 + 24) = v12 + 2;
      v13 = *(_WORD *)(v2 + 28);
      if ((v13 & 1) != 0)
      {
        v18 = *(_QWORD *)(v2 + 80);
        if (v18)
          v6 = *(_DWORD *)(v18 + 4);
        else
          v6 = 0;
      }
      else if ((v13 & 4) != 0 && (v14 = *(_QWORD *)(v2 + 80)) != 0)
      {
        v6 = 0;
        do
        {
          ++v6;
          v14 = *(_QWORD *)(v14 + 56);
        }
        while (v14);
      }
      else
      {
        v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 208))(v2) ^ 1;
        v12 = *(_DWORD *)(v2 + 24) - 2;
      }
      if (v12)
      {
        *(_DWORD *)(v2 + 24) = v12;
      }
      else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
      }
    }
    else
    {
      v6 = 0;
    }
  }
  v15 = v3 == v6 && ((v7 ^ v4) & 7) == 0;
  if (v5)
  {
LABEL_35:
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
LABEL_37:
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return v15;
}

{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  __int128 v8;
  __int128 v9;

  v2 = *a1;
  v3 = *a2;
  if ((*a1 & 0x8000000000000) == 0)
    return (v3 & 0x8000000000000) == 0 && v2 == v3;
  if ((v3 & 0x8000000000000) != 0)
  {
    v9 = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
    v8 = *(_OWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
    result = WebCore::operator==<float,4ul>((float *)&v9, (float *)&v8);
    if (result)
      return HIBYTE(*a1) == HIBYTE(*a2) && BYTE6(*a1) == BYTE6(*a2);
  }
  else
  {
    return 0;
  }
  return result;
}

WTF::StringImpl *WebCore::RenderLayerBacking::ensureClippingStackLayers(WTF::StringImpl *this, WebCore::LayerAncestorClippingStack *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  if (a3)
  {
    v3 = (uint64_t)this;
    v4 = 96 * a3;
    v5 = (_DWORD *)((char *)a2 + 88);
    do
    {
      if (!*((_QWORD *)v5 - 1))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v17 = v18;
        WebCore::RenderLayerBacking::createGraphicsLayer((uint64_t *)&v18, v3, (uint64_t)&v17, 0);
        v8 = v18;
        v18 = 0;
        v9 = (_DWORD *)*((_QWORD *)v5 - 1);
        *((_QWORD *)v5 - 1) = v8;
        if (v9)
        {
          if (v9[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
            v15 = v18;
            v18 = 0;
            if (v15)
            {
              if (*((_DWORD *)v15 + 2) == 1)
                (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v15 + 16))(v15);
              else
                --*((_DWORD *)v15 + 2);
            }
          }
          else
          {
            --v9[2];
            v18 = 0;
          }
        }
        v10 = v17;
        v17 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v7);
          else
            *(_DWORD *)v10 -= 2;
        }
        this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)v5 - 1) + 208))(*((_QWORD *)v5 - 1), 1);
        v11 = (_DWORD *)*((_QWORD *)v5 - 1);
        if (v11[43])
        {
          this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v11 + 320))(*((_QWORD *)v5 - 1));
          v11[43] = 0;
        }
      }
      v6 = *(_QWORD *)v5;
      if (*((_BYTE *)v5 - 32))
      {
        if (!v6)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v17 = v18;
          WebCore::RenderLayerBacking::createGraphicsLayer((uint64_t *)&v18, v3, (uint64_t)&v17, 0);
          v13 = v18;
          v18 = 0;
          v14 = *(_DWORD **)v5;
          *(_QWORD *)v5 = v13;
          if (v14)
          {
            if (v14[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
              v16 = v18;
              v18 = 0;
              if (v16)
              {
                if (*((_DWORD *)v16 + 2) == 1)
                  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v16 + 16))(v16);
                else
                  --*((_DWORD *)v16 + 2);
              }
            }
            else
            {
              --v14[2];
              v18 = 0;
            }
          }
          this = v17;
          v17 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v12);
            else
              *(_DWORD *)this -= 2;
          }
        }
      }
      else if (v6)
      {
        this = (WTF::StringImpl *)WebCore::GraphicsLayer::unparentAndClear(v5);
      }
      v5 += 24;
      v4 -= 96;
    }
    while (v4);
  }
  return this;
}

WTF *WebCore::GraphicsLayerCA::setNeedsDisplay(WTF *this, void *a2)
{
  uint64_t v2;
  WTF *v3;
  float32x2_t v4;
  float32x2_t v5[2];

  if ((*(_WORD *)((_BYTE *)this + 177) & 0x20) != 0)
  {
    v2 = (uint64_t)this;
    *((_BYTE *)this + 890) |= 2u;
    if (*((_DWORD *)this + 216))
    {
      if (*((_DWORD *)this + 217))
        *((_DWORD *)this + 217) = 0;
      v3 = (WTF *)*((_QWORD *)this + 107);
      if (v3)
      {
        *(_QWORD *)(v2 + 856) = 0;
        *(_DWORD *)(v2 + 864) = 0;
        WTF::fastFree(v3, a2);
      }
    }
    WebCore::GraphicsLayerCA::noteLayerPropertyChanged(v2, 0x4000, 0);
    v4 = *(float32x2_t *)(v2 + 88);
    v5[0] = 0;
    v5[1] = v4;
    return WebCore::GraphicsLayer::addRepaintRect((WebCore::GraphicsLayer *)v2, v5);
  }
  return this;
}

void WebCore::RenderLayerCompositor::~RenderLayerCompositor(WebCore::RenderLayerCompositor *this)
{
  _DWORD **v2;
  _DWORD **v3;
  _DWORD **v4;
  _DWORD **v5;
  _DWORD **v6;
  _DWORD **v7;
  _DWORD **v8;
  _DWORD **v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  WTF *v30;
  uint64_t v31;
  WTF **v32;
  WTF *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  _DWORD **v40;
  _DWORD **v41;
  _DWORD **v42;

  v2 = (_DWORD **)((char *)this + 224);
  WebCore::GraphicsLayer::unparentAndClear((_DWORD *)this + 56);
  v3 = (_DWORD **)((char *)this + 232);
  WebCore::GraphicsLayer::unparentAndClear((_DWORD *)this + 58);
  v4 = (_DWORD **)((char *)this + 240);
  WebCore::GraphicsLayer::unparentAndClear((_DWORD *)this + 60);
  v5 = (_DWORD **)((char *)this + 248);
  WebCore::GraphicsLayer::unparentAndClear((_DWORD *)this + 62);
  v6 = (_DWORD **)((char *)this + 256);
  WebCore::GraphicsLayer::unparentAndClear((_DWORD *)this + 64);
  v7 = (_DWORD **)((char *)this + 264);
  WebCore::GraphicsLayer::unparentAndClear((_DWORD *)this + 66);
  v8 = (_DWORD **)((char *)this + 272);
  WebCore::GraphicsLayer::unparentAndClear((_DWORD *)this + 68);
  v9 = (_DWORD **)((char *)this + 280);
  WebCore::GraphicsLayer::unparentAndClear((_DWORD *)this + 70);
  v11 = (WTF *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v11)
    std::default_delete<WebCore::LegacyWebKitScrollingLayerCoordinator>::operator()[abi:sn180100](v11, v10);
  v12 = *((_QWORD *)this + 40);
  if (v12)
  {
    v42 = v2;
    v31 = *(unsigned int *)(v12 - 4);
    if ((_DWORD)v31)
    {
      v32 = (WTF **)*((_QWORD *)this + 40);
      do
      {
        v33 = *v32;
        if (*v32 != (WTF *)-1)
        {
          *v32 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 1)
              WTF::fastFree(v33, v10);
            else
              --*(_DWORD *)v33;
          }
        }
        ++v32;
        --v31;
      }
      while (v31);
    }
    WTF::fastFree((WTF *)(v12 - 16), v10);
    v3 = (_DWORD **)((char *)this + 232);
    v2 = v42;
  }
  v13 = *((_QWORD *)this + 39);
  if (v13)
  {
    v40 = v3;
    v41 = v2;
    v28 = *(unsigned int *)(v13 - 4);
    if ((_DWORD)v28)
    {
      v29 = (WTF **)(v13 + 16);
      do
      {
        if (*(v29 - 1) != (WTF *)-1)
        {
          v30 = *v29;
          *v29 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 1)
              WTF::fastFree(v30, v10);
            else
              --*(_DWORD *)v30;
          }
        }
        v29 += 3;
        --v28;
      }
      while (v28);
    }
    WTF::fastFree((WTF *)(v13 - 16), v10);
    v3 = v40;
    v2 = v41;
  }
  v14 = *((_QWORD *)this + 38);
  if ((v14 & 0x8000000000000) != 0)
  {
    v34 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v34);
      WTF::fastFree((WTF *)v34, v10);
    }
  }
  v15 = *((_QWORD *)this + 37);
  if ((v15 & 0x8000000000000) != 0)
  {
    v37 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
    {
      atomic_store(1u, v37);
      WTF::fastFree((WTF *)v37, v10);
    }
  }
  v16 = *v9;
  *v9 = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
    else
      --v16[2];
  }
  v17 = *v8;
  *v8 = 0;
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 16))(v17);
    else
      --v17[2];
  }
  v18 = *v7;
  *v7 = 0;
  if (v18)
  {
    if (v18[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
    else
      --v18[2];
  }
  v19 = *v6;
  *v6 = 0;
  if (v19)
  {
    if (v19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 16))(v19);
    else
      --v19[2];
  }
  v20 = *v5;
  *v5 = 0;
  if (v20)
  {
    if (v20[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 16))(v20);
    else
      --v20[2];
  }
  v21 = *v4;
  *v4 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
    else
      --v21[2];
  }
  v22 = *v3;
  *v3 = 0;
  if (v22)
  {
    if (v22[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 16))(v22);
    else
      --v22[2];
  }
  v23 = *v2;
  *v2 = 0;
  if (v23)
  {
    if (v23[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
    else
      --v23[2];
  }
  *((_QWORD *)this + 19) = off_1E32051C0;
  v24 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  WTF::RunLoop::TimerBase::~TimerBase((WebCore::RenderLayerCompositor *)((char *)this + 152));
  v25 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  *((_QWORD *)this + 9) = off_1E31F7378;
  v26 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  WebCore::TimerBase::~TimerBase((WebCore::RenderLayerCompositor *)((char *)this + 72));
  *((_QWORD *)this + 2) = off_1E31F7378;
  v27 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  WebCore::TimerBase::~TimerBase((WebCore::RenderLayerCompositor *)((char *)this + 16));
}

{
  WTF *v1;
  void *v2;

  WebCore::RenderLayerCompositor::~RenderLayerCompositor(this);
  WTF::fastFree(v1, v2);
}

_DWORD *WebCore::GraphicsLayer::unparentAndClear(_DWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v1 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v2 = result;
    v3 = *(_QWORD *)(v1 + 200);
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 912))(v3);
      v5 = *(_QWORD *)(v1 + 200);
      if (v5)
      {
        *(_QWORD *)(v1 + 200) = 0;
        v6 = *(unsigned int *)(v5 + 196);
        if ((_DWORD)v6)
        {
          v7 = *(_QWORD **)(v5 + 184);
          v8 = v7 + 1;
          v9 = *(unsigned int *)(v5 + 196);
          while (*v7 != v1)
          {
            ++v7;
            ++v8;
            if (!--v9)
              goto LABEL_4;
          }
          *v7 = 0;
          if (*(_DWORD *)(v1 + 8) == 1)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
            v6 = *(unsigned int *)(v5 + 196);
          }
          else
          {
            --*(_DWORD *)(v1 + 8);
          }
          memmove(v7, v7 + 1, *(_QWORD *)(v5 + 184) + 8 * v6 - (_QWORD)v8);
          --*(_DWORD *)(v5 + 196);
        }
      }
    }
LABEL_4:
    v4 = (_DWORD *)*v2;
    {
      WebCore::EmptyGraphicsLayerClient::singleton(void)::client = (uint64_t)off_1E340CF70;
    }
    *((_QWORD *)v4 + 3) = &WebCore::EmptyGraphicsLayerClient::singleton(void)::client;
    result = (_DWORD *)*v2;
    *v2 = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
      else
        --result[2];
    }
  }
  return result;
}

uint64_t WebCore::GraphicsLayerCA::setMaskLayer(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*a2 != *(_QWORD *)(result + 208))
  {
    v2 = result;
    WebCore::GraphicsLayer::setMaskLayer(result, a2);
    WebCore::GraphicsLayerCA::noteLayerPropertyChanged(v2, 0x100000, 0);
    result = WebCore::GraphicsLayerCA::propagateLayerChangeToReplicas(v2);
    v3 = *(_QWORD *)(v2 + 224);
    if (v3)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 848))(v3) & 1) != 0)
      {
        return WebCore::GraphicsLayerCA::propagateLayerChangeToReplicas(v3);
      }
      else
      {
        result = 96;
        __break(0xC471u);
      }
    }
  }
  return result;
}

uint64_t WebCore::Settings::setBackgroundShouldExtendBeyondPage(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this + 664);
  if (((((v2 & 0x4000000000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 712);
    v5 = *(_QWORD *)(this + 704);
    v6 = *(_QWORD *)(this + 696);
    v7 = *(_QWORD *)(this + 688);
    v8 = *(_QWORD *)(this + 672);
    v9 = 0x4000000000;
    if (!a2)
      v9 = 0;
    *(_QWORD *)(this + 680) = *(_QWORD *)(this + 680);
    *(_QWORD *)(this + 688) = v7;
    *(_QWORD *)(this + 664) = v2 & 0xFFFFFFBFFFFFFFFFLL | v9;
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 696) = v6;
    *(_QWORD *)(this + 704) = v5;
    *(_QWORD *)(this + 712) = v4;
    *(_DWORD *)(this + 720) = v3;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    return WebCore::SettingsBase::backgroundShouldExtendBeyondPageChanged(this);
  }
  return this;
}

BOOL WebCore::MessagePort::virtualHasPendingActivity(WebCore::MessagePort *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  return v1 && *(_QWORD *)(v1 + 8) && !*((_BYTE *)this + 57) && *((_BYTE *)this + 59) && *((_BYTE *)this + 58) != 0;
}

WTF *WebCore::RenderFlexibleBox::layoutFlexItems(WebCore::RenderFlexibleBox *this, const WebCore::RenderFlexibleBox *a2)
{
  WebCore::RenderFlexibleBox *v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int i;
  WTF *v19;
  WebCore::RenderObject *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t *v37;
  unsigned int v38;
  unsigned int v39;
  WTF *v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  int j;
  WTF *v48;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  unsigned __int8 v61;
  uint64_t v62;
  unsigned __int8 v63;
  unsigned int v64;
  char v65;
  int v66;
  unsigned int v68;
  int v69;
  unsigned int v70;
  _QWORD *v71;
  unsigned int v72;
  int v73;
  char v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unsigned int v82;
  int n;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  unsigned int *v88;
  int v89;
  unint64_t v90;
  unsigned int v91;
  int v92;
  uint64_t v93;
  unsigned int v94;
  int v95;
  int v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  int v105;
  unsigned int v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  int v112;
  unsigned int v113;
  int v114;
  int v115;
  uint64_t v116;
  unsigned int *v117;
  int v118;
  unint64_t v119;
  _BOOL4 shouldApplyMinSizeAutoForChild;
  int v121;
  _QWORD *v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  int v127;
  int *v128;
  int v129;
  uint64_t v130;
  void *v131;
  WTF *v132;
  unsigned int v133;
  int v134;
  uint64_t v135;
  int v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unsigned int v140;
  int m;
  uint64_t v142;
  uint64_t v143;
  int v144;
  int v145;
  int v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  WTF *v152;
  int v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  int v167;
  unsigned int v168;
  unsigned int v169;
  unint64_t v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  unint64_t v174;
  uint64_t v175;
  int v176;
  void *v177;
  int v178;
  unint64_t v180;
  WTF *v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  WTF *v185;
  unint64_t v186;
  WTF **v187;
  unint64_t v188;
  uint64_t v189;
  char v190;
  unsigned int v191;
  unsigned int v192;
  double v193;
  unsigned int v194;
  double v195;
  double v196;
  int v197;
  int v198;
  WebCore::RenderFlexibleBox *v199;
  uint64_t v200;
  char v201;
  int v203;
  uint64_t v204;
  char v205;
  int v206;
  int v207;
  _BOOL4 v208;
  int v209;
  _BOOL4 v210;
  int v211;
  int v212;
  WTF *v213;
  int v214;
  int v215;
  unint64_t v216;
  uint64_t v217;
  WTF *v218;
  unsigned int v219;
  unint64_t v220;
  char *v221;
  int v222;
  _QWORD *v223;
  WebCore::RenderFlexibleBox *v224;
  int v225;
  uint64_t v226;
  WTF *v227;
  unint64_t v228;
  uint64_t v229;
  unsigned int v230;
  unint64_t v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  __int128 v235;
  _DWORD *v236;
  int v237;
  int v238;
  unsigned int v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  int v243;
  int v244;
  unsigned int v245;
  uint64_t v246;
  float v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  int v253;
  int v254;
  unsigned int v255;
  char *v256;
  uint64_t v257;
  __int128 v258;
  WTF *v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  int v264;
  uint64_t v265;
  unint64_t v266;
  char *v267;
  int v268;
  _QWORD *v269;
  uint64_t v270;
  WTF *v271;
  uint64_t *v272;
  uint64_t *v273;
  uint64_t v274;
  unsigned int v275;
  int v276;
  int v277;
  int v278;
  int v279;
  uint64_t v280;
  float v281;
  int v282;
  double v283;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  int v288;
  unsigned int v289;
  BOOL v290;
  int v293;
  char *v294;
  uint64_t v295;
  int v296;
  double v297;
  float v298;
  float v299;
  double v300;
  int v301;
  int v302;
  int v303;
  int v304;
  int v305;
  unsigned int v306;
  int v307;
  int v308;
  float v309;
  int v310;
  WTF *v311;
  int *v312;
  uint64_t v313;
  unsigned int v314;
  int v315;
  unsigned int v316;
  unsigned int v317;
  int v318;
  int v319;
  int v320;
  int v321;
  unint64_t v322;
  uint64_t v323;
  unsigned int v324;
  uint64_t v325;
  unsigned int v326;
  int v327;
  uint64_t v328;
  unsigned int v329;
  char v330;
  uint64_t v331;
  int v332;
  unsigned int v333;
  int v334;
  const WebCore::RenderStyle *v335;
  unsigned int v336;
  uint64_t v337;
  uint64_t v338;
  char v339;
  uint64_t v340;
  uint64_t v341;
  unsigned int v342;
  int v343;
  char v344;
  uint64_t v345;
  int v346;
  unsigned int v347;
  int v348;
  WTF *v349;
  char *v350;
  uint64_t v351;
  int *v352;
  unsigned int v353;
  unsigned int v354;
  uint64_t v355;
  unsigned int v356;
  int v357;
  unsigned int v358;
  int v359;
  unsigned int v360;
  int v361;
  int v362;
  int v363;
  _QWORD *v364;
  int v365;
  unsigned int v366;
  int v367;
  unsigned int v368;
  int v369;
  unsigned int v370;
  int v371;
  unsigned int v372;
  int v373;
  int v374;
  int v375;
  unsigned int v376;
  int v377;
  unsigned int v378;
  unsigned int v379;
  int v380;
  int v381;
  int v382;
  void *v383;
  unsigned int v384;
  int v385;
  uint64_t v386;
  _BYTE *v387;
  uint64_t v388;
  uint64_t v389;
  int v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t v393;
  unsigned int v394;
  int ii;
  uint64_t v396;
  WebCore::RenderBlock *v398;
  WebCore::RenderObject *v399;
  uint64_t v400;
  int v401;
  int v402;
  int v403;
  uint64_t v404;
  uint64_t v405;
  int v406;
  uint64_t v407;
  uint64_t v408;
  int v409;
  WTF *v410;
  unsigned int v411;
  int v412;
  unsigned int v413;
  unsigned int v414;
  int v415;
  int v416;
  int v417;
  int v418;
  _QWORD *v419;
  uint64_t v420;
  char v421;
  char v422;
  unsigned int v423;
  int v424;
  char v425;
  int v426;
  unsigned int v427;
  int v428;
  int v429;
  unsigned int v430;
  uint64_t v431;
  unsigned __int8 *v432;
  int v433;
  uint64_t v434;
  void *v435;
  void *v436;
  unsigned int v437;
  unsigned int v438;
  int v439;
  int v440;
  int v441;
  char v442;
  unsigned int v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  int v447;
  unsigned int *v448;
  int v449;
  int v450;
  unsigned int v451;
  unsigned int v452;
  unint64_t v453;
  uint64_t v454;
  int v455;
  unsigned int v456;
  unsigned int v457;
  uint64_t v458;
  int v459;
  unsigned int v460;
  int v461;
  uint64_t v462;
  uint64_t v463;
  int v464;
  uint64_t v465;
  char v466;
  uint64_t v467;
  uint64_t v468;
  unsigned int v469;
  unint64_t v470;
  _QWORD *v471;
  uint64_t v472;
  int v473;
  uint64_t v474;
  unint64_t v475;
  char v476;
  uint64_t v477;
  int v478;
  unsigned int v479;
  unsigned int v480;
  _QWORD *v481;
  unsigned int v482;
  _QWORD *v483;
  uint64_t v484;
  int v485;
  unsigned int v486;
  unsigned int v487;
  unsigned int v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  int v492;
  uint64_t v493;
  unsigned int v494;
  uint64_t v495;
  WTF *v496;
  char *v497;
  uint64_t *v498;
  _QWORD *v499;
  uint64_t *v500;
  char *v501;
  uint64_t v502;
  uint64_t v503;
  char *v504;
  char v505;
  int v506;
  uint64_t v507;
  WTF *v508;
  WTF *v509;
  uint64_t v510;
  __int128 v511;
  unsigned int v512;
  unint64_t v513;
  WTF *v514;
  char *v515;
  _QWORD *v516;
  _BYTE *v517;
  uint64_t v518;
  int v519;
  char *v520;
  int v521;
  char *v522;
  uint64_t v523;
  WTF *v524;
  WTF *v525;
  uint64_t v526;
  uint64_t v527;
  WTF **v528;
  WTF *v529;
  int v530;
  WTF *v531;
  WTF *v532;
  uint64_t v533;
  uint64_t v534;
  WTF **v535;
  WTF *v536;
  unsigned int v537;
  uint64_t v538;
  int v539;
  unsigned int v540;
  uint64_t (**v541)(WebCore::RenderFlexibleBox *);
  int v542;
  unsigned int v543;
  unsigned int v544;
  uint64_t (**v545)(WebCore::RenderFlexibleBox *);
  int v546;
  unsigned int v547;
  uint64_t v548;
  int v549;
  unsigned int v550;
  int v551;
  uint64_t v552;
  unsigned int v553;
  _QWORD *v554;
  unsigned int v555;
  _QWORD *v556;
  int v557;
  unsigned int v558;
  unsigned int v559;
  unsigned int v560;
  int v561;
  int v562;
  BOOL v563;
  unsigned int v564;
  int v565;
  unsigned int v566;
  int v567;
  int v568;
  int v569;
  int v570;
  char v571;
  BOOL v572;
  int v573;
  uint64_t v574;
  uint64_t v575;
  int v576;
  int v577;
  _BOOL4 v578;
  _BOOL4 v579;
  int v580;
  _QWORD *v581;
  WTF *v582;
  unsigned int v583;
  _QWORD *v584;
  uint64_t v585;
  int v586;
  uint64_t v587;
  unsigned int v588;
  unsigned int v589;
  _QWORD *v591;
  uint64_t v592;
  int v593;
  uint64_t v594;
  unsigned int v595;
  unsigned int v596;
  unsigned int v598;
  _QWORD *v599;
  unsigned int v600;
  _QWORD *v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  unsigned int v605;
  unsigned int v606;
  unsigned int *v607;
  int v608;
  unsigned __int8 v609;
  unsigned int v610;
  char v611;
  unint64_t v612;
  int v613;
  char v614;
  unsigned int *v615;
  unsigned int *v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t *v619;
  uint64_t v620;
  int v621;
  unint64_t v622;
  unint64_t v623;
  unint64_t v624;
  unsigned int v625;
  int jj;
  uint64_t v627;
  unsigned int v629;
  unint64_t v630;
  int v631;
  unsigned int v632;
  int v633;
  void *v634;
  WTF *v635;
  unsigned int v636;
  _BYTE *v637;
  _BYTE *v638;
  int v639;
  unsigned int *v640;
  void *v641;
  unsigned int *v642;
  _BYTE *v643;
  _BYTE *v644;
  int v645;
  WTF *v646;
  char *v647;
  _QWORD *v648;
  _BYTE *v649;
  uint64_t v650;
  int v651;
  char *v652;
  int v653;
  char *v654;
  uint64_t v655;
  _QWORD *v656;
  unsigned int v657;
  int v658;
  uint64_t v659;
  uint64_t v660;
  __int16 v661;
  unsigned __int16 *v662;
  unsigned __int8 v663;
  unint64_t v664;
  uint64_t v665;
  uint64_t v666;
  _QWORD *v667;
  WebCore::RenderObject *v668;
  WebCore::RenderObject *v669;
  BOOL v670;
  WTF *v671;
  uint64_t *v672;
  uint64_t *v673;
  uint64_t v674;
  unsigned int v675;
  int v676;
  int v677;
  int v678;
  int v679;
  uint64_t v680;
  float v681;
  unsigned int v682;
  int v683;
  uint64_t v684;
  int v685;
  int v686;
  int v687;
  _BOOL4 v688;
  uint64_t v689;
  _BYTE *v690;
  int v691;
  unsigned int v692;
  int *v693;
  int v694;
  unsigned int v695;
  int v696;
  int v697;
  unint64_t CompatibleSharedGroup;
  void *v699;
  int v700;
  WTF *v701;
  WTF *v702;
  uint64_t v703;
  uint64_t v704;
  WTF **v705;
  WTF *v706;
  int v707;
  unsigned int v708;
  unsigned int v709;
  int v710;
  unsigned int v711;
  unsigned int v712;
  int v713;
  int v714;
  int v715;
  unsigned int v716;
  uint64_t v717;
  int v718;
  unsigned int v719;
  int v720;
  int v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  WebCore::InspectorDOMAgent *v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  int v730;
  int v731;
  unint64_t v732;
  unint64_t v733;
  unint64_t v734;
  unsigned int v735;
  int k;
  uint64_t v737;
  uint64_t v738;
  BOOL isContainingBlockAncestorFor;
  WebCore::RenderObject **v740;
  uint64_t v741;
  int v742;
  uint64_t v743;
  WTF *result;
  double v745;
  int v746;
  unsigned int v747;
  unsigned int v748;
  char *v749;
  int v750;
  unint64_t v751;
  uint64_t v752;
  uint64_t v753;
  WTF *v754;
  uint64_t v755;
  uint64_t v756;
  int v757;
  unint64_t v758;
  unsigned int v759;
  unint64_t v760;
  unsigned int v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  unsigned int v766;
  const WebCore::RenderBox **v767;
  const WebCore::RenderBox *v768;
  char v769;
  const WebCore::RenderBox *v770;
  char v771;
  char v772;
  unsigned int v773;
  int v774;
  unsigned int v775;
  uint64_t v776;
  unsigned int v777;
  int v778;
  unsigned int v779;
  int v780;
  int *v781;
  int v782;
  int v783;
  int v784;
  int v785;
  uint64_t v786;
  unsigned int *v787;
  int v788;
  unint64_t v789;
  uint64_t v790;
  unsigned int *v791;
  unsigned int v792;
  int v793;
  unint64_t v794;
  uint64_t v795;
  int v796;
  unsigned int v797;
  char v798;
  char v799;
  int v800;
  int v801;
  unsigned int v802;
  int v803;
  uint64_t v804;
  int v805;
  int v806;
  uint64_t v807;
  uint64_t v808;
  int v809;
  int v810;
  int v811;
  int v812;
  int v813;
  _DWORD *v814;
  const WebCore::RenderBox *v815;
  unsigned int v816;
  int v817;
  BOOL v818;
  unsigned int v819;
  int v820;
  unsigned int v821;
  int v822;
  int *v823;
  int v824;
  int v825;
  int v826;
  unint64_t v827;
  const WebCore::RenderBox *v828;
  uint64_t v829;
  unint64_t v830;
  uint64_t v831;
  uint64_t v832;
  unsigned int v833;
  int v834;
  unsigned int v835;
  unsigned int v836;
  int v837;
  int v838;
  unint64_t v839;
  int v840;
  int v841;
  unsigned int v842;
  void *v843;
  int v844;
  int *v845;
  int v846;
  _QWORD *v847;
  const WebCore::RenderBox ***v848;
  WTF ***v849;
  WTF **v850;
  uint64_t v851;
  WTF **v852;
  WTF *v853;
  WTF *v854;
  uint64_t v855;
  uint64_t v856;
  int v857;
  WTF *v858;
  WTF *v859;
  uint64_t v860;
  uint64_t v861;
  int v862;
  WTF *v863;
  WTF *v864;
  WTF *v865;
  uint64_t v866;
  uint64_t *v867;
  uint64_t v868;
  uint64_t v869;
  int v870;
  unsigned int v871;
  WTF *v872;
  WTF *v873;
  uint64_t v874;
  uint64_t v875;
  WTF **v876;
  WTF *v877;
  unsigned int v878;
  int v879;
  int v880;
  int v881;
  BOOL v882;
  BOOL v883;
  unsigned int v885;
  unint64_t v886;
  uint64_t v887;
  uint64_t v888;
  int *v889;
  uint64_t v890;
  int v891;
  unsigned int v892;
  unsigned int v893;
  uint64_t v894;
  int *v895;
  int v896;
  char *v897;
  uint64_t v898;
  unint64_t v899;
  char *v900;
  uint64_t v901;
  int v902;
  uint64_t v903;
  unint64_t v904;
  unint64_t v905;
  int v906;
  unsigned int v907;
  int v908;
  uint64_t v909;
  uint64_t v910;
  int v911;
  char v912;
  uint64_t v913;
  unsigned int v914;
  uint64_t v915;
  unint64_t v916;
  uint64_t v917;
  uint64_t v918;
  int v919;
  unint64_t v920;
  unint64_t v921;
  unint64_t v922;
  unsigned int v923;
  int kk;
  uint64_t v925;
  _QWORD *v927;
  char v928;
  int v929;
  int v930;
  uint64_t v931;
  uint64_t v932;
  unsigned int *v933;
  unsigned int v934;
  unint64_t v935;
  uint64_t v936;
  int v937;
  int *v938;
  unint64_t v939;
  int v940;
  unsigned int v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  int v950;
  unint64_t v951;
  int v952;
  unint64_t v953;
  int v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  int v958;
  unsigned int v959;
  int v960;
  unsigned int v961;
  unint64_t v962;
  char v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  unsigned int v970;
  int v971;
  uint64_t v972;
  int v973;
  int v974;
  unsigned int v975;
  unint64_t v976;
  char v977;
  int v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  unsigned int v984;
  int v985;
  unsigned int v986;
  unsigned int v987;
  int v988;
  WTF::StringImpl *v989;
  int v990;
  unsigned int v991;
  char *LineStyle;
  void *v993;
  float v994;
  int v995;
  unsigned int v996;
  uint64_t v997;
  int v998;
  unsigned int v999;
  int v1000;
  uint64_t v1001;
  unsigned int v1002;
  int v1003;
  int v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  _BYTE *v1008;
  WTF *v1009;
  unsigned int v1010;
  unint64_t v1011;
  uint64_t v1012;
  char *v1013;
  int *v1014;
  unsigned int v1015;
  int v1016;
  int v1017;
  int v1018;
  int v1019;
  int v1020;
  int v1021;
  unint64_t v1022;
  unint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  char *v1026;
  uint64_t v1027;
  unint64_t v1028;
  char *v1029;
  uint64_t v1030;
  uint64_t v1031;
  int v1032;
  uint64_t v1033;
  int *v1034;
  int v1035;
  unsigned int v1036;
  unsigned int v1037;
  int v1038;
  unsigned int v1039;
  int v1040;
  int v1041;
  unsigned int v1042;
  uint64_t v1043;
  unint64_t v1044;
  uint64_t v1045;
  signed int v1046;
  uint64_t v1047;
  unint64_t v1048;
  int v1049;
  unsigned int v1050;
  int v1051;
  int v1052;
  BOOL v1053;
  unsigned int v1054;
  unint64_t v1055;
  uint64_t v1056;
  int v1057;
  int v1058;
  int v1059;
  int v1060;
  unint64_t v1061;
  int v1062;
  int v1063;
  unsigned int v1064;
  int v1065;
  int v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  unsigned int v1071;
  int v1072;
  unsigned int v1073;
  int v1074;
  unsigned int v1075;
  int v1076;
  unsigned int v1077;
  unsigned int v1078;
  int v1079;
  uint64_t v1080;
  unsigned int v1081;
  int v1082;
  uint64_t v1083;
  __int16 v1084;
  int isLeftToRightFlow;
  WebCore::LayoutIntegration::FlexLayout *v1086;
  int v1087;
  WebCore::LayoutIntegration::FlexLayout *v1088;
  uint64_t v1089;
  unint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  int v1093;
  unsigned int v1094;
  unsigned int v1095;
  int v1096;
  unsigned int *v1097;
  int v1098;
  unsigned int *v1099;
  char v1100;
  int v1101;
  unsigned int *v1102;
  int v1103;
  char v1104;
  int isFlippedLinesWritingMode;
  BOOL v1106;
  WebCore::RenderObject *v1107;
  int v1108;
  _BOOL4 v1109;
  uint64_t v1110;
  int v1111;
  int v1112;
  int v1113;
  uint64_t v1114;
  unsigned int v1115;
  int *v1116;
  uint64_t v1117;
  unsigned int v1118;
  int v1119;
  WTF *v1120;
  int v1121;
  uint64_t v1122;
  int v1123;
  int v1124;
  WebCore::RenderStyle *v1125;
  WebCore::RenderBlock *v1126;
  WTF *v1127;
  uint64_t *v1128;
  char v1129;
  uint64_t v1130;
  int *v1131;
  unsigned int v1132;
  unsigned int v1133;
  int v1134;
  int v1135;
  uint64_t *v1136;
  int v1137;
  int v1138;
  int v1139;
  unint64_t v1140;
  unint64_t v1141;
  unint64_t v1142;
  int v1143;
  unint64_t v1144;
  int v1145;
  unsigned int v1146;
  unint64_t v1147;
  unsigned int v1148;
  unsigned int v1149;
  WTF *v1150;
  int v1151;
  WTF *v1152;
  uint64_t v1153;
  int v1154;
  unsigned int v1155;
  const WebCore::RenderBox ***v1156;
  uint64_t v1157;
  WTF *v1158;
  uint64_t v1159;
  WebCore::RenderFlexibleBox *v1160;
  int v1161;
  WTF **v1162;
  int v1163;
  unsigned int v1164;
  WTF *v1165;
  uint64_t v1166;
  unint64_t v1167;
  WTF *v1168;
  uint64_t v1169;
  unsigned int v1170;
  __int16 v1171;
  char v1172;
  unsigned int v1173;
  __int16 v1174;
  char v1175;
  WTF *v1176;
  _BYTE v1177[32];
  unsigned int v1178;
  int v1179;
  char *v1180;
  uint64_t v1181;
  unsigned __int8 v1182;
  uint64_t v1183;
  uint64_t v1184;
  char v1185;

  v1151 = (int)a2;
  v2 = this;
  if (WebCore::LayoutIntegration::canUseForFlexLayout(this, a2))
    return (WTF *)WebCore::RenderFlexibleBox::layoutUsingFlexFormattingContext((WebCore::LayoutIntegration::FlexLayout **)v2);
  v1168 = 0;
  v1169 = 0;
  v1166 = 0;
  v1167 = 0;
  v1165 = 0;
  WebCore::OrderIterator::first((WebCore::RenderFlexibleBox *)((char *)v2 + 232));
  v4 = *((_QWORD *)v2 + 30);
  v1126 = v2;
  if (v4)
  {
    v1131 = (int *)&v1177[20];
    v5 = (_QWORD *)((char *)v2 + 256);
    v1136 = (uint64_t *)((char *)v2 + 200);
    v1141 = (unint64_t)v2 + 256;
LABEL_4:
    v6 = *(_DWORD *)(v4 + 20);
    v7 = (v6 & 0x1800000) != 0x1000000 && (*(_DWORD *)(v4 + 20) & 0x400) == 0;
    if (!v7)
    {
      if ((v6 & 0x1800000) != 0x1000000)
        goto LABEL_319;
      v21 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v4);
      if (WebCore::gOverridingContainingBlockContentLogicalWidthMap)
        WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalWidthMap, (_QWORD *)v4);
      if (WebCore::gOverridingContainingBlockContentLogicalHeightMap)
        WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalHeightMap, (_QWORD *)v4);
      if ((*(_BYTE *)(v4 + 52) & 7) != 1 || (*(_BYTE *)(v4 + 53) & 2) == 0)
      {
        if ((*(_BYTE *)(v4 + 20) & 0xF8) != 0)
          *((_DWORD *)v21 + 5) |= 0x40u;
        {
          WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
          unk_1ECE91358 = 0u;
        }
        WebCore::PositionedDescendantsMap::addDescendant((WebCore::PositionedDescendantsMap *)&WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants, v21, (WebCore::RenderBox *)v4);
      }
      v22 = *(_QWORD *)(v4 + 144);
      v23 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
      if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
      {
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
        {
          v2 = v1126;
          v7 = ((v23 & 3) == 1) == ((*((_BYTE *)v1126 + 123) & 4) == 0);
          v24 = 125;
          if (v7)
            v24 = 126;
          v5 = (_QWORD *)v1141;
LABEL_38:
          v25 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)v2 + 8 * v24))(v2);
          v26 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
          if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
          {
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
            {
              v2 = v1126;
              v7 = ((v26 & 3) == 1) == ((*((_BYTE *)v1126 + 123) & 4) == 0);
              v27 = 116;
              if (v7)
                v27 = 117;
              v5 = (_QWORD *)v1141;
LABEL_42:
              v28 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)v2 + 8 * v27))(v2);
              v29 = v25 + v28;
              if (__OFADD__(v25, v28))
                v29 = (v25 >> 31) + 0x7FFFFFFF;
              if (*(_DWORD *)(v22 + 148) != v29)
              {
                *(_DWORD *)(v22 + 148) = v29;
                v637 = *(_BYTE **)(*(_QWORD *)(v4 + 88) + 24);
                if (((*((_DWORD *)v2 + 31) >> 13) & 6u) - 2 < 4)
                {
                  if (v637[12])
                    goto LABEL_45;
                  v638 = v637 + 28;
                }
                else
                {
                  if (v637[36])
                    goto LABEL_45;
                  v638 = v637 + 20;
                }
                if (!*v638)
                {
                  v639 = *(_DWORD *)(v4 + 20);
                  if ((v639 & 0x20) == 0)
                    *(_DWORD *)(v4 + 20) = v639 | 0x20;
                }
              }
LABEL_45:
              v30 = (unsigned __int16)*((_DWORD *)v2 + 31) >> 13;
              v31 = 0x30203020100uLL >> (8 * v30);
              if (v30 > 5)
                LOBYTE(v31) = 0;
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
              {
                v605 = *((_DWORD *)v2 + 30);
                if (v30 > 5 || ((3u >> v30) & 1) != 0)
                {
                  v602 = 127;
                  if ((v605 & 0x4000000) != 0)
                    v602 = 128;
LABEL_50:
                  v32 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)v2 + 8 * v602))(v2);
                  v33 = (unsigned __int16)*((_DWORD *)v2 + 31) >> 13;
                  v34 = 0x30203020100uLL >> (8 * v33);
                  if (v33 > 5)
                    LOBYTE(v34) = 0;
                  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
                  {
                    v606 = *((_DWORD *)v2 + 30);
                    if (v33 > 5 || ((3u >> v33) & 1) != 0)
                    {
                      v603 = 118;
                      if ((v606 & 0x4000000) != 0)
                        v603 = 119;
LABEL_55:
                      v35 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)v2 + 8 * v603))(v2);
                      v36 = v32 + v35;
                      if (__OFADD__(v32, v35))
                        v36 = (v32 >> 31) + 0x7FFFFFFF;
                      if (*(_DWORD *)(v22 + 152) != v36)
                      {
                        *(_DWORD *)(v22 + 152) = v36;
                        v643 = *(_BYTE **)(*(_QWORD *)(v4 + 88) + 24);
                        if (((*((_DWORD *)v2 + 31) >> 13) & 6u) - 2 < 4)
                        {
                          if (v643[36])
                            goto LABEL_319;
                          v644 = v643 + 20;
                        }
                        else
                        {
                          if (v643[12])
                            goto LABEL_319;
                          v644 = v643 + 28;
                        }
                        if (!*v644)
                        {
                          v645 = *(_DWORD *)(v4 + 20);
                          if ((v645 & 0x20) == 0)
                            *(_DWORD *)(v4 + 20) = v645 | 0x20;
                        }
                      }
LABEL_319:
                      v4 = *((_QWORD *)v2 + 30);
                      if (v4)
                      {
                        while (1)
                        {
                          if (*((_BYTE *)v2 + 281))
                          {
                            v159 = *(unsigned __int8 *)(v4 + 44);
                            v160 = *(unsigned int *)(v4 + 40);
                          }
                          else
                          {
                            v159 = *(unsigned __int8 *)(v4 + 51);
                            v160 = *(unsigned int *)(v4 + 47);
                          }
                          v161 = v160 | (v159 << 32);
                          if (!v161)
                            break;
LABEL_334:
                          v4 = *(_QWORD *)(v161 + 8);
                          if (!v4 || (*(_BYTE *)(v4 + 45) & 4) == 0)
                            break;
                          *((_QWORD *)v2 + 30) = v4;
                          if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 32) + 144) == *(_DWORD *)(*((_QWORD *)v2 + 34) + 28))
                            goto LABEL_4;
LABEL_330:
                          if (!v4)
                            goto LABEL_337;
                        }
LABEL_336:
                        v4 = 0;
                        *((_QWORD *)v2 + 30) = 0;
                        goto LABEL_330;
                      }
LABEL_337:
                      v156 = (_QWORD *)*((_QWORD *)v2 + 34);
                      if (v156 != v5)
                      {
                        if (*((_BYTE *)v2 + 280))
                        {
                          *((_BYTE *)v2 + 280) = 0;
                          goto LABEL_340;
                        }
                        v154 = (_QWORD *)v156[1];
                        if (v154)
                        {
                          do
                          {
                            v155 = v154;
                            v154 = (_QWORD *)*v154;
                          }
                          while (v154);
                        }
                        else
                        {
                          do
                          {
                            v155 = (_QWORD *)v156[2];
                            v7 = *v155 == (_QWORD)v156;
                            v156 = v155;
                          }
                          while (!v7);
                        }
                        *((_QWORD *)v2 + 34) = v155;
                        if (v155 != v5)
                        {
LABEL_340:
                          v162 = *((_QWORD *)v2 + 29);
                          if (*((_BYTE *)v2 + 281))
                          {
                            v157 = *(unsigned __int8 *)(v162 + 75);
                            v158 = *(unsigned int *)(v162 + 71);
                          }
                          else
                          {
                            v157 = *(unsigned __int8 *)(v162 + 68);
                            v158 = *(unsigned int *)(v162 + 64);
                          }
                          v161 = v158 | (v157 << 32);
                          if (v161)
                            goto LABEL_334;
                          goto LABEL_336;
                        }
                      }
                      goto LABEL_347;
                    }
                    LODWORD(v34) = (v606 >> 26) & 1;
                  }
                  if ((v34 - 1) > 2u)
                    v603 = 116;
                  else
                    v603 = (v34 - 1) + 117;
                  goto LABEL_55;
                }
                LODWORD(v31) = (v605 >> 26) & 1;
              }
              if ((v31 - 1) > 2u)
                v602 = 125;
              else
                v602 = (v31 - 1) + 126;
              goto LABEL_50;
            }
            v600 = ((unsigned __int16)*((_DWORD *)v1126 + 31) >> 13) - 1;
            if (v600 >= 5)
            {
              v27 = 118;
              v5 = (_QWORD *)v1141;
              v2 = v1126;
              goto LABEL_42;
            }
            v601 = &unk_1969FC8E0;
            v5 = (_QWORD *)v1141;
            v2 = v1126;
          }
          else
          {
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
            {
              v7 = ((v26 & 3) == 1) == ((*((_BYTE *)v2 + 123) & 4) == 0);
              v27 = 118;
              if (v7)
                v27 = 119;
              goto LABEL_42;
            }
            v600 = ((unsigned __int16)*((_DWORD *)v2 + 31) >> 13) - 1;
            if (v600 >= 5)
            {
              v27 = 116;
              goto LABEL_42;
            }
            v601 = &unk_1969FC908;
          }
          v27 = v601[v600];
          goto LABEL_42;
        }
        v598 = ((unsigned __int16)*((_DWORD *)v1126 + 31) >> 13) - 1;
        if (v598 >= 5)
        {
          v24 = 127;
          v5 = (_QWORD *)v1141;
          v2 = v1126;
          goto LABEL_38;
        }
        v599 = &unk_1969FC890;
        v5 = (_QWORD *)v1141;
        v2 = v1126;
      }
      else
      {
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
        {
          v7 = ((v23 & 3) == 1) == ((*((_BYTE *)v2 + 123) & 4) == 0);
          v24 = 127;
          if (v7)
            v24 = 128;
          goto LABEL_38;
        }
        v598 = ((unsigned __int16)*((_DWORD *)v2 + 31) >> 13) - 1;
        if (v598 >= 5)
        {
          v24 = 125;
          goto LABEL_38;
        }
        v599 = &unk_1969FC8B8;
      }
      v24 = v599[v598];
      goto LABEL_38;
    }
    v8 = (uint64_t *)WebCore::gOverridingLogicalHeightMap;
    if (WebCore::gOverridingLogicalHeightMap)
    {
      v9 = *(_DWORD *)(WebCore::gOverridingLogicalHeightMap + 8);
      v10 = *(_DWORD *)(WebCore::gOverridingLogicalHeightMap + 12);
      *(_DWORD *)(WebCore::gOverridingLogicalHeightMap + 8) = v9 + 1;
      if (v9 > v10)
        WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::removeNullReferences((uint64_t)v8, v3);
      v11 = *(WTF **)(v4 + 8);
      if (v11)
      {
        if (*((_QWORD *)v11 + 1))
        {
          v12 = *v8;
          if (*v8)
          {
            v13 = *(_DWORD *)(v12 - 8);
            v14 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
            v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
            v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
            v17 = v13 & ((v16 >> 31) ^ v16);
            for (i = 1; ; ++i)
            {
              v19 = *(WTF **)(v12 + 16 * v17);
              if (!v19)
                break;
              if (v19 != (WTF *)-1 && v19 == v11)
              {
                if (v17 != *(_DWORD *)(v12 - 4))
                {
                  v591 = (_QWORD *)(v12 + 16 * v17);
                  *v591 = 0;
                  if (*(_DWORD *)v11 == 1)
                    WTF::fastFree(v11, v3);
                  else
                    --*(_DWORD *)v11;
                  *v591 = -1;
                  ++*(_DWORD *)(*v8 - 16);
                  v592 = *v8;
                  v593 = *v8 ? *(_DWORD *)(v592 - 12) - 1 : -1;
                  *(_DWORD *)(v592 - 12) = v593;
                  v594 = *v8;
                  if (*v8)
                  {
                    v595 = 6 * *(_DWORD *)(v594 - 12);
                    v596 = *(_DWORD *)(v594 - 4);
                    if (v595 < v596 && v596 >= 9)
                      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v8, v596 >> 1, 0);
                  }
                }
                break;
              }
              v17 = (v17 + i) & v13;
            }
          }
        }
      }
    }
    v37 = (uint64_t *)WebCore::gOverridingLogicalWidthMap;
    if (WebCore::gOverridingLogicalWidthMap)
    {
      v38 = *(_DWORD *)(WebCore::gOverridingLogicalWidthMap + 8);
      v39 = *(_DWORD *)(WebCore::gOverridingLogicalWidthMap + 12);
      *(_DWORD *)(WebCore::gOverridingLogicalWidthMap + 8) = v38 + 1;
      if (v38 > v39)
        WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::removeNullReferences((uint64_t)v37, v3);
      v40 = *(WTF **)(v4 + 8);
      if (v40)
      {
        if (*((_QWORD *)v40 + 1))
        {
          v41 = *v37;
          if (*v37)
          {
            v42 = *(_DWORD *)(v41 - 8);
            v43 = ((unint64_t)v40 + ~((_QWORD)v40 << 32)) ^ (((unint64_t)v40 + ~((_QWORD)v40 << 32)) >> 22);
            v44 = 9 * ((v43 + ~(v43 << 13)) ^ ((v43 + ~(v43 << 13)) >> 8));
            v45 = (v44 ^ (v44 >> 15)) + ~((v44 ^ (v44 >> 15)) << 27);
            v46 = v42 & ((v45 >> 31) ^ v45);
            for (j = 1; ; ++j)
            {
              v48 = *(WTF **)(v41 + 16 * v46);
              if (!v48)
                break;
              if (v48 != (WTF *)-1 && v48 == v40)
              {
                if (v46 != *(_DWORD *)(v41 - 4))
                {
                  v584 = (_QWORD *)(v41 + 16 * v46);
                  *v584 = 0;
                  if (*(_DWORD *)v40 == 1)
                    WTF::fastFree(v40, v3);
                  else
                    --*(_DWORD *)v40;
                  *v584 = -1;
                  ++*(_DWORD *)(*v37 - 16);
                  v585 = *v37;
                  v586 = *v37 ? *(_DWORD *)(v585 - 12) - 1 : -1;
                  *(_DWORD *)(v585 - 12) = v586;
                  v587 = *v37;
                  if (*v37)
                  {
                    v588 = 6 * *(_DWORD *)(v587 - 12);
                    v589 = *(_DWORD *)(v587 - 4);
                    if (v588 < v589 && v589 >= 9)
                      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v37, v589 >> 1, 0);
                  }
                }
                break;
              }
              v46 = (v46 + j) & v42;
            }
          }
        }
      }
    }
    if (*(char *)(v4 + 45) < 0)
    {
      v50 = *(_DWORD *)(v4 + 16);
      *(_BYTE *)(v4 + 392) = 2;
      *(_DWORD *)(v4 + 16) = v50 + 1;
      if (v50 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x1943C36D8);
      }
      *(_DWORD *)(v4 + 16) = v50;
    }
    v51 = v6 & 0x200;
    if (v51)
    {
      if ((*(_DWORD *)(v4 + 20) & 0x4800) == 0x4000 && (*(_DWORD *)(v4 + 20) & 0x1800000) != 0x1000000)
      {
        v731 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
        v732 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
        v733 = 9 * ((v732 + ~(v732 << 13)) ^ ((v732 + ~(v732 << 13)) >> 8));
        v734 = (v733 ^ (v733 >> 15)) + ~((v733 ^ (v733 >> 15)) << 27);
        v735 = v731 & ((v734 >> 31) ^ v734);
        for (k = 1; ; ++k)
        {
          v737 = v735;
          v738 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v735);
          if (v738 != -1 && *(_QWORD *)(v738 + 8) == v4)
            break;
          v735 = (v737 + k) & v731;
        }
        if (*(_BYTE *)(*(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v737 + 8) + 2))
          WebCore::RenderBox::clearTrimmedMarginsMarkings((WebCore::RenderBox *)v4, v3);
      }
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 1520))(v4))
      WebCore::RenderObject::setPreferredLogicalWidthsDirty(v4, 1, 0);
    v1146 = v51;
    if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
    {
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
        goto LABEL_82;
    }
    else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
    {
LABEL_82:
      v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1000))(v4);
      v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1008))(v4);
      v54 = v52 + v53;
      if (__OFADD__(v52, v53))
        v54 = (v52 >> 31) + 0x7FFFFFFF;
      v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 928))(v4);
      v56 = v54 + v55;
      if (__OFADD__(v54, v55))
        v56 = (v54 >> 31) + 0x7FFFFFFF;
      v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 936))(v4);
      v58 = v56 + v57;
      if (__OFADD__(v56, v57))
        v58 = (v56 >> 31) + 0x7FFFFFFF;
      goto LABEL_88;
    }
    v58 = WebCore::RenderBoxModelObject::horizontalBorderAndPaddingExtent((WebCore::RenderBoxModelObject *)v4);
LABEL_88:
    v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 32) + 16);
    LODWORD(v1158) = 0;
    BYTE4(v1158) = *(_BYTE *)(v59 + 16);
    v60 = BYTE4(v1158);
    v61 = *(_BYTE *)(v59 + 17);
    *(_WORD *)((char *)&v1158 + 5) = v61;
    v1154 = v58;
    if (BYTE4(v1158) > 0xDu)
      goto LABEL_110;
    if (((1 << SBYTE4(v1158)) & 0x7FC) != 0)
    {
      BYTE6(v1158) = *(_BYTE *)(v59 + 18);
      LODWORD(v1158) = *(_DWORD *)(v59 + 12);
      goto LABEL_112;
    }
    if (((1 << SBYTE4(v1158)) & 0x3003) == 0)
    {
      LODWORD(v1158) = *(_DWORD *)(v59 + 12);
      WebCore::Length::ref((int *)&v1158);
      v60 = BYTE4(v1158);
    }
    if (v60)
    {
LABEL_110:
      if (v60 == 12)
      {
        v1173 = 0;
        v1174 = 8;
        v1175 = 0;
        goto LABEL_116;
      }
      v61 = BYTE5(v1158);
LABEL_112:
      v1173 = 0;
      v1175 = 0;
      LOBYTE(v1174) = v60;
      HIBYTE(v1174) = v61;
      if ((v60 - 2) >= 9)
      {
        if (v60 == 11)
        {
          v1173 = v1158;
          WebCore::Length::ref((int *)&v1173);
        }
      }
      else
      {
        v1175 = BYTE6(v1158);
        v1173 = v1158;
      }
LABEL_116:
      v68 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
      if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
        v69 = (v68 >> 1) & 1;
      else
        v69 = (v68 & 2) == 0;
      v70 = v69 ^ ((*(_BYTE *)(v4 + 21) & 0x10) >> 4);
      if (v70 == 1)
      {
        v71 = (_QWORD *)WebCore::gOverridingLogicalWidthLengthMap;
        if (!WebCore::gOverridingLogicalWidthLengthMap)
        {
          v71 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v71 = 0;
          v71[1] = 0;
          WebCore::gOverridingLogicalWidthLengthMap = (uint64_t)v71;
        }
      }
      else
      {
        v71 = (_QWORD *)WebCore::gOverridingLogicalHeightLengthMap;
        if (!WebCore::gOverridingLogicalHeightLengthMap)
        {
          v71 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v71 = 0;
          v71[1] = 0;
          WebCore::gOverridingLogicalHeightLengthMap = (uint64_t)v71;
        }
      }
      WTF::WeakHashMap<WebCore::RenderBox const,WebCore::Length,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,WebCore::Length const&>((uint64_t)v71, (_QWORD *)v4, (unsigned __int8 *)&v1173);
      if (v1174 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1173);
      }
      v72 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
      if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
        v73 = (v72 >> 1) & 1;
      else
        v73 = (v72 & 2) == 0;
      if (v73 != (*(_BYTE *)(v4 + 21) & 0x10) >> 4)
        goto LABEL_127;
      WebCore::RenderFlexibleBox::flexBasisForChild((int *)&v1160, v2, v4);
      v86 = *((_DWORD *)v2 + 5);
      v87 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2;
      if ((v86 & 0x1000) != 0)
      {
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
          goto LABEL_140;
      }
      else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
      {
LABEL_140:
        v88 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 8) + 36);
        goto LABEL_141;
      }
      v88 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 8) + 20);
LABEL_141:
      BYTE6(v1180) = 0;
      BYTE4(v1180) = *((_BYTE *)v88 + 4);
      v89 = BYTE4(v1180);
      BYTE5(v1180) = *((_BYTE *)v88 + 5);
      if (BYTE4(v1180) - 2 >= 9)
      {
        v90 = 0;
        if (BYTE4(v1180) == 11)
        {
          v90 = *v88;
          LODWORD(v1180) = *v88;
          WebCore::Length::ref((int *)&v1180);
          v86 = *((_DWORD *)v2 + 5);
          v87 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2;
        }
      }
      else
      {
        BYTE6(v1180) = *((_BYTE *)v88 + 6);
        if (BYTE6(v1180))
        {
          LODWORD(v1180) = *v88;
          v90 = v1180;
        }
        else
        {
          v90 = *v88;
          LODWORD(v1180) = *v88;
        }
      }
      if ((v86 & 0x1000) != 0)
      {
        if (!v87)
          goto LABEL_212;
      }
      else if (v87)
      {
LABEL_212:
        v117 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 8) + 44);
        goto LABEL_213;
      }
      v117 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 8) + 28);
LABEL_213:
      BYTE6(v1183) = 0;
      BYTE4(v1183) = *((_BYTE *)v117 + 4);
      v118 = BYTE4(v1183);
      BYTE5(v1183) = *((_BYTE *)v117 + 5);
      if (BYTE4(v1183) - 2 >= 9)
      {
        v119 = 0;
        if (BYTE4(v1183) == 11)
        {
          v119 = *v117;
          LODWORD(v1183) = *v117;
          WebCore::Length::ref((int *)&v1183);
        }
      }
      else
      {
        BYTE6(v1183) = *((_BYTE *)v117 + 6);
        if (BYTE6(v1183))
        {
          LODWORD(v1183) = *v117;
          v119 = v1183;
        }
        else
        {
          v119 = *v117;
          LODWORD(v1183) = *v117;
        }
      }
      shouldApplyMinSizeAutoForChild = 1;
      if (BYTE4(v1160) && BYTE4(v1160) != 12)
      {
        v133 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
        v134 = (*((_BYTE *)v2 + 21) & 0x10) != 0 ? (v133 >> 1) & 1 : (v133 & 2) == 0;
        if (v134 != (*(_BYTE *)(v4 + 21) & 0x10) >> 4
          || BYTE4(v1160) - 5 >= 6
          || ((0x3Du >> (BYTE4(v1160) - 5)) & 1) == 0)
        {
          if ((BYTE4(v1160) & 0xF7) != 3 || (v133 & 2) == 0)
            goto LABEL_262;
          if (*((_BYTE *)v2 + 392) != 1)
          {
            if (!*((_BYTE *)v2 + 392))
              goto LABEL_262;
            v604 = WebCore::RenderBox::computePercentageLogicalHeight(v4, (WebCore::Length *)&v1160, 0) & 0xFF00000000;
            if (*((_BYTE *)v2 + 393) && ((*((_BYTE *)v2 + 21) & 0x10) == 0) == ((*(_BYTE *)(v4 + 21) & 0x10) == 0))
              *((_BYTE *)v2 + 392) = v604 == 0;
            if (v604)
            {
LABEL_262:
              if ((v89 - 7) >= 4)
              {
                if ((v118 - 7) < 4)
                  goto LABEL_221;
                shouldApplyMinSizeAutoForChild = WebCore::RenderFlexibleBox::shouldApplyMinSizeAutoForChild(v2, (const WebCore::RenderBox *)v4);
              }
            }
          }
        }
      }
      if (v118 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v119);
      }
LABEL_221:
      if (v89 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v90);
      }
      if (BYTE4(v1160) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1160);
      }
      if (!shouldApplyMinSizeAutoForChild)
        goto LABEL_127;
      v121 = *(_DWORD *)(v4 + 20);
      if ((v121 & 0x1800000) != 0x1000000)
      {
        if ((v1151 & 1) == 0)
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 1544))(v4) || *((_BYTE *)v2 + 46) == 49)
            goto LABEL_231;
          v121 = *(_DWORD *)(v4 + 20);
        }
        if ((v121 & 0x20) == 0)
          *(_DWORD *)(v4 + 20) = v121 | 0x20;
        if (v1151 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 1520))(v4))
          WebCore::RenderObject::setPreferredLogicalWidthsDirty(v4, 1, 0);
      }
LABEL_231:
      if ((*(_DWORD *)(v4 + 20) & 0xF8) == 0)
      {
        v135 = *v1136;
        if (*v1136)
        {
          v136 = *(_DWORD *)(v135 - 8);
          v137 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
          v138 = 9 * ((v137 + ~(v137 << 13)) ^ ((v137 + ~(v137 << 13)) >> 8));
          v139 = (v138 ^ (v138 >> 15)) + ~((v138 ^ (v138 >> 15)) << 27);
          v140 = v136 & ((v139 >> 31) ^ v139);
          for (m = 1; ; ++m)
          {
            v142 = *(_QWORD *)(v135 + 16 * v140);
            if (v142 != -1)
            {
              if (!v142)
                goto LABEL_232;
              if (*(_QWORD *)(v142 + 8) == v4)
                break;
            }
            v140 = (v140 + m) & v136;
          }
LABEL_127:
          v74 = *((_BYTE *)v2 + 395);
          *((_BYTE *)v2 + 395) = 1;
          if (BYTE4(v1158) && BYTE4(v1158) != 12)
          {
            v99 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
            v100 = (*((_BYTE *)v2 + 21) & 0x10) != 0 ? (v99 >> 1) & 1 : (v99 & 2) == 0;
            if (v100 != (*(_BYTE *)(v4 + 21) & 0x10) >> 4
              || BYTE4(v1158) - 7 >= 4 && BYTE4(v1158) != 5)
            {
              if ((BYTE4(v1158) & 0xF7) != 3 || (v99 & 2) == 0)
                goto LABEL_169;
              if (*((_BYTE *)v2 + 392) != 1)
              {
                if (!*((_BYTE *)v2 + 392))
                  goto LABEL_169;
                v574 = WebCore::RenderBox::computePercentageLogicalHeight(v4, (WebCore::Length *)&v1158, 0) & 0xFF00000000;
                if (*((_BYTE *)v2 + 393) && ((*((_BYTE *)v2 + 21) & 0x10) == 0) == ((*(_BYTE *)(v4 + 21) & 0x10) == 0))
                  *((_BYTE *)v2 + 392) = v574 == 0;
                if (v574)
                {
LABEL_169:
                  v101 = WebCore::RenderFlexibleBox::computeMainAxisExtentForChild(v2, (WebCore::RenderBox *)v4, 0, (unsigned __int8 *)&v1158);
                  if ((v101 & 0xFF00000000) == 0)
                  {
                    std::__throw_bad_optional_access[abi:sn180100]();
LABEL_2224:
                    v937 = (v70 >> 31) + 0x7FFFFFFF;
LABEL_1772:
                    v938 = v1131;
                    if (((*((_DWORD *)v2 + 31) >> 13) & 6u) - 2 > 3)
                      v938 = v1116;
                    *v938 = v937;
                    goto LABEL_1444;
                  }
                  v92 = v101 & ~((int)v101 >> 31);
LABEL_147:
                  *((_BYTE *)v2 + 395) = v74;
                  if (v70)
                  {
                    v93 = WebCore::gOverridingLogicalWidthLengthMap;
                    if (!WebCore::gOverridingLogicalWidthLengthMap)
                      goto LABEL_150;
                  }
                  else
                  {
                    v93 = WebCore::gOverridingLogicalHeightLengthMap;
                    if (!WebCore::gOverridingLogicalHeightLengthMap)
                    {
LABEL_150:
                      if (BYTE4(v1158) == 11)
                      {
                        {
                          WebCore::calculationValues(void)::map = 1;
                          qword_1ECE90C98 = 0;
                        }
                        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1158);
                      }
                      if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
                      {
                        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
                        {
LABEL_153:
                          v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1080))(v4);
                          v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1088))(v4);
                          v96 = v94 + v95;
                          if (__OFADD__(v94, v95))
                            v96 = (v94 >> 31) + 0x7FFFFFFF;
                          goto LABEL_155;
                        }
                      }
                      else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
                      {
                        goto LABEL_153;
                      }
                      v1081 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1096))(v4);
                      v1082 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1104))(v4);
                      v96 = v1081 + v1082;
                      if (__OFADD__(v1081, v1082))
                        v96 = (v1081 >> 31) + 0x7FFFFFFF;
                      v2 = v1126;
LABEL_155:
                      if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
                      {
                        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
                          goto LABEL_157;
                      }
                      else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
                      {
LABEL_157:
                        v97 = *(_QWORD *)(*(_QWORD *)(v4 + 88) + 8) + 44;
                        goto LABEL_158;
                      }
                      v97 = *(_QWORD *)(*(_QWORD *)(v4 + 88) + 8) + 28;
LABEL_158:
                      LODWORD(v1160) = 0;
                      BYTE6(v1160) = 0;
                      BYTE4(v1160) = *(_BYTE *)(v97 + 4);
                      v98 = BYTE4(v1160);
                      BYTE5(v1160) = *(_BYTE *)(v97 + 5);
                      if (BYTE4(v1160) - 2 >= 9)
                      {
                        if (BYTE4(v1160) == 11)
                        {
                          LODWORD(v1160) = *(_DWORD *)v97;
                          WebCore::Length::ref((int *)&v1160);
                          v98 = BYTE4(v1160);
                        }
                      }
                      else
                      {
                        BYTE6(v1160) = *(_BYTE *)(v97 + 6);
                        LODWORD(v1160) = *(_DWORD *)v97;
                      }
                      if (v98 <= 0xB && ((1 << v98) & 0x818) != 0 || v98 - 7 <= 3)
                      {
                        v102 = WebCore::RenderFlexibleBox::computeMainAxisExtentForChild(v2, (WebCore::RenderBox *)v4, 2, (unsigned __int8 *)&v1160);
                        v103 = v102;
                        v104 = BYTE4(v102);
                      }
                      else
                      {
                        v103 = 0;
                        v104 = 0;
                      }
                      v105 = *((_DWORD *)v2 + 5);
                      v106 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
                      v107 = (v106 & 2) == 0;
                      if ((v105 & 0x1000) != 0)
                      {
                        if ((v106 & 2) == 0)
                          goto LABEL_176;
                      }
                      else if ((v106 & 2) != 0)
                      {
LABEL_176:
                        v108 = *(_QWORD *)(*(_QWORD *)(v4 + 88) + 8) + 36;
                        goto LABEL_177;
                      }
                      v108 = *(_QWORD *)(*(_QWORD *)(v4 + 88) + 8) + 20;
LABEL_177:
                      LODWORD(v1180) = 0;
                      BYTE6(v1180) = 0;
                      BYTE4(v1180) = *(_BYTE *)(v108 + 4);
                      v109 = BYTE4(v1180);
                      BYTE5(v1180) = *(_BYTE *)(v108 + 5);
                      if (BYTE4(v1180) - 2 >= 9)
                      {
                        if (BYTE4(v1180) == 11)
                        {
                          LODWORD(v1180) = *(_DWORD *)v108;
                          WebCore::Length::ref((int *)&v1180);
                          goto LABEL_179;
                        }
                      }
                      else
                      {
                        BYTE6(v1180) = *(_BYTE *)(v108 + 6);
                        LODWORD(v1180) = *(_DWORD *)v108;
                        if (BYTE4(v1180) - 3 < 2)
                        {
LABEL_179:
                          v110 = WebCore::RenderFlexibleBox::computeMainAxisExtentForChild(v2, (WebCore::RenderBox *)v4, 1, (unsigned __int8 *)&v1180);
                          if ((v110 & 0xFF00000000) != 0)
                            v111 = v110;
                          else
                            v111 = 0;
                          v112 = *(unsigned __int8 *)(v4 + 46);
                          if (v112 == 63 || v112 == 35)
                          {
                            v113 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16)
                                                      + 20);
                            v114 = (*((_BYTE *)v2 + 21) & 0x10) != 0 ? (v113 >> 1) & 1 : (v113 & 2) == 0;
                            if (v114 != (*(_BYTE *)(v4 + 21) & 0x10) >> 4)
                            {
                              v573 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 408))(v4);
                              if (v111 <= v573)
                                v111 = v573;
                            }
                          }
                          if (v104)
                            v115 = v103;
                          else
                            v115 = 0x7FFFFFFF;
                          v109 = BYTE4(v1180);
                          goto LABEL_306;
                        }
                      }
                      if (BYTE4(v1180) - 7 <= 3)
                      {
                        if ((v105 & 0x1000) != 0)
                          v107 = (v106 >> 1) & 1;
                        v2 = v1126;
                        if (v107 != (*(_BYTE *)(v4 + 21) & 0x10) >> 4)
                          goto LABEL_179;
                      }
                      if (!WebCore::RenderFlexibleBox::shouldApplyMinSizeAutoForChild(v2, (const WebCore::RenderBox *)v4))
                      {
                        v111 = 0;
                        if (v104)
                          v115 = v103;
                        else
                          v115 = 0x7FFFFFFF;
LABEL_306:
                        if (v109 == 11)
                        {
                          {
                            WebCore::calculationValues(void)::map = 1;
                            qword_1ECE90C98 = 0;
                          }
                          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1180);
                        }
                        if (BYTE4(v1160) == 11)
                        {
                          {
                            WebCore::calculationValues(void)::map = 1;
                            qword_1ECE90C98 = 0;
                          }
                          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1160);
                        }
                        v1176 = (WTF *)v4;
                        ++*(_DWORD *)(v4 + 16);
                        *(_DWORD *)v1177 = v92;
                        *(_DWORD *)&v1177[4] = v1154;
                        *(_DWORD *)&v1177[8] = v96;
                        *(_DWORD *)&v1177[12] = v111;
                        if (v115 >= v92)
                          v148 = v92;
                        else
                          v148 = v115;
                        if (v111 > v148)
                          v148 = v111;
                        *(_DWORD *)&v1177[16] = v115;
                        *(_DWORD *)&v1177[20] = v148;
                        *(_DWORD *)&v1177[24] = 0;
                        v1177[28] = 0;
                        v1177[29] = v1146 >> 9;
                        if (HIDWORD(v1166) == (_DWORD)v1166)
                        {
                          v149 = WTF::Vector<WebCore::FlexItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1165, HIDWORD(v1166) + 1, (unint64_t)&v1176);
                          v150 = (char *)v1165 + 40 * HIDWORD(v1166);
                          v151 = *(_QWORD *)v149;
                          *(_QWORD *)v149 = 0;
                          *(_QWORD *)v150 = v151;
                          LODWORD(v151) = *(_DWORD *)(v149 + 16);
                          *((_QWORD *)v150 + 1) = *(_QWORD *)(v149 + 8);
                          *((_DWORD *)v150 + 4) = v151;
                          *((_DWORD *)v150 + 5) = *(_DWORD *)(v149 + 20);
                          *((_DWORD *)v150 + 6) = *(_DWORD *)(v149 + 24);
                          LOWORD(v151) = *(_WORD *)(v149 + 36);
                          *(_QWORD *)(v150 + 28) = *(_QWORD *)(v149 + 28);
                          *((_WORD *)v150 + 18) = v151;
                        }
                        else
                        {
                          v163 = (char *)v1165 + 40 * HIDWORD(v1166);
                          v1176 = 0;
                          *(_QWORD *)v163 = v4;
                          v164 = *(_QWORD *)v1177;
                          *((_DWORD *)v163 + 4) = *(_DWORD *)&v1177[8];
                          *((_QWORD *)v163 + 1) = v164;
                          *((_DWORD *)v163 + 5) = *(_DWORD *)&v1177[12];
                          *((_DWORD *)v163 + 6) = *(_DWORD *)&v1177[16];
                          v165 = *(_QWORD *)&v1177[20];
                          *((_WORD *)v163 + 18) = *(_WORD *)&v1177[28];
                          *(_QWORD *)(v163 + 28) = v165;
                        }
                        v5 = (_QWORD *)v1141;
                        ++HIDWORD(v1166);
                        v152 = v1176;
                        v1176 = 0;
                        if (v152)
                        {
                          v153 = *((_DWORD *)v152 + 4);
                          if (!v153)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1943C38A0);
                          }
                          *((_DWORD *)v152 + 4) = v153 - 1;
                        }
                        *((_BYTE *)v2 + 392) = 2;
                        goto LABEL_319;
                      }
                      if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
                      {
                        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
                          goto LABEL_196;
                      }
                      else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
                      {
LABEL_196:
                        v116 = *(_QWORD *)(*(_QWORD *)(v4 + 88) + 8) + 4;
                        goto LABEL_197;
                      }
                      v116 = *(_QWORD *)(*(_QWORD *)(v4 + 88) + 8) + 12;
LABEL_197:
                      LODWORD(v1183) = 0;
                      BYTE6(v1183) = 0;
                      WORD2(v1183) = *(_WORD *)(v116 + 4);
                      if (BYTE4(v1183) - 2 >= 9)
                      {
                        if (BYTE4(v1183) == 11)
                        {
                          LODWORD(v1183) = *(_DWORD *)v116;
                          WebCore::Length::ref((int *)&v1183);
                        }
                      }
                      else
                      {
                        BYTE6(v1183) = *(_BYTE *)(v116 + 6);
                        LODWORD(v1183) = *(_DWORD *)v116;
                      }
                      if ((*(_BYTE *)(v4 + 52) & 7) == 3)
                      {
                        if (WebCore::RenderFlexibleBox::childHasComputableAspectRatio((WebCore::RenderFlexibleBox *)v4, (const WebCore::RenderBox *)v3))
                        {
                          v631 = BYTE4(v1183);
                          if (BYTE4(v1183))
                          {
                            if ((BYTE4(v1183) & 0xF7) == 3)
                            {
                              v632 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16)
                                                        + 20);
                              if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
                                v633 = (v632 >> 1) & 1;
                              else
                                v633 = (v632 & 2) == 0;
                              if (v633 == (*(_BYTE *)(v4 + 21) & 0x10) >> 4 || !*((_BYTE *)v2 + 392))
                              {
LABEL_1118:
                                LODWORD(v1158) = 0;
                                BYTE4(v1158) = v631;
                                *(_WORD *)((char *)&v1158 + 5) = BYTE5(v1183);
                                if ((v631 - 2) >= 9)
                                {
                                  if (v631 == 11)
                                  {
                                    LODWORD(v1158) = v1183;
                                    WebCore::Length::ref((int *)&v1158);
                                  }
                                  goto LABEL_1200;
                                }
LABEL_1119:
                                BYTE6(v1158) = BYTE6(v1183);
                                LODWORD(v1158) = v1183;
LABEL_1200:
                                v144 = WebCore::RenderFlexibleBox::computeMainSizeFromAspectRatioUsing((uint64_t)v2, v4, (WebCore::Length *)&v1158);
                                if (BYTE4(v1158) == 11)
                                {
                                  {
                                    WebCore::calculationValues(void)::map = 1;
                                    qword_1ECE90C98 = 0;
                                  }
                                  WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1158);
                                  v2 = v1126;
                                }
                                goto LABEL_280;
                              }
                              if (*((_BYTE *)v2 + 392) != 1)
                              {
                                v1080 = WebCore::RenderBox::computePercentageLogicalHeight(v4, (WebCore::Length *)&v1183, 1);
                                *((_BYTE *)v2 + 392) = (v1080 & 0xFF00000000) == 0;
                                if ((v1080 & 0xFF00000000) != 0)
                                {
                                  v631 = BYTE4(v1183);
                                  goto LABEL_1118;
                                }
                              }
                            }
                            else if (BYTE4(v1183) == 4)
                            {
                              BYTE4(v1158) = 4;
                              BYTE5(v1158) = BYTE5(v1183);
                              goto LABEL_1119;
                            }
                          }
                        }
                      }
                      LODWORD(v1158) = 0;
                      WORD2(v1158) = 7;
                      BYTE6(v1158) = 0;
                      v143 = WebCore::RenderFlexibleBox::computeMainAxisExtentForChild(v2, (WebCore::RenderBox *)v4, 1, (unsigned __int8 *)&v1158);
                      if ((v143 & 0xFF00000000) != 0)
                        v144 = v143;
                      else
                        v144 = 0;
                      if (BYTE4(v1158) == 11)
                      {
                        {
                          WebCore::calculationValues(void)::map = 1;
                          qword_1ECE90C98 = 0;
                        }
                        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1158);
                      }
LABEL_280:
                      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 288))(v4) & 1) == 0
                        && ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 32) + 148) >> 5) & 3u) - 1 >= 2)
                      {
                        v145 = *(unsigned __int8 *)(v4 + 46);
                        if (v145 != 103 && v145 != 83)
                          goto LABEL_286;
                        if ((*(_BYTE *)(v4 + 52) & 7) != 3)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1943C3994);
                        }
                        if (WebCore::RenderReplaced::computeIntrinsicAspectRatio((WebCore::RenderReplaced *)v4) <= 0.0)
                        {
LABEL_286:
                          if (v104)
                            v146 = v103;
                          else
                            v146 = v144;
                          if (v146 >= v144)
                            v111 = v144;
                          else
                            v111 = v146;
                          if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
                          {
                            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
                              goto LABEL_294;
                          }
                          else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
                          {
LABEL_294:
                            v147 = *(_QWORD *)(*(_QWORD *)(v4 + 88) + 8) + 12;
LABEL_295:
                            v1173 = 0;
                            v1175 = 0;
                            v1174 = *(_WORD *)(v147 + 4);
                            if (v1174 - 2 >= 9)
                            {
                              if (v1174 == 11)
                              {
                                v1173 = *(_DWORD *)v147;
                                WebCore::Length::ref((int *)&v1173);
                              }
                            }
                            else
                            {
                              v1175 = *(_BYTE *)(v147 + 6);
                              v1173 = *(_DWORD *)v147;
                            }
                            if (WebCore::RenderFlexibleBox::childMainSizeIsDefinite(v2, (const WebCore::RenderBox *)v4, (const WebCore::Length *)&v1173))
                            {
                              v575 = WebCore::RenderFlexibleBox::computeMainAxisExtentForChild(v2, (WebCore::RenderBox *)v4, 0, (unsigned __int8 *)&v1173);
                              if ((v575 & 0xFF00000000) != 0)
                                v576 = v575;
                              else
                                v576 = 0;
                              if (v104)
                                v577 = v103;
                              else
                                v577 = v576;
                              if (v104)
                                v115 = v103;
                              else
                                v115 = 0x7FFFFFFF;
                              if (v577 < v576)
                                v576 = v577;
                              if (v111 >= v576)
                                v111 = v576;
                            }
                            else if ((*(_BYTE *)(v4 + 52) & 7) == 3
                                   && WebCore::RenderFlexibleBox::childHasComputableAspectRatioAndCrossSizeIsConsideredDefinite(v2, (const WebCore::RenderBox *)v4))
                            {
                              v1170 = 0;
                              v1172 = 0;
                              v1171 = WORD2(v1183);
                              if (BYTE4(v1183) - 2 >= 9)
                              {
                                if (BYTE4(v1183) == 11)
                                {
                                  v1170 = v1183;
                                  WebCore::Length::ref((int *)&v1170);
                                }
                              }
                              else
                              {
                                v1172 = BYTE6(v1183);
                                v1170 = v1183;
                              }
                              v657 = WebCore::RenderFlexibleBox::computeMainSizeFromAspectRatioUsing((uint64_t)v2, v4, (WebCore::Length *)&v1170);
                              if (v1171 == 11)
                              {
                                {
                                  WebCore::calculationValues(void)::map = 1;
                                  qword_1ECE90C98 = 0;
                                }
                                WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1170);
                                v2 = v1126;
                              }
                              v658 = WebCore::RenderFlexibleBox::adjustChildSizeForAspectRatioCrossAxisMinAndMax((uint64_t)v2, v4, v657);
                              if (v104)
                                v115 = v103;
                              else
                                v115 = 0x7FFFFFFF;
                              if (v111 >= v658)
                                v111 = v658;
                            }
                            else if (v104)
                            {
                              v115 = v103;
                            }
                            else
                            {
                              v115 = 0x7FFFFFFF;
                            }
                            if (v1174 == 11)
                            {
                              {
                                WebCore::calculationValues(void)::map = 1;
                                qword_1ECE90C98 = 0;
                              }
                              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1173);
                            }
                            if (BYTE4(v1183) == 11)
                            {
                              {
                                WebCore::calculationValues(void)::map = 1;
                                qword_1ECE90C98 = 0;
                              }
                              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1183);
                            }
                            goto LABEL_306;
                          }
                          v147 = *(_QWORD *)(*(_QWORD *)(v4 + 88) + 8) + 4;
                          goto LABEL_295;
                        }
                      }
                      v613 = *((_DWORD *)v2 + 5);
                      v614 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
                      if ((v613 & 0x1000) != 0)
                      {
                        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
                          goto LABEL_1081;
                      }
                      else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
                      {
LABEL_1081:
                        v615 = *(unsigned int **)(*(_QWORD *)(v4 + 88) + 8);
                        v616 = v615 + 5;
                        goto LABEL_1082;
                      }
                      v615 = *(unsigned int **)(*(_QWORD *)(v4 + 88) + 8);
                      v616 = v615 + 9;
LABEL_1082:
                      v1175 = 0;
                      v1174 = *((_WORD *)v616 + 2);
                      if (v1174 - 2 < 9)
                        goto LABEL_1083;
                      if ((_BYTE)v1174)
                      {
                        if (v1174 != 11)
                          goto LABEL_1083;
                        v641 = (void *)*v616;
                        v1173 = *v616;
                        v642 = &v1173;
                        goto LABEL_1240;
                      }
                      if ((v613 & 0x1000) != 0)
                      {
                        if ((v614 & 2) == 0)
                          goto LABEL_1149;
                      }
                      else if ((v614 & 2) != 0)
                      {
LABEL_1149:
                        v640 = v615 + 7;
LABEL_1150:
                        v1172 = 0;
                        v1171 = *((_WORD *)v640 + 2);
                        if (!(_BYTE)v1171)
                          goto LABEL_286;
                        if (v1171 != 11)
                        {
LABEL_1083:
                          v144 = WebCore::RenderFlexibleBox::adjustChildSizeForAspectRatioCrossAxisMinAndMax((uint64_t)v2, v4, v144);
                          goto LABEL_286;
                        }
                        v641 = (void *)*v640;
                        v1170 = *v640;
                        v642 = &v1170;
LABEL_1240:
                        WebCore::Length::ref((int *)v642);
                        {
                          WebCore::calculationValues(void)::map = 1;
                          qword_1ECE90C98 = 0;
                        }
                        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v641);
                        v2 = v1126;
                        goto LABEL_1083;
                      }
                      v640 = v615 + 11;
                      goto LABEL_1150;
                    }
                  }
                  WTF::WeakHashMap<WebCore::RenderBox const,WebCore::Length,WTF::SingleThreadWeakPtrImpl>::remove(v93, (_QWORD *)v4);
                  goto LABEL_150;
                }
              }
            }
          }
          if (!WebCore::RenderFlexibleBox::childHasComputableAspectRatioAndCrossSizeIsConsideredDefinite(v2, (const WebCore::RenderBox *)v4))
          {
            v75 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
            if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
              v76 = (v75 >> 1) & 1;
            else
              v76 = (v75 & 2) == 0;
            if (v76 == (*(_BYTE *)(v4 + 21) & 0x10) >> 4)
            {
              v77 = *v1136;
              if (*v1136)
              {
                v78 = *(_DWORD *)(v77 - 8);
                v79 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
                v80 = 9 * ((v79 + ~(v79 << 13)) ^ ((v79 + ~(v79 << 13)) >> 8));
                v81 = (v80 ^ (v80 >> 15)) + ~((v80 ^ (v80 >> 15)) << 27);
                v82 = v78 & ((v81 >> 31) ^ v81);
                for (n = 1; ; ++n)
                {
                  v84 = v82;
                  v85 = *(_QWORD *)(v77 + 16 * v82);
                  if (v85 != -1)
                  {
                    if (!v85)
                      goto LABEL_2146;
                    if (*(_QWORD *)(v85 + 8) == v4)
                      break;
                  }
                  v82 = (v84 + n) & v78;
                }
                v91 = *(_DWORD *)(v77 + 16 * v84 + 8);
              }
              else
              {
LABEL_2146:
                v91 = 0x80000000;
              }
            }
            else
            {
              v91 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 416))(v4);
            }
            v92 = v91 - v58;
            if (__OFSUB__(v91, v58))
              v92 = (v91 >> 31) + 0x7FFFFFFF;
            goto LABEL_147;
          }
          if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
          {
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
              goto LABEL_1075;
          }
          else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
          {
LABEL_1075:
            v607 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 8) + 4);
            goto LABEL_1076;
          }
          v607 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 8) + 12);
LABEL_1076:
          LODWORD(v1160) = 0;
          BYTE4(v1160) = *((_BYTE *)v607 + 4);
          v608 = BYTE4(v1160);
          v609 = *((_BYTE *)v607 + 5);
          *(_WORD *)((char *)&v1160 + 5) = v609;
          v610 = BYTE4(v1160) - 2;
          if (v610 >= 9)
          {
            if (BYTE4(v1160) == 11)
            {
              v612 = *v607;
              LODWORD(v1160) = *v607;
              WebCore::Length::ref((int *)&v1160);
              BYTE4(v1180) = 11;
              *(_WORD *)((char *)&v1180 + 5) = v609;
              goto LABEL_1389;
            }
            v612 = 0;
            v611 = 0;
          }
          else
          {
            v611 = *((_BYTE *)v607 + 6);
            if (v611)
            {
              LODWORD(v1160) = *v607;
              v612 = v1160;
              v611 = 1;
            }
            else
            {
              v612 = *v607;
              LODWORD(v1160) = *v607;
            }
          }
          LODWORD(v1180) = 0;
          BYTE4(v1180) = BYTE4(v1160);
          *(_WORD *)((char *)&v1180 + 5) = v609;
          if (v610 < 9)
          {
            BYTE6(v1180) = v611;
            LODWORD(v1180) = v612;
LABEL_1132:
            v636 = WebCore::RenderFlexibleBox::computeMainSizeFromAspectRatioUsing((uint64_t)v2, v4, (WebCore::Length *)&v1180);
            v92 = WebCore::RenderFlexibleBox::adjustChildSizeForAspectRatioCrossAxisMinAndMax((uint64_t)v2, v4, v636);
            if (BYTE4(v1180) == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1180);
              v2 = v1126;
            }
            if (v608 == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v612);
              v2 = v1126;
            }
            goto LABEL_147;
          }
          if (BYTE4(v1160) != 11)
            goto LABEL_1132;
LABEL_1389:
          LODWORD(v1180) = v612;
          WebCore::Length::ref((int *)&v1180);
          goto LABEL_1132;
        }
      }
LABEL_232:
      if (((*(_DWORD *)(v4 + 20) & 0x1000) == 0) != ((*((_BYTE *)v2 + 21) & 0x10) == 0))
      {
        WebCore::RenderBox::setOverridingContainingBlockContentLogicalWidth((_QWORD *)v4, 0);
      }
      else
      {
        v1160 = 0;
        v122 = (_QWORD *)WebCore::gOverridingContainingBlockContentLogicalHeightMap;
        if (!WebCore::gOverridingContainingBlockContentLogicalHeightMap)
        {
          v122 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v122 = 0;
          v122[1] = 0;
          WebCore::gOverridingContainingBlockContentLogicalHeightMap = (uint64_t)v122;
        }
        WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,std::optional<WebCore::LayoutUnit>&>((uint64_t)v122, (_QWORD *)v4, (int *)&v1160);
      }
      v123 = *(_DWORD *)(v4 + 20);
      if ((v123 & 0x20) == 0)
      {
        v123 |= 0x20u;
        *(_DWORD *)(v4 + 20) = v123;
      }
      if ((v123 & 0xF8) != 0)
      {
        v124 = *(_QWORD *)(v4 + 32);
        if (v124
          && (v125 = *(_QWORD *)(v124 + 8)) != 0
          && (*(_BYTE *)(*(_QWORD *)(v125 + 104) + 239) & 0x18) != 0
          && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8) + 40)
                                                           + 8)
                                               + 1944)
                                   + 248)
                       + 479))
        {
          WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v4);
        }
        else
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 688))(v4);
        }
      }
      v126 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
      if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
        v127 = (v126 >> 1) & 1;
      else
        v127 = (v126 & 2) == 0;
      if (v127 != (*(_BYTE *)(v4 + 21) & 0x10) >> 4)
      {
        LODWORD(v1183) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 416))(v4);
LABEL_251:
        v130 = *(_QWORD *)(v4 + 8);
        if (!v130)
        {
          v130 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v130 = 1;
          *(_QWORD *)(v130 + 8) = v4;
          v635 = *(WTF **)(v4 + 8);
          *(_QWORD *)(v4 + 8) = v130;
          if (v635)
          {
            if (*(_DWORD *)v635 == 1)
            {
              WTF::fastFree(v635, v634);
              v130 = *(_QWORD *)(v4 + 8);
            }
            else
            {
              --*(_DWORD *)v635;
            }
          }
        }
        ++*(_DWORD *)v130;
        v1180 = (char *)v130;
        WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::set<WebCore::LayoutUnit&>(v1136, (uint64_t *)&v1180, &v1183, (uint64_t)&v1160);
        v132 = (WTF *)v1180;
        v1180 = 0;
        if (v132)
        {
          if (*(_DWORD *)v132 == 1)
            WTF::fastFree(v132, v131);
          else
            --*(_DWORD *)v132;
        }
        WTF::WeakHashSet<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBox>((uint64_t)v2 + 216, (_QWORD *)v4, (uint64_t)&v1160);
        if (WebCore::gOverridingContainingBlockContentLogicalWidthMap)
          WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalWidthMap, (_QWORD *)v4);
        if (WebCore::gOverridingContainingBlockContentLogicalHeightMap)
          WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalHeightMap, (_QWORD *)v4);
        goto LABEL_127;
      }
      WebCore::RenderFlexibleBox::flexBasisForChild((int *)&v1160, v2, v4);
      if ((BYTE4(v1160) & 0xF7) != 3)
        goto LABEL_247;
      v682 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
      if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
        v683 = (v682 >> 1) & 1;
      else
        v683 = (v682 & 2) == 0;
      if (v683 == (*(_BYTE *)(v4 + 21) & 0x10) >> 4
        && (BYTE4(v1160) - 7 < 4 || BYTE4(v1160) == 5))
      {
LABEL_1289:
        v708 = WebCore::RenderFlexibleBox::cachedChildIntrinsicContentLogicalHeight(v2, (const WebCore::RenderBox *)v4);
        v709 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1048))(v4);
        v710 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 960))(v4);
        v711 = v709 + v710;
        if (__OFADD__(v709, v710))
          v711 = (v709 >> 31) + 0x7FFFFFFF;
        v712 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1056))(v4);
        v713 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 968))(v4);
        v714 = v712 + v713;
        if (__OFADD__(v712, v713))
          v714 = (v712 >> 31) + 0x7FFFFFFF;
        v563 = __OFADD__(v711, v714);
        v715 = v711 + v714;
        if (v563)
          v715 = (v711 >> 31) + 0x7FFFFFFF;
        v716 = v708 + v715;
        if (__OFADD__(v708, v715))
          v716 = (v708 >> 31) + 0x7FFFFFFF;
        v717 = 1360;
        if (((*(_DWORD *)(v4 + 124) >> 13) & 6u) - 2 < 4)
          v717 = 1352;
        v718 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + v717))(v4);
        v719 = v718 << 6;
        if (v718 < -33554432)
          v719 = 0x80000000;
        if (v718 > 0x1FFFFFF)
          v719 = 0x7FFFFFFF;
        v563 = __OFADD__(v716, v719);
        v129 = v716 + v719;
        if (v563)
          v129 = (v716 >> 31) + 0x7FFFFFFF;
        goto LABEL_250;
      }
      if ((v682 & 2) != 0)
      {
        if (*((_BYTE *)v2 + 392) == 1)
          goto LABEL_1289;
        if (*((_BYTE *)v2 + 392))
        {
          v684 = WebCore::RenderBox::computePercentageLogicalHeight(v4, (WebCore::Length *)&v1160, 0) & 0xFF00000000;
          if (!*((_BYTE *)v2 + 393) || ((*((_BYTE *)v1126 + 21) & 0x10) == 0) != ((*(_BYTE *)(v4 + 21) & 0x10) == 0))
          {
            v2 = v1126;
            if (!v684)
              goto LABEL_1289;
          }
          else
          {
            v2 = v1126;
            *((_BYTE *)v1126 + 392) = v684 == 0;
            if (!v684)
              goto LABEL_1289;
          }
        }
      }
LABEL_247:
      if (((*(_DWORD *)(v4 + 124) >> 13) & 6u) - 2 < 4)
        v128 = (int *)(v4 + 160);
      else
        v128 = (int *)(v4 + 164);
      v129 = *v128;
LABEL_250:
      LODWORD(v1183) = v129;
      if (BYTE4(v1160) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1160);
      }
      goto LABEL_251;
    }
    if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
    {
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
        goto LABEL_96;
    }
    else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
    {
LABEL_96:
      v62 = *(_QWORD *)(*(_QWORD *)(v4 + 88) + 8) + 12;
      goto LABEL_97;
    }
    v62 = *(_QWORD *)(*(_QWORD *)(v4 + 88) + 8) + 4;
LABEL_97:
    BYTE4(v1160) = *(_BYTE *)(v62 + 4);
    v60 = BYTE4(v1160);
    v63 = *(_BYTE *)(v62 + 5);
    *(_WORD *)((char *)&v1160 + 5) = v63;
    v64 = BYTE4(v1160) - 2;
    if (v64 >= 9)
    {
      if (BYTE4(v1160) == 11)
      {
        v730 = *(_DWORD *)v62;
        LODWORD(v1160) = *(_DWORD *)v62;
        WebCore::Length::ref((int *)&v1160);
        if (BYTE4(v1158) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1158);
          v2 = v1126;
        }
        v66 = v730;
        BYTE4(v1158) = 11;
        BYTE5(v1158) = v63;
LABEL_109:
        LODWORD(v1158) = v66;
        goto LABEL_110;
      }
      v65 = 0;
      v66 = 0;
    }
    else
    {
      BYTE6(v1160) = *(_BYTE *)(v62 + 6);
      v65 = BYTE6(v1160);
      if (BYTE6(v1160))
      {
        v66 = *(_DWORD *)v62;
        LODWORD(v1160) = *(_DWORD *)v62;
        v65 = 1;
      }
      else
      {
        LODWORD(v1160) = *(_DWORD *)v62;
        v66 = (int)v1160;
      }
    }
    BYTE4(v1158) = BYTE4(v1160);
    BYTE5(v1158) = v63;
    if (v64 >= 9)
    {
      if (BYTE4(v1160) > 0xDu)
        goto LABEL_110;
      if (((1 << SBYTE4(v1160)) & 0x3003) != 0)
      {
        LODWORD(v1158) = 0;
        goto LABEL_110;
      }
      if (BYTE4(v1160) != 11)
        goto LABEL_110;
    }
    else
    {
      BYTE6(v1158) = v65;
    }
    goto LABEL_109;
  }
LABEL_347:
  v166 = WebCore::RenderFlexibleBox::mainAxisContentExtent((uint64_t)v2, 0x7FFFFFFFu);
  v167 = WebCore::RenderFlexibleBox::computeGap(v2, (const WebCore::RenderBox *)1);
  v168 = WebCore::RenderFlexibleBox::computeGap(v2, 0);
  v1160 = v2;
  v1161 = v166;
  v1162 = &v1165;
  v1163 = v167;
  v1164 = v168;
  v1118 = v168;
  v169 = (unsigned __int16)*((_DWORD *)v2 + 31) >> 13;
  v170 = 0x30203020100uLL >> (8 * v169);
  if (v169 > 5)
    LOBYTE(v170) = 0;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
    goto LABEL_350;
  v558 = *((_DWORD *)v2 + 30);
  if (v169 <= 5 && ((3u >> v169) & 1) == 0)
  {
    LODWORD(v170) = (v558 >> 26) & 1;
LABEL_350:
    v171 = (v170 - 1) + 126;
    if ((v170 - 1) > 2u)
      v171 = 125;
    goto LABEL_352;
  }
  v171 = 127;
  if ((v558 & 0x4000000) != 0)
    v171 = 128;
LABEL_352:
  v1134 = v167;
  v172 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)v2 + 8 * v171))(v2);
  v173 = (unsigned __int16)*((_DWORD *)v2 + 31) >> 13;
  v174 = 0x30203020100uLL >> (8 * v173);
  if (v173 > 5)
    LOBYTE(v174) = 0;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
  {
    v559 = *((_DWORD *)v2 + 30);
    if (v173 > 5 || ((3u >> v173) & 1) != 0)
    {
      v175 = 118;
      if ((v559 & 0x4000000) != 0)
        v175 = 119;
      goto LABEL_357;
    }
    LODWORD(v174) = (v559 >> 26) & 1;
  }
  v175 = (v174 - 1) + 117;
  if ((v174 - 1) > 2u)
    v175 = 116;
LABEL_357:
  v176 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)v2 + 8 * v175))(v2);
  v178 = v172 + v176;
  if (__OFADD__(v172, v176))
    v178 = (v172 >> 31) + 0x7FFFFFFF;
  v1155 = v178;
  v1158 = 0;
  v1159 = 0;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v726 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 3) + 8) + 40)
                                                         + 8)
                                             + 528)
                                 + 8)
                     + 24);
    if (v726)
    {
      v727 = *(_QWORD *)(v726 + 8);
      if (v727)
      {
        v728 = *(_QWORD *)(*(_QWORD *)(v727 + 80) + 8);
        if (v728)
        {
          v729 = *(_QWORD *)(v728 + 40);
          if (v729)
            WTF::WeakHashMap<WebCore::RenderObject,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>::remove(v729 + 240, v2);
        }
      }
    }
  }
  v180 = 0;
  v1147 = 0;
  v1131 = (int *)((char *)v2 + 160);
  v1116 = (int *)((char *)v2 + 164);
  v1125 = (WebCore::RenderFlexibleBox *)((char *)v2 + 80);
  v1128 = (uint64_t *)((char *)v2 + 216);
LABEL_362:
  if ((_DWORD)v1159)
  {
    if (HIDWORD(v1159))
    {
      v181 = v1158;
      v182 = 40 * HIDWORD(v1159);
      do
      {
        v183 = *(_QWORD *)v181;
        *(_QWORD *)v181 = 0;
        if (v183)
        {
          v184 = *(_DWORD *)(v183 + 16);
          if (!v184)
          {
            __break(0xC471u);
            JUMPOUT(0x1943C34CCLL);
          }
          *(_DWORD *)(v183 + 16) = v184 - 1;
        }
        v181 = (WTF *)((char *)v181 + 40);
        v182 -= 40;
      }
      while (v182);
      HIDWORD(v1159) = 0;
    }
    v185 = v1158;
    if (v1158)
    {
      v1158 = 0;
      LODWORD(v1159) = 0;
      v186 = v180;
      WTF::fastFree(v185, v177);
      v180 = v186;
    }
  }
  v1167 = 0;
  v187 = v1162;
  v188 = *((unsigned int *)v1162 + 3);
  if (v180 < v188)
  {
    v189 = *((_QWORD *)v1160 + 11);
    if ((*((_BYTE *)v1160 + 21) & 0x10) != 0)
    {
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v189 + 32) + 16) + 20) & 2) != 0)
        goto LABEL_375;
    }
    else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v189 + 32) + 16) + 20) & 2) == 0)
    {
LABEL_375:
      v190 = 4;
      goto LABEL_376;
    }
    v190 = 1;
LABEL_376:
    if ((*(_BYTE *)(*(_QWORD *)(v189 + 40) + 461) & v190) != 0)
    {
      v1044 = v180;
      WebCore::RenderFlexibleBox::trimMainAxisMarginStart((uint64_t)v1160, (uint64_t)*v1162 + 40 * v180);
      v180 = v1044;
      v188 = *((unsigned int *)v187 + 3);
    }
  }
  if (v180 >= v188)
  {
    v191 = 0;
    v192 = 0;
    v193 = 0.0;
    v194 = HIDWORD(v1159);
    v195 = 0.0;
    v196 = 0.0;
    if (!HIDWORD(v1159))
      goto LABEL_1441;
LABEL_380:
    v197 = v192 - v1163;
    if (__OFSUB__(v192, v1163))
      v197 = (v192 >> 31) + 0x7FFFFFFF;
    LODWORD(v1167) = v197;
    v198 = v191 - v1163;
    if (__OFSUB__(v191, v1163))
      v198 = (v191 >> 31) + 0x7FFFFFFF;
    HIDWORD(v1167) = v198;
    v199 = v1160;
    v200 = *((_QWORD *)v1160 + 11);
    if ((*((_BYTE *)v1160 + 21) & 0x10) != 0)
    {
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v200 + 32) + 16) + 20) & 2) != 0)
        goto LABEL_386;
    }
    else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v200 + 32) + 16) + 20) & 2) == 0)
    {
LABEL_386:
      v201 = 8;
LABEL_387:
      v1142 = v180;
      if ((*(_BYTE *)(*(_QWORD *)(v200 + 40) + 461) & v201) != 0)
      {
        v749 = (char *)v1158 + 40 * v194;
        v1176 = (WTF *)*((_QWORD *)v749 - 5);
        ++*((_DWORD *)v1176 + 4);
        *(_OWORD *)v1177 = *((_OWORD *)v749 - 2);
        *(_OWORD *)&v1177[14] = *(_OWORD *)(v749 - 18);
        WebCore::FlexLayoutAlgorithm::removeMarginEndFromFlexSizes((uint64_t)&v1160, &v1176, (int *)&v1167 + 1, (int *)&v1167);
        WebCore::RenderFlexibleBox::trimMainAxisMarginEnd((uint64_t)v199, (uint64_t)&v1176);
        if (v1176)
        {
          v750 = *((_DWORD *)v1176 + 4);
          if (!v750)
          {
            __break(0xC471u);
            JUMPOUT(0x1943C6A74);
          }
          *((_DWORD *)v1176 + 4) = v750 - 1;
        }
        v2 = v1126;
        if (!HIDWORD(v1159))
          goto LABEL_1441;
      }
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        v722 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 3) + 8) + 40)
                                                             + 8)
                                                 + 528)
                                     + 8)
                         + 24);
        if (v722)
        {
          v723 = *(_QWORD *)(v722 + 8);
          if (v723)
          {
            v724 = *(_QWORD *)(*(_QWORD *)(v723 + 80) + 8);
            if (v724)
            {
              v725 = *(WebCore::InspectorDOMAgent **)(v724 + 40);
              if (v725)
                WebCore::InspectorDOMAgent::flexibleBoxRendererWrappedToNextLine(v725, v2, v1142);
            }
          }
        }
      }
      v203 = *((_DWORD *)v2 + 5);
      v204 = *((_QWORD *)v2 + 11);
      v205 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v204 + 32) + 16) + 20);
      if ((v203 & 0x1000) != 0)
      {
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v204 + 32) + 16) + 20) & 2) != 0)
          goto LABEL_391;
      }
      else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v204 + 32) + 16) + 20) & 2) == 0)
      {
LABEL_391:
        v206 = 1;
        goto LABEL_392;
      }
      v206 = 4;
LABEL_392:
      v207 = *(unsigned __int8 *)(*(_QWORD *)(v204 + 40) + 461);
      v208 = (v207 & v206) != 0 && HIDWORD(v1169) == 0;
      if ((v203 & 0x1000) != 0)
      {
        if ((v205 & 2) != 0)
          goto LABEL_396;
      }
      else if ((v205 & 2) == 0)
      {
LABEL_396:
        v209 = 2;
LABEL_397:
        if ((v209 & v207) != 0)
        {
          if (!HIDWORD(v1166))
          {
            __break(0xC471u);
            JUMPOUT(0x1943C6B68);
          }
          if (!HIDWORD(v1159))
          {
            __break(0xC471u);
            JUMPOUT(0x1943C6B70);
          }
          v210 = *((_QWORD *)v1165 + 5 * HIDWORD(v1166) - 5) == *((_QWORD *)v1158 + 5 * HIDWORD(v1159) - 5);
          v2 = v1126;
        }
        else
        {
          v210 = 0;
        }
        if ((v208 || v210) && HIDWORD(v1159))
        {
          v740 = (WebCore::RenderObject **)v1158;
          if (v208)
          {
            v741 = 40 * HIDWORD(v1159);
            if (v210)
            {
              v2 = v1126;
              do
              {
                WebCore::RenderFlexibleBox::trimCrossAxisMarginStart((uint64_t)v1126, v740);
                WebCore::RenderFlexibleBox::trimCrossAxisMarginEnd((uint64_t)v1126, v740);
                v740 += 5;
                v741 -= 40;
              }
              while (v741);
            }
            else
            {
              v2 = v1126;
              do
              {
                WebCore::RenderFlexibleBox::trimCrossAxisMarginStart((uint64_t)v1126, v740);
                v740 += 5;
                v741 -= 40;
              }
              while (v741);
            }
          }
          else
          {
            v2 = v1126;
            if (v210)
            {
              v1056 = 40 * HIDWORD(v1159);
              do
              {
                WebCore::RenderFlexibleBox::trimCrossAxisMarginEnd((uint64_t)v1126, v740);
                v740 += 5;
                v1056 -= 40;
              }
              while (v1056);
            }
          }
        }
        v211 = v1167;
        v212 = WebCore::RenderFlexibleBox::mainAxisContentExtent((uint64_t)v2, v1167);
        v214 = v212;
        if (__OFSUB__(v212, HIDWORD(v1167)))
          v215 = (v212 >> 31) + 0x7FFFFFFF;
        else
          v215 = v212 - HIDWORD(v1167);
        v1176 = 0;
        *(_QWORD *)v1177 = 0;
        v216 = HIDWORD(v1159);
        if (!HIDWORD(v1159))
          goto LABEL_473;
        if (v211 >= v212)
        {
          v217 = 0;
          v218 = 0;
          v219 = 0;
          v220 = 0;
          while (1)
          {
            v221 = (char *)v1158 + v217;
            if (*(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)v1158 + v217) + 88) + 32) + 16)
                          + 8) == 0.0)
              break;
            v222 = *((_DWORD *)v221 + 7);
            if (*((_DWORD *)v221 + 2) < v222)
              goto LABEL_411;
LABEL_408:
            ++v220;
            v217 += 40;
            if (v220 >= v216)
              goto LABEL_461;
          }
          v222 = *((_DWORD *)v221 + 7);
LABEL_411:
          *(_DWORD *)((char *)v1158 + v217 + 32) = v222;
          v1180 = v221;
          if (v219 == *(_DWORD *)v1177)
          {
            v223 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1176, v219 + 1, (unint64_t)&v1180);
            v219 = *(_DWORD *)&v1177[4];
            v218 = v1176;
            *((_QWORD *)v1176 + *(unsigned int *)&v1177[4]) = *v223;
          }
          else
          {
            *((_QWORD *)v218 + v219) = v221;
          }
          *(_DWORD *)&v1177[4] = ++v219;
          v216 = HIDWORD(v1159);
          goto LABEL_408;
        }
        v265 = 0;
        v218 = 0;
        v219 = 0;
        v266 = 0;
        while (1)
        {
          v267 = (char *)v1158 + v265;
          if (*(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)v1158 + v265) + 88) + 32) + 16)
                        + 4) == 0.0)
            break;
          v268 = *((_DWORD *)v267 + 7);
          if (*((_DWORD *)v267 + 2) > v268)
            goto LABEL_457;
LABEL_454:
          ++v266;
          v265 += 40;
          if (v266 >= v216)
          {
LABEL_461:
            if (v219)
            {
              v270 = v219;
              v271 = v218;
              do
              {
                v273 = *(uint64_t **)v271;
                v271 = (WTF *)((char *)v271 + 8);
                v272 = v273;
                v274 = *v273;
                v275 = *((_DWORD *)v273 + 8);
                v276 = *((_DWORD *)v273 + 2);
                v563 = __OFSUB__(v275, v276);
                v277 = v275 - v276;
                v278 = (v275 >> 31) + 0x7FFFFFFF;
                if (!v563)
                  v278 = v277;
                v563 = __OFSUB__(v215, v278);
                v279 = v215 - v278;
                if (v563)
                  v215 = (v215 >> 31) + 0x7FFFFFFF;
                else
                  v215 = v279;
                v280 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v274 + 88) + 32) + 16);
                v281 = *(float *)(v280 + 8);
                v193 = v193 - *(float *)(v280 + 4);
                v195 = v195 - v281;
                if (v196 + (float)((float)((float)v276 * -0.015625) * v281) >= 0.0)
                  v196 = v196 + (float)((float)((float)v276 * -0.015625) * v281);
                else
                  v196 = 0.0;
                *((_BYTE *)v272 + 36) = 1;
                --v270;
              }
              while (v270);
LABEL_472:
              v1176 = 0;
              *(_DWORD *)v1177 = 0;
              WTF::fastFree(v218, v213);
            }
            else if (v218)
            {
              goto LABEL_472;
            }
LABEL_473:
            ++v1147;
            v282 = v215;
            while (2)
            {
              v1176 = 0;
              *(_QWORD *)v1177 = 0;
              v1180 = 0;
              v1181 = 0;
              if (v211 < v214)
                v283 = v193;
              else
                v283 = v195;
              if (v283 > 0.0 && v283 < 1.0)
              {
                v745 = (double)v215 * 0.015625 * v283 * 64.0;
                if (v745 >= 2147483650.0)
                {
                  v746 = 0x7FFFFFFF;
                }
                else if (v745 <= -2147483650.0)
                {
                  v746 = 0x80000000;
                }
                else
                {
                  v746 = (int)v745;
                }
                if (v746 >= 0)
                  v747 = v746;
                else
                  v747 = -v746;
                if (v282 >= 0)
                  v748 = v282;
                else
                  v748 = -v282;
                if (v747 < v748)
                  v282 = v746;
                v2 = v1126;
              }
              if (HIDWORD(v1159))
              {
                v285 = 0;
                v213 = 0;
                v286 = 0;
                v287 = 0;
                v288 = 0;
                v289 = 0;
                v290 = v196 <= 0.0 || v211 < v214;
                v293 = v290 || v282 == 0 || (*(_QWORD *)&v196 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL;
                while (1)
                {
                  v294 = (char *)v1158 + v285;
                  if (!*((_BYTE *)v1158 + v285 + 36))
                    break;
LABEL_524:
                  ++v287;
                  v285 += 40;
                  if (v287 >= HIDWORD(v1159))
                  {
                    if (!v288)
                      goto LABEL_530;
                    if (v288 >= 0)
                      v659 = v286;
                    else
                      v659 = HIDWORD(v1181);
                    v311 = (WTF *)v1180;
                    if ((_DWORD)v659)
                    {
                      v671 = v1176;
                      if (v288 < 0)
                        v671 = (WTF *)v1180;
                      do
                      {
                        v673 = *(uint64_t **)v671;
                        v671 = (WTF *)((char *)v671 + 8);
                        v672 = v673;
                        v674 = *v673;
                        v675 = *((_DWORD *)v673 + 8);
                        v676 = *((_DWORD *)v673 + 2);
                        v563 = __OFSUB__(v675, v676);
                        v677 = v675 - v676;
                        v678 = (v675 >> 31) + 0x7FFFFFFF;
                        if (!v563)
                          v678 = v677;
                        v563 = __OFSUB__(v282, v678);
                        v679 = v282 - v678;
                        if (v563)
                          v282 = (v282 >> 31) + 0x7FFFFFFF;
                        else
                          v282 = v679;
                        v680 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v674 + 88) + 32) + 16);
                        v681 = *(float *)(v680 + 8);
                        v193 = v193 - *(float *)(v680 + 4);
                        v195 = v195 - v681;
                        if (v196 + (float)((float)((float)v676 * -0.015625) * v681) >= 0.0)
                          v196 = v196 + (float)((float)((float)v676 * -0.015625) * v681);
                        else
                          v196 = 0.0;
                        *((_BYTE *)v672 + 36) = 1;
                        --v659;
                      }
                      while (v659);
                    }
                    v310 = 0;
                    goto LABEL_534;
                  }
                }
                v295 = *(_QWORD *)v294;
                v296 = *((_DWORD *)v294 + 2);
                if (v282 >= 1)
                {
                  v578 = (*(_QWORD *)&v193 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
                  v579 = ((*(_QWORD *)&v193 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
                  if (v193 >= 0.0)
                  {
                    v579 = 0;
                    v578 = 0;
                  }
                  if ((*(_QWORD *)&v193 & 0x7FFFFFFFFFFFFFFFLL) == 0)
                    v578 = 1;
                  v580 = (*(_QWORD *)&v193 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v578;
                  if ((*(_QWORD *)&v193 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000)
                    v580 = 1;
                  v297 = 0.0;
                  if (((v580 | v579) & 1) == 0 && v211 < v214)
                    v297 = (float)((float)((float)v282 * 0.015625)
                                 * *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v295 + 88) + 32) + 16) + 4))
                         / v193;
                }
                else
                {
                  v297 = 0.0;
                  if ((v293 & 1) == 0)
                  {
                    v309 = *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v295 + 88) + 32) + 16) + 8);
                    if (v309 != 0.0)
                      v297 = (float)((float)((float)v296 * 0.015625) * (float)((float)((float)v282 * 0.015625) * v309))
                           / v196;
                  }
                }
                if ((*(_QWORD *)&v297 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
                {
                  v302 = *((_DWORD *)v294 + 2);
                  goto LABEL_508;
                }
                v298 = v297;
                if (v298 < 0.0)
                  v299 = v298 + -0.0078125;
                else
                  v299 = v298 + 0.0078125;
                if (v299 < 33554432.0)
                {
                  if (v299 <= -33554000.0)
                    goto LABEL_2073;
                  v300 = v299 * 64.0;
                  if (v300 < 2147483650.0)
                  {
                    if (v300 > -2147483650.0)
                    {
                      v301 = (int)v300;
LABEL_505:
                      v563 = __OFADD__(v296, v301);
                      v302 = v296 + v301;
                      if (v563)
                        v302 = (v296 >> 31) + 0x7FFFFFFF;
LABEL_508:
                      v303 = *(_DWORD *)((char *)v1158 + v285 + 24);
                      if (v303 >= v302)
                        v303 = v302;
                      if (*(_DWORD *)((char *)v1158 + v285 + 20) > v303)
                        v303 = *(_DWORD *)((char *)v1158 + v285 + 20);
                      *(_DWORD *)((char *)v1158 + v285 + 32) = v303;
                      v563 = __OFSUB__(v303, v296);
                      v304 = v303 - v296;
                      v305 = (v303 >> 31) + 0x7FFFFFFF;
                      if (v563)
                        v304 = (v303 >> 31) + 0x7FFFFFFF;
                      v563 = __OFADD__(v289, v304);
                      v306 = v289 + v304;
                      if (v563)
                        v289 = (v289 >> 31) + 0x7FFFFFFF;
                      else
                        v289 = v306;
                      v563 = __OFSUB__(v303, v302);
                      v307 = v303 - v302;
                      if (v563)
                        v308 = v305;
                      else
                        v308 = v307;
                      if (v308 >= 1)
                      {
                        v1183 = (uint64_t)v294;
                        if ((_DWORD)v286 == *(_DWORD *)v1177)
                        {
                          v1138 = v293;
                          v656 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1176, v286 + 1, (unint64_t)&v1183);
                          v293 = v1138;
                          LODWORD(v286) = *(_DWORD *)&v1177[4];
                          v213 = v1176;
                          *((_QWORD *)v1176 + *(unsigned int *)&v1177[4]) = *v656;
                        }
                        else
                        {
                          *((_QWORD *)v213 + v286) = v294;
                        }
                        v286 = (v286 + 1);
                        *(_DWORD *)&v1177[4] = v286;
                      }
                      else if (v308 < 0)
                      {
                        v1183 = (uint64_t)v294;
                        v707 = HIDWORD(v1181);
                        if (HIDWORD(v1181) == (_DWORD)v1181)
                        {
                          v1120 = v213;
                          v1122 = v286;
                          v1139 = v293;
                          WTF::Vector<WebCore::FlexItem *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FlexItem *>((uint64_t)&v1180, (unint64_t)&v1183);
                          v213 = v1120;
                          v286 = v1122;
                          v293 = v1139;
                        }
                        else
                        {
                          *(_QWORD *)&v1180[8 * HIDWORD(v1181)] = v294;
                          HIDWORD(v1181) = v707 + 1;
                        }
                      }
                      if (__OFADD__(v288, v308))
                        v288 = (v288 >> 31) + 0x7FFFFFFF;
                      else
                        v288 += v308;
                      goto LABEL_524;
                    }
LABEL_2073:
                    v301 = 0x80000000;
                    goto LABEL_505;
                  }
                }
                v301 = 0x7FFFFFFF;
                goto LABEL_505;
              }
              v289 = 0;
LABEL_530:
              if (__OFSUB__(v282, v289))
                v282 = (v282 >> 31) + 0x7FFFFFFF;
              else
                v282 -= v289;
              v310 = 1;
              v311 = (WTF *)v1180;
LABEL_534:
              if (v311)
                WTF::fastFree(v311, v213);
              if (v1176)
                WTF::fastFree(v1176, v213);
              if (!v310)
                continue;
              break;
            }
            v263 = HIDWORD(v1159);
            if (HIDWORD(v1159))
            {
              v312 = (int *)((char *)v1158 + 16);
              v313 = HIDWORD(v1159);
              do
              {
                v314 = v312[4];
                v315 = *(v312 - 1);
                v563 = __OFADD__(v314, v315);
                v316 = v314 + v315;
                v317 = (v314 >> 31) + 0x7FFFFFFF;
                if (!v563)
                  v317 = v316;
                v318 = *v312;
                v312 += 10;
                v563 = __OFADD__(v317, v318);
                v319 = v317 + v318;
                v320 = (v317 >> 31) + 0x7FFFFFFF;
                if (!v563)
                  v320 = v319;
                v563 = __OFSUB__(v214, v320);
                v321 = v214 - v320;
                if (v563)
                  v214 = (v214 >> 31) + 0x7FFFFFFF;
                else
                  v214 = v321;
                --v313;
              }
              while (v313);
            }
            v322 = ((unint64_t)HIDWORD(v1159) << 6) - 64;
            if (v322 >= 0x7FFFFFFF)
              v322 = 0x7FFFFFFFLL;
            v323 = (uint64_t)(v322 * v1134) / 64;
            if (HIDWORD(v323) != (int)v323 >> 31)
              LODWORD(v323) = (v1134 >> 31) + 0x7FFFFFFF;
            v563 = __OFSUB__(v214, (_DWORD)v323);
            v324 = v214 - v323;
            if (v563)
              v325 = (v214 >> 31) + 0x7FFFFFFF;
            else
              v325 = v324;
            if ((int)v325 > 0)
            {
              v327 = *((_DWORD *)v2 + 5) & 0x1000;
              v326 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
              v557 = (v326 >> 1) & 1;
              if ((*((_DWORD *)v2 + 5) & 0x1000) == 0)
                LOBYTE(v557) = (v326 & 2) == 0;
              if (!HIDWORD(v1159))
                goto LABEL_450;
              v259 = v1158;
              if ((v557 & 1) != 0)
              {
                v262 = 0;
                do
                {
                  v260 = *(_QWORD *)v259;
                  v259 = (WTF *)((char *)v259 + 40);
                  v261 = *(_QWORD *)(*(_QWORD *)(v260 + 88) + 24);
                  if (!*(_BYTE *)(v261 + 68))
                    ++v262;
                  if (!*(_BYTE *)(v261 + 52))
                    ++v262;
                  --v263;
                }
                while (v263);
              }
              else
              {
                v262 = 0;
                do
                {
                  v617 = *(_QWORD *)v259;
                  v259 = (WTF *)((char *)v259 + 40);
                  v618 = *(_QWORD *)(*(_QWORD *)(v617 + 88) + 24);
                  if (!*(_BYTE *)(v618 + 44))
                    ++v262;
                  if (!*(_BYTE *)(v618 + 60))
                    ++v262;
                  --v263;
                }
                while (v263);
              }
              if (v262)
              {
                v1046 = v262 << 6;
                if (v262 < -33554432)
                  v1046 = 0x80000000;
                if (v262 > 0x1FFFFFF)
                  v1046 = 0x7FFFFFFF;
                v1047 = (v325 << 6) / v1046;
                if (v1047 <= (uint64_t)0xFFFFFFFF80000000)
                  v1047 = 0xFFFFFFFF80000000;
                if (v1047 >= 0x7FFFFFFF)
                  v264 = 0x7FFFFFFF;
                else
                  v264 = v1047;
                LODWORD(v325) = 0;
              }
              else
              {
LABEL_450:
                v264 = 0;
              }
            }
            else
            {
              v264 = 0;
              LOBYTE(v326) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
              v327 = *((_DWORD *)v2 + 5) & 0x1000;
            }
            if (!v327)
            {
              if ((v326 & 2) == 0)
              {
                v328 = 127;
                if (((v326 & 3) == 1) == ((*((_BYTE *)v2 + 123) & 4) == 0))
                  v328 = 128;
                goto LABEL_564;
              }
              v553 = ((unsigned __int16)*((_DWORD *)v2 + 31) >> 13) - 1;
              if (v553 >= 5)
              {
                v328 = 125;
                goto LABEL_564;
              }
              v554 = &unk_1969FC8B8;
LABEL_930:
              v328 = v554[v553];
              goto LABEL_564;
            }
            if ((v326 & 2) != 0)
            {
              v553 = ((unsigned __int16)*((_DWORD *)v1126 + 31) >> 13) - 1;
              if (v553 >= 5)
              {
                v328 = 127;
                v2 = v1126;
                goto LABEL_564;
              }
              v554 = &unk_1969FC890;
              v2 = v1126;
              goto LABEL_930;
            }
            v2 = v1126;
            v328 = 125;
            if (((v326 & 3) == 1) == ((*((_BYTE *)v1126 + 123) & 4) == 0))
              v328 = 126;
LABEL_564:
            v329 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)v2 + 8 * v328))(v2);
            v330 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
            if ((*((_BYTE *)v2 + 21) & 0x10) == 0)
            {
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
              {
                v7 = ((v330 & 3) == 1) == ((*((_BYTE *)v2 + 123) & 4) == 0);
                v331 = 118;
                if (v7)
                  v331 = 119;
                goto LABEL_568;
              }
              v555 = ((unsigned __int16)*((_DWORD *)v2 + 31) >> 13) - 1;
              if (v555 >= 5)
              {
                v331 = 116;
                goto LABEL_568;
              }
              v556 = &unk_1969FC908;
LABEL_933:
              v331 = v556[v555];
              goto LABEL_568;
            }
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
            {
              v555 = ((unsigned __int16)*((_DWORD *)v1126 + 31) >> 13) - 1;
              if (v555 >= 5)
              {
                v331 = 118;
                v2 = v1126;
                goto LABEL_568;
              }
              v556 = &unk_1969FC8E0;
              v2 = v1126;
              goto LABEL_933;
            }
            v2 = v1126;
            v7 = ((v330 & 3) == 1) == ((*((_BYTE *)v1126 + 123) & 4) == 0);
            v331 = 116;
            if (v7)
              v331 = 117;
LABEL_568:
            v332 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)v2 + 8 * v331))(v2);
            v333 = v329 + v332;
            if (__OFADD__(v329, v332))
              v333 = (v329 >> 31) + 0x7FFFFFFF;
            v1117 = v325;
            v334 = WebCore::initialJustifyContentOffset(v1125, (const WebCore::RenderStyle *)v325, SHIDWORD(v1159), *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 1);
            v336 = v333 + v334;
            if (__OFADD__(v333, v334))
              v336 = (v333 >> 31) + 0x7FFFFFFF;
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 3) == 1)
            {
              if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
              {
                if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
                  goto LABEL_2448;
LABEL_2033:
                v1045 = 169;
              }
              else
              {
                if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
                  goto LABEL_2033;
LABEL_2448:
                v1045 = 170;
              }
              v1093 = (*(uint64_t (**)(void))(*(_QWORD *)v1126 + 8 * v1045))();
              if (v1093 >= -33554432)
                v1094 = v1093 << 6;
              else
                v1094 = 0x80000000;
              if (v1093 > 0x1FFFFFF)
                v1094 = 0x7FFFFFFF;
              v563 = __OFADD__(v336, v1094);
              v1095 = v336 + v1094;
              if (v563)
                v336 = (v336 >> 31) + 0x7FFFFFFF;
              else
                v336 = v1095;
              v2 = v1126;
            }
            v337 = *((_QWORD *)v2 + 11);
            if ((v325 & 0x80000000) != 0)
            {
              v660 = *(_QWORD *)(v337 + 32);
              v662 = (unsigned __int16 *)(v660 + 122);
              v661 = *(_WORD *)(v660 + 122);
              if ((v661 & 0xE) == 8)
              {
                v1083 = *(_BYTE *)(*(_QWORD *)(v660 + 16) + 20) & 1;
                v1084 = WebCore::RenderFlexibleBox::leftRightAxisDirectionFromStyle(v1125, v335);
                if (WebCore::StyleContentAlignmentData::isEndward(v662, v1084, v1083))
                  v663 = 5;
                else
                  v663 = 4;
                v337 = *((_QWORD *)v2 + 11);
                v660 = *(_QWORD *)(v337 + 32);
              }
              else
              {
                v663 = v661 & 0xF;
              }
              v338 = *(_QWORD *)(v660 + 16);
              if ((v661 & 0x180) == 0x100)
              {
LABEL_1182:
                LODWORD(v664) = 0;
              }
              else if ((v661 & 0x60) == 0x20)
              {
LABEL_1322:
                v664 = ((-64 * (unint64_t)v325) >> 7) & 0x7FFFFFFF;
                if ((_DWORD)v325 == 0x80000000)
                  LODWORD(v664) = 0x3FFFFFFF;
              }
              else
              {
                v720 = v663 - 1;
                LODWORD(v664) = 0;
                switch(v720)
                {
                  case 0:
                  case 1:
                  case 3:
                    break;
                  case 2:
                    goto LABEL_1322;
                  case 4:
                    goto LABEL_1375;
                  case 5:
                    if ((*(_BYTE *)(v338 + 20) & 1) == 0)
                      goto LABEL_1182;
LABEL_1375:
                    if ((_DWORD)v325 == 0x80000000)
                      LODWORD(v664) = 0x7FFFFFFF;
                    else
                      LODWORD(v664) = -(int)v325;
                    break;
                  case 6:
                    if ((*(_BYTE *)(v338 + 20) & 1) == 0)
                      goto LABEL_2151;
                    goto LABEL_2149;
                  default:
                    if ((*(_BYTE *)(v338 + 20) & 1) != 0)
                    {
LABEL_2151:
                      if ((_DWORD)v325 == 0x80000000)
                        LODWORD(v664) = 0x7FFFFFFF;
                      else
                        LODWORD(v664) = -(int)v325;
                    }
                    else
                    {
LABEL_2149:
                      LODWORD(v664) = 0;
                    }
                    v2 = v1126;
                    break;
                }
              }
              if (*((_DWORD *)v2 + 97) > (int)v664)
                LODWORD(v664) = *((_DWORD *)v2 + 97);
              *((_DWORD *)v2 + 97) = v664;
            }
            else
            {
              v338 = *(_QWORD *)(*(_QWORD *)(v337 + 32) + 16);
            }
            v339 = *(_BYTE *)(v338 + 20);
            if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
            {
              if ((v339 & 2) != 0)
                goto LABEL_2274;
LABEL_577:
              LODWORD(v340) = v1131[1];
            }
            else
            {
              if ((v339 & 2) != 0)
                goto LABEL_577;
LABEL_2274:
              v340 = *(_QWORD *)v1131;
            }
            v1115 = v340;
            v1137 = 0;
            LOBYTE(v1180) = 0;
            v1182 = 0;
            v341 = *(_QWORD *)(v337 + 32);
            v342 = *(unsigned __int8 *)(v341 + 122);
            if ((v342 & 0x7F) != 0)
              v343 = (v342 >> 4) & 7;
            else
              v343 = 4;
            v1119 = v343;
            v344 = *(_BYTE *)(*(_QWORD *)(v341 + 16) + 20);
            if ((v344 & 2) == 0)
              v1137 = ((v344 & 3) == 1) ^ ((*((_BYTE *)v2 + 123) & 4) >> 2);
            if (HIDWORD(v1159))
            {
              v1113 = v264;
              v1114 = 0;
              v1121 = v325;
              v345 = 0;
              v1112 = 0;
              v346 = 0;
              while (1)
              {
                v347 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
                if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
                  v348 = (v347 >> 1) & 1;
                else
                  v348 = (v347 & 2) == 0;
                v349 = v1158;
                v350 = (char *)v1158 + 40 * v345;
                v351 = *(_QWORD *)v350;
                v354 = *((_DWORD *)v350 + 8);
                v352 = (int *)(v350 + 32);
                v353 = v354;
                v355 = *(_QWORD *)v351;
                if (v348 == (*(_BYTE *)(v351 + 21) & 0x10) >> 4)
                {
                  v410 = v1158;
                  v411 = (*(uint64_t (**)(uint64_t))(v355 + 1048))(v351);
                  v412 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v351 + 960))(v351);
                  if (__OFADD__(v411, v412))
                    v413 = (v411 >> 31) + 0x7FFFFFFF;
                  else
                    v413 = v411 + v412;
                  v414 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v351 + 1056))(v351);
                  v415 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v351 + 968))(v351);
                  v416 = v414 + v415;
                  if (__OFADD__(v414, v415))
                    v416 = (v414 >> 31) + 0x7FFFFFFF;
                  v563 = __OFADD__(v413, v416);
                  v417 = v413 + v416;
                  if (v563)
                    v417 = (v413 >> 31) + 0x7FFFFFFF;
                  v563 = __OFADD__(v353, v417);
                  v418 = v353 + v417;
                  if (v563)
                    v418 = (v353 >> 31) + 0x7FFFFFFF;
                  LODWORD(v1176) = v418;
                  v419 = (_QWORD *)WebCore::gOverridingLogicalHeightMap;
                  if (!WebCore::gOverridingLogicalHeightMap)
                  {
                    v419 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                    *v419 = 0;
                    v419[1] = 0;
                    WebCore::gOverridingLogicalHeightMap = (uint64_t)v419;
                  }
                  WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,WebCore::LayoutUnit&>((uint64_t)v419, (_QWORD *)v351, &v1176);
                  v349 = v410;
                  v2 = v1126;
                }
                else
                {
                  v356 = (*(uint64_t (**)(uint64_t))(v355 + 1064))(v351);
                  v357 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v351 + 1072))(v351);
                  if (__OFADD__(v356, v357))
                    v358 = (v356 >> 31) + 0x7FFFFFFF;
                  else
                    v358 = v356 + v357;
                  v359 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v351 + 976))(v351);
                  if (__OFADD__(v358, v359))
                    v360 = (v358 >> 31) + 0x7FFFFFFF;
                  else
                    v360 = v358 + v359;
                  v361 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v351 + 984))(v351);
                  v362 = v360 + v361;
                  if (__OFADD__(v360, v361))
                    v362 = (v360 >> 31) + 0x7FFFFFFF;
                  v563 = __OFADD__(v353, v362);
                  v363 = v353 + v362;
                  if (v563)
                    v363 = (v353 >> 31) + 0x7FFFFFFF;
                  LODWORD(v1176) = v363;
                  v364 = (_QWORD *)WebCore::gOverridingLogicalWidthMap;
                  if (!WebCore::gOverridingLogicalWidthMap)
                  {
                    v364 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                    *v364 = 0;
                    v364[1] = 0;
                    WebCore::gOverridingLogicalWidthMap = (uint64_t)v364;
                  }
                  WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,WebCore::LayoutUnit&>((uint64_t)v364, (_QWORD *)v351, &v1176);
                }
                v365 = *v352;
                if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
                {
                  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
                  {
LABEL_604:
                    v366 = *(_DWORD *)(v351 + 164);
                    v367 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v351 + 1000))(v351);
                    if (__OFSUB__(v366, v367))
                      v368 = (v366 >> 31) + 0x7FFFFFFF;
                    else
                      v368 = v366 - v367;
                    v369 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v351 + 1008))(v351);
                    if (__OFSUB__(v368, v369))
                      v370 = (v368 >> 31) + 0x7FFFFFFF;
                    else
                      v370 = v368 - v369;
                    v371 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v351 + 1360))(v351);
                    v372 = v371 << 6;
                    if (v371 < -33554432)
                      v372 = 0x80000000;
                    if (v371 > 0x1FFFFFF)
                      v372 = 0x7FFFFFFF;
                    v563 = __OFSUB__(v370, v372);
                    v373 = v370 - v372;
                    if (v563)
                      v373 = (v370 >> 31) + 0x7FFFFFFF;
                    v374 = v373 & ~(v373 >> 31);
                    v375 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v351 + 928))(v351);
                    v563 = __OFSUB__(v374, v375);
                    v376 = v374 - v375;
                    if (v563)
                      v376 = 0x7FFFFFFF;
                    v377 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v351 + 936))(v351);
                    if (__OFSUB__(v376, v377))
                      v378 = (v376 >> 31) + 0x7FFFFFFF;
                    else
                      v378 = v376 - v377;
                    if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v351 + 88) + 40) + 584) & 0x100) != 0)
                    {
                      v1062 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v351 + 1360))(v351);
                      v1063 = v1062 << 6;
                      if (v1062 > 0x1FFFFFF)
                        v1063 = 0x7FFFFFFF;
                      if (v1062 >= -33554432)
                        v379 = v1063;
                      else
                        v379 = 0x80000000;
                    }
                    else
                    {
                      v379 = 0;
                    }
                    v563 = __OFSUB__(v378, v379);
                    v380 = v378 - v379;
                    if (v563)
                      v380 = (v378 >> 31) + 0x7FFFFFFF;
                    v381 = v380 & ~(v380 >> 31);
                    v382 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v351 + 1360))(v351);
                    v384 = v382 << 6;
                    if (v382 < -33554432)
                      v384 = 0x80000000;
                    if (v382 > 0x1FFFFFF)
                      v384 = 0x7FFFFFFF;
                    v563 = __OFADD__(v381, v384);
                    v385 = v381 + v384;
                    if (v563)
                      v385 = 0x7FFFFFFF;
                    goto LABEL_633;
                  }
                }
                else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
                {
                  goto LABEL_604;
                }
                v1075 = WebCore::RenderBox::contentWidth((WebCore::RenderBox *)v351);
                v1076 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v351 + 1352))(v351);
                v1077 = v1076 << 6;
                if (v1076 < -33554432)
                  v1077 = 0x80000000;
                if (v1076 > 0x1FFFFFF)
                  v1077 = 0x7FFFFFFF;
                v563 = __OFADD__(v1075, v1077);
                v385 = v1075 + v1077;
                if (v563)
                  v385 = (v1075 >> 31) + 0x7FFFFFFF;
                v2 = v1126;
LABEL_633:
                if (v365 != v385)
                {
                  v409 = *(_DWORD *)(v351 + 20);
                  if ((v409 & 0x20) == 0)
                    *(_DWORD *)(v351 + 20) = v409 | 0x20;
                  goto LABEL_639;
                }
                if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
                {
                  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
                  {
LABEL_636:
                    v386 = *(_QWORD *)(*(_QWORD *)(v351 + 88) + 24);
                    if (*(_BYTE *)(v386 + 68))
                    {
                      v387 = (_BYTE *)(v386 + 52);
                      goto LABEL_638;
                    }
                    goto LABEL_1189;
                  }
                }
                else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
                {
                  goto LABEL_636;
                }
                v490 = *(_QWORD *)(*(_QWORD *)(v351 + 88) + 24);
                if (*(_BYTE *)(v490 + 44))
                {
                  v387 = (_BYTE *)(v490 + 60);
LABEL_638:
                  if (*v387)
                    goto LABEL_639;
                }
LABEL_1189:
                WebCore::RenderBox::updateLogicalHeight((WebCore::RenderBox *)v351);
                if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
                {
                  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
                  {
LABEL_1191:
                    v665 = *(_QWORD *)(*(_QWORD *)(v351 + 88) + 24);
                    if (!*(_BYTE *)(v665 + 44))
                      *(_DWORD *)(v351 + 168) = 0;
                    if (!*(_BYTE *)(v665 + 60))
                      *(_DWORD *)(v351 + 176) = 0;
                    goto LABEL_639;
                  }
                }
                else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
                {
                  goto LABEL_1191;
                }
                v1089 = *(_QWORD *)(*(_QWORD *)(v351 + 88) + 24);
                if (!*(_BYTE *)(v1089 + 68))
                  *(_DWORD *)(v351 + 180) = 0;
                if (!*(_BYTE *)(v1089 + 52))
                  *(_DWORD *)(v351 + 172) = 0;
LABEL_639:
                if (v1151)
                {
                  ++*((_DWORD *)v2 + 56);
                  v388 = *(_QWORD *)(v351 + 8);
                  if (v388)
                  {
                    if (*(_QWORD *)(v388 + 8))
                    {
                      v389 = *v1128;
                      if (*v1128)
                      {
                        v390 = *(_DWORD *)(v389 - 8);
                        v391 = (~(v388 << 32) + v388) ^ ((unint64_t)(~(v388 << 32) + v388) >> 22);
                        v392 = 9 * ((v391 + ~(v391 << 13)) ^ ((v391 + ~(v391 << 13)) >> 8));
                        v393 = (v392 ^ (v392 >> 15)) + ~((v392 ^ (v392 >> 15)) << 27);
                        v394 = v390 & ((v393 >> 31) ^ v393);
                        for (ii = 1; ; ++ii)
                        {
                          v396 = *(_QWORD *)(v389 + 8 * v394);
                          if (!v396)
                            break;
                          if (v396 != -1 && v396 == v388)
                            goto LABEL_650;
                          v394 = (v394 + ii) & v390;
                        }
                      }
                    }
                  }
                  v402 = *(_DWORD *)(v351 + 20);
                  if ((v402 & 0x1800000) != 0x1000000)
                    goto LABEL_663;
                  goto LABEL_665;
                }
LABEL_650:
                if ((*(_BYTE *)(v351 + 45) & 0x40) != 0)
                  v398 = (WebCore::RenderBlock *)v351;
                else
                  v398 = 0;
                if ((*(_BYTE *)(v351 + 45) & 0x40) == 0)
                {
                  v402 = *(_DWORD *)(v351 + 20);
                  if ((v402 & 0x1800000) == 0x1000000)
                    goto LABEL_665;
LABEL_660:
                  v403 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v351 + 1544))(v351);
                  v402 = *(_DWORD *)(v351 + 20);
                  if (!v403)
                    goto LABEL_665;
LABEL_663:
                  if ((v402 & 0x20) == 0)
                  {
                    v402 |= 0x20u;
                    *(_DWORD *)(v351 + 20) = v402;
                  }
                  goto LABEL_665;
                }
                ++*(_DWORD *)(v351 + 16);
                if (WebCore::RenderBlock::hasPercentHeightDescendants(v2, v383))
                {
                  if (WebCore::RenderBox::skipContainingBlockForPercentHeightCalculation(v2, (const WebCore::RenderBox *)v351, ((*((_DWORD *)v2 + 5) & 0x1000) == 0) ^ ((*(_DWORD *)(v351 + 20) & 0x1000) == 0)))
                  {
                    v1110 = WebCore::RenderBlock::percentHeightDescendants(v2);
                    v581 = *(_QWORD **)(v1110 + 8);
                    if (v581)
                    {
                      v1108 = v346;
                      while (1)
                      {
                        v582 = v349;
                        v583 = v336;
                        v399 = *(WebCore::RenderObject **)(*v581 + 8);
                        if (v399)
                          break;
                        v581 = (_QWORD *)v581[2];
                        v346 = v1108;
                        if (!v581)
                          goto LABEL_655;
                      }
                      if (WebCore::RenderBlock::isContainingBlockAncestorFor(v398, v399))
                      {
                        LOBYTE(v400) = 1;
                        v346 = v1108;
                        goto LABEL_657;
                      }
                      while (1)
                      {
                        v581 = (_QWORD *)v581[2];
                        if (!v581)
                          break;
                        v399 = *(WebCore::RenderObject **)(*v581 + 8);
                        if (v399)
                        {
                          ++*(_DWORD *)(v1110 + 24);
                          isContainingBlockAncestorFor = WebCore::RenderBlock::isContainingBlockAncestorFor(v398, v399);
                          LOBYTE(v400) = 1;
                          v336 = v583;
                          v346 = v1108;
                          v349 = v582;
                          if (isContainingBlockAncestorFor)
                            goto LABEL_657;
                        }
                      }
                      ++*(_DWORD *)(v1110 + 24);
                      v336 = v583;
                      v346 = v1108;
                      v349 = v582;
                    }
                  }
                }
LABEL_655:
                if (!WebCore::RenderBlock::hasPercentHeightDescendants(v398, v399))
                  goto LABEL_656;
                v619 = (uint64_t *)WebCore::percentHeightDescendantsMap;
                if (!WebCore::percentHeightDescendantsMap)
                  goto LABEL_656;
                ++*(_DWORD *)(WebCore::percentHeightDescendantsMap + 8);
                v400 = *((_QWORD *)v398 + 1);
                if (v400)
                {
                  if (*(_QWORD *)(v400 + 8))
                  {
                    v620 = *v619;
                    if (v620)
                    {
                      v621 = *(_DWORD *)(v620 - 8);
                      v622 = (~(v400 << 32) + v400) ^ ((unint64_t)(~(v400 << 32) + v400) >> 22);
                      v623 = 9 * ((v622 + ~(v622 << 13)) ^ ((v622 + ~(v622 << 13)) >> 8));
                      v624 = (v623 ^ (v623 >> 15)) + ~((v623 ^ (v623 >> 15)) << 27);
                      v625 = v621 & ((v624 >> 31) ^ v624);
                      for (jj = 1; ; ++jj)
                      {
                        v627 = *(_QWORD *)(v620 + 16 * v625);
                        if (!v627)
                          break;
                        if (v627 != -1 && v627 == v400)
                        {
                          v666 = *(_QWORD *)(v620 + 16 * v625 + 8);
                          if (!v666)
                            break;
                          v667 = *(_QWORD **)(v666 + 8);
                          if (!v667)
                            break;
                          while (1)
                          {
                            v668 = *(WebCore::RenderObject **)(*v667 + 8);
                            if (v668)
                              break;
                            LOBYTE(v400) = 0;
                            v667 = (_QWORD *)v667[2];
                            if (!v667)
                              goto LABEL_657;
                          }
                          v669 = WebCore::RenderObject::containingBlock(v668);
                          if (v669)
                            v670 = v669 == v398;
                          else
                            v670 = 1;
                          if (v670)
                          {
                            LOBYTE(v400) = 1;
                          }
                          else
                          {
                            do
                            {
                              if ((*((_DWORD *)v669 + 5) & 0x1800000) == 0x1000000)
                              {
                                do
                                {
                                  v667 = (_QWORD *)v667[2];
                                  if (!v667)
                                  {
                                    LOBYTE(v400) = 0;
                                    ++*(_DWORD *)(v666 + 24);
                                    goto LABEL_657;
                                  }
                                  v1107 = *(WebCore::RenderObject **)(*v667 + 8);
                                }
                                while (!v1107);
                                ++*(_DWORD *)(v666 + 24);
                                v669 = WebCore::RenderObject::containingBlock(v1107);
                                LOBYTE(v400) = 1;
                                if (v669)
                                  v1106 = v669 == v398;
                                else
                                  v1106 = 1;
                              }
                              else
                              {
                                v669 = WebCore::RenderObject::containingBlock(v669);
                                LOBYTE(v400) = 1;
                                if (!v669)
                                  goto LABEL_657;
                                v1106 = v669 == v398;
                              }
                            }
                            while (!v1106);
                          }
                          goto LABEL_657;
                        }
                        v625 = (v625 + jj) & v621;
                      }
                    }
                  }
LABEL_656:
                  LOBYTE(v400) = 0;
                }
LABEL_657:
                v401 = *(_DWORD *)(v351 + 16);
                if (!v401)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1943C375CLL);
                }
                *(_DWORD *)(v351 + 16) = v401 - 1;
                v402 = *(_DWORD *)(v351 + 20);
                v2 = v1126;
                if ((v402 & 0x1800000) != 0x1000000)
                {
                  if ((v400 & 1) == 0)
                    goto LABEL_660;
                  goto LABEL_663;
                }
LABEL_665:
                if ((v402 & 0xF8) != 0
                  || ((*(void (**)(uint64_t))(*(_QWORD *)v351 + 1512))(v351),
                      (*(_BYTE *)(v351 + 20) & 0xF8) != 0))
                {
                  WTF::WeakHashSet<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBox>((uint64_t)v1128, (_QWORD *)v351, (uint64_t)&v1176);
                  if ((*(_BYTE *)(v351 + 20) & 0xF8) != 0)
                  {
                    v404 = *(_QWORD *)(v351 + 32);
                    if (v404
                      && (v405 = *(_QWORD *)(v404 + 8)) != 0
                      && (*(_BYTE *)(*(_QWORD *)(v405 + 104) + 239) & 0x18) != 0
                      && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v351 + 24)
                                                                                               + 8)
                                                                                   + 40)
                                                                       + 8)
                                                           + 1944)
                                               + 248)
                                   + 479))
                    {
                      WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v351);
                    }
                    else
                    {
                      (*(void (**)(uint64_t))(*(_QWORD *)v351 + 688))(v351);
                    }
                  }
                }
                if (!*((_BYTE *)v349 + 40 * v345 + 37))
                {
                  v406 = *(_DWORD *)(v351 + 20);
                  if ((v406 & 0x200) != 0)
                  {
                    if ((v406 & 0x8000) == 0)
                      goto LABEL_674;
                    if ((*(_BYTE *)(v351 + 45) & 0x10) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1943C39B4);
                    }
                    v489 = *(_QWORD *)(v351 + 144);
                    if (!v489 || (*(_BYTE *)(v489 + 25) & 8) == 0)
                    {
LABEL_674:
                      v407 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v351 + 24) + 8) + 40) + 8);
                      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v407 + 528) + 8) + 288) + 476))
                      {
                        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v407 + 1944) + 24)
                                                                           + 8)
                                                               + 40)
                                                   + 8)
                                       + 3382))
                        {
                          LOBYTE(v1176) = 0;
                          v1177[8] = 0;
                          LOBYTE(v1183) = 0;
                          v1185 = 0;
                          WebCore::RenderObject::issueRepaint(v351, (__int128 *)&v1176, 0, 0, (uint64_t)&v1183);
                        }
                        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v351 + 1296))(v351, 1);
                      }
                    }
                  }
                }
                if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
                {
                  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
                  {
LABEL_680:
                    v408 = *(_QWORD *)(*(_QWORD *)(v351 + 88) + 24);
                    if (!*(_BYTE *)(v408 + 68))
                      *(_DWORD *)(v351 + 180) = v1113;
                    if (!*(_BYTE *)(v408 + 52))
                      *(_DWORD *)(v351 + 172) = v1113;
                    goto LABEL_706;
                  }
                }
                else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
                {
                  goto LABEL_680;
                }
                v420 = *(_QWORD *)(*(_QWORD *)(v351 + 88) + 24);
                if (!*(_BYTE *)(v420 + 44))
                  *(_DWORD *)(v351 + 168) = v1113;
                if (!*(_BYTE *)(v420 + 60))
                  *(_DWORD *)(v351 + 176) = v1113;
LABEL_706:
                v421 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *, _QWORD))(*(_QWORD *)v2 + 1600))(v2, 0);
                v422 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v351 + 88) + 32) + 125);
                v423 = v422 & 0xF;
                if (v423 == 1)
                {
                  v422 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 124);
                  v423 = v422 & 0xF;
                }
                if (v423 < 3)
                  v422 = v421;
                v424 = v422 & 0xF;
                if ((v424 - 7) < 2)
                {
LABEL_716:
                  v426 = *((_DWORD *)v2 + 5);
                  v427 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
                  if ((v426 & 0x1000) != 0)
                    v428 = (v427 >> 1) & 1;
                  else
                    v428 = (v427 & 2) == 0;
                  v429 = *(_DWORD *)(v351 + 20);
                  if (v428 == (unsigned __int16)(v429 & 0x1000) >> 12)
                  {
                    v430 = ((*(_DWORD *)(v351 + 124) >> 13) & 6) - 2;
                    v431 = *(_QWORD *)(*(_QWORD *)(v351 + 88) + 8);
                    if (v430 < 4)
                      v432 = (unsigned __int8 *)(v431 + 12);
                    else
                      v432 = (unsigned __int8 *)(v431 + 4);
                    v433 = v432[4];
                    if (v432[4])
                    {
                      if ((v433 & 0xFFFFFFF7) == 3)
                      {
                        if ((v426 & 0x1000) != 0)
                          v447 = (v427 >> 1) & 1;
                        else
                          v447 = (v427 & 2) == 0;
                        if (v447 != (unsigned __int16)(v429 & 0x1000) >> 12 && *((_BYTE *)v2 + 392))
                        {
                          if (*((_BYTE *)v2 + 392) == 1)
                            goto LABEL_722;
                          v743 = WebCore::RenderBox::computePercentageLogicalHeight(v351, (WebCore::Length *)v432, 1) & 0xFF00000000;
                          *((_BYTE *)v2 + 392) = v743 == 0;
                          if (!v743)
                            goto LABEL_722;
                          v430 = ((*(_DWORD *)(v351 + 124) >> 13) & 6) - 2;
                        }
                      }
                      else if (v433 != 4)
                      {
                        goto LABEL_722;
                      }
                      if (v430 < 4)
                        v448 = (unsigned int *)(v351 + 164);
                      else
                        v448 = (unsigned int *)(v351 + 160);
                      v437 = *v448;
                    }
                    else
                    {
LABEL_722:
                      v1176 = 0;
                      *(_OWORD *)v1177 = 0uLL;
                      v434 = WebCore::RenderBox::overridingLogicalWidth((WebCore::RenderBox *)v351);
                      WebCore::RenderBox::clearOverridingLogicalWidth(v351, v435);
                      WebCore::RenderBox::computeLogicalWidthInFragment((WebCore::RenderBox *)v351, (int *)&v1176, 0);
                      if ((v434 & 0xFF00000000) != 0)
                        WebCore::RenderBox::setOverridingLogicalWidth((_QWORD *)v351, v434);
                      else
                        WebCore::RenderBox::clearOverridingLogicalWidth(v351, v436);
                      v437 = v1176;
                    }
                  }
                  else
                  {
                    v437 = WebCore::RenderFlexibleBox::childIntrinsicLogicalHeight(v2, (WebCore::RenderBox *)v351);
                  }
                  if ((*(_BYTE *)(v351 + 20) & 0xF8) == 0)
                  {
                    if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
                    {
                      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
                        goto LABEL_728;
                    }
                    else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
                    {
LABEL_728:
                      v438 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v351 + 1096))(v351);
                      v439 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v351 + 1104))(v351);
                      v440 = v438 + v439;
                      if (__OFADD__(v438, v439))
                        v440 = (v438 >> 31) + 0x7FFFFFFF;
                      goto LABEL_730;
                    }
                    v1078 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v351 + 1080))(v351);
                    v1079 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v351 + 1088))(v351);
                    v440 = v1078 + v1079;
                    if (__OFADD__(v1078, v1079))
                      v440 = (v1078 >> 31) + 0x7FFFFFFF;
LABEL_2480:
                    v2 = v1126;
LABEL_730:
                    v441 = v437 + v440;
                    if (__OFADD__(v437, v440))
                      v441 = (v437 >> 31) + 0x7FFFFFFF;
                    goto LABEL_732;
                  }
                  LODWORD(v1176) = 0;
                  LODWORD(v1183) = 0;
                  if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
                  {
                    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
                      goto LABEL_2475;
LABEL_2135:
                    WebCore::RenderBox::computeBlockDirectionMargins((WebCore::RenderBox *)v351, v1126, (WebCore::LayoutUnit *)&v1176, (WebCore::LayoutUnit *)&v1183);
                  }
                  else
                  {
                    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
                      goto LABEL_2135;
LABEL_2475:
                    v1101 = WebCore::RenderBox::containingBlockLogicalWidthForContentInFragment((WebCore::RenderBox *)v351, 0);
                    if (((*(_DWORD *)(v351 + 124) >> 13) & 6u) - 2 < 4)
                      v1102 = (unsigned int *)(v351 + 164);
                    else
                      v1102 = (unsigned int *)(v351 + 160);
                    WebCore::RenderBox::computeInlineDirectionMargins((int *)v351, v1126, v1101, *v1102 | 0x100000000, 0, (int *)&v1176, (int *)&v1183);
                  }
                  v440 = (_DWORD)v1176 + v1183;
                  if (__OFADD__((_DWORD)v1176, (_DWORD)v1183))
                    v440 = (v1176 >> 31) + 0x7FFFFFFF;
                  goto LABEL_2480;
                }
                if (v424 == 4)
                {
                  v685 = *((_DWORD *)v2 + 5);
                  v425 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
                  v686 = v425 & 2;
                  if ((v685 & 0x1000) != 0)
                    v687 = v686 != 0;
                  else
                    v687 = v686 == 0;
                  if (v687 != (*(_BYTE *)(v351 + 21) & 0x10) >> 4)
                  {
                    LOBYTE(v424) = 4;
                    v688 = 1;
                    goto LABEL_1250;
                  }
                  v424 = 11;
                  goto LABEL_714;
                }
                if ((v424 - 9) >= 2)
                {
                  v425 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
LABEL_714:
                  if ((v425 & 0xC) == 8 && (v424 - 11) < 2)
                    goto LABEL_716;
                  goto LABEL_715;
                }
                v1057 = (unsigned __int16)*((_DWORD *)v2 + 31) >> 13;
                v1058 = v1057 - 1;
                v1104 = 2;
                switch((unsigned __int16)*((_DWORD *)v2 + 31) >> 13)
                {
                  case 1:
                  case 2:
                    goto LABEL_2090;
                  case 3:
                  case 5:
                    LOBYTE(v1057) = 3;
                    goto LABEL_2090;
                  case 4:
                    goto LABEL_2091;
                  default:
                    LOBYTE(v1057) = 0;
LABEL_2090:
                    v1104 = v1057;
LABEL_2091:
                    v1059 = v1104 & 6;
                    v1060 = (unsigned __int16)*(_DWORD *)(v351 + 124) >> 13;
                    if ((v1060 - 2) < 2 || v1060 == 4 || v1060 == 5)
                    {
                      if (v1059 != 2)
                      {
LABEL_2095:
                        switch(v1058)
                        {
                          case 0:
                          case 2:
                          case 4:
                            if ((*(_BYTE *)(v351 + 123) & 4) == 0)
                              goto LABEL_2493;
                            goto LABEL_2097;
                          default:
                            if ((*(_BYTE *)(v351 + 123) & 4) == 0)
                              goto LABEL_2097;
                            goto LABEL_2493;
                        }
                      }
                    }
                    else if (v1059 == 2)
                    {
                      goto LABEL_2095;
                    }
                    isFlippedLinesWritingMode = WebCore::RenderStyle::isFlippedLinesWritingMode(v1125);
                    if (isFlippedLinesWritingMode == WebCore::RenderStyle::isFlippedLinesWritingMode((WebCore::RenderStyle *)(v351 + 80))
                      && ((*((_BYTE *)v1126 + 123) & 4) == 0) == ((*(_BYTE *)(v351 + 123) & 4) == 0))
                    {
LABEL_2097:
                      if (v424 == 9)
                        LOBYTE(v424) = 11;
                      else
                        LOBYTE(v424) = 12;
                    }
                    else
                    {
LABEL_2493:
                      if (v424 == 9)
                        LOBYTE(v424) = 12;
                      else
                        LOBYTE(v424) = 11;
                    }
                    v2 = v1126;
                    break;
                }
LABEL_715:
                if ((v424 & 0xFE) != 4)
                  goto LABEL_716;
                v688 = v424 == 4;
                v685 = *((_DWORD *)v2 + 5);
                v686 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2;
LABEL_1250:
                if ((v685 & 0x1000) != 0)
                {
                  if (!v686)
                  {
LABEL_1252:
                    v689 = *(_QWORD *)(*(_QWORD *)(v351 + 88) + 24);
                    if (!*(_BYTE *)(v689 + 68))
                      goto LABEL_716;
                    v690 = (_BYTE *)(v689 + 52);
                    goto LABEL_1254;
                  }
                }
                else if (v686)
                {
                  goto LABEL_1252;
                }
                v1091 = *(_QWORD *)(*(_QWORD *)(v351 + 88) + 24);
                if (!*(_BYTE *)(v1091 + 44))
                  goto LABEL_716;
                v690 = (_BYTE *)(v1091 + 60);
LABEL_1254:
                if (!*v690)
                  goto LABEL_716;
                v691 = WebCore::RenderFlexibleBox::marginBoxAscentForChild(v2, (const WebCore::RenderBox *)v351);
                v692 = WebCore::RenderFlexibleBox::crossAxisMarginExtentForChild(v2, (const WebCore::RenderBox *)v351);
                if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
                {
                  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
                  {
LABEL_2426:
                    v693 = (int *)(v351 + 164);
                    goto LABEL_1258;
                  }
                }
                else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
                {
                  goto LABEL_2426;
                }
                v693 = (int *)(v351 + 160);
LABEL_1258:
                v694 = *v693;
                v563 = __OFADD__(v692, v694);
                v695 = v692 + v694;
                if (v563)
                  v695 = (v692 >> 31) + 0x7FFFFFFF;
                v696 = v695 - v691;
                if (__OFSUB__(v695, v691))
                  v696 = (v695 >> 31) + 0x7FFFFFFF;
                v697 = HIDWORD(v1114);
                if (SHIDWORD(v1114) <= v696)
                  v697 = v696;
                HIDWORD(v1114) = v697;
                if (v1182)
                {
                  WebCore::BaselineAlignmentState::updateSharedGroup((unint64_t)&v1180, (_DWORD *)v351, v424, v691);
                }
                else
                {
                  v1183 = 0;
                  v1184 = 0;
                  CompatibleSharedGroup = WebCore::BaselineAlignmentState::findCompatibleSharedGroup((unint64_t)&v1183, (_DWORD *)v351, v424);
                  WTF::WeakHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBox>(CompatibleSharedGroup + 8, (_QWORD *)v351, (uint64_t)&v1176);
                  if (v1177[8])
                  {
                    v700 = *(_DWORD *)(CompatibleSharedGroup + 4);
                    if (v700 <= v691)
                      v700 = v691;
                    *(_DWORD *)(CompatibleSharedGroup + 4) = v700;
                  }
                  if (v1182)
                  {
                    v701 = (WTF *)v1180;
                    if (HIDWORD(v1181))
                    {
                      v1111 = v691;
                      v702 = (WTF *)&v1180[24 * HIDWORD(v1181)];
                      do
                      {
                        v703 = *((_QWORD *)v701 + 1);
                        if (v703)
                        {
                          v1109 = v688;
                          v704 = *(unsigned int *)(v703 - 4);
                          if ((_DWORD)v704)
                          {
                            v705 = (WTF **)*((_QWORD *)v701 + 1);
                            do
                            {
                              v706 = *v705;
                              if (*v705 != (WTF *)-1)
                              {
                                *v705 = 0;
                                if (v706)
                                {
                                  if (*(_DWORD *)v706 == 1)
                                    WTF::fastFree(v706, v699);
                                  else
                                    --*(_DWORD *)v706;
                                }
                              }
                              ++v705;
                              --v704;
                            }
                            while (v704);
                          }
                          WTF::fastFree((WTF *)(v703 - 16), v699);
                          v688 = v1109;
                        }
                        v701 = (WTF *)((char *)v701 + 24);
                      }
                      while (v701 != v702);
                      v701 = (WTF *)v1180;
                      v691 = v1111;
                    }
                    if (v701)
                    {
                      v1180 = 0;
                      LODWORD(v1181) = 0;
                      WTF::fastFree(v701, v699);
                    }
                    v1180 = (char *)v1183;
                    v1181 = v1184;
                  }
                  else
                  {
                    v1180 = (char *)v1183;
                    v1181 = v1184;
                    v1182 = 1;
                  }
                }
                if (v688)
                {
                  v721 = v1114;
                  if ((int)v1114 <= v691)
                    v721 = v691;
                  LODWORD(v1114) = v721;
                  v441 = v721 + HIDWORD(v1114);
                  if (__OFADD__(v721, HIDWORD(v1114)))
                    v441 = 0x7FFFFFFF;
                }
                else
                {
                  v742 = v1112;
                  if (v1112 <= v691)
                    v742 = v691;
                  v1112 = v742;
                  v441 = v742 + HIDWORD(v1114);
                  if (__OFADD__(v742, HIDWORD(v1114)))
                    v441 = 0x7FFFFFFF;
                  v2 = v1126;
                }
LABEL_732:
                v442 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
                if ((v442 & 2) != 0)
                  goto LABEL_771;
                v443 = *((_DWORD *)v2 + 31);
                v444 = 164;
                if (((v443 >> 13) & 6) - 2 < 4)
                  v444 = 160;
                v445 = ((unsigned __int16)v443 >> 13) - 1;
                if (v445 > 4)
                  v446 = 126;
                else
                  v446 = qword_1969FC930[v445];
                v449 = *(_DWORD *)((char *)v2 + v444);
                v450 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)v2 + 8 * v446))(v2);
                v451 = v1155 + v450;
                if (__OFADD__(v1155, v450))
                  v451 = (v1155 >> 31) + 0x7FFFFFFF;
                v452 = (unsigned __int16)*((_DWORD *)v2 + 31) >> 13;
                v453 = 0x30203020100uLL >> (8 * v452);
                if (v452 > 5)
                  LOBYTE(v453) = 0;
                if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
                  goto LABEL_750;
                v488 = *((_DWORD *)v2 + 30);
                if (v452 <= 5 && ((3u >> v452) & 1) == 0)
                {
                  LODWORD(v453) = (v488 >> 26) & 1;
LABEL_750:
                  if (v453 > 3u)
                    v454 = 116;
                  else
                    v454 = qword_1969FC958[(char)v453];
                  goto LABEL_753;
                }
                v7 = (v488 & 0x4000000) == 0;
                v454 = 118;
                if (v7)
                  v454 = 119;
LABEL_753:
                v455 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)v2 + 8 * v454))(v2);
                v456 = v451 + v455;
                if (__OFADD__(v451, v455))
                  v456 = (v451 >> 31) + 0x7FFFFFFF;
                v457 = v456 + v441;
                if (__OFADD__(v456, v441))
                  v457 = (v456 >> 31) + 0x7FFFFFFF;
                if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
                {
                  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
                  {
LABEL_2288:
                    v458 = 169;
                    goto LABEL_760;
                  }
                }
                else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
                {
                  goto LABEL_2288;
                }
                v458 = 170;
LABEL_760:
                v459 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)v2 + 8 * v458))(v2);
                v460 = v459 << 6;
                if (v459 < -33554432)
                  v460 = 0x80000000;
                if (v459 > 0x1FFFFFF)
                  v460 = 0x7FFFFFFF;
                v563 = __OFADD__(v457, v460);
                v461 = v457 + v460;
                if (v563)
                  v461 = (v457 >> 31) + 0x7FFFFFFF;
                if (v449 > v461)
                  v461 = v449;
                v462 = 164;
                if (((*((_DWORD *)v2 + 31) >> 13) & 6u) - 2 < 4)
                  v462 = 160;
                *(_DWORD *)((char *)v2 + v462) = v461;
                v442 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
LABEL_771:
                if (v346 <= v441)
                  v346 = v441;
                if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
                {
                  if ((v442 & 2) != 0)
                  {
                    v480 = ((unsigned __int16)*((_DWORD *)v1126 + 31) >> 13) - 1;
                    if (v480 < 5)
                    {
                      v481 = &unk_1969FCA38;
                      v2 = v1126;
                      goto LABEL_805;
                    }
                    v463 = 137;
                    v2 = v1126;
                  }
                  else
                  {
                    v2 = v1126;
                    v7 = ((v442 & 3) == 1) == ((*((_BYTE *)v1126 + 123) & 4) == 0);
                    v463 = 135;
                    if (v7)
                      v463 = 136;
                  }
                }
                else if ((v442 & 2) != 0)
                {
                  v480 = ((unsigned __int16)*((_DWORD *)v2 + 31) >> 13) - 1;
                  if (v480 < 5)
                  {
                    v481 = &unk_1969FCA60;
LABEL_805:
                    v463 = v481[v480];
                    goto LABEL_777;
                  }
                  v463 = 135;
                }
                else
                {
                  v7 = ((v442 & 3) == 1) == ((*((_BYTE *)v2 + 123) & 4) == 0);
                  v463 = 137;
                  if (v7)
                    v463 = 138;
                }
LABEL_777:
                v464 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v351 + 8 * v463))(v351);
                v465 = v336 + v464;
                if (__OFADD__(v336, v464))
                  v465 = (v336 >> 31) + 0x7FFFFFFF;
                v466 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
                if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
                {
                  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
                  {
LABEL_781:
                    LODWORD(v467) = *(_DWORD *)(v351 + 164);
                    goto LABEL_782;
                  }
                }
                else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
                {
                  goto LABEL_781;
                }
                v467 = *(_QWORD *)(v351 + 160);
LABEL_782:
                v468 = v465;
                if (v1137)
                {
                  v1054 = v1115 - v465;
                  if (__OFSUB__(v1115, (_DWORD)v465))
                    v1054 = (v1115 >> 31) + 0x7FFFFFFF;
                  v468 = v1054 - v467;
                  if (__OFSUB__(v1054, (_DWORD)v467))
                    v468 = (v1054 >> 31) + 0x7FFFFFFF;
                  v2 = v1126;
                }
                v469 = (unsigned __int16)*((_DWORD *)v2 + 31) >> 13;
                v470 = 0x30203020100uLL >> (8 * v469);
                if (v469 > 5)
                  LOBYTE(v470) = 0;
                if ((v466 & 2) != 0)
                {
                  v487 = *((_DWORD *)v2 + 30);
                  if (v469 > 5 || ((3u >> v469) & 1) != 0)
                  {
                    if ((v487 & 0x4000000) != 0)
                    {
LABEL_831:
                      v471 = (_QWORD *)v351;
                      v472 = 138;
                    }
                    else
                    {
LABEL_823:
                      v471 = (_QWORD *)v351;
                      v472 = 137;
                    }
                    goto LABEL_787;
                  }
                  LODWORD(v470) = (v487 >> 26) & 1;
                }
                v471 = (_QWORD *)v351;
                v472 = 135;
                switch((char)v470)
                {
                  case 0:
                    break;
                  case 1:
                    v472 = 136;
                    v471 = (_QWORD *)v351;
                    break;
                  case 2:
                    goto LABEL_823;
                  case 3:
                    goto LABEL_831;
                  default:
                    v472 = 135;
                    v471 = v2;
                    break;
                }
LABEL_787:
                v473 = (*(uint64_t (**)(void))(*v471 + 8 * v472))();
                v474 = v1155 + v473;
                if (__OFADD__(v1155, v473))
                  v474 = (v1155 >> 31) + 0x7FFFFFFF;
                if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
                {
                  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
                  {
LABEL_791:
                    v475 = v468 | (unint64_t)(v474 << 32);
                    goto LABEL_792;
                  }
                }
                else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
                {
                  goto LABEL_791;
                }
                v475 = v474 | (unint64_t)(v468 << 32);
LABEL_792:
                *(_QWORD *)(v351 + 152) = v475;
                v476 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
                if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
                {
                  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
                  {
                    v482 = ((unsigned __int16)*((_DWORD *)v1126 + 31) >> 13) - 1;
                    if (v482 < 5)
                    {
                      v483 = &unk_1969FC9E8;
                      v2 = v1126;
                      goto LABEL_808;
                    }
                    v477 = 138;
                    v2 = v1126;
                  }
                  else
                  {
                    v2 = v1126;
                    v7 = ((v476 & 3) == 1) == ((*((_BYTE *)v1126 + 123) & 4) == 0);
                    v477 = 135;
                    if (!v7)
                      v477 = 136;
                  }
                }
                else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
                {
                  v482 = ((unsigned __int16)*((_DWORD *)v2 + 31) >> 13) - 1;
                  if (v482 < 5)
                  {
                    v483 = &unk_1969FCA10;
LABEL_808:
                    v477 = v483[v482];
                    goto LABEL_796;
                  }
                  v477 = 136;
                }
                else
                {
                  v7 = ((v476 & 3) == 1) == ((*((_BYTE *)v2 + 123) & 4) == 0);
                  v477 = 137;
                  if (!v7)
                    v477 = 138;
                }
LABEL_796:
                v478 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v351 + 8 * v477))(v351);
                v479 = v467 + v478;
                if (__OFADD__((_DWORD)v467, v478))
                  v479 = (v467 >> 31) + 0x7FFFFFFF;
                v336 = v465 + v479;
                if (__OFADD__((_DWORD)v465, v479))
                  v336 = (v465 >> 31) + 0x7FFFFFFF;
                if (v345 == HIDWORD(v1159) - 1)
                  goto LABEL_801;
                LODWORD(v484) = 0;
                if (v1121 >= 1 && HIDWORD(v1159) >= 2)
                {
                  switch(v1119)
                  {
                    case 1:
                      v629 = HIDWORD(v1159) - 1;
                      goto LABEL_1106;
                    case 2:
                      v629 = HIDWORD(v1159);
                      goto LABEL_1106;
                    case 3:
                      v629 = HIDWORD(v1159) + 1;
LABEL_1106:
                      if (v629 <= 0x1FFFFFE)
                        v630 = v629 << 6;
                      else
                        v630 = 0x7FFFFFFFLL;
                      v484 = (v1117 << 6) / v630;
                      if (v484 >= 0x7FFFFFFF)
                        LODWORD(v484) = 0x7FFFFFFF;
                      goto LABEL_816;
                  }
                  LODWORD(v484) = 0;
                }
LABEL_816:
                v563 = __OFADD__((_DWORD)v484, v1134);
                v485 = v484 + v1134;
                if (v563)
                  v485 = 0x7FFFFFFF;
                v563 = __OFADD__(v336, v485);
                v486 = v336 + v485;
                if (v563)
                  v336 = (v336 >> 31) + 0x7FFFFFFF;
                else
                  v336 = v486;
LABEL_801:
                if (++v345 >= (unint64_t)HIDWORD(v1159))
                {
                  v337 = *((_QWORD *)v2 + 11);
                  v344 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v337 + 32) + 16) + 20);
                  goto LABEL_839;
                }
              }
            }
            v346 = 0;
LABEL_839:
            if ((v344 & 2) == 0)
            {
LABEL_840:
              if ((~*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v337 + 32) + 16) + 20) & 3) == 0)
              {
                WebCore::RenderBox::updateLogicalHeight(v2);
                WebCore::RenderFlexibleBox::layoutColumnReverse((uint64_t *)v2, (uint64_t *)&v1158, v1155, v1117, v1134);
              }
              v491 = HIDWORD(v1159);
              if (!*((_BYTE *)v2 + 296))
              {
                *((_QWORD *)v2 + 36) = HIDWORD(v1159);
                *((_BYTE *)v2 + 296) = 1;
              }
              *((_QWORD *)v2 + 38) = v491;
              *((_BYTE *)v2 + 312) = 1;
              v492 = v1182;
              if (v1182)
              {
                v493 = HIDWORD(v1181);
                if (HIDWORD(v1181))
                {
                  if (HIDWORD(v1181) >= 0xAAAAAABuLL)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1943C6B78);
                  }
                  v494 = 24 * HIDWORD(v1181);
                  v495 = WTF::fastMalloc((WTF *)(24 * HIDWORD(v1181)));
                  v496 = (WTF *)v495;
                  if (HIDWORD(v1181))
                  {
                    v497 = &v1180[24 * HIDWORD(v1181)];
                    v498 = (uint64_t *)(v495 + 8);
                    v499 = v1180 + 8;
                    do
                    {
                      *(v498 - 1) = *(v499 - 1);
                      v500 = WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::HashTable(v498, v499);
                      v500[1] = v499[1];
                      v498 = v500 + 3;
                      v501 = (char *)(v499 + 2);
                      v499 += 3;
                    }
                    while (v501 != v497);
                  }
                  v1176 = (WTF *)__PAIR64__(v346, v1155);
                  v1177[16] = 0;
                  *(_QWORD *)v1177 = 0;
                  *(_DWORD *)&v1177[8] = 0;
                  *(_DWORD *)&v1177[12] = v493;
                  v502 = WTF::fastMalloc((WTF *)(24 * v493));
                  v503 = 0;
                  *(_DWORD *)&v1177[8] = v494 / 0x18;
                  *(_QWORD *)v1177 = v502;
                  do
                  {
                    v504 = (char *)v496 + v503;
                    *(_QWORD *)(v502 + v503) = *(_QWORD *)((char *)v496 + v503);
                    WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::HashTable((uint64_t *)(v502 + v503 + 8), (WTF *)((char *)v496 + v503 + 8));
                    *(_QWORD *)(v502 + v503 + 16) = *(_QWORD *)((char *)v496 + v503 + 16);
                    v503 += 24;
                  }
                  while (v504 + 24 != (char *)v496 + 24 * v493);
                  v491 = HIDWORD(v1159);
                  v505 = 1;
                }
                else
                {
                  v493 = 0;
                  v496 = 0;
                  v1176 = (WTF *)__PAIR64__(v346, v1155);
                  v505 = 1;
                  *(_OWORD *)v1177 = 0uLL;
                }
              }
              else
              {
                v505 = 0;
                v493 = 0;
                v496 = 0;
                v1176 = (WTF *)__PAIR64__(v346, v1155);
                v1177[0] = 0;
              }
              v1177[16] = v505;
              *(_QWORD *)&v1177[24] = 0;
              v1178 = 0;
              v1179 = v491;
              if ((_DWORD)v491)
              {
                if (v491 >= 0x6666667)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1943C6B80);
                }
                v506 = 40 * v491;
                v507 = WTF::fastMalloc((WTF *)(40 * v491));
                v1178 = (v506 & 0xFFFFFFF8) / 0x28;
                *(_QWORD *)&v1177[24] = v507;
                if (HIDWORD(v1159))
                {
                  v508 = v1158;
                  v509 = (WTF *)((char *)v1158 + 40 * HIDWORD(v1159));
                  do
                  {
                    v510 = *(_QWORD *)v508;
                    *(_QWORD *)v507 = *(_QWORD *)v508;
                    ++*(_DWORD *)(v510 + 16);
                    v511 = *(_OWORD *)((char *)v508 + 8);
                    *(_OWORD *)(v507 + 22) = *(_OWORD *)((char *)v508 + 22);
                    *(_OWORD *)(v507 + 8) = v511;
                    v508 = (WTF *)((char *)v508 + 40);
                    v507 += 40;
                  }
                  while (v508 != v509);
                }
              }
              v512 = HIDWORD(v1169);
              if (HIDWORD(v1169) == (_DWORD)v1169)
              {
                v513 = WTF::Vector<WebCore::RenderFlexibleBox::LineState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1168, HIDWORD(v1169) + 1, (unint64_t)&v1176);
                v512 = HIDWORD(v1169);
                v514 = v1168;
                v515 = (char *)v1168 + 48 * HIDWORD(v1169);
                *(_QWORD *)v515 = *(_QWORD *)v513;
                v515[8] = 0;
                v516 = v515 + 8;
                v515[24] = 0;
                v517 = v515 + 24;
                if (*(_BYTE *)(v513 + 24))
                {
                  *v516 = 0;
                  v516[1] = 0;
                  v518 = *(_QWORD *)(v513 + 8);
                  *(_QWORD *)(v513 + 8) = 0;
                  *v516 = v518;
                  v519 = *(_DWORD *)(v513 + 16);
                  *(_DWORD *)(v513 + 16) = 0;
                  v520 = (char *)v514 + 48 * v512;
                  *((_DWORD *)v520 + 4) = v519;
                  v521 = *(_DWORD *)(v513 + 20);
                  *(_DWORD *)(v513 + 20) = 0;
                  *((_DWORD *)v520 + 5) = v521;
                  *v517 = 1;
                }
                v522 = (char *)v514 + 48 * v512;
                *((_QWORD *)v522 + 4) = 0;
                *((_QWORD *)v522 + 5) = 0;
                v523 = *(_QWORD *)(v513 + 32);
                *(_QWORD *)(v513 + 32) = 0;
                *((_QWORD *)v522 + 4) = v523;
                LODWORD(v523) = *(_DWORD *)(v513 + 40);
                *(_DWORD *)(v513 + 40) = 0;
                *((_DWORD *)v522 + 10) = v523;
                LODWORD(v523) = *(_DWORD *)(v513 + 44);
                *(_DWORD *)(v513 + 44) = 0;
                *((_DWORD *)v522 + 11) = v523;
              }
              else
              {
                v646 = v1168;
                v647 = (char *)v1168 + 48 * HIDWORD(v1169);
                *(_QWORD *)v647 = v1176;
                v647[8] = 0;
                v648 = v647 + 8;
                v647[24] = 0;
                v649 = v647 + 24;
                if (v1177[16])
                {
                  *v648 = 0;
                  v648[1] = 0;
                  v650 = *(_QWORD *)v1177;
                  *(_QWORD *)v1177 = 0;
                  *v648 = v650;
                  v651 = *(_DWORD *)&v1177[8];
                  *(_DWORD *)&v1177[8] = 0;
                  v652 = (char *)v646 + 48 * v512;
                  *((_DWORD *)v652 + 4) = v651;
                  v653 = *(_DWORD *)&v1177[12];
                  *(_DWORD *)&v1177[12] = 0;
                  *((_DWORD *)v652 + 5) = v653;
                  *v649 = 1;
                }
                v654 = (char *)v646 + 48 * v512;
                *((_QWORD *)v654 + 4) = 0;
                *((_QWORD *)v654 + 5) = 0;
                v655 = *(_QWORD *)&v1177[24];
                *(_QWORD *)&v1177[24] = 0;
                *((_QWORD *)v654 + 4) = v655;
                LODWORD(v655) = v1178;
                v1178 = 0;
                *((_DWORD *)v654 + 10) = v655;
                LODWORD(v655) = v1179;
                v1179 = 0;
                *((_DWORD *)v654 + 11) = v655;
              }
              HIDWORD(v1169) = v512 + 1;
              WebCore::RenderFlexibleBox::LineState::~LineState((WebCore::RenderFlexibleBox::LineState *)&v1176, v335);
              v180 = v1142;
              if (v492)
              {
                if (v493)
                {
                  v524 = (WTF *)((char *)v496 + 24 * v493);
                  v525 = v496;
                  do
                  {
                    v526 = *((_QWORD *)v525 + 1);
                    if (v526)
                    {
                      v527 = *(unsigned int *)(v526 - 4);
                      if ((_DWORD)v527)
                      {
                        v528 = (WTF **)*((_QWORD *)v525 + 1);
                        do
                        {
                          v529 = *v528;
                          if (*v528 != (WTF *)-1)
                          {
                            *v528 = 0;
                            if (v529)
                            {
                              if (*(_DWORD *)v529 == 1)
                                WTF::fastFree(v529, v177);
                              else
                                --*(_DWORD *)v529;
                            }
                          }
                          ++v528;
                          --v527;
                        }
                        while (v527);
                      }
                      WTF::fastFree((WTF *)(v526 - 16), v177);
                      v180 = v1142;
                    }
                    v525 = (WTF *)((char *)v525 + 24);
                  }
                  while (v525 != v524);
                }
                if (v496)
                {
                  WTF::fastFree(v496, v177);
                  v180 = v1142;
                }
              }
              v530 = v1155 + v346;
              if (__OFADD__(v1155, v346))
                v530 = (v1155 >> 31) + 0x7FFFFFFF;
              v1155 = v530;
              if (v1182)
              {
                v531 = (WTF *)v1180;
                if (HIDWORD(v1181))
                {
                  v532 = (WTF *)&v1180[24 * HIDWORD(v1181)];
                  do
                  {
                    v533 = *((_QWORD *)v531 + 1);
                    if (v533)
                    {
                      v534 = *(unsigned int *)(v533 - 4);
                      if ((_DWORD)v534)
                      {
                        v535 = (WTF **)*((_QWORD *)v531 + 1);
                        do
                        {
                          v536 = *v535;
                          if (*v535 != (WTF *)-1)
                          {
                            *v535 = 0;
                            if (v536)
                            {
                              if (*(_DWORD *)v536 == 1)
                                WTF::fastFree(v536, v177);
                              else
                                --*(_DWORD *)v536;
                            }
                          }
                          ++v535;
                          --v534;
                        }
                        while (v534);
                      }
                      WTF::fastFree((WTF *)(v533 - 16), v177);
                      v180 = v1142;
                    }
                    v531 = (WTF *)((char *)v531 + 24);
                  }
                  while (v531 != v532);
                  v531 = (WTF *)v1180;
                }
                if (v531)
                {
                  v1180 = 0;
                  LODWORD(v1181) = 0;
                  WTF::fastFree(v531, v177);
                  v180 = v1142;
                }
              }
              goto LABEL_362;
            }
            v537 = *((_DWORD *)v2 + 31);
            v538 = 164;
            if (((v537 >> 13) & 6) - 2 < 4)
              v538 = 160;
            v539 = *(_DWORD *)((char *)v2 + v538);
            if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
            {
              isLeftToRightFlow = WebCore::RenderFlexibleBox::isLeftToRightFlow(v2);
              v1086 = *(WebCore::LayoutIntegration::FlexLayout **)v2;
              if (isLeftToRightFlow)
                v541 = (uint64_t (**)(WebCore::RenderFlexibleBox *))((char *)v1086 + 1024);
              else
                v541 = (uint64_t (**)(WebCore::RenderFlexibleBox *))((char *)v1086 + 1016);
              v2 = v1126;
            }
            else
            {
              v540 = (unsigned __int16)v537 >> 13;
              if (v540 <= 5 && ((1 << v540) & 0x2A) != 0)
                v541 = (uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)v2 + 1000);
              else
                v541 = (uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)v2 + 1008);
            }
            v542 = (*v541)(v2);
            v543 = v336 + v542;
            if (__OFADD__(v336, v542))
              v543 = (v336 >> 31) + 0x7FFFFFFF;
            if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
            {
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
              {
                if (((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 3) == 1) != ((*((_BYTE *)v2 + 123) & 4) == 0))
                  goto LABEL_909;
                goto LABEL_2318;
              }
            }
            else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
            {
              v544 = (unsigned __int16)*((_DWORD *)v2 + 31) >> 13;
              if (v544 > 5 || ((1 << v544) & 0x2A) == 0)
              {
LABEL_909:
                v545 = (uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)v2 + 936);
LABEL_910:
                v546 = (*v545)(v2);
                v547 = v543 + v546;
                if (__OFADD__(v543, v546))
                  v547 = (v543 >> 31) + 0x7FFFFFFF;
                v548 = 1360;
                if (((*((_DWORD *)v2 + 31) >> 13) & 6u) - 2 < 4)
                  v548 = 1352;
                v549 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)v2 + v548))(v2);
                v550 = v549 << 6;
                if (v549 < -33554432)
                  v550 = 0x80000000;
                if (v549 > 0x1FFFFFF)
                  v550 = 0x7FFFFFFF;
                v563 = __OFADD__(v547, v550);
                v551 = v547 + v550;
                if (v563)
                  v551 = (v547 >> 31) + 0x7FFFFFFF;
                if (v539 > v551)
                  v551 = v539;
                v552 = 164;
                if (((*((_DWORD *)v2 + 31) >> 13) & 6u) - 2 < 4)
                  v552 = 160;
                *(_DWORD *)((char *)v2 + v552) = v551;
                v337 = *((_QWORD *)v2 + 11);
                goto LABEL_840;
              }
LABEL_2318:
              v545 = (uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)v2 + 928);
              goto LABEL_910;
            }
            v1087 = WebCore::RenderFlexibleBox::isLeftToRightFlow(v2);
            v1088 = *(WebCore::LayoutIntegration::FlexLayout **)v2;
            if (v1087)
              v545 = (uint64_t (**)(WebCore::RenderFlexibleBox *))((char *)v1088 + 952);
            else
              v545 = (uint64_t (**)(WebCore::RenderFlexibleBox *))((char *)v1088 + 944);
            v2 = v1126;
            goto LABEL_910;
          }
        }
        v268 = *((_DWORD *)v267 + 7);
LABEL_457:
        *(_DWORD *)((char *)v1158 + v265 + 32) = v268;
        v1180 = v267;
        if (v219 == *(_DWORD *)v1177)
        {
          v269 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1176, v219 + 1, (unint64_t)&v1180);
          v219 = *(_DWORD *)&v1177[4];
          v218 = v1176;
          *((_QWORD *)v1176 + *(unsigned int *)&v1177[4]) = *v269;
        }
        else
        {
          *((_QWORD *)v218 + v219) = v267;
        }
        *(_DWORD *)&v1177[4] = ++v219;
        v216 = HIDWORD(v1159);
        goto LABEL_454;
      }
      v209 = 8;
      goto LABEL_397;
    }
    v201 = 2;
    goto LABEL_387;
  }
  v191 = 0;
  v192 = 0;
  v224 = v1160;
  v1143 = v1161;
  v225 = v1163;
  v226 = 40 * v180;
  v193 = 0.0;
  v195 = 0.0;
  v196 = 0.0;
  do
  {
    v227 = *v187;
    v228 = (unint64_t)*v187 + v226;
    v229 = *((_QWORD *)v224 + 11);
    v230 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v229 + 32) + 16) + 20);
    if ((v230 & 0xC) != 0)
    {
      v560 = *(_DWORD *)(v228 + 28);
      v561 = *(_DWORD *)(v228 + 12);
      v562 = *(_DWORD *)(v228 + 16);
      v563 = __OFADD__(v560, v561);
      v564 = v560 + v561;
      v565 = v563;
      v566 = (v560 >> 31) + 0x7FFFFFFF;
      if (!v563)
        v566 = v564;
      v563 = __OFADD__(v566, v562);
      v567 = v566 + v562;
      v568 = (v566 >> 31) + 0x7FFFFFFF;
      if (!v563)
        v568 = v567;
      v563 = __OFADD__(v192, v568);
      v569 = v192 + v568;
      if (v563)
        v569 = (v192 >> 31) + 0x7FFFFFFF;
      if (v569 > v1143)
      {
        if ((*((_BYTE *)v224 + 21) & 0x10) != 0)
          v570 = (v230 >> 1) & 1;
        else
          v570 = (v230 & 2) == 0;
        v571 = *(_BYTE *)(*(_QWORD *)(v229 + 40) + 461);
        if (v570)
          v572 = (v571 & 8) == 0;
        else
          v572 = 1;
        if (!v572 || (v230 & 2) != 0 && (v571 & 2) != 0)
        {
          v1048 = v180;
          if (v565)
            v564 = (v560 >> 31) + 0x7FFFFFFF;
          v1049 = v564 + v562;
          if (__OFADD__(v564, v562))
            v1049 = (v564 >> 31) + 0x7FFFFFFF;
          v1050 = v192 + v1049;
          if (__OFADD__(v192, v1049))
            v1050 = (v192 >> 31) + 0x7FFFFFFF;
          v1051 = WebCore::RenderFlexibleBox::flowAwareMarginEndForChild(v224, *(const WebCore::RenderBox **)v228);
          v1052 = v1050 - v1051;
          if (__OFSUB__(v1050, v1051))
            v1052 = (v1050 >> 31) + 0x7FFFFFFF;
          v194 = HIDWORD(v1159);
          v1053 = v1052 <= v1143 || HIDWORD(v1159) == 0;
          v180 = v1048;
          v2 = v1126;
          if (!v1053)
            goto LABEL_380;
        }
        else
        {
          v194 = HIDWORD(v1159);
          if (HIDWORD(v1159))
            goto LABEL_380;
        }
      }
    }
    v231 = v180;
    if (HIDWORD(v1159) == (_DWORD)v1159)
    {
      v232 = WTF::Vector<WebCore::FlexItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1158, HIDWORD(v1159) + 1, v228);
      v233 = (char *)v1158 + 40 * HIDWORD(v1159);
      v234 = *(_QWORD *)v232;
      *(_QWORD *)v233 = *(_QWORD *)v232;
      ++*(_DWORD *)(v234 + 16);
      v235 = *(_OWORD *)(v232 + 22);
      *(_OWORD *)(v233 + 8) = *(_OWORD *)(v232 + 8);
      *(_OWORD *)(v233 + 22) = v235;
    }
    else
    {
      v256 = (char *)v1158 + 40 * HIDWORD(v1159);
      v257 = *(_QWORD *)((char *)v227 + v226);
      *(_QWORD *)v256 = v257;
      ++*(_DWORD *)(v257 + 16);
      v258 = *(_OWORD *)((char *)v227 + v226 + 8);
      *(_OWORD *)(v256 + 22) = *(_OWORD *)((char *)v227 + v226 + 22);
      *(_OWORD *)(v256 + 8) = v258;
    }
    v194 = ++HIDWORD(v1159);
    v236 = (_DWORD *)((char *)v227 + v226);
    v237 = *(_DWORD *)((char *)v227 + v226 + 8);
    v238 = *(_DWORD *)((char *)v227 + v226 + 12);
    v239 = (v237 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__(v237, v238))
      v239 = v237 + v238;
    v240 = v236[4];
    v563 = __OFADD__(v239, v240);
    v241 = v239 + v240;
    v242 = (v239 >> 31) + 0x7FFFFFFF;
    if (!v563)
      v242 = v241;
    v563 = __OFADD__(v242, v225);
    v243 = v242 + v225;
    v244 = (v242 >> 31) + 0x7FFFFFFF;
    if (!v563)
      v244 = v243;
    v563 = __OFADD__(v191, v244);
    v245 = v191 + v244;
    if (v563)
      v191 = (v191 >> 31) + 0x7FFFFFFF;
    else
      v191 = v245;
    v246 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v236 + 88) + 32) + 16);
    v247 = *(float *)(v246 + 8);
    v248 = v236[7];
    v563 = __OFADD__(v248, v238);
    v249 = v248 + v238;
    v250 = (v248 >> 31) + 0x7FFFFFFF;
    if (!v563)
      v250 = v249;
    v563 = __OFADD__(v250, v240);
    v251 = v250 + v240;
    v252 = (v250 >> 31) + 0x7FFFFFFF;
    if (!v563)
      v252 = v251;
    v563 = __OFADD__(v252, v225);
    v253 = v252 + v225;
    v254 = (v252 >> 31) + 0x7FFFFFFF;
    if (!v563)
      v254 = v253;
    v563 = __OFADD__(v192, v254);
    v255 = v192 + v254;
    if (v563)
      v192 = (v192 >> 31) + 0x7FFFFFFF;
    else
      v192 = v255;
    v193 = v193 + *(float *)(v246 + 4);
    v195 = v195 + v247;
    v196 = v196 + (float)((float)((float)v237 * 0.015625) * v247);
    v180 = v231 + 1;
    v226 += 40;
  }
  while (v231 + 1 < *((unsigned int *)v187 + 3));
  v1167 = __PAIR64__(v191, v192);
  if (v194)
    goto LABEL_380;
LABEL_1441:
  if ((*(unsigned int (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)v2 + 1712))(v2))
  {
    v984 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)v2 + 1048))(v2);
    v985 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)v2 + 960))(v2);
    v986 = v984 + v985;
    if (__OFADD__(v984, v985))
      v986 = (v984 >> 31) + 0x7FFFFFFF;
    v987 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)v2 + 1056))(v2);
    v988 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)v2 + 968))(v2);
    v990 = v987 + v988;
    if (__OFADD__(v987, v988))
      v990 = (v987 >> 31) + 0x7FFFFFFF;
    v991 = v986 + v990;
    if (__OFADD__(v986, v990))
      v991 = (v986 >> 31) + 0x7FFFFFFF;
    LineStyle = WebCore::RenderElement::firstLineStyle(v2, v989);
    v994 = ceilf(WebCore::RenderStyle::computedLineHeight((WebCore::RenderStyle *)LineStyle, v993) * 64.0);
    if (v994 >= 2147500000.0)
    {
      v995 = 0x7FFFFFFF;
    }
    else if (v994 <= -2147500000.0)
    {
      v995 = 0x80000000;
    }
    else
    {
      v995 = (int)v994;
    }
    v996 = v991 + v995;
    if (__OFADD__(v991, v995))
      v996 = (v991 >> 31) + 0x7FFFFFFF;
    v997 = 1360;
    if (((*((_DWORD *)v2 + 31) >> 13) & 6u) - 2 < 4)
      v997 = 1352;
    v998 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)v2 + v997))(v2);
    v999 = v998 << 6;
    if (v998 < -33554432)
      v999 = 0x80000000;
    if (v998 > 0x1FFFFFF)
      v999 = 0x7FFFFFFF;
    v563 = __OFADD__(v996, v999);
    v1000 = v996 + v999;
    if (v563)
      v1000 = (v996 >> 31) + 0x7FFFFFFF;
    if (v1000 > v1131[1])
    {
      v1001 = 164;
      if (((*((_DWORD *)v2 + 31) >> 13) & 6u) - 2 < 4)
        v1001 = 160;
      *(_DWORD *)((char *)v2 + v1001) = v1000;
    }
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0 && v1147 >= 2)
  {
    v933 = (unsigned int *)v1116;
    if (((*((_DWORD *)v2 + 31) >> 13) & 6u) - 2 <= 3)
      v933 = (unsigned int *)v1131;
    v70 = *v933;
    v934 = WebCore::RenderFlexibleBox::computeGap(v2, 0);
    v935 = (v1147 << 6) - 64;
    if (v935 >= 0x7FFFFFFF)
      v935 = 0x7FFFFFFFLL;
    v936 = (uint64_t)(v935 * (int)v934) / 64;
    if (HIDWORD(v936) != (int)v936 >> 31)
      LODWORD(v936) = (v934 >> 31) + 0x7FFFFFFF;
    v937 = v70 + v936;
    if (!__OFADD__(v70, (_DWORD)v936))
      goto LABEL_1772;
    goto LABEL_2224;
  }
LABEL_1444:
  WebCore::RenderBox::updateLogicalHeight(v2);
  v752 = HIDWORD(v1169);
  v753 = *((_QWORD *)v2 + 11);
  if (HIDWORD(v1169))
  {
    v754 = v1168;
    v1124 = *(_DWORD *)v1168;
    v755 = *(_QWORD *)(v753 + 32);
    v756 = *(unsigned __int8 *)(*(_QWORD *)(v755 + 16) + 20);
    if ((v756 & 0xC) == 0)
    {
      *((_DWORD *)v754 + 1) = WebCore::RenderFlexibleBox::crossAxisContentExtent(v2);
      v755 = *(_QWORD *)(*((_QWORD *)v2 + 11) + 32);
      v756 = *(unsigned __int8 *)(*(_QWORD *)(v755 + 16) + 20);
    }
    v757 = v756 & 0xC;
    if ((v756 & 0xC) == 0)
      goto LABEL_1448;
    v878 = *(unsigned __int16 *)(v755 + 120);
    v879 = v878 & 0xF;
    v756 = (v878 >> 4) & 7;
    v880 = (v878 & 0x7F) != 0 ? (v878 >> 4) & 7 : 4;
    v881 = (v878 >> 7) & 3;
    v882 = v879 != 6 || v757 == 8;
    v883 = !v882 && v1118 == 0;
    if (v883 && v881 != 2)
    {
LABEL_1448:
      v758 = 0;
      v1127 = (WTF *)((char *)v754 + 48 * v752);
      while (1)
      {
        v759 = *((_DWORD *)v754 + 1);
        v1156 = (const WebCore::RenderBox ***)v754;
        v1135 = *((unsigned __int8 *)v754 + 24);
        if (!*((_BYTE *)v754 + 24))
        {
          v1140 = v758;
          v1152 = (WTF *)(v756 & 0xFFFFFFFFFFFFFF00);
          goto LABEL_1458;
        }
        v760 = *((unsigned int *)v754 + 5);
        if ((_DWORD)v760)
        {
          if (v760 >= 0xAAAAAAB)
          {
            __break(0xC471u);
            JUMPOUT(0x1943C6B88);
          }
          v1152 = (WTF *)WTF::fastMalloc((WTF *)(24 * v760));
          v761 = *((_DWORD *)v754 + 5);
          if (v761)
          {
            v762 = 0;
            v763 = *((_QWORD *)v754 + 1);
            v764 = v763 + 24 * v761;
            do
            {
              v765 = v763 + v762;
              *(_QWORD *)((char *)v1152 + v762) = *(_QWORD *)(v763 + v762);
              WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::HashTable((uint64_t *)((char *)v1152 + v762 + 8), (_QWORD *)(v763 + v762 + 8));
              *(_QWORD *)((char *)v1152 + v762 + 16) = *(_QWORD *)(v763 + v762 + 16);
              v762 += 24;
            }
            while (v765 + 24 != v764);
          }
        }
        else
        {
          v1152 = 0;
        }
        v1140 = v760;
        if (*((_BYTE *)v754 + 24))
        {
          v941 = *((_DWORD *)v754 + 5);
          if (v941)
          {
            v1149 = v759;
            v1123 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 0xC;
            v942 = *((_QWORD *)v754 + 1);
            v1130 = v942 + 24 * v941;
            v1133 = *((_DWORD *)v754 + 1);
            while (1)
            {
              v943 = *(_QWORD *)(v942 + 8);
              if (!v943)
                break;
              v945 = *(unsigned int *)(v943 - 4);
              v944 = v943 + 8 * v945;
              if (!*(_DWORD *)(v943 - 12))
                goto LABEL_1803;
              if (!(_DWORD)v945)
              {
                v982 = 0;
                v946 = *(_QWORD *)(v942 + 8);
                goto LABEL_1894;
              }
              v980 = 8 * v945;
              v946 = *(_QWORD *)(v942 + 8);
              do
              {
                if ((unint64_t)(*(_QWORD *)v946 + 1) > 1)
                  goto LABEL_1804;
                v946 += 8;
                v980 -= 8;
              }
              while (v980);
              v946 = v944;
LABEL_1804:
              if (!v943)
              {
                v947 = 0;
                goto LABEL_1806;
              }
              v982 = *(unsigned int *)(v943 - 4);
LABEL_1894:
              v947 = v943 + 8 * v982;
LABEL_1806:
              if (v947 != v946 && !*(_QWORD *)(*(_QWORD *)v946 + 8))
              {
                while (1)
                {
                  v1067 = v946 + 8;
                  v946 = v944;
                  if (v1067 != v944)
                  {
                    v946 = v1067;
                    do
                    {
                      if ((unint64_t)(*(_QWORD *)v946 + 1) > 1)
                        goto LABEL_2172;
                      v946 += 8;
                    }
                    while (v946 != v944);
                    v946 = v944;
                  }
LABEL_2172:
                  if (v946 == v947)
                    break;
                  v2 = v1126;
                  if (*(_QWORD *)(*(_QWORD *)v946 + 8))
                    goto LABEL_1808;
                }
                v946 = v947;
                v2 = v1126;
              }
LABEL_1808:
              if (v943)
                v948 = v943 + 8 * *(unsigned int *)(v943 - 4);
              else
                v948 = 0;
              if (v946 == v948)
              {
                v1145 = 0x7FFFFFFF;
                v754 = (WTF *)v1156;
                goto LABEL_1849;
              }
              v1145 = 0x7FFFFFFF;
              do
              {
                v949 = *(_QWORD *)(*(_QWORD *)v946 + 8);
                v950 = WebCore::RenderFlexibleBox::alignmentForChild(v2, (const WebCore::RenderBox *)v949);
                LODWORD(v951) = WebCore::RenderFlexibleBox::availableAlignmentSpaceForChild((uint64_t)v2, v1133, (unsigned int *)v949);
                v952 = WebCore::RenderFlexibleBox::marginBoxAscentForChild(v2, (const WebCore::RenderBox *)v949);
                switch(v950)
                {
                  case 3:
                    if (v1123 != 8)
                      goto LABEL_1846;
                    break;
                  case 4:
                  case 5:
                    v1064 = *(_DWORD *)(v942 + 4);
                    v563 = __OFSUB__(v1064, v952);
                    v1065 = v1064 - v952;
                    v1066 = (v1064 >> 31) + 0x7FFFFFFF;
                    if (v563)
                      LODWORD(v951) = v1066;
                    else
                      LODWORD(v951) = v1065;
                    break;
                  case 6:
                    v953 = (uint64_t)(int)v951 << 6;
                    if (((int)v951 & 0x200000000000000) != 0)
                      v953 += 127;
                    v951 = v953 >> 7;
                    break;
                  case 12:
                    break;
                  default:
LABEL_1846:
                    LODWORD(v951) = 0;
                    break;
                }
                v954 = *((_DWORD *)v2 + 5);
                if ((v954 & 0x1000) != 0)
                {
                  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
                  {
LABEL_1819:
                    v955 = __ROR8__(*(_QWORD *)(v949 + 152), 32);
                    goto LABEL_1820;
                  }
                }
                else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
                {
                  goto LABEL_1819;
                }
                v955 = *(_QWORD *)(v949 + 152);
LABEL_1820:
                LODWORD(v956) = (HIDWORD(v955) >> 31) + 0x7FFFFFFF;
                if (__OFADD__(HIDWORD(v955), (_DWORD)v951))
                  v956 = v956;
                else
                  v956 = (HIDWORD(v955) + v951);
                if ((v954 & 0x1000) != 0)
                {
                  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
                  {
LABEL_1825:
                    v957 = (v956 << 32) | v955;
                    goto LABEL_1826;
                  }
                }
                else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
                {
                  goto LABEL_1825;
                }
                v957 = v956 | (v955 << 32);
LABEL_1826:
                *(_QWORD *)(v949 + 152) = v957;
                v958 = *(_DWORD *)(v949 + 124);
                v959 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
                if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
                  v960 = (v959 >> 1) & 1;
                else
                  v960 = (v959 & 2) == 0;
                if (v960 != (*(_DWORD *)(v949 + 20) & 0x1000u) >> 12)
                  goto LABEL_1831;
                if ((v959 & 2) == 0)
                {
                  v958 = *((_DWORD *)v2 + 31);
LABEL_1831:
                  v961 = (unsigned __int16)v958 >> 13;
                  v290 = v961 > 5;
                  v962 = 0x30203020100uLL >> (8 * v961);
                  if (v290)
                    v963 = 0;
                  else
                    v963 = v962;
                  goto LABEL_1834;
                }
                if ((*(_DWORD *)(v949 + 20) & 0x1000) != 0)
                {
                  v963 = 0;
                  v2 = v1126;
                }
                else
                {
                  v2 = v1126;
                  if ((*((_BYTE *)v1126 + 123) & 4) != 0)
                    v963 = 3;
                  else
                    v963 = 2;
                }
LABEL_1834:
                if (WebCore::RenderFlexibleBox::performBaselineAlignment(WebCore::RenderFlexibleBox::LineState &)::$_1::operator()((uint64_t)v2, v963, v950))
                {
                  v1002 = WebCore::RenderFlexibleBox::availableAlignmentSpaceForChild((uint64_t)v2, v1133, (unsigned int *)v949);
                  v1003 = v1002 - v951;
                  if (__OFSUB__(v1002, (_DWORD)v951))
                    v1003 = (v1002 >> 31) + 0x7FFFFFFF;
                  v1004 = v1145;
                  if (v1003 < v1145)
                    v1004 = v1003;
                  v1145 = v1004;
                }
                v964 = v944;
                if (v946 + 8 != v944)
                {
                  v964 = v946 + 8;
                  while ((unint64_t)(*(_QWORD *)v964 + 1) <= 1)
                  {
                    v964 += 8;
                    if (v964 == v944)
                    {
                      v964 = v944;
                      break;
                    }
                  }
                }
                v946 = v947;
                if (v964 != v947)
                {
                  v946 = v964;
                  if (!*(_QWORD *)(*(_QWORD *)v964 + 8))
                  {
                    while (1)
                    {
                      v1068 = v946 + 8;
                      v946 = v944;
                      if (v1068 != v944)
                      {
                        v946 = v1068;
                        while ((unint64_t)(*(_QWORD *)v946 + 1) <= 1)
                        {
                          v946 += 8;
                          if (v946 == v944)
                          {
                            v946 = v944;
                            break;
                          }
                        }
                      }
                      if (v946 == v947)
                        break;
                      v2 = v1126;
                      if (*(_QWORD *)(*(_QWORD *)v946 + 8))
                        goto LABEL_1842;
                    }
                    v946 = v947;
                    v2 = v1126;
                  }
                }
LABEL_1842:
                ++*(_DWORD *)(v942 + 16);
              }
              while (v946 != v948);
              v754 = (WTF *)v1156;
              if (v1145)
              {
                v943 = *(_QWORD *)(v942 + 8);
LABEL_1849:
                if (!v943)
                {
                  v965 = 0;
                  v966 = 0;
                  goto LABEL_1851;
                }
                v966 = *(unsigned int *)(v943 - 4);
                v965 = v943 + 8 * v966;
                if (!*(_DWORD *)(v943 - 12))
                {
LABEL_1851:
                  v967 = v965;
                  v965 = v943 + 8 * v966;
                  goto LABEL_1852;
                }
                if ((_DWORD)v966)
                {
                  v981 = 8 * v966;
                  v967 = v943;
                  do
                  {
                    if ((unint64_t)(*(_QWORD *)v967 + 1) > 1)
                      goto LABEL_1852;
                    v967 += 8;
                    v981 -= 8;
                  }
                  while (v981);
                  v967 = v965;
LABEL_1852:
                  if (!v943)
                  {
                    v968 = 0;
LABEL_1854:
                    if (v968 != v967 && !*(_QWORD *)(*(_QWORD *)v967 + 8))
                    {
                      while (1)
                      {
                        v1069 = v967 + 8;
                        v967 = v965;
                        if (v1069 != v965)
                        {
                          v967 = v1069;
                          do
                          {
                            if ((unint64_t)(*(_QWORD *)v967 + 1) > 1)
                              goto LABEL_2188;
                            v967 += 8;
                          }
                          while (v967 != v965);
                          v967 = v965;
                        }
LABEL_2188:
                        if (v967 == v968)
                          break;
                        v754 = (WTF *)v1156;
                        v2 = v1126;
                        if (*(_QWORD *)(*(_QWORD *)v967 + 8))
                          goto LABEL_1856;
                      }
                      v967 = v968;
                      v754 = (WTF *)v1156;
                      v2 = v1126;
                    }
LABEL_1856:
                    if (v943)
                      v969 = v943 + 8 * *(unsigned int *)(v943 - 4);
                    else
                      v969 = 0;
                    while (2)
                    {
                      if (v967 == v969)
                        goto LABEL_1877;
                      v970 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
                      if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
                        v971 = (v970 >> 1) & 1;
                      else
                        v971 = (v970 & 2) == 0;
                      v972 = *(_QWORD *)(*(_QWORD *)v967 + 8);
                      v973 = *(_DWORD *)(v972 + 20);
                      if (v971 == (unsigned __int16)(v973 & 0x1000) >> 12)
                      {
                        if ((v970 & 2) == 0)
                        {
                          v974 = *((_DWORD *)v2 + 31);
                          goto LABEL_1865;
                        }
                        if ((v973 & 0x1000) != 0)
                        {
                          v977 = 0;
                          v754 = (WTF *)v1156;
                          v2 = v1126;
                        }
                        else
                        {
                          v2 = v1126;
                          if ((*((_BYTE *)v1126 + 123) & 4) != 0)
                            v977 = 3;
                          else
                            v977 = 2;
                          v754 = (WTF *)v1156;
                        }
                      }
                      else
                      {
                        v974 = *(_DWORD *)(v972 + 124);
LABEL_1865:
                        v975 = (unsigned __int16)v974 >> 13;
                        v290 = v975 > 5;
                        v976 = 0x30203020100uLL >> (8 * v975);
                        if (v290)
                          v977 = 0;
                        else
                          v977 = v976;
                      }
                      v978 = WebCore::RenderFlexibleBox::alignmentForChild(v2, *(const WebCore::RenderBox **)(*(_QWORD *)v967 + 8));
                      if (!WebCore::RenderFlexibleBox::performBaselineAlignment(WebCore::RenderFlexibleBox::LineState &)::$_1::operator()((uint64_t)v2, v977, v978))
                      {
LABEL_1869:
                        v979 = v965;
                        if (v967 + 8 != v965)
                        {
                          v979 = v967 + 8;
                          while ((unint64_t)(*(_QWORD *)v979 + 1) <= 1)
                          {
                            v979 += 8;
                            if (v979 == v965)
                            {
                              v979 = v965;
                              break;
                            }
                          }
                        }
                        v967 = v968;
                        if (v979 != v968)
                        {
                          v967 = v979;
                          if (!*(_QWORD *)(*(_QWORD *)v979 + 8))
                          {
                            while (1)
                            {
                              v1070 = v967 + 8;
                              v967 = v965;
                              if (v1070 != v965)
                              {
                                v967 = v1070;
                                while ((unint64_t)(*(_QWORD *)v967 + 1) <= 1)
                                {
                                  v967 += 8;
                                  if (v967 == v965)
                                  {
                                    v967 = v965;
                                    break;
                                  }
                                }
                              }
                              if (v967 == v968)
                                break;
                              v754 = (WTF *)v1156;
                              v2 = v1126;
                              if (*(_QWORD *)(*(_QWORD *)v967 + 8))
                                goto LABEL_1876;
                            }
                            v967 = v968;
                            v754 = (WTF *)v1156;
                            v2 = v1126;
                          }
                        }
LABEL_1876:
                        ++*(_DWORD *)(v942 + 16);
                        continue;
                      }
                      break;
                    }
                    v1005 = *((unsigned int *)v2 + 5);
                    v1006 = *(_QWORD *)(v972 + 88);
                    v751 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
                    if ((v1005 & 0x1000) != 0)
                    {
                      if ((v751 & 2) != 0)
                        goto LABEL_2445;
LABEL_1940:
                      v1007 = *(_QWORD *)(v1006 + 24);
                      v754 = (WTF *)v1156;
                      v2 = v1126;
                      if (!*(_BYTE *)(v1007 + 68))
                        goto LABEL_1869;
                      v1008 = (_BYTE *)(v1007 + 52);
                    }
                    else
                    {
                      if ((v751 & 2) != 0)
                        goto LABEL_1940;
LABEL_2445:
                      v1092 = *(_QWORD *)(v1006 + 24);
                      v754 = (WTF *)v1156;
                      v2 = v1126;
                      if (!*(_BYTE *)(v1092 + 44))
                        goto LABEL_1869;
                      v1008 = (_BYTE *)(v1092 + 60);
                    }
                    v754 = (WTF *)v1156;
                    v2 = v1126;
                    if (*v1008)
                      WebCore::RenderFlexibleBox::adjustAlignmentForChild(v1005, v751, v972, v1145);
                    goto LABEL_1869;
                  }
                  v983 = *(unsigned int *)(v943 - 4);
                }
                else
                {
                  v983 = 0;
                  v967 = v943;
                }
                v968 = v943 + 8 * v983;
                goto LABEL_1854;
              }
LABEL_1877:
              v942 += 24;
              if (v942 == v1130)
              {
                v759 = v1149;
                goto LABEL_1458;
              }
            }
            v944 = 0;
            v945 = 0;
LABEL_1803:
            v946 = v944;
            v944 = v943 + 8 * v945;
            goto LABEL_1804;
          }
        }
LABEL_1458:
        v766 = *((_DWORD *)v754 + 11);
        if (v766)
          break;
LABEL_1590:
        if (v1135)
        {
          v848 = v1156;
          v758 = v1140;
          if (v1140)
          {
            v849 = (WTF ***)v1152;
            do
            {
              v850 = v849[1];
              if (v850)
              {
                v851 = *((unsigned int *)v850 - 1);
                if ((_DWORD)v851)
                {
                  v852 = v849[1];
                  do
                  {
                    v853 = *v852;
                    if (*v852 != (WTF *)-1)
                    {
                      *v852 = 0;
                      if (v853)
                      {
                        if (*(_DWORD *)v853 == 1)
                          WTF::fastFree(v853, (void *)v751);
                        else
                          --*(_DWORD *)v853;
                      }
                    }
                    ++v852;
                    --v851;
                  }
                  while (v851);
                }
                WTF::fastFree((WTF *)(v850 - 2), (void *)v751);
              }
              v849 += 3;
            }
            while (v849 != (WTF ***)((char *)v1152 + 24 * v1140));
          }
          if (v1152)
            WTF::fastFree(v1152, (void *)v751);
          v756 = 0;
        }
        else
        {
          v756 = (uint64_t)v1152;
          v848 = v1156;
          v758 = v1140;
        }
        v754 = (WTF *)(v848 + 6);
        if (v754 == v1127)
        {
          v753 = *((_QWORD *)v2 + 11);
          goto LABEL_1611;
        }
      }
      v767 = v1156[4];
      v1144 = (unint64_t)&v767[5 * v766];
      v1148 = v759;
      while (1)
      {
        v768 = *v767;
        (*(void (**)(WebCore::RenderFlexibleBox *, _QWORD))(*(_QWORD *)v2 + 1600))(v2, 0);
        v769 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v768 + 11) + 32) + 125);
        if ((v769 & 0xF) == 1)
        {
          v1129 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 124);
          v1132 = v1129 & 0xF;
        }
        else
        {
          v1132 = v769 & 0xF;
          v1129 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v768 + 11) + 32) + 125);
        }
        v770 = *v767;
        v771 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *, _QWORD))(*(_QWORD *)v2 + 1600))(v2, 0);
        v772 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v770 + 11) + 32) + 125);
        v773 = v772 & 0xF;
        if (v773 == 1)
        {
          v772 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 124);
          v773 = v772 & 0xF;
        }
        if (v773 < 3)
          v772 = v771;
        v774 = v772 & 0xF;
        if (v774 == 7)
        {
          v774 = 11;
          goto LABEL_1472;
        }
        if (v774 == 4)
          break;
        if (v774 == 8)
        {
          v774 = 12;
          goto LABEL_1472;
        }
        if ((v774 - 9) >= 2)
        {
          LOBYTE(v775) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
LABEL_1471:
          if ((v775 & 0xC) != 8)
            goto LABEL_1472;
          if (v774 == 11)
          {
            v774 = 12;
          }
          else if (v774 == 12)
          {
            v774 = 11;
          }
          goto LABEL_2487;
        }
        v1018 = (unsigned __int16)*((_DWORD *)v2 + 31) >> 13;
        v1019 = v1018 - 1;
        v1100 = 2;
        switch((unsigned __int16)*((_DWORD *)v2 + 31) >> 13)
        {
          case 1:
          case 2:
            goto LABEL_1965;
          case 3:
          case 5:
            LOBYTE(v1018) = 3;
            goto LABEL_1965;
          case 4:
            goto LABEL_1966;
          default:
            LOBYTE(v1018) = 0;
LABEL_1965:
            v1100 = v1018;
LABEL_1966:
            v1020 = v1100 & 6;
            v1021 = (unsigned __int16)*((_DWORD *)v770 + 31) >> 13;
            if ((v1021 - 2) < 2 || v1021 == 4 || v1021 == 5)
            {
              if (v1020 != 2)
              {
LABEL_1970:
                switch(v1019)
                {
                  case 0:
                  case 2:
                  case 4:
                    if ((*((_BYTE *)v770 + 123) & 4) == 0)
                      goto LABEL_2484;
                    goto LABEL_1972;
                  default:
                    if ((*((_BYTE *)v770 + 123) & 4) == 0)
                      goto LABEL_1972;
                    goto LABEL_2484;
                }
              }
            }
            else if (v1020 == 2)
            {
              goto LABEL_1970;
            }
            v1103 = WebCore::RenderStyle::isFlippedLinesWritingMode(v1125);
            if (v1103 == WebCore::RenderStyle::isFlippedLinesWritingMode((const WebCore::RenderBox *)((char *)v770 + 80))
              && ((*((_BYTE *)v1126 + 123) & 4) == 0) == ((*((_BYTE *)v770 + 123) & 4) == 0))
            {
LABEL_1972:
              if (v774 == 9)
                v774 = 11;
              else
                v774 = 12;
            }
            else
            {
LABEL_2484:
              if (v774 == 9)
                v774 = 12;
              else
                v774 = 11;
            }
            break;
        }
LABEL_2487:
        v2 = v1126;
LABEL_1472:
        v776 = (uint64_t)*v767;
        if ((*((_BYTE *)*v767 + 20) & 0xF8) != 0)
        {
          LODWORD(v1176) = 0;
          LODWORD(v1180) = 0;
          if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
          {
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
              goto LABEL_2459;
LABEL_2110:
            WebCore::RenderBox::computeBlockDirectionMargins((WebCore::RenderBox *)v776, v1126, (WebCore::LayoutUnit *)&v1176, (WebCore::LayoutUnit *)&v1180);
          }
          else
          {
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
              goto LABEL_2110;
LABEL_2459:
            v1096 = WebCore::RenderBox::containingBlockLogicalWidthForContentInFragment((WebCore::RenderBox *)v776, 0);
            if (((*(_DWORD *)(v776 + 124) >> 13) & 6u) - 2 < 4)
              v1097 = (unsigned int *)(v776 + 164);
            else
              v1097 = (unsigned int *)(v776 + 160);
            WebCore::RenderBox::computeInlineDirectionMargins((int *)v776, v1126, v1096, *v1097 | 0x100000000, 0, (int *)&v1176, (int *)&v1180);
          }
          v779 = (_DWORD)v1176 + (_DWORD)v1180;
          if (__OFADD__((_DWORD)v1176, (_DWORD)v1180))
            v779 = (v1176 >> 31) + 0x7FFFFFFF;
          goto LABEL_2464;
        }
        if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
        {
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
          {
LABEL_2212:
            v1071 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)v776 + 1080))(*v767);
            v1072 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v776 + 1088))(v776);
            v779 = v1071 + v1072;
            if (__OFADD__(v1071, v1072))
              v779 = (v1071 >> 31) + 0x7FFFFFFF;
LABEL_2464:
            v2 = v1126;
            goto LABEL_1477;
          }
        }
        else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
        {
          goto LABEL_2212;
        }
        v777 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)v776 + 1096))(*v767);
        v778 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v776 + 1104))(v776);
        v779 = v777 + v778;
        if (__OFADD__(v777, v778))
          v779 = (v777 >> 31) + 0x7FFFFFFF;
LABEL_1477:
        v780 = *((_DWORD *)v2 + 5);
        if ((v780 & 0x1000) != 0)
        {
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
          {
LABEL_1479:
            v781 = (int *)(v776 + 160);
            goto LABEL_1480;
          }
        }
        else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
        {
          goto LABEL_1479;
        }
        v781 = (int *)(v776 + 164);
LABEL_1480:
        v782 = *v781;
        v563 = __OFADD__(v779, v782);
        v783 = v779 + v782;
        if (v563)
          v783 = (v779 >> 31) + 0x7FFFFFFF;
        v563 = __OFSUB__(v759, v783);
        v784 = v759 - v783;
        if (v563)
          v784 = (v1148 >> 31) + 0x7FFFFFFF;
        if ((v780 & 0x1000) != 0)
        {
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
          {
LABEL_1486:
            v785 = 0;
            v786 = *(_QWORD *)(v776 + 88);
            v787 = (unsigned int *)(*(_QWORD *)(v786 + 24) + 64);
            goto LABEL_1487;
          }
        }
        else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
        {
          goto LABEL_1486;
        }
        v786 = *(_QWORD *)(v776 + 88);
        v787 = (unsigned int *)(*(_QWORD *)(v786 + 24) + 40);
        v785 = 1;
LABEL_1487:
        LODWORD(v1176) = 0;
        BYTE6(v1176) = 0;
        BYTE4(v1176) = *((_BYTE *)v787 + 4);
        v788 = BYTE4(v1176);
        BYTE5(v1176) = *((_BYTE *)v787 + 5);
        if (BYTE4(v1176) - 2 >= 9)
        {
          v789 = 0;
          if (BYTE4(v1176) == 11)
          {
            v789 = *v787;
            LODWORD(v1176) = *v787;
            WebCore::Length::ref((int *)&v1176);
            v786 = *(_QWORD *)(v776 + 88);
          }
        }
        else
        {
          BYTE6(v1176) = *((_BYTE *)v787 + 6);
          if (BYTE6(v1176))
          {
            LODWORD(v1176) = *v787;
            v789 = v1176;
          }
          else
          {
            v789 = *v787;
            LODWORD(v1176) = *v787;
          }
        }
        v790 = *(_QWORD *)(v786 + 24);
        if (v785)
          v791 = (unsigned int *)(v790 + 56);
        else
          v791 = (unsigned int *)(v790 + 48);
        v792 = v784 & ~(v784 >> 31);
        LODWORD(v1180) = 0;
        BYTE6(v1180) = 0;
        BYTE4(v1180) = *((_BYTE *)v791 + 4);
        v793 = BYTE4(v1180);
        BYTE5(v1180) = *((_BYTE *)v791 + 5);
        if (BYTE4(v1180) - 2 < 9)
        {
          BYTE6(v1180) = *((_BYTE *)v791 + 6);
          if (BYTE6(v1180))
          {
            LODWORD(v1180) = *v791;
            v794 = v1180;
          }
          else
          {
            v794 = *v791;
            LODWORD(v1180) = *v791;
          }
LABEL_1499:
          v795 = *((_QWORD *)v2 + 11);
          if (v788)
            goto LABEL_1500;
          if (!BYTE4(v1180))
          {
            v911 = *((_DWORD *)v2 + 5);
            v912 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v795 + 32) + 16) + 20);
            if ((v911 & 0x1000) != 0)
            {
              v759 = v1148;
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v795 + 32) + 16) + 20) & 2) != 0)
                goto LABEL_2382;
LABEL_1736:
              v913 = __ROR8__(*(_QWORD *)(v776 + 152), 32);
            }
            else
            {
              v759 = v1148;
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v795 + 32) + 16) + 20) & 2) != 0)
                goto LABEL_1736;
LABEL_2382:
              v913 = *(_QWORD *)(v776 + 152);
            }
            v914 = v792 >> 1;
            v915 = HIDWORD(v913) + (v792 >> 1);
            if (__OFADD__(HIDWORD(v913), v792 >> 1))
              v915 = ((HIDWORD(v913) >> 31) + 0x7FFFFFFF);
            if ((v911 & 0x1000) != 0)
            {
              if ((v912 & 2) == 0)
                goto LABEL_2384;
LABEL_1741:
              v916 = (v915 << 32) | v913;
            }
            else
            {
              if ((v912 & 2) == 0)
                goto LABEL_1741;
LABEL_2384:
              v916 = v915 | (unint64_t)(v913 << 32);
            }
            *(_QWORD *)(v776 + 152) = v916;
            if (v785)
            {
              *(_DWORD *)(v776 + 168) = v914;
              *(_DWORD *)(v776 + 176) = v914;
            }
            else
            {
              *(_DWORD *)(v776 + 180) = v914;
              *(_DWORD *)(v776 + 172) = v914;
            }
            goto LABEL_1558;
          }
          goto LABEL_1784;
        }
        v794 = 0;
        if (BYTE4(v1180) != 11)
          goto LABEL_1499;
        v794 = *v791;
        LODWORD(v1180) = *v791;
        WebCore::Length::ref((int *)&v1180);
        v795 = *((_QWORD *)v2 + 11);
        if (v788)
        {
LABEL_1500:
          v796 = 0;
          goto LABEL_1501;
        }
LABEL_1784:
        v796 = 1;
LABEL_1501:
        v751 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v795 + 32) + 16) + 20);
        if ((v751 & 2) != 0)
        {
          if ((*(_BYTE *)(v776 + 123) & 4) == 0)
          {
            if (v796)
            {
LABEL_1928:
              WebCore::RenderFlexibleBox::adjustAlignmentForChild(*((unsigned int *)v2 + 5), v751, v776, v792);
LABEL_1929:
              if (v785)
                *(_DWORD *)(v776 + 168) = v792;
              else
                *(_DWORD *)(v776 + 180) = v792;
              v798 = 1;
              v2 = v1126;
              goto LABEL_1507;
            }
            goto LABEL_1505;
          }
        }
        else
        {
          v797 = (unsigned __int16)*(_DWORD *)(v776 + 124) >> 13;
          if (v797 > 5 || ((1 << v797) & 0x2A) == 0)
          {
            if ((v796 & 1) != 0)
              goto LABEL_1928;
LABEL_1505:
            if (!v793)
              goto LABEL_2435;
            v798 = 0;
            goto LABEL_1507;
          }
        }
        if ((v796 & 1) != 0)
          goto LABEL_1929;
        if (!v793)
        {
          WebCore::RenderFlexibleBox::adjustAlignmentForChild(*((unsigned int *)v1126 + 5), v751, v776, v792);
LABEL_2435:
          if (v785)
            *(_DWORD *)(v776 + 176) = v792;
          else
            *(_DWORD *)(v776 + 172) = v792;
          v798 = 1;
          v759 = v1148;
          v2 = v1126;
          goto LABEL_1509;
        }
        v798 = 0;
        v2 = v1126;
LABEL_1507:
        if (v793 == 11)
        {
          v759 = v1148;
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v794);
        }
        else
        {
          v759 = v1148;
        }
LABEL_1509:
        if (v788 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v789);
        }
        if (v774 == 4)
          v799 = 1;
        else
          v799 = v798;
        if ((v799 & 1) != 0)
          goto LABEL_1558;
        v800 = v774 - 3;
        if (v774 == 3)
        {
          v801 = *((_DWORD *)v2 + 5);
          v802 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
          if ((v801 & 0x1000) != 0)
            v803 = (v802 >> 1) & 1;
          else
            v803 = (v802 & 2) == 0;
          v804 = (uint64_t)*v767;
          v805 = *((_DWORD *)*v767 + 5);
          if (v803 == (unsigned __int16)(v805 & 0x1000) >> 12
            || ((v831 = *(_QWORD *)(*(_QWORD *)(v804 + 88) + 8), ((*(_DWORD *)(v804 + 124) >> 13) & 6u) - 2 < 4)
              ? (v832 = v831 + 4)
              : (v832 = v831 + 12),
                *(_BYTE *)(v832 + 4)))
          {
            if ((v801 & 0x1000) != 0)
              v806 = (v802 >> 1) & 1;
            else
              v806 = (v802 & 2) == 0;
            if (v806 == (unsigned __int16)(v805 & 0x1000) >> 12)
            {
              v807 = *(_QWORD *)(*(_QWORD *)(v804 + 88) + 8);
              v808 = ((*(_DWORD *)(v804 + 124) >> 13) & 6u) - 2 < 4 ? v807 + 12 : v807 + 4;
              if (!*(_BYTE *)(v808 + 4))
              {
                v809 = WebCore::RenderFlexibleBox::crossAxisMarginExtentForChild(v2, *v767);
                v810 = v759 - v809;
                if (__OFSUB__(v759, v809))
                  v810 = (v759 >> 31) + 0x7FFFFFFF;
                v811 = v810 & ~(v810 >> 31);
                v812 = WebCore::RenderFlexibleBox::crossAxisContentExtent(v2);
                v813 = WebCore::RenderBox::constrainLogicalWidthInFragmentByMinMax((WebCore::RenderBox *)v804, v811, v812, (unsigned int *)v2, 0, 1);
                if (((*(_DWORD *)(v804 + 124) >> 13) & 6u) - 2 < 4)
                  v814 = (_DWORD *)(v804 + 164);
                else
                  v814 = (_DWORD *)(v804 + 160);
                if (v813 != *v814)
                {
                  WebCore::RenderBox::setOverridingLogicalWidth((_QWORD *)v804, v813);
                  v908 = *(_DWORD *)(v804 + 20);
                  if ((v908 & 0x20) == 0)
                  {
                    v908 |= 0x20u;
                    *(_DWORD *)(v804 + 20) = v908;
                  }
                  if ((v908 & 0xF8) != 0)
                  {
                    v909 = *(_QWORD *)(v804 + 32);
                    if (v909
                      && (v910 = *(_QWORD *)(v909 + 8)) != 0
                      && (*(_BYTE *)(*(_QWORD *)(v910 + 104) + 239) & 0x18) != 0
                      && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v804 + 24)
                                                                                               + 8)
                                                                                   + 40)
                                                                       + 8)
                                                           + 1944)
                                               + 248)
                                   + 479))
                    {
                      WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v804);
                    }
                    else
                    {
                      (*(void (**)(uint64_t))(*(_QWORD *)v804 + 688))(v804);
                    }
                  }
                }
              }
            }
          }
          else
          {
            v833 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)v804 + 1048))(*v767);
            v834 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v804 + 960))(v804);
            v835 = v833 + v834;
            if (__OFADD__(v833, v834))
              v835 = (v833 >> 31) + 0x7FFFFFFF;
            v836 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v804 + 1056))(v804);
            v837 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v804 + 968))(v804);
            v838 = v836 + v837;
            if (__OFADD__(v836, v837))
              v838 = (v836 >> 31) + 0x7FFFFFFF;
            LODWORD(v839) = v835 + v838;
            if (__OFADD__(v835, v838))
              LODWORD(v839) = (v835 >> 31) + 0x7FFFFFFF;
            v840 = WebCore::RenderFlexibleBox::crossAxisMarginExtentForChild(v2, (const WebCore::RenderBox *)v804);
            v841 = v759 - v840;
            if (__OFSUB__(v759, v840))
              v841 = (v759 >> 31) + 0x7FFFFFFF;
            if ((int)v839 <= v841)
              v839 = v841;
            else
              v839 = v839;
            v842 = WebCore::RenderFlexibleBox::cachedChildIntrinsicContentLogicalHeight(v2, (const WebCore::RenderBox *)v804);
            v844 = WebCore::RenderBox::constrainLogicalHeightByMinMax((WebCore::RenderBox *)v804, (const WebCore::RenderBox *)v839, v842 | 0x100000000);
            if (((*(_DWORD *)(v804 + 124) >> 13) & 6u) - 2 < 4)
              v845 = (int *)(v804 + 160);
            else
              v845 = (int *)(v804 + 164);
            v846 = *v845;
            if ((*(_BYTE *)(v804 + 45) & 0x40) != 0)
            {
              if (WebCore::RenderBlock::hasPercentHeightDescendants((WebCore::RenderBlock *)v804, v843))
              {
                ++*((_DWORD *)v2 + 56);
                v917 = *(_QWORD *)(v804 + 8);
                if (v917)
                {
                  if (*(_QWORD *)(v917 + 8))
                  {
                    v918 = *v1128;
                    if (*v1128)
                    {
                      v919 = *(_DWORD *)(v918 - 8);
                      v920 = (~(v917 << 32) + v917) ^ ((unint64_t)(~(v917 << 32) + v917) >> 22);
                      v921 = 9 * ((v920 + ~(v920 << 13)) ^ ((v920 + ~(v920 << 13)) >> 8));
                      v922 = (v921 ^ (v921 >> 15)) + ~((v921 ^ (v921 >> 15)) << 27);
                      v923 = v919 & ((v922 >> 31) ^ v922);
                      for (kk = 1; ; ++kk)
                      {
                        v925 = *(_QWORD *)(v918 + 8 * v923);
                        if (!v925)
                          break;
                        if (v925 != -1 && v925 == v917)
                          goto LABEL_1754;
                        v923 = (v923 + kk) & v919;
                      }
                    }
                  }
                }
              }
            }
            if (v844 == v846)
            {
              if ((WebCore::RenderBox::overridingLogicalHeight((WebCore::RenderBox *)v804) & 0xFF00000000) == 0)
              {
                LODWORD(v1176) = v844;
                v847 = (_QWORD *)WebCore::gOverridingLogicalHeightMap;
                if (!WebCore::gOverridingLogicalHeightMap)
                {
                  v847 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                  *v847 = 0;
                  v847[1] = 0;
                  WebCore::gOverridingLogicalHeightMap = (uint64_t)v847;
                }
                WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,WebCore::LayoutUnit&>((uint64_t)v847, (_QWORD *)v804, &v1176);
              }
            }
            else
            {
LABEL_1754:
              LODWORD(v1176) = v844;
              v927 = (_QWORD *)WebCore::gOverridingLogicalHeightMap;
              if (!WebCore::gOverridingLogicalHeightMap)
              {
                v927 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                *v927 = 0;
                v927[1] = 0;
                WebCore::gOverridingLogicalHeightMap = (uint64_t)v927;
              }
              WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,WebCore::LayoutUnit&>((uint64_t)v927, (_QWORD *)v804, &v1176);
              v928 = *((_BYTE *)v2 + 394);
              *((_BYTE *)v2 + 394) = 1;
              v929 = WebCore::RenderFlexibleBox::cachedChildIntrinsicContentLogicalHeight(v2, (const WebCore::RenderBox *)v804);
              v930 = *(_DWORD *)(v804 + 20);
              if ((v930 & 0x20) == 0)
              {
                v930 |= 0x20u;
                *(_DWORD *)(v804 + 20) = v930;
              }
              if ((v930 & 0xF8) != 0)
              {
                v931 = *(_QWORD *)(v804 + 32);
                if (v931
                  && (v932 = *(_QWORD *)(v931 + 8)) != 0
                  && (*(_BYTE *)(*(_QWORD *)(v932 + 104) + 239) & 0x18) != 0
                  && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v804 + 24) + 8)
                                                                               + 40)
                                                                   + 8)
                                                       + 1944)
                                           + 248)
                               + 479))
                {
                  WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v804);
                }
                else
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v804 + 688))(v804);
                }
              }
              WebCore::RenderFlexibleBox::setCachedChildIntrinsicContentLogicalHeight(v2, v804, v929);
              *((_BYTE *)v2 + 394) = v928;
            }
          }
LABEL_1531:
          v815 = *v767;
          if ((*((_BYTE *)*v767 + 20) & 0xF8) == 0)
          {
            if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
            {
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
                goto LABEL_2222;
LABEL_1534:
              v816 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)v815 + 1096))(*v767);
              v817 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)v815 + 1104))(v815);
              v818 = __OFADD__(v816, v817);
              v819 = v816 + v817;
              v820 = (v816 >> 31) + 0x7FFFFFFF;
            }
            else
            {
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
                goto LABEL_1534;
LABEL_2222:
              v1073 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)v815 + 1080))(*v767);
              v1074 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)v815 + 1088))(v815);
              v818 = __OFADD__(v1073, v1074);
              v819 = v1073 + v1074;
              v820 = (v1073 >> 31) + 0x7FFFFFFF;
            }
            if (v818)
              v821 = v820;
            else
              v821 = v819;
LABEL_1538:
            v822 = *((_DWORD *)v2 + 5);
            if ((v822 & 0x1000) != 0)
            {
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
                goto LABEL_2216;
LABEL_1540:
              v823 = (int *)((char *)v815 + 160);
            }
            else
            {
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
                goto LABEL_1540;
LABEL_2216:
              v823 = (int *)((char *)v815 + 164);
            }
            v824 = *v823;
            v563 = __OFADD__(v821, v824);
            v825 = v821 + v824;
            v826 = (v821 >> 31) + 0x7FFFFFFF;
            if (!v563)
              v826 = v825;
            v563 = __OFSUB__(v759, v826);
            LODWORD(v827) = v759 - v826;
            if (v563)
              LODWORD(v827) = (v759 >> 31) + 0x7FFFFFFF;
            if ((v827 & 0x80000000) != 0 && v1132 >= 3 && (v1129 & 0x60) == 0x40)
            {
LABEL_1565:
              LODWORD(v827) = 0;
            }
            else
            {
              switch(v800)
              {
                case 0:
                  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 0xC) != 8)
                    goto LABEL_1565;
                  break;
                case 3:
                  v827 = (((uint64_t)(int)v827 << 6) + (((int)v827 & 0x200000000000000) != 0 ? 0x7FuLL : 0)) >> 7;
                  break;
                case 9:
                  break;
                default:
                  goto LABEL_1565;
              }
            }
            v828 = *v767;
            if ((v822 & 0x1000) != 0)
            {
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
                goto LABEL_2218;
LABEL_1550:
              v829 = __ROR8__(*((_QWORD *)v828 + 19), 32);
            }
            else
            {
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
                goto LABEL_1550;
LABEL_2218:
              v829 = *((_QWORD *)v828 + 19);
            }
            v563 = __OFADD__(HIDWORD(v829), (_DWORD)v827);
            LODWORD(v827) = HIDWORD(v829) + v827;
            if (v563)
              v827 = ((HIDWORD(v829) >> 31) + 0x7FFFFFFF);
            else
              v827 = v827;
            if ((v822 & 0x1000) != 0)
            {
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
                goto LABEL_1563;
LABEL_1556:
              v830 = (v827 << 32) | v829;
            }
            else
            {
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
                goto LABEL_1556;
LABEL_1563:
              v830 = v827 | (v829 << 32);
            }
            *((_QWORD *)v828 + 19) = v830;
            goto LABEL_1558;
          }
          LODWORD(v1176) = 0;
          LODWORD(v1180) = 0;
          if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
          {
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
              goto LABEL_2466;
LABEL_2113:
            WebCore::RenderBox::computeBlockDirectionMargins(v815, v1126, (WebCore::LayoutUnit *)&v1176, (WebCore::LayoutUnit *)&v1180);
          }
          else
          {
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
              goto LABEL_2113;
LABEL_2466:
            v1098 = WebCore::RenderBox::containingBlockLogicalWidthForContentInFragment(v815, 0);
            if (((*((_DWORD *)v815 + 31) >> 13) & 6u) - 2 < 4)
              v1099 = (unsigned int *)((char *)v815 + 164);
            else
              v1099 = (unsigned int *)((char *)v815 + 160);
            WebCore::RenderBox::computeInlineDirectionMargins((int *)v815, v1126, v1098, *v1099 | 0x100000000, 0, (int *)&v1176, (int *)&v1180);
          }
          v821 = (_DWORD)v1176 + (_DWORD)v1180;
          if (__OFADD__((_DWORD)v1176, (_DWORD)v1180))
            v821 = (v1176 >> 31) + 0x7FFFFFFF;
          v759 = v1148;
          v2 = v1126;
          goto LABEL_1538;
        }
        if (v774 != 5)
          goto LABEL_1531;
LABEL_1558:
        v767 += 5;
        if (v767 == (const WebCore::RenderBox **)v1144)
          goto LABEL_1590;
      }
      v775 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20);
      if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
        v940 = (v775 >> 1) & 1;
      else
        v940 = (v775 & 2) == 0;
      if (v940 != (*((_BYTE *)v770 + 21) & 0x10) >> 4)
      {
        v774 = 4;
        goto LABEL_1472;
      }
      v774 = 11;
      goto LABEL_1471;
    }
    v885 = WebCore::RenderFlexibleBox::crossAxisContentExtent(v2);
    v886 = ((unint64_t)v752 << 6) - 64;
    if (v886 >= 0x7FFFFFFF)
      v886 = 0x7FFFFFFFLL;
    v887 = (uint64_t)(v886 * (int)v1118) / 64;
    if (HIDWORD(v887) != (int)v887 >> 31)
      LODWORD(v887) = (v1118 >> 31) + 0x7FFFFFFF;
    LODWORD(v888) = v885 - v887;
    if (__OFSUB__(v885, (_DWORD)v887))
      LODWORD(v888) = (v885 >> 31) + 0x7FFFFFFF;
    v889 = (int *)((char *)v754 + 4);
    v890 = v752;
    do
    {
      v891 = *v889;
      v889 += 12;
      v563 = __OFSUB__((_DWORD)v888, v891);
      v892 = v888 - v891;
      LODWORD(v888) = (v888 >> 31) + 0x7FFFFFFF;
      if (v563)
        v888 = v888;
      else
        v888 = v892;
      --v890;
    }
    while (v890);
    if (v881 != 2 && (v888 & 0x80000000) != 0)
    {
      if ((v880 & 6) == 2)
      {
LABEL_1780:
        v939 = ((unint64_t)(-64 * v888) >> 7) & 0x7FFFFFFF;
        if ((_DWORD)v888 == 0x80000000)
          LODWORD(v939) = 0x3FFFFFFF;
      }
      else
      {
        LODWORD(v939) = 0;
        switch(v879)
        {
          case 1:
          case 2:
          case 4:
            break;
          case 3:
            goto LABEL_1780;
          case 5:
            goto LABEL_1960;
          case 6:
            if (v757 == 8)
            {
LABEL_1960:
              if ((_DWORD)v888 == 0x80000000)
                LODWORD(v939) = 0x7FFFFFFF;
              else
                LODWORD(v939) = -(int)v888;
            }
            else
            {
              LODWORD(v939) = 0;
            }
            break;
          case 7:
            if (v757 == 8)
              goto LABEL_2079;
            goto LABEL_2075;
          default:
            if (v757 == 8)
            {
LABEL_2075:
              if ((_DWORD)v888 == 0x80000000)
                LODWORD(v939) = 0x7FFFFFFF;
              else
                LODWORD(v939) = -(int)v888;
            }
            else
            {
LABEL_2079:
              LODWORD(v939) = 0;
            }
            v2 = v1126;
            break;
        }
      }
      *((_DWORD *)v2 + 96) = v939;
      v893 = 1;
      goto LABEL_1693;
    }
    *((_DWORD *)v2 + 96) = 0;
    v893 = v888 >> 31;
    if (v881 != 2 || (v888 & 0x80000000) == 0)
    {
LABEL_1693:
      LODWORD(v756) = v888;
      switch(v879)
      {
        case 3:
          v1055 = (uint64_t)(int)v888 << 6;
          if (((int)v888 & 0x200000000000000) != 0)
            v1055 += 127;
          v756 = v1055 >> 7;
          break;
        case 4:
          goto LABEL_2440;
        case 5:
          LODWORD(v756) = v888;
          if (v757 == 8)
            goto LABEL_1694;
          break;
        case 7:
          goto LABEL_1697;
        default:
          goto LABEL_1694;
      }
      goto LABEL_1697;
    }
    v893 = 1;
LABEL_2440:
    LODWORD(v756) = v888;
    if (v757 == 8)
    {
LABEL_1697:
      v894 = 0;
      while (1)
      {
        if (v894 == v752)
        {
          __break(0xC471u);
          JUMPOUT(0x1943C6E20);
        }
        v895 = (int *)((char *)v754 + 48 * v894);
        v896 = (*v895 >> 31) + 0x7FFFFFFF;
        if (!__OFADD__(*v895, (_DWORD)v756))
          v896 = *v895 + v756;
        *v895 = v896;
        v897 = (char *)v754 + 48 * v894;
        if (*((_DWORD *)v897 + 11))
        {
          v898 = 0;
          v899 = 0;
          v900 = v897 + 32;
          do
          {
            v901 = *(_QWORD *)(*(_QWORD *)v900 + v898);
            v902 = *((_DWORD *)v2 + 5);
            if ((v902 & 0x1000) != 0)
            {
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
              {
LABEL_1705:
                v751 = __ROR8__(*(_QWORD *)(v901 + 152), 32);
                goto LABEL_1706;
              }
            }
            else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
            {
              goto LABEL_1705;
            }
            v751 = *(_QWORD *)(v901 + 152);
LABEL_1706:
            LODWORD(v903) = (HIDWORD(v751) >> 31) + 0x7FFFFFFF;
            if (__OFADD__(HIDWORD(v751), (_DWORD)v756))
              v903 = v903;
            else
              v903 = (HIDWORD(v751) + v756);
            if ((v902 & 0x1000) != 0)
            {
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
              {
LABEL_1714:
                v904 = v903 | (v751 << 32);
                goto LABEL_1712;
              }
            }
            else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
            {
              goto LABEL_1714;
            }
            v904 = (v903 << 32) | v751;
LABEL_1712:
            *(_QWORD *)(v901 + 152) = v904;
            ++v899;
            v898 += 40;
          }
          while (v899 < *((unsigned int *)v900 + 3));
        }
        if (v880 == 4)
        {
          if ((int)v888 >= 1)
          {
            LODWORD(v1011) = (_DWORD)v752 << 6;
            if (v752 <= 0x1FFFFFE)
              v1011 = v1011;
            else
              v1011 = 0x7FFFFFFFLL;
            v1012 = (v888 << 6) / v1011;
            if (v1012 >= 0x7FFFFFFF)
              LODWORD(v1012) = 0x7FFFFFFF;
            v1009 = v754;
            v1013 = (char *)v754 + 48 * v894;
            v1015 = *((_DWORD *)v1013 + 1);
            v1014 = (int *)(v1013 + 4);
            v563 = __OFADD__(v1015, (_DWORD)v1012);
            v1016 = v1015 + v1012;
            v1017 = (v1015 >> 31) + 0x7FFFFFFF;
            if (v563)
              v1016 = v1017;
            *v1014 = v1016;
            v1010 = v752;
            if ((_DWORD)v752 == 1)
              goto LABEL_1959;
            goto LABEL_2407;
          }
          LODWORD(v905) = 0;
        }
        else
        {
          v1009 = v754;
          LODWORD(v905) = 0;
          if ((_DWORD)v752 == 1)
            goto LABEL_2412;
          v2 = v1126;
          if ((int)v888 >= 1)
          {
            if (v880 == 3)
            {
              v1010 = v752 + 1;
              goto LABEL_2407;
            }
            v1010 = v752;
            if (v880 != 2)
            {
              if (v880 == 1)
              {
                v1010 = v752 - 1;
                goto LABEL_2407;
              }
LABEL_1959:
              LODWORD(v905) = 0;
LABEL_2412:
              v754 = v1009;
              v2 = v1126;
              goto LABEL_1718;
            }
LABEL_2407:
            LODWORD(v1090) = v1010 << 6;
            v290 = v1010 > 0x1FFFFFE;
            LODWORD(v905) = 0x7FFFFFFF;
            if (v290)
              v1090 = 0x7FFFFFFFLL;
            else
              v1090 = v1090;
            if ((uint64_t)((v888 << 6) / v1090) < 0x7FFFFFFF)
              v905 = (v888 << 6) / v1090;
            goto LABEL_2412;
          }
        }
LABEL_1718:
        v563 = __OFADD__((_DWORD)v905, v1118);
        v906 = v905 + v1118;
        if (v563)
          v906 = 0x7FFFFFFF;
        v563 = __OFADD__((_DWORD)v756, v906);
        v907 = v756 + v906;
        LODWORD(v756) = (v756 >> 31) + 0x7FFFFFFF;
        if (v563)
          v756 = v756;
        else
          v756 = v907;
        if (++v894 == v752)
          goto LABEL_1448;
      }
    }
LABEL_1694:
    if (v880 == 2)
    {
      if ((int)v888 < 1)
      {
        if (v893)
          LODWORD(v756) = -(int)((unint64_t)(-64 * (int)v888) >> 7);
        else
          LODWORD(v756) = 0;
      }
      else
      {
        LODWORD(v1022) = (_DWORD)v752 << 7;
        if ((2 * v752) <= 0x1FFFFFE)
          v1022 = v1022;
        else
          v1022 = 0x7FFFFFFFLL;
        v756 = (v888 << 6) / v1022;
        if (v756 >= 0x7FFFFFFF)
          LODWORD(v756) = 0x7FFFFFFF;
      }
    }
    else
    {
      if (v880 != 3)
      {
        LODWORD(v756) = 0;
        goto LABEL_1697;
      }
      if ((int)v888 < 1)
      {
        v1061 = (uint64_t)(int)v888 << 6;
        if (((int)v888 & 0x200000000000000) != 0)
          v1061 += 127;
        v756 = v1061 >> 7;
      }
      else
      {
        LODWORD(v1023) = ((_DWORD)v752 + 1) << 6;
        LODWORD(v756) = 0x7FFFFFFF;
        if ((v752 + 1) <= 0x1FFFFFE)
          v1023 = v1023;
        else
          v1023 = 0x7FFFFFFFLL;
        v1024 = (v888 << 6) / v1023;
        if (v1024 < 0x7FFFFFFF)
          LODWORD(v756) = v1024;
      }
    }
    v2 = v1126;
    goto LABEL_1697;
  }
  v1124 = 0;
LABEL_1611:
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v753 + 32) + 16) + 20) & 0xC) == 8)
    WebCore::RenderFlexibleBox::flipForWrapReverse((uint64_t)v2, (uint64_t)&v1168, v1124);
  if ((*((_BYTE *)v2 + 123) & 4) != 0
    && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
  {
    v1025 = (*((_BYTE *)v2 + 21) & 0x10) != 0 ? HIDWORD(*((_QWORD *)v2 + 20)) : *((_QWORD *)v2 + 20);
    v1153 = HIDWORD(v1169);
    if (HIDWORD(v1169))
    {
      v1157 = 0;
      v1150 = v1168;
      while (1)
      {
        v1026 = (char *)v1150 + 48 * v1157;
        if (*((_DWORD *)v1026 + 11))
          break;
LABEL_2025:
        if (++v1157 == v1153)
          goto LABEL_1614;
      }
      v1027 = 0;
      v1028 = 0;
      v1029 = v1026 + 32;
      while (1)
      {
        v1030 = *(_QWORD *)v1029;
        v1031 = *(_QWORD *)(*(_QWORD *)v1029 + v1027);
        v1032 = *((_DWORD *)v2 + 5);
        if ((v1032 & 0x1000) != 0)
        {
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
          {
LABEL_2000:
            v1033 = __ROR8__(*(_QWORD *)(v1031 + 152), 32);
            goto LABEL_2001;
          }
        }
        else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
        {
          goto LABEL_2000;
        }
        v1033 = *(_QWORD *)(v1031 + 152);
LABEL_2001:
        if ((v1032 & 0x1000) != 0)
        {
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
          {
LABEL_2003:
            v1034 = (int *)(v1031 + 160);
            goto LABEL_2004;
          }
        }
        else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
        {
          goto LABEL_2003;
        }
        v1034 = (int *)(v1031 + 164);
LABEL_2004:
        v1035 = *v1034;
        v563 = __OFSUB__((_DWORD)v1025, v1035);
        v1036 = v1025 - v1035;
        if (v563)
          v1036 = (v1025 >> 31) + 0x7FFFFFFF;
        v563 = __OFSUB__(v1036, HIDWORD(v1033));
        v1037 = v1036 - HIDWORD(v1033);
        v1038 = (v1036 >> 31) + 0x7FFFFFFF;
        if (v563)
          v1039 = v1038;
        else
          v1039 = v1037;
        if ((v1032 & 0x1000) != 0)
        {
          v1040 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)v2 + 1360))(v2);
          if (v1040 <= 0x2000000)
            v1041 = -64 * v1040;
          else
            v1041 = 0x80000000;
          if (v1040 < -33554431)
            v1041 = 0x7FFFFFFF;
          v563 = __OFADD__(v1039, v1041);
          v1042 = v1039 + v1041;
          if (v563)
            v1039 = (v1039 >> 31) + 0x7FFFFFFF;
          else
            v1039 = v1042;
        }
        v1043 = *(_QWORD *)(v1030 + v1027);
        if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
        {
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) == 0)
          {
LABEL_2024:
            *(_QWORD *)(v1043 + 152) = v1039 | (unint64_t)(v1033 << 32);
            goto LABEL_2022;
          }
        }
        else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 16) + 20) & 2) != 0)
        {
          goto LABEL_2024;
        }
        *(_QWORD *)(v1043 + 152) = v1033 | ((unint64_t)v1039 << 32);
LABEL_2022:
        ++v1028;
        v1027 += 40;
        if (v1028 >= *((unsigned int *)v1029 + 3))
          goto LABEL_2025;
      }
    }
  }
LABEL_1614:
  if (HIDWORD(v1159))
  {
    v854 = v1158;
    v855 = 40 * HIDWORD(v1159);
    do
    {
      v856 = *(_QWORD *)v854;
      *(_QWORD *)v854 = 0;
      if (v856)
      {
        v857 = *(_DWORD *)(v856 + 16);
        if (!v857)
        {
          __break(0xC471u);
          JUMPOUT(0x1943C5300);
        }
        *(_DWORD *)(v856 + 16) = v857 - 1;
      }
      v854 = (WTF *)((char *)v854 + 40);
      v855 -= 40;
    }
    while (v855);
  }
  v858 = v1158;
  if (v1158)
  {
    v1158 = 0;
    LODWORD(v1159) = 0;
    WTF::fastFree(v858, (void *)v751);
  }
  if (HIDWORD(v1166))
  {
    v859 = v1165;
    v860 = 40 * HIDWORD(v1166);
    do
    {
      v861 = *(_QWORD *)v859;
      *(_QWORD *)v859 = 0;
      if (v861)
      {
        v862 = *(_DWORD *)(v861 + 16);
        if (!v862)
        {
          __break(0xC471u);
          JUMPOUT(0x1943C5320);
        }
        *(_DWORD *)(v861 + 16) = v862 - 1;
      }
      v859 = (WTF *)((char *)v859 + 40);
      v860 -= 40;
    }
    while (v860);
  }
  result = v1165;
  if (v1165)
  {
    v1165 = 0;
    LODWORD(v1166) = 0;
    result = (WTF *)WTF::fastFree(result, (void *)v751);
  }
  v863 = v1168;
  if (HIDWORD(v1169))
  {
    v864 = (WTF *)((char *)v1168 + 48 * HIDWORD(v1169));
    v865 = v1168;
    do
    {
      v866 = *((unsigned int *)v865 + 11);
      if ((_DWORD)v866)
      {
        v867 = (uint64_t *)*((_QWORD *)v865 + 4);
        v868 = 40 * v866;
        do
        {
          v869 = *v867;
          *v867 = 0;
          if (v869)
          {
            v870 = *(_DWORD *)(v869 + 16);
            if (!v870)
            {
              __break(0xC471u);
              JUMPOUT(0x1943C52D8);
            }
            *(_DWORD *)(v869 + 16) = v870 - 1;
          }
          v867 += 5;
          v868 -= 40;
        }
        while (v868);
      }
      result = (WTF *)*((_QWORD *)v865 + 4);
      if (result)
      {
        *((_QWORD *)v865 + 4) = 0;
        *((_DWORD *)v865 + 10) = 0;
        result = (WTF *)WTF::fastFree(result, (void *)v751);
      }
      if (*((_BYTE *)v865 + 24))
      {
        v871 = *((_DWORD *)v865 + 5);
        v872 = (WTF *)*((_QWORD *)v865 + 1);
        if (v871)
        {
          v873 = (WTF *)((char *)v872 + 24 * v871);
          do
          {
            v874 = *((_QWORD *)v872 + 1);
            if (v874)
            {
              v875 = *(unsigned int *)(v874 - 4);
              if ((_DWORD)v875)
              {
                v876 = (WTF **)*((_QWORD *)v872 + 1);
                do
                {
                  v877 = *v876;
                  if (*v876 != (WTF *)-1)
                  {
                    *v876 = 0;
                    if (v877)
                    {
                      if (*(_DWORD *)v877 == 1)
                        WTF::fastFree(v877, (void *)v751);
                      else
                        --*(_DWORD *)v877;
                    }
                  }
                  ++v876;
                  --v875;
                }
                while (v875);
              }
              result = (WTF *)WTF::fastFree((WTF *)(v874 - 16), (void *)v751);
            }
            v872 = (WTF *)((char *)v872 + 24);
          }
          while (v872 != v873);
          v872 = (WTF *)*((_QWORD *)v865 + 1);
        }
        if (v872)
        {
          *((_QWORD *)v865 + 1) = 0;
          *((_DWORD *)v865 + 4) = 0;
          result = (WTF *)WTF::fastFree(v872, (void *)v751);
        }
      }
      v865 = (WTF *)((char *)v865 + 48);
    }
    while (v865 != v864);
  }
  if (v863)
    return (WTF *)WTF::fastFree(v863, (void *)v751);
  return result;
}

BOOL WebCore::RenderFlexibleBox::childMainSizeIsDefinite(WebCore::RenderFlexibleBox *this, const WebCore::RenderBox *a2, const WebCore::Length *a3)
{
  int v3;
  BOOL v4;
  _BOOL8 result;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v12;

  v3 = *((unsigned __int8 *)a3 + 4);
  if (*((_BYTE *)a3 + 4))
    v4 = v3 == 12;
  else
    v4 = 1;
  if (v4)
    return 0;
  v8 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20);
  v9 = (*((_BYTE *)this + 21) & 0x10) != 0 ? (v8 >> 1) & 1 : (v8 & 2) == 0;
  if (v9 == (*((_BYTE *)a2 + 21) & 0x10) >> 4
    && (v3 - 5) < 6
    && ((0x3Du >> (v3 - 5)) & 1) != 0)
  {
    return 0;
  }
  v10 = v8 & 2;
  if ((v3 & 0xFFFFFFF7) != 3 || v10 == 0)
    return 1;
  if (*((_BYTE *)this + 392) == 1)
    return 0;
  if (!*((_BYTE *)this + 392))
    return 1;
  v12 = WebCore::RenderBox::computePercentageLogicalHeight(a2, a3, 0) & 0xFF00000000;
  result = v12 != 0;
  if (*((_BYTE *)this + 393))
  {
    if (((*((_BYTE *)this + 21) & 0x10) == 0) == ((*((_BYTE *)a2 + 21) & 0x10) == 0))
      *((_BYTE *)this + 392) = v12 == 0;
  }
  return result;
}

uint64_t WebCore::RenderFlexibleBox::mainAxisContentExtent(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int *v20;
  signed int v21;
  _QWORD v22[3];

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) == 0)
    return WebCore::RenderBox::contentLogicalWidth((WebCore::RenderBox *)a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
  if (__OFADD__(v5, v6))
    v7 = (v5 >> 31) + 0x7FFFFFFF;
  else
    v7 = v5 + v6;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
  v10 = v8 + v9;
  if (__OFADD__(v8, v9))
    v10 = (v8 >> 31) + 0x7FFFFFFF;
  v11 = __OFADD__(v7, v10);
  v12 = v7 + v10;
  if (v11)
    v13 = (v7 >> 31) + 0x7FFFFFFF;
  else
    v13 = v12;
  v14 = 1360;
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
    v14 = 1352;
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + v14))(a1);
  v16 = v15 << 6;
  if (v15 < -33554432)
    v16 = 0x80000000;
  if (v15 > 0x1FFFFFF)
    v16 = 0x7FFFFFFF;
  v11 = __OFADD__(v13, v16);
  v17 = v13 + v16;
  if (v11)
    v18 = (v13 >> 31) + 0x7FFFFFFF;
  else
    v18 = v17;
  v19 = a2 + v18;
  if (__OFADD__(a2, v18))
    v19 = (a2 >> 31) + 0x7FFFFFFF;
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
    v20 = (unsigned int *)(a1 + 152);
  else
    v20 = (unsigned int *)(a1 + 156);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 1312))(v22, a1, v19, *v20);
  result = 0x7FFFFFFFLL;
  if (LODWORD(v22[0]) != 0x7FFFFFFF)
  {
    v21 = (LODWORD(v22[0]) >> 31) + 0x7FFFFFFF;
    if (!__OFSUB__(v22[0], v18))
      v21 = LODWORD(v22[0]) - v18;
    return v21 & ~(v21 >> 31);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::FlexItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3 && (unint64_t)v5 + 40 * *(unsigned int *)(a1 + 12) > a3)
  {
    WTF::Vector<WebCore::FlexItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v3 - (_QWORD)v5;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8);
    v7 = v6 + (v6 >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 <= a2)
      v8 = a2;
    if (v8 > v6)
    {
      if (v8 >= 0x6666667)
      {
LABEL_24:
        __break(0xC471u);
        JUMPOUT(0x1943C76D4);
      }
      v9 = *(_DWORD *)(a1 + 12);
      v10 = 40 * v8;
      v11 = WTF::fastMalloc((WTF *)(40 * v8));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)a1 = v11;
      if (v9)
      {
        v14 = v5;
        do
        {
          v15 = *(_QWORD *)v14;
          *(_QWORD *)v14 = 0;
          *(_QWORD *)v11 = v15;
          v16 = *((_QWORD *)v14 + 1);
          *(_DWORD *)(v11 + 16) = *((_DWORD *)v14 + 4);
          *(_QWORD *)(v11 + 8) = v16;
          *(_DWORD *)(v11 + 20) = *((_DWORD *)v14 + 5);
          *(_DWORD *)(v11 + 24) = *((_DWORD *)v14 + 6);
          v17 = *(_QWORD *)((char *)v14 + 28);
          *(_WORD *)(v11 + 36) = *((_WORD *)v14 + 18);
          *(_QWORD *)(v11 + 28) = v17;
          v18 = *(_QWORD *)v14;
          *(_QWORD *)v14 = 0;
          if (v18)
          {
            v19 = *(_DWORD *)(v18 + 16);
            if (!v19)
              goto LABEL_24;
            *(_DWORD *)(v18 + 16) = v19 - 1;
          }
          v14 = (WTF *)((char *)v14 + 40);
          v11 += 40;
        }
        while (v14 != (WTF *)((char *)v5 + 40 * v9));
      }
      if (v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
      }
    }
  }
  return v3;
}

uint64_t WebCore::RenderBoxModelObject::horizontalBorderAndPaddingExtent(WebCore::RenderBoxModelObject *this)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;

  v2 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1016))(this);
  v3 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1024))(this);
  if (__OFADD__(v2, v3))
    v4 = (v2 >> 31) + 0x7FFFFFFF;
  else
    v4 = v2 + v3;
  v5 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 944))(this);
  if (__OFADD__(v4, v5))
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  else
    v6 = v4 + v5;
  v7 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 952))(this);
  if (__OFADD__(v6, v7))
    return (v6 >> 31) + 0x7FFFFFFF;
  else
    return v6 + v7;
}

uint64_t WebCore::RenderFlexibleBox::flowAwareMarginEndForChild(WebCore::RenderFlexibleBox *this, const WebCore::RenderBox *a2)
{
  char v2;
  BOOL v3;
  uint64_t v4;
  unsigned int v6;
  _QWORD *v7;

  v2 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20);
  if ((*((_BYTE *)this + 21) & 0x10) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) == 0)
    {
      v3 = ((v2 & 3) == 1) == ((*((_BYTE *)this + 123) & 4) == 0);
      v4 = 137;
      goto LABEL_4;
    }
    v6 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
    if (v6 >= 5)
    {
      v4 = 136;
      return (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a2 + 8 * v4))(a2);
    }
    v7 = &unk_1969FCA10;
LABEL_9:
    v4 = v7[v6];
    return (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a2 + 8 * v4))(a2);
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) != 0)
  {
    v6 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
    if (v6 >= 5)
    {
      v4 = 138;
      return (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a2 + 8 * v4))(a2);
    }
    v7 = &unk_1969FC9E8;
    goto LABEL_9;
  }
  v3 = ((v2 & 3) == 1) == ((*((_BYTE *)this + 123) & 4) == 0);
  v4 = 135;
LABEL_4:
  if (!v3)
    ++v4;
  return (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a2 + 8 * v4))(a2);
}

int *WebCore::RenderFlexibleBox::flexBasisForChild(int *this, const WebCore::RenderBox *a2, uint64_t a3)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  char v9;
  unsigned int v10;
  char v11;
  int v12;
  int v13;
  unsigned __int8 v14;
  char v15;
  char v16;

  v3 = this;
  v4 = *(_QWORD *)(a3 + 88);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 16);
  *this = 0;
  *((_BYTE *)this + 6) = 0;
  v6 = *(unsigned __int8 *)(v5 + 16);
  *((_BYTE *)this + 4) = v6;
  *((_BYTE *)this + 5) = *(_BYTE *)(v5 + 17);
  if ((v6 - 2) < 9)
  {
    *((_BYTE *)this + 6) = *(_BYTE *)(v5 + 18);
    *this = *(_DWORD *)(v5 + 12);
    return this;
  }
  if (v6)
  {
    if (v6 == 11)
    {
      *this = *(_DWORD *)(v5 + 12);
      return WebCore::Length::ref(this);
    }
    return this;
  }
  if ((*((_BYTE *)a2 + 21) & 0x10) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 32) + 16) + 20) & 2) == 0)
      goto LABEL_6;
LABEL_24:
    v7 = *(_QWORD *)(v4 + 8) + 4;
    goto LABEL_7;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 32) + 16) + 20) & 2) == 0)
    goto LABEL_24;
LABEL_6:
  v7 = *(_QWORD *)(v4 + 8) + 12;
LABEL_7:
  v16 = 0;
  v14 = *(_BYTE *)(v7 + 4);
  v8 = v14;
  v9 = *(_BYTE *)(v7 + 5);
  v15 = v9;
  v10 = v14 - 2;
  if (v10 >= 9)
  {
    if (v14 == 11)
    {
      v13 = *(_DWORD *)v7;
      v12 = v13;
      this = WebCore::Length::ref(&v13);
      *((_BYTE *)v3 + 4) = 11;
      *((_BYTE *)v3 + 5) = v9;
      goto LABEL_15;
    }
    v11 = 0;
    v12 = 0;
  }
  else
  {
    v11 = *(_BYTE *)(v7 + 6);
    v12 = *(_DWORD *)v7;
    if (v11)
      v11 = 1;
  }
  *((_BYTE *)this + 4) = v14;
  *((_BYTE *)this + 5) = v9;
  if (v10 < 9)
  {
    *((_BYTE *)this + 6) = v11;
LABEL_15:
    *v3 = v12;
    return this;
  }
  if (v8 <= 0xD)
  {
    if (((1 << v8) & 0x3003) != 0)
    {
      *this = 0;
    }
    else if (v8 == 11)
    {
      goto LABEL_15;
    }
  }
  return this;
}

uint64_t WebCore::RenderBlock::hasPercentHeightDescendants(WebCore::RenderBlock *this, void *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t result;
  _QWORD *v17;
  WTF *v18;
  WTF *v19;
  _QWORD *v20;
  _QWORD *v21;
  WTF *v22;

  v2 = (uint64_t *)WebCore::percentHeightDescendantsMap;
  if (WebCore::percentHeightDescendantsMap)
  {
    ++*(_DWORD *)(WebCore::percentHeightDescendantsMap + 8);
    v3 = *((_QWORD *)this + 1);
    if (v3)
    {
      if (*(_QWORD *)(v3 + 8))
      {
        v4 = *v2;
        if (v4)
        {
          v5 = *(_DWORD *)(v4 - 8);
          v6 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
          v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
          v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
          v9 = v5 & ((v8 >> 31) ^ v8);
          for (i = 1; ; ++i)
          {
            v11 = *(_QWORD *)(v4 + 16 * v9);
            if (!v11)
              return 0;
            if (v11 != -1 && v11 == v3)
              break;
            v9 = (v9 + i) & v5;
          }
          v13 = *(_QWORD **)(v4 + 16 * v9 + 8);
          if (v13)
          {
            v14 = *v13;
            if (*v13)
            {
              if (*(_DWORD *)(v14 - 12))
              {
                v15 = v13 + 1;
                if (v13[1])
                {
                  v17 = (_QWORD *)v13[1];
                  do
                  {
                    if (*(_QWORD *)(*v17 + 8))
                      return 1;
                    v17 = (_QWORD *)v17[2];
                  }
                  while (v17);
                  v21 = *(_QWORD **)(v4 + 16 * v9 + 8);
                  v22 = (WTF *)v13[1];
                  v20 = v13 + 1;
                  do
                  {
                    v18 = v22;
                    v22 = (WTF *)*((_QWORD *)v22 + 2);
                    v19 = *(WTF **)v18;
                    *(_QWORD *)v18 = 0;
                    if (v19)
                    {
                      if (*(_DWORD *)v19 == 1)
                        WTF::fastFree(v19, a2);
                      else
                        --*(_DWORD *)v19;
                    }
                    WTF::fastFree(v18, a2);
                  }
                  while (v22);
                  v14 = *v21;
                  if (!*v21)
                  {
                    v13 = v21;
                    *v20 = 0;
                    v20[1] = 0;
                    *((_DWORD *)v20 + 4) = 0;
LABEL_19:
                    result = 0;
                    *((_DWORD *)v13 + 7) = 2 * v14;
                    return result;
                  }
                  v15 = v20;
                  v13 = v21;
                }
                *v13 = 0;
                WTF::fastFree((WTF *)(v14 - 16), a2);
                v14 = *v13;
                *v15 = 0;
                v15[1] = 0;
                *((_DWORD *)v15 + 4) = 0;
                if (v14)
                {
                  LODWORD(v14) = *(_DWORD *)(v14 - 12);
                  if (v14 > 0x7FFFFFFE)
                    LODWORD(v14) = 0x7FFFFFFF;
                }
                goto LABEL_19;
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

BOOL WebCore::RenderFlexibleBox::shouldApplyMinSizeAutoForChild(WebCore::RenderFlexibleBox *this, const WebCore::RenderBox *a2)
{
  int v4;
  int v5;
  unsigned int *v6;
  unsigned int v7;
  void *v8;
  int v9;
  _BOOL8 result;
  char v11;
  int v12;
  unsigned __int8 v13;
  char v14;
  char v15;

  v4 = *((_DWORD *)this + 5);
  v5 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2;
  if ((v4 & 0x1000) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) == 0)
      goto LABEL_3;
  }
  else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) != 0)
  {
LABEL_3:
    v6 = (unsigned int *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 8) + 36);
    goto LABEL_4;
  }
  v6 = (unsigned int *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 8) + 20);
LABEL_4:
  v15 = 0;
  v13 = *((_BYTE *)v6 + 4);
  v7 = v13;
  v14 = *((_BYTE *)v6 + 5);
  if (v13 - 2 >= 9)
  {
    v8 = 0;
    if (v13 == 11)
    {
      v8 = (void *)*v6;
      v12 = *v6;
      WebCore::Length::ref(&v12);
      v4 = *((_DWORD *)this + 5);
      v5 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2;
    }
  }
  else
  {
    v8 = (void *)*v6;
  }
  v9 = v5 != 0;
  if ((v4 & 0x1000) == 0)
    v9 = v5 == 0;
  if (v9 != (*((_BYTE *)a2 + 21) & 0x10) >> 4)
  {
    if (!v7)
      goto LABEL_11;
    if (v7 != 11)
      return 0;
LABEL_22:
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v8);
    return 0;
  }
  result = 0;
  if (v7 > 0xB)
    return result;
  if (((1 << v7) & 0x581) != 0)
  {
LABEL_11:
    if ((v4 & 0x1000) != 0)
    {
      if (!v5)
        goto LABEL_13;
    }
    else if (v5)
    {
LABEL_13:
      v11 = 13;
      return ((*((_QWORD *)a2 + 12) >> v11) & 7) == 0;
    }
    v11 = 10;
    return ((*((_QWORD *)a2 + 12) >> v11) & 7) == 0;
  }
  if (v7 == 11)
    goto LABEL_22;
  return result;
}

uint64_t WebCore::RenderFlexibleBox::childHasComputableAspectRatioAndCrossSizeIsConsideredDefinite(WebCore::RenderFlexibleBox *this, const WebCore::RenderBox *a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned __int8 v12;
  char v13;
  char v14;

  result = WebCore::RenderFlexibleBox::childHasComputableAspectRatio(a2, a2);
  if (!(_DWORD)result)
    return result;
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) == 0)
      goto LABEL_5;
  }
  else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 8) + 4;
    goto LABEL_6;
  }
  v5 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 8) + 12;
LABEL_6:
  v11 = 0;
  v14 = 0;
  v12 = *(_BYTE *)(v5 + 4);
  v13 = *(_BYTE *)(v5 + 5);
  if (v12 - 2 < 9)
  {
    v14 = *(_BYTE *)(v5 + 6);
    v11 = *(_DWORD *)v5;
    goto LABEL_10;
  }
  if (!v12)
    goto LABEL_9;
  if (v12 != 11)
  {
LABEL_10:
    if ((v12 & 0xF7) == 3)
      goto LABEL_11;
    if (v12 == 4)
    {
LABEL_19:
      result = 1;
      goto LABEL_20;
    }
LABEL_9:
    result = WebCore::RenderFlexibleBox::childCrossSizeShouldUseContainerCrossSize(this, a2);
    goto LABEL_20;
  }
  v11 = *(_DWORD *)v5;
  WebCore::Length::ref((int *)&v11);
LABEL_11:
  v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20);
  v7 = (v6 >> 1) & 1;
  v8 = (v6 & 2) == 0;
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
    v8 = v7;
  if (v8 == (*((_BYTE *)a2 + 21) & 0x10) >> 4 || !*((_BYTE *)this + 392))
    goto LABEL_19;
  if (*((_BYTE *)this + 392) == 1)
    goto LABEL_9;
  v9 = WebCore::RenderBox::computePercentageLogicalHeight((uint64_t)a2, (WebCore::Length *)&v11, 1);
  result = 1;
  v9 &= 0xFF00000000uLL;
  *((_BYTE *)this + 392) = v9 == 0;
  if (!v9)
    goto LABEL_9;
LABEL_20:
  if (v12 == 11)
  {
    v10 = result;
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v11);
    return v10;
  }
  return result;
}

uint64_t WebCore::LayoutIntegration::canUseForFlexLayout(WebCore::LayoutIntegration *this, const WebCore::RenderFlexibleBox *a2)
{
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  float v16;
  float v18;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::LayoutIntegration *v28;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x20) == 0)
    return 0;
  result = WebCore::RenderElement::firstInFlowChild(this);
  if (result)
  {
    v4 = *((_QWORD *)this + 12);
    if ((v4 & 0x1F) == 0x10 && ((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4 && (*((_BYTE *)this + 123) & 4) == 0)
    {
      v5 = (_QWORD *)*((_QWORD *)this + 11);
      v6 = v5[4];
      if ((*(_BYTE *)(*(_QWORD *)(v6 + 16) + 20) & 2) == 0
        && *(_BYTE *)(v5[1] + 16) != 3
        && ((unsigned __int16)v4 >> 13) - 3 >= 2)
      {
        v7 = (*(_BYTE *)(v6 + 124) & 0xF) - 4;
        if ((v7 >= 7 || ((0x63u >> v7) & 1) == 0) && (*(_WORD *)(v6 + 120) & 0x1FF) == 0)
        {
          v8 = v5[5];
          if (*(_BYTE *)(v8 + 388))
          {
            if (*(_BYTE *)(v8 + 376))
            {
              v28 = this;
              v26 = WebCore::RenderChildConstIteratorAdapter<WebCore::RenderElement>::begin((uint64_t *)&v28);
              v27 = v9;
              if (!v9)
                return 1;
              v10 = v9;
              while ((*(_BYTE *)(v10 + 45) & 0x40) != 0)
              {
                result = 0;
                v11 = *(_DWORD *)(v10 + 20);
                if ((v11 & 0x800) != 0)
                  return result;
                if ((v11 & 0x1800000) == 0x1000000)
                  return result;
                result = 0;
                v12 = *(unsigned __int8 *)(v10 + 46);
                if (v12 == 83)
                  return result;
                if (v12 == 103)
                  return result;
                result = 0;
                if ((*(_BYTE *)(v10 + 45) & 0x80) != 0 || v12 == 5)
                  return result;
                if (WebCore::RenderObject::isFieldset((WebCore::RenderObject *)v10)
                  || (*(_BYTE *)(v10 + 52) & 7) == 1 && (*(_BYTE *)(v10 + 53) & 4) != 0)
                {
                  break;
                }
                result = 0;
                v13 = *(unsigned __int8 *)(v10 + 46);
                if (v13 == 35 || v13 == 63)
                  return result;
                if (((*(_DWORD *)(v10 + 124) >> 13) & 6u) - 2 < 4)
                  break;
                if ((*(_BYTE *)(v10 + 123) & 4) != 0)
                  break;
                v14 = *(_QWORD **)(v10 + 88);
                if (*(_BYTE *)(v14[1] + 16) != 4)
                  break;
                v15 = *(_QWORD *)(v14[4] + 16);
                if ((*(unsigned __int8 *)(v15 + 16) | 4) != 4)
                  break;
                v16 = *(float *)(v15 + 8);
                if (v16 > 0.0 && v16 < 1.0)
                  break;
                v18 = *(float *)(v15 + 4);
                if (v18 > 0.0 && v18 < 1.0)
                  break;
                v20 = v14[5];
                v21 = *(_BYTE *)(v20 + 642) & 3;
                if (v21 == 1)
                  break;
                v22 = *(_BYTE *)(v20 + 462);
                if (v21 == 2)
                  v22 |= 0x19u;
                if ((v22 & 4) != 0)
                  break;
                result = 0;
                v23 = *(_QWORD *)(v10 + 96);
                if ((v23 & 0x1C00) == 0xC00 || (v23 & 0xE000) == 0x6000)
                  return result;
                if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 288))(v10) & 1) != 0)
                  return 0;
                v24 = *(_QWORD *)(*(_QWORD *)(v10 + 88) + 32);
                if (((*(_DWORD *)(v24 + 148) >> 5) & 3u) - 1 < 2)
                  return 0;
                v25 = (*(_BYTE *)(v24 + 125) & 0xF) - 4;
                if (v25 < 7 && ((0x63u >> v25) & 1) != 0)
                  return 0;
                WebCore::RenderChildConstIterator<WebCore::RenderElement>::operator++((uint64_t)&v26);
                v10 = v27;
                result = 1;
                if (!v27)
                  return result;
              }
            }
          }
        }
      }
    }
    return 0;
  }
  return result;
}

unint64_t WebCore::initialJustifyContentOffset(WebCore::RenderFlexibleBox *a1, const WebCore::RenderStyle *a2, int a3, unsigned int a4)
{
  uint64_t v4;
  __int16 v5;
  unsigned __int16 *v6;
  unsigned int v7;
  int v8;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  __int16 v13;
  char isEndward;
  unint64_t v15;
  int v16;
  int v17;
  const WebCore::RenderStyle *v18;
  unsigned int v19;

  v4 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 32);
  v7 = *(unsigned __int16 *)(v4 + 122);
  v6 = (unsigned __int16 *)(v4 + 122);
  v5 = v7;
  v8 = (v7 >> 4) & 7;
  if ((v7 & 0x7F) == 0)
    v8 = 4;
  if ((a2 & 0x80000000) != 0 && (v5 & 0x180) == 0x100)
    goto LABEL_27;
  if ((v5 & 0xE) == 8)
  {
    v18 = a2;
    v17 = a3;
    v19 = a4;
    v16 = v8;
    v13 = WebCore::RenderFlexibleBox::leftRightAxisDirectionFromStyle(a1, a2);
    isEndward = WebCore::StyleContentAlignmentData::isEndward(v6, v13, v19);
    v8 = v16;
    a3 = v17;
    LOBYTE(a4) = v19;
    a2 = v18;
    if ((isEndward & 1) != 0)
    {
LABEL_25:
      if ((a4 & 1) == 0)
        return (unint64_t)a2;
LABEL_6:
      if (v8 == 2)
      {
        if ((int)a2 >= 1 && a3)
        {
          LODWORD(v12) = a3 << 7;
          if ((2 * a3) <= 0x1FFFFFE)
            v12 = v12;
          else
            v12 = 0x7FFFFFFFLL;
          v11 = ((unint64_t)a2 << 6) / v12;
          goto LABEL_21;
        }
LABEL_14:
        v10 = (uint64_t)(int)a2 << 6;
      }
      else
      {
        if (v8 != 3)
          return 0;
        if ((int)a2 >= 1 && a3)
        {
          LODWORD(v15) = (a3 + 1) << 6;
          if ((a3 + 1) <= 0x1FFFFFE)
            v15 = v15;
          else
            v15 = 0x7FFFFFFFLL;
          v11 = ((unint64_t)a2 << 6) / v15;
LABEL_21:
          if (v11 >= 0x7FFFFFFF)
            return 0x7FFFFFFFLL;
          return v11;
        }
        v10 = (uint64_t)(int)a2 << 6;
      }
      return (v10 + (v10 < 0 ? 0x7FuLL : 0)) >> 7;
    }
LABEL_27:
    if ((a4 & 1) != 0)
      return (unint64_t)a2;
    goto LABEL_6;
  }
  switch(v5 & 0xF)
  {
    case 3:
      goto LABEL_14;
    case 4:
      goto LABEL_27;
    case 5:
      goto LABEL_25;
    case 7:
      return (unint64_t)a2;
    default:
      goto LABEL_6;
  }
  return (unint64_t)a2;
}

uint64_t WebCore::isSVGRootWithIntrinsicAspectRatio(WebCore *this, const WebCore::RenderBox *a2)
{
  int v2;
  uint64_t result;

  v2 = *((unsigned __int8 *)this + 46);
  if (v2 != 103 && v2 != 83)
    return 0;
  if ((*((_BYTE *)this + 52) & 7) == 3)
    return WebCore::RenderReplaced::computeIntrinsicAspectRatio(this) > 0.0;
  result = 96;
  __break(0xC471u);
  return result;
}

WebCore::Page *WebCore::Document::pageMutedStateDidChange(WebCore::Document *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (char *)this + 2664;
  WTF::WeakHashSet<WebCore::MediaProducer,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 333, &v12);
  v3 = *((_QWORD *)this + 333);
  if (v3)
  {
    v5 = *(unsigned int *)(v3 - 4);
    v4 = v3 + 8 * v5;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v7 = v2;
  v8 = v4;
  v9 = v4;
  v10 = v4;
  v11 = v3 + 8 * v5;
  WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v7);
  while (v13 != v8)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v13 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v13 + 8));
    WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v12);
  }
  return WebCore::Document::updateCaptureAccordingToMutedState(this);
}

WebCore::Page *WebCore::Document::updateIsPlayingMedia(WebCore::Document *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WebCore::Page *v10;
  WTF::StringImpl *v11;
  WebCore::Page *result;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::Page *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::Page *v25;
  uint64_t v26;

  v2 = (char *)this + 2664;
  WTF::WeakHashSet<WebCore::MediaProducer,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 333, &v25);
  v3 = *((_QWORD *)this + 333);
  if (v3)
  {
    v5 = *(unsigned int *)(v3 - 4);
    v4 = v3 + 8 * v5;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v20 = v2;
  v21 = v4;
  v22 = v4;
  v23 = v4;
  v24 = v3 + 8 * v5;
  WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v20);
  v6 = v26;
  if (v26 == v21)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      v7 |= (***(uint64_t (****)(_QWORD))(*(_QWORD *)v6 + 8))(*(_QWORD *)(*(_QWORD *)v6 + 8));
      WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v25);
      v6 = v26;
    }
    while (v26 != v21);
  }
  v8 = WebCore::Document::computeCaptureState(*((WebCore::Document **)this + 403)) | v7;
  v9 = *((_QWORD *)this + 335);
  if (v9 && *(_QWORD *)(v9 + 8))
    v8 |= 0x800u;
  *((_QWORD *)this + 402) = 0;
  v10 = (WebCore::Page *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v10 = off_1E33A3750;
  *((_QWORD *)v10 + 1) = this;
  v25 = v10;
  WebCore::Document::forEachMediaElement((uint64_t)this, (uint64_t)&v25);
  result = v25;
  v25 = 0;
  if (result)
    result = (WebCore::Page *)(*(uint64_t (**)(WebCore::Page *))(*(_QWORD *)result + 8))(result);
  if (*((_BYTE *)this + 3420))
    v13 = v8 | 0x20000;
  else
    v13 = v8;
  v14 = *((_DWORD *)this + 816);
  if (v13 != v14)
  {
    v15 = ((v14 & 0x36C7800) != 0) ^ ((v13 & 0x36C7800) != 0);
    *((_DWORD *)this + 816) = v13;
    v16 = *((_QWORD *)this + 66);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 24);
        if (v18)
        {
          v19 = *(WebCore::Page **)(v18 + 8);
          if (v19)
          {
            ++*(_DWORD *)v19;
            WebCore::Page::updateIsPlayingMedia(v19);
            result = WTF::RefCounted<WebCore::Page>::deref(v19);
          }
        }
      }
    }
    if (v15)
      return (WebCore::Page *)WebCore::Document::mediaStreamCaptureStateChanged((uint64_t)this, v11);
  }
  return result;
}

_QWORD *WTF::WeakHashSet<WebCore::MediaProducer,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a1);
  *a2 = a1;
  a2[1] = v4;
  a2[2] = v5;
  v6 = *a1;
  if (*a1)
  {
    v8 = *((unsigned int *)v6 - 1);
    v7 = &v6[v8];
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  a2[3] = v7;
  a2[4] = &v6[v8];
  return WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(a2);
}

void WebCore::PlatformCALayer::collectRectsToPaint(WebCore::PlatformCALayer *this@<X0>, WebCore::GraphicsContext *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  void *v14;
  WTF *v15;
  uint64_t *v17;
  WTF *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  _QWORD v24[7];
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  WTF *(*v29)(uint64_t, void *);
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  _BYTE v33[80];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  double *v39;
  uint64_t v40;
  uint64_t v41;

  v38 = 0;
  v39 = (double *)&v38;
  v40 = 0x2020000000;
  v41 = 0;
  v34 = 0;
  v35 = &v34;
  v36 = 0x2020000000;
  v37 = 0;
  v25 = 0;
  v26 = &v25;
  v27 = 0x9012000000;
  v28 = __Block_byref_object_copy__4;
  v29 = __Block_byref_object_dispose__4;
  v30 = 0;
  v31 = (WTF *)v33;
  v32 = 5;
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = ___ZN7WebCore15PlatformCALayer19collectRectsToPaintERNS_15GraphicsContextEPS0__block_invoke;
  v24[3] = &unk_1E334EB78;
  v24[4] = &v34;
  v24[5] = &v38;
  v24[6] = &v25;
  (*(void (**)(WebCore::GraphicsContext *, WebCore::PlatformCALayer *, _QWORD *))(*(_QWORD *)a2 + 824))(a2, this, v24);
  v6 = (*(uint64_t (**)(WebCore::PlatformCALayer *))(*(_QWORD *)this + 512))(this);
  *(float *)&v23 = (float)(int)v6;
  *((float *)&v23 + 1) = (float)SHIDWORD(v6);
  *((float *)&v23 + 2) = (float)(int)v7;
  *((float *)&v23 + 3) = (float)SHIDWORD(v7);
  if (*((_DWORD *)v35 + 6) > 4u || v39[3] >= (float)((float)(int)v7 * (float)SHIDWORD(v7)) * 0.75)
  {
    v17 = v26;
    if (!*((_DWORD *)v26 + 14))
      goto LABEL_18;
    if (*((_DWORD *)v26 + 15))
      *((_DWORD *)v26 + 15) = 0;
    v18 = (WTF *)v17[6];
    v19 = v17 + 8;
    if (v17 + 8 != (uint64_t *)v18)
    {
      if (!v18)
      {
LABEL_24:
        v17[6] = (uint64_t)v19;
        *((_DWORD *)v17 + 14) = 5;
LABEL_18:
        v20 = v26;
        v21 = *((unsigned int *)v26 + 15);
        if ((_DWORD)v21 == *((_DWORD *)v26 + 14))
        {
          WTF::Vector<WebCore::FloatRect,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatRect&>((uint64_t)(v26 + 6), (unint64_t)&v23);
        }
        else
        {
          *(_OWORD *)(v26[6] + 16 * v21) = v23;
          ++*((_DWORD *)v20 + 15);
        }
        goto LABEL_3;
      }
      v17[6] = 0;
      *((_DWORD *)v17 + 14) = 0;
      WTF::fastFree(v18, v7);
      v18 = (WTF *)v17[6];
      v19 = v17 + 8;
    }
    if (v18)
      goto LABEL_18;
    goto LABEL_24;
  }
LABEL_3:
  v8 = v26;
  v9 = *((unsigned int *)v26 + 15);
  v10 = (_OWORD *)(a3 + 16);
  *(_QWORD *)a3 = a3 + 16;
  *(_DWORD *)(a3 + 8) = 5;
  *(_DWORD *)(a3 + 12) = v9;
  if (v9 >= 6)
  {
    v22 = v9;
    if (v9 >> 28)
    {
      __break(0xC471u);
      return;
    }
    v10 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(a3 + 8) = v22;
    *(_QWORD *)a3 = v10;
    v9 = *((unsigned int *)v8 + 15);
  }
  if ((_DWORD)v9)
  {
    v11 = (__int128 *)v8[6];
    v12 = 16 * v9;
    do
    {
      v13 = *v11++;
      *v10++ = v13;
      v12 -= 16;
    }
    while (v12);
  }
  _Block_object_dispose(&v25, 8);
  v15 = v31;
  if (v33 != (_BYTE *)v31 && v31 != 0)
  {
    v31 = 0;
    LODWORD(v32) = 0;
    WTF::fastFree(v15, v14);
  }
  _Block_object_dispose(&v34, 8);
  _Block_object_dispose(&v38, 8);
}

void sub_1943C88E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF *a25,int a26)
{
  WTF *v26;
  uint64_t v27;
  void *v29;
  WTF *v30;

  _Block_object_dispose(&a19, 8);
  v30 = a25;
  if (v26 != a25)
  {
    if (a25)
    {
      a25 = 0;
      a26 = 0;
      WTF::fastFree(v30, v29);
    }
  }
  _Block_object_dispose((const void *)(v27 - 96), 8);
  _Block_object_dispose((const void *)(v27 - 64), 8);
  _Unwind_Resume(a1);
}

unint64_t WebCore::DisplayList::Recorder::clipBounds(unint64_t this, const WebCore::FloatRect *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double *v13;
  double v14;
  BOOL v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  unint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  char v35;

  v2 = *(unsigned int *)(this + 732);
  if ((_DWORD)v2)
  {
    v3 = v2 - 1;
    v4 = *(_QWORD *)(this + 720);
    v5 = (double *)(v4 + 760 * v3);
    v6 = v5[43];
    v7 = v5[44];
    v8 = v5[45];
    v9 = v5[46];
    v10 = v6 * v9 - v7 * v8;
    v11 = fabs(v10);
    if ((unint64_t)(*(_QWORD *)&v11 - 0x10000000000000) >> 53 > 0x3FE
      && (unint64_t)(*(_QWORD *)&v11 - 1) > 0xFFFFFFFFFFFFELL)
    {
      return WebCore::enclosingIntRect((WebCore *)(v4 + 760 * v3 + 392), a2);
    }
    else
    {
      v13 = v5 + 43;
      v14 = 1.0;
      if (v6 == 1.0 && v7 == 0.0 && (v8 == 0.0 ? (v15 = v9 == 1.0) : (v15 = 0), v15))
      {
        v20 = -v13[4];
        v21 = -v13[5];
        v30 = 0.0;
        v31 = 0.0;
        v17 = 1.0;
      }
      else
      {
        v14 = v9 / v10;
        v16 = -v8 / v10;
        v17 = v6 / v10;
        v19 = v13[4];
        v18 = v13[5];
        v20 = (v8 * v18 - v9 * v19) / v10;
        v30 = -v7 / v10;
        v31 = v16;
        v21 = (v7 * v19 - v6 * v18) / v10;
      }
      v29 = v14;
      v32 = v17;
      v33 = v20;
      v34 = v21;
      v35 = 1;
      v23 = floorf(WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v29, (const WebCore::FloatRect *)(v4 + 760 * v3 + 392)));
      v24 = 2147500000.0;
      if (v23 < 2147500000.0)
      {
        v24 = -2147500000.0;
        if (v23 > -2147500000.0)
          v24 = (float)(int)v23;
      }
      v25 = floorf(v22);
      v26 = 2147500000.0;
      if (v25 < 2147500000.0)
      {
        v26 = -2147500000.0;
        if (v25 > -2147500000.0)
          v26 = (float)(int)v25;
      }
      if (v24 >= 2147500000.0)
      {
        v27 = 0x7FFFFFFFLL;
      }
      else if (v24 <= -2147500000.0)
      {
        v27 = 0x80000000;
      }
      else
      {
        v27 = (int)v24;
      }
      if (v26 >= 2147500000.0)
      {
        v28 = 0x7FFFFFFF00000000;
      }
      else if (v26 <= -2147500000.0)
      {
        v28 = 0x8000000000000000;
      }
      else
      {
        v28 = (unint64_t)(int)v26 << 32;
      }
      return v28 | v27;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return this;
}

uint64_t WebCore::Quirks::updateStorageAccessUserAgentStringQuirks(uint64_t *a1, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl **v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  _BYTE v11[24];
  _QWORD v12[2];

  {
    v4 = (WTF::StringImpl **)WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map;
    if (WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map)
    {
      WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map = 0;
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v4, a2);
    }
  }
  else
  {
    WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map = 0;
  }
  result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(*a1, (uint64_t)a2, a3);
  v6 = result;
  v12[0] = result;
  v12[1] = v7;
  if (*a1)
    v8 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
  else
    v8 = 0;
  if (v8 != result)
  {
    do
    {
      WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String>((uint64_t)v11, (WTF::ASCIICaseInsensitiveHash *)v6, (WTF::StringImpl *)(v6 + 8));
      v12[0] += 16;
      result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v12, v9, v10);
      v6 = v12[0];
    }
    while (v12[0] != v8);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (!a1)
    return 0;
  if (*(_DWORD *)(a1 - 12))
    return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::makeIterator(a1, a1, a3);
  return a1 + 16 * *(unsigned int *)(a1 - 4);
}

uint64_t WebCore::colorSpaceForCGColorSpace(WebCore *this, CGColorSpace *a2)
{
  unint64_t v2;
  int v3;
  int v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char **v18;
  char *v19;

  {
    WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::colorSpace = 0;
  }
  v2 = atomic_load(&WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::onceFlag);
  if (v2 != -1)
  {
    v19 = &v17;
    v18 = &v19;
    std::__call_once(&WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::onceFlag, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CGColorSpace * WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::{lambda(void)#1} &&>>);
  }
  if ((CGColorSpaceEqualToColorSpace() & 1) != 0)
  {
    v3 = 1;
    v4 = 17;
    return v4 | (v3 << 8);
  }
  {
    WebCore::namedColorSpace<kCGColorSpaceExtendedSRGB>(void)::colorSpace = 0;
  }
  v6 = atomic_load(&WebCore::namedColorSpace<kCGColorSpaceExtendedSRGB>(void)::onceFlag);
  if (v6 != -1)
  {
    v19 = &v17;
    v18 = &v19;
    std::__call_once(&WebCore::namedColorSpace<kCGColorSpaceExtendedSRGB>(void)::onceFlag, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CGColorSpace * WebCore::namedColorSpace<kCGColorSpaceExtendedSRGB>(void)::{lambda(void)#1} &&>>);
  }
  if ((CGColorSpaceEqualToColorSpace() & 1) != 0)
  {
    v3 = 1;
    v4 = 7;
    return v4 | (v3 << 8);
  }
  {
    WebCore::namedColorSpace<kCGColorSpaceDisplayP3>(void)::colorSpace = 0;
  }
  v7 = atomic_load(&WebCore::namedColorSpace<kCGColorSpaceDisplayP3>(void)::onceFlag);
  if (v7 != -1)
  {
    v19 = &v17;
    v18 = &v19;
    std::__call_once(&WebCore::namedColorSpace<kCGColorSpaceDisplayP3>(void)::onceFlag, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CGColorSpace * WebCore::namedColorSpace<kCGColorSpaceDisplayP3>(void)::{lambda(void)#1} &&>>);
  }
  if ((CGColorSpaceEqualToColorSpace() & 1) != 0)
  {
    v4 = 1;
LABEL_69:
    v3 = 1;
    return v4 | (v3 << 8);
  }
  if ((byte_1ECE83E9A & 1) == 0)
  {
    qword_1ECE83F28 = 0;
    byte_1ECE83E9A = 1;
  }
  v8 = atomic_load(&qword_1ECE83F30);
  if (v8 != -1)
  {
    v19 = &v17;
    v18 = &v19;
    std::__call_once(&qword_1ECE83F30, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CGColorSpace * WebCore::namedColorSpace<kCGColorSpaceLinearSRGB>(void)::{lambda(void)#1} &&>>);
  }
  if ((CGColorSpaceEqualToColorSpace() & 1) != 0)
  {
    v3 = 1;
    v4 = 12;
    return v4 | (v3 << 8);
  }
  if ((byte_1ECE83E93 & 1) == 0)
  {
    qword_1ECE83EB8 = 0;
    byte_1ECE83E93 = 1;
  }
  v9 = atomic_load(&qword_1ECE83EC0);
  if (v9 != -1)
  {
    v19 = &v17;
    v18 = &v19;
    std::__call_once(&qword_1ECE83EC0, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CGColorSpace * WebCore::namedColorSpace<kCGColorSpaceAdobeRGB1998>(void)::{lambda(void)#1} &&>>);
  }
  if ((CGColorSpaceEqualToColorSpace() & 1) != 0)
  {
    v4 = 0;
    goto LABEL_69;
  }
  if ((byte_1ECE83E94 & 1) == 0)
  {
    qword_1ECE83EC8 = 0;
    byte_1ECE83E94 = 1;
  }
  v10 = atomic_load(&qword_1ECE83ED0);
  if (v10 != -1)
  {
    v19 = &v17;
    v18 = &v19;
    std::__call_once(&qword_1ECE83ED0, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CGColorSpace * WebCore::extendedNamedColorSpace<kCGColorSpaceAdobeRGB1998>(void)::{lambda(void)#1} &&>>);
  }
  if ((CGColorSpaceEqualToColorSpace() & 1) != 0)
  {
    v3 = 1;
    v4 = 2;
  }
  else
  {
    if ((byte_1ECE83E95 & 1) == 0)
    {
      qword_1ECE83ED8 = 0;
      byte_1ECE83E95 = 1;
    }
    v11 = atomic_load(&qword_1ECE83EE0);
    if (v11 != -1)
    {
      v19 = &v17;
      v18 = &v19;
      std::__call_once(&qword_1ECE83EE0, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CGColorSpace * WebCore::namedColorSpace<kCGColorSpaceExtendedDisplayP3>(void)::{lambda(void)#1} &&>>);
    }
    if ((CGColorSpaceEqualToColorSpace() & 1) != 0)
    {
      v3 = 1;
      v4 = 3;
    }
    else
    {
      if ((byte_1ECE83E97 & 1) == 0)
      {
        qword_1ECE83EF8 = 0;
        byte_1ECE83E97 = 1;
      }
      v12 = atomic_load(&qword_1ECE83F00);
      if (v12 != -1)
      {
        v19 = &v17;
        v18 = &v19;
        std::__call_once(&qword_1ECE83F00, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CGColorSpace * WebCore::namedColorSpace<kCGColorSpaceExtendedLinearSRGB>(void)::{lambda(void)#1} &&>>);
      }
      if ((CGColorSpaceEqualToColorSpace() & 1) != 0)
      {
        v3 = 1;
        v4 = 4;
      }
      else
      {
        if ((byte_1ECE83E96 & 1) == 0)
        {
          qword_1ECE83EE8 = 0;
          byte_1ECE83E96 = 1;
        }
        v13 = atomic_load(&qword_1ECE83EF0);
        if (v13 != -1)
        {
          v19 = &v17;
          v18 = &v19;
          std::__call_once(&qword_1ECE83EF0, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CGColorSpace * WebCore::namedColorSpace<kCGColorSpaceExtendedITUR_2020>(void)::{lambda(void)#1} &&>>);
        }
        if ((CGColorSpaceEqualToColorSpace() & 1) != 0)
        {
          v3 = 1;
          v4 = 6;
        }
        else
        {
          if ((byte_1ECE83E98 & 1) == 0)
          {
            qword_1ECE83F08 = 0;
            byte_1ECE83E98 = 1;
          }
          v14 = atomic_load(&qword_1ECE83F10);
          if (v14 != -1)
          {
            v19 = &v17;
            v18 = &v19;
            std::__call_once(&qword_1ECE83F10, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CGColorSpace * WebCore::extendedNamedColorSpace<kCGColorSpaceROMMRGB>(void)::{lambda(void)#1} &&>>);
          }
          if ((CGColorSpaceEqualToColorSpace() & 1) != 0)
          {
            v3 = 1;
            v4 = 5;
          }
          else
          {
            if ((byte_1ECE83E99 & 1) == 0)
            {
              qword_1ECE83F18 = 0;
              byte_1ECE83E99 = 1;
            }
            v15 = atomic_load(&qword_1ECE83F20);
            if (v15 != -1)
            {
              v19 = &v17;
              v18 = &v19;
              std::__call_once(&qword_1ECE83F20, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CGColorSpace * WebCore::namedColorSpace<kCGColorSpaceITUR_2020>(void)::{lambda(void)#1} &&>>);
            }
            if ((CGColorSpaceEqualToColorSpace() & 1) != 0)
            {
              v3 = 1;
              v4 = 16;
            }
            else
            {
              if ((byte_1ECE83E9B & 1) == 0)
              {
                qword_1ECE83F38 = 0;
                byte_1ECE83E9B = 1;
              }
              v16 = atomic_load(&qword_1ECE83F40);
              if (v16 != -1)
              {
                v19 = &v17;
                v18 = &v19;
                std::__call_once(&qword_1ECE83F40, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CGColorSpace * WebCore::namedColorSpace<kCGColorSpaceROMMRGB>(void)::{lambda(void)#1} &&>>);
              }
              v3 = CGColorSpaceEqualToColorSpace();
              if (v3)
                v4 = 15;
              else
                v4 = 0;
            }
          }
        }
      }
    }
  }
  return v4 | (v3 << 8);
}

uint64_t WTF::Vector<WebCore::Style::RuleSet::ResolverMutatingRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF *v14;
  _DWORD *v15;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::Style::RuleSet::ResolverMutatingRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((WTF **)result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v13 = v11;
      v14 = v5;
      do
      {
        v15 = *(_DWORD **)v14;
        *(_QWORD *)v14 = 0;
        *(_QWORD *)v13 = v15;
        *(_DWORD *)(v13 + 8) = *((_DWORD *)v14 + 2);
        v14 = (WTF *)(WTF::Ref<WebCore::StyleRulePage,WTF::RawPtrTraits<WebCore::StyleRulePage>,WTF::DefaultRefDerefTraits<WebCore::StyleRulePage>>::~Ref((_DWORD **)v14, v12)+ 2);
        v13 += 16;
      }
      while (v14 != (WTF *)((char *)v5 + 16 * v10));
    }
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

WTF **WTF::Vector<WebCore::Style::RuleSet::ResolverMutatingRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(WTF **result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  WTF **v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF **v10;
  WTF *v11;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *result;
      v8 = *((unsigned int *)result + 3);
      result = (WTF **)WTF::fastMalloc((WTF *)(16 * v5));
      *((_DWORD *)v6 + 2) = v5;
      *v6 = (WTF *)result;
      if ((_DWORD)v8)
      {
        v10 = result;
        result = (WTF **)v7;
        do
        {
          v11 = *result;
          *result = 0;
          *v10 = v11;
          *((_DWORD *)v10 + 2) = *((_DWORD *)result + 2);
          result = (WTF **)(WTF::Ref<WebCore::StyleRulePage,WTF::RawPtrTraits<WebCore::StyleRulePage>,WTF::DefaultRefDerefTraits<WebCore::StyleRulePage>>::~Ref((_DWORD **)result, v9)+ 2);
          v10 += 2;
        }
        while (result != (WTF **)((char *)v7 + 16 * v8));
      }
      if (v7)
      {
        if (*v6 == v7)
        {
          *v6 = 0;
          *((_DWORD *)v6 + 2) = 0;
        }
        return (WTF **)WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

uint64_t WebCore::FrameLoader::didBeginDocument(WebCore::FrameLoader *this, int a2)
{
  _QWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  os_signpost_id_t v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  WebCore::FrameLoader *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  WebCore::CachedResourceLoader *v15;
  uint64_t v16;
  WebCore::CachedResourceLoader *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v26;
  unsigned int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  double v35;
  double v36;
  float v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  unsigned int v44;
  _QWORD *v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t result;
  unsigned int v49;
  unsigned int v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WebCore::ReportingScope *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF *v56;
  void *v57;
  unsigned int *v58;
  WebCore::ContentSecurityPolicy *v59;
  unsigned int v60;
  WTF::StringImpl *v61;
  unsigned int v63;
  _DWORD *v64;
  int v65;
  uint64_t v66;
  WebCore::BackForwardController **v67;
  WTF::StringImpl *v68;
  unint64_t v69;
  WebCore::HistoryItem *v70;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  unint64_t v83;
  WTF::StringImpl *v84;
  _BOOL4 isSameOriginAs;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  unint64_t v90;
  WTF::StringImpl *v91;
  _BOOL4 v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  int v96;
  WTF::StringImpl *v97;
  void *v98;
  void *v99;
  void *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  _DWORD *v106;
  WebCore::BackForwardController **v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WebCore::SecurityOrigin *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  char v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  unsigned int v118;
  WTF::StringImpl *v119;
  uint64_t v120;

  *((_WORD *)this + 108) = 256;
  *((_BYTE *)this + 209) = 0;
  v4 = *(_QWORD **)(*((_QWORD *)this + 1) + 8);
  v5 = (unsigned int *)(v4 + 1);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = v4[37];
  *(_DWORD *)(v7 + 24) += 2;
  WebCore::Document::setReadyState(v7, 0);
  if (a2)
    WebCore::FrameLoader::dispatchDidClearWindowObjectsInAllWorlds(this);
  v10 = *(WebCore::FrameLoader **)(*((_QWORD *)this + 1) + 8);
  v11 = *((_QWORD *)v10 + 3);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
    {
      ++*(_DWORD *)v12;
      WebCore::FrameLoader::setFirstPartyForCookies(v10, (const WTF::URL *)(v12 + 168), v9);
      if (*(_DWORD *)v12 == 1)
      {
        WebCore::Page::~Page((WebCore::Page *)v12);
        WTF::fastFree(v56, v57);
      }
      else
      {
        --*(_DWORD *)v12;
      }
    }
  }
  WebCore::Document::initContentSecurityPolicy((_QWORD *)v7, v8);
  v14 = v4[17];
  ++*(_DWORD *)(v14 + 228);
  v15 = *(WebCore::CachedResourceLoader **)(v7 + 720);
  if (!v15)
    v15 = (WebCore::CachedResourceLoader *)WebCore::Document::ensureCachedResourceLoader((WebCore::Document *)v7, v13);
  if (*(_BYTE *)(v14 + 237))
    LODWORD(v16) = *(_BYTE *)(v14 + 236) != 0;
  else
    v16 = (*(_QWORD *)(v14 + 680) >> 24) & 1;
  if (*((unsigned __int8 *)v15 + 273) != (_DWORD)v16)
  {
    *((_BYTE *)v15 + 273) = v16;
    if ((_DWORD)v16)
      WebCore::CachedResourceLoader::reloadImagesIfNotDeferred(v15);
  }
  v17 = *(WebCore::CachedResourceLoader **)(v7 + 720);
  if (!v17)
    v17 = (WebCore::CachedResourceLoader *)WebCore::Document::ensureCachedResourceLoader((WebCore::Document *)v7, v13);
  v18 = *(_QWORD *)(v14 + 680);
  if (*((_BYTE *)v17 + 272) != ((v18 & 0x2000000000000000) != 0))
  {
    *((_BYTE *)v17 + 272) = (v18 & 0x2000000000000000) != 0;
    if ((v18 & 0x2000000000000000) != 0)
      WebCore::CachedResourceLoader::reloadImagesIfNotDeferred(v17);
  }
  v19 = *((_QWORD *)this + 11);
  if (!v19)
  {
    LOBYTE(v39) = 0;
    LOWORD(v44) = 0;
    goto LABEL_65;
  }
  ++*(_DWORD *)(v19 + 24);
  WebCore::ResourceResponseBase::httpHeaderField(v19 + 1272, 90, &v119);
  if (v119 && *((_DWORD *)v119 + 1))
    WebCore::Document::parseDNSPrefetchControlHeader(v7, (const WTF::String *)&v119);
  v20 = *(unsigned int **)(v19 + 2880);
  if (v20)
  {
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
    v22 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v7 + 192));
    if (v22)
    {
      v23 = v22;
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 + 1, v22));
      WebCore::ContentSecurityPolicy::didReceiveHeaders((uint64_t)v22, (uint64_t)v20, 0);
      if (!atomic_load(v23))
      {
        __break(0xC471u);
        JUMPOUT(0x1943C9D84);
      }
      do
        v26 = __ldaxr(v23);
      while (__stlxr(v26 - 1, v23));
    }
    else
    {
      WebCore::ContentSecurityPolicy::didReceiveHeaders(0, (uint64_t)v20, 0);
    }
    if (!atomic_load(v20))
    {
      __break(0xC471u);
      JUMPOUT(0x1943C9D64);
    }
    do
LABEL_27:
      v28 = __ldaxr(v20);
    while (__stlxr(v28 - 1, v20));
    goto LABEL_28;
  }
  v72 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v7 + 192));
  v20 = v72;
  if (v72)
  {
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 + 1, v72));
  }
  WebCore::ContentSecurityPolicyResponseHeaders::ContentSecurityPolicyResponseHeaders((WebCore::ContentSecurityPolicyResponseHeaders *)&v112, (const WebCore::ResourceResponse *)(v19 + 1272));
  v74 = *((_QWORD *)this + 11);
  if (v74)
  {
    WebCore::ResourceRequestBase::httpReferrer((_BYTE *)(v74 + 872), &v117);
  }
  else
  {
    v75 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v75 += 2;
    v117 = v75;
  }
  WebCore::ContentSecurityPolicy::didReceiveHeaders((uint64_t)v20, (unsigned int *)&v112, (uint64_t *)&v117, 0);
  v77 = v117;
  v117 = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
      WTF::StringImpl::destroy(v77, v76);
    else
      *(_DWORD *)v77 -= 2;
  }
  if (HIDWORD(v113))
  {
    v103 = v112;
    v104 = 16 * HIDWORD(v113);
    do
    {
      v105 = *(WTF::StringImpl **)v103;
      *(_QWORD *)v103 = 0;
      if (v105)
      {
        if (*(_DWORD *)v105 == 2)
          WTF::StringImpl::destroy(v105, v76);
        else
          *(_DWORD *)v105 -= 2;
      }
      v103 = (WTF::StringImpl *)((char *)v103 + 16);
      v104 -= 16;
    }
    while (v104);
  }
  v78 = v112;
  if (v112)
  {
    v112 = 0;
    LODWORD(v113) = 0;
    WTF::fastFree(v78, v76);
  }
  if (v20)
  {
    if (!atomic_load(v20))
    {
      __break(0xC471u);
      goto LABEL_212;
    }
    goto LABEL_27;
  }
LABEL_28:
  if (WTF::URL::protocolIs())
  {
    v58 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v7 + 192));
    if (v58)
    {
      v59 = (WebCore::ContentSecurityPolicy *)v58;
      do
        v60 = __ldaxr(v58);
      while (__stlxr(v60 + 1, v58));
      WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)(v7 + 736), (uint64_t *)&v112);
      WebCore::ContentSecurityPolicy::updateSourceSelf(v59, v112);
      WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)&v112, v61);
      if (!atomic_load((unsigned int *)v59))
      {
        __break(0xC471u);
        JUMPOUT(0x1943CA0B0);
      }
      do
        v63 = __ldaxr((unsigned int *)v59);
      while (__stlxr(v63 - 1, (unsigned int *)v59));
    }
    else
    {
      WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)(v7 + 736), (uint64_t *)&v112);
      WebCore::ContentSecurityPolicy::updateSourceSelf(0, v112);
      WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)&v112, v102);
    }
  }
  if ((*(_BYTE *)(v7 + 744) & 2) != 0 || WTF::URL::protocolIs())
  {
    WebCore::obtainCrossOriginEmbedderPolicy((WebCore *)(v19 + 1272), (const WebCore::ResourceResponse *)(v7 + 192), (uint64_t)&v112);
    *(_WORD *)(v7 + 216) = (_WORD)v112;
    v30 = v113;
    if (v113)
      *(_DWORD *)v113 += 2;
    v31 = *(WTF::StringImpl **)(v7 + 224);
    *(_QWORD *)(v7 + 224) = v30;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v29);
      else
        *(_DWORD *)v31 -= 2;
    }
    v32 = v114;
    if (v114)
      *(_DWORD *)v114 += 2;
    v33 = *(WTF::StringImpl **)(v7 + 232);
    *(_QWORD *)(v7 + 232) = v32;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
      {
        WTF::StringImpl::destroy(v33, v29);
        v32 = v114;
      }
      else
      {
        *(_DWORD *)v33 -= 2;
      }
    }
    v114 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v29);
      else
        *(_DWORD *)v32 -= 2;
    }
    v34 = v113;
    v113 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v29);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  WebCore::ResourceResponseBase::httpHeaderField(v19 + 1272, 61, &v117);
  if (v117)
    WebCore::Document::processReferrerPolicy(v7, (uint64_t *)&v117, 1);
  WebCore::ResourceResponseBase::httpHeaderField(v19 + 1272, 20, &v116);
  if (!v116)
    goto LABEL_49;
  if (!*((_DWORD *)v116 + 1))
    goto LABEL_49;
  WebCore::extractContentLanguageFromHeader((WebCore *)&v112, (const WTF::String *)&v116, v35, v36, v37);
  v52 = v112;
  if (!v112)
    goto LABEL_49;
  if (!*((_DWORD *)v112 + 1))
  {
    v112 = 0;
LABEL_84:
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, v51);
    else
      *(_DWORD *)v52 -= 2;
    goto LABEL_49;
  }
  WebCore::Document::setContentLanguage((WebCore::Document *)v7, (const WTF::AtomString *)&v112);
  v52 = v112;
  v112 = 0;
  if (v52)
    goto LABEL_84;
LABEL_49:
  WebCore::ResourceResponseBase::httpHeaderField(v19 + 1272, 64, &v111);
  if (v111 && *((_DWORD *)v111 + 1))
  {
    v53 = *(WebCore::ReportingScope **)(v7 + 3184);
    if (!v53)
      v53 = (WebCore::ReportingScope *)WebCore::Document::ensureReportingScope((WebCore::Document *)v7);
    WebCore::ResourceResponse::platformLazyInit(v19 + 1272, 1);
    WebCore::ReportingScope::parseReportingEndpoints(v53, (const WTF::String *)&v111, (const WTF::URL *)(v19 + 1272));
  }
  if (*(_QWORD **)(v4[16] + 8) == v4 && *(_BYTE *)(v19 + 2576))
  {
    LOWORD(v112) = *(_WORD *)(v19 + 2552);
    v54 = *(WTF::StringImpl **)(v19 + 2560);
    if (v54)
      *(_DWORD *)v54 += 2;
    v113 = v54;
    v55 = *(WTF::StringImpl **)(v19 + 2568);
    if (v55)
    {
      *(_DWORD *)v55 += 2;
      v114 = v55;
      v115 = 1;
      WebCore::SecurityContext::setCrossOriginOpenerPolicy(v7 + 192, (WTF::StringImpl *)&v112);
      if (*(_DWORD *)v55 == 2)
        WTF::StringImpl::destroy(v55, v38);
      else
        *(_DWORD *)v55 -= 2;
    }
    else
    {
      v114 = 0;
      v115 = 1;
      WebCore::SecurityContext::setCrossOriginOpenerPolicy(v7 + 192, (WTF::StringImpl *)&v112);
    }
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, v38);
      else
        *(_DWORD *)v54 -= 2;
    }
  }
  v39 = *(unsigned __int16 *)(*((_QWORD *)this + 11) + 2501);
  v40 = v111;
  v111 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v38);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = v116;
  v116 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v38);
    else
      *(_DWORD *)v41 -= 2;
  }
  v42 = v117;
  v117 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v38);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = v119;
  v119 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v38);
    else
      *(_DWORD *)v43 -= 2;
  }
  v44 = v39 >> 8;
  if (*(_DWORD *)(v19 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
  else
    --*(_DWORD *)(v19 + 24);
LABEL_65:
  v45 = *(_QWORD **)(*((_QWORD *)this + 1) + 8);
  v46 = v45[37];
  if (v46)
  {
    if ((*(_QWORD *)(*(_QWORD *)(v46 + 680) + 688) & 0x4000) != 0)
    {
      v64 = *(_DWORD **)(v46 + 696);
      if (v64)
      {
        v65 = v64[6];
        v64[6] = v65 + 1;
        v66 = v45[3];
        if (!v66)
          goto LABEL_192;
        v67 = *(WebCore::BackForwardController ***)(v66 + 8);
        if (!v67)
          goto LABEL_192;
        ++*(_DWORD *)v67;
        v68 = *(WTF::StringImpl **)(v45[23] + 16);
        if (!v68)
        {
LABEL_191:
          WTF::RefCounted<WebCore::Page>::deref((WebCore::Page *)v67);
          v65 = v64[6] - 1;
LABEL_192:
          if (v65)
            v64[6] = v65;
          else
            (*(void (**)(_DWORD *))(*(_QWORD *)v64 + 72))(v64);
          goto LABEL_67;
        }
        ++*(_DWORD *)v68;
        v119 = 0;
        v120 = 0;
        v109 = v68;
        WTF::Vector<WTF::Ref<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::DOMWrapperWorld&>((uint64_t)&v119, v68);
        v107 = v67;
        WebCore::BackForwardController::allItems(v67[17], (uint64_t)&v117);
        if (!v118)
        {
LABEL_188:
          WebCore::LocalDOMWindow::protectedNavigation((uint64_t)v64, (uint64_t *)&v112);
          v97 = v112;
          v112 = 0;
          WTF::Ref<WebCore::Navigation,WTF::RawPtrTraits<WebCore::Navigation>,WTF::DefaultRefDerefTraits<WebCore::Navigation>>::~Ref(&v112, v98);
          ++*(_DWORD *)v109;
          v112 = v109;
          WebCore::Navigation::initializeEntries((uint64_t)v97, (uint64_t)&v112, (uint64_t)&v119);
          WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref(&v112);
          WebCore::Navigation::updateForActivation((uint64_t)v97, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 184) + 24), v39 | (unsigned __int16)((_WORD)v44 << 8));
          if (v97)
            WTF::RefCounted<WebCore::Navigation>::deref((_DWORD *)v97 + 6, v99);
          WTF::Vector<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v117, v99);
          WTF::Vector<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v119, v100);
          WTF::RefCounted<WebCore::HistoryItem>::deref(v109);
          v67 = v107;
          goto LABEL_191;
        }
        v69 = 0;
        while (1)
        {
          v70 = (WebCore::HistoryItem *)*((_QWORD *)v117 + v69);
          if (*((_QWORD *)v109 + 44) == *((_QWORD *)v70 + 44) && *((_QWORD *)v109 + 45) == *((_QWORD *)v70 + 45))
            break;
          if (v118 == ++v69)
            goto LABEL_188;
        }
        if (v69 < v118)
        {
          v106 = v64;
          WebCore::HistoryItem::url(v70, (uint64_t)&v112);
          WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)&v112, (uint64_t *)&v116);
          v82 = v112;
          v112 = 0;
          if (v82)
          {
            if (*(_DWORD *)v82 == 2)
              WTF::StringImpl::destroy(v82, v81);
            else
              *(_DWORD *)v82 -= 2;
          }
          if (v69)
          {
            v83 = v69 - 1;
            while (1)
            {
              if (v83 >= v118)
              {
                __break(0xC471u);
                JUMPOUT(0x1943CA104);
              }
              v84 = (WTF::StringImpl *)*((_QWORD *)v117 + v83);
              ++*(_DWORD *)v84;
              v111 = v84;
              WebCore::HistoryItem::url(v84, (uint64_t)&v112);
              WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)&v112, (uint64_t *)&v110);
              isSameOriginAs = WebCore::SecurityOrigin::isSameOriginAs(v110, v116);
              WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)&v110, v86);
              v88 = v112;
              v112 = 0;
              if (v88)
              {
                if (*(_DWORD *)v88 == 2)
                  WTF::StringImpl::destroy(v88, v87);
                else
                  *(_DWORD *)v88 -= 2;
              }
              if (!isSameOriginAs)
                break;
              WTF::Vector<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert(&v119, (unint64_t)&v111);
              WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref(&v111);
              v89 = v83-- + 1;
              if (v89 <= 1)
                goto LABEL_175;
            }
            WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref(&v111);
          }
LABEL_175:
          v90 = v69 + 1;
          v64 = v106;
          if (v69 + 1 < v118)
          {
            v108 = v116;
            while (1)
            {
              v91 = (WTF::StringImpl *)*((_QWORD *)v117 + v90);
              ++*(_DWORD *)v91;
              v111 = v91;
              WebCore::HistoryItem::url(v91, (uint64_t)&v112);
              WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)&v112, (uint64_t *)&v110);
              v92 = WebCore::SecurityOrigin::isSameOriginAs(v110, v108);
              WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)&v110, v93);
              v95 = v112;
              v112 = 0;
              if (v95)
              {
                if (*(_DWORD *)v95 == 2)
                  WTF::StringImpl::destroy(v95, v94);
                else
                  *(_DWORD *)v95 -= 2;
              }
              if (!v92)
                break;
              v96 = HIDWORD(v120);
              if (HIDWORD(v120) == (_DWORD)v120)
              {
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>((uint64_t)&v119, (unint64_t)&v111);
              }
              else
              {
                v101 = v111;
                v111 = 0;
                *((_QWORD *)v119 + HIDWORD(v120)) = v101;
                HIDWORD(v120) = v96 + 1;
              }
              WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref(&v111);
              if (++v90 >= v118)
                goto LABEL_187;
            }
            WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref(&v111);
          }
LABEL_187:
          WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)&v116, v81);
          goto LABEL_188;
        }
        __break(0xC471u);
LABEL_212:
        JUMPOUT(0x1943C9CD0);
      }
    }
  }
LABEL_67:
  v47 = (_DWORD *)v4[23];
  ++*v47;
  result = WebCore::HistoryController::restoreDocumentState((uint64_t)v47);
  if (!*v47)
  {
    __break(0xC471u);
    JUMPOUT(0x1943C9CF0);
  }
  --*v47;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 228) == 1)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
    else
      --*(_DWORD *)(v14 + 228);
  }
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v7);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  do
  {
    v49 = __ldaxr(v5);
    v50 = v49 - 1;
  }
  while (__stlxr(v50, v5));
  if (!v50)
  {
    atomic_store(1u, v5);
    v80 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v80 = off_1E31FE290;
    *((_QWORD *)v80 + 1) = v5;
    v112 = v80;
    WTF::ensureOnMainThread();
    result = (uint64_t)v112;
    v112 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_BYTE *WebCore::ResourceRequestBase::httpReferrer@<X0>(_BYTE *this@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  _DWORD **v6;
  _DWORD *v7;

  v2 = this;
  if ((this[184] & 1) == 0)
  {
    this = (_BYTE *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    v2[184] |= 1u;
  }
  v4 = *((unsigned int *)v2 + 27);
  if (!(_DWORD)v4)
  {
LABEL_7:
    v7 = 0;
LABEL_8:
    *a2 = v7;
    return this;
  }
  v5 = 0;
  v6 = (_DWORD **)(*((_QWORD *)v2 + 12) + 8);
  while (*((_WORD *)v6 - 4) != 60)
  {
    ++v5;
    v6 += 2;
    if (v4 == v5)
      goto LABEL_7;
  }
  if (v5 < v4)
  {
    v7 = *v6;
    if (*v6)
      *v7 += 2;
    goto LABEL_8;
  }
  __break(0xC471u);
  return this;
}

WTF::StringImpl *WebCore::ContentSecurityPolicy::didReceiveHeaders(uint64_t a1, unsigned int *a2, uint64_t *a3, char a4)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  uint64_t v12;
  char v13;
  WTF::StringImpl *v14;

  v7 = *(_BYTE *)(a1 + 181);
  *(_BYTE *)(a1 + 181) = a4;
  v8 = a2[3];
  if ((_DWORD)v8)
  {
    v11 = *(WTF::StringImpl **)a2;
    v12 = 16 * v8;
    do
    {
      v13 = *((_BYTE *)v11 + 8);
      v14 = 0;
      WebCore::ContentSecurityPolicy::didReceiveHeader(a1, v11, v13, 2, (uint64_t *)&v14, 0);
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      v11 = (WTF::StringImpl *)((char *)v11 + 16);
      v12 -= 16;
    }
    while (v12);
  }
  v9 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v9;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  *(_DWORD *)(a1 + 184) = a2[4];
  *(_BYTE *)(a1 + 181) = v7;
  return result;
}

uint64_t WebCore::ContentSecurityPolicy::didReceiveHeader(uint64_t result, WTF::StringImpl *a2, char a3, int a4, uint64_t *a5, int a6)
{
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  WebCore::ContentSecurityPolicyDirectiveList *v21;
  WebCore::ContentSecurityPolicyDirectiveList *v22;
  WTF *v23;
  void *v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  WebCore::ContentSecurityPolicyDirectiveList *v30;
  WebCore::ContentSecurityPolicyDirectiveList *v31;
  WTF *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  const WebCore::SecurityOrigin *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  char v39;
  char v40;
  WebCore::ContentSecurityPolicyDirectiveList **v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  WTF::StringImpl *v45;
  _DWORD *v46;
  WTF::StringImpl *v47;
  WebCore::ContentSecurityPolicyDirectiveList *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl **v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WebCore::ContentSecurityPolicyDirectiveList *v63;

  if (*(_BYTE *)(result + 183))
    return result;
  v9 = a2;
  v10 = result;
  v11 = *a5;
  *a5 = 0;
  result = *(_QWORD *)(result + 168);
  *(_QWORD *)(v10 + 168) = v11;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *(_DWORD *)(v10 + 184) = a6;
  if (a4 == 2)
  {
    *(_BYTE *)(v10 + 232) = 1;
  }
  else if (!a4)
  {
    *(_BYTE *)(v10 + 183) = 1;
  }
  if (*(_BYTE *)(v10 + 224))
  {
    v12 = *(unsigned int *)(v10 + 212);
    if ((_DWORD)v12)
    {
LABEL_118:
      v59 = *(WTF::StringImpl ***)(v10 + 200);
      v60 = 16 * v12;
      do
      {
        v61 = *v59;
        *v59 = 0;
        if (v61)
        {
          if (*(_DWORD *)v61 == 2)
            WTF::StringImpl::destroy(v61, a2);
          else
            *(_DWORD *)v61 -= 2;
        }
        v59 += 2;
        v60 -= 16;
      }
      while (v60);
    }
    result = *(_QWORD *)(v10 + 200);
    if (result)
    {
      *(_QWORD *)(v10 + 200) = 0;
      *(_DWORD *)(v10 + 208) = 0;
      result = WTF::fastFree((WTF *)result, a2);
    }
    *(_BYTE *)(v10 + 224) = 0;
  }
  v13 = *(_QWORD *)v9;
  if (*(_QWORD *)v9)
  {
    v14 = *(unsigned int *)(v13 + 4);
    if ((*(_BYTE *)(v13 + 16) & 4) == 0)
    {
      if ((_DWORD)v14)
      {
        a2 = *(WTF::StringImpl **)(v13 + 8);
        while (1)
        {
          v15 = *(unsigned __int16 *)a2;
          if ((v15 - 9) >= 5 && v15 != 32)
            break;
          a2 = (WTF::StringImpl *)((char *)a2 + 2);
          if (!--v14)
            goto LABEL_70;
        }
        v9 = (WTF::StringImpl *)(v10 + 136);
        while (1)
        {
          v16 = (char *)a2 + 2 * v14;
          v17 = a2;
          while (*(_WORD *)v17 != 44)
          {
            v17 = (WTF::StringImpl *)((char *)v17 + 2);
            if (!--v14)
              goto LABEL_28;
          }
          v16 = (char *)v17;
LABEL_28:
          v12 = v16 - (char *)a2;
          if (v16 - (char *)a2 <= -2)
            goto LABEL_117;
          WTF::String::String();
          WebCore::ContentSecurityPolicyDirectiveList::create((uint64_t *)&v63, v10, (uint64_t)&v62, a3, a4);
          v18 = *(unsigned int *)(v10 + 148);
          if ((_DWORD)v18 == *(_DWORD *)(v10 + 144))
          {
            v19 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 136), v18 + 1, (unint64_t)&v63);
            v18 = *(unsigned int *)(v10 + 148);
            v20 = *(_QWORD *)(v10 + 136);
            v21 = *(WebCore::ContentSecurityPolicyDirectiveList **)v19;
            *(_QWORD *)v19 = 0;
          }
          else
          {
            v20 = *(_QWORD *)v9;
            v21 = v63;
            v63 = 0;
          }
          *(_QWORD *)(v20 + 8 * v18) = v21;
          *(_DWORD *)(v10 + 148) = v18 + 1;
          v22 = v63;
          v63 = 0;
          if (v22)
          {
            WebCore::ContentSecurityPolicyDirectiveList::~ContentSecurityPolicyDirectiveList(v22, a2);
            WTF::fastFree(v23, v24);
          }
          result = (uint64_t)v62;
          v62 = 0;
          if (!result)
            goto LABEL_37;
          if (*(_DWORD *)result != 2)
            break;
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
          if (!v14)
            goto LABEL_70;
LABEL_38:
          a2 = (WTF::StringImpl *)&v16[2 * (*(_WORD *)v16 == 44)];
          v14 -= *(unsigned __int16 *)v16 == 44;
          if (!v14)
            goto LABEL_70;
        }
        *(_DWORD *)result -= 2;
LABEL_37:
        if (!v14)
          goto LABEL_70;
        goto LABEL_38;
      }
      goto LABEL_70;
    }
    if ((_DWORD)v14)
    {
      a2 = *(WTF::StringImpl **)(v13 + 8);
      while (1)
      {
        v25 = *(unsigned __int8 *)a2;
        if ((v25 - 9) >= 5 && v25 != 32)
          break;
        a2 = (WTF::StringImpl *)((char *)a2 + 1);
        if (!--v14)
          goto LABEL_70;
      }
      v9 = (WTF::StringImpl *)(v10 + 136);
      do
      {
        v26 = (char *)a2 + v14;
        v12 = (int64_t)a2;
        while (*(_BYTE *)v12 != 44)
        {
          ++v12;
          if (!--v14)
            goto LABEL_54;
        }
        v26 = (_BYTE *)v12;
LABEL_54:
        if (v26 - (_BYTE *)a2 < 0)
        {
LABEL_117:
          __break(1u);
          goto LABEL_118;
        }
        WTF::String::String();
        WebCore::ContentSecurityPolicyDirectiveList::create((uint64_t *)&v63, v10, (uint64_t)&v62, a3, a4);
        v27 = *(unsigned int *)(v10 + 148);
        if ((_DWORD)v27 == *(_DWORD *)(v10 + 144))
        {
          v28 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 136), v27 + 1, (unint64_t)&v63);
          v27 = *(unsigned int *)(v10 + 148);
          v29 = *(_QWORD *)(v10 + 136);
          v30 = *(WebCore::ContentSecurityPolicyDirectiveList **)v28;
          *(_QWORD *)v28 = 0;
        }
        else
        {
          v29 = *(_QWORD *)v9;
          v30 = v63;
          v63 = 0;
        }
        *(_QWORD *)(v29 + 8 * v27) = v30;
        *(_DWORD *)(v10 + 148) = v27 + 1;
        v31 = v63;
        v63 = 0;
        if (v31)
        {
          WebCore::ContentSecurityPolicyDirectiveList::~ContentSecurityPolicyDirectiveList(v31, a2);
          WTF::fastFree(v32, v33);
        }
        result = (uint64_t)v62;
        v62 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
          {
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
            if (!v14)
              break;
            goto LABEL_64;
          }
          *(_DWORD *)result -= 2;
        }
        if (!v14)
          break;
LABEL_64:
        if (*v26 == 44)
          a2 = (WTF::StringImpl *)(v26 + 1);
        else
          a2 = (WTF::StringImpl *)v26;
        v14 -= *v26 == 44;
      }
      while (v14);
    }
  }
LABEL_70:
  v34 = *(_QWORD *)(v10 + 8);
  if (v34)
  {
    v35 = *(_QWORD *)(v34 + 8);
    if (v35)
    {
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v35 - 96), a2);
      WebCore::ContentSecurityPolicy::updateSourceSelf((WebCore::ContentSecurityPolicy *)v10, v36);
      v38 = *(unsigned int *)(v10 + 148);
      if ((_DWORD)v38)
      {
        v39 = 0;
        v40 = 0;
        v41 = *(WebCore::ContentSecurityPolicyDirectiveList ***)(v10 + 136);
        v42 = 8 * v38;
        do
        {
          v43 = WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForUnsafeEval(*v41, v37);
          if (v43 && !*(_BYTE *)(*(_QWORD *)(v43 + 24) + 17))
          {
            v44 = (_DWORD *)*((_QWORD *)*v41 + 29);
            if (v44)
              *v44 += 2;
            v45 = *(WTF::StringImpl **)(v10 + 152);
            *(_QWORD *)(v10 + 152) = v44;
            if (v45)
            {
              if (*(_DWORD *)v45 == 2)
                WTF::StringImpl::destroy(v45, v37);
              else
                *(_DWORD *)v45 -= 2;
            }
            v46 = (_DWORD *)*((_QWORD *)*v41 + 30);
            if (v46)
              *v46 += 2;
            v47 = *(WTF::StringImpl **)(v10 + 160);
            *(_QWORD *)(v10 + 160) = v46;
            if (v47)
            {
              if (*(_DWORD *)v47 == 2)
                WTF::StringImpl::destroy(v47, v37);
              else
                *(_DWORD *)v47 -= 2;
            }
          }
          v48 = *v41;
          if (*((_BYTE *)*v41 + 20))
            v39 |= *((_BYTE *)v48 + 17) == 0;
          v40 |= *((_BYTE *)v48 + 21) != 0;
          ++v41;
          v42 -= 8;
        }
        while (v42);
      }
      else
      {
        v40 = 0;
        v39 = 0;
      }
      if (*(_QWORD *)(v10 + 152))
      {
        v49 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8);
        if (v49)
          v50 = v49 - 96;
        else
          v50 = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 160))(v50, v10 + 152);
      }
      if (*(_QWORD *)(v10 + 160))
      {
        v51 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8);
        if (v51)
          v52 = v51 - 96;
        else
          v52 = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 168))(v52, v10 + 160);
      }
      v53 = *(_DWORD *)(v10 + 176);
      v54 = *(_QWORD *)(v10 + 8);
      if (v53)
      {
        v55 = *(_QWORD *)(v54 + 8);
        if (v55)
        {
          if (!*(_BYTE *)(v55 + 178))
          {
            WebCore::SecurityContext::enforceSandboxFlags((uint64_t *)(v55 - 96), v53, 0);
            v54 = *(_QWORD *)(v10 + 8);
          }
        }
      }
      v56 = *(_QWORD *)(v54 + 8);
      if ((v39 & 1) != 0)
      {
        v57 = v56 - 96;
        if (!v56)
          v57 = 0;
        *(_BYTE *)(v57 + 85) = 1;
      }
      if (v56)
        v58 = v56 - 96;
      else
        v58 = 0;
      return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v58 + 176))(v58, v40 & 1);
    }
  }
  return result;
}

const WTF::String *WebCore::ContentSecurityPolicyDirectiveList::create(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  const WTF::String *result;
  WTF::StringImpl *v11;
  uint64_t v12;
  const WTF::String *v13;
  _WORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned int v19;
  int v20;
  _DWORD *v22;
  WTF *v23;
  size_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  int v27;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  unsigned int v34;
  __int16 v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  unsigned __int8 *v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned int v45;
  void *v47;
  WTF::StringImpl *v48;
  _DWORD *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  int v52;
  uint64_t v53;
  uint64_t *v54;
  const WTF::String **v55;
  BOOL v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unsigned __int16 *v66;
  char *v67;
  int v68;
  BOOL v69;
  BOOL v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  BOOL v78;
  WebCore::ContentSecurityPolicy *v79;
  char *v80;
  unsigned int v81;
  uint64_t v82;
  WebCore::ContentSecurityPolicy *v84;
  unsigned __int16 *v85;
  uint64_t v86;
  unsigned __int16 v87;
  WTF::StringImpl *v88;
  int v89;
  unsigned __int8 *v90;
  size_t v91;
  unint64_t v92;
  size_t v93;
  size_t v94;
  WTF::StringImpl *v95;
  size_t v96;
  unint64_t v97;
  size_t v98;
  WTF::StringImpl *v99;
  WebCore::ContentSecurityPolicy *v100;
  WTF::StringImpl *v101;
  unsigned __int8 *v102;
  size_t v103;
  unsigned __int8 *v104;
  int v105;
  int v106;
  unsigned __int8 *v107;
  size_t v108;
  unsigned __int8 *v109;
  int v110;
  int v111;
  unsigned __int8 *v112;
  unint64_t v113;
  unsigned __int8 *v114;
  int v115;
  int v116;
  unsigned __int8 *v117;
  unint64_t v118;
  unsigned __int8 *v119;
  int v120;
  int v121;
  unsigned __int8 *v122;
  unint64_t v123;
  unsigned __int8 *v124;
  int v125;
  int v126;
  _WORD *v127;
  unint64_t v128;
  char *v129;
  int v130;
  int v131;
  uint64_t v132;
  int v133;
  int v134;
  unsigned __int8 *v135;
  int v136;
  int v137;
  unsigned __int8 *v138;
  int v139;
  int v140;
  unsigned __int8 *v141;
  int v142;
  int v143;
  unsigned __int8 *v144;
  int v145;
  int v146;
  unsigned __int8 *v147;
  int v148;
  int v149;
  _WORD *v150;
  int v151;
  int v152;
  unsigned __int8 *v153;
  char *v154;
  _BYTE *v155;
  _BYTE *v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  unsigned __int8 *v160;
  unsigned __int8 *v161;
  _BYTE *v162;
  int v163;
  BOOL v164;
  _BYTE *v166;
  int v167;
  _BYTE *v168;
  uint64_t v169;
  unsigned __int8 *v170;
  _BYTE *v171;
  unsigned int v172;
  unsigned int v173;
  WebCore::ContentSecurityPolicy *v174;
  unsigned int v175;
  uint64_t v176;
  WebCore::ContentSecurityPolicy *v178;
  unsigned __int8 *v179;
  _BYTE *i;
  char v181;
  WTF::StringImpl *v182;
  int v183;
  unsigned __int8 *v184;
  size_t v185;
  unint64_t v186;
  size_t v187;
  WTF::StringImpl *v188;
  size_t v189;
  unint64_t v190;
  size_t v191;
  size_t v192;
  WTF::StringImpl *v193;
  WebCore::ContentSecurityPolicy *v194;
  WTF::StringImpl *v195;
  unsigned __int8 *v196;
  size_t v197;
  unsigned __int8 *v198;
  int v199;
  int v200;
  unsigned __int8 *v201;
  size_t v202;
  unsigned __int8 *v203;
  int v204;
  int v205;
  unsigned __int8 *v206;
  unint64_t v207;
  unsigned __int8 *v208;
  int v209;
  int v210;
  unsigned __int8 *v211;
  unint64_t v212;
  unsigned __int8 *v213;
  int v214;
  int v215;
  _WORD *v216;
  unint64_t v217;
  char *v218;
  int v219;
  int v220;
  unsigned __int8 *v221;
  unint64_t v222;
  unsigned __int8 *v223;
  int v224;
  int v225;
  uint64_t v226;
  int v227;
  int v228;
  size_t v229;
  unsigned __int8 *v230;
  int v231;
  int v232;
  size_t v233;
  unsigned __int8 *v234;
  int v235;
  int v236;
  unint64_t v237;
  unsigned __int8 *v238;
  int v239;
  int v240;
  unint64_t v241;
  unsigned __int8 *v242;
  int v243;
  int v244;
  unint64_t v245;
  _WORD *v246;
  int v247;
  int v248;
  unint64_t v249;
  unsigned __int8 *v250;
  int v251;
  int v252;
  uint64_t v253;
  int v254;
  WTF::StringImpl *v255;
  uint64_t v256;
  uint64_t *v257;
  WTF::StringImpl **v258;
  WTF::StringImpl *v259;
  uint64_t v260;
  int v261;
  BOOL v262;
  int v263;
  _BOOL4 v264;
  WTF::StringImpl *v265;
  int v266;
  uint64_t v267;
  WTF::StringImpl *v268;
  int v269;
  uint64_t v270;
  uint64_t *v271;
  const WTF::String **v272;
  BOOL v273;
  uint64_t v274;
  WTF::StringImpl *v275;
  int v276;
  WTF::StringImpl *v277;
  uint64_t v278;
  uint64_t *v279;
  WTF::StringImpl **v280;
  WTF::StringImpl *v281;
  uint64_t v282;
  int v283;
  int v284;
  _BOOL4 v285;
  WTF::StringImpl *v286;
  int v287;
  uint64_t v288;
  int v289;
  _BOOL4 v290;
  WTF::StringImpl *v291;
  void (***v292)(_QWORD, uint64_t, uint64_t, const WTF::String **, _QWORD);
  WTF::StringImpl *v293;
  WTF::StringImpl *v294;
  uint64_t v295;
  uint64_t v296;
  WTF::StringImpl *v297;
  WTF::StringImpl *v298;
  WTF *v299;
  void *v300;
  uint64_t v301;
  int v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  int v311;
  int v312;
  int v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  int v320;
  int v321;
  int v322;
  int v323;
  int v324;
  uint64_t v325;
  uint64_t *v326;
  WTF::StringImpl *v327;
  WTF::StringImpl *v328;
  char v329;
  const WTF::String *v330;
  const WTF::String *v331;

  result = (const WTF::String *)WTF::fastMalloc((WTF *)0xF8);
  v12 = (uint64_t)result;
  v325 = a2;
  *(_QWORD *)result = a2;
  *((_QWORD *)result + 1) = 0;
  *((_BYTE *)result + 16) = a4;
  *((_BYTE *)result + 17) = a4 ^ 1;
  *(_DWORD *)((char *)result + 18) = 0;
  *(_OWORD *)((char *)result + 24) = 0u;
  *(_OWORD *)((char *)result + 40) = 0u;
  *(_OWORD *)((char *)result + 56) = 0u;
  *(_OWORD *)((char *)result + 72) = 0u;
  *(_OWORD *)((char *)result + 88) = 0u;
  *(_OWORD *)((char *)result + 104) = 0u;
  *(_OWORD *)((char *)result + 120) = 0u;
  *(_OWORD *)((char *)result + 136) = 0u;
  *(_OWORD *)((char *)result + 152) = 0u;
  *(_OWORD *)((char *)result + 168) = 0u;
  *(_OWORD *)((char *)result + 184) = 0u;
  *(_OWORD *)((char *)result + 200) = 0u;
  *(_OWORD *)((char *)result + 216) = 0u;
  *(_OWORD *)((char *)result + 232) = 0u;
  v326 = a1;
  *a1 = (uint64_t)result;
  if (a5 == 1)
  {
    WTF::String::trim();
    v13 = v330;
    if (!v330)
    {
LABEL_72:
      v48 = *(WTF::StringImpl **)(v12 + 8);
      *(_QWORD *)(v12 + 8) = v13;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
          WTF::StringImpl::destroy(v48, v11);
        else
          *(_DWORD *)v48 -= 2;
      }
      result = v330;
      v330 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (const WTF::String *)WTF::StringImpl::destroy(result, v11);
        else
          *(_DWORD *)result -= 2;
      }
      goto LABEL_78;
    }
    v14 = (_WORD *)*((_QWORD *)v330 + 1);
    if ((*((_BYTE *)v330 + 16) & 4) == 0)
    {
      v15 = *((unsigned int *)v330 + 1);
      if ((_DWORD)v15)
      {
        v16 = 0;
        v17 = 0;
        v18 = &v14[v15];
        while (1)
        {
          v19 = (unsigned __int16)v14[v16];
          v70 = v19 > 0xD;
          v20 = (1 << v19) & 0x2401;
          if (!v70 && v20 != 0)
            break;
          v17 -= 2;
          ++v16;
          if (-2 * v15 == v17)
            goto LABEL_24;
        }
        v29 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(2 * v15));
        v328 = v29;
        if (v16 > v15)
          goto LABEL_765;
        v30 = v29;
        v31 = -2 * v15;
        if ((_DWORD)v16 == 1)
        {
          *(_WORD *)v29 = *v14;
        }
        else if ((_DWORD)v16)
        {
          memcpy(v29, v14, -v17);
        }
        if (v31 != v17)
        {
          v32 = &v14[v17 / 0xFFFFFFFFFFFFFFFELL];
LABEL_30:
          v33 = v32 + 1;
          while (1)
          {
            v34 = *v32;
            if (v34 > 0xD || ((1 << v34) & 0x2401) == 0)
              break;
            ++v32;
            ++v33;
            if (v32 == v18)
              goto LABEL_70;
          }
          if (v32 != v18)
          {
            while (1)
            {
              if ((unsigned __int16)v34 <= 0xDu && ((1 << v34) & 0x2401) != 0)
              {
                v32 = v33 - 1;
                goto LABEL_30;
              }
              *((_WORD *)v30 + v16) = v34;
              if (v33 == v18)
                break;
              v37 = *v33++;
              LOWORD(v34) = v37;
              LODWORD(v16) = v16 + 1;
            }
            LODWORD(v16) = v16 + 1;
          }
        }
LABEL_70:
        LODWORD(v327) = v16;
        WTF::StringImpl::adopt();
        goto LABEL_71;
      }
      goto LABEL_24;
    }
    v23 = (WTF *)*((unsigned int *)v330 + 1);
    if (!(_DWORD)v23)
    {
LABEL_24:
      *(_DWORD *)v330 += 2;
      goto LABEL_72;
    }
    v24 = 0;
    v25 = (unsigned __int8 *)v23 + (_QWORD)v14;
    while (1)
    {
      v26 = *((unsigned __int8 *)v14 + v24);
      v70 = v26 > 0xD;
      v27 = (1 << v26) & 0x2401;
      if (!v70 && v27 != 0)
        break;
      if (v23 == (WTF *)++v24)
        goto LABEL_24;
    }
    LODWORD(v327) = *((_DWORD *)v330 + 1);
    v38 = (WTF::StringImpl *)WTF::fastMalloc(v23);
    v328 = v38;
    if (v24 > (unint64_t)v23)
      goto LABEL_765;
    v39 = v38;
    if ((_DWORD)v24)
    {
      if ((_DWORD)v24 == 1)
        *(_BYTE *)v38 = *(_BYTE *)v14;
      else
        memcpy(v38, v14, v24);
    }
    if (v23 == (WTF *)v24)
    {
LABEL_68:
      LODWORD(v327) = v24;
      WTF::StringImpl::adopt();
LABEL_71:
      WTF::fastFree(v328, v47);
      v13 = v331;
      goto LABEL_72;
    }
    v40 = (unsigned __int8 *)v14 + v24;
    v41 = v24;
    while (1)
    {
      while (1)
      {
        v42 = *v40;
        v70 = v42 > 0xD;
        v43 = (1 << v42) & 0x2401;
        if (!v70 && v43 != 0)
          break;
LABEL_57:
        if (v40 == v25)
        {
          LODWORD(v24) = v41;
          goto LABEL_68;
        }
        while (1)
        {
          v45 = *v40;
          if (v45 <= 0xD && ((1 << v45) & 0x2401) != 0)
            break;
          ++v40;
          LODWORD(v24) = v41 + 1;
          *((_BYTE *)v39 + v41++) = v45;
          if (v40 == v25)
            goto LABEL_68;
        }
        LODWORD(v24) = v41;
        if (v40 == v25)
          goto LABEL_68;
      }
      if (++v40 == v25)
      {
        v40 = (unsigned __int8 *)v14 + (_QWORD)v23;
        goto LABEL_57;
      }
    }
  }
  v22 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v22 += 2;
  *((_QWORD *)result + 1) = v22;
LABEL_78:
  v49 = *(_DWORD **)a3;
  if (!*(_QWORD *)a3)
    goto LABEL_79;
  v57 = v49[1];
  if (!(_DWORD)v57)
    goto LABEL_79;
  v58 = (char *)*((_QWORD *)v49 + 1);
  v323 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117);
  v318 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102);
  v319 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112);
  v322 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114);
  v316 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97);
  v317 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103);
  v324 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101);
  v320 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 45);
  v314 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105);
  v315 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100);
  v321 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115);
  v312 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99);
  v313 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110);
  v310 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116);
  v311 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 113);
  if ((v49[4] & 4) != 0)
  {
LABEL_346:
    v153 = (unsigned __int8 *)&v58[v57];
    v154 = v58;
    while (*v154 != 59)
    {
      ++v154;
      if (!--v57)
        goto LABEL_351;
    }
    v153 = (unsigned __int8 *)v154;
LABEL_351:
    v155 = (_BYTE *)(v153 - (unsigned __int8 *)v58);
    if (v153 - (unsigned __int8 *)v58 < 0)
      goto LABEL_765;
    if (!v155)
      goto LABEL_456;
    v156 = 0;
    v157 = v58 - (char *)v153;
    while (1)
    {
      v158 = v156[(_QWORD)v58];
      if ((v158 - 9) >= 5 && v158 != 32)
        break;
      ++v156;
      ++v157;
      if (v155 == v156)
        goto LABEL_456;
    }
    v159 = 0;
    v160 = v153;
    v161 = &v156[(_QWORD)v58];
    v162 = (_BYTE *)(v153 - (unsigned __int8 *)v58);
    while (1)
    {
      v163 = v161[v159];
      v164 = v163 != 45 && (v163 - 48) >= 0xA;
      if (v164 && (v163 | 0x20u) - 97 > 0x19)
        break;
      ++v159;
      --v162;
      ++v157;
      if (!&v156[v58 - (char *)v153 + v159])
      {
        if (v155 != v156)
        {
          v166 = 0;
          goto LABEL_371;
        }
LABEL_396:
        if (v161 - (unsigned __int8 *)v58 - (uint64_t)v156 < 0)
          goto LABEL_765;
        v178 = *(WebCore::ContentSecurityPolicy **)v12;
        WTF::String::String();
        WebCore::ContentSecurityPolicy::reportUnsupportedDirective(v178, v331);
        result = v331;
        v331 = 0;
        if (!result)
          goto LABEL_456;
LABEL_454:
        if (*(_DWORD *)result == 2)
          result = (const WTF::String *)WTF::StringImpl::destroy(result, v11);
        else
          *(_DWORD *)result -= 2;
        goto LABEL_456;
      }
    }
    if (!v159)
    {
      do
      {
        v175 = *v161;
        v70 = v175 > 0x20;
        v176 = (1 << v175) & 0x100003E00;
        if (!v70 && v176 != 0)
          goto LABEL_396;
        ++v161;
        v69 = __CFADD__(v157++, 1);
      }
      while (!v69);
      v161 = v153;
      goto LABEL_396;
    }
    v160 = &v156[(_QWORD)v58 + v159];
    v166 = (_BYTE *)(v162 - v156);
LABEL_371:
    if (v160 - (unsigned __int8 *)v58 - (uint64_t)v156 < 0)
      goto LABEL_765;
    WTF::String::String();
    if (!v166)
      goto LABEL_408;
    v167 = *v160;
    if ((v167 - 9) < 5 || v167 == 32)
    {
      v168 = v166 - 1;
      if (v166 == (_BYTE *)1)
        goto LABEL_408;
      v169 = 0;
      v170 = v160 + 2;
      v171 = v166 - 2;
      while (1)
      {
        v172 = v160[v169 + 1];
        if (v172 - 9 >= 5 && v172 != 32)
          break;
        ++v169;
        ++v170;
        --v171;
        if (v168 == (_BYTE *)v169)
          goto LABEL_408;
      }
      while (v172 <= 0x20 && ((1 << v172) & 0x100003600) != 0 || v172 == 11 || v172 - 33 <= 0x5D)
      {
        if (!v171)
        {
          if (v168 != (_BYTE *)v169)
          {
            if ((uint64_t)&v168[-v169] < 0)
              goto LABEL_765;
            WTF::String::String();
            v182 = v331;
            v331 = 0;
            v327 = v182;
            v328 = v330;
            v183 = 1;
            v329 = 1;
LABEL_488:
            result = v331;
            v331 = 0;
            if (result)
            {
              if (*(_DWORD *)result != 2)
              {
                *(_DWORD *)result -= 2;
                goto LABEL_491;
              }
              result = (const WTF::String *)WTF::StringImpl::destroy(result, v11);
              if (!v329)
              {
LABEL_456:
                if (!v57)
                  goto LABEL_79;
                if (*v153 == 59)
                {
                  ++v153;
                  --v57;
                }
                goto LABEL_459;
              }
            }
            else
            {
LABEL_491:
              if (!v183)
                goto LABEL_456;
            }
LABEL_409:
            if (a5 != 1)
            {
              if (a5 == 4)
              {
                if (v327)
                {
                  if (WebCore::ContentSecurityPolicyDirectiveNames::pluginTypes)
                    v189 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::pluginTypes);
                  else
                    v189 = 0;
                  v190 = *((unsigned int *)v327 + 1);
                  if (v189 == v190)
                  {
                    v201 = (unsigned __int8 *)*((_QWORD *)v327 + 1);
                    if ((*((_BYTE *)v327 + 16) & 4) != 0)
                    {
                      if (!v189)
                        goto LABEL_449;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v201) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::pluginTypes))
                      {
                        v202 = 0;
                        v203 = v201 + 1;
                        do
                        {
                          if (v189 - 1 == v202)
                            goto LABEL_449;
                          v204 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v203[v202]);
                          v205 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                    + WebCore::ContentSecurityPolicyDirectiveNames::pluginTypes[++v202]);
                        }
                        while (v204 == v205);
                        if (v202 >= v189)
                          goto LABEL_449;
                      }
                    }
                    else
                    {
                      if (!v189)
                        goto LABEL_449;
                      if ((*(unsigned __int16 *)v201 | (32 * (*(unsigned __int16 *)v201 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::pluginTypes))
                      {
                        v233 = 0;
                        v234 = v201 + 2;
                        do
                        {
                          if (v189 - 1 == v233)
                            goto LABEL_449;
                          v235 = *(unsigned __int16 *)&v234[2 * v233] | (32
                                                                       * (*(unsigned __int16 *)&v234[2 * v233]
                                                                        - 65 < 0x1A));
                          v236 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                    + WebCore::ContentSecurityPolicyDirectiveNames::pluginTypes[++v233]);
                        }
                        while (v235 == v236);
                        if (v233 >= v189)
                          goto LABEL_449;
                      }
                    }
                  }
                  if (WebCore::ContentSecurityPolicyDirectiveNames::reportURI)
                    v191 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::reportURI);
                  else
                    v191 = 0;
                  if (v191 == v190)
                  {
                    v211 = (unsigned __int8 *)*((_QWORD *)v327 + 1);
                    if ((*((_BYTE *)v327 + 16) & 4) != 0)
                    {
                      if (!(_DWORD)v190)
                        goto LABEL_449;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v211) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::reportURI))
                      {
                        v212 = 0;
                        v213 = v211 + 1;
                        do
                        {
                          if (v190 - 1 == v212)
                            goto LABEL_449;
                          v214 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v213[v212]);
                          v215 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                    + WebCore::ContentSecurityPolicyDirectiveNames::reportURI[++v212]);
                        }
                        while (v214 == v215);
                        if (v212 >= v190)
                          goto LABEL_449;
                      }
                    }
                    else
                    {
                      if (!(_DWORD)v190)
                        goto LABEL_449;
                      if ((*(unsigned __int16 *)v211 | (32 * (*(unsigned __int16 *)v211 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::reportURI))
                      {
                        v241 = 0;
                        v242 = v211 + 2;
                        do
                        {
                          if (v190 - 1 == v241)
                            goto LABEL_449;
                          v243 = *(unsigned __int16 *)&v242[2 * v241] | (32
                                                                       * (*(unsigned __int16 *)&v242[2 * v241]
                                                                        - 65 < 0x1A));
                          v244 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                    + WebCore::ContentSecurityPolicyDirectiveNames::reportURI[++v241]);
                        }
                        while (v243 == v244);
                        if (v241 >= v190)
                          goto LABEL_449;
                      }
                    }
                  }
                  v192 = WebCore::ContentSecurityPolicyDirectiveNames::reportTo
                       ? strlen(WebCore::ContentSecurityPolicyDirectiveNames::reportTo)
                       : 0;
                  if (v192 == v190)
                  {
                    v221 = (unsigned __int8 *)*((_QWORD *)v327 + 1);
                    if ((*((_BYTE *)v327 + 16) & 4) != 0)
                    {
                      if (!(_DWORD)v190)
                        goto LABEL_449;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v221) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::reportTo))
                      {
                        v222 = 0;
                        v223 = v221 + 1;
                        do
                        {
                          if (v190 - 1 == v222)
                            goto LABEL_449;
                          v224 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v223[v222]);
                          v225 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                    + WebCore::ContentSecurityPolicyDirectiveNames::reportTo[++v222]);
                        }
                        while (v224 == v225);
                        if (v222 >= v190)
                          goto LABEL_449;
                      }
                    }
                    else
                    {
                      if (!(_DWORD)v190)
                        goto LABEL_449;
                      if ((*(unsigned __int16 *)v221 | (32 * (*(unsigned __int16 *)v221 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::reportTo))
                      {
                        v249 = 0;
                        v250 = v221 + 2;
                        do
                        {
                          if (v190 - 1 == v249)
                            goto LABEL_449;
                          v251 = *(unsigned __int16 *)&v250[2 * v249] | (32
                                                                       * (*(unsigned __int16 *)&v250[2 * v249]
                                                                        - 65 < 0x1A));
                          v252 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                    + WebCore::ContentSecurityPolicyDirectiveNames::reportTo[++v249]);
                        }
                        while (v251 == v252);
                        if (v249 >= v190)
                          goto LABEL_449;
                      }
                    }
                  }
                }
                goto LABEL_471;
              }
              if (a5 != 3 || !v327 || *((_DWORD *)v327 + 1) != 25)
              {
LABEL_449:
                result = (const WTF::String *)WebCore::ContentSecurityPolicyDirectiveList::addDirective(v12, (WTF::StringImpl *)&v327);
                if (!v329)
                  goto LABEL_456;
                v188 = v328;
                v328 = 0;
                if (v188)
                {
                  if (*(_DWORD *)v188 == 2)
                    WTF::StringImpl::destroy(v188, v11);
                  else
                    *(_DWORD *)v188 -= 2;
                }
                result = v327;
                v327 = 0;
                if (!result)
                  goto LABEL_456;
                goto LABEL_454;
              }
              v184 = (unsigned __int8 *)*((_QWORD *)v327 + 1);
              if ((*((_BYTE *)v327 + 16) & 4) != 0)
              {
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v184) != v323
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v184[1]) != v319
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v184[2]) != v317
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v184[3]) != v322
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v184[4]) != v316
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v184[5]) != v315
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v184[6]) != v324
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v184[7]) != v320
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v184[8]) != v314
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v184[9]) != v313
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v184[10]) != v321
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v184[11]) != v324
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v184[12]) != v312
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v184[13]) != v323
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v184[14]) != v322
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v184[15]) != v324
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v184[16]) != v320
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v184[17]) != v322
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v184[18]) != v324
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v184[19]) != v311
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v184[20]) != v323
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v184[21]) != v324
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v184[22]) != v321
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v184[23]) != v310
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v184[24]) != v321)
                {
                  goto LABEL_449;
                }
              }
              else
              {
                if (v323 != (unsigned __int16)(*(_WORD *)v184 | (32
                                                                * (*(unsigned __int16 *)v184 - 65 < 0x1A))))
                  goto LABEL_449;
                v226 = 1u;
                do
                {
                  if (v226 == 25)
                    goto LABEL_471;
                  v227 = *(unsigned __int16 *)&v184[2 * v226] | (32
                                                               * (*(unsigned __int16 *)&v184[2 * v226]
                                                                - 65 < 0x1A));
                  v228 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aUpgradeInsecur[v226++]);
                }
                while (v227 == v228);
                if ((unint64_t)(v226 - 2) < 0x18)
                  goto LABEL_449;
              }
LABEL_471:
              v193 = v328;
              v328 = 0;
              if (v193)
              {
                if (*(_DWORD *)v193 == 2)
                  WTF::StringImpl::destroy(v193, v11);
                else
                  *(_DWORD *)v193 -= 2;
              }
              result = v327;
              v327 = 0;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = (const WTF::String *)WTF::StringImpl::destroy(result, v11);
                else
                  *(_DWORD *)result -= 2;
              }
LABEL_459:
              v58 = (char *)v153;
              if (!v57)
                goto LABEL_79;
              goto LABEL_346;
            }
            if (!v327)
              goto LABEL_449;
            if (WebCore::ContentSecurityPolicyDirectiveNames::sandbox)
              v185 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::sandbox);
            else
              v185 = 0;
            v186 = *((unsigned int *)v327 + 1);
            if (v185 == v186)
            {
              v196 = (unsigned __int8 *)*((_QWORD *)v327 + 1);
              if ((*((_BYTE *)v327 + 16) & 4) != 0)
              {
                if (v185)
                {
                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v196) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + *WebCore::ContentSecurityPolicyDirectiveNames::sandbox))
                    goto LABEL_445;
                  v197 = 0;
                  v198 = v196 + 1;
                  do
                  {
                    if (v185 - 1 == v197)
                      goto LABEL_533;
                    v199 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v198[v197]);
                    v200 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                              + WebCore::ContentSecurityPolicyDirectiveNames::sandbox[++v197]);
                  }
                  while (v199 == v200);
                  if (v197 < v185)
                    goto LABEL_445;
                }
              }
              else if (v185)
              {
                if ((*(unsigned __int16 *)v196 | (32 * (*(unsigned __int16 *)v196 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::sandbox))
                  goto LABEL_445;
                v229 = 0;
                v230 = v196 + 2;
                do
                {
                  if (v185 - 1 == v229)
                    goto LABEL_533;
                  v231 = *(unsigned __int16 *)&v230[2 * v229] | (32
                                                               * (*(unsigned __int16 *)&v230[2 * v229]
                                                                - 65 < 0x1A));
                  v232 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                            + WebCore::ContentSecurityPolicyDirectiveNames::sandbox[++v229]);
                }
                while (v231 == v232);
                if (v229 < v185)
                  goto LABEL_445;
              }
            }
            else
            {
LABEL_445:
              if (WebCore::ContentSecurityPolicyDirectiveNames::reportURI)
                v187 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::reportURI);
              else
                v187 = 0;
              if (v187 != v186)
                goto LABEL_448;
              v206 = (unsigned __int8 *)*((_QWORD *)v327 + 1);
              if ((*((_BYTE *)v327 + 16) & 4) != 0)
              {
                if (!(_DWORD)v186)
                  goto LABEL_533;
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v206) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                             + *WebCore::ContentSecurityPolicyDirectiveNames::reportURI))
                {
                  v207 = 0;
                  v208 = v206 + 1;
                  do
                  {
                    if (v186 - 1 == v207)
                      goto LABEL_533;
                    v209 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v208[v207]);
                    v210 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                              + WebCore::ContentSecurityPolicyDirectiveNames::reportURI[++v207]);
                  }
                  while (v209 == v210);
                  if (v207 >= v186)
                    goto LABEL_533;
                }
LABEL_448:
                if ((_DWORD)v186 != 15)
                  goto LABEL_449;
                v216 = (_WORD *)*((_QWORD *)v327 + 1);
                if ((*((_BYTE *)v327 + 16) & 4) != 0)
                {
                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v216) != v318)
                    goto LABEL_449;
                  v217 = 0;
                  v218 = (char *)v216 + 1;
                  do
                  {
                    if (v186 - 1 == v217)
                      goto LABEL_533;
                    v219 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v218[v217]);
                    v220 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aFrameAncestors[++v217]);
                  }
                  while (v219 == v220);
                  if (v217 < v186)
                    goto LABEL_449;
                }
                else
                {
                  if (v318 != (unsigned __int16)(*v216 | (32 * ((unsigned __int16)*v216 - 65 < 0x1A))))
                    goto LABEL_449;
                  v245 = 0;
                  v246 = v216 + 1;
                  do
                  {
                    if (v186 - 1 == v245)
                      goto LABEL_533;
                    v247 = (unsigned __int16)v246[v245] | (32 * ((unsigned __int16)v246[v245] - 65 < 0x1A));
                    v248 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aFrameAncestors[++v245]);
                  }
                  while (v247 == v248);
                  if (v245 < v186)
                    goto LABEL_449;
                }
              }
              else if ((_DWORD)v186)
              {
                if ((*(unsigned __int16 *)v206 | (32 * (*(unsigned __int16 *)v206 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::reportURI))
                  goto LABEL_448;
                v237 = 0;
                v238 = v206 + 2;
                do
                {
                  if (v186 - 1 == v237)
                    goto LABEL_533;
                  v239 = *(unsigned __int16 *)&v238[2 * v237] | (32
                                                               * (*(unsigned __int16 *)&v238[2 * v237]
                                                                - 65 < 0x1A));
                  v240 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                            + WebCore::ContentSecurityPolicyDirectiveNames::reportURI[++v237]);
                }
                while (v239 == v240);
                if (v237 < v186)
                  goto LABEL_448;
              }
            }
LABEL_533:
            result = (const WTF::String *)WebCore::ContentSecurityPolicy::reportInvalidDirectiveInHTTPEquivMeta(*(_QWORD *)v12, v327);
            if (v329)
              goto LABEL_471;
            goto LABEL_459;
          }
LABEL_408:
          v327 = v331;
          v328 = 0;
          v329 = 1;
          goto LABEL_409;
        }
        v173 = *v170++;
        v172 = v173;
        --v171;
      }
      if ((uint64_t)&v168[-v169] < 0)
        goto LABEL_765;
      v174 = *(WebCore::ContentSecurityPolicy **)v12;
      WTF::String::String();
      WebCore::ContentSecurityPolicy::reportInvalidDirectiveValueCharacter(v174, v331, v330);
    }
    else
    {
      v179 = &v166[(_QWORD)v160];
      for (i = v166 - 1; ; --i)
      {
        if (v167 <= 0x20u && ((1 << v167) & 0x100003E00) != 0)
          goto LABEL_482;
        if (!i)
          break;
        v181 = *++v160;
        LOBYTE(v167) = v181;
      }
      v160 = v179;
LABEL_482:
      if (v160 - (unsigned __int8 *)v58 - (uint64_t)v156 < 0)
        goto LABEL_765;
      v194 = *(WebCore::ContentSecurityPolicy **)v12;
      WTF::String::String();
      WebCore::ContentSecurityPolicy::reportUnsupportedDirective(v194, v330);
    }
    v195 = v330;
    v330 = 0;
    if (v195)
    {
      if (*(_DWORD *)v195 == 2)
        WTF::StringImpl::destroy(v195, v11);
      else
        *(_DWORD *)v195 -= 2;
    }
    v183 = 0;
    LOBYTE(v327) = 0;
    v329 = 0;
    goto LABEL_488;
  }
  do
  {
    v59 = &v58[2 * v57];
    v60 = v58;
    while (*(_WORD *)v60 != 59)
    {
      v60 += 2;
      if (!--v57)
        goto LABEL_104;
    }
    v59 = v60;
LABEL_104:
    v61 = v59 - v58;
    if (v59 - v58 <= -2)
      goto LABEL_765;
    if (v59 == v58)
      goto LABEL_228;
    v62 = 0;
    v63 = v61 >> 1;
    while (1)
    {
      v64 = *(unsigned __int16 *)&v58[v62];
      if ((v64 - 9) >= 5 && v64 != 32)
        break;
      v62 += 2;
      if (!--v63)
        goto LABEL_228;
    }
    v65 = 0;
    v66 = (unsigned __int16 *)v59;
    v67 = &v58[v62];
    while (1)
    {
      v68 = *(unsigned __int16 *)&v67[v65];
      v69 = v68 != 45 && (v68 - 48) >= 0xA;
      v70 = v69 && (v68 | 0x20u) - 97 > 0x19;
      if (v70)
        break;
      v65 += 2;
      if (!--v63)
      {
        if (v61 != v62)
        {
          v63 = 0;
          goto LABEL_124;
        }
LABEL_152:
        if (v67 - v58 - v62 <= -2)
          goto LABEL_765;
        v84 = *(WebCore::ContentSecurityPolicy **)v12;
        WTF::String::String();
        WebCore::ContentSecurityPolicy::reportUnsupportedDirective(v84, v331);
        result = v331;
        v331 = 0;
        if (!result)
        {
LABEL_228:
          if (v57)
          {
            if (*(_WORD *)v59 == 59)
            {
              v59 += 2;
              --v57;
            }
            goto LABEL_231;
          }
          goto LABEL_79;
        }
LABEL_226:
        if (*(_DWORD *)result == 2)
          result = (const WTF::String *)WTF::StringImpl::destroy(result, v11);
        else
          *(_DWORD *)result -= 2;
        goto LABEL_228;
      }
    }
    if (!v65)
    {
      v80 = &v58[2 * (v61 >> 1)];
      while (1)
      {
        v81 = *(unsigned __int16 *)v67;
        v70 = v81 > 0x20;
        v82 = (1 << v81) & 0x100003E00;
        if (!v70 && v82 != 0)
          goto LABEL_152;
        v67 += 2;
        if (!--v63)
        {
          v67 = v80;
          goto LABEL_152;
        }
      }
    }
    v66 = (unsigned __int16 *)&v58[v62 + v65];
LABEL_124:
    if ((char *)v66 - v58 - v62 <= -2)
      goto LABEL_765;
    WTF::String::String();
    if (!v63)
      goto LABEL_164;
    v71 = *v66;
    if ((v71 - 9) < 5 || v71 == 32)
    {
      v72 = v63 - 1;
      if (v63 != 1)
      {
        v73 = 0;
        while (1)
        {
          v74 = v66[v73 / 2 + 1];
          if ((v74 - 9) >= 5 && v74 != 32)
            break;
          v73 += 2;
          if (!--v72)
            goto LABEL_164;
        }
        v75 = 0;
        v76 = 2 * v63 - 2;
        do
        {
          v77 = v66[v73 / 2 + 1 + v75];
          v78 = v77 > 0x20 || ((1 << v77) & 0x100003600) == 0;
          if (v78 && v77 != 11 && v77 - 33 > 0x5D)
          {
            if ((uint64_t)(v76 - v73) <= -2)
              goto LABEL_765;
            v79 = *(WebCore::ContentSecurityPolicy **)v12;
            WTF::String::String();
            WebCore::ContentSecurityPolicy::reportInvalidDirectiveValueCharacter(v79, v331, v330);
            goto LABEL_240;
          }
          ++v75;
        }
        while (v72 != v75);
        if (v76 != v73)
        {
          if ((uint64_t)(v76 - v73) > -2)
          {
            WTF::String::String();
            v88 = v331;
            v331 = 0;
            v327 = v88;
            v328 = v330;
            v89 = 1;
            v329 = 1;
            goto LABEL_244;
          }
LABEL_765:
          __break(1u);
LABEL_766:
          v299 = (WTF *)MEMORY[0x19AEA6024]();
          WTF::fastFree(v299, v300);
          goto LABEL_748;
        }
      }
LABEL_164:
      v327 = v331;
      v328 = 0;
      v329 = 1;
      goto LABEL_165;
    }
    v85 = &v66[v63];
    v86 = v63 - 1;
    while ((unsigned __int16)v71 > 0x20u || ((1 << v71) & 0x100003E00) == 0)
    {
      if (!v86)
      {
        v66 = v85;
        break;
      }
      v87 = v66[1];
      ++v66;
      LOWORD(v71) = v87;
      --v86;
    }
    if ((char *)v66 - v58 - v62 <= -2)
      goto LABEL_765;
    v100 = *(WebCore::ContentSecurityPolicy **)v12;
    WTF::String::String();
    WebCore::ContentSecurityPolicy::reportUnsupportedDirective(v100, v330);
LABEL_240:
    v101 = v330;
    v330 = 0;
    if (v101)
    {
      if (*(_DWORD *)v101 == 2)
        WTF::StringImpl::destroy(v101, v11);
      else
        *(_DWORD *)v101 -= 2;
    }
    v89 = 0;
    LOBYTE(v327) = 0;
    v329 = 0;
LABEL_244:
    result = v331;
    v331 = 0;
    if (!result)
      goto LABEL_247;
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
LABEL_247:
      if (!v89)
        goto LABEL_228;
      goto LABEL_165;
    }
    result = (const WTF::String *)WTF::StringImpl::destroy(result, v11);
    if (!v329)
      goto LABEL_228;
LABEL_165:
    if (a5 == 1)
    {
      if (!v327)
        goto LABEL_221;
      if (WebCore::ContentSecurityPolicyDirectiveNames::sandbox)
        v96 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::sandbox);
      else
        v96 = 0;
      v97 = *((unsigned int *)v327 + 1);
      if (v96 == v97)
      {
        v107 = (unsigned __int8 *)*((_QWORD *)v327 + 1);
        if ((*((_BYTE *)v327 + 16) & 4) != 0)
        {
          if (!v96)
            goto LABEL_297;
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v107) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                       + *WebCore::ContentSecurityPolicyDirectiveNames::sandbox))
          {
            v108 = 0;
            v109 = v107 + 1;
            while (v96 - 1 != v108)
            {
              v110 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v109[v108]);
              v111 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                        + WebCore::ContentSecurityPolicyDirectiveNames::sandbox[++v108]);
              if (v110 != v111)
                goto LABEL_263;
            }
            goto LABEL_297;
          }
        }
        else
        {
          if (!v96)
            goto LABEL_297;
          if ((*(unsigned __int16 *)v107 | (32 * (*(unsigned __int16 *)v107 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::sandbox))
          {
            v108 = 0;
            v138 = v107 + 2;
            do
            {
              if (v96 - 1 == v108)
                goto LABEL_297;
              v139 = *(unsigned __int16 *)&v138[2 * v108] | (32
                                                           * (*(unsigned __int16 *)&v138[2 * v108] - 65 < 0x1A));
              v140 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                        + WebCore::ContentSecurityPolicyDirectiveNames::sandbox[++v108]);
            }
            while (v139 == v140);
LABEL_263:
            if (v108 >= v96)
              goto LABEL_297;
          }
        }
      }
      if (WebCore::ContentSecurityPolicyDirectiveNames::reportURI)
        v98 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::reportURI);
      else
        v98 = 0;
      if (v98 != v97)
        goto LABEL_220;
      v117 = (unsigned __int8 *)*((_QWORD *)v327 + 1);
      if ((*((_BYTE *)v327 + 16) & 4) != 0)
      {
        if ((_DWORD)v97)
        {
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v117) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                       + *WebCore::ContentSecurityPolicyDirectiveNames::reportURI))
            goto LABEL_220;
          v118 = 0;
          v119 = v117 + 1;
          while (v97 - 1 != v118)
          {
            v120 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v119[v118]);
            v121 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                      + WebCore::ContentSecurityPolicyDirectiveNames::reportURI[++v118]);
            if (v120 != v121)
              goto LABEL_281;
          }
        }
      }
      else if ((_DWORD)v97)
      {
        if ((*(unsigned __int16 *)v117 | (32 * (*(unsigned __int16 *)v117 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::reportURI))
          goto LABEL_220;
        v118 = 0;
        v144 = v117 + 2;
        do
        {
          if (v97 - 1 == v118)
            goto LABEL_297;
          v145 = *(unsigned __int16 *)&v144[2 * v118] | (32
                                                       * (*(unsigned __int16 *)&v144[2 * v118] - 65 < 0x1A));
          v146 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                    + WebCore::ContentSecurityPolicyDirectiveNames::reportURI[++v118]);
        }
        while (v145 == v146);
LABEL_281:
        if (v118 < v97)
        {
LABEL_220:
          if ((_DWORD)v97 != 15)
            goto LABEL_221;
          v127 = (_WORD *)*((_QWORD *)v327 + 1);
          if ((*((_BYTE *)v327 + 16) & 4) != 0)
          {
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v127) != v318)
              goto LABEL_221;
            v128 = 0;
            v129 = (char *)v127 + 1;
            while (v97 - 1 != v128)
            {
              v130 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v129[v128]);
              v131 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aFrameAncestors[++v128]);
              if (v130 != v131)
                goto LABEL_296;
            }
          }
          else
          {
            if (v318 != (unsigned __int16)(*v127 | (32 * ((unsigned __int16)*v127 - 65 < 0x1A))))
              goto LABEL_221;
            v128 = 0;
            v150 = v127 + 1;
            do
            {
              if (v97 - 1 == v128)
                goto LABEL_297;
              v151 = (unsigned __int16)v150[v128] | (32 * ((unsigned __int16)v150[v128] - 65 < 0x1A));
              v152 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aFrameAncestors[++v128]);
            }
            while (v151 == v152);
LABEL_296:
            if (v128 < v97)
              goto LABEL_221;
          }
        }
      }
LABEL_297:
      result = (const WTF::String *)WebCore::ContentSecurityPolicy::reportInvalidDirectiveInHTTPEquivMeta(*(_QWORD *)v12, v327);
      if (!v329)
        goto LABEL_231;
      goto LABEL_207;
    }
    if (a5 == 4)
    {
      if (v327)
      {
        if (WebCore::ContentSecurityPolicyDirectiveNames::pluginTypes)
          v91 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::pluginTypes);
        else
          v91 = 0;
        v92 = *((unsigned int *)v327 + 1);
        if (v91 == v92)
        {
          v102 = (unsigned __int8 *)*((_QWORD *)v327 + 1);
          if ((*((_BYTE *)v327 + 16) & 4) != 0)
          {
            if (!v91)
              goto LABEL_221;
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v102) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                         + *WebCore::ContentSecurityPolicyDirectiveNames::pluginTypes))
            {
              v103 = 0;
              v104 = v102 + 1;
              while (v91 - 1 != v103)
              {
                v105 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v104[v103]);
                v106 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                          + WebCore::ContentSecurityPolicyDirectiveNames::pluginTypes[++v103]);
                if (v105 != v106)
                  goto LABEL_255;
              }
LABEL_221:
              result = (const WTF::String *)WebCore::ContentSecurityPolicyDirectiveList::addDirective(v12, (WTF::StringImpl *)&v327);
              if (!v329)
                goto LABEL_228;
              v99 = v328;
              v328 = 0;
              if (v99)
              {
                if (*(_DWORD *)v99 == 2)
                  WTF::StringImpl::destroy(v99, v11);
                else
                  *(_DWORD *)v99 -= 2;
              }
              result = v327;
              v327 = 0;
              if (!result)
                goto LABEL_228;
              goto LABEL_226;
            }
          }
          else
          {
            if (!v91)
              goto LABEL_221;
            if ((*(unsigned __int16 *)v102 | (32 * (*(unsigned __int16 *)v102 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::pluginTypes))
            {
              v103 = 0;
              v135 = v102 + 2;
              do
              {
                if (v91 - 1 == v103)
                  goto LABEL_221;
                v136 = *(unsigned __int16 *)&v135[2 * v103] | (32
                                                             * (*(unsigned __int16 *)&v135[2 * v103] - 65 < 0x1A));
                v137 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                          + WebCore::ContentSecurityPolicyDirectiveNames::pluginTypes[++v103]);
              }
              while (v136 == v137);
LABEL_255:
              if (v103 >= v91)
                goto LABEL_221;
            }
          }
        }
        if (WebCore::ContentSecurityPolicyDirectiveNames::reportURI)
          v93 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::reportURI);
        else
          v93 = 0;
        if (v93 == v92)
        {
          v112 = (unsigned __int8 *)*((_QWORD *)v327 + 1);
          if ((*((_BYTE *)v327 + 16) & 4) != 0)
          {
            if (!(_DWORD)v92)
              goto LABEL_221;
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v112) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                         + *WebCore::ContentSecurityPolicyDirectiveNames::reportURI))
            {
              v113 = 0;
              v114 = v112 + 1;
              while (v92 - 1 != v113)
              {
                v115 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[v113]);
                v116 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                          + WebCore::ContentSecurityPolicyDirectiveNames::reportURI[++v113]);
                if (v115 != v116)
                  goto LABEL_273;
              }
              goto LABEL_221;
            }
          }
          else
          {
            if (!(_DWORD)v92)
              goto LABEL_221;
            if ((*(unsigned __int16 *)v112 | (32 * (*(unsigned __int16 *)v112 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::reportURI))
            {
              v113 = 0;
              v141 = v112 + 2;
              do
              {
                if (v92 - 1 == v113)
                  goto LABEL_221;
                v142 = *(unsigned __int16 *)&v141[2 * v113] | (32
                                                             * (*(unsigned __int16 *)&v141[2 * v113] - 65 < 0x1A));
                v143 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                          + WebCore::ContentSecurityPolicyDirectiveNames::reportURI[++v113]);
              }
              while (v142 == v143);
LABEL_273:
              if (v113 >= v92)
                goto LABEL_221;
            }
          }
        }
        if (WebCore::ContentSecurityPolicyDirectiveNames::reportTo)
          v94 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::reportTo);
        else
          v94 = 0;
        if (v94 == v92)
        {
          v122 = (unsigned __int8 *)*((_QWORD *)v327 + 1);
          if ((*((_BYTE *)v327 + 16) & 4) != 0)
          {
            if (!(_DWORD)v92)
              goto LABEL_221;
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v122) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                         + *WebCore::ContentSecurityPolicyDirectiveNames::reportTo))
            {
              v123 = 0;
              v124 = v122 + 1;
              while (v92 - 1 != v123)
              {
                v125 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v124[v123]);
                v126 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                          + WebCore::ContentSecurityPolicyDirectiveNames::reportTo[++v123]);
                if (v125 != v126)
                  goto LABEL_289;
              }
              goto LABEL_221;
            }
          }
          else
          {
            if (!(_DWORD)v92)
              goto LABEL_221;
            if ((*(unsigned __int16 *)v122 | (32 * (*(unsigned __int16 *)v122 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::reportTo))
            {
              v123 = 0;
              v147 = v122 + 2;
              do
              {
                if (v92 - 1 == v123)
                  goto LABEL_221;
                v148 = *(unsigned __int16 *)&v147[2 * v123] | (32
                                                             * (*(unsigned __int16 *)&v147[2 * v123] - 65 < 0x1A));
                v149 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                          + WebCore::ContentSecurityPolicyDirectiveNames::reportTo[++v123]);
              }
              while (v148 == v149);
LABEL_289:
              if (v123 >= v92)
                goto LABEL_221;
            }
          }
        }
      }
    }
    else
    {
      if (a5 != 3 || !v327 || *((_DWORD *)v327 + 1) != 25)
        goto LABEL_221;
      v90 = (unsigned __int8 *)*((_QWORD *)v327 + 1);
      if ((*((_BYTE *)v327 + 16) & 4) != 0)
      {
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v90) != v323
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v90[1]) != v319
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v90[2]) != v317
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v90[3]) != v322
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v90[4]) != v316
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v90[5]) != v315
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v90[6]) != v324
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v90[7]) != v320
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v90[8]) != v314
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v90[9]) != v313
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v90[10]) != v321
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v90[11]) != v324
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v90[12]) != v312
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v90[13]) != v323
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v90[14]) != v322
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v90[15]) != v324
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v90[16]) != v320
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v90[17]) != v322
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v90[18]) != v324
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v90[19]) != v311
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v90[20]) != v323
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v90[21]) != v324
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v90[22]) != v321
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v90[23]) != v310
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v90[24]) != v321)
        {
          goto LABEL_221;
        }
      }
      else
      {
        if (v323 != (unsigned __int16)(*(_WORD *)v90 | (32 * (*(unsigned __int16 *)v90 - 65 < 0x1A))))
          goto LABEL_221;
        v132 = 1u;
        do
        {
          if (v132 == 25)
            goto LABEL_207;
          v133 = *(unsigned __int16 *)&v90[2 * v132] | (32
                                                      * (*(unsigned __int16 *)&v90[2 * v132] - 65 < 0x1A));
          v134 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aUpgradeInsecur[v132++]);
        }
        while (v133 == v134);
        if ((unint64_t)(v132 - 2) < 0x18)
          goto LABEL_221;
      }
    }
LABEL_207:
    v95 = v328;
    v328 = 0;
    if (v95)
    {
      if (*(_DWORD *)v95 == 2)
        WTF::StringImpl::destroy(v95, v11);
      else
        *(_DWORD *)v95 -= 2;
    }
    result = v327;
    v327 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (const WTF::String *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
LABEL_231:
    v58 = v59;
  }
  while (v57);
LABEL_79:
  v50 = *(_QWORD *)(v12 + 136);
  if (!qword_1EE2E40F8)
  {
    if (v50)
    {
      v51 = 0;
      goto LABEL_85;
    }
    v54 = (uint64_t *)(v12 + 56);
    v304 = *(_QWORD *)(v12 + 56);
    if (!v304)
      goto LABEL_640;
    v51 = 0;
    v55 = (const WTF::String **)(v304 + 32);
    goto LABEL_92;
  }
  v11 = (WTF::StringImpl *)(qword_1EE2E40F8 - 1);
  if (qword_1EE2E40F8 == 1)
  {
    v51 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    v266 = *MEMORY[0x1E0CBEF70];
    v52 = *MEMORY[0x1E0CBEF70] + 2;
    *MEMORY[0x1E0CBEF70] = v52;
    if (v50)
    {
LABEL_84:
      *(_DWORD *)v51 = v52 + 2;
      goto LABEL_85;
    }
    v54 = (uint64_t *)(v12 + 56);
    v301 = *(_QWORD *)(v12 + 56);
    if (!v301)
    {
      if (v266)
        goto LABEL_639;
      v293 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      goto LABEL_731;
    }
    v55 = (const WTF::String **)(v301 + 32);
    goto LABEL_91;
  }
  result = (const WTF::String *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  v51 = v327;
  if (!v50)
  {
    v54 = (uint64_t *)(v12 + 56);
    v53 = *(_QWORD *)(v12 + 56);
    if (!v53)
    {
LABEL_96:
      v56 = 1;
      goto LABEL_598;
    }
    v55 = (const WTF::String **)(v53 + 32);
    if (!v327)
    {
LABEL_92:
      result = *v55;
      *v55 = v51;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (const WTF::String *)WTF::StringImpl::destroy(result, v11);
        else
          *(_DWORD *)result -= 2;
      }
      v50 = *v54;
      if (v50)
        goto LABEL_597;
      goto LABEL_96;
    }
    v52 = *(_DWORD *)v327;
LABEL_91:
    *(_DWORD *)v51 = v52 + 2;
    goto LABEL_92;
  }
  if (v327)
  {
    v52 = *(_DWORD *)v327;
    goto LABEL_84;
  }
LABEL_85:
  result = *(const WTF::String **)(v50 + 32);
  *(_QWORD *)(v50 + 32) = v51;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (const WTF::String *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_597:
  v56 = *(_BYTE *)(v50 + 116) != 0;
LABEL_598:
  if (!v51)
  {
LABEL_601:
    if (v56)
      goto LABEL_640;
LABEL_602:
    v253 = *(_QWORD *)(v12 + 136);
    if (qword_1EE2E40F8)
    {
      v11 = (WTF::StringImpl *)(qword_1EE2E40F8 - 1);
      if (qword_1EE2E40F8 == 1)
      {
        v51 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        v254 = *MEMORY[0x1E0CBEF70] + 2;
        *MEMORY[0x1E0CBEF70] = v254;
        if (v253)
        {
LABEL_607:
          *(_DWORD *)v51 = v254 + 2;
          goto LABEL_608;
        }
        v257 = (uint64_t *)(v12 + 56);
        v306 = *(_QWORD *)(v12 + 56);
        if (v306)
        {
          v258 = (WTF::StringImpl **)(v306 + 32);
LABEL_614:
          *(_DWORD *)v51 = v254 + 2;
          goto LABEL_615;
        }
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v51 = v327;
        if (v253)
        {
          if (!v327)
            goto LABEL_608;
          v254 = *(_DWORD *)v327;
          goto LABEL_607;
        }
        v257 = (uint64_t *)(v12 + 56);
        v256 = *(_QWORD *)(v12 + 56);
        if (v256)
        {
          v258 = (WTF::StringImpl **)(v256 + 32);
          if (!v327)
            goto LABEL_615;
          v254 = *(_DWORD *)v327;
          goto LABEL_614;
        }
      }
    }
    else
    {
      if (v253)
      {
        v51 = 0;
LABEL_608:
        v255 = *(WTF::StringImpl **)(v253 + 32);
        *(_QWORD *)(v253 + 32) = v51;
        if (v255)
        {
          if (*(_DWORD *)v255 == 2)
            WTF::StringImpl::destroy(v255, v11);
          else
            *(_DWORD *)v255 -= 2;
        }
LABEL_619:
        v260 = *(_QWORD *)(v253 + 16);
        if (v260)
        {
          v261 = *(_DWORD *)(v260 + 4);
          *(_DWORD *)v260 += 2;
          if (v261 < 0)
            goto LABEL_807;
        }
        else
        {
          v261 = 0;
        }
        v262 = __OFADD__(v261, 3);
        v263 = v261 + 3;
        if (!v262 && !__OFADD__(v263, 153))
        {
          v264 = !v260 || (*(_BYTE *)(v260 + 16) & 4) != 0;
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v263 + 153), v264, (int8x16_t *)"Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of script in the following Content Security Policy directive: \"", 0x99u, v260, (int8x16_t *)"\".\n", 3u, &v327);
          result = v327;
          if (!v327)
          {
LABEL_812:
            __break(0xC471u);
            JUMPOUT(0x1943CD174);
          }
          *(_DWORD *)v327 += 2;
          v265 = *(WTF::StringImpl **)(v12 + 232);
          *(_QWORD *)(v12 + 232) = result;
          if (v265)
          {
            if (*(_DWORD *)v265 == 2)
            {
              WTF::StringImpl::destroy(v265, v11);
              result = v327;
              v327 = 0;
              if (!result)
                goto LABEL_634;
              goto LABEL_632;
            }
            *(_DWORD *)v265 -= 2;
          }
          v327 = 0;
LABEL_632:
          if (*(_DWORD *)result == 2)
            result = (const WTF::String *)WTF::StringImpl::destroy(result, v11);
          else
            *(_DWORD *)result -= 2;
LABEL_634:
          if (v260)
          {
            if (*(_DWORD *)v260 == 2)
            {
              result = (const WTF::String *)WTF::StringImpl::destroy((WTF::StringImpl *)v260, v11);
              if (!v51)
                goto LABEL_640;
              goto LABEL_638;
            }
            *(_DWORD *)v260 -= 2;
          }
          if (!v51)
            goto LABEL_640;
LABEL_638:
          v266 = *(_DWORD *)v51 - 2;
          if (*(_DWORD *)v51 != 2)
          {
LABEL_639:
            *(_DWORD *)v51 = v266;
            goto LABEL_640;
          }
          v293 = v51;
LABEL_731:
          result = (const WTF::String *)WTF::StringImpl::destroy(v293, v11);
          v12 = *v326;
          goto LABEL_640;
        }
LABEL_807:
        v327 = 0;
        goto LABEL_812;
      }
      v257 = (uint64_t *)(v12 + 56);
      v308 = *(_QWORD *)(v12 + 56);
      if (v308)
      {
        v51 = 0;
        v258 = (WTF::StringImpl **)(v308 + 32);
LABEL_615:
        v259 = *v258;
        *v258 = v51;
        if (v259)
        {
          if (*(_DWORD *)v259 == 2)
            WTF::StringImpl::destroy(v259, v11);
          else
            *(_DWORD *)v259 -= 2;
        }
        goto LABEL_618;
      }
      v51 = 0;
    }
LABEL_618:
    v253 = *v257;
    goto LABEL_619;
  }
  if (*(_DWORD *)v51 != 2)
  {
    *(_DWORD *)v51 -= 2;
    goto LABEL_601;
  }
  result = (const WTF::String *)WTF::StringImpl::destroy(v51, v11);
  v12 = *v326;
  if (!v56)
    goto LABEL_602;
LABEL_640:
  v267 = *(_QWORD *)(v12 + 136);
  if (!qword_1EE2E40F8)
  {
    if (v267)
    {
      v268 = 0;
      goto LABEL_646;
    }
    v271 = (uint64_t *)(v12 + 56);
    v305 = *(_QWORD *)(v12 + 56);
    if (!v305)
      goto LABEL_705;
    v268 = 0;
    v272 = (const WTF::String **)(v305 + 32);
    goto LABEL_653;
  }
  v11 = (WTF::StringImpl *)(qword_1EE2E40F8 - 1);
  if (qword_1EE2E40F8 == 1)
  {
    v268 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    v302 = *MEMORY[0x1E0CBEF70];
    v269 = *MEMORY[0x1E0CBEF70] + 2;
    *MEMORY[0x1E0CBEF70] = v269;
    if (v267)
    {
LABEL_645:
      *(_DWORD *)v268 = v269 + 2;
      goto LABEL_646;
    }
    v271 = (uint64_t *)(v12 + 56);
    v303 = *(_QWORD *)(v12 + 56);
    if (!v303)
    {
      if (v302)
      {
        *(_DWORD *)v268 = v302;
        goto LABEL_705;
      }
      v294 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      goto LABEL_738;
    }
    v272 = (const WTF::String **)(v303 + 32);
    goto LABEL_652;
  }
  result = (const WTF::String *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  v268 = v327;
  if (!v267)
  {
    v271 = (uint64_t *)(v12 + 56);
    v270 = *(_QWORD *)(v12 + 56);
    if (!v270)
    {
LABEL_657:
      v273 = 1;
      goto LABEL_662;
    }
    v272 = (const WTF::String **)(v270 + 32);
    if (!v327)
    {
LABEL_653:
      result = *v272;
      *v272 = v268;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (const WTF::String *)WTF::StringImpl::destroy(result, v11);
        else
          *(_DWORD *)result -= 2;
      }
      v267 = *v271;
      if (v267)
        goto LABEL_661;
      goto LABEL_657;
    }
    v269 = *(_DWORD *)v327;
LABEL_652:
    *(_DWORD *)v268 = v269 + 2;
    goto LABEL_653;
  }
  if (v327)
  {
    v269 = *(_DWORD *)v327;
    goto LABEL_645;
  }
LABEL_646:
  result = *(const WTF::String **)(v267 + 32);
  *(_QWORD *)(v267 + 32) = v268;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (const WTF::String *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_661:
  v273 = *(_BYTE *)(v267 + 117) != 0;
LABEL_662:
  if (!v268)
  {
LABEL_665:
    if (v273)
      goto LABEL_705;
LABEL_666:
    v274 = *(_QWORD *)(v12 + 136);
    if (qword_1EE2E40F8)
    {
      v11 = (WTF::StringImpl *)(qword_1EE2E40F8 - 1);
      if (qword_1EE2E40F8 == 1)
      {
        v275 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        v276 = *MEMORY[0x1E0CBEF70] + 2;
        *MEMORY[0x1E0CBEF70] = v276;
        if (v274)
        {
LABEL_671:
          *(_DWORD *)v275 = v276 + 2;
          goto LABEL_672;
        }
        v279 = (uint64_t *)(v12 + 56);
        v307 = *(_QWORD *)(v12 + 56);
        if (v307)
        {
          v280 = (WTF::StringImpl **)(v307 + 32);
LABEL_678:
          *(_DWORD *)v275 = v276 + 2;
          goto LABEL_679;
        }
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v275 = v327;
        if (v274)
        {
          if (!v327)
            goto LABEL_672;
          v276 = *(_DWORD *)v327;
          goto LABEL_671;
        }
        v279 = (uint64_t *)(v12 + 56);
        v278 = *(_QWORD *)(v12 + 56);
        if (v278)
        {
          v280 = (WTF::StringImpl **)(v278 + 32);
          if (!v327)
            goto LABEL_679;
          v276 = *(_DWORD *)v327;
          goto LABEL_678;
        }
      }
    }
    else
    {
      if (v274)
      {
        v275 = 0;
LABEL_672:
        v277 = *(WTF::StringImpl **)(v274 + 32);
        *(_QWORD *)(v274 + 32) = v275;
        if (v277)
        {
          if (*(_DWORD *)v277 == 2)
            WTF::StringImpl::destroy(v277, v11);
          else
            *(_DWORD *)v277 -= 2;
        }
LABEL_683:
        v282 = *(_QWORD *)(v274 + 16);
        if (v282)
        {
          v283 = *(_DWORD *)(v282 + 4);
          *(_DWORD *)v282 += 2;
          if (v283 < 0)
            goto LABEL_809;
        }
        else
        {
          v283 = 0;
        }
        v262 = __OFADD__(v283, 3);
        v284 = v283 + 3;
        if (!v262 && !__OFADD__(v284, 171))
        {
          v285 = !v282 || (*(_BYTE *)(v282 + 16) & 4) != 0;
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v284 + 171), v285, (int8x16_t *)"Refused to create a WebAssembly object because 'unsafe-eval' or 'wasm-unsafe-eval' is not an allowed source of script in the following Content Security Policy directive: \"", 0xABu, v282, (int8x16_t *)"\".\n", 3u, &v327);
          result = v327;
          if (v327)
          {
            *(_DWORD *)v327 += 2;
            v286 = *(WTF::StringImpl **)(v12 + 240);
            *(_QWORD *)(v12 + 240) = result;
            if (v286)
            {
              if (*(_DWORD *)v286 == 2)
              {
                WTF::StringImpl::destroy(v286, v11);
                result = v327;
                v327 = 0;
                if (!result)
                  goto LABEL_698;
                goto LABEL_696;
              }
              *(_DWORD *)v286 -= 2;
            }
            v327 = 0;
LABEL_696:
            if (*(_DWORD *)result == 2)
              result = (const WTF::String *)WTF::StringImpl::destroy(result, v11);
            else
              *(_DWORD *)result -= 2;
LABEL_698:
            if (v282)
            {
              if (*(_DWORD *)v282 == 2)
              {
                result = (const WTF::String *)WTF::StringImpl::destroy((WTF::StringImpl *)v282, v11);
                if (!v275)
                  goto LABEL_704;
LABEL_702:
                if (*(_DWORD *)v275 != 2)
                {
                  *(_DWORD *)v275 -= 2;
                  goto LABEL_704;
                }
                v294 = v275;
LABEL_738:
                result = (const WTF::String *)WTF::StringImpl::destroy(v294, v11);
                goto LABEL_704;
              }
              *(_DWORD *)v282 -= 2;
            }
            if (!v275)
            {
LABEL_704:
              v12 = *v326;
              goto LABEL_705;
            }
            goto LABEL_702;
          }
LABEL_810:
          __break(0xC471u);
          JUMPOUT(0x1943CD180);
        }
LABEL_809:
        v327 = 0;
        goto LABEL_810;
      }
      v279 = (uint64_t *)(v12 + 56);
      v309 = *(_QWORD *)(v12 + 56);
      if (v309)
      {
        v275 = 0;
        v280 = (WTF::StringImpl **)(v309 + 32);
LABEL_679:
        v281 = *v280;
        *v280 = v275;
        if (v281)
        {
          if (*(_DWORD *)v281 == 2)
            WTF::StringImpl::destroy(v281, v11);
          else
            *(_DWORD *)v281 -= 2;
        }
        goto LABEL_682;
      }
      v275 = 0;
    }
LABEL_682:
    v274 = *v279;
    goto LABEL_683;
  }
  if (*(_DWORD *)v268 != 2)
  {
    *(_DWORD *)v268 -= 2;
    goto LABEL_665;
  }
  result = (const WTF::String *)WTF::StringImpl::destroy(v268, v11);
  v12 = *v326;
  if (!v273)
    goto LABEL_666;
LABEL_705:
  if (!*(_BYTE *)(v12 + 17) || *(_DWORD *)(v12 + 212) || *(_DWORD *)(v12 + 228))
    return result;
  a3 = *(_QWORD *)a3;
  if (!a3)
  {
    v287 = 0;
    v288 = v325;
    goto LABEL_710;
  }
  v287 = *(_DWORD *)(a3 + 4);
  *(_DWORD *)a3 += 2;
  v288 = v325;
  if (v287 < 0)
    goto LABEL_811;
LABEL_710:
  v262 = __OFADD__(v287, 211);
  v289 = v287 + 211;
  if (v262 || __OFADD__(v289, 29))
  {
LABEL_811:
    v331 = 0;
    goto LABEL_812;
  }
  v290 = !a3 || (*(_BYTE *)(a3 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v289 + 29), v290, (int8x16_t *)"The Content Security Policy '", 0x1Du, a3, (int8x16_t *)"' was delivered in report-only mode, but does not specify a 'report-to'; the policy will have no effect"
                 ". Please either add a 'report-to' directive, or deliver the policy via the 'Content-Security-Policy' header.",
    0xD3u,
    &v331);
  if (!v331)
    goto LABEL_812;
  v330 = 0;
  if (*((_DWORD *)v331 + 1) && *(_BYTE *)(v288 + 181))
  {
    v292 = *(void (****)(_QWORD, uint64_t, uint64_t, const WTF::String **, _QWORD))(v288 + 16);
    if (v292)
    {
      (**v292)(v292, 8, 2, &v331, 0);
    }
    else
    {
      v295 = *(_QWORD *)(v288 + 8);
      if (v295)
      {
        v296 = *(_QWORD *)(v295 + 8);
        if (v296)
        {
          v327 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, const WTF::String **, const WTF::String **, _QWORD, _QWORD, WTF::StringImpl **, _QWORD, _QWORD))(*(_QWORD *)(v296 - 96) + 416))(v296 - 96, 8, 2, &v331, &v330, 0, 0, &v327, 0, 0);
          v297 = v327;
          v327 = 0;
          if (v297)
          {
            if (*(_DWORD *)v297 == 1)
              goto LABEL_766;
            --*(_DWORD *)v297;
          }
LABEL_748:
          v298 = v330;
          v330 = 0;
          if (v298)
          {
            if (*(_DWORD *)v298 == 2)
              WTF::StringImpl::destroy(v298, v291);
            else
              *(_DWORD *)v298 -= 2;
          }
        }
      }
    }
  }
  result = v331;
  v331 = 0;
  if (!result)
  {
LABEL_754:
    if (!a3)
      return result;
    goto LABEL_755;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_754;
  }
  result = (const WTF::String *)WTF::StringImpl::destroy(result, v291);
  if (a3)
  {
LABEL_755:
    if (*(_DWORD *)a3 == 2)
      return (const WTF::String *)WTF::StringImpl::destroy((WTF::StringImpl *)a3, v291);
    else
      *(_DWORD *)a3 -= 2;
  }
  return result;
}

char *WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v13 = *a1;
        return &v13[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (!(v10 >> 29))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
        memcpy(v11, v5, 8 * v6);
        v13 = *a1;
        if (v5)
        {
          if (v13 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v12);
          v13 = *a1;
        }
        return &v13[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x1943CD2D4);
    }
  }
  v14 = *((unsigned int *)a1 + 2);
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= a2)
    v17 = a2;
  else
    v17 = v16;
  if (v17 > v14)
  {
    if (v17 >> 29)
      goto LABEL_30;
    v18 = *((unsigned int *)a1 + 3);
    v19 = (char *)WTF::fastMalloc((WTF *)(8 * v17));
    *((_DWORD *)a1 + 2) = v17;
    *a1 = v19;
    memcpy(v19, v5, 8 * v18);
    if (v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v20);
    }
  }
  return (char *)v3;
}

unsigned int *WebCore::SecurityContext::checkedContentSecurityPolicy@<X0>(WebCore::SecurityContext *this@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *result;
  unsigned int v4;

  result = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy(this);
  *a2 = result;
  if (result)
  {
    do
      v4 = __ldaxr(result);
    while (__stlxr(v4 + 1, result));
  }
  return result;
}

uint64_t WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForUnsafeEval(WebCore::ContentSecurityPolicyDirectiveList *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;

  v3 = *((_QWORD *)this + 17);
  if (qword_1EE2E40F8)
  {
    a2 = (WTF::StringImpl *)(qword_1EE2E40F8 - 1);
    if (qword_1EE2E40F8 == 1)
    {
      v4 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      v5 = *MEMORY[0x1E0CBEF70] + 2;
      *MEMORY[0x1E0CBEF70] = v5;
      if (v3)
      {
LABEL_6:
        *(_DWORD *)v4 = v5 + 2;
        goto LABEL_7;
      }
      v8 = (uint64_t *)((char *)this + 56);
      v13 = *((_QWORD *)this + 7);
      if (v13)
      {
        v10 = (WTF::StringImpl **)(v13 + 32);
LABEL_14:
        *(_DWORD *)v4 = v5 + 2;
        goto LABEL_15;
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v4 = v15;
      if (v3)
      {
        if (!v15)
          goto LABEL_7;
        v5 = *(_DWORD *)v15;
        goto LABEL_6;
      }
      v9 = *((_QWORD *)this + 7);
      v8 = (uint64_t *)((char *)this + 56);
      v7 = v9;
      if (v9)
      {
        v10 = (WTF::StringImpl **)(v7 + 32);
        if (!v15)
          goto LABEL_15;
        v5 = *(_DWORD *)v15;
        goto LABEL_14;
      }
    }
LABEL_18:
    v3 = *v8;
LABEL_19:
    if (!v4)
      goto LABEL_22;
    goto LABEL_20;
  }
  if (!v3)
  {
    v8 = (uint64_t *)((char *)this + 56);
    v14 = *((_QWORD *)this + 7);
    if (v14)
    {
      v4 = 0;
      v10 = (WTF::StringImpl **)(v14 + 32);
LABEL_15:
      v11 = *v10;
      *v10 = v4;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      goto LABEL_18;
    }
    v4 = 0;
    goto LABEL_18;
  }
  v4 = 0;
LABEL_7:
  v6 = *(WTF::StringImpl **)(v3 + 32);
  *(_QWORD *)(v3 + 32) = v4;
  if (!v6)
    goto LABEL_19;
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::destroy(v6, a2);
    if (!v4)
      goto LABEL_22;
  }
  else
  {
    *(_DWORD *)v6 -= 2;
    if (!v4)
      goto LABEL_22;
  }
LABEL_20:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, a2);
  else
    *(_DWORD *)v4 -= 2;
LABEL_22:
  if (!v3 || *(_BYTE *)(v3 + 116))
    return 0;
  return v3;
}

WebCore::ContentSecurityPolicyResponseHeaders *WebCore::ContentSecurityPolicyResponseHeaders::ContentSecurityPolicyResponseHeaders(WebCore::ContentSecurityPolicyResponseHeaders *this, const WebCore::ResourceResponse *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  char v22;
  WTF::StringImpl *v23;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)((char *)this + 13) = 0;
  WebCore::ResourceResponseBase::httpHeaderField((uint64_t)a2, 24, &v23);
  v4 = v23;
  if (v23 && *((_DWORD *)v23 + 1))
  {
    *(_DWORD *)v23 += 2;
    v21 = v4;
    v22 = 1;
    v12 = *((unsigned int *)this + 3);
    if ((_DWORD)v12 == *((_DWORD *)this + 2))
    {
      WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>>((uint64_t)this, (unint64_t)&v21);
      v14 = v21;
      v21 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
    else
    {
      v19 = *(_QWORD *)this + 16 * v12;
      *(_QWORD *)v19 = v4;
      *(_BYTE *)(v19 + 8) = 1;
      *((_DWORD *)this + 3) = v12 + 1;
    }
  }
  WebCore::ResourceResponseBase::httpHeaderField((uint64_t)a2, 25, &v21);
  v6 = v21;
  v21 = 0;
  v7 = v23;
  v23 = v6;
  if (v7)
  {
    v8 = *(_DWORD *)v7 - 2;
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::destroy(v7, v5);
      v7 = v21;
      v21 = 0;
      if (!v7)
        goto LABEL_5;
      v8 = *(_DWORD *)v7 - 2;
      if (*(_DWORD *)v7 == 2)
      {
        WTF::StringImpl::destroy(v7, v18);
        goto LABEL_5;
      }
    }
    *(_DWORD *)v7 = v8;
LABEL_5:
    v6 = v23;
  }
  if (v6 && *((_DWORD *)v6 + 1))
  {
    *(_DWORD *)v6 += 2;
    v21 = v6;
    v22 = 0;
    v15 = *((unsigned int *)this + 3);
    if ((_DWORD)v15 == *((_DWORD *)this + 2))
    {
      WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>>((uint64_t)this, (unint64_t)&v21);
      v17 = v21;
      v21 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    else
    {
      v20 = *(_QWORD *)this + 16 * v15;
      *(_QWORD *)v20 = v6;
      *(_BYTE *)(v20 + 8) = 0;
      *((_DWORD *)this + 3) = v15 + 1;
    }
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1);
  *((_DWORD *)this + 4) = *((__int16 *)a2 + 68);
  v10 = v23;
  v23 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  return this;
}

uint64_t WebCore::Document::ensureCachedResourceLoader(WebCore::Document *this, void *a2)
{
  WebCore::CachedResourceLoader *v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  WebCore::CachedResourceLoader *v13;
  unsigned int *v14;
  void *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v21;
  void *v22;
  uint64_t v23;
  WTF *v24;
  _QWORD *v25;
  _QWORD *v26;

  v4 = *((_QWORD *)this + 66);
  if (!v4)
    goto LABEL_13;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_13;
  v6 = (unsigned int *)(v5 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(v5 + 280);
  v9 = 88;
  if (!*(_BYTE *)(v8 + 80))
    v9 = 96;
  v10 = *(_QWORD *)(v8 + v9);
  if (v10)
  {
    ++*(_DWORD *)(v10 + 24);
    v2 = *(WebCore::CachedResourceLoader **)(v10 + 72);
    ++*(_DWORD *)v2;
    if (*(_DWORD *)(v10 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    else
      --*(_DWORD *)(v10 + 24);
  }
  do
  {
    v11 = __ldaxr(v6);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v6));
  if (!v12)
  {
    atomic_store(1u, v6);
    v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v25 = off_1E31FE290;
    v25[1] = v6;
    v26 = v25;
    WTF::ensureOnMainThread();
    if (v26)
      (*(void (**)(_QWORD *))(*v26 + 8))(v26);
  }
  if (!v10)
  {
LABEL_13:
    v2 = (WebCore::CachedResourceLoader *)WTF::fastMalloc((WTF *)0x118);
    WebCore::CachedResourceLoader::CachedResourceLoader(v2, 0);
  }
  v13 = (WebCore::CachedResourceLoader *)*((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = v2;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
    {
      WebCore::CachedResourceLoader::~CachedResourceLoader(v13, a2);
      WTF::fastFree(v21, v22);
      v2 = (WebCore::CachedResourceLoader *)*((_QWORD *)this + 90);
    }
    else
    {
      --*(_DWORD *)v13;
    }
  }
  v14 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
  if (v14)
  {
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 + 1, v14));
  }
  v17 = *((_QWORD *)v2 + 9);
  *((_QWORD *)v2 + 9) = v14;
  if (v17)
  {
    do
    {
      v18 = __ldaxr((unsigned int *)v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, (unsigned int *)v17));
    if (!v19)
    {
      atomic_store(1u, (unsigned int *)v17);
      v23 = *(unsigned int *)(v17 + 28);
      if ((_DWORD)v23)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v17 + 16), (WTF::StringImpl *)(*(_QWORD *)(v17 + 16) + 32 * v23));
      v24 = *(WTF **)(v17 + 16);
      if (v24)
      {
        *(_QWORD *)(v17 + 16) = 0;
        *(_DWORD *)(v17 + 24) = 0;
        WTF::fastFree(v24, v15);
      }
      WTF::fastFree((WTF *)v17, v15);
    }
  }
  return *((_QWORD *)this + 90);
}

_QWORD *WebCore::Document::initContentSecurityPolicy(_QWORD *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v21;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unsigned int *v31;
  WTF::StringImpl *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v39;
  unsigned int v41;
  WTF::StringImpl *v42;
  unsigned int *v43;
  unsigned int v44;
  WebCore::SecurityOrigin *v45;
  WebCore::SecurityOrigin *v46;
  WTF::StringImpl *v47;
  const WebCore::SecurityOrigin *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v55;
  unsigned int v57;
  WTF::StringImpl *v58;
  __int128 v59;
  __int128 v60;
  WebCore::ContentSecurityPolicy *v61;

  v2 = this[66];
  if (!v2)
    return this;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return this;
  v4 = this;
  v5 = *(_QWORD *)(v3 + 56);
  if (!v5)
    goto LABEL_4;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
  {
    LOBYTE(v5) = 0;
    goto LABEL_5;
  }
  if (*(_BYTE *)(v6 + 144))
  {
    LOBYTE(v5) = 0;
LABEL_4:
    v6 = 0;
LABEL_5:
    v7 = 1;
    goto LABEL_6;
  }
  v11 = (unsigned int *)(v6 + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(this + 24));
  v14 = v13;
  if (v13)
  {
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 + 1, v13));
  }
  v16 = *(_QWORD *)(v6 + 296);
  if (v16)
    *(_DWORD *)(v16 + 24) += 2;
  v17 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v16 + 192));
  v18 = v17;
  if (v17)
  {
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 + 1, v17));
  }
  this = (_QWORD *)WebCore::ContentSecurityPolicy::copyUpgradeInsecureRequestStateFrom((uint64_t)v14, (uint64_t)v17, 0);
  if (!atomic_load(v18))
  {
    __break(0xC471u);
    JUMPOUT(0x1943CDC58);
  }
  do
    v21 = __ldaxr(v18);
  while (__stlxr(v21 - 1, v18));
  if (v16)
  {
    if (*(_DWORD *)(v16 + 24) == 2)
    {
      if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        this = (_QWORD *)WebCore::Node::removedLastRef((WebCore::Node *)v16);
    }
    else
    {
      *(_DWORD *)(v16 + 24) -= 2;
    }
  }
  if (v14)
  {
    if (!atomic_load(v14))
    {
      __break(0xC471u);
      JUMPOUT(0x1943CDC78);
    }
    do
      v23 = __ldaxr(v14);
    while (__stlxr(v23 - 1, v14));
  }
  v7 = 0;
  LOBYTE(v5) = 1;
LABEL_6:
  if ((*((_WORD *)v4 + 1679) & 8) != 0)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v4[66] + 8) + 160);
    if (v24 && (v25 = *(_QWORD *)(v24 + 8)) != 0 && !*(_BYTE *)(v25 + 144))
    {
      v43 = (unsigned int *)(v25 + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 + 1, v43));
      if ((v5 & 1) == 0)
      {
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(v25 + 296) + 192), a2);
        v46 = v45;
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v4 + 24), v47);
        if (!WebCore::SecurityOrigin::isSameOriginDomain(v46, v48))
        {
LABEL_85:
          this = WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v25 + 8));
          goto LABEL_7;
        }
      }
      v26 = 0;
    }
    else
    {
      if ((v5 & 1) == 0)
        goto LABEL_7;
      v25 = 0;
      v26 = 1;
    }
    v27 = (WTF::StringImpl *)v4[92];
    if (v27)
      *(_DWORD *)v27 += 2;
    v58 = v27;
    v59 = *(_OWORD *)(v4 + 93);
    v60 = *(_OWORD *)(v4 + 95);
    v28 = WTF::fastMalloc((WTF *)0xF0);
    v61 = (WebCore::ContentSecurityPolicy *)WebCore::ContentSecurityPolicy::ContentSecurityPolicy(v28, (uint64_t *)&v58, (uint64_t)(v4 + 24));
    WebCore::SecurityContext::setContentSecurityPolicy((uint64_t)(v4 + 24), (WTF::StringImpl *)&v61);
    std::unique_ptr<WebCore::ContentSecurityPolicy>::~unique_ptr[abi:sn180100](&v61, v29);
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, v30);
      else
        *(_DWORD *)v58 -= 2;
    }
    v31 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v4 + 24));
    v32 = (WTF::StringImpl *)v31;
    if (v25)
    {
      if (v31)
      {
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 + 1, v31));
      }
      v34 = *(_QWORD *)(v25 + 296);
      if (v34)
        *(_DWORD *)(v34 + 24) += 2;
      v35 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v34 + 192));
      v36 = v35;
      if (v35)
      {
        do
          v37 = __ldaxr(v35);
        while (__stlxr(v37 + 1, v35));
      }
      this = WebCore::ContentSecurityPolicy::createPolicyForPluginDocumentFrom(v32, (const WebCore::ContentSecurityPolicy *)v35);
      if (!atomic_load(v36))
      {
        __break(0xC471u);
        JUMPOUT(0x1943CDCC0);
      }
      do
        v39 = __ldaxr(v36);
      while (__stlxr(v39 - 1, v36));
      if (v34)
      {
        if (*(_DWORD *)(v34 + 24) == 2)
        {
          if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
            this = (_QWORD *)WebCore::Node::removedLastRef((WebCore::Node *)v34);
        }
        else
        {
          *(_DWORD *)(v34 + 24) -= 2;
        }
      }
      if (v32)
      {
        if (!atomic_load((unsigned int *)v32))
        {
          __break(0xC471u);
          JUMPOUT(0x1943CDCE0);
        }
        do
          v41 = __ldaxr((unsigned int *)v32);
        while (__stlxr(v41 - 1, (unsigned int *)v32));
      }
      if ((v26 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      if (v31)
      {
        do
          v49 = __ldaxr(v31);
        while (__stlxr(v49 + 1, v31));
      }
      v50 = *(_QWORD *)(v6 + 296);
      if (v50)
        *(_DWORD *)(v50 + 24) += 2;
      v51 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v50 + 192));
      if (v51)
      {
        v52 = v51;
        do
          v53 = __ldaxr(v51);
        while (__stlxr(v53 + 1, v51));
        this = WebCore::ContentSecurityPolicy::copyStateFrom(v32, (uint64_t)v51, 0);
        if (!atomic_load(v52))
        {
          __break(0xC471u);
          JUMPOUT(0x1943CDD14);
        }
        do
          v55 = __ldaxr(v52);
        while (__stlxr(v55 - 1, v52));
      }
      else
      {
        this = WebCore::ContentSecurityPolicy::copyStateFrom(v32, 0, 0);
      }
      if (v50)
      {
        if (*(_DWORD *)(v50 + 24) == 2)
        {
          if ((*(_WORD *)(v50 + 30) & 0x400) == 0)
            this = (_QWORD *)WebCore::Node::removedLastRef((WebCore::Node *)v50);
        }
        else
        {
          *(_DWORD *)(v50 + 24) -= 2;
        }
      }
      if (v32)
      {
        if (!atomic_load((unsigned int *)v32))
        {
          __break(0xC471u);
          JUMPOUT(0x1943CDD34);
        }
        do
          v57 = __ldaxr((unsigned int *)v32);
        while (__stlxr(v57 - 1, (unsigned int *)v32));
      }
      if ((v26 & 1) != 0)
        goto LABEL_7;
      v25 = 0;
    }
    goto LABEL_85;
  }
LABEL_7:
  if ((v7 & 1) == 0)
  {
    v8 = (unsigned int *)(v6 + 8);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      v42 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v42 = off_1E31FE290;
      *((_QWORD *)v42 + 1) = v8;
      v58 = v42;
      WTF::ensureOnMainThread();
      this = v58;
      v58 = 0;
      if (this)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
    }
  }
  return this;
}

WTF::StringImpl *WebCore::FrameLoader::setFirstPartyForCookies(WebCore::FrameLoader *this, const WTF::URL *a2, const WTF::StringImpl *a3)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  WTF::StringImpl *result;
  unsigned int v11;
  unsigned int v12;
  __int128 *v13;
  WebCore::FrameLoader *v14;
  int v15;
  WebCore::FrameLoader *v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  __int128 v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  WebCore::FrameLoader *v28;
  uint64_t v29;
  unsigned int *v31;
  unsigned int v32;
  char v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  WebCore::FrameLoader *v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  WTF::StringImpl *v44;
  __int128 v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  WebCore::FrameLoader *v49;
  uint64_t v50;
  unsigned int *v52;
  unsigned int v53;
  char v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  WTF::URL *v58;
  uint64_t isAboutSrcDoc;
  const WTF::StringImpl **v60;
  const WTF::StringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;

  v5 = (unsigned int *)((char *)this + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (this)
  {
    v13 = (__int128 *)((char *)a2 + 8);
    v14 = this;
    while (1)
    {
      v15 = *((unsigned __int8 *)v14 + 144);
      v16 = *((_BYTE *)v14 + 144) ? 0 : v14;
      if (!v16)
        break;
      v17 = (unsigned int *)((char *)v16 + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
      if (!v15)
        goto LABEL_22;
LABEL_32:
      v24 = (unsigned int *)((char *)v16 + 8);
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, v24);
        v64 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v64 = off_1E31FE290;
        *((_QWORD *)v64 + 1) = v24;
        v74 = v64;
        WTF::ensureOnMainThread();
        v65 = v74;
        v74 = 0;
        if (v65)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v65 + 8))(v65);
      }
LABEL_35:
      v27 = (unsigned int *)*((_QWORD *)v14 + 11);
      if (v27)
        goto LABEL_44;
      v28 = *(WebCore::FrameLoader **)(*((_QWORD *)v14 + 6) + 8);
      if (v28 != this)
      {
        v27 = (unsigned int *)*((_QWORD *)v14 + 9);
        if (v27)
        {
LABEL_44:
          v31 = v27 + 2;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 + 1, v31));
          v33 = 0;
          goto LABEL_48;
        }
        while (1)
        {
          v29 = *((_QWORD *)v28 + 7);
          if (!v29)
            break;
          v28 = *(WebCore::FrameLoader **)(v29 + 8);
          if (v28 == this || v28 == 0)
            break;
          v27 = (unsigned int *)*((_QWORD *)v28 + 9);
          if (v27)
            goto LABEL_44;
        }
      }
      v27 = 0;
      v33 = 1;
LABEL_48:
      v34 = (unsigned int *)((char *)v14 + 8);
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        atomic_store(1u, v34);
        v66 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v66 = off_1E31FE290;
        *((_QWORD *)v66 + 1) = v34;
        v74 = v66;
        WTF::ensureOnMainThread();
        v67 = v74;
        v74 = 0;
        if (v67)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v67 + 8))(v67);
      }
      v14 = (WebCore::FrameLoader *)v27;
      if ((v33 & 1) != 0)
      {
        WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v73, a2);
        do
          v37 = __ldaxr(v5);
        while (__stlxr(v37 + 1, v5));
        v38 = this;
        while (2)
        {
          if (*((_BYTE *)v38 + 144))
            goto LABEL_69;
          v39 = (unsigned int *)((char *)v38 + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 + 1, v39));
          v41 = *((_QWORD *)v38 + 37);
          v42 = *(_QWORD *)(v41 + 736);
          if (!v42)
          {
LABEL_59:
            *(_DWORD *)(v41 + 24) += 2;
            goto LABEL_60;
          }
          if (!*(_DWORD *)(v42 + 4)
            || (v58 = (WTF::URL *)(v41 + 736), (WTF::URL::isAboutBlank(v58) & 1) != 0)
            || (isAboutSrcDoc = WTF::URL::isAboutSrcDoc(v58), (isAboutSrcDoc & 1) != 0)
            || (v60 = (const WTF::StringImpl **)WTF::aboutBlankURL((WTF *)isAboutSrcDoc),
                (WTF::equalIgnoringASCIICase(*(WTF **)v58, *v60, v61) & 1) != 0)
            || (v62 = WTF::URL::host((WTF::URL *)(*((_QWORD *)v38 + 37) + 736)),
                WebCore::RegistrableDomain::matches(&v73, v62, v63)))
          {
            v41 = *((_QWORD *)v38 + 37);
            if (v41)
              goto LABEL_59;
LABEL_60:
            v43 = *(_DWORD **)a2;
            if (*(_QWORD *)a2)
              *v43 += 2;
            v44 = *(WTF::StringImpl **)(v41 + 1048);
            *(_QWORD *)(v41 + 1048) = v43;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2)
                WTF::StringImpl::destroy(v44, v8);
              else
                *(_DWORD *)v44 -= 2;
            }
            v45 = *v13;
            *(_OWORD *)(v41 + 1072) = *(_OWORD *)((char *)a2 + 24);
            *(_OWORD *)(v41 + 1056) = v45;
            if (*(_DWORD *)(v41 + 24) == 2)
            {
              if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v41);
            }
            else
            {
              *(_DWORD *)(v41 + 24) -= 2;
            }
          }
          do
          {
            v46 = __ldaxr(v39);
            v47 = v46 - 1;
          }
          while (__stlxr(v47, v39));
          if (!v47)
          {
            atomic_store(1u, v39);
            v68 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v68 = off_1E31FE290;
            *((_QWORD *)v68 + 1) = v39;
            v74 = v68;
            WTF::ensureOnMainThread();
            v69 = v74;
            v74 = 0;
            if (v69)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v69 + 8))(v69);
          }
LABEL_69:
          v48 = (unsigned int *)*((_QWORD *)v38 + 11);
          if (v48)
            goto LABEL_78;
          v49 = *(WebCore::FrameLoader **)(*((_QWORD *)v38 + 6) + 8);
          if (v49 != this)
          {
            v48 = (unsigned int *)*((_QWORD *)v38 + 9);
            if (v48)
            {
LABEL_78:
              v52 = v48 + 2;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 + 1, v52));
              v54 = 0;
              goto LABEL_82;
            }
            while (1)
            {
              v50 = *((_QWORD *)v49 + 7);
              if (!v50)
                break;
              v49 = *(WebCore::FrameLoader **)(v50 + 8);
              if (v49 == this || v49 == 0)
                break;
              v48 = (unsigned int *)*((_QWORD *)v49 + 9);
              if (v48)
                goto LABEL_78;
            }
          }
          v48 = 0;
          v54 = 1;
LABEL_82:
          v55 = (unsigned int *)((char *)v38 + 8);
          do
          {
            v56 = __ldaxr(v55);
            v57 = v56 - 1;
          }
          while (__stlxr(v57, v55));
          if (!v57)
          {
            atomic_store(1u, v55);
            v70 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v70 = off_1E31FE290;
            *((_QWORD *)v70 + 1) = v55;
            v74 = v70;
            WTF::ensureOnMainThread();
            v71 = v74;
            v74 = 0;
            if (v71)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v71 + 8))(v71);
          }
          v38 = (WebCore::FrameLoader *)v48;
          if ((v54 & 1) != 0)
            goto LABEL_7;
          continue;
        }
      }
    }
    if (*((_BYTE *)v14 + 144))
      goto LABEL_35;
LABEL_22:
    v19 = *((_QWORD *)v14 + 37);
    if (v19)
    {
      *(_DWORD *)(v19 + 24) += 2;
      if ((WTF::equal(*(WTF **)(v19 + 1008), *(const WTF::StringImpl **)a2, a3) & 1) == 0)
      {
        v21 = *(_DWORD **)a2;
        if (*(_QWORD *)a2)
          *v21 += 2;
        v22 = *(WTF::StringImpl **)(v19 + 1008);
        *(_QWORD *)(v19 + 1008) = v21;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v20);
          else
            *(_DWORD *)v22 -= 2;
        }
        v23 = *v13;
        *(_OWORD *)(v19 + 1032) = *(_OWORD *)((char *)a2 + 24);
        *(_OWORD *)(v19 + 1016) = v23;
        WebCore::Document::updateCachedCookiesEnabled((WebCore::Document *)v19, v20);
      }
      if (*(_DWORD *)(v19 + 24) == 2)
      {
        if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v19);
      }
      else
      {
        *(_DWORD *)(v19 + 24) -= 2;
      }
    }
    else
    {
      WebCore::Document::setFirstPartyForCookies(0, a2, a3);
    }
    goto LABEL_32;
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v73, a2);
  do
    v9 = __ldaxr(v5);
  while (__stlxr(v9 + 1, v5));
LABEL_7:
  result = v73;
  v73 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  if (this)
  {
    do
    {
      v11 = __ldaxr(v5);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v5));
    if (!v12)
    {
      atomic_store(1u, v5);
      v72 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v72 = off_1E31FE290;
      *((_QWORD *)v72 + 1) = v5;
      v74 = v72;
      WTF::ensureOnMainThread();
      result = v74;
      v74 = 0;
      if (result)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebCore::extractContentLanguageFromHeader(WebCore *this, const WTF::String *a2, double a3, double a4, float a5)
{
  uint64_t v6;
  unsigned int v7;
  int16x8_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t i;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  int16x8_t *v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t result;
  int16x8_t *v35;
  int16x8_t v36;
  int16x8_t *v37;
  int8x16_t v38;
  int16x8_t *v39;
  char *v40;
  int16x8_t v41;
  __int16 *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;

  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v7 = *(_DWORD *)(v6 + 16);
    v8 = *(int16x8_t **)(v6 + 8);
    v9 = *(unsigned int *)(v6 + 4);
    if ((v7 & 4) == 0)
      goto LABEL_65;
    if ((_DWORD)v9)
    {
      v10 = 16;
      if (v9 < 0x10)
        v10 = v9;
      v11 = v10;
      v12 = v8;
      while (*v12 != 44)
      {
        ++v12;
        if (!--v11)
        {
          if (v9 < 0x11)
            goto LABEL_79;
          v12 = memchr(&v8->i8[v10], 44, v9 - v10);
          if (!v12)
            goto LABEL_79;
          break;
        }
      }
      for (i = v12 - (_BYTE *)v8; i != -1; i = ((char *)v42 - (char *)v8) >> 1)
      {
        if (v9 <= i)
          i = v9;
        else
          i = i;
        v14 = i & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)((v7 >> 2) & 1) << 32);
        if (((v7 >> 2) & 1) != 0)
        {
          if (!(_DWORD)i)
            goto LABEL_55;
          v15 = 0;
          while (1)
          {
            v16 = v8->u8[v15];
            v17 = v16 > 0x20;
            v18 = (1 << v16) & 0x100003600;
            if (v17 || v18 == 0)
              break;
            if (i == ++v15)
              goto LABEL_56;
          }
          if ((_DWORD)i == 1)
          {
            if (!(_DWORD)v15)
              goto LABEL_55;
            LODWORD(v20) = 0;
LABEL_35:
            v24 = (v20 - v15 + 1);
            if (i - v15 >= v24)
            {
              v14 = v24 | 0x100000000;
LABEL_55:
              if ((v14 & 0x100000000) != 0)
LABEL_56:
                result = WTF::AtomStringImpl::add();
              else
                result = WTF::AtomStringImpl::add();
              *(_QWORD *)this = v47;
              return result;
            }
          }
          else
          {
            v20 = (i - 1);
            while (v20 < i)
            {
              v21 = v8->u8[v20];
              v17 = v21 > 0x20;
              v22 = (1 << v21) & 0x100003600;
              if (!v17 && v22 != 0)
              {
                if ((_DWORD)--v20)
                  continue;
              }
              if (!(_DWORD)v15 && (_DWORD)v20 == (_DWORD)i - 1)
                goto LABEL_55;
              goto LABEL_35;
            }
          }
        }
        else
        {
          if (!(_DWORD)i)
            goto LABEL_55;
          v25 = 0;
          v26 = v8;
          while (1)
          {
            v27 = v26->u16[0];
            v17 = v27 > 0x20;
            v28 = (1 << v27) & 0x100003600;
            if (v17 || v28 == 0)
              break;
            ++v25;
            v26 = (int16x8_t *)((char *)v26 + 2);
            if (i == v25)
              goto LABEL_56;
          }
          if ((_DWORD)i == 1)
          {
            if (!(_DWORD)v25)
              goto LABEL_55;
            LODWORD(v30) = 0;
LABEL_63:
            v14 = (v30 - v25 + 1);
            v8 = v26;
            if (i - v25 >= v14)
              goto LABEL_55;
          }
          else
          {
            v30 = (i - 1);
            while (v30 < i)
            {
              v31 = v8->u16[v30];
              v17 = v31 > 0x20;
              v32 = (1 << v31) & 0x100003600;
              if (!v17 && v32 != 0)
              {
                if ((_DWORD)--v30)
                  continue;
              }
              if ((_DWORD)v25 || (_DWORD)v30 != (_DWORD)i - 1)
                goto LABEL_63;
              goto LABEL_55;
            }
          }
        }
        __break(1u);
LABEL_65:
        if (!(_DWORD)v9)
          break;
        v35 = (int16x8_t *)((char *)v8 + 2 * v9);
        if (v9 > 0x1F)
        {
          v36.i64[0] = 0x2C002C002C002CLL;
          v36.i64[1] = 0x2C002C002C002CLL;
          v37 = v8;
          do
          {
            v38 = (int8x16_t)vceqq_s16(*v37, v36);
            LOWORD(a5) = vmaxvq_u16((uint16x8_t)v38);
            if (a5 != 0.0)
              goto LABEL_73;
            v39 = v37 + 1;
            v40 = &v37[1].i8[14];
            ++v37;
          }
          while (v40 < (char *)v35);
          if (v39 < v35)
          {
            v41.i64[0] = 0x2C002C002C002CLL;
            v41.i64[1] = 0x2C002C002C002CLL;
            v38 = (int8x16_t)vceqq_s16(v35[-1], v41);
            v41.i16[0] = vmaxvq_u16((uint16x8_t)v38);
            if (v41.i32[0])
            {
              v37 = v35 - 1;
LABEL_73:
              v42 = &v37->i16[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v38))];
              goto LABEL_74;
            }
          }
          break;
        }
        v43 = 2 * v9;
        v42 = (__int16 *)v8;
        while (*v42 != 44)
        {
          ++v42;
          v43 -= 2;
          if (!v43)
            goto LABEL_79;
        }
LABEL_74:
        if (v42 == (__int16 *)v35)
          break;
      }
    }
  }
LABEL_79:
  result = WTF::String::trim();
  v44 = v46;
  if (v46)
  {
    if ((*((_BYTE *)v46 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v44 = v47;
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v45);
      else
        *(_DWORD *)v46 -= 2;
    }
    result = 0;
    *(_QWORD *)this = v44;
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return result;
}

double WebCore::Document::setContentLanguage(WebCore::Document *this, const WTF::AtomString *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;
  double result;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 214);
  v4 = *(_DWORD **)a2;
  if (v3 != *(WTF::StringImpl **)a2)
  {
    if (v4)
      *v4 += 2;
    *((_QWORD *)this + 214) = v4;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    return WebCore::Style::Scope::didChangeStyleSheetEnvironment(*((WebCore::Style::Scope **)this + 166), a2);
  }
  return result;
}

uint64_t WebCore::ContentSecurityPolicy::didReceiveHeaders(uint64_t a1, uint64_t a2, char a3)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  char v10;
  _DWORD *v11;
  uint64_t result;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22[3];
  char v23;

  v5 = *(_BYTE *)(a1 + 181);
  *(_BYTE *)(a1 + 181) = a3;
  v6 = *(unsigned int *)(a2 + 148);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(a2 + 136);
    v8 = 8 * v6;
    do
    {
      v9 = (WTF::StringImpl *)(*(_QWORD *)v7 + 8);
      v10 = *(_BYTE *)(*(_QWORD *)v7 + 16);
      v22[0] = 0;
      WebCore::ContentSecurityPolicy::didReceiveHeader(a1, v9, v10, 2, (uint64_t *)v22, 0);
      if (v22[0])
      {
        if (*(_DWORD *)v22[0] == 2)
          WTF::StringImpl::destroy(v22[0], (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v22[0] -= 2;
      }
      v7 += 8;
      v8 -= 8;
    }
    while (v8);
  }
  v11 = *(_DWORD **)(a2 + 168);
  if (v11)
    *v11 += 2;
  result = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v11;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 182) = *(_BYTE *)(a2 + 182);
  v13 = *(unsigned int **)(a2 + 192);
  if (v13)
  {
    v15 = *(v13 - 1);
    v16 = &v13[8 * v15];
    if (!*(v13 - 3))
      goto LABEL_41;
    if (!(_DWORD)v15)
    {
      v14 = *(_QWORD *)(a2 + 192);
      goto LABEL_17;
    }
    v20 = 32 * v15;
    do
    {
      result = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v13);
      if ((result & 1) == 0)
      {
        v21 = v13[6];
        if ((_DWORD)v21 == -1)
          goto LABEL_40;
        v22[0] = (WTF::StringImpl *)&v23;
        result = ((uint64_t (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_0[v21])(v22, v13);
        if (!(_DWORD)result)
          goto LABEL_39;
      }
      v13 += 8;
      v20 -= 32;
    }
    while (v20);
    v13 = v16;
LABEL_39:
    v14 = (uint64_t)v13;
    v13 = *(unsigned int **)(a2 + 192);
    goto LABEL_17;
  }
  v14 = 0;
  v15 = 0;
  while (1)
  {
    v16 = &v13[8 * v15];
LABEL_17:
    if (v13)
      v13 += 8 * *(v13 - 1);
    if (v13 == (unsigned int *)v14)
      break;
    while (1)
    {
      result = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add((uint64_t *)(a1 + 192), v14, (uint64_t)v22);
      v17 = v14 + 32;
      v14 = (uint64_t)v16;
      if ((unsigned int *)v17 != v16)
        break;
LABEL_28:
      if ((unsigned int *)v14 == v13)
        goto LABEL_29;
    }
    v14 = v17;
    while (1)
    {
      v18 = *(unsigned int *)(v14 + 24);
      if ((_DWORD)v18 == -1)
        break;
      v22[0] = (WTF::StringImpl *)&v23;
      result = ((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E34030D0[v18])(v22, v14);
      if ((result & 1) == 0)
      {
        v19 = *(unsigned int *)(v14 + 24);
        if ((_DWORD)v19 == -1)
          break;
        v22[0] = (WTF::StringImpl *)&v23;
        result = ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_0[v19])(v22, v14);
        if (!(_DWORD)result)
          goto LABEL_28;
      }
      v14 += 32;
      if ((unsigned int *)v14 == v16)
      {
        v14 = (uint64_t)v16;
        goto LABEL_28;
      }
    }
LABEL_40:
    result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_41:
    v14 = (uint64_t)v16;
  }
LABEL_29:
  *(_BYTE *)(a1 + 181) = v5;
  return result;
}

WTF::StringImpl *WebCore::SecurityContext::setCrossOriginOpenerPolicy(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  WTF::StringImpl *result;

  *(_WORD *)(a1 + 48) = *(_WORD *)a2;
  v4 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v4)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v6)
    *v6 += 2;
  result = *(WTF::StringImpl **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::RenderWidget::styleDidChange(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  float v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  WebCore::RenderBox::styleDidChange(a1, a2, a3);
  if (a3)
    v5 = *(float *)(*(_QWORD *)(a3 + 24) + 184);
  else
    v5 = 1.0;
  if (v5 != *(float *)(*(_QWORD *)(a1 + 104) + 184))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1656))(a1);
  result = *(_QWORD *)(a1 + 232);
  if (result)
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 104) + 239) & 4) != 0)
    {
      v7 = 7;
    }
    else
    {
      v7 = 6;
      if ((*(_BYTE *)(a1 + 120) & 0x30) != 0)
        v7 = 7;
    }
    result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v7))();
    if (WebCore::Document::hasEverCreatedAnAXObjectCache)
    {
      result = WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)
                                                                                              + 40)
                                                                                  + 8));
      if (result)
      {
        v8 = result;
        ++*(_DWORD *)(result + 8);
        result = JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::singletonFlag(result);
        v9 = *(_DWORD *)(v8 + 8);
        if (v9)
        {
          *(_DWORD *)(v8 + 8) = v9 - 1;
        }
        else
        {
          result = 286;
          __break(0xC471u);
        }
      }
    }
  }
  return result;
}

void WebCore::RenderImage::styleDidChange(WebCore::RenderImage *a1, WTF::StringImpl *a2, uint64_t a3)
{
  int v4;
  void *v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::CachedImage *v21;
  int v22;

  v4 = (int)a2;
  WebCore::RenderBox::styleDidChange((uint64_t)a1, a2, a3);
  if (a3)
    v7 = *(float *)(*(_QWORD *)(a3 + 24) + 184);
  else
    v7 = 1.0;
  if (v7 != *(float *)(*((_QWORD *)a1 + 13) + 184))
    (*(void (**)(WebCore::RenderImage *))(*(_QWORD *)a1 + 1656))(a1);
  if (*((_BYTE *)a1 + 232))
  {
    v8 = *((_QWORD *)a1 + 27);
    if (v8 && *(_DWORD *)(v8 + 4))
    {
      v20 = *(_QWORD *)(*((_QWORD *)a1 + 28) + 24);
      v21 = v20 ? *(WebCore::CachedImage **)(v20 + 8) : 0;
      if (WebCore::RenderImage::setImageSizeForAltText(a1, v21))
        WebCore::RenderImage::repaintOrMarkForLayout((unint64_t)a1, 1, 0);
    }
    *((_BYTE *)a1 + 232) = 0;
  }
  if (v4 != 8 || !a3)
    return;
  if (((*(_DWORD *)(*((_QWORD *)a1 + 13) + 232) ^ *(_DWORD *)(*(_QWORD *)(a3 + 24) + 232)) & 0x8000) != 0)
    goto LABEL_38;
  if ((*((_BYTE *)a1 + 45) & 1) != 0)
    return;
  v9 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 8);
  if (!v9)
    return;
  v10 = *(_WORD *)(v9 + 28);
  if ((v10 & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1943CED20);
  }
  if ((v10 & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
    return;
  v11 = *(_DWORD *)(v9 + 24);
  *(_DWORD *)(v9 + 24) = v11 + 2;
  v12 = *(_QWORD *)(v9 + 280);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 8)) == 0)
  {
    v22 = 0;
    if (!v11)
      goto LABEL_42;
LABEL_35:
    *(_DWORD *)(v9 + 24) = v11;
    if ((v22 & 1) == 0)
      return;
    goto LABEL_36;
  }
  v14 = *(_QWORD *)(v13 + 104);
  if (!v14)
    goto LABEL_40;
  v15 = *(_DWORD *)(v14 + 4);
  if ((v15 & 1) == 0)
  {
    v16 = v14 + 32;
    LODWORD(v17) = v15 >> 5;
    if ((_DWORD)v17)
      goto LABEL_21;
LABEL_40:
    v18 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_41;
  }
  v16 = *(_QWORD *)(v14 + 40);
  LODWORD(v17) = *(_DWORD *)(v14 + 52);
  if (!(_DWORD)v17)
    goto LABEL_40;
LABEL_21:
  v17 = v17;
  v18 = (_QWORD *)(v16 + 8);
  while (1)
  {
    v19 = *(v18 - 1);
    if (v19 == WebCore::HTMLNames::typeAttr
      || *(_QWORD *)(v19 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
      && *(_QWORD *)(v19 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
    {
      break;
    }
    v18 += 2;
    if (!--v17)
    {
      v18 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_41:
  v22 = MEMORY[0x19AEA53F4](*v18, "image/x-apple-adaptive-glyph", 28);
  v11 = *(_DWORD *)(v9 + 24) - 2;
  if (*(_DWORD *)(v9 + 24) != 2)
    goto LABEL_35;
LABEL_42:
  if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v9, v6);
    if ((v22 & 1) == 0)
      return;
    goto LABEL_36;
  }
  if (v22)
  {
LABEL_36:
    if (WebCore::FontCascade::operator==(*(_QWORD *)(a3 + 32) + 32, *((_QWORD *)a1 + 14) + 32))
      return;
LABEL_38:
    WebCore::RenderImage::repaintOrMarkForLayout((unint64_t)a1, 0, 0);
  }
}

uint64_t WebCore::RenderTableRow::styleDidChange(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  int v4;
  const WTF::StringImpl *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  float v18;
  float v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const WebCore::RenderStyle *v25;
  uint64_t v26;
  uint64_t v27;

  v4 = (int)a2;
  WebCore::RenderBox::styleDidChange(a1, a2, a3);
  result = WebCore::RenderElement::propagateStyleToAnonymousChildren(a1, 0, v6);
  v8 = *(_QWORD *)(a1 + 32);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 8)) == 0)
  {
    v20 = a3 != 0;
    goto LABEL_43;
  }
  if (*(_BYTE *)(v9 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x1943CEEE4);
  }
  if (a3)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
    v11 = v10 + 4;
    v12 = v10 + 12;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
      result = v12;
    else
      result = v11;
    v13 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8);
    v14 = (unsigned __int8 *)(v13 + 4);
    v15 = (unsigned __int8 *)(v13 + 12);
    if (((*(_DWORD *)(a3 + 44) >> 13) & 6u) - 2 >= 4)
      v16 = v15;
    else
      v16 = v14;
    v17 = *(unsigned __int8 *)(result + 4);
    if (v17 == v16[4] && (*(_BYTE *)(result + 5) != 0) == (v16[5] != 0))
    {
      if (v17 == 13)
      {
LABEL_20:
        v20 = 1;
        goto LABEL_21;
      }
      if (v17 == 11)
      {
        result = WebCore::Length::isCalculatedEqual((WebCore::Length *)result, (const WebCore::Length *)v16);
        v8 = *(_QWORD *)(a1 + 32);
        if ((result & 1) != 0)
        {
LABEL_42:
          v20 = 1;
LABEL_43:
          if (!v8)
            return result;
          goto LABEL_21;
        }
        if (!v8)
        {
          v26 = 0;
LABEL_41:
          result = (uint64_t)WebCore::RenderTableSection::rowLogicalHeightChanged((int *)v26, *(_DWORD *)(a1 + 200) & 0x7FFFFFFF);
          v8 = *(_QWORD *)(a1 + 32);
          goto LABEL_42;
        }
      }
      else
      {
        if (*(_BYTE *)(result + 6))
          v18 = *(float *)result;
        else
          v18 = (float)*(int *)result;
        v19 = *(float *)v16;
        if (!v16[6])
          v19 = (float)*(int *)v16;
        if (v18 == v19)
          goto LABEL_20;
      }
    }
    v26 = *(_QWORD *)(v8 + 8);
    if (v26 && *(_BYTE *)(v26 + 46) != 40)
    {
      __break(0xC471u);
      JUMPOUT(0x1943CEF6CLL);
    }
    goto LABEL_41;
  }
  v20 = 0;
LABEL_21:
  v21 = *(_QWORD *)(v8 + 8);
  if (v21)
  {
    if (*(_BYTE *)(v21 + 46) != 40)
    {
      __break(0xC471u);
      JUMPOUT(0x1943CEF04);
    }
    v22 = *(_QWORD *)(v21 + 32);
    if (v22)
    {
      v23 = *(_QWORD *)(v22 + 8);
      if (v23)
      {
        v24 = *(unsigned __int8 *)(v23 + 46);
        if (v24 != 35 && v24 != 63)
        {
          __break(0xC471u);
          JUMPOUT(0x1943CF018);
        }
        if (v20)
        {
          result = WebCore::RenderStyle::borderIsEquivalentForPainting((WebCore::RenderStyle *)a3, (const WebCore::RenderStyle *)(a1 + 80));
          if ((result & 1) == 0)
            result = WebCore::RenderTable::invalidateCollapsedBorders(v23, 0);
          if (v4 == 8 && (*(_BYTE *)(a1 + 20) & 0xF8) != 0 && (*(_BYTE *)(v23 + 124) & 4) != 0)
          {
            result = WebCore::borderWidthChanged(*(WebCore **)(*(_QWORD *)(a3 + 8) + 24), *(const WebCore::RenderStyle **)(a1 + 88), v25);
            if ((_DWORD)result)
            {
              WebCore::RenderTableRow::styleDidChange(WebCore::StyleDifference,WebCore::RenderStyle const*)::$_0::operator()<WebCore::RenderTableRow>(*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32));
              v27 = WebCore::RenderTableRow::previousRow((WebCore::RenderTableRow *)a1);
              if (v27)
                WebCore::RenderTableRow::styleDidChange(WebCore::StyleDifference,WebCore::RenderStyle const*)::$_0::operator()<WebCore::RenderTableRow>(*(unsigned int *)(v27 + 64) | ((unint64_t)*(unsigned __int8 *)(v27 + 68) << 32));
              result = WebCore::RenderTableRow::nextRow((WebCore::RenderTableRow *)a1);
              if (result)
                return WebCore::RenderTableRow::styleDidChange(WebCore::StyleDifference,WebCore::RenderStyle const*)::$_0::operator()<WebCore::RenderTableRow>(*(unsigned int *)(result + 64) | ((unint64_t)*(unsigned __int8 *)(result + 68) << 32));
            }
          }
        }
      }
    }
  }
  return result;
}

void WebCore::RenderBox::styleDidChange(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  int v4;
  int v6;
  unsigned __int8 *v7;
  const WTF::StringImpl *v8;
  float v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _BOOL4 v25;
  unsigned int v26;
  uint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  const WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  const WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  int v68;
  float v69;
  uint64_t v70;
  float v71;
  uint64_t v72;
  void *v73;
  WebCore::RenderView *v74;
  WebCore::RenderLayerCompositor *v75;
  uint64_t v76;
  WebCore::RenderObject *v77;
  int v78;
  WebCore::RenderElement *v79;
  WebCore::ScrollableArea *v80;
  WebCore::ScrollableArea *v81;
  uint64_t v82;
  WebCore::RenderLayerCompositor *v83;
  WebCore::RenderLayerCompositor *v84;
  WTF *v85;
  void *v86;

  v4 = (int)a2;
  v6 = *(_DWORD *)(a1 + 20);
  WebCore::RenderLayerModelObject::styleDidChange(a1, a2, a3);
  if (a3 && (*(_DWORD *)(a1 + 20) & 0xF8) != 0)
  {
    v10 = (uint64_t *)WebCore::percentHeightContainerMap;
    if (WebCore::percentHeightContainerMap)
    {
      ++*(_DWORD *)(WebCore::percentHeightContainerMap + 8);
      v11 = *(_QWORD *)(a1 + 8);
      if (v11)
      {
        if (*(_QWORD *)(v11 + 8))
        {
          v12 = *v10;
          if (v12)
          {
            v13 = *(_DWORD *)(v12 - 8);
            v14 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
            v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
            v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
            v17 = v13 & ((v16 >> 31) ^ v16);
            v18 = 1;
            v19 = *(_QWORD *)(v12 + 24 * v17);
            if (v19)
            {
              while (v19 == -1 || v19 != v11)
              {
                v17 = (v17 + v18++) & v13;
                v19 = *(_QWORD *)(v12 + 24 * v17);
                if (!v19)
                  goto LABEL_8;
              }
              WebCore::RenderBlock::removePercentHeightDescendant((WTF ***)a1, (WebCore::RenderBox *)v7);
            }
          }
        }
      }
    }
LABEL_8:
    v20 = *(_DWORD *)(a1 + 20);
    if ((v20 & 0x1800000) == 0x1000000)
    {
      v21 = *(_BYTE **)(*(_QWORD *)(a1 + 88) + 24);
      if ((v20 & 0x1000) != 0)
      {
        if (v21[36])
          goto LABEL_11;
        v60 = v21 + 20;
      }
      else
      {
        if (v21[12])
          goto LABEL_11;
        v60 = v21 + 28;
      }
      if (*v60)
        goto LABEL_11;
      v61 = ((unsigned __int16)*(_DWORD *)(a3 + 44) >> 13) - 1;
      if (v61 > 4)
        v62 = 0;
      else
        v62 = qword_1969FC6C8[v61];
      v63 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 24) + 40;
      v64 = (unsigned __int8 *)(v63 + 8 * v62);
      v65 = ((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13) - 1;
      if (v65 > 4)
        v66 = 0;
      else
        v66 = qword_1969FC6C8[v65];
      v67 = v21 + 40;
      v7 = &v67[8 * v66];
      v68 = v64[4];
      if (v68 != v7[4] || (*(_BYTE *)(v63 + 8 * v62 + 5) != 0) != (v7[5] != 0))
        goto LABEL_123;
      if (v68 == 13)
        goto LABEL_11;
      if (v68 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)v64, (const WebCore::Length *)v7) & 1) != 0)
          goto LABEL_11;
        goto LABEL_123;
      }
      if (*(_BYTE *)(v63 + 8 * v62 + 6))
        v9 = *(float *)v64;
      else
        v9 = (float)*(int *)v64;
      v69 = *(float *)v7;
      if (!v67[8 * v66 + 6])
        v69 = (float)*(int *)v7;
      if (v9 != v69)
      {
LABEL_123:
        v76 = *(_QWORD *)(a1 + 32);
        if (v76)
        {
          v77 = *(WebCore::RenderObject **)(v76 + 8);
          if (v77)
          {
            v78 = *((_DWORD *)v77 + 5);
            if ((v78 & 0x20) == 0)
            {
              *((_DWORD *)v77 + 5) = v78 | 0x20;
              v79 = WebCore::RenderObject::markContainingBlocksForLayout(v77, 0);
              WebCore::RenderObject::scheduleLayout(v77, v79);
            }
          }
        }
      }
    }
  }
LABEL_11:
  if (WebCore::percentHeightContainerMap)
  {
    v22 = *(unsigned int *)(a1 + 64);
    if (v22 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
    {
      if (*(_QWORD *)((v22 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8)
        && ((v6 & 0x1000) == 0) != ((*(_BYTE *)(a1 + 21) & 0x10) == 0))
      {
        WebCore::RenderBlock::clearPercentHeightDescendantsFrom(a1, (WebCore::RenderBox *)v7);
      }
    }
  }
  if ((*(_BYTE *)(a1 + 22) & 1) != 0)
  {
    if (a3)
    {
      v70 = *(_QWORD *)(a1 + 144);
      if (v70)
      {
        v9 = *(float *)(*(_QWORD *)(a3 + 24) + 184);
        v71 = *(float *)(*(_QWORD *)(a1 + 104) + 184);
        if (v9 != v71)
        {
          v72 = *(_QWORD *)(v70 + 264);
          if (v72)
            WebCore::RenderLayerScrollableArea::setPostLayoutScrollPosition(v72, llroundf((float)(v71 / v9) * (float)*(int *)(v72 + 104)) | ((unint64_t)llroundf((float)(v71 / v9) * (float)*(int *)(v72 + 108)) << 32), 1);
        }
      }
    }
  }
  v23 = *(_QWORD *)(a1 + 144);
  if (a3 && v23)
  {
    v24 = *(_DWORD *)(a3 + 44);
    v25 = (*(_BYTE *)(a3 + 43) & 4) != 0 && ((v24 >> 13) & 6) - 2 > 3
       || ((((unsigned __int16)v24 >> 13) - 3) & 0xFFFFFFFD) == 0;
    v26 = *(_DWORD *)(a1 + 124);
    if ((*(_BYTE *)(a1 + 123) & 4) != 0 && ((v26 >> 13) & 6) - 2 >= 4)
    {
      if (v25)
        goto LABEL_23;
    }
    else if (v25 == (((((unsigned __int16)v26 >> 13) - 3) & 0xFFFFFFFD) == 0))
    {
      goto LABEL_23;
    }
    v81 = *(WebCore::ScrollableArea **)(v23 + 264);
    if (v81)
    {
      v82 = WebCore::ScrollableArea::scrollbarsController(v81);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v82 + 320))(v82, 0);
      v23 = *(_QWORD *)(a1 + 144);
    }
  }
LABEL_23:
  if (a3)
  {
    if (v23)
    {
      if (*(unsigned __int16 *)(*(_QWORD *)(a3 + 24) + 302) != *(unsigned __int16 *)(*(_QWORD *)(a1 + 104) + 302))
      {
        v80 = *(WebCore::ScrollableArea **)(v23 + 264);
        if (v80)
          WebCore::ScrollableArea::invalidateScrollbars(v80);
      }
    }
  }
  if ((v4 - 2) <= 2)
  {
    v48 = *(_QWORD *)(a1 + 32);
    if (v48)
    {
      v49 = *(_QWORD *)(v48 + 8);
      if (v49)
      {
        v50 = *(_DWORD *)(v49 + 20);
        if ((v50 & 0x60000000) != 0)
          *(_DWORD *)(v49 + 20) = v50 & 0x9FFFFFFF | 0x20000000;
        v51 = *(_QWORD *)(v49 + 32);
        if (v51)
        {
          v52 = *(_QWORD *)(v51 + 8);
          if (v52)
          {
            v53 = *(_DWORD *)(v52 + 20);
            if ((v53 & 0x60000000) != 0)
              *(_DWORD *)(v52 + 20) = v53 & 0x9FFFFFFF | 0x20000000;
            v54 = *(_QWORD *)(v52 + 32);
            if (v54)
            {
              v55 = *(_QWORD *)(v54 + 8);
              if (v55)
              {
                v56 = *(_DWORD *)(v55 + 20);
                if ((v56 & 0x60000000) != 0)
                  *(_DWORD *)(v55 + 20) = v56 & 0x9FFFFFFF | 0x20000000;
                v57 = *(_QWORD *)(v55 + 32);
                if (v57)
                {
                  v58 = *(_QWORD *)(v57 + 8);
                  if (v58)
                  {
                    v59 = *(_DWORD *)(v58 + 20);
                    if ((v59 & 0x60000000) != 0)
                      *(_DWORD *)(v58 + 20) = v59 & 0x9FFFFFFF | 0x20000000;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v27 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v28 = (*(_BYTE *)(a1 + 45) & 1) == 0
     && (*(_WORD *)(v27 + 28) & 0x10) != 0
     && *(_QWORD *)(*(_QWORD *)(v27 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
  v29 = *(_QWORD *)(*(_QWORD *)(v27 + 40) + 8);
  if (*(_QWORD *)(v29 + 1272) == v27 || v28)
  {
    WebCore::LocalFrameView::recalculateBaseBackgroundColor(*(WebCore::LocalFrameView **)(*(_QWORD *)(v29 + 1944) + 248), v9);
    WebCore::LocalFrameView::recalculateScrollbarOverlayStyle(*(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40)+ 8)+ 1944)+ 248), v73);
    if (v4)
    {
      v74 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                    + 1944);
      v75 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v74 + 50);
      if (!v75)
      {
        v83 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        v75 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v83, v74);
        v84 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v74 + 50);
        *((_QWORD *)v74 + 50) = v75;
        if (v84)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v84);
          WTF::fastFree(v85, v86);
          v75 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v74 + 50);
        }
      }
      WebCore::RenderLayerCompositor::rootOrBodyStyleChanged(v75, (WebCore::RenderElement *)a1, (const WebCore::RenderStyle *)a3);
    }
  }
  if (a3 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 40) + 240))
  {
    WebCore::RenderBox::updateShapeOutsideInfoAfterStyleChange(a1, (const WebCore::RenderStyle *)(a1 + 80), (const WebCore::RenderStyle *)a3);
LABEL_40:
    v31 = *(_QWORD *)(a1 + 32);
    if (v31)
    {
      v32 = *(_QWORD *)(v31 + 8);
      if (v32)
      {
        if (*(_BYTE *)(v32 + 46) == 12)
        {
          ++*(_DWORD *)(v32 + 16);
          if ((*(_QWORD *)(a3 + 16) & 0x180000) != 0x100000 || (*(_QWORD *)(a1 + 96) & 0x180000) != 0x100000)
          {
            v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 40) + 88);
            v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 88);
            if (*(unsigned __int8 *)(v33 + 8) != *(unsigned __int8 *)(v34 + 8)
              || *(_DWORD *)(v33 + 12) != *(_DWORD *)(v34 + 12)
              || !WTF::equal(*(WTF **)(v33 + 16), *(const WTF::StringImpl **)(v34 + 16), v8)
              || (v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 40) + 88),
                  v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 88),
                  *(unsigned __int8 *)(v36 + 24) != *(unsigned __int8 *)(v37 + 24))
              || *(_DWORD *)(v36 + 28) != *(_DWORD *)(v37 + 28)
              || !WTF::equal(*(WTF **)(v36 + 32), *(const WTF::StringImpl **)(v37 + 32), v35)
              || (v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 40) + 88),
                  v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 88),
                  *(unsigned __int8 *)(v39 + 40) != *(unsigned __int8 *)(v40 + 40))
              || *(_DWORD *)(v39 + 44) != *(_DWORD *)(v40 + 44)
              || !WTF::equal(*(WTF **)(v39 + 48), *(const WTF::StringImpl **)(v40 + 48), v38)
              || (v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 40) + 88),
                  v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 88),
                  *(unsigned __int8 *)(v42 + 56) != *(unsigned __int8 *)(v43 + 56))
              || *(_DWORD *)(v42 + 60) != *(_DWORD *)(v43 + 60)
              || !WTF::equal(*(WTF **)(v42 + 64), *(const WTF::StringImpl **)(v43 + 64), v41)
              || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 32) + 144) != *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32)
                                                                                           + 144)
              || ((*(_QWORD *)(a3 + 16) & 0x180000) != 0x100000) == ((*(_QWORD *)(a1 + 96) & 0x180000) == 0x100000))
            {
              WebCore::RenderGrid::dirtyGrid((WebCore::RenderGrid *)v32, 0);
            }
          }
          v44 = *(_DWORD *)(v32 + 16);
          if (!v44)
          {
            __break(0xC471u);
            JUMPOUT(0x1943CF724);
          }
          *(_DWORD *)(v32 + 16) = v44 - 1;
        }
      }
    }
    goto LABEL_60;
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 240))
    WebCore::RenderBox::updateShapeOutsideInfoAfterStyleChange(a1, (const WebCore::RenderStyle *)(a1 + 80), (const WebCore::RenderStyle *)a3);
  if (a3)
    goto LABEL_40;
LABEL_60:
  if ((*(_DWORD *)(a1 + 20) & 0x1800000) == 0x1000000)
  {
    v45 = *(_QWORD *)(a1 + 32);
    if (v45)
    {
      v46 = *(_QWORD *)(v45 + 8);
      if (v46)
      {
        v47 = *(_QWORD *)(v46 + 96);
        if ((v47 & 0x1E) == 0xE || (v47 & 0x1E) == 0x10 || (v47 & 0x1F) - 19 <= 1)
          WebCore::RenderBox::clearOverridingContentSize(a1, v7);
      }
    }
  }
  if (a3 && ((*(_QWORD *)(a3 + 16) & 0x180000) == 0x100000) != ((*(_QWORD *)(a1 + 96) & 0x180000) == 0x100000))
  {
    if (WebCore::gOverridingContainingBlockContentLogicalWidthMap)
      WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalWidthMap, (_QWORD *)a1);
    if (WebCore::gOverridingContainingBlockContentLogicalHeightMap)
      WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalHeightMap, (_QWORD *)a1);
  }
}

WTF::StringImpl *WebCore::RenderTableCell::createAnonymousWithParentRenderer@<X0>(WebCore::RenderTableCell *this@<X0>, const WTF::StringImpl *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  WebCore::RenderElement *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  const WebCore::Element *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  WebCore::RenderStyle::createAnonymousStyleWithDisplay((_QWORD *)this + 10, (WTF::StringImpl *)0xC, a2, (uint64_t)&v17);
  v6 = (WebCore::RenderElement *)bmalloc::api::isoAllocate();
  v7 = WebCore::RenderObject::RenderObject((uint64_t)v6, 37, v5, 92, 1);
  *(_QWORD *)v7 = off_1E3422BC8;
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 70) = 0;
  *(_DWORD *)(v7 + 80) = 0;
  v8 = v18;
  v9 = v19;
  v18 = 0;
  *(_QWORD *)(v7 + 88) = v8;
  *(_QWORD *)(v7 + 96) = v9;
  v10 = v20;
  v20 = 0u;
  *(_OWORD *)(v7 + 104) = v10;
  *(_QWORD *)(v7 + 120) = v21;
  v11 = v22;
  v22 = 0u;
  *(_OWORD *)(v7 + 128) = v11;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_OWORD *)(v7 + 176) = 0u;
  *(_QWORD *)(v7 + 192) = 0;
  *(_DWORD *)(v7 + 200) = -1;
  *(_BYTE *)(v7 + 204) &= 0xFCu;
  *(_BYTE *)(v7 + 208) = 0;
  *(_BYTE *)(v7 + 212) = 0;
  *(_DWORD *)(v7 + 240) = 0;
  *(_OWORD *)(v7 + 216) = 0u;
  *(_DWORD *)(v7 + 20) |= 0x40000u;
  *(_QWORD *)v7 = off_1E3433080;
  *(_QWORD *)(v7 + 248) = 0x1FFFFFFLL;
  *(_DWORD *)(v7 + 256) = 0;
  *a3 = v7;
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v17, v12);
  return WebCore::RenderElement::initializeStyle(v6, v13, v14, v15);
}

float WebCore::RenderTableCell::styleDidChange(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  int v4;
  float result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  int v14;
  WebCore::Length *v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 v34;
  uint64_t *v35;
  int v36;
  int v37;
  WebCore::RenderObject *v38;
  WebCore::RenderTableCell *v39;
  WebCore::RenderObject *v40;
  WebCore::RenderTableCell *v41;
  WebCore::RenderObject *v42;
  WebCore::RenderTableCell *v43;
  WebCore::RenderObject *v44;
  WebCore::RenderTableCell *v45;
  WebCore::StyleColor *v46;
  uint64_t *v47;
  uint64_t v48;
  WebCore::StyleColor *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  float v61[7];
  char v62;
  __int128 v63;
  char *v64;
  char *v65;

  v4 = (int)a2;
  WebCore::RenderBlockFlow::styleDidChange(a1, a2, a3);
  v7 = *(_DWORD *)(a1 + 20);
  if ((v7 & 0x60000000) == 0)
    *(_DWORD *)(a1 + 20) = v7 & 0x9FFFFFFF | 0x20000000;
  v8 = *(_QWORD *)(a1 + 32);
  if (!v8)
    goto LABEL_58;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    goto LABEL_58;
  if (*(_BYTE *)(v9 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x1943CFE24);
  }
  v10 = *(_QWORD *)(v9 + 32);
  if (!v10 || (v11 = *(_QWORD *)(v10 + 8)) == 0)
  {
LABEL_58:
    if (a3)
      goto LABEL_19;
LABEL_59:
    v19 = 0;
    goto LABEL_22;
  }
  if (*(_BYTE *)(v11 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x1943CFE64);
  }
  if (!a3)
    goto LABEL_59;
  v12 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 88) + 8);
  v13 = *(unsigned __int8 **)(*(_QWORD *)(a3 + 8) + 8);
  v14 = v12[16];
  if (v14 != v13[16] || (v12[17] != 0) != (v13[17] != 0))
    goto LABEL_101;
  if (v14 != 13)
  {
    v15 = (WebCore::Length *)(v12 + 12);
    if (v14 != 11)
    {
      if (v12[18])
        result = *(float *)v15;
      else
        result = (float)*(int *)v15;
      v16 = *((float *)v13 + 3);
      if (!v13[18])
        v16 = (float)SLODWORD(v16);
      if (result == v16)
        goto LABEL_19;
      goto LABEL_101;
    }
    if ((WebCore::Length::isCalculatedEqual(v15, (const WebCore::Length *)(v13 + 12)) & 1) == 0)
    {
      v8 = *(_QWORD *)(a1 + 32);
      if (!v8)
      {
        v55 = 0;
        v56 = MEMORY[8];
LABEL_105:
        if (*(_BYTE *)(v56 + 46) != 39)
        {
          __break(0xC471u);
          JUMPOUT(0x1943CFF38);
        }
        WebCore::RenderTableSection::rowLogicalHeightChanged((int *)v55, *(_DWORD *)(v56 + 200) & 0x7FFFFFFF);
        goto LABEL_19;
      }
LABEL_101:
      v56 = *(_QWORD *)(v8 + 8);
      if (*(_BYTE *)(v56 + 46) != 39)
      {
        __break(0xC471u);
        JUMPOUT(0x1943CFF18);
      }
      v57 = *(_QWORD *)(v56 + 32);
      if (v57)
      {
        v55 = *(_QWORD *)(v57 + 8);
        if (v55 && *(_BYTE *)(v55 + 46) != 40)
        {
          __break(0xC471u);
          JUMPOUT(0x1943CFF58);
        }
      }
      else
      {
        v55 = 0;
      }
      goto LABEL_105;
    }
  }
LABEL_19:
  v17 = *(_QWORD *)(a1 + 88);
  v18 = *(_QWORD *)(a3 + 8);
  if ((*(unsigned __int8 *)(*(_QWORD *)(v18 + 8) + 68) ^ *(unsigned __int8 *)(*(_QWORD *)(v17 + 8)
                                                                                             + 68)) > 0xF
    || ((*(_WORD *)(*(_QWORD *)(v18 + 32) + 120) ^ *(_WORD *)(*(_QWORD *)(v17 + 32) + 120)) & 0x1FF) != 0)
  {
    *(_DWORD *)(a1 + 252) = 0;
    *(_DWORD *)(a1 + 256) = 0;
  }
  v19 = 1;
LABEL_22:
  v20 = *(_QWORD *)(a1 + 32);
  if (!v20)
    return result;
  v21 = *(_QWORD *)(v20 + 8);
  if (!v21)
    return result;
  if (*(_BYTE *)(v21 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x1943CFE44);
  }
  v22 = *(_QWORD *)(v21 + 32);
  if (!v22)
    return result;
  v23 = *(_QWORD *)(v22 + 8);
  if (!v23)
    return result;
  if (*(_BYTE *)(v23 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x1943CFE84);
  }
  v24 = *(_QWORD *)(v23 + 32);
  if (!v24)
    return result;
  v25 = *(_QWORD *)(v24 + 8);
  if (!v25)
    return result;
  v26 = *(unsigned __int8 *)(v25 + 46);
  if (v26 != 35 && v26 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x1943CFF80);
  }
  if (!v19)
    return result;
  v27 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 24);
  v28 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
  v29 = *(_QWORD *)(a3 + 32);
  v30 = *(_QWORD *)(a1 + 112);
  v31 = *(_QWORD *)(v29 + 328);
  v32 = *(_QWORD *)(v30 + 328);
  if ((v31 & 0x8000000000000) != 0)
  {
    v60 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
    v34 = (v32 & 0x8000000000000) != 0
       && (v63 = *(_OWORD *)((v31 & 0xFFFFFFFFFFFFLL) + 4),
           *(_OWORD *)v61 = *(_OWORD *)((v32 & 0xFFFFFFFFFFFFLL) + 4),
           WebCore::operator==<float,4ul>((float *)&v63, v61))
       && (v58 = *(_QWORD *)(v29 + 328), v59 = *(_QWORD *)(v30 + 328), HIBYTE(v58) == HIBYTE(v59))
       && BYTE6(v58) == BYTE6(v59);
    v28 = v60;
  }
  else
  {
    v34 = (v32 & 0x8000000000000) == 0 && v31 == v32;
  }
  v35 = (uint64_t *)(v27 + 104);
  if (v27 == v28)
  {
    if (v34)
      return result;
    goto LABEL_42;
  }
  v37 = WebCore::operator==(v27 + 104, v28 + 104);
  if (v37 && !v34)
  {
LABEL_42:
    if (*(float *)(v27 + 168) != 0.0)
    {
      v36 = *(_BYTE *)(v27 + 172) & 0xF;
      if ((*(_BYTE *)(v27 + 172) & 0xF) != 0)
      {
        v46 = (WebCore::StyleColor *)(v27 + 152);
        if (*(_DWORD *)(v27 + 160))
          goto LABEL_61;
        v51 = *(_QWORD *)v46;
        if ((*(_QWORD *)v46 & 0x4000000000000) == 0)
          goto LABEL_61;
        if ((v51 & 0x8000000000000) != 0)
          goto LABEL_120;
        if (*(_QWORD *)v46)
          goto LABEL_61;
      }
    }
    while (1)
    {
      if (*(float *)(v27 + 144) != 0.0 && (*(_BYTE *)(v27 + 148) & 0xF) != 0)
      {
        v47 = (uint64_t *)(v27 + 128);
        v48 = *(unsigned int *)(v27 + 136);
        if (!(_DWORD)v48)
        {
          v52 = *v47;
          if ((*v47 & 0x4000000000000) != 0)
          {
            if ((v52 & 0x8000000000000) != 0)
            {
              if (*(float *)((v52 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
                goto LABEL_46;
            }
            else if (!*v47)
            {
              goto LABEL_46;
            }
          }
        }
        if ((*(_BYTE *)(v27 + 148) & 0xF) != 1)
        {
          *(_QWORD *)&v63 = &v62;
          *((_QWORD *)&v63 + 1) = &v62;
          v64 = &v62;
          v65 = &v62;
          if ((_DWORD)v48 == -1)
            goto LABEL_119;
          *(_QWORD *)v61 = &v63;
          if ((((uint64_t (*)(float *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v48])(v61, v47) & 1) != 0)goto LABEL_55;
        }
      }
LABEL_46:
      if (*(float *)(v27 + 192) != 0.0 && (*(_BYTE *)(v27 + 196) & 0xF) != 0)
      {
        v49 = (WebCore::StyleColor *)(v27 + 176);
        if (!*(_DWORD *)(v27 + 184))
        {
          v53 = *(_QWORD *)v49;
          if ((*(_QWORD *)v49 & 0x4000000000000) != 0)
          {
            if ((v53 & 0x8000000000000) != 0)
            {
              if (*(float *)((v53 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
                goto LABEL_48;
            }
            else if (!*(_QWORD *)v49)
            {
              goto LABEL_48;
            }
          }
        }
        if ((*(_BYTE *)(v27 + 196) & 0xF) != 1 && (WebCore::StyleColor::containsCurrentColor(v49) & 1) != 0)
          goto LABEL_55;
      }
LABEL_48:
      result = *(float *)(v27 + 120);
      if (result == 0.0 || (*(_BYTE *)(v27 + 124) & 0xF) == 0)
        return result;
      v50 = *(unsigned int *)(v27 + 112);
      if (!(_DWORD)v50)
      {
        v54 = *v35;
        if ((*v35 & 0x4000000000000) != 0)
        {
          if ((v54 & 0x8000000000000) != 0)
          {
            result = *(float *)((v54 & 0xFFFFFFFFFFFFLL) + 0x10);
            if (result <= 0.0)
              return result;
          }
          else if (!*v35)
          {
            return result;
          }
        }
      }
      if ((*(_BYTE *)(v27 + 124) & 0xF) == 1)
        return result;
      *(_QWORD *)&v63 = &v62;
      *((_QWORD *)&v63 + 1) = &v62;
      v64 = &v62;
      v65 = &v62;
      if ((_DWORD)v50 != -1)
      {
        *(_QWORD *)v61 = &v63;
        if ((((uint64_t (*)(float *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v50])(v61, v27 + 104) & 1) != 0)goto LABEL_55;
        return result;
      }
LABEL_119:
      v46 = (WebCore::StyleColor *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_120:
      if (*(float *)((v51 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
      {
LABEL_61:
        if (v36 != 1 && (WebCore::StyleColor::containsCurrentColor(v46) & 1) != 0)
          goto LABEL_55;
      }
    }
  }
  if ((v37 & 1) == 0)
  {
LABEL_55:
    WebCore::RenderTable::invalidateCollapsedBorders(v25, (WebCore::RenderTableCell *)a1);
    if (v4 == 8 && (*(_DWORD *)(v25 + 124) & 4) != 0)
    {
      v38 = (WebCore::RenderObject *)WebCore::RenderTable::cellBelow((WebCore::RenderTable *)v25, (const WebCore::RenderTableCell *)a1);
      WebCore::markCellDirtyWhenCollapsedBorderChanges(v38, v39);
      v40 = (WebCore::RenderObject *)WebCore::RenderTable::cellAbove((WebCore::RenderTable *)v25, (const WebCore::RenderTableCell *)a1);
      WebCore::markCellDirtyWhenCollapsedBorderChanges(v40, v41);
      v42 = (WebCore::RenderObject *)WebCore::RenderTable::cellBefore((WebCore::RenderTable *)v25, (const WebCore::RenderTableCell *)a1);
      WebCore::markCellDirtyWhenCollapsedBorderChanges(v42, v43);
      v44 = (WebCore::RenderObject *)WebCore::RenderTable::cellAfter((WebCore::RenderTable *)v25, (const WebCore::RenderTableCell *)a1);
      WebCore::markCellDirtyWhenCollapsedBorderChanges(v44, v45);
    }
  }
  return result;
}

uint64_t WebCore::StyleRareInheritedData::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const WTF::StringImpl *v5;
  WebCore::Length *v6;
  WebCore::Length *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WebCore::Length *v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  WebCore::Length *v18;
  float v19;
  float v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  int v29;
  int v30;
  WebCore::Length *v31;
  float v32;
  unint64_t v33;
  int32x2_t *v34;
  int32x2_t *v35;
  int32x2_t *v36;
  int32x2_t *v37;
  uint64_t v38;
  unint64_t v39;
  int32x2_t v40;
  int32x2_t v41;
  int32x2_t v42;
  int32x2_t v43;
  float v44;
  WTF **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  const WTF::StringImpl **v60;
  WTF **v61;
  const WTF::StringImpl *v62;

  result = WebCore::StyleColor::operator==(a1 + 16, a2 + 16);
  if (!(_DWORD)result)
    return result;
  if (*(float *)(a1 + 4) != *(float *)(a2 + 4))
    return 0;
  result = WebCore::StyleColor::operator==(a1 + 32, a2 + 32);
  if (!(_DWORD)result)
    return result;
  result = WebCore::StyleColor::operator==(a1 + 48, a2 + 48);
  if (!(_DWORD)result)
    return result;
  result = WebCore::StyleColor::operator==(a1 + 64, a2 + 64);
  if (!(_DWORD)result)
    return result;
  result = WebCore::StyleColor::operator==(a1 + 80, a2 + 80);
  if (!(_DWORD)result)
    return result;
  result = WebCore::StyleColor::operator==(a1 + 96, a2 + 96);
  if (!(_DWORD)result)
    return result;
  result = WebCore::StyleColor::operator==(a1 + 112, a2 + 112);
  if (!(_DWORD)result)
    return result;
  result = WebCore::StyleColor::operator==(a1 + 128, a2 + 128);
  if (!(_DWORD)result)
    return result;
  result = WebCore::StyleColor::operator==(a1 + 144, a2 + 144);
  if (!(_DWORD)result)
    return result;
  result = WebCore::StyleColor::operator==(a1 + 352, a2 + 352);
  if (!(_DWORD)result)
    return result;
  v6 = *(WebCore::Length **)(a1 + 160);
  v7 = *(WebCore::Length **)(a2 + 160);
  if (v6 != v7)
  {
    result = 0;
    if (!v6)
      return result;
    if (!v7)
      return result;
    result = WebCore::ShadowData::operator==(*(WebCore::Length **)(a1 + 160), v7);
    if (!(_DWORD)result)
      return result;
  }
  v8 = *(_QWORD *)(a1 + 168);
  v9 = *(_QWORD *)(a2 + 168);
  if (v8 != v9)
  {
    result = 0;
    if (!v8 || !v9)
      return result;
    v33 = *(unsigned int *)(v8 + 20);
    if ((_DWORD)v33 != *(_DWORD *)(v9 + 20))
      return 0;
    if ((_DWORD)v33)
    {
      v34 = *(int32x2_t **)(v8 + 8);
      v35 = *(int32x2_t **)(v9 + 8);
      if (*v34 != *v35)
        return 0;
      result = 0;
      if (v34[1].i32[0] != v35[1].i32[0] || v34[1].i32[1] != v35[1].i32[1])
        return result;
      v36 = v34 + 3;
      v37 = v35 + 3;
      v38 = 1;
      while (v33 != v38)
      {
        v39 = v38;
        if (*(_QWORD *)&v36[-1] == *(_QWORD *)&v37[-1])
        {
          v40 = *v36;
          v36 += 2;
          v41 = v40;
          v42 = *v37;
          v37 += 2;
          v43 = vceq_s32(v41, v42);
          ++v38;
          if ((v43.i32[0] & v43.i32[1] & 1) != 0)
            continue;
        }
        if (v39 >= v33)
          break;
        return 0;
      }
    }
  }
  v10 = *(unsigned __int8 *)(a1 + 180);
  if (v10 != *(unsigned __int8 *)(a2 + 180) || (*(_BYTE *)(a1 + 181) != 0) != (*(_BYTE *)(a2 + 181) != 0))
    return 0;
  if (v10 != 13)
  {
    v11 = (WebCore::Length *)(a1 + 176);
    if (v10 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v11, (const WebCore::Length *)(a2 + 176)) & 1) == 0)
        return 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 182))
        v12 = *(float *)v11;
      else
        v12 = (float)*(int *)v11;
      v13 = *(float *)(a2 + 176);
      if (!*(_BYTE *)(a2 + 182))
        v13 = (float)SLODWORD(v13);
      if (v12 != v13)
        return 0;
    }
  }
  if (*(float *)(a1 + 184) != *(float *)(a2 + 184))
    return 0;
  v14 = *(_QWORD *)(a1 + 188);
  v15 = *(_QWORD *)(a2 + 188);
  v16 = v15 & 0xFF00000000;
  if ((v14 & 0xFF00000000) != 0 && v16)
  {
    if (*(float *)&v14 != *(float *)&v15)
      return 0;
  }
  else if (((v14 & 0xFF00000000) != 0) != (v16 != 0))
  {
    return 0;
  }
  result = 0;
  if (*(unsigned __int8 *)(a1 + 196) != *(unsigned __int8 *)(a2 + 196)
    || *(unsigned __int8 *)(a1 + 197) != *(unsigned __int8 *)(a2 + 197))
  {
    return result;
  }
  v17 = *(unsigned __int8 *)(a1 + 204);
  if (v17 != *(unsigned __int8 *)(a2 + 204) || (*(_BYTE *)(a1 + 205) != 0) != (*(_BYTE *)(a2 + 205) != 0))
    return 0;
  if (v17 != 13)
  {
    v18 = (WebCore::Length *)(a1 + 200);
    if (v17 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v18, (const WebCore::Length *)(a2 + 200)) & 1) == 0)
        return 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 206))
        v19 = *(float *)v18;
      else
        v19 = (float)*(int *)v18;
      v20 = *(float *)(a2 + 200);
      if (!*(_BYTE *)(a2 + 206))
        v20 = (float)SLODWORD(v20);
      if (v19 != v20)
        return 0;
    }
  }
  if (*(float *)(a1 + 208) != *(float *)(a2 + 208))
    return 0;
  if (*(unsigned __int16 *)(a1 + 224) != *(unsigned __int16 *)(a2 + 224))
    return 0;
  if (*(unsigned __int16 *)(a1 + 226) != *(unsigned __int16 *)(a2 + 226))
    return 0;
  v21 = *(_DWORD *)(a2 + 228) ^ *(_DWORD *)(a1 + 228);
  if ((v21 & 0x7FFF) != 0)
    return 0;
  v22 = *(_DWORD *)(a2 + 232) ^ *(_DWORD *)(a1 + 232);
  if ((v22 & 0x400000) != 0)
    return 0;
  result = 0;
  if ((v21 & 0xFD8000) != 0 || *(float *)(a1 + 344) != *(float *)(a2 + 344))
    return result;
  if (*(unsigned __int16 *)(a1 + 296) != *(unsigned __int16 *)(a2 + 296)
    || *(unsigned __int16 *)(a1 + 298) != *(unsigned __int16 *)(a2 + 298)
    || *(unsigned __int16 *)(a1 + 300) != *(unsigned __int16 *)(a2 + 300))
  {
    return 0;
  }
  result = 0;
  if (v21 & 0x1F000000 | v22 & 0x7FFF
    || *(unsigned __int8 *)(a1 + 302) != *(unsigned __int8 *)(a2 + 302)
    || *(unsigned __int8 *)(a1 + 303) != *(unsigned __int8 *)(a2 + 303))
  {
    return result;
  }
  if (((*(_DWORD *)(a2 + 236) ^ *(_DWORD *)(a1 + 236)) & 0x40) != 0
    || *(_QWORD *)(a1 + 288) != *(_QWORD *)(a2 + 288)
    || *(_QWORD *)(a1 + 304) != *(_QWORD *)(a2 + 304))
  {
    return 0;
  }
  v23 = *(_QWORD *)(a1 + 312);
  v24 = *(_QWORD *)(a2 + 312);
  if (v23 != v24)
  {
    result = 0;
    if (!v23 || !v24)
      return result;
    v58 = *(_DWORD *)(v23 + 4);
    if (v58 != *(_DWORD *)(v24 + 4))
      return 0;
    if (v58)
    {
      v59 = 0;
      v60 = (const WTF::StringImpl **)(v24 + 16);
      v61 = (WTF **)(v23 + 16);
      do
      {
        result = WTF::equal(*(v61 - 1), *(v60 - 1), v5);
        if (!(_DWORD)result)
          return result;
        if ((WTF::equal(*v61, *v60, v62) & 1) == 0)
          return 0;
        ++v59;
        v60 += 2;
        v61 += 2;
      }
      while (v59 < *(unsigned int *)(v23 + 4));
    }
  }
  v25 = *(_QWORD *)(a1 + 320);
  v26 = *(_QWORD *)(a2 + 320);
  if (v25 == v26)
    goto LABEL_109;
  v51 = *(unsigned int *)(v25 + 20);
  if ((_DWORD)v51 != *(_DWORD *)(v26 + 20))
    return 0;
  v52 = *(_QWORD *)(v26 + 8);
  v53 = *(_QWORD **)(v25 + 8);
  if ((_DWORD)v51)
  {
    v54 = 8 * v51 - 8;
    v55 = v53;
    v56 = *(_QWORD **)(v26 + 8);
    while (1)
    {
      v57 = v54;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v55 + 24))(*v55, *v56);
      if (!(_DWORD)result)
        return result;
      ++v55;
      ++v56;
      v54 = v57 - 8;
      if (!v57)
        goto LABEL_122;
    }
  }
  v56 = *(_QWORD **)(v26 + 8);
  v55 = *(_QWORD **)(v25 + 8);
LABEL_122:
  result = 0;
  if (v55 == &v53[v51] && v56 == (_QWORD *)(v52 + 8 * v51))
  {
LABEL_109:
    if (*(float *)(a1 + 336) != *(float *)(a2 + 336)
      || *(unsigned __int8 *)(a1 + 340) != *(unsigned __int8 *)(a2 + 340))
    {
      return 0;
    }
    if (*(_QWORD *)(a1 + 328) != *(_QWORD *)(a2 + 328))
      return 0;
    v28 = *(_DWORD *)(a2 + 232) ^ *(_DWORD *)(a1 + 232);
    if ((v28 & 0x3F878000) != 0)
      return 0;
    v29 = *(_DWORD *)(a2 + 236) ^ *(_DWORD *)(a1 + 236);
    if (v29 & 0x6FFFFBF | v28 & 0x380000 || *(unsigned __int8 *)(a1 + 240) != *(unsigned __int8 *)(a2 + 240))
      return 0;
    result = 0;
    if ((v29 & 0x19000000) != 0 || *(unsigned __int8 *)(a1 + 241) != *(unsigned __int8 *)(a2 + 241))
      return result;
    v30 = *(unsigned __int8 *)(a1 + 248);
    if (v30 != *(unsigned __int8 *)(a2 + 248) || (*(_BYTE *)(a1 + 249) != 0) != (*(_BYTE *)(a2 + 249) != 0))
      return 0;
    if (v30 != 13)
    {
      v31 = (WebCore::Length *)(a1 + 244);
      if (v30 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual(v31, (const WebCore::Length *)(a2 + 244)) & 1) == 0)
          return 0;
      }
      else
      {
        if (*(_BYTE *)(a1 + 250))
          v32 = *(float *)v31;
        else
          v32 = (float)*(int *)v31;
        v44 = *(float *)(a2 + 244);
        if (!*(_BYTE *)(a2 + 250))
          v44 = (float)SLODWORD(v44);
        if (v32 != v44)
          return 0;
      }
    }
    result = WebCore::StyleColor::operator==(a1 + 256, a2 + 256);
    if ((_DWORD)result)
    {
      result = WebCore::StyleColor::operator==(a1 + 272, a2 + 272);
      if ((_DWORD)result)
      {
        v45 = *(WTF ***)(a1 + 216);
        v46 = *(_QWORD *)(a2 + 216);
        if (v45 == (WTF **)v46 || (result = WebCore::StyleCustomPropertyData::operator==(v45, v46), (_DWORD)result))
        {
          v47 = *(_QWORD *)(a1 + 8);
          v48 = *(_QWORD *)(a2 + 8);
          if (v47 == v48
            || (result = 0, v47)
            && v48
            && (result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v47 + 16))(*(_QWORD *)(a1 + 8)), (_DWORD)result))
          {
            result = 0;
            if (*(unsigned __int8 *)(a1 + 368) == *(unsigned __int8 *)(a2 + 368)
              && *(_QWORD *)(a1 + 376) == *(_QWORD *)(a2 + 376))
            {
              v49 = (unint64_t *)(a1 + 384);
              if (*(_DWORD *)(a1 + 392))
              {
                if (!*(_DWORD *)(a2 + 392) && (*(_BYTE *)(a2 + 390) & 4) == 0)
                  return 0;
              }
              else
              {
                v50 = *v49;
                if (!*(_DWORD *)(a2 + 392))
                {
                  if (((v50 >> 50) & 1) == (*(_BYTE *)(a2 + 390) & 4) >> 2)
                  {
                    if ((v50 & 0x4000000000000) == 0)
                      return 1;
                    goto LABEL_144;
                  }
                  return 0;
                }
                if ((v50 & 0x4000000000000) == 0)
                  return 0;
              }
LABEL_144:
              result = WebCore::StyleColor::operator==((uint64_t)v49, a2 + 384);
              if ((_DWORD)result)
                return WebCore::StyleColor::operator==(a1 + 400, a2 + 400);
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL WebCore::RenderStyle::changeRequiresRepaint(uint64_t a1, uint64_t a2, WebCore::CSSValue *a3)
{
  uint64_t v3;
  uint64_t (**v4)();
  uint64_t (**v5)();
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::CSSValue *v23;
  uint64_t v24;
  int v25;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _BOOL4 v34;
  _BOOL4 v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  _BOOL8 result;
  uint64_t v48;
  uint64_t v49;
  int v50;
  float v51;
  float v52;
  int v53;
  float v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL4 v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  WebCore::StyleColor *v67;
  uint64_t *v68;
  uint64_t v69;
  WebCore::StyleColor *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  const WTF::StringImpl *v81;
  uint64_t v82;
  uint64_t (**v83)();
  uint64_t v84;
  uint64_t v85;
  uint64_t (*v86)();
  uint64_t v87;
  int v88;
  uint64_t i;
  uint64_t v90;
  int v91;
  unsigned int j;
  uint64_t v93;
  uint64_t (*v94)();
  uint64_t k;
  uint64_t v97;
  int v98;
  unsigned int m;
  uint64_t v100;
  uint64_t (*v101)();
  uint64_t v103;
  uint64_t (*v104)();
  uint64_t v105;
  int v106;
  unsigned int n;
  uint64_t v108;
  uint64_t (*v109)();
  uint64_t v111;
  uint64_t (*v112)();
  uint64_t v113;
  int v114;
  unsigned int ii;
  uint64_t v116;
  uint64_t (*v117)();
  int v119;
  uint64_t (**v120)();
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  WebCore::Node *v132;
  uint64_t v133;
  WTF::StringImpl **v134;
  WTF::StringImpl *v135;
  uint64_t v136;
  WTF::StringImpl **v137;
  WTF::StringImpl *v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  _BOOL4 v146;
  _BOOL4 v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  _BOOL4 v153;
  _BOOL4 v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  _BOOL4 v160;
  _BOOL4 v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  _BOOL4 v166;
  _BOOL4 v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  _BOOL4 v172;
  _BOOL4 v173;
  const WTF::StringImpl *v174;
  uint64_t v175;
  uint64_t v176;
  WebCore::CSSValueContainingVector *v177;
  const WebCore::CSSValue *v178;
  WebCore::Node *v179[2];
  WTF::StringImpl *v180;
  WebCore::CSSValue **v181;
  char v182;
  WebCore::CSSValue *v183;
  WebCore::CSSValue *v184;
  __int128 v185;
  uint64_t v186;

  v186 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(v9 + 328);
  v12 = *(_QWORD *)(v10 + 328);
  if ((v11 & 0x8000000000000) == 0)
  {
    if (v11 != v12 || (v12 & 0x8000000000000) != 0)
      goto LABEL_347;
LABEL_7:
    v14 = 0;
    v15 = 1;
    if (*(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56))
      goto LABEL_8;
    goto LABEL_348;
  }
  if ((v12 & 0x8000000000000) != 0)
  {
    *(_OWORD *)v179 = *(_OWORD *)((v11 & 0xFFFFFFFFFFFFLL) + 4);
    v185 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFLL) + 4);
    if (WebCore::operator==<float,4ul>((float *)v179, (float *)&v185))
    {
      v139 = *(_QWORD *)(v9 + 328);
      v140 = *(_QWORD *)(v10 + 328);
      if (HIBYTE(v139) == HIBYTE(v140) && BYTE6(v139) == BYTE6(v140))
        goto LABEL_7;
    }
  }
LABEL_347:
  v15 = 0;
  v14 = 1;
LABEL_348:
  v141 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(uint64_t (***)())(v141 + 24);
  v142 = *(_QWORD *)(v3 + 24);
  if (*((float *)v4 + 1) != *(float *)(v142 + 4))
    return 1;
  v23 = (WebCore::CSSValue *)(v4 + 1);
  v143 = *((unsigned int *)v4 + 4);
  v144 = *(_DWORD *)(v142 + 16);
  v146 = v144 == (_DWORD)v143 && v144 != -1;
  if ((_DWORD)v143 == -1 || !v146)
  {
    v148 = v144 == -1;
    if ((_DWORD)v143 != -1)
      v148 = v146;
    if (!v148)
      return 1;
  }
  else
  {
    v179[0] = (WebCore::Node *)&v185;
    if (!((unsigned int (*)(WebCore::Node **, uint64_t (**)(), uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v143])(v179, v4 + 1, v142 + 8))return 1;
    LODWORD(v143) = *((_DWORD *)v4 + 4);
  }
  v179[0] = (WebCore::Node *)&v184;
  v179[1] = (WebCore::Node *)&v184;
  v180 = (WTF::StringImpl *)&v184;
  v181 = &v184;
  if ((_DWORD)v143 == -1)
    goto LABEL_443;
  *(_QWORD *)&v185 = v179;
  v4 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix;
  if ((v14 & ((unsigned int (*)(__int128 *, WebCore::CSSValue *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v143])(&v185, v23) & 1) != 0)return 1;
  v5 = *(uint64_t (***)())(v141 + 24);
  v23 = (WebCore::CSSValue *)(v5 + 3);
  v149 = *(_QWORD *)(v3 + 24);
  v150 = *((unsigned int *)v5 + 8);
  v151 = *(_DWORD *)(v149 + 32);
  v153 = v151 == (_DWORD)v150 && v151 != -1;
  if ((_DWORD)v150 == -1 || !v153)
  {
    v155 = v151 == -1;
    if ((_DWORD)v150 != -1)
      v155 = v153;
    if (!v155)
      return 1;
  }
  else
  {
    v179[0] = (WebCore::Node *)&v185;
    if (!((unsigned int (*)(WebCore::Node **, uint64_t (**)(), uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v150])(v179, v5 + 3, v149 + 24))return 1;
    LODWORD(v150) = *((_DWORD *)v5 + 8);
  }
  v179[0] = (WebCore::Node *)&v184;
  v179[1] = (WebCore::Node *)&v184;
  v180 = (WTF::StringImpl *)&v184;
  v181 = &v184;
  if ((_DWORD)v150 == -1)
    goto LABEL_443;
  *(_QWORD *)&v185 = v179;
  if ((v14 & ((unsigned int (*)(__int128 *, uint64_t (**)()))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v150])(&v185, v5 + 3) & 1) != 0)return 1;
  v5 = *(uint64_t (***)())(v141 + 56);
  v23 = (WebCore::CSSValue *)(v5 + 1);
  v156 = *(_QWORD *)(v3 + 56);
  v157 = *((unsigned int *)v5 + 4);
  v158 = *(_DWORD *)(v156 + 16);
  v160 = v158 == (_DWORD)v157 && v158 != -1;
  if ((_DWORD)v157 == -1 || !v160)
  {
    v161 = v158 == -1;
    if ((_DWORD)v157 != -1)
      v161 = v160;
    if (!v161)
      return 1;
  }
  else
  {
    v179[0] = (WebCore::Node *)&v185;
    if (!((unsigned int (*)(WebCore::Node **, uint64_t (**)(), uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v157])(v179, v5 + 1, v156 + 8))return 1;
    LODWORD(v157) = *((_DWORD *)v5 + 4);
  }
  v179[0] = (WebCore::Node *)&v184;
  v179[1] = (WebCore::Node *)&v184;
  v180 = (WTF::StringImpl *)&v184;
  v181 = &v184;
  if ((_DWORD)v157 == -1)
    goto LABEL_443;
  *(_QWORD *)&v185 = v179;
  if ((v14 & ((unsigned int (*)(__int128 *, uint64_t (**)()))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v157])(&v185, v5 + 1) & 1) != 0)return 1;
  v5 = *(uint64_t (***)())(v141 + 56);
  v162 = *(_QWORD *)(v3 + 56);
  if (*((float *)v5 + 1) != *(float *)(v162 + 4))
    return 1;
  v23 = (WebCore::CSSValue *)(v5 + 3);
  v163 = *((unsigned int *)v5 + 8);
  v164 = *(_DWORD *)(v162 + 32);
  v166 = v164 == (_DWORD)v163 && v164 != -1;
  if ((_DWORD)v163 == -1 || !v166)
  {
    v167 = v164 == -1;
    if ((_DWORD)v163 != -1)
      v167 = v166;
    if (!v167)
      return 1;
  }
  else
  {
    v179[0] = (WebCore::Node *)&v185;
    if (!((unsigned int (*)(WebCore::Node **, uint64_t (**)(), uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v163])(v179, v5 + 3, v162 + 24))return 1;
    LODWORD(v163) = *((_DWORD *)v5 + 8);
  }
  v179[0] = (WebCore::Node *)&v184;
  v179[1] = (WebCore::Node *)&v184;
  v180 = (WTF::StringImpl *)&v184;
  v181 = &v184;
  if ((_DWORD)v163 == -1)
    goto LABEL_443;
  *(_QWORD *)&v185 = v179;
  if ((v14 & ((unsigned int (*)(__int128 *, uint64_t (**)()))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v163])(&v185, v5 + 3) & 1) != 0)return 1;
  v5 = *(uint64_t (***)())(v141 + 16);
  v168 = *(_QWORD *)(v3 + 16);
  if (*((unsigned __int8 *)v5 + 56) != *(unsigned __int8 *)(v168 + 56))
    return 1;
  v23 = (WebCore::CSSValue *)(v5 + 1);
  v169 = *((unsigned int *)v5 + 4);
  v170 = *(_DWORD *)(v168 + 16);
  v172 = v170 == (_DWORD)v169 && v170 != -1;
  if ((_DWORD)v169 == -1 || !v172)
  {
    v173 = v170 == -1;
    if ((_DWORD)v169 != -1)
      v173 = v172;
    if (!v173)
      return 1;
  }
  else
  {
    v179[0] = (WebCore::Node *)&v185;
    if (!((unsigned int (*)(WebCore::Node **, uint64_t (**)(), uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v169])(v179, v5 + 1, v168 + 8))return 1;
    LODWORD(v169) = *((_DWORD *)v5 + 4);
  }
  v179[0] = (WebCore::Node *)&v184;
  v179[1] = (WebCore::Node *)&v184;
  v180 = (WTF::StringImpl *)&v184;
  v181 = &v184;
  if ((_DWORD)v169 == -1)
    goto LABEL_443;
  *(_QWORD *)&v185 = v179;
  if ((v14 & ((unsigned int (*)(__int128 *, uint64_t (**)()))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v169])(&v185, v5 + 1) & 1) != 0)return 1;
  if (!WTF::equal(*(WTF **)(*(_QWORD *)(v141 + 16) + 40), *(const WTF::StringImpl **)(*(_QWORD *)(v3 + 16) + 40), v174))return 1;
  if (*(float *)(*(_QWORD *)(v141 + 16) + 4) != *(float *)(*(_QWORD *)(v3 + 16) + 4))
    return 1;
  v175 = *(_QWORD *)(v141 + 48);
  v176 = *(_QWORD *)(v3 + 48);
  if (v175 != v176
    && (*(float *)(v175 + 4) != *(float *)(v176 + 4)
     || !WebCore::StyleColor::operator==(v175 + 8, v176 + 8)))
  {
    return 1;
  }
  if (((*(_WORD *)(v3 + 4) ^ *(_WORD *)(v141 + 4)) & 0x3CF) != 0
    || ((*(_WORD *)(v3 + 8) ^ *(_WORD *)(v141 + 8)) & 0x3800) != 0)
  {
    return 1;
  }
LABEL_8:
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 24) + 239) & 4) != 0
    || (v16 = *(_DWORD *)(a1 + 40), (v16 & 0x30) == 0x10)
    || *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 4) == 0.0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 239) & 4) != 0)
      return 0;
    v17 = *(_DWORD *)(a2 + 40);
    if ((v17 & 0x30) == 0x10 || *(float *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 32) + 4) == 0.0)
      return 0;
    v16 = *(_DWORD *)(a1 + 40);
  }
  else
  {
    v17 = *(_DWORD *)(a2 + 40);
  }
  if (((v16 ^ v17) & 0x30) != 0
    || ((*(_DWORD *)(a2 + 44) ^ *(_DWORD *)(a1 + 44)) & 0x1C20) != 0)
  {
    return 1;
  }
  v18 = *(_QWORD **)(a1 + 8);
  if (!(_DWORD)v15)
  {
    v28 = v18[2];
    v15 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 16);
    v29 = *(_QWORD *)(v28 + 8);
    v30 = *(_QWORD *)(v15 + 8);
    if (v29 != v30 && !WebCore::FillLayer::operator==(v29, v30))
      return 1;
    v23 = (WebCore::CSSValue *)(v28 + 16);
    v31 = *(unsigned int *)(v28 + 24);
    v32 = *(_DWORD *)(v15 + 24);
    v34 = v32 == (_DWORD)v31 && v32 != -1;
    if ((_DWORD)v31 == -1 || !v34)
    {
      v36 = v32 == -1;
      if ((_DWORD)v31 == -1)
        v37 = v36;
      else
        v37 = v34;
      if (!v37)
        return 1;
    }
    else
    {
      v179[0] = (WebCore::Node *)&v185;
      if ((((uint64_t (*)(WebCore::Node **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v31])(v179, v28 + 16, v15 + 16) & 1) == 0)return 1;
    }
    if ((_DWORD)v14)
    {
      v179[0] = (WebCore::Node *)&v184;
      v179[1] = (WebCore::Node *)&v184;
      v180 = (WTF::StringImpl *)&v184;
      v181 = &v184;
      v38 = *(unsigned int *)(v28 + 24);
      if ((_DWORD)v38 == -1)
        goto LABEL_443;
      *(_QWORD *)&v185 = v179;
      if ((((uint64_t (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v38])(&v185, v28 + 16) & 1) != 0)return 1;
    }
    v39 = (uint64_t *)(v28 + 32);
    if (*(float *)(v28 + 48) != 0.0 && (*(_BYTE *)(v28 + 52) & 0xF) != 0)
    {
      if (!*(_DWORD *)(v28 + 40))
      {
        v76 = *v39;
        if ((*v39 & 0x4000000000000) != 0)
        {
          if ((v76 & 0x8000000000000) != 0)
          {
            if (*(float *)((v76 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
              goto LABEL_51;
          }
          else if (!*v39)
          {
            goto LABEL_51;
          }
        }
      }
      if ((*(_BYTE *)(v28 + 52) & 0xF) != 1)
      {
LABEL_151:
        if ((_DWORD)v14 && (WebCore::StyleColor::containsCurrentColor((WebCore::StyleColor *)(v28 + 32)) & 1) != 0
          || !WebCore::operator==(v28 + 32, v15 + 32))
        {
          return 1;
        }
        goto LABEL_53;
      }
    }
LABEL_51:
    if (*(float *)(v15 + 48) == 0.0 || (*(_BYTE *)(v15 + 52) & 0xF) == 0)
      goto LABEL_53;
    if (!*(_DWORD *)(v15 + 40))
    {
      v77 = *(_QWORD *)(v15 + 32);
      if ((v77 & 0x4000000000000) != 0)
      {
        if ((v77 & 0x8000000000000) != 0)
        {
          if (*(float *)((v77 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
            goto LABEL_53;
        }
        else if (!*(_QWORD *)(v15 + 32))
        {
          goto LABEL_53;
        }
      }
    }
    if ((*(_BYTE *)(v15 + 52) & 0xF) != 1)
      goto LABEL_151;
LABEL_53:
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
    v40 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24);
    goto LABEL_54;
  }
  v15 = a2 + 8;
  v19 = *(_QWORD **)(a2 + 8);
  if (v18 == v19)
    goto LABEL_66;
  v3 = v18[2];
  v20 = v19[2];
  if (v3 != v20)
  {
    v21 = *(_QWORD *)(v3 + 8);
    v22 = *(_QWORD *)(v20 + 8);
    if (v21 != v22 && !WebCore::FillLayer::operator==(v21, v22))
      return 1;
    v23 = (WebCore::CSSValue *)(v3 + 16);
    v24 = *(unsigned int *)(v3 + 24);
    v25 = *(_DWORD *)(v20 + 24);
    v27 = v25 == (_DWORD)v24 && v25 != -1;
    if ((_DWORD)v24 == -1 || !v27)
    {
      v60 = v25 == -1;
      if ((_DWORD)v24 == -1)
        v61 = v60;
      else
        v61 = v27;
      if (!v61)
        return 1;
    }
    else
    {
      v179[0] = (WebCore::Node *)&v185;
      if ((((uint64_t (*)(WebCore::Node **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v24])(v179, v3 + 16, v20 + 16) & 1) == 0)return 1;
    }
    if (!(_DWORD)v14)
      goto LABEL_106;
    v179[0] = (WebCore::Node *)&v184;
    v179[1] = (WebCore::Node *)&v184;
    v180 = (WTF::StringImpl *)&v184;
    v181 = &v184;
    v62 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v62 == -1)
      goto LABEL_443;
    *(_QWORD *)&v185 = v179;
    if ((((uint64_t (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v62])(&v185, v3 + 16) & 1) == 0)
    {
LABEL_106:
      v63 = (uint64_t *)(v3 + 32);
      if (*(float *)(v3 + 48) != 0.0 && (*(_BYTE *)(v3 + 52) & 0xF) != 0)
      {
        if (!*(_DWORD *)(v3 + 40))
        {
          v78 = *v63;
          if ((*v63 & 0x4000000000000) != 0)
          {
            if ((v78 & 0x8000000000000) != 0)
            {
              if (*(float *)((v78 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
                goto LABEL_108;
            }
            else if (!*v63)
            {
              goto LABEL_108;
            }
          }
        }
        if ((*(_BYTE *)(v3 + 52) & 0xF) != 1)
        {
LABEL_162:
          if ((_DWORD)v14 && (WebCore::StyleColor::containsCurrentColor((WebCore::StyleColor *)(v3 + 32)) & 1) != 0
            || !WebCore::operator==(v3 + 32, v20 + 32))
          {
            return 1;
          }
          goto LABEL_110;
        }
      }
LABEL_108:
      if (*(float *)(v20 + 48) == 0.0 || (*(_BYTE *)(v20 + 52) & 0xF) == 0)
        goto LABEL_110;
      if (!*(_DWORD *)(v20 + 40))
      {
        v79 = *(_QWORD *)(v20 + 32);
        if ((v79 & 0x4000000000000) != 0)
        {
          if ((v79 & 0x8000000000000) != 0)
          {
            if (*(float *)((v79 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
              goto LABEL_110;
          }
          else if (!*(_QWORD *)(v20 + 32))
          {
            goto LABEL_110;
          }
        }
      }
      if ((*(_BYTE *)(v20 + 52) & 0xF) != 1)
        goto LABEL_162;
LABEL_110:
      v18 = *(_QWORD **)(a1 + 8);
      v19 = *(_QWORD **)v15;
      goto LABEL_111;
    }
    return 1;
  }
LABEL_111:
  v41 = v18;
  v15 = v18[3];
  v40 = v19[3];
  v18 = v19;
  if (v15 != v40)
  {
LABEL_54:
    v23 = (WebCore::CSSValue *)(v15 + 104);
    if (v15 == v40)
    {
      if (!(_DWORD)v14)
        goto LABEL_64;
    }
    else
    {
      v64 = WebCore::operator==(v15 + 104, v40 + 104);
      if ((v14 & v64 & 1) == 0)
      {
        if (!v64)
          return 1;
        goto LABEL_64;
      }
    }
    if (*(float *)(v15 + 168) != 0.0 && (*(_BYTE *)(v15 + 172) & 0xF) != 0)
    {
      v67 = (WebCore::StyleColor *)(v15 + 152);
      if (!*(_DWORD *)(v15 + 160))
      {
        v72 = *(_QWORD *)v67;
        if ((*(_QWORD *)v67 & 0x4000000000000) != 0)
        {
          if ((v72 & 0x8000000000000) != 0)
          {
            if (*(float *)((v72 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
              goto LABEL_58;
          }
          else if (!*(_QWORD *)v67)
          {
            goto LABEL_58;
          }
        }
      }
      if ((*(_BYTE *)(v15 + 172) & 0xF) != 1 && (WebCore::StyleColor::containsCurrentColor(v67) & 1) != 0)
        return 1;
    }
LABEL_58:
    if (*(float *)(v15 + 144) != 0.0 && (*(_BYTE *)(v15 + 148) & 0xF) != 0)
    {
      v68 = (uint64_t *)(v15 + 128);
      v69 = *(unsigned int *)(v15 + 136);
      if (!(_DWORD)v69)
      {
        v73 = *v68;
        if ((*v68 & 0x4000000000000) != 0)
        {
          if ((v73 & 0x8000000000000) != 0)
          {
            if (*(float *)((v73 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
              goto LABEL_60;
          }
          else if (!*v68)
          {
            goto LABEL_60;
          }
        }
      }
      if ((*(_BYTE *)(v15 + 148) & 0xF) != 1)
      {
        v179[0] = (WebCore::Node *)&v184;
        v179[1] = (WebCore::Node *)&v184;
        v180 = (WTF::StringImpl *)&v184;
        v181 = &v184;
        if ((_DWORD)v69 == -1)
          goto LABEL_443;
        *(_QWORD *)&v185 = v179;
        if ((((uint64_t (*)(__int128 *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v69])(&v185, v68) & 1) != 0)return 1;
      }
    }
LABEL_60:
    if (*(float *)(v15 + 192) == 0.0 || (*(_BYTE *)(v15 + 196) & 0xF) == 0)
      goto LABEL_62;
    v70 = (WebCore::StyleColor *)(v15 + 176);
    if (!*(_DWORD *)(v15 + 184))
    {
      v74 = *(_QWORD *)v70;
      if ((*(_QWORD *)v70 & 0x4000000000000) != 0)
      {
        if ((v74 & 0x8000000000000) != 0)
        {
          if (*(float *)((v74 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
            goto LABEL_138;
        }
        else if (*(_QWORD *)v70)
        {
          goto LABEL_138;
        }
LABEL_62:
        if (*(float *)(v15 + 120) == 0.0 || (*(_BYTE *)(v15 + 124) & 0xF) == 0)
          goto LABEL_64;
        v71 = *(unsigned int *)(v15 + 112);
        if (!(_DWORD)v71)
        {
          v75 = *(_QWORD *)v23;
          if ((*(_QWORD *)v23 & 0x4000000000000) != 0)
          {
            if ((v75 & 0x8000000000000) != 0)
            {
              if (*(float *)((v75 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
                goto LABEL_64;
            }
            else if (!*(_QWORD *)v23)
            {
              goto LABEL_64;
            }
          }
        }
        if ((*(_BYTE *)(v15 + 124) & 0xF) != 1)
        {
          v179[0] = (WebCore::Node *)&v184;
          v179[1] = (WebCore::Node *)&v184;
          v180 = (WTF::StringImpl *)&v184;
          v181 = &v184;
          if ((_DWORD)v71 != -1)
          {
            *(_QWORD *)&v185 = v179;
            if ((((uint64_t (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v71])(&v185, v15 + 104) & 1) != 0)return 1;
            goto LABEL_64;
          }
LABEL_443:
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_444;
        }
LABEL_64:
        v41 = *(_QWORD **)(a1 + 8);
        v18 = *(_QWORD **)(a2 + 8);
        goto LABEL_65;
      }
    }
LABEL_138:
    if ((*(_BYTE *)(v15 + 196) & 0xF) != 1 && (WebCore::StyleColor::containsCurrentColor(v70) & 1) != 0)
      return 1;
    goto LABEL_62;
  }
LABEL_65:
  v15 = a2 + 8;
  if (v41 != v18)
  {
    v48 = v41[4];
    v49 = v18[4];
    if (v48 != v49)
    {
      if (((*(_DWORD *)(v49 + 148) ^ *(_DWORD *)(v48 + 148)) & 0x7C00000) != 0)
        return 1;
      v50 = *(unsigned __int8 *)(v48 + 132);
      if (v50 != *(unsigned __int8 *)(v49 + 132) || (*(_BYTE *)(v48 + 133) != 0) != (*(_BYTE *)(v49 + 133) != 0))
        return 1;
      if (v50 != 13)
      {
        if (v50 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v48 + 128), (const WebCore::Length *)(v49 + 128)) & 1) == 0)
            return 1;
        }
        else
        {
          v51 = *(float *)(v48 + 128);
          if (!*(_BYTE *)(v48 + 134))
            v51 = (float)SLODWORD(v51);
          v52 = *(float *)(v49 + 128);
          if (!*(_BYTE *)(v49 + 134))
            v52 = (float)SLODWORD(v52);
          if (v51 != v52)
            return 1;
        }
      }
      v53 = *(unsigned __int8 *)(v48 + 140);
      if (v53 != *(unsigned __int8 *)(v49 + 140) || (*(_BYTE *)(v48 + 141) != 0) != (*(_BYTE *)(v49 + 141) != 0))
        return 1;
      if (v53 != 13)
      {
        if (v53 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v48 + 136), (const WebCore::Length *)(v49 + 136)) & 1) == 0)
            return 1;
        }
        else
        {
          v54 = *(float *)(v48 + 136);
          if (!*(_BYTE *)(v48 + 142))
            v54 = (float)SLODWORD(v54);
          v55 = *(float *)(v49 + 136);
          if (!*(_BYTE *)(v49 + 142))
            v55 = (float)SLODWORD(v55);
          if (v54 != v55)
            return 1;
        }
      }
    }
    v18 = *(_QWORD **)(a1 + 8);
    v56 = v18[5];
    v57 = *(_QWORD *)(*(_QWORD *)v15 + 40);
    if (v56 != v57)
    {
      v58 = *(_QWORD *)(v56 + 240);
      v59 = *(_QWORD *)(v57 + 240);
      if (v58 == v59 && *(_QWORD *)(v56 + 264) != *(_QWORD *)(v57 + 264))
        *(_BYTE *)a3 |= 0x10u;
      if (v58 != v59)
        return 1;
    }
  }
LABEL_66:
  v42 = *(_QWORD *)(a1 + 24);
  v43 = *(_QWORD *)(a2 + 24);
  if (v42 == v43)
  {
LABEL_67:
    v44 = v18[5];
    v45 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v15 + 40) + 296);
    v46 = *(_QWORD *)(v44 + 296);
    if ((!v46 || !*(_DWORD *)(v46 - 12)) && (!*v45 || !*(_DWORD *)(*v45 - 12)))
      return 0;
    v179[0] = 0;
    LOBYTE(v179[1]) = 0;
    LOBYTE(v181) = 0;
    v182 = 0;
    WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::HashTable((uint64_t *)&v185, (uint64_t *)(v44 + 296));
    WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::HashTable((uint64_t *)&v185 + 1, v45);
    LOBYTE(v45) = 0;
    v82 = 0;
    while (1)
    {
      LOBYTE(v3) = (_BYTE)v45;
      v83 = (uint64_t (**)())*((_QWORD *)&v185 + v82);
      if (!v83)
        break;
      v84 = *((unsigned int *)v83 - 1);
      v4 = &v83[v84];
      if (!*((_DWORD *)v83 - 3))
      {
        v5 = &v83[v84];
        goto LABEL_209;
      }
      v5 = v83;
      if ((_DWORD)v84)
      {
        v85 = 8 * v84;
        v5 = v83;
        while ((unint64_t)*v5 + 1 <= 1)
        {
          ++v5;
          v85 -= 8;
          if (!v85)
          {
            v5 = v4;
            break;
          }
        }
      }
LABEL_210:
      if (v83)
        v14 = (uint64_t)&v83[*((unsigned int *)v83 - 1)];
      else
        v14 = 0;
      if ((uint64_t (**)())v14 != v5)
      {
        while (1)
        {
          v86 = *v5;
          if (*v5)
            break;
          v122 = 0;
          v123 = 1;
LABEL_282:
          v124 = WebCore::cssPropertyID(v122, (const char *)((unint64_t)v86 | (v123 << 32)));
          if (!(_DWORD)v124)
            goto LABEL_272;
          v125 = v124;
          WebCore::ComputedStyleExtractor::valueForPropertyInStyle(v179, a1, v124, 0, 0);
          a3 = v184;
          WebCore::ComputedStyleExtractor::valueForPropertyInStyle(v179, a2, v125, 0, 0);
          v23 = v184;
LABEL_284:
          if (a3)
          {
            if (!v23)
              goto LABEL_268;
            v126 = *((unsigned __int16 *)a3 + 2) | (*((unsigned __int8 *)a3 + 6) << 16);
            v127 = *((unsigned __int16 *)v23 + 2) | (*((unsigned __int8 *)v23 + 6) << 16);
            if (((v127 ^ v126) & 0x3F800) != 0)
            {
LABEL_444:
              if ((v126 & 0x3F800) == 0x1D800)
              {
                v177 = a3;
                v178 = v23;
              }
              else
              {
                if ((v127 & 0x3F800) != 0x1D800)
                {
                  v128 = 0;
                  goto LABEL_288;
                }
                v177 = v23;
                v178 = a3;
              }
              v128 = WebCore::CSSValueContainingVector::containsSingleEqualItem(v177, v178, v81);
            }
            else
            {
              v183 = v23;
              v184 = (WebCore::CSSValue *)&v183;
              v128 = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_((uint64_t)a3, (const WebCore::CSSLinearGradientValue ***)&v184, v81);
            }
LABEL_288:
            v119 = v128 ^ 1;
            goto LABEL_289;
          }
          if (!v23)
            goto LABEL_272;
          v119 = 1;
LABEL_289:
          if (*(_DWORD *)v23 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v23, v80);
          else
            *(_DWORD *)v23 -= 2;
          if (a3)
            goto LABEL_269;
LABEL_271:
          if (v119)
          {
            LODWORD(v45) = 0;
            goto LABEL_303;
          }
LABEL_272:
          v120 = v5 + 1;
          v5 = v4;
          if (v120 != v4)
          {
            v5 = v120;
            while ((unint64_t)*v5 + 1 <= 1)
            {
              if (++v5 == v4)
              {
                v5 = v4;
                break;
              }
            }
          }
          if (v5 == (uint64_t (**)())v14)
            goto LABEL_300;
        }
        if (*((_DWORD *)v86 + 1) >= 3u)
        {
          v87 = *((_QWORD *)v86 + 1);
          if ((*((_BYTE *)v86 + 16) & 4) != 0)
          {
            if (*(_BYTE *)v87 == 45)
            {
              v88 = *(unsigned __int8 *)(v87 + 1);
              goto LABEL_219;
            }
          }
          else if (*(_WORD *)v87 == 45)
          {
            v88 = *(unsigned __int16 *)(v87 + 2);
LABEL_219:
            if (v88 == 45)
            {
              for (i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) + 288); i; i = *(_QWORD *)(i + 8))
              {
                v90 = *(_QWORD *)(i + 16);
                if (v90)
                {
                  v91 = 0;
                  for (j = *((_DWORD *)v86 + 4) >> 8; ; j = v91 + v93)
                  {
                    v93 = j & *(_DWORD *)(v90 - 8);
                    v94 = *(uint64_t (**)())(v90 + 16 * v93);
                    if (!v94)
                      break;
                    if (v94 != (uint64_t (*)())-1 && v94 == v86)
                    {
                      a3 = *(WebCore::CSSValue **)(v90 + 16 * v93 + 8);
                      if (!a3)
                        break;
LABEL_298:
                      *(_DWORD *)a3 += 2;
                      goto LABEL_243;
                    }
                    ++v91;
                  }
                }
              }
              for (k = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 216); k; k = *(_QWORD *)(k + 8))
              {
                v97 = *(_QWORD *)(k + 16);
                if (v97)
                {
                  v98 = 0;
                  for (m = *((_DWORD *)v86 + 4) >> 8; ; m = v98 + v100)
                  {
                    v100 = m & *(_DWORD *)(v97 - 8);
                    v101 = *(uint64_t (**)())(v97 + 16 * v100);
                    if (!v101)
                      break;
                    if (v101 != (uint64_t (*)())-1 && v101 == v86)
                    {
                      a3 = *(WebCore::CSSValue **)(v97 + 16 * v100 + 8);
                      if (a3)
                        goto LABEL_298;
                      break;
                    }
                    ++v98;
                  }
                }
              }
              a3 = 0;
LABEL_243:
              v103 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v15 + 40) + 288);
              if (v103)
              {
                v104 = *v5;
                do
                {
                  v105 = *(_QWORD *)(v103 + 16);
                  if (v105)
                  {
                    v106 = 0;
                    for (n = *((_DWORD *)v104 + 4) >> 8; ; n = v106 + v108)
                    {
                      v108 = n & *(_DWORD *)(v105 - 8);
                      v109 = *(uint64_t (**)())(v105 + 16 * v108);
                      if (!v109)
                        break;
                      if (v109 != (uint64_t (*)())-1 && v109 == v104)
                      {
                        v23 = *(WebCore::CSSValue **)(v105 + 16 * v108 + 8);
                        if (!v23)
                          break;
LABEL_299:
                        *(_DWORD *)v23 += 2;
                        goto LABEL_284;
                      }
                      ++v106;
                    }
                  }
                  v103 = *(_QWORD *)(v103 + 8);
                }
                while (v103);
              }
              v111 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 216);
              if (v111)
              {
                v112 = *v5;
                do
                {
                  v113 = *(_QWORD *)(v111 + 16);
                  if (v113)
                  {
                    v114 = 0;
                    for (ii = *((_DWORD *)v112 + 4) >> 8; ; ii = v114 + v116)
                    {
                      v116 = ii & *(_DWORD *)(v113 - 8);
                      v117 = *(uint64_t (**)())(v113 + 16 * v116);
                      if (!v117)
                        break;
                      if (v117 != (uint64_t (*)())-1 && v117 == v112)
                      {
                        v23 = *(WebCore::CSSValue **)(v113 + 16 * v116 + 8);
                        if (v23)
                          goto LABEL_299;
                        break;
                      }
                      ++v114;
                    }
                  }
                  v111 = *(_QWORD *)(v111 + 8);
                }
                while (v111);
              }
              if (!a3)
                goto LABEL_272;
LABEL_268:
              v119 = 1;
LABEL_269:
              if (*(_DWORD *)a3 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)a3, v80);
              else
                *(_DWORD *)a3 -= 2;
              goto LABEL_271;
            }
          }
        }
        v121 = *((unsigned int *)v86 + 4);
        v122 = *((_QWORD *)v86 + 1);
        v86 = (uint64_t (*)())*((unsigned int *)v86 + 1);
        v123 = (v121 >> 2) & 1;
        goto LABEL_282;
      }
LABEL_300:
      LODWORD(v45) = 1;
      v82 = 1;
      if ((v3 & 1) != 0)
      {
LABEL_303:
        v129 = *((_QWORD *)&v185 + 1);
        if (*((_QWORD *)&v185 + 1))
        {
          v133 = *(unsigned int *)(*((_QWORD *)&v185 + 1) - 4);
          if ((_DWORD)v133)
          {
            v134 = (WTF::StringImpl **)*((_QWORD *)&v185 + 1);
            do
            {
              v135 = *v134;
              if (*v134 != (WTF::StringImpl *)-1)
              {
                *v134 = 0;
                if (v135)
                {
                  if (*(_DWORD *)v135 == 2)
                    WTF::StringImpl::destroy(v135, v80);
                  else
                    *(_DWORD *)v135 -= 2;
                }
              }
              ++v134;
              --v133;
            }
            while (v133);
          }
          WTF::fastFree((WTF *)(v129 - 16), v80);
        }
        v130 = v185;
        if ((_QWORD)v185)
        {
          v136 = *(unsigned int *)(v185 - 4);
          if ((_DWORD)v136)
          {
            v137 = (WTF::StringImpl **)v185;
            do
            {
              v138 = *v137;
              if (*v137 != (WTF::StringImpl *)-1)
              {
                *v137 = 0;
                if (v138)
                {
                  if (*(_DWORD *)v138 == 2)
                    WTF::StringImpl::destroy(v138, v80);
                  else
                    *(_DWORD *)v138 -= 2;
                }
              }
              ++v137;
              --v136;
            }
            while (v136);
          }
          WTF::fastFree((WTF *)(v130 - 16), v80);
        }
        if ((_BYTE)v181)
        {
          v131 = v180;
          v180 = 0;
          if (v131)
          {
            if (*(_DWORD *)v131 == 2)
              WTF::StringImpl::destroy(v131, v80);
            else
              *(_DWORD *)v131 -= 2;
          }
        }
        v132 = v179[0];
        v179[0] = 0;
        if (v132)
        {
          if (*((_DWORD *)v132 + 6) == 2)
          {
            if ((*((_WORD *)v132 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v132);
          }
          else
          {
            *((_DWORD *)v132 + 6) -= 2;
          }
        }
        return !(_DWORD)v45;
      }
    }
    v5 = 0;
    v84 = 0;
LABEL_209:
    v4 = &v83[v84];
    goto LABEL_210;
  }
  if (((*(_DWORD *)(v43 + 236) ^ *(_DWORD *)(v42 + 236)) & 0x1000000) != 0)
    return 1;
  if (((*(_DWORD *)(v43 + 228) ^ *(_DWORD *)(v42 + 228)) & 0x18030) != 0)
    return 1;
  v65 = *(_QWORD *)(v42 + 320);
  v66 = *(_QWORD *)(v43 + 320);
  if (v65 != v66 && !WebCore::StyleFilterData::operator==(v65, v66))
    return 1;
  if (((*(_DWORD *)(v43 + 232) ^ *(_DWORD *)(v42 + 232)) & 0x70000) != 0
    || !WebCore::StyleColor::operator==(v42 + 144, v43 + 144))
  {
    return 1;
  }
  result = 1;
  if (*(unsigned __int8 *)(v42 + 302) == *(unsigned __int8 *)(v43 + 302)
    && *(unsigned __int8 *)(v42 + 303) == *(unsigned __int8 *)(v43 + 303))
  {
    v18 = *(_QWORD **)(a1 + 8);
    goto LABEL_67;
  }
  return result;
}

uint64_t ___ZN3PALL41initCoreGraphicsCGContextSetOwnerIdentityEP9CGContextj_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19CoreGraphicsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_0;
  v2 = 0;
  if (qword_1ECE7E1C0 != -1)
    dispatch_once(&qword_1ECE7E1C0, block);
  result = (uint64_t)dlsym((void *)_MergedGlobals_58, "CGContextSetOwnerIdentity");
  PAL::softLinkCoreGraphicsCGContextSetOwnerIdentity = (uint64_t (*)(PAL *__hidden, CGContext *, unsigned int))result;
  if (!result)
  {
    result = 39;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::ContentExtensions::applyResultsToRequest(uint64_t a1, uint64_t a2, WebCore::ResourceRequestBase *this)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  WTF::StringImpl *v10;
  uint8x8_t v11;
  uint64_t v12;
  unsigned int v13;
  uint8x8_t v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  WebCore::ResourceRequestBase *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  WTF::StringImpl **v25;

  if (*(_BYTE *)(a1 + 2))
    WebCore::ResourceRequestBase::setAllowCookies(this, 0);
  if (*(_BYTE *)(a1 + 1))
    WebCore::ResourceRequestBase::upgradeToHTTPS(this);
  v6 = *(unsigned int *)(a1 + 20);
  v7 = 126 - 2 * __clz(v6);
  if ((_DWORD)v6)
    v8 = v7;
  else
    v8 = 0;
  result = std::__introsort<std::_ClassicAlgPolicy,WebCore::ContentExtensions::applyResultsToRequest(WebCore::ContentRuleListResults &&,WebCore::Page *,WebCore::ResourceRequest &)::$_0 &,WebCore::ContentExtensions::ModifyHeadersAction *,false>(*(_QWORD *)(a1 + 8), (char *)(*(_QWORD *)(a1 + 8) + 48 * v6), v8, 1);
  v25 = 0;
  v12 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v12)
  {
    v18 = *(_QWORD *)(a1 + 8);
    v19 = 48 * v12;
    do
    {
      result = WebCore::ContentExtensions::ModifyHeadersAction::applyToRequest(v18, (uint64_t)this, (uint64_t)&v25);
      v18 += 48;
      v19 -= 48;
    }
    while (v19);
  }
  v13 = *(_DWORD *)(a1 + 36);
  if (v13)
  {
    v20 = *(_QWORD *)(a1 + 24);
    v21 = v20 + 152 * v13;
    do
    {
      result = WebCore::ContentExtensions::RedirectAction::applyToRequest(v20, (uint64_t)this, v20 + 112);
      v20 += 152;
    }
    while (v20 != v21);
  }
  if (a2)
  {
    v11.i32[0] = *(_DWORD *)a1;
    v14 = (uint8x8_t)vmovn_s16((int16x8_t)vmovl_u8(v11));
    if (*(_DWORD *)(a1 + 20) | v14.i32[0] | *(_DWORD *)(a1 + 36))
    {
      WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<WebCore::ContentExtensions::applyResultsToRequest(WebCore::ContentRuleListResults&&,WebCore::Page *,WebCore::ResourceRequest &)::$_1>((unsigned int *)(a1 + 40), v10, v14);
      v16 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 16);
      v17 = WebCore::ResourceRequestBase::url(this);
      result = (*(uint64_t (**)(uint64_t, WebCore::ResourceRequestBase *, uint64_t))(*(_QWORD *)v16 + 1280))(v16, v17, a1);
    }
  }
  v15 = v25;
  if (v25)
  {
    v22 = *((unsigned int *)v25 - 1);
    if ((_DWORD)v22)
    {
      v23 = v25;
      do
      {
        v24 = *v23;
        if (*v23 != (WTF::StringImpl *)-1)
        {
          *v23 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v10);
            else
              *(_DWORD *)v24 -= 2;
          }
        }
        v23 += 2;
        --v22;
      }
      while (v22);
    }
    return WTF::fastFree((WTF *)(v15 - 2), v10);
  }
  return result;
}

uint64_t WebCore::NinePieceImage::paint(float **a1, uint64_t a2, float a3, uint64_t a4, uint64_t a5, int32x2_t *a6, int32x2_t *a7, char a8)
{
  float *v11;
  int v12;
  int v13;
  float v14;
  int v15;
  float v16;
  double v17;
  signed int v18;
  signed int v19;
  uint64_t v20;
  int v21;
  float v22;
  int v23;
  float v24;
  double v25;
  uint64_t v26;
  int v27;
  float v28;
  int v29;
  float v30;
  double v31;
  uint64_t v32;
  int v33;
  float v34;
  int v35;
  float v36;
  double v37;
  int32x2_t *v38;
  uint64_t v39;
  int v40;
  float *v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  int v50;
  unint64_t v51;
  float v52;
  int v53;
  double v54;
  int v55;
  double v56;
  int v57;
  unint64_t v58;
  float v59;
  int v60;
  double v61;
  int v62;
  double v63;
  int v64;
  unint64_t v65;
  float v66;
  int v67;
  double v68;
  float v69;
  double v70;
  int v71;
  void *v72;
  float v73;
  int v74;
  double v75;
  float v76;
  double v77;
  double v78;
  double v79;
  int v80;
  int v81;
  signed int v82;
  int v83;
  signed int v84;
  float v85;
  float v86;
  float v87;
  double v88;
  int v89;
  int v90;
  double v91;
  int v92;
  int v93;
  double v94;
  int v95;
  int v96;
  double v97;
  int v98;
  float32x2_t v99;
  unsigned int v100;
  unint64_t v101;
  float *v102;
  uint64_t v103;
  float *v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  unsigned int v116;
  float *v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  unint64_t v123;
  void *v124;
  unsigned __int8 *v125;
  unsigned __int8 v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  float *v130;
  float **v131;
  uint64_t v132;
  uint64_t v133;
  _DWORD *v134;
  uint64_t result;
  void *v136;
  unint64_t v137;
  float v138;
  double v139;
  unint64_t v140;
  int v141;
  unint64_t v142;
  float v143;
  double v144;
  unint64_t v145;
  float v146;
  double v147;
  unint64_t v148;
  float v149;
  double v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  int v167;
  unsigned __int8 *v168;
  int v169;
  int v170;
  uint64_t v171;
  char v172;
  unint64_t v174;
  unsigned int v175;
  int v177;
  _QWORD v180[2];
  float *v181;
  float v182;
  unsigned int v183;
  float *v184;
  unsigned int v185;
  unint64_t v186;
  unint64_t v187;
  int32x2_t v188;
  char v189;
  char v190;
  char v191;
  char v192;
  char v193;
  char v194;
  char v195;
  char v196;

  v11 = *a1;
  v174 = *((_QWORD *)*a1 + 1);
  v12 = (int)(*(float (**)(unint64_t))(*(_QWORD *)v174 + 160))(v174);
  v13 = a7->i32[1];
  if (*((_BYTE *)v11 + 20) == 4)
  {
    v14 = v11[4];
    if (!*((_BYTE *)v11 + 22))
      v14 = (float)SLODWORD(v14);
LABEL_9:
    v17 = v14 * 64.0;
    if (v17 >= 2147483650.0)
    {
      v15 = 0x7FFFFFFF;
    }
    else if (v17 <= -2147483650.0)
    {
      v15 = 0x80000000;
    }
    else
    {
      v15 = (int)v17;
    }
  }
  else
  {
    v15 = 0;
    switch(*((_BYTE *)v11 + 20))
    {
      case 0:
      case 1:
      case 9:
        v15 = a7->i32[1];
        break;
      case 3:
        v16 = v11[4];
        if (!*((_BYTE *)v11 + 22))
          v16 = (float)*((int *)v11 + 4);
        v14 = (float)((float)((float)v13 * 0.015625) * v16) / 100.0;
        goto LABEL_9;
      case 0xB:
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v11 + 4), (float)v13 * 0.015625);
        goto LABEL_9;
      default:
        break;
    }
  }
  if (v12 >= -33554432)
    v18 = v12 << 6;
  else
    v18 = 0x80000000;
  if (v12 > 0x1FFFFFF)
    v18 = 0x7FFFFFFF;
  if (v15 >= v13)
    v15 = v13;
  v19 = v18;
  v20 = v15 * (uint64_t)v18 / 64;
  if (HIDWORD(v20) != (int)v20 >> 31)
    LODWORD(v20) = ((v15 ^ v18) >> 31) + 0x7FFFFFFF;
  v21 = a7->i32[0];
  if (*((_BYTE *)v11 + 28) == 4)
  {
    v22 = v11[6];
    if (!*((_BYTE *)v11 + 30))
      v22 = (float)SLODWORD(v22);
LABEL_29:
    v25 = v22 * 64.0;
    if (v25 >= 2147483650.0)
    {
      v23 = 0x7FFFFFFF;
    }
    else if (v25 <= -2147483650.0)
    {
      v23 = 0x80000000;
    }
    else
    {
      v23 = (int)v25;
    }
  }
  else
  {
    v23 = 0;
    switch(*((_BYTE *)v11 + 28))
    {
      case 0:
      case 1:
      case 9:
        v23 = a7->i32[0];
        break;
      case 3:
        v24 = v11[6];
        if (!*((_BYTE *)v11 + 30))
          v24 = (float)*((int *)v11 + 6);
        v22 = (float)((float)((float)v21 * 0.015625) * v24) / 100.0;
        goto LABEL_29;
      case 0xB:
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v11 + 6), (float)v21 * 0.015625);
        goto LABEL_29;
      default:
        break;
    }
  }
  if (v23 >= v21)
    v23 = v21;
  v26 = v19 * (uint64_t)v23 / 64;
  if (HIDWORD(v26) != (int)v26 >> 31)
    LODWORD(v26) = ((v23 ^ v19) >> 31) + 0x7FFFFFFF;
  v27 = a7->i32[1];
  if (*((_BYTE *)v11 + 36) == 4)
  {
    v28 = v11[8];
    if (!*((_BYTE *)v11 + 38))
      v28 = (float)SLODWORD(v28);
LABEL_44:
    v31 = v28 * 64.0;
    if (v31 >= 2147483650.0)
    {
      v29 = 0x7FFFFFFF;
    }
    else if (v31 <= -2147483650.0)
    {
      v29 = 0x80000000;
    }
    else
    {
      v29 = (int)v31;
    }
  }
  else
  {
    v29 = 0;
    switch(*((_BYTE *)v11 + 36))
    {
      case 0:
      case 1:
      case 9:
        v29 = a7->i32[1];
        break;
      case 3:
        v30 = v11[8];
        if (!*((_BYTE *)v11 + 38))
          v30 = (float)*((int *)v11 + 8);
        v28 = (float)((float)((float)v27 * 0.015625) * v30) / 100.0;
        goto LABEL_44;
      case 0xB:
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v11 + 8), (float)v27 * 0.015625);
        goto LABEL_44;
      default:
        break;
    }
  }
  if (v29 >= v27)
    v29 = v27;
  v32 = v19 * (uint64_t)v29 / 64;
  if (HIDWORD(v32) != (int)v32 >> 31)
    LODWORD(v32) = ((v29 ^ v19) >> 31) + 0x7FFFFFFF;
  v33 = a7->i32[0];
  if (*((_BYTE *)v11 + 44) == 4)
  {
    v34 = v11[10];
    if (!*((_BYTE *)v11 + 46))
      v34 = (float)SLODWORD(v34);
LABEL_59:
    v37 = v34 * 64.0;
    if (v37 >= 2147483650.0)
    {
      v35 = 0x7FFFFFFF;
    }
    else if (v37 <= -2147483650.0)
    {
      v35 = 0x80000000;
    }
    else
    {
      v35 = (int)v37;
    }
  }
  else
  {
    v35 = 0;
    switch(*((_BYTE *)v11 + 44))
    {
      case 0:
      case 1:
      case 9:
        v35 = a7->i32[0];
        break;
      case 3:
        v36 = v11[10];
        if (!*((_BYTE *)v11 + 46))
          v36 = (float)*((int *)v11 + 10);
        v34 = (float)((float)((float)v33 * 0.015625) * v36) / 100.0;
        goto LABEL_59;
      case 0xB:
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v11 + 10), (float)v33 * 0.015625);
        goto LABEL_59;
      default:
        break;
    }
  }
  v38 = a7;
  if (v35 >= v33)
    v35 = v33;
  v39 = v19 * (uint64_t)v35 / 64;
  if (HIDWORD(v39) != (int)v39 >> 31)
    v39 = ((v35 ^ v19) >> 31) + 0x7FFFFFFF;
  v188.i8[0] = v20;
  v188.i8[1] = BYTE1(v20);
  v188.i8[2] = BYTE2(v20);
  v188.i8[3] = BYTE3(v20);
  v188.i8[4] = v26;
  v188.i8[5] = BYTE1(v26);
  v188.i8[6] = BYTE2(v26);
  v188.i8[7] = BYTE3(v26);
  v189 = v32;
  v190 = BYTE1(v32);
  v191 = BYTE2(v32);
  v192 = BYTE3(v32);
  v193 = v39;
  v194 = BYTE1(v39);
  v195 = BYTE2(v39);
  v196 = BYTE3(v39);
  v40 = a6[1].i32[0];
  v169 = a6[1].i32[1];
  v41 = *a1;
  WebCore::BorderData::borderWidth((WebCore::BorderData *)(*(_QWORD *)(*(_QWORD *)(a5 + 8) + 24) + 104));
  v43 = v42;
  v45 = v44;
  v47 = v46;
  v49 = v48;
  LODWORD(v186) = 0;
  BYTE6(v186) = 0;
  BYTE4(v186) = *((_BYTE *)v41 + 52);
  v50 = BYTE4(v186);
  BYTE5(v186) = *((_BYTE *)v41 + 53);
  v167 = v40;
  if (BYTE4(v186) - 2 >= 9)
  {
    if (BYTE4(v186) == 11)
    {
      *(float *)&v186 = v41[12];
      v151 = v186;
      WebCore::Length::ref((int *)&v186);
      v51 = v151;
      v40 = v167;
      goto LABEL_69;
    }
    v51 = 0;
    v53 = 1;
    v52 = 0.0;
  }
  else
  {
    BYTE6(v186) = *((_BYTE *)v41 + 54);
    if (!BYTE6(v186))
    {
      v51 = *((unsigned int *)v41 + 12);
      *(float *)&v186 = v41[12];
LABEL_69:
      v52 = *(float *)&v51;
      v53 = 1;
      goto LABEL_73;
    }
    v53 = 0;
    v52 = v41[12];
    *(float *)&v186 = v52;
    v51 = LODWORD(v52);
  }
LABEL_73:
  v54 = v43 * 64.0;
  if (v54 >= 2147483650.0)
  {
    v55 = 0x7FFFFFFF;
  }
  else if (v54 <= -2147483650.0)
  {
    v55 = 0x80000000;
  }
  else
  {
    v55 = (int)v54;
  }
  switch(v50)
  {
    case 0:
      break;
    case 1:
    case 9:
      LODWORD(v20) = v169;
      break;
    case 2:
      if (v53)
        v52 = (float)SLODWORD(v52);
      v52 = v52 * (float)((float)v55 * 0.015625);
      goto LABEL_86;
    case 3:
      if (v53)
        v52 = (float)SLODWORD(v52);
      v52 = (float)((float)((float)v169 * 0.015625) * v52) / 100.0;
      goto LABEL_86;
    case 4:
      if (v53)
        v52 = (float)SLODWORD(v52);
LABEL_86:
      v56 = v52 * 64.0;
      if (v56 >= 2147483650.0)
      {
        LODWORD(v20) = 0x7FFFFFFF;
      }
      else if (v56 <= -2147483650.0)
      {
        LODWORD(v20) = 0x80000000;
      }
      else
      {
        LODWORD(v20) = (int)v56;
      }
      break;
    case 11:
      v137 = v51;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v186, (float)v169 * 0.015625);
      v139 = v138 * 64.0;
      if (v139 >= 2147483650.0)
      {
        LODWORD(v20) = 0x7FFFFFFF;
      }
      else if (v139 <= -2147483650.0)
      {
        LODWORD(v20) = 0x80000000;
      }
      else
      {
        LODWORD(v20) = (int)v139;
      }
      v51 = v137;
      v40 = v167;
      break;
    default:
      LODWORD(v20) = 0;
      break;
  }
  v171 = a5;
  LODWORD(v184) = 0;
  BYTE6(v184) = 0;
  BYTE4(v184) = *((_BYTE *)v41 + 60);
  v57 = BYTE4(v184);
  BYTE5(v184) = *((_BYTE *)v41 + 61);
  if (BYTE4(v184) - 2 >= 9)
  {
    if (BYTE4(v184) == 11)
    {
      *(float *)&v184 = v41[14];
      v152 = v184;
      v153 = v51;
      WebCore::Length::ref((int *)&v184);
      v58 = v152;
      v51 = v153;
      v40 = v167;
      goto LABEL_92;
    }
    v58 = 0;
    v60 = 1;
    v59 = 0.0;
  }
  else
  {
    BYTE6(v184) = *((_BYTE *)v41 + 62);
    if (!BYTE6(v184))
    {
      v58 = *((unsigned int *)v41 + 14);
      *(float *)&v184 = v41[14];
LABEL_92:
      v59 = *(float *)&v58;
      v60 = 1;
      goto LABEL_96;
    }
    v60 = 0;
    v59 = v41[14];
    *(float *)&v184 = v59;
    v58 = LODWORD(v59);
  }
LABEL_96:
  v61 = v45 * 64.0;
  if (v61 >= 2147483650.0)
  {
    v62 = 0x7FFFFFFF;
  }
  else if (v61 <= -2147483650.0)
  {
    v62 = 0x80000000;
  }
  else
  {
    v62 = (int)v61;
  }
  switch(v57)
  {
    case 0:
      break;
    case 1:
    case 9:
      LODWORD(v26) = v40;
      break;
    case 2:
      if (v60)
        v59 = (float)SLODWORD(v59);
      v59 = v59 * (float)((float)v62 * 0.015625);
      goto LABEL_109;
    case 3:
      if (v60)
        v59 = (float)SLODWORD(v59);
      v59 = (float)((float)((float)v40 * 0.015625) * v59) / 100.0;
      goto LABEL_109;
    case 4:
      if (v60)
        v59 = (float)SLODWORD(v59);
LABEL_109:
      v63 = v59 * 64.0;
      if (v63 >= 2147483650.0)
      {
        LODWORD(v26) = 0x7FFFFFFF;
      }
      else if (v63 <= -2147483650.0)
      {
        LODWORD(v26) = 0x80000000;
      }
      else
      {
        LODWORD(v26) = (int)v63;
      }
      break;
    case 11:
      v140 = v58;
      v141 = v40;
      v142 = v51;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v184, (float)v141 * 0.015625);
      v144 = v143 * 64.0;
      if (v144 >= 2147483650.0)
      {
        LODWORD(v26) = 0x7FFFFFFF;
      }
      else if (v144 <= -2147483650.0)
      {
        LODWORD(v26) = 0x80000000;
      }
      else
      {
        LODWORD(v26) = (int)v144;
      }
      v51 = v142;
      v58 = v140;
      break;
    default:
      LODWORD(v26) = 0;
      break;
  }
  LODWORD(v181) = 0;
  BYTE6(v181) = 0;
  BYTE4(v181) = *((_BYTE *)v41 + 68);
  v64 = BYTE4(v181);
  BYTE5(v181) = *((_BYTE *)v41 + 69);
  if (BYTE4(v181) - 2 >= 9)
  {
    if (BYTE4(v181) == 11)
    {
      *(float *)&v181 = v41[16];
      v154 = v181;
      v158 = v51;
      v165 = v58;
      WebCore::Length::ref((int *)&v181);
      v65 = v154;
      v58 = v165;
      v51 = v158;
      goto LABEL_115;
    }
    v65 = 0;
    v67 = 1;
    v66 = 0.0;
  }
  else
  {
    BYTE6(v181) = *((_BYTE *)v41 + 70);
    if (!BYTE6(v181))
    {
      v65 = *((unsigned int *)v41 + 16);
      *(float *)&v181 = v41[16];
LABEL_115:
      v66 = *(float *)&v65;
      v67 = 1;
      goto LABEL_119;
    }
    v67 = 0;
    v66 = v41[16];
    *(float *)&v181 = v66;
    v65 = LODWORD(v66);
  }
LABEL_119:
  v68 = v47 * 64.0;
  if (v68 >= 2147483650.0)
  {
    v69 = 33554000.0;
  }
  else if (v68 <= -2147483650.0)
  {
    v69 = -33554000.0;
  }
  else
  {
    v69 = (float)(int)v68 * 0.015625;
  }
  switch(v64)
  {
    case 0:
      break;
    case 1:
    case 9:
      LODWORD(v32) = v169;
      break;
    case 2:
      if (v67)
        v66 = (float)SLODWORD(v66);
      v66 = v66 * v69;
      goto LABEL_132;
    case 3:
      if (v67)
        v66 = (float)SLODWORD(v66);
      v66 = (float)((float)((float)v169 * 0.015625) * v66) / 100.0;
      goto LABEL_132;
    case 4:
      if (v67)
        v66 = (float)SLODWORD(v66);
LABEL_132:
      v70 = v66 * 64.0;
      if (v70 >= 2147483650.0)
      {
        LODWORD(v32) = 0x7FFFFFFF;
      }
      else if (v70 <= -2147483650.0)
      {
        LODWORD(v32) = 0x80000000;
      }
      else
      {
        LODWORD(v32) = (int)v70;
      }
      break;
    case 11:
      v160 = v65;
      v163 = v58;
      v145 = v51;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v181, (float)v169 * 0.015625);
      v147 = v146 * 64.0;
      if (v147 >= 2147483650.0)
      {
        LODWORD(v32) = 0x7FFFFFFF;
      }
      else if (v147 <= -2147483650.0)
      {
        LODWORD(v32) = 0x80000000;
      }
      else
      {
        LODWORD(v32) = (int)v147;
      }
      v51 = v145;
      v65 = v160;
      v58 = v163;
      break;
    default:
      LODWORD(v32) = 0;
      break;
  }
  LODWORD(v180[0]) = 0;
  BYTE6(v180[0]) = 0;
  BYTE4(v180[0]) = *((_BYTE *)v41 + 76);
  v71 = BYTE4(v180[0]);
  BYTE5(v180[0]) = *((_BYTE *)v41 + 77);
  if (BYTE4(v180[0]) - 2 >= 9)
  {
    if (BYTE4(v180[0]) == 11)
    {
      v72 = (void *)*((unsigned int *)v41 + 18);
      LODWORD(v180[0]) = (_DWORD)v72;
      v159 = v51;
      v162 = v65;
      v166 = v58;
      WebCore::Length::ref((int *)v180);
      v65 = v162;
      v58 = v166;
      v51 = v159;
      goto LABEL_138;
    }
    v72 = 0;
    v74 = 1;
    v73 = 0.0;
  }
  else
  {
    BYTE6(v180[0]) = *((_BYTE *)v41 + 78);
    if (!BYTE6(v180[0]))
    {
      v72 = (void *)*((unsigned int *)v41 + 18);
      LODWORD(v180[0]) = (_DWORD)v72;
LABEL_138:
      v73 = *(float *)&v72;
      v74 = 1;
      goto LABEL_142;
    }
    v74 = 0;
    v73 = v41[18];
    *(float *)v180 = v73;
    v72 = (void *)LODWORD(v73);
  }
LABEL_142:
  v75 = v49 * 64.0;
  if (v75 >= 2147483650.0)
  {
    v76 = 33554000.0;
  }
  else if (v75 <= -2147483650.0)
  {
    v76 = -33554000.0;
  }
  else
  {
    v76 = (float)(int)v75 * 0.015625;
  }
  switch(v71)
  {
    case 0:
      break;
    case 1:
    case 9:
      v39 = v167;
      break;
    case 2:
      if (v74)
        v73 = (float)SLODWORD(v73);
      v77 = (float)(v73 * v76) * 64.0;
      if (v77 >= 2147483650.0)
        goto LABEL_348;
      if (v77 > -2147483650.0)
        v39 = (int)v77;
      else
        v39 = 0x80000000;
      break;
    case 3:
      if (v74)
        v73 = (float)SLODWORD(v73);
      v73 = (float)((float)((float)v167 * 0.015625) * v73) / 100.0;
      goto LABEL_158;
    case 4:
      if (v74)
        v73 = (float)SLODWORD(v73);
LABEL_158:
      v78 = v73 * 64.0;
      if (v78 >= 2147483650.0)
      {
LABEL_348:
        v39 = 0x7FFFFFFFLL;
      }
      else if (v78 <= -2147483650.0)
      {
        v39 = 0x80000000;
      }
      else
      {
        v39 = (int)v78;
      }
      break;
    case 11:
      v161 = v65;
      v164 = v58;
      v148 = v51;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v180, (float)v167 * 0.015625);
      v150 = v149 * 64.0;
      if (v150 >= 2147483650.0)
      {
        v39 = 0x7FFFFFFFLL;
      }
      else if (v150 <= -2147483650.0)
      {
        v39 = 0x80000000;
      }
      else
      {
        v39 = (int)v150;
      }
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v72);
      v51 = v148;
      v65 = v161;
      v58 = v164;
      break;
    default:
      v39 = 0;
      break;
  }
  if (v64 == 11)
  {
    v155 = v58;
    v156 = v51;
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v65);
    v51 = v156;
    v58 = v155;
  }
  if (v57 == 11)
  {
    v157 = v51;
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v58);
    v51 = v157;
  }
  if (v50 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v51);
  }
  LOBYTE(v186) = v20;
  BYTE1(v186) = BYTE1(v20);
  BYTE2(v186) = BYTE2(v20);
  BYTE3(v186) = BYTE3(v20);
  BYTE4(v186) = v26;
  BYTE5(v186) = BYTE1(v26);
  BYTE6(v186) = BYTE2(v26);
  HIBYTE(v186) = BYTE3(v26);
  v187 = v32 | (unint64_t)(v39 << 32);
  v79 = (float)(1.0 / a3) * 64.0;
  if (v79 >= 2147483650.0)
  {
    v80 = 0x7FFFFFFF;
  }
  else if (v79 <= -2147483650.0)
  {
    v80 = 0x80000000;
  }
  else
  {
    v80 = (int)v79;
  }
  v81 = a6[1].i32[0];
  v82 = (v39 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__((_DWORD)v39, (_DWORD)v26))
    v82 = v39 + v26;
  if (v80 > v82)
    v82 = v80;
  if (v79 >= 2147483650.0)
  {
    v83 = 0x7FFFFFFF;
  }
  else if (v79 <= -2147483650.0)
  {
    v83 = 0x80000000;
  }
  else
  {
    v83 = (int)v79;
  }
  v84 = (v20 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__((_DWORD)v20, (_DWORD)v32))
    v84 = v20 + v32;
  if (v83 > v84)
    v84 = v83;
  v85 = (float)v81 * 0.015625;
  v86 = (float)a6[1].i32[1] * 0.015625;
  v87 = v86 / (float)((float)v84 * 0.015625);
  if (v87 >= (float)(v85 / (float)((float)v82 * 0.015625)))
    v87 = v85 / (float)((float)v82 * 0.015625);
  if (v87 < 1.0)
  {
    v88 = (float)((float)((float)(int)v20 * 0.015625) * v87) * 64.0;
    if (v88 > -2147483650.0)
      v89 = (int)v88;
    else
      v89 = 0x80000000;
    if (v88 < 2147483650.0)
      v90 = v89;
    else
      v90 = 0x7FFFFFFF;
    v91 = (float)((float)((float)(int)v26 * 0.015625) * v87) * 64.0;
    if (v91 > -2147483650.0)
      v92 = (int)v91;
    else
      v92 = 0x80000000;
    if (v91 < 2147483650.0)
      v93 = v92;
    else
      v93 = 0x7FFFFFFF;
    v186 = __PAIR64__(v93, v90);
    v94 = (float)((float)((float)(int)v32 * 0.015625) * v87) * 64.0;
    if (v94 > -2147483650.0)
      v95 = (int)v94;
    else
      v95 = 0x80000000;
    if (v94 < 2147483650.0)
      v96 = v95;
    else
      v96 = 0x7FFFFFFF;
    LODWORD(v187) = v96;
    v97 = (float)((float)((float)(int)v39 * 0.015625) * v87) * 64.0;
    if (v97 >= 2147483650.0)
    {
      v98 = 0x7FFFFFFF;
    }
    else if (v97 <= -2147483650.0)
    {
      v98 = 0x80000000;
    }
    else
    {
      v98 = (int)v97;
    }
    HIDWORD(v187) = v98;
  }
  v99 = (float32x2_t)vdup_n_s32(0x3C800000u);
  v181 = (float *)vmul_f32(vcvt_f32_s32(*a6), v99);
  v182 = (float)v81 * 0.015625;
  v183 = LODWORD(v86);
  WebCore::NinePieceImage::computeNineRects((uint64_t *)&v184, (float *)&v181, (int32x2_t *)&v186, a3);
  v180[0] = 0;
  v180[1] = vmul_f32(vcvt_f32_s32(*v38), v99);
  WebCore::NinePieceImage::computeNineRects((uint64_t *)&v181, (float *)v180, &v188, a3);
  v100 = *((unsigned __int8 *)*a1 + 6);
  v101 = *((unsigned __int8 *)*a1 + 7);
  v102 = (float *)WTF::fastMalloc((WTF *)0x48);
  memset_pattern16(v102, &unk_1969FDCE0, 0x48uLL);
  v103 = v185;
  if (v185 <= 6)
  {
    __break(0xC471u);
    JUMPOUT(0x1943D35A8);
  }
  v104 = v184;
  v105 = 1.0;
  v106 = 1.0;
  if (v184[26] > 0.0)
  {
    v107 = v184[27];
    if (v107 > 0.0)
    {
      if (v183 <= 6)
      {
        __break(0xC471u);
        JUMPOUT(0x1943D35C0);
      }
      v106 = 1.0;
      if (v181[26] > 0.0)
      {
        v108 = v181[27];
        if (v108 > 0.0)
          v106 = v107 / v108;
      }
    }
  }
  v102[12] = v106;
  v102[13] = v106;
  v109 = v104[18];
  if (v109 > 0.0 && v104[19] > 0.0)
  {
    if (v183 <= 4)
    {
      __break(0xC471u);
      JUMPOUT(0x1943D35C8);
    }
    v110 = v181[18];
    if (v110 > 0.0 && v181[19] > 0.0)
      v105 = v109 / v110;
  }
  v102[8] = v105;
  v102[9] = v105;
  if (v103 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x1943D35B0);
  }
  v111 = 1.0;
  v112 = 1.0;
  if (v104[30] > 0.0)
  {
    v113 = v104[31];
    if (v113 > 0.0)
    {
      if (v183 <= 7)
      {
        __break(0xC471u);
        JUMPOUT(0x1943D35D0);
      }
      v112 = 1.0;
      if (v181[30] > 0.0)
      {
        v114 = v181[31];
        if (v114 > 0.0)
          v112 = v113 / v114;
      }
    }
  }
  v102[14] = v112;
  v102[15] = v112;
  v115 = v104[6];
  if (v115 <= 0.0 || v104[7] <= 0.0)
    goto LABEL_229;
  v116 = v183;
  if (v183 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1943D35D8);
  }
  v117 = v181;
  v118 = v181[6];
  if (v118 > 0.0)
  {
    if (v181[7] > 0.0)
      v111 = v115 / v118;
LABEL_229:
    v117 = v181;
    v116 = v183;
  }
  v102[2] = v111;
  v102[3] = v111;
  if (v103 <= 8)
  {
    __break(0xC471u);
    JUMPOUT(0x1943D35B8);
  }
  v119 = v104[34];
  if (v119 <= 0.0)
    goto LABEL_246;
  v120 = v104[35];
  if (v120 <= 0.0)
    goto LABEL_246;
  if (v116 <= 8)
  {
    __break(0xC471u);
    JUMPOUT(0x1943D35E0);
  }
  v121 = v117[34];
  if (v121 <= 0.0 || (v122 = v117[35], v122 <= 0.0))
  {
LABEL_246:
    v105 = 1.0;
    v106 = 1.0;
  }
  else
  {
    if (v100)
    {
      if (v104[26] <= 0.0 || v104[27] <= 0.0 || v117[26] <= 0.0 || v117[27] <= 0.0)
      {
        v106 = 1.0;
        if (v104[30] > 0.0 && v104[31] > 0.0 && v117[30] > 0.0 && v117[31] > 0.0)
          v106 = v112;
      }
    }
    else
    {
      v106 = v119 / v121;
    }
    if ((_DWORD)v101)
    {
      if (v104[6] <= 0.0 || v104[7] <= 0.0 || v117[6] <= 0.0 || v117[7] <= 0.0)
      {
        v123 = v174;
        if (v104[18] <= 0.0 || v104[19] <= 0.0 || v117[18] <= 0.0 || v117[19] <= 0.0)
          v105 = 1.0;
        goto LABEL_248;
      }
      v105 = v111;
    }
    else
    {
      v105 = v120 / v122;
    }
  }
  v123 = v174;
LABEL_248:
  v102[16] = v106;
  v102[17] = v105;
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v123 + 176))(v180);
  if (!v180[0])
    goto LABEL_280;
  v125 = (unsigned __int8 *)a2;
  if ((*(_BYTE *)(*(_QWORD *)(v171 + 24) + 234) & 7u) - 1 >= 4)
    v126 = *(_BYTE *)(a2 + 340);
  else
    v126 = 0x1010002u >> (8 * ((*(_BYTE *)(*(_QWORD *)(v171 + 24) + 234) & 7) - 1));
  v170 = *(unsigned __int8 *)(a2 + 340);
  v172 = 1;
  if (v126)
  {
    if (*(unsigned __int8 *)(a2 + 340) == v126)
    {
      v172 = 1;
      v125 = (unsigned __int8 *)a2;
    }
    else
    {
      v100 = a2;
      *(_BYTE *)(a2 + 340) = v126;
      *(_DWORD *)(a2 + 184) |= 0x400u;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a2 + 8);
      v125 = (unsigned __int8 *)a2;
      v172 = 0;
    }
  }
  v127 = 0;
  v128 = 0;
  v168 = v125 + 340;
  v177 = (a8 & 0xF) << 8;
  v129 = 16 * v103;
  v175 = v177;
  v130 = v102;
  v131 = a1;
  while (v127 != 128 || *((_BYTE *)*v131 + 4))
  {
    if (v129 == v127)
    {
      __break(0xC471u);
      JUMPOUT(0x1943D34B0);
    }
    if (v104[v127 / 4 + 2] <= 0.0 || v104[v127 / 4 + 3] <= 0.0)
      goto LABEL_272;
    if (v128 >= v116)
    {
      __break(0xC471u);
      JUMPOUT(0x1943D3508);
    }
    if (v117[v127 / 4 + 2] <= 0.0 || v117[v127 / 4 + 3] <= 0.0)
      goto LABEL_272;
    v132 = 0;
    if (v128 > 8)
      goto LABEL_267;
    if (((1 << v128) & 0x2D) == 0)
    {
      if (((1 << v128) & 0x1C0) != 0)
        v132 = *((unsigned __int8 *)*v131 + 6);
LABEL_267:
      v133 = 0;
      if (v128 <= 8 && ((1 << v128) & 0x112) != 0)
        v133 = *((unsigned __int8 *)*v131 + 7);
      v175 = v177 | v175 & 0xFFC00000 | 0x21;
      v174 = v174 & 0xFFFFFFFFFF000000 | *(_QWORD *)&v175 & 0xFFFFFFLL;
      (*(void (**)(uint64_t, _QWORD, float *, float *, float *, uint64_t, uint64_t))(*(_QWORD *)v125 + 376))(a2, v180[0], &v104[v127 / 4], &v117[v127 / 4], v130, v132, v133);
      goto LABEL_271;
    }
    v100 = v177 | v100 & 0xFFC00000 | 0x21;
    v101 = v101 & 0xFFFFFFFFFF000000 | *(_QWORD *)&v100 & 0xFFFFFFLL;
    (*(void (**)(uint64_t, _QWORD, float *, float *, unint64_t, _QWORD))(*(_QWORD *)v125 + 360))(a2, v180[0], &v104[v127 / 4], &v117[v127 / 4], v101, 0);
LABEL_271:
    v131 = a1;
    v125 = (unsigned __int8 *)a2;
LABEL_272:
    ++v128;
    v127 += 16;
    v130 += 2;
    if (v127 == 144)
      break;
  }
  if ((v172 & 1) == 0)
  {
    if (*v168 != v170)
    {
      v125[340] = v170;
      *((_DWORD *)v125 + 46) |= 0x400u;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *))(*(_QWORD *)v125 + 88))(v125, v125 + 8);
  }
  v134 = (_DWORD *)v180[0];
  v180[0] = 0;
  if (v134)
  {
    if (v134[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v134 + 8))(v134);
    else
      --v134[2];
  }
LABEL_280:
  result = WTF::fastFree((WTF *)v102, v124);
  if (v117)
    result = WTF::fastFree((WTF *)v117, v136);
  if (v104)
    return WTF::fastFree((WTF *)v104, v136);
  return result;
}

uint64_t WebCore::GraphicsContext::drawImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  int v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  v6 = HIWORD(a5) & 0xF;
  v7 = *(unsigned __int8 *)(a1 + 340);
  if (v6)
  {
    v13 = a2;
    v14 = a5;
    v12 = a3;
    v11 = a4;
    if (v7 == v6)
    {
      v8 = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 340) = BYTE2(a5) & 0xF;
      *(_DWORD *)(a1 + 184) |= 0x400u;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a1 + 8);
      v8 = 0;
    }
    a4 = v11;
    a3 = v12;
    a2 = v13;
    a5 = v14;
  }
  else
  {
    v8 = 1;
  }
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 352))(a2, a1, a3, a4, *(_QWORD *)&a5 & 0xFFFFFFLL);
  if ((v8 & 1) == 0)
  {
    if (*(unsigned __int8 *)(a1 + 340) != v7)
    {
      *(_BYTE *)(a1 + 340) = v7;
      *(_DWORD *)(a1 + 184) |= 0x400u;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a1 + 8);
  }
  return v9;
}

uint64_t WebCore::GraphicsContext::drawTiledImage(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, int a6, int a7, unsigned int a8)
{
  int v9;
  int v11;
  __int16 v18;
  uint64_t v19;

  if (!(a7 | a6))
    return (*(uint64_t (**)(uint64_t, uint64_t, float *, float *, uint64_t))(*(_QWORD *)a1 + 360))(a1, a2, a3, a4, *(_QWORD *)&a8 & 0xFFFFFFLL);
  v9 = HIWORD(a8) & 0xF;
  if (!v9)
    return WebCore::Image::drawTiled(a2, a1, a3, a4, a5, a6, a7, a8 & 0xF00 | 0x1021);
  v11 = *(unsigned __int8 *)(a1 + 340);
  if (v11 == v9)
    return WebCore::Image::drawTiled(a2, a1, a3, a4, a5, a6, a7, a8 & 0xF00 | 0x1021);
  *(_BYTE *)(a1 + 340) = BYTE2(a8) & 0xF;
  *(_DWORD *)(a1 + 184) |= 0x400u;
  v18 = a8;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a1 + 8);
  v19 = WebCore::Image::drawTiled(a2, a1, a3, a4, a5, a6, a7, v18 & 0xF00 | 0x1021u);
  if (*(unsigned __int8 *)(a1 + 340) != v11)
  {
    *(_BYTE *)(a1 + 340) = v11;
    *(_DWORD *)(a1 + 184) |= 0x400u;
  }
  (*(void (**)(void))(*(_QWORD *)a1 + 88))();
  return v19;
}

uint64_t WebCore::BitmapImage::draw(uint64_t a1, WebCore::GraphicsContext *a2, float32x4_t *a3, float32x4_t *a4, unsigned int a5)
{
  float32x4_t v5;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  float32x4_t v17;
  float v18;
  float v19;
  float v21;
  float v22;
  float v23;
  float v24;
  int v25;
  uint64_t v26;
  float v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  unint64_t v36;
  float32x4_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  CGImageRef *v43;
  CGColorSpace *ColorSpace;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  int v48;
  float v50;
  double v51;
  double v52;
  double v53;
  float v54;
  float v55;
  double v56;
  float v57;
  float v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  float v64;
  float v65;
  double v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v73;
  float v74;
  float v75;
  float v77;
  float v78;
  float v80;
  float v81;
  CGColorSpace *v83;
  CGContext *v84;
  CGContext *v85;
  CGImageRef *v86;
  uint64_t v87;
  signed int v88;
  signed int v89;
  signed int v90;
  float v91;
  void *v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int v95;
  CGColorSpaceRef *v96;
  __int32 v97;
  WebCore::DestinationColorSpace *v98;
  uint64_t *v99;
  double v100;
  uint64_t v101;
  float v102;
  float v103;
  double v104;
  float v105;
  float32x4_t v106;
  void *v107;
  uint64_t v108;
  void *v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  int v116;
  float v117[2];
  float32x4_t v118;
  float32x4_t data;
  double v120;
  double v121;
  double v122;
  double v123;
  uint64_t v124;
  CGRect v125;

  v5.i64[0] = a3->i64[1];
  v5.i64[1] = a4->i64[1];
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vclezq_f32(v5))) & 1) != 0)
    return 0;
  v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 176))(*(_QWORD *)(a1 + 64), 1);
  v12 = v11;
  v13 = HIDWORD(v11);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 184))(*(_QWORD *)(a1 + 64), 1);
  v15 = v14;
  v16 = HIDWORD(v14);
  v17 = *a4;
  v118 = *a4;
  v18 = (float)(int)v14;
  v19 = (float)SHIDWORD(v14);
  if ((_DWORD)v14 != v12 || HIDWORD(v14) != (_DWORD)v13)
  {
    v17.f32[0] = v18 / (float)v12;
    WebCore::FloatRect::scale(&v118, *(double *)v17.i64, v19 / (float)(int)v13);
  }
  (*(void (**)(float32x4_t *__return_ptr, WebCore::GraphicsContext *, _QWORD))(*(_QWORD *)a2 + 672))(&data, a2, 0);
  if (*(double *)data.i64 == 1.0 && *(double *)&data.i64[1] == 0.0 && v120 == 0.0 && v121 == 1.0)
  {
    v22 = a3->f32[2];
    v21 = a3->f32[3];
  }
  else
  {
    v50 = a3->f32[1];
    v51 = a3->f32[0];
    v52 = v120 * v50;
    v53 = v121 * v50;
    v54 = v122 + v52 + *(double *)data.i64 * v51;
    v55 = v123 + v53 + *(double *)&data.i64[1] * v51;
    v56 = (float)(a3->f32[0] + a3->f32[2]);
    v57 = v122 + v52 + *(double *)data.i64 * v56;
    v58 = v123 + v53 + *(double *)&data.i64[1] * v56;
    v59 = (float)(v50 + a3->f32[3]);
    v60 = v120 * v59;
    v61 = v122 + v120 * v59 + *(double *)data.i64 * v56;
    v62 = v121 * v59;
    v63 = v123 + v121 * v59 + *(double *)&data.i64[1] * v56;
    v64 = v61;
    v65 = v63;
    v66 = v123 + v62 + *(double *)&data.i64[1] * v51;
    v67 = v122 + v60 + *(double *)data.i64 * v51;
    v68 = v66;
    if (v67 >= v64)
      v69 = v61;
    else
      v69 = v67;
    if (v57 >= v54)
      v70 = v54;
    else
      v70 = v57;
    if (v69 >= v70)
      v69 = v70;
    v71 = fabsf(v69);
    if (v71 == INFINITY || v71 > 2147500000.0)
      v69 = (float)((SLODWORD(v69) >> 31) ^ 0x7FFFFFFF);
    if (v68 >= v65)
      v73 = v65;
    else
      v73 = v68;
    if (v58 >= v55)
      v74 = v55;
    else
      v74 = v58;
    if (v73 >= v74)
      v73 = v74;
    v75 = fabsf(v73);
    if (v75 == INFINITY || v75 > 2147500000.0)
      v73 = (float)((SLODWORD(v73) >> 31) ^ 0x7FFFFFFF);
    if (v54 < v57)
      v54 = v57;
    if (v64 >= v67)
      v77 = v61;
    else
      v77 = v67;
    if (v54 < v77)
      v54 = v77;
    v78 = fabsf(v54);
    if (v78 == INFINITY || v78 > 2147500000.0)
      v54 = (float)((SLODWORD(v54) >> 31) ^ 0x7FFFFFFF);
    if (v55 < v58)
      v55 = v58;
    if (v65 >= v68)
      v80 = v65;
    else
      v80 = v68;
    if (v55 < v80)
      v55 = v80;
    v81 = fabsf(v55);
    if (v81 == INFINITY || v81 > 2147500000.0)
      v55 = (float)((SLODWORD(v55) >> 31) ^ 0x7FFFFFFF);
    v22 = v54 - v69;
    v21 = v55 - v73;
  }
  v117[0] = v22 / v118.f32[2];
  v117[1] = v21 / v118.f32[3];
  v23 = (float)(v21 / v118.f32[3]) * v19;
  v24 = ceilf((float)(v22 / v118.f32[2]) * v18);
  if (v24 > -2147500000.0)
    v25 = (int)v24;
  else
    v25 = 0x80000000;
  if (v24 < 2147500000.0)
    LODWORD(v26) = v25;
  else
    LODWORD(v26) = 0x7FFFFFFF;
  if (v24 >= 2147500000.0 || v24 <= -2147500000.0)
    v26 = v26;
  else
    v26 = (int)v24;
  v28 = ceilf(v23);
  if (v28 < 2147500000.0 && v28 > -2147500000.0)
    goto LABEL_28;
  if (v28 >= 2147500000.0)
  {
    v30 = 0x7FFFFFFF00000000;
  }
  else
  {
    if (v28 > -2147500000.0)
    {
LABEL_28:
      v30 = (unint64_t)(int)v28 << 32;
      goto LABEL_29;
    }
    v30 = 0x8000000000000000;
  }
LABEL_29:
  v31 = v30 | v26;
  v32 = (*(uint64_t (**)(_QWORD, WebCore::GraphicsContext *, float *, _QWORD))(**(_QWORD **)(a1 + 64) + 272))(*(_QWORD *)(a1 + 64), a2, v117, ((a5 & 0xFFFFFF) >> 20) & 1);
  v33 = *(_QWORD *)(a1 + 64);
  data.i8[0] = a5 >> 5;
  *(uint64_t *)((char *)data.i64 + 4) = v31;
  data.i8[12] = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, float32x4_t *))(*(_QWORD *)v33 + 168))(&v115, v33, v32, &data);
  if (v116)
  {
    if (v116 != 1)
      goto LABEL_105;
    if ((_DWORD)v115 != 3)
    {
      v47 = 0;
      v48 = 1;
      goto LABEL_46;
    }
    if ((a5 & 0x200000) != 0)
    {
      data.i64[0] = 0x11040000FFFF0080;
      WebCore::Image::fillWithSolidColor((uint64_t)a2, (uint64_t)a3, &data, (a5 >> 8) & 0xF, v34);
      if ((data.i64[0] & 0x8000000000000) != 0)
      {
        v110 = (unsigned int *)(data.i64[0] & 0xFFFFFFFFFFFFLL);
        do
        {
          v111 = __ldaxr(v110);
          v112 = v111 - 1;
        }
        while (__stlxr(v112, v110));
        if (!v112)
        {
          atomic_store(1u, v110);
          WTF::fastFree((WTF *)v110, v109);
        }
      }
    }
    v47 = 1;
  }
  else
  {
    v35 = v115;
    if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v115 + 48) + 24))(*(_QWORD *)(v115 + 48)) == 0x100000001
      && (v83 = (CGColorSpace *)WebCore::sRGBColorSpaceRef((WebCore *)0x100000001),
          (v84 = CGBitmapContextCreate(&data, 1uLL, 1uLL, 8uLL, 4uLL, v83, 0x4001u)) != 0))
    {
      v85 = v84;
      CGContextSetBlendMode(v84, kCGBlendModeCopy);
      v86 = (CGImageRef *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v35 + 48) + 16))(*(_QWORD *)(v35 + 48));
      v125.origin.x = 0.0;
      v125.origin.y = 0.0;
      v125.size.width = 1.0;
      v125.size.height = 1.0;
      CGContextDrawImage(v85, v125, *v86);
      v87 = 0x1104000000000000;
      if (data.i8[3])
      {
        v88 = 255 * data.u8[0] / data.u8[3];
        v89 = 255 * data.u8[1] / data.u8[3];
        if (v88 >= 255)
          v88 = 255;
        if (v89 >= 255)
          v89 = 255;
        v90 = 255 * data.u8[2] / data.u8[3];
        if (v90 >= 255)
          v90 = 255;
        v87 = bswap32((v90 << 16) | (data.u8[3] << 24) | (v89 << 8) | v88) | 0x1104000000000000;
      }
      v113 = v87;
      v114 = 1;
      CFRelease(v85);
      WebCore::Image::fillWithSolidColor((uint64_t)a2, (uint64_t)a3, &v113, (a5 >> 8) & 0xF, v91);
      if (v114)
      {
        if ((v113 & 0x8000000000000) != 0)
        {
          v93 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFLL);
          do
          {
            v94 = __ldaxr(v93);
            v95 = v94 - 1;
          }
          while (__stlxr(v95, v93));
          if (!v95)
          {
            atomic_store(1u, v93);
            WTF::fastFree((WTF *)v93, v92);
          }
        }
      }
    }
    else
    {
      LOBYTE(v113) = 0;
      v114 = 0;
      if (v116)
        goto LABEL_105;
      v36 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v115 + 48) + 24))(*(_QWORD *)(v115 + 48));
      v38 = HIDWORD(v36);
      if (v36 != __PAIR64__(v16, v15))
        goto LABEL_106;
      while (1)
      {
        v39 = (unsigned __int16)a5 >> 12;
        if (!((unsigned __int16)a5 >> 12))
        {
          v40 = *(_QWORD *)(a1 + 64);
          data.i8[0] = 0;
          data.i8[4] = 0;
          v39 = *(_BYTE *)((*(uint64_t (**)(uint64_t, float32x4_t *))(*(_QWORD *)v40 + 120))(v40, &data) + 44) & 0xF;
        }
        if (!v116)
          break;
LABEL_105:
        LODWORD(v36) = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_106:
        v37.f32[0] = (float)(int)v36 / v18;
        v37 = WebCore::FloatRect::scale(&v118, *(double *)v37.i64, (float)(int)v38 / v19);
      }
      v41 = v115;
      v42 = *(_QWORD *)&a5 & 0xFF0FFFLL | ((unint64_t)v39 << 12);
      v37.i32[0] = v118.i32[2];
      if (v118.f32[2] <= 0.0)
        goto LABEL_39;
      v37.i32[0] = v118.i32[3];
      if (v118.f32[3] <= 0.0)
        goto LABEL_39;
      v43 = (CGImageRef *)(*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(v115 + 48) + 16))(*(_QWORD *)(v115 + 48), v118.f32[3]);
      ColorSpace = CGImageGetColorSpace(*v43);
      if (CGColorSpaceIsHDR(ColorSpace)
        && (v96 = (CGColorSpaceRef *)(*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 32))(a2),
            !CGColorSpaceIsHDR(*v96))
        && (data.i32[0] = WebCore::GraphicsContext::scaleFactor(a2),
            data.i32[1] = v97,
            v99 = WebCore::DestinationColorSpace::DisplayP3(v98),
            WebCore::GraphicsContext::createScaledImageBuffer(a3, (uint64_t)a2, data.f32, (uint64_t)v99, 0x100u, 0x100u, &v124, v100), v124))
      {
        v101 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v124 + 16))(v124);
        (*(void (**)(uint64_t, uint64_t, float32x4_t *, float32x4_t *, unint64_t))(*(_QWORD *)v101
                                                                                                 + 720))(v101, v41, a3, &v118, v42);
        data.i64[0] = 0;
        data.i64[1] = v118.i64[1];
        v102 = a3->f32[2] / v118.f32[2];
        v103 = a3->f32[3] / v118.f32[3];
        *(float *)&v104 = v102 * WebCore::GraphicsContext::scaleFactor(a2);
        v106 = WebCore::FloatRect::scale(&data, v104, v103 * v105);
        (*(void (**)(WebCore::GraphicsContext *, uint64_t, float32x4_t *, float32x4_t *, uint64_t, float32x4_t))(*(_QWORD *)a2 + 384))(a2, v124, a3, &data, 4641, v106);
        v108 = v124;
        v124 = 0;
        if (v108)
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v108 + 8), v107);
      }
      else
      {
LABEL_39:
        (*(void (**)(WebCore::GraphicsContext *, uint64_t, float32x4_t *, float32x4_t *, unint64_t, float32x4_t))(*(_QWORD *)a2 + 720))(a2, v41, a3, &v118, v42, v37);
      }
    }
    v45 = *(_QWORD *)(a1 + 32);
    if (v45)
    {
      v46 = *(_DWORD **)(v45 + 8);
      if (v46)
      {
        ++v46[2];
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v46 + 64))(v46, a1);
        if (v46[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 8))(v46);
        else
          --v46[2];
      }
    }
    v47 = 3;
  }
  v48 = v116;
  if (v116 != -1)
LABEL_46:
    ((void (*)(float32x4_t *, uint64_t *))off_1E340AF10[v48])(&data, &v115);
  return v47;
}

void WebCore::GraphicsContextCG::drawNativeImageInternal(uint64_t a1, uint64_t a2, float *a3, uint64_t a4, unint64_t a5)
{
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat b;
  CFTypeRef *v14;
  CGImage *v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v30;
  float v31;
  CGContext *v33;
  CGColorSpace *ColorSpace;
  CGImageRef Image;
  int v36;
  int v39;
  CGImage *v40;
  char ShouldAntialias;
  char v42;
  _BOOL4 v43;
  char v44;
  double v45;
  double v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  double v53;
  float v54;
  float v55;
  double v56;
  BOOL v58;
  double v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  int v67;
  float v68;
  int v69;
  float v70;
  int v71;
  float v72;
  int v73;
  unsigned int v74;
  CGBlendMode v75;
  CGBlendMode v76;
  CGInterpolationQuality InterpolationQuality;
  float v78;
  float v79;
  float v80;
  float v81;
  double v82;
  double v83;
  _BOOL4 v84;
  double v86;
  double v87;
  BOOL v89;
  double v90;
  double v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  int v101;
  int v102;
  float v103;
  float v104;
  int v105;
  float v106;
  float v107;
  uint64_t Surface;
  uint64_t v109;
  const void *v110;
  CGFloat v111;
  CGFloat a;
  size_t Width;
  size_t Height;
  CGFloat v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  unsigned int v119;
  int v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  BOOL v133;
  float v134;
  BOOL v135;
  CGColorSpace *v136;
  CGImageRef v137;
  int v138;
  int v140;
  CGImage *v141;
  char v142;
  char v143;
  _BOOL4 v144;
  char v146;
  _BOOL4 IsIdentity;
  double v148;
  double v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  double v156;
  float v157;
  float v158;
  double v159;
  BOOL v161;
  double v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  int v173;
  float v174;
  int v175;
  float v176;
  int v177;
  float v178;
  int v179;
  unsigned int v180;
  CGBlendMode v181;
  CGFloat v182;
  CGBlendMode v183;
  float v184;
  float v185;
  float v189;
  float v190;
  int v194;
  unint64_t v195;
  float v196;
  double v200;
  double v201;
  BOOL v202;
  double v203;
  double v204;
  BOOL v205;
  double v206;
  double v207;
  BOOL v209;
  double v210;
  double v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  int v221;
  int v222;
  float v223;
  float v224;
  int v225;
  int v226;
  float v227;
  float v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  double v235;
  BOOL v237;
  double v238;
  double v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  int v249;
  int v250;
  float v251;
  float v252;
  int v253;
  int v254;
  float v255;
  float v256;
  double v257;
  double v258;
  double v259;
  double v261;
  double v262;
  double v263;
  double v264;
  int v265;
  unsigned int v266;
  unsigned int v267;
  unint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  const void *v272;
  CGFloat v273;
  CGFloat v274;
  size_t v275;
  size_t v276;
  CGFloat v277;
  float v278;
  long double v279;
  long double v280;
  long double d;
  long double v282;
  long double v283;
  long double c;
  float v285;
  float v286;
  float v287;
  float v288;
  float v289;
  float v290;
  float v291;
  float v292;
  float v293;
  float v294;
  float v295;
  float v296;
  float v297;
  float v298;
  CGAffineTransform transform;
  CGImage *v300;
  CGAffineTransform v301;
  CGAffineTransform v302;
  CGAffineTransform v303;
  char v304;
  char v305;
  CGAffineTransform *v306;
  CGRect v307;
  CGRect v308;
  CGRect v309;
  CGRect v310;
  CGRect v311;
  CGRect v312;
  CGRect v313;
  CGRect v314;
  CGRect v315;
  CGRect v316;

  v14 = (CFTypeRef *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 48) + 16))(*(_QWORD *)(a2 + 48));
  v15 = (CGImage *)*v14;
  if ((unsigned __int16)a5 >> 12 == 1)
  {
    if (!v15)
      return;
    CFRetain(*v14);
    v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 48) + 24))(*(_QWORD *)(a2 + 48));
    v17 = *(float *)(a4 + 4);
    v18 = *(float *)(a4 + 8);
    v19 = *(float *)(a4 + 12);
    if ((float)(*(float *)a4 + v18) >= *(float *)a4)
      LODWORD(v7) = *(_DWORD *)a4;
    else
      *(float *)&v7 = *(float *)a4 + v18;
    if ((float)(v17 + v19) >= v17)
      LODWORD(b) = *(_DWORD *)(a4 + 4);
    else
      *(float *)&b = v17 + v19;
    if (v18 >= 0.0)
      v20 = *(float *)(a4 + 8);
    else
      v20 = -v18;
    if (v19 >= 0.0)
      v21 = *(float *)(a4 + 12);
    else
      v21 = -v19;
    v22 = a3[1];
    v23 = a3[2];
    v24 = a3[3];
    if ((float)(*a3 + v23) >= *a3)
      v25 = *a3;
    else
      v25 = *a3 + v23;
    v26 = v22 + v24;
    if ((float)(v22 + v24) >= v22)
      v26 = a3[1];
    v291 = v25;
    v293 = v26;
    if (v23 >= 0.0)
      v27 = a3[2];
    else
      v27 = -v23;
    v28 = -v24;
    if (v24 >= 0.0)
      v28 = a3[3];
    v295 = v27;
    v297 = v28;
    if ((int)v16 < 1 || SHIDWORD(v16) < 1)
      goto LABEL_148;
    if (v20 <= 0.0)
      goto LABEL_148;
    if (v21 <= 0.0)
      goto LABEL_148;
    *(float *)&v5 = (float)(int)v16;
    if (*(float *)&v7 >= (float)(int)v16)
      goto LABEL_148;
    v30 = v20 + *(float *)&v7;
    if ((float)(v20 + *(float *)&v7) <= 0.0)
      goto LABEL_148;
    *(float *)&v6 = (float)SHIDWORD(v16);
    v31 = v21 + *(float *)&b;
    if ((float)(v21 + *(float *)&b) <= 0.0 || *(float *)&b >= *(float *)&v6)
      goto LABEL_148;
    *(_BYTE *)(a1 + 744) |= 8u;
    v33 = *(CGContext **)(a1 + 720);
    memset(&v301, 0, sizeof(v301));
    CGContextGetCTM(&v301, v33);
    ColorSpace = CGImageGetColorSpace(v15);
    if (CGColorSpaceUsesITUR_2100TF(ColorSpace)
      && (*(_BYTE *)(a1 + 744) |= 8u, (Surface = CGIOSurfaceContextGetSurface()) != 0)
      && (v109 = Surface, (v110 = (const void *)CGIOSurfaceContextGetColorSpace()) != 0))
    {
      v111 = *(double *)&v110;
      CFRetain(v110);
      v303.a = v111;
      LOBYTE(v303.b) = 1;
      WebCore::IOSurface::createFromSurface(v109, (uint64_t *)&v303, (uint64_t *)&v302);
      if (LOBYTE(v303.b))
      {
        a = v303.a;
        v303.a = 0.0;
        if (a != 0.0)
          CFRelease(*(CFTypeRef *)&a);
      }
      Width = CGImageGetWidth(v15);
      Height = CGImageGetHeight(v15);
      WebCore::IOSurface::createCompatibleBitmap(*(WebCore::IOSurface **)&v302.a, Width, Height, (CGContextRef *)&v303);
      v308.size.width = (double)Width;
      v308.size.height = (double)Height;
      v308.origin.x = 0.0;
      v308.origin.y = 0.0;
      CGContextDrawImage(*(CGContextRef *)&v303.a, v308, v15);
      Image = CGBitmapContextCreateImage(*(CGContextRef *)&v303.a);
      CFRelease(v15);
      v115 = v303.a;
      v303.a = 0.0;
      if (v115 != 0.0)
        CFRelease(*(CFTypeRef *)&v115);
      std::unique_ptr<WebCore::IOSurface>::~unique_ptr[abi:sn180100]((uint64_t *)&v302);
      if (!Image)
      {
        v15 = 0;
        v36 = 1;
LABEL_41:
        if (*(float *)&v7 != 0.0 || v20 != *(float *)&v5)
        {
          if (*(float *)&v7 == 0.0 && *(float *)&b == 0.0 && v20 == *(float *)&v5 && v21 == *(float *)&v6)
          {
            v39 = 1;
            v40 = v15;
            goto LABEL_255;
          }
          v287 = v297 / v21;
          v290 = v295 / v20;
          if (CGContextGetInterpolationQuality(v33) == kCGInterpolationNone)
            goto LABEL_331;
          if (v301.b == 0.0)
          {
            c = v301.c;
            if (v301.c == 0.0)
            {
              d = v301.d;
              v203 = hypot(v301.a, v301.b) * v295 / v20;
              v204 = hypot(c, d) * v297 / v21;
              if (v203 == v204)
                goto LABEL_402;
              v234 = vabdd_f64(v203, v204);
              v235 = fabs(v203);
              if (v235 < 1.0 && v235 * 1.79769313e308 < v234)
                goto LABEL_459;
              v237 = v235 * 2.22507386e-308 <= v234 || v235 <= 1.0;
              v238 = v234 / v235;
              if (v237 && v238 > 2.22044605e-16)
                goto LABEL_459;
              v240 = fabs(v204);
              if (v240 < 1.0 && v240 * 1.79769313e308 < v234)
                goto LABEL_459;
              if (v240 > 1.0 && v240 * 2.22507386e-308 > v234)
LABEL_402:
                v205 = 0;
              else
                v205 = v234 / v240 > 2.22044605e-16;
              if (v203 <= 1.0 && !v205)
              {
LABEL_331:
                v189 = *(float *)&v5;
                v190 = *(float *)&v6;
                v40 = v15;
LABEL_332:
                *(float *)&v5 = v287 * v190;
                *(float *)&v6 = v290 * v189;
                *(float *)&b = v293 - (float)(v287 * *(float *)&b);
                *(float *)&v7 = v291 - (float)(v290 * *(float *)&v7);
                if (v291 > *(float *)&v7
                  || (float)(v295 + v291) < (float)(*(float *)&v7 + (float)(v290 * v189))
                  || v293 > *(float *)&b
                  || (float)(v297 + v293) < (float)(*(float *)&b + *(float *)&v5))
                {
                  CGContextSaveGState(v33);
                  v311.origin.x = v291;
                  v311.origin.y = v293;
                  v311.size.width = v295;
                  v311.size.height = v297;
                  CGContextClipToRect(v33, v311);
                  v39 = 0;
                }
                else
                {
                  v39 = 1;
                }
                v291 = *(float *)&v7;
                v293 = *(float *)&b;
                v295 = v290 * v189;
                v297 = v287 * v190;
LABEL_255:
                ShouldAntialias = CGContextGetShouldAntialias();
                CGContextSetShouldAntialias(v33, 0);
                v146 = *(_BYTE *)(a1 + 744);
                if ((v146 & 4) == 0)
                {
                  CGContextGetUserSpaceToDeviceSpaceTransform(&v303, *(CGContextRef *)(a1 + 720));
                  v7 = v303.a;
                  b = v303.b;
                  v5 = v303.c;
                  v6 = v303.d;
                  v302 = v303;
                  IsIdentity = CGAffineTransformIsIdentity(&v302);
                  v146 = *(_BYTE *)(a1 + 744);
                  if (IsIdentity)
                  {
                    v146 |= 4u;
                    *(_BYTE *)(a1 + 744) = v146;
                  }
                }
                if ((v146 & 4) != 0)
                {
                  v169 = roundf(v291);
                  if (v169 >= 2147500000.0)
                  {
                    v67 = 0x7FFFFFFF;
                  }
                  else if (v169 <= -2147500000.0)
                  {
                    v67 = 0x80000000;
                  }
                  else
                  {
                    v67 = (int)v169;
                  }
                  v170 = roundf(v293);
                  if (v170 >= 2147500000.0)
                  {
                    v69 = 0x7FFFFFFF;
                  }
                  else if (v170 <= -2147500000.0)
                  {
                    v69 = 0x80000000;
                  }
                  else
                  {
                    v69 = (int)v170;
                  }
                  v171 = roundf(v295);
                  if (v171 >= 2147500000.0)
                  {
                    v71 = 0x7FFFFFFF;
                  }
                  else if (v171 <= -2147500000.0)
                  {
                    v71 = 0x80000000;
                  }
                  else
                  {
                    v71 = (int)v171;
                  }
                  v72 = roundf(v297);
LABEL_290:
                  if (v72 >= 2147500000.0)
                  {
                    v73 = 0x7FFFFFFF;
                    goto LABEL_80;
                  }
                  if (v72 <= -2147500000.0)
                  {
                    v73 = 0x80000000;
                    goto LABEL_80;
                  }
LABEL_79:
                  v73 = (int)v72;
LABEL_80:
                  v60 = (float)v67;
                  v61 = (float)v69;
                  v64 = (float)v71;
                  v65 = (float)v73;
                  goto LABEL_81;
                }
LABEL_57:
                v45 = hypot(v7, b);
                v46 = hypot(v5, v6);
                v47 = v45 * v291;
                v48 = roundf(v47);
                v49 = v46 * v293;
                v50 = roundf(v49);
                v51 = v45 * (float)(v291 + v295);
                v52 = roundf(v51);
                v53 = v52;
                v54 = v46 * (float)(v293 + v297);
                v55 = roundf(v54);
                v56 = v55;
                if (v297 != 0.0 && v50 == v55)
                  v56 = v56 + 1.0;
                v58 = v295 != 0.0 && v48 == v52;
                v59 = v53 + 1.0;
                if (!v58)
                  v59 = v53;
                v60 = v48 / v45;
                v61 = v50 / v46;
                v62 = v59 / v45;
                v63 = v56 / v46;
                v64 = v62 - v60;
                v65 = v63 - v61;
LABEL_81:
                v74 = *(unsigned __int16 *)(a1 + 194);
                if ((a5 & 0x1F) == 1)
                {
                  if ((~(_WORD)a5 & 0xE00) != 0)
                    v75 = dword_1969F82BC[(a5 >> 8) & 0xF];
                  else
LABEL_83:
                    v75 = kCGBlendModeNormal;
                }
                else
                {
                  v75 = kCGBlendModeMultiply;
                  switch(a5 & 0x1F)
                  {
                    case 2uLL:
                      break;
                    case 3uLL:
                      v75 = kCGBlendModeScreen;
                      break;
                    case 4uLL:
                      v75 = kCGBlendModeDarken;
                      break;
                    case 5uLL:
                      v75 = kCGBlendModeLighten;
                      break;
                    case 6uLL:
                      v75 = kCGBlendModeOverlay;
                      break;
                    case 7uLL:
                      v75 = kCGBlendModeColorDodge;
                      break;
                    case 8uLL:
                      v75 = kCGBlendModeColorBurn;
                      break;
                    case 9uLL:
                      v75 = kCGBlendModeHardLight;
                      break;
                    case 0xAuLL:
                      v75 = kCGBlendModeSoftLight;
                      break;
                    case 0xBuLL:
                      v75 = kCGBlendModeDifference;
                      break;
                    case 0xCuLL:
                      v75 = kCGBlendModeExclusion;
                      break;
                    case 0xDuLL:
                      v75 = kCGBlendModeHue;
                      break;
                    case 0xEuLL:
                      v75 = kCGBlendModeSaturation;
                      break;
                    case 0xFuLL:
                      v75 = kCGBlendModeColor;
                      break;
                    case 0x10uLL:
                      v75 = kCGBlendModeLuminosity;
                      break;
                    case 0x11uLL:
                      v75 = kCGBlendModePlusDarker;
                      break;
                    case 0x12uLL:
                      v75 = kCGBlendModePlusLighter;
                      break;
                    default:
                      goto LABEL_83;
                  }
                }
                CGContextSetBlendMode(v33, v75);
                CGContextTranslateCTM(v33, v60, v61);
                CGContextTranslateCTM(v33, 0.0, v65);
                CGContextScaleCTM(v33, 1.0, -1.0);
                v307.size.width = v64;
                v307.origin.x = 0.0;
                v307.origin.y = 0.0;
                v307.size.height = v65;
                CGContextDrawImage(v33, v307, v40);
                if (v39)
                {
                  CGContextSetCTM();
                  CGContextSetShouldAntialias(v33, ShouldAntialias);
                  if (v74 >> 8 == 1)
                  {
                    if (v74 >= 0xEu)
LABEL_142:
                      v76 = kCGBlendModeNormal;
                    else
                      v76 = dword_1969F82BC[(char)v74];
                  }
                  else
                  {
                    v76 = kCGBlendModeMultiply;
                    switch(v74 >> 8)
                    {
                      case 2u:
                        break;
                      case 3u:
                        v76 = kCGBlendModeScreen;
                        break;
                      case 4u:
                        v76 = kCGBlendModeDarken;
                        break;
                      case 5u:
                        v76 = kCGBlendModeLighten;
                        break;
                      case 6u:
                        v76 = kCGBlendModeOverlay;
                        break;
                      case 7u:
                        v76 = kCGBlendModeColorDodge;
                        break;
                      case 8u:
                        v76 = kCGBlendModeColorBurn;
                        break;
                      case 9u:
                        v76 = kCGBlendModeHardLight;
                        break;
                      case 0xAu:
                        v76 = kCGBlendModeSoftLight;
                        break;
                      case 0xBu:
                        v76 = kCGBlendModeDifference;
                        break;
                      case 0xCu:
                        v76 = kCGBlendModeExclusion;
                        break;
                      case 0xDu:
                        v76 = kCGBlendModeHue;
                        break;
                      case 0xEu:
                        v76 = kCGBlendModeSaturation;
                        break;
                      case 0xFu:
                        v76 = kCGBlendModeColor;
                        break;
                      case 0x10u:
                        v76 = kCGBlendModeLuminosity;
                        break;
                      case 0x11u:
                        v76 = kCGBlendModePlusDarker;
                        break;
                      case 0x12u:
                        v76 = kCGBlendModePlusLighter;
                        break;
                      default:
                        goto LABEL_142;
                    }
                  }
                  CGContextSetBlendMode(v33, v76);
                }
                if (v40)
                  CFRelease(v40);
                if ((v39 & 1) != 0)
                  goto LABEL_147;
                goto LABEL_493;
              }
            }
          }
LABEL_459:
          v241 = floorf(*(float *)&v7);
          v242 = 2147500000.0;
          if (v241 < 2147500000.0)
          {
            v242 = -2147500000.0;
            if (v241 > -2147500000.0)
              v242 = (float)(int)v241;
          }
          v243 = floorf(*(float *)&b);
          v244 = 2147500000.0;
          if (v243 < 2147500000.0)
          {
            v244 = -2147500000.0;
            if (v243 > -2147500000.0)
              v244 = (float)(int)v243;
          }
          v245 = ceilf(v30);
          v246 = 2147500000.0;
          if (v245 < 2147500000.0)
          {
            v246 = -2147500000.0;
            if (v245 > -2147500000.0)
              v246 = (float)(int)v245;
          }
          v247 = ceilf(v31);
          v248 = 2147500000.0;
          if (v247 < 2147500000.0)
          {
            v248 = -2147500000.0;
            if (v247 > -2147500000.0)
              v248 = (float)(int)v247;
          }
          if (v242 >= 2147500000.0)
          {
            v249 = 0x7FFFFFFF;
          }
          else if (v242 <= -2147500000.0)
          {
            v249 = 0x80000000;
          }
          else
          {
            v249 = (int)v242;
          }
          if (v244 >= 2147500000.0)
          {
            v250 = 0x7FFFFFFF;
          }
          else if (v244 <= -2147500000.0)
          {
            v250 = 0x80000000;
          }
          else
          {
            v250 = (int)v244;
          }
          v251 = v246 - v242;
          v252 = v248 - v244;
          if (v251 >= 2147500000.0)
          {
            v253 = 0x7FFFFFFF;
          }
          else if (v251 <= -2147500000.0)
          {
            v253 = 0x80000000;
          }
          else
          {
            v253 = (int)v251;
          }
          if (v252 >= 2147500000.0)
          {
            v254 = 0x7FFFFFFF;
          }
          else if (v252 <= -2147500000.0)
          {
            v254 = 0x80000000;
          }
          else
          {
            v254 = (int)v252;
          }
          v255 = (float)v249;
          v256 = (float)v250;
          v189 = (float)v253;
          v190 = (float)v254;
          *(float *)&v302.a = (float)v249;
          *((float *)&v302.a + 1) = (float)v250;
          *(float *)&v302.b = (float)v253;
          *((float *)&v302.b + 1) = (float)v254;
          if ((CGImageGetCachingFlags() & 1) != 0)
          {
            v315.origin.x = *(float *)&v302.a;
            v315.origin.y = *((float *)&v302.a + 1);
            v315.size.width = *(float *)&v302.b;
            v315.size.height = *((float *)&v302.b + 1);
            v40 = CGImageCreateWithImageInRect(v15, v315);
          }
          else
          {
            v269 = atomic_load(&WebCore::CGSubimageCacheWithTimer::subimageCache(void)::onceKey);
            if (v269 != -1)
            {
              *(_QWORD *)&v303.a = &v305;
              v306 = &v303;
              std::__call_once(&WebCore::CGSubimageCacheWithTimer::subimageCache(void)::onceKey, &v306, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CGSubimageCacheWithTimer::subimageCache(void)::$_0 &&>>);
            }
            WebCore::CGSubimageCacheWithTimer::subimage((WebCore::CGSubimageCacheWithTimer *)WebCore::CGSubimageCacheWithTimer::s_cache, v15, (const WebCore::FloatRect *)&v302, &v300);
            v40 = v300;
          }
          v300 = 0;
          if (!v36)
            CFRelease(v15);
          *(float *)&v7 = *(float *)&v7 - v255;
          *(float *)&b = *(float *)&b - v256;
          goto LABEL_332;
        }
        if (*(float *)&b == 0.0 && v21 == *(float *)&v6)
        {
          v39 = 1;
          v40 = v15;
LABEL_52:
          ShouldAntialias = CGContextGetShouldAntialias();
          CGContextSetShouldAntialias(v33, 0);
          v42 = *(_BYTE *)(a1 + 744);
          if ((v42 & 4) != 0)
            goto LABEL_56;
          CGContextGetUserSpaceToDeviceSpaceTransform(&v303, *(CGContextRef *)(a1 + 720));
          v7 = v303.a;
          b = v303.b;
          v5 = v303.c;
          v6 = v303.d;
          v302 = v303;
          v43 = CGAffineTransformIsIdentity(&v302);
          v42 = *(_BYTE *)(a1 + 744);
          if (!v43)
          {
LABEL_56:
            if ((v42 & 4) == 0)
              goto LABEL_57;
          }
          else
          {
            v44 = v42 | 4;
            *(_BYTE *)(a1 + 744) = v44;
            if ((v44 & 4) == 0)
              goto LABEL_57;
          }
          v66 = roundf(v291);
          if (v66 < 2147500000.0 && v66 > -2147500000.0)
            goto LABEL_70;
          if (v66 >= 2147500000.0)
          {
            v67 = 0x7FFFFFFF;
            goto LABEL_71;
          }
          if (v66 > -2147500000.0)
LABEL_70:
            v67 = (int)v66;
          else
            v67 = 0x80000000;
LABEL_71:
          v68 = roundf(v293);
          if (v68 < 2147500000.0 && v68 > -2147500000.0)
            goto LABEL_73;
          if (v68 >= 2147500000.0)
          {
            v69 = 0x7FFFFFFF;
          }
          else
          {
            if (v68 > -2147500000.0)
            {
LABEL_73:
              v69 = (int)v68;
              goto LABEL_74;
            }
            v69 = 0x80000000;
          }
LABEL_74:
          v70 = roundf(v295);
          if (v70 < 2147500000.0 && v70 > -2147500000.0)
            goto LABEL_76;
          if (v70 >= 2147500000.0)
          {
            v71 = 0x7FFFFFFF;
            goto LABEL_77;
          }
          if (v70 > -2147500000.0)
LABEL_76:
            v71 = (int)v70;
          else
            v71 = 0x80000000;
LABEL_77:
          v72 = roundf(v297);
          if (v72 < 2147500000.0 && v72 > -2147500000.0)
            goto LABEL_79;
          goto LABEL_290;
        }
        InterpolationQuality = CGContextGetInterpolationQuality(v33);
        v78 = v295 / v20;
        v79 = v297 / v21;
        if (InterpolationQuality == kCGInterpolationNone)
        {
          v80 = *(float *)&v5;
          v81 = *(float *)&v6;
          v40 = v15;
LABEL_379:
          *(float *)&v5 = v79 * v81;
          *(float *)&v6 = v78 * v80;
          *(float *)&b = v293 - (float)(v79 * *(float *)&b);
          *(float *)&v7 = v291 - (float)(v78 * *(float *)&v7);
          v196 = *(float *)&v7 + (float)(v78 * v80);
          if (v291 > *(float *)&v7
            || (float)(v295 + v291) < v196
            || v293 > *(float *)&b
            || (float)(v297 + v293) < (float)(*(float *)&b + *(float *)&v5))
          {
            CGContextSaveGState(v33);
            v313.origin.x = v291;
            v313.origin.y = v293;
            v313.size.width = v295;
            v313.size.height = v297;
            CGContextClipToRect(v33, v313);
            v39 = 0;
          }
          else
          {
            v39 = 1;
          }
          v291 = *(float *)&v7;
          v293 = *(float *)&b;
          v295 = *(float *)&v6;
          v297 = *(float *)&v5;
          goto LABEL_52;
        }
        v285 = v297 / v21;
        v288 = v295 / v20;
        if (v301.b == 0.0 && v301.c == 0.0)
        {
          v282 = v301.c;
          v279 = v301.d;
          v82 = hypot(v301.a, v301.b) * v295 / v20;
          v83 = hypot(v282, v279) * v297 / v21;
          if (v82 == v83)
            goto LABEL_94;
          v86 = vabdd_f64(v82, v83);
          v87 = fabs(v82);
          if (v87 < 1.0 && v87 * 1.79769313e308 < v86)
            goto LABEL_114;
          v89 = v87 * 2.22507386e-308 <= v86 || v87 <= 1.0;
          v90 = v86 / v87;
          if (v89 && v90 > 2.22044605e-16)
            goto LABEL_114;
          v92 = fabs(v83);
          if (v92 < 1.0 && v92 * 1.79769313e308 < v86)
            goto LABEL_114;
          if (v92 > 1.0 && v92 * 2.22507386e-308 > v86)
LABEL_94:
            v84 = 0;
          else
            v84 = v86 / v92 > 2.22044605e-16;
          if (v82 <= 1.0 && !v84)
          {
            v80 = *(float *)&v5;
            v81 = *(float *)&v6;
            v40 = v15;
LABEL_378:
            v79 = v285;
            v78 = v288;
            goto LABEL_379;
          }
        }
LABEL_114:
        v93 = floorf(*(float *)&v7);
        if (v93 < 2147500000.0 && v93 > -2147500000.0
          || (v94 = 2147500000.0, v93 < 2147500000.0) && (v94 = -2147500000.0, v93 > -2147500000.0))
        {
          v94 = (float)(int)v93;
        }
        v95 = floorf(*(float *)&b);
        if (v95 < 2147500000.0 && v95 > -2147500000.0
          || (v96 = 2147500000.0, v95 < 2147500000.0) && (v96 = -2147500000.0, v95 > -2147500000.0))
        {
          v96 = (float)(int)v95;
        }
        v97 = ceilf(v30);
        if (v97 < 2147500000.0 && v97 > -2147500000.0
          || (v98 = 2147500000.0, v97 < 2147500000.0) && (v98 = -2147500000.0, v97 > -2147500000.0))
        {
          v98 = (float)(int)v97;
        }
        v99 = ceilf(v31);
        if (v99 < 2147500000.0 && v99 > -2147500000.0
          || (v100 = 2147500000.0, v99 < 2147500000.0) && (v100 = -2147500000.0, v99 > -2147500000.0))
        {
          v100 = (float)(int)v99;
        }
        if (v94 < 2147500000.0 && v94 > -2147500000.0)
          goto LABEL_128;
        if (v94 >= 2147500000.0)
        {
          v101 = 0x7FFFFFFF;
        }
        else
        {
          if (v94 > -2147500000.0)
          {
LABEL_128:
            v101 = (int)v94;
            goto LABEL_129;
          }
          v101 = 0x80000000;
        }
LABEL_129:
        if (v96 < 2147500000.0 && v96 > -2147500000.0)
          goto LABEL_131;
        if (v96 >= 2147500000.0)
        {
          v102 = 0x7FFFFFFF;
          goto LABEL_132;
        }
        if (v96 > -2147500000.0)
LABEL_131:
          v102 = (int)v96;
        else
          v102 = 0x80000000;
LABEL_132:
        v103 = v98 - v94;
        v104 = v100 - v96;
        if (v103 < 2147500000.0 && v103 > -2147500000.0)
          goto LABEL_134;
        if (v103 >= 2147500000.0)
        {
          v105 = 0x7FFFFFFF;
        }
        else
        {
          if (v103 > -2147500000.0)
          {
LABEL_134:
            v105 = (int)v103;
            goto LABEL_135;
          }
          v105 = 0x80000000;
        }
LABEL_135:
        if (v104 >= 2147500000.0 || v104 <= -2147500000.0)
        {
          if (v104 >= 2147500000.0)
          {
            v194 = 0x7FFFFFFF;
          }
          else if (v104 <= -2147500000.0)
          {
            v194 = 0x80000000;
          }
          else
          {
            v194 = (int)v104;
          }
          v106 = (float)v101;
          v107 = (float)v102;
          v80 = (float)v105;
          v81 = (float)v194;
          *(float *)&v302.a = (float)v101;
          *((float *)&v302.a + 1) = (float)v102;
          *(float *)&v302.b = (float)v105;
          *((float *)&v302.b + 1) = (float)v194;
        }
        else
        {
          v106 = (float)v101;
          v107 = (float)v102;
          v80 = (float)v105;
          v81 = (float)(int)v104;
          *(float *)&v302.a = (float)v101;
          *((float *)&v302.a + 1) = (float)v102;
          *(float *)&v302.b = (float)v105;
          *((float *)&v302.b + 1) = v81;
        }
        if ((CGImageGetCachingFlags() & 1) != 0)
        {
          v312.origin.x = *(float *)&v302.a;
          v312.origin.y = *((float *)&v302.a + 1);
          v312.size.width = *(float *)&v302.b;
          v312.size.height = *((float *)&v302.b + 1);
          v40 = CGImageCreateWithImageInRect(v15, v312);
        }
        else
        {
          v195 = atomic_load(&WebCore::CGSubimageCacheWithTimer::subimageCache(void)::onceKey);
          if (v195 != -1)
          {
            *(_QWORD *)&v303.a = &v305;
            v306 = &v303;
            std::__call_once(&WebCore::CGSubimageCacheWithTimer::subimageCache(void)::onceKey, &v306, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CGSubimageCacheWithTimer::subimageCache(void)::$_0 &&>>);
          }
          WebCore::CGSubimageCacheWithTimer::subimage((WebCore::CGSubimageCacheWithTimer *)WebCore::CGSubimageCacheWithTimer::s_cache, v15, (const WebCore::FloatRect *)&v302, &v300);
          v40 = v300;
        }
        v300 = 0;
        if ((v36 & 1) == 0)
          CFRelease(v15);
        *(float *)&v7 = *(float *)&v7 - v106;
        *(float *)&b = *(float *)&b - v107;
        goto LABEL_378;
      }
    }
    else
    {
      Image = v15;
    }
    CFRetain(Image);
    v36 = 0;
    v15 = Image;
    goto LABEL_41;
  }
  if (v15)
  {
    CFRetain(*v14);
    v116 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 48) + 24))(*(_QWORD *)(a2 + 48));
    v117 = HIDWORD(v116);
    v118 = (unsigned __int16)a5 >> 12;
    v119 = v118 - 5;
    if ((v118 - 5) <= 3)
      v120 = HIDWORD(v116);
    else
      v120 = v116;
    if (v119 <= 3)
      LODWORD(v117) = v116;
    v121 = *(float *)(a4 + 4);
    v122 = *(float *)(a4 + 8);
    v123 = *(float *)(a4 + 12);
    if ((float)(*(float *)a4 + v122) >= *(float *)a4)
      LODWORD(v7) = *(_DWORD *)a4;
    else
      *(float *)&v7 = *(float *)a4 + v122;
    if ((float)(v121 + v123) >= v121)
      LODWORD(b) = *(_DWORD *)(a4 + 4);
    else
      *(float *)&b = v121 + v123;
    if (v122 >= 0.0)
      v124 = *(float *)(a4 + 8);
    else
      v124 = -v122;
    if (v123 >= 0.0)
      v125 = *(float *)(a4 + 12);
    else
      v125 = -v123;
    v126 = a3[1];
    v127 = a3[2];
    v128 = a3[3];
    if ((float)(*a3 + v127) >= *a3)
      v129 = *a3;
    else
      v129 = *a3 + v127;
    v130 = v126 + v128;
    if ((float)(v126 + v128) >= v126)
      v130 = a3[1];
    v292 = v129;
    v294 = v130;
    if (v127 >= 0.0)
      v131 = a3[2];
    else
      v131 = -v127;
    v132 = -v128;
    if (v128 >= 0.0)
      v132 = a3[3];
    v296 = v131;
    v298 = v132;
    v133 = v120 < 1 || (int)v117 < 1;
    if (v133
      || v124 <= 0.0
      || v125 <= 0.0
      || (*(float *)&v6 = (float)v120, *(float *)&v7 >= (float)v120)
      || (v134 = v124 + *(float *)&v7, (float)(v124 + *(float *)&v7) <= 0.0)
      || ((*(float *)&v5 = (float)(int)v117, (float)(v125 + *(float *)&b) > 0.0)
        ? (v135 = *(float *)&b < *(float *)&v5)
        : (v135 = 0),
          !v135))
    {
LABEL_148:
      CFRelease(v15);
      return;
    }
    *(_BYTE *)(a1 + 744) |= 8u;
    v33 = *(CGContext **)(a1 + 720);
    memset(&v301, 0, sizeof(v301));
    CGContextGetCTM(&v301, v33);
    v136 = CGImageGetColorSpace(v15);
    if (CGColorSpaceUsesITUR_2100TF(v136)
      && (*(_BYTE *)(a1 + 744) |= 8u, (v270 = CGIOSurfaceContextGetSurface()) != 0)
      && (v271 = v270, (v272 = (const void *)CGIOSurfaceContextGetColorSpace()) != 0))
    {
      v273 = *(double *)&v272;
      CFRetain(v272);
      v303.a = v273;
      LOBYTE(v303.b) = 1;
      WebCore::IOSurface::createFromSurface(v271, (uint64_t *)&v303, (uint64_t *)&v302);
      if (LOBYTE(v303.b))
      {
        v274 = v303.a;
        v303.a = 0.0;
        if (v274 != 0.0)
          CFRelease(*(CFTypeRef *)&v274);
      }
      v275 = CGImageGetWidth(v15);
      v276 = CGImageGetHeight(v15);
      WebCore::IOSurface::createCompatibleBitmap(*(WebCore::IOSurface **)&v302.a, v275, v276, (CGContextRef *)&v303);
      v316.size.width = (double)v275;
      v316.size.height = (double)v276;
      v316.origin.x = 0.0;
      v316.origin.y = 0.0;
      CGContextDrawImage(*(CGContextRef *)&v303.a, v316, v15);
      v137 = CGBitmapContextCreateImage(*(CGContextRef *)&v303.a);
      CFRelease(v15);
      v277 = v303.a;
      v303.a = 0.0;
      if (v277 != 0.0)
        CFRelease(*(CFTypeRef *)&v277);
      std::unique_ptr<WebCore::IOSurface>::~unique_ptr[abi:sn180100]((uint64_t *)&v302);
      if (!v137)
      {
        v15 = 0;
        v138 = 1;
LABEL_236:
        if (*(float *)&v7 == 0.0 && *(float *)&b == 0.0 && v124 == *(float *)&v6 && v125 == *(float *)&v5)
        {
          v140 = 1;
          v141 = v15;
          goto LABEL_244;
        }
        v286 = v298 / v125;
        v289 = v296 / v124;
        if (CGContextGetInterpolationQuality(v33) == kCGInterpolationNone)
          goto LABEL_316;
        if (v301.b == 0.0)
        {
          v283 = v301.c;
          if (v301.c == 0.0)
          {
            v280 = v301.d;
            v200 = hypot(v301.a, v301.b) * v296 / v124;
            v201 = hypot(v283, v280) * v298 / v125;
            if (v200 == v201)
              goto LABEL_395;
            v206 = vabdd_f64(v200, v201);
            v207 = fabs(v200);
            if (v207 < 1.0 && v207 * 1.79769313e308 < v206)
              goto LABEL_419;
            v209 = v207 * 2.22507386e-308 <= v206 || v207 <= 1.0;
            v210 = v206 / v207;
            if (v209 && v210 > 2.22044605e-16)
              goto LABEL_419;
            v212 = fabs(v201);
            if (v212 < 1.0 && v212 * 1.79769313e308 < v206)
              goto LABEL_419;
            if (v212 > 1.0 && v212 * 2.22507386e-308 > v206)
LABEL_395:
              v202 = 0;
            else
              v202 = v206 / v212 > 2.22044605e-16;
            if (v200 <= 1.0 && !v202)
            {
LABEL_316:
              v184 = *(float *)&v6;
              v185 = *(float *)&v5;
              v141 = v15;
LABEL_317:
              *(float *)&v5 = v286 * v185;
              *(float *)&v6 = v289 * v184;
              *(float *)&b = v294 - (float)(v286 * *(float *)&b);
              *(float *)&v7 = v292 - (float)(v289 * *(float *)&v7);
              if (v292 > *(float *)&v7
                || (float)(v296 + v292) < (float)(*(float *)&v7 + (float)(v289 * v184))
                || v294 > *(float *)&b
                || (float)(v298 + v294) < (float)(*(float *)&b + *(float *)&v5))
              {
                CGContextSaveGState(v33);
                v310.origin.x = v292;
                v310.origin.y = v294;
                v310.size.width = v296;
                v310.size.height = v298;
                CGContextClipToRect(v33, v310);
                v140 = 0;
              }
              else
              {
                v140 = 1;
              }
              v292 = *(float *)&v7;
              v294 = *(float *)&b;
              v296 = v289 * v184;
              v298 = v286 * v185;
LABEL_244:
              v142 = CGContextGetShouldAntialias();
              CGContextSetShouldAntialias(v33, 0);
              v143 = *(_BYTE *)(a1 + 744);
              if ((v143 & 4) == 0)
              {
                CGContextGetUserSpaceToDeviceSpaceTransform(&v303, *(CGContextRef *)(a1 + 720));
                v7 = v303.a;
                b = v303.b;
                v5 = v303.c;
                v6 = v303.d;
                v302 = v303;
                v144 = CGAffineTransformIsIdentity(&v302);
                v143 = *(_BYTE *)(a1 + 744);
                if (v144)
                {
                  v143 |= 4u;
                  *(_BYTE *)(a1 + 744) = v143;
                }
              }
              if ((v143 & 4) != 0)
              {
                v172 = roundf(v292);
                if (v172 >= 2147500000.0)
                {
                  v173 = 0x7FFFFFFF;
                }
                else if (v172 <= -2147500000.0)
                {
                  v173 = 0x80000000;
                }
                else
                {
                  v173 = (int)v172;
                }
                v174 = roundf(v294);
                if (v174 >= 2147500000.0)
                {
                  v175 = 0x7FFFFFFF;
                }
                else if (v174 <= -2147500000.0)
                {
                  v175 = 0x80000000;
                }
                else
                {
                  v175 = (int)v174;
                }
                v176 = roundf(v296);
                if (v176 >= 2147500000.0)
                {
                  v177 = 0x7FFFFFFF;
                }
                else if (v176 <= -2147500000.0)
                {
                  v177 = 0x80000000;
                }
                else
                {
                  v177 = (int)v176;
                }
                v178 = roundf(v298);
                if (v178 >= 2147500000.0)
                {
                  v179 = 0x7FFFFFFF;
                }
                else if (v178 <= -2147500000.0)
                {
                  v179 = 0x80000000;
                }
                else
                {
                  v179 = (int)v178;
                }
                v163 = (float)v173;
                v164 = (float)v175;
                v167 = (float)v177;
                v168 = (float)v179;
              }
              else
              {
                v148 = hypot(v7, b);
                v149 = hypot(v5, v6);
                v150 = v148 * v292;
                v151 = roundf(v150);
                v152 = v149 * v294;
                v153 = roundf(v152);
                v154 = v148 * (float)(v292 + v296);
                v155 = roundf(v154);
                v156 = v155;
                v157 = v149 * (float)(v294 + v298);
                v158 = roundf(v157);
                v159 = v158;
                if (v298 != 0.0 && v153 == v158)
                  v159 = v159 + 1.0;
                v161 = v296 != 0.0 && v151 == v155;
                v162 = v156 + 1.0;
                if (!v161)
                  v162 = v156;
                v163 = v151 / v148;
                v164 = v153 / v149;
                v165 = v162 / v148;
                v166 = v159 / v149;
                v167 = v165 - v163;
                v168 = v166 - v164;
              }
              v180 = *(unsigned __int16 *)(a1 + 194);
              if ((a5 & 0x1F) == 1)
              {
                if ((~(_WORD)a5 & 0xE00) != 0)
                  v181 = dword_1969F82BC[(a5 >> 8) & 0xF];
                else
LABEL_308:
                  v181 = kCGBlendModeNormal;
              }
              else
              {
                v181 = kCGBlendModeMultiply;
                switch(a5 & 0x1F)
                {
                  case 2uLL:
                    break;
                  case 3uLL:
                    v181 = kCGBlendModeScreen;
                    break;
                  case 4uLL:
                    v181 = kCGBlendModeDarken;
                    break;
                  case 5uLL:
                    v181 = kCGBlendModeLighten;
                    break;
                  case 6uLL:
                    v181 = kCGBlendModeOverlay;
                    break;
                  case 7uLL:
                    v181 = kCGBlendModeColorDodge;
                    break;
                  case 8uLL:
                    v181 = kCGBlendModeColorBurn;
                    break;
                  case 9uLL:
                    v181 = kCGBlendModeHardLight;
                    break;
                  case 0xAuLL:
                    v181 = kCGBlendModeSoftLight;
                    break;
                  case 0xBuLL:
                    v181 = kCGBlendModeDifference;
                    break;
                  case 0xCuLL:
                    v181 = kCGBlendModeExclusion;
                    break;
                  case 0xDuLL:
                    v181 = kCGBlendModeHue;
                    break;
                  case 0xEuLL:
                    v181 = kCGBlendModeSaturation;
                    break;
                  case 0xFuLL:
                    v181 = kCGBlendModeColor;
                    break;
                  case 0x10uLL:
                    v181 = kCGBlendModeLuminosity;
                    break;
                  case 0x11uLL:
                    v181 = kCGBlendModePlusDarker;
                    break;
                  case 0x12uLL:
                    v181 = kCGBlendModePlusLighter;
                    break;
                  default:
                    goto LABEL_308;
                }
              }
              CGContextSetBlendMode(v33, v181);
              CGContextTranslateCTM(v33, v163, v164);
              if (v118 != 1)
              {
                WebCore::ImageOrientation::transformFromDefault((WebCore::ImageOrientation *)&v303, (const WebCore::FloatSize *)((unsigned __int16)a5 >> 12), v167, v168);
                transform = v303;
                CGContextConcatCTM(v33, &transform);
                if (v119 >= 4)
                  v278 = v167;
                else
                  v278 = v168;
                if (v119 < 4)
                  v168 = v167;
                v167 = v278;
              }
              v182 = v168;
              CGContextTranslateCTM(v33, 0.0, v182);
              CGContextScaleCTM(v33, 1.0, -1.0);
              v309.size.width = v167;
              v309.origin.x = 0.0;
              v309.origin.y = 0.0;
              v309.size.height = v182;
              CGContextDrawImage(v33, v309, v141);
              if (v140)
              {
                CGContextSetCTM();
                CGContextSetShouldAntialias(v33, v142);
                if (v180 >> 8 == 1)
                {
                  if (v180 >= 0xEu)
LABEL_488:
                    v183 = kCGBlendModeNormal;
                  else
                    v183 = dword_1969F82BC[(char)v180];
                }
                else
                {
                  v183 = kCGBlendModeMultiply;
                  switch(v180 >> 8)
                  {
                    case 2u:
                      break;
                    case 3u:
                      v183 = kCGBlendModeScreen;
                      break;
                    case 4u:
                      v183 = kCGBlendModeDarken;
                      break;
                    case 5u:
                      v183 = kCGBlendModeLighten;
                      break;
                    case 6u:
                      v183 = kCGBlendModeOverlay;
                      break;
                    case 7u:
                      v183 = kCGBlendModeColorDodge;
                      break;
                    case 8u:
                      v183 = kCGBlendModeColorBurn;
                      break;
                    case 9u:
                      v183 = kCGBlendModeHardLight;
                      break;
                    case 0xAu:
                      v183 = kCGBlendModeSoftLight;
                      break;
                    case 0xBu:
                      v183 = kCGBlendModeDifference;
                      break;
                    case 0xCu:
                      v183 = kCGBlendModeExclusion;
                      break;
                    case 0xDu:
                      v183 = kCGBlendModeHue;
                      break;
                    case 0xEu:
                      v183 = kCGBlendModeSaturation;
                      break;
                    case 0xFu:
                      v183 = kCGBlendModeColor;
                      break;
                    case 0x10u:
                      v183 = kCGBlendModeLuminosity;
                      break;
                    case 0x11u:
                      v183 = kCGBlendModePlusDarker;
                      break;
                    case 0x12u:
                      v183 = kCGBlendModePlusLighter;
                      break;
                    default:
                      goto LABEL_488;
                  }
                }
                CGContextSetBlendMode(v33, v183);
              }
              if (v141)
                CFRelease(v141);
              if (v140)
              {
LABEL_147:
                if (!v15)
                  return;
                goto LABEL_148;
              }
LABEL_493:
              CGContextRestoreGState(v33);
              goto LABEL_147;
            }
          }
        }
LABEL_419:
        v213 = floorf(*(float *)&v7);
        v214 = 2147500000.0;
        if (v213 < 2147500000.0)
        {
          v214 = -2147500000.0;
          if (v213 > -2147500000.0)
            v214 = (float)(int)v213;
        }
        v215 = floorf(*(float *)&b);
        v216 = 2147500000.0;
        if (v215 < 2147500000.0)
        {
          v216 = -2147500000.0;
          if (v215 > -2147500000.0)
            v216 = (float)(int)v215;
        }
        v217 = ceilf(v134);
        v218 = 2147500000.0;
        if (v217 < 2147500000.0)
        {
          v218 = -2147500000.0;
          if (v217 > -2147500000.0)
            v218 = (float)(int)v217;
        }
        v219 = ceilf(v125 + *(float *)&b);
        v220 = 2147500000.0;
        if (v219 < 2147500000.0)
        {
          v220 = -2147500000.0;
          if (v219 > -2147500000.0)
            v220 = (float)(int)v219;
        }
        if (v214 >= 2147500000.0)
        {
          v221 = 0x7FFFFFFF;
        }
        else if (v214 <= -2147500000.0)
        {
          v221 = 0x80000000;
        }
        else
        {
          v221 = (int)v214;
        }
        if (v216 >= 2147500000.0)
        {
          v222 = 0x7FFFFFFF;
        }
        else if (v216 <= -2147500000.0)
        {
          v222 = 0x80000000;
        }
        else
        {
          v222 = (int)v216;
        }
        v223 = v218 - v214;
        v224 = v220 - v216;
        if (v223 >= 2147500000.0)
        {
          v225 = 0x7FFFFFFF;
        }
        else if (v223 <= -2147500000.0)
        {
          v225 = 0x80000000;
        }
        else
        {
          v225 = (int)v223;
        }
        if (v224 >= 2147500000.0)
        {
          v226 = 0x7FFFFFFF;
        }
        else if (v224 <= -2147500000.0)
        {
          v226 = 0x80000000;
        }
        else
        {
          v226 = (int)v224;
        }
        v227 = (float)v221;
        v228 = (float)v222;
        v184 = (float)v225;
        v185 = (float)v226;
        *(float *)&v302.a = (float)v221;
        *((float *)&v302.a + 1) = (float)v222;
        *(float *)&v302.b = (float)v225;
        *((float *)&v302.b + 1) = (float)v226;
        if (v118 != 1)
        {
          v229 = 1.0;
          v230 = 0.0;
          switch((unsigned __int16)a5 >> 12)
          {
            case 2:
              v231 = *(float *)&v6;
              v229 = -1.0;
              v232 = 0.0;
              v233 = 1.0;
              goto LABEL_495;
            case 3:
              v231 = *(float *)&v6;
              v257 = *(float *)&v5;
              v233 = -1.0;
              v232 = 0.0;
              v229 = -1.0;
              break;
            case 4:
              v257 = *(float *)&v5;
              v233 = -1.0;
              v232 = 0.0;
              v231 = 0.0;
              break;
            case 5:
              v233 = 0.0;
              v230 = 1.0;
              v232 = 1.0;
              v231 = 0.0;
              goto LABEL_500;
            case 6:
              v231 = *(float *)&v6;
              v233 = 0.0;
              v232 = -1.0;
              v230 = 1.0;
LABEL_500:
              v257 = 0.0;
              goto LABEL_501;
            case 7:
              v231 = *(float *)&v6;
              v257 = *(float *)&v5;
              v233 = 0.0;
              v230 = -1.0;
              v232 = -1.0;
              goto LABEL_501;
            case 8:
              v257 = *(float *)&v5;
              v233 = 0.0;
              v232 = 1.0;
              v230 = -1.0;
              v231 = 0.0;
LABEL_501:
              v229 = 0.0;
              break;
            default:
              v232 = 0.0;
              v233 = 1.0;
              v231 = 0.0;
LABEL_495:
              v257 = 0.0;
              break;
          }
          v258 = v229 * v233 - v230 * v232;
          v259 = fabs(v258);
          if ((unint64_t)(*(_QWORD *)&v259 - 0x10000000000000) >> 53 <= 0x3FE
            || (unint64_t)(*(_QWORD *)&v259 - 1) <= 0xFFFFFFFFFFFFELL)
          {
            v261 = 1.0;
            if (v233 == 1.0 && v232 == 0.0 && v230 == 0.0 && v229 == 1.0)
            {
              v262 = -v231;
              v263 = -v257;
              v303.b = 0.0;
              v303.c = 0.0;
              v264 = 1.0;
            }
            else
            {
              v261 = v233 / v258;
              v264 = v229 / v258;
              v262 = (v232 * v257 - v233 * v231) / v258;
              v303.b = -v230 / v258;
              v303.c = -v232 / v258;
              v263 = (v230 * v231 - v229 * v257) / v258;
            }
            v303.a = v261;
            v303.d = v264;
            v303.tx = v262;
            v303.ty = v263;
            v304 = 1;
            LODWORD(v302.a) = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v303, (const WebCore::FloatRect *)&v302);
            HIDWORD(v302.a) = v265;
            *(_QWORD *)&v302.b = __PAIR64__(v267, v266);
          }
        }
        if ((CGImageGetCachingFlags() & 1) != 0)
        {
          v314.origin.x = *(float *)&v302.a;
          v314.origin.y = *((float *)&v302.a + 1);
          v314.size.width = *(float *)&v302.b;
          v314.size.height = *((float *)&v302.b + 1);
          v141 = CGImageCreateWithImageInRect(v15, v314);
        }
        else
        {
          v268 = atomic_load(&WebCore::CGSubimageCacheWithTimer::subimageCache(void)::onceKey);
          if (v268 != -1)
          {
            *(_QWORD *)&v303.a = &v305;
            v306 = &v303;
            std::__call_once(&WebCore::CGSubimageCacheWithTimer::subimageCache(void)::onceKey, &v306, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CGSubimageCacheWithTimer::subimageCache(void)::$_0 &&>>);
          }
          WebCore::CGSubimageCacheWithTimer::subimage((WebCore::CGSubimageCacheWithTimer *)WebCore::CGSubimageCacheWithTimer::s_cache, v15, (const WebCore::FloatRect *)&v302, &v300);
          v141 = v300;
        }
        v300 = 0;
        if (!v138)
          CFRelease(v15);
        *(float *)&v7 = *(float *)&v7 - v227;
        *(float *)&b = *(float *)&b - v228;
        goto LABEL_317;
      }
    }
    else
    {
      v137 = v15;
    }
    CFRetain(v137);
    v138 = 0;
    v15 = v137;
    goto LABEL_236;
  }
}

void sub_1943D6234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  const void *v37;

  v37 = *(const void **)(v35 - 224);
  *(_QWORD *)(v35 - 224) = 0;
  if (v37)
    CFRelease(v37);
  std::unique_ptr<WebCore::IOSurface>::~unique_ptr[abi:sn180100](&a35);
  _Unwind_Resume(a1);
}

uint64_t WebCore::PlatformImageNativeImageBackend::platformImage(WebCore::PlatformImageNativeImageBackend *this)
{
  return (uint64_t)this + 8;
}

unint64_t WebCore::PlatformImageNativeImageBackend::size(CGImageRef *this)
{
  unsigned int Width;

  Width = CGImageGetWidth(this[1]);
  return Width | ((unint64_t)CGImageGetHeight(this[1]) << 32);
}

WebCore::Image *WebCore::StyleGradientImage::image@<X0>(WebCore::Image *this@<X0>, const WebCore::RenderElement *a2@<X1>, const WebCore::FloatSize *a3@<X2>, int a4@<W3>, WebCore::GradientImage **a5@<X8>, __n128 a6@<Q0>, __n128 a7@<Q1>)
{
  uint64_t v10;
  WebCore::Image *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x8_t v23;
  int8x8_t v24;
  int32x2_t v25;
  int8x8_t v26;
  int32x2_t v27;
  unsigned int v28;
  uint64_t v29;
  float *v30;
  float v31;
  float v32;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  WebCore::GradientImage *v38;
  int v39;
  float *v40;
  uint64_t v42;
  WebCore::Gradient *v43;
  WebCore::GradientImage *v44;
  void *v45;
  WebCore::Gradient *v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  WebCore::Gradient *v55;
  _QWORD v56[3];
  _QWORD *v57;

  if (!a2)
  {
    this = (WebCore::Image *)WebCore::Image::nullImage(this);
    ++*((_DWORD *)this + 2);
    *a5 = this;
    return this;
  }
  if (*(float *)a3 <= 0.0)
    goto LABEL_30;
  a6.n128_u32[0] = *((_DWORD *)a3 + 1);
  if (a6.n128_f32[0] <= 0.0)
    goto LABEL_30;
  v10 = (uint64_t)this;
  if (a4)
  {
    this = (WebCore::Image *)WebCore::RenderElement::firstLineStyle(a2, a2);
    v11 = this;
  }
  else
  {
    v11 = (const WebCore::RenderElement *)((char *)a2 + 80);
  }
  if (!*(_BYTE *)(v10 + 184) || *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v11 + 3) + 320) + 20))
  {
    v21 = 0;
    goto LABEL_39;
  }
  ++*(_DWORD *)(v10 + 48);
  v12 = *((_QWORD *)a2 + 1);
  if (!v12 || !*(_QWORD *)(v12 + 8) || (v13 = *(_QWORD *)(v10 + 40)) == 0)
  {
LABEL_30:
    *a5 = 0;
    return this;
  }
  v14 = *(_DWORD *)(v13 - 8);
  v15 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
  v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v14 & ((v17 >> 31) ^ v17);
  for (i = 1; ; ++i)
  {
    v20 = *(_QWORD *)(v13 + 16 * v18);
    if (v20 != -1)
    {
      if (!v20)
        goto LABEL_30;
      if (v20 == v12)
        break;
    }
    v18 = (v18 + i) & v14;
  }
  a6.n128_u64[0] = *(_QWORD *)a3;
  v21 = 1;
  if (COERCE_FLOAT(*(_QWORD *)a3) <= 0.0)
    goto LABEL_39;
  a7.n128_u32[0] = HIDWORD(*(_QWORD *)a3);
  if (a6.n128_f32[1] <= 0.0)
    goto LABEL_39;
  v22 = *(_QWORD *)(v10 + 56);
  if (!v22)
    goto LABEL_39;
  v23 = (int8x8_t)vadd_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32((int32x2_t)a6.n128_u64[0], 0xFuLL)), (int32x2_t)a6.n128_u64[0]);
  v24 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v23, 0xAuLL), v23), (int32x2_t)0x900000009);
  v25 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v24, 6uLL), v24);
  v26 = (int8x8_t)vadd_s32(v25, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v25, 0xBuLL)));
  v27 = vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v26, 0x10uLL), v26), (int32x2_t)0x5AC73FE109132F9);
  v28 = *(_DWORD *)(v22 - 8);
  v29 = v28 & ((0xD7862706ELL * (unint64_t)vadd_s32(vdup_lane_s32(v27, 1), v27).u32[0]) >> 4);
  v30 = (float *)(v22 + 16 * v29);
  v32 = *v30;
  v31 = v30[1];
  if (*v30 != a6.n128_f32[0] || v31 != a6.n128_f32[1])
  {
    v39 = 1;
    do
    {
      if (v32 == 0.0 && v31 == 0.0)
        goto LABEL_38;
      v29 = ((_DWORD)v29 + v39) & v28;
      v40 = (float *)(v22 + 16 * v29);
      v32 = *v40;
      v31 = v40[1];
      ++v39;
    }
    while (*v40 != a6.n128_f32[0] || v31 != a6.n128_f32[1]);
  }
  v21 = *(_QWORD *)(v22 + 16 * v29 + 8);
  if (!v21)
    goto LABEL_38;
  v34 = *(_QWORD *)(v21 + 56);
  v35 = v34 & 0xFFFFFFFFFFFFLL;
  if ((v34 & 0xFFFFFFFFFFFFLL) != 0)
    goto LABEL_65;
LABEL_26:
  v36 = *(double *)(v21 + 80);
  *(_QWORD *)(v21 + 48) = 0;
  WTF::MonotonicTime::now(this);
  this = (WebCore::Image *)WebCore::TimerBase::setNextFireTime(v21 + 24, v36 + v37);
  while (1)
  {
    v38 = *(WebCore::GradientImage **)(v21 + 16);
    if (v38)
    {
      ++*((_DWORD *)v38 + 2);
      *a5 = v38;
      return this;
    }
LABEL_38:
    v21 = 1;
LABEL_39:
    v56[0] = v10;
    v56[1] = a3;
    v56[2] = v11;
    v42 = *(unsigned int *)(v10 + 160);
    if ((_DWORD)v42 != -1)
      break;
    this = (WebCore::Image *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_65:
    a6.n128_u64[0] = *(_QWORD *)(v35 + 8);
    if (a6.n128_f64[0] == 0.0)
      goto LABEL_26;
    *(_QWORD *)(v21 + 56) = v34 & 0xFDFFFFFFFFFFFFLL | 0x2000000000000;
  }
  v57 = v56;
  ((void (*)(WebCore::Gradient **__return_ptr, _QWORD **, uint64_t, __n128, __n128))off_1E3442A50[v42])(&v55, &v57, v10 + 72, a6, a7);
  v43 = v55;
  v44 = (WebCore::GradientImage *)WTF::fastMalloc((WTF *)0x70);
  this = WebCore::GradientImage::GradientImage(v44, v43, a3);
  if ((_DWORD)v21)
    this = (WebCore::Image *)WebCore::StyleGeneratedImage::saveCachedImageForSize(v10, (uint64_t)v44, *(float *)a3, *((float *)a3 + 1));
  *a5 = v44;
  v46 = v55;
  v55 = 0;
  if (v46)
  {
    v47 = *((_QWORD *)v46 + 1);
    if (__ldaxr((unsigned __int8 *)v47))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v47))
    {
LABEL_46:
      v49 = *(_QWORD *)(v47 + 8);
      v50 = v49 - 1;
      *(_QWORD *)(v47 + 8) = v49 - 1;
      if (v49 == 1)
      {
        v54 = *(_QWORD *)(v47 + 16);
        v51 = *(_QWORD *)(v47 + 24);
        *(_QWORD *)(v47 + 24) = 0;
        v52 = v54 != 0;
      }
      else
      {
        v51 = 0;
        v52 = 1;
      }
      v53 = __ldxr((unsigned __int8 *)v47);
      if (v53 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v47))
        {
LABEL_53:
          if (!v50)
          {
            if (v51)
              this = (WebCore::Image *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
            if (!v52)
              return (WebCore::Image *)WTF::fastFree((WTF *)v47, v45);
          }
          return this;
        }
      }
      else
      {
        __clrex();
      }
      this = (WebCore::Image *)WTF::Lock::unlockSlow((WTF::Lock *)v47);
      goto LABEL_53;
    }
    this = (WebCore::Image *)MEMORY[0x19AEA534C](v47);
    goto LABEL_46;
  }
  return this;
}

uint64_t WebCore::DisplayList::Recorder::drawNativeImageInternal(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned __int8 v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  void *v73;
  _BOOL4 v74;
  _BOOL4 v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  void *v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  _BOOL4 v93;
  unint64_t v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  __int128 v101;
  __int128 v102;

  v12 = *(unsigned int *)(a1 + 732);
  if (!(_DWORD)v12)
  {
    __break(0xC471u);
    goto LABEL_138;
  }
  v8 = a5;
  v5 = a4;
  v6 = a3;
  v9 = a2;
  v7 = a1;
  v13 = *(_QWORD *)(a1 + 720);
  v10 = v13 + 760 * v12 - 760;
  v14 = (unsigned int *)(v13 + 760 * v12 - 584);
  v12 = *v14;
  if (!(_DWORD)v12)
    goto LABEL_65;
  if ((v12 & 0xFFFFFFF2) == 0 && ((v12 & 4) == 0 || !*(_DWORD *)(v10 + 168) && (*(_BYTE *)(v10 + 94) & 8) == 0))
  {
    if ((v12 & 1) == 0)
      goto LABEL_8;
    if (!*(_DWORD *)(v10 + 80) && (*(_BYTE *)(v10 + 6) & 8) == 0)
    {
      v12 = *(_QWORD *)(a1 + 8);
      if ((v12 & 0x8000000000000) != 0)
        goto LABEL_138;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 784))(a1, *(_QWORD *)(a1 + 8));
      v12 = *v14;
LABEL_8:
      if ((v12 & 0xC) == 0)
        goto LABEL_15;
      if ((v12 & 4) != 0)
      {
        v15 = *(_QWORD *)(v7 + 96);
        if ((v12 & 8) == 0)
        {
          if ((v15 & 0x8000000000000) != 0)
            goto LABEL_138;
          v16 = 0;
          v20 = 0;
          v17 = 0x100000000;
          v18 = *(_QWORD *)(v7 + 96);
          v19 = v15 & 0xFFFFFF00;
          goto LABEL_14;
        }
        if ((v15 & 0x8000000000000) != 0)
          goto LABEL_138;
        v16 = *(_DWORD *)(v7 + 188);
        v17 = 0x100000000;
        v18 = *(_QWORD *)(v7 + 96);
        v19 = v15 & 0xFFFFFF00;
      }
      else
      {
        v18 = 0;
        v17 = 0;
        v19 = 0;
        v16 = *(_DWORD *)(v7 + 188);
      }
      v20 = 0x100000000;
LABEL_14:
      *(_QWORD *)&v102 = v18 | (unint64_t)v17 | v19 & 0xFFFFFF00;
      *((_QWORD *)&v102 + 1) = v20 | v16;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v7 + 792))(v7, &v102);
      goto LABEL_15;
    }
  }
  if ((v12 & 1) != 0)
  {
    v59 = *(_DWORD *)(a1 + 88);
    if (v59 == 1)
    {
      if (!*(_DWORD *)(a1 + 32))
      {
        v61 = *(_QWORD *)(a1 + 24);
        if (v61)
        {
          if (*(_BYTE *)(v61 + 40))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 1360))(a1, v61);
        }
      }
    }
    else if (v59 == 2)
    {
      v60 = *(_QWORD *)(a1 + 24);
      if (v60)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 1336))(a1, v60 + 8);
    }
  }
  if ((*(_BYTE *)v14 & 4) != 0)
  {
    v62 = *(_DWORD *)(v7 + 176);
    if (v62 == 1)
    {
      if (!*(_DWORD *)(v7 + 120))
      {
        v64 = *(_QWORD *)(v7 + 112);
        if (v64)
        {
          if (*(_BYTE *)(v64 + 40))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 1360))(v7, v64);
        }
      }
    }
    else if (v62 == 2)
    {
      v63 = *(_QWORD *)(v7 + 112);
      if (v63)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 1336))(v7, v63 + 8);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 800))(v7, v10);
LABEL_15:
  *v14 = 0;
  v21 = *(_DWORD *)(v7 + 732);
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x1943D6E90);
  }
  v22 = *(_QWORD *)(v7 + 720) + 760 * v21;
  v11 = v22 - 352;
  v23 = (void *)(v22 - 336);
  if (!*(_BYTE *)(v22 - 8))
  {
    v39 = *(_QWORD *)v10;
    *(_QWORD *)v11 = *(_QWORD *)v10;
    if ((v39 & 0x8000000000000) != 0)
    {
      v65 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFLL);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 + 1, v65));
    }
    *(_BYTE *)(v11 + 16) = 0;
    *(_DWORD *)(v11 + 80) = -1;
    v40 = *(unsigned int *)(v10 + 80);
    if ((_DWORD)v40 != -1)
    {
      ((void (*)(__int128 *, void *, uint64_t))off_1E3413D38[v40])(&v102, v23, v10 + 16);
      *(_DWORD *)(v11 + 80) = v40;
    }
    v41 = *(_QWORD *)(v10 + 88);
    *(_QWORD *)(v11 + 88) = v41;
    if ((v41 & 0x8000000000000) != 0)
    {
      v67 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFLL);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 + 1, v67));
    }
    *(_BYTE *)(v11 + 104) = 0;
    *(_DWORD *)(v11 + 168) = -1;
    v42 = *(unsigned int *)(v10 + 168);
    if ((_DWORD)v42 != -1)
    {
      ((void (*)(__int128 *))off_1E3413D38[v42])(&v102);
      *(_DWORD *)(v11 + 168) = v42;
    }
    v43 = *(_QWORD *)v14;
    v44 = v14[2];
    *(_BYTE *)(v11 + 192) = 0;
    *(_DWORD *)(v11 + 184) = v44;
    *(_QWORD *)(v11 + 176) = v43;
    *(_BYTE *)(v11 + 224) = 0;
    if (*(_BYTE *)(v10 + 224))
    {
      v45 = *(_QWORD *)(v10 + 192);
      *(_DWORD *)(v11 + 200) = *(_DWORD *)(v10 + 200);
      *(_QWORD *)(v11 + 192) = v45;
      v46 = *(_QWORD *)(v10 + 208);
      *(_QWORD *)(v11 + 208) = v46;
      if ((v46 & 0x8000000000000) != 0)
      {
        v69 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFLL);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 + 1, v69));
      }
      *(_QWORD *)(v11 + 216) = *(_QWORD *)(v10 + 216);
      *(_BYTE *)(v11 + 224) = 1;
    }
    *(_BYTE *)(v11 + 232) = 0;
    *(_BYTE *)(v11 + 320) = 0;
    if (*(_BYTE *)(v10 + 320))
    {
      *(_DWORD *)(v11 + 312) = -1;
      v47 = *(unsigned int *)(v10 + 312);
      if ((_DWORD)v47 != -1)
      {
        ((void (*)(__int128 *))off_1E3413D50[v47])(&v102);
        *(_DWORD *)(v11 + 312) = v47;
      }
      *(_BYTE *)(v11 + 320) = 1;
    }
    v48 = *(_QWORD *)(v10 + 328);
    *(_QWORD *)(v11 + 333) = *(_QWORD *)(v10 + 333);
    *(_QWORD *)(v11 + 328) = v48;
    *(_BYTE *)(v11 + 344) = 1;
    goto LABEL_65;
  }
  v24 = *(_QWORD *)v11;
  v25 = *(_QWORD *)v10;
  if ((*(_QWORD *)v11 & 0x8000000000000) != 0)
  {
    if ((v25 & 0x8000000000000) != 0)
    {
      v73 = v23;
      v102 = *(_OWORD *)((v24 & 0xFFFFFFFFFFFFLL) + 4);
      v101 = *(_OWORD *)((v25 & 0xFFFFFFFFFFFFLL) + 4);
      v74 = WebCore::operator==<float,4ul>((float *)&v102, (float *)&v101);
      v24 = *(_QWORD *)v11;
      if (v74 && HIBYTE(v24) == HIBYTE(*(_QWORD *)v10))
      {
        v23 = v73;
        if (BYTE6(v24) == BYTE6(*(_QWORD *)v10))
          goto LABEL_23;
      }
      else
      {
        v23 = v73;
      }
    }
  }
  else if (v24 == v25 && (v25 & 0x8000000000000) == 0)
  {
    goto LABEL_23;
  }
  if ((v24 & 0x8000000000000) != 0)
  {
    v89 = v23;
    v90 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
    do
    {
      v91 = __ldaxr(v90);
      v92 = v91 - 1;
    }
    while (__stlxr(v92, v90));
    if (!v92)
    {
      atomic_store(1u, v90);
      WTF::fastFree((WTF *)v90, v23);
      v23 = v89;
    }
  }
  v86 = *(_QWORD *)v10;
  *(_QWORD *)v11 = *(_QWORD *)v10;
  if ((v86 & 0x8000000000000) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFLL);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 + 1, v87));
  }
LABEL_23:
  v27 = *(unsigned int *)(v11 + 80);
  v28 = *(unsigned int *)(v10 + 80);
  if ((_DWORD)v27 == -1)
  {
    if ((_DWORD)v28 != -1)
      goto LABEL_25;
  }
  else
  {
    if ((_DWORD)v28 != -1)
    {
LABEL_25:
      *(_QWORD *)&v102 = v23;
      ((void (*)(__int128 *))off_1E3413D80[v28])(&v102);
      goto LABEL_26;
    }
    ((void (*)(__int128 *, void *))off_1E3413D08[v27])(&v102, v23);
    *(_DWORD *)(v11 + 80) = -1;
  }
LABEL_26:
  v29 = *(_QWORD *)(v11 + 88);
  v30 = *(_QWORD *)(v10 + 88);
  if ((v29 & 0x8000000000000) != 0)
  {
    if ((v30 & 0x8000000000000) != 0)
    {
      v102 = *(_OWORD *)((v29 & 0xFFFFFFFFFFFFLL) + 4);
      v101 = *(_OWORD *)((v30 & 0xFFFFFFFFFFFFLL) + 4);
      v75 = WebCore::operator==<float,4ul>((float *)&v102, (float *)&v101);
      v29 = *(_QWORD *)(v11 + 88);
      if (v75)
      {
        v76 = *(_QWORD *)(v10 + 88);
        if (HIBYTE(v29) == HIBYTE(v76) && BYTE6(v29) == BYTE6(v76))
          goto LABEL_29;
      }
    }
  }
  else if (v29 == v30 && (v30 & 0x8000000000000) == 0)
  {
    goto LABEL_29;
  }
  if ((v29 & 0x8000000000000) != 0)
  {
    v80 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFLL);
    do
    {
      v81 = __ldaxr(v80);
      v82 = v81 - 1;
    }
    while (__stlxr(v82, v80));
    if (!v82)
    {
      atomic_store(1u, v80);
      WTF::fastFree((WTF *)v80, v23);
    }
  }
  v77 = *(_QWORD *)(v10 + 88);
  *(_QWORD *)(v11 + 88) = v77;
  if ((v77 & 0x8000000000000) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFLL);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 + 1, v78));
  }
LABEL_29:
  a2 = (_BYTE *)(v11 + 104);
  v31 = *(unsigned int *)(v11 + 168);
  v32 = *(unsigned int *)(v10 + 168);
  if ((_DWORD)v31 == -1)
  {
    if ((_DWORD)v32 == -1)
      goto LABEL_32;
  }
  else if ((_DWORD)v32 == -1)
  {
    ((void (*)(__int128 *, _BYTE *))off_1E3413D08[v31])(&v102, a2);
    *(_DWORD *)(v11 + 168) = -1;
    goto LABEL_32;
  }
  *(_QWORD *)&v102 = v11 + 104;
  ((void (*)(__int128 *))off_1E3413D80[v32])(&v102);
LABEL_32:
  v33 = *(_QWORD *)v14;
  *(_DWORD *)(v11 + 184) = v14[2];
  *(_QWORD *)(v11 + 176) = v33;
  v34 = (_QWORD *)(v11 + 192);
  v35 = (uint64_t *)(v10 + 192);
  if (*(unsigned __int8 *)(v11 + 224) == *(unsigned __int8 *)(v10 + 224))
  {
    if (!*(_BYTE *)(v11 + 224))
      goto LABEL_55;
    v36 = *v35;
    *(_DWORD *)(v11 + 200) = *(_DWORD *)(v10 + 200);
    *v34 = v36;
    v37 = *(_QWORD *)(v11 + 208);
    v38 = *(_QWORD *)(v10 + 208);
    if ((v37 & 0x8000000000000) != 0)
    {
      if ((v38 & 0x8000000000000) != 0)
      {
        v102 = *(_OWORD *)((v37 & 0xFFFFFFFFFFFFLL) + 4);
        v101 = *(_OWORD *)((v38 & 0xFFFFFFFFFFFFLL) + 4);
        v93 = WebCore::operator==<float,4ul>((float *)&v102, (float *)&v101);
        v37 = *(_QWORD *)(v11 + 208);
        if (v93)
        {
          v94 = *(_QWORD *)(v10 + 208);
          if (HIBYTE(v37) == HIBYTE(v94) && BYTE6(v37) == BYTE6(v94))
            goto LABEL_37;
        }
      }
    }
    else if (v37 == v38 && (v38 & 0x8000000000000) == 0)
    {
LABEL_37:
      *(_QWORD *)(v11 + 216) = *(_QWORD *)(v10 + 216);
      goto LABEL_55;
    }
    if ((v37 & 0x8000000000000) != 0)
    {
      v98 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFLL);
      do
      {
        v99 = __ldaxr(v98);
        v100 = v99 - 1;
      }
      while (__stlxr(v100, v98));
      if (!v100)
      {
        atomic_store(1u, v98);
        WTF::fastFree((WTF *)v98, a2);
      }
    }
    v95 = *(_QWORD *)(v10 + 208);
    *(_QWORD *)(v11 + 208) = v95;
    if ((v95 & 0x8000000000000) != 0)
    {
      v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFLL);
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 + 1, v96));
    }
    goto LABEL_37;
  }
  if (*(_BYTE *)(v11 + 224))
  {
    v12 = *(_QWORD *)(v11 + 208);
    if ((v12 & 0x8000000000000) != 0)
      goto LABEL_139;
    goto LABEL_54;
  }
  v56 = *v35;
  *(_DWORD *)(v11 + 200) = *(_DWORD *)(v10 + 200);
  *v34 = v56;
  v57 = *(_QWORD *)(v10 + 208);
  *(_QWORD *)(v11 + 208) = v57;
  if ((v57 & 0x8000000000000) != 0)
  {
    v71 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFLL);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 + 1, v71));
  }
  *(_QWORD *)(v11 + 216) = *(_QWORD *)(v10 + 216);
  for (*(_BYTE *)(v11 + 224) = 1; ; *(_BYTE *)(v11 + 224) = 0)
  {
LABEL_55:
    v49 = v11 + 232;
    v50 = v10 + 232;
    if (*(unsigned __int8 *)(v11 + 320) != *(unsigned __int8 *)(v10 + 320))
    {
      if (*(_BYTE *)(v11 + 320))
      {
        v53 = *(unsigned int *)(v11 + 312);
        if ((_DWORD)v53 != -1)
          ((void (*)(__int128 *, uint64_t, uint64_t))off_1E3413CF0[v53])(&v102, v49, v50);
        *(_DWORD *)(v11 + 312) = -1;
        *(_BYTE *)(v11 + 320) = 0;
      }
      else
      {
        *(_BYTE *)(v11 + 232) = 0;
        *(_DWORD *)(v11 + 312) = -1;
        v58 = *(unsigned int *)(v10 + 312);
        if ((_DWORD)v58 != -1)
        {
          ((void (*)(__int128 *, uint64_t, uint64_t))off_1E3413D50[v58])(&v102, v49, v50);
          *(_DWORD *)(v11 + 312) = v58;
        }
        *(_BYTE *)(v11 + 320) = 1;
      }
      goto LABEL_64;
    }
    if (*(_BYTE *)(v11 + 320))
    {
      v51 = *(unsigned int *)(v11 + 312);
      v52 = *(unsigned int *)(v10 + 312);
      if ((_DWORD)v51 == -1)
      {
        if ((_DWORD)v52 == -1)
          goto LABEL_64;
      }
      else if ((_DWORD)v52 == -1)
      {
        ((void (*)(__int128 *, uint64_t, uint64_t))off_1E3413CF0[v51])(&v102, v49, v50);
        *(_DWORD *)(v11 + 312) = -1;
        goto LABEL_64;
      }
      *(_QWORD *)&v102 = v11 + 232;
      ((void (*)(__int128 *))*(&off_1E3413D98 + v52))(&v102);
    }
LABEL_64:
    v54 = *(_QWORD *)(v10 + 328);
    *(_QWORD *)(v11 + 333) = *(_QWORD *)(v10 + 333);
    *(_QWORD *)(v11 + 328) = v54;
LABEL_65:
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 1320))(v7, v9);
    v12 = v9[40];
    if (v9[40])
      break;
LABEL_138:
    __break(1u);
LABEL_139:
    v83 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v84 = __ldaxr(v83);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v83));
    if (!v85)
    {
      atomic_store(1u, v83);
      WTF::fastFree((WTF *)v83, a2);
    }
LABEL_54:
    ;
  }
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 944))(v7, *((_QWORD *)v9 + 4), v6, v5, *(_QWORD *)&v8 & 0xFFFFFFLL);
}

uint64_t WebCore::CachedImage::CachedImageObserver::didDraw(uint64_t this, const WebCore::Image *a2)
{
  const WebCore::Image *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t isMainThread;
  void *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int i;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  BOOL v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  WTF *v39;
  WTF *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  uint64_t v57;
  WTF **v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v66;
  unsigned int *v67;
  int v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  const WebCore::Image *v73;
  WTF *v74;
  char v75[24];
  WTF **v76;

  v2 = a2;
  v3 = this;
  v4 = *(_QWORD *)(this + 24);
  if (!v4)
  {
    v5 = 0;
    v6 = 0;
LABEL_3:
    v7 = v5;
    v5 = v4 + 8 * v6;
    goto LABEL_4;
  }
  v6 = *(unsigned int *)(v4 - 4);
  v5 = v4 + 8 * v6;
  if (!*(_DWORD *)(v4 - 12))
    goto LABEL_3;
  if (!(_DWORD)v6)
  {
    v51 = 0;
    v7 = *(_QWORD *)(this + 24);
    goto LABEL_95;
  }
  v50 = 8 * v6;
  v7 = *(_QWORD *)(this + 24);
  while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
  {
    v7 += 8;
    v50 -= 8;
    if (!v50)
    {
      v7 = v5;
      break;
    }
  }
LABEL_4:
  if (!v4)
  {
    v8 = 0;
    goto LABEL_6;
  }
  v51 = *(unsigned int *)(v4 - 4);
LABEL_95:
  v8 = v4 + 8 * v51;
LABEL_6:
  if (v8 != v7)
  {
    while (!*(_QWORD *)(*(_QWORD *)v7 + 8))
    {
      v72 = v7 + 8;
      v7 = v5;
      if (v72 != v5)
      {
        v7 = v72;
        while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
        {
          v7 += 8;
          if (v7 == v5)
          {
            v7 = v5;
            break;
          }
        }
      }
      if (v7 == v8)
      {
        v7 = v8;
        break;
      }
    }
  }
  if (v4)
    v9 = v4 + 8 * *(unsigned int *)(v4 - 4);
  else
    v9 = 0;
  for (; v7 != v9; ++*(_DWORD *)(v3 + 32))
  {
    v10 = *(_QWORD *)(*(_QWORD *)v7 + 8);
    this = *(_QWORD *)(v10 + 8);
    if (this)
      goto LABEL_162;
    this = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)this = 1;
    *(_QWORD *)(this + 8) = v10;
    v66 = *(unsigned int **)(v10 + 8);
    *(_QWORD *)(v10 + 8) = this;
    if (!v66)
      goto LABEL_162;
    do
    {
      v46 = __ldaxr(v66);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v66));
    if (!v47)
    {
      atomic_store(1u, v66);
      WTF::fastFree((WTF *)v66, a2);
    }
    this = *(_QWORD *)(v10 + 8);
    if (this)
    {
LABEL_162:
      do
        v11 = __ldaxr((unsigned int *)this);
      while (__stlxr(v11 + 1, (unsigned int *)this));
      v74 = (WTF *)this;
      v12 = *(_QWORD *)(this + 8);
    }
    else
    {
      v12 = 0;
      v74 = 0;
    }
    v76 = &v74;
    ++*(_DWORD *)(v12 + 548);
    v13 = *(_QWORD *)(v12 + 488);
    if (v13 && *(_QWORD *)(v13 + 8))
    {
      WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v12 + 464), (uint64_t *)&v76, (uint64_t)v75);
      this = (uint64_t)v74;
    }
    if (this)
      v14 = *(_QWORD *)(this + 8);
    else
      v14 = 0;
    if (*(const WebCore::Image **)(v14 + 688) == v2)
    {
      v15 = WebCore::LocalFrameView::sCurrentPaintTimeStamp;
      if (*(double *)&WebCore::LocalFrameView::sCurrentPaintTimeStamp == 0.0)
        this = WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
      *(_QWORD *)(v14 + 408) = v15;
      if ((*(_BYTE *)(v14 + 131) & 4) == 0 && (*(_WORD *)(v14 + 557) & 0x200) != 0)
      {
        isMainThread = WTF::isMainThread((WTF *)this);
        if ((isMainThread & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1943D75A0);
        }
        {
          isMainThread = (uint64_t)WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
        }
        if ((WTF::isMainThread((WTF *)isMainThread) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1943D75C0);
        }
        if (++dword_1ECE909F0 > dword_1ECE909F4)
        {
          v73 = v2;
          v40 = (WTF *)qword_1ECE909E0;
          if (qword_1ECE909E0)
          {
            do
            {
              v39 = (WTF *)*((_QWORD *)v40 + 2);
              if (!*(_QWORD *)(*(_QWORD *)v40 + 8))
                WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(&qword_1ECE909D8, &qword_1ECE909D8, v40);
              v40 = v39;
            }
            while (v39);
          }
          dword_1ECE909F0 = 0;
          v52 = qword_1ECE909D8;
          if (qword_1ECE909D8)
          {
            v52 = *(_DWORD *)(qword_1ECE909D8 - 12);
            if (v52 > 0x7FFFFFFE)
              v52 = 0x7FFFFFFF;
          }
          v2 = v73;
          dword_1ECE909F4 = 2 * v52;
        }
        v18 = *(_QWORD *)(v14 + 8);
        if (!v18)
        {
          v18 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v18 = 1;
          *(_QWORD *)(v18 + 8) = v14;
          v67 = *(unsigned int **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = v18;
          if (v67)
          {
            do
            {
              v48 = __ldaxr(v67);
              v49 = v48 - 1;
            }
            while (__stlxr(v49, v67));
            if (!v49)
            {
              atomic_store(1u, v67);
              WTF::fastFree((WTF *)v67, v17);
            }
            v18 = *(_QWORD *)(v14 + 8);
          }
        }
        do
          v19 = __ldaxr((unsigned int *)v18);
        while (__stlxr(v19 + 1, (unsigned int *)v18));
        do
          v20 = __ldaxr((unsigned int *)v18);
        while (__stlxr(v20 + 1, (unsigned int *)v18));
        if (qword_1ECE909D8)
        {
          v21 = *(_DWORD *)(qword_1ECE909D8 - 8);
          v22 = (~(v18 << 32) + v18) ^ ((unint64_t)(~(v18 << 32) + v18) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          for (i = 1; ; ++i)
          {
            v27 = *(_QWORD **)(qword_1ECE909D8 + 8 * v25);
            if (v27 != (_QWORD *)-1)
            {
              if (!v27)
                goto LABEL_47;
              if (*v27 == v18)
                break;
            }
            v25 = (v25 + i) & v21;
          }
          if (v25 != *(_DWORD *)(qword_1ECE909D8 - 4))
          {
            v28 = v27[1];
            v29 = v27[2];
            if (v28)
            {
              *(_QWORD *)(v28 + 16) = v29;
              v29 = v27[2];
            }
            else
            {
              qword_1ECE909E0 = v27[2];
            }
            if (v29)
              v30 = (uint64_t *)(v29 + 8);
            else
              v30 = &qword_1ECE909E8;
            *v30 = v28;
            v31 = qword_1ECE909E8;
            v27[1] = qword_1ECE909E8;
            v27[2] = 0;
            if (v31)
              v32 = (uint64_t *)(v31 + 16);
            else
              v32 = &qword_1ECE909E0;
            *v32 = (uint64_t)v27;
            qword_1ECE909E8 = (uint64_t)v27;
          }
        }
LABEL_47:
        if (v18)
        {
          do
          {
            v35 = __ldaxr((unsigned int *)v18);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, (unsigned int *)v18));
          if (!v36)
          {
            atomic_store(1u, (unsigned int *)v18);
            v69 = v18;
            WTF::fastFree((WTF *)v18, v17);
            v18 = v69;
          }
          do
          {
            v37 = __ldaxr((unsigned int *)v18);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, (unsigned int *)v18));
          if (!v38)
          {
            atomic_store(1u, (unsigned int *)v18);
            v18 = WTF::fastFree((WTF *)v18, v17);
          }
        }
        this = WTF::isMainThread((WTF *)v18);
        if ((this & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1943D75E0);
        }
        v33 = dword_1ECE908C4 + dword_1ECE908C0 > dword_1ECE908AC
           || dword_1ECE908C4 > dword_1ECE908B4;
        if (v33
          && ((qword_1ECE90A20 & 0xFFFFFFFFFFFFLL) == 0 || *(double *)((qword_1ECE90A20 & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
        {
          qword_1ECE90A18 = 0;
          WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
          this = WebCore::TimerBase::setNextFireTime((uint64_t)&unk_1ECE90A00, v70 + 0.0);
        }
      }
    }
    if (v74)
    {
      v41 = *((_QWORD *)v74 + 1);
      if (v41)
      {
        v42 = *(_DWORD *)(v41 + 548) - 1;
        *(_DWORD *)(v41 + 548) = v42;
        v43 = *(_QWORD *)(v41 + 488);
        if (v43)
        {
          if (*(_QWORD *)(v43 + 8))
          {
            v53 = *(_QWORD *)(v41 + 464);
            if (v53)
            {
              v54 = ((unint64_t)&v75[~((_QWORD)&v74 << 32) - 8] ^ ((unint64_t)&v75[~((_QWORD)&v74 << 32)
                                                                                               - 8] >> 22))
                  + ~(((unint64_t)&v75[~((_QWORD)&v74 << 32) - 8] ^ ((unint64_t)&v75[~((_QWORD)&v74 << 32)
                                                                                                 - 8] >> 22)) << 13);
              v55 = (9 * (v54 ^ (v54 >> 8))) ^ ((9 * (v54 ^ (v54 >> 8))) >> 15);
              v56 = *(_DWORD *)(v53 - 8);
              v57 = v56 & (((v55 + ~(v55 << 27)) >> 31) ^ ((_DWORD)v55 + ~((_DWORD)v55 << 27)));
              v58 = *(WTF ***)(v53 + 8 * v57);
              if (v58 != &v74)
              {
                v68 = 1;
                while (v58)
                {
                  v57 = ((_DWORD)v57 + v68) & v56;
                  v58 = *(WTF ***)(v53 + 8 * v57);
                  ++v68;
                  if (v58 == &v74)
                    goto LABEL_104;
                }
                v57 = *(unsigned int *)(v53 - 4);
              }
LABEL_104:
              if (v57 != *(_DWORD *)(v53 - 4))
              {
                *(_QWORD *)(v53 + 8 * v57) = -1;
                v59 = (uint64_t *)(v41 + 464);
                ++*(_DWORD *)(*(_QWORD *)(v41 + 464) - 16);
                v60 = *(_QWORD *)(v41 + 464);
                v61 = v60 ? *(_DWORD *)(v60 - 12) - 1 : -1;
                *(_DWORD *)(v60 - 12) = v61;
                v62 = *v59;
                if (*v59)
                {
                  v63 = 6 * *(_DWORD *)(v62 - 12);
                  v64 = *(_DWORD *)(v62 - 4);
                  if (v63 < v64 && v64 >= 9)
                    WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::rehash(v59, v64 >> 1, 0);
                }
              }
            }
          }
          v42 = *(_DWORD *)(v41 + 548);
        }
        if (!v42)
          WebCore::CachedResource::deleteIfPossible((WebCore::CachedResource *)v41, a2);
      }
      this = (uint64_t)v74;
      v74 = 0;
      if (this)
      {
        do
        {
          v44 = __ldaxr((unsigned int *)this);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, (unsigned int *)this));
        if (!v45)
        {
          atomic_store(1u, (unsigned int *)this);
          this = WTF::fastFree((WTF *)this, a2);
        }
      }
    }
    v34 = v5;
    if (v7 + 8 != v5)
    {
      v34 = v7 + 8;
      while ((unint64_t)(*(_QWORD *)v34 + 1) <= 1)
      {
        v34 += 8;
        if (v34 == v5)
        {
          v34 = v5;
          break;
        }
      }
    }
    v7 = v8;
    if (v34 != v8)
    {
      v7 = v34;
      if (!*(_QWORD *)(*(_QWORD *)v34 + 8))
      {
        while (1)
        {
          v71 = v7 + 8;
          v7 = v5;
          if (v71 != v5)
          {
            v7 = v71;
            while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
            {
              v7 += 8;
              if (v7 == v5)
              {
                v7 = v5;
                break;
              }
            }
          }
          if (v7 == v8)
            break;
          if (*(_QWORD *)(*(_QWORD *)v7 + 8))
            goto LABEL_61;
        }
        v7 = v8;
      }
    }
LABEL_61:
    ;
  }
  return this;
}

unsigned int *WebCore::StyleGeneratedImage::saveCachedImageForSize(uint64_t a1, uint64_t a2, float a3, float a4)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t StatusReg;
  unsigned int *result;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  float v15;
  float v16;
  int v17;
  int8x8_t v18;
  int8x8_t v19;
  int32x2_t v20;
  int8x8_t v21;
  int32x2_t v22;
  unsigned int v23;
  float *v24;
  float v25;
  float v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  float *v37;
  int v38;
  uint64_t v41;
  void *v42;
  _DWORD *v43;

  v6 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v6 = a1;
  *(float *)(v6 + 8) = a3;
  *(float *)(v6 + 12) = a4;
  ++*(_DWORD *)(a2 + 8);
  *(_QWORD *)(v6 + 16) = a2;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E3442390;
  v7[1] = WebCore::StyleGeneratedImage::CachedGeneratedImage::evictionTimerFired;
  v7[2] = 0;
  v7[3] = v6;
  *(_QWORD *)(v6 + 24) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  result = *(unsigned int **)(StatusReg + 736);
  if (!result)
    result = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  v10 = (uint64_t *)(a1 + 56);
  do
    v11 = __ldaxr(result);
  while (__stlxr(v11 + 1, result));
  *(_QWORD *)(v6 + 24) = off_1E33DC988;
  *(_QWORD *)(v6 + 64) = result;
  *(_QWORD *)(v6 + 72) = v7;
  *(_QWORD *)(v6 + 80) = 0x4008000000000000;
  v12 = *(_QWORD *)(v6 + 56);
  if ((v12 & 0xFFFFFFFFFFFFLL) == 0 || *(double *)((v12 & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    *(_QWORD *)(v6 + 48) = 0;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
    result = (unsigned int *)WebCore::TimerBase::setNextFireTime(v6 + 24, v13 + 3.0);
  }
  else
  {
    *(_QWORD *)(v6 + 56) = v12 & 0xFDFFFFFFFFFFFFLL | 0x2000000000000;
  }
  v14 = *v10;
  v16 = a3;
  v15 = a4;
  if (*v10
    || (result = (unsigned int *)WTF::HashTable<WebCore::FloatSize,WTF::KeyValuePair<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashMap<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashTraits<WebCore::FloatSize>,WTF::HashTraits<std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::FloatSize>>::expand(v10),
        v16 = a3,
        v15 = a4,
        (v14 = *v10) != 0))
  {
    v17 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    v17 = 0;
  }
  v18 = (int8x8_t)vadd_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32((int32x2_t)__PAIR64__(LODWORD(v16), LODWORD(v15)), 0xFuLL)), (int32x2_t)__PAIR64__(LODWORD(v16), LODWORD(v15)));
  v19 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v18, 0xAuLL), v18), (int32x2_t)0x900000009);
  v20 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v19, 6uLL), v19);
  v21 = (int8x8_t)vadd_s32(v20, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v20, 0xBuLL)));
  v22 = vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v21, 0x10uLL), v21), (int32x2_t)0x109132F905AC73FELL);
  v23 = v17 & ((0xD7862706ELL * (unint64_t)vadd_s32(v22, vdup_lane_s32(v22, 1)).u32[0]) >> 4);
  v24 = (float *)(v14 + 16 * v23);
  v25 = *v24;
  v26 = v24[1];
  if (*v24 == 0.0 && v26 == 0.0)
  {
LABEL_11:
    *v24 = v16;
    v24[1] = v15;
    v27 = (_QWORD *)*((_QWORD *)v24 + 1);
    *((_QWORD *)v24 + 1) = v6;
    if (v27)
    {
      v27[3] = off_1E33DC988;
      v28 = v27[9];
      v27[9] = 0;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v27 + 3));
      v30 = (_DWORD *)v27[2];
      v27[2] = 0;
      if (v30)
      {
        if (v30[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
        else
          --v30[2];
      }
      result = (unsigned int *)WTF::fastFree((WTF *)v27, v29);
    }
    v31 = *v10;
    if (*v10)
      v32 = *(_DWORD *)(v31 - 12) + 1;
    else
      v32 = 1;
    *(_DWORD *)(v31 - 12) = v32;
    v33 = *v10;
    if (*v10)
      v34 = *(_DWORD *)(v33 - 12);
    else
      v34 = 0;
    v35 = (*(_DWORD *)(v33 - 16) + v34);
    v36 = *(unsigned int *)(v33 - 4);
    if (v36 <= 0x400)
    {
      if (3 * v36 > 4 * v35)
        return result;
      return (unsigned int *)WTF::HashTable<WebCore::FloatSize,WTF::KeyValuePair<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashMap<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashTraits<WebCore::FloatSize>,WTF::HashTraits<std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::FloatSize>>::expand(v10);
    }
    if (v36 <= 2 * v35)
      return (unsigned int *)WTF::HashTable<WebCore::FloatSize,WTF::KeyValuePair<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashMap<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashTraits<WebCore::FloatSize>,WTF::HashTraits<std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::FloatSize>>::expand(v10);
  }
  else
  {
    v37 = 0;
    v38 = 1;
    while (v25 != v16 || v26 != v15)
    {
      if (v26 == -1.0 && v25 == -1.0)
        v37 = v24;
      v23 = (v23 + v38) & v17;
      v24 = (float *)(v14 + 16 * v23);
      v25 = *v24;
      v26 = v24[1];
      ++v38;
      if (*v24 == 0.0 && v26 == 0.0)
      {
        if (v37)
        {
          *(_QWORD *)v37 = 0;
          *((_QWORD *)v37 + 1) = 0;
          --*(_DWORD *)(*v10 - 16);
          v24 = v37;
        }
        goto LABEL_11;
      }
    }
    *(_QWORD *)(v6 + 24) = off_1E33DC988;
    v41 = *(_QWORD *)(v6 + 72);
    *(_QWORD *)(v6 + 72) = 0;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
    WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v6 + 24));
    v43 = *(_DWORD **)(v6 + 16);
    *(_QWORD *)(v6 + 16) = 0;
    if (v43)
    {
      if (v43[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v43 + 8))(v43);
      else
        --v43[2];
    }
    return (unsigned int *)WTF::fastFree((WTF *)v6, v42);
  }
  return result;
}

WebCore::GradientImage *WebCore::GradientImage::GradientImage(WebCore::GradientImage *this, WebCore::Gradient *a2, const WebCore::FloatSize *a3)
{
  uint64_t v6;
  int v8;

  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_WORD *)this + 24) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *(_QWORD *)this = off_1E340B890;
  v6 = *((_QWORD *)a2 + 1);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_5:
  ++*(_QWORD *)(v6 + 8);
  v8 = __ldxr((unsigned __int8 *)v6);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_10:
  *((_QWORD *)this + 9) = a2;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  *((_QWORD *)this + 8) = *(_QWORD *)a3;
  return this;
}

{
  uint64_t v6;
  int v8;

  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_WORD *)this + 24) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *(_QWORD *)this = off_1E340B890;
  v6 = *((_QWORD *)a2 + 1);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C](v6);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_3;
LABEL_4:
  ++*(_QWORD *)(v6 + 8);
  v8 = __ldxr((unsigned __int8 *)v6);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      goto LABEL_9;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_9:
  *((_QWORD *)this + 9) = a2;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  *((_QWORD *)this + 8) = *(_QWORD *)a3;
  return this;
}

uint64_t WTF::HashTable<WebCore::FloatSize,WTF::KeyValuePair<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashMap<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashTraits<WebCore::FloatSize>,WTF::HashTraits<std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::FloatSize>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int32x2_t *v11;
  int32x2_t v12;
  float v13;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  int8x8_t v22;
  int8x8_t v23;
  int32x2_t v24;
  int8x8_t v25;
  int32x2_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  float *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = v5;
    while (1)
    {
      v11 = (int32x2_t *)(v4 + 16 * v9);
      v12 = *v11;
      LODWORD(v13) = HIDWORD(*(unint64_t *)v11);
      if (COERCE_FLOAT(*v11) == -1.0 && v13 == -1.0)
        goto LABEL_37;
      if (*(float *)v12.i32 != 0.0 || v13 != 0.0)
        break;
      v15 = v4 + 16 * v9;
      v16 = *(_QWORD **)(v15 + 8);
      *(_QWORD *)(v15 + 8) = 0;
      if (v16)
      {
        v16[3] = off_1E33DC988;
        v17 = v16[9];
        v16[9] = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v16 + 3));
        v19 = (_DWORD *)v16[2];
        v16[2] = 0;
        if (!v19)
          goto LABEL_36;
        if (v19[2] != 1)
        {
          --v19[2];
          goto LABEL_36;
        }
LABEL_41:
        (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
        goto LABEL_36;
      }
LABEL_37:
      if (++v9 == v10)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 8);
    else
      v21 = 0;
    v22 = (int8x8_t)vadd_s32(v12, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v12, 0xFuLL)));
    v23 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v22, 0xAuLL), v22), (int32x2_t)0x900000009);
    v24 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v23, 6uLL), v23);
    v25 = (int8x8_t)vadd_s32(v24, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v24, 0xBuLL)));
    v26 = vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v25, 0x10uLL), v25), (int32x2_t)0x5AC73FE109132F9);
    v27 = v21 & ((0xD7862706ELL * (unint64_t)vadd_s32(vdup_lane_s32(v26, 1), v26).u32[0]) >> 4);
    v28 = 1;
    do
    {
      do
      {
        v29 = v27;
        v30 = (float *)(v20 + 16 * v27);
        v27 = (v27 + v28++) & v21;
      }
      while (*v30 != 0.0);
    }
    while (v30[1] != 0.0);
    v31 = v20 + 16 * v29;
    v34 = *(_QWORD **)(v31 + 8);
    v33 = (_QWORD *)(v31 + 8);
    v32 = v34;
    *v33 = 0;
    if (v34)
    {
      v32[3] = off_1E33DC988;
      v35 = v32[9];
      v32[9] = 0;
      if (v35)
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v32 + 3));
      v37 = (_DWORD *)v32[2];
      v32[2] = 0;
      if (v37)
      {
        if (v37[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 8))(v37);
        else
          --v37[2];
      }
      WTF::fastFree((WTF *)v32, v36);
    }
    *(int32x2_t *)v30 = *v11;
    v38 = v4 + 16 * v9;
    v39 = *(_QWORD *)(v38 + 8);
    *(_QWORD *)(v38 + 8) = 0;
    *v33 = v39;
    v16 = *(_QWORD **)(v38 + 8);
    *(_QWORD *)(v38 + 8) = 0;
    if (!v16)
      goto LABEL_37;
    v16[3] = off_1E33DC988;
    v40 = v16[9];
    v16[9] = 0;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v16 + 3));
    v19 = (_DWORD *)v16[2];
    v16[2] = 0;
    if (!v19)
      goto LABEL_36;
    if (v19[2] == 1)
      goto LABEL_41;
    --v19[2];
LABEL_36:
    WTF::fastFree((WTF *)v16, v18);
    goto LABEL_37;
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::HashTable<WebCore::FloatSize,WTF::KeyValuePair<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashMap<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashTraits<WebCore::FloatSize>,WTF::HashTraits<std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::FloatSize>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebCore::FloatSize,WTF::KeyValuePair<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashMap<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashTraits<WebCore::FloatSize>,WTF::HashTraits<std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::FloatSize>>::rehash(a1, v3);
}

void WebCore::CSSParserImpl::consumePageRule(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  unint64_t v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  WebCore::StyleSheetContents *v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  _QWORD v32[2];
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35[4];
  WTF *v36[2];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v6 = v5;
  v8 = v7;
  v9 = v4;
  v10 = v3;
  v12 = v11;
  v13 = (_QWORD *)v2;
  v14 = *(WebCore::StyleSheetContents **)(v11 + 72);
  if (v14)
  {
    ++*(_DWORD *)v14;
    WebCore::CSSParserImpl::parsePageSelector(&v34, v3, v4, (uint64_t)v14);
    WTF::RefCounted<WebCore::StyleSheetContents>::deref(v14, v15);
  }
  else
  {
    WebCore::CSSParserImpl::parsePageSelector(&v34, v3, v4, 0);
  }
  if (v34)
  {
    v16 = *(_QWORD *)(v12 + 88);
    if (v16)
    {
      v22 = *(_QWORD *)(v16 + 8);
      if (v22)
      {
        v23 = *(_QWORD *)(v22 + 32);
        v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v23) >> 3);
        v25 = *(unsigned int *)(v22 + 28);
        if (v24 >= v25 || (v26 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - v23) >> 3), v26 >= v25))
        {
          __break(0xC471u);
          JUMPOUT(0x1943D8264);
        }
        v27 = *(_QWORD *)(v22 + 8);
        v28 = *(_QWORD *)(v22 + 16);
        v29 = *(unsigned int *)(v28 + 4 * v24);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v27 + 16))(v27, 6, *(unsigned int *)(v28 + 4 * v26));
        v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 88) + 8) + 8);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 24))(v30, v29);
      }
    }
    v36[0] = v8;
    v36[1] = v6;
    LOBYTE(v31) = 1;
    v32[0] = &v33;
    v32[1] = 256;
    v35[0] = v12;
    v35[1] = (uint64_t)v36;
    v35[2] = (uint64_t)&v31;
    v35[3] = (uint64_t)v32;
    WebCore::CSSParserImpl::runInNewNestingContext<WebCore::CSSParserImpl::consumeDeclarationListInNewNestingContext(WebCore::CSSParserTokenRange,WebCore::StyleRuleType)::$_0>(v12, (uint64_t)v35);
    WebCore::createStyleProperties((uint64_t)&v31, (uint64_t)v32);
    v17 = v31;
    v31 = 0;
    v36[0] = v17;
    WebCore::StyleRulePage::create((uint64_t *)v36, (uint64_t *)&v34, v35);
    *v13 = v35[0];
    v35[0] = 0;
    WTF::Ref<WebCore::StyleProperties,WTF::RawPtrTraits<WebCore::StyleProperties>,WTF::DefaultRefDerefTraits<WebCore::StyleProperties>>::~Ref(v36, v18);
    WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>::~Ref((unsigned int **)&v31, v19);
    WTF::Vector<WebCore::CSSProperty,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v32, v20);
    v21 = v34;
    v34 = 0;
    if (v21)
      WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)&v34, v21);
  }
  else
  {
    *v13 = 0;
  }
}

WebCore::MutableCSSSelector *WebCore::CSSParserImpl::parsePageSelector(WTF::StringImpl **a1, WTF::StringImpl *a2, unint64_t a3, uint64_t a4)
{
  char v7;
  unsigned int v8;
  char v9;
  __int128 *v10;
  int v11;
  WebCore::MutableCSSSelector *result;
  __int128 *v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unsigned int v17;
  __int128 *v18;
  unsigned int v19;
  uint64_t *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  char v25;
  __int128 *v26;
  __int128 *v27;
  unint64_t v28;
  __int128 *v29;
  __int128 *v30;
  WebCore::MutableCSSSelector *v31;
  void *v32;
  WTF *v33;
  void *v34;
  void *v35;
  WTF::StringImpl ***v36;
  uint64_t *v37;
  void *v38;
  _DWORD *v39;
  WebCore::CSSSelector::RareData *v40;
  uint64_t v41;
  WebCore::MutableCSSSelector *v42;
  WTF::StringImpl *v43;

  v8 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  do
  {
    while (1)
    {
      v10 = (__int128 *)a2;
      if ((unint64_t)a2 >= a3)
        break;
      a2 = (WTF::StringImpl *)((char *)a2 + 24);
      if ((*(_DWORD *)v10 & 0x3F) != 0x10)
      {
        v43 = 0;
        v11 = *(_DWORD *)v10;
        goto LABEL_5;
      }
    }
    if ((v9 & 1) == 0)
    {
      v8 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v8;
      v7 = 1;
      a2 = (WTF::StringImpl *)((char *)a2 + 24);
      v43 = 0;
      goto LABEL_34;
    }
    a2 = (WTF::StringImpl *)((char *)a2 + 24);
    v9 = 1;
  }
  while ((WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0x3F) == 0x10);
  v43 = 0;
  {
    v8 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
    WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v8;
  }
  v7 = 1;
LABEL_34:
  LOBYTE(v11) = v8;
LABEL_5:
  if ((v11 & 0x3F) != 0)
  {
    result = 0;
  }
  else
  {
    if (v10 == (__int128 *)a3)
      v25 = v7;
    else
      v25 = 1;
    if (v10 == (__int128 *)a3)
      v26 = (__int128 *)a3;
    else
      v26 = (__int128 *)a2;
    if (v10 == (__int128 *)a3)
      v27 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    else
      v27 = v10;
    if ((v25 & 1) != 0)
    {
      v10 = v26;
    }
    else
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v8 & 0xFF000000 | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      v10 = (__int128 *)a3;
      v27 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    v28 = *((unsigned int *)v27 + 1) | ((unint64_t)((*(_DWORD *)v27 >> 22) & 1) << 32);
    v40 = (WebCore::CSSSelector::RareData *)*((_QWORD *)v27 + 1);
    v41 = v28;
    WTF::StringView::toAtomString((WTF::StringView *)&v40, &v42);
    result = v42;
    v43 = v42;
  }
  v13 = v10;
  if ((unint64_t)v10 >= a3)
  {
    v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v13 & 0x3F) != 0x13)
  {
    v14 = 0;
    v15 = 0x100000000;
    goto LABEL_10;
  }
  if (v10 == (__int128 *)a3)
  {
    {
      v30 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v29 = (__int128 *)a3;
      goto LABEL_52;
    }
    v29 = (__int128 *)a3;
    goto LABEL_75;
  }
  v29 = (__int128 *)((char *)v10 + 24);
  if ((unint64_t)v10 + 24 >= a3)
  {
    {
      v30 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      goto LABEL_52;
    }
LABEL_75:
    v30 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
    *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    goto LABEL_52;
  }
  v30 = (__int128 *)((char *)v10 + 24);
LABEL_52:
  if ((*(_BYTE *)v30 & 0x3F) != 0)
    goto LABEL_53;
  if (v29 == (__int128 *)a3)
  {
    v29 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
    v10 = (__int128 *)a3;
  }
  else
  {
    v10 = (__int128 *)((char *)v29 + 24);
  }
  v14 = *((_QWORD *)v29 + 1);
  v15 = *((unsigned int *)v29 + 1) | ((unint64_t)((*(_DWORD *)v29 >> 22) & 1) << 32);
LABEL_10:
  v17 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  do
  {
    if ((unint64_t)v10 < a3 || (v16 & 1) != 0)
    {
      if ((unint64_t)v10 >= a3)
        v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v18 = v10;
      v19 = *(_DWORD *)v18;
    }
    else
    {
      v19 = v17 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v19;
      v16 = 1;
      v17 = v19;
    }
    v10 = (__int128 *)((char *)v10 + 24);
  }
  while ((v19 & 0x3F) == 0x10);
  if ((__int128 *)((char *)v10 - 24) == (__int128 *)a3)
  {
    if (result && !v14)
    {
      WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v39, MEMORY[0x1E0CBF2F8], (const WTF::AtomString *)&v43, (const WTF::AtomString *)(a4 + 112));
      v20 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
      v37 = WebCore::MutableCSSSelector::MutableCSSSelector(v20, &v39);
      v40 = 0;
      v42 = (WebCore::MutableCSSSelector *)v37;
      std::unique_ptr<WebCore::MutableCSSSelector>::~unique_ptr[abi:sn180100](&v40, v38);
      v36 = (WTF::StringImpl ***)&v39;
    }
    else
    {
      v20 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
      v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v21 = 786433;
      v21[1] = 0;
      *v20 = (uint64_t)v21;
      v20[1] = 0;
      v40 = 0;
      v42 = (WebCore::MutableCSSSelector *)v20;
      std::unique_ptr<WebCore::MutableCSSSelector>::~unique_ptr[abi:sn180100](&v40, v22);
      if (v14)
      {
        WebCore::MutableCSSSelector::parsePagePseudoSelector(v14, v15, &v40);
        v31 = v40;
        v40 = 0;
        v42 = v31;
        WebCore::MutableCSSSelector::~MutableCSSSelector((WebCore::MutableCSSSelector *)v20, v32);
        WTF::fastFree(v33, v34);
        std::unique_ptr<WebCore::MutableCSSSelector>::~unique_ptr[abi:sn180100](&v40, v35);
        if (!v31 || (v20 = (uint64_t *)v31, (**(_DWORD **)v31 & 0x1F0) != 0xD0))
        {
          *a1 = 0;
          goto LABEL_24;
        }
      }
      if (!v43)
      {
LABEL_23:
        *(_DWORD *)*v20 |= 0x200000u;
        v40 = (WebCore::CSSSelector::RareData *)WTF::fastMalloc((WTF *)8);
        v41 = 0x100000001;
        v42 = 0;
        *(_QWORD *)v40 = v20;
        WebCore::CSSSelectorList::CSSSelectorList(a1, (uint64_t)&v40);
        WTF::Vector<std::unique_ptr<WebCore::MutableCSSSelector>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v23);
LABEL_24:
        std::unique_ptr<WebCore::MutableCSSSelector>::~unique_ptr[abi:sn180100](&v42, v24);
        result = v43;
        goto LABEL_25;
      }
      WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v40, MEMORY[0x1E0CBF2F8], (const WTF::AtomString *)&v43, (const WTF::AtomString *)(a4 + 112));
      WebCore::MutableCSSSelector::prependTagSelector((WebCore::CSSSelector::RareData ***)v20, &v40, 0);
      v36 = (WTF::StringImpl ***)&v40;
    }
    WebCore::QualifiedName::~QualifiedName(v36);
    goto LABEL_23;
  }
LABEL_53:
  *a1 = 0;
LABEL_25:
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WebCore::MutableCSSSelector *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::CSSProperty,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;
  WTF *v7;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = (_DWORD **)(*(_QWORD *)a1 + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*v6 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, a2);
        else
          *v6 -= 2;
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  v7 = *(WTF **)a1;
  if (a1 + 4 != *(unsigned int **)a1 && v7 != 0)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void WebCore::StyleSheetContents::~StyleSheetContents(WebCore::StyleSheetContents *this, void *a2)
{
  void *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  _DWORD **v20;
  uint64_t v21;
  _DWORD **v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD **v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  _DWORD **v35;
  uint64_t v36;
  _DWORD *v37;

  WebCore::StyleSheetContents::clearRules(this, a2);
  v4 = (WTF *)*((_QWORD *)this + 25);
  if (v4)
  {
    *((_QWORD *)this + 25) = 0;
    *((_DWORD *)this + 52) = 0;
    WTF::fastFree(v4, v3);
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((_QWORD *)this + 13);
  if (v8)
  {
    v31 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v31)
    {
      v32 = (WTF::StringImpl **)*((_QWORD *)this + 13);
      do
      {
        v33 = *v32;
        if (*v32 != (WTF::StringImpl *)-1)
        {
          v34 = v32[1];
          v32[1] = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
            {
              WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v3);
              v33 = *v32;
            }
            else
            {
              *(_DWORD *)v34 -= 2;
            }
          }
          *v32 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v3);
            else
              *(_DWORD *)v33 -= 2;
          }
        }
        v32 += 2;
        --v31;
      }
      while (v31);
    }
    WTF::fastFree((WTF *)(v8 - 16), v3);
  }
  v9 = *((unsigned int *)this + 25);
  if ((_DWORD)v9)
  {
    v35 = (_DWORD **)*((_QWORD *)this + 11);
    v36 = 8 * v9;
    do
    {
      v37 = *v35;
      *v35 = 0;
      if (v37)
      {
        if (*v37 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>();
        else
          --*v37;
      }
      ++v35;
      v36 -= 8;
    }
    while (v36);
  }
  v10 = (WTF *)*((_QWORD *)this + 11);
  if (v10)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v10, v3);
  }
  v11 = *((unsigned int *)this + 21);
  if ((_DWORD)v11)
  {
    v20 = (_DWORD **)*((_QWORD *)this + 9);
    v21 = 8 * v11;
    do
    {
      v20 = WTF::Ref<WebCore::StyleRuleNamespace,WTF::RawPtrTraits<WebCore::StyleRuleNamespace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleNamespace>>::~Ref(v20)
          + 1;
      v21 -= 8;
    }
    while (v21);
  }
  v12 = (WTF *)*((_QWORD *)this + 9);
  if (v12)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v12, v3);
  }
  v13 = *((unsigned int *)this + 17);
  if ((_DWORD)v13)
  {
    v22 = (_DWORD **)*((_QWORD *)this + 7);
    v23 = 8 * v13;
    do
    {
      v24 = *v22;
      *v22 = 0;
      if (v24)
      {
        if (*v24 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>();
        else
          --*v24;
      }
      ++v22;
      v23 -= 8;
    }
    while (v23);
  }
  v14 = (WTF *)*((_QWORD *)this + 7);
  if (v14)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v14, v3);
  }
  v15 = *((unsigned int *)this + 13);
  if ((_DWORD)v15)
  {
    v25 = (_DWORD **)*((_QWORD *)this + 5);
    v26 = 8 * v15;
    do
    {
      v27 = *v25;
      *v25 = 0;
      if (v27)
      {
        if (*v27 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>();
        else
          --*v27;
      }
      ++v25;
      v26 -= 8;
    }
    while (v26);
  }
  v16 = (WTF *)*((_QWORD *)this + 5);
  if (v16)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v16, v3);
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *((_QWORD *)this + 1);
  if (v19)
  {
    *(_QWORD *)(v19 + 8) = 0;
    v28 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v28)
    {
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v28);
        WTF::fastFree((WTF *)v28, v3);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

WTF::StringImpl *WebCore::StyleSheetContents::clearRules(WebCore::StyleSheetContents *this, void *a2)
{
  WTF **v3;
  uint64_t v4;
  WTF **v5;
  WTF *v6;
  WTF::StringImpl *result;
  WTF *v8;
  uint64_t v9;
  WTF **v10;
  WTF *v11;
  uint64_t v12;
  _DWORD **v13;
  uint64_t v14;
  WTF *v15;
  WTF *v16;

  v3 = (WTF **)((char *)this + 56);
  v4 = *((unsigned int *)this + 17);
  if ((_DWORD)v4)
  {
    v8 = *v3;
    do
    {
      v9 = *(_QWORD *)v8;
      v8 = (WTF *)((char *)v8 + 8);
      *(_QWORD *)(v9 + 8) = 0;
      --v4;
    }
    while (v4);
  }
  if (*((_DWORD *)this + 12))
  {
    v10 = (WTF **)((char *)this + 40);
    if (*((_DWORD *)this + 13))
      WTF::Vector<WTF::Ref<WebCore::StyleRuleLayer,WTF::RawPtrTraits<WebCore::StyleRuleLayer>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t)this + 40);
    v11 = *v10;
    if (*v10)
    {
      *((_QWORD *)this + 5) = 0;
      *((_DWORD *)this + 12) = 0;
      WTF::fastFree(v11, a2);
    }
  }
  if (*((_DWORD *)this + 16))
  {
    if (*((_DWORD *)this + 17))
      WTF::Vector<WTF::Ref<WebCore::StyleRuleImport,WTF::RawPtrTraits<WebCore::StyleRuleImport>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleImport>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t)v3, 0);
    v16 = *v3;
    if (*v3)
    {
      *((_QWORD *)this + 7) = 0;
      *((_DWORD *)this + 16) = 0;
      WTF::fastFree(v16, a2);
    }
  }
  if (*((_DWORD *)this + 20))
  {
    v12 = *((unsigned int *)this + 21);
    if ((_DWORD)v12)
    {
      v13 = (_DWORD **)*((_QWORD *)this + 9);
      v14 = 8 * v12;
      do
      {
        v13 = WTF::Ref<WebCore::StyleRuleNamespace,WTF::RawPtrTraits<WebCore::StyleRuleNamespace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleNamespace>>::~Ref(v13)
            + 1;
        v14 -= 8;
      }
      while (v14);
      *((_DWORD *)this + 21) = 0;
    }
    v15 = (WTF *)*((_QWORD *)this + 9);
    if (v15)
    {
      *((_QWORD *)this + 9) = 0;
      *((_DWORD *)this + 20) = 0;
      WTF::fastFree(v15, a2);
    }
  }
  if (*((_DWORD *)this + 24))
  {
    v5 = (WTF **)((char *)this + 88);
    if (*((_DWORD *)this + 25))
      WTF::Vector<WTF::Ref<WebCore::StyleRuleImport,WTF::RawPtrTraits<WebCore::StyleRuleImport>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleImport>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t)this + 88, 0);
    v6 = *v5;
    if (*v5)
    {
      *((_QWORD *)this + 11) = 0;
      *((_DWORD *)this + 24) = 0;
      WTF::fastFree(v6, a2);
    }
  }
  result = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::StyleRule::~StyleRule(WebCore::StyleRule *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  WTF *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD **v15;
  _DWORD *v16;
  WTF *v17;
  uint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  _DWORD *v22;
  WTF *v23;
  unsigned int *v24;

  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 - 8);
    if (v4)
    {
      v5 = v3 + 24 * v4;
      do
      {
        v6 = *(unsigned int **)(v5 - 8);
        *(_QWORD *)(v5 - 8) = 0;
        if (v6)
        {
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            atomic_store(1u, v6);
            v24 = v6;
            WTF::ThreadSafeRefCounted<JSC::ExecutableMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v24);
          }
        }
        v5 -= 24;
      }
      while (v5 != v3);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)this + 16, v9);
  v10 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    v23 = v10;
    v11 = *(_DWORD *)v10 - 1;
    if (v11)
    {
      *(_DWORD *)v23 = v11;
    }
    else
    {
      v12 = *((unsigned int *)v23 + 1);
      if ((v12 & 8) != 0)
      {
        v13 = *((unsigned int *)v23 + 7);
        if ((_DWORD)v13)
        {
          v14 = 16 * v13;
          v15 = (_DWORD **)(*((_QWORD *)v23 + 2) + 8);
          do
          {
            v16 = *v15;
            *v15 = 0;
            if (v16)
            {
              if (*v16 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v9);
              else
                *v16 -= 2;
            }
            v15 += 2;
            v14 -= 16;
          }
          while (v14);
        }
        v17 = (WTF *)*((_QWORD *)v23 + 2);
        if ((WTF *)((char *)v23 + 32) != v17 && v17 != 0)
        {
          *((_QWORD *)v23 + 2) = 0;
          *((_DWORD *)v23 + 6) = 0;
          WTF::fastFree(v17, v9);
        }
        v19 = *((_QWORD *)v23 + 1);
        *((_QWORD *)v23 + 1) = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
      else if (v12 >= 0x10)
      {
        v20 = 0;
        v21 = (unsigned int *)((char *)v23 + ((v12 >> 3) & 0x1FFFFFFE) + 8);
        do
        {
          v22 = (_DWORD *)(*v21 | ((unint64_t)*((unsigned __int8 *)v21 + 4) << 32));
          if (*v22 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v9);
          else
            *v22 -= 2;
          ++v20;
          v21 = (unsigned int *)((char *)v21 + 5);
        }
        while (v20 < (unint64_t)*((unsigned int *)v23 + 1) >> 4);
      }
      WTF::fastFree(v23, v9);
    }
  }
}

void WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()(uint64_t a1, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t i;
  WebCore::CSSSelector::RareData **v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  WTF *v9;
  void *v10;

  if (a2)
  {
    v3 = (WTF::StringImpl *)((char *)a2 - 16);
    v4 = *((_QWORD *)a2 - 1);
    if (v4)
    {
      for (i = 16 * v4; i; i -= 16)
      {
        v6 = (WebCore::CSSSelector::RareData **)((char *)a2 + i);
        if ((*(_DWORD *)((_BYTE *)a2 + i - 16) & 0x100000) != 0)
        {
          WTF::RefCounted<WebCore::CSSSelector::RareData>::deref(*(v6 - 1));
          *(v6 - 1) = 0;
          v8 = *(_DWORD *)(v6 - 2) & 0xFFEFFFFF;
        }
        else
        {
          v7 = *(v6 - 1);
          if ((*(_DWORD *)((_BYTE *)a2 + i - 16) & 0x1F0) != 0x10)
          {
            if (v7)
            {
              if (*(_DWORD *)v7 == 2)
                WTF::StringImpl::destroy(v7, a2);
              else
                *(_DWORD *)v7 -= 2;
              *(v6 - 1) = 0;
            }
            continue;
          }
          if (*(_DWORD *)v7 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
            WTF::fastFree(v9, v10);
          }
          else
          {
            --*(_DWORD *)v7;
          }
          *(v6 - 1) = 0;
          v8 = *(_DWORD *)(v6 - 2) & 0xFFFFFE0F;
        }
        *((_DWORD *)v6 - 4) = v8;
      }
    }
    WTF::fastFree(v3, a2);
  }
}

void WebCore::StyleRuleKeyframe::~StyleRuleKeyframe(WebCore::StyleRuleKeyframe *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD **v9;
  _DWORD *v10;
  WTF *v11;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  _DWORD *v16;
  WTF *v17;

  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v17 = v4;
    v5 = *(_DWORD *)v4 - 1;
    if (v5)
    {
      *(_DWORD *)v17 = v5;
    }
    else
    {
      v6 = *((unsigned int *)v17 + 1);
      if ((v6 & 8) != 0)
      {
        v7 = *((unsigned int *)v17 + 7);
        if ((_DWORD)v7)
        {
          v8 = 16 * v7;
          v9 = (_DWORD **)(*((_QWORD *)v17 + 2) + 8);
          do
          {
            v10 = *v9;
            *v9 = 0;
            if (v10)
            {
              if (*v10 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, (WTF::StringImpl *)a2);
              else
                *v10 -= 2;
            }
            v9 += 2;
            v8 -= 16;
          }
          while (v8);
        }
        v11 = (WTF *)*((_QWORD *)v17 + 2);
        if ((WTF *)((char *)v17 + 32) != v11 && v11 != 0)
        {
          *((_QWORD *)v17 + 2) = 0;
          *((_DWORD *)v17 + 6) = 0;
          WTF::fastFree(v11, a2);
        }
        v13 = *((_QWORD *)v17 + 1);
        *((_QWORD *)v17 + 1) = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
      else if (v6 >= 0x10)
      {
        v14 = 0;
        v15 = (unsigned int *)((char *)v17 + ((v6 >> 3) & 0x1FFFFFFE) + 8);
        do
        {
          v16 = (_DWORD *)(*v15 | ((unint64_t)*((unsigned __int8 *)v15 + 4) << 32));
          if (*v16 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, (WTF::StringImpl *)a2);
          else
            *v16 -= 2;
          ++v14;
          v15 = (unsigned int *)((char *)v15 + 5);
        }
        while (v14 < (unint64_t)*((unsigned int *)v17 + 1) >> 4);
      }
      WTF::fastFree(v17, a2);
    }
  }
}

uint64_t WebCore::CredentialStorage::get@<X0>(WebCore::CredentialStorage *this@<X0>, const WTF::String *a2@<X1>, const WTF::URL *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11[5];

  result = WebCore::CredentialStorage::findDefaultProtectionSpaceForURL(this, a3);
  v8 = *((_QWORD *)this + 4);
  if (v8)
    v8 += 40 * *(unsigned int *)(v8 - 4);
  if (v8 == result)
  {
    v9 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v9 += 4;
    *(_QWORD *)a4 = v9;
    *(_QWORD *)(a4 + 8) = v9;
    *(_BYTE *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
  }
  else
  {
    std::make_pair[abi:sn180100]<WTF::String const&,WebCore::ProtectionSpace &>((_DWORD **)a2, result + 8, (uint64_t)v11);
    WTF::HashMap<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential,WTF::DefaultHash<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<WebCore::Credential>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential,WTF::DefaultHash<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<WebCore::Credential>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::String,WebCore::ProtectionSpace>>>,std::pair<WTF::String,WebCore::ProtectionSpace>>((uint64_t)this, v11, a4);
    return std::pair<WTF::String,WebCore::ProtectionSpace>::~pair((uint64_t)v11, v10);
  }
  return result;
}

uint64_t WebCore::CredentialStorage::findDefaultProtectionSpaceForURL(WebCore::CredentialStorage *this, const WTF::URL *a2)
{
  uint64_t *v4;
  const WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned __int8 v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t result;
  unsigned int v11;
  const WTF::StringImpl *v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  v4 = (uint64_t *)((char *)this + 8);
  WebCore::originStringFromURL((WebCore *)&v30, a2);
  v7 = WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(v4, &v30, v5);
  v8 = v30;
  v30 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  if ((v7 & 1) == 0)
  {
    v9 = *((_QWORD *)this + 4);
    if (v9)
      return v9 + 40 * *(unsigned int *)(v9 - 4);
    else
      return 0;
  }
  WebCore::protectionSpaceMapKeyFromURL((int **)&v30, (WTF::StringImpl **)a2);
  v11 = WTF::URL::pathStart(a2);
  v13 = (uint64_t *)((char *)this + 32);
  v14 = v11 + 1;
  v15 = v11;
  while (1)
  {
    result = WTF::HashMap<WTF::String,WebCore::ProtectionSpace,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProtectionSpace>,WTF::HashTableTraits>::find(v13, &v30, v12);
    v17 = *v13;
    if (*v13)
      v18 = v17 + 40 * *(unsigned int *)(v17 - 4);
    else
      v18 = 0;
    if (v18 != result)
    {
      v19 = v30;
      goto LABEL_32;
    }
    v19 = v30;
    if (v30)
    {
      if (*((_DWORD *)v30 + 1) == v14)
        break;
      v20 = WTF::StringImpl::reverseFind();
      goto LABEL_16;
    }
    if ((_DWORD)v15 == -1)
      break;
    v20 = -1;
LABEL_16:
    if (v20 == v15)
      v21 = v20 + 1;
    else
      v21 = v20;
    WTF::String::left(&v30, v21, &v29);
    v24 = v29;
    v23 = v30;
    v29 = 0;
    v30 = v24;
    if (v23)
    {
      v25 = *(_DWORD *)v23 - 2;
      if (*(_DWORD *)v23 != 2)
        goto LABEL_21;
      WTF::StringImpl::destroy(v23, v22);
      v23 = v29;
      v29 = 0;
      if (v23)
      {
        v25 = *(_DWORD *)v23 - 2;
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v26);
        else
LABEL_21:
          *(_DWORD *)v23 = v25;
      }
    }
  }
  if (v17)
  {
    v27 = *(_DWORD *)(v17 - 4);
    result = v17 + 40 * v27;
  }
  else
  {
    result = 0;
    v27 = 0;
  }
  v16 = (WTF::StringImpl *)(v17 + 40 * v27);
LABEL_32:
  v30 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      v28 = result;
      WTF::StringImpl::destroy(v19, v16);
      return v28;
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  return result;
}

WTF *WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  WTF **v12;
  WTF *result;
  int v14;
  unsigned int v15;
  int v16;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *((_DWORD *)a1 + 2);
  v7 = v6 - 1;
  v8 = *((_DWORD *)a1 + 4);
  v9 = *((_DWORD *)*a2 + 4);
  if (v9 < 0x100)
  {
    v10 = WTF::StringImpl::hashSlowCase(*a2);
    v3 = *a1;
  }
  else
  {
    v10 = v9 >> 8;
  }
  v11 = (v10 ^ v8) & v7;
  v12 = (WTF **)(v3 + 8 * v11);
  result = *v12;
  if (*v12)
  {
    v14 = -1;
    while (1)
    {
      v15 = *((_DWORD *)result + 4);
      v16 = v15 < 0x100 ? WTF::StringImpl::hashSlowCase(result) : v15 >> 8;
      if (++v14 > ((v11 + v6 - ((v16 ^ v8) & v7)) & v7))
        break;
      if (v16 == v10 && (WTF::equal(*v12, *a2, a3) & 1) != 0)
        return (WTF *)1;
      v11 = (v11 + 1) & v7;
      v12 = (WTF **)(*a1 + 8 * v11);
      result = *v12;
      if (!*v12)
        return result;
    }
    return 0;
  }
  return result;
}

void WebCore::CDMFactory::platformRegisterFactories(WebCore::CDMFactoryClearKey *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v2 = WebCore::CDMFactoryClearKey::singleton(a1);
  v5 = v2;
  v3 = *((unsigned int *)a1 + 3);
  if ((_DWORD)v3 == *((_DWORD *)a1 + 2))
  {
    WTF::Vector<WebCore::CDMFactory *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CDMFactoryClearKey *>((uint64_t)a1, &v5);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v2;
    *((_DWORD *)a1 + 3) = v3 + 1;
  }
  {
    WebCore::CDMFactoryFairPlayStreaming::singleton(void)::s_factory = (uint64_t)off_1E31F7508;
  }
  v5 = &WebCore::CDMFactoryFairPlayStreaming::singleton(void)::s_factory;
  v4 = *((unsigned int *)a1 + 3);
  if ((_DWORD)v4 == *((_DWORD *)a1 + 2))
  {
    WTF::Vector<WebCore::CDMFactory *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CDMFactoryClearKey *>((uint64_t)a1, &v5);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = &WebCore::CDMFactoryFairPlayStreaming::singleton(void)::s_factory;
    *((_DWORD *)a1 + 3) = v4 + 1;
  }
  std::call_once[abi:sn180100]<WebCore::CDMFactory::platformRegisterFactories(WTF::Vector<WebCore::CDMFactory*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0>((uint64_t)&v5);
}

_QWORD *WebCore::CDMFactoryClearKey::singleton(WebCore::CDMFactoryClearKey *this)
{
  if ((byte_1EE33811B & 1) == 0)
  {
    qword_1EE338120 = off_1E340A070;
    byte_1EE33811B = 1;
  }
  return &qword_1EE338120;
}

uint64_t WTF::Vector<WebCore::CDMFactory *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CDMFactoryClearKey *>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<WebCore::CDMFactory *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v8 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = *a2;
  *(_DWORD *)(a1 + 12) = v8 + 1;
  return 1;
}

BOOL PAL::canLoad_DataDetectorsCore_DDResultDisableURLSchemeChecking(PAL *this)
{
  _BOOL8 result;

  if (byte_1ECE7E271 == 1)
    return _MergedGlobals_62 != 0;
  result = PAL::init_DataDetectorsCore_DDResultDisableURLSchemeChecking(this);
  _MergedGlobals_62 = result;
  byte_1ECE7E271 = 1;
  return result;
}

BOOL PAL::init_DataDetectorsCore_DDResultDisableURLSchemeChecking(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = 0;
  if (qword_1ECE7E280 != -1)
    dispatch_once(&qword_1ECE7E280, block);
  PAL::softLinkDataDetectorsCoreDDResultDisableURLSchemeChecking = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDResultDisableURLSchemeChecking");
  return PAL::softLinkDataDetectorsCoreDDResultDisableURLSchemeChecking != 0;
}

uint64_t WebCore::Element::matchesIndeterminatePseudoClass(WebCore::Element *this)
{
  return 0;
}

uint64_t WebCore::Element::isValidatedFormListedElement(WebCore::Element *this)
{
  return 0;
}

uint64_t WebCore::Element::matchesDefaultPseudoClass(WebCore::Element *this)
{
  return 0;
}

uint64_t WebCore::Element::matchesValidPseudoClass(WebCore::Element *this)
{
  return 0;
}

void WebCore::Element::resolveCustomStyle(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t WTF::HashTable<JSC::JSObject const*,WTF::KeyValuePair<JSC::JSObject const*,WebCore::JSCustomElementInterface *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSObject const*,WebCore::JSCustomElementInterface *>>,WTF::DefaultHash<JSC::JSObject const*>,WTF::HashMap<JSC::JSObject const*,WebCore::JSCustomElementInterface *,WTF::DefaultHash<JSC::JSObject const*>,WTF::HashTraits<JSC::JSObject const*>,WTF::HashTraits<WebCore::JSCustomElementInterface *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSObject const*>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (_QWORD *)(v4 + 16 * i);
      if ((unint64_t)(*v10 + 1) >= 2)
      {
        v11 = *a1;
        if (*a1)
          v12 = *(_DWORD *)(v11 - 8);
        else
          v12 = 0;
        v13 = (~(*v10 << 32) + *v10) ^ ((~(*v10 << 32) + *v10) >> 22);
        v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((unint64_t)(v13 + ~(v13 << 13)) >> 8));
        v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        v16 = v12 & ((v15 >> 31) ^ v15);
        v17 = 1;
        do
        {
          v18 = v16;
          v19 = *(_QWORD *)(v11 + 16 * v16);
          v16 = (v16 + v17++) & v12;
        }
        while (v19);
        *(_OWORD *)(v11 + 16 * v18) = *(_OWORD *)v10;
      }
    }
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t ___ZN7WebCore19VideoToolboxLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/Frameworks/VideoToolbox.framework/VideoToolbox", 2);
  WebCore::VideoToolboxLibrary(BOOL)::frameworkLibrary = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 36;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PAL19CoreGraphicsLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/Frameworks/CoreGraphics.framework/CoreGraphics", 2);
  _MergedGlobals_58 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 36;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PAL17QuartzCoreLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/Frameworks/QuartzCore.framework/QuartzCore", 2);
  _MergedGlobals_71 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 31;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PAL12OTSVGLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/OTSVG.framework/OTSVG", 2);
  PAL::OTSVGLibrary(BOOL)::frameworkLibrary = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 36;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::SharedBufferBuilder::take@<X0>(WebCore::SharedBufferBuilder *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = *(_QWORD *)this;
  if (result)
  {
    *(_QWORD *)this = 0;
  }
  else
  {
    result = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = result + 24;
    *(_QWORD *)(result + 16) = 1;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
  }
  *a2 = result;
  return result;
}

_BYTE *WebCore::ResourceRequestBase::setPriority(_BYTE *this, int a2)
{
  _BYTE *v3;
  char v4;

  v3 = this;
  v4 = this[184];
  if ((v4 & 1) == 0)
  {
    this = (_BYTE *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    v4 = v3[184] | 1;
    v3[184] = v4;
  }
  if (v3[146] != a2)
  {
    v3[146] = a2;
    v3[184] = v4 & 0xFD;
  }
  return this;
}

uint64_t WebCore::StyleGradientImage::knownToBeOpaque(WebCore::StyleGradientImage *this, const WebCore::RenderElement *a2)
{
  uint64_t v2;
  WebCore::GraphicsContextCG *v4;
  const WebCore::Path *v5;
  const WebCore::RenderElement *v6;
  const WebCore::RenderElement **v7;

  v6 = a2;
  v2 = *((unsigned int *)this + 40);
  if ((_DWORD)v2 == -1)
  {
    v4 = (WebCore::GraphicsContextCG *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::GraphicsContextCG::fillPath(v4, v5);
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(const WebCore::RenderElement ***, char *))off_1E3442A88[v2])(&v7, (char *)this + 72);
  }
}

void WebCore::GraphicsContextCG::fillPath(WebCore::GraphicsContextCG *this, const WebCore::Path *a2, float a3, float a4, float a5)
{
  int v7;
  CGContext *v8;
  int v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned int **v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  WebCore::Gradient *v50;
  const WebCore::Path *v51;
  int v52;
  BOOL v53;
  char *v54;
  _OWORD *v55;
  __int128 v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  CGLayer *v68;
  CGContext *Context;
  const WebCore::Path *v70;
  int v71;
  BOOL v72;
  char *v73;
  _OWORD *v74;
  __int128 v75;
  CGAffineTransform v76;
  CGAffineTransform transform;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  unint64_t v87;
  uint64_t v88;
  CGSize v89;
  CGRect v90;

  v88 = *MEMORY[0x1E0C80C00];
  v7 = *((_DWORD *)a2 + 16);
  if (v7 == 2)
  {
    v19 = *((_QWORD *)a2 + 1);
    if (v19 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 200))(v19) & 1) != 0)
      return;
  }
  else if (!v7)
  {
    return;
  }
  *((_BYTE *)this + 744) |= 8u;
  v8 = (CGContext *)*((_QWORD *)this + 90);
  v9 = *((_DWORD *)this + 22);
  if (v9 != 1)
  {
    if (v9 == 2 && *((_QWORD *)this + 3))
      WebCore::GraphicsContextCG::applyFillPattern(this);
LABEL_5:
    v10 = *((_DWORD *)a2 + 16);
    if (v10 == 1)
    {
      v11 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)(v11 + 8) = 1;
      *(_QWORD *)v11 = off_1E3412578;
      *(_QWORD *)(v11 + 16) = CGPathCreateMutable();
      v87 = *((_QWORD *)a2 + 7);
      v12 = *(_OWORD *)((char *)a2 + 40);
      v85 = *(_OWORD *)((char *)a2 + 24);
      v86 = v12;
      v84 = *(_OWORD *)((char *)a2 + 8);
      v78 = v11;
      v79 = v11;
      v80 = v11;
      v81 = v11;
      v82 = v11;
      if (HIDWORD(v87) != -1)
      {
        v83 = &v78;
        ((void (*)(unint64_t **, __int128 *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore8PathImpl10addSegmentENS8_11PathSegmentEEUlOT_E_JZNS9_10addSegmentESA_EUlNS8_12PathDataLineEE_ZNS9_10addSegmentESA_EUlNS8_17PathDataQuadCurveEE_ZNS9_10addSegmentESA_EUlNS8_19PathDataBezierCurveEE_ZNS9_10addSegmentESA_EUlNS8_11PathDataArcEE_EEEEEJNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectESE_SG_SI_SK_NS8_16PathCloseSubpathEEEEEEEDcSC_DpOT0____fmatrix
                                                               + HIDWORD(v87)))(&v83, &v84);
        v13 = *((unsigned int *)a2 + 16);
        if ((_DWORD)v13 != -1)
        {
          v14 = (unsigned int **)((char *)a2 + 8);
          if ((_DWORD)v13 == 2)
          {
            v15 = *v14;
            *v14 = (unsigned int *)v11;
            if (v15)
            {
              v16 = v15 + 2;
              do
              {
                v17 = __ldaxr(v16);
                v18 = v17 - 1;
              }
              while (__stlxr(v18, v16));
              if (!v18)
              {
                atomic_store(1u, v15 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
              }
            }
            goto LABEL_41;
          }
          ((void (*)(__int128 *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v13])(&v84, v14);
        }
        *((_QWORD *)a2 + 1) = v11;
        *((_DWORD *)a2 + 16) = 2;
LABEL_41:
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11))
        {
          __break(0xC471u);
          JUMPOUT(0x1943DA364);
        }
LABEL_42:
        CGContextDrawPathDirect();
        return;
      }
LABEL_75:
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    v20 = (uint64_t *)((char *)a2 + 8);
    if (v10 == 2)
    {
      v21 = atomic_load((unsigned int *)(*v20 + 8));
      v22 = (unsigned int *)*v20;
      if (v21 != 1)
      {
        (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v22 + 24))(&v84, *v20);
        v41 = v84;
        *(_QWORD *)&v84 = 0;
        v42 = (unsigned int *)*v20;
        *v20 = v41;
        if (v42)
        {
          v43 = v42 + 2;
          do
          {
            v44 = __ldaxr(v43);
            v45 = v44 - 1;
          }
          while (__stlxr(v45, v43));
          if (!v45)
          {
            atomic_store(1u, v42 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v42 + 8))(v42);
          }
          v46 = (unsigned int *)v84;
          *(_QWORD *)&v84 = 0;
          if (v46)
          {
            v47 = v46 + 2;
            do
            {
              v48 = __ldaxr(v47);
              v49 = v48 - 1;
            }
            while (__stlxr(v49, v47));
            if (!v49)
            {
              atomic_store(1u, v46 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v46 + 8))(v46);
            }
          }
        }
        v22 = (unsigned int *)*v20;
      }
      if (v22)
      {
        if (!(*(unsigned int (**)(unsigned int *))(*(_QWORD *)v22 + 16))(v22))
        {
          if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)v22 + 16))(v22))
          {
            __break(0xC471u);
            JUMPOUT(0x1943DA4F8);
          }
          goto LABEL_42;
        }
        v23 = WTF::fastMalloc((WTF *)0x18);
        *(_DWORD *)(v23 + 8) = 1;
        *(_QWORD *)v23 = off_1E3412578;
        *(_QWORD *)(v23 + 16) = CGPathCreateMutable();
        v24 = v22[7];
        if ((_DWORD)v24)
        {
          v25 = (__int128 *)*((_QWORD *)v22 + 2);
          v26 = 56 * v24;
          do
          {
            v27 = *v25;
            v28 = v25[1];
            v29 = v25[2];
            v87 = *((_QWORD *)v25 + 6);
            v85 = v28;
            v86 = v29;
            v84 = v27;
            v78 = v23;
            v79 = v23;
            v80 = v23;
            v81 = v23;
            v82 = v23;
            if (HIDWORD(v87) == -1)
              goto LABEL_75;
            v83 = &v78;
            ((void (*)(unint64_t **, __int128 *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore8PathImpl10addSegmentENS8_11PathSegmentEEUlOT_E_JZNS9_10addSegmentESA_EUlNS8_12PathDataLineEE_ZNS9_10addSegmentESA_EUlNS8_17PathDataQuadCurveEE_ZNS9_10addSegmentESA_EUlNS8_19PathDataBezierCurveEE_ZNS9_10addSegmentESA_EUlNS8_11PathDataArcEE_EEEEEJNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectESE_SG_SI_SK_NS8_16PathCloseSubpathEEEEEEEDcSC_DpOT0____fmatrix
                                                                   + HIDWORD(v87)))(&v83, &v84);
            v25 = (__int128 *)((char *)v25 + 56);
            v26 -= 56;
          }
          while (v26);
        }
        v30 = *((unsigned int *)a2 + 16);
        if ((_DWORD)v30 != -1)
        {
          if ((_DWORD)v30 == 2)
          {
            v31 = (unsigned int *)*v20;
            *v20 = v23;
            if (v31)
            {
              v32 = v31 + 2;
              do
              {
                v33 = __ldaxr(v32);
                v34 = v33 - 1;
              }
              while (__stlxr(v34, v32));
              if (!v34)
              {
                atomic_store(1u, v31 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
              }
            }
            goto LABEL_51;
          }
          ((void (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v30])(&v84, (char *)a2 + 8);
        }
        *((_QWORD *)a2 + 1) = v23;
        *((_DWORD *)a2 + 16) = 2;
LABEL_51:
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23))
        {
          __break(0xC471u);
          JUMPOUT(0x1943DA210);
        }
        goto LABEL_42;
      }
    }
    v35 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v35 + 8) = 1;
    *(_QWORD *)v35 = off_1E3412578;
    *(_QWORD *)(v35 + 16) = CGPathCreateMutable();
    v36 = *((unsigned int *)a2 + 16);
    if ((_DWORD)v36 != -1)
    {
      if ((_DWORD)v36 == 2)
      {
        v37 = (unsigned int *)*v20;
        *v20 = v35;
        if (v37)
        {
          v38 = v37 + 2;
          do
          {
            v39 = __ldaxr(v38);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, v38));
          if (!v40)
          {
            atomic_store(1u, v37 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 8))(v37);
          }
        }
        goto LABEL_47;
      }
      ((void (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v36])(&v84, (char *)a2 + 8);
    }
    *((_QWORD *)a2 + 1) = v35;
    *((_DWORD *)a2 + 16) = 2;
LABEL_47:
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35))
    {
      __break(0xC471u);
      JUMPOUT(0x1943DA1B8);
    }
    goto LABEL_42;
  }
  if (*((_DWORD *)this + 8))
    goto LABEL_5;
  v50 = (WebCore::Gradient *)*((_QWORD *)this + 3);
  if (!v50)
    goto LABEL_5;
  if (WebCore::GraphicsContext::hasDropShadow(this, a2, a3, a4, a5))
  {
    WebCore::Path::fastBoundingRect(a2);
    v58 = v57;
    v60 = v59;
    v62 = v61;
    v64 = v63;
    (*(void (**)(__int128 *__return_ptr, WebCore::GraphicsContextCG *, uint64_t))(*(_QWORD *)this + 672))(&v84, this, 1);
    v78 = __PAIR64__(LODWORD(v64), LODWORD(v62));
    v65 = WebCore::AffineTransform::mapSize((WebCore::AffineTransform *)&v84, (const WebCore::FloatSize *)&v78);
    v67 = v66;
    v89.width = v65;
    v89.height = v66;
    v68 = CGLayerCreateWithContext(v8, v89, 0);
    Context = CGLayerGetContext(v68);
    CGContextScaleCTM(Context, (float)(v65 / v62), (float)(v67 / v64));
    CGContextTranslateCTM(Context, (float)-v58, (float)-v60);
    CGContextBeginPath(Context);
    WebCore::addToCGContextPath(Context, a2, v70);
    v71 = *((_DWORD *)this + 22);
    v72 = v71 == 1;
    if (v71 == 1)
      v73 = (char *)this + 24;
    else
      v73 = 0;
    v74 = v73 + 16;
    if (!v72)
      v74 = &WebCore::identity;
    v75 = v74[1];
    *(_OWORD *)&transform.a = *v74;
    *(_OWORD *)&transform.c = v75;
    *(_OWORD *)&transform.tx = v74[2];
    CGContextConcatCTM(Context, &transform);
    if (*((_BYTE *)this + 192))
      CGContextEOClip(Context);
    else
      CGContextClip(Context);
    WebCore::Gradient::paint(v50, Context);
    v90.origin.x = v58;
    v90.origin.y = v60;
    v90.size.width = v62;
    v90.size.height = v64;
    CGContextDrawLayerInRect(v8, v90, v68);
    if (v68)
      CFRelease(v68);
  }
  else
  {
    CGContextBeginPath(v8);
    WebCore::addToCGContextPath(v8, a2, v51);
    CGContextSaveGState(v8);
    v52 = *((_DWORD *)this + 22);
    v53 = v52 == 1;
    if (v52 == 1)
      v54 = (char *)this + 24;
    else
      v54 = 0;
    v55 = v54 + 16;
    if (!v53)
      v55 = &WebCore::identity;
    v56 = v55[1];
    *(_OWORD *)&v76.a = *v55;
    *(_OWORD *)&v76.c = v56;
    *(_OWORD *)&v76.tx = v55[2];
    CGContextConcatCTM(v8, &v76);
    if (*((_BYTE *)this + 192))
      CGContextEOClip(v8);
    else
      CGContextClip(v8);
    WebCore::Gradient::paint(v50, this);
    CGContextRestoreGState(v8);
  }
}

uint64_t WebCore::Path::platformPath(WebCore::Path *this)
{
  unsigned int *v1;
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int **v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int **v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int **v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (!this)
    goto LABEL_26;
  v3 = *((_DWORD *)this + 16);
  if (v3 == 1)
  {
    v4 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v4 + 8) = 1;
    *(_QWORD *)v4 = off_1E3412578;
    *(_QWORD *)(v4 + 16) = CGPathCreateMutable();
    v49 = *((_QWORD *)this + 7);
    v5 = *(_OWORD *)((char *)this + 40);
    v47 = *(_OWORD *)((char *)this + 24);
    v48 = v5;
    v46 = *(_OWORD *)((char *)this + 8);
    v40 = v4;
    v41 = v4;
    v42 = v4;
    v43 = v4;
    v44 = v4;
    if (HIDWORD(v49) != -1)
    {
      v45 = &v40;
      ((void (*)(uint64_t **, __int128 *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore8PathImpl10addSegmentENS8_11PathSegmentEEUlOT_E_JZNS9_10addSegmentESA_EUlNS8_12PathDataLineEE_ZNS9_10addSegmentESA_EUlNS8_17PathDataQuadCurveEE_ZNS9_10addSegmentESA_EUlNS8_19PathDataBezierCurveEE_ZNS9_10addSegmentESA_EUlNS8_11PathDataArcEE_EEEEEJNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectESE_SG_SI_SK_NS8_16PathCloseSubpathEEEEEEEDcSC_DpOT0____fmatrix
                                                    + HIDWORD(v49)))(&v45, &v46);
      v6 = *((unsigned int *)this + 16);
      if ((_DWORD)v6 != -1)
      {
        v7 = (unsigned int **)((char *)this + 8);
        if ((_DWORD)v6 == 2)
        {
          v8 = *v7;
          *v7 = (unsigned int *)v4;
          if (v8)
          {
            v9 = v8 + 2;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              atomic_store(1u, v8 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
            }
          }
LABEL_39:
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4))
            goto LABEL_59;
          return *(_QWORD *)(v4 + 16);
        }
        ((void (*)(__int128 *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v6])(&v46, v7);
      }
      *((_QWORD *)this + 1) = v4;
      *((_DWORD *)this + 16) = 2;
      goto LABEL_39;
    }
    goto LABEL_57;
  }
  if (v3 != 2)
    goto LABEL_26;
  v12 = (unsigned int **)((char *)this + 8);
  v13 = atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 8));
  v1 = (unsigned int *)*((_QWORD *)this + 1);
  if (v13 != 1)
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD))(*(_QWORD *)v1 + 24))(&v46, *((_QWORD *)this + 1));
    v31 = (unsigned int *)v46;
    *(_QWORD *)&v46 = 0;
    v32 = *v12;
    *v12 = v31;
    if (v32)
    {
      v33 = v32 + 2;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        atomic_store(1u, v32 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
      }
      v36 = (unsigned int *)v46;
      *(_QWORD *)&v46 = 0;
      if (v36)
      {
        v37 = v36 + 2;
        do
        {
          v38 = __ldaxr(v37);
          v39 = v38 - 1;
        }
        while (__stlxr(v39, v37));
        if (!v39)
        {
          atomic_store(1u, v36 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 8))(v36);
        }
      }
    }
    v1 = *v12;
  }
  if (!v1)
  {
LABEL_26:
    v4 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v4 + 8) = 1;
    *(_QWORD *)v4 = off_1E3412578;
    *(_QWORD *)(v4 + 16) = CGPathCreateMutable();
    v24 = *((unsigned int *)this + 16);
    if ((_DWORD)v24 != -1)
    {
      v25 = (unsigned int **)((char *)this + 8);
      if ((_DWORD)v24 == 2)
      {
        v26 = *v25;
        *v25 = (unsigned int *)v4;
        if (v26)
        {
          v27 = v26 + 2;
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
          {
            atomic_store(1u, v26 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
          }
        }
        goto LABEL_35;
      }
      ((void (*)(__int128 *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v24])(&v46, v25);
    }
    *((_QWORD *)this + 1) = v4;
    *((_DWORD *)this + 16) = 2;
LABEL_35:
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4))
    {
      __break(0xC471u);
      JUMPOUT(0x1943DA994);
    }
    return *(_QWORD *)(v4 + 16);
  }
  if (!(*(unsigned int (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1))
    goto LABEL_58;
  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E3412578;
  *(_QWORD *)(v4 + 16) = CGPathCreateMutable();
  v14 = v1[7];
  if (!(_DWORD)v14)
  {
LABEL_19:
    v19 = *((unsigned int *)this + 16);
    if ((_DWORD)v19 != -1)
    {
      if ((_DWORD)v19 == 2)
      {
        v20 = *v12;
        *v12 = (unsigned int *)v4;
        if (v20)
        {
          v21 = v20 + 2;
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            atomic_store(1u, v20 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 8))(v20);
          }
        }
        goto LABEL_45;
      }
      ((void (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v19])(&v46, (char *)this + 8);
    }
    *((_QWORD *)this + 1) = v4;
    *((_DWORD *)this + 16) = 2;
LABEL_45:
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4))
    {
      __break(0xC471u);
      JUMPOUT(0x1943DA91CLL);
    }
    return *(_QWORD *)(v4 + 16);
  }
  v1 = (unsigned int *)*((_QWORD *)v1 + 2);
  v15 = 56 * v14;
  while (1)
  {
    v16 = *(_OWORD *)v1;
    v17 = *((_OWORD *)v1 + 1);
    v18 = *((_OWORD *)v1 + 2);
    v49 = *((_QWORD *)v1 + 6);
    v47 = v17;
    v48 = v18;
    v46 = v16;
    v40 = v4;
    v41 = v4;
    v42 = v4;
    v43 = v4;
    v44 = v4;
    if (HIDWORD(v49) == -1)
      break;
    v45 = &v40;
    ((void (*)(uint64_t **, __int128 *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore8PathImpl10addSegmentENS8_11PathSegmentEEUlOT_E_JZNS9_10addSegmentESA_EUlNS8_12PathDataLineEE_ZNS9_10addSegmentESA_EUlNS8_17PathDataQuadCurveEE_ZNS9_10addSegmentESA_EUlNS8_19PathDataBezierCurveEE_ZNS9_10addSegmentESA_EUlNS8_11PathDataArcEE_EEEEEJNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectESE_SG_SI_SK_NS8_16PathCloseSubpathEEEEEEEDcSC_DpOT0____fmatrix
                                                  + HIDWORD(v49)))(&v45, &v46);
    v1 += 14;
    v15 -= 56;
    if (!v15)
      goto LABEL_19;
  }
LABEL_57:
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_58:
  v4 = (uint64_t)v1;
  if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1))
  {
LABEL_59:
    __break(0xC471u);
    JUMPOUT(0x1943DA894);
  }
  return *(_QWORD *)(v4 + 16);
}

uint64_t WebCore::PathImpl::isPathStream(WebCore::PathImpl *this)
{
  return 0;
}

void WebCore::PathStream::~PathStream(WebCore::PathStream *this, void *a2)
{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  WTF::fastFree(this, a2);
}

{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
}

uint64_t WebCore::Path::segments@<X0>(WebCore::Path *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t (***v15)();
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t (**v23)();
  uint64_t v24;
  uint64_t (***v25)();

  if (!this
    || *((_DWORD *)this + 16) != 2
    || (v4 = *((_QWORD *)this + 1)) == 0
    || ((result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 16))(*((_QWORD *)this + 1)), !(_DWORD)result)
      ? (v6 = 0)
      : (v6 = v4),
        !v6))
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v15 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
    *v15 = off_1E340EBF8;
    v15[1] = (uint64_t (**)())a2;
    v25 = v15;
    if (this)
    {
      v16 = *((_DWORD *)this + 16);
      if (v16 == 2)
      {
        v24 = *((_QWORD *)this + 1);
        if (v24)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t (****)()))(*(_QWORD *)v24 + 128))(v24, &v25);
          v15 = v25;
          v25 = 0;
          if (!v15)
            return result;
          goto LABEL_22;
        }
LABEL_21:
        v25 = 0;
LABEL_22:
        v23 = *v15;
        return ((uint64_t (*)(uint64_t (***)()))v23[1])(v15);
      }
      if (v16 == 1)
      {
        v17 = WTF::Vector<WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, 1uLL, (unint64_t)this + 8);
        v18 = *(_DWORD *)(a2 + 12);
        v19 = *(_QWORD *)a2 + 56 * v18;
        v21 = *(_OWORD *)(v17 + 16);
        v20 = *(_OWORD *)(v17 + 32);
        v22 = *(_OWORD *)v17;
        *(_QWORD *)(v19 + 48) = *(_QWORD *)(v17 + 48);
        *(_OWORD *)(v19 + 16) = v21;
        *(_OWORD *)(v19 + 32) = v20;
        *(_OWORD *)v19 = v22;
        *(_DWORD *)(a2 + 12) = v18 + 1;
        goto LABEL_21;
      }
    }
    v25 = 0;
    v23 = off_1E340EBF8;
    return ((uint64_t (*)(uint64_t (***)()))v23[1])(v15);
  }
  v7 = *(unsigned int *)(v6 + 28);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v7;
  if ((_DWORD)v7)
  {
    if (v7 >= 0x4924925)
    {
      __break(0xC471u);
    }
    else
    {
      v8 = 56 * v7;
      result = WTF::fastMalloc((WTF *)(56 * v7));
      *(_DWORD *)(a2 + 8) = v8 / 0x38;
      *(_QWORD *)a2 = result;
      v9 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v9)
      {
        v10 = *(__int128 **)(v6 + 16);
        v11 = 56 * v9;
        do
        {
          v12 = *v10;
          v13 = v10[1];
          v14 = v10[2];
          *(_QWORD *)(result + 48) = *((_QWORD *)v10 + 6);
          *(_OWORD *)(result + 16) = v13;
          *(_OWORD *)(result + 32) = v14;
          *(_OWORD *)result = v12;
          result += 56;
          v10 = (__int128 *)((char *)v10 + 56);
          v11 -= 56;
        }
        while (v11);
      }
    }
  }
  return result;
}

uint64_t WebCore::PathStream::isPathStream(WebCore::PathStream *this)
{
  return 1;
}

BOOL WebCore::PathStream::isEmpty(WebCore::PathStream *this)
{
  return *((_DWORD *)this + 7) == 0;
}

uint64_t WebCore::PathStream::copy@<X0>(WebCore::PathStream *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  result = WTF::fastMalloc((WTF *)0x20);
  v5 = result;
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E340EC98;
  v6 = *((unsigned int *)this + 7);
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 28) = v6;
  if (!(_DWORD)v6)
  {
LABEL_6:
    *a2 = v5;
    return result;
  }
  if (v6 < 0x4924925)
  {
    v7 = 56 * v6;
    result = WTF::fastMalloc((WTF *)(56 * v6));
    *(_DWORD *)(v5 + 24) = v7 / 0x38;
    *(_QWORD *)(v5 + 16) = result;
    v8 = *((unsigned int *)this + 7);
    if ((_DWORD)v8)
    {
      v9 = (__int128 *)*((_QWORD *)this + 2);
      v10 = 56 * v8;
      do
      {
        v11 = *v9;
        v12 = v9[1];
        v13 = v9[2];
        *(_QWORD *)(result + 48) = *((_QWORD *)v9 + 6);
        *(_OWORD *)(result + 16) = v12;
        *(_OWORD *)(result + 32) = v13;
        *(_OWORD *)result = v11;
        result += 56;
        v9 = (__int128 *)((char *)v9 + 56);
        v10 -= 56;
      }
      while (v10);
    }
    goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WebCore::Document::takeAnyMediaCanStartListener(WebCore::Document *this)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v4[5];

  v1 = (uint64_t *)((char *)this + 1960);
  if (WTF::WeakHashSet<WebCore::MediaCanStartListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)this + 245))
    return 0;
  WTF::WeakHashSet<WebCore::MediaCanStartListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v4, v1);
  v2 = *(_QWORD **)(*v4[1] + 8);
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)v1, v2);
  return v2;
}

BOOL WTF::WeakHashSet<WebCore::MediaCanStartListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(uint64_t *a1)
{
  uint64_t *v3[5];
  uint64_t *v4[5];

  if (!*a1 || !*(_DWORD *)(*a1 - 12))
    return 1;
  WTF::WeakHashSet<WebCore::MediaCanStartListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v4, a1);
  WTF::WeakHashSet<WebCore::MediaCanStartListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v3, a1);
  return v4[1] == v3[1];
}

CGColorRef WebCore::createCGColor(WebCore *this, const WebCore::Color *a2)
{
  CGColorRef result;
  _OWORD v4[2];
  CGColorSpaceRef space[3];
  _BYTE v6[4];
  float v7;
  float v8;
  float v9;
  float v10;

  WebCore::Color::colorSpaceAndResolvedColorComponents(a2, (uint64_t)v6);
  WebCore::convertToCGCompatibleComponents((WebCore *)space, v6[0], v7, v8, v9, v10);
  v4[0] = vcvtq_f64_f32((float32x2_t)space[1]);
  v4[1] = vcvtq_f64_f32((float32x2_t)space[2]);
  result = CGColorCreate(space[0], (const CGFloat *)v4);
  *(_QWORD *)this = result;
  return result;
}

WebCore *WebCore::convertToCGCompatibleComponents(WebCore *result, int a2, float a3, float a4, float a5, float a6)
{
  float v6;
  float v7;
  WebCore *v9;
  unint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  unsigned int v27;
  unsigned int v28;
  float v29;
  float v30;
  unsigned int v31;
  unsigned int v32;
  __int32 v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  int8x8_t v50;
  float v51;
  float v52;
  float v53;
  float32x2_t v54;
  int8x8_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float32x2_t v103;
  float v104;
  _DWORD v105[4];
  int8x16_t *v106;
  float v107;
  float v108;
  int8x16_t v109;

  v6 = a6;
  v7 = a5;
  v9 = result;
  if (a2 != 17)
  {
    v99 = a4;
    v102 = a3;
    switch(a2)
    {
      case 0:
        result = (WebCore *)WebCore::adobeRGB1998ColorSpaceRef(result);
        goto LABEL_21;
      case 1:
        result = (WebCore *)WebCore::displayP3ColorSpaceRef(result);
        goto LABEL_21;
      case 2:
        result = (WebCore *)WebCore::extendedAdobeRGB1998ColorSpaceRef(result);
        goto LABEL_21;
      case 3:
        result = (WebCore *)WebCore::extendedDisplayP3ColorSpaceRef(result);
        goto LABEL_21;
      case 4:
        result = (WebCore *)WebCore::extendedLinearSRGBColorSpaceRef(result);
        goto LABEL_21;
      case 5:
        result = (WebCore *)WebCore::extendedROMMRGBColorSpaceRef(result);
        goto LABEL_21;
      case 6:
        result = (WebCore *)WebCore::extendedITUR_2020ColorSpaceRef(result);
        goto LABEL_21;
      case 7:
        result = (WebCore *)WebCore::extendedSRGBColorSpaceRef(result);
        goto LABEL_21;
      case 8:
LABEL_42:
        v109.i64[0] = __PAIR64__(LODWORD(v99), LODWORD(v102));
        v109.i64[1] = __PAIR64__(LODWORD(v6), LODWORD(v7));
        v23 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)v109.i32);
        goto LABEL_48;
      case 9:
LABEL_43:
        v109.i64[0] = __PAIR64__(LODWORD(v99), LODWORD(v102));
        v109.i64[1] = __PAIR64__(LODWORD(v6), LODWORD(v7));
        v23 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v109);
        goto LABEL_48;
      case 10:
LABEL_44:
        *(float *)v105 = v102;
        *(float *)&v105[1] = v99;
        *(float *)&v105[2] = v7;
        *(float *)&v105[3] = v6;
        WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)v105);
        v106 = (int8x16_t *)__PAIR64__(v28, v27);
        v107 = v29;
        v108 = v30;
        goto LABEL_46;
      case 11:
LABEL_45:
        v106 = (int8x16_t *)__PAIR64__(LODWORD(v99), LODWORD(v102));
        v107 = v7;
        v108 = v6;
LABEL_46:
        v109.i32[0] = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v106);
        *(uint64_t *)((char *)v109.i64 + 4) = __PAIR64__(v32, v31);
        v109.i32[3] = v33;
        goto LABEL_47;
      case 12:
        result = (WebCore *)WebCore::linearSRGBColorSpaceRef(result);
        goto LABEL_21;
      case 13:
LABEL_50:
        v106 = (int8x16_t *)__PAIR64__(LODWORD(v99), LODWORD(v102));
        v107 = v7;
        v108 = v6;
        WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v106);
        v109.i64[0] = __PAIR64__(v35, v34);
        v109.i64[1] = __PAIR64__(v37, v36);
        goto LABEL_52;
      case 14:
LABEL_51:
        v109.i64[0] = __PAIR64__(LODWORD(v99), LODWORD(v102));
        v109.i64[1] = __PAIR64__(LODWORD(v6), LODWORD(v7));
LABEL_52:
        WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::OKLab<float>,void>::convert((float *)v109.i32);
        goto LABEL_48;
      case 15:
        result = (WebCore *)WebCore::ROMMRGBColorSpaceRef(result);
        goto LABEL_21;
      case 16:
        result = (WebCore *)WebCore::ITUR_2020ColorSpaceRef(result);
LABEL_21:
        a4 = v99;
        a3 = v102;
        goto LABEL_7;
      case 18:
        v109.i64[0] = __PAIR64__(LODWORD(a4), LODWORD(a3));
        v109.i64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
LABEL_47:
        WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v109);
LABEL_48:
        v102 = v23;
        v99 = v24;
        v7 = v25;
        v6 = v26;
        goto LABEL_49;
      case 19:
        v11 = (float)((float)((float)(a3 * 3.241) + 0.0) + (float)(a4 * -1.5374)) + (float)(a5 * -0.49861);
        v12 = (float)((float)((float)(a3 * -0.96924) + 0.0) + (float)(a4 * 1.876)) + (float)(a5 * 0.041555);
        v13 = (float)((float)((float)(a3 * 0.05563) + 0.0) + (float)(a4 * -0.20398)) + (float)(a5 * 1.057);
        v14 = fabsf(v11);
        if (v14 >= 0.0031308)
          v15 = (float)(powf(v14, 0.41667) * 1.055) + -0.055;
        else
          v15 = v14 * 12.92;
        v16 = fabsf(v12);
        if (v16 >= 0.0031308)
          v17 = (float)(powf(v16, 0.41667) * 1.055) + -0.055;
        else
          v17 = v16 * 12.92;
        v18 = fabsf(v13);
        if (v18 >= 0.0031308)
          v19 = (float)(powf(v18, 0.41667) * 1.055) + -0.055;
        else
          v19 = v18 * 12.92;
        v20 = -v17;
        if (v12 >= 0.0)
          v20 = v17;
        v21 = -v15;
        if (v11 >= 0.0)
          v21 = v15;
        v22 = LODWORD(v13);
LABEL_37:
        if (v22 < 0)
          v19 = -v19;
        v102 = v21;
LABEL_40:
        v99 = v20;
        v7 = v19;
        goto LABEL_49;
      default:
        goto LABEL_49;
    }
  }
  {
    WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::colorSpace = 0;
  }
  v10 = atomic_load(&WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::onceFlag);
  if (v10 != -1)
  {
    v109.i64[0] = (uint64_t)v105;
    v106 = &v109;
    v98 = a4;
    v101 = a3;
    std::__call_once(&WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::onceFlag, &v106, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CGColorSpace * WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::{lambda(void)#1} &&>>);
    a4 = v98;
    a3 = v101;
  }
  result = (WebCore *)WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::colorSpace;
LABEL_7:
  if (!result)
  {
    v99 = a4;
    v102 = a3;
    switch(a2)
    {
      case 0:
        v103 = (float32x2_t)__PAIR64__(LODWORD(a4), LODWORD(a3));
        v50 = vorr_s8((int8x8_t)vcltz_f32(v103), (int8x8_t)vcgez_f32(v103));
        v51 = powf(fabsf(v7), 2.1992);
        if (v7 < 0.0)
          v51 = -v51;
        if (v51 > 0.0)
          v52 = v51;
        else
          v52 = 0.0;
        if (v51 >= 1.0)
          v53 = 1.0;
        else
          v53 = v52;
        v54 = (float32x2_t)vand_s8((int8x8_t)v103, v50);
        v55 = (int8x8_t)vcltz_s32((int32x2_t)v54);
        v56 = vabs_f32(v54);
        v100 = v56.f32[0];
        v104 = powf(v56.f32[1], 2.1992);
        v57.f32[0] = powf(v100, 2.1992);
        v57.f32[1] = v104;
        v58 = (float32x2_t)vbsl_s8(v55, (int8x8_t)vneg_f32(v57), (int8x8_t)v57);
        __asm { FMOV            V1.2S, #1.0 }
        *(int8x8_t *)v109.i8 = vbsl_s8((int8x8_t)vcge_f32(v58, _D1), (int8x8_t)_D1, vbic_s8((int8x8_t)v58, (int8x8_t)vclez_f32(v58)));
        v109.i64[1] = __PAIR64__(LODWORD(v6), LODWORD(v53));
        WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v109);
        goto LABEL_157;
      case 1:
        v109.i64[0] = __PAIR64__(LODWORD(a4), LODWORD(a3));
        v109.i64[1] = __PAIR64__(LODWORD(v6), LODWORD(v7));
        WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((uint64_t)&v109);
        goto LABEL_48;
      case 2:
        v38 = powf(fabsf(a3), 2.1992);
        if (v102 >= 0.0)
          v39 = v38;
        else
          v39 = -v38;
        v40 = powf(fabsf(v99), 2.1992);
        if (v99 >= 0.0)
          v41 = v40;
        else
          v41 = -v40;
        v42 = powf(fabsf(v7), 2.1992);
        v109.i64[0] = __PAIR64__(LODWORD(v41), LODWORD(v39));
        if (v7 < 0.0)
          v42 = -v42;
        v109.i64[1] = __PAIR64__(LODWORD(v6), LODWORD(v42));
        WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v109);
        goto LABEL_157;
      case 3:
        v64 = v7;
        v65 = fabsf(a3);
        if (v65 <= 0.04045)
          v66 = v65 / 12.92;
        else
          v66 = powf((float)(v65 + 0.055) / 1.055, 2.4);
        v77 = fabsf(v99);
        if (v77 <= 0.04045)
          v78 = v77 / 12.92;
        else
          v78 = powf((float)(v77 + 0.055) / 1.055, 2.4);
        v85 = fabsf(v64);
        if (v85 <= 0.04045)
          v86 = v85 / 12.92;
        else
          v86 = powf((float)(v85 + 0.055) / 1.055, 2.4);
        v90 = -v78;
        if (v99 >= 0.0)
          v90 = v78;
        v91 = -v66;
        if (v102 >= 0.0)
          v91 = v66;
        v109.i64[0] = __PAIR64__(LODWORD(v90), LODWORD(v91));
        if (v64 < 0.0)
          v86 = -v86;
        v109.i64[1] = __PAIR64__(LODWORD(v6), LODWORD(v86));
        WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(&v109);
LABEL_157:
        v102 = v43;
        v99 = v44;
        v7 = v45;
        v6 = v46;
        break;
      case 4:
        v67 = fabsf(a3);
        if (v67 >= 0.0031308)
          v68 = (float)(powf(v67, 0.41667) * 1.055) + -0.055;
        else
          v68 = v67 * 12.92;
        v79 = fabsf(v99);
        if (v79 >= 0.0031308)
          v80 = (float)(powf(v79, 0.41667) * 1.055) + -0.055;
        else
          v80 = v79 * 12.92;
        v87 = fabsf(v7);
        if (v87 >= 0.0031308)
          v19 = (float)(powf(v87, 0.41667) * 1.055) + -0.055;
        else
          v19 = v87 * 12.92;
        v20 = -v80;
        if (v99 >= 0.0)
          v20 = v80;
        v21 = -v68;
        if (v102 >= 0.0)
          v21 = v68;
        v22 = LODWORD(v7);
        goto LABEL_37;
      case 5:
        if (fabsf(a3) <= 0.03125)
        {
          v49 = a3 * 0.0625;
        }
        else
        {
          v69 = powf(a3, 1.8);
          if (v102 >= 0.0)
            v49 = v69;
          else
            v49 = -v69;
        }
        if (fabsf(v99) <= 0.03125)
        {
          v73 = v99 * 0.0625;
        }
        else
        {
          v81 = powf(v99, 1.8);
          if (v99 >= 0.0)
            v73 = v81;
          else
            v73 = -v81;
        }
        if (fabsf(v7) <= 0.03125)
        {
          v76 = v7 * 0.0625;
        }
        else
        {
          v76 = powf(v7, 1.8);
          if (v7 < 0.0)
            v76 = -v76;
        }
        goto LABEL_165;
      case 6:
        v109.i64[0] = __PAIR64__(LODWORD(a4), LODWORD(a3));
        v109.i64[1] = __PAIR64__(LODWORD(v6), LODWORD(v7));
        WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v109);
        goto LABEL_48;
      case 8:
        goto LABEL_42;
      case 9:
        goto LABEL_43;
      case 10:
        goto LABEL_44;
      case 11:
        goto LABEL_45;
      case 12:
        v70 = 0.0;
        if (a3 >= 0.0031308)
        {
          v82 = (float)(powf(a3, 0.41667) * 1.055) + -0.055;
          if (v82 > 0.0)
            v83 = v82;
          else
            v83 = 0.0;
          if (v82 >= 1.0)
            v70 = 1.0;
          else
            v70 = v83;
        }
        else if ((float)(a3 * 12.92) >= 0.0)
        {
          v70 = a3 * 12.92;
        }
        if (v99 >= 0.0031308)
        {
          v88 = (float)(powf(v99, 0.41667) * 1.055) + -0.055;
          v89 = 0.0;
          if (v88 > 0.0)
            v89 = v88;
          if (v88 >= 1.0)
            v84 = 1.0;
          else
            v84 = v89;
        }
        else if ((float)(v99 * 12.92) >= 0.0)
        {
          v84 = v99 * 12.92;
        }
        else
        {
          v84 = 0.0;
        }
        if (v7 >= 0.0031308)
        {
          v96 = (float)(powf(v7, 0.41667) * 1.055) + -0.055;
          v97 = 0.0;
          if (v96 > 0.0)
            v97 = v96;
          if (v96 >= 1.0)
            v19 = 1.0;
          else
            v19 = v97;
        }
        else
        {
          v19 = v7 * 12.92;
          if ((float)(v7 * 12.92) < 0.0)
            v19 = 0.0;
        }
        v102 = v70;
        v20 = v84;
        goto LABEL_40;
      case 13:
        goto LABEL_50;
      case 14:
        goto LABEL_51;
      case 15:
        if (a3 <= 0.03125)
        {
          v49 = a3 * 0.0625;
        }
        else
        {
          v47 = powf(a3, 1.8);
          if (v47 > 0.0)
            v48 = v47;
          else
            v48 = 0.0;
          if (v47 >= 1.0)
            v49 = 1.0;
          else
            v49 = v48;
        }
        if (v99 <= 0.03125)
        {
          v73 = v99 * 0.0625;
        }
        else
        {
          v71 = powf(v99, 1.8);
          v72 = 0.0;
          if (v71 > 0.0)
            v72 = v71;
          if (v71 >= 1.0)
            v73 = 1.0;
          else
            v73 = v72;
        }
        if (v7 <= 0.03125)
        {
          v76 = v7 * 0.0625;
        }
        else
        {
          v74 = powf(v7, 1.8);
          v75 = 0.0;
          if (v74 > 0.0)
            v75 = v74;
          if (v74 >= 1.0)
            v76 = 1.0;
          else
            v76 = v75;
        }
LABEL_165:
        v109.i64[0] = __PAIR64__(LODWORD(v73), LODWORD(v49));
        v109.i64[1] = __PAIR64__(LODWORD(v6), LODWORD(v76));
        WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)&v109);
        v102 = v92;
        v99 = v93;
        v7 = v94;
        v6 = v95;
        break;
      case 16:
        v109.i64[0] = __PAIR64__(LODWORD(a4), LODWORD(a3));
        v109.i64[1] = __PAIR64__(LODWORD(v6), LODWORD(v7));
        WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v109);
        goto LABEL_48;
      default:
        break;
    }
LABEL_49:
    result = (WebCore *)WebCore::extendedSRGBColorSpaceRef(result);
    a4 = v99;
    a3 = v102;
  }
  *(_QWORD *)v9 = result;
  *((float *)v9 + 2) = a3;
  *((float *)v9 + 3) = a4;
  *((float *)v9 + 4) = v7;
  *((float *)v9 + 5) = v6;
  return result;
}

void WebCore::Color::colorSpaceAndResolvedColorComponents(WebCore::Color *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  unsigned int v3;
  float v4;
  float v5;
  float v6;
  float v7;
  char v8;
  float v9;
  unint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0x8000000000000) != 0)
  {
    v10 = HIBYTE(v2);
    v11 = a2;
    v4 = WebCore::XYZA<float,(WebCore::WhitePoint)0>::resolved((v2 & 0xFFFFFFFFFFFFLL) + 4);
    v8 = v10;
    a2 = v11;
  }
  else
  {
    v3 = bswap32(v2);
    v4 = (float)v3 / 255.0;
    v5 = (float)BYTE1(v3) / 255.0;
    v6 = (float)BYTE2(v3) / 255.0;
    v7 = (float)HIBYTE(v3);
    v8 = 17;
    v9 = v7 / 255.0;
  }
  *(_BYTE *)a2 = v8;
  *(float *)(a2 + 4) = v4;
  *(float *)(a2 + 8) = v5;
  *(float *)(a2 + 12) = v6;
  *(float *)(a2 + 16) = v9;
}

uint64_t WebCore::jsDocument_hidden(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(v2 + 528);
  if (v3
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (v5 = *(_QWORD *)(v4 + 24)) != 0
    && (v6 = *(_QWORD *)(v5 + 8)) != 0
    && !*(_BYTE *)(v2 + 3437)
    && (*(_WORD *)(v6 + 658) & 4) != 0)
  {
    return 6;
  }
  else
  {
    return 7;
  }
}

BOOL WebCore::Document::hidden(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 66);
  return !v1
      || (v2 = *(_QWORD *)(v1 + 8)) == 0
      || (v3 = *(_QWORD *)(v2 + 24)) == 0
      || (v4 = *(_QWORD *)(v3 + 8)) == 0
      || *((_BYTE *)this + 3437)
      || (*(_WORD *)(v4 + 658) & 4) == 0;
}

double WebCore::PlatformCALayer::currentTimeToMediaTime(double a1)
{
  double v2;
  WTF::MonotonicTime *v3;
  double v4;

  v2 = CACurrentMediaTime();
  WTF::MonotonicTime::now(v3);
  return v2 + a1 - v4;
}

uint64_t WebCore::PlatformMediaSessionManager::sharedManagerIfExists(WebCore::PlatformMediaSessionManager *this)
{
  uint64_t result;

    return WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
  result = 0;
  WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = 0;
  return result;
}

WTF *WebCore::BaselineAlignmentState::updateSharedGroup(unint64_t a1, _DWORD *a2, int a3, int a4)
{
  unint64_t CompatibleSharedGroup;
  WTF *result;
  int v8;
  _BYTE v9[24];

  CompatibleSharedGroup = WebCore::BaselineAlignmentState::findCompatibleSharedGroup(a1, a2, a3);
  result = WTF::WeakHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBox>(CompatibleSharedGroup + 8, a2, (uint64_t)v9);
  if (v9[16])
  {
    v8 = *(_DWORD *)(CompatibleSharedGroup + 4);
    if (v8 <= a4)
      v8 = a4;
    *(_DWORD *)(CompatibleSharedGroup + 4) = v8;
  }
  return result;
}

unint64_t WebCore::BaselineAlignmentState::findCompatibleSharedGroup(unint64_t result, _DWORD *a2, int a3)
{
  _DWORD *v4;
  unsigned int v5;
  unsigned __int8 v6;
  unsigned __int8 *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  WTF **v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  _BYTE v20[4];
  __int128 v21;
  int v22;

  v4 = (_DWORD *)result;
  v5 = (unsigned __int16)a2[31] >> 13;
  if (v5 >= 6)
    v6 = 0;
  else
    v6 = 0x30203020100uLL >> (8 * v5);
  v7 = *(unsigned __int8 **)result;
  v8 = *(unsigned int *)(result + 12);
  if ((_DWORD)v8)
  {
    v17 = 24 * v8;
    v13 = *(unsigned __int8 **)result;
    do
    {
      result = WebCore::BaselineGroup::isCompatible(v13, v6, a3);
      if ((result & 1) != 0)
        return (unint64_t)v13;
      v13 += 24;
      v17 -= 24;
    }
    while (v17);
  }
  v21 = 0uLL;
  v22 = 0;
  v20[0] = v6;
  v20[1] = a3;
  if ((_DWORD)v8 == v4[2])
  {
    result = WTF::Vector<WebCore::BaselineGroup,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v8 + 1, (unint64_t)v20);
    v9 = (_QWORD *)result;
    LODWORD(v8) = v4[3];
    v7 = *(unsigned __int8 **)v4;
  }
  else
  {
    v9 = v20;
  }
  if ((_DWORD)v8)
  {
    v18 = 24 * v8;
    do
    {
      v19 = &v7[v18];
      *(_OWORD *)v19 = *(_OWORD *)&v7[v18 - 24];
      *((_QWORD *)v19 - 2) = 0;
      *((_QWORD *)v19 + 2) = *(_QWORD *)&v7[v18 - 8];
      result = WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>::~KeyValuePair((uint64_t)&v7[v18 - 24], a2);
      v18 -= 24;
    }
    while (v18);
  }
  *(_QWORD *)v7 = *v9;
  *((_QWORD *)v7 + 1) = 0;
  v10 = v9[1];
  v9[1] = 0;
  *((_QWORD *)v7 + 1) = v10;
  *((_QWORD *)v7 + 2) = v9[2];
  v11 = v4[3] + 1;
  v4[3] = v11;
  v12 = *(_QWORD *)((char *)&v21 + 4);
  if (*(_QWORD *)((char *)&v21 + 4))
  {
    v14 = *(unsigned int *)(*(_QWORD *)((char *)&v21 + 4) - 4);
    if ((_DWORD)v14)
    {
      v15 = *(WTF ***)((char *)&v21 + 4);
      do
      {
        v16 = *v15;
        if (*v15 != (WTF *)-1)
        {
          *v15 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 1)
              WTF::fastFree(v16, a2);
            else
              --*(_DWORD *)v16;
          }
        }
        ++v15;
        --v14;
      }
      while (v14);
    }
    result = WTF::fastFree((WTF *)(v12 - 16), a2);
    v11 = v4[3];
  }
  if (v11)
    return *(_QWORD *)v4;
  __break(0xC471u);
  return result;
}

BOOL WebCore::BaselineGroup::isCompatible(unsigned __int8 *a1, int a2, int a3)
{
  int v3;
  int v5;

  v3 = *a1;
  if (v3 != a2)
  {
    if ((a2 - 2) >= 2)
    {
      if (a2 || !*a1)
        return 0;
    }
    else if (*a1)
    {
      goto LABEL_6;
    }
  }
  if (a1[1] == a3)
    return 1;
LABEL_6:
  if (a2 == 2)
  {
    v5 = 3;
  }
  else
  {
    if (a2 != 3)
      return 0;
    v5 = 2;
  }
  if (v3 == v5)
    return a1[1] != a3;
  return 0;
}

uint64_t WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>::~KeyValuePair(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF **v5;
  WTF *v6;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = *(WTF ***)(a1 + 8);
      do
      {
        v6 = *v5;
        if (*v5 != (WTF *)-1)
        {
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
              WTF::fastFree(v6, a2);
            else
              --*(_DWORD *)v6;
          }
        }
        ++v5;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

unint64_t WTF::Vector<WebCore::BaselineGroup,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v7 = a3 - v5;
    WTF::Vector<WebCore::BaselineGroup,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v7;
  }
  else
  {
    WTF::Vector<WebCore::BaselineGroup,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WebCore::ScrollView::~ScrollView(WebCore::ScrollView *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD **v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  *(_QWORD *)this = off_1E3406068;
  *((_QWORD *)this + 8) = &unk_1E3406338;
  v3 = (_DWORD *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 18);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v6)
    {
      v7 = (_DWORD **)*((_QWORD *)this + 18);
      do
      {
        v8 = *v7;
        if (*v7 != (_DWORD *)-1)
        {
          *v7 = 0;
          if (v8)
          {
            if (v8[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
            else
              --v8[2];
          }
        }
        ++v7;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  *((_QWORD *)this + 8) = &unk_1E3406698;
  v9 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 9);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v16 = (unsigned int *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 9) = 0;
  }
  *(_QWORD *)this = off_1E3355608;
  v12 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v12)
    CFRelease(v12);
  v13 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
      WTF::fastFree(v13, a2);
    else
      --*(_DWORD *)v13;
  }
  v14 = *((_QWORD *)this + 2);
  if (v14)
  {
    *(_QWORD *)(v14 + 8) = 0;
    v15 = (WTF *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
        WTF::fastFree(v15, a2);
      else
        --*(_DWORD *)v15;
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

void WebCore::Document::destroyRenderTree(WebCore::Document *this, void *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::Document *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::LocalFrameView *v21;
  WebCore::Style::Update *v22;
  uint64_t v23;
  WebCore::RenderStyle *v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::SVGTextLayoutAttributes **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  int v41;
  int v42;
  _BYTE v44[144];

  ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  v3 = *((_BYTE *)this + 3405);
  *((_BYTE *)this + 3405) = 1;
  v4 = *((_QWORD *)this + 66);
  if (!v4)
    goto LABEL_55;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_55;
  v6 = *(_QWORD *)(v5 + 120);
  if (!v6)
    goto LABEL_55;
  v7 = *(_QWORD *)(v6 + 8);
  for (i = this; v7; v7 = *(_QWORD *)(v11 + 8))
  {
    i = *(WebCore::Document **)(*(_QWORD *)(v7 + 40) + 8);
    v9 = *((_QWORD *)i + 66);
    if (!v9)
      break;
    v10 = *(_QWORD *)(v9 + 8);
    if (!v10)
      break;
    v11 = *(_QWORD *)(v10 + 120);
    if (!v11)
      break;
  }
  if (i == this)
  {
LABEL_55:
    WebCore::Document::clearAXObjectCache(this);
    v4 = *((_QWORD *)this + 66);
  }
  if (v4)
  {
    v12 = *(_QWORD *)(v4 + 8);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 288);
      if (v13)
      {
        v14 = *(_DWORD *)(v13 + 8) + 1;
        *(_DWORD *)(v13 + 8) = v14;
        v15 = *(_QWORD *)(*(_QWORD *)(v13 + 328) + 296);
        if (v15)
        {
          v16 = *(_QWORD *)(v15 + 1944);
          if (v16)
          {
            v17 = *(uint64_t **)(v16 + 400);
            if (v17)
            {
              WebCore::RenderLayerCompositor::setIsInWindow(v17, 0);
              v14 = *(_DWORD *)(v13 + 8);
            }
          }
        }
        v18 = v14 - 1;
        if (v18)
          *(_DWORD *)(v13 + 8) = v18;
        else
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
    }
    v19 = *((_QWORD *)this + 66);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 8);
      if (v20)
      {
        v21 = *(WebCore::LocalFrameView **)(v20 + 288);
        if (v21)
        {
          ++*((_DWORD *)v21 + 2);
          WebCore::LocalFrameView::willDestroyRenderTree(v21);
          if (*((_DWORD *)v21 + 2) == 1)
            (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v21 + 8))(v21);
          else
            --*((_DWORD *)v21 + 2);
        }
      }
    }
  }
  v22 = (WebCore::Style::Update *)*((_QWORD *)this + 195);
  *((_QWORD *)this + 195) = 0;
  if (v22)
  {
    WebCore::Style::Update::~Update(v22, a2);
    if (*(_DWORD *)v23)
    {
      *(_QWORD *)(v23 + 80) = 0;
      *(_OWORD *)(v23 + 48) = 0u;
      *(_OWORD *)(v23 + 64) = 0u;
      *(_OWORD *)(v23 + 16) = 0u;
      *(_OWORD *)(v23 + 32) = 0u;
      *(_OWORD *)v23 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v23, a2);
    }
  }
  v24 = (WebCore::RenderStyle *)*((_QWORD *)this + 244);
  *((_QWORD *)this + 244) = 0;
  if (v24)
  {
    WebCore::RenderStyle::~RenderStyle(v24, a2);
    if (*(_DWORD *)v25)
    {
      *((_OWORD *)v25 + 2) = 0u;
      *((_OWORD *)v25 + 3) = 0u;
      *(_OWORD *)v25 = 0u;
      *((_OWORD *)v25 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v25, v26);
    }
  }
  v27 = *((_QWORD *)this + 159);
  if (v27)
  {
    *(_DWORD *)(v27 + 24) += 2;
    WebCore::RenderTreeUpdater::tearDownRenderers((WebCore *)v27, 0);
    if (*(_DWORD *)(v27 + 24) == 2)
    {
      if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v27);
    }
    else
    {
      *(_DWORD *)(v27 + 24) -= 2;
    }
  }
  *((_QWORD *)this + 8) &= 0xFFE7FFFFFFFFFFFFLL;
  if ((*((_QWORD *)this + 192) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::Document *)((char *)this + 1504));
  *((_BYTE *)this + 3390) = 0;
  WebCore::RenderTreeBuilder::RenderTreeBuilder((WebCore::RenderTreeBuilder *)v44, *((WebCore::RenderView **)this + 243));
  while (1)
  {
    v31 = *((_QWORD *)this + 243);
    v32 = *(unsigned int *)(v31 + 64);
    if (!(v32 | ((unint64_t)*(unsigned __int8 *)(v31 + 68) << 32)))
      break;
    v33 = *(_QWORD *)((v32 | ((unint64_t)*(unsigned __int8 *)(v31 + 68) << 32)) + 8);
    if (!v33)
      break;
    WebCore::RenderTreeBuilder::destroy((uint64_t)v44, v33, 1, v28, v29, v30);
  }
  WebCore::RenderObject::destroy((WebCore::RenderObject *)v31);
  WebCore::RenderTreeBuilder::~RenderTreeBuilder((WebCore::RenderTreeBuilder *)v44, v34);
  *((_QWORD *)this + 243) = 0;
  *((_QWORD *)this + 8) = (unint64_t)*((unsigned __int16 *)this + 35) << 48;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    WebCore::Node::notifyInspectorOfRendererChange(this);
  v37 = (uint64_t *)*((_QWORD *)this + 307);
  *((_QWORD *)this + 307) = 0;
  if (v37)
  {
    if (*v37)
      WTF::HashTable<WebCore::TextAutoSizingKey,WTF::KeyValuePair<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>>>,WebCore::TextAutoSizingHash,WTF::HashMap<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>,WebCore::TextAutoSizingHash,WebCore::TextAutoSizingTraits,WTF::HashTraits<std::unique_ptr<WebCore::TextAutoSizingValue>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::TextAutoSizingTraits>::deallocateTable(*v37, v35);
    WTF::fastFree((WTF *)v37, v35);
  }
  v38 = *((_QWORD *)this + 66);
  if (v38)
  {
    v39 = *(_QWORD *)(v38 + 8);
    if (v39)
    {
      v40 = *(_DWORD **)(v39 + 288);
      if (v40)
      {
        v41 = v40[2];
        v40[2] = v41 + 1;
        if (v41)
          v40[2] = v41;
        else
          (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
      }
    }
  }
  *((_BYTE *)this + 3405) = v3;
  v42 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
    && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove != 0)
  {
    WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)v44, v35);
    v42 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  }
  WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v42 - 1;
}

void WebCore::RenderTreeBuilder::destroy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, WebCore::SVGTextLayoutAttributes **a6)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  WebCore::RenderElement *v39;
  WebCore::RenderListItem *v40;
  char v41;
  __int16 v42;
  _DWORD *v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  BOOL v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  WebCore::AXObjectCache *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t j;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  WTF *v74;
  WebCore::RenderElement **v75;
  uint64_t v76;
  WTF *v77;
  WTF *v78;
  _QWORD *v79;
  int v80;
  uint64_t v81;
  unsigned int v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  int k;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  WebCore::RenderObject *v105;
  int v106;
  uint64_t v107;
  char v108;
  unint64_t v109;
  WebCore::RenderSVGInlineText *v110;
  WebCore::LayoutIntegration::LineLayout *v111;
  uint64_t v112;
  uint64_t v113;
  WTF *v114;
  uint64_t v115;
  _BYTE v116[16];

  if (WebCore::RenderTreeMutationDisallowedScope::s_currentMutationAssertion)
  {
    __break(0xC471u);
    goto LABEL_239;
  }
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8) + 3405)
    && (*(_BYTE *)(a2 + 45) & 2) == 0)
  {
    v31 = *(unsigned int *)(a2 + 64);
    if (v31 | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32))
    {
      v32 = *(_QWORD *)((v31 | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32)) + 8);
      if (v32)
      {
        while (1)
        {
          do
          {
LABEL_43:
            v33 = v32;
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 616))(v32);
            v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 112))(v33);
          }
          while (v32);
          if (v33 == a2)
            break;
          v34 = *(unsigned int *)(v33 + 47);
          if (v34 | ((unint64_t)*(unsigned __int8 *)(v33 + 51) << 32))
          {
            v32 = *(_QWORD *)((v34 | ((unint64_t)*(unsigned __int8 *)(v33 + 51) << 32)) + 8);
            if (v32)
              continue;
          }
          v35 = *(_QWORD *)(v33 + 32);
          if (v35)
          {
            while (1)
            {
              v36 = *(_QWORD *)(v35 + 8);
              if (!v36 || v36 == a2)
                break;
              v38 = *(unsigned int *)(v36 + 47);
              if (v38 | ((unint64_t)*(unsigned __int8 *)(v36 + 51) << 32))
              {
                v32 = *(_QWORD *)((v38 | ((unint64_t)*(unsigned __int8 *)(v36 + 51) << 32)) + 8);
                if (v32)
                  goto LABEL_43;
              }
              v35 = *(_QWORD *)(v36 + 32);
              if (!v35)
                goto LABEL_3;
            }
          }
          break;
        }
      }
    }
  }
LABEL_3:
  v9 = *(_QWORD *)(a2 + 32);
  if (v9)
    v10 = *(_QWORD *)(v9 + 8);
  else
    v10 = 0;
  v11 = *(unsigned __int8 *)(v10 + 46);
  if (v11 == 85)
  {
    WebCore::RenderTreeBuilder::SVG::detach(*(_QWORD *)(a1 + 96), v10, (uint64_t **)a2, 1, a5, a6);
  }
  else
  {
    v12 = *(_BYTE *)(v10 + 52) & 7;
    if (v12 == 1)
    {
      v25 = *(_QWORD *)(a1 + 72);
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 24) + 8) + 40) + 8) + 3405))
      {
        v26 = *(_QWORD *)(v10 + 224);
        if (v26)
        {
          v27 = *(_QWORD *)(v26 + 24);
          if (v27)
          {
            v28 = *(uint64_t ***)(v27 + 8);
            if (v28 && v28 != (uint64_t **)a2)
            {
              v30 = *(_QWORD *)(a1 + 72);
              WebCore::RenderTreeBuilder::MultiColumn::multiColumnRelativeWillBeRemoved(*(_QWORD **)(*(_QWORD *)v25 + 40), v28, a2, a3);
              LODWORD(v25) = v30;
            }
          }
        }
      }
      goto LABEL_63;
    }
    if (*(unsigned __int8 *)(v10 + 46) > 0x46u)
    {
      if ((v11 - 71) <= 0xF && ((1 << (v11 - 71)) & 0xA001) != 0)
      {
        v13 = *(uint64_t **)(a1 + 96);
        v14 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
        if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 40) + 8) + 680) + 680) & 0x800000000000) == 0
          && (*(_BYTE *)(a2 + 45) & 1) == 0
          && (*(_WORD *)(v14 + 28) & 0x20) != 0
          && *(_BYTE *)(a2 + 46) != 72)
        {
          if ((*(_BYTE *)(a2 + 45) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1943DCF4CLL);
          }
          if ((*(_WORD *)(a2 + 69) & 0x1000) != 0)
          {
            v114 = 0;
            v115 = 0;
            WebCore::LegacyRenderSVGResource::markForLayoutAndParentResourceInvalidationIfNeeded(a2, 0, (uint64_t)&v114);
            v74 = v114;
            if (v114)
            {
              v76 = *((unsigned int *)v114 - 1);
              if ((_DWORD)v76)
              {
                v77 = v114;
                do
                {
                  v78 = *(WTF **)v77;
                  if (*(_QWORD *)v77 != -1)
                  {
                    *(_QWORD *)v77 = 0;
                    if (v78)
                    {
                      if (*(_DWORD *)v78 == 1)
                        WTF::fastFree(v78, v73);
                      else
                        --*(_DWORD *)v78;
                    }
                  }
                  v77 = (WTF *)((char *)v77 + 8);
                  --v76;
                }
                while (v76);
              }
              WTF::fastFree((WTF *)((char *)v74 - 16), v73);
            }
            v75 = (WebCore::RenderElement **)WebCore::resourcesCacheFromRenderer(*(WebCore **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40)+ 8), (const WebCore::RenderElement *)v73);
            WebCore::SVGResourcesCache::removeResourcesFromRenderer(v75, (WebCore::RenderElement *)a2);
            v11 = *(unsigned __int8 *)(v10 + 46);
          }
        }
        v15 = v10;
        if (v11 != 85)
        {
          for (i = *(_QWORD *)(v10 + 32); i; i = *(_QWORD *)(v15 + 32))
          {
            v15 = *(_QWORD *)(i + 8);
            if (!v15)
              break;
            if (*(_BYTE *)(v15 + 46) == 85)
              goto LABEL_20;
          }
          v65 = *v13;
          goto LABEL_127;
        }
LABEL_20:
        v114 = (WTF *)v116;
        v115 = 2;
        WebCore::RenderSVGText::subtreeChildWillBeRemoved(v15, (_BYTE *)a2, (uint64_t)&v114, a4, a5, a6);
        v17 = *v13;
        v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 24) + 8) + 40) + 8);
        v19 = *(_QWORD *)(*(_QWORD *)(v18 + 1944) + 248);
        v20 = *(unsigned int *)(v19 + 508);
        if ((_DWORD)v20 && *(_QWORD *)(*(_QWORD *)(v19 + 496) + 8 * v20 - 8))
        {
          __break(0xC471u);
          JUMPOUT(0x1943DCF2CLL);
        }
        if (*(_BYTE *)(v18 + 3405) || *(_BYTE *)(v17 + 122) == 2)
        {
          WebCore::RenderElement::detachRendererInternal((WebCore::RenderObject *)a2, &v113);
        }
        else
        {
          v54 = *(_DWORD *)(a2 + 20);
          if ((v54 & 0x200) != 0)
          {
            v55 = *(unsigned __int8 *)(v17 + 121);
            v56 = v54 & 0x1800000;
            if ((v54 & 0x800) != 0 || v56 == 0x1000000)
            {
              if ((*(_BYTE *)(a2 + 45) & 4) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x1943DD0B4);
              }
              if ((v54 & 0x800) != 0)
              {
                WebCore::RenderBox::removeFloatingAndInvalidateForLayout((WebCore::RenderBox *)a2);
              }
              else if (v56 == 0x1000000)
              {
                {
                  WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
                  unk_1ECE91358 = 0u;
                }
                WebCore::PositionedDescendantsMap::removeDescendant((WebCore::PositionedDescendantsMap *)&WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants, (const WebCore::RenderBox *)a2);
              }
            }
            else if (*(char *)(v10 + 45) < 0)
            {
              v57 = *(_DWORD *)(v10 + 16) + 1;
              *(_DWORD *)(v10 + 16) = v57;
              if ((*(_BYTE *)(a2 + 45) & 4) != 0)
              {
                ++*(_DWORD *)(a2 + 16);
                if ((*(_BYTE *)(a2 + 52) & 7) != 3)
                  WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)(v10 + 208), (void *)a2);
                WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)(v10 + 200), (void *)a2);
                v58 = *(_DWORD *)(a2 + 16);
                if (!v58)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1943DCFECLL);
                }
                *(_DWORD *)(a2 + 16) = v58 - 1;
                v57 = *(_DWORD *)(v10 + 16);
              }
              if (!v57)
              {
                __break(0xC471u);
                JUMPOUT(0x1943DCFCCLL);
              }
              *(_DWORD *)(v10 + 16) = v57 - 1;
            }
            if ((*(_BYTE *)(a2 + 45) & 2) != 0)
            {
              ++*(_DWORD *)(a2 + 16);
              WebCore::RenderText::removeAndDestroyTextBoxes((WebCore::RenderText *)a2);
              v59 = *(_DWORD *)(a2 + 16);
              if (!v59)
              {
                __break(0xC471u);
                JUMPOUT(0x1943DCF8CLL);
              }
              *(_DWORD *)(a2 + 16) = v59 - 1;
            }
            if (*(_BYTE *)(a2 + 46) == 19)
            {
              v60 = *(_DWORD *)(a2 + 16) + 1;
              *(_DWORD *)(a2 + 16) = v60;
              if (!v55)
              {
                WebCore::RenderListItem::updateListMarkerNumbers((WebCore::RenderListItem *)a2);
                v60 = *(_DWORD *)(a2 + 16);
              }
              if (!v60)
              {
                __break(0xC471u);
                JUMPOUT(0x1943DCFACLL);
              }
              *(_DWORD *)(a2 + 16) = v60 - 1;
            }
            v61 = (*(_DWORD *)(a2 + 20) >> 25) & 7;
            if (v61 <= 4 && ((1 << v61) & 0x1A) != 0
              || (v70 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8)
                                  + 1944),
                  (v71 = *(_QWORD *)(v70 + 288)) != 0)
              && *(_QWORD *)(v71 + 8) == a2
              || (v72 = *(_QWORD *)(v70 + 296)) != 0 && *(_QWORD *)(v72 + 8) == a2)
            {
              WebCore::FrameSelection::setNeedsSelectionUpdate(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 24)+ 8)+ 40)+ 8)+ 528)+ 8)+ 296)+ 3064), 0);
            }
          }
          if ((!*(_BYTE *)(v17 + 122) || (v62 = *(_QWORD *)(v17 + 128)) != 0 && (*(_BYTE *)(v62 + 45) & 0x20) != 0)
            && *(unsigned __int8 *)(a2 + 46) - 32 <= 0xFFFFFFFD)
          {
            for (j = *(_QWORD *)(a2 + 32); j; j = *(_QWORD *)(v69 + 32))
            {
              v69 = *(_QWORD *)(j + 8);
              if (!v69 || (*(_BYTE *)(v69 + 22) & 4) == 0)
                break;
              if ((*(_BYTE *)(v69 + 52) & 7) == 1)
              {
                v106 = *(_DWORD *)(v69 + 16) + 1;
                *(_DWORD *)(v69 + 16) = v106;
                if (*(_DWORD *)(v69 + 240) == 1)
                {
                  v107 = *(_QWORD *)(v69 + 232);
                  if (v107)
                  {
                    v111 = *(WebCore::LayoutIntegration::LineLayout **)(v69 + 232);
                    v112 = v69;
                    if (WebCore::LayoutIntegration::shouldInvalidateLineLayoutPathAfterChangeFor((WebCore::RenderObject *)v69, a2, v107, 1)|| (v108 = WebCore::LayoutIntegration::LineLayout::removedFromTree(v111, *(const WebCore::RenderElement **)(*(_QWORD *)(a2 + 32) + 8), (WebCore::RenderObject *)a2), v69 = v112, (v108 & 1) == 0))
                    {
                      WebCore::RenderBlockFlow::invalidateLineLayoutPath(v112, 1);
                      v69 = v112;
                    }
                  }
                  v106 = *(_DWORD *)(v69 + 16);
                }
                if (!v106)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1943DD150);
                }
                *(_DWORD *)(v69 + 16) = v106 - 1;
                break;
              }
            }
          }
          if (!*(_BYTE *)(v17 + 121) && (*(_BYTE *)(a2 + 23) & 0x10) != 0)
          {
            if ((*(_BYTE *)(a2 + 45) & 2) != 0)
            {
              if ((*(_BYTE *)(a2 + 52) & 7) != 1 || (*(_BYTE *)(a2 + 53) & 2) == 0)
                WebCore::RenderObject::setFragmentedFlowStateIncludingDescendants(a2, 0, 1);
            }
            else
            {
              WebCore::RenderElement::removeFromRenderFragmentedFlow((WebCore::RenderElement *)a2);
            }
          }
          (*(void (**)(uint64_t))(*(_QWORD *)a2 + 616))(a2);
          WebCore::RenderElement::detachRendererInternal((WebCore::RenderObject *)a2, &v113);
          if (WebCore::Document::hasEverCreatedAnAXObjectCache)
          {
            v63 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 24) + 8) + 40) + 8));
            if (v63)
              WebCore::AXObjectCache::childrenChanged(v63, (WebCore::RenderObject *)v10, 0);
          }
        }
        if ((*(_DWORD *)(v15 + 20) & 0x204) != 0x200
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 24) + 8) + 40) + 8) + 3405)
          || (v22 = HIDWORD(v115), !HIDWORD(v115)))
        {
LABEL_27:
          v23 = v114;
          if (v116 != (_BYTE *)v114 && v114 != 0)
          {
            v114 = 0;
            LODWORD(v115) = 0;
            WTF::fastFree(v23, v21);
          }
          goto LABEL_65;
        }
        v109 = 0;
        while (v109 < HIDWORD(v115))
        {
          v110 = (WebCore::RenderSVGInlineText *)WebCore::SVGTextLayoutAttributes::context(*((WebCore::SVGTextLayoutAttributes **)v114
                                                                                           + v109));
          WebCore::SVGTextLayoutAttributesBuilder::buildLayoutAttributesForTextRenderer(v15 + 304, v110);
          if (v22 == ++v109)
            goto LABEL_27;
        }
        __break(0xC471u);
LABEL_239:
        JUMPOUT(0x1943DCEBCLL);
      }
LABEL_59:
      if (v12 == 4 && (~*(unsigned __int8 *)(v10 + 53) & 3) == 0 || v11 == 103)
      {
        v64 = *(uint64_t **)(a1 + 96);
        WebCore::SVGResourcesCache::clientWillBeRemovedFromTree(a2, (WebCore::RenderObject *)a2);
        v65 = *v64;
      }
      else
      {
        if ((*(_BYTE *)(v10 + 45) & 0x40) != 0)
        {
          v25 = *(_QWORD *)(a1 + 72);
LABEL_63:
          v39 = (WebCore::RenderElement *)v10;
          v40 = (WebCore::RenderListItem *)a2;
LABEL_64:
          WebCore::RenderTreeBuilder::Block::detach(&v113, v25, v39, v40);
          goto LABEL_65;
        }
        v65 = a1;
      }
LABEL_127:
      WebCore::RenderTreeBuilder::detachFromRenderElement((WebCore::RenderElement *)v10, (WebCore::RenderBox *)a2, v65, 1, &v113);
      goto LABEL_65;
    }
    switch(v11)
    {
      case 12:
        WebCore::RenderTreeBuilder::Block::detach(&v113, *(_QWORD *)(a1 + 72), (WebCore::RenderElement *)v10, (WebCore::RenderListItem *)a2);
        if ((*(_DWORD *)(a2 + 20) & 0x1800000) != 0x1000000)
          WebCore::RenderGrid::dirtyGrid((WebCore::RenderGrid *)v10, 0);
        break;
      case 2:
        v103 = *(_QWORD *)(a1 + 64);
        v104 = *(_QWORD *)(v10 + 416);
        if (!v104
          || (v105 = *(WebCore::RenderObject **)(v104 + 8)) == 0
          || v105 == (WebCore::RenderObject *)a2
          || v9 && *(_QWORD *)(v9 + 8) == v10)
        {
          v25 = *(_QWORD *)(*(_QWORD *)v103 + 72);
          v39 = (WebCore::RenderElement *)v10;
          v40 = (WebCore::RenderListItem *)a2;
          goto LABEL_64;
        }
        WebCore::RenderTreeBuilder::detach(&v113, *(_QWORD *)v103, v105, (WebCore::SVGResourcesCache *)a2);
        break;
      case 22:
        WebCore::RenderTreeBuilder::FormControls::detach(*(_QWORD *)(a1 + 64), (WebCore::RenderElement *)v10, (WebCore::RenderListItem *)a2);
        break;
      default:
        goto LABEL_59;
    }
  }
LABEL_65:
  v41 = *(_BYTE *)(a2 + 45);
  if ((v41 & 2) != 0 && *(_BYTE *)(a2 + 46) == 46)
  {
    v66 = *(_QWORD *)(a2 + 144);
    if (v66)
    {
      v67 = *(_QWORD *)(v66 + 8);
      if (v67)
      {
        WebCore::RenderTreeBuilder::destroy(**(_QWORD **)(a1 + 24), v67, 0);
        v41 = *(_BYTE *)(a2 + 45);
      }
    }
  }
  if ((v41 & 8) == 0)
    goto LABEL_69;
  v42 = *(_WORD *)(a2 + 69);
  if ((v42 & 0x10) == 0)
    goto LABEL_69;
  v79 = *(_QWORD **)(a1 + 112);
  v80 = dword_1ECE91378++;
  v81 = *(_QWORD *)(a2 + 8);
  v82 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
  v83 = (~(v81 << 32) + v81) ^ ((unint64_t)(~(v81 << 32) + v81) >> 22);
  v84 = 9 * ((v83 + ~(v83 << 13)) ^ ((v83 + ~(v83 << 13)) >> 8));
  v85 = (v84 ^ (v84 >> 15)) + ~((v84 ^ (v84 >> 15)) << 27);
  v86 = (v85 >> 31) ^ v85;
  v87 = v82 & v86;
  v88 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v87);
  if (v88 == -1 || v88 != v81)
  {
    v97 = 1;
    do
    {
      v87 = ((_DWORD)v87 + v97) & v82;
      v98 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v87);
      ++v97;
    }
    while (v98 == -1 || v98 != v81);
  }
  v90 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v87 + 8) + 16);
  if (!v90)
    goto LABEL_174;
  v91 = *v90;
  if (!v91 || (v42 & 0x20) != 0 || !*(_QWORD *)(v91 + 8))
    goto LABEL_174;
  dword_1ECE91378 = v80 + 2;
  v92 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
  v93 = v92 & v86;
  for (k = 1; ; v93 = (v95 + k++) & v92)
  {
    v95 = v93;
    v96 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v93);
    if (v96 == -1)
      continue;
    if (!v96)
      break;
    if (v96 == v81)
    {
      v100 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v95 + 8);
      goto LABEL_189;
    }
  }
  v100 = 0;
LABEL_189:
  v101 = *(_QWORD *)(v100 + 16);
  if (!v101)
  {
LABEL_174:
    *(_WORD *)(a2 + 69) = v42 & 0xFFEF;
    goto LABEL_175;
  }
  do
  {
    WebCore::RenderTreeBuilder::destroy(*v79, *(_QWORD *)(*(_QWORD *)v101 + 8), 1);
    v101 = *(_QWORD *)(v100 + 16);
  }
  while (v101);
  *(_WORD *)(a2 + 69) &= ~0x10u;
  if ((v102 & 1) == 0)
  {
    WebCore::continuationChainNodeMap(void)::map = 0;
    *(_QWORD *)&dword_1ECE91378 = 0;
  }
LABEL_175:
  WTF::WeakHashMap<WebCore::RenderBoxModelObject const,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>,WTF::SingleThreadWeakPtrImpl>::remove((uint64_t)&WebCore::continuationChainNodeMap(void)::map, (_QWORD *)a2);
LABEL_69:
  v43 = (_DWORD *)v113;
  if (v113)
  {
    if ((*(_BYTE *)(v113 + 45) & 2) == 0)
    {
      v44 = *(_BYTE *)(a1 + 122);
      *(_BYTE *)(a1 + 122) = 2;
      v45 = v43[16] | ((unint64_t)*((unsigned __int8 *)v43 + 68) << 32);
      if (v45)
      {
        do
        {
          v46 = *(_QWORD *)(v45 + 8);
          if (!v46)
            break;
          if ((*(_BYTE *)(v46 + 45) & 1) == 0)
          {
            v47 = *(_QWORD *)(*(_QWORD *)(v46 + 24) + 8);
            if (v47)
            {
              *(_QWORD *)(v47 + 64) = (unint64_t)*(unsigned __int16 *)(v47 + 70) << 48;
              if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                WebCore::Node::notifyInspectorOfRendererChange((WebCore::Node *)v47);
            }
          }
          WebCore::RenderTreeBuilder::destroy(a1, v46, 1);
          v45 = v43[16] | ((unint64_t)*((unsigned __int8 *)v43 + 68) << 32);
        }
        while (v45);
        v43 = (_DWORD *)v113;
        *(_BYTE *)(a1 + 122) = v44;
        v113 = 0;
        if (!v43)
          return;
LABEL_82:
        v49 = *((_QWORD *)v43 + 4);
        if (v49 && *(_QWORD *)(v49 + 8))
        {
          __break(0xC471u);
          JUMPOUT(0x1943DCEDCLL);
        }
        v50 = *(unsigned int *)((char *)v43 + 47);
        if (v50 | ((unint64_t)*((unsigned __int8 *)v43 + 51) << 32)
          && *(_QWORD *)((v50 | ((unint64_t)*((unsigned __int8 *)v43 + 51) << 32)) + 8))
        {
          __break(0xC471u);
          JUMPOUT(0x1943DD108);
        }
        v51 = v43[10];
        if (v51 | ((unint64_t)*((unsigned __int8 *)v43 + 44) << 32)
          && *(_QWORD *)((v51 | ((unint64_t)*((unsigned __int8 *)v43 + 44) << 32)) + 8))
        {
          __break(0xC471u);
          JUMPOUT(0x1943DD130);
        }
        v52 = v43[5];
        if ((v52 & 4) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1943DCEFCLL);
        }
        v43[5] = v52 | 4;
        (*(void (**)(_DWORD *))(*(_QWORD *)v43 + 640))(v43);
        v53 = (v43[13] & 7) != 3 || (*((_BYTE *)v43 + 53) & 4) == 0;
        if (v53 || v43[56] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v43 + 8))(v43);
        else
          --v43[56];
        return;
      }
      *(_BYTE *)(a1 + 122) = v44;
    }
    v113 = 0;
    goto LABEL_82;
  }
}

uint64_t WebCore::RenderObject::destroy(WebCore::RenderObject *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t result;

  v2 = *((_QWORD *)this + 4);
  if (v2 && *(_QWORD *)(v2 + 8))
    goto LABEL_16;
  v3 = *(unsigned int *)((char *)this + 47);
  if (v3 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32)
    && *(_QWORD *)((v3 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32)) + 8))
  {
    __break(0xC471u);
    JUMPOUT(0x1943DD2D0);
  }
  v4 = *((unsigned int *)this + 10);
  if (v4 | ((unint64_t)*((unsigned __int8 *)this + 44) << 32))
  {
    if (*(_QWORD *)((v4 | ((unint64_t)*((unsigned __int8 *)this + 44) << 32)) + 8))
    {
LABEL_16:
      __break(0xC471u);
      JUMPOUT(0x1943DD26CLL);
    }
  }
  v5 = *((_DWORD *)this + 5);
  if ((v5 & 4) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1943DD28CLL);
  }
  *((_DWORD *)this + 5) = v5 | 4;
  result = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 640))(this);
  if ((*((_BYTE *)this + 52) & 7) != 3 || (*((_BYTE *)this + 53) & 4) == 0 || *((_DWORD *)this + 56) == 1)
    return (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 8))(this);
  --*((_DWORD *)this + 56);
  return result;
}

void WebCore::RenderBoxModelObject::willBeDestroyed(WebCore::RenderBoxModelObject *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::Thread *v8;
  unint64_t StatusReg;
  unsigned int *v10;
  uint64_t *v11;
  unsigned int v12;
  _QWORD *v13;
  WTF::Thread *v14;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  if (!*(_BYTE *)(v3 + 3405))
  {
    v4 = *(_QWORD *)(v3 + 1944);
    v5 = *(_QWORD *)(v4 + 376);
    if (!v5)
    {
      v5 = WTF::fastMalloc((WTF *)0x58);
      *(_QWORD *)v5 = v4;
      *(_QWORD *)(v5 + 8) = 0;
      v8 = (WTF::Thread *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v8 = off_1E341E698;
      *((_QWORD *)v8 + 1) = WebCore::ImageQualityController::highQualityRepaintTimerFired;
      *((_QWORD *)v8 + 2) = 0;
      *((_QWORD *)v8 + 3) = v5;
      *(_QWORD *)(v5 + 16) = off_1E3407128;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      *(_OWORD *)(v5 + 24) = 0u;
      *(_OWORD *)(v5 + 40) = 0u;
      v10 = *(unsigned int **)(StatusReg + 736);
      if (!v10)
      {
        v14 = v8;
        v10 = (unsigned int *)WTF::Thread::initializeCurrentTLS(v8);
        v8 = v14;
      }
      v11 = (uint64_t *)(v4 + 376);
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 + 1, v10));
      *(_QWORD *)(v5 + 16) = off_1E33DC988;
      *(_QWORD *)(v5 + 56) = v10;
      *(_QWORD *)(v5 + 64) = v8;
      *(_QWORD *)(v5 + 72) = 0x3FE0000000000000;
      *(_WORD *)(v5 + 80) = 0;
      v13 = (_QWORD *)*v11;
      *v11 = v5;
      if (v13)
      {
        std::default_delete<WebCore::ImageQualityController>::operator()[abi:sn180100](v4 + 376, v13);
        v5 = *(_QWORD *)(v4 + 376);
      }
    }
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)(v5 + 8), this);
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6 || !*(_DWORD *)(v6 - 12))
    {
      *(_BYTE *)(v5 + 80) = 0;
      v7 = *(_QWORD *)(v5 + 48);
      *(_QWORD *)(v5 + 48) = v7 & 0xFDFFFFFFFFFFFFLL;
      if ((v7 & 0xFFFFFFFFFFFFLL) != 0)
        WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v5 + 16));
    }
  }
  WebCore::RenderLayerModelObject::willBeDestroyed(this, a2);
}

void WebCore::RenderLayerModelObject::willBeDestroyed(WebCore::RenderLayerModelObject *this, void *a2)
{
  int v3;
  int v4;
  WebCore::RenderLayer *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Document *v9;
  uint64_t v10;
  const WebCore::Element *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::LocalFrameView *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  WebCore::RenderLayerModelObject **v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t **v27;
  uint64_t *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  int i;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::CounterNode *v43;
  WTF::StringImpl ***v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  void *v59;
  _QWORD *v60;
  uint64_t *v61;
  void *v62;
  WebCore::IntersectionObserver *v63;
  bmalloc::api *v64;
  void *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  bmalloc::api *v69;
  void *v70;
  uint64_t v71;
  int v72;
  float v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  WebCore::RenderLayerModelObject **v83;
  WebCore::RenderLayerModelObject *v84;

  v3 = *((_DWORD *)this + 5);
  if ((v3 & 0x1800000) != 0)
  {
    v4 = (*((_DWORD *)this + 24) >> 19) & 7;
    if (v4 == 6 || v4 == 3)
    {
      WebCore::LocalFrameView::removeViewportConstrainedObject(*(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)+ 8)+ 1944)+ 248), this);
      v3 = *((_DWORD *)this + 5);
    }
  }
  if ((v3 & 0x8000) != 0)
  {
    *((_DWORD *)this + 5) = v3 & 0xFFFF7FFF;
    v6 = (WebCore::RenderLayer *)*((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = 0;
    if (v6)
    {
      WebCore::RenderLayer::~RenderLayer(v6, a2);
      if (*(_DWORD *)(v7 + 8))
      {
        *(_OWORD *)(v7 + 256) = 0u;
        *(_OWORD *)(v7 + 272) = 0u;
        *(_OWORD *)(v7 + 224) = 0u;
        *(_OWORD *)(v7 + 240) = 0u;
        *(_OWORD *)(v7 + 192) = 0u;
        *(_OWORD *)(v7 + 208) = 0u;
        *(_OWORD *)(v7 + 160) = 0u;
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 128) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
      }
      else
      {
        bmalloc::api::isoDeallocate((bmalloc::api *)v7, a2);
      }
    }
  }
  v8 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v9 = *(WebCore::Document **)(*(_QWORD *)(v8 + 40) + 8);
  if (!*((_BYTE *)v9 + 3405) && (*((_BYTE *)this + 45) & 1) == 0)
  {
    if ((*(_WORD *)(v8 + 28) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1943DDB88);
    }
    v10 = WebCore::Document::contentChangeObserver(v9);
    v11 = *(const WebCore::Element **)(*((_QWORD *)this + 3) + 8);
    if ((*((_WORD *)v11 + 14) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1943DDBA8);
    }
    WebCore::ContentChangeObserver::rendererWillBeDestroyed(v10, v11);
  }
  v12 = *(_QWORD *)(*((_QWORD *)this + 11) + 16);
  while (1)
  {
    v12 = *(_QWORD *)(v12 + 8);
    if (!v12)
      break;
    if (*(_QWORD *)(v12 + 16) && (*(_WORD *)(v12 + 58) & 3) == 2)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
      if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 528) + 8) + 24) + 8)
                                  + 112)
                      + 680) & 8) == 0)
      {
        v14 = *(WebCore::LocalFrameView **)(*(_QWORD *)(v13 + 1944) + 248);
        ++*((_DWORD *)v14 + 2);
        WebCore::LocalFrameView::removeSlowRepaintObject(v14, this);
        if (*((_DWORD *)v14 + 2) == 1)
          (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v14 + 8))(v14);
        else
          --*((_DWORD *)v14 + 2);
      }
      break;
    }
  }
  v15 = *((_WORD *)this + 38);
  if ((v15 & 1) != 0)
  {
    *((_WORD *)this + 38) = v15 & 0xFFFE;
    v71 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944);
    ++*(_DWORD *)(v71 + 16);
    WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderElement>(v71 + 480, this);
    v72 = *(_DWORD *)(v71 + 16);
    if (!v72)
    {
      __break(0xC471u);
      JUMPOUT(0x1943DDD68);
    }
    *(_DWORD *)(v71 + 16) = v72 - 1;
  }
  if ((*(_WORD *)((_BYTE *)this + 69) & 8) != 0)
  {
    {
      WebCore::counterMaps(void)::staticCounterMaps = 0;
      *(_QWORD *)&dword_1EE2F9370 = 0;
    }
    WTF::WeakHashMap<WebCore::RenderElement,std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>,WTF::SingleThreadWeakPtrImpl>::take((uint64_t)&WebCore::counterMaps(void)::staticCounterMaps, this, &v84);
    v44 = (WTF::StringImpl ***)v84;
    v45 = *(_QWORD *)v84;
    if (*(_QWORD *)v84)
    {
      v46 = *(unsigned int *)(v45 - 4);
      v47 = v45 + 16 * v46;
      if (*(_DWORD *)(v45 - 12))
      {
        v48 = *(_QWORD *)v84;
        if ((_DWORD)v46)
        {
          v49 = 16 * v46;
          v48 = *(_QWORD *)v84;
          while ((unint64_t)(*(_QWORD *)v48 + 1) <= 1)
          {
            v48 += 16;
            v49 -= 16;
            if (!v49)
            {
              v48 = v47;
              goto LABEL_80;
            }
          }
        }
        goto LABEL_80;
      }
      v48 = v45 + 16 * v46;
    }
    else
    {
      v48 = 0;
      v46 = 0;
    }
    v47 = v45 + 16 * v46;
LABEL_80:
    if (v45)
      v50 = v45 + 16 * *(unsigned int *)(v45 - 4);
    else
      v50 = 0;
    if (v50 != v48)
    {
      do
      {
        WebCore::destroyCounterNodeWithoutMapRemoval((uint64_t *)v48, *(const WTF::AtomString **)(v48 + 8), v43);
        v51 = v48 + 16;
        v48 = v47;
        if (v51 != v47)
        {
          v48 = v51;
          while ((unint64_t)(*(_QWORD *)v48 + 1) <= 1)
          {
            v48 += 16;
            if (v48 == v47)
            {
              v48 = v47;
              break;
            }
          }
        }
      }
      while (v48 != v50);
      v44 = (WTF::StringImpl ***)v84;
    }
    *(_WORD *)((char *)this + 69) &= ~8u;
    v84 = 0;
    if (v44)
    {
      v58 = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::~HashTable(v44, a2);
      WTF::fastFree((WTF *)v58, v59);
    }
  }
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v76 = WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                                         + 40)
                                                                             + 8));
    if (v76)
    {
      v77 = v76;
      ++*(_DWORD *)(v76 + 8);
      WebCore::AXObjectCache::remove((uint64_t *)v76, this);
      v78 = *(_DWORD *)(v77 + 8);
      if (!v78)
      {
        __break(0xC471u);
        goto LABEL_168;
      }
      *(_DWORD *)(v77 + 8) = v78 - 1;
    }
  }
  if ((*((_BYTE *)this + 45) & 1) == 0)
  {
    v16 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v16)
    {
      *(_DWORD *)(v16 + 24) += 2;
      v17 = *(_QWORD *)(v16 + 64);
      if ((WebCore::RenderLayerModelObject *)(v17 & 0xFFFFFFFFFFFFLL) == this)
      {
        *(_QWORD *)(v16 + 64) = v17 & 0xFFFF000000000000;
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          WebCore::Node::notifyInspectorOfRendererChange((WebCore::Node *)v16);
      }
      if (*(_DWORD *)(v16 + 24) == 2)
      {
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v16, a2);
      }
      else
      {
        *(_DWORD *)(v16 + 24) -= 2;
      }
    }
  }
  if ((*((_BYTE *)this + 21) & 0x40) != 0)
  {
    {
      WebCore::RenderObject::rareDataMap(void)::map = 0;
    }
    WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderObject::RenderObjectRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderObject::RenderObjectRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>(&WebCore::RenderObject::rareDataMap(void)::map, this);
    *((_DWORD *)this + 5) &= ~0x4000u;
  }
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  if (!*(_BYTE *)(v19 + 3405))
  {
    v20 = *(_QWORD *)(*(_QWORD *)(v19 + 1944) + 248);
    v21 = *(WebCore::RenderLayerModelObject ***)(v20 + 464);
    if (v21)
    {
      if (v21[1] == this)
      {
        ++*(_DWORD *)(v20 + 8);
        *(_QWORD *)(v20 + 464) = 0;
        if (*(_DWORD *)v21 == 1)
          WTF::fastFree((WTF *)v21, a2);
        else
          --*(_DWORD *)v21;
        if (*(_DWORD *)(v20 + 8) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        else
          --*(_DWORD *)(v20 + 8);
      }
    }
  }
  v83 = &v84;
  v84 = this;
  if ((*(_WORD *)((_BYTE *)this + 69) & 2) != 0)
  {
    WebCore::RenderElement::willBeDestroyed(void)::$_1::operator()<WebCore::RenderStyle>((uint64_t)&v83, (uint64_t)this + 80);
    v52 = *(_QWORD *)(*((_QWORD *)this + 11) + 16);
    v53 = *(unsigned __int8 *)(v52 + 52);
    if ((v53 & 0xE) != 0 && (v53 & 0xF) != 0)
    {
      v73 = *(float *)(v52 + 48);
      if (((v73 < 3.0) & (v53 >> 4)) != 0 || v73 > 0.0)
      {
        v74 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944);
        v75 = *(_DWORD *)(v74 + 16);
        --*(_DWORD *)(v74 + 436);
        *(_DWORD *)(v74 + 16) = v75 + 1;
        if (v75 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x1943DDD9CLL);
        }
        *(_DWORD *)(v74 + 16) = v75;
      }
    }
    v55 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
    {
      *(_DWORD *)v55 += 2;
      v56 = *((_QWORD *)this + 16);
      if (v56 && (v66 = *(unsigned int *)(v56 + 12), (_DWORD)v66))
      {
        v67 = *(uint64_t **)v56;
        v68 = 8 * v66;
        do
        {
          v57 = *v67;
          if ((*(_QWORD *)(*v67 + 16) & 0xF80000000000) == 0x80000000000
            && *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v57 + 8) + 40) + 592) == v55)
          {
            break;
          }
          v57 = 0;
          ++v67;
          v68 -= 8;
        }
        while (v68);
      }
      else
      {
        v57 = 0;
      }
      if (*(_DWORD *)v55 == 2)
        WTF::StringImpl::destroy(v55, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v55 -= 2;
    }
    else
    {
      v79 = *((_QWORD *)this + 16);
      if (v79 && (v80 = *(unsigned int *)(v79 + 12), (_DWORD)v80))
      {
        v81 = *(uint64_t **)v79;
        v82 = 8 * v80;
        do
        {
          v57 = *v81;
          if ((*(_QWORD *)(*v81 + 16) & 0xF80000000000) == 0x80000000000
            && !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v57 + 8) + 40) + 592))
          {
            break;
          }
          v57 = 0;
          ++v81;
          v82 -= 8;
        }
        while (v82);
      }
      else
      {
        v57 = 0;
      }
    }
    if (v57)
      WebCore::RenderElement::willBeDestroyed(void)::$_1::operator()<WebCore::RenderStyle>((uint64_t)&v83, v57);
  }
  if ((*(_WORD *)((_BYTE *)this + 69) & 4) != 0)
  {
    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944);
    ++*(_DWORD *)(v22 + 16);
    *(_WORD *)((char *)this + 69) &= ~4u;
    WTF::WeakHashMap<WebCore::RenderElement,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>::remove(v22 + 448, this);
    v23 = *(_DWORD *)(v22 + 16);
    if (v23)
    {
      *(_DWORD *)(v22 + 16) = v23 - 1;
      goto LABEL_42;
    }
    __break(0xC471u);
LABEL_168:
    JUMPOUT(0x1943DDB48);
  }
LABEL_42:
  if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 636) & 0xC0000) == 0x40000
    && (*((_BYTE *)this + 45) & 1) == 0)
  {
    v24 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v24)
    {
      if ((*(_WORD *)(v24 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1943DDB68);
      }
      *(_DWORD *)(v24 + 24) += 2;
      v25 = *(_QWORD *)(*(_QWORD *)(v24 + 40) + 8);
      *(_DWORD *)(v25 + 24) += 2;
      v26 = *(_QWORD **)(v25 + 1584);
      if (!v26)
      {
        v60 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        v60[1] = 0;
        v60[2] = 0;
        *v60 = 0;
        v61 = *(uint64_t **)(v25 + 1584);
        *(_QWORD *)(v25 + 1584) = v60;
        if (v61)
        {
          WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WebCore::ViewportProximity>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable(v61 + 1, a2);
          v63 = (WebCore::IntersectionObserver *)*v61;
          *v61 = 0;
          if (v63)
          {
            if (*(_DWORD *)v63 == 1)
            {
              WebCore::IntersectionObserver::~IntersectionObserver(v63);
              bmalloc::api::isoDeallocate(v69, v70);
            }
            else
            {
              --*(_DWORD *)v63;
            }
          }
          WTF::fastFree((WTF *)v61, v62);
          v26 = *(_QWORD **)(v25 + 1584);
        }
        else
        {
          v26 = v60;
        }
      }
      v27 = (uint64_t **)*v26;
      if (*v26)
      {
        ++*(_DWORD *)v27;
        WebCore::IntersectionObserver::unobserve(v27, (WebCore::Element *)v24);
        v28 = v26 + 1;
        v29 = *((_DWORD *)v26 + 4);
        v30 = *((_DWORD *)v26 + 5);
        *((_DWORD *)v26 + 4) = v29 + 1;
        if (v29 > v30)
          WTF::WeakHashMap<WebCore::Element,WebCore::ViewportProximity,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences((uint64_t)(v26 + 1), a2);
        v31 = *(_QWORD *)(v24 + 16);
        v32 = v31 & 0xFFFFFFFFFFFFLL;
        if ((v31 & 0xFFFFFFFFFFFFLL) != 0)
        {
          if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFLL) + 8))
          {
            v33 = *v28;
            if (*v28)
            {
              v34 = *(_DWORD *)(v33 - 8);
              v35 = (v32 + ~(v31 << 32)) ^ ((unint64_t)(v32 + ~(v31 << 32)) >> 22);
              v36 = 9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8));
              v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
              v38 = v34 & ((v37 >> 31) ^ v37);
              for (i = 1; ; ++i)
              {
                v40 = v38;
                v41 = *(_QWORD *)(v33 + 16 * v38);
                if (v41 != -1)
                {
                  if (!v41)
                    goto LABEL_60;
                  if (v41 == v32)
                    break;
                }
                v38 = (v40 + i) & v34;
              }
              if ((_DWORD)v40 != *(_DWORD *)(v33 - 4))
                WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WebCore::ViewportProximity>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::remove(v26 + 1, (_QWORD *)(v33 + 16 * v40));
            }
          }
        }
LABEL_60:
        if (*(_DWORD *)v27 == 1)
        {
          WebCore::IntersectionObserver::~IntersectionObserver((WebCore::IntersectionObserver *)v27);
          bmalloc::api::isoDeallocate(v64, v65);
        }
        else
        {
          --*(_DWORD *)v27;
        }
      }
      v42 = *(_QWORD *)(v24 + 72) & 0xFFFFFFFFFFFFLL;
      if (!v42)
      {
        WebCore::Node::materializeRareData((WebCore::Node *)v24);
        v42 = *(_QWORD *)(v24 + 72) & 0xFFFFFFFFFFFFLL;
      }
      if (!*(_BYTE *)(v42 + 33))
        *(_BYTE *)(v42 + 33) = 1;
      *(_BYTE *)(v42 + 32) = 0;
      if (*(_DWORD *)(v25 + 24) == 2)
      {
        if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v25, a2);
      }
      else
      {
        *(_DWORD *)(v25 + 24) -= 2;
      }
      if (*(_DWORD *)(v24 + 24) == 2)
      {
        if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v24, a2);
      }
      else
      {
        *(_DWORD *)(v24 + 24) -= 2;
      }
    }
  }
}

void WebCore::RenderElement::willBeDestroyed(WebCore::RenderElement *this, WebCore::RenderElement *a2)
{
  uint64_t v3;
  WebCore::Document *v4;
  uint64_t v5;
  const WebCore::Element *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::LocalFrameView *v9;
  __int16 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::RenderElement **v14;
  uint64_t v15;
  unsigned int v16;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  float v30;
  uint64_t v31;
  int v32;
  WebCore::RenderElement **v33;
  WebCore::RenderElement *v34;

  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v4 = *(WebCore::Document **)(*(_QWORD *)(v3 + 40) + 8);
  if (!*((_BYTE *)v4 + 3405) && (*((_BYTE *)this + 45) & 1) == 0)
  {
    if ((*(_WORD *)(v3 + 28) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1943DE150);
    }
    v5 = WebCore::Document::contentChangeObserver(v4);
    v6 = *(const WebCore::Element **)(*((_QWORD *)this + 3) + 8);
    if ((*((_WORD *)v6 + 14) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1943DE170);
    }
    WebCore::ContentChangeObserver::rendererWillBeDestroyed(v5, v6);
  }
  v7 = *(_QWORD *)(*((_QWORD *)this + 11) + 16);
  while (1)
  {
    v7 = *(_QWORD *)(v7 + 8);
    if (!v7)
      break;
    if (*(_QWORD *)(v7 + 16) && (*(_WORD *)(v7 + 58) & 3) == 2)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
      if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 528) + 8) + 24) + 8)
                                  + 112)
                      + 680) & 8) == 0)
      {
        v9 = *(WebCore::LocalFrameView **)(*(_QWORD *)(v8 + 1944) + 248);
        ++*((_DWORD *)v9 + 2);
        WebCore::LocalFrameView::removeSlowRepaintObject(v9, this);
        if (*((_DWORD *)v9 + 2) == 1)
          (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v9 + 8))(v9);
        else
          --*((_DWORD *)v9 + 2);
      }
      break;
    }
  }
  v10 = *((_WORD *)this + 38);
  if ((v10 & 1) != 0)
  {
    *((_WORD *)this + 38) = v10 & 0xFFFE;
    v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944);
    ++*(_DWORD *)(v28 + 16);
    WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderElement>(v28 + 480, this);
    v29 = *(_DWORD *)(v28 + 16);
    if (!v29)
    {
      __break(0xC471u);
      JUMPOUT(0x1943DE294);
    }
    *(_DWORD *)(v28 + 16) = v29 - 1;
  }
  if ((*(_WORD *)((_BYTE *)this + 69) & 8) != 0)
    WebCore::RenderCounter::destroyCounterNodes(this, a2);
  WebCore::RenderObject::willBeDestroyed(this, a2);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  if (!*(_BYTE *)(v12 + 3405))
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v12 + 1944) + 248);
    v14 = *(WebCore::RenderElement ***)(v13 + 464);
    if (v14)
    {
      if (v14[1] == this)
      {
        ++*(_DWORD *)(v13 + 8);
        *(_QWORD *)(v13 + 464) = 0;
        if (*(_DWORD *)v14 == 1)
          WTF::fastFree((WTF *)v14, v11);
        else
          --*(_DWORD *)v14;
        if (*(_DWORD *)(v13 + 8) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        else
          --*(_DWORD *)(v13 + 8);
      }
    }
  }
  v33 = &v34;
  v34 = this;
  if ((*(_WORD *)((_BYTE *)this + 69) & 2) != 0)
  {
    WebCore::RenderElement::willBeDestroyed(void)::$_1::operator()<WebCore::RenderStyle>((uint64_t)&v33, (uint64_t)this + 80);
    v15 = *(_QWORD *)(*((_QWORD *)this + 11) + 16);
    v16 = *(unsigned __int8 *)(v15 + 52);
    if ((v16 & 0xE) != 0 && (v16 & 0xF) != 0)
    {
      v30 = *(float *)(v15 + 48);
      if (((v30 < 3.0) & (v16 >> 4)) != 0 || v30 > 0.0)
      {
        v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944);
        v32 = *(_DWORD *)(v31 + 16);
        --*(_DWORD *)(v31 + 436);
        *(_DWORD *)(v31 + 16) = v32 + 1;
        if (v32 == -1)
          goto LABEL_73;
        *(_DWORD *)(v31 + 16) = v32;
      }
    }
    v18 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
      *(_DWORD *)v18 += 2;
    v19 = *((_QWORD *)this + 16);
    if (v19 && (v25 = *(unsigned int *)(v19 + 12), (_DWORD)v25))
    {
      v26 = *(uint64_t **)v19;
      v27 = 8 * v25;
      do
      {
        v20 = *v26;
        if ((*(_QWORD *)(*v26 + 16) & 0xF80000000000) == 0x80000000000
          && *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v20 + 8) + 40) + 592) == v18)
        {
          break;
        }
        v20 = 0;
        ++v26;
        v27 -= 8;
      }
      while (v27);
    }
    else
    {
      v20 = 0;
    }
    if (!v18)
    {
LABEL_32:
      if (!v20)
        goto LABEL_34;
      goto LABEL_33;
    }
    if (*(_DWORD *)v18 != 2)
    {
      *(_DWORD *)v18 -= 2;
      goto LABEL_32;
    }
    WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v11);
    if (v20)
LABEL_33:
      WebCore::RenderElement::willBeDestroyed(void)::$_1::operator()<WebCore::RenderStyle>((uint64_t)&v33, v20);
  }
LABEL_34:
  if ((*(_WORD *)((_BYTE *)this + 69) & 4) != 0)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944);
    ++*(_DWORD *)(v21 + 16);
    *(_WORD *)((char *)this + 69) &= ~4u;
    WTF::WeakHashMap<WebCore::RenderElement,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>::remove(v21 + 448, this);
    v22 = *(_DWORD *)(v21 + 16);
    if (v22)
    {
      *(_DWORD *)(v21 + 16) = v22 - 1;
      goto LABEL_37;
    }
LABEL_73:
    __break(0xC471u);
    JUMPOUT(0x1943DE110);
  }
LABEL_37:
  if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 636) & 0xC0000) == 0x40000
    && (*((_BYTE *)this + 45) & 1) == 0)
  {
    v23 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v23)
    {
      if ((*(_WORD *)(v23 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1943DE130);
      }
      *(_DWORD *)(v23 + 24) += 2;
      WebCore::ContentVisibilityDocumentState::unobserve((unsigned int *)v23, (WebCore::Element *)v11);
      if (*(_DWORD *)(v23 + 24) == 2)
      {
        if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v23, v24);
      }
      else
      {
        *(_DWORD *)(v23 + 24) -= 2;
      }
    }
  }
}

void WebCore::RenderObject::willBeDestroyed(WebCore::RenderObject *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v6 = WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                                        + 40)
                                                                            + 8));
    if (v6)
    {
      v7 = v6;
      ++*(_DWORD *)(v6 + 8);
      WebCore::AXObjectCache::remove((uint64_t *)v6, this);
      v8 = *(_DWORD *)(v7 + 8);
      if (!v8)
      {
        __break(0xC471u);
        return;
      }
      *(_DWORD *)(v7 + 8) = v8 - 1;
    }
  }
  if ((*((_BYTE *)this + 45) & 1) == 0)
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v3)
    {
      *(_DWORD *)(v3 + 24) += 2;
      v4 = *(_QWORD *)(v3 + 64);
      if ((WebCore::RenderObject *)(v4 & 0xFFFFFFFFFFFFLL) == this)
      {
        *(_QWORD *)(v3 + 64) = v4 & 0xFFFF000000000000;
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          WebCore::Node::notifyInspectorOfRendererChange((WebCore::Node *)v3);
      }
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
  }
  if ((*((_BYTE *)this + 21) & 0x40) != 0)
  {
    {
      WebCore::RenderObject::rareDataMap(void)::map = 0;
    }
    WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderObject::RenderObjectRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderObject::RenderObjectRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>(&WebCore::RenderObject::rareDataMap(void)::map, this);
    *((_DWORD *)this + 5) &= ~0x4000u;
  }
}

void WebCore::RenderBlockFlow::willBeDestroyed(WebCore::RenderBlockFlow *this, void *a2)
{
  uint64_t v3;
  WebCore::RenderBlockFlow *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t RootBox;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  WTF::Thread *v23;
  unint64_t StatusReg;
  unsigned int *v25;
  uint64_t *v26;
  unsigned int v27;
  _QWORD *v28;
  WTF::Thread *v29;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3405))
  {
    if (*((_DWORD *)this + 60) == 2 && (v13 = *((_QWORD *)this + 29)) != 0 && (v14 = *(_QWORD *)(v13 + 8)) != 0)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 88))(v14) & 1) == 0)
      {
LABEL_47:
        __break(0xC471u);
        JUMPOUT(0x1943DE620);
      }
      if (WebCore::RenderObject::isSelectionBorder(this))
        WebCore::FrameSelection::setNeedsSelectionUpdate(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)+ 40)+ 8)+ 528)+ 8)+ 296)+ 3064), 0);
      if (WebCore::RenderObject::isAnonymousBlock(this))
      {
        RootBox = WebCore::RenderBlockFlow::firstRootBox(this);
        if (RootBox)
        {
          v16 = (_QWORD *)RootBox;
          while (1)
          {
            while (1)
            {
              v17 = (_QWORD *)v16[9];
              if (!v17)
                break;
              WebCore::LegacyInlineBox::removeFromParent(v17);
            }
            v16 = (_QWORD *)v16[12];
            if (!v16)
              break;
            if (((*(uint64_t (**)(_QWORD *))(*v16 + 88))(v16) & 1) == 0)
              goto LABEL_47;
          }
        }
      }
    }
    else
    {
      v7 = *((_QWORD *)this + 4);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          if (WebCore::RenderObject::isSVGRenderer(*(WebCore::RenderObject **)(v7 + 8)))
            (*(void (**)(uint64_t, WebCore::RenderBlockFlow *))(*(_QWORD *)v8 + 672))(v8, this);
        }
      }
    }
  }
  if (*((_DWORD *)this + 60) == 2)
  {
    v18 = *((_QWORD *)this + 29);
    if (v18)
    {
      v21 = *(_QWORD **)(v18 + 8);
      v20 = (_QWORD *)(v18 + 8);
      v19 = v21;
      if (v21)
      {
        do
        {
          v22 = (_QWORD *)v19[12];
          (*(void (**)(_QWORD *))(*v19 + 8))(v19);
          v19 = v22;
        }
        while (v22);
        *v20 = 0;
        v20[1] = 0;
      }
    }
  }
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                         + 528)
                             + 8)
                 + 640);
  v4 = *(WebCore::RenderBlockFlow **)(*(_QWORD *)(v3 + 144) + 56);
  if (v4)
    v4 = (WebCore::RenderBlockFlow *)*((_QWORD *)v4 + 1);
  if (v4 == this)
    WebCore::EventHandler::stopAutoscrollTimer((WebCore::AutoscrollController **)v3, 1);
  if ((*(_WORD *)((_BYTE *)this + 69) & 2) != 0)
  {
    v5 = *((_QWORD *)this + 11);
    if (*(unsigned __int8 *)(*(_QWORD *)(v5 + 40) + 465) | *(unsigned __int8 *)(*(_QWORD *)(v5 + 40) + 466))
    {
      WebCore::RenderView::unregisterBoxWithScrollSnapPositions(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944), this);
      v5 = *((_QWORD *)this + 11);
    }
    if ((unint64_t)(*(_BYTE *)(*(_QWORD *)(v5 + 40) + 642) & 3) << 48)
      WebCore::RenderView::unregisterContainerQueryBox(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944), this);
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  if (!*(_BYTE *)(v6 + 3405))
  {
    v9 = *(_QWORD *)(v6 + 1944);
    v10 = *(_QWORD *)(v9 + 376);
    if (!v10)
    {
      v10 = WTF::fastMalloc((WTF *)0x58);
      *(_QWORD *)v10 = v9;
      *(_QWORD *)(v10 + 8) = 0;
      v23 = (WTF::Thread *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v23 = off_1E341E698;
      *((_QWORD *)v23 + 1) = WebCore::ImageQualityController::highQualityRepaintTimerFired;
      *((_QWORD *)v23 + 2) = 0;
      *((_QWORD *)v23 + 3) = v10;
      *(_QWORD *)(v10 + 16) = off_1E3407128;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      *(_OWORD *)(v10 + 24) = 0u;
      *(_OWORD *)(v10 + 40) = 0u;
      v25 = *(unsigned int **)(StatusReg + 736);
      if (!v25)
      {
        v29 = v23;
        v25 = (unsigned int *)WTF::Thread::initializeCurrentTLS(v23);
        v23 = v29;
      }
      v26 = (uint64_t *)(v9 + 376);
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 + 1, v25));
      *(_QWORD *)(v10 + 16) = off_1E33DC988;
      *(_QWORD *)(v10 + 56) = v25;
      *(_QWORD *)(v10 + 64) = v23;
      *(_QWORD *)(v10 + 72) = 0x3FE0000000000000;
      *(_WORD *)(v10 + 80) = 0;
      v28 = (_QWORD *)*v26;
      *v26 = v10;
      if (v28)
      {
        std::default_delete<WebCore::ImageQualityController>::operator()[abi:sn180100](v9 + 376, v28);
        v10 = *(_QWORD *)(v9 + 376);
      }
    }
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)(v10 + 8), this);
    v11 = *(_QWORD *)(v10 + 8);
    if (!v11 || !*(_DWORD *)(v11 - 12))
    {
      *(_BYTE *)(v10 + 80) = 0;
      v12 = *(_QWORD *)(v10 + 48);
      *(_QWORD *)(v10 + 48) = v12 & 0xFDFFFFFFFFFFFFLL;
      if ((v12 & 0xFFFFFFFFFFFFLL) != 0)
        WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v10 + 16));
    }
  }
  WebCore::RenderLayerModelObject::willBeDestroyed(this, a2);
}

uint64_t WebCore::ContentChangeObserver::rendererWillBeDestroyed(uint64_t this, const WebCore::Element *a2)
{
  uint64_t v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  _BYTE v11[24];

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 680) + 704) & 0x200000000000) != 0)
  {
    v3 = this;
    if (*(_BYTE *)(this + 152)
      || *(_BYTE *)(this + 158)
      || *(_BYTE *)(this + 157)
      || *(_BYTE *)(this + 156)
      || *(_BYTE *)(this + 154)
      || (*(_QWORD *)(this + 48) & 0xFFFFFFFFFFFFLL) != 0
      && *(double *)((*(_QWORD *)(this + 48) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
    {
      if ((WebCore::ContentChangeObserver::isVisuallyHidden(a2, a2) & 1) == 0)
        WTF::WeakHashSet<WebCore::Element const,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>(v3 + 104, a2, (uint64_t)v11);
      v4 = (uint64_t **)(v3 + 136);
      this = WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Element>(v3 + 136, a2);
      if ((_DWORD)this)
      {
        v5 = *v4;
        if (!*v4 || !*((_DWORD *)v5 - 3))
          goto LABEL_11;
        v6 = *((unsigned int *)v5 - 1);
        if ((_DWORD)v6)
        {
          v7 = 8 * v6;
          v8 = *v4;
          while ((unint64_t)(*v8 + 1) <= 1)
          {
            ++v8;
            v7 -= 8;
            if (!v7)
              goto LABEL_11;
          }
        }
        else
        {
          v8 = *v4;
        }
        v9 = &v5[v6];
        if (v8 == v9)
          goto LABEL_11;
        v10 = *v8;
LABEL_25:
        if (!*(_QWORD *)(v10 + 8))
        {
          while (++v8 != v9)
          {
            v10 = *v8;
            if ((unint64_t)(*v8 + 1) > 1)
            {
              if (v8 == v9)
                break;
              goto LABEL_25;
            }
          }
LABEL_11:
          *(_DWORD *)(v3 + 120) = 1;
        }
      }
    }
  }
  return this;
}

void WebCore::RenderLayer::~RenderLayer(WebCore::RenderLayer *this, void *a2)
{
  void **v3;
  WebCore::RenderLayerScrollableArea *v4;
  WebCore::RenderLayerFilters *v5;
  WTF *v6;
  void *v7;
  uint64_t v8;
  const WebCore::GraphicsLayer **v9;
  WTF *v10;
  void *v11;
  WebCore::RenderLayerFilters *v12;
  WTF *v13;
  void *v14;
  WTF *v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  WebCore::ClipRectsCache *v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WebCore::RenderView *v33;
  WebCore::RenderLayerCompositor *v34;
  const WebCore::GraphicsLayer **v35;
  WTF *v36;
  void *v37;
  WebCore::RenderView *v38;
  WebCore::RenderLayerCompositor *v39;
  uint64_t v40;
  WebCore::InspectorInstrumentation *v41;
  unsigned int v42;
  WebCore::RenderLayerCompositor *v43;
  WTF::StringImpl *v44;
  WebCore::RenderLayerCompositor *v45;
  WebCore::RenderLayerCompositor *v46;
  WTF *v47;
  void *v48;
  WebCore::RenderLayerCompositor *v49;
  WebCore::RenderLayerCompositor *v50;
  WTF *v51;
  void *v52;

  if ((*((_BYTE *)this + 25) & 4) != 0)
    WebCore::EventHandler::resizeLayerDestroyed(*(WebCore::EventHandler **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24)+ 8)+ 40)+ 8)+ 528)+ 8)+ 640), a2);
  v3 = (void **)((char *)this + 208);
  if (*((_QWORD *)this + 26))
    WebCore::RenderLayer::removeReflection(this, (WebCore::RenderLayer *)a2);
  v4 = (WebCore::RenderLayerScrollableArea *)*((_QWORD *)this + 33);
  if (v4)
  {
    WebCore::RenderLayerScrollableArea::clear(v4);
    v29 = *((_QWORD *)this + 33);
    *((_QWORD *)this + 33) = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 800))(v29);
  }
  v5 = (WebCore::RenderLayerFilters *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v5)
  {
    WebCore::RenderLayerFilters::~RenderLayerFilters(v5, a2);
    WTF::fastFree(v6, v7);
  }
  if (*((_QWORD *)this + 32))
  {
    v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 8) + 40) + 8);
    if (!*(_BYTE *)(v31 + 3405))
    {
      v38 = *(WebCore::RenderView **)(v31 + 1944);
      v39 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v38 + 50);
      if (!v39)
      {
        v49 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        WebCore::RenderLayerCompositor::RenderLayerCompositor(v49, v38);
        v50 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v38 + 50);
        *((_QWORD *)v38 + 50) = v49;
        if (v50)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v50);
          WTF::fastFree(v51, v52);
          v39 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v38 + 50);
        }
        else
        {
          v39 = v49;
        }
      }
      v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v39 + 1)
                                                                                              + 24)
                                                                                  + 8)
                                                                      + 40)
                                                          + 8)
                                              + 528)
                                  + 8)
                      + 24);
      if (v40)
      {
        v41 = *(WebCore::InspectorInstrumentation **)(v40 + 8);
        v42 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter);
        if (v42 && v41)
        {
          v43 = v39;
          v44 = (WTF::StringImpl *)WebCore::InspectorInstrumentation::instrumentingAgents(v41, (WebCore::Page *)a2);
          WebCore::InspectorInstrumentation::renderLayerDestroyedImpl(v44, (uint64_t)this);
          v39 = v43;
        }
      }
      else
      {
        atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter);
      }
      if (*(WebCore::RenderLayer **)(*((_QWORD *)v39 + 1) + 144) != this)
        --*((_DWORD *)v39 + 50);
    }
    v32 = *((_QWORD *)this + 32);
    v33 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 8)
                                                                                              + 32)
                                                                                  + 24)
                                                                      + 8)
                                                          + 40)
                                              + 8)
                                  + 1944);
    v34 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v33 + 50);
    if (!v34)
    {
      v45 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
      v34 = (WebCore::RenderLayerCompositor *)WebCore::RenderLayerCompositor::RenderLayerCompositor(v45, v33);
      v46 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v33 + 50);
      *((_QWORD *)v33 + 50) = v34;
      if (v46)
      {
        WebCore::RenderLayerCompositor::~RenderLayerCompositor(v46);
        WTF::fastFree(v47, v48);
        v34 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v33 + 50);
      }
    }
    WebCore::RenderLayerCompositor::removeFromScrollCoordinatedLayers(v34, *(WebCore::RenderLayer **)(v32 + 8));
    WebCore::RenderLayerBacking::clearBackingSharingLayers((void **)v32);
    v35 = (const WebCore::GraphicsLayer **)*((_QWORD *)this + 32);
    *((_QWORD *)this + 32) = 0;
    if (v35)
    {
      WebCore::RenderLayerBacking::~RenderLayerBacking(v35);
      WTF::fastFree(v36, v37);
    }
  }
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 8) + 40) + 8)
                 + 3405))
  {
    if (*((_QWORD *)this + 5))
    {
      __break(0xC471u);
      JUMPOUT(0x1943DF108);
    }
    if (*((_QWORD *)this + 8))
    {
      __break(0xC471u);
      JUMPOUT(0x1943DEF5CLL);
    }
  }
  v8 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 800))(v8);
  v9 = (const WebCore::GraphicsLayer **)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v9)
  {
    WebCore::RenderLayerBacking::~RenderLayerBacking(v9);
    WTF::fastFree(v10, v11);
  }
  v12 = (WebCore::RenderLayerFilters *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v12)
  {
    WebCore::RenderLayerFilters::~RenderLayerFilters(v12, a2);
    WTF::fastFree(v13, v14);
  }
  v15 = (WTF *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
      WTF::fastFree(v15, a2);
    else
      --*(_DWORD *)v15;
  }
  v16 = (WTF *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
      WTF::fastFree(v16, a2);
    else
      --*(_DWORD *)v16;
  }
  v17 = *v3;
  *v3 = 0;
  if (v17)
    WebCore::RenderObjectDeleter::operator()((uint64_t)this + 208, (uint64_t)v17);
  v18 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v18)
    WTF::fastFree(v18, v17);
  v19 = (WebCore::ClipRectsCache *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v19)
  {
    WebCore::ClipRectsCache::~ClipRectsCache(v19, v17);
    WTF::fastFree(v20, v21);
  }
  v22 = (WTF *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v22)
  {
    v23 = *(WTF **)v22;
    if (*(_QWORD *)v22)
    {
      *(_QWORD *)v22 = 0;
      *((_DWORD *)v22 + 2) = 0;
      WTF::fastFree(v23, v17);
    }
    WTF::fastFree(v22, v17);
  }
  v24 = (WTF *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v24)
  {
    v25 = *(WTF **)v24;
    if (*(_QWORD *)v24)
    {
      *(_QWORD *)v24 = 0;
      *((_DWORD *)v24 + 2) = 0;
      WTF::fastFree(v25, v17);
    }
    WTF::fastFree(v24, v17);
  }
  v26 = (WTF *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v26)
  {
    v27 = *(WTF **)v26;
    if (*(_QWORD *)v26)
    {
      *(_QWORD *)v26 = 0;
      *((_DWORD *)v26 + 2) = 0;
      WTF::fastFree(v27, v17);
    }
    WTF::fastFree(v26, v17);
  }
  v28 = (WTF *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      WTF::fastFree(v28, v17);
    else
      --*(_DWORD *)v28;
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v30 = *(WTF **)this;
    *(_QWORD *)this = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v17);
      else
        --*(_DWORD *)v30;
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

void WebCore::ScrollableArea::~ScrollableArea(WebCore::ScrollableArea *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &unk_1E3406698;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

void WebCore::RenderLayerScrollableArea::~RenderLayerScrollableArea(WebCore::RenderLayerScrollableArea *this, const WebCore::RenderObject *a2)
{
  WebCore::ScrollAnchoringController *v3;
  WTF *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  v3 = (WebCore::ScrollAnchoringController *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v3)
  {
    WebCore::ScrollAnchoringController::~ScrollAnchoringController(v3, a2);
    WTF::fastFree(v4, v5);
  }
  v6 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v6)
  {
    if (*(_BYTE *)(v6 + 88) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v6 + 84));
    }
    *(_QWORD *)(v6 + 8) = off_1E31F7378;
    v7 = *(_QWORD *)(v6 + 56);
    *(_QWORD *)(v6 + 56) = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v6 + 8));
    WTF::fastFree((WTF *)v6, v8);
  }
  v9 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v9)
    WebCore::RenderObjectDeleter::operator()((uint64_t)this + 160, v9);
  v10 = (void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v10)
    WebCore::RenderObjectDeleter::operator()((uint64_t)this + 152, (uint64_t)v10);
  v11 = (_DWORD *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v11)
  {
    if (v11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
  }
  v12 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  *(_QWORD *)this = &unk_1E3406698;
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)this + 1);
  if (v15)
  {
    *(_QWORD *)(v15 + 8) = 0;
    v16 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, v10);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v2;
  void *v3;

  WebCore::RenderLayerScrollableArea::~RenderLayerScrollableArea(this, a2);
  if (*(_DWORD *)(v2 + 72))
  {
    *(_QWORD *)(v2 + 176) = 0;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
}

WTF *WebCore::RenderLayerScrollableArea::clear(WebCore::RenderLayerScrollableArea *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *result;
  void *v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::Page *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  WTF *v31;
  uint64_t v32;
  void *v33;
  WTF *v34;
  uint64_t v35;
  WebCore::RenderLayerScrollableArea *v36;
  WTF *v37;

  v2 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  if (*((_BYTE *)this + 78))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40) + 8) + 1944)
                    + 248);
    v17 = *(_QWORD *)(v16 + 1288);
    if (v17)
    {
      if (WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::ScrollableArea>(v17, this))
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v16 + 328) + 24);
        if (v18)
        {
          v19 = *(WebCore::Page **)(v18 + 8);
          if (v19)
          {
            v20 = WebCore::Page::scrollingCoordinator(v19);
            if (v20)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 88))(v20, v16);
          }
        }
      }
    }
  }
  if (*((_BYTE *)this + 84))
  {
    v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40)
                                                        + 8)
                                            + 1944)
                                + 248)
                    + 1296);
    if (v27)
      WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::ScrollableArea>(v27, this);
    *((_BYTE *)this + 84) = 0;
  }
  v3 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  if ((*(_BYTE *)(v3 + 45) & 1) == 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
    if (v4)
    {
      if ((*(_WORD *)(v4 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1943DF664);
      }
      if (*((_BYTE *)this + 80))
      {
        WebCore::Document::removeTouchEventHandler(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8), v4, 0);
        *((_BYTE *)this + 80) = 0;
      }
    }
  }
  if ((*(_BYTE *)(v2 + 45) & 1) == 0)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8);
    if (v5)
    {
      if ((*(_WORD *)(v5 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1943DF684);
      }
      if (*((_QWORD *)this + 13))
      {
        v6 = *(_QWORD *)(v5 + 72);
      }
      else
      {
        v6 = *(_QWORD *)(v5 + 72);
        if ((v6 & 0xFFFFFFFFFFFFLL) == 0)
          goto LABEL_13;
      }
      v29 = v6 & 0xFFFFFFFFFFFFLL;
      if (!v29)
      {
        WebCore::Node::materializeRareData((WebCore::Node *)v5);
        v29 = *(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL;
      }
      *(_QWORD *)(v29 + 36) = *((_QWORD *)this + 13);
    }
  }
LABEL_13:
  v7 = *((_QWORD *)this + 16);
  if (!v7)
    goto LABEL_14;
  if (!*(_BYTE *)(v7 + 137))
  {
    v21 = *((_QWORD *)this + 3);
    if (!v21)
    {
      if ((*(unsigned int (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)this + 688))(this))
      {
        v36 = this;
        std::make_unique[abi:sn180100]<WebCore::ScrollbarsControllerMock,WebCore::ScrollableArea &,WebCore::ScrollableArea::internalCreateScrollbarsController(void)::$_0>((uint64_t *)&v37, (uint64_t)this, (uint64_t *)&v36);
        v31 = v37;
        v37 = 0;
        v32 = *((_QWORD *)this + 3);
        *((_QWORD *)this + 3) = v31;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        std::unique_ptr<WebCore::ScrollbarsControllerMock>::~unique_ptr[abi:sn180100](&v37, v30);
      }
      else
      {
        (*(void (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)this + 304))(this);
      }
      v21 = *((_QWORD *)this + 3);
      if (!v21)
      {
        __break(0xC471u);
        JUMPOUT(0x1943DF700);
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 216))(v21);
    v7 = *((_QWORD *)this + 16);
  }
  v22 = *(_QWORD *)(v7 + 32);
  if (v22 && (v23 = *(_QWORD *)(v22 + 8)) != 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 336))(v23);
    v7 = *((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = 0;
    if (!v7)
      goto LABEL_14;
  }
  else
  {
    *((_QWORD *)this + 16) = 0;
  }
  if (*(_DWORD *)(v7 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  else
    --*(_DWORD *)(v7 + 8);
LABEL_14:
  v8 = *((_QWORD *)this + 17);
  if (!v8)
    goto LABEL_15;
  if (!*(_BYTE *)(v8 + 137))
  {
    v24 = *((_QWORD *)this + 3);
    if (!v24)
    {
      if ((*(unsigned int (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)this + 688))(this))
      {
        v36 = this;
        std::make_unique[abi:sn180100]<WebCore::ScrollbarsControllerMock,WebCore::ScrollableArea &,WebCore::ScrollableArea::internalCreateScrollbarsController(void)::$_0>((uint64_t *)&v37, (uint64_t)this, (uint64_t *)&v36);
        v34 = v37;
        v37 = 0;
        v35 = *((_QWORD *)this + 3);
        *((_QWORD *)this + 3) = v34;
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        std::unique_ptr<WebCore::ScrollbarsControllerMock>::~unique_ptr[abi:sn180100](&v37, v33);
      }
      else
      {
        (*(void (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)this + 304))(this);
      }
      v24 = *((_QWORD *)this + 3);
      if (!v24)
      {
        __break(0xC471u);
        JUMPOUT(0x1943DF754);
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 200))(v24);
    v8 = *((_QWORD *)this + 17);
  }
  v25 = *(_QWORD *)(v8 + 32);
  if (v25 && (v26 = *(_QWORD *)(v25 + 8)) != 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 336))(v26);
    v8 = *((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = 0;
    if (!v8)
      goto LABEL_15;
  }
  else
  {
    *((_QWORD *)this + 17) = 0;
  }
  if (*(_DWORD *)(v8 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  else
    --*(_DWORD *)(v8 + 8);
LABEL_15:
  result = (WTF *)WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40) + 8) + 528)
                                                                                                + 8)
                                                                                    + 24)
                                                                        + 8));
  if (result)
    result = (WTF *)(*(uint64_t (**)(WTF *, WebCore::RenderLayerScrollableArea *))(*(_QWORD *)result + 448))(result, this);
  v12 = (void **)((char *)this + 152);
  v11 = *((_QWORD *)this + 19);
  if (v11)
  {
    result = *(WTF **)(v11 + 32);
    *(_QWORD *)(v11 + 32) = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        result = (WTF *)WTF::fastFree(result, v10);
      else
        --*(_DWORD *)result;
    }
    v10 = *v12;
    *v12 = 0;
    if (v10)
      result = (WTF *)WebCore::RenderObjectDeleter::operator()((uint64_t)this + 152, (uint64_t)v10);
  }
  v15 = *((_QWORD *)this + 20);
  v14 = (uint64_t *)((char *)this + 160);
  v13 = v15;
  if (v15)
  {
    result = *(WTF **)(v13 + 32);
    *(_QWORD *)(v13 + 32) = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        result = (WTF *)WTF::fastFree(result, v10);
      else
        --*(_DWORD *)result;
    }
    v28 = *v14;
    *v14 = 0;
    if (v28)
      return (WTF *)WebCore::RenderObjectDeleter::operator()((uint64_t)v14, v28);
  }
  return result;
}

void WebCore::RenderTableCell::~RenderTableCell(WebCore::RenderTableCell *this, void *a2)
{
  uint64_t v2;
  void *v3;

  WebCore::RenderBlockFlow::~RenderBlockFlow(this, a2);
  if (*(_DWORD *)(v2 + 16))
  {
    *(_QWORD *)(v2 + 256) = 0;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
}

void WebCore::RenderText::~RenderText(WebCore::RenderText *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  void *v4;

  *(_QWORD *)this = off_1E3434D90;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::RenderObject::~RenderObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_QWORD *)this + 14) = 0;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v4);
  }
}

{
  WTF::StringImpl *v3;

  *(_QWORD *)this = off_1E3434D90;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::RenderObject::~RenderObject(this, a2);
}

void WebCore::RenderObject::~RenderObject(WebCore::RenderObject *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)this = off_1E342E320;
  v3 = *((_QWORD *)this + 7);
  if (v3)
  {
    v16 = *(_QWORD *)(v3 + 112);
    *(_QWORD *)(v3 + 112) = 0;
    if (v16)
    {
      v17 = *(_DWORD *)(v16 + 16);
      if (!v17)
      {
        __break(0xC471u);
        JUMPOUT(0x1943DFB80);
      }
      *(_DWORD *)(v16 + 16) = v17 - 1;
    }
    v18 = *((_QWORD *)this + 7);
    if (v18)
    {
      v19 = *(_DWORD *)(v18 + 8);
      if (!v19)
      {
        __break(0xC471u);
        JUMPOUT(0x1943DFBA0);
      }
      *(_DWORD *)(v18 + 8) = v19 - 1;
    }
    *((_QWORD *)this + 7) = 0;
  }
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944);
  v5 = *(_DWORD *)(v4 + 16);
  --*(_QWORD *)(v4 + 256);
  *(_DWORD *)(v4 + 16) = v5 + 1;
  if (v5 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x1943DFB60);
  }
  *(_DWORD *)(v4 + 16) = v5;
  v6 = (WTF *)(*(unsigned int *)((char *)this + 47) | ((unint64_t)*((unsigned __int8 *)this + 51) << 32));
  *(_DWORD *)((char *)this + 47) = 0;
  *((_BYTE *)this + 51) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  v7 = (WTF *)(*((unsigned int *)this + 10) | ((unint64_t)*((unsigned __int8 *)this + 44) << 32));
  *((_DWORD *)this + 10) = 0;
  *((_BYTE *)this + 44) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, a2);
    else
      --*(_DWORD *)v7;
  }
  v8 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::fastFree(v8, a2);
    else
      --*(_DWORD *)v8;
  }
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    do
    {
      v12 = __ldaxr((unsigned int *)v9);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v9));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(unsigned int *)(v9 + 28);
      if ((_DWORD)v14)
      {
        v21 = v9;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v9 + 16), (WTF::StringImpl *)(*(_QWORD *)(v9 + 16) + 32 * v14));
        v9 = v21;
      }
      v15 = *(WTF **)(v9 + 16);
      if (v15)
      {
        *(_QWORD *)(v9 + 16) = 0;
        *(_DWORD *)(v9 + 24) = 0;
        v20 = v9;
        WTF::fastFree(v15, a2);
        v9 = v20;
      }
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  *(_QWORD *)this = &off_1E33F87C8;
  v10 = *((_QWORD *)this + 1);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    v11 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
        WTF::fastFree(v11, a2);
      else
        --*(_DWORD *)v11;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

void WebCore::RenderText::willBeDestroyed(uint64_t this, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int16 v7;
  _QWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if ((*(_WORD *)(this + 118) & 0x2000) != 0)
  {
    {
      WebCore::secureTextTimers(void)::map = 0;
      *(_QWORD *)&dword_1EE2F93A0 = 0;
    }
    WTF::WeakHashMap<WebCore::RenderText,std::unique_ptr<WebCore::SecureTextTimer>,WTF::SingleThreadWeakPtrImpl>::remove(this, a2);
  }
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8) + 3405))
  {
    v3 = *(_QWORD **)(this + 64);
    if (v3)
    {
      do
      {
        v17 = v3[3];
        if (v17)
        {
          if ((*(_WORD *)(v17 + 52) & 0x100) == 0)
            (*(void (**)(_QWORD))(*(_QWORD *)v17 + 184))(v3[3]);
          if (*(_QWORD **)(v17 + 72) == v3)
            *(_QWORD *)(v17 + 72) = v3[1];
          if (*(_QWORD **)(v17 + 80) == v3)
            *(_QWORD *)(v17 + 80) = v3[2];
          v18 = v3[1];
          if (v18)
            *(_QWORD *)(v18 + 16) = v3[2];
          v19 = v3[2];
          if (v19)
            *(_QWORD *)(v19 + 8) = v18;
          v3[3] = 0;
        }
        v3 = (_QWORD *)v3[8];
      }
      while (v3);
    }
    else
    {
      v4 = *(_QWORD *)(this + 32);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 672))(v5, this);
      }
    }
  }
  v6 = *(_QWORD **)(this + 64);
  if (v6)
  {
    do
    {
      v8 = (_QWORD *)v6[8];
      (*(void (**)(_QWORD *))(*v6 + 8))(v6);
      v6 = v8;
    }
    while (v8);
    *(_QWORD *)(this + 64) = 0;
    *(_QWORD *)(this + 72) = 0;
  }
  v7 = *(_WORD *)(this + 118);
  if ((v7 & 0x800) != 0)
  {
    {
      if (WebCore::originalTextMap(void)::map)
      {
        v9 = *(_DWORD *)(WebCore::originalTextMap(void)::map - 8);
        v10 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
        v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
        v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
        v13 = v9 & ((v12 >> 31) ^ v12);
        for (i = 1; ; ++i)
        {
          v15 = v13;
          v16 = *(_QWORD *)(WebCore::originalTextMap(void)::map + 16 * v13);
          if (v16 != -1)
          {
            if (!v16)
              goto LABEL_9;
            if (*(_QWORD *)(v16 + 8) == this)
              break;
          }
          v13 = (v15 + i) & v9;
        }
        if ((_DWORD)v15 != *(_DWORD *)(WebCore::originalTextMap(void)::map - 4))
        {
          WTF::HashTable<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>>::remove((WTF **)(WebCore::originalTextMap(void)::map + 16 * v15), a2);
          v7 = *(_WORD *)(this + 118);
        }
      }
    }
    else
    {
      WebCore::originalTextMap(void)::map = 0;
    }
  }
LABEL_9:
  if ((v7 & 0x1000) != 0)
  {
    {
      WebCore::inlineWrapperForDisplayContentsMap(void)::map = 0;
    }
    WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>(&WebCore::inlineWrapperForDisplayContentsMap(void)::map, this);
    *(_WORD *)(this + 118) &= ~0x1000u;
  }
  WebCore::RenderObject::willBeDestroyed((WebCore::RenderObject *)this, a2);
}

void WebCore::Document::clearAXObjectCache(WebCore::Document *this)
{
  WebCore::AXObjectCache *v2;
  _DWORD *v3;
  void *v4;

  v2 = (WebCore::AXObjectCache *)*((_QWORD *)this + 186);
  *((_QWORD *)this + 186) = 0;
  if (v2)
  {
    WebCore::AXObjectCache::~AXObjectCache(v2);
    if (v3[2])
      bzero(v3, 0x318uLL);
    else
      WTF::fastFree((WTF *)v3, v4);
  }
}

uint64_t WebCore::RenderLayerBacking::clearBackingSharingLayers(void **this)
{
  uint64_t *v2;
  uint64_t result;
  void *v4;
  _QWORD *v5;
  WTF *i;
  uint64_t v7;
  WTF *v8;
  WTF *v9;

  v2 = (uint64_t *)(this + 2);
  result = (uint64_t)WebCore::clearBackingSharingLayerProviders((WTF *)(this + 2), this[1]);
  v5 = this + 3;
  for (i = (WTF *)this[3]; i; result = WTF::fastFree(v8, v4))
  {
    v8 = i;
    i = (WTF *)*((_QWORD *)i + 2);
    v9 = *(WTF **)v8;
    *(_QWORD *)v8 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
        WTF::fastFree(v9, v4);
      else
        --*(_DWORD *)v9;
    }
  }
  v7 = *v2;
  if (*v2)
  {
    *v2 = 0;
    result = WTF::fastFree((WTF *)(v7 - 16), v4);
    v7 = *v2;
    *v5 = 0;
    this[4] = 0;
    *((_DWORD *)this + 10) = 0;
    if (v7)
    {
      LODWORD(v7) = *(_DWORD *)(v7 - 12);
      if (v7 > 0x7FFFFFFE)
        LODWORD(v7) = 0x7FFFFFFF;
    }
  }
  else
  {
    *v5 = 0;
    this[4] = 0;
    *((_DWORD *)this + 10) = 0;
  }
  *((_DWORD *)this + 11) = 2 * v7;
  return result;
}

void WebCore::ScrollAnimatorIOS::~ScrollAnimatorIOS(WebCore::ScrollAnimatorIOS *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ScrollAnimator::~ScrollAnimator(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::findRenderingAncestor(WebCore *this, WebCore::Node *a2)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *((_DWORD *)this + 6) += 2;
  v3 = *((unsigned __int16 *)this + 14);
  if ((v3 & 0x80) != 0)
  {
    v13 = *((_QWORD *)this + 25);
    if (!v13)
      goto LABEL_10;
LABEL_29:
    v4 = *(_QWORD *)(v13 + 8);
LABEL_30:
    if (v4)
      goto LABEL_8;
    goto LABEL_10;
  }
  if ((~v3 & 0x408) == 0
    && (*(unsigned int (**)(WebCore *, WebCore::Node *))(*(_QWORD *)this + 368))(this, a2))
  {
    v13 = *((_QWORD *)this + 14);
    if (!v13)
      goto LABEL_10;
    goto LABEL_29;
  }
  v4 = *((_QWORD *)this + 4);
  if (!v4)
    goto LABEL_10;
  v5 = *(_WORD *)(v4 + 28);
  if ((v5 & 0x80) != 0)
  {
    v13 = *(_QWORD *)(v4 + 200);
    if (!v13)
      goto LABEL_10;
    goto LABEL_29;
  }
  if ((v5 & 8) == 0)
    goto LABEL_10;
  if ((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v8 = *(_QWORD *)((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 224);
      if (v9)
      {
        v4 = (*(uint64_t (**)(uint64_t, WebCore *))(*(_QWORD *)v9 + 16))(v9, this);
        goto LABEL_30;
      }
LABEL_10:
      v6 = 0;
      goto LABEL_12;
    }
  }
LABEL_8:
  while ((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) == 0)
  {
    if ((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_10;
    v10 = *(_QWORD *)((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
    if (!v10)
      goto LABEL_10;
    if ((*(_QWORD *)(v10 + 16) & 0x1FLL) != 0x12)
      goto LABEL_10;
    v11 = *(_QWORD *)(v4 + 32);
    if (!v11)
      goto LABEL_10;
    v12 = *(_WORD *)(v11 + 28);
    if ((v12 & 0x80) != 0)
    {
      v16 = *(_QWORD *)(v11 + 200);
      if (!v16)
        goto LABEL_10;
      v11 = *(_QWORD *)(v16 + 8);
    }
    else
    {
      if ((v12 & 8) == 0)
        goto LABEL_10;
      if ((*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v14 = *(_QWORD *)((*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 224);
          if (!v15)
            goto LABEL_10;
          v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
        }
      }
    }
    v6 = 0;
    v4 = v11;
    if (!v11)
      goto LABEL_12;
  }
  v6 = v4;
  if ((*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1943E00F0);
  }
LABEL_12:
  if (*((_DWORD *)this + 6) == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(this);
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
  return v6;
}

void WebCore::ScrollAnimator::~ScrollAnimator(WebCore::ScrollAnimator *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  unsigned __int8 **v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;

  *(_QWORD *)this = off_1E3405EF0;
  v3 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(*(_QWORD *)v3 + 8) = 0;
      v8 = *(unsigned int **)v3;
      *(_QWORD *)v3 = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          v11 = v3;
          WTF::fastFree((WTF *)v8, a2);
          v3 = v11;
        }
      }
    }
    else
    {
      *(_QWORD *)v3 = 0;
    }
    if (v3[2])
    {
      *(_OWORD *)v3 = 0u;
      *((_OWORD *)v3 + 1) = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *((_QWORD *)this + 3) = &off_1E3406D78;
  v4 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (WTF *)*((_QWORD *)this + 6);
  if (v6)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (unsigned __int8 **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*v7, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::ScrollAnimator::~ScrollAnimator(this, a2);
  WTF::fastFree(v2, v3);
}

WTF *WebCore::LocalFrameView::willDestroyRenderTree(WebCore::LocalFrameView *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  WTF *result;

  v2 = *((_QWORD *)this + 19);
  if (v2 && *(_BYTE *)(v2 + 137))
    WebCore::ScrollView::setHasScrollbarInternal(this, (uint64_t *)this + 19, 0, 0, 0);
  v3 = *((_QWORD *)this + 20);
  if (v3 && *(_BYTE *)(v3 + 137))
    WebCore::ScrollView::setHasScrollbarInternal(this, (uint64_t *)this + 20, 1, 0, 0);
  v4 = (void *)*((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v4)
    WebCore::RenderObjectDeleter::operator()((uint64_t)this + 664, (uint64_t)v4);
  result = (WTF *)*((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v4);
    else
      --*(_DWORD *)result;
  }
  return result;
}

void WebCore::ClipRectsCache::~ClipRectsCache(WebCore::ClipRectsCache *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;

  v3 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  v4 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  v5 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
  v6 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  v7 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, a2);
    else
      --*(_DWORD *)v7;
  }
  v8 = *(WTF **)this;
  *(_QWORD *)this = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::fastFree(v8, a2);
    else
      --*(_DWORD *)v8;
  }
}

int *WebCore::CSSToStyleMap::mapFillSize(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __int128 v6;
  WebCore::Node *v7;
  BOOL v8;
  int *result;
  int v10;
  void *v11;
  char v12;
  char v13[4];
  unsigned int v14[2];
  unsigned int v15;
  __int16 v16;
  char v17;
  _OWORD v18[2];
  WebCore::Node *v19;
  __int128 v20;
  __int128 v21;
  char v22;
  _DWORD v23[2];
  _DWORD v24[2];
  _DWORD v25[5];

  if (((*(unsigned __int16 *)(a4 + 4) | (*(unsigned __int8 *)(a4 + 6) << 16)) & 0x3F87F) != 0x50)
    goto LABEL_2;
  v10 = *(unsigned __int16 *)(a4 + 8);
  if (v10 != 2)
  {
    if (v10 != 3)
    {
      v22 = 2;
      memset(v23, 0, 7);
      memset(v24, 0, 7);
      if (v10 == 622)
      {
        v12 = 1;
      }
      else
      {
        v12 = 0;
        if (v10 != 621)
          goto LABEL_3;
      }
      v22 = v12;
      v13[0] = v12;
      memset(v14, 0, 7);
      goto LABEL_51;
    }
    if (WebCore::isInheritedPropertyTable[a2])
    {
LABEL_2:
      v22 = 2;
      memset(v23, 0, 7);
      memset(v24, 0, 7);
LABEL_3:
      v5 = *a1;
      v6 = *(_OWORD *)(*a1 + 80);
      v18[0] = *(_OWORD *)(*a1 + 64);
      v18[1] = v6;
      v7 = *(WebCore::Node **)(v5 + 96);
      if (v7)
        *((_DWORD *)v7 + 6) += 2;
      v19 = v7;
      v20 = *(_OWORD *)(v5 + 104);
      v21 = *(_OWORD *)(v5 + 120);
      v8 = WebCore::convertToLengthSize(a4, (const WebCore::CSSToLengthConversionData *)v18, (uint64_t)v23);
      result = (int *)v19;
      v19 = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = (int *)WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
        else
        {
          result[6] -= 2;
        }
      }
      if (!v8)
        goto LABEL_23;
      v13[0] = v22;
      v14[0] = 0;
      LOBYTE(v14[1]) = v23[1];
      *(_WORD *)((char *)&v14[1] + 1) = BYTE1(v23[1]);
      if (LOBYTE(v23[1]) - 2 < 9)
      {
        BYTE2(v14[1]) = BYTE2(v23[1]);
        v14[0] = v23[0];
LABEL_17:
        v15 = 0;
        v17 = 0;
        v16 = v24[1];
        if (LOBYTE(v24[1]) - 2 >= 9)
        {
          if (LOBYTE(v24[1]) == 11)
          {
            v15 = v24[0];
            WebCore::Length::ref((int *)&v15);
          }
        }
        else
        {
          v17 = BYTE2(v24[1]);
          v15 = v24[0];
        }
        result = WebCore::FillLayer::setSize(a3, (uint64_t)v13);
        if (v16 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v15);
        }
        if (LOBYTE(v14[1]) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v14[0]);
        }
LABEL_23:
        if (LOBYTE(v24[1]) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v24[0]);
        }
        if (LOBYTE(v23[1]) != 11)
          return result;
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v11 = (void *)v23[0];
        return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v11);
      }
      if (LOBYTE(v23[1]) > 0xDu)
        goto LABEL_17;
      if (LOBYTE(v23[1]) == 11)
      {
        v14[0] = v23[0];
        WebCore::Length::ref((int *)v14);
        goto LABEL_17;
      }
      if (((1 << SLOBYTE(v23[1])) & 0x3003) == 0)
        goto LABEL_17;
LABEL_51:
      v14[0] = 0;
      goto LABEL_17;
    }
  }
  LOBYTE(v25[0]) = 2;
  memset(&v25[1], 0, 7);
  memset(&v25[3], 0, 7);
  result = WebCore::FillLayer::setSize(a3, (uint64_t)v25);
  if (LOBYTE(v25[4]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v25[3]);
  }
  if (LOBYTE(v25[2]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    v11 = (void *)v25[1];
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v11);
  }
  return result;
}

void WebCore::FillSize::~FillSize(WebCore::FillSize *this)
{
  if (*((_BYTE *)this + 16) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 3));
  }
  if (*((_BYTE *)this + 8) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 1));
  }
}

BOOL WebCore::convertToLengthSize(uint64_t a1, const WebCore::CSSToLengthConversionData *a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v12;
  char v13;

  v6 = (*(unsigned __int16 *)(a1 + 4) | (*(unsigned __int8 *)(a1 + 6) << 16)) & 0x3F800;
  if (v6 == 112640)
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (((*(unsigned __int16 *)(v7 + 4) | (*(unsigned __int8 *)(v7 + 6) << 16)) & 0x3F800) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1943E09F8);
    }
    WebCore::CSSPrimitiveValue::convertToLength<-1>((uint64_t)&v12, v7, a2);
    WebCore::Length::operator=((unsigned int *)a3, &v12);
    if (v13 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v12);
    }
    if (((*(unsigned __int16 *)(a1 + 4) | (*(unsigned __int8 *)(a1 + 6) << 16)) & 0x3F800) != 0x1B800)
    {
      __break(0xC471u);
      JUMPOUT(0x1943E0A18);
    }
    v8 = *(_QWORD *)(a1 + 16);
    if (((*(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16)) & 0x3F800) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1943E0A38);
    }
    WebCore::CSSPrimitiveValue::convertToLength<-1>((uint64_t)&v12, v8, a2);
    v9 = (unsigned int *)(a3 + 8);
  }
  else
  {
    if (v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1943E0A58);
    }
    WebCore::CSSPrimitiveValue::convertToLength<-1>((uint64_t)&v12, a1, a2);
    v9 = (unsigned int *)a3;
  }
  WebCore::Length::operator=(v9, &v12);
  if (v13 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v12);
  }
  return *(_BYTE *)(a3 + 4) != 13 && *(_BYTE *)(a3 + 12) != 13;
}

void WebCore::Image::computeIntrinsicDimensions(WebCore::Image *this, WebCore::Length *a2, WebCore::Length *a3, WebCore::FloatSize *a4)
{
  float v7;
  int v8;
  int v9;
  float v10;
  int v11;

  v7 = (*(float (**)(WebCore::Image *, _QWORD))(*(_QWORD *)this + 168))(this, 0);
  *(float *)a4 = v7;
  *((_DWORD *)a4 + 1) = v8;
  if (*((_BYTE *)a2 + 4) == 11)
  {
    v10 = v7;
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)a2);
    v7 = v10;
  }
  *((_WORD *)a2 + 2) = 4;
  *((_BYTE *)a2 + 6) = 1;
  *(float *)a2 = v7;
  v9 = *((_DWORD *)a4 + 1);
  if (*((_BYTE *)a3 + 4) == 11)
  {
    v11 = *((_DWORD *)a4 + 1);
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)a3);
    v9 = v11;
  }
  *((_WORD *)a3 + 2) = 4;
  *((_BYTE *)a3 + 6) = 1;
  *(_DWORD *)a3 = v9;
}

unsigned int *WebCore::Length::operator=(unsigned int *result, unsigned int *a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;

  if (result != a2)
  {
    if (*((_BYTE *)result + 4) == 11)
    {
      v6 = a2;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v5 = result;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*result);
      result = v5;
      a2 = v6;
    }
    v2 = *((unsigned __int8 *)a2 + 4);
    *((_BYTE *)result + 4) = v2;
    *((_BYTE *)result + 5) = *((_BYTE *)a2 + 5);
    if (v2 - 2 >= 9)
    {
      if (v2 > 0xD)
        goto LABEL_6;
      if (((1 << v2) & 0x3003) != 0)
      {
        *result = 0;
        goto LABEL_6;
      }
      if (v2 != 11)
        goto LABEL_6;
      v4 = *a2;
      *a2 = 0;
    }
    else
    {
      v3 = *((unsigned __int8 *)a2 + 6);
      *((_BYTE *)result + 6) = v3;
      if (v3)
      {
        *result = *a2;
LABEL_6:
        *((_BYTE *)a2 + 4) = 0;
        return result;
      }
      v4 = *a2;
    }
    *result = v4;
    goto LABEL_6;
  }
  return result;
}

float WebCore::CSSPrimitiveValue::convertToLength<-1>(uint64_t a1, uint64_t a2, const WebCore::CSSToLengthConversionData *a3)
{
  float result;
  __n128 v7;
  __n128 v8;
  __int16 v9;
  int v10;
  void *v11;
  WTF *v12;

  if (!WebCore::CSSPrimitiveValue::convertingToLengthHasRequiredConversionData((WebCore::CSSPrimitiveValue *)a2, -1, a3))
  {
LABEL_14:
    *(_DWORD *)a1 = 0;
    *(_WORD *)(a1 + 4) = 13;
    *(_BYTE *)(a1 + 6) = 0;
    return result;
  }
  if (WebCore::CSSPrimitiveValue::isLength((WebCore::CSSPrimitiveValue *)a2))
    return WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>(a2, (uint64_t)a3, a1, v7);
  if (WebCore::CSSPrimitiveValue::isLength((WebCore::CSSPrimitiveValue *)a2))
  {
    result = WebCore::CSSPrimitiveValue::computeLength<double>(a2, (uint64_t)a3, v8);
    *(float *)a1 = result;
    v9 = 4;
    goto LABEL_6;
  }
  if (WebCore::CSSPrimitiveValue::primitiveType((WebCore::CSSPrimitiveValue *)a2) != 3)
  {
    v10 = *(_WORD *)(a2 + 4) & 0x7F;
    if (v10 == 80)
    {
      if (*(_WORD *)(a2 + 8) == 394)
      {
        *(_DWORD *)(a1 + 3) = 0;
        *(_DWORD *)a1 = 0;
        return result;
      }
    }
    else if (v10 == 73)
    {
      WebCore::CSSCalcValue::createCalculationValue(*(WebCore::CSSCalcValue **)(a2 + 8), a3, &v12);
      WebCore::Length::Length(a1, &v12);
      WTF::Ref<WebCore::CalculationValue,WTF::RawPtrTraits<WebCore::CalculationValue>,WTF::DefaultRefDerefTraits<WebCore::CalculationValue>>::~Ref(&v12, v11);
      return result;
    }
    goto LABEL_14;
  }
  result = WebCore::CSSPrimitiveValue::doubleValue((WebCore::CSSPrimitiveValue *)a2);
  *(float *)a1 = result;
  v9 = 3;
LABEL_6:
  *(_WORD *)(a1 + 4) = v9;
  *(_BYTE *)(a1 + 6) = 1;
  return result;
}

BOOL WebCore::CSSPrimitiveValue::isLength(WebCore::CSSPrimitiveValue *this)
{
  __int16 v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  BOOL v6;
  _BYTE *v9;
  int v10;

  v2 = *((_WORD *)this + 2);
  v3 = v2 & 0x7F;
  v4 = 22;
  if ((v3 - 79) < 2)
    return v4 == 81 || v4 - 49 < 6;
  if (v3 == 77)
  {
    v4 = 20;
    return v4 == 81 || v4 - 49 < 6;
  }
  if (v3 == 63)
    return v4 == 81 || v4 - 49 < 6;
  v4 = v2 & 0x7F;
  if (v4 == 73)
  {
    v9 = *(_BYTE **)(*((_QWORD *)this + 1) + 8);
    if (v9[12] != 1)
    {
      v10 = 74;
      v4 = 1;
      switch(v9[12])
      {
        case 0:
          return v4 == 81 || v4 - 49 < 6;
        case 2:
          v4 = 3;
          return v4 == 81 || v4 - 49 < 6;
        case 3:
          break;
        case 4:
          v10 = 75;
          break;
        case 5:
        case 6:
        case 7:
        case 8:
          goto LABEL_20;
        default:
          v4 = 0;
          return v4 == 81 || v4 - 49 < 6;
      }
      v4 = v10;
      return v4 == 81 || v4 - 49 < 6;
    }
LABEL_20:
    v4 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v9 + 72))(v9);
  }
  v5 = 1;
  v6 = v4 - 60 > 0x15 || ((1 << (v4 - 60)) & 0x201FE7) == 0;
  if (v6 && v4 - 4 >= 8 && (v4 < 0x19 || v4 >= 0x31))
    return v4 == 81 || v4 - 49 < 6;
  return v5;
}

BOOL WebCore::CSSPrimitiveValue::convertingToLengthHasRequiredConversionData(WebCore::CSSPrimitiveValue *this, char a2, const WebCore::CSSToLengthConversionData *a3)
{
  void *v4;
  _BOOL8 v5;
  WTF *v6;
  WTF *v7;
  WTF *v9[2];
  WTF *v10[2];
  __int16 v11;

  if ((a2 & 3) == 0)
    return 1;
  v11 = 0;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)v10 = 0u;
  WebCore::CSSValue::collectComputedStyleDependencies((uint64_t)this, (WebCore::ComputedStyleDependencies *)v9);
  v5 = (!HIDWORD(v10[1]) || *((_QWORD *)a3 + 1))
    && (!HIDWORD(v9[1]) || *(_QWORD *)a3)
    && (!(_BYTE)v11 || *((_QWORD *)a3 + 4))
    && (!HIBYTE(v11) || *((_QWORD *)a3 + 3));
  v6 = v10[0];
  if (v10[0])
  {
    v10[0] = 0;
    LODWORD(v10[1]) = 0;
    WTF::fastFree(v6, v4);
  }
  v7 = v9[0];
  if (v9[0])
  {
    v9[0] = 0;
    LODWORD(v9[1]) = 0;
    WTF::fastFree(v7, v4);
  }
  return v5;
}

uint64_t WebCore::CSSValue::collectComputedStyleDependencies(uint64_t this, WebCore::ComputedStyleDependencies *a2)
{
  WebCore::ComputedStyleDependencies *v2;
  int v3;
  uint64_t v4;
  __int16 *v5;
  __int16 v6;
  _DWORD *v7;
  __int16 *v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::CSSValue **v14;
  unsigned __int16 *v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  unsigned __int16 v19;
  __int16 v20;
  __int16 v21;
  unsigned __int16 v22;
  __int16 v23;

  v2 = a2;
  v3 = *(unsigned __int16 *)(this + 4) | (*(unsigned __int8 *)(this + 6) << 16);
  if ((v3 & 0x3F800u) > 0x1D000)
  {
    v9 = *(_DWORD *)(this + 8);
    if (v9)
    {
      v10 = 0;
      v11 = 0;
      v12 = this + 16;
      do
      {
        v13 = this;
        if (v10 > 3)
        {
          if (*(_DWORD *)(this + 8) <= v10)
          {
            this = 148;
            __break(0xC471u);
            return this;
          }
          v14 = (WebCore::CSSValue **)(*(_QWORD *)(this + 48) + 8 * (v11 - 4));
        }
        else
        {
          v14 = (WebCore::CSSValue **)(v12 + 8 * v11);
        }
        WebCore::CSSValue::collectComputedStyleDependencies(*v14, v2);
        v10 = v11 + 1;
        v11 = (v11 + 1);
        this = v13;
      }
      while (v9 != v10);
    }
  }
  else if ((v3 & 0x3F800) == 0)
  {
    switch(*(_WORD *)(this + 4) & 0x7F)
    {
      case 4:
      case 5:
      case 0x43:
      case 0x45:
      case 0x47:
      case 0x51:
        v20 = 13;
        v8 = &v20;
        return WTF::Vector<WebCore::CSSPropertyID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendIfNotContains<WebCore::CSSPropertyID>((uint64_t)v2, (unsigned __int16 *)v8);
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
        *((_BYTE *)a2 + 33) = 1;
        return this;
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
        *((_BYTE *)a2 + 32) = 1;
        return this;
      case 0x3D:
        v19 = 13;
        WTF::Vector<WebCore::CSSPropertyID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendIfNotContains<WebCore::CSSPropertyID>((uint64_t)a2, &v19);
        v18 = 154;
        v8 = &v18;
        return WTF::Vector<WebCore::CSSPropertyID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendIfNotContains<WebCore::CSSPropertyID>((uint64_t)v2, (unsigned __int16 *)v8);
      case 0x3E:
        v2 = (WebCore::ComputedStyleDependencies *)((char *)a2 + 16);
        v22 = 13;
        WTF::Vector<WebCore::CSSPropertyID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendIfNotContains<WebCore::CSSPropertyID>((uint64_t)a2 + 16, &v22);
        v21 = 154;
        v8 = &v21;
        return WTF::Vector<WebCore::CSSPropertyID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendIfNotContains<WebCore::CSSPropertyID>((uint64_t)v2, (unsigned __int16 *)v8);
      case 0x41:
      case 0x42:
      case 0x44:
      case 0x46:
      case 0x48:
        this = (uint64_t)a2 + 16;
        v23 = 13;
        v4 = *((unsigned int *)a2 + 7);
        if (!(_DWORD)v4)
          goto LABEL_6;
        v15 = *(unsigned __int16 **)this;
        v16 = *((unsigned int *)a2 + 7);
        break;
      case 0x49:
        v7 = *(_DWORD **)(*(_QWORD *)(this + 8) + 8);
        ++v7[2];
        this = (*(uint64_t (**)(_DWORD *, WebCore::ComputedStyleDependencies *))(*(_QWORD *)v7 + 80))(v7, a2);
        if (v7[2] == 1)
          return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
        --v7[2];
        return this;
      case 0x4C:
        return (uint64_t)WebCore::CSSAnchorValue::collectComputedStyleDependencies(*(WebCore::CSSAnchorValue **)(this + 8), a2);
      default:
        return this;
    }
    while (1)
    {
      v17 = *v15++;
      if (v17 == 13)
        break;
      if (!--v16)
      {
LABEL_6:
        if ((_DWORD)v4 == *((_DWORD *)a2 + 6))
        {
          this = WTF::Vector<WebCore::CSSPropertyID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(this, v4 + 1, (unint64_t)&v23);
          v4 = *((unsigned int *)v2 + 7);
          v5 = (__int16 *)(*((_QWORD *)v2 + 2) + 2 * v4);
          v6 = *(_WORD *)this;
        }
        else
        {
          v5 = (__int16 *)(*(_QWORD *)this + 2 * v4);
          v6 = 13;
        }
        *v5 = v6;
        *((_DWORD *)v2 + 7) = v4 + 1;
        return this;
      }
    }
  }
  return this;
}

uint64_t WebCore::nsCookiesToCookieVector(uint64_t a1, void *a2, _QWORD *a3)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t result;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSHTTPCookie *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  void *v21;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = objc_msgSend(a2, "count");
  if (v4)
  {
    if (v4 >= 0x1E1E1E2)
    {
      __break(0xC471u);
      JUMPOUT(0x1943E1530);
    }
    v5 = 136 * v4;
    v6 = (uint64_t *)WTF::fastMalloc((WTF *)(136 * v4));
    v7 = v5 / 0x88;
    *(_DWORD *)(a1 + 8) = v5 / 0x88;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  v10 = 0;
  v11 = result;
  if (result)
  {
    v12 = *(_QWORD *)v25;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v25 != v12)
          objc_enumerationMutation(a2);
        v14 = *(NSHTTPCookie **)(*((_QWORD *)&v24 + 1) + 8 * v13);
        if (!*a3
          || (*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 16))(*a3, *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * v13)))
        {
          if (v10 == v7)
          {
            v15 = ((unint64_t)v7 >> 2) + v7;
            if (v15 >= 0x10)
              v16 = v15 + 1;
            else
              v16 = 16;
            if (v16 <= (unint64_t)v7 + 1)
              v17 = v7 + 1;
            else
              v17 = v16;
            if (v17 >= 0x1E1E1E2)
              goto LABEL_42;
            v18 = 136 * v17;
            v19 = WTF::fastMalloc((WTF *)(136 * v17));
            v20 = v18 / 0x88;
            *(_DWORD *)(a1 + 8) = v20;
            *(_QWORD *)a1 = v19;
            WTF::VectorMover<false,WebCore::Cookie>::move(v6, &v6[17 * v7], v19);
            if (v6)
            {
              if ((uint64_t *)v19 == v6)
              {
                v20 = 0;
                *(_QWORD *)a1 = 0;
                *(_DWORD *)(a1 + 8) = 0;
              }
              WTF::fastFree((WTF *)v6, v21);
            }
            v6 = *(uint64_t **)a1;
            WebCore::Cookie::Cookie((WebCore::Cookie *)(*(_QWORD *)a1 + 136 * v7), v14);
            v10 = v7;
            v7 = v20;
          }
          else
          {
            WebCore::Cookie::Cookie((WebCore::Cookie *)&v6[17 * v10], v14);
          }
          *(_DWORD *)(a1 + 12) = ++v10;
        }
        ++v13;
      }
      while (v11 != v13);
      result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
      v11 = result;
    }
    while (result);
  }
  if (*a3 && *(_DWORD *)(a1 + 8) > v10)
  {
    if (v10)
    {
      if (v10 >= 0x1E1E1E2)
      {
LABEL_42:
        __break(0xC471u);
        JUMPOUT(0x1943E1528);
      }
      result = WTF::fastMalloc((WTF *)(136 * v10));
      *(_DWORD *)(a1 + 8) = 136 * v10 / 0x88;
      *(_QWORD *)a1 = result;
      if ((uint64_t *)result != v6)
        result = (uint64_t)WTF::VectorMover<false,WebCore::Cookie>::move(v6, &v6[17 * v10], result);
    }
    if (v6)
    {
      if (*(uint64_t **)a1 == v6)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      return WTF::fastFree((WTF *)v6, v9);
    }
  }
  return result;
}

void sub_1943E153C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WebCore::Cookie *v7;
  uint64_t v8;

  v4 = *(unsigned int *)(v2 + 12);
  v5 = *(WTF **)v2;
  if ((_DWORD)v4)
  {
    v6 = 136 * v4;
    v7 = *(WebCore::Cookie **)v2;
    do
    {
      WebCore::Cookie::~Cookie(v7, a2);
      v7 = (WebCore::Cookie *)(v8 + 136);
      v6 -= 136;
    }
    while (v6);
  }
  if (v5)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v5, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebCore::UserContentProvider::invalidateInjectedStyleSheetCacheInAllFramesInAllPages(WebCore::UserContentProvider *this)
{
  uint64_t *v1;
  uint64_t *result;
  uint64_t *v3[5];
  uint64_t *v4;
  uint64_t *v5;

  v1 = (uint64_t *)((char *)this + 16);
  WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t *)this + 2, &v4);
  result = WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v1, v3);
  while (v5 != v3[1])
  {
    WebCore::Page::invalidateInjectedStyleSheetCacheInAllFrames(*(WebCore::Page **)(*v5 + 8));
    result = WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v4);
  }
  return result;
}

uint64_t WebCore::Page::invalidateInjectedStyleSheetCacheInAllFrames(WebCore::Page *this)
{
  uint64_t v2;
  uint64_t v4;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = off_1E3400ED0;
  v4 = v2;
  WebCore::Page::forEachDocument((uint64_t)this, &v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WebCore::LinearTimingFunction::clone@<X0>(WebCore::LinearTimingFunction *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x20);
  result = WebCore::LinearTimingFunction::LinearTimingFunction(v4, (uint64_t)this + 16);
  *a2 = result;
  return result;
}

uint64_t WebCore::LinearTimingFunction::LinearTimingFunction(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  void *v4;
  uint64_t v5;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E338CAA8;
  v2 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 28) = v2;
  if ((_DWORD)v2)
  {
    v5 = result;
    if (v2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = v2;
      v4 = (void *)WTF::fastMalloc((WTF *)(16 * v2));
      *(_DWORD *)(v5 + 24) = v3;
      *(_QWORD *)(v5 + 16) = v4;
      memcpy(v4, *(const void **)a2, 16 * *(unsigned int *)(a2 + 12));
      return v5;
    }
  }
  return result;
}

_QWORD *WebCore::Document::nodeChildrenWillBeRemoved(WebCore::Document *this, WebCore::ContainerNode *a2)
{
  _QWORD *result;
  const WebCore::Position *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  WebCore::Node *v30;
  uint64_t (*v31)();
  uint64_t v32;
  uint64_t *v33;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  __int16 v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  __int16 v53;
  WebCore::ContainerNode *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  WebCore::Node *v60;
  WebCore::NodeIterator *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t *v67;
  _BOOL8 v68;
  int v70;
  uint64_t *v71;
  _BOOL4 v72;
  int v74;
  uint64_t *v75;
  BOOL v76;
  int v78;
  uint64_t *v79;
  _BOOL4 v80;
  int v82;
  uint64_t *v83;
  _BOOL4 v84;
  int v86;
  uint64_t *v87;
  _BOOL4 v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WebCore::Range *v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  char v105;
  char v106;
  char v107;
  int v108;
  int v109;
  int v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  WebCore::Node *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  result = (_QWORD *)WebCore::Document::adjustFocusedNodeOnNodeRemoval((uint64_t)this, (uint64_t)a2, 1);
  v6 = *((_QWORD *)this + 151);
  if (!v6)
    goto LABEL_2;
  v53 = *((_WORD *)a2 + 14);
  if ((v53 & 0xF000) == 0x9000)
  {
    if (**(WebCore::ContainerNode ***)(v6 + 40) != a2
      || (*(_WORD *)(v6 + 28) & 0xF000) == 0x9000
      || (*(_BYTE *)(v6 + 22) & 8) == 0)
    {
      goto LABEL_2;
    }
    goto LABEL_108;
  }
  if ((v53 & 4) != 0
    && *((_QWORD *)a2 + 10)
    && ((*(unsigned __int8 *)(v6 + 22) ^ *((unsigned __int8 *)a2 + 22)) & 8) == 0)
  {
    do
      v6 = *(_QWORD *)(v6 + 32);
    while ((WebCore::ContainerNode *)v6 != a2 && v6 != 0);
    if (v6)
    {
LABEL_108:
      if (a2 == this)
        v55 = 0;
      else
        v55 = a2;
      result = WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)this + 151, (uint64_t)v55);
      *((_BYTE *)this + 3381) = 1;
    }
  }
LABEL_2:
  v7 = *((_QWORD *)this + 165);
  if (!v7)
  {
    v8 = 0;
    v9 = 0;
LABEL_4:
    v10 = v7 + 8 * v9;
    goto LABEL_5;
  }
  v9 = *(unsigned int *)(v7 - 4);
  v10 = v7 + 8 * v9;
  if (!*(_DWORD *)(v7 - 12))
  {
    v8 = v7 + 8 * v9;
    goto LABEL_4;
  }
  v8 = *((_QWORD *)this + 165);
  if ((_DWORD)v9)
  {
    v58 = 8 * v9;
    v8 = *((_QWORD *)this + 165);
    while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
    {
      v8 += 8;
      v58 -= 8;
      if (!v58)
      {
        v8 = v10;
        break;
      }
    }
  }
LABEL_5:
  if (v7)
    v11 = v7 + 8 * *(unsigned int *)(v7 - 4);
  else
    v11 = 0;
  while (v8 != v11)
  {
    v100 = *(WebCore::Range **)(*(_QWORD *)v8 + 8);
    ++*((_DWORD *)v100 + 2);
    result = (_QWORD *)WebCore::Range::nodeChildrenWillBeRemoved(v100, a2);
    if (*((_DWORD *)v100 + 2) == 1)
      result = (_QWORD *)(*(uint64_t (**)(WebCore::Range *))(*(_QWORD *)v100 + 8))(v100);
    else
      --*((_DWORD *)v100 + 2);
    v101 = v8 + 8;
    v8 = v10;
    if (v101 != v10)
    {
      v8 = v101;
      while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
      {
        v8 += 8;
        if (v8 == v10)
        {
          v8 = v10;
          break;
        }
      }
    }
  }
  v12 = *((_QWORD *)this + 163);
  if (!v12)
  {
    v13 = 0;
    v14 = 0;
LABEL_10:
    v15 = v12 + 8 * v14;
    goto LABEL_11;
  }
  v14 = *(unsigned int *)(v12 - 4);
  v15 = v12 + 8 * v14;
  if (!*(_DWORD *)(v12 - 12))
  {
    v13 = v12 + 8 * v14;
    goto LABEL_10;
  }
  v13 = *((_QWORD *)this + 163);
  if ((_DWORD)v14)
  {
    v56 = 8 * v14;
    v13 = *((_QWORD *)this + 163);
    while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
    {
      v13 += 8;
      v56 -= 8;
      if (!v56)
      {
        v13 = v15;
        break;
      }
    }
  }
LABEL_11:
  v118 = (_QWORD *)((char *)this + 1304);
  v119 = v13;
  v120 = v15;
  if (v12)
  {
    v17 = *(unsigned int *)(v12 - 4);
    v16 = v12 + 8 * v17;
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  v121 = v16;
  v122 = v12 + 8 * v17;
  if (v13 != v16)
  {
    v90 = v13;
    while (!*(_QWORD *)(*(_QWORD *)v90 + 8))
    {
      v99 = v90 + 8;
      v119 = v99;
      v90 = v15;
      if (v99 != v15)
      {
        v90 = v99;
        while ((unint64_t)(*(_QWORD *)v90 + 1) <= 1)
        {
          v90 += 8;
          v119 = v90;
          if (v90 == v15)
          {
            v90 = v15;
            break;
          }
        }
      }
      v13 = v16;
      if (v90 == v16)
        goto LABEL_14;
    }
    v13 = v90;
  }
LABEL_14:
  if (v12)
    v18 = v12 + 8 * *(unsigned int *)(v12 - 4);
  else
    v18 = 0;
  while (v13 != v18)
  {
    v60 = (WebCore::Node *)*((_QWORD *)a2 + 10);
    if (v60)
    {
      v61 = *(WebCore::NodeIterator **)(*(_QWORD *)v13 + 8);
      *((_DWORD *)v60 + 6) += 2;
      v117 = v60;
      do
      {
        WebCore::NodeIterator::nodeWillBeRemoved(v61, v60);
        WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v117, *((_QWORD *)v117 + 7));
        v60 = v117;
      }
      while (v117);
    }
    result = WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v118);
    v13 = v119;
  }
  v19 = *((_QWORD *)this + 66);
  if (v19)
  {
    v20 = *(_QWORD **)(v19 + 8);
    if (v20)
    {
      v21 = (unsigned int *)(v20 + 1);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
      v23 = *((_QWORD *)a2 + 10);
      if (!v23)
        goto LABEL_94;
      *(_DWORD *)(v23 + 24) += 2;
LABEL_23:
      v24 = v23;
      v25 = v20[80];
      result = *(_QWORD **)(v25 + 272);
      if (!result)
        goto LABEL_30;
      v26 = *((_DWORD *)result + 6);
      *((_DWORD *)result + 6) = v26 + 2;
      if (result == (_QWORD *)v24)
      {
        if (v26)
        {
          *((_DWORD *)result + 6) = v26;
        }
        else if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v24);
        }
        goto LABEL_27;
      }
      v32 = (uint64_t)result;
      do
      {
        if ((*(_WORD *)(v32 + 28) & 0x80) != 0)
        {
          v57 = *(_QWORD *)(v32 + 200);
          if (!v57)
          {
            if (!v26)
              goto LABEL_65;
LABEL_29:
            *((_DWORD *)result + 6) = v26;
            goto LABEL_30;
          }
          v33 = (uint64_t *)(v57 + 8);
        }
        else
        {
          v33 = (uint64_t *)(v32 + 32);
        }
        v32 = *v33;
      }
      while (*v33 != v24 && v32 != 0);
      if (v26)
      {
        *((_DWORD *)result + 6) = v26;
      }
      else if ((*((_WORD *)result + 15) & 0x400) == 0)
      {
        result = (_QWORD *)WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
      if (v32)
      {
LABEL_27:
        result = *(_QWORD **)(v25 + 272);
        *(_QWORD *)(v25 + 272) = 0;
        if (result)
        {
          v26 = *((_DWORD *)result + 6) - 2;
          if (*((_DWORD *)result + 6) != 2)
            goto LABEL_29;
LABEL_65:
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = (_QWORD *)WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
      }
LABEL_30:
      v27 = *(_QWORD *)(v20[37] + 3064);
      if (!*(_BYTE *)(v27 + 153)
        && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 32) + 8) + 680) + 680) & 0x800000000000000) == 0)
      {
        goto LABEL_33;
      }
      if ((*(_BYTE *)(v24 + 22) & 8) == 0)
        goto LABEL_33;
      v28 = *(_WORD *)(v24 + 30);
      if ((v28 & 0x800) == 0)
        goto LABEL_33;
      v37 = *(_QWORD *)(v27 + 56);
      if (!v37)
        goto LABEL_171;
      if (v37 == v24)
      {
        v38 = 1;
        goto LABEL_72;
      }
      if ((*(_WORD *)(v24 + 28) & 8) == 0)
      {
LABEL_171:
        v38 = 0;
        goto LABEL_72;
      }
      v66 = *(_DWORD *)(v24 + 24);
      *(_DWORD *)(v24 + 24) = v66 + 2;
      while (1)
      {
        if ((*(_WORD *)(v37 + 28) & 0x80) != 0)
        {
          v93 = *(_QWORD *)(v37 + 200);
          if (!v93)
          {
            v68 = 0;
LABEL_168:
            if (v66)
            {
              *(_DWORD *)(v24 + 24) = v66;
            }
            else if ((v28 & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v24);
            }
            v38 = v68;
LABEL_72:
            v39 = *(_QWORD *)(v27 + 72);
            if (!v39)
            {
              v40 = 0;
              goto LABEL_75;
            }
            if (v39 == v24)
            {
              v40 = 1;
              goto LABEL_75;
            }
            v112 = v38;
            if ((*(_WORD *)(v24 + 28) & 8) == 0)
            {
              v40 = 0;
              v38 = v38;
              goto LABEL_75;
            }
            v70 = *(_DWORD *)(v24 + 24);
            *(_DWORD *)(v24 + 24) = v70 + 2;
            while (2)
            {
              if ((*(_WORD *)(v39 + 28) & 0x80) == 0)
              {
                v71 = (uint64_t *)(v39 + 32);
                goto LABEL_176;
              }
              v94 = *(_QWORD *)(v39 + 200);
              if (v94)
              {
                v71 = (uint64_t *)(v94 + 8);
LABEL_176:
                v39 = *v71;
                v72 = v39 != 0;
                if (v39 == v24 || v39 == 0)
                  goto LABEL_181;
                continue;
              }
              break;
            }
            v72 = 0;
LABEL_181:
            if (v70)
            {
              *(_DWORD *)(v24 + 24) = v70;
            }
            else if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v24);
            }
            v38 = v112;
            v40 = v72;
LABEL_75:
            v41 = *(_QWORD *)(v27 + 88);
            if (!v41)
            {
              v42 = 0;
              goto LABEL_78;
            }
            if (v41 == v24)
            {
              v42 = 1;
              goto LABEL_78;
            }
            v108 = v40;
            v113 = v38;
            if ((*(_WORD *)(v24 + 28) & 8) == 0)
            {
              v42 = 0;
              v38 = v38;
              goto LABEL_78;
            }
            v74 = *(_DWORD *)(v24 + 24);
            *(_DWORD *)(v24 + 24) = v74 + 2;
            while (2)
            {
              if ((*(_WORD *)(v41 + 28) & 0x80) == 0)
              {
                v75 = (uint64_t *)(v41 + 32);
                goto LABEL_188;
              }
              v95 = *(_QWORD *)(v41 + 200);
              if (v95)
              {
                v75 = (uint64_t *)(v95 + 8);
LABEL_188:
                v41 = *v75;
                v76 = v41 != 0;
                if (v41 == v24 || v41 == 0)
                  goto LABEL_193;
                continue;
              }
              break;
            }
            v76 = 0;
LABEL_193:
            if (v74)
            {
              *(_DWORD *)(v24 + 24) = v74;
            }
            else if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v24);
            }
            v40 = v108;
            v38 = v113;
            v42 = v76;
LABEL_78:
            v43 = *(_QWORD *)(v27 + 104);
            if (!v43)
            {
              v44 = 0;
              goto LABEL_81;
            }
            if (v43 == v24)
            {
              v44 = 1;
              goto LABEL_81;
            }
            v105 = v42;
            v109 = v40;
            v114 = v38;
            if ((*(_WORD *)(v24 + 28) & 8) == 0)
            {
              v44 = 0;
              v38 = v38;
              goto LABEL_81;
            }
            v78 = *(_DWORD *)(v24 + 24);
            *(_DWORD *)(v24 + 24) = v78 + 2;
            while (2)
            {
              if ((*(_WORD *)(v43 + 28) & 0x80) == 0)
              {
                v79 = (uint64_t *)(v43 + 32);
                goto LABEL_200;
              }
              v96 = *(_QWORD *)(v43 + 200);
              if (v96)
              {
                v79 = (uint64_t *)(v96 + 8);
LABEL_200:
                v43 = *v79;
                v80 = v43 != 0;
                if (v43 == v24 || v43 == 0)
                  goto LABEL_205;
                continue;
              }
              break;
            }
            v80 = 0;
LABEL_205:
            if (v78)
            {
              *(_DWORD *)(v24 + 24) = v78;
            }
            else if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v24);
            }
            v40 = v109;
            v38 = v114;
            v42 = v105;
            v44 = v80;
LABEL_81:
            v45 = *(_QWORD *)(v27 + 120);
            if (!v45)
            {
              v46 = 0;
              goto LABEL_84;
            }
            if (v45 == v24)
            {
              v46 = 1;
              goto LABEL_84;
            }
            v103 = v44;
            v106 = v42;
            v110 = v40;
            v115 = v38;
            if ((*(_WORD *)(v24 + 28) & 8) == 0)
            {
              v46 = 0;
              v38 = v38;
              goto LABEL_84;
            }
            v82 = *(_DWORD *)(v24 + 24);
            *(_DWORD *)(v24 + 24) = v82 + 2;
            while (2)
            {
              if ((*(_WORD *)(v45 + 28) & 0x80) == 0)
              {
                v83 = (uint64_t *)(v45 + 32);
                goto LABEL_212;
              }
              v97 = *(_QWORD *)(v45 + 200);
              if (v97)
              {
                v83 = (uint64_t *)(v97 + 8);
LABEL_212:
                v45 = *v83;
                v84 = v45 != 0;
                if (v45 == v24 || v45 == 0)
                  goto LABEL_217;
                continue;
              }
              break;
            }
            v84 = 0;
LABEL_217:
            if (v82)
            {
              *(_DWORD *)(v24 + 24) = v82;
            }
            else if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v24);
            }
            v40 = v110;
            v38 = v115;
            v44 = v103;
            v42 = v106;
            v46 = v84;
LABEL_84:
            v47 = *(_QWORD *)(v27 + 136);
            if (!v47)
            {
              v48 = 0;
              goto LABEL_87;
            }
            if (v47 == v24)
            {
              v48 = 1;
              goto LABEL_87;
            }
            v102 = v46;
            v104 = v44;
            v107 = v42;
            v111 = v40;
            v116 = v38;
            if ((*(_WORD *)(v24 + 28) & 8) == 0)
            {
              v48 = 0;
              v38 = v38;
              goto LABEL_87;
            }
            v86 = *(_DWORD *)(v24 + 24);
            *(_DWORD *)(v24 + 24) = v86 + 2;
            while (2)
            {
              if ((*(_WORD *)(v47 + 28) & 0x80) == 0)
              {
                v87 = (uint64_t *)(v47 + 32);
                goto LABEL_224;
              }
              v98 = *(_QWORD *)(v47 + 200);
              if (v98)
              {
                v87 = (uint64_t *)(v98 + 8);
LABEL_224:
                v47 = *v87;
                v88 = v47 != 0;
                if (v47 == v24 || v47 == 0)
                  goto LABEL_229;
                continue;
              }
              break;
            }
            v88 = 0;
LABEL_229:
            if (v86)
            {
              *(_DWORD *)(v24 + 24) = v86;
            }
            else if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v24);
            }
            v40 = v111;
            v38 = v116;
            v44 = v104;
            v42 = v107;
            v46 = v102;
            v48 = v88;
LABEL_87:
            WebCore::FrameSelection::respondToNodeModification((WebCore::FrameSelection *)v27, (WebCore::Node *)v24, (WebCore::Node *)v38, v40, v42, v44, v46, v48);
            result = *(_QWORD **)(v27 + 192);
            if (result)
            {
              if (result == (_QWORD *)v24)
                goto LABEL_242;
              v49 = *(_WORD *)(v24 + 28);
              if ((v49 & 0xF000) == 0x9000)
              {
                if (*(_QWORD *)result[5] == v24
                  && (*((_WORD *)result + 14) & 0xF000) != 0x9000
                  && (*((_BYTE *)result + 22) & 8) != 0)
                {
                  goto LABEL_242;
                }
              }
              else if ((v49 & 4) != 0
                     && *(_QWORD *)(v24 + 80)
                     && ((*((unsigned __int8 *)result + 22) ^ *(unsigned __int8 *)(v24 + 22)) & 8) == 0)
              {
                v35 = *(_QWORD *)(v27 + 192);
                do
                  v35 = *(_QWORD *)(v35 + 32);
                while (v35 != v24 && v35 != 0);
                if (v35)
                {
LABEL_242:
                  v91 = *(_QWORD *)(v27 + 120);
                  if (v91)
                    *(_DWORD *)(v91 + 24) += 2;
                  *(_QWORD *)(v27 + 192) = v91;
                  if (*((_DWORD *)result + 6) == 2)
                  {
                    if ((*((_WORD *)result + 15) & 0x400) == 0)
                      result = (_QWORD *)WebCore::Node::removedLastRef((WebCore::Node *)result);
                  }
                  else
                  {
                    *((_DWORD *)result + 6) -= 2;
                  }
                  *(_BYTE *)(v27 + 24) = 1;
                }
              }
            }
LABEL_33:
            v29 = *(_QWORD *)(*(_QWORD *)(v20[3] + 8) + 56);
            v30 = *(WebCore::Node **)(v29 + 24);
            if (v30)
              v31 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
            else
              v31 = 0;
            if (v31 && (*(_BYTE *)(v24 + 22) & 8) != 0)
            {
              if (v30)
                *((_DWORD *)v30 + 6) += 2;
              v118 = v30;
              LODWORD(v119) = *(_DWORD *)(v29 + 32);
              BYTE4(v119) = *(_BYTE *)(v29 + 36);
              v64 = WebCore::removingNodeRemovesPosition((WebCore *)v24, v30, v5);
              result = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v118);
              if (v64)
              {
                v65 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 40) + 8) + 1944);
                if (v65)
                  WebCore::RenderSelection::clear((WebCore::RenderSelection *)(v65 + 288));
                result = (_QWORD *)WebCore::DragCaretController::clearCaretPositionWithoutUpdatingStyle(v29);
              }
            }
            v23 = *(_QWORD *)(v24 + 56);
            if (v23)
              *(_DWORD *)(v23 + 24) += 2;
            if (*(_DWORD *)(v24 + 24) == 2)
            {
              if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
                result = (_QWORD *)WebCore::Node::removedLastRef((WebCore::Node *)v24);
            }
            else
            {
              *(_DWORD *)(v24 + 24) -= 2;
            }
            if (!v23)
            {
              do
              {
LABEL_94:
                v50 = __ldaxr(v21);
                v51 = v50 - 1;
              }
              while (__stlxr(v51, v21));
              if (!v51)
              {
                atomic_store(1u, v21);
                v59 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                *v59 = off_1E31FE290;
                v59[1] = v21;
                v118 = v59;
                WTF::ensureOnMainThread();
                result = v118;
                v118 = 0;
                if (result)
                  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
              }
              break;
            }
            goto LABEL_23;
          }
          v67 = (uint64_t *)(v93 + 8);
        }
        else
        {
          v67 = (uint64_t *)(v37 + 32);
        }
        v37 = *v67;
        v68 = v37 != 0;
        if (v37 == v24 || v37 == 0)
          goto LABEL_168;
      }
    }
  }
  v52 = *((_QWORD *)this + 187);
  if (v52)
  {
    v62 = *(_QWORD *)(v52 + 8);
    if (v62)
    {
      if (*(_DWORD *)(v62 - 12))
      {
        v63 = *((_QWORD *)a2 + 10);
        if (v63)
        {
          while ((*(_WORD *)(v63 + 28) & 2) == 0)
          {
            v63 = *(_QWORD *)(v63 + 56);
            if (!v63)
              return result;
          }
          *(_DWORD *)(v63 + 24) += 2;
          v118 = (_QWORD *)v63;
          do
          {
            WebCore::DocumentMarkerController::removeMarkers(*((_QWORD *)this + 187), v63);
            v92 = (uint64_t)v118;
            do
              v92 = *(_QWORD *)(v92 + 56);
            while (v92 && (*(_WORD *)(v92 + 28) & 2) == 0);
            result = WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v118, v92);
            v63 = (uint64_t)v118;
          }
          while (v118);
        }
      }
    }
  }
  return result;
}

uint64_t *WebCore::FrameSelection::nodeWillBeRemoved(uint64_t *this, WebCore::Node *a2)
{
  uint64_t *v3;
  WebCore::Node *v4;
  unint64_t v5;
  WebCore::Node *v7;
  int v8;
  WebCore::Node *v9;
  char v10;
  WebCore::Node *v11;
  int v12;
  WebCore::Node *v13;
  int v14;
  WebCore::Node *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  char v26;
  char v27;
  char v28;
  char v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;

  v3 = this;
  if (!*((_BYTE *)this + 153)
    && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this[4] + 8) + 680) + 680) & 0x800000000000000) == 0
    || (*((_BYTE *)a2 + 22) & 8) == 0
    || (*((_WORD *)a2 + 15) & 0x800) == 0)
  {
    return this;
  }
  v4 = (WebCore::Node *)this[7];
  v5 = v4 == a2 && v4 != 0;
  if (v4 != a2 && v4 != 0)
  {
    if ((*((_WORD *)a2 + 14) & 8) != 0)
    {
      *((_DWORD *)a2 + 6) += 2;
      v35 = WebCore::Node::containsIncludingShadowDOM(a2, v4);
      if (*((_DWORD *)a2 + 6) == 2)
      {
        if ((*((_WORD *)a2 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a2);
      }
      else
      {
        *((_DWORD *)a2 + 6) -= 2;
      }
      v5 = v35;
    }
    else
    {
      v5 = 0;
    }
  }
  v7 = (WebCore::Node *)v3[9];
  v8 = v7 == a2 && v7 != 0;
  if (v7 != a2 && v7)
  {
    v36 = v5;
    if ((*((_WORD *)a2 + 14) & 8) != 0)
    {
      *((_DWORD *)a2 + 6) += 2;
      v30 = WebCore::Node::containsIncludingShadowDOM(a2, v7);
      if (*((_DWORD *)a2 + 6) == 2)
      {
        if ((*((_WORD *)a2 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a2);
      }
      else
      {
        *((_DWORD *)a2 + 6) -= 2;
      }
      v5 = v36;
      v8 = v30;
    }
    else
    {
      v8 = 0;
      v5 = v5;
    }
  }
  v9 = (WebCore::Node *)v3[11];
  v10 = v9 == a2 && v9 != 0;
  if (v9 != a2 && v9)
  {
    v31 = v8;
    v37 = v5;
    if ((*((_WORD *)a2 + 14) & 8) != 0)
    {
      *((_DWORD *)a2 + 6) += 2;
      v26 = WebCore::Node::containsIncludingShadowDOM(a2, v9);
      if (*((_DWORD *)a2 + 6) == 2)
      {
        if ((*((_WORD *)a2 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a2);
      }
      else
      {
        *((_DWORD *)a2 + 6) -= 2;
      }
      v5 = v37;
      v10 = v26;
      v8 = v31;
    }
    else
    {
      v10 = 0;
      v5 = v5;
    }
  }
  v11 = (WebCore::Node *)v3[13];
  v12 = v11 == a2 && v11 != 0;
  if (v11 != a2 && v11)
  {
    v27 = v10;
    v32 = v8;
    v38 = v5;
    if ((*((_WORD *)a2 + 14) & 8) != 0)
    {
      *((_DWORD *)a2 + 6) += 2;
      v23 = WebCore::Node::containsIncludingShadowDOM(a2, v11);
      if (*((_DWORD *)a2 + 6) == 2)
      {
        if ((*((_WORD *)a2 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a2);
      }
      else
      {
        *((_DWORD *)a2 + 6) -= 2;
      }
      v5 = v38;
      v10 = v27;
      v8 = v32;
      v12 = v23;
    }
    else
    {
      v12 = 0;
      v5 = v5;
    }
  }
  v13 = (WebCore::Node *)v3[15];
  v14 = v13 == a2 && v13 != 0;
  if (v13 != a2 && v13)
  {
    v24 = v12;
    v28 = v10;
    v33 = v8;
    v39 = v5;
    if ((*((_WORD *)a2 + 14) & 8) != 0)
    {
      *((_DWORD *)a2 + 6) += 2;
      v21 = WebCore::Node::containsIncludingShadowDOM(a2, v13);
      if (*((_DWORD *)a2 + 6) == 2)
      {
        if ((*((_WORD *)a2 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a2);
      }
      else
      {
        *((_DWORD *)a2 + 6) -= 2;
      }
      v5 = v39;
      v10 = v28;
      v8 = v33;
      v14 = v21;
      v12 = v24;
    }
    else
    {
      v14 = 0;
      v5 = v5;
    }
  }
  v15 = (WebCore::Node *)v3[17];
  v16 = v15 == a2 && v15 != 0;
  if (v15 != a2 && v15)
  {
    v22 = v14;
    v25 = v12;
    v29 = v10;
    v34 = v8;
    v40 = v5;
    if ((*((_WORD *)a2 + 14) & 8) != 0)
    {
      *((_DWORD *)a2 + 6) += 2;
      v20 = WebCore::Node::containsIncludingShadowDOM(a2, v15);
      if (*((_DWORD *)a2 + 6) == 2)
      {
        if ((*((_WORD *)a2 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a2);
      }
      else
      {
        *((_DWORD *)a2 + 6) -= 2;
      }
      v5 = v40;
      v10 = v29;
      v8 = v34;
      v14 = v22;
      v12 = v25;
      v16 = v20;
    }
    else
    {
      v16 = 0;
      v5 = v5;
    }
  }
  WebCore::FrameSelection::respondToNodeModification((WebCore::FrameSelection *)v3, a2, (WebCore::Node *)v5, v8, v10, v12, v14, v16);
  this = v3 + 24;
  v17 = v3[24];
  if (!v17)
    return this;
  if ((WebCore::Node *)v17 == a2)
  {
LABEL_56:
    this = WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=(this, v3[15]);
    *((_BYTE *)v3 + 24) = 1;
    return this;
  }
  v18 = *((_WORD *)a2 + 14);
  if ((v18 & 0xF000) == 0x9000)
  {
    if (**(WebCore::Node ***)(v17 + 40) != a2
      || (*(_WORD *)(v17 + 28) & 0xF000) == 0x9000
      || (*(_BYTE *)(v17 + 22) & 8) == 0)
    {
      return this;
    }
    goto LABEL_56;
  }
  if ((v18 & 4) != 0
    && *((_QWORD *)a2 + 10)
    && ((*(unsigned __int8 *)(v17 + 22) ^ *((unsigned __int8 *)a2 + 22)) & 8) == 0)
  {
    do
      v17 = *(_QWORD *)(v17 + 32);
    while ((WebCore::Node *)v17 != a2 && v17 != 0);
    if (v17)
      goto LABEL_56;
  }
  return this;
}

uint64_t WebCore::Document::adjustFocusedNodeOnNodeRemoval(uint64_t result, uint64_t a2, char a3)
{
  WebCore::Document *v3;
  int v6;
  __int16 v7;
  uint64_t v8;
  WebCore::ContainerNode *v10;
  WebCore::Node *v11;
  int v12;
  __int16 v13;
  _BYTE v14[8];

  if (*(_QWORD *)(result + 1248))
  {
    v3 = (WebCore::Document *)result;
    if (!*(_BYTE *)(result + 3362))
    {
      result = WebCore::TreeScope::focusedElementInScope(*(WebCore::TreeScope **)(a2 + 40));
      if (result)
      {
        v6 = *(_DWORD *)(result + 24);
        *(_DWORD *)(result + 24) = v6 + 2;
        if (result == a2 && (a3 & 1) == 0)
        {
          v7 = *(_WORD *)(a2 + 28);
        }
        else
        {
          v7 = *(_WORD *)(a2 + 28);
          if ((v7 & 0xF000) == 0x9000)
          {
            if (**(_QWORD **)(result + 40) != a2
              || (*(_WORD *)(result + 28) & 0xF000) == 0x9000
              || (*(_BYTE *)(result + 22) & 8) == 0)
            {
LABEL_17:
              if (v6)
              {
                *(_DWORD *)(result + 24) = v6;
              }
              else if ((*(_WORD *)(result + 30) & 0x400) == 0)
              {
                return WebCore::Node::removedLastRef((WebCore::Node *)result);
              }
              return result;
            }
          }
          else
          {
            if ((v7 & 4) == 0
              || !*(_QWORD *)(a2 + 80)
              || ((*(unsigned __int8 *)(result + 22) ^ *(unsigned __int8 *)(a2 + 22)) & 8) != 0)
            {
              goto LABEL_17;
            }
            v8 = result;
            do
              v8 = *(_QWORD *)(v8 + 32);
            while (v8 != a2 && v8 != 0);
            if (!v8)
              goto LABEL_17;
          }
        }
        if ((v7 & 4) != 0)
          v10 = (WebCore::ContainerNode *)a2;
        else
          v10 = 0;
        v11 = (WebCore::Node *)result;
        WebCore::SubframeLoadingDisabler::SubframeLoadingDisabler((WebCore::SubframeLoadingDisabler *)v14, v10);
        v12 = 0x10000;
        v13 = 0;
        WebCore::Document::setFocusedElement(v3, 0, &v12);
        WebCore::Document::setFocusNavigationStartingNode((uint64_t *)v3, v11);
        WebCore::SubframeLoadingDisabler::~SubframeLoadingDisabler((WebCore::SubframeLoadingDisabler *)v14);
        result = (uint64_t)v11;
        v6 = *((_DWORD *)v11 + 6) - 2;
        goto LABEL_17;
      }
    }
  }
  return result;
}

WTF **WebCore::GraphicsContext::drawBidiText(uint64_t a1, uint64_t a2, uint64_t a3, WTF **a4)
{
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  BOOL v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int *v38;
  int v39;
  int v40;
  int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  WebCore::BidiCharacterRun *v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  WTF *v54;
  WTF *v55;
  WTF **v56;
  WTF *v57;
  void *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  WebCore::BidiCharacterRun *v62;
  WTF *v63;
  WTF *v65;
  WTF **result;
  WTF *v67;
  void *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  BOOL v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  int v76;
  int v77;
  _BOOL4 v78;
  WebCore::BidiCharacterRun *v79;
  uint64_t v80;
  float v81;
  float v82;
  WTF::StringImpl *v83;
  WTF **v84;
  WTF *v85;
  void *v86;
  WTF *v87;
  WTF *v88;
  void *v89;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int *v103;
  int v104;
  uint64_t v105;
  unsigned int v106;
  char v107;
  uint64_t v108;
  int v109;
  char v110;
  WebCore::BidiCharacterRun *v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  WTF *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  WTF *v120;
  uint64_t v121;
  _BYTE v122[64];
  WTF *v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  int v132;
  unsigned int *v133;
  int v134;
  uint64_t v135;
  int v136;
  char v137;
  uint64_t v138;
  int v139;
  char v140;
  WebCore::BidiCharacterRun *v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  WTF *v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  WTF *v150;
  uint64_t v151;
  _BYTE v152[64];
  WTF *v153[2];

  v93 = 0;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v101 = 0xA0000000ALL;
  v102 = 10;
  v103 = 0;
  v104 = 10;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v110 = 1;
  v112 = 0;
  v113 = 0;
  v111 = 0;
  v114 = 0;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  v115 = 0;
  v119 = 0;
  v120 = (WTF *)v122;
  v5 = *(unsigned __int8 *)(a3 + 37);
  v6 = (v5 >> 1) & 1;
  v121 = 8;
  WebCore::BidiContext::create(v6, (v5 & 2) != 0, (v5 & 4) != 0, 0, 0, (uint64_t *)&v123);
  v8 = (unsigned int *)v123;
  LODWORD(v101) = v6;
  HIDWORD(v101) = v6;
  v102 = v6;
  if (v123)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v103 = v8;
  if (v8)
  {
    do
    {
      v10 = __ldaxr(v8);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v8));
    if (!v11)
    {
      atomic_store(1u, v8);
      v123 = (WTF *)v8;
      WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v123, (void *)v7);
    }
  }
  v93 = a3;
  v94 = 0;
  v12 = *(_QWORD *)(a3 + 8);
  if (v12)
    v13 = *(_DWORD *)(v12 + 4);
  else
    v13 = 0;
  v14 = 0;
  v110 = 1;
  v97 = 0;
  v98 = 0;
  v99 = v93;
  v100 = v94;
  v123 = 0;
  LODWORD(v124) = 0;
  v125 = 0;
  v126 = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0;
  v130 = 0;
  v131 = 0xA0000000ALL;
  v132 = 10;
  v133 = 0;
  v134 = 10;
  v135 = 0;
  v136 = 0;
  v137 = 0;
  v138 = 0;
  v139 = 0;
  v140 = 1;
  v143 = 0;
  v141 = 0;
  v142 = 0;
  v144 = 0;
  v147 = 0;
  v148 = 0;
  v145 = 0;
  v146 = 0;
  v149 = 0;
  v150 = (WTF *)v152;
  v15 = a3;
  v151 = 8;
  while (2)
  {
    if ((v14 & 1) != 0)
    {
      if (!v15 || (v16 = *(_QWORD *)(v15 + 8)) == 0 || (v17 = v94, v18 = *(unsigned int *)(v16 + 4), v94 >= v18))
      {
        v22 = v103;
        v37 = v103;
        do
        {
          v38 = v37;
          v37 = (unsigned int *)*((_QWORD *)v37 + 1);
        }
        while (v37);
        v23 = *((unsigned __int16 *)v38 + 2);
LABEL_84:
        v21 = (v23 >> 6) & 0x1F;
        goto LABEL_21;
      }
    }
    else
    {
      if (!v15 || (v16 = *(_QWORD *)(v15 + 8)) == 0)
      {
LABEL_157:
        v21 = 10;
        goto LABEL_18;
      }
      v17 = v94;
      v18 = *(unsigned int *)(v16 + 4);
    }
    if (v17 >= v18)
      goto LABEL_157;
    v19 = *(_QWORD *)(v16 + 8);
    if ((*(_BYTE *)(v16 + 16) & 4) != 0)
      v20 = *(unsigned __int8 *)(v19 + v17);
    else
      v20 = *(unsigned __int16 *)(v19 + 2 * v17);
    v21 = MEMORY[0x19AEA858C](v20);
LABEL_18:
    v22 = v103;
    v23 = *((unsigned __int16 *)v103 + 2);
    if ((v23 & 0x800) != 0)
    {
      if (v21 <= 0x10 && ((1 << v21) & 0x1D800) != 0)
        goto LABEL_21;
      goto LABEL_84;
    }
    if (v21 == 17)
      v21 = v102;
LABEL_21:
    if (v21 - 19 >= 4 && v118 == 0)
      v25 = v21;
    else
      v25 = 10;
    switch(v25)
    {
      case 0u:
        if (v102 > 0x12)
          goto LABEL_32;
        if (((1 << v102) & 0x407D8) != 0)
        {
          if ((_DWORD)v101 == 2)
          {
            if (!HIDWORD(v101))
              goto LABEL_32;
            v40 = 2;
          }
          else
          {
            if ((_DWORD)v101 != 5)
            {
              if (!HIDWORD(v101))
                goto LABEL_32;
              if ((v22[1] & 0x7C0) == 0x40)
                goto LABEL_212;
              goto LABEL_213;
            }
            v40 = 5;
          }
          v104 = v40;
          WebCore::BidiResolverBase<WebCore::TextBoxIterator,WebCore::BidiCharacterRun,WebCore::BidiResolver<WebCore::TextBoxIterator,WebCore::BidiCharacterRun>>::appendRunInternal((uint64_t)&v93);
          if ((v103[1] & 0x7C0) == 0)
            goto LABEL_32;
LABEL_212:
          v97 = v99;
          v98 = v100;
          v104 = 1;
          goto LABEL_213;
        }
        if (v102 == 2)
        {
          if (!HIDWORD(v101))
            goto LABEL_32;
        }
        else if (((1 << v102) & 0x2022) == 0)
        {
          goto LABEL_32;
        }
LABEL_213:
        WebCore::BidiResolverBase<WebCore::TextBoxIterator,WebCore::BidiCharacterRun,WebCore::BidiResolver<WebCore::TextBoxIterator,WebCore::BidiCharacterRun>>::appendRunInternal((uint64_t)&v93);
LABEL_32:
        v25 = 0;
        v97 = v93;
        v98 = v94;
        v101 = 0;
        v104 = 0;
LABEL_33:
        if ((v14 & 1) == 0 || v97 != v93 || v98 != v94)
        {
          if (v25 > 0x12)
            goto LABEL_47;
          if (((1 << v25) & 0x748) != 0)
          {
            if (v102 >= 3 && v102 != 5 && v102 != 13)
              v25 = 10;
            goto LABEL_47;
          }
          if (v25 == 4)
          {
            if (v102 != 2)
            {
              v25 = 4;
LABEL_47:
              v102 = v25;
            }
          }
          else if (((1 << v25) & 0x7D800) == 0)
          {
            goto LABEL_47;
          }
          v99 = v93;
          v100 = v94;
          if (v110)
          {
            v95 = v93;
            v96 = v94;
            v110 = 0;
          }
          v28 = ++v94;
          if (HIDWORD(v121))
          {
            if ((v14 & WebCore::BidiResolverBase<WebCore::TextBoxIterator,WebCore::BidiCharacterRun,WebCore::BidiResolver<WebCore::TextBoxIterator,WebCore::BidiCharacterRun>>::commitExplicitEmbedding((uint64_t)&v93, v7)) == 1)
            {
              v93 = a3;
              v94 = v13;
              WebCore::BidiStatus::operator=((uint64_t)&v101, &v131);
              goto LABEL_107;
            }
            if ((v14 & 1) != 0)
              goto LABEL_77;
            v28 = v94;
          }
          else if ((v14 & 1) != 0)
          {
            goto LABEL_77;
          }
          v30 = v93 == a3 && v28 == v13;
          if (v93)
          {
            if (!v30)
            {
              v31 = *(_QWORD *)(v93 + 8);
              if (v31)
              {
                if (v28 < *(_DWORD *)(v31 + 4))
                {
                  v14 = 0;
                  goto LABEL_63;
                }
              }
            }
          }
          if (v110)
            goto LABEL_108;
          v131 = v101;
          v132 = v102;
          v32 = v103;
          if (v103)
          {
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 + 1, v32));
          }
          v34 = v133;
          v133 = v32;
          if (v34)
          {
            do
            {
              v35 = __ldaxr(v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v34));
            if (!v36)
            {
              atomic_store(1u, v34);
              v153[0] = (WTF *)v34;
              WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v153, (void *)v7);
            }
          }
          v125 = v95;
          v126 = v96;
          v127 = v97;
          v128 = v98;
          v129 = v99;
          v130 = v100;
          v137 = v107;
          v139 = v109;
          v138 = v108;
          v140 = v110;
          v105 = v99;
          v106 = v100;
LABEL_77:
          v14 = 1;
LABEL_63:
          v15 = v93;
          continue;
        }
        if (!v107)
        {
          v97 = v105;
          v98 = v106;
          v41 = v101;
          if (v101 < 2 || (_DWORD)v101 == 5)
          {
LABEL_99:
            v104 = v41;
          }
          else if ((_DWORD)v101 == 2)
          {
            v41 = 2 * (HIDWORD(v101) != 0);
            goto LABEL_99;
          }
          WebCore::BidiResolverBase<WebCore::TextBoxIterator,WebCore::BidiCharacterRun,WebCore::BidiResolver<WebCore::TextBoxIterator,WebCore::BidiCharacterRun>>::appendRunInternal((uint64_t)&v93);
        }
        v93 = a3;
        v94 = v13;
        v101 = v131;
        v102 = v132;
        v42 = v133;
        if (v133)
        {
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 + 1, v42));
        }
        v44 = v103;
        v103 = v42;
        if (v44)
        {
          do
          {
            v45 = __ldaxr(v44);
            v46 = v45 - 1;
          }
          while (__stlxr(v46, v44));
          if (!v46)
          {
            atomic_store(1u, v44);
            v153[0] = (WTF *)v44;
            WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v153, (void *)v7);
          }
        }
LABEL_107:
        v95 = v125;
        v96 = v126;
        v97 = v127;
        v98 = v128;
        v99 = v129;
        v100 = v130;
        v107 = v137;
        v109 = v139;
        v108 = v138;
        v110 = v140;
        v104 = 10;
LABEL_108:
        v47 = v111;
        v113 = v112;
        if (v111)
        {
          LOBYTE(v48) = 0;
          LOBYTE(v49) = 0x80;
          do
          {
            v50 = *((unsigned __int8 *)v47 + 16);
            if (v50 <= v48)
              v48 = v48;
            else
              v48 = *((unsigned __int8 *)v47 + 16);
            v49 = v49;
            if (v49 >= v50)
              v49 = *((unsigned __int8 *)v47 + 16);
            v47 = *(WebCore::BidiCharacterRun **)v47;
          }
          while (v47);
          v51 = v49 | 1;
          v52 = v114 - 1;
          if (v48 >= (v49 | 1u) && v114 != 1)
          {
            do
            {
              v7 = 0;
              v79 = v111;
              do
              {
                if (!v79)
                  goto LABEL_229;
                do
                {
                  if (*((unsigned __int8 *)v79 + 16) >= v48)
                    break;
                  v79 = *(WebCore::BidiCharacterRun **)v79;
                  v7 = (v7 + 1);
                  if (v7 >= v52)
                    break;
                }
                while (v79);
                if (v7 <= v52 && v79)
                {
                  v80 = v7;
                  do
                  {
                    if (*((unsigned __int8 *)v79 + 16) < v48)
                      break;
                    v79 = *(WebCore::BidiCharacterRun **)v79;
                    v80 = (v80 + 1);
                    if (v80 > v52)
                      break;
                  }
                  while (v79);
                }
                else
                {
LABEL_229:
                  v80 = v7;
                }
                WebCore::BidiRunList<WebCore::BidiCharacterRun>::reverseRuns((uint64_t)&v111, v7, v80 - 1);
                v7 = v80;
              }
              while (v80 < v52);
              LOBYTE(v48) = v48 - 1;
            }
            while (v51 <= v48);
          }
        }
        v105 = 0;
        v106 = 0;
        v54 = v150;
        if (v152 != (_BYTE *)v150 && v150)
        {
          v150 = 0;
          LODWORD(v151) = 0;
          WTF::fastFree(v54, (void *)v7);
        }
        if (v149)
          WTF::fastFree((WTF *)(v149 - 16), (void *)v7);
        v55 = v145;
        if (v145)
        {
          v145 = 0;
          LODWORD(v146) = 0;
          WTF::fastFree(v55, (void *)v7);
        }
        v56 = (WTF **)v141;
        v141 = 0;
        if (v56)
        {
          WebCore::BidiCharacterRun::~BidiCharacterRun(v56);
          WTF::fastFree(v57, v58);
        }
        v59 = v133;
        v133 = 0;
        if (v59)
        {
          do
          {
            v60 = __ldaxr(v59);
            v61 = v60 - 1;
          }
          while (__stlxr(v61, v59));
          if (!v61)
          {
            atomic_store(1u, v59);
            v153[0] = (WTF *)v59;
            WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v153, (void *)v7);
          }
        }
        if (v114)
        {
          v153[0] = *a4;
          v62 = v111;
          if (v111)
          {
            do
            {
              WebCore::TextRun::subRun(a3, (WTF::StringImpl *)*((unsigned int *)v62 + 2), *((_DWORD *)v62 + 3) - *((_DWORD *)v62 + 2), (unint64_t)&v123);
              BYTE5(v127) = BYTE5(v127) & 0xFD | (2 * (*((_BYTE *)v62 + 16) & 1));
              BYTE5(v127) = (4 * (*((_BYTE *)v62 + 17) & 1)) | BYTE5(v127) & 0xFB;
              v81 = WebCore::FontCascade::drawText(a2, a1);
              *(float *)v153 = v81 + *(float *)v153;
              *((float *)v153 + 1) = v82 + *((float *)v153 + 1);
              v62 = *(WebCore::BidiCharacterRun **)v62;
              v83 = v124;
              v124 = 0;
              if (v83)
              {
                if (*(_DWORD *)v83 == 2)
                  WTF::StringImpl::destroy(v83, (WTF::StringImpl *)v7);
                else
                  *(_DWORD *)v83 -= 2;
              }
            }
            while (v62);
            v84 = (WTF **)v111;
            v111 = 0;
            if (v84)
            {
              v85 = *v84;
              *v84 = 0;
              v123 = v85;
              if (v85)
              {
                do
                {
                  v87 = *(WTF **)v85;
                  *(_QWORD *)v85 = 0;
                  v123 = v87;
                  WebCore::BidiCharacterRun::~BidiCharacterRun((WebCore::BidiCharacterRun **)v85);
                  WTF::fastFree(v88, v89);
                  v85 = v87;
                }
                while (v87);
              }
              std::unique_ptr<WebCore::BidiCharacterRun>::reset[abi:sn180100](&v123, 0);
              std::unique_ptr<WebCore::BidiCharacterRun>::reset[abi:sn180100](v84, 0);
              WTF::fastFree((WTF *)v84, v86);
            }
          }
          else
          {
            v111 = 0;
          }
          v112 = 0;
          v113 = 0;
          v114 = 0;
        }
        v63 = v120;
        if (v122 != (_BYTE *)v120 && v120 != 0)
        {
          v120 = 0;
          LODWORD(v121) = 0;
          WTF::fastFree(v63, (void *)v7);
        }
        if (v119)
          WTF::fastFree((WTF *)(v119 - 16), (void *)v7);
        v65 = v115;
        if (v115)
        {
          v115 = 0;
          LODWORD(v116) = 0;
          WTF::fastFree(v65, (void *)v7);
        }
        result = (WTF **)v111;
        v111 = 0;
        if (result)
        {
          WebCore::BidiCharacterRun::~BidiCharacterRun(result);
          result = (WTF **)WTF::fastFree(v67, v68);
        }
        v69 = v103;
        v103 = 0;
        if (v69)
        {
          do
          {
            v70 = __ldaxr(v69);
            v71 = v70 - 1;
          }
          while (__stlxr(v71, v69));
          if (!v71)
          {
            atomic_store(1u, v69);
            v123 = (WTF *)v69;
            return WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v123, (void *)v7);
          }
        }
        return result;
      case 1u:
      case 0xDu:
        if (v102 > 0x12)
          goto LABEL_235;
        if (((1 << v102) & 0x407D8) == 0)
        {
          if (((1 << v102) & 0x25) == 0)
            goto LABEL_235;
          goto LABEL_234;
        }
        if ((_DWORD)v101 == 5)
          goto LABEL_234;
        if ((_DWORD)v101 == 2)
        {
          if (!HIDWORD(v101))
          {
LABEL_237:
            if ((v22[1] & 0x7C0) == 0)
            {
              v97 = v99;
              v98 = v100;
            }
          }
LABEL_234:
          WebCore::BidiResolverBase<WebCore::TextBoxIterator,WebCore::BidiCharacterRun,WebCore::BidiResolver<WebCore::TextBoxIterator,WebCore::BidiCharacterRun>>::appendRunInternal((uint64_t)&v93);
          goto LABEL_235;
        }
        if (!HIDWORD(v101))
          goto LABEL_237;
LABEL_235:
        v97 = v93;
        v98 = v94;
        LODWORD(v101) = 1;
        HIDWORD(v101) = v25;
        v104 = 1;
        goto LABEL_33;
      case 2u:
        v26 = v102;
        if (HIDWORD(v101) == 13)
          goto LABEL_192;
        if (v102 > 0x12)
          goto LABEL_44;
        v27 = 1 << v102;
        if (((1 << v102) & 0x48) != 0)
        {
          v39 = v101;
          if ((_DWORD)v101 == 2)
            goto LABEL_44;
        }
        else
        {
          if ((v27 & 0x40790) == 0)
          {
            if ((v27 & 0x2022) == 0)
              goto LABEL_44;
            v97 = v99;
            v98 = v100;
LABEL_169:
            WebCore::BidiResolverBase<WebCore::TextBoxIterator,WebCore::BidiCharacterRun,WebCore::BidiResolver<WebCore::TextBoxIterator,WebCore::BidiCharacterRun>>::appendRunInternal((uint64_t)&v93);
            v25 = 2;
            v97 = v93;
            v98 = v94;
            v104 = 2;
            goto LABEL_170;
          }
          v39 = v101;
        }
        if (v39 == 2)
        {
          if (HIDWORD(v101) == 1)
          {
            WebCore::BidiResolverBase<WebCore::TextBoxIterator,WebCore::BidiCharacterRun,WebCore::BidiResolver<WebCore::TextBoxIterator,WebCore::BidiCharacterRun>>::appendRunInternal((uint64_t)&v93);
LABEL_184:
            v72 = v102 == 4;
            goto LABEL_185;
          }
        }
        else
        {
          if (v39 == 5)
          {
            WebCore::BidiResolverBase<WebCore::TextBoxIterator,WebCore::BidiCharacterRun,WebCore::BidiResolver<WebCore::TextBoxIterator,WebCore::BidiCharacterRun>>::appendRunInternal((uint64_t)&v93);
            if (HIDWORD(v101) == 1 || (v103[1] & 0x7C0) == 0x40)
              goto LABEL_184;
            goto LABEL_44;
          }
          if (HIDWORD(v101) == 1)
          {
            v72 = v102 == 4;
LABEL_185:
            v75 = &v108;
            if (!v72)
              v75 = &v99;
            v97 = *v75;
            v98 = *((_DWORD *)v75 + 2);
            v104 = 1;
            goto LABEL_169;
          }
        }
LABEL_44:
        v97 = v93;
        v98 = v94;
        v25 = 2;
        LODWORD(v101) = 2;
        if (v104 == 10)
        {
          v104 = 0;
          v25 = 2;
        }
        goto LABEL_33;
      case 4u:
        v25 = v102;
        if (v102 == 2)
        {
          v97 = v93;
          v98 = v94;
          v25 = 2;
LABEL_170:
          LODWORD(v101) = 2;
        }
        else if (v102 != 4)
        {
          if (v110)
            v73 = &v97;
          else
            v73 = &v99;
          v108 = *v73;
          v109 = *((_DWORD *)v73 + 2);
          v25 = 4;
        }
        goto LABEL_33;
      case 5u:
        v26 = v102;
LABEL_192:
        switch(v26)
        {
          case 0u:
            if ((v22[1] & 0x7C0) == 0)
              goto LABEL_201;
            goto LABEL_202;
          case 1u:
          case 2u:
          case 0xDu:
            goto LABEL_200;
          case 3u:
          case 4u:
          case 7u:
          case 8u:
          case 9u:
          case 0xAu:
          case 0x12u:
            v76 = v101;
            goto LABEL_194;
          case 6u:
            v76 = v101;
            if ((_DWORD)v101 == 5)
              goto LABEL_202;
LABEL_194:
            if (v76 == 5)
              goto LABEL_198;
            if (v76 == 2)
            {
              v77 = HIDWORD(v101);
              if (HIDWORD(v101) == 1 || (v22[1] & 0x7C0) == 0x40)
              {
LABEL_198:
                WebCore::BidiResolverBase<WebCore::TextBoxIterator,WebCore::BidiCharacterRun,WebCore::BidiResolver<WebCore::TextBoxIterator,WebCore::BidiCharacterRun>>::appendRunInternal((uint64_t)&v93);
                v78 = 1;
LABEL_199:
                v104 = v78;
                goto LABEL_200;
              }
            }
            else
            {
              v77 = HIDWORD(v101);
              if (!HIDWORD(v101))
              {
                if ((v22[1] & 0x7C0) == 0x40)
                  goto LABEL_198;
                v77 = 0;
              }
            }
            if (v104 == 10)
            {
              v78 = v77 != 0;
              goto LABEL_199;
            }
LABEL_200:
            v97 = v99;
            v98 = v100;
LABEL_201:
            WebCore::BidiResolverBase<WebCore::TextBoxIterator,WebCore::BidiCharacterRun,WebCore::BidiResolver<WebCore::TextBoxIterator,WebCore::BidiCharacterRun>>::appendRunInternal((uint64_t)&v93);
LABEL_202:
            v97 = v93;
            v98 = v94;
            v25 = 5;
            LODWORD(v101) = 5;
            if (v104 == 10)
              v104 = 5;
            break;
          default:
            goto LABEL_202;
        }
        goto LABEL_33;
      case 0xBu:
      case 0xCu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
        WebCore::BidiResolverBase<WebCore::TextBoxIterator,WebCore::BidiCharacterRun,WebCore::BidiResolver<WebCore::TextBoxIterator,WebCore::BidiCharacterRun>>::embed((uint64_t)&v93, v25);
        WebCore::BidiResolverBase<WebCore::TextBoxIterator,WebCore::BidiCharacterRun,WebCore::BidiResolver<WebCore::TextBoxIterator,WebCore::BidiCharacterRun>>::commitExplicitEmbedding((uint64_t)&v93, v74);
        v25 = v21;
        goto LABEL_33;
      case 0x12u:
        v25 = 18;
        if (v97 == v99 && v98 == v100)
        {
          v97 = v93;
          v98 = v94;
          v25 = 18;
        }
        goto LABEL_33;
      default:
        goto LABEL_33;
    }
  }
}

WTF::StringImpl *WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::paintForeground(WTF::StringImpl *result, uint64_t a2)
{
  WTF::StringImpl *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Layout::Box *v6;
  uint64_t LineStyle;
  WebCore::FontCascade *v8;
  const WTF::AtomString *v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const WebCore::Color *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::Layout::Box *v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  float *v29;
  int v30;
  _BOOL4 v31;
  float v32;
  float v33;
  int v34;
  int v35;
  WebCore::GlyphDisplayListCacheEntry **v36;
  void *v37;
  WebCore::GlyphDisplayListCacheEntry *v38;
  WebCore::GlyphDisplayListCacheEntry *v39;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WebCore::GlyphDisplayListCacheEntry *v44;
  uint64_t v45;
  WTF *v46;
  WTF::MemoryPressureHandler *v47;
  WTF *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WebCore::GlyphDisplayListCacheEntry *v56;
  WTF *v57;
  unsigned int *v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  char v63;
  _DWORD *v64;
  uint64_t v65;
  _WORD *v66;
  __int16 v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  WebCore::GlyphDisplayListCacheEntry *v73;
  uint64_t v74;
  float v75;
  float v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WebCore::Layout::Box *v80;
  uint64_t v81;
  _QWORD *v82;
  WebCore::FontCascadeFonts *v83;
  uint64_t v84;
  WTF *v85;
  uint64_t v86;
  float v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  WebCore::Layout::Box *v91;
  uint64_t v92;
  double v93;
  BOOL v94;
  int v95;
  uint64_t v96;
  float v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  double v102;
  double v103;
  WTF::StringImpl *v104;
  int v105;
  uint64_t v106;
  int v107;
  int v108;
  int v109;
  WTF *v110;
  void *v111;
  WTF *v112;
  void *v113;
  WTF *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF *v120;
  WTF *v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  WTF *v127;
  uint64_t v128;
  WTF *v129;
  int v130;
  uint64_t v131;
  _WORD *v132;
  __int16 v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int v137;
  _BOOL4 v138;
  uint64_t v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int *v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  WTF *v146;
  int v147;
  unsigned int v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  WTF *v153;
  int v154;
  unsigned int v155;
  uint64_t v156;
  unsigned int *v157;
  unsigned int v158;
  WTF *v159;
  void *v160;
  WTF *v161;
  void *v162;
  WTF *v163;
  WebCore::GlyphDisplayListCacheEntry *v164;
  WTF *v165;
  WebCore::GlyphDisplayListCacheEntry *v166;
  uint64_t v167;
  WTF *v169;
  void *v170;
  WTF *v171;
  void *v172;
  const WTF::AtomString *v173;
  WebCore::RenderCombineText *v174;
  unint64_t v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  unsigned int *v180;
  unsigned int v181;
  unsigned int v182;
  char v183;
  double v184;
  int v185;
  float v186;
  double v187;
  double v188;
  double v189;
  double v190;
  unsigned int *v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  unint64_t v200;
  unsigned int *v201;
  unsigned int v202;
  unsigned int v203;
  WebCore::GlyphDisplayListCacheEntry *v204;
  __n128 v205;
  WTF *v206;
  WebCore::GraphicsContext *v207;
  uint64_t v208;
  uint64_t v209;
  _BOOL4 v210;
  WebCore::GraphicsContext *v211;
  WebCore::GraphicsContext *v213;
  WebCore::FontCascade *v214;
  uint64_t v215;
  _BYTE v216[40];
  WTF::StringImpl *v217[2];
  _BYTE v218[28];
  BOOL v219;
  WTF *v220;
  WebCore::GlyphDisplayListCacheEntry *v221;
  WTF *v222[2];
  int v223;
  char v224;
  __int128 v225;
  long double v226;
  long double v227;

  if (*(_DWORD *)(a2 + 4) >= *(_DWORD *)(a2 + 8))
    return result;
  v2 = result;
  v211 = *(WebCore::GraphicsContext **)(*((_QWORD *)result + 12) + 80);
  if (*((_BYTE *)result + 153))
  {
    v177 = *((_QWORD *)result + 2);
    if (*(_BYTE *)(v177 + 46) != 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1943E49B8);
    }
    LineStyle = *(_QWORD *)(v177 + 120);
  }
  else
  {
    v3 = *((_QWORD *)result + 1);
    v4 = *(_QWORD *)(*(_QWORD *)result + 8);
    if (v3 >= *(unsigned int *)(v4 + 60))
    {
      __break(0xC471u);
      goto LABEL_336;
    }
    v5 = *(_QWORD *)(v4 + 48) + 80 * v3;
    v6 = *(WebCore::Layout::Box **)v5;
    if (*(_DWORD *)(v5 + 40))
      LineStyle = (uint64_t)v6 + 16;
    else
      LineStyle = WebCore::Layout::Box::firstLineStyle(v6);
  }
  v8 = (WebCore::FontCascade *)(*(_QWORD *)(LineStyle + 32) + 32);
  if (*((_BYTE *)v2 + 159))
  {
    WebCore::RenderStyle::textEmphasisMarkString(*((WebCore::RenderStyle **)v2 + 4));
    v9 = v173;
  }
  else
  {
    v9 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
  }
  v10 = 0.0;
  if (*(_QWORD *)v9 && *(_DWORD *)(*(_QWORD *)v9 + 4))
  {
    if (*((_BYTE *)v2 + 159))
    {
      v105 = *((unsigned __int8 *)v2 + 158);
      v106 = WebCore::FontCascade::metricsOfPrimaryFont(v8, (void *)a2);
      if (v105)
      {
        v107 = *(_DWORD *)(v106 + 44);
        v108 = -(int)WebCore::FontCascade::emphasisMarkDescent(v8, v9) - v107;
      }
      else
      {
        v179 = *(_DWORD *)(v106 + 48);
        v108 = WebCore::FontCascade::emphasisMarkAscent(v8, v9) + v179;
      }
      v10 = (float)v108;
      goto LABEL_9;
    }
LABEL_336:
    __break(1u);
    goto LABEL_337;
  }
LABEL_9:
  v11 = *((_QWORD *)v2 + 4);
  v213 = v211;
  v214 = v8;
  v215 = v11;
  memset(v216, 0, 33);
  *(_DWORD *)&v216[36] = 1082130432;
  *(_OWORD *)v217 = 0u;
  memset(v218, 0, sizeof(v218));
  v219 = 1;
  v12 = *(_QWORD *)(a2 + 48);
  if (v12 && (*(_QWORD *)v216 = *(_QWORD *)(a2 + 48), (v12 & 0x8000000000000) != 0))
  {
    v136 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 + 1, v136));
    v13 = *(_QWORD *)&v216[8];
    v15 = (const WebCore::Color *)(a2 + 56);
    v14 = *(_QWORD *)(a2 + 56);
    v16 = (v14 & 0x8000000000000) == 0;
    if ((*(_QWORD *)&v216[8] & 0x8000000000000) != 0)
    {
      if ((v14 & 0x8000000000000) != 0)
      {
        v225 = *(_OWORD *)((*(_QWORD *)&v216[8] & 0xFFFFFFFFFFFFLL) + 4);
        *(_OWORD *)v222 = *(_OWORD *)((v14 & 0xFFFFFFFFFFFFLL) + 4);
        v138 = WebCore::operator==<float,4ul>((float *)&v225, (float *)v222);
        v13 = *(_QWORD *)&v216[8];
        if (v138
          && HIBYTE(*(_QWORD *)&v216[8]) == HIBYTE(*(_QWORD *)v15)
          && v216[14] == BYTE6(*(_QWORD *)v15))
        {
          goto LABEL_14;
        }
      }
      goto LABEL_188;
    }
  }
  else
  {
    v13 = 0;
    v15 = (const WebCore::Color *)(a2 + 56);
    v14 = *(_QWORD *)(a2 + 56);
    v16 = (v14 & 0x8000000000000) == 0;
  }
  if (v13 == v14 && v16)
    goto LABEL_14;
LABEL_188:
  if ((v13 & 0x8000000000000) != 0)
  {
    v180 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
    do
    {
      v181 = __ldaxr(v180);
      v182 = v181 - 1;
    }
    while (__stlxr(v182, v180));
    if (!v182)
    {
      atomic_store(1u, v180);
      WTF::fastFree((WTF *)v180, (void *)a2);
    }
  }
  v139 = *(_QWORD *)v15;
  *(_QWORD *)&v216[8] = v139;
  if ((v139 & 0x8000000000000) != 0)
  {
    v140 = (unsigned int *)(v139 & 0xFFFFFFFFFFFFLL);
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 + 1, v140));
  }
LABEL_14:
  v17 = *(_QWORD *)(a2 + 64);
  if ((*(_QWORD *)&v216[16] & 0x8000000000000) != 0)
  {
    if ((v17 & 0x8000000000000) == 0
      || (v225 = *(_OWORD *)((*(_QWORD *)&v216[16] & 0xFFFFFFFFFFFFLL) + 4),
          *(_OWORD *)v222 = *(_OWORD *)((v17 & 0xFFFFFFFFFFFFLL) + 4),
          !WebCore::operator==<float,4ul>((float *)&v225, (float *)v222))
      || (v200 = *(_QWORD *)(a2 + 64), HIBYTE(*(_QWORD *)&v216[16]) != HIBYTE(v200))
      || v216[22] != BYTE6(v200))
    {
      v201 = (unsigned int *)(*(_QWORD *)&v216[16] & 0xFFFFFFFFFFFFLL);
      do
      {
        v202 = __ldaxr(v201);
        v203 = v202 - 1;
      }
      while (__stlxr(v203, v201));
      if (!v203)
      {
        atomic_store(1u, v201);
        WTF::fastFree((WTF *)v201, (void *)a2);
      }
      goto LABEL_19;
    }
  }
  else if (*(_QWORD *)&v216[16] != v17 || (v17 & 0x8000000000000) != 0)
  {
LABEL_19:
    v19 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)&v216[16] = v19;
    if ((v19 & 0x8000000000000) != 0)
    {
      v134 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
      do
        v135 = __ldaxr(v134);
      while (__stlxr(v135 + 1, v134));
    }
  }
  *(_OWORD *)&v216[24] = *(_OWORD *)(a2 + 72);
  v20 = *((_QWORD *)v2 + 1);
  v21 = *(_QWORD *)(*(_QWORD *)v2 + 8);
  if (v20 >= *(unsigned int *)(v21 + 60))
  {
    __break(0xC471u);
    JUMPOUT(0x1943E4830);
  }
  v22 = *(_QWORD *)(v21 + 48) + 80 * v20;
  v23 = *(WebCore::Layout::Box **)v22;
  if (*(_DWORD *)(v22 + 40))
    v24 = (uint64_t)v23 + 16;
  else
    v24 = WebCore::Layout::Box::firstLineStyle(v23);
  v25 = (unsigned __int16)*(_DWORD *)(v24 + 44) >> 13;
  v183 = 2;
  switch((unsigned __int16)*(_DWORD *)(v24 + 44) >> 13)
  {
    case 1:
    case 2:
      goto LABEL_25;
    case 3:
    case 5:
      LOBYTE(v25) = 3;
      goto LABEL_25;
    case 4:
      goto LABEL_26;
    default:
      LOBYTE(v25) = 0;
LABEL_25:
      v183 = v25;
LABEL_26:
      v219 = (v183 & 6) != 2;
      if (*(_BYTE *)(a2 + 208))
      {
        v217[1] = (WTF::StringImpl *)(a2 + 144);
        v116 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 4) + 24) + 320);
        if (*(_DWORD *)(v116 + 20))
          *(_QWORD *)v218 = v116 + 8;
      }
      if (*((_BYTE *)v2 + 153))
      {
        v26 = *((_QWORD *)v2 + 2);
        if (*(_BYTE *)(v26 + 46) != 3)
        {
          __break(0xC471u);
          JUMPOUT(0x1943E443CLL);
        }
      }
      else
      {
        v26 = 0;
      }
      v27 = *(WTF::StringImpl **)v9;
      if (*(_QWORD *)v9)
        *(_DWORD *)v27 += 2;
      v28 = v217[0];
      v217[0] = v27;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v28 -= 2;
      }
      v29 = (float *)(a2 + 72);
      *(float *)&v218[24] = v10;
      *(_QWORD *)&v218[8] = v26;
      v30 = *(_BYTE *)(a2 + 12) & 0xFE;
      v31 = v30 == 12;
      v32 = *(float *)(a2 + 72);
      if (v32 > 0.0)
        v31 = 1;
      v210 = v31;
      if (v32 > 0.0 || v30 == 12)
      {
        (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v211 + 96))(v211, 1);
        if (v30 == 12)
        {
          v33 = *(float *)(a2 + 216);
          if (*((float *)v211 + 84) != v33)
          {
            *((float *)v211 + 84) = v33;
            *((_DWORD *)v211 + 46) |= 0x100u;
          }
          (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v211 + 88))(v211, (uint64_t)v211 + 8);
        }
        v32 = *v29;
      }
      v34 = *((unsigned __int8 *)v211 + 341);
      if (v32 <= 0.0)
        goto LABEL_44;
      if ((*(_QWORD *)v15 & 0x8000000000000) != 0)
      {
        if (*(float *)((*(_QWORD *)v15 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
          goto LABEL_44;
      }
      else if (!*(_QWORD *)v15)
      {
        goto LABEL_44;
      }
      if (v34 != (v34 | 2))
      {
        *((_BYTE *)v211 + 341) = v34 | 2;
        *((_DWORD *)v211 + 46) |= 0x200u;
        (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v211 + 88))(v211, (uint64_t)v211 + 8);
        LOBYTE(v34) = v34 | 2;
      }
LABEL_44:
      v35 = *(unsigned __int8 *)(a2 + 77);
      if (*((unsigned __int8 *)v211 + 347) != v35)
      {
        *((_BYTE *)v211 + 347) = v35;
        *((_DWORD *)v211 + 46) |= 0x10000u;
      }
      v36 = (WebCore::GlyphDisplayListCacheEntry **)((char *)v211 + 8);
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v211 + 88))(v211, (uint64_t)v211 + 8);
      v38 = *(WebCore::GlyphDisplayListCacheEntry **)(a2 + 48);
      v221 = v38;
      if (((unint64_t)v38 & 0x8000000000000) != 0)
      {
        v142 = (unsigned int *)((unint64_t)v38 & 0xFFFFFFFFFFFFLL);
        do
          v143 = __ldaxr(v142);
        while (__stlxr(v143 + 1, v142));
      }
      if ((v34 & 3) != 1)
      {
        if ((v34 & 1) == 0)
          goto LABEL_323;
        v204 = *v36;
        if (((unint64_t)v221 & 0x8000000000000) != 0)
        {
          if (((unint64_t)v204 & 0x8000000000000) != 0)
          {
            v225 = *(_OWORD *)(((unint64_t)v221 & 0xFFFFFFFFFFFFLL) + 4);
            *(_OWORD *)v222 = *(_OWORD *)(((unint64_t)v204 & 0xFFFFFFFFFFFFLL) + 4);
            if (WebCore::operator==<float,4ul>((float *)&v225, (float *)v222)
              && (unint64_t)v221 >> 56 == (unint64_t)*v36 >> 56
              && BYTE6(v221) == BYTE6(*v36))
            {
LABEL_323:
              if ((v34 & 2) != 0)
              {
                if (!WebCore::operator==((uint64_t *)v15, (uint64_t *)v211 + 12))
                  WebCore::GraphicsContext::setStrokeColor(v211, v15);
                v205.n128_f32[0] = *v29;
                if (*v29 != *((float *)v211 + 47))
                {
                  *((_DWORD *)v211 + 47) = v205.n128_u32[0];
                  *((_DWORD *)v211 + 46) |= 8u;
                  (*(void (**)(WebCore::GraphicsContext *, WebCore::GlyphDisplayListCacheEntry **))(*(_QWORD *)v211 + 88))(v211, v36);
                }
                (*(void (**)(WebCore::GraphicsContext *, _QWORD, __n128))(*(_QWORD *)v211 + 312))(v211, *(unsigned __int8 *)(a2 + 79), v205);
                (*(void (**)(WebCore::GraphicsContext *, _QWORD))(*(_QWORD *)v211 + 296))(v211, *(unsigned __int8 *)(a2 + 80));
                if (!*(_BYTE *)(a2 + 79))
                  (*(void (**)(WebCore::GraphicsContext *, float))(*(_QWORD *)v211 + 320))(v211, *(float *)(a2 + 84));
              }
              goto LABEL_54;
            }
          }
        }
        else if (v221 == v204 && ((unint64_t)v204 & 0x8000000000000) == 0)
        {
          goto LABEL_323;
        }
        WebCore::GraphicsContext::setFillColor(v211, (const WebCore::Color *)&v221);
        goto LABEL_323;
      }
      v39 = *v36;
      if (((unint64_t)v221 & 0x8000000000000) != 0)
      {
        if (((unint64_t)v39 & 0x8000000000000) == 0
          || (v225 = *(_OWORD *)(((unint64_t)v221 & 0xFFFFFFFFFFFFLL) + 4),
              *(_OWORD *)v222 = *(_OWORD *)(((unint64_t)v39 & 0xFFFFFFFFFFFFLL) + 4),
              !WebCore::operator==<float,4ul>((float *)&v225, (float *)v222))
          || (unint64_t)v221 >> 56 != (unint64_t)*v36 >> 56
          || BYTE6(v221) != BYTE6(*v36))
        {
LABEL_314:
          WebCore::GraphicsContext::setFillColor(v211, (const WebCore::Color *)&v221);
        }
      }
      else if (v221 != v39 || ((unint64_t)v39 & 0x8000000000000) != 0)
      {
        goto LABEL_314;
      }
LABEL_54:
      if (((unint64_t)v221 & 0x8000000000000) != 0)
      {
        v191 = (unsigned int *)((unint64_t)v221 & 0xFFFFFFFFFFFFLL);
        do
        {
          v192 = __ldaxr(v191);
          v193 = v192 - 1;
        }
        while (__stlxr(v193, v191));
        if (!v193)
        {
          atomic_store(1u, v191);
          WTF::fastFree((WTF *)v191, v37);
        }
      }
      v41 = *((_QWORD *)v2 + 1);
      v42 = *(_QWORD *)(*(_QWORD *)v2 + 8);
      if (v41 >= *(unsigned int *)(v42 + 60))
      {
        __break(0xC471u);
        JUMPOUT(0x1943E4908);
      }
      v43 = *(_QWORD *)(v42 + 48);
      v44 = (WebCore::GlyphDisplayListCacheEntry *)(v43 + 80 * v41);
      v45 = *((_QWORD *)v2 + 12);
      v46 = (WTF::StringImpl *)((char *)v2 + 56);
      v47 = (WTF::MemoryPressureHandler *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v45 + 80) + 40))(*(_QWORD *)(v45 + 80));
      if ((v47 & 1) == 0 && *(_QWORD *)(v45 + 64))
      {
        {
          WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
          qword_1EE2F92D8 = 0;
          qword_1EE2F92E0 = 0;
        }
        v49 = (uint64_t)v214;
        v50 = WTF::MemoryPressureHandler::singleton(v47);
        v51 = atomic_load((unsigned __int8 *)(v50 + 4));
        if (v51 == 2 || *(_BYTE *)(v50 + 7))
        {
          if (qword_1EE2F92D8 && *(_DWORD *)(qword_1EE2F92D8 - 12))
            WebCore::GlyphDisplayListCache::clear((WebCore::GlyphDisplayListCache *)&WebCore::GlyphDisplayListCache::singleton(void)::cache, v48);
          goto LABEL_250;
        }
        v52 = *((_QWORD *)v214 + 27);
        v207 = v213;
        if (v52)
        {
          ++*(_DWORD *)v52;
          v53 = *(_DWORD *)(v52 + 20);
          if (v53)
          {
            v208 = v43;
            v209 = v49;
            v54 = v45;
            v55 = v2;
            v56 = v44;
            v57 = v46;
            v58 = *(unsigned int **)(v52 + 8);
            v59 = &v58[10 * v53];
            while (1)
            {
              v60 = v58[3];
              if ((_DWORD)v60)
                break;
LABEL_66:
              v58 += 10;
              if (v58 == v59)
              {
                v63 = 0;
                goto LABEL_72;
              }
            }
            v61 = 16 * v60;
            v62 = (_QWORD *)(*(_QWORD *)v58 + 8);
            while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v62 + 24))(*v62))
            {
              v62 += 2;
              v61 -= 16;
              if (!v61)
                goto LABEL_66;
            }
            v63 = 1;
LABEL_72:
            v46 = v57;
            v44 = v56;
            v2 = v55;
            v45 = v54;
            v43 = v208;
            v49 = v209;
          }
          else
          {
            v63 = 0;
          }
          if (*(_DWORD *)v52 == 1)
          {
            WebCore::FontCascadeFonts::~FontCascadeFonts((WebCore::FontCascadeFonts *)v52, v48);
            WTF::fastFree(v112, v113);
          }
          else
          {
            --*(_DWORD *)v52;
          }
        }
        else
        {
          v63 = 0;
        }
        v64 = 0;
        if ((v63 & 1) != 0 || !*(_QWORD *)(v49 + 216))
          goto LABEL_82;
        v65 = v43 + 80 * v41;
        v67 = *(_WORD *)(v65 + 50);
        v66 = (_WORD *)(v65 + 50);
        if ((v67 & 0x100) != 0)
        {
          if (WebCore::GlyphDisplayListCache::singleton(void)::cache)
          {
            v68 = *(_DWORD *)(WebCore::GlyphDisplayListCache::singleton(void)::cache - 8);
            v69 = ((unint64_t)v44 + ~((_QWORD)v44 << 32)) ^ (((unint64_t)v44 + ~((_QWORD)v44 << 32)) >> 22);
            v70 = 9 * ((v69 + ~(v69 << 13)) ^ ((v69 + ~(v69 << 13)) >> 8));
            v71 = (v70 ^ (v70 >> 15)) + ~((v70 ^ (v70 >> 15)) << 27);
            v72 = v68 & ((v71 >> 31) ^ v71);
            v73 = *(WebCore::GlyphDisplayListCacheEntry **)(WebCore::GlyphDisplayListCache::singleton(void)::cache
                                                          + 16 * v72);
            if (v73 == v44)
            {
LABEL_80:
              v74 = *(_QWORD *)(WebCore::GlyphDisplayListCache::singleton(void)::cache + 16 * v72 + 8);
              if (v74)
              {
                v64 = *(_DWORD **)(v74 + 16);
                if (v64)
                  goto LABEL_82;
              }
              goto LABEL_203;
            }
            v109 = 1;
            while (v73)
            {
              v72 = ((_DWORD)v72 + v109) & v68;
              v73 = *(WebCore::GlyphDisplayListCacheEntry **)(WebCore::GlyphDisplayListCache::singleton(void)::cache
                                                            + 16 * v72);
              ++v109;
              if (v73 == v44)
                goto LABEL_80;
            }
          }
          *(_QWORD *)&v225 = 0;
          WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>::~Ref((WebCore::GlyphDisplayListCacheEntry **)&v225);
        }
LABEL_203:
        if (*(unsigned __int8 *)(*(_QWORD *)(v45 + 64) + 284) | qword_1EE2F92E0
          || !WebCore::GlyphDisplayListCache::singleton(void)::cache
          || *(_DWORD *)(WebCore::GlyphDisplayListCache::singleton(void)::cache - 12) <= 0x7FFu)
        {
          v222[0] = v46;
          (*(void (**)(__int128 *__return_ptr, WebCore::GraphicsContext *, _QWORD))(*(_QWORD *)v207 + 672))(&v225, v207, 0);
          *(float *)&v148 = hypot(*(long double *)&v225, *((long double *)&v225 + 1));
          *(float *)&v149 = hypot(v226, v227);
          v222[1] = (WTF *)__PAIR64__(v149, v148);
          v223 = *(_DWORD *)(v49 + 224);
          v224 = *((_BYTE *)v207 + 344);
          if (qword_1EE2F92D8)
          {
            v150 = WTF::HashTable<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>>::lookup<WTF::HashSetTranslatorAdapter<WebCore::GlyphDisplayListCacheKeyTranslator>,WebCore::GlyphDisplayListCacheKey>(&qword_1EE2F92D8, (uint64_t *)v222);
            v151 = qword_1EE2F92D8;
            if (v150)
            {
              if (!qword_1EE2F92D8)
              {
LABEL_211:
                if (v151 != v150)
                {
                  v165 = *(WTF **)(*(_QWORD *)v150 + 8);
                  ++*(_DWORD *)v165;
                  v222[0] = v165;
                  v64 = (_DWORD *)*((_QWORD *)v165 + 2);
                  *v66 |= 0x100u;
                  v221 = v44;
                  WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>(&WebCore::GlyphDisplayListCache::singleton(void)::cache, (uint64_t *)&v221, v222, (uint64_t)&v225);
                  v166 = v222[0];
                  v222[0] = 0;
                  if (v166)
                  {
                    if (*(_DWORD *)v166 == 1)
                    {
                      WebCore::GlyphDisplayListCacheEntry::~GlyphDisplayListCacheEntry(v166);
                      WTF::fastFree(v171, v172);
                    }
                    else
                    {
                      --*(_DWORD *)v166;
                    }
                  }
                  goto LABEL_82;
                }
                goto LABEL_212;
              }
LABEL_210:
              v151 = qword_1EE2F92D8 + 8 * *(unsigned int *)(qword_1EE2F92D8 - 4);
              goto LABEL_211;
            }
            if (qword_1EE2F92D8)
            {
              v150 = qword_1EE2F92D8 + 8 * *(unsigned int *)(qword_1EE2F92D8 - 4);
              goto LABEL_210;
            }
          }
LABEL_212:
          WebCore::FontCascade::displayListForTextRun(v49, (uint64_t)v207);
          if (v222[0])
          {
            v152 = WTF::fastMalloc((WTF *)0x50);
            *(_DWORD *)v152 = 1;
            v153 = v222[0];
            v222[0] = 0;
            *(_QWORD *)(v152 + 8) = 0;
            *(_QWORD *)(v152 + 16) = v153;
            WebCore::TextRun::isolatedCopy(v46, v152 + 24);
            *(float *)(v152 + 64) = WebCore::GraphicsContext::scaleFactor(v207);
            *(_DWORD *)(v152 + 68) = v154;
            *(_DWORD *)(v152 + 72) = *(_DWORD *)(v49 + 224);
            *(_BYTE *)(v152 + 76) = *((_BYTE *)v207 + 344);
            v221 = (WebCore::GlyphDisplayListCacheEntry *)v152;
            v64 = *(_DWORD **)(v152 + 16);
            v155 = v64[3];
            if (v155)
            {
              v156 = 360 * v155;
              v157 = (unsigned int *)(*(_QWORD *)v64 + 352);
              while (1)
              {
                v158 = *v157;
                if (*v157 != 20)
                {
                  v94 = v158 > 0x3B;
                  v167 = (1 << v158) & 0x800200042401006;
                  if (v94 || v167 == 0)
                    break;
                }
                v157 += 90;
                v156 -= 360;
                if (!v156)
                  goto LABEL_217;
              }
            }
            else
            {
LABEL_217:
              v159 = *(WTF **)(v152 + 8);
              if (!v159)
              {
                v159 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
                *(_DWORD *)v159 = 1;
                *((_QWORD *)v159 + 1) = v152;
                v161 = *(WTF **)(v152 + 8);
                *(_QWORD *)(v152 + 8) = v159;
                if (v161)
                {
                  if (*(_DWORD *)v161 == 1)
                  {
                    WTF::fastFree(v161, v160);
                    v159 = *(WTF **)(v152 + 8);
                  }
                  else
                  {
                    --*(_DWORD *)v161;
                  }
                }
              }
              ++*(_DWORD *)v159;
              v220 = v159;
              WTF::HashTable<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>>::add(&qword_1EE2F92D8, &v220, (uint64_t)&v225);
              v163 = v220;
              v220 = 0;
              if (v163)
              {
                if (*(_DWORD *)v163 == 1)
                  WTF::fastFree(v163, v162);
                else
                  --*(_DWORD *)v163;
              }
            }
            *v66 |= 0x100u;
            v220 = v44;
            WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>(&WebCore::GlyphDisplayListCache::singleton(void)::cache, (uint64_t *)&v220, &v221, (uint64_t)&v225);
            v164 = v221;
            v221 = 0;
            if (v164)
            {
              if (*(_DWORD *)v164 == 1)
              {
                WebCore::GlyphDisplayListCacheEntry::~GlyphDisplayListCacheEntry(v164);
                WTF::fastFree(v169, v170);
              }
              else
              {
                --*(_DWORD *)v164;
              }
            }
            v48 = v222[0];
            v222[0] = 0;
            if (v48)
              std::default_delete<WebCore::DisplayList::DisplayList>::operator()[abi:sn180100]((int)v222, v48);
            goto LABEL_82;
          }
        }
LABEL_250:
        v64 = 0;
LABEL_82:
        *(_QWORD *)&v218[16] = v64;
        goto LABEL_83;
      }
      v131 = v43 + 80 * v41;
      v133 = *(_WORD *)(v131 + 50);
      v132 = (_WORD *)(v131 + 50);
      if ((v133 & 0x100) != 0)
      {
        WebCore::removeBoxFromGlyphDisplayListCache(v44, v48);
        *v132 &= ~0x100u;
      }
LABEL_83:
      v75 = *((float *)v2 + 34);
      v76 = *((float *)v2 + 35);
      if (!*((_BYTE *)v2 + 153))
      {
        v77 = *((_QWORD *)v2 + 1);
        v78 = *(_QWORD *)(*(_QWORD *)v2 + 8);
        if (v77 < *(unsigned int *)(v78 + 60))
        {
          v79 = *(_QWORD *)(v78 + 48) + 80 * v77;
          v80 = *(WebCore::Layout::Box **)v79;
          if (*(_DWORD *)(v79 + 40))
            v81 = (uint64_t)v80 + 16;
          else
            v81 = WebCore::Layout::Box::firstLineStyle(v80);
          goto LABEL_87;
        }
LABEL_337:
        __break(0xC471u);
        JUMPOUT(0x1943E4978);
      }
      v178 = *((_QWORD *)v2 + 2);
      if (*(_BYTE *)(v178 + 46) != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1943E49D8);
      }
      v81 = *(_QWORD *)(v178 + 120);
LABEL_87:
      v82 = *(_QWORD **)(v81 + 32);
      v83 = (WebCore::FontCascadeFonts *)v82[31];
      if (v83)
        ++*(_DWORD *)v83;
      v84 = *((_QWORD *)v83 + 13);
      if (v84 && *(_QWORD *)(v84 + 8))
        goto LABEL_91;
      v117 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v83, (const WebCore::FontCascadeDescription *)(v82 + 6), 0);
      WebCore::FontRanges::glyphDataForCharacter(0x20u, v117, 1, (uint64_t)&v225);
      if (!*((_QWORD *)&v225 + 1) || (v118 = *(_QWORD *)(*((_QWORD *)&v225 + 1) + 8)) == 0)
      {
        v119 = 0;
        goto LABEL_144;
      }
      v119 = *(_QWORD *)(v118 + 8);
      if (v119)
        goto LABEL_316;
      v119 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v119 = 1;
      *(_QWORD *)(v119 + 8) = v118;
      v206 = *(WTF **)(v118 + 8);
      *(_QWORD *)(v118 + 8) = v119;
      if (!v206)
        goto LABEL_316;
      if (*(_DWORD *)v206 != 1)
      {
        --*(_DWORD *)v206;
LABEL_316:
        ++*(_DWORD *)v119;
        goto LABEL_144;
      }
      WTF::fastFree(v206, v48);
      v119 = *(_QWORD *)(v118 + 8);
      if (v119)
        goto LABEL_316;
LABEL_144:
      v120 = (WTF *)*((_QWORD *)v83 + 13);
      *((_QWORD *)v83 + 13) = v119;
      if (v120)
      {
        if (*(_DWORD *)v120 == 1)
          WTF::fastFree(v120, v48);
        else
          --*(_DWORD *)v120;
      }
      v121 = (WTF *)*((_QWORD *)&v225 + 1);
      *((_QWORD *)&v225 + 1) = 0;
      if (v121)
      {
        if (*(_DWORD *)v121 == 1)
          WTF::fastFree(v121, v48);
        else
          --*(_DWORD *)v121;
      }
      v122 = *((_QWORD *)v83 + 13);
      if (v122 && (v123 = *(_QWORD *)(v122 + 8)) != 0)
      {
        if ((*(_BYTE *)(v123 + 256) & 2) != 0)
        {
          v124 = 1;
          do
          {
            v125 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v83, (const WebCore::FontCascadeDescription *)(v82 + 6), v124);
            if (!*(_DWORD *)(v125 + 12))
              break;
            WebCore::FontRanges::glyphDataForCharacter(0x20u, v125, 0, (uint64_t)&v225);
            if (*((_QWORD *)&v225 + 1))
              v126 = *(_QWORD *)(*((_QWORD *)&v225 + 1) + 8);
            else
              v126 = 0;
            WTF::WeakPtr<WebCore::Font,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)v222, v126);
            v127 = (WTF *)*((_QWORD *)&v225 + 1);
            *((_QWORD *)&v225 + 1) = 0;
            if (v127)
            {
              if (*(_DWORD *)v127 == 1)
                WTF::fastFree(v127, v48);
              else
                --*(_DWORD *)v127;
            }
            v85 = v222[0];
            if (v222[0])
            {
              v128 = *((_QWORD *)v222[0] + 1);
              if (!v128 || (*(_BYTE *)(v128 + 256) & 2) != 0)
              {
                v130 = 0;
                v222[0] = 0;
              }
              else
              {
                v222[0] = 0;
                v129 = (WTF *)*((_QWORD *)v83 + 13);
                *((_QWORD *)v83 + 13) = v85;
                if (!v129)
                  goto LABEL_92;
                if (*(_DWORD *)v129 != 1)
                {
                  --*(_DWORD *)v129;
                  break;
                }
                WTF::fastFree(v129, v48);
                v85 = v222[0];
                v222[0] = 0;
                if (!v85)
                  break;
                v130 = 2;
              }
              if (*(_DWORD *)v85 == 1)
                WTF::fastFree(v85, v48);
              else
                --*(_DWORD *)v85;
            }
            else
            {
              v130 = 0;
            }
            ++v124;
          }
          while (!v130);
        }
      }
      else
      {
        if (!*(_DWORD *)(v117 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x1943E4A50);
        }
        v144 = WebCore::FontRanges::Range::font(*(_QWORD *)v117);
        WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v225, v144);
        v145 = v225;
        *(_QWORD *)&v225 = 0;
        v146 = (WTF *)*((_QWORD *)v83 + 13);
        *((_QWORD *)v83 + 13) = v145;
        if (v146)
        {
          v147 = *(_DWORD *)v146 - 1;
          if (*(_DWORD *)v146 != 1)
            goto LABEL_201;
          WTF::fastFree(v146, v48);
          v146 = (WTF *)v225;
          *(_QWORD *)&v225 = 0;
          if (!v146)
            goto LABEL_91;
          v147 = *(_DWORD *)v146 - 1;
          if (*(_DWORD *)v146 != 1)
          {
LABEL_201:
            *(_DWORD *)v146 = v147;
            goto LABEL_91;
          }
          WTF::fastFree(v146, v48);
        }
      }
LABEL_91:
      v85 = (WTF *)*((_QWORD *)v83 + 13);
      if (v85)
LABEL_92:
        v86 = *((_QWORD *)v85 + 1);
      else
        v86 = 0;
      if (*(_DWORD *)v83 == 1)
      {
        WebCore::FontCascadeFonts::~FontCascadeFonts(v83, v48);
        WTF::fastFree(v110, v111);
      }
      else
      {
        --*(_DWORD *)v83;
      }
      *(_QWORD *)&v225 = v82[21];
      v87 = v76 + (float)*(int *)(v86 + 60);
      if (*((_BYTE *)v2 + 153))
      {
        v174 = (WebCore::RenderCombineText *)*((_QWORD *)v2 + 2);
        if (*((_BYTE *)v174 + 46) != 3)
        {
          __break(0xC471u);
          JUMPOUT(0x1943E4998);
        }
        v175 = WebCore::RenderCombineText::computeTextOrigin(v174, (WTF::StringImpl *)((char *)v2 + 136));
        if (v176)
        {
          v75 = *(float *)&v175;
          v87 = *((float *)&v175 + 1);
        }
      }
      v88 = *((_QWORD *)v2 + 1);
      v89 = *(_QWORD *)(*(_QWORD *)v2 + 8);
      if (v88 >= *(unsigned int *)(v89 + 60))
      {
        __break(0xC471u);
        JUMPOUT(0x1943E494CLL);
      }
      v90 = *(_QWORD *)(v89 + 48) + 80 * v88;
      v91 = *(WebCore::Layout::Box **)v90;
      if (*(_DWORD *)(v90 + 40))
        v92 = (uint64_t)v91 + 16;
      else
        v92 = WebCore::Layout::Box::firstLineStyle(v91);
      if (((*(_DWORD *)(v92 + 44) >> 13) & 6u) - 2 < 4)
      {
        v184 = v75 * 64.0;
        if (v184 < 2147483650.0 && v184 > -2147483650.0)
          goto LABEL_282;
        if (v184 >= 2147483650.0)
        {
          v185 = 0x7FFFFFFF;
          goto LABEL_283;
        }
        if (v184 > -2147483650.0)
LABEL_282:
          v185 = (int)v184;
        else
          v185 = 0x80000000;
LABEL_283:
        v186 = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 24)
                                                                                                  + 8)
                                                                                      + 40)
                                                                          + 8));
        v187 = (double)v185 * 0.015625;
        v188 = v186;
        v189 = round((v187 + (double)-v185) * v188) / v188 - (double)-v185;
        v190 = round(v187 * v188) / v188;
        if (v187 < 0.0)
          v190 = v189;
        v75 = v190;
        goto LABEL_114;
      }
      v93 = v87 * 64.0;
      v94 = v93 >= 2147483650.0 || v93 <= -2147483650.0;
      if (!v94)
        goto LABEL_104;
      if (v93 >= 2147483650.0)
      {
        v95 = 0x7FFFFFFF;
      }
      else
      {
        if (v93 > -2147483650.0)
        {
LABEL_104:
          v95 = (int)v93;
          goto LABEL_105;
        }
        v95 = 0x80000000;
      }
LABEL_105:
      v96 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 24) + 8) + 40) + 8)
                      + 528);
      v97 = 1.0;
      if (v96)
      {
        v98 = *(_QWORD *)(v96 + 8);
        if (v98)
        {
          v99 = *(_QWORD *)(v98 + 24);
          if (v99)
          {
            v100 = *(_QWORD *)(v99 + 8);
            if (v100)
            {
              v101 = (*(_DWORD *)v100)++;
              v97 = *(float *)(v100 + 364);
              if (v101)
              {
                *(_DWORD *)v100 = v101;
              }
              else
              {
                WebCore::Page::~Page(v100);
                WTF::fastFree(v114, v115);
              }
            }
          }
        }
      }
      v102 = (double)v95 * 0.015625;
      if (v102 < 0.0)
        v103 = round((v102 + (double)-v95) * v97) / v97 - (double)-v95;
      else
        v103 = round(v102 * v97) / v97;
      v87 = v103;
LABEL_114:
      *(_QWORD *)&v225 = __PAIR64__(LODWORD(v87), LODWORD(v75));
      WebCore::TextPainter::paintTextAndEmphasisMarksIfNeeded((float *)&v213, (int *)v46, (float32x4_t *)((char *)v2 + 136), (float32x2_t *)&v225, *(unsigned int *)(a2 + 4), *(_DWORD *)(a2 + 8), (uint64_t)v216, v217[1], *(const WebCore::FilterOperations **)v218);
      if (v210)
        (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v211 + 104))(v211, 1);
      result = v217[0];
      v217[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v104);
        else
          *(_DWORD *)result -= 2;
      }
      if ((*(_QWORD *)&v216[16] & 0x8000000000000) != 0)
      {
        result = (WTF::StringImpl *)(*(_QWORD *)&v216[16] & 0xFFFFFFFFFFFFLL);
        do
        {
          v194 = __ldaxr((unsigned int *)result);
          v195 = v194 - 1;
        }
        while (__stlxr(v195, (unsigned int *)result));
        if (!v195)
        {
          atomic_store(1u, (unsigned int *)result);
          result = (WTF::StringImpl *)WTF::fastFree(result, v104);
        }
      }
      if ((*(_QWORD *)&v216[8] & 0x8000000000000) != 0)
      {
        result = (WTF::StringImpl *)(*(_QWORD *)&v216[8] & 0xFFFFFFFFFFFFLL);
        do
        {
          v196 = __ldaxr((unsigned int *)result);
          v197 = v196 - 1;
        }
        while (__stlxr(v197, (unsigned int *)result));
        if (!v197)
        {
          atomic_store(1u, (unsigned int *)result);
          result = (WTF::StringImpl *)WTF::fastFree(result, v104);
        }
      }
      if ((*(_QWORD *)v216 & 0x8000000000000) != 0)
      {
        result = (WTF::StringImpl *)(*(_QWORD *)v216 & 0xFFFFFFFFFFFFLL);
        do
        {
          v198 = __ldaxr((unsigned int *)result);
          v199 = v198 - 1;
        }
        while (__stlxr(v199, (unsigned int *)result));
        if (!v199)
        {
          atomic_store(1u, (unsigned int *)result);
          return (WTF::StringImpl *)WTF::fastFree(result, v104);
        }
      }
      return result;
  }
}

float WebCore::FontCascade::drawText(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  float32x2_t *v8;
  float32x2_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  void *v16;
  __n128 v17;
  float32x2_t v18;
  float result;
  WTF *v20;
  WTF *v21;
  WTF *v22;
  WTF *v23;
  WTF *v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  double v30;
  WTF *v31;
  int v32;
  int v33;
  uint64_t v34;
  WTF *v35;
  int v36;
  uint64_t v37;
  WTF *v38;
  int v39;
  uint64_t v40;
  WTF *v41;
  int v42;
  uint64_t v43;
  WTF *v44;
  int v45;
  uint64_t v46;
  float64x2_t v47;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = v2;
  v13 = *(_QWORD *)(v3 + 8);
  v14 = WebCore::FontCascade::s_codePath;
  if (!WebCore::FontCascade::s_codePath)
  {
    if (*(_BYTE *)(v12 + 229) || *(_BYTE *)(v12 + 230))
    {
      if (v4)
        goto LABEL_22;
      v15 = v13 ? *(_DWORD *)(v13 + 4) : 0;
      if ((v5 & 0xFF00000000) != 0 && v15 != (_DWORD)v5)
        goto LABEL_22;
    }
    if (!v13 || (*(_BYTE *)(v3 + 37) & 8) == 0 || (*(_BYTE *)(v13 + 16) & 4) != 0)
      goto LABEL_11;
    v14 = WebCore::FontCascade::characterRangeCodePath(*(_QWORD *)(v13 + 8), *(unsigned int *)(v13 + 4));
  }
  if (v14 != 2)
  {
LABEL_11:
    WebCore::FontCascade::layoutSimpleText((uint64_t)&v31, v12);
    goto LABEL_12;
  }
LABEL_22:
  WebCore::FontCascade::layoutComplexText((uint64_t)&v31, v12);
LABEL_12:
  WebCore::GlyphBuffer::flatten((WebCore::GlyphBuffer *)&v31);
  if (v33)
  {
    v18 = *v9;
    v30 = COERCE_DOUBLE(vadd_f32(*v9, vcvt_f32_f64(v47)));
    WebCore::FontCascade::drawGlyphBuffer(v12, v11, (uint64_t)&v31, (unint64_t *)&v30, v7, v30, *(double *)&v18, v17);
    result = *(float *)&v30 - v9->f32[0];
  }
  else
  {
    result = 0.0;
  }
  v20 = v44;
  if (&v46 != (uint64_t *)v44 && v44)
  {
    v44 = 0;
    v45 = 0;
    v25 = result;
    WTF::fastFree(v20, v16);
    result = v25;
  }
  v21 = v41;
  if (&v43 != (uint64_t *)v41 && v41)
  {
    v41 = 0;
    v42 = 0;
    v26 = result;
    WTF::fastFree(v21, v16);
    result = v26;
  }
  v22 = v38;
  if (&v40 != (uint64_t *)v38 && v38)
  {
    v38 = 0;
    v39 = 0;
    v27 = result;
    WTF::fastFree(v22, v16);
    result = v27;
  }
  v23 = v35;
  if (&v37 != (uint64_t *)v35 && v35)
  {
    v35 = 0;
    v36 = 0;
    v28 = result;
    WTF::fastFree(v23, v16);
    result = v28;
  }
  v24 = v31;
  if (&v34 != (uint64_t *)v31)
  {
    if (v31)
    {
      v31 = 0;
      v32 = 0;
      v29 = result;
      WTF::fastFree(v24, v16);
      return v29;
    }
  }
  return result;
}

WebCore::Font *WebCore::FontCascade::drawGlyphBuffer(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, int a5, double a6, double a7, __n128 a8)
{
  unsigned int v8;
  WebCore::Font *v11;
  unint64_t v12;
  double *v16;
  float v17;
  unsigned int v18;
  float v19;
  unint64_t v20;
  WebCore::Font *v21;
  WebCore::Font *v22;
  uint64_t v23;
  float64x2_t v24;
  int v25;
  unsigned __int8 v26;
  uint64_t v27;
  int v29;
  unsigned __int8 v30;
  uint64_t v31;
  float64x2_t v32;
  __n128 v33;
  unsigned __int32 v34;
  unint64_t v35;

  v8 = *(_DWORD *)(a3 + 12);
  if (!v8)
  {
    __break(0xC471u);
    JUMPOUT(0x1943E4FB8);
  }
  v11 = **(WebCore::Font ***)a3;
  ++*(_DWORD *)v11;
  v12 = *a4;
  v35 = *a4;
  if (!*(_DWORD *)(a3 + 10284))
  {
    __break(0xC471u);
    goto LABEL_37;
  }
  v16 = *(double **)(a3 + 10272);
  v17 = *v16;
  a8.n128_f32[0] = *(float *)&v12 + v17;
  if (v8 >= 2)
  {
    v18 = 0;
    v19 = v16[1];
    a8.n128_f32[1] = *((float *)&v12 + 1) + v19;
    v20 = 1;
    while (1)
    {
      v21 = *(WebCore::Font **)(*(_QWORD *)a3 + 8 * v20);
      ++*(_DWORD *)v21;
      v33 = a8;
      if (v21 == v11)
      {
        v22 = v11;
      }
      else
      {
        if ((*((_BYTE *)v11 + 256) & 2) == 0 || (*((_BYTE *)v11 + 256) & 4) == 0 || (a5 & 1) != 0)
        {
          v29 = (*(unsigned __int16 *)(a1 + 196) >> 7) & 3;
          v30 = atomic_load(WebCore::disableFontSubpixelAntialiasingForTesting);
          if ((v30 & 1) == 0 || (v31 = 2, v29) && v29 != 3)
            v31 = (*(unsigned __int16 *)(a1 + 196) >> 7) & 3;
          (*(void (**)(uint64_t, WebCore::Font *, uint64_t, uint64_t, unint64_t, unint64_t *, uint64_t))(*(_QWORD *)a2 + 552))(a2, v11, *(_QWORD *)(a3 + 8208) + 2 * v18, *(_QWORD *)(a3 + 10272) + 16 * v18, v20 + -v18, &v35, v31);
        }
        v18 = v20;
        WTF::RefCounted<WebCore::Font>::deref(v11);
        v22 = 0;
        a8 = v33;
        v35 = v33.n128_u64[0];
        v11 = v21;
      }
      if (v20 >= *(unsigned int *)(a3 + 10284))
        break;
      v23 = *(_QWORD *)(a3 + 10272);
      v24 = *(float64x2_t *)(v23 + 16 * v20);
      if (v22)
      {
        v32 = *(float64x2_t *)(v23 + 16 * v20);
        WTF::RefCounted<WebCore::Font>::deref(v22);
        v24 = v32;
        a8 = v33;
      }
      a8.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)a8.n128_u64[0], vcvt_f32_f64(v24));
      if (++v20 >= *(unsigned int *)(a3 + 12))
        goto LABEL_11;
    }
    __break(0xC471u);
LABEL_37:
    JUMPOUT(0x1943E4FB0);
  }
  v18 = 0;
  LODWORD(v20) = 1;
LABEL_11:
  if ((*((_BYTE *)v11 + 256) & 2) == 0 || (*((_BYTE *)v11 + 256) & 4) == 0 || a5)
  {
    v34 = a8.n128_u32[0];
    v25 = (*(unsigned __int16 *)(a1 + 196) >> 7) & 3;
    v26 = atomic_load(WebCore::disableFontSubpixelAntialiasingForTesting);
    if ((v26 & 1) == 0 || (v27 = 2, v25) && v25 != 3)
      v27 = (*(unsigned __int16 *)(a1 + 196) >> 7) & 3;
    (*(void (**)(uint64_t, WebCore::Font *, uint64_t, uint64_t, _QWORD, unint64_t *, uint64_t))(*(_QWORD *)a2 + 552))(a2, v11, *(_QWORD *)(a3 + 8208) + 2 * v18, *(_QWORD *)(a3 + 10272) + 16 * v18, v20 - v18, &v35, v27);
    a8.n128_u32[0] = v34;
  }
  *(_DWORD *)a4 = a8.n128_u32[0];
  return WTF::RefCounted<WebCore::Font>::deref(v11);
}

float64x2_t WebCore::GlyphBuffer::flatten(WebCore::GlyphBuffer *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  float32x2_t v12;
  float v13;
  float v14;
  float32x2_t v15;
  float64x2_t result;
  float v17;
  float v18;

  v1 = *((unsigned int *)this + 3);
  if ((_DWORD)v1)
  {
    v2 = *((unsigned int *)this + 6671);
    if ((_DWORD)v2)
    {
      v3 = 0;
      *((float64x2_t *)this + 3205) = vcvtq_f64_f32(vadd_f32(vcvt_f32_f64(*((float64x2_t *)this + 3205)), vcvt_f32_f64(*(float64x2_t *)*((_QWORD *)this + 3334))));
      v4 = 8;
      while (v2 != v3)
      {
        if (v3 >= *((unsigned int *)this + 2571))
        {
          __break(0xC471u);
          JUMPOUT(0x1943E50BCLL);
        }
        v5 = *((_QWORD *)this + 3334);
        v6 = v5 + v4 - 8;
        v7 = *((_QWORD *)this + 1284);
        if (++v3 >= v1)
        {
          v17 = *(double *)(v5 + v4);
          v18 = *(double *)(v7 + v4);
          v11 = v18 - v17;
          v12 = 0;
        }
        else
        {
          if (v3 >= v2)
          {
            __break(0xC471u);
            JUMPOUT(0x1943E50C4);
          }
          v8 = *(double *)(v7 + v4);
          v9 = v5 + v4;
          v10 = *(double *)v9;
          v11 = v8 - v10;
          v12 = vcvt_f32_f64(*(float64x2_t *)(v9 + 8));
        }
        v13 = *(double *)v6;
        v14 = *(double *)(v7 + v4 - 8);
        v15.f32[0] = v14 - v13;
        v15.f32[1] = v11;
        result = vcvtq_f64_f32(vadd_f32(v15, v12));
        *(float64x2_t *)(v7 + v4 - 8) = result;
        *(_QWORD *)v6 = 0;
        *(_QWORD *)(v6 + 8) = 0;
        v4 += 16;
        if (v1 == v3)
          return result;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x1943E50B4);
  }
  return result;
}

float WebCore::GraphicsContext::drawText(uint64_t a1, uint64_t a2)
{
  return WebCore::FontCascade::drawText(a2, a1);
}

uint64_t WebCore::GraphicsContext::setFillColor(WebCore::GraphicsContext *this, const WebCore::Color *a2)
{
  unint64_t *v3;
  unint64_t v4;
  int v5;
  char *v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  _BOOL4 v21;
  _QWORD *v22;
  _BOOL4 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[64];
  int v27;
  unint64_t v28;
  _QWORD v29[8];
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = (unint64_t *)((char *)this + 8);
  v27 = 0;
  v4 = *(_QWORD *)a2;
  v28 = v4;
  if ((v4 & 0x8000000000000) != 0)
  {
    v12 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v5 = v27;
    LOBYTE(v29[0]) = 0;
    v30 = -1;
  }
  else
  {
    v5 = 0;
    LOBYTE(v29[0]) = 0;
    v30 = -1;
  }
  ((void (*)(__int128 *, _QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal[v5])(&v25, v29, v26);
  v30 = v5;
  v7 = *v3;
  if ((*v3 & 0x8000000000000) != 0)
  {
    if ((v28 & 0x8000000000000) == 0)
      goto LABEL_8;
    v25 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFLL) + 4);
    v24 = *(_OWORD *)((v28 & 0xFFFFFFFFFFFFLL) + 4);
    if (!WebCore::operator==<float,4ul>((float *)&v25, (float *)&v24)
      || HIBYTE(*v3) != HIBYTE(v28)
      || BYTE6(*v3) != BYTE6(v28))
    {
      goto LABEL_8;
    }
    v5 = v30;
  }
  else if (v7 != v28 || (v28 & 0x8000000000000) != 0)
  {
    goto LABEL_8;
  }
  v20 = *((_DWORD *)this + 22);
  v21 = v5 == v20;
  if (v5 == -1)
    v21 = 0;
  if (v20 == -1)
    v21 = v5 == -1;
  if (v21)
  {
    v22 = (_QWORD *)((char *)this + 24);
    if (v20 == 2)
    {
      if (v5 == 2)
      {
        if (*v22 == v29[0])
          goto LABEL_17;
        goto LABEL_8;
      }
    }
    else
    {
      if (v20 != 1)
        goto LABEL_17;
      if (v5 == 1)
      {
        if ((WebCore::operator==((uint64_t)v22, (uint64_t)v29) & 1) != 0)
          goto LABEL_17;
        goto LABEL_8;
      }
    }
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
LABEL_8:
  v9 = *v3;
  if ((*v3 & 0x8000000000000) != 0)
  {
    if ((v28 & 0x8000000000000) != 0)
    {
      v25 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFLL) + 4);
      v24 = *(_OWORD *)((v28 & 0xFFFFFFFFFFFFLL) + 4);
      v23 = WebCore::operator==<float,4ul>((float *)&v25, (float *)&v24);
      v9 = *v3;
      if (v23 && HIBYTE(v9) == HIBYTE(v28) && BYTE6(v9) == BYTE6(v28))
        goto LABEL_13;
    }
  }
  else if (v9 == v28 && (v28 & 0x8000000000000) == 0)
  {
    goto LABEL_13;
  }
  if ((v9 & 0x8000000000000) != 0)
  {
    v14 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v6);
    }
  }
  *v3 = v28;
  v28 = 0;
LABEL_13:
  v6 = (char *)this + 24;
  v10 = *((unsigned int *)this + 22);
  if ((_DWORD)v10 == -1)
  {
    if (v30 == -1)
      goto LABEL_16;
  }
  else if (v30 == -1)
  {
    ((void (*)(__int128 *, char *))off_1E33471A8[v10])(&v25, v6);
    *((_DWORD *)this + 22) = -1;
    goto LABEL_16;
  }
  *(_QWORD *)&v25 = (char *)this + 24;
  ((void (*)(__int128 *))off_1E33471D0[v30])(&v25);
LABEL_16:
  *((_DWORD *)this + 46) |= 1u;
LABEL_17:
  if (v30 != -1)
    ((void (*)(__int128 *, _QWORD *))off_1E33471A8[v30])(&v25, v29);
  v30 = -1;
  if ((v28 & 0x8000000000000) != 0)
  {
    v17 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFLL);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v6);
    }
  }
  if (v27 != -1)
    ((void (*)(__int128 *, _BYTE *))off_1E33471A8[v27])(&v25, v26);
  return (*(uint64_t (**)(WebCore::GraphicsContext *, unint64_t *))(*(_QWORD *)this + 88))(this, v3);
}

void sub_1943E5468(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,int a28,char a29)
{
  WebCore::SourceBrush::~SourceBrush((WebCore::SourceBrush *)&a29, a2);
  if (a27 != -1)
    ((void (*)(char *, uint64_t *))off_1E33471A8[a27])(&a13, &a19);
  _Unwind_Resume(a1);
}

uint64_t WebCore::DrawGlyphsRecorder::drawBySplittingIntoOTSVGAndNonOTSVGRuns(WebCore::DrawGlyphsRecorder *a1, CTFontRef *this, unsigned __int16 *a3, const unsigned __int16 *a4, const CGSize *a5, uint64_t *a6, int a7)
{
  const unsigned __int16 *v10;
  uint64_t result;
  void *v15;
  float32x2_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  float32x2_t v23;
  _QWORD v24[9];
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  const unsigned __int16 *v32;
  unsigned __int16 *v33;

  v10 = a4;
  v32 = a4;
  v33 = a3;
  v31 = a7;
  result = (uint64_t)WebCore::Font::findOTSVGGlyphs(this, a3, a5, (WTF::BitVector *)&v29);
  if (!v30)
  {
    WebCore::DrawGlyphsRecorder::prepareInternalContext(a1, this, a7);
    WebCore::FontCascade::drawGlyphs(*((_QWORD *)a1 + 1), (WebCore::Font *)this, a3, v10, a5, a6, a7);
    result = WebCore::DrawGlyphsRecorder::concludeInternalContext(a1);
    goto LABEL_3;
  }
  v16 = (float32x2_t)*a6;
  v28 = *a6;
  v27 = 0;
  v26 = 0;
  v24[0] = &v27;
  v24[1] = &v26;
  v24[2] = a1;
  v24[3] = this;
  v24[4] = &v33;
  v24[5] = &v25;
  v24[6] = &v32;
  v24[7] = &v28;
  v24[8] = &v31;
  v25 = 0;
  if (!(_DWORD)a5)
  {
LABEL_15:
    result = WebCore::DrawGlyphsRecorder::drawBySplittingIntoOTSVGAndNonOTSVGRuns(WebCore::Font const&,unsigned short const*,CGSize const*,unsigned int,WebCore::FloatPoint const&,WebCore::FontSmoothingMode)::$_0::operator()((uint64_t)v24);
LABEL_3:
    if (v30)
    {
      if ((v29 & 0x8000000000000000) == 0)
        return WTF::fastFree((WTF *)(2 * v29), v15);
    }
    return result;
  }
  v17 = 0;
  v18 = 0;
  v19 = 0;
  while (v30)
  {
    if (v29 < 0)
      v20 = &v29;
    else
      v20 = (uint64_t *)(2 * v29 + 8);
    v21 = v19;
    v22 = (*(unint64_t *)((char *)v20 + (((unint64_t)v19 >> 3) & 0x1FFFFFF8)) >> v19) & 1;
    if ((_DWORD)v22 != v18)
    {
      v23 = v16;
      result = WebCore::DrawGlyphsRecorder::drawBySplittingIntoOTSVGAndNonOTSVGRuns(WebCore::Font const&,unsigned short const*,CGSize const*,unsigned int,WebCore::FloatPoint const&,WebCore::FontSmoothingMode)::$_0::operator()((uint64_t)v24);
      v16 = v23;
      v17 = 0;
      v26 = v22;
      v28 = (uint64_t)v23;
      v10 = v32;
      v21 = v25;
      v19 = v25;
    }
    v27 = ++v17;
    v16 = vadd_f32(v16, vcvt_f32_f64(*(float64x2_t *)&v10[8 * v21]));
    v25 = ++v19;
    v18 = v22;
    if (v19 >= a5)
      goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t *WebCore::Font::otSVGTable(CTFontRef *this)
{
  uint64_t (*v1)(uint64_t);
  void *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t (*__ptr32 *v5)();
  uint64_t *v6;
  const __CFData *v9;
  const __CFData *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const __CFData *block;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  void *v17;
  char v18;

  v6 = (uint64_t *)(this + 36);
  if (!*((_BYTE *)this + 296))
  {
    v9 = CTFontCopyTable(this[11], 0x53564720u, 0);
    if (v9)
    {
      v10 = v9;
      PAL::OTSVGTable::OTSVGTable((PAL::OTSVGTable *)&block, v9, (const __CFData *)*((unsigned int *)this + 4), *((float *)this + 24));
      std::optional<PAL::OTSVGTable>::operator=[abi:sn180100]<PAL::OTSVGTable,void>(v6, (uint64_t *)&block);
      PAL::OTSVGTable::~OTSVGTable((PAL::OTSVGTable *)&block);
      CFRelease(v10);
      goto LABEL_17;
    }
    v10 = (const __CFData *)MEMORY[0x1E0C809B0];
    v5 = &off_196876000;
    v1 = ___ZN3PAL12OTSVGLibraryEb_block_invoke;
    v3 = &WebCore::SVGStopElement::SVGStopElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag;
    v4 = &WebCore::SVGStopElement::SVGStopElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag;
    v2 = &__block_descriptor_tmp_6;
    if (!*((_BYTE *)this + 296))
      goto LABEL_19;
    block = (const __CFData *)MEMORY[0x1E0C809B0];
    v15 = 0x40000000;
    v16 = ___ZN3PAL12OTSVGLibraryEb_block_invoke;
    v17 = &__block_descriptor_tmp_6;
    v18 = 1;
    if (PAL::OTSVGLibrary(BOOL)::once != -1)
      dispatch_once(&PAL::OTSVGLibrary(BOOL)::once, &block);
    v11 = *v6;
    if (PAL::OTSVGLibrary(BOOL)::frameworkLibrary && v11)
    {
      PAL::softLinkOTSVGOTSVGTableRelease(v11);
      v11 = 0;
    }
    *v6 = 0;
    while (1)
    {
      block = v10;
      v12 = *((_QWORD *)v5 + 65);
      v15 = v12;
      v16 = v1;
      v17 = v2;
      v18 = 1;
      if (v3[410] != -1)
      {
        v5 = (uint64_t (*__ptr32 *)())v11;
        dispatch_once(&PAL::OTSVGLibrary(BOOL)::once, &block);
        v11 = (uint64_t)v5;
      }
      if (v4[409])
      {
        if (v11)
        {
          PAL::softLinkOTSVGOTSVGTableRelease(v11);
          v13 = v3[410];
          block = v10;
          v15 = v12;
          v16 = v1;
          v17 = v2;
          v18 = 1;
          if (v13 != -1)
            dispatch_once(&PAL::OTSVGLibrary(BOOL)::once, &block);
        }
      }
LABEL_17:
      if (*((_BYTE *)this + 296))
        break;
      std::__throw_bad_optional_access[abi:sn180100]();
LABEL_19:
      v11 = 0;
      this[36] = 0;
      *((_BYTE *)this + 296) = 1;
    }
  }
  return v6;
}

uint64_t WebCore::DisplayList::Recorder::drawGlyphs(uint64_t a1, WebCore::Font *this, unsigned __int16 *a3, const unsigned __int16 *a4, const CGSize *a5, uint64_t *a6, uint64_t a7)
{
  int v7;
  uint64_t v14;
  float v16;
  void *v17;
  WebCore::DrawGlyphsRecorder *v18;
  WTF *v19;
  void *v20;

  v7 = a7;
  if ((*(_DWORD *)(a1 + 3800) - 1) > 1)
    return WebCore::DisplayList::Recorder::drawGlyphsAndCacheResources((_DWORD *)a1, this, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7);
  v14 = *(_QWORD *)(a1 + 3776);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x170);
    v16 = *(float *)(a1 + 3784);
    *(_QWORD *)v14 = a1;
    WebCore::DrawGlyphsRecorder::createInternalContext((uint64_t *)(v14 + 8));
    *(_QWORD *)(v14 + 16) = 0;
    *(_WORD *)(v14 + 24) = 0;
    *(_OWORD *)(v14 + 32) = constinit_4;
    *(_OWORD *)(v14 + 48) = xmmword_1969F8630;
    *(_OWORD *)(v14 + 64) = xmmword_1969F8640;
    *(_QWORD *)(v14 + 80) = 0x11040000000000FFLL;
    *(_DWORD *)(v14 + 160) = 0;
    *(_QWORD *)(v14 + 168) = 0x11040000000000FFLL;
    *(_DWORD *)(v14 + 248) = 0;
    *(_OWORD *)(v14 + 256) = constinit_4;
    *(_OWORD *)(v14 + 272) = xmmword_1969F8630;
    *(_OWORD *)(v14 + 288) = xmmword_1969F8640;
    *(_BYTE *)(v14 + 304) = 0;
    *(_BYTE *)(v14 + 336) = 0;
    *(_BYTE *)(v14 + 344) = 0;
    *(_QWORD *)(v14 + 352) = 0;
    *(_QWORD *)(v14 + 360) = 0;
    (*(void (**)(_QWORD, float))(**(_QWORD **)(v14 + 8) + 680))(*(_QWORD *)(v14 + 8), v16);
    v18 = *(WebCore::DrawGlyphsRecorder **)(a1 + 3776);
    *(_QWORD *)(a1 + 3776) = v14;
    if (v18)
    {
      WebCore::DrawGlyphsRecorder::~DrawGlyphsRecorder(v18, v17);
      WTF::fastFree(v19, v20);
      v14 = *(_QWORD *)(a1 + 3776);
    }
  }
  return WebCore::DrawGlyphsRecorder::drawBySplittingIntoOTSVGAndNonOTSVGRuns((WebCore::DrawGlyphsRecorder *)v14, (CTFontRef *)this, a3, a4, a5, a6, v7);
}

void WebCore::DrawGlyphsRecorder::createInternalContext(uint64_t *a1@<X8>)
{
  const void *v3;
  CGContext *v4;
  uint64_t v5;

  v3 = (const void *)CGContextDelegateCreate();
  CGContextDelegateSetCallback();
  CGContextDelegateSetCallback();
  CGContextDelegateSetCallback();
  CGContextDelegateSetCallback();
  CGContextDelegateSetCallback();
  v4 = (CGContext *)CGContextCreateWithDelegate();
  v5 = WTF::fastMalloc((WTF *)0x2F0);
  *a1 = WebCore::GraphicsContextCG::GraphicsContextCG(v5, v4, 0, 0);
  if (v4)
    CFRelease(v4);
  if (v3)
    CFRelease(v3);
}

uint64_t WebCore::GraphicsContextCG::applyDeviceScaleFactor(WebCore::GraphicsContextCG *this, float a2)
{
  CGAffineTransform v5;
  CGAffineTransform v6;
  _DWORD v7[2];

  *(float *)v7 = a2;
  *(float *)&v7[1] = a2;
  (*(void (**)(WebCore::GraphicsContextCG *, _DWORD *))(*(_QWORD *)this + 632))(this, v7);
  *((_BYTE *)this + 744) |= 8u;
  CGContextGetBaseCTM();
  CGAffineTransformScale(&v6, &v5, a2, a2);
  return CGContextSetBaseCTM();
}

uint64_t WebCore::TextRun::subRun@<X0>(uint64_t this@<X0>, WTF::StringImpl *a2@<X1>, unsigned int a3@<W2>, unint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a4 = 0;
  v4 = *(_QWORD *)(this + 8);
  if (!v4)
    goto LABEL_19;
  *(_DWORD *)v4 += 2;
  v5 = (_QWORD *)(a4 + 8);
  *(_OWORD *)(a4 + 16) = *(_OWORD *)(this + 16);
  *(_QWORD *)(a4 + 30) = *(_QWORD *)(this + 30);
  a4 = *(unsigned __int8 *)(v4 + 16);
  if ((a4 & 4) == 0)
  {
    a4 = *(unsigned int *)(v4 + 4);
    if (a4 < a2)
      goto LABEL_18;
    a4 -= a2;
    if (a4 < a3)
      goto LABEL_18;
    if (a3)
    {
      this = WTF::StringImpl::createWithoutCopyingNonEmpty();
      v8 = v9;
    }
    else
    {
      v8 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    *v5 = v8;
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v4 + 4);
  while (1)
  {
    if (v6 >= a2)
    {
      a4 = a2;
      if (v6 - a2 >= a3)
        break;
    }
LABEL_18:
    __break(1u);
LABEL_19:
    v6 = 0;
    v5 = (_QWORD *)(a4 + 8);
    *(_OWORD *)(a4 + 16) = *(_OWORD *)(this + 16);
    *(_QWORD *)(a4 + 30) = *(_QWORD *)(this + 30);
  }
  if (a3)
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = v9;
  }
  else
  {
    v7 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
  }
  *v5 = v7;
  if (v4)
  {
LABEL_9:
    if (*(_DWORD *)v4 == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return this;
}

uint64_t WebCore::BidiResolverBase<WebCore::TextBoxIterator,WebCore::BidiCharacterRun,WebCore::BidiResolver<WebCore::TextBoxIterator,WebCore::BidiCharacterRun>>::appendRunInternal(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  WTF *v18;
  void *v19;
  int v20;
  WebCore::BidiCharacterRun *v21;

  v1 = result;
  if (!*(_BYTE *)(result + 136))
  {
    v3 = (_QWORD *)(result + 32);
    v2 = *(_QWORD *)(result + 32);
    if (v2)
    {
      v4 = *(_QWORD *)(v2 + 8);
      if (v4)
      {
        v5 = *(_DWORD *)(result + 40);
        if (v5 < *(_DWORD *)(v4 + 4))
        {
          v6 = *(_DWORD *)(result + 24);
          v7 = *(_QWORD *)(result + 96);
          v8 = *(_DWORD *)(result + 40);
          if (v7)
          {
            v9 = *(_QWORD *)(v7 + 8);
            v8 = *(_DWORD *)(result + 40);
            if (v9)
            {
              v10 = *(_DWORD *)(result + 104);
              v8 = *(_DWORD *)(result + 40);
              if (v5 >= v10)
              {
                v8 = *(_DWORD *)(result + 40);
                if (v10 < *(_DWORD *)(v9 + 4))
                {
                  *(_BYTE *)(result + 112) = 1;
                  v8 = v10;
                }
              }
            }
          }
          v11 = (_QWORD *)(result + 16);
          if (v8 < v6)
            goto LABEL_23;
          v12 = v8 + 1;
          v13 = *(_QWORD *)(result + 80);
          result = WTF::fastMalloc((WTF *)0x18);
          v14 = *(_DWORD *)(v1 + 88);
          *(_QWORD *)result = 0;
          *(_DWORD *)(result + 8) = v6;
          *(_DWORD *)(result + 12) = v12;
          *(_BYTE *)(result + 17) = *(_BYTE *)(result + 17) & 0xFE | ((*(_WORD *)(v13 + 4) & 0x800) != 0);
          v15 = *(unsigned __int16 *)(v13 + 4);
          v16 = (v15 >> 6) & 0x1F;
          if (v14 != 10)
            v16 = v14;
          v17 = v15 & 0x3F;
          *(_BYTE *)(result + 16) = v15 & 0x3F;
          if ((v15 & 1) != 0)
          {
            if (v16 > 5)
              goto LABEL_20;
            v20 = 1 << v16;
            LOBYTE(v16) = 1;
            if ((v20 & 0x25) == 0)
              goto LABEL_20;
          }
          else if (v16 == 2 || v16 == 5)
          {
            LOBYTE(v16) = 2;
          }
          else if (v16 != 1)
          {
LABEL_20:
            v21 = (WebCore::BidiCharacterRun *)result;
            if (*(_QWORD *)(v1 + 144))
            {
              WebCore::BidiCharacterRun::setNext(*(WebCore::BidiCharacterRun ****)(v1 + 152), (WebCore::BidiCharacterRun ***)&v21);
              *(_QWORD *)(v1 + 152) = **(_QWORD **)(v1 + 152);
              result = (uint64_t)v21;
              ++*(_DWORD *)(v1 + 168);
              v21 = 0;
              if (result)
              {
                WebCore::BidiCharacterRun::~BidiCharacterRun((WTF **)result);
                result = WTF::fastFree(v18, v19);
              }
            }
            else
            {
              *(_QWORD *)(v1 + 144) = result;
              *(_QWORD *)(v1 + 152) = result;
              ++*(_DWORD *)(v1 + 168);
            }
            v5 = *(_DWORD *)(v1 + 40);
LABEL_23:
            *(_DWORD *)(v1 + 40) = v5 + 1;
            *v11 = *v3;
            *(_DWORD *)(v1 + 24) = *(_DWORD *)(v1 + 40);
            goto LABEL_24;
          }
          *(_BYTE *)(result + 16) = v16 + v17;
          goto LABEL_20;
        }
      }
    }
  }
LABEL_24:
  *(_DWORD *)(v1 + 88) = 10;
  *(_DWORD *)(v1 + 64) = 10;
  return result;
}

void WebCore::BidiContext::create(int a1@<W0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, unsigned int *a5@<X4>, uint64_t *a6@<X8>)
{
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  char v13;
  char **v14;
  char *v15;

  if (a5)
  {
    WebCore::BidiContext::createUncached(a1, a2, a3, a4, a5, a6);
  }
  else
  {
    if (a1)
    {
      if ((a3 & 1) != 0)
      {
        {
          WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::rtlOverrideContext = 0;
        }
        std::call_once[abi:sn180100]<WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::$_3>((uint64_t)&v15);
        v8 = (unsigned int *)WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::rtlOverrideContext;
        do
          v10 = __ldaxr(v8);
        while (__stlxr(v10 + 1, v8));
      }
      else
      {
        {
          WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::rtlContext = 0;
        }
        std::call_once[abi:sn180100]<WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::$_2>((uint64_t)&v15);
        v8 = (unsigned int *)WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::rtlContext;
        do
          v12 = __ldaxr(v8);
        while (__stlxr(v12 + 1, v8));
      }
    }
    else if ((a3 & 1) != 0)
    {
      {
        WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::ltrOverrideContext = 0;
      }
      std::call_once[abi:sn180100]<WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::$_1>((uint64_t)&v15);
      v8 = (unsigned int *)WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::ltrOverrideContext;
      do
        v11 = __ldaxr(v8);
      while (__stlxr(v11 + 1, v8));
    }
    else
    {
      {
        WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::ltrContext = 0;
      }
      v7 = atomic_load(&WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::ltrContextOnceFlag);
      if (v7 != -1)
      {
        v15 = &v13;
        v14 = &v15;
        std::__call_once(&WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::ltrContextOnceFlag, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::$_0 &&>>);
      }
      v8 = (unsigned int *)WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::ltrContext;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
    *a6 = (uint64_t)v8;
  }
}

uint64_t WebCore::EllipsisBoxPainter::paint(WebCore::EllipsisBoxPainter *this)
{
  WebCore::GraphicsContext *v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  void *v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  float v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t result;
  uint64_t v35;
  void *v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  float v44;
  float v45;
  double v46;
  double v47;
  int v48;
  double v49;
  int v50;
  float v51;
  void *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  int *v60;
  float v61;
  float v62;
  float v63;
  unsigned int v64;
  unsigned int v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  WTF::StringImpl *v71[2];
  uint64_t v72;
  char v73;
  int v74;
  float v75[2];
  unint64_t v76;
  char v77;
  __int128 v78;

  v2 = *(WebCore::GraphicsContext **)(*((_QWORD *)this + 1) + 80);
  v3 = WebCore::InlineIterator::LineBox::style(*(WebCore::InlineIterator::LineBox **)this);
  WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)v3, 342, 0, &v76);
  if (WebCore::InlineIterator::LineBox::ellipsisSelectionState(*(WebCore::InlineIterator::LineBox **)this))
  {
    WebCore::EllipsisBoxPainter::paintSelection(this);
    v37 = *(_DWORD *)(*((_QWORD *)this + 1) + 20);
    if ((v37 & 0xC) != 0)
    {
      if ((v37 & 4) != 0)
        v38 = -16777216;
      else
        v38 = -1;
      v39 = bswap32(v38) | 0x1104000000000000;
      v71[0] = (WTF::StringImpl *)v39;
    }
    else
    {
      v39 = *((_QWORD *)this + 3);
      v71[0] = (WTF::StringImpl *)v39;
      if ((v39 & 0x8000000000000) != 0)
      {
        v56 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFLL);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 + 1, v56));
        v39 = (uint64_t)v71[0];
      }
    }
    if ((v39 & 0x4000000000000) != 0 && !WebCore::operator==((uint64_t *)v71, (uint64_t *)&v76))
      WebCore::GraphicsContext::setFillColor(v2, (const WebCore::Color *)v71);
    if (((unint64_t)v71[0] & 0x8000000000000) != 0)
    {
      v40 = (unsigned int *)((unint64_t)v71[0] & 0xFFFFFFFFFFFFLL);
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
      {
        atomic_store(1u, v40);
        WTF::fastFree((WTF *)v40, v36);
      }
    }
  }
  v4 = *((_QWORD *)v2 + 1);
  if ((v76 & 0x8000000000000) != 0)
  {
    if ((v4 & 0x8000000000000) == 0
      || (*(_OWORD *)v71 = *(_OWORD *)((v76 & 0xFFFFFFFFFFFFLL) + 4),
          v78 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4),
          !WebCore::operator==<float,4ul>((float *)v71, (float *)&v78))
      || (v66 = *((_QWORD *)v2 + 1), HIBYTE(v76) != HIBYTE(v66))
      || BYTE6(v76) != BYTE6(v66))
    {
LABEL_99:
      WebCore::GraphicsContext::setFillColor(v2, (const WebCore::Color *)&v76);
    }
  }
  else if (v76 != v4 || (v4 & 0x8000000000000) != 0)
  {
    goto LABEL_99;
  }
  v6 = *(_QWORD *)(*((_QWORD *)v3 + 3) + 160);
  if (v6)
  {
    WebCore::RenderStyle::colorWithColorFilter((WebCore::RenderStyle *)v3, (const WebCore::StyleColor *)(v6 + 32), (WebCore::Color *)&v78);
    v43 = *(_QWORD *)(*((_QWORD *)v3 + 3) + 160);
    if (*(_BYTE *)(v43 + 6))
      v44 = *(float *)v43;
    else
      v44 = (float)*(int *)v43;
    if (*(_BYTE *)(v43 + 14))
      v45 = *(float *)(v43 + 8);
    else
      v45 = (float)*(int *)(v43 + 8);
    v46 = v44 * 64.0;
    v47 = 2147483650.0;
    if (v46 < 2147483650.0)
    {
      if (v46 <= -2147483650.0)
        v48 = 0x80000000;
      else
        v48 = (int)v46;
      goto LABEL_54;
    }
    goto LABEL_74;
  }
  while (1)
  {
    v7 = *(_QWORD *)this;
    v8 = *(unsigned int *)(*(_QWORD *)this + 16);
    if ((_DWORD)v8 != -1)
    {
      v71[0] = (WTF::StringImpl *)&v78;
      ((void (*)(WTF::StringImpl **, uint64_t))off_1E341E378[v8])(v71, v7);
      v13 = *(unsigned int *)(v7 + 16);
      if ((_DWORD)v13 != -1)
      {
        v14 = v9;
        v15 = v10;
        v16 = v11;
        v17 = v12;
        v71[0] = (WTF::StringImpl *)&v78;
        v18 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E341E398[v13])(v71, v7);
        v20 = (unsigned __int16)*(_DWORD *)(v18 + 124) >> 13;
        v21 = v20 > 5;
        v22 = (1 << v20) & 0x2A;
        if (!v21 && v22 != 0)
        {
          if ((*(_DWORD *)(v18 + 20) & 0x1000) != 0)
            v60 = (int *)(v18 + 160);
          else
            v60 = (int *)(v18 + 164);
          if ((*(_DWORD *)(v18 + 20) & 0x1000) != 0)
            v61 = v14;
          else
            v61 = v15;
          if ((*(_DWORD *)(v18 + 20) & 0x1000) != 0)
            v62 = v16;
          else
            v62 = v17;
          v63 = (float)((float)*v60 * 0.015625) - (float)(v61 + v62);
          if ((*(_DWORD *)(v18 + 20) & 0x1000) != 0)
            v14 = v63;
          else
            v15 = v63;
        }
        v24 = (float)*((int *)this + 4) * 0.015625;
        v25 = *((_DWORD *)this + 5);
        v26 = *((_DWORD *)WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)v3, v19) + 11);
        v27 = v26 << 6;
        if (v26 < -33554432)
          v27 = 0x80000000;
        if (v26 > 0x1FFFFFF)
          v27 = 0x7FFFFFFF;
        v28 = __OFADD__(v25, v27);
        v29 = v25 + v27;
        v30 = (v25 >> 31) + 0x7FFFFFFF;
        if (!v28)
          v30 = v29;
        v75[0] = v14 + v24;
        v75[1] = v15 + (float)((float)v30 * 0.015625);
        v31 = *(unsigned int *)(*(_QWORD *)this + 16);
        if ((_DWORD)v31 != -1)
          break;
      }
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_74:
    v48 = 0x7FFFFFFF;
LABEL_54:
    v49 = v45 * 64.0;
    if (v49 >= v47)
    {
      v50 = 0x7FFFFFFF;
    }
    else if (v49 <= -2147483650.0)
    {
      v50 = 0x80000000;
    }
    else
    {
      v50 = (int)v49;
    }
    v71[0] = (WTF::StringImpl *)vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v50, v48)), (float32x2_t)vdup_n_s32(0x3C800000u));
    if (*(_BYTE *)(v43 + 30))
      v51 = *(float *)(v43 + 24);
    else
      v51 = (float)*(int *)(v43 + 24);
    *(float *)&v71[1] = v51;
    v72 = v78;
    if ((v78 & 0x8000000000000) != 0)
    {
      v58 = (unsigned int *)(v78 & 0xFFFFFFFFFFFFLL);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 + 1, v58));
    }
    v73 = 0;
    v74 = 1065353216;
    WebCore::GraphicsContext::setDropShadow((uint64_t)v2, (uint64_t *)v71);
    if ((v72 & 0x8000000000000) != 0)
    {
      v68 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFLL);
      do
      {
        v69 = __ldaxr(v68);
        v70 = v69 - 1;
      }
      while (__stlxr(v70, v68));
      if (!v70)
      {
        atomic_store(1u, v68);
        WTF::fastFree((WTF *)v68, v52);
      }
    }
    if ((v78 & 0x8000000000000) != 0)
    {
      v53 = (unsigned int *)(v78 & 0xFFFFFFFFFFFFLL);
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        atomic_store(1u, v53);
        WTF::fastFree((WTF *)v53, v52);
      }
    }
  }
  v32 = *((_QWORD *)v3 + 4) + 32;
  *(_QWORD *)&v78 = &v77;
  ((void (*)(WTF::StringImpl **__return_ptr, __int128 *))off_1E341E388[v31])(v71, &v78);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t, WTF::StringImpl **, float *, _QWORD))(*(_QWORD *)v2 + 536))(v2, v32, v71, v75, 0);
  result = (uint64_t)v71[1];
  v71[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v33);
    else
      *(_DWORD *)result -= 2;
  }
  v35 = *((_QWORD *)v2 + 1);
  if ((v76 & 0x8000000000000) == 0)
  {
    if (v76 == v35 && (v35 & 0x8000000000000) == 0)
      goto LABEL_29;
LABEL_104:
    result = WebCore::GraphicsContext::setFillColor(v2, (const WebCore::Color *)&v76);
    goto LABEL_29;
  }
  if ((v35 & 0x8000000000000) == 0)
    goto LABEL_104;
  *(_OWORD *)v71 = *(_OWORD *)((v76 & 0xFFFFFFFFFFFFLL) + 4);
  v78 = *(_OWORD *)((v35 & 0xFFFFFFFFFFFFLL) + 4);
  result = WebCore::operator==<float,4ul>((float *)v71, (float *)&v78);
  if (!(_DWORD)result)
    goto LABEL_104;
  v67 = *((_QWORD *)v2 + 1);
  if (HIBYTE(v76) != HIBYTE(v67) || BYTE6(v76) != BYTE6(v67))
    goto LABEL_104;
LABEL_29:
  if (v6)
    result = WebCore::GraphicsContext::clearDropShadow(v2);
  if ((v76 & 0x8000000000000) != 0)
  {
    result = v76 & 0xFFFFFFFFFFFFLL;
    do
    {
      v64 = __ldaxr((unsigned int *)result);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, (unsigned int *)result));
    if (!v65)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, v33);
    }
  }
  return result;
}

char *WebCore::InlineIterator::LineBox::style(WebCore::InlineIterator::LineBox *this)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  WebCore::RenderElement *v7;
  WTF::StringImpl *v8;
  WebCore::InlineIterator::Box *v9;
  _QWORD v10[2];
  unsigned int v11;
  _QWORD v12[2];
  unsigned int v13;
  char v14;

  LOBYTE(v12[0]) = 0;
  v13 = -1;
  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
    goto LABEL_12;
  ((void (*)(_QWORD *, _QWORD *, WebCore::InlineIterator::LineBox *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v1])(v10, v12, this);
  v13 = v1;
  v10[0] = &v14;
  ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LineBoxIterator16traversePreviousEvE3__0JEEEEEJRNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v1])(v10, v12);
  LOBYTE(v10[0]) = 0;
  v11 = -1;
  v3 = v13;
  if (v13 == -1)
    goto LABEL_12;
  ((void (*)(char *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v13])(&v14, v10, v12);
  v11 = v3;
  if (v13 != -1)
  {
    ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v13])(&v14, v12);
    v3 = v11;
    if (v11 == -1)
      goto LABEL_12;
  }
  v12[0] = &v14;
  v4 = ((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v3])(v12, v10);
  if (v11 != -1)
    ((void (*)(_QWORD *, _QWORD *))off_1E341E328[v11])(v12, v10);
  if (v4)
  {
    v7 = (WebCore::RenderElement *)WebCore::InlineIterator::LineBox::formattingContextRoot(this);
    return WebCore::RenderElement::firstLineStyle(v7, v8);
  }
  v5 = *((unsigned int *)this + 4);
  if ((_DWORD)v5 == -1)
  {
LABEL_12:
    v9 = (WebCore::InlineIterator::Box *)std::__throw_bad_variant_access[abi:sn180100]();
    return (char *)WebCore::InlineIterator::Box::selectionState(v9);
  }
  else
  {
    v12[0] = v10;
    return (char *)(((uint64_t (*)(_QWORD *, WebCore::InlineIterator::LineBox *))off_1E341E398[v5])(v12, this)
                  + 80);
  }
}

uint64_t WebCore::InlineIterator::Box::selectionState(WebCore::InlineIterator::Box *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const WebCore::RenderText *v8;
  WebCore::RenderHighlight *v9;
  uint64_t v10;
  WebCore::InlineIterator::LineBox *v11;
  _QWORD v12[3];
  char v13;
  char *v14;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
    goto LABEL_13;
  v12[0] = &v14;
  result = ((uint64_t (*)(_QWORD *, WebCore::InlineIterator::Box *))off_1E33F2E30[v1])(v12, this);
  if (!(_DWORD)result)
    return result;
  v4 = *((unsigned int *)this + 4);
  if ((_DWORD)v4 == -1)
    goto LABEL_13;
  v12[0] = &v14;
  if (!((unsigned int (*)(_QWORD *, WebCore::InlineIterator::Box *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v4])(v12, this))
  {
    v10 = *((unsigned int *)this + 4);
    if ((_DWORD)v10 != -1)
    {
      v12[0] = &v14;
      return (*(_DWORD *)(((uint64_t (*)(_QWORD *, WebCore::InlineIterator::Box *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v10])(v12, this)+ 20) >> 25) & 7;
    }
    goto LABEL_13;
  }
  v5 = *((unsigned int *)this + 4);
  if ((_DWORD)v5 == -1)
    goto LABEL_13;
  v12[0] = &v14;
  v6 = ((uint64_t (*)(_QWORD *, WebCore::InlineIterator::Box *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v5])(v12, this);
  if ((*(_BYTE *)(v6 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1943E6834);
  }
  v7 = *((unsigned int *)this + 4);
  if ((_DWORD)v7 == -1)
  {
LABEL_13:
    v11 = (WebCore::InlineIterator::LineBox *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::LineBox::ellipsisSelectionState(v11);
  }
  v8 = (const WebCore::RenderText *)v6;
  v9 = (WebCore::RenderHighlight *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8) + 40)
                                                          + 8)
                                              + 1944)
                                  + 288);
  v14 = &v13;
  ((void (*)(_QWORD *__return_ptr, char **, WebCore::InlineIterator::Box *))*(&off_1E33F2E40 + v7))(v12, &v14, this);
  return WebCore::RenderHighlight::highlightStateForTextBox(v9, v8, (const WebCore::TextBoxSelectableRange *)v12);
}

uint64_t WebCore::InlineIterator::LineBox::ellipsisSelectionState(WebCore::InlineIterator::LineBox *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  WebCore::RenderHighlight *v5;
  const WebCore::RenderText *v6;
  uint64_t v7[2];
  unsigned int v8;
  char v9;
  _QWORD v10[2];
  int v11;
  char v12;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
    goto LABEL_15;
  v7[0] = (uint64_t)&v12;
  ((void (*)(_QWORD *__return_ptr, uint64_t *, WebCore::InlineIterator::LineBox *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox11lastLeafBoxEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v1])(v10, v7, this);
  if (v11 == -1)
    goto LABEL_15;
  v7[0] = (uint64_t)&v12;
  if ((((uint64_t (*)(uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v11])(v7, v10) & 1) != 0)goto LABEL_7;
  if (v11 == -1)
  {
LABEL_15:
    result = std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_16;
  }
  v7[0] = (uint64_t)&v12;
  if (!((unsigned int (*)(uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v11])(v7, v10))goto LABEL_7;
  if (!WebCore::InlineIterator::Box::selectionState((WebCore::InlineIterator::Box *)v10))
    goto LABEL_7;
  WebCore::InlineIterator::TextBox::selectableRange(v7, (WebCore::InlineIterator::TextBox *)v10);
  if (!v9)
    goto LABEL_7;
  v5 = (WebCore::RenderHighlight *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(WebCore::InlineIterator::LineBox::formattingContextRoot(this)
                                                                                              + 24)
                                                                                  + 8)
                                                                      + 40)
                                                          + 8)
                                              + 1944)
                                  + 288);
  v6 = (const WebCore::RenderText *)WebCore::InlineIterator::TextBox::renderer((WebCore::InlineIterator::TextBox *)v10);
  result = WebCore::RenderHighlight::rangeForTextBox(v5, v6, (const WebCore::TextBoxSelectableRange *)v7);
  if (!v9)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  if (v8 >= result)
  {
    v3 = 2 * (v8 <= HIDWORD(result));
    goto LABEL_8;
  }
LABEL_7:
  v3 = 0;
LABEL_8:
  if (v11 != -1)
    ((void (*)(uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v11])(v7, v10);
  return v3;
}

_QWORD *WebCore::InlineIterator::BoxModernPath::selectableRange@<X0>(_QWORD *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  char v9;
  WebCore::Layout::Box *v10;
  WebCore::RenderStyle *LineStyle;
  _QWORD *v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;

  v3 = this[1];
  v4 = *(_QWORD *)(*this + 8);
  if (v3 >= *(unsigned int *)(v4 + 60))
  {
    __break(0xC471u);
    JUMPOUT(0x1943E6B00);
  }
  v5 = *(_QWORD *)(v4 + 48);
  v6 = v5 + 80 * v3;
  *(_QWORD *)a3 = *(_QWORD *)(v6 + 68);
  v7 = (_DWORD *)(v6 + 76);
  if ((*(_DWORD *)(v6 + 76) & 0x80000000) != 0)
  {
    v18 = v5;
    v19 = (_DWORD *)(v6 + 76);
    v16 = v3;
    v17 = a3;
    v10 = *(WebCore::Layout::Box **)v6;
    if (*(_DWORD *)(v5 + 80 * v3 + 40))
      LineStyle = (WebCore::Layout::Box *)((char *)v10 + 16);
    else
      LineStyle = (WebCore::RenderStyle *)WebCore::Layout::Box::firstLineStyle(v10);
    this = WebCore::RenderStyle::hyphenString(LineStyle, a2);
    if (*this)
      v8 = *(_DWORD *)(*this + 4);
    else
      v8 = 0;
  }
  else
  {
    if ((*(_WORD *)(*(_QWORD *)v6 + 12) & 0x20) == 0)
      goto LABEL_21;
    if (!*(_BYTE *)(*(_QWORD *)v6 + 128))
    {
      v8 = 0;
      goto LABEL_6;
    }
    v18 = v5;
    v19 = (_DWORD *)(v6 + 76);
    v16 = v3;
    v17 = a3;
    v12 = this;
    this = WebCore::InlineDisplay::Box::Text::renderedContent((WebCore::InlineDisplay::Box::Text *)(v6 + 52));
    v14 = v12[1];
    v15 = *(_QWORD *)(*v12 + 8);
    if (v14 >= *(unsigned int *)(v15 + 60))
    {
LABEL_21:
      __break(0xC471u);
      JUMPOUT(0x1943E6A70);
    }
    v8 = v13 - *(_DWORD *)(*(_QWORD *)(v15 + 48) + 80 * v14 + 72);
  }
  v3 = v16;
  a3 = v17;
  v5 = v18;
  v7 = v19;
LABEL_6:
  *(_DWORD *)(a3 + 8) = v8;
  *(_BYTE *)(a3 + 12) = (*(_WORD *)(v5 + 80 * v3 + 50) & 0xFu) - 3 < 2;
  if ((*v7 & 0x40000000) != 0)
  {
    *(_DWORD *)(a3 + 16) = *v7 & 0x3FFFFFFF;
    v9 = 1;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  *(_BYTE *)(a3 + 20) = v9;
  return this;
}

uint64_t WebCore::RenderHighlight::highlightStateForTextBox(WebCore::RenderHighlight *this, const WebCore::RenderText *a2, const WebCore::TextBoxSelectableRange *a3)
{
  WebCore::RenderHighlight *v3;
  uint64_t v4;
  uint64_t result;
  WebCore *v7;
  uint64_t v8;
  WebCore::RenderObject *v9;
  void *v10;
  const WebCore::RenderText *v11;
  BOOL v12;
  WTF *v13;
  const WebCore::RenderText *v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  _BOOL4 v23;
  _BOOL4 v24;
  _BOOL4 v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  const WebCore::RenderText *v31;
  BOOL v32;
  const WebCore::TextBoxSelectableRange *v33;
  char v35[8];
  WTF *v36;
  int v37;

  v3 = this;
  if (*((_BYTE *)this + 24))
  {
    v4 = (*((_DWORD *)a2 + 5) >> 25) & 7;
    goto LABEL_3;
  }
  v33 = a3;
  if (*(_QWORD *)this && *(const WebCore::RenderText **)(*(_QWORD *)this + 8) == a2)
  {
    v30 = *((_QWORD *)this + 1);
    if (v30 && ((v31 = *(const WebCore::RenderText **)(v30 + 8)) != 0 ? (v32 = v31 == a2) : (v32 = 0), v32))
      LODWORD(v4) = 4;
    else
      LODWORD(v4) = 1;
  }
  else
  {
    v7 = *(WebCore **)(*((_QWORD *)this + 1) + 8);
    if (v7 != a2)
    {
      v8 = WebCore::rendererAfterOffset(v7, (const WebCore::RenderObject *)*((unsigned int *)this + 5));
      if (*(_QWORD *)this)
        v9 = *(WebCore::RenderObject **)(*(_QWORD *)this + 8);
      else
        v9 = 0;
      WebCore::RenderRangeIterator::RenderRangeIterator((WebCore::RenderRangeIterator *)v35, v9);
      if (!*(_QWORD *)this
        || ((v11 = *(const WebCore::RenderText **)(*(_QWORD *)this + 8)) != 0
          ? (v12 = v11 == (const WebCore::RenderText *)v8)
          : (v12 = 1),
            v12))
      {
        v4 = 0;
      }
      else
      {
        while (1)
        {
          v14 = *(const WebCore::RenderText **)this;
          if (*(_QWORD *)this)
            v14 = (const WebCore::RenderText *)*((_QWORD *)v14 + 1);
          if (v11 != v14)
          {
            v15 = (*(uint64_t (**)(const WebCore::RenderText *))(*(_QWORD *)v11 + 512))(v11);
            if (v11 == a2 && (v15 & 1) != 0)
              break;
          }
          v16 = WebCore::RenderRangeIterator::next((WebCore::RenderRangeIterator *)v35);
          v4 = 0;
          if (v16)
          {
            v11 = (const WebCore::RenderText *)v16;
            if (v16 != v8)
              continue;
          }
          goto LABEL_17;
        }
        v4 = 2;
      }
LABEL_17:
      v13 = v36;
      if (v36)
      {
        v36 = 0;
        v37 = 0;
        WTF::fastFree(v13, v10);
      }
      a3 = v33;
      v3 = this;
LABEL_3:
      result = v4;
      if ((v4 | 2) == 2)
        return result;
      goto LABEL_30;
    }
    LODWORD(v4) = 3;
  }
  v3 = this;
LABEL_30:
  v18 = *((_DWORD *)v3 + 4);
  v17 = *((_DWORD *)v3 + 5);
  v19 = *(_DWORD *)a3;
  v20 = *((_DWORD *)a3 + 1) + *(_DWORD *)a3;
  v21 = v20 - *((unsigned __int8 *)a3 + 12);
  v23 = (_DWORD)v4 != 3 && v18 >= v19;
  v24 = v18 < v20;
  v27 = (_DWORD)v4 != 1 && v17 > v19 && v17 <= v21;
  if (v23 && v24 && v27)
    v28 = 4;
  else
    v28 = 1;
  v29 = v23 && v24;
  if (v29)
    result = v28;
  else
    result = 3;
  if ((v29 & 1) == 0 && !v27)
  {
    if (v23)
      return 0;
    result = 2;
    if ((_DWORD)v4 != 1 && v17 <= v21)
      return 0;
  }
  return result;
}

BOOL WebCore::CSSPrimitiveValue::equalForLengthResolution(WebCore::CSSPrimitiveValue *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::FontCascadeFonts *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  float v11;
  WTF **v12;
  WebCore::FontCascadeFonts *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  WTF **v17;
  WebCore::FontCascadeFonts *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  float v22;
  WTF **v23;
  WebCore::FontCascadeFonts *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  WTF *v29;
  void *v30;
  WTF *v31;
  void *v32;
  WTF *v33;
  void *v34;
  WTF *v35;
  void *v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  uint64_t v48;
  WTF *v49;
  int v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  uint64_t v62;
  WTF *v63;
  int v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  WTF *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  uint64_t v76;
  WTF *v77;
  int v78;
  _DWORD *v79;
  uint64_t v80;
  uint64_t v81;
  WTF *v82;
  WTF *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  WTF *v89;
  uint64_t v90;
  WTF *v91;
  int v92;
  uint64_t v93;
  WTF *v94;
  WTF *v95;
  int v96;
  uint64_t v97;
  WTF *v98;
  WTF *v99;
  int v100;
  uint64_t v101;
  WTF *v102;
  WTF *v103;
  int v104;
  uint64_t v105;
  WTF *v106;
  WTF *v107;
  int v108;
  WTF *v109;
  WTF *v110;
  WTF *v111;
  WTF *v112;
  WTF *v113;
  WTF *v114;
  WTF *v115;

  v3 = *((_QWORD *)this + 4);
  v4 = *((_QWORD *)a2 + 4);
  if (*(float *)(v3 + 204) != *(float *)(v4 + 204) || *(float *)(v3 + 224) != *(float *)(v4 + 224))
    return 0;
  v7 = *(WebCore::FontCascadeFonts **)(v3 + 248);
  if (v7)
    ++*(_DWORD *)v7;
  v8 = *((_QWORD *)v7 + 13);
  if (v8 && *(_QWORD *)(v8 + 8))
    goto LABEL_7;
  v37 = (_DWORD *)WebCore::FontCascadeFonts::realizeFallbackRangesAt(v7, (const WebCore::FontCascadeDescription *)(v3 + 48), 0);
  WebCore::FontRanges::glyphDataForCharacter(0x20u, (uint64_t)v37, 1, (uint64_t)&v114);
  if (!v115 || (v38 = *((_QWORD *)v115 + 1)) == 0)
  {
    v39 = 0;
    goto LABEL_46;
  }
  v39 = *(_QWORD *)(v38 + 8);
  if (v39)
    goto LABEL_228;
  v39 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v39 = 1;
  *(_QWORD *)(v39 + 8) = v38;
  v109 = *(WTF **)(v38 + 8);
  *(_QWORD *)(v38 + 8) = v39;
  if (!v109)
    goto LABEL_228;
  if (*(_DWORD *)v109 != 1)
  {
    --*(_DWORD *)v109;
LABEL_228:
    ++*(_DWORD *)v39;
    goto LABEL_46;
  }
  WTF::fastFree(v109, a2);
  v39 = *(_QWORD *)(v38 + 8);
  if (v39)
    goto LABEL_228;
LABEL_46:
  v40 = (WTF *)*((_QWORD *)v7 + 13);
  *((_QWORD *)v7 + 13) = v39;
  if (v40)
  {
    if (*(_DWORD *)v40 == 1)
      WTF::fastFree(v40, a2);
    else
      --*(_DWORD *)v40;
  }
  v41 = v115;
  v115 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 1)
      WTF::fastFree(v41, a2);
    else
      --*(_DWORD *)v41;
  }
  v42 = *((_QWORD *)v7 + 13);
  if (v42 && (v43 = *(_QWORD *)(v42 + 8)) != 0)
  {
    if ((*(_BYTE *)(v43 + 256) & 2) != 0)
    {
      v44 = 1;
      do
      {
        v45 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v7, (const WebCore::FontCascadeDescription *)(v3 + 48), v44);
        if (!*(_DWORD *)(v45 + 12))
          break;
        WebCore::FontRanges::glyphDataForCharacter(0x20u, v45, 0, (uint64_t)&v114);
        if (v115)
          v46 = *((_QWORD *)v115 + 1);
        else
          v46 = 0;
        WTF::WeakPtr<WebCore::Font,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v113, v46);
        v47 = v115;
        v115 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 1)
            WTF::fastFree(v47, a2);
          else
            --*(_DWORD *)v47;
        }
        v9 = v113;
        if (v113)
        {
          v48 = *((_QWORD *)v113 + 1);
          if (!v48 || (*(_BYTE *)(v48 + 256) & 2) != 0)
          {
            v50 = 0;
            v113 = 0;
          }
          else
          {
            v113 = 0;
            v49 = (WTF *)*((_QWORD *)v7 + 13);
            *((_QWORD *)v7 + 13) = v9;
            if (!v49)
              goto LABEL_8;
            if (*(_DWORD *)v49 != 1)
            {
              --*(_DWORD *)v49;
              break;
            }
            WTF::fastFree(v49, a2);
            v9 = v113;
            v113 = 0;
            if (!v9)
              break;
            v50 = 2;
          }
          if (*(_DWORD *)v9 == 1)
            WTF::fastFree(v9, a2);
          else
            --*(_DWORD *)v9;
        }
        else
        {
          v50 = 0;
        }
        ++v44;
      }
      while (!v50);
    }
  }
  else
  {
    if (!v37[3])
    {
      __break(0xC471u);
      goto LABEL_263;
    }
    v93 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v37 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v37 + 8), 1);
    WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v114, v93);
    v94 = v114;
    v114 = 0;
    v95 = (WTF *)*((_QWORD *)v7 + 13);
    *((_QWORD *)v7 + 13) = v94;
    if (v95)
    {
      v96 = *(_DWORD *)v95 - 1;
      if (*(_DWORD *)v95 != 1)
        goto LABEL_186;
      WTF::fastFree(v95, a2);
      v95 = v114;
      v114 = 0;
      if (!v95)
        goto LABEL_7;
      v96 = *(_DWORD *)v95 - 1;
      if (*(_DWORD *)v95 != 1)
      {
LABEL_186:
        *(_DWORD *)v95 = v96;
        goto LABEL_7;
      }
      WTF::fastFree(v95, a2);
    }
  }
LABEL_7:
  v9 = (WTF *)*((_QWORD *)v7 + 13);
  if (v9)
LABEL_8:
    v10 = *((_QWORD *)v9 + 1);
  else
    v10 = 0;
  if (*(_DWORD *)v7 == 1)
  {
    WebCore::FontCascadeFonts::~FontCascadeFonts(v7, a2);
    WTF::fastFree(v29, v30);
  }
  else
  {
    --*(_DWORD *)v7;
  }
  v114 = *(WTF **)(v3 + 168);
  v11 = *(float *)(v10 + 52);
  v12 = (WTF **)*((_QWORD *)a2 + 4);
  v13 = v12[31];
  if (v13)
    ++*(_DWORD *)v13;
  v14 = *((_QWORD *)v13 + 13);
  if (v14 && *(_QWORD *)(v14 + 8))
    goto LABEL_15;
  v51 = (_DWORD *)WebCore::FontCascadeFonts::realizeFallbackRangesAt(v13, (const WebCore::FontCascadeDescription *)(v12 + 6), 0);
  WebCore::FontRanges::glyphDataForCharacter(0x20u, (uint64_t)v51, 1, (uint64_t)&v114);
  if (!v115 || (v52 = *((_QWORD *)v115 + 1)) == 0)
  {
    v53 = 0;
    goto LABEL_78;
  }
  v53 = *(_QWORD *)(v52 + 8);
  if (v53)
    goto LABEL_230;
  v53 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v53 = 1;
  *(_QWORD *)(v53 + 8) = v52;
  v110 = *(WTF **)(v52 + 8);
  *(_QWORD *)(v52 + 8) = v53;
  if (!v110)
    goto LABEL_230;
  if (*(_DWORD *)v110 != 1)
  {
    --*(_DWORD *)v110;
LABEL_230:
    ++*(_DWORD *)v53;
    goto LABEL_78;
  }
  WTF::fastFree(v110, a2);
  v53 = *(_QWORD *)(v52 + 8);
  if (v53)
    goto LABEL_230;
LABEL_78:
  v54 = (WTF *)*((_QWORD *)v13 + 13);
  *((_QWORD *)v13 + 13) = v53;
  if (v54)
  {
    if (*(_DWORD *)v54 == 1)
      WTF::fastFree(v54, a2);
    else
      --*(_DWORD *)v54;
  }
  v55 = v115;
  v115 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 1)
      WTF::fastFree(v55, a2);
    else
      --*(_DWORD *)v55;
  }
  v56 = *((_QWORD *)v13 + 13);
  if (v56 && (v57 = *(_QWORD *)(v56 + 8)) != 0)
  {
    if ((*(_BYTE *)(v57 + 256) & 2) != 0)
    {
      v58 = 1;
      do
      {
        v59 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v13, (const WebCore::FontCascadeDescription *)(v12 + 6), v58);
        if (!*(_DWORD *)(v59 + 12))
          break;
        WebCore::FontRanges::glyphDataForCharacter(0x20u, v59, 0, (uint64_t)&v114);
        if (v115)
          v60 = *((_QWORD *)v115 + 1);
        else
          v60 = 0;
        WTF::WeakPtr<WebCore::Font,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v113, v60);
        v61 = v115;
        v115 = 0;
        if (v61)
        {
          if (*(_DWORD *)v61 == 1)
            WTF::fastFree(v61, a2);
          else
            --*(_DWORD *)v61;
        }
        v15 = v113;
        if (v113)
        {
          v62 = *((_QWORD *)v113 + 1);
          if (!v62 || (*(_BYTE *)(v62 + 256) & 2) != 0)
          {
            v64 = 0;
            v113 = 0;
          }
          else
          {
            v113 = 0;
            v63 = (WTF *)*((_QWORD *)v13 + 13);
            *((_QWORD *)v13 + 13) = v15;
            if (!v63)
              goto LABEL_16;
            if (*(_DWORD *)v63 != 1)
            {
              --*(_DWORD *)v63;
              break;
            }
            WTF::fastFree(v63, a2);
            v15 = v113;
            v113 = 0;
            if (!v15)
              break;
            v64 = 2;
          }
          if (*(_DWORD *)v15 == 1)
            WTF::fastFree(v15, a2);
          else
            --*(_DWORD *)v15;
        }
        else
        {
          v64 = 0;
        }
        ++v58;
      }
      while (!v64);
    }
  }
  else
  {
    if (!v51[3])
    {
      __break(0xC471u);
      JUMPOUT(0x1943E7AA8);
    }
    v97 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v51 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v51 + 8), 1);
    WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v114, v97);
    v98 = v114;
    v114 = 0;
    v99 = (WTF *)*((_QWORD *)v13 + 13);
    *((_QWORD *)v13 + 13) = v98;
    if (v99)
    {
      v100 = *(_DWORD *)v99 - 1;
      if (*(_DWORD *)v99 != 1)
        goto LABEL_190;
      WTF::fastFree(v99, a2);
      v99 = v114;
      v114 = 0;
      if (!v99)
        goto LABEL_15;
      v100 = *(_DWORD *)v99 - 1;
      if (*(_DWORD *)v99 != 1)
      {
LABEL_190:
        *(_DWORD *)v99 = v100;
        goto LABEL_15;
      }
      WTF::fastFree(v99, a2);
    }
  }
LABEL_15:
  v15 = (WTF *)*((_QWORD *)v13 + 13);
  if (v15)
LABEL_16:
    v16 = *((_QWORD *)v15 + 1);
  else
    v16 = 0;
  if (*(_DWORD *)v13 == 1)
  {
    WebCore::FontCascadeFonts::~FontCascadeFonts(v13, a2);
    WTF::fastFree(v31, v32);
  }
  else
  {
    --*(_DWORD *)v13;
  }
  v114 = v12[21];
  if (v11 != *(float *)(v16 + 52))
    return 0;
  v17 = (WTF **)*((_QWORD *)this + 4);
  v18 = v17[31];
  if (v18)
    ++*(_DWORD *)v18;
  v19 = *((_QWORD *)v18 + 13);
  if (v19 && *(_QWORD *)(v19 + 8))
    goto LABEL_24;
  v65 = (_DWORD *)WebCore::FontCascadeFonts::realizeFallbackRangesAt(v18, (const WebCore::FontCascadeDescription *)(v17 + 6), 0);
  WebCore::FontRanges::glyphDataForCharacter(0x20u, (uint64_t)v65, 1, (uint64_t)&v114);
  if (!v115 || (v66 = *((_QWORD *)v115 + 1)) == 0)
  {
    v67 = 0;
    goto LABEL_110;
  }
  v67 = *(_QWORD *)(v66 + 8);
  if (v67)
    goto LABEL_232;
  v67 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v67 = 1;
  *(_QWORD *)(v67 + 8) = v66;
  v111 = *(WTF **)(v66 + 8);
  *(_QWORD *)(v66 + 8) = v67;
  if (!v111)
    goto LABEL_232;
  if (*(_DWORD *)v111 != 1)
  {
    --*(_DWORD *)v111;
LABEL_232:
    ++*(_DWORD *)v67;
    goto LABEL_110;
  }
  WTF::fastFree(v111, a2);
  v67 = *(_QWORD *)(v66 + 8);
  if (v67)
    goto LABEL_232;
LABEL_110:
  v68 = (WTF *)*((_QWORD *)v18 + 13);
  *((_QWORD *)v18 + 13) = v67;
  if (v68)
  {
    if (*(_DWORD *)v68 == 1)
      WTF::fastFree(v68, a2);
    else
      --*(_DWORD *)v68;
  }
  v69 = v115;
  v115 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 1)
      WTF::fastFree(v69, a2);
    else
      --*(_DWORD *)v69;
  }
  v70 = *((_QWORD *)v18 + 13);
  if (v70 && (v71 = *(_QWORD *)(v70 + 8)) != 0)
  {
    if ((*(_BYTE *)(v71 + 256) & 2) != 0)
    {
      v72 = 1;
      do
      {
        v73 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v18, (const WebCore::FontCascadeDescription *)(v17 + 6), v72);
        if (!*(_DWORD *)(v73 + 12))
          break;
        WebCore::FontRanges::glyphDataForCharacter(0x20u, v73, 0, (uint64_t)&v114);
        if (v115)
          v74 = *((_QWORD *)v115 + 1);
        else
          v74 = 0;
        WTF::WeakPtr<WebCore::Font,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v113, v74);
        v75 = v115;
        v115 = 0;
        if (v75)
        {
          if (*(_DWORD *)v75 == 1)
            WTF::fastFree(v75, a2);
          else
            --*(_DWORD *)v75;
        }
        v20 = v113;
        if (v113)
        {
          v76 = *((_QWORD *)v113 + 1);
          if (!v76 || (*(_BYTE *)(v76 + 256) & 2) != 0)
          {
            v78 = 0;
            v113 = 0;
          }
          else
          {
            v113 = 0;
            v77 = (WTF *)*((_QWORD *)v18 + 13);
            *((_QWORD *)v18 + 13) = v20;
            if (!v77)
              goto LABEL_25;
            if (*(_DWORD *)v77 != 1)
            {
              --*(_DWORD *)v77;
              break;
            }
            WTF::fastFree(v77, a2);
            v20 = v113;
            v113 = 0;
            if (!v20)
              break;
            v78 = 2;
          }
          if (*(_DWORD *)v20 == 1)
            WTF::fastFree(v20, a2);
          else
            --*(_DWORD *)v20;
        }
        else
        {
          v78 = 0;
        }
        ++v72;
      }
      while (!v78);
    }
  }
  else
  {
    if (!v65[3])
    {
      __break(0xC471u);
      JUMPOUT(0x1943E7AB0);
    }
    v101 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v65 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v65 + 8), 1);
    WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v114, v101);
    v102 = v114;
    v114 = 0;
    v103 = (WTF *)*((_QWORD *)v18 + 13);
    *((_QWORD *)v18 + 13) = v102;
    if (v103)
    {
      v104 = *(_DWORD *)v103 - 1;
      if (*(_DWORD *)v103 != 1)
        goto LABEL_194;
      WTF::fastFree(v103, a2);
      v103 = v114;
      v114 = 0;
      if (!v103)
        goto LABEL_24;
      v104 = *(_DWORD *)v103 - 1;
      if (*(_DWORD *)v103 != 1)
      {
LABEL_194:
        *(_DWORD *)v103 = v104;
        goto LABEL_24;
      }
      WTF::fastFree(v103, a2);
    }
  }
LABEL_24:
  v20 = (WTF *)*((_QWORD *)v18 + 13);
  if (v20)
LABEL_25:
    v21 = *((_QWORD *)v20 + 1);
  else
    v21 = 0;
  if (*(_DWORD *)v18 == 1)
  {
    WebCore::FontCascadeFonts::~FontCascadeFonts(v18, a2);
    WTF::fastFree(v33, v34);
  }
  else
  {
    --*(_DWORD *)v18;
  }
  v114 = v17[21];
  v22 = *(float *)(v21 + 56);
  v23 = (WTF **)*((_QWORD *)a2 + 4);
  v24 = v23[31];
  if (v24)
    ++*(_DWORD *)v24;
  v25 = *((_QWORD *)v24 + 13);
  if (v25 && *(_QWORD *)(v25 + 8))
    goto LABEL_32;
  v79 = (_DWORD *)WebCore::FontCascadeFonts::realizeFallbackRangesAt(v24, (const WebCore::FontCascadeDescription *)(v23 + 6), 0);
  WebCore::FontRanges::glyphDataForCharacter(0x20u, (uint64_t)v79, 1, (uint64_t)&v114);
  if (!v115 || (v80 = *((_QWORD *)v115 + 1)) == 0)
  {
    v81 = 0;
    goto LABEL_142;
  }
  v81 = *(_QWORD *)(v80 + 8);
  if (v81)
    goto LABEL_234;
  v81 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v81 = 1;
  *(_QWORD *)(v81 + 8) = v80;
  v112 = *(WTF **)(v80 + 8);
  *(_QWORD *)(v80 + 8) = v81;
  if (!v112)
    goto LABEL_234;
  if (*(_DWORD *)v112 != 1)
  {
    --*(_DWORD *)v112;
LABEL_234:
    ++*(_DWORD *)v81;
    goto LABEL_142;
  }
  WTF::fastFree(v112, a2);
  v81 = *(_QWORD *)(v80 + 8);
  if (v81)
    goto LABEL_234;
LABEL_142:
  v82 = (WTF *)*((_QWORD *)v24 + 13);
  *((_QWORD *)v24 + 13) = v81;
  if (v82)
  {
    if (*(_DWORD *)v82 == 1)
      WTF::fastFree(v82, a2);
    else
      --*(_DWORD *)v82;
  }
  v83 = v115;
  v115 = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 1)
      WTF::fastFree(v83, a2);
    else
      --*(_DWORD *)v83;
  }
  v84 = *((_QWORD *)v24 + 13);
  if (v84)
  {
    v85 = *(_QWORD *)(v84 + 8);
    if (v85)
    {
      if ((*(_BYTE *)(v85 + 256) & 2) != 0)
      {
        v86 = 1;
        while (1)
        {
          v87 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v24, (const WebCore::FontCascadeDescription *)(v23 + 6), v86);
          if (!*(_DWORD *)(v87 + 12))
            break;
          WebCore::FontRanges::glyphDataForCharacter(0x20u, v87, 0, (uint64_t)&v114);
          if (v115)
            v88 = *((_QWORD *)v115 + 1);
          else
            v88 = 0;
          WTF::WeakPtr<WebCore::Font,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v113, v88);
          v89 = v115;
          v115 = 0;
          if (v89)
          {
            if (*(_DWORD *)v89 == 1)
              WTF::fastFree(v89, a2);
            else
              --*(_DWORD *)v89;
          }
          v26 = v113;
          if (v113)
          {
            v90 = *((_QWORD *)v113 + 1);
            if (!v90 || (*(_BYTE *)(v90 + 256) & 2) != 0)
            {
              v92 = 0;
              v113 = 0;
            }
            else
            {
              v113 = 0;
              v91 = (WTF *)*((_QWORD *)v24 + 13);
              *((_QWORD *)v24 + 13) = v26;
              if (!v91)
                goto LABEL_33;
              if (*(_DWORD *)v91 != 1)
              {
                --*(_DWORD *)v91;
                goto LABEL_32;
              }
              WTF::fastFree(v91, a2);
              v26 = v113;
              v113 = 0;
              if (!v26)
                goto LABEL_32;
              v92 = 2;
            }
            if (*(_DWORD *)v26 == 1)
              WTF::fastFree(v26, a2);
            else
              --*(_DWORD *)v26;
          }
          else
          {
            v92 = 0;
          }
          ++v86;
          if (v92)
            goto LABEL_32;
        }
      }
      goto LABEL_32;
    }
  }
  if (!v79[3])
  {
    __break(0xC471u);
LABEL_263:
    JUMPOUT(0x1943E7AA0);
  }
  v105 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v79 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v79 + 8), 1);
  WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v114, v105);
  v106 = v114;
  v114 = 0;
  v107 = (WTF *)*((_QWORD *)v24 + 13);
  *((_QWORD *)v24 + 13) = v106;
  if (!v107)
    goto LABEL_32;
  v108 = *(_DWORD *)v107 - 1;
  if (*(_DWORD *)v107 != 1)
    goto LABEL_198;
  WTF::fastFree(v107, a2);
  v107 = v114;
  v114 = 0;
  if (!v107)
    goto LABEL_32;
  v108 = *(_DWORD *)v107 - 1;
  if (*(_DWORD *)v107 != 1)
  {
LABEL_198:
    *(_DWORD *)v107 = v108;
    goto LABEL_32;
  }
  WTF::fastFree(v107, a2);
LABEL_32:
  v26 = (WTF *)*((_QWORD *)v24 + 13);
  if (v26)
LABEL_33:
    v27 = *((_QWORD *)v26 + 1);
  else
    v27 = 0;
  if (*(_DWORD *)v24 == 1)
  {
    WebCore::FontCascadeFonts::~FontCascadeFonts(v24, a2);
    WTF::fastFree(v35, v36);
  }
  else
  {
    --*(_DWORD *)v24;
  }
  v114 = v23[21];
  if (v22 == *(float *)(v27 + 56))
    return *(float *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 588) == *(float *)(*(_QWORD *)(*((_QWORD *)a2 + 1)
                                                                                                 + 40)
                                                                                     + 588);
  return 0;
}

WTF *WebCore::RenderStyle::metricsOfPrimaryFont(WebCore::RenderStyle *this, void *a2)
{
  WTF **v2;
  WebCore::FontCascadeFonts *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF *result;
  WTF *v8;
  void *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;
  int v22;
  uint64_t v23;
  WTF *v24;
  WTF *v25;
  int v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  WTF *v30;

  v2 = (WTF **)*((_QWORD *)this + 4);
  v3 = v2[31];
  if (v3)
    ++*(_DWORD *)v3;
  v4 = *((_QWORD *)v3 + 13);
  if (v4 && *(_QWORD *)(v4 + 8))
    goto LABEL_5;
  v10 = (_DWORD *)WebCore::FontCascadeFonts::realizeFallbackRangesAt(v3, (const WebCore::FontCascadeDescription *)(v2 + 6), 0);
  WebCore::FontRanges::glyphDataForCharacter(0x20u, (uint64_t)v10, 1, (uint64_t)&v29);
  if (!v30 || (v11 = *((_QWORD *)v30 + 1)) == 0)
  {
    v12 = 0;
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(v11 + 8);
  if (v12)
    goto LABEL_58;
  v12 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = v11;
  v27 = *(WTF **)(v11 + 8);
  *(_QWORD *)(v11 + 8) = v12;
  if (!v27)
    goto LABEL_58;
  if (*(_DWORD *)v27 != 1)
  {
    --*(_DWORD *)v27;
LABEL_58:
    ++*(_DWORD *)v12;
    goto LABEL_14;
  }
  WTF::fastFree(v27, a2);
  v12 = *(_QWORD *)(v11 + 8);
  if (v12)
    goto LABEL_58;
LABEL_14:
  v13 = (WTF *)*((_QWORD *)v3 + 13);
  *((_QWORD *)v3 + 13) = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
      WTF::fastFree(v13, a2);
    else
      --*(_DWORD *)v13;
  }
  result = v30;
  v30 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  v14 = *((_QWORD *)v3 + 13);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
    {
      if ((*(_BYTE *)(v15 + 256) & 2) != 0)
      {
        v16 = 1;
        while (1)
        {
          v17 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v3, (const WebCore::FontCascadeDescription *)(v2 + 6), v16);
          if (!*(_DWORD *)(v17 + 12))
            break;
          WebCore::FontRanges::glyphDataForCharacter(0x20u, v17, 0, (uint64_t)&v29);
          if (v30)
            v18 = *((_QWORD *)v30 + 1);
          else
            v18 = 0;
          WTF::WeakPtr<WebCore::Font,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v28, v18);
          v19 = v30;
          v30 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 1)
              WTF::fastFree(v19, a2);
            else
              --*(_DWORD *)v19;
          }
          v5 = v28;
          if (v28)
          {
            v20 = *((_QWORD *)v28 + 1);
            if (!v20 || (*(_BYTE *)(v20 + 256) & 2) != 0)
            {
              v22 = 0;
              v28 = 0;
            }
            else
            {
              v28 = 0;
              v21 = (WTF *)*((_QWORD *)v3 + 13);
              *((_QWORD *)v3 + 13) = v5;
              if (!v21)
                goto LABEL_6;
              if (*(_DWORD *)v21 != 1)
              {
                --*(_DWORD *)v21;
                goto LABEL_5;
              }
              WTF::fastFree(v21, a2);
              v5 = v28;
              v28 = 0;
              if (!v5)
                goto LABEL_5;
              v22 = 2;
            }
            if (*(_DWORD *)v5 == 1)
              WTF::fastFree(v5, a2);
            else
              --*(_DWORD *)v5;
          }
          else
          {
            v22 = 0;
          }
          ++v16;
          if (v22)
            goto LABEL_5;
        }
      }
      goto LABEL_5;
    }
  }
  if (!v10[3])
  {
    __break(0xC471u);
    return result;
  }
  v23 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v10 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v10 + 8), 1);
  WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v29, v23);
  v24 = v29;
  v29 = 0;
  v25 = (WTF *)*((_QWORD *)v3 + 13);
  *((_QWORD *)v3 + 13) = v24;
  if (v25)
  {
    v26 = *(_DWORD *)v25 - 1;
    if (*(_DWORD *)v25 == 1)
    {
      WTF::fastFree(v25, a2);
      v25 = v29;
      v29 = 0;
      if (!v25)
        goto LABEL_5;
      v26 = *(_DWORD *)v25 - 1;
      if (*(_DWORD *)v25 == 1)
      {
        WTF::fastFree(v25, a2);
        goto LABEL_5;
      }
    }
    *(_DWORD *)v25 = v26;
  }
LABEL_5:
  v5 = (WTF *)*((_QWORD *)v3 + 13);
  if (v5)
LABEL_6:
    v6 = *((_QWORD *)v5 + 1);
  else
    v6 = 0;
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::FontCascadeFonts::~FontCascadeFonts(v3, a2);
    WTF::fastFree(v8, v9);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  v29 = v2[21];
  return (WTF *)(v6 + 16);
}

uint64_t *WTF::WeakPtr<WebCore::Font,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  void *v6;
  WTF *v7;

  if (a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (!v4)
    {
      v4 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v4 = 1;
      *(_QWORD *)(v4 + 8) = a2;
      v7 = *(WTF **)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v4;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          WTF::fastFree(v7, v6);
          v4 = *(_QWORD *)(a2 + 8);
          if (!v4)
            goto LABEL_5;
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
    }
    ++*(_DWORD *)v4;
  }
  else
  {
    v4 = 0;
  }
LABEL_5:
  *a1 = v4;
  return a1;
}

uint64_t WebCore::Page::effectiveAppearanceDidChange(uint64_t this, int a2, int a3)
{
  unsigned int v3;
  WebCore::InspectorPageAgent *v4;
  WebCore::Page *v5;

  if (*(unsigned __int8 *)(this + 452) != a2 || *(unsigned __int8 *)(this + 451) != a3)
  {
    *(_BYTE *)(this + 452) = a2;
    *(_BYTE *)(this + 451) = a3;
    v3 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter);
    if (v3 && (v4 = *(WebCore::InspectorPageAgent **)(*(_QWORD *)(*(_QWORD *)(this + 80) + 8) + 200)) != 0)
    {
      v5 = (WebCore::Page *)this;
      WebCore::InspectorPageAgent::defaultUserPreferencesDidChange(v4);
      return WebCore::Page::appearanceDidChange(v5);
    }
    else
    {
      return WebCore::Page::appearanceDidChange((WebCore::Page *)this);
    }
  }
  return this;
}

uint64_t WebCore::ResourceResponseBase::cacheControlContainsNoStore(WebCore::ResourceResponseBase *this)
{
  const WebCore::HTTPHeaderMap *v3;
  int64x2_t v4[2];

  if ((*((_WORD *)this + 116) & 1) == 0)
  {
    WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
    WebCore::parseCacheControlDirectives((unsigned int *)this + 20, v3, v4);
    *(int64x2_t *)((char *)this + 200) = v4[0];
    *(int64x2_t *)((char *)this + 209) = *(int64x2_t *)((char *)v4 + 9);
    *((_WORD *)this + 116) |= 1u;
  }
  return (*((unsigned __int8 *)this + 224) >> 1) & 1;
}

uint64_t WebCore::isStatusCodeCacheableByDefault(WebCore *this)
{
  int v1;
  uint64_t result;
  unsigned int v3;

  v1 = (int)this;
  result = 1;
  if (v1 <= 299)
  {
    v3 = v1 - 200;
    if (v3 <= 6 && ((1 << v3) & 0x59) != 0)
      return result;
    return 0;
  }
  if (((v1 - 404) > 0xA || ((1 << (v1 + 108)) & 0x443) == 0)
    && (v1 - 300) >= 2
    && v1 != 501)
  {
    return 0;
  }
  return result;
}

void WebCore::JSMessagePortOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WebCore::MessagePort *v13;
  BOOL v14;
  int v15;
  bmalloc::api *v16;
  void *v17;
  uint64_t v18;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v5 = *(_QWORD *)(v4 + 24);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C](v5);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)v5))
    goto LABEL_3;
LABEL_4:
  ++*(_QWORD *)(v5 + 8);
  v7 = __ldxr((unsigned __int8 *)v5);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_8;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_8:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (*(_DWORD *)(a3 + 48))
  {
    JSC::weakRemove<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,WebCore::JSBlob *>((uint64_t *)(a3 + 32), v4 - 24);
  }
  else
  {
    v8 = *(_QWORD *)(v4 + 8);
    if (v8)
    {
      *(_QWORD *)(v8 + 8) = 3;
      *(_QWORD *)(v4 + 8) = 0;
    }
  }
  v9 = *(_QWORD *)(v4 + 24);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
LABEL_14:
    MEMORY[0x19AEA534C](v9);
    goto LABEL_15;
  }
  if (__stxr(1u, (unsigned __int8 *)v9))
    goto LABEL_14;
LABEL_15:
  v11 = *(_QWORD *)(v9 + 8);
  v12 = v11 - 1;
  *(_QWORD *)(v9 + 8) = v11 - 1;
  if (v11 == 1)
  {
    v18 = *(_QWORD *)(v9 + 16);
    v13 = *(WebCore::MessagePort **)(v9 + 24);
    *(_QWORD *)(v9 + 24) = 0;
    v14 = v18 != 0;
  }
  else
  {
    v13 = 0;
    v14 = 1;
  }
  v15 = __ldxr((unsigned __int8 *)v9);
  if (v15 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v9))
      goto LABEL_19;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v9);
LABEL_19:
  if (!v12)
  {
    if (v13)
    {
      WebCore::MessagePort::~MessagePort(v13, a2);
      bmalloc::api::isoDeallocate(v16, v17);
    }
    if (!v14)
      WTF::fastFree((WTF *)v9, a2);
  }
}

uint64_t WebCore::NowPlayingManager::NowPlayingManager(uint64_t this)
{
  *(_BYTE *)(this + 136) = 0;
  *(_BYTE *)(this + 144) = 0;
  *(_BYTE *)(this + 160) = 0;
  *(_BYTE *)(this + 168) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = off_1E3405BD0;
  *(_BYTE *)(this + 24) = 0;
  return this;
}

{
  *(_BYTE *)(this + 136) = 0;
  *(_BYTE *)(this + 144) = 0;
  *(_BYTE *)(this + 160) = 0;
  *(_BYTE *)(this + 168) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = off_1E3405BD0;
  *(_BYTE *)(this + 24) = 0;
  return this;
}

uint64_t *WTF::Vector<WTF::Function<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(BOOL)>>(unsigned int *a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t *)WTF::Vector<WTF::Function<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = a1[3];
  v5 = *(_QWORD *)a1;
  v6 = *result;
  *result = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  a1[3] = v4 + 1;
  return result;
}

unint64_t WTF::Vector<WTF::Function<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 8 * (unint64_t)a1[3] > a3)
  {
    v9 = a3 - v5;
    v10 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WTF::Function<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WTF::Function<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::Function<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int **v9;
  unsigned int *v10;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = 8 * v5;
        v9 = (unsigned int **)v4;
        do
        {
          v10 = *v9;
          *v9 = 0;
          *(_QWORD *)v7 = v10;
          result = *v9;
          *v9 = 0;
          if (result)
            result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
          v7 += 2;
          ++v9;
          v8 -= 8;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::DispatchTask,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 16 * (unint64_t)a1[3] > a3)
  {
    v9 = a3 - v5;
    v10 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::DispatchTask,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::DispatchTask,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::DispatchTask,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int **v8;
  unsigned int **v9;
  unsigned int *v10;
  unsigned int *v11;
  WTF::StringImpl *v12;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = (unsigned int **)((char *)v4 + 16 * v5);
        v9 = (unsigned int **)v4;
        do
        {
          v10 = *v9;
          *v9 = 0;
          *(_QWORD *)v7 = v10;
          v11 = v9[1];
          v9[1] = 0;
          *((_QWORD *)v7 + 1) = v11;
          v12 = (WTF::StringImpl *)v9[1];
          v9[1] = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v6);
            else
              *(_DWORD *)v12 -= 2;
          }
          result = *v9;
          *v9 = 0;
          if (result)
          {
            if (*result == 1)
              result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
            else
              --*result;
          }
          v9 += 2;
          v7 += 4;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WebCore::NetworkStorageSession::setCacheMaxAgeCapForPrevalentResources(uint64_t result, double a2)
{
  if (!*(_BYTE *)(result + 200))
    *(_BYTE *)(result + 200) = 1;
  *(double *)(result + 192) = a2;
  return result;
}

WebCore::OrganizationStorageAccessPromptQuirk *WebCore::NetworkStorageSession::updateStorageAccessPromptQuirks(WebCore::OrganizationStorageAccessPromptQuirk *result, void *a2)
{
  WebCore::OrganizationStorageAccessPromptQuirk *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _BYTE v6[24];

  v2 = result;
  if ((byte_1ECE841B3 & 1) != 0)
  {
    result = (WebCore::OrganizationStorageAccessPromptQuirk *)qword_1ECE841D0;
    if (qword_1ECE841D0)
    {
      qword_1ECE841D0 = 0;
      result = (WebCore::OrganizationStorageAccessPromptQuirk *)WTF::HashTable<WebCore::OrganizationStorageAccessPromptQuirk,WebCore::OrganizationStorageAccessPromptQuirk,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::OrganizationStorageAccessPromptQuirk>,WTF::HashTraits<WebCore::OrganizationStorageAccessPromptQuirk>,WTF::HashTraits<WebCore::OrganizationStorageAccessPromptQuirk>>::deallocateTable(result, a2);
    }
  }
  else
  {
    qword_1ECE841D0 = 0;
    byte_1ECE841B3 = 1;
  }
  v3 = *((unsigned int *)v2 + 3);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)v2;
    v5 = 32 * v3;
    do
    {
      result = (WebCore::OrganizationStorageAccessPromptQuirk *)WTF::HashTable<WebCore::OrganizationStorageAccessPromptQuirk,WebCore::OrganizationStorageAccessPromptQuirk,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::OrganizationStorageAccessPromptQuirk>,WTF::HashTraits<WebCore::OrganizationStorageAccessPromptQuirk>,WTF::HashTraits<WebCore::OrganizationStorageAccessPromptQuirk>>::add((uint64_t)v6, v4);
      v4 += 4;
      v5 -= 32;
    }
    while (v5);
  }
  return result;
}

uint64_t WebCore::jsNavigator_geolocationGetter(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSNavigator *a3)
{
  JSC::JSGlobalObject *v4;
  WebCore::JSDOMGlobalObject *v5;
  WebCore::Geolocation *v6;

  v4 = *(JSC::JSGlobalObject **)(16 * (a2 & 0xFFFFFFFE) + 0x28);
  v5 = (WebCore::JSDOMGlobalObject *)WebCore::NavigatorGeolocation::geolocation(a3, a2);
  if (v5)
    return WebCore::toJS(this, v4, v5, v6);
  else
    return 2;
}

uint64_t WebCore::NavigatorGeolocation::geolocation(WebCore::NavigatorGeolocation *this)
{
  uint64_t result;
  WebCore::Geolocation *v3;
  uint64_t v4;

  result = *((_QWORD *)this + 1);
  if (!result)
  {
    WebCore::Geolocation::create((WebCore::Geolocation *)&v4, *((WebCore::Navigator **)this + 2));
    result = v4;
    v3 = (WebCore::Geolocation *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v4;
    if (v3)
    {
      WebCore::Geolocation::deref(v3);
      return *((_QWORD *)this + 1);
    }
  }
  return result;
}

uint64_t WebCore::NavigatorGeolocation::geolocation(WebCore::NavigatorGeolocation *this, WebCore::Navigator *a2)
{
  WebCore::NavigatorGeolocation *v2;

  v2 = (WebCore::NavigatorGeolocation *)WebCore::NavigatorGeolocation::from(this, a2);
  return WebCore::NavigatorGeolocation::geolocation(v2);
}

uint64_t WebCore::NavigatorGeolocation::from(WebCore::NavigatorGeolocation *this, WebCore::Navigator *a2)
{
  uint64_t *v3;
  const char **v4;
  uint64_t v5;
  const char *v6;
  const char *v8;
  unsigned __int8 *v9[2];

  v3 = (uint64_t *)((char *)this + 72);
  v9[0] = "NavigatorGeolocation";
  v9[1] = (unsigned __int8 *)21;
  v4 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)this + 9, v9);
  if (!v4 || (v5 = (uint64_t)v4[2]) == 0)
  {
    v5 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v5 = off_1E33570B8;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = this;
    v8 = (const char *)v5;
    WebCore::Supplement<WebCore::Navigator>::provideTo(v3, "NavigatorGeolocation", (unsigned __int8 *)0x15, &v8);
    v6 = v8;
    v8 = 0;
    if (v6)
      (*(void (**)(const char *))(*(_QWORD *)v6 + 8))(v6);
  }
  return v5;
}

_QWORD *WebCore::JSDOMExceptionOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v23;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v23 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v23) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v23;
        if (v12 == v3)
          goto LABEL_3;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_3:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v13 = (_QWORD *)(v5 + 16 * v11);
      *v13 = -1;
      v16 = v13[1];
      v15 = v13 + 1;
      v14 = v16;
      if (v16)
      {
        *(_QWORD *)(v14 + 8) = 3;
        *v15 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v17 = *v4;
      if (*v4)
        v18 = *(_DWORD *)(v17 - 12) - 1;
      else
        v18 = -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v4;
      if (*v4)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v21 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

uint64_t WebCore::PathStream::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E340EC98;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  v5 = *a1;
  *a1 = 0;
  *(_QWORD *)(result + 16) = v5;
  LODWORD(v5) = *((_DWORD *)a1 + 2);
  *((_DWORD *)a1 + 2) = 0;
  *(_DWORD *)(result + 24) = v5;
  LODWORD(v5) = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 3) = 0;
  *(_DWORD *)(result + 28) = v5;
  *a2 = result;
  return result;
}

uint64_t WebCore::nodeWasReattachedRecursive(WebCore::ScrollingStateTree **this, WebCore::ScrollingStateNode *a2)
{
  uint64_t v3;
  WebCore::ScrollingStateTree *v4;
  uint64_t result;
  WebCore::ScrollingStateNode *v6;
  uint64_t v7;
  WebCore **v8;
  uint64_t v9;
  WebCore *v10;

  v3 = (*((uint64_t (**)(WebCore::ScrollingStateTree **, WebCore::ScrollingStateNode *))*this + 5))(this, a2);
  v4 = this[6];
  this[5] = (WebCore::ScrollingStateTree *)((unint64_t)this[5] | v3);
  result = WebCore::ScrollingStateTree::setHasChangedProperties(v4, 1);
  v7 = *((unsigned int *)this + 21);
  if ((_DWORD)v7)
  {
    v8 = (WebCore **)this[9];
    v9 = 8 * v7;
    do
    {
      v10 = *v8++;
      result = WebCore::nodeWasReattachedRecursive(v10, v6);
      v9 -= 8;
    }
    while (v9);
  }
  return result;
}

uint64_t WebCore::ScrollingStateFrameScrollingNode::applicableProperties(WebCore::ScrollingStateFrameScrollingNode *this)
{
  return 0x21FFFFFC0FF7FLL;
}

uint64_t WebCore::ScrollingStateScrollingNode::applicableProperties(WebCore::ScrollingStateScrollingNode *this)
{
  return 0x18000000FF7FLL;
}

uint64_t WebCore::RenderTable::outerBorderBefore(WebCore::RenderTable *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v7;
  int v8;
  int v9;
  float v10;
  double v11;

  v1 = *((_DWORD *)this + 31);
  if ((v1 & 4) == 0)
    return 0;
  if ((v2 = *((_QWORD *)this + 34)) != 0 && (v4 = *(_QWORD *)(v2 + 8)) != 0
    || (v3 = *((_QWORD *)this + 36)) != 0 && (v4 = *(_QWORD *)(v3 + 8)) != 0
    || (v4 = *((_QWORD *)this + 35)) != 0 && (v4 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v4 = *(unsigned int *)(v4 + 248);
    if ((v4 & 0x80000000) != 0)
      return 0;
  }
  switch((unsigned __int16)v1 >> 13)
  {
    case 1:
      v5 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 176;
      break;
    case 2:
    case 4:
      v5 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 104;
      break;
    case 3:
    case 5:
      v5 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 128;
      break;
    default:
      v5 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 152;
      break;
  }
  if ((*(_BYTE *)(v5 + 20) & 0xF) != 0)
  {
    if ((*(_BYTE *)(v5 + 20) & 0xF) != 1)
    {
      v7 = (float)(*(float *)(v5 + 16) * 0.5) * 64.0;
      if (v7 >= 2147483650.0)
      {
        v8 = 0x7FFFFFFF;
      }
      else if (v7 <= -2147483650.0)
      {
        v8 = 0x80000000;
      }
      else
      {
        v8 = (int)v7;
      }
      if ((int)v4 <= v8)
        v9 = v8;
      else
        v9 = v4;
      v10 = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)
                                                                                               + 8)
                                                                                   + 40)
                                                                       + 8));
      v11 = (float)(floorf((float)(v10 * (float)v9) * 0.015625) / v10) * 64.0;
      if (v11 >= 2147483650.0)
        return 0x7FFFFFFFLL;
      if (v11 <= -2147483650.0)
        return 0x80000000;
      return (int)v11;
    }
    return 0;
  }
  return v4;
}

unint64_t WebCore::WebAnimation::currentTime(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a1 + 104);
}

{
  uint64_t v2;
  char v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t result;
  char v7;
  double v8;

  v2 = *(_QWORD *)(a1 + 64);
  if (!v2 || ((*(void (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2), !v3))
  {
    v4 = 0;
    v5 = 0;
    return v5 | v4;
  }
  *(double *)&result = COERCE_DOUBLE((*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(a1 + 64) + 56))(*(_QWORD *)(a1 + 64), *(double *)(a1 + 96)));
  if (v7)
  {
    v8 = (*(double *)&result - *(double *)(a1 + 96)) * *(double *)(a1 + 120);
    v5 = *(_QWORD *)&v8 & 0xFFFFFFFFFFFFFF00;
    v4 = LOBYTE(v8);
    return v5 | v4;
  }
  __break(1u);
  return result;
}

double WebCore::CSSAnimation::create@<D0>(const WebCore::Styleable *a1@<X0>, const WebCore::Animation *a2@<X1>, const WebCore::RenderStyle *a3@<X2>, const WebCore::RenderStyle *a4@<X3>, int a5@<W4>, WebCore::StyleOriginatedAnimation **a6@<X8>)
{
  WebCore::CSSAnimation *v12;
  WebCore::StyleOriginatedAnimation *v13;
  WebCore::WebAnimation *v14;

  v12 = (WebCore::CSSAnimation *)bmalloc::api::isoAllocate();
  v13 = WebCore::CSSAnimation::CSSAnimation(v12, a1, a2);
  *a6 = v13;
  WebCore::StyleOriginatedAnimation::initialize((uint64_t)v13, a3, a4, a5);
  return WebCore::InspectorInstrumentation::didCreateWebAnimation(v12, v14);
}

uint64_t WebCore::DocumentTimeline::DocumentTimeline(uint64_t a1, WebCore::Document *a2, double a3)
{
  unint64_t StatusReg;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  uint64_t *i;
  _BYTE v16[24];

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = off_1E338D038;
  *(_QWORD *)(a1 + 48) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 56) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  v7 = *(unsigned int **)(StatusReg + 736);
  if (!v7)
    v7 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  *(_QWORD *)(a1 + 96) = v7;
  *(_QWORD *)(a1 + 56) = off_1E31F7378;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v9 = off_1E33914B8;
  v9[1] = WebCore::DocumentTimeline::scheduleAnimationResolution;
  v9[2] = 0;
  v9[3] = a1;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 104) = v9;
  *(_QWORD *)(a1 + 112) = 0;
  v10 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 136) = v10;
  *(double *)(a1 + 144) = a3;
  *(_DWORD *)(a1 + 152) = 0;
  *(_WORD *)(a1 + 156) = 256;
  v12 = WebCore::Document::ensureTimelinesController(a2);
  WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::DocumentTimeline>(v12 + 16, (_QWORD *)a1, (uint64_t)v16);
  if (*(_BYTE *)(v12 + 80))
  {
    WebCore::DocumentTimeline::suspendAnimations((WebCore::DocumentTimeline *)a1, v13);
  }
  else
  {
    for (i = *(uint64_t **)(a1 + 32); i; i = (uint64_t *)i[2])
      WebCore::WebAnimation::setSuspended(*i, 0);
    WebCore::DocumentTimeline::scheduleAnimationResolution(a1);
  }
  return a1;
}

uint64_t WebCore::WebAnimation::setEffect(uint64_t result, WebCore::ScriptExecutionContext *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __n128 v9;
  WebCore::KeyframeEffect *v10;
  __n128 v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _DWORD *v20;

  v3 = result;
  v4 = *(_DWORD **)(result + 56);
  if (v4)
    ++v4[2];
  v5 = *(_QWORD *)a2;
  if (*(_DWORD **)a2 != v4)
  {
    if (*(_BYTE *)(result + 162))
      *(_BYTE *)(result + 162) = 2;
    if (*(_BYTE *)(result + 161))
      *(_BYTE *)(result + 161) = 2;
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 96);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          v20 = 0;
          WebCore::WebAnimation::setEffect(v7, &v20);
          if (v20)
          {
            if (v20[2] == 1)
              (*(void (**)(void))(*(_QWORD *)v20 + 8))();
            else
              --v20[2];
          }
        }
      }
    }
    if (!*(_DWORD *)(v3 + 152))
    {
      v13 = *(_QWORD *)(v3 + 56);
      if (v13)
      {
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v13 + 24))(*(_QWORD *)(v3 + 56)))
        {
          v14 = *(_QWORD *)(v13 + 264);
          if (v14)
          {
            if (*(_BYTE *)(v13 + 288) && (v15 = *(WTF::StringImpl **)(v13 + 280)) != 0)
            {
              *(_DWORD *)v15 += 2;
              WebCore::Node::invalidateStyle(v14, 1u, 0);
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, v16);
              else
                *(_DWORD *)v15 -= 2;
            }
            else
            {
              WebCore::Node::invalidateStyle(v14, 1u, 0);
            }
          }
        }
      }
    }
    ++*(_DWORD *)(v3 + 24);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 104))(v3);
    WebCore::WebAnimation::setEffectInternal((WTF::StringImpl *)v3, a2, v8);
    *(_BYTE *)(v3 + 159) = 0;
    WebCore::WebAnimation::updateFinishedState(v3, 0, 0, v9);
    v10 = *(WebCore::KeyframeEffect **)(v3 + 56);
    if (v10 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v10 + 24))(*(_QWORD *)(v3 + 56)))
    {
      WebCore::WebAnimation::updateRelevance((WebCore::WebAnimation *)v3, v11);
      WebCore::KeyframeEffect::updateEffectStackMembership(v10, v12);
    }
    result = *(_QWORD *)(v3 + 64);
    if (result)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    if (!*(_DWORD *)(v3 + 152))
    {
      v17 = *(_QWORD *)(v3 + 56);
      if (v17)
      {
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v17 + 24))(*(_QWORD *)(v3 + 56));
        if ((_DWORD)result)
        {
          result = *(_QWORD *)(v17 + 264);
          if (result)
          {
            if (*(_BYTE *)(v17 + 288) && (v18 = *(WTF::StringImpl **)(v17 + 280)) != 0)
            {
              *(_DWORD *)v18 += 2;
              result = WebCore::Node::invalidateStyle(result, 1u, 0);
              if (*(_DWORD *)v18 == 2)
                result = WTF::StringImpl::destroy(v18, v19);
              else
                *(_DWORD *)v18 -= 2;
            }
            else
            {
              result = WebCore::Node::invalidateStyle(result, 1u, 0);
            }
          }
        }
      }
    }
    if (*(_DWORD *)(v3 + 24) == 1)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
    else
      --*(_DWORD *)(v3 + 24);
  }
  if (v4)
  {
    if (v4[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  return result;
}

uint64_t WebCore::WebAnimation::play@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  double v8;
  double v9;
  uint64_t *v10;
  _QWORD *v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t *v16;
  uint64_t *v17;
  void *v18;
  WebCore::KeyframeEffect *v19;
  __n128 v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  char v25;
  uint64_t v26;

  v4 = result;
  v25 = 0;
  v6 = *(_QWORD *)(result + 56);
  a4.n128_u64[0] = 0;
  if (v6)
    a4.n128_u64[0] = *(_QWORD *)(v6 + 88);
  v7 = *(unsigned __int8 *)(result + 162);
  if (!a2)
    goto LABEL_33;
  *(_QWORD *)&v8 = *(_QWORD *)(result + 104) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(result + 104);
  v9 = *(double *)(result + 112);
  if (v9 < 0.0 || v8 >= 0.0 && v8 + 0.000001 < a4.n128_f64[0])
  {
    if (v9 < 0.0)
    {
      if (v8 <= 0.0)
        v25 = 1;
      if ((v25 & 1) != 0 || a4.n128_f64[0] < v8)
      {
        if (a4.n128_f64[0] == INFINITY)
        {
          *(_BYTE *)a3 = 8;
          *(_QWORD *)(a3 + 8) = 0;
          *(_BYTE *)(a3 + 16) = 1;
          return result;
        }
LABEL_34:
        v10 = (uint64_t *)(result + 64);
        if (!*v10)
          goto LABEL_43;
LABEL_7:
        *(_QWORD *)(result + 104) = a4.n128_u64[0];
        v11 = (_QWORD *)(result + 96);
        goto LABEL_8;
      }
    }
LABEL_33:
    a4.n128_u64[0] = 0x7FF8000000000000;
    goto LABEL_34;
  }
  v10 = (uint64_t *)(result + 64);
  a4.n128_u64[0] = 0;
  if (*(_QWORD *)(result + 64))
    goto LABEL_7;
LABEL_43:
  v11 = (_QWORD *)(result + 112);
  v26 = *(_QWORD *)(result + 112);
  *(_QWORD *)(result + 96) = a4.n128_u64[0];
  *(_QWORD *)(result + 104) = 0x7FF8000000000000;
  *(_QWORD *)(result + 120) = v26;
LABEL_8:
  *v11 = 0x7FF8000000000000;
  if (v7 || (v12 = *(_BYTE *)(result + 161)) != 0)
  {
    *(_WORD *)(result + 161) = 0;
    v12 = 1;
  }
  if ((v12 & 1) == 0)
  {
    v13 = WTF::fastMalloc((WTF *)0x40);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v14 = off_1E3392078;
    v14[1] = WebCore::WebAnimation::readyPromiseResolve;
    v14[2] = 0;
    v14[3] = v4;
    *(_QWORD *)v13 = v14;
    *(_BYTE *)(v13 + 8) = 0;
    *(_BYTE *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 40) = v13 + 56;
    a4.n128_u64[0] = 1;
    *(_QWORD *)(v13 + 48) = 1;
    v16 = *(uint64_t **)(v4 + 72);
    *(_QWORD *)(v4 + 72) = v13;
    if (v16)
    {
      v17 = WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::~DOMPromiseProxyWithResolveCallback(v16, v15);
      WTF::fastFree((WTF *)v17, v18);
    }
  }
  *(_BYTE *)(v4 + 161) = 2;
  *(_BYTE *)(v4 + 159) = 0;
  WebCore::WebAnimation::updateFinishedState(v4, 0, 0, a4);
  v19 = *(WebCore::KeyframeEffect **)(v4 + 56);
  if (v19 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v19 + 24))(*(_QWORD *)(v4 + 56)))
  {
    WebCore::WebAnimation::updateRelevance((WebCore::WebAnimation *)v4, v20);
    WebCore::KeyframeEffect::updateEffectStackMembership(v19, v21);
  }
  result = *v10;
  if (*v10)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v4);
  if (!*(_DWORD *)(v4 + 152))
  {
    v22 = *(_QWORD *)(v4 + 56);
    if (v22)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
      if ((_DWORD)result)
      {
        result = *(_QWORD *)(v22 + 264);
        if (result)
        {
          if (*(_BYTE *)(v22 + 288) && (v23 = *(WTF::StringImpl **)(v22 + 280)) != 0)
          {
            *(_DWORD *)v23 += 2;
            result = WebCore::Node::invalidateStyle(result, 1u, 0);
            if (*(_DWORD *)v23 == 2)
              result = WTF::StringImpl::destroy(v23, v24);
            else
              *(_DWORD *)v23 -= 2;
          }
          else
          {
            result = WebCore::Node::invalidateStyle(result, 1u, 0);
          }
        }
      }
    }
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::~DOMPromiseProxyWithResolveCallback(uint64_t *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v6;
  uint64_t v7;
  _DWORD **v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD **v12;

  v3 = *((unsigned int *)a1 + 13);
  if ((_DWORD)v3)
  {
    v9 = (_DWORD **)a1[5];
    v10 = 8 * v3;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        v12 = v9;
        if (v11[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
        else
          --v11[4];
        v9 = v12;
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v4 = (WTF *)a1[5];
  if (a1 + 7 != (uint64_t *)v4 && v4 != 0)
  {
    a1[5] = 0;
    *((_DWORD *)a1 + 12) = 0;
    WTF::fastFree(v4, a2);
  }
  if (*((_BYTE *)a1 + 32))
  {
    if (*((_BYTE *)a1 + 24))
    {
      v6 = (WTF::StringImpl *)a1[2];
      a1[2] = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v6 -= 2;
      }
    }
  }
  v7 = *a1;
  *a1 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

WTF::StringImpl *WebCore::WebAnimation::setEffectInternal(WTF::StringImpl *result, WebCore::ScriptExecutionContext *a2, char a3)
{
  int v3;
  int v4;
  WTF::StringImpl **v5;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  int v15;
  char v16;
  uint64_t v17;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl *v24;
  char v25;
  char v26;
  WTF::StringImpl *v27;
  int v28;
  WTF::StringImpl *v29;
  char v30;
  char v31;
  char v32[24];
  WTF::StringImpl *v33;

  v5 = (WTF::StringImpl **)*((_QWORD *)result + 7);
  if (v5 == *(WTF::StringImpl ***)a2)
    return result;
  v7 = (uint64_t)result;
  *((_QWORD *)result + 7) = 0;
  v8 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v9 = (_DWORD *)*((_QWORD *)result + 7);
  *(_QWORD *)(v7 + 56) = v8;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  if (!v5 || !(*((unsigned int (**)(WTF::StringImpl **))*v5 + 3))(v5))
  {
    LOBYTE(v10) = 0;
    goto LABEL_13;
  }
  v10 = v5[33];
  if (!v10)
  {
LABEL_13:
    LOBYTE(v27) = 0;
    goto LABEL_14;
  }
  if (*((_BYTE *)v5 + 288))
  {
    v11 = *((_DWORD *)v5 + 68);
    v12 = v5[35];
    if (v12)
      *(_DWORD *)v12 += 2;
    v27 = v10;
    v28 = v11;
    v29 = v12;
    LOBYTE(v10) = 1;
    v30 = 1;
    v3 = 1;
  }
  else
  {
    v3 = 0;
    v27 = v5[33];
    LOBYTE(v28) = 0;
    LOBYTE(v10) = 1;
    v30 = 0;
  }
LABEL_14:
  v31 = (char)v10;
  v13 = *(_QWORD *)(v7 + 56);
  if (!v13 || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v13 + 24))(*(_QWORD *)(v7 + 56)))
  {
    LOBYTE(v14) = 0;
    goto LABEL_22;
  }
  v14 = *(WTF::StringImpl **)(v13 + 264);
  if (!v14)
  {
LABEL_22:
    LOBYTE(v22) = 0;
    v16 = 1;
    goto LABEL_23;
  }
  if (*(_BYTE *)(v13 + 288))
  {
    v15 = *(_DWORD *)(v13 + 272);
    v13 = *(_QWORD *)(v13 + 280);
    if (v13)
      *(_DWORD *)v13 += 2;
    v16 = 0;
    v22 = v14;
    v23 = v15;
    v24 = (WTF::StringImpl *)v13;
    LOBYTE(v14) = 1;
    v25 = 1;
    v4 = 1;
  }
  else
  {
    v16 = 0;
    v4 = 0;
    v22 = *(WTF::StringImpl **)(v13 + 264);
    LOBYTE(v23) = 0;
    LOBYTE(v14) = 1;
    v25 = 0;
  }
LABEL_23:
  v26 = (char)v14;
  if (v5)
  {
    (*((void (**)(WTF::StringImpl **, _QWORD))*v5 + 10))(v5, 0);
    if ((a3 & 1) != 0 || !v31)
      goto LABEL_64;
    if ((v16 & 1) == 0 && v27 == v22)
    {
      if ((v3 & v4 & 1) != 0)
      {
        if (v28 == v23 && v29 == (WTF::StringImpl *)v13)
          goto LABEL_64;
      }
      else if ((v3 & 1) == (v4 & 1))
      {
        goto LABEL_64;
      }
    }
    WebCore::Styleable::animationWasRemoved((WebCore::Styleable *)&v27, (WebCore::WebAnimation *)v7);
LABEL_64:
    WebCore::WebAnimation::updateRelevance((WebCore::WebAnimation *)v7, v19);
  }
  result = *(WTF::StringImpl **)(v7 + 56);
  if (result)
  {
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 80))(result, v7);
    if ((v16 & 1) == 0)
    {
      result = v22;
      if (!v31 || v27 != v22)
      {
LABEL_28:
        v17 = WebCore::Element::ensureAnimationRareData(v22, &v23);
        ++*(_DWORD *)(v7 + 24);
        v33 = (WTF::StringImpl *)v7;
        WTF::ListHashSet<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::DefaultHash<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::add((uint64_t *)(v17 + 16), (uint64_t *)&v33, (uint64_t)v32);
        result = v33;
        v33 = 0;
        if (result)
        {
          if (*((_DWORD *)result + 6) == 1)
            result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 72))(result);
          else
            --*((_DWORD *)result + 6);
        }
        goto LABEL_31;
      }
      if (v30 == 0 || (v4 & 1) == 0)
      {
        if ((v30 != 0) != (v4 & 1))
          goto LABEL_28;
      }
      else if (v28 != v23 || v29 != (WTF::StringImpl *)v13)
      {
        goto LABEL_28;
      }
    }
  }
LABEL_31:
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v20 = *(_QWORD *)(v7 + 40);
    if (v20)
    {
      v21 = *(_QWORD *)(v20 + 8);
      if (v21)
      {
        result = (WTF::StringImpl *)WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v21 - 96), a2);
        if (result)
          result = (WTF::StringImpl *)WebCore::InspectorInstrumentation::didSetWebAnimationEffectImpl((uint64_t)result, (WebCore::StyleOriginatedAnimation *)v7);
      }
    }
  }
  if (v26)
  {
    if (v25)
    {
      result = v24;
      v24 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  if (v31)
  {
    if (v30)
    {
      result = v29;
      v29 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  if (v5)
  {
    if (*((_DWORD *)v5 + 2) == 1)
      return (WTF::StringImpl *)(*((uint64_t (**)(WTF::StringImpl **))*v5 + 1))(v5);
    else
      --*((_DWORD *)v5 + 2);
  }
  return result;
}

void WebCore::KeyframeEffect::setAnimation(WebCore::KeyframeEffect *this, WebCore::WebAnimation *a2, __n128 a3)
{
  uint64_t v5;
  WebCore::WebAnimation *v6;
  WTF::StringImpl *v7;

  v5 = *((_QWORD *)this + 12);
  if (v5)
    v6 = *(WebCore::WebAnimation **)(v5 + 8);
  else
    v6 = 0;
  WebCore::AnimationEffect::setAnimation((WebCore::WebAnimation **)this, a2, a3);
  if (v6 != a2)
  {
    if (!*((_BYTE *)this + 305))
    {
      *((_BYTE *)this + 305) = 2;
      WebCore::BlendingKeyframes::clear((WebCore::KeyframeEffect *)((char *)this + 136));
    }
    WebCore::KeyframeEffect::updateEffectStackMembership(this, v7);
  }
}

void WebCore::AnimationEffect::setAnimation(WebCore::WebAnimation **this, WebCore::WebAnimation *a2, __n128 a3)
{
  WebCore::AnimationEffect *v4;
  WebCore::WebAnimation *v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;

  v4 = (WebCore::AnimationEffect *)this;
  v5 = this[12];
  if (v5)
    v5 = (WebCore::WebAnimation *)*((_QWORD *)v5 + 1);
  if (v5 != a2)
  {
    if (a2)
    {
      v12 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
      v6 = v12;
      if (v12)
      {
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
      }
      v4 = (WebCore::AnimationEffect *)this;
    }
    else
    {
      v6 = 0;
    }
    v7 = *((_QWORD *)v4 + 12);
    *((_QWORD *)v4 + 12) = v6;
    if (v7)
    {
      do
      {
        v8 = __ldaxr((unsigned int *)v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, (unsigned int *)v7));
      if (!v9)
      {
        atomic_store(1u, (unsigned int *)v7);
        v10 = *(unsigned int *)(v7 + 28);
        if ((_DWORD)v10)
        {
          v16 = v7;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v10));
          v7 = v16;
        }
        v11 = *(WTF **)(v7 + 16);
        if (v11)
        {
          *(_QWORD *)(v7 + 16) = 0;
          *(_DWORD *)(v7 + 24) = 0;
          v15 = v7;
          WTF::fastFree(v11, a2);
          v7 = v15;
        }
        WTF::fastFree((WTF *)v7, a2);
      }
    }
    if (a2)
      WebCore::WebAnimation::updateRelevance(a2, a3);
  }
}

uint64_t WebCore::EventListenerMap::EventListenerMap(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = 0;
  return this;
}

_QWORD *WebCore::WebAnimation::setTimeline(_QWORD *result, _QWORD *a2, __n128 a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  _QWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::Document *v18;
  _BOOL8 v19;
  WebCore::KeyframeEffect *v20;
  __n128 v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  char v29;
  char v30;
  _BYTE v31[24];
  _DWORD *v32;

  if (*a2 != result[8])
  {
    v4 = (uint64_t)result;
    a3.n128_u64[0] = result[12];
    result[13] = 0x7FF8000000000000;
    v5 = result[7];
    if (v5)
    {
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v5 + 24))(result[7]))
      {
        v6 = *(_QWORD *)(v5 + 264);
        if (v6)
        {
          if (*(_BYTE *)(v5 + 288))
          {
            v7 = *(_DWORD *)(v5 + 272);
            v8 = *(WTF::StringImpl **)(v5 + 280);
            if (v8)
              *(_DWORD *)v8 += 2;
            v26 = v6;
            v27 = v7;
            v28 = v8;
            v29 = 1;
          }
          else
          {
            v26 = *(_QWORD *)(v5 + 264);
            LOBYTE(v27) = 0;
            v29 = 0;
          }
          v30 = 1;
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4) & 1) == 0)
          {
            result = WebCore::Styleable::animationWasRemoved((WebCore::Styleable *)&v26, (WebCore::WebAnimation *)v4);
            if (!v30)
            {
              __break(1u);
              return result;
            }
          }
          v9 = WebCore::Element::ensureAnimationRareData(v26, &v27);
          ++*(_DWORD *)(v4 + 24);
          v32 = (_DWORD *)v4;
          WTF::ListHashSet<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::DefaultHash<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::add((uint64_t *)(v9 + 16), (uint64_t *)&v32, (uint64_t)v31);
          v11 = v32;
          v32 = 0;
          if (v11)
          {
            if (v11[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 72))(v11);
            else
              --v11[6];
          }
          if (v30)
          {
            if (v29)
            {
              v12 = v28;
              v28 = 0;
              if (v12)
              {
                if (*(_DWORD *)v12 == 2)
                  WTF::StringImpl::destroy(v12, v10);
                else
                  *(_DWORD *)v12 -= 2;
              }
            }
          }
        }
      }
    }
    ++*(_DWORD *)(v4 + 24);
    v13 = *(_QWORD **)(v4 + 64);
    v14 = (_QWORD *)*a2;
    if (v13 != (_QWORD *)*a2)
    {
      if (v13)
      {
        (*(void (**)(_QWORD, uint64_t))(*v13 + 48))(*(_QWORD *)(v4 + 64), v4);
        v14 = (_QWORD *)*a2;
      }
      *a2 = 0;
      v15 = *(_DWORD **)(v4 + 64);
      *(_QWORD *)(v4 + 64) = v14;
      if (v15)
      {
        if (v15[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
          v14 = *(_QWORD **)(v4 + 64);
        }
        else
        {
          --v15[2];
        }
      }
      v16 = *(_QWORD *)(v4 + 56);
      if (v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 64))(v16);
        v13 = *(_QWORD **)(v4 + 64);
      }
      else
      {
        v13 = v14;
      }
    }
    if (v13
      && (*(unsigned int (**)(_QWORD *))(*v13 + 16))(v13)
      && (v17 = v13[17]) != 0
      && (v18 = *(WebCore::Document **)(v17 + 8)) != 0)
    {
      WebCore::Document::ensureTimelinesController(v18);
      v19 = *(_BYTE *)(WebCore::Document::ensureTimelinesController(*(WebCore::Document **)(v13[17] + 8)) + 80) != 0;
    }
    else
    {
      v19 = 0;
    }
    if (*(_BYTE *)(v4 + 156) != v19)
    {
      *(_BYTE *)(v4 + 156) = v19;
      if (*(_QWORD *)(v4 + 56))
      {
        if (WebCore::WebAnimation::playState((WebCore::WebAnimation *)v4) == 1)
          (*(void (**)(_QWORD, _BOOL8))(**(_QWORD **)(v4 + 56) + 56))(*(_QWORD *)(v4 + 56), v19);
      }
    }
    *(_BYTE *)(v4 + 159) = 0;
    WebCore::WebAnimation::updateFinishedState(v4, 0, 0, a3);
    v20 = *(WebCore::KeyframeEffect **)(v4 + 56);
    if (v20 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v20 + 24))(*(_QWORD *)(v4 + 56)))
    {
      WebCore::WebAnimation::updateRelevance((WebCore::WebAnimation *)v4, v21);
      WebCore::KeyframeEffect::updateEffectStackMembership(v20, v22);
    }
    result = *(_QWORD **)(v4 + 64);
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 40))(result, v4);
    if (!*(_DWORD *)(v4 + 152))
    {
      v23 = *(_QWORD *)(v4 + 56);
      if (v23)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v23 + 24))(*(_QWORD *)(v4 + 56));
        if ((_DWORD)result)
        {
          result = *(_QWORD **)(v23 + 264);
          if (result)
          {
            if (*(_BYTE *)(v23 + 288) && (v24 = *(WTF::StringImpl **)(v23 + 280)) != 0)
            {
              *(_DWORD *)v24 += 2;
              result = (_QWORD *)WebCore::Node::invalidateStyle((uint64_t)result, 1u, 0);
              if (*(_DWORD *)v24 == 2)
                result = (_QWORD *)WTF::StringImpl::destroy(v24, v25);
              else
                *(_DWORD *)v24 -= 2;
            }
            else
            {
              result = (_QWORD *)WebCore::Node::invalidateStyle((uint64_t)result, 1u, 0);
            }
          }
        }
      }
    }
    if (*(_DWORD *)(v4 + 24) == 1)
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
    else
      --*(_DWORD *)(v4 + 24);
  }
  return result;
}

uint64_t WebCore::DocumentTimeline::scheduleAnimationResolution(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = this;
  v2 = *(_QWORD *)(this + 136);
  if (!v2
    || (this = *(_QWORD *)(v2 + 8)) == 0
    || (WebCore::Document::ensureTimelinesController((WebCore::Document *)this),
        this = WebCore::Document::ensureTimelinesController(*(WebCore::Document **)(*(_QWORD *)(v1 + 136) + 8)),
        !*(_BYTE *)(this + 80)))
  {
    if (!*(_BYTE *)(v1 + 156))
    {
      v3 = *(_QWORD *)(v1 + 136);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          v5 = *(_QWORD *)(v4 + 528);
          if (v5)
          {
            v6 = *(_QWORD *)(v5 + 8);
            if (v6)
            {
              v7 = *(_QWORD *)(v6 + 24);
              if (v7)
              {
                this = *(_QWORD *)(v7 + 8);
                if (this)
                {
                  if ((v8 = *(_QWORD *)(v1 + 24)) != 0 && *(_DWORD *)(v8 - 12)
                    || *(_DWORD *)(v1 + 132)
                    || (v9 = *(_QWORD *)(v1 + 112)) != 0 && *(_DWORD *)(v9 - 12))
                  {
                    this = WebCore::Page::scheduleRenderingUpdate(this, 8);
                    *(_BYTE *)(v1 + 156) = 1;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::Document::ensureTimelinesController(WebCore::Document *this)
{
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::DocumentTimelinesController *v10;
  uint64_t v11;
  void *v12;

  if (!*((_QWORD *)this + 367))
  {
    v3 = WTF::fastMalloc((WTF *)0x58);
    *(_DWORD *)v3 = 0;
    *(_OWORD *)(v3 + 8) = 0u;
    *(_OWORD *)(v3 + 24) = 0u;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v4 = 0;
    *(_QWORD *)(v3 + 40) = v4;
    *(_QWORD *)(v3 + 48) = this;
    *(_QWORD *)(v3 + 56) = 0;
    *(_QWORD *)(v3 + 64) = 0;
    *(_QWORD *)(v3 + 72) = 0x7FF8000000000000;
    *(_WORD *)(v3 + 80) = 0;
    v6 = *((_QWORD *)this + 66);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 24);
        if (v8)
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (v9)
          {
            if ((*(_QWORD *)(*(_QWORD *)(v9 + 112) + 680) & 0x8000) != 0 && (*(_WORD *)(v9 + 658) & 4) == 0)
              WebCore::DocumentTimelinesController::suspendAnimations((WebCore::DocumentTimelinesController *)v3, v5);
          }
        }
      }
    }
    v10 = (WebCore::DocumentTimelinesController *)*((_QWORD *)this + 367);
    *((_QWORD *)this + 367) = v3;
    if (v10)
    {
      WebCore::DocumentTimelinesController::~DocumentTimelinesController(v10, v5);
      if (*(_DWORD *)v11)
      {
        *(_QWORD *)(v11 + 80) = 0;
        *(_OWORD *)(v11 + 48) = 0u;
        *(_OWORD *)(v11 + 64) = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 32) = 0u;
        *(_OWORD *)v11 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v11, v12);
      }
    }
  }
  return *((_QWORD *)this + 367);
}

WTF::StringImpl *WebCore::DocumentTimeline::animationTimingDidChange(WebCore::DocumentTimeline *this, WebCore::WebAnimation *a2)
{
  WTF::StringImpl *result;

  result = WebCore::AnimationTimeline::animationTimingDidChange(this, a2);
  if (!*((_DWORD *)a2 + 38))
    return (WTF::StringImpl *)WebCore::DocumentTimeline::scheduleAnimationResolution((uint64_t)this);
  return result;
}

WTF::StringImpl *WebCore::AnimationTimeline::animationTimingDidChange(WebCore::AnimationTimeline *this, WebCore::WebAnimation *a2)
{
  int v4;
  WTF::StringImpl *result;
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  char v14;
  char v15;
  uint64_t v16[3];
  WTF::StringImpl *v17;

  if (!*((_QWORD *)a2 + 21) && (*(unsigned int (**)(WebCore::WebAnimation *))(*(_QWORD *)a2 + 280))(a2))
    *((_QWORD *)a2 + 21) = ++WebCore::AnimationTimeline::updateGlobalPosition(WebCore::WebAnimation &)::s_globalPosition;
  ++*((_DWORD *)a2 + 6);
  v16[0] = (uint64_t)a2;
  WTF::ListHashSet<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::DefaultHash<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::add((uint64_t *)this + 3, v16, (uint64_t)&v11);
  v4 = v13;
  result = (WTF::StringImpl *)v16[0];
  v16[0] = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 1)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 72))(result);
    else
      --*((_DWORD *)result + 6);
  }
  if (v4)
  {
    result = (WTF::StringImpl *)*((_QWORD *)a2 + 8);
    if (result && result != this)
    {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WebCore::WebAnimation *))(*(_QWORD *)result + 48))(result, a2);
    }
    else if (result == this)
    {
      v6 = *((_QWORD *)a2 + 7);
      if (v6)
      {
        result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 24))(*((_QWORD *)a2 + 7));
        if ((_DWORD)result)
        {
          result = *(WTF::StringImpl **)(v6 + 264);
          if (result)
          {
            if (*(_BYTE *)(v6 + 288))
            {
              v7 = *(_DWORD *)(v6 + 272);
              v8 = *(WTF::StringImpl **)(v6 + 280);
              if (v8)
                *(_DWORD *)v8 += 2;
              v11 = result;
              v12 = v7;
              v13 = v8;
              v14 = 1;
            }
            else
            {
              v11 = *(WTF::StringImpl **)(v6 + 264);
              LOBYTE(v12) = 0;
              v14 = 0;
            }
            v15 = 1;
            v9 = WebCore::Element::ensureAnimationRareData(result, (uint64_t)&v12);
            ++*((_DWORD *)a2 + 6);
            v17 = a2;
            WTF::ListHashSet<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::DefaultHash<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::add((uint64_t *)(v9 + 16), (uint64_t *)&v17, (uint64_t)v16);
            result = v17;
            v17 = 0;
            if (result)
            {
              if (*((_DWORD *)result + 6) == 1)
                result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 72))(result);
              else
                --*((_DWORD *)result + 6);
            }
            if (v15)
            {
              if (v14)
              {
                result = v13;
                v13 = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
                  else
                    *(_DWORD *)result -= 2;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void WebCore::WebAnimation::runPendingPlayTask(WebCore::WebAnimation *this)
{
  __n128 v2;
  double v3;
  double v4;
  char v5;
  WTF::StringImpl *v6;
  WebCore::KeyframeEffect *v7;
  __n128 v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  *((_BYTE *)this + 161) = 0;
  v2.n128_u64[0] = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 56))(*((_QWORD *)this + 8));
  v3 = *((double *)this + 13);
  v4 = *((double *)this + 14);
  *((double *)this + 15) = v4;
  *((_QWORD *)this + 14) = 0x7FF8000000000000;
  if (!v5)
    v2.n128_f64[0] = 0.0;
  if (v4 == 0.0)
  {
    *((_QWORD *)this + 12) = v2.n128_u64[0];
  }
  else
  {
    v2.n128_f64[0] = v2.n128_f64[0] - v3 / v4;
    *((_QWORD *)this + 12) = v2.n128_u64[0];
    *((_QWORD *)this + 13) = 0x7FF8000000000000;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  if (!*((_BYTE *)v6 + 32))
    WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::resolve(v6, this);
  *((_BYTE *)this + 159) = 0;
  WebCore::WebAnimation::updateFinishedState((uint64_t)this, 0, 0, v2);
  v7 = (WebCore::KeyframeEffect *)*((_QWORD *)this + 7);
  if (v7 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v7 + 24))(*((_QWORD *)this + 7)))
  {
    WebCore::WebAnimation::updateRelevance(this, v8);
    WebCore::KeyframeEffect::updateEffectStackMembership(v7, v9);
  }
  if (!*((_DWORD *)this + 38))
  {
    v10 = *((_QWORD *)this + 7);
    if (v10)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
      {
        v11 = *(_QWORD *)(v10 + 264);
        if (v11)
        {
          if (*(_BYTE *)(v10 + 288) && (v12 = *(WTF::StringImpl **)(v10 + 280)) != 0)
          {
            *(_DWORD *)v12 += 2;
            WebCore::Node::invalidateStyle(v11, 1u, 0);
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v13);
            else
              *(_DWORD *)v12 -= 2;
          }
          else
          {
            WebCore::Node::invalidateStyle(v11, 1u, 0);
          }
        }
      }
    }
  }
}

void WebCore::WebAnimation::updateFinishedState(uint64_t a1, int a2, int a3, __n128 a4)
{
  double v7;
  uint64_t v8;
  char v9;
  unsigned __int8 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  int v22;
  char v23;
  double v24;
  double v25;
  uint64_t v26;
  char v27;
  double v28;
  char v29;
  int v30;
  double v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  double v38;
  uint64_t v39;
  double v40;
  void *v41;
  double v42;
  char v43;
  int v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[2];
  uint64_t *v51;

  if (a2)
  {
    v7 = *(double *)(a1 + 104);
    v23 = 0;
LABEL_36:
    v10 = LOBYTE(v7);
    v11 = *(_QWORD *)&v7 & 0xFFFFFFFFFFFFFF00;
LABEL_7:
    v12 = *(_QWORD *)(a1 + 56);
    a4.n128_u64[0] = 0;
    if (v12)
      a4.n128_u64[0] = *(_QWORD *)(v12 + 88);
    if ((v23 & 1) != 0 || *(_BYTE *)(a1 + 162) || *(_BYTE *)(a1 + 161))
      goto LABEL_10;
    *(_QWORD *)&v24 = v11 | v10;
    v25 = *(double *)(a1 + 120);
    if (v25 > 0.0 && a4.n128_f64[0] <= v24)
    {
      if (!a2)
      {
        if (*(double *)(a1 + 88) >= a4.n128_f64[0])
          a4.n128_u64[0] = *(_QWORD *)(a1 + 88);
        *(_QWORD *)(a1 + 104) = a4.n128_u64[0];
        goto LABEL_10;
      }
    }
    else if (v25 >= 0.0 || v24 > 0.0)
    {
      if (v25 == 0.0)
        goto LABEL_10;
      v26 = *(_QWORD *)(a1 + 64);
      if (!v26)
        goto LABEL_10;
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v26 + 56))(v26, a4);
      if (!v27)
        goto LABEL_10;
      if (a2)
      {
        v42 = COERCE_DOUBLE((*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(a1 + 64) + 56))(*(_QWORD *)(a1 + 64), *(double *)(a1 + 104)));
        if (!v43)
        {
          std::__throw_bad_optional_access[abi:sn180100]();
          *(_QWORD *)(a1 + 104) = 0;
          goto LABEL_10;
        }
        *(double *)(a1 + 96) = v42 - *(double *)(a1 + 104) / *(double *)(a1 + 120);
      }
      v24 = NAN;
    }
    else if (!a2)
    {
      v24 = *(double *)(a1 + 88);
      if (v24 > 0.0)
        v24 = 0.0;
    }
    *(double *)(a1 + 104) = v24;
LABEL_10:
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 104);
    a4.n128_u64[0] = *(_QWORD *)(a1 + 104);
    v30 = 1;
    goto LABEL_50;
  }
  v8 = *(_QWORD *)(a1 + 64);
  if (!v8 || ((*(void (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8), !v9))
  {
    v10 = 0;
    v11 = 0;
    v23 = 1;
    goto LABEL_7;
  }
  v28 = COERCE_DOUBLE((*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(a1 + 64) + 56))(*(_QWORD *)(a1 + 64), *(double *)(a1 + 96)));
  if (v29)
  {
    v23 = 0;
    v7 = (v28 - *(double *)(a1 + 96)) * *(double *)(a1 + 120);
    goto LABEL_36;
  }
  __break(1u);
  v30 = 0;
LABEL_50:
  if (*(_BYTE *)(a1 + 162) || !v30)
    goto LABEL_116;
  v31 = *(double *)(a1 + 112);
  if (v31 > 0.0)
  {
    v32 = *(_QWORD *)(a1 + 56);
    v33 = 0.0;
    if (v32)
      v33 = *(double *)(v32 + 88);
    if (a4.n128_f64[0] + 0.000001 >= v33)
      goto LABEL_117;
  }
  if (v31 >= 0.0 || (a4.n128_f64[0] = a4.n128_f64[0] + -0.000001, a4.n128_f64[0] > 0.0))
  {
LABEL_116:
    if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 32))
    {
      v50[0] = (uint64_t)WebCore::WebAnimation::finishedPromiseResolve;
      v50[1] = 0;
      WTF::makeUniqueRef<WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>,WebCore::WebAnimation&,WebCore::WebAnimation& (WebCore::WebAnimation::*)(void)>(a1, v50, (uint64_t *)&v51);
      WTF::UniqueRef<WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>>::operator=((uint64_t **)(a1 + 80), &v51);
      WTF::UniqueRef<WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>>::~UniqueRef(&v51, v41);
    }
  }
  else
  {
LABEL_117:
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 80) + 32))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1);
      if (a3)
      {
        *(_BYTE *)(a1 + 157) = 0;
        WebCore::WebAnimation::finishNotificationSteps((void *)a1);
      }
      else if (!*(_BYTE *)(a1 + 157))
      {
        *(_BYTE *)(a1 + 157) = 1;
        v34 = *(_QWORD *)(a1 + 40);
        if (v34)
        {
          v35 = *(_QWORD *)(v34 + 8);
          if (v35)
          {
            v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v35 - 96) + 104))(v35 - 96);
            ++*(_DWORD *)(a1 + 24);
            v37 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v37 = &off_1E33920F0;
            v37[1] = a1;
            v37[2] = a1;
            v50[0] = (uint64_t)v37;
            WebCore::EventLoopTaskGroup::queueMicrotask(v36, v50);
            if (v50[0])
              (*(void (**)(uint64_t))(*(_QWORD *)v50[0] + 8))(v50[0]);
          }
        }
      }
    }
  }
  v13 = *(_QWORD *)(a1 + 56);
  if (!v13 || *(_BYTE *)(a1 + 163) == 1)
  {
    v22 = 0;
    goto LABEL_99;
  }
  v14 = *(_QWORD *)(v13 + 96);
  if (!v14)
  {
    v16 = 0.0;
LABEL_94:
    LODWORD(v17) = 0;
    goto LABEL_20;
  }
  v15 = *(_QWORD *)(v14 + 8);
  if (!v15)
  {
    v16 = 0.0;
    v14 = 0;
    goto LABEL_94;
  }
  v14 = 1;
  *(_QWORD *)&v16 = *(_QWORD *)(v15 + 104) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(v15 + 104);
  v17 = *(_QWORD *)(v13 + 96);
  if (v17)
  {
    v17 = *(_QWORD *)(v17 + 8);
    if (v17)
      LODWORD(v17) = *(double *)(v17 + 120) + 0.0 < 0.0;
  }
LABEL_20:
  v18 = *(double *)(v13 + 56);
  v19 = *(double *)(v13 + 80);
  v20 = *(double *)(v13 + 88);
  if (v20 >= v18)
    v21 = *(double *)(v13 + 56);
  else
    v21 = *(double *)(v13 + 88);
  if (v21 < 0.0)
    v21 = 0.0;
  if (v20 >= v18 + v19)
    v20 = v18 + v19;
  if (v20 < 0.0)
    v20 = 0.0;
  if (!v14)
  {
LABEL_96:
    a4.n128_u64[0] = *(_QWORD *)(a1 + 120);
    if (a4.n128_f64[0] >= 0.0 || !v14)
      goto LABEL_98;
    goto LABEL_35;
  }
  if (v16 + 0.000001 >= v21)
  {
    if (!(_DWORD)v17)
    {
      if (v16 + -0.000001 <= v20 && vabdd_f64(v16 * 1000.0 * 1000.0, v20 * 1000.0 * 1000.0) >= 1.0)
        goto LABEL_34;
      goto LABEL_96;
    }
    if (vabdd_f64(v16 * 1000.0 * 1000.0, v21 * 1000.0 * 1000.0) >= 1.0)
    {
      if (v16 + -0.000001 <= v20)
      {
LABEL_34:
        a4.n128_u64[0] = *(_QWORD *)(a1 + 104);
        if (*(_BYTE *)(a1 + 162))
          goto LABEL_35;
        v38 = *(double *)(a1 + 112);
        if (v38 <= 0.0)
          goto LABEL_118;
        v39 = *(_QWORD *)(a1 + 56);
        v40 = 0.0;
        if (v39)
          v40 = *(double *)(v39 + 88);
        if (a4.n128_f64[0] + 0.000001 < v40)
        {
LABEL_118:
          if (v38 >= 0.0)
            goto LABEL_35;
          a4.n128_f64[0] = a4.n128_f64[0] + -0.000001;
          if (a4.n128_f64[0] > 0.0)
            goto LABEL_35;
        }
LABEL_98:
        v22 = 1;
        goto LABEL_99;
      }
      goto LABEL_96;
    }
  }
  a4.n128_u64[0] = *(_QWORD *)(a1 + 120);
  if (a4.n128_f64[0] <= 0.0)
    goto LABEL_98;
LABEL_35:
  v22 = 1;
LABEL_99:
  v44 = *(unsigned __int8 *)(a1 + 158);
  *(_BYTE *)(a1 + 158) = v22;
  if (v44 != v22)
  {
    v45 = *(_QWORD *)(a1 + 56);
    if (v45)
    {
      ++*(_DWORD *)(v45 + 8);
      if (((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v45 + 24))(v45, a4) & 1) != 0
        && ((v47 = *(_QWORD *)(v45 + 120)) != 0 && (v48 = *(_QWORD *)(v47 + 8)) != 0
         || (v49 = *(_QWORD *)(v45 + 264)) != 0 && (v48 = *(_QWORD *)(*(_QWORD *)(v49 + 40) + 8)) != 0)
        && (*(_QWORD *)(*(_QWORD *)(v48 + 680) + 712) & 0x800000000000) != 0)
      {
        WebCore::KeyframeEffect::updateEffectStackMembership((WebCore::KeyframeEffect *)v45, v46);
      }
      if (*(_DWORD *)(v45 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
      else
        --*(_DWORD *)(v45 + 8);
    }
  }
}

uint64_t WebCore::WebAnimation::playState(WebCore::WebAnimation *this)
{
  double v1;
  double v2;
  uint64_t v3;
  double v4;

  v1 = *((double *)this + 13);
  if (*((_BYTE *)this + 162))
    return 2;
  v2 = *((double *)this + 14);
  if (v2 > 0.0)
  {
    v3 = *((_QWORD *)this + 7);
    v4 = 0.0;
    if (v3)
      v4 = *(double *)(v3 + 88);
    if (v1 + 0.000001 >= v4)
      return 3;
  }
  if (v2 >= 0.0 || v1 + -0.000001 > 0.0)
    return 1;
  else
    return 3;
}

unint64_t WebCore::DocumentTimeline::currentTime(WebCore::DocumentTimeline *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::DocumentTimelinesController *v16;
  uint64_t v17;
  void *v18;

  v2 = *((_QWORD *)this + 17);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    if (!*(_QWORD *)(v3 + 2936))
    {
      v9 = WTF::fastMalloc((WTF *)0x58);
      *(_DWORD *)v9 = 0;
      *(_OWORD *)(v9 + 8) = 0u;
      *(_OWORD *)(v9 + 24) = 0u;
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)8);
      *v10 = 0;
      *(_QWORD *)(v9 + 40) = v10;
      *(_QWORD *)(v9 + 48) = v3;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 64) = 0;
      *(_QWORD *)(v9 + 72) = 0x7FF8000000000000;
      *(_WORD *)(v9 + 80) = 0;
      v12 = *(_QWORD *)(v3 + 528);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
        {
          v14 = *(_QWORD *)(v13 + 24);
          if (v14)
          {
            v15 = *(_QWORD *)(v14 + 8);
            if (v15)
            {
              if ((*(_QWORD *)(*(_QWORD *)(v15 + 112) + 680) & 0x8000) != 0 && (*(_WORD *)(v15 + 658) & 4) == 0)
                WebCore::DocumentTimelinesController::suspendAnimations((WebCore::DocumentTimelinesController *)v9, v11);
            }
          }
        }
      }
      v16 = *(WebCore::DocumentTimelinesController **)(v3 + 2936);
      *(_QWORD *)(v3 + 2936) = v9;
      if (v16)
      {
        WebCore::DocumentTimelinesController::~DocumentTimelinesController(v16, v11);
        if (*(_DWORD *)v17)
        {
          *(_QWORD *)(v17 + 80) = 0;
          *(_OWORD *)(v17 + 48) = 0u;
          *(_OWORD *)(v17 + 64) = 0u;
          *(_OWORD *)(v17 + 16) = 0u;
          *(_OWORD *)(v17 + 32) = 0u;
          *(_OWORD *)v17 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v17, v18);
        }
      }
    }
    v4 = *(_QWORD *)(v3 + 2936);
    if (*(_QWORD *)(*(_QWORD *)(v4 + 48) + 696))
    {
      v5 = *(double *)(v4 + 72) - *((double *)this + 18);
      LOBYTE(v6) = LOBYTE(v5);
      v7 = *(_QWORD *)&v5 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      LOBYTE(v6) = 0;
      v7 = 0;
    }
  }
  else
  {
    v6 = *((_QWORD *)this + 6);
    v7 = v6 & 0xFFFFFFFFFFFFFF00;
  }
  return v7 | v6;
}

void WebCore::WebAnimation::updateRelevance(WebCore::WebAnimation *this, __n128 a2)
{
  uint64_t v3;
  int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  _BYTE v15[8];
  unint64_t v16;
  char v17;

  v3 = *((_QWORD *)this + 7);
  if (!v3 || *((_BYTE *)this + 163) == 1)
  {
    v5 = 0;
    goto LABEL_11;
  }
  WebCore::AnimationEffect::getBasicTiming(v3, (uint64_t)v15);
  if (v17 == 1)
  {
    a2.n128_u64[0] = *((_QWORD *)this + 13);
    if (!*((_BYTE *)this + 162))
    {
      v12 = *((double *)this + 14);
      if (v12 > 0.0)
      {
        v13 = *((_QWORD *)this + 7);
        v14 = 0.0;
        if (v13)
          v14 = *(double *)(v13 + 88);
        if (a2.n128_f64[0] + 0.000001 >= v14)
          goto LABEL_10;
      }
      if (v12 < 0.0)
      {
        a2.n128_f64[0] = a2.n128_f64[0] + -0.000001;
        if (a2.n128_f64[0] <= 0.0)
          goto LABEL_10;
      }
    }
LABEL_14:
    v5 = 1;
    goto LABEL_11;
  }
  a2.n128_u64[0] = *((_QWORD *)this + 15);
  if (!v17 && a2.n128_f64[0] > 0.0)
    goto LABEL_14;
  if (a2.n128_f64[0] < 0.0 && v17 == 2)
    goto LABEL_14;
LABEL_10:
  a2.n128_u64[0] = v16;
  v5 = 1;
LABEL_11:
  v6 = *((unsigned __int8 *)this + 158);
  *((_BYTE *)this + 158) = v5;
  if (v6 != v5)
  {
    v7 = *((_QWORD *)this + 7);
    if (v7)
    {
      ++*(_DWORD *)(v7 + 8);
      if (((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v7 + 24))(v7, a2) & 1) != 0
        && ((v9 = *(_QWORD *)(v7 + 120)) != 0 && (v10 = *(_QWORD *)(v9 + 8)) != 0
         || (v11 = *(_QWORD *)(v7 + 264)) != 0 && (v10 = *(_QWORD *)(*(_QWORD *)(v11 + 40) + 8)) != 0)
        && (*(_QWORD *)(*(_QWORD *)(v10 + 680) + 712) & 0x800000000000) != 0)
      {
        WebCore::KeyframeEffect::updateEffectStackMembership((WebCore::KeyframeEffect *)v7, v8);
      }
      if (*(_DWORD *)(v7 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      else
        --*(_DWORD *)(v7 + 8);
    }
  }
}

void WebCore::KeyframeEffect::updateEffectStackMembership(WebCore::KeyframeEffect *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WebCore::KeyframeEffectStack *v17;
  WTF *v18;
  void *v19;
  WTF::StringImpl *v20;
  WebCore::KeyframeEffectStack *v21;
  WTF *v22;
  void *v23;
  _QWORD v24[2];
  int v25;
  _DWORD *v26;
  char v27;
  uint64_t v28;
  int v29;
  WTF::StringImpl *v30;
  char v31;
  char v32;

  v3 = *((_QWORD *)this + 33);
  if (v3)
  {
    v4 = *((unsigned __int8 *)this + 288);
    if (*((_BYTE *)this + 288))
    {
      v5 = *((_DWORD *)this + 68);
      v6 = (WTF::StringImpl *)*((_QWORD *)this + 35);
      if (v6)
        *(_DWORD *)v6 += 2;
      v28 = v3;
      v29 = v5;
      v30 = v6;
      v31 = 1;
    }
    else
    {
      v28 = v3;
      LOBYTE(v29) = 0;
      v31 = 0;
    }
    v32 = 1;
    LOBYTE(v25) = 0;
    v27 = 0;
    *(_DWORD *)(v3 + 24) += 2;
    v24[0] = this;
    v24[1] = v3;
    if (v4)
    {
      v25 = *((_DWORD *)this + 68);
      v7 = (_DWORD *)*((_QWORD *)this + 35);
      if (v7)
        *v7 += 2;
      v26 = v7;
      v27 = 1;
    }
    v8 = *((_QWORD *)this + 12);
    if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0 && *(_BYTE *)(v9 + 158))
    {
      if (!*((_BYTE *)this + 328))
      {
        v12 = (uint64_t *)WebCore::Element::ensureAnimationRareData(v3, &v29);
        v13 = *v12;
        if (!*v12)
        {
          v13 = WTF::fastMalloc((WTF *)0x50);
          *(_OWORD *)v13 = 0u;
          *(_OWORD *)(v13 + 16) = 0u;
          *(_OWORD *)(v13 + 32) = 0u;
          *(_OWORD *)(v13 + 48) = 0u;
          *(_QWORD *)(v13 + 64) = 0;
          *(_BYTE *)(v13 + 72) = 1;
          v17 = (WebCore::KeyframeEffectStack *)*v12;
          *v12 = v13;
          if (v17)
          {
            WebCore::KeyframeEffectStack::~KeyframeEffectStack(v17, v16);
            WTF::fastFree(v18, v19);
            v13 = *v12;
          }
        }
        WebCore::KeyframeEffectStack::addEffect((WTF::StringImpl *)v13, this);
      }
    }
    else if (*((_BYTE *)this + 328))
    {
      v14 = (uint64_t *)WebCore::Element::ensureAnimationRareData(v3, &v29);
      v15 = *v14;
      if (!*v14)
      {
        v15 = WTF::fastMalloc((WTF *)0x50);
        *(_OWORD *)v15 = 0u;
        *(_OWORD *)(v15 + 16) = 0u;
        *(_OWORD *)(v15 + 32) = 0u;
        *(_OWORD *)(v15 + 48) = 0u;
        *(_QWORD *)(v15 + 64) = 0;
        *(_BYTE *)(v15 + 72) = 1;
        v21 = (WebCore::KeyframeEffectStack *)*v14;
        *v14 = v15;
        if (v21)
        {
          WebCore::KeyframeEffectStack::~KeyframeEffectStack(v21, v20);
          WTF::fastFree(v22, v23);
          v15 = *v14;
        }
      }
      WebCore::KeyframeEffectStack::removeEffect((WebCore::KeyframeEffectStack *)v15, this);
    }
    WebCore::KeyframeEffect::StackMembershipMutationScope::~StackMembershipMutationScope((WebCore::KeyframeEffect::StackMembershipMutationScope *)v24, a2);
    if (v32)
    {
      if (v31)
      {
        v11 = v30;
        v30 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v10);
          else
            *(_DWORD *)v11 -= 2;
        }
      }
    }
  }
}

void WebCore::KeyframeEffect::StackMembershipMutationScope::~StackMembershipMutationScope(WebCore::KeyframeEffect::StackMembershipMutationScope *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  char v3;
  char v4;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 canBeAccelerated;
  WebCore::WebAnimation *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  WTF::StringImpl *v22;
  uint64_t *v23;
  WTF::StringImpl *v24;
  int v25;
  int v26;
  WTF::StringImpl *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  WTF::StringImpl *v34;
  char v35;
  char v36;
  uint64_t v37;
  int v38;
  WTF::StringImpl *v39;
  char v40;
  char v41;

  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    if (*((_BYTE *)this + 32))
    {
      v7 = *((_DWORD *)this + 4);
      v2 = (WTF::StringImpl *)*((_QWORD *)this + 3);
      if (v2)
        *(_DWORD *)v2 += 2;
      v3 = 0;
      v37 = v6;
      v38 = v7;
      v39 = v2;
      v4 = 1;
      v40 = 1;
      v8 = 1;
    }
    else
    {
      v4 = 0;
      v37 = *((_QWORD *)this + 1);
      LOBYTE(v38) = 0;
      v3 = 1;
      v8 = 1;
      v40 = 0;
    }
  }
  else
  {
    v8 = 0;
    LOBYTE(v37) = 0;
  }
  v41 = v8;
  v9 = *(_QWORD *)this;
  v10 = *(_QWORD *)(*(_QWORD *)this + 120);
  if ((!v10 || (v11 = *(_QWORD *)(v10 + 8)) == 0)
    && ((v14 = *(_QWORD *)(v9 + 264)) == 0 || (v11 = *(_QWORD *)(*(_QWORD *)(v14 + 40) + 8)) == 0)
    || (*(_QWORD *)(*(_QWORD *)(v11 + 680) + 712) & 0x800000000000) == 0)
  {
    if (*(_BYTE *)(v9 + 310) != 1)
      goto LABEL_10;
LABEL_36:
    v31 = v6;
    v18 = *(_QWORD *)(v9 + 264);
    if (v18)
    {
      v19 = v9;
      v20 = *(unsigned __int8 *)(v9 + 288);
      if (v20)
      {
        v21 = *(_DWORD *)(v19 + 272);
        v22 = *(WTF::StringImpl **)(v19 + 280);
        if (v22)
          *(_DWORD *)v22 += 2;
        v32 = v18;
        v33 = v21;
        v34 = v22;
        v35 = 1;
      }
      else
      {
        v32 = v18;
        LOBYTE(v33) = 0;
        v35 = 0;
      }
      v36 = 1;
      if (v31 && v37 == v18)
      {
        if (v20 == 0 || (v4 & 1) == 0)
        {
          v28 = v4 ^ (v20 != 0);
          std::optional<WebCore::Styleable const>::~optional((uint64_t)&v32, a2);
          if ((v28 & 1) == 0)
            goto LABEL_45;
        }
        else
        {
          v25 = v38;
          v26 = v33;
          v27 = v34;
          std::optional<WebCore::Styleable const>::~optional((uint64_t)&v32, a2);
          if (v25 == v26 && v2 == v27)
            goto LABEL_45;
        }
      }
      else
      {
        std::optional<WebCore::Styleable const>::~optional((uint64_t)&v32, a2);
      }
    }
    else
    {
      LOBYTE(v32) = 0;
      v36 = 0;
      std::optional<WebCore::Styleable const>::~optional((uint64_t)&v32, a2);
      if (!v31)
        goto LABEL_45;
    }
    WebCore::KeyframeEffect::updateAssociatedThreadedEffectStack(*(uint64_t **)this, (uint64_t)&v37);
LABEL_45:
    v23 = *(uint64_t **)this;
    LOBYTE(v32) = 0;
    v36 = 0;
    WebCore::KeyframeEffect::updateAssociatedThreadedEffectStack(v23, (uint64_t)&v32);
    std::optional<WebCore::Styleable const>::~optional((uint64_t)&v32, v24);
    v6 = v31;
    goto LABEL_10;
  }
  if (*(_BYTE *)(v9 + 328))
  {
    v29 = *(_QWORD *)this;
    v30 = v6;
    canBeAccelerated = WebCore::KeyframeEffect::canBeAccelerated((WebCore::KeyframeEffect *)v9);
    v6 = v30;
    if (canBeAccelerated)
    {
      v16 = *(WebCore::WebAnimation **)(*(_QWORD *)(v29 + 96) + 8);
      if (!*((_BYTE *)v16 + 156))
      {
        v17 = WebCore::WebAnimation::playState(v16);
        v6 = v30;
        if (v17 == 1)
        {
          v9 = *(_QWORD *)this;
          goto LABEL_36;
        }
      }
    }
  }
LABEL_10:
  if (!(v3 & 1 | (v2 == 0)) && v6)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  if (*((_BYTE *)this + 32))
  {
    v12 = (WTF::StringImpl *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, a2);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  v13 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v13);
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
  }
}

uint64_t WebCore::WebAnimation::resolve(uint64_t a1, WebCore::RenderStyle *a2, uint64_t a3, uint64_t a4, char a5, __n128 a6)
{
  uint64_t v11;

  if (!*(_BYTE *)(a1 + 159))
    WebCore::WebAnimation::updateFinishedState(a1, 0, 0, a6);
  *(_BYTE *)(a1 + 159) = 0;
  v11 = *(_QWORD *)(a1 + 56);
  if (v11 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11))
    return WebCore::KeyframeEffect::apply(v11, a2, a3, a4, a5);
  else
    return 0;
}

uint64_t WebCore::KeyframeEffect::isKeyframeEffect(WebCore::KeyframeEffect *this)
{
  return 1;
}

WTF::StringImpl *WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::resolve(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  char v20;

  v3 = result;
  if (*((_BYTE *)result + 32))
  {
    LOBYTE(v18) = 0;
    v20 = 0;
    result = (WTF::StringImpl *)std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)&v18, (uint64_t)result + 8);
    if (v20)
    {
      result = v19;
      v19 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *((_BYTE *)result + 8) = 0;
    *((_BYTE *)result + 24) = 0;
    *((_BYTE *)result + 32) = 1;
  }
  v4 = *((unsigned int *)v3 + 13);
  v18 = (WTF::StringImpl *)&v20;
  LODWORD(v19) = 1;
  HIDWORD(v19) = v4;
  if (v4 >= 2)
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v9 = v4;
    result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v4));
    LODWORD(v19) = v9;
    v18 = result;
    v4 = *((unsigned int *)v3 + 13);
  }
  else
  {
    result = (WTF::StringImpl *)&v20;
  }
  if ((_DWORD)v4)
  {
    v10 = (uint64_t *)*((_QWORD *)v3 + 5);
    v11 = 8 * v4;
    v12 = result;
    do
    {
      v13 = *v10++;
      ++*(_DWORD *)(v13 + 16);
      *(_QWORD *)v12 = v13;
      v12 = (WTF::StringImpl *)((char *)v12 + 8);
      v11 -= 8;
    }
    while (v11);
  }
  if (HIDWORD(v19))
  {
    v6 = (uint64_t *)result;
    v7 = 8 * HIDWORD(v19);
    do
    {
      v8 = *v6++;
      WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::WebAnimation>>(v8, a2);
      v7 -= 8;
    }
    while (v7);
    result = v18;
    if (HIDWORD(v19))
    {
      v14 = 8 * HIDWORD(v19);
      v15 = v18;
      do
      {
        v16 = *(_DWORD **)v15;
        *(_QWORD *)v15 = 0;
        if (v16)
        {
          v17 = v15;
          if (v16[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
          else
            --v16[4];
          v15 = v17;
        }
        v15 = (WTF::StringImpl *)((char *)v15 + 8);
        v14 -= 8;
      }
      while (v14);
      result = v18;
    }
  }
  if (&v20 != (char *)result && result != 0)
  {
    v18 = 0;
    LODWORD(v19) = 0;
    return (WTF::StringImpl *)WTF::fastFree(result, a2);
  }
  return result;
}

void WebCore::KeyframeEffect::animationTimelineDidChange(WebCore::KeyframeEffect *this, WebCore::AnimationTimeline *a2)
{
  WebCore::Node *v3;
  int v5;
  int v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WebCore::KeyframeEffectStack *v15;
  WTF *v16;
  void *v17;
  _QWORD v18[2];
  int v19;
  _DWORD *v20;
  char v21;
  WebCore::Node *v22;
  int v23;
  WTF::StringImpl *v24;
  char v25;
  char v26;

  v3 = (WebCore::Node *)*((_QWORD *)this + 33);
  if (v3)
  {
    v5 = *((unsigned __int8 *)this + 288);
    if (*((_BYTE *)this + 288))
    {
      v6 = *((_DWORD *)this + 68);
      v7 = (WTF::StringImpl *)*((_QWORD *)this + 35);
      if (v7)
        *(_DWORD *)v7 += 2;
      v22 = v3;
      v23 = v6;
      v24 = v7;
      v25 = 1;
    }
    else
    {
      v22 = v3;
      LOBYTE(v23) = 0;
      v25 = 0;
    }
    v26 = 1;
    LOBYTE(v19) = 0;
    v21 = 0;
    *((_DWORD *)v3 + 6) += 2;
    v18[0] = this;
    v18[1] = v3;
    if (v5)
    {
      v19 = *((_DWORD *)this + 68);
      v8 = (_DWORD *)*((_QWORD *)this + 35);
      if (v8)
        *v8 += 2;
      v20 = v8;
      v21 = 1;
    }
    v9 = (uint64_t *)WebCore::Element::ensureAnimationRareData(v3, (uint64_t)&v23);
    v10 = *v9;
    if (!*v9)
    {
      v10 = WTF::fastMalloc((WTF *)0x50);
      *(_OWORD *)v10 = 0u;
      *(_OWORD *)(v10 + 16) = 0u;
      *(_OWORD *)(v10 + 32) = 0u;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_QWORD *)(v10 + 64) = 0;
      *(_BYTE *)(v10 + 72) = 1;
      v15 = (WebCore::KeyframeEffectStack *)*v9;
      *v9 = v10;
      if (v15)
      {
        WebCore::KeyframeEffectStack::~KeyframeEffectStack(v15, v14);
        WTF::fastFree(v16, v17);
        v10 = *v9;
      }
    }
    if (a2)
      WebCore::KeyframeEffectStack::addEffect((WTF::StringImpl *)v10, this);
    else
      WebCore::KeyframeEffectStack::removeEffect((WebCore::KeyframeEffectStack *)v10, this);
    WebCore::KeyframeEffect::StackMembershipMutationScope::~StackMembershipMutationScope((WebCore::KeyframeEffect::StackMembershipMutationScope *)v18, v11);
    if (v26)
    {
      if (v25)
      {
        v13 = v24;
        v24 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v12);
          else
            *(_DWORD *)v13 -= 2;
        }
      }
    }
  }
}

WTF::StringImpl *WebCore::KeyframeEffectStack::addEffect(WTF::StringImpl *this, WebCore::KeyframeEffect *a2)
{
  WTF::StringImpl *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF *v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int **v35;
  unsigned int **v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int **v41;

  if (!*((_QWORD *)a2 + 33))
    return 0;
  v3 = this;
  v4 = *((unsigned __int8 *)a2 + 288);
  if (*((_BYTE *)a2 + 288))
  {
    this = (WTF::StringImpl *)*((_QWORD *)a2 + 35);
    if (this)
      *(_DWORD *)this += 2;
  }
  v5 = *((_QWORD *)a2 + 12);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 8)) == 0 || !*(_QWORD *)(v6 + 64))
  {
    v8 = 0;
    if (!v4 || !this)
      return (WTF::StringImpl *)v8;
    if (*(_DWORD *)this != 2)
    {
      v8 = 0;
      *(_DWORD *)this -= 2;
      return (WTF::StringImpl *)v8;
    }
    WTF::StringImpl::destroy(this, a2);
    return 0;
  }
  v7 = *(unsigned __int8 *)(v6 + 158);
  if (v4 && this)
  {
    if (*(_DWORD *)this == 2)
      this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, a2);
    else
      *(_DWORD *)this -= 2;
  }
  if (!v7)
    return 0;
  v9 = *((unsigned int *)v3 + 3);
  if ((_DWORD)v9 != *((_DWORD *)v3 + 2))
  {
    v25 = *(WTF **)v3;
    v26 = *((_QWORD *)a2 + 2);
    if (v26)
      goto LABEL_77;
    v26 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v26 = 1;
    *(_QWORD *)(v26 + 8) = a2;
    v27 = (unsigned int *)*((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v26;
    if (!v27)
      goto LABEL_77;
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      atomic_store(1u, v27);
      WTF::fastFree((WTF *)v27, a2);
    }
    v26 = *((_QWORD *)a2 + 2);
    if (v26)
    {
LABEL_77:
      do
        v30 = __ldaxr((unsigned int *)v26);
      while (__stlxr(v30 + 1, (unsigned int *)v26));
    }
    *((_QWORD *)v25 + v9) = v26;
    goto LABEL_36;
  }
  v10 = v9 + (v9 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v9 + 1)
    v12 = v9 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = *(WTF **)v3;
    v14 = (WTF *)WTF::fastMalloc((WTF *)(8 * v12));
    *((_DWORD *)v3 + 2) = v12;
    *(_QWORD *)v3 = v14;
    if ((_DWORD)v9)
    {
      v35 = (unsigned int **)((char *)v13 + 8 * v9);
      v36 = (unsigned int **)v13;
      do
      {
        v37 = *v36;
        *v36 = 0;
        *(_QWORD *)v14 = v37;
        v38 = *v36;
        *v36 = 0;
        if (v38)
        {
          do
          {
            v39 = __ldaxr(v38);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, v38));
          if (!v40)
          {
            atomic_store(1u, v38);
            v41 = v36;
            WTF::fastFree((WTF *)v38, a2);
            v36 = v41;
          }
        }
        v14 = (WTF *)((char *)v14 + 8);
        ++v36;
      }
      while (v36 != v35);
      v14 = *(WTF **)v3;
    }
    if (v13)
    {
      if (v14 == v13)
      {
        *(_QWORD *)v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      WTF::fastFree(v13, a2);
      v14 = *(WTF **)v3;
    }
    v15 = *((unsigned int *)v3 + 3);
    v16 = *((_QWORD *)a2 + 2);
    if (v16)
      goto LABEL_78;
    v16 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = a2;
    v17 = (unsigned int *)*((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v16;
    if (!v17)
      goto LABEL_78;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, a2);
    }
    v16 = *((_QWORD *)a2 + 2);
    if (v16)
    {
LABEL_78:
      do
        v20 = __ldaxr((unsigned int *)v16);
      while (__stlxr(v20 + 1, (unsigned int *)v16));
    }
    *((_QWORD *)v14 + v15) = v16;
LABEL_36:
    v21 = *((_DWORD *)v3 + 3) + 1;
    *((_DWORD *)v3 + 3) = v21;
    *((_BYTE *)v3 + 72) = 0;
    if (v21 >= 2 && WebCore::KeyframeEffect::preventsAcceleration(a2, a2))
    {
      v31 = *((unsigned int *)v3 + 3);
      if ((_DWORD)v31)
      {
        v32 = *(WTF **)v3;
        v33 = 8 * v31;
        do
        {
          if (*(_QWORD *)v32)
            v34 = *(_QWORD *)(*(_QWORD *)v32 + 8);
          else
            v34 = 0;
          WebCore::KeyframeEffect::addPendingAcceleratedAction(v34, 4);
          v32 = (WTF *)((char *)v32 + 8);
          v33 -= 8;
        }
        while (v33);
      }
    }
    v8 = 1;
    *((_BYTE *)a2 + 328) = 1;
    v22 = *((_QWORD *)a2 + 33);
    if (v22)
    {
      if (*((_BYTE *)a2 + 288) && (v23 = (WTF::StringImpl *)*((_QWORD *)a2 + 35)) != 0)
      {
        *(_DWORD *)v23 += 2;
        WebCore::Node::invalidateStyle(v22, 1u, 0);
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v24);
        else
          *(_DWORD *)v23 -= 2;
      }
      else
      {
        WebCore::Node::invalidateStyle(v22, 1u, 0);
      }
    }
    return (WTF::StringImpl *)v8;
  }
  __break(0xC471u);
  return this;
}

WebCore::StyleOriginatedAnimation *WebCore::CSSAnimation::CSSAnimation(WebCore::CSSAnimation *this, const WebCore::Styleable *a2, const WebCore::Animation *a3)
{
  WebCore::StyleOriginatedAnimation *result;
  _DWORD *v5;

  result = WebCore::StyleOriginatedAnimation::StyleOriginatedAnimation(this, a2, a3);
  *(_QWORD *)result = off_1E338C8D0;
  *((_QWORD *)result + 4) = &unk_1E338CA50;
  v5 = (_DWORD *)*((_QWORD *)a3 + 4);
  if (v5)
    *v5 += 2;
  *((_QWORD *)result + 29) = v5;
  *((_WORD *)result + 120) = 0;
  return result;
}

WebCore::WebAnimation *WebCore::WebAnimation::WebAnimation(WebCore::WebAnimation *this, WebCore::Document *a2)
{
  WebCore::Document *v2;
  char *v4;
  uint64_t v5;
  WebCore::Document *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  int64x2_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  WebCore::WebAnimation **v18;
  WebCore::WebAnimation *v19;
  WebCore::WebAnimation **v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v27;
  uint64_t v28;
  char *v29;

  v2 = a2;
  *((_DWORD *)this + 6) = 1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &unk_1E33A4FC0;
  v4 = (char *)this + 32;
  v5 = *((_QWORD *)a2 + 88);
  if (v5)
  {
    v6 = *(WebCore::Document **)(v5 + 8);
    if (v6)
      v2 = v6;
  }
  *((_QWORD *)this + 4) = &off_1E33A18C0;
  *((_QWORD *)this + 5) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::WebAnimation *)((char *)this + 32), (WebCore::Document *)((char *)v2 + 192));
  *((_QWORD *)this + 4) = &off_1E33A0540;
  *((_QWORD *)this + 6) = 0;
  if (*((_BYTE *)v2 + 470))
  {
    __break(0xC471u);
    JUMPOUT(0x1943EC14CLL);
  }
  v29 = v4;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v2 + 40, (uint64_t *)&v29, (uint64_t)&v28);
  *(_QWORD *)this = off_1E3391E30;
  *((_QWORD *)this + 4) = &unk_1E3391FA0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  v7 = WTF::fastMalloc((WTF *)0x40);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = off_1E3392078;
  v8[1] = WebCore::WebAnimation::readyPromiseResolve;
  v8[2] = 0;
  v8[3] = this;
  *(_QWORD *)v7 = v8;
  *(_BYTE *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = v7 + 56;
  *(_QWORD *)(v7 + 48) = 1;
  *((_QWORD *)this + 9) = v7;
  v9 = WTF::fastMalloc((WTF *)0x40);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = off_1E3392078;
  v10[1] = WebCore::WebAnimation::finishedPromiseResolve;
  v10[2] = 0;
  v10[3] = this;
  *(_QWORD *)v9 = v10;
  *(_BYTE *)(v9 + 8) = 0;
  *(_BYTE *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v9 + 56;
  *(_QWORD *)(v9 + 48) = 1;
  *((_QWORD *)this + 10) = v9;
  v11 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)((char *)this + 88) = v11;
  *(int64x2_t *)((char *)this + 104) = v11;
  *((_QWORD *)this + 15) = 0x3FF0000000000000;
  *((_BYTE *)this + 128) = 0;
  *((_DWORD *)this + 33) = 1;
  *((_BYTE *)this + 136) = 0;
  *((_BYTE *)this + 140) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_BYTE *)this + 156) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_DWORD *)this + 40) = 0;
  {
    v12 = WebCore::WebAnimation::instances(void)::instances;
    if (WebCore::WebAnimation::instances(void)::instances)
    {
LABEL_7:
      v13 = *(_DWORD *)(v12 - 8);
      goto LABEL_8;
    }
  }
  else
  {
    WebCore::WebAnimation::instances(void)::instances = 0;
  }
  WTF::HashTable<WebCore::WebAnimation *,WebCore::WebAnimation *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::WebAnimation *>,WTF::HashTraits<WebCore::WebAnimation *>,WTF::HashTraits<WebCore::WebAnimation *>>::expand();
  v12 = WebCore::WebAnimation::instances(void)::instances;
  if (WebCore::WebAnimation::instances(void)::instances)
    goto LABEL_7;
  v13 = 0;
LABEL_8:
  v14 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = v13 & ((v16 >> 31) ^ v16);
  v18 = (WebCore::WebAnimation **)(v12 + 8 * v17);
  v19 = *v18;
  if (!*v18)
  {
LABEL_16:
    *v18 = this;
    if (WebCore::WebAnimation::instances(void)::instances)
      v22 = *(_DWORD *)(WebCore::WebAnimation::instances(void)::instances - 12) + 1;
    else
      v22 = 1;
    *(_DWORD *)(WebCore::WebAnimation::instances(void)::instances - 12) = v22;
    if (WebCore::WebAnimation::instances(void)::instances)
      v23 = *(_DWORD *)(WebCore::WebAnimation::instances(void)::instances - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(WebCore::WebAnimation::instances(void)::instances - 16) + v23);
    v25 = *(unsigned int *)(WebCore::WebAnimation::instances(void)::instances - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24)
        return this;
    }
    else
    {
      if (3 * v25 > 4 * v24)
        return this;
      if (!(_DWORD)v25)
      {
        v27 = 8;
LABEL_28:
        WTF::HashTable<WebCore::WebAnimation *,WebCore::WebAnimation *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::WebAnimation *>,WTF::HashTraits<WebCore::WebAnimation *>,WTF::HashTraits<WebCore::WebAnimation *>>::rehash(v27);
        return this;
      }
    }
    v27 = (_DWORD)v25 << (6 * *(_DWORD *)(WebCore::WebAnimation::instances(void)::instances - 12) >= (2 * v25));
    goto LABEL_28;
  }
  v20 = 0;
  v21 = 1;
  while (v19 != this)
  {
    if (v19 == (WebCore::WebAnimation *)-1)
      v20 = v18;
    v17 = (v17 + v21) & v13;
    v18 = (WebCore::WebAnimation **)(v12 + 8 * v17);
    v19 = *v18;
    ++v21;
    if (!*v18)
    {
      if (v20)
      {
        *v20 = 0;
        --*(_DWORD *)(WebCore::WebAnimation::instances(void)::instances - 16);
        v18 = v20;
      }
      goto LABEL_16;
    }
  }
  return this;
}

_DWORD *WTF::HashTable<WebCore::WebAnimation *,WebCore::WebAnimation *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::WebAnimation *>,WTF::HashTraits<WebCore::WebAnimation *>,WTF::HashTraits<WebCore::WebAnimation *>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  _DWORD *result;
  void *v6;
  uint64_t i;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  int v14;

  v2 = WebCore::WebAnimation::instances(void)::instances;
  if (WebCore::WebAnimation::instances(void)::instances)
  {
    v3 = *(_DWORD *)(WebCore::WebAnimation::instances(void)::instances - 4);
    v4 = *(_DWORD *)(WebCore::WebAnimation::instances(void)::instances - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(8 * a1 + 16));
  WebCore::WebAnimation::instances(void)::instances = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(WebCore::WebAnimation::instances(void)::instances - 12) = v4;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v8 = *(_QWORD *)(v2 + 8 * i);
      if ((unint64_t)(v8 + 1) >= 2)
      {
        if (WebCore::WebAnimation::instances(void)::instances)
          v9 = *(_DWORD *)(WebCore::WebAnimation::instances(void)::instances - 8);
        else
          v9 = 0;
        v10 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
        v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
        v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
        v13 = (_DWORD *)(v9 & ((v12 >> 31) ^ v12));
        v14 = 1;
        do
        {
          result = v13;
          v6 = *(void **)(WebCore::WebAnimation::instances(void)::instances + 8 * v13);
          v13 = (_DWORD *)(((_DWORD)v13 + v14++) & v9);
        }
        while (v6);
        *(_QWORD *)(WebCore::WebAnimation::instances(void)::instances + 8 * result) = v8;
      }
    }
  }
  if (v2)
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  return result;
}

_DWORD *WTF::HashTable<WebCore::WebAnimation *,WebCore::WebAnimation *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::WebAnimation *>,WTF::HashTraits<WebCore::WebAnimation *>,WTF::HashTraits<WebCore::WebAnimation *>>::expand()
{
  int v0;

  if (WebCore::WebAnimation::instances(void)::instances
    && (v0 = *(_DWORD *)(WebCore::WebAnimation::instances(void)::instances - 4)) != 0)
  {
    return WTF::HashTable<WebCore::WebAnimation *,WebCore::WebAnimation *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::WebAnimation *>,WTF::HashTraits<WebCore::WebAnimation *>,WTF::HashTraits<WebCore::WebAnimation *>>::rehash(v0 << (6 * *(_DWORD *)(WebCore::WebAnimation::instances(void)::instances - 12) >= (2 * v0)));
  }
  else
  {
    return WTF::HashTable<WebCore::WebAnimation *,WebCore::WebAnimation *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::WebAnimation *>,WTF::HashTraits<WebCore::WebAnimation *>,WTF::HashTraits<WebCore::WebAnimation *>>::rehash(8u);
  }
}

_DWORD *WebCore::RenderStyle::setPaddingRight(uint64_t a1, WebCore::Length *a2)
{
  _DWORD *result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  float v7;
  float v8;
  WTF *v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  int v13;
  char isCalculatedEqual;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;

  v4 = *(_QWORD *)(a1 + 8);
  result = (_DWORD *)(a1 + 8);
  v5 = *(unsigned __int8 **)(v4 + 24);
  v6 = v5[84];
  if (v6 != *((unsigned __int8 *)a2 + 4) || (v5[85] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_10;
  if (v6 == 13)
    return result;
  if (v6 == 11)
  {
    v16 = result;
    isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 80), a2);
    result = v16;
    if ((isCalculatedEqual & 1) == 0)
      goto LABEL_10;
  }
  else
  {
    v7 = *((float *)v5 + 20);
    if (!v5[86])
      v7 = (float)SLODWORD(v7);
    v8 = *(float *)a2;
    if (!*((_BYTE *)a2 + 6))
      v8 = (float)*(int *)a2;
    if (v7 != v8)
    {
LABEL_10:
      v9 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
      result = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v9 + 3);
      v10 = result + 20;
      if (result + 20 == (_DWORD *)a2)
        return result;
      if (*((_BYTE *)result + 84) == 11)
      {
        v17 = result;
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v15 = result + 20;
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v10);
        v10 = v15;
        result = v17;
      }
      v11 = *((unsigned __int8 *)a2 + 4);
      *((_BYTE *)result + 84) = v11;
      *((_BYTE *)result + 85) = *((_BYTE *)a2 + 5);
      if (v11 - 2 >= 9)
      {
        if (v11 > 0xD)
          goto LABEL_15;
        if (((1 << v11) & 0x3003) != 0)
        {
          *v10 = 0;
          goto LABEL_15;
        }
        if (v11 != 11)
          goto LABEL_15;
        v13 = *(_DWORD *)a2;
        *(_DWORD *)a2 = 0;
      }
      else
      {
        v12 = *((unsigned __int8 *)a2 + 6);
        *((_BYTE *)result + 86) = v12;
        if (v12)
        {
          *v10 = *(_DWORD *)a2;
LABEL_15:
          *((_BYTE *)a2 + 4) = 0;
          return result;
        }
        v13 = *(_DWORD *)a2;
      }
      *v10 = v13;
      goto LABEL_15;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::RenderStyle::setContent(WTF **this, const WTF::String *a2, int a3)
{
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WebCore::StyleMiscNonInheritedData *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *result;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  const WTF::AtomString *v17;
  WTF *v18;
  void *v19;
  uint64_t v20;

  v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(this + 1);
  v6 = *((_QWORD *)v5 + 4);
  if (*(_DWORD *)v6 != 1)
  {
    v7 = v5;
    WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v5 + 4), &v20);
    v6 = v20;
    v9 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v7 + 4);
    *((_QWORD *)v7 + 4) = v20;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v9, v8);
        WTF::fastFree(v18, v19);
        v6 = *((_QWORD *)v7 + 4);
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
  }
  if (a3 && (v10 = *(_QWORD *)(v6 + 80)) != 0)
  {
    do
    {
      v11 = v10;
      v10 = *(_QWORD *)(v10 + 8);
    }
    while (v10);
    result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
    *((_QWORD *)result + 1) = 0;
    *((_QWORD *)result + 2) = 0;
    *((_DWORD *)result + 6) = 3;
    *(_QWORD *)result = off_1E34419E8;
    v13 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v13 += 2;
    *((_QWORD *)result + 4) = v13;
    v14 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)(v11 + 8) = result;
    if (v14)
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  else
  {
    result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
    *((_QWORD *)result + 1) = 0;
    *((_QWORD *)result + 2) = 0;
    *((_DWORD *)result + 6) = 3;
    *(_QWORD *)result = off_1E34419E8;
    v15 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v15 += 2;
    *((_QWORD *)result + 4) = v15;
    v16 = *(_QWORD *)(v6 + 80);
    *(_QWORD *)(v6 + 80) = result;
    if (v16)
      result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = *(const WTF::AtomString **)(v6 + 96);
    if (v17)
      return WebCore::FormSubmission::Attributes::setTarget(*(WebCore::FormSubmission::Attributes **)(v6 + 80), v17);
  }
  return result;
}

uint64_t WebCore::RenderStyle::setOpacity(WebCore::RenderStyle *this, float a2)
{
  float v2;
  float v3;
  uint64_t result;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WebCore::StyleMiscNonInheritedData *v8;
  WTF *v9;
  void *v10;
  uint64_t v11;

  v2 = 0.0;
  if (a2 > 0.0)
    v2 = a2;
  if (a2 >= 1.0)
    v3 = 1.0;
  else
    v3 = v2;
  v5 = *((_QWORD *)this + 1);
  result = (uint64_t)this + 8;
  if (*(float *)(*(_QWORD *)(v5 + 32) + 4) != v3)
  {
    v6 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    result = *((_QWORD *)v6 + 4);
    if (*(_DWORD *)result != 1)
    {
      WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)result, &v11);
      result = v11;
      v8 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v6 + 4);
      *((_QWORD *)v6 + 4) = v11;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v8, v7);
          WTF::fastFree(v9, v10);
          result = *((_QWORD *)v6 + 4);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
    }
    *(float *)(result + 4) = v3;
  }
  return result;
}

int *WebCore::StyleMiscNonInheritedData::copy@<X0>(WebCore::StyleMiscNonInheritedData *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  WebCore::ContentData *v17;
  const WebCore::ShadowData *v18;
  uint64_t v19;
  _DWORD *v20;
  char v21;
  int *v22;
  unsigned int v23;
  int v24;
  int *result;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  WebCore::ShadowData *v41;

  v4 = WTF::fastMalloc((WTF *)0x98);
  *(_DWORD *)v4 = 1;
  v5 = (_DWORD *)*((_QWORD *)this + 1);
  v6 = (_DWORD *)*((_QWORD *)this + 2);
  ++*v5;
  ++*v6;
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = v6;
  v7 = (_DWORD *)*((_QWORD *)this + 3);
  v8 = (_DWORD *)*((_QWORD *)this + 4);
  ++*v7;
  ++*v8;
  *(_QWORD *)(v4 + 24) = v7;
  *(_QWORD *)(v4 + 32) = v8;
  v9 = (_DWORD *)*((_QWORD *)this + 5);
  v10 = (_DWORD *)*((_QWORD *)this + 6);
  ++*v9;
  ++*v10;
  *(_DWORD *)(v4 + 4) = *((_DWORD *)this + 1);
  *(_QWORD *)(v4 + 40) = v9;
  *(_QWORD *)(v4 + 48) = v10;
  v11 = (_DWORD *)*((_QWORD *)this + 7);
  ++*v11;
  *(_QWORD *)(v4 + 56) = v11;
  v12 = *((_QWORD *)this + 8);
  if (v12)
  {
    v39 = WTF::fastMalloc((WTF *)0x18);
    v13 = WebCore::AnimationList::AnimationList(v39, v12, 0);
  }
  else
  {
    v13 = 0;
  }
  *(_QWORD *)(v4 + 64) = v13;
  v14 = *((_QWORD *)this + 9);
  if (v14)
  {
    v40 = WTF::fastMalloc((WTF *)0x18);
    v15 = WebCore::AnimationList::AnimationList(v40, v14, 0);
  }
  else
  {
    v15 = 0;
  }
  *(_QWORD *)(v4 + 72) = v15;
  v16 = (uint64_t *)(v4 + 80);
  v17 = (WebCore::ContentData *)*((_QWORD *)this + 10);
  if (v17)
    WebCore::ContentData::clone(v17, v16);
  else
    *v16 = 0;
  v18 = (const WebCore::ShadowData *)*((_QWORD *)this + 11);
  if (v18)
  {
    v41 = (WebCore::ShadowData *)WTF::fastMalloc((WTF *)0x40);
    v19 = WebCore::ShadowData::ShadowData(v41, v18);
  }
  else
  {
    v19 = 0;
  }
  *(_QWORD *)(v4 + 88) = v19;
  v20 = (_DWORD *)*((_QWORD *)this + 12);
  if (v20)
    *v20 += 2;
  *(_QWORD *)(v4 + 96) = v20;
  *(_OWORD *)(v4 + 104) = *(_OWORD *)((char *)this + 104);
  *(_WORD *)(v4 + 120) = *((_WORD *)this + 60);
  *(_WORD *)(v4 + 122) = *((_WORD *)this + 61);
  *(_BYTE *)(v4 + 124) = *((_BYTE *)this + 124);
  *(_BYTE *)(v4 + 125) = *((_BYTE *)this + 125);
  *(_BYTE *)(v4 + 126) = *((_BYTE *)this + 126);
  v21 = *((_BYTE *)this + 127);
  *(_DWORD *)(v4 + 128) = 0;
  v22 = (int *)(v4 + 128);
  *(_BYTE *)(v4 + 127) = v21;
  *(_WORD *)(v4 + 133) = 0;
  v23 = *((unsigned __int8 *)this + 132);
  *(_BYTE *)(v4 + 132) = v23;
  *(_BYTE *)(v4 + 133) = *((_BYTE *)this + 133);
  if (v23 <= 0xD)
  {
    v24 = 1 << v23;
    if ((v24 & 0x7FC) != 0)
    {
      *(_BYTE *)(v4 + 134) = *((_BYTE *)this + 134);
      *v22 = *((_DWORD *)this + 32);
    }
    else if ((v24 & 0x3003) != 0)
    {
      *v22 = 0;
    }
    else
    {
      *v22 = *((_DWORD *)this + 32);
      WebCore::Length::ref(v22);
    }
  }
  *(_DWORD *)(v4 + 136) = 0;
  result = (int *)(v4 + 136);
  *(_WORD *)(v4 + 141) = 0;
  v26 = *((unsigned __int8 *)this + 140);
  *(_BYTE *)(v4 + 140) = v26;
  *(_BYTE *)(v4 + 141) = *((_BYTE *)this + 141);
  if (v26 <= 0xD)
  {
    v27 = 1 << v26;
    if ((v27 & 0x7FC) != 0)
    {
      *(_BYTE *)(v4 + 142) = *((_BYTE *)this + 142);
      *result = *((_DWORD *)this + 34);
    }
    else if ((v27 & 0x3003) != 0)
    {
      *result = 0;
    }
    else
    {
      *result = *((_DWORD *)this + 34);
      result = WebCore::Length::ref(result);
    }
  }
  *(_DWORD *)(v4 + 144) = *((_DWORD *)this + 36);
  v28 = *(_DWORD *)(v4 + 148) & 0xFFFFFFFE | *((_DWORD *)this + 37) & 1;
  *(_DWORD *)(v4 + 148) = v28;
  v29 = v28 & 0xFFFFFFFD | (2 * ((*((_DWORD *)this + 37) >> 1) & 1));
  *(_DWORD *)(v4 + 148) = v29;
  v30 = v29 & 0xFFFFFFFB | (4 * ((*((_DWORD *)this + 37) >> 2) & 1));
  *(_DWORD *)(v4 + 148) = v30;
  v31 = v30 & 0xFFFFFFF7 | (8 * ((*((_DWORD *)this + 37) >> 3) & 1));
  *(_DWORD *)(v4 + 148) = v31;
  v32 = v31 & 0xFFFFFFEF | (16 * ((*((_DWORD *)this + 37) >> 4) & 1));
  *(_DWORD *)(v4 + 148) = v32;
  v33 = v32 & 0xFFFFFF9F | (32 * ((*((_DWORD *)this + 37) >> 5) & 3));
  *(_DWORD *)(v4 + 148) = v33;
  v34 = v33 & 0xFFFFC07F | (((*((_DWORD *)this + 37) >> 7) & 0x7F) << 7);
  *(_DWORD *)(v4 + 148) = v34;
  v35 = v34 & 0xFFE03FFF | (((*((_DWORD *)this + 37) >> 14) & 0x7F) << 14);
  *(_DWORD *)(v4 + 148) = v35;
  v36 = v35 & 0xFFDFFFFF | (((*((_DWORD *)this + 37) >> 21) & 1) << 21);
  *(_DWORD *)(v4 + 148) = v36;
  v37 = v36 & 0xFF3FFFFF | (((*((_DWORD *)this + 37) >> 22) & 3) << 22);
  *(_DWORD *)(v4 + 148) = v37;
  v38 = v37 & 0xF8FFFFFF | ((HIBYTE(*((_DWORD *)this + 37)) & 7) << 24);
  *(_DWORD *)(v4 + 148) = v38;
  *(_DWORD *)(v4 + 148) = v38 & 0xC7FFFFFF | (((*((_DWORD *)this + 37) >> 27) & 7) << 27);
  *a2 = v4;
  return result;
}

uint64_t WebCore::RenderStyle::transform(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 40) + 8;
}

uint64_t WebCore::AnimationList::AnimationList(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WebCore::Animation **v50;
  uint64_t v51;
  WebCore::Animation **v52;
  uint64_t v53;
  WebCore::Animation *v54;
  WebCore::Animation *v55;
  WTF *v56;
  void *v57;
  uint64_t v58;
  unsigned int v59;
  WTF *v60;
  uint64_t v61;
  void *v62;
  unsigned int v63;
  WebCore::Animation **v64;
  uint64_t v65;
  WTF *v66;
  WebCore::Animation *v67;
  WebCore::Animation *v68;
  WTF *v69;
  void *v70;
  unsigned int v71;
  uint64_t v72;
  WebCore::Animation **v73;
  WebCore::Animation **v74;
  uint64_t v75;
  WebCore::Animation *v76;
  WebCore::Animation **v77;
  WebCore::Animation *v78;
  WTF *v79;
  void *v80;
  WebCore::Animation **v82;
  uint64_t v83;
  WebCore::Animation *v84;
  WTF *v85;
  void *v86;
  WTF *v87;
  uint64_t v88;
  WebCore::Animation *v89;
  WTF *v90;
  void *v91;
  unsigned int v92;
  uint64_t v93;
  WebCore::Animation **v94;
  WebCore::Animation **v95;
  uint64_t v96;
  WebCore::Animation *v97;
  WTF **v98;
  char v100;
  char v101;

  v3 = a2;
  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (WTF **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  if (a3 != 1)
  {
    v5 = *(unsigned int *)(a2 + 20);
    if (!(_DWORD)v5)
    {
      v6 = 0;
      goto LABEL_28;
    }
    if (!(v5 >> 29))
    {
      v6 = (WTF *)WTF::fastMalloc((WTF *)(8 * v5));
      if (*(_DWORD *)(v3 + 20))
      {
        v98 = v4;
        v7 = 0;
        do
        {
          v8 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v7);
          v9 = WTF::fastMalloc((WTF *)0x78);
          *(_DWORD *)v9 = 1;
          *(_BYTE *)(v9 + 8) = *(_BYTE *)(v8 + 8);
          *(_BYTE *)(v9 + 16) = 0;
          *(_DWORD *)(v9 + 24) = -1;
          v10 = *(unsigned int *)(v8 + 24);
          if ((_DWORD)v10 != -1)
          {
            ((void (*)(char *, uint64_t, uint64_t))off_1E3407358[v10])(&v100, v9 + 16, v8 + 16);
            *(_DWORD *)(v9 + 24) = v10;
          }
          v11 = *(_DWORD **)(v8 + 32);
          if (v11)
            *v11 += 2;
          *(_QWORD *)(v9 + 32) = v11;
          *(_WORD *)(v9 + 40) = *(_WORD *)(v8 + 40);
          *(_OWORD *)(v9 + 48) = *(_OWORD *)(v8 + 48);
          v12 = *(_QWORD *)(v8 + 64);
          *(_BYTE *)(v9 + 80) = 0;
          a2 = v9 + 80;
          *(_QWORD *)(v9 + 64) = v12;
          *(_QWORD *)(v9 + 72) = 0x3FF0000000000000;
          *(_DWORD *)(v9 + 88) = -1;
          v13 = *(unsigned int *)(v8 + 88);
          if ((_DWORD)v13 != -1)
          {
            ((void (*)(char *))off_1E34073A8[v13])(&v101);
            *(_DWORD *)(v9 + 88) = v13;
          }
          v14 = *(_QWORD *)(v8 + 96);
          if (v14)
            ++*(_DWORD *)(v14 + 8);
          *(_QWORD *)(v9 + 96) = v14;
          *(_QWORD *)(v9 + 104) = 0;
          v16 = *(_DWORD *)(v8 + 112);
          v15 = (unsigned int *)(v8 + 112);
          v17 = *(_DWORD *)(v9 + 112) & 0xFFFFFFFC | ((unint64_t)*(unsigned __int8 *)(v9 + 116) << 32) | v16 & 3;
          *(_DWORD *)(v9 + 112) = *(_DWORD *)(v9 + 112) & 0xFFFFFFFC | v16 & 3;
          v18 = v17 & 0xFFFFFFFFFFFFFFF3 | (4 * (((unint64_t)*v15 >> 2) & 3));
          *(_DWORD *)(v9 + 112) = v18;
          v19 = v18 & 0xFFFFFFFFFFFFFFCFLL | (16 * (((unint64_t)*v15 >> 4) & 3));
          *(_DWORD *)(v9 + 112) = v19;
          v20 = v19 & 0xFFFFFFFFFFFFFF3FLL | ((((unint64_t)*v15 >> 6) & 3) << 6);
          *(_DWORD *)(v9 + 112) = v20;
          v21 = v20 & 0xFFFFFFFFFFFFFEFFLL | ((((unint64_t)*v15 >> 8) & 1) << 8);
          *(_DWORD *)(v9 + 112) = v21;
          v22 = v21 & 0xFFFFFFFFFFFFFDFFLL | ((((unint64_t)*v15 >> 9) & 1) << 9);
          *(_DWORD *)(v9 + 112) = v22;
          v23 = v22 & 0xFFFFFFFFFFFFFBFFLL | ((((unint64_t)*v15 >> 10) & 1) << 10);
          *(_DWORD *)(v9 + 112) = v23;
          v24 = v23 & 0xFFFFFFFFFFFFF7FFLL | ((((unint64_t)*v15 >> 11) & 1) << 11);
          *(_DWORD *)(v9 + 112) = v24;
          v25 = v24 & 0xFFFFFFFFFFFFEFFFLL | ((((unint64_t)*v15 >> 12) & 1) << 12);
          *(_DWORD *)(v9 + 112) = v25;
          v26 = v25 & 0xFFFFFFFFFFFFDFFFLL | ((((unint64_t)*v15 >> 13) & 1) << 13);
          *(_DWORD *)(v9 + 112) = v26;
          v27 = v26 & 0xFFFFFFFFFFFFBFFFLL | ((((unint64_t)*v15 >> 14) & 1) << 14);
          *(_DWORD *)(v9 + 112) = v27;
          v28 = v27 & 0xFFFFFFFFFFFF7FFFLL | ((((unint64_t)*v15 >> 15) & 1) << 15);
          *(_DWORD *)(v9 + 112) = v28;
          v29 = v28 & 0xFFFFFFFFFFFEFFFFLL | ((((unint64_t)*v15 >> 16) & 1) << 16);
          *(_DWORD *)(v9 + 112) = v29;
          v30 = v29 & 0xFFFFFFFFFFFDFFFFLL | ((((unint64_t)*v15 >> 17) & 1) << 17);
          *(_DWORD *)(v9 + 112) = v30;
          v31 = v30 & 0xFFFFFFFFFFFBFFFFLL | ((((unint64_t)*v15 >> 18) & 1) << 18);
          *(_DWORD *)(v9 + 112) = v31;
          v32 = v31 & 0xFFFFFFFFFFF7FFFFLL | ((((unint64_t)*v15 >> 19) & 1) << 19);
          *(_DWORD *)(v9 + 112) = v32;
          v33 = v32 & 0xFFFFFFFFFFEFFFFFLL | ((((unint64_t)*v15 >> 20) & 1) << 20);
          *(_DWORD *)(v9 + 112) = v33;
          v34 = v33 & 0xFFFFFFFFFFDFFFFFLL | ((((unint64_t)*v15 >> 21) & 1) << 21);
          *(_DWORD *)(v9 + 112) = v34;
          v35 = v34 & 0xFFFFFFFFFFBFFFFFLL | ((((unint64_t)*v15 >> 22) & 1) << 22);
          *(_DWORD *)(v9 + 112) = v35;
          v36 = v35 & 0xFFFFFFFFFF7FFFFFLL | ((((unint64_t)*v15 >> 23) & 1) << 23);
          *(_DWORD *)(v9 + 112) = v36;
          v37 = v36 & 0xFFFFFFFFFEFFFFFFLL | ((((unint64_t)*v15 >> 24) & 1) << 24);
          *(_DWORD *)(v9 + 112) = v37;
          v38 = v37 & 0xFFFFFFFFFDFFFFFFLL | ((((unint64_t)*v15 >> 25) & 1) << 25);
          *(_DWORD *)(v9 + 112) = v38;
          v39 = v38 & 0xFFFFFFFFFBFFFFFFLL | ((((unint64_t)*v15 >> 26) & 1) << 26);
          *(_DWORD *)(v9 + 112) = v39;
          v40 = v39 & 0xFFFFFFFFF7FFFFFFLL | ((((unint64_t)*v15 >> 27) & 1) << 27);
          *(_DWORD *)(v9 + 112) = v40;
          v41 = v40 & 0xFFFFFFFFEFFFFFFFLL | ((((unint64_t)*v15 >> 28) & 1) << 28);
          *(_DWORD *)(v9 + 112) = v41;
          v42 = v41 & 0xFFFFFFFFDFFFFFFFLL | ((((unint64_t)*v15 >> 29) & 1) << 29);
          *(_DWORD *)(v9 + 112) = v42;
          v43 = v42 & 0xFFFFFFFFBFFFFFFFLL | ((((unint64_t)*v15 >> 30) & 1) << 30);
          *(_DWORD *)(v9 + 112) = v43;
          v44 = v43 & 0xFFFFFFFF7FFFFFFFLL | ((((unint64_t)*v15 >> 31) & 1) << 31);
          *(_DWORD *)(v9 + 112) = v44;
          v45 = v44 & 0xFEFFFFFFFFLL | ((unint64_t)(v15[1] & 1) << 32);
          *(_DWORD *)(v9 + 112) = v44;
          *(_BYTE *)(v9 + 116) = BYTE4(v45);
          v46 = v7 + 1;
          *((_QWORD *)v6 + v7) = v9;
          v7 = v46;
        }
        while (v46 < *(unsigned int *)(v3 + 20));
        v4 = v98;
        goto LABEL_29;
      }
LABEL_28:
      LODWORD(v46) = 0;
LABEL_29:
      v47 = a1;
      v58 = *(unsigned int *)(a1 + 20);
      if (v58 > v46)
      {
        v82 = (WebCore::Animation **)((char *)*v4 + 8 * v46);
        v83 = 8 * v58 - 8 * v46;
        do
        {
          v84 = *v82;
          *v82 = 0;
          if (v84)
          {
            if (*(_DWORD *)v84 == 1)
            {
              WebCore::Animation::~Animation(v84, (WTF::StringImpl *)a2);
              WTF::fastFree(v85, v86);
            }
            else
            {
              --*(_DWORD *)v84;
            }
          }
          ++v82;
          v83 -= 8;
        }
        while (v83);
        v47 = a1;
        *(_DWORD *)(a1 + 20) = v46;
        v63 = v46;
      }
      else
      {
        v59 = *(_DWORD *)(a1 + 16);
        if (v46 > v59)
        {
          if (v59)
          {
            v87 = *v4;
            if ((_DWORD)v58)
            {
              v88 = 8 * v58;
              do
              {
                v89 = *(WebCore::Animation **)v87;
                *(_QWORD *)v87 = 0;
                if (v89)
                {
                  if (*(_DWORD *)v89 == 1)
                  {
                    WebCore::Animation::~Animation(v89, (WTF::StringImpl *)a2);
                    WTF::fastFree(v90, v91);
                  }
                  else
                  {
                    --*(_DWORD *)v89;
                  }
                }
                v87 = (WTF *)((char *)v87 + 8);
                v88 -= 8;
              }
              while (v88);
              v87 = *(WTF **)(a1 + 8);
              *(_DWORD *)(a1 + 20) = 0;
            }
            v47 = a1;
            if (v87)
            {
              *(_QWORD *)(a1 + 8) = 0;
              *(_DWORD *)(a1 + 16) = 0;
              WTF::fastFree(v87, (void *)a2);
            }
          }
          if (*(_DWORD *)(v47 + 16) < v46)
          {
            if (v46 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1943ED120);
            }
            v60 = *v4;
            v61 = *(unsigned int *)(v47 + 20);
            v62 = (void *)WTF::fastMalloc((WTF *)(8 * v46));
            *(_DWORD *)(v47 + 16) = v46;
            *(_QWORD *)(v47 + 8) = v62;
            memcpy(v62, v60, 8 * v61);
            if (v60)
            {
              if (*v4 == v60)
              {
                *(_QWORD *)(v47 + 8) = 0;
                *(_DWORD *)(v47 + 16) = 0;
              }
              WTF::fastFree(v60, (void *)a2);
            }
          }
        }
        v63 = *(_DWORD *)(v47 + 20);
      }
      v64 = (WebCore::Animation **)*v4;
      if (v63)
      {
        v65 = 8 * v63;
        v66 = v6;
        do
        {
          v67 = *(WebCore::Animation **)v66;
          *(_DWORD *)v67 = **(_DWORD **)v66 + 1;
          v68 = *v64;
          *v64 = v67;
          if (v68)
          {
            if (*(_DWORD *)v68 == 1)
            {
              WebCore::Animation::~Animation(v68, (WTF::StringImpl *)a2);
              WTF::fastFree(v69, v70);
            }
            else
            {
              --*(_DWORD *)v68;
            }
          }
          v66 = (WTF *)((char *)v66 + 8);
          ++v64;
          v65 -= 8;
        }
        while (v65);
        v71 = *(_DWORD *)(v47 + 20);
        v64 = *(WebCore::Animation ***)(v47 + 8);
      }
      else
      {
        v71 = 0;
      }
      v72 = 8 * v46;
      if (v71 != (_DWORD)v46)
      {
        v73 = &v64[v71];
        v74 = (WebCore::Animation **)((char *)v6 + 8 * v71);
        v75 = v72 - 8 * v71;
        do
        {
          v76 = *v74++;
          ++*(_DWORD *)v76;
          *v73++ = v76;
          v75 -= 8;
        }
        while (v75);
      }
      *(_DWORD *)(v47 + 20) = v46;
      if ((_DWORD)v46)
      {
        v77 = (WebCore::Animation **)v6;
        do
        {
          v78 = *v77;
          *v77 = 0;
          if (v78)
          {
            if (*(_DWORD *)v78 == 1)
            {
              WebCore::Animation::~Animation(v78, (WTF::StringImpl *)a2);
              WTF::fastFree(v79, v80);
            }
            else
            {
              --*(_DWORD *)v78;
            }
          }
          ++v77;
          v72 -= 8;
        }
        while (v72);
      }
      if (v6)
        WTF::fastFree(v6, (void *)a2);
      return v47;
    }
LABEL_87:
    __break(0xC471u);
    JUMPOUT(0x1943ED118);
  }
  v47 = a1;
  if (a2 == a1)
    return v47;
  v48 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v48)
  {
    if (v48 >> 29)
      goto LABEL_87;
    v50 = (WebCore::Animation **)WTF::fastMalloc((WTF *)(8 * v48));
    *(_DWORD *)(a1 + 16) = v48;
    *(_QWORD *)(a1 + 8) = v50;
    v51 = *(unsigned int *)(a1 + 20);
    v52 = *(WebCore::Animation ***)(v3 + 8);
    if ((_DWORD)v51)
    {
      v53 = 8 * v51;
      do
      {
        v54 = *v52;
        *(_DWORD *)v54 = *(_DWORD *)*v52 + 1;
        v55 = *v50;
        *v50 = v54;
        if (v55)
        {
          if (*(_DWORD *)v55 == 1)
          {
            WebCore::Animation::~Animation(v55, v49);
            WTF::fastFree(v56, v57);
          }
          else
          {
            --*(_DWORD *)v55;
          }
        }
        ++v52;
        ++v50;
        v53 -= 8;
      }
      while (v53);
      v52 = *(WebCore::Animation ***)(v3 + 8);
      v92 = *(_DWORD *)(a1 + 20);
      v50 = *(WebCore::Animation ***)(a1 + 8);
    }
    else
    {
      v92 = 0;
    }
  }
  else
  {
    v50 = 0;
    v92 = 0;
    v52 = *(WebCore::Animation ***)(a2 + 8);
  }
  v93 = *(unsigned int *)(v3 + 20);
  if (v92 != (_DWORD)v93)
  {
    v94 = &v50[v92];
    v95 = &v52[v92];
    v96 = 8 * v93 - 8 * v92;
    do
    {
      v97 = *v95++;
      ++*(_DWORD *)v97;
      *v94++ = v97;
      v96 -= 8;
    }
    while (v96);
  }
  v47 = a1;
  *(_DWORD *)(a1 + 20) = v93;
  return v47;
}

uint64_t WebCore::blendFunc(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int32x2_t *v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int32x2_t v18;
  void *v19;
  uint64_t v20;
  int32x2_t v21;

  v6 = (int32x2_t *)result;
  if (*(_BYTE *)(a4 + 9) == 1)
  {
    v20 = 0;
    v21 = 0;
    v16 = *(unsigned int *)(a2 + 12);
    v17 = *(unsigned int *)(a3 + 12) + v16;
    if (v17)
    {
      if (v17 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v21.i32[0] = *(_DWORD *)(a3 + 12) + v16;
      v20 = WTF::fastMalloc((WTF *)(8 * v17));
      v16 = *(unsigned int *)(a2 + 12);
    }
    WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendRange<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>> const*>((uint64_t)&v20, *(uint64_t **)a2, (uint64_t *)(*(_QWORD *)a2 + 8 * v16));
    WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendRange<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>> const*>((uint64_t)&v20, *(uint64_t **)a3, (uint64_t *)(*(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 12)));
    *v6 = (int32x2_t)v20;
    v18 = v21;
    v20 = 0;
    v21 = 0;
    v6[1] = v18;
    return WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v19);
  }
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 24) + 8))(*(_QWORD *)(a4 + 24));
  if (v8 && (*(_BYTE *)(v8 + 45) & 4) != 0)
    v9 = *(_QWORD *)(v8 + 160);
  else
    v9 = 0;
  v20 = v9;
  if (*(_BYTE *)(a4 + 9) == 2)
    goto LABEL_14;
  v10 = *(_DWORD *)(a4 + 40);
  if (v10)
  {
    if (v10 == 1)
    {
LABEL_14:
      v14 = 0;
      v12 = 0;
      v13 = 0;
      v15 = 0;
      return WebCore::TransformOperations::blend(a3, (WebCore::TransformOperations *)a2, (int32x2_t *)&v20, (double *)a4, v12 | v14 | v13 | v15, (uint64_t)v6);
    }
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (*(_WORD *)(a4 + 32) != 273)
    goto LABEL_14;
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 24) + 24))(*(_QWORD *)(a4 + 24));
  v12 = v11 & 0xFFFFFF0000000000;
  v13 = v11 & 0xFF00000000;
  v14 = v11 & 0xFFFFFF00;
  v15 = v11;
  return WebCore::TransformOperations::blend(a3, (WebCore::TransformOperations *)a2, (int32x2_t *)&v20, (double *)a4, v12 | v14 | v13 | v15, (uint64_t)v6);
}

{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v16;
  uint64_t v17;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  _DWORD *v22;
  unsigned int v23;
  uint64_t v25;
  BOOL v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v4 = (_QWORD *)result;
  if (!(a2 | a3))
  {
    *(_QWORD *)result = 0;
    return result;
  }
  v6 = a3;
  v7 = a2;
  if (!a2)
  {
    v9 = *(unsigned __int8 *)(a3 + 12);
    v10 = WTF::fastMalloc((WTF *)0x28);
    v8 = (_DWORD *)v10;
    *(_DWORD *)(v10 + 8) = 1;
    *(_BYTE *)(v10 + 12) = v9;
    *(_QWORD *)v10 = off_1E3416F18;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)(v10 + 16) = _Q0;
    *(_QWORD *)(v10 + 32) = 0x3FF0000000000000;
    _ZF = v9 > 0xE || ((1 << v9) & 0x6007) == 0;
    v7 = v10;
    if (!_ZF)
      goto LABEL_16;
LABEL_51:
    __break(0xC471u);
    JUMPOUT(0x19565FDB8);
  }
  if (a3)
  {
    v8 = 0;
    goto LABEL_16;
  }
  v16 = *(unsigned __int8 *)(a2 + 12);
  v17 = WTF::fastMalloc((WTF *)0x28);
  v8 = (_DWORD *)v17;
  *(_DWORD *)(v17 + 8) = 1;
  *(_BYTE *)(v17 + 12) = v16;
  *(_QWORD *)v17 = off_1E3416F18;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v17 + 16) = _Q0;
  *(_QWORD *)(v17 + 32) = 0x3FF0000000000000;
  v19 = v16 > 0xE || ((1 << v16) & 0x6007) == 0;
  v6 = v17;
  if (v19)
    goto LABEL_51;
LABEL_16:
  v20 = *(unsigned __int8 *)(v7 + 12);
  v21 = *(unsigned __int8 *)(v6 + 12);
  if (v20 != v21)
  {
    v27 = v20 > 0x14;
    v28 = (1 << v20) & 0x1DE0C0;
    v29 = v27 || v28 == 0;
    if (!v29 || v21 <= 0x14 && ((1 << v21) & 0x1DE0C0) != 0)
    {
      v39 = *(_OWORD *)(v7 + 16);
      v30 = *(_QWORD *)(v7 + 32);
      v31 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v31 + 8) = 1;
      *(_BYTE *)(v31 + 12) = 14;
      *(_QWORD *)v31 = off_1E3416F18;
      *(_OWORD *)(v31 + 16) = v39;
      *(_QWORD *)(v31 + 32) = v30;
      v40 = *(_OWORD *)(v6 + 16);
      v32 = *(_QWORD *)(v6 + 32);
      v33 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v33 + 8) = 1;
      *(_BYTE *)(v33 + 12) = 14;
      *(_QWORD *)v33 = off_1E3416F18;
      *(_OWORD *)(v33 + 16) = v40;
      *(_QWORD *)(v33 + 32) = v32;
    }
    else
    {
      v34 = *(_QWORD *)(v7 + 16);
      v35 = *(_QWORD *)(v7 + 24);
      v31 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v31 + 8) = 1;
      *(_BYTE *)(v31 + 12) = 2;
      *(_QWORD *)v31 = off_1E3416F18;
      *(_QWORD *)(v31 + 16) = v34;
      *(_QWORD *)(v31 + 24) = v35;
      *(_QWORD *)(v31 + 32) = 0x3FF0000000000000;
      v36 = *(_QWORD *)(v6 + 16);
      v37 = *(_QWORD *)(v6 + 24);
      v33 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v33 + 8) = 1;
      *(_BYTE *)(v33 + 12) = 2;
      *(_QWORD *)v33 = off_1E3416F18;
      *(_QWORD *)(v33 + 16) = v36;
      *(_QWORD *)(v33 + 24) = v37;
      *(_QWORD *)(v33 + 32) = 0x3FF0000000000000;
    }
    result = WebCore::blendFunc(v4, v31, v33, a4);
    if (*(_DWORD *)(v33 + 8) == 1)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    else
      --*(_DWORD *)(v33 + 8);
    if (*(_DWORD *)(v31 + 8) != 1)
    {
      --*(_DWORD *)(v31 + 8);
      if (!v8)
        return result;
      goto LABEL_37;
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
LABEL_48:
    if (!v8)
      return result;
    goto LABEL_37;
  }
  WebCore::ScaleTransformOperation::blend((WebCore::TransformOperation *)v6, v7, a4, 0, &v41);
  v22 = (_DWORD *)v41;
  v23 = *(unsigned __int8 *)(v41 + 12);
  if (v23 > 0xE || ((1 << v23) & 0x6007) == 0)
  {
    result = 0;
  }
  else
  {
    v38 = *(_OWORD *)(v41 + 16);
    v25 = *(_QWORD *)(v41 + 32);
    result = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(result + 8) = 1;
    *(_BYTE *)(result + 12) = v23;
    *(_QWORD *)result = off_1E3416F18;
    *(_OWORD *)(result + 16) = v38;
    *(_QWORD *)(result + 32) = v25;
    if (v23 > 0xE || ((1 << v23) & 0x6007) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1956600C4);
    }
  }
  *v4 = result;
  if (v22[2] == 1)
  {
    result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
    goto LABEL_48;
  }
  --v22[2];
  if (!v8)
    return result;
LABEL_37:
  if (v8[2] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
  --v8[2];
  return result;
}

uint64_t `non-virtual thunk to'WebCore::KeyframeEffect::renderer(WebCore::KeyframeEffect *this)
{
  uint64_t v1;
  int v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  char v11;
  char v12;

  v1 = *((_QWORD *)this + 20);
  if (!v1)
    return 0;
  if (*((_BYTE *)this + 184))
  {
    v2 = *((_DWORD *)this + 42);
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 22);
    if (v3)
      *(_DWORD *)v3 += 2;
    v8 = v1;
    v9 = v2;
    v10 = v3;
    v11 = 1;
  }
  else
  {
    v8 = *((_QWORD *)this + 20);
    LOBYTE(v9) = 0;
    v11 = 0;
  }
  v12 = 1;
  v5 = WebCore::Styleable::renderer((WebCore::Styleable *)&v8);
  if (v12)
  {
    if (v11)
    {
      v6 = v10;
      v10 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, v4);
        else
          *(_DWORD *)v6 -= 2;
      }
    }
  }
  return v5;
}

uint64_t `non-virtual thunk to'WebCore::KeyframeEffect::transformFunctionListPrefix(WebCore::KeyframeEffect *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *((_QWORD *)this + 2);
  if ((v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0
     || (v9 = *((_QWORD *)this + 20)) != 0 && (v4 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 8)) != 0)
    && (*(_QWORD *)(*(_QWORD *)(v4 + 680) + 712) & 0x800000000000) != 0
    && (*((_BYTE *)this + 203) || *((_BYTE *)this + 228))
    || WebCore::KeyframeEffect::preventsAcceleration((WebCore::KeyframeEffect *)((char *)this - 104), a2))
  {
    v6 = 0;
    v7 = 0;
    v5 = 0;
  }
  else
  {
    v5 = *((_QWORD *)this + 27) & 0xFFFFFF00;
    v6 = *((_QWORD *)this + 27);
    v7 = 0x100000000;
  }
  return v7 | v6 | v5;
}

uint64_t WebCore::TransformOperations::blend@<X0>(uint64_t this@<X0>, WebCore::TransformOperations *a2@<X1>, int32x2_t *a3@<X3>, double *a4@<X2>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  double v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t *v37;
  double v38;
  WebCore::LayoutSize *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  double v45;
  __int16 v46;
  char v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;

  v9 = (unsigned int *)this;
  v11 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)a2;
    v13 = 8 * v11;
    v14 = v13;
    v15 = *(_QWORD *)a2;
    while (*(_BYTE *)(*(_QWORD *)v15 + 12) != 12)
    {
      v15 += 8;
      v14 -= 8;
      if (!v14)
      {
        while (*(_BYTE *)(*(_QWORD *)v12 + 12) != 19)
        {
          v12 += 8;
          v13 -= 8;
          if (!v13)
            goto LABEL_7;
        }
        break;
      }
    }
    this = WebCore::TransformOperations::isInvertible(a2, a3);
    if (!(_DWORD)this)
      goto LABEL_76;
  }
LABEL_7:
  v16 = v9[3];
  v40 = (uint64_t *)a6;
  if ((_DWORD)v16)
  {
    v17 = *(_QWORD *)v9;
    v18 = 8 * v16;
    v19 = 8 * v16;
    v20 = *(_QWORD *)v9;
    while (*(_BYTE *)(*(_QWORD *)v20 + 12) != 12)
    {
      v20 += 8;
      v19 -= 8;
      if (!v19)
      {
        while (*(_BYTE *)(*(_QWORD *)v17 + 12) != 19)
        {
          v17 += 8;
          v18 -= 8;
          if (!v18)
            goto LABEL_13;
        }
        break;
      }
    }
    this = WebCore::TransformOperations::isInvertible((WebCore::TransformOperations *)v9, a3);
    if (!(_DWORD)this)
    {
LABEL_76:
      WebCore::TransformOperations::createBlendedMatrixOperationFromOperationsSuffix((uint64_t *)&v45, (WebCore::TransformOperations *)v9, a2, 0, (uint64_t)a4, a3);
      WebCore::TransformOperations::TransformOperations(a6, (_DWORD **)&v45);
      this = *(_QWORD *)&v45;
      if (v45 != 0.0)
      {
        if (*(_DWORD *)(*(_QWORD *)&v45 + 8) == 1)
          return (*(uint64_t (**)(double))(**(_QWORD **)&v45 + 8))(COERCE_DOUBLE(*(_QWORD *)&v45));
        else
          --*(_DWORD *)(*(_QWORD *)&v45 + 8);
      }
      return this;
    }
    LODWORD(v16) = v9[3];
  }
LABEL_13:
  v21 = *((unsigned int *)a2 + 3);
  if (v21 <= v16)
    v22 = v16;
  else
    v22 = v21;
  v51 = 0;
  if ((_DWORD)v22)
  {
    v39 = (WebCore::LayoutSize *)a3;
    if (v22 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1943ED91CLL);
    }
    v23 = 0;
    LODWORD(v51) = v22;
    v50 = WTF::fastMalloc((WTF *)(8 * v22));
    if ((_DWORD)v21)
      v24 = (_DWORD)v16 == 0;
    else
      v24 = 1;
    v25 = !v24;
    v43 = v25;
    v41 = a5;
    v42 = a5 & 0xFF00000000;
    v26 = v16;
    while (1)
    {
      if (v23 >= v21)
      {
        v27 = 0;
      }
      else
      {
        if (v23 >= *((unsigned int *)a2 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x1943ED90CLL);
        }
        v27 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v23);
        if (v27)
        {
          v28 = 0;
          ++*(_DWORD *)(v27 + 8);
          goto LABEL_29;
        }
      }
      v28 = 1;
LABEL_29:
      if (v23 >= v26)
      {
        v29 = 0;
      }
      else
      {
        if (v23 >= v9[3])
        {
          __break(0xC471u);
          JUMPOUT(0x1943ED914);
        }
        v29 = *(_QWORD *)(*(_QWORD *)v9 + 8 * v23);
        if (v29)
        {
          v30 = 0;
          ++*(_DWORD *)(v29 + 8);
          goto LABEL_33;
        }
      }
      v30 = 1;
LABEL_33:
      if (v43)
      {
        if (v42 && v23 >= v41)
        {
LABEL_80:
          WebCore::TransformOperations::createBlendedMatrixOperationFromOperationsSuffix((uint64_t *)&v45, (WebCore::TransformOperations *)v9, a2, v23, (uint64_t)a4, (int32x2_t *)v39);
          v36 = HIDWORD(v51);
          if (HIDWORD(v51) == (_DWORD)v51)
          {
            WTF::Vector<std::unique_ptr<WebCore::DetachedOffscreenCanvas>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebCore::DetachedOffscreenCanvas>>((uint64_t)&v50, (unint64_t)&v45);
            v38 = v45;
            v45 = 0.0;
            v37 = v40;
            if (v38 != 0.0)
            {
              if (*(_DWORD *)(*(_QWORD *)&v38 + 8) == 1)
                (*(void (**)(double))(**(_QWORD **)&v38 + 8))(COERCE_DOUBLE(*(_QWORD *)&v38));
              else
                --*(_DWORD *)(*(_QWORD *)&v38 + 8);
            }
          }
          else
          {
            *(double *)(v50 + 8 * HIDWORD(v51)) = v45;
            HIDWORD(v51) = v36 + 1;
            v37 = v40;
          }
          this = (uint64_t)WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v50, HIDWORD(v51));
          *v37 = v50;
          v37[1] = v51;
          if ((v30 & 1) == 0)
          {
            if (*(_DWORD *)(v29 + 8) == 1)
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
            else
              --*(_DWORD *)(v29 + 8);
          }
          if ((v28 & 1) == 0)
          {
            if (*(_DWORD *)(v27 + 8) == 1)
              return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
            else
              --*(_DWORD *)(v27 + 8);
          }
          return this;
        }
        if (!v27)
        {
          if ((v28 & 1) != 0)
          {
LABEL_74:
            v45 = 1.0 - *a4;
            v46 = 0;
            v47 = 0;
            v48 = 0;
            LOBYTE(v28) = 1;
            (*(void (**)(_DWORD **__return_ptr, uint64_t, _QWORD, double *, uint64_t))(*(_QWORD *)v29 + 64))(&v49, v29, 0, &v45, 1);
            v31 = *(double *)&v49;
            goto LABEL_41;
          }
          goto LABEL_66;
        }
        if (!v29)
          goto LABEL_66;
        if (*(unsigned __int8 *)(v29 + 12) != *(unsigned __int8 *)(v27 + 12))
        {
          v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 72))(v29);
          if ((unsigned __int16)WebCore::TransformOperation::sharedPrimitiveType(v27, v35) <= 0xFFu)
            goto LABEL_80;
        }
      }
      else if (!v27 || !v29)
      {
        if (v28)
          goto LABEL_74;
LABEL_66:
        if (!v30)
        {
          LOBYTE(v28) = 0;
          v31 = 0.0;
          goto LABEL_41;
        }
        (*(void (**)(double *__return_ptr, uint64_t, _QWORD, double *, uint64_t))(*(_QWORD *)v27 + 64))(&v45, v27, 0, a4, 1);
        LOBYTE(v28) = 0;
        goto LABEL_40;
      }
      (*(void (**)(double *__return_ptr, uint64_t, uint64_t, double *, _QWORD))(*(_QWORD *)v29 + 64))(&v45, v29, v27, a4, 0);
LABEL_40:
      v31 = v45;
LABEL_41:
      v45 = v31;
      v32 = HIDWORD(v51);
      if (HIDWORD(v51) == (_DWORD)v51)
      {
        WTF::Vector<std::unique_ptr<WebCore::DetachedOffscreenCanvas>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebCore::DetachedOffscreenCanvas>>((uint64_t)&v50, (unint64_t)&v45);
      }
      else
      {
        v45 = 0.0;
        *(double *)(v50 + 8 * HIDWORD(v51)) = v31;
        HIDWORD(v51) = v32 + 1;
      }
      this = *(_QWORD *)&v45;
      v45 = 0.0;
      if (this)
      {
        if (*(_DWORD *)(this + 8) == 1)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        else
          --*(_DWORD *)(this + 8);
      }
      if ((v30 & 1) == 0)
      {
        if (*(_DWORD *)(v29 + 8) == 1)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        else
          --*(_DWORD *)(v29 + 8);
      }
      if ((v28 & 1) == 0)
      {
        if (*(_DWORD *)(v27 + 8) == 1)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        else
          --*(_DWORD *)(v27 + 8);
      }
      if (v22 == ++v23)
      {
        v33 = v50;
        v34 = v51;
        goto LABEL_56;
      }
    }
  }
  v33 = 0;
  v34 = 0;
LABEL_56:
  *v40 = v33;
  v40[1] = v34;
  return this;
}

uint64_t WebCore::RotateTransformOperation::blend@<X0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  float v17;
  float v18;
  float v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  float v25;
  float v26;
  float v27;
  BOOL v28;
  BOOL v29;
  _BOOL4 v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t result;
  double v37;
  double *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  long double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double *v53;
  int v54;
  double *v55;
  uint64_t v56;
  uint64_t v57;
  char v58[48];
  double v59;
  double v60;
  double v61;
  long double __x;
  float64x2_t v63[8];
  float64x2_t v64[8];

  if (a4)
  {
    v37 = *(double *)(a1 + 40);
    if (*(_BYTE *)(a3 + 9) != 2)
      v37 = v37 - v37 * *(double *)a3;
    return WebCore::RotateTransformOperation::create(*(unsigned __int8 *)(a1 + 12), a5, *(double *)(a1 + 16), *(double *)(a1 + 24), *(double *)(a1 + 32), v37);
  }
  else
  {
    if (a2)
    {
      v7 = *((unsigned __int8 *)a2 + 12);
      v8 = v7;
      if (v7 != *(unsigned __int8 *)(a1 + 12))
      {
        v55 = a2;
        v57 = a3;
        v54 = (*(uint64_t (**)(double *))(*(_QWORD *)a2 + 72))(a2);
        result = WebCore::TransformOperation::sharedPrimitiveType(a1, v54);
        if ((unsigned __int16)result < 0x100u)
        {
          ++*(_DWORD *)(a1 + 8);
          *a5 = a1;
          return result;
        }
        v8 = result;
        a2 = v55;
        a3 = v57;
        v7 = *((unsigned __int8 *)v55 + 12);
      }
      v9 = v7 > 0x12;
      v10 = (1 << v7) & 0x601C0;
      v11 = v9 || v10 == 0;
      if (v11)
      {
        __break(0xC471u);
        JUMPOUT(0x1943EDD00);
      }
      v12 = a2[2];
      v13 = a2[3];
      v15 = a2[4];
      v14 = a2[5];
      v16 = sqrt(v13 * v13 + v12 * v12 + v15 * v15);
      v17 = v12 / v16;
      v18 = v13 / v16;
      v19 = v15 / v16;
    }
    else
    {
      v8 = *(unsigned __int8 *)(a1 + 12);
      v19 = 1.0;
      v17 = 0.0;
      v14 = 0.0;
      v18 = 0.0;
    }
    v20 = *(double *)(a1 + 16);
    v21 = *(double *)(a1 + 24);
    v23 = *(double *)(a1 + 32);
    v22 = *(double *)(a1 + 40);
    v24 = sqrt(v21 * v21 + v20 * v20 + v23 * v23);
    v25 = v20 / v24;
    v26 = v21 / v24;
    v27 = v23 / v24;
    if (v14 == 0.0
      || v22 == 0.0
      || (v17 == v25 ? (v28 = v18 == v26) : (v28 = 0), v28 ? (v29 = v19 == v27) : (v29 = 0), v29))
    {
      v30 = v14 != 0.0;
      if (v22 == 0.0)
        v30 = 1;
      if (!v30)
      {
        v17 = v25;
        v18 = v26;
        v19 = v27;
      }
      if (*(_BYTE *)(a3 + 10) == 1)
      {
        v49 = *(double *)(a3 + 16);
        v11 = v49 == 0.0;
        v50 = v22 * v49;
        v51 = v14 + v50;
        v52 = v22 + v50;
        if (!v11)
        {
          v22 = v52;
          v14 = v51;
        }
      }
      v31 = v17;
      v32 = v18;
      v33 = v19;
      v34 = v14;
      if (*(_BYTE *)(a3 + 9))
        v34 = v14 + v14;
      v35 = v34 + (v22 - v14) * *(double *)a3;
      result = WTF::fastMalloc((WTF *)0x30);
      *(_DWORD *)(result + 8) = 1;
      *(_BYTE *)(result + 12) = v8;
      *(_QWORD *)result = off_1E3416EA0;
      *(double *)(result + 16) = v31;
      *(double *)(result + 24) = v32;
      *(double *)(result + 32) = v33;
      *(double *)(result + 40) = v35;
      if (v8 > 0x12 || ((1 << v8) & 0x601C0) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1943EDD20);
      }
    }
    else
    {
      v56 = a3;
      v64[5] = (float64x2_t)unk_1969F8DD0;
      v64[6] = (float64x2_t)xmmword_1969F8DE0;
      v64[7] = (float64x2_t)unk_1969F8DF0;
      v64[0] = (float64x2_t)xmmword_1969F8D80;
      v64[1] = *(float64x2_t *)algn_1969F8D90;
      v64[2] = (float64x2_t)xmmword_1969F8DA0;
      memset(&v64[3], 0, 32);
      v63[5] = (float64x2_t)unk_1969F8DD0;
      v63[6] = (float64x2_t)xmmword_1969F8DE0;
      v63[7] = (float64x2_t)unk_1969F8DF0;
      v63[0] = (float64x2_t)xmmword_1969F8D80;
      v63[1] = *(float64x2_t *)algn_1969F8D90;
      v63[2] = (float64x2_t)xmmword_1969F8DA0;
      memset(&v63[3], 0, 32);
      v38 = a2;
      if (a2)
      {
        v39 = a2[2];
        v40 = a2[3];
        v41 = a2[4];
        v42 = a2[5];
      }
      else
      {
        v39 = 0.0;
        v41 = 1.0;
        v40 = 0.0;
        v42 = 0.0;
      }
      WebCore::TransformationMatrix::rotate3d(v64, 1, v39, v40, v41, v42);
      WebCore::TransformationMatrix::rotate3d(v63, 1, *(double *)(a1 + 16), *(double *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40));
      WebCore::TransformationMatrix::blend((uint64_t)v63, (uint64_t)v64, *(unsigned __int8 *)(v56 + 9), *(double *)v56);
      if (WebCore::TransformationMatrix::decompose4(v63[0].f64, (uint64_t)v58))
      {
        v43 = sqrt(v60 * v60 + v59 * v59 + v61 * v61);
        if (v43 <= 0.00001)
        {
          v46 = 1.0;
          v44 = 0.0;
          v45 = 0.0;
          v48 = 0.0;
        }
        else
        {
          v44 = v59 / v43;
          v45 = v60 / v43;
          v46 = v61 / v43;
          v47 = acos(__x);
          v48 = (v47 + v47) * 57.2957795;
        }
      }
      else
      {
        if (*(double *)v56 <= 0.5)
          v53 = v38;
        else
          v53 = (double *)a1;
        v44 = v53[2];
        v45 = v53[3];
        v46 = v53[4];
        v48 = v53[5];
      }
      result = WTF::fastMalloc((WTF *)0x30);
      *(_DWORD *)(result + 8) = 1;
      *(_BYTE *)(result + 12) = 18;
      *(_QWORD *)result = off_1E3416EA0;
      *(double *)(result + 16) = v44;
      *(double *)(result + 24) = v45;
      *(double *)(result + 32) = v46;
      *(double *)(result + 40) = v48;
    }
    *a5 = result;
  }
  return result;
}

_QWORD *WebCore::ContentData::clone@<X0>(WebCore::ContentData *this@<X0>, uint64_t *a2@<X8>)
{
  WebCore::ContentData *v2;
  uint64_t *v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  v2 = this;
  v3 = a2;
  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)this + 24))(a2);
  while (1)
  {
    v2 = (WebCore::ContentData *)*((_QWORD *)v2 + 1);
    if (!v2)
      break;
    v5 = *v3;
    (*(void (**)(_QWORD **__return_ptr, WebCore::ContentData *))(*(_QWORD *)v2 + 24))(&v8, v2);
    v6 = *(_QWORD **)(v5 + 8);
    v3 = (uint64_t *)(v5 + 8);
    result = v6;
    v7 = v8;
    v8 = 0;
    *v3 = (uint64_t)v7;
    if (v6)
    {
      (*(void (**)(_QWORD *))(*result + 8))(result);
      result = v8;
      v8 = 0;
      if (result)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
  }
  return result;
}

uint64_t WebCore::TextContentData::cloneInternal@<X0>(WebCore::TextContentData *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  _DWORD *v5;

  result = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 3;
  *(_QWORD *)result = off_1E34419E8;
  v5 = (_DWORD *)*((_QWORD *)this + 4);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(result + 32) = v5;
  *a2 = result;
  return result;
}

_DWORD *WebCore::RenderStyle::setMarginRight(uint64_t a1, WebCore::Length *a2)
{
  _DWORD *result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  float v7;
  float v8;
  char isCalculatedEqual;
  WTF *v10;
  _DWORD *v11;
  unsigned int v12;
  int v13;
  int v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;

  v4 = *(_QWORD *)(a1 + 8);
  result = (_DWORD *)(a1 + 8);
  v5 = *(unsigned __int8 **)(v4 + 24);
  v6 = v5[52];
  if (v6 != *((unsigned __int8 *)a2 + 4) || (v5[53] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_12;
  if (v6 == 13)
    return result;
  if (v6 == 11)
  {
    v16 = result;
    isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 48), a2);
    result = v16;
    if ((isCalculatedEqual & 1) != 0)
      return result;
LABEL_12:
    v10 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    result = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v10 + 3);
    v11 = result + 12;
    if (result + 12 == (_DWORD *)a2)
      return result;
    if (*((_BYTE *)result + 52) == 11)
    {
      v17 = result;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v15 = result + 12;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v11);
      v11 = v15;
      result = v17;
    }
    v12 = *((unsigned __int8 *)a2 + 4);
    *((_BYTE *)result + 52) = v12;
    *((_BYTE *)result + 53) = *((_BYTE *)a2 + 5);
    if (v12 - 2 >= 9)
    {
      if (v12 > 0xD)
        goto LABEL_17;
      if (((1 << v12) & 0x3003) != 0)
      {
        *v11 = 0;
        goto LABEL_17;
      }
      if (v12 != 11)
        goto LABEL_17;
      v14 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v13 = *((unsigned __int8 *)a2 + 6);
      *((_BYTE *)result + 54) = v13;
      if (v13)
      {
        *v11 = *(_DWORD *)a2;
LABEL_17:
        *((_BYTE *)a2 + 4) = 0;
        return result;
      }
      v14 = *(_DWORD *)a2;
    }
    *v11 = v14;
    goto LABEL_17;
  }
  v7 = *((float *)v5 + 12);
  if (!v5[54])
    v7 = (float)SLODWORD(v7);
  v8 = *(float *)a2;
  if (!*((_BYTE *)a2 + 6))
    v8 = (float)*(int *)a2;
  if (v7 != v8)
    goto LABEL_12;
  return result;
}

_DWORD *WebCore::RenderStyle::setPaddingLeft(uint64_t a1, WebCore::Length *a2)
{
  _DWORD *result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  float v7;
  float v8;
  WTF *v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  int v13;
  char isCalculatedEqual;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;

  v4 = *(_QWORD *)(a1 + 8);
  result = (_DWORD *)(a1 + 8);
  v5 = *(unsigned __int8 **)(v4 + 24);
  v6 = v5[100];
  if (v6 != *((unsigned __int8 *)a2 + 4) || (v5[101] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_10;
  if (v6 == 13)
    return result;
  if (v6 == 11)
  {
    v16 = result;
    isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 96), a2);
    result = v16;
    if ((isCalculatedEqual & 1) == 0)
      goto LABEL_10;
  }
  else
  {
    v7 = *((float *)v5 + 24);
    if (!v5[102])
      v7 = (float)SLODWORD(v7);
    v8 = *(float *)a2;
    if (!*((_BYTE *)a2 + 6))
      v8 = (float)*(int *)a2;
    if (v7 != v8)
    {
LABEL_10:
      v9 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
      result = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v9 + 3);
      v10 = result + 24;
      if (result + 24 == (_DWORD *)a2)
        return result;
      if (*((_BYTE *)result + 100) == 11)
      {
        v17 = result;
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v15 = result + 24;
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v10);
        v10 = v15;
        result = v17;
      }
      v11 = *((unsigned __int8 *)a2 + 4);
      *((_BYTE *)result + 100) = v11;
      *((_BYTE *)result + 101) = *((_BYTE *)a2 + 5);
      if (v11 - 2 >= 9)
      {
        if (v11 > 0xD)
          goto LABEL_15;
        if (((1 << v11) & 0x3003) != 0)
        {
          *v10 = 0;
          goto LABEL_15;
        }
        if (v11 != 11)
          goto LABEL_15;
        v13 = *(_DWORD *)a2;
        *(_DWORD *)a2 = 0;
      }
      else
      {
        v12 = *((unsigned __int8 *)a2 + 6);
        *((_BYTE *)result + 102) = v12;
        if (v12)
        {
          *v10 = *(_DWORD *)a2;
LABEL_15:
          *((_BYTE *)a2 + 4) = 0;
          return result;
        }
        v13 = *(_DWORD *)a2;
      }
      *v10 = v13;
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::ensureTransitions(WTF **this)
{
  WTF *v1;
  uint64_t v2;
  WTF *v3;
  WTF::StringImpl *v4;
  WebCore::StyleMiscNonInheritedData *v5;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  WebCore::Animation **v13;
  uint64_t v14;
  WebCore::Animation *v15;
  WTF *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;

  v1 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(this + 1);
  v2 = *((_QWORD *)v1 + 4);
  if (*(_DWORD *)v2 != 1)
  {
    v3 = v1;
    WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v1 + 4), &v19);
    v2 = v19;
    v5 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v3 + 4);
    *((_QWORD *)v3 + 4) = v19;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
      {
        WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v5, v4);
        WTF::fastFree(v10, v11);
        v2 = *((_QWORD *)v3 + 4);
      }
      else
      {
        --*(_DWORD *)v5;
      }
    }
  }
  if (!*(_QWORD *)(v2 + 72))
  {
    v7 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    v9 = *(_QWORD *)(v2 + 72);
    *(_QWORD *)(v2 + 72) = v7;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        v12 = *(unsigned int *)(v9 + 20);
        if ((_DWORD)v12)
        {
          v13 = *(WebCore::Animation ***)(v9 + 8);
          v14 = 8 * v12;
          do
          {
            v15 = *v13;
            *v13 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 1)
              {
                WebCore::Animation::~Animation(v15, v8);
                WTF::fastFree(v17, v18);
              }
              else
              {
                --*(_DWORD *)v15;
              }
            }
            ++v13;
            v14 -= 8;
          }
          while (v14);
        }
        v16 = *(WTF **)(v9 + 8);
        if (v16)
        {
          *(_QWORD *)(v9 + 8) = 0;
          *(_DWORD *)(v9 + 16) = 0;
          WTF::fastFree(v16, v8);
        }
        WTF::fastFree((WTF *)v9, v8);
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
  }
  return *(_QWORD *)(v2 + 72);
}

WTF *WTF::DataRef<WebCore::StyleNonInheritedData>::access(WTF **a1)
{
  WTF *v1;
  WTF *result;
  WTF::StringImpl *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  WTF *v10;
  WebCore::StyleRareNonInheritedData *v11;
  WebCore::StyleMiscNonInheritedData *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::FillLayer *v20;
  WebCore::NinePieceImage::Data *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  void *v27;
  WTF *v28;
  void *v29;
  WTF *v30;
  void *v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;

  v1 = *a1;
  if (*(_DWORD *)*a1 == 1)
    return *a1;
  result = (WTF *)WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)result = 1;
  v5 = (_DWORD *)*((_QWORD *)v1 + 1);
  v6 = (_DWORD *)*((_QWORD *)v1 + 2);
  ++*v5;
  ++*v6;
  *((_QWORD *)result + 1) = v5;
  *((_QWORD *)result + 2) = v6;
  v7 = (_DWORD *)*((_QWORD *)v1 + 3);
  v8 = (_DWORD *)*((_QWORD *)v1 + 4);
  ++*v7;
  ++*v8;
  *((_QWORD *)result + 3) = v7;
  *((_QWORD *)result + 4) = v8;
  v9 = (_DWORD *)*((_QWORD *)v1 + 5);
  ++*v9;
  *((_QWORD *)result + 5) = v9;
  v10 = *a1;
  *a1 = result;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      v11 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v10 + 5);
      *((_QWORD *)v10 + 5) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v11, v4);
          WTF::fastFree(v16, v17);
        }
        else
        {
          --*(_DWORD *)v11;
        }
      }
      v12 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v10 + 4);
      *((_QWORD *)v10 + 4) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v12, v4);
          WTF::fastFree(v26, v27);
        }
        else
        {
          --*(_DWORD *)v12;
        }
      }
      v13 = *((_QWORD *)v10 + 3);
      *((_QWORD *)v10 + 3) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
        {
          if (*(_BYTE *)(v13 + 268) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 264));
          }
          if (*(_BYTE *)(v13 + 260) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 256));
          }
          if (*(_BYTE *)(v13 + 252) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 248));
          }
          if (*(_BYTE *)(v13 + 244) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 240));
          }
          if (*(_BYTE *)(v13 + 236) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 232));
          }
          if (*(_BYTE *)(v13 + 228) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 224));
          }
          if (*(_BYTE *)(v13 + 220) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 216));
          }
          if (*(_BYTE *)(v13 + 212) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 208));
          }
          v21 = *(WebCore::NinePieceImage::Data **)(v13 + 200);
          *(_QWORD *)(v13 + 200) = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 1)
            {
              WebCore::NinePieceImage::Data::~Data(v21);
              WTF::fastFree(v30, v31);
            }
            else
            {
              --*(_DWORD *)v21;
            }
          }
          v22 = *(unsigned int *)(v13 + 184);
          if ((_DWORD)v22 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v22])(&v32, v13 + 176);
          *(_DWORD *)(v13 + 184) = -1;
          v23 = *(unsigned int *)(v13 + 160);
          if ((_DWORD)v23 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v23])(&v33, v13 + 152);
          *(_DWORD *)(v13 + 160) = -1;
          v24 = *(unsigned int *)(v13 + 136);
          if ((_DWORD)v24 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v24])(&v34, v13 + 128);
          *(_DWORD *)(v13 + 136) = -1;
          v25 = *(unsigned int *)(v13 + 112);
          if ((_DWORD)v25 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v25])(&v35, v13 + 104);
          *(_DWORD *)(v13 + 112) = -1;
          if (*(_BYTE *)(v13 + 100) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 96));
          }
          if (*(_BYTE *)(v13 + 92) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 88));
          }
          if (*(_BYTE *)(v13 + 84) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 80));
          }
          if (*(_BYTE *)(v13 + 76) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 72));
          }
          if (*(_BYTE *)(v13 + 68) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 64));
          }
          if (*(_BYTE *)(v13 + 60) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 56));
          }
          if (*(_BYTE *)(v13 + 52) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 48));
          }
          if (*(_BYTE *)(v13 + 44) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 40));
          }
          if (*(_BYTE *)(v13 + 36) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 32));
          }
          if (*(_BYTE *)(v13 + 28) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 24));
          }
          if (*(_BYTE *)(v13 + 20) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 16));
          }
          if (*(_BYTE *)(v13 + 12) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 8));
          }
          WTF::fastFree((WTF *)v13, v4);
        }
        else
        {
          --*(_DWORD *)v13;
        }
      }
      v14 = *((_QWORD *)v10 + 2);
      *((_QWORD *)v10 + 2) = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
        {
          v18 = *(unsigned int *)(v14 + 40);
          if ((_DWORD)v18 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v18])(&v36, v14 + 32);
          *(_DWORD *)(v14 + 40) = -1;
          v19 = *(unsigned int *)(v14 + 24);
          if ((_DWORD)v19 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v19])(&v37, v14 + 16);
          *(_DWORD *)(v14 + 24) = -1;
          v20 = *(WebCore::FillLayer **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 1)
            {
              WebCore::FillLayer::~FillLayer(v20);
              WTF::fastFree(v28, v29);
            }
            else
            {
              --*(_DWORD *)v20;
            }
          }
          WTF::fastFree((WTF *)v14, v4);
        }
        else
        {
          --*(_DWORD *)v14;
        }
      }
      v15 = *((_QWORD *)v10 + 1);
      *((_QWORD *)v10 + 1) = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
        {
          if (*(_BYTE *)(v15 + 56) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 52));
          }
          if (*(_BYTE *)(v15 + 48) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 44));
          }
          if (*(_BYTE *)(v15 + 40) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 36));
          }
          if (*(_BYTE *)(v15 + 32) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 28));
          }
          if (*(_BYTE *)(v15 + 24) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 20));
          }
          if (*(_BYTE *)(v15 + 16) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 12));
          }
          if (*(_BYTE *)(v15 + 8) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 4));
          }
          WTF::fastFree((WTF *)v15, v4);
        }
        else
        {
          --*(_DWORD *)v15;
        }
      }
      WTF::fastFree(v10, v4);
      return *a1;
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  return result;
}

uint64_t WebCore::Page::hiddenPageCSSAnimationSuspensionStateChanged(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  if ((*(_WORD *)(this + 658) & 4) == 0)
  {
    v1 = this;
    v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v2 = off_1E3401100;
    v2[1] = v1;
    v3 = v2;
    WebCore::Page::forEachDocument(v1, &v3);
    return (*(uint64_t (**)(_QWORD *))(*v2 + 8))(v2);
  }
  return this;
}

uint64_t WebCore::Page::storageBlockingStateChanged(WebCore::Page *this)
{
  uint64_t v2;
  uint64_t v4;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = off_1E3400F48;
  v4 = v2;
  WebCore::Page::forEachDocument((uint64_t)this, &v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WebCore::Page::userAgentChanged(WebCore::Page *this)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E3400E58;
  v11 = (uint64_t)v2;
  v3 = *((_QWORD *)this + 20);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  WebCore::Page::forEachDocumentFromMainFrame(v3, &v11);
  do
  {
    v6 = __ldaxr(v4);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v4));
  if (!v7)
  {
    atomic_store(1u, v4);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = off_1E31FE290;
    v9[1] = v4;
    v12 = v9;
    WTF::ensureOnMainThread();
    v10 = v12;
    v12 = 0;
    if (v10)
      (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  }
  result = v11;
  if (v11)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return result;
}

uint64_t WebCore::VisibleSelection::VisibleSelection(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_DWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 12) &= 0xF0u;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(_BYTE *)(this + 28) &= 0xF0u;
  *(_QWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(_BYTE *)(this + 44) &= 0xF0u;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(_BYTE *)(this + 60) &= 0xF0u;
  *(_QWORD *)(this + 64) = 0;
  *(_DWORD *)(this + 72) = 0;
  *(_BYTE *)(this + 76) &= 0xF0u;
  *(_QWORD *)(this + 80) = 0;
  *(_DWORD *)(this + 88) = 0;
  *(_BYTE *)(this + 92) &= 0xF0u;
  *(_WORD *)(this + 96) = 1;
  *(_BYTE *)(this + 98) = *(_BYTE *)(this + 98) & 0xFC | 1;
  return this;
}

{
  *(_QWORD *)this = 0;
  *(_DWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 12) &= 0xF0u;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(_BYTE *)(this + 28) &= 0xF0u;
  *(_QWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(_BYTE *)(this + 44) &= 0xF0u;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(_BYTE *)(this + 60) &= 0xF0u;
  *(_QWORD *)(this + 64) = 0;
  *(_DWORD *)(this + 72) = 0;
  *(_BYTE *)(this + 76) &= 0xF0u;
  *(_QWORD *)(this + 80) = 0;
  *(_DWORD *)(this + 88) = 0;
  *(_BYTE *)(this + 92) &= 0xF0u;
  *(_WORD *)(this + 96) = 1;
  *(_BYTE *)(this + 98) = *(_BYTE *)(this + 98) & 0xFC | 1;
  return this;
}

double WebCore::DatabaseTracker::trackerWithDatabasePath@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v4;
  double result;

  v4 = WTF::fastMalloc((WTF *)0x88);
  *(_BYTE *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 16) = 0;
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_DWORD *)(v4 + 40) = -1;
  *(_WORD *)(v4 + 44) = 0;
  *(_BYTE *)(v4 + 46) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_BYTE *)(v4 + 72) = 0;
  *(_DWORD *)(v4 + 76) = 1;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 0;
  WTF::String::isolatedCopy();
  result = 0.0;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *a1 = v4;
  return result;
}

Class ___ZN3PALL18initAVAudioSessionEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7D5F8 != -1)
    dispatch_once(&qword_1ECE7D5F8, block);
  result = objc_getClass("AVAudioSession");
  qword_1ECE7DF00 = (uint64_t)result;
  PAL::getAVAudioSessionClass = PAL::AVAudioSessionFunction;
  return result;
}

uint64_t *WebCore::Element::updateEffectiveLangState(WebCore::Element *this, void *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v6;
  _QWORD *Attribute;
  uint64_t *result;
  uint64_t *v9;
  WebCore::Document *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;

  v6 = *((_QWORD *)this + 2);
  if ((v6 & 0x400000000000000) != 0)
  {
    v9 = &WebCore::XMLNames::langAttr;
  }
  else
  {
    if ((v6 & 0x200000000000000) == 0)
    {
      Attribute = (_QWORD *)MEMORY[0x1E0CBF2F8];
      goto LABEL_4;
    }
    v9 = &WebCore::HTMLNames::langAttr;
  }
  Attribute = (_QWORD *)WebCore::Element::getAttribute(this, (const WebCore::QualifiedName *)v9, a3, a4, a5);
LABEL_4:
  if (!*Attribute)
    return (uint64_t *)WebCore::Element::updateEffectiveLangStateFromParent((unsigned int *)this, a2);
  v10 = *(WebCore::Document **)(*((_QWORD *)this + 5) + 8);
  v11 = 1720;
  if (!*((_QWORD *)v10 + 215))
    v11 = 1712;
  if (*Attribute == *(_QWORD *)((char *)v10 + v11))
  {
    if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
    {
      WebCore::ElementRareData::setEffectiveLang((WebCore::ElementRareData *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL), (const WTF::AtomString *)a2);
      v10 = *(WebCore::Document **)(*((_QWORD *)this + 5) + 8);
    }
    result = WebCore::Document::addElementWithLangAttrMatchingDocumentElement(v10, this);
    *((_WORD *)this + 15) |= 8u;
  }
  else
  {
    if ((*((_BYTE *)this + 23) & 6) != 0 && (*((_WORD *)this + 15) & 8) != 0)
      WebCore::Document::removeElementWithLangAttrMatchingDocumentElement(v10, this);
    *((_WORD *)this + 15) &= ~8u;
    v12 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
    if (!v12)
    {
      WebCore::Node::materializeRareData(this);
      v12 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
    }
    v13 = (_DWORD *)*Attribute;
    if (*Attribute)
      *v13 += 2;
    result = *(uint64_t **)(v12 + 64);
    *(_QWORD *)(v12 + 64) = v13;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebCore::HTMLLinkElement::didFinishInsertingNode(WTF::StringImpl **this, __n128 a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::String *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  __int128 v12;
  __int128 v13;
  WTF::StringImpl *v14;
  __int128 v15;
  __int128 v16;

  WebCore::Element::getNonEmptyURLAttribute((WebCore::Element *)this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::hrefAttr, a4, a5, (WTF::URL *)&v14, a2);
  v9 = v14;
  v14 = 0;
  v10 = this[29];
  this[29] = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v6);
      v11 = v14;
    }
    else
    {
      v11 = 0;
      *(_DWORD *)v10 -= 2;
    }
  }
  else
  {
    v11 = 0;
  }
  v12 = v15;
  v13 = v16;
  LODWORD(v15) = v15 & 0xFFFFFFFE;
  *((_OWORD *)this + 15) = v12;
  *((_OWORD *)this + 16) = v13;
  v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v6);
    else
      *(_DWORD *)v11 -= 2;
  }
  WebCore::HTMLLinkElement::process((WebCore::HTMLLinkElement *)this, (unsigned __int8 *)v6, v7, v8);
}

WTF::StringImpl *WebCore::Element::getNonEmptyURLAttribute@<X0>(WebCore::Element *this@<X0>, const WebCore::QualifiedName *a2@<X1>, uint64_t a3@<X2>, WTF::String *a4@<X3>, WTF::URL *a5@<X8>, __n128 a6@<Q0>)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;

  WebCore::Element::getAttribute(this, a2, a3, a4, a6);
  WTF::String::trim();
  if (v10 && *((_DWORD *)v10 + 1))
  {
    WebCore::Document::completeURL(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8), &v10, *(_QWORD *)(*((_QWORD *)this + 5) + 8) + 848, 0, a5);
  }
  else
  {
    *(_QWORD *)a5 = 0;
    WTF::URL::invalidate(a5);
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::Element::getAttribute(WebCore::Element *this, const WebCore::QualifiedName *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  char v20;

  v5 = *((_QWORD *)this + 13);
  if (!v5)
    return MEMORY[0x1E0CBF2F8];
  if (*(_QWORD *)a2 == WebCore::HTMLNames::styleAttr && (*(_BYTE *)(v5 + 4) & 8) != 0)
  {
    WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(this, (unsigned __int8 *)a2, a5, a3, a4);
  }
  else if ((*((_WORD *)this + 14) & 0x20) != 0)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, const WebCore::QualifiedName *))(**((_QWORD **)this + 20) + 48))(&v19, *((_QWORD *)this + 20), a2);
    if (v20)
    {
      WTF::AtomString::AtomString((WTF::AtomString *)&v18, &v19);
      WebCore::Element::setSynchronizedLazyAttribute((WTF::StringImpl **)this, (WebCore::QualifiedName::QualifiedNameImpl **)a2, &v18);
      v16 = v18;
      v18 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
      if (v20)
      {
        v17 = v19;
        v19 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v15);
          else
            *(_DWORD *)v17 -= 2;
        }
      }
    }
  }
  v8 = *((_QWORD *)this + 13);
  v9 = *(_DWORD *)(v8 + 4);
  if (v8 && (v9 & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 40);
    LODWORD(v11) = *(_DWORD *)(v8 + 52);
  }
  else
  {
    v10 = v8 + 32;
    LODWORD(v11) = v9 >> 5;
  }
  if (!(_DWORD)v11)
    return MEMORY[0x1E0CBF2F8];
  v12 = *(_QWORD *)a2;
  v11 = v11;
  for (result = v10 + 8; ; result += 16)
  {
    v14 = *(_QWORD *)(result - 8);
    if (v14 == v12 || *(_QWORD *)(v14 + 24) == *(_QWORD *)(v12 + 24) && *(_QWORD *)(v14 + 32) == *(_QWORD *)(v12 + 32))
      break;
    if (!--v11)
      return MEMORY[0x1E0CBF2F8];
  }
  return result;
}

uint64_t WebCore::Node::materializeRareData(WebCore::Node *this)
{
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::ElementRareData *v6;
  void *v7;

  if ((*((_WORD *)this + 14) & 8) != 0)
  {
    result = WTF::fastCompactMalloc((WTF *)0x100);
    v4 = result;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 24) = 1;
    *(_DWORD *)(result + 36) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 25) = 0;
    *(_BYTE *)(result + 33) = 0;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_QWORD *)(result + 144) = 0x3F0000003FLL;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_BYTE *)(result + 248) = 0;
  }
  else
  {
    result = WTF::fastCompactMalloc((WTF *)0x20);
    v4 = result;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = 0;
    *(_WORD *)(result + 24) = 0;
  }
  v5 = *((_QWORD *)this + 9);
  v6 = (WebCore::ElementRareData *)(v5 & 0xFFFFFFFFFFFFLL);
  if ((v5 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(_BYTE *)((v5 & 0xFFFFFFFFFFFFLL) + 0x18))
      WebCore::ElementRareData::~ElementRareData(v6, v3);
    else
      std::__destroy_at[abi:sn180100]<WebCore::NodeRareData,0>((uint64_t)v6, v3);
    result = WTF::fastFree(v6, v7);
    v5 = *((_QWORD *)this + 9);
  }
  *((_QWORD *)this + 9) = v5 & 0xFFFF000000000000 | v4;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLScriptElement::fetchPriorityHint(WebCore::HTMLScriptElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __int16 v7;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this - 9) + 8) + 680) + 672) & 0x8000000000000000) == 0)
    return 2;
  v1 = *((_QWORD *)this - 1);
  if (v1)
  {
    v2 = *(_DWORD *)(v1 + 4);
    if ((v2 & 1) != 0)
    {
      v3 = *(_QWORD *)(v1 + 40);
      LODWORD(v4) = *(_DWORD *)(v1 + 52);
      if ((_DWORD)v4)
      {
LABEL_5:
        v4 = v4;
        v5 = (uint64_t *)(v3 + 8);
        while (1)
        {
          v6 = *(v5 - 1);
          if (v6 == WebCore::HTMLNames::fetchpriorityAttr
            || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::fetchpriorityAttr + 24)
            && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::fetchpriorityAttr + 32))
          {
            goto LABEL_14;
          }
          v5 += 2;
          if (!--v4)
          {
            v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
            goto LABEL_14;
          }
        }
      }
    }
    else
    {
      v3 = v1 + 32;
      LODWORD(v4) = v2 >> 5;
      if ((_DWORD)v4)
        goto LABEL_5;
    }
  }
  v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
LABEL_14:
  v7 = WebCore::parseEnumerationFromString<WebCore::RequestPriority>(v5);
  if ((v7 & 0xFF00) != 0)
    return v7;
  else
    return 2;
}

uint64_t WebCore::HTTPHeaderMap::get@<X0>(uint64_t a1@<X0>, WebCore::HTTPHeaderNamesHash *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  _DWORD **v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  _DWORD *v29;
  unsigned __int16 v30;

  v30 = 0;
  result = WebCore::findHTTPHeaderName(a2, a3, &v30);
  if (!(_DWORD)result)
  {
    v12 = *(unsigned int *)(a1 + 28);
    if (!(_DWORD)v12)
      goto LABEL_42;
    v13 = 0;
    v14 = *(_QWORD *)(a1 + 16);
    v15 = (unint64_t)a3 & 0xFF00000000;
    while (1)
    {
      v16 = *(_QWORD *)(v14 + 16 * v13);
      if (v16)
      {
        v17 = *(unsigned __int8 **)(v16 + 8);
        v18 = *(unsigned int *)(v16 + 4) | ((unint64_t)((*(_DWORD *)(v16 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v17 = 0;
        v18 = 0x100000000;
      }
      if ((_DWORD)v18 == (_DWORD)a3)
      {
        v19 = v18;
        if ((v18 & 0x100000000) != 0)
        {
          if (v15)
          {
            if (!(_DWORD)a3)
              goto LABEL_43;
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v17) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                        + *(unsigned __int8 *)a2))
            {
              v20 = 1;
              do
              {
                v21 = v20;
                if (v19 == v20)
                  break;
                v22 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v17[v20]);
                result = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)a2 + v20++));
              }
              while (v22 == (_DWORD)result);
              goto LABEL_19;
            }
          }
          else
          {
            if (!(_DWORD)v18)
              goto LABEL_43;
            if ((*(unsigned __int16 *)a2 | (32 * (*(unsigned __int16 *)a2 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v17))
            {
              v25 = 1;
              do
              {
                v21 = v25;
                if (v19 == v25)
                  break;
                v26 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v17[v25]);
                result = *((unsigned __int16 *)a2 + v25) | (32
                                                          * (*((unsigned __int16 *)a2 + v25)
                                                                         - 65 < 0x1A));
                ++v25;
              }
              while ((_DWORD)result == v26);
              goto LABEL_19;
            }
          }
        }
        else if (v15)
        {
          if (!(_DWORD)v18)
            goto LABEL_43;
          if ((*(unsigned __int16 *)v17 | (32 * (*(unsigned __int16 *)v17 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)a2))
          {
            v23 = 1;
            do
            {
              v21 = v23;
              if (v19 == v23)
                break;
              v24 = *(unsigned __int16 *)&v17[2 * v23] | (32
                                                        * (*(unsigned __int16 *)&v17[2 * v23] - 65 < 0x1A));
              result = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)a2 + v23++));
            }
            while (v24 == (_DWORD)result);
            goto LABEL_19;
          }
        }
        else
        {
          if (!(_DWORD)v18)
          {
LABEL_43:
            if (v13 < v12)
            {
              v29 = *(_DWORD **)(v14 + 16 * v13 + 8);
              if (v29)
                goto LABEL_45;
              goto LABEL_46;
            }
LABEL_50:
            __break(0xC471u);
            JUMPOUT(0x1943EF908);
          }
          if ((*(unsigned __int16 *)v17 | (32 * (*(unsigned __int16 *)v17 - 65 < 0x1A))) == (*(unsigned __int16 *)a2 | (32 * (*(unsigned __int16 *)a2 - 65 < 0x1A))))
          {
            v27 = 1;
            do
            {
              v21 = v27;
              if (v19 == v27)
                break;
              v28 = *(unsigned __int16 *)&v17[2 * v27] | (32
                                                        * (*(unsigned __int16 *)&v17[2 * v27] - 65 < 0x1A));
              result = *((unsigned __int16 *)a2 + v27) | (32
                                                        * (*((unsigned __int16 *)a2 + v27)
                                                                       - 65 < 0x1A));
              ++v27;
            }
            while (v28 == (_DWORD)result);
LABEL_19:
            if (v21 >= v19)
              goto LABEL_43;
          }
        }
      }
      if (++v13 == v12)
        goto LABEL_42;
    }
  }
  v9 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v9)
  {
LABEL_42:
    v29 = 0;
    goto LABEL_46;
  }
  v10 = 0;
  v11 = (_DWORD **)(*(_QWORD *)a1 + 8);
  while (*((unsigned __int16 *)v11 - 4) != v30)
  {
    ++v10;
    v11 += 2;
    if (v9 == v10)
      goto LABEL_42;
  }
  if (v10 >= v9)
    goto LABEL_50;
  v29 = *v11;
  if (*v11)
LABEL_45:
    *v29 += 2;
LABEL_46:
  *a4 = v29;
  return result;
}

void WebCore::HTMLLinkElement::process(WebCore::HTMLLinkElement *this, unsigned __int8 *a2, uint64_t a3, WTF::String *a4)
{
  uint64_t v5;
  _DWORD *v6;
  __n128 v7;
  __int128 v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD **v19;
  uint64_t v20;
  _DWORD *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD **v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD **v31;
  uint64_t v32;
  _DWORD *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD **v37;
  uint64_t v38;
  _DWORD *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  _DWORD **v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD **v47;
  _DWORD *v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int16 *v56;
  unint64_t v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  __int16 v66;
  WTF::StringImpl *v67;
  _BOOL4 v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl **v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  int v83;
  uint64_t v84;
  unsigned int **v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  WTF::StringImpl *v90;
  uint64_t v91;
  WTF::String *v92;
  char v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  __int16 v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  _DWORD **v104;
  uint64_t v105;
  _DWORD *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  __n128 v112;
  uint64_t v113;
  WTF::StringImpl **v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  unsigned int *v117;
  WTF::StringImpl *v118;
  unsigned int v119;
  unsigned int v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  __int16 v130;
  char v131;
  char v132;
  WTF::StringImpl *v133;
  __int128 v134;
  char v135;
  _DWORD *v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WebCore::Document *v147;
  WebCore::CachedResourceLoader *v148;
  WebCore::CachedResource *v149;
  void *v150;
  unsigned int *v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  WebCore::CachedResourceClient *v156;
  void *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  void *v160;
  WTF *v161;
  void *v162;
  __int16 v163;
  __int16 v164;
  WTF::StringImpl *v165;
  char v166;
  WTF::StringImpl *v167;
  uint64_t v168;
  uint64_t v169;
  WebCore::DocumentLoader *v170;
  WTF::StringImpl *v171;
  WebCore::CachedResource *v172;
  unsigned int *v173;
  WTF::StringImpl *v174;
  unsigned int v176;
  const char *v177;
  uint64_t v178;
  int v179;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _DWORD *v185;
  unsigned int *v186;
  __int16 v187;
  _DWORD *v188;
  __n128 v189;
  __int128 v190;
  _DWORD *v191;
  _DWORD *v192;
  _DWORD *v193;
  _DWORD *v194;
  _DWORD *v195;
  _DWORD *v196;
  _DWORD *v197;
  char v198;
  char v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204[5];
  uint64_t v205;
  WTF::StringImpl *v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  int v210;
  char v211;
  uint64_t v212;
  _DWORD *v213;
  uint64_t v214;
  char v215;
  char v216;
  char v217;
  uint64_t v218;
  WTF::StringImpl *v219;
  uint64_t v220;
  WTF::StringImpl *v221;
  char v222;
  WTF::StringImpl *v223;
  __int16 v224;
  WebCore::Document *v225;
  unsigned int *v226;
  WTF::StringImpl *v227;
  __int128 v228;
  __int128 v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  int v233;
  int v234;
  char v235;
  __int16 v236;
  uint64_t v237;
  uint64_t v238;
  char v239;
  __int128 v240;
  WTF::StringImpl *v241;
  uint64_t v242;

  v242 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 22) & 8) != 0 && (*((_BYTE *)this + 291) & 8) == 0)
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    *(_DWORD *)(v5 + 24) += 2;
    v187 = *(_WORD *)((char *)this + 289);
    v6 = (_DWORD *)*((_QWORD *)this + 29);
    if (v6)
      *v6 += 2;
    v188 = v6;
    v7 = *((__n128 *)this + 15);
    v8 = *((_OWORD *)this + 16);
    v189 = v7;
    v190 = v8;
    v9 = *((_QWORD *)this + 13);
    if (v9
      && ((v10 = *(_DWORD *)(v9 + 4), (v10 & 1) != 0)
        ? (v11 = *(_QWORD *)(v9 + 40), LODWORD(v12) = *(_DWORD *)(v9 + 52))
        : (v11 = v9 + 32, LODWORD(v12) = v10 >> 5),
          (_DWORD)v12))
    {
      v12 = v12;
      v13 = (_DWORD **)(v11 + 8);
      while (1)
      {
        v14 = (uint64_t)*(v13 - 1);
        if (v14 == WebCore::HTMLNames::asAttr
          || *(_QWORD *)(v14 + 24) == *(_QWORD *)(WebCore::HTMLNames::asAttr + 24)
          && *(_QWORD *)(v14 + 32) == *(_QWORD *)(WebCore::HTMLNames::asAttr + 32))
        {
          break;
        }
        v13 += 2;
        if (!--v12)
        {
          v13 = (_DWORD **)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v13 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    }
    v15 = *v13;
    if (v15)
      *v15 += 2;
    v191 = v15;
    if (v9
      && ((v16 = *(_DWORD *)(v9 + 4), (v16 & 1) != 0)
        ? (v17 = *(_QWORD *)(v9 + 40), LODWORD(v18) = *(_DWORD *)(v9 + 52))
        : (v17 = v9 + 32, LODWORD(v18) = v16 >> 5),
          (_DWORD)v18))
    {
      v18 = v18;
      v19 = (_DWORD **)(v17 + 8);
      while (1)
      {
        v20 = (uint64_t)*(v19 - 1);
        if (v20 == WebCore::HTMLNames::mediaAttr
          || *(_QWORD *)(v20 + 24) == *(_QWORD *)(WebCore::HTMLNames::mediaAttr + 24)
          && *(_QWORD *)(v20 + 32) == *(_QWORD *)(WebCore::HTMLNames::mediaAttr + 32))
        {
          break;
        }
        v19 += 2;
        if (!--v18)
        {
          v19 = (_DWORD **)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v19 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    }
    v21 = *v19;
    if (v21)
      *v21 += 2;
    v192 = v21;
    if (v9
      && ((v22 = *(_DWORD *)(v9 + 4), (v22 & 1) != 0)
        ? (v23 = *(_QWORD *)(v9 + 40), LODWORD(v24) = *(_DWORD *)(v9 + 52))
        : (v23 = v9 + 32, LODWORD(v24) = v22 >> 5),
          (_DWORD)v24))
    {
      v24 = v24;
      v25 = (_DWORD **)(v23 + 8);
      while (1)
      {
        v26 = (uint64_t)*(v25 - 1);
        if (v26 == WebCore::HTMLNames::typeAttr
          || *(_QWORD *)(v26 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
          && *(_QWORD *)(v26 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
        {
          break;
        }
        v25 += 2;
        if (!--v24)
        {
          v25 = (_DWORD **)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v25 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    }
    v27 = *v25;
    if (v27)
      *v27 += 2;
    v193 = v27;
    if (v9
      && ((v28 = *(_DWORD *)(v9 + 4), (v28 & 1) != 0)
        ? (v29 = *(_QWORD *)(v9 + 40), LODWORD(v30) = *(_DWORD *)(v9 + 52))
        : (v29 = v9 + 32, LODWORD(v30) = v28 >> 5),
          (_DWORD)v30))
    {
      v30 = v30;
      v31 = (_DWORD **)(v29 + 8);
      while (1)
      {
        v32 = (uint64_t)*(v31 - 1);
        if (v32 == WebCore::HTMLNames::crossoriginAttr
          || *(_QWORD *)(v32 + 24) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 24)
          && *(_QWORD *)(v32 + 32) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 32))
        {
          break;
        }
        v31 += 2;
        if (!--v30)
        {
          v31 = (_DWORD **)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v31 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    }
    v33 = *v31;
    if (v33)
      *v33 += 2;
    v194 = v33;
    if (v9
      && ((v34 = *(_DWORD *)(v9 + 4), (v34 & 1) != 0)
        ? (v35 = *(_QWORD *)(v9 + 40), LODWORD(v36) = *(_DWORD *)(v9 + 52))
        : (v35 = v9 + 32, LODWORD(v36) = v34 >> 5),
          (_DWORD)v36))
    {
      v36 = v36;
      v37 = (_DWORD **)(v35 + 8);
      while (1)
      {
        v38 = (uint64_t)*(v37 - 1);
        if (v38 == WebCore::HTMLNames::imagesrcsetAttr
          || *(_QWORD *)(v38 + 24) == *(_QWORD *)(WebCore::HTMLNames::imagesrcsetAttr + 24)
          && *(_QWORD *)(v38 + 32) == *(_QWORD *)(WebCore::HTMLNames::imagesrcsetAttr + 32))
        {
          break;
        }
        v37 += 2;
        if (!--v36)
        {
          v37 = (_DWORD **)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v37 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    }
    v39 = *v37;
    if (v39)
      *v39 += 2;
    v195 = v39;
    if (v9
      && ((v40 = *(_DWORD *)(v9 + 4), (v40 & 1) != 0)
        ? (v41 = *(_QWORD *)(v9 + 40), v42 = *(_DWORD *)(v9 + 52))
        : (v41 = v9 + 32, v42 = v40 >> 5),
          v42))
    {
      v43 = v42;
      v44 = (_DWORD **)(v41 + 8);
      while (1)
      {
        v45 = (uint64_t)*(v44 - 1);
        if (v45 == WebCore::HTMLNames::imagesizesAttr
          || *(_QWORD *)(v45 + 24) == *(_QWORD *)(WebCore::HTMLNames::imagesizesAttr + 24)
          && *(_QWORD *)(v45 + 32) == *(_QWORD *)(WebCore::HTMLNames::imagesizesAttr + 32))
        {
          break;
        }
        v44 += 2;
        if (!--v43)
        {
          v44 = (_DWORD **)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v44 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    }
    v46 = *v44;
    if (v46)
      *v46 += 2;
    v196 = v46;
    if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0
      && WebCore::Element::isNonceable(this, a2, a3, a4, v7))
    {
      v47 = (_DWORD **)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 216);
    }
    else
    {
      v47 = (_DWORD **)MEMORY[0x1E0CBF3B8];
    }
    v48 = *v47;
    if (v48)
      *v48 += 2;
    v197 = v48;
    v49 = *((_QWORD *)this + 13);
    if (v49
      && ((v50 = *(_DWORD *)(v49 + 4), (v50 & 1) != 0)
        ? (v51 = *(_QWORD *)(v49 + 40), LODWORD(v52) = *(_DWORD *)(v49 + 52))
        : (v51 = v49 + 32, LODWORD(v52) = v50 >> 5),
          (_DWORD)v52))
    {
      v52 = v52;
      v53 = (uint64_t *)(v51 + 8);
      while (1)
      {
        v54 = *(v53 - 1);
        if (v54 == WebCore::HTMLNames::referrerpolicyAttr
          || *(_QWORD *)(v54 + 24) == *(_QWORD *)(WebCore::HTMLNames::referrerpolicyAttr + 24)
          && *(_QWORD *)(v54 + 32) == *(_QWORD *)(WebCore::HTMLNames::referrerpolicyAttr + 32))
        {
          break;
        }
        v53 += 2;
        if (!--v52)
        {
          v53 = (uint64_t *)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v53 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    }
    v55 = *v53;
    if (v55)
    {
      v56 = *(unsigned __int16 **)(v55 + 8);
      v57 = *(unsigned int *)(v55 + 4) | ((unint64_t)((*(_DWORD *)(v55 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v56 = 0;
      v57 = 0x100000000;
    }
    v58 = 2;
    v59 = (unsigned __int16)WebCore::parseReferrerPolicy(v56, v57, 2);
    if (v59 <= 0x100)
      LOBYTE(v59) = 0;
    v198 = v59;
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 672) & 0x8000000000000000) != 0)
    {
      v60 = *((_QWORD *)this + 13);
      if (v60
        && ((v61 = *(_DWORD *)(v60 + 4), (v61 & 1) != 0)
          ? (v62 = *(_QWORD *)(v60 + 40), LODWORD(v63) = *(_DWORD *)(v60 + 52))
          : (v62 = v60 + 32, LODWORD(v63) = v61 >> 5),
            (_DWORD)v63))
      {
        v63 = v63;
        v64 = (uint64_t *)(v62 + 8);
        while (1)
        {
          v65 = *(v64 - 1);
          if (v65 == WebCore::HTMLNames::fetchpriorityAttr
            || *(_QWORD *)(v65 + 24) == *(_QWORD *)(WebCore::HTMLNames::fetchpriorityAttr + 24)
            && *(_QWORD *)(v65 + 32) == *(_QWORD *)(WebCore::HTMLNames::fetchpriorityAttr + 32))
          {
            break;
          }
          v64 += 2;
          if (!--v63)
          {
            v64 = (uint64_t *)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      else
      {
        v64 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      }
      v66 = WebCore::parseEnumerationFromString<WebCore::RequestPriority>(v64);
      if ((v66 & 0xFF00) != 0)
        v58 = v66;
      else
        v58 = 2;
    }
    v199 = v58;
    WebCore::LinkLoader::loadLink((WebCore::HTMLLinkElement *)((char *)this + 144), (const WebCore::LinkLoadParameters *)&v187, (WebCore::Document *)v5);
    if ((*((_BYTE *)this + 290) & 1) == 0)
      goto LABEL_412;
    if (!*((_QWORD *)this + 26))
      goto LABEL_103;
    WebCore::ParsedContentType::create((WTF::StringImpl **)this + 26, (WTF::StringImpl *)1, (uint64_t)&v219);
    if (!v222)
      goto LABEL_412;
    v165 = v221;
    if (v221)
      *(_DWORD *)v221 += 2;
    v201 = v165;
    v166 = WTF::equalLettersIgnoringASCIICase((uint64_t *)&v201, "text/css", 9uLL);
    v167 = v201;
    v201 = 0;
    if (v167)
    {
      if (*(_DWORD *)v167 == 2)
        WTF::StringImpl::destroy(v167, v67);
      else
        *(_DWORD *)v167 -= 2;
    }
    if (v222)
      WebCore::ParsedContentType::~ParsedContentType((WebCore::ParsedContentType *)&v219, v67);
    if ((v166 & 1) != 0)
    {
LABEL_103:
      v68 = 1;
    }
    else
    {
LABEL_412:
      if ((*(_QWORD *)(*(_QWORD *)(v5 + 680) + 696) & 0x100000000000000) == 0 || !*((_QWORD *)this + 26))
        goto LABEL_319;
      v68 = WTF::StringImpl::findIgnoringASCIICase() != -1;
    }
    if (*((_BYTE *)this + 288) != 2 && v68)
    {
      v69 = *(_QWORD *)(v5 + 528);
      if (v69)
      {
        if (*(_QWORD *)(v69 + 8) && (*((_BYTE *)this + 240) & 1) != 0)
        {
          v70 = *((_QWORD *)this + 13);
          if (v70
            && ((v71 = *(_DWORD *)(v70 + 4), (v71 & 1) != 0)
              ? (v72 = *(_QWORD *)(v70 + 40), LODWORD(v73) = *(_DWORD *)(v70 + 52))
              : (v72 = v70 + 32, LODWORD(v73) = v71 >> 5),
                (_DWORD)v73))
          {
            v73 = v73;
            v74 = (WTF::StringImpl **)(v72 + 8);
            while (1)
            {
              v75 = (uint64_t)*(v74 - 1);
              if (v75 == WebCore::HTMLNames::charsetAttr
                || *(_QWORD *)(v75 + 24) == *(_QWORD *)(WebCore::HTMLNames::charsetAttr + 24)
                && *(_QWORD *)(v75 + 32) == *(_QWORD *)(WebCore::HTMLNames::charsetAttr + 32))
              {
                break;
              }
              v74 += 2;
              if (!--v73)
              {
                v74 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
                break;
              }
            }
          }
          else
          {
            v74 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
          }
          v76 = *v74;
          if (*v74)
          {
            v77 = *((unsigned int *)v76 + 1);
            *(_DWORD *)v76 += 2;
            v78 = *((_QWORD *)v76 + 1);
            v79 = v77 | ((unint64_t)((*((_DWORD *)v76 + 4) >> 2) & 1) << 32);
          }
          else
          {
            v78 = 0;
            v79 = 0x100000000;
          }
          v219 = (WTF::StringImpl *)PAL::atomCanonicalTextEncodingName(v78, (const char *)v79);
          v220 = v80;
          if (v80 && PAL::nonBackslashEncodings)
          {
            if (*(_QWORD *)PAL::nonBackslashEncodings)
              WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)&v219);
          }
          else if (!v80)
          {
            WebCore::Document::encoding(v5, 0, &v219);
            v82 = v219;
            if (v219)
            {
              v83 = *(_DWORD *)v219;
              *(_DWORD *)v219 += 2;
              if (v83)
                *(_DWORD *)v82 = v83;
              else
                WTF::StringImpl::destroy(v82, v81);
            }
            if (v76)
            {
              if (*(_DWORD *)v76 == 2)
                WTF::StringImpl::destroy(v76, v81);
              else
                *(_DWORD *)v76 -= 2;
            }
            v76 = v82;
          }
          v85 = (unsigned int **)((char *)this + 192);
          v84 = *((_QWORD *)this + 24);
          if (v84)
          {
            do
              v86 = __ldaxr((unsigned int *)v84);
            while (__stlxr(v86 + 1, (unsigned int *)v84));
            v226 = (unsigned int *)v84;
            v87 = *(_QWORD *)(v84 + 8);
            if (v87)
            {
              v201 = (WTF::StringImpl *)&v226;
              ++*(_DWORD *)(v87 + 548);
              v88 = *(_QWORD *)(v87 + 488);
              if (v88)
              {
                if (*(_QWORD *)(v88 + 8))
                  WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v87 + 464), (uint64_t *)&v201, (uint64_t)&v219);
              }
            }
          }
          else
          {
            v226 = 0;
          }
          WebCore::CachedResourceHandleBase::setResource((uint64_t *)this + 24, 0);
          if (v226 && *((_QWORD *)v226 + 1))
          {
            WebCore::HTMLLinkElement::removePendingSheet(this);
            if (v226)
              v172 = (WebCore::CachedResource *)*((_QWORD *)v226 + 1);
            else
              v172 = 0;
            WebCore::CachedResource::removeClient(v172, (unsigned int **)this + 14);
          }
          WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v226, v89);
          if ((*((_BYTE *)this + 22) & 8) == 0)
            goto LABEL_263;
          *((_BYTE *)this + 291) |= 1u;
          if (!WebCore::HTMLLinkElement::mediaAttributeMatches(this))
          {
            if (*((unsigned __int8 *)this + 292) <= 1u)
              *((_BYTE *)this + 292) = 2;
            goto LABEL_340;
          }
          if (*((_BYTE *)this + 288))
          {
            if (!*((_BYTE *)this + 292))
            {
              *((_BYTE *)this + 292) = 1;
              WebCore::Style::Scope::addPendingSheet(*((WebCore::Style::Scope **)this + 23), this);
            }
          }
          else
          {
            v93 = *((_BYTE *)this + 290);
            if ((v93 & 2) != 0)
              v94 = 2;
            else
              v94 = 1;
            if (*((unsigned __int8 *)this + 292) < v94)
            {
              *((_BYTE *)this + 292) = v94;
              if ((v93 & 2) == 0)
              {
                v95 = *((_QWORD *)this + 23);
                v96 = *((_QWORD *)this + 4);
                if (v96 && (v97 = *(_WORD *)(v96 + 28), (v97 & 8) != 0))
                {
                  while ((v97 & 0x10) == 0
                       || *(_QWORD *)(*(_QWORD *)(v96 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::headTag + 24))
                  {
                    v96 = *(_QWORD *)(v96 + 32);
                    if (v96)
                    {
                      v97 = *(_WORD *)(v96 + 28);
                      if ((v97 & 8) != 0)
                        continue;
                    }
                    goto LABEL_158;
                  }
                  v98 = v95 + 160;
                }
                else
                {
LABEL_158:
                  v98 = v95 + 176;
                }
                WTF::WeakHashSet<WebCore::Element const,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>(v98, this, (uint64_t)&v219);
                goto LABEL_160;
              }
LABEL_340:
              v99 = 1;
              goto LABEL_161;
            }
            if ((*((_BYTE *)this + 290) & 2) != 0)
              goto LABEL_340;
          }
LABEL_160:
          v99 = 0;
LABEL_161:
          v100 = *((_QWORD *)this + 13);
          if (v100
            && ((v101 = *(_DWORD *)(v100 + 4), (v101 & 1) != 0)
              ? (v102 = *(_QWORD *)(v100 + 40), LODWORD(v103) = *(_DWORD *)(v100 + 52))
              : (v102 = v100 + 32, LODWORD(v103) = v101 >> 5),
                (_DWORD)v103))
          {
            v103 = v103;
            v104 = (_DWORD **)(v102 + 8);
            while (1)
            {
              v105 = (uint64_t)*(v104 - 1);
              if (v105 == WebCore::HTMLNames::integrityAttr
                || *(_QWORD *)(v105 + 24) == *(_QWORD *)(WebCore::HTMLNames::integrityAttr + 24)
                && *(_QWORD *)(v105 + 32) == *(_QWORD *)(WebCore::HTMLNames::integrityAttr + 32))
              {
                break;
              }
              v104 += 2;
              if (!--v103)
              {
                v104 = (_DWORD **)MEMORY[0x1E0CBF2F8];
                break;
              }
            }
          }
          else
          {
            v104 = (_DWORD **)MEMORY[0x1E0CBF2F8];
          }
          v106 = *v104;
          if (v106)
            *v106 += 2;
          v107 = (WTF::StringImpl *)*((_QWORD *)this + 28);
          *((_QWORD *)this + 28) = v106;
          if (v107)
          {
            if (*(_DWORD *)v107 == 2)
              WTF::StringImpl::destroy(v107, v90);
            else
              *(_DWORD *)v107 -= 2;
          }
          {
            WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options, 0, 0, 0, 1, 1, 2, 1, 2, 1, 1, 0, 0);
          }
          LODWORD(v226) = WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options;
          *(_DWORD *)((char *)&v226 + 3) = *(int *)((char *)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options
                                                  + 3);
          v108 = qword_1ECE90818;
          if (qword_1ECE90818)
            *(_DWORD *)qword_1ECE90818 += 2;
          v228 = xmmword_1ECE90820;
          v229 = *(_OWORD *)algn_1ECE90830;
          v227 = (WTF::StringImpl *)v108;
          v230 = qword_1ECE90840;
          v231 = 0;
          v109 = dword_1ECE90854;
          v232 = 0;
          v233 = dword_1ECE90854;
          if (dword_1ECE90854)
          {
            if (dword_1ECE90854 >> 28)
              goto LABEL_408;
            v182 = WTF::fastMalloc((WTF *)(16 * dword_1ECE90854));
            v232 = v109;
            v231 = v182;
            if (dword_1ECE90854)
            {
              v183 = qword_1ECE90848;
              v184 = qword_1ECE90848 + 16 * dword_1ECE90854;
              do
              {
                v185 = *(_DWORD **)v183;
                if (*(_QWORD *)v183)
                  *v185 += 2;
                *(_QWORD *)v182 = v185;
                *(_BYTE *)(v182 + 8) = *(_BYTE *)(v183 + 8);
                v183 += 16;
                v182 += 16;
              }
              while (v183 != v184);
            }
          }
          v234 = dword_1ECE90858;
          v235 = byte_1ECE9085C;
          LOBYTE(v236) = 0;
          v239 = 0;
          if (byte_1ECE90878)
          {
            v236 = word_1ECE90860;
            v110 = qword_1ECE90868;
            if (qword_1ECE90868)
              *(_DWORD *)qword_1ECE90868 += 2;
            v237 = v110;
            v111 = qword_1ECE90870;
            if (qword_1ECE90870)
              *(_DWORD *)qword_1ECE90870 += 2;
            v238 = v111;
            v239 = 1;
          }
          v112 = (__n128)xmmword_1ECE90880;
          v240 = xmmword_1ECE90880;
          v113 = qword_1ECE90890;
          if (qword_1ECE90890)
            *(_DWORD *)qword_1ECE90890 += 2;
          v241 = (WTF::StringImpl *)v113;
          if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0
            && WebCore::Element::isNonceable(this, (unsigned __int8 *)v90, v91, v92, v112))
          {
            v114 = (WTF::StringImpl **)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 216);
          }
          else
          {
            v114 = (WTF::StringImpl **)MEMORY[0x1E0CBF3B8];
          }
          v115 = *v114;
          if (v115)
            *(_DWORD *)v115 += 2;
          v116 = v241;
          v241 = v115;
          if (v116)
          {
            if (*(_DWORD *)v116 == 2)
              WTF::StringImpl::destroy(v116, v90);
            else
              *(_DWORD *)v116 -= 2;
          }
          *(_DWORD *)((char *)&v240 + 2) &= ~0x800u;
          v117 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v5 + 192));
          if (v117)
          {
            do
              v119 = __ldaxr(v117);
            while (__stlxr(v119 + 1, v117));
          }
          if (!v117[37])
          {
            if (atomic_load(v117))
            {
              do
                v121 = __ldaxr(v117);
              while (__stlxr(v121 - 1, v117));
LABEL_200:
              *(_DWORD *)((char *)&v240 + 2) &= ~0x100u;
              goto LABEL_201;
            }
LABEL_408:
            __break(0xC471u);
            JUMPOUT(0x1943F0BF4);
          }
          v173 = v117;
          WTF::String::trim();
          v174 = v201;
          if (!v201)
          {
            if (!atomic_load(v173))
              goto LABEL_408;
            do
              v176 = __ldaxr(v173);
            while (__stlxr(v176 - 1, v173));
LABEL_201:
            v122 = (WTF::StringImpl *)*((_QWORD *)this + 28);
            if (v122)
              *(_DWORD *)v122 += 2;
            v123 = v227;
            v227 = v122;
            if (v123)
            {
              if (*(_DWORD *)v123 == 2)
                WTF::StringImpl::destroy(v123, v118);
              else
                *(_DWORD *)v123 -= 2;
            }
            BYTE5(v226) = v198;
            if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 672) & 0x8000000000000000) != 0)
            {
              v124 = *((_QWORD *)this + 13);
              if (v124
                && ((v125 = *(_DWORD *)(v124 + 4), (v125 & 1) != 0)
                  ? (v126 = *(_QWORD *)(v124 + 40), LODWORD(v127) = *(_DWORD *)(v124 + 52))
                  : (v126 = v124 + 32, LODWORD(v127) = v125 >> 5),
                    (_DWORD)v127))
              {
                v127 = v127;
                v128 = (uint64_t *)(v126 + 8);
                while (1)
                {
                  v129 = *(v128 - 1);
                  if (v129 == WebCore::HTMLNames::fetchpriorityAttr
                    || *(_QWORD *)(v129 + 24) == *(_QWORD *)(WebCore::HTMLNames::fetchpriorityAttr + 24)
                    && *(_QWORD *)(v129 + 32) == *(_QWORD *)(WebCore::HTMLNames::fetchpriorityAttr + 32))
                  {
                    break;
                  }
                  v128 += 2;
                  if (!--v127)
                  {
                    v128 = (uint64_t *)MEMORY[0x1E0CBF2F8];
                    break;
                  }
                }
              }
              else
              {
                v128 = (uint64_t *)MEMORY[0x1E0CBF2F8];
              }
              v130 = WebCore::parseEnumerationFromString<WebCore::RequestPriority>(v128);
              if ((v130 & 0xFF00) != 0)
                v131 = v130;
              else
                v131 = 2;
              v132 = v131;
            }
            else
            {
              v132 = 2;
            }
            *(_DWORD *)((char *)&v240 + 2) = *(_DWORD *)((_BYTE *)&v240 + 2) & 0xF9FFFFFF | ((v132 & 3) << 25);
            v133 = (WTF::StringImpl *)*((_QWORD *)this + 29);
            if (v133)
              *(_DWORD *)v133 += 2;
            v134 = *((_OWORD *)this + 16);
            v202 = *((_OWORD *)this + 15);
            v203 = v134;
            v201 = v133;
            v204[0] = 0;
            WTF::URL::invalidate((WTF::URL *)v204);
            v205 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v206 = v219;
            v207 = 0u;
            v208 = 0u;
            v209 = 0u;
            v210 = 0x10000;
            v135 = v211 & 0x80 | 4;
            v211 = v135;
            v212 = 0;
            v136 = (_DWORD *)*MEMORY[0x1E0CBF738];
            if (*MEMORY[0x1E0CBF738])
            {
              *v136 += 2;
              v135 = v211;
            }
            v213 = v136;
            v214 = 0;
            v215 = 0;
            v216 = 0;
            v217 = v217 & 0xE0 | 5;
            v211 = v135 | 2;
            v218 = 0;
            v137 = *((_QWORD *)this + 13);
            if (v137
              && ((v138 = *(_DWORD *)(v137 + 4), (v138 & 1) != 0)
                ? (v139 = *(_QWORD *)(v137 + 40), LODWORD(v140) = *(_DWORD *)(v137 + 52))
                : (v139 = v137 + 32, LODWORD(v140) = v138 >> 5),
                  (_DWORD)v140))
            {
              v140 = v140;
              v141 = (uint64_t *)(v139 + 8);
              while (1)
              {
                v142 = *(v141 - 1);
                if (v142 == WebCore::HTMLNames::crossoriginAttr
                  || *(_QWORD *)(v142 + 24) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 24)
                  && *(_QWORD *)(v142 + 32) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 32))
                {
                  break;
                }
                v141 += 2;
                if (!--v140)
                {
                  v141 = (uint64_t *)MEMORY[0x1E0CBF2F8];
                  break;
                }
              }
            }
            else
            {
              v141 = (uint64_t *)MEMORY[0x1E0CBF2F8];
            }
            if (*v141)
            {
              if (WTF::equalLettersIgnoringASCIICase(v141, "use-credentials", 0x10uLL))
              {
                v177 = "use-credentials";
                v178 = 16;
              }
              else
              {
                v177 = "anonymous";
                v178 = 10;
              }
              WTF::String::String(&v200, (uint64_t)v177, v178);
            }
            else
            {
              v200 = 0;
            }
            WebCore::createPotentialAccessControlRequest((WebCore::ResourceRequest *)&v201, (WTF::StringImpl *)&v226, v5, (uint64_t *)&v200, 0, (uint64_t)&v219);
            v144 = v200;
            v200 = 0;
            if (v144)
            {
              if (*(_DWORD *)v144 == 2)
                WTF::StringImpl::destroy(v144, v143);
              else
                *(_DWORD *)v144 -= 2;
            }
            WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v201, v143);
            v224 = v99 << 8;
            if (v76)
              *(_DWORD *)v76 += 2;
            v146 = v223;
            v223 = v76;
            if (v146)
            {
              if (*(_DWORD *)v146 == 2)
                WTF::StringImpl::destroy(v146, v145);
              else
                *(_DWORD *)v146 -= 2;
            }
            *((_DWORD *)this + 6) += 2;
            v147 = v225;
            v225 = this;
            if (v147)
            {
              if (*((_DWORD *)v147 + 6) == 2)
              {
                v163 = *((_WORD *)v147 + 15);
                if ((v163 & 0x400) == 0)
                {
                  v164 = *((_WORD *)v147 + 14);
                  if ((v164 & 0xF000) == 0x9000)
                  {
                    WebCore::Document::removedLastRef(v147, v145);
                  }
                  else
                  {
                    if ((v164 & 0x20) != 0)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)v147 + 20) + 16))(*((_QWORD *)v147 + 20));
                      v163 = *((_WORD *)v147 + 15);
                    }
                    *((_WORD *)v147 + 15) = v163 | 0x400;
                    (*(void (**)(WebCore::Document *))(*(_QWORD *)v147 + 72))(v147);
                  }
                }
              }
              else
              {
                *((_DWORD *)v147 + 6) -= 2;
              }
            }
            v148 = *(WebCore::CachedResourceLoader **)(v5 + 720);
            if (!v148)
              v148 = (WebCore::CachedResourceLoader *)WebCore::Document::ensureCachedResourceLoader((WebCore::Document *)v5, v145);
            ++*(_DWORD *)v148;
            WebCore::CachedResourceLoader::requestCSSStyleSheet((WebCore::ResourceRequest *)&v219, v148, (uint64_t)&v201);
            if ((_DWORD)v205)
            {
              v149 = 0;
              v200 = 0;
            }
            else
            {
              WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v200, (const WebCore::CachedResourceHandleBase *)&v201);
              if (v200)
                v149 = (WebCore::CachedResource *)*((_QWORD *)v200 + 1);
              else
                v149 = 0;
            }
            WebCore::CachedResourceHandleBase::setResource((uint64_t *)this + 24, v149);
            WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v200, v150);
            if ((_DWORD)v205 != -1)
              (*(&off_1E33C4BA8 + v205))((int)&v186, (WebCore::CachedResourceHandleBase *)&v201);
            LODWORD(v205) = -1;
            if (*(_DWORD *)v148 == 1)
            {
              WebCore::CachedResourceLoader::~CachedResourceLoader(v148);
              WTF::fastFree(v161, v162);
            }
            else
            {
              --*(_DWORD *)v148;
            }
            v151 = *v85;
            if (*v85)
            {
              do
                v152 = __ldaxr(v151);
              while (__stlxr(v152 + 1, v151));
              v186 = v151;
              v153 = *((_QWORD *)v151 + 1);
              if (!v153
                || (v200 = (WTF::StringImpl *)&v186, ++*(_DWORD *)(v153 + 548), (v154 = *(_QWORD *)(v153 + 488)) == 0)
                || !*(_QWORD *)(v154 + 8)
                || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v153 + 464), (uint64_t *)&v200, (uint64_t)&v201), (v151 = v186) != 0))
              {
                v155 = *((_QWORD *)v151 + 1);
                if (v155)
                {
                  v156 = (WebCore::HTMLLinkElement *)((char *)this + 112);
                  if (WebCore::CachedResource::addClientToSet(*((WebCore::CachedResource **)v151 + 1), v156))(*(void (**)(uint64_t, WebCore::CachedResourceClient *))(*(_QWORD *)v155 + 88))(v155, v156);
                  goto LABEL_262;
                }
              }
            }
            else
            {
              v186 = 0;
            }
            *((_BYTE *)this + 291) &= ~1u;
            WebCore::HTMLLinkElement::sheetLoaded(this);
            WebCore::HTMLLinkElement::notifyLoadedSheetAndAllCriticalSubresources(this, 1);
LABEL_262:
            WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v186, v157);
            WebCore::CachedResourceRequest::~CachedResourceRequest((WebCore::CachedResourceRequest *)&v219, v158);
            WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)&v226, v159);
LABEL_263:
            if (v76)
            {
              if (*(_DWORD *)v76 == 2)
                WTF::StringImpl::destroy(v76, v67);
              else
                *(_DWORD *)v76 -= 2;
            }
LABEL_266:
            WebCore::LinkLoadParameters::~LinkLoadParameters((WebCore::LinkLoadParameters *)&v187, v67);
            if (*(_DWORD *)(v5 + 24) == 2)
            {
              if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v5, v160);
            }
            else
            {
              *(_DWORD *)(v5 + 24) -= 2;
            }
            return;
          }
          if (*((_DWORD *)v201 + 1))
          {
            v219 = (WTF::StringImpl *)WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForStyleNonce;
            v220 = 0;
            v179 = WebCore::ContentSecurityPolicy::allPoliciesWithDispositionAllow<WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::String const&)const,WTF::String&>((uint64_t)v173, 0, (uint64_t)&v219, (uint64_t)&v201);
            v174 = v201;
            v201 = 0;
            if (!v174)
            {
LABEL_365:
              if (!atomic_load(v173))
                goto LABEL_408;
              do
                v181 = __ldaxr(v173);
              while (__stlxr(v181 - 1, v173));
              if (v179)
                goto LABEL_200;
              goto LABEL_201;
            }
          }
          else
          {
            v179 = 0;
            v201 = 0;
          }
          if (*(_DWORD *)v174 == 2)
            WTF::StringImpl::destroy(v174, v118);
          else
            *(_DWORD *)v174 -= 2;
          goto LABEL_365;
        }
      }
    }
LABEL_319:
    if (*((_QWORD *)this + 25))
    {
      WebCore::HTMLLinkElement::clearSheet((WebCore::CSSStyleSheet **)this, v67);
      WebCore::Style::Scope::didChangeActiveStyleSheetCandidates(*((WebCore::Style::Scope **)this + 23));
    }
    else if (*((char *)this + 290) < 0)
    {
      v168 = *(_QWORD *)(v5 + 528);
      if (v168)
      {
        v169 = *(_QWORD *)(v168 + 8);
        if (v169)
        {
          v170 = *(WebCore::DocumentLoader **)(*(_QWORD *)(v169 + 280) + 88);
          if (v170)
          {
            if (*(_QWORD *)(v169 + 296) == v5)
            {
              ++*((_DWORD *)v170 + 6);
              v219 = 0;
              WebCore::DocumentLoader::loadApplicationManifest(v170, (WTF::StringImpl *)&v219);
              v171 = v219;
              v219 = 0;
              if (v171)
                (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v171 + 8))(v171);
              if (*((_DWORD *)v170 + 6) == 1)
                (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v170 + 24))(v170);
              else
                --*((_DWORD *)v170 + 6);
            }
          }
        }
      }
    }
    goto LABEL_266;
  }
}

uint64_t WTF::operator==(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint8x8_t *v4;
  unsigned int v5;
  int16x8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int8x16_t *v10;
  int8x16_t *v11;
  unsigned int v12;
  int v13;
  int v14;
  BOOL v15;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint8x16_t v22;
  int v23;
  uint16x8_t v24;
  unsigned int v25;
  uint16x8_t v26;
  BOOL v27;
  uint8x16_t v28;
  unsigned int v29;
  uint8x16_t v30;
  BOOL v31;

  if (a4)
    v6 = (int16x8_t *)(a4 + 0xFFFFFFFFLL);
  else
    v6 = 0;
  v7 = (_DWORD)a2 == (_DWORD)v6 && a1 == a3;
  if (a1 == a3 || (_DWORD)a2 != (_DWORD)v6)
    return v7;
  if (!(_DWORD)a2)
    return 1;
  v8 = v6;
  if ((a2 & 0xFF00000000) == 0)
  {
    if ((_DWORD)v6)
    {
      if (*(_WORD *)a1 != *a3)
        return 0;
      v6 = (int16x8_t *)(a1 + 2);
      v5 = v8 - 1;
      v4 = (uint8x8_t *)(a3 + 1);
      if ((v8 - 1) >= 8)
      {
        v24 = (uint16x8_t)vceqq_s16(*v6, (int16x8_t)vmovl_u8(*v4));
        v24.i16[0] = vminvq_u16(v24);
        v7 = v24.u32[0];
        if (v24.i32[0])
        {
          v25 = v5 & 7;
          do
          {
            v26 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v6 + 2 * v25), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v4 + v25)));
            v26.i16[0] = vminvq_u16(v26);
            v7 = v26.i32[0] != 0;
            v25 += 8;
            if (v26.i32[0])
              v27 = v25 >= v5;
            else
              v27 = 1;
          }
          while (!v27);
        }
        return v7;
      }
      if (v5 >= 4)
      {
        v19 = (v4->u32[0] | ((unint64_t)v4->u32[0] << 16)) & 0xFFFF0000FFFFLL;
        v20 = (*(unsigned int *)((char *)v4->u32 + (v5 & 3)) | ((unint64_t)*(unsigned int *)((char *)v4->u32
                                                                                                  + (v5 & 3)) << 16)) & 0xFFFF0000FFFFLL;
        v21 = (v20 | (v20 << 8)) & 0xFF00FF00FF00FFLL;
        return ((v19 | (v19 << 8)) & 0xFF00FF00FF00FFLL) == v6->i64[0]
            && v21 == *(uint64_t *)((char *)v6->i64 + 2 * (v5 & 3));
      }
      if (v5 >= 2)
      {
        v15 = ((v4->u16[0] | (v4->u16[0] << 8)) & 0xFF00FF) == v6->i32[0];
        v23 = (*(unsigned __int16 *)((char *)v4->u16 + (v5 & 1)) | (*(unsigned __int16 *)((char *)v4->u16 + (v5 & 1)) << 8)) & 0xFF00FF;
        return v15 && v23 == *(__int32 *)((char *)v6->i32 + 2 * (v5 & 1));
      }
      goto LABEL_45;
    }
LABEL_44:
    __break(1u);
LABEL_45:
    if (v5 == 1)
    {
      v18 = v4->u8[0];
      v17 = v6->u16[0];
      return v17 == v18;
    }
    return 1;
  }
  if (!(_DWORD)v6)
    goto LABEL_44;
  if (*a1 != *a3)
    return 0;
  v9 = (_DWORD)v6 - 1;
  if ((_DWORD)v6 == 1)
    return 1;
  v10 = (int8x16_t *)(a1 + 1);
  v11 = (int8x16_t *)(a3 + 1);
  if ((_DWORD)v8 == 2)
  {
    v13 = v10->u8[0];
    v14 = v11->u8[0];
    return v13 == v14;
  }
  v12 = 32 - __clz(v8 - 2);
  if (v12 == 1)
  {
    v13 = v10->u16[0];
    v14 = v11->u16[0];
    return v13 == v14;
  }
  switch(v12)
  {
    case 2u:
      if (v10->u16[0] != v11->u16[0])
        return 0;
      v17 = *(unsigned __int16 *)&a1[v8 - 2];
      v18 = *(unsigned __int16 *)&a3[v8 - 2];
      return v17 == v18;
    case 3u:
      if (v10->i32[0] != v11->i32[0])
        return 0;
      v17 = *(_DWORD *)&a1[v8 - 4];
      v18 = *(_DWORD *)&a3[v8 - 4];
      return v17 == v18;
    case 4u:
      if (v10->i64[0] != v11->i64[0])
        return 0;
      return *(_QWORD *)&a1[v8 - 8] == *(_QWORD *)&a3[v8 - 8];
    case 5u:
      v22 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)&a1[v8 - 16], *(int8x16_t *)&a3[v8 - 16]), vceqq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a3 + 1)));
      v22.i8[0] = vminvq_u8(v22);
      return v22.i32[0] != 0;
    default:
      v28 = (uint8x16_t)vceqq_s8(*v10, *v11);
      v28.i8[0] = vminvq_u8(v28);
      v7 = v28.u32[0];
      if (!v28.i32[0])
        return v7;
      if (v9 < 0x10)
        return 1;
      v29 = v9 & 0xF;
      do
      {
        v30 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v10 + v29), *(int8x16_t *)((char *)v11 + v29));
        v30.i8[0] = vminvq_u8(v30);
        v7 = v30.i32[0] != 0;
        v29 += 16;
        if (v30.i32[0])
          v31 = v29 >= v9;
        else
          v31 = 1;
      }
      while (!v31);
      break;
  }
  return v7;
}

void WebCore::LinkLoadParameters::~LinkLoadParameters(WebCore::LinkLoadParameters *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
}

void WebCore::LinkLoader::loadLink(WebCore::LinkLoader *this, const WebCore::LinkLoadParameters *a2, WebCore::Document *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unsigned int *v18;
  _QWORD v19[2];
  WTF::StringImpl *v20;

  if ((*((_BYTE *)a2 + 1) & 4) != 0
    && (*(_QWORD *)(*((_QWORD *)a3 + 85) + 672) & 0x10000000000000) != 0
    && (*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v8 = *((_QWORD *)a2 + 1);
    if (v8)
    {
      if (*(_DWORD *)(v8 + 4))
      {
        v9 = *((_QWORD *)a3 + 66);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 8);
          if (v10)
          {
            v11 = (unsigned int *)(v10 + 8);
            do
              v12 = __ldaxr(v11);
            while (__stlxr(v12 + 1, v11));
            v18 = (unsigned int *)(v10 + 8);
            v13 = *(_QWORD *)(v10 + 280);
            ++*(_DWORD *)v13;
            v14 = *(_QWORD *)(v13 + 16);
            v19[0] = WTF::URL::host((const WebCore::LinkLoadParameters *)((char *)a2 + 8));
            v19[1] = v15;
            WTF::StringView::toString((uint64_t *)&v20, (WTF::StringView *)v19);
            (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v14 + 1104))(v14, &v20);
            v17 = v20;
            v20 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, v16);
              else
                *(_DWORD *)v17 -= 2;
            }
            if (!*(_DWORD *)v13)
            {
              __break(0xC471u);
              return;
            }
            --*(_DWORD *)v13;
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v18);
          }
        }
      }
    }
  }
  WebCore::LinkLoader::preconnectIfNeeded(a2, a3, a3);
  if ((*((_BYTE *)a2 + 1) & 0x40) != 0)
  {
    WebCore::LinkLoader::prefetchIfNeeded(this, a2, a3);
  }
  else if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 16))(*(_QWORD *)(*((_QWORD *)this + 2) + 8)))
  {
    WebCore::LinkLoader::preloadIfNeeded((uint64_t)v19, a2, a3, this);
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    if (v19[0])
    {
      v7 = *((_QWORD *)this + 4);
      *((_QWORD *)this + 4) = v19[0];
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
  }
}

uint64_t `non-virtual thunk to'WebCore::HTMLLinkElement::shouldLoadLink(WebCore::HTMLLinkElement *this)
{
  return (*((unsigned __int8 *)this - 106) >> 3) & 1;
}

WTF::StringImpl *WebCore::LinkLoader::preconnectIfNeeded(WebCore::LinkLoader *this, const WebCore::LinkLoadParameters *a2, WebCore::Document *a3)
{
  WTF::StringImpl *result;
  __int128 v6;
  uint64_t v7;
  WebCore *v8;
  WTF::StringImpl *v9;
  WebCore::SecurityOrigin *v10;
  WebCore::SecurityOrigin *v11;
  uint64_t isSameOriginDomain;
  WTF::StringImpl *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _DWORD *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  WebCore::SecurityOrigin *v23;
  WebCore::SecurityOrigin *v24;
  uint64_t v25;
  __int128 v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  _QWORD *v29;
  WebCore::SecurityOrigin *v30[2];
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  __int128 v35;
  __int128 v36;

  result = (WTF::StringImpl *)*((_QWORD *)this + 1);
  if (result)
    *(_DWORD *)result += 2;
  v34 = result;
  v6 = *((_OWORD *)this + 2);
  v35 = *((_OWORD *)this + 1);
  v36 = v6;
  if ((*((_BYTE *)this + 1) & 0x20) != 0 && (v35 & 1) != 0 && (*((_BYTE *)this + 16) & 2) != 0)
  {
    v7 = *((_QWORD *)a2 + 66);
    if (v7)
    {
      if (*(_QWORD *)(v7 + 8))
      {
        v8 = (WebCore *)WTF::equalLettersIgnoringASCIICase((uint64_t *)this + 9, "anonymous", 0xAuLL);
        if ((_DWORD)v8)
        {
          WebCore::SecurityContext::securityOrigin((const WebCore::LinkLoadParameters *)((char *)a2 + 192), v9);
          v11 = v10;
          WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)&v34, (uint64_t *)v30);
          isSameOriginDomain = WebCore::SecurityOrigin::isSameOriginDomain(v11, v30[0]);
          v8 = (WebCore *)WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)v30, v13);
        }
        else
        {
          isSameOriginDomain = 1;
        }
        v14 = (_QWORD *)WebCore::platformStrategies(v8);
        v15 = v14[1];
        if (!v15)
        {
          v29 = v14;
          v15 = (*(uint64_t (**)(_QWORD *))(*v14 + 16))(v14);
          v29[1] = v15;
        }
        v16 = *(_QWORD *)(*((_QWORD *)a2 + 66) + 8);
        v17 = (unsigned int *)(v16 + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 + 1, v17));
        v19 = *(_DWORD **)(v16 + 280);
        ++*v19;
        v20 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
        v21 = v20;
        if (v20)
        {
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 + 1, v20));
        }
        v23 = v34;
        if (v34)
          *(_DWORD *)v34 += 2;
        v30[1] = v23;
        v31 = v35;
        v32 = v36;
        v24 = v23;
        v25 = WTF::fastMalloc((WTF *)0x38);
        *(_QWORD *)v25 = &off_1E33F6560;
        *(_QWORD *)(v25 + 8) = v21;
        v30[0] = 0;
        if (v24)
          *(_DWORD *)v24 += 2;
        *(_QWORD *)(v25 + 16) = v24;
        v26 = v31;
        *(_OWORD *)(v25 + 40) = v32;
        *(_OWORD *)(v25 + 24) = v26;
        v33 = v25;
        (*(void (**)(uint64_t, _DWORD *, WTF::StringImpl **, uint64_t, _QWORD, uint64_t *))(*(_QWORD *)v15
                                                                                                  + 112))(v15, v19, &v34, isSameOriginDomain, 0, &v33);
        v28 = v33;
        v33 = 0;
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::DispatchTask::~DispatchTask((uint64_t *)v30, v27);
        if (!*v19)
        {
          __break(0xC471u);
          JUMPOUT(0x1943F163CLL);
        }
        --*v19;
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v17);
        result = v34;
      }
    }
  }
  v34 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::LinkLoader::preloadIfNeeded(uint64_t this, const WebCore::LinkLoadParameters *a2, WebCore::Document *a3, WebCore::LinkLoader *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WebCore::CSSTokenizer *v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  WTF *v22;
  WTF::StringImpl *v23;
  WTF *v24;
  void *v25;
  const WTF::StringImpl *v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  _DWORD *v40;
  _DWORD **v41;
  WTF::StringImpl *v42;
  char v43;
  _DWORD *v44;
  void *v45;
  CFTypeRef v46;
  WebCore::FormData *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  char v51;
  WTF::StringImpl *v52;
  char v53;
  _DWORD *v54;
  __int128 v55;
  CFTypeRef v56;
  void *v57;
  CFTypeRef v58;
  WebCore::FormData *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  unsigned int *v63;
  WTF::StringImpl *v64;
  unsigned int v65;
  WTF::StringImpl *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  __int16 v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WebCore::CachedResourceLoader *v74;
  void *v75;
  unsigned int v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  WebCore::CachedResource *v87;
  uint64_t v88;
  WebCore::CachedResourceClient *v89;
  WTF *v90;
  void *v91;
  uint64_t v92;
  int v93;
  void *v94;
  WTF *v95;
  uint64_t v96;
  uint64_t v97;
  float v98;
  void *v99;
  float v100;
  uint64_t v101;
  unint64_t v102;
  unsigned __int8 *v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  _QWORD *v112;
  void *v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  WTF::StringImpl *v117;
  uint64_t v118;
  WTF *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  uint64_t v122;
  WTF *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WebCore::CachedResource **v129;
  WTF::StringImpl *v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  __int128 v133;
  __int128 v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF *v137[2];
  __int128 v138;
  __int128 v139;
  WebCore::FormData *v140;
  uint64_t v141;
  char v142;
  CFTypeRef v143;
  uint64_t v144;
  uint64_t v145;
  __int16 v146;
  uint64_t v147;
  WTF::StringImpl *v148[2];
  uint64_t v149;
  __int16 v150;
  WTF::StringImpl *v151[2];
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  int v158;
  char v159;
  __int16 v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  __int128 v164;
  _DWORD *v165;
  WTF::StringImpl *v166;
  __int128 v167;
  __int128 v168;
  _QWORD v169[5];
  uint64_t v170;
  WTF::StringImpl *v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  int v175;
  char v176;
  __int128 v177;
  WebCore::FormData *v178;
  uint64_t v179;
  char v180;
  CFTypeRef cf;
  uint64_t v182;

  v4 = (_QWORD *)this;
  v182 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)a3 + 66);
  if (!v5)
    goto LABEL_7;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6 || !*(_QWORD *)(*(_QWORD *)(v6 + 280) + 88) || *(WebCore::Document **)(v6 + 296) != a3)
    goto LABEL_7;
  if ((*((_BYTE *)a2 + 1) & 8) == 0)
  {
    if ((*((_BYTE *)a2 + 1) & 0x10) != 0)
    {
      this = WebCore::LinkLoader::resourceTypeFromAsAttribute((uint64_t *)a2 + 6, a3, 1);
      v10 = this;
      if ((unsigned __int16)this > 0xFFu)
        goto LABEL_14;
    }
LABEL_7:
    *v4 = 0;
    return this;
  }
  this = WebCore::LinkLoader::resourceTypeFromAsAttribute((uint64_t *)a2 + 6, a3, 0);
  v10 = 3;
  if ((unsigned __int16)this >= 0x100u && this != 3)
  {
    if (a4)
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a4 + 2) + 8) + 32))(*(_QWORD *)(*((_QWORD *)a4 + 2) + 8));
    goto LABEL_7;
  }
LABEL_14:
  v132 = 0;
  WTF::URL::invalidate((WTF::URL *)&v132);
  if (v10 == 1
    && (*(_QWORD *)(*((_QWORD *)a3 + 85) + 680) & 0x200000000000000) != 0
    && (v97 = *((_QWORD *)a2 + 10)) != 0
    && *(_DWORD *)(v97 + 4))
  {
    WebCore::SizesAttributeParser::SizesAttributeParser((WebCore::SizesAttributeParser *)&v136, (const WebCore::LinkLoadParameters *)((char *)a2 + 88), a3);
    v98 = WebCore::SizesAttributeParser::length((WebCore::SizesAttributeParser *)&v136);
    WebCore::SizesAttributeParser::~SizesAttributeParser((WebCore::SizesAttributeParser *)&v136, v99);
    v100 = WebCore::Document::deviceScaleFactor(a3);
    WTF::AtomString::AtomString((WTF::AtomString *)&v166, (WTF::AtomStringImpl **)a2 + 1);
    v101 = *((_QWORD *)a2 + 10);
    if (v101)
    {
      v102 = *(unsigned int *)(v101 + 16);
      v103 = *(unsigned __int8 **)(v101 + 8);
      LODWORD(v101) = *(_DWORD *)(v101 + 4);
      v104 = (v102 >> 2) & 1;
    }
    else
    {
      v103 = 0;
      v104 = 1;
    }
    v151[0] = 0;
    WebCore::bestFitSourceForImageAttributes((uint64_t *)&v166, v103, v101 | (unint64_t)(v104 << 32), v151, (uint64_t)&v136, v100, v98);
    v106 = v151[0];
    v151[0] = 0;
    if (v106)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v106 + 8))(v106);
    v107 = v166;
    v166 = 0;
    if (v107)
    {
      if (*(_DWORD *)v107 == 2)
        WTF::StringImpl::destroy(v107, v105);
      else
        *(_DWORD *)v107 -= 2;
    }
    v130 = 0;
    WTF::URL::invalidate((WTF::URL *)&v130);
    WTF::StringViewWithUnderlyingString::toString(&v135, (uint64_t)&v136);
    MEMORY[0x19AEA52F8](v151, &v130, &v135, 0);
    WebCore::Document::completeURL(a3, v151, (uint64_t)a3 + 848, 0, (WTF::URL *)&v166);
    WTF::URL::operator=((uint64_t)&v132, (uint64_t *)&v166);
    v108 = v166;
    v166 = 0;
    if (v108)
    {
      if (*(_DWORD *)v108 == 2)
        WTF::StringImpl::destroy(v108, v11);
      else
        *(_DWORD *)v108 -= 2;
    }
    v109 = v151[0];
    v151[0] = 0;
    if (v109)
    {
      if (*(_DWORD *)v109 == 2)
        WTF::StringImpl::destroy(v109, v11);
      else
        *(_DWORD *)v109 -= 2;
    }
    v110 = v135;
    v135 = 0;
    if (v110)
    {
      if (*(_DWORD *)v110 == 2)
        WTF::StringImpl::destroy(v110, v11);
      else
        *(_DWORD *)v110 -= 2;
    }
    v111 = v130;
    v130 = 0;
    if (v111)
    {
      if (*(_DWORD *)v111 == 2)
        WTF::StringImpl::destroy(v111, v11);
      else
        *(_DWORD *)v111 -= 2;
    }
    v14 = v136;
  }
  else
  {
    WebCore::Document::completeURL(a3, (_QWORD *)a2 + 1, (uint64_t)a3 + 848, 0, (WTF::URL *)&v136);
    v12 = v136;
    v136 = 0;
    v13 = v132;
    v132 = v12;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v11);
        v14 = v136;
      }
      else
      {
        v14 = 0;
        *(_DWORD *)v13 -= 2;
      }
    }
    else
    {
      v14 = 0;
    }
    v133 = *(_OWORD *)v137;
    LODWORD(v137[0]) &= ~1u;
    v134 = v138;
  }
  v136 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  if ((v133 & 1) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::Document::addConsoleMessage(a3, 16, 2, &v136, 0);
    v117 = v136;
    v136 = 0;
    if (v117)
    {
      if (*(_DWORD *)v117 == 2)
        WTF::StringImpl::destroy(v117, v82);
      else
        *(_DWORD *)v117 -= 2;
    }
    *v4 = 0;
    goto LABEL_137;
  }
  v15 = *((_QWORD *)a3 + 66);
  if (v15)
  {
    v15 = *(_QWORD *)(v15 + 8);
    if (v15)
    {
      v15 = *(_QWORD *)(v15 + 24);
      if (v15)
      {
        v15 = *(_QWORD *)(v15 + 8);
        if (v15)
          LOBYTE(v15) = *(_BYTE *)(v15 + 450) != 0;
      }
    }
  }
  LOBYTE(v151[0]) = v15;
  BYTE1(v151[0]) = (*(_DWORD *)(*((_QWORD *)a3 + 85) + 672) & 0x8000000) != 0;
  BYTE2(v151[0]) = 0;
  WebCore::CSSTokenizer::tryCreate((unsigned int **)a2 + 7, (uint64_t *)&v166);
  if (v166)
  {
    v16 = (WTF *)(*((_QWORD *)v166 + 6) + 24 * *((unsigned int *)v166 + 15));
    v136 = (WTF::StringImpl *)*((_QWORD *)v166 + 6);
    v137[0] = v16;
    WebCore::MQ::MediaQueryParser::consumeMediaQueryList(&v136, (WebCore::CSSParserTokenRange *)v151, (uint64_t)&v130);
    v18 = v166;
    v166 = 0;
    if (v18)
    {
      WebCore::CSSTokenizer::~CSSTokenizer(v18, v17);
      WTF::fastFree(v19, v20);
    }
  }
  else
  {
    v130 = 0;
    v131 = 0;
  }
  v21 = *((_QWORD *)a3 + 8) & 0xFFFFFFFFFFFFLL;
  if (v21)
  {
    if ((*(_BYTE *)((*((_QWORD *)a3 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      v21 = *(_QWORD *)((*((_QWORD *)a3 + 8) & 0xFFFFFFFFFFFFLL) + 0x20);
      if (v21)
        v21 = *(_QWORD *)(v21 + 8);
    }
    v22 = (WTF *)(v21 + 80);
  }
  else
  {
    v22 = 0;
  }
  v23 = (WTF::StringImpl *)WebCore::screenAtomData;
  if (WebCore::screenAtomData)
    *(_DWORD *)WebCore::screenAtomData += 2;
  v136 = v23;
  v24 = (WTF *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a3);
  if (v24)
  {
    do
      v27 = __ldaxr((unsigned int *)v24);
    while (__stlxr(v27 + 1, (unsigned int *)v24));
  }
  v137[0] = v24;
  v137[1] = v22;
  LOBYTE(v138) = 2;
  if (HIDWORD(v131))
  {
    v28 = v130;
    v29 = 56 * HIDWORD(v131) - 56;
    do
    {
      v30 = WebCore::MQ::MediaQueryEvaluator::evaluate((WebCore::MQ::MediaQueryEvaluator *)&v136, v28);
      if (v30)
        break;
      v28 = (WTF::StringImpl *)((char *)v28 + 56);
      v31 = v29;
      v29 -= 56;
    }
    while (v31);
    v24 = v137[0];
  }
  else
  {
    v30 = 1;
  }
  v137[0] = 0;
  if (v24)
  {
    do
    {
      v32 = __ldaxr((unsigned int *)v24);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, (unsigned int *)v24));
    if (!v33)
    {
      atomic_store(1u, (unsigned int *)v24);
      v118 = *((unsigned int *)v24 + 7);
      if ((_DWORD)v118)
      {
        v128 = v24;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v24 + 2), (WTF::StringImpl *)(*((_QWORD *)v24 + 2) + 32 * v118));
        v24 = v128;
      }
      v119 = (WTF *)*((_QWORD *)v24 + 2);
      if (v119)
      {
        *((_QWORD *)v24 + 2) = 0;
        *((_DWORD *)v24 + 6) = 0;
        v123 = v24;
        WTF::fastFree(v119, v25);
        v24 = v123;
      }
      WTF::fastFree(v24, v25);
    }
  }
  v34 = v136;
  v136 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v25);
    else
      *(_DWORD *)v34 -= 2;
  }
  if (!v30 || (this = WebCore::LinkLoader::isSupportedType(v10, (WTF::StringImpl **)a2 + 8, v26), (this & 1) == 0))
  {
    *v4 = 0;
    goto LABEL_136;
  }
  {
    this = WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options, 0, 0, 0, 1, 1, 2, 1, 2, 1, 1, 0, 0);
  }
  LODWORD(v151[0]) = WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options;
  *(_DWORD *)((char *)v151 + 3) = *(int *)((char *)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options
                                         + 3);
  v35 = (WTF::StringImpl *)qword_1ECE90818;
  if (qword_1ECE90818)
    *(_DWORD *)qword_1ECE90818 += 2;
  v151[1] = v35;
  v152 = xmmword_1ECE90820;
  v153 = *(_OWORD *)algn_1ECE90830;
  v36 = dword_1ECE90854;
  v156 = 0;
  v154 = qword_1ECE90840;
  v155 = 0;
  v157 = dword_1ECE90854;
  if (dword_1ECE90854)
  {
    if (dword_1ECE90854 >> 28)
    {
      __break(0xC471u);
      return this;
    }
    v124 = WTF::fastMalloc((WTF *)(16 * dword_1ECE90854));
    v156 = v36;
    v155 = v124;
    if (dword_1ECE90854)
    {
      v125 = qword_1ECE90848;
      v126 = qword_1ECE90848 + 16 * dword_1ECE90854;
      do
      {
        v127 = *(_DWORD **)v125;
        if (*(_QWORD *)v125)
          *v127 += 2;
        *(_QWORD *)v124 = v127;
        *(_BYTE *)(v124 + 8) = *(_BYTE *)(v125 + 8);
        v125 += 16;
        v124 += 16;
      }
      while (v125 != v126);
    }
  }
  v158 = dword_1ECE90858;
  v159 = byte_1ECE9085C;
  LOBYTE(v160) = 0;
  v163 = 0;
  if (byte_1ECE90878)
  {
    v160 = word_1ECE90860;
    v37 = qword_1ECE90868;
    if (qword_1ECE90868)
      *(_DWORD *)qword_1ECE90868 += 2;
    v161 = v37;
    v38 = qword_1ECE90870;
    if (qword_1ECE90870)
      *(_DWORD *)qword_1ECE90870 += 2;
    v162 = v38;
    v163 = 1;
  }
  v164 = xmmword_1ECE90880;
  v39 = (WTF::StringImpl *)qword_1ECE90890;
  if (qword_1ECE90890)
    *(_DWORD *)qword_1ECE90890 += 2;
  BYTE5(v151[0]) = *((_BYTE *)a2 + 104);
  *(_DWORD *)((char *)&v164 + 2) = *(_DWORD *)((_BYTE *)&v164 + 2) & 0xF9FFFFFF | ((*((_BYTE *)a2 + 105) & 3) << 25);
  v40 = (_DWORD *)*((_QWORD *)a2 + 12);
  if (v40)
    *v40 += 2;
  v165 = v40;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v25);
    else
      *(_DWORD *)v39 -= 2;
  }
  v41 = (_DWORD **)MEMORY[0x1E0CBF738];
  if ((*((_BYTE *)a2 + 1) & 8) == 0)
  {
    v42 = v132;
    if (v132)
      *(_DWORD *)v132 += 2;
    v167 = v133;
    v168 = v134;
    v166 = v42;
    v169[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v169);
    v170 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v171 = v136;
    v172 = 0u;
    v173 = 0u;
    v174 = 0u;
    v175 = 0x10000;
    v43 = v176 & 0x80 | 4;
    v176 = v43;
    *(_QWORD *)&v177 = 0;
    v44 = *v41;
    if (*v41)
    {
      *v44 += 2;
      v43 = v176;
    }
    *((_QWORD *)&v177 + 1) = v44;
    v178 = 0;
    LOBYTE(v179) = 0;
    BYTE4(v179) = 0;
    v180 = v180 & 0xE0 | 5;
    v176 = v43 | 2;
    cf = 0;
    WebCore::createPotentialAccessControlRequest((WebCore::ResourceRequest *)&v166, (WTF::StringImpl *)v151, (uint64_t)a3, (uint64_t *)a2 + 9, 0, (uint64_t)&v136);
    v46 = cf;
    cf = 0;
    if (v46)
      CFRelease(v46);
    v47 = v178;
    v178 = 0;
    if (v47)
      WTF::RefCounted<WebCore::FormData>::deref(v47, v45);
    v48 = (WTF::StringImpl *)*((_QWORD *)&v177 + 1);
    *((_QWORD *)&v177 + 1) = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v45);
      else
        *(_DWORD *)v48 -= 2;
    }
    v49 = (WTF::StringImpl *)v177;
    *(_QWORD *)&v177 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
        WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v45);
      else
        *(_DWORD *)v49 -= 2;
    }
    WebCore::ResourceRequestBase::RequestData::~RequestData((WebCore::ResourceRequestBase::RequestData *)&v166, (WTF::StringImpl *)v45);
    goto LABEL_109;
  }
  BYTE1(v151[0]) = 3;
  v50 = *((_QWORD *)a2 + 9);
  if (!v50 || *(_DWORD *)(v50 + 4) != 15)
    goto LABEL_88;
  v92 = *(_QWORD *)(v50 + 8);
  if ((*(_BYTE *)(v50 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v92 & 0xDF) != 0x55
      || (*(_BYTE *)(v92 + 1) & 0xDF) != 0x53
      || (*(_BYTE *)(v92 + 2) & 0xDF) != 0x45
      || (*(_BYTE *)(v92 + 3) & 0xDF) != 0xD
      || (*(_BYTE *)(v92 + 4) & 0xDF) != 0x43
      || (*(_BYTE *)(v92 + 5) & 0xDF) != 0x52
      || (*(_BYTE *)(v92 + 6) & 0xDF) != 0x45
      || (*(_BYTE *)(v92 + 7) & 0xDF) != 0x44
      || (*(_BYTE *)(v92 + 8) & 0xDF) != 0x45
      || (*(_BYTE *)(v92 + 9) & 0xDF) != 0x4E
      || (*(_BYTE *)(v92 + 10) & 0xDF) != 0x54
      || (*(_BYTE *)(v92 + 11) & 0xDF) != 0x49
      || (*(_BYTE *)(v92 + 12) & 0xDF) != 0x41
      || (*(_BYTE *)(v92 + 13) & 0xDF) != 0x4C)
    {
      goto LABEL_88;
    }
    v93 = *(unsigned __int8 *)(v92 + 14);
  }
  else
  {
    if ((*(_WORD *)v92 & 0xFFDF) != 0x55
      || (*(_WORD *)(v92 + 2) & 0xFFDF) != 0x53
      || (*(_WORD *)(v92 + 4) & 0xFFDF) != 0x45
      || (*(_WORD *)(v92 + 6) & 0xFFDF) != 0xD
      || (*(_WORD *)(v92 + 8) & 0xFFDF) != 0x43
      || (*(_WORD *)(v92 + 10) & 0xFFDF) != 0x52
      || (*(_WORD *)(v92 + 12) & 0xFFDF) != 0x45
      || (*(_WORD *)(v92 + 14) & 0xFFDF) != 0x44
      || (*(_WORD *)(v92 + 16) & 0xFFDF) != 0x45
      || (*(_WORD *)(v92 + 18) & 0xFFDF) != 0x4E
      || (*(_WORD *)(v92 + 20) & 0xFFDF) != 0x54
      || (*(_WORD *)(v92 + 22) & 0xFFDF) != 0x49
      || (*(_WORD *)(v92 + 24) & 0xFFDF) != 0x41
      || (*(_WORD *)(v92 + 26) & 0xFFDF) != 0x4C)
    {
      goto LABEL_88;
    }
    v93 = *(unsigned __int16 *)(v92 + 28);
  }
  if ((v93 & 0xFFFFFFDF) == 0x53)
  {
    v51 = 2;
    goto LABEL_89;
  }
LABEL_88:
  v51 = 1;
LABEL_89:
  BYTE2(v151[0]) = v51;
  v52 = v132;
  if (v132)
    *(_DWORD *)v132 += 2;
  v167 = v133;
  v168 = v134;
  v166 = v52;
  v169[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v169);
  v170 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v171 = v136;
  v172 = 0u;
  v173 = 0u;
  v174 = 0u;
  v175 = 0x10000;
  v53 = v176 & 0x80 | 4;
  v176 = v53;
  *(_QWORD *)&v177 = 0;
  v54 = *v41;
  if (*v41)
  {
    *v54 += 2;
    v53 = v176;
  }
  *((_QWORD *)&v177 + 1) = v54;
  v178 = 0;
  LOBYTE(v179) = 0;
  BYTE4(v179) = 0;
  v180 = v180 & 0xE0 | 5;
  v176 = v53 | 2;
  cf = 0;
  WebCore::ResourceRequestBase::RequestData::RequestData((uint64_t)&v136, (uint64_t *)&v166);
  v55 = v177;
  v177 = 0u;
  v139 = v55;
  v140 = v178;
  v141 = v179;
  v142 = v180;
  v56 = cf;
  v178 = 0;
  cf = 0;
  v143 = v56;
  v144 = 0;
  WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)&v145, (const WebCore::ResourceLoaderOptions *)v151);
  v146 = 0;
  v147 = 0;
  *(_OWORD *)v148 = 0u;
  WebCore::CachedResourceRequest::splitFragmentIdentifierFromRequestURL((WebCore::ResourceRequest *)&v136, &v149);
  v150 = 0;
  v58 = cf;
  cf = 0;
  if (v58)
    CFRelease(v58);
  v59 = v178;
  v178 = 0;
  if (v59)
    WTF::RefCounted<WebCore::FormData>::deref(v59, v57);
  v60 = (WTF::StringImpl *)*((_QWORD *)&v177 + 1);
  *((_QWORD *)&v177 + 1) = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
      WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v57);
    else
      *(_DWORD *)v60 -= 2;
  }
  v61 = (WTF::StringImpl *)v177;
  *(_QWORD *)&v177 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
      WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v57);
    else
      *(_DWORD *)v61 -= 2;
  }
  WebCore::ResourceRequestBase::RequestData::~RequestData((WebCore::ResourceRequestBase::RequestData *)&v166, (WTF::StringImpl *)v57);
  WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)a3 + 192), v62);
  do
    v65 = __ldaxr(v63);
  while (__stlxr(v65 + 1, v63));
  v66 = v148[1];
  v148[1] = (WTF::StringImpl *)v63;
  if (v66)
  {
    do
    {
      v67 = __ldaxr((unsigned int *)v66);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, (unsigned int *)v66));
    if (!v68)
    {
      atomic_store(1u, (unsigned int *)v66);
      v120 = (WTF::StringImpl *)*((_QWORD *)v66 + 6);
      *((_QWORD *)v66 + 6) = 0;
      if (v120)
      {
        if (*(_DWORD *)v120 == 2)
          WTF::StringImpl::destroy(v120, v64);
        else
          *(_DWORD *)v120 -= 2;
      }
      v121 = (WTF::StringImpl *)*((_QWORD *)v66 + 5);
      *((_QWORD *)v66 + 5) = 0;
      if (v121)
      {
        if (*(_DWORD *)v121 == 2)
          WTF::StringImpl::destroy(v121, v64);
        else
          *(_DWORD *)v121 -= 2;
      }
      v122 = *((unsigned int *)v66 + 8);
      if ((_DWORD)v122 != -1)
        ((void (*)(WTF::StringImpl **, char *))off_1E33F6200[v122])(&v166, (char *)v66 + 8);
      *((_DWORD *)v66 + 8) = -1;
      WTF::fastFree(v66, v64);
    }
  }
  WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)a3 + 192), v64);
  WebCore::updateRequestForAccessControl((WebCore::ResourceRequest *)&v136, v69, (BYTE2(v164) >> 4) & 3);
LABEL_109:
  if (v10 > 0x10u)
    v70 = 1;
  else
    v70 = byte_1969F283E[(char)v10];
  v146 = v70 | 0x100;
  WTF::AtomStringImpl::add();
  v72 = v166;
  if (v166)
    *(_DWORD *)v166 += 2;
  v73 = v148[0];
  v148[0] = v72;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
      WTF::StringImpl::destroy(v73, v71);
    else
      *(_DWORD *)v73 -= 2;
  }
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
      WTF::StringImpl::destroy(v72, v71);
    else
      *(_DWORD *)v72 -= 2;
  }
  v150 = 257;
  v74 = (WebCore::CachedResourceLoader *)*((_QWORD *)a3 + 90);
  if (!v74)
    v74 = (WebCore::CachedResourceLoader *)WebCore::Document::ensureCachedResourceLoader(a3, v71);
  ++*(_DWORD *)v74;
  WebCore::CachedResourceLoader::preload((WebCore::ResourceRequest *)&v136, v74, (void *)v10, (uint64_t)&v166);
  v76 = v170;
  if ((_DWORD)v170)
  {
    v129 = 0;
  }
  else
  {
    WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v129, (const WebCore::CachedResourceHandleBase *)&v166);
    v76 = v170;
  }
  if (v76 != -1)
    (*(&off_1E33F6210 + v76))((int)&v135, (WebCore::CachedResourceHandleBase *)&v166);
  LODWORD(v170) = -1;
  if (*(_DWORD *)v74 == 1)
  {
    WebCore::CachedResourceLoader::~CachedResourceLoader(v74, v75);
    WTF::fastFree(v90, v91);
  }
  else
  {
    --*(_DWORD *)v74;
  }
  if (v129 && (v77 = (uint64_t)v129[1]) != 0)
  {
    if ((*(_BYTE *)(v77 + 556) & 0x1F) == v10 && a4)
    {
      switch(*(_BYTE *)(v77 + 556) & 0x1F)
      {
        case 1:
          v112 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
          v79 = WebCore::LinkPreloadImageResourceClient::LinkPreloadImageResourceClient(v112, (uint64_t)a4, v77);
          goto LABEL_134;
        case 2:
          v83 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
          *v83 = off_1E33F61B0;
          v84 = *((_QWORD *)a4 + 1);
          if (v84)
            goto LABEL_141;
          v84 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v84 = 1;
          *(_QWORD *)(v84 + 8) = a4;
          v95 = (WTF *)*((_QWORD *)a4 + 1);
          *((_QWORD *)a4 + 1) = v84;
          if (!v95)
            goto LABEL_141;
          if (*(_DWORD *)v95 != 1)
          {
            --*(_DWORD *)v95;
LABEL_141:
            ++*(_DWORD *)v84;
            goto LABEL_142;
          }
          WTF::fastFree(v95, v94);
          v84 = *((_QWORD *)a4 + 1);
          if (v84)
            goto LABEL_141;
LABEL_142:
          v83[1] = v84;
          v85 = *(_QWORD *)(v77 + 8);
          if (!v85)
          {
            v85 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v85 = 1;
            *(_QWORD *)(v85 + 8) = v77;
            v114 = *(unsigned int **)(v77 + 8);
            *(_QWORD *)(v77 + 8) = v85;
            if (v114)
            {
              do
              {
                v115 = __ldaxr(v114);
                v116 = v115 - 1;
              }
              while (__stlxr(v116, v114));
              if (!v116)
              {
                atomic_store(1u, v114);
                WTF::fastFree((WTF *)v114, v113);
              }
              v85 = *(_QWORD *)(v77 + 8);
              if (!v85)
              {
                v87 = 0;
                v83[2] = 0;
LABEL_147:
                v83[3] = &unk_1E33F6390;
                v89 = (WebCore::CachedResourceClient *)(v83 + 3);
                v83[4] = 0;
                *v83 = off_1E33F6358;
                goto LABEL_148;
              }
            }
          }
          do
            v86 = __ldaxr((unsigned int *)v85);
          while (__stlxr(v86 + 1, (unsigned int *)v85));
          v83[2] = v85;
          v87 = *(WebCore::CachedResource **)(v85 + 8);
          if (!v87)
            goto LABEL_147;
          v135 = (WTF::StringImpl *)(v83 + 2);
          ++*((_DWORD *)v87 + 137);
          v88 = *((_QWORD *)v87 + 61);
          if (!v88 || !*(_QWORD *)(v88 + 8))
            goto LABEL_147;
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)v87 + 58, (uint64_t *)&v135, (uint64_t)&v166);
          v96 = v83[2];
          v83[3] = &unk_1E33F6390;
          v89 = (WebCore::CachedResourceClient *)(v83 + 3);
          v83[4] = 0;
          *v83 = off_1E33F6358;
          if (v96)
            v87 = *(WebCore::CachedResource **)(v96 + 8);
          else
            v87 = 0;
LABEL_148:
          if (WebCore::CachedResource::addClientToSet(v87, v89))
            (*(void (**)(WebCore::CachedResource *, WebCore::CachedResourceClient *))(*(_QWORD *)v87 + 88))(v87, v89);
          *v4 = v83;
          break;
        case 3:
        case 0xE:
          v78 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
          v79 = WebCore::LinkPreloadDefaultResourceClient::LinkPreloadDefaultResourceClient(v78, (uint64_t)a4, v77);
LABEL_134:
          *v4 = v79;
          goto LABEL_135;
        case 4:
          std::make_unique[abi:sn180100]<WebCore::LinkPreloadFontResourceClient,WebCore::LinkLoader &,WebCore::CachedFont &>(v4, (uint64_t)a4, v129[1]);
          goto LABEL_135;
        case 6:
        case 8:
          std::make_unique[abi:sn180100]<WebCore::LinkPreloadRawResourceClient,WebCore::LinkLoader &,WebCore::CachedRawResource &>(v4, (uint64_t)a4, v129[1]);
          goto LABEL_135;
        default:
          goto LABEL_181;
      }
      goto LABEL_135;
    }
  }
  else if (a4)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a4 + 2) + 8) + 32))(*(_QWORD *)(*((_QWORD *)a4 + 2)
                                                                                                 + 8));
  }
LABEL_181:
  *v4 = 0;
LABEL_135:
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v129, v75);
  WebCore::CachedResourceRequest::~CachedResourceRequest((WebCore::CachedResourceRequest *)&v136, v80);
  WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)v151, v81);
LABEL_136:
  WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v130, v25);
LABEL_137:
  this = (uint64_t)v132;
  v132 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)this, v82);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

void WebCore::CachedResourceLoader::preload(WebCore::ResourceRequest *this@<X2>, WebCore::CachedResourceLoader *a2@<X0>, void *a3@<X1>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  int v25;
  WTF::StringImpl *v26;
  void *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  int i;
  _QWORD *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  void *v44;
  void *v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  __int128 v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  WTF *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int *v71;
  uint64_t v72[2];
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  int v76;
  __int16 v77;
  uint64_t v78;
  char v79;
  WTF::StringImpl *v80[2];
  __int128 v81;
  __int128 v82;
  WTF::StringImpl *v83;
  int v84;
  __int16 v85;
  uint64_t v86;
  char v87;

  v5 = (int)a3;
  v8 = *((_QWORD *)a2 + 10);
  if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0 && (v10 = *(_QWORD *)(v9 - 40)) != 0)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      v12 = (unsigned int *)(v11 + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  else
  {
    v11 = 0;
  }
  if (!atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    if (!v11)
      goto LABEL_14;
LABEL_9:
    v15 = 0;
    goto LABEL_10;
  }
  if (!v11)
    goto LABEL_14;
  v48 = *(_QWORD *)(v11 + 24);
  if (!v48)
    goto LABEL_9;
  v49 = *(_QWORD *)(v48 + 8);
  if (!v49)
    goto LABEL_9;
  v15 = WebCore::InspectorInstrumentation::willInterceptImpl(*(_QWORD *)(*(_QWORD *)(v49 + 80) + 8), this);
LABEL_10:
  v16 = (unsigned int *)(v11 + 8);
  do
  {
    v17 = __ldaxr(v16);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v16));
  if (v18)
  {
    if (!v15)
      goto LABEL_14;
LABEL_68:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v52 = v80[0];
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v53 = v80[0];
    if (v52)
      *(_DWORD *)v52 += 2;
    v54 = *(WTF::StringImpl **)this;
    if (*(_QWORD *)this)
      *(_DWORD *)v54 += 2;
    v55 = *(_OWORD *)((char *)this + 24);
    v73 = *(_OWORD *)((char *)this + 8);
    v74 = v55;
    if (v53)
      *(_DWORD *)v53 += 2;
    v76 = 0;
    v77 = 1;
    v79 = 1;
    v72[0] = 0;
    v72[1] = 0;
    v80[0] = v52;
    v80[1] = v54;
    v81 = v73;
    v82 = v74;
    LODWORD(v73) = v73 & 0xFFFFFFFE;
    v75 = 0;
    v83 = v53;
    v84 = 0;
    v85 = 1;
    v78 = 0;
    v86 = 0;
    v87 = 1;
    std::experimental::fundamentals_v3::expected<WebCore::CachedResourceHandle<WebCore::CachedResource>,WebCore::ResourceError>::expected(a4, (uint64_t *)v80);
    WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v80, v56);
    WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v72, v57);
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, v58);
      else
        *(_DWORD *)v53 -= 2;
    }
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
        WTF::StringImpl::destroy(v52, v58);
      else
        *(_DWORD *)v52 -= 2;
    }
    return;
  }
  atomic_store(1u, v16);
  v50 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v50 = off_1E31FE290;
  *((_QWORD *)v50 + 1) = v16;
  v80[0] = v50;
  WTF::ensureOnMainThread();
  v51 = v80[0];
  v80[0] = 0;
  if (v51)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v51 + 8))(v51);
  if ((v15 & 1) != 0)
    goto LABEL_68;
LABEL_14:
  v19 = *((_QWORD *)this + 25);
  if (!v19 || !*(_DWORD *)(v19 + 4))
  {
    v20 = *((_QWORD *)a2 + 9);
    if (v20)
    {
      if ((v5 & 0xFE) == 2)
      {
        v21 = *(_QWORD *)(v20 + 8);
        if (v21)
        {
          WebCore::Document::encoding(v21, a3, v80);
          v23 = v80[0];
          if (v80[0])
          {
            v24 = *(_DWORD *)v80[0];
            v25 = *(_DWORD *)v80[0] + 2;
            *(_DWORD *)v80[0] = v25;
            if (!v24)
            {
              WTF::StringImpl::destroy(v23, v22);
              v25 = *(_DWORD *)v23 + 2;
            }
            *(_DWORD *)v23 = v25;
          }
          v26 = (WTF::StringImpl *)*((_QWORD *)this + 25);
          *((_QWORD *)this + 25) = v23;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v22);
            else
              *(_DWORD *)v26 -= 2;
          }
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v22);
            else
              *(_DWORD *)v23 -= 2;
          }
        }
      }
    }
  }
  WebCore::CachedResourceLoader::requestResource((uint64_t *)a4, (int)a2, v5, this);
  if (*(_DWORD *)(a4 + 80))
    return;
  v28 = (uint64_t *)*((_QWORD *)a2 + 12);
  v29 = *(_QWORD *)a4;
  if (!v28)
  {
LABEL_38:
    if (!v29)
    {
      v71 = 0;
      goto LABEL_44;
    }
    do
LABEL_39:
      v40 = __ldaxr((unsigned int *)v29);
    while (__stlxr(v40 + 1, (unsigned int *)v29));
    v71 = (unsigned int *)v29;
    v41 = *(_QWORD *)(v29 + 8);
    if (v41)
    {
      v72[0] = (uint64_t)&v71;
      ++*(_DWORD *)(v41 + 548);
      v42 = *(_QWORD *)(v41 + 488);
      if (!v42
        || !*(_QWORD *)(v42 + 8)
        || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v41 + 464), v72, (uint64_t)v80), v71)&& (v41 = *((_QWORD *)v71 + 1)) != 0)
      {
        if ((*(_BYTE *)(v41 + 556) & 0x1F) == 4)
        {
          v59 = *(_QWORD *)(v41 + 8);
          if (v59)
            goto LABEL_108;
          v59 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v59 = 1;
          *(_QWORD *)(v59 + 8) = v41;
          v63 = *(unsigned int **)(v41 + 8);
          *(_QWORD *)(v41 + 8) = v59;
          if (!v63)
            goto LABEL_108;
          do
          {
            v64 = __ldaxr(v63);
            v65 = v64 - 1;
          }
          while (__stlxr(v65, v63));
          if (!v65)
          {
            atomic_store(1u, v63);
            WTF::fastFree((WTF *)v63, v27);
          }
          v59 = *(_QWORD *)(v41 + 8);
          if (v59)
          {
LABEL_108:
            do
              v60 = __ldaxr((unsigned int *)v59);
            while (__stlxr(v60 + 1, (unsigned int *)v59));
            v70 = (unsigned int *)v59;
            v61 = *(_QWORD *)(v59 + 8);
            if (v61)
            {
              v72[0] = (uint64_t)&v70;
              ++*(_DWORD *)(v61 + 548);
              v62 = *(_QWORD *)(v61 + 488);
              if (!v62
                || !*(_QWORD *)(v62 + 8)
                || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v61 + 464), v72, (uint64_t)v80), v70)&& (v61 = *((_QWORD *)v70 + 1)) != 0)
              {
                WebCore::CachedFont::beginLoadIfNeeded((WebCore::CachedResource *)v61, a2);
              }
            }
            goto LABEL_45;
          }
        }
      }
    }
LABEL_44:
    v70 = 0;
LABEL_45:
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v70, v27);
    ++*(_DWORD *)(*((_QWORD *)v71 + 1) + 552);
    v43 = (_OWORD *)*((_QWORD *)a2 + 12);
    if (!v43)
    {
      v43 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
      *v43 = 0u;
      v43[1] = 0u;
      v46 = (WTF *)*((_QWORD *)a2 + 12);
      *((_QWORD *)a2 + 12) = v43;
      if (v46)
      {
        v47 = (WTF *)*((_QWORD *)v46 + 1);
        while (v47)
        {
          v66 = v47;
          v47 = (WTF *)*((_QWORD *)v47 + 2);
          v67 = *(unsigned int **)v66;
          *(_QWORD *)v66 = 0;
          if (v67)
          {
            do
            {
              v68 = __ldaxr(v67);
              v69 = v68 - 1;
            }
            while (__stlxr(v69, v67));
            if (!v69)
            {
              atomic_store(1u, v67);
              WTF::fastFree((WTF *)v67, v45);
            }
          }
          WTF::fastFree(v66, v45);
        }
        if (*(_QWORD *)v46)
          WTF::fastFree((WTF *)(*(_QWORD *)v46 - 16), v45);
        WTF::fastFree(v46, v45);
        v43 = (_OWORD *)*((_QWORD *)a2 + 12);
      }
    }
    WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::CachedResource>((uint64_t)v43, *((_QWORD *)v71 + 1), (uint64_t)v80);
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v71, v44);
    return;
  }
  v30 = *(_QWORD *)(v29 + 8);
  ++*((_DWORD *)v28 + 6);
  v31 = *(_QWORD *)(v30 + 8);
  if (!v31)
    goto LABEL_39;
  if (!*(_QWORD *)(v31 + 8))
    goto LABEL_39;
  v32 = *v28;
  if (!v32)
    goto LABEL_39;
  v33 = *(_DWORD *)(v32 - 8);
  v34 = (~(v31 << 32) + v31) ^ ((unint64_t)(~(v31 << 32) + v31) >> 22);
  v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
  v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
  v37 = v33 & ((v36 >> 31) ^ v36);
  for (i = 1; ; ++i)
  {
    v39 = *(_QWORD **)(v32 + 8 * v37);
    if (v39 != (_QWORD *)-1)
    {
      if (!v39)
        goto LABEL_38;
      if (*v39 == v31)
        break;
    }
    v37 = (v37 + i) & v33;
  }
}

BOOL WebCore::HTMLLinkElement::mediaAttributeMatches(WebCore::HTMLLinkElement *this)
{
  uint64_t v1;
  unsigned int **v2;
  _BOOL8 v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _BYTE *v9;
  WTF::StringImpl *v10;
  unsigned int *v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  WebCore::MQ::MediaQuery *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  WTF::StringImpl *v19;
  WebCore::MQ::MediaQuery *v20;
  unsigned int v21;
  _QWORD v22[3];
  char v23;
  _BYTE v24[64];
  char v25;

  v2 = (unsigned int **)((char *)this + 216);
  v1 = *((_QWORD *)this + 27);
  if (!v1 || !*(_DWORD *)(v1 + 4))
    return 1;
  v24[0] = 0;
  v25 = 0;
  v6 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (*(_QWORD *)(v6 + 1944) && !*(_BYTE *)(v6 + 3405))
  {
    WebCore::Style::resolveForDocument(*(WebCore::Style **)(*((_QWORD *)this + 5) + 8), (uint64_t)v22);
    std::optional<WebCore::RenderStyle>::operator=[abi:sn180100]<WebCore::RenderStyle,void>((uint64_t)v24, (WTF::StringImpl *)v22);
    WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v22, v7);
    v6 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  }
  WebCore::MediaQueryParserContext::MediaQueryParserContext(v22, (const WebCore::Document *)v6);
  WebCore::MQ::MediaQueryParser::parse(v2, (const WTF::String *)v22, &v20);
  WebCore::LocalFrameView::mediaType(*(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528) + 8)+ 288), &v19);
  v8 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (v25)
    v9 = v24;
  else
    v9 = 0;
  v10 = v19;
  if (v19)
    *(_DWORD *)v19 += 2;
  v22[0] = v10;
  v11 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v8);
  if (v11)
  {
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 + 1, v11));
    v10 = v19;
  }
  v22[1] = v11;
  v22[2] = v9;
  v23 = 2;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v12);
    else
      *(_DWORD *)v10 -= 2;
  }
  if (v21)
  {
    v14 = v20;
    v15 = 56 * v21 - 56;
    do
    {
      v3 = WebCore::MQ::MediaQueryEvaluator::evaluate((WebCore::MQ::MediaQueryEvaluator *)v22, v14);
      if (v3)
        break;
      v14 = (WebCore::MQ::MediaQuery *)((char *)v14 + 56);
      v16 = v15;
      v15 -= 56;
    }
    while (v16);
  }
  else
  {
    v3 = 1;
  }
  WebCore::MQ::MediaQueryEvaluator::~MediaQueryEvaluator((WebCore::MQ::MediaQueryEvaluator *)v22, v12);
  WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v17);
  if (v25)
    WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v24, v18);
  return v3;
}

void WebCore::CachedResourceLoader::requestCSSStyleSheet(WebCore::ResourceRequest *this@<X1>, _QWORD *a2@<X0>, uint64_t a3@<X8>)
{
  void *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19[10];
  unsigned int *v20;
  unsigned int **v21;
  WTF::StringImpl *v22[10];
  unsigned int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  WebCore::CachedResourceLoader::requestResource(v22, this, a2, (WTF::StringImpl *)2, 0, 0);
  if (!v23)
  {
    if (!v22[0])
      goto LABEL_4;
    v5 = *((_QWORD *)v22[0] + 1);
    if (!v5)
      goto LABEL_4;
    v7 = *(unsigned int **)(v5 + 8);
    if (v7
      || (v14 = *((_QWORD *)v22[0] + 1),
          v7 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10),
          *v7 = 1,
          *((_QWORD *)v7 + 1) = v14,
          v15 = *(unsigned int **)(v14 + 8),
          v18 = v14,
          *(_QWORD *)(v14 + 8) = v7,
          !v15))
    {
      do
LABEL_13:
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      v20 = v7;
      v9 = *((_QWORD *)v7 + 1);
      if (!v9
        || (v21 = &v20, ++*(_DWORD *)(v9 + 548), (v10 = *(_QWORD *)(v9 + 488)) == 0)
        || !*(_QWORD *)(v10 + 8)
        || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v9 + 464), (uint64_t *)&v21, (uint64_t)v19), (v7 = v20) != 0))
      {
        do
          v11 = __ldaxr(v7);
        while (__stlxr(v11 + 1, v7));
        *(_QWORD *)a3 = v7;
        v12 = *((_QWORD *)v7 + 1);
        if (v12)
        {
          v21 = (unsigned int **)a3;
          ++*(_DWORD *)(v12 + 548);
          v13 = *(_QWORD *)(v12 + 488);
          if (v13)
          {
            if (*(_QWORD *)(v13 + 8))
              WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v12 + 464), (uint64_t *)&v21, (uint64_t)v19);
          }
        }
        goto LABEL_6;
      }
LABEL_5:
      *(_QWORD *)a3 = 0;
LABEL_6:
      *(_DWORD *)(a3 + 80) = 0;
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v20, v4);
      goto LABEL_7;
    }
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (v17)
    {
LABEL_27:
      v7 = *(unsigned int **)(v18 + 8);
      if (!v7)
      {
LABEL_4:
        v20 = 0;
        goto LABEL_5;
      }
      goto LABEL_13;
    }
LABEL_30:
    atomic_store(1u, v15);
    WTF::fastFree((WTF *)v15, v4);
    goto LABEL_27;
  }
  if (v23 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_30;
  }
  makeUnexpected<WebCore::ResourceError &>((uint64_t)v19, (uint64_t)v22);
  std::experimental::fundamentals_v3::expected<WebCore::CachedResourceHandle<WebCore::CachedResource>,WebCore::ResourceError>::expected(a3, v19);
  WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v19, v6);
LABEL_7:
  if (v23 != -1)
    (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS6_14CachedResourceEEENS6_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix
     + v23))((int)v19, (WebCore::CachedResourceHandleBase *)v22);
}

uint64_t WebCore::ResourceRequestBase::ResourceRequestBase(uint64_t a1, uint64_t a2, char a3)
{
  _DWORD *v5;
  __int128 v6;
  __int128 v7;
  char v8;
  _DWORD *v9;
  uint64_t v11;

  v5 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v5 += 2;
  *(_QWORD *)a1 = v5;
  v6 = *(_OWORD *)(a2 + 8);
  v7 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 24) = v7;
  WTF::URL::invalidate((WTF::URL *)(a1 + 40));
  *(_QWORD *)(a1 + 80) = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(a1 + 88) = v11;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_BYTE *)(a1 + 144) = a3;
  *(_WORD *)(a1 + 145) = 256;
  *(_BYTE *)(a1 + 147) = 0;
  v8 = *(_BYTE *)(a1 + 148) & 0x80 | 4;
  *(_BYTE *)(a1 + 148) = v8;
  *(_QWORD *)(a1 + 152) = 0;
  v9 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v9 += 2;
    v8 = *(_BYTE *)(a1 + 148);
  }
  *(_QWORD *)(a1 + 160) = v9;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 180) = 0;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a1 + 184) & 0xE0 | 5;
  *(_BYTE *)(a1 + 148) = v8 | 2;
  return a1;
}

uint64_t WebCore::LinkLoader::resourceTypeFromAsAttribute(uint64_t *a1, _QWORD *a2, int a3)
{
  uint64_t v5;
  unsigned __int16 Options;
  unint64_t v7;
  int v8;
  uint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v5 = *a1;
  if (*a1 && *(_DWORD *)(v5 + 4) == 5)
  {
    v10 = *(_QWORD *)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v10 & 0xDF) != 0x46
        || (*(_BYTE *)(v10 + 1) & 0xDF) != 0x45
        || (*(_BYTE *)(v10 + 2) & 0xDF) != 0x54
        || (*(_BYTE *)(v10 + 3) & 0xDF) != 0x43)
      {
        goto LABEL_2;
      }
      v11 = *(unsigned __int8 *)(v10 + 4);
    }
    else
    {
      if ((*(_WORD *)v10 & 0xFFDF) != 0x46
        || (*(_WORD *)(v10 + 2) & 0xFFDF) != 0x45
        || (*(_WORD *)(v10 + 4) & 0xFFDF) != 0x54
        || (*(_WORD *)(v10 + 6) & 0xFFDF) != 0x43)
      {
        goto LABEL_2;
      }
      v11 = *(unsigned __int16 *)(v10 + 8);
    }
    if ((v11 & 0xFFFFFFDF) == 0x48)
    {
      LODWORD(v7) = 1;
      v8 = 8;
      return v8 | ((_DWORD)v7 << 8);
    }
  }
LABEL_2:
  Options = WebCore::parseEnumerationFromString<WebCore::FetchOptionsDestination>(a1);
  if (Options <= 0xFFu)
  {
    if (a3)
    {
LABEL_30:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::Document::addConsoleMessage(a2, 16, 2, &v14, 0);
      v13 = v14;
      v14 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
LABEL_5:
    v8 = 0;
    LODWORD(v7) = 0;
  }
  else
  {
    LODWORD(v7) = 1;
    v8 = 3;
    switch((char)Options)
    {
      case 0:
        if (!a3)
          goto LABEL_5;
        goto LABEL_30;
      case 1:
        if ((*(_QWORD *)(a2[85] + 688) & 0x200) != 0)
          v8 = 6;
        else
          v8 = 0;
        v7 = (*(_QWORD *)(a2[85] + 688) & 0x200uLL) >> 9;
        break;
      case 2:
      case 11:
      case 13:
      case 14:
      case 15:
      case 19:
        return v8 | ((_DWORD)v7 << 8);
      case 5:
        LODWORD(v7) = 1;
        v8 = 4;
        break;
      case 6:
        v8 = 1;
        LODWORD(v7) = 1;
        break;
      case 16:
        LODWORD(v7) = 1;
        v8 = 2;
        break;
      case 17:
        LODWORD(v7) = 1;
        v8 = 14;
        break;
      case 18:
        if ((*(_QWORD *)(a2[85] + 688) & 0x200) != 0)
          v8 = 6;
        else
          v8 = 0;
        v7 = (*(_QWORD *)(a2[85] + 688) & 0x200uLL) >> 9;
        break;
      default:
        goto LABEL_5;
    }
  }
  return v8 | ((_DWORD)v7 << 8);
}

uint64_t WebCore::Quirks::shouldIgnoreViewportArgumentsToAvoidExcessiveZoom(WebCore::Quirks *this, const WTF::URL *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (!*(_QWORD *)this)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (!*(_BYTE *)(v3 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  return WebCore::isWikipediaDomain((WebCore *)(v2 + 736), a2);
}

void WebCore::Page::updateStyleForAllPagesAfterGlobalChangeInEnvironment(WebCore::Page *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t v5;
  WebCore::Page *v6;
  WTF *v7;
  void *v8;

  {
    if (WebCore::allPages(void)::set && *(_DWORD *)(WebCore::allPages(void)::set - 12))
    {
      v1 = *(unsigned int *)(WebCore::allPages(void)::set - 4);
      if ((_DWORD)v1)
      {
        v2 = 8 * v1;
        for (i = (uint64_t *)WebCore::allPages(void)::set; (unint64_t)(*i + 1) <= 1; ++i)
        {
          v2 -= 8;
          if (!v2)
            return;
        }
      }
      else
      {
        i = (uint64_t *)WebCore::allPages(void)::set;
      }
      v4 = WebCore::allPages(void)::set + 8 * v1;
      if (i != (uint64_t *)v4)
      {
        v5 = *i;
LABEL_12:
        v6 = *(WebCore::Page **)(v5 + 8);
        ++*(_DWORD *)v6;
        WebCore::Page::updateStyleAfterChangeInEnvironment(v6);
        if (*(_DWORD *)v6 == 1)
        {
          WebCore::Page::~Page((uint64_t)v6);
          WTF::fastFree(v7, v8);
        }
        else
        {
          --*(_DWORD *)v6;
        }
        while (++i != (uint64_t *)v4)
        {
          v5 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != (uint64_t *)v4)
              goto LABEL_12;
            return;
          }
        }
      }
    }
  }
  else
  {
    WebCore::allPages(void)::set = 0;
  }
}

uint64_t WebCore::Page::setMuted(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v5;

  *(_BYTE *)(a1 + 352) = a2;
  v3 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v3 = off_1E3400F98;
  v5 = v3;
  WebCore::Page::forEachDocument(a1, &v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

double WebCore::RenderTreeBuilder::detachFromRenderElement@<D0>(WebCore::RenderElement *this@<X1>, WebCore::RenderBox *a2@<X2>, uint64_t a3@<X0>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  WebCore::RenderElement *v31;
  uint64_t v32;
  int v33;
  WebCore::AXObjectCache *v34;
  WebCore::LayoutIntegration::LineLayout *v35;

  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 1944) + 248);
  v12 = *(unsigned int *)(v11 + 508);
  if ((_DWORD)v12 && *(_QWORD *)(*(_QWORD *)(v11 + 496) + 8 * v12 - 8))
  {
    __break(0xC471u);
    JUMPOUT(0x1943F3A74);
  }
  if (*(_BYTE *)(v10 + 3405) || *(_BYTE *)(a3 + 122) == 2)
  {
    WebCore::RenderElement::detachRendererInternal(a2, a5);
  }
  else
  {
    v14 = *((_DWORD *)a2 + 5);
    if ((v14 & 0x200) != 0)
    {
      v15 = *(unsigned __int8 *)(a3 + 121);
      v16 = v14 & 0x1800000;
      if ((v14 & 0x800) != 0 || v16 == 0x1000000)
      {
        if ((*((_BYTE *)a2 + 45) & 4) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1943F3BA4);
        }
        if ((v14 & 0x800) != 0)
        {
          WebCore::RenderBox::removeFloatingAndInvalidateForLayout(a2);
        }
        else if (v16 == 0x1000000)
        {
          {
            WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
            unk_1ECE91358 = 0u;
          }
          WebCore::PositionedDescendantsMap::removeDescendant((WebCore::PositionedDescendantsMap *)&WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants, a2);
        }
      }
      else if (*((char *)this + 45) < 0)
      {
        v17 = *((_DWORD *)this + 4) + 1;
        *((_DWORD *)this + 4) = v17;
        if ((*((_BYTE *)a2 + 45) & 4) != 0)
        {
          ++*((_DWORD *)a2 + 4);
          if ((*((_BYTE *)a2 + 52) & 7) != 3)
            WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)this + 26, a2);
          WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)this + 25, a2);
          v18 = *((_DWORD *)a2 + 4);
          if (!v18)
          {
            __break(0xC471u);
            JUMPOUT(0x1943F3B1CLL);
          }
          *((_DWORD *)a2 + 4) = v18 - 1;
          v17 = *((_DWORD *)this + 4);
        }
        if (!v17)
        {
          __break(0xC471u);
          JUMPOUT(0x1943F3B3CLL);
        }
        *((_DWORD *)this + 4) = v17 - 1;
      }
      if ((a4 & 1) == 0)
      {
        v30 = *((_DWORD *)a2 + 5);
        if ((v30 & 8) == 0)
        {
          *((_DWORD *)a2 + 5) = v30 | 8;
          v31 = WebCore::RenderObject::markContainingBlocksForLayout(a2, 0);
          WebCore::RenderObject::scheduleLayout(a2, v31);
          if ((*((_BYTE *)a2 + 21) & 0x80) != 0)
          {
            if ((*((_BYTE *)a2 + 45) & 0x10) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1943F3C24);
            }
            v32 = *((_QWORD *)a2 + 18);
            if (v32)
            {
              v33 = *(_DWORD *)(v32 + 8) + 1;
              *(_DWORD *)(v32 + 8) = v33;
            }
            else
            {
              v33 = MEMORY[8];
            }
            *(_QWORD *)(v32 + 24) = *(_QWORD *)(v32 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
            if (!v33)
            {
              __break(0xC471u);
              JUMPOUT(0x1943F3C50);
            }
            *(_DWORD *)(v32 + 8) = v33 - 1;
          }
        }
        WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)a2, 1, 1);
      }
      if ((*((_BYTE *)a2 + 45) & 2) != 0)
      {
        ++*((_DWORD *)a2 + 4);
        WebCore::RenderText::removeAndDestroyTextBoxes(a2);
        v19 = *((_DWORD *)a2 + 4);
        if (!v19)
        {
          __break(0xC471u);
          JUMPOUT(0x1943F3ADCLL);
        }
        *((_DWORD *)a2 + 4) = v19 - 1;
      }
      if (*((_BYTE *)a2 + 46) == 19)
      {
        v20 = *((_DWORD *)a2 + 4) + 1;
        *((_DWORD *)a2 + 4) = v20;
        if (!v15)
        {
          WebCore::RenderListItem::updateListMarkerNumbers(a2);
          v20 = *((_DWORD *)a2 + 4);
        }
        if (!v20)
        {
          __break(0xC471u);
          JUMPOUT(0x1943F3AFCLL);
        }
        *((_DWORD *)a2 + 4) = v20 - 1;
      }
      if (a4)
      {
        if ((v21 = (*((_DWORD *)a2 + 5) >> 25) & 7, v21 <= 4) && ((1 << v21) & 0x1A) != 0
          || (v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 1944),
              (v26 = *(_QWORD *)(v25 + 288)) != 0)
          && *(WebCore::RenderBox **)(v26 + 8) == a2
          || (v27 = *(_QWORD *)(v25 + 296)) != 0 && *(WebCore::RenderBox **)(v27 + 8) == a2)
        {
          WebCore::FrameSelection::setNeedsSelectionUpdate(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)+ 8)+ 40)+ 8)+ 528)+ 8)+ 296)+ 3064), 0);
        }
      }
    }
    if ((!*(_BYTE *)(a3 + 122) || (v22 = *(_QWORD *)(a3 + 128)) != 0 && (*(_BYTE *)(v22 + 45) & 0x20) != 0)
      && *((unsigned __int8 *)a2 + 46) - 32 <= 0xFFFFFFFD)
    {
      for (i = *((_QWORD *)a2 + 4); i; i = *(_QWORD *)(v24 + 32))
      {
        v24 = *(_QWORD *)(i + 8);
        if (!v24 || (*(_BYTE *)(v24 + 22) & 4) == 0)
          break;
        if ((*(_BYTE *)(v24 + 52) & 7) == 1)
        {
          v28 = *(_DWORD *)(v24 + 16) + 1;
          *(_DWORD *)(v24 + 16) = v28;
          if (*(_DWORD *)(v24 + 240) == 1)
          {
            v29 = *(_QWORD *)(v24 + 232);
            if (v29)
            {
              v35 = *(WebCore::LayoutIntegration::LineLayout **)(v24 + 232);
              if (WebCore::LayoutIntegration::shouldInvalidateLineLayoutPathAfterChangeFor((WebCore::RenderObject *)v24, (uint64_t)a2, v29, 1)|| (WebCore::LayoutIntegration::LineLayout::removedFromTree(v35, *(const WebCore::RenderElement **)(*((_QWORD *)a2 + 4) + 8), a2) & 1) == 0)
              {
                WebCore::RenderBlockFlow::invalidateLineLayoutPath(v24, 1);
              }
            }
            v28 = *(_DWORD *)(v24 + 16);
          }
          if (!v28)
          {
            __break(0xC471u);
            JUMPOUT(0x1943F3BC4);
          }
          *(_DWORD *)(v24 + 16) = v28 - 1;
          break;
        }
      }
    }
    if (!*(_BYTE *)(a3 + 121) && (*((_BYTE *)a2 + 23) & 0x10) != 0)
    {
      if ((*((_BYTE *)a2 + 45) & 2) != 0)
      {
        if ((*((_BYTE *)a2 + 52) & 7) != 1 || (*((_BYTE *)a2 + 53) & 2) == 0)
          WebCore::RenderObject::setFragmentedFlowStateIncludingDescendants((uint64_t)a2, 0, 1);
      }
      else
      {
        WebCore::RenderElement::removeFromRenderFragmentedFlow(a2);
      }
    }
    (*(void (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 616))(a2);
    WebCore::RenderElement::detachRendererInternal(a2, a5);
    if (WebCore::Document::hasEverCreatedAnAXObjectCache)
    {
      v34 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8));
      if (v34)
        return WebCore::AXObjectCache::childrenChanged(v34, this, 0);
    }
  }
  return result;
}

_QWORD *WebCore::RenderView::repaintViewRectangle(_QWORD *this, const WebCore::LayoutRect *a2)
{
  uint64_t v2;
  int v4;
  int v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  signed int v13;
  unsigned int v14;
  int v15;
  signed int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  float v63;
  float *v64;
  int v65;
  double v66;
  double v67;
  int v68;
  double v69;
  double v70;
  int v71;
  int v72;
  int v73;
  double v74;
  double v75;
  int v76;
  int v77;
  double v78;
  double v79;
  int v80;
  int v81;
  double v82;
  double v83;
  double v84;
  double v85;
  WTF *v86;
  void *v87;
  WTF *v88;
  WTF *v89;
  WTF *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  WTF *v96;
  uint64_t v97;
  WTF *v98;
  WTF *v99;
  WTF *v100;
  void *v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  int v114;
  double v115;
  int v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  unsigned int v126;
  int v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  unsigned int v137;
  unsigned int v138;
  int v139;
  int v140;
  unsigned int v141;
  int v142;
  int v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  double v154;
  int v155;
  double v156;
  int v157;
  int v158;
  int v159;
  __int128 v160;
  WTF *v161;
  __int128 v162;
  _BYTE v163[20];

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this[3] + 8) + 40) + 8);
  if (*(_BYTE *)(v2 + 3382))
    return this;
  v5 = *((_DWORD *)a2 + 2);
  v4 = *((_DWORD *)a2 + 3);
  if (v5 < 1 || v4 < 1)
    return this;
  v7 = this;
  v8 = *(_QWORD *)a2;
  v9 = HIDWORD(*(_QWORD *)a2);
  v10 = ((int)*(_QWORD *)a2 >> 6);
  v11 = *(uint64_t *)a2 >> 38;
  v12 = __OFADD__(*(_QWORD *)a2, v5);
  v13 = *(_QWORD *)a2 + v5;
  if (v12)
    v13 = (*(_QWORD *)a2 >> 31) + 0x7FFFFFFF;
  v14 = -(-v13 >> 6);
  if (v13 >= 0)
    v14 = (v13 + 63) >> 6;
  if (v13 <= 2147483583)
    v15 = v14;
  else
    v15 = 0x1FFFFFF;
  v12 = __OFADD__((_DWORD)v9, v4);
  v16 = v9 + v4;
  if (v12)
    v16 = (v9 >> 31) + 0x7FFFFFFF;
  v17 = -(-v16 >> 6);
  if (v16 >= 0)
    v17 = (v16 + 63) >> 6;
  if (v16 <= 2147483583)
    v18 = v17;
  else
    v18 = 0x1FFFFFF;
  v19 = (v18 - v11);
  v20 = (v15 - v10);
  *(_QWORD *)&v162 = v10 | (v11 << 32);
  *((_QWORD *)&v162 + 1) = v20 | (v19 << 32);
  v21 = *(_QWORD *)(v2 + 528);
  if (!v21 || (v22 = *(_QWORD *)(v21 + 8)) == 0)
  {
    v60 = this + 31;
    v61 = this[31];
    v63 = 1.0;
LABEL_88:
    v66 = (double)*(int *)a2 * 0.015625;
    if (v66 < 0.0)
      v67 = round((v66 + (double)-*(_DWORD *)a2) * v63) / v63 - (double)-*(_DWORD *)a2;
    else
      v67 = round(v66 * v63) / v63;
    v68 = *((_DWORD *)a2 + 1);
    v69 = (double)v68 * 0.015625;
    if (v69 < 0.0)
      v70 = round((v69 + (double)-v68) * v63) / v63 - (double)-v68;
    else
      v70 = round(v69 * v63) / v63;
    v71 = *((_DWORD *)a2 + 2);
    v72 = *(_DWORD *)a2 & 0x3F;
    if (*(int *)a2 <= 0)
      v72 = -(-*(_DWORD *)a2 & 0x3F);
    v12 = __OFADD__(v72, v71);
    v73 = v72 + v71;
    if (v12)
      v73 = (v72 >> 31) + 0x7FFFFFFF;
    v74 = (double)v73 * 0.015625;
    if (v74 < 0.0)
      v75 = round((v74 + (double)-v73) * v63) / v63 - (double)-v73;
    else
      v75 = round(v74 * v63) / v63;
    v76 = *((_DWORD *)a2 + 3);
    v77 = *((_DWORD *)a2 + 1);
    v78 = (double)v72 * 0.015625;
    if (v78 < 0.0)
      v79 = round((v78 + (double)-v72) * v63) / v63 - (double)-v72;
    else
      v79 = round(v78 * v63) / v63;
    if (v77 <= 0)
      v80 = -(-v77 & 0x3F);
    else
      v80 = *((_DWORD *)a2 + 1) & 0x3F;
    v12 = __OFADD__(v80, v76);
    v81 = v80 + v76;
    if (v12)
      v81 = (v80 >> 31) + 0x7FFFFFFF;
    v82 = (double)v81 * 0.015625;
    if (v82 < 0.0)
      v83 = round((v82 + (double)-v81) * v63) / v63 - (double)-v81;
    else
      v83 = round(v82 * v63) / v63;
    v84 = (double)v80 * 0.015625;
    if (v84 < 0.0)
      v85 = round((v84 + (double)-v80) * v63) / v63 - (double)-v80;
    else
      v85 = round(v84 * v63) / v63;
    if (*(_BYTE *)(v61 + 1371))
    {
      v102 = v75;
      v103 = v79;
      v104 = v102 - v103;
      if (v104 > 0.0)
      {
        v105 = v83;
        v106 = v85;
        v107 = v105 - v106;
        if (v107 > 0.0)
        {
          v108 = v70;
          v109 = v67;
          *((_QWORD *)&v160 + 1) = __PAIR64__(LODWORD(v107), LODWORD(v104));
          v110 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v61 + 64) + 832))(v61 + 64, 0, 1);
          *(float *)&v160 = v109 + (float)-(int)v110;
          *((float *)&v160 + 1) = v108 + (float)(int)((unint64_t)-(uint64_t)(v110 & 0xFFFFFFFF00000000) >> 32);
          v111 = *(unsigned int *)(v61 + 1068);
          if ((_DWORD)v111 == *(_DWORD *)(v61 + 1064))
          {
            WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatRect&>(v61 + 1056, (unint64_t)&v160);
          }
          else
          {
            *(_OWORD *)(*(_QWORD *)(v61 + 1056) + 16 * v111) = v160;
            ++*(_DWORD *)(v61 + 1068);
          }
        }
      }
    }
    v86 = (WTF *)v7[35];
    if (!v86)
      return (_QWORD *)WebCore::LocalFrameView::repaintContentRectangle(*v60, (const WebCore::IntRect *)&v162);
    v160 = v162;
    v161 = 0;
    this = WebCore::Region::unite(v86, (const WebCore::Region *)&v160);
    v88 = v161;
    v161 = 0;
    if (v88)
    {
      v89 = (WTF *)*((_QWORD *)v88 + 18);
      if ((WTF *)((char *)v88 + 160) != v89 && v89)
      {
        *((_QWORD *)v88 + 18) = 0;
        *((_DWORD *)v88 + 38) = 0;
        WTF::fastFree(v89, v87);
      }
      v90 = *(WTF **)v88;
      if ((WTF *)((char *)v88 + 16) != *(WTF **)v88 && v90)
      {
        *(_QWORD *)v88 = 0;
        *((_DWORD *)v88 + 2) = 0;
        WTF::fastFree(v90, v87);
      }
      this = (_QWORD *)WTF::fastFree(v88, v87);
    }
    v91 = (uint64_t *)v7[35];
    v92 = v91[2];
    if (v92)
    {
      if ((*(_DWORD *)(v92 + 12) * *(_DWORD *)(v92 + 156)) >= 0x101)
      {
        v93 = *v91;
        v94 = v91[1];
        this = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *this = v93;
        this[1] = v94;
        this[2] = 0;
        v96 = (WTF *)v7[35];
        v7[35] = this;
        if (v96)
        {
          v97 = *((_QWORD *)v96 + 2);
          *((_QWORD *)v96 + 2) = 0;
          if (v97)
          {
            v98 = *(WTF **)(v97 + 144);
            if ((WTF *)(v97 + 160) != v98 && v98)
            {
              *(_QWORD *)(v97 + 144) = 0;
              *(_DWORD *)(v97 + 152) = 0;
              WTF::fastFree(v98, v95);
            }
            v99 = *(WTF **)v97;
            if (v97 + 16 != *(_QWORD *)v97 && v99)
            {
              *(_QWORD *)v97 = 0;
              *(_DWORD *)(v97 + 8) = 0;
              WTF::fastFree(v99, v95);
            }
            WTF::fastFree((WTF *)v97, v95);
          }
          return (_QWORD *)WTF::fastFree(v96, v95);
        }
      }
    }
    return this;
  }
  v23 = *(_QWORD *)(v22 + 120);
  if (!v23 || (v24 = *(_QWORD *)(v23 + 8)) == 0)
  {
    v60 = this + 31;
    v61 = this[31];
    v62 = *(_QWORD *)(v22 + 24);
    v63 = 1.0;
    if (v62)
    {
      v64 = *(float **)(v62 + 8);
      if (v64)
      {
        v65 = (*(_DWORD *)v64)++;
        v63 = v64[91];
        if (v65)
        {
          *(_DWORD *)v64 = v65;
        }
        else
        {
          WebCore::Page::~Page((WebCore::Page *)v64);
          WTF::fastFree(v100, v101);
        }
      }
    }
    goto LABEL_88;
  }
  v25 = *(_QWORD *)(v24 + 64) & 0xFFFFFFFFFFFFLL;
  if ((int)v20 <= 0x1FFFFFF && (int)v19 <= 0x1FFFFFF)
  {
    if (!v25 || (*(_BYTE *)((*(_QWORD *)(v24 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) == 0)
      return this;
    this = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(this[31] + 64) + 832))(this[31] + 64, 0, 1);
    v26 = (int)v20 >= -33554432 ? ((_DWORD)v20 << 6) : 0x80000000;
    v27 = (int)v19 >= -33554432 ? ((_DWORD)v19 << 6) : 0x80000000;
    if ((int)v26 < 1 || (int)v27 < 1)
      return this;
    v28 = v9 & 0xFFFFFFC0;
    if ((int)this >= -33554432)
      v29 = ((_DWORD)this << 6);
    else
      v29 = 0x80000000;
    if ((int)this > 0x1FFFFFF)
      v29 = 0x7FFFFFFFLL;
    v30 = v8 & 0xFFFFFFC0;
    if (SHIDWORD(this) >= -33554432)
      v31 = HIDWORD(this) << 6;
    else
      v31 = 0x80000000;
    if (SHIDWORD(this) > 0x1FFFFFF)
      v31 = 0x7FFFFFFF;
    if (v31 == 0x80000000)
      v32 = 0x7FFFFFFF;
    else
      v32 = -v31;
    if (v29 == 0x80000000)
      v33 = 0x7FFFFFFF;
    else
      v33 = -(int)v29;
    v34 = v30 + v33;
    if (__OFADD__(v30, v33))
      v34 = (v8 >> 31) + 0x7FFFFFFF;
    v35 = v28 + v32;
    if (__OFADD__(v28, v32))
      v35 = (v9 >> 31) + 0x7FFFFFFF;
    v36 = *(_QWORD *)v25;
    if ((*(_BYTE *)(v25 + 22) & 1) == 0)
    {
      v37 = 0;
      v38 = 0;
      goto LABEL_60;
    }
    v112 = (float)(*(int (**)(uint64_t))(v36 + 1352))(v25) * 64.0;
    if (v112 >= 2147483650.0 || v112 <= -2147483650.0)
    {
      if (v112 > -2147483650.0)
        v159 = (int)v112;
      else
        v159 = 0x80000000;
      if (v112 < 2147483650.0)
        v114 = v159;
      else
        v114 = 0x7FFFFFFF;
    }
    else
    {
      v114 = (int)v112;
    }
    v115 = (float)(*(int (**)(uint64_t))(*(_QWORD *)v25 + 1360))(v25) * 64.0;
    if (v115 < 2147483650.0 && v115 > -2147483650.0)
      goto LABEL_157;
    if (v115 >= 2147483650.0)
    {
      v117 = 0x7FFFFFFF;
      goto LABEL_158;
    }
    if (v115 <= -2147483650.0)
      v117 = 0x80000000;
    else
LABEL_157:
      v117 = (int)v115;
LABEL_158:
    v118 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v25 + 88) + 40) + 584) << 23;
    v37 = v117 & (v118 >> 31);
    v38 = v114 & (v118 >> 31);
    v36 = *(_QWORD *)v25;
LABEL_60:
    v39 = (*(uint64_t (**)(uint64_t))(v36 + 920))(v25);
    v41 = v40;
    this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 992))(v25);
    v43 = (v42 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__(v42, v41))
      v43 = v42 + v41;
    v12 = __OFADD__(v43, v38);
    v44 = v43 + v38;
    v45 = (v43 >> 31) + 0x7FFFFFFF;
    if (!v12)
      v45 = v44;
    v46 = (_DWORD)this + v39;
    if (__OFADD__((_DWORD)this, v39))
      v46 = (this >> 31) + 0x7FFFFFFF;
    v12 = __OFADD__(v46, v37);
    v47 = v46 + v37;
    v48 = (v46 >> 31) + 0x7FFFFFFF;
    if (!v12)
      v48 = v47;
    v12 = __OFADD__(v34, v45);
    v49 = v34 + v45;
    if (v12)
      v49 = (v34 >> 31) + 0x7FFFFFFF;
    v50 = v35 + v48;
    if (__OFADD__(v35, v48))
      v50 = (v35 >> 31) + 0x7FFFFFFF;
    v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 24) + 8) + 40) + 8) + 1944);
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v51 + 24) + 8) + 40) + 8) + 3382))
    {
      v52 = v26 & 0x3FFFFFFFFFLL | ((unint64_t)(v27 >> 6) << 38);
      v53 = *(_QWORD *)(v51 + 248);
      v54 = *(unsigned int *)(v53 + 508);
      if ((_DWORD)v54 && (v54 = *(_QWORD *)(*(_QWORD *)(v53 + 496) + 8 * v54 - 8)) != 0)
      {
        v55 = *(_DWORD *)(v54 + 64);
        LODWORD(v54) = *(_DWORD *)(v54 + 68);
      }
      else
      {
        v55 = 0;
      }
      v12 = __OFADD__(v49, v55);
      v56 = v49 + v55;
      v57 = (v49 >> 31) + 0x7FFFFFFF;
      if (!v12)
        v57 = v56;
      v12 = __OFADD__(v50, (_DWORD)v54);
      v58 = v50 + v54;
      v59 = (v50 >> 31) + 0x7FFFFFFF;
      if (!v12)
        v59 = v58;
      *(_QWORD *)&v160 = __PAIR64__(v59, v57);
      *((_QWORD *)&v160 + 1) = v52;
LABEL_82:
      LOBYTE(v161) = 1;
      v163[0] = 0;
      v163[16] = 0;
      return (_QWORD *)WebCore::RenderObject::issueRepaint(v25, &v160, 1, 0, (uint64_t)v163);
    }
    return this;
  }
  if (v25 && (*(_BYTE *)((*(_QWORD *)(v24 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
  {
    this = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(this[31] + 64) + 832))(this[31] + 64, 0, 1);
    v119 = (_DWORD)v20 << 6;
    if ((int)v20 < -33554432)
      v119 = 0x80000000;
    if ((int)v20 <= 0x1FFFFFF)
      v120 = v119;
    else
      v120 = 0x7FFFFFFFLL;
    v121 = (_DWORD)v19 << 6;
    if ((int)v19 < -33554432)
      v121 = 0x80000000;
    v122 = (int)v19 <= 0x1FFFFFF ? v121 : 0x7FFFFFFFLL;
    if ((int)v120 >= 1 && (int)v122 >= 1)
    {
      v123 = v9 & 0xFFFFFFC0;
      if ((int)this >= -33554432)
        v124 = ((_DWORD)this << 6);
      else
        v124 = 0x80000000;
      if ((int)this > 0x1FFFFFF)
        v124 = 0x7FFFFFFFLL;
      v125 = v8 & 0xFFFFFFC0;
      if (SHIDWORD(this) >= -33554432)
        v126 = HIDWORD(this) << 6;
      else
        v126 = 0x80000000;
      if (SHIDWORD(this) > 0x1FFFFFF)
        v126 = 0x7FFFFFFF;
      if (v126 == 0x80000000)
        v127 = 0x7FFFFFFF;
      else
        v127 = -v126;
      if (v124 == 0x80000000)
        v128 = 0x7FFFFFFF;
      else
        v128 = -(int)v124;
      v129 = v125 + v128;
      if (__OFADD__(v125, v128))
        v129 = (v8 >> 31) + 0x7FFFFFFF;
      v130 = v123 + v127;
      if (__OFADD__(v123, v127))
        v130 = (v9 >> 31) + 0x7FFFFFFF;
      v131 = *(_QWORD *)v25;
      if ((*(_BYTE *)(v25 + 22) & 1) != 0)
      {
        v154 = (float)(*(int (**)(uint64_t))(v131 + 1352))(v25) * 64.0;
        if (v154 >= 2147483650.0)
        {
          v155 = 0x7FFFFFFF;
        }
        else if (v154 <= -2147483650.0)
        {
          v155 = 0x80000000;
        }
        else
        {
          v155 = (int)v154;
        }
        v156 = (float)(*(int (**)(uint64_t))(*(_QWORD *)v25 + 1360))(v25) * 64.0;
        if (v156 >= 2147483650.0)
        {
          v157 = 0x7FFFFFFF;
        }
        else if (v156 <= -2147483650.0)
        {
          v157 = 0x80000000;
        }
        else
        {
          v157 = (int)v156;
        }
        v158 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v25 + 88) + 40) + 584) << 23;
        v132 = v157 & (v158 >> 31);
        v133 = v155 & (v158 >> 31);
        v131 = *(_QWORD *)v25;
      }
      else
      {
        v132 = 0;
        v133 = 0;
      }
      v134 = (*(uint64_t (**)(uint64_t))(v131 + 920))(v25);
      v136 = v135;
      this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 992))(v25);
      v138 = (v137 >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(v137, v136))
        v138 = v137 + v136;
      v12 = __OFADD__(v138, v133);
      v139 = v138 + v133;
      v140 = (v138 >> 31) + 0x7FFFFFFF;
      if (!v12)
        v140 = v139;
      v141 = (_DWORD)this + v134;
      if (__OFADD__((_DWORD)this, v134))
        v141 = (this >> 31) + 0x7FFFFFFF;
      v12 = __OFADD__(v141, v132);
      v142 = v141 + v132;
      v143 = (v141 >> 31) + 0x7FFFFFFF;
      if (!v12)
        v143 = v142;
      v12 = __OFADD__(v129, v140);
      v144 = v129 + v140;
      if (v12)
        v144 = (v129 >> 31) + 0x7FFFFFFF;
      v145 = v130 + v143;
      if (__OFADD__(v130, v143))
        v145 = (v130 >> 31) + 0x7FFFFFFF;
      v146 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 24) + 8) + 40) + 8) + 1944);
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v146 + 24) + 8) + 40) + 8) + 3382))
      {
        v147 = *(_QWORD *)(v146 + 248);
        v148 = *(unsigned int *)(v147 + 508);
        if ((_DWORD)v148 && (v148 = *(_QWORD *)(*(_QWORD *)(v147 + 496) + 8 * v148 - 8)) != 0)
        {
          v149 = *(_DWORD *)(v148 + 64);
          LODWORD(v148) = *(_DWORD *)(v148 + 68);
        }
        else
        {
          v149 = 0;
        }
        v12 = __OFADD__(v144, v149);
        v150 = v144 + v149;
        v151 = (v144 >> 31) + 0x7FFFFFFF;
        if (!v12)
          v151 = v150;
        v12 = __OFADD__(v145, (_DWORD)v148);
        v152 = v145 + v148;
        v153 = (v145 >> 31) + 0x7FFFFFFF;
        if (!v12)
          v153 = v152;
        *(_QWORD *)&v160 = __PAIR64__(v153, v151);
        *((_QWORD *)&v160 + 1) = v120 | (v122 << 32);
        goto LABEL_82;
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderObject::issueRepaint(uint64_t result, __int128 *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  void *v35;
  WTF *v36;
  uint64_t v37;
  char v38;
  const WebCore::FilterOperations *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int32x2_t *v49;
  int32x2_t v50;
  uint64_t v51;
  uint64_t v52;
  int32x2_t *v53;
  uint64_t v54;
  int32x2_t *v55;
  int32x2_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float v63;
  uint64_t v64;
  uint64_t v65;
  float *v66;
  int v67;
  double v68;
  double v69;
  double v70;
  double v71;
  int v72;
  int v73;
  double v74;
  double v75;
  double v76;
  double v77;
  int v78;
  int v79;
  double v80;
  double v81;
  double v82;
  double v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  uint64_t v92;
  int32x2_t v93;
  int32x2_t v94;
  int32x2_t v95;
  int32x2_t v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  int v112;
  __int128 v113;
  uint64_t v114;
  unsigned int v115;
  unint64_t v116;
  signed int v117;
  unsigned int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  int v136;
  int v137;
  BOOL v138;
  int v139;
  unsigned int v140;
  uint64_t v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  unsigned int v147;
  int v148;
  int v149;
  unsigned int v150;
  int v151;
  int v152;
  unsigned int v153;
  unsigned int v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  _DWORD *v165;
  int v166;
  int v167;
  uint64_t v168;
  WebCore::RenderView *v169;
  uint64_t v170;
  WebCore::RenderView *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unsigned int v176;
  int v177;
  uint64_t v178;
  WebCore::RenderView *v179;
  WebCore::RenderView *v180;
  float64x2_t *v181;
  float v182;
  unsigned int v183;
  unsigned int v184;
  int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  int32x2_t v194;
  int v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  float v199;
  float *v200;
  int v201;
  double v202;
  double v203;
  double v204;
  double v205;
  int v206;
  int v207;
  double v208;
  double v209;
  double v210;
  double v211;
  int v212;
  int v213;
  double v214;
  double v215;
  double v216;
  double v217;
  WTF *v218;
  WTF *v219;
  WTF *v220;
  WTF *v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  WTF *v226;
  uint64_t v227;
  WTF *v228;
  WTF *v229;
  uint64_t v230;
  uint64_t *v231;
  WebCore::Page *v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  unint64_t v237;
  int32x2_t v238;
  int8x8_t v239;
  int8x8_t v240;
  float32x2_t v241;
  WTF *v242;
  void *v243;
  WTF *v244;
  void *v245;
  uint64_t v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  unsigned int v253;
  unsigned int v254;
  uint64_t v255;
  int32x2_t v256;
  uint64_t v257;
  WebCore::RenderLayerCompositor *v258;
  WebCore::RenderLayerCompositor *v259;
  WTF *v260;
  void *v261;
  uint64_t v262;
  WebCore::RenderLayerCompositor *v263;
  WebCore::RenderLayerCompositor *v264;
  WTF *v265;
  void *v266;
  WebCore::RenderLayerCompositor *v267;
  WebCore::RenderLayerCompositor *v268;
  WTF *v269;
  void *v270;
  uint64_t v271;
  WebCore::RenderLayerCompositor *v272;
  WebCore::RenderLayerCompositor *v273;
  WTF *v274;
  void *v275;
  __int128 *v276;
  int v277;
  const WebCore::FilterOperations *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  int v283;
  int v284;
  const WebCore::FilterOperations *v285;
  double v286;
  uint64_t v287;
  int v288;
  int v289;
  int v290;
  int v291;
  uint64_t v292;
  int v293;
  __int128 *v294;
  int v295;
  double v296;
  int v298;
  double v299;
  int v301;
  int v302;
  unsigned int v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  unsigned int v308;
  unsigned int v309;
  int v310;
  int v311;
  unsigned int v312;
  unsigned int v313;
  uint64_t v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  unsigned int v320;
  int v321;
  int v322;
  unsigned int v323;
  int v324;
  int v325;
  unsigned int v326;
  unsigned int v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  int v332;
  int v333;
  int v334;
  int v335;
  int v336;
  int v337;
  int v338;
  int v339;
  double v340;
  int v341;
  double v342;
  int v343;
  int v344;
  int v345;
  unint64_t v346;
  uint64_t v347;
  unsigned int v348;
  uint64_t v349;
  __int128 v350;
  __int128 v351;
  char v352;
  char v353;
  __int128 v354;
  WTF *v355;
  char v356;
  __int128 v357;
  __int128 v358;

  v7 = result;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8) + 40) + 8) + 1944);
  v9 = *(_QWORD *)(v8 + 400);
  if (!v9 || !*(_BYTE *)(v9 + 195))
    goto LABEL_69;
  v10 = result;
  if ((*(_BYTE *)(result + 45) & 0x10) == 0)
  {
    v30 = *(_QWORD *)(result + 32);
    if (!v30)
      goto LABEL_69;
    v10 = *(_QWORD *)(v30 + 8);
    if (!v10)
      goto LABEL_69;
    v11 = 0;
    v12 = 0;
    while ((*(_BYTE *)(v10 + 45) & 0x10) == 0)
    {
      v31 = *(_QWORD *)(v10 + 32);
      if (!v31)
        goto LABEL_69;
      v10 = *(_QWORD *)(v31 + 8);
      if (!v10)
        goto LABEL_82;
    }
  }
  if ((*(_BYTE *)(v10 + 21) & 0x80) == 0)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = *(_QWORD *)(v10 + 32);
      if (!v13)
        goto LABEL_69;
      v10 = *(_QWORD *)(v13 + 8);
      if (!v10)
        goto LABEL_69;
      while ((*(_BYTE *)(v10 + 45) & 0x10) == 0)
      {
        v32 = *(_QWORD *)(v10 + 32);
        if (!v32)
          goto LABEL_69;
        v10 = *(_QWORD *)(v32 + 8);
        if (!v10)
          goto LABEL_82;
      }
    }
    while ((*(_BYTE *)(v10 + 21) & 0x80) == 0);
  }
  v14 = *(_QWORD *)(v10 + 144);
  if (!v14)
  {
LABEL_69:
    v11 = 0;
    v12 = 0;
    goto LABEL_82;
  }
  ++*(_DWORD *)(v14 + 8);
  v15 = *(_QWORD *)(v14 + 24);
  if ((v15 & 0x800) != 0
    && ((v16 = *(_QWORD *)(v14 + 32), (*(_BYTE *)(v16 + 22) & 1) == 0)
     || ((*(_BYTE *)(v16 + 45) & 2) != 0
       ? (v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 8) + 96))
       : (v19 = *(_QWORD *)(v16 + 96)),
         (v20 = v19 & 0x1C00, v20 == 2048) || !v20)))
  {
    v17 = (WORD1(v15) & 3) - 1 < 2u;
    if (*(_BYTE *)(v16 + 46) == 49)
      v17 = 0;
    v18 = *(_QWORD *)(v14 + 256);
    if (!v18)
      goto LABEL_22;
  }
  else
  {
    v17 = 0;
    v18 = *(_QWORD *)(v14 + 256);
    if (!v18)
      goto LABEL_22;
  }
  if (*(_BYTE *)(v18 + 291))
  {
    v22 = v14;
    goto LABEL_51;
  }
LABEL_22:
  v21 = *(_QWORD *)(v14 + 80);
  if (!v21 || (v22 = *(_QWORD *)(v21 + 8)) == 0)
  {
    if ((v15 & 4) == 0)
    {
      v22 = v14;
      while (1)
      {
        v22 = *(_QWORD *)(v22 + 40);
        if (!v22)
          break;
        if ((*(_BYTE *)(v22 + 24) & 0x4A) != 0)
          goto LABEL_27;
      }
LABEL_78:
      v11 = 0;
      goto LABEL_79;
    }
    v22 = *(_QWORD *)(v14 + 40);
    if (!v22)
      goto LABEL_78;
LABEL_27:
    while (!v17)
    {
      v23 = *(_QWORD *)(v22 + 24);
      if ((v23 & 0x800) != 0)
      {
        v24 = *(_QWORD *)(v22 + 32);
        if ((*(_BYTE *)(v24 + 22) & 1) != 0
          && ((*(_BYTE *)(v24 + 45) & 2) != 0
            ? (v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 32) + 8) + 96))
            : (v28 = *(_QWORD *)(v24 + 96)),
              (v29 = v28 & 0x1C00, v29 != 2048) && v29))
        {
          v17 = 0;
        }
        else
        {
          v17 = (WORD1(v23) & 3) - 1 < 2u;
          if (*(_BYTE *)(v24 + 46) == 49)
            v17 = 0;
        }
LABEL_32:
        v25 = *(_QWORD *)(v22 + 256);
        if (!v25)
          goto LABEL_33;
        goto LABEL_39;
      }
      v17 = 0;
      v25 = *(_QWORD *)(v22 + 256);
      if (!v25)
        goto LABEL_33;
LABEL_39:
      if (*(_BYTE *)(v25 + 291))
        goto LABEL_51;
LABEL_33:
      v26 = *(_QWORD *)(v22 + 80);
      if (v26)
      {
        v27 = *(_QWORD *)(v26 + 8);
        if (v27)
        {
          v22 = v27;
          goto LABEL_51;
        }
      }
      if ((*(_BYTE *)(v22 + 24) & 4) == 0)
      {
        while (1)
        {
          v22 = *(_QWORD *)(v22 + 40);
          if (!v22)
            goto LABEL_78;
          if ((*(_BYTE *)(v22 + 24) & 0x4A) != 0)
            goto LABEL_27;
        }
      }
      v22 = *(_QWORD *)(v22 + 40);
      if (!v22)
        goto LABEL_78;
    }
    v17 = 1;
    goto LABEL_32;
  }
LABEL_51:
  v11 = *(_QWORD *)(v22 + 32);
  if (v11)
    ++*(_DWORD *)(v11 + 16);
  if (v17)
  {
    if ((*(_BYTE *)(result + 45) & 2) != 0 || (*(_BYTE *)(result + 21) & 0x80) == 0)
      goto LABEL_56;
    if ((*(_BYTE *)(result + 45) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1943F6034);
    }
    v33 = *(_QWORD *)(result + 144);
    if (v33 && (*(_BYTE *)(v33 + 25) & 8) != 0)
      v12 = *(_BYTE *)(v11 + 22) & 1;
    else
LABEL_56:
      v12 = 1;
    goto LABEL_80;
  }
LABEL_79:
  v12 = 0;
LABEL_80:
  v34 = *(_DWORD *)(v14 + 8);
  if (!v34)
  {
    __break(0xC471u);
    JUMPOUT(0x1943F5D68);
  }
  *(_DWORD *)(v14 + 8) = v34 - 1;
LABEL_82:
  if (*(_BYTE *)(v8 + 440))
  {
    v276 = a2;
    v277 = a4;
    result = WebCore::RenderObject::enclosingLayer((WebCore::RenderObject *)result);
    a4 = v277;
    a2 = v276;
    if (result)
    {
      v279 = result;
      v280 = v11;
      ++*(_DWORD *)(result + 8);
      result = (uint64_t)WebCore::RenderLayer::enclosingFilterLayer((_QWORD *)result, 0, v278);
      if (result)
      {
        v281 = result;
        ++*(_DWORD *)(result + 8);
        if ((*(_BYTE *)(v279 + 26) & 3u) - 1 > 1)
        {
          v282 = 0;
        }
        else if ((*(_BYTE *)(v7 + 45) & 2) == 0
               && (result = WebCore::RenderElement::hasSelfPaintingLayer((WebCore::RenderElement *)v7), (_DWORD)result))
        {
          v282 = *(_BYTE *)(*(_QWORD *)(v279 + 32) + 22) & 1;
        }
        else
        {
          v282 = 1;
        }
        v11 = *(_QWORD *)(v281 + 32);
        if (v11)
          ++*(_DWORD *)(v11 + 16);
        v289 = *(_DWORD *)(v281 + 8);
        if (!v289)
        {
          __break(0xC471u);
          JUMPOUT(0x1943F67C8);
        }
        *(_DWORD *)(v281 + 8) = v289 - 1;
        v290 = *(_DWORD *)(v279 + 8);
        if (v290)
        {
          *(_DWORD *)(v279 + 8) = v290 - 1;
          if (v280)
          {
            v291 = *(_DWORD *)(v280 + 16);
            if (!v291)
            {
              __break(0xC471u);
              JUMPOUT(0x1943F67E8);
            }
            *(_DWORD *)(v280 + 16) = v291 - 1;
          }
          a2 = v276;
          a4 = v277;
          v12 = v282;
          goto LABEL_84;
        }
LABEL_602:
        __break(0xC471u);
        JUMPOUT(0x1943F67A8);
      }
      v336 = *(_DWORD *)(v279 + 8);
      if (!v336)
        goto LABEL_602;
      *(_DWORD *)(v279 + 8) = v336 - 1;
      a2 = v276;
      a4 = v277;
    }
  }
  if ((*(_BYTE *)(v7 + 23) & 0x10) != 0)
  {
    v292 = v11;
    v293 = a4;
    v294 = a2;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 648))(v7);
    if (!result)
    {
      a2 = v294;
      a4 = v293;
      goto LABEL_84;
    }
    v11 = result;
    ++*(_DWORD *)(result + 16);
    if (v292)
    {
      if ((*(_BYTE *)(v292 + 23) & 0x10) != 0)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v292 + 648))(v292);
        if (result)
        {
          ++*(_DWORD *)(result + 16);
          if (result == v11)
          {
            v339 = *(_DWORD *)(v11 + 16);
            if (v339)
            {
              *(_DWORD *)(v11 + 16) = v339 - 1;
              if (v339 == 1)
              {
                __break(0xC471u);
                JUMPOUT(0x1943F6A2CLL);
              }
              *(_DWORD *)(v11 + 16) = v339 - 2;
              v11 = v292;
              goto LABEL_520;
            }
            goto LABEL_638;
          }
          v337 = *(_DWORD *)(v292 + 16);
          if (v337)
          {
            *(_DWORD *)(v292 + 16) = v337 - 1;
            v338 = *(_DWORD *)(result + 16);
            if (v338)
            {
              *(_DWORD *)(result + 16) = v338 - 1;
              goto LABEL_520;
            }
LABEL_638:
            __break(0xC471u);
            JUMPOUT(0x1943F6A0CLL);
          }
LABEL_614:
          __break(0xC471u);
          JUMPOUT(0x1943F68C0);
        }
      }
      v295 = *(_DWORD *)(v292 + 16);
      if (!v295)
        goto LABEL_614;
      *(_DWORD *)(v292 + 16) = v295 - 1;
    }
LABEL_520:
    a2 = v294;
    a4 = v293;
    goto LABEL_85;
  }
LABEL_84:
  if (v11)
    goto LABEL_85;
  v99 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40) + 8);
  v11 = *(_QWORD *)(v99 + 1944);
  v100 = *(_QWORD *)(v11 + 400);
  if (!v100 || !*(_BYTE *)(v100 + 195))
  {
    v101 = *(_QWORD *)(v99 + 528);
    if (!v101)
      goto LABEL_344;
    v102 = *(_QWORD *)(v101 + 8);
    if (!v102)
      goto LABEL_344;
    v103 = *(_QWORD *)(v102 + 120);
    if (!v103 || !*(_QWORD *)(v103 + 8))
      goto LABEL_344;
  }
  v104 = v7;
  if ((*(_BYTE *)(v7 + 45) & 0x10) != 0)
    goto LABEL_198;
  v105 = *(_QWORD *)(v7 + 32);
  if (!v105 || (v104 = *(_QWORD *)(v105 + 8)) == 0)
  {
LABEL_344:
    v12 = 0;
LABEL_297:
    ++*(_DWORD *)(v11 + 16);
    if (!v12)
      goto LABEL_87;
    goto LABEL_86;
  }
  v12 = 0;
  while ((*(_BYTE *)(v104 + 45) & 0x10) == 0)
  {
    v106 = *(_QWORD *)(v104 + 32);
    if (!v106)
      goto LABEL_209;
    v104 = *(_QWORD *)(v106 + 8);
    if (!v104)
      goto LABEL_296;
  }
LABEL_198:
  if ((*(_BYTE *)(v104 + 21) & 0x80) == 0)
  {
    while (1)
    {
      v107 = *(_QWORD *)(v104 + 32);
      if (!v107)
        goto LABEL_209;
      v104 = *(_QWORD *)(v107 + 8);
      if (!v104)
        goto LABEL_209;
      if ((*(_BYTE *)(v104 + 45) & 0x10) != 0)
        goto LABEL_198;
    }
  }
  v108 = *(_QWORD *)(v104 + 144);
  if (!v108)
  {
LABEL_209:
    v12 = 0;
    goto LABEL_296;
  }
  ++*(_DWORD *)(v108 + 8);
  while (1)
  {
    v109 = *(_QWORD *)(v108 + 24);
    if ((WORD1(v109) & 3) - 1 <= 1u)
    {
      if ((*(_BYTE *)(v7 + 45) & 2) != 0 || (*(_BYTE *)(v7 + 21) & 0x80) == 0)
        goto LABEL_293;
      if ((*(_BYTE *)(v7 + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1943F5F90);
      }
      v193 = *(_QWORD *)(v7 + 144);
      if (v193 && (*(_BYTE *)(v193 + 25) & 8) != 0)
        v12 = *(_BYTE *)(*(_QWORD *)(v108 + 32) + 22) & 1;
      else
LABEL_293:
        v12 = 1;
      v167 = *(_DWORD *)(v108 + 8);
      v165 = (_DWORD *)(v108 + 8);
      v166 = v167;
      if (!v167)
      {
        __break(0xC471u);
        JUMPOUT(0x1943F5DD8);
      }
      goto LABEL_295;
    }
    if ((v109 & 4) == 0)
      break;
    v110 = *(_QWORD *)(v108 + 40);
    if (v110)
    {
LABEL_206:
      v111 = 0;
      ++*(_DWORD *)(v110 + 8);
    }
    else
    {
      v111 = 1;
    }
    v112 = *(_DWORD *)(v108 + 8);
    if (!v112)
      goto LABEL_442;
    *(_DWORD *)(v108 + 8) = v112 - 1;
    v108 = v110;
    if ((v111 & 1) != 0)
      goto LABEL_209;
  }
  v110 = v108;
  while (1)
  {
    v110 = *(_QWORD *)(v110 + 40);
    if (!v110)
      break;
    if ((*(_BYTE *)(v110 + 24) & 0x4A) != 0)
      goto LABEL_206;
  }
  v192 = *(_DWORD *)(v108 + 8);
  v165 = (_DWORD *)(v108 + 8);
  v166 = v192;
  if (!v192)
  {
LABEL_442:
    __break(0xC471u);
    JUMPOUT(0x1943F5D88);
  }
  v12 = 0;
LABEL_295:
  *v165 = v166 - 1;
LABEL_296:
  if (v11)
    goto LABEL_297;
LABEL_85:
  if (!v12)
    goto LABEL_87;
LABEL_86:
  if (!a4)
    goto LABEL_486;
LABEL_87:
  v350 = 0uLL;
  if (*((_BYTE *)a2 + 16))
  {
    v351 = *a2;
    v352 = 0;
    v353 = 0;
    result = (uint64_t)(*(_QWORD *(**)(__int128 *__return_ptr, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v7 + 472))(&v354, v7, &v351, v11, 0xC00000000);
    if (!v356)
    {
      __break(0xC471u);
      JUMPOUT(0x1943F5CDCLL);
    }
    v350 = v354;
    if (*(_BYTE *)(a5 + 16))
      result = (uint64_t)WebCore::LayoutRect::expand(&v350, (unsigned int *)a5);
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 440))(v7, v11, 0xC00000000);
    *(_QWORD *)&v350 = result;
    *((_QWORD *)&v350 + 1) = v35;
  }
  if (v11)
  {
    v36 = *(WTF **)(v11 + 8);
    if (!v36)
    {
      v36 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v36 = 1;
      *((_QWORD *)v36 + 1) = v11;
      result = *(_QWORD *)(v11 + 8);
      *(_QWORD *)(v11 + 8) = v36;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          result = WTF::fastFree((WTF *)result, v35);
          v36 = *(WTF **)(v11 + 8);
          if (!v36)
            goto LABEL_93;
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
    }
    ++*(_DWORD *)v36;
  }
  else
  {
    v36 = 0;
  }
LABEL_93:
  if (SDWORD2(v350) < 1 || SHIDWORD(v350) < 1)
    goto LABEL_483;
  if (v36)
  {
    v37 = *((_QWORD *)v36 + 1);
    if (v37)
    {
      v38 = 0;
      goto LABEL_98;
    }
  }
  v190 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40) + 8) + 1944);
  v191 = *(_QWORD *)(v190 + 8);
  if (!v191)
  {
    v191 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v191 = 1;
    *(_QWORD *)(v191 + 8) = v190;
    result = *(_QWORD *)(v190 + 8);
    *(_QWORD *)(v190 + 8) = v191;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        result = WTF::fastFree((WTF *)result, v35);
        v191 = *(_QWORD *)(v190 + 8);
        if (!v191)
          goto LABEL_320;
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  ++*(_DWORD *)v191;
LABEL_320:
  if (v36)
  {
    if (*(_DWORD *)v36 == 1)
      result = WTF::fastFree(v36, v35);
    else
      --*(_DWORD *)v36;
  }
  if (v191)
  {
    v38 = 0;
    v37 = *(_QWORD *)(v191 + 8);
    v36 = (WTF *)v191;
  }
  else
  {
    v36 = 0;
    v37 = 0;
    v38 = 1;
  }
LABEL_98:
  if ((*(_BYTE *)(v37 + 52) & 7) == 1 && (*(_BYTE *)(v37 + 53) & 2) != 0)
  {
    ++*(_DWORD *)(v37 + 16);
    result = WebCore::RenderFragmentedFlow::repaintRectangleInFragments(v37, (const WebCore::LayoutRect *)&v350);
    v283 = *(_DWORD *)(v37 + 16);
    if (!v283)
    {
      __break(0xC471u);
      JUMPOUT(0x1943F6808);
    }
    *(_DWORD *)(v37 + 16) = v283 - 1;
LABEL_483:
    if (!v36)
      goto LABEL_486;
    goto LABEL_484;
  }
  if ((v38 & 1) != 0)
    goto LABEL_483;
  v35 = (void *)*((_QWORD *)v36 + 1);
  if (!v35)
    goto LABEL_484;
  result = WebCore::RenderObject::propagateRepaintToParentWithOutlineAutoIfNeeded(v7, (const WebCore::RenderLayerModelObject *)v35, (const WebCore::LayoutRect *)&v350);
  v40 = *((_QWORD *)v36 + 1);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 88) + 32) + 32) + 20))
  {
    result = *(_QWORD *)(v40 + 144);
    if (result)
    {
      result = WebCore::RenderLayer::requiresFullLayerImageForFilters((WebCore::RenderLayer *)result, (uint64_t)v35, v39);
      v40 = *((_QWORD *)v36 + 1);
      if ((_DWORD)result)
      {
        v287 = *(_QWORD *)(v40 + 144);
        if (v287)
        {
          ++*(_DWORD *)(v287 + 8);
          result = WebCore::RenderLayer::setFilterBackendNeedsRepaintingInRect(v287, (const WebCore::LayoutRect *)&v350, v285, v286);
          v288 = *(_DWORD *)(v287 + 8);
          if (!v288)
          {
            __break(0xC471u);
            JUMPOUT(0x1943F6838);
          }
          *(_DWORD *)(v287 + 8) = v288 - 1;
        }
        else
        {
          result = WebCore::RenderLayer::setFilterBackendNeedsRepaintingInRect(0, (const WebCore::LayoutRect *)&v350, v285, v286);
        }
        goto LABEL_484;
      }
    }
  }
  v41 = *(unsigned __int8 *)(v40 + 46);
  v42 = *(_QWORD *)(v7 + 24);
  if (v41 != 49)
    goto LABEL_110;
  v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) + 40) + 8) + 1944);
  ++*(_DWORD *)(v43 + 16);
  if ((*(_BYTE *)(v43 + 21) & 0x80) == 0)
    goto LABEL_210;
  if ((*(_BYTE *)(v43 + 45) & 0x10) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1943F5D3CLL);
  }
  v44 = *(_QWORD *)(*(_QWORD *)(v43 + 144) + 256);
  if (!v44)
  {
LABEL_210:
    v113 = v350;
    goto LABEL_211;
  }
  if (*(_BYTE *)(v44 + 290))
    goto LABEL_108;
  v178 = *(_QWORD *)(v44 + 8);
  if ((*(_BYTE *)(v178 + 24) & 1) == 0)
    goto LABEL_108;
  v179 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v178 + 32) + 24) + 8)
                                                         + 40)
                                             + 8)
                                 + 1944);
  result = *((_QWORD *)v179 + 50);
  if (!result)
  {
    v262 = v43;
    v263 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    result = WebCore::RenderLayerCompositor::RenderLayerCompositor(v263, v179);
    v264 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v179 + 50);
    *((_QWORD *)v179 + 50) = result;
    if (v264)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v264);
      WTF::fastFree(v265, v266);
      result = *((_QWORD *)v179 + 50);
    }
    v43 = v262;
  }
  if (*(_BYTE *)(result + 198))
    goto LABEL_108;
  v180 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 8)
                                                                                             + 32)
                                                                                 + 24)
                                                                     + 8)
                                                         + 40)
                                             + 8)
                                 + 1944);
  result = *((_QWORD *)v180 + 50);
  if (!result)
  {
    v271 = v43;
    v272 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    result = WebCore::RenderLayerCompositor::RenderLayerCompositor(v272, v180);
    v273 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v180 + 50);
    *((_QWORD *)v180 + 50) = result;
    if (v273)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v273);
      WTF::fastFree(v274, v275);
      result = *((_QWORD *)v180 + 50);
    }
    v43 = v271;
  }
  if (*(_DWORD *)(result + 216) == 2)
  {
LABEL_108:
    v45 = *(_DWORD *)(v43 + 16);
    if (!v45)
    {
LABEL_437:
      __break(0xC471u);
      JUMPOUT(0x1943F5D1CLL);
    }
    *(_DWORD *)(v43 + 16) = v45 - 1;
    v42 = *(_QWORD *)(v7 + 24);
LABEL_110:
    v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) + 40) + 8) + 1944) + 400);
    if (!v46 || !*(_BYTE *)(v46 + 195))
      goto LABEL_484;
    v47 = *(_QWORD *)(*((_QWORD *)v36 + 1) + 144);
    if (v47)
      ++*(_DWORD *)(v47 + 8);
    v48 = *(_QWORD *)(v47 + 256);
    if (!v48)
      goto LABEL_304;
    if (!*(_BYTE *)(v48 + 290))
    {
      v168 = *(_QWORD *)(v48 + 8);
      if ((*(_BYTE *)(v168 + 24) & 1) != 0)
      {
        v169 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v168 + 32) + 24)
                                                                           + 8)
                                                               + 40)
                                                   + 8)
                                       + 1944);
        v170 = *((_QWORD *)v169 + 50);
        if (!v170)
        {
          v258 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
          v170 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v258, v169);
          v259 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v169 + 50);
          *((_QWORD *)v169 + 50) = v170;
          if (v259)
          {
            WebCore::RenderLayerCompositor::~RenderLayerCompositor(v259);
            WTF::fastFree(v260, v261);
            v170 = *((_QWORD *)v169 + 50);
          }
        }
        if (!*(_BYTE *)(v170 + 198))
        {
          v171 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 8) + 32)
                                                                                         + 24)
                                                                             + 8)
                                                                 + 40)
                                                     + 8)
                                         + 1944);
          v172 = *((_QWORD *)v171 + 50);
          if (!v172)
          {
            v267 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
            v172 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v267, v171);
            v268 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v171 + 50);
            *((_QWORD *)v171 + 50) = v172;
            if (v268)
            {
              WebCore::RenderLayerCompositor::~RenderLayerCompositor(v268);
              WTF::fastFree(v269, v270);
              v172 = *((_QWORD *)v171 + 50);
            }
          }
          if (*(_DWORD *)(v172 + 216) != 2)
          {
LABEL_304:
            v354 = v350;
            v173 = v47;
            do
            {
              v174 = v173;
              v173 = *(_QWORD *)(v173 + 40);
            }
            while (v173);
            v175 = WebCore::RenderLayer::offsetFromAncestor(v47, v174, 0);
            v176 = (v354 >> 31) + 0x7FFFFFFF;
            if (!__OFADD__((_DWORD)v354, (_DWORD)v175))
              v176 = v354 + v175;
            v177 = (DWORD1(v354) >> 31) + 0x7FFFFFFF;
            if (!__OFADD__(DWORD1(v354), HIDWORD(v175)))
              v177 = DWORD1(v354) + HIDWORD(v175);
            *(_QWORD *)&v354 = __PAIR64__(v177, v176);
            result = WebCore::RenderView::repaintViewRectangle(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 32)+ 24)+ 8)+ 40)+ 8)+ 1944), (const WebCore::LayoutRect *)&v354);
            goto LABEL_178;
          }
        }
      }
    }
    v49 = *(int32x2_t **)(v47 + 256);
    v50 = v49[1];
    v51 = *(_QWORD *)(*(_QWORD *)&v50 + 24);
    if ((v51 & 1) == 0)
    {
      *(_DWORD *)(*(_QWORD *)&v50 + 12) |= 0x80u;
      if ((v51 & 4) != 0)
      {
        v194 = *(int32x2_t *)(*(_QWORD *)&v50 + 40);
        if (v194)
        {
LABEL_338:
          do
          {
            v195 = *(_DWORD *)(*(_QWORD *)&v194 + 12);
            if ((v195 & 2) != 0)
              break;
            *(_DWORD *)(*(_QWORD *)&v194 + 12) = v195 | 2;
            if ((*(_BYTE *)(*(_QWORD *)&v194 + 24) & 4) == 0)
            {
              while (1)
              {
                v194 = *(int32x2_t *)(*(_QWORD *)&v194 + 40);
                if (!*(_QWORD *)&v194)
                  goto LABEL_117;
                if ((*(_BYTE *)(*(_QWORD *)&v194 + 24) & 0x4A) != 0)
                  goto LABEL_342;
              }
            }
            v194 = *(int32x2_t *)(*(_QWORD *)&v194 + 40);
LABEL_342:
            ;
          }
          while (v194);
        }
      }
      else
      {
        v194 = v50;
        while (1)
        {
          v194 = *(int32x2_t *)(*(_QWORD *)&v194 + 40);
          if (!*(_QWORD *)&v194)
            break;
          if ((*(_BYTE *)(*(_QWORD *)&v194 + 24) & 0x4A) != 0)
            goto LABEL_338;
        }
      }
    }
LABEL_117:
    v52 = *(_QWORD *)(*(_QWORD *)&v50 + 256);
    if (v52 && *(_BYTE *)(v52 + 291))
    {
LABEL_326:
      v56 = v50;
    }
    else
    {
      v53 = *(int32x2_t **)(*(_QWORD *)&v50 + 80);
      if (!v53 || (v56 = v53[1], !*(_QWORD *)&v56))
      {
        if ((*(_QWORD *)(*(_QWORD *)&v50 + 24) & 4) != 0)
        {
          v50 = *(int32x2_t *)(*(_QWORD *)&v50 + 40);
          if (v50)
            goto LABEL_122;
        }
        else
        {
          while (1)
          {
            v50 = *(int32x2_t *)(*(_QWORD *)&v50 + 40);
            if (!*(_QWORD *)&v50)
              break;
            if ((*(_BYTE *)(*(_QWORD *)&v50 + 24) & 0x4A) != 0)
            {
LABEL_122:
              while (1)
              {
                v54 = *(_QWORD *)(*(_QWORD *)&v50 + 256);
                if (v54)
                {
                  if (*(_BYTE *)(v54 + 291))
                    goto LABEL_326;
                }
                v55 = *(int32x2_t **)(*(_QWORD *)&v50 + 80);
                if (v55)
                {
                  v56 = v55[1];
                  if (v56)
                    goto LABEL_132;
                }
                if ((*(_BYTE *)(*(_QWORD *)&v50 + 24) & 4) == 0)
                {
                  while (1)
                  {
                    v50 = *(int32x2_t *)(*(_QWORD *)&v50 + 40);
                    if (!*(_QWORD *)&v50)
                      goto LABEL_136;
                    if ((*(_BYTE *)(*(_QWORD *)&v50 + 24) & 0x4A) != 0)
                      goto LABEL_127;
                  }
                }
                v50 = *(int32x2_t *)(*(_QWORD *)&v50 + 40);
LABEL_127:
                if (!*(_QWORD *)&v50)
                  goto LABEL_136;
              }
            }
          }
        }
LABEL_136:
        v60 = *(_QWORD *)(*(_QWORD *)&v49[1] + 32);
        v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v60 + 24) + 8) + 40) + 8);
        if ((*(_QWORD *)(*(_QWORD *)(v61 + 680) + 680) & 0x800000000000) != 0)
        {
          if (WebCore::RenderObject::isSVGLayerAwareRenderer(*(WebCore::RenderObject **)(*(_QWORD *)&v49[1] + 32))
            && *(_BYTE *)(v60 + 46) != 83)
          {
            v85 = WebCore::LayoutRect::operator WebCore::FloatRect((int *)&v350);
            goto LABEL_167;
          }
          v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v60 + 24) + 8) + 40) + 8);
        }
        v62 = *(_QWORD *)(v61 + 528);
        v63 = 1.0;
        if (v62)
        {
          v64 = *(_QWORD *)(v62 + 8);
          if (v64)
          {
            v65 = *(_QWORD *)(v64 + 24);
            if (v65)
            {
              v66 = *(float **)(v65 + 8);
              if (v66)
              {
                v67 = (*(_DWORD *)v66)++;
                v63 = v66[91];
                if (v67)
                {
                  *(_DWORD *)v66 = v67;
                }
                else
                {
                  WebCore::Page::~Page((WebCore::Page *)v66);
                  WTF::fastFree(v242, v243);
                }
              }
            }
          }
        }
        v68 = (double)(int)v350 * 0.015625;
        if (v68 < 0.0)
          v69 = round((v68 + (double)-(int)v350) * v63) / v63 - (double)-(int)v350;
        else
          v69 = round(v68 * v63) / v63;
        v70 = (double)SDWORD1(v350) * 0.015625;
        if (v70 < 0.0)
          v71 = round((v70 + (double)-DWORD1(v350)) * v63) / v63 - (double)-DWORD1(v350);
        else
          v71 = round(v70 * v63) / v63;
        v72 = v350 & 0x3F;
        if ((int)v350 <= 0)
          v72 = -(-(int)v350 & 0x3F);
        v73 = v72 + DWORD2(v350);
        if (__OFADD__(v72, DWORD2(v350)))
          v73 = (v72 >> 31) + 0x7FFFFFFF;
        v74 = (double)v73 * 0.015625;
        if (v74 < 0.0)
          v75 = round((v74 + (double)-v73) * v63) / v63 - (double)-v73;
        else
          v75 = round(v74 * v63) / v63;
        v76 = (double)v72 * 0.015625;
        if (v76 < 0.0)
          v77 = round((v76 + (double)-v72) * v63) / v63 - (double)-v72;
        else
          v77 = round(v76 * v63) / v63;
        if (SDWORD1(v350) <= 0)
          v78 = -(-DWORD1(v350) & 0x3F);
        else
          v78 = BYTE4(v350) & 0x3F;
        v79 = v78 + HIDWORD(v350);
        if (__OFADD__(v78, HIDWORD(v350)))
          v79 = (v78 >> 31) + 0x7FFFFFFF;
        v80 = (double)v79 * 0.015625;
        if (v80 < 0.0)
          v81 = round((v80 + (double)-v79) * v63) / v63 - (double)-v79;
        else
          v81 = round(v80 * v63) / v63;
        v82 = (double)v78 * 0.015625;
        if (v82 < 0.0)
          v83 = round((v82 + (double)-v78) * v63) / v63 - (double)-v78;
        else
          v83 = round(v82 * v63) / v63;
        v84 = v71;
        v85 = v69;
        v86 = v75;
        v87 = v77;
        v88 = v86 - v87;
        v89 = v81;
        v90 = v83;
        v91 = v89 - v90;
LABEL_167:
        *(_QWORD *)&v354 = __PAIR64__(LODWORD(v84), LODWORD(v85));
        *((_QWORD *)&v354 + 1) = __PAIR64__(LODWORD(v91), LODWORD(v88));
        if (v49[36].i8[1])
        {
          v92 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v49[1]
                                                                                                  + 32)
                                                                                      + 24)
                                                                          + 8)
                                                              + 40)
                                                  + 8)
                                      + 1944)
                          + 248);
          if (*(_BYTE *)(v92 + 1371))
            WebCore::LocalFrameView::addTrackedRepaintRect(v92, (const WebCore::FloatRect *)&v354);
        }
        v93 = v49[9];
        if (*(_QWORD *)&v93 && (*(_WORD *)(*(_QWORD *)&v93 + 177) & 0x20) != 0)
        {
          v351 = v354;
          *(float32x2_t *)&v351 = vadd_f32(*(float32x2_t *)&v354, vsub_f32(vmul_f32(vcvt_f32_s32(v49[24]), (float32x2_t)vdup_n_s32(0xBC800000)), *(float32x2_t *)(*(_QWORD *)&v93 + 40)));
          (*(void (**)(int32x2_t, __int128 *, uint64_t))(**(_QWORD **)&v93 + 328))(v93, &v351, a3);
        }
        v94 = v49[10];
        if (*(_QWORD *)&v94 && (*(_WORD *)(*(_QWORD *)&v94 + 177) & 0x20) != 0)
        {
          v351 = v354;
          *(float32x2_t *)&v351 = vadd_f32(*(float32x2_t *)&v354, vsub_f32(vmul_f32(vcvt_f32_s32(v49[24]), (float32x2_t)vdup_n_s32(0xBC800000)), *(float32x2_t *)(*(_QWORD *)&v94 + 40)));
          (*(void (**)(int32x2_t, __int128 *, uint64_t))(**(_QWORD **)&v94 + 328))(v94, &v351, a3);
        }
        v95 = v49[11];
        if (*(_QWORD *)&v95 && (*(_WORD *)(*(_QWORD *)&v95 + 177) & 0x20) != 0)
        {
          v351 = v354;
          *(float32x2_t *)&v351 = vadd_f32(*(float32x2_t *)&v354, vsub_f32(vmul_f32(vcvt_f32_s32(v49[24]), (float32x2_t)vdup_n_s32(0xBC800000)), *(float32x2_t *)(*(_QWORD *)&v95 + 40)));
          (*(void (**)(int32x2_t, __int128 *, uint64_t))(**(_QWORD **)&v95 + 328))(v95, &v351, a3);
        }
        v96 = v49[14];
        if (*(_QWORD *)&v96 && (*(_WORD *)(*(_QWORD *)&v96 + 177) & 0x20) != 0)
        {
          v351 = v354;
          *(float32x2_t *)&v351 = vadd_f32(*(float32x2_t *)&v354, vsub_f32(vmul_f32(vcvt_f32_s32(v49[24]), (float32x2_t)vdup_n_s32(0xBC800000)), *(float32x2_t *)(*(_QWORD *)&v96 + 40)));
          (*(void (**)(int32x2_t, __int128 *, uint64_t))(**(_QWORD **)&v96 + 328))(v96, &v351, a3);
        }
        result = (uint64_t)v49[21];
        if (result && (*(_WORD *)(result + 177) & 0x20) != 0)
        {
          v351 = v354;
          v235 = *(_QWORD **)(*(_QWORD *)&v49[1] + 264);
          if (v235)
          {
            v236 = (*(uint64_t (**)(_QWORD *))(*v235 + 416))(v235);
            v237 = ((v235[4] & 0xFFFFFFFF00000000) + v236) & 0xFFFFFFFF00000000 | (v235[4]
                                                                                     + v236);
            v238.i32[1] = (((v235[4] & 0xFFFFFFFF00000000) + v236) & 0xFFFFFFFF00000000) >> 32;
            v239 = (int8x8_t)vshl_n_s32((int32x2_t)v237, 6uLL);
            HIDWORD(v237) = 0x1FFFFFF;
            v238.i32[0] = -33554432;
            result = (uint64_t)v49[21];
            v240 = (int8x8_t)vcgt_s32(v238, (int32x2_t)v237);
            HIDWORD(v237) = -33554432;
            v238.i32[0] = 0x1FFFFFF;
            v241 = vmul_f32(vcvt_f32_s32((int32x2_t)vbsl_s8(v240, (int8x8_t)0x7FFFFFFF80000000, vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v237, v238), (int8x8_t)0x800000007FFFFFFFLL, v239))), (float32x2_t)vdup_n_s32(0x3C800000u));
          }
          else
          {
            v241 = 0;
          }
          *(float32x2_t *)&v351 = vadd_f32(*(float32x2_t *)&v351, vadd_f32(vsub_f32(v241, *(float32x2_t *)(result + 40)), vmul_f32(vcvt_f32_s32(v49[24]), (float32x2_t)vdup_n_s32(0xBC800000))));
          result = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)result + 328))(result, &v351, a3);
        }
        if (v47)
        {
LABEL_178:
          v97 = *(_DWORD *)(v47 + 8);
          if (!v97)
          {
            __break(0xC471u);
            JUMPOUT(0x1943F5DA8);
          }
          *(_DWORD *)(v47 + 8) = v97 - 1;
          v98 = *(_DWORD *)v36 - 1;
          if (*(_DWORD *)v36 != 1)
            goto LABEL_485;
          goto LABEL_180;
        }
LABEL_484:
        v98 = *(_DWORD *)v36 - 1;
        if (*(_DWORD *)v36 != 1)
          goto LABEL_485;
LABEL_180:
        result = WTF::fastFree(v36, v35);
        goto LABEL_486;
      }
    }
LABEL_132:
    v57 = *(_QWORD *)(*(_QWORD *)&v56 + 256);
    if (WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v57 + 8) + 32) + 24) + 8) + 40) + 8) + 528)
                                                                                       + 8)
                                                                           + 24)
                                                               + 8))
      && *(_BYTE *)(v57 + 291))
    {
      v58 = *(_QWORD *)(v57 + 8);
      v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v58 + 32) + 24) + 8) + 40) + 8);
      if (*(_BYTE *)(*(_QWORD *)(v59 + 1944) + 442))
        goto LABEL_135;
      if (*(_BYTE *)(v59 + 3443))
        goto LABEL_135;
      if (*(_BYTE *)(v59 + 3444))
      {
        v230 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v59 + 528) + 8) + 24) + 8);
        if (*(_BYTE *)(v230 + 1100) || (*(_BYTE *)(*(_QWORD *)(v230 + 112) + 612) & 8) != 0)
          goto LABEL_135;
      }
      if ((v231 = *(uint64_t **)(v59 + 2304)) != 0 && (v246 = *v231) != 0 && *(_DWORD *)(v246 - 12)
        || (*(_BYTE *)(v58 + 24) & 1) == 0
        && (v232 = *(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v59 + 528) + 8) + 24) + 8),
            (*(_QWORD *)(*((_QWORD *)v232 + 14) + 664) & 0xC0000000) != 0)
        && (v233 = WebCore::Page::scrollingCoordinator(v232),
            v234 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v57 + 8) + 32) + 24) + 8) + 40) + 8) + 1944) + 24) + 8)
                                                                                         + 40)
                                                                             + 8)
                                                                 + 528)
                                                     + 8)
                                         + 632)
                             + 8),
            (*(unsigned int (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v233 + 440))(v233, *(_QWORD *)(v234 + 32), *(_QWORD *)(v234 + 40))))
      {
LABEL_135:
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)&v56 + 256) + 297) = 1;
      }
    }
    goto LABEL_136;
  }
  v357 = v350;
  v181 = *(float64x2_t **)(*(_QWORD *)(v43 + 144) + 200);
  if (!v181)
    goto LABEL_212;
  v182 = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8)
                                                                                + 40)
                                                                    + 8));
  LODWORD(v358) = WebCore::snapRectToDevicePixels((int *)&v357, v182);
  *(_QWORD *)((char *)&v358 + 4) = __PAIR64__(v184, v183);
  HIDWORD(v358) = v185;
  WebCore::TransformationMatrix::mapRect(v181, (const WebCore::FloatRect *)&v358);
  *(_QWORD *)&v351 = __PAIR64__(v187, v186);
  *((_QWORD *)&v351 + 1) = __PAIR64__(v189, v188);
  result = (uint64_t)WebCore::LayoutRect::LayoutRect((int *)&v354, (const WebCore::FloatRect *)&v351);
  v113 = v354;
LABEL_211:
  v357 = v113;
LABEL_212:
  v114 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v43 + 24) + 8) + 40) + 8);
  if (*(_BYTE *)(v114 + 3382) || SDWORD2(v357) < 1 || SHIDWORD(v357) < 1)
    goto LABEL_288;
  v115 = v357;
  v116 = DWORD1(v357);
  v117 = v357 + DWORD2(v357);
  if (__OFADD__((_DWORD)v357, DWORD2(v357)))
    v117 = (v357 >> 31) + 0x7FFFFFFF;
  if (v117 > 2147483583)
  {
    v118 = 0x1FFFFFF;
  }
  else if (v117 < 0)
  {
    v118 = -(-v117 >> 6);
  }
  else
  {
    v118 = (v117 + 63) >> 6;
  }
  v119 = (uint64_t)v357 >> 38;
  v120 = DWORD1(v357) + HIDWORD(v357);
  if (__OFADD__(DWORD1(v357), HIDWORD(v357)))
    v120 = (DWORD1(v357) >> 31) + 0x7FFFFFFF;
  v121 = ((int)v357 >> 6);
  if (v120 > 2147483583)
  {
    v122 = 0x1FFFFFF;
  }
  else if (v120 < 0)
  {
    v122 = -(-v120 >> 6);
  }
  else
  {
    v122 = (v120 + 63) >> 6;
  }
  v123 = v118 - v121;
  v124 = v122 - v119;
  *(_QWORD *)&v358 = v121 | (v119 << 32);
  *((_QWORD *)&v358 + 1) = v123 | (v124 << 32);
  v125 = *(_QWORD *)(v114 + 528);
  if (!v125 || (v126 = *(_QWORD *)(v125 + 8)) == 0)
  {
    v196 = (uint64_t *)(v43 + 248);
    v197 = *(_QWORD *)(v43 + 248);
    v199 = 1.0;
LABEL_349:
    v202 = (double)(int)v357 * 0.015625;
    if (v202 < 0.0)
      v203 = round((v202 + (double)-(int)v357) * v199) / v199 - (double)-(int)v357;
    else
      v203 = round(v202 * v199) / v199;
    v204 = (double)SDWORD1(v357) * 0.015625;
    if (v204 < 0.0)
      v205 = round((v204 + (double)-DWORD1(v357)) * v199) / v199 - (double)-DWORD1(v357);
    else
      v205 = round(v204 * v199) / v199;
    v206 = v357 & 0x3F;
    if ((int)v357 <= 0)
      v206 = -(-(int)v357 & 0x3F);
    v207 = v206 + DWORD2(v357);
    if (__OFADD__(v206, DWORD2(v357)))
      v207 = (v206 >> 31) + 0x7FFFFFFF;
    v208 = (double)v207 * 0.015625;
    if (v208 < 0.0)
      v209 = round((v208 + (double)-v207) * v199) / v199 - (double)-v207;
    else
      v209 = round(v208 * v199) / v199;
    v210 = (double)v206 * 0.015625;
    if (v210 < 0.0)
      v211 = round((v210 + (double)-v206) * v199) / v199 - (double)-v206;
    else
      v211 = round(v210 * v199) / v199;
    if (SDWORD1(v357) <= 0)
      v212 = -(-DWORD1(v357) & 0x3F);
    else
      v212 = BYTE4(v357) & 0x3F;
    v213 = v212 + HIDWORD(v357);
    if (__OFADD__(v212, HIDWORD(v357)))
      v213 = (v212 >> 31) + 0x7FFFFFFF;
    v214 = (double)v213 * 0.015625;
    if (v214 < 0.0)
      v215 = round((v214 + (double)-v213) * v199) / v199 - (double)-v213;
    else
      v215 = round(v214 * v199) / v199;
    v216 = (double)v212 * 0.015625;
    if (v216 < 0.0)
      v217 = round((v216 + (double)-v212) * v199) / v199 - (double)-v212;
    else
      v217 = round(v216 * v199) / v199;
    if (*(_BYTE *)(v197 + 1371))
    {
      v247 = v209;
      v248 = v211;
      v249 = v247 - v248;
      if (v249 > 0.0)
      {
        v250 = v215;
        v251 = v217;
        v252 = v250 - v251;
        if (v252 > 0.0)
        {
          *(float *)&v253 = v205;
          *(float *)&v254 = v203;
          *(_QWORD *)&v354 = __PAIR64__(v253, v254);
          *((_QWORD *)&v354 + 1) = __PAIR64__(LODWORD(v252), LODWORD(v249));
          v255 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v197 + 64) + 832))(v197 + 64, 0, 1);
          v256.i32[0] = -(int)v255;
          v256.i32[1] = (unint64_t)-(uint64_t)(v255 & 0xFFFFFFFF00000000) >> 32;
          *(float32x2_t *)&v354 = vadd_f32(*(float32x2_t *)&v354, vcvt_f32_s32(v256));
          v257 = *(unsigned int *)(v197 + 1068);
          if ((_DWORD)v257 == *(_DWORD *)(v197 + 1064))
          {
            WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatRect&>(v197 + 1056, (unint64_t)&v354);
          }
          else
          {
            *(_OWORD *)(*(_QWORD *)(v197 + 1056) + 16 * v257) = v354;
            ++*(_DWORD *)(v197 + 1068);
          }
        }
      }
    }
    v218 = *(WTF **)(v43 + 280);
    if (v218)
    {
      v354 = v358;
      v355 = 0;
      result = (uint64_t)WebCore::Region::unite(v218, (const WebCore::Region *)&v354);
      v219 = v355;
      v355 = 0;
      if (v219)
      {
        v220 = (WTF *)*((_QWORD *)v219 + 18);
        if ((WTF *)((char *)v219 + 160) != v220 && v220)
        {
          *((_QWORD *)v219 + 18) = 0;
          *((_DWORD *)v219 + 38) = 0;
          WTF::fastFree(v220, v35);
        }
        v221 = *(WTF **)v219;
        if ((WTF *)((char *)v219 + 16) != *(WTF **)v219 && v221)
        {
          *(_QWORD *)v219 = 0;
          *((_DWORD *)v219 + 2) = 0;
          WTF::fastFree(v221, v35);
        }
        result = WTF::fastFree(v219, v35);
      }
      v222 = *(uint64_t **)(v43 + 280);
      v223 = v222[2];
      if (v223)
      {
        if ((*(_DWORD *)(v223 + 12) * *(_DWORD *)(v223 + 156)) >= 0x101)
        {
          v224 = *v222;
          v225 = v222[1];
          result = WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)result = v224;
          *(_QWORD *)(result + 8) = v225;
          *(_QWORD *)(result + 16) = 0;
          v226 = *(WTF **)(v43 + 280);
          *(_QWORD *)(v43 + 280) = result;
          if (v226)
          {
            v227 = *((_QWORD *)v226 + 2);
            *((_QWORD *)v226 + 2) = 0;
            if (v227)
            {
              v228 = *(WTF **)(v227 + 144);
              if ((WTF *)(v227 + 160) != v228 && v228)
              {
                *(_QWORD *)(v227 + 144) = 0;
                *(_DWORD *)(v227 + 152) = 0;
                WTF::fastFree(v228, v35);
              }
              v229 = *(WTF **)v227;
              if (v227 + 16 != *(_QWORD *)v227 && v229)
              {
                *(_QWORD *)v227 = 0;
                *(_DWORD *)(v227 + 8) = 0;
                WTF::fastFree(v229, v35);
              }
              WTF::fastFree((WTF *)v227, v35);
            }
            result = WTF::fastFree(v226, v35);
          }
        }
      }
    }
    else
    {
      result = WebCore::LocalFrameView::repaintContentRectangle(*v196, (const WebCore::IntRect *)&v358);
    }
    goto LABEL_288;
  }
  v127 = *(_QWORD *)(v126 + 120);
  if (!v127 || (v128 = *(_QWORD *)(v127 + 8)) == 0)
  {
    v196 = (uint64_t *)(v43 + 248);
    v197 = *(_QWORD *)(v43 + 248);
    v198 = *(_QWORD *)(v126 + 24);
    v199 = 1.0;
    if (v198)
    {
      v200 = *(float **)(v198 + 8);
      if (v200)
      {
        v201 = (*(_DWORD *)v200)++;
        v199 = v200[91];
        if (v201)
        {
          *(_DWORD *)v200 = v201;
        }
        else
        {
          WebCore::Page::~Page((WebCore::Page *)v200);
          WTF::fastFree(v244, v245);
        }
      }
    }
    goto LABEL_349;
  }
  v129 = *(_QWORD *)(v128 + 64) & 0xFFFFFFFFFFFFLL;
  if ((int)v123 > 0x1FFFFFF || (int)v124 > 0x1FFFFFF)
  {
    if (v129 && (*(_BYTE *)((*(_QWORD *)(v128 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v43 + 248) + 64) + 832))(*(_QWORD *)(v43 + 248) + 64, 0, 1);
      v303 = (_DWORD)v123 << 6;
      if ((int)v123 < -33554432)
        v303 = 0x80000000;
      if ((int)v123 <= 0x1FFFFFF)
        v304 = v303;
      else
        v304 = 0x7FFFFFFFLL;
      LODWORD(v305) = (_DWORD)v124 << 6;
      if ((int)v124 < -33554432)
        LODWORD(v305) = 0x80000000;
      v305 = (int)v124 <= 0x1FFFFFF ? v305 : 0x7FFFFFFFLL;
      v347 = v304;
      v349 = v305;
      if ((int)v304 >= 1 && (int)v305 >= 1)
      {
        v306 = v116 & 0xFFFFFFC0;
        if ((int)result >= -33554432)
          v307 = ((_DWORD)result << 6);
        else
          v307 = 0x80000000;
        if ((int)result > 0x1FFFFFF)
          v307 = 0x7FFFFFFFLL;
        v308 = v115 & 0xFFFFFFC0;
        if (SHIDWORD(result) >= -33554432)
          v309 = HIDWORD(result) << 6;
        else
          v309 = 0x80000000;
        if (SHIDWORD(result) > 0x1FFFFFF)
          v309 = 0x7FFFFFFF;
        if (v309 == 0x80000000)
          v310 = 0x7FFFFFFF;
        else
          v310 = -v309;
        if (v307 == 0x80000000)
          v311 = 0x7FFFFFFF;
        else
          v311 = -(int)v307;
        v312 = v308 + v311;
        if (__OFADD__(v308, v311))
          v312 = (v115 >> 31) + 0x7FFFFFFF;
        v313 = v306 + v310;
        if (__OFADD__(v306, v310))
          v313 = (v116 >> 31) + 0x7FFFFFFF;
        v314 = *(_QWORD *)v129;
        if ((*(_BYTE *)(v129 + 22) & 1) != 0)
        {
          v340 = (float)(*(int (**)(uint64_t))(v314 + 1352))(v129) * 64.0;
          if (v340 >= 2147483650.0)
          {
            v341 = 0x7FFFFFFF;
          }
          else if (v340 > -2147483650.0)
          {
            v341 = (int)v340;
          }
          else
          {
            v341 = 0x80000000;
          }
          v342 = (float)(*(int (**)(uint64_t))(*(_QWORD *)v129 + 1360))(v129) * 64.0;
          if (v342 >= 2147483650.0)
          {
            v343 = 0x7FFFFFFF;
          }
          else if (v342 > -2147483650.0)
          {
            v343 = (int)v342;
          }
          else
          {
            v343 = 0x80000000;
          }
          v344 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v129 + 88) + 40) + 584) << 23;
          v315 = v343 & (v344 >> 31);
          v316 = v341 & (v344 >> 31);
          v314 = *(_QWORD *)v129;
        }
        else
        {
          v315 = 0;
          v316 = 0;
        }
        v317 = (*(uint64_t (**)(uint64_t))(v314 + 920))(v129);
        v319 = v318;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v129 + 992))(v129);
        v320 = (HIDWORD(v35) >> 31) + 0x7FFFFFFF;
        if (!__OFADD__(HIDWORD(v35), v319))
          v320 = HIDWORD(v35) + v319;
        v138 = __OFADD__(v320, v316);
        v321 = v320 + v316;
        v322 = (v320 >> 31) + 0x7FFFFFFF;
        if (!v138)
          v322 = v321;
        v323 = result + v317;
        if (__OFADD__((_DWORD)result, v317))
          v323 = (result >> 31) + 0x7FFFFFFF;
        v138 = __OFADD__(v323, v315);
        v324 = v323 + v315;
        v325 = (v323 >> 31) + 0x7FFFFFFF;
        if (!v138)
          v325 = v324;
        v138 = __OFADD__(v312, v322);
        v326 = v312 + v322;
        if (v138)
          v326 = (v312 >> 31) + 0x7FFFFFFF;
        v138 = __OFADD__(v313, v325);
        v327 = v313 + v325;
        if (v138)
          v327 = (v313 >> 31) + 0x7FFFFFFF;
        v328 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v129 + 24) + 8) + 40) + 8) + 1944);
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v328 + 24) + 8) + 40) + 8) + 3382))
        {
          v329 = *(_QWORD *)(v328 + 248);
          v330 = *(unsigned int *)(v329 + 508);
          if ((_DWORD)v330 && (v330 = *(_QWORD *)(*(_QWORD *)(v329 + 496) + 8 * v330 - 8)) != 0)
          {
            v331 = *(_DWORD *)(v330 + 64);
            LODWORD(v330) = *(_DWORD *)(v330 + 68);
          }
          else
          {
            v331 = 0;
          }
          v138 = __OFADD__(v326, v331);
          v332 = v326 + v331;
          v333 = (v326 >> 31) + 0x7FFFFFFF;
          if (!v138)
            v333 = v332;
          v138 = __OFADD__(v327, (_DWORD)v330);
          v334 = v327 + v330;
          v335 = (v327 >> 31) + 0x7FFFFFFF;
          if (!v138)
            v335 = v334;
          *(_QWORD *)&v354 = __PAIR64__(v335, v333);
          *((_QWORD *)&v354 + 1) = v347 | (v349 << 32);
          goto LABEL_287;
        }
      }
    }
  }
  else if (v129 && (*(_BYTE *)((*(_QWORD *)(v128 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v43 + 248) + 64) + 832))(*(_QWORD *)(v43 + 248) + 64, 0, 1);
    v130 = (int)v123 >= -33554432 ? ((_DWORD)v123 << 6) : 0x80000000;
    LODWORD(v131) = (_DWORD)v124 << 6;
    v131 = (int)v124 >= -33554432 ? v131 : 0x80000000;
    if ((int)v130 >= 1 && (int)v131 >= 1)
    {
      v346 = v131;
      v132 = v116 & 0xFFFFFFC0;
      if ((int)result >= -33554432)
        v133 = ((_DWORD)result << 6);
      else
        v133 = 0x80000000;
      if ((int)result > 0x1FFFFFF)
        v133 = 0x7FFFFFFFLL;
      v134 = v115 & 0xFFFFFFC0;
      if (SHIDWORD(result) >= -33554432)
        v135 = HIDWORD(result) << 6;
      else
        v135 = 0x80000000;
      if (SHIDWORD(result) > 0x1FFFFFF)
        v135 = 0x7FFFFFFF;
      if (v135 == 0x80000000)
        v136 = 0x7FFFFFFF;
      else
        v136 = -v135;
      if (v133 == 0x80000000)
        v137 = 0x7FFFFFFF;
      else
        v137 = -(int)v133;
      v138 = __OFADD__(v134, v137);
      v139 = v134 + v137;
      if (v138)
        v139 = (v115 >> 31) + 0x7FFFFFFF;
      v140 = v132 + v136;
      if (__OFADD__(v132, v136))
        v140 = (v116 >> 31) + 0x7FFFFFFF;
      v348 = v139;
      v141 = *(_QWORD *)v129;
      if ((*(_BYTE *)(v129 + 22) & 1) != 0)
      {
        v296 = (float)(*(int (**)(uint64_t))(v141 + 1352))(v129) * 64.0;
        if (v296 >= 2147483650.0 || v296 <= -2147483650.0)
        {
          if (v296 > -2147483650.0)
            v345 = (int)v296;
          else
            v345 = 0x80000000;
          if (v296 < 2147483650.0)
            v298 = v345;
          else
            v298 = 0x7FFFFFFF;
        }
        else
        {
          v298 = (int)v296;
        }
        v299 = (float)(*(int (**)(uint64_t))(*(_QWORD *)v129 + 1360))(v129) * 64.0;
        if (v299 >= 2147483650.0 || v299 <= -2147483650.0)
        {
          if (v299 >= 2147483650.0)
          {
            v301 = 0x7FFFFFFF;
          }
          else if (v299 > -2147483650.0)
          {
            v301 = (int)v299;
          }
          else
          {
            v301 = 0x80000000;
          }
        }
        else
        {
          v301 = (int)v299;
        }
        v302 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v129 + 88) + 40) + 584) << 23;
        v142 = v301 & (v302 >> 31);
        v143 = v298 & (v302 >> 31);
        v141 = *(_QWORD *)v129;
      }
      else
      {
        v142 = 0;
        v143 = 0;
      }
      v144 = (*(uint64_t (**)(uint64_t))(v141 + 920))(v129);
      v146 = v145;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v129 + 992))(v129);
      v147 = (HIDWORD(v35) >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(HIDWORD(v35), v146))
        v147 = HIDWORD(v35) + v146;
      v138 = __OFADD__(v147, v143);
      v148 = v147 + v143;
      v149 = (v147 >> 31) + 0x7FFFFFFF;
      if (!v138)
        v149 = v148;
      v150 = result + v144;
      if (__OFADD__((_DWORD)result, v144))
        v150 = (result >> 31) + 0x7FFFFFFF;
      v138 = __OFADD__(v150, v142);
      v151 = v150 + v142;
      v152 = (v150 >> 31) + 0x7FFFFFFF;
      if (!v138)
        v152 = v151;
      v138 = __OFADD__(v348, v149);
      v153 = v348 + v149;
      if (v138)
        v153 = (v348 >> 31) + 0x7FFFFFFF;
      v138 = __OFADD__(v140, v152);
      v154 = v140 + v152;
      if (v138)
        v154 = (v140 >> 31) + 0x7FFFFFFF;
      v155 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v129 + 24) + 8) + 40) + 8) + 1944);
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v155 + 24) + 8) + 40) + 8) + 3382))
      {
        v156 = v130 & 0x3FFFFFFFFFLL | ((unint64_t)(v346 >> 6) << 38);
        v157 = *(_QWORD *)(v155 + 248);
        v158 = *(unsigned int *)(v157 + 508);
        if ((_DWORD)v158 && (v158 = *(_QWORD *)(*(_QWORD *)(v157 + 496) + 8 * v158 - 8)) != 0)
        {
          v159 = *(_DWORD *)(v158 + 64);
          LODWORD(v158) = *(_DWORD *)(v158 + 68);
        }
        else
        {
          v159 = 0;
        }
        v138 = __OFADD__(v153, v159);
        v160 = v153 + v159;
        v161 = (v153 >> 31) + 0x7FFFFFFF;
        if (!v138)
          v161 = v160;
        v138 = __OFADD__(v154, (_DWORD)v158);
        v162 = v154 + v158;
        v163 = (v154 >> 31) + 0x7FFFFFFF;
        if (!v138)
          v163 = v162;
        *(_QWORD *)&v354 = __PAIR64__(v163, v161);
        *((_QWORD *)&v354 + 1) = v156;
LABEL_287:
        LOBYTE(v355) = 1;
        LOBYTE(v351) = 0;
        v352 = 0;
        result = WebCore::RenderObject::issueRepaint(v129, &v354, 1, 0, &v351);
      }
    }
  }
LABEL_288:
  v164 = *(_DWORD *)(v43 + 16);
  if (!v164)
    goto LABEL_437;
  *(_DWORD *)(v43 + 16) = v164 - 1;
  v98 = *(_DWORD *)v36 - 1;
  if (*(_DWORD *)v36 == 1)
    goto LABEL_180;
LABEL_485:
  *(_DWORD *)v36 = v98;
LABEL_486:
  if (v11)
  {
    v284 = *(_DWORD *)(v11 + 16);
    if (!v284)
    {
      __break(0xC471u);
      JUMPOUT(0x1943F6220);
    }
    *(_DWORD *)(v11 + 16) = v284 - 1;
  }
  return result;
}

