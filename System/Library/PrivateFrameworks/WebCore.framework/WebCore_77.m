unsigned int *WebCore::InspectorOverlay::drawGridOverlay(WebCore::InspectorOverlay *this, WebCore::GraphicsContext *a2, const WebCore::InspectorOverlayHighlight::GridHighlightOverlay *a3)
{
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  __int128 v18;
  int v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unsigned int *result;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v33;
  float32x2_t v34;
  unsigned __int8 v35;
  float v36;
  float v37;
  float v38;
  unsigned __int8 v40;
  float v41;
  float v42;
  float v43;
  void *v45;
  void *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  uint64_t v67;
  void *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  __int128 v80;
  __int128 v81;
  _BYTE v82[8];
  uint64_t v83;
  int v84;
  _BYTE v85[8];
  uint64_t v86;
  int v87;
  _BYTE v88[40];
  __int128 v89;
  int v90;
  int v91;
  int v92;
  _BYTE v93[8];
  uint64_t v94;
  int v95;
  _BYTE v96[32];
  __int128 v97;
  int v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  (*(void (**)(WebCore::InspectorOverlay *, uint64_t, const WebCore::InspectorOverlayHighlight::GridHighlightOverlay *))(*(_QWORD *)this + 96))(this, 1, a3);
  if (*((float *)this + 47) != 1.0)
  {
    *((_DWORD *)this + 46) |= 8u;
    *((_DWORD *)this + 47) = 1065353216;
  }
  (*(void (**)(WebCore::InspectorOverlay *, char *))(*(_QWORD *)this + 88))(this, (char *)this + 8);
  WebCore::GraphicsContext::setStrokeColor(this, a2);
  v95 = 0;
  v5 = *((unsigned int *)a2 + 5);
  if ((_DWORD)v5)
  {
    v6 = (__int128 *)*((_QWORD *)a2 + 1);
    v7 = 20 * v5;
    do
    {
      v8 = *v6;
      *(_DWORD *)&v88[16] = *((_DWORD *)v6 + 4);
      *(_OWORD *)v88 = v8;
      WebCore::Path::moveTo((WebCore::Path *)v93, (const WebCore::FloatPoint *)v88);
      WebCore::Path::addLineTo((uint64_t)v93, (const WebCore::FloatPoint *)&v88[8]);
      v6 = (__int128 *)((char *)v6 + 20);
      v7 -= 20;
    }
    while (v7);
  }
  (*(void (**)(WebCore::InspectorOverlay *, _BYTE *))(*(_QWORD *)this + 184))(this, v93);
  v9 = *((unsigned int *)a2 + 9);
  if ((_DWORD)v9)
  {
    v10 = (__int128 *)*((_QWORD *)a2 + 3);
    v11 = 32 * v9;
    do
    {
      v12 = *v10;
      v13 = v10[1];
      v10 += 2;
      *(_OWORD *)v88 = v12;
      *(_OWORD *)&v88[16] = v13;
      WebCore::drawLayoutHatching((float *)this, (float *)v88, 0);
      v11 -= 32;
    }
    while (v11);
  }
  if (*((float *)this + 47) != 3.0)
  {
    *((_DWORD *)this + 46) |= 8u;
    *((_DWORD *)this + 47) = 1077936128;
  }
  (*(void (**)(WebCore::InspectorOverlay *, char *))(*(_QWORD *)this + 88))(this, (char *)this + 8);
  v14 = *((_DWORD *)a2 + 13);
  if (v14)
  {
    v15 = *((_QWORD *)a2 + 5);
    v16 = v15 + 40 * v14;
    do
    {
      v17 = *(WTF::StringImpl **)v15;
      if (*(_QWORD *)v15)
        *(_DWORD *)v17 += 2;
      v79 = v17;
      v18 = *(_OWORD *)(v15 + 24);
      v80 = *(_OWORD *)(v15 + 8);
      v81 = v18;
      v92 = 0;
      WebCore::Path::moveTo((WebCore::Path *)v88, (const WebCore::FloatPoint *)&v80);
      WebCore::Path::addLineTo((uint64_t)v88, (const WebCore::FloatPoint *)((char *)&v80 + 8));
      WebCore::Path::addLineTo((uint64_t)v88, (const WebCore::FloatPoint *)&v81);
      WebCore::Path::addLineTo((uint64_t)v88, (const WebCore::FloatPoint *)((char *)&v81 + 8));
      v19 = v92;
      if (v92 == 2)
      {
        if (!*(_QWORD *)&v88[8])
          goto LABEL_32;
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)&v88[8] + 200))(*(_QWORD *)&v88[8]) & 1) != 0)
          goto LABEL_33;
        v19 = v92;
      }
      else if (!v92)
      {
        goto LABEL_33;
      }
      if (v19 == 2)
      {
        if (!*(_QWORD *)&v88[8])
          goto LABEL_32;
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)&v88[8] + 208))(*(_QWORD *)&v88[8]) & 1) != 0)
          goto LABEL_33;
        if (v92 != 1)
          goto LABEL_32;
        v20 = v91;
      }
      else
      {
        if (v19 != 1)
          goto LABEL_32;
        v20 = v91;
        if (v91 == 6 || v91 == 15)
          goto LABEL_33;
      }
      if (v20 != 5)
      {
LABEL_32:
        v21 = WebCore::Path::ensureImpl((WebCore::Path *)v88);
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 120))(v21);
        goto LABEL_33;
      }
      *(_OWORD *)v96 = *(_OWORD *)&v88[8];
      *(_QWORD *)&v96[13] = *(_QWORD *)&v88[21];
      *(_OWORD *)&v88[24] = *(_OWORD *)&v96[16];
      v89 = v97;
      v90 = v98;
      *(_OWORD *)&v88[8] = *(_OWORD *)v96;
      v91 = 6;
LABEL_33:
      (*(void (**)(WebCore::InspectorOverlay *, _BYTE *))(*(_QWORD *)this + 184))(this, v88);
      if (v92 != -1)
        ((void (*)(_BYTE *, _BYTE *))off_1E33EE980[v92])(v96, &v88[8]);
      v23 = v79;
      v79 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v22);
        else
          *(_DWORD *)v23 -= 2;
      }
      v15 += 40;
    }
    while (v15 != v16);
  }
  if (*((float *)this + 47) != 1.0)
  {
    *((_DWORD *)this + 46) |= 8u;
    *((_DWORD *)this + 47) = 1065353216;
  }
  result = (unsigned int *)(*(uint64_t (**)(WebCore::InspectorOverlay *, char *))(*(_QWORD *)this + 88))(this, (char *)this + 8);
  v25 = *((_DWORD *)a2 + 13);
  if (v25)
  {
    v26 = *((_QWORD *)a2 + 5);
    v27 = v26 + 40 * v25;
    __asm { FMOV            V8.2S, #0.25 }
    do
    {
      v33 = *(WTF::StringImpl **)v26;
      if (*(_QWORD *)v26)
        *(_DWORD *)v33 += 2;
      v76 = *(float32x2_t *)(v26 + 16);
      v77 = *(float32x2_t *)(v26 + 8);
      v74 = *(float32x2_t *)(v26 + 32);
      v75 = *(float32x2_t *)(v26 + 24);
      v34 = vmul_f32(vadd_f32(vadd_f32(vadd_f32(v77, v76), v75), v74), _D8);
      v78 = 0x11040000FFFFFFE6;
      WebCore::InspectorOverlayLabel::InspectorOverlayLabel((uint64_t)v88, v33, &v78, 0, v34.f32[0], v34.f32[1]);
      v35 = vcgt_f32(v77, v76).u8[0];
      if ((vcgt_f32(v75, v74).u8[0] & 1) != 0)
        v36 = v74.f32[0];
      else
        v36 = v75.f32[0];
      if ((v35 & 1) != 0)
        v37 = v76.f32[0];
      else
        v37 = v77.f32[0];
      if (v36 >= v37)
        v36 = v37;
      v38 = fabsf(v36);
      if (v38 == INFINITY || v38 > 2147500000.0)
        v36 = (float)((SLODWORD(v36) >> 31) ^ 0x7FFFFFFF);
      v40 = vcgt_f32(v74, v75).u8[0];
      if ((vcgt_f32(v76, v77).u8[0] & 1) != 0)
        v41 = v76.f32[0];
      else
        v41 = v77.f32[0];
      if ((v40 & 1) != 0)
        v42 = v74.f32[0];
      else
        v42 = v75.f32[0];
      if (v41 < v42)
        v41 = v42;
      v43 = fabsf(v41);
      if (v43 == INFINITY || v43 > 2147500000.0)
        v41 = (float)((SLODWORD(v41) >> 31) ^ 0x7FFFFFFF);
      WebCore::InspectorOverlayLabel::draw((WebCore::InspectorOverlayLabel *)v85, (WebCore::GraphicsContext *)v88, v41 - v36, this);
      if (v87 != -1)
        ((void (*)(_BYTE *, uint64_t *))off_1E33EE980[v87])(v96, &v86);
      v87 = -1;
      if ((*(_QWORD *)&v88[24] & 0x8000000000000) != 0)
      {
        v47 = (unsigned int *)(*(_QWORD *)&v88[24] & 0xFFFFFFFFFFFFLL);
        do
        {
          v48 = __ldaxr(v47);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v47));
        if (!v49)
        {
          atomic_store(1u, v47);
          WTF::fastFree((WTF *)v47, v45);
        }
      }
      result = (unsigned int *)WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v88, v45);
      if ((v78 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(v78 & 0xFFFFFFFFFFFFLL);
        do
        {
          v50 = __ldaxr(result);
          v51 = v50 - 1;
        }
        while (__stlxr(v51, result));
        if (!v51)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, v46);
        }
      }
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          result = (unsigned int *)WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v46);
        else
          *(_DWORD *)v33 -= 2;
      }
      v26 += 40;
    }
    while (v26 != v27);
  }
  v52 = *((_DWORD *)a2 + 17);
  if (v52)
  {
    v53 = (uint64_t *)*((_QWORD *)a2 + 7);
    v54 = &v53[5 * v52];
    do
    {
      v55 = *((unsigned int *)v53 + 3);
      *(_QWORD *)v88 = 0;
      *(_DWORD *)&v88[8] = 0;
      *(_DWORD *)&v88[12] = v55;
      if ((_DWORD)v55)
      {
        if (v55 >> 27)
        {
          __break(0xC471u);
          return result;
        }
        v56 = WTF::fastMalloc((WTF *)(32 * v55));
        *(_DWORD *)&v88[8] = v55;
        *(_QWORD *)v88 = v56;
        v57 = *((unsigned int *)v53 + 3);
        if ((_DWORD)v57)
        {
          v58 = *v53;
          v59 = *v53 + 32 * v57;
          do
          {
            v60 = *(_DWORD **)v58;
            if (*(_QWORD *)v58)
              *v60 += 2;
            *(_QWORD *)v56 = v60;
            v61 = *(_QWORD *)(v58 + 8);
            *(_QWORD *)(v56 + 8) = v61;
            if ((v61 & 0x8000000000000) != 0)
            {
              v63 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFLL);
              do
                v64 = __ldaxr(v63);
              while (__stlxr(v64 + 1, v63));
            }
            *(_BYTE *)(v56 + 16) = *(_BYTE *)(v58 + 16);
            v62 = *(_QWORD *)(v58 + 24);
            *(_QWORD *)(v56 + 24) = v62;
            if ((v62 & 0x8000000000000) != 0)
            {
              v65 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFLL);
              do
                v66 = __ldaxr(v65);
              while (__stlxr(v66 + 1, v65));
            }
            v56 += 32;
            v58 += 32;
          }
          while (v58 != v59);
        }
      }
      v67 = v53[3];
      *(_QWORD *)&v88[16] = v53[2];
      *(_QWORD *)&v88[24] = v67;
      if ((v67 & 0x8000000000000) != 0)
      {
        v69 = (unsigned int *)(v67 & 0xFFFFFFFFFFFFLL);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 + 1, v69));
      }
      *(_WORD *)&v88[32] = *((_WORD *)v53 + 16);
      WebCore::InspectorOverlayLabel::draw((WebCore::InspectorOverlayLabel *)v82, (WebCore::GraphicsContext *)v88, 0.0, this);
      if (v84 != -1)
        ((void (*)(_BYTE *, uint64_t *))off_1E33EE980[v84])(v96, &v83);
      v84 = -1;
      if ((*(_QWORD *)&v88[24] & 0x8000000000000) != 0)
      {
        v71 = (unsigned int *)(*(_QWORD *)&v88[24] & 0xFFFFFFFFFFFFLL);
        do
        {
          v72 = __ldaxr(v71);
          v73 = v72 - 1;
        }
        while (__stlxr(v73, v71));
        if (!v73)
        {
          atomic_store(1u, v71);
          WTF::fastFree((WTF *)v71, v68);
        }
      }
      result = (unsigned int *)WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v88, v68);
      v53 += 5;
    }
    while (v53 != v54);
  }
  if (v95 != -1)
    ((void (*)(_BYTE *, uint64_t *))off_1E33EE980[v95])(v88, &v94);
  return (unsigned int *)(*(uint64_t (**)(WebCore::InspectorOverlay *, uint64_t))(*(_QWORD *)this + 104))(this, 1);
}

void WebCore::InspectorOverlay::buildFlexOverlay(_BYTE *a1, WebCore::InspectorOverlay *this, uint64_t a3)
{
  char *v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WTF *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int8x16_t *v33;
  int8x16_t *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  int i;
  unsigned int v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  char v52;
  int v53;
  int v54;
  _BOOL4 v55;
  int v56;
  uint64_t v57;
  WebCore::RenderBox *v58;
  unint64_t v59;
  int v60;
  int v61;
  WebCore::ScrollView *v62;
  unsigned int v63;
  unsigned int v64;
  float v65;
  unsigned int v66;
  unsigned int v67;
  WebCore::ScrollView *v68;
  unsigned int v69;
  unsigned int v70;
  float v71;
  unsigned int v72;
  unsigned int v73;
  WebCore::ScrollView *v74;
  unsigned int v75;
  unsigned int v76;
  float v77;
  unsigned int v78;
  unsigned int v79;
  WebCore::ScrollView *v80;
  unsigned int v81;
  unsigned int v82;
  float v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  WebCore::RenderBox *v92;
  unsigned int v93;
  int v94;
  int v95;
  int v96;
  _BOOL4 v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  int v103;
  int v104;
  int v105;
  _BOOL4 v106;
  int v107;
  int v108;
  _BOOL4 v109;
  int v110;
  float v111;
  float v112;
  int v113;
  int8x16_t *v114;
  int v116;
  _QWORD *v117;
  uint64_t v118;
  WTF *v119;
  unsigned int v120;
  char v121;
  int8x16_t *v122;
  uint64_t v123;
  WTF *v124;
  char *v125;
  int8x16_t *v126;
  WTF *v127;
  BOOL v128;
  int v129;
  BOOL v130;
  unsigned int v131;
  int v132;
  char v133;
  unsigned int v134;
  float v135;
  float v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  BOOL v143;
  int v144;
  unsigned int v146;
  int v147;
  unsigned int v148;
  int v149;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  float v159;
  float v160;
  WebCore::ScrollView **v161;
  uint64_t v162;
  WebCore::ScrollView *v163;
  void *v164;
  WTF::StringImpl *v165;
  WTF *v166;
  WTF *v167;
  unsigned int v168;
  unsigned int v169;
  float v170;
  unsigned int v171;
  WebCore::ScrollView *v172;
  void *v173;
  int8x16_t *v174;
  WTF *v175;
  WTF *v176;
  float v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  WebCore::ScrollView *v182;
  void *v183;
  int8x16_t *v184;
  WTF *v185;
  WTF *v186;
  char v187;
  unsigned int v188;
  unsigned int v189;
  float v190;
  unsigned int v191;
  unsigned int v192;
  WebCore::ScrollView *v193;
  void *v194;
  int8x16_t *v195;
  WTF *v196;
  WTF *v197;
  int v198;
  unsigned int v199;
  unsigned int v200;
  void *v201;
  float v202;
  unsigned int v203;
  __int128 *v204;
  _OWORD *v205;
  __int128 v206;
  __int128 v207;
  float v208;
  float v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unsigned int v214;
  unint64_t v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  int v221;
  BOOL v222;
  WTF::StringImpl *v223;
  unint64_t v224;
  float32x2_t v228;
  void *v229;
  unsigned int v230;
  int8x16_t **p_j;
  unsigned int v232;
  uint64_t v233;
  uint64_t v234;
  int8x16_t *v235;
  int8x16_t *v236;
  int8x16_t **v237;
  int8x16_t *v238;
  _WORD *v239;
  uint64_t v240;
  uint64_t v241;
  int8x16_t *v242;
  uint64_t v243;
  _QWORD *v244;
  WTF::StringImpl *v245;
  WTF::StringImpl *v246;
  int v247;
  int v248;
  int v249;
  uint64_t v250;
  int v251;
  float v252;
  float v253;
  float v254;
  int v255;
  int v256;
  int v257;
  float v258;
  float v259;
  float v260;
  uint64_t v261;
  WTF *v262;
  __int128 v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  WTF *v269;
  int v270;
  uint64_t v271;
  float v272;
  uint64_t v273;
  _DWORD *v274;
  unsigned int v275;
  _BOOL4 v276;
  BOOL v277;
  int v278;
  int v279;
  unsigned int v280;
  _BOOL4 v281;
  BOOL v282;
  unsigned int v283;
  int v284;
  unsigned int v285;
  _BOOL4 v286;
  BOOL v287;
  int v288;
  float v289;
  float v290;
  float v291;
  float v292;
  int v293;
  float v294;
  int v295;
  float v296;
  float v297;
  float v298;
  float v299;
  float v300;
  float v301;
  float v302;
  void *v303;
  int v304;
  float v305;
  float v306;
  WTF *v307;
  __int128 *v308;
  int v309;
  unsigned int v310;
  int v311;
  unsigned int v312;
  unsigned int *v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int *v316;
  unsigned int v317;
  unsigned int v318;
  void *v319;
  WTF *v320;
  WTF *v321;
  unsigned int *v322;
  unsigned int v323;
  char v324;
  int v325;
  int v326;
  uint64_t v327;
  int v328;
  char v329;
  int v330;
  char v331;
  float v332;
  float v333;
  float v334;
  float v335;
  float v336;
  int v337;
  uint64_t *v338;
  unint64_t v339;
  WTF *v340;
  float v341;
  int v342;
  int v343;
  uint64_t v344;
  WebCore::RenderBox *v345;
  WTF *v346;
  float v347;
  unsigned int v348;
  float v349;
  uint64_t v350;
  int v351;
  char v352;
  int v353;
  int v354;
  int v355;
  char v356;
  int v357;
  int v358;
  int v359;
  int v360;
  uint64_t v361;
  WTF::StringImpl *v362;
  WTF::StringImpl *v363;
  unsigned int v364;
  char v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  WTF **v370;
  WTF *v371[3];
  __int16 v372;
  WTF *v373;
  uint64_t v374;
  WTF *v375;
  uint64_t v376;
  WTF *v377;
  uint64_t v378;
  WTF::StringImpl *v379[4];
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  uint64_t v386;
  WebCore::ScrollView **v387;
  uint64_t v388;
  WebCore::ScrollView *v389;
  int8x16_t *v390;
  int8x16_t *v391;
  int8x16_t *v392;
  int8x16_t *j;
  __int128 v394;
  __int128 v395;
  char v396;
  char v397;
  WTF *v398;
  WTF *v399;
  uint64_t v400;
  char v401;
  __int16 v402;
  int v403;
  int v404;
  uint64_t v405;

  v405 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)a3 || (v22 = *(_QWORD *)(*(_QWORD *)a3 + 8)) == 0)
  {
    v5 = (char *)*((_QWORD *)this + 36);
    v6 = *((_DWORD *)this + 75);
    v7 = (unint64_t)&v5[24 * v6];
    v8 = 0;
    if (v6)
    {
      v9 = (unint64_t)&v5[24 * v6];
      v10 = v9;
      do
      {
        if (*(_QWORD *)v5 && *(_QWORD *)(*(_QWORD *)v5 + 8))
        {
          v11 = (char *)v10;
        }
        else
        {
          v11 = v5;
          if (v10 != *((_QWORD *)this + 36) + 24 * *((unsigned int *)this + 75))
          {
            if ((char *)v9 == v5)
            {
              v11 = (char *)v10;
            }
            else
            {
              WTF::VectorMover<false,WebCore::InspectorOverlay::Flex>::moveOverlapping(v9, v5, v10);
              v11 = &v5[v10 - v9];
            }
          }
          v12 = *((_QWORD *)v5 + 1);
          if ((v12 & 0x8000000000000) != 0)
          {
            v18 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              atomic_store(1u, v18);
              WTF::fastFree((WTF *)v18, this);
            }
          }
          v13 = *(_QWORD *)v5;
          *(_QWORD *)v5 = 0;
          if (v13)
          {
            do
            {
              v14 = __ldaxr((unsigned int *)v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, (unsigned int *)v13));
            if (!v15)
            {
              atomic_store(1u, (unsigned int *)v13);
              v16 = *(unsigned int *)(v13 + 28);
              if ((_DWORD)v16)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v13 + 16), (WTF::StringImpl *)(*(_QWORD *)(v13 + 16) + 32 * v16));
              v17 = *(WTF **)(v13 + 16);
              if (v17)
              {
                *(_QWORD *)(v13 + 16) = 0;
                *(_DWORD *)(v13 + 24) = 0;
                WTF::fastFree(v17, this);
              }
              WTF::fastFree((WTF *)v13, this);
            }
          }
          v9 = (unint64_t)(v5 + 24);
          ++v8;
          v10 = (unint64_t)v11;
        }
        v5 += 24;
      }
      while ((unint64_t)v5 < v7);
      v5 = (char *)*((_QWORD *)this + 36);
      v6 = *((_DWORD *)this + 75);
      v7 = (unint64_t)v11;
    }
    else
    {
      v9 = *((_QWORD *)this + 36);
    }
    v21 = &v5[24 * v6];
    if ((char *)v9 != v21)
    {
      WTF::VectorMover<false,WebCore::InspectorOverlay::Flex>::moveOverlapping(v9, v21, v7);
      v6 = *((_DWORD *)this + 75);
    }
    *((_DWORD *)this + 75) = v6 - v8;
    goto LABEL_31;
  }
  v23 = *(_QWORD *)(v22 + 64);
  v24 = v23 & 0xFFFFFFFFFFFFLL;
  if ((v23 & 0xFFFFFFFFFFFFLL) == 0 || (*(char *)((v23 & 0xFFFFFFFFFFFFLL) + 0x2D) & 0x80000000) == 0)
  {
    WebCore::InspectorOverlay::removeFlexOverlayForNode(this, *(WebCore::Node **)(*(_QWORD *)a3 + 8));
LABEL_31:
    *a1 = 0;
    a1[136] = 0;
    return;
  }
  v26 = *(_QWORD *)(*(_QWORD *)this + 80);
  v27 = *(_QWORD *)(v26 + 112);
  if (!v27)
  {
    v28 = *(WTF::StringImpl **)(v26 + 32);
    v29 = *(_QWORD *)(v26 + 8);
    v30 = *(_QWORD *)(v26 + 80);
    v379[0] = *(WTF::StringImpl **)(*(_QWORD *)this + 80);
    *(_OWORD *)&v379[1] = *(_OWORD *)(v26 + 16);
    v379[3] = v28;
    *(_QWORD *)&v380 = v29;
    *((_QWORD *)&v380 + 1) = v30;
    v31 = *(_QWORD *)(v26 + 40);
    v32 = WTF::fastMalloc((WTF *)0x1C0);
    v33 = (int8x16_t *)WebCore::InspectorDOMAgent::InspectorDOMAgent(v32, v379, v31);
    *(_QWORD *)(v26 + 112) = v33;
    j = v33;
    Inspector::AgentRegistry::append();
    v34 = j;
    j = 0;
    if (v34)
      (*(void (**)(int8x16_t *))(v34->i64[0] + 8))(v34);
    v27 = *(_QWORD *)(v26 + 112);
  }
  ++*(_DWORD *)(v27 + 248);
  v35 = *(_QWORD *)(v24 + 8);
  v345 = (WebCore::RenderBox *)v24;
  if (v35 && *(_QWORD *)(v35 + 8) && (v36 = *(_QWORD *)(v27 + 240)) != 0)
  {
    v37 = *(_DWORD *)(v36 - 8);
    v38 = (~(v35 << 32) + v35) ^ ((unint64_t)(~(v35 << 32) + v35) >> 22);
    v39 = 9 * ((v38 + ~(v38 << 13)) ^ ((v38 + ~(v38 << 13)) >> 8));
    v40 = (v39 ^ (v39 >> 15)) + ~((v39 ^ (v39 >> 15)) << 27);
    v41 = v37 & ((v40 >> 31) ^ v40);
    for (i = 1; ; ++i)
    {
      v43 = v41;
      v44 = *(_QWORD *)(v36 + 24 * v41);
      if (v44 != -1)
      {
        if (!v44)
          goto LABEL_53;
        if (v44 == v35)
          break;
      }
      v41 = (v43 + i) & v37;
    }
    v46 = v36 + 24 * v43;
    v344 = *(unsigned int *)(v46 + 20);
    if (!(_DWORD)v344)
    {
LABEL_53:
      LODWORD(v344) = 0;
      v45 = 0;
      goto LABEL_54;
    }
    if (v344 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x195DD4BD8);
    }
    v47 = v46 + 8;
    v45 = (void *)WTF::fastMalloc((WTF *)(8 * v344));
    memcpy(v45, *(const void **)v47, 8 * *(unsigned int *)(v47 + 12));
  }
  else
  {
    LODWORD(v344) = 0;
    v45 = 0;
  }
LABEL_54:
  v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 40) + 8) + 528);
  if (!v48)
    goto LABEL_397;
  v49 = *(_QWORD *)(v48 + 8);
  if (!v49)
    goto LABEL_397;
  v389 = *(WebCore::ScrollView **)(v49 + 288);
  LOBYTE(v379[0]) = 0;
  LOBYTE(v379[2]) = 0;
  v50 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v22 + 264))(v22, v379);
  if (LOBYTE(v379[2]))
  {
    v51 = v379[1];
    v379[1] = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 != 2)
      {
        *(_DWORD *)v51 -= 2;
        goto LABEL_60;
      }
      WTF::StringImpl::destroy(v51, this);
      if (v50)
        goto LABEL_61;
LABEL_397:
      *a1 = 0;
      a1[136] = 0;
      goto LABEL_398;
    }
  }
LABEL_60:
  if (!v50)
    goto LABEL_397;
LABEL_61:
  v327 = (uint64_t)a1;
  v52 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 8) + 32) + 16) + 20);
  v338 = (uint64_t *)v45;
  switch((unsigned __int16)*(_DWORD *)(v50 + 44) >> 13)
  {
    case 1:
      v54 = (*(unsigned __int8 *)(v50 + 43) >> 2) & 1;
      v53 = 1;
LABEL_409:
      v324 = 1;
      break;
    case 2:
      v53 = 0;
      v54 = (*(unsigned __int8 *)(v50 + 43) >> 2) & 1;
LABEL_411:
      v324 = 2;
      break;
    case 3:
    case 5:
      v53 = 1;
      goto LABEL_63;
    case 4:
      v53 = 0;
      v54 = (*(unsigned __int8 *)(v50 + 43) >> 2) & 1;
      v324 = 2;
      break;
    default:
      v53 = 0;
LABEL_63:
      v54 = (*(unsigned __int8 *)(v50 + 43) >> 2) & 1;
      v324 = 2;
      switch((unsigned __int16)*(_DWORD *)(v50 + 44) >> 13)
      {
        case 1:
          goto LABEL_409;
        case 2:
          goto LABEL_411;
        case 3:
        case 5:
          v324 = 3;
          break;
        case 4:
          goto LABEL_65;
        default:
          v324 = 0;
          break;
      }
      break;
  }
LABEL_65:
  v55 = (v324 & 2) == 0;
  v387 = &v389;
  v388 = v24;
  if ((v52 & 2) != 0)
    v56 = v53;
  else
    v56 = v54;
  if ((v52 & 2) != 0)
    v53 = v54;
  v359 = v53;
  v386 = 0;
  v384 = 0u;
  v385 = 0u;
  v382 = 0u;
  v383 = 0u;
  v380 = 0u;
  v381 = 0u;
  memset(v379, 0, sizeof(v379));
  v57 = *(_QWORD *)(a3 + 8);
  if (v57)
  {
    v379[0] = *(WTF::StringImpl **)(a3 + 8);
    if ((v57 & 0x8000000000000) != 0)
    {
      v322 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFLL);
      do
        v323 = __ldaxr(v322);
      while (__stlxr(v323 + 1, v322));
    }
  }
  v58 = v345;
  v59 = WebCore::RenderBox::contentBoxRect(v345);
  *(float *)&j = (float)(int)v59 * 0.015625;
  *((float *)&j + 1) = (float)SHIDWORD(v59) * 0.015625;
  *(float *)&v394 = *(float *)&j + (float)((float)v60 * 0.015625);
  *((float *)&v394 + 1) = *((float *)&j + 1);
  *((float *)&v394 + 2) = *(float *)&v394;
  *((float *)&v394 + 3) = *((float *)&j + 1) + (float)((float)v61 * 0.015625);
  *(float *)&v395 = *(float *)&j;
  *((float *)&v395 + 1) = *((float *)&v394 + 3);
  WebCore::RenderObject::localToContainerQuad((uint64_t)v345, (float *)&j, 0, 2u, &v369);
  v62 = v389;
  WebCore::ScrollView::contentsToView(v389, (const WebCore::FloatPoint *)&v369);
  j = (int8x16_t *)__PAIR64__(v64, v63);
  v65 = WebCore::Widget::convertToRootView(v62, (const WebCore::FloatPoint *)&j);
  v67 = v66;
  v68 = v389;
  WebCore::ScrollView::contentsToView(v389, (const WebCore::FloatPoint *)((char *)&v369 + 8));
  j = (int8x16_t *)__PAIR64__(v70, v69);
  v71 = WebCore::Widget::convertToRootView(v68, (const WebCore::FloatPoint *)&j);
  v73 = v72;
  v74 = v389;
  WebCore::ScrollView::contentsToView(v389, (const WebCore::FloatPoint *)&v370);
  j = (int8x16_t *)__PAIR64__(v76, v75);
  v77 = WebCore::Widget::convertToRootView(v74, (const WebCore::FloatPoint *)&j);
  v79 = v78;
  v80 = v389;
  WebCore::ScrollView::contentsToView(v389, (const WebCore::FloatPoint *)v371);
  j = (int8x16_t *)__PAIR64__(v82, v81);
  v83 = WebCore::Widget::convertToRootView(v80, (const WebCore::FloatPoint *)&j);
  v379[1] = (WTF::StringImpl *)__PAIR64__(v67, LODWORD(v65));
  v379[2] = (WTF::StringImpl *)__PAIR64__(v73, LODWORD(v71));
  v379[3] = (WTF::StringImpl *)__PAIR64__(v79, LODWORD(v77));
  *(_QWORD *)&v380 = __PAIR64__(v84, LODWORD(v83));
  v355 = WebCore::RenderFlexibleBox::computeGap(v345, (const WebCore::RenderBox *)1);
  v353 = WebCore::RenderFlexibleBox::computeGap(v345, 0);
  WebCore::RenderBox::absoluteContentBox(v345);
  v86 = v85;
  v87 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v58 + 944))(v58);
  v88 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v58 + 1016))(v58);
  v89 = v87 + v88;
  if (__OFADD__(v87, v88))
    v89 = (v87 >> 31) + 0x7FFFFFFF;
  v90 = v55 ^ ((v52 & 2) >> 1);
  v91 = v89 / 64;
  v92 = v345;
  v93 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v345 + 928))(v345);
  v94 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v92 + 1000))(v92);
  v95 = v93 + v94;
  if (__OFADD__(v93, v94))
    v95 = (v93 >> 31) + 0x7FFFFFFF;
  v96 = v52 & 0xC;
  v97 = (v52 & 1) == 0;
  v98 = v91 << 6;
  v99 = (v95 + (v95 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
  v100 = (_DWORD)v86 << 6;
  if ((int)v86 < -33554432)
    v100 = 0x80000000;
  if ((int)v86 <= 0x1FFFFFF)
    v101 = v100;
  else
    v101 = 0x7FFFFFFF;
  v102 = HIDWORD(v86) << 6;
  if (SHIDWORD(v86) < -33554432)
    v102 = 0x80000000;
  if (SHIDWORD(v86) <= 0x1FFFFFF)
    v103 = v102;
  else
    v103 = 0x7FFFFFFF;
  v104 = v97 ^ v56;
  v343 = v104;
  v358 = v101;
  v357 = v103;
  if ((v90 & 1) != 0)
  {
    v105 = v98 + v101;
    v106 = __OFADD__(v98, v101);
    if ((v104 & 1) != 0)
    {
      v107 = v91 << 6;
      v108 = v359;
      if (v106)
      {
        v105 = (v98 >> 31) + 0x7FFFFFFF;
        v107 = v91 << 6;
      }
    }
    else
    {
      v107 = v98 + v101;
      v105 = v91 << 6;
      v108 = v359;
      if (v106)
      {
        v107 = (v98 >> 31) + 0x7FFFFFFF;
        v105 = v91 << 6;
      }
    }
  }
  else
  {
    v105 = v99 + v103;
    v109 = __OFADD__(v99, v103);
    if ((v104 & 1) != 0)
    {
      v107 = v99;
      v108 = v359;
      if (v109)
      {
        v105 = (v99 >> 31) + 0x7FFFFFFF;
        v107 = v99;
      }
    }
    else
    {
      v107 = v105;
      v105 = v99;
      v108 = v359;
      if (v109)
      {
        v107 = (v99 >> 31) + 0x7FFFFFFF;
        v105 = v99;
      }
    }
  }
  v377 = 0;
  v378 = 0;
  v110 = (v96 != 8) ^ v108;
  v111 = 3.4028e38;
  if (v110)
    v112 = 3.4028e38;
  else
    v112 = 0.0;
  if (v110)
    v111 = 0.0;
  v332 = v111;
  v333 = v112;
  v342 = (v96 != 8) ^ v108;
  v360 = v107;
  if ((v90 & 1) != 0)
  {
    v113 = v99;
    if ((v110 & 1) == 0)
    {
      v113 = v99 + v357;
      if (__OFADD__(v99, v357))
        v113 = (v99 >> 31) + 0x7FFFFFFF;
LABEL_116:
      v92 = v345;
    }
  }
  else
  {
    v113 = v91 << 6;
    if ((v110 & 1) == 0)
    {
      v113 = v98 + v101;
      if (__OFADD__(v98, v101))
        v113 = (v98 >> 31) + 0x7FFFFFFF;
      goto LABEL_116;
    }
  }
  v375 = 0;
  v376 = 0;
  v373 = 0;
  v374 = 0;
  v369 = *(_OWORD *)((char *)v92 + 232);
  v371[0] = 0;
  v371[1] = 0;
  v370 = v371;
  std::set<int,std::less<int>,WTF::FastAllocator<int>>::insert[abi:sn180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(&v370, *((int **)v92 + 31), (int *)v92 + 64);
  v371[2] = *((WTF **)v92 + 34);
  v372 = *((_WORD *)v92 + 140);
  v114 = (int8x16_t *)WebCore::OrderIterator::first((WebCore::OrderIterator *)&v369);
  for (j = v114; v114; j = v114)
  {
    if ((v114[1].i32[1] & 0x1800000) != 0x1000000 && (v114[1].i32[1] & 0x400) == 0)
    {
      v116 = HIDWORD(v376);
      if (HIDWORD(v376) == (_DWORD)v376)
      {
        v117 = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v375, HIDWORD(v376) + 1, (unint64_t)&j);
        v116 = HIDWORD(v376);
        *((_QWORD *)v375 + HIDWORD(v376)) = *v117;
      }
      else
      {
        *((_QWORD *)v375 + HIDWORD(v376)) = v114;
      }
      HIDWORD(v376) = v116 + 1;
    }
    v114 = (int8x16_t *)WebCore::OrderIterator::next((WebCore::OrderIterator *)&v369);
  }
  if (*(_BYTE *)(a3 + 16))
  {
    if ((*(_WORD *)(v22 + 28) & 4) != 0 && (v118 = *(_QWORD *)(v22 + 80)) != 0)
    {
      v119 = 0;
      v120 = 0;
      v121 = 0;
      do
      {
        v122 = (int8x16_t *)(*(_QWORD *)(v118 + 64) & 0xFFFFFFFFFFFFLL);
        j = v122;
        if (v122)
        {
          v123 = HIDWORD(v376);
          if (HIDWORD(v376))
          {
            v124 = v375;
            while (*(int8x16_t **)v124 != v122)
            {
              v124 = (WTF *)((char *)v124 + 8);
              if (!--v123)
                goto LABEL_145;
            }
            if (v120 == (_DWORD)v374)
            {
              v125 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v373, v120 + 1, (unint64_t)&j);
              v120 = HIDWORD(v374);
              v119 = v373;
              *((_QWORD *)v373 + HIDWORD(v374)) = *(_QWORD *)v125;
            }
            else
            {
              *((_QWORD *)v119 + v120) = v122;
            }
            HIDWORD(v374) = ++v120;
            v126 = j;
            if ((j[2].i8[13] & 2) != 0)
              v126 = *(int8x16_t **)(j[2].i64[0] + 8);
            if (*(_DWORD *)(*(_QWORD *)(v126[5].i64[1] + 32) + 144))
              v121 = 1;
          }
        }
LABEL_145:
        v118 = *(_QWORD *)(v118 + 56);
      }
      while (v118);
    }
    else
    {
      v119 = 0;
      v121 = 0;
    }
    v337 = v121 & 1;
  }
  else
  {
    v119 = 0;
    v337 = 0;
  }
  if (!HIDWORD(v376))
    goto LABEL_389;
  v350 = 0;
  v127 = v375;
  v340 = (WTF *)((char *)v375 + 8 * HIDWORD(v376));
  v128 = !__OFADD__(v99, v357);
  v326 = (v99 >> 31) + 0x7FFFFFFF;
  v129 = v98 + v358;
  v130 = !__OFADD__(v98, v358);
  v341 = (float)v355 * 0.015625;
  v325 = (v98 >> 31) + 0x7FFFFFFF;
  v334 = (float)v105 * 0.015625;
  v335 = (float)v353 * 0.015625;
  v336 = (float)v113 * 0.015625;
  v356 = v343 | v128;
  if (v343)
    v131 = v99;
  else
    v131 = v99 + v357;
  v352 = v343 | v130;
  v354 = v131;
  if (v343)
    v132 = v91 << 6;
  else
    v132 = v98 + v358;
  v351 = v132;
  v133 = v342 | v130;
  if (v342)
    v129 = v91 << 6;
  v330 = v129;
  v331 = v133;
  v329 = v342 | v128;
  if (v342)
    v134 = v99;
  else
    v134 = v99 + v357;
  v328 = v134;
  v135 = v332;
  v136 = v333;
  do
  {
    v137 = *(_QWORD *)v127;
    v139 = *(_DWORD *)(*(_QWORD *)v127 + 152);
    v138 = *(_DWORD *)(*(_QWORD *)v127 + 156);
    v141 = *(_DWORD *)(*(_QWORD *)v127 + 160);
    v140 = *(_DWORD *)(*(_QWORD *)v127 + 164);
    v142 = (unsigned __int16)*((_DWORD *)v345 + 31) >> 13;
    v143 = v142 > 5;
    v144 = (1 << v142) & 0x2A;
    if (!v143 && v144 != 0)
    {
      if ((*((_BYTE *)v345 + 21) & 0x10) != 0)
      {
        v311 = v139 + v141;
        if (__OFADD__(v139, v141))
          v311 = (v139 >> 31) + 0x7FFFFFFF;
        v312 = *((_DWORD *)v345 + 40);
        v139 = v312 - v311;
        if (__OFSUB__(v312, v311))
          v139 = (v312 >> 31) + 0x7FFFFFFF;
      }
      else
      {
        v309 = v138 + v140;
        if (__OFADD__(v138, v140))
          v309 = (v138 >> 31) + 0x7FFFFFFF;
        v310 = *((_DWORD *)v345 + 41);
        v138 = v310 - v309;
        if (__OFSUB__(v310, v309))
          v138 = (v310 >> 31) + 0x7FFFFFFF;
      }
    }
    v146 = *(_DWORD *)(v137 + 180);
    if (v146 == 0x80000000)
      v147 = 0x7FFFFFFF;
    else
      v147 = -v146;
    v148 = *(_DWORD *)(v137 + 168);
    if (v148 == 0x80000000)
      v149 = 0x7FFFFFFF;
    else
      v149 = -v148;
    _VF = __OFADD__(v139, v147);
    v151 = v139 + v147;
    if (_VF)
      v151 = (v139 >> 31) + 0x7FFFFFFF;
    LODWORD(v368) = v151;
    v152 = v138 + v149;
    if (__OFADD__(v138, v149))
      v152 = (v138 >> 31) + 0x7FFFFFFF;
    DWORD1(v368) = v152;
    v153 = *(_DWORD *)(v137 + 172);
    _VF = __OFADD__(v146, v153);
    v154 = v146 + v153;
    if (_VF)
      v154 = (v146 >> 31) + 0x7FFFFFFF;
    v155 = *(_DWORD *)(v137 + 176);
    _VF = __OFADD__(v148, v155);
    v156 = v148 + v155;
    if (_VF)
      v156 = (v148 >> 31) + 0x7FFFFFFF;
    v157 = v141 + v154;
    if (__OFADD__(v141, v154))
      v157 = (v141 >> 31) + 0x7FFFFFFF;
    DWORD2(v368) = v157;
    v158 = v140 + v156;
    v346 = v127;
    if (__OFADD__(v140, v156))
      v158 = (v140 >> 31) + 0x7FFFFFFF;
    HIDWORD(v368) = v158;
    v159 = (float)v151 * 0.015625;
    v160 = (float)v152 * 0.015625;
    v161 = v387;
    v162 = v388;
    v163 = *v387;
    *(float *)&j = v159;
    *((float *)&j + 1) = v160;
    v397 = 0;
    v394 = 0u;
    v395 = 0u;
    v396 = 0;
    v399 = 0;
    v400 = 0;
    v398 = 0;
    v401 = 0;
    v402 = 1;
    v404 = 0;
    v403 = 0;
    (*(void (**)(uint64_t, _QWORD, int8x16_t **, uint64_t, _QWORD))(*(_QWORD *)v162 + 576))(v162, 0, &j, 6, 0);
    WebCore::TransformState::flatten((WebCore::TransformState *)&j, 0);
    v165 = (WTF::StringImpl *)j;
    v166 = v399;
    v399 = 0;
    if (v166)
      WTF::fastFree(v166, v164);
    v167 = v398;
    v398 = 0;
    if (v167)
      WTF::fastFree(v167, v164);
    v362 = v165;
    WebCore::ScrollView::contentsToView(v163, (const WebCore::FloatPoint *)&v362);
    j = (int8x16_t *)__PAIR64__(v169, v168);
    v170 = WebCore::Widget::convertToRootView(v163, (const WebCore::FloatPoint *)&j);
    v348 = v171;
    v349 = v170;
    v172 = *v161;
    *(float *)&j = v159 + (float)((float)v157 * 0.015625);
    *((float *)&j + 1) = v160;
    v397 = 0;
    v394 = 0u;
    v395 = 0u;
    v396 = 0;
    v399 = 0;
    v400 = 0;
    v398 = 0;
    v401 = 0;
    v402 = 1;
    v404 = 0;
    v403 = 0;
    (*(void (**)(uint64_t, _QWORD, int8x16_t **, uint64_t, _QWORD))(*(_QWORD *)v162 + 576))(v162, 0, &j, 6, 0);
    WebCore::TransformState::flatten((WebCore::TransformState *)&j, 0);
    v174 = j;
    v175 = v399;
    v399 = 0;
    if (v175)
      WTF::fastFree(v175, v173);
    v176 = v398;
    v398 = 0;
    if (v176)
      WTF::fastFree(v176, v173);
    v177 = v160 + (float)((float)v158 * 0.015625);
    v392 = v174;
    WebCore::ScrollView::contentsToView(v172, (const WebCore::FloatPoint *)&v392);
    j = (int8x16_t *)__PAIR64__(v179, v178);
    v347 = WebCore::Widget::convertToRootView(v172, (const WebCore::FloatPoint *)&j);
    v181 = v180;
    v182 = *v161;
    *(float *)&j = v159 + (float)((float)v157 * 0.015625);
    *((float *)&j + 1) = v177;
    v397 = 0;
    v394 = 0u;
    v395 = 0u;
    v396 = 0;
    v399 = 0;
    v400 = 0;
    v398 = 0;
    v401 = 0;
    v402 = 1;
    v404 = 0;
    v403 = 0;
    (*(void (**)(uint64_t, _QWORD, int8x16_t **, uint64_t, _QWORD))(*(_QWORD *)v162 + 576))(v162, 0, &j, 6, 0);
    WebCore::TransformState::flatten((WebCore::TransformState *)&j, 0);
    v184 = j;
    v185 = v399;
    v399 = 0;
    if (v185)
      WTF::fastFree(v185, v183);
    v186 = v398;
    v398 = 0;
    v187 = v343;
    if (v186)
      WTF::fastFree(v186, v183);
    v391 = v184;
    WebCore::ScrollView::contentsToView(v182, (const WebCore::FloatPoint *)&v391);
    j = (int8x16_t *)__PAIR64__(v189, v188);
    v190 = WebCore::Widget::convertToRootView(v182, (const WebCore::FloatPoint *)&j);
    v192 = v191;
    v193 = *v161;
    j = (int8x16_t *)__PAIR64__(LODWORD(v177), LODWORD(v159));
    v397 = 0;
    v394 = 0u;
    v395 = 0u;
    v396 = 0;
    v399 = 0;
    v400 = 0;
    v398 = 0;
    v401 = 0;
    v402 = 1;
    v404 = 0;
    v403 = 0;
    (*(void (**)(uint64_t, _QWORD, int8x16_t **, uint64_t, _QWORD))(*(_QWORD *)v162 + 576))(v162, 0, &j, 6, 0);
    WebCore::TransformState::flatten((WebCore::TransformState *)&j, 0);
    v195 = j;
    v196 = v399;
    v399 = 0;
    if (v196)
      WTF::fastFree(v196, v194);
    v197 = v398;
    v398 = 0;
    v198 = v342;
    if (v197)
      WTF::fastFree(v197, v194);
    v390 = v195;
    WebCore::ScrollView::contentsToView(v193, (const WebCore::FloatPoint *)&v390);
    j = (int8x16_t *)__PAIR64__(v200, v199);
    v202 = WebCore::Widget::convertToRootView(v193, (const WebCore::FloatPoint *)&j);
    *(_QWORD *)&v366 = __PAIR64__(v348, LODWORD(v349));
    *((_QWORD *)&v366 + 1) = __PAIR64__(v181, LODWORD(v347));
    *(_QWORD *)&v367 = __PAIR64__(v192, LODWORD(v190));
    *((_QWORD *)&v367 + 1) = __PAIR64__(v203, LODWORD(v202));
    if (DWORD1(v381) == (_DWORD)v381)
    {
      v204 = (__int128 *)WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v380 + 8, DWORD1(v381) + 1, (unint64_t)&v366);
      v205 = (_OWORD *)(*((_QWORD *)&v380 + 1) + 32 * DWORD1(v381));
      v206 = *v204;
      v207 = v204[1];
    }
    else
    {
      v205 = (_OWORD *)(*((_QWORD *)&v380 + 1) + 32 * DWORD1(v381));
      v206 = v366;
      v207 = v367;
    }
    *v205 = v206;
    v205[1] = v207;
    v208 = v341;
    v209 = 1.0;
    ++DWORD1(v381);
    if (!*(_BYTE *)(a3 + 16))
    {
      v213 = v350;
      if ((v90 & 1) != 0)
        goto LABEL_267;
      goto LABEL_273;
    }
    v362 = 0;
    v363 = 0;
    v364 = 0;
    v365 = 1;
    if (HIDWORD(v374))
    {
      v210 = 0;
      while (1)
      {
        v211 = *((_QWORD *)v373 + v210++);
        if (v211 == v137)
          break;
        if (HIDWORD(v374) == v210)
          goto LABEL_216;
      }
      v214 = 6;
      v215 = v210;
      do
      {
        v216 = v214++;
        v143 = v215 > 9;
        v215 /= 0xAuLL;
      }
      while (v143);
      if (v214 > 5)
        v217 = v216 + 1;
      else
        v217 = 0xFFFFFFFFLL;
      v218 = MEMORY[0x19AEA4824](&v362, v217);
      if (v218)
      {
        v219 = 0;
        *(_WORD *)(v218 + 4) = 8992;
        *(_DWORD *)v218 = 1835365449;
        do
        {
          *((_BYTE *)&v395 + v219--) = (v210 % 0xA) | 0x30;
          v143 = v210 > 9;
          v210 /= 0xAuLL;
        }
        while (v143);
        if (v219 + 26 <= 25)
          memcpy((void *)(v218 + 6), (char *)&v395 + v219 + 1, -v219);
      }
      v212 = v364;
    }
    else
    {
LABEL_216:
      v212 = 0;
    }
    v220 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v137 + 88) + 32) + 144);
    v221 = v337;
    if (v220)
      v221 = 1;
    if (v221 == 1)
    {
      v213 = v350;
      if (v212)
      {
        LOBYTE(j) = 10;
        if (v363 && (v212 < *((unsigned int *)v363 + 1) ? (v222 = v362 == 0) : (v222 = 0), v222))
        {
          v249 = *((_DWORD *)v363 + 4);
          v250 = *((_QWORD *)v363 + 1);
          v364 = v212 + 1;
          if ((v249 & 4) != 0)
            *(_BYTE *)(v250 + v212) = 10;
          else
            *(_WORD *)(v250 + 2 * v212) = 10;
        }
        else
        {
          WTF::StringBuilder::append();
        }
      }
      j = (int8x16_t *)"order: ";
      LODWORD(v394) = 7;
      LODWORD(v392) = v220;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((WTF::StringBuilder *)&v362, &j, (unsigned int *)&v392);
      v212 = v364;
    }
    else
    {
      v213 = v350;
    }
    if (v212)
    {
      v223 = v362;
      if (v362)
      {
        v224 = v339;
      }
      else
      {
        WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v362);
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v362);
        v223 = v362;
        v224 = v339;
        if (!v362)
          goto LABEL_248;
      }
      *(_DWORD *)v223 += 2;
LABEL_248:
      __asm { FMOV            V1.2S, #0.25 }
      v228 = vmul_f32(vadd_f32(vadd_f32(vadd_f32(*(float32x2_t *)&v366, *(float32x2_t *)((char *)&v366 + 8)), *(float32x2_t *)&v367), *(float32x2_t *)((char *)&v367 + 8)), _D1);
      v361 = 0x11040000FFFFFFE6;
      v339 = v224 & 0xFFFFFFFFFFFF0000;
      WebCore::InspectorOverlayLabel::InspectorOverlayLabel((uint64_t)&j, v223, &v361, 0, v228.f32[0], v228.f32[1]);
      v230 = HIDWORD(v386);
      if (HIDWORD(v386) == (_DWORD)v386)
      {
        p_j = (int8x16_t **)WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v385 + 8, HIDWORD(v386) + 1, (unint64_t)&j);
        v232 = HIDWORD(v386);
        v233 = *((_QWORD *)&v385 + 1);
        v234 = *((_QWORD *)&v385 + 1) + 40 * HIDWORD(v386);
        *(_QWORD *)v234 = 0;
        *(_QWORD *)(v234 + 8) = 0;
        v235 = *p_j;
        *p_j = 0;
        *(_QWORD *)v234 = v235;
        LODWORD(v235) = *((_DWORD *)p_j + 2);
        *((_DWORD *)p_j + 2) = 0;
        *(_DWORD *)(v234 + 8) = (_DWORD)v235;
        LODWORD(v235) = *((_DWORD *)p_j + 3);
        *((_DWORD *)p_j + 3) = 0;
        *(_DWORD *)(v234 + 12) = (_DWORD)v235;
        v236 = p_j[2];
        *(_QWORD *)(v234 + 24) = 0;
        v237 = (int8x16_t **)(v234 + 24);
        *(v237 - 1) = v236;
        v238 = p_j[3];
        if (v238)
        {
          *v237 = v238;
          p_j[3] = 0;
        }
        v239 = (_WORD *)(v233 + 40 * v232 + 32);
      }
      else
      {
        v240 = *((_QWORD *)&v385 + 1);
        v241 = *((_QWORD *)&v385 + 1) + 40 * HIDWORD(v386);
        *(_QWORD *)v241 = 0;
        *(_QWORD *)(v241 + 8) = 0;
        v242 = j;
        j = 0;
        *(_QWORD *)v241 = v242;
        LODWORD(v242) = v394;
        LODWORD(v394) = 0;
        *(_DWORD *)(v241 + 8) = (_DWORD)v242;
        LODWORD(v242) = DWORD1(v394);
        DWORD1(v394) = 0;
        *(_DWORD *)(v241 + 12) = (_DWORD)v242;
        v243 = *((_QWORD *)&v394 + 1);
        *(_QWORD *)(v241 + 24) = 0;
        v244 = (_QWORD *)(v241 + 24);
        *(v244 - 1) = v243;
        if ((_QWORD)v395)
        {
          *v244 = v395;
          *(_QWORD *)&v395 = 0;
        }
        v239 = (_WORD *)(v240 + 40 * v230 + 32);
        p_j = &j;
      }
      *v239 = *((_WORD *)p_j + 16);
      ++HIDWORD(v386);
      if ((v395 & 0x8000000000000) != 0)
      {
        v313 = (unsigned int *)(v395 & 0xFFFFFFFFFFFFLL);
        do
        {
          v314 = __ldaxr(v313);
          v315 = v314 - 1;
        }
        while (__stlxr(v315, v313));
        v198 = v342;
        v187 = v343;
        v213 = v350;
        v208 = v341;
        v209 = 1.0;
        if (!v315)
        {
          atomic_store(1u, v313);
          WTF::fastFree((WTF *)v313, v229);
        }
      }
      WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&j, v229);
      if ((v361 & 0x8000000000000) != 0)
      {
        v316 = (unsigned int *)(v361 & 0xFFFFFFFFFFFFLL);
        do
        {
          v317 = __ldaxr(v316);
          v318 = v317 - 1;
        }
        while (__stlxr(v318, v316));
        v198 = v342;
        v187 = v343;
        v213 = v350;
        v208 = v341;
        v209 = 1.0;
        if (!v318)
        {
          atomic_store(1u, v316);
          WTF::fastFree((WTF *)v316, v201);
        }
      }
      if (v223)
      {
        if (*(_DWORD *)v223 == 2)
          WTF::StringImpl::destroy(v223, (WTF::StringImpl *)v201);
        else
          *(_DWORD *)v223 -= 2;
      }
    }
    v245 = v363;
    v363 = 0;
    if (v245)
    {
      if (*(_DWORD *)v245 == 2)
        WTF::StringImpl::destroy(v245, (WTF::StringImpl *)v201);
      else
        *(_DWORD *)v245 -= 2;
    }
    v246 = v362;
    v362 = 0;
    if (!v246)
      goto LABEL_266;
    if (*(_DWORD *)v246 != 2)
    {
      *(_DWORD *)v246 -= 2;
LABEL_266:
      if ((v90 & 1) != 0)
        goto LABEL_267;
      goto LABEL_273;
    }
    WTF::StringImpl::destroy(v246, (WTF::StringImpl *)v201);
    if ((v90 & 1) != 0)
    {
LABEL_267:
      v247 = DWORD1(v368);
      if ((v198 & 1) != 0)
        goto LABEL_277;
      v248 = HIDWORD(v368);
      goto LABEL_275;
    }
LABEL_273:
    v247 = v368;
    if ((v198 & 1) != 0)
      goto LABEL_277;
    v248 = DWORD2(v368);
LABEL_275:
    _VF = __OFADD__(v247, v248);
    v251 = v247 + v248;
    v247 = (v247 >> 31) + 0x7FFFFFFF;
    if (!_VF)
      v247 = v251;
LABEL_277:
    v252 = (float)v247 * 0.015625;
    v253 = fmaxf(v136, v252);
    v254 = fminf(v136, v252);
    if (v198)
      v136 = v254;
    else
      v136 = v253;
    if ((v90 & 1) != 0)
    {
      v255 = DWORD1(v368);
      if (!v198)
        goto LABEL_287;
      v256 = HIDWORD(v368);
    }
    else
    {
      v255 = v368;
      if (!v198)
        goto LABEL_287;
      v256 = DWORD2(v368);
    }
    _VF = __OFADD__(v255, v256);
    v257 = v255 + v256;
    v255 = (v255 >> 31) + 0x7FFFFFFF;
    if (!_VF)
      v255 = v257;
LABEL_287:
    v258 = (float)v255 * 0.015625;
    v259 = fminf(v135, v258);
    v260 = fmaxf(v135, v258);
    if (v198)
      v135 = v260;
    else
      v135 = v259;
    v261 = HIDWORD(v378);
    if (HIDWORD(v378) == (_DWORD)v378)
    {
      v308 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v377, HIDWORD(v378) + 1, (unint64_t)&v368);
      v261 = HIDWORD(v378);
      v262 = v377;
      v263 = *v308;
    }
    else
    {
      v262 = v377;
      v263 = v368;
    }
    *((_OWORD *)v262 + v261) = v263;
    v264 = ++HIDWORD(v378);
    v265 = v213 + 1;
    if ((_DWORD)v344)
    {
      v266 = v338;
      v267 = v344;
      while (1)
      {
        v268 = *v266++;
        if (v268 == v265)
          break;
        if (!--v267)
          goto LABEL_296;
      }
      if ((v90 & 1) != 0)
      {
        v270 = v351;
        if ((v352 & 1) == 0)
          v270 = v325;
      }
      else
      {
        v270 = v354;
        if ((v356 & 1) == 0)
          v270 = v326;
      }
      v271 = v265;
      v272 = (float)v270 * 0.015625;
      if ((_DWORD)v264)
      {
        v273 = 16 * v264;
        v274 = (_DWORD *)((char *)v377 + 8);
        do
        {
          if ((v90 & 1) != 0)
          {
            v275 = *(v274 - 2);
            v276 = __OFADD__(v275, *v274);
            v277 = !v276;
            if ((v187 & 1) != 0)
            {
              v278 = *(v274 - 2);
              if (v277)
                v275 += *v274;
              else
                v275 = (v275 >> 31) + 0x7FFFFFFF;
            }
            else if (v276)
            {
              v278 = (v275 >> 31) + 0x7FFFFFFF;
            }
            else
            {
              v278 = v275 + *v274;
            }
            v283 = *(v274 - 1);
            v284 = v274[1];
          }
          else
          {
            v275 = *(v274 - 1);
            v279 = v274[1];
            v280 = v275 + v279;
            v281 = __OFADD__(v275, v279);
            v282 = !v281;
            if ((v187 & 1) != 0)
            {
              v278 = *(v274 - 1);
              if (v282)
                v275 = v280;
              else
                v275 = (v275 >> 31) + 0x7FFFFFFF;
            }
            else if (v281)
            {
              v278 = (v275 >> 31) + 0x7FFFFFFF;
            }
            else
            {
              v278 = v280;
            }
            v283 = *(v274 - 2);
            v284 = *v274;
          }
          v285 = v283 + v284;
          v286 = __OFADD__(v283, v284);
          v287 = !v286;
          if ((v198 & 1) != 0)
          {
            v288 = v283;
            if (v287)
              v283 = v285;
            else
              v283 = (v283 >> 31) + 0x7FFFFFFF;
          }
          else if (v286)
          {
            v288 = (v283 >> 31) + 0x7FFFFFFF;
          }
          else
          {
            v288 = v285;
          }
          v289 = (float)v288 * 0.015625;
          v290 = (float)v278;
          v291 = (float)(int)v275;
          if (vabds_f32(v289, v136) > v209)
            WebCore::InspectorOverlay::buildFlexOverlay(WebCore::InspectorOverlay::Flex const&)::$_10::operator()(&v387, v90, (uint64_t)&v383 + 8, v290 * 0.015625, v291 * 0.015625, v136, v289);
          v292 = (float)(int)v283 * 0.015625;
          if (vabds_f32(v292, v135) > v209)
            WebCore::InspectorOverlay::buildFlexOverlay(WebCore::InspectorOverlay::Flex const&)::$_10::operator()(&v387, v90, (uint64_t)&v383 + 8, v290 * 0.015625, v291 * 0.015625, v135, v292);
          if (v208 == 0.0)
            goto LABEL_348;
          if ((v90 & 1) != 0)
          {
            v293 = v351;
            if ((v352 & 1) == 0)
              v293 = v325;
          }
          else
          {
            v293 = v354;
            if ((v356 & 1) == 0)
              v293 = v326;
          }
          if ((float)((float)v293 * 0.015625) == v272)
          {
LABEL_348:
            v294 = v290 * 0.015625;
            v295 = v90;
            v296 = v272;
            v297 = v136;
          }
          else
          {
            v298 = fminf(v272, v290 * 0.015625);
            v299 = fmaxf(v272, v290 * 0.015625);
            v300 = (float)((float)(v299 - v298) - v208) * 0.5;
            v301 = v298 + v300;
            WebCore::InspectorOverlay::buildFlexOverlay(WebCore::InspectorOverlay::Flex const&)::$_10::operator()(&v387, v90, (uint64_t)&v382 + 8, v298, v298 + v300, v136, v135);
            v302 = v299 - v300;
            WebCore::InspectorOverlay::buildFlexOverlay(WebCore::InspectorOverlay::Flex const&)::$_10::operator()(&v387, v90, (uint64_t)&v381 + 8, v301, v302, v136, v135);
            v295 = v90;
            v296 = v302;
            v294 = v299;
            v297 = v136;
          }
          WebCore::InspectorOverlay::buildFlexOverlay(WebCore::InspectorOverlay::Flex const&)::$_10::operator()(&v387, v295, (uint64_t)&v382 + 8, v296, v294, v297, v135);
          v272 = v291 * 0.015625;
          v274 += 4;
          v273 -= 16;
        }
        while (v273);
      }
      WebCore::InspectorOverlay::buildFlexOverlay(WebCore::InspectorOverlay::Flex const&)::$_10::operator()(&v387, v90, (uint64_t)&v382 + 8, v272, v334, v136, v135);
      v265 = v271;
      v269 = v346;
      if (v335 != 0.0)
      {
        if ((v90 & 1) != 0)
        {
          v304 = v328;
          if ((v329 & 1) == 0)
            v304 = v326;
        }
        else
        {
          v304 = v330;
          if ((v331 & 1) == 0)
            v304 = v325;
        }
        if ((float)((float)v304 * 0.015625) != v336)
        {
          v305 = fminf(v336, v136);
          v306 = fmaxf(v336, v136);
          WebCore::InspectorOverlay::buildFlexOverlay(WebCore::InspectorOverlay::Flex const&)::$_10::operator()(&v387, v90, (uint64_t)&v384 + 8, (float)v360 * 0.015625, v334, v305 + (float)((float)((float)(v306 - v305) - v335) * 0.5), v306 - (float)((float)((float)(v306 - v305) - v335) * 0.5));
        }
      }
      if ((_DWORD)v378)
      {
        if (HIDWORD(v378))
          HIDWORD(v378) = 0;
        v307 = v377;
        if (v377)
        {
          v377 = 0;
          LODWORD(v378) = 0;
          WTF::fastFree(v307, v303);
        }
      }
      v336 = v135;
      v135 = v332;
      v136 = v333;
    }
    else
    {
LABEL_296:
      v269 = v346;
    }
    v350 = v265;
    v127 = (WTF *)((char *)v269 + 8);
  }
  while (v127 != v340);
  v119 = v373;
LABEL_389:
  *(_BYTE *)(WebCore::InspectorOverlayHighlight::FlexHighlightOverlay::FlexHighlightOverlay(v327, (uint64_t *)v379) + 136) = 1;
  std::__tree<int,std::less<int>,WTF::FastAllocator<int>>::destroy((uint64_t)&v370, v371[0]);
  if (v119)
  {
    v373 = 0;
    LODWORD(v374) = 0;
    WTF::fastFree(v119, v319);
  }
  v320 = v375;
  v45 = v338;
  if (v375)
  {
    v375 = 0;
    LODWORD(v376) = 0;
    WTF::fastFree(v320, v319);
  }
  v321 = v377;
  if (v377)
  {
    v377 = 0;
    LODWORD(v378) = 0;
    WTF::fastFree(v321, v319);
  }
  WebCore::InspectorOverlayHighlight::FlexHighlightOverlay::~FlexHighlightOverlay((WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *)v379, v319);
LABEL_398:
  if (v45)
    WTF::fastFree((WTF *)v45, this);
}

uint64_t WebCore::InspectorOverlay::drawFlexOverlay(WebCore::InspectorOverlay *this, WebCore::GraphicsContext **a2, const WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *a3)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  const WebCore::FloatPoint *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  const WebCore::FloatPoint *v18;
  int v19;
  int v20;
  uint64_t v21;
  const WebCore::FloatQuad *v22;
  uint64_t v23;
  WebCore::GraphicsContext *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  char *v30;
  const WebCore::FloatPoint *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t result;
  const WebCore::FloatQuad *v36;
  uint64_t v37;
  WebCore::GraphicsContext *v38;
  uint64_t v39;
  unsigned int v40;
  WebCore::GraphicsContext *v41;
  WebCore::GraphicsContext *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  uint64_t v55;
  void *v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  char v62[8];
  uint64_t v63;
  int v64;
  _BYTE v65[40];
  __int128 v66;
  int v67;
  int v68;
  int v69;
  _OWORD v70[2];
  __int128 v71;
  int v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  (*(void (**)(WebCore::InspectorOverlay *, uint64_t, const WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *))(*(_QWORD *)this + 96))(this, 1, a3);
  if (*((float *)this + 47) != 1.0)
  {
    *((_DWORD *)this + 46) |= 8u;
    *((_DWORD *)this + 47) = 1065353216;
  }
  (*(void (**)(WebCore::InspectorOverlay *, char *))(*(_QWORD *)this + 88))(this, (char *)this + 8);
  WebCore::GraphicsContext::setStrokeColor(this, (const WebCore::Color *)a2);
  v69 = 0;
  WebCore::Path::moveTo((WebCore::Path *)v65, (const WebCore::FloatPoint *)(a2 + 1));
  WebCore::Path::addLineTo((uint64_t)v65, (const WebCore::FloatPoint *)(a2 + 2));
  WebCore::Path::addLineTo((uint64_t)v65, (const WebCore::FloatPoint *)(a2 + 3));
  WebCore::Path::addLineTo((uint64_t)v65, (const WebCore::FloatPoint *)(a2 + 4));
  v5 = v69;
  if (v69 == 2)
  {
    if (!*(_QWORD *)&v65[8])
      goto LABEL_20;
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)&v65[8] + 200))(*(_QWORD *)&v65[8]) & 1) != 0)
      goto LABEL_21;
    v5 = v69;
  }
  else if (!v69)
  {
    goto LABEL_21;
  }
  if (v5 != 2)
  {
    if (v5 != 1)
      goto LABEL_20;
    v6 = v68;
    if (v68 == 6 || v68 == 15)
      goto LABEL_21;
    goto LABEL_18;
  }
  if (!*(_QWORD *)&v65[8])
    goto LABEL_20;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)&v65[8] + 208))(*(_QWORD *)&v65[8]) & 1) == 0)
  {
    if (v69 != 1)
      goto LABEL_20;
    v6 = v68;
LABEL_18:
    if (v6 == 5)
    {
      v70[0] = *(_OWORD *)&v65[8];
      *(_QWORD *)((char *)v70 + 13) = *(_QWORD *)&v65[21];
      v66 = v71;
      *(_OWORD *)&v65[8] = v70[0];
      *(_OWORD *)&v65[24] = v70[1];
      v67 = v72;
      v68 = 6;
      goto LABEL_21;
    }
LABEL_20:
    v7 = WebCore::Path::ensureImpl((WebCore::Path *)v65);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 120))(v7);
  }
LABEL_21:
  (*(void (**)(WebCore::InspectorOverlay *, _BYTE *))(*(_QWORD *)this + 184))(this, v65);
  if (v69 != -1)
    ((void (*)(_OWORD *, _BYTE *))off_1E33EE980[v69])(v70, &v65[8]);
  v8 = *((unsigned int *)a2 + 13);
  if ((_DWORD)v8)
  {
    v9 = (char *)a2[5];
    v10 = &v9[32 * v8];
    do
    {
      v69 = 0;
      WebCore::Path::moveTo((WebCore::Path *)v65, (const WebCore::FloatPoint *)v9);
      WebCore::Path::addLineTo((uint64_t)v65, (const WebCore::FloatPoint *)(v9 + 8));
      WebCore::Path::addLineTo((uint64_t)v65, (const WebCore::FloatPoint *)(v9 + 16));
      v11 = (const WebCore::FloatPoint *)(v9 + 24);
      WebCore::Path::addLineTo((uint64_t)v65, v11);
      v12 = v69;
      if (v69 == 2)
      {
        if (!*(_QWORD *)&v65[8])
          goto LABEL_42;
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)&v65[8] + 200))(*(_QWORD *)&v65[8]) & 1) != 0)
          goto LABEL_43;
        v12 = v69;
      }
      else if (!v69)
      {
        goto LABEL_43;
      }
      if (v12 == 2)
      {
        if (!*(_QWORD *)&v65[8])
          goto LABEL_42;
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)&v65[8] + 208))(*(_QWORD *)&v65[8]) & 1) != 0)
          goto LABEL_43;
        if (v69 != 1)
          goto LABEL_42;
        v13 = v68;
      }
      else
      {
        if (v12 != 1)
          goto LABEL_42;
        v13 = v68;
        if (v68 == 6 || v68 == 15)
          goto LABEL_43;
      }
      if (v13 != 5)
      {
LABEL_42:
        v14 = WebCore::Path::ensureImpl((WebCore::Path *)v65);
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 120))(v14);
        goto LABEL_43;
      }
      v70[0] = *(_OWORD *)&v65[8];
      *(_QWORD *)((char *)v70 + 13) = *(_QWORD *)&v65[21];
      *(_OWORD *)&v65[24] = v70[1];
      v66 = v71;
      v67 = v72;
      *(_OWORD *)&v65[8] = v70[0];
      v68 = 6;
LABEL_43:
      (*(void (**)(WebCore::InspectorOverlay *, _BYTE *))(*(_QWORD *)this + 184))(this, v65);
      if (v69 != -1)
        ((void (*)(_OWORD *, _BYTE *))off_1E33EE980[v69])(v70, &v65[8]);
      v9 = (char *)v11 + 8;
    }
    while (v9 != v10);
  }
  v15 = *((unsigned int *)a2 + 17);
  if ((_DWORD)v15)
  {
    v16 = (char *)a2[7];
    v17 = &v16[32 * v15];
    do
    {
      v69 = 0;
      WebCore::Path::moveTo((WebCore::Path *)v65, (const WebCore::FloatPoint *)v16);
      WebCore::Path::addLineTo((uint64_t)v65, (const WebCore::FloatPoint *)(v16 + 8));
      WebCore::Path::addLineTo((uint64_t)v65, (const WebCore::FloatPoint *)(v16 + 16));
      v18 = (const WebCore::FloatPoint *)(v16 + 24);
      WebCore::Path::addLineTo((uint64_t)v65, v18);
      v19 = v69;
      if (v69 == 2)
      {
        if (!*(_QWORD *)&v65[8])
          goto LABEL_65;
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)&v65[8] + 200))(*(_QWORD *)&v65[8]) & 1) != 0)
          goto LABEL_66;
        v19 = v69;
      }
      else if (!v69)
      {
        goto LABEL_66;
      }
      if (v19 == 2)
      {
        if (!*(_QWORD *)&v65[8])
          goto LABEL_65;
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)&v65[8] + 208))(*(_QWORD *)&v65[8]) & 1) != 0)
          goto LABEL_66;
        if (v69 != 1)
          goto LABEL_65;
        v20 = v68;
      }
      else
      {
        if (v19 != 1)
          goto LABEL_65;
        v20 = v68;
        if (v68 == 6 || v68 == 15)
          goto LABEL_66;
      }
      if (v20 != 5)
      {
LABEL_65:
        v21 = WebCore::Path::ensureImpl((WebCore::Path *)v65);
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 120))(v21);
        goto LABEL_66;
      }
      v70[0] = *(_OWORD *)&v65[8];
      *(_QWORD *)((char *)v70 + 13) = *(_QWORD *)&v65[21];
      *(_OWORD *)&v65[24] = v70[1];
      v66 = v71;
      v67 = v72;
      *(_OWORD *)&v65[8] = v70[0];
      v68 = 6;
LABEL_66:
      (*(void (**)(WebCore::InspectorOverlay *, _BYTE *))(*(_QWORD *)this + 184))(this, v65);
      if (v69 != -1)
        ((void (*)(_OWORD *, _BYTE *))off_1E33EE980[v69])(v70, &v65[8]);
      WebCore::drawLayoutHatching((float *)this, (float *)v18 - 6, 0);
      v16 = (char *)v18 + 8;
    }
    while (v16 != v17);
  }
  (*(void (**)(WebCore::InspectorOverlay *, uint64_t))(*(_QWORD *)this + 96))(this, 1);
  if (*((float *)this + 84) != 0.5)
  {
    *((_DWORD *)this + 84) = 1056964608;
    *((_DWORD *)this + 46) |= 0x100u;
  }
  (*(void (**)(WebCore::InspectorOverlay *, char *))(*(_QWORD *)this + 88))(this, (char *)this + 8);
  v23 = *((unsigned int *)a2 + 21);
  if ((_DWORD)v23)
  {
    v24 = a2[9];
    v25 = 32 * v23;
    do
    {
      v26 = *(_OWORD *)v24;
      v27 = *((_OWORD *)v24 + 1);
      v24 = (WebCore::GraphicsContext *)((char *)v24 + 32);
      *(_OWORD *)v65 = v26;
      *(_OWORD *)&v65[16] = v27;
      WebCore::drawLayoutStippling(this, (WebCore::GraphicsContext *)v65, v22, 3.0);
      v25 -= 32;
    }
    while (v25);
  }
  (*(void (**)(WebCore::InspectorOverlay *, uint64_t))(*(_QWORD *)this + 104))(this, 1);
  v28 = *((unsigned int *)a2 + 29);
  if ((_DWORD)v28)
  {
    v29 = (char *)a2[13];
    v30 = &v29[32 * v28];
    do
    {
      v69 = 0;
      WebCore::Path::moveTo((WebCore::Path *)v65, (const WebCore::FloatPoint *)v29);
      WebCore::Path::addLineTo((uint64_t)v65, (const WebCore::FloatPoint *)(v29 + 8));
      WebCore::Path::addLineTo((uint64_t)v65, (const WebCore::FloatPoint *)(v29 + 16));
      v31 = (const WebCore::FloatPoint *)(v29 + 24);
      WebCore::Path::addLineTo((uint64_t)v65, v31);
      v32 = v69;
      if (v69 == 2)
      {
        if (!*(_QWORD *)&v65[8])
          goto LABEL_93;
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)&v65[8] + 200))(*(_QWORD *)&v65[8]) & 1) != 0)
          goto LABEL_94;
        v32 = v69;
      }
      else if (!v69)
      {
        goto LABEL_94;
      }
      if (v32 == 2)
      {
        if (!*(_QWORD *)&v65[8])
          goto LABEL_93;
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)&v65[8] + 208))(*(_QWORD *)&v65[8]) & 1) != 0)
          goto LABEL_94;
        if (v69 != 1)
          goto LABEL_93;
        v33 = v68;
      }
      else
      {
        if (v32 != 1)
          goto LABEL_93;
        v33 = v68;
        if (v68 == 6 || v68 == 15)
          goto LABEL_94;
      }
      if (v33 != 5)
      {
LABEL_93:
        v34 = WebCore::Path::ensureImpl((WebCore::Path *)v65);
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 120))(v34);
        goto LABEL_94;
      }
      v70[0] = *(_OWORD *)&v65[8];
      *(_QWORD *)((char *)v70 + 13) = *(_QWORD *)&v65[21];
      *(_OWORD *)&v65[24] = v70[1];
      v66 = v71;
      v67 = v72;
      *(_OWORD *)&v65[8] = v70[0];
      v68 = 6;
LABEL_94:
      (*(void (**)(WebCore::InspectorOverlay *, _BYTE *))(*(_QWORD *)this + 184))(this, v65);
      if (v69 != -1)
        ((void (*)(_OWORD *, _BYTE *))off_1E33EE980[v69])(v70, &v65[8]);
      WebCore::drawLayoutHatching((float *)this, (float *)v31 - 6, 1);
      v29 = (char *)v31 + 8;
    }
    while (v29 != v30);
  }
  if (*((float *)this + 84) != 0.7)
  {
    *((_DWORD *)this + 84) = 1060320051;
    *((_DWORD *)this + 46) |= 0x100u;
  }
  result = (*(uint64_t (**)(WebCore::InspectorOverlay *, char *))(*(_QWORD *)this + 88))(this, (char *)this + 8);
  v37 = *((unsigned int *)a2 + 25);
  if ((_DWORD)v37)
  {
    v38 = a2[11];
    v39 = 32 * v37;
    do
    {
      result = WebCore::drawLayoutStippling(this, v38, v36, 6.0);
      v38 = (WebCore::GraphicsContext *)((char *)v38 + 32);
      v39 -= 32;
    }
    while (v39);
  }
  v40 = *((_DWORD *)a2 + 33);
  if (!v40)
    return (*(uint64_t (**)(WebCore::InspectorOverlay *, uint64_t))(*(_QWORD *)this + 104))(this, 1);
  v41 = a2[15];
  v42 = (WebCore::GraphicsContext *)((char *)v41 + 40 * v40);
  while (1)
  {
    v43 = *((unsigned int *)v41 + 3);
    *(_QWORD *)v65 = 0;
    *(_DWORD *)&v65[8] = 0;
    *(_DWORD *)&v65[12] = v43;
    if ((_DWORD)v43)
      break;
LABEL_120:
    v55 = *((_QWORD *)v41 + 3);
    *(_QWORD *)&v65[16] = *((_QWORD *)v41 + 2);
    *(_QWORD *)&v65[24] = v55;
    if ((v55 & 0x8000000000000) != 0)
    {
      v57 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFLL);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 + 1, v57));
    }
    *(_WORD *)&v65[32] = *((_WORD *)v41 + 16);
    WebCore::InspectorOverlayLabel::draw((WebCore::InspectorOverlayLabel *)v62, (WebCore::GraphicsContext *)v65, 0.0, this);
    if (v64 != -1)
      ((void (*)(_OWORD *, uint64_t *))off_1E33EE980[v64])(v70, &v63);
    v64 = -1;
    if ((*(_QWORD *)&v65[24] & 0x8000000000000) != 0)
    {
      v59 = (unsigned int *)(*(_QWORD *)&v65[24] & 0xFFFFFFFFFFFFLL);
      do
      {
        v60 = __ldaxr(v59);
        v61 = v60 - 1;
      }
      while (__stlxr(v61, v59));
      if (!v61)
      {
        atomic_store(1u, v59);
        WTF::fastFree((WTF *)v59, v56);
      }
    }
    result = WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v65, v56);
    v41 = (WebCore::GraphicsContext *)((char *)v41 + 40);
    if (v41 == v42)
      return (*(uint64_t (**)(WebCore::InspectorOverlay *, uint64_t))(*(_QWORD *)this + 104))(this, 1);
  }
  if (!(v43 >> 27))
  {
    v44 = WTF::fastMalloc((WTF *)(32 * v43));
    *(_DWORD *)&v65[8] = v43;
    *(_QWORD *)v65 = v44;
    v45 = *((unsigned int *)v41 + 3);
    if ((_DWORD)v45)
    {
      v46 = *(_QWORD *)v41;
      v47 = *(_QWORD *)v41 + 32 * v45;
      do
      {
        v48 = *(_DWORD **)v46;
        if (*(_QWORD *)v46)
          *v48 += 2;
        *(_QWORD *)v44 = v48;
        v49 = *(_QWORD *)(v46 + 8);
        *(_QWORD *)(v44 + 8) = v49;
        if ((v49 & 0x8000000000000) != 0)
        {
          v51 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFLL);
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 + 1, v51));
        }
        *(_BYTE *)(v44 + 16) = *(_BYTE *)(v46 + 16);
        v50 = *(_QWORD *)(v46 + 24);
        *(_QWORD *)(v44 + 24) = v50;
        if ((v50 & 0x8000000000000) != 0)
        {
          v53 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFLL);
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 + 1, v53));
        }
        v44 += 32;
        v46 += 32;
      }
      while (v46 != v47);
    }
    goto LABEL_120;
  }
  __break(0xC471u);
  return result;
}

void WebCore::InspectorOverlay::getHighlight(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v3;
  int v4;
  uint64_t v7;
  unsigned int *v8;
  void *v9;
  unsigned int v10;
  WTF *v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _OWORD *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  unsigned int *v50;
  unsigned int v51;
  uint64_t v52;
  WTF *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  WTF *v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  uint64_t v70;
  WTF *v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  void *v82;
  unsigned int *v83;
  unsigned int v84;
  WTF *v85;
  BOOL v86;
  void *v87;
  WTF *v88;
  unsigned int v89;
  unsigned int v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  void *v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  void *v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  WTF *v119;
  uint64_t v120;
  WTF *v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int *v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int *v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int v156;
  _BYTE *v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  unint64_t *v162;
  WTF *v163;
  unint64_t v164;
  int v165;
  char v166;
  WTF *v167[2];
  __int128 v168;
  uint64_t v169;
  char v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  char v174;
  _BYTE v175[72];
  char v176;
  char v177;

  v4 = a3;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    *(_BYTE *)(a2 + 40) = 0;
    WebCore::buildNodeHighlight(*(_QWORD *)(v7 + 64), (unint64_t *)(a1 + 32), (unint64_t *)a2, a3);
    if (!*(_BYTE *)(a1 + 96))
      goto LABEL_119;
    v8 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(*(_QWORD *)(a1 + 16));
    if (v8)
    {
      do
        v10 = __ldaxr(v8);
      while (__stlxr(v10 + 1, v8));
    }
    v167[0] = (WTF *)v8;
    if (!*(_BYTE *)(a1 + 96))
      goto LABEL_180;
    v11 = *(WTF **)(a1 + 80);
    v167[1] = v11;
    if (((unint64_t)v11 & 0x8000000000000) != 0)
    {
      v132 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFLL);
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 + 1, v132));
      v11 = v167[1];
      v12 = (unint64_t)v167[1] & 0x8000000000000;
    }
    else
    {
      v12 = 0;
    }
    LODWORD(v168) = *(_DWORD *)(a1 + 88);
    BYTE4(v168) = *(_BYTE *)(a1 + 92);
    WebCore::InspectorOverlay::buildGridOverlay((uint64_t)v175, (WebCore::InspectorOverlay *)a1, (uint64_t)v167, 1);
    if (v12)
    {
      v136 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFLL);
      do
      {
        v137 = __ldaxr(v136);
        v138 = v137 - 1;
      }
      while (__stlxr(v138, v136));
      if (!v138)
      {
        atomic_store(1u, v136);
        WTF::fastFree((WTF *)v136, v9);
      }
    }
    v3 = (unint64_t)v167[0];
    v167[0] = 0;
    if (v3)
    {
      do
      {
        v13 = __ldaxr((unsigned int *)v3);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unsigned int *)v3));
      if (!v14)
        goto LABEL_181;
    }
    while (1)
    {
      if (v176)
      {
        v15 = (_QWORD *)(a2 + 64);
        v16 = *(unsigned int *)(a2 + 76);
        if ((_DWORD)v16 == *(_DWORD *)(a2 + 72))
        {
          v17 = (uint64_t *)WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v15, v16 + 1, (unint64_t)v175);
          v18 = *(_QWORD *)(a2 + 64) + 72 * *(unsigned int *)(a2 + 76);
        }
        else
        {
          v18 = *v15 + 72 * v16;
          v17 = (uint64_t *)v175;
        }
        WebCore::InspectorOverlayHighlight::GridHighlightOverlay::GridHighlightOverlay(v18, v17);
        ++*(_DWORD *)(a2 + 76);
        if (v176)
          WebCore::InspectorOverlayHighlight::GridHighlightOverlay::~GridHighlightOverlay((WebCore::InspectorOverlayHighlight::GridHighlightOverlay *)v175, v82);
      }
LABEL_119:
      if (!*(_BYTE *)(a1 + 120))
        goto LABEL_139;
      v83 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(*(_QWORD *)(a1 + 16));
      if (v83)
      {
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 + 1, v83));
      }
      v167[0] = (WTF *)v83;
      if (*(_BYTE *)(a1 + 120))
      {
        v85 = *(WTF **)(a1 + 104);
        v167[1] = v85;
        if (((unint64_t)v85 & 0x8000000000000) != 0)
        {
          v134 = (unsigned int *)((unint64_t)v85 & 0xFFFFFFFFFFFFLL);
          do
            v135 = __ldaxr(v134);
          while (__stlxr(v135 + 1, v134));
          v85 = v167[1];
          v86 = ((unint64_t)v167[1] & 0x8000000000000) == 0;
        }
        else
        {
          v86 = 1;
        }
        LOBYTE(v168) = *(_BYTE *)(a1 + 112);
        WebCore::InspectorOverlay::buildFlexOverlay(v175, (WebCore::InspectorOverlay *)a1, (uint64_t)v167);
        if (!v86)
        {
          v139 = (unsigned int *)((unint64_t)v85 & 0xFFFFFFFFFFFFLL);
          do
          {
            v140 = __ldaxr(v139);
            v141 = v140 - 1;
          }
          while (__stlxr(v141, v139));
          if (!v141)
          {
            atomic_store(1u, v139);
            WTF::fastFree((WTF *)v139, v87);
          }
        }
        v88 = v167[0];
        v167[0] = 0;
        if (v88)
        {
          do
          {
            v89 = __ldaxr((unsigned int *)v88);
            v90 = v89 - 1;
          }
          while (__stlxr(v90, (unsigned int *)v88));
          if (!v90)
          {
            atomic_store(1u, (unsigned int *)v88);
            v120 = *((unsigned int *)v88 + 7);
            if ((_DWORD)v120)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v88 + 2), (WTF::StringImpl *)(*((_QWORD *)v88 + 2) + 32 * v120));
            v121 = (WTF *)*((_QWORD *)v88 + 2);
            if (v121)
            {
              *((_QWORD *)v88 + 2) = 0;
              *((_DWORD *)v88 + 6) = 0;
              WTF::fastFree(v121, v87);
            }
            WTF::fastFree(v88, v87);
          }
        }
        if (v177)
        {
          v91 = (_QWORD *)(a2 + 80);
          v92 = *(unsigned int *)(a2 + 92);
          if ((_DWORD)v92 == *(_DWORD *)(a2 + 88))
          {
            v93 = (uint64_t *)WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v91, v92 + 1, (unint64_t)v175);
            v94 = *(_QWORD *)(a2 + 80) + 136 * *(unsigned int *)(a2 + 92);
          }
          else
          {
            v94 = *v91 + 136 * v92;
            v93 = (uint64_t *)v175;
          }
          WebCore::InspectorOverlayHighlight::FlexHighlightOverlay::FlexHighlightOverlay(v94, v93);
          ++*(_DWORD *)(a2 + 92);
          if (v177)
            WebCore::InspectorOverlayHighlight::FlexHighlightOverlay::~FlexHighlightOverlay((WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *)v175, v95);
        }
        goto LABEL_139;
      }
LABEL_180:
      __break(1u);
LABEL_181:
      atomic_store(1u, (unsigned int *)v3);
      v118 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v118)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v118));
      v119 = *(WTF **)(v3 + 16);
      if (v119)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        WTF::fastFree(v119, v9);
      }
      WTF::fastFree((WTF *)v3, v9);
    }
  }
  v19 = *(_OWORD **)(a1 + 128);
  v20 = *(_QWORD *)(a1 + 24);
  if (v19)
  {
    *(_BYTE *)(a2 + 40) = 0;
    if (!v20)
    {
      *(_BYTE *)(a2 + 40) = 3;
      WebCore::buildQuadHighlight(v19, (unint64_t *)(a1 + 136), (unint64_t *)a2);
      goto LABEL_139;
    }
    v157 = (_BYTE *)(a2 + 40);
LABEL_20:
    v21 = *(_QWORD *)(a1 + 32);
    v162 = (unint64_t *)(a1 + 32);
    v22 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 & 0x8000000000000) != 0)
    {
      if ((v21 & 0x8000000000000) != 0
        && *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 4)
        && *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 8)
        && *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 0xC)
        && *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 0x10)
        && HIBYTE(v22) == HIBYTE(v21)
        && BYTE6(v22) == BYTE6(v21))
      {
        goto LABEL_24;
      }
      v142 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
      do
      {
        v143 = __ldaxr(v142);
        v144 = v143 - 1;
      }
      while (__stlxr(v144, v142));
      v4 = a3;
      if (!v144)
      {
        atomic_store(1u, v142);
        WTF::fastFree((WTF *)v142, (void *)a2);
      }
    }
    else if (v22 == v21 && (v21 & 0x8000000000000) == 0)
    {
      goto LABEL_24;
    }
    v23 = *v162;
    *(_QWORD *)a2 = *v162;
    if ((v23 & 0x8000000000000) != 0)
    {
      v122 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 + 1, v122));
    }
LABEL_24:
    v24 = *(_QWORD *)(a2 + 8);
    v25 = *(_QWORD *)(a1 + 40);
    if ((v24 & 0x8000000000000) != 0)
    {
      if ((v25 & 0x8000000000000) != 0
        && *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 4)
        && *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 8)
        && *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 0xC)
        && *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 0x10)
        && HIBYTE(v24) == HIBYTE(v25)
        && BYTE6(v24) == BYTE6(v25))
      {
        goto LABEL_30;
      }
      v145 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
      do
      {
        v146 = __ldaxr(v145);
        v147 = v146 - 1;
      }
      while (__stlxr(v147, v145));
      v4 = a3;
      if (!v147)
      {
        atomic_store(1u, v145);
        WTF::fastFree((WTF *)v145, (void *)a2);
      }
    }
    else if (v24 == v25 && (v25 & 0x8000000000000) == 0)
    {
      goto LABEL_30;
    }
    v27 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a2 + 8) = v27;
    if ((v27 & 0x8000000000000) != 0)
    {
      v124 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFLL);
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 + 1, v124));
    }
LABEL_30:
    v28 = *(_QWORD *)(a2 + 16);
    v29 = *(_QWORD *)(a1 + 48);
    if ((v28 & 0x8000000000000) != 0)
    {
      if ((v29 & 0x8000000000000) != 0
        && *(float *)((v28 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v29 & 0xFFFFFFFFFFFFLL) + 4)
        && *(float *)((v28 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v29 & 0xFFFFFFFFFFFFLL) + 8)
        && *(float *)((v28 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v29 & 0xFFFFFFFFFFFFLL) + 0xC)
        && *(float *)((v28 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v29 & 0xFFFFFFFFFFFFLL) + 0x10)
        && HIBYTE(v28) == HIBYTE(v29)
        && BYTE6(v28) == BYTE6(v29))
      {
        goto LABEL_36;
      }
      v148 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFLL);
      do
      {
        v149 = __ldaxr(v148);
        v150 = v149 - 1;
      }
      while (__stlxr(v150, v148));
      v4 = a3;
      if (!v150)
      {
        atomic_store(1u, v148);
        WTF::fastFree((WTF *)v148, (void *)a2);
      }
    }
    else if (v28 == v29 && (v29 & 0x8000000000000) == 0)
    {
      goto LABEL_36;
    }
    v31 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a2 + 16) = v31;
    if ((v31 & 0x8000000000000) != 0)
    {
      v126 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFLL);
      do
        v127 = __ldaxr(v126);
      while (__stlxr(v127 + 1, v126));
    }
LABEL_36:
    v32 = *(_QWORD *)(a2 + 24);
    v33 = *(_QWORD *)(a1 + 56);
    if ((v32 & 0x8000000000000) != 0)
    {
      if ((v33 & 0x8000000000000) != 0
        && *(float *)((v32 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v33 & 0xFFFFFFFFFFFFLL) + 4)
        && *(float *)((v32 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v33 & 0xFFFFFFFFFFFFLL) + 8)
        && *(float *)((v32 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v33 & 0xFFFFFFFFFFFFLL) + 0xC)
        && *(float *)((v32 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v33 & 0xFFFFFFFFFFFFLL) + 0x10)
        && HIBYTE(v32) == HIBYTE(v33)
        && BYTE6(v32) == BYTE6(v33))
      {
        goto LABEL_42;
      }
      v151 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFLL);
      do
      {
        v152 = __ldaxr(v151);
        v153 = v152 - 1;
      }
      while (__stlxr(v153, v151));
      v4 = a3;
      if (!v153)
      {
        atomic_store(1u, v151);
        WTF::fastFree((WTF *)v151, (void *)a2);
      }
    }
    else if (v32 == v33 && (v33 & 0x8000000000000) == 0)
    {
      goto LABEL_42;
    }
    v35 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 24) = v35;
    if ((v35 & 0x8000000000000) != 0)
    {
      v128 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFLL);
      do
        v129 = __ldaxr(v128);
      while (__stlxr(v129 + 1, v128));
    }
LABEL_42:
    v36 = *(_QWORD *)(a2 + 32);
    v37 = *(_QWORD *)(a1 + 64);
    if ((v36 & 0x8000000000000) != 0)
    {
      if ((v37 & 0x8000000000000) == 0
        || *(float *)((v36 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v37 & 0xFFFFFFFFFFFFLL) + 4)
        || *(float *)((v36 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v37 & 0xFFFFFFFFFFFFLL) + 8)
        || *(float *)((v36 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v37 & 0xFFFFFFFFFFFFLL) + 0xC)
        || *(float *)((v36 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v37 & 0xFFFFFFFFFFFFLL) + 0x10)
        || HIBYTE(v36) != HIBYTE(v37)
        || BYTE6(v36) != BYTE6(v37))
      {
        v154 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFLL);
        do
        {
          v155 = __ldaxr(v154);
          v156 = v155 - 1;
        }
        while (__stlxr(v156, v154));
        v4 = a3;
        if (!v156)
        {
          atomic_store(1u, v154);
          WTF::fastFree((WTF *)v154, (void *)a2);
        }
        goto LABEL_47;
      }
    }
    else if (v36 != v37 || (v37 & 0x8000000000000) != 0)
    {
LABEL_47:
      v39 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a2 + 32) = v39;
      if ((v39 & 0x8000000000000) != 0)
      {
        v130 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFLL);
        do
          v131 = __ldaxr(v130);
        while (__stlxr(v131 + 1, v130));
      }
    }
    *(_BYTE *)(a2 + 96) = *(_BYTE *)(a1 + 73);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24)))
    {
      v40 = 0;
      v159 = (_QWORD *)(a2 + 64);
      v160 = (_QWORD *)(a2 + 48);
      v158 = (_QWORD *)(a2 + 80);
      do
      {
        v41 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24), v40);
        v169 = 0;
        *(_OWORD *)v167 = 0u;
        v168 = 0u;
        v170 = 1;
        v171 = 0u;
        v172 = 0u;
        v173 = 0u;
        v174 = 1;
        WebCore::buildNodeHighlight(*(_QWORD *)(v41 + 64), v162, (unint64_t *)v167, v4);
        if (v170 == 1)
        {
          v43 = HIDWORD(v171);
          if (HIDWORD(v171))
          {
            v3 = v171;
            v44 = *(unsigned int *)(a2 + 60);
            v45 = v44 + HIDWORD(v171);
            if (v45 > *(unsigned int *)(a2 + 56))
            {
              WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v160, v44 + HIDWORD(v171));
              v44 = *(unsigned int *)(a2 + 60);
              if (v45 < v44)
              {
                __break(0xC471u);
                JUMPOUT(0x195DD63ECLL);
              }
            }
            v46 = (_OWORD *)(*v160 + 32 * v44);
            v47 = 32 * v43;
            do
            {
              v48 = *(_OWORD *)v3;
              v49 = *(_OWORD *)(v3 + 16);
              v3 += 32;
              *v46 = v48;
              v46[1] = v49;
              v46 += 2;
              v47 -= 32;
            }
            while (v47);
            *(_DWORD *)(a2 + 60) = v45;
            v4 = a3;
          }
        }
        if (*(_BYTE *)(a1 + 96))
        {
          v50 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v41);
          if (v50)
          {
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 + 1, v50));
          }
          v163 = (WTF *)v50;
          if (!*(_BYTE *)(a1 + 96))
            goto LABEL_180;
          v3 = *(_QWORD *)(a1 + 80);
          v164 = v3;
          if ((v3 & 0x8000000000000) != 0)
          {
            v72 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
            do
              v73 = __ldaxr(v72);
            while (__stlxr(v73 + 1, v72));
            v3 = v164;
            v52 = v164 & 0x8000000000000;
          }
          else
          {
            v52 = 0;
          }
          v165 = *(_DWORD *)(a1 + 88);
          v166 = *(_BYTE *)(a1 + 92);
          WebCore::InspectorOverlay::buildGridOverlay((uint64_t)v175, (WebCore::InspectorOverlay *)a1, (uint64_t)&v163, 1);
          if (v52)
          {
            v76 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
            do
            {
              v77 = __ldaxr(v76);
              v78 = v77 - 1;
            }
            while (__stlxr(v78, v76));
            if (!v78)
            {
              atomic_store(1u, v76);
              WTF::fastFree((WTF *)v76, v42);
            }
          }
          v53 = v163;
          v163 = 0;
          if (v53)
          {
            do
            {
              v54 = __ldaxr((unsigned int *)v53);
              v55 = v54 - 1;
            }
            while (__stlxr(v55, (unsigned int *)v53));
            if (!v55)
            {
              atomic_store(1u, (unsigned int *)v53);
              v68 = *((unsigned int *)v53 + 7);
              if ((_DWORD)v68)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v53 + 2), (WTF::StringImpl *)(*((_QWORD *)v53 + 2) + 32 * v68));
              v69 = (WTF *)*((_QWORD *)v53 + 2);
              if (v69)
              {
                *((_QWORD *)v53 + 2) = 0;
                *((_DWORD *)v53 + 6) = 0;
                WTF::fastFree(v69, v42);
              }
              WTF::fastFree(v53, v42);
            }
          }
          v4 = a3;
          if (v176)
          {
            v56 = *(unsigned int *)(a2 + 76);
            if ((_DWORD)v56 == *(_DWORD *)(a2 + 72))
            {
              v57 = (uint64_t *)WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v159, v56 + 1, (unint64_t)v175);
              v58 = *(_QWORD *)(a2 + 64) + 72 * *(unsigned int *)(a2 + 76);
            }
            else
            {
              v58 = *v159 + 72 * v56;
              v57 = (uint64_t *)v175;
            }
            WebCore::InspectorOverlayHighlight::GridHighlightOverlay::GridHighlightOverlay(v58, v57);
            ++*(_DWORD *)(a2 + 76);
            if (v176)
              WebCore::InspectorOverlayHighlight::GridHighlightOverlay::~GridHighlightOverlay((WebCore::InspectorOverlayHighlight::GridHighlightOverlay *)v175, v42);
          }
        }
        if (*(_BYTE *)(a1 + 120))
        {
          v59 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v41);
          if (v59)
          {
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 + 1, v59));
          }
          v163 = (WTF *)v59;
          if (!*(_BYTE *)(a1 + 120))
            goto LABEL_180;
          v3 = *(_QWORD *)(a1 + 104);
          v164 = v3;
          if ((v3 & 0x8000000000000) != 0)
          {
            v74 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 + 1, v74));
            v3 = v164;
            v61 = v164 & 0x8000000000000;
          }
          else
          {
            v61 = 0;
          }
          LOBYTE(v165) = *(_BYTE *)(a1 + 112);
          WebCore::InspectorOverlay::buildFlexOverlay(v175, (WebCore::InspectorOverlay *)a1, (uint64_t)&v163);
          if (v61)
          {
            v79 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
            do
            {
              v80 = __ldaxr(v79);
              v81 = v80 - 1;
            }
            while (__stlxr(v81, v79));
            v4 = a3;
            if (!v81)
            {
              atomic_store(1u, v79);
              WTF::fastFree((WTF *)v79, v42);
            }
          }
          v62 = v163;
          v163 = 0;
          if (v62)
          {
            do
            {
              v63 = __ldaxr((unsigned int *)v62);
              v64 = v63 - 1;
            }
            while (__stlxr(v64, (unsigned int *)v62));
            if (!v64)
            {
              atomic_store(1u, (unsigned int *)v62);
              v70 = *((unsigned int *)v62 + 7);
              if ((_DWORD)v70)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v62 + 2), (WTF::StringImpl *)(*((_QWORD *)v62 + 2) + 32 * v70));
              v71 = (WTF *)*((_QWORD *)v62 + 2);
              if (v71)
              {
                *((_QWORD *)v62 + 2) = 0;
                *((_DWORD *)v62 + 6) = 0;
                WTF::fastFree(v71, v42);
              }
              WTF::fastFree(v62, v42);
            }
          }
          if (v177)
          {
            v65 = *(unsigned int *)(a2 + 92);
            if ((_DWORD)v65 == *(_DWORD *)(a2 + 88))
            {
              v66 = (uint64_t *)WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v158, v65 + 1, (unint64_t)v175);
              v67 = *(_QWORD *)(a2 + 80) + 136 * *(unsigned int *)(a2 + 92);
            }
            else
            {
              v67 = *v158 + 136 * v65;
              v66 = (uint64_t *)v175;
            }
            WebCore::InspectorOverlayHighlight::FlexHighlightOverlay::FlexHighlightOverlay(v67, v66);
            ++*(_DWORD *)(a2 + 92);
            if (v177)
              WebCore::InspectorOverlayHighlight::FlexHighlightOverlay::~FlexHighlightOverlay((WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *)v175, v42);
          }
        }
        WebCore::InspectorOverlayHighlight::~InspectorOverlayHighlight((WebCore::InspectorOverlayHighlight *)v167, v42);
        v40 = (v40 + 1);
      }
      while (v40 < (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24)));
    }
    *v157 = 2;
    goto LABEL_139;
  }
  if (v20)
  {
    *(_BYTE *)(a2 + 40) = 0;
    v157 = (_BYTE *)(a2 + 40);
    goto LABEL_20;
  }
  if (!*(_DWORD *)(a1 + 284) && !*(_DWORD *)(a1 + 300))
    return;
  *(_BYTE *)(a2 + 40) = 0;
LABEL_139:
  v96 = *(_DWORD *)(a1 + 284);
  if (v96)
  {
    v97 = *(_QWORD *)(a1 + 272);
    v98 = v97 + 24 * v96;
    do
    {
      if (!*(_BYTE *)(a1 + 96))
        goto LABEL_152;
      if (!*(_QWORD *)v97)
        goto LABEL_152;
      v99 = *(_QWORD *)(*(_QWORD *)v97 + 8);
      if (!v99)
        goto LABEL_152;
      v100 = *(_QWORD *)(a1 + 24);
      if (v100 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v100 + 16))(*(_QWORD *)(a1 + 24)))
      {
        v101 = 0;
        while ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v100 + 24))(v100, v101) != v99)
        {
          v101 = (v101 + 1);
          if (v101 >= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v100 + 16))(v100))
            goto LABEL_149;
        }
        goto LABEL_158;
      }
LABEL_149:
      v102 = *(_QWORD *)v97;
      if (*(_QWORD *)v97)
        v102 = *(_QWORD *)(v102 + 8);
      if (v102 != *(_QWORD *)(a1 + 16))
      {
LABEL_152:
        WebCore::InspectorOverlay::buildGridOverlay((uint64_t)v175, (WebCore::InspectorOverlay *)a1, v97, 1);
        if (v176)
        {
          v103 = *(unsigned int *)(a2 + 76);
          if ((_DWORD)v103 == *(_DWORD *)(a2 + 72))
          {
            v104 = (uint64_t *)WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 64, v103 + 1, (unint64_t)v175);
            v105 = *(_QWORD *)(a2 + 64) + 72 * *(unsigned int *)(a2 + 76);
          }
          else
          {
            v105 = *(_QWORD *)(a2 + 64) + 72 * v103;
            v104 = (uint64_t *)v175;
          }
          WebCore::InspectorOverlayHighlight::GridHighlightOverlay::GridHighlightOverlay(v105, v104);
          ++*(_DWORD *)(a2 + 76);
          if (v176)
            WebCore::InspectorOverlayHighlight::GridHighlightOverlay::~GridHighlightOverlay((WebCore::InspectorOverlayHighlight::GridHighlightOverlay *)v175, v106);
        }
      }
LABEL_158:
      v97 += 24;
    }
    while (v97 != v98);
  }
  v107 = *(_DWORD *)(a1 + 300);
  if (v107)
  {
    v108 = *(_QWORD *)(a1 + 288);
    v109 = v108 + 24 * v107;
    do
    {
      if (!*(_BYTE *)(a1 + 120))
        goto LABEL_172;
      if (!*(_QWORD *)v108)
        goto LABEL_172;
      v110 = *(_QWORD *)(*(_QWORD *)v108 + 8);
      if (!v110)
        goto LABEL_172;
      v111 = *(_QWORD *)(a1 + 24);
      if (v111 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v111 + 16))(*(_QWORD *)(a1 + 24)))
      {
        v112 = 0;
        while ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v111 + 24))(v111, v112) != v110)
        {
          v112 = (v112 + 1);
          if (v112 >= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v111 + 16))(v111))
            goto LABEL_169;
        }
        goto LABEL_178;
      }
LABEL_169:
      v113 = *(_QWORD *)v108;
      if (*(_QWORD *)v108)
        v113 = *(_QWORD *)(v113 + 8);
      if (v113 != *(_QWORD *)(a1 + 16))
      {
LABEL_172:
        WebCore::InspectorOverlay::buildFlexOverlay(v175, (WebCore::InspectorOverlay *)a1, v108);
        if (v177)
        {
          v114 = *(unsigned int *)(a2 + 92);
          if ((_DWORD)v114 == *(_DWORD *)(a2 + 88))
          {
            v115 = (uint64_t *)WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 80, v114 + 1, (unint64_t)v175);
            v116 = *(_QWORD *)(a2 + 80) + 136 * *(unsigned int *)(a2 + 92);
          }
          else
          {
            v116 = *(_QWORD *)(a2 + 80) + 136 * v114;
            v115 = (uint64_t *)v175;
          }
          WebCore::InspectorOverlayHighlight::FlexHighlightOverlay::FlexHighlightOverlay(v116, v115);
          ++*(_DWORD *)(a2 + 92);
          if (v177)
            WebCore::InspectorOverlayHighlight::FlexHighlightOverlay::~FlexHighlightOverlay((WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *)v175, v117);
        }
      }
LABEL_178:
      v108 += 24;
    }
    while (v108 != v109);
  }
}

void WebCore::buildNodeHighlight(uint64_t a1, unint64_t *a2, unint64_t *a3, int a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v30;
  WebCore::ScrollView *v31;
  uint64_t v32;
  WebCore::RenderObject *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  WebCore::LegacyInlineBox *v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  float v73;
  double v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  unsigned int v94;
  int v95;
  int v96;
  int v97;
  unsigned int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  unsigned int v104;
  int v105;
  int v106;
  unsigned int v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  BOOL v114;
  _QWORD *v115;
  uint64_t v116;
  __int128 *v117;
  _OWORD *v118;
  __int128 v119;
  __int128 v120;
  int v121;
  uint64_t v122;
  __int128 *v123;
  _OWORD *v124;
  __int128 v125;
  __int128 v126;
  int v127;
  uint64_t v128;
  __int128 *v129;
  _OWORD *v130;
  __int128 v131;
  __int128 v132;
  int v133;
  uint64_t v134;
  __int128 *v135;
  _OWORD *v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  WebCore::FloatPoint *v140;
  uint64_t v141;
  unsigned int *v142;
  unsigned int v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int *v150;
  unsigned int v151;
  unsigned __int8 *v152;
  WebCore::RenderBox *v153;
  int v154;
  unsigned int *v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int *v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int *v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int *v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int *v167;
  unsigned int v168;
  unsigned int v169;
  int v170;
  int v171;
  WebCore::ScrollView *v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  unsigned int v183;
  unsigned int v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  _OWORD v199[2];

  v4 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a1 & 0xFFFFFFFFFFFFLL) == 0)
    return;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFLL) + 0x20);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      if ((*(_BYTE *)(*(_QWORD *)(v9 + 104) + 239) & 0x18) != 0)
        return;
    }
  }
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFLL) + 0x18) + 8) + 40) + 8)
                  + 528);
  if (!v10)
    return;
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
    return;
  v12 = *a3;
  v13 = *a2;
  if ((*a3 & 0x8000000000000) != 0)
  {
    if ((v13 & 0x8000000000000) != 0
      && *(float *)((v12 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v12 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v12 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v12 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v12) == HIBYTE(v13)
      && BYTE6(v12) == BYTE6(v13))
    {
      goto LABEL_11;
    }
    v155 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v156 = __ldaxr(v155);
      v157 = v156 - 1;
    }
    while (__stlxr(v157, v155));
    if (!v157)
    {
      atomic_store(1u, v155);
      WTF::fastFree((WTF *)v155, a2);
    }
  }
  else if (v12 == v13 && (v13 & 0x8000000000000) == 0)
  {
    goto LABEL_11;
  }
  v14 = *a2;
  *a3 = *a2;
  if ((v14 & 0x8000000000000) != 0)
  {
    v150 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 + 1, v150));
  }
LABEL_11:
  v15 = a3[1];
  v16 = a2[1];
  if ((v15 & 0x8000000000000) != 0)
  {
    if ((v16 & 0x8000000000000) != 0
      && *(float *)((v15 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v15 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v15 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v15 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v15) == HIBYTE(v16)
      && BYTE6(v15) == BYTE6(v16))
    {
      goto LABEL_17;
    }
    v158 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
    do
    {
      v159 = __ldaxr(v158);
      v160 = v159 - 1;
    }
    while (__stlxr(v160, v158));
    if (!v160)
    {
      atomic_store(1u, v158);
      WTF::fastFree((WTF *)v158, a2);
    }
  }
  else if (v15 == v16 && (v16 & 0x8000000000000) == 0)
  {
    goto LABEL_17;
  }
  v18 = a2[1];
  a3[1] = v18;
  if ((v18 & 0x8000000000000) != 0)
  {
    v142 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 + 1, v142));
  }
LABEL_17:
  v19 = a3[2];
  v20 = a2[2];
  if ((v19 & 0x8000000000000) != 0)
  {
    if ((v20 & 0x8000000000000) != 0
      && *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v19) == HIBYTE(v20)
      && BYTE6(v19) == BYTE6(v20))
    {
      goto LABEL_23;
    }
    v161 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
    do
    {
      v162 = __ldaxr(v161);
      v163 = v162 - 1;
    }
    while (__stlxr(v163, v161));
    if (!v163)
    {
      atomic_store(1u, v161);
      WTF::fastFree((WTF *)v161, a2);
    }
  }
  else if (v19 == v20 && (v20 & 0x8000000000000) == 0)
  {
    goto LABEL_23;
  }
  v22 = a2[2];
  a3[2] = v22;
  if ((v22 & 0x8000000000000) != 0)
  {
    v144 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 + 1, v144));
  }
LABEL_23:
  v23 = a3[3];
  v24 = a2[3];
  if ((v23 & 0x8000000000000) != 0)
  {
    if ((v24 & 0x8000000000000) != 0
      && *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v23) == HIBYTE(v24)
      && BYTE6(v23) == BYTE6(v24))
    {
      goto LABEL_29;
    }
    v164 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
    do
    {
      v165 = __ldaxr(v164);
      v166 = v165 - 1;
    }
    while (__stlxr(v166, v164));
    if (!v166)
    {
      atomic_store(1u, v164);
      WTF::fastFree((WTF *)v164, a2);
    }
  }
  else if (v23 == v24 && (v24 & 0x8000000000000) == 0)
  {
    goto LABEL_29;
  }
  v26 = a2[3];
  a3[3] = v26;
  if ((v26 & 0x8000000000000) != 0)
  {
    v146 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFLL);
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 + 1, v146));
  }
LABEL_29:
  v27 = a3[4];
  v28 = a2[4];
  if ((v27 & 0x8000000000000) != 0)
  {
    if ((v28 & 0x8000000000000) != 0
      && *(float *)((v27 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v28 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v27 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v28 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v27 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v28 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v27 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v28 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v27) == HIBYTE(v28)
      && BYTE6(v27) == BYTE6(v28))
    {
      goto LABEL_35;
    }
    v167 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFLL);
    do
    {
      v168 = __ldaxr(v167);
      v169 = v168 - 1;
    }
    while (__stlxr(v169, v167));
    if (!v169)
    {
      atomic_store(1u, v167);
      WTF::fastFree((WTF *)v167, a2);
    }
  }
  else if (v27 == v28 && (v28 & 0x8000000000000) == 0)
  {
    goto LABEL_35;
  }
  v30 = a2[4];
  a3[4] = v30;
  if ((v30 & 0x8000000000000) != 0)
  {
    v148 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFLL);
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 + 1, v148));
  }
LABEL_35:
  *((_BYTE *)a3 + 96) = *((_BYTE *)a2 + 41);
  v31 = *(WebCore::ScrollView **)(v11 + 288);
  v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 24) + 8) + 160);
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 56))(v32);
  if ((*(_BYTE *)(v4 + 45) & 1) != 0
    || (v35 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8)) == 0
    || (*(_WORD *)(v35 + 28) & 0x20) == 0
    || (v36 = *(unsigned __int8 *)(v4 + 46), v36 == 83)
    || v36 == 103)
  {
    if ((*(_BYTE *)(v4 + 45) & 4) != 0)
    {
      v174 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1080))(v4);
      v171 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1104))(v4);
      v182 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1088))(v4);
      v170 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1096))(v4);
      v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1016))(v4);
      v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1000))(v4);
      v87 = WebCore::RenderBox::clientWidth((WebCore::RenderBox *)v4);
      v88 = WebCore::RenderBox::clientHeight((WebCore::RenderBox *)v4);
      v89 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 944))(v4);
      v90 = v85 + v89;
      if (__OFADD__(v85, v89))
        v90 = (v85 >> 31) + 0x7FFFFFFF;
      v178 = v90;
      v91 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 928))(v4);
      v92 = v86 + v91;
      if (__OFADD__(v86, v91))
        v92 = (v86 >> 31) + 0x7FFFFFFF;
      v177 = v92;
      v93 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 944))(v4);
      v94 = v87 - v93;
      if (__OFSUB__(v87, v93))
        v94 = (v87 >> 31) + 0x7FFFFFFF;
      v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 952))(v4);
      v96 = v94 - v95;
      if (__OFSUB__(v94, v95))
        v96 = (v94 >> 31) + 0x7FFFFFFF;
      v175 = v96;
      v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 928))(v4);
      v98 = v88 - v97;
      v172 = v31;
      if (__OFSUB__((_DWORD)v88, v97))
        v98 = (v88 >> 31) + 0x7FFFFFFF;
      v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 936))(v4);
      v100 = v98 - v99;
      if (__OFSUB__(v98, v99))
        v100 = (v98 >> 31) + 0x7FFFFFFF;
      v101 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1016))(v4);
      v183 = v85 - v101;
      if (__OFSUB__(v85, v101))
        v183 = (v85 >> 31) + 0x7FFFFFFF;
      v102 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1000))(v4);
      v84 = v86 - v102;
      v179 = v85;
      if (__OFSUB__(v86, v102))
        v84 = (v86 >> 31) + 0x7FFFFFFF;
      v103 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1016))(v4);
      v104 = v87 + v103;
      if (__OFADD__(v87, v103))
        v104 = (v87 >> 31) + 0x7FFFFFFF;
      v105 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1024))(v4);
      v184 = v104 + v105;
      v180 = v86;
      if (__OFADD__(v104, v105))
        v184 = (v104 >> 31) + 0x7FFFFFFF;
      v106 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1000))(v4);
      v107 = v88 + v106;
      if (__OFADD__((_DWORD)v88, v106))
        v107 = (v88 >> 31) + 0x7FFFFFFF;
      v108 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1008))(v4);
      v83 = v107 + v108;
      if (__OFADD__(v107, v108))
        v83 = (v107 >> 31) + 0x7FFFFFFF;
      v80 = v177;
      v81 = v100;
      v109 = v174;
      v110 = v183 - v170;
      v31 = v172;
      if (__OFSUB__(v183, v170))
        v110 = (v183 >> 31) + 0x7FFFFFFF;
      v43 = v84 - v174;
      v173 = v110;
      if (__OFSUB__(v84, v109))
        v43 = (v84 >> 31) + 0x7FFFFFFF;
      v111 = v87;
      v112 = v184 + v170;
      if (__OFADD__(v184, v170))
        v112 = (v184 >> 31) + 0x7FFFFFFF;
      v82 = v112 + v171;
      if (__OFADD__(v112, v171))
        v82 = (v112 >> 31) + 0x7FFFFFFF;
      v76 = v111 | (v88 << 32);
      v113 = v83 + v109;
      if (__OFADD__(v83, v109))
        v113 = (v83 >> 31) + 0x7FFFFFFF;
      v114 = __OFADD__(v113, v182);
      v181 = v113 + v182;
      if (v114)
        v181 = (v113 >> 31) + 0x7FFFFFFF;
    }
    else
    {
      if ((*(_BYTE *)(v4 + 45) & 0x20) == 0)
        return;
      v37 = WebCore::RenderInline::linesBoundingBox((WebCore::LegacyInlineBox **)v4, v33);
      v40 = (_DWORD)v37 << 6;
      if ((int)v37 < -33554432)
        v40 = 0x80000000;
      if ((int)v37 <= 0x1FFFFFF)
        v41 = v40;
      else
        v41 = 0x7FFFFFFF;
      v42 = HIDWORD(v37) << 6;
      if (SHIDWORD(v37) < -33554432)
        v42 = 0x80000000;
      if (SHIDWORD(v37) <= 0x1FFFFFF)
        v43 = v42;
      else
        v43 = 0x7FFFFFFF;
      v44 = v38 << 6;
      if (v38 < -33554432)
        v44 = 0x80000000;
      if (v38 > 0x1FFFFFF)
        v44 = 0x7FFFFFFF;
      v184 = v44;
      v45 = v39 << 6;
      if (v39 < -33554432)
        v45 = 0x80000000;
      if (v39 <= 0x1FFFFFF)
        v46 = v45;
      else
        v46 = 0x7FFFFFFF;
      v181 = v46;
      v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1016))(v4);
      v183 = v41;
      v48 = v41 + v47;
      if (__OFADD__(v41, v47))
        v48 = (v41 >> 31) + 0x7FFFFFFF;
      v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1000))(v4);
      v180 = v43 + v49;
      if (__OFADD__(v43, v49))
        v180 = (v43 >> 31) + 0x7FFFFFFF;
      v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1016))(v4);
      v51 = v184 - v50;
      if (__OFSUB__(v184, v50))
        v51 = (v184 >> 31) + 0x7FFFFFFF;
      v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1024))(v4);
      v53 = v51 - v52;
      v179 = v48;
      if (__OFSUB__(v51, v52))
        v53 = (v51 >> 31) + 0x7FFFFFFF;
      v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1000))(v4);
      v55 = v181 - v54;
      if (__OFSUB__(v181, v54))
        v55 = (v181 >> 31) + 0x7FFFFFFF;
      v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1008))(v4);
      v57 = v55 - v56;
      if (__OFSUB__(v55, v56))
        v57 = (v55 >> 31) + 0x7FFFFFFF;
      v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 944))(v4);
      v59 = v179 + v58;
      if (__OFADD__(v179, v58))
        v59 = (v179 >> 31) + 0x7FFFFFFF;
      v178 = v59;
      v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 928))(v4);
      v61 = v180 + v60;
      if (__OFADD__(v180, v60))
        v61 = (v180 >> 31) + 0x7FFFFFFF;
      v176 = v61;
      v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 944))(v4);
      v63 = v53 - v62;
      if (__OFSUB__(v53, v62))
        v63 = (v53 >> 31) + 0x7FFFFFFF;
      v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 952))(v4);
      v65 = v63 - v64;
      if (__OFSUB__(v63, v64))
        v65 = (v63 >> 31) + 0x7FFFFFFF;
      v175 = v65;
      v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 928))(v4);
      v67 = v57 - v66;
      if (__OFSUB__((_DWORD)v57, v66))
        v67 = (v57 >> 31) + 0x7FFFFFFF;
      v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 936))(v4);
      v69 = v67 - v68;
      if (__OFSUB__(v67, v68))
        v69 = (v67 >> 31) + 0x7FFFFFFF;
      v70 = v53;
      v71 = *(_QWORD *)(*(_QWORD *)(v4 + 88) + 24);
      v72 = *(unsigned __int8 *)(v71 + 68);
      if (v72 == 4)
      {
        v73 = *(float *)(v71 + 64);
        if (!*(_BYTE *)(v71 + 70))
          v73 = (float)SLODWORD(v73);
        v74 = v73 * 64.0;
        if (v74 >= 2147483650.0)
        {
          v72 = 0x7FFFFFFF;
        }
        else if (v74 <= -2147483650.0)
        {
          v72 = 0x80000000;
        }
        else
        {
          v72 = (int)v74;
        }
      }
      else if (*(_BYTE *)(v71 + 68))
      {
        if ((v72 & 0xFFFFFFF7) == 3)
        {
          v152 = (unsigned __int8 *)(v71 + 64);
          v153 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v4);
          v154 = WebCore::RenderBox::contentLogicalWidth(v153);
          v72 = WebCore::minimumValueForLength(v152, v154 & ~(v154 >> 31));
        }
        else
        {
          v72 = 0;
        }
      }
      v75 = v183 - v72;
      if (__OFSUB__(v183, v72))
        v75 = (v183 >> 31) + 0x7FFFFFFF;
      v173 = v75;
      v76 = v70 | (v57 << 32);
      v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1096))(v4);
      v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1104))(v4);
      v79 = v77 + v78;
      if (__OFADD__(v77, v78))
        v79 = (v77 >> 31) + 0x7FFFFFFF;
      v80 = v176;
      v81 = v69;
      v82 = v184 + v79;
      if (__OFADD__(v184, v79))
        v82 = (v184 >> 31) + 0x7FFFFFFF;
      v83 = v181;
      v84 = v43;
    }
    *(float *)&v197 = (float)v178 * 0.015625;
    *((float *)&v197 + 1) = (float)v80 * 0.015625;
    *((float *)&v197 + 2) = (float)((float)v175 * 0.015625) + *(float *)&v197;
    *((float *)&v197 + 3) = *((float *)&v197 + 1);
    *(float *)&v198 = *((float *)&v197 + 2);
    *((float *)&v198 + 1) = (float)((float)v81 * 0.015625) + *((float *)&v197 + 1);
    *((float *)&v198 + 2) = *(float *)&v197;
    *((float *)&v198 + 3) = *((float *)&v198 + 1);
    WebCore::RenderObject::localToContainerQuad(v4, (float *)&v197, 0, 2u, v199);
    *(float *)&v195 = (float)v179 * 0.015625;
    *((float *)&v195 + 1) = (float)v180 * 0.015625;
    *((float *)&v195 + 2) = (float)((float)(int)v76 * 0.015625) + *(float *)&v195;
    *((float *)&v195 + 3) = *((float *)&v195 + 1);
    *(float *)&v196 = *((float *)&v195 + 2);
    *((float *)&v196 + 1) = *((float *)&v195 + 1) + (float)((float)SHIDWORD(v76) * 0.015625);
    *((float *)&v196 + 2) = *(float *)&v195;
    *((float *)&v196 + 3) = *((float *)&v196 + 1);
    WebCore::RenderObject::localToContainerQuad(v4, (float *)&v195, 0, 2u, &v197);
    *(float *)&v193 = (float)(int)v183 * 0.015625;
    *((float *)&v193 + 1) = (float)v84 * 0.015625;
    *((float *)&v193 + 2) = (float)((float)(int)v184 * 0.015625) + *(float *)&v193;
    *((float *)&v193 + 3) = *((float *)&v193 + 1);
    *(float *)&v194 = *((float *)&v193 + 2);
    *((float *)&v194 + 1) = (float)((float)v83 * 0.015625) + *((float *)&v193 + 1);
    *((float *)&v194 + 2) = *(float *)&v193;
    *((float *)&v194 + 3) = *((float *)&v194 + 1);
    WebCore::RenderObject::localToContainerQuad(v4, (float *)&v193, 0, 2u, &v195);
    v185 = (float)v173 * 0.015625;
    v186 = (float)v43 * 0.015625;
    v187 = (float)((float)v82 * 0.015625) + v185;
    v188 = v186;
    v189 = v187;
    v190 = (float)((float)v181 * 0.015625) + v186;
    v191 = v185;
    v192 = v190;
    WebCore::RenderObject::localToContainerQuad(v4, &v185, 0, 2u, &v193);
    WebCore::contentsQuadToCoordinateSystem(v34, v31, (WebCore::FloatPoint *)v199, a4);
    WebCore::contentsQuadToCoordinateSystem(v34, v31, (WebCore::FloatPoint *)&v197, a4);
    WebCore::contentsQuadToCoordinateSystem(v34, v31, (WebCore::FloatPoint *)&v195, a4);
    WebCore::contentsQuadToCoordinateSystem(v34, v31, (WebCore::FloatPoint *)&v193, a4);
    *((_BYTE *)a3 + 40) = 1;
    v115 = a3 + 6;
    v116 = *((unsigned int *)a3 + 15);
    if ((_DWORD)v116 == *((_DWORD *)a3 + 14))
    {
      v117 = (__int128 *)WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a3 + 6), v116 + 1, (unint64_t)&v193);
      v118 = (_OWORD *)(a3[6] + 32 * *((unsigned int *)a3 + 15));
      v119 = *v117;
      v120 = v117[1];
    }
    else
    {
      v118 = (_OWORD *)(*v115 + 32 * v116);
      v119 = v193;
      v120 = v194;
    }
    *v118 = v119;
    v118[1] = v120;
    v121 = *((_DWORD *)a3 + 14);
    v122 = (*((_DWORD *)a3 + 15) + 1);
    *((_DWORD *)a3 + 15) = v122;
    if ((_DWORD)v122 == v121)
    {
      v123 = (__int128 *)WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a3 + 6), v122 + 1, (unint64_t)&v195);
      v124 = (_OWORD *)(a3[6] + 32 * *((unsigned int *)a3 + 15));
      v125 = *v123;
      v126 = v123[1];
    }
    else
    {
      v124 = (_OWORD *)(*v115 + 32 * v122);
      v125 = v195;
      v126 = v196;
    }
    *v124 = v125;
    v124[1] = v126;
    v127 = *((_DWORD *)a3 + 14);
    v128 = (*((_DWORD *)a3 + 15) + 1);
    *((_DWORD *)a3 + 15) = v128;
    if ((_DWORD)v128 == v127)
    {
      v129 = (__int128 *)WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a3 + 6), v128 + 1, (unint64_t)&v197);
      v130 = (_OWORD *)(a3[6] + 32 * *((unsigned int *)a3 + 15));
      v131 = *v129;
      v132 = v129[1];
    }
    else
    {
      v130 = (_OWORD *)(*v115 + 32 * v128);
      v131 = v197;
      v132 = v198;
    }
    *v130 = v131;
    v130[1] = v132;
    v133 = *((_DWORD *)a3 + 14);
    v134 = (*((_DWORD *)a3 + 15) + 1);
    *((_DWORD *)a3 + 15) = v134;
    if ((_DWORD)v134 == v133)
    {
      v135 = (__int128 *)WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a3 + 6), v134 + 1, (unint64_t)v199);
      v136 = (_OWORD *)(a3[6] + 32 * *((unsigned int *)a3 + 15));
      v137 = *v135;
      v138 = v135[1];
    }
    else
    {
      v136 = (_OWORD *)(*v115 + 32 * v134);
      v137 = v199[0];
      v138 = v199[1];
    }
    *v136 = v137;
    v136[1] = v138;
    ++*((_DWORD *)a3 + 15);
  }
  else
  {
    *((_BYTE *)a3 + 40) = 3;
    (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v4 + 392))(v4, (uint64_t *)a3 + 6, 0);
    v139 = *((unsigned int *)a3 + 15);
    if ((_DWORD)v139)
    {
      v140 = (WebCore::FloatPoint *)a3[6];
      v141 = 32 * v139;
      do
      {
        WebCore::contentsQuadToCoordinateSystem(v34, v31, v140, a4);
        v140 = (WebCore::FloatPoint *)((char *)v140 + 32);
        v141 -= 32;
      }
      while (v141);
    }
  }
}

__int128 *WebCore::buildQuadHighlight(_OWORD *a1, unint64_t *a2, unint64_t *a3)
{
  _OWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  __int128 *result;
  uint64_t v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t *v55;
  unint64_t *v56;
  unint64_t *v57;
  unint64_t *v58;
  unint64_t *v59;
  _OWORD *v61;
  _OWORD *v62;
  _OWORD *v63;
  _OWORD *v64;

  v4 = a1;
  v5 = *a3;
  v6 = *a2;
  if ((*a3 & 0x8000000000000) != 0)
  {
    if ((v6 & 0x8000000000000) != 0
      && *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v5) == HIBYTE(v6)
      && BYTE6(v5) == BYTE6(v6))
    {
      goto LABEL_7;
    }
    v55 = a2;
    v40 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    do
    {
      v41 = __ldaxr(v40);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v40));
    v4 = a1;
    if (!v42)
    {
      atomic_store(1u, v40);
      WTF::fastFree((WTF *)v40, a2);
      a2 = v55;
      v4 = a1;
    }
  }
  else if (v5 == v6 && (v6 & 0x8000000000000) == 0)
  {
    goto LABEL_7;
  }
  v8 = *a2;
  *a3 = *a2;
  if ((v8 & 0x8000000000000) != 0)
  {
    v30 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 + 1, v30));
  }
LABEL_7:
  v9 = a3[1];
  v10 = a2[1];
  if ((v9 & 0x8000000000000) != 0)
  {
    if ((v10 & 0x8000000000000) != 0
      && *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v9) == HIBYTE(v10)
      && BYTE6(v9) == BYTE6(v10))
    {
      goto LABEL_13;
    }
    v56 = a2;
    v61 = v4;
    v43 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
    {
      atomic_store(1u, v43);
      WTF::fastFree((WTF *)v43, a2);
      a2 = v56;
      v4 = v61;
    }
  }
  else if (v9 == v10 && (v10 & 0x8000000000000) == 0)
  {
    goto LABEL_13;
  }
  v12 = a2[1];
  a3[1] = v12;
  if ((v12 & 0x8000000000000) != 0)
  {
    v32 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 + 1, v32));
  }
LABEL_13:
  v13 = a3[2];
  v14 = a2[2];
  if ((v13 & 0x8000000000000) != 0)
  {
    if ((v14 & 0x8000000000000) != 0
      && *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v14 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v14 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v14 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v14 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v13) == HIBYTE(v14)
      && BYTE6(v13) == BYTE6(v14))
    {
      goto LABEL_19;
    }
    v57 = a2;
    v62 = v4;
    v46 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
    {
      atomic_store(1u, v46);
      WTF::fastFree((WTF *)v46, a2);
      a2 = v57;
      v4 = v62;
    }
  }
  else if (v13 == v14 && (v14 & 0x8000000000000) == 0)
  {
    goto LABEL_19;
  }
  v16 = a2[2];
  a3[2] = v16;
  if ((v16 & 0x8000000000000) != 0)
  {
    v34 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
LABEL_19:
  v17 = a3[3];
  v18 = a2[3];
  if ((v17 & 0x8000000000000) != 0)
  {
    if ((v18 & 0x8000000000000) != 0
      && *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v18 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v18 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v18 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v18 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v17) == HIBYTE(v18)
      && BYTE6(v17) == BYTE6(v18))
    {
      goto LABEL_25;
    }
    v58 = a2;
    v63 = v4;
    v49 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
    do
    {
      v50 = __ldaxr(v49);
      v51 = v50 - 1;
    }
    while (__stlxr(v51, v49));
    if (!v51)
    {
      atomic_store(1u, v49);
      WTF::fastFree((WTF *)v49, a2);
      a2 = v58;
      v4 = v63;
    }
  }
  else if (v17 == v18 && (v18 & 0x8000000000000) == 0)
  {
    goto LABEL_25;
  }
  v20 = a2[3];
  a3[3] = v20;
  if ((v20 & 0x8000000000000) != 0)
  {
    v36 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
LABEL_25:
  v21 = a3[4];
  v22 = a2[4];
  if ((v21 & 0x8000000000000) != 0)
  {
    if ((v22 & 0x8000000000000) != 0
      && *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v21) == HIBYTE(v22)
      && BYTE6(v21) == BYTE6(v22))
    {
      goto LABEL_31;
    }
    v59 = a2;
    v64 = v4;
    v52 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
    do
    {
      v53 = __ldaxr(v52);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, v52));
    if (!v54)
    {
      atomic_store(1u, v52);
      WTF::fastFree((WTF *)v52, a2);
      a2 = v59;
      v4 = v64;
    }
  }
  else if (v21 == v22 && (v22 & 0x8000000000000) == 0)
  {
    goto LABEL_31;
  }
  v24 = a2[4];
  a3[4] = v24;
  if ((v24 & 0x8000000000000) != 0)
  {
    v38 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 + 1, v38));
  }
LABEL_31:
  *((_BYTE *)a3 + 96) = *((_BYTE *)a2 + 41);
  *((_BYTE *)a3 + 40) = 3;
  result = (__int128 *)(a3 + 6);
  v26 = *((unsigned int *)a3 + 15);
  if ((_DWORD)v26 == *((_DWORD *)a3 + 14))
  {
    result = (__int128 *)WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v26 + 1, (unint64_t)v4);
    v27 = (_OWORD *)(a3[6] + 32 * *((unsigned int *)a3 + 15));
    v28 = *result;
    v29 = result[1];
  }
  else
  {
    v27 = (_OWORD *)(*(_QWORD *)result + 32 * v26);
    v28 = *v4;
    v29 = v4[1];
  }
  *v27 = v28;
  v27[1] = v29;
  ++*((_DWORD *)a3 + 15);
  return result;
}

uint64_t WebCore::InspectorOverlay::hideHighlight(WebCore::InspectorOverlay *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v11;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  unint64_t v22;
  unint64_t v24;
  uint64_t result;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  __int128 v64;
  _OWORD v65[2];

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  v64 = 0u;
  memset(v65, 0, 26);
  v5 = *((_QWORD *)this + 4);
  if (v5)
  {
    if ((v5 & 0x8000000000000) != 0)
    {
      v28 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v28);
        WTF::fastFree((WTF *)v28, a2);
      }
    }
    v5 = *((_QWORD *)&v64 + 1);
    *((_QWORD *)this + 4) = v64;
    *(_QWORD *)&v64 = 0;
  }
  v6 = *((_QWORD *)this + 5);
  if ((v6 & 0x8000000000000) != 0)
  {
    if ((v5 & 0x8000000000000) == 0
      || *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v6) != HIBYTE(v5)
      || BYTE6(v6) != BYTE6(v5))
    {
      v40 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
      {
        atomic_store(1u, v40);
        WTF::fastFree((WTF *)v40, a2);
      }
      goto LABEL_13;
    }
  }
  else if (v6 != v5 || (v5 & 0x8000000000000) != 0)
  {
LABEL_13:
    *((_QWORD *)this + 5) = *((_QWORD *)&v64 + 1);
    *((_QWORD *)&v64 + 1) = 0;
  }
  v7 = *((_QWORD *)this + 6);
  if ((v7 & 0x8000000000000) != 0)
  {
    if ((*(_QWORD *)&v65[0] & 0x8000000000000) == 0
      || *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((*(_QWORD *)&v65[0] & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((*(_QWORD *)&v65[0] & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((*(_QWORD *)&v65[0] & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((*(_QWORD *)&v65[0] & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v7) != HIBYTE(*(_QWORD *)&v65[0])
      || BYTE6(v7) != BYTE6(v65[0]))
    {
      v43 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (!v45)
      {
        atomic_store(1u, v43);
        WTF::fastFree((WTF *)v43, a2);
      }
      goto LABEL_19;
    }
  }
  else if (v7 != *(_QWORD *)&v65[0] || (*(_QWORD *)&v65[0] & 0x8000000000000) != 0)
  {
LABEL_19:
    *((_QWORD *)this + 6) = *(_QWORD *)&v65[0];
    *(_QWORD *)&v65[0] = 0;
  }
  v9 = *((_QWORD *)this + 7);
  if ((v9 & 0x8000000000000) != 0)
  {
    if ((*((_QWORD *)&v65[0] + 1) & 0x8000000000000) == 0
      || *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((*((_QWORD *)&v65[0] + 1) & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((*((_QWORD *)&v65[0] + 1) & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((*((_QWORD *)&v65[0] + 1) & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((*((_QWORD *)&v65[0] + 1) & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v9) != HIBYTE(*((_QWORD *)&v65[0] + 1))
      || BYTE6(v9) != BYTE14(v65[0]))
    {
      v46 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        atomic_store(1u, v46);
        WTF::fastFree((WTF *)v46, a2);
      }
      goto LABEL_25;
    }
  }
  else if (v9 != *((_QWORD *)&v65[0] + 1) || (*((_QWORD *)&v65[0] + 1) & 0x8000000000000) != 0)
  {
LABEL_25:
    *((_QWORD *)this + 7) = *((_QWORD *)&v65[0] + 1);
    *((_QWORD *)&v65[0] + 1) = 0;
  }
  v11 = *((_QWORD *)this + 8);
  if ((v11 & 0x8000000000000) != 0)
  {
    if ((*(_QWORD *)&v65[1] & 0x8000000000000) == 0
      || *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((*(_QWORD *)&v65[1] & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((*(_QWORD *)&v65[1] & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((*(_QWORD *)&v65[1] & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((*(_QWORD *)&v65[1] & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v11) != HIBYTE(*(_QWORD *)&v65[1])
      || BYTE6(v11) != BYTE6(v65[1]))
    {
      v49 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        atomic_store(1u, v49);
        WTF::fastFree((WTF *)v49, a2);
      }
      goto LABEL_31;
    }
  }
  else if (v11 != *(_QWORD *)&v65[1] || (*(_QWORD *)&v65[1] & 0x8000000000000) != 0)
  {
LABEL_31:
    *((_QWORD *)this + 8) = *(_QWORD *)&v65[1];
    *(_QWORD *)&v65[1] = 0;
  }
  *((_WORD *)this + 36) = WORD4(v65[1]);
  WebCore::InspectorOverlayHighlight::Config::~Config((WebCore::InspectorOverlayHighlight::Config *)&v64, a2);
  if (*((_BYTE *)this + 96))
  {
    v14 = *((_QWORD *)this + 10);
    if ((v14 & 0x8000000000000) != 0)
    {
      v34 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        atomic_store(1u, v34);
        WTF::fastFree((WTF *)v34, v13);
      }
    }
    *((_BYTE *)this + 96) = 0;
  }
  if (*((_BYTE *)this + 120))
  {
    v15 = *((_QWORD *)this + 13);
    if ((v15 & 0x8000000000000) != 0)
    {
      v37 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        atomic_store(1u, v37);
        WTF::fastFree((WTF *)v37, v13);
      }
    }
    *((_BYTE *)this + 120) = 0;
  }
  *((_BYTE *)this + 307) = 0;
  v16 = (WTF *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v16)
    WTF::fastFree(v16, v13);
  v64 = 0u;
  memset(v65, 0, 26);
  v17 = *((_QWORD *)this + 17);
  if (v17)
  {
    if ((v17 & 0x8000000000000) != 0)
    {
      v31 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        atomic_store(1u, v31);
        WTF::fastFree((WTF *)v31, v13);
      }
    }
    v17 = *((_QWORD *)&v64 + 1);
    *((_QWORD *)this + 17) = v64;
    *(_QWORD *)&v64 = 0;
  }
  v18 = *((_QWORD *)this + 18);
  if ((v18 & 0x8000000000000) != 0)
  {
    if ((v17 & 0x8000000000000) == 0
      || *(float *)((v18 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v18 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v18 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v18 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v18) != HIBYTE(v17)
      || BYTE6(v18) != BYTE6(v17))
    {
      v52 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
      {
        atomic_store(1u, v52);
        WTF::fastFree((WTF *)v52, v13);
      }
      goto LABEL_48;
    }
  }
  else if (v18 != v17 || (v17 & 0x8000000000000) != 0)
  {
LABEL_48:
    *((_QWORD *)this + 18) = *((_QWORD *)&v64 + 1);
    *((_QWORD *)&v64 + 1) = 0;
  }
  v20 = *((_QWORD *)this + 19);
  if ((v20 & 0x8000000000000) != 0)
  {
    if ((*(_QWORD *)&v65[0] & 0x8000000000000) == 0
      || *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((*(_QWORD *)&v65[0] & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((*(_QWORD *)&v65[0] & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((*(_QWORD *)&v65[0] & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((*(_QWORD *)&v65[0] & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v20) != HIBYTE(*(_QWORD *)&v65[0])
      || BYTE6(v20) != BYTE6(v65[0]))
    {
      v55 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
      {
        atomic_store(1u, v55);
        WTF::fastFree((WTF *)v55, v13);
      }
      goto LABEL_54;
    }
  }
  else if (v20 != *(_QWORD *)&v65[0] || (*(_QWORD *)&v65[0] & 0x8000000000000) != 0)
  {
LABEL_54:
    *((_QWORD *)this + 19) = *(_QWORD *)&v65[0];
    *(_QWORD *)&v65[0] = 0;
  }
  v22 = *((_QWORD *)this + 20);
  if ((v22 & 0x8000000000000) != 0)
  {
    if ((*((_QWORD *)&v65[0] + 1) & 0x8000000000000) == 0
      || *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((*((_QWORD *)&v65[0] + 1) & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((*((_QWORD *)&v65[0] + 1) & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((*((_QWORD *)&v65[0] + 1) & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((*((_QWORD *)&v65[0] + 1) & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v22) != HIBYTE(*((_QWORD *)&v65[0] + 1))
      || BYTE6(v22) != BYTE14(v65[0]))
    {
      v58 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
      do
      {
        v59 = __ldaxr(v58);
        v60 = v59 - 1;
      }
      while (__stlxr(v60, v58));
      if (!v60)
      {
        atomic_store(1u, v58);
        WTF::fastFree((WTF *)v58, v13);
      }
      goto LABEL_60;
    }
  }
  else if (v22 != *((_QWORD *)&v65[0] + 1) || (*((_QWORD *)&v65[0] + 1) & 0x8000000000000) != 0)
  {
LABEL_60:
    *((_QWORD *)this + 20) = *((_QWORD *)&v65[0] + 1);
    *((_QWORD *)&v65[0] + 1) = 0;
  }
  v24 = *((_QWORD *)this + 21);
  if ((v24 & 0x8000000000000) != 0)
  {
    if ((*(_QWORD *)&v65[1] & 0x8000000000000) == 0
      || *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((*(_QWORD *)&v65[1] & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((*(_QWORD *)&v65[1] & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((*(_QWORD *)&v65[1] & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((*(_QWORD *)&v65[1] & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v24) != HIBYTE(*(_QWORD *)&v65[1])
      || BYTE6(v24) != BYTE6(v65[1]))
    {
      v61 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
      do
      {
        v62 = __ldaxr(v61);
        v63 = v62 - 1;
      }
      while (__stlxr(v63, v61));
      if (!v63)
      {
        atomic_store(1u, v61);
        WTF::fastFree((WTF *)v61, v13);
      }
      goto LABEL_66;
    }
  }
  else if (v24 != *(_QWORD *)&v65[1] || (*(_QWORD *)&v65[1] & 0x8000000000000) != 0)
  {
LABEL_66:
    *((_QWORD *)this + 21) = *(_QWORD *)&v65[1];
    *(_QWORD *)&v65[1] = 0;
  }
  *((_WORD *)this + 88) = WORD4(v65[1]);
  WebCore::InspectorOverlayHighlight::Config::~Config((WebCore::InspectorOverlayHighlight::Config *)&v64, v13);
  if (*((_QWORD *)this + 2)
    || *((_QWORD *)this + 3)
    || *((_QWORD *)this + 16)
    || *((_DWORD *)this + 71)
    || *((_DWORD *)this + 75)
    || *((_BYTE *)this + 304)
    || *((_BYTE *)this + 305)
    || *((_BYTE *)this + 306))
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 160) + 56))(*(_QWORD *)(*(_QWORD *)this + 160));
    if (!result)
      return result;
    v27 = 7;
  }
  else
  {
    v27 = 8;
  }
  return (*(uint64_t (**)(void))(**((_QWORD **)this + 1) + 8 * v27))();
}

uint64_t WebCore::InspectorOverlay::update(WebCore::InspectorOverlay *this)
{
  uint64_t result;
  uint64_t v3;

  if (!*((_QWORD *)this + 2)
    && !*((_QWORD *)this + 3)
    && !*((_QWORD *)this + 16)
    && !*((_DWORD *)this + 71)
    && !*((_DWORD *)this + 75)
    && !*((_BYTE *)this + 304)
    && !*((_BYTE *)this + 305)
    && !*((_BYTE *)this + 306))
  {
    v3 = 8;
    return (*(uint64_t (**)(void))(**((_QWORD **)this + 1) + 8 * v3))();
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 160) + 56))(*(_QWORD *)(*(_QWORD *)this + 160));
  if (result)
  {
    v3 = 7;
    return (*(uint64_t (**)(void))(**((_QWORD **)this + 1) + 8 * v3))();
  }
  return result;
}

uint64_t WebCore::InspectorOverlay::highlightNodeList(_QWORD **a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  WebCore::Node *v12;
  _QWORD *v13;
  _DWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t result;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;

  v12 = (WebCore::Node *)a1[2];
  a1[2] = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v12, a2);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
  v13 = (_QWORD *)*a2;
  *a2 = 0;
  v14 = a1[3];
  a1[3] = v13;
  if (v14)
  {
    if (v14[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[4];
  }
  v15 = (unint64_t)a1[4];
  v16 = *(_QWORD *)a3;
  if ((v15 & 0x8000000000000) != 0)
  {
    if ((v16 & 0x8000000000000) != 0
      && *(float *)((v15 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v15 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v15 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v15 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v15) == HIBYTE(v16)
      && BYTE6(v15) == BYTE6(v16))
    {
      goto LABEL_13;
    }
    v67 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
    do
    {
      v68 = __ldaxr(v67);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, v67));
    if (!v69)
    {
      atomic_store(1u, v67);
      WTF::fastFree((WTF *)v67, a2);
    }
  }
  else if (v15 == v16 && (v16 & 0x8000000000000) == 0)
  {
    goto LABEL_13;
  }
  v18 = *(_QWORD *)a3;
  a1[4] = *(_QWORD **)a3;
  if ((v18 & 0x8000000000000) != 0)
  {
    v49 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 + 1, v49));
  }
LABEL_13:
  v19 = (unint64_t)a1[5];
  v20 = *(_QWORD *)(a3 + 8);
  if ((v19 & 0x8000000000000) != 0)
  {
    if ((v20 & 0x8000000000000) != 0
      && *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v19) == HIBYTE(v20)
      && BYTE6(v19) == BYTE6(v20))
    {
      goto LABEL_19;
    }
    v70 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
    do
    {
      v71 = __ldaxr(v70);
      v72 = v71 - 1;
    }
    while (__stlxr(v72, v70));
    if (!v72)
    {
      atomic_store(1u, v70);
      WTF::fastFree((WTF *)v70, a2);
    }
  }
  else if (v19 == v20 && (v20 & 0x8000000000000) == 0)
  {
    goto LABEL_19;
  }
  v22 = *(_QWORD *)(a3 + 8);
  a1[5] = (_QWORD *)v22;
  if ((v22 & 0x8000000000000) != 0)
  {
    v51 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 + 1, v51));
  }
LABEL_19:
  v23 = (unint64_t)a1[6];
  v24 = *(_QWORD *)(a3 + 16);
  if ((v23 & 0x8000000000000) != 0)
  {
    if ((v24 & 0x8000000000000) != 0
      && *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v23) == HIBYTE(v24)
      && BYTE6(v23) == BYTE6(v24))
    {
      goto LABEL_25;
    }
    v73 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
    do
    {
      v74 = __ldaxr(v73);
      v75 = v74 - 1;
    }
    while (__stlxr(v75, v73));
    if (!v75)
    {
      atomic_store(1u, v73);
      WTF::fastFree((WTF *)v73, a2);
    }
  }
  else if (v23 == v24 && (v24 & 0x8000000000000) == 0)
  {
    goto LABEL_25;
  }
  v26 = *(_QWORD *)(a3 + 16);
  a1[6] = (_QWORD *)v26;
  if ((v26 & 0x8000000000000) != 0)
  {
    v53 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFLL);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 + 1, v53));
  }
LABEL_25:
  v27 = (unint64_t)a1[7];
  v28 = *(_QWORD *)(a3 + 24);
  if ((v27 & 0x8000000000000) != 0)
  {
    if ((v28 & 0x8000000000000) != 0
      && *(float *)((v27 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v28 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v27 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v28 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v27 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v28 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v27 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v28 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v27) == HIBYTE(v28)
      && BYTE6(v27) == BYTE6(v28))
    {
      goto LABEL_31;
    }
    v76 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFLL);
    do
    {
      v77 = __ldaxr(v76);
      v78 = v77 - 1;
    }
    while (__stlxr(v78, v76));
    if (!v78)
    {
      atomic_store(1u, v76);
      WTF::fastFree((WTF *)v76, a2);
    }
  }
  else if (v27 == v28 && (v28 & 0x8000000000000) == 0)
  {
    goto LABEL_31;
  }
  v30 = *(_QWORD *)(a3 + 24);
  a1[7] = (_QWORD *)v30;
  if ((v30 & 0x8000000000000) != 0)
  {
    v55 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFLL);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 + 1, v55));
  }
LABEL_31:
  v31 = (unint64_t)a1[8];
  v32 = *(_QWORD *)(a3 + 32);
  if ((v31 & 0x8000000000000) != 0)
  {
    if ((v32 & 0x8000000000000) != 0
      && *(float *)((v31 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v32 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v31 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v32 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v31 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v32 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v31 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v32 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v31) == HIBYTE(v32)
      && BYTE6(v31) == BYTE6(v32))
    {
      goto LABEL_37;
    }
    v79 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFLL);
    do
    {
      v80 = __ldaxr(v79);
      v81 = v80 - 1;
    }
    while (__stlxr(v81, v79));
    if (!v81)
    {
      atomic_store(1u, v79);
      WTF::fastFree((WTF *)v79, a2);
    }
  }
  else if (v31 == v32 && (v32 & 0x8000000000000) == 0)
  {
    goto LABEL_37;
  }
  v34 = *(_QWORD *)(a3 + 32);
  a1[8] = (_QWORD *)v34;
  if ((v34 & 0x8000000000000) != 0)
  {
    v57 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFLL);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 + 1, v57));
  }
LABEL_37:
  *((_WORD *)a1 + 36) = *(_WORD *)(a3 + 40);
  if (*((unsigned __int8 *)a1 + 96) == *(unsigned __int8 *)(a4 + 16))
  {
    if (!*((_BYTE *)a1 + 96))
      goto LABEL_49;
    v35 = (unint64_t)a1[10];
    v36 = *(_QWORD *)a4;
    if ((v35 & 0x8000000000000) != 0)
    {
      if ((v36 & 0x8000000000000) == 0
        || *(float *)((v35 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v36 & 0xFFFFFFFFFFFFLL) + 4)
        || *(float *)((v35 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v36 & 0xFFFFFFFFFFFFLL) + 8)
        || *(float *)((v35 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v36 & 0xFFFFFFFFFFFFLL) + 0xC)
        || *(float *)((v35 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v36 & 0xFFFFFFFFFFFFLL) + 0x10)
        || HIBYTE(v35) != HIBYTE(v36)
        || BYTE6(v35) != BYTE6(v36))
      {
        v88 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFLL);
        do
        {
          v89 = __ldaxr(v88);
          v90 = v89 - 1;
        }
        while (__stlxr(v90, v88));
        if (!v90)
        {
          atomic_store(1u, v88);
          WTF::fastFree((WTF *)v88, a2);
        }
        goto LABEL_42;
      }
    }
    else if (v35 != v36 || (v36 & 0x8000000000000) != 0)
    {
LABEL_42:
      v37 = *(_QWORD *)a4;
      a1[10] = *(_QWORD **)a4;
      if ((v37 & 0x8000000000000) != 0)
      {
        v59 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFLL);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 + 1, v59));
      }
    }
    v38 = *(_DWORD *)(a4 + 8);
    *((_BYTE *)a1 + 92) = *(_BYTE *)(a4 + 12);
    *((_DWORD *)a1 + 22) = v38;
    goto LABEL_49;
  }
  if (*((_BYTE *)a1 + 96))
  {
    v39 = (unint64_t)a1[10];
    if ((v39 & 0x8000000000000) != 0)
    {
      v82 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFLL);
      do
      {
        v83 = __ldaxr(v82);
        v84 = v83 - 1;
      }
      while (__stlxr(v84, v82));
      if (!v84)
      {
        atomic_store(1u, v82);
        WTF::fastFree((WTF *)v82, a2);
      }
    }
    *((_BYTE *)a1 + 96) = 0;
  }
  else
  {
    v40 = *(_QWORD *)a4;
    a1[10] = *(_QWORD **)a4;
    if ((v40 & 0x8000000000000) != 0)
    {
      v63 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFLL);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 + 1, v63));
    }
    v41 = *(_DWORD *)(a4 + 8);
    *((_BYTE *)a1 + 92) = *(_BYTE *)(a4 + 12);
    *((_DWORD *)a1 + 22) = v41;
    *((_BYTE *)a1 + 96) = 1;
  }
LABEL_49:
  if (*((unsigned __int8 *)a1 + 120) == *(unsigned __int8 *)(a5 + 16))
  {
    if (*((_BYTE *)a1 + 120))
    {
      v42 = (unint64_t)a1[13];
      v43 = *(_QWORD *)a5;
      if ((v42 & 0x8000000000000) != 0)
      {
        if ((v43 & 0x8000000000000) == 0
          || *(float *)((v42 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v43 & 0xFFFFFFFFFFFFLL) + 4)
          || *(float *)((v42 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v43 & 0xFFFFFFFFFFFFLL) + 8)
          || *(float *)((v42 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v43 & 0xFFFFFFFFFFFFLL) + 0xC)
          || *(float *)((v42 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v43 & 0xFFFFFFFFFFFFLL) + 0x10)
          || HIBYTE(v42) != HIBYTE(v43)
          || BYTE6(v42) != BYTE6(v43))
        {
          v91 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFLL);
          do
          {
            v92 = __ldaxr(v91);
            v93 = v92 - 1;
          }
          while (__stlxr(v93, v91));
          if (!v93)
          {
            atomic_store(1u, v91);
            WTF::fastFree((WTF *)v91, a2);
          }
          goto LABEL_54;
        }
      }
      else if (v42 != v43 || (v43 & 0x8000000000000) != 0)
      {
LABEL_54:
        v44 = *(_QWORD *)a5;
        a1[13] = *(_QWORD **)a5;
        if ((v44 & 0x8000000000000) != 0)
        {
          v61 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFLL);
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 + 1, v61));
        }
      }
      *((_BYTE *)a1 + 112) = *(_BYTE *)(a5 + 8);
    }
  }
  else if (*((_BYTE *)a1 + 120))
  {
    v45 = (unint64_t)a1[13];
    if ((v45 & 0x8000000000000) != 0)
    {
      v85 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFLL);
      do
      {
        v86 = __ldaxr(v85);
        v87 = v86 - 1;
      }
      while (__stlxr(v87, v85));
      if (!v87)
      {
        atomic_store(1u, v85);
        WTF::fastFree((WTF *)v85, a2);
      }
    }
    *((_BYTE *)a1 + 120) = 0;
  }
  else
  {
    v46 = *(_QWORD *)a5;
    a1[13] = *(_QWORD **)a5;
    if ((v46 & 0x8000000000000) != 0)
    {
      v65 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFLL);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 + 1, v65));
    }
    *((_BYTE *)a1 + 112) = *(_BYTE *)(a5 + 8);
    *((_BYTE *)a1 + 120) = 1;
  }
  *((_BYTE *)a1 + 307) = a6;
  if (!a1[2]
    && !a1[3]
    && !a1[16]
    && !*((_DWORD *)a1 + 71)
    && !*((_DWORD *)a1 + 75)
    && !*((_BYTE *)a1 + 304)
    && !*((_BYTE *)a1 + 305)
    && !*((_BYTE *)a1 + 306))
  {
    v48 = 8;
    return (*(uint64_t (**)(void))(*a1[1] + 8 * v48))();
  }
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a1)[20] + 56))((*a1)[20]);
  if (result)
  {
    v48 = 7;
    return (*(uint64_t (**)(void))(*a1[1] + 8 * v48))();
  }
  return result;
}

uint64_t WebCore::InspectorOverlay::highlightNode(_QWORD **a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  WebCore::Node *v11;
  _DWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t result;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;

  if (a2)
    a2[6] += 2;
  v11 = (WebCore::Node *)a1[2];
  a1[2] = a2;
  if (v11)
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11, a2);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
  v12 = a1[3];
  a1[3] = 0;
  if (v12)
  {
    if (v12[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[4];
  }
  v13 = (unint64_t)a1[4];
  v14 = *(_QWORD *)a3;
  if ((v13 & 0x8000000000000) != 0)
  {
    if ((v14 & 0x8000000000000) != 0
      && *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v14 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v14 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v14 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v14 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v13) == HIBYTE(v14)
      && BYTE6(v13) == BYTE6(v14))
    {
      goto LABEL_13;
    }
    v64 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
    do
    {
      v65 = __ldaxr(v64);
      v66 = v65 - 1;
    }
    while (__stlxr(v66, v64));
    if (!v66)
    {
      atomic_store(1u, v64);
      WTF::fastFree((WTF *)v64, a2);
    }
  }
  else if (v13 == v14 && (v14 & 0x8000000000000) == 0)
  {
    goto LABEL_13;
  }
  v15 = *(_QWORD *)a3;
  a1[4] = *(_QWORD **)a3;
  if ((v15 & 0x8000000000000) != 0)
  {
    v54 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 + 1, v54));
  }
LABEL_13:
  v16 = (unint64_t)a1[5];
  v17 = *(_QWORD *)(a3 + 8);
  if ((v16 & 0x8000000000000) != 0)
  {
    if ((v17 & 0x8000000000000) != 0
      && *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v16) == HIBYTE(v17)
      && BYTE6(v16) == BYTE6(v17))
    {
      goto LABEL_19;
    }
    v67 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
    do
    {
      v68 = __ldaxr(v67);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, v67));
    if (!v69)
    {
      atomic_store(1u, v67);
      WTF::fastFree((WTF *)v67, a2);
    }
  }
  else if (v16 == v17 && (v17 & 0x8000000000000) == 0)
  {
    goto LABEL_19;
  }
  v19 = *(_QWORD *)(a3 + 8);
  a1[5] = (_QWORD *)v19;
  if ((v19 & 0x8000000000000) != 0)
  {
    v46 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 + 1, v46));
  }
LABEL_19:
  v20 = (unint64_t)a1[6];
  v21 = *(_QWORD *)(a3 + 16);
  if ((v20 & 0x8000000000000) != 0)
  {
    if ((v21 & 0x8000000000000) != 0
      && *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v20) == HIBYTE(v21)
      && BYTE6(v20) == BYTE6(v21))
    {
      goto LABEL_25;
    }
    v70 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
    do
    {
      v71 = __ldaxr(v70);
      v72 = v71 - 1;
    }
    while (__stlxr(v72, v70));
    if (!v72)
    {
      atomic_store(1u, v70);
      WTF::fastFree((WTF *)v70, a2);
    }
  }
  else if (v20 == v21 && (v21 & 0x8000000000000) == 0)
  {
    goto LABEL_25;
  }
  v23 = *(_QWORD *)(a3 + 16);
  a1[6] = (_QWORD *)v23;
  if ((v23 & 0x8000000000000) != 0)
  {
    v48 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 + 1, v48));
  }
LABEL_25:
  v24 = (unint64_t)a1[7];
  v25 = *(_QWORD *)(a3 + 24);
  if ((v24 & 0x8000000000000) != 0)
  {
    if ((v25 & 0x8000000000000) != 0
      && *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v24) == HIBYTE(v25)
      && BYTE6(v24) == BYTE6(v25))
    {
      goto LABEL_31;
    }
    v73 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
    do
    {
      v74 = __ldaxr(v73);
      v75 = v74 - 1;
    }
    while (__stlxr(v75, v73));
    if (!v75)
    {
      atomic_store(1u, v73);
      WTF::fastFree((WTF *)v73, a2);
    }
  }
  else if (v24 == v25 && (v25 & 0x8000000000000) == 0)
  {
    goto LABEL_31;
  }
  v27 = *(_QWORD *)(a3 + 24);
  a1[7] = (_QWORD *)v27;
  if ((v27 & 0x8000000000000) != 0)
  {
    v50 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFLL);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 + 1, v50));
  }
LABEL_31:
  v28 = (unint64_t)a1[8];
  v29 = *(_QWORD *)(a3 + 32);
  if ((v28 & 0x8000000000000) != 0)
  {
    if ((v29 & 0x8000000000000) != 0
      && *(float *)((v28 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v29 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v28 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v29 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v28 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v29 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v28 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v29 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v28) == HIBYTE(v29)
      && BYTE6(v28) == BYTE6(v29))
    {
      goto LABEL_37;
    }
    v76 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFLL);
    do
    {
      v77 = __ldaxr(v76);
      v78 = v77 - 1;
    }
    while (__stlxr(v78, v76));
    if (!v78)
    {
      atomic_store(1u, v76);
      WTF::fastFree((WTF *)v76, a2);
    }
  }
  else if (v28 == v29 && (v29 & 0x8000000000000) == 0)
  {
    goto LABEL_37;
  }
  v31 = *(_QWORD *)(a3 + 32);
  a1[8] = (_QWORD *)v31;
  if ((v31 & 0x8000000000000) != 0)
  {
    v52 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFLL);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 + 1, v52));
  }
LABEL_37:
  *((_WORD *)a1 + 36) = *(_WORD *)(a3 + 40);
  if (*((unsigned __int8 *)a1 + 96) == *(unsigned __int8 *)(a4 + 16))
  {
    if (!*((_BYTE *)a1 + 96))
      goto LABEL_49;
    v32 = (unint64_t)a1[10];
    v33 = *(_QWORD *)a4;
    if ((v32 & 0x8000000000000) != 0)
    {
      if ((v33 & 0x8000000000000) == 0
        || *(float *)((v32 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v33 & 0xFFFFFFFFFFFFLL) + 4)
        || *(float *)((v32 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v33 & 0xFFFFFFFFFFFFLL) + 8)
        || *(float *)((v32 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v33 & 0xFFFFFFFFFFFFLL) + 0xC)
        || *(float *)((v32 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v33 & 0xFFFFFFFFFFFFLL) + 0x10)
        || HIBYTE(v32) != HIBYTE(v33)
        || BYTE6(v32) != BYTE6(v33))
      {
        v85 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFLL);
        do
        {
          v86 = __ldaxr(v85);
          v87 = v86 - 1;
        }
        while (__stlxr(v87, v85));
        if (!v87)
        {
          atomic_store(1u, v85);
          WTF::fastFree((WTF *)v85, a2);
        }
        goto LABEL_42;
      }
    }
    else if (v32 != v33 || (v33 & 0x8000000000000) != 0)
    {
LABEL_42:
      v34 = *(_QWORD *)a4;
      a1[10] = *(_QWORD **)a4;
      if ((v34 & 0x8000000000000) != 0)
      {
        v56 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFLL);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 + 1, v56));
      }
    }
    v35 = *(_DWORD *)(a4 + 8);
    *((_BYTE *)a1 + 92) = *(_BYTE *)(a4 + 12);
    *((_DWORD *)a1 + 22) = v35;
    goto LABEL_49;
  }
  if (*((_BYTE *)a1 + 96))
  {
    v36 = (unint64_t)a1[10];
    if ((v36 & 0x8000000000000) != 0)
    {
      v79 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFLL);
      do
      {
        v80 = __ldaxr(v79);
        v81 = v80 - 1;
      }
      while (__stlxr(v81, v79));
      if (!v81)
      {
        atomic_store(1u, v79);
        WTF::fastFree((WTF *)v79, a2);
      }
    }
    *((_BYTE *)a1 + 96) = 0;
  }
  else
  {
    v37 = *(_QWORD *)a4;
    a1[10] = *(_QWORD **)a4;
    if ((v37 & 0x8000000000000) != 0)
    {
      v60 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFLL);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 + 1, v60));
    }
    v38 = *(_DWORD *)(a4 + 8);
    *((_BYTE *)a1 + 92) = *(_BYTE *)(a4 + 12);
    *((_DWORD *)a1 + 22) = v38;
    *((_BYTE *)a1 + 96) = 1;
  }
LABEL_49:
  if (*((unsigned __int8 *)a1 + 120) == *(unsigned __int8 *)(a5 + 16))
  {
    if (*((_BYTE *)a1 + 120))
    {
      v39 = (unint64_t)a1[13];
      v40 = *(_QWORD *)a5;
      if ((v39 & 0x8000000000000) != 0)
      {
        if ((v40 & 0x8000000000000) == 0
          || *(float *)((v39 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v40 & 0xFFFFFFFFFFFFLL) + 4)
          || *(float *)((v39 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v40 & 0xFFFFFFFFFFFFLL) + 8)
          || *(float *)((v39 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v40 & 0xFFFFFFFFFFFFLL) + 0xC)
          || *(float *)((v39 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v40 & 0xFFFFFFFFFFFFLL) + 0x10)
          || HIBYTE(v39) != HIBYTE(v40)
          || BYTE6(v39) != BYTE6(v40))
        {
          v88 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFLL);
          do
          {
            v89 = __ldaxr(v88);
            v90 = v89 - 1;
          }
          while (__stlxr(v90, v88));
          if (!v90)
          {
            atomic_store(1u, v88);
            WTF::fastFree((WTF *)v88, a2);
          }
          goto LABEL_54;
        }
      }
      else if (v39 != v40 || (v40 & 0x8000000000000) != 0)
      {
LABEL_54:
        v41 = *(_QWORD *)a5;
        a1[13] = *(_QWORD **)a5;
        if ((v41 & 0x8000000000000) != 0)
        {
          v58 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFLL);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 + 1, v58));
        }
      }
      *((_BYTE *)a1 + 112) = *(_BYTE *)(a5 + 8);
    }
  }
  else if (*((_BYTE *)a1 + 120))
  {
    v42 = (unint64_t)a1[13];
    if ((v42 & 0x8000000000000) != 0)
    {
      v82 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFLL);
      do
      {
        v83 = __ldaxr(v82);
        v84 = v83 - 1;
      }
      while (__stlxr(v84, v82));
      if (!v84)
      {
        atomic_store(1u, v82);
        WTF::fastFree((WTF *)v82, a2);
      }
    }
    *((_BYTE *)a1 + 120) = 0;
  }
  else
  {
    v43 = *(_QWORD *)a5;
    a1[13] = *(_QWORD **)a5;
    if ((v43 & 0x8000000000000) != 0)
    {
      v62 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFLL);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 + 1, v62));
    }
    *((_BYTE *)a1 + 112) = *(_BYTE *)(a5 + 8);
    *((_BYTE *)a1 + 120) = 1;
  }
  *((_BYTE *)a1 + 307) = a6;
  if (!a1[2]
    && !a1[3]
    && !a1[16]
    && !*((_DWORD *)a1 + 71)
    && !*((_DWORD *)a1 + 75)
    && !*((_BYTE *)a1 + 304)
    && !*((_BYTE *)a1 + 305)
    && !*((_BYTE *)a1 + 306))
  {
    v45 = 8;
    return (*(uint64_t (**)(void))(*a1[1] + 8 * v45))();
  }
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a1)[20] + 56))((*a1)[20]);
  if (result)
  {
    v45 = 7;
    return (*(uint64_t (**)(void))(*a1[1] + 8 * v45))();
  }
  return result;
}

uint64_t WebCore::InspectorOverlay::highlightQuad(uint64_t a1, float32x4_t **a2, uint64_t *a3)
{
  uint64_t v6;
  int32x2_t v7;
  float32x4_t *v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  float32x4_t *v32;
  WTF *v33;
  uint64_t result;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;

  if (*((_BYTE *)a3 + 41))
  {
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 160) + 56))(*(_QWORD *)(*(_QWORD *)a1 + 160));
    v7 = (int32x2_t)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v6 + 64) + 832))(v6 + 64, 0, 1);
    v8 = *a2;
    *(float32x2_t *)v9.f32 = vcvt_f32_s32(v7);
    v9.i64[1] = v9.i64[0];
    v10 = vsubq_f32(**a2, v9);
    v11 = vsubq_f32((*a2)[1], v9);
    *v8 = v10;
    v8[1] = v11;
  }
  v12 = *(_QWORD *)(a1 + 136);
  v13 = *a3;
  if ((v12 & 0x8000000000000) != 0)
  {
    if ((v13 & 0x8000000000000) != 0
      && *(float *)((v12 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v12 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v12 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v12 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v12) == HIBYTE(v13)
      && BYTE6(v12) == BYTE6(v13))
    {
      goto LABEL_9;
    }
    v46 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
    {
      atomic_store(1u, v46);
      WTF::fastFree((WTF *)v46, a2);
    }
  }
  else if (v12 == v13 && (v13 & 0x8000000000000) == 0)
  {
    goto LABEL_9;
  }
  v15 = *a3;
  *(_QWORD *)(a1 + 136) = *a3;
  if ((v15 & 0x8000000000000) != 0)
  {
    v36 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
LABEL_9:
  v16 = *(_QWORD *)(a1 + 144);
  v17 = a3[1];
  if ((v16 & 0x8000000000000) != 0)
  {
    if ((v17 & 0x8000000000000) != 0
      && *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v16) == HIBYTE(v17)
      && BYTE6(v16) == BYTE6(v17))
    {
      goto LABEL_15;
    }
    v49 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
    do
    {
      v50 = __ldaxr(v49);
      v51 = v50 - 1;
    }
    while (__stlxr(v51, v49));
    if (!v51)
    {
      atomic_store(1u, v49);
      WTF::fastFree((WTF *)v49, a2);
    }
  }
  else if (v16 == v17 && (v17 & 0x8000000000000) == 0)
  {
    goto LABEL_15;
  }
  v19 = a3[1];
  *(_QWORD *)(a1 + 144) = v19;
  if ((v19 & 0x8000000000000) != 0)
  {
    v38 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 + 1, v38));
  }
LABEL_15:
  v20 = *(_QWORD *)(a1 + 152);
  v21 = a3[2];
  if ((v20 & 0x8000000000000) != 0)
  {
    if ((v21 & 0x8000000000000) != 0
      && *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v20) == HIBYTE(v21)
      && BYTE6(v20) == BYTE6(v21))
    {
      goto LABEL_21;
    }
    v52 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
    do
    {
      v53 = __ldaxr(v52);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, v52));
    if (!v54)
    {
      atomic_store(1u, v52);
      WTF::fastFree((WTF *)v52, a2);
    }
  }
  else if (v20 == v21 && (v21 & 0x8000000000000) == 0)
  {
    goto LABEL_21;
  }
  v23 = a3[2];
  *(_QWORD *)(a1 + 152) = v23;
  if ((v23 & 0x8000000000000) != 0)
  {
    v40 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 + 1, v40));
  }
LABEL_21:
  v24 = *(_QWORD *)(a1 + 160);
  v25 = a3[3];
  if ((v24 & 0x8000000000000) != 0)
  {
    if ((v25 & 0x8000000000000) != 0
      && *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v24) == HIBYTE(v25)
      && BYTE6(v24) == BYTE6(v25))
    {
      goto LABEL_27;
    }
    v55 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
    {
      atomic_store(1u, v55);
      WTF::fastFree((WTF *)v55, a2);
    }
  }
  else if (v24 == v25 && (v25 & 0x8000000000000) == 0)
  {
    goto LABEL_27;
  }
  v27 = a3[3];
  *(_QWORD *)(a1 + 160) = v27;
  if ((v27 & 0x8000000000000) != 0)
  {
    v42 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFLL);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
  }
LABEL_27:
  v28 = *(_QWORD *)(a1 + 168);
  v29 = a3[4];
  if ((v28 & 0x8000000000000) != 0)
  {
    if ((v29 & 0x8000000000000) != 0
      && *(float *)((v28 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v29 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v28 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v29 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v28 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v29 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v28 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v29 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v28) == HIBYTE(v29)
      && BYTE6(v28) == BYTE6(v29))
    {
      goto LABEL_33;
    }
    v58 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFLL);
    do
    {
      v59 = __ldaxr(v58);
      v60 = v59 - 1;
    }
    while (__stlxr(v60, v58));
    if (!v60)
    {
      atomic_store(1u, v58);
      WTF::fastFree((WTF *)v58, a2);
    }
  }
  else if (v28 == v29 && (v29 & 0x8000000000000) == 0)
  {
    goto LABEL_33;
  }
  v31 = a3[4];
  *(_QWORD *)(a1 + 168) = v31;
  if ((v31 & 0x8000000000000) != 0)
  {
    v44 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFLL);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 + 1, v44));
  }
LABEL_33:
  *(_WORD *)(a1 + 176) = *((_WORD *)a3 + 20);
  v32 = *a2;
  *a2 = 0;
  v33 = *(WTF **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v32;
  if (v33)
    WTF::fastFree(v33, a2);
  if (!*(_QWORD *)(a1 + 16)
    && !*(_QWORD *)(a1 + 24)
    && !*(_QWORD *)(a1 + 128)
    && !*(_DWORD *)(a1 + 284)
    && !*(_DWORD *)(a1 + 300)
    && !*(_BYTE *)(a1 + 304)
    && !*(_BYTE *)(a1 + 305)
    && !*(_BYTE *)(a1 + 306))
  {
    v35 = 8;
    return (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 8) + 8 * v35))();
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 160) + 56))(*(_QWORD *)(*(_QWORD *)a1 + 160));
  if (result)
  {
    v35 = 7;
    return (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 8) + 8 * v35))();
  }
  return result;
}

uint64_t WebCore::InspectorOverlay::setShowPaintRects(uint64_t this, void *a2)
{
  _QWORD **v2;
  WTF *v3;
  uint64_t v4;

  if (*(unsigned __int8 *)(this + 305) != (_DWORD)a2)
  {
    v2 = (_QWORD **)this;
    *(_BYTE *)(this + 305) = (_BYTE)a2;
    if ((a2 & 1) == 0)
    {
      *(_QWORD *)(this + 184) = 0;
      *(_QWORD *)(this + 192) = 0;
      v3 = *(WTF **)(this + 200);
      if (v3)
      {
        v2[25] = 0;
        *((_DWORD *)v2 + 52) = 0;
        WTF::fastFree(v3, a2);
      }
      if (((unint64_t)v2[31] & 0xFFFFFFFFFFFFLL) != 0)
        WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v2 + 27));
      if (!v2[2]
        && !v2[3]
        && !v2[16]
        && !*((_DWORD *)v2 + 71)
        && !*((_DWORD *)v2 + 75)
        && !*((_BYTE *)v2 + 304)
        && !*((_BYTE *)v2 + 305)
        && !*((_BYTE *)v2 + 306))
      {
        v4 = 8;
        return (*(uint64_t (**)(void))(*v2[1] + 8 * v4))();
      }
      this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*v2)[20] + 56))((*v2)[20]);
      if (this)
      {
        v4 = 7;
        return (*(uint64_t (**)(void))(*v2[1] + 8 * v4))();
      }
    }
  }
  return this;
}

WTF::MonotonicTime *WebCore::InspectorOverlay::showPaintRect(WTF::MonotonicTime *this, const WebCore::FloatRect *a2)
{
  WTF::MonotonicTime *v3;
  WebCore::ScrollView *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  unint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  WTF::MonotonicTime *v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  WTF *v38;
  int v39;
  void *v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  WTF *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  _QWORD v64[2];

  if (!*((_BYTE *)this + 305))
    return this;
  v3 = this;
  v4 = (WebCore::ScrollView *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 160) + 56))(*(_QWORD *)(*(_QWORD *)this + 160));
  v5 = *((float *)a2 + 1);
  v6 = floorf(*(float *)a2);
  v7 = 2147500000.0;
  v8 = -2147500000.0;
  if (v6 > -2147500000.0)
    v8 = (float)(int)v6;
  if (v6 < 2147500000.0)
    v9 = v8;
  else
    v9 = 2147500000.0;
  v10 = floorf(v5);
  if (v10 < 2147500000.0)
  {
    v7 = -2147500000.0;
    v11 = v10 <= -2147500000.0;
    v12 = (float)(int)v10;
    if (!v11)
      v7 = v12;
  }
  v13 = v5 + *((float *)a2 + 3);
  v14 = ceilf(*(float *)a2 + *((float *)a2 + 2));
  v15 = 2147500000.0;
  if (v14 < 2147500000.0)
  {
    v15 = -2147500000.0;
    v11 = v14 <= -2147500000.0;
    v16 = (float)(int)v14;
    if (!v11)
      v15 = v16;
  }
  v17 = ceilf(v13);
  v18 = 2147500000.0;
  if (v17 < 2147500000.0)
  {
    v18 = -2147500000.0;
    v11 = v17 <= -2147500000.0;
    v19 = (float)(int)v17;
    if (!v11)
      v18 = v19;
  }
  if (v9 >= 2147500000.0)
  {
    v20 = 0x7FFFFFFFLL;
  }
  else if (v9 <= -2147500000.0)
  {
    v20 = 0x80000000;
  }
  else
  {
    v20 = (int)v9;
  }
  if (v7 >= 2147500000.0)
  {
    v21 = 0x7FFFFFFF00000000;
  }
  else if (v7 <= -2147500000.0)
  {
    v21 = 0x8000000000000000;
  }
  else
  {
    v21 = (unint64_t)(int)v7 << 32;
  }
  v22 = v15 - v9;
  v23 = v18 - v7;
  v24 = 0x7FFFFFFFLL;
  v25 = 0x80000000;
  if (v22 > -2147500000.0)
    v25 = (int)v22;
  if (v22 < 2147500000.0)
    v24 = v25;
  v26 = 0x7FFFFFFF00000000;
  v27 = 0x8000000000000000;
  if (v23 > -2147500000.0)
    v27 = (unint64_t)(int)v23 << 32;
  if (v23 < 2147500000.0)
    v26 = v27;
  v64[0] = v21 | v20;
  v64[1] = v26 | v24;
  v28 = (WTF::MonotonicTime *)WebCore::ScrollView::contentsToRootView(v4, (const WebCore::IntRect *)v64);
  v30 = v29;
  this = (WTF::MonotonicTime *)WTF::MonotonicTime::now(v28);
  v32 = v31;
  v34 = *((_QWORD *)v3 + 23);
  v33 = *((_QWORD *)v3 + 24);
  if (v34)
  {
    if (v33 + 1 == v34)
    {
      LODWORD(v35) = *((_DWORD *)v3 + 52);
LABEL_38:
      v36 = v35;
      v37 = ((unint64_t)v35 >> 2) + v35;
      if (v37 <= 0xF)
        v37 = 15;
      if (v37 >= 0xAAAAAAA)
      {
        __break(0xC471u);
        return this;
      }
      v38 = (WTF *)*((_QWORD *)v3 + 25);
      v39 = 24 * v37 + 24;
      this = (WTF::MonotonicTime *)WTF::fastMalloc((WTF *)(24 * v37 + 24));
      v41 = (v39 & 0xFFFFFFF8) / 0x18;
      *((_DWORD *)v3 + 52) = v41;
      *((_QWORD *)v3 + 25) = this;
      v42 = *((_QWORD *)v3 + 23);
      v43 = *((_QWORD *)v3 + 24);
      if (v42 <= v43)
      {
        if (v42 != v43)
        {
          v54 = 3 * v42;
          v55 = (char *)this + 24 * v42;
          v56 = (char *)v38 + 24 * v42;
          v57 = 24 * v43 - 8 * v54;
          do
          {
            v58 = *(_OWORD *)v56;
            *((_QWORD *)v55 + 2) = *((_QWORD *)v56 + 2);
            *(_OWORD *)v55 = v58;
            v55 += 24;
            v56 += 24;
            v57 -= 24;
          }
          while (v57);
        }
      }
      else
      {
        if (v43)
        {
          v44 = 24 * v43;
          v45 = v38;
          do
          {
            v46 = *(_OWORD *)v45;
            *((_QWORD *)this + 2) = *((_QWORD *)v45 + 2);
            *(_OWORD *)this = v46;
            this = (WTF::MonotonicTime *)((char *)this + 24);
            v45 = (WTF *)((char *)v45 + 24);
            v44 -= 24;
          }
          while (v44);
          v41 = *((_DWORD *)v3 + 52);
          v42 = *((_QWORD *)v3 + 23);
          this = (WTF::MonotonicTime *)*((_QWORD *)v3 + 25);
        }
        v47 = v42 - v36 + v41;
        if (v42 != v36)
        {
          v48 = 3 * v42;
          v49 = (char *)v38 + 24 * v42;
          v50 = (char *)this + 24 * v41;
          v51 = 8 * v48 - 24 * v36;
          do
          {
            v52 = &v50[v51];
            v53 = *(_OWORD *)v49;
            *((_QWORD *)v52 + 2) = *((_QWORD *)v49 + 2);
            *(_OWORD *)v52 = v53;
            v49 += 24;
            v51 += 24;
          }
          while (v51);
        }
        *((_QWORD *)v3 + 23) = v47;
      }
      if (v38)
      {
        if (*((WTF **)v3 + 25) == v38)
        {
          *((_QWORD *)v3 + 25) = 0;
          *((_DWORD *)v3 + 52) = 0;
        }
        this = (WTF::MonotonicTime *)WTF::fastFree(v38, v40);
      }
      v33 = *((_QWORD *)v3 + 24);
    }
  }
  else
  {
    v35 = *((unsigned int *)v3 + 52);
    if (v33)
    {
      if (v33 == v35 - 1)
        goto LABEL_38;
    }
    else
    {
      if (!(_DWORD)v35)
        goto LABEL_38;
      v33 = 0;
    }
  }
  v59 = *((_QWORD *)v3 + 25) + 24 * v33;
  *(double *)v59 = v32 + 0.25;
  *(float *)(v59 + 8) = (float)(int)v28;
  *(float *)(v59 + 12) = (float)SHIDWORD(v28);
  *(float *)(v59 + 16) = (float)(int)v30;
  *(float *)(v59 + 20) = (float)SHIDWORD(v30);
  v60 = *((_QWORD *)v3 + 24);
  if (v60 == *((unsigned int *)v3 + 52) - 1)
    v61 = 0;
  else
    v61 = v60 + 1;
  *((_QWORD *)v3 + 24) = v61;
  if ((*((_QWORD *)v3 + 31) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*((_QWORD *)v3 + 31) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    *((_QWORD *)v3 + 30) = 0x3FA0624DD2F1A9FCLL;
    WTF::MonotonicTime::now(this);
    WebCore::TimerBase::setNextFireTime((uint64_t)v3 + 216, v62 + 0.032);
  }
  if (!*((_QWORD *)v3 + 2)
    && !*((_QWORD *)v3 + 3)
    && !*((_QWORD *)v3 + 16)
    && !*((_DWORD *)v3 + 71)
    && !*((_DWORD *)v3 + 75)
    && !*((_BYTE *)v3 + 304)
    && !*((_BYTE *)v3 + 305)
    && !*((_BYTE *)v3 + 306))
  {
    v63 = 8;
    return (WTF::MonotonicTime *)(*(uint64_t (**)(void))(**((_QWORD **)v3 + 1) + 8 * v63))();
  }
  this = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v3 + 160) + 56))(*(_QWORD *)(*(_QWORD *)v3 + 160));
  if (this)
  {
    v63 = 7;
    return (WTF::MonotonicTime *)(*(uint64_t (**)(void))(**((_QWORD **)v3 + 1) + 8 * v63))();
  }
  return this;
}

BOOL WebCore::InspectorOverlay::removeGridOverlayForNode(WebCore::InspectorOverlay *this, WebCore::Node *a2)
{
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  int v7;
  unsigned int *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  WebCore::Node *v15;
  BOOL v16;
  uint64_t v17;
  WTF *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;

  v3 = *((_QWORD *)this + 34);
  v4 = *((_DWORD *)this + 71);
  v5 = v3 + 24 * v4;
  if (v4)
  {
    v7 = 0;
    v8 = (unsigned int *)(v3 + 24 * v4);
    v9 = (unint64_t)v8;
    do
    {
      if (!*(_QWORD *)v3
        || ((v15 = *(WebCore::Node **)(*(_QWORD *)v3 + 8)) != 0 ? (v16 = v15 == a2) : (v16 = 1), v16))
      {
        v10 = v3;
        if (v9 != *((_QWORD *)this + 34) + 24 * *((unsigned int *)this + 71))
        {
          if (v8 == (unsigned int *)v3)
          {
            v10 = v9;
          }
          else
          {
            WTF::VectorMover<false,WebCore::InspectorOverlay::Grid>::moveOverlapping(v8, (unsigned int *)v3, v9);
            v10 = v9 + v3 - (_QWORD)v8;
          }
        }
        v11 = *(_QWORD *)(v3 + 8);
        if ((v11 & 0x8000000000000) != 0)
        {
          v19 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
          do
          {
            v20 = __ldaxr(v19);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, v19));
          if (!v21)
          {
            atomic_store(1u, v19);
            WTF::fastFree((WTF *)v19, a2);
          }
        }
        v12 = *(_QWORD *)v3;
        *(_QWORD *)v3 = 0;
        if (v12)
        {
          do
          {
            v13 = __ldaxr((unsigned int *)v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, (unsigned int *)v12));
          if (!v14)
          {
            atomic_store(1u, (unsigned int *)v12);
            v17 = *(unsigned int *)(v12 + 28);
            if ((_DWORD)v17)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v17));
            v18 = *(WTF **)(v12 + 16);
            if (v18)
            {
              *(_QWORD *)(v12 + 16) = 0;
              *(_DWORD *)(v12 + 24) = 0;
              WTF::fastFree(v18, a2);
            }
            WTF::fastFree((WTF *)v12, a2);
          }
        }
        v8 = (unsigned int *)(v3 + 24);
        ++v7;
        v9 = v10;
      }
      else
      {
        v10 = v9;
      }
      v3 += 24;
    }
    while (v3 < v5);
    v3 = *((_QWORD *)this + 34);
    v4 = *((_DWORD *)this + 71);
    v5 = v10;
  }
  else
  {
    v7 = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 34);
  }
  v22 = (unsigned int *)(v3 + 24 * v4);
  if (v8 != v22)
  {
    WTF::VectorMover<false,WebCore::InspectorOverlay::Grid>::moveOverlapping(v8, v22, v5);
    v4 = *((_DWORD *)this + 71);
  }
  *((_DWORD *)this + 71) = v4 - v7;
  return v7 != 0;
}

uint64_t WebCore::InspectorOverlay::setGridOverlayForNode@<X0>(uint64_t a1@<X0>, WebCore::Node *a2@<X1>, uint64_t *a3@<X2>, _BYTE *a4@<X8>)
{
  unsigned int *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t result;
  char v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  WTF *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  unsigned int *v41;
  unsigned int v42;
  WTF *v43;
  uint64_t v44;
  int v45;
  char v46;

  if ((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) != 0
    && *(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 12)
  {
    WebCore::InspectorOverlay::removeGridOverlayForNode((WebCore::InspectorOverlay *)a1, a2);
    v8 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
    if (v8)
    {
      do
        v10 = __ldaxr(v8);
      while (__stlxr(v10 + 1, v8));
    }
    v11 = *a3;
    v43 = (WTF *)v8;
    v44 = v11;
    if ((v11 & 0x8000000000000) != 0)
    {
      v41 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 + 1, v41));
    }
    v12 = (uint64_t *)(a1 + 272);
    v45 = *((_DWORD *)a3 + 2);
    v46 = *((_BYTE *)a3 + 12);
    v13 = *(unsigned int *)(a1 + 284);
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 280))
    {
      v14 = WTF::Vector<WebCore::InspectorOverlay::Grid,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, v13 + 1, (unint64_t)&v43);
      v15 = *(_DWORD *)(a1 + 284);
      v16 = *(_QWORD *)(a1 + 272);
      v17 = (_QWORD *)(v16 + 24 * v15);
      v18 = *(_QWORD *)v14;
      *(_QWORD *)v14 = 0;
      *v17 = v18;
      v17[1] = 0;
      v19 = v17 + 1;
      v20 = *((_QWORD *)v14 + 1);
      if (v20)
      {
        *v19 = v20;
        *((_QWORD *)v14 + 1) = 0;
      }
      v21 = v16 + 24 * v15;
      v22 = v14[4];
      *(_BYTE *)(v21 + 20) = *((_BYTE *)v14 + 20);
      *(_DWORD *)(v21 + 16) = v22;
      v23 = v44;
      ++*(_DWORD *)(a1 + 284);
      if ((v23 & 0x8000000000000) != 0)
      {
        v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          WTF::fastFree((WTF *)v24, v9);
        }
      }
    }
    else
    {
      v29 = *v12;
      v30 = *v12 + 24 * v13;
      v31 = v43;
      v43 = 0;
      *(_QWORD *)(v29 + 24 * v13) = v31;
      *(_QWORD *)(v30 + 8) = 0;
      v32 = (_QWORD *)(v30 + 8);
      if (v44)
      {
        *v32 = v44;
        v44 = 0;
      }
      v33 = v29 + 24 * v13;
      v34 = v45;
      *(_BYTE *)(v33 + 20) = v46;
      *(_DWORD *)(v33 + 16) = v34;
      ++*(_DWORD *)(a1 + 284);
    }
    v35 = v43;
    v43 = 0;
    if (v35)
    {
      do
      {
        v36 = __ldaxr((unsigned int *)v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, (unsigned int *)v35));
      if (!v37)
      {
        atomic_store(1u, (unsigned int *)v35);
        v39 = *((unsigned int *)v35 + 7);
        if ((_DWORD)v39)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v35 + 2), (WTF::StringImpl *)(*((_QWORD *)v35 + 2) + 32 * v39));
        v40 = (WTF *)*((_QWORD *)v35 + 2);
        if (v40)
        {
          *((_QWORD *)v35 + 2) = 0;
          *((_DWORD *)v35 + 6) = 0;
          WTF::fastFree(v40, v9);
        }
        WTF::fastFree(v35, v9);
      }
    }
    if (*(_QWORD *)(a1 + 16)
      || *(_QWORD *)(a1 + 24)
      || *(_QWORD *)(a1 + 128)
      || *(_DWORD *)(a1 + 284)
      || *(_DWORD *)(a1 + 300)
      || *(_BYTE *)(a1 + 304)
      || *(_BYTE *)(a1 + 305)
      || *(_BYTE *)(a1 + 306))
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 160) + 56))(*(_QWORD *)(*(_QWORD *)a1 + 160));
      if (!result)
      {
LABEL_32:
        v28 = 0;
        *a4 = 0;
        goto LABEL_33;
      }
      v38 = 7;
    }
    else
    {
      v38 = 8;
    }
    result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 8) + 8 * v38))();
    goto LABEL_32;
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  v28 = 1;
LABEL_33:
  a4[8] = v28;
  return result;
}

uint64_t WebCore::InspectorOverlay::clearAllGridOverlays(WebCore::InspectorOverlay *this, void *a2)
{
  unsigned int v3;
  WTF *v4;
  uint64_t result;
  uint64_t v6;

  if (*((_DWORD *)this + 70))
  {
    v3 = *((_DWORD *)this + 71);
    if (v3)
    {
      WTF::VectorDestructor<true,WebCore::InspectorOverlay::Grid>::destruct(*((unsigned int **)this + 34), (unsigned int *)(*((_QWORD *)this + 34) + 24 * v3));
      *((_DWORD *)this + 71) = 0;
    }
    v4 = (WTF *)*((_QWORD *)this + 34);
    if (v4)
    {
      *((_QWORD *)this + 34) = 0;
      *((_DWORD *)this + 70) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  if (!*((_QWORD *)this + 2)
    && !*((_QWORD *)this + 3)
    && !*((_QWORD *)this + 16)
    && !*((_DWORD *)this + 71)
    && !*((_DWORD *)this + 75)
    && !*((_BYTE *)this + 304)
    && !*((_BYTE *)this + 305)
    && !*((_BYTE *)this + 306))
  {
    v6 = 8;
    return (*(uint64_t (**)(void))(**((_QWORD **)this + 1) + 8 * v6))();
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 160) + 56))(*(_QWORD *)(*(_QWORD *)this + 160));
  if (result)
  {
    v6 = 7;
    return (*(uint64_t (**)(void))(**((_QWORD **)this + 1) + 8 * v6))();
  }
  return result;
}

BOOL WebCore::InspectorOverlay::removeFlexOverlayForNode(WebCore::InspectorOverlay *this, WebCore::Node *a2)
{
  char *v3;
  int v4;
  unint64_t v5;
  int v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  WebCore::Node *v15;
  BOOL v16;
  uint64_t v17;
  WTF *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  char *v22;

  v3 = (char *)*((_QWORD *)this + 36);
  v4 = *((_DWORD *)this + 75);
  v5 = (unint64_t)&v3[24 * v4];
  if (v4)
  {
    v7 = 0;
    v8 = (unint64_t)&v3[24 * v4];
    v9 = v8;
    do
    {
      if (!*(_QWORD *)v3
        || ((v15 = *(WebCore::Node **)(*(_QWORD *)v3 + 8)) != 0 ? (v16 = v15 == a2) : (v16 = 1), v16))
      {
        v10 = v3;
        if (v9 != *((_QWORD *)this + 36) + 24 * *((unsigned int *)this + 75))
        {
          if ((char *)v8 == v3)
          {
            v10 = (char *)v9;
          }
          else
          {
            WTF::VectorMover<false,WebCore::InspectorOverlay::Flex>::moveOverlapping(v8, v3, v9);
            v10 = &v3[v9 - v8];
          }
        }
        v11 = *((_QWORD *)v3 + 1);
        if ((v11 & 0x8000000000000) != 0)
        {
          v19 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
          do
          {
            v20 = __ldaxr(v19);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, v19));
          if (!v21)
          {
            atomic_store(1u, v19);
            WTF::fastFree((WTF *)v19, a2);
          }
        }
        v12 = *(_QWORD *)v3;
        *(_QWORD *)v3 = 0;
        if (v12)
        {
          do
          {
            v13 = __ldaxr((unsigned int *)v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, (unsigned int *)v12));
          if (!v14)
          {
            atomic_store(1u, (unsigned int *)v12);
            v17 = *(unsigned int *)(v12 + 28);
            if ((_DWORD)v17)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v17));
            v18 = *(WTF **)(v12 + 16);
            if (v18)
            {
              *(_QWORD *)(v12 + 16) = 0;
              *(_DWORD *)(v12 + 24) = 0;
              WTF::fastFree(v18, a2);
            }
            WTF::fastFree((WTF *)v12, a2);
          }
        }
        v8 = (unint64_t)(v3 + 24);
        ++v7;
        v9 = (unint64_t)v10;
      }
      else
      {
        v10 = (char *)v9;
      }
      v3 += 24;
    }
    while ((unint64_t)v3 < v5);
    v3 = (char *)*((_QWORD *)this + 36);
    v4 = *((_DWORD *)this + 75);
    v5 = (unint64_t)v10;
  }
  else
  {
    v7 = 0;
    v8 = *((_QWORD *)this + 36);
  }
  v22 = &v3[24 * v4];
  if ((char *)v8 != v22)
  {
    WTF::VectorMover<false,WebCore::InspectorOverlay::Flex>::moveOverlapping(v8, v22, v5);
    v4 = *((_DWORD *)this + 75);
  }
  *((_DWORD *)this + 75) = v4 - v7;
  return v7 != 0;
}

uint64_t WebCore::InspectorOverlay::setFlexOverlayForNode@<X0>(uint64_t a1@<X0>, WebCore::Node *a2@<X1>, uint64_t *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t result;
  char v6;
  unsigned int *v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  char *v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  _QWORD *v32;
  WTF *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  unsigned int *v39;
  unsigned int v40;
  WTF *v41;
  uint64_t v42;
  char v43;

  if ((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) != 0 && *(char *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) < 0)
  {
    WebCore::InspectorOverlay::removeFlexOverlayForNode((WebCore::InspectorOverlay *)a1, a2);
    v10 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
    if (v10)
    {
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 + 1, v10));
    }
    v13 = *a3;
    v41 = (WTF *)v10;
    v42 = v13;
    if ((v13 & 0x8000000000000) != 0)
    {
      v39 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 + 1, v39));
    }
    v14 = (uint64_t *)(a1 + 288);
    v15 = *((_BYTE *)a3 + 8);
    v43 = v15;
    v16 = *(unsigned int *)(a1 + 300);
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 296))
    {
      v17 = WTF::Vector<WebCore::InspectorOverlay::Flex,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v14, v16 + 1, (unint64_t)&v41);
      v18 = *(_DWORD *)(a1 + 300);
      v19 = *(_QWORD *)(a1 + 288);
      v20 = (_QWORD *)(v19 + 24 * v18);
      v21 = *(_QWORD *)v17;
      *(_QWORD *)v17 = 0;
      *v20 = v21;
      v20[1] = 0;
      v22 = v20 + 1;
      v23 = *((_QWORD *)v17 + 1);
      if (v23)
      {
        *v22 = v23;
        *((_QWORD *)v17 + 1) = 0;
      }
      v24 = v19 + 24 * v18;
      v25 = v42;
      *(_BYTE *)(v24 + 16) = v17[16];
      *(_DWORD *)(a1 + 300) = v18 + 1;
      if ((v25 & 0x8000000000000) != 0)
      {
        v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFLL);
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          atomic_store(1u, v26);
          WTF::fastFree((WTF *)v26, v11);
        }
      }
    }
    else
    {
      v29 = *v14;
      v30 = *v14 + 24 * v16;
      v31 = v41;
      v41 = 0;
      *(_QWORD *)(v29 + 24 * v16) = v31;
      *(_QWORD *)(v30 + 8) = 0;
      v32 = (_QWORD *)(v30 + 8);
      if (v42)
      {
        *v32 = v42;
        v42 = 0;
      }
      *(_BYTE *)(v29 + 24 * v16 + 16) = v15;
      *(_DWORD *)(a1 + 300) = v16 + 1;
    }
    v33 = v41;
    v41 = 0;
    if (v33)
    {
      do
      {
        v34 = __ldaxr((unsigned int *)v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, (unsigned int *)v33));
      if (!v35)
      {
        atomic_store(1u, (unsigned int *)v33);
        v37 = *((unsigned int *)v33 + 7);
        if ((_DWORD)v37)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v33 + 2), (WTF::StringImpl *)(*((_QWORD *)v33 + 2) + 32 * v37));
        v38 = (WTF *)*((_QWORD *)v33 + 2);
        if (v38)
        {
          *((_QWORD *)v33 + 2) = 0;
          *((_DWORD *)v33 + 6) = 0;
          WTF::fastFree(v38, v11);
        }
        WTF::fastFree(v33, v11);
      }
    }
    if (*(_QWORD *)(a1 + 16)
      || *(_QWORD *)(a1 + 24)
      || *(_QWORD *)(a1 + 128)
      || *(_DWORD *)(a1 + 284)
      || *(_DWORD *)(a1 + 300)
      || *(_BYTE *)(a1 + 304)
      || *(_BYTE *)(a1 + 305)
      || *(_BYTE *)(a1 + 306))
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 160) + 56))(*(_QWORD *)(*(_QWORD *)a1 + 160));
      if (!result)
      {
LABEL_32:
        v6 = 0;
        *a4 = 0;
        goto LABEL_33;
      }
      v36 = 7;
    }
    else
    {
      v36 = 8;
    }
    result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 8) + 8 * v36))();
    goto LABEL_32;
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = 1;
LABEL_33:
  a4[8] = v6;
  return result;
}

uint64_t WebCore::InspectorOverlay::clearAllFlexOverlays(WebCore::InspectorOverlay *this, void *a2)
{
  unsigned int v3;
  WTF *v4;
  uint64_t result;
  uint64_t v6;

  if (*((_DWORD *)this + 74))
  {
    v3 = *((_DWORD *)this + 75);
    if (v3)
    {
      WTF::VectorDestructor<true,WebCore::InspectorOverlay::Grid>::destruct(*((unsigned int **)this + 36), (unsigned int *)(*((_QWORD *)this + 36) + 24 * v3));
      *((_DWORD *)this + 75) = 0;
    }
    v4 = (WTF *)*((_QWORD *)this + 36);
    if (v4)
    {
      *((_QWORD *)this + 36) = 0;
      *((_DWORD *)this + 74) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  if (!*((_QWORD *)this + 2)
    && !*((_QWORD *)this + 3)
    && !*((_QWORD *)this + 16)
    && !*((_DWORD *)this + 71)
    && !*((_DWORD *)this + 75)
    && !*((_BYTE *)this + 304)
    && !*((_BYTE *)this + 305)
    && !*((_BYTE *)this + 306))
  {
    v6 = 8;
    return (*(uint64_t (**)(void))(**((_QWORD **)this + 1) + 8 * v6))();
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 160) + 56))(*(_QWORD *)(*(_QWORD *)this + 160));
  if (result)
  {
    v6 = 7;
    return (*(uint64_t (**)(void))(**((_QWORD **)this + 1) + 8 * v6))();
  }
  return result;
}

uint64_t WebCore::InspectorOverlay::drawBounds(WebCore::InspectorOverlay *this, WebCore::GraphicsContext *a2, float32x2_t *a3)
{
  unsigned int *v5;
  unsigned int v6;
  WebCore::ScrollView *v7;
  WebCore::ScrollView *v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  float v15;
  unsigned int v16;
  unsigned int v17;
  float v18;
  __int32 v19;
  float v20;
  float v21;
  __int32 v22;
  __int32 v23;
  float v24;
  float v25;
  float v26;
  __int32 v27;
  float v28;
  void *v29;
  uint64_t result;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v5 = (unsigned int *)((char *)this + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = (WebCore::ScrollView *)(*(uint64_t (**)(WebCore::InspectorOverlay *))(*(_QWORD *)this + 56))(this);
  v8 = v7;
  if (v7)
    ++*((_DWORD *)v7 + 2);
  v9 = WebCore::ScrollView::sizeForVisibleContent(v7, 0);
  v10 = v9;
  v11 = HIDWORD(v9);
  if (*((_QWORD *)v8 + 5))
  {
    v15 = WebCore::ScrollView::platformTopContentInset(v8);
  }
  else
  {
    v12 = (*(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)v8 + 720))(v8);
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    v15 = 0.0;
    if (*(_QWORD *)(*(_QWORD *)(v12 + 128) + 8) == v12)
    {
      v33 = *(_QWORD *)(v12 + 24);
      if (v33)
      {
        v34 = *(_QWORD *)(v33 + 8);
        if (v34)
          v15 = *(float *)(v34 + 372);
      }
    }
    do
    {
      v16 = __ldaxr(v13);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v13));
    if (!v17)
    {
      atomic_store(1u, v13);
      v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v36 = off_1E31FE290;
      v36[1] = v13;
      v42 = (uint64_t)v36;
      WTF::ensureOnMainThread();
      v37 = v42;
      v42 = 0;
      if (v37)
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    }
  }
  v44 = 0;
  v18 = a3->f32[1];
  if (v18 > v15)
  {
    LODWORD(v41) = a3->i32[0];
    *((float *)&v41 + 1) = v18;
    WebCore::Path::moveTo((WebCore::Path *)&v42, (const WebCore::FloatPoint *)&v41);
    LODWORD(v41) = a3->i32[0];
    *((float *)&v41 + 1) = v15;
    WebCore::Path::addLineTo((uint64_t)&v42, (const WebCore::FloatPoint *)&v41);
    v19 = a3->i32[1];
    *(float *)&v41 = a3->f32[0] + a3[1].f32[0];
    HIDWORD(v41) = v19;
    WebCore::Path::moveTo((WebCore::Path *)&v42, (const WebCore::FloatPoint *)&v41);
    *(float *)&v41 = a3->f32[0] + a3[1].f32[0];
    *((float *)&v41 + 1) = v15;
    WebCore::Path::addLineTo((uint64_t)&v42, (const WebCore::FloatPoint *)&v41);
    v18 = a3->f32[1];
  }
  if ((float)(v18 + a3[1].f32[1]) < (float)(int)v11)
  {
    LODWORD(v41) = a3->i32[0];
    *((float *)&v41 + 1) = (float)(int)v11;
    WebCore::Path::moveTo((WebCore::Path *)&v42, (const WebCore::FloatPoint *)&v41);
    v20 = a3->f32[1] + a3[1].f32[1];
    LODWORD(v41) = a3->i32[0];
    *((float *)&v41 + 1) = v20;
    WebCore::Path::addLineTo((uint64_t)&v42, (const WebCore::FloatPoint *)&v41);
    *(float *)&v41 = a3->f32[0] + a3[1].f32[0];
    *((float *)&v41 + 1) = (float)(int)v11;
    WebCore::Path::moveTo((WebCore::Path *)&v42, (const WebCore::FloatPoint *)&v41);
    v41 = (unint64_t)vadd_f32(*a3, a3[1]);
    WebCore::Path::addLineTo((uint64_t)&v42, (const WebCore::FloatPoint *)&v41);
  }
  v21 = a3->f32[0];
  if (a3->f32[0] > 0.0)
  {
    v22 = a3->i32[1];
    LODWORD(v41) = a3->i32[0];
    HIDWORD(v41) = v22;
    WebCore::Path::moveTo((WebCore::Path *)&v42, (const WebCore::FloatPoint *)&v41);
    v23 = a3->i32[1];
    LODWORD(v41) = 0;
    HIDWORD(v41) = v23;
    WebCore::Path::addLineTo((uint64_t)&v42, (const WebCore::FloatPoint *)&v41);
    v24 = a3->f32[1] + a3[1].f32[1];
    LODWORD(v41) = a3->i32[0];
    *((float *)&v41 + 1) = v24;
    WebCore::Path::moveTo((WebCore::Path *)&v42, (const WebCore::FloatPoint *)&v41);
    v25 = a3->f32[1] + a3[1].f32[1];
    LODWORD(v41) = 0;
    *((float *)&v41 + 1) = v25;
    WebCore::Path::addLineTo((uint64_t)&v42, (const WebCore::FloatPoint *)&v41);
    v21 = a3->f32[0];
  }
  v26 = v21 + a3[1].f32[0];
  if (v26 < (float)v10)
  {
    v41 = __PAIR64__(a3->i32[1], LODWORD(v26));
    WebCore::Path::moveTo((WebCore::Path *)&v42, (const WebCore::FloatPoint *)&v41);
    v27 = a3->i32[1];
    *(float *)&v41 = (float)v10;
    HIDWORD(v41) = v27;
    WebCore::Path::addLineTo((uint64_t)&v42, (const WebCore::FloatPoint *)&v41);
    v41 = (unint64_t)vadd_f32(*a3, a3[1]);
    WebCore::Path::moveTo((WebCore::Path *)&v42, (const WebCore::FloatPoint *)&v41);
    v28 = a3->f32[1] + a3[1].f32[1];
    *(float *)&v41 = (float)v10;
    *((float *)&v41 + 1) = v28;
    WebCore::Path::addLineTo((uint64_t)&v42, (const WebCore::FloatPoint *)&v41);
  }
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
  if (*((float *)a2 + 47) != 1.0)
  {
    *((_DWORD *)a2 + 46) |= 8u;
    *((_DWORD *)a2 + 47) = 1065353216;
  }
  (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a2 + 88))(a2, (char *)a2 + 8);
  v41 = 0x11040000FF000099;
  WebCore::GraphicsContext::setStrokeColor(a2, (const WebCore::Color *)&v41);
  if ((v41 & 0x8000000000000) != 0)
  {
    v38 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFLL);
    do
    {
      v39 = __ldaxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
    {
      atomic_store(1u, v38);
      WTF::fastFree((WTF *)v38, v29);
    }
  }
  (*(void (**)(WebCore::GraphicsContext *, uint64_t *))(*(_QWORD *)a2 + 184))(a2, &v42);
  result = (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
  if (v44 != -1)
    result = ((uint64_t (*)(unint64_t *, uint64_t *))off_1E33EE980[v44])(&v41, &v43);
  if (*((_DWORD *)v8 + 2) == 1)
    result = (*(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)v8 + 8))(v8);
  else
    --*((_DWORD *)v8 + 2);
  do
  {
    v31 = __ldaxr(v5);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, v5));
  if (!v32)
  {
    atomic_store(1u, v5);
    v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v35 = off_1E31FE290;
    v35[1] = v5;
    v42 = (uint64_t)v35;
    WTF::ensureOnMainThread();
    result = v42;
    v42 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::drawOutlinedQuad(WebCore *this, WebCore::GraphicsContext *a2, const WebCore::FloatQuad *a3, const WebCore::Color *a4, const WebCore::Color *a5, WebCore::FloatRect *a6)
{
  int v11;
  char v12;
  int v13;
  char v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t result;
  _BYTE v29[8];
  _BYTE v30[32];
  __int128 v31;
  int v32;
  int v33;
  int v34;
  _BYTE v35[32];
  __int128 v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v34 = 0;
  WebCore::Path::moveTo((WebCore::Path *)v29, a2);
  WebCore::Path::addLineTo((uint64_t)v29, (WebCore::GraphicsContext *)((char *)a2 + 8));
  WebCore::Path::addLineTo((uint64_t)v29, (WebCore::GraphicsContext *)((char *)a2 + 16));
  WebCore::Path::addLineTo((uint64_t)v29, (WebCore::GraphicsContext *)((char *)a2 + 24));
  v11 = v34;
  if (v34 == 2)
  {
    if (!*(_QWORD *)v30)
      goto LABEL_17;
    v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v30 + 200))(*(_QWORD *)v30);
    v11 = v34;
    if ((v12 & 1) != 0)
      goto LABEL_18;
  }
  else if (!v34)
  {
    goto LABEL_38;
  }
  if (v11 != 2)
  {
    if (v11 == 1)
    {
      v13 = v33;
      if (v33 == 6 || v33 == 15)
        goto LABEL_20;
LABEL_15:
      if (v13 == 5)
      {
        *(_OWORD *)v35 = *(_OWORD *)v30;
        *(_QWORD *)&v35[13] = *(_QWORD *)&v30[13];
        *(_OWORD *)&v30[16] = *(_OWORD *)&v35[16];
        v31 = v36;
        *(_OWORD *)v30 = *(_OWORD *)v35;
        v32 = v37;
        v33 = 6;
        goto LABEL_20;
      }
      goto LABEL_17;
    }
    goto LABEL_17;
  }
  if (!*(_QWORD *)v30)
    goto LABEL_17;
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v30 + 208))(*(_QWORD *)v30);
  v11 = v34;
  if ((v14 & 1) == 0)
  {
    if (v34 == 1)
    {
      v13 = v33;
      goto LABEL_15;
    }
LABEL_17:
    v15 = WebCore::Path::ensureImpl((WebCore::Path *)v29);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 120))(v15);
    v11 = v34;
  }
LABEL_18:
  if (v11 == 2)
  {
    if (!*(_QWORD *)v30)
      goto LABEL_38;
    (*(void (**)(_QWORD))(**(_QWORD **)v30 + 240))(*(_QWORD *)v30);
    goto LABEL_23;
  }
  if (v11 != 1)
    goto LABEL_38;
LABEL_20:
  v16 = WebCore::PathStream::computeBoundingRect((uint64_t)v30, 1);
LABEL_23:
  if (v18 > 0.0 && v19 > 0.0)
  {
    v20 = *((float *)a5 + 2);
    if (v20 <= 0.0 || (v21 = *((float *)a5 + 3), v21 <= 0.0))
    {
      *(float *)a5 = v16;
      *((float *)a5 + 1) = v17;
      *((float *)a5 + 2) = v18;
      *((float *)a5 + 3) = v19;
    }
    else
    {
      v22 = *((float *)a5 + 1);
      if (v16 >= *(float *)a5)
        v23 = *(float *)a5;
      else
        v23 = v16;
      if (v17 >= v22)
        v24 = *((float *)a5 + 1);
      else
        v24 = v17;
      v25 = v20 + *(float *)a5;
      v26 = v18 + v16;
      if (v25 >= v26)
        v26 = v25;
      v27 = v19 + v17;
      if ((float)(v21 + v22) >= v27)
        v27 = v21 + v22;
      *(float *)a5 = v23;
      *((float *)a5 + 1) = v24;
      *((float *)a5 + 2) = v26 - v23;
      *((float *)a5 + 3) = v27 - v24;
    }
  }
LABEL_38:
  (*(void (**)(WebCore *, uint64_t))(*(_QWORD *)this + 96))(this, 1);
  if (*((float *)this + 47) != 2.0)
  {
    *((_DWORD *)this + 46) |= 8u;
    *((_DWORD *)this + 47) = 0x40000000;
  }
  (*(void (**)(WebCore *, char *))(*(_QWORD *)this + 88))(this, (char *)this + 8);
  (*(void (**)(WebCore *, _BYTE *, uint64_t))(*(_QWORD *)this + 496))(this, v29, 1);
  WebCore::GraphicsContext::setFillColor(this, a3);
  (*(void (**)(WebCore *, _BYTE *))(*(_QWORD *)this + 176))(this, v29);
  WebCore::GraphicsContext::setStrokeColor(this, a4);
  (*(void (**)(WebCore *, _BYTE *))(*(_QWORD *)this + 184))(this, v29);
  result = (*(uint64_t (**)(WebCore *, uint64_t))(*(_QWORD *)this + 104))(this, 1);
  if (v34 != -1)
    return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E33EE980[v34])(v35, v30);
  return result;
}

void WebCore::InspectorOverlayLabel::expectedSize(uint64_t *a1, int a2)
{
  void *v4;
  WTF::StringImpl *v5;
  float v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  WTF::StringImpl *v16;
  int v17;
  int v18;
  int v19;
  float v20;
  WTF::StringImpl *v21;
  int v22;
  uint64_t v23;
  unint64_t i;
  WTF::StringImpl *v25;
  int v26;
  int v27;
  int v28;
  float v29;
  WTF::StringImpl *v30;
  int v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  WTF::StringImpl *v46;
  int v47;
  char v48;
  uint64_t v49;
  int v50;
  char v51;
  char v52;
  WTF *v53;
  int v54;
  unsigned int v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  _BYTE v60[296];

  WebCore::systemFont((WebCore *)v60);
  WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)v60, v4);
  v6 = 0.0;
  v7 = *((unsigned int *)a1 + 3);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *a1;
    v10 = *a1 + 32 * v7;
    v11 = 0.0;
    do
    {
      v12 = *(WTF::StringImpl **)v9;
      if (*(_QWORD *)v9)
        *(_DWORD *)v12 += 2;
      v13 = *(_QWORD *)(v9 + 8);
      v56 = v12;
      v57 = v13;
      if ((v13 & 0x8000000000000) != 0)
      {
        v35 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 + 1, v35));
      }
      v58 = *(_BYTE *)(v9 + 16);
      v14 = *(_QWORD *)(v9 + 24);
      v59 = v14;
      if ((v14 & 0x8000000000000) != 0)
      {
        v37 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 + 1, v37));
      }
      WTF::String::splitAllowingEmptyEntries();
      v15 = v53;
      if (!v55)
        goto LABEL_37;
      v16 = *(WTF::StringImpl **)v53;
      if (*(_QWORD *)v53)
      {
        v17 = *(_DWORD *)v16;
        v18 = *((_DWORD *)v16 + 1);
        v19 = *(_DWORD *)v16 + 2;
        *(_DWORD *)v16 = v19;
        if (v18)
        {
          v45 = 0;
          *(_DWORD *)v16 = v17 + 4;
          v46 = v16;
          v47 = 0;
          v48 = 1;
          v49 = 0x3F80000000000000;
          v50 = 0;
          v51 = 4;
          v52 = v52 & 0xE0 | 8;
          v20 = WebCore::FontCascade::width((uint64_t)v60, (uint64_t)&v45);
          v21 = v46;
          v46 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v5);
            else
              *(_DWORD *)v21 -= 2;
          }
          v11 = v11 + v20;
          if (v11 > v6)
            v6 = v11;
          v19 = *(_DWORD *)v16;
        }
        v22 = v19 - 2;
        if (v22)
          *(_DWORD *)v16 = v22;
        else
          WTF::StringImpl::destroy(v16, v5);
      }
      v23 = v55;
      if (v55 >= 2)
      {
        for (i = 1; i < v55; ++i)
        {
          v25 = (WTF::StringImpl *)*((_QWORD *)v53 + i);
          if (v25)
          {
            v26 = *(_DWORD *)v25;
            v27 = *((_DWORD *)v25 + 1);
            v28 = *(_DWORD *)v25 + 2;
            *(_DWORD *)v25 = v28;
            if (v27)
            {
              v45 = 0;
              *(_DWORD *)v25 = v26 + 4;
              v46 = v25;
              v47 = 0;
              v48 = 1;
              v49 = 0x3F80000000000000;
              v50 = 0;
              v51 = 4;
              v52 = v52 & 0xE0 | 8;
              v29 = WebCore::FontCascade::width((uint64_t)v60, (uint64_t)&v45);
              v30 = v46;
              v46 = 0;
              if (v30)
              {
                if (*(_DWORD *)v30 == 2)
                  WTF::StringImpl::destroy(v30, v5);
                else
                  *(_DWORD *)v30 -= 2;
              }
              v11 = v29 + 0.0;
              if ((float)(v29 + 0.0) > v6)
                v6 = v29 + 0.0;
              v28 = *(_DWORD *)v25;
            }
            else
            {
              v11 = 0.0;
            }
            v31 = v28 - 2;
            if (v31)
              *(_DWORD *)v25 = v31;
            else
              WTF::StringImpl::destroy(v25, v5);
          }
          else
          {
            v11 = 0.0;
          }
          v23 = v55;
        }
        v8 = v8 + i - 1;
      }
      v15 = v53;
      if ((_DWORD)v23)
      {
        v33 = 8 * v23;
        do
        {
          v34 = *(WTF::StringImpl **)v15;
          *(_QWORD *)v15 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v5);
            else
              *(_DWORD *)v34 -= 2;
          }
          v15 = (WTF *)((char *)v15 + 8);
          v33 -= 8;
        }
        while (v33);
        v15 = v53;
        if (!v53)
          goto LABEL_38;
      }
      else
      {
LABEL_37:
        if (!v15)
          goto LABEL_38;
      }
      v53 = 0;
      v54 = 0;
      WTF::fastFree(v15, v5);
LABEL_38:
      if ((v59 & 0x8000000000000) != 0)
      {
        v39 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFLL);
        do
        {
          v40 = __ldaxr(v39);
          v41 = v40 - 1;
        }
        while (__stlxr(v41, v39));
        if (!v41)
        {
          atomic_store(1u, v39);
          WTF::fastFree((WTF *)v39, v5);
        }
      }
      if ((v57 & 0x8000000000000) != 0)
      {
        v42 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFLL);
        do
        {
          v43 = __ldaxr(v42);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v42));
        if (!v44)
        {
          atomic_store(1u, v42);
          WTF::fastFree((WTF *)v42, v5);
        }
      }
      v32 = v56;
      v56 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v5);
        else
          *(_DWORD *)v32 -= 2;
      }
      v9 += 32;
    }
    while (v9 != v10);
  }
  if ((a2 - 1) >= 2 && (a2 - 3) >= 2)
    __break(0xC471u);
  else
    WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)v60, v5);
}

uint64_t WebCore::InspectorOverlayLabel::InspectorOverlayLabel(uint64_t result, uint64_t *a2, uint64_t *a3, __int16 a4, float a5, float a6)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  v6 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(result + 8) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(result + 12) = v6;
  *(float *)(result + 16) = a5;
  *(float *)(result + 20) = a6;
  v7 = *a3;
  *(_QWORD *)(result + 24) = *a3;
  if ((v7 & 0x8000000000000) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  *(_WORD *)(result + 32) = a4;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  v6 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(result + 8) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(result + 12) = v6;
  *(float *)(result + 16) = a5;
  *(float *)(result + 20) = a6;
  v7 = *a3;
  *(_QWORD *)(result + 24) = *a3;
  if ((v7 & 0x8000000000000) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  *(_WORD *)(result + 32) = a4;
  return result;
}

void WebCore::InspectorOverlayLabel::draw(WebCore::InspectorOverlayLabel *this, WebCore::GraphicsContext *a2, float a3, WebCore::GraphicsContext *a4)
{
  void *v6;
  uint64_t v7;
  float v8;
  float v9;
  void *v10;
  int8x16_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  float v15;
  int8x16_t v16;
  float v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t *v21;
  unint64_t v22;
  WTF *v23;
  WTF::StringImpl *v24;
  float v25;
  float v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _WORD *v33;
  unint64_t v34;
  char *v35;
  char *v36;
  __int16 v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  unsigned int v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v47;
  unsigned int v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  __int128 v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char v70;
  _QWORD *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  char *v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  char *v80;
  char *v81;
  char *v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  WTF *v93;
  WTF::StringImpl *v94;
  WTF *v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  float v108;
  WebCore::InspectorOverlayLabel *v109;
  WebCore::GraphicsContext *v110;
  float v111;
  int v112;
  float v113;
  int v114;
  float v115;
  int v116;
  float v117;
  int v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  unsigned int v125;
  int v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  unsigned int v134;
  float v135;
  float v136;
  float v137;
  float v138;
  unsigned int v139;
  float v140;
  float v141;
  float v142;
  unsigned int v143;
  float v144;
  unsigned int v145;
  float v146;
  int v150;
  int v152;
  int v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  __int128 v159;
  int v160;
  uint64_t v161;
  __n128 v162;
  uint64_t v163;
  uint64_t v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  __int128 v171;
  void *v172;
  unsigned int *v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  WTF::StringImpl *v181;
  unsigned int *v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int *v185;
  unsigned int v186;
  unsigned int v187;
  float *v188;
  float v191;
  uint64_t v192;
  float v193;
  uint64_t v194;
  unsigned int v195;
  float v196;
  int8x16_t v197;
  int8x16_t v198;
  int8x16_t v199;
  int8x16_t v200;
  int8x16_t v201;
  int8x16_t v202;
  float v203;
  int8x16_t v204;
  int8x16_t v205;
  int8x16_t v206;
  int8x16_t v207;
  int8x16_t v208;
  int8x16_t v209;
  float v210[2];
  WTF::StringImpl *v211;
  _BYTE v212[32];
  WTF::StringImpl *v213;
  WTF *v214;
  int v215;
  unsigned int v216;
  WTF::StringImpl *v217;
  uint64_t v218;
  char v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _BYTE v223[296];
  _BYTE v224[48];
  int v225;
  uint64_t v226;
  _DWORD v227[4];
  uint64_t v228;
  int8x16x2_t v229;
  int8x16x2_t v230;
  int8x16x2_t v231;

  v228 = *MEMORY[0x1E0C80C00];
  WebCore::systemFont((WebCore *)v223);
  v7 = WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)v223, v6);
  v8 = *(float *)(v7 + 4);
  v9 = *(float *)(v7 + 12);
  v11.i32[0] = *(_DWORD *)(WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)v223, v10) + 12);
  v193 = 0.0;
  v191 = *(float *)v11.i32;
  v221 = 0;
  v222 = 0;
  v12 = *((unsigned int *)a2 + 3);
  v188 = (float *)a2;
  v13 = 0;
  if (!(_DWORD)v12)
  {
    v15 = 0.0;
    goto LABEL_158;
  }
  v14 = *(_QWORD *)a2;
  v192 = *(_QWORD *)a2 + 32 * v12;
  v15 = 0.0;
  v16 = 0uLL;
  v17 = 0.0;
  do
  {
    v18 = *(WTF::StringImpl **)v14;
    if (*(_QWORD *)v14)
      *(_DWORD *)v18 += 2;
    v19 = *(_QWORD *)(v14 + 8);
    v217 = v18;
    v218 = v19;
    if ((v19 & 0x8000000000000) != 0)
    {
      v98 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 + 1, v98));
    }
    v197 = v11;
    v204 = v16;
    v219 = *(_BYTE *)(v14 + 16);
    v20 = *(_QWORD *)(v14 + 24);
    v220 = v20;
    if ((v20 & 0x8000000000000) != 0)
    {
      v100 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 + 1, v100));
    }
    WTF::String::splitAllowingEmptyEntries();
    if (!v216)
    {
      v11 = v197;
      v16 = v204;
      goto LABEL_126;
    }
    v194 = v14;
    v22 = 0;
    v11 = v197;
    v16 = v204;
    do
    {
      if (v22)
      {
        ++v13;
        v23 = (WTF *)((char *)v214 + 8 * v22);
        v17 = 0.0;
      }
      else
      {
        v23 = v214;
      }
      v24 = *(WTF::StringImpl **)v23;
      v198 = v11;
      v205 = v16;
      if (v24)
        *(_DWORD *)v24 += 4;
      v213 = v24;
      v210[0] = 0.0;
      v211 = v24;
      *(_DWORD *)v212 = 0;
      v212[4] = 1;
      *(_QWORD *)&v212[8] = 0x3F80000000000000;
      *(_DWORD *)&v212[16] = 0;
      v212[20] = 4;
      v212[21] = v212[21] & 0xE0 | 8;
      v25 = WebCore::FontCascade::width((uint64_t)v223, (uint64_t)v210);
      v26 = v25;
      if (a3 == 0.0 || (float)((float)(v17 + v25) + 8.0) <= a3)
        goto LABEL_65;
      v27 = v213;
      if (v213)
      {
        v28 = *((_DWORD *)v213 + 1);
        *(_DWORD *)v213 += 2;
        if (v28 < 0 || (_VF = __OFADD__(v28, 1), v30 = (v28 + 1), _VF) || v30 > 0x7FFFFFEF)
        {
LABEL_287:
          __break(0xC471u);
          JUMPOUT(0x195DDCC0CLL);
        }
        v31 = v30;
      }
      else
      {
        v30 = 1;
        v31 = 1;
      }
      WTF::tryFastCompactMalloc((WTF *)(2 * v30 + 20));
      v32 = *(_QWORD *)v224;
      if (!*(_QWORD *)v224)
        goto LABEL_287;
      v33 = (_WORD *)(*(_QWORD *)v224 + 20);
      **(_DWORD **)v224 = 2;
      *(_DWORD *)(v32 + 4) = v31;
      *(_QWORD *)(v32 + 8) = v32 + 20;
      *(_DWORD *)(v32 + 16) = 0;
      if (v27)
      {
        v21 = (int8x16_t *)*((_QWORD *)v27 + 1);
        v34 = *((unsigned int *)v27 + 1);
        if ((*((_BYTE *)v27 + 16) & 4) != 0)
        {
          if (v34 >= 0x40)
          {
            v35 = (char *)&v33[v34 & 0xFFFFFFC0];
            v75 = (char *)(v32 + 20);
            v76 = v205;
            do
            {
              v229.val[0] = *v21;
              v77 = v21[1];
              v230.val[0] = v21[2];
              v78 = v21[3];
              v21 += 4;
              v79 = v78;
              v230.val[1] = v205;
              v231.val[0] = v77;
              v229.val[1] = v205;
              v80 = v75;
              vst2q_s8(v80, v229);
              v80 += 32;
              v231.val[1] = v205;
              vst2q_s8(v80, v231);
              v81 = v75 + 64;
              vst2q_s8(v81, v230);
              v82 = v75 + 96;
              vst2q_s8(v82, *(int8x16x2_t *)(&v76 - 1));
              v75 += 128;
            }
            while (v75 != v35);
            v198 = v79;
          }
          else
          {
            v35 = (char *)(v32 + 20);
          }
          v36 = (char *)&v33[v34];
          while (v35 != v36)
          {
            v37 = v21->u8[0];
            v21 = (int8x16_t *)((char *)v21 + 1);
            *(_WORD *)v35 = v37;
            v35 += 2;
          }
        }
        else
        {
          if (v34 == 1)
          {
            *v33 = v21->i16[0];
            v34 = 1;
LABEL_34:
            v33 += v34;
            goto LABEL_35;
          }
          if (!*((_DWORD *)v27 + 1))
            goto LABEL_34;
          memcpy((void *)(v32 + 20), v21, 2 * v34);
        }
        v34 = *((unsigned int *)v27 + 1);
        goto LABEL_34;
      }
LABEL_35:
      *v33 = 8230;
      v38 = v213;
      v213 = (WTF::StringImpl *)v32;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
        {
          WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v21);
          if (!v27)
            goto LABEL_41;
          goto LABEL_39;
        }
        *(_DWORD *)v38 -= 2;
      }
      if (!v27)
        goto LABEL_41;
LABEL_39:
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v21);
      else
        *(_DWORD *)v27 -= 2;
LABEL_41:
      v39 = v213;
      if (v213)
      {
        while (1)
        {
          v40 = *((_DWORD *)v39 + 1);
          if (v40 < 2)
            goto LABEL_65;
          WTF::makeStringByRemoving((WTF *)&v213, (const WTF::String *)(v40 - 2));
          v42 = *(WTF::StringImpl **)v224;
          *(_QWORD *)v224 = 0;
          v43 = v213;
          v213 = v42;
          if (v43)
            break;
LABEL_47:
          if (v42)
            *(_DWORD *)v42 += 4;
          v45 = v211;
          v211 = v42;
          if (v45)
          {
            if (*(_DWORD *)v45 == 2)
              WTF::StringImpl::destroy(v45, v41);
            else
              *(_DWORD *)v45 -= 2;
          }
          *(_DWORD *)v212 = 0;
          v212[4] = 1;
          *(_QWORD *)&v212[8] = 0x3F80000000000000;
          *(_DWORD *)&v212[16] = 0;
          v212[20] = 4;
          v195 = v195 & 0xFFFFFFE0 | 8;
          v212[21] = v195;
          if (v42)
          {
            if (*(_DWORD *)v42 == 2)
              WTF::StringImpl::destroy(v42, v41);
            else
              *(_DWORD *)v42 -= 2;
          }
          v26 = WebCore::FontCascade::width((uint64_t)v223, (uint64_t)v210);
          v39 = v213;
          if ((float)((float)(v17 + v26) + 8.0) <= a3 || v213 == 0)
            goto LABEL_65;
        }
        v44 = *(_DWORD *)v43 - 2;
        if (*(_DWORD *)v43 == 2)
        {
          WTF::StringImpl::destroy(v43, v41);
          v43 = *(WTF::StringImpl **)v224;
          *(_QWORD *)v224 = 0;
          if (!v43)
            goto LABEL_46;
          v44 = *(_DWORD *)v43 - 2;
          if (*(_DWORD *)v43 == 2)
          {
            WTF::StringImpl::destroy(v43, v41);
            goto LABEL_46;
          }
        }
        *(_DWORD *)v43 = v44;
LABEL_46:
        v42 = v213;
        goto LABEL_47;
      }
LABEL_65:
      *(_DWORD *)v224 = 0;
      v47 = v211;
      if (v211)
        *(_DWORD *)v211 += 2;
      *(_OWORD *)&v224[16] = *(_OWORD *)v212;
      *(_QWORD *)&v224[30] = *(_QWORD *)&v212[14];
      *(_QWORD *)&v224[8] = v47;
      *(_QWORD *)&v224[40] = v218;
      if ((v218 & 0x8000000000000) != 0)
      {
        v83 = (unsigned int *)(v218 & 0xFFFFFFFFFFFFLL);
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 + 1, v83));
      }
      LOBYTE(v225) = v219;
      v226 = v220;
      if ((v220 & 0x8000000000000) != 0)
      {
        v85 = (unsigned int *)(v220 & 0xFFFFFFFFFFFFLL);
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 + 1, v85));
      }
      LOBYTE(v227[0]) = v22 != 0;
      *(float *)&v227[1] = v26;
      v48 = HIDWORD(v222);
      if (HIDWORD(v222) == (_DWORD)v222)
      {
        v49 = WTF::Vector<WebCore::ComputedContentRun,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v221, HIDWORD(v222) + 1, (unint64_t)v224);
        v48 = HIDWORD(v222);
        v50 = v221;
        v51 = v221 + 72 * HIDWORD(v222);
        *(_DWORD *)v51 = 0;
        v52 = (_DWORD *)*((_QWORD *)v49 + 1);
        if (v52)
          *v52 += 2;
        *(_QWORD *)(v51 + 8) = v52;
        v53 = *((_OWORD *)v49 + 1);
        *(_QWORD *)(v51 + 30) = *(_QWORD *)(v49 + 30);
        *(_OWORD *)(v51 + 16) = v53;
        v54 = v50 + 72 * v48;
        *(_QWORD *)(v54 + 40) = 0;
        v55 = (_QWORD *)(v54 + 40);
        v56 = *((_QWORD *)v49 + 5);
        if (v56)
        {
          *v55 = v56;
          *((_QWORD *)v49 + 5) = 0;
        }
        v57 = v50 + 72 * v48;
        v58 = v49[48];
        *(_QWORD *)(v57 + 56) = 0;
        v59 = (_QWORD *)(v57 + 56);
        *((_BYTE *)v59 - 8) = v58;
        v60 = *((_QWORD *)v49 + 7);
        v11 = v198;
        v16 = v205;
        if (v60)
        {
          *v59 = v60;
          *((_QWORD *)v49 + 7) = 0;
        }
        v61 = (_QWORD *)(v50 + 72 * v48 + 64);
        v62 = v49 + 64;
      }
      else
      {
        v63 = v221;
        v64 = v221 + 72 * HIDWORD(v222);
        *(_DWORD *)v64 = 0;
        v65 = *(_QWORD *)&v224[8];
        if (*(_QWORD *)&v224[8])
          **(_DWORD **)&v224[8] += 2;
        *(_QWORD *)(v64 + 8) = v65;
        v66 = *(_OWORD *)&v224[16];
        *(_QWORD *)(v64 + 30) = *(_QWORD *)&v224[30];
        *(_OWORD *)(v64 + 16) = v66;
        v67 = v63 + 72 * v48;
        *(_QWORD *)(v67 + 40) = 0;
        v68 = (_QWORD *)(v67 + 40);
        if (*(_QWORD *)&v224[40])
        {
          *v68 = *(_QWORD *)&v224[40];
          *(_QWORD *)&v224[40] = 0;
        }
        v69 = v63 + 72 * v48;
        v70 = v225;
        *(_QWORD *)(v69 + 56) = 0;
        v71 = (_QWORD *)(v69 + 56);
        *((_BYTE *)v71 - 8) = v70;
        v11 = v198;
        v16 = v205;
        if (v226)
        {
          *v71 = v226;
          v226 = 0;
        }
        v61 = (_QWORD *)(v63 + 72 * v48 + 64);
        v62 = v227;
      }
      *v61 = *v62;
      HIDWORD(v222) = v48 + 1;
      if ((v226 & 0x8000000000000) != 0)
      {
        v87 = (unsigned int *)(v226 & 0xFFFFFFFFFFFFLL);
        do
        {
          v88 = __ldaxr(v87);
          v89 = v88 - 1;
        }
        while (__stlxr(v89, v87));
        v11 = v198;
        v16 = v205;
        if (!v89)
        {
          atomic_store(1u, v87);
          WTF::fastFree((WTF *)v87, v21);
          v11 = v198;
          v16 = v205;
        }
      }
      if ((*(_QWORD *)&v224[40] & 0x8000000000000) != 0)
      {
        v90 = (unsigned int *)(*(_QWORD *)&v224[40] & 0xFFFFFFFFFFFFLL);
        do
        {
          v91 = __ldaxr(v90);
          v92 = v91 - 1;
        }
        while (__stlxr(v92, v90));
        v11 = v198;
        v16 = v205;
        if (!v92)
        {
          atomic_store(1u, v90);
          WTF::fastFree((WTF *)v90, v21);
          v11 = v198;
          v16 = v205;
        }
      }
      v72 = *(WTF::StringImpl **)&v224[8];
      *(_QWORD *)&v224[8] = 0;
      if (v72)
      {
        if (*(_DWORD *)v72 == 2)
        {
          WTF::StringImpl::destroy(v72, (WTF::StringImpl *)v21);
          v11 = v198;
          v16 = v205;
        }
        else
        {
          *(_DWORD *)v72 -= 2;
        }
      }
      v17 = v17 + v26;
      if (v17 > v15)
        v15 = v17;
      v73 = v211;
      v211 = 0;
      if (v73)
      {
        if (*(_DWORD *)v73 == 2)
        {
          WTF::StringImpl::destroy(v73, (WTF::StringImpl *)v21);
          v11 = v198;
          v16 = v205;
        }
        else
        {
          *(_DWORD *)v73 -= 2;
        }
      }
      v74 = v213;
      v213 = 0;
      if (v74)
      {
        if (*(_DWORD *)v74 == 2)
        {
          WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v21);
          v11 = v198;
          v16 = v205;
        }
        else
        {
          *(_DWORD *)v74 -= 2;
        }
      }
      ++v22;
    }
    while (v22 < v216);
    if (v216)
    {
      v95 = v214;
      v96 = 8 * v216;
      v14 = v194;
      do
      {
        v97 = *(WTF::StringImpl **)v95;
        *(_QWORD *)v95 = 0;
        if (v97)
        {
          if (*(_DWORD *)v97 == 2)
          {
            WTF::StringImpl::destroy(v97, (WTF::StringImpl *)v21);
            v11 = v198;
            v16 = v205;
          }
          else
          {
            *(_DWORD *)v97 -= 2;
          }
        }
        v95 = (WTF *)((char *)v95 + 8);
        v96 -= 8;
      }
      while (v96);
    }
    else
    {
      v14 = v194;
    }
LABEL_126:
    v93 = v214;
    if (v214)
    {
      v214 = 0;
      v215 = 0;
      v200 = v11;
      v207 = v16;
      WTF::fastFree(v93, v21);
      v11 = v200;
      v16 = v207;
    }
    if ((v220 & 0x8000000000000) != 0)
    {
      v201 = v11;
      v208 = v16;
      v102 = (unsigned int *)(v220 & 0xFFFFFFFFFFFFLL);
      do
      {
        v103 = __ldaxr(v102);
        v104 = v103 - 1;
      }
      while (__stlxr(v104, v102));
      if (!v104)
      {
        atomic_store(1u, v102);
        WTF::fastFree((WTF *)v102, v21);
        v11 = v201;
        v16 = v208;
      }
    }
    if ((v218 & 0x8000000000000) != 0)
    {
      v202 = v11;
      v209 = v16;
      v105 = (unsigned int *)(v218 & 0xFFFFFFFFFFFFLL);
      do
      {
        v106 = __ldaxr(v105);
        v107 = v106 - 1;
      }
      while (__stlxr(v107, v105));
      if (!v107)
      {
        atomic_store(1u, v105);
        WTF::fastFree((WTF *)v105, v21);
        v11 = v202;
        v16 = v209;
      }
    }
    v94 = v217;
    v217 = 0;
    if (v94)
    {
      if (*(_DWORD *)v94 == 2)
      {
        v199 = v11;
        v206 = v16;
        WTF::StringImpl::destroy(v94, (WTF::StringImpl *)v21);
        v11 = v199;
        v16 = v206;
      }
      else
      {
        *(_DWORD *)v94 -= 2;
      }
    }
    v14 += 32;
  }
  while (v14 != v192);
LABEL_158:
  v196 = v8 + v9;
  v108 = (float)v13 + (float)((float)(v8 + v9) * (float)(v13 + 1));
  v109 = this;
  v110 = a4;
  switch(*((_BYTE *)a2 + 32))
  {
    case 0:
      v111 = -0.5;
      v193 = v15 * -0.5;
      goto LABEL_178;
    case 1:
      v118 = *((unsigned __int8 *)a2 + 33);
      if (v118 == 3)
      {
        v193 = -4.0 - v15;
        v115 = (float)((float)((float)(v196 - v108) - v191) + -6.0) + -4.0;
        goto LABEL_193;
      }
      if (v118 == 2)
      {
        v193 = v15 * -0.5;
        v122 = (float)((float)(v196 - v108) - v191) + -6.0;
        v123 = -4.0;
        goto LABEL_188;
      }
      v203 = 0.0;
      if (v118 != 1)
        goto LABEL_194;
      v203 = (float)((float)((float)(v196 - v108) - v191) + -6.0) + -4.0;
      v119 = 4.0;
      goto LABEL_191;
    case 2:
      v114 = *((unsigned __int8 *)a2 + 33);
      if (v114 == 3)
      {
        v121 = -4.0 - v15;
LABEL_184:
        v193 = v121;
        v122 = (float)(v196 - v191) + 6.0;
        v123 = 4.0;
LABEL_188:
        v115 = v122 + v123;
        goto LABEL_193;
      }
      if (v114 == 2)
      {
        v121 = v15 * -0.5;
        goto LABEL_184;
      }
      v203 = 0.0;
      if (v114 != 1)
        goto LABEL_194;
      v193 = 4.0;
      v115 = (float)((float)(v196 - v191) + 6.0) + 4.0;
LABEL_193:
      v203 = v115;
LABEL_194:
      v125 = *((unsigned __int16 *)a2 + 16);
      v126 = *((_WORD *)a2 + 16);
      *((_DWORD *)v109 + 16) = 0;
      v127 = v15 + 8.0;
      v128 = v108 + 8.0;
      switch(v126)
      {
        case 0:
          v129 = v127 * 0.5;
          v130 = -(float)(v127 * 0.5);
          v131 = v128 * 0.5;
          v132 = -(float)(v128 * 0.5);
          *(float *)v224 = v130;
          *(float *)&v224[4] = v132;
          WebCore::Path::moveTo(v109, (const WebCore::FloatPoint *)v224);
          *(float *)v224 = v130;
          *(float *)&v224[4] = v131;
          WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
          *(float *)v224 = v129;
          *(float *)&v224[4] = v131;
          WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
          *(float *)v224 = v129;
          *(float *)&v224[4] = v132;
          WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
          v133 = 0.0;
          goto LABEL_227;
        case 1:
          v145 = v125 >> 8;
          v140 = v127 * 0.5;
          v146 = -(float)(v127 * 0.5);
          v142 = -6.0 - v128;
          *(float *)v224 = v146;
          *(float *)&v224[4] = -6.0 - v128;
          WebCore::Path::moveTo(v109, (const WebCore::FloatPoint *)v224);
          *(float *)v224 = v146;
          *(_DWORD *)&v224[4] = -1061158912;
          WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
          if (v145 == 3)
          {
            *(float *)v224 = v140 + -6.0;
            *(_DWORD *)&v224[4] = -1061158912;
            WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
            *(_QWORD *)v224 = LODWORD(v140);
            WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
            v133 = v146;
          }
          else
          {
            v133 = 0.0;
            if (v145 == 2)
            {
              __asm { FMOV            V0.2S, #-6.0 }
              *(_QWORD *)v224 = _D0;
              WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
              *(_QWORD *)v224 = 0;
              WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
              *(_QWORD *)v224 = 0xC0C0000040C00000;
              WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
            }
            else if (v145 == 1)
            {
              *(_QWORD *)v224 = LODWORD(v146);
              WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
              *(float *)v224 = 6.0 - v140;
              *(_DWORD *)&v224[4] = -1061158912;
              WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
              v133 = v140;
            }
          }
          *(float *)v224 = v140;
          v152 = -1061158912;
          goto LABEL_226;
        case 2:
          v139 = v125 >> 8;
          v140 = v127 * 0.5;
          v141 = -(float)(v127 * 0.5);
          v142 = v128 + 6.0;
          *(float *)v224 = v141;
          *(float *)&v224[4] = v128 + 6.0;
          WebCore::Path::moveTo(v109, (const WebCore::FloatPoint *)v224);
          *(float *)v224 = v141;
          *(_DWORD *)&v224[4] = 1086324736;
          WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
          if (v139 == 3)
          {
            *(float *)v224 = v140 + -6.0;
            *(_DWORD *)&v224[4] = 1086324736;
            WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
            *(_QWORD *)v224 = LODWORD(v140);
            WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
            v133 = v141;
          }
          else
          {
            v133 = 0.0;
            if (v139 == 2)
            {
              *(_QWORD *)v224 = 0x40C00000C0C00000;
              WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
              *(_QWORD *)v224 = 0;
              WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
              __asm { FMOV            V0.2S, #6.0 }
              *(_QWORD *)v224 = _D0;
              WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
            }
            else if (v139 == 1)
            {
              *(_QWORD *)v224 = LODWORD(v141);
              WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
              *(float *)v224 = 6.0 - v140;
              *(_DWORD *)&v224[4] = 1086324736;
              WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
              v133 = v140;
            }
          }
          *(float *)v224 = v140;
          v152 = 1086324736;
LABEL_226:
          *(_DWORD *)&v224[4] = v152;
          WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
          *(float *)v224 = v140;
          *(float *)&v224[4] = v142;
          WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
LABEL_227:
          v138 = 0.0;
          goto LABEL_228;
        case 3:
          v143 = v125 >> 8;
          v135 = v127 + 6.0;
          v144 = v128 * 0.5;
          *(float *)v224 = v127 + 6.0;
          *(float *)&v224[4] = v128 * 0.5;
          WebCore::Path::moveTo(v109, (const WebCore::FloatPoint *)v224);
          *(_DWORD *)v224 = 1086324736;
          *(float *)&v224[4] = v144;
          WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
          v137 = -v144;
          if (v143 == 3)
          {
            *(_DWORD *)v224 = 0;
            *(float *)&v224[4] = v144;
            WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
            *(_DWORD *)v224 = 1086324736;
            *(float *)&v224[4] = v144 + -6.0;
            WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
            v138 = -v144;
          }
          else
          {
            v138 = 0.0;
            if (v143 == 2)
            {
              __asm { FMOV            V0.2S, #6.0 }
              *(_QWORD *)v224 = _D0;
              WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
              *(_QWORD *)v224 = 0;
              WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
              *(_QWORD *)v224 = 0xC0C0000040C00000;
              WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
            }
            else if (v143 == 1)
            {
              *(_DWORD *)v224 = 1086324736;
              *(float *)&v224[4] = 6.0 - v144;
              WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
              *(_DWORD *)v224 = 0;
              *(float *)&v224[4] = -v144;
              WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
              v138 = v144;
            }
          }
          v150 = 1086324736;
          goto LABEL_223;
        case 4:
          v134 = v125 >> 8;
          v135 = -6.0 - v127;
          v136 = v128 * 0.5;
          *(float *)v224 = -6.0 - v127;
          *(float *)&v224[4] = v128 * 0.5;
          WebCore::Path::moveTo(v109, (const WebCore::FloatPoint *)v224);
          *(_DWORD *)v224 = -1061158912;
          *(float *)&v224[4] = v136;
          WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
          v137 = -v136;
          if (v134 == 3)
          {
            *(_DWORD *)v224 = 0;
            *(float *)&v224[4] = v136;
            WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
            *(_DWORD *)v224 = -1061158912;
            *(float *)&v224[4] = v136 + -6.0;
            WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
            v138 = -v136;
          }
          else
          {
            v138 = 0.0;
            if (v134 == 2)
            {
              *(_QWORD *)v224 = 0x40C00000C0C00000;
              WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
              *(_QWORD *)v224 = 0;
              WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
              __asm { FMOV            V0.2S, #-6.0 }
              *(_QWORD *)v224 = _D0;
              WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
            }
            else if (v134 == 1)
            {
              *(_DWORD *)v224 = -1061158912;
              *(float *)&v224[4] = 6.0 - v136;
              WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
              *(_DWORD *)v224 = 0;
              *(float *)&v224[4] = -v136;
              WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
              v138 = v136;
            }
          }
          v150 = -1061158912;
LABEL_223:
          *(_DWORD *)v224 = v150;
          *(float *)&v224[4] = v137;
          WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
          *(float *)v224 = v135;
          *(float *)&v224[4] = v137;
          WebCore::Path::addLineTo((uint64_t)v109, (const WebCore::FloatPoint *)v224);
          v133 = 0.0;
LABEL_228:
          v155 = *((_DWORD *)v109 + 16);
          if (v155 == 2)
          {
            v156 = *((_QWORD *)v109 + 1);
            if (!v156)
              goto LABEL_245;
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v156 + 200))(v156) & 1) != 0)
              goto LABEL_246;
            v155 = *((_DWORD *)v109 + 16);
          }
          else if (!v155)
          {
            goto LABEL_246;
          }
          if (v155 == 2)
          {
            v158 = *((_QWORD *)v109 + 1);
            if (v158)
            {
              if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v158 + 208))(v158) & 1) != 0)
                goto LABEL_246;
              if (*((_DWORD *)v109 + 16) == 1)
              {
                v157 = *((_DWORD *)v109 + 15);
                goto LABEL_243;
              }
            }
LABEL_245:
            v161 = WebCore::Path::ensureImpl(v109);
            (*(void (**)(uint64_t))(*(_QWORD *)v161 + 120))(v161);
            goto LABEL_246;
          }
          if (v155 != 1)
            goto LABEL_245;
          v157 = *((_DWORD *)v109 + 15);
          if (v157 != 6 && v157 != 15)
          {
LABEL_243:
            if (v157 == 5)
            {
              *(_OWORD *)v224 = *(_OWORD *)((char *)v109 + 8);
              *(_QWORD *)&v224[13] = *(_QWORD *)((char *)v109 + 21);
              v159 = *(_OWORD *)&v224[16];
              *(_OWORD *)((char *)v109 + 40) = *(_OWORD *)&v224[32];
              v160 = v225;
              *(_OWORD *)((char *)v109 + 8) = *(_OWORD *)v224;
              *(_OWORD *)((char *)v109 + 24) = v159;
              *((_DWORD *)v109 + 14) = v160;
              *((_DWORD *)v109 + 15) = 6;
              goto LABEL_246;
            }
            goto LABEL_245;
          }
LABEL_246:
          *(_OWORD *)v224 = 0x3FF0000000000000uLL;
          *(_QWORD *)&v224[16] = 0;
          *(_QWORD *)&v224[24] = 0x3FF0000000000000;
          *(double *)&v224[32] = v133;
          *(double *)&v224[40] = v138;
          WebCore::Path::transform(v109, (float64x2_t *)v224);
          (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v110 + 96))(v110, 1);
          (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)v110 + 648))(v110, v188[4], v188[5]);
          WebCore::GraphicsContext::setFillColor(v110, (const WebCore::Color *)(v188 + 6));
          (*(void (**)(WebCore::GraphicsContext *, WebCore::InspectorOverlayLabel *))(*(_QWORD *)v110 + 176))(v110, v109);
          (*(void (**)(WebCore::GraphicsContext *, WebCore::InspectorOverlayLabel *))(*(_QWORD *)v110 + 184))(v110, v109);
          v163 = v221;
          if (HIDWORD(v222))
          {
            v164 = v221 + 72 * HIDWORD(v222);
            v165 = 0.0;
            v162.n128_u32[0] = 0;
            do
            {
              if (*(_BYTE *)(v163 + 64))
                v166 = 0.0;
              else
                v166 = v162.n128_f32[0];
              if (*(_BYTE *)(v163 + 64))
                v167 = v196 + 1.0;
              else
                v167 = -0.0;
              v165 = v165 + v167;
              if (*(_BYTE *)(v163 + 48) == 1)
              {
                v168 = v193 + v166;
                v169 = v203 + v165;
                v170 = *(float *)(v163 + 68);
                v210[0] = (float)(v193 + v166) + -1.0;
                v210[1] = v191 + (float)((float)(v203 + v165) - v196);
                *(float *)&v211 = v170 + 2.0;
                *((float *)&v211 + 1) = v196;
                *(_QWORD *)&v171 = 0x4000000040000000;
                *((_QWORD *)&v171 + 1) = 0x4000000040000000;
                *(_OWORD *)v212 = v171;
                *(_OWORD *)&v212[16] = v171;
                v227[0] = 0;
                WebCore::Path::addRoundedRect((WebCore::Path *)v224, (WebCore::FloatRect *)v210, 0);
                WebCore::GraphicsContext::setFillColor(v110, (const WebCore::Color *)(v163 + 56));
                WebCore::Color::darkened((WebCore::Color *)(v163 + 56), (uint64_t *)&v217);
                WebCore::GraphicsContext::setStrokeColor(v110, (const WebCore::Color *)&v217);
                if (((unint64_t)v217 & 0x8000000000000) != 0)
                {
                  v173 = (unsigned int *)((unint64_t)v217 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v174 = __ldaxr(v173);
                    v175 = v174 - 1;
                  }
                  while (__stlxr(v175, v173));
                  v110 = a4;
                  if (!v175)
                  {
                    atomic_store(1u, v173);
                    WTF::fastFree((WTF *)v173, v172);
                  }
                }
                (*(void (**)(WebCore::GraphicsContext *, _BYTE *))(*(_QWORD *)v110 + 176))(v110, v224);
                (*(void (**)(WebCore::GraphicsContext *, _BYTE *))(*(_QWORD *)v110 + 184))(v110, v224);
                if (v227[0] != -1)
                  ((void (*)(WTF::StringImpl **, _BYTE *))off_1E33EE980[v227[0]])(&v217, &v224[8]);
              }
              else
              {
                v168 = v193 + v166;
                v169 = v203 + v165;
              }
              WebCore::GraphicsContext::setFillColor(v110, (const WebCore::Color *)(v163 + 40));
              *(float *)v224 = v168;
              *(float *)&v224[4] = v169;
              (*(void (**)(WebCore::GraphicsContext *, _BYTE *, uint64_t, _BYTE *, _QWORD, _QWORD))(*(_QWORD *)v110 + 520))(v110, v223, v163, v224, 0, 0);
              v162.n128_f32[0] = v166 + *(float *)(v163 + 68);
              v163 += 72;
            }
            while (v163 != v164);
            v176 = HIDWORD(v222);
            v163 = v221;
          }
          else
          {
            v176 = 0;
          }
          (*(void (**)(WebCore::GraphicsContext *, uint64_t, __n128))(*(_QWORD *)v110 + 104))(v110, 1, v162);
          if (v176)
          {
            v178 = v163 + 72 * v176;
            do
            {
              v179 = *(_QWORD *)(v163 + 56);
              if ((v179 & 0x8000000000000) != 0)
              {
                v182 = (unsigned int *)(v179 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v183 = __ldaxr(v182);
                  v184 = v183 - 1;
                }
                while (__stlxr(v184, v182));
                if (!v184)
                {
                  atomic_store(1u, v182);
                  WTF::fastFree((WTF *)v182, v177);
                }
              }
              v180 = *(_QWORD *)(v163 + 40);
              if ((v180 & 0x8000000000000) != 0)
              {
                v185 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v186 = __ldaxr(v185);
                  v187 = v186 - 1;
                }
                while (__stlxr(v187, v185));
                if (!v187)
                {
                  atomic_store(1u, v185);
                  WTF::fastFree((WTF *)v185, v177);
                }
              }
              v181 = *(WTF::StringImpl **)(v163 + 8);
              *(_QWORD *)(v163 + 8) = 0;
              if (v181)
              {
                if (*(_DWORD *)v181 == 2)
                  WTF::StringImpl::destroy(v181, (WTF::StringImpl *)v177);
                else
                  *(_DWORD *)v181 -= 2;
              }
              v163 += 72;
            }
            while (v163 != v178);
            v163 = v221;
          }
          if (v163)
          {
            v221 = 0;
            LODWORD(v222) = 0;
            WTF::fastFree((WTF *)v163, v177);
          }
          WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)v223, v177);
          return;
        default:
          v138 = 0.0;
          v133 = 0.0;
          goto LABEL_246;
      }
    case 3:
      v116 = *((unsigned __int8 *)a2 + 33);
      if (v116 == 3)
      {
        v124 = (float)(v196 - v108) + -4.0;
      }
      else
      {
        if (v116 == 2)
        {
          v117 = v108 * -0.5;
        }
        else
        {
          v203 = 0.0;
          if (v116 != 1)
            goto LABEL_194;
          v117 = 4.0;
        }
        v124 = v196 + v117;
      }
      v203 = v124 - v191;
      v119 = 10.0;
LABEL_191:
      v193 = v119;
      goto LABEL_194;
    case 4:
      v112 = *((unsigned __int8 *)a2 + 33);
      if (v112 == 3)
      {
        v193 = (float)(-6.0 - v15) + -4.0;
        v120 = (float)(v196 - v108) + -4.0;
      }
      else
      {
        if (v112 == 2)
        {
          v193 = (float)(-6.0 - v15) + -4.0;
          v111 = -0.5;
LABEL_178:
          v113 = v108 * v111;
        }
        else
        {
          v203 = 0.0;
          if (v112 != 1)
            goto LABEL_194;
          v193 = (float)(-6.0 - v15) + -4.0;
          v113 = 4.0;
        }
        v120 = v196 + v113;
      }
      v115 = v120 - v191;
      goto LABEL_193;
    default:
      v203 = 0.0;
      v109 = this;
      v110 = a4;
      goto LABEL_194;
  }
}

uint64_t WebCore::drawLayoutHatching(float *a1, float *a2, int a3)
{
  void *v11;
  WTF *v12;
  WTF *v14;
  uint64_t v15;

  (*(void (**)(float *, uint64_t))(*(_QWORD *)a1 + 96))(a1, 1);
  if (a1[47] != 0.5)
  {
    *((_DWORD *)a1 + 46) |= 8u;
    a1[47] = 0.5;
  }
  (*(void (**)(float *, _DWORD *))(*(_QWORD *)a1 + 88))(a1, (_DWORD *)a1 + 2);
  if (*((_BYTE *)a1 + 193) != 3)
  {
    *((_BYTE *)a1 + 193) = 3;
    *((_DWORD *)a1 + 46) |= 0x10u;
  }
  (*(void (**)(float *, _DWORD *))(*(_QWORD *)a1 + 88))(a1, (_DWORD *)a1 + 2);
  v14 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  __asm { FMOV            V0.2D, #2.0 }
  *(_OWORD *)v14 = _Q0;
  v15 = 0x200000002;
  (*(void (**)(float *, WTF **, float))(*(_QWORD *)a1 + 304))(a1, &v14, 2.0);
  v12 = v14;
  if (v14)
  {
    v14 = 0;
    LODWORD(v15) = 0;
    WTF::fastFree(v12, v11);
  }
  WebCore::drawLayoutPattern((uint64_t)a1, a2, 12, a3);
  return (*(uint64_t (**)(float *, uint64_t))(*(_QWORD *)a1 + 104))(a1, 1);
}

uint64_t WebCore::InspectorOverlayLabel::InspectorOverlayLabel(uint64_t a1, WTF::StringImpl *a2, uint64_t *a3, __int16 a4, float a5, float a6)
{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD v23[2];

  if (a2)
  {
    *(_DWORD *)a2 += 2;
    v12 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)a2 += 2;
  }
  else
  {
    v12 = WTF::fastMalloc((WTF *)0x20);
  }
  *(_QWORD *)v12 = a2;
  *(_QWORD *)(v12 + 8) = 0x11040000000000FFLL;
  *(_BYTE *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0x1104000000000000;
  v14 = *a3;
  if ((*a3 & 0x8000000000000) != 0)
  {
    v17 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  v23[0] = 0;
  v23[1] = 0;
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = 0x100000001;
  *(float *)(a1 + 16) = a5;
  *(float *)(a1 + 20) = a6;
  *(_QWORD *)(a1 + 24) = v14;
  if ((v14 & 0x8000000000000) != 0)
  {
    v19 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
    *(_WORD *)(a1 + 32) = a4;
    do
    {
      v21 = __ldaxr(v19);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v19));
    if (!v22)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v13);
    }
  }
  else
  {
    *(_WORD *)(a1 + 32) = a4;
  }
  WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, v13);
  if (a2)
  {
    if (*(_DWORD *)a2 == 2)
      WTF::StringImpl::destroy(a2, v15);
    else
      *(_DWORD *)a2 -= 2;
  }
  return a1;
}

uint64_t WebCore::gridLineNames(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  WTF::StringImpl *v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t *v32;
  _DWORD *v33;
  WTF *v34;
  WTF *v35;
  uint64_t v36;
  WTF *v37;
  WTF *v38;
  uint64_t v39;
  int *v40;
  int v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  _DWORD *v50;
  int v51;
  _DWORD *v52;
  int v53;
  uint64_t v54;
  int v55;
  WTF *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  void *v64;
  _QWORD *v65;
  uint64_t v66;
  _DWORD *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  _QWORD *v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl ***v80;
  uint64_t v81;
  WTF *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl **v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF::StringImpl **v89;
  WTF::StringImpl *v90;
  WTF *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t i;
  uint64_t v95;
  WTF::StringImpl ***v96;
  uint64_t v97;
  WTF *v98;
  WTF::StringImpl **v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  uint64_t v102;
  WTF *v103;
  WTF::StringImpl *v104;
  WTF *v105;
  uint64_t v106;
  void *__src;
  WTF::StringImpl ***__srca;
  WTF::StringImpl ***__srcb;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF *v113;
  WTF *v114;
  uint64_t *v115;
  int *v116;
  WTF *v117;
  int v118;
  unsigned int v119;
  _DWORD *v120;
  WTF *v121;
  uint64_t v122;
  char v123;
  unsigned int v124;

  *(_QWORD *)result = 0;
  if (!a2)
    return result;
  v7 = (uint64_t *)result;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 40) + 80);
  v9 = (uint64_t *)(v8 + 168);
  v10 = (uint64_t *)(v8 + 176);
  if (a3)
    v11 = v10;
  else
    v11 = v9;
  WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::HashTable((uint64_t *)&v120, v11);
  if (!v120)
  {
    v14 = 0;
    LODWORD(v12) = 0;
LABEL_14:
    v13 = &v120[6 * v12];
    goto LABEL_15;
  }
  v12 = *(v120 - 1);
  v13 = &v120[6 * v12];
  if (!*(v120 - 3))
  {
    v14 = &v120[6 * v12];
    goto LABEL_14;
  }
  v14 = v120;
  if ((_DWORD)v12)
  {
    v15 = 24 * v12;
    v14 = v120;
    while (*v14 >= 0xFFFFFFFE)
    {
      v14 += 6;
      v15 -= 24;
      if (!v15)
      {
        v14 = v13;
        break;
      }
    }
  }
LABEL_15:
  if (v120)
    v16 = &v120[6 * *(v120 - 1)];
  else
    v16 = 0;
  while (v14 != v16)
  {
    LODWORD(v117) = *v14;
    WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((unsigned int *)&v121, v7, (unsigned int *)&v117, v14 + 2);
    if (!v123)
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)v121 + 8, (uint64_t)(v14 + 2));
    v17 = v14 + 6;
    v14 = v13;
    if (v17 != v13)
    {
      v14 = v17;
      while (*v14 >= 0xFFFFFFFE)
      {
        v14 += 6;
        if (v14 == v13)
        {
          v14 = v13;
          break;
        }
      }
    }
  }
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 40) + 80);
  if (a3)
    v19 = 208;
  else
    v19 = 200;
  v20 = 252;
  if (!a3)
    v20 = 248;
  v21 = *(_QWORD *)(v18 + v19);
  v115 = v7;
  if (v21)
  {
    v22 = 0;
    v23 = *(_DWORD *)(v18 + v20);
    v24 = a4 - v23;
    do
    {
      v25 = *(_DWORD *)(v21 - 12);
      if (v25)
        v26 = v22 >= v24;
      else
        v26 = 1;
      if (v26)
        break;
      WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t)&v117, v21, v22 % v25);
      v124 = v22 + v23;
      WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((unsigned int *)&v121, v7, &v124, (unsigned int *)&v117);
      if (!v123)
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)v121 + 8, (uint64_t)&v117);
      if (v119)
      {
        v29 = v117;
        v30 = 8 * v119;
        do
        {
          v31 = *(WTF::StringImpl **)v29;
          *(_QWORD *)v29 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v27);
            else
              *(_DWORD *)v31 -= 2;
          }
          v29 = (WTF *)((char *)v29 + 8);
          v30 -= 8;
        }
        while (v30);
      }
      v28 = v117;
      if (v117)
      {
        v117 = 0;
        v118 = 0;
        WTF::fastFree(v28, v27);
      }
      ++v22;
      v21 = *(_QWORD *)(v18 + v19);
      v7 = v115;
    }
    while (v21);
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 40) + 80);
  }
  if (a3)
    v32 = (uint64_t *)(v18 + 16);
  else
    v32 = (uint64_t *)(v18 + 8);
  result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v117, v32);
  v34 = v117;
  if (v117)
  {
    v36 = *((unsigned int *)v117 - 1);
    v37 = (WTF *)((char *)v117 + 24 * v36);
    if (*((_DWORD *)v117 - 3))
    {
      v35 = v117;
      if ((_DWORD)v36)
      {
        v106 = 24 * v36;
        v35 = v117;
        while ((unint64_t)(*(_QWORD *)v35 + 1) <= 1)
        {
          v35 = (WTF *)((char *)v35 + 24);
          v106 -= 24;
          if (!v106)
          {
            v35 = v37;
            break;
          }
        }
      }
      v7 = v115;
      goto LABEL_205;
    }
    v35 = (WTF *)((char *)v117 + 24 * v36);
    v7 = v115;
  }
  else
  {
    v35 = 0;
    LODWORD(v36) = 0;
  }
  v37 = (WTF *)((char *)v117 + 24 * v36);
  if (v117)
  {
LABEL_205:
    v38 = (WTF *)((char *)v117 + 24 * *((unsigned int *)v117 - 1));
    goto LABEL_60;
  }
  v38 = 0;
LABEL_60:
  if (v38 == v35)
    goto LABEL_167;
  v113 = v38;
  v114 = v37;
  do
  {
    v39 = *((unsigned int *)v35 + 5);
    if ((_DWORD)v39)
    {
      v40 = (int *)*((_QWORD *)v35 + 1);
      v116 = &v40[v39];
      while (1)
      {
        v41 = *v40;
        v42 = *(WTF::StringImpl **)v35;
        if (*(_QWORD *)v35)
          *(_DWORD *)v42 += 2;
        v121 = 0;
        v122 = 0;
        result = WTF::fastMalloc((WTF *)8);
        LODWORD(v122) = 1;
        v121 = (WTF *)result;
        v43 = HIDWORD(v122);
        if (v42)
          *(_DWORD *)v42 += 2;
        *(_QWORD *)(result + 8 * v43) = v42;
        HIDWORD(v122) = v43 + 1;
        v44 = *v7;
        if (*v7)
          goto LABEL_70;
        v45 = WTF::fastMalloc((WTF *)0xD0);
        *(_DWORD *)(v45 + 16) = -1;
        result = v45 + 16;
        *(_QWORD *)(result + 8) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = -1;
        *(_QWORD *)(result + 32) = 0;
        *(_QWORD *)(result + 40) = 0;
        *(_DWORD *)(result + 48) = -1;
        *(_QWORD *)(result + 56) = 0;
        *(_QWORD *)(result + 64) = 0;
        *(_DWORD *)(result + 72) = -1;
        *(_QWORD *)(result + 80) = 0;
        *(_QWORD *)(result + 88) = 0;
        *(_DWORD *)(result + 96) = -1;
        *(_QWORD *)(result + 104) = 0;
        *(_QWORD *)(result + 112) = 0;
        *(_DWORD *)(result + 120) = -1;
        *(_QWORD *)(result + 128) = 0;
        *(_QWORD *)(result + 136) = 0;
        *(_DWORD *)(result + 144) = -1;
        *(_QWORD *)(result + 152) = 0;
        *(_QWORD *)(result + 160) = 0;
        *(_DWORD *)(result + 168) = -1;
        *(_QWORD *)(result + 176) = 0;
        *(_QWORD *)(result + 184) = 0;
        *v7 = result;
        *(_DWORD *)(result - 4) = 8;
        *(_DWORD *)(*v7 - 8) = 7;
        *(_DWORD *)(*v7 - 16) = 0;
        *(_DWORD *)(*v7 - 12) = 0;
        v44 = *v7;
        if (*v7)
LABEL_70:
          v46 = *(_DWORD *)(v44 - 8);
        else
          v46 = 0;
        v47 = 9 * ((v41 + ~(v41 << 15)) ^ ((v41 + ~(v41 << 15)) >> 10));
        v48 = (v47 ^ (v47 >> 6)) + ~((v47 ^ (v47 >> 6)) << 11);
        v49 = v46 & (v48 ^ HIWORD(v48));
        v50 = (_DWORD *)(v44 + 24 * v49);
        v51 = *v50;
        if (*v50 == -1)
          break;
        v52 = 0;
        v53 = 1;
        while (v51 != v41)
        {
          if (v51 == -2)
            v52 = v50;
          v49 = (v49 + v53) & v46;
          v50 = (_DWORD *)(v44 + 24 * v49);
          v51 = *v50;
          ++v53;
          if (*v50 == -1)
          {
            if (v52)
            {
              *v52 = -1;
              *((_QWORD *)v52 + 1) = 0;
              *((_QWORD *)v52 + 2) = 0;
              --*(_DWORD *)(*v7 - 16);
              v50 = v52;
            }
            goto LABEL_79;
          }
        }
        v56 = v121;
        v57 = HIDWORD(v122);
        if (!HIDWORD(v122))
        {
LABEL_111:
          if (!v56)
            goto LABEL_112;
          goto LABEL_128;
        }
        v58 = v50[4];
        v59 = v50[5];
        v60 = v59 + HIDWORD(v122);
        if (v60 > v58)
        {
          v61 = v58 + (v58 >> 2);
          v62 = v61 >= 0x10 ? v61 + 1 : 16;
          v110 = v59 + HIDWORD(v122);
          v63 = v62 <= v60 ? v59 + HIDWORD(v122) : v62;
          if (v63 >> 29)
            goto LABEL_207;
          __src = (void *)*((_QWORD *)v50 + 1);
          v64 = (void *)WTF::fastMalloc((WTF *)(8 * v63));
          v50[4] = v63;
          *((_QWORD *)v50 + 1) = v64;
          result = (uint64_t)memcpy(v64, __src, 8 * v59);
          if (__src)
          {
            if (*((void **)v50 + 1) == __src)
            {
              *((_QWORD *)v50 + 1) = 0;
              v50[4] = 0;
            }
            result = WTF::fastFree((WTF *)__src, v33);
          }
          v59 = v50[5];
          LODWORD(v60) = v110;
          if (v110 < v59)
          {
LABEL_207:
            __break(0xC471u);
            JUMPOUT(0x195DDD854);
          }
        }
        v65 = (_QWORD *)(*((_QWORD *)v50 + 1) + 8 * v59);
        v66 = 8 * v57;
        v7 = v115;
        do
        {
          v67 = *(_DWORD **)v56;
          if (*(_QWORD *)v56)
            *v67 += 2;
          *v65++ = v67;
          v56 = (WTF *)((char *)v56 + 8);
          v66 -= 8;
        }
        while (v66);
        v50[5] = v60;
LABEL_110:
        v56 = v121;
        if (!HIDWORD(v122))
          goto LABEL_111;
        v77 = 8 * HIDWORD(v122);
        do
        {
          result = *(_QWORD *)v56;
          *(_QWORD *)v56 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v33);
            else
              *(_DWORD *)result -= 2;
          }
          v56 = (WTF *)((char *)v56 + 8);
          v77 -= 8;
        }
        while (v77);
        v56 = v121;
        v7 = v115;
        if (!v121)
        {
LABEL_112:
          if (v42)
            goto LABEL_113;
          goto LABEL_115;
        }
LABEL_128:
        v121 = 0;
        LODWORD(v122) = 0;
        result = WTF::fastFree(v56, v33);
        if (v42)
        {
LABEL_113:
          if (*(_DWORD *)v42 == 2)
            result = WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v33);
          else
            *(_DWORD *)v42 -= 2;
        }
LABEL_115:
        if (++v40 == v116)
          goto LABEL_160;
      }
LABEL_79:
      *v50 = v41;
      result = (uint64_t)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v50 + 2, (unsigned int *)&v121);
      v54 = *v7;
      if (*v7)
        v55 = *(_DWORD *)(v54 - 12) + 1;
      else
        v55 = 1;
      *(_DWORD *)(v54 - 12) = v55;
      v68 = *v7;
      if (*v7)
        v69 = *(_DWORD *)(v68 - 12);
      else
        v69 = 0;
      v70 = (*(_DWORD *)(v68 - 16) + v69);
      v71 = *(unsigned int *)(v68 - 4);
      if (v71 > 0x400)
      {
        if (v71 > 2 * v70)
          goto LABEL_110;
      }
      else
      {
        if (3 * v71 > 4 * v70)
          goto LABEL_110;
        if (!(_DWORD)v71)
        {
          v72 = *(_DWORD *)(v68 - 12);
          v73 = 8;
LABEL_105:
          result = WTF::fastMalloc((WTF *)(24 * v73 + 16));
          if (v73)
          {
            v74 = v73;
            v75 = (_QWORD *)(result + 24);
            do
            {
              *((_DWORD *)v75 - 2) = -1;
              *v75 = 0;
              v75[1] = 0;
              v75 += 3;
              --v74;
            }
            while (v74);
          }
          *v115 = result + 16;
          *(_DWORD *)(result + 12) = v73;
          v76 = v73 - 1;
          v7 = v115;
          *(_DWORD *)(*v115 - 8) = v76;
          *(_DWORD *)(*v115 - 16) = 0;
          *(_DWORD *)(*v115 - 12) = v72;
          if (!(_DWORD)v71)
          {
            if (v68)
LABEL_155:
              result = WTF::fastFree((WTF *)(v68 - 16), v33);
            goto LABEL_110;
          }
          v78 = 0;
          while (1)
          {
            v33 = (_DWORD *)(v68 + 24 * v78);
            if (*v33 != -2)
            {
              if (*v33 == -1)
              {
                v79 = v68 + 24 * v78;
                v80 = (WTF::StringImpl ***)(v79 + 8);
                v81 = *(unsigned int *)(v79 + 20);
                if ((_DWORD)v81)
                {
                  v86 = *v80;
                  v87 = 8 * v81;
                  do
                  {
                    v88 = *v86;
                    *v86 = 0;
                    if (v88)
                    {
                      if (*(_DWORD *)v88 == 2)
                      {
                        __srca = v80;
                        v111 = v78;
                        WTF::StringImpl::destroy(v88, (WTF::StringImpl *)v33);
                        v80 = __srca;
                        v78 = v111;
                      }
                      else
                      {
                        *(_DWORD *)v88 -= 2;
                      }
                    }
                    ++v86;
                    v87 -= 8;
                  }
                  while (v87);
                }
                v82 = (WTF *)*v80;
                v7 = v115;
                if (!*v80)
                  goto LABEL_138;
                v83 = v78;
              }
              else
              {
                v83 = v78;
                WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::reinsert(v7, (uint64_t)v33);
                v78 = v83;
                v84 = v68 + 24 * v83;
                v80 = (WTF::StringImpl ***)(v84 + 8);
                v85 = *(unsigned int *)(v84 + 20);
                if ((_DWORD)v85)
                {
                  v89 = *v80;
                  v112 = 8 * v85;
                  do
                  {
                    v90 = *v89;
                    *v89 = 0;
                    if (v90)
                    {
                      if (*(_DWORD *)v90 == 2)
                      {
                        __srcb = v80;
                        WTF::StringImpl::destroy(v90, (WTF::StringImpl *)v33);
                        v80 = __srcb;
                        v78 = v83;
                      }
                      else
                      {
                        *(_DWORD *)v90 -= 2;
                      }
                    }
                    ++v89;
                    v112 -= 8;
                  }
                  while (v112);
                }
                v82 = (WTF *)*v80;
                v7 = v115;
                if (!*v80)
                  goto LABEL_138;
              }
              *v80 = 0;
              *(_DWORD *)(v68 + 24 * v83 + 16) = 0;
              WTF::fastFree(v82, v33);
              v78 = v83;
              v7 = v115;
            }
LABEL_138:
            if (++v78 == v71)
              goto LABEL_155;
          }
        }
      }
      v72 = *(_DWORD *)(v68 - 12);
      v73 = (_DWORD)v71 << (6 * v72 >= (2 * v71));
      goto LABEL_105;
    }
LABEL_160:
    v91 = (WTF *)((char *)v35 + 24);
    v35 = v114;
    if (v91 != v114)
    {
      v35 = v91;
      while ((unint64_t)(*(_QWORD *)v35 + 1) <= 1)
      {
        v35 = (WTF *)((char *)v35 + 24);
        if (v35 == v114)
        {
          v35 = v114;
          break;
        }
      }
    }
  }
  while (v35 != v113);
  v34 = v117;
LABEL_167:
  if (v34)
  {
    v102 = *((unsigned int *)v34 - 1);
    if ((_DWORD)v102)
    {
      v103 = v34;
      do
      {
        v104 = *(WTF::StringImpl **)v103;
        if (*(_QWORD *)v103 != -1)
        {
          v105 = (WTF *)*((_QWORD *)v103 + 1);
          if (v105)
          {
            *((_QWORD *)v103 + 1) = 0;
            *((_DWORD *)v103 + 4) = 0;
            WTF::fastFree(v105, v33);
            v104 = *(WTF::StringImpl **)v103;
          }
          *(_QWORD *)v103 = 0;
          if (v104)
          {
            if (*(_DWORD *)v104 == 2)
              WTF::StringImpl::destroy(v104, (WTF::StringImpl *)v33);
            else
              *(_DWORD *)v104 -= 2;
          }
        }
        v103 = (WTF *)((char *)v103 + 24);
        --v102;
      }
      while (v102);
    }
    result = WTF::fastFree((WTF *)((char *)v34 - 16), v33);
  }
  v92 = (uint64_t)v120;
  if (v120)
  {
    v93 = *(v120 - 1);
    if ((_DWORD)v93)
    {
      for (i = 0; i != v93; ++i)
      {
        if (*(_DWORD *)(v92 + 24 * i) != -2)
        {
          v95 = v92 + 24 * i;
          v96 = (WTF::StringImpl ***)(v95 + 8);
          v97 = *(unsigned int *)(v95 + 20);
          if ((_DWORD)v97)
          {
            v99 = *v96;
            v100 = 8 * v97;
            do
            {
              v101 = *v99;
              *v99 = 0;
              if (v101)
              {
                if (*(_DWORD *)v101 == 2)
                  WTF::StringImpl::destroy(v101, (WTF::StringImpl *)v33);
                else
                  *(_DWORD *)v101 -= 2;
              }
              ++v99;
              v100 -= 8;
            }
            while (v100);
          }
          v98 = (WTF *)*v96;
          if (*v96)
          {
            *v96 = 0;
            *(_DWORD *)(v92 + 24 * i + 16) = 0;
            WTF::fastFree(v98, v33);
          }
        }
      }
    }
    return WTF::fastFree((WTF *)(v92 - 16), v33);
  }
  return result;
}

void WebCore::authoredGridTrackSizes(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringBuilder *v11;
  WTF::String *v12;
  __n128 v13;
  WTF::StringImpl *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl **v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl **v52;
  WTF *v53;
  _DWORD *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl **v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  unsigned int v72;
  WTF::StringImpl *v73[5];
  char v74;

  if ((*(_WORD *)(a2 + 28) & 0x70) == 0)
    goto LABEL_129;
  if (a3)
    v7 = 138;
  else
    v7 = 137;
  v8 = *(_QWORD *)(a2 + 104);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      WebCore::StyleProperties::getPropertyCSSValue(v9, v7, v73);
      v14 = v73[0];
      if (v73[0])
        goto LABEL_41;
    }
  }
  v15 = *(_QWORD **)(a2 + 40);
  if (*v15)
    v16 = (*(_WORD *)(*v15 + 28) & 0x80) == 0;
  else
    v16 = 1;
  if (v16)
    v55 = v15[1] + 1328;
  else
    v55 = *v15 + 216;
  v17 = *(_QWORD *)v55;
  if (!*(_QWORD *)(*(_QWORD *)v55 + 32))
  {
    if (*(_QWORD *)(v17 + 24))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v17);
    else
      WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v17);
    v57 = *(_QWORD *)(v17 + 32);
    if (*(_DWORD *)(v57 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v57 + 32), v56);
    if (*(_BYTE *)(v57 + 242)
      || *(_BYTE *)(v57 + 243)
      || *(_BYTE *)(v57 + 244)
      || *(_BYTE *)(v57 + 245)
      || *(_BYTE *)(v57 + 246)
      || *(_BYTE *)(v57 + 247)
      || *(_BYTE *)(v57 + 248))
    {
      *(_BYTE *)(v17 + 236) = 1;
    }
  }
  v18 = *(_QWORD *)(v17 + 32);
  LOBYTE(v73[0]) = 0;
  v74 = 0;
  WebCore::Style::Resolver::pseudoStyleRulesForElement(v18, (const WebCore::Element *)a2, (uint64_t)v73, 6, (uint64_t)&v71);
  v19 = v72;
  v20 = v71;
  v21 = 8 * v72;
  if (v72 >= 2)
  {
    v25 = 0;
    v26 = v72 - 1;
    v27 = (4 * v72) & 0x3FFFFFFF8;
    do
    {
      if (v21 == v25)
      {
        __break(0xC471u);
        JUMPOUT(0x195DDDF04);
      }
      if (v26 >= v19)
      {
        __break(0xC471u);
        JUMPOUT(0x195DDDF0CLL);
      }
      v28 = *(_QWORD *)((char *)v20 + v25);
      *(_QWORD *)((char *)v20 + v25) = 0;
      v29 = *((_QWORD *)v20 + v26);
      *((_QWORD *)v20 + v26) = 0;
      v30 = *(_DWORD **)((char *)v20 + v25);
      *(_QWORD *)((char *)v20 + v25) = v29;
      if (v30)
      {
        if (*v30 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v30, v10);
        else
          --*v30;
      }
      v31 = (_DWORD *)*((_QWORD *)v20 + v26);
      *((_QWORD *)v20 + v26) = v28;
      if (v31)
      {
        if (*v31 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v31, v10);
        else
          --*v31;
      }
      v25 += 8;
      --v26;
    }
    while (v27 != v25);
  }
  if ((_DWORD)v19)
  {
    v22 = v21;
    v23 = (uint64_t *)v20;
    do
    {
      v24 = *v23;
      if (*v23)
      {
        ++*(_DWORD *)v24;
        WebCore::StyleProperties::getPropertyCSSValue(*(_QWORD *)(v24 + 8), v7, v73);
        v14 = v73[0];
        if (*(_DWORD *)v24 == 1)
        {
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(v24, v10);
          if (v14)
            goto LABEL_81;
        }
        else
        {
          --*(_DWORD *)v24;
          if (v14)
            goto LABEL_81;
        }
      }
      ++v23;
      v22 -= 8;
    }
    while (v22);
    v14 = 0;
LABEL_81:
    v53 = v20;
    do
    {
      v54 = *(_DWORD **)v53;
      *(_QWORD *)v53 = 0;
      if (v54)
      {
        if (*v54 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v54, v10);
        else
          --*v54;
      }
      v53 = (WTF *)((char *)v53 + 8);
      v21 -= 8;
    }
    while (v21);
  }
  else
  {
    v14 = 0;
  }
  if (!v20)
  {
    if (v14)
      goto LABEL_41;
LABEL_129:
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  WTF::fastFree(v20, v10);
  if (!v14)
    goto LABEL_129;
LABEL_41:
  v32 = (*((unsigned __int16 *)v14 + 2) | (*((unsigned __int8 *)v14 + 6) << 16)) & 0x3F800;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (v32 != 120832)
    goto LABEL_121;
  v33 = *((_DWORD *)v14 + 2);
  if (!v33)
    goto LABEL_121;
  v34 = 0;
  v35 = 0;
  while (1)
  {
    if (v34 > 3)
    {
      if (*((_DWORD *)v14 + 2) <= v34)
      {
        __break(0xC471u);
        JUMPOUT(0x195DDDE8CLL);
      }
      v36 = *((_QWORD *)v14 + 6) + 8 * (v35 - 4);
    }
    else
    {
      v36 = (uint64_t)v14 + 8 * v35 + 16;
    }
    v37 = *(_QWORD *)v36;
    v38 = (*(unsigned __int16 *)(*(_QWORD *)v36 + 4) | (*(unsigned __int8 *)(*(_QWORD *)v36 + 6) << 16)) & 0x3F800;
    if (v38 != 81920)
      break;
LABEL_54:
    v34 = v35 + 1;
    v35 = (v35 + 1);
    if (v33 == v34)
      goto LABEL_121;
  }
  if (v38 != 124928)
  {
    if (v38 == 126976)
    {
      v69 = *(_QWORD *)(v37 + 56);
      if (v69)
      {
        v44 = *(_DWORD *)(v37 + 8);
        if (v44)
        {
          v70 = 0;
LABEL_63:
          v45 = 0;
          v46 = 0;
          do
          {
            if (v45 > 3)
            {
              if (*(_DWORD *)(v37 + 8) <= v45)
              {
                __break(0xC471u);
                JUMPOUT(0x195DDDEACLL);
              }
              v47 = *(_QWORD *)(v37 + 48) + 8 * (v46 - 4);
            }
            else
            {
              v47 = v37 + 16 + 8 * v46;
            }
            v10 = *(WTF::StringImpl **)v47;
            if (((*(unsigned __int16 *)(*(_QWORD *)v47 + 4) | (*(unsigned __int8 *)(*(_QWORD *)v47 + 6) << 16)) & 0x3F800) != 0x14000)
            {
              _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)v73, (uint64_t)v10, v11, v12, v13);
              v48 = *(unsigned int *)(a1 + 12);
              if ((_DWORD)v48 == *(_DWORD *)(a1 + 8))
              {
                v52 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v48 + 1, (unint64_t)v73);
                v48 = *(unsigned int *)(a1 + 12);
                v49 = *(_QWORD *)a1;
                v50 = *v52;
                *v52 = 0;
              }
              else
              {
                v49 = *(_QWORD *)a1;
                v50 = v73[0];
                v73[0] = 0;
              }
              *(_QWORD *)(v49 + 8 * v48) = v50;
              *(_DWORD *)(a1 + 12) = v48 + 1;
              v51 = v73[0];
              v73[0] = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, v10);
                else
                  *(_DWORD *)v51 -= 2;
              }
            }
            v45 = v46 + 1;
            v46 = (v46 + 1);
          }
          while (v44 != v45);
          while (v70 + 1 != v69)
          {
            ++v70;
            v44 = *(_DWORD *)(v37 + 8);
            if (v44)
              goto LABEL_63;
          }
        }
      }
    }
    else
    {
      _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)v73, v37, v11, v12, v13);
      v39 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v39 == *(_DWORD *)(a1 + 8))
      {
        v43 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v39 + 1, (unint64_t)v73);
        v39 = *(unsigned int *)(a1 + 12);
        v40 = *(_QWORD *)a1;
        v41 = *v43;
        *v43 = 0;
      }
      else
      {
        v40 = *(_QWORD *)a1;
        v41 = v73[0];
        v73[0] = 0;
      }
      *(_QWORD *)(v40 + 8 * v39) = v41;
      *(_DWORD *)(a1 + 12) = v39 + 1;
      v42 = v73[0];
      v73[0] = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v10);
        else
          *(_DWORD *)v42 -= 2;
      }
    }
    goto LABEL_54;
  }
  v58 = *(_DWORD *)(a1 + 12);
  if (v58 < a4)
  {
    v59 = *(_DWORD *)(v37 + 8);
    if (!v59)
    {
      while (1)
        ;
    }
    while (1)
    {
      do
      {
        v60 = v59;
        v59 = 0;
      }
      while (!v60);
      v61 = 0;
      v62 = 0;
      do
      {
        if (v61 > 3)
        {
          if (*(_DWORD *)(v37 + 8) <= v61)
          {
            __break(0xC471u);
            JUMPOUT(0x195DDDEFCLL);
          }
          v63 = *(_QWORD *)(v37 + 48) + 8 * (v62 - 4);
        }
        else
        {
          v63 = v37 + 16 + 8 * v62;
        }
        v10 = *(WTF::StringImpl **)v63;
        if (((*(unsigned __int16 *)(*(_QWORD *)v63 + 4) | (*(unsigned __int8 *)(*(_QWORD *)v63 + 6) << 16)) & 0x3F800) != 0x14000)
        {
          _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)v73, (uint64_t)v10, v11, v12, v13);
          v64 = *(unsigned int *)(a1 + 12);
          if ((_DWORD)v64 == *(_DWORD *)(a1 + 8))
          {
            v68 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v64 + 1, (unint64_t)v73);
            v64 = *(unsigned int *)(a1 + 12);
            v65 = *(_QWORD *)a1;
            v66 = *v68;
            *v68 = 0;
          }
          else
          {
            v65 = *(_QWORD *)a1;
            v66 = v73[0];
            v73[0] = 0;
          }
          *(_QWORD *)(v65 + 8 * v64) = v66;
          v58 = v64 + 1;
          *(_DWORD *)(a1 + 12) = v58;
          v67 = v73[0];
          v73[0] = 0;
          if (v67)
          {
            if (*(_DWORD *)v67 == 2)
            {
              WTF::StringImpl::destroy(v67, v10);
              v58 = *(_DWORD *)(a1 + 12);
            }
            else
            {
              *(_DWORD *)v67 -= 2;
            }
          }
          if (v58 >= a4)
            break;
        }
        v61 = v62 + 1;
        v62 = (v62 + 1);
      }
      while (v60 != v61);
      if (v58 >= a4)
        break;
      v59 = *(_DWORD *)(v37 + 8);
    }
  }
LABEL_121:
  if (*(_DWORD *)v14 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v10);
  else
    *(_DWORD *)v14 -= 2;
}

float WebCore::InspectorOverlay::buildGridOverlay(WebCore::InspectorOverlay::Grid const&,BOOL)::$_1::operator()(float *a1, uint64_t a2, float a3)
{
  float v3;
  float v6;
  float v7;
  uint64_t v8;
  WebCore::ScrollView *v9;
  void *v10;
  unint64_t v11;
  WTF *v12;
  WTF *v13;
  unsigned int v14;
  unsigned int v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  WebCore::ScrollView *v20;
  void *v21;
  unint64_t v22;
  WTF *v23;
  WTF *v24;
  unsigned int v25;
  unsigned int v26;
  float v27;
  float v28;
  float result;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  char v35;
  char v36;
  WTF *v37;
  WTF *v38;
  uint64_t v39;
  char v40;
  __int16 v41;
  int v42;
  int v43;

  v3 = a3;
  if (**(_BYTE **)a2)
  {
    if (**(_BYTE **)(a2 + 8))
      a3 = (float)*(int *)(*(_QWORD *)(a2 + 16) + 8) - a3;
    if (**(_BYTE **)(a2 + 24))
    {
      v6 = (float)*(int *)(*(_QWORD *)(a2 + 16) + 12) - **(float **)(a2 + 32);
      if (**(_BYTE **)(a2 + 8))
        goto LABEL_6;
    }
    else
    {
      v6 = **(float **)(a2 + 32);
      if (**(_BYTE **)(a2 + 8))
      {
LABEL_6:
        v7 = (float)*(int *)(*(_QWORD *)(a2 + 16) + 8) - v3;
        if (**(_BYTE **)(a2 + 24))
        {
LABEL_7:
          v3 = (float)*(int *)(*(_QWORD *)(a2 + 16) + 12) - **(float **)(a2 + 40);
          goto LABEL_19;
        }
        goto LABEL_12;
      }
    }
    v7 = v3;
    if (**(_BYTE **)(a2 + 24))
      goto LABEL_7;
LABEL_12:
    v3 = **(float **)(a2 + 40);
    goto LABEL_19;
  }
  if (**(_BYTE **)(a2 + 24))
    a3 = (float)*(int *)(*(_QWORD *)(a2 + 16) + 8) - **(float **)(a2 + 32);
  else
    a3 = **(float **)(a2 + 32);
  v6 = v3;
  if (**(_BYTE **)(a2 + 8))
    v6 = (float)*(int *)(*(_QWORD *)(a2 + 16) + 12) - v3;
  if (**(_BYTE **)(a2 + 24))
  {
    v7 = (float)*(int *)(*(_QWORD *)(a2 + 16) + 8) - **(float **)(a2 + 40);
    if (!**(_BYTE **)(a2 + 8))
      goto LABEL_19;
    goto LABEL_18;
  }
  v7 = **(float **)(a2 + 40);
  if (**(_BYTE **)(a2 + 8))
LABEL_18:
    v3 = (float)*(int *)(*(_QWORD *)(a2 + 16) + 12) - v3;
LABEL_19:
  v8 = *(_QWORD *)(a2 + 56);
  v9 = **(WebCore::ScrollView ***)(a2 + 48);
  v32 = __PAIR64__(LODWORD(v6), LODWORD(a3));
  v36 = 0;
  v33 = 0u;
  v34 = 0u;
  v35 = 0;
  v38 = 0;
  v39 = 0;
  v37 = 0;
  v40 = 0;
  v41 = 1;
  v42 = 0;
  v43 = 0;
  (*(void (**)(uint64_t, _QWORD, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v8 + 576))(v8, 0, &v32, 6, 0);
  WebCore::TransformState::flatten((WebCore::TransformState *)&v32, 0);
  v11 = v32;
  v12 = v38;
  v38 = 0;
  if (v12)
    WTF::fastFree(v12, v10);
  v13 = v37;
  v37 = 0;
  if (v13)
    WTF::fastFree(v13, v10);
  v31 = v11;
  WebCore::ScrollView::contentsToView(v9, (const WebCore::FloatPoint *)&v31);
  v32 = __PAIR64__(v15, v14);
  v16 = WebCore::Widget::convertToRootView(v9, (const WebCore::FloatPoint *)&v32);
  v18 = v17;
  v19 = *(_QWORD *)(a2 + 56);
  v20 = **(WebCore::ScrollView ***)(a2 + 48);
  v32 = __PAIR64__(LODWORD(v3), LODWORD(v7));
  v36 = 0;
  v33 = 0u;
  v34 = 0u;
  v35 = 0;
  v38 = 0;
  v39 = 0;
  v37 = 0;
  v40 = 0;
  v41 = 1;
  v42 = 0;
  v43 = 0;
  (*(void (**)(uint64_t, _QWORD, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v19 + 576))(v19, 0, &v32, 6, 0);
  WebCore::TransformState::flatten((WebCore::TransformState *)&v32, 0);
  v22 = v32;
  v23 = v38;
  v38 = 0;
  if (v23)
    WTF::fastFree(v23, v21);
  v24 = v37;
  v37 = 0;
  if (v24)
    WTF::fastFree(v24, v21);
  v30 = v22;
  WebCore::ScrollView::contentsToView(v20, (const WebCore::FloatPoint *)&v30);
  v32 = __PAIR64__(v26, v25);
  v27 = WebCore::Widget::convertToRootView(v20, (const WebCore::FloatPoint *)&v32);
  *a1 = v16;
  a1[1] = v18;
  a1[2] = v27;
  a1[3] = v28;
  result = sqrtf((float)((float)(v16 - v27) * (float)(v16 - v27)) + (float)((float)(v18 - v28) * (float)(v18 - v28)));
  a1[4] = result;
  return result;
}

float WebCore::InspectorOverlayLabel::expectedSize(WTF::StringImpl *a1, int a2)
{
  uint64_t v4;
  float v5;
  float v6;
  void *v7;
  WTF::StringImpl *v8;
  uint64_t v10[2];

  if (a1)
  {
    *(_DWORD *)a1 += 2;
    v4 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)a1 += 2;
  }
  else
  {
    v4 = WTF::fastMalloc((WTF *)0x20);
  }
  v10[0] = v4;
  v10[1] = 0x100000001;
  *(_QWORD *)v4 = a1;
  *(_QWORD *)(v4 + 8) = 0x11040000000000FFLL;
  *(_BYTE *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0x1104000000000000;
  WebCore::InspectorOverlayLabel::expectedSize(v10, a2);
  v6 = v5;
  WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v7);
  if (a1)
  {
    if (*(_DWORD *)a1 == 2)
      WTF::StringImpl::destroy(a1, v8);
    else
      *(_DWORD *)a1 -= 2;
  }
  return v6;
}

float WebCore::InspectorOverlay::buildGridOverlay(WebCore::InspectorOverlay::Grid const&,BOOL)::$_2::operator()(float *a1, uint64_t a2, float a3)
{
  float v3;
  float v6;
  float v7;
  uint64_t v8;
  WebCore::ScrollView *v9;
  void *v10;
  unint64_t v11;
  WTF *v12;
  WTF *v13;
  unsigned int v14;
  unsigned int v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  WebCore::ScrollView *v20;
  void *v21;
  unint64_t v22;
  WTF *v23;
  WTF *v24;
  unsigned int v25;
  unsigned int v26;
  float v27;
  float v28;
  float result;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  char v35;
  char v36;
  WTF *v37;
  WTF *v38;
  uint64_t v39;
  char v40;
  __int16 v41;
  int v42;
  int v43;

  v3 = a3;
  if (!**(_BYTE **)a2)
  {
    if (**(_BYTE **)(a2 + 32))
      a3 = (float)*(int *)(*(_QWORD *)(a2 + 16) + 8) - a3;
    if (**(_BYTE **)(a2 + 8))
    {
      v6 = (float)*(int *)(*(_QWORD *)(a2 + 16) + 12) - **(float **)(a2 + 24);
      if (**(_BYTE **)(a2 + 32))
        goto LABEL_8;
    }
    else
    {
      v6 = **(float **)(a2 + 24);
      if (**(_BYTE **)(a2 + 32))
      {
LABEL_8:
        v7 = (float)*(int *)(*(_QWORD *)(a2 + 16) + 8) - v3;
        if (**(_BYTE **)(a2 + 8))
        {
LABEL_9:
          v3 = (float)*(int *)(*(_QWORD *)(a2 + 16) + 12) - **(float **)(a2 + 40);
          goto LABEL_21;
        }
LABEL_20:
        v3 = **(float **)(a2 + 40);
        goto LABEL_21;
      }
    }
    v7 = v3;
    if (**(_BYTE **)(a2 + 8))
      goto LABEL_9;
    goto LABEL_20;
  }
  if (**(_BYTE **)(a2 + 8))
    a3 = (float)*(int *)(*(_QWORD *)(a2 + 16) + 8) - **(float **)(a2 + 24);
  else
    a3 = **(float **)(a2 + 24);
  v6 = v3;
  if (**(_BYTE **)(a2 + 32))
    v6 = (float)*(int *)(*(_QWORD *)(a2 + 16) + 12) - v3;
  if (!**(_BYTE **)(a2 + 8))
  {
    v7 = **(float **)(a2 + 40);
    if (!**(_BYTE **)(a2 + 32))
      goto LABEL_21;
    goto LABEL_17;
  }
  v7 = (float)*(int *)(*(_QWORD *)(a2 + 16) + 8) - **(float **)(a2 + 40);
  if (**(_BYTE **)(a2 + 32))
LABEL_17:
    v3 = (float)*(int *)(*(_QWORD *)(a2 + 16) + 12) - v3;
LABEL_21:
  v8 = *(_QWORD *)(a2 + 56);
  v9 = **(WebCore::ScrollView ***)(a2 + 48);
  v32 = __PAIR64__(LODWORD(v6), LODWORD(a3));
  v36 = 0;
  v33 = 0u;
  v34 = 0u;
  v35 = 0;
  v38 = 0;
  v39 = 0;
  v37 = 0;
  v40 = 0;
  v41 = 1;
  v42 = 0;
  v43 = 0;
  (*(void (**)(uint64_t, _QWORD, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v8 + 576))(v8, 0, &v32, 6, 0);
  WebCore::TransformState::flatten((WebCore::TransformState *)&v32, 0);
  v11 = v32;
  v12 = v38;
  v38 = 0;
  if (v12)
    WTF::fastFree(v12, v10);
  v13 = v37;
  v37 = 0;
  if (v13)
    WTF::fastFree(v13, v10);
  v31 = v11;
  WebCore::ScrollView::contentsToView(v9, (const WebCore::FloatPoint *)&v31);
  v32 = __PAIR64__(v15, v14);
  v16 = WebCore::Widget::convertToRootView(v9, (const WebCore::FloatPoint *)&v32);
  v18 = v17;
  v19 = *(_QWORD *)(a2 + 56);
  v20 = **(WebCore::ScrollView ***)(a2 + 48);
  v32 = __PAIR64__(LODWORD(v3), LODWORD(v7));
  v36 = 0;
  v33 = 0u;
  v34 = 0u;
  v35 = 0;
  v38 = 0;
  v39 = 0;
  v37 = 0;
  v40 = 0;
  v41 = 1;
  v42 = 0;
  v43 = 0;
  (*(void (**)(uint64_t, _QWORD, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v19 + 576))(v19, 0, &v32, 6, 0);
  WebCore::TransformState::flatten((WebCore::TransformState *)&v32, 0);
  v22 = v32;
  v23 = v38;
  v38 = 0;
  if (v23)
    WTF::fastFree(v23, v21);
  v24 = v37;
  v37 = 0;
  if (v24)
    WTF::fastFree(v24, v21);
  v30 = v22;
  WebCore::ScrollView::contentsToView(v20, (const WebCore::FloatPoint *)&v30);
  v32 = __PAIR64__(v26, v25);
  v27 = WebCore::Widget::convertToRootView(v20, (const WebCore::FloatPoint *)&v32);
  *a1 = v16;
  a1[1] = v18;
  a1[2] = v27;
  a1[3] = v28;
  result = sqrtf((float)((float)(v16 - v27) * (float)(v16 - v27)) + (float)((float)(v18 - v28) * (float)(v18 - v28)));
  a1[4] = result;
  return result;
}

uint64_t WebCore::drawLayoutStippling(WebCore *this, WebCore::GraphicsContext *a2, const WebCore::FloatQuad *a3, float a4)
{
  double *v7;
  void *v8;
  WTF *v9;
  WTF *v11;
  uint64_t v12;

  (*(void (**)(WebCore *, uint64_t, const WebCore::FloatQuad *))(*(_QWORD *)this + 96))(this, 1, a3);
  if (*((float *)this + 47) != 1.0)
  {
    *((_DWORD *)this + 46) |= 8u;
    *((_DWORD *)this + 47) = 1065353216;
  }
  (*(void (**)(WebCore *, char *))(*(_QWORD *)this + 88))(this, (char *)this + 8);
  if (*((_BYTE *)this + 193) != 3)
  {
    *((_BYTE *)this + 193) = 3;
    *((_DWORD *)this + 46) |= 0x10u;
  }
  (*(void (**)(WebCore *, char *))(*(_QWORD *)this + 88))(this, (char *)this + 8);
  v7 = (double *)WTF::fastMalloc((WTF *)0x10);
  v11 = (WTF *)v7;
  *v7 = 1.0;
  v7[1] = a4;
  v12 = 0x200000002;
  (*(void (**)(WebCore *, WTF **, float))(*(_QWORD *)this + 304))(this, &v11, 1.0);
  v9 = v11;
  if (v11)
  {
    v11 = 0;
    LODWORD(v12) = 0;
    WTF::fastFree(v9, v8);
  }
  WebCore::drawLayoutPattern((uint64_t)this, (float *)a2, (int)a4, 0);
  return (*(uint64_t (**)(WebCore *, uint64_t))(*(_QWORD *)this + 104))(this, 1);
}

void WebCore::InspectorOverlay::buildFlexOverlay(WebCore::InspectorOverlay::Flex const&)::$_10::operator()(WebCore::ScrollView ***a1, int a2, uint64_t a3, float a4, float a5, float a6, float a7)
{
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  WebCore::ScrollView **v17;
  WebCore::ScrollView **v18;
  WebCore::ScrollView *v19;
  void *v20;
  uint64_t v21;
  WTF *v22;
  WTF *v23;
  int v24;
  int v25;
  float v26;
  int v27;
  int v28;
  WebCore::ScrollView **v29;
  WebCore::ScrollView *v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  WTF *v34;
  int v35;
  int v36;
  float v37;
  int v38;
  int v39;
  WebCore::ScrollView **v40;
  WebCore::ScrollView *v41;
  void *v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  int v46;
  int v47;
  float v48;
  int v49;
  int v50;
  WebCore::ScrollView **v51;
  WebCore::ScrollView *v52;
  void *v53;
  uint64_t v54;
  WTF *v55;
  WTF *v56;
  int v57;
  int v58;
  float v59;
  int v60;
  uint64_t v61;
  __int128 *v62;
  _OWORD *v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[40];
  char v71;
  char v72;
  WTF *v73;
  WTF *v74;
  uint64_t v75;
  char v76;
  __int16 v77;
  int v78;
  int v79;

  if (a2)
    v9 = a6;
  else
    v9 = a4;
  if (a2)
    v10 = a4;
  else
    v10 = a6;
  if (a2)
    v11 = a6;
  else
    v11 = a5;
  if (a2)
    v12 = a5;
  else
    v12 = a6;
  if (a2)
    v13 = a7;
  else
    v13 = a5;
  if (a2)
    v14 = a5;
  else
    v14 = a7;
  if (a2)
    v15 = a7;
  else
    v15 = a4;
  if (a2)
    v16 = a4;
  else
    v16 = a7;
  v18 = *a1;
  v17 = a1[1];
  v19 = *v18;
  *(_QWORD *)v70 = __PAIR64__(LODWORD(v9), LODWORD(v10));
  v72 = 0;
  memset(&v70[8], 0, 32);
  v71 = 0;
  v74 = 0;
  v75 = 0;
  v73 = 0;
  v76 = 0;
  v77 = 1;
  v78 = 0;
  v79 = 0;
  (*((void (**)(WebCore::ScrollView **, _QWORD, _BYTE *, uint64_t, _QWORD))*v17 + 72))(v17, 0, v70, 6, 0);
  WebCore::TransformState::flatten((WebCore::TransformState *)v70, 0);
  v21 = *(_QWORD *)v70;
  v22 = v74;
  v74 = 0;
  if (v22)
    WTF::fastFree(v22, v20);
  v23 = v73;
  v73 = 0;
  if (v23)
    WTF::fastFree(v23, v20);
  v69 = v21;
  WebCore::ScrollView::contentsToView(v19, (const WebCore::FloatPoint *)&v69);
  *(_DWORD *)v70 = v24;
  *(_DWORD *)&v70[4] = v25;
  v26 = WebCore::Widget::convertToRootView(v19, (const WebCore::FloatPoint *)v70);
  v28 = v27;
  v29 = a1[1];
  v30 = **a1;
  *(_QWORD *)v70 = __PAIR64__(LODWORD(v11), LODWORD(v12));
  v72 = 0;
  memset(&v70[8], 0, 32);
  v71 = 0;
  v74 = 0;
  v75 = 0;
  v73 = 0;
  v76 = 0;
  v77 = 1;
  v78 = 0;
  v79 = 0;
  (*((void (**)(WebCore::ScrollView **, _QWORD, _BYTE *, uint64_t, _QWORD))*v29 + 72))(v29, 0, v70, 6, 0);
  WebCore::TransformState::flatten((WebCore::TransformState *)v70, 0);
  v32 = *(_QWORD *)v70;
  v33 = v74;
  v74 = 0;
  if (v33)
    WTF::fastFree(v33, v31);
  v34 = v73;
  v73 = 0;
  if (v34)
    WTF::fastFree(v34, v31);
  v68 = v32;
  WebCore::ScrollView::contentsToView(v30, (const WebCore::FloatPoint *)&v68);
  *(_DWORD *)v70 = v35;
  *(_DWORD *)&v70[4] = v36;
  v37 = WebCore::Widget::convertToRootView(v30, (const WebCore::FloatPoint *)v70);
  v39 = v38;
  v40 = a1[1];
  v41 = **a1;
  *(_QWORD *)v70 = __PAIR64__(LODWORD(v13), LODWORD(v14));
  v72 = 0;
  memset(&v70[8], 0, 32);
  v71 = 0;
  v74 = 0;
  v75 = 0;
  v73 = 0;
  v76 = 0;
  v77 = 1;
  v78 = 0;
  v79 = 0;
  (*((void (**)(WebCore::ScrollView **, _QWORD, _BYTE *, uint64_t, _QWORD))*v40 + 72))(v40, 0, v70, 6, 0);
  WebCore::TransformState::flatten((WebCore::TransformState *)v70, 0);
  v43 = *(_QWORD *)v70;
  v44 = v74;
  v74 = 0;
  if (v44)
    WTF::fastFree(v44, v42);
  v45 = v73;
  v73 = 0;
  if (v45)
    WTF::fastFree(v45, v42);
  v67 = v43;
  WebCore::ScrollView::contentsToView(v41, (const WebCore::FloatPoint *)&v67);
  *(_DWORD *)v70 = v46;
  *(_DWORD *)&v70[4] = v47;
  v48 = WebCore::Widget::convertToRootView(v41, (const WebCore::FloatPoint *)v70);
  v50 = v49;
  v51 = a1[1];
  v52 = **a1;
  *(_QWORD *)v70 = __PAIR64__(LODWORD(v15), LODWORD(v16));
  v72 = 0;
  memset(&v70[8], 0, 32);
  v71 = 0;
  v74 = 0;
  v75 = 0;
  v73 = 0;
  v76 = 0;
  v77 = 1;
  v78 = 0;
  v79 = 0;
  (*((void (**)(WebCore::ScrollView **, _QWORD, _BYTE *, uint64_t, _QWORD))*v51 + 72))(v51, 0, v70, 6, 0);
  WebCore::TransformState::flatten((WebCore::TransformState *)v70, 0);
  v54 = *(_QWORD *)v70;
  v55 = v74;
  v74 = 0;
  if (v55)
    WTF::fastFree(v55, v53);
  v56 = v73;
  v73 = 0;
  if (v56)
    WTF::fastFree(v56, v53);
  v66 = v54;
  WebCore::ScrollView::contentsToView(v52, (const WebCore::FloatPoint *)&v66);
  *(_DWORD *)v70 = v57;
  *(_DWORD *)&v70[4] = v58;
  v59 = WebCore::Widget::convertToRootView(v52, (const WebCore::FloatPoint *)v70);
  *(float *)v70 = v26;
  *(_DWORD *)&v70[4] = v28;
  *(float *)&v70[8] = v37;
  *(_DWORD *)&v70[12] = v39;
  *(float *)&v70[16] = v48;
  *(_DWORD *)&v70[20] = v50;
  *(float *)&v70[24] = v59;
  *(_DWORD *)&v70[28] = v60;
  v61 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v61 == *(_DWORD *)(a3 + 8))
  {
    v62 = (__int128 *)WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v61 + 1, (unint64_t)v70);
    v63 = (_OWORD *)(*(_QWORD *)a3 + 32 * *(unsigned int *)(a3 + 12));
    v64 = *v62;
    v65 = v62[1];
  }
  else
  {
    v63 = (_OWORD *)(*(_QWORD *)a3 + 32 * v61);
    v64 = *(_OWORD *)v70;
    v65 = *(_OWORD *)&v70[16];
  }
  *v63 = v64;
  v63[1] = v65;
  ++*(_DWORD *)(a3 + 12);
}

void WebCore::systemFont(WebCore *this)
{
  _DWORD *v2;
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WebCore *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WebCore *v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  _OWORD v27[6];
  uint64_t v28;
  char v29;
  _DWORD *v30;
  __int16 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  char v39;
  WTF *v40;
  int v41;
  __int16 v42;
  WebCore *v43;

  v28 = 256;
  memset(v27, 0, sizeof(v27));
  v29 = 0;
  v2 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v2 += 2;
  v30 = v2;
  v31 = 0;
  v32 = 2143289344;
  v33 = 0;
  v34 = 0;
  v35 = 26216000;
  v36 = 257;
  v37 = 0xE00000000000;
  v39 = 0;
  v38 = 0;
  v3 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v3 = 0x100000001;
  *(_QWORD *)(v3 + 8) = 0;
  v4 = (WTF::StringImpl **)(v3 + 8);
  v40 = (WTF *)v3;
  v41 = 0;
  v42 = 0;
  WTF::AtomStringImpl::add();
  v5 = v43;
  v6 = (WTF *)WTF::fastMalloc((WTF *)8);
  v7 = v6;
  if (v43)
    *(_DWORD *)v43 += 2;
  *(_QWORD *)v6 = v5;
  v8 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v8 = 0x100000001;
  v10 = *(WTF::StringImpl **)v7;
  if (*(_QWORD *)v7)
    *(_DWORD *)v10 += 2;
  *((_QWORD *)v8 + 1) = v10;
  v40 = v8;
  if (*(_DWORD *)v3 == 1)
  {
    v20 = *(unsigned int *)(v3 + 4);
    if ((_DWORD)v20)
    {
      v21 = 8 * v20;
      do
      {
        v22 = *v4;
        *v4 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v9);
          else
            *(_DWORD *)v22 -= 2;
        }
        ++v4;
        v21 -= 8;
      }
      while (v21);
    }
    WTF::fastFree((WTF *)v3, v9);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  v11 = *(WTF::StringImpl **)v7;
  *(_QWORD *)v7 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  WTF::fastFree(v7, v9);
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v12);
    else
      *(_DWORD *)v5 -= 2;
  }
  LOWORD(v35) = 2000;
  LODWORD(v37) = 1094713344;
  v13 = (WebCore *)WebCore::FontCascade::FontCascade((uint64_t)this, (uint64_t *)v27);
  v43 = 0;
  v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v14 || (v15 = *(_QWORD *)(v14 + 96)) == 0)
    v15 = WebCore::threadGlobalDataSlow(v13);
  v16 = *(_QWORD *)(v15 + 80);
  if (!v16)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v15);
    v16 = *(_QWORD *)(v15 + 80);
  }
  WebCore::FontCache::updateFontCascade(v16, (uint64_t)this, &v43);
  v18 = v43;
  v43 = 0;
  if (v18)
  {
    if (*((_DWORD *)v18 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v18 + 8))(v18);
    else
      --*((_DWORD *)v18 + 2);
  }
  v19 = (unsigned int *)v40;
  v40 = 0;
  if (v19)
  {
    if (*v19 == 1)
    {
      v23 = v19[1];
      if ((_DWORD)v23)
      {
        v24 = (WTF::StringImpl **)(v19 + 2);
        v25 = 8 * v23;
        do
        {
          v26 = *v24;
          *v24 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v17);
            else
              *(_DWORD *)v26 -= 2;
          }
          ++v24;
          v25 -= 8;
        }
        while (v25);
      }
      WTF::fastFree((WTF *)v19, v17);
    }
    else
    {
      --*v19;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v27, v17);
}

uint64_t WebCore::InspectorShaderProgram::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t result;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v6 = WTF::fastMalloc((WTF *)0x28);
  v7 = 1;
  *(_DWORD *)v6 = 1;
  v8 = (_QWORD *)(v6 + 8);
  result = Inspector::IdentifiersFactory::createIdentifier((Inspector::IdentifiersFactory *)v6);
  if (v12)
  {
    v10 = *((_DWORD *)v12 + 1);
    if (v10 < 0 || (result = (v10 + 8), __OFADD__(v10, 8)))
    {
      *v8 = 0;
      goto LABEL_13;
    }
    v7 = (*((unsigned __int8 *)v12 + 16) >> 2) & 1;
  }
  else
  {
    result = 8;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v7, (int8x16_t *)"program:", 8u, (uint64_t)v12, v8);
  if (!*v8)
  {
LABEL_13:
    __break(0xC471u);
    return result;
  }
  result = (uint64_t)v12;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      result = WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a1;
  *(_WORD *)(v6 + 32) = 0;
  *a3 = v6;
  return result;
}

uint64_t WebCore::InspectorShaderProgram::updateShader(uint64_t a1, int a2, const WTF::String *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  const char *v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  const char *v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  WTF *v45;
  void *v46;
  WTF::StringImpl *v47;
  const char *v48;
  WTF::StringImpl *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  char **v54;
  unsigned int v55;
  unsigned int v56;
  BOOL v57;
  uint64_t v58;
  unint64_t v59;
  __int16 v60;
  char v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  int v64;

  v5 = *(_QWORD *)(a1 + 24);
  if (a2 == 79)
  {
    v6 = (uint64_t *)(v5 + 72);
  }
  else
  {
    if (a2 != 80)
      return 0;
    v6 = (uint64_t *)(v5 + 64);
  }
  v7 = *v6;
  if (!*v6)
    return 0;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) + 8);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8) & 1) == 0
    && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8))
  {
    return 0;
  }
  WebCore::WebGLRenderingContextBase::shaderSource((WTF::StringImpl *)(v8 - 8), (WebCore::WebGLShader *)v7, a3);
  if (*(_BYTE *)(v8 + 356))
    goto LABEL_24;
  v9 = *(_QWORD *)(v7 + 16);
  if (!v9 || ((v10 = *(_QWORD *)(v9 + 8)) != 0 ? (v11 = v10 == v8) : (v11 = 0), !v11))
  {
    v12 = "object does not belong to this context";
    v13 = (WTF::StringImpl *)(v8 - 8);
    v14 = 1282;
    v15 = 39;
LABEL_15:
    WebCore::WebGLRenderingContextBase::synthesizeGLError(v13, v14, (uint64_t)"compileShader", 14, (uint64_t)v12, v15);
    goto LABEL_16;
  }
  if (!*(_DWORD *)(v7 + 24))
  {
    v12 = "attempt to use a deleted object";
    v13 = (WTF::StringImpl *)(v8 - 8);
    v14 = 1281;
    v15 = 32;
    goto LABEL_15;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 80) + 168))(*(_QWORD *)(v8 + 80));
LABEL_16:
  if (!*(_BYTE *)(v8 + 356))
  {
    v16 = *(_QWORD *)(v7 + 16);
    if (!v16 || ((v17 = *(_QWORD *)(v16 + 8)) != 0 ? (v18 = v17 == v8) : (v18 = 0), !v18))
    {
      v19 = "object does not belong to this context";
      v20 = (WTF::StringImpl *)(v8 - 8);
      v21 = 1282;
      v22 = 39;
LABEL_23:
      WebCore::WebGLRenderingContextBase::synthesizeGLError(v20, v21, (uint64_t)"getShaderParameter", 19, (uint64_t)v19, v22);
      goto LABEL_24;
    }
    v26 = *(unsigned int *)(v7 + 24);
    if (!(_DWORD)v26)
    {
      v19 = "attempt to use a deleted object";
      v20 = (WTF::StringImpl *)(v8 - 8);
      v21 = 1281;
      v22 = 32;
      goto LABEL_23;
    }
    v27 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v8 + 80) + 552))(*(_QWORD *)(v8 + 80), v26, 35713);
    LOBYTE(v63) = v27 != 0;
    v64 = 1;
    if (v27)
    {
      if (*(_BYTE *)(v8 + 356))
        goto LABEL_71;
      v28 = *(_QWORD *)(a1 + 24);
      v29 = *(_QWORD *)(v28 + 16);
      if (v29 && (v30 = *(_QWORD *)(v29 + 8)) != 0 && v30 == v8)
      {
        if (*(_DWORD *)(v28 + 24))
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 80) + 712))(*(_QWORD *)(v8 + 80));
          goto LABEL_71;
        }
        v48 = "attempt to use a deleted object";
        v49 = (WTF::StringImpl *)(v8 - 8);
        v50 = 1281;
        v51 = 32;
      }
      else
      {
        v48 = "object does not belong to this context";
        v49 = (WTF::StringImpl *)(v8 - 8);
        v50 = 1282;
        v51 = 39;
      }
      WebCore::WebGLRenderingContextBase::synthesizeGLError(v49, v50, (uint64_t)"linkProgram", 12, (uint64_t)v48, v51);
LABEL_71:
      v23 = 1;
      v24 = 1;
      goto LABEL_25;
    }
    WebCore::WebGLRenderingContextBase::getShaderInfoLog((WTF::StringImpl *)(v8 - 8), (WebCore::WebGLShader *)v7, &v62);
    v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) + 8) + 32);
    v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 144))(v31);
    v33 = v62;
    if (v62)
    {
      v34 = *((_QWORD *)v62 + 1);
      v35 = *((unsigned int *)v62 + 1) | ((unint64_t)((*((_DWORD *)v62 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v34 = 0;
      v35 = 0x100000000;
    }
    v58 = v34;
    v59 = v35;
    v60 = 10;
    v61 = 0;
    v54 = (char **)&v58;
    v55 = 0;
    v57 = (_DWORD)v35 == 0;
    result = WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v54);
    v37 = v59;
    while (1)
    {
      if (v55 == v37 && v57)
      {
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            WTF::StringImpl::destroy(v33, v36);
          else
            *(_DWORD *)v33 -= 2;
        }
        goto LABEL_71;
      }
      v38 = *((unsigned int *)v54 + 2);
      if (v38 <= v55)
      {
        LODWORD(v39) = 0;
        v42 = 0x100000000;
        v41 = "";
        goto LABEL_55;
      }
      LODWORD(v39) = v56;
      if (v38 - v55 > v56)
        goto LABEL_47;
      if (v55)
        break;
      v41 = *v54;
      v39 = (uint64_t)v54[1];
LABEL_54:
      v42 = v39;
      if ((v39 & 0x80000000) != 0)
        goto LABEL_76;
LABEL_55:
      result = (v39 + 7);
      if (__OFADD__((_DWORD)v39, 7))
        goto LABEL_76;
      result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(result, (v42 & 0xFF00000000) != 0, (int8x16_t *)"WebGL: ", 7u, v41, v42, &v53);
      if (!v53)
        goto LABEL_77;
      WTF::fastMalloc((WTF *)0x60);
      v52 = Inspector::ConsoleMessage::ConsoleMessage();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v32 + 240))(v32, &v52);
      v44 = v52;
      v52 = 0;
      if (v44)
      {
        v45 = (WTF *)MEMORY[0x19AEA5F58](v44);
        WTF::fastFree(v45, v46);
      }
      v47 = v53;
      v53 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v43);
        else
          *(_DWORD *)v47 -= 2;
      }
      result = WTF::StringView::SplitResult::Iterator::operator++();
    }
    LODWORD(v39) = v38 - v55;
LABEL_47:
    v39 = v39;
    v40 = v38 - v55;
    if (*((_BYTE *)v54 + 12))
    {
      if (v40 < v39)
        goto LABEL_75;
      v41 = &(*v54)[v55];
      v39 = v39 | 0x100000000;
    }
    else
    {
      if (v40 < v39)
      {
LABEL_75:
        __break(1u);
LABEL_76:
        v53 = 0;
LABEL_77:
        __break(0xC471u);
        return result;
      }
      v41 = &(*v54)[2 * v55];
    }
    goto LABEL_54;
  }
LABEL_24:
  v23 = 0;
  v24 = 0;
  v63 = 0;
  v64 = 0;
LABEL_25:
  off_1E33EE9F0[v23](&v58, &v63);
  return v24;
}

uint64_t *Inspector::Protocol::Canvas::ShaderProgram::Builder<0>::setProgramId(uint64_t *a1, WTF::JSONImpl::Value *a2)
{
  uint64_t v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  _BYTE v19[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v5);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v17, (const WTF::StringImpl *)&v18, (uint64_t)v19);
  if (v19[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v17);
      v8 = *(unsigned int *)(v4 + 36);
      v15 = *(_QWORD *)(v4 + 24);
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *(_QWORD *)(v15 + 8 * v8) = v16;
    }
    else
    {
      v9 = *v7;
      v10 = v17;
      if (v17)
        *(_DWORD *)v17 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v18;
  v18 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  return a1;
}

uint64_t *Inspector::Protocol::Canvas::ShaderProgram::Builder<1>::setProgramType(uint64_t *a1, Inspector::Protocol::Helpers *a2)
{
  uint64_t v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _DWORD **v15;
  uint64_t v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  _BYTE v21[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::Protocol::Helpers::getEnumConstantValue(a2);
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v18, v5);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v19, (const WTF::StringImpl *)&v20, (uint64_t)v21);
  if (v21[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v15 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v19);
      v8 = *(unsigned int *)(v4 + 36);
      v16 = *(_QWORD *)(v4 + 24);
      v17 = *v15;
      if (*v15)
        *v17 += 2;
      *(_QWORD *)(v16 + 8 * v8) = v17;
    }
    else
    {
      v9 = *v7;
      v10 = v19;
      if (v19)
        *(_DWORD *)v19 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v20;
  v20 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v6);
    else
      *(_DWORD *)v13 -= 2;
  }
  return a1;
}

uint64_t *Inspector::Protocol::Canvas::ShaderProgram::Builder<3>::setCanvasId(uint64_t *a1, WTF::JSONImpl::Value *a2)
{
  uint64_t v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  _BYTE v19[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v5);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v17, (const WTF::StringImpl *)&v18, (uint64_t)v19);
  if (v19[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v17);
      v8 = *(unsigned int *)(v4 + 36);
      v15 = *(_QWORD *)(v4 + 24);
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *(_QWORD *)(v15 + 8 * v8) = v16;
    }
    else
    {
      v9 = *v7;
      v10 = v17;
      if (v17)
        *(_DWORD *)v17 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v18;
  v18 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  return a1;
}

uint64_t WebCore::ParsedStyleSheet::setSourceData(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  void *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;

  v2 = result;
  if (*a2)
  {
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = 0;
    v4[1] = 0;
    v6 = *(WTF **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = v4;
    if (v6)
    {
      v7 = *((unsigned int *)v6 + 3);
      if ((_DWORD)v7)
      {
        v8 = *(uint64_t **)v6;
        v9 = 8 * v7;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
            WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v10, v5);
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      v11 = *(WTF **)v6;
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)v6 = 0;
        *((_DWORD *)v6 + 2) = 0;
        WTF::fastFree(v11, v5);
      }
      WTF::fastFree(v6, v5);
      v12 = *(_QWORD *)(v2 + 16);
    }
    else
    {
      v12 = (uint64_t)v4;
    }
    return WebCore::flattenSourceData(*a2, v12);
  }
  else
  {
    v13 = *(WTF **)(result + 16);
    *(_QWORD *)(result + 16) = 0;
    if (v13)
    {
      v14 = *((unsigned int *)v13 + 3);
      if ((_DWORD)v14)
      {
        v15 = *(uint64_t **)v13;
        v16 = 8 * v14;
        do
        {
          v17 = *v15;
          *v15 = 0;
          if (v17)
            WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v17, a2);
          ++v15;
          v16 -= 8;
        }
        while (v16);
      }
      v18 = *(WTF **)v13;
      if (*(_QWORD *)v13)
      {
        *(_QWORD *)v13 = 0;
        *((_DWORD *)v13 + 2) = 0;
        WTF::fastFree(v18, a2);
      }
      return WTF::fastFree(v13, a2);
    }
  }
  return result;
}

uint64_t WebCore::flattenSourceData(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _DWORD *v15;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    v4 = *(_QWORD *)result;
    v5 = 8 * v2;
    while (1)
    {
      v6 = *(_DWORD **)v4;
      v7 = *(unsigned __int8 *)(*(_QWORD *)v4 + 4);
      if (v7 > 0x18)
        break;
      v8 = 1 << v7;
      if ((v8 & 0xBA4FED) == 0)
      {
        if ((v8 & 0x1451012) == 0)
          break;
        ++*v6;
        v15 = v6;
        v9 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v9 == *(_DWORD *)(a2 + 8))
        {
          v10 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, v9 + 1, (unint64_t)&v15);
          v9 = *(unsigned int *)(a2 + 12);
          v11 = *(char **)a2;
          v12 = *(_QWORD *)v10;
          *(_QWORD *)v10 = 0;
          *(_QWORD *)&v11[8 * v9] = v12;
        }
        else
        {
          v13 = *(char **)a2;
          v15 = 0;
          *(_QWORD *)&v13[8 * v9] = v6;
        }
        *(_DWORD *)(a2 + 12) = v9 + 1;
        v14 = (uint64_t)v15;
        v15 = 0;
        if (v14)
          WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v14, (void *)a2);
        result = WebCore::flattenSourceData(*(_QWORD *)v4 + 48, a2);
      }
      v4 += 8;
      v5 -= 8;
      if (!v5)
        return result;
    }
    result = 126;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::StyleSheetHandler::startRuleHeader(uint64_t result, void *a2, int a3)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = (char)a2;
  v5 = result;
  if (*(_QWORD *)(result + 40))
  {
    v6 = *(unsigned int *)(result + 36);
    if (!(_DWORD)v6)
    {
      __break(0xC471u);
      return result;
    }
    v7 = v6 - 1;
    v8 = *(_QWORD *)(result + 24);
    v9 = *(_QWORD *)(v8 + 8 * v7);
    *(_QWORD *)(v8 + 8 * v7) = 0;
    if (v9)
      WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v9, a2);
    *(_DWORD *)(v5 + 36) = v7;
  }
  v10 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)v10 = 1;
  *(_BYTE *)(v10 + 4) = v4;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  v11 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v11 = 1;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = 0;
  *(_QWORD *)(v10 + 40) = v11;
  *(_WORD *)(v10 + 64) = 0;
  v19 = v10;
  *(_DWORD *)(v10 + 8) = a3;
  ++*(_DWORD *)v10;
  result = *(_QWORD *)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v10;
  if (result)
    result = WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(result, v12);
  v13 = *(unsigned int *)(v5 + 36);
  if ((_DWORD)v13 == *(_DWORD *)(v5 + 32))
  {
    v14 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v5 + 24), v13 + 1, (unint64_t)&v19);
    v16 = *(unsigned int *)(v5 + 36);
    v17 = *(_QWORD *)(v5 + 24);
    v18 = *(_QWORD *)v14;
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(v17 + 8 * v16) = v18;
    result = v19;
    *(_DWORD *)(v5 + 36) = v16 + 1;
    v19 = 0;
    if (result)
      return WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(result, v15);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v13) = v10;
    *(_DWORD *)(v5 + 36) = v13 + 1;
  }
  return result;
}

uint64_t WebCore::StyleSheetHandler::endRuleHeader(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;

  v2 = **(_QWORD **)(this + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    v4 = *(unsigned int *)(v2 + 4);
    if ((*(_BYTE *)(v2 + 16) & 4) == 0)
    {
      if (v4 >= a2)
      {
        v5 = *(unsigned int *)(this + 36);
        if ((_DWORD)v5)
        {
          v6 = a2;
          v7 = *(_QWORD *)(*(_QWORD *)(this + 24) + 8 * v5 - 8);
          v8 = *(unsigned int *)(v7 + 8);
          if (v8 < a2)
          {
            v9 = v3 - 2;
            while (1)
            {
              v10 = *(unsigned __int16 *)(v9 + 2 * v6);
              v11 = v10 > 0x20;
              v12 = (1 << v10) & 0x100003600;
              if (v11 || v12 == 0)
                break;
              if (--v6 <= v8)
              {
                LODWORD(v6) = *(_DWORD *)(v7 + 8);
                break;
              }
            }
          }
          *(_DWORD *)(v7 + 12) = v6;
          v14 = *(_DWORD *)(v7 + 36);
          if (!v14)
            return this;
LABEL_27:
          *(_DWORD *)(*(_QWORD *)(v7 + 24) + 8 * v14 - 4) = v6;
          return this;
        }
LABEL_30:
        __break(0xC471u);
        JUMPOUT(0x195DDFB20);
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  if (v4 < a2)
    goto LABEL_29;
  v15 = *(unsigned int *)(this + 36);
  if (!(_DWORD)v15)
    goto LABEL_30;
  v6 = a2;
  v7 = *(_QWORD *)(*(_QWORD *)(this + 24) + 8 * v15 - 8);
  v16 = *(unsigned int *)(v7 + 8);
  if (v16 < a2)
  {
    v17 = v3 - 1;
    while (1)
    {
      v18 = *(unsigned __int8 *)(v17 + v6);
      v11 = v18 > 0x20;
      v19 = (1 << v18) & 0x100003600;
      if (v11 || v19 == 0)
        break;
      if (--v6 <= v16)
      {
        LODWORD(v6) = *(_DWORD *)(v7 + 8);
        break;
      }
    }
  }
  *(_DWORD *)(v7 + 12) = v6;
  v14 = *(_DWORD *)(v7 + 36);
  if (v14)
    goto LABEL_27;
  return this;
}

char *WebCore::StyleSheetHandler::observeSelector(char *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v3 - 8);
    this = (char *)(v4 + 24);
    v8 = __PAIR64__(a3, a2);
    v5 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v5 == *(_DWORD *)(v4 + 32))
    {
      this = WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v5 + 1, (unint64_t)&v8);
      v5 = *(unsigned int *)(v4 + 36);
      v6 = *(_QWORD *)(v4 + 24);
      v7 = *(_QWORD *)this;
    }
    else
    {
      v6 = *(_QWORD *)this;
      v7 = v8;
    }
    *(_QWORD *)(v6 + 8 * v5) = v7;
    ++*(_DWORD *)(v4 + 36);
  }
  else
  {
    __break(0xC471u);
  }
  return this;
}

uint64_t WebCore::StyleSheetHandler::startRuleBody(WebCore::StyleSheetHandler *this, void *a2)
{
  unsigned int v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v2 = a2;
  result = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (result)
    result = WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(result, a2);
  v5 = **((_QWORD **)this + 1);
  if (v5 && *(_DWORD *)(v5 + 4) > v2)
  {
    v6 = *(_QWORD *)(v5 + 8);
    v7 = (*(_BYTE *)(v5 + 16) & 4) != 0 ? *(unsigned __int8 *)(v6 + v2) : *(unsigned __int16 *)(v6 + 2 * v2);
    if (v7 == 123)
      ++v2;
  }
  v8 = *((unsigned int *)this + 9);
  if ((_DWORD)v8)
    *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8 * v8 - 8) + 16) = v2;
  else
    __break(0xC471u);
  return result;
}

uint64_t WebCore::StyleSheetHandler::endRuleBody(WebCore::StyleSheetHandler *this, void *a2)
{
  uint64_t v2;
  WebCore::StyleSheetHandler *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  BOOL v32;
  uint64_t v33;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  int v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  WebCore::StyleSheetHandler *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  _QWORD *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  int v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t result;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  WTF::StringImpl *v105;

  v2 = *((unsigned int *)this + 9);
  if (!(_DWORD)v2)
  {
    __break(0xC471u);
    JUMPOUT(0x195DE0378);
  }
  v3 = this;
  v4 = v2 - 1;
  *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8 * (v2 - 1)) + 20) = (_DWORD)a2;
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)v3 + 5) = 0;
  if (v5)
  {
    WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v5, a2);
    v6 = *((unsigned int *)v3 + 9);
    if (!(_DWORD)v6)
    {
LABEL_148:
      __break(0xC471u);
      JUMPOUT(0x195DE0368);
    }
    v4 = v6 - 1;
  }
  v7 = *((_QWORD *)v3 + 3);
  v8 = *(_QWORD *)(v7 + 8 * v4);
  *(_QWORD *)(v7 + 8 * v4) = 0;
  v104 = v8;
  v9 = *((_QWORD *)v3 + 3);
  v10 = *(_QWORD *)(v9 + 8 * v4);
  *(_QWORD *)(v9 + 8 * v4) = 0;
  if (v10)
    WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v10, a2);
  *((_DWORD *)v3 + 9) = v4;
  v103 = v8;
  v11 = *(_QWORD *)(v8 + 40);
  if (!v11)
    goto LABEL_121;
  v12 = **((_QWORD **)v3 + 1);
  if (!v12)
  {
    v13 = 0;
    v14 = 0;
    goto LABEL_65;
  }
  v13 = *(_QWORD *)(v12 + 8);
  v14 = *(unsigned int *)(v12 + 4);
  if ((*(_BYTE *)(v12 + 16) & 4) != 0)
  {
LABEL_65:
    v38 = *(unsigned int *)(v11 + 20);
    if (!(_DWORD)v38)
      goto LABEL_121;
    v39 = 0;
    v40 = *(unsigned int *)(v103 + 16);
    v41 = (v38 - 1);
    v42 = *(_QWORD *)(v11 + 8);
    v101 = v40 - 1;
    v102 = -(int)v40;
    v97 = v41;
    v99 = *(unsigned int *)(v11 + 20);
    while (1)
    {
      v43 = v42;
      if (v39 >= v41)
      {
        v42 = 0;
      }
      else
      {
        if (v39 + 1 >= *(unsigned int *)(v11 + 20))
        {
          __break(0xC471u);
          JUMPOUT(0x195DE0370);
        }
        v42 = *(_QWORD *)(v11 + 8) + 32 * (v39 + 1);
      }
      if (!*(_BYTE *)(v43 + 18))
      {
        v44 = *(_DWORD *)(v43 + 24);
        if (!v44)
          goto LABEL_154;
        v45 = (v101 + v44);
        if (v14 <= v45)
          goto LABEL_144;
        if (*(_BYTE *)(v13 + v45) != 59)
        {
LABEL_154:
          if (v42)
            v46 = *(_DWORD *)(v42 + 20) + v40;
          else
            v46 = *(_DWORD *)(v103 + 20);
          v47 = (v46 - 1);
          v48 = v47;
          if (v14 <= v47)
            goto LABEL_144;
          while (1)
          {
            v49 = *(unsigned __int8 *)(v13 + v48);
            v32 = v49 > 0x20;
            v50 = (1 << v49) & 0x100003600;
            if (v32 || v50 == 0)
              break;
            v48 = (v46 - 2);
            --v46;
            LODWORD(v47) = v47 - 1;
            if (v48 >= v14)
              goto LABEL_144;
          }
          if (v102 + v46 != v44)
            break;
        }
      }
LABEL_72:
      if (++v39 == v38)
        goto LABEL_121;
    }
    *(_DWORD *)(v43 + 24) = v102 + v46;
    if (*(_QWORD *)v43)
      v52 = *(_DWORD *)(*(_QWORD *)v43 + 4);
    else
      v52 = 0;
    v53 = (*(_DWORD *)(v43 + 20) + v40 + v52);
    if (v53 >= v46 - 1)
    {
      v55 = 0;
    }
    else
    {
      if (v14 <= v53)
        v54 = v53;
      else
        v54 = v14;
      while (1)
      {
        if (v54 == v53)
          goto LABEL_144;
        if (*(_BYTE *)(v13 + v53) == 58)
          break;
        if (v47 == ++v53)
        {
          v55 = 0;
          LODWORD(v53) = v46 - 1;
          goto LABEL_100;
        }
      }
      v55 = 1;
    }
LABEL_100:
    v56 = (v55 + v53);
    if (v56 < v46 - 1)
    {
      if (v14 <= v56)
        v57 = v56;
      else
        v57 = v14;
      do
      {
        if (v57 == v56)
          goto LABEL_144;
        v58 = *(unsigned __int8 *)(v13 + v56);
        v32 = v58 > 0x20;
        v59 = (1 << v58) & 0x100003600;
        if (v32 || v59 == 0)
          goto LABEL_111;
        ++v56;
      }
      while (v47 != v56);
      LODWORD(v56) = v46 - 1;
    }
LABEL_111:
    if (v14 < v56
      || v14 - v56 < (*(_BYTE *)(v13 + v48) != 59) - v56 + v46 - 1)
    {
LABEL_144:
      __break(1u);
      goto LABEL_148;
    }
    v61 = v3;
    v62 = v40;
    WTF::String::String();
    v63 = v105;
    v105 = 0;
    v64 = *(WTF::StringImpl **)(v43 + 8);
    *(_QWORD *)(v43 + 8) = v63;
    if (v64)
    {
      v65 = *(_DWORD *)v64 - 2;
      if (*(_DWORD *)v64 == 2)
      {
        WTF::StringImpl::destroy(v64, (WTF::StringImpl *)a2);
        v64 = v105;
        v105 = 0;
        if (!v64)
          goto LABEL_116;
        v65 = *(_DWORD *)v64 - 2;
        if (*(_DWORD *)v64 == 2)
        {
          WTF::StringImpl::destroy(v64, (WTF::StringImpl *)a2);
          goto LABEL_116;
        }
      }
      *(_DWORD *)v64 = v65;
    }
LABEL_116:
    v40 = v62;
    v3 = v61;
    v41 = v97;
    v38 = v99;
    goto LABEL_72;
  }
  v15 = *(unsigned int *)(v11 + 20);
  if ((_DWORD)v15)
  {
    v16 = 0;
    v17 = *(_DWORD *)(v103 + 16);
    v18 = (v15 - 1);
    v19 = *(_QWORD *)(v11 + 8);
    v100 = v17 - 1;
    v96 = v18;
    v98 = *(unsigned int *)(v11 + 20);
    while (1)
    {
      v20 = v19;
      if (v16 >= v18)
      {
        v19 = 0;
      }
      else
      {
        if (v16 + 1 >= *(unsigned int *)(v11 + 20))
          goto LABEL_148;
        v19 = *(_QWORD *)(v11 + 8) + 32 * (v16 + 1);
      }
      if (!*(_BYTE *)(v20 + 18))
      {
        v21 = *(_DWORD *)(v20 + 24);
        if (!v21)
          goto LABEL_31;
        if (v14 <= v100 + v21)
          goto LABEL_144;
        if (*(_WORD *)(v13 + 2 * (v100 + v21)) != 59)
        {
LABEL_31:
          v22 = v19 ? *(_DWORD *)(v19 + 20) + v17 : *(_DWORD *)(v103 + 20);
          do
          {
            if (v14 <= --v22)
              goto LABEL_144;
            v23 = *(unsigned __int16 *)(v13 + 2 * v22);
          }
          while (v23 <= 0x20 && ((1 << v23) & 0x100003600) != 0);
          if (v22 - v17 - v21 != -1)
            break;
        }
      }
LABEL_17:
      if (++v16 == v15)
        goto LABEL_121;
    }
    *(_DWORD *)(v20 + 24) = v22 - v17 + 1;
    v25 = *(_QWORD *)v20;
    if (*(_QWORD *)v20)
      LODWORD(v25) = *(_DWORD *)(v25 + 4);
    v26 = (*(_DWORD *)(v20 + 20) + v17 + v25);
    if (v26 >= v22)
    {
      v28 = 0;
    }
    else
    {
      if (v14 <= v26)
        v27 = v26;
      else
        v27 = v14;
      while (1)
      {
        if (v27 == v26)
          goto LABEL_144;
        if (*(_WORD *)(v13 + 2 * v26) == 58)
          break;
        if (v22 == ++v26)
        {
          v28 = 0;
          LODWORD(v26) = v22;
          goto LABEL_44;
        }
      }
      v28 = 1;
    }
LABEL_44:
    v29 = (v28 + v26);
    if (v29 < v22)
    {
      if (v14 <= v29)
        v30 = v29;
      else
        v30 = v14;
      do
      {
        if (v30 == v29)
          goto LABEL_144;
        v31 = *(unsigned __int16 *)(v13 + 2 * v29);
        v32 = v31 > 0x20;
        v33 = (1 << v31) & 0x100003600;
        if (v32 || v33 == 0)
          goto LABEL_55;
        ++v29;
      }
      while (v22 != v29);
      LODWORD(v29) = v22;
    }
LABEL_55:
    if (v14 < v29 || v14 - v29 < (v23 != 59) - (_DWORD)v29 + v22)
      goto LABEL_144;
    WTF::String::String();
    v35 = v105;
    v105 = 0;
    v36 = *(WTF::StringImpl **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v35;
    if (v36)
    {
      v37 = *(_DWORD *)v36 - 2;
      if (*(_DWORD *)v36 == 2)
      {
        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)a2);
        v36 = v105;
        v105 = 0;
        if (!v36)
          goto LABEL_60;
        v37 = *(_DWORD *)v36 - 2;
        if (*(_DWORD *)v36 == 2)
        {
          WTF::StringImpl::destroy(v36, (WTF::StringImpl *)a2);
          goto LABEL_60;
        }
      }
      *(_DWORD *)v36 = v37;
    }
LABEL_60:
    v18 = v96;
    v15 = v98;
    goto LABEL_17;
  }
LABEL_121:
  if (*(_BYTE *)(v103 + 65) && *(_DWORD *)(*(_QWORD *)(v103 + 40) + 20))
  {
    v66 = WTF::fastMalloc((WTF *)0x48);
    *(_DWORD *)v66 = 1;
    *(_BYTE *)(v66 + 4) = 1;
    *(_OWORD *)(v66 + 8) = 0u;
    *(_OWORD *)(v66 + 24) = 0u;
    v67 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v67 = 1;
    *(_QWORD *)(v67 + 8) = 0;
    *(_QWORD *)(v67 + 16) = 0;
    *(_WORD *)(v66 + 64) = 0;
    *(_QWORD *)(v66 + 48) = 0;
    *(_QWORD *)(v66 + 56) = 0;
    *(_QWORD *)(v66 + 40) = v67;
    v105 = (WTF::StringImpl *)v66;
    *(_BYTE *)(v66 + 64) = 1;
    *(_QWORD *)(v66 + 8) = *(_QWORD *)(v103 + 8);
    *(_QWORD *)(v66 + 16) = *(_QWORD *)(v103 + 16);
    v69 = *(_QWORD *)(v103 + 40);
    *(_QWORD *)(v103 + 40) = 0;
    v70 = *(_QWORD *)(v66 + 40);
    *(_QWORD *)(v66 + 40) = 0;
    v71 = *(_QWORD *)(v103 + 40);
    *(_QWORD *)(v103 + 40) = v70;
    if (v71)
      WTF::RefCounted<WebCore::CSSStyleSourceData>::deref(v71, v68);
    v72 = *(_QWORD *)(v66 + 40);
    *(_QWORD *)(v66 + 40) = v69;
    if (v72)
      WTF::RefCounted<WebCore::CSSStyleSourceData>::deref(v72, v68);
    v73 = *(unsigned int *)(v103 + 60);
    if ((_DWORD)v73 == *(_DWORD *)(v103 + 56))
    {
      v74 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v103 + 48), v73 + 1, (unint64_t)&v105);
      LODWORD(v73) = *(_DWORD *)(v103 + 60);
    }
    else
    {
      v74 = (uint64_t *)&v105;
    }
    v75 = *(_QWORD **)(v103 + 48);
    memmove(v75 + 1, v75, 8 * v73);
    v76 = *v74;
    *v74 = 0;
    *v75 = v76;
    ++*(_DWORD *)(v103 + 60);
    v77 = v105;
    v105 = 0;
    if (v77)
      WTF::RefCounted<WebCore::CSSRuleSourceData>::deref((uint64_t)v77, a2);
  }
  v78 = *((unsigned int *)v3 + 9);
  if ((_DWORD)v78)
  {
    v79 = *(_QWORD *)(*((_QWORD *)v3 + 3) + 8 * v78 - 8);
    v80 = *(unsigned int *)(v79 + 60);
    if ((_DWORD)v80 == *(_DWORD *)(v79 + 56))
    {
      v81 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v79 + 48), v80 + 1, (unint64_t)&v104);
      v82 = *(unsigned int *)(v79 + 60);
      v83 = v82 + 1;
      v84 = *(_QWORD *)(v79 + 48);
      v85 = *(_QWORD *)v81;
      *(_QWORD *)v81 = 0;
      *(_QWORD *)(v84 + 8 * v82) = v85;
    }
    else
    {
      v83 = v80 + 1;
      v93 = *(_QWORD *)(v79 + 48);
      v104 = 0;
      *(_QWORD *)(v93 + 8 * v80) = v103;
    }
    *(_DWORD *)(v79 + 60) = v83;
  }
  else
  {
    v86 = *((_QWORD *)v3 + 6);
    v87 = *(unsigned int *)(v86 + 12);
    if ((_DWORD)v87 == *(_DWORD *)(v86 + 8))
    {
      v88 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v86, v87 + 1, (unint64_t)&v104);
      v89 = *(unsigned int *)(v86 + 12);
      v90 = v89 + 1;
      v91 = *(char **)v86;
      v92 = *(_QWORD *)v88;
      *(_QWORD *)v88 = 0;
      *(_QWORD *)&v91[8 * v89] = v92;
    }
    else
    {
      v90 = v87 + 1;
      v94 = *(char **)v86;
      v104 = 0;
      *(_QWORD *)&v94[8 * v87] = v103;
    }
    *(_DWORD *)(v86 + 12) = v90;
  }
  result = v104;
  v104 = 0;
  if (result)
    return WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(result, a2);
  return result;
}

uint64_t WebCore::StyleSheetHandler::markRuleBodyContainsImplicitlyNestedProperties(uint64_t this)
{
  uint64_t v1;

  v1 = *(unsigned int *)(this + 36);
  if ((_DWORD)v1)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8 * v1 - 8) + 65) = 1;
  else
    __break(0xC471u);
  return this;
}

WTF::StringImpl *WebCore::StyleSheetHandler::observeProperty(WTF::StringImpl *this, unsigned int a2, unsigned int a3, unsigned __int8 a4, char a5, double a6, double a7, float a8)
{
  const char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const char *v17;
  int v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  const char *v41;
  unsigned int v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  const char *v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  unsigned int v53;
  unint64_t v54;
  unsigned int v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  int v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  unint64_t v75;
  const char *v76;
  int16x8_t v77;
  int16x8_t *v78;
  int8x16_t v79;
  int16x8_t *v80;
  const char *v81;
  int16x8_t v82;
  char *v83;
  uint64_t v84;
  unsigned int v85;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  unsigned __int8 v90;
  char v91;
  char v92;
  unint64_t v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  const char *v96;
  unint64_t v97;

  v11 = *((unsigned int *)this + 9);
  if (!(_DWORD)v11)
    return this;
  v12 = this;
  if (!*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8 * v11 - 8) + 40))
    return this;
  v14 = **((_QWORD **)this + 1);
  if (!v14)
  {
    v85 = a3;
LABEL_203:
    v20 = 0x100000000;
    v10 = (unint64_t)"";
    goto LABEL_57;
  }
  v15 = *(unsigned int *)(v14 + 4);
  v16 = *(unsigned int *)(v14 + 16);
  if (v15 <= a3)
  {
    v17 = *(const char **)(v14 + 8);
  }
  else
  {
    v17 = *(const char **)(v14 + 8);
    if ((v16 & 4) != 0)
      v18 = v17[a3];
    else
      v18 = *(unsigned __int16 *)&v17[2 * a3];
    if (v18 == 59)
      ++a3;
  }
  v85 = a3;
  if (v15 <= a2)
    goto LABEL_203;
  v19 = a3 - a2;
  if (v15 - a2 > a3 - a2)
    goto LABEL_13;
  if (a2)
  {
    v19 = v15 - a2;
LABEL_13:
    v20 = v19;
    v21 = v15 - a2;
    if (((v16 >> 2) & 1) != 0)
    {
      if (v21 < v19)
        goto LABEL_223;
      v17 += a2;
      v20 = v19 | 0x100000000;
    }
    else
    {
      if (v21 < v19)
        goto LABEL_223;
      v17 += 2 * a2;
    }
    goto LABEL_20;
  }
  v20 = v15 & 0xFFFFFFFEFFFFFFFFLL | (((v16 >> 2) & 1) << 32);
LABEL_20:
  v9 = v20;
  if ((v20 & 0x100000000) == 0)
  {
    if (!(_DWORD)v20)
      goto LABEL_56;
    v8 = 0;
    v10 = (unint64_t)v17;
    while (1)
    {
      v27 = *(unsigned __int16 *)v10;
      if (v27 > 0xFF)
      {
        if (MEMORY[0x19AEA858C]() != 9)
          goto LABEL_45;
      }
      else if (v27 - 9 >= 5 && v27 != 32)
      {
LABEL_45:
        if ((_DWORD)v20 == 1)
        {
          if (!(_DWORD)v8)
            goto LABEL_56;
          LODWORD(v28) = 0;
          goto LABEL_222;
        }
        v28 = (v20 - 1);
        while (1)
        {
          if (v28 >= v20)
            goto LABEL_223;
          v29 = *(unsigned __int16 *)&v17[2 * v28];
          if (v29 > 0xFF)
          {
            if (MEMORY[0x19AEA858C]() != 9)
              goto LABEL_54;
          }
          else if (v29 - 9 >= 5 && v29 != 32)
          {
LABEL_54:
            if (!(_DWORD)v8 && (_DWORD)v28 == (_DWORD)v20 - 1)
              goto LABEL_56;
LABEL_222:
            v20 = (v28 - (_DWORD)v8 + 1);
            if (v9 - (unint64_t)v8 < v20)
              goto LABEL_223;
            goto LABEL_57;
          }
          if (!(_DWORD)--v28)
            goto LABEL_54;
        }
      }
      ++v8;
      v10 += 2;
      if ((const char *)v20 == v8)
      {
        v20 = 0x100000000;
        v10 = (unint64_t)"";
        goto LABEL_57;
      }
    }
  }
  if (!(_DWORD)v20)
    goto LABEL_56;
  v22 = 0;
  v10 = (unint64_t)"";
  while (1)
  {
    v23 = v17[v22];
    if ((v23 - 9) >= 5 && v23 != 32)
      break;
    if (v20 == ++v22)
    {
      v20 = 0x100000000;
      goto LABEL_57;
    }
  }
  if ((_DWORD)v20 == 1)
  {
    if (!(_DWORD)v22)
      goto LABEL_56;
    LODWORD(v24) = 0;
  }
  else
  {
    v24 = (v20 - 1);
    do
    {
      if (v24 >= v20)
        goto LABEL_223;
      v25 = v17[v24];
      if ((v25 - 9) >= 5 && v25 != 32)
        break;
      --v24;
    }
    while ((_DWORD)v24);
    if (!(_DWORD)v22 && (_DWORD)v24 == (_DWORD)v20 - 1)
    {
LABEL_56:
      v10 = (unint64_t)v17;
      goto LABEL_57;
    }
  }
  v26 = (v24 - v22 + 1);
  if ((unint64_t)v20 - v22 < v26)
    goto LABEL_223;
  v10 = (unint64_t)&v17[v22];
  v20 = v26 | 0x100000000;
LABEL_57:
  v96 = (const char *)v10;
  v97 = v20;
  if ((WTF::StringView::endsWith() & 1) != 0)
  {
    if ((_DWORD)v97)
    {
      v8 = v96;
      if (BYTE4(v97))
        v9 = (v97 - 1) | 0x100000000;
      else
        v9 = (v97 - 1);
    }
    else
    {
      v9 = 0x100000000;
      v8 = "";
    }
    v96 = v8;
    LODWORD(v97) = v9;
    v10 = HIDWORD(v9);
    BYTE4(v97) = BYTE4(v9);
  }
  else
  {
    LODWORD(v10) = BYTE4(v97);
    v8 = v96;
    LODWORD(v9) = v97;
  }
  if (!(_DWORD)v10)
    goto LABEL_224;
  if ((_DWORD)v9)
  {
    v30 = 16;
    if (v9 < 0x10uLL)
      v30 = v9;
    v31 = v30;
    v32 = v8;
    do
    {
      if (*v32 == 58)
        goto LABEL_73;
      ++v32;
      --v31;
    }
    while (v31);
    if (v9 < 0x11)
      goto LABEL_236;
    v32 = memchr((void *)&v8[v30], 58, v9 - v30);
    if (!v32)
    {
      LODWORD(v34) = -1;
      LODWORD(v33) = -1;
      goto LABEL_75;
    }
LABEL_73:
    LODWORD(v33) = (_DWORD)v32 - (_DWORD)v8;
    goto LABEL_74;
  }
  while (2)
  {
    v8 = "";
    LODWORD(v33) = -1;
LABEL_118:
    WTF::String::String();
LABEL_119:
    v45 = (v33 + 1);
    if (v97 <= v45)
      goto LABEL_159;
    if ((_DWORD)v33 == -1)
    {
      v46 = v96;
      v47 = v97;
    }
    else
    {
      v47 = (v97 - v45);
      v75 = v97 - (unint64_t)v45;
      if (BYTE4(v97))
      {
        if (v75 < v47)
          goto LABEL_223;
        v46 = &v96[v45];
        v47 |= 0x100000000uLL;
      }
      else
      {
        if (v75 < v47)
          goto LABEL_223;
        v46 = &v96[2 * v45];
      }
    }
    v9 = v47;
    if ((v47 & 0xFF00000000) != 0)
    {
      if ((_DWORD)v47)
      {
        v48 = 0;
        while (1)
        {
          v49 = v46[v48];
          if ((v49 - 9) >= 5 && v49 != 32)
            break;
          if (v47 == ++v48)
            goto LABEL_159;
        }
        if ((_DWORD)v47 != 1)
        {
          v50 = (v47 - 1);
          while (v50 < v47)
          {
            v51 = v46[v50];
            if ((v51 - 9) < 5 || v51 == 32)
            {
              if ((_DWORD)--v50)
                continue;
            }
            if (!(_DWORD)v48 && (_DWORD)v50 == (_DWORD)v47 - 1)
              goto LABEL_158;
            goto LABEL_137;
          }
          goto LABEL_223;
        }
        if ((_DWORD)v48)
        {
          LODWORD(v50) = 0;
LABEL_137:
          v52 = (v50 - v48 + 1);
          if ((unint64_t)v47 - v48 < v52)
            goto LABEL_223;
          v47 = v52 | 0x100000000;
        }
      }
      goto LABEL_158;
    }
    if (!(_DWORD)v47)
      goto LABEL_158;
    v10 = 0;
    v8 = v46;
    while (1)
    {
      v53 = *(unsigned __int16 *)v8;
      if (v53 <= 0xFF)
        break;
      if (MEMORY[0x19AEA858C]() != 9)
        goto LABEL_147;
LABEL_144:
      ++v10;
      v8 += 2;
      if (v47 == v10)
        goto LABEL_159;
    }
    if (v53 - 9 < 5 || v53 == 32)
      goto LABEL_144;
LABEL_147:
    if ((_DWORD)v47 != 1)
    {
      v54 = (v47 - 1);
      while (v54 < v47)
      {
        v55 = *(unsigned __int16 *)&v46[2 * v54];
        if (v55 > 0xFF)
        {
          if (MEMORY[0x19AEA858C]() != 9)
            goto LABEL_156;
        }
        else if (v55 - 9 >= 5 && v55 != 32)
        {
LABEL_156:
          if ((_DWORD)v10 || (_DWORD)v54 != (_DWORD)v47 - 1)
            goto LABEL_218;
          goto LABEL_158;
        }
        if (!(_DWORD)--v54)
          goto LABEL_156;
      }
LABEL_223:
      __break(1u);
LABEL_224:
      if (!(_DWORD)v9)
        continue;
      v76 = &v8[2 * v9];
      if (v9 <= 0x1F)
      {
        v84 = 2 * v9;
        v83 = (char *)v8;
        LODWORD(v33) = -1;
        while (*(_WORD *)v83 != 58)
        {
          v83 += 2;
          v84 -= 2;
          if (!v84)
            goto LABEL_74;
        }
LABEL_233:
        if (v83 == v76)
          LODWORD(v33) = -1;
        else
          v33 = (v83 - v8) >> 1;
      }
      else
      {
        v77.i64[0] = 0x3A003A003A003ALL;
        v77.i64[1] = 0x3A003A003A003ALL;
        v78 = (int16x8_t *)v8;
        do
        {
          v79 = (int8x16_t)vceqq_s16(*v78, v77);
          LOWORD(a8) = vmaxvq_u16((uint16x8_t)v79);
          if (a8 != 0.0)
            goto LABEL_232;
          v80 = v78 + 1;
          v81 = &v78[1].i8[14];
          ++v78;
        }
        while (v81 < v76);
        if (v80 < (int16x8_t *)v76)
        {
          v82.i64[0] = 0x3A003A003A003ALL;
          v82.i64[1] = 0x3A003A003A003ALL;
          v79 = (int8x16_t)vceqq_s16(*((int16x8_t *)v76 - 1), v82);
          v82.i16[0] = vmaxvq_u16((uint16x8_t)v79);
          if (v82.i32[0])
          {
            v78 = (int16x8_t *)(v76 - 16);
LABEL_232:
            v83 = &v78->i8[2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v79))];
            goto LABEL_233;
          }
        }
LABEL_236:
        LODWORD(v33) = -1;
      }
LABEL_74:
      LODWORD(v34) = v33;
LABEL_75:
      if ((_DWORD)v10)
        v34 = v34 | 0x100000000;
      else
        v34 = v34;
      if (v9 <= v33)
        v9 = v97;
      else
        v9 = v34;
      v10 = v9;
      if ((v9 & 0xFF00000000) == 0)
      {
        if (!(_DWORD)v9)
          goto LABEL_117;
        v40 = 0;
        v41 = v8;
        do
        {
          v42 = *(unsigned __int16 *)v41;
          if (v42 > 0xFF)
          {
            if (MEMORY[0x19AEA858C]() != 9)
              goto LABEL_106;
          }
          else if (v42 - 9 >= 5 && v42 != 32)
          {
LABEL_106:
            if ((_DWORD)v9 == 1)
            {
              if (!(_DWORD)v40)
                goto LABEL_117;
              LODWORD(v43) = 0;
              goto LABEL_210;
            }
            v43 = (v9 - 1);
            while (1)
            {
              if (v43 >= v9)
                goto LABEL_223;
              v44 = *(unsigned __int16 *)&v8[2 * v43];
              if (v44 > 0xFF)
              {
                if (MEMORY[0x19AEA858C]() != 9)
                  goto LABEL_115;
              }
              else if (v44 - 9 >= 5 && v44 != 32)
              {
LABEL_115:
                if (!(_DWORD)v40 && (_DWORD)v43 == (_DWORD)v9 - 1)
                  goto LABEL_117;
LABEL_210:
                v9 = (v43 - v40 + 1);
                v8 = v41;
                if (v10 - v40 < v9)
                  goto LABEL_223;
                goto LABEL_117;
              }
              if (!(_DWORD)--v43)
                goto LABEL_115;
            }
          }
          ++v40;
          v41 += 2;
        }
        while (v9 != v40);
        v8 = "";
        goto LABEL_118;
      }
      if (!(_DWORD)v9)
        goto LABEL_117;
      v35 = 0;
      while (1)
      {
        v36 = v8[v35];
        if ((v36 - 9) >= 5 && v36 != 32)
          break;
        if (v9 == ++v35)
        {
          v8 = "";
          goto LABEL_118;
        }
      }
      if ((_DWORD)v9 == 1)
      {
        if (!(_DWORD)v35)
          goto LABEL_117;
        LODWORD(v37) = 0;
      }
      else
      {
        v37 = (v9 - 1);
        do
        {
          if (v37 >= v9)
            goto LABEL_223;
          v38 = v8[v37];
          if ((v38 - 9) >= 5 && v38 != 32)
            break;
          --v37;
        }
        while ((_DWORD)v37);
        if (!(_DWORD)v35 && (_DWORD)v37 == (_DWORD)v9 - 1)
          goto LABEL_117;
      }
      v39 = (v37 - v35 + 1);
      if ((unint64_t)v9 - v35 < v39)
        goto LABEL_223;
      v8 += v35;
      v9 = v39 | 0x100000000;
LABEL_117:
      if ((v9 & 0xFF00000000) != 0)
        goto LABEL_118;
      WTF::String::String();
      goto LABEL_119;
    }
    break;
  }
  if ((_DWORD)v10)
  {
    LODWORD(v54) = 0;
LABEL_218:
    v47 = (v54 - v10 + 1);
    if (v9 - v10 < v47)
      goto LABEL_223;
  }
LABEL_158:
  if ((v47 & 0xFF00000000) != 0)
  {
LABEL_159:
    WTF::String::String();
    goto LABEL_160;
  }
  WTF::String::String();
LABEL_160:
  v57 = *((unsigned int *)v12 + 9);
  if (!(_DWORD)v57)
  {
    __break(0xC471u);
    JUMPOUT(0x195DE0DE0);
  }
  v58 = *(_QWORD *)(*((_QWORD *)v12 + 3) + 8 * v57 - 8);
  v59 = *(unsigned int **)(v58 + 40);
  v60 = *(_DWORD *)(v58 + 16);
  v61 = v95;
  if (v95)
    *(_DWORD *)v95 += 2;
  v88 = v61;
  v62 = v94;
  if (v94)
    *(_DWORD *)v94 += 2;
  v89 = v62;
  v90 = a4;
  v91 = 0;
  v92 = a5;
  v63 = (a2 - v60) | ((unint64_t)(v85 - v60) << 32);
  v93 = v63;
  v64 = v59[5];
  if ((_DWORD)v64 == v59[4])
  {
    v65 = WTF::Vector<WebCore::CSSPropertySourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v59 + 2, v64 + 1, (unint64_t)&v88);
    v66 = v59[5];
    v67 = *((_QWORD *)v59 + 1);
    v68 = *(_DWORD **)v65;
    if (*(_QWORD *)v65)
      *v68 += 2;
    *(_QWORD *)(v67 + 32 * v66) = v68;
    v69 = *(_DWORD **)(v65 + 8);
    if (v69)
      *v69 += 2;
    v70 = v67 + 32 * v66;
    *(_QWORD *)(v70 + 8) = v69;
    *(_BYTE *)(v70 + 16) = *(_BYTE *)(v65 + 16);
    *(_WORD *)(v70 + 17) = *(_WORD *)(v65 + 17);
    *(_QWORD *)(v70 + 20) = *(_QWORD *)(v65 + 20);
    v62 = v89;
  }
  else
  {
    v71 = *((_QWORD *)v59 + 1);
    if (v61)
      *(_DWORD *)v61 += 2;
    *(_QWORD *)(v71 + 32 * v64) = v61;
    if (v62)
      *(_DWORD *)v62 += 2;
    v72 = v71 + 32 * v64;
    *(_QWORD *)(v72 + 8) = v62;
    *(_WORD *)(v72 + 16) = a4;
    *(_BYTE *)(v72 + 18) = a5;
    *(_QWORD *)(v72 + 20) = v63;
  }
  ++v59[5];
  v89 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, v56);
    else
      *(_DWORD *)v62 -= 2;
  }
  v73 = v88;
  v88 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
      WTF::StringImpl::destroy(v73, v56);
    else
      *(_DWORD *)v73 -= 2;
  }
  v74 = v94;
  v94 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, v56);
    else
      *(_DWORD *)v74 -= 2;
  }
  this = v95;
  v95 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v56);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t WebCore::StyleSheetHandler::observeComment(uint64_t this, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  const char *v28;
  unint64_t v29;
  WebCore *v30;
  const WebCore::Document *v31;
  uint64_t *v32;
  WTF::StringImpl *v33;
  __int128 v34;
  WTF::StringImpl *v35;
  __int16 v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  int v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  unsigned int *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  _DWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  WTF::StringImpl **v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  WTF *v69;
  uint64_t v70;
  uint64_t v71;
  WTF *v72;
  WTF *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  WTF::StringImpl *v77;
  _BYTE v78[32];
  WTF::StringImpl *v79;
  uint64_t v80;
  __int16 v81;
  _QWORD v82[3];
  WTF *v83;
  uint64_t v84;
  uint64_t v85;
  WTF **v86;
  WTF *v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;

  v3 = *(unsigned int *)(this + 36);
  if (!(_DWORD)v3)
    return this;
  v4 = this;
  v5 = *(_QWORD *)(*(_QWORD *)(this + 24) + 8 * v3 - 8);
  if (!*(_DWORD *)(v5 + 12) || !*(_QWORD *)(v5 + 40))
    return this;
  v8 = **(_QWORD **)(this + 8);
  if (!v8 || (v9 = *(unsigned int *)(v8 + 4), v9 <= a2))
  {
    v16 = 0x100000000;
    v91 = 0x100000000;
    goto LABEL_105;
  }
  v10 = *(unsigned int *)(v8 + 16);
  v11 = *(_QWORD *)(v8 + 8);
  v12 = a3 - a2;
  if (v9 - a2 > a3 - a2)
    goto LABEL_7;
  if (a2)
  {
    v12 = v9 - a2;
LABEL_7:
    v13 = (v10 >> 2) & 1;
    v14 = v12;
    v15 = v9 - a2;
    if ((_DWORD)v13)
    {
      if (v15 < v12)
        goto LABEL_150;
      v11 += a2;
      v14 = v12 | 0x100000000;
    }
    else
    {
      if (v15 < v12)
        goto LABEL_150;
      v11 += 2 * a2;
    }
    goto LABEL_14;
  }
  v14 = v9 & 0xFFFFFFFEFFFFFFFFLL | (((v10 >> 2) & 1) << 32);
LABEL_14:
  v91 = v14;
  if (v14 < 3)
    goto LABEL_151;
  v16 = (v14 - 2);
  v17 = v14 - 2;
  if ((v14 & 0x100000000) != 0)
  {
    if (v17 < v16)
      goto LABEL_150;
    v18 = (const char *)(v11 + 2);
    v16 |= 0x100000000uLL;
  }
  else
  {
    if (v17 < v16)
      goto LABEL_150;
    v18 = (const char *)(v11 + 4);
  }
  while (1)
  {
    v90 = v18;
    LODWORD(v91) = v16;
    BYTE4(v91) = BYTE4(v16);
    this = WTF::StringView::endsWith();
    if (!(_DWORD)this)
      return this;
    if ((_DWORD)v91 == 1)
    {
      v19 = v91;
    }
    else
    {
      if (!(_DWORD)v91)
      {
LABEL_33:
        LODWORD(v91) = 0;
        BYTE4(v91) = 1;
        return this;
      }
      v19 = BYTE4(v91) ? (v91 - 2) | 0x100000000 : (v91 - 2);
    }
    v20 = v90;
    v21 = v19;
    if ((v19 & 0xFF00000000) != 0)
      break;
    if (!(_DWORD)v19)
      goto LABEL_63;
    v27 = 0;
    v28 = v90;
    while (1)
    {
      this = *(unsigned __int16 *)v28;
      if (this <= 0xFF)
        break;
      this = MEMORY[0x19AEA858C]();
      if ((_DWORD)this != 9)
        goto LABEL_52;
LABEL_49:
      ++v27;
      v28 += 2;
      if (v19 == v27)
        goto LABEL_33;
    }
    if ((this - 9) < 5 || (_DWORD)this == 32)
      goto LABEL_49;
LABEL_52:
    if ((_DWORD)v19 == 1)
    {
      if (!(_DWORD)v27)
        goto LABEL_63;
      LODWORD(v29) = 0;
      goto LABEL_149;
    }
    v29 = (v19 - 1);
    while (2)
    {
      if (v29 >= v19)
        goto LABEL_150;
      this = *(unsigned __int16 *)&v90[2 * v29];
      if (this > 0xFF)
      {
        v76 = v29;
        this = MEMORY[0x19AEA858C]();
        v29 = v76;
        if ((_DWORD)this != 9)
          break;
        goto LABEL_58;
      }
      if ((this - 9) < 5 || (_DWORD)this == 32)
      {
LABEL_58:
        if (!(_DWORD)--v29)
          break;
        continue;
      }
      break;
    }
    if (!(_DWORD)v27 && (_DWORD)v29 == (_DWORD)v19 - 1)
      goto LABEL_63;
LABEL_149:
    v19 = (v29 - v27 + 1);
    v20 = v28;
    if (v21 - v27 >= v19)
      goto LABEL_63;
LABEL_150:
    __break(1u);
LABEL_151:
    v16 = 0x100000000;
LABEL_105:
    v18 = "";
  }
  if (!(_DWORD)v19)
    goto LABEL_63;
  v22 = 0;
  while (1)
  {
    v23 = v90[v22];
    if ((v23 - 9) >= 5 && v23 != 32)
      break;
    if (v19 == ++v22)
      goto LABEL_33;
  }
  if ((_DWORD)v19 == 1)
  {
    if (!(_DWORD)v22)
      goto LABEL_63;
    LODWORD(v24) = 0;
    goto LABEL_42;
  }
  v24 = (v19 - 1);
  do
  {
    if (v24 >= v19)
      goto LABEL_150;
    v25 = v90[v24];
    if ((v25 - 9) >= 5 && v25 != 32)
      break;
    --v24;
  }
  while ((_DWORD)v24);
  if ((_DWORD)v22 || (_DWORD)v24 != (_DWORD)v19 - 1)
  {
LABEL_42:
    v26 = (v24 - v22 + 1);
    if ((unint64_t)v19 - v22 >= v26)
    {
      v20 = &v90[v22];
      v19 = v26 | 0x100000000;
      goto LABEL_63;
    }
    goto LABEL_150;
  }
LABEL_63:
  v90 = v20;
  LODWORD(v91) = v19;
  BYTE4(v91) = BYTE4(v19);
  if ((_DWORD)v19)
  {
    if ((v19 & 0xFF00000000) != 0)
      v30 = (WebCore *)WTF::String::String();
    else
      v30 = (WebCore *)WTF::String::String();
    v87 = 0;
    v88 = 0;
    v31 = *(const WebCore::Document **)(v4 + 16);
    v82[0] = &off_1E33EE8F0;
    v82[1] = &v89;
    v82[2] = v31;
    v83 = 0;
    v84 = 0;
    v85 = 0;
    v86 = &v87;
    if (v31)
    {
      WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)&v77, v31);
    }
    else
    {
      v32 = WebCore::strictCSSParserContext(v30);
      v33 = (WTF::StringImpl *)*v32;
      if (*v32)
        *(_DWORD *)v33 += 2;
      v77 = v33;
      v34 = *(_OWORD *)(v32 + 3);
      *(_OWORD *)v78 = *(_OWORD *)(v32 + 1);
      *(_OWORD *)&v78[16] = v34;
      v35 = (WTF::StringImpl *)v32[5];
      if (v35)
        *(_DWORD *)v35 += 2;
      v36 = *((_WORD *)v32 + 28);
      v37 = v32[6];
      v79 = v35;
      v80 = v37;
      v81 = v36;
    }
    WebCore::CSSParserImpl::parseDeclarationListForInspector((uint64_t)&v89, (uint64_t)&v77, (uint64_t)v82);
    v39 = v79;
    v79 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v38);
      else
        *(_DWORD *)v39 -= 2;
    }
    v40 = v77;
    v77 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v38);
      else
        *(_DWORD *)v40 -= 2;
    }
    if (!HIDWORD(v88))
      goto LABEL_152;
    v41 = *(_QWORD *)(*(_QWORD *)v87 + 40);
    if (*(_DWORD *)(v41 + 20) == 1)
    {
      v42 = *(_QWORD *)(v41 + 8);
      if (*(_BYTE *)(v42 + 18)
        || *(_QWORD *)v42
        && ((WTF::StringImpl::startsWith() & 1) != 0
         || *(_QWORD *)v42
         && ((WTF::StringImpl::startsWith() & 1) != 0
          || *(_QWORD *)v42
          && ((WTF::StringImpl::startsWith() & 1) != 0 || *(_QWORD *)v42 && WTF::StringImpl::startsWith()))))
      {
        v43 = v89;
        if (v89)
          v43 = *(_DWORD *)(v89 + 4);
        if (*(_DWORD *)(v42 + 24) - *(_DWORD *)(v42 + 20) == v43)
        {
          v44 = *(unsigned int *)(v4 + 36);
          if ((_DWORD)v44)
          {
            v45 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44 - 8);
            v46 = *(unsigned int **)(v45 + 40);
            v47 = *(_DWORD *)(v45 + 16);
            v48 = *(WTF::StringImpl **)v42;
            if (*(_QWORD *)v42)
              *(_DWORD *)v48 += 2;
            v49 = a2 - v47;
            v50 = (a3 - v47);
            v77 = v48;
            v51 = *(_DWORD **)(v42 + 8);
            if (v51)
              *v51 += 2;
            v52 = v46 + 2;
            *(_QWORD *)v78 = v51;
            *(_WORD *)&v78[8] = 256;
            v78[10] = 1;
            *(_QWORD *)&v78[12] = v49 | (v50 << 32);
            v53 = v46[5];
            if ((_DWORD)v53 == v46[4])
            {
              v54 = WTF::Vector<WebCore::CSSPropertySourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v52, v53 + 1, (unint64_t)&v77);
              v55 = v46[5];
              v56 = *((_QWORD *)v46 + 1);
              v57 = *(_DWORD **)v54;
              if (*(_QWORD *)v54)
                *v57 += 2;
              *(_QWORD *)(v56 + 32 * v55) = v57;
              v58 = *(_DWORD **)(v54 + 8);
              if (v58)
                *v58 += 2;
              v59 = v56 + 32 * v55;
              *(_QWORD *)(v59 + 8) = v58;
              *(_BYTE *)(v59 + 16) = *(_BYTE *)(v54 + 16);
              *(_WORD *)(v59 + 17) = *(_WORD *)(v54 + 17);
              v60 = (_QWORD *)(v59 + 20);
              v61 = (_QWORD *)(v54 + 20);
            }
            else
            {
              v62 = *(_QWORD *)v52;
              v63 = (WTF::StringImpl **)(*(_QWORD *)v52 + 32 * v53);
              if (v48)
                *(_DWORD *)v48 += 2;
              v61 = &v78[12];
              *v63 = v48;
              v64 = *(_QWORD *)v78;
              if (*(_QWORD *)v78)
                **(_DWORD **)v78 += 2;
              v65 = v62 + 32 * v53;
              *(_QWORD *)(v65 + 8) = v64;
              *(_WORD *)(v65 + 16) = 256;
              *(_BYTE *)(v65 + 18) = 1;
              v60 = (_QWORD *)(v65 + 20);
            }
            *v60 = *v61;
            ++v46[5];
            v66 = *(WTF::StringImpl **)v78;
            *(_QWORD *)v78 = 0;
            if (v66)
            {
              if (*(_DWORD *)v66 == 2)
                WTF::StringImpl::destroy(v66, v38);
              else
                *(_DWORD *)v66 -= 2;
            }
            v67 = v77;
            v77 = 0;
            if (v67)
            {
              if (*(_DWORD *)v67 == 2)
                WTF::StringImpl::destroy(v67, v38);
              else
                *(_DWORD *)v67 -= 2;
            }
            goto LABEL_117;
          }
LABEL_152:
          __break(0xC471u);
          JUMPOUT(0x195DE1540);
        }
      }
    }
LABEL_117:
    v68 = v85;
    v82[0] = &off_1E33EE8F0;
    v85 = 0;
    if (v68)
      WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v68, v38);
    if (HIDWORD(v84))
    {
      v69 = v83;
      v70 = 8 * HIDWORD(v84);
      do
      {
        v71 = *(_QWORD *)v69;
        *(_QWORD *)v69 = 0;
        if (v71)
          WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v71, v38);
        v69 = (WTF *)((char *)v69 + 8);
        v70 -= 8;
      }
      while (v70);
    }
    v72 = v83;
    if (v83)
    {
      v83 = 0;
      LODWORD(v84) = 0;
      WTF::fastFree(v72, v38);
    }
    v73 = v87;
    if (HIDWORD(v88))
    {
      v74 = 8 * HIDWORD(v88);
      do
      {
        v75 = *(_QWORD *)v73;
        *(_QWORD *)v73 = 0;
        if (v75)
          WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v75, v38);
        v73 = (WTF *)((char *)v73 + 8);
        v74 -= 8;
      }
      while (v74);
      v73 = v87;
    }
    if (v73)
    {
      v87 = 0;
      LODWORD(v88) = 0;
      WTF::fastFree(v73, v38);
    }
    this = v89;
    v89 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)this, v38);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

void WebCore::StyleSheetHandler::~StyleSheetHandler(WebCore::StyleSheetHandler *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;

  *(_QWORD *)this = &off_1E33EE8F0;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v3, a2);
  v4 = *((unsigned int *)this + 9);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)*((_QWORD *)this + 3);
    v6 = 8 * v4;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
        WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v7, a2);
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v8 = (WTF *)*((_QWORD *)this + 3);
  if (v8)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v8, a2);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;

  *(_QWORD *)this = &off_1E33EE8F0;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v3, a2);
  v4 = *((unsigned int *)this + 9);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)*((_QWORD *)this + 3);
    v6 = 8 * v4;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
        WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v7, a2);
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v8 = (WTF *)*((_QWORD *)this + 3);
  if (v8)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v8, a2);
  }
  JUMPOUT(0x19AEA7644);
}

_DWORD *WebCore::InspectorStyleSheet::buildObjectForGrouping@<X0>(_DWORD *this@<X0>, WebCore::CSSRule *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  WebCore::CSSRule *v4;
  _QWORD **v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  WTF *v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  void *v21;
  WTF *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF *v25;
  WTF::StringImpl *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  char v34;
  WTF *v35;
  int v36;
  uint64_t v37;
  _DWORD **v38;
  _DWORD **v39;
  uint64_t v40;
  _DWORD *v41;
  _DWORD **v42;
  uint64_t v43;
  _DWORD *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF *v49;
  unsigned int v50;
  char v51;

  if (!a2)
  {
    v6 = 0;
    goto LABEL_85;
  }
  v4 = a2;
  v5 = (_QWORD **)this;
  this = (_DWORD *)(*(uint64_t (**)(WebCore::CSSRule *))(*(_QWORD *)a2 + 16))(a2);
  v6 = 0;
  if ((int)this <= 11)
  {
    if ((_DWORD)this == 1)
    {
      v7 = 59;
    }
    else
    {
      if ((_DWORD)this != 4)
        goto LABEL_85;
      v7 = 51;
    }
  }
  else
  {
    switch((_DWORD)this)
    {
      case 0xC:
        v7 = 55;
        break;
      case 0x10:
        v7 = 56;
        break;
      case 0x12:
        v7 = 58;
        break;
      default:
        goto LABEL_85;
    }
  }
  WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)this);
  v48 = v49;
  Inspector::Protocol::CSS::Grouping::Builder<0>::setType((uint64_t *)&v48, (Inspector::Protocol::Helpers *)v7);
  v6 = v48;
  v8 = ((uint64_t (*)(_QWORD **, WebCore::CSSRule *, uint64_t, _QWORD))(*v5)[8])(v5, v4, 1, 0);
  if (v8 != -1)
  {
    v10 = v8;
    v11 = (WTF *)v5[3];
    if (v11)
    {
      v12 = *(_DWORD *)v11;
      *(_DWORD *)v11 += 4;
      v49 = v11;
      v50 = v10;
      if (v12 == -2)
      {
        WTF::StringImpl::destroy(v11, v9);
        v11 = v49;
        if (!v49)
          goto LABEL_37;
      }
      else
      {
        *(_DWORD *)v11 = v12 + 2;
      }
      if (*((_DWORD *)v11 + 1))
      {
        WTF::JSONImpl::Object::create(v11);
        Inspector::Protocol::CSS::CSSRuleId::Builder<0>::setStyleSheetId((uint64_t *)&v48, (WTF::JSONImpl::Value *)&v49);
        Inspector::Protocol::CSS::CSSRuleId::Builder<1>::setOrdinal((uint64_t *)&v48, (WTF::JSONImpl::Value *)v50);
        v13 = v48;
        v11 = v49;
        v49 = 0;
        if (!v11)
          goto LABEL_24;
      }
      else
      {
        v13 = 0;
        v49 = 0;
      }
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::destroy(v11, v9);
        if (!v13)
          goto LABEL_37;
LABEL_25:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v47 = v13;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v6 + 2, &v48, (const WTF::StringImpl *)&v47, (uint64_t)&v49);
        if (v51)
        {
          v15 = (uint64_t *)((char *)v6 + 24);
          v16 = *((unsigned int *)v6 + 9);
          if ((_DWORD)v16 == *((_DWORD *)v6 + 8))
          {
            v39 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v15, v16 + 1, (unint64_t)&v48);
            v16 = *((unsigned int *)v6 + 9);
            v40 = *((_QWORD *)v6 + 3);
            v41 = *v39;
            if (*v39)
              *v41 += 2;
            *(_QWORD *)(v40 + 8 * v16) = v41;
          }
          else
          {
            v17 = *v15;
            v18 = v48;
            if (v48)
              *(_DWORD *)v48 += 2;
            *(_QWORD *)(v17 + 8 * v16) = v18;
          }
          *((_DWORD *)v6 + 9) = v16 + 1;
        }
        v19 = v47;
        v47 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v19;
        }
        v20 = v48;
        v48 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v14);
          else
            *(_DWORD *)v20 -= 2;
        }
        goto LABEL_37;
      }
      *(_DWORD *)v11 -= 2;
LABEL_24:
      if (!v13)
        goto LABEL_37;
      goto LABEL_25;
    }
  }
LABEL_37:
  if (!((unsigned int (*)(_QWORD **))(*v5)[9])(v5))
    goto LABEL_66;
  ((void (*)(uint64_t *__return_ptr, _QWORD **, WebCore::CSSRule *))(*v5)[7])(&v46, v5, v4);
  if (!v46)
    goto LABEL_66;
  v22 = (WTF *)*v5[7];
  if (v22)
  {
    v23 = (WTF::StringImpl *)*(unsigned int *)(v46 + 8);
    if ((_DWORD)v23 || *((_DWORD *)v22 + 1) > *(_DWORD *)(v46 + 12))
    {
      WTF::StringImpl::substring(v22);
      v22 = v49;
      v48 = v49;
      if (!v49)
        goto LABEL_49;
    }
    else
    {
      *(_DWORD *)v22 += 2;
      v48 = v22;
    }
    if (*((_DWORD *)v22 + 1))
    {
      Inspector::Protocol::CSS::Grouping::setText(v6, (const WTF::String *)&v48);
      v22 = v48;
      v48 = 0;
      if (!v22)
        goto LABEL_49;
    }
    else
    {
      v48 = 0;
    }
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v23);
    else
      *(_DWORD *)v22 -= 2;
  }
LABEL_49:
  v24 = v46 + 8;
  ((void (*)(WTF **__return_ptr, _QWORD **))(*v5)[11])(&v49, v5);
  WebCore::buildSourceRangeObject((WTF::StringImpl *)&v45, v24, (uint64_t)&v49, 0);
  v25 = v49;
  if (v49)
  {
    v49 = 0;
    v50 = 0;
    WTF::fastFree(v25, v21);
  }
  v26 = v45;
  if (v45)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v47 = v26;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v6 + 2, &v48, (const WTF::StringImpl *)&v47, (uint64_t)&v49);
    if (v51)
    {
      v27 = (uint64_t *)((char *)v6 + 24);
      v28 = *((unsigned int *)v6 + 9);
      if ((_DWORD)v28 == *((_DWORD *)v6 + 8))
      {
        v42 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v27, v28 + 1, (unint64_t)&v48);
        v28 = *((unsigned int *)v6 + 9);
        v43 = *((_QWORD *)v6 + 3);
        v44 = *v42;
        if (*v42)
          *v44 += 2;
        *(_QWORD *)(v43 + 8 * v28) = v44;
      }
      else
      {
        v29 = *v27;
        v30 = v48;
        if (v48)
          *(_DWORD *)v48 += 2;
        *(_QWORD *)(v29 + 8 * v28) = v30;
      }
      *((_DWORD *)v6 + 9) = v28 + 1;
    }
    v31 = v47;
    v47 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v31;
    }
    v32 = v48;
    v48 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v21);
      else
        *(_DWORD *)v32 -= 2;
    }
  }
  v33 = v46;
  v46 = 0;
  if (v33)
    WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v33, v21);
LABEL_66:
  while (1)
  {
    v34 = *((_BYTE *)v4 + 12);
    v4 = (WebCore::CSSRule *)*((_QWORD *)v4 + 2);
    if ((v34 & 2) == 0)
      break;
    if (!v4)
      goto LABEL_77;
  }
  if (!v4)
    goto LABEL_77;
  v35 = *(WTF **)(*((_QWORD *)v4 + 3) + 136);
  if (v35)
  {
    v36 = *(_DWORD *)v35;
    *(_DWORD *)v35 += 2;
    v49 = v35;
    if (*((_DWORD *)v35 + 1))
      goto LABEL_80;
    if (v36)
      *(_DWORD *)v35 = v36;
    else
      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v21);
  }
  v37 = WebCore::CSSStyleSheet::ownerDocument(v4);
  if (!v37)
  {
LABEL_77:
    v38 = (_DWORD **)MEMORY[0x1E0CBF6F0];
    goto LABEL_78;
  }
  this = *(_DWORD **)(v37 + 736);
  if (this)
    goto LABEL_79;
  v38 = (_DWORD **)MEMORY[0x1E0CBF738];
LABEL_78:
  this = *v38;
  if (!*v38)
    goto LABEL_85;
LABEL_79:
  *this += 2;
  v49 = (WTF *)this;
  if (!this[1])
  {
    v49 = 0;
    goto LABEL_83;
  }
LABEL_80:
  Inspector::Protocol::CSS::Grouping::setSourceURL(v6, (const WTF::String *)&v49);
  this = v49;
  v49 = 0;
  if (!this)
    goto LABEL_85;
LABEL_83:
  if (*this == 2)
    this = (_DWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v21);
  else
    *this -= 2;
LABEL_85:
  *a3 = v6;
  return this;
}

uint64_t *Inspector::Protocol::CSS::Grouping::Builder<0>::setType(uint64_t *a1, Inspector::Protocol::Helpers *a2)
{
  uint64_t v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _DWORD **v15;
  uint64_t v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  _BYTE v21[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::Protocol::Helpers::getEnumConstantValue(a2);
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v18, v5);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v19, (const WTF::StringImpl *)&v20, (uint64_t)v21);
  if (v21[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v15 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v19);
      v8 = *(unsigned int *)(v4 + 36);
      v16 = *(_QWORD *)(v4 + 24);
      v17 = *v15;
      if (*v15)
        *v17 += 2;
      *(_QWORD *)(v16 + 8 * v8) = v17;
    }
    else
    {
      v9 = *v7;
      v10 = v19;
      if (v19)
        *(_DWORD *)v19 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v20;
  v20 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v6);
    else
      *(_DWORD *)v13 -= 2;
  }
  return a1;
}

WTF::StringImpl *Inspector::Protocol::CSS::Grouping::setText(Inspector::Protocol::CSS::Grouping *this, const WTF::String *a2)
{
  const WTF::String *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *result;
  _DWORD **v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  _BYTE v17[24];

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v4);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)this + 2, &v15, (const WTF::StringImpl *)&v16, (uint64_t)v17);
  if (v17[16])
  {
    v6 = (uint64_t *)((char *)this + 24);
    v7 = *((unsigned int *)this + 9);
    if ((_DWORD)v7 == *((_DWORD *)this + 8))
    {
      v12 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v15);
      v7 = *((unsigned int *)this + 9);
      v13 = *((_QWORD *)this + 3);
      v14 = *v12;
      if (*v12)
        *v14 += 2;
      *(_QWORD *)(v13 + 8 * v7) = v14;
    }
    else
    {
      v8 = *v6;
      v9 = v15;
      if (v15)
        *(_DWORD *)v15 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *((_DWORD *)this + 9) = v7 + 1;
  }
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::buildSourceRangeObject(WTF::StringImpl *result, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  WTF::StringImpl *v4;
  unint64_t v6;
  WTF::JSONImpl::Object *v7;
  WTF::JSONImpl::Value *v8;
  WTF::StringImpl *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::JSONImpl::Value *v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::JSONImpl::Value *v29;
  _DWORD *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  _DWORD *v37;
  _DWORD **v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD **v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD **v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD **v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  _DWORD *v52;
  _BYTE v53[16];
  char v54;

  v4 = result;
  if (*(_DWORD *)(a3 + 12))
  {
    v6 = Inspector::ContentSearchUtilities::textPositionFromOffset();
    v7 = (WTF::JSONImpl::Object *)Inspector::ContentSearchUtilities::textPositionFromOffset();
    v8 = v7;
    if (a4)
      *a4 = (_DWORD)v7;
    WTF::JSONImpl::Object::create(v7);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)v6);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v50 + 16), &v51, (const WTF::StringImpl *)&v52, (uint64_t)v53);
    if (v54)
    {
      v10 = (uint64_t *)(v50 + 24);
      v11 = *(unsigned int *)(v50 + 36);
      if ((_DWORD)v11 == *(_DWORD *)(v50 + 32))
      {
        v38 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, v11 + 1, (unint64_t)&v51);
        v11 = *(unsigned int *)(v50 + 36);
        v39 = *(_QWORD *)(v50 + 24);
        v40 = *v38;
        if (*v38)
          *v40 += 2;
        *(_QWORD *)(v39 + 8 * v11) = v40;
      }
      else
      {
        v12 = *v10;
        v13 = v51;
        if (v51)
          *(_DWORD *)v51 += 2;
        *(_QWORD *)(v12 + 8 * v11) = v13;
      }
      *(_DWORD *)(v50 + 36) = v11 + 1;
    }
    v14 = (WTF::JSONImpl::Value *)HIDWORD(v6);
    v15 = v52;
    v52 = 0;
    if (v15)
    {
      if (*v15 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v15;
    }
    v16 = v51;
    v51 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v9);
      else
        *(_DWORD *)v16 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v14);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v50 + 16), &v51, (const WTF::StringImpl *)&v52, (uint64_t)v53);
    if (v54)
    {
      v18 = (uint64_t *)(v50 + 24);
      v19 = *(unsigned int *)(v50 + 36);
      if ((_DWORD)v19 == *(_DWORD *)(v50 + 32))
      {
        v41 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v18, v19 + 1, (unint64_t)&v51);
        v19 = *(unsigned int *)(v50 + 36);
        v42 = *(_QWORD *)(v50 + 24);
        v43 = *v41;
        if (*v41)
          *v43 += 2;
        *(_QWORD *)(v42 + 8 * v19) = v43;
      }
      else
      {
        v20 = *v18;
        v21 = v51;
        if (v51)
          *(_DWORD *)v51 += 2;
        *(_QWORD *)(v20 + 8 * v19) = v21;
      }
      *(_DWORD *)(v50 + 36) = v19 + 1;
    }
    v22 = v52;
    v52 = 0;
    if (v22)
    {
      if (*v22 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v22;
    }
    v23 = v51;
    v51 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v17);
      else
        *(_DWORD *)v23 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v8);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v50 + 16), &v51, (const WTF::StringImpl *)&v52, (uint64_t)v53);
    if (v54)
    {
      v25 = (uint64_t *)(v50 + 24);
      v26 = *(unsigned int *)(v50 + 36);
      if ((_DWORD)v26 == *(_DWORD *)(v50 + 32))
      {
        v44 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v25, v26 + 1, (unint64_t)&v51);
        v26 = *(unsigned int *)(v50 + 36);
        v45 = *(_QWORD *)(v50 + 24);
        v46 = *v44;
        if (*v44)
          *v46 += 2;
        *(_QWORD *)(v45 + 8 * v26) = v46;
      }
      else
      {
        v27 = *v25;
        v28 = v51;
        if (v51)
          *(_DWORD *)v51 += 2;
        *(_QWORD *)(v27 + 8 * v26) = v28;
      }
      *(_DWORD *)(v50 + 36) = v26 + 1;
    }
    v29 = (WTF::JSONImpl::Value *)((unint64_t)v8 >> 32);
    v30 = v52;
    v52 = 0;
    if (v30)
    {
      if (*v30 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v30;
    }
    v31 = v51;
    v51 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v24);
      else
        *(_DWORD *)v31 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v29);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v50 + 16), &v51, (const WTF::StringImpl *)&v52, (uint64_t)v53);
    if (v54)
    {
      v33 = (uint64_t *)(v50 + 24);
      v34 = *(unsigned int *)(v50 + 36);
      if ((_DWORD)v34 == *(_DWORD *)(v50 + 32))
      {
        v47 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v33, v34 + 1, (unint64_t)&v51);
        v34 = *(unsigned int *)(v50 + 36);
        v48 = *(_QWORD *)(v50 + 24);
        v49 = *v47;
        if (*v47)
          *v49 += 2;
        *(_QWORD *)(v48 + 8 * v34) = v49;
      }
      else
      {
        v35 = *v33;
        v36 = v51;
        if (v51)
          *(_DWORD *)v51 += 2;
        *(_QWORD *)(v35 + 8 * v34) = v36;
      }
      *(_DWORD *)(v50 + 36) = v34 + 1;
    }
    v37 = v52;
    v52 = 0;
    if (v37)
    {
      if (*v37 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v37;
    }
    result = v51;
    v51 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v32);
      else
        *(_DWORD *)result -= 2;
    }
    *(_QWORD *)v4 = v50;
  }
  else
  {
    *(_QWORD *)result = 0;
  }
  return result;
}

WTF::StringImpl *Inspector::Protocol::CSS::Grouping::setSourceURL(Inspector::Protocol::CSS::Grouping *this, const WTF::String *a2)
{
  const WTF::String *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *result;
  _DWORD **v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  _BYTE v17[24];

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v4);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)this + 2, &v15, (const WTF::StringImpl *)&v16, (uint64_t)v17);
  if (v17[16])
  {
    v6 = (uint64_t *)((char *)this + 24);
    v7 = *((unsigned int *)this + 9);
    if ((_DWORD)v7 == *((_DWORD *)this + 8))
    {
      v12 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v15);
      v7 = *((unsigned int *)this + 9);
      v13 = *((_QWORD *)this + 3);
      v14 = *v12;
      if (*v12)
        *v14 += 2;
      *(_QWORD *)(v13 + 8 * v7) = v14;
    }
    else
    {
      v8 = *v6;
      v9 = v15;
      if (v15)
        *(_DWORD *)v15 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *((_DWORD *)this + 9) = v7 + 1;
  }
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorStyle::buildObjectForStyle@<X0>(WebCore::InspectorStyle *this@<X0>, uint64_t *a2@<X8>)
{
  WebCore::InspectorStyle *v2;
  WTF::JSONImpl::ArrayBase *v4;
  WTF::JSONImpl::ArrayBase *v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  const WTF::String *v13;
  WTF::StringImpl *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  const WTF::String *v21;
  WTF::StringImpl *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  _DWORD *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  const WTF::String *v57;
  WTF::StringImpl *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  int v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  const WTF::StringImpl *v75;
  WTF::StringImpl **v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  const WTF::String *v82;
  WTF::StringImpl *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  const WTF::StringImpl *v91;
  WTF::StringImpl **v92;
  unsigned int v93;
  unsigned int v94;
  int v95;
  int j;
  uint64_t v97;
  WTF *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  int v101;
  uint64_t v102;
  uint64_t *v103;
  WTF::JSONImpl::ObjectBase *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::JSONImpl::ObjectBase *v108;
  WTF::StringImpl *v109;
  WTF *v110;
  const WTF::StringImpl *v111;
  char v112;
  WTF::StringImpl *v113;
  _BOOL4 v114;
  WTF::JSONImpl::ObjectBase *v115;
  int i;
  int v117;
  WTF *v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  _DWORD **v128;
  uint64_t v129;
  _DWORD *v130;
  _DWORD **v131;
  uint64_t v132;
  _DWORD *v133;
  unsigned int v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  _DWORD **v137;
  uint64_t v138;
  _DWORD *v139;
  WTF *v140;
  WTF::StringImpl *v141;
  const WTF::String *v142;
  WTF::StringImpl *v143;
  WebCore::InspectorStyle *v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  uint64_t v152;
  const WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  int v155;
  WTF::StringImpl *v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  const WTF::String *v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  void *v181;
  void *v182;
  WTF::StringImpl **v183;
  _DWORD **v184;
  uint64_t v185;
  _DWORD *v186;
  _DWORD **v187;
  uint64_t v188;
  _DWORD *v189;
  uint64_t *v190;
  void *v191;
  uint64_t v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  WTF::StringImpl *v198;
  _DWORD *v199;
  WTF::JSONImpl::Object *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  const WTF::String *v204;
  WTF::StringImpl *v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  uint64_t v214;
  const WTF::String *v215;
  WTF::StringImpl *v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  WTF::StringImpl *v220;
  WTF::StringImpl *v221;
  WTF::StringImpl *v222;
  WTF::StringImpl *v223;
  WTF::StringImpl *v224;
  WTF::StringImpl *result;
  char *v226;
  void *v227;
  WTF *v228;
  WTF::StringImpl *v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  WTF::StringImpl *v233;
  WTF::StringImpl *v234;
  WTF::StringImpl *v235;
  WTF::StringImpl *v236;
  const WTF::String *v237;
  WTF::StringImpl *v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  WTF::StringImpl *v242;
  WTF::StringImpl *v243;
  WTF::StringImpl *v244;
  WTF::JSONImpl::Value *v245;
  WTF::StringImpl *v246;
  WTF::StringImpl *v247;
  uint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  WTF::StringImpl *v251;
  WTF::StringImpl *v252;
  WTF::StringImpl *v253;
  WTF::StringImpl *v254;
  uint64_t v255;
  WTF::StringImpl *v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  WTF::StringImpl *v260;
  WTF::StringImpl *v261;
  WTF::StringImpl *v262;
  _DWORD **v263;
  uint64_t v264;
  _DWORD *v265;
  _DWORD **v266;
  uint64_t v267;
  _DWORD *v268;
  _DWORD **v269;
  uint64_t v270;
  _DWORD *v271;
  _DWORD **v272;
  uint64_t v273;
  _DWORD *v274;
  _DWORD **v275;
  uint64_t v276;
  _DWORD *v277;
  _DWORD **v278;
  uint64_t v279;
  _DWORD *v280;
  uint64_t *v281;
  WTF::StringImpl *v282;
  WTF::StringImpl *v283;
  WebCore::InspectorStyle *v284;
  WTF::StringImpl *v285;
  WTF::StringImpl *v286;
  uint64_t v287;
  WTF::StringImpl *v288;
  uint64_t v289;
  WTF::StringImpl **v290;
  uint64_t v291;
  uint64_t v292;
  _DWORD *v293;
  WTF::StringImpl *v294;
  unsigned int v295;
  WTF::StringImpl *v296;
  char v297;
  WTF::StringImpl *v298;
  WTF::StringImpl *v299;
  WTF::StringImpl *v300;
  uint64_t v301;
  unsigned int v302;
  char v303;

  v2 = this;
  WebCore::InspectorStyle::collectProperties(this, 0, (uint64_t)&v294);
  v4 = (WTF::JSONImpl::ArrayBase *)WTF::fastMalloc((WTF *)0x20);
  v293 = (_DWORD *)WTF::JSONImpl::ArrayBase::ArrayBase(v4);
  v5 = (WTF::JSONImpl::ArrayBase *)WTF::fastMalloc((WTF *)0x20);
  v291 = 0;
  v292 = WTF::JSONImpl::ArrayBase::ArrayBase(v5);
  v290 = 0;
  v6 = *((_QWORD *)v2 + 4);
  v281 = a2;
  if (!v6)
  {
    v288 = 0;
    v289 = 0;
LABEL_7:
    v7 = 0;
    v287 = 0;
    goto LABEL_8;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v6 + 88))(&v288);
  v6 = *((_QWORD *)v2 + 4);
  if (!v6)
    goto LABEL_7;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
  if ((v6 & 1) == 0)
    goto LABEL_7;
  v6 = (uint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)v2 + 4) + 48))(&v287, *((_QWORD *)v2 + 4), *((_QWORD *)v2 + 3));
  if (v287)
    v7 = *(_DWORD *)(v287 + 16);
  else
    v7 = 0;
LABEL_8:
  if (v295)
  {
    v282 = 0;
    v283 = 0;
    v8 = v294;
    v284 = v2;
    v285 = (WTF::StringImpl *)((char *)v294 + 48 * v295);
    while (1)
    {
      v9 = *((unsigned __int8 *)v8 + 33);
      if (*((_BYTE *)v8 + 33))
        v10 = 49;
      else
        v10 = 2;
      WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)v6);
      v11 = (uint64_t)v300;
      if (*(_QWORD *)v8 && WTF::StringImpl::startsWith())
      {
        v12 = *(WTF::StringImpl **)v8;
        if (*(_QWORD *)v8)
          *(_DWORD *)v12 += 2;
        v296 = v12;
      }
      else
      {
        WTF::String::convertToASCIILowercase(v8);
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v296, v13);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v11 + 16), &v298, (const WTF::StringImpl *)&v299, (uint64_t)&v300);
      if ((_BYTE)v302)
      {
        v15 = (uint64_t *)(v11 + 24);
        v16 = *(unsigned int *)(v11 + 36);
        if ((_DWORD)v16 == *(_DWORD *)(v11 + 32))
        {
          v119 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v15, v16 + 1, (unint64_t)&v298);
          v16 = *(unsigned int *)(v11 + 36);
          v120 = *(_QWORD *)(v11 + 24);
          v121 = *v119;
          if (*v119)
            *v121 += 2;
          *(_QWORD *)(v120 + 8 * v16) = v121;
        }
        else
        {
          v17 = *v15;
          v18 = v298;
          if (v298)
            *(_DWORD *)v298 += 2;
          *(_QWORD *)(v17 + 8 * v16) = v18;
        }
        *(_DWORD *)(v11 + 36) = v16 + 1;
      }
      v19 = v299;
      v299 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v19;
      }
      v20 = v298;
      v298 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v14);
        else
          *(_DWORD *)v20 -= 2;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WTF::StringImpl *)((char *)v8 + 8), v21);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v11 + 16), &v298, (const WTF::StringImpl *)&v299, (uint64_t)&v300);
      if ((_BYTE)v302)
      {
        v23 = (uint64_t *)(v11 + 24);
        v24 = *(unsigned int *)(v11 + 36);
        if ((_DWORD)v24 == *(_DWORD *)(v11 + 32))
        {
          v122 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v23, v24 + 1, (unint64_t)&v298);
          v24 = *(unsigned int *)(v11 + 36);
          v123 = *(_QWORD *)(v11 + 24);
          v124 = *v122;
          if (*v122)
            *v124 += 2;
          *(_QWORD *)(v123 + 8 * v24) = v124;
        }
        else
        {
          v25 = *v23;
          v26 = v298;
          if (v298)
            *(_DWORD *)v298 += 2;
          *(_QWORD *)(v25 + 8 * v24) = v26;
        }
        *(_DWORD *)(v11 + 36) = v24 + 1;
      }
      v27 = v299;
      v299 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v27;
      }
      v28 = v298;
      v298 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v22);
        else
          *(_DWORD *)v28 -= 2;
      }
      v29 = v296;
      v296 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v22);
        else
          *(_DWORD *)v29 -= 2;
      }
      v30 = v293;
      ++*(_DWORD *)v11;
      v31 = v30[7];
      if ((_DWORD)v31 == v30[6])
      {
        v32 = v31 + (v31 >> 2);
        if (v32 >= 0x10)
          v33 = v32 + 1;
        else
          v33 = 16;
        if (v33 <= v31 + 1)
          v34 = v31 + 1;
        else
          v34 = v33;
        if (v34 >> 29)
        {
LABEL_554:
          __break(0xC471u);
          JUMPOUT(0x195DE3F24);
        }
        v35 = (void *)*((_QWORD *)v30 + 2);
        v36 = (void *)WTF::fastMalloc((WTF *)(8 * v34));
        v30[6] = v34;
        *((_QWORD *)v30 + 2) = v36;
        memcpy(v36, v35, 8 * v31);
        v2 = v284;
        if (v35)
        {
          if (*((void **)v30 + 2) == v35)
          {
            *((_QWORD *)v30 + 2) = 0;
            v30[6] = 0;
          }
          WTF::fastFree((WTF *)v35, v37);
        }
        v31 = v30[7];
        v38 = (uint64_t *)(*((_QWORD *)v30 + 2) + 8 * v31);
      }
      else
      {
        v38 = (uint64_t *)(*((_QWORD *)v30 + 2) + 8 * v31);
      }
      *v38 = v11;
      v30[7] = v31 + 1;
      v39 = *(_QWORD *)v8;
      if (*(_QWORD *)v8)
      {
        v40 = *(unsigned int *)(v39 + 16);
        v41 = *(_QWORD *)(v39 + 8);
        v39 = *(unsigned int *)(v39 + 4);
        v42 = (v40 >> 2) & 1;
      }
      else
      {
        v41 = 0;
        v42 = 1;
      }
      v43 = WebCore::cssPropertyID(v41, (const char *)(v39 | (v42 << 32)));
      v44 = v43;
      v45 = *(WTF::StringImpl **)v8;
      if (*(_QWORD *)v8 && *((_DWORD *)v45 + 1) >= 3u)
      {
        v46 = *((_QWORD *)v45 + 1);
        if ((*((_BYTE *)v45 + 16) & 4) != 0)
        {
          if (*(_BYTE *)v46 == 45)
          {
            v47 = *(unsigned __int8 *)(v46 + 1);
LABEL_69:
            if (v47 == 45)
              v44 = 1;
            else
              v44 = v43;
          }
        }
        else if (*(_WORD *)v46 == 45)
        {
          v47 = *(unsigned __int16 *)(v46 + 2);
          goto LABEL_69;
        }
      }
      if (!*((_BYTE *)v8 + 18)
        || (v48 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 3) + 176))(*((_QWORD *)v2 + 3)), !v44)
        || v44 - 304 <= 0x1E && ((1 << (v44 - 48)) & 0x7C010001) != 0
        || v48
        && (WebCore::isExposedNotInvalidAndNotInternal(v44, *(_QWORD *)(v48 + 664), *(_QWORD *)(v48 + 672), *(_QWORD *)(v48 + 680), *(_QWORD *)(v48 + 688), *(_QWORD *)(v48 + 696), *(_QWORD *)(v48 + 704), *(_QWORD *)(v48 + 712)) & 1) == 0)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::JSONImpl::Value::create(0);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v11 + 16), &v298, (const WTF::StringImpl *)&v299, (uint64_t)&v300);
        if ((_BYTE)v302)
        {
          v50 = (uint64_t *)(v11 + 24);
          v51 = *(unsigned int *)(v11 + 36);
          if ((_DWORD)v51 == *(_DWORD *)(v11 + 32))
          {
            v125 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v50, v51 + 1, (unint64_t)&v298);
            v51 = *(unsigned int *)(v11 + 36);
            v126 = *(_QWORD *)(v11 + 24);
            v127 = *v125;
            if (*v125)
              *v127 += 2;
            *(_QWORD *)(v126 + 8 * v51) = v127;
          }
          else
          {
            v52 = *v50;
            v53 = v298;
            if (v298)
              *(_DWORD *)v298 += 2;
            *(_QWORD *)(v52 + 8 * v51) = v53;
          }
          *(_DWORD *)(v11 + 36) = v51 + 1;
        }
        v54 = v299;
        v299 = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v54;
        }
        v55 = v298;
        v298 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
            WTF::StringImpl::destroy(v55, v49);
          else
            *(_DWORD *)v55 -= 2;
        }
      }
      v56 = *((_QWORD *)v8 + 5);
      if (v56 && *(_DWORD *)(v56 + 4))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::JSONImpl::Value::create((WTF::StringImpl *)((char *)v8 + 40), v82);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v11 + 16), &v298, (const WTF::StringImpl *)&v299, (uint64_t)&v300);
        if ((_BYTE)v302)
        {
          v84 = (uint64_t *)(v11 + 24);
          v85 = *(unsigned int *)(v11 + 36);
          if ((_DWORD)v85 == *(_DWORD *)(v11 + 32))
          {
            v137 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v84, v85 + 1, (unint64_t)&v298);
            v85 = *(unsigned int *)(v11 + 36);
            v138 = *(_QWORD *)(v11 + 24);
            v139 = *v137;
            if (*v137)
              *v139 += 2;
            *(_QWORD *)(v138 + 8 * v85) = v139;
          }
          else
          {
            v86 = *v84;
            v87 = v298;
            if (v298)
              *(_DWORD *)v298 += 2;
            *(_QWORD *)(v86 + 8 * v85) = v87;
          }
          *(_DWORD *)(v11 + 36) = v85 + 1;
        }
        v88 = v299;
        v299 = 0;
        if (v88)
        {
          if (*(_DWORD *)v88 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v88;
        }
        v89 = v298;
        v298 = 0;
        if (v89)
        {
          if (*(_DWORD *)v89 == 2)
            WTF::StringImpl::destroy(v89, v83);
          else
            *(_DWORD *)v89 -= 2;
        }
      }
      if (*((_BYTE *)v8 + 16))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v296 = v300;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v296, v57);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v11 + 16), &v298, (const WTF::StringImpl *)&v299, (uint64_t)&v300);
        if ((_BYTE)v302)
        {
          v59 = (uint64_t *)(v11 + 24);
          v60 = *(unsigned int *)(v11 + 36);
          if ((_DWORD)v60 == *(_DWORD *)(v11 + 32))
          {
            v128 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v59, v60 + 1, (unint64_t)&v298);
            v60 = *(unsigned int *)(v11 + 36);
            v129 = *(_QWORD *)(v11 + 24);
            v130 = *v128;
            if (*v128)
              *v130 += 2;
            *(_QWORD *)(v129 + 8 * v60) = v130;
          }
          else
          {
            v61 = *v59;
            v62 = v298;
            if (v298)
              *(_DWORD *)v298 += 2;
            *(_QWORD *)(v61 + 8 * v60) = v62;
          }
          *(_DWORD *)(v11 + 36) = v60 + 1;
        }
        v63 = v299;
        v299 = 0;
        if (v63)
        {
          if (*(_DWORD *)v63 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v63;
        }
        v64 = v298;
        v298 = 0;
        if (v64)
        {
          if (*(_DWORD *)v64 == 2)
            WTF::StringImpl::destroy(v64, v58);
          else
            *(_DWORD *)v64 -= 2;
        }
        v65 = v296;
        v296 = 0;
        if (v65)
        {
          if (*(_DWORD *)v65 == 2)
            WTF::StringImpl::destroy(v65, v58);
          else
            *(_DWORD *)v65 -= 2;
        }
      }
      if (*((_BYTE *)v8 + 32))
      {
        v66 = v7 + *((_DWORD *)v8 + 6);
        LODWORD(v296) = v7 + *((_DWORD *)v8 + 5);
        HIDWORD(v296) = v66;
        WebCore::buildSourceRangeObject((WTF::StringImpl *)&v286, (uint64_t)&v296, (uint64_t)&v288, 0);
        v67 = v286;
        if (v286)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v298 = v67;
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v11 + 16), &v299, (const WTF::StringImpl *)&v298, (uint64_t)&v300);
          if ((_BYTE)v302)
          {
            v69 = (uint64_t *)(v11 + 24);
            v70 = *(unsigned int *)(v11 + 36);
            if ((_DWORD)v70 == *(_DWORD *)(v11 + 32))
            {
              v131 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v69, v70 + 1, (unint64_t)&v299);
              v70 = *(unsigned int *)(v11 + 36);
              v132 = *(_QWORD *)(v11 + 24);
              v133 = *v131;
              if (*v131)
                *v133 += 2;
              *(_QWORD *)(v132 + 8 * v70) = v133;
            }
            else
            {
              v71 = *v69;
              v72 = v299;
              if (v299)
                *(_DWORD *)v299 += 2;
              *(_QWORD *)(v71 + 8 * v70) = v72;
            }
            *(_DWORD *)(v11 + 36) = v70 + 1;
          }
          v73 = v298;
          v298 = 0;
          if (v73)
          {
            if (*(_DWORD *)v73 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v73;
          }
          v74 = v299;
          v299 = 0;
          if (v74)
          {
            if (*(_DWORD *)v74 == 2)
              WTF::StringImpl::destroy(v74, v68);
            else
              *(_DWORD *)v74 -= 2;
          }
        }
      }
      if (*((_BYTE *)v8 + 33))
        goto LABEL_174;
      if (!*((_BYTE *)v8 + 32))
      {
        if ((*(unsigned int (**)(_QWORD, WTF::StringImpl *))(**((_QWORD **)v2 + 3) + 120))(*((_QWORD *)v2 + 3), v8))
        {
          Inspector::Protocol::CSS::CSSProperty::setImplicit((Inspector::Protocol::CSS::CSSProperty *)v11, (WTF::JSONImpl::Value *)1);
        }
        (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl *))(**((_QWORD **)v2 + 3) + 112))(&v286, *((_QWORD *)v2 + 3), v8);
        v6 = (uint64_t)v286;
        if (!v286)
          goto LABEL_175;
        if (*((_DWORD *)v286 + 1))
        {
          v92 = v290;
          if (v290)
          {
            v93 = *((_DWORD *)v290 - 2);
            v94 = *((_DWORD *)v286 + 4);
            if (v94 < 0x100)
              v95 = WTF::StringImpl::hashSlowCase(v286);
            else
              v95 = v94 >> 8;
            for (i = 0; ; v95 = i + v117)
            {
              v117 = v95 & v93;
              v118 = v92[v95 & v93];
              if (!v118)
                break;
              if (v118 != (WTF *)-1 && (WTF::equal(v118, v286, v91) & 1) != 0)
                goto LABEL_364;
              ++i;
            }
          }
          v140 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v290, &v286, v91, (uint64_t)&v300);
          WTF::JSONImpl::Object::create(v140);
          v141 = v300;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v286, v142);
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v141 + 2, &v298, (const WTF::StringImpl *)&v299, (uint64_t)&v300);
          v144 = v284;
          if ((_BYTE)v302)
          {
            v145 = (uint64_t *)((char *)v141 + 24);
            v146 = *((unsigned int *)v141 + 9);
            if ((_DWORD)v146 == *((_DWORD *)v141 + 8))
            {
              v184 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v145, v146 + 1, (unint64_t)&v298);
              v146 = *((unsigned int *)v141 + 9);
              v185 = *((_QWORD *)v141 + 3);
              v186 = *v184;
              if (*v184)
                *v186 += 2;
              *(_QWORD *)(v185 + 8 * v146) = v186;
              v144 = v284;
            }
            else
            {
              v147 = *v145;
              v148 = v298;
              if (v298)
                *(_DWORD *)v298 += 2;
              *(_QWORD *)(v147 + 8 * v146) = v148;
            }
            *((_DWORD *)v141 + 9) = v146 + 1;
          }
          v149 = v299;
          v299 = 0;
          if (v149)
          {
            if (*(_DWORD *)v149 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v149;
          }
          v150 = v298;
          v298 = 0;
          if (v150)
          {
            if (*(_DWORD *)v150 == 2)
              WTF::StringImpl::destroy(v150, v143);
            else
              *(_DWORD *)v150 -= 2;
          }
          (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**((_QWORD **)v144 + 3)
                                                                                             + 96))(&v299, *((_QWORD *)v144 + 3), &v286);
          if (v299 && *((_DWORD *)v299 + 1))
          {
            v296 = v299;
            goto LABEL_334;
          }
          v300 = 0;
          v301 = 0;
          v302 = 0;
          v303 = 1;
          if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)v144 + 3) + 72))(*((_QWORD *)v144 + 3)))
          {
            v152 = 0;
            while (1)
            {
              (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**((_QWORD **)v144 + 3) + 80))(&v298, *((_QWORD *)v144 + 3), v152);
              (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**((_QWORD **)v144 + 3)
                                                                                                 + 112))(&v296, *((_QWORD *)v144 + 3), &v298);
              v155 = WTF::equal(v296, v286, v153);
              v156 = v296;
              v296 = 0;
              if (!v156)
                goto LABEL_282;
              if (*(_DWORD *)v156 != 2)
                break;
              WTF::StringImpl::destroy(v156, v154);
              if (!v155)
                goto LABEL_310;
LABEL_283:
              if (((*(uint64_t (**)(_QWORD, WTF::StringImpl **))(**((_QWORD **)v144 + 3) + 120))(*((_QWORD *)v144 + 3), &v298) & 1) == 0)
              {
                (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**((_QWORD **)v144 + 3) + 96))(&v296, *((_QWORD *)v144 + 3), &v298);
                if ((MEMORY[0x19AEA53F4](v296, "initial", 7) & 1) != 0)
                  goto LABEL_307;
                v157 = v302;
                if (!v302)
                  goto LABEL_295;
                v297 = 32;
                if (!v301 || v302 >= *(_DWORD *)(v301 + 4) || v300)
                {
                  WTF::StringBuilder::append();
                }
                else
                {
                  v158 = *(_DWORD *)(v301 + 16);
                  v159 = *(_QWORD *)(v301 + 8);
                  ++v302;
                  if ((v158 & 4) == 0)
                  {
                    *(_WORD *)(v159 + 2 * v157) = 32;
                    goto LABEL_304;
                  }
                  *(_BYTE *)(v159 + v157) = 32;
                }
                if (!v302)
                {
LABEL_295:
                  if (!v301)
                  {
                    v160 = v296;
                    if (v296)
                      *(_DWORD *)v296 += 2;
                    v161 = v300;
                    v300 = v160;
                    if (v161)
                    {
                      if (*(_DWORD *)v161 != 2)
                      {
                        *(_DWORD *)v161 -= 2;
                        goto LABEL_301;
                      }
                      WTF::StringImpl::destroy(v161, v154);
                      v160 = v296;
                      if (!v296)
                      {
LABEL_303:
                        v302 = v160;
                        goto LABEL_307;
                      }
                    }
                    else
                    {
LABEL_301:
                      if (!v160)
                        goto LABEL_303;
                    }
                    LODWORD(v160) = *((_DWORD *)v160 + 1);
                    goto LABEL_303;
                  }
                }
LABEL_304:
                if (v296 && (*((_BYTE *)v296 + 16) & 4) == 0)
                  WTF::StringBuilder::append();
                else
                  WTF::StringBuilder::append();
LABEL_307:
                v162 = v296;
                v296 = 0;
                if (v162)
                {
                  if (*(_DWORD *)v162 == 2)
                    WTF::StringImpl::destroy(v162, v154);
                  else
                    *(_DWORD *)v162 -= 2;
                }
              }
LABEL_310:
              v163 = v298;
              v298 = 0;
              if (v163)
              {
                if (*(_DWORD *)v163 == 2)
                  WTF::StringImpl::destroy(v163, v154);
                else
                  *(_DWORD *)v163 -= 2;
              }
              v152 = (v152 + 1);
              if (v152 >= (*(unsigned int (**)(_QWORD))(**((_QWORD **)v144 + 3) + 72))(*((_QWORD *)v144 + 3)))
                goto LABEL_322;
            }
            *(_DWORD *)v156 -= 2;
LABEL_282:
            if (!v155)
              goto LABEL_310;
            goto LABEL_283;
          }
LABEL_322:
          v164 = v300;
          if (v300
            || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v300),
                WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v300),
                (v164 = v300) != 0))
          {
            *(_DWORD *)v164 += 2;
          }
          v296 = v164;
          v165 = (WTF::StringImpl *)v301;
          v301 = 0;
          if (v165)
          {
            if (*(_DWORD *)v165 == 2)
              WTF::StringImpl::destroy(v165, v151);
            else
              *(_DWORD *)v165 -= 2;
          }
          v166 = v300;
          v300 = 0;
          if (v166)
          {
            if (*(_DWORD *)v166 == 2)
              WTF::StringImpl::destroy(v166, v151);
            else
              *(_DWORD *)v166 -= 2;
          }
          v167 = v299;
          v299 = 0;
          if (v167)
          {
            if (*(_DWORD *)v167 == 2)
              WTF::StringImpl::destroy(v167, v151);
            else
              *(_DWORD *)v167 -= 2;
          }
LABEL_334:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v296, v168);
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v141 + 2, &v298, (const WTF::StringImpl *)&v299, (uint64_t)&v300);
          if ((_BYTE)v302)
          {
            v169 = (uint64_t *)((char *)v141 + 24);
            v170 = *((unsigned int *)v141 + 9);
            if ((_DWORD)v170 == *((_DWORD *)v141 + 8))
            {
              v187 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v169, v170 + 1, (unint64_t)&v298);
              v170 = *((unsigned int *)v141 + 9);
              v188 = *((_QWORD *)v141 + 3);
              v189 = *v187;
              if (*v187)
                *v189 += 2;
              *(_QWORD *)(v188 + 8 * v170) = v189;
            }
            else
            {
              v171 = *v169;
              v172 = v298;
              if (v298)
                *(_DWORD *)v298 += 2;
              *(_QWORD *)(v171 + 8 * v170) = v172;
            }
            *((_DWORD *)v141 + 9) = v170 + 1;
          }
          v173 = v299;
          v299 = 0;
          if (v173)
          {
            if (*(_DWORD *)v173 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v173;
          }
          v174 = v298;
          v298 = 0;
          if (v174)
          {
            if (*(_DWORD *)v174 == 2)
              WTF::StringImpl::destroy(v174, v90);
            else
              *(_DWORD *)v174 -= 2;
          }
          v175 = v296;
          v296 = 0;
          if (v175)
          {
            if (*(_DWORD *)v175 == 2)
              WTF::StringImpl::destroy(v175, v90);
            else
              *(_DWORD *)v175 -= 2;
          }
          v176 = v292;
          v177 = *(unsigned int *)(v292 + 28);
          if ((_DWORD)v177 == *(_DWORD *)(v292 + 24))
          {
            v178 = v177 + (v177 >> 2);
            if (v178 >= 0x10)
              v179 = v178 + 1;
            else
              v179 = 16;
            if (v179 <= v177 + 1)
              v180 = v177 + 1;
            else
              v180 = v179;
            if (v180 >> 29)
              goto LABEL_554;
            v181 = *(void **)(v292 + 16);
            v182 = (void *)WTF::fastMalloc((WTF *)(8 * v180));
            *(_DWORD *)(v176 + 24) = v180;
            *(_QWORD *)(v176 + 16) = v182;
            memcpy(v182, v181, 8 * v177);
            if (v181)
            {
              if (*(void **)(v176 + 16) == v181)
              {
                *(_QWORD *)(v176 + 16) = 0;
                *(_DWORD *)(v176 + 24) = 0;
              }
              WTF::fastFree((WTF *)v181, v90);
            }
            v177 = *(unsigned int *)(v176 + 28);
            v183 = (WTF::StringImpl **)(*(_QWORD *)(v176 + 16) + 8 * v177);
          }
          else
          {
            v183 = (WTF::StringImpl **)(*(_QWORD *)(v292 + 16) + 8 * v177);
          }
          *v183 = v141;
          *(_DWORD *)(v176 + 28) = v177 + 1;
        }
LABEL_364:
        v6 = (uint64_t)v286;
        v286 = 0;
        v2 = v284;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            v6 = WTF::StringImpl::destroy((WTF::StringImpl *)v6, v90);
          else
            *(_DWORD *)v6 -= 2;
        }
        goto LABEL_175;
      }
      Inspector::Protocol::CSS::CSSProperty::setImplicit((Inspector::Protocol::CSS::CSSProperty *)v11, 0);
      v76 = (WTF::StringImpl **)v8;
      if (v44 >= 2)
        v76 = (WTF::StringImpl **)WebCore::nameString(v44);
      v77 = *v76;
      if (*v76)
        *(_DWORD *)v77 += 2;
      v299 = v77;
      v78 = v291;
      if (!v291)
        goto LABEL_167;
      v79 = *(_DWORD *)(v291 - 8);
      v80 = *((_DWORD *)v77 + 4);
      v81 = v80 < 0x100 ? WTF::StringImpl::hashSlowCase(v77) : v80 >> 8;
      for (j = 0; ; v81 = ++j + v97)
      {
        v97 = v81 & v79;
        v98 = *(WTF **)(v78 + 16 * v97);
        if (v98 != (WTF *)-1)
        {
          if (!v98)
            goto LABEL_167;
          if ((WTF::equal(v98, v77, v75) & 1) != 0)
            break;
        }
      }
      if ((_DWORD)v97 == *(_DWORD *)(v78 - 4))
      {
LABEL_167:
        ++*(_DWORD *)v11;
        v298 = (WTF::StringImpl *)v11;
        WTF::HashMap<WTF::String,WTF::RefPtr<Inspector::Protocol::CSS::CSSProperty,WTF::RawPtrTraits<Inspector::Protocol::CSS::CSSProperty>,WTF::DefaultRefDerefTraits<Inspector::Protocol::CSS::CSSProperty>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<Inspector::Protocol::CSS::CSSProperty,WTF::RawPtrTraits<Inspector::Protocol::CSS::CSSProperty>,WTF::DefaultRefDerefTraits<Inspector::Protocol::CSS::CSSProperty>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<Inspector::Protocol::CSS::CSSProperty,WTF::RawPtrTraits<Inspector::Protocol::CSS::CSSProperty>,WTF::DefaultRefDerefTraits<Inspector::Protocol::CSS::CSSProperty>>>((uint64_t)&v300, &v291, &v299, &v298);
        v100 = v298;
        if (!v298)
        {
LABEL_170:
          v2 = v284;
          goto LABEL_171;
        }
        v101 = *(_DWORD *)v298 - 1;
        if (*(_DWORD *)v298 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          goto LABEL_170;
        }
LABEL_169:
        *(_DWORD *)v100 = v101;
        goto LABEL_170;
      }
      if (!*((_BYTE *)v8 + 18))
      {
        v115 = *(WTF::JSONImpl::ObjectBase **)(v78 + 16 * v97 + 8);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v298 = v300;
        WTF::JSONImpl::ObjectBase::getBoolean(v115, (const WTF::String *)&v298);
        v100 = v298;
        v298 = 0;
        if (!v100)
          goto LABEL_170;
        v101 = *(_DWORD *)v100 - 2;
        if (*(_DWORD *)v100 == 2)
        {
          WTF::StringImpl::destroy(v100, v99);
          goto LABEL_170;
        }
        goto LABEL_169;
      }
      v102 = v78 + 16 * v97;
      v104 = *(WTF::JSONImpl::ObjectBase **)(v102 + 8);
      v103 = (uint64_t *)(v102 + 8);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v296 = v300;
      WTF::JSONImpl::ObjectBase::getString(v104, (const WTF::String *)&v296);
      v106 = v296;
      v296 = 0;
      if (v106)
      {
        if (*(_DWORD *)v106 == 2)
          WTF::StringImpl::destroy(v106, v105);
        else
          *(_DWORD *)v106 -= 2;
      }
      v107 = v298;
      v2 = v284;
      if (v298)
      {
        *(_DWORD *)v298 += 2;
        if (v283)
        {
          if (*(_DWORD *)v283 == 2)
            WTF::StringImpl::destroy(v283, v105);
          else
            *(_DWORD *)v283 -= 2;
        }
        v283 = v107;
      }
      v108 = (WTF::JSONImpl::ObjectBase *)*v103;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v296 = v300;
      WTF::JSONImpl::ObjectBase::getString(v108, (const WTF::String *)&v296);
      v109 = v296;
      v296 = 0;
      if (v109)
      {
        if (*(_DWORD *)v109 == 2)
          WTF::StringImpl::destroy(v109, v99);
        else
          *(_DWORD *)v109 -= 2;
      }
      v110 = v300;
      if (!v300)
      {
        v114 = 0;
        goto LABEL_250;
      }
      *(_DWORD *)v300 += 2;
      if (v282)
      {
        if (*(_DWORD *)v282 == 2)
          WTF::StringImpl::destroy(v282, v99);
        else
          *(_DWORD *)v282 -= 2;
      }
      Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)0x30);
      v112 = WTF::equal(v110, v296, v111);
      v113 = v296;
      v296 = 0;
      if (!v113)
        goto LABEL_199;
      if (*(_DWORD *)v113 != 2)
      {
        *(_DWORD *)v113 -= 2;
LABEL_199:
        if ((v112 & 1) == 0)
          goto LABEL_238;
        goto LABEL_200;
      }
      WTF::StringImpl::destroy(v113, v99);
      if ((v112 & 1) == 0)
      {
LABEL_238:
        if (*((_BYTE *)v8 + 16))
        {
          v114 = 1;
        }
        else
        {
          if (v9)
            v134 = 49;
          else
            v134 = 48;
          v114 = v298 == 0;
          if (v298)
            v10 = v134;
          else
            v10 = v10;
        }
        goto LABEL_246;
      }
LABEL_200:
      v114 = 0;
LABEL_246:
      v135 = v300;
      v300 = 0;
      if (v135)
      {
        if (*(_DWORD *)v135 == 2)
          WTF::StringImpl::destroy(v135, v99);
        else
          *(_DWORD *)v135 -= 2;
      }
      v282 = v110;
LABEL_250:
      v136 = v298;
      v298 = 0;
      if (!v136)
        goto LABEL_253;
      if (*(_DWORD *)v136 != 2)
      {
        *(_DWORD *)v136 -= 2;
LABEL_253:
        if (v114)
          goto LABEL_254;
        goto LABEL_171;
      }
      WTF::StringImpl::destroy(v136, v99);
      if (v114)
      {
LABEL_254:
        Inspector::Protocol::CSS::CSSProperty::setStatus(*v103, (Inspector::Protocol::Helpers *)0x30);
        ++*(_DWORD *)v11;
        v298 = (WTF::StringImpl *)v11;
        WTF::HashMap<WTF::String,WTF::RefPtr<Inspector::Protocol::CSS::CSSProperty,WTF::RawPtrTraits<Inspector::Protocol::CSS::CSSProperty>,WTF::DefaultRefDerefTraits<Inspector::Protocol::CSS::CSSProperty>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<Inspector::Protocol::CSS::CSSProperty,WTF::RawPtrTraits<Inspector::Protocol::CSS::CSSProperty>,WTF::DefaultRefDerefTraits<Inspector::Protocol::CSS::CSSProperty>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<Inspector::Protocol::CSS::CSSProperty,WTF::RawPtrTraits<Inspector::Protocol::CSS::CSSProperty>,WTF::DefaultRefDerefTraits<Inspector::Protocol::CSS::CSSProperty>>>((uint64_t)&v300, &v291, &v299, &v298);
        if (v298)
        {
          if (*(_DWORD *)v298 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v298;
        }
      }
LABEL_171:
      if (v299)
      {
        if (*(_DWORD *)v299 == 2)
          WTF::StringImpl::destroy(v299, v99);
        else
          *(_DWORD *)v299 -= 2;
      }
LABEL_174:
      v6 = (uint64_t)Inspector::Protocol::CSS::CSSProperty::setStatus(v11, (Inspector::Protocol::Helpers *)v10);
LABEL_175:
      if (*(_DWORD *)v11 == 1)
        v6 = WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v11;
      v8 = (WTF::StringImpl *)((char *)v8 + 48);
      if (v8 == v285)
        goto LABEL_385;
    }
  }
  v282 = 0;
  v283 = 0;
LABEL_385:
  WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)v6);
  v299 = v300;
  v190 = Inspector::Protocol::CSS::CSSStyle::Builder<0>::setCssProperties((uint64_t *)&v299, &v293);
  Inspector::Protocol::CSS::CSSStyle::Builder<1>::setShorthandEntries(v190, &v292);
  *v281 = (uint64_t)v299;
  v192 = v287;
  v287 = 0;
  if (v192)
    WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v192, v191);
  v193 = v288;
  if (v288)
  {
    v288 = 0;
    LODWORD(v289) = 0;
    WTF::fastFree(v193, v191);
  }
  v194 = v283;
  if (v282)
  {
    if (*(_DWORD *)v282 == 2)
    {
      WTF::StringImpl::destroy(v282, (WTF::StringImpl *)v191);
      v194 = v283;
      if (!v283)
        goto LABEL_395;
      goto LABEL_393;
    }
    *(_DWORD *)v282 -= 2;
  }
  if (!v283)
    goto LABEL_395;
LABEL_393:
  if (*(_DWORD *)v194 == 2)
    WTF::StringImpl::destroy(v194, (WTF::StringImpl *)v191);
  else
    *(_DWORD *)v194 -= 2;
LABEL_395:
  if (v290)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v290, (WTF::StringImpl *)v191);
  v195 = v291;
  if (v291)
  {
    v196 = *(unsigned int *)(v291 - 4);
    if ((_DWORD)v196)
    {
      v197 = v291;
      do
      {
        v198 = *(WTF::StringImpl **)v197;
        if (*(_QWORD *)v197 != -1)
        {
          v199 = *(_DWORD **)(v197 + 8);
          *(_QWORD *)(v197 + 8) = 0;
          if (v199)
          {
            if (*v199 == 1)
            {
              WTF::JSONImpl::Value::operator delete();
              v198 = *(WTF::StringImpl **)v197;
            }
            else
            {
              --*v199;
            }
          }
          *(_QWORD *)v197 = 0;
          if (v198)
          {
            if (*(_DWORD *)v198 == 2)
              WTF::StringImpl::destroy(v198, (WTF::StringImpl *)v191);
            else
              *(_DWORD *)v198 -= 2;
          }
        }
        v197 += 16;
        --v196;
      }
      while (v196);
    }
    WTF::fastFree((WTF *)(v195 - 16), v191);
  }
  if (v292)
  {
    if (*(_DWORD *)v292 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v292;
  }
  if (v293)
  {
    if (*v293 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v293;
  }
  v200 = (WTF::JSONImpl::Object *)WTF::Vector<WebCore::InspectorStyleProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v294, (WTF::StringImpl *)v191);
  v201 = *((_QWORD *)v2 + 1);
  if (v201 && *(_DWORD *)(v201 + 4))
  {
    WTF::JSONImpl::Object::create(v200);
    v236 = v299;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WebCore::InspectorStyle *)((char *)v2 + 8), v237);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v236 + 2, &v288, (const WTF::StringImpl *)&v294, (uint64_t)&v300);
    if ((_BYTE)v302)
    {
      v239 = (uint64_t *)((char *)v236 + 24);
      v240 = *((unsigned int *)v236 + 9);
      if ((_DWORD)v240 == *((_DWORD *)v236 + 8))
      {
        v269 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v239, v240 + 1, (unint64_t)&v288);
        v240 = *((unsigned int *)v236 + 9);
        v270 = *((_QWORD *)v236 + 3);
        v271 = *v269;
        if (*v269)
          *v271 += 2;
        *(_QWORD *)(v270 + 8 * v240) = v271;
      }
      else
      {
        v241 = *v239;
        v242 = v288;
        if (v288)
          *(_DWORD *)v288 += 2;
        *(_QWORD *)(v241 + 8 * v240) = v242;
      }
      *((_DWORD *)v236 + 9) = v240 + 1;
    }
    v243 = v294;
    v294 = 0;
    if (v243)
    {
      if (*(_DWORD *)v243 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v243;
    }
    v244 = v288;
    v288 = 0;
    if (v244)
    {
      if (*(_DWORD *)v244 == 2)
        WTF::StringImpl::destroy(v244, v238);
      else
        *(_DWORD *)v244 -= 2;
    }
    v245 = (WTF::JSONImpl::Value *)*((unsigned int *)v2 + 4);
    v246 = v299;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v245);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v246 + 2, &v288, (const WTF::StringImpl *)&v294, (uint64_t)&v300);
    if ((_BYTE)v302)
    {
      v248 = (uint64_t *)((char *)v246 + 24);
      v249 = *((unsigned int *)v246 + 9);
      if ((_DWORD)v249 == *((_DWORD *)v246 + 8))
      {
        v272 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v248, v249 + 1, (unint64_t)&v288);
        v249 = *((unsigned int *)v246 + 9);
        v273 = *((_QWORD *)v246 + 3);
        v274 = *v272;
        if (*v272)
          *v274 += 2;
        *(_QWORD *)(v273 + 8 * v249) = v274;
      }
      else
      {
        v250 = *v248;
        v251 = v288;
        if (v288)
          *(_DWORD *)v288 += 2;
        *(_QWORD *)(v250 + 8 * v249) = v251;
      }
      *((_DWORD *)v246 + 9) = v249 + 1;
    }
    v252 = v294;
    v294 = 0;
    if (v252)
    {
      if (*(_DWORD *)v252 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v252;
    }
    v253 = v288;
    v288 = 0;
    if (v253)
    {
      if (*(_DWORD *)v253 == 2)
        WTF::StringImpl::destroy(v253, v247);
      else
        *(_DWORD *)v253 -= 2;
    }
    v254 = v299;
    if (v299)
    {
      v255 = *v281;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v288 = v254;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v255 + 16), &v294, (const WTF::StringImpl *)&v288, (uint64_t)&v300);
      if ((_BYTE)v302)
      {
        v257 = (uint64_t *)(v255 + 24);
        v258 = *(unsigned int *)(v255 + 36);
        if ((_DWORD)v258 == *(_DWORD *)(v255 + 32))
        {
          v278 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v257, v258 + 1, (unint64_t)&v294);
          v258 = *(unsigned int *)(v255 + 36);
          v279 = *(_QWORD *)(v255 + 24);
          v280 = *v278;
          if (*v278)
            *v280 += 2;
          *(_QWORD *)(v279 + 8 * v258) = v280;
        }
        else
        {
          v259 = *v257;
          v260 = v294;
          if (v294)
            *(_DWORD *)v294 += 2;
          *(_QWORD *)(v259 + 8 * v258) = v260;
        }
        *(_DWORD *)(v255 + 36) = v258 + 1;
      }
      v261 = v288;
      v288 = 0;
      if (v261)
      {
        if (*(_DWORD *)v261 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v261;
      }
      v262 = v294;
      v294 = 0;
      if (v262)
      {
        if (*(_DWORD *)v262 == 2)
          WTF::StringImpl::destroy(v262, v256);
        else
          *(_DWORD *)v262 -= 2;
      }
    }
  }
  v202 = *v281;
  v203 = *((_QWORD *)v2 + 3);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v298 = v300;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v203 + 96))(&v299, v203, &v298);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v299, v204);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v202 + 16), &v288, (const WTF::StringImpl *)&v294, (uint64_t)&v300);
  if ((_BYTE)v302)
  {
    v206 = (uint64_t *)(v202 + 24);
    v207 = *(unsigned int *)(v202 + 36);
    if ((_DWORD)v207 == *(_DWORD *)(v202 + 32))
    {
      v263 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v206, v207 + 1, (unint64_t)&v288);
      v207 = *(unsigned int *)(v202 + 36);
      v264 = *(_QWORD *)(v202 + 24);
      v265 = *v263;
      if (*v263)
        *v265 += 2;
      *(_QWORD *)(v264 + 8 * v207) = v265;
    }
    else
    {
      v208 = *v206;
      v209 = v288;
      if (v288)
        *(_DWORD *)v288 += 2;
      *(_QWORD *)(v208 + 8 * v207) = v209;
    }
    *(_DWORD *)(v202 + 36) = v207 + 1;
  }
  v210 = v294;
  v294 = 0;
  if (v210)
  {
    if (*(_DWORD *)v210 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v210;
  }
  v211 = v288;
  v288 = 0;
  if (v211)
  {
    if (*(_DWORD *)v211 == 2)
      WTF::StringImpl::destroy(v211, v205);
    else
      *(_DWORD *)v211 -= 2;
  }
  v212 = v299;
  v299 = 0;
  if (v212)
  {
    if (*(_DWORD *)v212 == 2)
      WTF::StringImpl::destroy(v212, v205);
    else
      *(_DWORD *)v212 -= 2;
  }
  v213 = v298;
  v298 = 0;
  if (v213)
  {
    if (*(_DWORD *)v213 == 2)
      WTF::StringImpl::destroy(v213, v205);
    else
      *(_DWORD *)v213 -= 2;
  }
  v214 = *((_QWORD *)v2 + 3);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v214 + 96))(&v299, v214, &v298);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v299, v215);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v202 + 16), &v288, (const WTF::StringImpl *)&v294, (uint64_t)&v300);
  if ((_BYTE)v302)
  {
    v217 = (uint64_t *)(v202 + 24);
    v218 = *(unsigned int *)(v202 + 36);
    if ((_DWORD)v218 == *(_DWORD *)(v202 + 32))
    {
      v266 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v217, v218 + 1, (unint64_t)&v288);
      v218 = *(unsigned int *)(v202 + 36);
      v267 = *(_QWORD *)(v202 + 24);
      v268 = *v266;
      if (*v266)
        *v268 += 2;
      *(_QWORD *)(v267 + 8 * v218) = v268;
    }
    else
    {
      v219 = *v217;
      v220 = v288;
      if (v288)
        *(_DWORD *)v288 += 2;
      *(_QWORD *)(v219 + 8 * v218) = v220;
    }
    *(_DWORD *)(v202 + 36) = v218 + 1;
  }
  v221 = v294;
  v294 = 0;
  if (v221)
  {
    if (*(_DWORD *)v221 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v221;
  }
  v222 = v288;
  v288 = 0;
  if (v222)
  {
    if (*(_DWORD *)v222 == 2)
      WTF::StringImpl::destroy(v222, v216);
    else
      *(_DWORD *)v222 -= 2;
  }
  v223 = v299;
  v299 = 0;
  if (v223)
  {
    if (*(_DWORD *)v223 == 2)
      WTF::StringImpl::destroy(v223, v216);
    else
      *(_DWORD *)v223 -= 2;
  }
  v224 = v298;
  v298 = 0;
  if (v224)
  {
    if (*(_DWORD *)v224 == 2)
      WTF::StringImpl::destroy(v224, v216);
    else
      *(_DWORD *)v224 -= 2;
  }
  result = (WTF::StringImpl *)*((_QWORD *)v2 + 4);
  if (result)
  {
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 72))(result);
    if ((_DWORD)result)
    {
      result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD))(**((_QWORD **)v2 + 4) + 48))(&v299, *((_QWORD *)v2 + 4), *((_QWORD *)v2 + 3));
      if (v299)
      {
        v226 = (char *)v299 + 16;
        (*(void (**)(WTF::StringImpl **__return_ptr))(**((_QWORD **)v2 + 4) + 88))(&v300);
        WebCore::buildSourceRangeObject((WTF::StringImpl *)&v298, (uint64_t)v226, (uint64_t)&v300, 0);
        v228 = v300;
        if (v300)
        {
          v300 = 0;
          LODWORD(v301) = 0;
          WTF::fastFree(v228, v227);
        }
        v229 = v298;
        if (v298)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v288 = v229;
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v202 + 16), &v294, (const WTF::StringImpl *)&v288, (uint64_t)&v300);
          if ((_BYTE)v302)
          {
            v230 = (uint64_t *)(v202 + 24);
            v231 = *(unsigned int *)(v202 + 36);
            if ((_DWORD)v231 == *(_DWORD *)(v202 + 32))
            {
              v275 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v230, v231 + 1, (unint64_t)&v294);
              v231 = *(unsigned int *)(v202 + 36);
              v276 = *(_QWORD *)(v202 + 24);
              v277 = *v275;
              if (*v275)
                *v277 += 2;
              *(_QWORD *)(v276 + 8 * v231) = v277;
            }
            else
            {
              v232 = *v230;
              v233 = v294;
              if (v294)
                *(_DWORD *)v294 += 2;
              *(_QWORD *)(v232 + 8 * v231) = v233;
            }
            *(_DWORD *)(v202 + 36) = v231 + 1;
          }
          v234 = v288;
          v288 = 0;
          if (v234)
          {
            if (*(_DWORD *)v234 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v234;
          }
          v235 = v294;
          v294 = 0;
          if (v235)
          {
            if (*(_DWORD *)v235 == 2)
              WTF::StringImpl::destroy(v235, (WTF::StringImpl *)v227);
            else
              *(_DWORD *)v235 -= 2;
          }
        }
        result = v299;
        v299 = 0;
        if (result)
          return (WTF::StringImpl *)WTF::RefCounted<WebCore::CSSRuleSourceData>::deref((uint64_t)result, v227);
      }
    }
  }
  return result;
}

WTF::JSONImpl::Object *WebCore::InspectorStyle::buildArrayForComputedStyle@<X0>(WebCore::InspectorStyle *this@<X0>, uint64_t *a2@<X8>)
{
  WTF::JSONImpl::ArrayBase *v4;
  WTF::JSONImpl::Object *result;
  WTF::StringImpl *v6;
  WTF::JSONImpl::Value *v7;
  WTF::JSONImpl::Value *v8;
  uint64_t *v9;
  WTF::JSONImpl::Value *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  uint64_t *v20;
  WTF::JSONImpl::Object *v21;
  WTF::JSONImpl::Value *v22;
  unsigned int v23;
  uint64_t v24;

  v4 = (WTF::JSONImpl::ArrayBase *)WTF::fastMalloc((WTF *)0x20);
  *a2 = WTF::JSONImpl::ArrayBase::ArrayBase(v4);
  result = (WTF::JSONImpl::Object *)WebCore::InspectorStyle::collectProperties(this, 1, (uint64_t)&v22);
  if (!v23)
    return (WTF::JSONImpl::Object *)WTF::Vector<WebCore::InspectorStyleProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v6);
  v7 = v22;
  v8 = (WTF::JSONImpl::Value *)((char *)v22 + 48 * v23);
  while (1)
  {
    WTF::JSONImpl::Object::create(result);
    v21 = (WTF::JSONImpl::Object *)v24;
    v9 = Inspector::Protocol::Database::Database::Builder<3>::setName((uint64_t *)&v21, v7);
    v10 = (WTF::JSONImpl::Value *)((char *)v7 + 8);
    v11 = Inspector::Protocol::CSS::CSSComputedStyleProperty::Builder<1>::setValue(v9, v10);
    v12 = *v11;
    *v11 = 0;
    result = v21;
    v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        result = (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)result;
    }
    v13 = *a2;
    v14 = *(unsigned int *)(*a2 + 28);
    if ((_DWORD)v14 == *(_DWORD *)(*a2 + 24))
      break;
    v20 = (uint64_t *)(*(_QWORD *)(v13 + 16) + 8 * v14);
LABEL_20:
    *v20 = v12;
    *(_DWORD *)(v13 + 28) = v14 + 1;
    v7 = (WTF::JSONImpl::Value *)((char *)v10 + 40);
    if (v7 == v8)
      return (WTF::JSONImpl::Object *)WTF::Vector<WebCore::InspectorStyleProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v6);
  }
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= v14 + 1)
    v17 = v14 + 1;
  else
    v17 = v16;
  if (!(v17 >> 29))
  {
    v18 = *(void **)(v13 + 16);
    v19 = (void *)WTF::fastMalloc((WTF *)(8 * v17));
    *(_DWORD *)(v13 + 24) = v17;
    *(_QWORD *)(v13 + 16) = v19;
    result = (WTF::JSONImpl::Object *)memcpy(v19, v18, 8 * v14);
    if (v18)
    {
      if (*(void **)(v13 + 16) == v18)
      {
        *(_QWORD *)(v13 + 16) = 0;
        *(_DWORD *)(v13 + 24) = 0;
      }
      result = (WTF::JSONImpl::Object *)WTF::fastFree((WTF *)v18, v6);
    }
    v14 = *(unsigned int *)(v13 + 28);
    v20 = (uint64_t *)(*(_QWORD *)(v13 + 16) + 8 * v14);
    goto LABEL_20;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl **WebCore::InspectorStyle::collectProperties@<X0>(WebCore::InspectorStyle *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  const WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  BOOL v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  BOOL v23;
  char *v24;
  _DWORD *v25;
  unsigned int v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unsigned __int16 v42;
  uint64_t v43;
  unsigned int v44;
  BOOL v45;
  WTF::StringImpl *v46;
  const WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  int v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  BOOL v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  BOOL v55;
  char *v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  WTF::StringImpl **v62;
  WTF::StringImpl **v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  WTF::StringImpl **result;
  WTF::StringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  char v82;
  char v83;
  char v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  char *v88;
  _DWORD *v89;
  unsigned int v90;
  uint64_t v91;
  _DWORD *v92;
  _DWORD *v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  const WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  int v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  WTF::StringImpl *v110[3];
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  int v114;
  uint64_t v115;
  __int16 v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  int v120;
  uint64_t v121;
  WTF::StringImpl **v122;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v122 = 0;
  v5 = *((_QWORD *)this + 4);
  if (v5 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) & 1) != 0)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 4) + 48))(&v121, *((_QWORD *)this + 4), *((_QWORD *)this + 3));
    if (v121)
    {
      v7 = *(_QWORD *)(v121 + 40);
      v8 = *((_QWORD *)this + 4);
      if (v8
        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8)
        && ((*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 4) + 48))(v110, *((_QWORD *)this + 4), *((_QWORD *)this + 3)), v110[0]))
      {
        (*(void (**)(WTF::StringImpl **__return_ptr))(**((_QWORD **)this + 4) + 24))(&v112);
        if (v114)
        {
          if (v114 != 1)
          {
            v108 = std::__throw_bad_variant_access[abi:sn180100]();
            return (WTF::StringImpl **)Inspector::Protocol::CSS::CSSComputedStyleProperty::Builder<1>::setValue(v108);
          }
          v9 = v113;
          v113 = 0;
          LOBYTE(v118) = (_BYTE)v112;
          v119 = v9;
          v120 = 1;
        }
        else
        {
          v104 = v112;
          v112 = 0;
          if (v104)
          {
            v6 = *((unsigned int *)v110[0] + 4);
            if ((_DWORD)v6 || *((_DWORD *)v104 + 1) > *((_DWORD *)v110[0] + 5))
            {
              WTF::StringImpl::substring(v104);
              v106 = v118;
              v105 = *(_DWORD *)v104 - 2;
            }
            else
            {
              v105 = *(_DWORD *)v104;
              *(_DWORD *)v104 += 2;
              v106 = v104;
            }
            v118 = v106;
            v120 = 0;
            if (v105)
              *(_DWORD *)v104 = v105;
            else
              WTF::StringImpl::destroy(v104, (WTF::StringImpl *)v6);
          }
          else
          {
            v118 = 0;
            v120 = 0;
          }
        }
        if (v114 != -1)
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33EEAC0[v114])(&v111, &v112);
        v107 = v110[0];
        v110[0] = 0;
        if (v107)
          WTF::RefCounted<WebCore::CSSRuleSourceData>::deref((uint64_t)v107, (void *)v6);
      }
      else
      {
        LOBYTE(v118) = 5;
        v119 = 0;
        v120 = 1;
      }
      if (v120)
      {
        v76 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)v76 += 2;
      }
      else
      {
        v76 = v118;
        v118 = 0;
      }
      v77 = *(unsigned int *)(v7 + 20);
      if ((_DWORD)v77)
      {
        v10 = 0;
        v11 = 0;
        v78 = *(_QWORD *)(v7 + 8);
        v79 = 32 * v77;
        while (1)
        {
          v80 = *(WTF::StringImpl **)v78;
          if (*(_QWORD *)v78)
            *(_DWORD *)v80 += 2;
          v81 = *(WTF::StringImpl **)(v78 + 8);
          if (v81)
            *(_DWORD *)v81 += 2;
          v82 = *(_BYTE *)(v78 + 16);
          v83 = *(_BYTE *)(v78 + 17);
          v84 = *(_BYTE *)(v78 + 18);
          v85 = *(_QWORD *)(v78 + 20);
          if (v80)
            *(_DWORD *)v80 += 2;
          v112 = v80;
          if (v81)
          {
            *(_DWORD *)v81 += 2;
            v113 = v81;
            LOBYTE(v114) = v82;
            BYTE1(v114) = v83;
            BYTE2(v114) = v84;
            v115 = v85;
            LOBYTE(v116) = 1;
            HIBYTE(v116) = v83;
            v117 = 0;
            if (*(_DWORD *)v81 == 2)
              WTF::StringImpl::destroy(v81, (WTF::StringImpl *)v6);
            else
              *(_DWORD *)v81 -= 2;
          }
          else
          {
            v113 = 0;
            LOBYTE(v114) = v82;
            BYTE1(v114) = v83;
            BYTE2(v114) = v84;
            v115 = v85;
            LOBYTE(v116) = 1;
            HIBYTE(v116) = v83;
            v117 = 0;
          }
          if (!v80)
            goto LABEL_189;
          if (*(_DWORD *)v80 != 2)
            break;
          WTF::StringImpl::destroy(v80, (WTF::StringImpl *)v6);
          if (v76)
          {
LABEL_190:
            v6 = v115;
            if ((_DWORD)v115 || *((_DWORD *)v76 + 1) > HIDWORD(v115))
            {
              WTF::StringImpl::substring(v76);
              v86 = v110[0];
            }
            else
            {
              *(_DWORD *)v76 += 2;
              v86 = v76;
            }
            goto LABEL_193;
          }
LABEL_233:
          v86 = 0;
LABEL_193:
          v87 = v117;
          v117 = v86;
          if (v87)
          {
            if (*(_DWORD *)v87 == 2)
              WTF::StringImpl::destroy(v87, (WTF::StringImpl *)v6);
            else
              *(_DWORD *)v87 -= 2;
          }
          if (v11 == *(_DWORD *)(a3 + 8))
          {
            v88 = WTF::Vector<WebCore::InspectorStyleProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v11 + 1, (unint64_t)&v112);
            v89 = *(_DWORD **)v88;
            if (*(_QWORD *)v88)
              *v89 += 2;
            v90 = *(_DWORD *)(a3 + 12);
            v10 = *(_QWORD *)a3;
            v91 = *(_QWORD *)a3 + 48 * v90;
            *(_QWORD *)v91 = v89;
            v92 = (_DWORD *)*((_QWORD *)v88 + 1);
            if (v92)
              *v92 += 2;
            *(_QWORD *)(v91 + 8) = v92;
            *(_BYTE *)(v91 + 16) = v88[16];
            *(_WORD *)(v91 + 17) = *(_WORD *)(v88 + 17);
            *(_QWORD *)(v91 + 20) = *(_QWORD *)(v88 + 20);
            *(_WORD *)(v10 + 48 * v90 + 32) = *((_WORD *)v88 + 16);
            v93 = (_DWORD *)*((_QWORD *)v88 + 5);
            if (v93)
              *v93 += 2;
            *(_QWORD *)(v10 + 48 * v90 + 40) = v93;
          }
          else
          {
            v94 = v112;
            if (v112)
              *(_DWORD *)v112 += 2;
            v95 = v10 + 48 * v11;
            *(_QWORD *)v95 = v94;
            v96 = v113;
            if (v113)
              *(_DWORD *)v113 += 2;
            *(_QWORD *)(v95 + 8) = v96;
            *(_BYTE *)(v95 + 16) = v114;
            *(_WORD *)(v95 + 17) = *(_WORD *)((char *)&v114 + 1);
            *(_QWORD *)(v95 + 20) = v115;
            *(_WORD *)(v10 + 48 * v11 + 32) = v116;
            v97 = v117;
            if (v117)
              *(_DWORD *)v117 += 2;
            *(_QWORD *)(v10 + 48 * v11 + 40) = v97;
            v90 = *(_DWORD *)(a3 + 12);
          }
          v11 = v90 + 1;
          *(_DWORD *)(a3 + 12) = v90 + 1;
          if (*(_QWORD *)v78 && WTF::StringImpl::startsWith())
          {
            v99 = *(WTF::StringImpl **)v78;
            if (*(_QWORD *)v78)
              *(_DWORD *)v99 += 2;
            v111 = v99;
          }
          else
          {
            WTF::String::convertToASCIILowercase((WTF::String *)v78);
          }
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v122, &v111, v98, (uint64_t)v110);
          v100 = v111;
          v111 = 0;
          if (v100)
          {
            if (*(_DWORD *)v100 == 2)
              WTF::StringImpl::destroy(v100, (WTF::StringImpl *)v6);
            else
              *(_DWORD *)v100 -= 2;
          }
          v101 = v117;
          v117 = 0;
          if (v101)
          {
            if (*(_DWORD *)v101 == 2)
              WTF::StringImpl::destroy(v101, (WTF::StringImpl *)v6);
            else
              *(_DWORD *)v101 -= 2;
          }
          v102 = v113;
          v113 = 0;
          if (v102)
          {
            if (*(_DWORD *)v102 == 2)
              WTF::StringImpl::destroy(v102, (WTF::StringImpl *)v6);
            else
              *(_DWORD *)v102 -= 2;
          }
          v103 = v112;
          v112 = 0;
          if (v103)
          {
            if (*(_DWORD *)v103 == 2)
              WTF::StringImpl::destroy(v103, (WTF::StringImpl *)v6);
            else
              *(_DWORD *)v103 -= 2;
          }
          v78 += 32;
          v79 -= 32;
          if (!v79)
            goto LABEL_242;
        }
        *(_DWORD *)v80 -= 2;
LABEL_189:
        if (v76)
          goto LABEL_190;
        goto LABEL_233;
      }
      v10 = 0;
      v11 = 0;
LABEL_242:
      if (v76)
      {
        if (*(_DWORD *)v76 == 2)
          WTF::StringImpl::destroy(v76, (WTF::StringImpl *)v6);
        else
          *(_DWORD *)v76 -= 2;
      }
      if (v120 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33EEAC0[v120])(&v112, &v118);
    }
    else
    {
      v10 = 0;
      v11 = 0;
    }
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v121 = 0;
  }
  v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 72))(*((_QWORD *)this + 3));
  if (v12 >= 1)
  {
    v14 = v12;
    v15 = 0;
    while (1)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 3) + 80))(&v118, *((_QWORD *)this + 3), v15);
      if (v118 && WTF::StringImpl::startsWith())
      {
        v17 = v118;
        if (v118)
          *(_DWORD *)v118 += 2;
        v110[0] = v17;
      }
      else
      {
        WTF::String::convertToASCIILowercase((WTF::String *)&v118);
      }
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v122, v110, v16, (uint64_t)&v112);
      v18 = v114;
      v19 = v110[0];
      v110[0] = 0;
      if (!v19)
        goto LABEL_22;
      if (*(_DWORD *)v19 != 2)
        break;
      WTF::StringImpl::destroy(v19, v13);
      if (v18)
      {
LABEL_23:
        (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**((_QWORD **)this + 3)
                                                                                           + 96))(v110, *((_QWORD *)this + 3), &v118);
        (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**((_QWORD **)this + 3)
                                                                                           + 104))(&v111, *((_QWORD *)this + 3), &v118);
        if (v111)
          v20 = *((_DWORD *)v111 + 1) == 0;
        else
          v20 = 1;
        v21 = v118;
        if (v118)
          *(_DWORD *)v118 += 2;
        v22 = v110[0];
        if (v110[0])
          *(_DWORD *)v110[0] += 2;
        if (v21)
          *(_DWORD *)v21 += 2;
        v112 = v21;
        if (v22)
          *(_DWORD *)v22 += 2;
        v23 = !v20;
        v113 = v22;
        LOBYTE(v114) = v23;
        *(_WORD *)((char *)&v114 + 1) = 256;
        v115 = 0;
        v116 = 0;
        v117 = 0;
        if (v11 == *(_DWORD *)(a3 + 8))
        {
          v24 = WTF::Vector<WebCore::InspectorStyleProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v11 + 1, (unint64_t)&v112);
          v25 = *(_DWORD **)v24;
          if (*(_QWORD *)v24)
            *v25 += 2;
          v26 = *(_DWORD *)(a3 + 12);
          v10 = *(_QWORD *)a3;
          v27 = *(_QWORD *)a3 + 48 * v26;
          *(_QWORD *)v27 = v25;
          v28 = (_DWORD *)*((_QWORD *)v24 + 1);
          if (v28)
            *v28 += 2;
          *(_QWORD *)(v27 + 8) = v28;
          *(_BYTE *)(v27 + 16) = v24[16];
          *(_WORD *)(v27 + 17) = *(_WORD *)(v24 + 17);
          *(_QWORD *)(v27 + 20) = *(_QWORD *)(v24 + 20);
          v29 = v10 + 48 * v26;
          *(_WORD *)(v29 + 32) = *((_WORD *)v24 + 16);
          v30 = (WTF::StringImpl **)(v29 + 40);
          v31 = (WTF::StringImpl **)(v24 + 40);
        }
        else
        {
          if (v21)
            *(_DWORD *)v21 += 2;
          v32 = v10 + 48 * v11;
          *(_QWORD *)v32 = v21;
          v33 = v113;
          if (v113)
            *(_DWORD *)v113 += 2;
          *(_QWORD *)(v32 + 8) = v33;
          *(_BYTE *)(v32 + 16) = v23;
          *(_WORD *)(v32 + 17) = 256;
          *(_QWORD *)(v32 + 20) = v115;
          v34 = v10 + 48 * v11;
          *(_WORD *)(v34 + 32) = v116;
          v30 = (WTF::StringImpl **)(v34 + 40);
          v26 = *(_DWORD *)(a3 + 12);
          v31 = &v117;
        }
        v35 = *v31;
        *v31 = 0;
        *v30 = v35;
        v11 = v26 + 1;
        *(_DWORD *)(a3 + 12) = v26 + 1;
        v36 = v117;
        v117 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, v13);
          else
            *(_DWORD *)v36 -= 2;
        }
        v37 = v113;
        v113 = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, v13);
          else
            *(_DWORD *)v37 -= 2;
        }
        v38 = v112;
        v112 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 != 2)
          {
            *(_DWORD *)v38 -= 2;
            goto LABEL_54;
          }
          WTF::StringImpl::destroy(v38, v13);
          if (!v22)
          {
LABEL_57:
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
                WTF::StringImpl::destroy(v21, v13);
              else
                *(_DWORD *)v21 -= 2;
            }
            v39 = v111;
            v111 = 0;
            if (v39)
            {
              if (*(_DWORD *)v39 == 2)
                WTF::StringImpl::destroy(v39, v13);
              else
                *(_DWORD *)v39 -= 2;
            }
            v40 = v110[0];
            v110[0] = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v13);
              else
                *(_DWORD *)v40 -= 2;
            }
            goto LABEL_66;
          }
        }
        else
        {
LABEL_54:
          if (!v22)
            goto LABEL_57;
        }
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v13);
        else
          *(_DWORD *)v22 -= 2;
        goto LABEL_57;
      }
LABEL_66:
      v41 = v118;
      v118 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v13);
        else
          *(_DWORD *)v41 -= 2;
      }
      v15 = (v15 + 1);
      if (v14 == (_DWORD)v15)
        goto LABEL_82;
    }
    *(_DWORD *)v19 -= 2;
LABEL_22:
    if (v18)
      goto LABEL_23;
    goto LABEL_66;
  }
LABEL_82:
  if (a2)
  {
    v42 = 2;
    while (1)
    {
      v43 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 176))(*((_QWORD *)this + 3));
      v44 = v42;
      v45 = v42 - 304 > 0x1E || ((1 << (v42 - 48)) & 0x7C010001) == 0;
      if (v45
        && (!v43
         || WebCore::isExposedNotInvalidAndNotInternal(v42, *(_QWORD *)(v43 + 664), *(_QWORD *)(v43 + 672), *(_QWORD *)(v43 + 680), *(_QWORD *)(v43 + 688), *(_QWORD *)(v43 + 696), *(_QWORD *)(v43 + 704), *(_QWORD *)(v43 + 712))))
      {
        break;
      }
LABEL_153:
      ++v42;
      if (v44 >= 0x229)
        goto LABEL_164;
    }
    v46 = (WTF::StringImpl *)*WebCore::nameString(v42);
    if (v46)
    {
      *(_DWORD *)v46 += 2;
      v118 = v46;
      if (WTF::StringImpl::startsWith())
      {
        v48 = v118;
        if (v118)
          *(_DWORD *)v118 += 2;
        v110[0] = v48;
LABEL_98:
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v122, v110, v47, (uint64_t)&v112);
        v49 = v114;
        v50 = v110[0];
        v110[0] = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 2)
          {
            WTF::StringImpl::destroy(v50, v13);
            if (!v49)
              goto LABEL_150;
LABEL_102:
            (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**((_QWORD **)this + 3)
                                                                                               + 96))(v110, *((_QWORD *)this + 3), &v118);
            v51 = v110[0];
            if (!v110[0])
              goto LABEL_150;
            if (!*((_DWORD *)v110[0] + 1))
            {
              v110[0] = 0;
LABEL_148:
              if (*(_DWORD *)v51 == 2)
                WTF::StringImpl::destroy(v51, v13);
              else
                *(_DWORD *)v51 -= 2;
LABEL_150:
              v73 = v118;
              v118 = 0;
              if (v73)
              {
                if (*(_DWORD *)v73 == 2)
                  WTF::StringImpl::destroy(v73, v13);
                else
                  *(_DWORD *)v73 -= 2;
              }
              goto LABEL_153;
            }
            (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**((_QWORD **)this + 3)
                                                                                               + 104))(&v111, *((_QWORD *)this + 3), &v118);
            if (v111)
              v52 = *((_DWORD *)v111 + 1) == 0;
            else
              v52 = 1;
            v53 = v118;
            if (v118)
              *(_DWORD *)v118 += 2;
            v54 = v110[0];
            if (v110[0])
              *(_DWORD *)v110[0] += 2;
            if (v53)
              *(_DWORD *)v53 += 2;
            v112 = v53;
            if (v54)
              *(_DWORD *)v54 += 2;
            v55 = !v52;
            v113 = v54;
            LOBYTE(v114) = v55;
            *(_WORD *)((char *)&v114 + 1) = 256;
            v115 = 0;
            v116 = 0;
            v117 = 0;
            if (v11 == *(_DWORD *)(a3 + 8))
            {
              v56 = WTF::Vector<WebCore::InspectorStyleProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v11 + 1, (unint64_t)&v112);
              v57 = *(_DWORD **)v56;
              if (*(_QWORD *)v56)
                *v57 += 2;
              v11 = *(_DWORD *)(a3 + 12);
              v58 = *(_QWORD *)a3;
              v59 = *(_QWORD *)a3 + 48 * v11;
              *(_QWORD *)v59 = v57;
              v60 = (_DWORD *)*((_QWORD *)v56 + 1);
              if (v60)
                *v60 += 2;
              *(_QWORD *)(v59 + 8) = v60;
              *(_BYTE *)(v59 + 16) = v56[16];
              *(_WORD *)(v59 + 17) = *(_WORD *)(v56 + 17);
              *(_QWORD *)(v59 + 20) = *(_QWORD *)(v56 + 20);
              v61 = v58 + 48 * v11;
              *(_WORD *)(v61 + 32) = *((_WORD *)v56 + 16);
              v62 = (WTF::StringImpl **)(v61 + 40);
              v63 = (WTF::StringImpl **)(v56 + 40);
            }
            else
            {
              if (v53)
                *(_DWORD *)v53 += 2;
              v64 = *(_QWORD *)a3;
              v65 = *(_QWORD *)a3 + 48 * v11;
              *(_QWORD *)v65 = v53;
              v66 = v113;
              if (v113)
                *(_DWORD *)v113 += 2;
              *(_QWORD *)(v65 + 8) = v66;
              *(_BYTE *)(v65 + 16) = v55;
              *(_WORD *)(v65 + 17) = 256;
              *(_QWORD *)(v65 + 20) = v115;
              v67 = v64 + 48 * v11;
              *(_WORD *)(v67 + 32) = v116;
              v62 = (WTF::StringImpl **)(v67 + 40);
              v63 = &v117;
            }
            v68 = *v63;
            *v63 = 0;
            *v62 = v68;
            *(_DWORD *)(a3 + 12) = ++v11;
            v69 = v117;
            v117 = 0;
            if (v69)
            {
              if (*(_DWORD *)v69 == 2)
                WTF::StringImpl::destroy(v69, v13);
              else
                *(_DWORD *)v69 -= 2;
            }
            v70 = v113;
            v113 = 0;
            if (v70)
            {
              if (*(_DWORD *)v70 == 2)
                WTF::StringImpl::destroy(v70, v13);
              else
                *(_DWORD *)v70 -= 2;
            }
            v71 = v112;
            v112 = 0;
            if (v71)
            {
              if (*(_DWORD *)v71 == 2)
              {
                WTF::StringImpl::destroy(v71, v13);
                if (!v54)
                  goto LABEL_141;
                goto LABEL_139;
              }
              *(_DWORD *)v71 -= 2;
            }
            if (!v54)
              goto LABEL_141;
LABEL_139:
            if (*(_DWORD *)v54 == 2)
              WTF::StringImpl::destroy(v54, v13);
            else
              *(_DWORD *)v54 -= 2;
LABEL_141:
            if (v53)
            {
              if (*(_DWORD *)v53 == 2)
                WTF::StringImpl::destroy(v53, v13);
              else
                *(_DWORD *)v53 -= 2;
            }
            v72 = v111;
            v111 = 0;
            if (v72)
            {
              if (*(_DWORD *)v72 == 2)
                WTF::StringImpl::destroy(v72, v13);
              else
                *(_DWORD *)v72 -= 2;
            }
            v51 = v110[0];
            v110[0] = 0;
            if (!v51)
              goto LABEL_150;
            goto LABEL_148;
          }
          *(_DWORD *)v50 -= 2;
        }
        if (!v49)
          goto LABEL_150;
        goto LABEL_102;
      }
    }
    else
    {
      v118 = 0;
    }
    WTF::String::convertToASCIILowercase((WTF::String *)&v118);
    goto LABEL_98;
  }
LABEL_164:
  v74 = v121;
  v121 = 0;
  if (v74)
    WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v74, v13);
  result = v122;
  if (v122)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v122, v13);
  return result;
}

uint64_t *Inspector::Protocol::CSS::CSSComputedStyleProperty::Builder<1>::setValue(uint64_t *a1, WTF::JSONImpl::Value *a2)
{
  uint64_t v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  _BYTE v19[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v5);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v17, (const WTF::StringImpl *)&v18, (uint64_t)v19);
  if (v19[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v17);
      v8 = *(unsigned int *)(v4 + 36);
      v15 = *(_QWORD *)(v4 + 24);
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *(_QWORD *)(v15 + 8 * v8) = v16;
    }
    else
    {
      v9 = *v7;
      v10 = v17;
      if (v17)
        *(_DWORD *)v17 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v18;
  v18 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  return a1;
}

WTF::StringImpl *Inspector::Protocol::CSS::CSSProperty::setImplicit(Inspector::Protocol::CSS::CSSProperty *this, WTF::JSONImpl::Value *a2)
{
  WTF::StringImpl *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *result;
  _DWORD **v11;
  uint64_t v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  _BYTE v16[24];

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)this + 2, &v14, (const WTF::StringImpl *)&v15, (uint64_t)v16);
  if (v16[16])
  {
    v5 = (uint64_t *)((char *)this + 24);
    v6 = *((unsigned int *)this + 9);
    if ((_DWORD)v6 == *((_DWORD *)this + 8))
    {
      v11 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v6 + 1, (unint64_t)&v14);
      v6 = *((unsigned int *)this + 9);
      v12 = *((_QWORD *)this + 3);
      v13 = *v11;
      if (*v11)
        *v13 += 2;
      *(_QWORD *)(v12 + 8 * v6) = v13;
    }
    else
    {
      v7 = *v5;
      v8 = v14;
      if (v14)
        *(_DWORD *)v14 += 2;
      *(_QWORD *)(v7 + 8 * v6) = v8;
    }
    *((_DWORD *)this + 9) = v6 + 1;
  }
  v9 = v15;
  v15 = 0;
  if (v9)
  {
    if (*v9 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v9;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::Protocol::CSS::CSSProperty::setStatus(uint64_t a1, Inspector::Protocol::Helpers *a2)
{
  const WTF::String *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  _BYTE v19[24];

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::Protocol::Helpers::getEnumConstantValue(a2);
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v16, v4);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(a1 + 16), &v17, (const WTF::StringImpl *)&v18, (uint64_t)v19);
  if (v19[16])
  {
    v6 = (uint64_t *)(a1 + 24);
    v7 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v7 == *(_DWORD *)(a1 + 32))
    {
      v13 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v17);
      v7 = *(unsigned int *)(a1 + 36);
      v14 = *(_QWORD *)(a1 + 24);
      v15 = *v13;
      if (*v13)
        *v15 += 2;
      *(_QWORD *)(v14 + 8 * v7) = v15;
    }
    else
    {
      v8 = *v6;
      v9 = v17;
      if (v17)
        *(_DWORD *)v17 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *(_DWORD *)(a1 + 36) = v7 + 1;
  }
  v10 = v18;
  v18 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  v11 = v16;
  v16 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *Inspector::Protocol::CSS::CSSStyle::Builder<0>::setCssProperties(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  _BYTE v19[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = (_DWORD *)*a2;
  *a2 = 0;
  v17 = v5;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v18, (const WTF::StringImpl *)&v17, (uint64_t)v19);
  if (v19[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v18);
      v8 = *(unsigned int *)(v4 + 36);
      v15 = *(_QWORD *)(v4 + 24);
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *(_QWORD *)(v15 + 8 * v8) = v16;
    }
    else
    {
      v9 = *v7;
      v10 = v18;
      if (v18)
        *(_DWORD *)v18 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  return a1;
}

uint64_t *Inspector::Protocol::CSS::CSSStyle::Builder<1>::setShorthandEntries(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  _BYTE v19[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = (_DWORD *)*a2;
  *a2 = 0;
  v17 = v5;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v18, (const WTF::StringImpl *)&v17, (uint64_t)v19);
  if (v19[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v18);
      v8 = *(unsigned int *)(v4 + 36);
      v15 = *(_QWORD *)(v4 + 24);
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *(_QWORD *)(v15 + 8 * v8) = v16;
    }
    else
    {
      v9 = *v7;
      v10 = v18;
      if (v18)
        *(_DWORD *)v18 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  return a1;
}

void WebCore::InspectorStyleSheet::~InspectorStyleSheet(WebCore::InspectorStyleSheet *this, void *a2)
{
  WTF::StringImpl **v3;
  WTF *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF *v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  _DWORD **v16;
  uint64_t v17;
  _DWORD *v18;

  *(_QWORD *)this = off_1E33EE810;
  v3 = (WTF::StringImpl **)*((_QWORD *)this + 7);
  if (v3)
  {
    v4 = v3[2];
    v3[2] = 0;
    if (v4)
    {
      v5 = *((unsigned int *)v4 + 3);
      if ((_DWORD)v5)
      {
        v6 = *(uint64_t **)v4;
        v7 = 8 * v5;
        do
        {
          v8 = *v6;
          *v6 = 0;
          if (v8)
            WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v8, a2);
          ++v6;
          v7 -= 8;
        }
        while (v7);
      }
      v9 = *(WTF **)v4;
      if (*(_QWORD *)v4)
      {
        *(_QWORD *)v4 = 0;
        *((_DWORD *)v4 + 2) = 0;
        WTF::fastFree(v9, a2);
      }
      WTF::fastFree(v4, a2);
    }
    v10 = *v3;
    *v3 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v10 -= 2;
    }
    WTF::fastFree((WTF *)v3, a2);
  }
  v11 = *((unsigned int *)this + 19);
  if ((_DWORD)v11)
  {
    v16 = (_DWORD **)*((_QWORD *)this + 8);
    v17 = 8 * v11;
    do
    {
      v18 = *v16;
      *v16 = 0;
      if (v18)
      {
        if (v18[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
        else
          --v18[2];
      }
      ++v16;
      v17 -= 8;
    }
    while (v17);
  }
  v12 = (WTF *)*((_QWORD *)this + 8);
  if (v12)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[2];
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v15 -= 2;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::InspectorStyleSheet::~InspectorStyleSheet(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::InspectorStyleSheet::reparseStyleSheet(WebCore::InspectorStyleSheet *this, const WTF::String *a2)
{
  void *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WebCore::StyleSheetContents *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD **v11;
  uint64_t v12;
  _DWORD *v13;
  WTF *v14;
  uint64_t v15;
  WebCore::CSSStyleSheet *v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v16 = (WebCore::CSSStyleSheet *)*((_QWORD *)this + 4);
  v17 = 0;
  v19 = 0;
  v20 = 0;
  v18 = WebCore::CSSStyleSheet::willMutateRules(v16);
  WebCore::StyleSheetContents::clearRules(*(WebCore::StyleSheetContents **)(*((_QWORD *)this + 4) + 24), v4);
  WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)&v16, v5);
  v16 = (WebCore::CSSStyleSheet *)*((_QWORD *)this + 4);
  v17 = 0;
  v19 = 0;
  v20 = 0;
  v18 = WebCore::CSSStyleSheet::willMutateRules(v16);
  WebCore::StyleSheetContents::parseString(*(WebCore::StyleSheetContents **)(*((_QWORD *)this + 4) + 24), a2, v6, v7);
  v9 = *((_QWORD *)this + 4);
  if (*(_DWORD *)(v9 + 136))
  {
    v10 = *(unsigned int *)(v9 + 140);
    if ((_DWORD)v10)
    {
      v11 = *(_DWORD ***)(v9 + 128);
      v12 = 8 * v10;
      do
      {
        v13 = *v11;
        *v11 = 0;
        if (v13)
        {
          if (v13[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
          else
            --v13[2];
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
      *(_DWORD *)(v9 + 140) = 0;
    }
    v14 = *(WTF **)(v9 + 128);
    if (v14)
    {
      *(_QWORD *)(v9 + 128) = 0;
      *(_DWORD *)(v9 + 136) = 0;
      WTF::fastFree(v14, v8);
    }
  }
  v15 = *((_QWORD *)this + 10);
  if (v15)
    (*(void (**)(uint64_t, WebCore::InspectorStyleSheet *))(*(_QWORD *)v15 + 16))(v15, this);
  WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)&v16, (WTF::StringImpl *)v8);
  *(_BYTE *)(*((_QWORD *)this + 4) + 34) = 0;
}

_QWORD *WebCore::InspectorStyleSheet::setText@<X0>(_QWORD *this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  void *v8;
  uint64_t v9;
  _DWORD **v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;

  if (this[4])
  {
    v4 = this;
    v5 = this[7];
    *(_BYTE *)(v5 + 8) = 1;
    v6 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v6 += 2;
    v7 = *(WTF::StringImpl **)v5;
    *(_QWORD *)v5 = v6;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, a2);
      else
        *(_DWORD *)v7 -= 2;
    }
    v13 = 0;
    this = (_QWORD *)WebCore::ParsedStyleSheet::setSourceData(v5, &v13);
    if (*((_DWORD *)v4 + 18))
    {
      v9 = *((unsigned int *)v4 + 19);
      if ((_DWORD)v9)
      {
        v10 = (_DWORD **)v4[8];
        v11 = 8 * v9;
        do
        {
          v12 = *v10;
          *v10 = 0;
          if (v12)
          {
            if (v12[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
            else
              --v12[2];
          }
          ++v10;
          v11 -= 8;
        }
        while (v11);
        *((_DWORD *)v4 + 19) = 0;
      }
      this = (_QWORD *)v4[8];
      if (this)
      {
        v4[8] = 0;
        *((_DWORD *)v4 + 18) = 0;
        this = (_QWORD *)WTF::fastFree((WTF *)this, v8);
      }
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    *(_BYTE *)a3 = 6;
    a3[1] = 0;
    *((_BYTE *)a3 + 16) = 1;
  }
  return this;
}

WTF::StringImpl *WebCore::InspectorStyleSheet::ruleHeaderText@<X0>(WTF::StringImpl *this@<X0>, const WebCore::InspectorCSSId *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::CSSStyleSheet *v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  v5 = (WebCore::CSSStyleSheet *)*((_QWORD *)this + 4);
  if (!v5)
    goto LABEL_10;
  v6 = this;
  v7 = *((_DWORD *)this + 19);
  if (!v7)
  {
    WebCore::asCSSRuleList((uint64_t)&v17, v5);
    WebCore::InspectorStyleSheet::collectFlatRules((uint64_t *)&v17, (char **)v6 + 8);
    this = v17;
    if (v17)
      this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v17 + 24))(v17);
    v7 = *((_DWORD *)v6 + 19);
  }
  v8 = *((unsigned int *)a2 + 2);
  if (v7 > v8 && (v9 = *(WTF::StringImpl **)(*((_QWORD *)v6 + 8) + 8 * v8)) != 0)
  {
    if ((*(unsigned int (**)(WTF::StringImpl *))(*(_QWORD *)v9 + 16))(v9) == 1)
    {
      this = WebCore::CSSStyleRule::selectorText(v9, (WTF::StringImpl **)a3);
      *(_DWORD *)(a3 + 16) = 0;
    }
    else
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v6 + 56))(&v16, v6, v9);
      v11 = v16;
      if (v16)
      {
        v12 = (WTF::StringImpl *)**((_QWORD **)v6 + 7);
        if (v12)
        {
          v13 = *(_DWORD *)v12;
          v14 = *(_DWORD *)v12 + 2;
          *(_DWORD *)v12 = v14;
          v10 = (WTF::StringImpl *)*((unsigned int *)v11 + 2);
          if ((_DWORD)v10 || *((_DWORD *)v12 + 1) > *((_DWORD *)v11 + 3))
          {
            WTF::StringImpl::substring(v12);
            v15 = v17;
            v14 = *(_DWORD *)v12 - 2;
          }
          else
          {
            *(_DWORD *)v12 = v13 + 4;
            v15 = v12;
          }
          *(_QWORD *)a3 = v15;
          *(_DWORD *)(a3 + 16) = 0;
          if (v14)
            *(_DWORD *)v12 = v14;
          else
            WTF::StringImpl::destroy(v12, v10);
        }
        else
        {
          *(_QWORD *)a3 = 0;
          *(_DWORD *)(a3 + 16) = 0;
        }
      }
      else
      {
        *(_BYTE *)a3 = 5;
        *(_QWORD *)(a3 + 8) = 0;
        *(_DWORD *)(a3 + 16) = 1;
      }
      this = v16;
      v16 = 0;
      if (this)
        return (WTF::StringImpl *)WTF::RefCounted<WebCore::CSSRuleSourceData>::deref((uint64_t)this, v10);
    }
  }
  else
  {
LABEL_10:
    *(_BYTE *)a3 = 5;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
  }
  return this;
}

uint64_t WebCore::InspectorStyleSheet::setRuleHeaderText@<X0>(uint64_t this@<X0>, const WebCore::InspectorCSSId *a2@<X1>, const WTF::String *a3@<X2>, uint64_t a4@<X8>)
{
  WebCore::CSSStyleSheet *v6;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  WebCore::CSSStyleRule *v11;
  unsigned int v12;
  WebCore::Document *v13;
  uint64_t v14;
  int v15;
  _BOOL8 v16;
  char v17;
  WebCore::CSSStyleRule *v18;
  char v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int8 *v29;
  int v30;
  char v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  char v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;

  v6 = *(WebCore::CSSStyleSheet **)(this + 32);
  if (!v6)
  {
    v17 = 6;
LABEL_59:
    *(_BYTE *)a4 = v17;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 1;
    return this;
  }
  v8 = (_QWORD *)this;
  v9 = *(_DWORD *)(this + 76);
  if (!v9)
  {
    WebCore::asCSSRuleList((uint64_t)&v48, v6);
    WebCore::InspectorStyleSheet::collectFlatRules((uint64_t *)&v48, (char **)v8 + 8);
    this = (uint64_t)v48;
    if (v48)
      this = (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v48 + 24))(v48);
    v9 = *((_DWORD *)v8 + 19);
  }
  v10 = *((unsigned int *)a2 + 2);
  if (v9 <= v10 || (v11 = *(WebCore::CSSStyleRule **)(v8[8] + 8 * v10)) == 0)
  {
LABEL_58:
    v17 = 5;
    goto LABEL_59;
  }
  v12 = (*(uint64_t (**)(WebCore::CSSStyleRule *))(*(_QWORD *)v11 + 16))(v11);
  v13 = (WebCore::Document *)WebCore::CSSStyleSheet::ownerDocument((WebCore::CSSStyleSheet *)v8[4]);
  if ((*((_BYTE *)v11 + 12) & 2) != 0 && (v14 = *((_QWORD *)v11 + 2)) != 0)
  {
    do
    {
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
      v16 = v15 == 1;
      if (v15 == 1)
        break;
      if ((*(_BYTE *)(v14 + 12) & 2) == 0)
        break;
      v14 = *(_QWORD *)(v14 + 16);
    }
    while (v14);
  }
  else
  {
    v16 = 0;
  }
  this = WebCore::isValidRuleHeaderText(a3, v12, v13, (WTF::AtomString *)v16);
  if (!(_DWORD)this)
  {
    v17 = 9;
    goto LABEL_59;
  }
  v18 = v11;
  while (1)
  {
    v19 = *((_BYTE *)v18 + 12);
    v18 = (WebCore::CSSStyleRule *)*((_QWORD *)v18 + 2);
    if ((v19 & 2) == 0)
      break;
    if (!v18)
      goto LABEL_58;
  }
  if (!v18)
    goto LABEL_58;
  this = (*(uint64_t (**)(_QWORD *))(*v8 + 72))(v8);
  if ((this & 1) == 0)
    goto LABEL_58;
  v20 = *(WTF::StringImpl **)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)v20 += 2;
  v47 = v20;
  v21 = (*(uint64_t (**)(WebCore::CSSStyleRule *))(*(_QWORD *)v11 + 16))(v11);
  if (v21 == 1)
    WebCore::CSSStyleRule::setSelectorText(v11, (unsigned int **)&v47);
  (*(void (**)(uint64_t *__return_ptr, _QWORD *, WebCore::CSSStyleRule *))(*v8 + 56))(&v46, v8, v11);
  v23 = v46;
  if (v46)
  {
    v24 = *(_QWORD *)v8[7];
    if (v24)
      *(_DWORD *)v24 += 2;
    if (v21 == 1
      || (v25 = *(_DWORD *)(v23 + 8)) == 0
      || v24
      && (v26 = (v25 - 1), *(_DWORD *)(v24 + 4) > v26)
      && ((v27 = *(_QWORD *)(v24 + 8), (*(_BYTE *)(v24 + 16) & 4) == 0)
        ? (v28 = *(unsigned __int16 *)(v27 + 2 * v26))
        : (v28 = *(unsigned __int8 *)(v27 + v26)),
          v28 == 32))
    {
LABEL_51:
      if (v47)
      {
        if (v24)
          goto LABEL_53;
      }
      else if (v24)
      {
LABEL_53:
        WTF::StringImpl::replace();
        v34 = v48;
        v45 = v48;
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v24, v22);
        else
          *(_DWORD *)v24 -= 2;
        if (v21 == 1)
        {
          v35 = v8[7];
          *(_BYTE *)(v35 + 8) = 1;
          if (v34)
            *(_DWORD *)v34 += 2;
          goto LABEL_65;
        }
        goto LABEL_70;
      }
      v45 = 0;
      if (v21 == 1)
      {
        v34 = 0;
        v35 = v8[7];
        *(_BYTE *)(v35 + 8) = 1;
LABEL_65:
        v36 = *(WTF::StringImpl **)v35;
        *(_QWORD *)v35 = v34;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, v22);
          else
            *(_DWORD *)v36 -= 2;
        }
        v48 = 0;
        WebCore::ParsedStyleSheet::setSourceData(v35, (uint64_t *)&v48);
        *(_BYTE *)(v8[4] + 34) = 0;
        v37 = v8[10];
        if (v37)
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v37 + 16))(v37, v8);
LABEL_75:
        *(_QWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        v45 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v22);
          else
            *(_DWORD *)v34 -= 2;
        }
        v40 = v46;
        v46 = 0;
        if (v40)
          WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v40, v22);
        goto LABEL_80;
      }
LABEL_70:
      WebCore::InspectorStyleSheet::setText(v8, (const WTF::String *)&v45, &v42);
      if (v44)
      {
        v39 = v43;
        v43 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, v38);
          else
            *(_DWORD *)v39 -= 2;
        }
      }
      WebCore::InspectorStyleSheet::reparseStyleSheet((WebCore::InspectorStyleSheet *)v8, (const WTF::String *)&v45);
      v34 = v45;
      goto LABEL_75;
    }
    if (v47)
    {
      this = WTF::StringImpl::startsWith();
      if ((this & 1) != 0)
        goto LABEL_51;
      v29 = (unsigned __int8 *)v47;
      if (v47)
      {
        v30 = *((_DWORD *)v47 + 1);
        *(_DWORD *)v47 += 2;
        if (v30 < 0 || (this = (v30 + 1), __OFADD__(v30, 1)))
        {
          v48 = 0;
          goto LABEL_97;
        }
        v31 = 0;
        v32 = (v29[16] >> 2) & 1;
LABEL_44:
        this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(this, v32, 32, (uint64_t)v29, &v48);
        if (v48)
        {
          v33 = v47;
          v47 = v48;
          v48 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
            {
              WTF::StringImpl::destroy(v33, v22);
              v41 = v48;
              v48 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, v22);
                else
                  *(_DWORD *)v41 -= 2;
              }
            }
            else
            {
              *(_DWORD *)v33 -= 2;
              v48 = 0;
            }
          }
          if ((v31 & 1) == 0)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v29, v22);
            else
              *(_DWORD *)v29 -= 2;
          }
          goto LABEL_51;
        }
LABEL_97:
        __break(0xC471u);
        return this;
      }
    }
    else
    {
      v29 = 0;
    }
    v31 = 1;
    this = 1;
    v32 = 1;
    goto LABEL_44;
  }
  *(_BYTE *)a4 = 5;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 1;
LABEL_80:
  this = (uint64_t)v47;
  v47 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)this, v22);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

BOOL WebCore::isValidRuleHeaderText(WebCore *a1, unsigned int a2, WebCore::Document *a3, WTF::AtomString *a4)
{
  _BOOL8 v4;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  char v16;
  unsigned int v17;
  int v18;
  int32x4_t v19;
  int v20;
  char v21;
  WTF::StringImpl *v22;
  int8x8_t v23;
  int16x8_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  _WORD *v37;
  int8x16_t *v38;
  uint64_t v39;
  uint64_t *v40;
  __int128 v41;
  WTF::StringImpl *v42;
  __int16 v43;
  uint64_t v44;
  uint64_t *v45;
  WTF::StringImpl *v46;
  __int128 v47;
  WTF::StringImpl *v48;
  __int16 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  _BYTE *v53;
  _BYTE *v54;
  size_t v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  _BYTE *v59;
  size_t v60;
  uint64_t v61;
  _BYTE *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  __int128 v65;
  char *v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  char *v70;
  char *v71;
  char *v72;
  __int16 v73;
  _WORD *v74;
  char *v75;
  int8x16_t *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  __int128 v81;
  char *v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  char *v86;
  char *v87;
  char *v88;
  __int16 v89;
  char *v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  _DWORD *v93;
  WTF::StringImpl *v95;
  unsigned __int128 *v96;
  unsigned __int128 *v97;
  unsigned __int128 v98;
  unsigned __int128 *v99;
  unsigned __int128 *v100;
  unsigned __int128 v101;
  char v102;
  char v103;
  int32x4_t v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  __int128 v109;
  __int128 v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  __int16 v113;
  WTF::StringImpl *v114;
  __int128 v115;
  __int128 v116;
  WTF::StringImpl *v117;
  _BYTE v118[10];
  unsigned int v119;
  uint64_t v120;
  int8x16x2_t v121;
  int8x16x2_t v122;
  int8x16x2_t v123;
  int8x16x2_t v124;
  int8x16x2_t v125;
  int8x16x2_t v126;

  v4 = 0;
  if (a2 > 0x12)
    return v4;
  if (((1 << a2) & 0x51010) == 0)
  {
    if (a2 != 1)
      return v4;
    if (a3)
    {
      WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)&v114, a3);
      v13 = v114;
      if (!v114)
        goto LABEL_9;
    }
    else
    {
      v40 = WebCore::strictCSSParserContext(a1);
      v13 = (WTF::StringImpl *)*v40;
      if (*v40)
        *(_DWORD *)v13 += 2;
      v114 = v13;
      v41 = *(_OWORD *)(v40 + 3);
      v115 = *(_OWORD *)(v40 + 1);
      v116 = v41;
      v42 = (WTF::StringImpl *)v40[5];
      if (v42)
        *(_DWORD *)v42 += 2;
      v43 = *((_WORD *)v40 + 28);
      v44 = v40[6];
      v117 = v42;
      *(_QWORD *)v118 = v44;
      *(_WORD *)&v118[8] = v43;
      if (!v13)
      {
LABEL_9:
        v14 = v117;
        if (v117)
        {
          v15 = *(_DWORD *)v117;
          *(_DWORD *)v117 += 2;
          v16 = v118[0];
          v17 = *(unsigned __int16 *)&v118[3] | (v118[5] << 16);
          v18 = *(_DWORD *)&v118[6];
          v117 = 0;
          v19 = vdupq_n_s32(v17);
          v20 = (v17 >> 22) & 3;
          v21 = v118[5];
          if (!v15)
          {
            v104 = v19;
            WTF::StringImpl::destroy(v14, v12);
            v19 = v104;
            v22 = v114;
            goto LABEL_13;
          }
          *(_DWORD *)v14 = v15;
        }
        else
        {
          v16 = v118[0];
          v18 = *(_DWORD *)&v118[6];
          v117 = 0;
          v21 = v118[5];
          v19 = vdupq_n_s32(*(unsigned __int16 *)&v118[3] | (v118[5] << 16));
          LOWORD(v20) = v118[5] >> 6;
        }
        v22 = v13;
LABEL_13:
        v23 = (int8x8_t)vmovn_s32((int32x4_t)vshlq_u32((uint32x4_t)(*(_OWORD *)&v19 & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL)), (uint32x4_t)xmmword_1969ED9E0));
        v114 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v12);
          else
            *(_DWORD *)v22 -= 2;
        }
        WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)&v114, (unsigned int **)a1, 0, 0);
        LOBYTE(v106) = v16;
        *(int8x8_t *)v24.i8 = vand_s8(v23, (int8x8_t)0x1000100010001);
        *(_DWORD *)((char *)&v106 + 1) = vmovn_s16(v24).u32[0];
        BYTE5(v106) = v21 & 1;
        BYTE6(v106) = v20 & 1;
        HIBYTE(v106) = (v18 & 0x20000000) != 0;
        LOBYTE(v107) = 0;
        WebCore::parseCSSSelectorList(*(uint64_t *)v118, *(_QWORD *)v118 + 24 * v119, &v106, 0, a4, (uint64_t)&v108);
        WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)&v114, v25);
        v4 = (_BYTE)v109 != 0;
        if ((_BYTE)v109)
        {
          v26 = v108;
          v108 = 0;
          if (v26)
            WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)&v108, v26);
        }
        if (!v14)
          goto LABEL_29;
        if (*(_DWORD *)v14 != 2)
        {
          *(_DWORD *)v14 -= 2;
          goto LABEL_29;
        }
        v63 = v14;
        goto LABEL_148;
      }
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_9;
  }
  HIDWORD(v8) = a2;
  LODWORD(v8) = (a2 << 24) - 0x4000000;
  v9 = "@media";
  v10 = 7;
  switch((v8 >> 25))
  {
    case 0u:
      break;
    case 4u:
      v9 = "@supports";
      v10 = 10;
      break;
    case 6u:
      v9 = "@layer";
      v10 = 7;
      break;
    case 7u:
      v9 = "@container";
      v10 = 11;
      break;
    default:
      v9 = "";
      v10 = 1;
      break;
  }
  v26 = (WTF::StringImpl *)(v10 - 1);
  if (v10 == 1)
  {
    v13 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
  }
  else
  {
    v9 = (char *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = v114;
  }
  if (!*(_QWORD *)a1 || !*(_DWORD *)(*(_QWORD *)a1 + 4))
  {
    v4 = 0;
    goto LABEL_29;
  }
  if (a3)
  {
    WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)&v108, a3);
    if (!v13)
      goto LABEL_37;
    goto LABEL_36;
  }
  v45 = WebCore::strictCSSParserContext((WebCore *)v9);
  v46 = (WTF::StringImpl *)*v45;
  if (*v45)
    *(_DWORD *)v46 += 2;
  v108 = v46;
  v47 = *(_OWORD *)(v45 + 3);
  v109 = *(_OWORD *)(v45 + 1);
  v110 = v47;
  v48 = (WTF::StringImpl *)v45[5];
  if (v48)
    *(_DWORD *)v48 += 2;
  v49 = *((_WORD *)v45 + 28);
  v50 = v45[6];
  v111 = v48;
  v112 = v50;
  v113 = v49;
  if (v13)
LABEL_36:
    *(_DWORD *)v13 += 2;
LABEL_37:
  v28 = *(_QWORD *)a1;
  if (v28)
    *(_DWORD *)v28 += 2;
  if (v13)
  {
    v29 = *((_DWORD *)v13 + 1);
    if (v28)
      goto LABEL_41;
LABEL_93:
    v30 = 0;
    goto LABEL_42;
  }
  v29 = 0;
  if (!v28)
    goto LABEL_93;
LABEL_41:
  v30 = *(_DWORD *)(v28 + 4);
  if (v30 < 0)
    goto LABEL_174;
LABEL_42:
  v31 = __OFADD__(v30, 3);
  v32 = v30 + 3;
  if (v31)
    goto LABEL_174;
  v31 = __OFADD__(v32, 1);
  v33 = v32 + 1;
  v34 = v31;
  if (v29 < 0)
    goto LABEL_174;
  if (v34)
    goto LABEL_174;
  v35 = (v29 + v33);
  if (__OFADD__(v29, v33))
    goto LABEL_174;
  if (v13 && (*((_BYTE *)v13 + 16) & 4) == 0 || v28 && (*(_BYTE *)(v28 + 16) & 4) == 0)
  {
    if (v35 <= 0x7FFFFFEF)
    {
      WTF::tryFastCompactMalloc((WTF *)(2 * (v29 + v33) + 20));
      v36 = v114;
      if (v114)
      {
        v37 = (_WORD *)((char *)v114 + 20);
        *(_DWORD *)v114 = 2;
        *((_DWORD *)v36 + 1) = v35;
        *((_QWORD *)v36 + 1) = (char *)v36 + 20;
        *((_DWORD *)v36 + 4) = 0;
        if (v13)
        {
          v38 = (int8x16_t *)*((_QWORD *)v13 + 1);
          v39 = *((unsigned int *)v13 + 1);
          if ((*((_BYTE *)v13 + 16) & 4) != 0)
          {
            v51 = (char *)&v37[v39];
            if (v39 >= 0x40)
            {
              v52 = (char *)&v37[v39 & 0xFFFFFFC0];
              v65 = 0uLL;
              v66 = (char *)v36 + 20;
              do
              {
                v121.val[0] = *v38;
                v67 = v38[1];
                v123.val[0] = v38[2];
                v68 = v38[3];
                v38 += 4;
                v69 = v68;
                v123.val[1] = 0uLL;
                v125.val[0] = v67;
                v121.val[1] = 0uLL;
                v70 = v66;
                vst2q_s8(v70, v121);
                v70 += 32;
                v125.val[1] = 0uLL;
                vst2q_s8(v70, v125);
                v71 = v66 + 64;
                vst2q_s8(v71, v123);
                v72 = v66 + 96;
                vst2q_s8(v72, *(int8x16x2_t *)(&v65 - 1));
                v66 += 128;
              }
              while (v66 != v52);
            }
            else
            {
              v52 = (char *)v36 + 20;
            }
            while (v52 != v51)
            {
              v73 = v38->u8[0];
              v38 = (int8x16_t *)((char *)v38 + 1);
              *(_WORD *)v52 = v73;
              v52 += 2;
            }
          }
          else if ((_DWORD)v39 == 1)
          {
            *v37 = v38->i16[0];
          }
          else if ((_DWORD)v39)
          {
            memcpy((char *)v36 + 20, v38, 2 * v39);
          }
          v64 = *((unsigned int *)v13 + 1);
        }
        else
        {
          v64 = 0;
        }
        v74 = &v37[v64];
        *v74 = 32;
        v75 = (char *)(v74 + 1);
        if (v28)
        {
          v76 = *(int8x16_t **)(v28 + 8);
          v77 = *(unsigned int *)(v28 + 4);
          if ((*(_BYTE *)(v28 + 16) & 4) != 0)
          {
            v78 = &v75[2 * v77];
            if (v77 >= 0x40)
            {
              v79 = &v75[2 * (v77 & 0xFFFFFFC0)];
              v81 = 0uLL;
              v82 = v75;
              do
              {
                v122.val[0] = *v76;
                v83 = v76[1];
                v124.val[0] = v76[2];
                v84 = v76[3];
                v76 += 4;
                v85 = v84;
                v124.val[1] = 0uLL;
                v126.val[0] = v83;
                v122.val[1] = 0uLL;
                v86 = v82;
                vst2q_s8(v86, v122);
                v86 += 32;
                v126.val[1] = 0uLL;
                vst2q_s8(v86, v126);
                v87 = v82 + 64;
                vst2q_s8(v87, v124);
                v88 = v82 + 96;
                vst2q_s8(v88, *(int8x16x2_t *)(&v81 - 1));
                v82 += 128;
              }
              while (v82 != v79);
            }
            else
            {
              v79 = v75;
            }
            while (v79 != v78)
            {
              v89 = v76->u8[0];
              v76 = (int8x16_t *)((char *)v76 + 1);
              *(_WORD *)v79 = v89;
              v79 += 2;
            }
          }
          else if ((_DWORD)v77 == 1)
          {
            *(_WORD *)v75 = v76->i16[0];
          }
          else if ((_DWORD)v77)
          {
            memcpy(v75, v76, 2 * v77);
          }
          v80 = *(unsigned int *)(v28 + 4);
        }
        else
        {
          v80 = 0;
        }
        v90 = &v75[2 * v80];
        *(_DWORD *)v90 = 8060960;
        *((_WORD *)v90 + 2) = 125;
        goto LABEL_122;
      }
    }
LABEL_174:
    v106 = 0;
    __break(0xC471u);
    JUMPOUT(0x195DE67A4);
  }
  if ((v35 & 0x80000000) != 0)
    goto LABEL_174;
  WTF::tryFastCompactMalloc((WTF *)(v35 + 20));
  v36 = v114;
  if (!v114)
    goto LABEL_174;
  v53 = (char *)v114 + 20;
  *(_DWORD *)v114 = 2;
  *((_DWORD *)v36 + 1) = v35;
  *((_QWORD *)v36 + 1) = (char *)v36 + 20;
  *((_DWORD *)v36 + 4) = 4;
  if (v13)
  {
    v54 = (_BYTE *)*((_QWORD *)v13 + 1);
    v55 = *((unsigned int *)v13 + 1);
    if ((*((_BYTE *)v13 + 16) & 4) != 0)
    {
      if ((_DWORD)v55)
      {
        if ((_DWORD)v55 == 1)
          *v53 = *v54;
        else
          memcpy((char *)v36 + 20, v54, v55);
      }
    }
    else
    {
      if (v55 < 0x10)
      {
        v96 = (unsigned __int128 *)((char *)v36 + 20);
      }
      else
      {
        v96 = (unsigned __int128 *)&v53[v55 & 0xFFFFFFF0];
        v97 = (unsigned __int128 *)((char *)v36 + 20);
        do
        {
          v98 = (unsigned __int128)vld2q_s8(v54);
          v54 += 32;
          *v97++ = v98;
        }
        while (v97 != v96);
      }
      while (v96 != (unsigned __int128 *)&v53[v55])
      {
        v102 = *v54;
        v54 += 2;
        *(_BYTE *)v96 = v102;
        v96 = (unsigned __int128 *)((char *)v96 + 1);
      }
    }
    v56 = *((unsigned int *)v13 + 1);
  }
  else
  {
    v56 = 0;
  }
  v57 = &v53[v56];
  *v57 = 32;
  v58 = v57 + 1;
  if (v28)
  {
    v59 = *(_BYTE **)(v28 + 8);
    v60 = *(unsigned int *)(v28 + 4);
    if ((*(_BYTE *)(v28 + 16) & 4) != 0)
    {
      if ((_DWORD)v60)
      {
        if ((_DWORD)v60 == 1)
          *v58 = *v59;
        else
          memcpy(v58, v59, v60);
      }
    }
    else
    {
      if (v60 < 0x10)
      {
        v99 = (unsigned __int128 *)v58;
      }
      else
      {
        v99 = (unsigned __int128 *)&v58[v60 & 0xFFFFFFF0];
        v100 = (unsigned __int128 *)v58;
        do
        {
          v101 = (unsigned __int128)vld2q_s8(v59);
          v59 += 32;
          *v100++ = v101;
        }
        while (v100 != v99);
      }
      while (v99 != (unsigned __int128 *)&v58[v60])
      {
        v103 = *v59;
        v59 += 2;
        *(_BYTE *)v99 = v103;
        v99 = (unsigned __int128 *)((char *)v99 + 1);
      }
    }
    v61 = *(unsigned int *)(v28 + 4);
  }
  else
  {
    v61 = 0;
  }
  v62 = &v58[v61];
  v62[2] = 125;
  *(_WORD *)v62 = 31520;
LABEL_122:
  WebCore::CSSParserImpl::CSSParserImpl((uint64_t)&v114, (uint64_t)&v108);
  v106 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::destroy(v36, v91);
      if (!v28)
        goto LABEL_128;
      goto LABEL_126;
    }
    *(_DWORD *)v36 -= 2;
  }
  if (!v28)
    goto LABEL_128;
LABEL_126:
  if (*(_DWORD *)v28 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v28, v91);
  else
    *(_DWORD *)v28 -= 2;
LABEL_128:
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v91);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (v120
    && (v92 = *(_QWORD *)(v120 + 48) + 24 * *(unsigned int *)(v120 + 60),
        v106 = *(WTF::StringImpl **)(v120 + 48),
        v107 = (WTF::StringImpl *)v92,
        WebCore::CSSParserImpl::consumeAtRule((WebCore::CSSParserTokenRange *)&v114, (__int128 **)&v106, 4u, &v105),
        (v93 = (_DWORD *)v105) != 0))
  {
    v4 = (*(_BYTE *)(v105 + 4) & 0x1F) == a2 && v106 == v107;
    v105 = 0;
    if (*v93 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v93, v91);
    else
      --*v93;
  }
  else
  {
    v4 = 0;
  }
  WebCore::CSSParserImpl::~CSSParserImpl((WebCore::CSSParserImpl *)&v114, v91);
  v95 = v111;
  v111 = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
      WTF::StringImpl::destroy(v95, v26);
    else
      *(_DWORD *)v95 -= 2;
  }
  v63 = v108;
  v108 = 0;
  if (!v63)
    goto LABEL_29;
  if (*(_DWORD *)v63 != 2)
  {
    *(_DWORD *)v63 -= 2;
    goto LABEL_29;
  }
LABEL_148:
  WTF::StringImpl::destroy(v63, v26);
LABEL_29:
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v26);
    else
      *(_DWORD *)v13 -= 2;
  }
  return v4;
}

uint64_t WebCore::InspectorStyleSheet::addRule@<X0>(WebCore::InspectorStyleSheet *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  WebCore::Document *v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int8x16_t *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  int8x16_t *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WebCore::CSSStyleSheet *v25;
  int v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  int v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  const WebCore::InspectorCSSId *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  char v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  unsigned int v44;
  char v45;
  char v46[8];
  uint64_t v47;
  int v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  int v51;
  int8x16_t *v52;
  int v53;
  uint64_t v54;

  result = *((_QWORD *)this + 4);
  if (!result)
  {
    *(_BYTE *)a3 = 6;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  v7 = (WebCore::Document *)WebCore::CSSStyleSheet::ownerDocument((WebCore::CSSStyleSheet *)result);
  result = WebCore::isValidRuleHeaderText(a2, 1u, v7, 0);
  if ((result & 1) == 0)
  {
    *(_BYTE *)a3 = 9;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::InspectorStyleSheet *))(*(_QWORD *)this + 24))(&v49, this);
  if (!v51)
  {
    WebCore::CSSStyleSheet::addRule(*((WebCore::CSSStyleSheet **)this + 4), (WTF::StringImpl **)a2, MEMORY[0x1E0CBF738], 0, (uint64_t)v46);
    if (v48)
    {
      if (v48 != 1)
        goto LABEL_69;
      v11 = v47;
      v47 = 0;
      *(_BYTE *)a3 = v46[0];
      *(_QWORD *)(a3 + 8) = v11;
      v12 = 1;
      *(_DWORD *)(a3 + 16) = 1;
      goto LABEL_55;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 1;
    if (v51)
      goto LABEL_69;
    v13 = v49;
    v49 = 0;
    if (!v13)
    {
      v42 = 0;
      v44 = 0;
      goto LABEL_21;
    }
    v14 = *(_DWORD *)v13;
    *(_DWORD *)v13 += 2;
    v42 = v13;
    v15 = *((_DWORD *)v13 + 1);
    v44 = v15;
    if (v14)
    {
      *(_DWORD *)v13 = v14;
      if (!v15)
        goto LABEL_21;
    }
    else
    {
      WTF::StringImpl::destroy(v13, v10);
      v15 = v44;
      if (!v44)
        goto LABEL_21;
    }
    LOBYTE(v52) = 10;
    if (!v43 || v15 >= *((_DWORD *)v43 + 1) || v42)
    {
      WTF::StringBuilder::append();
    }
    else
    {
      v16 = *((_DWORD *)v43 + 4);
      v17 = *((_QWORD *)v43 + 1);
      v44 = v15 + 1;
      if ((v16 & 4) != 0)
        *(_BYTE *)(v17 + v15) = 10;
      else
        *(_WORD *)(v17 + 2 * v15) = 10;
    }
LABEL_21:
    v54 = *(_QWORD *)a2;
    v52 = (int8x16_t *)" {}";
    v53 = 3;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v42, &v54, &v52);
    v18 = (int8x16_t *)v42;
    if (v42
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v42),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v42),
          (v18 = (int8x16_t *)v42) != 0))
    {
      v18->i32[0] += 2;
    }
    v52 = v18;
    WebCore::InspectorStyleSheet::setText(this, (const WTF::String *)&v52, &v39);
    if (v41)
    {
      v20 = v40;
      v40 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v19);
        else
          *(_DWORD *)v20 -= 2;
      }
    }
    v52 = 0;
    if (v18)
    {
      if (v18->i32[0] == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v18, v19);
      else
        v18->i32[0] -= 2;
    }
    if (*((_DWORD *)this + 10) == 19)
    {
      v21 = *((_QWORD *)this + 10);
      if (v21)
        (*(void (**)(uint64_t, WebCore::InspectorStyleSheet *))(*(_QWORD *)v21 + 16))(v21, this);
    }
    else
    {
      v22 = (int8x16_t *)v42;
      if (v42
        || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v42),
            WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v42),
            (v22 = (int8x16_t *)v42) != 0))
      {
        v22->i32[0] += 2;
      }
      v52 = v22;
      WebCore::InspectorStyleSheet::reparseStyleSheet(this, (const WTF::String *)&v52);
      v24 = (WTF::StringImpl *)v52;
      v52 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v23);
        else
          *(_DWORD *)v24 -= 2;
      }
    }
    v25 = (WebCore::CSSStyleSheet *)*((_QWORD *)this + 4);
    v26 = *(_DWORD *)(*((_QWORD *)v25 + 3) + 52)
        + *(_DWORD *)(*((_QWORD *)v25 + 3) + 68)
        + *(_DWORD *)(*((_QWORD *)v25 + 3) + 84)
        + *(_DWORD *)(*((_QWORD *)v25 + 3) + 100);
    v27 = (WTF::StringImpl *)(v26 - 1);
    v28 = WebCore::CSSStyleSheet::item(v25, v26 - 1);
    if (v28 && (v29 = v28, (*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28) == 1))
    {
      v31 = 0;
      *(_QWORD *)a3 = v29;
    }
    else
    {
      WebCore::CSSStyleSheet::deleteRule(*((WebCore::CSSStyleSheet **)this + 4), v27, (uint64_t)&v36);
      if (v38 && v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v30);
        else
          *(_DWORD *)v37 -= 2;
      }
      *(_BYTE *)a3 = 9;
      *(_QWORD *)(a3 + 8) = 0;
      v31 = 1;
    }
    *(_DWORD *)(a3 + 16) = v31;
    v32 = v43;
    v43 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v30);
      else
        *(_DWORD *)v32 -= 2;
    }
    result = (uint64_t)v42;
    v42 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v30);
      else
        *(_DWORD *)result -= 2;
    }
    v12 = v48;
    if (v48 == -1)
    {
LABEL_56:
      v9 = v51;
      if (v51 == -1)
        return result;
      return ((uint64_t (*)(char *, WTF::StringImpl **))off_1E33EEAC0[v9])(v46, &v49);
    }
LABEL_55:
    result = ((uint64_t (*)(WTF::StringImpl **, char *))off_1E33EEAD0[v12])(&v42, v46);
    goto LABEL_56;
  }
  if (v51 != 1)
  {
LABEL_69:
    v33 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InspectorStyleSheet::deleteRule(v33, v34, v35);
  }
  v8 = v50;
  v50 = 0;
  *(_BYTE *)a3 = (_BYTE)v49;
  *(_QWORD *)(a3 + 8) = v8;
  v9 = 1;
  *(_DWORD *)(a3 + 16) = 1;
  return ((uint64_t (*)(char *, WTF::StringImpl **))off_1E33EEAC0[v9])(v46, &v49);
}

uint64_t WebCore::InspectorStyleSheet::deleteRule@<X0>(uint64_t this@<X0>, const WebCore::InspectorCSSId *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::CSSStyleSheet *v5;
  WTF **v6;
  unsigned int v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  char v11;
  char v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  char v19;
  WTF::StringImpl *v20;
  uint64_t v21[2];
  char v22;
  uint64_t v23;

  v5 = *(WebCore::CSSStyleSheet **)(this + 32);
  if (!v5)
  {
    v12 = 6;
    goto LABEL_15;
  }
  v6 = (WTF **)this;
  v7 = *(_DWORD *)(this + 76);
  if (!v7)
  {
    WebCore::asCSSRuleList((uint64_t)v21, v5);
    WebCore::InspectorStyleSheet::collectFlatRules(v21, (char **)v6 + 8);
    this = v21[0];
    if (v21[0])
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21[0] + 24))(v21[0]);
    v7 = *((_DWORD *)v6 + 19);
  }
  v8 = *((unsigned int *)a2 + 2);
  if (v7 <= v8
    || (v9 = (_DWORD *)*((_QWORD *)v6[8] + v8)) == 0
    || (this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9), (_DWORD)this != 1))
  {
    v12 = 5;
LABEL_15:
    *(_BYTE *)a3 = v12;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return this;
  }
  ++v9[2];
  v10 = v9;
  while (1)
  {
    v11 = *((_BYTE *)v10 + 12);
    v10 = (_DWORD *)*((_QWORD *)v10 + 2);
    if ((v11 & 2) == 0)
      break;
    if (!v10)
      goto LABEL_21;
  }
  if (!v10
    || (this = (*((uint64_t (**)(WTF **))*v6 + 9))(v6), (this & 1) == 0)
    || (this = (uint64_t)(*((_QWORD *(**)(uint64_t *__return_ptr, WTF **, _DWORD *))*v6 + 7))(&v23, v6, v9),
        !v23))
  {
LABEL_21:
    *(_BYTE *)a3 = 5;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    goto LABEL_22;
  }
  WebCore::CSSStyleSheet::deleteRule((WebCore::CSSStyleSheet *)v10, (WTF::StringImpl *)*((unsigned int *)a2 + 2), (uint64_t)v21);
  if (v22)
  {
    v14 = v21[1];
    *(_BYTE *)a3 = v21[0];
    *(_QWORD *)(a3 + 8) = v14;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    WTF::makeStringByRemoving(v6[7], (const WTF::String *)*(unsigned int *)(v23 + 8));
    WebCore::InspectorStyleSheet::setText(v6, (const WTF::String *)&v20, &v17);
    if (v19 && v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v13);
      else
        *(_DWORD *)v18 -= 2;
    }
    v15 = v6[10];
    if (v15)
      (*(void (**)(WTF *, WTF **))(*(_QWORD *)v15 + 16))(v15, v6);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v16 = v20;
    v20 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v13);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  this = v23;
  v23 = 0;
  if (this)
    this = WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(this, v13);
LABEL_22:
  if (v9[2] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
  --v9[2];
  return this;
}

WebCore::InspectorStyleSheet *WebCore::InspectorStyleSheet::buildObjectForStyleSheet@<X0>(WebCore::InspectorStyleSheet *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl **v2;
  WebCore::CSSStyleSheet *v3;
  WebCore::InspectorStyleSheet *v4;
  WTF::JSONImpl::Object *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  const WTF::String *v8;
  WTF::StringImpl *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  void *v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  WebCore::CSSStyleRule *v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  void *v30;
  WTF::StringImpl **v31;
  WTF *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v45;
  WTF::StringImpl *v46;
  const WTF::String *v47;
  WTF::StringImpl *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  _DWORD **v55;
  uint64_t v56;
  _DWORD *v57;
  _DWORD **v58;
  uint64_t v59;
  _DWORD *v60;
  _DWORD **v61;
  uint64_t v62;
  _DWORD *v63;
  WTF *v64;
  WTF::StringImpl **v65;
  WTF::StringImpl *v66[2];
  int v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF *v72;
  uint64_t v73;
  char v74;

  v2 = a2;
  v3 = (WebCore::CSSStyleSheet *)*((_QWORD *)this + 4);
  if (v3)
  {
    v4 = this;
    v5 = (WTF::JSONImpl::Object *)WebCore::asCSSRuleList((uint64_t)&v69, v3);
    WTF::JSONImpl::Object::create(v5);
    v6 = (WTF::StringImpl *)*((_QWORD *)v4 + 3);
    if (v6)
      *(_DWORD *)v6 += 2;
    v68 = v6;
    v7 = v70;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v68, v8);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v7 + 2, &v71, (const WTF::StringImpl *)v66, (uint64_t)&v72);
    if (v74)
    {
      v10 = (uint64_t *)((char *)v7 + 24);
      v11 = *((unsigned int *)v7 + 9);
      if ((_DWORD)v11 == *((_DWORD *)v7 + 8))
      {
        v55 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, v11 + 1, (unint64_t)&v71);
        v11 = *((unsigned int *)v7 + 9);
        v56 = *((_QWORD *)v7 + 3);
        v57 = *v55;
        if (*v55)
          *v57 += 2;
        *(_QWORD *)(v56 + 8 * v11) = v57;
      }
      else
      {
        v12 = *v10;
        v13 = v71;
        if (v71)
          *(_DWORD *)v71 += 2;
        *(_QWORD *)(v12 + 8 * v11) = v13;
      }
      *((_DWORD *)v7 + 9) = v11 + 1;
    }
    v14 = v66[0];
    v66[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v14;
    }
    v15 = v71;
    v71 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v9);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v69;
    v17 = WTF::fastMalloc((WTF *)0x20);
    WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v17);
    if (v16)
    {
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v16 + 16))(v16);
      v66[0] = v16;
      v72 = 0;
      v73 = 0;
      WebCore::InspectorStyleSheet::collectFlatRules((uint64_t *)v66, (char **)&v72);
      v19 = v72;
      if (HIDWORD(v73))
      {
        v64 = v72;
        v65 = v2;
        v20 = 8 * HIDWORD(v73);
        v21 = v20;
        v22 = v72;
        do
        {
          v23 = *(WebCore::CSSStyleRule **)v22;
          if (*(_QWORD *)v22)
          {
            if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v23 + 16))(*(_QWORD *)v22) == 1)
            {
              this = WebCore::InspectorStyleSheet::buildObjectForRule(v4, v23, &v71);
              v24 = v71;
              if (v71)
              {
                v71 = 0;
                v25 = *(unsigned int *)(v17 + 28);
                if ((_DWORD)v25 == *(_DWORD *)(v17 + 24))
                {
                  v26 = v25 + (v25 >> 2);
                  if (v26 >= 0x10)
                    v27 = v26 + 1;
                  else
                    v27 = 16;
                  if (v27 <= v25 + 1)
                    v28 = v25 + 1;
                  else
                    v28 = v27;
                  if (v28 >> 29)
                  {
                    __break(0xC471u);
                    return this;
                  }
                  v29 = *(void **)(v17 + 16);
                  v30 = (void *)WTF::fastMalloc((WTF *)(8 * v28));
                  *(_DWORD *)(v17 + 24) = v28;
                  *(_QWORD *)(v17 + 16) = v30;
                  memcpy(v30, v29, 8 * v25);
                  if (v29)
                  {
                    if (*(void **)(v17 + 16) == v29)
                    {
                      *(_QWORD *)(v17 + 16) = 0;
                      *(_DWORD *)(v17 + 24) = 0;
                    }
                    WTF::fastFree((WTF *)v29, v18);
                  }
                  v25 = *(unsigned int *)(v17 + 28);
                  v31 = (WTF::StringImpl **)(*(_QWORD *)(v17 + 16) + 8 * v25);
                }
                else
                {
                  v31 = (WTF::StringImpl **)(*(_QWORD *)(v17 + 16) + 8 * v25);
                }
                *v31 = v24;
                *(_DWORD *)(v17 + 28) = v25 + 1;
              }
            }
          }
          v22 = (WTF *)((char *)v22 + 8);
          v21 -= 8;
        }
        while (v21);
        v19 = v64;
        v2 = v65;
        v32 = v64;
        do
        {
          v33 = *(_DWORD **)v32;
          *(_QWORD *)v32 = 0;
          if (v33)
          {
            if (v33[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
            else
              --v33[2];
          }
          v32 = (WTF *)((char *)v32 + 8);
          v20 -= 8;
        }
        while (v20);
      }
      if (v19)
        WTF::fastFree(v19, v18);
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v16 + 24))(v16);
    }
    v34 = v70;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v71 = (WTF::StringImpl *)v17;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v34 + 2, v66, (const WTF::StringImpl *)&v71, (uint64_t)&v72);
    if (v74)
    {
      v36 = (uint64_t *)((char *)v34 + 24);
      v37 = *((unsigned int *)v34 + 9);
      if ((_DWORD)v37 == *((_DWORD *)v34 + 8))
      {
        v58 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v36, v37 + 1, (unint64_t)v66);
        v37 = *((unsigned int *)v34 + 9);
        v59 = *((_QWORD *)v34 + 3);
        v60 = *v58;
        if (*v58)
          *v60 += 2;
        *(_QWORD *)(v59 + 8 * v37) = v60;
      }
      else
      {
        v38 = *v36;
        v39 = v66[0];
        if (v66[0])
          *(_DWORD *)v66[0] += 2;
        *(_QWORD *)(v38 + 8 * v37) = v39;
      }
      *((_DWORD *)v34 + 9) = v37 + 1;
    }
    v40 = v71;
    v71 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v40;
    }
    v41 = v66[0];
    v66[0] = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v35);
      else
        *(_DWORD *)v41 -= 2;
    }
    v42 = v70;
    v70 = 0;
    v43 = v68;
    v68 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v35);
      else
        *(_DWORD *)v43 -= 2;
      v44 = v70;
      v70 = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v44;
      }
    }
    this = (WebCore::InspectorStyleSheet *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, WebCore::InspectorStyleSheet *))(*(_QWORD *)v4 + 24))(v66, v4);
    v45 = v67;
    if (!v67)
    {
      v46 = v66[0];
      v66[0] = 0;
      v68 = v46;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v68, v47);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v42 + 2, &v70, (const WTF::StringImpl *)&v71, (uint64_t)&v72);
      if (v74)
      {
        v49 = (uint64_t *)((char *)v42 + 24);
        v50 = *((unsigned int *)v42 + 9);
        if ((_DWORD)v50 == *((_DWORD *)v42 + 8))
        {
          v61 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v49, v50 + 1, (unint64_t)&v70);
          v50 = *((unsigned int *)v42 + 9);
          v62 = *((_QWORD *)v42 + 3);
          v63 = *v61;
          if (*v61)
            *v63 += 2;
          *(_QWORD *)(v62 + 8 * v50) = v63;
        }
        else
        {
          v51 = *v49;
          v52 = v70;
          if (v70)
            *(_DWORD *)v70 += 2;
          *(_QWORD *)(v51 + 8 * v50) = v52;
        }
        *((_DWORD *)v42 + 9) = v50 + 1;
      }
      v53 = v71;
      v71 = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v53;
      }
      v54 = v70;
      v70 = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v48);
        else
          *(_DWORD *)v54 -= 2;
      }
      this = v68;
      v68 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = (WebCore::InspectorStyleSheet *)WTF::StringImpl::destroy(this, v48);
        else
          *(_DWORD *)this -= 2;
      }
      v45 = v67;
    }
    *v2 = v42;
    if (v45 != -1)
      this = (WebCore::InspectorStyleSheet *)((uint64_t (*)(WTF **, WTF::StringImpl **))off_1E33EEAC0[v45])(&v72, v66);
    if (v16)
      return (WebCore::InspectorStyleSheet *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v16 + 24))(v16);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t WebCore::asCSSRuleList(uint64_t this, WebCore::CSSStyleSheet *a2)
{
  uint64_t *v2;
  uint64_t v4;
  void **v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;

  v2 = (uint64_t *)this;
  if (!a2)
  {
    v4 = 0;
    goto LABEL_24;
  }
  this = WTF::fastMalloc((WTF *)0x20);
  v4 = this;
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = off_1E3398910;
  *(_QWORD *)(this + 16) = 0;
  v5 = (void **)(this + 16);
  *(_QWORD *)(this + 24) = 0;
  v6 = (_DWORD *)*((_QWORD *)a2 + 3);
  v7 = v6[13];
  v8 = v6[17];
  v9 = v6[21];
  v10 = v6[25];
  if (!(v8 + v7 + v9 + v10))
  {
LABEL_24:
    *v2 = v4;
    return this;
  }
  v23 = v2;
  v11 = 0;
  v12 = v7 + v9 + v10 + v8;
  while (1)
  {
    this = WebCore::CSSStyleSheet::item(a2, v11);
    v13 = this;
    v14 = *(unsigned int *)(v4 + 28);
    if ((_DWORD)v14 != *(_DWORD *)(v4 + 24))
    {
      v22 = (uint64_t *)((char *)*v5 + 8 * v14);
      if (this)
        ++*(_DWORD *)(this + 8);
      goto LABEL_18;
    }
    v15 = v14 + (v14 >> 2);
    v16 = v15 >= 0x10 ? v15 + 1 : 16;
    v17 = v16 <= v14 + 1 ? v14 + 1 : v16;
    if (v17 >> 29)
      break;
    v18 = *v5;
    v19 = (void *)WTF::fastMalloc((WTF *)(8 * v17));
    *(_DWORD *)(v4 + 24) = v17;
    *(_QWORD *)(v4 + 16) = v19;
    this = (uint64_t)memcpy(v19, v18, 8 * v14);
    if (v18)
    {
      if (*v5 == v18)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
      }
      this = WTF::fastFree((WTF *)v18, v20);
    }
    v14 = *(unsigned int *)(v4 + 28);
    v21 = *(_QWORD *)(v4 + 16);
    if (v13)
      ++*(_DWORD *)(v13 + 8);
    v22 = (uint64_t *)(v21 + 8 * v14);
LABEL_18:
    *v22 = v13;
    *(_DWORD *)(v4 + 28) = v14 + 1;
    if (v12 == ++v11)
    {
      v2 = v23;
      goto LABEL_24;
    }
  }
  __break(0xC471u);
  return this;
}

WebCore::CSSStyleSheet **WebCore::InspectorStyleSheet::buildObjectForStyleSheetInfo@<X0>(WebCore::CSSStyleSheet **this@<X0>, _QWORD *a2@<X8>)
{
  WebCore::CSSStyleSheet *v3;
  WebCore::CSSStyleSheet **v4;
  WTF::JSONImpl::Object *v5;
  uint64_t v6;
  WebCore::Frame *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  const WTF::String *v10;
  WTF::StringImpl *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  Inspector::Protocol::Helpers *v18;
  const WTF::String *v19;
  WTF::StringImpl *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::JSONImpl::Value *v28;
  WTF::StringImpl *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  WebCore::CSSStyleSheet *v36;
  int *v37;
  int v38;
  int v39;
  int v40;
  WTF::StringImpl *v41;
  int v42;
  const WTF::String *v43;
  WTF::StringImpl *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  _DWORD *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  const WTF::String *v52;
  WTF::StringImpl *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  _DWORD *v58;
  WTF::StringImpl *v59;
  const WTF::String *v60;
  WTF::StringImpl *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  _DWORD *v66;
  WTF::StringImpl *v67;
  _BOOL8 v68;
  WTF::StringImpl *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  _DWORD *v74;
  WTF::StringImpl *v75;
  double v76;
  WTF::JSONImpl::Value *v77;
  WTF::StringImpl *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  _DWORD *v83;
  WTF::StringImpl *v84;
  double v85;
  WTF::JSONImpl::Value *v86;
  WTF::StringImpl *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  _DWORD *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  _DWORD **v97;
  uint64_t v98;
  _DWORD *v99;
  _DWORD **v100;
  uint64_t v101;
  _DWORD *v102;
  _DWORD **v103;
  uint64_t v104;
  _DWORD *v105;
  _DWORD **v106;
  uint64_t v107;
  _DWORD *v108;
  _DWORD **v109;
  uint64_t v110;
  _DWORD *v111;
  _DWORD **v112;
  uint64_t v113;
  _DWORD *v114;
  _DWORD **v115;
  uint64_t v116;
  _DWORD *v117;
  _DWORD **v118;
  uint64_t v119;
  _DWORD *v120;
  _DWORD **v121;
  uint64_t v122;
  _DWORD *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  _DWORD *v130;
  _QWORD v131[2];
  char v132;

  v3 = this[4];
  if (!v3)
  {
    *a2 = 0;
    return this;
  }
  v4 = this;
  v5 = (WTF::JSONImpl::Object *)WebCore::CSSStyleSheet::ownerDocument(this[4]);
  if (v5 && (v6 = *((_QWORD *)v5 + 66)) != 0)
    v7 = *(WebCore::Frame **)(v6 + 8);
  else
    v7 = 0;
  WTF::JSONImpl::Object::create(v5);
  v8 = v131[0];
  v9 = v4[3];
  if (v9)
    *(_DWORD *)v9 += 2;
  v127 = v9;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v127, v10);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), &v129, (const WTF::StringImpl *)&v130, (uint64_t)v131);
  if (v132)
  {
    v12 = (uint64_t *)(v8 + 24);
    v13 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v13 == *(_DWORD *)(v8 + 32))
    {
      v97 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, v13 + 1, (unint64_t)&v129);
      v13 = *(unsigned int *)(v8 + 36);
      v98 = *(_QWORD *)(v8 + 24);
      v99 = *v97;
      if (*v97)
        *v99 += 2;
      *(_QWORD *)(v98 + 8 * v13) = v99;
    }
    else
    {
      v14 = *v12;
      v15 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v14 + 8 * v13) = v15;
    }
    *(_DWORD *)(v8 + 36) = v13 + 1;
  }
  v16 = v130;
  v130 = 0;
  if (v16)
  {
    if (*v16 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v16;
  }
  v17 = v129;
  v129 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v11);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (Inspector::Protocol::Helpers *)*((unsigned int *)v4 + 10);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::Protocol::Helpers::getEnumConstantValue(v18);
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v128, v19);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), &v129, (const WTF::StringImpl *)&v130, (uint64_t)v131);
  if (v132)
  {
    v21 = (uint64_t *)(v8 + 24);
    v22 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v22 == *(_DWORD *)(v8 + 32))
    {
      v100 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, v22 + 1, (unint64_t)&v129);
      v22 = *(unsigned int *)(v8 + 36);
      v101 = *(_QWORD *)(v8 + 24);
      v102 = *v100;
      if (*v100)
        *v102 += 2;
      *(_QWORD *)(v101 + 8 * v22) = v102;
    }
    else
    {
      v23 = *v21;
      v24 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v23 + 8 * v22) = v24;
    }
    *(_DWORD *)(v8 + 36) = v22 + 1;
  }
  v25 = v130;
  v130 = 0;
  if (v25)
  {
    if (*v25 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v25;
  }
  v26 = v128;
  v128 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v20);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = v129;
  v129 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v20);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = (WTF::JSONImpl::Value *)*((unsigned __int8 *)v3 + 33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v28);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), &v129, (const WTF::StringImpl *)&v130, (uint64_t)v131);
  if (v132)
  {
    v30 = (uint64_t *)(v8 + 24);
    v31 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v31 == *(_DWORD *)(v8 + 32))
    {
      v103 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v30, v31 + 1, (unint64_t)&v129);
      v31 = *(unsigned int *)(v8 + 36);
      v104 = *(_QWORD *)(v8 + 24);
      v105 = *v103;
      if (*v103)
        *v105 += 2;
      *(_QWORD *)(v104 + 8 * v31) = v105;
    }
    else
    {
      v32 = *v30;
      v33 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v32 + 8 * v31) = v33;
    }
    *(_DWORD *)(v8 + 36) = v31 + 1;
  }
  v34 = v130;
  v130 = 0;
  if (v34)
  {
    if (*v34 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v34;
  }
  v35 = v129;
  v129 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v29);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = v4[4];
  if (v36 && (v37 = *(int **)(*((_QWORD *)v36 + 3) + 136)) != 0 && v37[1])
  {
    v38 = *v37;
    *v37 += 2;
  }
  else
  {
    v37 = (int *)*MEMORY[0x1E0CBF738];
    if (!*MEMORY[0x1E0CBF738])
    {
      v124 = v4[6];
      if (v124)
      {
        *(_DWORD *)v124 += 2;
        v128 = v124;
      }
      else
      {
        v128 = 0;
      }
      goto LABEL_57;
    }
    v38 = *v37;
    v39 = v37[1];
    v40 = *v37 + 2;
    *v37 = v40;
    if (!v39)
    {
      v41 = v4[6];
      if (v41)
      {
        *(_DWORD *)v41 += 2;
        v40 = *v37;
      }
      goto LABEL_55;
    }
  }
  v40 = v38 + 4;
  *v37 = v38 + 4;
  v41 = (WTF::StringImpl *)v37;
LABEL_55:
  v128 = v41;
  v42 = v40 - 2;
  if (v42)
    *v37 = v42;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v37, v29);
LABEL_57:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v128, v43);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), &v129, (const WTF::StringImpl *)&v130, (uint64_t)v131);
  if (v132)
  {
    v45 = (uint64_t *)(v8 + 24);
    v46 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v46 == *(_DWORD *)(v8 + 32))
    {
      v106 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v45, v46 + 1, (unint64_t)&v129);
      v46 = *(unsigned int *)(v8 + 36);
      v107 = *(_QWORD *)(v8 + 24);
      v108 = *v106;
      if (*v106)
        *v108 += 2;
      *(_QWORD *)(v107 + 8 * v46) = v108;
    }
    else
    {
      v47 = *v45;
      v48 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v47 + 8 * v46) = v48;
    }
    *(_DWORD *)(v8 + 36) = v46 + 1;
  }
  v49 = v130;
  v130 = 0;
  if (v49)
  {
    if (*v49 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v49;
  }
  v50 = v129;
  v129 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v44);
    else
      *(_DWORD *)v50 -= 2;
  }
  v51 = (WTF::StringImpl *)*((_QWORD *)v3 + 5);
  if (v51)
  {
    if (*((_DWORD *)v51 + 1))
      *(_DWORD *)v51 += 2;
    else
      v51 = 0;
  }
  v126 = v51;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v126, v52);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), &v129, (const WTF::StringImpl *)&v130, (uint64_t)v131);
  if (v132)
  {
    v54 = (uint64_t *)(v8 + 24);
    v55 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v55 == *(_DWORD *)(v8 + 32))
    {
      v109 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v54, v55 + 1, (unint64_t)&v129);
      v55 = *(unsigned int *)(v8 + 36);
      v110 = *(_QWORD *)(v8 + 24);
      v111 = *v109;
      if (*v109)
        *v111 += 2;
      *(_QWORD *)(v110 + 8 * v55) = v111;
    }
    else
    {
      v56 = *v54;
      v57 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v56 + 8 * v55) = v57;
    }
    *(_DWORD *)(v8 + 36) = v55 + 1;
  }
  v58 = v130;
  v130 = 0;
  if (v58)
  {
    if (*v58 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v58;
  }
  v59 = v129;
  v129 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, v53);
    else
      *(_DWORD *)v59 -= 2;
  }
  WebCore::InspectorPageAgent::frameId((unsigned int *)v4[2], v7, &v125);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v125, v60);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), &v129, (const WTF::StringImpl *)&v130, (uint64_t)v131);
  if (v132)
  {
    v62 = (uint64_t *)(v8 + 24);
    v63 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v63 == *(_DWORD *)(v8 + 32))
    {
      v112 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v62, v63 + 1, (unint64_t)&v129);
      v63 = *(unsigned int *)(v8 + 36);
      v113 = *(_QWORD *)(v8 + 24);
      v114 = *v112;
      if (*v112)
        *v114 += 2;
      *(_QWORD *)(v113 + 8 * v63) = v114;
    }
    else
    {
      v64 = *v62;
      v65 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v64 + 8 * v63) = v65;
    }
    *(_DWORD *)(v8 + 36) = v63 + 1;
  }
  v66 = v130;
  v130 = 0;
  if (v66)
  {
    if (*v66 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v66;
  }
  v67 = v129;
  v129 = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, v61);
    else
      *(_DWORD *)v67 -= 2;
  }
  if (*((_BYTE *)v3 + 32))
    v68 = *((_QWORD *)v3 + 14) != 0;
  else
    v68 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)v68);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), &v129, (const WTF::StringImpl *)&v130, (uint64_t)v131);
  if (v132)
  {
    v70 = (uint64_t *)(v8 + 24);
    v71 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v71 == *(_DWORD *)(v8 + 32))
    {
      v115 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v70, v71 + 1, (unint64_t)&v129);
      v71 = *(unsigned int *)(v8 + 36);
      v116 = *(_QWORD *)(v8 + 24);
      v117 = *v115;
      if (*v115)
        *v117 += 2;
      *(_QWORD *)(v116 + 8 * v71) = v117;
    }
    else
    {
      v72 = *v70;
      v73 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v72 + 8 * v71) = v73;
    }
    *(_DWORD *)(v8 + 36) = v71 + 1;
  }
  v74 = v130;
  v130 = 0;
  if (v74)
  {
    if (*v74 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v74;
  }
  v75 = v129;
  v129 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
      WTF::StringImpl::destroy(v75, v69);
    else
      *(_DWORD *)v75 -= 2;
  }
  v76 = (double)*((int *)v3 + 28);
  v77 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v77, v76);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), &v129, (const WTF::StringImpl *)&v130, (uint64_t)v131);
  if (v132)
  {
    v79 = (uint64_t *)(v8 + 24);
    v80 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v80 == *(_DWORD *)(v8 + 32))
    {
      v118 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v79, v80 + 1, (unint64_t)&v129);
      v80 = *(unsigned int *)(v8 + 36);
      v119 = *(_QWORD *)(v8 + 24);
      v120 = *v118;
      if (*v118)
        *v120 += 2;
      *(_QWORD *)(v119 + 8 * v80) = v120;
    }
    else
    {
      v81 = *v79;
      v82 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v81 + 8 * v80) = v82;
    }
    *(_DWORD *)(v8 + 36) = v80 + 1;
  }
  v83 = v130;
  v130 = 0;
  if (v83)
  {
    if (*v83 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v83;
  }
  v84 = v129;
  v129 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
      WTF::StringImpl::destroy(v84, v78);
    else
      *(_DWORD *)v84 -= 2;
  }
  v85 = (double)*((int *)v3 + 29);
  v86 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v86, v85);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), &v129, (const WTF::StringImpl *)&v130, (uint64_t)v131);
  if (v132)
  {
    v88 = (uint64_t *)(v8 + 24);
    v89 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v89 == *(_DWORD *)(v8 + 32))
    {
      v121 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v88, v89 + 1, (unint64_t)&v129);
      v89 = *(unsigned int *)(v8 + 36);
      v122 = *(_QWORD *)(v8 + 24);
      v123 = *v121;
      if (*v121)
        *v123 += 2;
      *(_QWORD *)(v122 + 8 * v89) = v123;
    }
    else
    {
      v90 = *v88;
      v91 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v90 + 8 * v89) = v91;
    }
    *(_DWORD *)(v8 + 36) = v89 + 1;
  }
  v92 = v130;
  v130 = 0;
  if (v92)
  {
    if (*v92 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v92;
  }
  v93 = v129;
  v129 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
      WTF::StringImpl::destroy(v93, v87);
    else
      *(_DWORD *)v93 -= 2;
  }
  *a2 = v8;
  v94 = v125;
  v125 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
      WTF::StringImpl::destroy(v94, v87);
    else
      *(_DWORD *)v94 -= 2;
  }
  v95 = v126;
  v126 = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
      WTF::StringImpl::destroy(v95, v87);
    else
      *(_DWORD *)v95 -= 2;
  }
  v96 = v128;
  v128 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
      WTF::StringImpl::destroy(v96, v87);
    else
      *(_DWORD *)v96 -= 2;
  }
  this = (WebCore::CSSStyleSheet **)v127;
  v127 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WebCore::CSSStyleSheet **)WTF::StringImpl::destroy((WTF::StringImpl *)this, v87);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

_QWORD *WebCore::InspectorStyleSheet::cssStyleRulesSplitFromSameRule(_QWORD *this, WebCore::CSSStyleRule *a2, uint64_t a3)
{
  _QWORD *v4;
  char **v6;
  int v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  _QWORD *v24;

  v4 = this;
  if (!*(_BYTE *)(*(_QWORD *)(a3 + 32) + 5))
    goto LABEL_9;
  v6 = (char **)((char *)a2 + 64);
  v7 = *((_DWORD *)a2 + 19);
  if (v7)
    goto LABEL_6;
  WebCore::asCSSRuleList((uint64_t)&v24, *((WebCore::CSSStyleSheet **)a2 + 4));
  WebCore::InspectorStyleSheet::collectFlatRules((uint64_t *)&v24, v6);
  this = v24;
  if (v24)
    this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v24 + 24))(v24);
  v7 = *((_DWORD *)a2 + 19);
  if (v7)
  {
LABEL_6:
    v8 = 0;
    while (*(_QWORD *)&(*v6)[8 * v8] != a3)
    {
      if (v7 == ++v8)
        goto LABEL_9;
    }
    v10 = v8 - 1;
    do
    {
      v11 = v10;
      if (v10 == -1)
        break;
      if (v10 >= *((unsigned int *)a2 + 19))
      {
LABEL_43:
        __break(0xC471u);
        JUMPOUT(0x195DE82F0);
      }
      v12 = *(_QWORD **)&(*v6)[8 * v10];
      if (!v12)
        break;
      this = (_QWORD *)(*(uint64_t (**)(_QWORD))(*v12 + 16))(*(_QWORD *)&(*v6)[8 * v10]);
      if ((_DWORD)this != 1)
        break;
      v13 = v12[4];
      if (!*(_BYTE *)(v13 + 5))
        break;
      v14 = *(unsigned __int8 *)(v13 + 6);
      v10 = v11 - 1;
    }
    while (!v14);
    v15 = v11 + 1;
    if (v11 + 1 >= *((unsigned int *)a2 + 19))
    {
      LODWORD(v18) = 0;
      LODWORD(v16) = 0;
      v17 = 0;
    }
    else
    {
      v16 = 0;
      v17 = 0;
      v18 = 0;
      while (1)
      {
        v19 = *(_QWORD *)&(*v6)[8 * v15];
        if (!v19)
          break;
        this = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v19 + 16))(*(_QWORD *)&(*v6)[8 * v15]);
        if ((_DWORD)this != 1 || !*(_BYTE *)(*(_QWORD *)(v19 + 32) + 5))
          break;
        if (v16 == v18)
        {
          v20 = v16 + (v16 >> 2);
          if (v20 >= 0x10)
            v21 = v20 + 1;
          else
            v21 = 16;
          if (v21 <= v16 + 1)
            v18 = v16 + 1;
          else
            v18 = v21;
          if (v18 >> 29)
            goto LABEL_43;
          v22 = (void *)WTF::fastMalloc((WTF *)(8 * v18));
          v18 = v18;
          this = memcpy(v22, v17, 8 * v16);
          if (v17)
          {
            if (v22 == v17)
            {
              v18 = 0;
              v22 = 0;
            }
            this = (_QWORD *)WTF::fastFree((WTF *)v17, v23);
          }
          v17 = v22;
          ++*(_DWORD *)(v19 + 8);
          *((_QWORD *)v22 + v16++) = v19;
        }
        else
        {
          ++*(_DWORD *)(v19 + 8);
          *((_QWORD *)v17 + v16++) = v19;
        }
        if (!*(_BYTE *)(*(_QWORD *)(v19 + 32) + 6) && ++v15 < *((unsigned int *)a2 + 19))
          continue;
        break;
      }
    }
    *v4 = v17;
    *((_DWORD *)v4 + 2) = v18;
    *((_DWORD *)v4 + 3) = v16;
  }
  else
  {
LABEL_9:
    ++*(_DWORD *)(a3 + 8);
    this = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v4 = this;
    v9 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = v9 + 1;
    *this = a3;
    v4[1] = 0x100000001;
    if (v9)
      *(_DWORD *)(a3 + 8) = v9;
    else
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  }
  return this;
}

_DWORD *WebCore::InspectorStyleSheet::selectorsForCSSStyleRule(WebCore::InspectorStyleSheet *this, WebCore::CSSStyleRule *a2, uint64_t a3)
{
  _DWORD *result;
  void *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  _DWORD *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _DWORD *v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  _DWORD *v23;
  WTF *v24;
  unsigned int v25;
  WTF *v26;
  unsigned int v27;

  WebCore::InspectorStyleSheet::cssStyleRulesSplitFromSameRule(&v26, a2, a3);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  result = WebCore::InspectorStyleSheet::cssStyleRulesSplitFromSameRule(&v24, a2, a3);
  v8 = v24;
  v9 = v25;
  if (v25)
  {
    LODWORD(v10) = 0;
    v11 = (WTF *)((char *)v24 + 8 * v25);
    v12 = v24;
    do
    {
      v13 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)v12 + 32) + 16);
      v23 = v13;
      if (v13)
      {
        do
        {
          if ((_DWORD)v10 == *((_DWORD *)this + 2))
          {
            v14 = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v10 + 1, (unint64_t)&v23);
            v10 = *((unsigned int *)this + 3);
            *(_QWORD *)(*(_QWORD *)this + 8 * v10) = *v14;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)this + 8 * v10) = v13;
          }
          LODWORD(v10) = v10 + 1;
          *((_DWORD *)this + 3) = v10;
          v13 = v23;
          do
          {
            v16 = *v13;
            v13 += 4;
            v15 = v16;
          }
          while ((v16 & 0x80000) == 0);
          if ((v15 & 0x20000) != 0)
            v17 = 0;
          else
            v17 = v13;
          v23 = v17;
        }
        while ((v15 & 0x20000) == 0);
      }
      v12 = (WTF *)((char *)v12 + 8);
    }
    while (v12 != v11);
    v18 = 8 * v9;
    v19 = v8;
    do
    {
      result = *(_DWORD **)v19;
      *(_QWORD *)v19 = 0;
      if (result)
      {
        if (result[2] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        else
          --result[2];
      }
      v19 = (WTF *)((char *)v19 + 8);
      v18 -= 8;
    }
    while (v18);
  }
  if (v8)
    result = (_DWORD *)WTF::fastFree(v8, v7);
  v20 = v26;
  if (v27)
  {
    v21 = 8 * v27;
    v22 = v26;
    do
    {
      result = *(_DWORD **)v22;
      *(_QWORD *)v22 = 0;
      if (result)
      {
        if (result[2] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        else
          --result[2];
      }
      v22 = (WTF *)((char *)v22 + 8);
      v21 -= 8;
    }
    while (v21);
  }
  if (v20)
    return (_DWORD *)WTF::fastFree(v20, v7);
  return result;
}

void WebCore::buildObjectForSelectorHelper(WebCore *this, const WTF::String *a2, const WebCore::CSSSelector *a3)
{
  const WTF::String *v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  const WebCore::CSSSelector *v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  _DWORD **v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD **v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  _QWORD v50[2];
  char v51;

  WTF::JSONImpl::Object::create(this);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v6);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v47 + 16), &v48, (const WTF::StringImpl *)&v49, (uint64_t)v50);
  if (v51)
  {
    v8 = (uint64_t *)(v47 + 24);
    v9 = *(unsigned int *)(v47 + 36);
    if ((_DWORD)v9 == *(_DWORD *)(v47 + 32))
    {
      v41 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v8, v9 + 1, (unint64_t)&v48);
      v9 = *(unsigned int *)(v47 + 36);
      v42 = *(_QWORD *)(v47 + 24);
      v43 = *v41;
      if (*v41)
        *v43 += 2;
      *(_QWORD *)(v42 + 8 * v9) = v43;
    }
    else
    {
      v10 = *v8;
      v11 = v48;
      if (v48)
        *(_DWORD *)v48 += 2;
      *(_QWORD *)(v10 + 8 * v9) = v11;
    }
    *(_DWORD *)(v47 + 36) = v9 + 1;
  }
  v12 = v49;
  v49 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v12;
  }
  v13 = v48;
  v48 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v7);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)this = v47;
  WebCore::CSSSelector::hasExplicitNestingParent(a3);
  if ((v15 & 1) == 0)
  {
    v16 = WebCore::selectorSpecificity(a3, v14);
    v17 = WTF::fastMalloc((WTF *)0x20);
    WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v17);
    v18 = (uint64_t *)(v17 + 16);
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)BYTE2(v16));
    v19 = *(unsigned int *)(v17 + 28);
    if ((_DWORD)v19 == *(_DWORD *)(v17 + 24))
    {
      v20 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v17 + 16), v19 + 1, (unint64_t)v50);
      v19 = *(unsigned int *)(v17 + 28);
      v21 = *(_QWORD *)(v17 + 16);
      v22 = *(_QWORD *)v20;
      *(_QWORD *)v20 = 0;
    }
    else
    {
      v21 = *v18;
      v22 = v50[0];
      v50[0] = 0;
    }
    *(_QWORD *)(v21 + 8 * v19) = v22;
    *(_DWORD *)(v17 + 28) = v19 + 1;
    v23 = (_DWORD *)v50[0];
    v50[0] = 0;
    if (v23)
    {
      if (*v23 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v23;
    }
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)BYTE1(v16));
    v24 = *(unsigned int *)(v17 + 28);
    if ((_DWORD)v24 == *(_DWORD *)(v17 + 24))
    {
      v25 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v17 + 16), v24 + 1, (unint64_t)v50);
      v24 = *(unsigned int *)(v17 + 28);
      v26 = *(_QWORD *)(v17 + 16);
      v27 = *(_QWORD *)v25;
      *(_QWORD *)v25 = 0;
    }
    else
    {
      v26 = *v18;
      v27 = v50[0];
      v50[0] = 0;
    }
    *(_QWORD *)(v26 + 8 * v24) = v27;
    *(_DWORD *)(v17 + 28) = v24 + 1;
    v28 = (_DWORD *)v50[0];
    v50[0] = 0;
    if (v28)
    {
      if (*v28 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v28;
    }
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)v16);
    v29 = *(unsigned int *)(v17 + 28);
    if ((_DWORD)v29 == *(_DWORD *)(v17 + 24))
    {
      v30 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v17 + 16), v29 + 1, (unint64_t)v50);
      v29 = *(unsigned int *)(v17 + 28);
      v31 = *(_QWORD *)(v17 + 16);
      v32 = *(_QWORD *)v30;
      *(_QWORD *)v30 = 0;
    }
    else
    {
      v31 = *v18;
      v32 = v50[0];
      v50[0] = 0;
    }
    *(_QWORD *)(v31 + 8 * v29) = v32;
    *(_DWORD *)(v17 + 28) = v29 + 1;
    v33 = (_DWORD *)v50[0];
    v50[0] = 0;
    if (v33)
    {
      if (*v33 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v33;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v48 = (WTF::StringImpl *)v17;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v47 + 16), &v49, (const WTF::StringImpl *)&v48, (uint64_t)v50);
    if (v51)
    {
      v35 = (uint64_t *)(v47 + 24);
      v36 = *(unsigned int *)(v47 + 36);
      if ((_DWORD)v36 == *(_DWORD *)(v47 + 32))
      {
        v44 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, v36 + 1, (unint64_t)&v49);
        v36 = *(unsigned int *)(v47 + 36);
        v45 = *(_QWORD *)(v47 + 24);
        v46 = *v44;
        if (*v44)
          *v46 += 2;
        *(_QWORD *)(v45 + 8 * v36) = v46;
      }
      else
      {
        v37 = *v35;
        v38 = v49;
        if (v49)
          *(_DWORD *)v49 += 2;
        *(_QWORD *)(v37 + 8 * v36) = v38;
      }
      *(_DWORD *)(v47 + 36) = v36 + 1;
    }
    v39 = v48;
    v48 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v39;
    }
    v40 = v49;
    v49 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v34);
      else
        *(_DWORD *)v40 -= 2;
    }
  }
}

WebCore::InspectorStyleSheet *WebCore::InspectorStyleSheet::buildObjectForRule@<X0>(WebCore::InspectorStyleSheet *this@<X0>, WebCore::CSSStyleRule *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  WebCore::InspectorStyleSheet *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  void *v15;
  BOOL (*v16)(uint64_t, uint64_t);
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  WTF::StringImpl **v20;
  BOOL (*v21)(uint64_t, uint64_t);
  void *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  WTF::StringImpl **v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF *v31;
  WTF::StringImpl *v32;
  unsigned int **v33;
  uint64_t v34;
  unsigned int *v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  void *v42;
  WTF::StringImpl **v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  const WTF::String *v55;
  WTF::StringImpl *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::JSONImpl::Value *v80;
  WTF::StringImpl *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  Inspector::Protocol::Helpers *v88;
  const WTF::String *v89;
  WTF::StringImpl *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WebCore::CSSStyleDeclaration *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  int v107;
  uint64_t v108;
  int *v109;
  int v110;
  int v111;
  int v112;
  WTF::StringImpl *v113;
  int v114;
  const WTF::String *v115;
  WTF::StringImpl *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::JSONImpl::Object *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  int v127;
  int v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  uint64_t v137;
  void *v138;
  const Condition *v139;
  WTF::StringImpl *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  void *v145;
  void *v146;
  WTF::StringImpl **v147;
  WebCore::CSSStyleRule *v148;
  char v149;
  WTF::StringImpl *v150;
  int v151;
  uint64_t v152;
  WTF::StringImpl *v153;
  WTF::StringImpl **v154;
  WTF::String *v155;
  WTF::StringImpl *v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  void *v161;
  void *v162;
  WTF::StringImpl **v163;
  WTF::StringImpl *v164;
  uint64_t v165;
  WTF *v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  WTF::StringImpl *v172;
  uint64_t v173;
  char v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  const Condition *v177;
  WTF::StringImpl *v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  void *v183;
  void *v184;
  WTF::StringImpl **v185;
  WTF::StringImpl *v186;
  WebCore::CSSStyleRule *v187;
  WebCore::CSSStyleRule *v188;
  char v189;
  uint64_t v190;
  WTF *v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  WTF::StringImpl *v197;
  uint64_t v198;
  char v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  WTF::StringImpl *v203;
  WTF::StringImpl *v204;
  const Condition *v205;
  const WTF::String *v206;
  WTF::StringImpl *v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  uint64_t v215;
  WTF::StringImpl *v216;
  WTF::StringImpl *v217;
  WTF::StringImpl *v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  void *v223;
  void *v224;
  WTF::StringImpl **v225;
  WTF::StringImpl *v226;
  uint64_t v227;
  _DWORD **v228;
  uint64_t v229;
  _DWORD *v230;
  uint64_t *v231;
  WTF::StringImpl *v232;
  WTF::StringImpl *v233;
  WebCore::CSSStyleRule *v234;
  WebCore::InspectorStyleSheet *v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t v238;
  WTF::StringImpl *v239;
  WTF::StringImpl *v240;
  WTF::StringImpl *v241;
  WTF::JSONImpl::Value *v242;
  WTF::StringImpl *v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  WTF::StringImpl *v247;
  WTF::StringImpl *v248;
  WTF::StringImpl *v249;
  _DWORD **v250;
  uint64_t v251;
  _DWORD *v252;
  _DWORD **v253;
  uint64_t v254;
  _DWORD *v255;
  _DWORD **v256;
  uint64_t v257;
  _DWORD *v258;
  _DWORD **v259;
  uint64_t v260;
  _DWORD *v261;
  _DWORD **v262;
  uint64_t v263;
  _DWORD *v264;
  _DWORD **v265;
  uint64_t v266;
  _DWORD *v267;
  _DWORD **v268;
  uint64_t v269;
  _DWORD *v270;
  _DWORD **v271;
  uint64_t v272;
  _DWORD *v273;
  _DWORD **v274;
  uint64_t v275;
  _DWORD *v276;
  _DWORD **v277;
  uint64_t v278;
  _DWORD *v279;
  _DWORD **v280;
  uint64_t v281;
  _DWORD *v282;
  WTF::StringImpl *v283;
  WTF::StringImpl *v284;
  WTF::StringImpl **v285;
  WTF::StringImpl *v286;
  WTF::StringImpl *v287;
  uint64_t *v288;
  WebCore::InspectorStyleSheet *v289;
  WebCore::CSSStyleRule *v290;
  unsigned int v291;
  uint64_t v292;
  WTF::StringImpl *v293;
  int v294;
  unsigned int v295;
  WTF::StringImpl *v296;
  WTF::StringImpl *v297;
  WTF::StringImpl *v298;
  WTF::StringImpl *v299;
  unsigned int v300;
  unsigned int v301;
  char v302;

  if (!*((_QWORD *)this + 4))
  {
    *a3 = 0;
    return this;
  }
  v5 = this;
  v291 = 0;
  WTF::JSONImpl::Object::create(this);
  v6 = v299;
  v289 = v5;
  v290 = a2;
  v285 = a3;
  v286 = v299;
  if (((*(uint64_t (**)(WebCore::InspectorStyleSheet *))(*(_QWORD *)v5 + 72))(v5) & 1) != 0)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::InspectorStyleSheet *, WebCore::CSSStyleRule *))(*(_QWORD *)v5 + 56))(&v299, v5, a2);
    v7 = v299;
    WebCore::CSSStyleRule::selectorText(a2, &v296);
    if (v7)
    {
      v8 = (WTF::StringImpl **)*((_QWORD *)v5 + 7);
      WebCore::InspectorStyleSheet::selectorsForCSSStyleRule((WebCore::InspectorStyleSheet *)&v293, v5, (uint64_t)a2);
      if ((_MergedGlobals_200 & 1) == 0)
      {
        JSC::Yarr::RegularExpression::RegularExpression();
        _MergedGlobals_200 = 1;
      }
      v9 = WTF::fastMalloc((WTF *)0x20);
      WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v9);
      v284 = v7;
      v11 = *((unsigned int *)v7 + 9);
      if ((_DWORD)v11)
      {
        v12 = 0;
        v13 = (_DWORD *)*((_QWORD *)v7 + 3);
        v14 = &v13[2 * v11];
        v15 = &unk_1ECE83728;
        v16 = WTF::deprecatedIsSpaceOrNewline;
        do
        {
          if (v12 >= v295)
            break;
          v17 = *v8;
          if (*v8)
          {
            if (*v13 || *((_DWORD *)v17 + 1) > (v13[1] - *v13))
            {
              WTF::StringImpl::substring(v17);
              v298 = v299;
            }
            else
            {
              *(_DWORD *)v17 += 2;
              v298 = v17;
            }
          }
          else
          {
            v298 = 0;
          }
          JSC::Yarr::replace();
          WTF::String::trim();
          if (v12 >= v295)
          {
            __break(0xC471u);
            JUMPOUT(0x195DEA39CLL);
          }
          WebCore::buildObjectForSelectorHelper((WebCore *)&v299, (const WTF::String *)&v297, *((const WebCore::CSSSelector **)v293 + v12));
          v18 = v299;
          v19 = *(unsigned int *)(v9 + 28);
          if ((_DWORD)v19 == *(_DWORD *)(v9 + 24))
          {
            v287 = v299;
            v20 = v8;
            v21 = v16;
            v22 = v15;
            v23 = v19 + (v19 >> 2);
            if (v23 >= 0x10)
              v24 = v23 + 1;
            else
              v24 = 16;
            if (v24 <= v19 + 1)
              v25 = v19 + 1;
            else
              v25 = v24;
            if (v25 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x195DEA3A4);
            }
            v26 = *(void **)(v9 + 16);
            v27 = (void *)WTF::fastMalloc((WTF *)(8 * v25));
            *(_DWORD *)(v9 + 24) = v25;
            *(_QWORD *)(v9 + 16) = v27;
            memcpy(v27, v26, 8 * v19);
            v15 = v22;
            v16 = v21;
            v8 = v20;
            if (v26)
            {
              if (*(void **)(v9 + 16) == v26)
              {
                *(_QWORD *)(v9 + 16) = 0;
                *(_DWORD *)(v9 + 24) = 0;
              }
              WTF::fastFree((WTF *)v26, v10);
            }
            v19 = *(unsigned int *)(v9 + 28);
            v28 = (WTF::StringImpl **)(*(_QWORD *)(v9 + 16) + 8 * v19);
            v18 = v287;
          }
          else
          {
            v28 = (WTF::StringImpl **)(*(_QWORD *)(v9 + 16) + 8 * v19);
          }
          *v28 = v18;
          *(_DWORD *)(v9 + 28) = v19 + 1;
          v29 = v297;
          v297 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v29 -= 2;
          }
          v30 = v298;
          v298 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v30 -= 2;
          }
          v13 += 2;
          ++v12;
        }
        while (v13 != v14);
      }
      v31 = v293;
      if (v293)
      {
        v293 = 0;
        v294 = 0;
        v31 = (WTF *)WTF::fastFree(v31, v10);
      }
      v44 = 1;
      v6 = v286;
      v5 = v289;
      a2 = v290;
      v45 = (uint64_t)v284;
      goto LABEL_70;
    }
  }
  else
  {
    WebCore::CSSStyleRule::selectorText(a2, &v296);
  }
  v9 = WTF::fastMalloc((WTF *)0x20);
  WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v9);
  v31 = (WTF *)WebCore::InspectorStyleSheet::selectorsForCSSStyleRule((WebCore::InspectorStyleSheet *)&v299, v5, (uint64_t)a2);
  v33 = (unsigned int **)v299;
  if (v301)
  {
    v34 = 8 * v301;
    do
    {
      v35 = *v33;
      WebCore::CSSSelector::selectorText(*v33, 0, (WTF::StringBuilder *)0x100000000, 0, 0x100000000, &v293);
      WebCore::buildObjectForSelectorHelper((WebCore *)&v298, (const WTF::String *)&v293, (const WebCore::CSSSelector *)v35);
      v31 = v293;
      v293 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          v31 = (WTF *)WTF::StringImpl::destroy(v31, v32);
        else
          *(_DWORD *)v31 -= 2;
      }
      v36 = v298;
      v37 = *(unsigned int *)(v9 + 28);
      if ((_DWORD)v37 == *(_DWORD *)(v9 + 24))
      {
        v38 = v37 + (v37 >> 2);
        if (v38 >= 0x10)
          v39 = v38 + 1;
        else
          v39 = 16;
        if (v39 <= v37 + 1)
          v40 = v37 + 1;
        else
          v40 = v39;
        if (v40 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x195DEA38CLL);
        }
        v41 = *(void **)(v9 + 16);
        v42 = (void *)WTF::fastMalloc((WTF *)(8 * v40));
        *(_DWORD *)(v9 + 24) = v40;
        *(_QWORD *)(v9 + 16) = v42;
        v31 = (WTF *)memcpy(v42, v41, 8 * v37);
        if (v41)
        {
          if (*(void **)(v9 + 16) == v41)
          {
            *(_QWORD *)(v9 + 16) = 0;
            *(_DWORD *)(v9 + 24) = 0;
          }
          v31 = (WTF *)WTF::fastFree((WTF *)v41, v32);
        }
        v37 = *(unsigned int *)(v9 + 28);
        v43 = (WTF::StringImpl **)(*(_QWORD *)(v9 + 16) + 8 * v37);
      }
      else
      {
        v43 = (WTF::StringImpl **)(*(_QWORD *)(v9 + 16) + 8 * v37);
      }
      *v43 = v36;
      *(_DWORD *)(v9 + 28) = v37 + 1;
      ++v33;
      v34 -= 8;
    }
    while (v34);
    v33 = (unsigned int **)v299;
    v5 = v289;
    a2 = v290;
  }
  if (v33)
  {
    v299 = 0;
    v300 = 0;
    v31 = (WTF *)WTF::fastFree((WTF *)v33, v32);
  }
  v44 = 0;
  v45 = 0;
LABEL_70:
  WTF::JSONImpl::Object::create(v31);
  v46 = v292;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v297 = (WTF::StringImpl *)v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v292 + 16), &v298, (const WTF::StringImpl *)&v297, (uint64_t)&v299);
  if (v302)
  {
    v48 = (uint64_t *)(v292 + 24);
    v49 = *(unsigned int *)(v292 + 36);
    if ((_DWORD)v49 == *(_DWORD *)(v292 + 32))
    {
      v250 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v48, v49 + 1, (unint64_t)&v298);
      v49 = *(unsigned int *)(v292 + 36);
      v251 = *(_QWORD *)(v292 + 24);
      v252 = *v250;
      if (*v250)
        *v252 += 2;
      *(_QWORD *)(v251 + 8 * v49) = v252;
    }
    else
    {
      v50 = *v48;
      v51 = v298;
      if (v298)
        *(_DWORD *)v298 += 2;
      *(_QWORD *)(v50 + 8 * v49) = v51;
    }
    *(_DWORD *)(v46 + 36) = v49 + 1;
  }
  v52 = v297;
  v297 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v52;
  }
  v53 = v298;
  v298 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v47);
    else
      *(_DWORD *)v53 -= 2;
  }
  v54 = v292;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v296, v55);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v292 + 16), &v297, (const WTF::StringImpl *)&v298, (uint64_t)&v299);
  if (v302)
  {
    v57 = (uint64_t *)(v292 + 24);
    v58 = *(unsigned int *)(v292 + 36);
    if ((_DWORD)v58 == *(_DWORD *)(v292 + 32))
    {
      v253 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v57, v58 + 1, (unint64_t)&v297);
      v58 = *(unsigned int *)(v292 + 36);
      v254 = *(_QWORD *)(v292 + 24);
      v255 = *v253;
      if (*v253)
        *v255 += 2;
      *(_QWORD *)(v254 + 8 * v58) = v255;
    }
    else
    {
      v59 = *v57;
      v60 = v297;
      if (v297)
        *(_DWORD *)v297 += 2;
      *(_QWORD *)(v59 + 8 * v58) = v60;
    }
    *(_DWORD *)(v54 + 36) = v58 + 1;
  }
  v61 = v298;
  v298 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v61;
  }
  v62 = v297;
  v297 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, v56);
    else
      *(_DWORD *)v62 -= 2;
  }
  v63 = v292;
  if (v44)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::InspectorStyleSheet *))(*(_QWORD *)v5 + 88))(&v299, v5);
    WebCore::buildSourceRangeObject((WTF::StringImpl *)&v292, v45 + 8, (uint64_t)&v299, &v291);
    v64 = v299;
    if (v299)
    {
      v299 = 0;
      v300 = 0;
      WTF::fastFree(v64, v56);
    }
    v65 = (WTF::StringImpl *)v292;
    if (v292)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v297 = v65;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v63 + 16), &v298, (const WTF::StringImpl *)&v297, (uint64_t)&v299);
      if (v302)
      {
        v66 = (uint64_t *)(v63 + 24);
        v67 = *(unsigned int *)(v63 + 36);
        if ((_DWORD)v67 == *(_DWORD *)(v63 + 32))
        {
          v277 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v66, v67 + 1, (unint64_t)&v298);
          v67 = *(unsigned int *)(v63 + 36);
          v278 = *(_QWORD *)(v63 + 24);
          v279 = *v277;
          if (*v277)
            *v279 += 2;
          *(_QWORD *)(v278 + 8 * v67) = v279;
        }
        else
        {
          v68 = *v66;
          v69 = v298;
          if (v298)
            *(_DWORD *)v298 += 2;
          *(_QWORD *)(v68 + 8 * v67) = v69;
        }
        *(_DWORD *)(v63 + 36) = v67 + 1;
      }
      v70 = v297;
      v297 = 0;
      if (v70)
      {
        if (*(_DWORD *)v70 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v70;
      }
      v71 = v298;
      v298 = 0;
      if (v71)
      {
        if (*(_DWORD *)v71 == 2)
          WTF::StringImpl::destroy(v71, v56);
        else
          *(_DWORD *)v71 -= 2;
      }
    }
  }
  v72 = v296;
  v296 = 0;
  if (!v72)
  {
LABEL_113:
    if (!v45)
      goto LABEL_115;
    goto LABEL_114;
  }
  if (*(_DWORD *)v72 != 2)
  {
    *(_DWORD *)v72 -= 2;
    goto LABEL_113;
  }
  WTF::StringImpl::destroy(v72, v56);
  if (v45)
LABEL_114:
    WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v45, v56);
LABEL_115:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v298 = (WTF::StringImpl *)v63;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v6 + 2, &v293, (const WTF::StringImpl *)&v298, (uint64_t)&v299);
  if (v302)
  {
    v74 = (uint64_t *)((char *)v6 + 24);
    v75 = *((unsigned int *)v6 + 9);
    if ((_DWORD)v75 == *((_DWORD *)v6 + 8))
    {
      v256 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v74, v75 + 1, (unint64_t)&v293);
      v75 = *((unsigned int *)v6 + 9);
      v257 = *((_QWORD *)v6 + 3);
      v258 = *v256;
      if (*v256)
        *v258 += 2;
      *(_QWORD *)(v257 + 8 * v75) = v258;
    }
    else
    {
      v76 = *v74;
      v77 = v293;
      if (v293)
        *(_DWORD *)v293 += 2;
      *(_QWORD *)(v76 + 8 * v75) = v77;
    }
    *((_DWORD *)v6 + 9) = v75 + 1;
  }
  v78 = v298;
  v298 = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v78;
  }
  v79 = v293;
  v293 = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
      WTF::StringImpl::destroy(v79, v73);
    else
      *(_DWORD *)v79 -= 2;
  }
  v80 = (WTF::JSONImpl::Value *)v291;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v80);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v6 + 2, &v298, (const WTF::StringImpl *)&v293, (uint64_t)&v299);
  if (v302)
  {
    v82 = (uint64_t *)((char *)v6 + 24);
    v83 = *((unsigned int *)v6 + 9);
    if ((_DWORD)v83 == *((_DWORD *)v6 + 8))
    {
      v259 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v82, v83 + 1, (unint64_t)&v298);
      v83 = *((unsigned int *)v6 + 9);
      v260 = *((_QWORD *)v6 + 3);
      v261 = *v259;
      if (*v259)
        *v261 += 2;
      *(_QWORD *)(v260 + 8 * v83) = v261;
    }
    else
    {
      v84 = *v82;
      v85 = v298;
      if (v298)
        *(_DWORD *)v298 += 2;
      *(_QWORD *)(v84 + 8 * v83) = v85;
    }
    *((_DWORD *)v6 + 9) = v83 + 1;
  }
  v86 = v293;
  v293 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v86;
  }
  v87 = v298;
  v298 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
      WTF::StringImpl::destroy(v87, v81);
    else
      *(_DWORD *)v87 -= 2;
  }
  v88 = (Inspector::Protocol::Helpers *)*((unsigned int *)v5 + 10);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::Protocol::Helpers::getEnumConstantValue(v88);
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v297, v89);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v6 + 2, &v298, (const WTF::StringImpl *)&v293, (uint64_t)&v299);
  if (v302)
  {
    v91 = (uint64_t *)((char *)v6 + 24);
    v92 = *((unsigned int *)v6 + 9);
    if ((_DWORD)v92 == *((_DWORD *)v6 + 8))
    {
      v262 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v91, v92 + 1, (unint64_t)&v298);
      v92 = *((unsigned int *)v6 + 9);
      v263 = *((_QWORD *)v6 + 3);
      v264 = *v262;
      if (*v262)
        *v264 += 2;
      *(_QWORD *)(v263 + 8 * v92) = v264;
    }
    else
    {
      v93 = *v91;
      v94 = v298;
      if (v298)
        *(_DWORD *)v298 += 2;
      *(_QWORD *)(v93 + 8 * v92) = v94;
    }
    *((_DWORD *)v6 + 9) = v92 + 1;
  }
  v95 = v293;
  v293 = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v95;
  }
  v96 = v297;
  v297 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
      WTF::StringImpl::destroy(v96, v90);
    else
      *(_DWORD *)v96 -= 2;
  }
  v97 = v298;
  v298 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
      WTF::StringImpl::destroy(v97, v90);
    else
      *(_DWORD *)v97 -= 2;
  }
  v98 = (WebCore::CSSStyleDeclaration *)WebCore::CSSStyleRule::style(a2);
  WebCore::InspectorStyleSheet::buildObjectForStyle(v5, v98, (uint64_t *)&v297);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v99 = v297;
  v297 = 0;
  v298 = v99;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v6 + 2, &v293, (const WTF::StringImpl *)&v298, (uint64_t)&v299);
  if (v302)
  {
    v101 = (uint64_t *)((char *)v6 + 24);
    v102 = *((unsigned int *)v6 + 9);
    if ((_DWORD)v102 == *((_DWORD *)v6 + 8))
    {
      v265 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v101, v102 + 1, (unint64_t)&v293);
      v102 = *((unsigned int *)v6 + 9);
      v266 = *((_QWORD *)v6 + 3);
      v267 = *v265;
      if (*v265)
        *v267 += 2;
      *(_QWORD *)(v266 + 8 * v102) = v267;
    }
    else
    {
      v103 = *v101;
      v104 = v293;
      if (v293)
        *(_DWORD *)v293 += 2;
      *(_QWORD *)(v103 + 8 * v102) = v104;
    }
    *((_DWORD *)v6 + 9) = v102 + 1;
  }
  v105 = v298;
  v298 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v105;
  }
  v106 = v293;
  v293 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
      WTF::StringImpl::destroy(v106, v100);
    else
      *(_DWORD *)v106 -= 2;
  }
  v107 = *((_DWORD *)v5 + 10);
  if ((v107 | 2) == 0x12)
  {
    v108 = *((_QWORD *)v5 + 4);
    if (v108 && (v109 = *(int **)(*(_QWORD *)(v108 + 24) + 136)) != 0 && v109[1])
    {
      v110 = *v109;
      *v109 += 2;
    }
    else
    {
      v109 = (int *)*MEMORY[0x1E0CBF738];
      if (!*MEMORY[0x1E0CBF738])
      {
        v283 = (WTF::StringImpl *)*((_QWORD *)v5 + 6);
        if (v283)
        {
          *(_DWORD *)v283 += 2;
          v297 = v283;
        }
        else
        {
          v297 = 0;
        }
        goto LABEL_176;
      }
      v110 = *v109;
      v111 = v109[1];
      v112 = *v109 + 2;
      *v109 = v112;
      if (!v111)
      {
        v113 = (WTF::StringImpl *)*((_QWORD *)v5 + 6);
        if (v113)
        {
          *(_DWORD *)v113 += 2;
          v112 = *v109;
        }
        goto LABEL_174;
      }
    }
    v112 = v110 + 4;
    *v109 = v110 + 4;
    v113 = (WTF::StringImpl *)v109;
LABEL_174:
    v297 = v113;
    v114 = v112 - 2;
    if (v114)
      *v109 = v114;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v109, v100);
LABEL_176:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v297, v115);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v6 + 2, &v298, (const WTF::StringImpl *)&v293, (uint64_t)&v299);
    if (v302)
    {
      v117 = (uint64_t *)((char *)v6 + 24);
      v118 = *((unsigned int *)v6 + 9);
      if ((_DWORD)v118 == *((_DWORD *)v6 + 8))
      {
        v268 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v117, v118 + 1, (unint64_t)&v298);
        v118 = *((unsigned int *)v6 + 9);
        v269 = *((_QWORD *)v6 + 3);
        v270 = *v268;
        if (*v268)
          *v270 += 2;
        *(_QWORD *)(v269 + 8 * v118) = v270;
      }
      else
      {
        v119 = *v117;
        v120 = v298;
        if (v298)
          *(_DWORD *)v298 += 2;
        *(_QWORD *)(v119 + 8 * v118) = v120;
      }
      *((_DWORD *)v6 + 9) = v118 + 1;
    }
    v121 = v293;
    v293 = 0;
    if (v121)
    {
      if (*(_DWORD *)v121 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v121;
    }
    v122 = v298;
    v298 = 0;
    if (v122)
    {
      if (*(_DWORD *)v122 == 2)
        WTF::StringImpl::destroy(v122, v116);
      else
        *(_DWORD *)v122 -= 2;
    }
    v123 = v297;
    v297 = 0;
    if (v123)
    {
      if (*(_DWORD *)v123 == 2)
        WTF::StringImpl::destroy(v123, v116);
      else
        *(_DWORD *)v123 -= 2;
    }
    v107 = *((_DWORD *)v5 + 10);
  }
  if ((v107 - 18) > 0xFFFFFFFD)
    goto LABEL_216;
  v124 = (WTF::JSONImpl::Object *)(*(uint64_t (**)(WebCore::InspectorStyleSheet *, WebCore::CSSStyleRule *, uint64_t, _QWORD))(*(_QWORD *)v5 + 64))(v5, a2, 1, 0);
  if ((_DWORD)v124 == -1)
    goto LABEL_216;
  v126 = (WTF::StringImpl *)*((_QWORD *)v5 + 3);
  if (!v126)
    goto LABEL_216;
  v127 = *(_DWORD *)v126;
  *(_DWORD *)v126 += 4;
  v299 = v126;
  v300 = v124;
  v128 = v127 + 2;
  if (v128)
    *(_DWORD *)v126 = v128;
  else
    v124 = (WTF::JSONImpl::Object *)WTF::StringImpl::destroy(v126, v125);
  if (*((_DWORD *)v126 + 1))
  {
    WTF::JSONImpl::Object::create(v124);
    Inspector::Protocol::CSS::CSSRuleId::Builder<0>::setStyleSheetId((uint64_t *)&v293, (WTF::JSONImpl::Value *)&v299);
    Inspector::Protocol::CSS::CSSRuleId::Builder<1>::setOrdinal((uint64_t *)&v293, (WTF::JSONImpl::Value *)v300);
    v129 = v293;
    v126 = v299;
    v299 = 0;
    if (!v126)
      goto LABEL_203;
  }
  else
  {
    v129 = 0;
    v299 = 0;
  }
  if (*(_DWORD *)v126 == 2)
  {
    WTF::StringImpl::destroy(v126, v125);
    if (v129)
      goto LABEL_204;
    goto LABEL_216;
  }
  *(_DWORD *)v126 -= 2;
LABEL_203:
  if (v129)
  {
LABEL_204:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v298 = v129;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v6 + 2, &v293, (const WTF::StringImpl *)&v298, (uint64_t)&v299);
    if (v302)
    {
      v131 = (uint64_t *)((char *)v6 + 24);
      v132 = *((unsigned int *)v6 + 9);
      if ((_DWORD)v132 == *((_DWORD *)v6 + 8))
      {
        v280 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v131, v132 + 1, (unint64_t)&v293);
        v132 = *((unsigned int *)v6 + 9);
        v281 = *((_QWORD *)v6 + 3);
        v282 = *v280;
        if (*v280)
          *v282 += 2;
        *(_QWORD *)(v281 + 8 * v132) = v282;
      }
      else
      {
        v133 = *v131;
        v134 = v293;
        if (v293)
          *(_DWORD *)v293 += 2;
        *(_QWORD *)(v133 + 8 * v132) = v134;
      }
      *((_DWORD *)v6 + 9) = v132 + 1;
    }
    v135 = v298;
    v298 = 0;
    if (v135)
    {
      if (*(_DWORD *)v135 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v135;
    }
    v136 = v293;
    v293 = 0;
    if (v136)
    {
      if (*(_DWORD *)v136 == 2)
        WTF::StringImpl::destroy(v136, v130);
      else
        *(_DWORD *)v136 -= 2;
    }
  }
LABEL_216:
  v288 = (uint64_t *)((char *)v6 + 16);
  v137 = WTF::fastMalloc((WTF *)0x20);
  WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v137);
  do
  {
    if (a2 != v290)
    {
      WebCore::InspectorStyleSheet::buildObjectForGrouping(v289, a2, &v293);
      v140 = v293;
      if (v293)
      {
        v293 = 0;
        v141 = *(unsigned int *)(v137 + 28);
        if ((_DWORD)v141 == *(_DWORD *)(v137 + 24))
        {
          v142 = v141 + (v141 >> 2);
          if (v142 >= 0x10)
            v143 = v142 + 1;
          else
            v143 = 16;
          if (v143 <= v141 + 1)
            v144 = v141 + 1;
          else
            v144 = v143;
          if (v144 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x195DEA3ACLL);
          }
          v145 = *(void **)(v137 + 16);
          v146 = (void *)WTF::fastMalloc((WTF *)(8 * v144));
          *(_DWORD *)(v137 + 24) = v144;
          *(_QWORD *)(v137 + 16) = v146;
          memcpy(v146, v145, 8 * v141);
          if (v145)
          {
            if (*(void **)(v137 + 16) == v145)
            {
              *(_QWORD *)(v137 + 16) = 0;
              *(_DWORD *)(v137 + 24) = 0;
            }
            WTF::fastFree((WTF *)v145, v138);
          }
          v141 = *(unsigned int *)(v137 + 28);
          v147 = (WTF::StringImpl **)(*(_QWORD *)(v137 + 16) + 8 * v141);
        }
        else
        {
          v147 = (WTF::StringImpl **)(*(_QWORD *)(v137 + 16) + 8 * v141);
        }
        *v147 = v140;
        *(_DWORD *)(v137 + 28) = v141 + 1;
        goto LABEL_314;
      }
      if ((*(unsigned int (**)(WebCore::CSSStyleRule *))(*(_QWORD *)a2 + 16))(a2) != 3)
      {
LABEL_314:
        if (v293)
        {
          if (*(_DWORD *)v293 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v293;
        }
        goto LABEL_317;
      }
      v148 = a2;
      while (1)
      {
        v149 = *((_BYTE *)v148 + 12);
        v148 = (WebCore::CSSStyleRule *)*((_QWORD *)v148 + 2);
        if ((v149 & 2) == 0)
          break;
        if (!v148)
          goto LABEL_247;
      }
      if (!v148)
        goto LABEL_247;
      v150 = *(WTF::StringImpl **)(*((_QWORD *)v148 + 3) + 136);
      if (v150)
      {
        v151 = *(_DWORD *)v150;
        *(_DWORD *)v150 += 2;
        v298 = v150;
        if (*((_DWORD *)v150 + 1))
          goto LABEL_251;
        if (v151)
          *(_DWORD *)v150 = v151;
        else
          WTF::StringImpl::destroy(v150, (WTF::StringImpl *)v138);
      }
      v152 = WebCore::CSSStyleSheet::ownerDocument(v148);
      if (!v152)
      {
LABEL_247:
        v154 = (WTF::StringImpl **)MEMORY[0x1E0CBF6F0];
        goto LABEL_248;
      }
      v153 = *(WTF::StringImpl **)(v152 + 736);
      if (v153)
        goto LABEL_249;
      v154 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
LABEL_248:
      v153 = *v154;
      if (!v153)
        goto LABEL_250;
LABEL_249:
      *(_DWORD *)v153 += 2;
LABEL_250:
      v298 = v153;
LABEL_251:
      v155 = WebCore::CSSImportRule::layerName(a2, &v297);
      if (v297)
      {
        WTF::JSONImpl::Object::create(v155);
        v296 = v299;
        Inspector::Protocol::CSS::Grouping::Builder<0>::setType((uint64_t *)&v296, (Inspector::Protocol::Helpers *)0x39);
        v156 = v296;
        Inspector::Protocol::CSS::Grouping::setText(v296, (const WTF::String *)&v297);
        if (v298 && *((_DWORD *)v298 + 1))
          Inspector::Protocol::CSS::Grouping::setSourceURL(v156, (const WTF::String *)&v298);
        v157 = *(unsigned int *)(v137 + 28);
        if ((_DWORD)v157 == *(_DWORD *)(v137 + 24))
        {
          v158 = v157 + (v157 >> 2);
          if (v158 >= 0x10)
            v159 = v158 + 1;
          else
            v159 = 16;
          if (v159 <= v157 + 1)
            v160 = v157 + 1;
          else
            v160 = v159;
          if (v160 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x195DEA3B4);
          }
          v161 = *(void **)(v137 + 16);
          v162 = (void *)WTF::fastMalloc((WTF *)(8 * v160));
          *(_DWORD *)(v137 + 24) = v160;
          *(_QWORD *)(v137 + 16) = v162;
          memcpy(v162, v161, 8 * v157);
          if (v161)
          {
            if (*(void **)(v137 + 16) == v161)
            {
              *(_QWORD *)(v137 + 16) = 0;
              *(_DWORD *)(v137 + 24) = 0;
            }
            WTF::fastFree((WTF *)v161, v138);
          }
          v157 = *(unsigned int *)(v137 + 28);
          v163 = (WTF::StringImpl **)(*(_QWORD *)(v137 + 16) + 8 * v157);
        }
        else
        {
          v163 = (WTF::StringImpl **)(*(_QWORD *)(v137 + 16) + 8 * v157);
        }
        *v163 = v156;
        *(_DWORD *)(v137 + 28) = v157 + 1;
        v164 = v297;
        v297 = 0;
        if (v164)
        {
          if (*(_DWORD *)v164 == 2)
            WTF::StringImpl::destroy(v164, (WTF::StringImpl *)v138);
          else
            *(_DWORD *)v164 -= 2;
        }
      }
      v165 = *((_QWORD *)a2 + 5);
      if (!v165)
      {
        v165 = WTF::fastMalloc((WTF *)0x30);
        *(_DWORD *)v165 = 1;
        *(_QWORD *)(v165 + 8) = 0;
        *(_QWORD *)(v165 + 16) = a2;
        *(_BYTE *)(v165 + 24) = 0;
        *(_BYTE *)(v165 + 40) = 0;
        v166 = (WTF *)*((_QWORD *)a2 + 5);
        *((_QWORD *)a2 + 5) = v165;
        if (v166)
        {
          if (*(_DWORD *)v166 == 1)
          {
            if (*((_BYTE *)v166 + 40))
              WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v166 + 24, v138);
            WTF::fastFree(v166, v138);
            v165 = *((_QWORD *)a2 + 5);
          }
          else
          {
            --*(_DWORD *)v166;
          }
        }
      }
      if (*(_BYTE *)(v165 + 40))
      {
        v167 = v165 + 24;
        goto LABEL_287;
      }
      v168 = *(_QWORD **)(v165 + 16);
      if (v168)
      {
        if ((*(unsigned int (**)(_QWORD))(*v168 + 16))(*(_QWORD *)(v165 + 16)) == 3)
        {
          v169 = v168[4];
LABEL_286:
          v167 = v169 + 48;
          goto LABEL_287;
        }
        v170 = *(_QWORD **)(v165 + 16);
        if (v170 && (*(unsigned int (**)(_QWORD))(*v170 + 16))(*(_QWORD *)(v165 + 16)) == 4)
        {
          v171 = v170[3];
          if ((*(_BYTE *)(v171 + 4) & 0x1F) != 4)
          {
            __break(0xC471u);
            JUMPOUT(0x195DEA354);
          }
          v167 = v171 + 24;
LABEL_287:
          if (!*(_DWORD *)(v167 + 12))
            goto LABEL_311;
          WebCore::MediaList::mediaText((WebCore::MediaList *)v165, (WTF::StringImpl *)v138, v139, &v299);
          v172 = v299;
          v173 = MEMORY[0x19AEA53F4](v299, "all", 3);
          v174 = v173;
          if (v172)
          {
            if (*(_DWORD *)v172 == 2)
            {
              v173 = WTF::StringImpl::destroy(v172, (WTF::StringImpl *)v138);
              if ((v174 & 1) == 0)
                goto LABEL_292;
              goto LABEL_311;
            }
            *(_DWORD *)v172 -= 2;
          }
          if ((v173 & 1) == 0)
          {
LABEL_292:
            WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)v173);
            v297 = v299;
            Inspector::Protocol::CSS::Grouping::Builder<0>::setType((uint64_t *)&v297, (Inspector::Protocol::Helpers *)0x34);
            v175 = v297;
            WebCore::MediaList::mediaText((WebCore::MediaList *)v165, v176, v177, &v299);
            Inspector::Protocol::CSS::Grouping::setText(v175, (const WTF::String *)&v299);
            v178 = v299;
            v299 = 0;
            if (v178)
            {
              if (*(_DWORD *)v178 == 2)
                WTF::StringImpl::destroy(v178, (WTF::StringImpl *)v138);
              else
                *(_DWORD *)v178 -= 2;
            }
            if (v298 && *((_DWORD *)v298 + 1))
              Inspector::Protocol::CSS::Grouping::setSourceURL(v175, (const WTF::String *)&v298);
            v179 = *(unsigned int *)(v137 + 28);
            if ((_DWORD)v179 == *(_DWORD *)(v137 + 24))
            {
              v180 = v179 + (v179 >> 2);
              if (v180 >= 0x10)
                v181 = v180 + 1;
              else
                v181 = 16;
              if (v181 <= v179 + 1)
                v182 = v179 + 1;
              else
                v182 = v181;
              if (v182 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x195DEA3BCLL);
              }
              v183 = *(void **)(v137 + 16);
              v184 = (void *)WTF::fastMalloc((WTF *)(8 * v182));
              *(_DWORD *)(v137 + 24) = v182;
              *(_QWORD *)(v137 + 16) = v184;
              memcpy(v184, v183, 8 * v179);
              if (v183)
              {
                if (*(void **)(v137 + 16) == v183)
                {
                  *(_QWORD *)(v137 + 16) = 0;
                  *(_DWORD *)(v137 + 24) = 0;
                }
                WTF::fastFree((WTF *)v183, v138);
              }
              v179 = *(unsigned int *)(v137 + 28);
              v185 = (WTF::StringImpl **)(*(_QWORD *)(v137 + 16) + 8 * v179);
            }
            else
            {
              v185 = (WTF::StringImpl **)(*(_QWORD *)(v137 + 16) + 8 * v179);
            }
            *v185 = v175;
            *(_DWORD *)(v137 + 28) = v179 + 1;
          }
LABEL_311:
          v186 = v298;
          v298 = 0;
          if (v186)
          {
            if (*(_DWORD *)v186 == 2)
              WTF::StringImpl::destroy(v186, (WTF::StringImpl *)v138);
            else
              *(_DWORD *)v186 -= 2;
          }
          goto LABEL_314;
        }
      }
      v169 = *(_QWORD *)(v165 + 8);
      goto LABEL_286;
    }
LABEL_317:
    v187 = a2;
    if ((*((_BYTE *)a2 + 12) & 2) == 0 || (v188 = (WebCore::CSSStyleRule *)*((_QWORD *)a2 + 2), v187 = a2, !v188))
    {
      while (1)
      {
        v189 = *((_BYTE *)v187 + 12);
        v187 = (WebCore::CSSStyleRule *)*((_QWORD *)v187 + 2);
        if ((v189 & 2) == 0)
          break;
        if (!v187)
        {
          v188 = a2;
          goto LABEL_414;
        }
      }
      v188 = a2;
      if (v187)
      {
        while (1)
        {
          v190 = *((_QWORD *)v187 + 15);
          if (v190)
            goto LABEL_327;
          v190 = WTF::fastMalloc((WTF *)0x30);
          *(_DWORD *)v190 = 1;
          *(_QWORD *)(v190 + 8) = v187;
          *(_QWORD *)(v190 + 16) = 0;
          *(_BYTE *)(v190 + 24) = 0;
          *(_BYTE *)(v190 + 40) = 0;
          v191 = (WTF *)*((_QWORD *)v187 + 15);
          *((_QWORD *)v187 + 15) = v190;
          if (!v191)
            goto LABEL_327;
          if (*(_DWORD *)v191 != 1)
            break;
          if (*((_BYTE *)v191 + 40))
            WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v191 + 24, v138);
          WTF::fastFree(v191, v138);
          v190 = *((_QWORD *)v187 + 15);
          if (v190)
            goto LABEL_327;
LABEL_391:
          v227 = *((_QWORD *)v187 + 13);
          if (v227)
          {
            v188 = *(WebCore::CSSStyleRule **)(v227 + 8);
            if (v188)
              goto LABEL_414;
          }
          v187 = (WebCore::CSSStyleRule *)WebCore::CSSStyleSheet::parentStyleSheet(v187);
          if (!v187)
            goto LABEL_428;
        }
        --*(_DWORD *)v191;
LABEL_327:
        if (*(_BYTE *)(v190 + 40))
        {
          v192 = v190 + 24;
          goto LABEL_338;
        }
        v193 = *(_QWORD **)(v190 + 16);
        if (!v193)
          goto LABEL_336;
        if ((*(unsigned int (**)(_QWORD))(*v193 + 16))(*(_QWORD *)(v190 + 16)) == 3)
        {
          v194 = v193[4];
          goto LABEL_337;
        }
        v195 = *(_QWORD **)(v190 + 16);
        if (v195 && (*(unsigned int (**)(_QWORD))(*v195 + 16))(*(_QWORD *)(v190 + 16)) == 4)
        {
          v196 = v195[3];
          if ((*(_BYTE *)(v196 + 4) & 0x1F) != 4)
          {
            __break(0xC471u);
            JUMPOUT(0x195DEA318);
          }
          v192 = v196 + 24;
        }
        else
        {
LABEL_336:
          v194 = *(_QWORD *)(v190 + 8);
LABEL_337:
          v192 = v194 + 48;
        }
LABEL_338:
        if (!*(_DWORD *)(v192 + 12))
          goto LABEL_391;
        WebCore::MediaList::mediaText((WebCore::MediaList *)v190, (WTF::StringImpl *)v138, v139, &v299);
        v197 = v299;
        v198 = MEMORY[0x19AEA53F4](v299, "all", 3);
        v199 = v198;
        if (v197)
        {
          if (*(_DWORD *)v197 != 2)
          {
            *(_DWORD *)v197 -= 2;
            goto LABEL_342;
          }
          v198 = WTF::StringImpl::destroy(v197, (WTF::StringImpl *)v138);
          if ((v199 & 1) != 0)
            goto LABEL_391;
        }
        else
        {
LABEL_342:
          if ((v198 & 1) != 0)
            goto LABEL_391;
        }
        WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)v198);
        v293 = v299;
        v200 = *((_QWORD *)v187 + 12);
        if (v200 && (v201 = *(_QWORD *)(v200 + 8)) != 0 && (*(_WORD *)(v201 + 28) & 0x10) != 0)
        {
          if (*(_QWORD *)(*(_QWORD *)(v201 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::styleTag + 24))
            v202 = 54;
          else
            v202 = 53;
        }
        else
        {
          v202 = 53;
        }
        Inspector::Protocol::CSS::Grouping::Builder<0>::setType((uint64_t *)&v293, (Inspector::Protocol::Helpers *)v202);
        v203 = v293;
        WebCore::MediaList::mediaText((WebCore::MediaList *)v190, v204, v205, &v297);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v297, v206);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v203 + 2, &v298, (const WTF::StringImpl *)&v293, (uint64_t)&v299);
        if (v302)
        {
          v208 = (uint64_t *)((char *)v203 + 24);
          v209 = *((unsigned int *)v203 + 9);
          if ((_DWORD)v209 == *((_DWORD *)v203 + 8))
          {
            v228 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v208, v209 + 1, (unint64_t)&v298);
            v209 = *((unsigned int *)v203 + 9);
            v229 = *((_QWORD *)v203 + 3);
            v230 = *v228;
            if (*v228)
              *v230 += 2;
            *(_QWORD *)(v229 + 8 * v209) = v230;
          }
          else
          {
            v210 = *v208;
            v211 = v298;
            if (v298)
              *(_DWORD *)v298 += 2;
            *(_QWORD *)(v210 + 8 * v209) = v211;
          }
          *((_DWORD *)v203 + 9) = v209 + 1;
        }
        v212 = v293;
        v293 = 0;
        if (v212)
        {
          if (*(_DWORD *)v212 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v212;
        }
        v213 = v298;
        v298 = 0;
        if (v213)
        {
          if (*(_DWORD *)v213 == 2)
            WTF::StringImpl::destroy(v213, v207);
          else
            *(_DWORD *)v213 -= 2;
        }
        v214 = v297;
        v297 = 0;
        if (v214)
        {
          if (*(_DWORD *)v214 == 2)
            WTF::StringImpl::destroy(v214, v207);
          else
            *(_DWORD *)v214 -= 2;
        }
        v299 = 0;
        v215 = WebCore::CSSStyleSheet::ownerDocument(v187);
        if (v215)
        {
          v216 = *(WTF::StringImpl **)(v215 + 736);
          if (v216)
            *(_DWORD *)v216 += 2;
          v217 = v299;
          v299 = v216;
          if (v217)
          {
LABEL_369:
            if (*(_DWORD *)v217 == 2)
              WTF::StringImpl::destroy(v217, (WTF::StringImpl *)v138);
            else
              *(_DWORD *)v217 -= 2;
            goto LABEL_372;
          }
LABEL_373:
          if (v216 && *((_DWORD *)v216 + 1))
            goto LABEL_395;
        }
        else
        {
          v218 = *(WTF::StringImpl **)(*((_QWORD *)v187 + 3) + 136);
          if (!v218 || !*((_DWORD *)v218 + 1))
          {
LABEL_372:
            v216 = v299;
            goto LABEL_373;
          }
          *(_DWORD *)v218 += 2;
          v217 = v299;
          v299 = v218;
          if (v217)
            goto LABEL_369;
LABEL_395:
          Inspector::Protocol::CSS::Grouping::setSourceURL(v203, (const WTF::String *)&v299);
        }
        v219 = *(unsigned int *)(v137 + 28);
        if ((_DWORD)v219 == *(_DWORD *)(v137 + 24))
        {
          v220 = v219 + (v219 >> 2);
          if (v220 >= 0x10)
            v221 = v220 + 1;
          else
            v221 = 16;
          if (v221 <= v219 + 1)
            v222 = v219 + 1;
          else
            v222 = v221;
          if (v222 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x195DEA394);
          }
          v223 = *(void **)(v137 + 16);
          v224 = (void *)WTF::fastMalloc((WTF *)(8 * v222));
          *(_DWORD *)(v137 + 24) = v222;
          *(_QWORD *)(v137 + 16) = v224;
          memcpy(v224, v223, 8 * v219);
          if (v223)
          {
            if (*(void **)(v137 + 16) == v223)
            {
              *(_QWORD *)(v137 + 16) = 0;
              *(_DWORD *)(v137 + 24) = 0;
            }
            WTF::fastFree((WTF *)v223, v138);
          }
          v219 = *(unsigned int *)(v137 + 28);
          v225 = (WTF::StringImpl **)(*(_QWORD *)(v137 + 16) + 8 * v219);
        }
        else
        {
          v225 = (WTF::StringImpl **)(*(_QWORD *)(v137 + 16) + 8 * v219);
        }
        *v225 = v203;
        *(_DWORD *)(v137 + 28) = v219 + 1;
        v226 = v299;
        v299 = 0;
        if (v226)
        {
          if (*(_DWORD *)v226 == 2)
            WTF::StringImpl::destroy(v226, (WTF::StringImpl *)v138);
          else
            *(_DWORD *)v226 -= 2;
        }
        goto LABEL_391;
      }
    }
LABEL_414:
    a2 = v188;
  }
  while (v188);
LABEL_428:
  if (*(_DWORD *)(v137 + 28))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v298 = (WTF::StringImpl *)v137;
    v231 = v288;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v288, &v293, (const WTF::StringImpl *)&v298, (uint64_t)&v299);
    v233 = v286;
    v235 = v289;
    v234 = v290;
    if (v302)
    {
      v236 = (uint64_t *)((char *)v286 + 24);
      v237 = *((unsigned int *)v286 + 9);
      if ((_DWORD)v237 == *((_DWORD *)v286 + 8))
      {
        v271 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v236, v237 + 1, (unint64_t)&v293);
        v237 = *((unsigned int *)v286 + 9);
        v272 = *((_QWORD *)v286 + 3);
        v273 = *v271;
        if (*v271)
          *v273 += 2;
        *(_QWORD *)(v272 + 8 * v237) = v273;
      }
      else
      {
        v238 = *v236;
        v239 = v293;
        if (v293)
          *(_DWORD *)v293 += 2;
        *(_QWORD *)(v238 + 8 * v237) = v239;
      }
      *((_DWORD *)v286 + 9) = v237 + 1;
    }
    v240 = v298;
    v298 = 0;
    if (v240)
    {
      if (*(_DWORD *)v240 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v240;
    }
    v241 = v293;
    v293 = 0;
    if (v241)
    {
      if (*(_DWORD *)v241 == 2)
        WTF::StringImpl::destroy(v241, v232);
      else
        *(_DWORD *)v241 -= 2;
    }
    v137 = 0;
  }
  else
  {
    v233 = v286;
    v231 = v288;
    v235 = v289;
    v234 = v290;
  }
  this = (WebCore::InspectorStyleSheet *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, WebCore::InspectorStyleSheet *, WebCore::CSSStyleRule *))(*(_QWORD *)v235 + 56))(&v297, v235, v234);
  if (v297)
  {
    v242 = (WTF::JSONImpl::Value *)*((unsigned __int8 *)v297 + 64);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v242);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v231, &v298, (const WTF::StringImpl *)&v293, (uint64_t)&v299);
    if (v302)
    {
      v244 = (uint64_t *)((char *)v233 + 24);
      v245 = *((unsigned int *)v233 + 9);
      if ((_DWORD)v245 == *((_DWORD *)v233 + 8))
      {
        v274 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v244, v245 + 1, (unint64_t)&v298);
        v245 = *((unsigned int *)v233 + 9);
        v275 = *((_QWORD *)v233 + 3);
        v276 = *v274;
        if (*v274)
          *v276 += 2;
        *(_QWORD *)(v275 + 8 * v245) = v276;
      }
      else
      {
        v246 = *v244;
        v247 = v298;
        if (v298)
          *(_DWORD *)v298 += 2;
        *(_QWORD *)(v246 + 8 * v245) = v247;
      }
      *((_DWORD *)v233 + 9) = v245 + 1;
    }
    v248 = v293;
    v293 = 0;
    if (v248)
    {
      if (*(_DWORD *)v248 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v248;
    }
    v249 = v298;
    v298 = 0;
    if (v249)
    {
      if (*(_DWORD *)v249 == 2)
        WTF::StringImpl::destroy(v249, v243);
      else
        *(_DWORD *)v249 -= 2;
    }
    this = v297;
    v297 = 0;
    if (this)
      this = (WebCore::InspectorStyleSheet *)WTF::RefCounted<WebCore::CSSRuleSourceData>::deref((uint64_t)this, v243);
  }
  *v285 = v233;
  if (v137)
  {
    if (*(_DWORD *)v137 == 1)
      return (WebCore::InspectorStyleSheet *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v137;
  }
  return this;
}

WTF::StringImpl *WebCore::InspectorStyleSheet::buildObjectForStyle@<X0>(WebCore::InspectorStyleSheet *this@<X0>, WebCore::CSSStyleDeclaration *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  int v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  int v15;
  const WTF::String *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF *v24;
  WTF::JSONImpl::ArrayBase *v25;
  WTF::JSONImpl::ArrayBase *v26;
  uint64_t v27;
  _DWORD *v28;
  WTF::StringImpl *result;
  uint64_t v30;
  WTF::StringImpl *v31;
  _DWORD **v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36[2];
  int v37;
  WTF *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  _DWORD *v42;
  uint64_t v43[2];
  char v44;

  if ((*(unsigned int (**)(WebCore::InspectorStyleSheet *))(*(_QWORD *)this + 72))(this))
  {
    (*(void (**)(uint64_t *__return_ptr, WebCore::InspectorStyleSheet *, WebCore::CSSStyleDeclaration *))(*(_QWORD *)this + 48))(v43, this, a2);
    v6 = v43[0];
  }
  else
  {
    v6 = 0;
  }
  v7 = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::InspectorStyleSheet *, WebCore::CSSStyleDeclaration *, _QWORD, _QWORD))(*(_QWORD *)this + 64))(this, a2, 0, 0);
  if ((_DWORD)v7 == -1)
  {
    v39 = 0;
    v40 = 0;
  }
  else
  {
    v9 = (int)v7;
    v7 = (WTF::StringImpl *)*((_QWORD *)this + 3);
    if (v7)
    {
      v10 = *(_DWORD *)v7;
      *(_DWORD *)v7 += 4;
      v39 = v7;
      LODWORD(v40) = v9;
      if (v10 == -2)
      {
        WTF::StringImpl::destroy(v7, v8);
        v7 = v39;
      }
      else
      {
        *(_DWORD *)v7 = v10 + 2;
      }
      if (*((_DWORD *)v7 + 1))
      {
        (*(void (**)(WTF **__return_ptr, WebCore::InspectorStyleSheet *, WTF::StringImpl **))(*(_QWORD *)this + 80))(&v38, this, &v39);
        WebCore::InspectorStyle::buildObjectForStyle(v38, a3);
        if (!v6)
        {
LABEL_36:
          v24 = v38;
          v38 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 1)
            {
              v30 = *((_QWORD *)v24 + 3);
              *((_QWORD *)v24 + 3) = 0;
              if (v30)
                (*(void (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30);
              v31 = (WTF::StringImpl *)*((_QWORD *)v24 + 1);
              *((_QWORD *)v24 + 1) = 0;
              if (v31)
              {
                if (*(_DWORD *)v31 == 2)
                  WTF::StringImpl::destroy(v31, v11);
                else
                  *(_DWORD *)v31 -= 2;
              }
              WTF::fastFree(v24, v11);
            }
            else
            {
              --*(_DWORD *)v24;
            }
          }
          goto LABEL_49;
        }
        (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::InspectorStyleSheet *))(*(_QWORD *)this + 24))(v36, this);
        v12 = v37;
        if (v37)
        {
LABEL_34:
          if (v12 != -1)
            ((void (*)(uint64_t *, WTF::StringImpl **))off_1E33EEAC0[v12])(v43, v36);
          goto LABEL_36;
        }
        v13 = *a3;
        v14 = v36[0];
        v36[0] = 0;
        if (v14)
        {
          v15 = *(_DWORD *)(v6 + 16);
          if (v15 || *((_DWORD *)v14 + 1) > *(_DWORD *)(v6 + 20))
          {
            WTF::StringImpl::substring(v14);
          }
          else
          {
            *(_DWORD *)v14 += 2;
            v35 = v14;
          }
        }
        else
        {
          v35 = 0;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v35, v16);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v13 + 16), &v41, (const WTF::StringImpl *)&v42, (uint64_t)v43);
        if (v44)
        {
          v17 = (uint64_t *)(v13 + 24);
          v18 = *(unsigned int *)(v13 + 36);
          if ((_DWORD)v18 == *(_DWORD *)(v13 + 32))
          {
            v32 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v17, v18 + 1, (unint64_t)&v41);
            v18 = *(unsigned int *)(v13 + 36);
            v33 = *(_QWORD *)(v13 + 24);
            v34 = *v32;
            if (*v32)
              *v34 += 2;
            *(_QWORD *)(v33 + 8 * v18) = v34;
          }
          else
          {
            v19 = *v17;
            v20 = v41;
            if (v41)
              *(_DWORD *)v41 += 2;
            *(_QWORD *)(v19 + 8 * v18) = v20;
          }
          *(_DWORD *)(v13 + 36) = v18 + 1;
        }
        v21 = v42;
        v42 = 0;
        if (v21)
        {
          if (*v21 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v21;
        }
        v22 = v41;
        v41 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v11);
          else
            *(_DWORD *)v22 -= 2;
        }
        v23 = v35;
        v35 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
          {
            WTF::StringImpl::destroy(v23, v11);
            if (v14)
            {
LABEL_31:
              if (*(_DWORD *)v14 == 2)
                WTF::StringImpl::destroy(v14, v11);
              else
                *(_DWORD *)v14 -= 2;
            }
LABEL_33:
            v12 = v37;
            goto LABEL_34;
          }
          *(_DWORD *)v23 -= 2;
        }
        if (v14)
          goto LABEL_31;
        goto LABEL_33;
      }
    }
    else
    {
      v39 = 0;
      LODWORD(v40) = v9;
    }
  }
  WTF::JSONImpl::Object::create(v7);
  v25 = (WTF::JSONImpl::ArrayBase *)WTF::fastMalloc((WTF *)0x20);
  v36[0] = (WTF::StringImpl *)WTF::JSONImpl::ArrayBase::ArrayBase(v25);
  Inspector::Protocol::CSS::CSSStyle::Builder<0>::setCssProperties(v43, v36);
  v26 = (WTF::JSONImpl::ArrayBase *)WTF::fastMalloc((WTF *)0x20);
  v42 = (_DWORD *)WTF::JSONImpl::ArrayBase::ArrayBase(v26);
  Inspector::Protocol::CSS::CSSStyle::Builder<1>::setShorthandEntries(v43, &v42);
  v27 = v43[0];
  v43[0] = 0;
  *a3 = v27;
  if (v42)
  {
    if (*v42 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v42;
  }
  if (v36[0])
  {
    if (*(_DWORD *)v36[0] == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v36[0];
  }
  v28 = (_DWORD *)v43[0];
  v43[0] = 0;
  if (v28)
  {
    if (*v28 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v28;
  }
LABEL_49:
  result = v39;
  v39 = 0;
  if (!result)
    goto LABEL_52;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_52:
    if (!v6)
      return result;
    return (WTF::StringImpl *)WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v6, v11);
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
  if (v6)
    return (WTF::StringImpl *)WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v6, v11);
  return result;
}

_QWORD *WebCore::InspectorStyleSheet::setRuleStyleText@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, WTF::StringImpl **a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  WebCore::CSSStyleSheet *v8;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  int v38;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  int16x8_t *v44;
  int16x8_t v45;
  int16x8_t *v46;
  int8x16_t v47;
  int16x8_t *v48;
  char *v49;
  int16x8_t v50;
  __int16 *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  WTF::StringImpl *v70;
  int v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  int v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  WTF::StringImpl *v86;
  char v87;

  v8 = (WebCore::CSSStyleSheet *)result[4];
  if (!v8)
    goto LABEL_12;
  v12 = result;
  v13 = *((_DWORD *)result + 19);
  if (!v13)
  {
    WebCore::asCSSRuleList((uint64_t)&v85, v8);
    WebCore::InspectorStyleSheet::collectFlatRules((uint64_t *)&v85, (char **)v12 + 8);
    result = v85;
    if (v85)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v85 + 24))(v85);
    v13 = *((_DWORD *)v12 + 19);
  }
  v14 = *(unsigned int *)(a2 + 8);
  if (v13 <= v14
    || (v15 = *(_QWORD *)(v12[8] + 8 * v14)) == 0
    || (result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*v12 + 56))(&v84, v12, v15),
        (v18 = v84) == 0))
  {
LABEL_12:
    *(_BYTE *)a6 = 5;
    *(_QWORD *)(a6 + 8) = 0;
    *(_BYTE *)(a6 + 16) = 1;
    return result;
  }
  if (*(_BYTE *)(v84 + 64))
  {
    if ((*(_BYTE *)(v15 + 12) & 2) != 0)
      v19 = *(_QWORD *)(v15 + 16);
    else
      v19 = 0;
    (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*v12 + 56))(&v83, v12, v19);
    v18 = v83;
    if (!v83)
    {
      *(_BYTE *)a6 = 5;
      *(_QWORD *)(a6 + 8) = 0;
      *(_BYTE *)(a6 + 16) = 1;
      goto LABEL_192;
    }
  }
  else
  {
    ++*(_DWORD *)v84;
    v83 = v18;
  }
  v21 = *(_DWORD *)(v18 + 16);
  v20 = *(_DWORD *)(v18 + 20);
  v22 = *(WTF::StringImpl **)v12[7];
  if (v22)
  {
    v23 = *((_DWORD *)v22 + 1);
    *(_DWORD *)v22 += 2;
  }
  else
  {
    v23 = 0;
  }
  if (v20 > v23)
  {
    __break(0xC471u);
    JUMPOUT(0x195DEABE8);
  }
  if (!a4
    || (!v22
      ? (v24 = 0)
      : v21 || *((_DWORD *)v22 + 1) > v20
      ? (WTF::StringImpl::substring(v22), v24 = (uint64_t)v85)
      : (*(_DWORD *)v22 += 2, v24 = (uint64_t)v22),
        v25 = *a4,
        *a4 = (WTF::StringImpl *)v24,
        !v25))
  {
LABEL_28:
    if (a5)
      goto LABEL_29;
    goto LABEL_34;
  }
  if (*(_DWORD *)v25 != 2)
  {
    *(_DWORD *)v25 -= 2;
    goto LABEL_28;
  }
  WTF::StringImpl::destroy(v25, v16);
  if (a5)
  {
LABEL_29:
    if (*a3)
    {
      if (v22)
      {
LABEL_31:
        WTF::StringImpl::replace();
        v26 = (WTF::StringImpl *)v85;
        goto LABEL_59;
      }
    }
    else if (v22)
    {
      goto LABEL_31;
    }
    v26 = 0;
LABEL_59:
    v79 = v26;
    WebCore::InspectorStyleSheet::setText(v12, (const WTF::String *)&v79, &v85);
    if (v87 && v86)
    {
      if (*(_DWORD *)v86 == 2)
        WTF::StringImpl::destroy(v86, v40);
      else
        *(_DWORD *)v86 -= 2;
    }
    WebCore::InspectorStyleSheet::reparseStyleSheet((WebCore::InspectorStyleSheet *)v12, (const WTF::String *)&v79);
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
    v41 = v79;
    v79 = 0;
    if (!v41)
      goto LABEL_189;
    if (*(_DWORD *)v41 != 2)
    {
      *(_DWORD *)v41 -= 2;
      goto LABEL_189;
    }
LABEL_202:
    WTF::StringImpl::destroy(v41, v16);
    goto LABEL_189;
  }
LABEL_34:
  v27 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v27 += 2;
  v28 = *a3;
  if (!*a3)
    goto LABEL_56;
  v29 = *(_DWORD *)(v28 + 16);
  v30 = *(_QWORD *)(v28 + 8);
  v31 = *(unsigned int *)(v28 + 4);
  if ((v29 & 4) != 0)
  {
    if ((_DWORD)v31)
    {
      v32 = 16;
      if (v31 < 0x10)
        v32 = *(unsigned int *)(v28 + 4);
      v33 = v32;
      v34 = *(_BYTE **)(v28 + 8);
      do
      {
        if (*v34 == 10)
          goto LABEL_46;
        ++v34;
        --v33;
      }
      while (v33);
      if (v31 >= 0x11)
      {
        v34 = memchr((void *)(v30 + v32), 10, v31 - v32);
        if (v34)
        {
LABEL_46:
          v35 = (uint64_t)&v34[-v30];
          goto LABEL_47;
        }
      }
    }
    goto LABEL_101;
  }
  if (!(_DWORD)v31)
    goto LABEL_101;
  v44 = (int16x8_t *)(v30 + 2 * v31);
  if (v31 > 0x1F)
  {
    v45.i64[0] = 0xA000A000A000ALL;
    v45.i64[1] = 0xA000A000A000ALL;
    v46 = *(int16x8_t **)(v28 + 8);
    do
    {
      v47 = (int8x16_t)vceqq_s16(*v46, v45);
      LOWORD(v17) = vmaxvq_u16((uint16x8_t)v47);
      if (v17)
        goto LABEL_95;
      v48 = v46 + 1;
      v49 = &v46[1].i8[14];
      ++v46;
    }
    while (v49 < (char *)v44);
    if (v48 < v44)
    {
      v50.i64[0] = 0xA000A000A000ALL;
      v50.i64[1] = 0xA000A000A000ALL;
      v47 = (int8x16_t)vceqq_s16(v44[-1], v50);
      v50.i16[0] = vmaxvq_u16((uint16x8_t)v47);
      if (v50.i32[0])
      {
        v46 = v44 - 1;
LABEL_95:
        v51 = &v46->i16[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v47))];
        goto LABEL_96;
      }
    }
    goto LABEL_101;
  }
  v52 = 2 * v31;
  v51 = *(__int16 **)(v28 + 8);
  while (*v51 != 10)
  {
    ++v51;
    v52 -= 2;
    if (!v52)
      goto LABEL_101;
  }
LABEL_96:
  if (v51 == (__int16 *)v44)
    goto LABEL_101;
  v35 = ((uint64_t)v51 - v30) >> 1;
LABEL_47:
  if (v35 == -1)
    goto LABEL_101;
  v36 = (WTF::StringImpl *)(v35 + 1);
  v37 = (v35 + 1);
  if ((v29 & 4) != 0)
  {
    if (v31 > v36)
    {
      while (1)
      {
        v38 = *(unsigned __int8 *)(v30 + v37);
        if (v38 != 32 && v38 != 9)
          goto LABEL_76;
        if (v31 == ++v37)
          goto LABEL_56;
      }
    }
LABEL_101:
    v28 = (uint64_t)v27;
    goto LABEL_102;
  }
  if (v31 <= v36)
    goto LABEL_101;
  while (1)
  {
    v42 = *(unsigned __int16 *)(v30 + 2 * v37);
    if (v42 != 32 && v42 != 9)
      break;
    if (v31 == ++v37)
      goto LABEL_56;
  }
LABEL_76:
  if (v37 == -1)
  {
LABEL_56:
    v28 = (uint64_t)v27;
    goto LABEL_102;
  }
  if (!(_DWORD)v36 && v31 <= v37)
  {
    *(_DWORD *)v28 += 2;
    if (!v27)
      goto LABEL_102;
LABEL_80:
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v36);
    else
      *(_DWORD *)v27 -= 2;
    goto LABEL_102;
  }
  WTF::StringImpl::substring((WTF::StringImpl *)v28);
  v28 = (uint64_t)v85;
  if (v27)
    goto LABEL_80;
LABEL_102:
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 1;
  v53 = (WTF::StringImpl *)*a3;
  if (*a3)
  {
    v54 = *((_DWORD *)v53 + 1);
    *(_DWORD *)v53 += 2;
  }
  else
  {
    v54 = 0;
  }
  v79 = v53;
  v81 = v54;
  v55 = *(unsigned int *)(v83 + 60);
  if (!(_DWORD)v55)
  {
LABEL_133:
    if (!v53)
      goto LABEL_149;
    v66 = WTF::StringImpl::reverseFind();
    if (v66 == -1)
      goto LABEL_149;
    if (*a3)
      v67 = *(unsigned int *)(*a3 + 4) | ((unint64_t)((*(_DWORD *)(*a3 + 16) >> 2) & 1) << 32);
    else
      v67 = 0x100000000;
    LODWORD(v68) = v67 - v66;
    if (v67 <= v66)
      goto LABEL_148;
    if ((int)v67 - (int)v66 >= 0)
    {
      if (!(_DWORD)v66)
      {
        v68 = v67;
LABEL_147:
        if ((v68 & 0x100000000) != 0)
          goto LABEL_148;
        WTF::StringBuilder::append();
        goto LABEL_149;
      }
    }
    else
    {
      LODWORD(v68) = 0x7FFFFFFF;
    }
    v68 = v68;
    v69 = v67 - (unint64_t)v66;
    if ((v67 & 0x100000000) != 0)
    {
      if (v69 < v68)
        goto LABEL_165;
      v68 = v68 | 0x100000000;
    }
    else if (v69 < v68)
    {
      goto LABEL_165;
    }
    goto LABEL_147;
  }
  v56 = 8 * v55;
  v57 = *(uint64_t **)(v83 + 48);
  while (1)
  {
    v58 = *v57;
    if (!*(_BYTE *)(*v57 + 64))
      break;
LABEL_126:
    ++v57;
    v56 -= 8;
    if (!v56)
    {
      v53 = (WTF::StringImpl *)*a3;
      goto LABEL_133;
    }
  }
  if (v22)
    v59 = *((_DWORD *)v22 + 1);
  else
    v59 = 0;
  v60 = *(_DWORD *)(v58 + 20);
  if (v60 <= v59)
  {
    v61 = *(unsigned int *)(v58 + 8);
    LOBYTE(v78) = 10;
    v85 = (_QWORD *)v28;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v79, (char *)&v78, (uint64_t *)&v85);
    if (*(_BYTE *)(*v57 + 4) != 1)
      WTF::StringBuilder::append();
    if (v22)
      v62 = *((unsigned int *)v22 + 1) | ((unint64_t)((*((_DWORD *)v22 + 4) >> 2) & 1) << 32);
    else
      v62 = 0x100000000;
    if (v62 <= v61)
      goto LABEL_124;
    v63 = v60 - v61;
    if ((int)v62 - (int)v61 <= v60 - v61)
    {
      if (!(_DWORD)v61)
      {
        v64 = v62;
        goto LABEL_123;
      }
      v63 = v62 - v61;
    }
    v64 = v63;
    v65 = v62 - v61;
    if ((v62 & 0x100000000) != 0)
    {
      if (v65 < v64)
        goto LABEL_165;
      v64 |= 0x100000000uLL;
    }
    else if (v65 < v64)
    {
      goto LABEL_165;
    }
LABEL_123:
    if ((v64 & 0x100000000) == 0)
    {
      WTF::StringBuilder::append();
      goto LABEL_125;
    }
LABEL_124:
    WTF::StringBuilder::append();
LABEL_125:
    WTF::StringBuilder::append();
    goto LABEL_126;
  }
  __break(0xC471u);
LABEL_165:
  __break(1u);
LABEL_148:
  WTF::StringBuilder::append();
LABEL_149:
  if (v80)
  {
    v71 = v81;
    v70 = v80;
  }
  else
  {
    v70 = v79;
    v71 = v81;
    if (!v79)
      goto LABEL_154;
  }
  if ((*((_BYTE *)v70 + 16) & 4) != 0)
  {
LABEL_154:
    if (v71 && v71 < 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195DEB040);
    }
    if (!v22)
      goto LABEL_172;
LABEL_161:
    WTF::StringImpl::replace();
    v72 = (WTF::StringImpl *)v85;
  }
  else
  {
    if (!v71)
    {
      if (!v22)
        goto LABEL_172;
      goto LABEL_161;
    }
    if (v71 < 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195DEB068);
    }
    if (v22)
      goto LABEL_161;
LABEL_172:
    v72 = 0;
  }
  v78 = v72;
  WebCore::InspectorStyleSheet::setText(v12, (const WTF::String *)&v78, &v85);
  if (v87 && v86)
  {
    if (*(_DWORD *)v86 == 2)
      WTF::StringImpl::destroy(v86, v73);
    else
      *(_DWORD *)v86 -= 2;
  }
  WebCore::InspectorStyleSheet::reparseStyleSheet((WebCore::InspectorStyleSheet *)v12, (const WTF::String *)&v78);
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  v74 = v78;
  v78 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, v16);
    else
      *(_DWORD *)v74 -= 2;
  }
  v75 = v80;
  v80 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
      WTF::StringImpl::destroy(v75, v16);
    else
      *(_DWORD *)v75 -= 2;
  }
  v76 = v79;
  v79 = 0;
  if (!v76)
  {
LABEL_186:
    if (!v28)
      goto LABEL_189;
    goto LABEL_187;
  }
  if (*(_DWORD *)v76 != 2)
  {
    *(_DWORD *)v76 -= 2;
    goto LABEL_186;
  }
  WTF::StringImpl::destroy(v76, v16);
  if (v28)
  {
LABEL_187:
    if (*(_DWORD *)v28 != 2)
    {
      *(_DWORD *)v28 -= 2;
      goto LABEL_189;
    }
    v41 = (WTF::StringImpl *)v28;
    goto LABEL_202;
  }
LABEL_189:
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v16);
    else
      *(_DWORD *)v22 -= 2;
  }
LABEL_192:
  v77 = v83;
  v83 = 0;
  if (v77)
    WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v77, v16);
  result = (_QWORD *)v84;
  v84 = 0;
  if (result)
    return (_QWORD *)WTF::RefCounted<WebCore::CSSRuleSourceData>::deref((uint64_t)result, v16);
  return result;
}

uint64_t WebCore::InspectorStyleSheet::text@<X0>(WebCore::InspectorStyleSheet *this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, WTF::StringBuilder *a5@<X4>, uint64_t a6@<X8>, __n128 a7@<Q0>)
{
  uint64_t result;
  _DWORD *v10;
  int v11;

  result = WebCore::InspectorStyleSheet::ensureText(this, a2, a7, a3, a4, a5);
  if ((result & 1) != 0)
  {
    v10 = (_DWORD *)**((_QWORD **)this + 7);
    if (v10)
      *v10 += 2;
    v11 = 0;
    *(_QWORD *)a6 = v10;
  }
  else
  {
    *(_BYTE *)a6 = 5;
    *(_QWORD *)(a6 + 8) = 0;
    v11 = 1;
  }
  *(_DWORD *)(a6 + 16) = v11;
  return result;
}

uint64_t WebCore::InspectorStyleSheet::ensureText(WebCore::InspectorStyleSheet *this, WTF::StringImpl *a2, __n128 a3, uint64_t a4, uint64_t a5, WTF::StringBuilder *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  WTF::String *v15;
  WTF::StringImpl *v16;
  BOOL *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  WTF::StringImpl *v34;
  int v35;
  int v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  WebCore::ExtensionStyleSheets *v44;
  uint64_t v45;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49[5];
  WTF::StringImpl *v50[5];
  unsigned __int8 v51;
  WTF::StringImpl *v52;

  v6 = *((_QWORD *)this + 7);
  if (!v6)
    return 0;
  if (*(_BYTE *)(v6 + 8))
    return 1;
  v47 = 0;
  v9 = *((_QWORD *)this + 4);
  if (!v9)
    return 0;
  if (*((_DWORD *)this + 10) != 17)
  {
    v10 = *(_QWORD *)(v9 + 96);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        v12 = *(_WORD *)(v11 + 28);
        if ((v12 & 8) != 0
          && ((v12 & 0x10) != 0
           && *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::styleTag + 24)
           || (v12 & 0x20) != 0
           && *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::styleTag + 24)))
        {
          WebCore::Node::textContent((WebCore::Node *)v11, 0, a6, v50, a3);
          v21 = v50[0];
          v47 = v50[0];
LABEL_51:
          v38 = *((_QWORD *)this + 7);
          *(_BYTE *)(v38 + 8) = 1;
          if (v21)
            *(_DWORD *)v21 += 2;
          v39 = *(WTF::StringImpl **)v38;
          *(_QWORD *)v38 = v21;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
              WTF::StringImpl::destroy(v39, a2);
            else
              *(_DWORD *)v39 -= 2;
          }
          v50[0] = 0;
          WebCore::ParsedStyleSheet::setSourceData(v38, (uint64_t *)v50);
          v7 = 1;
          goto LABEL_75;
        }
      }
    }
    if ((*(uint64_t (**)(WebCore::InspectorStyleSheet *))(*(_QWORD *)this + 40))(this))
    {
      v13 = *(_QWORD *)((*(uint64_t (**)(WebCore::InspectorStyleSheet *))(*(_QWORD *)this + 40))(this) + 528);
      if (v13)
      {
        if (*(_QWORD *)(v13 + 8))
        {
          v52 = 0;
          v51 = 0;
          v14 = *(_QWORD *)((*(uint64_t (**)(WebCore::InspectorStyleSheet *))(*(_QWORD *)this + 40))(this)
                          + 528);
          if (v14)
            v15 = *(WTF::String **)(v14 + 8);
          else
            v15 = 0;
          v49[0] = 0;
          WTF::URL::invalidate((WTF::URL *)v49);
          v16 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 24);
          if (v16)
            *(_DWORD *)v16 += 2;
          v48 = v16;
          MEMORY[0x19AEA52F8](v50, v49, &v48, 0);
          WebCore::InspectorPageAgent::resourceContent((WebCore::InspectorPageAgent *)&v52, v15, (WebCore::LocalFrame *)v50, &v47, (WTF::String *)&v51, v17);
          v18 = v50[0];
          v50[0] = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, a2);
            else
              *(_DWORD *)v18 -= 2;
          }
          v19 = v48;
          v48 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, a2);
            else
              *(_DWORD *)v19 -= 2;
          }
          v20 = v49[0];
          v49[0] = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, a2);
            else
              *(_DWORD *)v20 -= 2;
          }
          if (v52)
          {
            v22 = (*((_DWORD *)v52 + 1) | v51) == 0;
            if (*(_DWORD *)v52 == 2)
            {
              WTF::StringImpl::destroy(v52, a2);
              if (v22)
                goto LABEL_50;
            }
            else
            {
              *(_DWORD *)v52 -= 2;
              if (v22)
              {
LABEL_50:
                v21 = v47;
                goto LABEL_51;
              }
            }
          }
          else if (!v51)
          {
            goto LABEL_50;
          }
        }
      }
    }
    if ((*(uint64_t (**)(WebCore::InspectorStyleSheet *))(*(_QWORD *)this + 40))(this))
    {
      v23 = (*(uint64_t (**)(WebCore::InspectorStyleSheet *))(*(_QWORD *)this + 40))(this);
      v24 = *(_QWORD *)(v23 + 1336);
      if (!v24)
      {
        v40 = v23;
        v41 = WTF::fastMalloc((WTF *)0xA8);
        *(_DWORD *)v41 = 0;
        v42 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v40);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 + 1, v42));
        *(_QWORD *)(v41 + 8) = v42;
        *(_QWORD *)(v41 + 144) = 0;
        *(_QWORD *)(v41 + 152) = 0;
        *(_QWORD *)(v41 + 157) = 0;
        *(_OWORD *)(v41 + 16) = 0u;
        *(_OWORD *)(v41 + 32) = 0u;
        *(_OWORD *)(v41 + 48) = 0u;
        *(_BYTE *)(v41 + 64) = 0;
        *(_OWORD *)(v41 + 72) = 0u;
        *(_OWORD *)(v41 + 88) = 0u;
        *(_OWORD *)(v41 + 104) = 0u;
        *(_OWORD *)(v41 + 120) = 0u;
        *(_QWORD *)(v41 + 133) = 0;
        v44 = *(WebCore::ExtensionStyleSheets **)(v40 + 1336);
        *(_QWORD *)(v40 + 1336) = v41;
        if (v44)
        {
          WebCore::ExtensionStyleSheets::~ExtensionStyleSheets(v44, a2);
          if (*(_DWORD *)v45)
          {
            *(_QWORD *)(v45 + 160) = 0;
            *(_OWORD *)(v45 + 128) = 0u;
            *(_OWORD *)(v45 + 144) = 0u;
            *(_OWORD *)(v45 + 96) = 0u;
            *(_OWORD *)(v45 + 112) = 0u;
            *(_OWORD *)(v45 + 64) = 0u;
            *(_OWORD *)(v45 + 80) = 0u;
            *(_OWORD *)(v45 + 32) = 0u;
            *(_OWORD *)(v45 + 48) = 0u;
            *(_OWORD *)v45 = 0u;
            *(_OWORD *)(v45 + 16) = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v45, a2);
          }
        }
        v24 = *(_QWORD *)(v40 + 1336);
      }
      v25 = *(_QWORD *)(v24 + 56);
      if (v25)
      {
        v26 = *(_DWORD *)(v25 - 8);
        v27 = *((_QWORD *)this + 4);
        v28 = (~(v27 << 32) + v27) ^ ((unint64_t)(~(v27 << 32) + v27) >> 22);
        v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
        v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
        v31 = v26 & ((v30 >> 31) ^ v30);
        v32 = *(_QWORD *)(v25 + 16 * v31);
        if (v32 == v27)
        {
LABEL_43:
          v34 = *(WTF::StringImpl **)(v25 + 16 * v31 + 8);
          if (v34)
          {
            v35 = *(_DWORD *)v34;
            v36 = *((_DWORD *)v34 + 1);
            *(_DWORD *)v34 += 2;
            if (v36)
            {
              *(_DWORD *)v34 = v35 + 4;
              v37 = v47;
              v47 = v34;
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                  WTF::StringImpl::destroy(v37, a2);
                else
                  *(_DWORD *)v37 -= 2;
              }
              if (*(_DWORD *)v34 == 2)
                WTF::StringImpl::destroy(v34, a2);
              else
                *(_DWORD *)v34 -= 2;
              goto LABEL_50;
            }
            if (v35)
            {
              v7 = 0;
              *(_DWORD *)v34 = v35;
              goto LABEL_75;
            }
            WTF::StringImpl::destroy(v34, a2);
          }
        }
        else
        {
          v33 = 1;
          while (v32)
          {
            v31 = ((_DWORD)v31 + v33) & v26;
            v32 = *(_QWORD *)(v25 + 16 * v31);
            ++v33;
            if (v32 == v27)
              goto LABEL_43;
          }
        }
      }
    }
  }
  v7 = 0;
LABEL_75:
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, a2);
    else
      *(_DWORD *)v47 -= 2;
  }
  return v7;
}

uint64_t WebCore::InspectorStyleSheet::styleForId(WebCore::InspectorStyleSheet *this, const WebCore::InspectorCSSId *a2)
{
  WebCore::CSSStyleSheet *v3;
  unsigned int v5;
  uint64_t v6;
  WebCore::CSSStyleRule *v7;
  uint64_t v9;

  v3 = (WebCore::CSSStyleSheet *)*((_QWORD *)this + 4);
  if (!v3)
    return 0;
  v5 = *((_DWORD *)this + 19);
  if (!v5)
  {
    WebCore::asCSSRuleList((uint64_t)&v9, v3);
    WebCore::InspectorStyleSheet::collectFlatRules(&v9, (char **)this + 8);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
    v5 = *((_DWORD *)this + 19);
  }
  v6 = *((unsigned int *)a2 + 2);
  if (v5 > v6
    && (v7 = *(WebCore::CSSStyleRule **)(*((_QWORD *)this + 8) + 8 * v6)) != 0
    && (*(unsigned int (**)(WebCore::CSSStyleRule *))(*(_QWORD *)v7 + 16))(v7) == 1)
  {
    return WebCore::CSSStyleRule::style(v7);
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::InspectorStyleSheet::inspectorStyleForId@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  _DWORD *v8;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if (result)
  {
    v7 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    result = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)result = 1;
    v8 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v8 += 2;
    *(_QWORD *)(result + 8) = v8;
    *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 8);
    *(_QWORD *)(result + 24) = v7;
    *(_QWORD *)(result + 32) = a1;
  }
  *a3 = result;
  return result;
}

uint64_t WebCore::InspectorStyleSheet::ownerDocument(WebCore::CSSStyleSheet **this)
{
  return WebCore::CSSStyleSheet::ownerDocument(this[4]);
}

uint64_t WebCore::InspectorStyleSheet::ruleSourceDataFor@<X0>(WebCore::InspectorStyleSheet *this@<X0>, WebCore::CSSStyleDeclaration *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *((_QWORD *)this + 7);
  result = (*(uint64_t (**)(WebCore::InspectorStyleSheet *, WebCore::CSSStyleDeclaration *, _QWORD, uint64_t))(*(_QWORD *)this + 64))(this, a2, 0, 1);
  v6 = *(_QWORD *)(v4 + 16);
  if (v6)
  {
    if (*(_DWORD *)(v6 + 12) <= result)
    {
      v6 = 0;
    }
    else
    {
      v6 = *(_QWORD *)(*(_QWORD *)v6 + 8 * result);
      if (v6)
        ++*(_DWORD *)v6;
    }
  }
  *a3 = v6;
  return result;
}

uint64_t WebCore::InspectorStyleSheet::ruleSourceDataFor@<X0>(WebCore::InspectorStyleSheet *this@<X0>, WebCore::CSSRule *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *((_QWORD *)this + 7);
  result = (*(uint64_t (**)(WebCore::InspectorStyleSheet *, WebCore::CSSRule *, uint64_t, uint64_t))(*(_QWORD *)this + 64))(this, a2, 1, 1);
  v6 = *(_QWORD *)(v4 + 16);
  if (v6)
  {
    if (*(_DWORD *)(v6 + 12) <= result)
    {
      v6 = 0;
    }
    else
    {
      v6 = *(_QWORD *)(*(_QWORD *)v6 + 8 * result);
      if (v6)
        ++*(_DWORD *)v6;
    }
  }
  *a3 = v6;
  return result;
}

Inspector::ContentSearchUtilities *WebCore::InspectorStyleSheet::lineEndings@<X0>(WebCore::InspectorStyleSheet *this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  Inspector::ContentSearchUtilities *result;

  result = (Inspector::ContentSearchUtilities *)*((_QWORD *)this + 7);
  if (*((_BYTE *)result + 8))
    return (Inspector::ContentSearchUtilities *)Inspector::ContentSearchUtilities::lineEndings(result, a2);
  *a3 = 0;
  a3[1] = 0;
  return result;
}

uint64_t WebCore::InspectorStyleSheet::ruleIndexByStyle(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char **v5;
  uint64_t v6;
  char *v7;
  char *v9;
  uint64_t v10;
  char *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *j;
  uint64_t v16;
  uint64_t v17;
  WebCore::InspectorStyleSheet *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  char *v24;
  uint64_t *v25;

  v21 = a2;
  v22 = a3;
  v5 = (char **)(a1 + 64);
  v6 = *(unsigned int *)(a1 + 76);
  if ((_DWORD)v6)
  {
    v7 = *v5;
  }
  else
  {
    WebCore::asCSSRuleList((uint64_t)&v23, *(WebCore::CSSStyleSheet **)(a1 + 32));
    WebCore::InspectorStyleSheet::collectFlatRules((uint64_t *)&v23, v5);
    if (v23)
      (*(void (**)(uint64_t *))(*v23 + 24))(v23);
    v6 = *(unsigned int *)(a1 + 76);
    if (!(_DWORD)v6)
      return 0xFFFFFFFFLL;
    v7 = *(char **)(a1 + 64);
  }
  v9 = &v7[8 * v6];
  if ((a4 & 1) != 0)
  {
    v10 = 0;
    for (i = v7; ; i += 8)
    {
      v20 = 0;
      v12 = *(_QWORD *)v7;
      if (*(_QWORD *)v7)
        v13 = (*(unsigned int (**)(_QWORD))(*(_QWORD *)v12 + 16))(*(_QWORD *)v7) == 1 ? v12 : 0;
      else
        v13 = 0;
      v20 = v13;
      v23 = &v20;
      v24 = i;
      if ((_DWORD)v22 == -1)
        break;
      v25 = (uint64_t *)&v23;
      if ((((uint64_t (*)(uint64_t **, uint64_t *))off_1E33EEB08[v22])(&v25, &v21) & 1) != 0)
        return v10;
      if (!v20 || (v14 = *(_QWORD *)(v20 + 32), !*(_BYTE *)(v14 + 5)) || *(_BYTE *)(v14 + 6))
        v10 = (v10 + 1);
      v7 += 8;
      if (v7 == v9)
        return 0xFFFFFFFFLL;
    }
  }
  else
  {
    v10 = 0;
    for (j = v7; ; j += 8)
    {
      v20 = 0;
      v16 = *(_QWORD *)v7;
      if (*(_QWORD *)v7)
        v17 = (*(unsigned int (**)(_QWORD))(*(_QWORD *)v16 + 16))(*(_QWORD *)v7) == 1 ? v16 : 0;
      else
        v17 = 0;
      v20 = v17;
      v23 = &v20;
      v24 = j;
      if ((_DWORD)v22 == -1)
        break;
      v25 = (uint64_t *)&v23;
      if ((((uint64_t (*)(uint64_t **, uint64_t *))off_1E33EEB08[v22])(&v25, &v21) & 1) != 0)
        return v10;
      v10 = (v10 + 1);
      v7 += 8;
      if (v7 == v9)
        return 0xFFFFFFFFLL;
    }
  }
  v19 = (WebCore::InspectorStyleSheet *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::InspectorStyleSheet::ensureParsedDataReady(v19);
}

BOOL WebCore::InspectorStyleSheet::ensureParsedDataReady(WebCore::InspectorStyleSheet *this, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, WTF::StringBuilder *a5, __n128 a6)
{
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WebCore::StyleSheetContents *v14;
  uint64_t v15;
  __int128 v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  const WebCore::Document *v19;
  uint64_t *v21;
  WTF::StringImpl *v22;
  __int128 v23;
  WTF::StringImpl *v24;
  __int16 v25;
  uint64_t v26;
  WebCore::CSSStyleSheet *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  void *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF *v47;
  void *v48;
  __int128 v49;
  __int128 v50;
  WTF *v51[2];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  __int128 v56;
  __int128 v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  __int16 v60;
  char v61;
  char **v62;
  char *v63;

  if (*((_DWORD *)this + 10) != 19)
  {
    v7 = *((_QWORD *)this + 4);
    if (v7)
    {
      if (*(_BYTE *)(v7 + 34))
        return 0;
    }
  }
  if (!WebCore::InspectorStyleSheet::ensureText(this, a2, a6, a3, a4, a5))
    return 0;
  v8 = *((_QWORD *)this + 7);
  if (*(_QWORD *)(v8 + 16))
    return 1;
  if (!*(_BYTE *)(v8 + 8))
    return 0;
  v55 = 0;
  WTF::URL::invalidate((WTF::URL *)&v55);
  v10 = v55;
  if (v55)
    *(_DWORD *)v55 += 2;
  v50 = v56;
  *(_OWORD *)v51 = v57;
  v11 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
  if (v11 != -1)
  {
    v63 = &v61;
    v62 = &v63;
    std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v62, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
  }
  v12 = WTF::fastMalloc((WTF *)0xD8);
  v14 = (WebCore::StyleSheetContents *)v12;
  *(_DWORD *)v12 = 1;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_QWORD *)(v12 + 104) = 0;
  v15 = WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  *(_QWORD *)(v12 + 112) = v15;
  *(_WORD *)(v12 + 120) = 0;
  *(_BYTE *)(v12 + 122) = 1;
  *(_QWORD *)(v12 + 123) = 0;
  *(_BYTE *)(v12 + 131) = 0;
  if (v10)
  {
    *(_DWORD *)v10 += 2;
    *(_QWORD *)(v12 + 136) = v10;
    v16 = *(_OWORD *)v51;
    *(_OWORD *)(v12 + 144) = v50;
    *(_OWORD *)(v12 + 160) = v16;
    *(_QWORD *)(v12 + 200) = 0;
    *(_QWORD *)(v12 + 208) = 0;
    *(_QWORD *)(v12 + 176) = 0;
    *(_QWORD *)(v12 + 184) = 0;
    *(_WORD *)(v12 + 192) = 0;
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v13);
    else
      *(_DWORD *)v10 -= 2;
  }
  else
  {
    *(_QWORD *)(v12 + 136) = 0;
    v49 = *(_OWORD *)v51;
    *(_OWORD *)(v12 + 144) = v50;
    *(_OWORD *)(v12 + 160) = v49;
    *(_QWORD *)(v12 + 200) = 0;
    *(_QWORD *)(v12 + 208) = 0;
    *(_QWORD *)(v12 + 176) = 0;
    *(_QWORD *)(v12 + 184) = 0;
    *(_WORD *)(v12 + 192) = 0;
  }
  v17 = v55;
  v55 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v13);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v18 = 0;
  *(_QWORD *)(v18 + 8) = 0;
  v19 = (const WebCore::Document *)WebCore::CSSStyleSheet::ownerDocument(*((WebCore::CSSStyleSheet **)this + 4));
  if (v19)
  {
    WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)&v55, v19);
  }
  else
  {
    v21 = WebCore::strictCSSParserContext(0);
    v22 = (WTF::StringImpl *)*v21;
    if (*v21)
      *(_DWORD *)v22 += 2;
    v55 = v22;
    v23 = *(_OWORD *)(v21 + 3);
    v56 = *(_OWORD *)(v21 + 1);
    v57 = v23;
    v24 = (WTF::StringImpl *)v21[5];
    if (v24)
      *(_DWORD *)v24 += 2;
    v25 = *((_WORD *)v21 + 28);
    v26 = v21[6];
    v58 = v24;
    v59 = v26;
    v60 = v25;
  }
  v27 = (WebCore::CSSStyleSheet *)*((_QWORD *)this + 4);
  v28 = *((_QWORD *)v27 + 12);
  if (v28)
  {
    v29 = *(_QWORD *)(v28 + 8);
    if (v29)
    {
      v30 = **(_QWORD **)(v29 + 40);
      if (v30)
      {
        if ((*(_WORD *)(v30 + 28) & 0x80) != 0 && !*(_BYTE *)(v30 + 193))
          LOBYTE(v59) = 4;
      }
    }
  }
  v31 = *((_QWORD *)this + 7);
  *(_QWORD *)&v50 = &off_1E33EE8F0;
  *((_QWORD *)&v50 + 1) = v31;
  v51[0] = (WTF *)WebCore::CSSStyleSheet::ownerDocument(v27);
  v51[1] = 0;
  v52 = 0;
  v53 = 0;
  v54 = v18;
  WebCore::CSSParserImpl::parseStyleSheetForInspector(*((_QWORD *)this + 7), (uint64_t)&v55, (uint64_t)v14, (uint64_t)&v50);
  v32 = *((_QWORD *)this + 7);
  v63 = (char *)v18;
  WebCore::ParsedStyleSheet::setSourceData(v32, (uint64_t *)&v63);
  v34 = *(unsigned int *)(v18 + 12);
  if ((_DWORD)v34)
  {
    v35 = *(uint64_t **)v18;
    v36 = 8 * v34;
    do
    {
      v37 = *v35;
      *v35 = 0;
      if (v37)
        WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v37, v33);
      ++v35;
      v36 -= 8;
    }
    while (v36);
  }
  v38 = *(WTF **)v18;
  if (*(_QWORD *)v18)
  {
    *(_QWORD *)v18 = 0;
    *(_DWORD *)(v18 + 8) = 0;
    WTF::fastFree(v38, v33);
  }
  WTF::fastFree((WTF *)v18, v33);
  v9 = *(_QWORD *)(*((_QWORD *)this + 7) + 16) != 0;
  v40 = v53;
  *(_QWORD *)&v50 = &off_1E33EE8F0;
  v53 = 0;
  if (v40)
    WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v40, v39);
  if (HIDWORD(v52))
  {
    v41 = (uint64_t *)v51[1];
    v42 = 8 * HIDWORD(v52);
    do
    {
      v43 = *v41;
      *v41 = 0;
      if (v43)
        WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v43, v39);
      ++v41;
      v42 -= 8;
    }
    while (v42);
  }
  v44 = v51[1];
  if (v51[1])
  {
    v51[1] = 0;
    LODWORD(v52) = 0;
    WTF::fastFree(v44, v39);
  }
  v45 = v58;
  v58 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v39);
    else
      *(_DWORD *)v45 -= 2;
  }
  v46 = v55;
  v55 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v39);
    else
      *(_DWORD *)v46 -= 2;
  }
  if (*(_DWORD *)v14 == 1)
  {
    WebCore::StyleSheetContents::~StyleSheetContents(v14, v39);
    WTF::fastFree(v47, v48);
  }
  else
  {
    --*(_DWORD *)v14;
  }
  return v9;
}

uint64_t WebCore::InspectorStyleSheet::collectFlatRules(uint64_t *a1, char **a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  char *v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t (**v21)();
  _QWORD *v22;

  result = *a1;
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    if ((_DWORD)result)
    {
      v5 = result;
      v6 = 0;
      do
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, v6);
        if (!result)
          goto LABEL_32;
        v7 = result;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        if (result > 0x18)
          goto LABEL_39;
        if (((1 << result) & 0xBA4FED) != 0)
          goto LABEL_32;
        if (((1 << result) & 0x1451012) == 0)
          goto LABEL_39;
        v8 = *((unsigned int *)a2 + 3);
        if ((_DWORD)v8 == *((_DWORD *)a2 + 2))
        {
          v9 = v8 + (v8 >> 2);
          if (v9 >= 0x10)
            v10 = v9 + 1;
          else
            v10 = 16;
          if (v10 <= v8 + 1)
            v11 = v8 + 1;
          else
            v11 = v10;
          if (v11 >> 29)
          {
LABEL_39:
            __break(0xC471u);
            JUMPOUT(0x195DEC154);
          }
          v12 = *a2;
          v13 = (char *)WTF::fastMalloc((WTF *)(8 * v11));
          *((_DWORD *)a2 + 2) = v11;
          *a2 = v13;
          memcpy(v13, v12, 8 * v8);
          if (v12)
          {
            if (*a2 == v12)
            {
              *a2 = 0;
              *((_DWORD *)a2 + 2) = 0;
            }
            WTF::fastFree((WTF *)v12, v14);
          }
          v8 = *((unsigned int *)a2 + 3);
          v15 = *a2;
          ++*(_DWORD *)(v7 + 8);
          v16 = (uint64_t *)&v15[8 * v8];
        }
        else
        {
          v16 = (uint64_t *)&(*a2)[8 * v8];
          ++*(_DWORD *)(v7 + 8);
        }
        *v16 = v7;
        *((_DWORD *)a2 + 3) = v8 + 1;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7) == 1)
        {
          v18 = (_QWORD **)(v7 + 72);
          v17 = *(_QWORD **)(v7 + 72);
          if (v17)
            goto LABEL_31;
          v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v17 = off_1E3398BE0;
          v17[1] = v7;
          v19 = *(_QWORD *)(v7 + 72);
          *(_QWORD *)(v7 + 72) = v17;
          if (!v19)
            goto LABEL_31;
LABEL_30:
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          v17 = *v18;
          goto LABEL_31;
        }
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7) == 7)
        {
          v18 = (_QWORD **)(v7 + 48);
          v17 = *(_QWORD **)(v7 + 48);
          if (v17)
            goto LABEL_31;
          v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          v17 = v20;
          v21 = off_1E3398698;
        }
        else
        {
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7) & 1) == 0)
          {
            v22 = 0;
            result = WebCore::InspectorStyleSheet::collectFlatRules(&v22, a2);
            goto LABEL_32;
          }
          v18 = (_QWORD **)(v7 + 48);
          v17 = *(_QWORD **)(v7 + 48);
          if (v17)
            goto LABEL_31;
          v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          v17 = v20;
          v21 = off_1E3398468;
        }
        *v20 = v21;
        v20[1] = v7;
        v19 = *(_QWORD *)(v7 + 48);
        *(_QWORD *)(v7 + 48) = v17;
        if (v19)
          goto LABEL_30;
LABEL_31:
        (*(void (**)(_QWORD *))(*v17 + 16))(v17);
        v22 = v17;
        WebCore::InspectorStyleSheet::collectFlatRules(&v22, a2);
        result = (*(uint64_t (**)(_QWORD *))(*v17 + 24))(v17);
LABEL_32:
        v6 = (v6 + 1);
      }
      while (v5 != (_DWORD)v6);
    }
  }
  return result;
}

uint64_t WebCore::InspectorStyleSheetForInlineStyle::InspectorStyleSheetForInlineStyle(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, WebCore::StyledElement **a4, int a5, uint64_t a6)
{
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WebCore::StyledElement *v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::String *v18;
  __n128 v19;
  WTF *v20;
  WTF::StringImpl *v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  uint64_t v25;
  WTF::StringImpl *v26;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E33EE810;
  *(_QWORD *)(a1 + 16) = a2;
  v9 = *a3;
  if (*a3)
    *(_DWORD *)v9 += 2;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = a5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a6;
  v10 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)a1 = off_1E33EE880;
  v12 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 88) = v12;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  v13 = *a3;
  if (v13)
    *(_DWORD *)v13 += 2;
  v14 = WebCore::StyledElement::cssomStyle(v12, v11);
  (*(void (**)(_QWORD *))(*v14 + 16))(v14);
  v15 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v15 = 1;
  if (v13)
    *(_DWORD *)v13 += 2;
  *(_QWORD *)(v15 + 8) = v13;
  *(_DWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = v14;
  *(_QWORD *)(v15 + 32) = a1;
  v20 = *(WTF **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v15;
  if (!v20)
  {
LABEL_10:
    if (!v13)
      goto LABEL_13;
    goto LABEL_11;
  }
  if (*(_DWORD *)v20 != 1)
  {
    --*(_DWORD *)v20;
    goto LABEL_10;
  }
  v25 = *((_QWORD *)v20 + 3);
  *((_QWORD *)v20 + 3) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
  v26 = (WTF::StringImpl *)*((_QWORD *)v20 + 1);
  *((_QWORD *)v20 + 1) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v16);
    else
      *(_DWORD *)v26 -= 2;
  }
  WTF::fastFree(v20, v16);
  if (v13)
  {
LABEL_11:
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v16);
    else
      *(_DWORD *)v13 -= 2;
  }
LABEL_13:
  v22 = *(_DWORD **)WebCore::Element::getAttribute(*(WebCore::Element **)(a1 + 88), (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, v17, v18, v19);
  if (v22)
    *v22 += 2;
  v23 = *(WTF::StringImpl **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v22;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v21);
    else
      *(_DWORD *)v23 -= 2;
  }
  return a1;
}

uint64_t WebCore::InspectorStyleSheetForInlineStyle::didModifyElementAttribute(WebCore::InspectorStyleSheetForInlineStyle *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  _QWORD *v5;
  uint64_t v6;
  WTF *v7;
  int v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  WTF::StringImpl *v12;

  *((_BYTE *)this + 120) = 0;
  if (WebCore::StyledElement::cssomStyle(*((WebCore::StyledElement **)this + 11), a2) == *(_QWORD **)(*((_QWORD *)this + 13) + 24))
    goto LABEL_14;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  if (v4)
    *(_DWORD *)v4 += 4;
  v5 = WebCore::StyledElement::cssomStyle(*((WebCore::StyledElement **)this + 11), v3);
  (*(void (**)(_QWORD *))(*v5 + 16))(v5);
  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v6 = 1;
  if (v4)
    *(_DWORD *)v4 += 2;
  *(_QWORD *)(v6 + 8) = v4;
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = v5;
  *(_QWORD *)(v6 + 32) = this;
  v7 = (WTF *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = v6;
  if (!v7)
  {
LABEL_9:
    if (!v4)
      goto LABEL_14;
    goto LABEL_10;
  }
  if (*(_DWORD *)v7 != 1)
  {
    --*(_DWORD *)v7;
    goto LABEL_9;
  }
  v11 = *((_QWORD *)v7 + 3);
  *((_QWORD *)v7 + 3) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  v12 = (WTF::StringImpl *)*((_QWORD *)v7 + 1);
  *((_QWORD *)v7 + 1) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v3);
    else
      *(_DWORD *)v12 -= 2;
  }
  WTF::fastFree(v7, v3);
  if (v4)
  {
LABEL_10:
    v8 = *(_DWORD *)v4 - 2;
    if (*(_DWORD *)v4 == 2)
    {
      WTF::StringImpl::destroy(v4, v3);
      v8 = *(_DWORD *)v4;
    }
    else
    {
      *(_DWORD *)v4 = v8;
    }
    v9 = v8 - 2;
    if (v9)
      *(_DWORD *)v4 = v9;
    else
      WTF::StringImpl::destroy(v4, v3);
  }
LABEL_14:
  result = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (result)
    return WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(result, v3);
  return result;
}

uint64_t WebCore::InspectorStyleSheetForInlineStyle::text@<X0>(uint64_t this@<X0>, uint64_t a2@<X2>, WTF::String *a3@<X3>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v5;
  WTF::StringImpl *v7;
  _DWORD *v8;
  _DWORD *v9;

  v5 = this;
  if (!*(_BYTE *)(this + 120))
  {
    v8 = *(_DWORD **)WebCore::Element::getAttribute(*(WebCore::Element **)(this + 88), (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, a2, a3, a5);
    if (v8)
      *v8 += 2;
    this = *(_QWORD *)(v5 + 112);
    *(_QWORD *)(v5 + 112) = v8;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v7);
      else
        *(_DWORD *)this -= 2;
    }
    *(_BYTE *)(v5 + 120) = 1;
  }
  v9 = *(_DWORD **)(v5 + 112);
  if (v9)
    *v9 += 2;
  *(_QWORD *)a4 = v9;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t WebCore::InspectorStyleSheetForInlineStyle::setRuleStyleText@<X0>(uint64_t a1@<X0>, WTF::StringImpl *a2@<X1>, WTF::StringImpl **a3@<X2>, WTF::StringImpl **a4@<X3>, _QWORD *a5@<X8>)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  __n128 v12;
  WebCore::Element *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t result;
  uint64_t v21;
  WTF::StringImpl *v22;
  char v23;
  WTF::StringImpl *v24;

  if (a4)
  {
    v8 = *(WTF::StringImpl **)(a1 + 112);
    if (v8)
      *(_DWORD *)v8 += 2;
    v9 = *a4;
    *a4 = v8;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, a2);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  v11 = WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40)
                                                                                               + 8)
                                                                                   + 192));
  *(_BYTE *)(v11 + 180) = 1;
  v13 = *(WebCore::Element **)(a1 + 88);
  v14 = *a3;
  if (*a3)
  {
    if ((*((_BYTE *)v14 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v14 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v14, v10);
      v14 = v24;
    }
  }
  v24 = v14;
  WebCore::Element::setAttribute(v13, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, &v24, 0, &v21, v12);
  if (v23)
  {
    v16 = v22;
    v22 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  v17 = v24;
  v24 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  *(_BYTE *)(v11 + 180) = 0;
  v18 = *a3;
  if (*a3)
    *(_DWORD *)v18 += 2;
  v19 = *(WTF::StringImpl **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v18;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v15);
    else
      *(_DWORD *)v19 -= 2;
  }
  *(_BYTE *)(a1 + 120) = 1;
  result = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (result)
    result = WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(result, v15);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  return result;
}

uint64_t WebCore::InspectorStyleSheetForInlineStyle::lineEndings(WebCore::Element **this, __n128 a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  Inspector::ContentSearchUtilities *Attribute;
  const WTF::String *v6;

  Attribute = (Inspector::ContentSearchUtilities *)WebCore::Element::getAttribute(this[11], (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, a4, a5, a2);
  return Inspector::ContentSearchUtilities::lineEndings(Attribute, v6);
}

uint64_t WebCore::InspectorStyleSheetForInlineStyle::ownerDocument(WebCore::InspectorStyleSheetForInlineStyle *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 8);
}

uint64_t WebCore::InspectorStyleSheetForInlineStyle::ensureParsedDataReady(WebCore::Element **this, __n128 a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  const WTF::StringImpl **Attribute;
  char *v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t result;
  const WebCore::Document *v18;
  uint64_t *v19;
  WTF::StringImpl *v20;
  __int128 v21;
  WTF::StringImpl *v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  _QWORD v37[3];
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  WTF **v41;
  WTF *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  __int128 v45;
  __int128 v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  __int16 v49;

  Attribute = (const WTF::StringImpl **)WebCore::Element::getAttribute(this[11], (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, a4, a5, a2);
  v7 = (char *)(this + 14);
  v9 = WTF::equal(this[14], *Attribute, v8);
  if ((v9 & 1) == 0)
  {
    v11 = (uint64_t)this[12];
    this[12] = 0;
    if (v11)
      WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v11, v10);
    v12 = *Attribute;
    if (*Attribute)
      *(_DWORD *)v12 += 2;
    v9 = *(_QWORD *)v7;
    *(_QWORD *)v7 = v12;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        v9 = WTF::StringImpl::destroy((WTF::StringImpl *)v9, (WTF::StringImpl *)v10);
      else
        *(_DWORD *)v9 -= 2;
    }
    *((_BYTE *)this + 120) = 1;
  }
  if (this[12])
    return 1;
  if (!*(_QWORD *)v7 || !*(_DWORD *)(*(_QWORD *)v7 + 4))
  {
    v13 = WTF::fastMalloc((WTF *)0x48);
    *(_DWORD *)v13 = 1;
    *(_BYTE *)(v13 + 4) = 1;
    *(_OWORD *)(v13 + 8) = 0u;
    *(_OWORD *)(v13 + 24) = 0u;
    v14 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)(v13 + 48) = 0;
    *(_QWORD *)(v13 + 56) = 0;
    *(_QWORD *)(v13 + 40) = v14;
    *(_WORD *)(v13 + 64) = 0;
    *(_QWORD *)(v13 + 16) = 0;
LABEL_13:
    v16 = (uint64_t)this[12];
    this[12] = (WebCore::Element *)v13;
    if (v16)
      WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v16, v15);
    return 1;
  }
  v18 = *(const WebCore::Document **)(*((_QWORD *)this[11] + 5) + 8);
  if (v18)
  {
    WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)&v44, v18);
  }
  else
  {
    v19 = WebCore::strictCSSParserContext((WebCore *)v9);
    v20 = (WTF::StringImpl *)*v19;
    if (*v19)
      *(_DWORD *)v20 += 2;
    v44 = v20;
    v21 = *(_OWORD *)(v19 + 3);
    v45 = *(_OWORD *)(v19 + 1);
    v46 = v21;
    v22 = (WTF::StringImpl *)v19[5];
    if (v22)
      *(_DWORD *)v22 += 2;
    v23 = *((_WORD *)v19 + 28);
    v24 = v19[6];
    v47 = v22;
    v48 = v24;
    v49 = v23;
  }
  v42 = 0;
  v43 = 0;
  v25 = *(_QWORD *)(*((_QWORD *)this[11] + 5) + 8);
  v37[0] = &off_1E33EE8F0;
  v37[1] = this + 14;
  v37[2] = v25;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = &v42;
  result = (uint64_t)WebCore::CSSParserImpl::parseDeclarationListForInspector((uint64_t)(this + 14), (uint64_t)&v44, (uint64_t)v37);
  if (HIDWORD(v43))
  {
    v13 = *(_QWORD *)v42;
    *(_QWORD *)v42 = 0;
    v26 = v40;
    v37[0] = &off_1E33EE8F0;
    v40 = 0;
    if (v26)
      WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v26, v15);
    if (HIDWORD(v39))
    {
      v27 = v38;
      v28 = 8 * HIDWORD(v39);
      do
      {
        v29 = *(_QWORD *)v27;
        *(_QWORD *)v27 = 0;
        if (v29)
          WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v29, v15);
        v27 = (WTF *)((char *)v27 + 8);
        v28 -= 8;
      }
      while (v28);
    }
    v30 = v38;
    if (v38)
    {
      v38 = 0;
      LODWORD(v39) = 0;
      WTF::fastFree(v30, v15);
    }
    if (HIDWORD(v43))
    {
      v31 = v42;
      v32 = 8 * HIDWORD(v43);
      do
      {
        v33 = *(_QWORD *)v31;
        *(_QWORD *)v31 = 0;
        if (v33)
          WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v33, v15);
        v31 = (WTF *)((char *)v31 + 8);
        v32 -= 8;
      }
      while (v32);
    }
    v34 = v42;
    if (v42)
    {
      v42 = 0;
      LODWORD(v43) = 0;
      WTF::fastFree(v34, v15);
    }
    v35 = v47;
    v47 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v15);
      else
        *(_DWORD *)v35 -= 2;
    }
    v36 = v44;
    v44 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v15);
      else
        *(_DWORD *)v36 -= 2;
    }
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::InspectorStyleSheetForInlineStyle::inspectorStyleForId@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(result + 104);
  if (v2)
    ++*v2;
  *a2 = v2;
  return result;
}

void WebCore::InspectorStyleSheetForInlineStyle::~InspectorStyleSheetForInlineStyle(WebCore::InspectorStyleSheetForInlineStyle *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::InspectorStyleSheetForInlineStyle::~InspectorStyleSheetForInlineStyle(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 3);
      *((_QWORD *)v4 + 3) = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      v8 = (WTF::StringImpl *)*((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v5)
    WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(v5, a2);
  v6 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  WebCore::InspectorStyleSheet::~InspectorStyleSheet(this, a2);
}

_QWORD *WebCore::InspectorStyleSheetForInlineStyle::styleForId(WebCore::StyledElement **this, const WebCore::InspectorCSSId *a2)
{
  return WebCore::StyledElement::cssomStyle(this[11], a2);
}

uint64_t WebCore::InspectorStyleSheetForInlineStyle::ruleSourceDataFor@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;

  v3 = *(_DWORD **)(this + 96);
  if (v3)
    ++*v3;
  *a2 = v3;
  return this;
}

{
  _DWORD *v3;

  v3 = *(_DWORD **)(this + 96);
  if (v3)
    ++*v3;
  *a2 = v3;
  return this;
}

uint64_t WebCore::InspectorStyleSheetForInlineStyle::ruleIndexByStyle()
{
  return 0;
}

void WebCore::InspectorOverlayHighlight::Config::~Config(WebCore::InspectorOverlayHighlight::Config *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  WebCore::InspectorOverlayHighlight::Config *v21;
  WebCore::InspectorOverlayHighlight::Config *v22;
  WebCore::InspectorOverlayHighlight::Config *v23;
  WebCore::InspectorOverlayHighlight::Config *v24;

  v2 = *((_QWORD *)this + 4);
  if ((v2 & 0x8000000000000) != 0)
  {
    v21 = this;
    v6 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
      this = v21;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((v3 & 0x8000000000000) != 0)
  {
    v22 = this;
    v9 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
      this = v22;
    }
  }
  v4 = *((_QWORD *)this + 2);
  if ((v4 & 0x8000000000000) != 0)
  {
    v23 = this;
    v12 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
      this = v23;
    }
  }
  v5 = *((_QWORD *)this + 1);
  if ((v5 & 0x8000000000000) != 0)
  {
    v24 = this;
    v15 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, a2);
      this = v24;
    }
  }
  if ((*(_QWORD *)this & 0x8000000000000) != 0)
  {
    v18 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFLL);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, a2);
    }
  }
}

float32x4_t WebCore::contentsQuadToCoordinateSystem(uint64_t a1, WebCore::ScrollView *this, WebCore::FloatPoint *a3, int a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  float32x4_t result;
  int v20;
  float32x4_t v21;
  float32x4_t v22;
  int v23;
  int v24;

  WebCore::ScrollView::contentsToView(this, a3);
  v23 = v8;
  v24 = v9;
  *(float *)a3 = WebCore::Widget::convertToRootView(this, (const WebCore::FloatPoint *)&v23);
  *((_DWORD *)a3 + 1) = v10;
  WebCore::ScrollView::contentsToView(this, (WebCore::FloatPoint *)((char *)a3 + 8));
  v23 = v11;
  v24 = v12;
  *((float *)a3 + 2) = WebCore::Widget::convertToRootView(this, (const WebCore::FloatPoint *)&v23);
  *((_DWORD *)a3 + 3) = v13;
  WebCore::ScrollView::contentsToView(this, (WebCore::FloatPoint *)((char *)a3 + 16));
  v23 = v14;
  v24 = v15;
  *((float *)a3 + 4) = WebCore::Widget::convertToRootView(this, (const WebCore::FloatPoint *)&v23);
  *((_DWORD *)a3 + 5) = v16;
  WebCore::ScrollView::contentsToView(this, (WebCore::FloatPoint *)((char *)a3 + 24));
  v23 = v17;
  v24 = v18;
  result.f32[0] = WebCore::Widget::convertToRootView(this, (const WebCore::FloatPoint *)&v23);
  *((_DWORD *)a3 + 6) = result.i32[0];
  *((_DWORD *)a3 + 7) = v20;
  if (!a4)
  {
    *(float32x2_t *)v21.f32 = vcvt_f32_s32((int32x2_t)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(a1 + 64) + 832))(a1 + 64, 0, 1));
    v21.i64[1] = v21.i64[0];
    v22 = vaddq_f32(*(float32x4_t *)a3, v21);
    result = vaddq_f32(*((float32x4_t *)a3 + 1), v21);
    *(float32x4_t *)a3 = v22;
    *((float32x4_t *)a3 + 1) = result;
  }
  return result;
}

void WebCore::InspectorOverlayHighlight::~InspectorOverlayHighlight(WebCore::InspectorOverlayHighlight *this, void *a2)
{
  uint64_t v3;
  WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WebCore::InspectorOverlayHighlight::GridHighlightOverlay *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;

  v3 = *((unsigned int *)this + 23);
  if ((_DWORD)v3)
  {
    v4 = (WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *)*((_QWORD *)this + 10);
    v5 = 136 * v3;
    do
    {
      WebCore::InspectorOverlayHighlight::FlexHighlightOverlay::~FlexHighlightOverlay(v4, a2);
      v4 = (WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *)(v6 + 136);
      v5 -= 136;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 10);
  if (v7)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((unsigned int *)this + 19);
  if ((_DWORD)v8)
  {
    v9 = (WebCore::InspectorOverlayHighlight::GridHighlightOverlay *)*((_QWORD *)this + 8);
    v10 = 72 * v8;
    do
    {
      WebCore::InspectorOverlayHighlight::GridHighlightOverlay::~GridHighlightOverlay(v9, a2);
      v9 = (WebCore::InspectorOverlayHighlight::GridHighlightOverlay *)(v11 + 72);
      v10 -= 72;
    }
    while (v10);
  }
  v12 = (WTF *)*((_QWORD *)this + 8);
  if (v12)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = (WTF *)*((_QWORD *)this + 6);
  if (v13)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v13, a2);
  }
  v14 = *((_QWORD *)this + 4);
  if ((v14 & 0x8000000000000) != 0)
  {
    v18 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, a2);
    }
  }
  v15 = *((_QWORD *)this + 3);
  if ((v15 & 0x8000000000000) != 0)
  {
    v21 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, a2);
    }
  }
  v16 = *((_QWORD *)this + 2);
  if ((v16 & 0x8000000000000) != 0)
  {
    v24 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v24);
      WTF::fastFree((WTF *)v24, a2);
    }
  }
  v17 = *((_QWORD *)this + 1);
  if ((v17 & 0x8000000000000) != 0)
  {
    v27 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      atomic_store(1u, v27);
      WTF::fastFree((WTF *)v27, a2);
    }
  }
  if ((*(_QWORD *)this & 0x8000000000000) != 0)
  {
    v30 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFLL);
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v30);
      WTF::fastFree((WTF *)v30, a2);
    }
  }
}

uint64_t WebCore::drawOutlinedQuadWithClip(WebCore *this, WebCore::GraphicsContext *a2, const WebCore::FloatQuad *a3, const WebCore::FloatQuad *a4, const WebCore::Color *a5, WebCore::FloatRect *a6)
{
  int v11;
  char v12;
  int v13;
  char v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  void *v28;
  int v29;
  char v30;
  int v31;
  char v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  _BYTE v51[32];
  __int128 v52;
  int v53;
  int v54;
  int v55;
  _BYTE v56[32];
  __int128 v57;
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  (*(void (**)(WebCore *, uint64_t, const WebCore::FloatQuad *, const WebCore::FloatQuad *, const WebCore::Color *, WebCore::FloatRect *))(*(_QWORD *)this + 96))(this, 1, a3, a4, a5, a6);
  WebCore::GraphicsContext::setFillColor(this, a4);
  if (*((float *)this + 47) != 0.0)
    *((_QWORD *)this + 23) = *((_DWORD *)this + 46) | 8u;
  (*(void (**)(WebCore *, char *))(*(_QWORD *)this + 88))(this, (char *)this + 8);
  v55 = 0;
  WebCore::Path::moveTo((WebCore::Path *)&v50, a2);
  WebCore::Path::addLineTo((uint64_t)&v50, (WebCore::GraphicsContext *)((char *)a2 + 8));
  WebCore::Path::addLineTo((uint64_t)&v50, (WebCore::GraphicsContext *)((char *)a2 + 16));
  WebCore::Path::addLineTo((uint64_t)&v50, (WebCore::GraphicsContext *)((char *)a2 + 24));
  v11 = v55;
  if (v55 == 2)
  {
    if (!*(_QWORD *)v51)
      goto LABEL_19;
    v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v51 + 200))(*(_QWORD *)v51);
    v11 = v55;
    if ((v12 & 1) != 0)
      goto LABEL_20;
  }
  else if (!v55)
  {
    goto LABEL_40;
  }
  if (v11 != 2)
  {
    if (v11 == 1)
    {
      v13 = v54;
      if (v54 == 6 || v54 == 15)
        goto LABEL_22;
LABEL_17:
      if (v13 == 5)
      {
        *(_OWORD *)v56 = *(_OWORD *)v51;
        *(_QWORD *)&v56[13] = *(_QWORD *)&v51[13];
        *(_OWORD *)&v51[16] = *(_OWORD *)&v56[16];
        v52 = v57;
        *(_OWORD *)v51 = *(_OWORD *)v56;
        v53 = v58;
        v54 = 6;
        goto LABEL_22;
      }
      goto LABEL_19;
    }
    goto LABEL_19;
  }
  if (!*(_QWORD *)v51)
    goto LABEL_19;
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v51 + 208))(*(_QWORD *)v51);
  v11 = v55;
  if ((v14 & 1) == 0)
  {
    if (v55 == 1)
    {
      v13 = v54;
      goto LABEL_17;
    }
LABEL_19:
    v15 = WebCore::Path::ensureImpl((WebCore::Path *)&v50);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 120))(v15);
    v11 = v55;
  }
LABEL_20:
  if (v11 == 2)
  {
    if (!*(_QWORD *)v51)
      goto LABEL_40;
    (*(void (**)(_QWORD))(**(_QWORD **)v51 + 240))(*(_QWORD *)v51);
    goto LABEL_25;
  }
  if (v11 != 1)
    goto LABEL_40;
LABEL_22:
  v16 = WebCore::PathStream::computeBoundingRect((uint64_t)v51, 1);
LABEL_25:
  if (v18 > 0.0 && v19 > 0.0)
  {
    v20 = *((float *)a5 + 2);
    if (v20 <= 0.0 || (v21 = *((float *)a5 + 3), v21 <= 0.0))
    {
      *(float *)a5 = v16;
      *((float *)a5 + 1) = v17;
      *((float *)a5 + 2) = v18;
      *((float *)a5 + 3) = v19;
    }
    else
    {
      v22 = *((float *)a5 + 1);
      if (v16 >= *(float *)a5)
        v23 = *(float *)a5;
      else
        v23 = v16;
      if (v17 >= v22)
        v24 = *((float *)a5 + 1);
      else
        v24 = v17;
      v25 = v20 + *(float *)a5;
      v26 = v18 + v16;
      if (v25 >= v26)
        v26 = v25;
      v27 = v19 + v17;
      if ((float)(v21 + v22) >= v27)
        v27 = v21 + v22;
      *(float *)a5 = v23;
      *((float *)a5 + 1) = v24;
      *((float *)a5 + 2) = v26 - v23;
      *((float *)a5 + 3) = v27 - v24;
    }
  }
LABEL_40:
  (*(void (**)(WebCore *, uint64_t *))(*(_QWORD *)this + 176))(this, &v50);
  if (v55 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E33EE980[v55])(v56, v51);
  if (*((_BYTE *)this + 194) != 8 || *((_BYTE *)this + 195) != 1)
  {
    *((_WORD *)this + 97) = 264;
    *((_DWORD *)this + 46) |= 0x20u;
  }
  (*(void (**)(WebCore *, char *))(*(_QWORD *)this + 88))(this, (char *)this + 8);
  v50 = 0x11040000FF0000FFLL;
  WebCore::GraphicsContext::setFillColor(this, (const WebCore::Color *)&v50);
  if ((v50 & 0x8000000000000) != 0)
  {
    v47 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFLL);
    do
    {
      v48 = __ldaxr(v47);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v47));
    if (!v49)
    {
      atomic_store(1u, v47);
      WTF::fastFree((WTF *)v47, v28);
    }
  }
  v55 = 0;
  WebCore::Path::moveTo((WebCore::Path *)&v50, a3);
  WebCore::Path::addLineTo((uint64_t)&v50, (const WebCore::FloatQuad *)((char *)a3 + 8));
  WebCore::Path::addLineTo((uint64_t)&v50, (const WebCore::FloatQuad *)((char *)a3 + 16));
  WebCore::Path::addLineTo((uint64_t)&v50, (const WebCore::FloatQuad *)((char *)a3 + 24));
  v29 = v55;
  if (v55 == 2)
  {
    if (!*(_QWORD *)v51)
      goto LABEL_61;
    v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v51 + 200))(*(_QWORD *)v51);
    v29 = v55;
    if ((v30 & 1) != 0)
      goto LABEL_62;
  }
  else if (!v55)
  {
    goto LABEL_82;
  }
  if (v29 != 2)
  {
    if (v29 == 1)
    {
      v31 = v54;
      if (v54 == 6 || v54 == 15)
        goto LABEL_64;
LABEL_59:
      if (v31 == 5)
      {
        *(_OWORD *)v56 = *(_OWORD *)v51;
        *(_QWORD *)&v56[13] = *(_QWORD *)&v51[13];
        *(_OWORD *)&v51[16] = *(_OWORD *)&v56[16];
        v52 = v57;
        *(_OWORD *)v51 = *(_OWORD *)v56;
        v53 = v58;
        v54 = 6;
        goto LABEL_64;
      }
      goto LABEL_61;
    }
    goto LABEL_61;
  }
  if (!*(_QWORD *)v51)
    goto LABEL_61;
  v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v51 + 208))(*(_QWORD *)v51);
  v29 = v55;
  if ((v32 & 1) == 0)
  {
    if (v55 == 1)
    {
      v31 = v54;
      goto LABEL_59;
    }
LABEL_61:
    v33 = WebCore::Path::ensureImpl((WebCore::Path *)&v50);
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 120))(v33);
    v29 = v55;
  }
LABEL_62:
  if (v29 == 2)
  {
    if (!*(_QWORD *)v51)
      goto LABEL_82;
    (*(void (**)(_QWORD))(**(_QWORD **)v51 + 240))(*(_QWORD *)v51);
    goto LABEL_67;
  }
  if (v29 != 1)
    goto LABEL_82;
LABEL_64:
  v34 = WebCore::PathStream::computeBoundingRect((uint64_t)v51, 1);
LABEL_67:
  if (v36 > 0.0 && v37 > 0.0)
  {
    v38 = *((float *)a5 + 2);
    if (v38 <= 0.0 || (v39 = *((float *)a5 + 3), v39 <= 0.0))
    {
      *(float *)a5 = v34;
      *((float *)a5 + 1) = v35;
      *((float *)a5 + 2) = v36;
      *((float *)a5 + 3) = v37;
    }
    else
    {
      v40 = *((float *)a5 + 1);
      if (v34 >= *(float *)a5)
        v41 = *(float *)a5;
      else
        v41 = v34;
      if (v35 >= v40)
        v42 = *((float *)a5 + 1);
      else
        v42 = v35;
      v43 = v38 + *(float *)a5;
      v44 = v36 + v34;
      if (v43 >= v44)
        v44 = v43;
      v45 = v37 + v35;
      if ((float)(v39 + v40) >= v45)
        v45 = v39 + v40;
      *(float *)a5 = v41;
      *((float *)a5 + 1) = v42;
      *((float *)a5 + 2) = v44 - v41;
      *((float *)a5 + 3) = v45 - v42;
    }
  }
LABEL_82:
  (*(void (**)(WebCore *, uint64_t *))(*(_QWORD *)this + 176))(this, &v50);
  if (v55 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E33EE980[v55])(v56, v51);
  return (*(uint64_t (**)(WebCore *, uint64_t))(*(_QWORD *)this + 104))(this, 1);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::drawShapeHighlight(WebCore::GraphicsContext &,WebCore::Node &,WebCore::FloatRect &)::$_0::operator() const(WebCore::Path const&)::{lambda(WebCore::PathElement const&)#1},void,WebCore::PathElement const&>::call(uint64_t result, uint64_t a2)
{
  uint64_t *v3;
  WebCore::ScrollView **v4;
  _QWORD **v5;
  WebCore::Path *v6;
  WebCore::ScrollView *v7;
  uint64_t v8;
  float v9;
  float v10;
  _DWORD *v11;
  unsigned int v12;
  int v13;
  float v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  WTF *v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  WebCore::ScrollView *v25;
  uint64_t v26;
  float v27;
  float v28;
  _DWORD *v29;
  unsigned int v30;
  float v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  WTF *v35;
  int v36;
  int v37;
  int v38;
  WebCore::ScrollView *v39;
  uint64_t v40;
  float v41;
  float v42;
  _DWORD *v43;
  unsigned int v44;
  float v45;
  void *v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  WebCore::ScrollView *v54;
  uint64_t v55;
  float v56;
  float v57;
  _DWORD *v58;
  unsigned int v59;
  float v60;
  void *v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  int v65;
  int v66;
  int v67;
  WebCore::ScrollView *v68;
  uint64_t v69;
  float v70;
  float v71;
  _DWORD *v72;
  unsigned int v73;
  float v74;
  void *v75;
  uint64_t v76;
  WTF *v77;
  WTF *v78;
  int v79;
  int v80;
  int v81;
  WebCore::ScrollView *v82;
  uint64_t v83;
  float v84;
  float v85;
  _DWORD *v86;
  unsigned int v87;
  float v88;
  void *v89;
  uint64_t v90;
  WTF *v91;
  WTF *v92;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  WebCore::ScrollView *v97;
  uint64_t v98;
  float v99;
  float v100;
  _DWORD *v101;
  unsigned int v102;
  int v103;
  float v104;
  void *v105;
  uint64_t v106;
  WTF *v107;
  WTF *v108;
  int v109;
  int v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t v115;
  uint64_t v116;
  int *v117;
  int *v118;
  BOOL v119;
  int *v120;
  int *v121;
  int *v122;
  int *v123;
  int *v124;
  int *v125;
  int *v126;
  _DWORD v127[2];
  float v128;
  int v129;
  uint64_t v130;
  _BYTE v131[48];
  int v132;
  char v133;
  WTF *v134;
  WTF *v135;
  uint64_t v136;
  char v137;
  __int16 v138;
  int v139;
  int v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v4 = *(WebCore::ScrollView ***)(result + 8);
  v3 = *(uint64_t **)(result + 16);
  v5 = *(_QWORD ***)(result + 24);
  switch(*(_BYTE *)a2)
  {
    case 0:
      v6 = *(WebCore::Path **)(result + 32);
      v7 = *v4;
      v8 = *v3;
      v9 = *(float *)(a2 + 4);
      v10 = *(float *)(a2 + 8);
      v11 = (_DWORD *)**v5;
      v12 = v11[31];
      v13 = (unsigned __int16)v12 >> 13;
      switch((unsigned __int16)v12 >> 13)
      {
        case 1:
        case 3:
        case 5:
          v119 = ((v12 >> 13) & 6) - 2 >= 4;
          v120 = v11 + 40;
          v121 = v11 + 41;
          if (!v119)
            v121 = v120;
          v10 = (float)((float)*v121 * 0.015625) - v10;
          goto LABEL_3;
        case 4:
          goto LABEL_81;
        default:
LABEL_3:
          if ((v13 - 2) <= 3)
          {
LABEL_81:
            v14 = v10;
          }
          else
          {
            v14 = *(float *)(a2 + 4);
            v9 = v10;
          }
          *(_QWORD *)v131 = __PAIR64__(LODWORD(v9), LODWORD(v14));
          v133 = 0;
          memset(&v131[8], 0, 33);
          v135 = 0;
          v136 = 0;
          v134 = 0;
          v137 = 0;
          v138 = 1;
          v139 = 0;
          v140 = 0;
          (*(void (**)(uint64_t, _QWORD, _BYTE *, uint64_t, _QWORD))(*(_QWORD *)v8 + 576))(v8, 0, v131, 4, 0);
          WebCore::TransformState::flatten((WebCore::TransformState *)v131, 0);
          v16 = *(_QWORD *)v131;
          v17 = v135;
          v135 = 0;
          if (v17)
            WTF::fastFree(v17, v15);
          v18 = v134;
          v134 = 0;
          if (v18)
            WTF::fastFree(v18, v15);
          v130 = v16;
          WebCore::ScrollView::contentsToView(v7, (const WebCore::FloatPoint *)&v130);
          *(_DWORD *)v131 = v19;
          *(_DWORD *)&v131[4] = v20;
          *(_DWORD *)v131 = WebCore::Widget::convertToRootView(v7, (const WebCore::FloatPoint *)v131);
          *(_DWORD *)&v131[4] = v21;
          result = WebCore::Path::moveTo(v6, (const WebCore::FloatPoint *)v131);
          break;
      }
      return result;
    case 1:
      v96 = *(_QWORD *)(result + 32);
      v97 = *v4;
      v98 = *v3;
      v99 = *(float *)(a2 + 4);
      v100 = *(float *)(a2 + 8);
      v101 = (_DWORD *)**v5;
      v102 = v101[31];
      v103 = (unsigned __int16)v102 >> 13;
      switch((unsigned __int16)v102 >> 13)
      {
        case 1:
        case 3:
        case 5:
          v119 = ((v102 >> 13) & 6) - 2 >= 4;
          v125 = v101 + 40;
          v126 = v101 + 41;
          if (!v119)
            v126 = v125;
          v100 = (float)((float)*v126 * 0.015625) - v100;
          goto LABEL_51;
        case 4:
          goto LABEL_82;
        default:
LABEL_51:
          if ((v103 - 2) <= 3)
          {
LABEL_82:
            v104 = v100;
          }
          else
          {
            v104 = *(float *)(a2 + 4);
            v99 = v100;
          }
          *(_QWORD *)v131 = __PAIR64__(LODWORD(v99), LODWORD(v104));
          v133 = 0;
          memset(&v131[8], 0, 33);
          v135 = 0;
          v136 = 0;
          v134 = 0;
          v137 = 0;
          v138 = 1;
          v139 = 0;
          v140 = 0;
          (*(void (**)(uint64_t, _QWORD, _BYTE *, uint64_t, _QWORD))(*(_QWORD *)v98 + 576))(v98, 0, v131, 4, 0);
          WebCore::TransformState::flatten((WebCore::TransformState *)v131, 0);
          v106 = *(_QWORD *)v131;
          v107 = v135;
          v135 = 0;
          if (v107)
            WTF::fastFree(v107, v105);
          v108 = v134;
          v134 = 0;
          if (v108)
            WTF::fastFree(v108, v105);
          v130 = v106;
          WebCore::ScrollView::contentsToView(v97, (const WebCore::FloatPoint *)&v130);
          *(_DWORD *)v131 = v109;
          *(_DWORD *)&v131[4] = v110;
          *(_DWORD *)v131 = WebCore::Widget::convertToRootView(v97, (const WebCore::FloatPoint *)v131);
          *(_DWORD *)&v131[4] = v111;
          result = WebCore::Path::addLineTo(v96, (const WebCore::FloatPoint *)v131);
          break;
      }
      return result;
    case 2:
      v24 = *(_QWORD *)(result + 32);
      v25 = *v4;
      v26 = *v3;
      v27 = *(float *)(a2 + 4);
      v28 = *(float *)(a2 + 8);
      v29 = (_DWORD *)**v5;
      v30 = v29[31];
      switch((unsigned __int16)v30 >> 13)
      {
        case 1:
        case 3:
        case 5:
          if (((v30 >> 13) & 6) - 2 < 4)
            v117 = v29 + 40;
          else
            v117 = v29 + 41;
          v28 = (float)((float)*v117 * 0.015625) - v28;
          goto LABEL_14;
        case 4:
          goto LABEL_76;
        default:
LABEL_14:
          if (((unsigned __int16)v30 >> 13) - 2 <= 3)
          {
LABEL_76:
            v31 = v28;
          }
          else
          {
            v31 = *(float *)(a2 + 4);
            v27 = v28;
          }
          *(_QWORD *)v131 = __PAIR64__(LODWORD(v27), LODWORD(v31));
          v133 = 0;
          memset(&v131[8], 0, 33);
          v135 = 0;
          v136 = 0;
          v134 = 0;
          v137 = 0;
          v138 = 1;
          v139 = 0;
          v140 = 0;
          (*(void (**)(uint64_t, _QWORD, _BYTE *, uint64_t, _QWORD))(*(_QWORD *)v26 + 576))(v26, 0, v131, 4, 0);
          WebCore::TransformState::flatten((WebCore::TransformState *)v131, 0);
          v33 = *(_QWORD *)v131;
          v34 = v135;
          v135 = 0;
          if (v34)
            WTF::fastFree(v34, v32);
          v35 = v134;
          v134 = 0;
          if (v35)
            WTF::fastFree(v35, v32);
          v130 = v33;
          WebCore::ScrollView::contentsToView(v25, (const WebCore::FloatPoint *)&v130);
          *(_DWORD *)v131 = v36;
          *(_DWORD *)&v131[4] = v37;
          v128 = WebCore::Widget::convertToRootView(v25, (const WebCore::FloatPoint *)v131);
          v129 = v38;
          v39 = *v4;
          v40 = *v3;
          v41 = *(float *)(a2 + 12);
          v42 = *(float *)(a2 + 16);
          v43 = (_DWORD *)**v5;
          v44 = v43[31];
          switch((unsigned __int16)v44 >> 13)
          {
            case 1:
            case 3:
            case 5:
              if (((v44 >> 13) & 6) - 2 < 4)
                v118 = v43 + 40;
              else
                v118 = v43 + 41;
              v42 = (float)((float)*v118 * 0.015625) - v42;
              goto LABEL_21;
            case 4:
              goto LABEL_77;
            default:
LABEL_21:
              if (((unsigned __int16)v44 >> 13) - 2 <= 3)
              {
LABEL_77:
                v45 = v42;
              }
              else
              {
                v45 = *(float *)(a2 + 12);
                v41 = v42;
              }
              *(_QWORD *)v131 = __PAIR64__(LODWORD(v41), LODWORD(v45));
              v133 = 0;
              memset(&v131[8], 0, 33);
              v135 = 0;
              v136 = 0;
              v134 = 0;
              v137 = 0;
              v138 = 1;
              v139 = 0;
              v140 = 0;
              (*(void (**)(uint64_t, _QWORD, _BYTE *, uint64_t, _QWORD))(*(_QWORD *)v40 + 576))(v40, 0, v131, 4, 0);
              WebCore::TransformState::flatten((WebCore::TransformState *)v131, 0);
              v47 = *(_QWORD *)v131;
              v48 = v135;
              v135 = 0;
              if (v48)
                WTF::fastFree(v48, v46);
              v49 = v134;
              v134 = 0;
              if (v49)
                WTF::fastFree(v49, v46);
              v130 = v47;
              WebCore::ScrollView::contentsToView(v39, (const WebCore::FloatPoint *)&v130);
              *(_DWORD *)v131 = v50;
              *(_DWORD *)&v131[4] = v51;
              *(_DWORD *)v131 = WebCore::Widget::convertToRootView(v39, (const WebCore::FloatPoint *)v131);
              *(_DWORD *)&v131[4] = v52;
              result = WebCore::Path::addQuadCurveTo(v24, (const WebCore::FloatPoint *)&v128, (const WebCore::FloatPoint *)v131);
              break;
          }
          break;
      }
      return result;
    case 3:
      v53 = *(_QWORD *)(result + 32);
      v54 = *v4;
      v55 = *v3;
      v56 = *(float *)(a2 + 4);
      v57 = *(float *)(a2 + 8);
      v58 = (_DWORD *)**v5;
      v59 = v58[31];
      switch((unsigned __int16)v59 >> 13)
      {
        case 1:
        case 3:
        case 5:
          if (((v59 >> 13) & 6) - 2 < 4)
            v122 = v58 + 40;
          else
            v122 = v58 + 41;
          v57 = (float)((float)*v122 * 0.015625) - v57;
          goto LABEL_29;
        case 4:
          goto LABEL_78;
        default:
LABEL_29:
          if (((unsigned __int16)v59 >> 13) - 2 <= 3)
          {
LABEL_78:
            v60 = v57;
          }
          else
          {
            v60 = *(float *)(a2 + 4);
            v56 = v57;
          }
          *(_QWORD *)v131 = __PAIR64__(LODWORD(v56), LODWORD(v60));
          v133 = 0;
          memset(&v131[8], 0, 33);
          v135 = 0;
          v136 = 0;
          v134 = 0;
          v137 = 0;
          v138 = 1;
          v139 = 0;
          v140 = 0;
          (*(void (**)(uint64_t, _QWORD, _BYTE *, uint64_t, _QWORD))(*(_QWORD *)v55 + 576))(v55, 0, v131, 4, 0);
          WebCore::TransformState::flatten((WebCore::TransformState *)v131, 0);
          v62 = *(_QWORD *)v131;
          v63 = v135;
          v135 = 0;
          if (v63)
            WTF::fastFree(v63, v61);
          v64 = v134;
          v134 = 0;
          if (v64)
            WTF::fastFree(v64, v61);
          v130 = v62;
          WebCore::ScrollView::contentsToView(v54, (const WebCore::FloatPoint *)&v130);
          *(_DWORD *)v131 = v65;
          *(_DWORD *)&v131[4] = v66;
          v128 = WebCore::Widget::convertToRootView(v54, (const WebCore::FloatPoint *)v131);
          v129 = v67;
          v68 = *v4;
          v69 = *v3;
          v70 = *(float *)(a2 + 12);
          v71 = *(float *)(a2 + 16);
          v72 = (_DWORD *)**v5;
          v73 = v72[31];
          switch((unsigned __int16)v73 >> 13)
          {
            case 1:
            case 3:
            case 5:
              if (((v73 >> 13) & 6) - 2 < 4)
                v123 = v72 + 40;
              else
                v123 = v72 + 41;
              v71 = (float)((float)*v123 * 0.015625) - v71;
              goto LABEL_36;
            case 4:
              goto LABEL_79;
            default:
LABEL_36:
              if (((unsigned __int16)v73 >> 13) - 2 <= 3)
              {
LABEL_79:
                v74 = v71;
              }
              else
              {
                v74 = *(float *)(a2 + 12);
                v70 = v71;
              }
              *(_QWORD *)v131 = __PAIR64__(LODWORD(v70), LODWORD(v74));
              v133 = 0;
              memset(&v131[8], 0, 33);
              v135 = 0;
              v136 = 0;
              v134 = 0;
              v137 = 0;
              v138 = 1;
              v139 = 0;
              v140 = 0;
              (*(void (**)(uint64_t, _QWORD, _BYTE *, uint64_t, _QWORD))(*(_QWORD *)v69 + 576))(v69, 0, v131, 4, 0);
              WebCore::TransformState::flatten((WebCore::TransformState *)v131, 0);
              v76 = *(_QWORD *)v131;
              v77 = v135;
              v135 = 0;
              if (v77)
                WTF::fastFree(v77, v75);
              v78 = v134;
              v134 = 0;
              if (v78)
                WTF::fastFree(v78, v75);
              v130 = v76;
              WebCore::ScrollView::contentsToView(v68, (const WebCore::FloatPoint *)&v130);
              *(_DWORD *)v131 = v79;
              *(_DWORD *)&v131[4] = v80;
              v127[0] = WebCore::Widget::convertToRootView(v68, (const WebCore::FloatPoint *)v131);
              v127[1] = v81;
              v82 = *v4;
              v83 = *v3;
              v84 = *(float *)(a2 + 20);
              v85 = *(float *)(a2 + 24);
              v86 = (_DWORD *)**v5;
              v87 = v86[31];
              switch((unsigned __int16)v87 >> 13)
              {
                case 1:
                case 3:
                case 5:
                  if (((v87 >> 13) & 6) - 2 < 4)
                    v124 = v86 + 40;
                  else
                    v124 = v86 + 41;
                  v85 = (float)((float)*v124 * 0.015625) - v85;
                  goto LABEL_43;
                case 4:
                  goto LABEL_80;
                default:
LABEL_43:
                  if (((unsigned __int16)v87 >> 13) - 2 <= 3)
                  {
LABEL_80:
                    v88 = v85;
                  }
                  else
                  {
                    v88 = *(float *)(a2 + 20);
                    v84 = v85;
                  }
                  *(_QWORD *)v131 = __PAIR64__(LODWORD(v84), LODWORD(v88));
                  v133 = 0;
                  memset(&v131[8], 0, 33);
                  v135 = 0;
                  v136 = 0;
                  v134 = 0;
                  v137 = 0;
                  v138 = 1;
                  v139 = 0;
                  v140 = 0;
                  (*(void (**)(uint64_t, _QWORD, _BYTE *, uint64_t, _QWORD))(*(_QWORD *)v83 + 576))(v83, 0, v131, 4, 0);
                  WebCore::TransformState::flatten((WebCore::TransformState *)v131, 0);
                  v90 = *(_QWORD *)v131;
                  v91 = v135;
                  v135 = 0;
                  if (v91)
                    WTF::fastFree(v91, v89);
                  v92 = v134;
                  v134 = 0;
                  if (v92)
                    WTF::fastFree(v92, v89);
                  v130 = v90;
                  WebCore::ScrollView::contentsToView(v82, (const WebCore::FloatPoint *)&v130);
                  *(_DWORD *)v131 = v93;
                  *(_DWORD *)&v131[4] = v94;
                  *(_DWORD *)v131 = WebCore::Widget::convertToRootView(v82, (const WebCore::FloatPoint *)v131);
                  *(_DWORD *)&v131[4] = v95;
                  result = WebCore::Path::addBezierCurveTo(v53, (const WebCore::FloatPoint *)&v128, (const WebCore::FloatPoint *)v127, (const WebCore::FloatPoint *)v131);
                  break;
              }
              break;
          }
          break;
      }
      return result;
    case 4:
      v22 = *(_QWORD *)(result + 32);
      v23 = *(_DWORD *)(v22 + 64);
      if (v23 == 2)
      {
        v112 = *(_QWORD *)(v22 + 8);
        if (!v112)
          goto LABEL_75;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v112 + 200))(v112);
        if ((result & 1) != 0)
          return result;
        v23 = *(_DWORD *)(v22 + 64);
      }
      else if (!v23)
      {
        return result;
      }
      if (v23 == 2)
      {
        v115 = *(_QWORD *)(v22 + 8);
        if (v115)
        {
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v115 + 208))(v115);
          if ((result & 1) != 0)
            return result;
          if (*(_DWORD *)(v22 + 64) == 1)
          {
            v113 = *(_DWORD *)(v22 + 60);
            goto LABEL_73;
          }
        }
LABEL_75:
        v116 = WebCore::Path::ensureImpl((WebCore::Path *)v22);
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v116 + 120))(v116);
      }
      if (v23 != 1)
        goto LABEL_75;
      v113 = *(_DWORD *)(v22 + 60);
      if (v113 != 6 && v113 != 15)
      {
LABEL_73:
        if (v113 == 5)
        {
          *(_OWORD *)v131 = *(_OWORD *)(v22 + 8);
          *(_QWORD *)&v131[13] = *(_QWORD *)(v22 + 21);
          *(_OWORD *)(v22 + 40) = *(_OWORD *)&v131[32];
          *(_DWORD *)(v22 + 56) = v132;
          *(_DWORD *)(v22 + 60) = 6;
          *(_OWORD *)(v22 + 8) = *(_OWORD *)v131;
          *(_OWORD *)(v22 + 24) = *(_OWORD *)&v131[16];
          return result;
        }
        goto LABEL_75;
      }
      return result;
    default:
      return result;
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS9_8PathImplEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJS8_SA_SE_EEEOST_EEEDcSL_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 56);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E33EE980[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 56) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS9_8PathImplEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJS8_SA_SE_EEEOST_EEEDcSL_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 56);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      result = *(__n128 *)a3;
      v7 = *(_OWORD *)(a3 + 16);
      v8 = *(_OWORD *)(a3 + 32);
      *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 16) = v7;
      *(_OWORD *)(a2 + 32) = v8;
      *(__n128 *)a2 = result;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E33EE980[v5])(&v11, v4);
  }
  *(_DWORD *)(v4 + 56) = -1;
  result = *(__n128 *)a3;
  v9 = *(_OWORD *)(a3 + 16);
  v10 = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(a3 + 48);
  *(_OWORD *)(v4 + 16) = v9;
  *(_OWORD *)(v4 + 32) = v10;
  *(__n128 *)v4 = result;
  *(_DWORD *)(v4 + 56) = 1;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS9_8PathImplEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJS8_SA_SE_EEEOST_EEEDcSL_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 56);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 2)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))off_1E33EE980[v5])(&v11, v4);
LABEL_9:
    v10 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v10;
    *(_DWORD *)(v4 + 56) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    v7 = result + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebCore::drawLayoutPattern(uint64_t a1, float *a2, int a3, int a4)
{
  int v8;
  int v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v27;
  float v29;
  float v30;
  float v31;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  unint64_t v47;
  float v48;
  float v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  unint64_t v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  _BYTE v108[8];
  _BYTE v109[32];
  __int128 v110;
  int v111;
  int v112;
  int v113;
  _BYTE v114[32];
  __int128 v115;
  int v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, 1);
  v113 = 0;
  WebCore::Path::moveTo((WebCore::Path *)v108, (const WebCore::FloatPoint *)a2);
  WebCore::Path::addLineTo((uint64_t)v108, (const WebCore::FloatPoint *)(a2 + 2));
  WebCore::Path::addLineTo((uint64_t)v108, (const WebCore::FloatPoint *)(a2 + 4));
  WebCore::Path::addLineTo((uint64_t)v108, (const WebCore::FloatPoint *)(a2 + 6));
  v8 = v113;
  if (v113 == 2)
  {
    if (!*(_QWORD *)v109)
      goto LABEL_18;
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)v109 + 200))(*(_QWORD *)v109) & 1) != 0)
      goto LABEL_19;
    v8 = v113;
  }
  else if (!v113)
  {
    goto LABEL_19;
  }
  if (v8 == 2)
  {
    if (*(_QWORD *)v109)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)v109 + 208))(*(_QWORD *)v109) & 1) != 0)
        goto LABEL_19;
      if (v113 == 1)
      {
        v9 = v112;
        goto LABEL_16;
      }
    }
LABEL_18:
    v10 = WebCore::Path::ensureImpl((WebCore::Path *)v108);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 120))(v10);
    goto LABEL_19;
  }
  if (v8 != 1)
    goto LABEL_18;
  v9 = v112;
  if (v112 != 6 && v112 != 15)
  {
LABEL_16:
    if (v9 == 5)
    {
      *(_OWORD *)v114 = *(_OWORD *)v109;
      *(_QWORD *)&v114[13] = *(_QWORD *)&v109[13];
      *(_OWORD *)&v109[16] = *(_OWORD *)&v114[16];
      v110 = v115;
      *(_OWORD *)v109 = *(_OWORD *)v114;
      v111 = v116;
      v112 = 6;
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_19:
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 496))(a1, v108, 1);
  if (v113 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E33EE980[v113])(v114, v109);
  v113 = 0;
  v11 = *a2;
  v12 = a2[2];
  v13 = a2[4];
  v14 = a2[6];
  if (v14 >= v13)
    v15 = a2[4];
  else
    v15 = a2[6];
  if (v12 >= v11)
    v16 = *a2;
  else
    v16 = a2[2];
  if (v15 >= v16)
    v15 = v16;
  v17 = fabsf(v15);
  if (v17 == INFINITY || v17 > 2147500000.0)
    v15 = (float)((SLODWORD(v15) >> 31) ^ 0x7FFFFFFF);
  v19 = a2[1];
  v20 = a2[3];
  v21 = a2[5];
  v22 = a2[7];
  if (v22 >= v21)
    v23 = a2[5];
  else
    v23 = a2[7];
  if (v20 >= v19)
    v24 = a2[1];
  else
    v24 = a2[3];
  if (v23 >= v24)
    v23 = v24;
  v25 = fabsf(v23);
  if (v25 == INFINITY || v25 > 2147500000.0)
    v23 = (float)((SLODWORD(v23) >> 31) ^ 0x7FFFFFFF);
  if (v11 < v12)
    v11 = a2[2];
  if (v13 < v14)
    v13 = a2[6];
  if (v11 < v13)
    v11 = v13;
  v27 = fabsf(v11);
  if (v27 == INFINITY || v27 > 2147500000.0)
    v11 = (float)((SLODWORD(v11) >> 31) ^ 0x7FFFFFFF);
  if (v19 >= v20)
    v29 = a2[1];
  else
    v29 = a2[3];
  if (v21 >= v22)
    v30 = a2[5];
  else
    v30 = a2[7];
  if (v29 < v30)
    v29 = v30;
  v31 = fabsf(v29);
  if (v31 == INFINITY || v31 > 2147500000.0)
    v29 = (float)((SLODWORD(v29) >> 31) ^ 0x7FFFFFFF);
  v33 = v11 - v15;
  v34 = v29 - v23;
  v35 = floorf(v15);
  v36 = 2147500000.0;
  v37 = -2147500000.0;
  if (v35 > -2147500000.0)
    v37 = (float)(int)v35;
  if (v35 < 2147500000.0)
    v38 = v37;
  else
    v38 = 2147500000.0;
  v39 = floorf(v23);
  if (v39 < 2147500000.0)
  {
    v36 = -2147500000.0;
    if (v39 > -2147500000.0)
      v36 = (float)(int)v39;
  }
  v40 = v23 + v34;
  v41 = ceilf(v15 + v33);
  v42 = 2147500000.0;
  if (v41 < 2147500000.0)
  {
    v42 = -2147500000.0;
    if (v41 > -2147500000.0)
      v42 = (float)(int)v41;
  }
  v43 = ceilf(v40);
  v44 = -2147500000.0;
  if (v43 > -2147500000.0)
    v44 = (float)(int)v43;
  if (v43 < 2147500000.0)
    v45 = v44;
  else
    v45 = 2147500000.0;
  if (v38 >= 2147500000.0)
  {
    v46 = 0x7FFFFFFFLL;
  }
  else if (v38 <= -2147500000.0)
  {
    v46 = 0x80000000;
  }
  else
  {
    v46 = (int)v38;
  }
  if (v36 >= 2147500000.0)
  {
    v47 = 0x7FFFFFFF00000000;
  }
  else if (v36 <= -2147500000.0)
  {
    v47 = 0x8000000000000000;
  }
  else
  {
    v47 = (unint64_t)(int)v36 << 32;
  }
  v48 = v42 - v38;
  v49 = v45 - v36;
  if (v48 >= 2147500000.0)
  {
    v50 = 0x7FFFFFFF;
  }
  else if (v48 <= -2147500000.0)
  {
    v50 = 0x80000000;
  }
  else
  {
    v50 = (int)v48;
  }
  if (v49 >= 2147500000.0)
  {
    v51 = 0x7FFFFFFF00000000;
  }
  else if (v49 <= -2147500000.0)
  {
    v51 = 0x8000000000000000;
  }
  else
  {
    v51 = (unint64_t)(int)v49 << 32;
  }
  v52 = v47 | v46;
  v53 = HIDWORD(v47);
  v54 = (float)(int)v46;
  v55 = (float)(int)v53;
  v56 = (float)(v50 + v46);
  v57 = v55 - v55;
  v58 = (float)(v54 - v56) * (float)(v54 - v56);
  v59 = (float)(v56 - (float)(int)v46) * (float)(v56 - (float)(int)v46);
  if (a4)
    v60 = (float)(v56 - (float)(int)v46) * (float)(v56 - (float)(int)v46);
  else
    v60 = (float)(v54 - v56) * (float)(v54 - v56);
  if (a4)
    v61 = (float)(v50 + v46);
  else
    v61 = (float)(int)v46;
  if (a4)
    v62 = (float)(int)v46;
  else
    v62 = (float)(v50 + v46);
  v63 = sqrtf((float)(v57 * v57) + v60);
  v64 = (v51 + v52) >> 32;
  v65 = v54 - v54;
  if (a4)
    v66 = (float)((float)(int)v64 - v55) * (float)((float)(int)v64 - v55);
  else
    v66 = (float)(v55 - (float)(int)v64) * (float)(v55 - (float)(int)v64);
  if (a4)
    v67 = (float)(int)v64;
  else
    v67 = (float)(int)v53;
  if (a4)
    v68 = (float)(int)v53;
  else
    v68 = (float)(int)v64;
  v69 = sqrtf((float)(v65 * v65) + v66);
  if (v63 <= v69)
  {
    if (a4)
      v82 = (float)((float)(int)v64 - v55) * (float)((float)(int)v64 - v55);
    else
      v82 = (float)(v55 - (float)(int)v64) * (float)(v55 - (float)(int)v64);
    if (a4)
      v83 = (float)(int)v64;
    else
      v83 = (float)(int)v53;
    v84 = -v63;
    if (v69 > (float)-v63)
    {
      v85 = sqrtf((float)((float)(v56 - v56) * (float)(v56 - v56)) + v82);
      if (a4)
        v86 = (float)(int)v53;
      else
        v86 = (float)(int)v64;
      v105 = (float)a3;
      v107 = v67;
      v87 = v67 - v68;
      v103 = v87;
      if (v85 == 0.0)
      {
        v95 = v83;
        if (v69 == 0.0)
        {
          do
          {
            *(float *)v114 = v54;
            *(float *)&v114[4] = v67;
            WebCore::Path::moveTo((WebCore::Path *)v108, (const WebCore::FloatPoint *)v114);
            *(float *)v114 = v56;
            *(float *)&v114[4] = v95;
            WebCore::Path::addLineTo((uint64_t)v108, (const WebCore::FloatPoint *)v114);
            v67 = v107;
            v84 = v84 + v105;
          }
          while (v84 < v69);
        }
        else
        {
          do
          {
            v96 = (float)-v84 / v69;
            *(float *)v114 = v54 + (float)(v96 * v65);
            *(float *)&v114[4] = v67 + (float)(v96 * v87);
            WebCore::Path::moveTo((WebCore::Path *)v108, (const WebCore::FloatPoint *)v114);
            *(float *)v114 = v56;
            *(float *)&v114[4] = v95;
            WebCore::Path::addLineTo((uint64_t)v108, (const WebCore::FloatPoint *)v114);
            v87 = v103;
            v65 = v54 - v54;
            v67 = v107;
            v84 = v84 + v105;
          }
          while (v84 < v69);
        }
      }
      else
      {
        v88 = v85;
        v89 = v83 - v86;
        v101 = v83;
        if (v69 == 0.0)
        {
          v97 = v89;
          do
          {
            *(float *)v114 = v54;
            *(float *)&v114[4] = v67;
            WebCore::Path::moveTo((WebCore::Path *)v108, (const WebCore::FloatPoint *)v114);
            v98 = (float)-(float)(v63 + v84) / v88;
            *(float *)v114 = v56 + (float)(v98 * (float)(v56 - v56));
            *(float *)&v114[4] = v101 + (float)(v98 * v97);
            WebCore::Path::addLineTo((uint64_t)v108, (const WebCore::FloatPoint *)v114);
            v67 = v107;
            v84 = v84 + v105;
          }
          while (v84 < v69);
        }
        else
        {
          v90 = v89;
          do
          {
            v91 = (float)-v84 / v69;
            *(float *)v114 = v54 + (float)(v91 * v65);
            *(float *)&v114[4] = v67 + (float)(v91 * v87);
            WebCore::Path::moveTo((WebCore::Path *)v108, (const WebCore::FloatPoint *)v114);
            v92 = (float)-(float)(v63 + v84) / v88;
            *(float *)v114 = v56 + (float)(v92 * (float)(v56 - v56));
            *(float *)&v114[4] = v101 + (float)(v92 * v90);
            WebCore::Path::addLineTo((uint64_t)v108, (const WebCore::FloatPoint *)v114);
            v87 = v103;
            v65 = v54 - v54;
            v67 = v107;
            v84 = v84 + v105;
          }
          while (v84 < v69);
        }
      }
    }
  }
  else
  {
    if (a4)
    {
      v58 = v59;
      v70 = v56;
    }
    else
    {
      v70 = v54;
    }
    v71 = -v69;
    if (v63 > (float)-v69)
    {
      v72 = (float)(int)v64 - (float)(int)v64;
      v73 = v56;
      v74 = sqrtf(v58 + (float)(v72 * v72));
      if (a4)
        v75 = v54;
      else
        v75 = v73;
      v106 = (float)a3;
      v76 = v61 - v62;
      v104 = v61 - v62;
      v77 = (float)(int)v64;
      if (v74 == 0.0)
      {
        v93 = v70;
        if (v63 == 0.0)
        {
          do
          {
            *(float *)v114 = v61;
            *(float *)&v114[4] = v55;
            WebCore::Path::moveTo((WebCore::Path *)v108, (const WebCore::FloatPoint *)v114);
            *(float *)v114 = v93;
            *(float *)&v114[4] = v77;
            WebCore::Path::addLineTo((uint64_t)v108, (const WebCore::FloatPoint *)v114);
            v71 = v71 + v106;
          }
          while (v71 < v63);
        }
        else
        {
          do
          {
            v94 = (float)-v71 / v63;
            *(float *)v114 = v61 + (float)(v94 * v76);
            *(float *)&v114[4] = v55 + (float)(v94 * v57);
            WebCore::Path::moveTo((WebCore::Path *)v108, (const WebCore::FloatPoint *)v114);
            *(float *)v114 = v93;
            *(float *)&v114[4] = v77;
            WebCore::Path::addLineTo((uint64_t)v108, (const WebCore::FloatPoint *)v114);
            v76 = v104;
            v57 = v55 - v55;
            v71 = v71 + v106;
          }
          while (v71 < v63);
        }
      }
      else
      {
        v100 = v70 - v75;
        v102 = v70;
        do
        {
          v78 = (float)-v71 / v63;
          v79 = v61 + (float)(v78 * v76);
          v80 = v55 + (float)(v78 * v57);
          if (v63 == 0.0)
          {
            v79 = v61;
            v80 = v55;
          }
          *(float *)v114 = v79;
          *(float *)&v114[4] = v80;
          WebCore::Path::moveTo((WebCore::Path *)v108, (const WebCore::FloatPoint *)v114);
          v81 = (float)-(float)(v69 + v71) / v74;
          *(float *)v114 = v102 + (float)(v81 * v100);
          *(float *)&v114[4] = v77 + (float)(v81 * v72);
          WebCore::Path::addLineTo((uint64_t)v108, (const WebCore::FloatPoint *)v114);
          v76 = v104;
          v57 = v55 - v55;
          v71 = v71 + v106;
        }
        while (v71 < v63);
      }
    }
  }
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 184))(a1, v108);
  if (v113 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E33EE980[v113])(v114, v109);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, 1);
}

uint64_t *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::HashTable(uint64_t *a1, uint64_t *a2)
{
  _DWORD *v3;
  int v4;
  unsigned int v7;
  uint64_t Table;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int *v17;
  int v18;

  *a1 = 0;
  v3 = (_DWORD *)*a2;
  if (*a2)
  {
    v4 = *(v3 - 3);
    if (v4)
    {
      v7 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(*(v3 - 3));
      Table = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::allocateTable(v7);
      *a1 = Table;
      *(_DWORD *)(Table - 4) = v7;
      *(_DWORD *)(*a1 - 8) = v7 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      v9 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::begin((_DWORD **)a2);
      v10 = v9;
      v11 = a2;
      v13 = v12;
      v14 = *v11;
      v15 = v14 ? v14 + 24 * *(unsigned int *)(v14 - 4) : 0;
      if ((_DWORD *)v15 != v9)
      {
        do
        {
          v16 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>(a1, v10);
          v17 = v10 + 2;
          v18 = *v10;
          v10 += 6;
          *v16 = v18;
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v16 + 2, v17);
          while (v10 != v13)
          {
            if (*v10 < 0xFFFFFFFE)
              goto LABEL_12;
            v10 += 6;
          }
          v10 = v13;
LABEL_12:
          ;
        }
        while (v10 != (_DWORD *)v15);
      }
    }
  }
  return a1;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;

  v2 = WTF::fastMalloc((WTF *)(24 * a1 + 16));
  result = v2 + 16;
  if (a1)
  {
    v4 = a1;
    v5 = (_QWORD *)(v2 + 24);
    do
    {
      *((_DWORD *)v5 - 2) = -1;
      *v5 = 0;
      v5[1] = 0;
      v5 += 3;
      --v4;
    }
    while (v4);
  }
  return result;
}

_DWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::begin(_DWORD **a1)
{
  _DWORD *result;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *(result - 1);
  v3 = &result[6 * v2];
  if (!*(result - 3))
    return &result[6 * v2];
  if ((_DWORD)v2)
  {
    v4 = 24 * v2;
    while (*result >= 0xFFFFFFFE)
    {
      result += 6;
      v4 -= 24;
      if (!v4)
        return v3;
    }
  }
  return result;
}

_DWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  _DWORD *result;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = 0;
  v5 = 9 * ((*a2 + ~(*a2 << 15)) ^ ((*a2 + ~(*a2 << 15)) >> 10));
  v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  v7 = v6 ^ HIWORD(v6);
  do
  {
    v8 = v7 & v3;
    result = (_DWORD *)(v2 + 24 * v8);
    v7 = ++v4 + v8;
  }
  while (*result != -1);
  return result;
}

unsigned int *WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(unsigned int *result, uint64_t *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int *v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  char v28;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (unsigned int *)(v8 + 24 * v14);
  v16 = *v15;
  if (*v15 != -1)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v21 = 0;
        else
          v21 = *(_DWORD *)(v8 - 4);
        v28 = 0;
        v27 = v8 + 24 * v21;
        goto LABEL_31;
      }
      if (v16 == -2)
        v17 = v15;
      v14 = (v14 + v18) & v10;
      v15 = (unsigned int *)(v8 + 24 * v14);
      v16 = *v15;
      ++v18;
    }
    while (*v15 != -1);
    if (v17)
    {
      *v17 = -1;
      *((_QWORD *)v17 + 1) = 0;
      *((_QWORD *)v17 + 2) = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v15 = v17;
    }
  }
  *v15 = v11;
  result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v15 + 2, a4);
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
      goto LABEL_32;
  }
  else if (3 * v25 <= 4 * v24)
  {
    if (!(_DWORD)v25)
    {
      v26 = 8;
      goto LABEL_24;
    }
LABEL_32:
    v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
LABEL_24:
    result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a2, v26, (WebCore::ContentRuleListResults::Result *)v15);
    v15 = result;
    v22 = *a2;
    if (*a2)
      LODWORD(v25) = *(_DWORD *)(v22 - 4);
    else
      LODWORD(v25) = 0;
  }
  v27 = v22 + 24 * v25;
  v28 = 1;
LABEL_31:
  *(_QWORD *)v7 = v15;
  *((_QWORD *)v7 + 1) = v27;
  *((_BYTE *)v7 + 16) = v28;
  return result;
}

_DWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, WebCore::ContentRuleListResults::Result *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  _QWORD *v12;
  _DWORD *v13;
  _DWORD *result;
  WebCore::ContentRuleListResults::Result *v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  uint64_t v18;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_QWORD *)(v9 + 24);
    do
    {
      *((_DWORD *)v12 - 2) = -1;
      *v12 = 0;
      v12[1] = 0;
      v12 += 3;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v15 = (WebCore::ContentRuleListResults::Result *)v6;
    do
    {
      if (*(_DWORD *)v15 != -2)
      {
        if (*(_DWORD *)v15 == -1)
        {
          WebCore::ContentRuleListResults::Result::~Result(v15, v10);
        }
        else
        {
          v18 = v6;
          v16 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::reinsert(a1, (uint64_t)v15);
          WebCore::ContentRuleListResults::Result::~Result(v15, v17);
          if (v15 == a3)
            v13 = v16;
          v6 = v18;
        }
      }
      v15 = (WebCore::ContentRuleListResults::Result *)((char *)v15 + 24);
      --v7;
    }
    while (v7);
    goto LABEL_18;
  }
  result = 0;
  if (v6)
  {
LABEL_18:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

_DWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::reinsert(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unsigned int v14;
  WTF::StringImpl ***v15;
  WTF *v16;
  WTF::StringImpl **v17;
  WTF::StringImpl **v19;
  uint64_t v20;
  WTF::StringImpl *v21;

  v3 = *a1;
  if (*a1)
    v4 = *(_DWORD *)(v3 - 8);
  else
    v4 = 0;
  v5 = 0;
  v6 = 9 * ((*(_DWORD *)a2 + ~(*(_DWORD *)a2 << 15)) ^ ((*(_DWORD *)a2 + ~(*(_DWORD *)a2 << 15)) >> 10));
  v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
  v8 = v7 ^ HIWORD(v7);
  do
  {
    v9 = v8 & v4;
    v10 = (_DWORD *)(v3 + 24 * (v8 & v4));
    v8 = ++v5 + (v8 & v4);
  }
  while (*v10 != -1);
  v11 = v3 + 24 * v9;
  v14 = *(_DWORD *)(v11 + 20);
  v13 = (_DWORD *)(v11 + 20);
  v12 = v14;
  v15 = (WTF::StringImpl ***)(v13 - 3);
  if (v14)
  {
    v19 = *v15;
    v20 = 8 * v12;
    do
    {
      v21 = *v19;
      *v19 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v21 -= 2;
      }
      ++v19;
      v20 -= 8;
    }
    while (v20);
  }
  v16 = (WTF *)*v15;
  if (*v15)
  {
    *v15 = 0;
    *(_DWORD *)(v3 + 24 * v9 + 16) = 0;
    WTF::fastFree(v16, (void *)a2);
  }
  *v10 = *(_DWORD *)a2;
  *v15 = 0;
  *(_QWORD *)(v13 - 1) = 0;
  v17 = *(WTF::StringImpl ***)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *v15 = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(v3 + 24 * v9 + 16) = (_DWORD)v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *v13 = (_DWORD)v17;
  return v10;
}

uint64_t WebCore::InspectorOverlayHighlight::GridHighlightOverlay::GridHighlightOverlay(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int *v31;
  unsigned int v32;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x8000000000000) != 0)
  {
    v31 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 + 1, v31));
  }
  v5 = *((unsigned int *)a2 + 5);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = v5;
  if ((_DWORD)v5)
  {
    if (v5 >= 0xCCCCCCD)
      goto LABEL_29;
    v6 = 20 * v5;
    v7 = WTF::fastMalloc((WTF *)(20 * v5));
    *(_DWORD *)(a1 + 16) = (v6 & 0xFFFFFFFC) / 0x14;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = *((unsigned int *)a2 + 5);
    if ((_DWORD)v8)
    {
      v9 = (__int128 *)a2[1];
      v10 = 20 * v8;
      do
      {
        v11 = *v9;
        *(_DWORD *)(v7 + 16) = *((_DWORD *)v9 + 4);
        *(_OWORD *)v7 = v11;
        v7 += 20;
        v9 = (__int128 *)((char *)v9 + 20);
        v10 -= 20;
      }
      while (v10);
    }
  }
  v12 = *((unsigned int *)a2 + 9);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = v12;
  if ((_DWORD)v12)
  {
    if (v12 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x195DEF0ACLL);
    }
    v13 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v12));
    *(_DWORD *)(a1 + 32) = v12;
    *(_QWORD *)(a1 + 24) = v13;
    v14 = *((unsigned int *)a2 + 9);
    if ((_DWORD)v14)
    {
      v15 = (__int128 *)a2[3];
      v16 = 32 * v14;
      do
      {
        v17 = *v15;
        v18 = v15[1];
        v15 += 2;
        *v13 = v17;
        v13[1] = v18;
        v13 += 2;
        v16 -= 32;
      }
      while (v16);
    }
  }
  v19 = *((unsigned int *)a2 + 13);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = v19;
  if ((_DWORD)v19)
  {
    if (v19 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x195DEF0B4);
    }
    v20 = 40 * v19;
    v21 = WTF::fastMalloc((WTF *)(40 * v19));
    *(_DWORD *)(a1 + 48) = (v20 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)(a1 + 40) = v21;
    v22 = *((_DWORD *)a2 + 13);
    if (v22)
    {
      v23 = a2[5];
      v24 = v23 + 40 * v22;
      do
      {
        v25 = *(_DWORD **)v23;
        if (*(_QWORD *)v23)
          *v25 += 2;
        *(_QWORD *)v21 = v25;
        v26 = *(_OWORD *)(v23 + 8);
        *(_OWORD *)(v21 + 24) = *(_OWORD *)(v23 + 24);
        *(_OWORD *)(v21 + 8) = v26;
        v23 += 40;
        v21 += 40;
      }
      while (v23 != v24);
    }
  }
  v27 = *((unsigned int *)a2 + 17);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = v27;
  if ((_DWORD)v27)
  {
    if (v27 < 0x6666667)
    {
      v28 = 40 * v27;
      v29 = WTF::fastMalloc((WTF *)(40 * v27));
      *(_DWORD *)(a1 + 64) = (v28 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)(a1 + 56) = v29;
      WTF::VectorCopier<false,WebCore::InspectorOverlayLabel>::uninitializedCopy<WebCore::InspectorOverlayLabel>(a2[7], a2[7] + 40 * *((unsigned int *)a2 + 17), v29);
      return a1;
    }
LABEL_29:
    __break(0xC471u);
    JUMPOUT(0x195DEF0A4);
  }
  return a1;
}

uint64_t WTF::VectorCopier<false,WebCore::InspectorOverlayLabel>::uninitializedCopy<WebCore::InspectorOverlayLabel>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;

  if (result != a2)
  {
    for (i = result; i != a2; i += 40)
    {
      v6 = *(unsigned int *)(i + 12);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 12) = v6;
      if ((_DWORD)v6)
      {
        if (v6 >> 27)
        {
          __break(0xC471u);
          return result;
        }
        result = WTF::fastMalloc((WTF *)(32 * v6));
        *(_DWORD *)(a3 + 8) = v6;
        *(_QWORD *)a3 = result;
        v7 = *(unsigned int *)(i + 12);
        if ((_DWORD)v7)
        {
          v8 = *(_QWORD *)i;
          v9 = *(_QWORD *)i + 32 * v7;
          do
          {
            v10 = *(_DWORD **)v8;
            if (*(_QWORD *)v8)
              *v10 += 2;
            v11 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)result = v10;
            *(_QWORD *)(result + 8) = v11;
            if ((v11 & 0x8000000000000) != 0)
            {
              v13 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
              do
                v14 = __ldaxr(v13);
              while (__stlxr(v14 + 1, v13));
            }
            *(_BYTE *)(result + 16) = *(_BYTE *)(v8 + 16);
            v12 = *(_QWORD *)(v8 + 24);
            *(_QWORD *)(result + 24) = v12;
            if ((v12 & 0x8000000000000) != 0)
            {
              v15 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
              do
                v16 = __ldaxr(v15);
              while (__stlxr(v16 + 1, v15));
            }
            result += 32;
            v8 += 32;
          }
          while (v8 != v9);
        }
      }
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(i + 16);
      v17 = *(_QWORD *)(i + 24);
      *(_QWORD *)(a3 + 24) = v17;
      if ((v17 & 0x8000000000000) != 0)
      {
        v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
      }
      *(_WORD *)(a3 + 32) = *(_WORD *)(i + 32);
      a3 += 40;
    }
  }
  return result;
}

void WebCore::InspectorOverlayHighlight::GridHighlightOverlay::~GridHighlightOverlay(WebCore::InspectorOverlayHighlight::GridHighlightOverlay *this, void *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v16;
  WTF *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  v3 = *((_DWORD *)this + 17);
  if (v3)
  {
    v4 = *((_QWORD *)this + 7);
    v5 = v4 + 40 * v3;
    do
    {
      v6 = *(_QWORD *)(v4 + 24);
      if ((v6 & 0x8000000000000) != 0)
      {
        v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v7);
          WTF::fastFree((WTF *)v7, a2);
        }
      }
      WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
      v4 += 40;
    }
    while (v4 != v5);
  }
  v10 = (WTF *)*((_QWORD *)this + 7);
  if (v10)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = *((unsigned int *)this + 13);
  if ((_DWORD)v11)
  {
    v12 = (WTF::StringImpl **)*((_QWORD *)this + 5);
    v13 = 40 * v11;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      v12 += 5;
      v13 -= 40;
    }
    while (v13);
  }
  v15 = (WTF *)*((_QWORD *)this + 5);
  if (v15)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v15, a2);
  }
  v16 = (WTF *)*((_QWORD *)this + 3);
  if (v16)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v16, a2);
  }
  v17 = (WTF *)*((_QWORD *)this + 1);
  if (v17)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v17, a2);
  }
  if ((*(_QWORD *)this & 0x8000000000000) != 0)
  {
    v18 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFLL);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, a2);
    }
  }
}

_QWORD *std::set<int,std::less<int>,WTF::FastAllocator<int>>::insert[abi:sn180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(_QWORD *result, int *a2, int *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int *v6;
  _QWORD **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  int *v14;
  int *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t *v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = (_QWORD **)result;
    v8 = result + 1;
    do
    {
      result = std::__tree<int,std::less<int>,WTF::FastAllocator<int>>::__find_equal<int>(v7, v8, v18, &v17, v6 + 7);
      if (!*result)
      {
        v9 = result;
        v10 = WTF::fastMalloc((WTF *)0x20);
        *(_DWORD *)(v10 + 28) = v6[7];
        v11 = v18[0];
        *(_QWORD *)v10 = 0;
        *(_QWORD *)(v10 + 8) = 0;
        *(_QWORD *)(v10 + 16) = v11;
        *v9 = v10;
        v12 = (_QWORD *)**v7;
        if (v12)
        {
          *v7 = v12;
          v13 = *v9;
        }
        else
        {
          v13 = v10;
        }
        result = (_QWORD *)std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v7[1], v13);
        v7[2] = (_QWORD *)((char *)v7[2] + 1);
      }
      v14 = (int *)*((_QWORD *)v6 + 1);
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = *(int **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (int *)*((_QWORD *)v6 + 2);
          v16 = *(_QWORD *)v15 == (_QWORD)v6;
          v6 = v15;
        }
        while (!v16);
      }
      v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

uint64_t *std::__tree<int,std::less<int>,WTF::FastAllocator<int>>::__find_equal<int>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v9 = *a5, v10 = *((_DWORD *)a2 + 7), *a5 < v10))
  {
    v6 = (uint64_t *)*a2;
    v7 = a2;
    if ((uint64_t *)*a1 == a2)
      goto LABEL_3;
    if (v6)
    {
      v13 = (uint64_t *)*a2;
      do
      {
        v7 = v13;
        v13 = (uint64_t *)v13[1];
      }
      while (v13);
    }
    else
    {
      v14 = a2;
      do
      {
        v7 = (uint64_t *)v14[2];
        v15 = *v7 == (_QWORD)v14;
        v14 = v7;
      }
      while (v15);
    }
    v16 = *a5;
    if (*((_DWORD *)v7 + 7) < *a5)
    {
LABEL_3:
      if (v6)
      {
        *a3 = v7;
        return v7 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v17 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v18 = (uint64_t *)v17;
          v19 = *(_DWORD *)(v17 + 28);
          if (v16 >= v19)
            break;
          v17 = *v18;
          v5 = v18;
          if (!*v18)
            goto LABEL_27;
        }
        if (v19 >= v16)
          break;
        v5 = v18 + 1;
        v17 = v18[1];
      }
      while (v17);
    }
    else
    {
      v18 = a1 + 1;
    }
LABEL_27:
    *a3 = v18;
    return v5;
  }
  if (v10 >= v9)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v20 = a2;
    do
    {
      a4 = (uint64_t *)v20[2];
      v15 = *a4 == (_QWORD)v20;
      v20 = a4;
    }
    while (!v15);
  }
  if (a4 != v5 && v9 >= *((_DWORD *)a4 + 7))
  {
    v21 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v22 = (uint64_t *)v21;
          v23 = *(_DWORD *)(v21 + 28);
          if (v9 >= v23)
            break;
          v21 = *v22;
          v5 = v22;
          if (!*v22)
            goto LABEL_43;
        }
        if (v23 >= v9)
          break;
        v5 = v22 + 1;
        v21 = v22[1];
      }
      while (v21);
    }
    else
    {
      v22 = a1 + 1;
    }
LABEL_43:
    *a3 = v22;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t WebCore::InspectorOverlayHighlight::FlexHighlightOverlay::FlexHighlightOverlay(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int *v45;
  unsigned int v46;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x8000000000000) != 0)
  {
    v45 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 + 1, v45));
  }
  v5 = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 8) = v5;
  v6 = *((unsigned int *)a2 + 13);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = v6;
  if ((_DWORD)v6)
  {
    if (v6 >> 27)
      goto LABEL_39;
    v7 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v6));
    *(_DWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a1 + 40) = v7;
    v8 = *((unsigned int *)a2 + 13);
    if ((_DWORD)v8)
    {
      v9 = (__int128 *)a2[5];
      v10 = 32 * v8;
      do
      {
        v11 = *v9;
        v12 = v9[1];
        v9 += 2;
        *v7 = v11;
        v7[1] = v12;
        v7 += 2;
        v10 -= 32;
      }
      while (v10);
    }
  }
  v13 = *((unsigned int *)a2 + 17);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = v13;
  if ((_DWORD)v13)
  {
    if (v13 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x195DEF818);
    }
    v14 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v13));
    *(_DWORD *)(a1 + 64) = v13;
    *(_QWORD *)(a1 + 56) = v14;
    v15 = *((unsigned int *)a2 + 17);
    if ((_DWORD)v15)
    {
      v16 = (__int128 *)a2[7];
      v17 = 32 * v15;
      do
      {
        v18 = *v16;
        v19 = v16[1];
        v16 += 2;
        *v14 = v18;
        v14[1] = v19;
        v14 += 2;
        v17 -= 32;
      }
      while (v17);
    }
  }
  v20 = *((unsigned int *)a2 + 21);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 84) = v20;
  if ((_DWORD)v20)
  {
    if (v20 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x195DEF820);
    }
    v21 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v20));
    *(_DWORD *)(a1 + 80) = v20;
    *(_QWORD *)(a1 + 72) = v21;
    v22 = *((unsigned int *)a2 + 21);
    if ((_DWORD)v22)
    {
      v23 = (__int128 *)a2[9];
      v24 = 32 * v22;
      do
      {
        v25 = *v23;
        v26 = v23[1];
        v23 += 2;
        *v21 = v25;
        v21[1] = v26;
        v21 += 2;
        v24 -= 32;
      }
      while (v24);
    }
  }
  v27 = *((unsigned int *)a2 + 25);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 100) = v27;
  if ((_DWORD)v27)
  {
    if (v27 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x195DEF828);
    }
    v28 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v27));
    *(_DWORD *)(a1 + 96) = v27;
    *(_QWORD *)(a1 + 88) = v28;
    v29 = *((unsigned int *)a2 + 25);
    if ((_DWORD)v29)
    {
      v30 = (__int128 *)a2[11];
      v31 = 32 * v29;
      do
      {
        v32 = *v30;
        v33 = v30[1];
        v30 += 2;
        *v28 = v32;
        v28[1] = v33;
        v28 += 2;
        v31 -= 32;
      }
      while (v31);
    }
  }
  v34 = *((unsigned int *)a2 + 29);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 116) = v34;
  if ((_DWORD)v34)
  {
    if (v34 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x195DEF830);
    }
    v35 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v34));
    *(_DWORD *)(a1 + 112) = v34;
    *(_QWORD *)(a1 + 104) = v35;
    v36 = *((unsigned int *)a2 + 29);
    if ((_DWORD)v36)
    {
      v37 = (__int128 *)a2[13];
      v38 = 32 * v36;
      do
      {
        v39 = *v37;
        v40 = v37[1];
        v37 += 2;
        *v35 = v39;
        v35[1] = v40;
        v35 += 2;
        v38 -= 32;
      }
      while (v38);
    }
  }
  v41 = *((unsigned int *)a2 + 33);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 132) = v41;
  if ((_DWORD)v41)
  {
    if (v41 < 0x6666667)
    {
      v42 = 40 * v41;
      v43 = WTF::fastMalloc((WTF *)(40 * v41));
      *(_DWORD *)(a1 + 128) = (v42 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)(a1 + 120) = v43;
      WTF::VectorCopier<false,WebCore::InspectorOverlayLabel>::uninitializedCopy<WebCore::InspectorOverlayLabel>(a2[15], a2[15] + 40 * *((unsigned int *)a2 + 33), v43);
      return a1;
    }
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x195DEF810);
  }
  return a1;
}

void WebCore::InspectorOverlayHighlight::FlexHighlightOverlay::~FlexHighlightOverlay(WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *this, void *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  WTF *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  v3 = *((_DWORD *)this + 33);
  if (v3)
  {
    v4 = *((_QWORD *)this + 15);
    v5 = v4 + 40 * v3;
    do
    {
      v6 = *(_QWORD *)(v4 + 24);
      if ((v6 & 0x8000000000000) != 0)
      {
        v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v7);
          WTF::fastFree((WTF *)v7, a2);
        }
      }
      WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
      v4 += 40;
    }
    while (v4 != v5);
  }
  v10 = (WTF *)*((_QWORD *)this + 15);
  if (v10)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = (WTF *)*((_QWORD *)this + 13);
  if (v11)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v11, a2);
  }
  v12 = (WTF *)*((_QWORD *)this + 11);
  if (v12)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = (WTF *)*((_QWORD *)this + 9);
  if (v13)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v13, a2);
  }
  v14 = (WTF *)*((_QWORD *)this + 7);
  if (v14)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v14, a2);
  }
  v15 = (WTF *)*((_QWORD *)this + 5);
  if (v15)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v15, a2);
  }
  if ((*(_QWORD *)this & 0x8000000000000) != 0)
  {
    v16 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFLL);
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, a2);
    }
  }
}

uint64_t WTF::RefCounted<WebCore::CSSStyleSourceData>::deref(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF *v8;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = *(unsigned int *)(this + 20);
    if ((_DWORD)v3)
    {
      v4 = 32 * v3;
      v5 = (WTF::StringImpl **)(*(_QWORD *)(this + 8) + 8);
      do
      {
        v6 = *v5;
        *v5 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
        v7 = *(v5 - 1);
        *(v5 - 1) = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, a2);
          else
            *(_DWORD *)v7 -= 2;
        }
        v5 += 4;
        v4 -= 32;
      }
      while (v4);
    }
    v8 = *(WTF **)(v2 + 8);
    if (v8)
    {
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      WTF::fastFree(v8, a2);
    }
    return WTF::fastFree((WTF *)v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::InspectorOverlay::*&)(void),WebCore::InspectorOverlay*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

unsigned int *WTF::VectorDestructor<true,WebCore::InspectorOverlay::Grid>::destruct(unsigned int *result, unsigned int *a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF *v9;
  unsigned int v10;
  unsigned int v11;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = *((_QWORD *)v3 + 1);
      if ((v4 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
        do
        {
          v10 = __ldaxr(result);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, result));
        if (!v11)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      v5 = *(_QWORD *)v3;
      *(_QWORD *)v3 = 0;
      if (v5)
      {
        do
        {
          v6 = __ldaxr((unsigned int *)v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, (unsigned int *)v5));
        if (!v7)
        {
          atomic_store(1u, (unsigned int *)v5);
          v8 = *(unsigned int *)(v5 + 28);
          if ((_DWORD)v8)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v8));
          v9 = *(WTF **)(v5 + 16);
          if (v9)
          {
            *(_QWORD *)(v5 + 16) = 0;
            *(_DWORD *)(v5 + 24) = 0;
            WTF::fastFree(v9, a2);
          }
          result = (unsigned int *)WTF::fastFree((WTF *)v5, a2);
        }
      }
      v3 += 6;
    }
    while (v3 != a2);
  }
  return result;
}

char *WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 72 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v21 = *(WTF **)a1;
        return (char *)v21 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
      if (v9 < 0x38E38E4)
      {
        v10 = 72 * v9;
        v12 = WTF::fastMalloc((WTF *)(72 * v9));
        v13 = 0;
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x48;
        *(_QWORD *)a1 = v12;
        do
        {
          v14 = (char *)v5 + v13;
          *(_QWORD *)(v12 + v13) = 0;
          v15 = *(_QWORD *)((char *)v5 + v13);
          if (v15)
          {
            *(_QWORD *)(v12 + v13) = v15;
            *(_QWORD *)v14 = 0;
          }
          v16 = v12 + v13;
          *(_QWORD *)(v16 + 8) = 0;
          *(_QWORD *)(v16 + 16) = 0;
          v17 = *((_QWORD *)v14 + 1);
          *((_QWORD *)v14 + 1) = 0;
          *(_QWORD *)(v16 + 8) = v17;
          LODWORD(v17) = *((_DWORD *)v14 + 4);
          *((_DWORD *)v14 + 4) = 0;
          *(_DWORD *)(v16 + 16) = v17;
          LODWORD(v17) = *((_DWORD *)v14 + 5);
          *((_DWORD *)v14 + 5) = 0;
          *(_DWORD *)(v16 + 20) = v17;
          *(_QWORD *)(v16 + 24) = 0;
          *(_QWORD *)(v16 + 32) = 0;
          v18 = *((_QWORD *)v14 + 3);
          *((_QWORD *)v14 + 3) = 0;
          *(_QWORD *)(v16 + 24) = v18;
          LODWORD(v18) = *((_DWORD *)v14 + 8);
          *((_DWORD *)v14 + 8) = 0;
          *(_DWORD *)(v16 + 32) = v18;
          LODWORD(v18) = *((_DWORD *)v14 + 9);
          *((_DWORD *)v14 + 9) = 0;
          *(_DWORD *)(v16 + 36) = v18;
          *(_QWORD *)(v16 + 40) = 0;
          *(_QWORD *)(v16 + 48) = 0;
          v19 = *((_QWORD *)v14 + 5);
          *((_QWORD *)v14 + 5) = 0;
          *(_QWORD *)(v16 + 40) = v19;
          LODWORD(v19) = *((_DWORD *)v14 + 12);
          *((_DWORD *)v14 + 12) = 0;
          *(_DWORD *)(v16 + 48) = v19;
          LODWORD(v19) = *((_DWORD *)v14 + 13);
          *((_DWORD *)v14 + 13) = 0;
          *(_DWORD *)(v16 + 52) = v19;
          *(_QWORD *)(v16 + 56) = 0;
          *(_QWORD *)(v16 + 64) = 0;
          v20 = *((_QWORD *)v14 + 7);
          *((_QWORD *)v14 + 7) = 0;
          *(_QWORD *)(v16 + 56) = v20;
          LODWORD(v20) = *((_DWORD *)v14 + 16);
          *((_DWORD *)v14 + 16) = 0;
          *(_DWORD *)(v16 + 64) = v20;
          LODWORD(v20) = *((_DWORD *)v14 + 17);
          *((_DWORD *)v14 + 17) = 0;
          *(_DWORD *)(v16 + 68) = v20;
          WebCore::InspectorOverlayHighlight::GridHighlightOverlay::~GridHighlightOverlay((WebCore::InspectorOverlayHighlight::GridHighlightOverlay *)v14, v11);
          v13 += 72;
        }
        while (72 * v6 != v13);
        v21 = *(WTF **)a1;
        if (v5)
        {
          if (v21 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v11);
          v21 = *(WTF **)a1;
        }
        return (char *)v21 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x195DEFF5CLL);
    }
  }
  v22 = *(unsigned int *)(a1 + 8);
  v23 = v22 + (v22 >> 2);
  if (v23 >= 0x10)
    v24 = v23 + 1;
  else
    v24 = 16;
  if (v24 <= a2)
    v24 = a2;
  if (v24 > v22)
  {
    if (v24 >= 0x38E38E4)
      goto LABEL_37;
    v25 = *(unsigned int *)(a1 + 12);
    v26 = 72 * v24;
    v27 = WTF::fastMalloc((WTF *)(72 * v24));
    *(_DWORD *)(a1 + 8) = (v26 & 0xFFFFFFF8) / 0x48;
    *(_QWORD *)a1 = v27;
    if ((_DWORD)v25)
    {
      v29 = v27;
      v30 = 0;
      v31 = 72 * v25;
      do
      {
        v32 = (char *)v5 + v30;
        *(_QWORD *)(v29 + v30) = 0;
        v33 = *(_QWORD *)((char *)v5 + v30);
        if (v33)
        {
          *(_QWORD *)(v29 + v30) = v33;
          *(_QWORD *)v32 = 0;
        }
        v34 = v29 + v30;
        *(_QWORD *)(v34 + 8) = 0;
        *(_QWORD *)(v34 + 16) = 0;
        v35 = *((_QWORD *)v32 + 1);
        *((_QWORD *)v32 + 1) = 0;
        *(_QWORD *)(v34 + 8) = v35;
        LODWORD(v35) = *((_DWORD *)v32 + 4);
        *((_DWORD *)v32 + 4) = 0;
        *(_DWORD *)(v34 + 16) = v35;
        LODWORD(v35) = *((_DWORD *)v32 + 5);
        *((_DWORD *)v32 + 5) = 0;
        *(_DWORD *)(v34 + 20) = v35;
        *(_QWORD *)(v34 + 24) = 0;
        *(_QWORD *)(v34 + 32) = 0;
        v36 = *((_QWORD *)v32 + 3);
        *((_QWORD *)v32 + 3) = 0;
        *(_QWORD *)(v34 + 24) = v36;
        LODWORD(v36) = *((_DWORD *)v32 + 8);
        *((_DWORD *)v32 + 8) = 0;
        *(_DWORD *)(v34 + 32) = v36;
        LODWORD(v36) = *((_DWORD *)v32 + 9);
        *((_DWORD *)v32 + 9) = 0;
        *(_DWORD *)(v34 + 36) = v36;
        *(_QWORD *)(v34 + 40) = 0;
        *(_QWORD *)(v34 + 48) = 0;
        v37 = *((_QWORD *)v32 + 5);
        *((_QWORD *)v32 + 5) = 0;
        *(_QWORD *)(v34 + 40) = v37;
        LODWORD(v37) = *((_DWORD *)v32 + 12);
        *((_DWORD *)v32 + 12) = 0;
        *(_DWORD *)(v34 + 48) = v37;
        LODWORD(v37) = *((_DWORD *)v32 + 13);
        *((_DWORD *)v32 + 13) = 0;
        *(_DWORD *)(v34 + 52) = v37;
        *(_QWORD *)(v34 + 56) = 0;
        *(_QWORD *)(v34 + 64) = 0;
        v38 = *((_QWORD *)v32 + 7);
        *((_QWORD *)v32 + 7) = 0;
        *(_QWORD *)(v34 + 56) = v38;
        LODWORD(v38) = *((_DWORD *)v32 + 16);
        *((_DWORD *)v32 + 16) = 0;
        *(_DWORD *)(v34 + 64) = v38;
        LODWORD(v38) = *((_DWORD *)v32 + 17);
        *((_DWORD *)v32 + 17) = 0;
        *(_DWORD *)(v34 + 68) = v38;
        WebCore::InspectorOverlayHighlight::GridHighlightOverlay::~GridHighlightOverlay((WebCore::InspectorOverlayHighlight::GridHighlightOverlay *)v32, v28);
        v30 += 72;
      }
      while (v31 != v30);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v28);
    }
  }
  return (char *)v3;
}

char *WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(char **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = &v5[136 * *(unsigned int *)(a1 + 12)], (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x1E1E1E2)
      {
        __break(0xC471u);
        JUMPOUT(0x195DF0118);
      }
      v17 = &v5[136 * *(unsigned int *)(a1 + 12)];
      v18 = 136 * v16;
      v19 = WTF::fastMalloc((WTF *)(136 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF8) / 0x88;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::InspectorOverlayHighlight::FlexHighlightOverlay>::move(v5, v17, v19);
      if (v5)
      {
        if (*(char **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(char **)a1;
    }
    else
    {
      if (v9 >= 0x1E1E1E2)
      {
        __break(0xC471u);
        JUMPOUT(0x195DF0120);
      }
      v10 = 136 * v9;
      v11 = WTF::fastMalloc((WTF *)(136 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x88;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::InspectorOverlayHighlight::FlexHighlightOverlay>::move(v5, v6, v11);
      v13 = *(char **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v12);
        v13 = *(char **)a1;
      }
    }
    return &v13[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
  }
  return (char *)v3;
}

void WTF::VectorMover<false,WebCore::InspectorOverlayHighlight::FlexHighlightOverlay>::move(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = &a1[v6];
      *(_QWORD *)(a3 + v6) = 0;
      v8 = *(_QWORD *)&a1[v6];
      if (v8)
      {
        *(_QWORD *)(a3 + v6) = v8;
        *(_QWORD *)v7 = 0;
      }
      v9 = a3 + v6;
      v10 = *(_OWORD *)(v7 + 8);
      *(_OWORD *)(v9 + 24) = *(_OWORD *)(v7 + 24);
      *(_OWORD *)(v9 + 8) = v10;
      *(_QWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      v11 = *((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = 0;
      *(_QWORD *)(v9 + 40) = v11;
      LODWORD(v11) = *((_DWORD *)v7 + 12);
      *((_DWORD *)v7 + 12) = 0;
      *(_DWORD *)(v9 + 48) = v11;
      LODWORD(v11) = *((_DWORD *)v7 + 13);
      *((_DWORD *)v7 + 13) = 0;
      *(_DWORD *)(v9 + 52) = v11;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 64) = 0;
      v12 = *((_QWORD *)v7 + 7);
      *((_QWORD *)v7 + 7) = 0;
      *(_QWORD *)(v9 + 56) = v12;
      LODWORD(v12) = *((_DWORD *)v7 + 16);
      *((_DWORD *)v7 + 16) = 0;
      *(_DWORD *)(v9 + 64) = v12;
      LODWORD(v12) = *((_DWORD *)v7 + 17);
      *((_DWORD *)v7 + 17) = 0;
      *(_DWORD *)(v9 + 68) = v12;
      *(_QWORD *)(v9 + 72) = 0;
      *(_QWORD *)(v9 + 80) = 0;
      v13 = *((_QWORD *)v7 + 9);
      *((_QWORD *)v7 + 9) = 0;
      *(_QWORD *)(v9 + 72) = v13;
      LODWORD(v13) = *((_DWORD *)v7 + 20);
      *((_DWORD *)v7 + 20) = 0;
      *(_DWORD *)(v9 + 80) = v13;
      LODWORD(v13) = *((_DWORD *)v7 + 21);
      *((_DWORD *)v7 + 21) = 0;
      *(_DWORD *)(v9 + 84) = v13;
      *(_QWORD *)(v9 + 88) = 0;
      *(_QWORD *)(v9 + 96) = 0;
      v14 = *((_QWORD *)v7 + 11);
      *((_QWORD *)v7 + 11) = 0;
      *(_QWORD *)(v9 + 88) = v14;
      LODWORD(v14) = *((_DWORD *)v7 + 24);
      *((_DWORD *)v7 + 24) = 0;
      *(_DWORD *)(v9 + 96) = v14;
      LODWORD(v14) = *((_DWORD *)v7 + 25);
      *((_DWORD *)v7 + 25) = 0;
      *(_DWORD *)(v9 + 100) = v14;
      *(_QWORD *)(v9 + 104) = 0;
      *(_QWORD *)(v9 + 112) = 0;
      v15 = *((_QWORD *)v7 + 13);
      *((_QWORD *)v7 + 13) = 0;
      *(_QWORD *)(v9 + 104) = v15;
      LODWORD(v15) = *((_DWORD *)v7 + 28);
      *((_DWORD *)v7 + 28) = 0;
      *(_DWORD *)(v9 + 112) = v15;
      LODWORD(v15) = *((_DWORD *)v7 + 29);
      *((_DWORD *)v7 + 29) = 0;
      *(_DWORD *)(v9 + 116) = v15;
      *(_QWORD *)(v9 + 120) = 0;
      *(_QWORD *)(v9 + 128) = 0;
      v16 = *((_QWORD *)v7 + 15);
      *((_QWORD *)v7 + 15) = 0;
      *(_QWORD *)(v9 + 120) = v16;
      LODWORD(v16) = *((_DWORD *)v7 + 32);
      *((_DWORD *)v7 + 32) = 0;
      *(_DWORD *)(v9 + 128) = v16;
      LODWORD(v16) = *((_DWORD *)v7 + 33);
      *((_DWORD *)v7 + 33) = 0;
      *(_DWORD *)(v9 + 132) = v16;
      WebCore::InspectorOverlayHighlight::FlexHighlightOverlay::~FlexHighlightOverlay((WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *)v7, a2);
      v6 += 136;
    }
    while (&a1[v6] != a2);
  }
}

unsigned int *WTF::VectorMover<false,WebCore::InspectorOverlay::Grid>::moveOverlapping(unsigned int *result, unsigned int *a2, unint64_t a3)
{
  unsigned int *v3;
  unsigned int *v4;
  char *v5;
  char *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;
  unsigned int v17;
  unsigned int v18;

  v3 = a2;
  v4 = result;
  if ((unint64_t)result > a3)
    return WTF::VectorMover<false,WebCore::InspectorOverlay::Grid>::move(result, a2, a3);
  if (a2 != result)
  {
    v5 = (char *)(a3 + (char *)a2 - (char *)result);
    v6 = v5;
    do
    {
      v7 = v3;
      v8 = *((_QWORD *)v3 - 3);
      v3 -= 6;
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v6 - 3) = v8;
      *((_QWORD *)v6 - 2) = 0;
      v6 -= 24;
      v9 = *((_QWORD *)v3 + 1);
      if (v9)
      {
        *((_QWORD *)v5 - 2) = v9;
        *((_QWORD *)v7 - 2) = 0;
      }
      v10 = *(v7 - 2);
      *(v5 - 4) = *((_BYTE *)v7 - 4);
      *((_DWORD *)v5 - 2) = v10;
      v11 = *((_QWORD *)v7 - 2);
      if ((v11 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
        do
        {
          v17 = __ldaxr(result);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, result));
        if (!v18)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      v12 = *(_QWORD *)v3;
      *(_QWORD *)v3 = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr((unsigned int *)v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, (unsigned int *)v12));
        if (!v14)
        {
          atomic_store(1u, (unsigned int *)v12);
          v15 = *(unsigned int *)(v12 + 28);
          if ((_DWORD)v15)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v15));
          v16 = *(WTF **)(v12 + 16);
          if (v16)
          {
            *(_QWORD *)(v12 + 16) = 0;
            *(_DWORD *)(v12 + 24) = 0;
            WTF::fastFree(v16, a2);
          }
          result = (unsigned int *)WTF::fastFree((WTF *)v12, a2);
        }
      }
      v5 = v6;
    }
    while (v3 != v4);
  }
  return result;
}

unsigned int *WTF::VectorMover<false,WebCore::InspectorOverlay::Grid>::move(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  unsigned int v15;
  unsigned int v16;

  if (result != a2)
  {
    v5 = result;
    do
    {
      *(_QWORD *)(a3 + 8) = 0;
      v7 = *(_QWORD *)v5;
      v6 = *((_QWORD *)v5 + 1);
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v7;
      if (v6)
      {
        *(_QWORD *)(a3 + 8) = v6;
        *((_QWORD *)v5 + 1) = 0;
      }
      v8 = v5[4];
      *(_BYTE *)(a3 + 20) = *((_BYTE *)v5 + 20);
      *(_DWORD *)(a3 + 16) = v8;
      v9 = *((_QWORD *)v5 + 1);
      if ((v9 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
        do
        {
          v15 = __ldaxr(result);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, result));
        if (!v16)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      v10 = *(_QWORD *)v5;
      *(_QWORD *)v5 = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr((unsigned int *)v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, (unsigned int *)v10));
        if (!v12)
        {
          atomic_store(1u, (unsigned int *)v10);
          v13 = *(unsigned int *)(v10 + 28);
          if ((_DWORD)v13)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v13));
          v14 = *(WTF **)(v10 + 16);
          if (v14)
          {
            *(_QWORD *)(v10 + 16) = 0;
            *(_DWORD *)(v10 + 24) = 0;
            WTF::fastFree(v14, a2);
          }
          result = (unsigned int *)WTF::fastFree((WTF *)v10, a2);
        }
      }
      a3 += 24;
      v5 += 6;
    }
    while (v5 != a2);
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::InspectorOverlay::Grid,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unsigned int *v5;
  unsigned int *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(unsigned int **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = &v5[6 * *(unsigned int *)(a1 + 12)];
    if ((unint64_t)v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v13 = *(unsigned int **)a1;
        return &v13[2 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (v9 < 0xAAAAAAB)
      {
        v10 = 24 * v9;
        v11 = WTF::fastMalloc((WTF *)(24 * v9));
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
        *(_QWORD *)a1 = v11;
        WTF::VectorMover<false,WebCore::InspectorOverlay::Grid>::move(v5, v6, v11);
        v13 = *(unsigned int **)a1;
        if (v5)
        {
          if (v13 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v12);
          v13 = *(unsigned int **)a1;
        }
        return &v13[2 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_28:
      __break(0xC471u);
      JUMPOUT(0x195DF067CLL);
    }
  }
  v14 = *(unsigned int *)(a1 + 8);
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= a2)
    v16 = a2;
  if (v16 > v14)
  {
    if (v16 >= 0xAAAAAAB)
      goto LABEL_28;
    v17 = &v5[6 * *(unsigned int *)(a1 + 12)];
    v18 = 24 * v16;
    v19 = WTF::fastMalloc((WTF *)(24 * v16));
    *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)a1 = v19;
    WTF::VectorMover<false,WebCore::InspectorOverlay::Grid>::move(v5, v17, v19);
    if (v5)
    {
      if (*(unsigned int **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v20);
    }
  }
  return (unsigned int *)v3;
}

unint64_t WTF::VectorMover<false,WebCore::InspectorOverlay::Flex>::moveOverlapping(unint64_t result, _QWORD *a2, unint64_t a3)
{
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  WTF *v22;

  v3 = a3;
  v4 = a2;
  v5 = result;
  if (result <= a3)
  {
    if (a2 != (_QWORD *)result)
    {
      v13 = (char *)a2 + a3 - result;
      v14 = a2;
      v15 = v13;
      do
      {
        v16 = *(v14 - 3);
        v14 -= 3;
        *v14 = 0;
        *((_QWORD *)v15 - 3) = v16;
        *((_QWORD *)v15 - 2) = 0;
        v15 -= 24;
        v17 = v14[1];
        if (v17)
        {
          *((_QWORD *)v13 - 2) = v17;
          *(v4 - 2) = 0;
        }
        *(v13 - 8) = *((_BYTE *)v4 - 8);
        v18 = *(v4 - 3);
        *(v4 - 3) = 0;
        if (v18)
        {
          do
          {
            v19 = __ldaxr((unsigned int *)v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, (unsigned int *)v18));
          if (!v20)
          {
            atomic_store(1u, (unsigned int *)v18);
            v21 = *(unsigned int *)(v18 + 28);
            if ((_DWORD)v21)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v18 + 16), (WTF::StringImpl *)(*(_QWORD *)(v18 + 16) + 32 * v21));
            v22 = *(WTF **)(v18 + 16);
            if (v22)
            {
              *(_QWORD *)(v18 + 16) = 0;
              *(_DWORD *)(v18 + 24) = 0;
              WTF::fastFree(v22, a2);
            }
            result = WTF::fastFree((WTF *)v18, a2);
          }
        }
        v13 = v15;
        v4 = v14;
      }
      while (v14 != (_QWORD *)v5);
    }
  }
  else if ((_QWORD *)result != a2)
  {
    do
    {
      *(_QWORD *)(v3 + 8) = 0;
      v7 = *(_QWORD *)v5;
      v6 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)v5 = 0;
      *(_QWORD *)v3 = v7;
      if (v6)
      {
        *(_QWORD *)(v3 + 8) = v6;
        *(_QWORD *)(v5 + 8) = 0;
      }
      *(_BYTE *)(v3 + 16) = *(_BYTE *)(v5 + 16);
      v8 = *(_QWORD *)v5;
      *(_QWORD *)v5 = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr((unsigned int *)v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, (unsigned int *)v8));
        if (!v10)
        {
          atomic_store(1u, (unsigned int *)v8);
          v11 = *(unsigned int *)(v8 + 28);
          if ((_DWORD)v11)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v11));
          v12 = *(WTF **)(v8 + 16);
          if (v12)
          {
            *(_QWORD *)(v8 + 16) = 0;
            *(_DWORD *)(v8 + 24) = 0;
            WTF::fastFree(v12, a2);
          }
          result = WTF::fastFree((WTF *)v8, a2);
        }
      }
      v3 += 24;
      v5 += 24;
    }
    while ((_QWORD *)v5 != v4);
  }
  return result;
}

char *WTF::Vector<WebCore::InspectorOverlay::Flex,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  WTF *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  void *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  WTF *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  WTF *v36;
  WTF *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = (WTF *)((char *)v5 + 24 * *(unsigned int *)(a1 + 12));
    if ((unint64_t)v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v37 = *(WTF **)a1;
        return (char *)v37 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
      if (v9 < 0xAAAAAAB)
      {
        v10 = 24 * v9;
        v12 = WTF::fastMalloc((WTF *)(24 * v9));
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
        *(_QWORD *)a1 = v12;
        v13 = v5;
        do
        {
          *(_QWORD *)(v12 + 8) = 0;
          v15 = *(_QWORD *)v13;
          v14 = *((_QWORD *)v13 + 1);
          *(_QWORD *)v13 = 0;
          *(_QWORD *)v12 = v15;
          if (v14)
          {
            *(_QWORD *)(v12 + 8) = v14;
            *((_QWORD *)v13 + 1) = 0;
          }
          *(_BYTE *)(v12 + 16) = *((_BYTE *)v13 + 16);
          v16 = *(_QWORD *)v13;
          *(_QWORD *)v13 = 0;
          if (v16)
          {
            do
            {
              v17 = __ldaxr((unsigned int *)v16);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, (unsigned int *)v16));
            if (!v18)
            {
              atomic_store(1u, (unsigned int *)v16);
              v19 = *(unsigned int *)(v16 + 28);
              if ((_DWORD)v19)
              {
                v40 = v16;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v16 + 16), (WTF::StringImpl *)(*(_QWORD *)(v16 + 16) + 32 * v19));
                v16 = v40;
              }
              v20 = *(WTF **)(v16 + 16);
              if (v20)
              {
                *(_QWORD *)(v16 + 16) = 0;
                *(_DWORD *)(v16 + 24) = 0;
                v39 = v16;
                WTF::fastFree(v20, v11);
                v16 = v39;
              }
              WTF::fastFree((WTF *)v16, v11);
            }
          }
          v12 += 24;
          v13 = (WTF *)((char *)v13 + 24);
        }
        while (v13 != v6);
        v37 = *(WTF **)a1;
        if (v5)
        {
          if (v37 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v11);
          v37 = *(WTF **)a1;
        }
        return (char *)v37 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_55:
      __break(0xC471u);
      JUMPOUT(0x195DF0B2CLL);
    }
  }
  v21 = *(unsigned int *)(a1 + 8);
  v22 = v21 + (v21 >> 2);
  if (v22 >= 0x10)
    v23 = v22 + 1;
  else
    v23 = 16;
  if (v23 <= a2)
    v23 = a2;
  if (v23 > v21)
  {
    if (v23 >= 0xAAAAAAB)
      goto LABEL_55;
    v24 = *(_DWORD *)(a1 + 12);
    v25 = 24 * v23;
    v26 = WTF::fastMalloc((WTF *)(24 * v23));
    *(_DWORD *)(a1 + 8) = (v25 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)a1 = v26;
    if (v24)
    {
      v28 = v26;
      v29 = v5;
      do
      {
        *(_QWORD *)(v28 + 8) = 0;
        v31 = *(_QWORD *)v29;
        v30 = *((_QWORD *)v29 + 1);
        *(_QWORD *)v29 = 0;
        *(_QWORD *)v28 = v31;
        if (v30)
        {
          *(_QWORD *)(v28 + 8) = v30;
          *((_QWORD *)v29 + 1) = 0;
        }
        *(_BYTE *)(v28 + 16) = *((_BYTE *)v29 + 16);
        v32 = *(_QWORD *)v29;
        *(_QWORD *)v29 = 0;
        if (v32)
        {
          do
          {
            v33 = __ldaxr((unsigned int *)v32);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, (unsigned int *)v32));
          if (!v34)
          {
            atomic_store(1u, (unsigned int *)v32);
            v35 = *(unsigned int *)(v32 + 28);
            if ((_DWORD)v35)
            {
              v42 = v32;
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v32 + 16), (WTF::StringImpl *)(*(_QWORD *)(v32 + 16) + 32 * v35));
              v32 = v42;
            }
            v36 = *(WTF **)(v32 + 16);
            if (v36)
            {
              *(_QWORD *)(v32 + 16) = 0;
              *(_DWORD *)(v32 + 24) = 0;
              v41 = v32;
              WTF::fastFree(v36, v27);
              v32 = v41;
            }
            WTF::fastFree((WTF *)v32, v27);
          }
        }
        v28 += 24;
        v29 = (WTF *)((char *)v29 + 24);
      }
      while (v29 != (WTF *)((char *)v5 + 24 * v24));
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v27);
    }
  }
  return (char *)v3;
}

uint64_t WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = *(_QWORD *)a1 + 32 * v3;
    do
    {
      v6 = *((_QWORD *)v4 + 3);
      if ((v6 & 0x8000000000000) != 0)
      {
        v9 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v9);
          WTF::fastFree((WTF *)v9, a2);
        }
      }
      v7 = *((_QWORD *)v4 + 1);
      if ((v7 & 0x8000000000000) != 0)
      {
        v12 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, a2);
        }
      }
      v8 = *(WTF::StringImpl **)v4;
      *(_QWORD *)v4 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v4 = (WTF *)((char *)v4 + 32);
    }
    while (v4 != (WTF *)v5);
  }
  v15 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v15, a2);
  }
  return a1;
}

char *WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  WTF *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  WTF *v39;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = (WTF *)((char *)v5 + 32 * *(unsigned int *)(a1 + 12));
    if ((unint64_t)v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v39 = *(WTF **)a1;
        return (char *)v39 + 32 * ((uint64_t)(v3 - (_QWORD)v5) >> 5);
      }
      if (!(v10 >> 27))
      {
        v12 = WTF::fastMalloc((WTF *)(32 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v12;
        v13 = v5;
        do
        {
          *(_QWORD *)(v12 + 8) = 0;
          v15 = *(WTF::StringImpl **)v13;
          v14 = *((_QWORD *)v13 + 1);
          *(_QWORD *)v13 = 0;
          *(_QWORD *)v12 = v15;
          if (v14)
          {
            *(_QWORD *)(v12 + 8) = v14;
            *((_QWORD *)v13 + 1) = 0;
          }
          *(_BYTE *)(v12 + 16) = *((_BYTE *)v13 + 16);
          *(_QWORD *)(v12 + 24) = 0;
          v16 = *((_QWORD *)v13 + 3);
          if (v16)
          {
            *(_QWORD *)(v12 + 24) = v16;
            *((_QWORD *)v13 + 3) = 0;
          }
          v17 = *((_QWORD *)v13 + 1);
          if ((v17 & 0x8000000000000) != 0)
          {
            v19 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
            do
            {
              v20 = __ldaxr(v19);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v19));
            if (!v21)
            {
              atomic_store(1u, v19);
              WTF::fastFree((WTF *)v19, v11);
            }
          }
          v18 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v11);
            else
              *(_DWORD *)v18 -= 2;
          }
          v12 += 32;
          v13 = (WTF *)((char *)v13 + 32);
        }
        while (v13 != v6);
        v39 = *(WTF **)a1;
        if (v5)
        {
          if (v39 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v11);
          v39 = *(WTF **)a1;
        }
        return (char *)v39 + 32 * ((uint64_t)(v3 - (_QWORD)v5) >> 5);
      }
LABEL_63:
      __break(0xC471u);
      JUMPOUT(0x195DF0EA0);
    }
  }
  v22 = *(unsigned int *)(a1 + 8);
  v23 = v22 + (v22 >> 2);
  if (v23 >= 0x10)
    v24 = v23 + 1;
  else
    v24 = 16;
  if (v24 <= a2)
    v25 = a2;
  else
    v25 = v24;
  if (v25 > v22)
  {
    if (v25 >> 27)
      goto LABEL_63;
    v26 = *(unsigned int *)(a1 + 12);
    v27 = WTF::fastMalloc((WTF *)(32 * v25));
    *(_DWORD *)(a1 + 8) = v25;
    *(_QWORD *)a1 = v27;
    if ((_DWORD)v26)
    {
      v29 = v27;
      v30 = v5;
      do
      {
        *(_QWORD *)(v29 + 8) = 0;
        v32 = *(WTF::StringImpl **)v30;
        v31 = *((_QWORD *)v30 + 1);
        *(_QWORD *)v30 = 0;
        *(_QWORD *)v29 = v32;
        if (v31)
        {
          *(_QWORD *)(v29 + 8) = v31;
          *((_QWORD *)v30 + 1) = 0;
        }
        *(_BYTE *)(v29 + 16) = *((_BYTE *)v30 + 16);
        *(_QWORD *)(v29 + 24) = 0;
        v33 = *((_QWORD *)v30 + 3);
        if (v33)
        {
          *(_QWORD *)(v29 + 24) = v33;
          *((_QWORD *)v30 + 3) = 0;
        }
        v34 = *((_QWORD *)v30 + 1);
        if ((v34 & 0x8000000000000) != 0)
        {
          v36 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFLL);
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            atomic_store(1u, v36);
            WTF::fastFree((WTF *)v36, v28);
          }
        }
        v35 = *(WTF::StringImpl **)v30;
        *(_QWORD *)v30 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v28);
          else
            *(_DWORD *)v35 -= 2;
        }
        v29 += 32;
        v30 = (WTF *)((char *)v30 + 32);
      }
      while (v30 != (WTF *)((char *)v5 + 32 * v26));
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v28);
    }
  }
  return (char *)v3;
}

uint64_t WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;

  v3 = result;
  if (!a2)
  {
LABEL_14:
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    return result;
  }
  v4 = *(_DWORD *)(a2 - 8);
  v5 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
  v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  v7 = v4 & (v6 ^ HIWORD(v6));
  v8 = *(_DWORD *)(a2 + 24 * v7);
  if (v8 != a3)
  {
    v9 = 1;
    while (v8 != -1)
    {
      v7 = (v7 + v9) & v4;
      v8 = *(_DWORD *)(a2 + 24 * v7);
      ++v9;
      if (v8 == a3)
        goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_6:
  v10 = a2 + 24 * v7;
  v11 = *(unsigned int *)(v10 + 20);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v11;
  if ((_DWORD)v11)
  {
    if (v11 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v12 = v10 + 8;
      result = WTF::fastMalloc((WTF *)(8 * v11));
      *(_DWORD *)(v3 + 8) = v11;
      *(_QWORD *)v3 = result;
      v13 = *(unsigned int *)(v12 + 12);
      if ((_DWORD)v13)
      {
        v14 = *(_DWORD ***)v12;
        v15 = 8 * v13;
        do
        {
          v16 = *v14;
          if (*v14)
            *v16 += 2;
          *(_QWORD *)result = v16;
          result += 8;
          ++v14;
          v15 -= 8;
        }
        while (v15);
      }
    }
  }
  return result;
}

char *WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  WTF *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  WTF *v25;
  __int128 v26;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 20 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v16 = *(WTF **)a1;
        return (char *)v16 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      }
      if (v9 < 0xCCCCCCD)
      {
        v10 = 20 * v9;
        v11 = WTF::fastMalloc((WTF *)(20 * v9));
        v13 = 0;
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFFC) / 0x14;
        *(_QWORD *)a1 = v11;
        do
        {
          v14 = v11 + v13;
          v15 = *(_OWORD *)((char *)v5 + v13);
          *(_DWORD *)(v14 + 16) = *(_DWORD *)((char *)v5 + v13 + 16);
          *(_OWORD *)v14 = v15;
          v13 += 20;
        }
        while (20 * v6 != v13);
        v16 = *(WTF **)a1;
        if (v5)
        {
          if (v16 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12);
          v16 = *(WTF **)a1;
        }
        return (char *)v16 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      }
LABEL_33:
      __break(0xC471u);
      JUMPOUT(0x195DF1198);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= a2)
    v19 = a2;
  if (v19 > v17)
  {
    if (v19 >= 0xCCCCCCD)
      goto LABEL_33;
    v20 = *(unsigned int *)(a1 + 12);
    v21 = 20 * v19;
    v22 = WTF::fastMalloc((WTF *)(20 * v19));
    *(_DWORD *)(a1 + 8) = (v21 & 0xFFFFFFFC) / 0x14;
    *(_QWORD *)a1 = v22;
    if ((_DWORD)v20)
    {
      v24 = 20 * v20;
      v25 = v5;
      do
      {
        v26 = *(_OWORD *)v25;
        *(_DWORD *)(v22 + 16) = *((_DWORD *)v25 + 4);
        *(_OWORD *)v22 = v26;
        v22 += 20;
        v25 = (WTF *)((char *)v25 + 20);
        v24 -= 20;
      }
      while (v24);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v23);
    }
  }
  return (char *)v3;
}

unint64_t WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(_DWORD *)(result + 12);
      v5 = 40 * a2;
      result = WTF::fastMalloc((WTF *)(40 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (char *)v3 + 40 * v4;
        v9 = (uint64_t)v3;
        do
        {
          *(_QWORD *)v7 = 0;
          *(_QWORD *)(v7 + 8) = 0;
          v10 = *(_QWORD *)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)v7 = v10;
          LODWORD(v10) = *(_DWORD *)(v9 + 8);
          *(_DWORD *)(v9 + 8) = 0;
          *(_DWORD *)(v7 + 8) = v10;
          LODWORD(v10) = *(_DWORD *)(v9 + 12);
          *(_DWORD *)(v9 + 12) = 0;
          *(_DWORD *)(v7 + 12) = v10;
          *(_QWORD *)(v7 + 16) = *(_QWORD *)(v9 + 16);
          *(_QWORD *)(v7 + 24) = 0;
          v11 = *(_QWORD *)(v9 + 24);
          if (v11)
          {
            *(_QWORD *)(v7 + 24) = v11;
            *(_QWORD *)(v9 + 24) = 0;
          }
          *(_WORD *)(v7 + 32) = *(_WORD *)(v9 + 32);
          v12 = *(_QWORD *)(v9 + 24);
          if ((v12 & 0x8000000000000) != 0)
          {
            v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v13);
              WTF::fastFree((WTF *)v13, v6);
            }
          }
          result = WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9, v6);
          v7 += 40;
          v9 += 40;
        }
        while ((char *)v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

_WORD *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned int,void>>(uint64_t *a1, unsigned int *a2)
{
  unsigned int v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  _WORD *result;
  uint64_t v8;
  unsigned int v9;
  uint64_t v11;
  unsigned int v12;
  _BYTE v13[13];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *((_DWORD *)a1 + 4);
  do
  {
    ++v4;
    v5 = v3 > 9;
    v3 /= 0xAu;
  }
  while (v5);
  v6 = a1[1];
  if ((v6 || (v6 = *a1) != 0) && (*(_BYTE *)(v6 + 16) & 4) == 0)
  {
    result = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1);
    if (result)
    {
      v8 = 0;
      v9 = *a2;
      do
      {
        v13[v8-- + 12] = (v9 % 0xA) | 0x30;
        v5 = v9 > 9;
        v9 /= 0xAu;
      }
      while (v5);
      if (v8 + 14 <= 13)
      {
        do
          *result++ = *((unsigned __int8 *)&v14 + v8);
        while (!__CFADD__(v8++, 1));
      }
    }
  }
  else
  {
    result = (_WORD *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v11 = 0;
      v12 = *a2;
      do
      {
        v13[v11-- + 12] = (v12 % 0xA) | 0x30;
        v5 = v12 > 9;
        v12 /= 0xAu;
      }
      while (v5);
      if (v11 + 14 <= 13)
        return memcpy(result, &v13[v11 + 13], -v11);
    }
  }
  return result;
}

_WORD *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char16_t,void>,WTF::StringTypeAdapter<int,void>>(WTF::StringBuilder *a1, _WORD *a2, unsigned int *a3)
{
  unsigned int v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  _WORD *result;
  unsigned int v10;
  uint64_t v11;
  _BYTE *v12;
  size_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  _BYTE v23[13];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  if ((*a3 & 0x80000000) != 0)
  {
    v19 = -v5;
    v20 = 1;
    do
    {
      ++v20;
      v16 = v19 >= 0xA;
      v19 /= 0xAu;
    }
    while (v16);
  }
  else
  {
    v6 = 0;
    do
    {
      ++v6;
      v7 = v5 > 9;
      v5 /= 0xAu;
    }
    while (v7);
  }
  v8 = *((_QWORD *)a1 + 1);
  if (!v8)
  {
    v8 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
      if ((unsigned __int16)*a2 <= 0xFFu)
        goto LABEL_8;
LABEL_15:
      result = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
      if (result)
      {
        v14 = *a3;
        *result++ = *a2;
        if ((v14 & 0x80000000) != 0)
        {
          v17 = -v14;
          v18 = 12;
          do
          {
            v23[v18--] = (v17 % 0xA) | 0x30;
            v7 = v17 > 9;
            v17 /= 0xAu;
          }
          while (v7);
          v23[v18] = 45;
          if (v18 + 2 <= 14)
          {
            do
            {
              *result++ = v23[v18];
              v7 = v18++ < 12;
            }
            while (v7);
          }
        }
        else
        {
          v15 = 0;
          do
          {
            v23[v15-- + 12] = (v14 % 0xA) | 0x30;
            v7 = v14 > 9;
            v14 /= 0xAu;
          }
          while (v7);
          if (v15 + 14 <= 13)
          {
            do
            {
              *result++ = *((unsigned __int8 *)&v24 + v15);
              v16 = __CFADD__(v15++, 1);
            }
            while (!v16);
          }
        }
      }
      return result;
    }
  }
  if ((*(_BYTE *)(v8 + 16) & 4) == 0 || (unsigned __int16)*a2 >= 0x100u)
    goto LABEL_15;
LABEL_8:
  result = (_WORD *)MEMORY[0x19AEA4824]();
  if (result)
  {
    v10 = *a3;
    *(_BYTE *)result = *(_BYTE *)a2;
    result = (_WORD *)((char *)result + 1);
    v11 = 0;
    if ((v10 & 0x80000000) != 0)
    {
      v21 = -v10;
      do
      {
        v23[v11-- + 12] = (v21 % 0xA) | 0x30;
        v7 = v21 > 9;
        v21 /= 0xAu;
      }
      while (v7);
      v22 = v11 + 12;
      v12 = &v23[v11 + 12];
      *v12 = 45;
      if (v11 + 14 <= 14)
      {
        if (v22 <= 12)
          v22 = 12;
        v13 = v22 - v11 - 11;
        return memcpy(result, v12, v13);
      }
    }
    else
    {
      do
      {
        v23[v11-- + 12] = (v10 % 0xA) | 0x30;
        v7 = v10 > 9;
        v10 /= 0xAu;
      }
      while (v7);
      if (v11 + 14 <= 13)
      {
        v12 = &v23[v11 + 13];
        v13 = -v11;
        return memcpy(result, v12, v13);
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay::Area,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay::Area,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay::Area,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay::Area,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  WTF *v8;
  WTF *v9;
  unsigned int *v10;
  __int128 v11;

  if (result[2] < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 40 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(40 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (WTF *)((char *)v3 + 40 * v4);
        v9 = v3;
        do
        {
          v10 = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)v7 = v10;
          v11 = *(_OWORD *)((char *)v9 + 8);
          *(_OWORD *)(v7 + 6) = *(_OWORD *)((char *)v9 + 24);
          *(_OWORD *)(v7 + 2) = v11;
          result = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v9 = (WTF *)((char *)v9 + 40);
          v7 += 10;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

char *WTF::Vector<WebCore::ComputedContentRun,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)((char *)v5 + 72 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x38E38E4)
      {
        __break(0xC471u);
        JUMPOUT(0x195DF1B54);
      }
      v17 = (WTF::StringImpl *)((char *)v5 + 72 * *(unsigned int *)(a1 + 12));
      v18 = 72 * v16;
      v19 = WTF::fastMalloc((WTF *)(72 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF8) / 0x48;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::ComputedContentRun>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v9 >= 0x38E38E4)
      {
        __break(0xC471u);
        JUMPOUT(0x195DF1B5CLL);
      }
      v10 = 72 * v9;
      v11 = WTF::fastMalloc((WTF *)(72 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x48;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::ComputedContentRun>::move(v5, v6, v11);
      v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::ComputedContentRun>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  _DWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  if (result != a2)
  {
    v5 = result;
    do
    {
      *(_DWORD *)a3 = 0;
      v6 = (_DWORD *)*((_QWORD *)v5 + 1);
      if (v6)
        *v6 += 2;
      *(_QWORD *)(a3 + 8) = v6;
      v7 = *((_OWORD *)v5 + 1);
      *(_QWORD *)(a3 + 30) = *(_QWORD *)((char *)v5 + 30);
      *(_OWORD *)(a3 + 16) = v7;
      *(_QWORD *)(a3 + 40) = 0;
      v8 = *((_QWORD *)v5 + 5);
      if (v8)
      {
        *(_QWORD *)(a3 + 40) = v8;
        *((_QWORD *)v5 + 5) = 0;
      }
      *(_BYTE *)(a3 + 48) = *((_BYTE *)v5 + 48);
      *(_QWORD *)(a3 + 56) = 0;
      v9 = *((_QWORD *)v5 + 7);
      if (v9)
      {
        *(_QWORD *)(a3 + 56) = v9;
        *((_QWORD *)v5 + 7) = 0;
      }
      *(_QWORD *)(a3 + 64) = *((_QWORD *)v5 + 8);
      v10 = *((_QWORD *)v5 + 7);
      if ((v10 & 0x8000000000000) != 0)
      {
        v12 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, a2);
        }
      }
      v11 = *((_QWORD *)v5 + 5);
      if ((v11 & 0x8000000000000) != 0)
      {
        v15 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v15);
          WTF::fastFree((WTF *)v15, a2);
        }
      }
      result = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      a3 += 72;
      v5 = (WTF::StringImpl *)((char *)v5 + 72);
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::RefCounted<WebCore::CSSRuleSourceData>::deref(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;

  v2 = result;
  if (*(_DWORD *)result == 1)
  {
    v3 = *(unsigned int *)(result + 60);
    v4 = *(WTF **)(result + 48);
    if ((_DWORD)v3)
    {
      v5 = 8 * v3;
      do
      {
        v6 = *(_QWORD *)v4;
        *(_QWORD *)v4 = 0;
        if (v6)
          WTF::RefCounted<WebCore::CSSRuleSourceData>::deref();
        v4 = (WTF *)((char *)v4 + 8);
        v5 -= 8;
      }
      while (v5);
      v4 = *(WTF **)(v2 + 48);
    }
    if (v4)
    {
      *(_QWORD *)(v2 + 48) = 0;
      *(_DWORD *)(v2 + 56) = 0;
      WTF::fastFree(v4, a2);
    }
    v7 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v7)
      WTF::RefCounted<WebCore::CSSStyleSourceData>::deref(v7, (WTF::StringImpl *)a2);
    v8 = *(WTF **)(v2 + 24);
    if (v8)
    {
      *(_QWORD *)(v2 + 24) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      WTF::fastFree(v8, a2);
    }
    return WTF::fastFree((WTF *)v2, a2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

unint64_t WTF::Vector<WebCore::CSSPropertySourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::CSSPropertySourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::CSSPropertySourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::CSSPropertySourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  WTF *v8;
  WTF *v9;
  unsigned int *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(32 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = (WTF *)((char *)v4 + 32 * v5);
        v9 = v4;
        do
        {
          v10 = *(unsigned int **)v9;
          if (*(_QWORD *)v9)
            *v10 += 2;
          *(_QWORD *)v7 = v10;
          v11 = (_DWORD *)*((_QWORD *)v9 + 1);
          if (v11)
            *v11 += 2;
          *((_QWORD *)v7 + 1) = v11;
          *((_BYTE *)v7 + 16) = *((_BYTE *)v9 + 16);
          *(_WORD *)((char *)v7 + 17) = *(_WORD *)((char *)v9 + 17);
          *(_QWORD *)(v7 + 5) = *(_QWORD *)((char *)v9 + 20);
          v12 = (WTF::StringImpl *)*((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v6);
            else
              *(_DWORD *)v12 -= 2;
          }
          result = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v9 = (WTF *)((char *)v9 + 32);
          v7 += 8;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t *Inspector::Protocol::CSS::CSSRuleId::Builder<0>::setStyleSheetId(uint64_t *a1, WTF::JSONImpl::Value *a2)
{
  uint64_t v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  _BYTE v19[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v5);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v17, (const WTF::StringImpl *)&v18, (uint64_t)v19);
  if (v19[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v17);
      v8 = *(unsigned int *)(v4 + 36);
      v15 = *(_QWORD *)(v4 + 24);
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *(_QWORD *)(v15 + 8 * v8) = v16;
    }
    else
    {
      v9 = *v7;
      v10 = v17;
      if (v17)
        *(_DWORD *)v17 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v18;
  v18 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  return a1;
}

uint64_t *Inspector::Protocol::CSS::CSSRuleId::Builder<1>::setOrdinal(uint64_t *a1, WTF::JSONImpl::Value *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  _BYTE v18[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v16, (const WTF::StringImpl *)&v17, (uint64_t)v18);
  if (v18[16])
  {
    v6 = (uint64_t *)(v4 + 24);
    v7 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v7 == *(_DWORD *)(v4 + 32))
    {
      v13 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v16);
      v7 = *(unsigned int *)(v4 + 36);
      v14 = *(_QWORD *)(v4 + 24);
      v15 = *v13;
      if (*v13)
        *v15 += 2;
      *(_QWORD *)(v14 + 8 * v7) = v15;
    }
    else
    {
      v8 = *v6;
      v9 = v16;
      if (v16)
        *(_DWORD *)v16 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *(_DWORD *)(v4 + 36) = v7 + 1;
  }
  v10 = v17;
  v17 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  v11 = v16;
  v16 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::InspectorStyleProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 48 * v3;
    do
    {
      v6 = (WTF::StringImpl *)*((_QWORD *)v4 + 5);
      *((_QWORD *)v4 + 5) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = (WTF::StringImpl *)*((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(WTF::StringImpl **)v4;
      *(_QWORD *)v4 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v4 = (WTF *)((char *)v4 + 48);
      v5 -= 48;
    }
    while (v5);
  }
  v9 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

char *WTF::Vector<WebCore::InspectorStyleProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)((char *)v5 + 48 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x5555556)
      {
        __break(0xC471u);
        JUMPOUT(0x195DF23D8);
      }
      v17 = (WTF::StringImpl *)((char *)v5 + 48 * *(unsigned int *)(a1 + 12));
      v18 = 48 * v16;
      v19 = WTF::fastMalloc((WTF *)(48 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::InspectorStyleProperty>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v9 >= 0x5555556)
      {
        __break(0xC471u);
        JUMPOUT(0x195DF23E0);
      }
      v10 = 48 * v9;
      v11 = WTF::fastMalloc((WTF *)(48 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::InspectorStyleProperty>::move(v5, v6, v11);
      v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::InspectorStyleProperty>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WTF::StringImpl **)v5;
      if (*(_QWORD *)v5)
        *(_DWORD *)v6 += 2;
      *(_QWORD *)a3 = v6;
      v7 = (_DWORD *)*((_QWORD *)v5 + 1);
      if (v7)
        *v7 += 2;
      *(_QWORD *)(a3 + 8) = v7;
      *(_BYTE *)(a3 + 16) = *((_BYTE *)v5 + 16);
      *(_WORD *)(a3 + 17) = *(_WORD *)((char *)v5 + 17);
      *(_QWORD *)(a3 + 20) = *(_QWORD *)((char *)v5 + 20);
      *(_WORD *)(a3 + 32) = *((_WORD *)v5 + 16);
      v8 = *((_QWORD *)v5 + 5);
      *((_QWORD *)v5 + 5) = 0;
      *(_QWORD *)(a3 + 40) = v8;
      v9 = (WTF::StringImpl *)*((_QWORD *)v5 + 5);
      *((_QWORD *)v5 + 5) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 48);
      a3 += 48;
    }
    while (v5 != a2);
  }
  return result;
}

WTF::StringImpl **WTF::HashMap<WTF::String,WTF::RefPtr<Inspector::Protocol::CSS::CSSProperty,WTF::RawPtrTraits<Inspector::Protocol::CSS::CSSProperty>,WTF::DefaultRefDerefTraits<Inspector::Protocol::CSS::CSSProperty>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<Inspector::Protocol::CSS::CSSProperty,WTF::RawPtrTraits<Inspector::Protocol::CSS::CSSProperty>,WTF::DefaultRefDerefTraits<Inspector::Protocol::CSS::CSSProperty>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<Inspector::Protocol::CSS::CSSProperty,WTF::RawPtrTraits<Inspector::Protocol::CSS::CSSProperty>,WTF::DefaultRefDerefTraits<Inspector::Protocol::CSS::CSSProperty>>>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, WTF::StringImpl **a4)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl **v12;
  int i;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl **result;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  WTF::StringImpl *v30;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<Inspector::Protocol::CSS::CSSProperty,WTF::RawPtrTraits<Inspector::Protocol::CSS::CSSProperty>,WTF::DefaultRefDerefTraits<Inspector::Protocol::CSS::CSSProperty>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<Inspector::Protocol::CSS::CSSProperty,WTF::RawPtrTraits<Inspector::Protocol::CSS::CSSProperty>,WTF::DefaultRefDerefTraits<Inspector::Protocol::CSS::CSSProperty>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<Inspector::Protocol::CSS::CSSProperty,WTF::RawPtrTraits<Inspector::Protocol::CSS::CSSProperty>,WTF::DefaultRefDerefTraits<Inspector::Protocol::CSS::CSSProperty>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<Inspector::Protocol::CSS::CSSProperty,WTF::RawPtrTraits<Inspector::Protocol::CSS::CSSProperty>,WTF::DefaultRefDerefTraits<Inspector::Protocol::CSS::CSSProperty>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a3 + 4);
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v11 = v10 >> 8;
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF::StringImpl **)(v8 + 16 * v14);
    v16 = *v15;
    if (*v15 != (WTF::StringImpl *)-1)
      break;
    v12 = (WTF::StringImpl **)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = v12;
    }
    v17 = *a3;
    if (*a3)
      *(_DWORD *)v17 += 2;
    *v15 = v17;
    v18 = *a4;
    *a4 = 0;
    result = (WTF::StringImpl **)v15[1];
    v15[1] = v18;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        result = (WTF::StringImpl **)WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)result;
    }
    v20 = *a2;
    if (*a2)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v24 = *a2;
    if (*a2)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 <= 2 * v26)
        goto LABEL_32;
    }
    else if (3 * v27 <= 4 * v26)
    {
      if (!(_DWORD)v27)
      {
        v28 = 8;
LABEL_39:
        result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<Inspector::Protocol::CSS::CSSProperty,WTF::RawPtrTraits<Inspector::Protocol::CSS::CSSProperty>,WTF::DefaultRefDerefTraits<Inspector::Protocol::CSS::CSSProperty>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<Inspector::Protocol::CSS::CSSProperty,WTF::RawPtrTraits<Inspector::Protocol::CSS::CSSProperty>,WTF::DefaultRefDerefTraits<Inspector::Protocol::CSS::CSSProperty>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<Inspector::Protocol::CSS::CSSProperty,WTF::RawPtrTraits<Inspector::Protocol::CSS::CSSProperty>,WTF::DefaultRefDerefTraits<Inspector::Protocol::CSS::CSSProperty>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<Inspector::Protocol::CSS::CSSProperty,WTF::RawPtrTraits<Inspector::Protocol::CSS::CSSProperty>,WTF::DefaultRefDerefTraits<Inspector::Protocol::CSS::CSSProperty>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v28, v15);
        v15 = result;
        v24 = *a2;
        if (*a2)
          v27 = *(unsigned int *)(v24 - 4);
        else
          v27 = 0;
        goto LABEL_43;
      }
LABEL_32:
      v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
      goto LABEL_39;
    }
LABEL_43:
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v24 + 16 * v27;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v16, *a3, (const WTF::StringImpl *)a3))
    goto LABEL_13;
  v22 = *a2;
  if (*a2)
    v23 = *(unsigned int *)(v22 - 4);
  else
    v23 = 0;
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v22 + 16 * v23;
  *(_BYTE *)(a1 + 16) = 0;
  v29 = v8 + 16 * v14;
  v30 = *a4;
  *a4 = 0;
  result = *(WTF::StringImpl ***)(v29 + 8);
  *(_QWORD *)(v29 + 8) = v30;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::StringImpl **)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<Inspector::Protocol::CSS::CSSProperty,WTF::RawPtrTraits<Inspector::Protocol::CSS::CSSProperty>,WTF::DefaultRefDerefTraits<Inspector::Protocol::CSS::CSSProperty>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<Inspector::Protocol::CSS::CSSProperty,WTF::RawPtrTraits<Inspector::Protocol::CSS::CSSProperty>,WTF::DefaultRefDerefTraits<Inspector::Protocol::CSS::CSSProperty>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<Inspector::Protocol::CSS::CSSProperty,WTF::RawPtrTraits<Inspector::Protocol::CSS::CSSProperty>,WTF::DefaultRefDerefTraits<Inspector::Protocol::CSS::CSSProperty>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<Inspector::Protocol::CSS::CSSProperty,WTF::RawPtrTraits<Inspector::Protocol::CSS::CSSProperty>,WTF::DefaultRefDerefTraits<Inspector::Protocol::CSS::CSSProperty>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = *((_DWORD *)v14 + 4);
          if (v19 < 0x100)
            v20 = WTF::StringImpl::hashSlowCase(v14);
          else
            v20 = v19 >> 8;
          v21 = 0;
          do
          {
            v22 = v20 & v18;
            v20 = ++v21 + v22;
          }
          while (*(_QWORD *)(v17 + 16 * v22));
          v23 = v17 + 16 * v22;
          v24 = *(_DWORD **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v24)
          {
            if (*v24 != 1)
            {
              --*v24;
              goto LABEL_25;
            }
            WTF::JSONImpl::Value::operator delete();
            v30 = *(WTF::StringImpl **)v23;
            *(_QWORD *)v23 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy(v30, v10);
              else
                *(_DWORD *)v30 -= 2;
            }
          }
          else
          {
LABEL_25:
            *(_QWORD *)v23 = 0;
          }
          v25 = *v13;
          *v13 = 0;
          *(_QWORD *)v23 = v25;
          v26 = v6 + 16 * v11;
          v27 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          *(_QWORD *)(v23 + 8) = v27;
          v28 = *(_DWORD **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v28)
          {
            if (*v28 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v28;
          }
          v29 = *v13;
          *v13 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v10);
            else
              *(_DWORD *)v29 -= 2;
          }
          if (v13 == a3)
            v12 = v23;
          goto LABEL_34;
        }
        v15 = v6 + 16 * v11;
        v16 = *(_DWORD **)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        if (v16)
        {
          if (*v16 == 1)
          {
            WTF::JSONImpl::Value::operator delete();
            v14 = *v13;
          }
          else
          {
            --*v16;
          }
        }
        *v13 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v10);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
LABEL_34:
      if (++v11 == v7)
        goto LABEL_45;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_45:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

WebCore::CSSStyleRule *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorStyleSheet::ruleIndexByStyle(std::variant<WebCore::CSSStyleDeclaration *,WebCore::CSSRule *>,BOOL)::$_0,WebCore::InspectorStyleSheet::ruleIndexByStyle(std::variant<WebCore::CSSStyleDeclaration *,WebCore::CSSRule *>,BOOL)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::CSSStyleDeclaration *,WebCore::CSSRule *> &>(WebCore::CSSStyleRule ****a1, uint64_t *a2)
{
  WebCore::CSSStyleRule *result;
  uint64_t v3;

  result = ***a1;
  if (result)
  {
    v3 = *a2;
    return (WebCore::CSSStyleRule *)(WebCore::CSSStyleRule::style(result) == v3);
  }
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorStyleSheet::ruleIndexByStyle(std::variant<WebCore::CSSStyleDeclaration *,WebCore::CSSRule *>,BOOL)::$_0,WebCore::InspectorStyleSheet::ruleIndexByStyle(std::variant<WebCore::CSSStyleDeclaration *,WebCore::CSSRule *>,BOOL)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::CSSStyleDeclaration *,WebCore::CSSRule *> &>(uint64_t a1, _QWORD *a2)
{
  return **(_QWORD **)(*(_QWORD *)a1 + 8) == *a2;
}

void WebCore::NetworkResourcesData::ResourceData::decodeDataToContent(WebCore::NetworkResourcesData::ResourceData *this)
{
  uint64_t v2;
  void *v3;
  WebCore::TextResourceDecoder *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  WebCore::NetworkResourcesData *v15;
  uint64_t v16;
  char v17;
  WTF::StringImpl *v18;

  v2 = *((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 8) = 0;
  }
  else
  {
    v2 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v2 = 1;
    *(_QWORD *)(v2 + 8) = v2 + 24;
    *(_QWORD *)(v2 + 16) = 1;
    *(_BYTE *)(v2 + 40) = 0;
    *(_QWORD *)(v2 + 48) = 0;
  }
  v18 = (WTF::StringImpl *)v2;
  WebCore::FragmentedSharedBuffer::makeContiguous((WTF *)v2, &v16);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v18, v3);
  v4 = (WebCore::TextResourceDecoder *)*((_QWORD *)this + 7);
  if (!v4)
  {
    *((_BYTE *)this + 121) = 1;
    if (*(_DWORD *)(v16 + 20))
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v16 + 8) + 8);
      v11 = *(unsigned int *)(v10 + 24);
      if ((_DWORD)v11 == -1)
        goto LABEL_22;
      v18 = (WTF::StringImpl *)&v17;
      ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v11])(&v18, v10 + 8);
    }
    WTF::base64EncodeToString();
LABEL_12:
    v12 = v18;
    v18 = 0;
    v13 = (WTF::StringImpl *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v12;
    if (v13)
    {
      v14 = *(_DWORD *)v13 - 2;
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v9);
        v13 = v18;
        v18 = 0;
        if (!v13)
          goto LABEL_15;
        v14 = *(_DWORD *)v13 - 2;
        if (*(_DWORD *)v13 == 2)
        {
          WTF::StringImpl::destroy(v13, v9);
          goto LABEL_15;
        }
      }
      *(_DWORD *)v13 = v14;
    }
LABEL_15:
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v16, v9);
    return;
  }
  *((_BYTE *)this + 121) = 0;
  v5 = v16;
  if (!*(_DWORD *)(v16 + 20))
  {
    v8 = 0;
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v16 + 8) + 8);
  v7 = *(unsigned int *)(v6 + 24);
  if ((_DWORD)v7 != -1)
  {
    v18 = (WTF::StringImpl *)&v17;
    v8 = (const char *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v18, v6 + 8);
LABEL_7:
    WebCore::TextResourceDecoder::decodeAndFlush(v4, v8, *(_QWORD *)(v5 + 48), &v18);
    goto LABEL_12;
  }
LABEL_22:
  v15 = (WebCore::NetworkResourcesData *)std::__throw_bad_variant_access[abi:sn180100]();
  WebCore::NetworkResourcesData::~NetworkResourcesData(v15);
}

void WebCore::NetworkResourcesData::~NetworkResourcesData(WebCore::NetworkResourcesData *this)
{
  WTF::StringImpl *v2;
  WTF *v3;
  uint64_t v4;
  WebCore::NetworkResourcesData::ResourceData **v5;
  WebCore::NetworkResourcesData::ResourceData *v6;
  WTF *v7;
  void *v8;
  WTF::StringImpl *v9;
  _BYTE v10[16];

  v10[0] = 0;
  v10[8] = 0;
  WebCore::NetworkResourcesData::clear((uint64_t)this, (WTF::StringImpl *)v10);
  v3 = (WTF *)*((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *((unsigned int *)this + 10);
    if ((_DWORD)v4)
    {
      v5 = (WebCore::NetworkResourcesData::ResourceData **)((char *)v3 + 8);
      do
      {
        v6 = *v5;
        *v5 = 0;
        if (v6)
        {
          WebCore::NetworkResourcesData::ResourceData::~ResourceData(v6, v2);
          WTF::fastFree(v7, v8);
        }
        v9 = *(v5 - 1);
        *(v5 - 1) = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v2);
          else
            *(_DWORD *)v9 -= 2;
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree(v3, v2);
  }
  WTF::Deque<WTF::String,0ul>::~Deque((unint64_t *)this, v2);
}

uint64_t WebCore::NetworkResourcesData::clear(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result;
  WTF::StringImpl *v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;
  _QWORD *v10;
  WTF *v11;
  uint64_t v12;
  WebCore::NetworkResourcesData::ResourceData **v13;
  WebCore::NetworkResourcesData::ResourceData *v14;
  WTF *v15;
  void *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  WTF *v21;
  WTF::StringImpl *v22;
  WTF *v23;
  _DWORD *v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;

  result = (uint64_t)WTF::Deque<WTF::String,0ul>::clear((WTF::StringImpl *)a1, a2);
  *(_QWORD *)(a1 + 56) = 0;
  if (*((_BYTE *)a2 + 8))
  {
    v28 = 0;
    v29 = 0;
    if (*(_DWORD *)(a1 + 44))
    {
      v7 = *(unsigned int *)(a1 + 40);
      if ((_DWORD)v7)
      {
        v8 = 16 * v7;
        for (i = *(_QWORD **)(a1 + 32); !*i; i += 2)
        {
          v8 -= 16;
          if (!v8)
            return result;
        }
      }
      else
      {
        i = *(_QWORD **)(a1 + 32);
      }
      v18 = *(_QWORD *)(a1 + 32) + 16 * v7;
      if (i != (_QWORD *)v18)
      {
LABEL_22:
        if (!*((_BYTE *)a2 + 8))
        {
          __break(1u);
          return result;
        }
        result = WTF::equal(*(WTF **)(i[1] + 8), *(const WTF::StringImpl **)a2, v6);
        if ((result & 1) == 0)
        {
          v20 = HIDWORD(v29);
          if (HIDWORD(v29) == (_DWORD)v29)
          {
            result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v28, HIDWORD(v29) + 1, (unint64_t)i);
            v20 = HIDWORD(v29);
            v21 = v28;
            v22 = *(WTF::StringImpl **)result;
            if (*(_QWORD *)result)
              *(_DWORD *)v22 += 2;
            *((_QWORD *)v21 + v20) = v22;
          }
          else
          {
            v23 = v28;
            v24 = (_DWORD *)*i;
            if (*i)
              *v24 += 2;
            *((_QWORD *)v23 + v20) = v24;
          }
          HIDWORD(v29) = v20 + 1;
        }
        while (1)
        {
          i += 2;
          if (i == (_QWORD *)v18)
            break;
          if (*i)
          {
            if (i != (_QWORD *)v18)
              goto LABEL_22;
            break;
          }
        }
        v25 = (WTF::StringImpl **)v28;
        if (!HIDWORD(v29))
          goto LABEL_41;
        v26 = 8 * HIDWORD(v29);
        do
        {
          result = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 32), v25, v6);
          if (*(_QWORD *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 40) != result)
            result = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(a1 + 32, (WTF::StringImpl **)result);
          ++v25;
          v26 -= 8;
        }
        while (v26);
        v25 = (WTF::StringImpl **)v28;
        if (!HIDWORD(v29))
        {
LABEL_41:
          if (!v25)
            return result;
LABEL_51:
          v28 = 0;
          LODWORD(v29) = 0;
          return WTF::fastFree((WTF *)v25, v19);
        }
        v27 = 8 * HIDWORD(v29);
        do
        {
          result = (uint64_t)*v25;
          *v25 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v19);
            else
              *(_DWORD *)result -= 2;
          }
          ++v25;
          v27 -= 8;
        }
        while (v27);
        v25 = (WTF::StringImpl **)v28;
        if (v28)
          goto LABEL_51;
      }
    }
  }
  else
  {
    v10 = (_QWORD *)(a1 + 32);
    v11 = *(WTF **)(a1 + 32);
    if (v11)
    {
      v12 = *(unsigned int *)(a1 + 40);
      *v10 = 0;
      v10[1] = 0;
      *(_QWORD *)((char *)v10 + 13) = 0;
      if ((_DWORD)v12)
      {
        v13 = (WebCore::NetworkResourcesData::ResourceData **)((char *)v11 + 8);
        do
        {
          v14 = *v13;
          *v13 = 0;
          if (v14)
          {
            WebCore::NetworkResourcesData::ResourceData::~ResourceData(v14, v5);
            WTF::fastFree(v15, v16);
          }
          v17 = *(v13 - 1);
          *(v13 - 1) = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v5);
            else
              *(_DWORD *)v17 -= 2;
          }
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      return WTF::fastFree(v11, v5);
    }
  }
  return result;
}

WebCore::NetworkResourcesData::ResourceData *WebCore::NetworkResourcesData::resourceCreated(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3, int a4)
{
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WebCore::NetworkResourcesData::ResourceData *result;
  WTF *v13;
  void *v14;
  uint64_t v15;
  WebCore::NetworkResourcesData::ResourceData *v16;

  WebCore::NetworkResourcesData::ensureNoDataForRequestId((WebCore::NetworkResourcesData *)a1, a2, a3);
  v8 = WTF::fastMalloc((WTF *)0x88);
  v9 = *a2;
  if (*a2)
    *(_DWORD *)v9 += 2;
  *(_QWORD *)v8 = v9;
  v10 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v10 += 2;
  *(_QWORD *)(v8 + 8) = v10;
  *(_BYTE *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_BYTE *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 108) = 0;
  *(_QWORD *)(v8 + 115) = 0;
  v16 = (WebCore::NetworkResourcesData::ResourceData *)v8;
  *(_DWORD *)(v8 + 104) = a4;
  WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>(a1 + 4, a2, (const WTF::StringImpl *)&v16, (uint64_t)&v15);
  result = v16;
  v16 = 0;
  if (result)
  {
    WebCore::NetworkResourcesData::ResourceData::~ResourceData(result, v11);
    return (WebCore::NetworkResourcesData::ResourceData *)WTF::fastFree(v13, v14);
  }
  return result;
}

WTF::StringImpl *WebCore::NetworkResourcesData::ensureNoDataForRequestId(WebCore::NetworkResourcesData *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  _QWORD *v4;
  WTF::StringImpl *result;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  int v12;
  WTF *v13;
  void *v14;

  v4 = (_QWORD *)((char *)this + 32);
  result = (WTF::StringImpl *)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 4, a2, a3);
  v6 = *((unsigned int *)this + 10);
  if ((WTF::StringImpl *)(*((_QWORD *)this + 4) + 16 * v6) != result)
  {
    v7 = result;
    v8 = *((_QWORD *)result + 1);
    *((_QWORD *)result + 1) = 0;
    if ((WTF::StringImpl *)(*v4 + 16 * v6) != result)
      result = (WTF::StringImpl *)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove((uint64_t)v4, (WTF::StringImpl **)result);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 64);
      v10 = *(WTF::StringImpl **)(v8 + 32);
      if (v10)
      {
        *(_BYTE *)(v8 + 120) = 1;
        if (!v9)
          goto LABEL_12;
      }
      else
      {
        if (!v9)
        {
LABEL_15:
          WebCore::NetworkResourcesData::ResourceData::~ResourceData((WebCore::NetworkResourcesData::ResourceData *)v8, v7);
          return (WTF::StringImpl *)WTF::fastFree(v13, v14);
        }
        *(_BYTE *)(v8 + 120) = 1;
      }
      v11 = *(_DWORD *)(v9 + 48);
      WebCore::SharedBufferBuilder::reset((WebCore::SharedBufferBuilder *)(v8 + 64), v7);
      v10 = *(WTF::StringImpl **)(v8 + 32);
      if (!v10)
      {
LABEL_14:
        *((_QWORD *)this + 7) -= v11;
        goto LABEL_15;
      }
LABEL_12:
      v12 = *(_DWORD *)v10;
      v11 = *((_DWORD *)v10 + 1) << ((*((_DWORD *)v10 + 4) & 4) == 0);
      *(_QWORD *)(v8 + 32) = 0;
      if (v12 == 2)
        WTF::StringImpl::destroy(v10, v7);
      else
        *(_DWORD *)v10 = v12 - 2;
      goto LABEL_14;
    }
  }
  return result;
}

WebCore::NetworkResourcesData::ResourceData *WebCore::NetworkResourcesData::resourceCreated(WebCore::NetworkResourcesData *this, WTF::StringImpl **a2, const WTF::String *a3, WebCore::CachedResource *a4)
{
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WebCore::NetworkResourcesData::ResourceData *result;
  WTF *v13;
  void *v14;
  uint64_t v15;
  WebCore::NetworkResourcesData::ResourceData *v16;

  WebCore::NetworkResourcesData::ensureNoDataForRequestId(this, a2, a3);
  v8 = WTF::fastMalloc((WTF *)0x88);
  v9 = *a2;
  if (*a2)
    *(_DWORD *)v9 += 2;
  *(_QWORD *)v8 = v9;
  v10 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v10 += 2;
  *(_QWORD *)(v8 + 8) = v10;
  *(_BYTE *)(v8 + 88) = 0;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_BYTE *)(v8 + 80) = 0;
  *(_DWORD *)(v8 + 104) = 12;
  *(_QWORD *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 108) = 0;
  *(_QWORD *)(v8 + 115) = 0;
  v16 = (WebCore::NetworkResourcesData::ResourceData *)v8;
  *(_QWORD *)(v8 + 96) = a4;
  WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>((uint64_t *)this + 4, a2, (const WTF::StringImpl *)&v16, (uint64_t)&v15);
  result = v16;
  v16 = 0;
  if (result)
  {
    WebCore::NetworkResourcesData::ResourceData::~ResourceData(result, v11);
    return (WebCore::NetworkResourcesData::ResourceData *)WTF::fastFree(v13, v14);
  }
  return result;
}

void WebCore::NetworkResourcesData::responseReceived(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3, uint64_t a4, int a5, char a6)
{
  WTF *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  const WTF::String *v26;
  const WTF::String *v27;
  const WTF::String *v28;
  void *v29;
  WTF *v30;
  WTF *v31;
  int v32;
  const void *v33;
  const void *v34;
  WTF *v35;
  WebCore::HTMLMetaCharsetParser *v36;
  WTF *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  WTF *v41;
  WebCore::HTMLMetaCharsetParser *v42;
  WTF *v43;
  void *v44;
  uint64_t v45;
  WTF *v46;

  if (!*a2)
    return;
  v10 = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 32), a2, a3);
  if (!v10)
    return;
  v12 = v10;
  v13 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v13 += 2;
  v14 = (WTF::StringImpl *)*((_QWORD *)v10 + 2);
  *((_QWORD *)v12 + 2) = v13;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  WebCore::ResourceResponse::platformLazyInit(a4, 1);
  v16 = *(_DWORD **)a4;
  if (*(_QWORD *)a4)
    *v16 += 2;
  v17 = (WTF::StringImpl *)*((_QWORD *)v12 + 3);
  *((_QWORD *)v12 + 3) = v16;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  WebCore::ResourceResponse::platformLazyInit(a4, 1);
  *((_DWORD *)v12 + 27) = *(__int16 *)(a4 + 136);
  WebCore::ResourceResponse::platformLazyInit(a4, 2);
  v19 = *(_DWORD **)(a4 + 64);
  if (v19)
    *v19 += 2;
  v20 = (WTF::StringImpl *)*((_QWORD *)v12 + 14);
  *((_QWORD *)v12 + 14) = v19;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  *((_DWORD *)v12 + 26) = a5;
  *((_BYTE *)v12 + 122) = a6;
  WebCore::ResourceResponse::platformLazyInit(a4, 1);
  v22 = *(_DWORD **)(a4 + 40);
  if (v22)
    *v22 += 2;
  v23 = (WTF::StringImpl *)*((_QWORD *)v12 + 6);
  *((_QWORD *)v12 + 6) = v22;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      v23 = (WTF::StringImpl *)WTF::StringImpl::destroy(v23, v21);
    else
      *(_DWORD *)v23 -= 2;
  }
  WTF::WallTime::now(v23);
  *((_QWORD *)v12 + 16) = v24;
  WebCore::ResourceResponse::platformLazyInit(a4, 1);
  v25 = *(_QWORD *)(a4 + 40);
  if (v25 && WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>(v25, (uint64_t)"text/", 5uLL)
    || WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2> [16]>::contains<WTF::String>(WebCore::MIMETypeRegistry::isSupportedJavaScriptMIMEType(WTF::String const&)::supportedJavaScriptMIMETypes, (uint64_t *)(a4 + 40))|| (WebCore::MIMETypeRegistry::isSupportedJSONMIMEType((WebCore::MIMETypeRegistry *)(a4 + 40), v26) & 1) != 0|| (WebCore::MIMETypeRegistry::isXMLMIMEType((WebCore::MIMETypeRegistry *)(a4 + 40), v27) & 1) != 0|| WebCore::MIMETypeRegistry::isTextMediaPlaylistMIMEType((WebCore::MIMETypeRegistry *)(a4 + 40), v28))
  {
    WebCore::ResourceResponse::platformLazyInit(a4, 1);
    WebCore::ResourceResponse::platformLazyInit(a4, 1);
    WebCore::InspectorNetworkAgent::createTextDecoder((WebCore::InspectorNetworkAgent *)(a4 + 40), (const WTF::String *)(a4 + 56), (uint64_t *)&v46);
    v30 = v46;
    v46 = 0;
    v31 = (WTF *)*((_QWORD *)v12 + 7);
    *((_QWORD *)v12 + 7) = v30;
    if (v31)
    {
      v32 = *(_DWORD *)v31 - 1;
      if (*(_DWORD *)v31 != 1)
        goto LABEL_31;
      v35 = (WTF *)*((_QWORD *)v31 + 9);
      if (v35)
      {
        *((_QWORD *)v31 + 9) = 0;
        *((_DWORD *)v31 + 20) = 0;
        WTF::fastFree(v35, v29);
      }
      v36 = (WebCore::HTMLMetaCharsetParser *)*((_QWORD *)v31 + 6);
      *((_QWORD *)v31 + 6) = 0;
      if (v36)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v36, (WTF::StringImpl *)v29);
        WTF::fastFree(v37, v38);
      }
      v39 = *((_QWORD *)v31 + 5);
      *((_QWORD *)v31 + 5) = 0;
      if (v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      WTF::fastFree(v31, v29);
      v31 = v46;
      v46 = 0;
      if (!v31)
        goto LABEL_32;
      v32 = *(_DWORD *)v31 - 1;
      if (*(_DWORD *)v31 == 1)
      {
        v41 = (WTF *)*((_QWORD *)v31 + 9);
        if (v41)
        {
          *((_QWORD *)v31 + 9) = 0;
          *((_DWORD *)v31 + 20) = 0;
          WTF::fastFree(v41, v40);
        }
        v42 = (WebCore::HTMLMetaCharsetParser *)*((_QWORD *)v31 + 6);
        *((_QWORD *)v31 + 6) = 0;
        if (v42)
        {
          WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v42, (WTF::StringImpl *)v40);
          WTF::fastFree(v43, v44);
        }
        v45 = *((_QWORD *)v31 + 5);
        *((_QWORD *)v31 + 5) = 0;
        if (v45)
          (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
        WTF::fastFree(v31, v40);
      }
      else
      {
LABEL_31:
        *(_DWORD *)v31 = v32;
      }
    }
  }
LABEL_32:
  if (*(_BYTE *)(a4 + 128))
  {
    v33 = *(const void **)(a4 + 120);
    if (*((_BYTE *)v12 + 88))
    {
      if (v33)
        CFRetain(v33);
      v34 = (const void *)*((_QWORD *)v12 + 10);
      *((_QWORD *)v12 + 10) = v33;
      if (v34)
        CFRelease(v34);
    }
    else
    {
      *((_QWORD *)v12 + 10) = v33;
      if (v33)
        CFRetain(v33);
      *((_BYTE *)v12 + 88) = 1;
    }
  }
}

uint64_t WebCore::NetworkResourcesData::setResourceContent(uint64_t this, WTF::StringImpl **a2, const WTF::String *a3, char a4)
{
  BOOL v4;
  WebCore::NetworkResourcesData *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unsigned int v15;
  int v16;
  WTF::StringImpl *v17;
  _DWORD *v18;

  if (*(_QWORD *)a3)
    v4 = *a2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v8 = (WebCore::NetworkResourcesData *)this;
    this = (uint64_t)WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(this + 32), a2, a3);
    if (this)
    {
      v10 = this;
      if (*(_QWORD *)a3)
      {
        v11 = (*(_DWORD *)(*(_QWORD *)a3 + 4) << ((*(_DWORD *)(*(_QWORD *)a3 + 16) & 4) == 0));
        if (*((_QWORD *)v8 + 9) < v11)
          return this;
      }
      else
      {
        v11 = 0;
      }
      if (!*(_BYTE *)(this + 120))
      {
        this = WebCore::NetworkResourcesData::ensureFreeSpace(v8, (WTF::StringImpl *)v11, v9);
        if ((_DWORD)this)
        {
          if (!*(_BYTE *)(v10 + 120))
          {
            v13 = *(_QWORD *)(v10 + 64);
            v14 = *(WTF::StringImpl **)(v10 + 32);
            if (v14)
            {
              if (!v13)
                goto LABEL_16;
            }
            else if (!v13)
            {
LABEL_19:
              WTF::Deque<WTF::String,0ul>::append<WTF::String const&>((uint64_t)v8, (_DWORD **)a2);
              v18 = *(_DWORD **)a3;
              if (*(_QWORD *)a3)
                *v18 += 2;
              this = *(_QWORD *)(v10 + 32);
              *(_QWORD *)(v10 + 32) = v18;
              if (this)
              {
                if (*(_DWORD *)this == 2)
                  this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v17);
                else
                  *(_DWORD *)this -= 2;
              }
              *(_BYTE *)(v10 + 121) = a4;
              *((_QWORD *)v8 + 7) += v11;
              return this;
            }
            v15 = *(_DWORD *)(v13 + 48);
            WebCore::SharedBufferBuilder::reset((WebCore::SharedBufferBuilder *)(v10 + 64), v12);
            v14 = *(WTF::StringImpl **)(v10 + 32);
            if (!v14)
            {
LABEL_18:
              *((_QWORD *)v8 + 7) -= v15;
              goto LABEL_19;
            }
LABEL_16:
            v16 = *(_DWORD *)v14;
            v15 = *((_DWORD *)v14 + 1) << ((*((_DWORD *)v14 + 4) & 4) == 0);
            *(_QWORD *)(v10 + 32) = 0;
            if (v16 == 2)
              WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
            else
              *(_DWORD *)v14 = v16 - 2;
            goto LABEL_18;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::NetworkResourcesData::ensureFreeSpace(WebCore::NetworkResourcesData *this, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  WebCore::SharedBufferBuilder *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  uint64_t result;
  WTF::StringImpl *v22;

  v4 = *((_QWORD *)this + 8);
  if (v4 < (unint64_t)a2 || v4 - *((_QWORD *)this + 7) >= (unint64_t)a2)
    return v4 >= (unint64_t)a2;
  while (1)
  {
    v6 = *(_QWORD *)this;
    if (*(_QWORD *)this == *((_QWORD *)this + 1))
      break;
    v7 = *((_QWORD *)this + 2);
    v8 = *(WTF::StringImpl **)(v7 + 8 * v6);
    *(_QWORD *)(v7 + 8 * v6) = 0;
    v22 = v8;
    v9 = *((_QWORD *)this + 2);
    v10 = *(WTF::StringImpl **)(v9 + 8 * v6);
    *(_QWORD *)(v9 + 8 * v6) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, a2);
        v6 = *(_QWORD *)this;
      }
      else
      {
        *(_DWORD *)v10 -= 2;
      }
    }
    if (v6 == *((unsigned int *)this + 6) - 1)
      v11 = 0;
    else
      v11 = v6 + 1;
    *(_QWORD *)this = v11;
    if (v22)
    {
      v12 = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 4, &v22, a3);
      if (v12)
      {
        v13 = v12;
        v16 = *((_QWORD *)v12 + 8);
        v14 = (WTF *)((char *)v12 + 64);
        v15 = v16;
        *((_BYTE *)v14 + 56) = 1;
        if (v16)
        {
          v17 = *(_DWORD *)(v15 + 48);
          WebCore::SharedBufferBuilder::reset(v14, a2);
        }
        else
        {
          v17 = 0;
        }
        v18 = (WTF::StringImpl *)*((_QWORD *)v13 + 4);
        if (v18)
        {
          v19 = *(_DWORD *)v18;
          v17 = *((_DWORD *)v18 + 1) << ((*((_DWORD *)v18 + 4) & 4) == 0);
          *((_QWORD *)v13 + 4) = 0;
          if (v19 == 2)
            WTF::StringImpl::destroy(v18, a2);
          else
            *(_DWORD *)v18 = v19 - 2;
        }
        *((_QWORD *)this + 7) -= v17;
      }
      v20 = v22;
      v22 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, a2);
        else
          *(_DWORD *)v20 -= 2;
      }
    }
    if (*((_QWORD *)this + 8) - *((_QWORD *)this + 7) >= (unint64_t)a2)
      return v4 >= (unint64_t)a2;
  }
  result = 80;
  __break(0xC471u);
  return result;
}

WTF *WebCore::NetworkResourcesData::maybeAddResourceData(WebCore::NetworkResourcesData *this, WTF::StringImpl **a2, const WebCore::SharedBuffer *a3)
{
  WTF *v6;
  void *v7;
  const WTF::StringImpl *v8;
  WTF *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  int v16;
  WTF *v18;
  WebCore::HTMLMetaCharsetParser *v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  if (!*a2)
    return 0;
  v6 = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 4, a2, a3);
  v9 = v6;
  if (v6)
  {
    if (!*((_BYTE *)v6 + 122))
    {
      v10 = *((_QWORD *)v6 + 7);
      if (v10)
      {
        v11 = (*(_DWORD *)v10)++;
        if (v11)
        {
          *(_DWORD *)v10 = v11;
        }
        else
        {
          v18 = *(WTF **)(v10 + 72);
          if (v18)
          {
            *(_QWORD *)(v10 + 72) = 0;
            *(_DWORD *)(v10 + 80) = 0;
            WTF::fastFree(v18, v7);
          }
          v19 = *(WebCore::HTMLMetaCharsetParser **)(v10 + 48);
          *(_QWORD *)(v10 + 48) = 0;
          if (v19)
          {
            WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v19, (WTF::StringImpl *)v7);
            WTF::fastFree(v20, v21);
          }
          v22 = *(_QWORD *)(v10 + 40);
          *(_QWORD *)(v10 + 40) = 0;
          if (v22)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          WTF::fastFree((WTF *)v10, v7);
        }
      }
      else
      {
        v23 = *((_QWORD *)v6 + 12);
        if (!v23 || (*(_BYTE *)(v23 + 130) & 8) == 0)
          return v9;
      }
    }
    v12 = *((_QWORD *)v9 + 8);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 48);
      v14 = (WTF::StringImpl **)((char *)a3 + 48);
      if ((unint64_t)(*((_QWORD *)a3 + 6) + v13) > *((_QWORD *)this + 9))
      {
        *((_BYTE *)v9 + 120) = 1;
        WebCore::SharedBufferBuilder::reset((WTF *)((char *)v9 + 64), v7);
LABEL_13:
        v15 = (WTF::StringImpl *)*((_QWORD *)v9 + 4);
        if (v15)
        {
          v16 = *(_DWORD *)v15;
          LODWORD(v13) = *((_DWORD *)v15 + 1) << ((*((_DWORD *)v15 + 4) & 4) == 0);
          *((_QWORD *)v9 + 4) = 0;
          if (v16 == 2)
            WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v7);
          else
            *(_DWORD *)v15 = v16 - 2;
        }
        *((_QWORD *)this + 7) -= v13;
      }
    }
    else
    {
      v14 = (WTF::StringImpl **)((char *)a3 + 48);
      if (*((_QWORD *)a3 + 6) > *((_QWORD *)this + 9))
      {
        LODWORD(v13) = 0;
        *((_BYTE *)v9 + 120) = 1;
        goto LABEL_13;
      }
    }
    if (!*((_BYTE *)v9 + 120)
      && WebCore::NetworkResourcesData::ensureFreeSpace(this, *v14, v8)
      && !*((_BYTE *)v9 + 120))
    {
      WTF::Deque<WTF::String,0ul>::append<WTF::String const&>((uint64_t)this, (_DWORD **)a2);
      WebCore::SharedBufferBuilder::ensureBuffer((uint64_t *)v9 + 8);
      WebCore::FragmentedSharedBuffer::append(*((WebCore::FragmentedSharedBuffer **)v9 + 8), a3);
      *((_QWORD *)this + 7) += *((_QWORD *)a3 + 6);
    }
  }
  return v9;
}

uint64_t WebCore::NetworkResourcesData::maybeDecodeDataToContent(uint64_t this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::SharedBufferBuilder *v5;
  void *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;

  if (*a2)
  {
    v3 = this;
    this = (uint64_t)WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(this + 32), a2, a3);
    if (this)
    {
      v4 = this;
      v5 = (WebCore::SharedBufferBuilder *)(this + 64);
      if (*(_QWORD *)(this + 64))
      {
        WebCore::NetworkResourcesData::ResourceData::decodeDataToContent((WebCore::NetworkResourcesData::ResourceData *)this);
        *(_QWORD *)(v3 + 56) += v7;
        this = *(_QWORD *)(v4 + 32);
        if (this)
        {
          v8 = (*(_DWORD *)(this + 4) << (((*(_DWORD *)(this + 16) >> 2) & 1) == 0));
          if (*(_QWORD *)(v3 + 72) < v8)
          {
            *(_BYTE *)(v4 + 120) = 1;
            v9 = *(_QWORD *)(v4 + 64);
            if (v9)
            {
              LODWORD(v8) = *(_DWORD *)(v9 + 48);
              WebCore::SharedBufferBuilder::reset(v5, v6);
              this = *(_QWORD *)(v4 + 32);
              if (!this)
              {
LABEL_11:
                *(_QWORD *)(v3 + 56) -= v8;
                return this;
              }
              LODWORD(v8) = *(_DWORD *)(this + 4) << (((*(_DWORD *)(this + 16) >> 2) & 1) == 0);
            }
            *(_QWORD *)(v4 + 32) = 0;
            if (*(_DWORD *)this == 2)
              this = WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v6);
            else
              *(_DWORD *)this -= 2;
            goto LABEL_11;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::NetworkResourcesData::ResourceData::setBuffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v3;
  if (result)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)result));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)result);
      v7 = *(unsigned int *)(result + 20);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(result + 8);
        v9 = v8 + 16 * v7;
        do
        {
          v10 = *(unsigned int **)(v8 + 8);
          *(_QWORD *)(v8 + 8) = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              v16 = v9;
              v17 = v8;
              v19 = result;
              atomic_store(1u, v10);
              v18 = (WTF *)v10;
              v13 = v10[6];
              if ((_DWORD)v13 != -1)
                ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_3[v13])(&v21, v10 + 2);
              *((_DWORD *)v18 + 6) = -1;
              WTF::fastFree(v18, a2);
              result = v19;
              v9 = v16;
              v8 = v17;
            }
          }
          v8 += 16;
        }
        while (v8 != v9);
      }
      v14 = *(WTF **)(result + 8);
      if ((WTF *)(result + 24) != v14 && v14 != 0)
      {
        *(_QWORD *)(result + 8) = 0;
        *(_DWORD *)(result + 16) = 0;
        v20 = result;
        WTF::fastFree(v14, a2);
        result = v20;
      }
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WebCore::NetworkResourcesData::dataForURL(uint64_t this, const WTF::StringImpl **a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const WTF::StringImpl *v10;
  WTF *v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!*a2)
    return 0;
  v2 = *(unsigned int *)(this + 44);
  if (!(_DWORD)v2)
    return 0;
  v4 = *(_QWORD **)(this + 32);
  v5 = *(unsigned int *)(this + 40);
  v6 = &v4[2 * v5];
  if ((_DWORD)v5)
  {
    v7 = 16 * v5;
    while (!*v4)
    {
      v4 += 2;
      v7 -= 16;
      if (!v7)
      {
        v4 = v6;
        break;
      }
    }
  }
  if (!(v2 >> 29))
  {
    v8 = WTF::fastMalloc((WTF *)(8 * v2));
    v11 = (WTF *)v8;
    if (v4 == v6)
      goto LABEL_25;
    v12 = 0;
    v13 = 1;
LABEL_11:
    v14 = v13;
    *(_QWORD *)(v8 + 8 * v12++) = v4[1];
    while (1)
    {
      v4 += 2;
      if (v4 == v6)
        break;
      if (*v4)
      {
        ++v13;
        if (v4 != v6)
          goto LABEL_11;
        break;
      }
    }
    if (!v12)
    {
LABEL_25:
      v15 = 0;
    }
    else
    {
      v15 = 0;
      v16 = 8 * v14;
      v17 = v8;
      do
      {
        v18 = *(_QWORD *)v17;
        if (WTF::equal(*(WTF **)(*(_QWORD *)v17 + 24), *a2, v10)
          && *(_DWORD *)(v18 + 108) != 304
          && (!v15 || *(double *)(v18 + 128) > *(double *)(v15 + 128)))
        {
          v15 = v18;
        }
        v17 += 8;
        v16 -= 8;
      }
      while (v16);
    }
    WTF::fastFree(v11, v9);
    return v15;
  }
  __break(0xC471u);
  return this;
}

uint64_t WebCore::NetworkResourcesData::removeCachedResource@<X0>(uint64_t this@<X0>, WebCore::CachedResource *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  if (*(_DWORD *)(this + 44))
  {
    v5 = *(unsigned int *)(this + 40);
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      for (i = *(_QWORD **)(this + 32); !*i; i += 2)
      {
        v6 -= 16;
        if (!v6)
          return this;
      }
    }
    else
    {
      i = *(_QWORD **)(this + 32);
    }
    v8 = *(_QWORD *)(this + 32) + 16 * v5;
    if (i != (_QWORD *)v8)
    {
      v9 = 0;
      LODWORD(v10) = 0;
LABEL_10:
      v11 = i[1];
      if (*(WebCore::CachedResource **)(v11 + 96) == a2)
      {
        *(_QWORD *)(v11 + 96) = 0;
        if ((_DWORD)v10 == *(_DWORD *)(a3 + 8))
        {
          this = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v10 + 1, (unint64_t)i);
          v10 = *(unsigned int *)(a3 + 12);
          v9 = *(_QWORD *)a3;
          v12 = *(_DWORD **)this;
          if (*(_QWORD *)this)
            *v12 += 2;
          *(_QWORD *)(v9 + 8 * v10) = v12;
        }
        else
        {
          v13 = (_DWORD *)*i;
          if (*i)
            *v13 += 2;
          *(_QWORD *)(v9 + 8 * v10) = v13;
        }
        LODWORD(v10) = v10 + 1;
        *(_DWORD *)(a3 + 12) = v10;
      }
      while (1)
      {
        i += 2;
        if (i == (_QWORD *)v8)
          break;
        if (*i)
        {
          if (i != (_QWORD *)v8)
            goto LABEL_10;
          return this;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::PageDebugger::PageDebugger(WebCore::PageDebugger *this, WebCore::Page *a2)
{
  JSC::VM *v4;
  uint64_t result;
  uint64_t v7;

  v4 = (JSC::VM *)WebCore::g_commonVMOrNull;
  if (WebCore::g_commonVMOrNull)
    goto LABEL_9;
  WTF::RunLoop::webIfExists(this);
  JSC::VM::create();
  v4 = (JSC::VM *)v7;
  WebCore::g_commonVMOrNull = v7;
  if (__ldaxr((unsigned int *)(v7 + 1096)))
  {
    __clrex();
LABEL_5:
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v7 + 192));
    goto LABEL_6;
  }
  if (__stlxr(4u, (unsigned int *)(v7 + 1096)))
    goto LABEL_5;
LABEL_6:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v7 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v7 + 584));
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v7, 0);
LABEL_9:
  result = JSC::Debugger::Debugger(this, v4);
  *(_QWORD *)this = off_1E33EEB28;
  *((_QWORD *)this + 29) = a2;
  return result;
}

uint64_t WebCore::PageDebugger::attachDebugger(WebCore::PageDebugger *this)
{
  return WebCore::Page::setDebugger(*((_QWORD *)this + 29), this);
}

uint64_t WebCore::PageDebugger::detachDebugger(WebCore::PageDebugger *this, char a2)
{
  uint64_t result;
  _BYTE v5[8];

  result = WebCore::Page::setDebugger(*((_QWORD *)this + 29), 0);
  if ((a2 & 1) == 0)
  {
    MEMORY[0x19AEA3294](v5, *((_QWORD *)this + 2));
    JSC::Debugger::recompileAllJSFunctions(this);
    return MEMORY[0x19AEA32A0](v5);
  }
  return result;
}

uint64_t WebCore::PageDebugger::recompileAllJSFunctions(WebCore::PageDebugger *this)
{
  _BYTE v3[8];

  MEMORY[0x19AEA3294](v3, *((_QWORD *)this + 2));
  JSC::Debugger::recompileAllJSFunctions(this);
  return MEMORY[0x19AEA32A0](v3);
}

_QWORD *WebCore::PageDebugger::didPause(WebCore::PageDebugger *this, JSC::JSGlobalObject *a2)
{
  WebCore::Page *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = (WebCore::Page *)*((_QWORD *)this + 29);
  v3 = *((_QWORD *)v2 + 66);
  if (!v3 || (v4 = *(_QWORD **)(v3 + 8)) == 0)
  {
    WebCore::Page::initGroup(v2);
    v4 = *(_QWORD **)(*((_QWORD *)v2 + 66) + 8);
  }
  return WebCore::PageDebugger::setJavaScriptPaused(v4, (const WebCore::PageGroup *)1);
}

_QWORD *WebCore::PageDebugger::setJavaScriptPaused(_QWORD *this, const WebCore::PageGroup *a2)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  WebCore::EventLoopTaskGroup *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = (int)a2;
  v3 = this;
  v4 = this[2];
  if (!v4)
  {
    v5 = 0;
    v6 = 0;
LABEL_3:
    v7 = v5;
    v5 = v4 + 8 * v6;
    goto LABEL_4;
  }
  v6 = *(unsigned int *)(v4 - 4);
  v5 = v4 + 8 * v6;
  if (!*(_DWORD *)(v4 - 12))
    goto LABEL_3;
  if (!(_DWORD)v6)
  {
    v31 = 0;
    v7 = this[2];
    goto LABEL_81;
  }
  v30 = 8 * v6;
  v7 = this[2];
  while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
  {
    v7 += 8;
    v30 -= 8;
    if (!v30)
    {
      v7 = v5;
      break;
    }
  }
LABEL_4:
  if (!v4)
  {
    v8 = 0;
    goto LABEL_6;
  }
  v31 = *(unsigned int *)(v4 - 4);
LABEL_81:
  v8 = v4 + 8 * v31;
LABEL_6:
  if (v8 != v7)
  {
    while (!*(_QWORD *)(*(_QWORD *)v7 + 8))
    {
      v9 = v7 + 8;
      v7 = v5;
      if (v9 != v5)
      {
        v7 = v9;
        while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
        {
          v7 += 8;
          if (v7 == v5)
          {
            v7 = v5;
            break;
          }
        }
      }
      if (v7 == v8)
      {
        v7 = v8;
        break;
      }
    }
  }
  if (v4)
    v10 = v4 + 8 * *(unsigned int *)(v4 - 4);
  else
    v10 = 0;
  if (v7 != v10)
  {
    if ((_DWORD)a2)
      v11 = 4;
    else
      v11 = 5;
    do
    {
      v12 = *(_QWORD *)(*(_QWORD *)v7 + 8);
      v13 = *(_QWORD *)(v12 + 160);
      if (v13)
      {
        while (1)
        {
          do
          {
LABEL_22:
            v14 = (_QWORD *)v13;
            if (!*(_BYTE *)(v13 + 144))
            {
              v17 = *(_QWORD **)(*(_QWORD *)(v13 + 304) + 16);
              v18 = v17[37];
              if (!v18 || (*(_BYTE *)(v18 + 268) & 0x10) == 0)
              {
                v19 = v17[3];
                if (v19 && *(_QWORD *)(v19 + 8))
                {
                  v20 = v17[17];
                  v21 = *(_BYTE *)(v20 + 245) ? *(_BYTE *)(v20 + 244) != 0 : (*(_QWORD *)(v20 + 688) >> 52) & 1;
                  if ((*(unsigned int (**)(_QWORD, _BOOL8))(**(_QWORD **)(v17[35] + 16) + 968))(*(_QWORD *)(v17[35] + 16), v21))
                  {
                    v22 = v14[37];
                    *(_BYTE *)(v14[38] + 32) = v2;
                    if (v2)
                    {
                      WebCore::Document::suspendScriptedAnimationControllerCallbacks((WebCore::ScriptedAnimationController *)v22);
                      WebCore::Document::suspendActiveDOMObjects((WebCore::Document *)v22, 0);
                    }
                    else
                    {
                      v23 = *(WebCore::EventLoopTaskGroup **)(v22 + 2952);
                      if (v23)
                        WebCore::EventLoopTaskGroup::resume(v23);
                      WebCore::ScriptExecutionContext::resumeActiveDOMObjects((unsigned __int8 *)(v22 + 192), 0);
                      if (*(_BYTE *)(v22 + 3415))
                      {
                        *(_BYTE *)(v22 + 3415) = 0;
                        v24 = *(_QWORD *)(v22 + 2352);
                        if (v24)
                        {
                          v25 = *(_QWORD *)(v24 + 16);
                          if (v25)
                          {
                            if (*(_DWORD *)(v25 - 12))
                              (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v24 + 32) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(v24 + 32) + 8));
                          }
                        }
                        v26 = *(_QWORD *)(v22 + 2368);
                        if (v26)
                        {
                          v27 = *(_QWORD *)(v26 + 16);
                          if (v27)
                          {
                            if (*(_DWORD *)(v27 - 12))
                              (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v26 + 32) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(v26 + 32) + 8));
                          }
                        }
                      }
                      WebCore::Document::resumeScriptedAnimationControllerCallbacks((WebCore::ScriptedAnimationController *)v22);
                    }
                  }
                }
              }
            }
            v13 = v14[11];
          }
          while (v13);
          v15 = *(_QWORD *)(v14[6] + 8);
          if (!v15)
            break;
          v13 = v14[9];
          if (!v13)
          {
            while (1)
            {
              v16 = *(_QWORD *)(v15 + 56);
              if (!v16)
                goto LABEL_52;
              v15 = *(_QWORD *)(v16 + 8);
              if (!v15)
                goto LABEL_52;
              v13 = *(_QWORD *)(v15 + 72);
              if (v13)
                goto LABEL_22;
            }
          }
        }
      }
LABEL_52:
      this = *(_QWORD **)(*(_QWORD *)(v12 + 80) + 96);
      if (this)
        this = (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v11))();
      v28 = v5;
      if (v7 + 8 != v5)
      {
        v28 = v7 + 8;
        while ((unint64_t)(*(_QWORD *)v28 + 1) <= 1)
        {
          v28 += 8;
          if (v28 == v5)
          {
            v28 = v5;
            break;
          }
        }
      }
      v7 = v8;
      if (v28 != v8)
      {
        v7 = v28;
        if (!*(_QWORD *)(*(_QWORD *)v28 + 8))
        {
          while (1)
          {
            v29 = v7 + 8;
            v7 = v5;
            if (v29 != v5)
            {
              v7 = v29;
              while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
              {
                v7 += 8;
                if (v7 == v5)
                {
                  v7 = v5;
                  break;
                }
              }
            }
            if (v7 == v8)
              break;
            if (*(_QWORD *)(*(_QWORD *)v7 + 8))
              goto LABEL_70;
          }
          v7 = v8;
        }
      }
LABEL_70:
      ++*((_DWORD *)v3 + 6);
    }
    while (v7 != v10);
  }
  return this;
}

_QWORD *WebCore::PageDebugger::didContinue(WebCore::PageDebugger *this, JSC::JSGlobalObject *a2)
{
  WebCore::Page *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = (WebCore::Page *)*((_QWORD *)this + 29);
  v3 = *((_QWORD *)v2 + 66);
  if (!v3 || (v4 = *(_QWORD **)(v3 + 8)) == 0)
  {
    WebCore::Page::initGroup(v2);
    v4 = *(_QWORD **)(*((_QWORD *)v2 + 66) + 8);
  }
  return WebCore::PageDebugger::setJavaScriptPaused(v4, 0);
}

void WebCore::PageDebugger::runEventLoopWhilePaused(WebCore::PageDebugger *this)
{
  WebCore *v2;
  uint64_t v3;
  const __CFString *v4;
  _DWORD *v5;
  WTF::RunLoop *v6;
  uint64_t v7;
  const __CFString *v8;
  _DWORD *v9;
  WTF::RunLoop *v10;
  WTF *v11;
  void *v12;
  WTF *v13;
  void *v14;
  _BYTE v15[24];

  if (webThreadStarted == 1)
  {
    MEMORY[0x19AEA3DF8](v15, *((_QWORD *)this + 2));
    WebRunLoopEnableNested();
    v3 = WebCore::threadGlobalData(v2);
    WebCore::ThreadTimers::fireTimersInNestedEventLoop(*(uint64_t ***)(v3 + 48));
    v5 = (_DWORD *)*((_QWORD *)this + 29);
    ++*v5;
    v6 = (WTF::RunLoop *)*MEMORY[0x1E0C9B280];
    while (!*((_BYTE *)this + 8) && WTF::RunLoop::cycle(v6, v4) != 1)
      ;
    if (*v5 == 1)
    {
      WebCore::Page::~Page((uint64_t)v5);
      WTF::fastFree(v11, v12);
    }
    else
    {
      --*v5;
    }
    WebRunLoopDisableNested();
    JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)v15);
  }
  else
  {
    v7 = WebCore::threadGlobalData(this);
    WebCore::ThreadTimers::fireTimersInNestedEventLoop(*(uint64_t ***)(v7 + 48));
    v9 = (_DWORD *)*((_QWORD *)this + 29);
    ++*v9;
    v10 = (WTF::RunLoop *)*MEMORY[0x1E0C9B280];
    while (!*((_BYTE *)this + 8) && WTF::RunLoop::cycle(v10, v8) != 1)
      ;
    if (*v9 == 1)
    {
      WebCore::Page::~Page((uint64_t)v9);
      WTF::fastFree(v13, v14);
    }
    else
    {
      --*v9;
    }
  }
}

BOOL WebCore::PageDebugger::isContentScript(WebCore::PageDebugger *this, JSC::JSGlobalObject *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v2 = *((_QWORD *)a2 + 415);
  {
    v7 = *((_QWORD *)a2 + 415);
    v5 = WebCore::g_commonVMOrNull;
    if (WebCore::g_commonVMOrNull)
    {
LABEL_12:
      v3 = *(_QWORD *)(*(_QWORD *)(v5 + 41456) + 16);
      WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = v3;
      v2 = v7;
      return v2 != v3;
    }
    WTF::RunLoop::webIfExists(this);
    JSC::VM::create();
    v5 = v8;
    WebCore::g_commonVMOrNull = v8;
    if (__ldaxr((unsigned int *)(v8 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v8 + 1096)))
    {
LABEL_9:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v8 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v8 + 584));
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v8, 0);
      goto LABEL_12;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v8 + 192));
    goto LABEL_9;
  }
  v3 = WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
  return v2 != v3;
}

uint64_t JSC::Debugger::isContentScript()
{
  return 0;
}

void WebCore::PageDebugger::reportException(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3)
{
  WebCore::reportException(a2, a3, 0, 0, 0);
}

Inspector **WebCore::TimelineRecordFactory::createGenericRecord@<X0>(WebCore::TimelineRecordFactory *this@<X0>, double a2@<D0>, uint64_t *a3@<X8>)
{
  int v3;
  uint64_t v6;
  WTF::JSONImpl::Value *v7;
  WTF::StringImpl *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  Inspector::ScriptCallStack *v13;
  Inspector **result;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  WTF *v24;
  void *v25;
  _DWORD **v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD **v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  Inspector::ScriptCallStack *v35;
  _BYTE v36[16];
  char v37;

  v3 = (int)this;
  WTF::JSONImpl::Object::create(this);
  v6 = *a3;
  v7 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v7, a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), &v34, (const WTF::StringImpl *)&v35, (uint64_t)v36);
  if (v37)
  {
    v9 = (uint64_t *)(v6 + 24);
    v10 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v10 == *(_DWORD *)(v6 + 32))
    {
      v26 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v9, v10 + 1, (unint64_t)&v34);
      v10 = *(unsigned int *)(v6 + 36);
      v27 = *(_QWORD *)(v6 + 24);
      v28 = *v26;
      if (*v26)
        *v28 += 2;
      *(_QWORD *)(v27 + 8 * v10) = v28;
    }
    else
    {
      v11 = *v9;
      v12 = v34;
      if (v34)
        *(_DWORD *)v34 += 2;
      *(_QWORD *)(v11 + 8 * v10) = v12;
    }
    *(_DWORD *)(v6 + 36) = v10 + 1;
  }
  v13 = v35;
  v35 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v13;
  }
  result = (Inspector **)v34;
  v34 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (Inspector **)WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
      if (!v3)
        return result;
      goto LABEL_14;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v3)
    return result;
LABEL_14:
  v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v15 || (result = *(Inspector ***)(v15 + 96)) == 0)
    result = (Inspector **)WebCore::threadGlobalDataSlow((WebCore *)result);
  Inspector::createScriptCallStack(result[8], (JSC::JSGlobalObject *)v3);
  if (Inspector::ScriptCallStack::size(v35))
  {
    v16 = *a3;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::ScriptCallStack::buildInspectorObject(v35);
    v33 = v32;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v16 + 16), &v34, (const WTF::StringImpl *)&v33, (uint64_t)v36);
    if (v37)
    {
      v18 = (uint64_t *)(v16 + 24);
      v19 = *(unsigned int *)(v16 + 36);
      if ((_DWORD)v19 == *(_DWORD *)(v16 + 32))
      {
        v29 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v18, v19 + 1, (unint64_t)&v34);
        v19 = *(unsigned int *)(v16 + 36);
        v30 = *(_QWORD *)(v16 + 24);
        v31 = *v29;
        if (*v29)
          *v31 += 2;
        *(_QWORD *)(v30 + 8 * v19) = v31;
      }
      else
      {
        v20 = *v18;
        v21 = v34;
        if (v34)
          *(_DWORD *)v34 += 2;
        *(_QWORD *)(v20 + 8 * v19) = v21;
      }
      *(_DWORD *)(v16 + 36) = v19 + 1;
    }
    v22 = v33;
    v33 = 0;
    if (v22)
    {
      if (*v22 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v22;
    }
    v23 = v34;
    v34 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v17);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  result = (Inspector **)v35;
  v35 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      v24 = (WTF *)MEMORY[0x19AEA6024]();
      return (Inspector **)WTF::fastFree(v24, v25);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::TimelineRecordFactory::createFunctionCallData@<X0>(WebCore::TimelineRecordFactory *this@<X0>, const WTF::String *a2@<X1>, WTF::JSONImpl::Value *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  const WTF::String *v9;
  WTF::StringImpl *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _DWORD *v31;
  WTF::StringImpl *result;
  _DWORD **v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD **v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD **v39;
  uint64_t v40;
  _DWORD *v41;
  WTF::StringImpl *v42;
  _DWORD *v43;
  _QWORD v44[2];
  char v45;

  WTF::JSONImpl::Object::create(this);
  v8 = *a4;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(this, v9);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), &v42, (const WTF::StringImpl *)&v43, (uint64_t)v44);
  if (v45)
  {
    v11 = (uint64_t *)(v8 + 24);
    v12 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v12 == *(_DWORD *)(v8 + 32))
    {
      v33 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v11, v12 + 1, (unint64_t)&v42);
      v12 = *(unsigned int *)(v8 + 36);
      v34 = *(_QWORD *)(v8 + 24);
      v35 = *v33;
      if (*v33)
        *v35 += 2;
      *(_QWORD *)(v34 + 8 * v12) = v35;
    }
    else
    {
      v13 = *v11;
      v14 = v42;
      if (v42)
        *(_DWORD *)v42 += 2;
      *(_QWORD *)(v13 + 8 * v12) = v14;
    }
    *(_DWORD *)(v8 + 36) = v12 + 1;
  }
  v15 = v43;
  v43 = 0;
  if (v15)
  {
    if (*v15 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v15;
  }
  v16 = v42;
  v42 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v10);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *a4;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v42 = (WTF::StringImpl *)v44[0];
  WTF::JSONImpl::Value::create(a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v17 + 16), &v42, (const WTF::StringImpl *)&v43, (uint64_t)v44);
  if (v45)
  {
    v19 = (uint64_t *)(v17 + 24);
    v20 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v20 == *(_DWORD *)(v17 + 32))
    {
      v36 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)&v42);
      v20 = *(unsigned int *)(v17 + 36);
      v37 = *(_QWORD *)(v17 + 24);
      v38 = *v36;
      if (*v36)
        *v38 += 2;
      *(_QWORD *)(v37 + 8 * v20) = v38;
    }
    else
    {
      v21 = *v19;
      v22 = v42;
      if (v42)
        *(_DWORD *)v42 += 2;
      *(_QWORD *)(v21 + 8 * v20) = v22;
    }
    *(_DWORD *)(v17 + 36) = v20 + 1;
  }
  v23 = v43;
  v43 = 0;
  if (v23)
  {
    if (*v23 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v23;
  }
  v24 = v42;
  v42 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v18);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = *a4;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a3);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v25 + 16), &v42, (const WTF::StringImpl *)&v43, (uint64_t)v44);
  if (v45)
  {
    v27 = (uint64_t *)(v25 + 24);
    v28 = *(unsigned int *)(v25 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v25 + 32))
    {
      v39 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v27, v28 + 1, (unint64_t)&v42);
      v28 = *(unsigned int *)(v25 + 36);
      v40 = *(_QWORD *)(v25 + 24);
      v41 = *v39;
      if (*v39)
        *v41 += 2;
      *(_QWORD *)(v40 + 8 * v28) = v41;
    }
    else
    {
      v29 = *v27;
      v30 = v42;
      if (v42)
        *(_DWORD *)v42 += 2;
      *(_QWORD *)(v29 + 8 * v28) = v30;
    }
    *(_DWORD *)(v25 + 36) = v28 + 1;
  }
  v31 = v43;
  v43 = 0;
  if (v31)
  {
    if (*v31 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v31;
  }
  result = v42;
  v42 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::TimelineRecordFactory::createConsoleProfileData@<X0>(WebCore::TimelineRecordFactory *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  const WTF::String *v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  WTF::StringImpl *result;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  _BYTE v19[24];

  WTF::JSONImpl::Object::create(this);
  v5 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(this, v6);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v5 + 16), &v17, (const WTF::StringImpl *)&v18, (uint64_t)v19);
  if (v19[16])
  {
    v8 = (uint64_t *)(v5 + 24);
    v9 = *(unsigned int *)(v5 + 36);
    if ((_DWORD)v9 == *(_DWORD *)(v5 + 32))
    {
      v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v8, v9 + 1, (unint64_t)&v17);
      v9 = *(unsigned int *)(v5 + 36);
      v15 = *(_QWORD *)(v5 + 24);
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *(_QWORD *)(v15 + 8 * v9) = v16;
    }
    else
    {
      v10 = *v8;
      v11 = v17;
      if (v17)
        *(_DWORD *)v17 += 2;
      *(_QWORD *)(v10 + 8 * v9) = v11;
    }
    *(_DWORD *)(v5 + 36) = v9 + 1;
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    if (*v12 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v12;
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::TimelineRecordFactory::createProbeSampleData@<X0>(WebCore::TimelineRecordFactory *this@<X0>, WTF::JSONImpl::Value *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  WTF::StringImpl *result;
  _DWORD **v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD **v25;
  uint64_t v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  _DWORD *v29;
  _BYTE v30[16];
  char v31;

  WTF::JSONImpl::Object::create(this);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(this);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), &v28, (const WTF::StringImpl *)&v29, (uint64_t)v30);
  if (v31)
  {
    v8 = (uint64_t *)(v6 + 24);
    v9 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v9 == *(_DWORD *)(v6 + 32))
    {
      v22 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v8, v9 + 1, (unint64_t)&v28);
      v9 = *(unsigned int *)(v6 + 36);
      v23 = *(_QWORD *)(v6 + 24);
      v24 = *v22;
      if (*v22)
        *v24 += 2;
      *(_QWORD *)(v23 + 8 * v9) = v24;
    }
    else
    {
      v10 = *v8;
      v11 = v28;
      if (v28)
        *(_DWORD *)v28 += 2;
      *(_QWORD *)(v10 + 8 * v9) = v11;
    }
    *(_DWORD *)(v6 + 36) = v9 + 1;
  }
  v12 = v29;
  v29 = 0;
  if (v12)
  {
    if (*v12 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v12;
  }
  v13 = v28;
  v28 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v7);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v14 + 16), &v28, (const WTF::StringImpl *)&v29, (uint64_t)v30);
  if (v31)
  {
    v16 = (uint64_t *)(v14 + 24);
    v17 = *(unsigned int *)(v14 + 36);
    if ((_DWORD)v17 == *(_DWORD *)(v14 + 32))
    {
      v25 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v16, v17 + 1, (unint64_t)&v28);
      v17 = *(unsigned int *)(v14 + 36);
      v26 = *(_QWORD *)(v14 + 24);
      v27 = *v25;
      if (*v25)
        *v27 += 2;
      *(_QWORD *)(v26 + 8 * v17) = v27;
    }
    else
    {
      v18 = *v16;
      v19 = v28;
      if (v28)
        *(_DWORD *)v28 += 2;
      *(_QWORD *)(v18 + 8 * v17) = v19;
    }
    *(_DWORD *)(v14 + 36) = v17 + 1;
  }
  v20 = v29;
  v29 = 0;
  if (v20)
  {
    if (*v20 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v20;
  }
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::TimelineRecordFactory::createEventDispatchData@<X0>(WebCore::TimelineRecordFactory *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  const WTF::String *v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  WTF::StringImpl *result;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  _BYTE v19[24];

  WTF::JSONImpl::Object::create(this);
  v5 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WebCore::TimelineRecordFactory *)((char *)this + 24), v6);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v5 + 16), &v17, (const WTF::StringImpl *)&v18, (uint64_t)v19);
  if (v19[16])
  {
    v8 = (uint64_t *)(v5 + 24);
    v9 = *(unsigned int *)(v5 + 36);
    if ((_DWORD)v9 == *(_DWORD *)(v5 + 32))
    {
      v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v8, v9 + 1, (unint64_t)&v17);
      v9 = *(unsigned int *)(v5 + 36);
      v15 = *(_QWORD *)(v5 + 24);
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *(_QWORD *)(v15 + 8 * v9) = v16;
    }
    else
    {
      v10 = *v8;
      v11 = v17;
      if (v17)
        *(_DWORD *)v17 += 2;
      *(_QWORD *)(v10 + 8 * v9) = v11;
    }
    *(_DWORD *)(v5 + 36) = v9 + 1;
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    if (*v12 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v12;
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::TimelineRecordFactory::createGenericTimerData@<X0>(WebCore::TimelineRecordFactory *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *result;
  _DWORD **v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  _BYTE v17[24];

  WTF::JSONImpl::Object::create(this);
  v4 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(this);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v15, (const WTF::StringImpl *)&v16, (uint64_t)v17);
  if (v17[16])
  {
    v6 = (uint64_t *)(v4 + 24);
    v7 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v7 == *(_DWORD *)(v4 + 32))
    {
      v12 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v15);
      v7 = *(unsigned int *)(v4 + 36);
      v13 = *(_QWORD *)(v4 + 24);
      v14 = *v12;
      if (*v12)
        *v14 += 2;
      *(_QWORD *)(v13 + 8 * v7) = v14;
    }
    else
    {
      v8 = *v6;
      v9 = v15;
      if (v15)
        *(_DWORD *)v15 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *(_DWORD *)(v4 + 36) = v7 + 1;
  }
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::TimelineRecordFactory::createTimerInstallData@<X0>(WTF::JSONImpl::Object *a1@<X0>, WTF::JSONImpl::Value *a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  _DWORD *v30;
  WTF::StringImpl *result;
  _DWORD **v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD **v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD **v38;
  uint64_t v39;
  _DWORD *v40;
  WTF::StringImpl *v41;
  _DWORD *v42;
  _QWORD v43[2];
  char v44;

  WTF::JSONImpl::Object::create(a1);
  v8 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a1);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), &v41, (const WTF::StringImpl *)&v42, (uint64_t)v43);
  if (v44)
  {
    v10 = (uint64_t *)(v8 + 24);
    v11 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v11 == *(_DWORD *)(v8 + 32))
    {
      v32 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, v11 + 1, (unint64_t)&v41);
      v11 = *(unsigned int *)(v8 + 36);
      v33 = *(_QWORD *)(v8 + 24);
      v34 = *v32;
      if (*v32)
        *v34 += 2;
      *(_QWORD *)(v33 + 8 * v11) = v34;
    }
    else
    {
      v12 = *v10;
      v13 = v41;
      if (v41)
        *(_DWORD *)v41 += 2;
      *(_QWORD *)(v12 + 8 * v11) = v13;
    }
    *(_DWORD *)(v8 + 36) = v11 + 1;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*v14 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v14;
  }
  v15 = v41;
  v41 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v9);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v41 = (WTF::StringImpl *)v43[0];
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(int)(a4 * 1000.0));
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v16 + 16), &v41, (const WTF::StringImpl *)&v42, (uint64_t)v43);
  if (v44)
  {
    v18 = (uint64_t *)(v16 + 24);
    v19 = *(unsigned int *)(v16 + 36);
    if ((_DWORD)v19 == *(_DWORD *)(v16 + 32))
    {
      v35 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v18, v19 + 1, (unint64_t)&v41);
      v19 = *(unsigned int *)(v16 + 36);
      v36 = *(_QWORD *)(v16 + 24);
      v37 = *v35;
      if (*v35)
        *v37 += 2;
      *(_QWORD *)(v36 + 8 * v19) = v37;
    }
    else
    {
      v20 = *v18;
      v21 = v41;
      if (v41)
        *(_DWORD *)v41 += 2;
      *(_QWORD *)(v20 + 8 * v19) = v21;
    }
    *(_DWORD *)(v16 + 36) = v19 + 1;
  }
  v22 = v42;
  v42 = 0;
  if (v22)
  {
    if (*v22 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v22;
  }
  v23 = v41;
  v41 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v17);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v24 + 16), &v41, (const WTF::StringImpl *)&v42, (uint64_t)v43);
  if (v44)
  {
    v26 = (uint64_t *)(v24 + 24);
    v27 = *(unsigned int *)(v24 + 36);
    if ((_DWORD)v27 == *(_DWORD *)(v24 + 32))
    {
      v38 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v26, v27 + 1, (unint64_t)&v41);
      v27 = *(unsigned int *)(v24 + 36);
      v39 = *(_QWORD *)(v24 + 24);
      v40 = *v38;
      if (*v38)
        *v40 += 2;
      *(_QWORD *)(v39 + 8 * v27) = v40;
    }
    else
    {
      v28 = *v26;
      v29 = v41;
      if (v41)
        *(_DWORD *)v41 += 2;
      *(_QWORD *)(v28 + 8 * v27) = v29;
    }
    *(_DWORD *)(v24 + 36) = v27 + 1;
  }
  v30 = v42;
  v42 = 0;
  if (v30)
  {
    if (*v30 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v30;
  }
  result = v41;
  v41 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::TimelineRecordFactory::createEvaluateScriptData@<X0>(WebCore::TimelineRecordFactory *this@<X0>, const WTF::String *a2@<X1>, WTF::JSONImpl::Value *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  const WTF::String *v9;
  WTF::StringImpl *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _DWORD *v31;
  WTF::StringImpl *result;
  _DWORD **v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD **v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD **v39;
  uint64_t v40;
  _DWORD *v41;
  WTF::StringImpl *v42;
  _DWORD *v43;
  _QWORD v44[2];
  char v45;

  WTF::JSONImpl::Object::create(this);
  v8 = *a4;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(this, v9);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), &v42, (const WTF::StringImpl *)&v43, (uint64_t)v44);
  if (v45)
  {
    v11 = (uint64_t *)(v8 + 24);
    v12 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v12 == *(_DWORD *)(v8 + 32))
    {
      v33 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v11, v12 + 1, (unint64_t)&v42);
      v12 = *(unsigned int *)(v8 + 36);
      v34 = *(_QWORD *)(v8 + 24);
      v35 = *v33;
      if (*v33)
        *v35 += 2;
      *(_QWORD *)(v34 + 8 * v12) = v35;
    }
    else
    {
      v13 = *v11;
      v14 = v42;
      if (v42)
        *(_DWORD *)v42 += 2;
      *(_QWORD *)(v13 + 8 * v12) = v14;
    }
    *(_DWORD *)(v8 + 36) = v12 + 1;
  }
  v15 = v43;
  v43 = 0;
  if (v15)
  {
    if (*v15 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v15;
  }
  v16 = v42;
  v42 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v10);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *a4;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v42 = (WTF::StringImpl *)v44[0];
  WTF::JSONImpl::Value::create(a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v17 + 16), &v42, (const WTF::StringImpl *)&v43, (uint64_t)v44);
  if (v45)
  {
    v19 = (uint64_t *)(v17 + 24);
    v20 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v20 == *(_DWORD *)(v17 + 32))
    {
      v36 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)&v42);
      v20 = *(unsigned int *)(v17 + 36);
      v37 = *(_QWORD *)(v17 + 24);
      v38 = *v36;
      if (*v36)
        *v38 += 2;
      *(_QWORD *)(v37 + 8 * v20) = v38;
    }
    else
    {
      v21 = *v19;
      v22 = v42;
      if (v42)
        *(_DWORD *)v42 += 2;
      *(_QWORD *)(v21 + 8 * v20) = v22;
    }
    *(_DWORD *)(v17 + 36) = v20 + 1;
  }
  v23 = v43;
  v43 = 0;
  if (v23)
  {
    if (*v23 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v23;
  }
  v24 = v42;
  v42 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v18);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = *a4;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a3);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v25 + 16), &v42, (const WTF::StringImpl *)&v43, (uint64_t)v44);
  if (v45)
  {
    v27 = (uint64_t *)(v25 + 24);
    v28 = *(unsigned int *)(v25 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v25 + 32))
    {
      v39 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v27, v28 + 1, (unint64_t)&v42);
      v28 = *(unsigned int *)(v25 + 36);
      v40 = *(_QWORD *)(v25 + 24);
      v41 = *v39;
      if (*v39)
        *v41 += 2;
      *(_QWORD *)(v40 + 8 * v28) = v41;
    }
    else
    {
      v29 = *v27;
      v30 = v42;
      if (v42)
        *(_DWORD *)v42 += 2;
      *(_QWORD *)(v29 + 8 * v28) = v30;
    }
    *(_DWORD *)(v25 + 36) = v28 + 1;
  }
  v31 = v43;
  v43 = 0;
  if (v31)
  {
    if (*v31 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v31;
  }
  result = v42;
  v42 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::TimelineRecordFactory::createTimeStampData@<X0>(WebCore::TimelineRecordFactory *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  const WTF::String *v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  WTF::StringImpl *result;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  _BYTE v19[24];

  WTF::JSONImpl::Object::create(this);
  v5 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(this, v6);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v5 + 16), &v17, (const WTF::StringImpl *)&v18, (uint64_t)v19);
  if (v19[16])
  {
    v8 = (uint64_t *)(v5 + 24);
    v9 = *(unsigned int *)(v5 + 36);
    if ((_DWORD)v9 == *(_DWORD *)(v5 + 32))
    {
      v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v8, v9 + 1, (unint64_t)&v17);
      v9 = *(unsigned int *)(v5 + 36);
      v15 = *(_QWORD *)(v5 + 24);
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *(_QWORD *)(v15 + 8 * v9) = v16;
    }
    else
    {
      v10 = *v8;
      v11 = v17;
      if (v17)
        *(_DWORD *)v17 += 2;
      *(_QWORD *)(v10 + 8 * v9) = v11;
    }
    *(_DWORD *)(v5 + 36) = v9 + 1;
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    if (*v12 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v12;
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::TimelineRecordFactory::createAnimationFrameData@<X0>(WebCore::TimelineRecordFactory *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *result;
  _DWORD **v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  _BYTE v17[24];

  WTF::JSONImpl::Object::create(this);
  v4 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(this);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v15, (const WTF::StringImpl *)&v16, (uint64_t)v17);
  if (v17[16])
  {
    v6 = (uint64_t *)(v4 + 24);
    v7 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v7 == *(_DWORD *)(v4 + 32))
    {
      v12 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v15);
      v7 = *(unsigned int *)(v4 + 36);
      v13 = *(_QWORD *)(v4 + 24);
      v14 = *v12;
      if (*v12)
        *v14 += 2;
      *(_QWORD *)(v13 + 8 * v7) = v14;
    }
    else
    {
      v8 = *v6;
      v9 = v15;
      if (v15)
        *(_DWORD *)v15 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *(_DWORD *)(v4 + 36) = v7 + 1;
  }
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::TimelineRecordFactory::createObserverCallbackData@<X0>(WebCore::TimelineRecordFactory *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  const WTF::String *v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  WTF::StringImpl *result;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  _BYTE v19[24];

  WTF::JSONImpl::Object::create(this);
  v5 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(this, v6);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v5 + 16), &v17, (const WTF::StringImpl *)&v18, (uint64_t)v19);
  if (v19[16])
  {
    v8 = (uint64_t *)(v5 + 24);
    v9 = *(unsigned int *)(v5 + 36);
    if ((_DWORD)v9 == *(_DWORD *)(v5 + 32))
    {
      v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v8, v9 + 1, (unint64_t)&v17);
      v9 = *(unsigned int *)(v5 + 36);
      v15 = *(_QWORD *)(v5 + 24);
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *(_QWORD *)(v15 + 8 * v9) = v16;
    }
    else
    {
      v10 = *v8;
      v11 = v17;
      if (v17)
        *(_DWORD *)v17 += 2;
      *(_QWORD *)(v10 + 8 * v9) = v11;
    }
    *(_DWORD *)(v5 + 36) = v9 + 1;
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    if (*v12 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v12;
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::TimelineRecordFactory::createPaintData@<X0>(WebCore::TimelineRecordFactory *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  _DWORD *v13;
  WTF::StringImpl *result;
  _DWORD **v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  _BYTE v21[24];

  WTF::JSONImpl::Object::create(this);
  v5 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::createQuad((WebCore *)&v18, this);
  v6 = v18;
  v18 = 0;
  v19 = v6;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v5 + 16), &v20, (const WTF::StringImpl *)&v19, (uint64_t)v21);
  if (v21[16])
  {
    v8 = (uint64_t *)(v5 + 24);
    v9 = *(unsigned int *)(v5 + 36);
    if ((_DWORD)v9 == *(_DWORD *)(v5 + 32))
    {
      v15 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v8, v9 + 1, (unint64_t)&v20);
      v9 = *(unsigned int *)(v5 + 36);
      v16 = *(_QWORD *)(v5 + 24);
      v17 = *v15;
      if (*v15)
        *v17 += 2;
      *(_QWORD *)(v16 + 8 * v9) = v17;
    }
    else
    {
      v10 = *v8;
      v11 = v20;
      if (v20)
        *(_DWORD *)v20 += 2;
      *(_QWORD *)(v10 + 8 * v9) = v11;
    }
    *(_DWORD *)(v5 + 36) = v9 + 1;
  }
  v12 = v19;
  v19 = 0;
  if (v12)
  {
    if (*v12 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v12;
  }
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    if (*v13 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v13;
  }
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::JSONImpl::Value *WebCore::createQuad(WebCore *this, const WebCore::FloatQuad *a2)
{
  WTF::JSONImpl::Value *v4;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  char *v8;
  char *v9;
  WTF::JSONImpl::Value *v10;
  WTF::JSONImpl::Value *v11;
  uint64_t v12;
  char **v13;
  uint64_t v14;
  char *v15;
  char *v16;
  WTF::JSONImpl::Value *v17;
  WTF::JSONImpl::Value *v18;
  uint64_t v19;
  char **v20;
  uint64_t v21;
  char *v22;
  char *v23;
  WTF::JSONImpl::Value *v24;
  WTF::JSONImpl::Value *v25;
  uint64_t v26;
  char **v27;
  uint64_t v28;
  char *v29;
  char *v30;
  WTF::JSONImpl::Value *v31;
  WTF::JSONImpl::Value *v32;
  uint64_t v33;
  char **v34;
  uint64_t v35;
  char *v36;
  char *v37;
  WTF::JSONImpl::Value *v38;
  WTF::JSONImpl::Value *v39;
  uint64_t v40;
  char **v41;
  uint64_t v42;
  char *v43;
  char *v44;
  WTF::JSONImpl::Value *v45;
  WTF::JSONImpl::Value *v46;
  uint64_t v47;
  char **v48;
  uint64_t v49;
  char *v50;
  char *v51;
  WTF::JSONImpl::Value *v52;
  WTF::JSONImpl::Value *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  WTF::JSONImpl::Value *v58;
  WTF::JSONImpl::Value *result;
  WTF::JSONImpl::Value *v60;

  v4 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Array::create(this);
  v5 = *(_QWORD *)this;
  v6 = (char **)(*(_QWORD *)this + 16);
  WTF::JSONImpl::Value::create(v4, *(float *)a2);
  v7 = *(unsigned int *)(v5 + 28);
  if ((_DWORD)v7 == *(_DWORD *)(v5 + 24))
  {
    v8 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, v7 + 1, (unint64_t)&v60);
    v7 = *(unsigned int *)(v5 + 28);
    v9 = *(char **)(v5 + 16);
    v10 = *(WTF::JSONImpl::Value **)v8;
    *(_QWORD *)v8 = 0;
  }
  else
  {
    v9 = *v6;
    v10 = v60;
    v60 = 0;
  }
  *(_QWORD *)&v9[8 * v7] = v10;
  *(_DWORD *)(v5 + 28) = v7 + 1;
  v11 = v60;
  v60 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
      v11 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v11;
  }
  v12 = *(_QWORD *)this;
  v13 = (char **)(*(_QWORD *)this + 16);
  WTF::JSONImpl::Value::create(v11, *((float *)a2 + 1));
  v14 = *(unsigned int *)(v12 + 28);
  if ((_DWORD)v14 == *(_DWORD *)(v12 + 24))
  {
    v15 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v60);
    v14 = *(unsigned int *)(v12 + 28);
    v16 = *(char **)(v12 + 16);
    v17 = *(WTF::JSONImpl::Value **)v15;
    *(_QWORD *)v15 = 0;
  }
  else
  {
    v16 = *v13;
    v17 = v60;
    v60 = 0;
  }
  *(_QWORD *)&v16[8 * v14] = v17;
  *(_DWORD *)(v12 + 28) = v14 + 1;
  v18 = v60;
  v60 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
      v18 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v18;
  }
  v19 = *(_QWORD *)this;
  v20 = (char **)(*(_QWORD *)this + 16);
  WTF::JSONImpl::Value::create(v18, *((float *)a2 + 2));
  v21 = *(unsigned int *)(v19 + 28);
  if ((_DWORD)v21 == *(_DWORD *)(v19 + 24))
  {
    v22 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v20, v21 + 1, (unint64_t)&v60);
    v21 = *(unsigned int *)(v19 + 28);
    v23 = *(char **)(v19 + 16);
    v24 = *(WTF::JSONImpl::Value **)v22;
    *(_QWORD *)v22 = 0;
  }
  else
  {
    v23 = *v20;
    v24 = v60;
    v60 = 0;
  }
  *(_QWORD *)&v23[8 * v21] = v24;
  *(_DWORD *)(v19 + 28) = v21 + 1;
  v25 = v60;
  v60 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
      v25 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v25;
  }
  v26 = *(_QWORD *)this;
  v27 = (char **)(*(_QWORD *)this + 16);
  WTF::JSONImpl::Value::create(v25, *((float *)a2 + 3));
  v28 = *(unsigned int *)(v26 + 28);
  if ((_DWORD)v28 == *(_DWORD *)(v26 + 24))
  {
    v29 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v27, v28 + 1, (unint64_t)&v60);
    v28 = *(unsigned int *)(v26 + 28);
    v30 = *(char **)(v26 + 16);
    v31 = *(WTF::JSONImpl::Value **)v29;
    *(_QWORD *)v29 = 0;
  }
  else
  {
    v30 = *v27;
    v31 = v60;
    v60 = 0;
  }
  *(_QWORD *)&v30[8 * v28] = v31;
  *(_DWORD *)(v26 + 28) = v28 + 1;
  v32 = v60;
  v60 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 1)
      v32 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v32;
  }
  v33 = *(_QWORD *)this;
  v34 = (char **)(*(_QWORD *)this + 16);
  WTF::JSONImpl::Value::create(v32, *((float *)a2 + 4));
  v35 = *(unsigned int *)(v33 + 28);
  if ((_DWORD)v35 == *(_DWORD *)(v33 + 24))
  {
    v36 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, v35 + 1, (unint64_t)&v60);
    v35 = *(unsigned int *)(v33 + 28);
    v37 = *(char **)(v33 + 16);
    v38 = *(WTF::JSONImpl::Value **)v36;
    *(_QWORD *)v36 = 0;
  }
  else
  {
    v37 = *v34;
    v38 = v60;
    v60 = 0;
  }
  *(_QWORD *)&v37[8 * v35] = v38;
  *(_DWORD *)(v33 + 28) = v35 + 1;
  v39 = v60;
  v60 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 1)
      v39 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v39;
  }
  v40 = *(_QWORD *)this;
  v41 = (char **)(*(_QWORD *)this + 16);
  WTF::JSONImpl::Value::create(v39, *((float *)a2 + 5));
  v42 = *(unsigned int *)(v40 + 28);
  if ((_DWORD)v42 == *(_DWORD *)(v40 + 24))
  {
    v43 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v41, v42 + 1, (unint64_t)&v60);
    v42 = *(unsigned int *)(v40 + 28);
    v44 = *(char **)(v40 + 16);
    v45 = *(WTF::JSONImpl::Value **)v43;
    *(_QWORD *)v43 = 0;
  }
  else
  {
    v44 = *v41;
    v45 = v60;
    v60 = 0;
  }
  *(_QWORD *)&v44[8 * v42] = v45;
  *(_DWORD *)(v40 + 28) = v42 + 1;
  v46 = v60;
  v60 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 1)
      v46 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v46;
  }
  v47 = *(_QWORD *)this;
  v48 = (char **)(*(_QWORD *)this + 16);
  WTF::JSONImpl::Value::create(v46, *((float *)a2 + 6));
  v49 = *(unsigned int *)(v47 + 28);
  if ((_DWORD)v49 == *(_DWORD *)(v47 + 24))
  {
    v50 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v48, v49 + 1, (unint64_t)&v60);
    v49 = *(unsigned int *)(v47 + 28);
    v51 = *(char **)(v47 + 16);
    v52 = *(WTF::JSONImpl::Value **)v50;
    *(_QWORD *)v50 = 0;
  }
  else
  {
    v51 = *v48;
    v52 = v60;
    v60 = 0;
  }
  *(_QWORD *)&v51[8 * v49] = v52;
  *(_DWORD *)(v47 + 28) = v49 + 1;
  v53 = v60;
  v60 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 1)
      v53 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v53;
  }
  v54 = *(_QWORD *)this;
  WTF::JSONImpl::Value::create(v53, *((float *)a2 + 7));
  v55 = *(unsigned int *)(v54 + 28);
  if ((_DWORD)v55 == *(_DWORD *)(v54 + 24))
  {
    v56 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v54 + 16), v55 + 1, (unint64_t)&v60);
    v55 = *(unsigned int *)(v54 + 28);
    v57 = *(_QWORD *)(v54 + 16);
    v58 = *(WTF::JSONImpl::Value **)v56;
    *(_QWORD *)v56 = 0;
  }
  else
  {
    v57 = *(_QWORD *)(v54 + 16);
    v58 = v60;
    v60 = 0;
  }
  *(_QWORD *)(v57 + 8 * v55) = v58;
  *(_DWORD *)(v54 + 28) = v55 + 1;
  result = v60;
  v60 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

WTF::StringImpl *WebCore::TimelineRecordFactory::createScreenshotData@<X0>(WebCore::TimelineRecordFactory *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  const WTF::String *v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  WTF::StringImpl *result;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  _BYTE v19[24];

  WTF::JSONImpl::Object::create(this);
  v5 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(this, v6);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v5 + 16), &v17, (const WTF::StringImpl *)&v18, (uint64_t)v19);
  if (v19[16])
  {
    v8 = (uint64_t *)(v5 + 24);
    v9 = *(unsigned int *)(v5 + 36);
    if ((_DWORD)v9 == *(_DWORD *)(v5 + 32))
    {
      v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v8, v9 + 1, (unint64_t)&v17);
      v9 = *(unsigned int *)(v5 + 36);
      v15 = *(_QWORD *)(v5 + 24);
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *(_QWORD *)(v15 + 8 * v9) = v16;
    }
    else
    {
      v10 = *v8;
      v11 = v17;
      if (v17)
        *(_DWORD *)v17 += 2;
      *(_QWORD *)(v10 + 8 * v9) = v11;
    }
    *(_DWORD *)(v5 + 36) = v9 + 1;
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    if (*v12 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v12;
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::TimelineRecordFactory::appendLayoutRoot(WebCore::TimelineRecordFactory *this, WTF::JSONImpl::Object *a2, const WebCore::FloatQuad *a3)
{
  _DWORD *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  _DWORD *v12;
  WTF::StringImpl *result;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  _BYTE v20[24];

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::createQuad((WebCore *)&v17, a2);
  v5 = v17;
  v17 = 0;
  v18 = v5;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)this + 2, &v19, (const WTF::StringImpl *)&v18, (uint64_t)v20);
  if (v20[16])
  {
    v7 = (uint64_t *)((char *)this + 24);
    v8 = *((unsigned int *)this + 9);
    if ((_DWORD)v8 == *((_DWORD *)this + 8))
    {
      v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v19);
      v8 = *((unsigned int *)this + 9);
      v15 = *((_QWORD *)this + 3);
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *(_QWORD *)(v15 + 8 * v8) = v16;
    }
    else
    {
      v9 = *v7;
      v10 = v19;
      if (v19)
        *(_DWORD *)v19 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *((_DWORD *)this + 9) = v8 + 1;
  }
  v11 = v18;
  v18 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*v12 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v12;
  }
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::WebInjectedScriptHost::subtype(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char **v6;
  BOOL v7;
  uint64_t v8;
  char **v10;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v16;

  if ((a3 & 0xFFFE000000000002) != 0)
    return 10;
  v4 = *(_QWORD *)(a2 + 56);
  if (*(unsigned __int8 *)(a3 + 5) < 0xF0u)
  {
    v5 = *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C);
    v6 = (char **)(16 * v5);
    if ((_DWORD)v5)
      v7 = v6 == &WebCore::JSNodeList::s_info;
    else
      v7 = 1;
    if (v7)
    {
      if (!(_DWORD)v5)
        return 10;
    }
    else
    {
      v8 = 16 * v5;
      do
        v8 = *(_QWORD *)(v8 + 16);
      while ((char **)v8 != &WebCore::JSNodeList::s_info && v8 != 0);
      if (!v8 && v6 != &WebCore::JSHTMLCollection::s_info)
      {
        v10 = v6;
        do
          v10 = (char **)v10[2];
        while (v10 != &WebCore::JSHTMLCollection::s_info && v10 != 0);
        if (!v10 && v6 != &WebCore::JSDOMException::s_info)
        {
          do
            v6 = (char **)v6[2];
          while (v6 != &WebCore::JSDOMException::s_info && v6 != 0);
          if (!v6)
            return 10;
        }
      }
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = JSC::JSString::create(v4, &v16);
  v13 = v16;
  v16 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  return v3;
}

uint64_t WebCore::WebInjectedScriptHost::getInternalProperties(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7;
  __n128 v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char **v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v24;
  WTF::StringImpl *v25;
  int v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  JSValue v53;
  unsigned int v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  unint64_t v68;
  WTF::StringImpl *v69;
  __n128 v70;
  WTF::StringImpl *v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  JSValue v75;
  unsigned int v76;
  BOOL v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  int v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  int v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  unint64_t v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  unsigned int v107;
  JSValue v108;
  unsigned __int8 *v109;
  unsigned int v110;
  unsigned __int8 *v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unint64_t v115;
  uint64_t Slow;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  uint64_t v126;
  int v127;
  WTF::StringImpl *v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  __n128 v132;
  uint64_t v133;
  _BYTE *v134;
  int v135;
  uint64_t *v136;
  WTF::StringImpl *v137;
  unint64_t v138;
  WTF::StringImpl *v139;
  uint64_t v140;
  _DWORD *v141;
  int v142;
  WTF::StringImpl *v143;
  int v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  JSValue v149;
  unsigned int v150;
  BOOL v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  unsigned int v154;
  JSValue v155;
  unsigned __int8 *v156;
  unsigned int v157;
  unsigned int v158;
  unint64_t v159;
  uint64_t v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  JSValue v163;
  unsigned int v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  uint64_t v168;
  JSC::JSGlobalObject **v169;
  unsigned __int8 *v170;
  unsigned int v171;
  WTF::StringImpl *v172;
  uint64_t v173;
  WTF::StringImpl *v174;
  JSValue v175;
  unsigned int v176;
  WTF::StringImpl *v177;
  WebCore::EventTarget *v178;
  unint64_t v179;
  uint64_t v180;
  WTF::StringImpl *v181;
  JSValue v182;
  unsigned int v183;
  _DWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  JSC::JSGlobalObject *v189;
  WTF::StringImpl *v190;
  int v191;
  unint64_t v192;
  WebCore::EventTarget *v193;
  unint64_t v194;
  uint64_t v195;
  unsigned int v196;
  WTF::StringImpl *v197;
  char **v198;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  JSValue v202;
  unsigned int v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  uint64_t v206;
  JSValue v207;
  unsigned int v208;
  WTF::StringImpl *v209;
  WebCore::EventTarget *v210;
  unint64_t v211;
  WTF::StringImpl *v212;
  uint64_t v213;
  uint64_t v214;
  WTF::StringImpl *v215;
  JSValue v216;
  unsigned int v217;
  unsigned __int8 *v218;
  unsigned int v219;
  unsigned int v222;
  BOOL v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t SlowCase;
  uint64_t v227;
  uint64_t *v228;
  WTF::StringImpl *v229;
  unsigned __int8 *v230;
  uint64_t v231;
  uint64_t v232;
  WTF::StringImpl *v233;
  WTF::StringImpl *v234;
  unint64_t v235;
  int v236;
  int v237;
  uint64_t v238;

  v7 = JSC::jsDynamicCast<WebCore::JSWorker *>(a4);
  if (!v7 || (v9 = *(_QWORD *)(v7 + 24)) == 0)
  {
    if ((a4 & 0xFFFE000000000002) != 0)
      return 0;
    v19 = *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C);
    v20 = (char **)(16 * v19);
    if ((_DWORD)v19)
      v21 = v20 == &WebCore::JSPaymentRequest::s_info;
    else
      v21 = 1;
    if (v21)
    {
      if ((_DWORD)v19)
        goto LABEL_32;
    }
    else
    {
      v22 = 16 * v19;
      do
        v22 = *(_QWORD *)(v22 + 16);
      while ((char **)v22 != &WebCore::JSPaymentRequest::s_info && v22 != 0);
      if (v22)
      {
LABEL_32:
        v24 = *(_QWORD *)(a4 + 24);
        v25 = *(WTF::StringImpl **)(a3 + 56);
        v234 = v25;
        v26 = *(_DWORD *)(a3 + 896);
        if (v26)
          v27 = 16 * (v26 & 0xFFFFFFFE);
        else
          v27 = 0;
        if (*((_DWORD *)v25 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v25) & 1) != 0)
        {
          v13 = 0;
        }
        else
        {
          v13 = JSC::JSArray::tryCreate(v25, v27, 0, 0, v8);
          if (!v13)
            JSC::throwOutOfMemoryError();
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v28 = v234;
        v233 = v234;
        v29 = *(_QWORD *)(a3 + 56);
        v30 = *(_QWORD *)(v29 + 15056);
        if (v30)
        {
          v31 = *(unsigned int *)(v30 + 60);
          v32 = *(_QWORD *)(v30 + 24);
          if (v32 < *(_QWORD *)(v30 + 32))
          {
LABEL_40:
            *(_QWORD *)(v30 + 24) = v32 + v31;
            goto LABEL_41;
          }
          v32 = *(_QWORD *)(v30 + 40);
          if ((v32 & 1) == 0)
          {
            v224 = *(_QWORD *)(v32 + 8) ^ *(_QWORD *)(v30 + 48);
            *(_QWORD *)(v30 + 32) = v32 + HIDWORD(v224);
            *(_QWORD *)(v30 + 40) = v32 + (int)v224;
            goto LABEL_40;
          }
          JSC::sanitizeStackForVM();
          SlowCase = JSC::LocalAllocator::allocateSlowCase();
        }
        else
        {
          SlowCase = JSC::CompleteSubspace::allocateSlow();
        }
        v32 = SlowCase;
LABEL_41:
        *(_DWORD *)v32 = 0;
        *(_DWORD *)v32 = *(_DWORD *)(a3 + 848);
        *(_DWORD *)(v32 + 4) = 16783360;
        *(_OWORD *)(v32 + 8) = 0uLL;
        *(_OWORD *)(v32 + 24) = 0uLL;
        *(_OWORD *)(v32 + 40) = 0uLL;
        *(_QWORD *)(v32 + 56) = 0;
        if (*(_BYTE *)(v29 + 755))
          __dmb(0xAu);
        WTF::AtomStringImpl::addLiteral();
        v33 = v234;
        if (*(_BYTE *)(v24 + 28))
          v34 = 7;
        else
          v34 = 6;
        v234 = 0;
        v235 = v32;
        LODWORD(v35) = -1;
        v236 = -1;
        v237 = 0x1000000;
        v238 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v32, (JSC::VM *)a2, (unint64_t)v33, v34, 0, (uint64_t)&v234);
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            WTF::StringImpl::destroy(v33, v36);
          else
            *(_DWORD *)v33 -= 2;
        }
        WTF::AtomStringImpl::addLiteral();
        v37 = v234;
        if (*(_BYTE *)(v24 + 29))
          v38 = 7;
        else
          v38 = 6;
        v234 = 0;
        v235 = v32;
        v236 = -1;
        v237 = 0x1000000;
        v238 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v32, (JSC::VM *)a2, (unint64_t)v37, v38, 0, (uint64_t)&v234);
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, v39);
          else
            *(_DWORD *)v37 -= 2;
        }
        WTF::AtomStringImpl::addLiteral();
        v40 = v234;
        if (*(_BYTE *)(v24 + 30))
          v41 = 7;
        else
          v41 = 6;
        v234 = 0;
        v235 = v32;
        v236 = -1;
        v237 = 0x1000000;
        v238 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v32, (JSC::VM *)a2, (unint64_t)v40, v41, 0, (uint64_t)&v234);
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
            WTF::StringImpl::destroy(v40, v42);
          else
            *(_DWORD *)v40 -= 2;
        }
        WTF::AtomStringImpl::addLiteral();
        v43 = v234;
        if (*(_BYTE *)(v24 + 31))
          v44 = 7;
        else
          v44 = 6;
        v234 = 0;
        v235 = v32;
        v236 = -1;
        v237 = 0x1000000;
        v238 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v32, (JSC::VM *)a2, (unint64_t)v43, v44, 0, (uint64_t)&v234);
        if (v43)
        {
          if (*(_DWORD *)v43 == 2)
            WTF::StringImpl::destroy(v43, v45);
          else
            *(_DWORD *)v43 -= 2;
        }
        WTF::AtomStringImpl::addLiteral();
        v46 = *(int *)(v24 + 36);
        {
          WebCore::convertEnumerationToString(WebCore::PaymentShippingType)::$_0::operator() const(void)::impl += 2;
          WebCore::convertEnumerationToString(WebCore::PaymentShippingType)::$_1::operator() const(void)::impl += 2;
          WebCore::convertEnumerationToString(WebCore::PaymentShippingType)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PaymentShippingType)::$_0::operator() const(void)::impl;
          unk_1EE2F4930 = &WebCore::convertEnumerationToString(WebCore::PaymentShippingType)::$_1::operator() const(void)::impl;
          WebCore::convertEnumerationToString(WebCore::PaymentShippingType)::$_2::operator() const(void)::impl += 2;
          qword_1EE2F4938 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PaymentShippingType)::$_2::operator() const(void)::impl;
        }
        v47 = v234;
        v48 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::PaymentShippingType)::values[v46];
        if (v48)
          *(_DWORD *)v48 += 2;
        v234 = v48;
        v50 = JSC::JSString::create(a2, &v234);
        v51 = v234;
        v234 = 0;
        if (v51)
        {
          if (*(_DWORD *)v51 == 2)
            WTF::StringImpl::destroy(v51, v49);
          else
            *(_DWORD *)v51 -= 2;
        }
        v234 = 0;
        v235 = v32;
        v236 = -1;
        v237 = 0x1000000;
        v238 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v32, (JSC::VM *)a2, (unint64_t)v47, v50, 0, (uint64_t)&v234);
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
            WTF::StringImpl::destroy(v47, v52);
          else
            *(_DWORD *)v47 -= 2;
        }
        v53.super.isa = (Class)WebCore::constructInternalProperty((JSC::VM *)a2, a3, (uint64_t *)&v233, v32);
        v54 = *(_BYTE *)(v13 + 4) & 0x1F;
        if (v54 - 4 >= 0xA)
        {
          if ((v54 > 3 || v54 == 2) && (*(_BYTE *)(v13 + 4) & 0x10) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195DF7F70);
          }
        }
        else if (*(_DWORD *)(*(_QWORD *)(v13 + 8) - 4))
        {
          JSC::JSObject::setIndexQuickly(v13, *(_DWORD **)(a3 + 56), 0, v53);
          if (!v28)
            goto LABEL_80;
LABEL_78:
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v55);
          else
            *(_DWORD *)v28 -= 2;
LABEL_80:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v229 = v234;
          v233 = v234;
          v56 = *(_QWORD *)(a3 + 56);
          v57 = *(_QWORD *)(v56 + 15056);
          if (v57)
          {
            v58 = *(unsigned int *)(v57 + 60);
            v59 = *(_QWORD *)(v57 + 24);
            if (v59 < *(_QWORD *)(v57 + 32))
            {
LABEL_82:
              *(_QWORD *)(v57 + 24) = v59 + v58;
LABEL_83:
              *(_DWORD *)v59 = 0;
              *(_DWORD *)v59 = *(_DWORD *)(a3 + 848);
              *(_DWORD *)(v59 + 4) = 16783360;
              *(_OWORD *)(v59 + 8) = 0u;
              *(_OWORD *)(v59 + 24) = 0u;
              *(_OWORD *)(v59 + 40) = 0u;
              *(_QWORD *)(v59 + 56) = 0;
              if (*(_BYTE *)(v56 + 755))
                __dmb(0xAu);
              WTF::AtomStringImpl::addLiteral();
              v60 = (unint64_t)v234;
              v61 = *(_QWORD *)(v24 + 112);
              if (!v61)
                goto LABEL_409;
              v62 = *(_DWORD *)(v61 + 4);
              if (v62 == 1)
                goto LABEL_390;
              if (!v62)
              {
LABEL_409:
                v64 = *(_QWORD *)(a2 + 41968);
                goto LABEL_89;
              }
LABEL_88:
              *(_DWORD *)v61 += 2;
              v234 = (WTF::StringImpl *)v61;
              v64 = JSC::JSString::create(a2, &v234);
              v65 = v234;
              v234 = 0;
              if (v65)
              {
                if (*(_DWORD *)v65 == 2)
                  WTF::StringImpl::destroy(v65, v63);
                else
                  *(_DWORD *)v65 -= 2;
              }
              while (1)
              {
LABEL_89:
                v234 = 0;
                v235 = v59;
                v236 = v35;
                v237 = 0x1000000;
                v238 = 0;
                JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v59, (JSC::VM *)a2, v60, v64, 0, (uint64_t)&v234);
                if (v60)
                {
                  if (*(_DWORD *)v60 == 2)
                    WTF::StringImpl::destroy((WTF::StringImpl *)v60, v66);
                  else
                    *(_DWORD *)v60 -= 2;
                }
                WTF::AtomStringImpl::addLiteral();
                v67 = v234;
                v68 = WebCore::objectForPaymentItem((JSC::VM *)a2, a3, (uint64_t *)(v24 + 120));
                v234 = 0;
                v235 = v59;
                v236 = v35;
                v237 = 0x1000000;
                v238 = 0;
                JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v59, (JSC::VM *)a2, (unint64_t)v67, v68, 0, (uint64_t)&v234);
                if (v67)
                {
                  if (*(_DWORD *)v67 == 2)
                    WTF::StringImpl::destroy(v67, v69);
                  else
                    *(_DWORD *)v67 -= 2;
                }
                if (!*(_BYTE *)(v24 + 56))
                  break;
                v71 = *(WTF::StringImpl **)(a3 + 56);
                v234 = v71;
                v72 = *(_DWORD *)(a3 + 896);
                if (v72)
                  v73 = 16 * (v72 & 0xFFFFFFFE);
                else
                  v73 = 0;
                if (*((_DWORD *)v71 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v71) & 1) != 0)
                {
                  v60 = 0;
                }
                else
                {
                  v60 = JSC::JSArray::tryCreate(v71, v73, 0, 0, v70);
                  if (!v60)
                    JSC::throwOutOfMemoryError();
                }
                v61 = *(unsigned __int8 *)(v24 + 56);
                if (*(_BYTE *)(v24 + 56))
                {
                  v35 = 0;
                  v74 = 0;
                  while (1)
                  {
                    if (v74 >= *(unsigned int *)(v24 + 52))
                    {
                      WTF::AtomStringImpl::addLiteral();
                      v78 = v234;
                      v234 = 0;
                      v235 = v59;
                      v236 = -1;
                      v237 = 0x1000000;
                      v238 = 0;
                      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v59, (JSC::VM *)a2, (unint64_t)v78, v60, 0, (uint64_t)&v234);
                      if (v78)
                      {
                        if (*(_DWORD *)v78 == 2)
                          WTF::StringImpl::destroy(v78, v79);
                        else
                          *(_DWORD *)v78 -= 2;
                      }
                      goto LABEL_120;
                    }
                    v75.super.isa = (Class)WebCore::objectForPaymentItem((JSC::VM *)a2, a3, (uint64_t *)(*(_QWORD *)(v24 + 40) + v35));
                    v76 = *(_BYTE *)(v60 + 4) & 0x1F;
                    if (v76 - 4 >= 0xA)
                      break;
                    if (v74 >= *(unsigned int *)(*(_QWORD *)(v60 + 8) - 4))
                      goto LABEL_114;
                    JSC::JSObject::setIndexQuickly(v60, *(_DWORD **)(a3 + 56), v74, v75);
LABEL_108:
                    ++v74;
                    v61 = *(unsigned __int8 *)(v24 + 56);
                    v35 += 32;
                    if (!*(_BYTE *)(v24 + 56))
                      goto LABEL_389;
                  }
                  v77 = v76 > 3 || v76 == 2;
                  if (v77 && (*(_BYTE *)(v60 + 4) & 0x10) == 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195DF6A60);
                  }
LABEL_114:
                  JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength();
                  goto LABEL_108;
                }
LABEL_389:
                __break(1u);
LABEL_390:
                v218 = *(unsigned __int8 **)(v61 + 8);
                if ((*(_BYTE *)(v61 + 16) & 4) != 0)
                {
                  v219 = *v218;
                }
                else
                {
                  v222 = *(unsigned __int16 *)v218;
                  if (v222 > 0xFF)
                    goto LABEL_88;
                  v219 = v222;
                }
                v64 = *(_QWORD *)(a2 + 8 * v219 + 42216);
              }
LABEL_120:
              v230 = (unsigned __int8 *)v59;
              v231 = v13;
              v232 = v24;
              if (!*(_BYTE *)(v24 + 80))
                goto LABEL_198;
              v60 = *(_QWORD *)(a3 + 56);
              v234 = (WTF::StringImpl *)v60;
              v80 = *(_DWORD *)(a3 + 896);
              if (v80)
                v81 = 16 * (v80 & 0xFFFFFFFE);
              else
                v81 = 0;
              if (*(_DWORD *)(v60 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v60) & 1) != 0)
              {
                v82 = 0;
              }
              else
              {
                v82 = JSC::JSArray::tryCreate((JSC::JSArray *)v60, v81, 0, 0, v70);
                if (!v82)
                  JSC::throwOutOfMemoryError();
              }
              v61 = *(unsigned __int8 *)(v24 + 80);
              if (!*(_BYTE *)(v24 + 80))
                goto LABEL_389;
              v60 = 0;
              v59 = 0;
              v228 = (uint64_t *)(a2 + 41968);
              while (v59 < *(unsigned int *)(v24 + 76))
              {
                v83 = *(_QWORD *)(v24 + 64);
                v84 = *(_QWORD *)(a3 + 56);
                v85 = *(_QWORD *)(v84 + 15056);
                if (v85)
                {
                  v86 = *(unsigned int *)(v85 + 60);
                  v87 = *(_QWORD *)(v85 + 24);
                  if (v87 < *(_QWORD *)(v85 + 32))
                    goto LABEL_132;
                  v87 = *(_QWORD *)(v85 + 40);
                  if ((v87 & 1) == 0)
                  {
                    v115 = *(_QWORD *)(v87 + 8) ^ *(_QWORD *)(v85 + 48);
                    *(_QWORD *)(v85 + 32) = v87 + HIDWORD(v115);
                    *(_QWORD *)(v85 + 40) = v87 + (int)v115;
LABEL_132:
                    *(_QWORD *)(v85 + 24) = v87 + v86;
                    goto LABEL_133;
                  }
                  JSC::sanitizeStackForVM();
                  Slow = JSC::LocalAllocator::allocateSlowCase();
                }
                else
                {
                  Slow = JSC::CompleteSubspace::allocateSlow();
                }
                v87 = Slow;
LABEL_133:
                *(_DWORD *)v87 = 0;
                *(_DWORD *)v87 = *(_DWORD *)(a3 + 848);
                *(_DWORD *)(v87 + 4) = 16783360;
                *(_OWORD *)(v87 + 8) = 0u;
                *(_OWORD *)(v87 + 24) = 0u;
                *(_OWORD *)(v87 + 40) = 0u;
                *(_QWORD *)(v87 + 56) = 0;
                v24 = v232;
                if (*(_BYTE *)(v84 + 755))
                  __dmb(0xAu);
                WTF::AtomStringImpl::addLiteral();
                v88 = v234;
                v89 = *(_QWORD *)(v83 + v60);
                if (!v89)
                {
LABEL_181:
                  v92 = *v228;
                  goto LABEL_139;
                }
                v90 = *(_DWORD *)(v89 + 4);
                if (v90 == 1)
                {
                  v109 = *(unsigned __int8 **)(v89 + 8);
                  if ((*(_BYTE *)(v89 + 16) & 4) != 0)
                  {
                    v110 = *v109;
LABEL_173:
                    v92 = *(_QWORD *)(a2 + 8 * v110 + 42216);
                    goto LABEL_139;
                  }
                  v113 = *(unsigned __int16 *)v109;
                  if (v113 <= 0xFF)
                  {
                    v110 = v113;
                    goto LABEL_173;
                  }
                }
                else if (!v90)
                {
                  goto LABEL_181;
                }
                *(_DWORD *)v89 += 2;
                v234 = (WTF::StringImpl *)v89;
                v92 = JSC::JSString::create(a2, &v234);
                v93 = v234;
                v234 = 0;
                if (v93)
                {
                  if (*(_DWORD *)v93 == 2)
                    WTF::StringImpl::destroy(v93, v91);
                  else
                    *(_DWORD *)v93 -= 2;
                }
LABEL_139:
                v234 = 0;
                v235 = v87;
                v236 = -1;
                v237 = 0x1000000;
                v238 = 0;
                JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v87, (JSC::VM *)a2, (unint64_t)v88, v92, 0, (uint64_t)&v234);
                if (v88)
                {
                  if (*(_DWORD *)v88 == 2)
                    WTF::StringImpl::destroy(v88, v94);
                  else
                    *(_DWORD *)v88 -= 2;
                }
                WTF::AtomStringImpl::addLiteral();
                v95 = v234;
                v96 = *(_QWORD *)(v83 + v60 + 8);
                if (!v96)
                {
LABEL_182:
                  v13 = *v228;
                  goto LABEL_146;
                }
                v97 = *(_DWORD *)(v96 + 4);
                if (v97 == 1)
                {
                  v111 = *(unsigned __int8 **)(v96 + 8);
                  if ((*(_BYTE *)(v96 + 16) & 4) != 0)
                  {
                    v112 = *v111;
LABEL_176:
                    v13 = *(_QWORD *)(a2 + 8 * v112 + 42216);
                    goto LABEL_146;
                  }
                  v114 = *(unsigned __int16 *)v111;
                  if (v114 <= 0xFF)
                  {
                    v112 = v114;
                    goto LABEL_176;
                  }
                }
                else if (!v97)
                {
                  goto LABEL_182;
                }
                *(_DWORD *)v96 += 2;
                v234 = (WTF::StringImpl *)v96;
                v13 = JSC::JSString::create(a2, &v234);
                v99 = v234;
                v234 = 0;
                if (v99)
                {
                  if (*(_DWORD *)v99 == 2)
                    WTF::StringImpl::destroy(v99, v98);
                  else
                    *(_DWORD *)v99 -= 2;
                }
LABEL_146:
                v234 = 0;
                v235 = v87;
                v236 = -1;
                v237 = 0x1000000;
                v238 = 0;
                JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v87, (JSC::VM *)a2, (unint64_t)v95, v13, 0, (uint64_t)&v234);
                if (v95)
                {
                  if (*(_DWORD *)v95 == 2)
                    WTF::StringImpl::destroy(v95, v100);
                  else
                    *(_DWORD *)v95 -= 2;
                }
                WTF::AtomStringImpl::addLiteral();
                v101 = v234;
                v35 = v83 + v60;
                v102 = WebCore::objectForPaymentCurrencyAmount((JSC::VM *)a2, a3, (uint64_t *)(v35 + 16));
                v234 = 0;
                v235 = v87;
                v236 = -1;
                v237 = 0x1000000;
                v238 = 0;
                JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v87, (JSC::VM *)a2, (unint64_t)v101, v102, 0, (uint64_t)&v234);
                if (v101)
                {
                  if (*(_DWORD *)v101 == 2)
                    WTF::StringImpl::destroy(v101, v103);
                  else
                    *(_DWORD *)v101 -= 2;
                }
                WTF::AtomStringImpl::addLiteral();
                v104 = v234;
                if (*(_BYTE *)(v35 + 32))
                  v105 = 7;
                else
                  v105 = 6;
                v234 = 0;
                v235 = v87;
                v236 = -1;
                v237 = 0x1000000;
                v238 = 0;
                JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v87, (JSC::VM *)a2, (unint64_t)v104, v105, 0, (uint64_t)&v234);
                if (v104)
                {
                  if (*(_DWORD *)v104 == 2)
                    WTF::StringImpl::destroy(v104, v106);
                  else
                    *(_DWORD *)v104 -= 2;
                }
                v107 = *(_BYTE *)(v82 + 4) & 0x1F;
                if (v107 - 4 >= 0xA)
                {
                  if ((v107 > 3 || v107 == 2) && (*(_BYTE *)(v82 + 4) & 0x10) == 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195DF813CLL);
                  }
LABEL_187:
                  JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength();
                  goto LABEL_161;
                }
                if (v59 >= *(unsigned int *)(*(_QWORD *)(v82 + 8) - 4))
                  goto LABEL_187;
                v108.super.isa = (Class)v87;
                JSC::JSObject::setIndexQuickly(v82, *(_DWORD **)(a3 + 56), v59, v108);
LABEL_161:
                ++v59;
                v61 = *(unsigned __int8 *)(v232 + 80);
                v60 += 40;
                if (!*(_BYTE *)(v232 + 80))
                  goto LABEL_389;
              }
              WTF::AtomStringImpl::addLiteral();
              v117 = v234;
              v59 = (unint64_t)v230;
              v234 = 0;
              v235 = (unint64_t)v230;
              v236 = -1;
              v237 = 0x1000000;
              v238 = 0;
              JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v230, (JSC::VM *)a2, (unint64_t)v117, v82, 0, (uint64_t)&v234);
              v13 = v231;
              if (v117)
              {
                if (*(_DWORD *)v117 == 2)
                  WTF::StringImpl::destroy(v117, v118);
                else
                  *(_DWORD *)v117 -= 2;
              }
LABEL_198:
              if (!*(_BYTE *)(v24 + 104))
                goto LABEL_281;
              v60 = *(_QWORD *)(a3 + 56);
              v234 = (WTF::StringImpl *)v60;
              v119 = *(_DWORD *)(a3 + 896);
              if (v119)
                v120 = 16 * (v119 & 0xFFFFFFFE);
              else
                v120 = 0;
              if (*(_DWORD *)(v60 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v60) & 1) != 0)
              {
                v121 = 0;
              }
              else
              {
                v121 = JSC::JSArray::tryCreate((JSC::JSArray *)v60, v120, 0, 0, v70);
                if (!v121)
                  JSC::throwOutOfMemoryError();
              }
              v61 = *(unsigned __int8 *)(v24 + 104);
              if (!*(_BYTE *)(v24 + 104))
                goto LABEL_389;
              v35 = 0;
              v59 = 0;
              while (2)
              {
                if (*(_DWORD *)(v24 + 100) > v59)
                {
                  v13 = *(_QWORD *)(v24 + 88);
                  v122 = *(_QWORD *)(a3 + 56);
                  v123 = *(_QWORD *)(v122 + 15056);
                  if (v123)
                  {
                    v124 = *(unsigned int *)(v123 + 60);
                    v60 = *(_QWORD *)(v123 + 24);
                    if (v60 < *(_QWORD *)(v123 + 32))
                      goto LABEL_210;
                    v60 = *(_QWORD *)(v123 + 40);
                    if ((v60 & 1) == 0)
                    {
                      v159 = *(_QWORD *)(v60 + 8) ^ *(_QWORD *)(v123 + 48);
                      *(_QWORD *)(v123 + 32) = v60 + HIDWORD(v159);
                      *(_QWORD *)(v123 + 40) = v60 + (int)v159;
LABEL_210:
                      *(_QWORD *)(v123 + 24) = v60 + v124;
LABEL_211:
                      *(_DWORD *)v60 = 0;
                      *(_DWORD *)v60 = *(_DWORD *)(a3 + 848);
                      *(_DWORD *)(v60 + 4) = 16783360;
                      *(_OWORD *)(v60 + 8) = 0u;
                      *(_OWORD *)(v60 + 24) = 0u;
                      *(_OWORD *)(v60 + 40) = 0u;
                      *(_QWORD *)(v60 + 56) = 0;
                      if (*(_BYTE *)(v122 + 755))
                        __dmb(0xAu);
                      WTF::AtomStringImpl::addLiteral();
                      v125 = v234;
                      v126 = *(_QWORD *)(v13 + 72 * v35);
                      if (!v126)
                        goto LABEL_264;
                      v127 = *(_DWORD *)(v126 + 4);
                      if (v127 != 1)
                      {
                        if (v127)
                        {
LABEL_216:
                          *(_DWORD *)v126 += 2;
                          v234 = (WTF::StringImpl *)v126;
                          v129 = JSC::JSString::create(a2, &v234);
                          v130 = v234;
                          v234 = 0;
                          if (v130)
                          {
                            if (*(_DWORD *)v130 == 2)
                              WTF::StringImpl::destroy(v130, v128);
                            else
                              *(_DWORD *)v130 -= 2;
                          }
                          goto LABEL_217;
                        }
LABEL_264:
                        v129 = *(_QWORD *)(a2 + 41968);
                        goto LABEL_217;
                      }
                      v156 = *(unsigned __int8 **)(v126 + 8);
                      if ((*(_BYTE *)(v126 + 16) & 4) != 0)
                      {
                        v157 = *v156;
                      }
                      else
                      {
                        v158 = *(unsigned __int16 *)v156;
                        if (v158 > 0xFF)
                          goto LABEL_216;
                        v157 = v158;
                      }
                      v129 = *(_QWORD *)(a2 + 8 * v157 + 42216);
LABEL_217:
                      v234 = 0;
                      v235 = v60;
                      v236 = -1;
                      v237 = 0x1000000;
                      v238 = 0;
                      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v60, (JSC::VM *)a2, (unint64_t)v125, v129, 0, (uint64_t)&v234);
                      v24 = v232;
                      if (v125)
                      {
                        if (*(_DWORD *)v125 == 2)
                          WTF::StringImpl::destroy(v125, v131);
                        else
                          *(_DWORD *)v125 -= 2;
                      }
                      v133 = v13 + 72 * v35;
                      v135 = *(unsigned __int8 *)(v133 + 40);
                      v134 = (_BYTE *)(v133 + 40);
                      if (v135)
                      {
                        WTF::AtomStringImpl::addLiteral();
                        v61 = *v134;
                        if (!*v134)
                          goto LABEL_389;
                        v136 = (uint64_t *)(v134 - 32);
                        v137 = v234;
                        v138 = WebCore::objectForPaymentItem((JSC::VM *)a2, a3, v136);
                        v234 = 0;
                        v235 = v60;
                        v236 = -1;
                        v237 = 0x1000000;
                        v238 = 0;
                        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v60, (JSC::VM *)a2, (unint64_t)v137, v138, 0, (uint64_t)&v234);
                        if (v137)
                        {
                          if (*(_DWORD *)v137 == 2)
                            WTF::StringImpl::destroy(v137, v139);
                          else
                            *(_DWORD *)v137 -= 2;
                        }
                      }
                      v140 = v13 + 72 * v35;
                      v142 = *(_DWORD *)(v140 + 60);
                      v141 = (_DWORD *)(v140 + 60);
                      if (v142)
                      {
                        v143 = *(WTF::StringImpl **)(a3 + 56);
                        v234 = v143;
                        v144 = *(_DWORD *)(a3 + 896);
                        if (v144)
                          v145 = 16 * (v144 & 0xFFFFFFFE);
                        else
                          v145 = 0;
                        if (*((_DWORD *)v143 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v143) & 1) != 0)
                        {
                          v146 = 0;
                        }
                        else
                        {
                          v146 = JSC::JSArray::tryCreate(v143, v145, 0, 0, v132);
                          if (!v146)
                            JSC::throwOutOfMemoryError();
                        }
                        if (*v141)
                        {
                          v147 = 0;
                          v148 = 0;
                          v13 = (uint64_t)(v141 - 3);
                          while (1)
                          {
                            v149.super.isa = (Class)WebCore::objectForPaymentItem((JSC::VM *)a2, a3, (uint64_t *)(*(_QWORD *)v13 + v147));
                            v150 = *(_BYTE *)(v146 + 4) & 0x1F;
                            if (v150 - 4 >= 0xA)
                              break;
                            if (v148 >= *(unsigned int *)(*(_QWORD *)(v146 + 8) - 4))
                              goto LABEL_243;
                            JSC::JSObject::setIndexQuickly(v146, *(_DWORD **)(a3 + 56), v148, v149);
LABEL_237:
                            ++v148;
                            v147 += 32;
                            if (v148 >= *v141)
                              goto LABEL_246;
                          }
                          v151 = v150 > 3 || v150 == 2;
                          if (v151 && (*(_BYTE *)(v146 + 4) & 0x10) == 0)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x195DF811CLL);
                          }
LABEL_243:
                          JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength();
                          goto LABEL_237;
                        }
LABEL_246:
                        WTF::AtomStringImpl::addLiteral();
                        v152 = v234;
                        v234 = 0;
                        v235 = v60;
                        v236 = -1;
                        v237 = 0x1000000;
                        v238 = 0;
                        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v60, (JSC::VM *)a2, (unint64_t)v152, v146, 0, (uint64_t)&v234);
                        v24 = v232;
                        if (v152)
                        {
                          if (*(_DWORD *)v152 == 2)
                            WTF::StringImpl::destroy(v152, v153);
                          else
                            *(_DWORD *)v152 -= 2;
                        }
                      }
                      v154 = *(_BYTE *)(v121 + 4) & 0x1F;
                      if (v154 - 4 >= 0xA)
                      {
                        if ((v154 > 3 || v154 == 2) && (*(_BYTE *)(v121 + 4) & 0x10) == 0)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x195DF815CLL);
                        }
                      }
                      else if (*(_DWORD *)(*(_QWORD *)(v121 + 8) - 4) > v59)
                      {
                        v155.super.isa = (Class)v60;
                        JSC::JSObject::setIndexQuickly(v121, *(_DWORD **)(a3 + 56), v59, v155);
                        goto LABEL_252;
                      }
                      JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength();
LABEL_252:
                      v35 = (v59 + 1);
                      v61 = *(unsigned __int8 *)(v24 + 104);
                      v59 = v35;
                      if (!*(_BYTE *)(v24 + 104))
                        goto LABEL_389;
                      continue;
                    }
                    JSC::sanitizeStackForVM();
                    v160 = JSC::LocalAllocator::allocateSlowCase();
                  }
                  else
                  {
                    v160 = JSC::CompleteSubspace::allocateSlow();
                  }
                  v60 = v160;
                  goto LABEL_211;
                }
                break;
              }
              WTF::AtomStringImpl::addLiteral();
              v161 = v234;
              v59 = (unint64_t)v230;
              v234 = 0;
              v235 = (unint64_t)v230;
              v236 = -1;
              v237 = 0x1000000;
              v238 = 0;
              JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v230, (JSC::VM *)a2, (unint64_t)v161, v121, 0, (uint64_t)&v234);
              v13 = v231;
              if (v161)
              {
                if (*(_DWORD *)v161 == 2)
                  WTF::StringImpl::destroy(v161, v162);
                else
                  *(_DWORD *)v161 -= 2;
              }
LABEL_281:
              v163.super.isa = (Class)WebCore::constructInternalProperty((JSC::VM *)a2, a3, (uint64_t *)&v233, v59);
              v164 = *(_BYTE *)(v13 + 4) & 0x1F;
              if (v164 - 4 >= 0xA)
              {
                v223 = v164 > 3 || v164 == 2;
                v165 = v229;
                if (v223 && (*(_BYTE *)(v13 + 4) & 0x10) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195DF7F94);
                }
              }
              else
              {
                v165 = v229;
                if (*(_DWORD *)(*(_QWORD *)(v13 + 8) - 4) >= 2u)
                {
                  JSC::JSObject::setIndexQuickly(v13, *(_DWORD **)(a3 + 56), 1, v163);
                  if (!v229)
                    goto LABEL_286;
LABEL_284:
                  if (*(_DWORD *)v165 == 2)
                    WTF::StringImpl::destroy(v165, v166);
                  else
                    *(_DWORD *)v165 -= 2;
LABEL_286:
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v167 = v234;
                  v233 = v234;
                  if (*(_DWORD *)(v24 + 200) > 2u)
                  {
                    v173 = *(_QWORD *)(a2 + 41968);
                  }
                  else
                  {
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v173 = JSC::JSString::create(a2, &v234);
                    v174 = v234;
                    v234 = 0;
                    if (v174)
                    {
                      if (*(_DWORD *)v174 == 2)
                        WTF::StringImpl::destroy(v174, v172);
                      else
                        *(_DWORD *)v174 -= 2;
                    }
                  }
                  v175.super.isa = (Class)WebCore::constructInternalProperty((JSC::VM *)a2, a3, (uint64_t *)&v233, v173);
                  v176 = *(_BYTE *)(v13 + 4) & 0x1F;
                  if (v176 - 4 >= 0xA)
                  {
                    if ((v176 > 3 || v176 == 2) && (*(_BYTE *)(v13 + 4) & 0x10) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195DF7FB8);
                    }
                  }
                  else if (*(_DWORD *)(*(_QWORD *)(v13 + 8) - 4) >= 3u)
                  {
                    JSC::JSObject::setIndexQuickly(v13, *(_DWORD **)(a3 + 56), 2, v175);
                    if (!v167)
                      goto LABEL_302;
LABEL_300:
                    if (*(_DWORD *)v167 == 2)
                      WTF::StringImpl::destroy(v167, v177);
                    else
                      *(_DWORD *)v167 -= 2;
LABEL_302:
                    v179 = WebCore::objectForEventTargetListeners((WebCore *)a2, (JSC::VM *)a3, (JSC::JSGlobalObject *)v24, v178);
                    if (!v179)
                      goto LABEL_328;
                    v180 = v179;
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v181 = v234;
                    v233 = v234;
                    v182.super.isa = (Class)WebCore::constructInternalProperty((JSC::VM *)a2, a3, (uint64_t *)&v233, v180);
                    v183 = *(_BYTE *)(v13 + 4) & 0x1F;
                    if (v183 - 4 >= 0xA)
                    {
                      if ((v183 > 3 || v183 == 2) && (*(_BYTE *)(v13 + 4) & 0x10) == 0)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x195DF8024);
                      }
                    }
                    else if (*(_DWORD *)(*(_QWORD *)(v13 + 8) - 4) >= 4u)
                    {
                      v184 = *(_DWORD **)(a3 + 56);
                      v185 = v13;
                      v186 = 3;
                      goto LABEL_325;
                    }
                    goto LABEL_454;
                  }
                  JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength();
                  if (!v167)
                    goto LABEL_302;
                  goto LABEL_300;
                }
              }
              JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength();
              if (!v165)
                goto LABEL_286;
              goto LABEL_284;
            }
            v59 = *(_QWORD *)(v57 + 40);
            if ((v59 & 1) == 0)
            {
              v225 = *(_QWORD *)(v59 + 8) ^ *(_QWORD *)(v57 + 48);
              *(_QWORD *)(v57 + 32) = v59 + HIDWORD(v225);
              *(_QWORD *)(v57 + 40) = v59 + (int)v225;
              goto LABEL_82;
            }
            JSC::sanitizeStackForVM();
            v227 = JSC::LocalAllocator::allocateSlowCase();
          }
          else
          {
            v227 = JSC::CompleteSubspace::allocateSlow();
          }
          v59 = v227;
          goto LABEL_83;
        }
        JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength();
        if (!v28)
          goto LABEL_80;
        goto LABEL_78;
      }
    }
    if (v20 == &WebCore::JSWindowProxy::s_info)
    {
      v169 = (JSC::JSGlobalObject **)(*(_QWORD *)(a4 + 16) + 3408);
      goto LABEL_314;
    }
    if ((_DWORD)v19 && v20 != &WebCore::JSDOMWindow::s_info)
    {
      v187 = 16 * v19;
      do
        v187 = *(_QWORD *)(v187 + 16);
      while ((char **)v187 != &WebCore::JSDOMWindow::s_info && v187 != 0);
      if (!v187)
      {
        if (v20 == &WebCore::JSWorkerGlobalScope::s_info)
          goto LABEL_350;
        v198 = v20;
        do
          v198 = (char **)v198[2];
        while (v198 != &WebCore::JSWorkerGlobalScope::s_info && v198 != 0);
        if (v198)
        {
LABEL_350:
          v189 = (JSC::JSGlobalObject *)(*(_QWORD *)(a4 + 3400) + 320);
          goto LABEL_315;
        }
        if (v20 != &WebCore::JSEventTarget::s_info)
        {
          do
            v20 = (char **)v20[2];
          while (v20 != &WebCore::JSEventTarget::s_info && v20 != 0);
          if (!v20)
            return 0;
        }
        v169 = (JSC::JSGlobalObject **)(a4 + 24);
LABEL_314:
        v189 = *v169;
        if (!*v169)
          return 0;
LABEL_315:
        v190 = *(WTF::StringImpl **)(a3 + 56);
        v234 = v190;
        v191 = *(_DWORD *)(a3 + 896);
        if (v191)
          v192 = 16 * (v191 & 0xFFFFFFFE);
        else
          v192 = 0;
        if (*((_DWORD *)v190 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v190) & 1) != 0)
        {
          v13 = 0;
        }
        else
        {
          v13 = JSC::JSArray::tryCreate(v190, v192, 0, 0, v8);
          if (!v13)
            JSC::throwOutOfMemoryError();
        }
        v194 = WebCore::objectForEventTargetListeners((WebCore *)a2, (JSC::VM *)a3, v189, v193);
        if (!v194)
        {
LABEL_328:
          if (!*(_DWORD *)(a2 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)a2) & 1) == 0)
            return v13;
          return 0;
        }
        v195 = v194;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v181 = v234;
        v233 = v234;
        v182.super.isa = (Class)WebCore::constructInternalProperty((JSC::VM *)a2, a3, (uint64_t *)&v233, v195);
        v196 = *(_BYTE *)(v13 + 4) & 0x1F;
        if (v196 - 4 >= 0xA)
        {
          if ((v196 > 3 || v196 == 2) && (*(_BYTE *)(v13 + 4) & 0x10) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195DF8048);
          }
        }
        else if (*(_DWORD *)(*(_QWORD *)(v13 + 8) - 4))
        {
          v184 = *(_DWORD **)(a3 + 56);
          v185 = v13;
          v186 = 0;
LABEL_325:
          JSC::JSObject::setIndexQuickly(v185, v184, v186, v182);
          if (!v181)
            goto LABEL_328;
          goto LABEL_326;
        }
LABEL_454:
        JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength();
        if (!v181)
          goto LABEL_328;
LABEL_326:
        if (*(_DWORD *)v181 == 2)
          WTF::StringImpl::destroy(v181, v197);
        else
          *(_DWORD *)v181 -= 2;
        goto LABEL_328;
      }
    }
    else if (!(_DWORD)v19)
    {
      return 0;
    }
    v169 = (JSC::JSGlobalObject **)(a4 + 3408);
    goto LABEL_314;
  }
  v10 = *(WTF::StringImpl **)(a3 + 56);
  v234 = v10;
  v11 = *(_DWORD *)(a3 + 896);
  if (v11)
    v12 = 16 * (v11 & 0xFFFFFFFE);
  else
    v12 = 0;
  if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
  {
    v13 = 0;
  }
  else
  {
    v13 = JSC::JSArray::tryCreate(v10, v12, 0, 0, v8);
    if (!v13)
      JSC::throwOutOfMemoryError();
  }
  v14 = *(_QWORD *)(v9 + 88);
  if (!v14 || (v15 = *(_DWORD *)(v14 + 4), *(_DWORD *)v14 += 2, !v15))
  {
    v168 = 0;
    goto LABEL_364;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16 = v234;
  v233 = v234;
  v17 = *(_DWORD *)(v14 + 4);
  if (v17 != 1)
  {
    if (!v17)
    {
      v18 = *(_QWORD *)(a2 + 41968);
      goto LABEL_358;
    }
    goto LABEL_356;
  }
  v170 = *(unsigned __int8 **)(v14 + 8);
  if ((*(_BYTE *)(v14 + 16) & 4) != 0)
  {
    v171 = *v170;
LABEL_292:
    v18 = *(_QWORD *)(a2 + 8 * v171 + 42216);
    goto LABEL_358;
  }
  v171 = *(unsigned __int16 *)v170;
  if (v171 <= 0xFF)
  {
    v171 = v171;
    goto LABEL_292;
  }
LABEL_356:
  v234 = (WTF::StringImpl *)v14;
  v18 = JSC::JSString::create(a2, &v234);
  v201 = v234;
  v234 = 0;
  if (v201)
  {
    if (*(_DWORD *)v201 == 2)
      WTF::StringImpl::destroy(v201, v200);
    else
      *(_DWORD *)v201 -= 2;
  }
  v14 = 0;
LABEL_358:
  v202.super.isa = (Class)WebCore::constructInternalProperty((JSC::VM *)a2, a3, (uint64_t *)&v233, v18);
  v203 = *(_BYTE *)(v13 + 4) & 0x1F;
  if (v203 - 4 >= 0xA)
  {
    if ((v203 > 3 || v203 == 2) && (*(_BYTE *)(v13 + 4) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195DF8000);
    }
  }
  else if (*(_DWORD *)(*(_QWORD *)(v13 + 8) - 4))
  {
    JSC::JSObject::setIndexQuickly(v13, *(_DWORD **)(a3 + 56), 0, v202);
    if (v16)
      goto LABEL_361;
    goto LABEL_363;
  }
  JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength();
  if (v16)
  {
LABEL_361:
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v204);
    else
      *(_DWORD *)v16 -= 2;
  }
LABEL_363:
  v168 = 1;
LABEL_364:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v205 = v234;
  v233 = v234;
  if (*(_BYTE *)(v9 + 192))
    v206 = 7;
  else
    v206 = 6;
  v207.super.isa = (Class)WebCore::constructInternalProperty((JSC::VM *)a2, a3, (uint64_t *)&v233, v206);
  v208 = *(_BYTE *)(v13 + 4) & 0x1F;
  if (v208 - 4 >= 0xA)
  {
    if ((v208 > 3 || v208 == 2) && (*(_BYTE *)(v13 + 4) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195DF7F4CLL);
    }
LABEL_415:
    JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength();
    if (!v205)
      goto LABEL_372;
    goto LABEL_370;
  }
  if (*(_DWORD *)(*(_QWORD *)(v13 + 8) - 4) <= v168)
    goto LABEL_415;
  JSC::JSObject::setIndexQuickly(v13, *(_DWORD **)(a3 + 56), v168, v207);
  if (!v205)
    goto LABEL_372;
LABEL_370:
  if (*(_DWORD *)v205 == 2)
    WTF::StringImpl::destroy(v205, v209);
  else
    *(_DWORD *)v205 -= 2;
LABEL_372:
  v211 = WebCore::objectForEventTargetListeners((WebCore *)a2, (JSC::VM *)a3, (JSC::JSGlobalObject *)v9, v210);
  if (!v211)
    goto LABEL_378;
  v213 = v211;
  v214 = (v168 + 1);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v215 = v234;
  v233 = v234;
  v216.super.isa = (Class)WebCore::constructInternalProperty((JSC::VM *)a2, a3, (uint64_t *)&v233, v213);
  v217 = *(_BYTE *)(v13 + 4) & 0x1F;
  if (v217 - 4 >= 0xA)
  {
    if ((v217 > 3 || v217 == 2) && (*(_BYTE *)(v13 + 4) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195DF7FDCLL);
    }
  }
  else if (*(_DWORD *)(*(_QWORD *)(v13 + 8) - 4) > v214)
  {
    JSC::JSObject::setIndexQuickly(v13, *(_DWORD **)(a3 + 56), v214, v216);
    if (v215)
      goto LABEL_376;
    goto LABEL_378;
  }
  JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength();
  if (v215)
  {
LABEL_376:
    if (*(_DWORD *)v215 == 2)
      WTF::StringImpl::destroy(v215, v212);
    else
      *(_DWORD *)v215 -= 2;
  }
LABEL_378:
  if (*(_DWORD *)(a2 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)a2) & 1) != 0)
    v13 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v14, v212);
    else
      *(_DWORD *)v14 -= 2;
  }
  return v13;
}

unint64_t WebCore::constructInternalProperty(JSC::VM *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t SlowCase;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  int v30;
  int v31;
  uint64_t v32;

  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(v7 + 15056);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 + 60);
    v10 = *(_QWORD *)(v8 + 24);
    if (v10 < *(_QWORD *)(v8 + 32))
    {
LABEL_3:
      *(_QWORD *)(v8 + 24) = v10 + v9;
      goto LABEL_4;
    }
    v10 = *(_QWORD *)(v8 + 40);
    if ((v10 & 1) == 0)
    {
      v24 = *(_QWORD *)(v10 + 8) ^ *(_QWORD *)(v8 + 48);
      *(_QWORD *)(v8 + 32) = v10 + HIDWORD(v24);
      *(_QWORD *)(v8 + 40) = v10 + (int)v24;
      goto LABEL_3;
    }
    v27 = a2;
    JSC::sanitizeStackForVM();
    SlowCase = JSC::LocalAllocator::allocateSlowCase();
    a2 = v27;
  }
  else
  {
    v26 = a2;
    SlowCase = JSC::CompleteSubspace::allocateSlow();
    a2 = v26;
  }
  v10 = SlowCase;
LABEL_4:
  *(_DWORD *)v10 = 0;
  *(_DWORD *)v10 = *(_DWORD *)(a2 + 848);
  *(_DWORD *)(v10 + 4) = 16783360;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_QWORD *)(v10 + 56) = 0;
  if (*(_BYTE *)(v7 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral();
  v11 = v28;
  v12 = *a3;
  if (!*a3)
    goto LABEL_26;
  v13 = *(_DWORD *)(v12 + 4);
  if (v13 != 1)
  {
    if (v13)
      goto LABEL_9;
LABEL_26:
    v15 = *((_QWORD *)a1 + 5246);
    goto LABEL_10;
  }
  v21 = *(unsigned __int8 **)(v12 + 8);
  if ((*(_BYTE *)(v12 + 16) & 4) != 0)
  {
    v22 = *v21;
LABEL_23:
    v15 = *((_QWORD *)a1 + v22 + 5277);
    goto LABEL_10;
  }
  v23 = *(unsigned __int16 *)v21;
  if (v23 <= 0xFF)
  {
    v22 = v23;
    goto LABEL_23;
  }
LABEL_9:
  *(_DWORD *)v12 += 2;
  v28 = (WTF::StringImpl *)v12;
  v15 = JSC::JSString::create((uint64_t)a1, &v28);
  v16 = v28;
  v28 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
LABEL_10:
  v28 = 0;
  v29 = v10;
  v30 = -1;
  v31 = 0x1000000;
  v32 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, a1, (unint64_t)v11, v15, 0, (uint64_t)&v28);
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v17);
    else
      *(_DWORD *)v11 -= 2;
  }
  WTF::AtomStringImpl::addLiteral();
  v18 = v28;
  v28 = 0;
  v29 = v10;
  v30 = -1;
  v31 = 0x1000000;
  v32 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, a1, (unint64_t)v18, a4, 0, (uint64_t)&v28);
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v19);
    else
      *(_DWORD *)v18 -= 2;
  }
  return v10;
}

unint64_t WebCore::objectForEventTargetListeners(WebCore *this, JSC::VM *a2, JSC::JSGlobalObject *a3, WebCore::EventTarget *a4)
{
  JSC::JSGlobalObject *v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n128 v14;
  uint64_t v15;
  _DWORD **v16;
  _QWORD *v17;
  WTF::StringImpl **v18;
  _DWORD *v19;
  JSC::JSArray *v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  JSC::VM *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  unsigned int v52;
  JSValue v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *Allocator;
  uint64_t v59;
  uint64_t v60;
  uint64_t SlowCase;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  unint64_t v66;
  uint64_t Slow;
  WTF::StringImpl **v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  JSC::JSGlobalObject *v75;
  WTF::StringImpl **v76;
  WTF::StringImpl **v77;
  int v78[2];
  WebCore *v79;
  WTF::StringImpl *v80;
  unint64_t v81;
  int v82;
  int v83;
  uint64_t v84;

  v4 = a3;
  v7 = (*(uint64_t (**)(JSC::JSGlobalObject *))(*(_QWORD *)a3 + 8))(a3);
  if (!v7)
    return 0;
  v8 = *((_QWORD *)v4 + 2);
  if ((v8 & 0x1000000000000) == 0)
    return 0;
  v10 = v8 & 0xFFFFFFFFFFFFLL;
  v11 = *(unsigned int *)((v8 & 0xFFFFFFFFFFFFLL) + 0x1C);
  if (!(_DWORD)v11)
    return 0;
  v72 = v7;
  if (v11 >> 29)
  {
    __break(0xC471u);
LABEL_133:
    JUMPOUT(0x195DF8C50);
  }
  v12 = WTF::fastMalloc((WTF *)(8 * v11));
  v15 = *(unsigned int *)(v10 + 28);
  v74 = (WTF *)v12;
  if (!(_DWORD)v15)
  {
    v9 = 0;
    goto LABEL_130;
  }
  v16 = *(_DWORD ***)(v10 + 16);
  v73 = *(unsigned int *)(v10 + 28);
  v17 = (_QWORD *)v12;
  v18 = (WTF::StringImpl **)v12;
  do
  {
    v19 = *v16;
    if (*v16)
      *v19 += 2;
    *v17++ = v19;
    v16 += 4;
    --v15;
  }
  while (v15);
  v9 = 0;
  v76 = (WTF::StringImpl **)(v12 + 8 * v73);
  v14.n128_u64[0] = 16783360;
  v75 = v4;
  v79 = this;
  do
  {
    v20 = (JSC::JSArray *)*((_QWORD *)a2 + 7);
    v80 = v20;
    v21 = *((_DWORD *)a2 + 224);
    if (v21)
      v22 = 16 * (v21 & 0xFFFFFFFE);
    else
      v22 = 0;
    if (*((_DWORD *)v20 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v20) & 1) != 0)
    {
      v23 = 0;
    }
    else
    {
      v23 = JSC::JSArray::tryCreate(v20, v22, 0, 0, v14);
      if (!v23)
        JSC::throwOutOfMemoryError();
    }
    v24 = WebCore::EventTarget::eventListeners((uint64_t)v4, v18);
    v25 = *((unsigned int *)v24 + 3);
    v26 = v79;
    if (!(_DWORD)v25)
      goto LABEL_113;
    v77 = v18;
    *(_QWORD *)v78 = v9;
    v27 = 0;
    v28 = *v24;
    v29 = 8 * v25;
    do
    {
      v30 = *(_BYTE **)(*(_QWORD *)v28 + 8);
      if (!v30[20])
      {
        v31 = *((_QWORD *)v30 + 8);
        if (v31 && v31 == *((_QWORD *)a2 + 415))
        {
          v33 = *(_QWORD *)(v31 + 16);
          ++*((_DWORD *)v30 + 4);
          v34 = v30[40];
          if ((v34 & 4) == 0)
          {
            v55 = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v30 + 88))(v30, v72);
            if (v55)
            {
              v56 = v55;
              if ((v55 & 8) != 0)
                v13 = (v55 - 112) | 1;
              else
                v13 = v55 & 0xFFFFFFFFFFFFC000;
              if ((v13 & 1) != 0)
                v57 = v13 + 47;
              else
                v57 = *(_QWORD *)v13 + 32;
              Allocator = *(_QWORD **)(v57 + 16);
              if (!Allocator)
                Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
              *(_QWORD *)(v57 + 16) = *Allocator;
              *Allocator = v56;
              Allocator[1] = 0;
              Allocator[2] = 0;
              v59 = *((_QWORD *)v30 + 6);
              *((_QWORD *)v30 + 6) = Allocator;
              if (v59)
                *(_QWORD *)(v59 + 8) = 3;
              v60 = *((_QWORD *)v30 + 7);
              if (v60)
              {
                if ((*(_BYTE *)(v60 + 8) & 3) == 0)
                {
                  v13 = *(_QWORD *)v60;
                  if (*(_QWORD *)v60)
                  {
                    if (*(_DWORD *)(v33 + 760) >= *(unsigned __int8 *)(v13 + 7))
                      JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v33 + 192), (const JSCell *)v13);
                  }
                }
              }
              v34 = v30[40] | 4;
              v30[40] = v34;
              v26 = v79;
            }
            else
            {
              v34 = v30[40];
            }
          }
          if ((v34 & 4) != 0 && (v35 = *((_QWORD *)v30 + 6)) != 0 && (*(_BYTE *)(v35 + 8) & 3) == 0)
            v36 = *(_QWORD *)v35;
          else
            v36 = 0;
          if (*((_DWORD *)v30 + 4) != 1)
          {
            --*((_DWORD *)v30 + 4);
            if (!v36)
              goto LABEL_63;
LABEL_33:
            v37 = *((_QWORD *)a2 + 7);
            v38 = *(_QWORD *)(v37 + 15056);
            if (v38)
            {
              v39 = *(unsigned int *)(v38 + 60);
              v40 = *(_QWORD *)(v38 + 24);
              if (v40 < *(_QWORD *)(v38 + 32))
                goto LABEL_35;
              v40 = *(_QWORD *)(v38 + 40);
              if ((v40 & 1) == 0)
              {
                v54 = *(_QWORD *)(v40 + 8) ^ *(_QWORD *)(v38 + 48);
                *(_QWORD *)(v38 + 32) = v40 + HIDWORD(v54);
                *(_QWORD *)(v38 + 40) = v40 + (int)v54;
LABEL_35:
                *(_QWORD *)(v38 + 24) = v40 + v39;
LABEL_36:
                *(_DWORD *)v40 = 0;
                *(_DWORD *)v40 = *((_DWORD *)a2 + 212);
                *(_DWORD *)(v40 + 4) = 16783360;
                *(_OWORD *)(v40 + 8) = 0u;
                *(_OWORD *)(v40 + 24) = 0u;
                *(_OWORD *)(v40 + 40) = 0u;
                *(_QWORD *)(v40 + 56) = 0;
                v26 = v79;
                if (*(_BYTE *)(v37 + 755))
                  __dmb(0xAu);
                WTF::AtomStringImpl::addLiteral();
                v41 = v80;
                v80 = 0;
                v81 = v40;
                v82 = -1;
                v83 = 0x1000000;
                v84 = 0;
                JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v40, v79, (unint64_t)v41, v36, 0, (uint64_t)&v80);
                if (v41)
                {
                  if (*(_DWORD *)v41 == 2)
                    WTF::StringImpl::destroy(v41, v42);
                  else
                    *(_DWORD *)v41 -= 2;
                }
                WTF::AtomStringImpl::addLiteral();
                v43 = v80;
                if ((*(_BYTE *)(*(_QWORD *)v28 + 4) & 1) != 0)
                  v44 = 7;
                else
                  v44 = 6;
                v80 = 0;
                v81 = v40;
                v82 = -1;
                v83 = 0x1000000;
                v84 = 0;
                JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v40, v79, (unint64_t)v43, v44, 0, (uint64_t)&v80);
                if (v43)
                {
                  if (*(_DWORD *)v43 == 2)
                    WTF::StringImpl::destroy(v43, v45);
                  else
                    *(_DWORD *)v43 -= 2;
                }
                WTF::AtomStringImpl::addLiteral();
                v46 = v80;
                if ((*(_BYTE *)(*(_QWORD *)v28 + 4) & 2) != 0)
                  v47 = 7;
                else
                  v47 = 6;
                v80 = 0;
                v81 = v40;
                v82 = -1;
                v83 = 0x1000000;
                v84 = 0;
                JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v40, v79, (unint64_t)v46, v47, 0, (uint64_t)&v80);
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, v48);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                WTF::AtomStringImpl::addLiteral();
                v49 = v80;
                if ((*(_BYTE *)(*(_QWORD *)v28 + 4) & 4) != 0)
                  v50 = 7;
                else
                  v50 = 6;
                v80 = 0;
                v81 = v40;
                v82 = -1;
                v83 = 0x1000000;
                v84 = 0;
                JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v40, v79, (unint64_t)v49, v50, 0, (uint64_t)&v80);
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, v51);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v52 = *(_BYTE *)(v23 + 4) & 0x1F;
                if (v52 - 4 >= 0xA)
                {
                  if ((v52 > 3 || v52 == 2) && (*(_BYTE *)(v23 + 4) & 0x10) == 0)
                  {
                    __break(0xC471u);
                    goto LABEL_133;
                  }
                }
                else if (*(_DWORD *)(*(_QWORD *)(v23 + 8) - 4) > v27)
                {
                  v53.super.isa = (Class)v40;
                  JSC::JSObject::setIndexQuickly(v23, *((_DWORD **)a2 + 7), v27, v53);
LABEL_62:
                  v27 = (v27 + 1);
                  goto LABEL_63;
                }
                JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength();
                goto LABEL_62;
              }
              JSC::sanitizeStackForVM();
              SlowCase = JSC::LocalAllocator::allocateSlowCase();
            }
            else
            {
              SlowCase = JSC::CompleteSubspace::allocateSlow();
            }
            v40 = SlowCase;
            goto LABEL_36;
          }
          (*(void (**)(_BYTE *))(*(_QWORD *)v30 + 8))(v30);
          if (v36)
            goto LABEL_33;
        }
      }
LABEL_63:
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    if (!(_DWORD)v27)
    {
      v4 = v75;
      v18 = v77;
      v9 = *(_QWORD *)v78;
      goto LABEL_113;
    }
    v4 = v75;
    v9 = *(_QWORD *)v78;
    if (*(_QWORD *)v78)
      goto LABEL_107;
    v62 = *((_QWORD *)a2 + 7);
    v63 = *(_QWORD *)(v62 + 15056);
    if (!v63)
    {
      Slow = JSC::CompleteSubspace::allocateSlow();
      goto LABEL_121;
    }
    v64 = *(unsigned int *)(v63 + 60);
    v9 = *(_QWORD *)(v63 + 24);
    if (v9 < *(_QWORD *)(v63 + 32))
      goto LABEL_104;
    v9 = *(_QWORD *)(v63 + 40);
    if ((v9 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      Slow = JSC::LocalAllocator::allocateSlowCase();
LABEL_121:
      v9 = Slow;
      goto LABEL_105;
    }
    v66 = *(_QWORD *)(v9 + 8) ^ *(_QWORD *)(v63 + 48);
    *(_QWORD *)(v63 + 32) = v9 + HIDWORD(v66);
    *(_QWORD *)(v63 + 40) = v9 + (int)v66;
LABEL_104:
    *(_QWORD *)(v63 + 24) = v9 + v64;
LABEL_105:
    *(_DWORD *)v9 = 0;
    *(_DWORD *)v9 = *((_DWORD *)a2 + 212);
    *(_DWORD *)(v9 + 4) = 16783360;
    *(_OWORD *)(v9 + 8) = 0u;
    *(_OWORD *)(v9 + 24) = 0u;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_QWORD *)(v9 + 56) = 0;
    v26 = v79;
    if (*(_BYTE *)(v62 + 755))
      __dmb(0xAu);
LABEL_107:
    v18 = v77;
    v65 = *v77;
    if (*v77)
      *(_DWORD *)v65 += 2;
    v80 = 0;
    v81 = v9;
    v82 = -1;
    v83 = 0x1000000;
    v84 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, v26, (unint64_t)v65, v23, 0, (uint64_t)&v80);
    if (v65)
    {
      if (*(_DWORD *)v65 == 2)
        WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)v65 -= 2;
    }
LABEL_113:
    ++v18;
  }
  while (v18 != v76);
  v68 = (WTF::StringImpl **)v74;
  v69 = 8 * v73;
  do
  {
    v70 = *v68;
    *v68 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
        WTF::StringImpl::destroy(v70, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)v70 -= 2;
    }
    ++v68;
    v69 -= 8;
  }
  while (v69);
LABEL_130:
  WTF::fastFree(v74, (void *)v13);
  return v9;
}

BOOL WebCore::WebInjectedScriptHost::isHTMLAllCollection(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _BOOL8 result;
  uint64_t v4;
  char **v5;
  BOOL v6;

  if ((a3 & 0xFFFE000000000002) != 0)
    return 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C);
  result = *(_DWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v6 = v5 == &WebCore::JSHTMLAllCollection::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      result = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLAllCollection::s_info && v5 != 0);
  }
  return result;
}

WebCore::CommandLineAPIHost *WebCore::WebInjectedScriptManager::connect(WebCore::CommandLineAPIHost **this)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  WebCore::CommandLineAPIHost *result;
  WTF *v6;
  void *v7;

  Inspector::InjectedScriptManager::connect((Inspector::InjectedScriptManager *)this);
  v2 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)v2 = 1;
  *(_QWORD *)(v2 + 8) = 0;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v3 = &off_1E33EDB18;
  *(_QWORD *)(v2 + 16) = v3;
  *(_QWORD *)(v2 + 24) = 0;
  result = this[6];
  this[6] = (WebCore::CommandLineAPIHost *)v2;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::CommandLineAPIHost::~CommandLineAPIHost(result, v4);
      return (WebCore::CommandLineAPIHost *)WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WebCore::CommandLineAPIHost **WebCore::WebInjectedScriptManager::disconnect(WebCore::CommandLineAPIHost ***this)
{
  void *v2;
  WebCore::CommandLineAPIHost **result;
  WebCore::CommandLineAPIHost **v4;
  WebCore::CommandLineAPIHost **v5;

  Inspector::InjectedScriptManager::disconnect((Inspector::InjectedScriptManager *)this);
  v5 = this[6];
  v4 = (WebCore::CommandLineAPIHost **)(this + 6);
  result = v5;
  if (v5)
  {
    WebCore::CommandLineAPIHost::disconnect((WebCore::CommandLineAPIHost *)result, v2);
    return WTF::RefPtr<WebCore::CommandLineAPIHost,WTF::RawPtrTraits<WebCore::CommandLineAPIHost>,WTF::DefaultRefDerefTraits<WebCore::CommandLineAPIHost>>::operator=(v4, 0);
  }
  return result;
}

WebCore::CommandLineAPIHost **WTF::RefPtr<WebCore::CommandLineAPIHost,WTF::RawPtrTraits<WebCore::CommandLineAPIHost>,WTF::DefaultRefDerefTraits<WebCore::CommandLineAPIHost>>::operator=(WebCore::CommandLineAPIHost **a1, void *a2)
{
  WebCore::CommandLineAPIHost *v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::CommandLineAPIHost::~CommandLineAPIHost(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

void WebCore::WebInjectedScriptManager::didCreateInjectedScript(WebCore::WebInjectedScriptManager *this, const Inspector::InjectedScript *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  _QWORD v4[5];
  WTF::StringImpl *v5;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::InjectedScriptModule::InjectedScriptModule((Inspector::InjectedScriptModule *)v4, (const WTF::String *)&v5);
  v3 = v5;
  v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4[0] = &off_1E33EDAE8;
  Inspector::InjectedScriptModule::ensureInjected();
  Inspector::InjectedScriptModule::~InjectedScriptModule((Inspector::InjectedScriptModule *)v4);
}

void WebCore::WebInjectedScriptManager::discardInjectedScriptsFor(WebCore::WebInjectedScriptManager *this, WebCore::LocalDOMWindow *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  Inspector::InjectedScript *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  int *v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  int *v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD **v45;
  uint64_t v46;
  JSC::HandleSet *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  unsigned int v59;
  WebCore **v60;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v68;
  unsigned int v69;
  unint64_t v70;
  double v71;
  double v72;
  double v73;
  unsigned int v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unsigned int v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  JSC::HandleSet *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v2 = *((_QWORD *)this + 2);
  if (!v2)
    return;
  if (!*(_DWORD *)(v2 - 12))
    return;
  v3 = *((_QWORD *)a2 + 9);
  if (!v3)
    return;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return;
  if (*(_BYTE *)(v4 + 178))
  {
    __break(0xC471u);
    return;
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 4);
    if (v7)
    {
      v8 = 0;
      v9 = v7 - 1;
      do
      {
        v10 = v9;
        v11 = v6 + 48 * v9;
        if ((*(_DWORD *)v11 + 1) >= 2
          && WebCore::executionContext(*(WebCore **)(v11 + 24), a2) == v4 - 96)
        {
          *(_DWORD *)v11 = -1;
          Inspector::InjectedScript::~InjectedScript((Inspector::InjectedScript *)(v6 + 48 * v9 + 8));
          ++v8;
        }
        --v9;
      }
      while (v10);
      v12 = *((_QWORD *)this + 1);
      if (v8)
      {
        *(_DWORD *)(v12 - 16) += v8;
        v13 = *((_QWORD *)this + 1);
        if (v13)
          v14 = *(_DWORD *)(v13 - 12);
        else
          v14 = 0;
        *(_DWORD *)(v13 - 12) = v14 - v8;
        v12 = *((_QWORD *)this + 1);
      }
      if (v12)
      {
        v15 = *(unsigned int *)(v12 - 4);
        v16 = *(unsigned int *)(v12 - 12);
        if (v15 >= 9 && 6 * (int)v16 < v15)
        {
          v18 = (v16 - 1) | ((v16 - 1) >> 1) | ((((_DWORD)v16 - 1) | ((v16 - 1) >> 1)) >> 2);
          v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
          v20 = (v19 | HIWORD(v19)) + 1;
          if (v20 > 0x400)
          {
            if (v20 > 2 * v16)
              goto LABEL_28;
          }
          else if (3 * v20 > 4 * v16)
          {
LABEL_26:
            v21 = (double)v16;
            v22 = (double)v20;
            v23 = 0.604166667;
LABEL_29:
            if (v22 * v23 <= v21)
              LODWORD(v20) = 2 * v20;
            v89 = v4;
            if (v20 <= 8)
              v24 = 8;
            else
              v24 = v20;
            v25 = WTF::fastMalloc((WTF *)(48 * v24 + 16));
            v26 = (Inspector::InjectedScript *)(v25 + 24);
            v27 = v24;
            do
            {
              *((_DWORD *)v26 - 2) = 0;
              v26 = (Inspector::InjectedScript *)(Inspector::InjectedScript::InjectedScript(v26) + 48);
              --v27;
            }
            while (v27);
            v29 = 0;
            *((_QWORD *)this + 1) = v25 + 16;
            *(_DWORD *)(v25 + 12) = v24;
            *(_DWORD *)(*((_QWORD *)this + 1) - 8) = v24 - 1;
            *(_DWORD *)(*((_QWORD *)this + 1) - 16) = 0;
            *(_DWORD *)(*((_QWORD *)this + 1) - 12) = v16;
            v91 = MEMORY[0x1E0CC10E0] + 16;
            v90 = MEMORY[0x1E0CC10D8] + 16;
            v92 = v15;
            do
            {
              v30 = (int *)(v12 + 48 * v29);
              v31 = *v30;
              if (*v30 != -1)
              {
                if (v31)
                {
                  v32 = *((_QWORD *)this + 1);
                  if (v32)
                    v33 = *(_DWORD *)(v32 - 8);
                  else
                    v33 = 0;
                  v34 = 0;
                  v35 = 9 * ((v31 + ~(v31 << 15)) ^ ((v31 + ~(v31 << 15)) >> 10));
                  v36 = ((v35 ^ (v35 >> 6)) + ~((v35 ^ (v35 >> 6)) << 11)) ^ (((v35 ^ (v35 >> 6))
                                                                             + ~((v35 ^ (v35 >> 6)) << 11)) >> 16);
                  do
                  {
                    v37 = v36 & v33;
                    v38 = (int *)(v32 + 48 * (v36 & v33));
                    v36 = ++v34 + (v36 & v33);
                  }
                  while (*v38);
                  v39 = v32 + 48 * v37;
                  Inspector::InjectedScript::~InjectedScript((Inspector::InjectedScript *)(v39 + 8));
                  *v38 = *v30;
                  *(_QWORD *)(v39 + 8) = v91;
                  v40 = *(_DWORD **)(v12 + 48 * v29 + 16);
                  if (v40)
                    *v40 += 2;
                  *(_QWORD *)(v39 + 16) = v40;
                  v41 = v32 + 48 * v37;
                  v42 = v12 + 48 * v29;
                  *(_QWORD *)(v41 + 32) = 0;
                  v43 = (_QWORD *)(v41 + 32);
                  v46 = *(_QWORD *)(v42 + 32);
                  v45 = (_QWORD **)(v42 + 32);
                  v44 = v46;
                  *(v43 - 1) = *(v45 - 1);
                  if (v46)
                  {
                    v47 = *(JSC::HandleSet **)(((v44 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
                    v48 = (_QWORD *)*((_QWORD *)v47 + 5);
                    if (!v48)
                    {
                      v88 = v47;
                      JSC::HandleSet::grow(v47);
                      v47 = v88;
                      v48 = (_QWORD *)*((_QWORD *)v88 + 5);
                    }
                    *((_QWORD *)v47 + 5) = *v48;
                    v48[2] = 0;
                    v49 = v48 + 2;
                    *v48 = 0;
                    v48[1] = 0;
                    *v43 = v48 + 2;
                    v50 = *v45;
                    if (*v45)
                      v50 = (_QWORD *)*v50;
                    v51 = (unint64_t)(v49 - 2);
                    if ((v50 != 0) != (*v49 != 0))
                    {
                      if (v50)
                      {
                        v52 = *(unint64_t **)((v51 & 0xFFFFFFFFFFFFF000) + 0x10);
                        v53 = v52[3];
                        v52 += 3;
                        *(_QWORD *)v51 = v53;
                        *(v49 - 1) = v52;
                        *v52 = v51;
                        *(_QWORD *)(v53 + 8) = v51;
                      }
                      else
                      {
                        v55 = *(_QWORD *)v51;
                        v54 = (_QWORD *)*(v49 - 1);
                        *v54 = *(_QWORD *)v51;
                        *(_QWORD *)(v55 + 8) = v54;
                        *(_QWORD *)v51 = 0;
                        *(_QWORD *)(v51 + 8) = 0;
                        v49 = (_QWORD *)*v43;
                      }
                    }
                    *v49 = v50;
                  }
                  *(_QWORD *)(v32 + 48 * v37 + 40) = *(_QWORD *)(v12 + 48 * v29 + 40);
                  *(_QWORD *)(v39 + 8) = v90;
                  v15 = v92;
                }
                Inspector::InjectedScript::~InjectedScript((Inspector::InjectedScript *)(v12 + 48 * v29 + 8));
              }
              ++v29;
            }
            while (v29 != v15);
            WTF::fastFree((WTF *)(v12 - 16), v28);
            v4 = v89;
            goto LABEL_60;
          }
          LODWORD(v20) = 2 * v20;
          if (v20 <= 0x400)
            goto LABEL_26;
LABEL_28:
          v21 = (double)v16;
          v22 = (double)v20;
          v23 = 0.416666667;
          goto LABEL_29;
        }
      }
    }
  }
LABEL_60:
  v56 = *((_QWORD *)this + 2);
  if (v56)
  {
    v57 = *(_DWORD *)(v56 - 4);
    if (v57)
    {
      v58 = 0;
      v59 = v57 - 1;
      do
      {
        v60 = (WebCore **)(v56 + 16 * v59);
        if ((unint64_t)*v60 + 1 >= 2 && WebCore::executionContext(*v60, a2) == v4 - 96)
        {
          *v60 = (WebCore *)-1;
          ++v58;
        }
      }
      while ((unint64_t)v59--);
      v62 = *((_QWORD *)this + 2);
      if (v58)
      {
        *(_DWORD *)(v62 - 16) += v58;
        v63 = *((_QWORD *)this + 2);
        if (v63)
          v64 = *(_DWORD *)(v63 - 12);
        else
          v64 = 0;
        *(_DWORD *)(v63 - 12) = v64 - v58;
        v62 = *((_QWORD *)this + 2);
      }
      if (v62)
      {
        v65 = *(unsigned int *)(v62 - 4);
        v66 = *(unsigned int *)(v62 - 12);
        if (v65 >= 9 && 6 * (int)v66 < v65)
        {
          v68 = (v66 - 1) | ((v66 - 1) >> 1) | ((((_DWORD)v66 - 1) | ((v66 - 1) >> 1)) >> 2);
          v69 = v68 | (v68 >> 4) | ((v68 | (v68 >> 4)) >> 8);
          v70 = (v69 | HIWORD(v69)) + 1;
          if (v70 > 0x400)
          {
            if (v70 > 2 * v66)
              goto LABEL_84;
          }
          else if (3 * v70 > 4 * v66)
          {
LABEL_82:
            v71 = (double)v66;
            v72 = (double)v70;
            v73 = 0.604166667;
LABEL_85:
            if (v72 * v73 <= v71)
              LODWORD(v70) = 2 * v70;
            if (v70 <= 8)
              v74 = 8;
            else
              v74 = v70;
            v75 = WTF::fastZeroedMalloc((WTF *)(16 * v74 + 16));
            v77 = 0;
            *((_QWORD *)this + 2) = v75 + 16;
            *(_DWORD *)(v75 + 12) = v74;
            *(_DWORD *)(*((_QWORD *)this + 2) - 8) = v74 - 1;
            *(_DWORD *)(*((_QWORD *)this + 2) - 16) = 0;
            *(_DWORD *)(*((_QWORD *)this + 2) - 12) = v66;
            do
            {
              v78 = (_QWORD *)(v62 + 16 * v77);
              if ((unint64_t)(*v78 + 1) >= 2)
              {
                v79 = *((_QWORD *)this + 2);
                if (v79)
                  v80 = *(_DWORD *)(v79 - 8);
                else
                  v80 = 0;
                v81 = (~(*v78 << 32) + *v78) ^ ((~(*v78 << 32) + *v78) >> 22);
                v82 = 9 * ((v81 + ~(v81 << 13)) ^ ((unint64_t)(v81 + ~(v81 << 13)) >> 8));
                v83 = (v82 ^ (v82 >> 15)) + ~((v82 ^ (v82 >> 15)) << 27);
                v84 = v80 & ((v83 >> 31) ^ v83);
                v85 = 1;
                do
                {
                  v86 = v84;
                  v87 = *(_QWORD *)(v79 + 16 * v84);
                  v84 = (v84 + v85++) & v80;
                }
                while (v87);
                *(_OWORD *)(v79 + 16 * v86) = *(_OWORD *)v78;
              }
              ++v77;
            }
            while (v77 != v65);
            WTF::fastFree((WTF *)(v62 - 16), v76);
            return;
          }
          LODWORD(v70) = 2 * v70;
          if (v70 <= 0x400)
            goto LABEL_82;
LABEL_84:
          v71 = (double)v66;
          v72 = (double)v70;
          v73 = 0.416666667;
          goto LABEL_85;
        }
      }
    }
  }
}

uint64_t WebCore::WorkerDebugger::attachDebugger(WebCore::WorkerDebugger *this)
{
  uint64_t v2;
  JSC::JSGlobalObject **v3;
  JSC::JSGlobalObject *v4;
  JSC::JSGlobalObject **v5;

  v2 = *(_QWORD *)(*((_QWORD *)this + 29) + 344);
  v3 = *(JSC::JSGlobalObject ***)(v2 + 24);
  if (!v3 || (v4 = *v3) == 0)
  {
    WebCore::WorkerOrWorkletScriptController::initScript(*(_QWORD *)(*((_QWORD *)this + 29) + 344));
    v5 = *(JSC::JSGlobalObject ***)(v2 + 24);
    if (v5)
      v4 = *v5;
    else
      v4 = 0;
  }
  return JSC::Debugger::attach(this, v4);
}

JSC::Debugger *WebCore::WorkerDebugger::detachDebugger(JSC::Debugger *this, char a2)
{
  JSC::Debugger *v3;
  char v4[8];

  v3 = this;
  if (*(_QWORD *)(*((_QWORD *)this + 29) + 344))
    this = (JSC::Debugger *)JSC::Debugger::detach();
  if ((a2 & 1) == 0)
  {
    MEMORY[0x19AEA3294](v4, *((_QWORD *)v3 + 2));
    JSC::Debugger::recompileAllJSFunctions(v3);
    return (JSC::Debugger *)MEMORY[0x19AEA32A0](v4);
  }
  return this;
}

uint64_t WebCore::WorkerDebugger::recompileAllJSFunctions(WebCore::WorkerDebugger *this)
{
  _BYTE v3[8];

  MEMORY[0x19AEA3294](v3, *((_QWORD *)this + 2));
  JSC::Debugger::recompileAllJSFunctions(this);
  return MEMORY[0x19AEA32A0](v3);
}

uint64_t WebCore::WorkerDebugger::runEventLoopWhilePaused(WebCore::WorkerOrWorkletGlobalScope **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t ***v5;

  v2 = WebCore::threadGlobalData((WebCore *)this);
  WebCore::ThreadTimers::fireTimersInNestedEventLoop(*(uint64_t ***)(v2 + 48));
  v3 = *(_QWORD *)(*((_QWORD *)this[29] + 45) + 48);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  if ((result & 1) == 0)
  {
    while (1)
    {
      v5 = *(uint64_t ****)(*((_QWORD *)this[29] + 45) + 48);
      if (((unsigned int (*)(uint64_t ***))(*v5)[7])(v5))
        break;
      result = (uint64_t)WebCore::WorkerDedicatedRunLoop::runInDebuggerMode(v5, this[29]);
      if (!(_DWORD)result || *((_BYTE *)this + 8))
        return result;
    }
    result = 96;
    __break(0xC471u);
  }
  return result;
}

void WebCore::WorkerDebugger::reportException(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3)
{
  WebCore::reportException(a2, a3, 0, 0, 0);
}

WebCore::WorkerInspectorController *WebCore::WorkerInspectorController::WorkerInspectorController(WebCore::WorkerInspectorController *this, WebCore::WorkerOrWorkletGlobalScope *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  Inspector::FrontendRouter *v7;
  WTF *v8;
  void *v9;
  WTF *v10;
  uint64_t v11;
  _QWORD *v12;
  WTF *v14;
  _QWORD *v15;
  WTF *v16;

  *(_QWORD *)this = off_1E33EEC48;
  v4 = WTF::fastMalloc((WTF *)0xF0);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = this;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *((_QWORD *)this + 1) = v4;
  v5 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)(v5 + 16) = 0;
  *(_BYTE *)(v5 + 24) = 0;
  *(_BYTE *)(v5 + 32) = 0;
  *(_QWORD *)v5 = off_1E33EED48;
  WTF::fastMalloc((WTF *)0x38);
  v6 = (_QWORD *)Inspector::InjectedScriptManager::InjectedScriptManager();
  *v6 = off_1E33EEB98;
  v6[6] = 0;
  *((_QWORD *)this + 2) = v6;
  v7 = (Inspector::FrontendRouter *)v5;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 8) == 1)
      v7 = (Inspector::FrontendRouter *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    else
      --*(_DWORD *)(v5 + 8);
  }
  Inspector::FrontendRouter::create(v7);
  v8 = (WTF *)*((_QWORD *)this + 3);
  ++*(_DWORD *)v8;
  v16 = v8;
  Inspector::BackendDispatcher::create();
  v10 = v16;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
    {
      v14 = (WTF *)*((_QWORD *)v16 + 1);
      if ((WTF *)((char *)v16 + 24) != v14 && v14)
      {
        *((_QWORD *)v16 + 1) = 0;
        *((_DWORD *)v16 + 4) = 0;
        WTF::fastFree(v14, v9);
        v10 = v16;
      }
      WTF::fastFree(v10, v9);
    }
    else
    {
      --*(_DWORD *)v16;
    }
  }
  v11 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v11 = 1;
  *(_OWORD *)(v11 + 8) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_QWORD *)(v11 + 16) = 0x7FF8000000000000;
  *((_QWORD *)this + 5) = v11;
  *((_QWORD *)this + 6) = 0;
  Inspector::AgentRegistry::AgentRegistry((WebCore::WorkerInspectorController *)((char *)this + 56));
  *((_QWORD *)this + 9) = a2;
  *((_QWORD *)this + 10) = 0;
  *((_BYTE *)this + 88) = 0;
  WTF::fastMalloc((WTF *)0x68);
  v12 = (_QWORD *)Inspector::InspectorConsoleAgent::InspectorConsoleAgent();
  *v12 = off_1E33F2198;
  v12[2] = &unk_1E33F2208;
  *(_QWORD *)(*((_QWORD *)this + 1) + 16) = v12;
  v15 = v12;
  Inspector::AgentRegistry::append();
  if (v15)
    (*(void (**)(_QWORD *))(*v15 + 8))(v15);
  return this;
}

void WebCore::WorkerInspectorController::~WorkerInspectorController(WebCore::WorkerInspectorController *this)
{
  _OWORD *v2;
  uint64_t v3;
  void *v4;
  JSC::Debugger *v5;
  WTF *v6;
  void *v7;
  uint64_t v8;
  Inspector::BackendDispatcher *v9;
  uint64_t v10;
  Inspector::InjectedScriptManager *v11;
  WebCore::CommandLineAPIHost *v12;
  WTF *v13;
  void *v14;
  WTF *v15;
  WTF *v16;
  WTF *v17;
  void *v18;
  WTF *v19;
  WTF *v20;
  void *v21;

  v2 = (_OWORD *)*((_QWORD *)this + 1);
  v2[13] = 0u;
  v2[14] = 0u;
  v2[11] = 0u;
  v2[12] = 0u;
  v2[9] = 0u;
  v2[10] = 0u;
  v2[7] = 0u;
  v2[8] = 0u;
  v2[5] = 0u;
  v2[6] = 0u;
  v2[3] = 0u;
  v2[4] = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  Inspector::AgentRegistry::~AgentRegistry((WebCore::WorkerInspectorController *)((char *)this + 56));
  v5 = (JSC::Debugger *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    JSC::Debugger::~Debugger(v5);
    WTF::fastFree(v6, v7);
  }
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      v16 = *(WTF **)(v8 + 24);
      if (v16)
      {
        *(_QWORD *)(v8 + 24) = 0;
        *(_DWORD *)(v8 + 32) = 0;
        WTF::fastFree(v16, v4);
      }
      WTF::fastFree((WTF *)v8, v4);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, (WTF::StringImpl *)v4);
      WTF::fastFree(v17, v18);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      v19 = *(WTF **)(v10 + 8);
      if ((WTF *)(v10 + 24) != v19 && v19)
      {
        *(_QWORD *)(v10 + 8) = 0;
        *(_DWORD *)(v10 + 16) = 0;
        WTF::fastFree(v19, v4);
      }
      WTF::fastFree((WTF *)v10, v4);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  v11 = (Inspector::InjectedScriptManager *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    v12 = (WebCore::CommandLineAPIHost *)*((_QWORD *)v11 + 6);
    *((_QWORD *)v11 + 6) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
      {
        WebCore::CommandLineAPIHost::~CommandLineAPIHost(v12, v4);
        WTF::fastFree(v20, v21);
      }
      else
      {
        --*(_DWORD *)v12;
      }
    }
    Inspector::InjectedScriptManager::~InjectedScriptManager(v11);
    WTF::fastFree(v13, v14);
  }
  v15 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
      WTF::fastFree(v15, v4);
    else
      --*(_DWORD *)v15;
  }
}

{
  WTF *v1;
  void *v2;

  WebCore::WorkerInspectorController::~WorkerInspectorController(this);
  WTF::fastFree(v1, v2);
}

JSC::Debugger *WebCore::WorkerInspectorController::workerTerminating(WebCore::WorkerInspectorController *this)
{
  WebCore::CommandLineAPIHost **v2;
  void *v3;
  WebCore::CommandLineAPIHost *v4;
  WebCore::CommandLineAPIHost **v5;
  WebCore::CommandLineAPIHost *v6;
  JSC::Debugger *result;
  WTF *v8;
  void *v9;

  v2 = (WebCore::CommandLineAPIHost **)*((_QWORD *)this + 2);
  Inspector::InjectedScriptManager::disconnect((Inspector::InjectedScriptManager *)v2);
  v6 = v2[6];
  v5 = v2 + 6;
  v4 = v6;
  if (v6)
  {
    WebCore::CommandLineAPIHost::disconnect(v4, v3);
    WTF::RefPtr<WebCore::CommandLineAPIHost,WTF::RawPtrTraits<WebCore::CommandLineAPIHost>,WTF::DefaultRefDerefTraits<WebCore::CommandLineAPIHost>>::operator=(v5, 0);
  }
  WebCore::WorkerInspectorController::disconnectFrontend((uint64_t *)this);
  Inspector::AgentRegistry::discardValues((WebCore::WorkerInspectorController *)((char *)this + 56));
  result = (JSC::Debugger *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (result)
  {
    JSC::Debugger::~Debugger(result);
    return (JSC::Debugger *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t *WebCore::WorkerInspectorController::disconnectFrontend(uint64_t *result)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  if (*(_DWORD *)(result[3] + 20))
  {
    v1 = result;
    v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v2 = off_1E33EED20;
    v4 = v2;
    WTF::callOnMainThread();
    if (v4)
      (*(void (**)(_QWORD *))(*v4 + 8))(v4);
    Inspector::AgentRegistry::willDestroyFrontendAndBackend();
    Inspector::FrontendRouter::disconnectFrontend();
    v3 = v1[10];
    v1[10] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    return WebCore::WorkerInspectorController::updateServiceWorkerPageFrontendCount((WebCore::WorkerInspectorController *)v1);
  }
  return result;
}

uint64_t *WebCore::WorkerInspectorController::connectFrontend(WebCore::WorkerInspectorController *this)
{
  uint64_t v2;
  JSC::Debugger *v3;
  _QWORD *v4;
  JSC::Debugger *v5;
  WTF *v6;
  void *v7;
  Inspector::InjectedScriptManager *v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  WebCore::CommandLineAPIHost *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  WTF::RunLoop *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  WTF *v39;
  WTF *v40;
  _QWORD *v41;
  WTF::MonotonicTime *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *result;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF *v58;
  void *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE v68[32];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 88))
  {
    *((_BYTE *)this + 88) = 1;
    v2 = *((_QWORD *)this + 9);
    v3 = (JSC::Debugger *)WTF::fastMalloc((WTF *)0xF0);
    v4 = (_QWORD *)JSC::Debugger::Debugger(v3, *(JSC::VM **)(*(_QWORD *)(v2 + 344) + 8));
    *v4 = off_1E33EEBD8;
    v4[29] = v2;
    v5 = (JSC::Debugger *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v3;
    if (v5)
    {
      JSC::Debugger::~Debugger(v5);
      WTF::fastFree(v6, v7);
    }
    v8 = (Inspector::InjectedScriptManager *)*((_QWORD *)this + 2);
    Inspector::InjectedScriptManager::connect(v8);
    v9 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v10 = &off_1E33EDB18;
    *(_QWORD *)(v9 + 16) = v10;
    *(_QWORD *)(v9 + 24) = 0;
    v12 = (WebCore::CommandLineAPIHost *)*((_QWORD *)v8 + 6);
    *((_QWORD *)v8 + 6) = v9;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
      {
        WebCore::CommandLineAPIHost::~CommandLineAPIHost(v12, v11);
        WTF::fastFree(v58, v59);
      }
      else
      {
        --*(_DWORD *)v12;
      }
    }
    v13 = *((_QWORD *)this + 4);
    v14 = *((_QWORD *)this + 1);
    v15 = *((_QWORD *)this + 9);
    *(_QWORD *)v68 = this;
    *(_OWORD *)&v68[8] = *((_OWORD *)this + 1);
    *(_QWORD *)&v68[24] = v13;
    v69 = v14;
    v70 = v15;
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x48);
    v17 = (_QWORD *)Inspector::InspectorRuntimeAgent::InspectorRuntimeAgent();
    *v17 = &off_1E33F28E8;
    v17[2] = &unk_1E33F29E0;
    Inspector::RuntimeBackendDispatcher::create();
    v18 = v70;
    v16[7] = v67;
    v16[8] = v18;
    Inspector::AgentRegistry::append();
    if (v16)
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
    v19 = *((_QWORD *)this + 9);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 64))(v19)
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 488))(v19) == 1)
    {
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
      v66 = WebCore::ServiceWorkerAgent::ServiceWorkerAgent(v20, v68);
      Inspector::AgentRegistry::append();
      if (v66)
        (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
      v21 = WTF::fastMalloc((WTF *)0xC0);
      v22 = (_QWORD *)WebCore::InspectorNetworkAgent::InspectorNetworkAgent(v21, v68);
      *v22 = off_1E33F2750;
      v22[4] = &unk_1E33F2848;
      v22[23] = v70;
      v65 = v22;
      Inspector::AgentRegistry::append();
      if (v65)
        (*(void (**)(_QWORD *))(*v65 + 8))(v65);
    }
    v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
    v24 = (_QWORD *)Inspector::InspectorHeapAgent::InspectorHeapAgent();
    *v24 = off_1E33F0FD8;
    v24[2] = &unk_1E33F1070;
    v24[3] = &unk_1E33F10D0;
    v24[10] = v69;
    v25 = WTF::fastMalloc((WTF *)0x40);
    *(_QWORD *)v25 = v23;
    *(_BYTE *)(v25 + 8) = 0;
    *(_QWORD *)(v25 + 16) = 0;
    *(_QWORD *)(v25 + 24) = 0;
    v26 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v25);
    v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v27 = off_1E33F1540;
    v27[1] = WebCore::SendGarbageCollectionEventsTask::timerFired;
    v27[2] = 0;
    v27[3] = v25;
    WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(v25 + 32), v26);
    *(_QWORD *)(v25 + 32) = off_1E32051C0;
    *(_QWORD *)(v25 + 56) = v27;
    v23[11] = v25;
    Inspector::AgentRegistry::append();
    if (v23)
      (*(void (**)(_QWORD *))(*v23 + 8))(v23);
    v28 = WTF::fastMalloc((WTF *)0x130);
    v29 = (_QWORD *)Inspector::InspectorDebuggerAgent::InspectorDebuggerAgent();
    v29[32] = v69;
    v29[33] = 0;
    v29[34] = 0;
    v29[35] = 0;
    v29[36] = 0x100000001;
    *v29 = off_1E33F2380;
    v29[2] = &unk_1E33F2570;
    v29[3] = &unk_1E33F2678;
    v29[4] = &unk_1E33F26B8;
    v29[37] = v70;
    v64 = v29;
    Inspector::AgentRegistry::append();
    if (v64)
      (*(void (**)(_QWORD *))(*v64 + 8))(v64);
    v30 = WTF::fastMalloc((WTF *)0xA8);
    v31 = (_QWORD *)WebCore::InspectorDOMDebuggerAgent::InspectorDOMDebuggerAgent(v30, v68, v28);
    *v31 = off_1E33F2258;
    v31[4] = &unk_1E33F2300;
    v31[5] = &unk_1E33F2350;
    v63 = v31;
    Inspector::AgentRegistry::append();
    if (v63)
      (*(void (**)(_QWORD *))(*v63 + 8))(v63);
    WTF::fastMalloc((WTF *)0x40);
    v32 = (_QWORD *)Inspector::InspectorAuditAgent::InspectorAuditAgent();
    *v32 = off_1E33F1F08;
    v32[2] = &unk_1E33F1F80;
    v32[7] = v70;
    v62 = v32;
    Inspector::AgentRegistry::append();
    if (v62)
      (*(void (**)(_QWORD *))(*v62 + 8))(v62);
    v33 = WTF::fastMalloc((WTF *)0x140);
    v34 = (_QWORD *)WebCore::InspectorCanvasAgent::InspectorCanvasAgent(v33, v68);
    *v34 = off_1E33F1FB8;
    v34[4] = &unk_1E33F2098;
    v34[5] = &unk_1E33F2120;
    v34[39] = v70;
    v61 = v34;
    Inspector::AgentRegistry::append();
    if (v61)
      (*(void (**)(_QWORD *))(*v61 + 8))(v61);
    v35 = WTF::fastMalloc((WTF *)0x68);
    v36 = (_QWORD *)WebCore::InspectorWorkerAgent::InspectorWorkerAgent(v35, v68);
    *v36 = off_1E33F2AA0;
    v36[4] = &unk_1E33F2B10;
    v36[5] = &unk_1E33F2B50;
    v36[12] = v70;
    v60 = v36;
    Inspector::AgentRegistry::append();
    if (v60)
      (*(void (**)(_QWORD *))(*v60 + 8))(v60);
    v38 = *(_QWORD *)(*((_QWORD *)this + 2) + 48);
    if (v38)
    {
      v39 = (WTF *)*((_QWORD *)this + 1);
      *(_DWORD *)v39 += 2;
      v40 = *(WTF **)(v38 + 8);
      *(_QWORD *)(v38 + 8) = v39;
      if (v40)
      {
        if (*(_DWORD *)v40 == 1)
          WTF::fastFree(v40, v37);
        else
          --*(_DWORD *)v40;
      }
      if (*(_DWORD *)v39 == 1)
        WTF::fastFree(v39, v37);
      else
        --*(_DWORD *)v39;
    }
  }
  v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v41 = off_1E33EECF8;
  *(_QWORD *)v68 = v41;
  WTF::callOnMainThread();
  v42 = *(WTF::MonotonicTime **)v68;
  *(_QWORD *)v68 = 0;
  if (v42)
    v42 = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)v42 + 8))(v42);
  *(_OWORD *)(*((_QWORD *)this + 5) + 8) = xmmword_1968DF3C0;
  v43 = *((_QWORD *)this + 5);
  WTF::MonotonicTime::now(v42);
  *(_QWORD *)(v43 + 16) = v44;
  v45 = *((_QWORD *)this + 9);
  v46 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v46 = off_1E33EECC8;
  v46[1] = v45;
  v47 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v46;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  Inspector::FrontendRouter::connectFrontend();
  Inspector::AgentRegistry::didCreateFrontendAndBackend();
  v48 = *((_QWORD *)this + 9);
  result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 64))(v48);
  if ((_DWORD)result)
  {
    result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 488))(v48);
    if ((_DWORD)result == 1)
    {
      v50 = *((_QWORD *)this + 9);
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v50 + 64))(v50)
        || (result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 488))(v50), (_DWORD)result != 1))
      {
        __break(0xC471u);
        JUMPOUT(0x195DFA220);
      }
      if (*(_BYTE *)(v50 + 1776))
      {
        if ((WTF::isMainThread((WTF *)result) & 1) != 0)
        {
          if (*(_BYTE *)(v50 + 1776))
          {
            v51 = *(_OWORD *)(v50 + 1760);
            *(_OWORD *)v68 = *(_OWORD *)(v50 + 1744);
            *(_OWORD *)&v68[16] = v51;
            {
              WebCore::Document::allDocumentsMap(void)::documents = 0;
            }
            result = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::Document::allDocumentsMap(void)::documents, (uint64_t *)v68);
            if (result)
            {
              v52 = result[4];
              if (v52)
              {
                v53 = *(_QWORD *)(v52 + 8);
                if (v53)
                {
                  v54 = *(_QWORD *)(v53 + 528);
                  if (v54)
                  {
                    v55 = *(_QWORD *)(v54 + 8);
                    if (v55)
                    {
                      v56 = *(_QWORD *)(v55 + 24);
                      if (v56)
                      {
                        v57 = *(_QWORD *)(v56 + 8);
                        if (v57)
                        {
                          result = *(uint64_t **)(*(_QWORD *)(v57 + 80) + 88);
                          if (result)
                            return (uint64_t *)(*(uint64_t (**)(uint64_t *, _QWORD))(*result + 24))(result, *(unsigned int *)(*((_QWORD *)this + 3) + 20));
                        }
                      }
                    }
                  }
                }
              }
            }
            return result;
          }
        }
        else
        {
          __break(0xC471u);
        }
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t *WebCore::WorkerInspectorController::updateServiceWorkerPageFrontendCount(WebCore::WorkerInspectorController *this)
{
  uint64_t v2;
  uint64_t *result;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 9);
  result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  if ((_DWORD)result)
  {
    result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 488))(v2);
    if ((_DWORD)result == 1)
    {
      v4 = *((_QWORD *)this + 9);
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4)
        || (result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 488))(v4), (_DWORD)result != 1))
      {
        __break(0xC471u);
        JUMPOUT(0x195DFA3DCLL);
      }
      if (*(_BYTE *)(v4 + 1776))
      {
        if ((WTF::isMainThread((WTF *)result) & 1) != 0)
        {
          if (*(_BYTE *)(v4 + 1776))
          {
            v5 = *(_OWORD *)(v4 + 1760);
            v12[0] = *(_OWORD *)(v4 + 1744);
            v12[1] = v5;
            {
              WebCore::Document::allDocumentsMap(void)::documents = 0;
            }
            result = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::Document::allDocumentsMap(void)::documents, (uint64_t *)v12);
            if (result)
            {
              v6 = result[4];
              if (v6)
              {
                v7 = *(_QWORD *)(v6 + 8);
                if (v7)
                {
                  v8 = *(_QWORD *)(v7 + 528);
                  if (v8)
                  {
                    v9 = *(_QWORD *)(v8 + 8);
                    if (v9)
                    {
                      v10 = *(_QWORD *)(v9 + 24);
                      if (v10)
                      {
                        v11 = *(_QWORD *)(v10 + 8);
                        if (v11)
                        {
                          result = *(uint64_t **)(*(_QWORD *)(v11 + 80) + 88);
                          if (result)
                            return (uint64_t *)(*(uint64_t (**)(uint64_t *, _QWORD))(*result + 24))(result, *(unsigned int *)(*((_QWORD *)this + 3) + 20));
                        }
                      }
                    }
                  }
                }
              }
            }
            return result;
          }
        }
        else
        {
          __break(0xC471u);
        }
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t (*WebCore::WorkerInspectorController::functionCallHandler(WebCore::WorkerInspectorController *this))(WebCore *a1)
{
  return WebCore::functionCallHandlerFromAnyThread;
}

uint64_t (*WebCore::WorkerInspectorController::evaluateHandler(WebCore::WorkerInspectorController *this))(WebCore *a1)
{
  return WebCore::evaluateHandlerFromAnyThread;
}

uint64_t WebCore::WorkerInspectorController::executionStopwatch(WebCore::WorkerInspectorController *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t WebCore::WorkerInspectorController::debugger(WebCore::WorkerInspectorController *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t WebCore::WorkerInspectorController::vm(WebCore::WorkerInspectorController *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 344) + 8);
}

void WebCore::PageDebugger::~PageDebugger(WebCore::PageDebugger *this)
{
  WTF *v1;
  void *v2;

  JSC::Debugger::~Debugger(this);
  WTF::fastFree(v1, v2);
}

void WebCore::WebInjectedScriptHost::~WebInjectedScriptHost(WebCore::WebInjectedScriptHost *this)
{
  WTF *v1;
  void *v2;

  Inspector::InjectedScriptHost::~InjectedScriptHost(this);
  WTF::fastFree(v1, v2);
}

void WebCore::WebInjectedScriptManager::~WebInjectedScriptManager(WebCore::WebInjectedScriptManager *this, void *a2)
{
  WebCore::CommandLineAPIHost *v3;
  WTF *v4;
  void *v5;

  v3 = (WebCore::CommandLineAPIHost *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::CommandLineAPIHost::~CommandLineAPIHost(v3, a2);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  Inspector::InjectedScriptManager::~InjectedScriptManager(this);
}

{
  WebCore::CommandLineAPIHost *v3;
  WTF *v4;
  void *v5;
  WTF *v6;
  void *v7;

  v3 = (WebCore::CommandLineAPIHost *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::CommandLineAPIHost::~CommandLineAPIHost(v3, a2);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  Inspector::InjectedScriptManager::~InjectedScriptManager(this);
  WTF::fastFree(v4, v5);
}

void WebCore::WorkerDebugger::~WorkerDebugger(WebCore::WorkerDebugger *this)
{
  WTF *v1;
  void *v2;

  JSC::Debugger::~Debugger(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::WorkerInspectorController::developerExtrasEnabled(WebCore::WorkerInspectorController *this)
{
  return 1;
}

uint64_t WebCore::WorkerInspectorController::canAccessInspectedScriptState()
{
  return 1;
}

void WebCore::NetworkResourcesData::ResourceData::~ResourceData(WebCore::NetworkResourcesData::ResourceData *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  const void *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF *v19;
  WebCore::HTMLMetaCharsetParser *v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  WTF *v38;
  WTF *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (*((_BYTE *)this + 88))
  {
    v4 = (const void *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (v4)
      CFRelease(v4);
  }
  v5 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v24 = *(unsigned int *)(v5 + 20);
      if ((_DWORD)v24)
      {
        v25 = *(_QWORD *)(v5 + 8);
        v26 = v25 + 16 * v24;
        do
        {
          v27 = *(unsigned int **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (v27)
          {
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
            {
              v46 = v26;
              v48 = v25;
              v44 = v5;
              atomic_store(1u, v27);
              v30 = v27[6];
              if ((_DWORD)v30 != -1)
                ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_3[v30])(&v50, v27 + 2);
              v27[6] = -1;
              WTF::fastFree((WTF *)v27, a2);
              v5 = v44;
              v26 = v46;
              v25 = v48;
            }
          }
          v25 += 16;
        }
        while (v25 != v26);
      }
      v38 = *(WTF **)(v5 + 8);
      if ((WTF *)(v5 + 24) != v38 && v38 != 0)
      {
        *(_QWORD *)(v5 + 8) = 0;
        *(_DWORD *)(v5 + 16) = 0;
        v42 = v5;
        WTF::fastFree(v38, a2);
        v5 = v42;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr((unsigned int *)v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v8));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v8);
      v31 = *(unsigned int *)(v8 + 20);
      if ((_DWORD)v31)
      {
        v32 = *(_QWORD *)(v8 + 8);
        v33 = v32 + 16 * v31;
        do
        {
          v34 = *(unsigned int **)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          if (v34)
          {
            do
            {
              v35 = __ldaxr(v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v34));
            if (!v36)
            {
              v47 = v33;
              v49 = v32;
              v45 = v8;
              atomic_store(1u, v34);
              v37 = v34[6];
              if ((_DWORD)v37 != -1)
                ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_3[v37])(&v51, v34 + 2);
              v34[6] = -1;
              WTF::fastFree((WTF *)v34, a2);
              v8 = v45;
              v33 = v47;
              v32 = v49;
            }
          }
          v32 += 16;
        }
        while (v32 != v33);
      }
      v40 = *(WTF **)(v8 + 8);
      if ((WTF *)(v8 + 24) != v40 && v40 != 0)
      {
        *(_QWORD *)(v8 + 8) = 0;
        *(_DWORD *)(v8 + 16) = 0;
        v43 = v8;
        WTF::fastFree(v40, a2);
        v8 = v43;
      }
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  v11 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
    {
      v19 = *(WTF **)(v11 + 72);
      if (v19)
      {
        *(_QWORD *)(v11 + 72) = 0;
        *(_DWORD *)(v11 + 80) = 0;
        WTF::fastFree(v19, a2);
      }
      v20 = *(WebCore::HTMLMetaCharsetParser **)(v11 + 48);
      *(_QWORD *)(v11 + 48) = 0;
      if (v20)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v20, a2);
        WTF::fastFree(v21, v22);
      }
      v23 = *(_QWORD *)(v11 + 40);
      *(_QWORD *)(v11 + 40) = 0;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      WTF::fastFree((WTF *)v11, a2);
    }
    else
    {
      --*(_DWORD *)v11;
    }
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
}

unint64_t WebCore::objectForPaymentItem(JSC::VM *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unsigned __int8 *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t SlowCase;
  WTF::StringImpl *v29;
  unint64_t v30;
  int v31;
  int v32;
  uint64_t v33;

  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(v6 + 15056);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 + 60);
    v9 = *(_QWORD *)(v7 + 24);
    if (v9 < *(_QWORD *)(v7 + 32))
    {
LABEL_3:
      *(_QWORD *)(v7 + 24) = v9 + v8;
      goto LABEL_4;
    }
    v9 = *(_QWORD *)(v7 + 40);
    if ((v9 & 1) == 0)
    {
      v27 = *(_QWORD *)(v9 + 8) ^ *(_QWORD *)(v7 + 48);
      *(_QWORD *)(v7 + 32) = v9 + HIDWORD(v27);
      *(_QWORD *)(v7 + 40) = v9 + (int)v27;
      goto LABEL_3;
    }
    JSC::sanitizeStackForVM();
    SlowCase = JSC::LocalAllocator::allocateSlowCase();
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::allocateSlow();
  }
  v9 = SlowCase;
LABEL_4:
  *(_DWORD *)v9 = 0;
  *(_DWORD *)v9 = *(_DWORD *)(a2 + 848);
  *(_DWORD *)(v9 + 4) = 16783360;
  *(_OWORD *)(v9 + 8) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_QWORD *)(v9 + 56) = 0;
  if (*(_BYTE *)(v6 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral();
  v10 = v29;
  v11 = *a3;
  if (!*a3)
    goto LABEL_33;
  v12 = *(_DWORD *)(v11 + 4);
  if (v12 != 1)
  {
    if (v12)
      goto LABEL_9;
LABEL_33:
    v14 = *((_QWORD *)a1 + 5246);
    goto LABEL_10;
  }
  v24 = *(unsigned __int8 **)(v11 + 8);
  if ((*(_BYTE *)(v11 + 16) & 4) != 0)
  {
    v25 = *v24;
LABEL_30:
    v14 = *((_QWORD *)a1 + v25 + 5277);
    goto LABEL_10;
  }
  v26 = *(unsigned __int16 *)v24;
  if (v26 <= 0xFF)
  {
    v25 = v26;
    goto LABEL_30;
  }
LABEL_9:
  *(_DWORD *)v11 += 2;
  v29 = (WTF::StringImpl *)v11;
  v14 = JSC::JSString::create((uint64_t)a1, &v29);
  v15 = v29;
  v29 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
LABEL_10:
  v29 = 0;
  v30 = v9;
  v31 = -1;
  v32 = 0x1000000;
  v33 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, a1, (unint64_t)v10, v14, 0, (uint64_t)&v29);
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v16);
    else
      *(_DWORD *)v10 -= 2;
  }
  WTF::AtomStringImpl::addLiteral();
  v17 = v29;
  v18 = WebCore::objectForPaymentCurrencyAmount(a1, a2, a3 + 1);
  v29 = 0;
  v30 = v9;
  v31 = -1;
  v32 = 0x1000000;
  v33 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, a1, (unint64_t)v17, v18, 0, (uint64_t)&v29);
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v19);
    else
      *(_DWORD *)v17 -= 2;
  }
  WTF::AtomStringImpl::addLiteral();
  v20 = v29;
  if (*((_BYTE *)a3 + 24))
    v21 = 7;
  else
    v21 = 6;
  v29 = 0;
  v30 = v9;
  v31 = -1;
  v32 = 0x1000000;
  v33 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, a1, (unint64_t)v20, v21, 0, (uint64_t)&v29);
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v22);
    else
      *(_DWORD *)v20 -= 2;
  }
  return v9;
}

unint64_t WebCore::objectForPaymentCurrencyAmount(JSC::VM *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unsigned __int8 *v24;
  unsigned int v25;
  unsigned __int8 *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t SlowCase;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(v5 + 15056);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 + 60);
    v8 = *(_QWORD *)(v6 + 24);
    if (v8 < *(_QWORD *)(v6 + 32))
    {
LABEL_3:
      *(_QWORD *)(v6 + 24) = v8 + v7;
      goto LABEL_4;
    }
    v8 = *(_QWORD *)(v6 + 40);
    if ((v8 & 1) == 0)
    {
      v30 = *(_QWORD *)(v8 + 8) ^ *(_QWORD *)(v6 + 48);
      *(_QWORD *)(v6 + 32) = v8 + HIDWORD(v30);
      *(_QWORD *)(v6 + 40) = v8 + (int)v30;
      goto LABEL_3;
    }
    v33 = a2;
    JSC::sanitizeStackForVM();
    SlowCase = JSC::LocalAllocator::allocateSlowCase();
    a2 = v33;
  }
  else
  {
    v32 = a2;
    SlowCase = JSC::CompleteSubspace::allocateSlow();
    a2 = v32;
  }
  v8 = SlowCase;
LABEL_4:
  *(_DWORD *)v8 = 0;
  *(_DWORD *)v8 = *(_DWORD *)(a2 + 848);
  *(_DWORD *)(v8 + 4) = 16783360;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_QWORD *)(v8 + 56) = 0;
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral();
  v9 = v34;
  v10 = *a3;
  if (!*a3)
    goto LABEL_37;
  v11 = *(_DWORD *)(v10 + 4);
  if (v11 != 1)
  {
    if (v11)
      goto LABEL_9;
LABEL_37:
    v13 = *((_QWORD *)a1 + 5246);
    goto LABEL_10;
  }
  v24 = *(unsigned __int8 **)(v10 + 8);
  if ((*(_BYTE *)(v10 + 16) & 4) != 0)
  {
    v25 = *v24;
LABEL_29:
    v13 = *((_QWORD *)a1 + v25 + 5277);
    goto LABEL_10;
  }
  v28 = *(unsigned __int16 *)v24;
  if (v28 <= 0xFF)
  {
    v25 = v28;
    goto LABEL_29;
  }
LABEL_9:
  *(_DWORD *)v10 += 2;
  v34 = (WTF::StringImpl *)v10;
  v13 = JSC::JSString::create((uint64_t)a1, &v34);
  v14 = v34;
  v34 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
LABEL_10:
  v34 = 0;
  v35 = v8;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, a1, (unint64_t)v9, v13, 0, (uint64_t)&v34);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v15);
    else
      *(_DWORD *)v9 -= 2;
  }
  WTF::AtomStringImpl::addLiteral();
  v16 = v34;
  v17 = a3[1];
  if (!v17)
    goto LABEL_38;
  v18 = *(_DWORD *)(v17 + 4);
  if (v18 != 1)
  {
    if (v18)
      goto LABEL_16;
LABEL_38:
    v20 = *((_QWORD *)a1 + 5246);
    goto LABEL_17;
  }
  v26 = *(unsigned __int8 **)(v17 + 8);
  if ((*(_BYTE *)(v17 + 16) & 4) != 0)
  {
    v27 = *v26;
LABEL_32:
    v20 = *((_QWORD *)a1 + v27 + 5277);
    goto LABEL_17;
  }
  v29 = *(unsigned __int16 *)v26;
  if (v29 <= 0xFF)
  {
    v27 = v29;
    goto LABEL_32;
  }
LABEL_16:
  *(_DWORD *)v17 += 2;
  v34 = (WTF::StringImpl *)v17;
  v20 = JSC::JSString::create((uint64_t)a1, &v34);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v19);
    else
      *(_DWORD *)v21 -= 2;
  }
LABEL_17:
  v34 = 0;
  v35 = v8;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, a1, (unint64_t)v16, v20, 0, (uint64_t)&v34);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v22);
    else
      *(_DWORD *)v16 -= 2;
  }
  return v8;
}

uint64_t WebCore::WorkerToPageFrontendChannel::connectionType(WebCore::WorkerToPageFrontendChannel *this)
{
  return 1;
}

uint64_t WebCore::WorkerToPageFrontendChannel::sendMessageToFrontend(WebCore::WorkerToPageFrontendChannel *this, const WTF::String *a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 360) + 40))(*(_QWORD *)(*((_QWORD *)this + 1) + 360));
  if (result)
    return (*(uint64_t (**)(uint64_t, const WTF::String *))(*(_QWORD *)result + 16))(result, a2);
  return result;
}

WebCore::NetworkResourcesData::ResourceData *WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  char v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WebCore::NetworkResourcesData::ResourceData *v26;
  WebCore::NetworkResourcesData::ResourceData *result;
  WTF *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  WebCore::NetworkResourcesData::ResourceData **v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WebCore::NetworkResourcesData::ResourceData *v38;
  WebCore::NetworkResourcesData::ResourceData *v39;
  uint64_t v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  WTF **v45;
  WTF::StringImpl *v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WebCore::NetworkResourcesData::ResourceData *v57;
  WTF *v58;
  void *v59;
  uint64_t v60;
  int v61;
  const WTF::StringImpl *v62;

  v5 = a1;
  v8 = (uint64_t *)*((unsigned int *)a1 + 2);
  v7 = *((unsigned int *)a1 + 3);
  if (10 * v7 >= (unint64_t)(9 * (_QWORD)v8)
    || (v8 <= 2 * (int)v7 ? (v9 = *((_BYTE *)a1 + 20) == 0) : (v9 = 1), !v9))
  {
    if ((_DWORD)v8)
      v10 = 2 * (_DWORD)v8;
    else
      v10 = 8;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(a1, v10);
    LODWORD(v8) = *((_DWORD *)v5 + 2);
  }
  v11 = (_DWORD)v8 - 1;
  v12 = *((unsigned int *)v5 + 4);
  v13 = *((_DWORD *)*a2 + 4);
  v62 = a3;
  if (v13 < 0x100)
    v14 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v14 = v13 >> 8;
  v15 = (v14 ^ v12) & v11;
  v16 = *v5;
  v17 = *v5 + 16 * v15;
  v18 = *(WTF **)v17;
  if (!*(_QWORD *)v17)
  {
LABEL_27:
    v24 = *a2;
    if (*a2)
      *(_DWORD *)v24 += 2;
    *(_QWORD *)v17 = v24;
    v25 = v16 + 16 * v15;
    v26 = *(WebCore::NetworkResourcesData::ResourceData **)v62;
    *(_QWORD *)v62 = 0;
    result = *(WebCore::NetworkResourcesData::ResourceData **)(v25 + 8);
    *(_QWORD *)(v25 + 8) = v26;
    if (!result)
      goto LABEL_31;
    goto LABEL_30;
  }
  v60 = a4;
  v19 = 0;
  while (1)
  {
    v20 = *((_DWORD *)v18 + 4);
    v21 = v20 < 0x100 ? WTF::StringImpl::hashSlowCase(v18) : v20 >> 8;
    v22 = (v15 + (_DWORD)v8 - ((v21 ^ v12) & v11)) & v11;
    if (v19 > v22)
      break;
    if (v21 == v14)
    {
      v23 = WTF::equal(*(WTF **)v17, *a2, a3);
      v16 = *v5;
      if ((v23 & 1) != 0)
      {
        v56 = v16 + 16 * *((unsigned int *)v5 + 2);
        *(_QWORD *)v60 = v17;
        *(_QWORD *)(v60 + 8) = v56;
        *(_BYTE *)(v60 + 16) = 0;
        v57 = *(WebCore::NetworkResourcesData::ResourceData **)v62;
        *(_QWORD *)v62 = 0;
        result = *(WebCore::NetworkResourcesData::ResourceData **)(v17 + 8);
        *(_QWORD *)(v17 + 8) = v57;
        if (result)
        {
          WebCore::NetworkResourcesData::ResourceData::~ResourceData(result, (WTF::StringImpl *)a2);
          return (WebCore::NetworkResourcesData::ResourceData *)WTF::fastFree(v58, v59);
        }
        return result;
      }
    }
    else
    {
      v16 = *v5;
    }
    v15 = ((_DWORD)v15 + 1) & v11;
    ++v19;
    v17 = v16 + 16 * v15;
    v18 = *(WTF **)v17;
    if (!*(_QWORD *)v17)
    {
      if (v19 >= 0x80)
        *((_BYTE *)v5 + 20) = 1;
      a4 = v60;
      goto LABEL_27;
    }
  }
  if (v19 >= 0x80)
    *((_BYTE *)v5 + 20) = 1;
  v32 = *(WTF **)v17;
  *(_QWORD *)v17 = 0;
  v33 = v16 + 16 * v15;
  v36 = *(_QWORD *)(v33 + 8);
  v34 = (WebCore::NetworkResourcesData::ResourceData **)(v33 + 8);
  v35 = v36;
  *v34 = 0;
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  v37 = *a2;
  if (*a2)
    *(_DWORD *)v37 += 2;
  *(_QWORD *)v17 = v37;
  v38 = *(WebCore::NetworkResourcesData::ResourceData **)v62;
  *(_QWORD *)v62 = 0;
  v39 = *v34;
  *v34 = v38;
  if (v39)
  {
    v40 = v35;
    WebCore::NetworkResourcesData::ResourceData::~ResourceData(v39, (WTF::StringImpl *)a2);
    WTF::fastFree(v41, v42);
    v35 = v40;
  }
  v43 = ((_DWORD)v15 + 1) & v11;
  v44 = *v5;
  v45 = (WTF **)(*v5 + 16 * v43);
  v46 = *v45;
  if (*v45)
  {
    v61 = (int)v8;
    do
    {
      v47 = *((_DWORD *)v46 + 4);
      if (v47 < 0x100)
      {
        v8 = v5;
        v49 = v12;
        v50 = v32;
        v51 = v35;
        v48 = WTF::StringImpl::hashSlowCase(v46);
        v35 = v51;
        v32 = v50;
        v12 = v49;
        v5 = v8;
        LODWORD(v8) = v61;
      }
      else
      {
        v48 = v47 >> 8;
      }
      if (++v22 > (((_DWORD)v43 + (_DWORD)v8 - ((v48 ^ v12) & v11)) & v11))
      {
        v52 = *v45;
        *v45 = 0;
        v53 = v44 + 16 * v43;
        v54 = *(_QWORD *)(v53 + 8);
        *v45 = v32;
        *(_QWORD *)(v53 + 8) = v35;
        v35 = v54;
        v32 = v52;
        v22 = (v43 + (_DWORD)v8 - ((v48 ^ v12) & v11)) & v11;
      }
      v43 = ((_DWORD)v43 + 1) & v11;
      v44 = *v5;
      v45 = (WTF **)(*v5 + 16 * v43);
      v46 = *v45;
    }
    while (*v45);
  }
  *v45 = v32;
  v55 = v44 + 16 * v43;
  result = *(WebCore::NetworkResourcesData::ResourceData **)(v55 + 8);
  *(_QWORD *)(v55 + 8) = v35;
  a4 = v60;
  if (result)
  {
LABEL_30:
    WebCore::NetworkResourcesData::ResourceData::~ResourceData(result, (WTF::StringImpl *)a2);
    result = (WebCore::NetworkResourcesData::ResourceData *)WTF::fastFree(v28, v29);
  }
LABEL_31:
  v30 = *((unsigned int *)v5 + 2);
  ++*((_DWORD *)v5 + 3);
  v31 = *v5 + 16 * v30;
  *(_QWORD *)a4 = v17;
  *(_QWORD *)(a4 + 8) = v31;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  unsigned int v24;
  WebCore::NetworkResourcesData::ResourceData **v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  WebCore::NetworkResourcesData::ResourceData *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WebCore::NetworkResourcesData::ResourceData *v33;
  WebCore::NetworkResourcesData::ResourceData *v34;
  WTF *v35;
  void *v36;
  WTF::StringImpl *v37;
  WebCore::NetworkResourcesData::ResourceData *v38;
  WTF *v39;
  void *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  WebCore::NetworkResourcesData::ResourceData *v46;
  WTF *v47;
  void *v48;
  WebCore::NetworkResourcesData::ResourceData *v49;
  WTF *v50;
  void *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  WTF *v54;
  uint64_t v55;
  uint64_t *v56;

  v4 = *((unsigned int *)a1 + 2);
  v5 = (WTF *)*a1;
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2));
  *a1 = result;
  *((_DWORD *)a1 + 2) = a2;
  v8 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  *((_DWORD *)a1 + 4) = (v10 >> 31) ^ v10;
  v56 = a1;
  *((_BYTE *)a1 + 20) = 0;
  if ((_DWORD)v4)
  {
    v11 = 0;
    v53 = v4;
    v54 = v5;
    do
    {
      v12 = (WTF::StringImpl **)((char *)v5 + 16 * v11);
      v13 = *v12;
      if (*v12)
      {
        v14 = *((_DWORD *)v56 + 2);
        v15 = *((_DWORD *)v56 + 4);
        v16 = *((_DWORD *)v13 + 4);
        if (v16 < 0x100)
          v17 = WTF::StringImpl::hashSlowCase(v13);
        else
          v17 = v16 >> 8;
        v18 = v14 - 1;
        v19 = (v17 ^ v15) & (v14 - 1);
        v20 = *v56;
        v21 = *v56 + 16 * v19;
        v22 = *(WTF::StringImpl **)v21;
        if (*(_QWORD *)v21)
        {
          v23 = v11;
          v24 = 0;
          v55 = v23;
          v25 = (WebCore::NetworkResourcesData::ResourceData **)((char *)v5 + 16 * v23 + 8);
          do
          {
            v26 = *((_DWORD *)v22 + 4);
            if (v26 < 0x100)
              v27 = WTF::StringImpl::hashSlowCase(v22);
            else
              v27 = v26 >> 8;
            v28 = (v19 + v14 - ((v27 ^ v15) & v18)) & v18;
            if (v24 > v28)
            {
              v29 = *v12;
              v30 = *v25;
              *v12 = 0;
              v12[1] = 0;
              v31 = *(WTF::StringImpl **)v21;
              *(_QWORD *)v21 = 0;
              v32 = *v12;
              *v12 = v31;
              if (v32)
              {
                if (*(_DWORD *)v32 == 2)
                  WTF::StringImpl::destroy(v32, v7);
                else
                  *(_DWORD *)v32 -= 2;
              }
              v33 = *(WebCore::NetworkResourcesData::ResourceData **)(v21 + 8);
              *(_QWORD *)(v21 + 8) = 0;
              v34 = *v25;
              *v25 = v33;
              if (v34)
              {
                WebCore::NetworkResourcesData::ResourceData::~ResourceData(v34, v7);
                WTF::fastFree(v35, v36);
              }
              v37 = *(WTF::StringImpl **)v21;
              *(_QWORD *)v21 = v29;
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                  WTF::StringImpl::destroy(v37, v7);
                else
                  *(_DWORD *)v37 -= 2;
              }
              v38 = *(WebCore::NetworkResourcesData::ResourceData **)(v21 + 8);
              *(_QWORD *)(v21 + 8) = v30;
              if (v38)
              {
                WebCore::NetworkResourcesData::ResourceData::~ResourceData(v38, v7);
                WTF::fastFree(v39, v40);
              }
              v24 = v28;
            }
            v19 = ((_DWORD)v19 + 1) & v18;
            ++v24;
            v20 = *v56;
            v21 = *v56 + 16 * v19;
            v22 = *(WTF::StringImpl **)v21;
          }
          while (*(_QWORD *)v21);
          v4 = v53;
          v5 = v54;
          v11 = v55;
        }
        v41 = *v12;
        *v12 = 0;
        v42 = *(WTF::StringImpl **)v21;
        *(_QWORD *)v21 = v41;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, v7);
          else
            *(_DWORD *)v42 -= 2;
        }
        v43 = v20 + 16 * v19;
        v44 = (char *)v5 + 16 * v11;
        v45 = *((_QWORD *)v44 + 1);
        *((_QWORD *)v44 + 1) = 0;
        v46 = *(WebCore::NetworkResourcesData::ResourceData **)(v43 + 8);
        *(_QWORD *)(v43 + 8) = v45;
        if (v46)
        {
          WebCore::NetworkResourcesData::ResourceData::~ResourceData(v46, v7);
          WTF::fastFree(v47, v48);
        }
      }
      v49 = v12[1];
      v12[1] = 0;
      if (v49)
      {
        WebCore::NetworkResourcesData::ResourceData::~ResourceData(v49, v7);
        WTF::fastFree(v50, v51);
      }
      v52 = *v12;
      *v12 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WTF::StringImpl::destroy(v52, v7);
        else
          *(_DWORD *)v52 -= 2;
      }
      ++v11;
    }
    while (v11 != v4);
  }
  else if (!v5)
  {
    return result;
  }
  return WTF::fastFree(v5, v7);
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WebCore::NetworkResourcesData::ResourceData *v5;
  WTF *v6;
  void *v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  unsigned int v19;
  WTF::StringImpl **v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::NetworkResourcesData::ResourceData **v26;
  uint64_t v27;
  WebCore::NetworkResourcesData::ResourceData *v28;
  WTF *v29;
  void *v30;
  WebCore::NetworkResourcesData::ResourceData *v31;
  WTF *v32;
  void *v33;
  WTF::StringImpl *v34;

  v4 = *a2;
  *a2 = (WTF::StringImpl *)-1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a2[1];
  a2[1] = 0;
  if (v5)
  {
    WebCore::NetworkResourcesData::ResourceData::~ResourceData(v5, (WTF::StringImpl *)a2);
    WTF::fastFree(v6, v7);
  }
  *a2 = 0;
  a2[1] = 0;
  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 12) - 1;
  *(_DWORD *)(a1 + 12) = v9;
  v10 = v8 - 1;
  v11 = *(_QWORD *)a1;
  v12 = (unint64_t)a2 - *(_QWORD *)a1;
  v13 = (v12 >> 4) + 1;
  v14 = v13 & (v8 - 1);
  v15 = (uint64_t *)(*(_QWORD *)a1 + 16 * v14);
  result = *v15;
  if (*v15)
  {
    v17 = *(_DWORD *)(a1 + 16);
    v18 = (v12 >> 4);
    v19 = v13 & v10;
    v20 = (WTF::StringImpl **)(v11 + 16 * v18);
    do
    {
      v21 = *(_DWORD *)(result + 16);
      if (v21 < 0x100)
        result = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result);
      else
        result = v21 >> 8;
      if (((v19 + v8 - ((result ^ v17) & v10)) & v10) == 0)
        break;
      v22 = (WTF::StringImpl *)*v15;
      *v15 = 0;
      v23 = *v20;
      *v20 = v22;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v23 -= 2;
      }
      v24 = v11 + 16 * v18;
      v25 = v11 + 16 * v14;
      v27 = *(_QWORD *)(v25 + 8);
      v26 = (WebCore::NetworkResourcesData::ResourceData **)(v25 + 8);
      *v26 = 0;
      v28 = *(WebCore::NetworkResourcesData::ResourceData **)(v24 + 8);
      *(_QWORD *)(v24 + 8) = v27;
      if (v28)
      {
        WebCore::NetworkResourcesData::ResourceData::~ResourceData(v28, (WTF::StringImpl *)a2);
        WTF::fastFree(v29, v30);
      }
      v31 = *v26;
      *v26 = 0;
      if (v31)
      {
        WebCore::NetworkResourcesData::ResourceData::~ResourceData(v31, (WTF::StringImpl *)a2);
        WTF::fastFree(v32, v33);
      }
      v34 = (WTF::StringImpl *)*v15;
      *v15 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v34 -= 2;
      }
      *v15 = 0;
      v15[1] = 0;
      v14 = (v19 + 1) & v10;
      v11 = *(_QWORD *)a1;
      v18 = v19;
      v20 = (WTF::StringImpl **)(*(_QWORD *)a1 + 16 * v19);
      v15 = (uint64_t *)(*(_QWORD *)a1 + 16 * v14);
      result = *v15;
      v19 = (v19 + 1) & v10;
    }
    while (*v15);
    v8 = *(_DWORD *)(a1 + 8);
    v9 = *(_DWORD *)(a1 + 12);
  }
  if (v8 >= 9 && 6 * v9 < v8)
    return WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash((uint64_t *)a1, v8 >> 1);
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  WTF **v11;
  unsigned int v12;
  WTF *v13;
  int v14;
  unsigned int v15;
  int v16;

  v3 = *a1;
  v4 = *((unsigned int *)a1 + 2);
  if (!*a1)
    return 16 * v4;
  v7 = v4 - 1;
  v8 = *((_DWORD *)a1 + 4);
  v9 = *((_DWORD *)*a2 + 4);
  if (v9 < 0x100)
  {
    v10 = WTF::StringImpl::hashSlowCase(*a2);
    v3 = *a1;
  }
  else
  {
    v10 = v9 >> 8;
  }
  v12 = (v10 ^ v8) & v7;
  v11 = (WTF **)(v3 + 16 * v12);
  v13 = *v11;
  if (*v11)
  {
    v14 = -1;
    while (1)
    {
      v15 = *((_DWORD *)v13 + 4);
      v16 = v15 < 0x100 ? WTF::StringImpl::hashSlowCase(v13) : v15 >> 8;
      if (++v14 > ((v12 + v4 - ((v16 ^ v8) & v7)) & v7))
        break;
      if (v16 == v10 && (WTF::equal(*v11, *a2, a3) & 1) != 0)
        return (uint64_t)v11;
      v3 = *a1;
      v12 = (v12 + 1) & v7;
      v11 = (WTF **)(*a1 + 16 * v12);
      v13 = *v11;
      if (!*v11)
        return v3 + 16 * *((unsigned int *)a1 + 2);
    }
    v3 = *a1;
  }
  return v3 + 16 * *((unsigned int *)a1 + 2);
}

WTF *WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *result;
  int v14;
  unsigned int v15;
  int v16;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *((_DWORD *)a1 + 2);
  v7 = v6 - 1;
  v8 = *((_DWORD *)a1 + 4);
  v9 = *((_DWORD *)*a2 + 4);
  if (v9 < 0x100)
  {
    v10 = WTF::StringImpl::hashSlowCase(*a2);
    v3 = *a1;
  }
  else
  {
    v10 = v9 >> 8;
  }
  v11 = (v10 ^ v8) & v7;
  v12 = v3 + 16 * v11;
  result = *(WTF **)v12;
  if (*(_QWORD *)v12)
  {
    v14 = -1;
    while (1)
    {
      v15 = *((_DWORD *)result + 4);
      v16 = v15 < 0x100 ? WTF::StringImpl::hashSlowCase(result) : v15 >> 8;
      if (++v14 > ((v11 + v6 - ((v16 ^ v8) & v7)) & v7))
        break;
      if (v16 == v10 && (WTF::equal(*(WTF **)v12, *a2, a3) & 1) != 0)
        return *(WTF **)(v12 + 8);
      v11 = (v11 + 1) & v7;
      v12 = *a1 + 16 * v11;
      result = *(WTF **)v12;
      if (!*(_QWORD *)v12)
        return result;
    }
    return 0;
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::WorkerInspectorController::connectFrontend(void)::$_0,void>::call()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;

  do
    v0 = __ldaxr((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter);
  while (__stlxr(v0 + 1, (unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter));
  if (!v0)
  {
    v1 = WebCore::s_platformStrategies;
    v2 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
    if (!v2)
    {
      v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
      *(_QWORD *)(v1 + 8) = v2;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 120))(v2, 1);
  }
}

void WTF::Detail::CallableWrapper<WebCore::WorkerInspectorController::disconnectFrontend(Inspector::DisconnectReason)::$_0,void>::call()
{
  unsigned int v0;
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;

  do
  {
    v0 = __ldaxr((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter);
    v1 = v0 - 1;
  }
  while (__stlxr(v1, (unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter));
  if (!v1)
  {
    v2 = WebCore::s_platformStrategies;
    v3 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
    if (!v3)
    {
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
      *(_QWORD *)(v2 + 8) = v3;
    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 120))(v3, 0);
  }
}

BOOL WebCore::LegacyWebSocketInspectorInstrumentation::hasFrontends(WebCore::LegacyWebSocketInspectorInstrumentation *this)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter);
  return v1 != 0;
}

WTF::StringImpl *WebCore::LegacyWebSocketInspectorInstrumentation::didCreateWebSocket(WTF::StringImpl *result, Inspector::IdentifiersFactory *this, const WTF::String *a3)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Inspector::NetworkFrontendDispatcher *v15;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    v4 = result == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = *((_QWORD *)result + 66);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 24);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
            goto LABEL_17;
        }
      }
    }
    v9 = *((_QWORD *)result + 329);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 528);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if (v12)
          {
            v13 = *(_QWORD *)(v12 + 24);
            if (v13)
            {
              v8 = *(_QWORD *)(v13 + 8);
              if (v8)
              {
LABEL_17:
                v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 80) + 8) + 192);
                if (v14)
                {
                  v15 = *(Inspector::NetworkFrontendDispatcher **)(v14 + 40);
                  Inspector::IdentifiersFactory::requestId(this);
                  Inspector::NetworkFrontendDispatcher::webSocketCreated(v15, (const WTF::String *)&v18, a3);
                  result = v18;
                  v18 = 0;
                  if (result)
                  {
                    if (*(_DWORD *)result == 2)
                      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
                    else
                      *(_DWORD *)result -= 2;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

WTF::JSONImpl::Object *WebCore::LegacyWebSocketInspectorInstrumentation::willSendWebSocketHandshakeRequest(WTF::JSONImpl::Object *result, Inspector::IdentifiersFactory *a2, _BYTE *a3)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    v4 = result == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = *((_QWORD *)result + 66);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 24);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
            goto LABEL_17;
        }
      }
    }
    v9 = *((_QWORD *)result + 329);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 528);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if (v12)
          {
            v13 = *(_QWORD *)(v12 + 24);
            if (v13)
            {
              v8 = *(_QWORD *)(v13 + 8);
              if (v8)
              {
LABEL_17:
                result = *(WTF::JSONImpl::Object **)(*(_QWORD *)(*(_QWORD *)(v8 + 80) + 8) + 192);
                if (result)
                  return (WTF::JSONImpl::Object *)WebCore::InspectorNetworkAgent::willSendWebSocketHandshakeRequest(result, a2, a3);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

WTF::JSONImpl::Object *WebCore::LegacyWebSocketInspectorInstrumentation::didReceiveWebSocketHandshakeResponse(WTF::JSONImpl::Object *result, Inspector::IdentifiersFactory *a2, __int16 *a3)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    v4 = result == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = *((_QWORD *)result + 66);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 24);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
            goto LABEL_17;
        }
      }
    }
    v9 = *((_QWORD *)result + 329);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 528);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if (v12)
          {
            v13 = *(_QWORD *)(v12 + 24);
            if (v13)
            {
              v8 = *(_QWORD *)(v13 + 8);
              if (v8)
              {
LABEL_17:
                result = *(WTF::JSONImpl::Object **)(*(_QWORD *)(*(_QWORD *)(v8 + 80) + 8) + 192);
                if (result)
                  return (WTF::JSONImpl::Object *)WebCore::InspectorNetworkAgent::didReceiveWebSocketHandshakeResponse(result, a2, a3);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::LegacyWebSocketInspectorInstrumentation::didCloseWebSocket(WTF::StringImpl *result, Inspector::IdentifiersFactory *this)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Inspector::NetworkFrontendDispatcher *v14;
  double *v15;
  double v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    v3 = result == 0;
  else
    v3 = 1;
  if (!v3)
  {
    v4 = *((_QWORD *)result + 66);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 24);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 8);
          if (v7)
            goto LABEL_17;
        }
      }
    }
    v8 = *((_QWORD *)result + 329);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 528);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 8);
          if (v11)
          {
            v12 = *(_QWORD *)(v11 + 24);
            if (v12)
            {
              v7 = *(_QWORD *)(v12 + 8);
              if (v7)
              {
LABEL_17:
                v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 80) + 8) + 192);
                if (v13)
                {
                  v14 = *(Inspector::NetworkFrontendDispatcher **)(v13 + 40);
                  Inspector::IdentifiersFactory::requestId(this);
                  v15 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 24) + 56))(*(_QWORD *)(v13 + 24));
                  WTF::MonotonicTime::now((WTF::MonotonicTime *)v15);
                  Inspector::NetworkFrontendDispatcher::webSocketClosed(v14, (const WTF::String *)&v18, v15[1] + v16 - v15[2]);
                  result = v18;
                  v18 = 0;
                  if (result)
                  {
                    if (*(_DWORD *)result == 2)
                      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
                    else
                      *(_DWORD *)result -= 2;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::LegacyWebSocketInspectorInstrumentation::didReceiveWebSocketFrame(WTF::StringImpl *result, Inspector::IdentifiersFactory *a2, const WebCore::WebSocketFrame *a3)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    v4 = result == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = *((_QWORD *)result + 66);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 24);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
            goto LABEL_17;
        }
      }
    }
    v9 = *((_QWORD *)result + 329);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 528);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if (v12)
          {
            v13 = *(_QWORD *)(v12 + 24);
            if (v13)
            {
              v8 = *(_QWORD *)(v13 + 8);
              if (v8)
              {
LABEL_17:
                result = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v8 + 80) + 8) + 192);
                if (result)
                  return WebCore::InspectorNetworkAgent::didReceiveWebSocketFrame((uint64_t)result, a2, a3);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::LegacyWebSocketInspectorInstrumentation::didSendWebSocketFrame(WTF::StringImpl *result, Inspector::IdentifiersFactory *a2, const WebCore::WebSocketFrame *a3)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    v4 = result == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = *((_QWORD *)result + 66);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 24);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
            goto LABEL_17;
        }
      }
    }
    v9 = *((_QWORD *)result + 329);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 528);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if (v12)
          {
            v13 = *(_QWORD *)(v12 + 24);
            if (v13)
            {
              v8 = *(_QWORD *)(v13 + 8);
              if (v8)
              {
LABEL_17:
                result = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v8 + 80) + 8) + 192);
                if (result)
                  return WebCore::InspectorNetworkAgent::didSendWebSocketFrame((uint64_t)result, a2, a3);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::LegacyWebSocketInspectorInstrumentation::didReceiveWebSocketFrameError(WTF::StringImpl *result, Inspector::IdentifiersFactory *this, const WTF::String *a3)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Inspector::NetworkFrontendDispatcher *v15;
  double *v17;
  double v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    v4 = result == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = *((_QWORD *)result + 66);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 24);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
            goto LABEL_17;
        }
      }
    }
    v9 = *((_QWORD *)result + 329);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 528);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if (v12)
          {
            v13 = *(_QWORD *)(v12 + 24);
            if (v13)
            {
              v8 = *(_QWORD *)(v13 + 8);
              if (v8)
              {
LABEL_17:
                v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 80) + 8) + 192);
                if (v14)
                {
                  v15 = *(Inspector::NetworkFrontendDispatcher **)(v14 + 40);
                  Inspector::IdentifiersFactory::requestId(this);
                  v17 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 24) + 56))(*(_QWORD *)(v14 + 24));
                  WTF::MonotonicTime::now((WTF::MonotonicTime *)v17);
                  Inspector::NetworkFrontendDispatcher::webSocketFrameError(v15, (const WTF::String *)&v20, v17[1] + v18 - v17[2], a3);
                  result = v20;
                  v20 = 0;
                  if (result)
                  {
                    if (*(_DWORD *)result == 2)
                      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
                    else
                      *(_DWORD *)result -= 2;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::InspectorAnimationAgent::InspectorAnimationAgent(uint64_t a1, _QWORD *a2)
{
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t StatusReg;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  WTF::StringImpl *v17;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (v17)
  {
    v5 = *(_DWORD *)v17;
    *(_DWORD *)v17 += 2;
    *(_QWORD *)a1 = off_1E33EFBF8;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = a2[4];
    *(_QWORD *)(a1 + 24) = *a2;
    if (v5)
      *(_DWORD *)v17 = v5;
    else
      WTF::StringImpl::destroy(v17, v4);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = a2[4];
    *(_QWORD *)(a1 + 24) = *a2;
  }
  *(_QWORD *)a1 = off_1E33EED80;
  *(_QWORD *)(a1 + 32) = &unk_1E33EEDF0;
  v6 = a2[2];
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v7 = v6;
  *(_QWORD *)(a1 + 40) = v7;
  Inspector::AnimationBackendDispatcher::create();
  *(_QWORD *)(a1 + 48) = v17;
  *(_QWORD *)(a1 + 56) = a2[1];
  v8 = a2[5];
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 85) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  v10 = *(unsigned int **)(StatusReg + 736);
  if (!v10)
    v10 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  *(_QWORD *)(a1 + 152) = v10;
  *(_QWORD *)(a1 + 112) = off_1E31F7378;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v12 = off_1E33EFA10;
  v12[1] = WebCore::InspectorAnimationAgent::animationBindingTimerFired;
  v12[2] = 0;
  v12[3] = a1;
  *(_QWORD *)(a1 + 160) = v12;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = off_1E3407128;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  v13 = *(unsigned int **)(StatusReg + 736);
  if (!v13)
    v13 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *(_QWORD *)(a1 + 224) = v13;
  *(_QWORD *)(a1 + 184) = off_1E31F7378;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v15 = off_1E33EFA10;
  v15[1] = WebCore::InspectorAnimationAgent::animationDestroyedTimerFired;
  v15[2] = 0;
  v15[3] = a1;
  *(_QWORD *)(a1 + 232) = v15;
  *(_QWORD *)(a1 + 240) = 0;
  return a1;
}

WTF::StringImpl *WebCore::InspectorAnimationAgent::animationBindingTimerFired(WTF::StringImpl *this, void *a2)
{
  Inspector::IdentifiersFactory *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  WTF::StringImpl *v16;

  v2 = this;
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  if (!v3)
  {
    v5 = 0;
    v4 = 0;
LABEL_10:
    v7 = v5;
    v5 = (_QWORD *)(v3 + 16 * v4);
    if (!v3)
    {
      v9 = 0;
      goto LABEL_14;
    }
    goto LABEL_8;
  }
  v4 = *(unsigned int *)(v3 - 4);
  v5 = (_QWORD *)(v3 + 16 * v4);
  if (!*(_DWORD *)(v3 - 12))
    goto LABEL_10;
  if (!(_DWORD)v4)
  {
    v8 = 0;
    v7 = (_QWORD *)v3;
    goto LABEL_13;
  }
  v6 = 16 * v4;
  v7 = (_QWORD *)v3;
  while ((unint64_t)(*v7 + 1) <= 1)
  {
    v7 += 2;
    v6 -= 16;
    if (!v6)
    {
      v7 = v5;
      break;
    }
  }
LABEL_8:
  v8 = *(unsigned int *)(v3 - 4);
LABEL_13:
  v9 = (_QWORD *)(v3 + 16 * v8);
LABEL_14:
  if (v9 != v7)
  {
    while (!*(_QWORD *)(*v7 + 8))
    {
      v10 = v7 + 2;
      v7 = v5;
      if (v10 != v5)
      {
        v7 = v10;
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          v7 += 2;
          if (v7 == v5)
          {
            v7 = v5;
            break;
          }
        }
      }
      if (v7 == v9)
      {
        v7 = v9;
        break;
      }
    }
  }
  if (v3)
    v11 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  else
    v11 = 0;
LABEL_26:
  while (v7 != v11)
  {
    v12 = (WTF::StringImpl *)v7[1];
    v13 = *(_QWORD *)(*v7 + 8);
    v7[1] = 0;
    v16 = v12;
    WebCore::InspectorAnimationAgent::bindAnimation(v2, v13, &v16);
    this = v16;
    v16 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 1)
        this = (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)this;
    }
    v14 = v5;
    if (v7 + 2 != v5)
    {
      v14 = v7 + 2;
      while ((unint64_t)(*v14 + 1) <= 1)
      {
        v14 += 2;
        if (v14 == v5)
        {
          v14 = v5;
          break;
        }
      }
    }
    v7 = v9;
    if (v14 != v9)
    {
      v7 = v14;
      if (!*(_QWORD *)(*v14 + 8))
      {
        while (1)
        {
          v15 = v7 + 2;
          v7 = v5;
          if (v15 != v5)
          {
            v7 = v15;
            while ((unint64_t)(*v7 + 1) <= 1)
            {
              v7 += 2;
              if (v7 == v5)
              {
                v7 = v5;
                break;
              }
            }
          }
          if (v7 == v9)
            break;
          if (*(_QWORD *)(*v7 + 8))
            goto LABEL_26;
        }
        v7 = v9;
      }
    }
  }
  if (v3)
    return (WTF::StringImpl *)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(v3, a2);
  return this;
}

uint64_t WebCore::InspectorAnimationAgent::animationDestroyedTimerFired(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  const WTF::String *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;

  v1 = *(unsigned int *)(this + 180);
  if ((_DWORD)v1)
  {
    v2 = this;
    v3 = *(const WTF::String **)(this + 168);
    v4 = 8 * v1;
    do
    {
      this = Inspector::AnimationFrontendDispatcher::animationDestroyed(*(Inspector::AnimationFrontendDispatcher **)(v2 + 40), v3);
      v3 = (const WTF::String *)((char *)v3 + 8);
      v4 -= 8;
    }
    while (v4);
    if (*(_DWORD *)(v2 + 176))
    {
      v6 = *(unsigned int *)(v2 + 180);
      this = *(_QWORD *)(v2 + 168);
      if ((_DWORD)v6)
      {
        v7 = 8 * v6;
        v8 = *(WTF::StringImpl ***)(v2 + 168);
        do
        {
          v9 = *v8;
          *v8 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
            {
              v10 = v8;
              WTF::StringImpl::destroy(v9, v5);
              v8 = v10;
            }
            else
            {
              *(_DWORD *)v9 -= 2;
            }
          }
          ++v8;
          v7 -= 8;
        }
        while (v7);
        *(_DWORD *)(v2 + 180) = 0;
        this = *(_QWORD *)(v2 + 168);
      }
      if (this)
      {
        *(_QWORD *)(v2 + 168) = 0;
        *(_DWORD *)(v2 + 176) = 0;
        return WTF::fastFree((WTF *)this, v5);
      }
    }
  }
  return this;
}

void WebCore::InspectorAnimationAgent::~InspectorAnimationAgent(WebCore::InspectorAnimationAgent *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  WTF::StringImpl *v21;

  v3 = *((_QWORD *)this + 30);
  if (v3)
    WTF::HashTable<WebCore::StyleOriginatedAnimation *,WTF::KeyValuePair<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>>,WTF::DefaultHash<WebCore::StyleOriginatedAnimation *>,WTF::HashMap<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>,WTF::DefaultHash<WebCore::StyleOriginatedAnimation *>,WTF::HashTraits<WebCore::StyleOriginatedAnimation *>,WTF::HashTraits<WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::StyleOriginatedAnimation *>>::deallocateTable(v3, a2);
  *((_QWORD *)this + 23) = off_1E31F7378;
  v4 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WebCore::TimerBase::~TimerBase((WebCore::InspectorAnimationAgent *)((char *)this + 184));
  v6 = *((unsigned int *)this + 45);
  if ((_DWORD)v6)
  {
    v19 = (WTF::StringImpl **)*((_QWORD *)this + 21);
    v20 = 8 * v6;
    do
    {
      v21 = *v19;
      *v19 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v5);
        else
          *(_DWORD *)v21 -= 2;
      }
      ++v19;
      v20 -= 8;
    }
    while (v20);
  }
  v7 = (WTF *)*((_QWORD *)this + 21);
  if (v7)
  {
    *((_QWORD *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    WTF::fastFree(v7, v5);
  }
  *((_QWORD *)this + 14) = off_1E31F7378;
  v8 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  WebCore::TimerBase::~TimerBase((WebCore::InspectorAnimationAgent *)((char *)this + 112));
  v10 = *((_QWORD *)this + 12);
  if (v10)
    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(v10, v9);
  v11 = (WTF *)*((_QWORD *)this + 9);
  if (v11)
  {
    v12 = *((unsigned int *)this + 20);
    if ((_DWORD)v12)
    {
      v13 = (WTF::StringImpl **)*((_QWORD *)this + 9);
      do
      {
        v14 = *v13;
        *v13 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v9);
          else
            *(_DWORD *)v14 -= 2;
        }
        v13 += 2;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree(v11, v9);
  }
  v15 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v15)
  {
    if (v15[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
    else
      --v15[2];
  }
  v16 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v16)
    WTF::fastFree(v16, v9);
  Inspector::AnimationBackendDispatcherHandler::~AnimationBackendDispatcherHandler((WebCore::InspectorAnimationAgent *)((char *)this + 32));
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EFC38;
  *((_QWORD *)this + 1) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::InspectorAnimationAgent::~InspectorAnimationAgent(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::InspectorAnimationAgent::~InspectorAnimationAgent(WebCore::InspectorAnimationAgent *this, WTF::StringImpl *a2)
{
  WebCore::InspectorAnimationAgent::~InspectorAnimationAgent((WebCore::InspectorAnimationAgent *)((char *)this - 32), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::InspectorAnimationAgent::~InspectorAnimationAgent((WebCore::InspectorAnimationAgent *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::InspectorAnimationAgent::didCreateFrontendAndBackend(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 16) + 24) = result;
  return result;
}

WTF *WebCore::InspectorAnimationAgent::willDestroyFrontendAndBackend(WebCore::InspectorAnimationAgent *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  Inspector::AnimationFrontendDispatcher *v5;
  double *v6;
  double v7;
  WTF *result;

  v3 = *((_QWORD *)this + 2);
  if (*(WebCore::InspectorAnimationAgent **)(v3 + 224) == this)
  {
    *(_QWORD *)(v3 + 224) = 0;
    v4 = *((_QWORD *)this + 30);
    if (v4)
    {
      *((_QWORD *)this + 30) = 0;
      WTF::HashTable<WebCore::StyleOriginatedAnimation *,WTF::KeyValuePair<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>>,WTF::DefaultHash<WebCore::StyleOriginatedAnimation *>,WTF::HashMap<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>,WTF::DefaultHash<WebCore::StyleOriginatedAnimation *>,WTF::HashTraits<WebCore::StyleOriginatedAnimation *>,WTF::HashTraits<WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::StyleOriginatedAnimation *>>::deallocateTable(v4, a2);
    }
    v5 = (Inspector::AnimationFrontendDispatcher *)*((_QWORD *)this + 5);
    v6 = (double *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v6);
    Inspector::AnimationFrontendDispatcher::trackingComplete(v5, v6[1] + v7 - v6[2]);
    v3 = *((_QWORD *)this + 2);
  }
  *(_QWORD *)(v3 + 80) = 0;
  result = WebCore::InspectorAnimationAgent::reset(this, a2);
  *(_QWORD *)(*((_QWORD *)this + 2) + 24) = 0;
  return result;
}

uint64_t WebCore::InspectorAnimationAgent::stopTracking@<X0>(uint64_t this@<X0>, WTF::StringImpl *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Inspector::AnimationFrontendDispatcher *v7;
  double *v8;
  double v9;

  v4 = *(_QWORD *)(this + 16);
  if (*(_QWORD *)(v4 + 224) == this)
  {
    v5 = this;
    *(_QWORD *)(v4 + 224) = 0;
    v6 = *(_QWORD *)(this + 240);
    if (v6)
    {
      *(_QWORD *)(v5 + 240) = 0;
      WTF::HashTable<WebCore::StyleOriginatedAnimation *,WTF::KeyValuePair<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>>,WTF::DefaultHash<WebCore::StyleOriginatedAnimation *>,WTF::HashMap<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>,WTF::DefaultHash<WebCore::StyleOriginatedAnimation *>,WTF::HashTraits<WebCore::StyleOriginatedAnimation *>,WTF::HashTraits<WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::StyleOriginatedAnimation *>>::deallocateTable(v6, a2);
    }
    v7 = *(Inspector::AnimationFrontendDispatcher **)(v5 + 40);
    v8 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 24) + 56))(*(_QWORD *)(v5 + 24));
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
    this = Inspector::AnimationFrontendDispatcher::trackingComplete(v7, v8[1] + v9 - v8[2]);
  }
  *a3 = 0;
  a3[8] = 0;
  return this;
}

WTF *WebCore::InspectorAnimationAgent::disable@<X0>(WebCore::InspectorAnimationAgent *this@<X0>, WTF::StringImpl *a2@<X1>, _BYTE *a3@<X8>)
{
  WTF *result;

  *(_QWORD *)(*((_QWORD *)this + 2) + 80) = 0;
  result = WebCore::InspectorAnimationAgent::reset(this, a2);
  *a3 = 0;
  a3[8] = 0;
  return result;
}

WTF::StringImpl *WebCore::InspectorAnimationAgent::enable@<X0>(WTF::StringImpl *this@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  v4 = *((_QWORD *)this + 2);
  if (*(WTF::StringImpl **)(v4 + 80) == this)
  {
    this = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = 1;
  }
  else
  {
    v5 = this;
    *(_QWORD *)(v4 + 80) = this;
    {
      if (WebCore::WebAnimation::instances(void)::instances
        && *(_DWORD *)(WebCore::WebAnimation::instances(void)::instances - 12))
      {
        v6 = *(unsigned int *)(WebCore::WebAnimation::instances(void)::instances - 4);
        if ((_DWORD)v6)
        {
          v7 = 8 * v6;
          v8 = WebCore::WebAnimation::instances(void)::instances;
          while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
          {
            v8 += 8;
            v7 -= 8;
            if (!v7)
              goto LABEL_9;
          }
        }
        else
        {
          v8 = WebCore::WebAnimation::instances(void)::instances;
        }
        v10 = WebCore::WebAnimation::instances(void)::instances + 8 * v6;
        if (v10 != v8)
        {
LABEL_14:
          v11 = *(_QWORD *)v8;
          v12 = *(_QWORD *)(*(_QWORD *)v8 + 40);
          if (v12)
          {
            v13 = *(_QWORD *)(v12 + 8);
            if (v13)
            {
              if (!*(_BYTE *)(v13 + 178))
              {
                v14 = *(_DWORD *)(v13 - 264);
                *(_DWORD *)(v13 - 264) = v14 + 2;
                v15 = *(_QWORD *)(v13 + 240);
                if (v15 && (v16 = *(_QWORD *)(v15 + 8)) != 0 && (v17 = *(_QWORD *)(v16 + 24)) != 0)
                  v18 = *(_QWORD *)(v17 + 8);
                else
                  v18 = 0;
                v19 = *((_QWORD *)v5 + 8);
                if (v14)
                {
                  *(_DWORD *)(v13 - 264) = v14;
                }
                else if ((*(_WORD *)(v13 - 258) & 0x400) == 0)
                {
                  this = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)(v13 - 288), a2);
                }
                if (v18 == v19)
                {
                  v20 = 0;
                  WebCore::InspectorAnimationAgent::bindAnimation(v5, v11, &v20);
                  this = v20;
                  v20 = 0;
                  if (this)
                  {
                    if (*(_DWORD *)this == 1)
                      this = (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
                    else
                      --*(_DWORD *)this;
                  }
                }
              }
            }
          }
          while (1)
          {
            v8 += 8;
            if (v8 == v10)
              break;
            if ((unint64_t)(*(_QWORD *)v8 + 1) > 1)
            {
              if (v8 != v10)
                goto LABEL_14;
              break;
            }
          }
        }
      }
    }
    else
    {
      WebCore::WebAnimation::instances(void)::instances = 0;
    }
LABEL_9:
    v9 = 0;
    *a3 = 0;
  }
  a3[8] = v9;
  return this;
}

uint64_t WebCore::InspectorAnimationAgent::bindAnimation(Inspector::IdentifiersFactory *a1, uint64_t a2, WTF::StringImpl **a3)
{
  Inspector::IdentifiersFactory *v4;
  uint64_t result;
  int v6;
  int v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  WTF *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF **v34;
  unsigned int v35;
  int v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  const WTF::String *v43;
  WTF::StringImpl *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  const WTF::String *v52;
  WTF::StringImpl *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  const WTF::String *v60;
  WTF::StringImpl *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  const WTF::String *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WebCore::AnimationEffect *v76;
  WTF::StringImpl *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  _DWORD *v94;
  _DWORD **v95;
  uint64_t v96;
  _DWORD *v97;
  _DWORD **v98;
  uint64_t v99;
  _DWORD *v100;
  _DWORD **v101;
  uint64_t v102;
  _DWORD *v103;
  _DWORD **v104;
  uint64_t v105;
  _DWORD *v106;
  _DWORD **v107;
  uint64_t v108;
  _DWORD *v109;
  _DWORD **v110;
  uint64_t v111;
  _DWORD *v112;
  Inspector::IdentifiersFactory *v113;
  uint64_t v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  _DWORD *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  _QWORD v123[2];
  char v124;

  v4 = a1;
  result = Inspector::IdentifiersFactory::createIdentifier(a1);
  if (v119)
  {
    v6 = *((_DWORD *)v119 + 1);
    if (v6 < 0 || (result = (v6 + 10), __OFADD__(v6, 10)))
    {
LABEL_176:
      v120 = 0;
      goto LABEL_177;
    }
    v7 = (*((unsigned __int8 *)v119 + 16) >> 2) & 1;
  }
  else
  {
    v7 = 1;
    result = 10;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v7, (int8x16_t *)"animation:", 0xAu, (uint64_t)v119, &v120);
  if (!v120)
  {
LABEL_177:
    __break(0xC471u);
    return result;
  }
  v10 = v119;
  v119 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (uint64_t *)((char *)v4 + 72);
  v13 = *((unsigned int *)v4 + 20);
  v12 = *((unsigned int *)v4 + 21);
  v115 = a2;
  if (10 * v12 >= (unint64_t)(9 * v13) || v13 <= 2 * (int)v12 && *((_BYTE *)v4 + 92))
  {
    if ((_DWORD)v13)
      v14 = 2 * v13;
    else
      v14 = 8;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::WebAnimation *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::WebAnimation *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::WebAnimation *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::WebAnimation *>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash((uint64_t *)v4 + 9, v14);
    LODWORD(v13) = *((_DWORD *)v4 + 20);
  }
  v15 = v13 - 1;
  v16 = *((_DWORD *)v4 + 22);
  v17 = *((_DWORD *)v120 + 4);
  if (v17 < 0x100)
    v18 = WTF::StringImpl::hashSlowCase(v120);
  else
    v18 = v17 >> 8;
  v19 = (v18 ^ v16) & v15;
  v20 = *v11;
  v21 = *v11 + 16 * v19;
  v22 = *(WTF **)v21;
  if (*(_QWORD *)v21)
  {
    v113 = v4;
    v23 = 0;
    while (1)
    {
      v24 = *((_DWORD *)v22 + 4);
      v25 = v24 < 0x100 ? WTF::StringImpl::hashSlowCase(v22) : v24 >> 8;
      v26 = (v19 + v13 - ((v25 ^ v16) & v15)) & v15;
      if (v23 > v26)
        break;
      if (v25 == v18)
      {
        v22 = (WTF *)WTF::equal(*(WTF **)v21, v120, v9);
        if ((v22 & 1) != 0)
        {
          v40 = v115;
          *(_QWORD *)(v21 + 8) = v115;
          goto LABEL_48;
        }
      }
      v20 = *v11;
      v19 = ((_DWORD)v19 + 1) & v15;
      ++v23;
      v21 = *v11 + 16 * v19;
      v22 = *(WTF **)v21;
      if (!*(_QWORD *)v21)
      {
        if (v23 < 0x80)
        {
          v4 = v113;
        }
        else
        {
          v4 = v113;
          *((_BYTE *)v113 + 92) = 1;
        }
        goto LABEL_44;
      }
    }
    if (v23 >= 0x80)
      *((_BYTE *)v113 + 92) = 1;
    v27 = *(WTF **)v21;
    *(_QWORD *)v21 = 0;
    v28 = v20 + 16 * v19;
    v31 = *(_QWORD *)(v28 + 8);
    v29 = (_QWORD *)(v28 + 8);
    v30 = v31;
    *(_QWORD *)v21 = 0;
    *(_QWORD *)(v21 + 8) = 0;
    v32 = v120;
    if (v120)
      *(_DWORD *)v120 += 2;
    *(_QWORD *)v21 = v32;
    *v29 = v115;
    while (1)
    {
      v19 = ((_DWORD)v19 + 1) & v15;
      v33 = *v11;
      v34 = (WTF **)(*v11 + 16 * v19);
      v22 = *v34;
      if (!*v34)
        break;
      v35 = *((_DWORD *)v22 + 4);
      if (v35 < 0x100)
        v36 = WTF::StringImpl::hashSlowCase(v22);
      else
        v36 = v35 >> 8;
      if (++v26 > (((_DWORD)v19 + (_DWORD)v13 - ((v36 ^ v16) & v15)) & v15))
      {
        v37 = *v34;
        *v34 = 0;
        v38 = v33 + 16 * v19;
        v39 = *(_QWORD *)(v38 + 8);
        *v34 = v27;
        *(_QWORD *)(v38 + 8) = v30;
        v30 = v39;
        v27 = v37;
        v26 = (v19 + v13 - ((v36 ^ v16) & v15)) & v15;
      }
    }
    *v34 = v27;
    *(_QWORD *)(v33 + 16 * v19 + 8) = v30;
    v4 = v113;
    v40 = v115;
  }
  else
  {
LABEL_44:
    v40 = v115;
    v41 = v120;
    if (v120)
      *(_DWORD *)v120 += 2;
    *(_QWORD *)v21 = v41;
    *(_QWORD *)(v20 + 16 * v19 + 8) = v115;
  }
  ++*((_DWORD *)v4 + 21);
LABEL_48:
  WTF::JSONImpl::Object::create(v22);
  v42 = v123[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v120, v43);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v42 + 16), &v121, (const WTF::StringImpl *)&v122, (uint64_t)v123);
  if (v124)
  {
    v45 = (uint64_t *)(v42 + 24);
    v46 = *(unsigned int *)(v42 + 36);
    if ((_DWORD)v46 == *(_DWORD *)(v42 + 32))
    {
      v95 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v45, v46 + 1, (unint64_t)&v121);
      v46 = *(unsigned int *)(v42 + 36);
      v96 = *(_QWORD *)(v42 + 24);
      v97 = *v95;
      if (*v95)
        *v97 += 2;
      *(_QWORD *)(v96 + 8 * v46) = v97;
    }
    else
    {
      v47 = *v45;
      v48 = v121;
      if (v121)
        *(_DWORD *)v121 += 2;
      *(_QWORD *)(v47 + 8 * v46) = v48;
    }
    *(_DWORD *)(v42 + 36) = v46 + 1;
  }
  v49 = v122;
  v122 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v49;
  }
  v50 = v121;
  v121 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v44);
    else
      *(_DWORD *)v50 -= 2;
  }
  v118 = (_DWORD *)v42;
  v51 = *(WTF::StringImpl **)(v40 + 144);
  if (v51)
  {
    *(_DWORD *)v51 += 2;
    v117 = v51;
    if (*((_DWORD *)v51 + 1))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v117, v52);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v42 + 16), &v121, (const WTF::StringImpl *)&v122, (uint64_t)v123);
      if (v124)
      {
        v54 = (uint64_t *)(v42 + 24);
        v55 = *(unsigned int *)(v42 + 36);
        if ((_DWORD)v55 == *(_DWORD *)(v42 + 32))
        {
          v104 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v54, v55 + 1, (unint64_t)&v121);
          v55 = *(unsigned int *)(v42 + 36);
          v105 = *(_QWORD *)(v42 + 24);
          v106 = *v104;
          if (*v104)
            *v106 += 2;
          *(_QWORD *)(v105 + 8 * v55) = v106;
        }
        else
        {
          v56 = *v54;
          v57 = v121;
          if (v121)
            *(_DWORD *)v121 += 2;
          *(_QWORD *)(v56 + 8 * v55) = v57;
        }
        *(_DWORD *)(v42 + 36) = v55 + 1;
      }
      v58 = v122;
      v122 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v58;
      }
      v59 = v121;
      v121 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, v53);
        else
          *(_DWORD *)v59 -= 2;
      }
    }
  }
  else
  {
    v117 = 0;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v40 + 112))(v40))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(v40 + 232), v60);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v42 + 16), &v121, (const WTF::StringImpl *)&v122, (uint64_t)v123);
    if (v124)
    {
      v62 = (uint64_t *)(v42 + 24);
      v63 = *(unsigned int *)(v42 + 36);
      if ((_DWORD)v63 == *(_DWORD *)(v42 + 32))
      {
        v107 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v62, v63 + 1, (unint64_t)&v121);
        v63 = *(unsigned int *)(v42 + 36);
        v108 = *(_QWORD *)(v42 + 24);
        v109 = *v107;
        if (*v107)
          *v109 += 2;
        *(_QWORD *)(v108 + 8 * v63) = v109;
      }
      else
      {
        v64 = *v62;
        v65 = v121;
        if (v121)
          *(_DWORD *)v121 += 2;
        *(_QWORD *)(v64 + 8 * v63) = v65;
      }
      *(_DWORD *)(v42 + 36) = v63 + 1;
    }
    v66 = v122;
    v122 = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v66;
    }
    v67 = v121;
    v121 = 0;
    if (!v67)
      goto LABEL_103;
    goto LABEL_101;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v40 + 120))(v40))
  {
    v68 = *(unsigned int *)(v40 + 240);
    if ((_DWORD)v68 != -1)
    {
      v123[0] = &v122;
      ((void (*)(WTF::StringImpl **__return_ptr, _QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore13CSSTransition18transitionPropertyEvE3__0JZNKS9_18transitionPropertyEvE3__1EEEEEJRKNS0_6__implIJNS8_13CSSPropertyIDENS6_10AtomStringEEEEEEEDcOT_DpOT0____fmatrix[v68])(&v116, v123, v40 + 232);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v116, v69);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v42 + 16), &v121, (const WTF::StringImpl *)&v122, (uint64_t)v123);
      if (v124)
      {
        v70 = (uint64_t *)(v42 + 24);
        v71 = *(unsigned int *)(v42 + 36);
        if ((_DWORD)v71 == *(_DWORD *)(v42 + 32))
        {
          v110 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v70, v71 + 1, (unint64_t)&v121);
          v71 = *(unsigned int *)(v42 + 36);
          v111 = *(_QWORD *)(v42 + 24);
          v112 = *v110;
          if (*v110)
            *v112 += 2;
          *(_QWORD *)(v111 + 8 * v71) = v112;
        }
        else
        {
          v72 = *v70;
          v73 = v121;
          if (v121)
            *(_DWORD *)v121 += 2;
          *(_QWORD *)(v72 + 8 * v71) = v73;
        }
        *(_DWORD *)(v42 + 36) = v71 + 1;
      }
      v74 = v122;
      v122 = 0;
      if (v74)
      {
        if (*(_DWORD *)v74 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v74;
      }
      v75 = v121;
      v121 = 0;
      if (v75)
      {
        if (*(_DWORD *)v75 == 2)
          WTF::StringImpl::destroy(v75, v61);
        else
          *(_DWORD *)v75 -= 2;
      }
      v67 = v116;
      v116 = 0;
      if (!v67)
        goto LABEL_103;
LABEL_101:
      if (*(_DWORD *)v67 == 2)
        WTF::StringImpl::destroy(v67, v61);
      else
        *(_DWORD *)v67 -= 2;
      goto LABEL_103;
    }
    result = std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_176;
  }
LABEL_103:
  v76 = *(WebCore::AnimationEffect **)(v40 + 56);
  if (v76)
  {
    WebCore::buildObjectForEffect((WebCore *)&v116, v76);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v121 = v116;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v42 + 16), &v122, (const WTF::StringImpl *)&v121, (uint64_t)v123);
    if (v124)
    {
      v78 = (uint64_t *)(v42 + 24);
      v79 = *(unsigned int *)(v42 + 36);
      if ((_DWORD)v79 == *(_DWORD *)(v42 + 32))
      {
        v98 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v78, v79 + 1, (unint64_t)&v122);
        v79 = *(unsigned int *)(v42 + 36);
        v99 = *(_QWORD *)(v42 + 24);
        v100 = *v98;
        if (*v98)
          *v100 += 2;
        *(_QWORD *)(v99 + 8 * v79) = v100;
      }
      else
      {
        v80 = *v78;
        v81 = v122;
        if (v122)
          *(_DWORD *)v122 += 2;
        *(_QWORD *)(v80 + 8 * v79) = v81;
      }
      *(_DWORD *)(v42 + 36) = v79 + 1;
    }
    v82 = v121;
    v121 = 0;
    if (v82)
    {
      if (*(_DWORD *)v82 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v82;
    }
    v83 = v122;
    v122 = 0;
    if (v83)
    {
      if (*(_DWORD *)v83 == 2)
        WTF::StringImpl::destroy(v83, v77);
      else
        *(_DWORD *)v83 -= 2;
    }
  }
  v84 = *a3;
  if (*a3)
  {
    *a3 = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v121 = v84;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v42 + 16), &v122, (const WTF::StringImpl *)&v121, (uint64_t)v123);
    if (v124)
    {
      v86 = (uint64_t *)(v42 + 24);
      v87 = *(unsigned int *)(v42 + 36);
      if ((_DWORD)v87 == *(_DWORD *)(v42 + 32))
      {
        v101 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v86, v87 + 1, (unint64_t)&v122);
        v87 = *(unsigned int *)(v42 + 36);
        v102 = *(_QWORD *)(v42 + 24);
        v103 = *v101;
        if (*v101)
          *v103 += 2;
        *(_QWORD *)(v102 + 8 * v87) = v103;
      }
      else
      {
        v88 = *v86;
        v89 = v122;
        if (v122)
          *(_DWORD *)v122 += 2;
        *(_QWORD *)(v88 + 8 * v87) = v89;
      }
      *(_DWORD *)(v42 + 36) = v87 + 1;
    }
    v90 = v121;
    v121 = 0;
    if (v90)
    {
      if (*(_DWORD *)v90 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v90;
    }
    v91 = v122;
    v122 = 0;
    if (v91)
    {
      if (*(_DWORD *)v91 == 2)
        WTF::StringImpl::destroy(v91, v85);
      else
        *(_DWORD *)v91 -= 2;
    }
  }
  Inspector::AnimationFrontendDispatcher::animationCreated();
  v93 = v117;
  v117 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
      WTF::StringImpl::destroy(v93, v92);
    else
      *(_DWORD *)v93 -= 2;
  }
  v94 = v118;
  v118 = 0;
  if (v94)
  {
    if (*v94 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v94;
  }
  result = (uint64_t)v120;
  v120 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v92);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorAnimationAgent::enable@<X0>(WebCore::InspectorAnimationAgent *this@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  return WebCore::InspectorAnimationAgent::enable((WebCore::InspectorAnimationAgent *)((char *)this - 32), a2, a3);
}

WTF *WebCore::InspectorAnimationAgent::reset(WebCore::InspectorAnimationAgent *this, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF *result;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;

  v3 = (WTF *)*((_QWORD *)this + 9);
  if (v3)
  {
    v4 = *((unsigned int *)this + 20);
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 10) = 0;
    *(_QWORD *)((char *)this + 85) = 0;
    if ((_DWORD)v4)
    {
      v5 = (WTF::StringImpl **)v3;
      do
      {
        v6 = *v5;
        *v5 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree(v3, a2);
  }
  result = (WTF *)*((_QWORD *)this + 12);
  if (result)
  {
    *((_QWORD *)this + 12) = 0;
    result = (WTF *)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable((uint64_t)result, a2);
    v8 = *((_QWORD *)this + 12);
    *((_DWORD *)this + 26) = 0;
    if (v8)
    {
      LODWORD(v8) = *(_DWORD *)(v8 - 12);
      if (v8 > 0x7FFFFFFE)
        LODWORD(v8) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v8) = 0;
    *((_DWORD *)this + 26) = 0;
  }
  *((_DWORD *)this + 27) = 2 * v8;
  if ((*((_QWORD *)this + 18) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 18) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    result = (WTF *)WebCore::TimerBase::stopSlowCase((WebCore::InspectorAnimationAgent *)((char *)this + 112));
  }
  if (*((_DWORD *)this + 44))
  {
    v9 = *((unsigned int *)this + 45);
    if ((_DWORD)v9)
    {
      v10 = (WTF::StringImpl **)*((_QWORD *)this + 21);
      v11 = 8 * v9;
      do
      {
        v12 = *v10;
        *v10 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, a2);
          else
            *(_DWORD *)v12 -= 2;
        }
        ++v10;
        v11 -= 8;
      }
      while (v11);
      *((_DWORD *)this + 45) = 0;
    }
    result = (WTF *)*((_QWORD *)this + 21);
    if (result)
    {
      *((_QWORD *)this + 21) = 0;
      *((_DWORD *)this + 44) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
    }
  }
  if ((*((_QWORD *)this + 27) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 27) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    return (WTF *)WebCore::TimerBase::stopSlowCase((WebCore::InspectorAnimationAgent *)((char *)this + 184));
  }
  return result;
}

WTF *`non-virtual thunk to'WebCore::InspectorAnimationAgent::disable@<X0>(WebCore::InspectorAnimationAgent *this@<X0>, WTF::StringImpl *a2@<X1>, _BYTE *a3@<X8>)
{
  WTF *result;

  *(_QWORD *)(*((_QWORD *)this - 2) + 80) = 0;
  result = WebCore::InspectorAnimationAgent::reset((WebCore::InspectorAnimationAgent *)((char *)this - 32), a2);
  *a3 = 0;
  a3[8] = 0;
  return result;
}

WTF::StringImpl *WebCore::InspectorAnimationAgent::requestEffectTarget@<X0>(WebCore::InspectorAnimationAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *v4;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::InspectorDOMAgent *v10;
  int v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  int v16;
  uint64_t *v17;
  WebCore::InspectorDOMAgent *v18;
  WTF::StringImpl *v19;
  WTF::JSONImpl::Value *v20;
  WTF::JSONImpl::Object *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  _DWORD *v28;
  WTF::StringImpl *v29;
  Inspector::Protocol::Helpers *v30;
  const WTF::String *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  _DWORD **v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD **v41;
  uint64_t v42;
  _DWORD *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  _DWORD *v47;
  WTF::StringImpl *v48[2];
  char v49;

  v7 = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 9, a2, a3);
  if (v7)
  {
    v8 = *(_QWORD *)(*((_QWORD *)this + 2) + 40);
    if (v8)
    {
      v9 = *((_QWORD *)v7 + 7);
      if (v9)
      {
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v9 + 24))(*((_QWORD *)v7 + 7)) & 1) != 0)
        {
          ++*(_DWORD *)(v9 + 8);
          v10 = *(WebCore::InspectorDOMAgent **)(v9 + 264);
          if (!v10)
          {
            result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
            *(_DWORD *)(a4 + 8) = 1;
LABEL_65:
            if (*(_DWORD *)(v9 + 8) == 1)
              return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
            --*(_DWORD *)(v9 + 8);
            return result;
          }
          v11 = *(unsigned __int8 *)(v9 + 288);
          if (*(_BYTE *)(v9 + 288))
          {
            v12 = *(_DWORD *)(v9 + 272);
            v4 = *(WTF::StringImpl **)(v9 + 280);
            if (v4)
              *(_DWORD *)v4 += 2;
            if (v12 == 7)
            {
              v13 = *((_QWORD *)v10 + 9) & 0xFFFFFFFFFFFFLL;
              if (!v13)
              {
                v12 = 7;
                goto LABEL_26;
              }
              v17 = (uint64_t *)(v13 + 176);
              goto LABEL_25;
            }
            if (v12 == 6)
            {
              v13 = *((_QWORD *)v10 + 9) & 0xFFFFFFFFFFFFLL;
              if (!v13)
              {
                v12 = 6;
LABEL_26:
                v44 = 0;
                if (v13)
                  v18 = (WebCore::InspectorDOMAgent *)v13;
                else
                  v18 = v10;
                v20 = (WTF::JSONImpl::Value *)WebCore::InspectorDOMAgent::pushNodePathToFrontend(v8, (WebCore::Node *)&v44, v18);
                v21 = v44;
                if (v44)
                {
                  if (*(_DWORD *)v44 == 2)
                    v21 = (WTF::JSONImpl::Object *)WTF::StringImpl::destroy(v44, v19);
                  else
                    *(_DWORD *)v44 -= 2;
                }
                WTF::JSONImpl::Object::create(v21);
                v22 = v45;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                WTF::JSONImpl::Value::create(v20);
                WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v22 + 2, &v46, (const WTF::StringImpl *)&v47, (uint64_t)v48);
                if (v49)
                {
                  v24 = (uint64_t *)((char *)v22 + 24);
                  v25 = *((unsigned int *)v22 + 9);
                  if ((_DWORD)v25 == *((_DWORD *)v22 + 8))
                  {
                    v38 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v24, v25 + 1, (unint64_t)&v46);
                    v25 = *((unsigned int *)v22 + 9);
                    v39 = *((_QWORD *)v22 + 3);
                    v40 = *v38;
                    if (*v38)
                      *v40 += 2;
                    *(_QWORD *)(v39 + 8 * v25) = v40;
                  }
                  else
                  {
                    v26 = *v24;
                    v27 = v46;
                    if (v46)
                      *(_DWORD *)v46 += 2;
                    *(_QWORD *)(v26 + 8 * v25) = v27;
                  }
                  *((_DWORD *)v22 + 9) = v25 + 1;
                }
                v28 = v47;
                v47 = 0;
                if (v28)
                {
                  if (*v28 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v28;
                }
                result = v46;
                v46 = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
                  else
                    *(_DWORD *)result -= 2;
                }
                v29 = v45;
                if (v11)
                {
                  if ((v12 - 1) <= 0x15)
                  {
                    v30 = (Inspector::Protocol::Helpers *)dword_1969F2288[v12 - 1];
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    Inspector::Protocol::Helpers::getEnumConstantValue(v30);
                    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v45, v31);
                    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v29 + 2, &v46, (const WTF::StringImpl *)&v47, (uint64_t)v48);
                    if (v49)
                    {
                      v32 = (uint64_t *)((char *)v29 + 24);
                      v33 = *((unsigned int *)v29 + 9);
                      if ((_DWORD)v33 == *((_DWORD *)v29 + 8))
                      {
                        v41 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v32, v33 + 1, (unint64_t)&v46);
                        v33 = *((unsigned int *)v29 + 9);
                        v42 = *((_QWORD *)v29 + 3);
                        v43 = *v41;
                        if (*v41)
                          *v43 += 2;
                        *(_QWORD *)(v42 + 8 * v33) = v43;
                      }
                      else
                      {
                        v34 = *v32;
                        v35 = v46;
                        if (v46)
                          *(_DWORD *)v46 += 2;
                        *(_QWORD *)(v34 + 8 * v33) = v35;
                      }
                      *((_DWORD *)v29 + 9) = v33 + 1;
                    }
                    v36 = v47;
                    v47 = 0;
                    if (v36)
                    {
                      if (*v36 == 1)
                        WTF::JSONImpl::Value::operator delete();
                      else
                        --*v36;
                    }
                    v37 = v45;
                    v45 = 0;
                    if (v37)
                    {
                      if (*(_DWORD *)v37 == 2)
                        WTF::StringImpl::destroy(v37, v23);
                      else
                        *(_DWORD *)v37 -= 2;
                    }
                    result = v46;
                    v46 = 0;
                    if (result)
                    {
                      if (*(_DWORD *)result == 2)
                        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
                      else
                        *(_DWORD *)result -= 2;
                    }
                  }
                  *(_QWORD *)a4 = v29;
                  *(_DWORD *)(a4 + 8) = 0;
                  if (v4)
                  {
                    if (*(_DWORD *)v4 == 2)
                      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v23);
                    else
                      *(_DWORD *)v4 -= 2;
                  }
                }
                else
                {
                  *(_QWORD *)a4 = v45;
                  *(_DWORD *)(a4 + 8) = 0;
                }
                goto LABEL_65;
              }
              v17 = (uint64_t *)(v13 + 168);
LABEL_25:
              v13 = *v17;
              goto LABEL_26;
            }
          }
          else
          {
            v12 = 0;
          }
          v13 = (uint64_t)v10;
          goto LABEL_26;
        }
      }
    }
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_17:
    *(_DWORD *)(a4 + 8) = 1;
    return result;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  result = v48[0];
  if (!v48[0])
  {
    *(_QWORD *)a4 = 0;
    goto LABEL_17;
  }
  v16 = *(_DWORD *)v48[0];
  *(_DWORD *)v48[0] += 2;
  *(_QWORD *)a4 = result;
  *(_DWORD *)(a4 + 8) = 1;
  if (!v16)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
  *(_DWORD *)result = v16;
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorAnimationAgent::requestEffectTarget@<X0>(WebCore::InspectorAnimationAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  return WebCore::InspectorAnimationAgent::requestEffectTarget((WebCore::InspectorAnimationAgent *)((char *)this - 32), a2, a3, a4);
}

void WebCore::InspectorAnimationAgent::resolveAnimation(WebCore::InspectorAnimationAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, uint64_t a4@<X8>)
{
  WTF *v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::ScriptExecutionContext *v10;
  JSC::JSGlobalObject *v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  WTF::StringImpl *v18;

  v6 = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 9, a2, a3);
  if (v6)
  {
    v7 = v6;
    v8 = *((_QWORD *)v6 + 5);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
        v10 = (WebCore::ScriptExecutionContext *)(v9 - 96);
      else
        v10 = 0;
    }
    else
    {
      v10 = 0;
    }
    v11 = (JSC::JSGlobalObject *)WebCore::ScriptExecutionContext::globalObject(v10);
    Inspector::InjectedScriptManager::injectedScriptFor(*((Inspector::InjectedScriptManager **)this + 7), v11);
    JSC::JSLockHolder::JSLockHolder();
    v12 = WebCore::wrap<WebCore::WebAnimation>((uint64_t)v11, v11, v7);
    MEMORY[0x19AEA32A0](&v17);
    if (v12)
    {
      Inspector::InjectedScript::wrapObject();
      if (v17)
      {
        *(_QWORD *)a4 = v17;
        *(_DWORD *)(a4 + 8) = 0;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        *(_DWORD *)(a4 + 8) = 1;
        v16 = v17;
        v17 = 0;
        if (v16)
        {
          if (*v16 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v16;
        }
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_DWORD *)(a4 + 8) = 1;
    }
    Inspector::InjectedScript::~InjectedScript((Inspector::InjectedScript *)&v18);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = v18;
    if (v18)
    {
      v15 = *(_DWORD *)v18;
      *(_DWORD *)v18 += 2;
      *(_QWORD *)a4 = v14;
      *(_DWORD *)(a4 + 8) = 1;
      if (v15)
        *(_DWORD *)v14 = v15;
      else
        WTF::StringImpl::destroy(v14, v13);
    }
    else
    {
      *(_QWORD *)a4 = 0;
      *(_DWORD *)(a4 + 8) = 1;
    }
  }
}

void `non-virtual thunk to'WebCore::InspectorAnimationAgent::resolveAnimation(WebCore::InspectorAnimationAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, uint64_t a4@<X8>)
{
  WebCore::InspectorAnimationAgent::resolveAnimation((WebCore::InspectorAnimationAgent *)((char *)this - 32), a2, a3, a4);
}

uint64_t WebCore::InspectorAnimationAgent::startTracking@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  Inspector::AnimationFrontendDispatcher *v4;
  double *v5;
  double v6;

  v3 = *(_QWORD *)(this + 16);
  if (*(_QWORD *)(v3 + 224) != this)
  {
    *(_QWORD *)(v3 + 224) = this;
    v4 = *(Inspector::AnimationFrontendDispatcher **)(this + 40);
    v5 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 24) + 56))(*(_QWORD *)(this + 24));
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
    this = Inspector::AnimationFrontendDispatcher::trackingStart(v4, v5[1] + v6 - v5[2]);
  }
  *a2 = 0;
  a2[8] = 0;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::InspectorAnimationAgent::startTracking@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  Inspector::AnimationFrontendDispatcher *v4;
  double *v5;
  double v6;

  v3 = *(_QWORD *)(this - 16);
  if (*(_QWORD *)(v3 + 224) != this - 32)
  {
    *(_QWORD *)(v3 + 224) = this - 32;
    v4 = *(Inspector::AnimationFrontendDispatcher **)(this + 8);
    v5 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(this - 8) + 56))(*(_QWORD *)(this - 8));
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
    this = Inspector::AnimationFrontendDispatcher::trackingStart(v4, v5[1] + v6 - v5[2]);
  }
  *a2 = 0;
  a2[8] = 0;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::InspectorAnimationAgent::stopTracking@<X0>(uint64_t this@<X0>, WTF::StringImpl *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Inspector::AnimationFrontendDispatcher *v7;
  double *v8;
  double v9;

  v4 = *(_QWORD *)(this - 16);
  if (*(_QWORD *)(v4 + 224) == this - 32)
  {
    v5 = this;
    *(_QWORD *)(v4 + 224) = 0;
    v6 = *(_QWORD *)(this + 208);
    if (v6)
    {
      *(_QWORD *)(v5 + 208) = 0;
      WTF::HashTable<WebCore::StyleOriginatedAnimation *,WTF::KeyValuePair<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>>,WTF::DefaultHash<WebCore::StyleOriginatedAnimation *>,WTF::HashMap<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>,WTF::DefaultHash<WebCore::StyleOriginatedAnimation *>,WTF::HashTraits<WebCore::StyleOriginatedAnimation *>,WTF::HashTraits<WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::StyleOriginatedAnimation *>>::deallocateTable(v6, a2);
    }
    v7 = *(Inspector::AnimationFrontendDispatcher **)(v5 + 8);
    v8 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 - 8) + 56))(*(_QWORD *)(v5 - 8));
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
    this = Inspector::AnimationFrontendDispatcher::trackingComplete(v7, v8[1] + v9 - v8[2]);
  }
  *a3 = 0;
  a3[8] = 0;
  return this;
}

Inspector::IdentifiersFactory *WebCore::InspectorAnimationAgent::willApplyKeyframeEffect(Inspector::IdentifiersFactory *this, const WebCore::Styleable *a2, WebCore::KeyframeEffect *a3, const WebCore::ComputedEffectTiming *a4)
{
  uint64_t v4;
  uint64_t v5;
  Inspector::IdentifiersFactory *v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  int v29;
  __int128 v30;
  WTF::StringImpl *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  _BOOL4 v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  _DWORD *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  WTF::StringImpl *v62;
  WebCore::InspectorDOMAgent *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t *v67;
  WebCore::Node *v68;
  uint64_t v69;
  WTF::JSONImpl::Value *v70;
  WTF::StringImpl *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  _DWORD *v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  const WTF::String *v79;
  WTF::StringImpl *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  _DWORD *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::MonotonicTime *v88;
  _DWORD **v89;
  uint64_t v90;
  _DWORD *v91;
  _DWORD **v92;
  uint64_t v93;
  _DWORD *v94;
  const WTF::String *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  _DWORD *v100;
  _DWORD **v101;
  uint64_t v102;
  _DWORD *v103;
  uint64_t *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  _BYTE v108[8];
  int v109;
  __int128 v110;
  __int128 v111;
  WTF::StringImpl *v112;
  __int16 v113;
  __int128 v114;
  __int128 v115;
  _BYTE v116[22];
  WTF::StringImpl *v117;
  uint64_t v118[2];

  v4 = *((_QWORD *)a3 + 12);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v8 = this;
      this = (Inspector::IdentifiersFactory *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5);
      if ((_DWORD)this)
      {
        ++*(_DWORD *)(v5 + 24);
        v10 = (uint64_t *)((char *)v8 + 240);
        v9 = *((_QWORD *)v8 + 30);
        if (v9
          || (this = (Inspector::IdentifiersFactory *)WTF::HashTable<WebCore::StyleOriginatedAnimation *,WTF::KeyValuePair<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>>,WTF::DefaultHash<WebCore::StyleOriginatedAnimation *>,WTF::HashMap<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>,WTF::DefaultHash<WebCore::StyleOriginatedAnimation *>,WTF::HashTraits<WebCore::StyleOriginatedAnimation *>,WTF::HashTraits<WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::StyleOriginatedAnimation *>>::rehash((uint64_t *)v8 + 30, 8u, 0), (v9 = *v10) != 0))
        {
          v11 = *(_DWORD *)(v9 - 8);
        }
        else
        {
          v11 = 0;
        }
        v12 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
        v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
        v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
        v15 = v11 & ((v14 >> 31) ^ v14);
        v16 = (uint64_t *)(v9 + 16 * v15);
        v17 = *v16;
        if (!*v16)
          goto LABEL_16;
        v18 = 0;
        v19 = 1;
        while (v17 != v5)
        {
          if (v17 == -1)
            v18 = v16;
          v15 = (v15 + v19) & v11;
          v16 = (uint64_t *)(v9 + 16 * v15);
          v17 = *v16;
          ++v19;
          if (!*v16)
          {
            if (v18)
            {
              *v18 = 0;
              v18[1] = 0;
              --*(_DWORD *)(*v10 - 16);
              v16 = v18;
            }
LABEL_16:
            *v16 = v5;
            Inspector::IdentifiersFactory::createIdentifier(this);
            if (v118[0])
            {
              v20 = *(_DWORD *)(v118[0] + 4);
              if ((v20 & 0x80000000) == 0)
              {
                v21 = (v20 + 10);
                if (!__OFADD__(v20, 10))
                {
                  v22 = (*(unsigned __int8 *)(v118[0] + 16) >> 2) & 1;
                  goto LABEL_20;
                }
              }
LABEL_180:
              v107 = 0;
LABEL_181:
              __break(0xC471u);
              JUMPOUT(0x195DFE744);
            }
            v22 = 1;
            v21 = 10;
LABEL_20:
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v21, v22, (int8x16_t *)"animation:", 0xAu, v118[0], &v107);
            if (!v107)
              goto LABEL_181;
            v104 = (uint64_t *)((char *)v8 + 240);
            v108[0] = 0;
            v109 = -1;
            v23 = *((unsigned int *)a4 + 2);
            if ((_DWORD)v23 != -1)
            {
              ((void (*)(WTF::StringImpl **, _BYTE *, const WebCore::ComputedEffectTiming *))off_1E33EFA38[v23])(&v117, v108, a4);
              v109 = v23;
            }
            v24 = *((_OWORD *)a4 + 2);
            v110 = *((_OWORD *)a4 + 1);
            v111 = v24;
            v25 = (WTF::StringImpl *)*((_QWORD *)a4 + 6);
            if (v25)
              *(_DWORD *)v25 += 2;
            v112 = v25;
            v113 = *((_WORD *)a4 + 28);
            v114 = *(_OWORD *)((char *)a4 + 58);
            v115 = *(_OWORD *)((char *)a4 + 74);
            *(_OWORD *)v116 = *(_OWORD *)((char *)a4 + 90);
            *(_QWORD *)&v116[14] = *((_QWORD *)a4 + 13);
            v26 = WTF::fastMalloc((WTF *)0x78);
            v27 = v107;
            v107 = 0;
            *(_QWORD *)v26 = v27;
            *(_BYTE *)(v26 + 8) = 0;
            v28 = (WTF::StringImpl *)(v26 + 8);
            *(_DWORD *)(v26 + 16) = -1;
            v29 = v109;
            if (v109 != -1)
            {
              ((void (*)(WTF::StringImpl **, WTF::StringImpl *, _BYTE *))off_1E33EFA28[v109])(&v117, v28, v108);
              *(_DWORD *)(v26 + 16) = v29;
            }
            v30 = v110;
            *(_OWORD *)(v26 + 40) = v111;
            *(_OWORD *)(v26 + 24) = v30;
            v31 = v112;
            v112 = 0;
            *(_QWORD *)(v26 + 56) = v31;
            *(_WORD *)(v26 + 64) = v113;
            v32 = v114;
            v33 = v115;
            v34 = *(_OWORD *)v116;
            *(_QWORD *)(v26 + 112) = *(_QWORD *)&v116[14];
            *(_OWORD *)(v26 + 98) = v34;
            *(_OWORD *)(v26 + 82) = v33;
            *(_OWORD *)(v26 + 66) = v32;
            v35 = v112;
            v112 = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v28);
              else
                *(_DWORD *)v35 -= 2;
            }
            if (v109 != -1)
              ((void (*)(WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v109])(&v117, v108);
            v109 = -1;
            v36 = v107;
            v107 = 0;
            if (v36)
            {
              if (*(_DWORD *)v36 == 2)
                WTF::StringImpl::destroy(v36, v28);
              else
                *(_DWORD *)v36 -= 2;
            }
            v37 = (WTF::StringImpl *)v118[0];
            v118[0] = 0;
            if (v37)
            {
              if (*(_DWORD *)v37 == 2)
                WTF::StringImpl::destroy(v37, v28);
              else
                *(_DWORD *)v37 -= 2;
            }
            v38 = v16[1];
            v16[1] = v26;
            if (v38)
            {
              v39 = *(WTF::StringImpl **)(v38 + 56);
              *(_QWORD *)(v38 + 56) = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, v28);
                else
                  *(_DWORD *)v39 -= 2;
              }
              v40 = *(unsigned int *)(v38 + 16);
              if ((_DWORD)v40 != -1)
                ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v40])(&v107, v38 + 8);
              *(_DWORD *)(v38 + 16) = -1;
              v41 = *(WTF::StringImpl **)v38;
              *(_QWORD *)v38 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, v28);
                else
                  *(_DWORD *)v41 -= 2;
              }
              WTF::fastFree((WTF *)v38, v28);
            }
            v42 = *v104;
            if (*v104)
              v43 = *(_DWORD *)(v42 - 12) + 1;
            else
              v43 = 1;
            *(_DWORD *)(v42 - 12) = v43;
            v46 = *v104;
            if (*v104)
              v47 = *(_DWORD *)(v46 - 12);
            else
              v47 = 0;
            v48 = (*(_DWORD *)(v46 - 16) + v47);
            v49 = *(unsigned int *)(v46 - 4);
            if (v49 > 0x400)
            {
              if (v49 <= 2 * v48)
              {
LABEL_59:
                v50 = (_DWORD)v49 << (6 * *(_DWORD *)(v46 - 12) >= (2 * v49));
                goto LABEL_62;
              }
            }
            else if (3 * v49 <= 4 * v48)
            {
              if ((_DWORD)v49)
                goto LABEL_59;
              v50 = 8;
LABEL_62:
              v16 = WTF::HashTable<WebCore::StyleOriginatedAnimation *,WTF::KeyValuePair<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>>,WTF::DefaultHash<WebCore::StyleOriginatedAnimation *>,WTF::HashMap<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>,WTF::DefaultHash<WebCore::StyleOriginatedAnimation *>,WTF::HashTraits<WebCore::StyleOriginatedAnimation *>,WTF::HashTraits<WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::StyleOriginatedAnimation *>>::rehash(v104, v50, v16);
            }
            v45 = 0;
            v44 = v16[1];
            goto LABEL_64;
          }
        }
        v44 = v16[1];
        if (*(double *)(v44 + 72) < *(double *)(v44 + 104) - *(double *)(v44 + 112))
          goto LABEL_66;
        v45 = 1;
LABEL_64:
        if (*((double *)a4 + 8) < *((double *)a4 + 12) - *((double *)a4 + 13))
        {
          v52 = 1;
LABEL_72:
          v53 = 1;
          goto LABEL_73;
        }
        if ((v45 & 1) == 0)
        {
          v45 = 0;
          v51 = *((unsigned __int8 *)a4 + 58);
          goto LABEL_93;
        }
LABEL_66:
        v51 = *((unsigned __int8 *)a4 + 58);
        if (*(unsigned __int8 *)(v44 + 66) == v51)
        {
          if (*(double *)(v44 + 96) == *((double *)a4 + 11))
            v52 = 0;
          else
            v52 = 2;
          v53 = *(double *)(v44 + 96) != *((double *)a4 + 11);
          v45 = 1;
          goto LABEL_73;
        }
        v45 = 1;
LABEL_93:
        switch(v51)
        {
          case 0:
            v52 = 0;
            goto LABEL_72;
          case 1:
            v53 = 1;
            v52 = 2;
            break;
          case 2:
            v53 = 1;
            v52 = 4;
            break;
          case 3:
            v53 = 1;
            v52 = 3;
            break;
          default:
            v52 = 0;
            v53 = 0;
            break;
        }
LABEL_73:
        v54 = (WTF::StringImpl *)(v44 + 8);
        v55 = *(unsigned int *)(v44 + 16);
        v56 = *((unsigned int *)a4 + 2);
        if ((_DWORD)v55 == -1)
        {
          if ((_DWORD)v56 == -1)
            goto LABEL_78;
        }
        else if ((_DWORD)v56 == -1)
        {
          ((void (*)(WTF::StringImpl **, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v55])(&v107, v54);
          *(_DWORD *)(v44 + 16) = -1;
          goto LABEL_78;
        }
        v107 = (WTF::StringImpl *)(v44 + 8);
        ((void (*)(WTF::StringImpl **))off_1E33EF740[v56])(&v107);
LABEL_78:
        v57 = *((_OWORD *)a4 + 1);
        *(_OWORD *)(v44 + 40) = *((_OWORD *)a4 + 2);
        *(_OWORD *)(v44 + 24) = v57;
        v58 = (_DWORD *)*((_QWORD *)a4 + 6);
        if (v58)
          *v58 += 2;
        this = *(Inspector::IdentifiersFactory **)(v44 + 56);
        *(_QWORD *)(v44 + 56) = v58;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = (Inspector::IdentifiersFactory *)WTF::StringImpl::destroy(this, v54);
          else
            *(_DWORD *)this -= 2;
        }
        *(_WORD *)(v44 + 64) = *((_WORD *)a4 + 28);
        v59 = *(_OWORD *)((char *)a4 + 58);
        v60 = *(_OWORD *)((char *)a4 + 74);
        v61 = *(_OWORD *)((char *)a4 + 90);
        *(_QWORD *)(v44 + 112) = *((_QWORD *)a4 + 13);
        *(_OWORD *)(v44 + 98) = v61;
        *(_OWORD *)(v44 + 82) = v60;
        *(_OWORD *)(v44 + 66) = v59;
        if (!v53)
          goto LABEL_146;
        WTF::JSONImpl::Object::create(this);
        Inspector::Protocol::Animation::TrackingUpdate::Builder<0>::setTrackingAnimationId((uint64_t *)&v107, (WTF::JSONImpl::Value *)v44);
        Inspector::Protocol::Animation::TrackingUpdate::Builder<1>::setAnimationState((uint64_t *)&v107, (Inspector::Protocol::Helpers *)v52);
        v62 = v107;
        v106 = v107;
        if ((v45 & 1) != 0)
          goto LABEL_143;
        v63 = *(WebCore::InspectorDOMAgent **)(*((_QWORD *)v8 + 2) + 40);
        if (!v63)
        {
LABEL_125:
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 112))(v5))
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(v5 + 232), v95);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v62 + 2, &v117, (const WTF::StringImpl *)v118, (uint64_t)&v107);
            if ((_BYTE)v109)
            {
              v96 = (uint64_t *)((char *)v62 + 24);
              v97 = *((unsigned int *)v62 + 9);
              if ((_DWORD)v97 == *((_DWORD *)v62 + 8))
              {
                v101 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v96, v97 + 1, (unint64_t)&v117);
                v97 = *((unsigned int *)v62 + 9);
                v102 = *((_QWORD *)v62 + 3);
                v103 = *v101;
                if (*v101)
                  *v103 += 2;
                *(_QWORD *)(v102 + 8 * v97) = v103;
              }
              else
              {
                v98 = *v96;
                v99 = v117;
                if (v117)
                  *(_DWORD *)v117 += 2;
                *(_QWORD *)(v98 + 8 * v97) = v99;
              }
              *((_DWORD *)v62 + 9) = v97 + 1;
            }
            v100 = (_DWORD *)v118[0];
            v118[0] = 0;
            if (v100)
            {
              if (*v100 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v100;
            }
            v87 = v117;
            v117 = 0;
            if (!v87)
              goto LABEL_143;
          }
          else
          {
            if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 120))(v5))
              goto LABEL_143;
            v78 = *(unsigned int *)(v5 + 240);
            if ((_DWORD)v78 == -1)
            {
              std::__throw_bad_variant_access[abi:sn180100]();
              goto LABEL_180;
            }
            v107 = (WTF::StringImpl *)v118;
            ((void (*)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore13CSSTransition18transitionPropertyEvE3__0JZNKS9_18transitionPropertyEvE3__1EEEEEJRKNS0_6__implIJNS8_13CSSPropertyIDENS6_10AtomStringEEEEEEEDcOT_DpOT0____fmatrix[v78])(&v105, &v107, v5 + 232);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v105, v79);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v62 + 2, &v117, (const WTF::StringImpl *)v118, (uint64_t)&v107);
            if ((_BYTE)v109)
            {
              v81 = (uint64_t *)((char *)v62 + 24);
              v82 = *((unsigned int *)v62 + 9);
              if ((_DWORD)v82 == *((_DWORD *)v62 + 8))
              {
                v89 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v81, v82 + 1, (unint64_t)&v117);
                v82 = *((unsigned int *)v62 + 9);
                v90 = *((_QWORD *)v62 + 3);
                v91 = *v89;
                if (*v89)
                  *v91 += 2;
                *(_QWORD *)(v90 + 8 * v82) = v91;
              }
              else
              {
                v83 = *v81;
                v84 = v117;
                if (v117)
                  *(_DWORD *)v117 += 2;
                *(_QWORD *)(v83 + 8 * v82) = v84;
              }
              *((_DWORD *)v62 + 9) = v82 + 1;
            }
            v85 = (_DWORD *)v118[0];
            v118[0] = 0;
            if (v85)
            {
              if (*v85 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v85;
            }
            v86 = v117;
            v117 = 0;
            if (v86)
            {
              if (*(_DWORD *)v86 == 2)
                WTF::StringImpl::destroy(v86, v80);
              else
                *(_DWORD *)v86 -= 2;
            }
            v87 = v105;
            v105 = 0;
            if (!v87)
              goto LABEL_143;
          }
          if (*(_DWORD *)v87 == 2)
            WTF::StringImpl::destroy(v87, v80);
          else
            *(_DWORD *)v87 -= 2;
LABEL_143:
          v88 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v8 + 3) + 56))(*((_QWORD *)v8 + 3));
          WTF::MonotonicTime::now(v88);
          Inspector::AnimationFrontendDispatcher::trackingUpdate();
          this = v106;
          v106 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 1)
              this = (Inspector::IdentifiersFactory *)WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)this;
          }
LABEL_146:
          if (*(_DWORD *)(v5 + 24) == 1)
            return (Inspector::IdentifiersFactory *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
          --*(_DWORD *)(v5 + 24);
          return this;
        }
        v64 = *(_QWORD *)a2;
        if (*((_BYTE *)a2 + 24))
        {
          v65 = *((_DWORD *)a2 + 2);
          if (v65 == 7)
          {
            v66 = *(_QWORD *)(v64 + 72) & 0xFFFFFFFFFFFFLL;
            if (!v66)
              goto LABEL_109;
            v67 = (uint64_t *)(v66 + 176);
LABEL_108:
            v66 = *v67;
LABEL_109:
            if (v66)
              v68 = (WebCore::Node *)v66;
            else
              v68 = *(WebCore::Node **)a2;
            v69 = WebCore::InspectorDOMAgent::pushNodeToFrontend(v63, v68);
            if ((_DWORD)v69)
            {
              v70 = (WTF::JSONImpl::Value *)v69;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              WTF::JSONImpl::Value::create(v70);
              WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v62 + 2, &v117, (const WTF::StringImpl *)v118, (uint64_t)&v107);
              if ((_BYTE)v109)
              {
                v72 = (uint64_t *)((char *)v62 + 24);
                v73 = *((unsigned int *)v62 + 9);
                if ((_DWORD)v73 == *((_DWORD *)v62 + 8))
                {
                  v92 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v72, v73 + 1, (unint64_t)&v117);
                  v73 = *((unsigned int *)v62 + 9);
                  v93 = *((_QWORD *)v62 + 3);
                  v94 = *v92;
                  if (*v92)
                    *v94 += 2;
                  *(_QWORD *)(v93 + 8 * v73) = v94;
                }
                else
                {
                  v74 = *v72;
                  v75 = v117;
                  if (v117)
                    *(_DWORD *)v117 += 2;
                  *(_QWORD *)(v74 + 8 * v73) = v75;
                }
                *((_DWORD *)v62 + 9) = v73 + 1;
              }
              v76 = (_DWORD *)v118[0];
              v118[0] = 0;
              if (v76)
              {
                if (*v76 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v76;
              }
              v77 = v117;
              v117 = 0;
              if (v77)
              {
                if (*(_DWORD *)v77 == 2)
                  WTF::StringImpl::destroy(v77, v71);
                else
                  *(_DWORD *)v77 -= 2;
              }
            }
            goto LABEL_125;
          }
          if (v65 == 6)
          {
            v66 = *(_QWORD *)(v64 + 72) & 0xFFFFFFFFFFFFLL;
            if (!v66)
              goto LABEL_109;
            v67 = (uint64_t *)(v66 + 168);
            goto LABEL_108;
          }
        }
        v66 = *(_QWORD *)a2;
        goto LABEL_109;
      }
    }
  }
  return this;
}

uint64_t *Inspector::Protocol::Animation::TrackingUpdate::Builder<0>::setTrackingAnimationId(uint64_t *a1, WTF::JSONImpl::Value *a2)
{
  uint64_t v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  _BYTE v19[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v5);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v17, (const WTF::StringImpl *)&v18, (uint64_t)v19);
  if (v19[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v17);
      v8 = *(unsigned int *)(v4 + 36);
      v15 = *(_QWORD *)(v4 + 24);
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *(_QWORD *)(v15 + 8 * v8) = v16;
    }
    else
    {
      v9 = *v7;
      v10 = v17;
      if (v17)
        *(_DWORD *)v17 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v18;
  v18 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  return a1;
}

uint64_t *Inspector::Protocol::Animation::TrackingUpdate::Builder<1>::setAnimationState(uint64_t *a1, Inspector::Protocol::Helpers *a2)
{
  uint64_t v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _DWORD **v15;
  uint64_t v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  _BYTE v21[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::Protocol::Helpers::getEnumConstantValue(a2);
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v18, v5);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v19, (const WTF::StringImpl *)&v20, (uint64_t)v21);
  if (v21[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v15 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v19);
      v8 = *(unsigned int *)(v4 + 36);
      v16 = *(_QWORD *)(v4 + 24);
      v17 = *v15;
      if (*v15)
        *v17 += 2;
      *(_QWORD *)(v16 + 8 * v8) = v17;
    }
    else
    {
      v9 = *v7;
      v10 = v19;
      if (v19)
        *(_DWORD *)v19 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v20;
  v20 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v6);
    else
      *(_DWORD *)v13 -= 2;
  }
  return a1;
}

uint64_t WebCore::InspectorAnimationAgent::didChangeWebAnimationName(uint64_t this, WebCore::WebAnimation *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;

  if (!*(_DWORD *)(this + 84))
    goto LABEL_6;
  v2 = *(unsigned int *)(this + 80);
  if ((_DWORD)v2)
  {
    v3 = 16 * v2;
    v4 = *(WTF::StringImpl ***)(this + 72);
    while (!*v4)
    {
      v4 += 2;
      v3 -= 16;
      if (!v3)
        goto LABEL_6;
    }
  }
  else
  {
    v4 = *(WTF::StringImpl ***)(this + 72);
  }
  v8 = *(_QWORD *)(this + 72) + 16 * v2;
LABEL_17:
  if (v4 == (WTF::StringImpl **)v8)
    goto LABEL_6;
  if (v4[1] != a2)
  {
    while (1)
    {
      v4 += 2;
      if (v4 == (WTF::StringImpl **)v8)
        break;
      if (*v4)
        goto LABEL_17;
    }
LABEL_6:
    v4 = (WTF::StringImpl **)MEMORY[0x1E0CBF6F0];
  }
  v5 = *v4;
  if (!v5)
    return this;
  v6 = *(_DWORD *)v5;
  v7 = *((_DWORD *)v5 + 1);
  *(_DWORD *)v5 += 2;
  v9 = v5;
  if (!v7)
  {
    v9 = 0;
    if (v6)
      goto LABEL_11;
    return WTF::StringImpl::destroy(v5, a2);
  }
  this = Inspector::AnimationFrontendDispatcher::nameChanged(*(Inspector::AnimationFrontendDispatcher **)(this + 40), (const WTF::String *)&v9, (WebCore::WebAnimation *)((char *)a2 + 144));
  v5 = v9;
  v9 = 0;
  if (!v5)
    return this;
  v6 = *(_DWORD *)v5 - 2;
  if (*(_DWORD *)v5 == 2)
    return WTF::StringImpl::destroy(v5, a2);
LABEL_11:
  *(_DWORD *)v5 = v6;
  return this;
}

uint64_t *WebCore::InspectorAnimationAgent::stopTrackingStyleOriginatedAnimation(WebCore::InspectorAnimationAgent *this, WebCore::StyleOriginatedAnimation *a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WebCore::StyleOriginatedAnimation *v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  WTF::MonotonicTime *v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *((_QWORD *)this + 30);
  result = (uint64_t *)((char *)this + 240);
  v4 = v5;
  if (v5)
  {
    v6 = *(_DWORD *)(v4 - 8);
    v7 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WebCore::StyleOriginatedAnimation **)(v4 + 16 * v10);
    if (v11 != a2)
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WebCore::StyleOriginatedAnimation **)(v4 + 16 * v10);
        ++v12;
        if (v11 == a2)
          goto LABEL_8;
      }
      v10 = *(unsigned int *)(v4 - 4);
    }
LABEL_8:
    if (v10 != *(_DWORD *)(v4 - 4))
    {
      v13 = (_QWORD *)(v4 + 16 * v10);
      v14 = v13[1];
      v13[1] = 0;
      v15 = *result;
      if (!*result || (v15 += 16 * *(unsigned int *)(v15 - 4), (_QWORD *)v15 != v13))
      {
        if ((_QWORD *)v15 != v13)
        {
          *v13 = -1;
          v13[1] = 0;
          ++*(_DWORD *)(*result - 16);
          v16 = *result;
          v17 = *result ? *(_DWORD *)(v16 - 12) - 1 : -1;
          *(_DWORD *)(v16 - 12) = v17;
          v18 = *result;
          if (*result)
          {
            v19 = 6 * *(_DWORD *)(v18 - 12);
            v20 = *(_DWORD *)(v18 - 4);
            if (v19 < v20 && v20 >= 9)
              result = WTF::HashTable<WebCore::StyleOriginatedAnimation *,WTF::KeyValuePair<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>>,WTF::DefaultHash<WebCore::StyleOriginatedAnimation *>,WTF::HashMap<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>,WTF::DefaultHash<WebCore::StyleOriginatedAnimation *>,WTF::HashTraits<WebCore::StyleOriginatedAnimation *>,WTF::HashTraits<WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::StyleOriginatedAnimation *>>::rehash(result, v20 >> 1, 0);
          }
        }
      }
      if (v14)
      {
        if ((*(_BYTE *)(v14 + 66) & 0xFE) != 2)
        {
          WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)result);
          Inspector::Protocol::Animation::TrackingUpdate::Builder<0>::setTrackingAnimationId(&v27, (WTF::JSONImpl::Value *)v14);
          Inspector::Protocol::Animation::TrackingUpdate::Builder<1>::setAnimationState(&v27, (Inspector::Protocol::Helpers *)3);
          v28 = v27;
          v22 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
          WTF::MonotonicTime::now(v22);
          Inspector::AnimationFrontendDispatcher::trackingUpdate();
          v23 = (_DWORD *)v28;
          v28 = 0;
          if (v23)
          {
            if (*v23 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v23;
          }
        }
        v24 = *(WTF::StringImpl **)(v14 + 56);
        *(_QWORD *)(v14 + 56) = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, a2);
          else
            *(_DWORD *)v24 -= 2;
        }
        v25 = *(unsigned int *)(v14 + 16);
        if ((_DWORD)v25 != -1)
          ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v25])(&v28, v14 + 8);
        *(_DWORD *)(v14 + 16) = -1;
        v26 = *(WTF::StringImpl **)v14;
        *(_QWORD *)v14 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, a2);
          else
            *(_DWORD *)v26 -= 2;
        }
        return (uint64_t *)WTF::fastFree((WTF *)v14, a2);
      }
    }
  }
  return result;
}

uint64_t WebCore::InspectorAnimationAgent::didChangeWebAnimationEffectTiming(uint64_t this, WebCore::AnimationEffect **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  WebCore::AnimationEffect *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;

  if (!*(_DWORD *)(this + 84))
    goto LABEL_6;
  v2 = *(unsigned int *)(this + 80);
  if ((_DWORD)v2)
  {
    v3 = 16 * v2;
    v4 = *(_QWORD *)(this + 72);
    while (!*(_QWORD *)v4)
    {
      v4 += 16;
      v3 -= 16;
      if (!v3)
        goto LABEL_6;
    }
  }
  else
  {
    v4 = *(_QWORD *)(this + 72);
  }
  v8 = *(_QWORD *)(this + 72) + 16 * v2;
LABEL_15:
  if (v4 == v8)
    goto LABEL_6;
  if (*(WebCore::AnimationEffect ***)(v4 + 8) != a2)
  {
    while (1)
    {
      v4 += 16;
      if (v4 == v8)
        break;
      if (*(_QWORD *)v4)
        goto LABEL_15;
    }
LABEL_6:
    v4 = MEMORY[0x1E0CBF6F0];
  }
  v5 = *(int **)v4;
  if (!v5)
    return this;
  v6 = *v5;
  *v5 += 2;
  v10 = v5;
  if (!v5[1])
  {
    v10 = 0;
    if (v6)
    {
LABEL_26:
      *v5 = v6;
      return this;
    }
    return WTF::StringImpl::destroy((WTF::StringImpl *)v5, (WTF::StringImpl *)a2);
  }
  v7 = a2[7];
  if (v7)
    WebCore::buildObjectForEffect((WebCore *)&v9, v7);
  else
    v9 = 0;
  Inspector::AnimationFrontendDispatcher::effectChanged();
  this = v9;
  v9 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 1)
      this = WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)this;
  }
  v5 = v10;
  v10 = 0;
  if (v5)
  {
    v6 = *v5 - 2;
    if (*v5 != 2)
      goto LABEL_26;
    return WTF::StringImpl::destroy((WTF::StringImpl *)v5, (WTF::StringImpl *)a2);
  }
  return this;
}

uint64_t WebCore::InspectorAnimationAgent::didChangeWebAnimationEffectTarget(uint64_t this, WebCore::WebAnimation *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;

  if (!*(_DWORD *)(this + 84))
    goto LABEL_6;
  v2 = *(unsigned int *)(this + 80);
  if ((_DWORD)v2)
  {
    v3 = 16 * v2;
    v4 = *(WTF::StringImpl ***)(this + 72);
    while (!*v4)
    {
      v4 += 2;
      v3 -= 16;
      if (!v3)
        goto LABEL_6;
    }
  }
  else
  {
    v4 = *(WTF::StringImpl ***)(this + 72);
  }
  v8 = *(_QWORD *)(this + 72) + 16 * v2;
LABEL_17:
  if (v4 == (WTF::StringImpl **)v8)
    goto LABEL_6;
  if (v4[1] != a2)
  {
    while (1)
    {
      v4 += 2;
      if (v4 == (WTF::StringImpl **)v8)
        break;
      if (*v4)
        goto LABEL_17;
    }
LABEL_6:
    v4 = (WTF::StringImpl **)MEMORY[0x1E0CBF6F0];
  }
  v5 = *v4;
  if (!v5)
    return this;
  v6 = *(_DWORD *)v5;
  v7 = *((_DWORD *)v5 + 1);
  *(_DWORD *)v5 += 2;
  v9 = v5;
  if (!v7)
  {
    v9 = 0;
    if (v6)
      goto LABEL_11;
    return WTF::StringImpl::destroy(v5, a2);
  }
  this = Inspector::AnimationFrontendDispatcher::targetChanged(*(Inspector::AnimationFrontendDispatcher **)(this + 40), (const WTF::String *)&v9);
  v5 = v9;
  v9 = 0;
  if (!v5)
    return this;
  v6 = *(_DWORD *)v5 - 2;
  if (*(_DWORD *)v5 == 2)
    return WTF::StringImpl::destroy(v5, a2);
LABEL_11:
  *(_DWORD *)v5 = v6;
  return this;
}

WTF::StringImpl *WebCore::buildObjectForEffect(WebCore *this, WebCore::AnimationEffect *a2)
{
  WTF::StringImpl *v4;
  double v5;
  double v6;
  WTF::JSONImpl::Value *v7;
  WTF::StringImpl *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  double v15;
  double v16;
  WTF::JSONImpl::Value *v17;
  WTF::StringImpl *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  double v25;
  WTF::JSONImpl::Value *v26;
  uint64_t *v27;
  WTF::StringImpl *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  double v35;
  WTF::JSONImpl::Value *v36;
  WTF::StringImpl *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  double v44;
  double v45;
  WTF::JSONImpl::Value *v46;
  WTF::StringImpl *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WebCore::TimingFunction *v54;
  const WTF::String *v55;
  WTF::StringImpl *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  unsigned int v64;
  Inspector::Protocol::Helpers *v65;
  const WTF::String *v66;
  WTF::StringImpl *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  unsigned int v75;
  Inspector::Protocol::Helpers *v76;
  const WTF::String *v77;
  WTF::StringImpl *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *result;
  uint64_t v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF::String *v94;
  __n128 v95;
  WTF::StringImpl *v96;
  const WTF::String *v97;
  uint64_t v98;
  WebCore::TimingFunction *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  void *v106;
  void *v107;
  void *v108;
  WTF::StringImpl **v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  int v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  int v115;
  char v116;
  WTF::StringImpl *v117;
  WebCore::AnimationEffect *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  unint64_t v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  uint64_t v127;
  WTF::StringImpl **v128;
  WTF::StringImpl *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int *v134;
  unsigned int *v135;
  uint64_t v136;
  BOOL v137;
  uint64_t v138;
  BOOL v139;
  uint64_t v140;
  int v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  Inspector::Protocol::Animation::Keyframe *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  void *v153;
  void *v154;
  Inspector::Protocol::Animation::Keyframe **v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  char v161;
  WTF::StringImpl *v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  _DWORD **v168;
  uint64_t v169;
  _DWORD *v170;
  _DWORD **v171;
  uint64_t v172;
  _DWORD *v173;
  _DWORD **v174;
  uint64_t v175;
  _DWORD *v176;
  _DWORD **v177;
  uint64_t v178;
  _DWORD *v179;
  _DWORD **v180;
  uint64_t v181;
  _DWORD *v182;
  _DWORD **v183;
  uint64_t v184;
  _DWORD *v185;
  _DWORD **v186;
  uint64_t v187;
  _DWORD *v188;
  _DWORD **v189;
  uint64_t v190;
  _DWORD *v191;
  _DWORD **v192;
  uint64_t v193;
  _DWORD *v194;
  uint64_t v195;
  WTF::StringImpl *v196;
  uint64_t *v197;
  WTF::StringImpl *v198;
  Inspector::Protocol::Animation::Keyframe *v199;
  WTF::StringImpl *v200;
  unint64_t v201;
  WTF::StringImpl *v202;
  int v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  unsigned int v206;
  char v207;
  WTF::StringImpl *v208;
  int v209;
  WTF::StringImpl *v210;
  unsigned __int8 v211;
  char v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl **v215;
  WTF::StringImpl *v216;
  WTF::StringImpl **v217;
  WTF::StringImpl **v218;
  WTF::StringImpl **v219;
  WTF::StringImpl **v220;

  WTF::JSONImpl::Object::create(this);
  v4 = v214;
  *(_QWORD *)this = v214;
  v5 = *((double *)a2 + 7);
  if (v5 != INFINITY)
  {
    v6 = v5 * 1000.0;
    v7 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v7, v6);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v4 + 2, &v204, (const WTF::StringImpl *)&v208, (uint64_t)&v214);
    if ((_BYTE)v216)
    {
      v9 = (uint64_t *)((char *)v4 + 24);
      v10 = *((unsigned int *)v4 + 9);
      if ((_DWORD)v10 == *((_DWORD *)v4 + 8))
      {
        v174 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v9, v10 + 1, (unint64_t)&v204);
        v10 = *((unsigned int *)v4 + 9);
        v175 = *((_QWORD *)v4 + 3);
        v176 = *v174;
        if (*v174)
          *v176 += 2;
        *(_QWORD *)(v175 + 8 * v10) = v176;
      }
      else
      {
        v11 = *v9;
        v12 = v204;
        if (v204)
          *(_DWORD *)v204 += 2;
        *(_QWORD *)(v11 + 8 * v10) = v12;
      }
      *((_DWORD *)v4 + 9) = v10 + 1;
    }
    v13 = v208;
    v208 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v13;
    }
    v14 = v204;
    v204 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v8);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  v15 = *((double *)a2 + 8);
  if (v15 != INFINITY)
  {
    v16 = v15 * 1000.0;
    v17 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v17, v16);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v4 + 2, &v204, (const WTF::StringImpl *)&v208, (uint64_t)&v214);
    if ((_BYTE)v216)
    {
      v19 = (uint64_t *)((char *)v4 + 24);
      v20 = *((unsigned int *)v4 + 9);
      if ((_DWORD)v20 == *((_DWORD *)v4 + 8))
      {
        v177 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)&v204);
        v20 = *((unsigned int *)v4 + 9);
        v178 = *((_QWORD *)v4 + 3);
        v179 = *v177;
        if (*v177)
          *v179 += 2;
        *(_QWORD *)(v178 + 8 * v20) = v179;
      }
      else
      {
        v21 = *v19;
        v22 = v204;
        if (v204)
          *(_DWORD *)v204 += 2;
        *(_QWORD *)(v21 + 8 * v20) = v22;
      }
      *((_DWORD *)v4 + 9) = v20 + 1;
    }
    v23 = v208;
    v208 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v23;
    }
    v24 = v204;
    v204 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v18);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  if (*((double *)a2 + 6) == INFINITY)
    v25 = -1.0;
  else
    v25 = *((double *)a2 + 6);
  v26 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v26, v25);
  v27 = (uint64_t *)((char *)v4 + 16);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v4 + 2, &v204, (const WTF::StringImpl *)&v208, (uint64_t)&v214);
  if ((_BYTE)v216)
  {
    v29 = (uint64_t *)((char *)v4 + 24);
    v30 = *((unsigned int *)v4 + 9);
    if ((_DWORD)v30 == *((_DWORD *)v4 + 8))
    {
      v168 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, v30 + 1, (unint64_t)&v204);
      v30 = *((unsigned int *)v4 + 9);
      v169 = *((_QWORD *)v4 + 3);
      v170 = *v168;
      if (*v168)
        *v170 += 2;
      *(_QWORD *)(v169 + 8 * v30) = v170;
    }
    else
    {
      v31 = *v29;
      v32 = v204;
      if (v204)
        *(_DWORD *)v204 += 2;
      *(_QWORD *)(v31 + 8 * v30) = v32;
    }
    *((_DWORD *)v4 + 9) = v30 + 1;
  }
  v33 = v208;
  v208 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v33;
  }
  v34 = v204;
  v204 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v28);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = *((double *)a2 + 5);
  v36 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v36, v35);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v4 + 2, &v204, (const WTF::StringImpl *)&v208, (uint64_t)&v214);
  if ((_BYTE)v216)
  {
    v38 = (uint64_t *)((char *)v4 + 24);
    v39 = *((unsigned int *)v4 + 9);
    if ((_DWORD)v39 == *((_DWORD *)v4 + 8))
    {
      v171 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v38, v39 + 1, (unint64_t)&v204);
      v39 = *((unsigned int *)v4 + 9);
      v172 = *((_QWORD *)v4 + 3);
      v173 = *v171;
      if (*v171)
        *v173 += 2;
      *(_QWORD *)(v172 + 8 * v39) = v173;
    }
    else
    {
      v40 = *v38;
      v41 = v204;
      if (v204)
        *(_DWORD *)v204 += 2;
      *(_QWORD *)(v40 + 8 * v39) = v41;
    }
    *((_DWORD *)v4 + 9) = v39 + 1;
  }
  v42 = v208;
  v208 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v42;
  }
  v43 = v204;
  v204 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v37);
    else
      *(_DWORD *)v43 -= 2;
  }
  v44 = *((double *)a2 + 9);
  if (v44 != INFINITY)
  {
    v45 = v44 * 1000.0;
    v46 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v46, v45);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v4 + 2, &v204, (const WTF::StringImpl *)&v208, (uint64_t)&v214);
    if ((_BYTE)v216)
    {
      v48 = (uint64_t *)((char *)v4 + 24);
      v49 = *((unsigned int *)v4 + 9);
      if ((_DWORD)v49 == *((_DWORD *)v4 + 8))
      {
        v180 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v48, v49 + 1, (unint64_t)&v204);
        v49 = *((unsigned int *)v4 + 9);
        v181 = *((_QWORD *)v4 + 3);
        v182 = *v180;
        if (*v180)
          *v182 += 2;
        *(_QWORD *)(v181 + 8 * v49) = v182;
      }
      else
      {
        v50 = *v48;
        v51 = v204;
        if (v204)
          *(_DWORD *)v204 += 2;
        *(_QWORD *)(v50 + 8 * v49) = v51;
      }
      *((_DWORD *)v4 + 9) = v49 + 1;
    }
    v52 = v208;
    v208 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v52;
    }
    v53 = v204;
    v204 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, v47);
      else
        *(_DWORD *)v53 -= 2;
    }
  }
  v54 = (WebCore::TimingFunction *)*((_QWORD *)a2 + 3);
  if (v54)
  {
    WebCore::TimingFunction::cssText(v54, &v202);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v202, v55);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v4 + 2, &v204, (const WTF::StringImpl *)&v208, (uint64_t)&v214);
    if ((_BYTE)v216)
    {
      v57 = (uint64_t *)((char *)v4 + 24);
      v58 = *((unsigned int *)v4 + 9);
      if ((_DWORD)v58 == *((_DWORD *)v4 + 8))
      {
        v183 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v57, v58 + 1, (unint64_t)&v204);
        v58 = *((unsigned int *)v4 + 9);
        v184 = *((_QWORD *)v4 + 3);
        v185 = *v183;
        if (*v183)
          *v185 += 2;
        *(_QWORD *)(v184 + 8 * v58) = v185;
      }
      else
      {
        v59 = *v57;
        v60 = v204;
        if (v204)
          *(_DWORD *)v204 += 2;
        *(_QWORD *)(v59 + 8 * v58) = v60;
      }
      *((_DWORD *)v4 + 9) = v58 + 1;
    }
    v61 = v208;
    v208 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v61;
    }
    v62 = v204;
    v204 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
        WTF::StringImpl::destroy(v62, v56);
      else
        *(_DWORD *)v62 -= 2;
    }
    v63 = v202;
    v202 = 0;
    if (v63)
    {
      if (*(_DWORD *)v63 == 2)
        WTF::StringImpl::destroy(v63, v56);
      else
        *(_DWORD *)v63 -= 2;
    }
  }
  v64 = *((unsigned __int8 *)a2 + 33);
  if (v64 <= 3)
  {
    v65 = (Inspector::Protocol::Helpers *)(v64 + 5);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::Protocol::Helpers::getEnumConstantValue(v65);
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v202, v66);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v4 + 2, &v204, (const WTF::StringImpl *)&v208, (uint64_t)&v214);
    if ((_BYTE)v216)
    {
      v68 = (uint64_t *)((char *)v4 + 24);
      v69 = *((unsigned int *)v4 + 9);
      if ((_DWORD)v69 == *((_DWORD *)v4 + 8))
      {
        v186 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v68, v69 + 1, (unint64_t)&v204);
        v69 = *((unsigned int *)v4 + 9);
        v187 = *((_QWORD *)v4 + 3);
        v188 = *v186;
        if (*v186)
          *v188 += 2;
        *(_QWORD *)(v187 + 8 * v69) = v188;
      }
      else
      {
        v70 = *v68;
        v71 = v204;
        if (v204)
          *(_DWORD *)v204 += 2;
        *(_QWORD *)(v70 + 8 * v69) = v71;
      }
      *((_DWORD *)v4 + 9) = v69 + 1;
    }
    v72 = v208;
    v208 = 0;
    if (v72)
    {
      if (*(_DWORD *)v72 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v72;
    }
    v73 = v202;
    v202 = 0;
    if (v73)
    {
      if (*(_DWORD *)v73 == 2)
        WTF::StringImpl::destroy(v73, v67);
      else
        *(_DWORD *)v73 -= 2;
    }
    v74 = v204;
    v204 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
        WTF::StringImpl::destroy(v74, v67);
      else
        *(_DWORD *)v74 -= 2;
    }
  }
  v75 = *((unsigned __int8 *)a2 + 32);
  if (v75 <= 4)
  {
    v76 = (Inspector::Protocol::Helpers *)(v75 + 9);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::Protocol::Helpers::getEnumConstantValue(v76);
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v202, v77);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v4 + 2, &v204, (const WTF::StringImpl *)&v208, (uint64_t)&v214);
    if ((_BYTE)v216)
    {
      v79 = (uint64_t *)((char *)v4 + 24);
      v80 = *((unsigned int *)v4 + 9);
      if ((_DWORD)v80 == *((_DWORD *)v4 + 8))
      {
        v189 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v79, v80 + 1, (unint64_t)&v204);
        v80 = *((unsigned int *)v4 + 9);
        v190 = *((_QWORD *)v4 + 3);
        v191 = *v189;
        if (*v189)
          *v191 += 2;
        *(_QWORD *)(v190 + 8 * v80) = v191;
      }
      else
      {
        v81 = *v79;
        v82 = v204;
        if (v204)
          *(_DWORD *)v204 += 2;
        *(_QWORD *)(v81 + 8 * v80) = v82;
      }
      *((_DWORD *)v4 + 9) = v80 + 1;
    }
    v83 = v208;
    v208 = 0;
    if (v83)
    {
      if (*(_DWORD *)v83 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v83;
    }
    v84 = v202;
    v202 = 0;
    if (v84)
    {
      if (*(_DWORD *)v84 == 2)
        WTF::StringImpl::destroy(v84, v78);
      else
        *(_DWORD *)v84 -= 2;
    }
    v85 = v204;
    v204 = 0;
    if (v85)
    {
      if (*(_DWORD *)v85 == 2)
        WTF::StringImpl::destroy(v85, v78);
      else
        *(_DWORD *)v85 -= 2;
    }
  }
  result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::AnimationEffect *))(*(_QWORD *)a2 + 24))(a2);
  if ((_DWORD)result)
  {
    v87 = WTF::fastMalloc((WTF *)0x20);
    v88 = (WTF::StringImpl *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v87);
    v89 = *((_QWORD *)a2 + 12);
    if (v89
      && (v90 = *(_QWORD *)(v89 + 8)) != 0
      && (v88 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 104))(v90), (_DWORD)v88))
    {
      v111 = (WTF::StringImpl *)*((_QWORD *)a2 + 33);
      if (!v111)
        goto LABEL_361;
      if (*((_BYTE *)a2 + 288))
      {
        v112 = *((_DWORD *)a2 + 68);
        v113 = (WTF::StringImpl *)*((_QWORD *)a2 + 35);
        if (v113)
          *(_DWORD *)v113 += 2;
        v214 = v111;
        LODWORD(v215) = v112;
        v216 = v113;
        LOBYTE(v217) = 1;
      }
      else
      {
        v214 = (WTF::StringImpl *)*((_QWORD *)a2 + 33);
        LOBYTE(v215) = 0;
        LOBYTE(v217) = 0;
      }
      LOBYTE(v218) = 1;
      v88 = (WTF::StringImpl *)WebCore::Styleable::renderer((WebCore::Styleable *)&v214);
      v114 = v88;
      if ((_BYTE)v218)
      {
        if ((_BYTE)v217)
        {
          v88 = v216;
          v216 = 0;
          if (v88)
          {
            if (*(_DWORD *)v88 == 2)
              v88 = (WTF::StringImpl *)WTF::StringImpl::destroy(v88, v110);
            else
              *(_DWORD *)v88 -= 2;
          }
        }
      }
LABEL_180:
      v213 = v114;
      v197 = v27;
      v198 = v4;
      if ((~*((unsigned __int16 *)v111 + 14) & 0x408) != 0
        || (v88 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v111 + 368))(v111),
            !(_DWORD)v88))
      {
        v115 = 0;
        *((_DWORD *)v111 + 6) += 2;
        v208 = v111;
        LOBYTE(v209) = 0;
        v211 = 0;
        v116 = 1;
      }
      else
      {
        if ((~*((unsigned __int16 *)v111 + 14) & 0x408) != 0)
          v88 = 0;
        else
          v88 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v111 + 368))(v111);
        v117 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
        if (*MEMORY[0x1E0CBF2F8])
          *(_DWORD *)v117 += 2;
        *((_DWORD *)v111 + 6) += 2;
        v208 = v111;
        v209 = (int)v88;
        if (v117)
          *(_DWORD *)v117 += 2;
        v116 = 0;
        v196 = v117;
        v210 = v117;
        v115 = 1;
        v211 = 1;
      }
      v118 = a2;
      v212 = 0;
      if (*((_DWORD *)a2 + 39))
      {
        v195 = v90;
        v119 = 0;
        v27 = (uint64_t *)&v208;
        while (1)
        {
          v120 = *((_QWORD *)v118 + 18);
          v121 = v120 + 48 * v119;
          v122 = *(WTF::StringImpl **)(v121 + 24);
          WTF::JSONImpl::Object::create(v88);
          v204 = v214;
          Inspector::Protocol::Animation::Keyframe::Builder<0>::setOffset((uint64_t *)&v204, *(double *)(v121 + 8));
          v123 = v204;
          v124 = *((unsigned int *)v118 + 61);
          if ((_DWORD)v124)
          {
            if (v119 >= v124)
            {
              __break(0xC471u);
              JUMPOUT(0x195E001C8);
            }
            v125 = *(WTF::StringImpl **)(*((_QWORD *)v118 + 29) + (v119 << 6) + 48);
            if (v125)
              goto LABEL_197;
          }
          v125 = *(WTF::StringImpl **)(v120 + 48 * v119 + 32);
          if (v125 || (v125 = *(WTF::StringImpl **)(*(_QWORD *)(v195 + 216) + 96)) != 0)
          {
LABEL_197:
            ++*((_DWORD *)v125 + 2);
            v200 = v125;
            WebCore::TimingFunction::cssText(v125, &v214);
            Inspector::Protocol::Animation::Keyframe::setEasing(v123, (const WTF::String *)&v214);
            v126 = v214;
            v214 = 0;
            if (v126)
            {
              if (*(_DWORD *)v126 == 2)
                WTF::StringImpl::destroy(v126, v110);
              else
                *(_DWORD *)v126 -= 2;
            }
          }
          else
          {
            v200 = 0;
          }
          v204 = 0;
          v205 = 0;
          v206 = 0;
          v207 = 1;
          v201 = v119;
          v127 = v120 + 48 * v119;
          v129 = *(WTF::StringImpl **)(v127 + 16);
          v128 = (WTF::StringImpl **)(v127 + 16);
          v4 = v129;
          v199 = v123;
          if (!v129)
            break;
          v90 = *((unsigned int *)v4 - 3);
          v130 = *((unsigned int *)v4 - 1);
          v111 = (WTF::StringImpl *)((char *)v4 + 16 * v130);
          if (!(_DWORD)v90)
          {
            v134 = (unsigned int *)((char *)v4 + 16 * v130);
LABEL_215:
            v90 = 0;
            v111 = (WTF::StringImpl *)((char *)v4 + 16 * v130);
            if (v4)
              goto LABEL_218;
            goto LABEL_220;
          }
          if ((_DWORD)v130)
          {
            v131 = 16 * v130;
            while (1)
            {
              v132 = *((unsigned int *)v4 + 2);
              if ((_DWORD)v132 || *(_WORD *)v4 != 0)
              {
                if ((_DWORD)v132 == -1)
                  goto LABEL_360;
                v214 = (WTF::StringImpl *)&v202;
                if (!((unsigned int (*)(WTF::StringImpl **, WTF::StringImpl *))off_1E33EF750[v132])(&v214, v4))break;
              }
              v4 = (WTF::StringImpl *)((char *)v4 + 16);
              v131 -= 16;
              if (!v131)
              {
                v4 = v111;
                break;
              }
            }
            v134 = (unsigned int *)v4;
            v4 = *v128;
            if (*v128)
            {
LABEL_218:
              v135 = (unsigned int *)((char *)v4 + 16 * *((unsigned int *)v4 - 1));
              goto LABEL_221;
            }
          }
          else
          {
            v134 = (unsigned int *)v4;
            if (v4)
              goto LABEL_218;
          }
LABEL_220:
          v135 = 0;
LABEL_221:
          if (v135 != v134)
          {
            while (1)
            {
              LOBYTE(v202) = 0;
              v203 = -1;
              v4 = (WTF::StringImpl *)v134[2];
              if ((_DWORD)v4 != -1)
              {
                ((void (*)(WTF::StringImpl **, WTF::StringImpl **, unsigned int *))off_1E33EF770[(_QWORD)v4])(&v214, &v202, v134);
                v203 = (int)v4;
              }
              v214 = (WTF::StringImpl *)&v204;
              v215 = &v208;
              v216 = v122;
              v217 = &v213;
              v218 = &v204;
              v219 = &v208;
              if ((_DWORD)v4 == -1)
                break;
              v220 = &v214;
              ((void (*)(WTF::StringImpl ***, WTF::StringImpl **))off_1E33EF780[(_QWORD)v4])(&v220, &v202);
              LOBYTE(v214) = 59;
              if (v205 && ((v136 = v206, v206 < *((_DWORD *)v205 + 1)) ? (v137 = v204 == 0) : (v137 = 0), v137))
              {
                v142 = *((_DWORD *)v205 + 4);
                v143 = *((_QWORD *)v205 + 1);
                ++v206;
                if ((v142 & 4) != 0)
                  *(_BYTE *)(v143 + v136) = 59;
                else
                  *(_WORD *)(v143 + 2 * v136) = 59;
              }
              else
              {
                WTF::StringBuilder::append();
              }
              if (--v90)
              {
                LOBYTE(v214) = 32;
                if (v205 && ((v138 = v206, v206 < *((_DWORD *)v205 + 1)) ? (v139 = v204 == 0) : (v139 = 0), v139))
                {
                  v144 = *((_DWORD *)v205 + 4);
                  v145 = *((_QWORD *)v205 + 1);
                  ++v206;
                  if ((v144 & 4) != 0)
                    *(_BYTE *)(v145 + v138) = 32;
                  else
                    *(_WORD *)(v145 + 2 * v138) = 32;
                }
                else
                {
                  WTF::StringBuilder::append();
                }
              }
              if (v203 != -1)
                ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33EF760[v203])(&v214, &v202);
              v4 = (WTF::StringImpl *)(v134 + 4);
              v134 = (unsigned int *)v111;
              if (v4 != v111)
              {
                v134 = (unsigned int *)v111;
                while (1)
                {
                  v140 = *((unsigned int *)v4 + 2);
                  if ((_DWORD)v140 || *(_WORD *)v4 != 0)
                  {
                    if ((_DWORD)v140 == -1)
                      goto LABEL_360;
                    v214 = (WTF::StringImpl *)&v202;
                    v134 = (unsigned int *)v111;
                    if (!((unsigned int (*)(WTF::StringImpl **, WTF::StringImpl *))off_1E33EF750[v140])(&v214, v4))break;
                  }
                  v4 = (WTF::StringImpl *)((char *)v4 + 16);
                  if (v4 == (WTF::StringImpl *)v134)
                    goto LABEL_252;
                }
                v134 = (unsigned int *)v4;
              }
LABEL_252:
              if (v134 == v135)
                goto LABEL_260;
            }
LABEL_360:
            v88 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_361:
            v114 = 0;
            goto LABEL_180;
          }
LABEL_260:
          v118 = a2;
          v146 = v199;
          if (v206)
          {
            v147 = v204;
            if (v204
              || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v204),
                  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v204),
                  (v147 = v204) != 0))
            {
              *(_DWORD *)v147 += 2;
            }
            v214 = v147;
            Inspector::Protocol::Animation::Keyframe::setStyle(v199, (const WTF::String *)&v214);
            v148 = v214;
            v214 = 0;
            if (v148)
            {
              if (*(_DWORD *)v148 == 2)
                WTF::StringImpl::destroy(v148, v110);
              else
                *(_DWORD *)v148 -= 2;
            }
          }
          v149 = *(unsigned int *)(v87 + 28);
          if ((_DWORD)v149 == *(_DWORD *)(v87 + 24))
          {
            v150 = v149 + (v149 >> 2);
            if (v150 >= 0x10)
              v151 = v150 + 1;
            else
              v151 = 16;
            if (v151 <= v149 + 1)
              v152 = v149 + 1;
            else
              v152 = v151;
            if (v152 >> 29)
              goto LABEL_364;
            v153 = *(void **)(v87 + 16);
            v154 = (void *)WTF::fastMalloc((WTF *)(8 * v152));
            *(_DWORD *)(v87 + 24) = v152;
            *(_QWORD *)(v87 + 16) = v154;
            memcpy(v154, v153, 8 * v149);
            if (v153)
            {
              if (*(void **)(v87 + 16) == v153)
              {
                *(_QWORD *)(v87 + 16) = 0;
                *(_DWORD *)(v87 + 24) = 0;
              }
              WTF::fastFree((WTF *)v153, v110);
            }
            v149 = *(unsigned int *)(v87 + 28);
            v155 = (Inspector::Protocol::Animation::Keyframe **)(*(_QWORD *)(v87 + 16) + 8 * v149);
            v146 = v199;
          }
          else
          {
            v155 = (Inspector::Protocol::Animation::Keyframe **)(*(_QWORD *)(v87 + 16) + 8 * v149);
          }
          *v155 = v146;
          *(_DWORD *)(v87 + 28) = v149 + 1;
          v156 = v205;
          v205 = 0;
          if (v156)
          {
            if (*(_DWORD *)v156 == 2)
              WTF::StringImpl::destroy(v156, v110);
            else
              *(_DWORD *)v156 -= 2;
          }
          v157 = v204;
          v204 = 0;
          if (v157)
          {
            if (*(_DWORD *)v157 == 2)
              WTF::StringImpl::destroy(v157, v110);
            else
              *(_DWORD *)v157 -= 2;
          }
          v88 = v200;
          if (v200)
          {
            if (*((_DWORD *)v200 + 2) == 1)
              v88 = (WTF::StringImpl *)(*(uint64_t (**)(void))(*(_QWORD *)v200 + 16))();
            else
              --*((_DWORD *)v200 + 2);
          }
          v119 = v201 + 1;
          if (v201 + 1 >= *((unsigned int *)a2 + 39))
          {
            v115 = v211;
            goto LABEL_300;
          }
        }
        v134 = 0;
        v130 = 0;
        goto LABEL_215;
      }
LABEL_300:
      v27 = v197;
      v4 = v198;
      if (v115)
      {
        v158 = v210;
        v210 = 0;
        if (v158)
        {
          if (*(_DWORD *)v158 == 2)
            WTF::StringImpl::destroy(v158, v110);
          else
            *(_DWORD *)v158 -= 2;
        }
      }
      v159 = v208;
      v208 = 0;
      v160 = v196;
      if (v159)
      {
        if (*((_DWORD *)v159 + 6) == 2)
        {
          if ((*((_WORD *)v159 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v159);
            v160 = v196;
          }
        }
        else
        {
          *((_DWORD *)v159 + 6) -= 2;
        }
      }
      if (v160)
        v161 = v116;
      else
        v161 = 1;
      if ((v161 & 1) == 0)
      {
        if (*(_DWORD *)v160 == 2)
          WTF::StringImpl::destroy(v160, v110);
        else
          *(_DWORD *)v160 -= 2;
      }
    }
    else
    {
      v91 = *((unsigned int *)a2 + 61);
      if ((_DWORD)v91)
      {
        v92 = v91 << 6;
        v93 = *((_QWORD *)a2 + 29) + 56;
        do
        {
          WTF::JSONImpl::Object::create(v88);
          v208 = v214;
          Inspector::Protocol::Animation::Keyframe::Builder<0>::setOffset((uint64_t *)&v208, *(double *)(v93 - 32));
          v96 = v208;
          v97 = (const WTF::String *)(v93 - 48);
          v98 = *(_QWORD *)(v93 - 48);
          if (v98 && *(_DWORD *)(v98 + 4))
          {
            Inspector::Protocol::Animation::Keyframe::setEasing(v208, v97);
          }
          else
          {
            v99 = *(WebCore::TimingFunction **)(v93 - 8);
            if (v99)
            {
              WebCore::TimingFunction::cssText(v99, &v214);
              Inspector::Protocol::Animation::Keyframe::setEasing(v96, (const WTF::String *)&v214);
              v100 = v214;
              v214 = 0;
              if (v100)
              {
                if (*(_DWORD *)v100 == 2)
                  WTF::StringImpl::destroy(v100, v97);
                else
                  *(_DWORD *)v100 -= 2;
              }
            }
          }
          v88 = *(WTF::StringImpl **)v93;
          if (*(_DWORD *)(*(_QWORD *)v93 + 28))
          {
            WebCore::StyleProperties::asText(v88, (unsigned __int8 *)v97, v94, &v214, v95);
            Inspector::Protocol::Animation::Keyframe::setStyle(v96, (const WTF::String *)&v214);
            v88 = v214;
            v214 = 0;
            if (v88)
            {
              if (*(_DWORD *)v88 == 2)
                v88 = (WTF::StringImpl *)WTF::StringImpl::destroy(v88, v101);
              else
                *(_DWORD *)v88 -= 2;
            }
          }
          v102 = *(unsigned int *)(v87 + 28);
          if ((_DWORD)v102 == *(_DWORD *)(v87 + 24))
          {
            v103 = v102 + (v102 >> 2);
            if (v103 >= 0x10)
              v104 = v103 + 1;
            else
              v104 = 16;
            if (v104 <= v102 + 1)
              v105 = v102 + 1;
            else
              v105 = v104;
            if (v105 >> 29)
            {
LABEL_364:
              __break(0xC471u);
              JUMPOUT(0x195E001C0);
            }
            v106 = *(void **)(v87 + 16);
            v107 = (void *)WTF::fastMalloc((WTF *)(8 * v105));
            *(_DWORD *)(v87 + 24) = v105;
            *(_QWORD *)(v87 + 16) = v107;
            v88 = (WTF::StringImpl *)memcpy(v107, v106, 8 * v102);
            if (v106)
            {
              if (*(void **)(v87 + 16) == v106)
              {
                *(_QWORD *)(v87 + 16) = 0;
                *(_DWORD *)(v87 + 24) = 0;
              }
              v88 = (WTF::StringImpl *)WTF::fastFree((WTF *)v106, v108);
            }
            v102 = *(unsigned int *)(v87 + 28);
            v109 = (WTF::StringImpl **)(*(_QWORD *)(v87 + 16) + 8 * v102);
          }
          else
          {
            v109 = (WTF::StringImpl **)(*(_QWORD *)(v87 + 16) + 8 * v102);
          }
          *v109 = v96;
          *(_DWORD *)(v87 + 28) = v102 + 1;
          v93 += 64;
          v92 -= 64;
        }
        while (v92);
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v204 = (WTF::StringImpl *)v87;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v27, &v208, (const WTF::StringImpl *)&v204, (uint64_t)&v214);
    if ((_BYTE)v216)
    {
      v163 = (uint64_t *)((char *)v4 + 24);
      v164 = *((unsigned int *)v4 + 9);
      if ((_DWORD)v164 == *((_DWORD *)v4 + 8))
      {
        v192 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v163, v164 + 1, (unint64_t)&v208);
        v164 = *((unsigned int *)v4 + 9);
        v193 = *((_QWORD *)v4 + 3);
        v194 = *v192;
        if (*v192)
          *v194 += 2;
        *(_QWORD *)(v193 + 8 * v164) = v194;
      }
      else
      {
        v165 = *v163;
        v166 = v208;
        if (v208)
          *(_DWORD *)v208 += 2;
        *(_QWORD *)(v165 + 8 * v164) = v166;
      }
      *((_DWORD *)v4 + 9) = v164 + 1;
    }
    v167 = v204;
    v204 = 0;
    if (v167)
    {
      if (*(_DWORD *)v167 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v167;
    }
    result = v208;
    v208 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v162);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

double WebCore::InspectorAnimationAgent::didCreateWebAnimation(WebCore::InspectorAnimationAgent *this, WebCore::WebAnimation *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  void *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  int i;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  WTF *v43;
  double result;
  _DWORD *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  WTF::MonotonicTime *v53;
  double v54;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF *v58;
  uint64_t v59;
  WTF *v60;
  WTF::MonotonicTime *v61;
  uint64_t v62;

  if (*((_DWORD *)this + 21))
  {
    v4 = *((unsigned int *)this + 20);
    if ((_DWORD)v4)
    {
      v5 = 16 * v4;
      v6 = *((_QWORD *)this + 9);
      while (!*(_QWORD *)v6)
      {
        v6 += 16;
        v5 -= 16;
        if (!v5)
          goto LABEL_6;
      }
    }
    else
    {
      v6 = *((_QWORD *)this + 9);
    }
    v37 = *((_QWORD *)this + 9) + 16 * v4;
LABEL_37:
    if (v6 != v37)
    {
      if (*(WebCore::WebAnimation **)(v6 + 8) == a2)
        goto LABEL_7;
      while (1)
      {
        v6 += 16;
        if (v6 == v37)
          break;
        if (*(_QWORD *)v6)
          goto LABEL_37;
      }
    }
  }
LABEL_6:
  v6 = MEMORY[0x1E0CBF6F0];
LABEL_7:
  v7 = *(_QWORD *)v6;
  if (*(_QWORD *)v6)
  {
    v8 = *(_DWORD *)v7;
    v9 = *(_DWORD *)(v7 + 4);
    *(_DWORD *)v7 += 2;
    if (v8)
    {
      *(_DWORD *)v7 = v8;
      if (v9)
        return result;
    }
    else
    {
      v7 = WTF::StringImpl::destroy((WTF::StringImpl *)v7, a2);
      if (v9)
        return result;
    }
  }
  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v10 || (v7 = *(_QWORD *)(v10 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow((WebCore *)v7);
  v11 = (uint64_t *)((char *)this + 96);
  Inspector::createScriptCallStack(*(Inspector **)(v7 + 64), (JSC::JSGlobalObject *)0xC8);
  Inspector::ScriptCallStack::buildInspectorObject(v61);
  v13 = *((_DWORD *)this + 26);
  v14 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 26) = v13 + 1;
  if (v13 > v14)
    WTF::WeakHashMap<WebCore::WebAnimation,WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences((uint64_t)this + 96, v12);
  if ((*((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v15 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v15 = 1;
    *(_QWORD *)(v15 + 16) = 0;
    *(_QWORD *)(v15 + 24) = 0;
    *(_QWORD *)(v15 + 8) = a2;
    *(_BYTE *)(v15 + 32) = 0;
    v16 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v16 & 0xFFFF000000000000 | v15;
    v17 = v16 & 0xFFFFFFFFFFFFLL;
    if ((v16 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v18 = __ldaxr((unsigned int *)v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, (unsigned int *)v17));
      if (!v19)
      {
        atomic_store(1u, (unsigned int *)v17);
        v59 = *(unsigned int *)(v17 + 28);
        if ((_DWORD)v59)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v17 + 16), (WTF::StringImpl *)(*(_QWORD *)(v17 + 16) + 32 * v59));
        v60 = *(WTF **)(v17 + 16);
        if (v60)
        {
          *(_QWORD *)(v17 + 16) = 0;
          *(_DWORD *)(v17 + 24) = 0;
          WTF::fastFree(v60, v12);
        }
        WTF::fastFree((WTF *)v17, v12);
      }
    }
  }
  v20 = *((_QWORD *)a2 + 2);
  v21 = v20 & 0xFFFFFFFFFFFFLL;
  do
    v22 = __ldaxr((unsigned int *)v21);
  while (__stlxr(v22 + 1, (unsigned int *)v21));
  do
    v23 = __ldaxr((unsigned int *)v21);
  while (__stlxr(v23 + 1, (unsigned int *)v21));
  if (v21)
  {
    do
    {
      v24 = __ldaxr((unsigned int *)v21);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, (unsigned int *)v21));
    if (!v25)
    {
      atomic_store(1u, (unsigned int *)v21);
      v57 = *(unsigned int *)((v20 & 0xFFFFFFFFFFFFLL) + 0x1C);
      if ((_DWORD)v57)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)((v20 & 0xFFFFFFFFFFFFLL) + 0x10), (WTF::StringImpl *)(*(_QWORD *)((v20 & 0xFFFFFFFFFFFFLL) + 0x10) + 32 * v57));
      v58 = *(WTF **)((v20 & 0xFFFFFFFFFFFFLL) + 0x10);
      if (v58)
      {
        *(_QWORD *)((v20 & 0xFFFFFFFFFFFFLL) + 0x10) = 0;
        *(_DWORD *)((v20 & 0xFFFFFFFFFFFFLL) + 0x18) = 0;
        WTF::fastFree(v58, v12);
      }
      WTF::fastFree((WTF *)(v20 & 0xFFFFFFFFFFFFLL), v12);
    }
  }
  v26 = *v11;
  if (*v11
    || (WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)this + 12, 8u), (v26 = *v11) != 0))
  {
    v27 = *(_DWORD *)(v26 - 8);
  }
  else
  {
    v27 = 0;
  }
  v28 = 0;
  v29 = (v21 + ~(v20 << 32)) ^ ((unint64_t)(v21 + ~(v20 << 32)) >> 22);
  v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
  v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
  v32 = (v31 >> 31) ^ v31;
  for (i = 1; ; ++i)
  {
    v34 = v32 & v27;
    v35 = (uint64_t *)(v26 + 16 * v34);
    v36 = *v35;
    if (*v35 != -1)
      break;
    v28 = (uint64_t *)(v26 + 16 * v34);
LABEL_34:
    v32 = i + v34;
  }
  if (!v36)
  {
    if (v28)
    {
      *v28 = 0;
      v28[1] = 0;
      --*(_DWORD *)(*v11 - 16);
      *v28 = v21;
      v35 = v28;
    }
    else
    {
      *v35 = v21;
    }
    v45 = (_DWORD *)v35[1];
    v35[1] = v62;
    if (v45)
    {
      if (*v45 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v45;
    }
    v46 = *v11;
    if (*v11)
      v47 = *(_DWORD *)(v46 - 12) + 1;
    else
      v47 = 1;
    *(_DWORD *)(v46 - 12) = v47;
    v48 = *v11;
    if (*v11)
      v49 = *(_DWORD *)(v48 - 12);
    else
      v49 = 0;
    v50 = (*(_DWORD *)(v48 - 16) + v49);
    v51 = *(unsigned int *)(v48 - 4);
    if (v51 > 0x400)
    {
      if (v51 > 2 * v50)
        goto LABEL_74;
    }
    else
    {
      if (3 * v51 > 4 * v50)
        goto LABEL_74;
      if (!(_DWORD)v51)
      {
        v52 = 8;
        goto LABEL_73;
      }
    }
    v52 = (_DWORD)v51 << (6 * *(_DWORD *)(v48 - 12) >= (2 * v51));
LABEL_73:
    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)this + 12, v52);
    goto LABEL_74;
  }
  if (v36 != v21)
    goto LABEL_34;
  v38 = v26 + 16 * v34;
  v39 = *(_DWORD **)(v38 + 8);
  *(_QWORD *)(v38 + 8) = v62;
  if (!v39)
  {
LABEL_47:
    if (!v21)
      goto LABEL_74;
    do
    {
LABEL_48:
      v40 = __ldaxr((unsigned int *)v21);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, (unsigned int *)v21));
    if (!v41)
    {
      atomic_store(1u, (unsigned int *)v21);
      v42 = *(unsigned int *)(v21 + 28);
      if ((_DWORD)v42)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v21 + 16), (WTF::StringImpl *)(*(_QWORD *)(v21 + 16) + 32 * v42));
      v43 = *(WTF **)(v21 + 16);
      if (v43)
      {
        *(_QWORD *)(v21 + 16) = 0;
        *(_DWORD *)(v21 + 24) = 0;
        WTF::fastFree(v43, v12);
      }
      WTF::fastFree((WTF *)v21, v12);
    }
    goto LABEL_74;
  }
  if (*v39 != 1)
  {
    --*v39;
    goto LABEL_47;
  }
  WTF::JSONImpl::Value::operator delete();
  if (v21)
    goto LABEL_48;
LABEL_74:
  v53 = v61;
  if (v61)
  {
    if (*(_DWORD *)v61 == 1)
    {
      v55 = (WTF *)MEMORY[0x19AEA6024](v61, v12);
      v53 = (WTF::MonotonicTime *)WTF::fastFree(v55, v56);
    }
    else
    {
      --*(_DWORD *)v61;
    }
  }
  if ((*((_QWORD *)this + 18) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*((_QWORD *)this + 18) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    *((_QWORD *)this + 17) = 0;
    WTF::MonotonicTime::now(v53);
    WebCore::TimerBase::setNextFireTime((uint64_t)this + 112, v54 + 0.0);
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorAnimationAgent::willDestroyWebAnimation(WTF::StringImpl ***this, WebCore::WebAnimation *a2)
{
  WTF::StringImpl *v4;
  const WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *result;
  int v10;
  int v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  if ((*(unsigned int (**)(WebCore::WebAnimation *))(*(_QWORD *)a2 + 104))(a2))
    WebCore::InspectorAnimationAgent::stopTrackingStyleOriginatedAnimation((WebCore::InspectorAnimationAgent *)this, a2);
  if (!*((_DWORD *)this + 21))
    goto LABEL_8;
  v6 = *((unsigned int *)this + 20);
  if ((_DWORD)v6)
  {
    v7 = 16 * v6;
    v8 = this[9];
    while (!*v8)
    {
      v8 += 2;
      v7 -= 16;
      if (!v7)
        goto LABEL_8;
    }
  }
  else
  {
    v8 = this[9];
  }
  v12 = (uint64_t)&this[9][2 * v6];
LABEL_19:
  if (v8 == (WTF::StringImpl **)v12)
    goto LABEL_8;
  if (v8[1] != a2)
  {
    while (1)
    {
      v8 += 2;
      if (v8 == (WTF::StringImpl **)v12)
        break;
      if (*v8)
        goto LABEL_19;
    }
LABEL_8:
    v8 = (WTF::StringImpl **)MEMORY[0x1E0CBF6F0];
  }
  result = *v8;
  if (!*v8)
    return result;
  v10 = *(_DWORD *)result;
  v11 = *((_DWORD *)result + 1);
  *(_DWORD *)result += 2;
  v13 = result;
  if (!v11)
  {
    v13 = 0;
    if (v10)
      goto LABEL_13;
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
  }
  WebCore::InspectorAnimationAgent::unbindAnimation((WebCore::InspectorAnimationAgent *)this, &v13, v5);
  result = v13;
  v13 = 0;
  if (!result)
    return result;
  v10 = *(_DWORD *)result - 2;
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
LABEL_13:
  *(_DWORD *)result = v10;
  return result;
}

double WebCore::InspectorAnimationAgent::unbindAnimation(WebCore::InspectorAnimationAgent *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  char *v5;
  WTF::StringImpl **v6;
  WTF::MonotonicTime *v7;
  uint64_t v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  double v11;
  double result;
  uint64_t v13;
  _DWORD *v14;

  v5 = (char *)this + 72;
  v6 = (WTF::StringImpl **)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 9, a2, a3);
  if ((WTF::StringImpl **)(*((_QWORD *)this + 9) + 16 * *((unsigned int *)this + 20)) != v6)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::WebAnimation *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::WebAnimation *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::WebAnimation *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::WebAnimation *>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove((uint64_t)v5, v6);
  v7 = (WebCore::InspectorAnimationAgent *)((char *)this + 168);
  v8 = *((unsigned int *)this + 45);
  if ((_DWORD)v8 == *((_DWORD *)this + 44))
  {
    v7 = (WTF::MonotonicTime *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)a2);
    v8 = *((unsigned int *)this + 45);
    v13 = *((_QWORD *)this + 21);
    v14 = *(_DWORD **)v7;
    if (*(_QWORD *)v7)
      *v14 += 2;
    *(_QWORD *)(v13 + 8 * v8) = v14;
  }
  else
  {
    v9 = *(_DWORD **)v7;
    v10 = *a2;
    if (*a2)
      *(_DWORD *)v10 += 2;
    *(_QWORD *)&v9[2 * v8] = v10;
  }
  *((_DWORD *)this + 45) = v8 + 1;
  if ((*((_QWORD *)this + 27) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*((_QWORD *)this + 27) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    *((_QWORD *)this + 26) = 0;
    WTF::MonotonicTime::now(v7);
    WebCore::TimerBase::setNextFireTime((uint64_t)this + 184, v11 + 0.0);
  }
  return result;
}

void WebCore::InspectorAnimationAgent::frameNavigated(WebCore::InspectorAnimationAgent *this, WebCore::LocalFrame *a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD **v15;
  uint64_t v16;
  WTF *v17;
  _DWORD *v18;
  WTF *v19;
  _DWORD *v20;
  int v21;
  WTF::StringImpl **v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF *v26;
  uint64_t v27;

  if (*(WebCore::LocalFrame **)(*((_QWORD *)a2 + 16) + 8) == a2)
  {
    WebCore::InspectorAnimationAgent::reset(this, a2);
    return;
  }
  v26 = 0;
  v27 = 0;
  if (*((_DWORD *)this + 21))
  {
    v5 = *((unsigned int *)this + 20);
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      for (i = (_QWORD *)*((_QWORD *)this + 9); !*i; i += 2)
      {
        v6 -= 16;
        if (!v6)
          return;
      }
    }
    else
    {
      i = (_QWORD *)*((_QWORD *)this + 9);
    }
    v8 = *((_QWORD *)this + 9) + 16 * v5;
    if (i != (_QWORD *)v8)
    {
LABEL_11:
      v9 = *(_QWORD *)(i[1] + 40);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          if (!*(_BYTE *)(v10 + 178))
          {
            v11 = (int *)(v10 - 264);
            v12 = *(_DWORD *)(v10 - 264) + 2;
            *(_DWORD *)(v10 - 264) = v12;
            v13 = *(_QWORD *)(v10 + 240);
            if (v13 && *(WebCore::LocalFrame **)(v13 + 8) == a2)
            {
              v14 = HIDWORD(v27);
              if (HIDWORD(v27) == (_DWORD)v27)
              {
                v15 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v26, HIDWORD(v27) + 1, (unint64_t)i);
                v16 = HIDWORD(v27);
                v17 = v26;
                v18 = *v15;
                if (*v15)
                  *v18 += 2;
                *((_QWORD *)v17 + v16) = v18;
                HIDWORD(v27) = v16 + 1;
                v12 = *v11;
              }
              else
              {
                v19 = v26;
                v20 = (_DWORD *)*i;
                if (*i)
                  *v20 += 2;
                *((_QWORD *)v19 + v14) = v20;
                HIDWORD(v27) = v14 + 1;
              }
            }
            v21 = v12 - 2;
            if (v21)
            {
              *v11 = v21;
            }
            else if ((*(_WORD *)(v10 - 258) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)(v10 - 288));
            }
          }
        }
      }
      while (1)
      {
        i += 2;
        if (i == (_QWORD *)v8)
          break;
        if (*i)
        {
          if (i != (_QWORD *)v8)
            goto LABEL_11;
          break;
        }
      }
      v22 = (WTF::StringImpl **)v26;
      if (!HIDWORD(v27))
        goto LABEL_35;
      v23 = 8 * HIDWORD(v27);
      do
      {
        WebCore::InspectorAnimationAgent::unbindAnimation(this, v22++, a3);
        v23 -= 8;
      }
      while (v23);
      v22 = (WTF::StringImpl **)v26;
      if (!HIDWORD(v27))
      {
LABEL_35:
        if (!v22)
          return;
LABEL_45:
        v26 = 0;
        LODWORD(v27) = 0;
        WTF::fastFree((WTF *)v22, a2);
        return;
      }
      v24 = 8 * HIDWORD(v27);
      do
      {
        v25 = *v22;
        *v22 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, a2);
          else
            *(_DWORD *)v25 -= 2;
        }
        ++v22;
        v24 -= 8;
      }
      while (v24);
      v22 = (WTF::StringImpl **)v26;
      if (v26)
        goto LABEL_45;
    }
  }
}

void WebCore::InspectorApplicationCacheAgent::~InspectorApplicationCacheAgent(WebCore::InspectorApplicationCacheAgent *this, void *a2)
{
  _DWORD *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  Inspector::ApplicationCacheBackendDispatcherHandler::~ApplicationCacheBackendDispatcherHandler((WebCore::InspectorApplicationCacheAgent *)((char *)this + 32));
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EFC38;
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
}

{
  _DWORD *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  Inspector::ApplicationCacheBackendDispatcherHandler::~ApplicationCacheBackendDispatcherHandler((WebCore::InspectorApplicationCacheAgent *)((char *)this + 32));
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EFC38;
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::fastFree(this, v5);
}

void `non-virtual thunk to'WebCore::InspectorApplicationCacheAgent::~InspectorApplicationCacheAgent(WebCore::InspectorApplicationCacheAgent *this, void *a2)
{
  _DWORD *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  Inspector::ApplicationCacheBackendDispatcherHandler::~ApplicationCacheBackendDispatcherHandler(this);
  v6 = (WTF::StringImpl *)*((_QWORD *)this - 3);
  *((_QWORD *)this - 4) = off_1E33EFC38;
  *((_QWORD *)this - 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
}

{
  _DWORD *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  Inspector::ApplicationCacheBackendDispatcherHandler::~ApplicationCacheBackendDispatcherHandler(this);
  v6 = (WTF::StringImpl *)*((_QWORD *)this - 3);
  *((_QWORD *)this - 4) = off_1E33EFC38;
  *((_QWORD *)this - 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::fastFree((WebCore::InspectorApplicationCacheAgent *)((char *)this - 32), v5);
}

uint64_t WebCore::InspectorApplicationCacheAgent::willDestroyFrontendAndBackend(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;

  v1 = *(_QWORD *)(result + 16);
  if (*(_QWORD *)(v1 + 88) == result)
  {
    *(_QWORD *)(v1 + 88) = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = (uint64_t)v3;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        return WTF::StringImpl::destroy(v3, v2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::InspectorApplicationCacheAgent::disable@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(this + 16);
  if (*(_QWORD *)(v3 + 88) == this)
  {
    v4 = 0;
    *(_QWORD *)(v3 + 88) = 0;
    *a2 = 0;
  }
  else
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = 1;
  }
  a2[8] = v4;
  return this;
}

uint64_t WebCore::InspectorApplicationCacheAgent::enable@<X0>(WebCore::InspectorApplicationCacheAgent *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  Inspector::ApplicationCacheFrontendDispatcher *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8;

  v3 = *((_QWORD *)this + 2);
  if (*(WebCore::InspectorApplicationCacheAgent **)(v3 + 88) == this)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 1;
  }
  else
  {
    *(_QWORD *)(v3 + 88) = this;
    v4 = (Inspector::ApplicationCacheFrontendDispatcher *)*((_QWORD *)this + 5);
    v5 = WebCore::s_platformStrategies;
    v6 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
    if (!v6)
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
      *(_QWORD *)(v5 + 8) = v6;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 128))(v6);
    result = Inspector::ApplicationCacheFrontendDispatcher::networkStateUpdated(v4);
    v8 = 0;
    *a2 = 0;
  }
  a2[8] = v8;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorApplicationCacheAgent::enable@<X0>(WebCore::InspectorApplicationCacheAgent *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  Inspector::ApplicationCacheFrontendDispatcher *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8;

  v3 = *((_QWORD *)this - 2);
  if (*(WebCore::InspectorApplicationCacheAgent **)(v3 + 88) == (WebCore::InspectorApplicationCacheAgent *)((char *)this - 32))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 1;
  }
  else
  {
    *(_QWORD *)(v3 + 88) = (char *)this - 32;
    v4 = (Inspector::ApplicationCacheFrontendDispatcher *)*((_QWORD *)this + 1);
    v5 = WebCore::s_platformStrategies;
    v6 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
    if (!v6)
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
      *(_QWORD *)(v5 + 8) = v6;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 128))(v6);
    result = Inspector::ApplicationCacheFrontendDispatcher::networkStateUpdated(v4);
    v8 = 0;
    *a2 = 0;
  }
  a2[8] = v8;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorApplicationCacheAgent::disable@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(this - 16);
  if (*(_QWORD *)(v3 + 88) == this - 32)
  {
    v4 = 0;
    *(_QWORD *)(v3 + 88) = 0;
    *a2 = 0;
  }
  else
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = 1;
  }
  a2[8] = v4;
  return this;
}

WTF::StringImpl *WebCore::InspectorApplicationCacheAgent::updateApplicationCacheStatus(WTF::StringImpl *this, WebCore::LocalFrame *a2)
{
  WTF::StringImpl *v2;
  unsigned int *v3;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  Inspector::ApplicationCacheFrontendDispatcher *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12[8];
  WTF::StringImpl *v13;

  if (a2)
  {
    v2 = this;
    v3 = *(unsigned int **)(*((_QWORD *)this + 2) + 200);
    if (v3)
    {
      v5 = *(_QWORD *)(*((_QWORD *)a2 + 35) + 88);
      if (v5)
      {
        WebCore::ApplicationCacheHost::applicationCacheInfo(*(WebCore::ApplicationCacheHost **)(v5 + 2872), (uint64_t)v12);
        v7 = v12[0];
        if (v12[0])
        {
          v8 = *(_DWORD *)v12[0];
          *(_DWORD *)v12[0] += 2;
          v13 = v7;
          v12[0] = 0;
          if (v8)
            *(_DWORD *)v7 = v8;
          else
            WTF::StringImpl::destroy(v7, v6);
        }
        else
        {
          v13 = 0;
        }
        v9 = (Inspector::ApplicationCacheFrontendDispatcher *)*((_QWORD *)v2 + 5);
        WebCore::InspectorPageAgent::frameId(v3, a2, v12);
        Inspector::ApplicationCacheFrontendDispatcher::applicationCacheStatusUpdated(v9, (const WTF::String *)v12, (const WTF::String *)&v13);
        v11 = v12[0];
        v12[0] = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v10);
          else
            *(_DWORD *)v11 -= 2;
        }
        this = v13;
        v13 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v10);
          else
            *(_DWORD *)this -= 2;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::InspectorApplicationCacheAgent::getFramesWithManifests@<X0>(WebCore::InspectorApplicationCacheAgent *this@<X0>, uint64_t a2@<X8>)
{
  WTF::JSONImpl::ArrayBase *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *(_QWORD *)(*((_QWORD *)this + 2) + 200);
  if (v10)
  {
    v4 = (WTF::JSONImpl::ArrayBase *)WTF::fastMalloc((WTF *)0x20);
    v9 = WTF::JSONImpl::ArrayBase::ArrayBase(v4);
    v5 = *((_QWORD *)this + 7);
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v6 = off_1E33EFA58;
    v6[1] = &v9;
    v6[2] = &v10;
    v8 = (uint64_t)v6;
    WebCore::Page::forEachLocalFrame(v5, &v8);
    result = v8;
    v8 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    *(_QWORD *)a2 = v9;
    *(_DWORD *)(a2 + 8) = 0;
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_DWORD *)(a2 + 8) = 1;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorApplicationCacheAgent::getFramesWithManifests@<X0>(WebCore::InspectorApplicationCacheAgent *this@<X0>, uint64_t a2@<X8>)
{
  return WebCore::InspectorApplicationCacheAgent::getFramesWithManifests((WebCore::InspectorApplicationCacheAgent *)((char *)this - 32), a2);
}

WTF::StringImpl *WebCore::InspectorApplicationCacheAgent::getManifestForFrame@<X0>(WebCore::InspectorApplicationCacheAgent *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::InspectorPageAgent *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  uint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v11 = 0;
  v4 = *(WebCore::InspectorPageAgent **)(*((_QWORD *)this + 2) + 200);
  if (!v4)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = v10;
    v11 = v10;
    if (!v10)
      goto LABEL_17;
    goto LABEL_16;
  }
  result = (WTF::StringImpl *)WebCore::InspectorPageAgent::assertFrame(v4, &v11, a2);
  if (!result)
  {
    v9 = v11;
    if (!v11)
      goto LABEL_17;
    goto LABEL_16;
  }
  v7 = *(_QWORD *)(*((_QWORD *)result + 35) + 88);
  if (v7)
  {
    WebCore::ApplicationCacheHost::applicationCacheInfo(*(WebCore::ApplicationCacheHost **)(v7 + 2872), (uint64_t)&v10);
    result = v10;
    if (v10)
    {
      v8 = *(_DWORD *)v10;
      *(_DWORD *)v10 += 2;
      *(_QWORD *)a3 = result;
      *(_DWORD *)(a3 + 8) = 0;
      v10 = 0;
      if (v8)
        *(_DWORD *)result = v8;
      else
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else
    {
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 0;
    }
    v9 = v11;
    goto LABEL_18;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v9 = v10;
  result = v11;
  v11 = v10;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      if (!v10)
        goto LABEL_17;
      goto LABEL_16;
    }
    *(_DWORD *)result -= 2;
  }
  if (v9)
LABEL_16:
    *(_DWORD *)v9 += 2;
LABEL_17:
  *(_QWORD *)a3 = v9;
  *(_DWORD *)(a3 + 8) = 1;
LABEL_18:
  v11 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorApplicationCacheAgent::getManifestForFrame@<X0>(WebCore::InspectorApplicationCacheAgent *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorApplicationCacheAgent::getManifestForFrame((WebCore::InspectorApplicationCacheAgent *)((char *)this - 32), a2, a3);
}

WTF *WebCore::InspectorApplicationCacheAgent::getApplicationCacheForFrame@<X0>(WebCore::InspectorApplicationCacheAgent *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::InspectorPageAgent *v4;
  WTF *result;
  WTF::StringImpl *v6;
  uint64_t v7;
  WebCore::ApplicationCacheHost *v8;
  WTF::JSONImpl::Object *v9;
  uint64_t v10;
  const WTF::String *v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  double v19;
  uint64_t v20;
  WTF::JSONImpl::Value *v21;
  WTF::StringImpl *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::JSONImpl::Value *v31;
  WTF::StringImpl *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::JSONImpl::Value *v41;
  WTF::StringImpl *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  WTF *v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  int v59;
  const char *v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  WTF::JSONImpl::Object *v64;
  uint64_t v65;
  const WTF::String *v66;
  WTF::StringImpl *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::JSONImpl::Value *v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  const WTF::String *v84;
  WTF::StringImpl *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  unint64_t v94;
  const char *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  void *v99;
  void *v100;
  void *v101;
  _QWORD *v102;
  _DWORD **v103;
  uint64_t v104;
  _DWORD *v105;
  _DWORD **v106;
  uint64_t v107;
  _DWORD *v108;
  _DWORD **v109;
  uint64_t v110;
  _DWORD *v111;
  WTF::StringImpl *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF *v121;
  uint64_t v122;
  WTF::StringImpl *v123;
  _DWORD **v124;
  uint64_t v125;
  _DWORD *v126;
  _DWORD **v127;
  uint64_t v128;
  _DWORD *v129;
  _DWORD **v130;
  uint64_t v131;
  _DWORD *v132;
  _DWORD **v133;
  uint64_t v134;
  _DWORD *v135;
  _DWORD **v136;
  uint64_t v137;
  _DWORD *v138;
  uint64_t v139;
  WTF::StringImpl *v140[8];
  WTF *v141;
  int v142;
  unsigned int v143;
  WTF::StringImpl *v144;
  uint64_t v145;
  WTF::StringImpl *v146;
  _QWORD v147[2];
  _QWORD v148[2];
  WTF::StringImpl *v149[2];
  WTF::StringImpl *v150[2];
  _QWORD v151[2];
  char v152;

  v144 = 0;
  v4 = *(WebCore::InspectorPageAgent **)(*((_QWORD *)this + 2) + 200);
  if (!v4)
  {
    result = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v112 = v140[0];
    if (!v140[0])
      goto LABEL_180;
    goto LABEL_179;
  }
  result = (WTF *)WebCore::InspectorPageAgent::assertFrame(v4, &v144, a2);
  if (!result)
  {
    v112 = v144;
    if (!v144)
      goto LABEL_180;
    goto LABEL_179;
  }
  v7 = *(_QWORD *)(*((_QWORD *)result + 35) + 88);
  if (!v7)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v112 = v140[0];
    result = v144;
    if (v144)
    {
      if (*(_DWORD *)v144 == 2)
      {
        result = (WTF *)WTF::StringImpl::destroy(v144, v6);
        if (!v140[0])
          goto LABEL_180;
        goto LABEL_179;
      }
      *(_DWORD *)v144 -= 2;
    }
    if (!v112)
    {
LABEL_180:
      *(_QWORD *)a3 = v112;
      *(_DWORD *)(a3 + 8) = 1;
      goto LABEL_181;
    }
LABEL_179:
    *(_DWORD *)v112 += 2;
    goto LABEL_180;
  }
  v139 = a3;
  v8 = *(WebCore::ApplicationCacheHost **)(v7 + 2872);
  WebCore::ApplicationCacheHost::resourceList((uint64_t)v8, (uint64_t)&v141);
  WebCore::ApplicationCacheHost::applicationCacheInfo(v8, (uint64_t)v140);
  WTF::JSONImpl::Object::create(v9);
  v10 = v145;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)v140, v11);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v10 + 16), v149, (const WTF::StringImpl *)v150, (uint64_t)v151);
  if (v152)
  {
    v13 = (uint64_t *)(v10 + 24);
    v14 = *(unsigned int *)(v10 + 36);
    if ((_DWORD)v14 == *(_DWORD *)(v10 + 32))
    {
      v124 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v13, v14 + 1, (unint64_t)v149);
      v14 = *(unsigned int *)(v10 + 36);
      v125 = *(_QWORD *)(v10 + 24);
      v126 = *v124;
      if (*v124)
        *v126 += 2;
      *(_QWORD *)(v125 + 8 * v14) = v126;
    }
    else
    {
      v15 = *v13;
      v16 = v149[0];
      if (v149[0])
        *(_DWORD *)v149[0] += 2;
      *(_QWORD *)(v15 + 8 * v14) = v16;
    }
    *(_DWORD *)(v10 + 36) = v14 + 1;
  }
  v17 = v150[0];
  v150[0] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v17;
  }
  v18 = v149[0];
  v149[0] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v12);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (double)(uint64_t)v140[7];
  v20 = v145;
  v21 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v21, v19);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v20 + 16), v149, (const WTF::StringImpl *)v150, (uint64_t)v151);
  if (v152)
  {
    v23 = (uint64_t *)(v20 + 24);
    v24 = *(unsigned int *)(v20 + 36);
    if ((_DWORD)v24 == *(_DWORD *)(v20 + 32))
    {
      v127 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v23, v24 + 1, (unint64_t)v149);
      v24 = *(unsigned int *)(v20 + 36);
      v128 = *(_QWORD *)(v20 + 24);
      v129 = *v127;
      if (*v127)
        *v129 += 2;
      *(_QWORD *)(v128 + 8 * v24) = v129;
    }
    else
    {
      v25 = *v23;
      v26 = v149[0];
      if (v149[0])
        *(_DWORD *)v149[0] += 2;
      *(_QWORD *)(v25 + 8 * v24) = v26;
    }
    *(_DWORD *)(v20 + 36) = v24 + 1;
  }
  v27 = v150[0];
  v150[0] = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v27;
  }
  v28 = v149[0];
  v149[0] = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v22);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = v140[5];
  v30 = v145;
  v31 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v31, *(double *)&v29);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v30 + 16), v149, (const WTF::StringImpl *)v150, (uint64_t)v151);
  if (v152)
  {
    v33 = (uint64_t *)(v30 + 24);
    v34 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v34 == *(_DWORD *)(v30 + 32))
    {
      v130 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v33, v34 + 1, (unint64_t)v149);
      v34 = *(unsigned int *)(v30 + 36);
      v131 = *(_QWORD *)(v30 + 24);
      v132 = *v130;
      if (*v130)
        *v132 += 2;
      *(_QWORD *)(v131 + 8 * v34) = v132;
    }
    else
    {
      v35 = *v33;
      v36 = v149[0];
      if (v149[0])
        *(_DWORD *)v149[0] += 2;
      *(_QWORD *)(v35 + 8 * v34) = v36;
    }
    *(_DWORD *)(v30 + 36) = v34 + 1;
  }
  v37 = v150[0];
  v150[0] = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v37;
  }
  v38 = v149[0];
  v149[0] = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v32);
    else
      *(_DWORD *)v38 -= 2;
  }
  v39 = v140[6];
  v40 = v145;
  v41 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v41, *(double *)&v39);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v40 + 16), v149, (const WTF::StringImpl *)v150, (uint64_t)v151);
  if (v152)
  {
    v43 = (uint64_t *)(v40 + 24);
    v44 = *(unsigned int *)(v40 + 36);
    if ((_DWORD)v44 == *(_DWORD *)(v40 + 32))
    {
      v133 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)v149);
      v44 = *(unsigned int *)(v40 + 36);
      v134 = *(_QWORD *)(v40 + 24);
      v135 = *v133;
      if (*v133)
        *v135 += 2;
      *(_QWORD *)(v134 + 8 * v44) = v135;
    }
    else
    {
      v45 = *v43;
      v46 = v149[0];
      if (v149[0])
        *(_DWORD *)v149[0] += 2;
      *(_QWORD *)(v45 + 8 * v44) = v46;
    }
    *(_DWORD *)(v40 + 36) = v44 + 1;
  }
  v47 = v150[0];
  v150[0] = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v47;
  }
  v48 = v149[0];
  v149[0] = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v42);
    else
      *(_DWORD *)v48 -= 2;
  }
  v49 = WTF::fastMalloc((WTF *)0x20);
  WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v49);
  if (v143)
  {
    v50 = 56 * v143;
    v51 = "Master ";
    v52 = v141;
    while (1)
    {
      if (*((_BYTE *)v52 + 40))
        v53 = v51;
      else
        v53 = "";
      if (*((_BYTE *)v52 + 40))
        v54 = 8;
      else
        v54 = 1;
      v55 = "Manifest ";
      if (*((_BYTE *)v52 + 41))
      {
        v56 = 10;
      }
      else
      {
        v55 = "";
        v56 = 1;
      }
      v57 = "Fallback ";
      if (*((_BYTE *)v52 + 42))
      {
        v58 = 10;
      }
      else
      {
        v57 = "";
        v58 = 1;
      }
      v59 = *((unsigned __int8 *)v52 + 44);
      v60 = "Foreign ";
      if (!*((_BYTE *)v52 + 43))
        v60 = "";
      v61 = 9;
      if (!*((_BYTE *)v52 + 43))
        v61 = 1;
      v151[0] = v53;
      v151[1] = v54;
      v62 = "Explicit ";
      if (v59)
      {
        v63 = 10;
      }
      else
      {
        v62 = "";
        v63 = 1;
      }
      v150[0] = (WTF::StringImpl *)v55;
      v150[1] = (WTF::StringImpl *)v56;
      v149[0] = (WTF::StringImpl *)v57;
      v149[1] = (WTF::StringImpl *)v58;
      v148[0] = v60;
      v148[1] = v61;
      v147[0] = v62;
      v147[1] = v63;
      v64 = (WTF::JSONImpl::Object *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>((uint64_t)v151, (uint64_t)v150, (uint64_t)v149, (uint64_t)v148, (uint64_t)v147, &v146);
      if (!v146)
        break;
      WTF::JSONImpl::Object::create(v64);
      v65 = v148[0];
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create(v52, v66);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v65 + 16), v149, (const WTF::StringImpl *)v150, (uint64_t)v151);
      if (v152)
      {
        v68 = (uint64_t *)(v65 + 24);
        v69 = *(unsigned int *)(v65 + 36);
        if ((_DWORD)v69 == *(_DWORD *)(v65 + 32))
        {
          v103 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v68, v69 + 1, (unint64_t)v149);
          v69 = *(unsigned int *)(v65 + 36);
          v104 = *(_QWORD *)(v65 + 24);
          v105 = *v103;
          if (*v103)
            *v105 += 2;
          *(_QWORD *)(v104 + 8 * v69) = v105;
        }
        else
        {
          v70 = *v68;
          v71 = v149[0];
          if (v149[0])
            *(_DWORD *)v149[0] += 2;
          *(_QWORD *)(v70 + 8 * v69) = v71;
        }
        *(_DWORD *)(v65 + 36) = v69 + 1;
      }
      v72 = v150[0];
      v150[0] = 0;
      if (v72)
      {
        if (*(_DWORD *)v72 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v72;
      }
      v73 = v149[0];
      v149[0] = 0;
      if (v73)
      {
        if (*(_DWORD *)v73 == 2)
          WTF::StringImpl::destroy(v73, v67);
        else
          *(_DWORD *)v73 -= 2;
      }
      v74 = (WTF::JSONImpl::Value *)*((unsigned int *)v52 + 12);
      v75 = v148[0];
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create(v74);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v75 + 16), v149, (const WTF::StringImpl *)v150, (uint64_t)v151);
      if (v152)
      {
        v77 = (uint64_t *)(v75 + 24);
        v78 = *(unsigned int *)(v75 + 36);
        if ((_DWORD)v78 == *(_DWORD *)(v75 + 32))
        {
          v106 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v77, v78 + 1, (unint64_t)v149);
          v78 = *(unsigned int *)(v75 + 36);
          v107 = *(_QWORD *)(v75 + 24);
          v108 = *v106;
          if (*v106)
            *v108 += 2;
          *(_QWORD *)(v107 + 8 * v78) = v108;
        }
        else
        {
          v79 = *v77;
          v80 = v149[0];
          if (v149[0])
            *(_DWORD *)v149[0] += 2;
          *(_QWORD *)(v79 + 8 * v78) = v80;
        }
        *(_DWORD *)(v75 + 36) = v78 + 1;
      }
      v81 = v150[0];
      v150[0] = 0;
      if (v81)
      {
        if (*(_DWORD *)v81 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v81;
      }
      v82 = v149[0];
      v149[0] = 0;
      if (v82)
      {
        if (*(_DWORD *)v82 == 2)
          WTF::StringImpl::destroy(v82, v76);
        else
          *(_DWORD *)v82 -= 2;
      }
      v83 = v148[0];
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v146, v84);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v83 + 16), v149, (const WTF::StringImpl *)v150, (uint64_t)v151);
      if (v152)
      {
        v86 = (uint64_t *)(v83 + 24);
        v87 = *(unsigned int *)(v83 + 36);
        if ((_DWORD)v87 == *(_DWORD *)(v83 + 32))
        {
          v109 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v86, v87 + 1, (unint64_t)v149);
          v87 = *(unsigned int *)(v83 + 36);
          v110 = *(_QWORD *)(v83 + 24);
          v111 = *v109;
          if (*v109)
            *v111 += 2;
          *(_QWORD *)(v110 + 8 * v87) = v111;
        }
        else
        {
          v88 = *v86;
          v89 = v149[0];
          if (v149[0])
            *(_DWORD *)v149[0] += 2;
          *(_QWORD *)(v88 + 8 * v87) = v89;
        }
        *(_DWORD *)(v83 + 36) = v87 + 1;
      }
      v90 = v150[0];
      v150[0] = 0;
      if (v90)
      {
        if (*(_DWORD *)v90 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v90;
      }
      v91 = v149[0];
      v149[0] = 0;
      if (v91)
      {
        if (*(_DWORD *)v91 == 2)
          WTF::StringImpl::destroy(v91, v85);
        else
          *(_DWORD *)v91 -= 2;
      }
      v92 = v148[0];
      v93 = v146;
      v146 = 0;
      if (v93)
      {
        if (*(_DWORD *)v93 == 2)
          WTF::StringImpl::destroy(v93, v85);
        else
          *(_DWORD *)v93 -= 2;
      }
      v94 = *(unsigned int *)(v49 + 28);
      if ((_DWORD)v94 == *(_DWORD *)(v49 + 24))
      {
        v95 = v51;
        v96 = v94 + (v94 >> 2);
        if (v96 >= 0x10)
          v97 = v96 + 1;
        else
          v97 = 16;
        if (v97 <= v94 + 1)
          v98 = v94 + 1;
        else
          v98 = v97;
        if (v98 >> 29)
          break;
        v99 = *(void **)(v49 + 16);
        v100 = (void *)WTF::fastMalloc((WTF *)(8 * v98));
        *(_DWORD *)(v49 + 24) = v98;
        *(_QWORD *)(v49 + 16) = v100;
        memcpy(v100, v99, 8 * v94);
        v51 = v95;
        if (v99)
        {
          if (*(void **)(v49 + 16) == v99)
          {
            *(_QWORD *)(v49 + 16) = 0;
            *(_DWORD *)(v49 + 24) = 0;
          }
          WTF::fastFree((WTF *)v99, v101);
        }
        v94 = *(unsigned int *)(v49 + 28);
        v102 = (_QWORD *)(*(_QWORD *)(v49 + 16) + 8 * v94);
      }
      else
      {
        v102 = (_QWORD *)(*(_QWORD *)(v49 + 16) + 8 * v94);
      }
      *v102 = v92;
      *(_DWORD *)(v49 + 28) = v94 + 1;
      v52 = (WTF *)((char *)v52 + 56);
      v50 -= 56;
      if (!v50)
        goto LABEL_147;
    }
    __break(0xC471u);
    JUMPOUT(0x195E01E70);
  }
LABEL_147:
  v113 = v145;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v149[0] = (WTF::StringImpl *)v49;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v113 + 16), v150, (const WTF::StringImpl *)v149, (uint64_t)v151);
  if (v152)
  {
    v114 = (uint64_t *)(v113 + 24);
    v115 = *(unsigned int *)(v113 + 36);
    if ((_DWORD)v115 == *(_DWORD *)(v113 + 32))
    {
      v136 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v114, v115 + 1, (unint64_t)v150);
      v115 = *(unsigned int *)(v113 + 36);
      v137 = *(_QWORD *)(v113 + 24);
      v138 = *v136;
      if (*v136)
        *v138 += 2;
      *(_QWORD *)(v137 + 8 * v115) = v138;
    }
    else
    {
      v116 = *v114;
      v117 = v150[0];
      if (v150[0])
        *(_DWORD *)v150[0] += 2;
      *(_QWORD *)(v116 + 8 * v115) = v117;
    }
    *(_DWORD *)(v113 + 36) = v115 + 1;
  }
  v118 = v149[0];
  v149[0] = 0;
  if (v118)
  {
    if (*(_DWORD *)v118 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v118;
  }
  v119 = v150[0];
  v150[0] = 0;
  if (v119)
  {
    if (*(_DWORD *)v119 == 2)
      WTF::StringImpl::destroy(v119, v6);
    else
      *(_DWORD *)v119 -= 2;
  }
  *(_QWORD *)v139 = v145;
  *(_DWORD *)(v139 + 8) = 0;
  v120 = v140[0];
  v140[0] = 0;
  if (v120)
  {
    if (*(_DWORD *)v120 == 2)
      WTF::StringImpl::destroy(v120, v6);
    else
      *(_DWORD *)v120 -= 2;
  }
  if (v143)
  {
    v121 = v141;
    v122 = 56 * v143;
    do
    {
      v123 = *(WTF::StringImpl **)v121;
      *(_QWORD *)v121 = 0;
      if (v123)
      {
        if (*(_DWORD *)v123 == 2)
          WTF::StringImpl::destroy(v123, v6);
        else
          *(_DWORD *)v123 -= 2;
      }
      v121 = (WTF *)((char *)v121 + 56);
      v122 -= 56;
    }
    while (v122);
  }
  result = v141;
  if (v141)
  {
    v141 = 0;
    v142 = 0;
    result = (WTF *)WTF::fastFree(result, v6);
  }
  v112 = v144;
LABEL_181:
  v144 = 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 2)
      return (WTF *)WTF::StringImpl::destroy(v112, v6);
    else
      *(_DWORD *)v112 -= 2;
  }
  return result;
}

WTF *`non-virtual thunk to'WebCore::InspectorApplicationCacheAgent::getApplicationCacheForFrame@<X0>(WebCore::InspectorApplicationCacheAgent *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorApplicationCacheAgent::getApplicationCacheForFrame((WebCore::InspectorApplicationCacheAgent *)((char *)this - 32), a2, a3);
}

void WebCore::InspectorCPUProfilerAgent::~InspectorCPUProfilerAgent(WebCore::InspectorCPUProfilerAgent *this, void *a2)
{
  _DWORD *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  Inspector::CPUProfilerBackendDispatcherHandler::~CPUProfilerBackendDispatcherHandler((WebCore::InspectorCPUProfilerAgent *)((char *)this + 32));
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EFC38;
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
}

{
  _DWORD *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  Inspector::CPUProfilerBackendDispatcherHandler::~CPUProfilerBackendDispatcherHandler((WebCore::InspectorCPUProfilerAgent *)((char *)this + 32));
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EFC38;
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::fastFree(this, v5);
}

void `non-virtual thunk to'WebCore::InspectorCPUProfilerAgent::~InspectorCPUProfilerAgent(WebCore::InspectorCPUProfilerAgent *this, void *a2)
{
  _DWORD *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  Inspector::CPUProfilerBackendDispatcherHandler::~CPUProfilerBackendDispatcherHandler(this);
  v6 = (WTF::StringImpl *)*((_QWORD *)this - 3);
  *((_QWORD *)this - 4) = off_1E33EFC38;
  *((_QWORD *)this - 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
}

{
  _DWORD *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  Inspector::CPUProfilerBackendDispatcherHandler::~CPUProfilerBackendDispatcherHandler(this);
  v6 = (WTF::StringImpl *)*((_QWORD *)this - 3);
  *((_QWORD *)this - 4) = off_1E33EFC38;
  *((_QWORD *)this - 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::fastFree((WebCore::InspectorCPUProfilerAgent *)((char *)this - 32), v5);
}

uint64_t WebCore::InspectorCPUProfilerAgent::didCreateFrontendAndBackend(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 16) + 32) = result;
  return result;
}

_BYTE *WebCore::InspectorCPUProfilerAgent::willDestroyFrontendAndBackend(_BYTE *this, void *a2)
{
  _BYTE *v2;
  Inspector::CPUProfilerFrontendDispatcher *v3;
  double *v4;
  double v5;

  v2 = this;
  if (this[56])
  {
    WebCore::ResourceUsageThread::removeObserver((WebCore::ResourceUsageThread *)this, a2);
    v2[56] = 0;
    v3 = (Inspector::CPUProfilerFrontendDispatcher *)*((_QWORD *)v2 + 5);
    v4 = (double *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 3) + 56))(*((_QWORD *)v2 + 3));
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v4);
    this = (_BYTE *)Inspector::CPUProfilerFrontendDispatcher::trackingComplete(v3, v4[1] + v5 - v4[2]);
  }
  *(_QWORD *)(*((_QWORD *)v2 + 2) + 32) = 0;
  return this;
}

_BYTE *WebCore::InspectorCPUProfilerAgent::stopTracking@<X0>(_BYTE *this@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  _BYTE *v4;
  Inspector::CPUProfilerFrontendDispatcher *v5;
  double *v6;
  double v7;

  if (this[56])
  {
    v4 = this;
    WebCore::ResourceUsageThread::removeObserver((WebCore::ResourceUsageThread *)this, a2);
    v4[56] = 0;
    v5 = (Inspector::CPUProfilerFrontendDispatcher *)*((_QWORD *)v4 + 5);
    v6 = (double *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v4 + 3) + 56))(*((_QWORD *)v4 + 3));
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v6);
    this = (_BYTE *)Inspector::CPUProfilerFrontendDispatcher::trackingComplete(v5, v6[1] + v7 - v6[2]);
  }
  *a3 = 0;
  a3[8] = 0;
  return this;
}

_BYTE *WebCore::InspectorCPUProfilerAgent::startTracking@<X0>(_BYTE *this@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  _QWORD *v4;
  uint64_t v5;
  Inspector::CPUProfilerFrontendDispatcher *v6;
  double *v7;
  double v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!this[56])
  {
    v3 = this;
    v9[0] = &off_1E33EFA80;
    v9[1] = this;
    v10 = v9;
    WebCore::ResourceUsageThread::addObserver((WTF::RunLoop *)this, (const void *)1, (char *)v9);
    v4 = v10;
    if (v10 == v9)
    {
      v5 = 4;
      v4 = v9;
    }
    else
    {
      if (!v10)
      {
LABEL_7:
        v3[56] = 1;
        v6 = (Inspector::CPUProfilerFrontendDispatcher *)*((_QWORD *)v3 + 5);
        v7 = (double *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 3) + 56))(*((_QWORD *)v3 + 3));
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
        this = (_BYTE *)Inspector::CPUProfilerFrontendDispatcher::trackingStart(v6, v7[1] + v8 - v7[2]);
        goto LABEL_8;
      }
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
    goto LABEL_7;
  }
LABEL_8:
  *a2 = 0;
  a2[8] = 0;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::InspectorCPUProfilerAgent::startTracking@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  Inspector::CPUProfilerFrontendDispatcher *v6;
  double *v7;
  double v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(this + 24))
  {
    v3 = this;
    v9[0] = &off_1E33EFA80;
    v9[1] = this - 32;
    v10 = v9;
    WebCore::ResourceUsageThread::addObserver((WTF::RunLoop *)(this - 32), (const void *)1, (char *)v9);
    v4 = v10;
    if (v10 == v9)
    {
      v5 = 4;
      v4 = v9;
    }
    else
    {
      if (!v10)
      {
LABEL_7:
        *(_BYTE *)(v3 + 24) = 1;
        v6 = *(Inspector::CPUProfilerFrontendDispatcher **)(v3 + 8);
        v7 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 - 8) + 56))(*(_QWORD *)(v3 - 8));
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
        this = Inspector::CPUProfilerFrontendDispatcher::trackingStart(v6, v7[1] + v8 - v7[2]);
        goto LABEL_8;
      }
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
    goto LABEL_7;
  }
LABEL_8:
  *a2 = 0;
  a2[8] = 0;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::InspectorCPUProfilerAgent::stopTracking@<X0>(uint64_t this@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  Inspector::CPUProfilerFrontendDispatcher *v5;
  double *v6;
  double v7;

  if (*(_BYTE *)(this + 24))
  {
    v4 = this;
    WebCore::ResourceUsageThread::removeObserver((WebCore::ResourceUsageThread *)(this - 32), a2);
    *(_BYTE *)(v4 + 24) = 0;
    v5 = *(Inspector::CPUProfilerFrontendDispatcher **)(v4 + 8);
    v6 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 - 8) + 56))(*(_QWORD *)(v4 - 8));
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v6);
    this = Inspector::CPUProfilerFrontendDispatcher::trackingComplete(v5, v6[1] + v7 - v6[2]);
  }
  *a3 = 0;
  a3[8] = 0;
  return this;
}

uint64_t WebCore::InspectorCSSAgent::InspectorCSSAgent(uint64_t a1, _QWORD *a2)
{
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t StatusReg;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  WTF::StringImpl *v13;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (v13)
  {
    v5 = *(_DWORD *)v13;
    *(_DWORD *)v13 += 2;
    *(_QWORD *)a1 = off_1E33EFBF8;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = a2[4];
    *(_QWORD *)(a1 + 24) = *a2;
    if (v5)
      *(_DWORD *)v13 = v5;
    else
      WTF::StringImpl::destroy(v13, v4);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = a2[4];
    *(_QWORD *)(a1 + 24) = *a2;
  }
  *(_QWORD *)a1 = off_1E33EEF70;
  *(_QWORD *)(a1 + 32) = &unk_1E33EF050;
  *(_QWORD *)(a1 + 40) = &unk_1E33EF108;
  v6 = a2[2];
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v7 = v6;
  *(_QWORD *)(a1 + 48) = v7;
  Inspector::CSSBackendDispatcher::create();
  *(_QWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = a2[5];
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 1;
  *(_BYTE *)(a1 + 132) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 168) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  v9 = *(unsigned int **)(StatusReg + 736);
  if (!v9)
    v9 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 208) = v9;
  *(_QWORD *)(a1 + 168) = off_1E31F7378;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v11 = off_1E33EFAC8;
  v11[1] = WebCore::InspectorCSSAgent::nodesWithPendingLayoutFlagsChangeDispatchTimerFired;
  v11[2] = 0;
  v11[3] = a1;
  *(_QWORD *)(a1 + 216) = v11;
  *(_DWORD *)(a1 + 224) = 65;
  return a1;
}

uint64_t WebCore::InspectorCSSAgent::nodesWithPendingLayoutFlagsChangeDispatchTimerFired(uint64_t this, WebCore::Node *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  WebCore::InspectorCSSAgent *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int i;
  uint64_t v24;
  uint64_t v25;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  int j;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t k;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  char v51;
  WTF::StringImpl *v52;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 16) + 40);
  if (!v2)
    return this;
  v3 = this;
  v4 = *(_QWORD *)(this + 152);
  *(_QWORD *)(this + 152) = 0;
  *(_QWORD *)(this + 160) = 0;
  if (!v4)
  {
    v5 = 0;
    v6 = 0;
LABEL_4:
    v7 = v5;
    v5 = v4 + 8 * v6;
    goto LABEL_5;
  }
  v6 = *(unsigned int *)(v4 - 4);
  v5 = v4 + 8 * v6;
  if (!*(_DWORD *)(v4 - 12))
    goto LABEL_4;
  if (!(_DWORD)v6)
  {
    v9 = 0;
    v7 = v4;
    goto LABEL_8;
  }
  v41 = 8 * v6;
  v7 = v4;
  while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
  {
    v7 += 8;
    v41 -= 8;
    if (!v41)
    {
      v7 = v5;
      break;
    }
  }
LABEL_5:
  if (v4)
  {
    v9 = *(unsigned int *)(v4 - 4);
LABEL_8:
    v8 = v4 + 8 * v9;
    goto LABEL_9;
  }
  v8 = 0;
LABEL_9:
  if (v8 != v7)
  {
    while (!*(_QWORD *)(*(_QWORD *)v7 + 8))
    {
      v10 = v7 + 8;
      v7 = v5;
      if (v10 != v5)
      {
        v7 = v10;
        while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
        {
          v7 += 8;
          if (v7 == v5)
          {
            v7 = v5;
            break;
          }
        }
      }
      if (v7 == v8)
      {
        v7 = v8;
        break;
      }
    }
  }
  v50 = v4;
  if (v4)
    v11 = v4 + 8 * *(unsigned int *)(v4 - 4);
  else
    v11 = 0;
  if (v7 != v11)
  {
    v12 = (uint64_t *)(this + 136);
    do
    {
      v13 = *(WebCore::InspectorCSSAgent **)(*(_QWORD *)v7 + 8);
      this = WebCore::InspectorCSSAgent::layoutFlagsForNode(v13, a2);
      v14 = this;
      v51 = this;
      ++*(_DWORD *)(v3 + 144);
      v15 = *((_QWORD *)v13 + 2);
      v16 = v15 & 0xFFFFFFFFFFFFLL;
      if ((v15 & 0xFFFFFFFFFFFFLL) != 0 && *(_QWORD *)((v15 & 0xFFFFFFFFFFFFLL) + 8))
      {
        v17 = *v12;
        if (*v12)
        {
          v18 = *(_DWORD *)(v17 - 8);
          v19 = (v16 + ~(v15 << 32)) ^ ((unint64_t)(v16 + ~(v15 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          for (i = 1; ; ++i)
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            if (v25 != -1)
            {
              if (!v25)
              {
                v28 = 0;
                goto LABEL_46;
              }
              if (v25 == v16)
                break;
            }
            v22 = (v24 + i) & v18;
          }
          v28 = *(unsigned __int8 *)(v17 + 16 * v24 + 8);
LABEL_46:
          if (v28 == this)
            goto LABEL_57;
        }
        else if (!(_BYTE)this)
        {
          goto LABEL_57;
        }
        ++*(_DWORD *)(v2 + 88);
        v29 = *(_QWORD *)(v2 + 80);
        if (v29)
        {
          v30 = *(_DWORD *)(v29 - 8);
          v31 = (v16 + ~(v15 << 32)) ^ ((unint64_t)(v16 + ~(v15 << 32)) >> 22);
          v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
          v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
          v34 = v30 & ((v33 >> 31) ^ v33);
          for (j = 1; ; ++j)
          {
            v36 = v34;
            v37 = *(_QWORD *)(v29 + 16 * v34);
            if (v37 != -1)
            {
              if (!v37)
                goto LABEL_33;
              if (v37 == v16)
                break;
            }
            v34 = (v36 + j) & v30;
          }
          if (*(_DWORD *)(v29 + 16 * v36 + 8))
          {
            WTF::WeakHashMap<WebCore::Node,WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>,WebCore::WeakPtrImplWithEventTargetData>::set<WebCore::Node,WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>&>(v3 + 136, v13, &v51);
            WebCore::toProtocol((WTF::StringImpl *)&v52, v14);
            Inspector::CSSFrontendDispatcher::nodeLayoutFlagsChanged();
            this = (uint64_t)v52;
            v52 = 0;
            if (this)
            {
              if (*(_DWORD *)this == 1)
                this = WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)this;
            }
            goto LABEL_57;
          }
        }
      }
      else
      {
        if (!(_BYTE)this)
          goto LABEL_57;
        ++*(_DWORD *)(v2 + 88);
      }
LABEL_33:
      if (*(_DWORD *)(v3 + 224) != 66 || (this & 6) == 0)
        goto LABEL_57;
      v52 = 0;
      v27 = WebCore::InspectorDOMAgent::pushNodePathToFrontend(v2, (WebCore::Node *)&v52, v13);
      this = (uint64_t)v52;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
        {
          this = WTF::StringImpl::destroy(v52, a2);
          if (!v27)
            goto LABEL_57;
LABEL_41:
          this = WTF::WeakHashMap<WebCore::Node,WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>,WebCore::WeakPtrImplWithEventTargetData>::set<WebCore::Node,WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>&>(v3 + 136, v13, &v51);
          goto LABEL_57;
        }
        *(_DWORD *)v52 -= 2;
      }
      if (v27)
        goto LABEL_41;
LABEL_57:
      v38 = v5;
      if (v7 + 8 != v5)
      {
        v38 = v7 + 8;
        while ((unint64_t)(*(_QWORD *)v38 + 1) <= 1)
        {
          v38 += 8;
          if (v38 == v5)
          {
            v38 = v5;
            break;
          }
        }
      }
      v7 = v8;
      if (v38 != v8)
      {
        v7 = v38;
        if (!*(_QWORD *)(*(_QWORD *)v38 + 8))
        {
          while (1)
          {
            v39 = v7 + 8;
            v7 = v5;
            if (v39 != v5)
            {
              v7 = v39;
              while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
              {
                v7 += 8;
                if (v7 == v5)
                {
                  v7 = v5;
                  break;
                }
              }
            }
            if (v7 == v8)
              break;
            if (*(_QWORD *)(*(_QWORD *)v7 + 8))
              goto LABEL_73;
          }
          v7 = v8;
        }
      }
LABEL_73:
      ;
    }
    while (v7 != v11);
  }
  v40 = v50;
  if (v50)
  {
    v42 = *(unsigned int *)(v50 - 4);
    if ((_DWORD)v42)
    {
      for (k = 0; k != v42; ++k)
      {
        v44 = *(_QWORD *)(v40 + 8 * k);
        if (v44 != -1)
        {
          *(_QWORD *)(v40 + 8 * k) = 0;
          if (v44)
          {
            do
            {
              v45 = __ldaxr((unsigned int *)v44);
              v46 = v45 - 1;
            }
            while (__stlxr(v46, (unsigned int *)v44));
            if (!v46)
            {
              v47 = v40;
              atomic_store(1u, (unsigned int *)v44);
              v48 = *(unsigned int *)(v44 + 28);
              if ((_DWORD)v48)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v44 + 16), (WTF::StringImpl *)(*(_QWORD *)(v44 + 16) + 32 * v48));
              v49 = *(WTF **)(v44 + 16);
              if (v49)
              {
                *(_QWORD *)(v44 + 16) = 0;
                *(_DWORD *)(v44 + 24) = 0;
                WTF::fastFree(v49, a2);
              }
              WTF::fastFree((WTF *)v44, a2);
              v40 = v47;
            }
          }
        }
      }
    }
    return WTF::fastFree((WTF *)(v40 - 16), a2);
  }
  return this;
}

void WebCore::InspectorCSSAgent::~InspectorCSSAgent(WebCore::InspectorCSSAgent *this)
{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD **v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD **v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  _DWORD *v35;
  _DWORD *v36;
  WTF *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;

  *((_QWORD *)this + 21) = off_1E31F7378;
  v2 = (WebCore::InspectorCSSAgent *)((char *)this + 168);
  v3 = *((_QWORD *)this + 27);
  *((_QWORD *)v2 + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 19, v4);
  v6 = *((_QWORD *)this + 17);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v9 = (uint64_t *)(v6 + 16 * i);
        v10 = *v9;
        if (*v9 != -1)
        {
          *v9 = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr((unsigned int *)v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, (unsigned int *)v10));
            if (!v12)
            {
              atomic_store(1u, (unsigned int *)v10);
              v13 = *(unsigned int *)(v10 + 28);
              if ((_DWORD)v13)
              {
                v41 = v10;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v13));
                v10 = v41;
              }
              v14 = *(WTF **)(v10 + 16);
              if (v14)
              {
                *(_QWORD *)(v10 + 16) = 0;
                *(_DWORD *)(v10 + 24) = 0;
                v40 = v10;
                WTF::fastFree(v14, v5);
                v10 = v40;
              }
              WTF::fastFree((WTF *)v10, v5);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v6 - 16), v5);
  }
  v15 = *((_QWORD *)this + 15);
  if (v15)
    WTF::fastFree((WTF *)(v15 - 16), v5);
  v16 = *((_QWORD *)this + 14);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      v18 = (_QWORD *)(v16 + 8);
      do
      {
        if (*((_DWORD *)v18 - 2) != -1 && *v18)
          WTF::fastFree((WTF *)(*v18 - 16), v5);
        v18 += 2;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree((WTF *)(v16 - 16), v5);
  }
  v19 = *((_QWORD *)this + 13);
  if (v19)
  {
    v20 = *(unsigned int *)(v19 - 4);
    if ((_DWORD)v20)
    {
      v21 = (_QWORD *)(v19 + 8);
      do
      {
        if (*(v21 - 1) != -1 && *v21)
          WTF::fastFree((WTF *)(*v21 - 16), v5);
        v21 += 2;
        --v20;
      }
      while (v20);
    }
    WTF::fastFree((WTF *)(v19 - 16), v5);
  }
  v22 = *((_QWORD *)this + 12);
  if (v22)
    WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::deallocateTable(v22, v5);
  v23 = *((_QWORD *)this + 11);
  if (v23)
  {
    v24 = *(unsigned int *)(v23 - 4);
    if ((_DWORD)v24)
    {
      v25 = (_DWORD **)(v23 + 8);
      do
      {
        if (*(v25 - 1) != (_DWORD *)-1)
        {
          v26 = *v25;
          *v25 = 0;
          if (v26)
          {
            if (v26[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
            else
              --v26[2];
          }
        }
        v25 += 2;
        --v24;
      }
      while (v24);
    }
    WTF::fastFree((WTF *)(v23 - 16), v5);
  }
  v27 = *((_QWORD *)this + 10);
  if (v27)
  {
    v28 = *(unsigned int *)(v27 - 4);
    if ((_DWORD)v28)
    {
      v29 = (_DWORD **)(v27 + 8);
      do
      {
        if (*(v29 - 1) != (_DWORD *)-1)
        {
          v30 = *v29;
          *v29 = 0;
          if (v30)
          {
            if (v30[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
            else
              --v30[2];
          }
        }
        v29 += 2;
        --v28;
      }
      while (v28);
    }
    WTF::fastFree((WTF *)(v27 - 16), v5);
  }
  v31 = *((_QWORD *)this + 9);
  if (v31)
  {
    v32 = *(unsigned int *)(v31 - 4);
    if ((_DWORD)v32)
    {
      v33 = *((_QWORD *)this + 9);
      do
      {
        v34 = *(WTF::StringImpl **)v33;
        if (*(_QWORD *)v33 != -1)
        {
          v35 = *(_DWORD **)(v33 + 8);
          *(_QWORD *)(v33 + 8) = 0;
          if (v35)
          {
            if (v35[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
              v34 = *(WTF::StringImpl **)v33;
            }
            else
            {
              --v35[2];
            }
          }
          *(_QWORD *)v33 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v5);
            else
              *(_DWORD *)v34 -= 2;
          }
        }
        v33 += 16;
        --v32;
      }
      while (v32);
    }
    WTF::fastFree((WTF *)(v31 - 16), v5);
  }
  v36 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v36)
  {
    if (v36[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
    else
      --v36[2];
  }
  v37 = (WTF *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v37)
    WTF::fastFree(v37, v5);
  Inspector::CSSBackendDispatcherHandler::~CSSBackendDispatcherHandler((WebCore::InspectorCSSAgent *)((char *)this + 32));
  v39 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EFC38;
  *((_QWORD *)this + 1) = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v38);
    else
      *(_DWORD *)v39 -= 2;
  }
}

{
  WTF *v1;
  void *v2;

  WebCore::InspectorCSSAgent::~InspectorCSSAgent(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebCore::InspectorCSSAgent::~InspectorCSSAgent(WebCore::InspectorCSSAgent *this)
{
  WebCore::InspectorCSSAgent::~InspectorCSSAgent((WebCore::InspectorCSSAgent *)((char *)this - 32));
}

{
  WebCore::InspectorCSSAgent::~InspectorCSSAgent((WebCore::InspectorCSSAgent *)((char *)this - 40));
}

{
  WTF *v1;
  void *v2;

  WebCore::InspectorCSSAgent::~InspectorCSSAgent((WebCore::InspectorCSSAgent *)((char *)this - 32));
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebCore::InspectorCSSAgent::~InspectorCSSAgent((WebCore::InspectorCSSAgent *)((char *)this - 40));
  WTF::fastFree(v1, v2);
}

void WebCore::InspectorCSSAgent::willDestroyFrontendAndBackend(WebCore::InspectorCSSAgent *this, WTF::StringImpl *a2)
{
  *(_QWORD *)(*((_QWORD *)this + 2) + 112) = 0;
  WebCore::InspectorCSSAgent::reset(this, a2);
}

void WebCore::InspectorCSSAgent::disable(WebCore::InspectorCSSAgent *this@<X0>, WTF::StringImpl *a2@<X1>, _BYTE *a3@<X8>)
{
  *(_QWORD *)(*((_QWORD *)this + 2) + 112) = 0;
  WebCore::InspectorCSSAgent::reset(this, a2);
  *a3 = 0;
  a3[8] = 0;
}

void WebCore::InspectorCSSAgent::reset(WebCore::InspectorCSSAgent *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD **v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD **v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v3 = *((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 9) = 0;
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = v3;
      do
      {
        v6 = *(WTF::StringImpl **)v5;
        if (*(_QWORD *)v5 != -1)
        {
          v7 = *(_DWORD **)(v5 + 8);
          *(_QWORD *)(v5 + 8) = 0;
          if (v7)
          {
            if (v7[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
              v6 = *(WTF::StringImpl **)v5;
            }
            else
            {
              --v7[2];
            }
          }
          *(_QWORD *)v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        v5 += 16;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v8 = *((_QWORD *)this + 10);
  if (v8)
  {
    *((_QWORD *)this + 10) = 0;
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      v10 = (_DWORD **)(v8 + 8);
      do
      {
        if (*(v10 - 1) != (_DWORD *)-1)
        {
          v11 = *v10;
          *v10 = 0;
          if (v11)
          {
            if (v11[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
            else
              --v11[2];
          }
        }
        v10 += 2;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
  v12 = *((_QWORD *)this + 11);
  if (v12)
  {
    *((_QWORD *)this + 11) = 0;
    v13 = *(unsigned int *)(v12 - 4);
    if ((_DWORD)v13)
    {
      v14 = (_DWORD **)(v12 + 8);
      do
      {
        if (*(v14 - 1) != (_DWORD *)-1)
        {
          v15 = *v14;
          *v14 = 0;
          if (v15)
          {
            if (v15[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
            else
              --v15[2];
          }
        }
        v14 += 2;
        --v13;
      }
      while (v13);
    }
    WTF::fastFree((WTF *)(v12 - 16), a2);
  }
  v16 = *((_QWORD *)this + 12);
  if (v16)
  {
    *((_QWORD *)this + 12) = 0;
    WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::deallocateTable(v16, a2);
  }
  v17 = *((_QWORD *)this + 13);
  if (v17)
  {
    *((_QWORD *)this + 13) = 0;
    v18 = *(unsigned int *)(v17 - 4);
    if ((_DWORD)v18)
    {
      v19 = (_QWORD *)(v17 + 8);
      do
      {
        if (*(v19 - 1) != -1 && *v19)
          WTF::fastFree((WTF *)(*v19 - 16), a2);
        v19 += 2;
        --v18;
      }
      while (v18);
    }
    WTF::fastFree((WTF *)(v17 - 16), a2);
  }
  v20 = *((_QWORD *)this + 17);
  if (v20)
  {
    *((_QWORD *)this + 17) = 0;
    v21 = *(unsigned int *)(v20 - 4);
    if ((_DWORD)v21)
    {
      for (i = 0; i != v21; ++i)
      {
        v23 = (uint64_t *)(v20 + 16 * i);
        v24 = *v23;
        if (*v23 != -1)
        {
          *v23 = 0;
          if (v24)
          {
            do
            {
              v25 = __ldaxr((unsigned int *)v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, (unsigned int *)v24));
            if (!v26)
            {
              atomic_store(1u, (unsigned int *)v24);
              v27 = *(unsigned int *)(v24 + 28);
              if ((_DWORD)v27)
              {
                v44 = v24;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v24 + 16), (WTF::StringImpl *)(*(_QWORD *)(v24 + 16) + 32 * v27));
                v24 = v44;
              }
              v28 = *(WTF **)(v24 + 16);
              if (v28)
              {
                *(_QWORD *)(v24 + 16) = 0;
                *(_DWORD *)(v24 + 24) = 0;
                v43 = v24;
                WTF::fastFree(v28, a2);
                v24 = v43;
              }
              WTF::fastFree((WTF *)v24, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v20 - 16), a2);
    v29 = *((_QWORD *)this + 17);
    *((_DWORD *)this + 36) = 0;
    if (v29)
    {
      LODWORD(v29) = *(_DWORD *)(v29 - 12);
      if (v29 > 0x7FFFFFFE)
        LODWORD(v29) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v29) = 0;
    *((_DWORD *)this + 36) = 0;
  }
  *((_DWORD *)this + 37) = 2 * v29;
  v30 = *((_QWORD *)this + 19);
  if (v30)
  {
    *((_QWORD *)this + 19) = 0;
    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(v30, a2);
    v31 = *((_QWORD *)this + 19);
    *((_DWORD *)this + 40) = 0;
    if (v31)
    {
      LODWORD(v31) = *(_DWORD *)(v31 - 12);
      if (v31 > 0x7FFFFFFE)
        LODWORD(v31) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v31) = 0;
    *((_DWORD *)this + 40) = 0;
  }
  *((_DWORD *)this + 41) = 2 * v31;
  if ((*((_QWORD *)this + 25) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 25) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    WebCore::TimerBase::stopSlowCase((WebCore::InspectorCSSAgent *)((char *)this + 168));
  }
  *((_DWORD *)this + 56) = 65;
  v32 = *((_QWORD *)this + 15);
  if (v32)
  {
    v33 = *(unsigned int *)(v32 - 4);
    v34 = v32 + 8 * v33;
    if (*(_DWORD *)(v32 - 12))
    {
      v35 = *((_QWORD *)this + 15);
      if ((_DWORD)v33)
      {
        v36 = 8 * v33;
        v35 = *((_QWORD *)this + 15);
        while ((unint64_t)(*(_QWORD *)v35 + 1) <= 1)
        {
          v35 += 8;
          v36 -= 8;
          if (!v36)
          {
            v35 = v34;
            goto LABEL_76;
          }
        }
      }
      goto LABEL_76;
    }
    v35 = v32 + 8 * v33;
  }
  else
  {
    v35 = 0;
    v33 = 0;
  }
  v34 = v32 + 8 * v33;
  if (v32)
  {
LABEL_76:
    v37 = v32 + 8 * *(unsigned int *)(v32 - 4);
    goto LABEL_81;
  }
  v37 = 0;
LABEL_81:
  while (v35 != v37)
  {
    v38 = v35 + 8;
    WebCore::Style::Scope::didChangeStyleSheetEnvironment(*(WebCore::Style::Scope **)(*(_QWORD *)v35 + 1328), a2);
    v35 = v34;
    if (v38 != v34)
    {
      v35 = v38;
      while ((unint64_t)(*(_QWORD *)v35 + 1) <= 1)
      {
        v35 += 8;
        if (v35 == v34)
        {
          v35 = v34;
          break;
        }
      }
    }
  }
  v39 = *((_QWORD *)this + 14);
  if (v39)
  {
    *((_QWORD *)this + 14) = 0;
    v40 = *(unsigned int *)(v39 - 4);
    if ((_DWORD)v40)
    {
      v41 = (_QWORD *)(v39 + 8);
      do
      {
        if (*((_DWORD *)v41 - 2) != -1 && *v41)
          WTF::fastFree((WTF *)(*v41 - 16), a2);
        v41 += 2;
        --v40;
      }
      while (v40);
    }
    WTF::fastFree((WTF *)(v39 - 16), a2);
  }
  v42 = *((_QWORD *)this + 15);
  if (v42)
  {
    *((_QWORD *)this + 15) = 0;
    WTF::fastFree((WTF *)(v42 - 16), a2);
  }
}

WebCore::InspectorCSSAgent *WebCore::InspectorCSSAgent::enable@<X0>(WebCore::InspectorCSSAgent *this@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  WebCore::InspectorCSSAgent *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  WebCore::Document *v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *((_QWORD *)this + 2);
  if (*(WebCore::InspectorCSSAgent **)(v4 + 112) != this)
  {
    v5 = this;
    *(_QWORD *)(v4 + 112) = this;
    v6 = *(_QWORD *)(v4 + 40);
    if (v6)
    {
      v19 = 0;
      v20 = 0;
      v7 = *(_QWORD *)(*(_QWORD *)(v6 + 120) + 528);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          v9 = 0;
          v10 = 0;
          while (1)
          {
            do
            {
LABEL_6:
              v11 = (_QWORD *)v8;
              if (!*(_BYTE *)(v8 + 144))
              {
                v12 = *(_QWORD *)(v8 + 296);
                v21 = v12;
                if (v12)
                {
                  if (v10 == (_DWORD)v20)
                  {
                    this = (WebCore::InspectorCSSAgent *)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v19, v10 + 1, (unint64_t)&v21);
                    v10 = HIDWORD(v20);
                    v9 = v19;
                    *((_QWORD *)v19 + HIDWORD(v20)) = *(_QWORD *)this;
                  }
                  else
                  {
                    *((_QWORD *)v9 + v10) = v12;
                  }
                  HIDWORD(v20) = ++v10;
                }
              }
              v8 = v11[11];
            }
            while (v8);
            v13 = *(_QWORD *)(v11[6] + 8);
            if (!v13)
              break;
            v8 = v11[9];
            if (!v8)
            {
              while (1)
              {
                v14 = *(_QWORD *)(v13 + 56);
                if (!v14)
                  goto LABEL_19;
                v13 = *(_QWORD *)(v14 + 8);
                if (!v13)
                  goto LABEL_19;
                v8 = *(_QWORD *)(v13 + 72);
                if (v8)
                  goto LABEL_6;
              }
            }
          }
LABEL_19:
          v15 = v19;
          if (v10)
          {
            v16 = 8 * v10;
            v17 = v19;
            do
            {
              v18 = *(WebCore::Document **)v17;
              v17 = (WTF *)((char *)v17 + 8);
              this = WebCore::InspectorCSSAgent::activeStyleSheetsUpdated(v5, v18);
              v16 -= 8;
            }
            while (v16);
          }
          if (v15)
            this = (WebCore::InspectorCSSAgent *)WTF::fastFree(v15, a2);
        }
      }
    }
  }
  *a3 = 0;
  a3[8] = 0;
  return this;
}

WTF *WebCore::InspectorCSSAgent::activeStyleSheetsUpdated(WebCore::InspectorCSSAgent *this, WebCore::Document *a2)
{
  void *v4;
  WTF *v5;
  uint64_t v6;
  WebCore::CSSStyleSheet *v7;
  void *v8;
  WTF *result;
  uint64_t v10;
  WebCore::CSSStyleSheet *v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  int v15;
  unsigned int v16;

  v12 = 0;
  v13 = 0;
  WebCore::Style::Scope::activeStyleSheetsForInspector(*((_QWORD *)a2 + 166), a2, (uint64_t)&v14);
  v5 = v14;
  if (!v16)
    goto LABEL_5;
  v6 = 8 * v16;
  do
  {
    v7 = *(WebCore::CSSStyleSheet **)v5;
    v5 = (WTF *)((char *)v5 + 8);
    WebCore::InspectorCSSAgent::collectStyleSheets((uint64_t)this, v7, (uint64_t)&v12);
    v6 -= 8;
  }
  while (v6);
  v5 = v14;
  if (!v16)
  {
LABEL_5:
    if (!v5)
      goto LABEL_6;
    goto LABEL_17;
  }
  v10 = 8 * v16;
  do
  {
    v11 = *(WebCore::CSSStyleSheet **)v5;
    *(_QWORD *)v5 = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 2) == 1)
        (*(void (**)(WebCore::CSSStyleSheet *))(*(_QWORD *)v11 + 8))(v11);
      else
        --*((_DWORD *)v11 + 2);
    }
    v5 = (WTF *)((char *)v5 + 8);
    v10 -= 8;
  }
  while (v10);
  v5 = v14;
  if (v14)
  {
LABEL_17:
    v14 = 0;
    v15 = 0;
    WTF::fastFree(v5, v4);
  }
LABEL_6:
  WebCore::InspectorCSSAgent::setActiveStyleSheetsForDocument((uint64_t)this, (uint64_t)a2, (unsigned int *)&v12);
  result = v12;
  if (v12)
  {
    v12 = 0;
    LODWORD(v13) = 0;
    return (WTF *)WTF::fastFree(result, v8);
  }
  return result;
}

WebCore::InspectorCSSAgent *`non-virtual thunk to'WebCore::InspectorCSSAgent::enable@<X0>(WebCore::InspectorCSSAgent *this@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  return WebCore::InspectorCSSAgent::enable((WebCore::InspectorCSSAgent *)((char *)this - 32), a2, a3);
}

void `non-virtual thunk to'WebCore::InspectorCSSAgent::disable(WebCore::InspectorCSSAgent *this@<X0>, WTF::StringImpl *a2@<X1>, _BYTE *a3@<X8>)
{
  *(_QWORD *)(*((_QWORD *)this - 2) + 112) = 0;
  WebCore::InspectorCSSAgent::reset((WebCore::InspectorCSSAgent *)((char *)this - 32), a2);
  *a3 = 0;
  a3[8] = 0;
}

WTF *WebCore::InspectorCSSAgent::documentDetached(WebCore::InspectorCSSAgent *this, WebCore::Document *a2)
{
  WTF *result;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  WebCore::Document *v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  WebCore::Document *v31;
  int v32;
  WebCore::Document *v33;
  uint64_t v34;
  _DWORD **v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  WebCore::Document *v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  _QWORD v60[2];

  v60[0] = 0;
  v60[1] = 0;
  result = (WTF *)WebCore::InspectorCSSAgent::setActiveStyleSheetsForDocument((uint64_t)this, (uint64_t)a2, (unsigned int *)v60);
  v7 = (uint64_t *)((char *)this + 104);
  v6 = *((_QWORD *)this + 13);
  if (v6)
  {
    v8 = *(_DWORD *)(v6 - 8);
    v9 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(WebCore::Document **)(v6 + 16 * v12);
    if (v13 != a2)
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(WebCore::Document **)(v6 + 16 * v12);
        ++v14;
        if (v13 == a2)
          goto LABEL_8;
      }
      v12 = *(unsigned int *)(v6 - 4);
    }
LABEL_8:
    if (v12 != *(_DWORD *)(v6 - 4))
    {
      v15 = (_QWORD *)(v6 + 16 * v12);
      *v15 = -1;
      v16 = v15[1];
      if (v16)
        result = (WTF *)WTF::fastFree((WTF *)(v16 - 16), v5);
      ++*(_DWORD *)(*v7 - 16);
      v17 = *v7;
      if (*v7)
        v18 = *(_DWORD *)(v17 - 12) - 1;
      else
        v18 = -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v7;
      if (*v7)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          result = (WTF *)WTF::HashTable<WebCore::Document *,WTF::KeyValuePair<WebCore::Document *,WTF::HashSet<WebCore::CSSStyleSheet *,WTF::DefaultHash<WebCore::CSSStyleSheet *>,WTF::HashTraits<WebCore::CSSStyleSheet *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Document *,WTF::HashSet<WebCore::CSSStyleSheet *,WTF::DefaultHash<WebCore::CSSStyleSheet *>,WTF::HashTraits<WebCore::CSSStyleSheet *>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::Document *>,WTF::HashMap<WebCore::Document *,WTF::HashSet<WebCore::CSSStyleSheet *,WTF::DefaultHash<WebCore::CSSStyleSheet *>,WTF::HashTraits<WebCore::CSSStyleSheet *>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::Document *>,WTF::HashTraits<WebCore::Document *>,WTF::HashTraits<WTF::HashSet<WebCore::CSSStyleSheet *,WTF::DefaultHash<WebCore::CSSStyleSheet *>,WTF::HashTraits<WebCore::CSSStyleSheet *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Document *>>::rehash((uint64_t *)this + 13, v21 >> 1, 0);
      }
    }
  }
  v24 = (uint64_t *)((char *)this + 96);
  v23 = *((_QWORD *)this + 12);
  if (v23)
  {
    v25 = *(_DWORD *)(v23 - 8);
    v26 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
    v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
    v29 = v25 & ((v28 >> 31) ^ v28);
    v30 = v23 + 24 * v29;
    v31 = *(WebCore::Document **)v30;
    if (*(WebCore::Document **)v30 != a2)
    {
      v32 = 1;
      while (v31)
      {
        v29 = (v29 + v32) & v25;
        v30 = v23 + 24 * v29;
        v31 = *(WebCore::Document **)v30;
        ++v32;
        if (*(WebCore::Document **)v30 == a2)
          goto LABEL_28;
      }
      v30 = v23 + 24 * *(unsigned int *)(v23 - 4);
    }
LABEL_28:
    if (v23 + 24 * *(unsigned int *)(v23 - 4) != v30)
    {
      v33 = *(WebCore::Document **)v30;
      *(_QWORD *)v30 = -1;
      if (v33)
      {
        if (*((_DWORD *)v33 + 6) == 2)
        {
          if ((*((_WORD *)v33 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v33);
        }
        else
        {
          *((_DWORD *)v33 + 6) -= 2;
        }
      }
      v34 = *(unsigned int *)(v30 + 20);
      if ((_DWORD)v34)
      {
        v35 = *(_DWORD ***)(v30 + 8);
        v36 = 8 * v34;
        do
        {
          v37 = *v35;
          *v35 = 0;
          if (v37)
          {
            if (v37[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 8))(v37);
            else
              --v37[2];
          }
          ++v35;
          v36 -= 8;
        }
        while (v36);
      }
      result = *(WTF **)(v30 + 8);
      if (result)
      {
        *(_QWORD *)(v30 + 8) = 0;
        *(_DWORD *)(v30 + 16) = 0;
        result = (WTF *)WTF::fastFree(result, v5);
      }
      ++*(_DWORD *)(*v24 - 16);
      v38 = *v24;
      if (*v24)
        v39 = *(_DWORD *)(v38 - 12) - 1;
      else
        v39 = -1;
      *(_DWORD *)(v38 - 12) = v39;
      v40 = *v24;
      if (*v24)
      {
        v41 = 6 * *(_DWORD *)(v40 - 12);
        v42 = *(_DWORD *)(v40 - 4);
        if (v41 < v42 && v42 >= 9)
          result = (WTF *)WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::rehash((uint64_t *)this + 12, v42 >> 1, 0);
      }
    }
  }
  v46 = *((_QWORD *)this + 15);
  v45 = (uint64_t *)((char *)this + 120);
  v44 = v46;
  if (v46)
  {
    v47 = *(_DWORD *)(v44 - 8);
    v48 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v49 = 9 * ((v48 + ~(v48 << 13)) ^ ((v48 + ~(v48 << 13)) >> 8));
    v50 = (v49 ^ (v49 >> 15)) + ~((v49 ^ (v49 >> 15)) << 27);
    v51 = v47 & ((v50 >> 31) ^ v50);
    v52 = *(WebCore::Document **)(v44 + 8 * v51);
    if (v52 != a2)
    {
      v53 = 1;
      while (v52)
      {
        v51 = ((_DWORD)v51 + v53) & v47;
        v52 = *(WebCore::Document **)(v44 + 8 * v51);
        ++v53;
        if (v52 == a2)
          goto LABEL_59;
      }
      v51 = *(unsigned int *)(v44 - 4);
    }
LABEL_59:
    if (v51 != *(_DWORD *)(v44 - 4))
    {
      *(_QWORD *)(v44 + 8 * v51) = -1;
      ++*(_DWORD *)(*v45 - 16);
      v54 = *v45;
      v55 = *v45 ? *(_DWORD *)(v54 - 12) - 1 : -1;
      *(_DWORD *)(v54 - 12) = v55;
      v56 = *v45;
      if (*v45)
      {
        v57 = 6 * *(_DWORD *)(v56 - 12);
        v58 = *(_DWORD *)(v56 - 4);
        if (v57 < v58 && v58 >= 9)
          return (WTF *)WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(v45, v58 >> 1);
      }
    }
  }
  return result;
}

uint64_t WebCore::InspectorCSSAgent::setActiveStyleSheetsForDocument(uint64_t result, uint64_t a2, unsigned int *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  double v32;
  double v33;
  double v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  int v65;
  WTF *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v91;
  unsigned int v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  char v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  int v105;
  int i;
  int v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  int j;
  uint64_t v114;
  WTF *v115;
  WTF::StringImpl **v116;
  uint64_t v117;
  WTF::StringImpl **v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  _QWORD *v128;
  _DWORD *v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t *v136;
  WTF *v137;
  WTF *v138;
  WebCore::CSSStyleSheet *v139;
  uint64_t v140;
  int v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unsigned int v145;
  unsigned int v146;
  WebCore::CSSStyleSheet **v147;
  WebCore::CSSStyleSheet *v148;
  WebCore::CSSStyleSheet **v149;
  int v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  unint64_t v156;
  unsigned int v157;
  uint64_t v158;
  int v159;
  unsigned int v160;
  WebCore::CSSStyleSheet *v161;
  int v162;
  WebCore::CSSStyleSheet **v163;
  WebCore::InspectorCSSAgent *v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t *v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF *v170;
  uint64_t v171;
  uint64_t v172;

  v5 = (uint64_t *)result;
  v7 = (uint64_t *)(result + 104);
  v6 = *(_QWORD *)(result + 104);
  if (v6
    || (result = (uint64_t)WTF::HashTable<WebCore::Document *,WTF::KeyValuePair<WebCore::Document *,WTF::HashSet<WebCore::CSSStyleSheet *,WTF::DefaultHash<WebCore::CSSStyleSheet *>,WTF::HashTraits<WebCore::CSSStyleSheet *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Document *,WTF::HashSet<WebCore::CSSStyleSheet *,WTF::DefaultHash<WebCore::CSSStyleSheet *>,WTF::HashTraits<WebCore::CSSStyleSheet *>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::Document *>,WTF::HashMap<WebCore::Document *,WTF::HashSet<WebCore::CSSStyleSheet *,WTF::DefaultHash<WebCore::CSSStyleSheet *>,WTF::HashTraits<WebCore::CSSStyleSheet *>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::Document *>,WTF::HashTraits<WebCore::Document *>,WTF::HashTraits<WTF::HashSet<WebCore::CSSStyleSheet *,WTF::DefaultHash<WebCore::CSSStyleSheet *>,WTF::HashTraits<WebCore::CSSStyleSheet *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Document *>>::rehash((uint64_t *)(result + 104), 8u, 0), (v6 = *v7) != 0))
  {
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = (uint64_t *)(v6 + 16 * v12);
  v14 = *v13;
  if (!*v13)
  {
LABEL_12:
    v17 = v13[1];
    *v13 = a2;
    v13[1] = 0;
    if (v17)
      result = WTF::fastFree((WTF *)(v17 - 16), (void *)a2);
    v18 = *v7;
    if (*v7)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v20 = *v7;
    if (*v7)
      v21 = *(_DWORD *)(v20 - 12);
    else
      v21 = 0;
    v22 = (*(_DWORD *)(v20 - 16) + v21);
    v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 > 2 * v22)
        goto LABEL_27;
    }
    else
    {
      if (3 * v23 > 4 * v22)
        goto LABEL_27;
      if (!(_DWORD)v23)
      {
        v24 = 8;
        goto LABEL_26;
      }
    }
    v24 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
LABEL_26:
    result = (uint64_t)WTF::HashTable<WebCore::Document *,WTF::KeyValuePair<WebCore::Document *,WTF::HashSet<WebCore::CSSStyleSheet *,WTF::DefaultHash<WebCore::CSSStyleSheet *>,WTF::HashTraits<WebCore::CSSStyleSheet *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Document *,WTF::HashSet<WebCore::CSSStyleSheet *,WTF::DefaultHash<WebCore::CSSStyleSheet *>,WTF::HashTraits<WebCore::CSSStyleSheet *>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::Document *>,WTF::HashMap<WebCore::Document *,WTF::HashSet<WebCore::CSSStyleSheet *,WTF::DefaultHash<WebCore::CSSStyleSheet *>,WTF::HashTraits<WebCore::CSSStyleSheet *>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::Document *>,WTF::HashTraits<WebCore::Document *>,WTF::HashTraits<WTF::HashSet<WebCore::CSSStyleSheet *,WTF::DefaultHash<WebCore::CSSStyleSheet *>,WTF::HashTraits<WebCore::CSSStyleSheet *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Document *>>::rehash(v7, v24, v13);
    v13 = (uint64_t *)result;
    goto LABEL_27;
  }
  v15 = 0;
  v16 = 1;
  while (v14 != a2)
  {
    if (v14 == -1)
      v15 = v13;
    v12 = (v12 + v16) & v8;
    v13 = (uint64_t *)(v6 + 16 * v12);
    v14 = *v13;
    ++v16;
    if (!*v13)
    {
      if (v15)
      {
        *v15 = 0;
        v15[1] = 0;
        --*(_DWORD *)(*v7 - 16);
        v13 = v15;
      }
      goto LABEL_12;
    }
  }
LABEL_27:
  v27 = v13[1];
  v26 = v13 + 1;
  v25 = v27;
  v172 = 0;
  if (v27)
  {
    v28 = *(unsigned int *)(v25 - 12);
    if ((_DWORD)v28)
    {
      v29 = (v28 - 1) | ((v28 - 1) >> 1) | ((((_DWORD)v28 - 1) | ((v28 - 1) >> 1)) >> 2);
      v30 = v29 | (v29 >> 4) | ((v29 | (v29 >> 4)) >> 8);
      v31 = (v30 | HIWORD(v30)) + 1;
      if (v31 > 0x400)
      {
        if (v31 > 2 * v28)
          goto LABEL_37;
      }
      else if (3 * v31 > 4 * v28)
      {
LABEL_32:
        v32 = (double)v28;
        v33 = (double)v31;
        v34 = 0.604166667;
        goto LABEL_38;
      }
      LODWORD(v31) = 2 * v31;
      if (v31 <= 0x400)
        goto LABEL_32;
LABEL_37:
      v32 = (double)v28;
      v33 = (double)v31;
      v34 = 0.416666667;
LABEL_38:
      if (v33 * v34 <= v32)
        LODWORD(v31) = 2 * v31;
      if (v31 <= 8)
        v35 = 8;
      else
        v35 = v31;
      result = WTF::fastZeroedMalloc((WTF *)(8 * v35 + 16));
      v25 = result + 16;
      v172 = result + 16;
      v36 = v35 - 1;
      *(_DWORD *)(result + 8) = v35 - 1;
      *(_DWORD *)(result + 12) = v35;
      *(_DWORD *)result = 0;
      *(_DWORD *)(result + 4) = v28;
      v37 = *v26;
      if (*v26)
      {
        v38 = *(unsigned int *)(v37 - 4);
        v39 = (_QWORD *)(v37 + 8 * v38);
        if (*(_DWORD *)(v37 - 12))
        {
          v40 = (_QWORD *)*v26;
          if ((_DWORD)v38)
          {
            v41 = 8 * v38;
            v40 = (_QWORD *)*v26;
            while ((unint64_t)(*v40 + 1) <= 1)
            {
              ++v40;
              v41 -= 8;
              if (!v41)
              {
                v40 = v39;
                goto LABEL_53;
              }
            }
          }
          goto LABEL_53;
        }
        v40 = (_QWORD *)(v37 + 8 * v38);
      }
      else
      {
        v40 = 0;
        v38 = 0;
      }
      v39 = (_QWORD *)(v37 + 8 * v38);
LABEL_53:
      if (v37)
        v37 += 8 * *(unsigned int *)(v37 - 4);
      if ((_QWORD *)v37 != v40)
      {
        do
        {
          v42 = ~(*v40 << 32) + *v40;
          v43 = (v42 ^ (v42 >> 22)) + ~((v42 ^ (v42 >> 22)) << 13);
          v44 = (9 * (v43 ^ (v43 >> 8))) ^ ((9 * (v43 ^ (v43 >> 8))) >> 15);
          v45 = v36 & (((v44 + ~(v44 << 27)) >> 31) ^ (v44 + ~((_DWORD)v44 << 27)));
          v46 = 1;
          do
          {
            v47 = v45;
            result = *(_QWORD *)(v25 + 8 * v45);
            v45 = (v45 + v46++) & v36;
          }
          while (result);
          *(_QWORD *)(v25 + 8 * v47) = *v40;
          v48 = v40 + 1;
          v40 = v39;
          if (v48 != v39)
          {
            v40 = v48;
            while ((unint64_t)(*v40 + 1) <= 1)
            {
              if (++v40 == v39)
              {
                v40 = v39;
                break;
              }
            }
          }
        }
        while (v40 != (_QWORD *)v37);
      }
      goto LABEL_64;
    }
    v25 = 0;
  }
LABEL_64:
  v170 = 0;
  v171 = 0;
  v49 = a3[3];
  if (!(_DWORD)v49)
    goto LABEL_86;
  v50 = *(uint64_t **)a3;
  v51 = &v50[v49];
  do
  {
    v52 = v172;
    if (!v172)
      goto LABEL_75;
    v53 = *(_DWORD *)(v172 - 8);
    v54 = *v50;
    v55 = ~(*v50 << 32) + *v50;
    v56 = (v55 ^ (v55 >> 22)) + ~((v55 ^ (v55 >> 22)) << 13);
    v57 = (9 * (v56 ^ (v56 >> 8))) ^ ((9 * (v56 ^ (v56 >> 8))) >> 15);
    v58 = v53 & (((v57 + ~(v57 << 27)) >> 31) ^ ((_DWORD)v57 + ~((_DWORD)v57 << 27)));
    v59 = *(_QWORD *)(v172 + 8 * v58);
    if (v59 != *v50)
    {
      v60 = 1;
      v61 = *(_QWORD *)(v172 + 8 * v58);
      v62 = v58;
      while (v61)
      {
        v62 = (v62 + v60) & v53;
        v61 = *(_QWORD *)(v172 + 8 * v62);
        ++v60;
        if (v61 == v54)
        {
          v63 = 1;
          while (v59)
          {
            v58 = ((_DWORD)v58 + v63) & v53;
            v59 = *(_QWORD *)(v172 + 8 * v58);
            ++v63;
            if (v59 == v54)
              goto LABEL_79;
          }
          v58 = *(unsigned int *)(v172 - 4);
          goto LABEL_79;
        }
      }
LABEL_75:
      v64 = HIDWORD(v171);
      if (HIDWORD(v171) == (_DWORD)v171)
      {
        result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v170, HIDWORD(v171) + 1, (unint64_t)v50);
        v64 = HIDWORD(v171);
        v65 = HIDWORD(v171) + 1;
        v66 = v170;
        v67 = *(_QWORD *)result;
      }
      else
      {
        v65 = HIDWORD(v171) + 1;
        v66 = v170;
        v67 = *v50;
      }
      *((_QWORD *)v66 + v64) = v67;
      HIDWORD(v171) = v65;
      goto LABEL_83;
    }
LABEL_79:
    v68 = *(unsigned int *)(v172 - 4);
    if (v58 != v68)
    {
      *(_QWORD *)(v172 + 8 * v58) = -1;
      v69 = *(_DWORD *)(v52 - 12) - 1;
      ++*(_DWORD *)(v52 - 16);
      *(_DWORD *)(v52 - 12) = v69;
      if (v68 >= 9 && 6 * v69 < v68)
        result = WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(&v172, v68 >> 1);
    }
LABEL_83:
    ++v50;
  }
  while (v50 != v51);
  v25 = v172;
LABEL_86:
  v164 = (WebCore::InspectorCSSAgent *)v5;
  if (v25)
  {
    v70 = *(unsigned int *)(v25 - 4);
    v71 = (uint64_t *)(v25 + 8 * v70);
    if (*(_DWORD *)(v25 - 12))
    {
      v72 = (uint64_t *)v25;
      if ((_DWORD)v70)
      {
        v73 = 8 * v70;
        v72 = (uint64_t *)v25;
        while ((unint64_t)(*v72 + 1) <= 1)
        {
          ++v72;
          v73 -= 8;
          if (!v73)
          {
            v72 = v71;
            break;
          }
        }
      }
LABEL_93:
      v74 = (uint64_t *)(v25 + 8 * *(unsigned int *)(v25 - 4));
      goto LABEL_98;
    }
    v72 = (uint64_t *)(v25 + 8 * v70);
  }
  else
  {
    v72 = 0;
    v70 = 0;
  }
  v71 = (uint64_t *)(v25 + 8 * v70);
  if (v25)
    goto LABEL_93;
  v74 = 0;
LABEL_98:
  if (v74 != v72)
  {
    v166 = v74;
    v167 = v5 + 10;
    v75 = v5 + 9;
    v165 = v5 + 9;
    while (1)
    {
      v76 = *v72;
      v77 = *v26;
      v78 = ~(*v72 << 32);
      if (*v26)
      {
        v79 = *(_DWORD *)(v77 - 8);
        v80 = ((v78 + v76) ^ ((unint64_t)(v78 + v76) >> 22))
            + ~(((v78 + v76) ^ ((unint64_t)(v78 + v76) >> 22)) << 13);
        v81 = (9 * (v80 ^ (v80 >> 8))) ^ ((9 * (v80 ^ (v80 >> 8))) >> 15);
        v82 = v79 & (((v81 + ~(v81 << 27)) >> 31) ^ ((_DWORD)v81 + ~((_DWORD)v81 << 27)));
        v83 = *(_QWORD *)(v77 + 8 * v82);
        if (v83 != v76)
        {
          v84 = 1;
          while (v83)
          {
            v82 = ((_DWORD)v82 + v84) & v79;
            v83 = *(_QWORD *)(v77 + 8 * v82);
            ++v84;
            if (v83 == v76)
              goto LABEL_107;
          }
          v82 = *(unsigned int *)(v77 - 4);
        }
LABEL_107:
        if (v82 != *(_DWORD *)(v77 - 4))
        {
          *(_QWORD *)(v77 + 8 * v82) = -1;
          ++*(_DWORD *)(*v26 - 16);
          v85 = *v26;
          v86 = *v26 ? *(_DWORD *)(v85 - 12) - 1 : -1;
          *(_DWORD *)(v85 - 12) = v86;
          v87 = *v26;
          if (*v26)
          {
            v88 = 6 * *(_DWORD *)(v87 - 12);
            v89 = *(_DWORD *)(v87 - 4);
            if (v88 < v89 && v89 >= 9)
              result = WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(v26, v89 >> 1);
          }
        }
      }
      v91 = *v167;
      if (!*v167)
        goto LABEL_125;
      v92 = *(_DWORD *)(v91 - 8);
      v93 = ((v78 + v76) ^ ((unint64_t)(v78 + v76) >> 22))
          + ~(((v78 + v76) ^ ((unint64_t)(v78 + v76) >> 22)) << 13);
      v94 = (9 * (v93 ^ (v93 >> 8))) ^ ((9 * (v93 ^ (v93 >> 8))) >> 15);
      v95 = v92 & (((v94 + ~(v94 << 27)) >> 31) ^ ((_DWORD)v94 + ~((_DWORD)v94 << 27)));
      v96 = *(_QWORD *)(v91 + 16 * v95);
      if (v96 != v76)
        break;
LABEL_123:
      v98 = *(_QWORD *)(v91 + 16 * v95 + 8);
      if (v98)
      {
        v99 = 0;
        ++*(_DWORD *)(v98 + 8);
        goto LABEL_127;
      }
LABEL_126:
      v99 = 1;
LABEL_127:
      v100 = *(WTF::StringImpl **)(v98 + 24);
      if (v100)
        *(_DWORD *)v100 += 2;
      v101 = *v75;
      if (*v75)
      {
        v102 = *(_DWORD *)(v101 - 8);
        v103 = *((_DWORD *)v100 + 4);
        if (v103 < 0x100)
          v104 = WTF::StringImpl::hashSlowCase(v100);
        else
          v104 = v103 >> 8;
        for (i = 0; ; v104 = i + v107)
        {
          v107 = v104 & v102;
          result = *(_QWORD *)(v101 + 16 * (v104 & v102));
          if (result != -1)
          {
            if (!result)
            {
              v105 = 0;
              goto LABEL_141;
            }
            result = WTF::equal((WTF *)result, v100, (const WTF::StringImpl *)a3);
            if ((result & 1) != 0)
              break;
          }
          ++i;
        }
        v105 = 1;
LABEL_141:
        v75 = v165;
        v74 = v166;
      }
      else
      {
        v105 = 0;
      }
      if (!v100)
        goto LABEL_145;
      if (*(_DWORD *)v100 != 2)
      {
        *(_DWORD *)v100 -= 2;
LABEL_145:
        if (!v105)
          goto LABEL_193;
        goto LABEL_146;
      }
      result = WTF::StringImpl::destroy(v100, (WTF::StringImpl *)a2);
      if (!v105)
        goto LABEL_193;
LABEL_146:
      v108 = *(WTF::StringImpl **)(v98 + 24);
      if (v108)
        *(_DWORD *)v108 += 2;
      v169 = v108;
      v109 = *v75;
      if (*v75)
      {
        v110 = *(_DWORD *)(v109 - 8);
        v111 = *((_DWORD *)v108 + 4);
        if (v111 < 0x100)
          v112 = WTF::StringImpl::hashSlowCase(v108);
        else
          v112 = v111 >> 8;
        for (j = 0; ; v112 = j + v114)
        {
          v114 = v112 & v110;
          v115 = *(WTF **)(v109 + 16 * v114);
          if (v115 != (WTF *)-1)
          {
            if (!v115)
            {
              v75 = v165;
              v74 = v166;
              v116 = (WTF::StringImpl **)*v165;
              if (!*v165)
                goto LABEL_168;
              v117 = *((unsigned int *)v116 - 1);
              v118 = &v116[2 * v117];
              goto LABEL_161;
            }
            if ((WTF::equal(v115, v108, (const WTF::StringImpl *)a3) & 1) != 0)
              break;
          }
          ++j;
        }
        v118 = (WTF::StringImpl **)(v109 + 16 * v114);
        v75 = v165;
        v116 = (WTF::StringImpl **)*v165;
        if (!*v165)
        {
          v74 = v166;
          goto LABEL_166;
        }
        v117 = *((unsigned int *)v116 - 1);
        v74 = v166;
LABEL_161:
        v116 += 2 * v117;
        if (v116 == v118)
          goto LABEL_168;
LABEL_166:
        if (v116 != v118)
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v75, v118);
      }
LABEL_168:
      v119 = *(_QWORD *)(v98 + 32);
      if (v119)
      {
        v120 = *v167;
        if (*v167)
        {
          v121 = *(_DWORD *)(v120 - 8);
          v122 = (~(v119 << 32) + v119) ^ ((unint64_t)(~(v119 << 32) + v119) >> 22);
          v123 = 9 * ((v122 + ~(v122 << 13)) ^ ((v122 + ~(v122 << 13)) >> 8));
          v124 = (v123 ^ (v123 >> 15)) + ~((v123 ^ (v123 >> 15)) << 27);
          v125 = v121 & ((v124 >> 31) ^ v124);
          v126 = *(_QWORD *)(v120 + 16 * v125);
          if (v126 != v119)
          {
            v127 = 1;
            while (v126)
            {
              v125 = ((_DWORD)v125 + v127) & v121;
              v126 = *(_QWORD *)(v120 + 16 * v125);
              ++v127;
              if (v126 == v119)
                goto LABEL_176;
            }
            v125 = *(unsigned int *)(v120 - 4);
          }
LABEL_176:
          if (v125 != *(_DWORD *)(v120 - 4))
          {
            v128 = (_QWORD *)(v120 + 16 * v125);
            v129 = (_DWORD *)v128[1];
            *v128 = -1;
            v128[1] = 0;
            if (v129)
            {
              if (v129[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v129 + 8))(v129);
              else
                --v129[2];
            }
            ++*(_DWORD *)(*v167 - 16);
            v130 = *v167;
            if (*v167)
              v131 = *(_DWORD *)(v130 - 12) - 1;
            else
              v131 = -1;
            *(_DWORD *)(v130 - 12) = v131;
            v132 = *v167;
            if (*v167)
            {
              v133 = 6 * *(_DWORD *)(v132 - 12);
              v134 = *(_DWORD *)(v132 - 4);
              if (v133 < v134 && v134 >= 9)
                WTF::HashTable<WebCore::CSSStyleSheet *,WTF::KeyValuePair<WebCore::CSSStyleSheet *,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSStyleSheet *,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>>,WTF::DefaultHash<WebCore::CSSStyleSheet *>,WTF::HashMap<WebCore::CSSStyleSheet *,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,WTF::DefaultHash<WebCore::CSSStyleSheet *>,WTF::HashTraits<WebCore::CSSStyleSheet *>,WTF::HashTraits<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSStyleSheet *>>::rehash(v167, v134 >> 1);
            }
          }
        }
      }
      Inspector::CSSFrontendDispatcher::styleSheetRemoved(*((Inspector::CSSFrontendDispatcher **)v164 + 6), (const WTF::String *)&v169);
      result = (uint64_t)v169;
      v169 = 0;
      if (!result)
        goto LABEL_193;
      if (*(_DWORD *)result != 2)
      {
        *(_DWORD *)result -= 2;
LABEL_193:
        if ((v99 & 1) == 0)
          goto LABEL_194;
        goto LABEL_196;
      }
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
      if ((v99 & 1) == 0)
      {
LABEL_194:
        if (*(_DWORD *)(v98 + 8) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
        else
          --*(_DWORD *)(v98 + 8);
      }
LABEL_196:
      v136 = v72 + 1;
      v72 = v71;
      if (v136 != v71)
      {
        v72 = v136;
        while ((unint64_t)(*v72 + 1) <= 1)
        {
          if (++v72 == v71)
          {
            v72 = v71;
            break;
          }
        }
      }
      if (v72 == v74)
        goto LABEL_207;
    }
    v97 = 1;
    while (v96)
    {
      v95 = ((_DWORD)v95 + v97) & v92;
      v96 = *(_QWORD *)(v91 + 16 * v95);
      ++v97;
      if (v96 == v76)
        goto LABEL_123;
    }
LABEL_125:
    v98 = 0;
    goto LABEL_126;
  }
LABEL_207:
  v137 = v170;
  if (!HIDWORD(v171))
    goto LABEL_251;
  v138 = (WTF *)((char *)v170 + 8 * HIDWORD(v171));
  while (2)
  {
    v139 = *(WebCore::CSSStyleSheet **)v137;
    v140 = *v26;
    if (*v26
      || (result = WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(v26, 8u), (v140 = *v26) != 0))
    {
      v141 = *(_DWORD *)(v140 - 8);
    }
    else
    {
      v141 = 0;
    }
    v142 = ((unint64_t)v139 + ~((_QWORD)v139 << 32)) ^ (((unint64_t)v139 + ~((_QWORD)v139 << 32)) >> 22);
    v143 = 9 * ((v142 + ~(v142 << 13)) ^ ((v142 + ~(v142 << 13)) >> 8));
    v144 = (v143 ^ (v143 >> 15)) + ~((v143 ^ (v143 >> 15)) << 27);
    v145 = (v144 >> 31) ^ v144;
    v146 = v141 & v145;
    v147 = (WebCore::CSSStyleSheet **)(v140 + 8 * (v141 & v145));
    v148 = *v147;
    if (!*v147)
    {
LABEL_220:
      *v147 = v139;
      v151 = *v26;
      if (*v26)
        v152 = *(_DWORD *)(v151 - 12) + 1;
      else
        v152 = 1;
      *(_DWORD *)(v151 - 12) = v152;
      v153 = *v26;
      if (*v26)
        v154 = *(_DWORD *)(v153 - 12);
      else
        v154 = 0;
      v155 = (*(_DWORD *)(v153 - 16) + v154);
      v156 = *(unsigned int *)(v153 - 4);
      if (v156 > 0x400)
      {
        if (v156 > 2 * v155)
          goto LABEL_233;
      }
      else
      {
        if (3 * v156 > 4 * v155)
          goto LABEL_233;
        if (!(_DWORD)v156)
        {
          v157 = 8;
          goto LABEL_232;
        }
      }
      v157 = (_DWORD)v156 << (6 * *(_DWORD *)(v153 - 12) >= (2 * v156));
LABEL_232:
      result = WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(v26, v157);
      goto LABEL_233;
    }
    v149 = 0;
    v150 = 1;
    while (v148 != v139)
    {
      if (v148 == (WebCore::CSSStyleSheet *)-1)
        v149 = v147;
      v146 = (v146 + v150) & v141;
      v147 = (WebCore::CSSStyleSheet **)(v140 + 8 * v146);
      v148 = *v147;
      ++v150;
      if (!*v147)
      {
        if (v149)
        {
          *v149 = 0;
          --*(_DWORD *)(*v26 - 16);
          v147 = v149;
        }
        goto LABEL_220;
      }
    }
LABEL_233:
    v158 = *((_QWORD *)v164 + 10);
    if (v158)
    {
      v159 = *(_DWORD *)(v158 - 8);
      v160 = v159 & v145;
      v161 = *(WebCore::CSSStyleSheet **)(v158 + 16 * (v159 & v145));
      if (v161 != v139)
      {
        v162 = 1;
        while (v161)
        {
          v160 = (v160 + v162) & v159;
          v161 = *(WebCore::CSSStyleSheet **)(v158 + 16 * v160);
          ++v162;
          if (v161 == v139)
            goto LABEL_245;
        }
        goto LABEL_239;
      }
    }
    else
    {
LABEL_239:
      v163 = (WebCore::CSSStyleSheet **)WebCore::InspectorCSSAgent::bindStyleSheet(v164, v139);
      result = (uint64_t)WebCore::InspectorStyleSheet::buildObjectForStyleSheetInfo(v163, &v169);
      if (v169)
      {
        v168 = v169;
        v169 = 0;
        Inspector::CSSFrontendDispatcher::styleSheetAdded();
        if (*(_DWORD *)v168 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v168;
        result = (uint64_t)v169;
        v169 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
            result = WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)result;
        }
      }
    }
LABEL_245:
    v137 = (WTF *)((char *)v137 + 8);
    if (v137 != v138)
      continue;
    break;
  }
  v137 = v170;
LABEL_251:
  if (v137)
  {
    v170 = 0;
    LODWORD(v171) = 0;
    result = WTF::fastFree(v137, (void *)a2);
  }
  if (v172)
    return WTF::fastFree((WTF *)(v172 - 16), (void *)a2);
  return result;
}

WTF::StringImpl *WebCore::InspectorCSSAgent::bindStyleSheet(WebCore::InspectorCSSAgent *this, WebCore::CSSStyleSheet *a2)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WebCore::CSSStyleSheet *v11;
  int v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::String *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  const WTF::StringImpl *v42;
  uint64_t *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  WTF::StringImpl **v48;
  int i;
  uint64_t v50;
  WTF::StringImpl **v51;
  WTF *v52;
  uint64_t *v53;
  _BYTE *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  int v58;
  WTF::StringImpl **v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  WebCore::CSSStyleSheet **v73;
  WebCore::CSSStyleSheet *v74;
  WebCore::CSSStyleSheet **v75;
  int v76;
  WebCore::CSSStyleSheet *v77;
  WebCore::CSSStyleSheet *v78;
  uint64_t v79;
  int v80;
  WebCore::CSSStyleSheet *v81;
  WebCore::CSSStyleSheet *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  unsigned int v87;
  uint64_t *v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unsigned int v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  int v98;
  WTF **v99;
  uint64_t v100;
  WTF *v101;
  uint64_t v102;
  _DWORD *v103;
  WTF *v104;
  uint64_t v105;
  int v106;
  char **v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  unint64_t v111;
  unsigned int v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  WTF::StringImpl *v118;
  char *v120;
  uint64_t *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;

  v5 = (uint64_t *)((char *)this + 80);
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    v6 = *(_DWORD *)(v4 - 8);
    v7 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WebCore::CSSStyleSheet **)(v4 + 16 * v10);
    if (v11 == a2)
    {
LABEL_6:
      v13 = *(WTF::StringImpl **)(v4 + 16 * v10 + 8);
      if (v13)
      {
        v14 = *((_DWORD *)v13 + 2);
        *((_DWORD *)v13 + 2) = v14 + 1;
        v123 = 0;
        if (v14)
          goto LABEL_179;
        goto LABEL_8;
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WebCore::CSSStyleSheet **)(v4 + 16 * v10);
        ++v12;
        if (v11 == a2)
          goto LABEL_6;
      }
    }
  }
  v123 = 0;
  v15 = (WTF::String *)*((unsigned int *)this + 32);
  *((_DWORD *)this + 32) = (_DWORD)v15 + 1;
  WTF::String::number(v15);
  v17 = WebCore::CSSStyleSheet::ownerDocument(a2);
  v18 = *(_QWORD *)(*((_QWORD *)this + 2) + 200);
  v121 = v5;
  if (!a2)
  {
    v19 = (char *)this + 132;
    if (*((_BYTE *)this + 132))
      goto LABEL_11;
LABEL_23:
    v25 = *((_QWORD *)this + 12);
    v120 = v19;
    if (!v25)
      goto LABEL_36;
    v26 = *(_DWORD *)(v25 - 8);
    v27 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
    v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
    v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
    v30 = v26 & ((v29 >> 31) ^ v29);
    v31 = (uint64_t *)(v25 + 24 * v30);
    v32 = *v31;
    if (*v31 != v17)
    {
      v33 = 1;
      while (v32)
      {
        v30 = (v30 + v33) & v26;
        v31 = (uint64_t *)(v25 + 24 * v30);
        v32 = *v31;
        ++v33;
        if (*v31 == v17)
          goto LABEL_30;
      }
      v31 = (uint64_t *)(v25 + 24 * *(unsigned int *)(v25 - 4));
    }
LABEL_30:
    if (v31 == (uint64_t *)(v25 + 24 * *(unsigned int *)(v25 - 4)) || (v34 = *((unsigned int *)v31 + 5), !(_DWORD)v34))
    {
LABEL_36:
      v20 = 18;
      goto LABEL_37;
    }
    v35 = v31[1];
    v36 = 8 * v34;
    v20 = 18;
    while (*(WebCore::CSSStyleSheet **)(*(_QWORD *)v35 + 32) != a2)
    {
      v35 += 8;
      v36 -= 8;
      if (!v36)
        goto LABEL_37;
    }
    goto LABEL_12;
  }
  ++*((_DWORD *)a2 + 2);
  v19 = (char *)this + 132;
  if (!*((_BYTE *)this + 132))
  {
    v21 = *((_QWORD *)a2 + 12);
    if (!v21 || !*(_QWORD *)(v21 + 8))
    {
      v22 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 3) + 24);
      if (!v22)
        goto LABEL_21;
      v23 = *(_DWORD *)v22;
      v24 = *((_DWORD *)v22 + 1);
      *(_DWORD *)v22 += 2;
      if (v23)
      {
        *(_DWORD *)v22 = v23;
        if (v24)
          goto LABEL_18;
LABEL_21:
        v120 = (char *)this + 132;
        v20 = 17;
        goto LABEL_37;
      }
      WTF::StringImpl::destroy(v22, v16);
      if (!v24)
        goto LABEL_21;
    }
LABEL_18:
    if (*(_BYTE *)(*((_QWORD *)a2 + 3) + 120))
    {
      v120 = (char *)this + 132;
      v20 = 16;
      goto LABEL_37;
    }
    goto LABEL_23;
  }
LABEL_11:
  v120 = v19;
LABEL_12:
  v20 = 19;
LABEL_37:
  if (v17 && (v37 = *(WTF::StringImpl **)(v17 + 736)) != 0 || (v37 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
    *(_DWORD *)v37 += 2;
  v38 = WTF::fastMalloc((WTF *)0x58);
  v39 = v38;
  *(_DWORD *)(v38 + 8) = 1;
  *(_QWORD *)v38 = off_1E33EE810;
  *(_QWORD *)(v38 + 16) = v18;
  if (v122)
    *(_DWORD *)v122 += 2;
  *(_QWORD *)(v38 + 24) = v122;
  *(_QWORD *)(v38 + 32) = a2;
  *(_DWORD *)(v38 + 40) = v20;
  if (v37)
    *(_DWORD *)v37 += 2;
  *(_QWORD *)(v38 + 48) = v37;
  *(_QWORD *)(v38 + 64) = 0;
  *(_QWORD *)(v38 + 72) = 0;
  *(_QWORD *)(v38 + 80) = (char *)this + 40;
  v40 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v40 = 0;
  *(_BYTE *)(v40 + 8) = 0;
  *(_QWORD *)(v40 + 16) = 0;
  *(_QWORD *)(v39 + 56) = v40;
  v123 = (WTF::StringImpl *)v39;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v41);
    else
      *(_DWORD *)v37 -= 2;
  }
  v43 = (uint64_t *)((char *)this + 72);
  v44 = *((_QWORD *)this + 9);
  if (v44
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)this + 9, 8u), (v44 = *v43) != 0))
  {
    v45 = *(_DWORD *)(v44 - 8);
  }
  else
  {
    v45 = 0;
  }
  v46 = *((_DWORD *)v122 + 4);
  if (v46 < 0x100)
    v47 = WTF::StringImpl::hashSlowCase(v122);
  else
    v47 = v46 >> 8;
  v48 = 0;
  for (i = 1; ; ++i)
  {
    v50 = v47 & v45;
    v51 = (WTF::StringImpl **)(v44 + 16 * v50);
    v52 = *v51;
    if (*v51 != (WTF::StringImpl *)-1)
      break;
    v48 = (WTF::StringImpl **)(v44 + 16 * v50);
LABEL_60:
    v47 = i + v50;
  }
  if (!v52)
  {
    if (v48)
    {
      *v48 = 0;
      v48[1] = 0;
      --*(_DWORD *)(*v43 - 16);
      v51 = v48;
    }
    v53 = v121;
    v54 = v120;
    if (v122)
      *(_DWORD *)v122 += 2;
    *v51 = v122;
    v55 = v123;
    if (v123)
      ++*((_DWORD *)v123 + 2);
    v56 = v51[1];
    v51[1] = v55;
    if (v56)
    {
      if (*((_DWORD *)v56 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v56 + 8))(v56);
      else
        --*((_DWORD *)v56 + 2);
    }
    v57 = *v43;
    if (*v43)
      v58 = *(_DWORD *)(v57 - 12) + 1;
    else
      v58 = 1;
    *(_DWORD *)(v57 - 12) = v58;
    v62 = *v43;
    if (*v43)
      v63 = *(_DWORD *)(v62 - 12);
    else
      v63 = 0;
    v64 = (*(_DWORD *)(v62 - 16) + v63);
    v65 = *(unsigned int *)(v62 - 4);
    if (v65 > 0x400)
    {
      if (v65 > 2 * v64)
        goto LABEL_88;
    }
    else
    {
      if (3 * v65 > 4 * v64)
        goto LABEL_88;
      if (!(_DWORD)v65)
      {
        v66 = 8;
        goto LABEL_87;
      }
    }
    v66 = (_DWORD)v65 << (6 * *(_DWORD *)(v62 - 12) >= (2 * v65));
LABEL_87:
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)this + 9, v66);
    goto LABEL_88;
  }
  if (!WTF::equal(v52, v122, v42))
    goto LABEL_60;
  v59 = (WTF::StringImpl **)(v44 + 16 * v50 + 8);
  v60 = v123;
  if (v123)
    ++*((_DWORD *)v123 + 2);
  v61 = *v59;
  *v59 = v60;
  v54 = v120;
  v53 = v121;
  if (v61)
  {
    if (*((_DWORD *)v61 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v61 + 8))(v61);
    else
      --*((_DWORD *)v61 + 2);
  }
LABEL_88:
  v67 = *v53;
  if (*v53
    || (WTF::HashTable<WebCore::CSSStyleSheet *,WTF::KeyValuePair<WebCore::CSSStyleSheet *,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSStyleSheet *,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>>,WTF::DefaultHash<WebCore::CSSStyleSheet *>,WTF::HashMap<WebCore::CSSStyleSheet *,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,WTF::DefaultHash<WebCore::CSSStyleSheet *>,WTF::HashTraits<WebCore::CSSStyleSheet *>,WTF::HashTraits<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSStyleSheet *>>::rehash(v53, 8u), (v67 = *v53) != 0))
  {
    v68 = *(_DWORD *)(v67 - 8);
  }
  else
  {
    v68 = 0;
  }
  v69 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v70 = 9 * ((v69 + ~(v69 << 13)) ^ ((v69 + ~(v69 << 13)) >> 8));
  v71 = (v70 ^ (v70 >> 15)) + ~((v70 ^ (v70 >> 15)) << 27);
  v72 = v68 & ((v71 >> 31) ^ v71);
  v73 = (WebCore::CSSStyleSheet **)(v67 + 16 * v72);
  v74 = *v73;
  if (!*v73)
  {
LABEL_99:
    *v73 = a2;
    v77 = v123;
    if (v123)
      ++*((_DWORD *)v123 + 2);
    v78 = v73[1];
    v73[1] = v77;
    if (v78)
    {
      if (*((_DWORD *)v78 + 2) == 1)
        (*(void (**)(WebCore::CSSStyleSheet *))(*(_QWORD *)v78 + 8))(v78);
      else
        --*((_DWORD *)v78 + 2);
    }
    v79 = *v53;
    if (*v53)
      v80 = *(_DWORD *)(v79 - 12) + 1;
    else
      v80 = 1;
    *(_DWORD *)(v79 - 12) = v80;
    v83 = *v53;
    if (*v53)
      v84 = *(_DWORD *)(v83 - 12);
    else
      v84 = 0;
    v85 = (*(_DWORD *)(v83 - 16) + v84);
    v86 = *(unsigned int *)(v83 - 4);
    if (v86 > 0x400)
    {
      if (v86 > 2 * v85)
        goto LABEL_122;
    }
    else
    {
      if (3 * v86 > 4 * v85)
        goto LABEL_122;
      if (!(_DWORD)v86)
      {
        v87 = 8;
        goto LABEL_121;
      }
    }
    v87 = (_DWORD)v86 << (6 * *(_DWORD *)(v83 - 12) >= (2 * v86));
LABEL_121:
    WTF::HashTable<WebCore::CSSStyleSheet *,WTF::KeyValuePair<WebCore::CSSStyleSheet *,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSStyleSheet *,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>>,WTF::DefaultHash<WebCore::CSSStyleSheet *>,WTF::HashMap<WebCore::CSSStyleSheet *,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,WTF::DefaultHash<WebCore::CSSStyleSheet *>,WTF::HashTraits<WebCore::CSSStyleSheet *>,WTF::HashTraits<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSStyleSheet *>>::rehash(v53, v87);
    goto LABEL_122;
  }
  v75 = 0;
  v76 = 1;
  while (v74 != a2)
  {
    if (v74 == (WebCore::CSSStyleSheet *)-1)
      v75 = v73;
    v72 = (v72 + v76) & v68;
    v73 = (WebCore::CSSStyleSheet **)(v67 + 16 * v72);
    v74 = *v73;
    ++v76;
    if (!*v73)
    {
      if (v75)
      {
        *v75 = 0;
        v75[1] = 0;
        --*(_DWORD *)(*v53 - 16);
        v73 = v75;
      }
      goto LABEL_99;
    }
  }
  v81 = v123;
  if (v123)
    ++*((_DWORD *)v123 + 2);
  v82 = v73[1];
  v73[1] = v81;
  if (v82)
  {
    if (*((_DWORD *)v82 + 2) == 1)
      (*(void (**)(WebCore::CSSStyleSheet *))(*(_QWORD *)v82 + 8))(v82);
    else
      --*((_DWORD *)v82 + 2);
  }
LABEL_122:
  if (!*v54)
    goto LABEL_174;
  v88 = (uint64_t *)((char *)this + 96);
  if (v17)
    *(_DWORD *)(v17 + 24) += 2;
  v89 = *v88;
  if (*v88
    || (WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::rehash((uint64_t *)this + 12, 8u, 0), (v89 = *v88) != 0))
  {
    v90 = *(_DWORD *)(v89 - 8);
  }
  else
  {
    v90 = 0;
  }
  v91 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
  v92 = 9 * ((v91 + ~(v91 << 13)) ^ ((v91 + ~(v91 << 13)) >> 8));
  v93 = (v92 ^ (v92 >> 15)) + ~((v92 ^ (v92 >> 15)) << 27);
  v94 = v90 & ((v93 >> 31) ^ v93);
  v95 = (uint64_t *)(v89 + 24 * v94);
  v96 = *v95;
  if (!*v95)
  {
LABEL_136:
    *v95 = v17;
    v99 = (WTF **)(v95 + 1);
    v100 = *((unsigned int *)v95 + 5);
    if ((_DWORD)v100)
    {
      v101 = *v99;
      v102 = 8 * v100;
      do
      {
        v103 = *(_DWORD **)v101;
        *(_QWORD *)v101 = 0;
        if (v103)
        {
          if (v103[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v103 + 8))(v103);
          else
            --v103[2];
        }
        v101 = (WTF *)((char *)v101 + 8);
        v102 -= 8;
      }
      while (v102);
    }
    v104 = *v99;
    if (*v99)
    {
      v95[1] = 0;
      *((_DWORD *)v95 + 4) = 0;
      WTF::fastFree(v104, v41);
    }
    *v99 = 0;
    v95[2] = 0;
    v105 = *v88;
    if (*v88)
      v106 = *(_DWORD *)(v105 - 12) + 1;
    else
      v106 = 1;
    *(_DWORD *)(v105 - 12) = v106;
    v108 = *v88;
    if (*v88)
      v109 = *(_DWORD *)(v108 - 12);
    else
      v109 = 0;
    v110 = (*(_DWORD *)(v108 - 16) + v109);
    v111 = *(unsigned int *)(v108 - 4);
    if (v111 > 0x400)
    {
      if (v111 > 2 * v110)
        goto LABEL_165;
    }
    else
    {
      if (3 * v111 > 4 * v110)
      {
LABEL_165:
        v107 = (char **)(v95 + 1);
        goto LABEL_166;
      }
      if (!(_DWORD)v111)
      {
        v112 = 8;
        goto LABEL_164;
      }
    }
    v112 = (_DWORD)v111 << (6 * *(_DWORD *)(v108 - 12) >= (2 * v111));
LABEL_164:
    v95 = WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::rehash(v88, v112, v95);
    goto LABEL_165;
  }
  v97 = 0;
  v98 = 1;
  while (v96 != v17)
  {
    if (v96 == -1)
      v97 = v95;
    v94 = (v94 + v98) & v90;
    v95 = (uint64_t *)(v89 + 24 * v94);
    v96 = *v95;
    ++v98;
    if (!*v95)
    {
      if (v97)
      {
        *v97 = 0;
        v97[1] = 0;
        v97[2] = 0;
        --*(_DWORD *)(*v88 - 16);
        v95 = v97;
      }
      goto LABEL_136;
    }
  }
  v107 = (char **)(v95 + 1);
  if (v17)
  {
    if (*(_DWORD *)(v17 + 24) == 2)
    {
      if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v17);
    }
    else
    {
      *(_DWORD *)(v17 + 24) -= 2;
    }
  }
LABEL_166:
  v113 = *((unsigned int *)v95 + 5);
  if ((_DWORD)v113 == *((_DWORD *)v95 + 4))
  {
    v114 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v107, v113 + 1, (unint64_t)&v123);
    v113 = *((unsigned int *)v95 + 5);
    v115 = *v107;
    v116 = *(_QWORD *)v114;
    if (*(_QWORD *)v114)
      ++*(_DWORD *)(v116 + 8);
    *(_QWORD *)&v115[8 * v113] = v116;
  }
  else
  {
    v117 = *v107;
    v118 = v123;
    if (v123)
      ++*((_DWORD *)v123 + 2);
    *(_QWORD *)&v117[8 * v113] = v118;
  }
  *((_DWORD *)v95 + 5) = v113 + 1;
LABEL_174:
  if (v122)
  {
    if (*(_DWORD *)v122 == 2)
      WTF::StringImpl::destroy(v122, v41);
    else
      *(_DWORD *)v122 -= 2;
  }
  v13 = v123;
  v123 = 0;
  if (v13)
  {
    v14 = *((_DWORD *)v13 + 2) - 1;
    if (*((_DWORD *)v13 + 2) != 1)
    {
LABEL_179:
      *((_DWORD *)v13 + 2) = v14;
      return v13;
    }
LABEL_8:
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v13 + 8))(v13);
  }
  return v13;
}

BOOL WebCore::InspectorCSSAgent::forcePseudoState(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  void *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  _BOOL8 v31;
  uint64_t v33;

  v3 = *(_QWORD *)(a1 + 112);
  if (!v3)
    return 0;
  if (!*(_DWORD *)(v3 - 12))
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
  if (!v4)
    return 0;
  ++*(_DWORD *)(v4 + 88);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = v5 & 0xFFFFFFFFFFFFLL;
  if ((v5 & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 8))
    return 0;
  v7 = *(_QWORD *)(v4 + 80);
  if (!v7)
    return 0;
  v9 = *(_DWORD *)(v7 - 8);
  v10 = (v6 + ~(v5 << 32)) ^ ((unint64_t)(v6 + ~(v5 << 32)) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  for (i = 1; ; v13 = (v15 + i++) & v9)
  {
    v15 = v13;
    v16 = *(_QWORD *)(v7 + 16 * v13);
    if (v16 != -1)
    {
      if (!v16)
        return 0;
      if (v16 == v6)
        break;
    }
  }
  v17 = *(_DWORD *)(v7 + 16 * v15 + 8);
  if (!v17)
    return 0;
  v18 = *(_QWORD *)(a1 + 112);
  if (!v18)
    return 0;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = 9 * ((v17 + ~(v17 << 15)) ^ ((v17 + ~(v17 << 15)) >> 10));
  v21 = (v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11);
  v22 = v19 & (v21 ^ HIWORD(v21));
  v23 = *(_DWORD *)(v18 + 16 * v22);
  if (v23 != v17)
  {
    v24 = 1;
    while (v23)
    {
      v22 = ((_DWORD)v22 + v24) & v19;
      v23 = *(_DWORD *)(v18 + 16 * v22);
      ++v24;
      if (v23 == v17)
        goto LABEL_18;
    }
    return 0;
  }
LABEL_18:
  WTF::HashTable<WebCore::CSSSelectorPseudoClass,WebCore::CSSSelectorPseudoClass,WTF::IdentityExtractor,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>>::HashTable(&v33, (unsigned __int8 **)(v18 + 16 * v22 + 8));
  if (!v33)
    return 0;
  v26 = *(_DWORD *)(v33 - 8);
  v27 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
  LODWORD(v28) = v26 & (((v27 ^ (v27 >> 6)) + ~((v27 ^ (v27 >> 6)) << 11)) ^ (((v27 ^ (v27 >> 6))
                                                                             + ~((v27 ^ (v27 >> 6)) << 11)) >> 16));
  v29 = *(unsigned __int8 *)(v33 + v28);
  if (v29 == a3)
  {
    v31 = 1;
  }
  else
  {
    v30 = 1;
    do
    {
      v31 = v29 != 255;
      if (v29 == 255)
        break;
      v28 = ((_DWORD)v28 + v30) & v26;
      v29 = *(unsigned __int8 *)(v33 + v28);
      ++v30;
    }
    while (v29 != a3);
  }
  WTF::fastFree((WTF *)(v33 - 16), v25);
  return v31;
}

WTF::StringImpl *WebCore::InspectorCSSAgent::getMatchedStylesForNode@<X0>(WebCore::InspectorCSSAgent *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X8>)
{
  WTF::StringImpl *v5;
  WebCore::InspectorDOMAgent *v8;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  int v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  _QWORD *v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  WTF::JSONImpl::Object *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  _QWORD *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WebCore::InspectorStyleSheet *v46;
  WTF::StringImpl *v47;
  WebCore::CSSStyleDeclaration *v48;
  WTF::StringImpl *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  void *v63;
  void *v64;
  WTF::StringImpl **v65;
  WTF *v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  _DWORD **v70;
  uint64_t v71;
  _DWORD *v72;
  _DWORD **v73;
  uint64_t v74;
  _DWORD *v75;
  WTF *v76;
  uint64_t v77;
  _DWORD *v78;
  int i;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  const WTF::String *v86;
  WTF::StringImpl *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  void *v106;
  void *v107;
  WTF::StringImpl **v108;
  WTF *v109;
  _DWORD **v110;
  uint64_t v111;
  _DWORD *v112;
  _DWORD **v113;
  uint64_t v114;
  _DWORD *v115;
  WTF *v116;
  uint64_t v117;
  _DWORD *v118;
  WTF *v119;
  uint64_t v120;
  _QWORD *v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  uint64_t v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  uint64_t v129;
  WTF *v130;
  uint64_t v131;
  _DWORD *v132;
  _BYTE *v133;
  WTF *v134;
  int v135;
  unsigned int v136;
  uint64_t v137;
  WTF *v138;
  int v139;
  unsigned int v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  char v145;
  char v146;
  char v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;

  v141 = 0;
  v8 = *(WebCore::InspectorDOMAgent **)(*((_QWORD *)a1 + 2) + 40);
  if (!v8)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = v143;
    v141 = v143;
    if (!v143)
    {
LABEL_7:
      *(_QWORD *)a5 = v14;
      goto LABEL_8;
    }
LABEL_6:
    *(_DWORD *)v14 += 2;
    goto LABEL_7;
  }
  v11 = WebCore::InspectorDOMAgent::assertElement(v8, &v141, a2);
  if (!v11)
  {
    v14 = v141;
    if (!v141)
      goto LABEL_7;
    goto LABEL_6;
  }
  v13 = v11;
  if ((*(_BYTE *)(v11 + 22) & 8) == 0)
  {
LABEL_4:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_8:
    *(_DWORD *)(a5 + 24) = 1;
    goto LABEL_9;
  }
  if ((~*(unsigned __int16 *)(v11 + 28) & 0x408) != 0
    || (v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 368))(v11)) == 0)
  {
    v17 = *(_QWORD **)(v13 + 40);
    if (*v17)
      v18 = (*(_WORD *)(*v17 + 28) & 0x80) == 0;
    else
      v18 = 1;
    if (v18)
      v124 = v17[1] + 1328;
    else
      v124 = *v17 + 216;
    v19 = *(_QWORD *)v124;
    if (!*(_QWORD *)(*(_QWORD *)v124 + 32))
    {
      if (*(_QWORD *)(v19 + 24))
        WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v19);
      else
        WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v19);
      v126 = *(_QWORD *)(v19 + 32);
      if (*(_DWORD *)(v126 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
        WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v126 + 32), v125);
      if (*(_BYTE *)(v126 + 242)
        || *(_BYTE *)(v126 + 243)
        || *(_BYTE *)(v126 + 244)
        || *(_BYTE *)(v126 + 245)
        || *(_BYTE *)(v126 + 246)
        || *(_BYTE *)(v126 + 247)
        || *(_BYTE *)(v126 + 248))
      {
        *(_BYTE *)(v19 + 236) = 1;
      }
    }
    v20 = 0;
    v21 = *(_QWORD *)(v19 + 32);
    LOBYTE(v143) = 0;
    v22 = 1;
    v23 = v13;
    v147 = 0;
  }
  else
  {
    if ((~*(unsigned __int16 *)(v13 + 28) & 0x408) != 0
      || (v20 = v16, !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 368))(v13)))
    {
      __break(0xC471u);
      JUMPOUT(0x195E05350);
    }
    v120 = *(_QWORD *)(v13 + 112);
    if (!v120)
      goto LABEL_4;
    v23 = *(_QWORD *)(v120 + 8);
    if (!v23)
      goto LABEL_4;
    v121 = *(_QWORD **)(v23 + 40);
    if (*v121)
      v122 = (*(_WORD *)(*v121 + 28) & 0x80) == 0;
    else
      v122 = 1;
    if (v122)
      v127 = v121[1] + 1328;
    else
      v127 = *v121 + 216;
    v123 = *(_QWORD *)v127;
    if (!*(_QWORD *)(*(_QWORD *)v127 + 32))
    {
      if (*(_QWORD *)(v123 + 24))
        WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v123);
      else
        WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v123);
      v129 = *(_QWORD *)(v123 + 32);
      if (*(_DWORD *)(v129 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
        WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v129 + 32), v128);
      if (*(_BYTE *)(v129 + 242)
        || *(_BYTE *)(v129 + 243)
        || *(_BYTE *)(v129 + 244)
        || *(_BYTE *)(v129 + 245)
        || *(_BYTE *)(v129 + 246)
        || *(_BYTE *)(v129 + 247)
        || *(_BYTE *)(v129 + 248))
      {
        *(_BYTE *)(v123 + 236) = 1;
      }
    }
    v21 = *(_QWORD *)(v123 + 32);
    v5 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
    {
      *(_DWORD *)v5 += 2;
      LOBYTE(v143) = 0;
      *(_DWORD *)v5 += 2;
    }
    v22 = 0;
    LODWORD(v143) = v20;
    v144 = v5;
    v145 = 0;
    v146 = 0;
    v147 = 1;
  }
  WebCore::Style::Resolver::pseudoStyleRulesForElement(v21, (const WebCore::Element *)v23, (uint64_t)&v143, 14, (uint64_t)&v138);
  if (v147)
  {
    v25 = v144;
    v144 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v24);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  if (v5)
    v26 = v22;
  else
    v26 = 1;
  if ((v26 & 1) == 0)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v24);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::InspectorCSSAgent::buildArrayForMatchedRuleList(&v137, a1, (uint64_t **)&v138, v21, (const WebCore::Element *)v23, v20);
  if ((~*(unsigned __int16 *)(v13 + 28) & 0x408) != 0
    || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 368))(v13))
  {
    v133 = a4;
    if (!a3[1] || *a3)
    {
      v28 = WTF::fastMalloc((WTF *)0x20);
      WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v28);
      for (i = 1; i != 24; ++i)
      {
        v80 = 20;
        switch(i)
        {
          case 1:
            break;
          case 2:
            v80 = 21;
            break;
          case 3:
            v80 = 22;
            break;
          case 4:
            v80 = 23;
            break;
          case 5:
            LOBYTE(v143) = 0;
            v145 = 0;
            v81 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v23 + 264))(v23, &v143);
            if (v145)
            {
              v82 = v144;
              v144 = 0;
              if (v82)
              {
                if (*(_DWORD *)v82 == 2)
                  WTF::StringImpl::destroy(v82, v12);
                else
                  *(_DWORD *)v82 -= 2;
              }
            }
            if ((*(_QWORD *)(v81 + 16) & 0x1FLL) != 2)
              continue;
            v80 = 24;
            break;
          case 6:
            v80 = 25;
            break;
          case 7:
            v80 = 26;
            break;
          case 8:
            v80 = 27;
            break;
          case 9:
            if ((*(_BYTE *)(v23 + 23) & 0x20) == 0)
              continue;
            v80 = 28;
            break;
          case 10:
            v80 = 35;
            break;
          case 11:
            v80 = 29;
            break;
          case 12:
            v80 = 30;
            break;
          case 13:
            v80 = 31;
            break;
          case 14:
            v80 = 32;
            break;
          case 15:
            v80 = 33;
            break;
          case 16:
            v80 = 34;
            break;
          case 17:
            v80 = 37;
            break;
          case 18:
            v80 = 38;
            break;
          case 19:
            v80 = 39;
            break;
          case 20:
            v80 = 40;
            break;
          case 21:
            v80 = 41;
            break;
          case 22:
            v80 = 36;
            break;
          case 23:
            goto LABEL_43;
          default:
            continue;
        }
        LODWORD(v143) = i;
        v83 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
        if (*MEMORY[0x1E0CBF2F8])
          *(_DWORD *)v83 += 2;
        v144 = v83;
        v145 = 0;
        v146 = 0;
        v147 = 1;
        WebCore::Style::Resolver::pseudoStyleRulesForElement(v21, (const WebCore::Element *)v23, (uint64_t)&v143, 14, (uint64_t)&v134);
        if (v147)
        {
          v84 = v144;
          v144 = 0;
          if (v84)
          {
            if (*(_DWORD *)v84 == 2)
              v84 = (WTF::StringImpl *)WTF::StringImpl::destroy(v84, v12);
            else
              *(_DWORD *)v84 -= 2;
          }
        }
        if (v136)
        {
          WTF::JSONImpl::Object::create(v84);
          v85 = v143;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)v80);
          WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v142, v86);
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v85 + 2, &v148, (const WTF::StringImpl *)&v149, (uint64_t)&v143);
          if (v145)
          {
            v88 = (uint64_t *)((char *)v85 + 24);
            v89 = *((unsigned int *)v85 + 9);
            if ((_DWORD)v89 == *((_DWORD *)v85 + 8))
            {
              v110 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v88, v89 + 1, (unint64_t)&v148);
              v89 = *((unsigned int *)v85 + 9);
              v111 = *((_QWORD *)v85 + 3);
              v112 = *v110;
              if (*v110)
                *v112 += 2;
              *(_QWORD *)(v111 + 8 * v89) = v112;
            }
            else
            {
              v90 = *v88;
              v91 = v148;
              if (v148)
                *(_DWORD *)v148 += 2;
              *(_QWORD *)(v90 + 8 * v89) = v91;
            }
            *((_DWORD *)v85 + 9) = v89 + 1;
          }
          v92 = v149;
          v149 = 0;
          if (v92)
          {
            if (*(_DWORD *)v92 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v92;
          }
          v93 = v142;
          v142 = 0;
          if (v93)
          {
            if (*(_DWORD *)v93 == 2)
              WTF::StringImpl::destroy(v93, v87);
            else
              *(_DWORD *)v93 -= 2;
          }
          v94 = v148;
          v148 = 0;
          if (v94)
          {
            if (*(_DWORD *)v94 == 2)
              WTF::StringImpl::destroy(v94, v87);
            else
              *(_DWORD *)v94 -= 2;
          }
          WebCore::InspectorCSSAgent::buildArrayForMatchedRuleList((uint64_t *)&v142, a1, (uint64_t **)&v134, v21, (const WebCore::Element *)v23, i);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v95 = v142;
          v142 = 0;
          v148 = v95;
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v85 + 2, &v149, (const WTF::StringImpl *)&v148, (uint64_t)&v143);
          if (v145)
          {
            v96 = (uint64_t *)((char *)v85 + 24);
            v97 = *((unsigned int *)v85 + 9);
            if ((_DWORD)v97 == *((_DWORD *)v85 + 8))
            {
              v113 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v96, v97 + 1, (unint64_t)&v149);
              v97 = *((unsigned int *)v85 + 9);
              v114 = *((_QWORD *)v85 + 3);
              v115 = *v113;
              if (*v113)
                *v115 += 2;
              *(_QWORD *)(v114 + 8 * v97) = v115;
            }
            else
            {
              v98 = *v96;
              v99 = v149;
              if (v149)
                *(_DWORD *)v149 += 2;
              *(_QWORD *)(v98 + 8 * v97) = v99;
            }
            *((_DWORD *)v85 + 9) = v97 + 1;
          }
          v100 = v148;
          v148 = 0;
          if (v100)
          {
            if (*(_DWORD *)v100 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v100;
          }
          v101 = v149;
          v149 = 0;
          if (v101)
          {
            if (*(_DWORD *)v101 == 2)
              WTF::StringImpl::destroy(v101, v12);
            else
              *(_DWORD *)v101 -= 2;
          }
          v102 = *(unsigned int *)(v28 + 28);
          if ((_DWORD)v102 == *(_DWORD *)(v28 + 24))
          {
            v103 = v102 + (v102 >> 2);
            if (v103 >= 0x10)
              v104 = v103 + 1;
            else
              v104 = 16;
            if (v104 <= v102 + 1)
              v105 = v102 + 1;
            else
              v105 = v104;
            if (v105 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x195E0609CLL);
            }
            v106 = *(void **)(v28 + 16);
            v107 = (void *)WTF::fastMalloc((WTF *)(8 * v105));
            *(_DWORD *)(v28 + 24) = v105;
            *(_QWORD *)(v28 + 16) = v107;
            memcpy(v107, v106, 8 * v102);
            if (v106)
            {
              if (*(void **)(v28 + 16) == v106)
              {
                *(_QWORD *)(v28 + 16) = 0;
                *(_DWORD *)(v28 + 24) = 0;
              }
              WTF::fastFree((WTF *)v106, v12);
            }
            v102 = *(unsigned int *)(v28 + 28);
            v108 = (WTF::StringImpl **)(*(_QWORD *)(v28 + 16) + 8 * v102);
          }
          else
          {
            v108 = (WTF::StringImpl **)(*(_QWORD *)(v28 + 16) + 8 * v102);
          }
          *v108 = v85;
          *(_DWORD *)(v28 + 28) = v102 + 1;
          if (v136)
          {
            v116 = v134;
            v117 = 8 * v136;
            do
            {
              v118 = *(_DWORD **)v116;
              *(_QWORD *)v116 = 0;
              if (v118)
              {
                if (*v118 == 1)
                  WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v118, v12);
                else
                  --*v118;
              }
              v116 = (WTF *)((char *)v116 + 8);
              v117 -= 8;
            }
            while (v117);
          }
        }
        v109 = v134;
        if (v134)
        {
          v134 = 0;
          v135 = 0;
          WTF::fastFree(v109, v12);
        }
      }
    }
    else
    {
      v28 = 0;
    }
LABEL_43:
    if (v133[1])
      v29 = *v133 == 0;
    else
      v29 = 0;
    if (v29)
    {
      v27 = 0;
      goto LABEL_252;
    }
    v27 = WTF::fastMalloc((WTF *)0x20);
    WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v27);
    while (1)
    {
      v23 = *(_QWORD *)(v23 + 32);
      if (!v23 || (*(_WORD *)(v23 + 28) & 8) == 0)
        goto LABEL_252;
      v30 = *(_QWORD **)(v23 + 40);
      if (*v30)
        v31 = (*(_WORD *)(*v30 + 28) & 0x80) == 0;
      else
        v31 = 1;
      if (v31)
        v67 = v30[1] + 1328;
      else
        v67 = *v30 + 216;
      v32 = *(_QWORD *)v67;
      if (!*(_QWORD *)(*(_QWORD *)v67 + 32))
      {
        if (*(_QWORD *)(v32 + 24))
          WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v32);
        else
          WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v32);
        v69 = *(_QWORD *)(v32 + 32);
        if (*(_DWORD *)(v69 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
          WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v69 + 32), v68);
        if (*(_BYTE *)(v69 + 242)
          || *(_BYTE *)(v69 + 243)
          || *(_BYTE *)(v69 + 244)
          || *(_BYTE *)(v69 + 245)
          || *(_BYTE *)(v69 + 246)
          || *(_BYTE *)(v69 + 247)
          || *(_BYTE *)(v69 + 248))
        {
          *(_BYTE *)(v32 + 236) = 1;
        }
      }
      v33 = *(_QWORD *)(v32 + 32);
      LOBYTE(v143) = 0;
      v147 = 0;
      WebCore::Style::Resolver::pseudoStyleRulesForElement(v33, (const WebCore::Element *)v23, (uint64_t)&v143, 14, (uint64_t)&v134);
      WTF::JSONImpl::Object::create(v34);
      v35 = v143;
      WebCore::InspectorCSSAgent::buildArrayForMatchedRuleList((uint64_t *)&v142, a1, (uint64_t **)&v134, v21, (const WebCore::Element *)v23, 0);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v36 = v142;
      v142 = 0;
      v148 = v36;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v35 + 2, &v149, (const WTF::StringImpl *)&v148, (uint64_t)&v143);
      if (v145)
      {
        v37 = (uint64_t *)((char *)v35 + 24);
        v38 = *((unsigned int *)v35 + 9);
        if ((_DWORD)v38 == *((_DWORD *)v35 + 8))
        {
          v70 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v37, v38 + 1, (unint64_t)&v149);
          v38 = *((unsigned int *)v35 + 9);
          v71 = *((_QWORD *)v35 + 3);
          v72 = *v70;
          if (*v70)
            *v72 += 2;
          *(_QWORD *)(v71 + 8 * v38) = v72;
        }
        else
        {
          v39 = *v37;
          v40 = v149;
          if (v149)
            *(_DWORD *)v149 += 2;
          *(_QWORD *)(v39 + 8 * v38) = v40;
        }
        *((_DWORD *)v35 + 9) = v38 + 1;
      }
      v41 = v148;
      v148 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v41;
      }
      v42 = v149;
      v149 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v12);
        else
          *(_DWORD *)v42 -= 2;
      }
      if ((*(_WORD *)(v23 + 28) & 0x70) != 0)
        break;
LABEL_95:
      v59 = *(unsigned int *)(v27 + 28);
      if ((_DWORD)v59 == *(_DWORD *)(v27 + 24))
      {
        v60 = v59 + (v59 >> 2);
        if (v60 >= 0x10)
          v61 = v60 + 1;
        else
          v61 = 16;
        if (v61 <= v59 + 1)
          v62 = v59 + 1;
        else
          v62 = v61;
        if (v62 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x195E060A4);
        }
        v63 = *(void **)(v27 + 16);
        v64 = (void *)WTF::fastMalloc((WTF *)(8 * v62));
        *(_DWORD *)(v27 + 24) = v62;
        *(_QWORD *)(v27 + 16) = v64;
        memcpy(v64, v63, 8 * v59);
        if (v63)
        {
          if (*(void **)(v27 + 16) == v63)
          {
            *(_QWORD *)(v27 + 16) = 0;
            *(_DWORD *)(v27 + 24) = 0;
          }
          WTF::fastFree((WTF *)v63, v12);
        }
        v59 = *(unsigned int *)(v27 + 28);
        v65 = (WTF::StringImpl **)(*(_QWORD *)(v27 + 16) + 8 * v59);
      }
      else
      {
        v65 = (WTF::StringImpl **)(*(_QWORD *)(v27 + 16) + 8 * v59);
      }
      *v65 = v35;
      *(_DWORD *)(v27 + 28) = v59 + 1;
      if (v136)
      {
        v76 = v134;
        v77 = 8 * v136;
        do
        {
          v78 = *(_DWORD **)v76;
          *(_QWORD *)v76 = 0;
          if (v78)
          {
            if (*v78 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v78, v12);
            else
              --*v78;
          }
          v76 = (WTF *)((char *)v76 + 8);
          v77 -= 8;
        }
        while (v77);
      }
      v66 = v134;
      if (v134)
      {
        v134 = 0;
        v135 = 0;
        WTF::fastFree(v66, v12);
      }
    }
    *(_DWORD *)(v23 + 24) += 2;
    v43 = WebCore::StyledElement::cssomStyle((WebCore::StyledElement *)v23, v12);
    if (!(*(unsigned int (**)(_QWORD *))(*v43 + 72))(v43))
    {
LABEL_93:
      if (*(_DWORD *)(v23 + 24) == 2)
      {
        if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v23, v12);
      }
      else
      {
        *(_DWORD *)(v23 + 24) -= 2;
      }
      goto LABEL_95;
    }
    v44 = WebCore::InspectorCSSAgent::asInspectorStyleSheet(a1, v23);
    v46 = (WebCore::InspectorStyleSheet *)v44;
    v47 = *(WTF::StringImpl **)(v44 + 24);
    if (v47)
      *(_DWORD *)v47 += 4;
    v48 = (WebCore::CSSStyleDeclaration *)WebCore::StyledElement::cssomStyle(*(WebCore::StyledElement **)(v44 + 88), v45);
    WebCore::InspectorStyleSheet::buildObjectForStyle(v46, v48, (uint64_t *)&v142);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v49 = v142;
    v142 = 0;
    v148 = v49;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v35 + 2, &v149, (const WTF::StringImpl *)&v148, (uint64_t)&v143);
    if (v145)
    {
      v50 = (uint64_t *)((char *)v35 + 24);
      v51 = *((unsigned int *)v35 + 9);
      if ((_DWORD)v51 == *((_DWORD *)v35 + 8))
      {
        v73 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v50, v51 + 1, (unint64_t)&v149);
        v51 = *((unsigned int *)v35 + 9);
        v74 = *((_QWORD *)v35 + 3);
        v75 = *v73;
        if (*v73)
          *v75 += 2;
        *(_QWORD *)(v74 + 8 * v51) = v75;
      }
      else
      {
        v52 = *v50;
        v53 = v149;
        if (v149)
          *(_DWORD *)v149 += 2;
        *(_QWORD *)(v52 + 8 * v51) = v53;
      }
      *((_DWORD *)v35 + 9) = v51 + 1;
    }
    v54 = v148;
    v148 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v54;
    }
    v55 = v149;
    v149 = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
        WTF::StringImpl::destroy(v55, v12);
      else
        *(_DWORD *)v55 -= 2;
    }
    v56 = v142;
    v142 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 1)
      {
        WTF::JSONImpl::Value::operator delete();
        if (!v47)
          goto LABEL_93;
        goto LABEL_89;
      }
      --*(_DWORD *)v56;
    }
    if (!v47)
      goto LABEL_93;
LABEL_89:
    v57 = *(_DWORD *)v47 - 2;
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::destroy(v47, v12);
      v57 = *(_DWORD *)v47;
    }
    else
    {
      *(_DWORD *)v47 = v57;
    }
    v58 = v57 - 2;
    if (v58)
      *(_DWORD *)v47 = v58;
    else
      WTF::StringImpl::destroy(v47, v12);
    goto LABEL_93;
  }
  v27 = 0;
  v28 = 0;
LABEL_252:
  *(_QWORD *)a5 = v137;
  *(_QWORD *)(a5 + 8) = v28;
  *(_QWORD *)(a5 + 16) = v27;
  *(_DWORD *)(a5 + 24) = 0;
  if (v140)
  {
    v130 = v138;
    v131 = 8 * v140;
    do
    {
      v132 = *(_DWORD **)v130;
      *(_QWORD *)v130 = 0;
      if (v132)
      {
        if (*v132 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v132, v12);
        else
          --*v132;
      }
      v130 = (WTF *)((char *)v130 + 8);
      v131 -= 8;
    }
    while (v131);
  }
  v119 = v138;
  if (v138)
  {
    v138 = 0;
    v139 = 0;
    WTF::fastFree(v119, v12);
  }
LABEL_9:
  result = v141;
  if (v141)
  {
    if (*(_DWORD *)v141 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v141, v12);
    else
      *(_DWORD *)v141 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorCSSAgent::buildArrayForMatchedRuleList(uint64_t *a1, WebCore::InspectorCSSAgent *a2, uint64_t **a3, uint64_t a4, const WebCore::Element *a5, int a6)
{
  WTF::JSONImpl::ArrayBase *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  WebCore::CSSStyleSheet ***v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  WebCore::CSSStyleRule *v32;
  uint64_t v33;
  char v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::JSONImpl::Object *v37;
  __n128 v38;
  const WebCore::CSSSelector *v39;
  WTF::JSONImpl::Value *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  _DWORD *v55;
  WTF::StringImpl *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  _DWORD *v61;
  WTF::StringImpl *result;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  void *v68;
  void *v69;
  _QWORD *v70;
  WTF::StringImpl *v71;
  _QWORD *v72;
  _DWORD **v73;
  uint64_t v74;
  _DWORD *v75;
  _DWORD **v76;
  uint64_t v77;
  _DWORD *v78;
  WTF *v79;
  WebCore::InspectorCSSAgent *v81;
  uint64_t *v82;
  WTF::StringImpl *v83;
  _BYTE v84[2];
  char v85[4];
  int v86;
  WTF::StringImpl *v87;
  char v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;
  WTF *v94;
  uint64_t v95;
  _DWORD v96[33];
  char v97;
  _DWORD *v98;
  WTF::StringImpl *v99;
  _QWORD v100[2];
  char v101;

  v12 = (WTF::JSONImpl::ArrayBase *)WTF::fastMalloc((WTF *)0x20);
  *a1 = WTF::JSONImpl::ArrayBase::ArrayBase(v12);
  v85[0] = 1;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v94 = (WTF *)v96;
  v82 = a1;
  v95 = 8;
  v96[32] = 0;
  v97 = 0;
  if (!a6)
  {
    if ((~*((unsigned __int16 *)a5 + 14) & 0x408) != 0)
      a6 = 0;
    else
      a6 = (*(uint64_t (**)(const WebCore::Element *))(*(_QWORD *)a5 + 368))(a5);
  }
  v86 = a6;
  v14 = *(_QWORD *)(*((_QWORD *)a5 + 5) + 8);
  v84[0] = *(_BYTE *)(v14 + 3384) != 2;
  v84[1] = *(_BYTE *)(v14 + 3358) & 1;
  v15 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v15)
  {
    v16 = *a3;
    v17 = (uint64_t)&(*a3)[v15];
    v18 = (uint64_t *)(a4 + 400);
    v81 = a2;
    do
    {
      v19 = *v16;
      if (*v16)
      {
        v20 = *(WebCore::CSSStyleSheet ****)(*(_QWORD *)(*(_QWORD *)(a4 + 16) + 8) + 1336);
        if (v20)
          WebCore::Style::InspectorCSSOMWrappers::collectDocumentWrappers((uint64_t *)(a4 + 400), v20);
        v21 = (_QWORD *)*((_QWORD *)a5 + 5);
        if (*v21)
          v22 = (*(_WORD *)(*v21 + 28) & 0x80) == 0;
        else
          v22 = 1;
        if (v22)
          v72 = (_QWORD *)(v21[1] + 1328);
        else
          v72 = (_QWORD *)(*v21 + 216);
        WebCore::Style::InspectorCSSOMWrappers::maybeCollectFromStyleSheets((uint64_t *)(a4 + 400), *v72 + 56);
        if ((*((_QWORD *)a5 + 9) & 0xFFFFFFFFFFFFLL) != 0)
        {
          v47 = *(_QWORD *)((*((_QWORD *)a5 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
          if (v47)
            WebCore::Style::InspectorCSSOMWrappers::maybeCollectFromStyleSheets((uint64_t *)(a4 + 400), *(_QWORD *)(v47 + 216) + 56);
        }
        v23 = *v18;
        if (*v18)
        {
          v24 = *(_DWORD *)(v23 - 8);
          v25 = (~(v19 << 32) + v19) ^ ((unint64_t)(~(v19 << 32) + v19) >> 22);
          v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
          v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
          v28 = v24 & ((v27 >> 31) ^ v27);
          v29 = *(_QWORD *)(v23 + 16 * v28);
          if (v29 == v19)
          {
LABEL_22:
            v31 = v23 + 16 * v28;
            v32 = *(WebCore::CSSStyleRule **)(v31 + 8);
            if (v32)
            {
              v33 = *(_QWORD *)(v31 + 8);
              do
              {
                v34 = *(_BYTE *)(v33 + 12);
                v33 = *(_QWORD *)(v33 + 16);
              }
              while ((v34 & 2) != 0 && v33);
              v35 = WebCore::InspectorCSSAgent::bindStyleSheet(a2, (WebCore::CSSStyleSheet *)v33);
              if (v35)
              {
                WebCore::InspectorStyleSheet::buildObjectForRule(v35, v32, &v83);
                if (v83)
                {
                  v36 = WTF::fastMalloc((WTF *)0x20);
                  v37 = (WTF::JSONImpl::Object *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v36);
                  v39 = *(const WebCore::CSSSelector **)(*v16 + 16);
                  if (v39)
                  {
                    v40 = 0;
                    do
                    {
                      v37 = (WTF::JSONImpl::Object *)WebCore::SelectorChecker::match((WebCore::SelectorChecker *)v84, v39, a5, (WebCore::SelectorChecker::CheckingContext *)v85, v38);
                      if ((_DWORD)v37)
                      {
                        WTF::JSONImpl::Value::create(v40);
                        v41 = *(unsigned int *)(v36 + 28);
                        if ((_DWORD)v41 == *(_DWORD *)(v36 + 24))
                        {
                          v42 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v36 + 16), v41 + 1, (unint64_t)v100);
                          v41 = *(unsigned int *)(v36 + 28);
                          v43 = *(_QWORD *)(v36 + 16);
                          v44 = *(_QWORD *)v42;
                          *(_QWORD *)v42 = 0;
                        }
                        else
                        {
                          v43 = *(_QWORD *)(v36 + 16);
                          v44 = v100[0];
                          v100[0] = 0;
                        }
                        *(_QWORD *)(v43 + 8 * v41) = v44;
                        *(_DWORD *)(v36 + 28) = v41 + 1;
                        v37 = (WTF::JSONImpl::Object *)v100[0];
                        v100[0] = 0;
                        if (v37)
                        {
                          if (*(_DWORD *)v37 == 1)
                            v37 = (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
                          else
                            --*(_DWORD *)v37;
                        }
                      }
                      do
                      {
                        v46 = *(_DWORD *)v39;
                        v39 = (const WebCore::CSSSelector *)((char *)v39 + 16);
                        v45 = v46;
                      }
                      while ((v46 & 0x80000) == 0);
                      v40 = (WTF::JSONImpl::Value *)((_DWORD)v40 + 1);
                    }
                    while ((v45 & 0x20000) == 0);
                  }
                  WTF::JSONImpl::Object::create(v37);
                  v48 = v100[0];
                  v49 = v83;
                  v83 = 0;
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v98 = v49;
                  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v48 + 16), &v99, (const WTF::StringImpl *)&v98, (uint64_t)v100);
                  if (v101)
                  {
                    v51 = (uint64_t *)(v48 + 24);
                    v52 = *(unsigned int *)(v48 + 36);
                    if ((_DWORD)v52 == *(_DWORD *)(v48 + 32))
                    {
                      v73 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v51, v52 + 1, (unint64_t)&v99);
                      v52 = *(unsigned int *)(v48 + 36);
                      v74 = *(_QWORD *)(v48 + 24);
                      v75 = *v73;
                      if (*v73)
                        *v75 += 2;
                      *(_QWORD *)(v74 + 8 * v52) = v75;
                    }
                    else
                    {
                      v53 = *v51;
                      v54 = v99;
                      if (v99)
                        *(_DWORD *)v99 += 2;
                      *(_QWORD *)(v53 + 8 * v52) = v54;
                    }
                    *(_DWORD *)(v48 + 36) = v52 + 1;
                  }
                  v55 = v98;
                  v98 = 0;
                  if (v55)
                  {
                    if (*v55 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v55;
                  }
                  v56 = v99;
                  v99 = 0;
                  if (v56)
                  {
                    if (*(_DWORD *)v56 == 2)
                      WTF::StringImpl::destroy(v56, v50);
                    else
                      *(_DWORD *)v56 -= 2;
                  }
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v98 = (_DWORD *)v36;
                  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v48 + 16), &v99, (const WTF::StringImpl *)&v98, (uint64_t)v100);
                  if (v101)
                  {
                    v57 = (uint64_t *)(v48 + 24);
                    v58 = *(unsigned int *)(v48 + 36);
                    if ((_DWORD)v58 == *(_DWORD *)(v48 + 32))
                    {
                      v76 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v57, v58 + 1, (unint64_t)&v99);
                      v58 = *(unsigned int *)(v48 + 36);
                      v77 = *(_QWORD *)(v48 + 24);
                      v78 = *v76;
                      if (*v76)
                        *v78 += 2;
                      *(_QWORD *)(v77 + 8 * v58) = v78;
                    }
                    else
                    {
                      v59 = *v57;
                      v60 = v99;
                      if (v99)
                        *(_DWORD *)v99 += 2;
                      *(_QWORD *)(v59 + 8 * v58) = v60;
                    }
                    *(_DWORD *)(v48 + 36) = v58 + 1;
                  }
                  v61 = v98;
                  v98 = 0;
                  if (v61)
                  {
                    if (*v61 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v61;
                  }
                  result = v99;
                  v99 = 0;
                  if (result)
                  {
                    if (*(_DWORD *)result == 2)
                      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
                    else
                      *(_DWORD *)result -= 2;
                  }
                  v63 = *v82;
                  v64 = *(unsigned int *)(*v82 + 28);
                  if ((_DWORD)v64 == *(_DWORD *)(*v82 + 24))
                  {
                    v65 = v64 + (v64 >> 2);
                    if (v65 >= 0x10)
                      v66 = v65 + 1;
                    else
                      v66 = 16;
                    if (v66 <= v64 + 1)
                      v67 = v64 + 1;
                    else
                      v67 = v66;
                    if (v67 >> 29)
                    {
                      __break(0xC471u);
                      return result;
                    }
                    v68 = *(void **)(v63 + 16);
                    v69 = (void *)WTF::fastMalloc((WTF *)(8 * v67));
                    *(_DWORD *)(v63 + 24) = v67;
                    *(_QWORD *)(v63 + 16) = v69;
                    memcpy(v69, v68, 8 * v64);
                    if (v68)
                    {
                      if (*(void **)(v63 + 16) == v68)
                      {
                        *(_QWORD *)(v63 + 16) = 0;
                        *(_DWORD *)(v63 + 24) = 0;
                      }
                      WTF::fastFree((WTF *)v68, v13);
                    }
                    v64 = *(unsigned int *)(v63 + 28);
                    v70 = (_QWORD *)(*(_QWORD *)(v63 + 16) + 8 * v64);
                  }
                  else
                  {
                    v70 = (_QWORD *)(*(_QWORD *)(v63 + 16) + 8 * v64);
                  }
                  *v70 = v48;
                  *(_DWORD *)(v63 + 28) = v64 + 1;
                  v71 = v83;
                  v83 = 0;
                  a2 = v81;
                  if (v71)
                  {
                    if (*(_DWORD *)v71 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*(_DWORD *)v71;
                  }
                }
              }
            }
          }
          else
          {
            v30 = 1;
            while (v29)
            {
              v28 = ((_DWORD)v28 + v30) & v24;
              v29 = *(_QWORD *)(v23 + 16 * v28);
              ++v30;
              if (v29 == v19)
                goto LABEL_22;
            }
          }
        }
      }
      ++v16;
    }
    while (v16 != (uint64_t *)v17);
  }
  v79 = v94;
  if (v96 != (_DWORD *)v94 && v94 != 0)
  {
    v94 = 0;
    LODWORD(v95) = 0;
    WTF::fastFree(v79, v13);
  }
  result = v87;
  v87 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::InspectorCSSAgent::asInspectorStyleSheet(WebCore::InspectorCSSAgent *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  WebCore::StyledElement *v12;
  uint64_t *v13;
  int v14;
  WTF::String *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const WTF::StringImpl *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  WTF::StringImpl **v26;
  int i;
  uint64_t v28;
  WTF::StringImpl **v29;
  WTF *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  WTF::StringImpl *v42;
  _DWORD *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  WebCore::Node *v52;
  WTF::StringImpl *v53;

  v5 = (uint64_t *)((char *)this + 88);
  v4 = *((_QWORD *)this + 11);
  if (v4
    || (WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,WTF::Ref<WebCore::InspectorStyleSheetForInlineStyle,WTF::RawPtrTraits<WebCore::InspectorStyleSheetForInlineStyle>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheetForInlineStyle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,WTF::Ref<WebCore::InspectorStyleSheetForInlineStyle,WTF::RawPtrTraits<WebCore::InspectorStyleSheetForInlineStyle>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheetForInlineStyle>>>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,WTF::Ref<WebCore::InspectorStyleSheetForInlineStyle,WTF::RawPtrTraits<WebCore::InspectorStyleSheetForInlineStyle>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheetForInlineStyle>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<WebCore::InspectorStyleSheetForInlineStyle,WTF::RawPtrTraits<WebCore::InspectorStyleSheetForInlineStyle>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheetForInlineStyle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::rehash((uint64_t *)this + 11, 8u, 0), (v4 = *v5) != 0))
  {
    v6 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = (uint64_t *)(v4 + 16 * v10);
  v12 = (WebCore::StyledElement *)*v11;
  if (*v11)
  {
    v13 = 0;
    v14 = 1;
    do
    {
      if (v12 == (WebCore::StyledElement *)a2)
        return v11[1];
      if (v12 == (WebCore::StyledElement *)-1)
        v13 = v11;
      v10 = (v10 + v14) & v6;
      v11 = (uint64_t *)(v4 + 16 * v10);
      v12 = (WebCore::StyledElement *)*v11;
      ++v14;
    }
    while (*v11);
    if (v13)
    {
      *v13 = 0;
      v13[1] = 0;
      --*(_DWORD *)(*v5 - 16);
      v11 = v13;
    }
  }
  *v11 = a2;
  v15 = (WTF::String *)*((unsigned int *)this + 32);
  *((_DWORD *)this + 32) = (_DWORD)v15 + 1;
  WTF::String::number(v15);
  v16 = *(_QWORD *)(*((_QWORD *)this + 2) + 200);
  *(_DWORD *)(a2 + 24) += 2;
  v52 = (WebCore::Node *)a2;
  v17 = WTF::fastMalloc((WTF *)0x80);
  WebCore::InspectorStyleSheetForInlineStyle::InspectorStyleSheetForInlineStyle(v17, v16, &v53, &v52, 18, (uint64_t)this + 40);
  if (v52)
  {
    if (*((_DWORD *)v52 + 6) == 2)
    {
      if ((*((_WORD *)v52 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v52, v18);
    }
    else
    {
      *((_DWORD *)v52 + 6) -= 2;
    }
  }
  ++*(_DWORD *)(v17 + 8);
  v22 = *((_QWORD *)this + 9);
  v20 = (uint64_t *)((char *)this + 72);
  v21 = v22;
  if (v22
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v20, 8u), (v21 = *v20) != 0))
  {
    v23 = *(_DWORD *)(v21 - 8);
  }
  else
  {
    v23 = 0;
  }
  v24 = *((_DWORD *)v53 + 4);
  if (v24 < 0x100)
    v25 = WTF::StringImpl::hashSlowCase(v53);
  else
    v25 = v24 >> 8;
  v26 = 0;
  for (i = 1; ; ++i)
  {
    v28 = v25 & v23;
    v29 = (WTF::StringImpl **)(v21 + 16 * v28);
    v30 = *v29;
    if (*v29 != (WTF::StringImpl *)-1)
      break;
    v26 = (WTF::StringImpl **)(v21 + 16 * v28);
LABEL_27:
    v25 = i + v28;
  }
  if (!v30)
  {
    if (v26)
    {
      *v26 = 0;
      v26[1] = 0;
      --*(_DWORD *)(*v20 - 16);
      v29 = v26;
    }
    v31 = v53;
    if (v53)
      *(_DWORD *)v53 += 2;
    *v29 = v31;
    v32 = v29[1];
    v29[1] = (WTF::StringImpl *)v17;
    if (v32)
    {
      if (*((_DWORD *)v32 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v32 + 8))(v32);
      else
        --*((_DWORD *)v32 + 2);
    }
    v33 = *v20;
    if (*v20)
      v34 = *(_DWORD *)(v33 - 12) + 1;
    else
      v34 = 1;
    *(_DWORD *)(v33 - 12) = v34;
    v37 = *v20;
    if (*v20)
      v38 = *(_DWORD *)(v37 - 12);
    else
      v38 = 0;
    v39 = (*(_DWORD *)(v37 - 16) + v38);
    v40 = *(unsigned int *)(v37 - 4);
    if (v40 > 0x400)
    {
      if (v40 > 2 * v39)
        goto LABEL_52;
    }
    else
    {
      if (3 * v40 > 4 * v39)
        goto LABEL_52;
      if (!(_DWORD)v40)
      {
        v41 = 8;
        goto LABEL_51;
      }
    }
    v41 = (_DWORD)v40 << (6 * *(_DWORD *)(v37 - 12) >= (2 * v40));
LABEL_51:
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v20, v41);
    goto LABEL_52;
  }
  if (!WTF::equal(v30, v53, v19))
    goto LABEL_27;
  v35 = v21 + 16 * v28;
  v36 = *(_DWORD **)(v35 + 8);
  *(_QWORD *)(v35 + 8) = v17;
  if (v36)
  {
    if (v36[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
    else
      --v36[2];
  }
LABEL_52:
  v42 = v53;
  v53 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v18);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = (_DWORD *)v11[1];
  v11[1] = v17;
  if (v43)
  {
    if (v43[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v43 + 8))(v43);
    else
      --v43[2];
  }
  v44 = *v5;
  if (*v5)
    v45 = *(_DWORD *)(v44 - 12) + 1;
  else
    v45 = 1;
  *(_DWORD *)(v44 - 12) = v45;
  v46 = *v5;
  if (*v5)
    v47 = *(_DWORD *)(v46 - 12);
  else
    v47 = 0;
  v48 = (*(_DWORD *)(v46 - 16) + v47);
  v49 = *(unsigned int *)(v46 - 4);
  if (v49 > 0x400)
  {
    if (v49 <= 2 * v48)
    {
LABEL_67:
      v50 = (_DWORD)v49 << (6 * *(_DWORD *)(v46 - 12) >= (2 * v49));
      goto LABEL_69;
    }
  }
  else if (3 * v49 <= 4 * v48)
  {
    if ((_DWORD)v49)
      goto LABEL_67;
    v50 = 8;
LABEL_69:
    v11 = WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,WTF::Ref<WebCore::InspectorStyleSheetForInlineStyle,WTF::RawPtrTraits<WebCore::InspectorStyleSheetForInlineStyle>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheetForInlineStyle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,WTF::Ref<WebCore::InspectorStyleSheetForInlineStyle,WTF::RawPtrTraits<WebCore::InspectorStyleSheetForInlineStyle>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheetForInlineStyle>>>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,WTF::Ref<WebCore::InspectorStyleSheetForInlineStyle,WTF::RawPtrTraits<WebCore::InspectorStyleSheetForInlineStyle>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheetForInlineStyle>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<WebCore::InspectorStyleSheetForInlineStyle,WTF::RawPtrTraits<WebCore::InspectorStyleSheetForInlineStyle>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheetForInlineStyle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::rehash(v5, v50, v11);
  }
  return v11[1];
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorCSSAgent::getMatchedStylesForNode@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X8>)
{
  return WebCore::InspectorCSSAgent::getMatchedStylesForNode((WebCore::InspectorCSSAgent *)(a1 - 32), a2, a3, a4, a5);
}

WTF::StringImpl *WebCore::InspectorCSSAgent::getInlineStylesForNode@<X0>(WebCore::InspectorCSSAgent *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::InspectorDOMAgent *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WebCore::InspectorStyleSheet *v9;
  WTF::StringImpl *v10;
  WebCore::CSSStyleDeclaration *v11;
  uint64_t v12;
  int v13;
  WTF::StringImpl *v14;
  const WebCore::StyleProperties *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD **v26;
  _DWORD *v27;
  WTF *v28;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;

  v32 = 0;
  v5 = *(WebCore::InspectorDOMAgent **)(*((_QWORD *)this + 2) + 40);
  if (!v5)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = v33;
    v32 = v33;
    if (!v33)
    {
LABEL_10:
      *(_QWORD *)a3 = v14;
      *(_DWORD *)(a3 + 16) = 1;
      goto LABEL_25;
    }
LABEL_9:
    *(_DWORD *)v14 += 2;
    goto LABEL_10;
  }
  v6 = WebCore::InspectorDOMAgent::assertElement(v5, &v32, a2);
  if (!v6)
  {
    v14 = v32;
    if (!v32)
      goto LABEL_10;
    goto LABEL_9;
  }
  v8 = v6;
  if ((*(_WORD *)(v6 + 28) & 0x70) == 0)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
    goto LABEL_25;
  }
  *(_DWORD *)(v6 + 24) += 2;
  v9 = (WebCore::InspectorStyleSheet *)WebCore::InspectorCSSAgent::asInspectorStyleSheet(this, v6);
  v11 = (WebCore::CSSStyleDeclaration *)WebCore::StyledElement::cssomStyle((WebCore::StyledElement *)v8, v10);
  WebCore::InspectorStyleSheet::buildObjectForStyle(v9, v11, &v31);
  v12 = *(_QWORD *)(v8 + 104);
  if (!v12)
    goto LABEL_22;
  v13 = *(_DWORD *)(v12 + 4);
  if ((v13 & 4) != 0)
  {
    WebCore::StyledElement::rebuildPresentationalHintStyle((WebCore::StyledElement *)v8);
    v12 = *(_QWORD *)(v8 + 104);
    if ((*(_DWORD *)(v12 + 4) & 1) == 0)
      goto LABEL_22;
  }
  else if ((v13 & 1) == 0)
  {
    goto LABEL_22;
  }
  v15 = *(const WebCore::StyleProperties **)(v12 + 32);
  if (v15)
  {
    v16 = WTF::fastMalloc((WTF *)0x60);
    v17 = (_QWORD *)*((_QWORD *)WebCore::MutableStyleProperties::MutableStyleProperties((WebCore::MutableStyleProperties *)v16, v15)+ 1);
    if (!v17)
    {
      v17 = (_QWORD *)bmalloc::api::isoAllocate();
      *v17 = off_1E3399C18;
      v17[1] = 0;
      v17[2] = 0;
      v17[3] = v16;
      v17[4] = 0;
      v18 = *(_QWORD *)(v16 + 8);
      *(_QWORD *)(v16 + 8) = v17;
      if (v18)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        v17 = *(_QWORD **)(v16 + 8);
      }
    }
    (*(void (**)(_QWORD *))(*v17 + 16))(v17);
    v19 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = 0;
    *(_DWORD *)(v19 + 16) = 0;
    *(_QWORD *)(v19 + 24) = v17;
    *(_QWORD *)(v19 + 32) = 0;
    WebCore::InspectorStyle::buildObjectForStyle((WebCore::InspectorStyle *)v19, (uint64_t *)&v33);
    v20 = v33;
    if (*(_DWORD *)v19 == 1)
    {
      v22 = *(_QWORD *)(v19 + 24);
      *(_QWORD *)(v19 + 24) = 0;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
      v23 = *(WTF::StringImpl **)(v19 + 8);
      *(_QWORD *)(v19 + 8) = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v7);
        else
          *(_DWORD *)v23 -= 2;
      }
      WTF::fastFree((WTF *)v19, v7);
    }
    else
    {
      --*(_DWORD *)v19;
    }
    if (*(_DWORD *)v16 == 1)
    {
      v24 = *(unsigned int *)(v16 + 28);
      if ((_DWORD)v24)
      {
        v25 = 16 * v24;
        v26 = (_DWORD **)(*(_QWORD *)(v16 + 16) + 8);
        do
        {
          v27 = *v26;
          *v26 = 0;
          if (v27)
          {
            if (*v27 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, v7);
            else
              *v27 -= 2;
          }
          v26 += 2;
          v25 -= 16;
        }
        while (v25);
      }
      v28 = *(WTF **)(v16 + 16);
      if ((WTF *)(v16 + 32) != v28 && v28 != 0)
      {
        *(_QWORD *)(v16 + 16) = 0;
        *(_DWORD *)(v16 + 24) = 0;
        WTF::fastFree(v28, v7);
      }
      v30 = *(_QWORD *)(v16 + 8);
      *(_QWORD *)(v16 + 8) = 0;
      if (v30)
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      WTF::fastFree((WTF *)v16, v7);
    }
    else
    {
      --*(_DWORD *)v16;
    }
    goto LABEL_23;
  }
LABEL_22:
  v20 = 0;
LABEL_23:
  *(_QWORD *)a3 = v31;
  *(_QWORD *)(a3 + 8) = v20;
  *(_DWORD *)(a3 + 16) = 0;
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v7);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
LABEL_25:
  result = v32;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v32, v7);
    else
      *(_DWORD *)v32 -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorCSSAgent::getInlineStylesForNode@<X0>(WebCore::InspectorCSSAgent *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorCSSAgent::getInlineStylesForNode((WebCore::InspectorCSSAgent *)((char *)this - 32), a2, a3);
}

WTF::StringImpl *WebCore::InspectorCSSAgent::getComputedStyleForNode@<X0>(WebCore::InspectorCSSAgent *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::InspectorDOMAgent *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v14 = 0;
  v4 = *(WebCore::InspectorDOMAgent **)(*((_QWORD *)this + 2) + 40);
  if (!v4)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = v15;
    v14 = v15;
    if (!v15)
    {
LABEL_7:
      *(_QWORD *)a3 = v8;
      goto LABEL_8;
    }
LABEL_6:
    *(_DWORD *)v8 += 2;
    goto LABEL_7;
  }
  v5 = WebCore::InspectorDOMAgent::assertElement(v4, &v14, a2);
  if (!v5)
  {
    v8 = v14;
    if (!v14)
      goto LABEL_7;
    goto LABEL_6;
  }
  v7 = v5;
  if ((*(_BYTE *)(v5 + 22) & 8) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_8:
    *(_DWORD *)(a3 + 8) = 1;
    goto LABEL_9;
  }
  v10 = bmalloc::api::isoAllocate();
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_DWORD *)(v10 + 24) = 1;
  *(_QWORD *)v10 = off_1E3397498;
  *(_DWORD *)(v7 + 24) += 2;
  *(_QWORD *)(v10 + 32) = v7;
  *(_BYTE *)(v10 + 40) = 0;
  *(_BYTE *)(v10 + 56) = 0;
  *(_WORD *)(v10 + 64) = 256;
  v11 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v11 = 1;
  *(_QWORD *)(v11 + 8) = 0;
  *(_DWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  WebCore::InspectorStyle::buildArrayForComputedStyle((WebCore::InspectorStyle *)v11, (uint64_t *)&v15);
  *(_QWORD *)a3 = v15;
  *(_DWORD *)(a3 + 8) = 0;
  if (*(_DWORD *)v11 == 1)
  {
    v12 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v11 + 24) = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
    v13 = *(WTF::StringImpl **)(v11 + 8);
    *(_QWORD *)(v11 + 8) = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v6);
      else
        *(_DWORD *)v13 -= 2;
    }
    WTF::fastFree((WTF *)v11, v6);
  }
  else
  {
    --*(_DWORD *)v11;
  }
LABEL_9:
  result = v14;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v14, v6);
    else
      *(_DWORD *)v14 -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorCSSAgent::getComputedStyleForNode@<X0>(WebCore::InspectorCSSAgent *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorCSSAgent::getComputedStyleForNode((WebCore::InspectorCSSAgent *)((char *)this - 32), a2, a3);
}

uint64_t WebCore::InspectorCSSAgent::getFontDataForNode@<X0>(WebCore::InspectorCSSAgent *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::InspectorDOMAgent *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  CTFontRef *v13;
  uint64_t v14;
  uint64_t result;
  WTF::StringImpl *v16;
  float *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  WTF::StringImpl *v23;
  const WTF::String *v24;
  WTF::StringImpl *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  double v32;
  WTF::JSONImpl::Value *v33;
  WTF::StringImpl *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  double v41;
  WTF::JSONImpl::Value *v42;
  WTF::StringImpl *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  double v50;
  WTF::JSONImpl::Value *v51;
  const WTF::StringImpl *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  const WTF::String *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  unint64_t v65;
  float *v66;
  uint64_t v67;
  const char *v68;
  const char *v69;
  const char *v70;
  const char *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  void *v75;
  void *v76;
  WTF::StringImpl **v77;
  _DWORD **v78;
  uint64_t v79;
  _DWORD *v80;
  _DWORD **v81;
  uint64_t v82;
  _DWORD *v83;
  _DWORD **v84;
  uint64_t v85;
  _DWORD *v86;
  _DWORD **v87;
  uint64_t v88;
  _DWORD *v89;
  _DWORD **v90;
  uint64_t v91;
  _DWORD *v92;
  WTF::StringImpl *v93;
  int v94;
  uint64_t v95;
  WTF::StringImpl **v96;
  WTF::StringImpl *v97;
  CFStringRef v98;
  WTF::StringImpl *v99;
  const WTF::String *v100;
  WTF::StringImpl *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::JSONImpl::Value *v119;
  WTF::StringImpl *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::JSONImpl::Value *v127;
  WTF::StringImpl *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  int v134;
  _DWORD **v135;
  uint64_t v136;
  _DWORD *v137;
  _DWORD **v138;
  uint64_t v139;
  _DWORD *v140;
  _DWORD **v141;
  uint64_t v142;
  _DWORD *v143;
  _DWORD **v144;
  uint64_t v145;
  _DWORD *v146;
  CTFontRef *v147;
  uint64_t v148;
  uint64_t v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  int v153;
  unsigned int v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  char v159;

  v4 = *(WebCore::InspectorDOMAgent **)(*((_QWORD *)this + 2) + 40);
  if (v4)
  {
    v5 = WebCore::InspectorDOMAgent::nodeForId(v4, a2);
    if (v5)
    {
      v7 = v5;
      v8 = *(_DWORD *)(v5 + 24);
      *(_DWORD *)(v5 + 24) = v8 + 2;
      if (v8)
      {
        *(_DWORD *)(v5 + 24) = v8;
      }
      else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
      }
      LOBYTE(v157) = 0;
      v159 = 0;
      v10 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v7 + 264))(v7, &v157);
      if (v159)
      {
        v11 = v158;
        v158 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
          {
            WTF::StringImpl::destroy(v11, v9);
            if (v10)
              goto LABEL_10;
LABEL_196:
            result = WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_197:
            v134 = 1;
LABEL_198:
            *(_DWORD *)(a3 + 8) = v134;
            return result;
          }
          *(_DWORD *)v11 -= 2;
        }
      }
      if (v10)
      {
LABEL_10:
        v12 = WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*(_QWORD *)(v10 + 32) + 32), v9);
        v13 = (CTFontRef *)(v12 + 88);
        v14 = WTF::fastMalloc((WTF *)0x20);
        WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v14);
        WebCore::FontPlatformData::variationAxes((const __CTFont **)(v12 + 88), 1, (uint64_t)&v152);
        v17 = (float *)v152;
        if (v154)
        {
          v147 = (CTFontRef *)(v12 + 88);
          v148 = v12;
          v149 = a3;
          v18 = "tag";
          v19 = "minimumValue";
          v20 = "maximumValue";
          v21 = 32 * v154;
          v22 = "defaultValue";
          do
          {
            WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)result);
            v23 = v157;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(v17 + 2), v24);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v23 + 2, &v155, (const WTF::StringImpl *)&v156, (uint64_t)&v157);
            if (v159)
            {
              v26 = (uint64_t *)((char *)v23 + 24);
              v27 = *((unsigned int *)v23 + 9);
              if ((_DWORD)v27 == *((_DWORD *)v23 + 8))
              {
                v78 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v26, v27 + 1, (unint64_t)&v155);
                v27 = *((unsigned int *)v23 + 9);
                v79 = *((_QWORD *)v23 + 3);
                v80 = *v78;
                if (*v78)
                  *v80 += 2;
                *(_QWORD *)(v79 + 8 * v27) = v80;
              }
              else
              {
                v28 = *v26;
                v29 = v155;
                if (v155)
                  *(_DWORD *)v155 += 2;
                *(_QWORD *)(v28 + 8 * v27) = v29;
              }
              *((_DWORD *)v23 + 9) = v27 + 1;
            }
            v30 = v156;
            v156 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v30;
            }
            v31 = v155;
            v155 = 0;
            if (v31)
            {
              if (*(_DWORD *)v31 == 2)
                WTF::StringImpl::destroy(v31, v25);
              else
                *(_DWORD *)v31 -= 2;
            }
            v32 = v17[5];
            v33 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::Value::create(v33, v32);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v23 + 2, &v155, (const WTF::StringImpl *)&v156, (uint64_t)&v157);
            if (v159)
            {
              v35 = (uint64_t *)((char *)v23 + 24);
              v36 = *((unsigned int *)v23 + 9);
              if ((_DWORD)v36 == *((_DWORD *)v23 + 8))
              {
                v81 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, v36 + 1, (unint64_t)&v155);
                v36 = *((unsigned int *)v23 + 9);
                v82 = *((_QWORD *)v23 + 3);
                v83 = *v81;
                if (*v81)
                  *v83 += 2;
                *(_QWORD *)(v82 + 8 * v36) = v83;
              }
              else
              {
                v37 = *v35;
                v38 = v155;
                if (v155)
                  *(_DWORD *)v155 += 2;
                *(_QWORD *)(v37 + 8 * v36) = v38;
              }
              *((_DWORD *)v23 + 9) = v36 + 1;
            }
            v39 = v156;
            v156 = 0;
            if (v39)
            {
              if (*(_DWORD *)v39 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v39;
            }
            v40 = v155;
            v155 = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v34);
              else
                *(_DWORD *)v40 -= 2;
            }
            v41 = v17[6];
            v42 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::Value::create(v42, v41);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v23 + 2, &v155, (const WTF::StringImpl *)&v156, (uint64_t)&v157);
            if (v159)
            {
              v44 = (uint64_t *)((char *)v23 + 24);
              v45 = *((unsigned int *)v23 + 9);
              if ((_DWORD)v45 == *((_DWORD *)v23 + 8))
              {
                v84 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v44, v45 + 1, (unint64_t)&v155);
                v45 = *((unsigned int *)v23 + 9);
                v85 = *((_QWORD *)v23 + 3);
                v86 = *v84;
                if (*v84)
                  *v86 += 2;
                *(_QWORD *)(v85 + 8 * v45) = v86;
              }
              else
              {
                v46 = *v44;
                v47 = v155;
                if (v155)
                  *(_DWORD *)v155 += 2;
                *(_QWORD *)(v46 + 8 * v45) = v47;
              }
              *((_DWORD *)v23 + 9) = v45 + 1;
            }
            v48 = v156;
            v156 = 0;
            if (v48)
            {
              if (*(_DWORD *)v48 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v48;
            }
            v49 = v155;
            v155 = 0;
            if (v49)
            {
              if (*(_DWORD *)v49 == 2)
                WTF::StringImpl::destroy(v49, v43);
              else
                *(_DWORD *)v49 -= 2;
            }
            v50 = v17[4];
            v51 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::Value::create(v51, v50);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v23 + 2, &v155, (const WTF::StringImpl *)&v156, (uint64_t)&v157);
            if (v159)
            {
              v53 = (uint64_t *)((char *)v23 + 24);
              v54 = *((unsigned int *)v23 + 9);
              if ((_DWORD)v54 == *((_DWORD *)v23 + 8))
              {
                v87 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v53, v54 + 1, (unint64_t)&v155);
                v54 = *((unsigned int *)v23 + 9);
                v88 = *((_QWORD *)v23 + 3);
                v89 = *v87;
                if (*v87)
                  *v89 += 2;
                *(_QWORD *)(v88 + 8 * v54) = v89;
              }
              else
              {
                v55 = *v53;
                v56 = v155;
                if (v155)
                  *(_DWORD *)v155 += 2;
                *(_QWORD *)(v55 + 8 * v54) = v56;
              }
              *((_DWORD *)v23 + 9) = v54 + 1;
            }
            v57 = v156;
            v156 = 0;
            if (v57)
            {
              if (*(_DWORD *)v57 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v57;
            }
            v58 = v155;
            v155 = 0;
            if (v58)
            {
              if (*(_DWORD *)v58 == 2)
                WTF::StringImpl::destroy(v58, v16);
              else
                *(_DWORD *)v58 -= 2;
            }
            result = *(_QWORD *)v17;
            if (*(_QWORD *)v17)
            {
              if (*(_DWORD *)(result + 4))
              {
                result = WTF::equal((WTF *)result, *((const WTF::StringImpl **)v17 + 1), v52);
                if ((result & 1) == 0)
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)v17, v59);
                  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v23 + 2, &v155, (const WTF::StringImpl *)&v156, (uint64_t)&v157);
                  if (v159)
                  {
                    v60 = (uint64_t *)((char *)v23 + 24);
                    v61 = *((unsigned int *)v23 + 9);
                    if ((_DWORD)v61 == *((_DWORD *)v23 + 8))
                    {
                      v90 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v155);
                      v61 = *((unsigned int *)v23 + 9);
                      v91 = *((_QWORD *)v23 + 3);
                      v92 = *v90;
                      if (*v90)
                        *v92 += 2;
                      *(_QWORD *)(v91 + 8 * v61) = v92;
                    }
                    else
                    {
                      v62 = *v60;
                      v63 = v155;
                      if (v155)
                        *(_DWORD *)v155 += 2;
                      *(_QWORD *)(v62 + 8 * v61) = v63;
                    }
                    *((_DWORD *)v23 + 9) = v61 + 1;
                  }
                  v64 = v156;
                  v156 = 0;
                  if (v64)
                  {
                    if (*(_DWORD *)v64 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*(_DWORD *)v64;
                  }
                  result = (uint64_t)v155;
                  v155 = 0;
                  if (result)
                  {
                    if (*(_DWORD *)result == 2)
                      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
                    else
                      *(_DWORD *)result -= 2;
                  }
                }
              }
            }
            v65 = *(unsigned int *)(v14 + 28);
            if ((_DWORD)v65 == *(_DWORD *)(v14 + 24))
            {
              v150 = v23;
              v66 = v17;
              v67 = v21;
              v68 = v22;
              v69 = v20;
              v70 = v19;
              v71 = v18;
              v72 = v65 + (v65 >> 2);
              if (v72 >= 0x10)
                v73 = v72 + 1;
              else
                v73 = 16;
              if (v73 <= v65 + 1)
                v74 = v65 + 1;
              else
                v74 = v73;
              if (v74 >> 29)
              {
                __break(0xC471u);
                return result;
              }
              v75 = *(void **)(v14 + 16);
              v76 = (void *)WTF::fastMalloc((WTF *)(8 * v74));
              *(_DWORD *)(v14 + 24) = v74;
              *(_QWORD *)(v14 + 16) = v76;
              result = (uint64_t)memcpy(v76, v75, 8 * v65);
              v18 = v71;
              v19 = v70;
              v20 = v69;
              v22 = v68;
              v21 = v67;
              v17 = v66;
              v23 = v150;
              if (v75)
              {
                if (*(void **)(v14 + 16) == v75)
                {
                  *(_QWORD *)(v14 + 16) = 0;
                  *(_DWORD *)(v14 + 24) = 0;
                }
                result = WTF::fastFree((WTF *)v75, v16);
              }
              v65 = *(unsigned int *)(v14 + 28);
              v77 = (WTF::StringImpl **)(*(_QWORD *)(v14 + 16) + 8 * v65);
            }
            else
            {
              v77 = (WTF::StringImpl **)(*(_QWORD *)(v14 + 16) + 8 * v65);
            }
            *v77 = v23;
            *(_DWORD *)(v14 + 28) = v65 + 1;
            v17 += 8;
            v21 -= 32;
          }
          while (v21);
          v17 = (float *)v152;
          if (v154)
          {
            v95 = 32 * v154;
            v96 = (WTF::StringImpl **)((char *)v152 + 8);
            v12 = v148;
            a3 = v149;
            do
            {
              v97 = *v96;
              *v96 = 0;
              if (v97)
              {
                if (*(_DWORD *)v97 == 2)
                  WTF::StringImpl::destroy(v97, v16);
                else
                  *(_DWORD *)v97 -= 2;
              }
              result = (uint64_t)*(v96 - 1);
              *(v96 - 1) = 0;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
                else
                  *(_DWORD *)result -= 2;
              }
              v96 += 4;
              v95 -= 32;
            }
            while (v95);
            v17 = (float *)v152;
          }
          else
          {
            v12 = v148;
            a3 = v149;
          }
          v13 = v147;
        }
        if (v17)
        {
          v152 = 0;
          v153 = 0;
          result = WTF::fastFree((WTF *)v17, v16);
        }
        WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)result);
        if (*v13)
        {
          v98 = CTFontCopyFamilyName(*v13);
          MEMORY[0x19AEA5508](&v151, v98);
          if (v98)
            CFRelease(v98);
        }
        else
        {
          v151 = 0;
        }
        v99 = v155;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v151, v100);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v99 + 2, &v156, (const WTF::StringImpl *)&v152, (uint64_t)&v157);
        if (v159)
        {
          v102 = (uint64_t *)((char *)v99 + 24);
          v103 = *((unsigned int *)v99 + 9);
          if ((_DWORD)v103 == *((_DWORD *)v99 + 8))
          {
            v135 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v102, v103 + 1, (unint64_t)&v156);
            v103 = *((unsigned int *)v99 + 9);
            v136 = *((_QWORD *)v99 + 3);
            v137 = *v135;
            if (*v135)
              *v137 += 2;
            *(_QWORD *)(v136 + 8 * v103) = v137;
          }
          else
          {
            v104 = *v102;
            v105 = v156;
            if (v156)
              *(_DWORD *)v156 += 2;
            *(_QWORD *)(v104 + 8 * v103) = v105;
          }
          *((_DWORD *)v99 + 9) = v103 + 1;
        }
        v106 = v152;
        v152 = 0;
        if (v106)
        {
          if (*(_DWORD *)v106 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v106;
        }
        v107 = v156;
        v156 = 0;
        if (v107)
        {
          if (*(_DWORD *)v107 == 2)
            WTF::StringImpl::destroy(v107, v101);
          else
            *(_DWORD *)v107 -= 2;
        }
        v108 = v155;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v156 = (WTF::StringImpl *)v14;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v108 + 2, &v152, (const WTF::StringImpl *)&v156, (uint64_t)&v157);
        if (v159)
        {
          v110 = (uint64_t *)((char *)v108 + 24);
          v111 = *((unsigned int *)v108 + 9);
          if ((_DWORD)v111 == *((_DWORD *)v108 + 8))
          {
            v138 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v110, v111 + 1, (unint64_t)&v152);
            v111 = *((unsigned int *)v108 + 9);
            v139 = *((_QWORD *)v108 + 3);
            v140 = *v138;
            if (*v138)
              *v140 += 2;
            *(_QWORD *)(v139 + 8 * v111) = v140;
          }
          else
          {
            v112 = *v110;
            v113 = v152;
            if (v152)
              *(_DWORD *)v152 += 2;
            *(_QWORD *)(v112 + 8 * v111) = v113;
          }
          *((_DWORD *)v108 + 9) = v111 + 1;
        }
        v114 = v156;
        v156 = 0;
        if (v114)
        {
          if (*(_DWORD *)v114 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v114;
        }
        v115 = v152;
        v152 = 0;
        if (v115)
        {
          if (*(_DWORD *)v115 == 2)
            WTF::StringImpl::destroy(v115, v109);
          else
            *(_DWORD *)v115 -= 2;
        }
        v116 = v155;
        v155 = 0;
        v117 = v151;
        v151 = 0;
        if (v117)
        {
          if (*(_DWORD *)v117 == 2)
            WTF::StringImpl::destroy(v117, v109);
          else
            *(_DWORD *)v117 -= 2;
          v118 = v155;
          v155 = 0;
          if (v118)
          {
            if (*(_DWORD *)v118 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v118;
          }
        }
        v119 = (WTF::JSONImpl::Value *)*(unsigned __int8 *)(v12 + 112);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::JSONImpl::Value::create(v119);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v116 + 2, &v156, (const WTF::StringImpl *)&v152, (uint64_t)&v157);
        if (v159)
        {
          v121 = (uint64_t *)((char *)v116 + 24);
          v122 = *((unsigned int *)v116 + 9);
          if ((_DWORD)v122 == *((_DWORD *)v116 + 8))
          {
            v141 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v121, v122 + 1, (unint64_t)&v156);
            v122 = *((unsigned int *)v116 + 9);
            v142 = *((_QWORD *)v116 + 3);
            v143 = *v141;
            if (*v141)
              *v143 += 2;
            *(_QWORD *)(v142 + 8 * v122) = v143;
          }
          else
          {
            v123 = *v121;
            v124 = v156;
            if (v156)
              *(_DWORD *)v156 += 2;
            *(_QWORD *)(v123 + 8 * v122) = v124;
          }
          *((_DWORD *)v116 + 9) = v122 + 1;
        }
        v125 = v152;
        v152 = 0;
        if (v125)
        {
          if (*(_DWORD *)v125 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v125;
        }
        v126 = v156;
        v156 = 0;
        if (v126)
        {
          if (*(_DWORD *)v126 == 2)
            WTF::StringImpl::destroy(v126, v120);
          else
            *(_DWORD *)v126 -= 2;
        }
        v127 = (WTF::JSONImpl::Value *)*(unsigned __int8 *)(v12 + 113);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::JSONImpl::Value::create(v127);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v116 + 2, &v156, (const WTF::StringImpl *)&v152, (uint64_t)&v157);
        if (v159)
        {
          v129 = (uint64_t *)((char *)v116 + 24);
          v130 = *((unsigned int *)v116 + 9);
          if ((_DWORD)v130 == *((_DWORD *)v116 + 8))
          {
            v144 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v129, v130 + 1, (unint64_t)&v156);
            v130 = *((unsigned int *)v116 + 9);
            v145 = *((_QWORD *)v116 + 3);
            v146 = *v144;
            if (*v144)
              *v146 += 2;
            *(_QWORD *)(v145 + 8 * v130) = v146;
          }
          else
          {
            v131 = *v129;
            v132 = v156;
            if (v156)
              *(_DWORD *)v156 += 2;
            *(_QWORD *)(v131 + 8 * v130) = v132;
          }
          *((_DWORD *)v116 + 9) = v130 + 1;
        }
        v133 = v152;
        v152 = 0;
        if (v133)
        {
          if (*(_DWORD *)v133 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v133;
        }
        result = (uint64_t)v156;
        v156 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v128);
          else
            *(_DWORD *)result -= 2;
        }
        v134 = 0;
        *(_QWORD *)a3 = v116;
        goto LABEL_198;
      }
      goto LABEL_196;
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  result = (uint64_t)v157;
  if (!v157)
  {
    *(_QWORD *)a3 = 0;
    goto LABEL_197;
  }
  v94 = *(_DWORD *)v157;
  *(_DWORD *)v157 += 2;
  *(_QWORD *)a3 = result;
  *(_DWORD *)(a3 + 8) = 1;
  if (!v94)
    return WTF::StringImpl::destroy((WTF::StringImpl *)result, v93);
  *(_DWORD *)result = v94;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorCSSAgent::getFontDataForNode@<X0>(WebCore::InspectorCSSAgent *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorCSSAgent::getFontDataForNode((WebCore::InspectorCSSAgent *)((char *)this - 32), a2, a3);
}

WTF *WebCore::InspectorCSSAgent::getAllStyleSheets@<X0>(WebCore::InspectorCSSAgent *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  WTF *result;
  const WTF::String *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  unsigned int v11;
  _QWORD *v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  WTF *v17;
  WTF *v18;
  WTF *v19;
  uint64_t v20;
  WebCore::CSSStyleSheet *v21;
  uint64_t v22;
  WebCore::CSSStyleSheet **v23;
  unsigned int v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  void *v35;
  WTF **v36;
  WTF *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  WTF *v43;
  int v44;
  unsigned int v45;

  v4 = WTF::fastMalloc((WTF *)0x20);
  result = (WTF *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v4);
  v37 = 0;
  v38 = 0;
  v41 = 0;
  v42 = 0;
  v7 = *(_QWORD *)(*((_QWORD *)this + 2) + 40);
  if (!v7)
  {
    v26 = v37;
    goto LABEL_70;
  }
  v39 = 0;
  v40 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 120) + 528);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      v10 = 0;
      v11 = 0;
      while (1)
      {
        do
        {
LABEL_5:
          v12 = (_QWORD *)v9;
          if (!*(_BYTE *)(v9 + 144))
          {
            v13 = *(WTF **)(v9 + 296);
            v43 = v13;
            if (v13)
            {
              if (v11 == (_DWORD)v40)
              {
                result = (WTF *)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v39, v11 + 1, (unint64_t)&v43);
                v11 = HIDWORD(v40);
                v10 = v39;
                *((_QWORD *)v39 + HIDWORD(v40)) = *(_QWORD *)result;
              }
              else
              {
                *((_QWORD *)v10 + v11) = v13;
              }
              HIDWORD(v40) = ++v11;
            }
          }
          v9 = v12[11];
        }
        while (v9);
        v14 = *(_QWORD *)(v12[6] + 8);
        if (!v14)
          break;
        v9 = v12[9];
        if (!v9)
        {
          while (1)
          {
            v15 = *(_QWORD *)(v14 + 56);
            if (!v15)
              goto LABEL_18;
            v14 = *(_QWORD *)(v15 + 8);
            if (!v14)
              goto LABEL_18;
            v9 = *(_QWORD *)(v14 + 72);
            if (v9)
              goto LABEL_5;
          }
        }
      }
LABEL_18:
      v16 = v39;
      if (v11)
      {
        v17 = (WTF *)((char *)v39 + 8 * v11);
        v18 = v39;
        while (1)
        {
          result = (WTF *)WebCore::Style::Scope::activeStyleSheetsForInspector(*(_QWORD *)(*(_QWORD *)v18 + 1328), v6, (uint64_t)&v43);
          v19 = v43;
          if (v45)
          {
            v20 = 8 * v45;
            do
            {
              v21 = *(WebCore::CSSStyleSheet **)v19;
              v19 = (WTF *)((char *)v19 + 8);
              result = (WTF *)WebCore::InspectorCSSAgent::collectStyleSheets((uint64_t)this, v21, (uint64_t)&v41);
              v20 -= 8;
            }
            while (v20);
            v19 = v43;
            if (v45)
              break;
          }
          if (v19)
            goto LABEL_35;
LABEL_25:
          v18 = (WTF *)((char *)v18 + 8);
          if (v18 == v17)
            goto LABEL_36;
        }
        v22 = 8 * v45;
        do
        {
          result = *(WTF **)v19;
          *(_QWORD *)v19 = 0;
          if (result)
          {
            if (*((_DWORD *)result + 2) == 1)
              result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
            else
              --*((_DWORD *)result + 2);
          }
          v19 = (WTF *)((char *)v19 + 8);
          v22 -= 8;
        }
        while (v22);
        v19 = v43;
        if (!v43)
          goto LABEL_25;
LABEL_35:
        v43 = 0;
        v44 = 0;
        result = (WTF *)WTF::fastFree(v19, v6);
        goto LABEL_25;
      }
LABEL_36:
      if (v16)
        result = (WTF *)WTF::fastFree(v16, v6);
    }
  }
  v23 = (WebCore::CSSStyleSheet **)v41;
  if (HIDWORD(v42))
  {
    v24 = 0;
    v25 = 8 * HIDWORD(v42);
    do
    {
      result = WebCore::InspectorCSSAgent::bindStyleSheet(this, *v23);
      v43 = result;
      if (v24 == (_DWORD)v38)
      {
        result = (WTF *)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v37, v24 + 1, (unint64_t)&v43);
        v24 = HIDWORD(v38);
        *((_QWORD *)v37 + HIDWORD(v38)) = *(_QWORD *)result;
      }
      else
      {
        *((_QWORD *)v37 + v24) = result;
      }
      HIDWORD(v38) = ++v24;
      ++v23;
      v25 -= 8;
    }
    while (v25);
    v23 = (WebCore::CSSStyleSheet **)v41;
    if (v41)
      goto LABEL_45;
  }
  else
  {
    v24 = 0;
    if (v41)
    {
LABEL_45:
      v41 = 0;
      LODWORD(v42) = 0;
      result = (WTF *)WTF::fastFree((WTF *)v23, v6);
    }
  }
  v26 = v37;
  if (v24)
  {
    v27 = 0;
    v28 = 8 * v24;
    do
    {
      result = (WTF *)WebCore::InspectorStyleSheet::buildObjectForStyleSheetInfo(*(WebCore::CSSStyleSheet ***)((char *)v26 + v27), &v43);
      v29 = v43;
      if (v43)
      {
        v43 = 0;
        v30 = *(unsigned int *)(v4 + 28);
        if ((_DWORD)v30 == *(_DWORD *)(v4 + 24))
        {
          v31 = v30 + (v30 >> 2);
          if (v31 >= 0x10)
            v32 = v31 + 1;
          else
            v32 = 16;
          if (v32 <= v30 + 1)
            v33 = v30 + 1;
          else
            v33 = v32;
          if (v33 >> 29)
          {
            __break(0xC471u);
            return result;
          }
          v34 = *(void **)(v4 + 16);
          v35 = (void *)WTF::fastMalloc((WTF *)(8 * v33));
          *(_DWORD *)(v4 + 24) = v33;
          *(_QWORD *)(v4 + 16) = v35;
          memcpy(v35, v34, 8 * v30);
          if (v34)
          {
            if (*(void **)(v4 + 16) == v34)
            {
              *(_QWORD *)(v4 + 16) = 0;
              *(_DWORD *)(v4 + 24) = 0;
            }
            WTF::fastFree((WTF *)v34, v6);
          }
          v30 = *(unsigned int *)(v4 + 28);
          v36 = (WTF **)(*(_QWORD *)(v4 + 16) + 8 * v30);
        }
        else
        {
          v36 = (WTF **)(*(_QWORD *)(v4 + 16) + 8 * v30);
        }
        *v36 = v29;
        *(_DWORD *)(v4 + 28) = v30 + 1;
        result = v43;
        v43 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
            result = (WTF *)WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)result;
        }
      }
      v27 += 8;
    }
    while (v28 != v27);
  }
LABEL_70:
  *(_QWORD *)a2 = v4;
  *(_DWORD *)(a2 + 8) = 0;
  if (v26)
    return (WTF *)WTF::fastFree(v26, v6);
  return result;
}

WTF *`non-virtual thunk to'WebCore::InspectorCSSAgent::getAllStyleSheets@<X0>(WebCore::InspectorCSSAgent *this@<X0>, uint64_t a2@<X8>)
{
  return WebCore::InspectorCSSAgent::getAllStyleSheets((WebCore::InspectorCSSAgent *)((char *)this - 32), a2);
}

uint64_t WebCore::InspectorCSSAgent::collectStyleSheets(uint64_t result, WebCore::CSSStyleSheet *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  WebCore::CSSImportRule *v13;
  WebCore::CSSStyleSheet *v14;

  v4 = result;
  v14 = a2;
  v5 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 8))
  {
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v5 + 1, (unint64_t)&v14);
    v5 = *(unsigned int *)(a3 + 12);
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v5) = *(_QWORD *)result;
    a2 = v14;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v5) = a2;
  }
  *(_DWORD *)(a3 + 12) = v5 + 1;
  v6 = (_DWORD *)*((_QWORD *)a2 + 3);
  v7 = v6[13];
  v8 = v6[17];
  v9 = v6[21];
  v10 = v6[25];
  if (v8 + v7 + v9 + v10)
  {
    v11 = 0;
    v12 = v7 + v9 + v10 + v8;
    do
    {
      result = WebCore::CSSStyleSheet::item(v14, v11);
      if (result)
      {
        v13 = (WebCore::CSSImportRule *)result;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        if ((_DWORD)result == 3)
        {
          result = WebCore::CSSImportRule::styleSheet(v13);
          if (result)
            result = WebCore::InspectorCSSAgent::collectStyleSheets(v4, result, a3);
        }
      }
      ++v11;
    }
    while (v12 != v11);
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorCSSAgent::getStyleSheet@<X0>(WebCore::InspectorCSSAgent *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::InspectorStyleSheet *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v9 = 0;
  v4 = (WebCore::InspectorStyleSheet *)WebCore::InspectorCSSAgent::assertStyleSheetForId(this, &v9, a2);
  if (v4)
  {
    WebCore::InspectorStyleSheet::buildObjectForStyleSheet(v4, &v8);
    if (v8)
    {
      *(_QWORD *)a3 = v8;
      *(_DWORD *)(a3 + 8) = 0;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_DWORD *)(a3 + 8) = 1;
      v7 = v8;
      v8 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v7;
      }
    }
    result = v9;
  }
  else
  {
    result = v9;
    if (v9)
      *(_DWORD *)v9 += 2;
    *(_QWORD *)a3 = result;
    *(_DWORD *)(a3 + 8) = 1;
  }
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::InspectorCSSAgent::assertStyleSheetForId(WebCore::InspectorCSSAgent *this, WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int i;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  v4 = *((_QWORD *)this + 9);
  if (!v4)
  {
LABEL_16:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v18 = *a2;
    *a2 = v19;
    if (v18)
    {
      if (*(_DWORD *)v18 != 2)
      {
        result = 0;
        *(_DWORD *)v18 -= 2;
        return result;
      }
      WTF::StringImpl::destroy(v18, v17);
    }
    return 0;
  }
  v7 = *(_DWORD *)(v4 - 8);
  v8 = *((_DWORD *)*a3 + 4);
  if (v8 < 0x100)
    v9 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v9 = v8 >> 8;
  for (i = 0; ; v9 = i + v11)
  {
    v11 = v9 & v7;
    v12 = *(WTF **)(v4 + 16 * v11);
    if (v12 != (WTF *)-1)
    {
      if (!v12)
      {
        v13 = *((_QWORD *)this + 9);
        if (!v13)
          goto LABEL_16;
        v14 = *(unsigned int *)(v13 - 4);
        v15 = v13 + 16 * v14;
        goto LABEL_14;
      }
      if ((WTF::equal(v12, *a3, (const WTF::StringImpl *)a3) & 1) != 0)
        break;
    }
    ++i;
  }
  v15 = v4 + 16 * v11;
  v13 = *((_QWORD *)this + 9);
  if (!v13)
    return *(_QWORD *)(v15 + 8);
  v14 = *(unsigned int *)(v13 - 4);
LABEL_14:
  if (v15 == v13 + 16 * v14)
    goto LABEL_16;
  return *(_QWORD *)(v15 + 8);
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorCSSAgent::getStyleSheet@<X0>(WebCore::InspectorCSSAgent *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorCSSAgent::getStyleSheet((WebCore::InspectorCSSAgent *)((char *)this - 32), a2, a3);
}

WTF::StringImpl *WebCore::InspectorCSSAgent::getStyleSheetText@<X0>(WebCore::InspectorCSSAgent *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t v5;
  WTF::StringImpl *v6;
  char **v7;
  char *v8;
  uint64_t v9;
  WTF::StringImpl *result;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  uint64_t v16;

  v15 = 0;
  v5 = WebCore::InspectorCSSAgent::assertStyleSheetForId(this, &v15, a2);
  if (v5)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v5 + 24))(&v12);
    if (!v14)
    {
      v11 = v12;
      v12 = 0;
      *(_QWORD *)a3 = v11;
      *(_DWORD *)(a3 + 8) = 0;
LABEL_17:
      if (v14 != -1)
        ((void (*)(uint64_t *, uint64_t *))off_1E33EF790[v14])(&v16, &v12);
      result = v15;
      goto LABEL_20;
    }
    if (v14 == 1)
    {
      v3 = v13;
      v13 = 0;
      if (v12 >= 0x20u)
        v7 = (char **)&WebCore::DOMException::description(WebCore::ExceptionCode)::emptyDescription;
      else
        v7 = &(&WebCore::descriptions)[5 * v12];
      v8 = v7[1];
      if (v8)
      {
        v6 = (WTF::StringImpl *)(v8 - 1);
        if (v8 == (char *)1)
        {
          v9 = MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v9 = v16;
        }
LABEL_10:
        *(_QWORD *)a3 = v9;
        *(_DWORD *)(a3 + 8) = 1;
        if (v3)
        {
          if (*(_DWORD *)v3 == 2)
            WTF::StringImpl::destroy(v3, v6);
          else
            *(_DWORD *)v3 -= 2;
        }
        goto LABEL_17;
      }
    }
    else
    {
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    v9 = 0;
    goto LABEL_10;
  }
  result = v15;
  if (v15)
    *(_DWORD *)v15 += 2;
  *(_QWORD *)a3 = result;
  *(_DWORD *)(a3 + 8) = 1;
LABEL_20:
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorCSSAgent::getStyleSheetText@<X0>(WebCore::InspectorCSSAgent *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorCSSAgent::getStyleSheetText((WebCore::InspectorCSSAgent *)((char *)this - 32), a2, a3);
}

WTF::StringImpl *WebCore::InspectorCSSAgent::setStyleSheetText@<X0>(WebCore::InspectorCSSAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _DWORD *v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  char **v16;
  char *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  _QWORD *v22;
  char v23[8];
  WTF::StringImpl *v24;
  char v25;
  WTF::StringImpl *v26[2];

  v26[0] = 0;
  v7 = WebCore::InspectorCSSAgent::assertStyleSheetForId(this, v26, a2);
  if (!v7)
  {
    v19 = v26[0];
    if (v26[0])
      *(_DWORD *)v26[0] += 2;
    *(_QWORD *)a4 = v19;
    goto LABEL_21;
  }
  v9 = *(_QWORD *)(*((_QWORD *)this + 2) + 40);
  if (!v9)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_21:
    *(_BYTE *)(a4 + 8) = 1;
    goto LABEL_27;
  }
  v10 = v7;
  v11 = *(_QWORD *)(v9 + 224);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  v12[1] = 0;
  ++*(_DWORD *)(v10 + 8);
  v12[2] = v10;
  *v12 = off_1E33EF7B0;
  v13 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v13 += 2;
  v12[3] = v13;
  v12[4] = 0;
  v22 = v12;
  WebCore::InspectorHistory::perform(v11, (char *)&v22, (uint64_t)v23);
  v14 = v22;
  v22 = 0;
  if (v14)
    (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  if (v25)
  {
    v15 = v24;
    v24 = 0;
    if (v23[0] >= 0x20u)
      v16 = (char **)&WebCore::DOMException::description(WebCore::ExceptionCode)::emptyDescription;
    else
      v16 = &(&WebCore::descriptions)[5 * v23[0]];
    v17 = v16[1];
    if (v17)
    {
      v8 = (WTF::StringImpl *)(v17 - 1);
      if (v17 == (char *)1)
      {
        v18 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v18 = v26[1];
      }
    }
    else
    {
      v18 = 0;
    }
    *(_QWORD *)a4 = v18;
    *(_BYTE *)(a4 + 8) = 1;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v8);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 8) = 0;
  }
  if (v25)
  {
    v20 = v24;
    v24 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v8);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
LABEL_27:
  result = v26[0];
  if (v26[0])
  {
    if (*(_DWORD *)v26[0] == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v26[0], v8);
    else
      *(_DWORD *)v26[0] -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorCSSAgent::setStyleSheetText@<X0>(WebCore::InspectorCSSAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, uint64_t a4@<X8>)
{
  return WebCore::InspectorCSSAgent::setStyleSheetText((WebCore::InspectorCSSAgent *)((char *)this - 32), a2, a3, a4);
}

WTF::StringImpl *WebCore::InspectorCSSAgent::setStyleText@<X0>(WebCore::InspectorCSSAgent *a1@<X0>, const WTF::JSONImpl::Object **a2@<X1>, _DWORD **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WebCore::InspectorStyleSheet *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  char **v17;
  char *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WebCore::CSSStyleDeclaration *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *result;
  uint64_t v25;
  char v26[8];
  WTF::StringImpl *v27;
  char v28;
  WTF::StringImpl *v29;
  int v30;
  WTF::StringImpl *v31[2];

  v31[0] = 0;
  WebCore::InspectorCSSId::InspectorCSSId((WebCore::InspectorCSSId *)&v29, *a2);
  v7 = WebCore::InspectorCSSAgent::assertStyleSheetForId(a1, v31, &v29);
  if (!v7)
  {
    v20 = v31[0];
    if (v31[0])
      *(_DWORD *)v31[0] += 2;
    *(_QWORD *)a4 = v20;
    goto LABEL_23;
  }
  v9 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 40);
  if (!v9)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_23:
    *(_DWORD *)(a4 + 8) = 1;
    goto LABEL_29;
  }
  v10 = (WebCore::InspectorStyleSheet *)v7;
  v11 = *(_QWORD *)(v9 + 224);
  v12 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)(v12 + 8) = 0;
  ++*((_DWORD *)v10 + 2);
  *(_QWORD *)(v12 + 16) = v10;
  *(_QWORD *)v12 = off_1E33EF850;
  v13 = v29;
  if (v29)
    *(_DWORD *)v29 += 2;
  *(_QWORD *)(v12 + 24) = v13;
  *(_DWORD *)(v12 + 32) = v30;
  v14 = *a3;
  if (*a3)
    *v14 += 2;
  *(_QWORD *)(v12 + 40) = v14;
  *(_QWORD *)(v12 + 48) = 0;
  v25 = v12;
  WebCore::InspectorHistory::perform(v11, (char *)&v25, (uint64_t)v26);
  v15 = v25;
  v25 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (v28)
  {
    v16 = v27;
    v27 = 0;
    if (v26[0] >= 0x20u)
      v17 = (char **)&WebCore::DOMException::description(WebCore::ExceptionCode)::emptyDescription;
    else
      v17 = &(&WebCore::descriptions)[5 * v26[0]];
    v18 = v17[1];
    if (v18)
    {
      v8 = (WTF::StringImpl *)(v18 - 1);
      if (v18 == (char *)1)
      {
        v19 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v19 = v31[1];
      }
    }
    else
    {
      v19 = 0;
    }
    *(_QWORD *)a4 = v19;
    *(_DWORD *)(a4 + 8) = 1;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v8);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  else
  {
    v21 = (WebCore::CSSStyleDeclaration *)(*(uint64_t (**)(WebCore::InspectorStyleSheet *, WTF::StringImpl **))(*(_QWORD *)v10 + 32))(v10, &v29);
    WebCore::InspectorStyleSheet::buildObjectForStyle(v10, v21, (uint64_t *)a4);
    *(_DWORD *)(a4 + 8) = 0;
  }
  if (v28)
  {
    v22 = v27;
    v27 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v8);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
LABEL_29:
  v23 = v29;
  v29 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v8);
    else
      *(_DWORD *)v23 -= 2;
  }
  result = v31[0];
  if (v31[0])
  {
    if (*(_DWORD *)v31[0] == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v31[0], v8);
    else
      *(_DWORD *)v31[0] -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorCSSAgent::setStyleText@<X0>(uint64_t a1@<X0>, const WTF::JSONImpl::Object **a2@<X1>, _DWORD **a3@<X2>, uint64_t a4@<X8>)
{
  return WebCore::InspectorCSSAgent::setStyleText((WebCore::InspectorCSSAgent *)(a1 - 32), a2, a3, a4);
}

WTF::StringImpl *WebCore::InspectorCSSAgent::setRuleSelector@<X0>(WebCore::InspectorCSSAgent *a1@<X0>, const WTF::JSONImpl::Object **a2@<X1>, _DWORD **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  char **v17;
  char *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WebCore::CSSStyleSheet *v21;
  unsigned int v22;
  WebCore::CSSStyleSheet *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *result;
  uint64_t v28;
  char v29[8];
  WTF::StringImpl *v30;
  char v31;
  WTF::StringImpl *v32;
  unsigned int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;

  v34 = 0;
  WebCore::InspectorCSSId::InspectorCSSId((WebCore::InspectorCSSId *)&v32, *a2);
  v7 = WebCore::InspectorCSSAgent::assertStyleSheetForId(a1, &v34, &v32);
  if (!v7)
  {
    v20 = v34;
    if (v34)
      *(_DWORD *)v34 += 2;
    *(_QWORD *)a4 = v20;
    goto LABEL_23;
  }
  v9 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 40);
  if (!v9)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_23:
    *(_DWORD *)(a4 + 8) = 1;
    goto LABEL_46;
  }
  v10 = v7;
  v11 = *(_QWORD *)(v9 + 224);
  v12 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)(v12 + 8) = 0;
  ++*(_DWORD *)(v10 + 8);
  *(_QWORD *)(v12 + 16) = v10;
  *(_QWORD *)v12 = off_1E33EF8A0;
  v13 = v32;
  if (v32)
    *(_DWORD *)v32 += 2;
  *(_QWORD *)(v12 + 24) = v13;
  *(_DWORD *)(v12 + 32) = v33;
  v14 = *a3;
  if (*a3)
    *v14 += 2;
  *(_QWORD *)(v12 + 40) = v14;
  *(_QWORD *)(v12 + 48) = 0;
  v28 = v12;
  WebCore::InspectorHistory::perform(v11, (char *)&v28, (uint64_t)v29);
  v15 = v28;
  v28 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (v31)
  {
    v16 = v30;
    v30 = 0;
    if (v29[0] >= 0x20u)
      v17 = (char **)&WebCore::DOMException::description(WebCore::ExceptionCode)::emptyDescription;
    else
      v17 = &(&WebCore::descriptions)[5 * v29[0]];
    v18 = v17[1];
    if (v18)
    {
      v8 = (WTF::StringImpl *)(v18 - 1);
      if (v18 == (char *)1)
      {
        v19 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v19 = v35;
      }
    }
    else
    {
      v19 = 0;
    }
    *(_QWORD *)a4 = v19;
    *(_DWORD *)(a4 + 8) = 1;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v8);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  else
  {
    v21 = *(WebCore::CSSStyleSheet **)(v10 + 32);
    if (v21)
    {
      v22 = *(_DWORD *)(v10 + 76);
      if (!v22)
      {
        WebCore::asCSSRuleList((uint64_t)&v35, v21);
        WebCore::InspectorStyleSheet::collectFlatRules((uint64_t *)&v35, (char **)(v10 + 64));
        if (v35)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v35 + 24))(v35);
        v22 = *(_DWORD *)(v10 + 76);
      }
      if (v22 > v33 && (v23 = *(WebCore::CSSStyleSheet **)(*(_QWORD *)(v10 + 64) + 8 * v33)) != 0)
      {
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v23 + 16))(*(_QWORD *)(*(_QWORD *)(v10 + 64)
                                                                                        + 8 * v33)) == 1)
          v21 = v23;
        else
          v21 = 0;
      }
      else
      {
        v21 = 0;
      }
    }
    WebCore::InspectorStyleSheet::buildObjectForRule((WebCore::InspectorStyleSheet *)v10, v21, &v35);
    if (v35)
    {
      *(_QWORD *)a4 = v35;
      *(_DWORD *)(a4 + 8) = 0;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_DWORD *)(a4 + 8) = 1;
      v24 = v35;
      v35 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v24;
      }
    }
  }
  if (v31)
  {
    v25 = v30;
    v30 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v8);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
LABEL_46:
  v26 = v32;
  v32 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v8);
    else
      *(_DWORD *)v26 -= 2;
  }
  result = v34;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v34, v8);
    else
      *(_DWORD *)v34 -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorCSSAgent::setRuleSelector@<X0>(uint64_t a1@<X0>, const WTF::JSONImpl::Object **a2@<X1>, _DWORD **a3@<X2>, uint64_t a4@<X8>)
{
  return WebCore::InspectorCSSAgent::setRuleSelector((WebCore::InspectorCSSAgent *)(a1 - 32), a2, a3, a4);
}

WTF::StringImpl *WebCore::InspectorCSSAgent::setGroupingHeaderText@<X0>(WebCore::InspectorCSSAgent *a1@<X0>, const WTF::JSONImpl::Object **a2@<X1>, _DWORD **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  char **v17;
  char *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WebCore::CSSStyleSheet *v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *result;
  WTF::StringImpl *v26;
  uint64_t v27;
  char v28[8];
  WTF::StringImpl *v29;
  char v30;
  WTF::StringImpl *v31;
  unsigned int v32;
  WTF::StringImpl *v33;
  uint64_t v34;

  v33 = 0;
  WebCore::InspectorCSSId::InspectorCSSId((WebCore::InspectorCSSId *)&v31, *a2);
  v7 = WebCore::InspectorCSSAgent::assertStyleSheetForId(a1, &v33, &v31);
  if (!v7)
  {
    v20 = v33;
    if (v33)
      *(_DWORD *)v33 += 2;
    *(_QWORD *)a4 = v20;
    goto LABEL_23;
  }
  v9 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 40);
  if (!v9)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_23:
    *(_DWORD *)(a4 + 8) = 1;
    goto LABEL_40;
  }
  v10 = v7;
  v11 = *(_QWORD *)(v9 + 224);
  v12 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)(v12 + 8) = 0;
  ++*(_DWORD *)(v10 + 8);
  *(_QWORD *)(v12 + 16) = v10;
  *(_QWORD *)v12 = off_1E33EF8A0;
  v13 = v31;
  if (v31)
    *(_DWORD *)v31 += 2;
  *(_QWORD *)(v12 + 24) = v13;
  *(_DWORD *)(v12 + 32) = v32;
  v14 = *a3;
  if (*a3)
    *v14 += 2;
  *(_QWORD *)(v12 + 40) = v14;
  *(_QWORD *)(v12 + 48) = 0;
  v27 = v12;
  WebCore::InspectorHistory::perform(v11, (char *)&v27, (uint64_t)v28);
  v15 = v27;
  v27 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (v30)
  {
    v16 = v29;
    v29 = 0;
    if (v28[0] >= 0x20u)
      v17 = (char **)&WebCore::DOMException::description(WebCore::ExceptionCode)::emptyDescription;
    else
      v17 = &(&WebCore::descriptions)[5 * v28[0]];
    v18 = v17[1];
    if (v18)
    {
      v8 = (WTF::StringImpl *)(v18 - 1);
      if (v18 == (char *)1)
      {
        v19 = MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v19 = v34;
      }
    }
    else
    {
      v19 = 0;
    }
    *(_QWORD *)a4 = v19;
    *(_DWORD *)(a4 + 8) = 1;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v8);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  else
  {
    v21 = *(WebCore::CSSStyleSheet **)(v10 + 32);
    if (v21)
    {
      v22 = *(_DWORD *)(v10 + 76);
      if (!v22)
      {
        WebCore::asCSSRuleList((uint64_t)&v34, v21);
        WebCore::InspectorStyleSheet::collectFlatRules(&v34, (char **)(v10 + 64));
        if (v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
        v22 = *(_DWORD *)(v10 + 76);
      }
      if (v22 <= v32)
        v21 = 0;
      else
        v21 = *(WebCore::CSSStyleSheet **)(*(_QWORD *)(v10 + 64) + 8 * v32);
    }
    WebCore::InspectorStyleSheet::buildObjectForGrouping((_DWORD *)v10, v21, &v26);
    if (v26)
    {
      *(_QWORD *)a4 = v26;
      *(_DWORD *)(a4 + 8) = 0;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_DWORD *)(a4 + 8) = 1;
    }
  }
  if (v30)
  {
    v23 = v29;
    v29 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v8);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
LABEL_40:
  v24 = v31;
  v31 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v8);
    else
      *(_DWORD *)v24 -= 2;
  }
  result = v33;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v33, v8);
    else
      *(_DWORD *)v33 -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorCSSAgent::setGroupingHeaderText@<X0>(uint64_t a1@<X0>, const WTF::JSONImpl::Object **a2@<X1>, _DWORD **a3@<X2>, uint64_t a4@<X8>)
{
  return WebCore::InspectorCSSAgent::setGroupingHeaderText((WebCore::InspectorCSSAgent *)(a1 - 32), a2, a3, a4);
}

WTF::StringImpl *WebCore::InspectorCSSAgent::createStyleSheet@<X0>(WebCore::InspectorCSSAgent *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::InspectorPageAgent *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  const WTF::StringImpl *v18;
  WebCore::Style::Scope *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  WTF::StringImpl *result;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  _BYTE v37[8];
  WTF::StringImpl *v38;
  char v39;

  v36 = 0;
  v5 = *(WebCore::InspectorPageAgent **)(*((_QWORD *)this + 2) + 200);
  if (!v5)
    goto LABEL_53;
  v6 = WebCore::InspectorPageAgent::assertFrame(v5, &v36, a2);
  if (!v6)
  {
    v16 = v36;
    if (v36)
      *(_DWORD *)v36 += 2;
    *(_QWORD *)a3 = v16;
    goto LABEL_54;
  }
  v8 = *(_QWORD *)(v6 + 296);
  if (!v8 || (*(_WORD *)(v8 + 3358) & 0x21) == 0)
  {
LABEL_53:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_54:
    v32 = 1;
    goto LABEL_55;
  }
  v9 = bmalloc::api::isoAllocate();
  v10 = v9;
  *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v9 + 24) = 0x101C00000002;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v8 + 96;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  ++*(_DWORD *)(v8 + 3324);
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  v11 = WebCore::HTMLNames::styleTag;
  if (WebCore::HTMLNames::styleTag)
    ++*(_DWORD *)WebCore::HTMLNames::styleTag;
  *(_QWORD *)(v9 + 96) = v11;
  *(_QWORD *)(v9 + 104) = 0;
  *(_QWORD *)v9 = off_1E33CD4C8;
  *(_WORD *)(v9 + 112) = 0;
  *(_DWORD *)(v9 + 116) = 0;
  *(_DWORD *)(v9 + 120) = 0;
  *(_OWORD *)(v9 + 128) = 0uLL;
  *(_OWORD *)(v9 + 144) = 0uLL;
  *(_BYTE *)(v9 + 160) = 0;
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v9, 0xFFFFFFFFLL, (WebCore::TreeScope *)&WebCore::HTMLNames::typeAttr, (WTF::StringImpl **)&WebCore::cssContentTypeAtomData, 0);
  v12 = *(_QWORD *)(v8 + 1272);
  if (!v12)
    goto LABEL_68;
  v13 = *(_QWORD *)(v12 + 80);
  if (v13)
  {
    v14 = *(_QWORD *)(v12 + 80);
    while ((*(_WORD *)(v14 + 28) & 0x10) == 0
         || *(_QWORD *)(*(_QWORD *)(v14 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::headTag + 24))
    {
      v14 = *(_QWORD *)(v14 + 56);
      if (!v14)
        goto LABEL_13;
    }
    v13 = v14;
LABEL_25:
    *((_BYTE *)this + 132) = 1;
    v17 = WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v8 + 192));
    *(_BYTE *)(v17 + 180) = 1;
    WebCore::ContainerNode::appendChild(v13, (WebCore::Node *)v10, (uint64_t)v37);
    v19 = *(WebCore::Style::Scope **)(v8 + 1328);
    if (*((_BYTE *)v19 + 234))
      WebCore::Style::Scope::flushPendingDescendantUpdates(*(WebCore::Style::Scope **)(v8 + 1328), (uint64_t)v7, v18);
    if (*((_BYTE *)v19 + 233))
      WebCore::Style::Scope::flushPendingSelfUpdate(v19, (uint64_t)v7, v18);
    *((_BYTE *)this + 132) = 0;
    if (v39)
    {
      v20 = v38;
      v38 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 != 2)
        {
          v15 = 0;
          *(_DWORD *)v20 -= 2;
LABEL_46:
          *(_BYTE *)(v17 + 180) = 0;
          goto LABEL_47;
        }
        WTF::StringImpl::destroy(v20, v7);
      }
    }
    else
    {
      v21 = *((_QWORD *)this + 12);
      if (v21)
      {
        v22 = *(_DWORD *)(v21 - 8);
        v23 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
        v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
        v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
        v26 = v22 & ((v25 >> 31) ^ v25);
        v27 = (uint64_t *)(v21 + 24 * v26);
        v28 = *v27;
        if (*v27 != v8)
        {
          v29 = 1;
          while (v28)
          {
            v26 = (v26 + v29) & v22;
            v27 = (uint64_t *)(v21 + 24 * v26);
            v28 = *v27;
            ++v29;
            if (*v27 == v8)
              goto LABEL_41;
          }
          v27 = (uint64_t *)(v21 + 24 * *(unsigned int *)(v21 - 4));
        }
LABEL_41:
        if (v27 != (uint64_t *)(v21 + 24 * *(unsigned int *)(v21 - 4)))
        {
          v30 = *((unsigned int *)v27 + 5);
          if ((_DWORD)v30)
          {
            v15 = *(_QWORD *)(v27[1] + 8 * v30 - 8);
            goto LABEL_46;
          }
        }
      }
    }
    v15 = 0;
    goto LABEL_46;
  }
LABEL_13:
  if ((*(_WORD *)(v12 + 28) & 0x10) == 0)
    goto LABEL_68;
  v15 = 0;
  if (v13 && *(_QWORD *)(*(_QWORD *)(v12 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
  {
    v15 = 0;
    while ((*(_WORD *)(v13 + 28) & 0x10) == 0)
    {
      v13 = *(_QWORD *)(v13 + 56);
      if (!v13)
        goto LABEL_47;
    }
    v34 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
    v35 = *(_QWORD *)(*(_QWORD *)(v13 + 96) + 24);
    if (v35 == v34)
      goto LABEL_25;
LABEL_63:
    if (v35 == *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
      goto LABEL_25;
    while (1)
    {
      v13 = *(_QWORD *)(v13 + 56);
      if (!v13)
        break;
      if ((*(_WORD *)(v13 + 28) & 0x10) != 0)
      {
        v35 = *(_QWORD *)(*(_QWORD *)(v13 + 96) + 24);
        if (v35 != v34)
          goto LABEL_63;
        goto LABEL_25;
      }
    }
LABEL_68:
    v15 = 0;
  }
LABEL_47:
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v10, v7);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  if (!v15)
    goto LABEL_53;
  v31 = *(_DWORD **)(v15 + 24);
  if (v31)
    *v31 += 2;
  v32 = 0;
  *(_QWORD *)a3 = v31;
LABEL_55:
  *(_DWORD *)(a3 + 8) = v32;
  result = v36;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v36, v7);
    else
      *(_DWORD *)v36 -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorCSSAgent::createStyleSheet@<X0>(WebCore::InspectorCSSAgent *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorCSSAgent::createStyleSheet((WebCore::InspectorCSSAgent *)((char *)this - 32), a2, a3);
}

WTF::StringImpl *WebCore::InspectorCSSAgent::addRule@<X0>(WebCore::InspectorCSSAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  char **v17;
  char *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WebCore::CSSStyleSheet *v22;
  uint64_t v23;
  unsigned int v24;
  WebCore::CSSStyleSheet *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *result;
  uint64_t v29;
  char v30[8];
  WTF::StringImpl *v31;
  char v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;

  v33 = 0;
  v7 = WebCore::InspectorCSSAgent::assertStyleSheetForId(this, &v33, a2);
  if (!v7)
  {
    v20 = v33;
    if (v33)
      *(_DWORD *)v33 += 2;
    *(_QWORD *)a4 = v20;
    goto LABEL_21;
  }
  v9 = *(_QWORD *)(*((_QWORD *)this + 2) + 40);
  if (!v9)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_21:
    *(_DWORD *)(a4 + 8) = 1;
    goto LABEL_50;
  }
  v10 = v7;
  v11 = WTF::fastMalloc((WTF *)0x38);
  v12 = v11;
  *(_QWORD *)(v11 + 8) = 0;
  ++*(_DWORD *)(v10 + 8);
  *(_QWORD *)v11 = off_1E33EF8F0;
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = 0;
  *(_DWORD *)(v11 + 32) = 0;
  v13 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v13 += 2;
  *(_QWORD *)(v11 + 40) = v13;
  *(_QWORD *)(v11 + 48) = 0;
  v14 = *(_QWORD *)(v9 + 224);
  v29 = v12;
  WebCore::InspectorHistory::perform(v14, (char *)&v29, (uint64_t)v30);
  v15 = v29;
  v29 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (v32)
  {
    v16 = v31;
    v31 = 0;
    if (v30[0] >= 0x20u)
      v17 = (char **)&WebCore::DOMException::description(WebCore::ExceptionCode)::emptyDescription;
    else
      v17 = &(&WebCore::descriptions)[5 * v30[0]];
    v18 = v17[1];
    if (v18)
    {
      v8 = (WTF::StringImpl *)(v18 - 1);
      if (v18 == (char *)1)
      {
        v19 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v19 = v34;
      }
    }
    else
    {
      v19 = 0;
    }
    *(_QWORD *)a4 = v19;
    *(_DWORD *)(a4 + 8) = 1;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v8);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  else
  {
    v21 = *(WTF::StringImpl **)(v12 + 24);
    if (v21)
      *(_DWORD *)v21 += 2;
    v22 = *(WebCore::CSSStyleSheet **)(v10 + 32);
    if (v22)
    {
      v23 = *(unsigned int *)(v12 + 32);
      v24 = *(_DWORD *)(v10 + 76);
      if (!v24)
      {
        WebCore::asCSSRuleList((uint64_t)&v34, v22);
        WebCore::InspectorStyleSheet::collectFlatRules((uint64_t *)&v34, (char **)(v10 + 64));
        if (v34)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v34 + 24))(v34);
        v24 = *(_DWORD *)(v10 + 76);
      }
      if (v24 > v23 && (v25 = *(WebCore::CSSStyleSheet **)(*(_QWORD *)(v10 + 64) + 8 * v23)) != 0)
      {
        if ((*(unsigned int (**)(WebCore::CSSStyleSheet *))(*(_QWORD *)v25 + 16))(v25) == 1)
          v22 = v25;
        else
          v22 = 0;
      }
      else
      {
        v22 = 0;
      }
    }
    WebCore::InspectorStyleSheet::buildObjectForRule((WebCore::InspectorStyleSheet *)v10, v22, &v34);
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v8);
      else
        *(_DWORD *)v21 -= 2;
    }
    if (v34)
    {
      *(_QWORD *)a4 = v34;
      *(_DWORD *)(a4 + 8) = 0;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_DWORD *)(a4 + 8) = 1;
      v26 = v34;
      v34 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v26;
      }
    }
  }
  if (v32)
  {
    v27 = v31;
    v31 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v8);
      else
        *(_DWORD *)v27 -= 2;
    }
  }
LABEL_50:
  result = v33;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v33, v8);
    else
      *(_DWORD *)v33 -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorCSSAgent::addRule@<X0>(WebCore::InspectorCSSAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, uint64_t a4@<X8>)
{
  return WebCore::InspectorCSSAgent::addRule((WebCore::InspectorCSSAgent *)((char *)this - 32), a2, a3, a4);
}

void WebCore::InspectorCSSAgent::getSupportedCSSProperties(WebCore::InspectorCSSAgent *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  WTF::JSONImpl::Object *isExposedNotInvalidAndNotInternal;
  uint64_t v5;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::JSONImpl::Value *v9;
  const WTF::String *v10;
  WTF::StringImpl *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::JSONImpl::Value *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  const WTF::String *v19;
  WTF::JSONImpl::Value *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  _WORD *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  char **v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v44;
  uint64_t v45;
  WTF::JSONImpl::Value *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  int v54;
  WTF::StringImpl *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  char **v65;
  unint64_t *v66;
  WTF::JSONImpl::Value *v67;
  int v68;
  uint64_t v69;
  char *v70;
  char *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  int v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  WTF::StringImpl *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  void *v97;
  void *v98;
  WTF::StringImpl **v99;
  _DWORD **v100;
  uint64_t v101;
  _DWORD *v102;
  WTF::JSONImpl::Value *v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  _DWORD **v106;
  uint64_t v107;
  _DWORD *v108;
  _DWORD **v109;
  uint64_t v110;
  _DWORD *v111;
  _DWORD **v112;
  uint64_t v113;
  _DWORD *v114;
  _DWORD **v115;
  uint64_t v116;
  _DWORD *v117;
  WTF::JSONImpl::Object *v119;
  uint64_t *v120;
  WTF::JSONImpl::Value *v121;
  int v122;
  unsigned int v123;
  WTF::StringImpl *v124;
  __int128 v125;
  __int128 v126;
  char v127;
  WTF::StringImpl **v128;
  WTF::StringImpl *v129;

  v3 = WTF::fastMalloc((WTF *)0x20);
  isExposedNotInvalidAndNotInternal = (WTF::JSONImpl::Object *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v3);
  v5 = 2u;
  v119 = isExposedNotInvalidAndNotInternal;
  while (2)
  {
    if ((unsigned __int16)v5 - 304 <= 0x1E && ((1 << (v5 - 48)) & 0x7C010001) != 0)
      goto LABEL_169;
    v7 = *(_QWORD *)(*((_QWORD *)this + 8) + 112);
    if (v7)
    {
      isExposedNotInvalidAndNotInternal = (WTF::JSONImpl::Object *)WebCore::isExposedNotInvalidAndNotInternal((unsigned __int16)v5, *(_QWORD *)(v7 + 664), *(_QWORD *)(v7 + 672), *(_QWORD *)(v7 + 680), *(_QWORD *)(v7 + 688), *(_QWORD *)(v7 + 696), *(_QWORD *)(v7 + 704), *(_QWORD *)(v7 + 712));
      if (!(_DWORD)isExposedNotInvalidAndNotInternal)
        goto LABEL_169;
    }
    WTF::JSONImpl::Object::create(isExposedNotInvalidAndNotInternal);
    v8 = v124;
    v9 = (WTF::JSONImpl::Value *)WebCore::nameString((unsigned __int16)v5);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v9, v10);
    v120 = (uint64_t *)((char *)v8 + 16);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v8 + 2, &v129, (const WTF::StringImpl *)&v121, (uint64_t)&v124);
    if (BYTE8(v125))
    {
      v12 = (uint64_t *)((char *)v8 + 24);
      v13 = *((unsigned int *)v8 + 9);
      if ((_DWORD)v13 == *((_DWORD *)v8 + 8))
      {
        v100 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, v13 + 1, (unint64_t)&v129);
        v13 = *((unsigned int *)v8 + 9);
        v101 = *((_QWORD *)v8 + 3);
        v102 = *v100;
        if (*v100)
          *v102 += 2;
        *(_QWORD *)(v101 + 8 * v13) = v102;
      }
      else
      {
        v14 = *v12;
        v15 = v129;
        if (v129)
          *(_DWORD *)v129 += 2;
        *(_QWORD *)(v14 + 8 * v13) = v15;
      }
      *((_DWORD *)v8 + 9) = v13 + 1;
    }
    v16 = v121;
    v121 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v16;
    }
    v17 = v129;
    v129 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v11);
      else
        *(_DWORD *)v17 -= 2;
    }
    WebCore::CSSProperty::aliasesForProperty((unsigned __int16)v5, (uint64_t)&v121);
    if (v123)
    {
      v18 = WTF::fastMalloc((WTF *)0x20);
      WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v18);
      if (v123)
      {
        v20 = v121;
        v21 = 8 * v123;
        do
        {
          WTF::JSONImpl::Value::create(v20, v19);
          v22 = *(unsigned int *)(v18 + 28);
          if ((_DWORD)v22 == *(_DWORD *)(v18 + 24))
          {
            v23 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v18 + 16), v22 + 1, (unint64_t)&v124);
            v22 = *(unsigned int *)(v18 + 28);
            v24 = *(_QWORD *)(v18 + 16);
            v25 = *(WTF::StringImpl **)v23;
            *(_QWORD *)v23 = 0;
          }
          else
          {
            v24 = *(_QWORD *)(v18 + 16);
            v25 = v124;
            v124 = 0;
          }
          *(_QWORD *)(v24 + 8 * v22) = v25;
          *(_DWORD *)(v18 + 28) = v22 + 1;
          v26 = v124;
          v124 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v26;
          }
          v20 = (WTF::JSONImpl::Value *)((char *)v20 + 8);
          v21 -= 8;
        }
        while (v21);
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v128 = (WTF::StringImpl **)v18;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v120, &v129, (const WTF::StringImpl *)&v128, (uint64_t)&v124);
      v3 = (uint64_t)v119;
      if (BYTE8(v125))
      {
        v28 = (uint64_t *)((char *)v8 + 24);
        v29 = *((unsigned int *)v8 + 9);
        if ((_DWORD)v29 == *((_DWORD *)v8 + 8))
        {
          v106 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v28, v29 + 1, (unint64_t)&v129);
          v29 = *((unsigned int *)v8 + 9);
          v107 = *((_QWORD *)v8 + 3);
          v108 = *v106;
          if (*v106)
            *v108 += 2;
          *(_QWORD *)(v107 + 8 * v29) = v108;
        }
        else
        {
          v30 = *v28;
          v31 = v129;
          if (v129)
            *(_DWORD *)v129 += 2;
          *(_QWORD *)(v30 + 8 * v29) = v31;
        }
        *((_DWORD *)v8 + 9) = v29 + 1;
      }
      v32 = (WTF::StringImpl *)v128;
      v128 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v32;
      }
      v33 = v129;
      v129 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v27);
        else
          *(_DWORD *)v33 -= 2;
      }
    }
    v34 = WebCore::shorthandForProperty((unsigned __int16)v5);
    v36 = v35;
    if (v35)
    {
      v37 = (_WORD *)v34;
      v38 = WTF::fastMalloc((WTF *)0x20);
      v40 = (char **)(WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v38) + 16);
      v41 = 2 * v36;
      while (1)
      {
        v42 = (unsigned __int16)*v37;
        if (*v37)
        {
          if (v42 - 304 > 0x1E || ((1 << (v42 - 48)) & 0x7C010001) == 0)
          {
            v44 = *(_QWORD *)(*((_QWORD *)this + 8) + 112);
            if (!v44
              || WebCore::isExposedNotInvalidAndNotInternal(v42, *(_QWORD *)(v44 + 664), *(_QWORD *)(v44 + 672), *(_QWORD *)(v44 + 680), *(_QWORD *)(v44 + 688), *(_QWORD *)(v44 + 696), *(_QWORD *)(v44 + 704), *(_QWORD *)(v44 + 712)))
            {
              break;
            }
          }
        }
LABEL_66:
        ++v37;
        v41 -= 2;
        if (!v41)
        {
          if (*(_DWORD *)(v38 + 28))
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v128 = (WTF::StringImpl **)v38;
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v120, &v129, (const WTF::StringImpl *)&v128, (uint64_t)&v124);
            v3 = (uint64_t)v119;
            if (BYTE8(v125))
            {
              v56 = (uint64_t *)((char *)v8 + 24);
              v57 = *((unsigned int *)v8 + 9);
              if ((_DWORD)v57 == *((_DWORD *)v8 + 8))
              {
                v112 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v56, v57 + 1, (unint64_t)&v129);
                v57 = *((unsigned int *)v8 + 9);
                v113 = *((_QWORD *)v8 + 3);
                v114 = *v112;
                if (*v112)
                  *v114 += 2;
                *(_QWORD *)(v113 + 8 * v57) = v114;
              }
              else
              {
                v58 = *v56;
                v59 = v129;
                if (v129)
                  *(_DWORD *)v129 += 2;
                *(_QWORD *)(v58 + 8 * v57) = v59;
              }
              *((_DWORD *)v8 + 9) = v57 + 1;
            }
            v60 = (WTF::StringImpl *)v128;
            v128 = 0;
            if (v60)
            {
              if (*(_DWORD *)v60 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v60;
            }
            v61 = v129;
            v129 = 0;
            if (v61)
            {
              if (*(_DWORD *)v61 == 2)
                WTF::StringImpl::destroy(v61, v55);
              else
                *(_DWORD *)v61 -= 2;
            }
          }
          else
          {
            if (*(_DWORD *)v38 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v38;
            v3 = (uint64_t)v119;
          }
          goto LABEL_92;
        }
      }
      v45 = v42 - 2;
      if (v42 < 2 || v45 > 0x227)
      {
        v46 = (WTF::JSONImpl::Value *)MEMORY[0x1E0CBF2F8];
      }
      else
      {
        {
          bzero(WebCore::nameString(WebCore::CSSPropertyID)::atomStrings, 0x1140uLL);
        }
        v46 = (WTF::JSONImpl::Value *)&WebCore::nameString(WebCore::CSSPropertyID)::atomStrings[v45];
        if (*(_QWORD *)v46)
          goto LABEL_60;
        WTF::AtomString::AtomString(&v124, (uint64_t)(&WebCore::propertyNameStrings)[2 * v45], (unint64_t)(&WebCore::propertyNameStrings)[2 * v45 + 1]);
        v52 = v124;
        v124 = 0;
        v53 = (WTF::StringImpl *)WebCore::nameString(WebCore::CSSPropertyID)::atomStrings[v45];
        WebCore::nameString(WebCore::CSSPropertyID)::atomStrings[v45] = v52;
        if (!v53)
          goto LABEL_60;
        v54 = *(_DWORD *)v53 - 2;
        if (*(_DWORD *)v53 != 2)
          goto LABEL_71;
        WTF::StringImpl::destroy(v53, v39);
        v53 = v124;
        v124 = 0;
        if (v53)
        {
          v54 = *(_DWORD *)v53 - 2;
          if (*(_DWORD *)v53 != 2)
          {
LABEL_71:
            *(_DWORD *)v53 = v54;
            goto LABEL_60;
          }
          WTF::StringImpl::destroy(v53, v39);
        }
      }
LABEL_60:
      WTF::JSONImpl::Value::create(v46, v39);
      v47 = *(unsigned int *)(v38 + 28);
      if ((_DWORD)v47 == *(_DWORD *)(v38 + 24))
      {
        v48 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v40, v47 + 1, (unint64_t)&v124);
        v47 = *(unsigned int *)(v38 + 28);
        v49 = *(char **)(v38 + 16);
        v50 = *(WTF::StringImpl **)v48;
        *(_QWORD *)v48 = 0;
      }
      else
      {
        v49 = *v40;
        v50 = v124;
        v124 = 0;
      }
      *(_QWORD *)&v49[8 * v47] = v50;
      *(_DWORD *)(v38 + 28) = v47 + 1;
      v51 = v124;
      v124 = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v51;
      }
      goto LABEL_66;
    }
LABEL_92:
    if (!WebCore::CSSPropertyParsing::isKeywordFastPathEligibleStyleProperty((unsigned __int16)v5))
      goto LABEL_139;
    v63 = WTF::fastMalloc((WTF *)0x20);
    v64 = 0;
    v65 = (char **)(WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v63) + 16);
    v66 = (unint64_t *)&unk_1E32144A0;
    v67 = (WTF::JSONImpl::Value *)WebCore::nameString(WebCore::CSSValueID)::strings;
    do
    {
      {
        v124 = 0;
        WTF::URL::invalidate((WTF::URL *)&v124);
        v78 = v124;
        if (v124)
          *(_DWORD *)v124 += 2;
        WebCore::strictCSSParserContext(void)::strictContext = (uint64_t)v78;
        unk_1EE2F56F0 = v125;
        unk_1EE2F5700 = v126;
        qword_1EE2F5710 = 0;
        *(uint64_t *)((char *)&qword_1EE2F5710 + 6) = 0;
        unk_1EE2F571E &= 0xC0000000;
        v79 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
        if (v79 != -1)
        {
          v129 = (WTF::StringImpl *)&v127;
          v128 = &v129;
          std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v128, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
        }
        v80 = v124;
        v124 = 0;
        if (v80)
        {
          if (*(_DWORD *)v80 == 2)
            WTF::StringImpl::destroy(v80, v77);
          else
            *(_DWORD *)v80 -= 2;
        }
      }
      WebCore::CSSPropertyParsing::isKeywordValidForStyleProperty((unsigned __int16)v5, (unsigned __int16)v64, (uint64_t)&WebCore::strictCSSParserContext(void)::strictContext);
      if (v68)
      {
        {
          bzero(WebCore::nameString(WebCore::CSSValueID)::strings, 0x2470uLL);
        }
        if (*(_QWORD *)v67)
          goto LABEL_99;
        WTF::AtomString::AtomString(&v124, *(v66 - 1), *v66);
        v74 = v124;
        v124 = 0;
        v75 = *(WTF::StringImpl **)v67;
        *(_QWORD *)v67 = v74;
        if (!v75)
          goto LABEL_99;
        v76 = *(_DWORD *)v75 - 2;
        if (*(_DWORD *)v75 != 2)
          goto LABEL_110;
        WTF::StringImpl::destroy(v75, v62);
        v75 = v124;
        v124 = 0;
        if (v75)
        {
          v76 = *(_DWORD *)v75 - 2;
          if (*(_DWORD *)v75 != 2)
          {
LABEL_110:
            *(_DWORD *)v75 = v76;
            goto LABEL_99;
          }
          WTF::StringImpl::destroy(v75, v62);
        }
LABEL_99:
        WTF::JSONImpl::Value::create(v67, v62);
        v69 = *(unsigned int *)(v63 + 28);
        if ((_DWORD)v69 == *(_DWORD *)(v63 + 24))
        {
          v70 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v65, v69 + 1, (unint64_t)&v124);
          v69 = *(unsigned int *)(v63 + 28);
          v71 = *(char **)(v63 + 16);
          v72 = *(WTF::StringImpl **)v70;
          *(_QWORD *)v70 = 0;
        }
        else
        {
          v71 = *v65;
          v72 = v124;
          v124 = 0;
        }
        *(_QWORD *)&v71[8 * v69] = v72;
        *(_DWORD *)(v63 + 28) = v69 + 1;
        v73 = v124;
        v124 = 0;
        if (v73)
        {
          if (*(_DWORD *)v73 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v73;
        }
      }
      ++v64;
      v67 = (WTF::JSONImpl::Value *)((char *)v67 + 8);
      v66 += 2;
    }
    while (v64 != 1166);
    if (*(_DWORD *)(v63 + 28))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v128 = (WTF::StringImpl **)v63;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v120, &v129, (const WTF::StringImpl *)&v128, (uint64_t)&v124);
      v3 = (uint64_t)v119;
      if (BYTE8(v125))
      {
        v81 = (uint64_t *)((char *)v8 + 24);
        v82 = *((unsigned int *)v8 + 9);
        if ((_DWORD)v82 == *((_DWORD *)v8 + 8))
        {
          v115 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v81, v82 + 1, (unint64_t)&v129);
          v82 = *((unsigned int *)v8 + 9);
          v116 = *((_QWORD *)v8 + 3);
          v117 = *v115;
          if (*v115)
            *v117 += 2;
          *(_QWORD *)(v116 + 8 * v82) = v117;
        }
        else
        {
          v83 = *v81;
          v84 = v129;
          if (v129)
            *(_DWORD *)v129 += 2;
          *(_QWORD *)(v83 + 8 * v82) = v84;
        }
        *((_DWORD *)v8 + 9) = v82 + 1;
      }
      v85 = (WTF::StringImpl *)v128;
      v128 = 0;
      if (v85)
      {
        if (*(_DWORD *)v85 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v85;
      }
      v86 = v129;
      v129 = 0;
      if (v86)
      {
        if (*(_DWORD *)v86 == 2)
          WTF::StringImpl::destroy(v86, v62);
        else
          *(_DWORD *)v86 -= 2;
      }
    }
    else
    {
      if (*(_DWORD *)v63 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v63;
      v3 = (uint64_t)v119;
    }
LABEL_139:
    if (WebCore::isInheritedPropertyTable[v5])
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v120, (WTF::StringImpl **)&v128, (const WTF::StringImpl *)&v129, (uint64_t)&v124);
      if (BYTE8(v125))
      {
        v87 = (uint64_t *)((char *)v8 + 24);
        v88 = *((unsigned int *)v8 + 9);
        if ((_DWORD)v88 == *((_DWORD *)v8 + 8))
        {
          v109 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v87, v88 + 1, (unint64_t)&v128);
          v88 = *((unsigned int *)v8 + 9);
          v110 = *((_QWORD *)v8 + 3);
          v111 = *v109;
          if (*v109)
            *v111 += 2;
          *(_QWORD *)(v110 + 8 * v88) = v111;
        }
        else
        {
          v89 = *v87;
          v90 = (WTF::StringImpl *)v128;
          if (v128)
            *(_DWORD *)v128 += 2;
          *(_QWORD *)(v89 + 8 * v88) = v90;
        }
        *((_DWORD *)v8 + 9) = v88 + 1;
      }
      v91 = v129;
      v129 = 0;
      if (v91)
      {
        if (*(_DWORD *)v91 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v91;
      }
      v92 = (WTF::StringImpl *)v128;
      v128 = 0;
      if (v92)
      {
        if (*(_DWORD *)v92 == 2)
          WTF::StringImpl::destroy(v92, v62);
        else
          *(_DWORD *)v92 -= 2;
      }
    }
    v93 = *(unsigned int *)(v3 + 28);
    if ((_DWORD)v93 != *(_DWORD *)(v3 + 24))
    {
      v99 = (WTF::StringImpl **)(*(_QWORD *)(v3 + 16) + 8 * v93);
      goto LABEL_166;
    }
    v94 = v93 + (v93 >> 2);
    if (v94 >= 0x10)
      v95 = v94 + 1;
    else
      v95 = 16;
    if (v95 <= v93 + 1)
      v96 = v93 + 1;
    else
      v96 = v95;
    if (!(v96 >> 29))
    {
      v97 = *(void **)(v3 + 16);
      v98 = (void *)WTF::fastMalloc((WTF *)(8 * v96));
      *(_DWORD *)(v3 + 24) = v96;
      *(_QWORD *)(v3 + 16) = v98;
      memcpy(v98, v97, 8 * v93);
      if (v97)
      {
        if (*(void **)(v3 + 16) == v97)
        {
          *(_QWORD *)(v3 + 16) = 0;
          *(_DWORD *)(v3 + 24) = 0;
        }
        WTF::fastFree((WTF *)v97, v62);
      }
      v93 = *(unsigned int *)(v3 + 28);
      v99 = (WTF::StringImpl **)(*(_QWORD *)(v3 + 16) + 8 * v93);
LABEL_166:
      *v99 = v8;
      *(_DWORD *)(v3 + 28) = v93 + 1;
      if (v123)
      {
        v103 = v121;
        v104 = 8 * v123;
        do
        {
          v105 = *(WTF::StringImpl **)v103;
          *(_QWORD *)v103 = 0;
          if (v105)
          {
            if (*(_DWORD *)v105 == 2)
              WTF::StringImpl::destroy(v105, v62);
            else
              *(_DWORD *)v105 -= 2;
          }
          v103 = (WTF::JSONImpl::Value *)((char *)v103 + 8);
          v104 -= 8;
        }
        while (v104);
      }
      isExposedNotInvalidAndNotInternal = v121;
      if (v121)
      {
        v121 = 0;
        v122 = 0;
        isExposedNotInvalidAndNotInternal = (WTF::JSONImpl::Object *)WTF::fastFree(isExposedNotInvalidAndNotInternal, v62);
      }
LABEL_169:
      if (++v5 == 554)
      {
        *(_QWORD *)a2 = v3;
        *(_DWORD *)(a2 + 8) = 0;
        return;
      }
      continue;
    }
    break;
  }
  __break(0xC471u);
}

void `non-virtual thunk to'WebCore::InspectorCSSAgent::getSupportedCSSProperties(WebCore::InspectorCSSAgent *this@<X0>, uint64_t a2@<X8>)
{
  WebCore::InspectorCSSAgent::getSupportedCSSProperties((WebCore::InspectorCSSAgent *)((char *)this - 32), a2);
}

void WebCore::InspectorCSSAgent::getSupportedSystemFontFamilyNames(uint64_t a1@<X8>)
{
  uint64_t v3;
  WebCore *v4;
  uint64_t v5;
  uint64_t v6;
  const WTF::String *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::JSONImpl::Value *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  WTF::JSONImpl::Value *v19;
  unsigned int v20;
  _DWORD *v21;

  v3 = WTF::fastMalloc((WTF *)0x20);
  v4 = (WebCore *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v3);
  v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
    v6 = WebCore::threadGlobalDataSlow(v4);
  if (!*(_QWORD *)(v6 + 80))
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v6);
  WebCore::FontCache::systemFontFamilies((uint64_t)&v19);
  v8 = v19;
  if (v20)
  {
    v9 = 8 * v20;
    v10 = v9;
    v11 = v19;
    do
    {
      WTF::JSONImpl::Value::create(v11, v7);
      v12 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v12 == *(_DWORD *)(v3 + 24))
      {
        v13 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v3 + 16), v12 + 1, (unint64_t)&v21);
        v12 = *(unsigned int *)(v3 + 28);
        v14 = *(_QWORD *)(v3 + 16);
        v15 = *(_DWORD **)v13;
        *(_QWORD *)v13 = 0;
      }
      else
      {
        v14 = *(_QWORD *)(v3 + 16);
        v15 = v21;
        v21 = 0;
      }
      *(_QWORD *)(v14 + 8 * v12) = v15;
      *(_DWORD *)(v3 + 28) = v12 + 1;
      v16 = v21;
      v21 = 0;
      if (v16)
      {
        if (*v16 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v16;
      }
      v11 = (WTF::JSONImpl::Value *)((char *)v11 + 8);
      v10 -= 8;
    }
    while (v10);
    *(_QWORD *)a1 = v3;
    *(_DWORD *)(a1 + 8) = 0;
    v17 = (WTF::StringImpl **)v8;
    do
    {
      v18 = *v17;
      *v17 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v7);
        else
          *(_DWORD *)v18 -= 2;
      }
      ++v17;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    *(_QWORD *)a1 = v3;
    *(_DWORD *)(a1 + 8) = 0;
  }
  if (v8)
    WTF::fastFree(v8, v7);
}

WTF::StringImpl *WebCore::InspectorCSSAgent::forcePseudoState@<X0>(_QWORD *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  WebCore::InspectorDOMAgent *v6;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::JSONImpl::Value **v14;
  uint64_t v15;
  char v16;
  char v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *result;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int *v30;
  int v31;
  int *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  uint64_t v67;
  _QWORD v68[3];
  char v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  WTF::StringImpl *v72;

  v72 = 0;
  v6 = *(WebCore::InspectorDOMAgent **)(a1[2] + 40);
  if (!v6)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)(a4 + 8) = 1;
    return result;
  }
  v9 = WebCore::InspectorDOMAgent::assertElement(v6, &v72, a2);
  if (v9)
  {
    v11 = v9;
    v71 = 0;
    v12 = *(unsigned int *)(*(_QWORD *)a3 + 28);
    if (!(_DWORD)v12)
      goto LABEL_58;
    v67 = v9;
    v13 = 8 * v12;
    v14 = *(WTF::JSONImpl::Value ***)(*(_QWORD *)a3 + 16);
    do
    {
      WTF::JSONImpl::Value::asString(*v14);
      if (v70)
      {
        v15 = Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::CSS::ForceablePseudoClass>();
        if ((v15 & 0xFF00000000) != 0)
        {
          switch((int)v15)
          {
            case '*':
              v16 = 29;
              goto LABEL_26;
            case '+':
              v16 = 30;
              goto LABEL_26;
            case ',':
              v16 = 31;
              goto LABEL_26;
            case '-':
              v16 = 37;
              goto LABEL_26;
            case '.':
              v16 = 75;
              goto LABEL_26;
            case '/':
              v16 = 80;
              goto LABEL_26;
            default:
              if ((_DWORD)v15 != 2)
                goto LABEL_27;
              v16 = 11;
LABEL_26:
              v69 = v16;
              WTF::HashTable<WebCore::CSSSelectorPseudoClass,WebCore::CSSSelectorPseudoClass,WTF::IdentityExtractor,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>>::add(&v71, &v69, (uint64_t)v68);
LABEL_27:
              v17 = 1;
              break;
          }
        }
        else
        {
          v18 = (unsigned __int8 *)v70;
          if (v70)
          {
            v19 = *((_DWORD *)v70 + 1);
            *(_DWORD *)v70 += 2;
            if (v19 < 0 || (v20 = (v19 + 27), __OFADD__(v19, 27)))
            {
              v68[0] = 0;
LABEL_115:
              __break(0xC471u);
              JUMPOUT(0x195E0A9B0);
            }
            v21 = (v18[16] >> 2) & 1;
          }
          else
          {
            v21 = 1;
            v20 = 27;
          }
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v20, v21, (int8x16_t *)"Unknown forcedPseudoClass: ", 0x1Bu, (uint64_t)v18, v68);
          if (!v68[0])
            goto LABEL_115;
          *(_QWORD *)a4 = v68[0];
          *(_BYTE *)(a4 + 8) = 1;
          v68[0] = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v18, v10);
            else
              *(_DWORD *)v18 -= 2;
          }
          v17 = 0;
        }
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v17 = 0;
        *(_BYTE *)(a4 + 8) = 1;
      }
      v22 = v70;
      v70 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v10);
        else
          *(_DWORD *)v22 -= 2;
      }
      if ((v17 & 1) == 0)
        goto LABEL_102;
      ++v14;
      v13 -= 8;
    }
    while (v13);
    v11 = v67;
    if (!v71 || !*(_DWORD *)(v71 - 12))
    {
LABEL_58:
      v38 = a1 + 14;
      if (!WTF::HashMap<int,WTF::HashSet<WebCore::CSSSelectorPseudoClass,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::HashTableTraits>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::HashSet<WebCore::CSSSelectorPseudoClass,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::HashTableTraits>>,WTF::HashTableTraits>::remove(a1 + 14, a2))goto LABEL_101;
      if (!*v38 || !*(_DWORD *)(*v38 - 12))
      {
        v39 = a1[15];
        if (v39)
        {
          a1[15] = 0;
          WTF::fastFree((WTF *)(v39 - 16), v10);
        }
      }
      goto LABEL_100;
    }
    v25 = a1 + 14;
    v24 = a1[14];
    if (v24
      || (WTF::HashTable<int,WTF::KeyValuePair<int,WTF::HashSet<WebCore::CSSSelectorPseudoClass,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::HashSet<WebCore::CSSSelectorPseudoClass,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::HashTableTraits>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::HashSet<WebCore::CSSSelectorPseudoClass,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::HashTableTraits>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::HashSet<WebCore::CSSSelectorPseudoClass,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(a1 + 14, 8u), (v24 = *v25) != 0))
    {
      v26 = *(_DWORD *)(v24 - 8);
    }
    else
    {
      v26 = 0;
    }
    v27 = 9 * ((~((_DWORD)a2 << 15) + (_DWORD)a2) ^ ((~((_DWORD)a2 << 15) + (_DWORD)a2) >> 10));
    v28 = (v27 ^ (v27 >> 6)) + ~((v27 ^ (v27 >> 6)) << 11);
    v29 = v26 & (v28 ^ HIWORD(v28));
    v30 = (int *)(v24 + 16 * v29);
    v31 = *v30;
    if (*v30)
    {
      v32 = 0;
      v33 = 1;
      while (v31 != (_DWORD)a2)
      {
        if (v31 == -1)
          v32 = v30;
        v29 = (v29 + v33) & v26;
        v30 = (int *)(v24 + 16 * v29);
        v31 = *v30;
        ++v33;
        if (!*v30)
        {
          if (v32)
          {
            *v32 = 0;
            *((_QWORD *)v32 + 1) = 0;
            --*(_DWORD *)(*v25 - 16);
            v30 = v32;
          }
          goto LABEL_54;
        }
      }
      v40 = v71;
      v71 = 0;
      v41 = *((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = v40;
      if (v41)
        WTF::fastFree((WTF *)(v41 - 16), v10);
      goto LABEL_76;
    }
LABEL_54:
    *v30 = (int)a2;
    v34 = v71;
    v71 = 0;
    v35 = *((_QWORD *)v30 + 1);
    *((_QWORD *)v30 + 1) = v34;
    if (v35)
      WTF::fastFree((WTF *)(v35 - 16), v10);
    v36 = *v25;
    if (*v25)
      v37 = *(_DWORD *)(v36 - 12) + 1;
    else
      v37 = 1;
    *(_DWORD *)(v36 - 12) = v37;
    v42 = *v25;
    if (*v25)
      v43 = *(_DWORD *)(v42 - 12);
    else
      v43 = 0;
    v44 = (*(_DWORD *)(v42 - 16) + v43);
    v45 = *(unsigned int *)(v42 - 4);
    if (v45 > 0x400)
    {
      if (v45 > 2 * v44)
      {
LABEL_76:
        v49 = a1[15];
        v48 = a1 + 15;
        v47 = v49;
        v50 = *(_QWORD *)(*(_QWORD *)(v67 + 40) + 8);
        if (v49
          || (WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(v48, 8u), (v47 = *v48) != 0))
        {
          v51 = *(_DWORD *)(v47 - 8);
        }
        else
        {
          v51 = 0;
        }
        v52 = (~(v50 << 32) + v50) ^ ((unint64_t)(~(v50 << 32) + v50) >> 22);
        v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
        v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
        v55 = v51 & ((v54 >> 31) ^ v54);
        v56 = (_QWORD *)(v47 + 8 * v55);
        v57 = *v56;
        if (*v56)
        {
          v58 = 0;
          v59 = 1;
          while (v57 != v50)
          {
            if (v57 == -1)
              v58 = v56;
            v55 = (v55 + v59) & v51;
            v56 = (_QWORD *)(v47 + 8 * v55);
            v57 = *v56;
            ++v59;
            if (!*v56)
            {
              if (v58)
              {
                *v58 = 0;
                --*(_DWORD *)(*v48 - 16);
                v56 = v58;
              }
              goto LABEL_87;
            }
          }
          goto LABEL_100;
        }
LABEL_87:
        *v56 = v50;
        v60 = *v48;
        if (*v48)
          v61 = *(_DWORD *)(v60 - 12) + 1;
        else
          v61 = 1;
        *(_DWORD *)(v60 - 12) = v61;
        v62 = *v48;
        if (*v48)
          v63 = *(_DWORD *)(v62 - 12);
        else
          v63 = 0;
        v64 = (*(_DWORD *)(v62 - 16) + v63);
        v65 = *(unsigned int *)(v62 - 4);
        if (v65 <= 0x400)
        {
          if (3 * v65 > 4 * v64)
            goto LABEL_100;
          if (!(_DWORD)v65)
          {
            v66 = 8;
            goto LABEL_99;
          }
LABEL_96:
          v66 = (_DWORD)v65 << (6 * *(_DWORD *)(v62 - 12) >= (2 * v65));
LABEL_99:
          WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(v48, v66);
          goto LABEL_100;
        }
        if (v65 <= 2 * v64)
          goto LABEL_96;
LABEL_100:
        WebCore::Style::Scope::didChangeStyleSheetEnvironment(*(WebCore::Style::Scope **)(*(_QWORD *)(*(_QWORD *)(v11 + 40) + 8) + 1328), v10);
LABEL_101:
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 8) = 0;
LABEL_102:
        if (v71)
          WTF::fastFree((WTF *)(v71 - 16), v10);
        result = v72;
        goto LABEL_105;
      }
    }
    else
    {
      if (3 * v45 > 4 * v44)
        goto LABEL_76;
      if (!(_DWORD)v45)
      {
        v46 = 8;
        goto LABEL_75;
      }
    }
    v46 = (_DWORD)v45 << (6 * *(_DWORD *)(v42 - 12) >= (2 * v45));
LABEL_75:
    WTF::HashTable<int,WTF::KeyValuePair<int,WTF::HashSet<WebCore::CSSSelectorPseudoClass,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::HashSet<WebCore::CSSSelectorPseudoClass,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::HashTableTraits>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::HashSet<WebCore::CSSSelectorPseudoClass,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::HashTableTraits>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::HashSet<WebCore::CSSSelectorPseudoClass,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(a1 + 14, v46);
    goto LABEL_76;
  }
  result = v72;
  if (v72)
    *(_DWORD *)v72 += 2;
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = 1;
LABEL_105:
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::InspectorDOMAgent::assertElement(WebCore::InspectorDOMAgent *this, WTF::StringImpl **a2, void *a3)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v4 = WebCore::InspectorDOMAgent::nodeForId(this, a3);
  if (!v4)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = *a2;
    *a2 = v14;
    if (v12)
    {
      if (*(_DWORD *)v12 != 2)
      {
        v9 = 0;
        *(_DWORD *)v12 -= 2;
        return v9;
      }
      WTF::StringImpl::destroy(v12, v11);
    }
    return 0;
  }
  v6 = v4;
  v7 = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 2;
  if (!v7)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) != 0)
    {
      v7 = 2;
    }
    else
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
      v7 = *(_DWORD *)(v6 + 24);
    }
  }
  *(_DWORD *)(v6 + 24) = v7 + 2;
  v8 = *(_WORD *)(v6 + 28);
  if ((v8 & 8) != 0)
    v9 = v6;
  else
    v9 = 0;
  if ((v8 & 8) != 0)
  {
    *(_DWORD *)(v6 + 24) = v7 + 4;
    if (v7 == -2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v5);
    }
    else
    {
      *(_DWORD *)(v6 + 24) = v7 + 2;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = *a2;
    *a2 = v14;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v5);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return v9;
}

uint64_t WTF::HashMap<int,WTF::HashSet<WebCore::CSSSelectorPseudoClass,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::HashTableTraits>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::HashSet<WebCore::CSSSelectorPseudoClass,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::HashTableTraits>>,WTF::HashTableTraits>::remove(uint64_t *a1, void *a2)
{
  uint64_t v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = 9 * ((~((_DWORD)a2 << 15) + (_DWORD)a2) ^ ((~((_DWORD)a2 << 15) + (_DWORD)a2) >> 10));
  v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  v7 = v4 & (v6 ^ HIWORD(v6));
  v8 = *(_DWORD *)(v2 + 16 * v7);
  if (v8 != (_DWORD)a2)
  {
    v9 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v9) & v4;
      v8 = *(_DWORD *)(v2 + 16 * v7);
      ++v9;
      if (v8 == (_DWORD)a2)
        goto LABEL_8;
    }
    v7 = *(unsigned int *)(v2 - 4);
  }
LABEL_8:
  if (v7 == *(_DWORD *)(v2 - 4))
    return 0;
  v11 = v2 + 16 * v7;
  *(_DWORD *)v11 = -1;
  v12 = *(_QWORD *)(v11 + 8);
  if (v12)
    WTF::fastFree((WTF *)(v12 - 16), a2);
  ++*(_DWORD *)(*a1 - 16);
  v13 = *a1;
  if (*a1)
    v14 = *(_DWORD *)(v13 - 12) - 1;
  else
    v14 = -1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *a1;
  if (*a1)
  {
    v16 = 6 * *(_DWORD *)(v15 - 12);
    v17 = *(_DWORD *)(v15 - 4);
    if (v16 < v17 && v17 >= 9)
      WTF::HashTable<int,WTF::KeyValuePair<int,WTF::HashSet<WebCore::CSSSelectorPseudoClass,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::HashSet<WebCore::CSSSelectorPseudoClass,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::HashTableTraits>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::HashSet<WebCore::CSSSelectorPseudoClass,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::HashTableTraits>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::HashSet<WebCore::CSSSelectorPseudoClass,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(a1, v17 >> 1);
  }
  return 1;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorCSSAgent::forcePseudoState@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return WebCore::InspectorCSSAgent::forcePseudoState((_QWORD *)(a1 - 32), a2, a3, a4);
}

uint64_t WebCore::InspectorCSSAgent::layoutFlagsForNode(WebCore::InspectorCSSAgent *this, WebCore::Node *a2)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  int HasScrollableArea;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD **v20;
  uint64_t v21;
  _DWORD *v22;
  WTF *v23;
  WTF *v24;
  uint64_t *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  WTF::StringImpl *v32;

  v3 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (!v3)
  {
    v5 = 0;
    goto LABEL_25;
  }
  v4 = *((_WORD *)this + 14);
  if ((v4 & 0xF000) == 0x9000)
    goto LABEL_3;
  if ((v4 & 0x10) != 0 && *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 288);
        if (v10)
        {
          if (WebCore::LocalFrameView::isScrollable(v10))
            v5 = 17;
          else
            v5 = 1;
          goto LABEL_19;
        }
      }
    }
LABEL_3:
    v5 = 1;
    goto LABEL_19;
  }
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) == 0)
    goto LABEL_3;
  ++*(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
  HasScrollableArea = WebCore::RenderBox::canBeScrolledAndHasScrollableArea((WebCore::RenderBox *)v3);
  v7 = *(_DWORD *)(v3 + 16);
  if (!v7)
    goto LABEL_52;
  if (HasScrollableArea)
    v5 = 17;
  else
    v5 = 1;
  *(_DWORD *)(v3 + 16) = v7 - 1;
LABEL_19:
  if (*(char *)(v3 + 45) < 0)
  {
    if (((*(uint64_t (**)(uint64_t, WebCore::Node *))(*(_QWORD *)v3 + 1920))(v3, a2) & 1) == 0)
    {
      v11 = 2;
      goto LABEL_24;
    }
  }
  else if (*(_BYTE *)(v3 + 46) == 12)
  {
    v11 = 4;
LABEL_24:
    v5 = v11 | v5;
  }
LABEL_25:
  v12 = *((_QWORD *)this + 2);
  if ((v12 & 0x1000000000000) == 0)
    return v5;
  v13 = v12 & 0xFFFFFFFFFFFFLL;
  v14 = *(unsigned int *)((v12 & 0xFFFFFFFFFFFFLL) + 0x1C);
  if (!(_DWORD)v14)
    return v5;
  if (v14 >> 29)
  {
LABEL_52:
    __break(0xC471u);
    JUMPOUT(0x195E0AEA4);
  }
  v15 = (WTF *)WTF::fastMalloc((WTF *)(8 * v14));
  v17 = v15;
  v18 = *(unsigned int *)(v13 + 28);
  if ((_DWORD)v18)
  {
    v19 = 0;
    v20 = *(_DWORD ***)(v13 + 16);
    v21 = 8 * v18;
    do
    {
      v22 = *v20;
      if (*v20)
        *v22 += 2;
      *(_QWORD *)((char *)v15 + v19) = v22;
      v19 += 8;
      v20 += 4;
    }
    while (v21 != v19);
    v23 = (WTF *)((char *)v15 + 8 * v18);
    v24 = v15;
    while (1)
    {
      v25 = WebCore::EventTarget::eventListeners((uint64_t)this, v24);
      v27 = *((unsigned int *)v25 + 3);
      if ((_DWORD)v27)
        break;
LABEL_38:
      v24 = (WTF *)((char *)v24 + 8);
      if (v24 == v23)
      {
        v30 = 1;
        goto LABEL_41;
      }
    }
    v28 = *v25;
    v29 = 8 * v27;
    while (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v28 + 8) + 20))
    {
      v28 += 8;
      v29 -= 8;
      if (!v29)
        goto LABEL_38;
    }
    v30 = 0;
LABEL_41:
    v31 = 0;
    do
    {
      v32 = *(WTF::StringImpl **)((char *)v17 + v31);
      *(_QWORD *)((char *)v17 + v31) = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v26);
        else
          *(_DWORD *)v32 -= 2;
      }
      v31 += 8;
    }
    while (v21 != v31);
    WTF::fastFree(v17, v26);
    if (!v30)
      return v5 | 8;
  }
  else
  {
    WTF::fastFree(v15, v16);
  }
  return v5;
}

uint64_t WTF::WeakHashMap<WebCore::Node,WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>,WebCore::WeakPtrImplWithEventTargetData>::set<WebCore::Node,WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>&>(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  int i;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  uint64_t v46;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (v6 > v7)
    WTF::WeakHashMap<WebCore::Node,WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(a1, a2);
  if ((a2[2] & 0xFFFFFFFFFFFFLL) == 0)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 8) = a2;
    *(_BYTE *)(v8 + 32) = 0;
    v9 = a2[2];
    a2[2] = v9 & 0xFFFF000000000000 | v8;
    v10 = v9 & 0xFFFFFFFFFFFFLL;
    if ((v9 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v11 = __ldaxr((unsigned int *)v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, (unsigned int *)v10));
      if (!v12)
      {
        atomic_store(1u, (unsigned int *)v10);
        v43 = *(unsigned int *)(v10 + 28);
        if ((_DWORD)v43)
        {
          v46 = v10;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v43));
          v10 = v46;
        }
        v44 = *(WTF **)(v10 + 16);
        if (v44)
        {
          *(_QWORD *)(v10 + 16) = 0;
          *(_DWORD *)(v10 + 24) = 0;
          v45 = v10;
          WTF::fastFree(v44, a2);
          v10 = v45;
        }
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  v13 = a2[2];
  v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 + 1, v14));
  if (v14)
  {
    do
    {
      v17 = __ldaxr(v14);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v14));
    if (!v18)
    {
      atomic_store(1u, v14);
      v41 = *(unsigned int *)((v13 & 0xFFFFFFFFFFFFLL) + 0x1C);
      if ((_DWORD)v41)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)((v13 & 0xFFFFFFFFFFFFLL) + 0x10), (WTF::StringImpl *)(*(_QWORD *)((v13 & 0xFFFFFFFFFFFFLL) + 0x10) + 32 * v41));
      v42 = *(WTF **)((v13 & 0xFFFFFFFFFFFFLL) + 0x10);
      if (v42)
      {
        *(_QWORD *)((v13 & 0xFFFFFFFFFFFFLL) + 0x10) = 0;
        *(_DWORD *)((v13 & 0xFFFFFFFFFFFFLL) + 0x18) = 0;
        WTF::fastFree(v42, a2);
      }
      WTF::fastFree((WTF *)(v13 & 0xFFFFFFFFFFFFLL), a2);
    }
  }
  v19 = *(_QWORD *)a1;
  if (*(_QWORD *)a1
    || (WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)a1, 8u), (v19 = *(_QWORD *)a1) != 0))
  {
    v20 = *(_DWORD *)(v19 - 8);
  }
  else
  {
    v20 = 0;
  }
  v21 = 0;
  v22 = ((unint64_t)v14 + ~(v13 << 32)) ^ (((unint64_t)v14 + ~(v13 << 32)) >> 22);
  v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
  v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
  v25 = (v24 >> 31) ^ v24;
  for (i = 1; ; ++i)
  {
    v27 = v25 & v20;
    v28 = v19 + 16 * v27;
    result = *(_QWORD *)v28;
    if (*(_QWORD *)v28 != -1)
      break;
    v21 = v19 + 16 * v27;
LABEL_22:
    v25 = i + v27;
  }
  if (!result)
  {
    if (v21)
    {
      *(_QWORD *)v21 = 0;
      *(_BYTE *)(v21 + 8) = 0;
      --*(_DWORD *)(*(_QWORD *)a1 - 16);
      *(_QWORD *)v21 = v14;
      v28 = v21;
    }
    else
    {
      *(_QWORD *)v28 = v14;
    }
    *(_BYTE *)(v28 + 8) = *a3;
    v34 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v35 = *(_DWORD *)(v34 - 12) + 1;
    else
      v35 = 1;
    *(_DWORD *)(v34 - 12) = v35;
    v36 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v37 = *(_DWORD *)(v36 - 12);
    else
      v37 = 0;
    v38 = (*(_DWORD *)(v36 - 16) + v37);
    v39 = *(unsigned int *)(v36 - 4);
    if (v39 > 0x400)
    {
      if (v39 > 2 * v38)
        return result;
    }
    else
    {
      if (3 * v39 > 4 * v38)
        return result;
      if (!(_DWORD)v39)
      {
        v40 = 8;
        return WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)a1, v40);
      }
    }
    v40 = (_DWORD)v39 << (6 * *(_DWORD *)(v36 - 12) >= (2 * v39));
    return WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)a1, v40);
  }
  if ((unsigned int *)result != v14)
    goto LABEL_22;
  *(_BYTE *)(v19 + 16 * v27 + 8) = *a3;
  if (v14)
  {
    do
    {
      v30 = __ldaxr(v14);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v14));
    if (!v31)
    {
      atomic_store(1u, v14);
      v32 = *(unsigned int *)((v13 & 0xFFFFFFFFFFFFLL) + 0x1C);
      if ((_DWORD)v32)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)((v13 & 0xFFFFFFFFFFFFLL) + 0x10), (WTF::StringImpl *)(*(_QWORD *)((v13 & 0xFFFFFFFFFFFFLL) + 0x10) + 32 * v32));
      v33 = *(WTF **)((v13 & 0xFFFFFFFFFFFFLL) + 0x10);
      if (v33)
      {
        *(_QWORD *)((v13 & 0xFFFFFFFFFFFFLL) + 0x10) = 0;
        *(_DWORD *)((v13 & 0xFFFFFFFFFFFFLL) + 0x18) = 0;
        WTF::fastFree(v33, a2);
      }
      return WTF::fastFree((WTF *)(v13 & 0xFFFFFFFFFFFFLL), a2);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::toProtocol(WTF::StringImpl *result, char a2)
{
  _QWORD *v2;
  uint64_t v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  const WTF::String *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  const WTF::String *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  const WTF::String *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  const WTF::String *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  WTF::StringImpl *v40;
  _DWORD *v41;

  v2 = result;
  if (!a2)
  {
    v4 = 0;
    goto LABEL_53;
  }
  v4 = WTF::fastMalloc((WTF *)0x20);
  result = (WTF::StringImpl *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v4);
  if ((a2 & 1) == 0)
    goto LABEL_13;
  Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)0x3C);
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v40, v5);
  v7 = *(unsigned int *)(v4 + 28);
  if ((_DWORD)v7 == *(_DWORD *)(v4 + 24))
  {
    v8 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v4 + 16), v7 + 1, (unint64_t)&v41);
    v7 = *(unsigned int *)(v4 + 28);
    v9 = *(_QWORD *)(v4 + 16);
    v10 = *(_DWORD **)v8;
    *(_QWORD *)v8 = 0;
  }
  else
  {
    v9 = *(_QWORD *)(v4 + 16);
    v10 = v41;
    v41 = 0;
  }
  *(_QWORD *)(v9 + 8 * v7) = v10;
  *(_DWORD *)(v4 + 28) = v7 + 1;
  v11 = v41;
  v41 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  result = v40;
  v40 = 0;
  if (!result)
  {
LABEL_13:
    if ((a2 & 0x10) == 0)
      goto LABEL_23;
    goto LABEL_14;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_13;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
  if ((a2 & 0x10) == 0)
    goto LABEL_23;
LABEL_14:
  Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)0x3D);
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v40, v12);
  v14 = *(unsigned int *)(v4 + 28);
  if ((_DWORD)v14 == *(_DWORD *)(v4 + 24))
  {
    v15 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v4 + 16), v14 + 1, (unint64_t)&v41);
    v14 = *(unsigned int *)(v4 + 28);
    v16 = *(_QWORD *)(v4 + 16);
    v17 = *(_DWORD **)v15;
    *(_QWORD *)v15 = 0;
  }
  else
  {
    v16 = *(_QWORD *)(v4 + 16);
    v17 = v41;
    v41 = 0;
  }
  *(_QWORD *)(v16 + 8 * v14) = v17;
  *(_DWORD *)(v4 + 28) = v14 + 1;
  v18 = v41;
  v41 = 0;
  if (v18)
  {
    if (*v18 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v18;
  }
  result = v40;
  v40 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_23:
  if ((a2 & 2) != 0)
  {
    Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)0x3E);
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v40, v19);
    v21 = *(unsigned int *)(v4 + 28);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 24))
    {
      v22 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v4 + 16), v21 + 1, (unint64_t)&v41);
      v21 = *(unsigned int *)(v4 + 28);
      v23 = *(_QWORD *)(v4 + 16);
      v24 = *(_DWORD **)v22;
      *(_QWORD *)v22 = 0;
    }
    else
    {
      v23 = *(_QWORD *)(v4 + 16);
      v24 = v41;
      v41 = 0;
    }
    *(_QWORD *)(v23 + 8 * v21) = v24;
    *(_DWORD *)(v4 + 28) = v21 + 1;
    v25 = v41;
    v41 = 0;
    if (v25)
    {
      if (*v25 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v25;
    }
    result = v40;
    v40 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
        if ((a2 & 4) != 0)
          goto LABEL_34;
        goto LABEL_43;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if ((a2 & 4) != 0)
  {
LABEL_34:
    Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)0x3F);
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v40, v26);
    v28 = *(unsigned int *)(v4 + 28);
    if ((_DWORD)v28 == *(_DWORD *)(v4 + 24))
    {
      v29 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v4 + 16), v28 + 1, (unint64_t)&v41);
      v28 = *(unsigned int *)(v4 + 28);
      v30 = *(_QWORD *)(v4 + 16);
      v31 = *(_DWORD **)v29;
      *(_QWORD *)v29 = 0;
    }
    else
    {
      v30 = *(_QWORD *)(v4 + 16);
      v31 = v41;
      v41 = 0;
    }
    *(_QWORD *)(v30 + 8 * v28) = v31;
    *(_DWORD *)(v4 + 28) = v28 + 1;
    v32 = v41;
    v41 = 0;
    if (v32)
    {
      if (*v32 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v32;
    }
    result = v40;
    v40 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_43:
  if ((a2 & 8) != 0)
  {
    Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)0x40);
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v40, v33);
    v35 = *(unsigned int *)(v4 + 28);
    if ((_DWORD)v35 == *(_DWORD *)(v4 + 24))
    {
      v36 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v4 + 16), v35 + 1, (unint64_t)&v41);
      v35 = *(unsigned int *)(v4 + 28);
      v37 = *(_QWORD *)(v4 + 16);
      v38 = *(_DWORD **)v36;
      *(_QWORD *)v36 = 0;
    }
    else
    {
      v37 = *(_QWORD *)(v4 + 16);
      v38 = v41;
      v41 = 0;
    }
    *(_QWORD *)(v37 + 8 * v35) = v38;
    *(_DWORD *)(v4 + 28) = v35 + 1;
    v39 = v41;
    v41 = 0;
    if (v39)
    {
      if (*v39 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v39;
    }
    result = v40;
    v40 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v34);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_53:
  *v2 = v4;
  return result;
}

uint64_t WebCore::InspectorCSSAgent::setLayoutContextTypeChangedMode@<X0>(uint64_t result@<X0>, void *a2@<X1>, WebCore::ContainerNode *a3@<X2>, _BYTE *a4@<X8>)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  WebCore::InspectorDOMAgent *v17;
  char v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;

  if (*(_DWORD *)(result + 224) != (_DWORD)a2)
  {
    *(_DWORD *)(result + 224) = (_DWORD)a2;
    if ((_DWORD)a2 == 66)
    {
      v5 = *(WebCore **)(*(_QWORD *)(result + 16) + 40);
      if (!v5)
      {
        result = WTF::StringImpl::createWithoutCopyingNonEmpty();
        v18 = 1;
        goto LABEL_26;
      }
      v19 = 0;
      v20 = 0;
      v6 = *(_QWORD *)(*((_QWORD *)v5 + 15) + 528);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          v8 = 0;
          v9 = 0;
          while (1)
          {
            do
            {
LABEL_7:
              v10 = (_QWORD *)v7;
              if (!*(_BYTE *)(v7 + 144))
              {
                v11 = *(_QWORD *)(v7 + 296);
                v21 = v11;
                if (v11)
                {
                  if (v9 == (_DWORD)v20)
                  {
                    result = (uint64_t)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v19, v9 + 1, (unint64_t)&v21);
                    v9 = HIDWORD(v20);
                    v8 = v19;
                    *((_QWORD *)v19 + HIDWORD(v20)) = *(_QWORD *)result;
                  }
                  else
                  {
                    *((_QWORD *)v8 + v9) = v11;
                  }
                  HIDWORD(v20) = ++v9;
                }
              }
              v7 = v10[11];
            }
            while (v7);
            v12 = *(_QWORD *)(v10[6] + 8);
            if (!v12)
              break;
            v7 = v10[9];
            if (!v7)
            {
              while (1)
              {
                v13 = *(_QWORD *)(v12 + 56);
                if (!v13)
                  goto LABEL_20;
                v12 = *(_QWORD *)(v13 + 8);
                if (!v12)
                  goto LABEL_20;
                v7 = *(_QWORD *)(v12 + 72);
                if (v7)
                  goto LABEL_7;
              }
            }
          }
LABEL_20:
          v14 = v19;
          if (v9)
          {
            v15 = 8 * v9;
            v16 = v19;
            do
            {
              v17 = *(WebCore::InspectorDOMAgent **)v16;
              v16 = (WTF *)((char *)v16 + 8);
              result = WebCore::pushChildrenNodesToFrontendIfLayoutFlagIsRelevant(v5, v17, a3);
              v15 -= 8;
            }
            while (v15);
          }
          if (v14)
            result = WTF::fastFree(v14, a2);
        }
      }
    }
  }
  v18 = 0;
  *a4 = 0;
LABEL_26:
  a4[8] = v18;
  return result;
}

uint64_t WebCore::pushChildrenNodesToFrontendIfLayoutFlagIsRelevant(WebCore *this, WebCore::InspectorDOMAgent *a2, WebCore::ContainerNode *a3)
{
  uint64_t v5;
  uint64_t result;

  v5 = *((_QWORD *)a2 + 10);
  if (v5)
  {
    while ((*(_WORD *)(v5 + 28) & 8) == 0)
    {
      v5 = *(_QWORD *)(v5 + 56);
      if (!v5)
        goto LABEL_4;
    }
LABEL_11:
    WebCore::pushChildrenNodesToFrontendIfLayoutFlagIsRelevant(this, (WebCore::InspectorDOMAgent *)v5, a3);
    while (1)
    {
      v5 = *(_QWORD *)(v5 + 56);
      if (!v5)
        break;
      if ((*(_WORD *)(v5 + 28) & 8) != 0)
        goto LABEL_11;
    }
  }
LABEL_4:
  result = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL;
  if (result)
  {
    if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      result = 105;
      __break(0xC471u);
    }
    else if (*(char *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) < 0)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 1920))(result);
      if ((result & 1) == 0)
        return WebCore::InspectorDOMAgent::pushNodeToFrontend(this, a2);
    }
    else if (*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 12)
    {
      return WebCore::InspectorDOMAgent::pushNodeToFrontend(this, a2);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorCSSAgent::setLayoutContextTypeChangedMode@<X0>(uint64_t a1@<X0>, void *a2@<X1>, WebCore::ContainerNode *a3@<X2>, _BYTE *a4@<X8>)
{
  return WebCore::InspectorCSSAgent::setLayoutContextTypeChangedMode(a1 - 32, a2, a3, a4);
}

uint64_t WebCore::InspectorCSSAgent::didRemoveDOMNode(WebCore::InspectorCSSAgent *this, WebCore::Node *a2, void *a3)
{
  WTF::StringImpl **v5;
  const WTF::StringImpl *v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  WebCore::Node *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int i;
  uint64_t v33;
  WTF::StringImpl **v34;
  uint64_t v35;

  WTF::HashMap<int,WTF::HashSet<WebCore::CSSSelectorPseudoClass,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::HashTableTraits>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::HashSet<WebCore::CSSSelectorPseudoClass,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::HashTableTraits>>,WTF::HashTableTraits>::remove((uint64_t *)this + 14, a3);
  result = (uint64_t)this + 88;
  v8 = *((_QWORD *)this + 11);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(WebCore::Node **)(v8 + 16 * v13);
    if (v14 != a2)
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(WebCore::Node **)(v8 + 16 * v13);
        ++v15;
        if (v14 == a2)
          goto LABEL_8;
      }
      v13 = *(unsigned int *)(v8 - 4);
    }
LABEL_8:
    v16 = *(unsigned int *)(v8 - 4);
    if (v13 != v16)
    {
      v17 = (_QWORD *)(v8 + 16 * v13);
      v18 = v17 + 1;
      v19 = v17[1];
      if (v19)
      {
        *v18 = 0;
        v8 = *(_QWORD *)result;
        if (!*(_QWORD *)result)
        {
LABEL_13:
          if ((_QWORD *)v8 != v17)
          {
            *v17 = -1;
            *v18 = 0;
            ++*(_DWORD *)(*(_QWORD *)result - 16);
            v20 = *(_QWORD *)result;
            v21 = *(_QWORD *)result ? *(_DWORD *)(v20 - 12) - 1 : -1;
            *(_DWORD *)(v20 - 12) = v21;
            v22 = *(_QWORD *)result;
            if (*(_QWORD *)result)
            {
              v23 = 6 * *(_DWORD *)(v22 - 12);
              v24 = *(_DWORD *)(v22 - 4);
              if (v23 < v24 && v24 >= 9)
                result = (uint64_t)WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,WTF::Ref<WebCore::InspectorStyleSheetForInlineStyle,WTF::RawPtrTraits<WebCore::InspectorStyleSheetForInlineStyle>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheetForInlineStyle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,WTF::Ref<WebCore::InspectorStyleSheetForInlineStyle,WTF::RawPtrTraits<WebCore::InspectorStyleSheetForInlineStyle>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheetForInlineStyle>>>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,WTF::Ref<WebCore::InspectorStyleSheetForInlineStyle,WTF::RawPtrTraits<WebCore::InspectorStyleSheetForInlineStyle>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheetForInlineStyle>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<WebCore::InspectorStyleSheetForInlineStyle,WTF::RawPtrTraits<WebCore::InspectorStyleSheetForInlineStyle>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheetForInlineStyle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::rehash((uint64_t *)result, v24 >> 1, 0);
            }
          }
LABEL_24:
          if (v19)
          {
            v26 = (uint64_t *)((char *)this + 72);
            v27 = *(WTF::StringImpl **)(v19 + 24);
            if (v27)
              *(_DWORD *)v27 += 2;
            v28 = *v26;
            if (*v26)
            {
              v29 = *(_DWORD *)(v28 - 8);
              v30 = *((_DWORD *)v27 + 4);
              if (v30 < 0x100)
                v31 = WTF::StringImpl::hashSlowCase(v27);
              else
                v31 = v30 >> 8;
              for (i = 0; ; v31 = i + v33)
              {
                v33 = v31 & v29;
                result = *(_QWORD *)(v28 + 16 * v33);
                if (result != -1)
                {
                  if (!result)
                  {
                    v34 = (WTF::StringImpl **)*v26;
                    if (!*v26)
                      goto LABEL_43;
                    v35 = *((unsigned int *)v34 - 1);
                    v5 = &v34[2 * v35];
                    goto LABEL_40;
                  }
                  result = WTF::equal((WTF *)result, v27, v6);
                  if ((result & 1) != 0)
                    break;
                }
                ++i;
              }
              v5 = (WTF::StringImpl **)(v28 + 16 * v33);
              v34 = (WTF::StringImpl **)*v26;
              if (!*v26)
                goto LABEL_41;
              v35 = *((unsigned int *)v34 - 1);
LABEL_40:
              v34 += 2 * v35;
              if (v34 == v5)
                goto LABEL_43;
LABEL_41:
              if (v34 != v5)
                result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v26, v5);
            }
LABEL_43:
            if (v27)
            {
              if (*(_DWORD *)v27 == 2)
                result = WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v5);
              else
                *(_DWORD *)v27 -= 2;
            }
            if (*(_DWORD *)(v19 + 8) == 1)
              return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
            else
              --*(_DWORD *)(v19 + 8);
          }
          return result;
        }
        v16 = *(unsigned int *)(v8 - 4);
      }
      v8 += 16 * v16;
      if ((_QWORD *)v8 == v17)
        goto LABEL_24;
      goto LABEL_13;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorCSSAgent::styleSheetChanged(WebCore::InspectorCSSAgent *this, WebCore::InspectorStyleSheet *a2)
{
  Inspector::CSSFrontendDispatcher *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  v2 = (Inspector::CSSFrontendDispatcher *)*((_QWORD *)this + 6);
  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  if (v3)
    *(_DWORD *)v3 += 2;
  v6 = v3;
  Inspector::CSSFrontendDispatcher::styleSheetChanged(v2, (const WTF::String *)&v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorCSSAgent::styleSheetChanged(WebCore::InspectorCSSAgent *this, WebCore::InspectorStyleSheet *a2)
{
  Inspector::CSSFrontendDispatcher *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  v2 = (Inspector::CSSFrontendDispatcher *)*((_QWORD *)this + 1);
  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  if (v3)
    *(_DWORD *)v3 += 2;
  v6 = v3;
  Inspector::CSSFrontendDispatcher::styleSheetChanged(v2, (const WTF::String *)&v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::InspectorCanvasAgent::InspectorCanvasAgent(uint64_t a1, _QWORD *a2)
{
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t StatusReg;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  unsigned int *v12;
  unsigned int v13;
  _QWORD *v14;
  WTF::StringImpl *v16;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (v16)
  {
    v5 = *(_DWORD *)v16;
    *(_DWORD *)v16 += 2;
    *(_QWORD *)a1 = off_1E33EFBF8;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = a2[4];
    *(_QWORD *)(a1 + 24) = *a2;
    if (v5)
      *(_DWORD *)v16 = v5;
    else
      WTF::StringImpl::destroy(v16, v4);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = a2[4];
    *(_QWORD *)(a1 + 24) = *a2;
  }
  *(_QWORD *)a1 = off_1E33EF130;
  *(_QWORD *)(a1 + 32) = &unk_1E33EF200;
  *(_QWORD *)(a1 + 40) = &unk_1E33EF288;
  *(_QWORD *)(a1 + 48) = 0;
  v6 = a2[2];
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v7 = v6;
  *(_QWORD *)(a1 + 77) = 0;
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  Inspector::CanvasBackendDispatcher::create();
  *(_QWORD *)(a1 + 88) = v16;
  *(_QWORD *)(a1 + 96) = a2[1];
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  v9 = *(unsigned int **)(StatusReg + 736);
  if (!v9)
    v9 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 160) = v9;
  *(_QWORD *)(a1 + 120) = off_1E31F7378;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v11 = off_1E33EFAF0;
  v11[1] = WebCore::InspectorCanvasAgent::canvasDestroyedTimerFired;
  v11[2] = 0;
  v11[3] = a1;
  *(_QWORD *)(a1 + 189) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = v11;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = off_1E3407128;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  v12 = *(unsigned int **)(StatusReg + 736);
  if (!v12)
    v12 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  *(_QWORD *)(a1 + 256) = v12;
  *(_QWORD *)(a1 + 216) = off_1E31F7378;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v14 = off_1E33EFAF0;
  v14[1] = WebCore::InspectorCanvasAgent::programDestroyedTimerFired;
  v14[2] = 0;
  v14[3] = a1;
  *(_QWORD *)(a1 + 285) = 0;
  *(_QWORD *)(a1 + 264) = v14;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  return a1;
}

uint64_t WebCore::InspectorCanvasAgent::canvasDestroyedTimerFired(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  const WTF::String *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;

  v1 = *(unsigned int *)(this + 116);
  if ((_DWORD)v1)
  {
    v2 = this;
    v3 = *(const WTF::String **)(this + 104);
    v4 = 8 * v1;
    do
    {
      this = Inspector::CanvasFrontendDispatcher::canvasRemoved(*(Inspector::CanvasFrontendDispatcher **)(v2 + 56), v3);
      v3 = (const WTF::String *)((char *)v3 + 8);
      v4 -= 8;
    }
    while (v4);
    if (*(_DWORD *)(v2 + 112))
    {
      v6 = *(unsigned int *)(v2 + 116);
      this = *(_QWORD *)(v2 + 104);
      if ((_DWORD)v6)
      {
        v7 = 8 * v6;
        v8 = *(WTF::StringImpl ***)(v2 + 104);
        do
        {
          v9 = *v8;
          *v8 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
            {
              v10 = v8;
              WTF::StringImpl::destroy(v9, v5);
              v8 = v10;
            }
            else
            {
              *(_DWORD *)v9 -= 2;
            }
          }
          ++v8;
          v7 -= 8;
        }
        while (v7);
        *(_DWORD *)(v2 + 116) = 0;
        this = *(_QWORD *)(v2 + 104);
      }
      if (this)
      {
        *(_QWORD *)(v2 + 104) = 0;
        *(_DWORD *)(v2 + 112) = 0;
        return WTF::fastFree((WTF *)this, v5);
      }
    }
  }
  return this;
}

uint64_t WebCore::InspectorCanvasAgent::programDestroyedTimerFired(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  const WTF::String *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;

  v1 = *(unsigned int *)(this + 212);
  if ((_DWORD)v1)
  {
    v2 = this;
    v3 = *(const WTF::String **)(this + 200);
    v4 = 8 * v1;
    do
    {
      this = Inspector::CanvasFrontendDispatcher::programDeleted(*(Inspector::CanvasFrontendDispatcher **)(v2 + 56), v3);
      v3 = (const WTF::String *)((char *)v3 + 8);
      v4 -= 8;
    }
    while (v4);
    if (*(_DWORD *)(v2 + 208))
    {
      v6 = *(unsigned int *)(v2 + 212);
      this = *(_QWORD *)(v2 + 200);
      if ((_DWORD)v6)
      {
        v7 = 8 * v6;
        v8 = *(WTF::StringImpl ***)(v2 + 200);
        do
        {
          v9 = *v8;
          *v8 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
            {
              v10 = v8;
              WTF::StringImpl::destroy(v9, v5);
              v8 = v10;
            }
            else
            {
              *(_DWORD *)v9 -= 2;
            }
          }
          ++v8;
          v7 -= 8;
        }
        while (v7);
        *(_DWORD *)(v2 + 212) = 0;
        this = *(_QWORD *)(v2 + 200);
      }
      if (this)
      {
        *(_QWORD *)(v2 + 200) = 0;
        *(_DWORD *)(v2 + 208) = 0;
        return WTF::fastFree((WTF *)this, v5);
      }
    }
  }
  return this;
}

void WebCore::InspectorCanvasAgent::~InspectorCanvasAgent(WebCore::InspectorCanvasAgent *this, WTF::StringImpl *a2)
{
  Inspector::CanvasBackendDispatcherHandler *v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF *v16;
  _DWORD *v17;
  WTF *v18;
  uint64_t v19;
  WebCore::InspectorCanvas **v20;
  WebCore::InspectorCanvas *v21;
  WTF::StringImpl *v22;
  WTF *v23;
  void *v24;
  WTF *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl **v35;
  uint64_t v36;
  WTF::StringImpl *v37;

  *(_QWORD *)this = off_1E33EF130;
  *((_QWORD *)this + 4) = &unk_1E33EF200;
  v3 = (WebCore::InspectorCanvasAgent *)((char *)this + 32);
  *((_QWORD *)this + 5) = &unk_1E33EF288;
  v4 = (WTF *)*((_QWORD *)this + 34);
  if (v4)
  {
    v5 = *((unsigned int *)this + 70);
    if ((_DWORD)v5)
    {
      v6 = (WTF::StringImpl **)*((_QWORD *)this + 34);
      do
      {
        v7 = *v6;
        *v6 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, a2);
          else
            *(_DWORD *)v7 -= 2;
        }
        ++v6;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree(v4, a2);
  }
  *((_QWORD *)this + 27) = off_1E31F7378;
  v8 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  WebCore::TimerBase::~TimerBase((WebCore::InspectorCanvasAgent *)((char *)this + 216));
  v10 = *((unsigned int *)this + 53);
  if ((_DWORD)v10)
  {
    v32 = (WTF::StringImpl **)*((_QWORD *)this + 25);
    v33 = 8 * v10;
    do
    {
      v34 = *v32;
      *v32 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v9);
        else
          *(_DWORD *)v34 -= 2;
      }
      ++v32;
      v33 -= 8;
    }
    while (v33);
  }
  v11 = (WTF *)*((_QWORD *)this + 25);
  if (v11)
  {
    *((_QWORD *)this + 25) = 0;
    *((_DWORD *)this + 52) = 0;
    WTF::fastFree(v11, v9);
  }
  v12 = (WTF *)*((_QWORD *)this + 22);
  if (v12)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorShaderProgram,WTF::RawPtrTraits<WebCore::InspectorShaderProgram>,WTF::DefaultRefDerefTraits<WebCore::InspectorShaderProgram>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorShaderProgram,WTF::RawPtrTraits<WebCore::InspectorShaderProgram>,WTF::DefaultRefDerefTraits<WebCore::InspectorShaderProgram>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::InspectorShaderProgram,WTF::RawPtrTraits<WebCore::InspectorShaderProgram>,WTF::DefaultRefDerefTraits<WebCore::InspectorShaderProgram>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::InspectorShaderProgram,WTF::RawPtrTraits<WebCore::InspectorShaderProgram>,WTF::DefaultRefDerefTraits<WebCore::InspectorShaderProgram>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v12, (WTF::StringImpl *)*((unsigned int *)this + 46));
  *((_QWORD *)this + 15) = off_1E31F7378;
  v13 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  WebCore::TimerBase::~TimerBase((WebCore::InspectorCanvasAgent *)((char *)this + 120));
  v15 = *((unsigned int *)this + 29);
  if ((_DWORD)v15)
  {
    v35 = (WTF::StringImpl **)*((_QWORD *)this + 13);
    v36 = 8 * v15;
    do
    {
      v37 = *v35;
      *v35 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v14);
        else
          *(_DWORD *)v37 -= 2;
      }
      ++v35;
      v36 -= 8;
    }
    while (v36);
  }
  v16 = (WTF *)*((_QWORD *)this + 13);
  if (v16)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v16, v14);
  }
  v17 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
  v18 = (WTF *)*((_QWORD *)this + 8);
  if (v18)
  {
    v19 = *((unsigned int *)this + 18);
    if ((_DWORD)v19)
    {
      v20 = (WebCore::InspectorCanvas **)((char *)v18 + 8);
      do
      {
        v21 = *v20;
        *v20 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 1)
          {
            WebCore::InspectorCanvas::~InspectorCanvas(v21, v14);
            WTF::fastFree(v23, v24);
          }
          else
          {
            --*(_DWORD *)v21;
          }
        }
        v22 = *(v20 - 1);
        *(v20 - 1) = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v14);
          else
            *(_DWORD *)v22 -= 2;
        }
        v20 += 2;
        --v19;
      }
      while (v19);
    }
    WTF::fastFree(v18, v14);
  }
  v25 = (WTF *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v25)
    WTF::fastFree(v25, v14);
  v26 = *((_QWORD *)this + 6);
  if (v26)
  {
    *(_QWORD *)(v26 + 8) = 0;
    v27 = (unsigned int *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v27)
    {
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        atomic_store(1u, v27);
        WTF::fastFree((WTF *)v27, v14);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 6) = 0;
  }
  Inspector::CanvasBackendDispatcherHandler::~CanvasBackendDispatcherHandler(v3);
  v31 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EFC38;
  *((_QWORD *)this + 1) = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v30);
    else
      *(_DWORD *)v31 -= 2;
  }
}

WTF::StringImpl *WebCore::InspectorCanvasAgent::willDestroyFrontendAndBackend(uint64_t a1)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  char v4;

  result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)a1 + 64))(&v3);
  if (v4)
  {
    result = v3;
    v3 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF *WebCore::InspectorCanvasAgent::reset(WebCore::InspectorCanvasAgent *this, WebCore::ScriptExecutionContext *a2)
{
  WTF *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  WebCore::CanvasBase *v10;
  WebCore::InspectorInstrumentation *v12;
  uint64_t v13;
  WebCore::PageCanvasAgent *v14;
  uint64_t v15;
  WebCore::InspectorCanvas **v16;
  WebCore::InspectorCanvas *v17;
  WTF::StringImpl *v18;
  WTF *v19;
  void *v20;
  WTF *result;
  WTF::StringImpl *v22;
  WTF *v23;
  _QWORD *v24;
  uint64_t v25;
  WTF::StringImpl **v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF *v36;

  v4 = (char *)this + 64;
  v3 = (WTF *)*((_QWORD *)this + 8);
  if (*((_DWORD *)this + 19))
  {
    v5 = *((unsigned int *)this + 18);
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      v7 = (_QWORD *)*((_QWORD *)this + 8);
      while (!*v7)
      {
        v7 += 2;
        v6 -= 16;
        if (!v6)
          goto LABEL_20;
      }
    }
    else
    {
      v7 = (_QWORD *)*((_QWORD *)this + 8);
    }
    v8 = (_QWORD *)((char *)v3 + 16 * v5);
    if (v7 != v8)
    {
      v9 = (char *)this + 40;
LABEL_10:
      v10 = *(WebCore::CanvasBase **)(*(_QWORD *)(*(_QWORD *)(v7[1] + 16) + 8) + 32);
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)v10 + 80, (_QWORD *)this + 5);
      if ((*(unsigned int (**)(char *))(*(_QWORD *)v9 + 16))((char *)this + 40))
      {
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v12 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(WebCore::CanvasBase *))(*(_QWORD *)v10 + 144))(v10);
          if (v12)
          {
            v13 = WebCore::InspectorInstrumentation::instrumentingAgents(v12, a2);
            if (v13)
            {
              v14 = *(WebCore::PageCanvasAgent **)(v13 + 104);
              if (v14)
                WebCore::PageCanvasAgent::didChangeCSSCanvasClientNodes(v14, v10);
            }
          }
        }
      }
      while (1)
      {
        v7 += 2;
        if (v7 == v8)
          break;
        if (*v7)
        {
          if (v7 != v8)
            goto LABEL_10;
          break;
        }
      }
    }
LABEL_20:
    v3 = *(WTF **)v4;
  }
  if (v3)
  {
    v15 = *((unsigned int *)this + 18);
    *(_QWORD *)v4 = 0;
    *((_QWORD *)v4 + 1) = 0;
    *(_QWORD *)(v4 + 13) = 0;
    if ((_DWORD)v15)
    {
      v16 = (WebCore::InspectorCanvas **)((char *)v3 + 8);
      do
      {
        v17 = *v16;
        *v16 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 1)
          {
            WebCore::InspectorCanvas::~InspectorCanvas(v17, a2);
            WTF::fastFree(v19, v20);
          }
          else
          {
            --*(_DWORD *)v17;
          }
        }
        v18 = *(v16 - 1);
        *(v16 - 1) = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, a2);
          else
            *(_DWORD *)v18 -= 2;
        }
        v16 += 2;
        --v15;
      }
      while (v15);
    }
    WTF::fastFree(v3, a2);
  }
  if (*((_DWORD *)this + 28))
  {
    v28 = *((unsigned int *)this + 29);
    if ((_DWORD)v28)
    {
      v29 = (WTF::StringImpl **)*((_QWORD *)this + 13);
      v30 = 8 * v28;
      do
      {
        v31 = *v29;
        *v29 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, a2);
          else
            *(_DWORD *)v31 -= 2;
        }
        ++v29;
        v30 -= 8;
      }
      while (v30);
      *((_DWORD *)this + 29) = 0;
    }
    v36 = (WTF *)*((_QWORD *)this + 13);
    if (v36)
    {
      *((_QWORD *)this + 13) = 0;
      *((_DWORD *)this + 28) = 0;
      WTF::fastFree(v36, a2);
    }
  }
  if ((*((_QWORD *)this + 19) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 19) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    WebCore::TimerBase::stopSlowCase((WebCore::InspectorCanvasAgent *)((char *)this + 120));
  }
  result = (WTF *)*((_QWORD *)this + 22);
  if (result)
  {
    v22 = (WTF::StringImpl *)*((unsigned int *)this + 46);
    *((_QWORD *)this + 22) = 0;
    *((_QWORD *)this + 23) = 0;
    *(_QWORD *)((char *)this + 189) = 0;
    result = (WTF *)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorShaderProgram,WTF::RawPtrTraits<WebCore::InspectorShaderProgram>,WTF::DefaultRefDerefTraits<WebCore::InspectorShaderProgram>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorShaderProgram,WTF::RawPtrTraits<WebCore::InspectorShaderProgram>,WTF::DefaultRefDerefTraits<WebCore::InspectorShaderProgram>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::InspectorShaderProgram,WTF::RawPtrTraits<WebCore::InspectorShaderProgram>,WTF::DefaultRefDerefTraits<WebCore::InspectorShaderProgram>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::InspectorShaderProgram,WTF::RawPtrTraits<WebCore::InspectorShaderProgram>,WTF::DefaultRefDerefTraits<WebCore::InspectorShaderProgram>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(result, v22);
  }
  if (*((_DWORD *)this + 52))
  {
    v32 = *((unsigned int *)this + 53);
    if ((_DWORD)v32)
    {
      v33 = (WTF::StringImpl **)*((_QWORD *)this + 25);
      v34 = 8 * v32;
      do
      {
        v35 = *v33;
        *v33 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, a2);
          else
            *(_DWORD *)v35 -= 2;
        }
        ++v33;
        v34 -= 8;
      }
      while (v34);
      *((_DWORD *)this + 53) = 0;
    }
    result = (WTF *)*((_QWORD *)this + 25);
    if (result)
    {
      *((_QWORD *)this + 25) = 0;
      *((_DWORD *)this + 52) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
    }
  }
  if ((*((_QWORD *)this + 31) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 31) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    result = (WTF *)WebCore::TimerBase::stopSlowCase((WebCore::InspectorCanvasAgent *)((char *)this + 216));
  }
  v23 = (WTF *)*((_QWORD *)this + 34);
  if (v23)
  {
    v24 = (_QWORD *)((char *)this + 272);
    v25 = *((unsigned int *)this + 70);
    *v24 = 0;
    v24[1] = 0;
    *(_QWORD *)((char *)v24 + 13) = 0;
    if ((_DWORD)v25)
    {
      v26 = (WTF::StringImpl **)v23;
      do
      {
        v27 = *v26;
        *v26 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, a2);
          else
            *(_DWORD *)v27 -= 2;
        }
        ++v26;
        --v25;
      }
      while (v25);
    }
    return (WTF *)WTF::fastFree(v23, a2);
  }
  return result;
}

uint64_t WebCore::InspectorCanvasAgent::enable@<X0>(WebCore::InspectorCanvasAgent *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v5;

  if ((*(unsigned int (**)(WebCore::InspectorCanvasAgent *))(*(_QWORD *)this + 48))(this))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = 1;
  }
  else
  {
    result = (*(uint64_t (**)(WebCore::InspectorCanvasAgent *))(*(_QWORD *)this + 168))(this);
    v5 = 0;
    *a2 = 0;
  }
  a2[8] = v5;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorCanvasAgent::enable@<X0>(WebCore::InspectorCanvasAgent *this@<X0>, _BYTE *a2@<X8>)
{
  char *v3;
  uint64_t result;
  char v5;

  v3 = (char *)this - 32;
  if ((*(unsigned int (**)(char *))(*((_QWORD *)this - 4) + 48))((char *)this - 32))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = 1;
  }
  else
  {
    result = (*(uint64_t (**)(char *))(*(_QWORD *)v3 + 168))(v3);
    v5 = 0;
    *a2 = 0;
  }
  a2[8] = v5;
  return result;
}

uint64_t WebCore::InspectorCanvasAgent::disable@<X0>(WebCore::InspectorCanvasAgent *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::InspectorCanvasAgent *))(*(_QWORD *)this + 176))(this);
  *a2 = 0;
  a2[8] = 0;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorCanvasAgent::disable@<X0>(WebCore::InspectorCanvasAgent *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(char *))(*((_QWORD *)this - 4) + 176))((char *)this - 32);
  *a2 = 0;
  a2[8] = 0;
  return result;
}

BOOL WebCore::InspectorCanvasAgent::enabled(WebCore::InspectorCanvasAgent *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 2) + 96) == (_QWORD)this;
}

WebCore::InspectorCanvasAgent *WebCore::InspectorCanvasAgent::internalEnable(WebCore::InspectorCanvasAgent *this)
{
  WebCore::InspectorCanvasAgent *v1;
  uint64_t v3;
  uint64_t v4;
  WebCore::CanvasRenderingContext **v5;
  uint64_t v6;
  WebCore::CanvasRenderingContext *v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v1 = this;
  *(_QWORD *)(*((_QWORD *)this + 2) + 96) = this;
  if (__ldaxr(WebCore::CanvasRenderingContext::s_instancesLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::CanvasRenderingContext::s_instancesLock))
  {
    goto LABEL_5;
  }
  this = (WebCore::InspectorCanvasAgent *)MEMORY[0x19AEA534C](WebCore::CanvasRenderingContext::s_instancesLock);
LABEL_5:
  {
    if (WebCore::CanvasRenderingContext::instances(void)::instances
      && *(_DWORD *)(WebCore::CanvasRenderingContext::instances(void)::instances - 12))
    {
      v3 = *(unsigned int *)(WebCore::CanvasRenderingContext::instances(void)::instances - 4);
      if ((_DWORD)v3)
      {
        v4 = 8 * v3;
        v5 = (WebCore::CanvasRenderingContext **)WebCore::CanvasRenderingContext::instances(void)::instances;
        while ((unint64_t)*v5 + 1 <= 1)
        {
          ++v5;
          v4 -= 8;
          if (!v4)
            goto LABEL_28;
        }
      }
      else
      {
        v5 = (WebCore::CanvasRenderingContext **)WebCore::CanvasRenderingContext::instances(void)::instances;
      }
      v6 = WebCore::CanvasRenderingContext::instances(void)::instances + 8 * v3;
      if ((WebCore::CanvasRenderingContext **)v6 != v5)
      {
LABEL_15:
        v7 = *v5;
        if (*v5)
        {
          if (((*(uint64_t (**)(WebCore::CanvasRenderingContext *))(*(_QWORD *)v7 + 24))(*v5) & 1) != 0
            || ((*(uint64_t (**)(WebCore::CanvasRenderingContext *))(*(_QWORD *)v7 + 64))(v7) & 1) != 0
            || ((*(uint64_t (**)(WebCore::CanvasRenderingContext *))(*(_QWORD *)v7 + 80))(v7) & 1) != 0
            || ((*(uint64_t (**)(WebCore::CanvasRenderingContext *))(*(_QWORD *)v7 + 32))(v7) & 1) != 0
            || (this = (WebCore::InspectorCanvasAgent *)(*(uint64_t (**)(WebCore::CanvasRenderingContext *))(*(_QWORD *)v7 + 40))(v7),
                (_DWORD)this))
          {
            v8 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)v7 + 4) + 144))(*((_QWORD **)v7 + 4));
            this = (WebCore::InspectorCanvasAgent *)(*(uint64_t (**)(WebCore::InspectorCanvasAgent *, uint64_t))(*(_QWORD *)v1 + 184))(v1, v8);
            if ((_DWORD)this)
              this = WebCore::InspectorCanvasAgent::bindCanvas(v1, v7, 0);
          }
        }
        while (++v5 != (WebCore::CanvasRenderingContext **)v6)
        {
          if ((unint64_t)*v5 + 1 > 1)
          {
            if (v5 != (WebCore::CanvasRenderingContext **)v6)
              goto LABEL_15;
            break;
          }
        }
      }
    }
  }
  else
  {
    WebCore::CanvasRenderingContext::instances(void)::instances = 0;
  }
LABEL_28:
  v9 = __ldxr(WebCore::CanvasRenderingContext::s_instancesLock);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_32;
  }
  if (__stlxr(0, WebCore::CanvasRenderingContext::s_instancesLock))
LABEL_32:
    this = (WebCore::InspectorCanvasAgent *)WTF::Lock::unlockSlow((WTF::Lock *)WebCore::CanvasRenderingContext::s_instancesLock);
  if (__ldaxr(WebCore::WebGLProgram::s_instancesLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::WebGLProgram::s_instancesLock))
  {
    goto LABEL_37;
  }
  this = (WebCore::InspectorCanvasAgent *)MEMORY[0x19AEA534C](WebCore::WebGLProgram::s_instancesLock);
LABEL_37:
  {
    if (WebCore::WebGLProgram::instances(void)::instances
      && *(_DWORD *)(WebCore::WebGLProgram::instances(void)::instances - 12))
    {
      v11 = *(unsigned int *)(WebCore::WebGLProgram::instances(void)::instances - 4);
      if ((_DWORD)v11)
      {
        v12 = 16 * v11;
        v13 = (uint64_t *)WebCore::WebGLProgram::instances(void)::instances;
        while ((unint64_t)(*v13 + 1) <= 1)
        {
          v13 += 2;
          v12 -= 16;
          if (!v12)
            goto LABEL_53;
        }
      }
      else
      {
        v13 = (uint64_t *)WebCore::WebGLProgram::instances(void)::instances;
      }
      v14 = WebCore::WebGLProgram::instances(void)::instances + 16 * v11;
      if ((uint64_t *)v14 != v13)
      {
LABEL_47:
        v15 = v13[1];
        if (v15)
        {
          v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 40) + 144))(*(_QWORD *)(v15 + 40));
          this = (WebCore::InspectorCanvasAgent *)(*(uint64_t (**)(WebCore::InspectorCanvasAgent *, uint64_t))(*(_QWORD *)v1 + 184))(v1, v16);
          if ((_DWORD)this)
            this = (WebCore::InspectorCanvasAgent *)WebCore::InspectorCanvasAgent::didCreateWebGLProgram((uint64_t)v1, v13[1], *v13);
        }
        while (1)
        {
          v13 += 2;
          if (v13 == (uint64_t *)v14)
            break;
          if ((unint64_t)(*v13 + 1) > 1)
          {
            if (v13 != (uint64_t *)v14)
              goto LABEL_47;
            break;
          }
        }
      }
    }
  }
  else
  {
    WebCore::WebGLProgram::instances(void)::instances = 0;
  }
LABEL_53:
  v17 = __ldxr(WebCore::WebGLProgram::s_instancesLock);
  if (v17 != 1)
  {
    __clrex();
    return (WebCore::InspectorCanvasAgent *)WTF::Lock::unlockSlow((WTF::Lock *)WebCore::WebGLProgram::s_instancesLock);
  }
  if (__stlxr(0, WebCore::WebGLProgram::s_instancesLock))
    return (WebCore::InspectorCanvasAgent *)WTF::Lock::unlockSlow((WTF::Lock *)WebCore::WebGLProgram::s_instancesLock);
  return this;
}

WebCore::InspectorCanvas *WebCore::InspectorCanvasAgent::bindCanvas(WebCore::InspectorCanvasAgent *this, WebCore::CanvasRenderingContext *a2, int a3)
{
  WebCore::InspectorCanvas *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  WebCore::InspectorCanvasAgent *v27;
  WebCore::InspectorCanvas *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WebCore::InspectorCanvas *v31;
  WebCore::CanvasRenderingContext *v32;
  int v33;
  WTF *v34;
  uint64_t v35;
  WebCore::InspectorCanvas **v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WebCore::InspectorCanvas *v41;
  int i;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unsigned int v47;
  int v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WebCore::CanvasBase *v53;
  WTF::String *v55;
  WTF::StringImpl *v56;
  WebCore::WebGLRenderingContextBase *v57;
  uint64_t v58;
  WTF::String *v59;
  uint64_t v60;
  WebCore::InspectorCanvas *v62;
  WTF *v63;
  void *v64;
  WTF *v65;
  void *v66;
  WTF *v67;
  WTF *v68;
  void *v69;
  WTF *v70;
  void *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WebCore::InspectorInstrumentation *v74;
  WebCore::ScriptExecutionContext *v75;
  uint64_t v76;
  WebCore::PageCanvasAgent *v77;
  WTF *v78;
  int v79;
  WebCore::InspectorCanvas *v80;
  WebCore::CanvasRenderingContext *v81;
  WebCore::InspectorCanvasAgent *v82;
  WTF::StringImpl **v83;
  WTF::String *v84;
  int v85;
  unsigned int v86;
  char v87;

  v6 = (WebCore::InspectorCanvas *)WTF::fastMalloc((WTF *)0x90);
  v7 = (_DWORD *)WebCore::InspectorCanvas::InspectorCanvas(v6, a2);
  v10 = (uint64_t *)((char *)this + 64);
  ++*v7;
  v83 = (WTF::StringImpl **)(v7 + 2);
  v12 = *((unsigned int *)this + 18);
  v11 = *((unsigned int *)this + 19);
  if (10 * v11 >= (unint64_t)(9 * v12)
    || (v12 <= 2 * (int)v11 ? (v13 = *((_BYTE *)this + 84) == 0) : (v13 = 1), !v13))
  {
    if ((_DWORD)v12)
      v14 = 2 * v12;
    else
      v14 = 8;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorCanvas,WTF::RawPtrTraits<WebCore::InspectorCanvas>,WTF::DefaultRefDerefTraits<WebCore::InspectorCanvas>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorCanvas,WTF::RawPtrTraits<WebCore::InspectorCanvas>,WTF::DefaultRefDerefTraits<WebCore::InspectorCanvas>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::InspectorCanvas,WTF::RawPtrTraits<WebCore::InspectorCanvas>,WTF::DefaultRefDerefTraits<WebCore::InspectorCanvas>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::InspectorCanvas,WTF::RawPtrTraits<WebCore::InspectorCanvas>,WTF::DefaultRefDerefTraits<WebCore::InspectorCanvas>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash((uint64_t *)this + 8, v14);
    LODWORD(v12) = *((_DWORD *)this + 18);
  }
  v15 = v12 - 1;
  v81 = a2;
  v82 = this;
  v16 = *((_DWORD *)this + 20);
  v17 = *((_DWORD *)*v83 + 4);
  v80 = v6;
  v79 = a3;
  if (v17 < 0x100)
    v18 = WTF::StringImpl::hashSlowCase(*v83);
  else
    v18 = v17 >> 8;
  v19 = (v18 ^ v16) & v15;
  v20 = *v10;
  v21 = *v10 + 16 * v19;
  v22 = *(WTF **)v21;
  if (*(_QWORD *)v21)
  {
    v23 = 0;
    while (1)
    {
      v24 = *((_DWORD *)v22 + 4);
      v25 = v24 < 0x100 ? WTF::StringImpl::hashSlowCase(v22) : v24 >> 8;
      v26 = (v19 + v12 - ((v25 ^ v16) & v15)) & v15;
      if (v23 > v26)
        break;
      if (v25 == v18 && (WTF::equal(*(WTF **)v21, *v83, v9) & 1) != 0)
      {
        v62 = *(WebCore::InspectorCanvas **)(v21 + 8);
        v28 = v80;
        v32 = v81;
        *(_QWORD *)(v21 + 8) = v80;
        v27 = v82;
        v33 = v79;
        if (v62)
        {
          if (*(_DWORD *)v62 == 1)
          {
            WebCore::InspectorCanvas::~InspectorCanvas(v62, v8);
            WTF::fastFree(v70, v71);
          }
          else
          {
            --*(_DWORD *)v62;
          }
        }
        goto LABEL_51;
      }
      v20 = *v10;
      v19 = ((_DWORD)v19 + 1) & v15;
      ++v23;
      v21 = *v10 + 16 * v19;
      v22 = *(WTF **)v21;
      if (!*(_QWORD *)v21)
      {
        if (v23 < 0x80)
          goto LABEL_24;
        v27 = v82;
        *((_BYTE *)v82 + 84) = 1;
        v28 = v80;
        goto LABEL_25;
      }
    }
    if (v23 >= 0x80)
      *((_BYTE *)v82 + 84) = 1;
    v34 = *(WTF **)v21;
    *(_QWORD *)v21 = 0;
    v35 = v20 + 16 * v19;
    v38 = *(_QWORD *)(v35 + 8);
    v36 = (WebCore::InspectorCanvas **)(v35 + 8);
    v37 = v38;
    *v36 = 0;
    v39 = *(WTF::StringImpl **)v21;
    *(_QWORD *)v21 = 0;
    v28 = v80;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
      {
        v78 = v34;
        WTF::StringImpl::destroy(v39, v8);
        v34 = v78;
      }
      else
      {
        *(_DWORD *)v39 -= 2;
      }
    }
    *(_QWORD *)v21 = 0;
    *(_QWORD *)(v21 + 8) = 0;
    v40 = *v83;
    if (*v83)
      *(_DWORD *)v40 += 2;
    *(_QWORD *)v21 = v40;
    v41 = *v36;
    *v36 = v80;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1)
      {
        v67 = v34;
        WebCore::InspectorCanvas::~InspectorCanvas(v41, v8);
        WTF::fastFree(v68, v69);
        v34 = v67;
      }
      else
      {
        --*(_DWORD *)v41;
      }
    }
    for (i = v19 + 1; ; i = v43 + 1)
    {
      v43 = i & v15;
      v44 = *v10;
      v45 = *v10 + 16 * v43;
      v46 = *(WTF::StringImpl **)v45;
      if (!*(_QWORD *)v45)
        break;
      v47 = *((_DWORD *)v46 + 4);
      if (v47 < 0x100)
      {
        v49 = v34;
        v48 = WTF::StringImpl::hashSlowCase(v46);
        v34 = v49;
      }
      else
      {
        v48 = v47 >> 8;
      }
      if (++v26 > (((_DWORD)v43 + (_DWORD)v12 - ((v48 ^ v16) & v15)) & v15))
      {
        v50 = *(WTF **)v45;
        v51 = *(_QWORD *)(v45 + 8);
        *(_QWORD *)v45 = v34;
        *(_QWORD *)(v45 + 8) = v37;
        v37 = v51;
        v34 = v50;
        v26 = (v43 + v12 - ((v48 ^ v16) & v15)) & v15;
      }
    }
    v33 = v79;
    *(_QWORD *)v45 = v34;
    v52 = v44 + 16 * v43;
    v31 = *(WebCore::InspectorCanvas **)(v52 + 8);
    *(_QWORD *)(v52 + 8) = v37;
    v32 = v81;
    v27 = v82;
    if (!v31)
      goto LABEL_50;
  }
  else
  {
LABEL_24:
    v28 = v80;
    v27 = v82;
LABEL_25:
    v29 = *v83;
    if (*v83)
      *(_DWORD *)v29 += 2;
    *(_QWORD *)v21 = v29;
    v30 = v20 + 16 * v19;
    v31 = *(WebCore::InspectorCanvas **)(v30 + 8);
    *(_QWORD *)(v30 + 8) = v28;
    v32 = v81;
    v33 = v79;
    if (!v31)
      goto LABEL_50;
  }
  if (*(_DWORD *)v31 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v31, v8);
    WTF::fastFree(v65, v66);
  }
  else
  {
    --*(_DWORD *)v31;
  }
LABEL_50:
  ++*((_DWORD *)v27 + 19);
LABEL_51:
  v53 = (WebCore::CanvasBase *)*((_QWORD *)v32 + 4);
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)v53 + 80, (_QWORD *)v27 + 5, (uint64_t)&v84);
  if ((*(unsigned int (**)(uint64_t))(*((_QWORD *)v27 + 5) + 16))((uint64_t)v27 + 40))
  {
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v74 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(WebCore::CanvasBase *))(*(_QWORD *)v53
                                                                                                  + 144))(v53);
      if (v74)
      {
        v76 = WebCore::InspectorInstrumentation::instrumentingAgents(v74, v75);
        if (v76)
        {
          v77 = *(WebCore::PageCanvasAgent **)(v76 + 104);
          if (v77)
            WebCore::PageCanvasAgent::didChangeCSSCanvasClientNodes(v77, v53);
        }
      }
    }
  }
  WebCore::InspectorCanvas::buildObjectForCanvas(v28, v33, &v84);
  Inspector::CanvasFrontendDispatcher::canvasAdded();
  v55 = v84;
  v84 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v55;
  }
  if (((*(uint64_t (**)(WebCore::CanvasRenderingContext *))(*(_QWORD *)v32 + 32))(v32) & 1) != 0
    || (*(unsigned int (**)(WebCore::CanvasRenderingContext *))(*(_QWORD *)v32 + 40))(v32))
  {
    if (((*(uint64_t (**)(WebCore::CanvasRenderingContext *))(*(_QWORD *)v32 + 32))(v32) & 1) == 0
      && ((*(uint64_t (**)(WebCore::CanvasRenderingContext *))(*(_QWORD *)v32 + 40))(v32) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195E0CF4CLL);
    }
    v58 = *((_QWORD *)v32 - 1);
    v57 = (WebCore::CanvasRenderingContext *)((char *)v32 - 8);
    (*(void (**)(WTF::String **__return_ptr, WebCore::WebGLRenderingContextBase *))(v58 + 72))(&v84, v57);
    if (v87)
    {
      v59 = v84;
      if (!v86)
        goto LABEL_68;
      v60 = 8 * v86;
      do
      {
        if (WebCore::WebGLRenderingContextBase::extensionIsEnabled(v57, v59))
          Inspector::CanvasFrontendDispatcher::extensionEnabled(*((Inspector::CanvasFrontendDispatcher **)v27 + 7), (const WTF::String *)v83, v59);
        v59 = (WTF::String *)((char *)v59 + 8);
        v60 -= 8;
      }
      while (v60);
      if (v87)
      {
        v59 = v84;
        if (!v86)
        {
LABEL_68:
          if (!v59)
            goto LABEL_69;
          goto LABEL_89;
        }
        v72 = 8 * v86;
        do
        {
          v73 = *(WTF::StringImpl **)v59;
          *(_QWORD *)v59 = 0;
          if (v73)
          {
            if (*(_DWORD *)v73 == 2)
              WTF::StringImpl::destroy(v73, v56);
            else
              *(_DWORD *)v73 -= 2;
          }
          v59 = (WTF::String *)((char *)v59 + 8);
          v72 -= 8;
        }
        while (v72);
        v59 = v84;
        if (v84)
        {
LABEL_89:
          v84 = 0;
          v85 = 0;
          WTF::fastFree(v59, v56);
        }
      }
    }
  }
LABEL_69:
  if (*(_DWORD *)v28 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v28, v56);
    WTF::fastFree(v63, v64);
  }
  else
  {
    --*(_DWORD *)v28;
  }
  return v28;
}

uint64_t WebCore::InspectorCanvasAgent::didCreateWebGLProgram(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  uint64_t v7;
  WebCore::InspectorCanvas *v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF *v30;
  WTF *v31;
  uint64_t v32;
  WTF **v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  WTF *v44;
  uint64_t v45;
  WTF *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  _DWORD *v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  WTF *v54;
  void *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl **v61;
  int v62;
  uint64_t *v63;
  _DWORD *v64;
  uint64_t v65;
  _DWORD *v66;

  if (*(_DWORD *)(result + 76))
  {
    v3 = result;
    v4 = *(unsigned int *)(result + 72);
    if ((_DWORD)v4)
    {
      v5 = 16 * v4;
      for (i = *(_QWORD **)(result + 64); !*i; i += 2)
      {
        v5 -= 16;
        if (!v5)
          return result;
      }
    }
    else
    {
      i = *(_QWORD **)(result + 64);
    }
    v7 = *(_QWORD *)(result + 64) + 16 * v4;
    if (i != (_QWORD *)v7)
    {
LABEL_9:
      v8 = (WebCore::InspectorCanvas *)i[1];
      if (*(_QWORD *)(*((_QWORD *)v8 + 2) + 8) != a2 + 8)
      {
        while (1)
        {
          i += 2;
          if (i == (_QWORD *)v7)
            return result;
          if (*i)
          {
            if (i != (_QWORD *)v7)
              goto LABEL_9;
            return result;
          }
        }
      }
      ++*(_DWORD *)v8;
      WebCore::InspectorShaderProgram::create(a3, (uint64_t)v8, &v65);
      v11 = v65;
      v63 = (uint64_t *)(v3 + 176);
      v61 = (WTF::StringImpl **)(v65 + 8);
      v13 = *(unsigned int *)(v3 + 184);
      v12 = *(unsigned int *)(v3 + 188);
      if (10 * v12 >= (unint64_t)(9 * v13) || v13 <= 2 * (int)v12 && *(_BYTE *)(v3 + 196))
      {
        if ((_DWORD)v13)
          v14 = 2 * v13;
        else
          v14 = 8;
        WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorShaderProgram,WTF::RawPtrTraits<WebCore::InspectorShaderProgram>,WTF::DefaultRefDerefTraits<WebCore::InspectorShaderProgram>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorShaderProgram,WTF::RawPtrTraits<WebCore::InspectorShaderProgram>,WTF::DefaultRefDerefTraits<WebCore::InspectorShaderProgram>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::InspectorShaderProgram,WTF::RawPtrTraits<WebCore::InspectorShaderProgram>,WTF::DefaultRefDerefTraits<WebCore::InspectorShaderProgram>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::InspectorShaderProgram,WTF::RawPtrTraits<WebCore::InspectorShaderProgram>,WTF::DefaultRefDerefTraits<WebCore::InspectorShaderProgram>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(v63, v14);
        LODWORD(v13) = *(_DWORD *)(v3 + 184);
      }
      v15 = v13 - 1;
      v16 = *(_DWORD *)(v3 + 192);
      v17 = *((_DWORD *)*v61 + 4);
      v62 = v16;
      if (v17 < 0x100)
      {
        v19 = WTF::StringImpl::hashSlowCase(*v61);
        v16 = v62;
        v18 = v19;
      }
      else
      {
        v18 = v17 >> 8;
      }
      v20 = (v18 ^ v16) & v15;
      v21 = *v63;
      v22 = *v63 + 16 * v20;
      v23 = *(WTF **)v22;
      if (*(_QWORD *)v22)
      {
        v60 = v11;
        v24 = 0;
        while (1)
        {
          v25 = *((_DWORD *)v23 + 4);
          if (v25 < 0x100)
          {
            v26 = WTF::StringImpl::hashSlowCase(v23);
            v16 = v62;
          }
          else
          {
            v26 = v25 >> 8;
          }
          v27 = (v20 + v13 - ((v26 ^ v16) & v15)) & v15;
          if (v24 > v27)
            break;
          if (v26 == v18)
          {
            v23 = (WTF *)WTF::equal(*(WTF **)v22, *v61, v10);
            v16 = v62;
            if ((v23 & 1) != 0)
            {
              v46 = *(WTF **)(v22 + 8);
              v11 = v60;
              *(_QWORD *)(v22 + 8) = v60;
              if (v46)
              {
                if (*(_DWORD *)v46 == 1)
                {
                  v58 = (WTF::StringImpl *)*((_QWORD *)v46 + 1);
                  *((_QWORD *)v46 + 1) = 0;
                  if (v58)
                  {
                    if (*(_DWORD *)v58 == 2)
                      WTF::StringImpl::destroy(v58, v9);
                    else
                      *(_DWORD *)v58 -= 2;
                  }
                  v23 = (WTF *)WTF::fastFree(v46, v9);
                }
                else
                {
                  --*(_DWORD *)v46;
                }
              }
              goto LABEL_67;
            }
          }
          v21 = *v63;
          v20 = ((_DWORD)v20 + 1) & v15;
          ++v24;
          v22 = *v63 + 16 * v20;
          v23 = *(WTF **)v22;
          if (!*(_QWORD *)v22)
          {
            if (v24 >= 0x80)
              *(_BYTE *)(v3 + 196) = 1;
            v11 = v60;
            goto LABEL_36;
          }
        }
        if (v24 >= 0x80)
          *(_BYTE *)(v3 + 196) = 1;
        v31 = *(WTF **)v22;
        *(_QWORD *)v22 = 0;
        v32 = v21 + 16 * v20;
        v34 = *(_QWORD *)(v32 + 8);
        v33 = (WTF **)(v32 + 8);
        v59 = v34;
        *v33 = 0;
        v35 = *(WTF::StringImpl **)v22;
        *(_QWORD *)v22 = 0;
        v11 = v60;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
          {
            WTF::StringImpl::destroy(v35, v9);
            v16 = v62;
          }
          else
          {
            *(_DWORD *)v35 -= 2;
          }
        }
        *(_QWORD *)v22 = 0;
        *(_QWORD *)(v22 + 8) = 0;
        v36 = *v61;
        if (*v61)
          *(_DWORD *)v36 += 2;
        *(_QWORD *)v22 = v36;
        v37 = *v33;
        *v33 = (WTF *)v60;
        if (v37)
        {
          if (*(_DWORD *)v37 == 1)
          {
            v57 = (WTF::StringImpl *)*((_QWORD *)v37 + 1);
            *((_QWORD *)v37 + 1) = 0;
            if (v57)
            {
              if (*(_DWORD *)v57 == 2)
                WTF::StringImpl::destroy(v57, v9);
              else
                *(_DWORD *)v57 -= 2;
            }
            WTF::fastFree(v37, v9);
            v16 = v62;
          }
          else
          {
            --*(_DWORD *)v37;
          }
        }
        v38 = ((_DWORD)v20 + 1) & v15;
        v39 = *v63;
        v40 = *v63 + 16 * v38;
        v23 = *(WTF **)v40;
        if (*(_QWORD *)v40)
        {
          v41 = v59;
          do
          {
            v42 = *((_DWORD *)v23 + 4);
            if (v42 < 0x100)
            {
              v43 = WTF::StringImpl::hashSlowCase(v23);
              v16 = v62;
            }
            else
            {
              v43 = v42 >> 8;
            }
            if (++v27 > (((_DWORD)v38 + (_DWORD)v13 - ((v43 ^ v16) & v15)) & v15))
            {
              v44 = *(WTF **)v40;
              v45 = *(_QWORD *)(v40 + 8);
              *(_QWORD *)v40 = v31;
              *(_QWORD *)(v40 + 8) = v41;
              v41 = v45;
              v31 = v44;
              v27 = (v38 + v13 - ((v43 ^ v16) & v15)) & v15;
            }
            v38 = ((_DWORD)v38 + 1) & v15;
            v39 = *v63;
            v40 = *v63 + 16 * v38;
            v23 = *(WTF **)v40;
          }
          while (*(_QWORD *)v40);
        }
        else
        {
          v41 = v59;
        }
        *(_QWORD *)v40 = v31;
        v47 = v39 + 16 * v38;
        v30 = *(WTF **)(v47 + 8);
        *(_QWORD *)(v47 + 8) = v41;
        if (!v30)
          goto LABEL_66;
      }
      else
      {
LABEL_36:
        v28 = *v61;
        if (*v61)
          *(_DWORD *)v28 += 2;
        *(_QWORD *)v22 = v28;
        v29 = v21 + 16 * v20;
        v30 = *(WTF **)(v29 + 8);
        *(_QWORD *)(v29 + 8) = v11;
        if (!v30)
        {
LABEL_66:
          ++*(_DWORD *)(v3 + 188);
LABEL_67:
          WTF::JSONImpl::Object::create(v23);
          v48 = Inspector::Protocol::Canvas::ShaderProgram::Builder<0>::setProgramId((uint64_t *)&v66, (WTF::JSONImpl::Value *)v61);
          v49 = Inspector::Protocol::Canvas::ShaderProgram::Builder<1>::setProgramType(v48, (Inspector::Protocol::Helpers *)0x4E);
          v50 = Inspector::Protocol::Canvas::ShaderProgram::Builder<3>::setCanvasId(v49, (WTF::JSONImpl::Value *)(*(_QWORD *)(v11 + 16) + 8));
          v51 = (_DWORD *)*v50;
          *v50 = 0;
          v64 = v51;
          v52 = v66;
          v66 = 0;
          if (v52)
          {
            if (*v52 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v52;
          }
          Inspector::CanvasFrontendDispatcher::programCreated();
          result = (uint64_t)v64;
          if (v64)
          {
            if (*v64 == 1)
              result = WTF::JSONImpl::Value::operator delete();
            else
              --*v64;
          }
          if (*(_DWORD *)v8 == 1)
          {
            WebCore::InspectorCanvas::~InspectorCanvas(v8, v53);
            return WTF::fastFree(v54, v55);
          }
          else
          {
            --*(_DWORD *)v8;
          }
          return result;
        }
      }
      if (*(_DWORD *)v30 == 1)
      {
        v56 = (WTF::StringImpl *)*((_QWORD *)v30 + 1);
        *((_QWORD *)v30 + 1) = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2)
            WTF::StringImpl::destroy(v56, v9);
          else
            *(_DWORD *)v56 -= 2;
        }
        v23 = (WTF *)WTF::fastFree(v30, v9);
      }
      else
      {
        --*(_DWORD *)v30;
      }
      goto LABEL_66;
    }
  }
  return result;
}

WTF *WebCore::InspectorCanvasAgent::internalDisable(WebCore::InspectorCanvasAgent *this, WebCore::ScriptExecutionContext *a2)
{
  WTF *result;

  *(_QWORD *)(*((_QWORD *)this + 2) + 96) = 0;
  result = WebCore::InspectorCanvasAgent::reset(this, a2);
  if (*((_BYTE *)this + 304))
    *((_BYTE *)this + 304) = 0;
  return result;
}

WTF::StringImpl *WebCore::InspectorCanvasAgent::requestContent@<X0>(WebCore::InspectorCanvasAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  WTF *v5;
  WebCore::CanvasRenderingContext *v6;
  WebCore::InspectorCanvas *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF *v12;
  void *v13;
  WTF::StringImpl *v14;

  v5 = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 8, a2, a3);
  if (v5)
  {
    v7 = v5;
    ++*(_DWORD *)v5;
    result = WebCore::InspectorCanvas::getContentAsDataURL(*(WebCore::InspectorCanvas **)(*((_QWORD *)v5 + 2) + 8), v6, a4);
    if (*(_DWORD *)v7 == 1)
    {
      WebCore::InspectorCanvas::~InspectorCanvas(v7, v9);
      return (WTF::StringImpl *)WTF::fastFree(v12, v13);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = v14;
    if (v14)
    {
      v11 = *(_DWORD *)v14;
      *(_DWORD *)v14 += 2;
      *(_QWORD *)a4 = v14;
      *(_DWORD *)(a4 + 8) = 1;
      if (v11)
        *(_DWORD *)v14 = v11;
      else
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v14, v10);
    }
    else
    {
      *(_QWORD *)a4 = 0;
      *(_DWORD *)(a4 + 8) = 1;
    }
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorCanvasAgent::requestContent@<X0>(WebCore::InspectorCanvasAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  return WebCore::InspectorCanvasAgent::requestContent((WebCore::InspectorCanvasAgent *)((char *)this - 32), a2, a3, a4);
}

void WebCore::InspectorCanvasAgent::resolveContext(WebCore::InspectorCanvasAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, uint64_t a4@<X8>)
{
  WTF *v6;
  WebCore::InspectorCanvas *v7;
  uint64_t v8;
  WebCore::ScriptExecutionContext *v9;
  JSC::JSGlobalObject *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  WTF::StringImpl *v18;

  v6 = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 8, a2, a3);
  if (v6)
  {
    v7 = v6;
    ++*(_DWORD *)v6;
    v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 2) + 8) + 32);
    v9 = (WebCore::ScriptExecutionContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 144))(v8);
    v10 = (JSC::JSGlobalObject *)WebCore::ScriptExecutionContext::globalObject(v9);
    Inspector::InjectedScriptManager::injectedScriptFor(*((Inspector::InjectedScriptManager **)this + 12), v10);
    if (WebCore::InspectorCanvas::resolveContext(v7, v10) && (Inspector::InjectedScript::wrapObject(), v17))
    {
      *(_QWORD *)a4 = v17;
      *(_DWORD *)(a4 + 8) = 0;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_DWORD *)(a4 + 8) = 1;
    }
    Inspector::InjectedScript::~InjectedScript((Inspector::InjectedScript *)&v18);
    if (*(_DWORD *)v7 == 1)
    {
      WebCore::InspectorCanvas::~InspectorCanvas(v7, v14);
      WTF::fastFree(v15, v16);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = v18;
    if (v18)
    {
      v13 = *(_DWORD *)v18;
      *(_DWORD *)v18 += 2;
      *(_QWORD *)a4 = v12;
      *(_DWORD *)(a4 + 8) = 1;
      if (v13)
        *(_DWORD *)v12 = v13;
      else
        WTF::StringImpl::destroy(v12, v11);
    }
    else
    {
      *(_QWORD *)a4 = 0;
      *(_DWORD *)(a4 + 8) = 1;
    }
  }
}

void `non-virtual thunk to'WebCore::InspectorCanvasAgent::resolveContext(WebCore::InspectorCanvasAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, uint64_t a4@<X8>)
{
  WebCore::InspectorCanvasAgent::resolveContext((WebCore::InspectorCanvasAgent *)((char *)this - 32), a2, a3, a4);
}

uint64_t WebCore::InspectorCanvasAgent::setRecordingAutoCaptureFrameCount@<X0>(uint64_t this@<X0>, int a2@<W1>, _BYTE *a3@<X8>)
{
  if (a2 < 1)
  {
    if (*(_BYTE *)(this + 304))
      *(_BYTE *)(this + 304) = 0;
  }
  else
  {
    if (!*(_BYTE *)(this + 304))
      *(_BYTE *)(this + 304) = 1;
    *(_QWORD *)(this + 296) = a2;
  }
  *a3 = 0;
  a3[8] = 0;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::InspectorCanvasAgent::setRecordingAutoCaptureFrameCount@<X0>(uint64_t this@<X0>, int a2@<W1>, _BYTE *a3@<X8>)
{
  if (a2 < 1)
  {
    if (*(_BYTE *)(this + 272))
      *(_BYTE *)(this + 272) = 0;
  }
  else
  {
    if (!*(_BYTE *)(this + 272))
      *(_BYTE *)(this + 272) = 1;
    *(_QWORD *)(this + 264) = a2;
  }
  *a3 = 0;
  a3[8] = 0;
  return this;
}

WTF::StringImpl *WebCore::InspectorCanvasAgent::startRecording@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, int *a4@<X3>, _BYTE *a5@<X8>)
{
  WTF *v9;
  WebCore::InspectorCanvas *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  WTF::StringImpl *v19;
  char v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;

  v9 = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 64), a2, a3);
  if (v9)
  {
    v10 = v9;
    ++*(_DWORD *)v9;
    if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v9 + 2) + 8) + 25))
    {
      result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      a5[8] = 1;
    }
    else
    {
      LOBYTE(v19) = 0;
      v20 = 0;
      LOBYTE(v21) = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      if (*((_BYTE *)a3 + 4))
      {
        v15 = (WTF::StringImpl *)*(int *)a3;
        v20 = 1;
        v19 = v15;
      }
      if (*((_BYTE *)a4 + 4))
      {
        v16 = *a4;
        v22 = 1;
        v21 = v16;
      }
      result = (WTF::StringImpl *)WebCore::InspectorCanvasAgent::startRecording(a1, (uint64_t)v9, 101, (uint64_t)&v19);
      *a5 = 0;
      a5[8] = 0;
    }
    if (*(_DWORD *)v10 == 1)
    {
      WebCore::InspectorCanvas::~InspectorCanvas(v10, v12);
      return (WTF::StringImpl *)WTF::fastFree(v17, v18);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = v19;
    if (v19)
    {
      v14 = *(_DWORD *)v19;
      *(_DWORD *)v19 += 2;
      *(_QWORD *)a5 = result;
      a5[8] = 1;
      if (v14)
        *(_DWORD *)result = v14;
      else
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    }
    else
    {
      *(_QWORD *)a5 = 0;
      a5[8] = 1;
    }
  }
  return result;
}

uint64_t WebCore::InspectorCanvasAgent::startRecording(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v6;
  uint64_t result;
  void *v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  WTF::StringImpl *v13;

  v6 = *(_BYTE **)(*(_QWORD *)(a2 + 16) + 8);
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v6 + 24))(v6);
  if ((result & 1) != 0
    || (result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v6 + 64))(v6), (result & 1) != 0)
    || (result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v6 + 80))(v6), (result & 1) != 0)
    || (result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v6 + 32))(v6), (result & 1) != 0)
    || (result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v6 + 40))(v6), (_DWORD)result))
  {
    if (!v6[25])
    {
      WebCore::InspectorCanvas::resetRecordingData((WebCore::InspectorCanvas *)a2, v8);
      if (*(_BYTE *)(a4 + 8))
      {
        v10 = *(_QWORD *)a4;
        if (*(uint64_t *)a4 < 1)
        {
          if (*(_BYTE *)(a2 + 120))
            *(_BYTE *)(a2 + 120) = 0;
        }
        else
        {
          if (v10 >= 0x7FFFFFFF)
            v10 = 0x7FFFFFFFLL;
          if (!*(_BYTE *)(a2 + 120))
            *(_BYTE *)(a2 + 120) = 1;
          *(_QWORD *)(a2 + 112) = v10;
        }
      }
      if (*(_BYTE *)(a4 + 24))
      {
        v11 = *(_QWORD *)(a4 + 16);
        if (v11 >= 0x7FFFFFFF)
          v11 = 0x7FFFFFFFLL;
        *(_QWORD *)(a2 + 96) = v11;
      }
      if (*(_BYTE *)(a4 + 40))
      {
        v12 = *(_DWORD **)(a4 + 32);
        if (v12)
          *v12 += 2;
        v13 = *(WTF::StringImpl **)(a2 + 80);
        *(_QWORD *)(a2 + 80) = v12;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v9);
          else
            *(_DWORD *)v13 -= 2;
        }
      }
      v6[25] = 1;
      return Inspector::CanvasFrontendDispatcher::recordingStarted();
    }
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorCanvasAgent::startRecording@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, int *a4@<X3>, _BYTE *a5@<X8>)
{
  return WebCore::InspectorCanvasAgent::startRecording(a1 - 32, a2, a3, a4, a5);
}

uint64_t WebCore::InspectorCanvasAgent::stopRecording@<X0>(WebCore::InspectorCanvasAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _BYTE *a4@<X8>)
{
  WTF *v6;
  WebCore::InspectorCanvas *v7;
  WebCore::CanvasRenderingContext *v8;
  uint64_t result;
  WTF::StringImpl *v10;
  char v11;
  WTF::StringImpl *v12;
  int v13;
  WTF *v14;
  void *v15;
  WTF::StringImpl *v16;

  v6 = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 8, a2, a3);
  if (v6)
  {
    v7 = v6;
    ++*(_DWORD *)v6;
    v8 = *(WebCore::CanvasRenderingContext **)(*((_QWORD *)v6 + 2) + 8);
    if (*((_BYTE *)v8 + 25))
    {
      result = WebCore::InspectorCanvasAgent::didFinishRecordingCanvasFrame((uint64_t)this, v8, 1);
      v11 = 0;
      *a4 = 0;
    }
    else
    {
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      v11 = 1;
    }
    a4[8] = v11;
    if (*(_DWORD *)v7 == 1)
    {
      WebCore::InspectorCanvas::~InspectorCanvas(v7, v10);
      return WTF::fastFree(v14, v15);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = (uint64_t)v16;
    if (v16)
    {
      v13 = *(_DWORD *)v16;
      *(_DWORD *)v16 += 2;
      *(_QWORD *)a4 = v16;
      a4[8] = 1;
      if (v13)
        *(_DWORD *)v16 = v13;
      else
        return WTF::StringImpl::destroy(v16, v12);
    }
    else
    {
      *(_QWORD *)a4 = 0;
      a4[8] = 1;
    }
  }
  return result;
}

uint64_t WebCore::InspectorCanvasAgent::didFinishRecordingCanvasFrame(uint64_t this, WebCore::CanvasRenderingContext *a2, int a3)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v8;
  uint64_t v9;
  WTF::JSONImpl::ArrayBase *v10;
  Inspector::Protocol::Recording::Frame *v11;
  const WTF::StringImpl *v12;
  Inspector::Protocol::Recording::Frame *v13;
  Inspector::Protocol::Recording::Frame *v14;
  void *v15;
  WTF *v16;
  void *v17;
  Inspector::Protocol::Recording::Frame *v18;
  Inspector::Protocol::Recording::Frame *v19;

  if (*((_BYTE *)a2 + 25))
  {
    v3 = this;
    if (*(_DWORD *)(this + 76))
    {
      v4 = a3;
      v5 = *(unsigned int *)(this + 72);
      if ((_DWORD)v5)
      {
        v6 = 16 * v5;
        for (i = *(_QWORD **)(this + 64); !*i; i += 2)
        {
          v6 -= 16;
          if (!v6)
            return this;
        }
      }
      else
      {
        i = *(_QWORD **)(this + 64);
      }
      v8 = *(_QWORD *)(this + 64) + 16 * v5;
LABEL_10:
      if (i != (_QWORD *)v8)
      {
        v9 = i[1];
        if (*(WebCore::CanvasRenderingContext **)(*(_QWORD *)(v9 + 16) + 8) != a2)
        {
          while (1)
          {
            i += 2;
            if (i == (_QWORD *)v8)
              return this;
            if (*i)
              goto LABEL_10;
          }
        }
        ++*(_DWORD *)v9;
        if (!*(_QWORD *)(v9 + 104))
        {
          if (a3)
          {
            Inspector::CanvasFrontendDispatcher::recordingFinished();
            v19 = 0;
            this = (uint64_t)WebCore::InspectorCanvas::resetRecordingData((WebCore::InspectorCanvas *)v9, v15);
          }
          goto LABEL_40;
        }
        if (a3)
        {
          if (*(_QWORD *)(v9 + 40))
          {
            v10 = *(WTF::JSONImpl::ArrayBase **)(v9 + 32);
            if (v10)
            {
              if (*((_DWORD *)v10 + 7))
              {
                WTF::JSONImpl::ArrayBase::get(v10);
                Inspector::Protocol::Recording::Frame::setIncomplete(v19, (WTF::JSONImpl::Value *)1);
                if (v19)
                {
                  if (*(_DWORD *)v19 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*(_DWORD *)v19;
                }
              }
            }
          }
        }
        this = (uint64_t)WebCore::InspectorCanvas::finalizeFrame((WTF::JSONImpl::ArrayBase **)v9);
        if (*(_QWORD *)(v9 + 32))
        {
          v19 = *(Inspector::Protocol::Recording::Frame **)(v9 + 32);
          *(_QWORD *)(v9 + 32) = 0;
          Inspector::CanvasFrontendDispatcher::recordingProgress();
          this = (uint64_t)v19;
          v19 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 1)
            {
              this = WTF::JSONImpl::Value::operator delete();
              if ((v4 & 1) != 0)
                goto LABEL_30;
LABEL_28:
              if (!*(_BYTE *)(v9 + 120) || *(_QWORD *)(v9 + 128) < *(_QWORD *)(v9 + 112))
              {
LABEL_40:
                if (*(_DWORD *)v9 == 1)
                {
                  WebCore::InspectorCanvas::~InspectorCanvas((WebCore::InspectorCanvas *)v9, a2);
                  return WTF::fastFree(v16, v17);
                }
                else
                {
                  --*(_DWORD *)v9;
                }
                return this;
              }
LABEL_30:
              WebCore::InspectorCanvas::releaseObjectForRecording((WebCore::InspectorCanvas *)v9, &v18);
              v11 = v18;
              v18 = 0;
              v19 = v11;
              Inspector::CanvasFrontendDispatcher::recordingFinished();
              v13 = v19;
              v19 = 0;
              if (v13)
              {
                if (*(_DWORD *)v13 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*(_DWORD *)v13;
              }
              v14 = v18;
              v18 = 0;
              if (v14)
              {
                if (*(_DWORD *)v14 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*(_DWORD *)v14;
              }
              this = WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v3 + 272), (WTF::StringImpl **)(v9 + 8), v12);
              if (*(_QWORD *)(v3 + 272) + 8 * *(unsigned int *)(v3 + 280) != this)
                this = WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(v3 + 272, (WTF::StringImpl *)this);
              goto LABEL_40;
            }
            --*(_DWORD *)this;
          }
        }
        if ((v4 & 1) != 0)
          goto LABEL_30;
        goto LABEL_28;
      }
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::InspectorCanvasAgent::stopRecording@<X0>(WebCore::InspectorCanvasAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _BYTE *a4@<X8>)
{
  return WebCore::InspectorCanvasAgent::stopRecording((WebCore::InspectorCanvasAgent *)((char *)this - 32), a2, a3, a4);
}

uint64_t WebCore::InspectorCanvasAgent::requestShaderSource@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t result;
  WTF::StringImpl *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  v4 = (int)a3;
  result = (uint64_t)WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 176), a2, a3);
  if (!result)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = (uint64_t)v17;
    if (v17)
    {
      v12 = *(_DWORD *)v17;
      *(_DWORD *)v17 += 2;
      *(_QWORD *)a4 = v17;
      *(_DWORD *)(a4 + 8) = 1;
      if (v12)
        *(_DWORD *)v17 = v12;
      else
        return WTF::StringImpl::destroy(v17, v11);
    }
    else
    {
      *(_QWORD *)a4 = 0;
      *(_DWORD *)(a4 + 8) = 1;
    }
    return result;
  }
  v8 = (WTF *)result;
  ++*(_DWORD *)result;
  v9 = *(_QWORD *)(result + 24);
  if (v4 == 79)
  {
    v10 = (uint64_t *)(v9 + 72);
  }
  else
  {
    if (v4 != 80)
      goto LABEL_12;
    v10 = (uint64_t *)(v9 + 64);
  }
  v13 = *v10;
  if (v13)
  {
    v14 = *(_DWORD **)(v13 + 40);
    if (v14)
    {
      v15 = 0;
      *v14 += 2;
      *(_QWORD *)a4 = v14;
      goto LABEL_13;
    }
  }
LABEL_12:
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = 1;
LABEL_13:
  *(_DWORD *)(a4 + 8) = v15;
  if (*(_DWORD *)v8 == 1)
  {
    v16 = (WTF::StringImpl *)*((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v7);
      else
        *(_DWORD *)v16 -= 2;
    }
    return WTF::fastFree(v8, v7);
  }
  else
  {
    --*(_DWORD *)v8;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorCanvasAgent::requestShaderSource@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  return WebCore::InspectorCanvasAgent::requestShaderSource(a1 - 32, a2, a3, a4);
}

uint64_t WebCore::InspectorCanvasAgent::updateShader@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, const WTF::String *a4@<X3>, _BYTE *a5@<X8>)
{
  int v6;
  WTF *v8;
  WTF *v9;
  uint64_t result;
  WTF::StringImpl *v11;
  char v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v6 = (int)a3;
  v8 = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 176), a2, a3);
  if (v8)
  {
    v9 = v8;
    ++*(_DWORD *)v8;
    result = WebCore::InspectorShaderProgram::updateShader((uint64_t)v8, v6, a4);
    if ((result & 1) != 0)
    {
      v12 = 0;
      *a5 = 0;
    }
    else
    {
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      v12 = 1;
    }
    a5[8] = v12;
    if (*(_DWORD *)v9 == 1)
    {
      v15 = (WTF::StringImpl *)*((_QWORD *)v9 + 1);
      *((_QWORD *)v9 + 1) = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v11);
        else
          *(_DWORD *)v15 -= 2;
      }
      return WTF::fastFree(v9, v11);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = (uint64_t)v16;
    if (v16)
    {
      v14 = *(_DWORD *)v16;
      *(_DWORD *)v16 += 2;
      *(_QWORD *)a5 = v16;
      a5[8] = 1;
      if (v14)
        *(_DWORD *)v16 = v14;
      else
        return WTF::StringImpl::destroy(v16, v13);
    }
    else
    {
      *(_QWORD *)a5 = 0;
      a5[8] = 1;
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorCanvasAgent::updateShader@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, const WTF::String *a4@<X3>, _BYTE *a5@<X8>)
{
  return WebCore::InspectorCanvasAgent::updateShader(a1 - 32, a2, a3, a4, a5);
}

WTF *WebCore::InspectorCanvasAgent::setShaderProgramDisabled@<X0>(WebCore::InspectorCanvasAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _BYTE *a4@<X8>)
{
  char v4;
  WTF *result;
  WTF::StringImpl *v7;
  WTF *v8;
  int v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v4 = (char)a3;
  result = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 22, a2, a3);
  if (result)
  {
    v8 = result;
    v9 = (*(_DWORD *)result)++;
    *((_BYTE *)result + 32) = v4;
    *a4 = 0;
    a4[8] = 0;
    if (v9)
    {
      *(_DWORD *)result = v9;
    }
    else
    {
      v12 = (WTF::StringImpl *)*((_QWORD *)result + 1);
      *((_QWORD *)v8 + 1) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v7);
        else
          *(_DWORD *)v12 -= 2;
      }
      return (WTF *)WTF::fastFree(v8, v7);
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = v13;
    if (v13)
    {
      v11 = *(_DWORD *)v13;
      *(_DWORD *)v13 += 2;
      *(_QWORD *)a4 = v13;
      a4[8] = 1;
      if (v11)
        *(_DWORD *)v13 = v11;
      else
        return (WTF *)WTF::StringImpl::destroy(v13, v10);
    }
    else
    {
      *(_QWORD *)a4 = 0;
      a4[8] = 1;
    }
  }
  return result;
}

WTF *`non-virtual thunk to'WebCore::InspectorCanvasAgent::setShaderProgramDisabled@<X0>(WebCore::InspectorCanvasAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _BYTE *a4@<X8>)
{
  return WebCore::InspectorCanvasAgent::setShaderProgramDisabled((WebCore::InspectorCanvasAgent *)((char *)this - 32), a2, a3, a4);
}

WTF *WebCore::InspectorCanvasAgent::setShaderProgramHighlighted@<X0>(WebCore::InspectorCanvasAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _BYTE *a4@<X8>)
{
  char v4;
  WTF *result;
  WTF::StringImpl *v7;
  WTF *v8;
  int v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v4 = (char)a3;
  result = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 22, a2, a3);
  if (result)
  {
    v8 = result;
    v9 = (*(_DWORD *)result)++;
    *((_BYTE *)result + 33) = v4;
    *a4 = 0;
    a4[8] = 0;
    if (v9)
    {
      *(_DWORD *)result = v9;
    }
    else
    {
      v12 = (WTF::StringImpl *)*((_QWORD *)result + 1);
      *((_QWORD *)v8 + 1) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v7);
        else
          *(_DWORD *)v12 -= 2;
      }
      return (WTF *)WTF::fastFree(v8, v7);
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = v13;
    if (v13)
    {
      v11 = *(_DWORD *)v13;
      *(_DWORD *)v13 += 2;
      *(_QWORD *)a4 = v13;
      a4[8] = 1;
      if (v11)
        *(_DWORD *)v13 = v11;
      else
        return (WTF *)WTF::StringImpl::destroy(v13, v10);
    }
    else
    {
      *(_QWORD *)a4 = 0;
      a4[8] = 1;
    }
  }
  return result;
}

WTF *`non-virtual thunk to'WebCore::InspectorCanvasAgent::setShaderProgramHighlighted@<X0>(WebCore::InspectorCanvasAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _BYTE *a4@<X8>)
{
  return WebCore::InspectorCanvasAgent::setShaderProgramHighlighted((WebCore::InspectorCanvasAgent *)((char *)this - 32), a2, a3, a4);
}

WebCore::InspectorCanvas *WebCore::InspectorCanvasAgent::didCreateCanvasRenderingContext(WebCore::InspectorCanvasAgent *this, WebCore::CanvasRenderingContext *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  WebCore::InspectorCanvas *result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;

  if (!*((_DWORD *)this + 19))
    goto LABEL_6;
  v3 = *((unsigned int *)this + 18);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = (_QWORD *)*((_QWORD *)this + 8);
    while (!*v5)
    {
      v5 += 2;
      v4 -= 16;
      if (!v4)
        goto LABEL_6;
    }
  }
  else
  {
    v5 = (_QWORD *)*((_QWORD *)this + 8);
  }
  v8 = *((_QWORD *)this + 8) + 16 * v3;
LABEL_11:
  if (v5 == (_QWORD *)v8)
    goto LABEL_6;
  result = (WebCore::InspectorCanvas *)v5[1];
  if (*(WebCore::CanvasRenderingContext **)(*((_QWORD *)result + 2) + 8) != a2)
  {
    while (1)
    {
      v5 += 2;
      if (v5 == (_QWORD *)v8)
        break;
      if (*v5)
        goto LABEL_11;
    }
LABEL_6:
    result = WebCore::InspectorCanvasAgent::bindCanvas(this, a2, 1);
    if (*((_BYTE *)this + 304))
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v7 = *((_QWORD *)this + 37);
      v13 = 1;
      v12 = v7;
      return (WebCore::InspectorCanvas *)WebCore::InspectorCanvasAgent::startRecording((uint64_t)this, (uint64_t)result, 238, (uint64_t)&v12);
    }
    return result;
  }
  v9 = (*(_DWORD *)result)++;
  if (v9)
  {
    *(_DWORD *)result = v9;
  }
  else
  {
    WebCore::InspectorCanvas::~InspectorCanvas(result, a2);
    return (WebCore::InspectorCanvas *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t WebCore::InspectorCanvasAgent::findInspectorCanvas@<X0>(uint64_t this@<X0>, WebCore::CanvasRenderingContext *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_DWORD *)(this + 76))
  {
    v3 = *(unsigned int *)(this + 72);
    if ((_DWORD)v3)
    {
      v4 = 16 * v3;
      v5 = *(_QWORD **)(this + 64);
      while (!*v5)
      {
        v5 += 2;
        v4 -= 16;
        if (!v4)
          goto LABEL_14;
      }
    }
    else
    {
      v5 = *(_QWORD **)(this + 64);
    }
    v6 = *(_QWORD *)(this + 64) + 16 * v3;
    if (v5 != (_QWORD *)v6)
    {
LABEL_9:
      v7 = v5[1];
      if (*(WebCore::CanvasRenderingContext **)(*(_QWORD *)(v7 + 16) + 8) == a2)
      {
        ++*(_DWORD *)v7;
        goto LABEL_15;
      }
      while (1)
      {
        v5 += 2;
        if (v5 == (_QWORD *)v6)
          break;
        if (*v5)
        {
          v7 = 0;
          if (v5 != (_QWORD *)v6)
            goto LABEL_9;
          goto LABEL_15;
        }
      }
    }
  }
LABEL_14:
  v7 = 0;
LABEL_15:
  *a3 = v7;
  return this;
}

uint64_t WebCore::InspectorCanvasAgent::didChangeCanvasSize(uint64_t this, WebCore::CanvasRenderingContext *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *i;
  uint64_t v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  void *v9;

  if (*(_DWORD *)(this + 76))
  {
    v2 = *(unsigned int *)(this + 72);
    if ((_DWORD)v2)
    {
      v3 = 16 * v2;
      for (i = *(_QWORD **)(this + 64); !*i; i += 2)
      {
        v3 -= 16;
        if (!v3)
          return this;
      }
    }
    else
    {
      i = *(_QWORD **)(this + 64);
    }
    v5 = *(_QWORD *)(this + 64) + 16 * v2;
LABEL_9:
    if (i != (_QWORD *)v5)
    {
      v6 = (_QWORD *)i[1];
      if (*(WebCore::CanvasRenderingContext **)(v6[2] + 8) == a2)
      {
        ++*(_DWORD *)v6;
        this = Inspector::CanvasFrontendDispatcher::canvasSizeChanged(*(Inspector::CanvasFrontendDispatcher **)(this + 56), (const WTF::String *)(v6 + 1), (double)*(int *)(*((_QWORD *)a2 + 4) + 8), (double)*(int *)(*((_QWORD *)a2 + 4) + 12));
        if (*(_DWORD *)v6 == 1)
        {
          WebCore::InspectorCanvas::~InspectorCanvas((WebCore::InspectorCanvas *)v6, v7);
          return WTF::fastFree(v8, v9);
        }
        else
        {
          --*(_DWORD *)v6;
        }
      }
      else
      {
        while (1)
        {
          i += 2;
          if (i == (_QWORD *)v5)
            break;
          if (*i)
            goto LABEL_9;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::InspectorCanvasAgent::didChangeCanvasMemory(uint64_t this, WebCore::CanvasRenderingContext *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *i;
  uint64_t v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  void *v9;

  if (*(_DWORD *)(this + 76))
  {
    v2 = *(unsigned int *)(this + 72);
    if ((_DWORD)v2)
    {
      v3 = 16 * v2;
      for (i = *(_QWORD **)(this + 64); !*i; i += 2)
      {
        v3 -= 16;
        if (!v3)
          return this;
      }
    }
    else
    {
      i = *(_QWORD **)(this + 64);
    }
    v5 = *(_QWORD *)(this + 64) + 16 * v2;
LABEL_9:
    if (i != (_QWORD *)v5)
    {
      v6 = (_QWORD *)i[1];
      if (*(WebCore::CanvasRenderingContext **)(v6[2] + 8) == a2)
      {
        ++*(_DWORD *)v6;
        this = Inspector::CanvasFrontendDispatcher::canvasMemoryChanged(*(Inspector::CanvasFrontendDispatcher **)(this + 56), (const WTF::String *)(v6 + 1), (double)*(unint64_t *)(*((_QWORD *)a2 + 4) + 24));
        if (*(_DWORD *)v6 == 1)
        {
          WebCore::InspectorCanvas::~InspectorCanvas((WebCore::InspectorCanvas *)v6, v7);
          return WTF::fastFree(v8, v9);
        }
        else
        {
          --*(_DWORD *)v6;
        }
      }
      else
      {
        while (1)
        {
          i += 2;
          if (i == (_QWORD *)v5)
            break;
          if (*i)
            goto LABEL_9;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::InspectorCanvasAgent::canvasChanged(WebCore::InspectorCanvasAgent *this, WebCore::CanvasBase *a2, const WebCore::FloatRect *a3)
{
  uint64_t result;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *i;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;

  result = (*(uint64_t (**)(WebCore::CanvasBase *))(*(_QWORD *)a2 + 88))(a2);
  if (result && *((_DWORD *)this + 19))
  {
    v6 = *((unsigned int *)this + 18);
    if ((_DWORD)v6)
    {
      v7 = 16 * v6;
      for (i = (_QWORD *)*((_QWORD *)this + 8); !*i; i += 2)
      {
        v7 -= 16;
        if (!v7)
          return result;
      }
    }
    else
    {
      i = (_QWORD *)*((_QWORD *)this + 8);
    }
    v9 = *((_QWORD *)this + 8) + 16 * v6;
LABEL_10:
    if (i != (_QWORD *)v9)
    {
      v10 = i[1];
      if (*(_QWORD *)(*(_QWORD *)(v10 + 16) + 8) == result)
      {
        ++*(_DWORD *)v10;
        if (*(_BYTE *)(result + 25))
        {
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
          if ((result & 1) == 0)
          {
            result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v10 + 16) + 8) + 80))(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 8));
            if ((result & 1) == 0)
              *(_BYTE *)(v10 + 136) = 1;
          }
        }
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::InspectorCanvas::~InspectorCanvas((WebCore::InspectorCanvas *)v10, v5);
          return WTF::fastFree(v11, v12);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
      else
      {
        while (1)
        {
          i += 2;
          if (i == (_QWORD *)v9)
            break;
          if (*i)
            goto LABEL_10;
        }
      }
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorCanvasAgent::canvasChanged(WebCore::InspectorCanvasAgent *this, WebCore::CanvasBase *a2, const WebCore::FloatRect *a3)
{
  return WebCore::InspectorCanvasAgent::canvasChanged((WebCore::InspectorCanvasAgent *)((char *)this - 40), a2, a3);
}

WTF *WebCore::InspectorCanvasAgent::canvasDestroyed(WebCore::InspectorCanvasAgent *this, WebCore::CanvasBase *a2)
{
  WTF *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  uint64_t v7;
  WebCore::InspectorCanvas *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  void *v11;

  result = (WTF *)(*(uint64_t (**)(WebCore::CanvasBase *))(*(_QWORD *)a2 + 88))(a2);
  if (result && *((_DWORD *)this + 19))
  {
    v4 = *((unsigned int *)this + 18);
    if ((_DWORD)v4)
    {
      v5 = 16 * v4;
      for (i = (_QWORD *)*((_QWORD *)this + 8); !*i; i += 2)
      {
        v5 -= 16;
        if (!v5)
          return result;
      }
    }
    else
    {
      i = (_QWORD *)*((_QWORD *)this + 8);
    }
    v7 = *((_QWORD *)this + 8) + 16 * v4;
LABEL_10:
    if (i != (_QWORD *)v7)
    {
      v8 = (WebCore::InspectorCanvas *)i[1];
      if (*(WTF **)(*((_QWORD *)v8 + 2) + 8) == result)
      {
        ++*(_DWORD *)v8;
        result = WebCore::InspectorCanvasAgent::unbindCanvas(this, v8);
        if (*(_DWORD *)v8 == 1)
        {
          WebCore::InspectorCanvas::~InspectorCanvas(v8, v9);
          return (WTF *)WTF::fastFree(v10, v11);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
      else
      {
        while (1)
        {
          i += 2;
          if (i == (_QWORD *)v7)
            break;
          if (*i)
            goto LABEL_10;
        }
      }
    }
  }
  return result;
}

WTF *WebCore::InspectorCanvasAgent::unbindCanvas(WebCore::InspectorCanvasAgent *this, WebCore::InspectorCanvas *a2)
{
  const WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WebCore::CanvasBase *v15;
  WebCore::ScriptExecutionContext *v16;
  const WTF::StringImpl *v17;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  WTF *v29;
  int v30;
  unsigned int v31;
  int v32;
  char v33;
  WTF::StringImpl *v34;
  WebCore::InspectorCanvas *v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  unsigned int v45;
  WTF::StringImpl **v46;
  unsigned int v47;
  int v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  WebCore::InspectorCanvas **v53;
  uint64_t v54;
  WebCore::InspectorCanvas *v55;
  WebCore::InspectorCanvas *v56;
  WTF::StringImpl *v57;
  WTF *v58;
  void *v59;
  WTF *v60;
  void *v61;
  unsigned int v62;
  BOOL v63;
  WTF::MonotonicTime *v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  _DWORD *v68;
  double v69;
  WTF::StringImpl *v70;
  WTF *result;
  WTF *v72;
  void *v73;
  WebCore::InspectorInstrumentation *v74;
  uint64_t v75;
  WebCore::PageCanvasAgent *v76;
  WTF::StringImpl *v77;
  int v78;
  WTF::StringImpl *v79;
  WTF *v80;
  uint64_t v81;

  WebCore::InspectorCanvasAgent::didFinishRecordingCanvasFrame((uint64_t)this, *(WebCore::CanvasRenderingContext **)(*((_QWORD *)a2 + 2) + 8), 1);
  v80 = 0;
  v81 = 0;
  if (*((_DWORD *)this + 47))
  {
    v5 = *((unsigned int *)this + 46);
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      v7 = *((_QWORD *)this + 22);
      while (!*(_QWORD *)v7)
      {
        v7 += 16;
        v6 -= 16;
        if (!v6)
          goto LABEL_21;
      }
    }
    else
    {
      v7 = *((_QWORD *)this + 22);
    }
    v8 = *((_QWORD *)this + 22) + 16 * v5;
    if (v7 != v8)
    {
      v9 = 0;
      v10 = 0;
LABEL_10:
      v11 = *(_QWORD *)(v7 + 8);
      if (*(WebCore::InspectorCanvas **)(v11 + 16) == a2)
      {
        v79 = *(WTF::StringImpl **)(v7 + 8);
        if (v10 == (_DWORD)v81)
        {
          v12 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v80, v10 + 1, (unint64_t)&v79);
          v10 = HIDWORD(v81);
          v9 = v80;
          *((_QWORD *)v80 + HIDWORD(v81)) = *(_QWORD *)v12;
        }
        else
        {
          *((_QWORD *)v9 + v10) = v11;
        }
        HIDWORD(v81) = ++v10;
      }
      while (1)
      {
        v7 += 16;
        if (v7 == v8)
          break;
        if (*(_QWORD *)v7)
        {
          if (v7 != v8)
            goto LABEL_10;
          break;
        }
      }
      if (v10)
      {
        v13 = 8 * v10;
        do
        {
          v14 = *(WTF::StringImpl **)v9;
          v9 = (WTF *)((char *)v9 + 8);
          WebCore::InspectorCanvasAgent::unbindProgram((uint64_t)this, v14, v4);
          v13 -= 8;
        }
        while (v13);
      }
    }
  }
LABEL_21:
  v15 = *(WebCore::CanvasBase **)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 8) + 32);
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)v15 + 80, (_QWORD *)this + 5);
  if ((*(unsigned int (**)(char *))(*((_QWORD *)this + 5) + 16))((char *)this + 40))
  {
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v74 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(WebCore::CanvasBase *))(*(_QWORD *)v15
                                                                                                  + 144))(v15);
      if (v74)
      {
        v75 = WebCore::InspectorInstrumentation::instrumentingAgents(v74, v16);
        if (v75)
        {
          v76 = *(WebCore::PageCanvasAgent **)(v75 + 104);
          if (v76)
            WebCore::PageCanvasAgent::didChangeCSSCanvasClientNodes(v76, v15);
        }
      }
    }
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  if (v19)
    *(_DWORD *)v19 += 2;
  v79 = v19;
  v21 = (uint64_t *)((char *)this + 64);
  v20 = *((_QWORD *)this + 8);
  v22 = *((unsigned int *)this + 18);
  if (v20)
  {
    v23 = v22 - 1;
    v24 = *((_DWORD *)this + 20);
    v25 = *((_DWORD *)v19 + 4);
    if (v25 < 0x100)
    {
      v26 = WTF::StringImpl::hashSlowCase(v19);
      v20 = *v21;
    }
    else
    {
      v26 = v25 >> 8;
    }
    v28 = (v26 ^ v24) & v23;
    v27 = v20 + 16 * v28;
    v29 = *(WTF **)v27;
    if (*(_QWORD *)v27)
    {
      v30 = -1;
      while (1)
      {
        v31 = *((_DWORD *)v29 + 4);
        v32 = v31 < 0x100 ? WTF::StringImpl::hashSlowCase(v29) : v31 >> 8;
        if (++v30 > ((v28 + v22 - ((v32 ^ v24) & v23)) & v23))
          break;
        if (v32 == v26)
        {
          v33 = WTF::equal(*(WTF **)v27, v19, v17);
          v20 = *v21;
          if ((v33 & 1) != 0)
          {
            v22 = *((unsigned int *)this + 18);
            goto LABEL_44;
          }
        }
        else
        {
          v20 = *v21;
        }
        v28 = (v28 + 1) & v23;
        v27 = v20 + 16 * v28;
        v29 = *(WTF **)v27;
        if (!*(_QWORD *)v27)
          goto LABEL_43;
      }
      v20 = *v21;
    }
LABEL_43:
    v22 = *((unsigned int *)this + 18);
    v27 = v20 + 16 * v22;
  }
  else
  {
    v27 = 16 * v22;
  }
LABEL_44:
  if (v20 + 16 * v22 != v27)
  {
    v34 = *(WTF::StringImpl **)v27;
    *(_QWORD *)v27 = -1;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v16);
      else
        *(_DWORD *)v34 -= 2;
    }
    v35 = *(WebCore::InspectorCanvas **)(v27 + 8);
    *(_QWORD *)(v27 + 8) = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 1)
      {
        WebCore::InspectorCanvas::~InspectorCanvas(v35, v16);
        WTF::fastFree(v72, v73);
      }
      else
      {
        --*(_DWORD *)v35;
      }
    }
    v77 = v19;
    *(_QWORD *)v27 = 0;
    *(_QWORD *)(v27 + 8) = 0;
    v36 = *((_DWORD *)this + 18);
    v37 = *((_DWORD *)this + 19) - 1;
    *((_DWORD *)this + 19) = v37;
    v38 = v36 - 1;
    v39 = *((_QWORD *)this + 8);
    v40 = (unint64_t)(v27 - v39) >> 4;
    v41 = ((_DWORD)v40 + 1) & (v36 - 1);
    v42 = v39 + 16 * v41;
    v43 = *(WTF::StringImpl **)v42;
    if (*(_QWORD *)v42)
    {
      v78 = *((_DWORD *)this + 20);
      v44 = ((unint64_t)(v27 - v39) >> 4);
      v45 = (v40 + 1) & v38;
      v46 = (WTF::StringImpl **)(v39 + 16 * v40);
      do
      {
        v47 = *((_DWORD *)v43 + 4);
        if (v47 < 0x100)
          v48 = WTF::StringImpl::hashSlowCase(v43);
        else
          v48 = v47 >> 8;
        if (((v45 + v36 - ((v48 ^ v78) & v38)) & v38) == 0)
          break;
        v49 = *(WTF::StringImpl **)v42;
        *(_QWORD *)v42 = 0;
        v50 = *v46;
        *v46 = v49;
        if (v50)
        {
          if (*(_DWORD *)v50 == 2)
            WTF::StringImpl::destroy(v50, v16);
          else
            *(_DWORD *)v50 -= 2;
        }
        v51 = v39 + 16 * v44;
        v52 = v39 + 16 * v41;
        v54 = *(_QWORD *)(v52 + 8);
        v53 = (WebCore::InspectorCanvas **)(v52 + 8);
        *v53 = 0;
        v55 = *(WebCore::InspectorCanvas **)(v51 + 8);
        *(_QWORD *)(v51 + 8) = v54;
        if (v55)
        {
          if (*(_DWORD *)v55 == 1)
          {
            WebCore::InspectorCanvas::~InspectorCanvas(v55, v16);
            WTF::fastFree(v58, v59);
          }
          else
          {
            --*(_DWORD *)v55;
          }
        }
        v56 = *v53;
        *v53 = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 1)
          {
            WebCore::InspectorCanvas::~InspectorCanvas(v56, v16);
            WTF::fastFree(v60, v61);
          }
          else
          {
            --*(_DWORD *)v56;
          }
        }
        v57 = *(WTF::StringImpl **)v42;
        *(_QWORD *)v42 = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 == 2)
            WTF::StringImpl::destroy(v57, v16);
          else
            *(_DWORD *)v57 -= 2;
        }
        *(_QWORD *)v42 = 0;
        *(_QWORD *)(v42 + 8) = 0;
        v41 = (v45 + 1) & v38;
        v39 = *v21;
        v44 = v45;
        v46 = (WTF::StringImpl **)(*v21 + 16 * v45);
        v42 = *v21 + 16 * v41;
        v43 = *(WTF::StringImpl **)v42;
        v45 = (v45 + 1) & v38;
      }
      while (*(_QWORD *)v42);
      v36 = *((_DWORD *)this + 18);
      v37 = *((_DWORD *)this + 19);
    }
    v62 = 6 * v37;
    v63 = v36 < 9 || v62 >= v36;
    v19 = v77;
    if (!v63)
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorCanvas,WTF::RawPtrTraits<WebCore::InspectorCanvas>,WTF::DefaultRefDerefTraits<WebCore::InspectorCanvas>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorCanvas,WTF::RawPtrTraits<WebCore::InspectorCanvas>,WTF::DefaultRefDerefTraits<WebCore::InspectorCanvas>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::InspectorCanvas,WTF::RawPtrTraits<WebCore::InspectorCanvas>,WTF::DefaultRefDerefTraits<WebCore::InspectorCanvas>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::InspectorCanvas,WTF::RawPtrTraits<WebCore::InspectorCanvas>,WTF::DefaultRefDerefTraits<WebCore::InspectorCanvas>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash((uint64_t *)this + 8, v36 >> 1);
  }
  v64 = (WebCore::InspectorCanvasAgent *)((char *)this + 104);
  v65 = *((unsigned int *)this + 29);
  if ((_DWORD)v65 == *((_DWORD *)this + 28))
  {
    v64 = (WTF::MonotonicTime *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v64, v65 + 1, (unint64_t)&v79);
    v65 = *((unsigned int *)this + 29);
    v66 = *((_QWORD *)this + 13);
    v67 = *(_DWORD **)v64;
    if (*(_QWORD *)v64)
      *v67 += 2;
    *(_QWORD *)(v66 + 8 * v65) = v67;
  }
  else
  {
    v68 = *(_DWORD **)v64;
    if (v19)
      *(_DWORD *)v19 += 2;
    *(_QWORD *)&v68[2 * v65] = v19;
  }
  *((_DWORD *)this + 29) = v65 + 1;
  if ((*((_QWORD *)this + 19) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*((_QWORD *)this + 19) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    *((_QWORD *)this + 18) = 0;
    WTF::MonotonicTime::now(v64);
    WebCore::TimerBase::setNextFireTime((uint64_t)this + 120, v69 + 0.0);
  }
  v70 = v79;
  v79 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
      WTF::StringImpl::destroy(v70, v16);
    else
      *(_DWORD *)v70 -= 2;
  }
  result = v80;
  if (v80)
    return (WTF *)WTF::fastFree(v80, v16);
  return result;
}

WTF *`non-virtual thunk to'WebCore::InspectorCanvasAgent::canvasDestroyed(WebCore::InspectorCanvasAgent *this, WebCore::CanvasBase *a2)
{
  return WebCore::InspectorCanvasAgent::canvasDestroyed((WebCore::InspectorCanvasAgent *)((char *)this - 40), a2);
}

uint64_t WebCore::InspectorCanvasAgent::consoleStartRecordingCanvas(uint64_t this, WebCore::CanvasRenderingContext *a2, JSC::JSGlobalObject *a3, JSC::JSObject *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;
  uint64_t v10;
  WebCore::InspectorCanvas *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  double v14;
  _BOOL4 v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  double v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  double v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF *v31;
  void *v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  int *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  WTF::StringImpl *v43;
  char v44;
  WTF::StringImpl *v45;

  if (*(_DWORD *)(this + 76))
  {
    v6 = this;
    v7 = *(unsigned int *)(this + 72);
    if ((_DWORD)v7)
    {
      v8 = 16 * v7;
      for (i = *(_QWORD **)(this + 64); !*i; i += 2)
      {
        v8 -= 16;
        if (!v8)
          return this;
      }
    }
    else
    {
      i = *(_QWORD **)(this + 64);
    }
    v10 = *(_QWORD *)(this + 64) + 16 * v7;
LABEL_9:
    if (i != (_QWORD *)v10)
    {
      v11 = (WebCore::InspectorCanvas *)i[1];
      if (*(WebCore::CanvasRenderingContext **)(*((_QWORD *)v11 + 2) + 8) != a2)
      {
        while (1)
        {
          i += 2;
          if (i == (_QWORD *)v10)
            return this;
          if (*i)
            goto LABEL_9;
        }
      }
      ++*(_DWORD *)v11;
      LOBYTE(v39) = 0;
      v40 = 0;
      LOBYTE(v41) = 0;
      v42 = 0;
      LOBYTE(v43) = 0;
      v44 = 0;
      if (!a4)
        goto LABEL_58;
      WTF::AtomStringImpl::addLiteral();
      v13 = JSC::JSObject::get(a4, a3, (unint64_t)v45);
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
          WTF::StringImpl::destroy(v45, v12);
        else
          *(_DWORD *)v45 -= 2;
      }
      if (!v13)
      {
LABEL_24:
        WTF::AtomStringImpl::addLiteral();
        v16 = v45;
        v17 = (WTF::StringImpl *)JSC::JSObject::get(a4, a3, (unint64_t)v45);
        v45 = v17;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v18);
          else
            *(_DWORD *)v16 -= 2;
          v17 = v45;
        }
        if (v17)
        {
          if ((unint64_t)v17 >= 0xFFFE000000000000)
          {
            v19 = (double)(int)v17;
          }
          else if ((unint64_t)v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          {
            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v45, a3);
          }
          else
          {
            *(_QWORD *)&v19 = (char *)v17 - 0x2000000000000;
          }
          v40 = 1;
          v39 = (uint64_t)v19;
        }
        WTF::AtomStringImpl::addLiteral();
        v20 = v45;
        v21 = (WTF::StringImpl *)JSC::JSObject::get(a4, a3, (unint64_t)v45);
        v23 = (unint64_t)v21;
        v45 = v21;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
          {
            WTF::StringImpl::destroy(v20, v22);
            if (!v23)
              goto LABEL_41;
            goto LABEL_37;
          }
          *(_DWORD *)v20 -= 2;
        }
        if (!v21)
          goto LABEL_41;
LABEL_37:
        if (v23 >= 0xFFFE000000000000)
        {
          v24 = (double)(int)v23;
        }
        else if (v23 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v45, a3);
        }
        else
        {
          *(_QWORD *)&v24 = v23 - 0x2000000000000;
        }
        v42 = 1;
        v41 = (uint64_t)v24;
LABEL_41:
        WTF::AtomStringImpl::addLiteral();
        v25 = v45;
        v26 = JSC::JSObject::get(a4, a3, (unint64_t)v45);
        v28 = v26;
        v38 = v26;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
          {
            WTF::StringImpl::destroy(v25, v27);
            if (v28)
              goto LABEL_45;
            goto LABEL_58;
          }
          *(_DWORD *)v25 -= 2;
        }
        if (v26)
        {
LABEL_45:
          if ((v28 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v28 + 5) != 2)
          {
            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v38, a3);
            v29 = v45;
          }
          else
          {
            v29 = *(WTF::StringImpl **)(v28 + 8);
            if ((v29 & 1) == 0)
            {
              if (!v29)
                goto LABEL_50;
              goto LABEL_49;
            }
            v29 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v28, a3);
            if (v29)
LABEL_49:
              *(_DWORD *)v29 += 2;
          }
LABEL_50:
          v43 = v29;
          v44 = 1;
          this = WebCore::InspectorCanvasAgent::startRecording(v6, (uint64_t)v11, 237, (uint64_t)&v39);
          v43 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              this = WTF::StringImpl::destroy(v29, v30);
            else
              *(_DWORD *)v29 -= 2;
          }
          goto LABEL_59;
        }
LABEL_58:
        this = WebCore::InspectorCanvasAgent::startRecording(v6, (uint64_t)v11, 237, (uint64_t)&v39);
LABEL_59:
        if (*(_DWORD *)v11 == 1)
        {
          WebCore::InspectorCanvas::~InspectorCanvas(v11, v30);
          return WTF::fastFree(v31, v32);
        }
        else
        {
          --*(_DWORD *)v11;
        }
        return this;
      }
      if (v13 >= 0xFFFE000000000000)
      {
        v33 = (_DWORD)v13 == 0;
        goto LABEL_84;
      }
      *(_QWORD *)&v14 = v13 - 0x2000000000000;
      if (v13 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        if (v14 <= 0.0)
        {
          v15 = v14 < 0.0;
          goto LABEL_23;
        }
      }
      else
      {
        if ((v13 & 0xFFFE000000000002) != 0)
        {
          v15 = v13 == 7;
LABEL_23:
          v40 = 1;
          v39 = v15;
          goto LABEL_24;
        }
        v34 = *(unsigned __int8 *)(v13 + 5);
        if (v34 == 3)
        {
          v37 = *(_DWORD *)(v13 + 8);
LABEL_80:
          v33 = v37 == 0;
          goto LABEL_84;
        }
        if (v34 == 2)
        {
          v35 = *(_QWORD *)(v13 + 8);
          if ((v35 & 1) != 0)
            v36 = (int *)(v13 + 16);
          else
            v36 = (int *)(v35 + 4);
          v37 = *v36;
          goto LABEL_80;
        }
        if ((*(_BYTE *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0xA) & 1) != 0)
        {
          v33 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x28) == (_QWORD)a3;
LABEL_84:
          v15 = !v33;
          goto LABEL_23;
        }
      }
      v15 = 1;
      goto LABEL_23;
    }
  }
  return this;
}

uint64_t WebCore::InspectorCanvasAgent::didEnableExtension(uint64_t this, WebCore::WebGLRenderingContextBase *a2, const WTF::String *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *i;
  uint64_t v6;
  _QWORD *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  void *v10;

  if (*(_DWORD *)(this + 76))
  {
    v3 = *(unsigned int *)(this + 72);
    if ((_DWORD)v3)
    {
      v4 = 16 * v3;
      for (i = *(_QWORD **)(this + 64); !*i; i += 2)
      {
        v4 -= 16;
        if (!v4)
          return this;
      }
    }
    else
    {
      i = *(_QWORD **)(this + 64);
    }
    v6 = *(_QWORD *)(this + 64) + 16 * v3;
    if (i != (_QWORD *)v6)
    {
LABEL_9:
      v7 = (_QWORD *)i[1];
      if (*(WebCore::WebGLRenderingContextBase **)(v7[2] + 8) == (WebCore::WebGLRenderingContextBase *)((char *)a2 + 8))
      {
        ++*(_DWORD *)v7;
        this = Inspector::CanvasFrontendDispatcher::extensionEnabled(*(Inspector::CanvasFrontendDispatcher **)(this + 56), (const WTF::String *)(v7 + 1), a3);
        if (*(_DWORD *)v7 == 1)
        {
          WebCore::InspectorCanvas::~InspectorCanvas((WebCore::InspectorCanvas *)v7, v8);
          return WTF::fastFree(v9, v10);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
      else
      {
        while (1)
        {
          i += 2;
          if (i == (_QWORD *)v6)
            break;
          if (*i)
          {
            if (i != (_QWORD *)v6)
              goto LABEL_9;
            return this;
          }
        }
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::InspectorCanvasAgent::willDestroyWebGLProgram(WTF::StringImpl *this, WebCore::WebGLProgram *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *i;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  if (*((_DWORD *)this + 47))
  {
    v3 = *((unsigned int *)this + 46);
    if ((_DWORD)v3)
    {
      v4 = 16 * v3;
      for (i = (_QWORD *)*((_QWORD *)this + 22); !*i; i += 2)
      {
        v4 -= 16;
        if (!v4)
          return this;
      }
    }
    else
    {
      i = (_QWORD *)*((_QWORD *)this + 22);
    }
    v6 = *((_QWORD *)this + 22) + 16 * v3;
LABEL_9:
    if (i != (_QWORD *)v6)
    {
      v7 = (WTF::StringImpl **)i[1];
      if (v7[3] == a2)
      {
        ++*(_DWORD *)v7;
        this = WebCore::InspectorCanvasAgent::unbindProgram((uint64_t)this, (WTF::StringImpl *)v7, a3);
        if (*(_DWORD *)v7 == 1)
        {
          v9 = v7[1];
          v7[1] = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
              WTF::StringImpl::destroy(v9, v8);
            else
              *(_DWORD *)v9 -= 2;
          }
          return (WTF::StringImpl *)WTF::fastFree((WTF *)v7, v8);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
      else
      {
        while (1)
        {
          i += 2;
          if (i == (_QWORD *)v6)
            break;
          if (*i)
            goto LABEL_9;
        }
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::InspectorCanvasAgent::unbindProgram(uint64_t a1, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  WTF *v14;
  int v15;
  unsigned int v16;
  int v17;
  char v18;
  WTF::StringImpl *v19;
  WTF *v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  WTF::StringImpl **v33;
  unsigned int v34;
  int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  WTF **v40;
  uint64_t v41;
  WTF *v42;
  WTF *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  unsigned int v47;
  BOOL v48;
  WTF::MonotonicTime *v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD *v53;
  double v54;
  WTF::StringImpl *result;
  WTF::StringImpl *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;

  v3 = a1;
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  if (v4)
    *(_DWORD *)v4 += 2;
  v59 = v4;
  v6 = (uint64_t *)(a1 + 176);
  v5 = *(_QWORD *)(a1 + 176);
  v7 = *(unsigned int *)(a1 + 184);
  if (v5)
  {
    v8 = v7 - 1;
    v9 = *(_DWORD *)(a1 + 192);
    v10 = *((_DWORD *)v4 + 4);
    if (v10 < 0x100)
    {
      v11 = WTF::StringImpl::hashSlowCase(v4);
      v5 = *v6;
    }
    else
    {
      v11 = v10 >> 8;
    }
    v13 = (v11 ^ v9) & v8;
    v12 = v5 + 16 * v13;
    v14 = *(WTF **)v12;
    if (*(_QWORD *)v12)
    {
      v15 = -1;
      while (1)
      {
        v16 = *((_DWORD *)v14 + 4);
        v17 = v16 < 0x100 ? WTF::StringImpl::hashSlowCase(v14) : v16 >> 8;
        if (++v15 > ((v13 + v7 - ((v17 ^ v9) & v8)) & v8))
          break;
        if (v17 == v11)
        {
          v18 = WTF::equal(*(WTF **)v12, v4, a3);
          v5 = *v6;
          if ((v18 & 1) != 0)
          {
            v7 = *(unsigned int *)(v3 + 184);
            goto LABEL_22;
          }
        }
        else
        {
          v5 = *v6;
        }
        v13 = (v13 + 1) & v8;
        v12 = v5 + 16 * v13;
        v14 = *(WTF **)v12;
        if (!*(_QWORD *)v12)
          goto LABEL_21;
      }
      v5 = *v6;
    }
LABEL_21:
    v7 = *(unsigned int *)(v3 + 184);
    v12 = v5 + 16 * v7;
  }
  else
  {
    v12 = 16 * v7;
  }
LABEL_22:
  if (v5 + 16 * v7 != v12)
  {
    v19 = *(WTF::StringImpl **)v12;
    *(_QWORD *)v12 = -1;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, a2);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = *(WTF **)(v12 + 8);
    *(_QWORD *)(v12 + 8) = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
      {
        v56 = (WTF::StringImpl *)*((_QWORD *)v20 + 1);
        *((_QWORD *)v20 + 1) = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2)
            WTF::StringImpl::destroy(v56, a2);
          else
            *(_DWORD *)v56 -= 2;
        }
        WTF::fastFree(v20, a2);
      }
      else
      {
        --*(_DWORD *)v20;
      }
    }
    v58 = v4;
    *(_QWORD *)v12 = 0;
    *(_QWORD *)(v12 + 8) = 0;
    v21 = *(_DWORD *)(v3 + 184);
    v22 = *(_DWORD *)(v3 + 188) - 1;
    *(_DWORD *)(v3 + 188) = v22;
    v23 = v21 - 1;
    v24 = *(_QWORD *)(v3 + 176);
    v25 = v12 - v24;
    v26 = (unint64_t)(v12 - v24) >> 4;
    v27 = ((_DWORD)v26 + 1) & (v21 - 1);
    v28 = v24 + 16 * v27;
    v29 = *(WTF::StringImpl **)v28;
    if (*(_QWORD *)v28)
    {
      v57 = v3;
      v30 = *(_DWORD *)(v3 + 192);
      v31 = (v25 >> 4);
      v32 = (v26 + 1) & v23;
      v33 = (WTF::StringImpl **)(v24 + 16 * v26);
      do
      {
        v34 = *((_DWORD *)v29 + 4);
        if (v34 < 0x100)
          v35 = WTF::StringImpl::hashSlowCase(v29);
        else
          v35 = v34 >> 8;
        if (((v32 + v21 - ((v35 ^ v30) & v23)) & v23) == 0)
          break;
        v36 = *(WTF::StringImpl **)v28;
        *(_QWORD *)v28 = 0;
        v37 = *v33;
        *v33 = v36;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, a2);
          else
            *(_DWORD *)v37 -= 2;
        }
        v38 = v24 + 16 * v31;
        v39 = v24 + 16 * v27;
        v41 = *(_QWORD *)(v39 + 8);
        v40 = (WTF **)(v39 + 8);
        *v40 = 0;
        v42 = *(WTF **)(v38 + 8);
        *(_QWORD *)(v38 + 8) = v41;
        if (v42)
        {
          if (*(_DWORD *)v42 == 1)
          {
            v45 = (WTF::StringImpl *)*((_QWORD *)v42 + 1);
            *((_QWORD *)v42 + 1) = 0;
            if (v45)
            {
              if (*(_DWORD *)v45 == 2)
                WTF::StringImpl::destroy(v45, a2);
              else
                *(_DWORD *)v45 -= 2;
            }
            WTF::fastFree(v42, a2);
          }
          else
          {
            --*(_DWORD *)v42;
          }
        }
        v43 = *v40;
        *v40 = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 1)
          {
            v46 = (WTF::StringImpl *)*((_QWORD *)v43 + 1);
            *((_QWORD *)v43 + 1) = 0;
            if (v46)
            {
              if (*(_DWORD *)v46 == 2)
                WTF::StringImpl::destroy(v46, a2);
              else
                *(_DWORD *)v46 -= 2;
            }
            WTF::fastFree(v43, a2);
          }
          else
          {
            --*(_DWORD *)v43;
          }
        }
        v44 = *(WTF::StringImpl **)v28;
        *(_QWORD *)v28 = 0;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2)
            WTF::StringImpl::destroy(v44, a2);
          else
            *(_DWORD *)v44 -= 2;
        }
        *(_QWORD *)v28 = 0;
        *(_QWORD *)(v28 + 8) = 0;
        v27 = (v32 + 1) & v23;
        v24 = *v6;
        v31 = v32;
        v33 = (WTF::StringImpl **)(*v6 + 16 * v32);
        v28 = *v6 + 16 * v27;
        v29 = *(WTF::StringImpl **)v28;
        v32 = (v32 + 1) & v23;
      }
      while (*(_QWORD *)v28);
      v3 = v57;
      v21 = *(_DWORD *)(v57 + 184);
      v22 = *(_DWORD *)(v57 + 188);
    }
    v47 = 6 * v22;
    v48 = v21 < 9 || v47 >= v21;
    v4 = v58;
    if (!v48)
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorShaderProgram,WTF::RawPtrTraits<WebCore::InspectorShaderProgram>,WTF::DefaultRefDerefTraits<WebCore::InspectorShaderProgram>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorShaderProgram,WTF::RawPtrTraits<WebCore::InspectorShaderProgram>,WTF::DefaultRefDerefTraits<WebCore::InspectorShaderProgram>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::InspectorShaderProgram,WTF::RawPtrTraits<WebCore::InspectorShaderProgram>,WTF::DefaultRefDerefTraits<WebCore::InspectorShaderProgram>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::InspectorShaderProgram,WTF::RawPtrTraits<WebCore::InspectorShaderProgram>,WTF::DefaultRefDerefTraits<WebCore::InspectorShaderProgram>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(v6, v21 >> 1);
  }
  v49 = (WTF::MonotonicTime *)(v3 + 200);
  v50 = *(unsigned int *)(v3 + 212);
  if ((_DWORD)v50 == *(_DWORD *)(v3 + 208))
  {
    v49 = (WTF::MonotonicTime *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v49, v50 + 1, (unint64_t)&v59);
    v50 = *(unsigned int *)(v3 + 212);
    v51 = *(_QWORD *)(v3 + 200);
    v52 = *(_DWORD **)v49;
    if (*(_QWORD *)v49)
      *v52 += 2;
    *(_QWORD *)(v51 + 8 * v50) = v52;
  }
  else
  {
    v53 = *(_DWORD **)v49;
    if (v4)
      *(_DWORD *)v4 += 2;
    *(_QWORD *)&v53[2 * v50] = v4;
  }
  *(_DWORD *)(v3 + 212) = v50 + 1;
  if ((*(_QWORD *)(v3 + 248) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*(_QWORD *)(v3 + 248) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    *(_QWORD *)(v3 + 240) = 0;
    WTF::MonotonicTime::now(v49);
    WebCore::TimerBase::setNextFireTime(v3 + 216, v54 + 0.0);
  }
  result = v59;
  v59 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

BOOL WebCore::InspectorCanvasAgent::isWebGLProgramDisabled(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *i;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  int v9;
  WTF::StringImpl *v10;
  uint64_t v11;

  if (!*(_DWORD *)(a1 + 188))
    return 0;
  v2 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v2)
  {
    v3 = 16 * v2;
    for (i = *(_QWORD **)(a1 + 176); !*i; i += 2)
    {
      v3 -= 16;
      if (!v3)
        return 0;
    }
  }
  else
  {
    i = *(_QWORD **)(a1 + 176);
  }
  v5 = *(_QWORD *)(a1 + 176) + 16 * v2;
  if (i == (_QWORD *)v5)
    return 0;
LABEL_9:
  v6 = i[1];
  if (*(WTF::StringImpl **)(v6 + 24) != a2)
  {
    while (1)
    {
      i += 2;
      if (i == (_QWORD *)v5)
        return 0;
      if (*i)
      {
        v7 = 0;
        if (i != (_QWORD *)v5)
          goto LABEL_9;
        return v7;
      }
    }
  }
  v9 = (*(_DWORD *)v6)++;
  v7 = *(_BYTE *)(v6 + 32) != 0;
  if (v9)
  {
    *(_DWORD *)v6 = v9;
  }
  else
  {
    v10 = *(WTF::StringImpl **)(v6 + 8);
    *(_QWORD *)(v6 + 8) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        v11 = v6;
        WTF::StringImpl::destroy(v10, a2);
        v6 = v11;
      }
      else
      {
        *(_DWORD *)v10 -= 2;
      }
    }
    WTF::fastFree((WTF *)v6, a2);
  }
  return v7;
}

BOOL WebCore::InspectorCanvasAgent::isWebGLProgramHighlighted(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *i;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  int v9;
  WTF::StringImpl *v10;
  uint64_t v11;

  if (!*(_DWORD *)(a1 + 188))
    return 0;
  v2 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v2)
  {
    v3 = 16 * v2;
    for (i = *(_QWORD **)(a1 + 176); !*i; i += 2)
    {
      v3 -= 16;
      if (!v3)
        return 0;
    }
  }
  else
  {
    i = *(_QWORD **)(a1 + 176);
  }
  v5 = *(_QWORD *)(a1 + 176) + 16 * v2;
  if (i == (_QWORD *)v5)
    return 0;
LABEL_9:
  v6 = i[1];
  if (*(WTF::StringImpl **)(v6 + 24) != a2)
  {
    while (1)
    {
      i += 2;
      if (i == (_QWORD *)v5)
        return 0;
      if (*i)
      {
        v7 = 0;
        if (i != (_QWORD *)v5)
          goto LABEL_9;
        return v7;
      }
    }
  }
  v9 = (*(_DWORD *)v6)++;
  v7 = *(_BYTE *)(v6 + 33) != 0;
  if (v9)
  {
    *(_DWORD *)v6 = v9;
  }
  else
  {
    v10 = *(WTF::StringImpl **)(v6 + 8);
    *(_QWORD *)(v6 + 8) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        v11 = v6;
        WTF::StringImpl::destroy(v10, a2);
        v6 = v11;
      }
      else
      {
        *(_DWORD *)v10 -= 2;
      }
    }
    WTF::fastFree((WTF *)v6, a2);
  }
  return v7;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  uint64_t result;
  uint64_t v8;
  WebCore::InspectorCanvas *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  void *v12;

  if (!*(_DWORD *)(a1 + 76))
    return WebCore::InspectorCanvas::processArgument(0, a3, a4);
  v4 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    for (i = *(_QWORD **)(a1 + 64); !*i; i += 2)
    {
      v5 -= 16;
      if (!v5)
        return WebCore::InspectorCanvas::processArgument(0, a3, a4);
    }
  }
  else
  {
    i = *(_QWORD **)(a1 + 64);
  }
  v8 = *(_QWORD *)(a1 + 64) + 16 * v4;
LABEL_9:
  if (i == (_QWORD *)v8)
    return WebCore::InspectorCanvas::processArgument(0, a3, a4);
  v9 = (WebCore::InspectorCanvas *)i[1];
  if (*(_QWORD *)(*((_QWORD *)v9 + 2) + 8) != a2)
  {
    while (1)
    {
      i += 2;
      if (i == (_QWORD *)v8)
        return WebCore::InspectorCanvas::processArgument(0, a3, a4);
      if (*i)
        goto LABEL_9;
    }
  }
  ++*(_DWORD *)v9;
  result = WebCore::InspectorCanvas::processArgument((uint64_t)v9, a3, a4);
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v9, v10);
    return WTF::fastFree(v11, v12);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  uint64_t result;
  uint64_t v8;
  WebCore::InspectorCanvas *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  void *v12;

  if (!*(_DWORD *)(a1 + 76))
    return WebCore::InspectorCanvas::processArgument(0, a3, a4);
  v4 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    for (i = *(_QWORD **)(a1 + 64); !*i; i += 2)
    {
      v5 -= 16;
      if (!v5)
        return WebCore::InspectorCanvas::processArgument(0, a3, a4);
    }
  }
  else
  {
    i = *(_QWORD **)(a1 + 64);
  }
  v8 = *(_QWORD *)(a1 + 64) + 16 * v4;
LABEL_9:
  if (i == (_QWORD *)v8)
    return WebCore::InspectorCanvas::processArgument(0, a3, a4);
  v9 = (WebCore::InspectorCanvas *)i[1];
  if (*(_QWORD *)(*((_QWORD *)v9 + 2) + 8) != a2)
  {
    while (1)
    {
      i += 2;
      if (i == (_QWORD *)v8)
        return WebCore::InspectorCanvas::processArgument(0, a3, a4);
      if (*i)
        goto LABEL_9;
    }
  }
  ++*(_DWORD *)v9;
  result = WebCore::InspectorCanvas::processArgument((uint64_t)v9, a3, a4);
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v9, v10);
    return WTF::fastFree(v11, v12);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  uint64_t result;
  uint64_t v8;
  WebCore::InspectorCanvas *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  void *v12;

  if (!*(_DWORD *)(a1 + 76))
    return WebCore::InspectorCanvas::processArgument(0, a3, a4);
  v4 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    for (i = *(_QWORD **)(a1 + 64); !*i; i += 2)
    {
      v5 -= 16;
      if (!v5)
        return WebCore::InspectorCanvas::processArgument(0, a3, a4);
    }
  }
  else
  {
    i = *(_QWORD **)(a1 + 64);
  }
  v8 = *(_QWORD *)(a1 + 64) + 16 * v4;
LABEL_9:
  if (i == (_QWORD *)v8)
    return WebCore::InspectorCanvas::processArgument(0, a3, a4);
  v9 = (WebCore::InspectorCanvas *)i[1];
  if (*(_QWORD *)(*((_QWORD *)v9 + 2) + 8) != a2)
  {
    while (1)
    {
      i += 2;
      if (i == (_QWORD *)v8)
        return WebCore::InspectorCanvas::processArgument(0, a3, a4);
      if (*i)
        goto LABEL_9;
    }
  }
  ++*(_DWORD *)v9;
  result = WebCore::InspectorCanvas::processArgument((uint64_t)v9, a3, a4);
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v9, v10);
    return WTF::fastFree(v11, v12);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  uint64_t result;
  uint64_t v8;
  WebCore::InspectorCanvas *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  void *v12;

  if (!*(_DWORD *)(a1 + 76))
    return WebCore::InspectorCanvas::processArgument(0, a3, a4);
  v4 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    for (i = *(_QWORD **)(a1 + 64); !*i; i += 2)
    {
      v5 -= 16;
      if (!v5)
        return WebCore::InspectorCanvas::processArgument(0, a3, a4);
    }
  }
  else
  {
    i = *(_QWORD **)(a1 + 64);
  }
  v8 = *(_QWORD *)(a1 + 64) + 16 * v4;
LABEL_9:
  if (i == (_QWORD *)v8)
    return WebCore::InspectorCanvas::processArgument(0, a3, a4);
  v9 = (WebCore::InspectorCanvas *)i[1];
  if (*(_QWORD *)(*((_QWORD *)v9 + 2) + 8) != a2)
  {
    while (1)
    {
      i += 2;
      if (i == (_QWORD *)v8)
        return WebCore::InspectorCanvas::processArgument(0, a3, a4);
      if (*i)
        goto LABEL_9;
    }
  }
  ++*(_DWORD *)v9;
  result = WebCore::InspectorCanvas::processArgument((uint64_t)v9, a3, a4);
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v9, v10);
    return WTF::fastFree(v11, v12);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  uint64_t result;
  uint64_t v8;
  WebCore::InspectorCanvas *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  void *v12;

  if (!*(_DWORD *)(a1 + 76))
    return WebCore::InspectorCanvas::processArgument(0, a3, a4);
  v4 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    for (i = *(_QWORD **)(a1 + 64); !*i; i += 2)
    {
      v5 -= 16;
      if (!v5)
        return WebCore::InspectorCanvas::processArgument(0, a3, a4);
    }
  }
  else
  {
    i = *(_QWORD **)(a1 + 64);
  }
  v8 = *(_QWORD *)(a1 + 64) + 16 * v4;
LABEL_9:
  if (i == (_QWORD *)v8)
    return WebCore::InspectorCanvas::processArgument(0, a3, a4);
  v9 = (WebCore::InspectorCanvas *)i[1];
  if (*(_QWORD *)(*((_QWORD *)v9 + 2) + 8) != a2)
  {
    while (1)
    {
      i += 2;
      if (i == (_QWORD *)v8)
        return WebCore::InspectorCanvas::processArgument(0, a3, a4);
      if (*i)
        goto LABEL_9;
    }
  }
  ++*(_DWORD *)v9;
  result = WebCore::InspectorCanvas::processArgument((uint64_t)v9, a3, a4);
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v9, v10);
    return WTF::fastFree(v11, v12);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  uint64_t result;
  uint64_t v8;
  WebCore::InspectorCanvas *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  void *v12;

  if (!*(_DWORD *)(a1 + 76))
    return WebCore::InspectorCanvas::processArgument(0, a3, a4);
  v4 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    for (i = *(_QWORD **)(a1 + 64); !*i; i += 2)
    {
      v5 -= 16;
      if (!v5)
        return WebCore::InspectorCanvas::processArgument(0, a3, a4);
    }
  }
  else
  {
    i = *(_QWORD **)(a1 + 64);
  }
  v8 = *(_QWORD *)(a1 + 64) + 16 * v4;
LABEL_9:
  if (i == (_QWORD *)v8)
    return WebCore::InspectorCanvas::processArgument(0, a3, a4);
  v9 = (WebCore::InspectorCanvas *)i[1];
  if (*(_QWORD *)(*((_QWORD *)v9 + 2) + 8) != a2)
  {
    while (1)
    {
      i += 2;
      if (i == (_QWORD *)v8)
        return WebCore::InspectorCanvas::processArgument(0, a3, a4);
      if (*i)
        goto LABEL_9;
    }
  }
  ++*(_DWORD *)v9;
  result = WebCore::InspectorCanvas::processArgument((uint64_t)v9, a3, a4);
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v9, v10);
    return WTF::fastFree(v11, v12);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  uint64_t result;
  uint64_t v8;
  WebCore::InspectorCanvas *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  void *v12;

  if (!*(_DWORD *)(a1 + 76))
    return WebCore::InspectorCanvas::processArgument(0, a3, a4);
  v4 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    for (i = *(_QWORD **)(a1 + 64); !*i; i += 2)
    {
      v5 -= 16;
      if (!v5)
        return WebCore::InspectorCanvas::processArgument(0, a3, a4);
    }
  }
  else
  {
    i = *(_QWORD **)(a1 + 64);
  }
  v8 = *(_QWORD *)(a1 + 64) + 16 * v4;
LABEL_9:
  if (i == (_QWORD *)v8)
    return WebCore::InspectorCanvas::processArgument(0, a3, a4);
  v9 = (WebCore::InspectorCanvas *)i[1];
  if (*(_QWORD *)(*((_QWORD *)v9 + 2) + 8) != a2)
  {
    while (1)
    {
      i += 2;
      if (i == (_QWORD *)v8)
        return WebCore::InspectorCanvas::processArgument(0, a3, a4);
      if (*i)
        goto LABEL_9;
    }
  }
  ++*(_DWORD *)v9;
  result = WebCore::InspectorCanvas::processArgument((uint64_t)v9, a3, a4);
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v9, v10);
    return WTF::fastFree(v11, v12);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  uint64_t result;
  uint64_t v8;
  WebCore::InspectorCanvas *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  void *v12;

  if (!*(_DWORD *)(a1 + 76))
    return WebCore::InspectorCanvas::processArgument(0, a3, a4);
  v4 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    for (i = *(_QWORD **)(a1 + 64); !*i; i += 2)
    {
      v5 -= 16;
      if (!v5)
        return WebCore::InspectorCanvas::processArgument(0, a3, a4);
    }
  }
  else
  {
    i = *(_QWORD **)(a1 + 64);
  }
  v8 = *(_QWORD *)(a1 + 64) + 16 * v4;
LABEL_9:
  if (i == (_QWORD *)v8)
    return WebCore::InspectorCanvas::processArgument(0, a3, a4);
  v9 = (WebCore::InspectorCanvas *)i[1];
  if (*(_QWORD *)(*((_QWORD *)v9 + 2) + 8) != a2)
  {
    while (1)
    {
      i += 2;
      if (i == (_QWORD *)v8)
        return WebCore::InspectorCanvas::processArgument(0, a3, a4);
      if (*i)
        goto LABEL_9;
    }
  }
  ++*(_DWORD *)v9;
  result = WebCore::InspectorCanvas::processArgument((uint64_t)v9, a3, a4);
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v9, v10);
    return WTF::fastFree(v11, v12);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  return result;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  WebCore::InspectorCanvas *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  WebCore::InspectorCanvas *v18;
  WebCore::InspectorCanvas **v19;

  if (!*(_DWORD *)(a1 + 76))
    goto LABEL_6;
  v3 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = *(_QWORD **)(a1 + 64);
    while (!*v5)
    {
      v5 += 2;
      v4 -= 16;
      if (!v4)
        goto LABEL_6;
    }
  }
  else
  {
    v5 = *(_QWORD **)(a1 + 64);
  }
  v8 = *(_QWORD *)(a1 + 64) + 16 * v3;
LABEL_10:
  if (v5 == (_QWORD *)v8)
  {
LABEL_6:
    v18 = 0;
    v6 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v6 != -1)
    {
      v19 = &v18;
      return ((uint64_t (*)(WebCore::InspectorCanvas ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15InspectorCanvas15processArgumentERNS_7variantIJNS6_6RefPtrINS8_16HTMLImageElementENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENSB_INS8_15SVGImageElementENSD_ISI_EENSF_ISI_EEEENSB_INS8_17HTMLCanvasElementENSD_ISM_EENSF_ISM_EEEENSB_INS8_11ImageBitmapENSD_ISQ_EENSF_ISQ_EEEENSB_INS8_18CSSStyleImageValueENSD_ISU_EENSF_ISU_EEEENSB_INS8_15OffscreenCanvasENSD_ISY_EENSF_ISY_EEEENSB_INS8_16HTMLVideoElementENSD_IS12_EENSF_IS12_EEEENSB_INS8_19WebCodecsVideoFrameENSD_IS16_EENSF_IS16_EEEEEEEE3__0JEEEEEJRNS0_6__implIJSH_SL_SP_ST_SX_S11_S15_S19_EEEEEEDcOT_DpOT0____fmatrix[v6])(&v19, a3);
    }
    goto LABEL_19;
  }
  v9 = (WebCore::InspectorCanvas *)v5[1];
  if (*(_QWORD *)(*((_QWORD *)v9 + 2) + 8) != a2)
  {
    while (1)
    {
      v5 += 2;
      if (v5 == (_QWORD *)v8)
        goto LABEL_6;
      if (*v5)
        goto LABEL_10;
    }
  }
  ++*(_DWORD *)v9;
  v18 = v9;
  v10 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v10 == -1)
  {
LABEL_19:
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InspectorCanvasAgent::processArgument(v14, v15, v16, v17);
  }
  v19 = &v18;
  result = ((uint64_t (*)(WebCore::InspectorCanvas ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15InspectorCanvas15processArgumentERNS_7variantIJNS6_6RefPtrINS8_16HTMLImageElementENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENSB_INS8_15SVGImageElementENSD_ISI_EENSF_ISI_EEEENSB_INS8_17HTMLCanvasElementENSD_ISM_EENSF_ISM_EEEENSB_INS8_11ImageBitmapENSD_ISQ_EENSF_ISQ_EEEENSB_INS8_18CSSStyleImageValueENSD_ISU_EENSF_ISU_EEEENSB_INS8_15OffscreenCanvasENSD_ISY_EENSF_ISY_EEEENSB_INS8_16HTMLVideoElementENSD_IS12_EENSF_IS12_EEEENSB_INS8_19WebCodecsVideoFrameENSD_IS16_EENSF_IS16_EEEEEEEE3__0JEEEEEJRNS0_6__implIJSH_SL_SP_ST_SX_S11_S15_S19_EEEEEEDcOT_DpOT0____fmatrix[v10])(&v19, a3);
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v9, v11);
    return WTF::fastFree(v12, v13);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  WebCore::InspectorCanvas *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char *v18;

  if (!*(_DWORD *)(a1 + 76))
    goto LABEL_6;
  v3 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = *(_QWORD **)(a1 + 64);
    while (!*v5)
    {
      v5 += 2;
      v4 -= 16;
      if (!v4)
        goto LABEL_6;
    }
  }
  else
  {
    v5 = *(_QWORD **)(a1 + 64);
  }
  v8 = *(_QWORD *)(a1 + 64) + 16 * v3;
LABEL_10:
  if (v5 == (_QWORD *)v8)
  {
LABEL_6:
    v6 = *(unsigned int *)(a3 + 32);
    if ((_DWORD)v6 != -1)
    {
      v18 = &v17;
      return ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15InspectorCanvas15processArgumentERNS_7variantIJdNS8_12DOMPointInitEEEEE3__0JZNS9_15processArgumentESD_E3__1EEEEEJRNS0_6__implIJdSB_EEEEEEDcOT_DpOT0____fmatrix[v6])(&v18, a3);
    }
    goto LABEL_19;
  }
  v9 = (WebCore::InspectorCanvas *)v5[1];
  if (*(_QWORD *)(*((_QWORD *)v9 + 2) + 8) != a2)
  {
    while (1)
    {
      v5 += 2;
      if (v5 == (_QWORD *)v8)
        goto LABEL_6;
      if (*v5)
        goto LABEL_10;
    }
  }
  ++*(_DWORD *)v9;
  v10 = *(unsigned int *)(a3 + 32);
  if ((_DWORD)v10 == -1)
  {
LABEL_19:
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InspectorCanvasAgent::processArgument(v14, v15, v16);
  }
  v18 = &v17;
  result = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15InspectorCanvas15processArgumentERNS_7variantIJdNS8_12DOMPointInitEEEEE3__0JZNS9_15processArgumentESD_E3__1EEEEEJRNS0_6__implIJdSB_EEEEEEDcOT_DpOT0____fmatrix[v10])(&v18, a3);
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v9, v11);
    return WTF::fastFree(v12, v13);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  WebCore::InspectorCanvas *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  WebCore::InspectorCanvas *v15;
  WebCore::InspectorCanvas **v16;

  if (!*(_DWORD *)(a1 + 76))
    goto LABEL_6;
  v3 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = *(_QWORD **)(a1 + 64);
    while (!*v5)
    {
      v5 += 2;
      v4 -= 16;
      if (!v4)
        goto LABEL_6;
    }
  }
  else
  {
    v5 = *(_QWORD **)(a1 + 64);
  }
  v8 = *(_QWORD *)(a1 + 64) + 16 * v3;
LABEL_10:
  if (v5 == (_QWORD *)v8)
  {
LABEL_6:
    v15 = 0;
    v6 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v6 != -1)
    {
      v16 = &v15;
      return ((uint64_t (*)(WebCore::InspectorCanvas ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15InspectorCanvas15processArgumentERNS_7variantIJNS6_6StringENS6_6RefPtrINS8_14CanvasGradientENS6_12RawPtrTraitsISD_EENS6_21DefaultRefDerefTraitsISD_EEEENSC_INS8_13CanvasPatternENSE_ISJ_EENSG_ISJ_EEEEEEEE3__0JEEEEEJRNS0_6__implIJSB_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v6])(&v16, a3);
    }
    goto LABEL_19;
  }
  v9 = (WebCore::InspectorCanvas *)v5[1];
  if (*(_QWORD *)(*((_QWORD *)v9 + 2) + 8) != a2)
  {
    while (1)
    {
      v5 += 2;
      if (v5 == (_QWORD *)v8)
        goto LABEL_6;
      if (*v5)
        goto LABEL_10;
    }
  }
  ++*(_DWORD *)v9;
  v15 = v9;
  v10 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v10 == -1)
  {
LABEL_19:
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InspectorCanvasAgent::processArgument(v14);
  }
  v16 = &v15;
  result = ((uint64_t (*)(WebCore::InspectorCanvas ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15InspectorCanvas15processArgumentERNS_7variantIJNS6_6StringENS6_6RefPtrINS8_14CanvasGradientENS6_12RawPtrTraitsISD_EENS6_21DefaultRefDerefTraitsISD_EEEENSC_INS8_13CanvasPatternENSE_ISJ_EENSG_ISJ_EEEEEEEE3__0JEEEEEJRNS0_6__implIJSB_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v10])(&v16, a3);
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v9, v11);
    return WTF::fastFree(v12, v13);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  WebCore::InspectorCanvas *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  WebCore::InspectorCanvas *v15;
  WebCore::InspectorCanvas **v16;

  if (!*(_DWORD *)(a1 + 76))
    goto LABEL_6;
  v3 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = *(_QWORD **)(a1 + 64);
    while (!*v5)
    {
      v5 += 2;
      v4 -= 16;
      if (!v4)
        goto LABEL_6;
    }
  }
  else
  {
    v5 = *(_QWORD **)(a1 + 64);
  }
  v8 = *(_QWORD *)(a1 + 64) + 16 * v3;
LABEL_10:
  if (v5 == (_QWORD *)v8)
  {
LABEL_6:
    v15 = 0;
    v6 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v6 != -1)
    {
      v16 = &v15;
      return ((uint64_t (*)(WebCore::InspectorCanvas ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15InspectorCanvas15processArgumentERNS_7variantIJNS6_6RefPtrIN3JSC11ArrayBufferENS6_12RawPtrTraitsISD_EENS6_21DefaultRefDerefTraitsISD_EEEENSB_INSC_15ArrayBufferViewENSE_ISJ_EENSG_ISJ_EEEEEEEE3__0JEEEEEJRNS0_6__implIJSI_SM_EEEEEEDcOT_DpOT0____fmatrix[v6])(&v16, a3);
    }
    goto LABEL_19;
  }
  v9 = (WebCore::InspectorCanvas *)v5[1];
  if (*(_QWORD *)(*((_QWORD *)v9 + 2) + 8) != a2)
  {
    while (1)
    {
      v5 += 2;
      if (v5 == (_QWORD *)v8)
        goto LABEL_6;
      if (*v5)
        goto LABEL_10;
    }
  }
  ++*(_DWORD *)v9;
  v15 = v9;
  v10 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v10 == -1)
  {
LABEL_19:
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InspectorCanvasAgent::processArgument(v14);
  }
  v16 = &v15;
  result = ((uint64_t (*)(WebCore::InspectorCanvas ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15InspectorCanvas15processArgumentERNS_7variantIJNS6_6RefPtrIN3JSC11ArrayBufferENS6_12RawPtrTraitsISD_EENS6_21DefaultRefDerefTraitsISD_EEEENSB_INSC_15ArrayBufferViewENSE_ISJ_EENSG_ISJ_EEEEEEEE3__0JEEEEEJRNS0_6__implIJSI_SM_EEEEEEDcOT_DpOT0____fmatrix[v10])(&v16, a3);
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v9, v11);
    return WTF::fastFree(v12, v13);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  WebCore::InspectorCanvas *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  WebCore::InspectorCanvas *v15;
  WebCore::InspectorCanvas **v16;

  if (!*(_DWORD *)(a1 + 76))
    goto LABEL_6;
  v3 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = *(_QWORD **)(a1 + 64);
    while (!*v5)
    {
      v5 += 2;
      v4 -= 16;
      if (!v4)
        goto LABEL_6;
    }
  }
  else
  {
    v5 = *(_QWORD **)(a1 + 64);
  }
  v8 = *(_QWORD *)(a1 + 64) + 16 * v3;
LABEL_10:
  if (v5 == (_QWORD *)v8)
  {
LABEL_6:
    v15 = 0;
    v6 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v6 != -1)
    {
      v16 = &v15;
      return ((uint64_t (*)(WebCore::InspectorCanvas ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15InspectorCanvas15processArgumentERNS_7variantIJNS6_6RefPtrIN3JSC21GenericTypedArrayViewINSC_14Float32AdaptorEEENS6_12RawPtrTraitsISF_EENS6_21DefaultRefDerefTraitsISF_EEEENS6_6VectorIfLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE3__0JEEEEEJRNS0_6__implIJSK_SO_EEEEEEDcOT_DpOT0____fmatrix[v6])(&v16, a3);
    }
    goto LABEL_19;
  }
  v9 = (WebCore::InspectorCanvas *)v5[1];
  if (*(_QWORD *)(*((_QWORD *)v9 + 2) + 8) != a2)
  {
    while (1)
    {
      v5 += 2;
      if (v5 == (_QWORD *)v8)
        goto LABEL_6;
      if (*v5)
        goto LABEL_10;
    }
  }
  ++*(_DWORD *)v9;
  v15 = v9;
  v10 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v10 == -1)
  {
LABEL_19:
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InspectorCanvasAgent::processArgument(v14);
  }
  v16 = &v15;
  result = ((uint64_t (*)(WebCore::InspectorCanvas ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15InspectorCanvas15processArgumentERNS_7variantIJNS6_6RefPtrIN3JSC21GenericTypedArrayViewINSC_14Float32AdaptorEEENS6_12RawPtrTraitsISF_EENS6_21DefaultRefDerefTraitsISF_EEEENS6_6VectorIfLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE3__0JEEEEEJRNS0_6__implIJSK_SO_EEEEEEDcOT_DpOT0____fmatrix[v10])(&v16, a3);
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v9, v11);
    return WTF::fastFree(v12, v13);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  WebCore::InspectorCanvas *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::InspectorCanvas *v17;
  WebCore::InspectorCanvas **v18;

  if (!*(_DWORD *)(a1 + 76))
    goto LABEL_6;
  v3 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = *(_QWORD **)(a1 + 64);
    while (!*v5)
    {
      v5 += 2;
      v4 -= 16;
      if (!v4)
        goto LABEL_6;
    }
  }
  else
  {
    v5 = *(_QWORD **)(a1 + 64);
  }
  v8 = *(_QWORD *)(a1 + 64) + 16 * v3;
LABEL_10:
  if (v5 == (_QWORD *)v8)
  {
LABEL_6:
    v17 = 0;
    v6 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v6 != -1)
    {
      v18 = &v17;
      return ((uint64_t (*)(WebCore::InspectorCanvas ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15InspectorCanvas15processArgumentERNS_7variantIJNS6_6RefPtrIN3JSC21GenericTypedArrayViewINSC_12Int32AdaptorEEENS6_12RawPtrTraitsISF_EENS6_21DefaultRefDerefTraitsISF_EEEENS6_6VectorIiLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE3__0JEEEEEJRNS0_6__implIJSK_SO_EEEEEEDcOT_DpOT0____fmatrix[v6])(&v18, a3);
    }
    goto LABEL_19;
  }
  v9 = (WebCore::InspectorCanvas *)v5[1];
  if (*(_QWORD *)(*((_QWORD *)v9 + 2) + 8) != a2)
  {
    while (1)
    {
      v5 += 2;
      if (v5 == (_QWORD *)v8)
        goto LABEL_6;
      if (*v5)
        goto LABEL_10;
    }
  }
  ++*(_DWORD *)v9;
  v17 = v9;
  v10 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v10 == -1)
  {
LABEL_19:
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InspectorCanvasAgent::processArgument(v14, v15, v16);
  }
  v18 = &v17;
  result = ((uint64_t (*)(WebCore::InspectorCanvas ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15InspectorCanvas15processArgumentERNS_7variantIJNS6_6RefPtrIN3JSC21GenericTypedArrayViewINSC_12Int32AdaptorEEENS6_12RawPtrTraitsISF_EENS6_21DefaultRefDerefTraitsISF_EEEENS6_6VectorIiLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE3__0JEEEEEJRNS0_6__implIJSK_SO_EEEEEEDcOT_DpOT0____fmatrix[v10])(&v18, a3);
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v9, v11);
    return WTF::fastFree(v12, v13);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  WebCore::InspectorCanvas *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;
  void *v13;
  WebCore::InspectorCanvasAgent *v14;
  WebCore::CanvasRenderingContext *v15;
  WebCore::WebGLSampler *v16;
  WebCore::InspectorCanvas *v17;
  WebCore::InspectorCanvas **v18;

  if (!*(_DWORD *)(a1 + 76))
    goto LABEL_6;
  v3 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = *(_QWORD **)(a1 + 64);
    while (!*v5)
    {
      v5 += 2;
      v4 -= 16;
      if (!v4)
        goto LABEL_6;
    }
  }
  else
  {
    v5 = *(_QWORD **)(a1 + 64);
  }
  v8 = *(_QWORD *)(a1 + 64) + 16 * v3;
LABEL_10:
  if (v5 == (_QWORD *)v8)
  {
LABEL_6:
    v17 = 0;
    v6 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v6 != -1)
    {
      v18 = &v17;
      return ((uint64_t (*)(WebCore::InspectorCanvas ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15InspectorCanvas15processArgumentERNS_7variantIJNS6_6RefPtrINS8_11ImageBitmapENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENSB_INS8_9ImageDataENSD_ISI_EENSF_ISI_EEEENSB_INS8_16HTMLImageElementENSD_ISM_EENSF_ISM_EEEENSB_INS8_17HTMLCanvasElementENSD_ISQ_EENSF_ISQ_EEEENSB_INS8_16HTMLVideoElementENSD_ISU_EENSF_ISU_EEEENSB_INS8_15OffscreenCanvasENSD_ISY_EENSF_ISY_EEEENSB_INS8_19WebCodecsVideoFrameENSD_IS12_EENSF_IS12_EEEEEEEE3__0JEEEEEJRNS0_6__implIJSH_SL_SP_ST_SX_S11_S15_EEEEEEDcOT_DpOT0____fmatrix[v6])(&v18, a3);
    }
    goto LABEL_19;
  }
  v9 = (WebCore::InspectorCanvas *)v5[1];
  if (*(_QWORD *)(*((_QWORD *)v9 + 2) + 8) != a2)
  {
    while (1)
    {
      v5 += 2;
      if (v5 == (_QWORD *)v8)
        goto LABEL_6;
      if (*v5)
        goto LABEL_10;
    }
  }
  ++*(_DWORD *)v9;
  v17 = v9;
  v10 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v10 == -1)
  {
LABEL_19:
    v14 = (WebCore::InspectorCanvasAgent *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InspectorCanvasAgent::processArgument(v14, v15, v16);
  }
  v18 = &v17;
  result = ((uint64_t (*)(WebCore::InspectorCanvas ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15InspectorCanvas15processArgumentERNS_7variantIJNS6_6RefPtrINS8_11ImageBitmapENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENSB_INS8_9ImageDataENSD_ISI_EENSF_ISI_EEEENSB_INS8_16HTMLImageElementENSD_ISM_EENSF_ISM_EEEENSB_INS8_17HTMLCanvasElementENSD_ISQ_EENSF_ISQ_EEEENSB_INS8_16HTMLVideoElementENSD_ISU_EENSF_ISU_EEEENSB_INS8_15OffscreenCanvasENSD_ISY_EENSF_ISY_EEEENSB_INS8_19WebCodecsVideoFrameENSD_IS12_EENSF_IS12_EEEEEEEE3__0JEEEEEJRNS0_6__implIJSH_SL_SP_ST_SX_S11_S15_EEEEEEDcOT_DpOT0____fmatrix[v10])(&v18, a3);
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v9, v11);
    return WTF::fastFree(v12, v13);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  WebCore::InspectorCanvas *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  WebCore::CanvasRenderingContext *v15;
  const WTF::StringImpl *v16;
  _QWORD *v17;
  WebCore::InspectorCanvas *v18;
  WebCore::InspectorCanvas **v19;

  if (!*(_DWORD *)(a1 + 76))
    goto LABEL_6;
  v3 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = *(_QWORD **)(a1 + 64);
    while (!*v5)
    {
      v5 += 2;
      v4 -= 16;
      if (!v4)
        goto LABEL_6;
    }
  }
  else
  {
    v5 = *(_QWORD **)(a1 + 64);
  }
  v8 = *(_QWORD *)(a1 + 64) + 16 * v3;
LABEL_10:
  if (v5 == (_QWORD *)v8)
  {
LABEL_6:
    v18 = 0;
    v6 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v6 != -1)
    {
      v19 = &v18;
      return ((uint64_t (*)(WebCore::InspectorCanvas ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15InspectorCanvas15processArgumentERNS_7variantIJNS6_6RefPtrIN3JSC21GenericTypedArrayViewINSC_13Uint32AdaptorEEENS6_12RawPtrTraitsISF_EENS6_21DefaultRefDerefTraitsISF_EEEENS6_6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE3__0JEEEEEJRNS0_6__implIJSK_SO_EEEEEEDcOT_DpOT0____fmatrix[v6])(&v19, a3);
    }
    goto LABEL_19;
  }
  v9 = (WebCore::InspectorCanvas *)v5[1];
  if (*(_QWORD *)(*((_QWORD *)v9 + 2) + 8) != a2)
  {
    while (1)
    {
      v5 += 2;
      if (v5 == (_QWORD *)v8)
        goto LABEL_6;
      if (*v5)
        goto LABEL_10;
    }
  }
  ++*(_DWORD *)v9;
  v18 = v9;
  v10 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v10 == -1)
  {
LABEL_19:
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InspectorCanvasAgent::recordAction(v14, v15, v16, v17);
  }
  v19 = &v18;
  result = ((uint64_t (*)(WebCore::InspectorCanvas ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15InspectorCanvas15processArgumentERNS_7variantIJNS6_6RefPtrIN3JSC21GenericTypedArrayViewINSC_13Uint32AdaptorEEENS6_12RawPtrTraitsISF_EENS6_21DefaultRefDerefTraitsISF_EEEENS6_6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE3__0JEEEEEJRNS0_6__implIJSK_SO_EEEEEEDcOT_DpOT0____fmatrix[v10])(&v19, a3);
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v9, v11);
    return WTF::fastFree(v12, v13);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  return result;
}

_DWORD *WebCore::InspectorCanvasAgent::processArgument@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  _DWORD *result;
  uint64_t v8;
  WebCore::InspectorCanvas *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  void *v12;

  if (!*(_DWORD *)(a1 + 76))
    return WebCore::InspectorCanvas::processArgument(a3, a4);
  v4 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    for (i = *(_QWORD **)(a1 + 64); !*i; i += 2)
    {
      v5 -= 16;
      if (!v5)
        return WebCore::InspectorCanvas::processArgument(a3, a4);
    }
  }
  else
  {
    i = *(_QWORD **)(a1 + 64);
  }
  v8 = *(_QWORD *)(a1 + 64) + 16 * v4;
LABEL_9:
  if (i == (_QWORD *)v8)
    return WebCore::InspectorCanvas::processArgument(a3, a4);
  v9 = (WebCore::InspectorCanvas *)i[1];
  if (*(_QWORD *)(*((_QWORD *)v9 + 2) + 8) != a2)
  {
    while (1)
    {
      i += 2;
      if (i == (_QWORD *)v8)
        return WebCore::InspectorCanvas::processArgument(a3, a4);
      if (*i)
        goto LABEL_9;
    }
  }
  ++*(_DWORD *)v9;
  result = WebCore::InspectorCanvas::processArgument(a3, a4);
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v9, v10);
    return (_DWORD *)WTF::fastFree(v11, v12);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  _DWORD *result;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF *v11;
  void *v12;

  if (!*(_DWORD *)(a1 + 76))
    return WebCore::InspectorCanvas::processArgument(0, a3, a4);
  v4 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    for (i = *(_QWORD **)(a1 + 64); !*i; i += 2)
    {
      v5 -= 16;
      if (!v5)
        return WebCore::InspectorCanvas::processArgument(0, a3, a4);
    }
  }
  else
  {
    i = *(_QWORD **)(a1 + 64);
  }
  v8 = *(_QWORD *)(a1 + 64) + 16 * v4;
LABEL_9:
  if (i == (_QWORD *)v8)
    return WebCore::InspectorCanvas::processArgument(0, a3, a4);
  v9 = i[1];
  if (*(_QWORD *)(*(_QWORD *)(v9 + 16) + 8) != a2)
  {
    while (1)
    {
      i += 2;
      if (i == (_QWORD *)v8)
        return WebCore::InspectorCanvas::processArgument(0, a3, a4);
      if (*i)
        goto LABEL_9;
    }
  }
  ++*(_DWORD *)v9;
  result = WebCore::InspectorCanvas::processArgument((_DWORD *)v9, a3, a4);
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas((WebCore::InspectorCanvas *)v9, v10);
    return (_DWORD *)WTF::fastFree(v11, v12);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  return result;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(WebCore::InspectorCanvasAgent *this@<X0>, WebCore::CanvasRenderingContext *a2@<X1>, WebCore::Element *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  uint64_t result;
  uint64_t v8;
  WebCore::InspectorCanvas *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  void *v12;

  if (!*((_DWORD *)this + 19))
    return WebCore::InspectorCanvas::processArgument(0, a3, a4);
  v4 = *((unsigned int *)this + 18);
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    for (i = (_QWORD *)*((_QWORD *)this + 8); !*i; i += 2)
    {
      v5 -= 16;
      if (!v5)
        return WebCore::InspectorCanvas::processArgument(0, a3, a4);
    }
  }
  else
  {
    i = (_QWORD *)*((_QWORD *)this + 8);
  }
  v8 = *((_QWORD *)this + 8) + 16 * v4;
LABEL_9:
  if (i == (_QWORD *)v8)
    return WebCore::InspectorCanvas::processArgument(0, a3, a4);
  v9 = (WebCore::InspectorCanvas *)i[1];
  if (*(WebCore::CanvasRenderingContext **)(*((_QWORD *)v9 + 2) + 8) != a2)
  {
    while (1)
    {
      i += 2;
      if (i == (_QWORD *)v8)
        return WebCore::InspectorCanvas::processArgument(0, a3, a4);
      if (*i)
        goto LABEL_9;
    }
  }
  ++*(_DWORD *)v9;
  result = WebCore::InspectorCanvas::processArgument((uint64_t)v9, a3, a4);
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v9, v10);
    return WTF::fastFree(v11, v12);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  return result;
}

unsigned int *WebCore::InspectorCanvasAgent::processArgument@<X0>(unsigned int *this@<X0>, WebCore::CanvasRenderingContext *a2@<X1>, WebCore::HTMLImageElement *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  WTF::JSONImpl::Value *v9;
  void *v10;
  uint64_t v11;
  WebCore::InspectorCanvas *v12;
  int v13;
  WTF::JSONImpl::Value *v14;
  void *v15;
  uint64_t v16;
  char v17;
  _QWORD v18[5];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!this[19])
    goto LABEL_6;
  v6 = this[18];
  if ((_DWORD)v6)
  {
    v7 = 16 * v6;
    v8 = (_QWORD *)*((_QWORD *)this + 8);
    while (!*v8)
    {
      v8 += 2;
      v7 -= 16;
      if (!v7)
        goto LABEL_6;
    }
  }
  else
  {
    v8 = (_QWORD *)*((_QWORD *)this + 8);
  }
  v11 = *((_QWORD *)this + 8) + 16 * v6;
LABEL_15:
  if (v8 == (_QWORD *)v11)
    goto LABEL_6;
  v12 = (WebCore::InspectorCanvas *)v8[1];
  if (*(WebCore::CanvasRenderingContext **)(*((_QWORD *)v12 + 2) + 8) != a2)
  {
    while (1)
    {
      v8 += 2;
      if (v8 == (_QWORD *)v11)
        break;
      if (*v8)
        goto LABEL_15;
    }
LABEL_6:
    if (a3)
    {
      *((_DWORD *)a3 + 6) += 4;
      v18[0] = a3;
      v19 = 3;
      v9 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(0, (unint64_t)v18);
      this = (unsigned int *)WTF::JSONImpl::Value::create(v9);
      if (v19 != -1)
        this = (unsigned int *)((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v19])(&v17, v18);
      *(_QWORD *)a4 = v16;
      *(_DWORD *)(a4 + 8) = 6;
      *(_BYTE *)(a4 + 16) = 1;
      if (*((_DWORD *)a3 + 6) == 2)
      {
        if ((*((_WORD *)a3 + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef(a3, v10);
      }
      else
      {
        *((_DWORD *)a3 + 6) -= 2;
      }
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 16) = 0;
    }
    return this;
  }
  v13 = (*(_DWORD *)v12)++;
  if (a3)
  {
    *((_DWORD *)a3 + 6) += 4;
    v18[0] = a3;
    v19 = 3;
    v14 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData((uint64_t)v12, (unint64_t)v18);
    this = (unsigned int *)WTF::JSONImpl::Value::create(v14);
    if (v19 != -1)
      this = (unsigned int *)((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v19])(&v17, v18);
    *(_QWORD *)a4 = v16;
    *(_DWORD *)(a4 + 8) = 6;
    *(_BYTE *)(a4 + 16) = 1;
    if (*((_DWORD *)a3 + 6) == 2)
    {
      if ((*((_WORD *)a3 + 15) & 0x400) == 0)
        this = WebCore::Node::removedLastRef(a3, a2);
    }
    else
    {
      *((_DWORD *)a3 + 6) -= 2;
    }
    v13 = *(_DWORD *)v12 - 1;
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
  }
  if (v13)
  {
    *(_DWORD *)v12 = v13;
  }
  else
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v12, a2);
    return (unsigned int *)WTF::fastFree(v12, v15);
  }
  return this;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(WebCore::InspectorCanvasAgent *this@<X0>, WebCore::CanvasRenderingContext *a2@<X1>, WebCore::ImageBitmap *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  uint64_t result;
  uint64_t v8;
  WebCore::InspectorCanvas *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  void *v12;

  if (!*((_DWORD *)this + 19))
    return WebCore::InspectorCanvas::processArgument(0, a3, a4);
  v4 = *((unsigned int *)this + 18);
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    for (i = (_QWORD *)*((_QWORD *)this + 8); !*i; i += 2)
    {
      v5 -= 16;
      if (!v5)
        return WebCore::InspectorCanvas::processArgument(0, a3, a4);
    }
  }
  else
  {
    i = (_QWORD *)*((_QWORD *)this + 8);
  }
  v8 = *((_QWORD *)this + 8) + 16 * v4;
LABEL_9:
  if (i == (_QWORD *)v8)
    return WebCore::InspectorCanvas::processArgument(0, a3, a4);
  v9 = (WebCore::InspectorCanvas *)i[1];
  if (*(WebCore::CanvasRenderingContext **)(*((_QWORD *)v9 + 2) + 8) != a2)
  {
    while (1)
    {
      i += 2;
      if (i == (_QWORD *)v8)
        return WebCore::InspectorCanvas::processArgument(0, a3, a4);
      if (*i)
        goto LABEL_9;
    }
  }
  ++*(_DWORD *)v9;
  result = WebCore::InspectorCanvas::processArgument((uint64_t)v9, a3, a4);
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v9, v10);
    return WTF::fastFree(v11, v12);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  return result;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(WebCore::InspectorCanvasAgent *this@<X0>, WebCore::CanvasRenderingContext *a2@<X1>, WebCore::ImageData *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  uint64_t result;
  uint64_t v8;
  WebCore::InspectorCanvas *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  void *v12;

  if (!*((_DWORD *)this + 19))
    return WebCore::InspectorCanvas::processArgument(0, a3, a4);
  v4 = *((unsigned int *)this + 18);
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    for (i = (_QWORD *)*((_QWORD *)this + 8); !*i; i += 2)
    {
      v5 -= 16;
      if (!v5)
        return WebCore::InspectorCanvas::processArgument(0, a3, a4);
    }
  }
  else
  {
    i = (_QWORD *)*((_QWORD *)this + 8);
  }
  v8 = *((_QWORD *)this + 8) + 16 * v4;
LABEL_9:
  if (i == (_QWORD *)v8)
    return WebCore::InspectorCanvas::processArgument(0, a3, a4);
  v9 = (WebCore::InspectorCanvas *)i[1];
  if (*(WebCore::CanvasRenderingContext **)(*((_QWORD *)v9 + 2) + 8) != a2)
  {
    while (1)
    {
      i += 2;
      if (i == (_QWORD *)v8)
        return WebCore::InspectorCanvas::processArgument(0, a3, a4);
      if (*i)
        goto LABEL_9;
    }
  }
  ++*(_DWORD *)v9;
  result = WebCore::InspectorCanvas::processArgument((uint64_t)v9, a3, a4);
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v9, v10);
    return WTF::fastFree(v11, v12);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  return result;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(uint64_t result@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  WebCore::InspectorCanvas *v10;
  int v11;
  char v12;
  WTF *v13;
  void *v14;
  uint64_t v15;

  if (!*(_DWORD *)(result + 76))
    goto LABEL_6;
  v5 = *(unsigned int *)(result + 72);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = *(_QWORD **)(result + 64);
    while (!*v7)
    {
      v7 += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_6;
    }
  }
  else
  {
    v7 = *(_QWORD **)(result + 64);
  }
  v9 = *(_QWORD *)(result + 64) + 16 * v5;
LABEL_12:
  if (v7 == (_QWORD *)v9)
    goto LABEL_6;
  v10 = (WebCore::InspectorCanvas *)v7[1];
  if (*(WTF::StringImpl **)(*((_QWORD *)v10 + 2) + 8) != a2)
  {
    while (1)
    {
      v7 += 2;
      if (v7 == (_QWORD *)v9)
        break;
      if (*v7)
        goto LABEL_12;
    }
LABEL_6:
    v8 = *(_BYTE *)(a3 + 4);
    if (v8)
    {
      result = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)result, *(float *)a3);
      *(_QWORD *)a4 = v15;
      v8 = 1;
      *(_DWORD *)(a4 + 8) = 1;
    }
    else
    {
      *(_BYTE *)a4 = 0;
    }
    *(_BYTE *)(a4 + 16) = v8;
    return result;
  }
  v11 = (*(_DWORD *)v10)++;
  v12 = *(_BYTE *)(a3 + 4);
  if (v12)
  {
    result = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)result, *(float *)a3);
    *(_QWORD *)a4 = v15;
    v12 = 1;
    *(_DWORD *)(a4 + 8) = 1;
    v11 = *(_DWORD *)v10 - 1;
  }
  else
  {
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 16) = v12;
  if (v11)
  {
    *(_DWORD *)v10 = v11;
  }
  else
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v10, a2);
    return WTF::fastFree(v13, v14);
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  WebCore::InspectorCanvas *v10;
  int v11;
  char v12;
  WTF *v13;
  void *v14;
  uint64_t v15;

  if (!*(_DWORD *)(result + 76))
    goto LABEL_6;
  v5 = *(unsigned int *)(result + 72);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = *(_QWORD **)(result + 64);
    while (!*v7)
    {
      v7 += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_6;
    }
  }
  else
  {
    v7 = *(_QWORD **)(result + 64);
  }
  v9 = *(_QWORD *)(result + 64) + 16 * v5;
LABEL_12:
  if (v7 == (_QWORD *)v9)
    goto LABEL_6;
  v10 = (WebCore::InspectorCanvas *)v7[1];
  if (*(WTF::StringImpl **)(*((_QWORD *)v10 + 2) + 8) != a2)
  {
    while (1)
    {
      v7 += 2;
      if (v7 == (_QWORD *)v9)
        break;
      if (*v7)
        goto LABEL_12;
    }
LABEL_6:
    v8 = *(_BYTE *)(a3 + 8);
    if (v8)
    {
      result = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)result, *(double *)a3);
      *(_QWORD *)a4 = v15;
      v8 = 1;
      *(_DWORD *)(a4 + 8) = 1;
    }
    else
    {
      *(_BYTE *)a4 = 0;
    }
    *(_BYTE *)(a4 + 16) = v8;
    return result;
  }
  v11 = (*(_DWORD *)v10)++;
  v12 = *(_BYTE *)(a3 + 8);
  if (v12)
  {
    result = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)result, *(double *)a3);
    *(_QWORD *)a4 = v15;
    v12 = 1;
    *(_DWORD *)(a4 + 8) = 1;
    v11 = *(_DWORD *)v10 - 1;
  }
  else
  {
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 16) = v12;
  if (v11)
  {
    *(_DWORD *)v10 = v11;
  }
  else
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v10, a2);
    return WTF::fastFree(v13, v14);
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  WebCore::InspectorCanvas *v10;
  int v11;
  char v12;
  WTF *v13;
  void *v14;
  uint64_t v15;

  if (!*(_DWORD *)(result + 76))
    goto LABEL_6;
  v5 = *(unsigned int *)(result + 72);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = *(_QWORD **)(result + 64);
    while (!*v7)
    {
      v7 += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_6;
    }
  }
  else
  {
    v7 = *(_QWORD **)(result + 64);
  }
  v9 = *(_QWORD *)(result + 64) + 16 * v5;
LABEL_12:
  if (v7 == (_QWORD *)v9)
    goto LABEL_6;
  v10 = (WebCore::InspectorCanvas *)v7[1];
  if (*(WTF::StringImpl **)(*((_QWORD *)v10 + 2) + 8) != a2)
  {
    while (1)
    {
      v7 += 2;
      if (v7 == (_QWORD *)v9)
        break;
      if (*v7)
        goto LABEL_12;
    }
LABEL_6:
    if (a3)
    {
      result = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*(unsigned int *)(a3 + 24));
      *(_QWORD *)a4 = v15;
      *(_DWORD *)(a4 + 8) = 17;
      v8 = 1;
    }
    else
    {
      v8 = 0;
      *(_BYTE *)a4 = 0;
    }
    *(_BYTE *)(a4 + 16) = v8;
    return result;
  }
  v11 = (*(_DWORD *)v10)++;
  if (a3)
  {
    result = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*(unsigned int *)(a3 + 24));
    *(_QWORD *)a4 = v15;
    *(_DWORD *)(a4 + 8) = 17;
    v11 = *(_DWORD *)v10 - 1;
    v12 = 1;
  }
  else
  {
    v12 = 0;
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 16) = v12;
  if (v11)
  {
    *(_DWORD *)v10 = v11;
  }
  else
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v10, a2);
    return WTF::fastFree(v13, v14);
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  WebCore::InspectorCanvas *v10;
  int v11;
  char v12;
  WTF *v13;
  void *v14;
  uint64_t v15;

  if (!*(_DWORD *)(result + 76))
    goto LABEL_6;
  v5 = *(unsigned int *)(result + 72);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = *(_QWORD **)(result + 64);
    while (!*v7)
    {
      v7 += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_6;
    }
  }
  else
  {
    v7 = *(_QWORD **)(result + 64);
  }
  v9 = *(_QWORD *)(result + 64) + 16 * v5;
LABEL_12:
  if (v7 == (_QWORD *)v9)
    goto LABEL_6;
  v10 = (WebCore::InspectorCanvas *)v7[1];
  if (*(WTF::StringImpl **)(*((_QWORD *)v10 + 2) + 8) != a2)
  {
    while (1)
    {
      v7 += 2;
      if (v7 == (_QWORD *)v9)
        break;
      if (*v7)
        goto LABEL_12;
    }
LABEL_6:
    if (a3)
    {
      result = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*(unsigned int *)(a3 + 16));
      *(_QWORD *)a4 = v15;
      *(_DWORD *)(a4 + 8) = 18;
      v8 = 1;
    }
    else
    {
      v8 = 0;
      *(_BYTE *)a4 = 0;
    }
    *(_BYTE *)(a4 + 16) = v8;
    return result;
  }
  v11 = (*(_DWORD *)v10)++;
  if (a3)
  {
    result = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*(unsigned int *)(a3 + 16));
    *(_QWORD *)a4 = v15;
    *(_DWORD *)(a4 + 8) = 18;
    v11 = *(_DWORD *)v10 - 1;
    v12 = 1;
  }
  else
  {
    v12 = 0;
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 16) = v12;
  if (v11)
  {
    *(_DWORD *)v10 = v11;
  }
  else
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v10, a2);
    return WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(WebCore::InspectorCanvasAgent *this@<X0>, WebCore::CanvasRenderingContext *a2@<X1>, WebCore::Path2D *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  uint64_t result;
  uint64_t v8;
  WebCore::InspectorCanvas *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  void *v12;

  if (!*((_DWORD *)this + 19))
    return WebCore::InspectorCanvas::processArgument(0, a3, a4);
  v4 = *((unsigned int *)this + 18);
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    for (i = (_QWORD *)*((_QWORD *)this + 8); !*i; i += 2)
    {
      v5 -= 16;
      if (!v5)
        return WebCore::InspectorCanvas::processArgument(0, a3, a4);
    }
  }
  else
  {
    i = (_QWORD *)*((_QWORD *)this + 8);
  }
  v8 = *((_QWORD *)this + 8) + 16 * v4;
LABEL_9:
  if (i == (_QWORD *)v8)
    return WebCore::InspectorCanvas::processArgument(0, a3, a4);
  v9 = (WebCore::InspectorCanvas *)i[1];
  if (*(WebCore::CanvasRenderingContext **)(*((_QWORD *)v9 + 2) + 8) != a2)
  {
    while (1)
    {
      i += 2;
      if (i == (_QWORD *)v8)
        return WebCore::InspectorCanvas::processArgument(0, a3, a4);
      if (*i)
        goto LABEL_9;
    }
  }
  ++*(_DWORD *)v9;
  result = WebCore::InspectorCanvas::processArgument((uint64_t)v9, a3, a4);
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v9, v10);
    return WTF::fastFree(v11, v12);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  return result;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  WebCore::InspectorCanvas *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  void *v12;
  uint64_t v13;

  if (!*(_DWORD *)(a1 + 76))
    goto LABEL_6;
  v4 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    v6 = *(_QWORD **)(a1 + 64);
    while (!*v6)
    {
      v6 += 2;
      v5 -= 16;
      if (!v5)
        goto LABEL_6;
    }
  }
  else
  {
    v6 = *(_QWORD **)(a1 + 64);
  }
  v8 = *(_QWORD *)(a1 + 64) + 16 * v4;
LABEL_9:
  if (v6 == (_QWORD *)v8)
    goto LABEL_6;
  v9 = (WebCore::InspectorCanvas *)v6[1];
  if (*(_QWORD *)(*((_QWORD *)v9 + 2) + 8) != a2)
  {
    while (1)
    {
      v6 += 2;
      if (v6 == (_QWORD *)v8)
        break;
      if (*v6)
        goto LABEL_9;
    }
LABEL_6:
    result = WTF::JSONImpl::Value::create(0);
    *(_QWORD *)a3 = v13;
    *(_DWORD *)(a3 + 8) = 5;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  ++*(_DWORD *)v9;
  result = WTF::JSONImpl::Value::create(0);
  *(_QWORD *)a3 = v13;
  *(_DWORD *)(a3 + 8) = 5;
  *(_BYTE *)(a3 + 16) = 1;
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v9, v10);
    return WTF::fastFree(v11, v12);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  return result;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(uint64_t result@<X0>, WTF::StringImpl *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::InspectorCanvas *v10;
  int v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  uint64_t v15;

  if (!*(_DWORD *)(result + 76))
    goto LABEL_6;
  v5 = *(unsigned int *)(result + 72);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = *(_QWORD **)(result + 64);
    while (!*v7)
    {
      v7 += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_6;
    }
  }
  else
  {
    v7 = *(_QWORD **)(result + 64);
  }
  v9 = *(_QWORD *)(result + 64) + 16 * v5;
LABEL_12:
  if (v7 == (_QWORD *)v9)
    goto LABEL_6;
  v10 = (WebCore::InspectorCanvas *)v7[1];
  if (*(WTF::StringImpl **)(*((_QWORD *)v10 + 2) + 8) != a2)
  {
    while (1)
    {
      v7 += 2;
      if (v7 == (_QWORD *)v9)
        break;
      if (*v7)
        goto LABEL_12;
    }
LABEL_6:
    v8 = *a3;
    if (*a3)
    {
      result = WTF::JSONImpl::Value::create(0);
      *(_QWORD *)a4 = v15;
      *(_DWORD *)(a4 + 8) = 5;
      LOBYTE(v8) = 1;
    }
    else
    {
      *(_BYTE *)a4 = 0;
    }
    *(_BYTE *)(a4 + 16) = v8;
    return result;
  }
  v11 = (*(_DWORD *)v10)++;
  v12 = *a3;
  if (*a3)
  {
    result = WTF::JSONImpl::Value::create(0);
    *(_QWORD *)a4 = v15;
    *(_DWORD *)(a4 + 8) = 5;
    v11 = *(_DWORD *)v10 - 1;
    LOBYTE(v12) = 1;
  }
  else
  {
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 16) = v12;
  if (v11)
  {
    *(_DWORD *)v10 = v11;
  }
  else
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v10, a2);
    return WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(WebCore::InspectorCanvasAgent *this@<X0>, WebCore::CanvasRenderingContext *a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int *v8;
  int v9;
  WTF::JSONImpl::Value *v10;
  uint64_t result;
  uint64_t v12;
  WebCore::InspectorCanvas *v13;
  int *v14;
  int v15;
  WTF::JSONImpl::Value *v16;
  WTF::StringImpl *v17;
  void *v18;
  uint64_t v19;
  char v20;
  _QWORD v21[5];
  int v22;
  _QWORD v23[5];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!*((_DWORD *)this + 19))
    goto LABEL_6;
  v5 = *((unsigned int *)this + 18);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = (_QWORD *)*((_QWORD *)this + 8);
    while (!*v7)
    {
      v7 += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_6;
    }
  }
  else
  {
    v7 = (_QWORD *)*((_QWORD *)this + 8);
  }
  v12 = *((_QWORD *)this + 8) + 16 * v5;
LABEL_15:
  if (v7 == (_QWORD *)v12)
    goto LABEL_6;
  v13 = (WebCore::InspectorCanvas *)v7[1];
  if (*(WebCore::CanvasRenderingContext **)(*((_QWORD *)v13 + 2) + 8) != a2)
  {
    while (1)
    {
      v7 += 2;
      if (v7 == (_QWORD *)v12)
        break;
      if (*v7)
        goto LABEL_15;
    }
LABEL_6:
    v8 = *a3;
    if (*a3)
    {
      v9 = *v8;
      v21[0] = *a3;
      v22 = 12;
      *v8 = v9 + 4;
    }
    else
    {
      v21[0] = 0;
      v22 = 12;
    }
    v23[0] = v8;
    v24 = 12;
    v10 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(0, (unint64_t)v23);
    result = WTF::JSONImpl::Value::create(v10);
    if (v24 != -1)
      result = ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v24])(&v20, v23);
    *(_QWORD *)a4 = v19;
    *(_DWORD *)(a4 + 8) = 3;
    *(_BYTE *)(a4 + 16) = 1;
    if (v22 != -1)
      return ((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v22])(v23, v21);
    return result;
  }
  ++*(_DWORD *)v13;
  v14 = *a3;
  if (*a3)
  {
    v15 = *v14;
    v21[0] = *a3;
    v22 = 12;
    *v14 = v15 + 4;
  }
  else
  {
    v21[0] = 0;
    v22 = 12;
  }
  v23[0] = v14;
  v24 = 12;
  v16 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData((uint64_t)v13, (unint64_t)v23);
  result = WTF::JSONImpl::Value::create(v16);
  if (v24 != -1)
    result = ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v24])(&v20, v23);
  *(_QWORD *)a4 = v19;
  *(_DWORD *)(a4 + 8) = 3;
  *(_BYTE *)(a4 + 16) = 1;
  if (v22 != -1)
    result = ((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v22])(v23, v21);
  if (*(_DWORD *)v13 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v13, v17);
    return WTF::fastFree(v13, v18);
  }
  else
  {
    --*(_DWORD *)v13;
  }
  return result;
}

WTF::JSONImpl::Value *WebCore::InspectorCanvasAgent::processArgument@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  WTF::JSONImpl::Value *result;
  uint64_t v9;
  WebCore::InspectorCanvas *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  void *v13;

  if (!*(_DWORD *)(a1 + 76))
    goto LABEL_6;
  v5 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = *(_QWORD **)(a1 + 64);
    while (!*v7)
    {
      v7 += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_6;
    }
  }
  else
  {
    v7 = *(_QWORD **)(a1 + 64);
  }
  v9 = *(_QWORD *)(a1 + 64) + 16 * v5;
LABEL_9:
  if (v7 == (_QWORD *)v9)
    goto LABEL_6;
  v10 = (WebCore::InspectorCanvas *)v7[1];
  if (*(_QWORD *)(*((_QWORD *)v10 + 2) + 8) != a2)
  {
    while (1)
    {
      v7 += 2;
      if (v7 == (_QWORD *)v9)
        break;
      if (*v7)
        goto LABEL_9;
    }
LABEL_6:
    result = WebCore::buildArrayForVector<double>((WTF::JSONImpl::Value **)a4, a3);
    *(_DWORD *)(a4 + 8) = 4;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  ++*(_DWORD *)v10;
  result = WebCore::buildArrayForVector<double>((WTF::JSONImpl::Value **)a4, a3);
  *(_DWORD *)(a4 + 8) = 4;
  *(_BYTE *)(a4 + 16) = 1;
  if (*(_DWORD *)v10 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v10, v11);
    return (WTF::JSONImpl::Value *)WTF::fastFree(v12, v13);
  }
  else
  {
    --*(_DWORD *)v10;
  }
  return result;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  void *v17;
  uint64_t v18;
  WebCore::InspectorCanvas *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  WTF *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;

  if (!*(_DWORD *)(a1 + 76))
    goto LABEL_6;
  v6 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v6)
  {
    v7 = 16 * v6;
    v8 = *(_QWORD **)(a1 + 64);
    while (!*v8)
    {
      v8 += 2;
      v7 -= 16;
      if (!v7)
        goto LABEL_6;
    }
  }
  else
  {
    v8 = *(_QWORD **)(a1 + 64);
  }
  v18 = *(_QWORD *)(a1 + 64) + 16 * v6;
LABEL_17:
  if (v8 == (_QWORD *)v18)
    goto LABEL_6;
  v19 = (WebCore::InspectorCanvas *)v8[1];
  if (*(_QWORD *)(*((_QWORD *)v19 + 2) + 8) != a2)
  {
    while (1)
    {
      v8 += 2;
      if (v8 == (_QWORD *)v18)
        break;
      if (*v8)
        goto LABEL_17;
    }
LABEL_6:
    v30 = 0;
    v31 = 0;
    v9 = *((unsigned int *)a3 + 3);
    if (!(_DWORD)v9)
    {
      v12 = 0;
LABEL_12:
      result = (uint64_t)WebCore::buildArrayForVector<double>((WTF::JSONImpl::Value **)a4, (uint64_t)&v30);
      *(_DWORD *)(a4 + 8) = 4;
      *(_BYTE *)(a4 + 16) = 1;
      if (v12)
        return WTF::fastFree(v12, v17);
      return result;
    }
    if (!(v9 >> 29))
    {
      v10 = WTF::fastMalloc((WTF *)(8 * v9));
      v12 = (WTF *)v10;
      LODWORD(v31) = v9;
      v30 = v10;
      v13 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v13)
      {
        v14 = 0;
        v15 = *a3;
        do
        {
          LODWORD(v11) = *(_DWORD *)(v15 + 4 * v14);
          v11 = (double)*(unint64_t *)&v11;
          *(double *)(v10 + 8 * v14++) = v11;
        }
        while (v13 != v14);
        HIDWORD(v31) = v13;
      }
      goto LABEL_12;
    }
LABEL_35:
    __break(0xC471u);
    JUMPOUT(0x195E1152CLL);
  }
  ++*(_DWORD *)v19;
  v30 = 0;
  v31 = 0;
  v20 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v20)
  {
    if (v20 >> 29)
      goto LABEL_35;
    v21 = WTF::fastMalloc((WTF *)(8 * v20));
    v23 = (WTF *)v21;
    LODWORD(v31) = v20;
    v30 = v21;
    v24 = *((unsigned int *)a3 + 3);
    if ((_DWORD)v24)
    {
      v25 = 0;
      v26 = *a3;
      do
      {
        LODWORD(v22) = *(_DWORD *)(v26 + 4 * v25);
        v22 = (double)*(unint64_t *)&v22;
        *(double *)(v21 + 8 * v25++) = v22;
      }
      while (v24 != v25);
      HIDWORD(v31) = v24;
    }
  }
  else
  {
    v23 = 0;
  }
  result = (uint64_t)WebCore::buildArrayForVector<double>((WTF::JSONImpl::Value **)a4, (uint64_t)&v30);
  *(_DWORD *)(a4 + 8) = 4;
  *(_BYTE *)(a4 + 16) = 1;
  if (v23)
    result = WTF::fastFree(v23, v27);
  if (*(_DWORD *)v19 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v19, (WTF::StringImpl *)v27);
    return WTF::fastFree(v28, v29);
  }
  else
  {
    --*(_DWORD *)v19;
  }
  return result;
}

void WebCore::InspectorCanvasAgent::processArgument(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  WebCore::InspectorCanvas *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  void *v11;

  if (!*(_DWORD *)(a1 + 76))
    goto LABEL_6;
  v4 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    v6 = *(_QWORD **)(a1 + 64);
    while (!*v6)
    {
      v6 += 2;
      v5 -= 16;
      if (!v5)
        goto LABEL_6;
    }
  }
  else
  {
    v6 = *(_QWORD **)(a1 + 64);
  }
  v7 = *(_QWORD *)(a1 + 64) + 16 * v4;
LABEL_9:
  if (v6 == (_QWORD *)v7)
    goto LABEL_6;
  v8 = (WebCore::InspectorCanvas *)v6[1];
  if (*(_QWORD *)(*((_QWORD *)v8 + 2) + 8) != a2)
  {
    while (1)
    {
      v6 += 2;
      if (v6 == (_QWORD *)v7)
        break;
      if (*v6)
        goto LABEL_9;
    }
LABEL_6:
    WebCore::InspectorCanvas::processArgument(a3, a4);
    return;
  }
  ++*(_DWORD *)v8;
  WebCore::InspectorCanvas::processArgument(a3, a4);
  if (*(_DWORD *)v8 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v8, v9);
    WTF::fastFree(v10, v11);
  }
  else
  {
    --*(_DWORD *)v8;
  }
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(WebCore::InspectorCanvasAgent *this@<X0>, WebCore::CanvasRenderingContext *a2@<X1>, double a3@<D0>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  WebCore::InspectorCanvas *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;

  if (!*((_DWORD *)this + 19))
    goto LABEL_6;
  v5 = *((unsigned int *)this + 18);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = (_QWORD *)*((_QWORD *)this + 8);
    while (!*v7)
    {
      v7 += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_6;
    }
  }
  else
  {
    v7 = (_QWORD *)*((_QWORD *)this + 8);
  }
  v9 = *((_QWORD *)this + 8) + 16 * v5;
LABEL_9:
  if (v7 == (_QWORD *)v9)
    goto LABEL_6;
  v10 = (WebCore::InspectorCanvas *)v7[1];
  if (*(WebCore::CanvasRenderingContext **)(*((_QWORD *)v10 + 2) + 8) != a2)
  {
    while (1)
    {
      v7 += 2;
      if (v7 == (_QWORD *)v9)
        break;
      if (*v7)
        goto LABEL_9;
    }
LABEL_6:
    result = WTF::JSONImpl::Value::create(this, a3);
    *(_QWORD *)a4 = v14;
    *(_DWORD *)(a4 + 8) = 1;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  ++*(_DWORD *)v10;
  result = WTF::JSONImpl::Value::create(this, a3);
  *(_QWORD *)a4 = v14;
  *(_DWORD *)(a4 + 8) = 1;
  *(_BYTE *)(a4 + 16) = 1;
  if (*(_DWORD *)v10 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v10, v11);
    return WTF::fastFree(v12, v13);
  }
  else
  {
    --*(_DWORD *)v10;
  }
  return result;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(WebCore::InspectorCanvasAgent *this@<X0>, WebCore::CanvasRenderingContext *a2@<X1>, float a3@<S0>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  WebCore::InspectorCanvas *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;

  if (!*((_DWORD *)this + 19))
    goto LABEL_6;
  v5 = *((unsigned int *)this + 18);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = (_QWORD *)*((_QWORD *)this + 8);
    while (!*v7)
    {
      v7 += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_6;
    }
  }
  else
  {
    v7 = (_QWORD *)*((_QWORD *)this + 8);
  }
  v9 = *((_QWORD *)this + 8) + 16 * v5;
LABEL_9:
  if (v7 == (_QWORD *)v9)
    goto LABEL_6;
  v10 = (WebCore::InspectorCanvas *)v7[1];
  if (*(WebCore::CanvasRenderingContext **)(*((_QWORD *)v10 + 2) + 8) != a2)
  {
    while (1)
    {
      v7 += 2;
      if (v7 == (_QWORD *)v9)
        break;
      if (*v7)
        goto LABEL_9;
    }
LABEL_6:
    result = WTF::JSONImpl::Value::create(this, a3);
    *(_QWORD *)a4 = v14;
    *(_DWORD *)(a4 + 8) = 1;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  ++*(_DWORD *)v10;
  result = WTF::JSONImpl::Value::create(this, a3);
  *(_QWORD *)a4 = v14;
  *(_DWORD *)(a4 + 8) = 1;
  *(_BYTE *)(a4 + 16) = 1;
  if (*(_DWORD *)v10 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v10, v11);
    return WTF::fastFree(v12, v13);
  }
  else
  {
    --*(_DWORD *)v10;
  }
  return result;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(WebCore::InspectorCanvasAgent *this@<X0>, WebCore::CanvasRenderingContext *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  WebCore::InspectorCanvas *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;

  if (!*((_DWORD *)this + 19))
    goto LABEL_6;
  v5 = *((unsigned int *)this + 18);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = (_QWORD *)*((_QWORD *)this + 8);
    while (!*v7)
    {
      v7 += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_6;
    }
  }
  else
  {
    v7 = (_QWORD *)*((_QWORD *)this + 8);
  }
  v9 = *((_QWORD *)this + 8) + 16 * v5;
LABEL_9:
  if (v7 == (_QWORD *)v9)
    goto LABEL_6;
  v10 = (WebCore::InspectorCanvas *)v7[1];
  if (*(WebCore::CanvasRenderingContext **)(*((_QWORD *)v10 + 2) + 8) != a2)
  {
    while (1)
    {
      v7 += 2;
      if (v7 == (_QWORD *)v9)
        break;
      if (*v7)
        goto LABEL_9;
    }
LABEL_6:
    result = WTF::JSONImpl::Value::create(this, (double)a3);
    *(_QWORD *)a4 = v14;
    *(_DWORD *)(a4 + 8) = 1;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  ++*(_DWORD *)v10;
  result = WTF::JSONImpl::Value::create(this, (double)a3);
  *(_QWORD *)a4 = v14;
  *(_DWORD *)(a4 + 8) = 1;
  *(_BYTE *)(a4 + 16) = 1;
  if (*(_DWORD *)v10 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v10, v11);
    return WTF::fastFree(v12, v13);
  }
  else
  {
    --*(_DWORD *)v10;
  }
  return result;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(WebCore::InspectorCanvasAgent *this@<X0>, WebCore::CanvasRenderingContext *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  WebCore::InspectorCanvas *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;

  if (!*((_DWORD *)this + 19))
    goto LABEL_6;
  v5 = *((unsigned int *)this + 18);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = (_QWORD *)*((_QWORD *)this + 8);
    while (!*v7)
    {
      v7 += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_6;
    }
  }
  else
  {
    v7 = (_QWORD *)*((_QWORD *)this + 8);
  }
  v9 = *((_QWORD *)this + 8) + 16 * v5;
LABEL_9:
  if (v7 == (_QWORD *)v9)
    goto LABEL_6;
  v10 = (WebCore::InspectorCanvas *)v7[1];
  if (*(WebCore::CanvasRenderingContext **)(*((_QWORD *)v10 + 2) + 8) != a2)
  {
    while (1)
    {
      v7 += 2;
      if (v7 == (_QWORD *)v9)
        break;
      if (*v7)
        goto LABEL_9;
    }
LABEL_6:
    result = WTF::JSONImpl::Value::create(this, (double)a3);
    *(_QWORD *)a4 = v14;
    *(_DWORD *)(a4 + 8) = 1;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  ++*(_DWORD *)v10;
  result = WTF::JSONImpl::Value::create(this, (double)a3);
  *(_QWORD *)a4 = v14;
  *(_DWORD *)(a4 + 8) = 1;
  *(_BYTE *)(a4 + 16) = 1;
  if (*(_DWORD *)v10 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v10, v11);
    return WTF::fastFree(v12, v13);
  }
  else
  {
    --*(_DWORD *)v10;
  }
  return result;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(WebCore::InspectorCanvasAgent *this@<X0>, WebCore::CanvasRenderingContext *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  WebCore::InspectorCanvas *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;

  if (!*((_DWORD *)this + 19))
    goto LABEL_6;
  v5 = *((unsigned int *)this + 18);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = (_QWORD *)*((_QWORD *)this + 8);
    while (!*v7)
    {
      v7 += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_6;
    }
  }
  else
  {
    v7 = (_QWORD *)*((_QWORD *)this + 8);
  }
  v9 = *((_QWORD *)this + 8) + 16 * v5;
LABEL_9:
  if (v7 == (_QWORD *)v9)
    goto LABEL_6;
  v10 = (WebCore::InspectorCanvas *)v7[1];
  if (*(WebCore::CanvasRenderingContext **)(*((_QWORD *)v10 + 2) + 8) != a2)
  {
    while (1)
    {
      v7 += 2;
      if (v7 == (_QWORD *)v9)
        break;
      if (*v7)
        goto LABEL_9;
    }
LABEL_6:
    result = WTF::JSONImpl::Value::create(this, (double)a3);
    *(_QWORD *)a4 = v14;
    *(_DWORD *)(a4 + 8) = 1;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  ++*(_DWORD *)v10;
  result = WTF::JSONImpl::Value::create(this, (double)a3);
  *(_QWORD *)a4 = v14;
  *(_DWORD *)(a4 + 8) = 1;
  *(_BYTE *)(a4 + 16) = 1;
  if (*(_DWORD *)v10 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v10, v11);
    return WTF::fastFree(v12, v13);
  }
  else
  {
    --*(_DWORD *)v10;
  }
  return result;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(WebCore::InspectorCanvasAgent *this@<X0>, WebCore::CanvasRenderingContext *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  WebCore::InspectorCanvas *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;

  if (!*((_DWORD *)this + 19))
    goto LABEL_6;
  v5 = *((unsigned int *)this + 18);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = (_QWORD *)*((_QWORD *)this + 8);
    while (!*v7)
    {
      v7 += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_6;
    }
  }
  else
  {
    v7 = (_QWORD *)*((_QWORD *)this + 8);
  }
  v9 = *((_QWORD *)this + 8) + 16 * v5;
LABEL_9:
  if (v7 == (_QWORD *)v9)
    goto LABEL_6;
  v10 = (WebCore::InspectorCanvas *)v7[1];
  if (*(WebCore::CanvasRenderingContext **)(*((_QWORD *)v10 + 2) + 8) != a2)
  {
    while (1)
    {
      v7 += 2;
      if (v7 == (_QWORD *)v9)
        break;
      if (*v7)
        goto LABEL_9;
    }
LABEL_6:
    result = WTF::JSONImpl::Value::create(this, (double)a3);
    *(_QWORD *)a4 = v14;
    *(_DWORD *)(a4 + 8) = 1;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  ++*(_DWORD *)v10;
  result = WTF::JSONImpl::Value::create(this, (double)a3);
  *(_QWORD *)a4 = v14;
  *(_DWORD *)(a4 + 8) = 1;
  *(_BYTE *)(a4 + 16) = 1;
  if (*(_DWORD *)v10 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v10, v11);
    return WTF::fastFree(v12, v13);
  }
  else
  {
    --*(_DWORD *)v10;
  }
  return result;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(WebCore::InspectorCanvasAgent *this@<X0>, WebCore::CanvasRenderingContext *a2@<X1>, WTF::JSONImpl::Value *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  WebCore::InspectorCanvas *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;

  if (!*((_DWORD *)this + 19))
    goto LABEL_6;
  v5 = *((unsigned int *)this + 18);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = (_QWORD *)*((_QWORD *)this + 8);
    while (!*v7)
    {
      v7 += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_6;
    }
  }
  else
  {
    v7 = (_QWORD *)*((_QWORD *)this + 8);
  }
  v9 = *((_QWORD *)this + 8) + 16 * v5;
LABEL_9:
  if (v7 == (_QWORD *)v9)
    goto LABEL_6;
  v10 = (WebCore::InspectorCanvas *)v7[1];
  if (*(WebCore::CanvasRenderingContext **)(*((_QWORD *)v10 + 2) + 8) != a2)
  {
    while (1)
    {
      v7 += 2;
      if (v7 == (_QWORD *)v9)
        break;
      if (*v7)
        goto LABEL_9;
    }
LABEL_6:
    result = WTF::JSONImpl::Value::create(a3);
    *(_QWORD *)a4 = v14;
    *(_DWORD *)(a4 + 8) = 2;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  ++*(_DWORD *)v10;
  result = WTF::JSONImpl::Value::create(a3);
  *(_QWORD *)a4 = v14;
  *(_DWORD *)(a4 + 8) = 2;
  *(_BYTE *)(a4 + 16) = 1;
  if (*(_DWORD *)v10 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v10, v11);
    return WTF::fastFree(v12, v13);
  }
  else
  {
    --*(_DWORD *)v10;
  }
  return result;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(uint64_t result@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::InspectorCanvas *v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  WebCore::InspectorCanvasAgent *v13;
  WebCore::CanvasRenderingContext *v14;
  WebCore::WebGLBuffer *v15;
  WebCore::InspectorCanvas *v16;
  WebCore::InspectorCanvas **v17;

  if (!*(_DWORD *)(result + 76))
    goto LABEL_6;
  v4 = *(unsigned int *)(result + 72);
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    v6 = *(_QWORD **)(result + 64);
    while (!*v6)
    {
      v6 += 2;
      v5 -= 16;
      if (!v5)
        goto LABEL_6;
    }
  }
  else
  {
    v6 = *(_QWORD **)(result + 64);
  }
  v8 = *(_QWORD *)(result + 64) + 16 * v4;
LABEL_12:
  if (v6 == (_QWORD *)v8)
    goto LABEL_6;
  v9 = (WebCore::InspectorCanvas *)v6[1];
  if (*(WTF::StringImpl **)(*((_QWORD *)v9 + 2) + 8) != a2)
  {
    while (1)
    {
      v6 += 2;
      if (v6 == (_QWORD *)v8)
        break;
      if (*v6)
        goto LABEL_12;
    }
LABEL_6:
    if (!*(_BYTE *)(a3 + 16))
    {
      *a4 = 0;
      a4[16] = 0;
      return result;
    }
    v16 = 0;
    v7 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v7 != -1)
    {
      v17 = &v16;
      return ((uint64_t (*)(WebCore::InspectorCanvas ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15InspectorCanvas15processArgumentERNS_8optionalINS_7variantIJNS6_6RefPtrIN3JSC11ArrayBufferENS6_12RawPtrTraitsISE_EENS6_21DefaultRefDerefTraitsISE_EEEENSC_INSD_15ArrayBufferViewENSF_ISK_EENSH_ISK_EEEEEEEEEE3__0JEEEEEJRNS0_6__implIJSJ_SN_EEEEEEDcOT_DpOT0____fmatrix[v7])(&v17, a3);
    }
    goto LABEL_24;
  }
  ++*(_DWORD *)v9;
  if (*(_BYTE *)(a3 + 16))
  {
    v16 = v9;
    v10 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v10 == -1)
    {
LABEL_24:
      v13 = (WebCore::InspectorCanvasAgent *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::InspectorCanvasAgent::processArgument(v13, v14, v15);
    }
    v17 = &v16;
    result = ((uint64_t (*)(WebCore::InspectorCanvas ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15InspectorCanvas15processArgumentERNS_8optionalINS_7variantIJNS6_6RefPtrIN3JSC11ArrayBufferENS6_12RawPtrTraitsISE_EENS6_21DefaultRefDerefTraitsISE_EEEENSC_INSD_15ArrayBufferViewENSF_ISK_EENSH_ISK_EEEEEEEEEE3__0JEEEEEJRNS0_6__implIJSJ_SN_EEEEEEDcOT_DpOT0____fmatrix[v10])(&v17, a3);
  }
  else
  {
    *a4 = 0;
    a4[16] = 0;
  }
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v9, a2);
    return WTF::fastFree(v11, v12);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  return result;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(uint64_t this@<X0>, WebCore::CanvasRenderingContext *a2@<X1>, WebCore::WebGLBuffer *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  WebCore::InspectorCanvas *v10;
  int v11;
  char v12;
  WTF *v13;
  void *v14;
  uint64_t v15;

  if (!*(_DWORD *)(this + 76))
    goto LABEL_6;
  v5 = *(unsigned int *)(this + 72);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = *(_QWORD **)(this + 64);
    while (!*v7)
    {
      v7 += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_6;
    }
  }
  else
  {
    v7 = *(_QWORD **)(this + 64);
  }
  v9 = *(_QWORD *)(this + 64) + 16 * v5;
LABEL_12:
  if (v7 == (_QWORD *)v9)
    goto LABEL_6;
  v10 = (WebCore::InspectorCanvas *)v7[1];
  if (*(WebCore::CanvasRenderingContext **)(*((_QWORD *)v10 + 2) + 8) != a2)
  {
    while (1)
    {
      v7 += 2;
      if (v7 == (_QWORD *)v9)
        break;
      if (*v7)
        goto LABEL_12;
    }
LABEL_6:
    if (a3)
    {
      this = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned int *)a3 + 6));
      *(_QWORD *)a4 = v15;
      *(_DWORD *)(a4 + 8) = 12;
      v8 = 1;
    }
    else
    {
      v8 = 0;
      *(_BYTE *)a4 = 0;
    }
    *(_BYTE *)(a4 + 16) = v8;
    return this;
  }
  v11 = (*(_DWORD *)v10)++;
  if (a3)
  {
    this = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned int *)a3 + 6));
    *(_QWORD *)a4 = v15;
    *(_DWORD *)(a4 + 8) = 12;
    v11 = *(_DWORD *)v10 - 1;
    v12 = 1;
  }
  else
  {
    v12 = 0;
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 16) = v12;
  if (v11)
  {
    *(_DWORD *)v10 = v11;
  }
  else
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v10, a2);
    return WTF::fastFree(v13, v14);
  }
  return this;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(uint64_t this@<X0>, WebCore::CanvasRenderingContext *a2@<X1>, WebCore::WebGLFramebuffer *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  WebCore::InspectorCanvas *v10;
  int v11;
  char v12;
  WTF *v13;
  void *v14;
  uint64_t v15;

  if (!*(_DWORD *)(this + 76))
    goto LABEL_6;
  v5 = *(unsigned int *)(this + 72);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = *(_QWORD **)(this + 64);
    while (!*v7)
    {
      v7 += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_6;
    }
  }
  else
  {
    v7 = *(_QWORD **)(this + 64);
  }
  v9 = *(_QWORD *)(this + 64) + 16 * v5;
LABEL_12:
  if (v7 == (_QWORD *)v9)
    goto LABEL_6;
  v10 = (WebCore::InspectorCanvas *)v7[1];
  if (*(WebCore::CanvasRenderingContext **)(*((_QWORD *)v10 + 2) + 8) != a2)
  {
    while (1)
    {
      v7 += 2;
      if (v7 == (_QWORD *)v9)
        break;
      if (*v7)
        goto LABEL_12;
    }
LABEL_6:
    if (a3)
    {
      this = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned int *)a3 + 6));
      *(_QWORD *)a4 = v15;
      *(_DWORD *)(a4 + 8) = 13;
      v8 = 1;
    }
    else
    {
      v8 = 0;
      *(_BYTE *)a4 = 0;
    }
    *(_BYTE *)(a4 + 16) = v8;
    return this;
  }
  v11 = (*(_DWORD *)v10)++;
  if (a3)
  {
    this = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned int *)a3 + 6));
    *(_QWORD *)a4 = v15;
    *(_DWORD *)(a4 + 8) = 13;
    v11 = *(_DWORD *)v10 - 1;
    v12 = 1;
  }
  else
  {
    v12 = 0;
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 16) = v12;
  if (v11)
  {
    *(_DWORD *)v10 = v11;
  }
  else
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v10, a2);
    return WTF::fastFree(v13, v14);
  }
  return this;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(uint64_t this@<X0>, WebCore::CanvasRenderingContext *a2@<X1>, WebCore::WebGLQuery *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  WebCore::InspectorCanvas *v10;
  int v11;
  char v12;
  WTF *v13;
  void *v14;
  uint64_t v15;

  if (!*(_DWORD *)(this + 76))
    goto LABEL_6;
  v5 = *(unsigned int *)(this + 72);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = *(_QWORD **)(this + 64);
    while (!*v7)
    {
      v7 += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_6;
    }
  }
  else
  {
    v7 = *(_QWORD **)(this + 64);
  }
  v9 = *(_QWORD *)(this + 64) + 16 * v5;
LABEL_12:
  if (v7 == (_QWORD *)v9)
    goto LABEL_6;
  v10 = (WebCore::InspectorCanvas *)v7[1];
  if (*(WebCore::CanvasRenderingContext **)(*((_QWORD *)v10 + 2) + 8) != a2)
  {
    while (1)
    {
      v7 += 2;
      if (v7 == (_QWORD *)v9)
        break;
      if (*v7)
        goto LABEL_12;
    }
LABEL_6:
    if (a3)
    {
      this = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned int *)a3 + 6));
      *(_QWORD *)a4 = v15;
      *(_DWORD *)(a4 + 8) = 20;
      v8 = 1;
    }
    else
    {
      v8 = 0;
      *(_BYTE *)a4 = 0;
    }
    *(_BYTE *)(a4 + 16) = v8;
    return this;
  }
  v11 = (*(_DWORD *)v10)++;
  if (a3)
  {
    this = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned int *)a3 + 6));
    *(_QWORD *)a4 = v15;
    *(_DWORD *)(a4 + 8) = 20;
    v11 = *(_DWORD *)v10 - 1;
    v12 = 1;
  }
  else
  {
    v12 = 0;
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 16) = v12;
  if (v11)
  {
    *(_DWORD *)v10 = v11;
  }
  else
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v10, a2);
    return WTF::fastFree(v13, v14);
  }
  return this;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(uint64_t this@<X0>, WebCore::CanvasRenderingContext *a2@<X1>, WebCore::WebGLRenderbuffer *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  WebCore::InspectorCanvas *v10;
  int v11;
  char v12;
  WTF *v13;
  void *v14;
  uint64_t v15;

  if (!*(_DWORD *)(this + 76))
    goto LABEL_6;
  v5 = *(unsigned int *)(this + 72);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = *(_QWORD **)(this + 64);
    while (!*v7)
    {
      v7 += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_6;
    }
  }
  else
  {
    v7 = *(_QWORD **)(this + 64);
  }
  v9 = *(_QWORD *)(this + 64) + 16 * v5;
LABEL_12:
  if (v7 == (_QWORD *)v9)
    goto LABEL_6;
  v10 = (WebCore::InspectorCanvas *)v7[1];
  if (*(WebCore::CanvasRenderingContext **)(*((_QWORD *)v10 + 2) + 8) != a2)
  {
    while (1)
    {
      v7 += 2;
      if (v7 == (_QWORD *)v9)
        break;
      if (*v7)
        goto LABEL_12;
    }
LABEL_6:
    if (a3)
    {
      this = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned int *)a3 + 6));
      *(_QWORD *)a4 = v15;
      *(_DWORD *)(a4 + 8) = 14;
      v8 = 1;
    }
    else
    {
      v8 = 0;
      *(_BYTE *)a4 = 0;
    }
    *(_BYTE *)(a4 + 16) = v8;
    return this;
  }
  v11 = (*(_DWORD *)v10)++;
  if (a3)
  {
    this = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned int *)a3 + 6));
    *(_QWORD *)a4 = v15;
    *(_DWORD *)(a4 + 8) = 14;
    v11 = *(_DWORD *)v10 - 1;
    v12 = 1;
  }
  else
  {
    v12 = 0;
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 16) = v12;
  if (v11)
  {
    *(_DWORD *)v10 = v11;
  }
  else
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v10, a2);
    return WTF::fastFree(v13, v14);
  }
  return this;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(uint64_t this@<X0>, WebCore::CanvasRenderingContext *a2@<X1>, WebCore::WebGLSampler *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  WebCore::InspectorCanvas *v10;
  int v11;
  char v12;
  WTF *v13;
  void *v14;
  uint64_t v15;

  if (!*(_DWORD *)(this + 76))
    goto LABEL_6;
  v5 = *(unsigned int *)(this + 72);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = *(_QWORD **)(this + 64);
    while (!*v7)
    {
      v7 += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_6;
    }
  }
  else
  {
    v7 = *(_QWORD **)(this + 64);
  }
  v9 = *(_QWORD *)(this + 64) + 16 * v5;
LABEL_12:
  if (v7 == (_QWORD *)v9)
    goto LABEL_6;
  v10 = (WebCore::InspectorCanvas *)v7[1];
  if (*(WebCore::CanvasRenderingContext **)(*((_QWORD *)v10 + 2) + 8) != a2)
  {
    while (1)
    {
      v7 += 2;
      if (v7 == (_QWORD *)v9)
        break;
      if (*v7)
        goto LABEL_12;
    }
LABEL_6:
    if (a3)
    {
      this = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned int *)a3 + 6));
      *(_QWORD *)a4 = v15;
      *(_DWORD *)(a4 + 8) = 21;
      v8 = 1;
    }
    else
    {
      v8 = 0;
      *(_BYTE *)a4 = 0;
    }
    *(_BYTE *)(a4 + 16) = v8;
    return this;
  }
  v11 = (*(_DWORD *)v10)++;
  if (a3)
  {
    this = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned int *)a3 + 6));
    *(_QWORD *)a4 = v15;
    *(_DWORD *)(a4 + 8) = 21;
    v11 = *(_DWORD *)v10 - 1;
    v12 = 1;
  }
  else
  {
    v12 = 0;
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 16) = v12;
  if (v11)
  {
    *(_DWORD *)v10 = v11;
  }
  else
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v10, a2);
    return WTF::fastFree(v13, v14);
  }
  return this;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(uint64_t this@<X0>, WebCore::CanvasRenderingContext *a2@<X1>, WebCore::WebGLShader *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  WebCore::InspectorCanvas *v10;
  int v11;
  char v12;
  WTF *v13;
  void *v14;
  uint64_t v15;

  if (!*(_DWORD *)(this + 76))
    goto LABEL_6;
  v5 = *(unsigned int *)(this + 72);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = *(_QWORD **)(this + 64);
    while (!*v7)
    {
      v7 += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_6;
    }
  }
  else
  {
    v7 = *(_QWORD **)(this + 64);
  }
  v9 = *(_QWORD *)(this + 64) + 16 * v5;
LABEL_12:
  if (v7 == (_QWORD *)v9)
    goto LABEL_6;
  v10 = (WebCore::InspectorCanvas *)v7[1];
  if (*(WebCore::CanvasRenderingContext **)(*((_QWORD *)v10 + 2) + 8) != a2)
  {
    while (1)
    {
      v7 += 2;
      if (v7 == (_QWORD *)v9)
        break;
      if (*v7)
        goto LABEL_12;
    }
LABEL_6:
    if (a3)
    {
      this = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned int *)a3 + 6));
      *(_QWORD *)a4 = v15;
      *(_DWORD *)(a4 + 8) = 16;
      v8 = 1;
    }
    else
    {
      v8 = 0;
      *(_BYTE *)a4 = 0;
    }
    *(_BYTE *)(a4 + 16) = v8;
    return this;
  }
  v11 = (*(_DWORD *)v10)++;
  if (a3)
  {
    this = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned int *)a3 + 6));
    *(_QWORD *)a4 = v15;
    *(_DWORD *)(a4 + 8) = 16;
    v11 = *(_DWORD *)v10 - 1;
    v12 = 1;
  }
  else
  {
    v12 = 0;
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 16) = v12;
  if (v11)
  {
    *(_DWORD *)v10 = v11;
  }
  else
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v10, a2);
    return WTF::fastFree(v13, v14);
  }
  return this;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(uint64_t this@<X0>, WebCore::CanvasRenderingContext *a2@<X1>, WebCore::WebGLSync *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  WebCore::InspectorCanvas *v10;
  int v11;
  char v12;
  WTF *v13;
  void *v14;
  uint64_t v15;

  if (!*(_DWORD *)(this + 76))
    goto LABEL_6;
  v5 = *(unsigned int *)(this + 72);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = *(_QWORD **)(this + 64);
    while (!*v7)
    {
      v7 += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_6;
    }
  }
  else
  {
    v7 = *(_QWORD **)(this + 64);
  }
  v9 = *(_QWORD *)(this + 64) + 16 * v5;
LABEL_12:
  if (v7 == (_QWORD *)v9)
    goto LABEL_6;
  v10 = (WebCore::InspectorCanvas *)v7[1];
  if (*(WebCore::CanvasRenderingContext **)(*((_QWORD *)v10 + 2) + 8) != a2)
  {
    while (1)
    {
      v7 += 2;
      if (v7 == (_QWORD *)v9)
        break;
      if (*v7)
        goto LABEL_12;
    }
LABEL_6:
    if (a3)
    {
      this = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned int *)a3 + 6));
      *(_QWORD *)a4 = v15;
      *(_DWORD *)(a4 + 8) = 22;
      v8 = 1;
    }
    else
    {
      v8 = 0;
      *(_BYTE *)a4 = 0;
    }
    *(_BYTE *)(a4 + 16) = v8;
    return this;
  }
  v11 = (*(_DWORD *)v10)++;
  if (a3)
  {
    this = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned int *)a3 + 6));
    *(_QWORD *)a4 = v15;
    *(_DWORD *)(a4 + 8) = 22;
    v11 = *(_DWORD *)v10 - 1;
    v12 = 1;
  }
  else
  {
    v12 = 0;
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 16) = v12;
  if (v11)
  {
    *(_DWORD *)v10 = v11;
  }
  else
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v10, a2);
    return WTF::fastFree(v13, v14);
  }
  return this;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(uint64_t this@<X0>, WebCore::CanvasRenderingContext *a2@<X1>, WebCore::WebGLTexture *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  WebCore::InspectorCanvas *v10;
  int v11;
  char v12;
  WTF *v13;
  void *v14;
  uint64_t v15;

  if (!*(_DWORD *)(this + 76))
    goto LABEL_6;
  v5 = *(unsigned int *)(this + 72);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = *(_QWORD **)(this + 64);
    while (!*v7)
    {
      v7 += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_6;
    }
  }
  else
  {
    v7 = *(_QWORD **)(this + 64);
  }
  v9 = *(_QWORD *)(this + 64) + 16 * v5;
LABEL_12:
  if (v7 == (_QWORD *)v9)
    goto LABEL_6;
  v10 = (WebCore::InspectorCanvas *)v7[1];
  if (*(WebCore::CanvasRenderingContext **)(*((_QWORD *)v10 + 2) + 8) != a2)
  {
    while (1)
    {
      v7 += 2;
      if (v7 == (_QWORD *)v9)
        break;
      if (*v7)
        goto LABEL_12;
    }
LABEL_6:
    if (a3)
    {
      this = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned int *)a3 + 6));
      *(_QWORD *)a4 = v15;
      *(_DWORD *)(a4 + 8) = 15;
      v8 = 1;
    }
    else
    {
      v8 = 0;
      *(_BYTE *)a4 = 0;
    }
    *(_BYTE *)(a4 + 16) = v8;
    return this;
  }
  v11 = (*(_DWORD *)v10)++;
  if (a3)
  {
    this = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned int *)a3 + 6));
    *(_QWORD *)a4 = v15;
    *(_DWORD *)(a4 + 8) = 15;
    v11 = *(_DWORD *)v10 - 1;
    v12 = 1;
  }
  else
  {
    v12 = 0;
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 16) = v12;
  if (v11)
  {
    *(_DWORD *)v10 = v11;
  }
  else
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v10, a2);
    return WTF::fastFree(v13, v14);
  }
  return this;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(uint64_t this@<X0>, WebCore::CanvasRenderingContext *a2@<X1>, WebCore::WebGLTransformFeedback *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  WebCore::InspectorCanvas *v10;
  int v11;
  char v12;
  WTF *v13;
  void *v14;
  uint64_t v15;

  if (!*(_DWORD *)(this + 76))
    goto LABEL_6;
  v5 = *(unsigned int *)(this + 72);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = *(_QWORD **)(this + 64);
    while (!*v7)
    {
      v7 += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_6;
    }
  }
  else
  {
    v7 = *(_QWORD **)(this + 64);
  }
  v9 = *(_QWORD *)(this + 64) + 16 * v5;
LABEL_12:
  if (v7 == (_QWORD *)v9)
    goto LABEL_6;
  v10 = (WebCore::InspectorCanvas *)v7[1];
  if (*(WebCore::CanvasRenderingContext **)(*((_QWORD *)v10 + 2) + 8) != a2)
  {
    while (1)
    {
      v7 += 2;
      if (v7 == (_QWORD *)v9)
        break;
      if (*v7)
        goto LABEL_12;
    }
LABEL_6:
    if (a3)
    {
      this = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned int *)a3 + 6));
      *(_QWORD *)a4 = v15;
      *(_DWORD *)(a4 + 8) = 23;
      v8 = 1;
    }
    else
    {
      v8 = 0;
      *(_BYTE *)a4 = 0;
    }
    *(_BYTE *)(a4 + 16) = v8;
    return this;
  }
  v11 = (*(_DWORD *)v10)++;
  if (a3)
  {
    this = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned int *)a3 + 6));
    *(_QWORD *)a4 = v15;
    *(_DWORD *)(a4 + 8) = 23;
    v11 = *(_DWORD *)v10 - 1;
    v12 = 1;
  }
  else
  {
    v12 = 0;
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 16) = v12;
  if (v11)
  {
    *(_DWORD *)v10 = v11;
  }
  else
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v10, a2);
    return WTF::fastFree(v13, v14);
  }
  return this;
}

uint64_t WebCore::InspectorCanvasAgent::processArgument@<X0>(uint64_t this@<X0>, WebCore::CanvasRenderingContext *a2@<X1>, WebCore::WebGLVertexArrayObject *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  WebCore::InspectorCanvas *v10;
  int v11;
  char v12;
  WTF *v13;
  void *v14;
  uint64_t v15;

  if (!*(_DWORD *)(this + 76))
    goto LABEL_6;
  v5 = *(unsigned int *)(this + 72);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = *(_QWORD **)(this + 64);
    while (!*v7)
    {
      v7 += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_6;
    }
  }
  else
  {
    v7 = *(_QWORD **)(this + 64);
  }
  v9 = *(_QWORD *)(this + 64) + 16 * v5;
LABEL_12:
  if (v7 == (_QWORD *)v9)
    goto LABEL_6;
  v10 = (WebCore::InspectorCanvas *)v7[1];
  if (*(WebCore::CanvasRenderingContext **)(*((_QWORD *)v10 + 2) + 8) != a2)
  {
    while (1)
    {
      v7 += 2;
      if (v7 == (_QWORD *)v9)
        break;
      if (*v7)
        goto LABEL_12;
    }
LABEL_6:
    if (a3)
    {
      this = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned int *)a3 + 6));
      *(_QWORD *)a4 = v15;
      *(_DWORD *)(a4 + 8) = 24;
      v8 = 1;
    }
    else
    {
      v8 = 0;
      *(_BYTE *)a4 = 0;
    }
    *(_BYTE *)(a4 + 16) = v8;
    return this;
  }
  v11 = (*(_DWORD *)v10)++;
  if (a3)
  {
    this = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned int *)a3 + 6));
    *(_QWORD *)a4 = v15;
    *(_DWORD *)(a4 + 8) = 24;
    v11 = *(_DWORD *)v10 - 1;
    v12 = 1;
  }
  else
  {
    v12 = 0;
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 16) = v12;
  if (v11)
  {
    *(_DWORD *)v10 = v11;
  }
  else
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v10, a2);
    return WTF::fastFree(v13, v14);
  }
  return this;
}

uint64_t WebCore::InspectorCanvasAgent::recordAction(uint64_t a1, WebCore::CanvasRenderingContext *a2, const WTF::StringImpl *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  WTF *v25;
  void *v26;
  uint64_t v27[3];

  if (*(_DWORD *)(a1 + 76))
  {
    v8 = *(unsigned int *)(a1 + 72);
    if ((_DWORD)v8)
    {
      v9 = 16 * v8;
      v10 = *(_QWORD **)(a1 + 64);
      while (!*v10)
      {
        v10 += 2;
        v9 -= 16;
        if (!v9)
          goto LABEL_14;
      }
    }
    else
    {
      v10 = *(_QWORD **)(a1 + 64);
    }
    v11 = *(_QWORD *)(a1 + 64) + 16 * v8;
    if (v10 != (_QWORD *)v11)
    {
LABEL_9:
      v12 = v10[1];
      if (*(WebCore::CanvasRenderingContext **)(*(_QWORD *)(v12 + 16) + 8) == a2)
      {
        ++*(_DWORD *)v12;
        goto LABEL_15;
      }
      while (1)
      {
        v10 += 2;
        if (v10 == (_QWORD *)v11)
          break;
        if (*v10)
        {
          v12 = 0;
          if (v10 != (_QWORD *)v11)
            goto LABEL_9;
          goto LABEL_15;
        }
      }
    }
  }
LABEL_14:
  v12 = 0;
LABEL_15:
  if (!*(_DWORD *)(a1 + 284))
  {
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 16) + 8) + 32);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 144))(v15);
    if (v16)
    {
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 104))(v16);
      v18 = *(_QWORD *)(a1 + 48);
      if (v18)
        goto LABEL_34;
      v18 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = a1 + 40;
      v20 = *(unsigned int **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v18;
      if (!v20)
        goto LABEL_34;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, v19);
      }
      v18 = *(_QWORD *)(a1 + 48);
      if (v18)
      {
LABEL_34:
        do
          v23 = __ldaxr((unsigned int *)v18);
        while (__stlxr(v23 + 1, (unsigned int *)v18));
      }
      v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v24 = &off_1E33EFB80;
      v24[1] = v18;
      v27[0] = (uint64_t)v24;
      WebCore::EventLoopTaskGroup::queueMicrotask(v17, v27);
      if (v27[0])
        (*(void (**)(uint64_t))(*(_QWORD *)v27[0] + 8))(v27[0]);
    }
  }
  WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add(a1 + 272, (WTF::StringImpl **)(v12 + 8), a3, (uint64_t)v27);
  result = (uint64_t)WebCore::InspectorCanvas::recordAction((WebCore::InspectorCanvas *)v12, a3, a4);
  if (*(_QWORD *)(v12 + 104) >= *(_QWORD *)(v12 + 96))
    result = WebCore::InspectorCanvasAgent::didFinishRecordingCanvasFrame(a1, a2, 1);
  if (*(_DWORD *)v12 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas((WebCore::InspectorCanvas *)v12, v14);
    return WTF::fastFree(v25, v26);
  }
  else
  {
    --*(_DWORD *)v12;
  }
  return result;
}

WTF *WebCore::RevalidateStyleAttributeTask::timerFired(WebCore::RevalidateStyleAttributeTask *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  _DWORD *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int i;
  uint64_t v27;
  uint64_t v28;
  WTF::JSONImpl::Value *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  WebCore::InspectorStyleSheetForInlineStyle *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  void *v45;
  _DWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  WTF *result;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;

  v52 = 0;
  v53 = 0;
  v2 = *((_QWORD *)this + 8);
  if (!v2)
  {
    v5 = 0;
    v3 = 0;
LABEL_10:
    v4 = (_QWORD *)(v2 + 8 * v3);
    goto LABEL_11;
  }
  v3 = *(unsigned int *)(v2 - 4);
  v4 = (_QWORD *)(v2 + 8 * v3);
  if (!*(_DWORD *)(v2 - 12))
  {
    v5 = (_QWORD *)(v2 + 8 * v3);
    goto LABEL_10;
  }
  v5 = (_QWORD *)*((_QWORD *)this + 8);
  if ((_DWORD)v3)
  {
    v6 = 8 * v3;
    v5 = (_QWORD *)*((_QWORD *)this + 8);
    while ((unint64_t)(*v5 + 1) <= 1)
    {
      ++v5;
      v6 -= 8;
      if (!v6)
      {
        v5 = v4;
        break;
      }
    }
  }
LABEL_11:
  if (v2)
    v7 = (_QWORD *)(v2 + 8 * *(unsigned int *)(v2 - 4));
  else
    v7 = 0;
  if (v7 != v5)
  {
    v8 = 0;
    do
    {
      v9 = (_DWORD *)*v5;
      v55 = (_DWORD *)*v5;
      if (v8 == (_DWORD)v53)
      {
        v10 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v52, v8 + 1, (unint64_t)&v55);
        v8 = HIDWORD(v53);
        *((_QWORD *)v52 + HIDWORD(v53)) = *(_QWORD *)v10;
      }
      else
      {
        *((_QWORD *)v52 + v8) = v9;
      }
      HIDWORD(v53) = ++v8;
      v11 = v5 + 1;
      v5 = v4;
      if (v11 != v4)
      {
        v5 = v11;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          if (++v5 == v4)
          {
            v5 = v4;
            break;
          }
        }
      }
    }
    while (v5 != v7);
  }
  v12 = *(_QWORD *)this;
  v13 = WTF::fastMalloc((WTF *)0x20);
  v54 = WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v13);
  if (HIDWORD(v53))
  {
    v15 = v52;
    v16 = (WTF *)((char *)v52 + 8 * HIDWORD(v53));
    do
    {
      v17 = *(_QWORD *)v15;
      if (*(_QWORD *)v15)
      {
        ++*(_DWORD *)(v12 + 88);
        v18 = *(_QWORD *)(v17 + 16);
        v19 = v18 & 0xFFFFFFFFFFFFLL;
        if ((v18 & 0xFFFFFFFFFFFFLL) != 0)
        {
          if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFLL) + 8))
          {
            v20 = *(_QWORD *)(v12 + 80);
            if (v20)
            {
              v21 = *(_DWORD *)(v20 - 8);
              v22 = (v19 + ~(v18 << 32)) ^ ((unint64_t)(v19 + ~(v18 << 32)) >> 22);
              v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
              v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
              v25 = v21 & ((v24 >> 31) ^ v24);
              for (i = 1; ; ++i)
              {
                v27 = v25;
                v28 = *(_QWORD *)(v20 + 16 * v25);
                if (v28 != -1)
                {
                  if (!v28)
                    goto LABEL_50;
                  if (v28 == v19)
                    break;
                }
                v25 = (v27 + i) & v21;
              }
              v29 = (WTF::JSONImpl::Value *)*(unsigned int *)(v20 + 16 * v27 + 8);
              if ((_DWORD)v29)
              {
                v30 = *(_QWORD *)(*(_QWORD *)(v12 + 16) + 112);
                if (v30)
                {
                  v31 = *(_QWORD *)(v30 + 88);
                  if (v31)
                  {
                    v32 = *(_DWORD *)(v31 - 8);
                    v33 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
                    v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
                    v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
                    v36 = v32 & ((v35 >> 31) ^ v35);
                    v37 = *(_QWORD *)(v31 + 16 * v36);
                    if (v37 == v17)
                    {
LABEL_42:
                      v39 = *(WebCore::InspectorStyleSheetForInlineStyle **)(v31 + 16 * v36 + 8);
                      if (v39)
                        WebCore::InspectorStyleSheetForInlineStyle::didModifyElementAttribute(v39, v14);
                    }
                    else
                    {
                      v38 = 1;
                      while (v37)
                      {
                        v36 = ((_DWORD)v36 + v38) & v32;
                        v37 = *(_QWORD *)(v31 + 16 * v36);
                        ++v38;
                        if (v37 == v17)
                          goto LABEL_42;
                      }
                    }
                  }
                }
                WTF::JSONImpl::Value::create(v29);
                v40 = *(unsigned int *)(v13 + 28);
                if ((_DWORD)v40 == *(_DWORD *)(v13 + 24))
                {
                  v41 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v13 + 16), v40 + 1, (unint64_t)&v55);
                  v40 = *(unsigned int *)(v13 + 28);
                  v42 = *(_QWORD *)(v13 + 16);
                  v43 = *(_DWORD **)v41;
                  *(_QWORD *)v41 = 0;
                }
                else
                {
                  v42 = *(_QWORD *)(v13 + 16);
                  v43 = v55;
                  v55 = 0;
                }
                *(_QWORD *)(v42 + 8 * v40) = v43;
                *(_DWORD *)(v13 + 28) = v40 + 1;
                v44 = v55;
                v55 = 0;
                if (v44)
                {
                  if (*v44 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v44;
                }
              }
            }
          }
        }
      }
LABEL_50:
      v15 = (WTF *)((char *)v15 + 8);
    }
    while (v15 != v16);
  }
  Inspector::DOMFrontendDispatcher::inlineStyleInvalidated();
  v46 = (_DWORD *)v54;
  v54 = 0;
  if (v46)
  {
    if (*v46 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v46;
  }
  v47 = (uint64_t *)*((_QWORD *)this + 8);
  if (v47)
  {
    *((_QWORD *)this + 8) = 0;
    v48 = *((unsigned int *)v47 - 1);
    if ((_DWORD)v48)
    {
      v49 = v47;
      do
      {
        v50 = *v49;
        if (*v49 != -1)
        {
          *v49 = 0;
          if (v50)
          {
            if (*(_DWORD *)(v50 + 24) == 2)
            {
              if ((*(_WORD *)(v50 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v50);
            }
            else
            {
              *(_DWORD *)(v50 + 24) -= 2;
            }
          }
        }
        ++v49;
        --v48;
      }
      while (v48);
    }
    WTF::fastFree((WTF *)(v47 - 2), v45);
  }
  result = v52;
  if (v52)
  {
    v52 = 0;
    LODWORD(v53) = 0;
    return (WTF *)WTF::fastFree(result, v45);
  }
  return result;
}

uint64_t WebCore::InspectorDOMAgent::InspectorDOMAgent(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  WTF::StringImpl *v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t StatusReg;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned int v15;
  _QWORD *v16;
  WTF::StringImpl *v18;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (v18)
  {
    v7 = *(_DWORD *)v18;
    *(_DWORD *)v18 += 2;
    *(_QWORD *)a1 = off_1E33EFBF8;
    *(_QWORD *)(a1 + 8) = v18;
    *(_QWORD *)(a1 + 16) = a2[4];
    *(_QWORD *)(a1 + 24) = *a2;
    if (v7)
      *(_DWORD *)v18 = v7;
    else
      WTF::StringImpl::destroy(v18, v6);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = a2[4];
    *(_QWORD *)(a1 + 24) = *a2;
  }
  *(_QWORD *)a1 = off_1E33EF2C8;
  *(_QWORD *)(a1 + 32) = &unk_1E33EF488;
  *(_QWORD *)(a1 + 40) = a2[1];
  v8 = a2[2];
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v9 = v8;
  *(_QWORD *)(a1 + 48) = v9;
  Inspector::DOMBackendDispatcher::create();
  *(_QWORD *)(a1 + 56) = v18;
  *(_QWORD *)(a1 + 64) = a2[5];
  *(_QWORD *)(a1 + 72) = a3;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 161) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 288) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  v11 = *(unsigned int **)(StatusReg + 736);
  if (!v11)
    v11 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *(_QWORD *)(a1 + 328) = v11;
  *(_QWORD *)(a1 + 288) = off_1E31F7378;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v13 = off_1E33EFBD0;
  v13[1] = WebCore::InspectorDOMAgent::destroyedNodesTimerFired;
  v13[2] = 0;
  v13[3] = a1;
  *(_QWORD *)(a1 + 336) = v13;
  *(_QWORD *)(a1 + 344) = off_1E3407128;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  v14 = *(unsigned int **)(StatusReg + 736);
  if (!v14)
    v14 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *(_QWORD *)(a1 + 384) = v14;
  *(_QWORD *)(a1 + 344) = off_1E31F7378;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v16 = off_1E33EFBD0;
  v16[1] = WebCore::InspectorDOMAgent::mediaMetricsTimerFired;
  v16[2] = 0;
  v16[3] = a1;
  *(_QWORD *)(a1 + 392) = v16;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_QWORD *)(a1 + 432) = 1;
  *(_WORD *)(a1 + 440) = 0;
  return a1;
}

uint64_t WebCore::InspectorDOMAgent::destroyedNodesTimerFired(uint64_t this, void *a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  WTF *v5;
  unsigned int *v6;
  uint64_t v7;
  void *v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;

  v2 = this;
  v3 = *(WTF **)(this + 272);
  v4 = *(unsigned int *)(this + 284);
  *(_QWORD *)(this + 272) = 0;
  *(_QWORD *)(this + 280) = 0;
  if ((_DWORD)v4)
  {
    v5 = v3;
    v6 = (unsigned int *)((char *)v3 + 8 * v4);
    while (1)
    {
      v7 = *(_QWORD *)(v2 + 104);
      v8 = (void *)*(unsigned int *)v5;
      if (!v7)
        goto LABEL_9;
      v9 = *(_DWORD *)(v7 - 8);
      v10 = 9 * (((_DWORD)v8 + ~((_DWORD)v8 << 15)) ^ (((_DWORD)v8 + ~((_DWORD)v8 << 15)) >> 10));
      v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
      v12 = v9 & (v11 ^ HIWORD(v11));
      v13 = *(_DWORD *)(v7 + 4 * v12);
      if (v13 != (_DWORD)v8)
        break;
LABEL_8:
      this = Inspector::DOMFrontendDispatcher::childNodeRemoved(*(Inspector::DOMFrontendDispatcher **)(v2 + 48));
LABEL_64:
      v5 = (WTF *)((char *)v5 + 8);
      if (v5 == (WTF *)v6)
        goto LABEL_65;
    }
    v14 = 1;
    while (v13)
    {
      v12 = (v12 + v14) & v9;
      v13 = *(_DWORD *)(v7 + 4 * v12);
      ++v14;
      if (v13 == (_DWORD)v8)
        goto LABEL_8;
    }
LABEL_9:
    this = WebCore::InspectorDOMAgent::nodeForId((WebCore::InspectorDOMAgent *)v2, v8);
    if (this)
    {
      if ((*(_WORD *)(this + 28) & 4) != 0)
      {
        v15 = *(_QWORD *)(this + 80);
        if (v15)
        {
          while ((*(_WORD *)(v15 + 28) & 2) != 0)
          {
            v16 = *(_WORD *)(v15 + 30);
            if ((v16 & 0x100) != 0)
            {
              if ((v16 & 0x80) == 0)
                break;
            }
            else
            {
              v17 = *(_QWORD *)(v15 + 80);
              if (v17)
              {
                v18 = *(unsigned __int8 **)(v17 + 8);
                v19 = *(unsigned int *)(v17 + 4);
                if ((*(_BYTE *)(v17 + 16) & 4) != 0)
                {
                  if ((_DWORD)v19)
                  {
                    while (1)
                    {
                      v20 = *v18;
                      v21 = v20 > 0x20;
                      v22 = (1 << v20) & 0x100003600;
                      if (v21 || v22 == 0)
                        break;
                      ++v18;
                      if (!--v19)
                        goto LABEL_33;
                    }
LABEL_34:
                    *(_WORD *)(v15 + 30) = v16 & 0xFE7F | 0x100;
                    break;
                  }
                }
                else if ((_DWORD)v19)
                {
                  v24 = 2 * v19;
                  do
                  {
                    v25 = *(unsigned __int16 *)v18;
                    v21 = v25 > 0x20;
                    v26 = (1 << v25) & 0x100003600;
                    if (v21 || v26 == 0)
                      goto LABEL_34;
                    v18 += 2;
                    v24 -= 2;
                  }
                  while (v24);
                }
              }
LABEL_33:
              *(_WORD *)(v15 + 30) = v16 | 0x180;
            }
            v15 = *(_QWORD *)(v15 + 56);
            if (!v15)
              goto LABEL_64;
          }
          v28 = *(_QWORD *)(v15 + 56);
          if (!v28)
            goto LABEL_63;
          v29 = 0;
          v30 = 1;
          do
          {
            this = v29;
            v29 = v30;
            while ((*(_WORD *)(v28 + 28) & 2) != 0)
            {
              v31 = *(_WORD *)(v28 + 30);
              if ((v31 & 0x100) != 0)
              {
                if ((v31 & 0x80) == 0)
                  break;
              }
              else
              {
                v32 = *(_QWORD *)(v28 + 80);
                if (v32)
                {
                  v33 = *(unsigned __int8 **)(v32 + 8);
                  v34 = *(unsigned int *)(v32 + 4);
                  if ((*(_BYTE *)(v32 + 16) & 4) != 0)
                  {
                    if ((_DWORD)v34)
                    {
                      while (1)
                      {
                        v35 = *v33;
                        v21 = v35 > 0x20;
                        v36 = (1 << v35) & 0x100003600;
                        if (v21 || v36 == 0)
                          break;
                        ++v33;
                        if (!--v34)
                          goto LABEL_59;
                      }
LABEL_60:
                      *(_WORD *)(v28 + 30) = v31 & 0xFE7F | 0x100;
                      break;
                    }
                  }
                  else if ((_DWORD)v34)
                  {
                    v38 = 2 * v34;
                    do
                    {
                      v39 = *(unsigned __int16 *)v33;
                      v21 = v39 > 0x20;
                      v40 = (1 << v39) & 0x100003600;
                      if (v21 || v40 == 0)
                        goto LABEL_60;
                      v33 += 2;
                      v38 -= 2;
                    }
                    while (v38);
                  }
                }
LABEL_59:
                *(_WORD *)(v28 + 30) = v31 | 0x180;
              }
              v28 = *(_QWORD *)(v28 + 56);
              if (!v28)
              {
                LODWORD(v29) = this;
                goto LABEL_62;
              }
            }
            v30 = (v29 + 1);
            v28 = *(_QWORD *)(v28 + 56);
          }
          while (v28);
LABEL_62:
          if (!(_DWORD)v29)
LABEL_63:
            this = Inspector::DOMFrontendDispatcher::childNodeCountUpdated(*(Inspector::DOMFrontendDispatcher **)(v2 + 48));
        }
      }
    }
    goto LABEL_64;
  }
LABEL_65:
  if (v3)
    this = WTF::fastFree(v3, a2);
  v42 = *(WTF **)(v2 + 256);
  v43 = *(unsigned int *)(v2 + 268);
  *(_QWORD *)(v2 + 256) = 0;
  *(_QWORD *)(v2 + 264) = 0;
  if ((_DWORD)v43)
  {
    v44 = 4 * v43;
    v45 = v42;
    do
    {
      v45 = (WTF *)((char *)v45 + 4);
      this = Inspector::DOMFrontendDispatcher::willDestroyDOMNode(*(Inspector::DOMFrontendDispatcher **)(v2 + 48));
      v44 -= 4;
    }
    while (v44);
  }
  if (v42)
    return WTF::fastFree(v42, a2);
  return this;
}

void WebCore::InspectorDOMAgent::mediaMetricsTimerFired(WebCore::InspectorDOMAgent *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int j;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t *v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t *v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int k;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unsigned int v78;
  int m;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  unint64_t v92;
  double v93;
  double v94;
  double v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t i;
  unsigned int **v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  WTF *v105;
  WTF::StringImpl *v106;

  {
    WebCore::HTMLMediaElement::allMediaElements(void)::elements = 0;
LABEL_157:
    if ((*((_QWORD *)this + 47) & 0xFFFFFFFFFFFFLL) != 0
      && *(double *)((*((_QWORD *)this + 47) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
    {
      WebCore::TimerBase::stopSlowCase((WebCore::InspectorDOMAgent *)((char *)this + 344));
    }
    v97 = *((_QWORD *)this + 50);
    if (v97)
    {
      *((_QWORD *)this + 50) = 0;
      v98 = *(unsigned int *)(v97 - 4);
      if ((_DWORD)v98)
      {
        for (i = 0; i != v98; ++i)
        {
          v100 = (unsigned int **)(v97 + 16 * i);
          v101 = *v100;
          if (*v100 != (unsigned int *)-1)
          {
            *v100 = 0;
            if (v101)
            {
              do
              {
                v102 = __ldaxr(v101);
                v103 = v102 - 1;
              }
              while (__stlxr(v103, v101));
              if (!v103)
              {
                atomic_store(1u, v101);
                WTF::fastFree((WTF *)v101, a2);
              }
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v97 - 16), a2);
      v89 = *((_QWORD *)this + 50);
      *((_DWORD *)this + 102) = 0;
      if (v89)
      {
        LODWORD(v89) = *(_DWORD *)(v89 - 12);
        if (v89 > 0x7FFFFFFE)
          LODWORD(v89) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v89) = 0;
      *((_DWORD *)this + 102) = 0;
    }
    goto LABEL_171;
  }
  if (!WebCore::HTMLMediaElement::allMediaElements(void)::elements
    || !*(_DWORD *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements - 12))
  {
    goto LABEL_157;
  }
  v3 = *(unsigned int *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements - 4);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = WebCore::HTMLMediaElement::allMediaElements(void)::elements;
    while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
    {
      v5 += 8;
      v4 -= 8;
      if (!v4)
        goto LABEL_107;
    }
  }
  else
  {
    v5 = WebCore::HTMLMediaElement::allMediaElements(void)::elements;
  }
  v6 = WebCore::HTMLMediaElement::allMediaElements(void)::elements + 8 * v3;
  if (v6 == v5)
    goto LABEL_107;
  v7 = (uint64_t *)((char *)this + 400);
  v8 = &WebCore::HTMLNames::videoTag;
LABEL_12:
  v9 = *(_QWORD *)(*(_QWORD *)v5 + 8);
  v10 = *(_DWORD *)(v9 + 24) + 2;
  *(_DWORD *)(v9 + 24) = v10;
  if (*(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != *(_QWORD *)(*v8 + 24) || (*(_DWORD *)(v9 + 1265) & 2) == 0)
    goto LABEL_94;
  WebCore::HTMLMediaElement::getVideoPlaybackQuality((WebCore::HTMLMediaElement *)v9, &v105);
  v11 = *((_DWORD *)v105 + 7);
  v12 = *(_QWORD *)(v9 + 296);
  v13 = *((_DWORD *)this + 102);
  *((_DWORD *)this + 102) = v13 + 1;
  v104 = v11;
  if (v12 && *(_QWORD *)(v12 + 8))
  {
    v14 = *v7;
    if (!*v7)
      goto LABEL_32;
    v15 = *(_DWORD *)(v14 - 8);
    v16 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v15 & ((v18 >> 31) ^ v18);
    for (j = 1; ; ++j)
    {
      v21 = v19;
      v22 = *(_QWORD *)(v14 + 16 * v19);
      if (v22 != -1)
      {
        if (!v22)
        {
          v55 = *(unsigned int *)(v14 - 4);
          v23 = v14 + 16 * v55;
          v56 = v23;
          goto LABEL_67;
        }
        if (v22 == v12)
          break;
      }
      v19 = (v21 + j) & v15;
    }
    v23 = v14 + 16 * v21;
    v55 = *(unsigned int *)(v14 - 4);
    v56 = v14 + 16 * v55;
LABEL_67:
    v57 = v14 + 16 * v55;
    if (v23 != v57)
    {
      while (!*(_QWORD *)(*(_QWORD *)v23 + 8))
      {
        v58 = v23 + 16;
        v23 = v56;
        if (v58 != v56)
        {
          v23 = v58;
          while ((unint64_t)(*(_QWORD *)v23 + 1) <= 1)
          {
            v23 += 16;
            if (v23 == v56)
            {
              v23 = v56;
              break;
            }
          }
        }
        if (v23 == v57)
        {
          v23 = v57;
          break;
        }
      }
    }
  }
  else
  {
    v14 = *v7;
    if (!*v7)
      goto LABEL_32;
    v23 = v14 + 16 * *(unsigned int *)(v14 - 4);
  }
  if (v23 != v14 + 16 * *(unsigned int *)(v14 - 4))
  {
    v24 = v11 != *(_DWORD *)(v23 + 8);
    if (*(unsigned __int8 *)(v23 + 12) != v24)
    {
      *(_BYTE *)(v23 + 12) = v24;
      v106 = 0;
      v25 = WebCore::InspectorDOMAgent::pushNodePathToFrontend((uint64_t)this, (WebCore::Node *)&v106, (WebCore::InspectorDOMAgent *)v9);
      if (v106)
      {
        if (*(_DWORD *)v106 == 2)
          WTF::StringImpl::destroy(v106, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v106 -= 2;
      }
      v11 = v104;
      if (v25)
      {
        v26 = v8;
        v27 = (double *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v27);
        v29 = v27[1];
        v28 = v27[2];
        v8 = v26;
        Inspector::DOMFrontendDispatcher::powerEfficientPlaybackStateChanged(*((Inspector::DOMFrontendDispatcher **)this + 6), v29 + v30 - v28);
        v11 = v104;
      }
    }
    *(_DWORD *)(v23 + 8) = v11;
    goto LABEL_90;
  }
LABEL_32:
  *((_DWORD *)this + 102) = v13 + 2;
  if ((v13 + 1) > *((_DWORD *)this + 103))
  {
    WTF::WeakHashMap<WebCore::HTMLMediaElement,WebCore::InspectorDOMAgent::MediaMetrics,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)this + 400, a2);
    v11 = v104;
    v12 = *(_QWORD *)(v9 + 296);
  }
  if (!v12)
  {
    v12 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = v9;
    v33 = *(unsigned int **)(v9 + 296);
    *(_QWORD *)(v9 + 296) = v12;
    if (v33)
    {
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      v11 = v104;
      if (!v35)
      {
        atomic_store(1u, v33);
        WTF::fastFree((WTF *)v33, a2);
        v11 = v104;
      }
      v12 = *(_QWORD *)(v9 + 296);
      do
        v36 = __ldaxr((unsigned int *)v12);
      while (__stlxr(v36 + 1, (unsigned int *)v12));
      do
        v37 = __ldaxr((unsigned int *)v12);
      while (__stlxr(v37 + 1, (unsigned int *)v12));
      if (!v12)
        goto LABEL_49;
      goto LABEL_46;
    }
    v11 = v104;
  }
  do
    v31 = __ldaxr((unsigned int *)v12);
  while (__stlxr(v31 + 1, (unsigned int *)v12));
  do
    v32 = __ldaxr((unsigned int *)v12);
  while (__stlxr(v32 + 1, (unsigned int *)v12));
  do
  {
LABEL_46:
    v38 = __ldaxr((unsigned int *)v12);
    v39 = v38 - 1;
  }
  while (__stlxr(v39, (unsigned int *)v12));
  if (!v39)
  {
    atomic_store(1u, (unsigned int *)v12);
    WTF::fastFree((WTF *)v12, a2);
    v11 = v104;
  }
LABEL_49:
  v40 = *v7;
  if (*v7
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::MonotonicTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)this + 50, 8u), v11 = v104, (v40 = *v7) != 0))
  {
    v41 = v8;
    v42 = *(_DWORD *)(v40 - 8);
  }
  else
  {
    v41 = v8;
    v42 = 0;
  }
  v43 = 0;
  v44 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
  v45 = 9 * ((v44 + ~(v44 << 13)) ^ ((v44 + ~(v44 << 13)) >> 8));
  v46 = (v45 ^ (v45 >> 15)) + ~((v45 ^ (v45 >> 15)) << 27);
  v47 = (v46 >> 31) ^ v46;
  for (k = 1; ; ++k)
  {
    v49 = v47 & v42;
    v50 = (uint64_t *)(v40 + 16 * v49);
    v51 = *v50;
    if (*v50 != -1)
      break;
    v43 = v40 + 16 * v49;
LABEL_58:
    v47 = k + v49;
  }
  if (!v51)
  {
    if (v43)
    {
      *(_QWORD *)v43 = 0;
      *(_QWORD *)(v43 + 8) = 0;
      --*(_DWORD *)(*v7 - 16);
      *(_QWORD *)v43 = v12;
    }
    else
    {
      *v50 = v12;
      v43 = v40 + 16 * v49;
    }
    *(_DWORD *)(v43 + 8) = v11;
    *(_BYTE *)(v43 + 12) = 0;
    v59 = *v7;
    v8 = v41;
    if (*v7)
      v60 = *(_DWORD *)(v59 - 12) + 1;
    else
      v60 = 1;
    *(_DWORD *)(v59 - 12) = v60;
    v61 = *v7;
    if (*v7)
      v62 = *(_DWORD *)(v61 - 12);
    else
      v62 = 0;
    v63 = (*(_DWORD *)(v61 - 16) + v62);
    v64 = *(unsigned int *)(v61 - 4);
    if (v64 > 0x400)
    {
      if (v64 > 2 * v63)
        goto LABEL_90;
    }
    else
    {
      if (3 * v64 > 4 * v63)
        goto LABEL_90;
      if (!(_DWORD)v64)
      {
        v65 = 8;
        goto LABEL_89;
      }
    }
    v65 = (_DWORD)v64 << (6 * *(_DWORD *)(v61 - 12) >= (2 * v64));
LABEL_89:
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::MonotonicTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)this + 50, v65);
    goto LABEL_90;
  }
  if (v51 != v12)
    goto LABEL_58;
  v52 = v40 + 16 * v49;
  *(_DWORD *)(v52 + 8) = v11;
  *(_BYTE *)(v52 + 12) = 0;
  v8 = v41;
  if (v12)
  {
    do
    {
      v53 = __ldaxr((unsigned int *)v12);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, (unsigned int *)v12));
    if (!v54)
    {
      atomic_store(1u, (unsigned int *)v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
LABEL_90:
  if (v105)
  {
    if (*(_DWORD *)v105 == 1)
      WTF::fastFree(v105, a2);
    else
      --*(_DWORD *)v105;
  }
  v10 = *(_DWORD *)(v9 + 24);
LABEL_94:
  v66 = v10 - 2;
  if (v66)
  {
    *(_DWORD *)(v9 + 24) = v66;
  }
  else if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
  }
  while (1)
  {
    v5 += 8;
    if (v5 == v6)
      break;
    if ((unint64_t)(*(_QWORD *)v5 + 1) > 1)
    {
      if (v5 != v6)
        goto LABEL_12;
      break;
    }
  }
LABEL_107:
  v67 = *((_QWORD *)this + 50);
  if (!v67)
    goto LABEL_141;
  v68 = *(_DWORD *)(v67 - 4);
  if (!v68)
  {
LABEL_138:
    *((_DWORD *)this + 102) = 0;
    goto LABEL_139;
  }
  v69 = 0;
  v70 = (uint64_t *)((char *)this + 400);
  while (2)
  {
    v71 = (uint64_t *)(v67 + 16 * --v68);
    v72 = *v71;
    if ((unint64_t)(*v71 + 1) >= 2)
    {
      v73 = *(_QWORD *)(v72 + 8);
      if (!v73)
        goto LABEL_119;
      {
        if (WebCore::HTMLMediaElement::allMediaElements(void)::elements)
        {
          v74 = *(_DWORD *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements - 8);
          v75 = (~(v73 << 32) + v73) ^ ((unint64_t)(~(v73 << 32) + v73) >> 22);
          v76 = 9 * ((v75 + ~(v75 << 13)) ^ ((v75 + ~(v75 << 13)) >> 8));
          v77 = (v76 ^ (v76 >> 15)) + ~((v76 ^ (v76 >> 15)) << 27);
          v78 = v74 & ((v77 >> 31) ^ v77);
          for (m = 1; ; ++m)
          {
            v80 = *(_QWORD *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements + 8 * v78);
            if (v80 != -1)
            {
              if (!v80)
                goto LABEL_124;
              if (*(_QWORD *)(v80 + 8) == v73)
                break;
            }
            v78 = (v78 + m) & v74;
          }
          goto LABEL_126;
        }
LABEL_119:
        *v71 = 0;
        do
        {
LABEL_120:
          v81 = __ldaxr((unsigned int *)v72);
          v82 = v81 - 1;
        }
        while (__stlxr(v82, (unsigned int *)v72));
        if (!v82)
        {
          atomic_store(1u, (unsigned int *)v72);
          WTF::fastFree((WTF *)v72, a2);
        }
      }
      else
      {
        WebCore::HTMLMediaElement::allMediaElements(void)::elements = 0;
        v72 = *v71;
LABEL_124:
        *v71 = 0;
        if (v72)
          goto LABEL_120;
      }
      *v71 = -1;
      ++v69;
    }
LABEL_126:
    if (v68)
      continue;
    break;
  }
  v67 = *v70;
  if (v69)
  {
    *(_DWORD *)(v67 - 16) += v69;
    v83 = *v70;
    if (*v70)
      v84 = *(_DWORD *)(v83 - 12);
    else
      v84 = 0;
    *(_DWORD *)(v83 - 12) = v84 - v69;
    v67 = *v70;
  }
  if (!v67)
  {
LABEL_141:
    v88 = 0;
    *((_DWORD *)this + 102) = 0;
    goto LABEL_142;
  }
  v85 = *(_DWORD *)(v67 - 4);
  v86 = *(unsigned int *)(v67 - 12);
  if (v85 < 9 || 6 * (int)v86 >= v85)
    goto LABEL_138;
  v90 = (v86 - 1) | ((v86 - 1) >> 1) | ((((_DWORD)v86 - 1) | ((v86 - 1) >> 1)) >> 2);
  v91 = v90 | (v90 >> 4) | ((v90 | (v90 >> 4)) >> 8);
  v92 = (v91 | HIWORD(v91)) + 1;
  if (v92 > 0x400)
  {
    if (v92 <= 2 * v86)
    {
LABEL_145:
      LODWORD(v92) = 2 * v92;
      if (v92 <= 0x400)
        goto LABEL_146;
    }
    v93 = (double)v86;
    v94 = (double)v92;
    v95 = 0.416666667;
  }
  else
  {
    if (3 * v92 <= 4 * v86)
      goto LABEL_145;
LABEL_146:
    v93 = (double)v86;
    v94 = (double)v92;
    v95 = 0.604166667;
  }
  if (v94 * v95 <= v93)
    LODWORD(v92) = 2 * v92;
  if (v92 <= 8)
    v96 = 8;
  else
    v96 = v92;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::MonotonicTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)this + 50, v96);
  v67 = *((_QWORD *)this + 50);
  *((_DWORD *)this + 102) = 0;
  if (v67)
  {
LABEL_139:
    v88 = *(_DWORD *)(v67 - 12);
    LODWORD(v89) = 0x7FFFFFFF;
    if (v88 < 0x7FFFFFFF)
      goto LABEL_142;
    goto LABEL_171;
  }
  v88 = 0;
LABEL_142:
  LODWORD(v89) = v88;
LABEL_171:
  *((_DWORD *)this + 103) = 2 * v89;
}

void WebCore::InspectorDOMAgent::~InspectorDOMAgent(WebCore::InspectorDOMAgent *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  unsigned int **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  WTF *v21;
  WTF *v22;
  WTF *v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::InspectorOverlayHighlight::Config *v31;
  WTF *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t j;
  uint64_t *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  WTF *v50;
  _DWORD *v51;
  WTF *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;

  v3 = *((_QWORD *)this + 53);
  if (v3)
    WTF::HashTable<int,WTF::KeyValuePair<int,WebCore::InspectorDOMAgent::InspectorEventListener>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WebCore::InspectorDOMAgent::InspectorEventListener>>,WTF::DefaultHash<int>,WTF::HashMap<int,WebCore::InspectorDOMAgent::InspectorEventListener,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WebCore::InspectorDOMAgent::InspectorEventListener>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 52);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = *((_QWORD *)this + 50);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v6)
    {
      for (i = 0; i != v6; ++i)
      {
        v8 = (unsigned int **)(v5 + 16 * i);
        v9 = *v8;
        if (*v8 != (unsigned int *)-1)
        {
          *v8 = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              atomic_store(1u, v9);
              WTF::fastFree((WTF *)v9, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  *((_QWORD *)this + 43) = off_1E31F7378;
  v12 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  WebCore::TimerBase::~TimerBase((WebCore::InspectorDOMAgent *)((char *)this + 344));
  *((_QWORD *)this + 36) = off_1E31F7378;
  v13 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  WebCore::TimerBase::~TimerBase((WebCore::InspectorDOMAgent *)((char *)this + 288));
  v15 = (WTF *)*((_QWORD *)this + 34);
  if (v15)
  {
    *((_QWORD *)this + 34) = 0;
    *((_DWORD *)this + 70) = 0;
    WTF::fastFree(v15, v14);
  }
  v16 = (WTF *)*((_QWORD *)this + 32);
  if (v16)
  {
    *((_QWORD *)this + 32) = 0;
    *((_DWORD *)this + 66) = 0;
    WTF::fastFree(v16, v14);
  }
  v17 = *((_QWORD *)this + 30);
  if (v17)
  {
    v18 = *(unsigned int *)(v17 - 4);
    if ((_DWORD)v18)
    {
      v19 = *((_QWORD *)this + 30);
      do
      {
        v20 = *(WTF **)v19;
        if (*(_QWORD *)v19 != -1)
        {
          v21 = *(WTF **)(v19 + 8);
          if (v21)
          {
            *(_QWORD *)(v19 + 8) = 0;
            *(_DWORD *)(v19 + 16) = 0;
            WTF::fastFree(v21, v14);
            v20 = *(WTF **)v19;
          }
          *(_QWORD *)v19 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 1)
              WTF::fastFree(v20, v14);
            else
              --*(_DWORD *)v20;
          }
        }
        v19 += 24;
        --v18;
      }
      while (v18);
    }
    WTF::fastFree((WTF *)(v17 - 16), v14);
  }
  v22 = (WTF *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v22)
    WTF::fastFree(v22, v14);
  v23 = (WTF *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v23)
  {
    v24 = *((unsigned int *)v23 + 3);
    if ((_DWORD)v24)
    {
      v25 = *(WTF **)v23;
      v26 = 8 * v24;
      do
      {
        v27 = *(_QWORD *)v25;
        *(_QWORD *)v25 = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        v25 = (WTF *)((char *)v25 + 8);
        v26 -= 8;
      }
      while (v26);
    }
    v28 = *(WTF **)v23;
    if (*(_QWORD *)v23)
    {
      *(_QWORD *)v23 = 0;
      *((_DWORD *)v23 + 2) = 0;
      WTF::fastFree(v28, v14);
    }
    WTF::fastFree(v23, v14);
  }
  if (*((_BYTE *)this + 216))
  {
    v29 = *((_QWORD *)this + 25);
    if ((v29 & 0x8000000000000) != 0)
    {
      v55 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFLL);
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
      {
        atomic_store(1u, v55);
        WTF::fastFree((WTF *)v55, v14);
      }
    }
  }
  if (*((_BYTE *)this + 192))
  {
    v30 = *((_QWORD *)this + 22);
    if ((v30 & 0x8000000000000) != 0)
    {
      v58 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFLL);
      do
      {
        v59 = __ldaxr(v58);
        v60 = v59 - 1;
      }
      while (__stlxr(v60, v58));
      if (!v60)
      {
        atomic_store(1u, v58);
        WTF::fastFree((WTF *)v58, v14);
      }
    }
  }
  v31 = (WebCore::InspectorOverlayHighlight::Config *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v31)
  {
    WebCore::InspectorOverlayHighlight::Config::~Config(v31, v14);
    WTF::fastFree(v32, v33);
  }
  v34 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v34)
  {
    if (*(_DWORD *)(v34 + 24) == 2)
    {
      if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v34, v14);
    }
    else
    {
      *(_DWORD *)(v34 + 24) -= 2;
    }
  }
  v35 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v35)
  {
    if (*(_DWORD *)(v35 + 24) == 2)
    {
      if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v35, v14);
    }
    else
    {
      *(_DWORD *)(v35 + 24) -= 2;
    }
  }
  v36 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v36)
  {
    if (*(_DWORD *)(v36 + 24) == 2)
    {
      if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v36, v14);
    }
    else
    {
      *(_DWORD *)(v36 + 24) -= 2;
    }
  }
  v37 = (_QWORD *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v37)
    std::default_delete<WebCore::RevalidateStyleAttributeTask>::operator()[abi:sn180100](v37, v14);
  v38 = *((_QWORD *)this + 16);
  if (v38)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v38, v14);
  v39 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v39)
  {
    if (*(_DWORD *)(v39 + 24) == 2)
    {
      if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v39, v14);
    }
    else
    {
      *(_DWORD *)(v39 + 24) -= 2;
    }
  }
  v40 = *((_QWORD *)this + 13);
  if (v40)
    WTF::fastFree((WTF *)(v40 - 16), v14);
  v41 = *((_QWORD *)this + 12);
  if (v41)
    WTF::HashTable<int,WTF::KeyValuePair<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::deallocateTable(v41, v14);
  v42 = *((_QWORD *)this + 10);
  if (v42)
  {
    v43 = *(unsigned int *)(v42 - 4);
    if ((_DWORD)v43)
    {
      for (j = 0; j != v43; ++j)
      {
        v45 = (uint64_t *)(v42 + 16 * j);
        v46 = *v45;
        if (*v45 != -1)
        {
          *v45 = 0;
          if (v46)
          {
            do
            {
              v47 = __ldaxr((unsigned int *)v46);
              v48 = v47 - 1;
            }
            while (__stlxr(v48, (unsigned int *)v46));
            if (!v48)
            {
              atomic_store(1u, (unsigned int *)v46);
              v49 = *(unsigned int *)(v46 + 28);
              if ((_DWORD)v49)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v46 + 16), (WTF::StringImpl *)(*(_QWORD *)(v46 + 16) + 32 * v49));
              v50 = *(WTF **)(v46 + 16);
              if (v50)
              {
                *(_QWORD *)(v46 + 16) = 0;
                *(_DWORD *)(v46 + 24) = 0;
                WTF::fastFree(v50, v14);
              }
              WTF::fastFree((WTF *)v46, v14);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v42 - 16), v14);
  }
  v51 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v51)
  {
    if (v51[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
    else
      --v51[2];
  }
  v52 = (WTF *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v52)
    WTF::fastFree(v52, v14);
  Inspector::DOMBackendDispatcherHandler::~DOMBackendDispatcherHandler((WebCore::InspectorDOMAgent *)((char *)this + 32));
  v54 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EFC38;
  *((_QWORD *)this + 1) = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, v53);
    else
      *(_DWORD *)v54 -= 2;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::InspectorDOMAgent::~InspectorDOMAgent(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::InspectorDOMAgent::~InspectorDOMAgent(WebCore::InspectorDOMAgent *this, WTF::StringImpl *a2)
{
  WebCore::InspectorDOMAgent::~InspectorDOMAgent((WebCore::InspectorDOMAgent *)((char *)this - 32), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::InspectorDOMAgent::~InspectorDOMAgent((WebCore::InspectorDOMAgent *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::InspectorDOMAgent::didCreateFrontendAndBackend(WebCore::InspectorDOMAgent *this, Inspector::FrontendRouter *a2, Inspector::BackendDispatcher *a3)
{
  _QWORD *v4;
  void *v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  WebCore::Node *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  void *v25;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  v6 = (WTF *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = v4;
  if (v6)
  {
    v7 = *((unsigned int *)v6 + 3);
    if ((_DWORD)v7)
    {
      v8 = *(WTF **)v6;
      v9 = 8 * v7;
      do
      {
        v10 = *(_QWORD *)v8;
        *(_QWORD *)v8 = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        v8 = (WTF *)((char *)v8 + 8);
        v9 -= 8;
      }
      while (v9);
    }
    v11 = *(WTF **)v6;
    if (*(_QWORD *)v6)
    {
      *(_QWORD *)v6 = 0;
      *((_DWORD *)v6 + 2) = 0;
      WTF::fastFree(v11, v5);
    }
    WTF::fastFree(v6, v5);
    v12 = (_QWORD *)*((_QWORD *)this + 28);
  }
  else
  {
    v12 = v4;
  }
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v14 = v12;
  result = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = v14;
  if (result)
    result = WTF::fastFree((WTF *)result, v13);
  *(_QWORD *)(*((_QWORD *)this + 2) + 40) = this;
  v16 = *(_QWORD *)(*((_QWORD *)this + 8) + 160);
  if (v16)
    v17 = *(_BYTE *)(v16 + 144) == 0;
  else
    v17 = 0;
  if (v17)
  {
    v18 = *(_QWORD *)(v16 + 296);
    if (v18)
      *(_DWORD *)(v18 + 24) += 2;
    result = *((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = v18;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
        {
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v13);
          v18 = *((_QWORD *)this + 15);
        }
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
    if (v18)
    {
      WTF::WeakHashMap<WebCore::RenderObject,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>::clear((uint64_t)this + 240, v13);
      result = WebCore::Document::updateLayout(*((_QWORD *)this + 15), 0, 0);
      v19 = (WebCore::Node *)*((_QWORD *)this + 15);
      if (v19)
        result = WebCore::InspectorDOMAgent::addEventListenersToNode(this, v19);
    }
    {
      if (WebCore::HTMLMediaElement::allMediaElements(void)::elements
        && *(_DWORD *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements - 12))
      {
        v20 = *(unsigned int *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements - 4);
        if ((_DWORD)v20)
        {
          v21 = 8 * v20;
          for (i = WebCore::HTMLMediaElement::allMediaElements(void)::elements;
                (unint64_t)(*(_QWORD *)i + 1) <= 1;
                i += 8)
          {
            v21 -= 8;
            if (!v21)
              return result;
          }
        }
        else
        {
          i = WebCore::HTMLMediaElement::allMediaElements(void)::elements;
        }
        v23 = WebCore::HTMLMediaElement::allMediaElements(void)::elements + 8 * v20;
        if (v23 != i)
        {
LABEL_36:
          v24 = *(_QWORD *)(*(_QWORD *)i + 8);
          *(_DWORD *)(v24 + 24) += 2;
          result = WebCore::InspectorDOMAgent::addEventListenersToNode(this, (WebCore::Node *)v24);
          if (*(_DWORD *)(v24 + 24) == 2)
          {
            if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
              result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v24, v25);
          }
          else
          {
            *(_DWORD *)(v24 + 24) -= 2;
          }
          while (1)
          {
            i += 8;
            if (i == v23)
              break;
            if ((unint64_t)(*(_QWORD *)i + 1) > 1)
            {
              if (i != v23)
                goto LABEL_36;
              return result;
            }
          }
        }
      }
    }
    else
    {
      WebCore::HTMLMediaElement::allMediaElements(void)::elements = 0;
    }
  }
  return result;
}

uint64_t WebCore::InspectorDOMAgent::addEventListenersToNode(WebCore::InspectorDOMAgent *this, WebCore::Node *a2)
{
  uint64_t result;
  WTF::MonotonicTime *v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  WebCore::AbortSignal *v11;
  unint64_t StatusReg;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  WebCore::AbortSignal *v17;
  WebCore *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  WebCore::AbortSignal *v23;
  WebCore *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  WebCore::AbortSignal *v29;
  WebCore *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  WebCore::AbortSignal *v35;
  WebCore *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  WebCore::AbortSignal *v41;
  WebCore *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  WebCore::AbortSignal *v47;
  WebCore *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  WebCore::AbortSignal *v53;
  WebCore *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  WebCore::AbortSignal *v59;
  WebCore *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  WebCore::AbortSignal *v65;
  WebCore *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  WebCore::AbortSignal *v71;
  WebCore *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  WebCore::AbortSignal *v77;
  WebCore *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  WebCore::AbortSignal *v83;
  WebCore *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  WebCore::AbortSignal *v89;
  WebCore *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  WebCore::AbortSignal *v95;
  WebCore *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  WebCore::AbortSignal *v101;
  WebCore *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  WebCore::AbortSignal *v107;
  double v108;
  bmalloc::api *v109;
  void *v110;
  bmalloc::api *v111;
  void *v112;
  bmalloc::api *v113;
  void *v114;
  bmalloc::api *v115;
  void *v116;
  bmalloc::api *v117;
  void *v118;
  bmalloc::api *v119;
  void *v120;
  bmalloc::api *v121;
  void *v122;
  bmalloc::api *v123;
  void *v124;
  bmalloc::api *v125;
  void *v126;
  bmalloc::api *v127;
  void *v128;
  bmalloc::api *v129;
  void *v130;
  bmalloc::api *v131;
  void *v132;
  bmalloc::api *v133;
  void *v134;
  bmalloc::api *v135;
  void *v136;
  bmalloc::api *v137;
  void *v138;
  bmalloc::api *v139;
  void *v140;
  bmalloc::api *v141;
  void *v142;
  char v143;
  __int16 v144;
  char v145;
  WebCore::AbortSignal *v146;
  WTF::MonotonicTime *v147;

  result = WTF::fastMalloc((WTF *)0x20);
  v5 = (WTF::MonotonicTime *)result;
  *(_DWORD *)(result + 16) = 1;
  *(_BYTE *)(result + 20) = 3;
  *(_QWORD *)result = off_1E33EF9B8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 24) = this;
  v6 = *((_WORD *)a2 + 14);
  if ((v6 & 0xF000) == 0x9000
    || (v6 & 8) != 0
    && (result = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)a2 + 824))(a2), (_DWORD)result))
  {
    v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
      v8 = WebCore::threadGlobalDataSlow((WebCore *)result);
    v9 = *(_QWORD *)(v8 + 40);
    if (!v9)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
      v9 = *(_QWORD *)(v8 + 40);
    }
    ++*((_DWORD *)v5 + 4);
    v146 = 0;
    v147 = v5;
    v143 = 0;
    v144 = 0;
    v145 = 0;
    (*(void (**)(WebCore::Node *, uint64_t, WTF::MonotonicTime **, char *))(*(_QWORD *)a2 + 24))(a2, v9 + 2376, &v147, &v143);
    v11 = v146;
    v146 = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 6) == 1)
      {
        WebCore::AbortSignal::~AbortSignal(v11, v10);
        bmalloc::api::isoDeallocate(v109, v110);
      }
      else
      {
        --*((_DWORD *)v11 + 6);
      }
    }
    result = (uint64_t)v147;
    v147 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 16) == 1)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      else
        --*(_DWORD *)(result + 16);
    }
  }
  if ((*((_WORD *)a2 + 14) & 8) != 0)
  {
    result = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)a2 + 824))(a2);
    if ((_DWORD)result)
    {
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v13 = *(_QWORD *)(StatusReg + 736);
      if (!v13 || (v14 = *(_QWORD *)(v13 + 96)) == 0)
        v14 = WebCore::threadGlobalDataSlow((WebCore *)result);
      v15 = *(_QWORD *)(v14 + 40);
      if (!v15)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v14);
        v15 = *(_QWORD *)(v14 + 40);
      }
      ++*((_DWORD *)v5 + 4);
      v146 = 0;
      v147 = v5;
      v143 = 0;
      v144 = 0;
      v145 = 0;
      (*(void (**)(WebCore::Node *, uint64_t, WTF::MonotonicTime **, char *))(*(_QWORD *)a2 + 24))(a2, v15 + 64, &v147, &v143);
      v17 = v146;
      v146 = 0;
      if (v17)
      {
        if (*((_DWORD *)v17 + 6) == 1)
        {
          WebCore::AbortSignal::~AbortSignal(v17, v16);
          bmalloc::api::isoDeallocate(v111, v112);
        }
        else
        {
          --*((_DWORD *)v17 + 6);
        }
      }
      v18 = v147;
      v147 = 0;
      if (v18)
      {
        if (*((_DWORD *)v18 + 4) == 1)
          v18 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v18 + 8))(v18);
        else
          --*((_DWORD *)v18 + 4);
      }
      v19 = *(_QWORD *)(StatusReg + 736);
      if (!v19 || (v20 = *(_QWORD *)(v19 + 96)) == 0)
        v20 = WebCore::threadGlobalDataSlow(v18);
      v21 = *(_QWORD *)(v20 + 40);
      if (!v21)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v20);
        v21 = *(_QWORD *)(v20 + 40);
      }
      ++*((_DWORD *)v5 + 4);
      v146 = 0;
      v147 = v5;
      v143 = 0;
      v144 = 0;
      v145 = 0;
      (*(void (**)(WebCore::Node *, uint64_t, WTF::MonotonicTime **, char *))(*(_QWORD *)a2 + 24))(a2, v21 + 352, &v147, &v143);
      v23 = v146;
      v146 = 0;
      if (v23)
      {
        if (*((_DWORD *)v23 + 6) == 1)
        {
          WebCore::AbortSignal::~AbortSignal(v23, v22);
          bmalloc::api::isoDeallocate(v113, v114);
        }
        else
        {
          --*((_DWORD *)v23 + 6);
        }
      }
      v24 = v147;
      v147 = 0;
      if (v24)
      {
        if (*((_DWORD *)v24 + 4) == 1)
          v24 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v24 + 8))(v24);
        else
          --*((_DWORD *)v24 + 4);
      }
      v25 = *(_QWORD *)(StatusReg + 736);
      if (!v25 || (v26 = *(_QWORD *)(v25 + 96)) == 0)
        v26 = WebCore::threadGlobalDataSlow(v24);
      v27 = *(_QWORD *)(v26 + 40);
      if (!v27)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v26);
        v27 = *(_QWORD *)(v26 + 40);
      }
      ++*((_DWORD *)v5 + 4);
      v146 = 0;
      v147 = v5;
      v143 = 0;
      v144 = 0;
      v145 = 0;
      (*(void (**)(WebCore::Node *, uint64_t, WTF::MonotonicTime **, char *))(*(_QWORD *)a2 + 24))(a2, v27 + 360, &v147, &v143);
      v29 = v146;
      v146 = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 6) == 1)
        {
          WebCore::AbortSignal::~AbortSignal(v29, v28);
          bmalloc::api::isoDeallocate(v115, v116);
        }
        else
        {
          --*((_DWORD *)v29 + 6);
        }
      }
      v30 = v147;
      v147 = 0;
      if (v30)
      {
        if (*((_DWORD *)v30 + 4) == 1)
          v30 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v30 + 8))(v30);
        else
          --*((_DWORD *)v30 + 4);
      }
      v31 = *(_QWORD *)(StatusReg + 736);
      if (!v31 || (v32 = *(_QWORD *)(v31 + 96)) == 0)
        v32 = WebCore::threadGlobalDataSlow(v30);
      v33 = *(_QWORD *)(v32 + 40);
      if (!v33)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v32);
        v33 = *(_QWORD *)(v32 + 40);
      }
      ++*((_DWORD *)v5 + 4);
      v146 = 0;
      v147 = v5;
      v143 = 0;
      v144 = 0;
      v145 = 0;
      (*(void (**)(WebCore::Node *, uint64_t, WTF::MonotonicTime **, char *))(*(_QWORD *)a2 + 24))(a2, v33 + 720, &v147, &v143);
      v35 = v146;
      v146 = 0;
      if (v35)
      {
        if (*((_DWORD *)v35 + 6) == 1)
        {
          WebCore::AbortSignal::~AbortSignal(v35, v34);
          bmalloc::api::isoDeallocate(v117, v118);
        }
        else
        {
          --*((_DWORD *)v35 + 6);
        }
      }
      v36 = v147;
      v147 = 0;
      if (v36)
      {
        if (*((_DWORD *)v36 + 4) == 1)
          v36 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v36 + 8))(v36);
        else
          --*((_DWORD *)v36 + 4);
      }
      v37 = *(_QWORD *)(StatusReg + 736);
      if (!v37 || (v38 = *(_QWORD *)(v37 + 96)) == 0)
        v38 = WebCore::threadGlobalDataSlow(v36);
      v39 = *(_QWORD *)(v38 + 40);
      if (!v39)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v38);
        v39 = *(_QWORD *)(v38 + 40);
      }
      ++*((_DWORD *)v5 + 4);
      v146 = 0;
      v147 = v5;
      v143 = 0;
      v144 = 0;
      v145 = 0;
      (*(void (**)(WebCore::Node *, uint64_t, WTF::MonotonicTime **, char *))(*(_QWORD *)a2 + 24))(a2, v39 + 752, &v147, &v143);
      v41 = v146;
      v146 = 0;
      if (v41)
      {
        if (*((_DWORD *)v41 + 6) == 1)
        {
          WebCore::AbortSignal::~AbortSignal(v41, v40);
          bmalloc::api::isoDeallocate(v119, v120);
        }
        else
        {
          --*((_DWORD *)v41 + 6);
        }
      }
      v42 = v147;
      v147 = 0;
      if (v42)
      {
        if (*((_DWORD *)v42 + 4) == 1)
          v42 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v42 + 8))(v42);
        else
          --*((_DWORD *)v42 + 4);
      }
      v43 = *(_QWORD *)(StatusReg + 736);
      if (!v43 || (v44 = *(_QWORD *)(v43 + 96)) == 0)
        v44 = WebCore::threadGlobalDataSlow(v42);
      v45 = *(_QWORD *)(v44 + 40);
      if (!v45)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v44);
        v45 = *(_QWORD *)(v44 + 40);
      }
      ++*((_DWORD *)v5 + 4);
      v146 = 0;
      v147 = v5;
      v143 = 0;
      v144 = 0;
      v145 = 0;
      (*(void (**)(WebCore::Node *, uint64_t, WTF::MonotonicTime **, char *))(*(_QWORD *)a2 + 24))(a2, v45 + 1112, &v147, &v143);
      v47 = v146;
      v146 = 0;
      if (v47)
      {
        if (*((_DWORD *)v47 + 6) == 1)
        {
          WebCore::AbortSignal::~AbortSignal(v47, v46);
          bmalloc::api::isoDeallocate(v121, v122);
        }
        else
        {
          --*((_DWORD *)v47 + 6);
        }
      }
      v48 = v147;
      v147 = 0;
      if (v48)
      {
        if (*((_DWORD *)v48 + 4) == 1)
          v48 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v48 + 8))(v48);
        else
          --*((_DWORD *)v48 + 4);
      }
      v49 = *(_QWORD *)(StatusReg + 736);
      if (!v49 || (v50 = *(_QWORD *)(v49 + 96)) == 0)
        v50 = WebCore::threadGlobalDataSlow(v48);
      v51 = *(_QWORD *)(v50 + 40);
      if (!v51)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v50);
        v51 = *(_QWORD *)(v50 + 40);
      }
      ++*((_DWORD *)v5 + 4);
      v146 = 0;
      v147 = v5;
      v143 = 0;
      v144 = 0;
      v145 = 0;
      (*(void (**)(WebCore::Node *, uint64_t, WTF::MonotonicTime **, char *))(*(_QWORD *)a2 + 24))(a2, v51 + 1120, &v147, &v143);
      v53 = v146;
      v146 = 0;
      if (v53)
      {
        if (*((_DWORD *)v53 + 6) == 1)
        {
          WebCore::AbortSignal::~AbortSignal(v53, v52);
          bmalloc::api::isoDeallocate(v123, v124);
        }
        else
        {
          --*((_DWORD *)v53 + 6);
        }
      }
      v54 = v147;
      v147 = 0;
      if (v54)
      {
        if (*((_DWORD *)v54 + 4) == 1)
          v54 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v54 + 8))(v54);
        else
          --*((_DWORD *)v54 + 4);
      }
      v55 = *(_QWORD *)(StatusReg + 736);
      if (!v55 || (v56 = *(_QWORD *)(v55 + 96)) == 0)
        v56 = WebCore::threadGlobalDataSlow(v54);
      v57 = *(_QWORD *)(v56 + 40);
      if (!v57)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v56);
        v57 = *(_QWORD *)(v56 + 40);
      }
      ++*((_DWORD *)v5 + 4);
      v146 = 0;
      v147 = v5;
      v143 = 0;
      v144 = 0;
      v145 = 0;
      (*(void (**)(WebCore::Node *, uint64_t, WTF::MonotonicTime **, char *))(*(_QWORD *)a2 + 24))(a2, v57 + 1160, &v147, &v143);
      v59 = v146;
      v146 = 0;
      if (v59)
      {
        if (*((_DWORD *)v59 + 6) == 1)
        {
          WebCore::AbortSignal::~AbortSignal(v59, v58);
          bmalloc::api::isoDeallocate(v125, v126);
        }
        else
        {
          --*((_DWORD *)v59 + 6);
        }
      }
      v60 = v147;
      v147 = 0;
      if (v60)
      {
        if (*((_DWORD *)v60 + 4) == 1)
          v60 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v60 + 8))(v60);
        else
          --*((_DWORD *)v60 + 4);
      }
      v61 = *(_QWORD *)(StatusReg + 736);
      if (!v61 || (v62 = *(_QWORD *)(v61 + 96)) == 0)
        v62 = WebCore::threadGlobalDataSlow(v60);
      v63 = *(_QWORD *)(v62 + 40);
      if (!v63)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v62);
        v63 = *(_QWORD *)(v62 + 40);
      }
      ++*((_DWORD *)v5 + 4);
      v146 = 0;
      v147 = v5;
      v143 = 0;
      v144 = 0;
      v145 = 0;
      (*(void (**)(WebCore::Node *, uint64_t, WTF::MonotonicTime **, char *))(*(_QWORD *)a2 + 24))(a2, v63 + 1424, &v147, &v143);
      v65 = v146;
      v146 = 0;
      if (v65)
      {
        if (*((_DWORD *)v65 + 6) == 1)
        {
          WebCore::AbortSignal::~AbortSignal(v65, v64);
          bmalloc::api::isoDeallocate(v127, v128);
        }
        else
        {
          --*((_DWORD *)v65 + 6);
        }
      }
      v66 = v147;
      v147 = 0;
      if (v66)
      {
        if (*((_DWORD *)v66 + 4) == 1)
          v66 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v66 + 8))(v66);
        else
          --*((_DWORD *)v66 + 4);
      }
      v67 = *(_QWORD *)(StatusReg + 736);
      if (!v67 || (v68 = *(_QWORD *)(v67 + 96)) == 0)
        v68 = WebCore::threadGlobalDataSlow(v66);
      v69 = *(_QWORD *)(v68 + 40);
      if (!v69)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v68);
        v69 = *(_QWORD *)(v68 + 40);
      }
      ++*((_DWORD *)v5 + 4);
      v146 = 0;
      v147 = v5;
      v143 = 0;
      v144 = 0;
      v145 = 0;
      (*(void (**)(WebCore::Node *, uint64_t, WTF::MonotonicTime **, char *))(*(_QWORD *)a2 + 24))(a2, v69 + 1464, &v147, &v143);
      v71 = v146;
      v146 = 0;
      if (v71)
      {
        if (*((_DWORD *)v71 + 6) == 1)
        {
          WebCore::AbortSignal::~AbortSignal(v71, v70);
          bmalloc::api::isoDeallocate(v129, v130);
        }
        else
        {
          --*((_DWORD *)v71 + 6);
        }
      }
      v72 = v147;
      v147 = 0;
      if (v72)
      {
        if (*((_DWORD *)v72 + 4) == 1)
          v72 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v72 + 8))(v72);
        else
          --*((_DWORD *)v72 + 4);
      }
      v73 = *(_QWORD *)(StatusReg + 736);
      if (!v73 || (v74 = *(_QWORD *)(v73 + 96)) == 0)
        v74 = WebCore::threadGlobalDataSlow(v72);
      v75 = *(_QWORD *)(v74 + 40);
      if (!v75)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v74);
        v75 = *(_QWORD *)(v74 + 40);
      }
      ++*((_DWORD *)v5 + 4);
      v146 = 0;
      v147 = v5;
      v143 = 0;
      v144 = 0;
      v145 = 0;
      (*(void (**)(WebCore::Node *, uint64_t, WTF::MonotonicTime **, char *))(*(_QWORD *)a2 + 24))(a2, v75 + 1472, &v147, &v143);
      v77 = v146;
      v146 = 0;
      if (v77)
      {
        if (*((_DWORD *)v77 + 6) == 1)
        {
          WebCore::AbortSignal::~AbortSignal(v77, v76);
          bmalloc::api::isoDeallocate(v131, v132);
        }
        else
        {
          --*((_DWORD *)v77 + 6);
        }
      }
      v78 = v147;
      v147 = 0;
      if (v78)
      {
        if (*((_DWORD *)v78 + 4) == 1)
          v78 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v78 + 8))(v78);
        else
          --*((_DWORD *)v78 + 4);
      }
      v79 = *(_QWORD *)(StatusReg + 736);
      if (!v79 || (v80 = *(_QWORD *)(v79 + 96)) == 0)
        v80 = WebCore::threadGlobalDataSlow(v78);
      v81 = *(_QWORD *)(v80 + 40);
      if (!v81)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v80);
        v81 = *(_QWORD *)(v80 + 40);
      }
      ++*((_DWORD *)v5 + 4);
      v146 = 0;
      v147 = v5;
      v143 = 0;
      v144 = 0;
      v145 = 0;
      (*(void (**)(WebCore::Node *, uint64_t, WTF::MonotonicTime **, char *))(*(_QWORD *)a2 + 24))(a2, v81 + 1760, &v147, &v143);
      v83 = v146;
      v146 = 0;
      if (v83)
      {
        if (*((_DWORD *)v83 + 6) == 1)
        {
          WebCore::AbortSignal::~AbortSignal(v83, v82);
          bmalloc::api::isoDeallocate(v133, v134);
        }
        else
        {
          --*((_DWORD *)v83 + 6);
        }
      }
      v84 = v147;
      v147 = 0;
      if (v84)
      {
        if (*((_DWORD *)v84 + 4) == 1)
          v84 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v84 + 8))(v84);
        else
          --*((_DWORD *)v84 + 4);
      }
      v85 = *(_QWORD *)(StatusReg + 736);
      if (!v85 || (v86 = *(_QWORD *)(v85 + 96)) == 0)
        v86 = WebCore::threadGlobalDataSlow(v84);
      v87 = *(_QWORD *)(v86 + 40);
      if (!v87)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v86);
        v87 = *(_QWORD *)(v86 + 40);
      }
      ++*((_DWORD *)v5 + 4);
      v146 = 0;
      v147 = v5;
      v143 = 0;
      v144 = 0;
      v145 = 0;
      (*(void (**)(WebCore::Node *, uint64_t, WTF::MonotonicTime **, char *))(*(_QWORD *)a2 + 24))(a2, v87 + 1768, &v147, &v143);
      v89 = v146;
      v146 = 0;
      if (v89)
      {
        if (*((_DWORD *)v89 + 6) == 1)
        {
          WebCore::AbortSignal::~AbortSignal(v89, v88);
          bmalloc::api::isoDeallocate(v135, v136);
        }
        else
        {
          --*((_DWORD *)v89 + 6);
        }
      }
      v90 = v147;
      v147 = 0;
      if (v90)
      {
        if (*((_DWORD *)v90 + 4) == 1)
          v90 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v90 + 8))(v90);
        else
          --*((_DWORD *)v90 + 4);
      }
      v91 = *(_QWORD *)(StatusReg + 736);
      if (!v91 || (v92 = *(_QWORD *)(v91 + 96)) == 0)
        v92 = WebCore::threadGlobalDataSlow(v90);
      v93 = *(_QWORD *)(v92 + 40);
      if (!v93)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v92);
        v93 = *(_QWORD *)(v92 + 40);
      }
      ++*((_DWORD *)v5 + 4);
      v146 = 0;
      v147 = v5;
      v143 = 0;
      v144 = 0;
      v145 = 0;
      (*(void (**)(WebCore::Node *, uint64_t, WTF::MonotonicTime **, char *))(*(_QWORD *)a2 + 24))(a2, v93 + 1952, &v147, &v143);
      v95 = v146;
      v146 = 0;
      if (v95)
      {
        if (*((_DWORD *)v95 + 6) == 1)
        {
          WebCore::AbortSignal::~AbortSignal(v95, v94);
          bmalloc::api::isoDeallocate(v137, v138);
        }
        else
        {
          --*((_DWORD *)v95 + 6);
        }
      }
      v96 = v147;
      v147 = 0;
      if (v96)
      {
        if (*((_DWORD *)v96 + 4) == 1)
          v96 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v96 + 8))(v96);
        else
          --*((_DWORD *)v96 + 4);
      }
      v97 = *(_QWORD *)(StatusReg + 736);
      if (!v97 || (v98 = *(_QWORD *)(v97 + 96)) == 0)
        v98 = WebCore::threadGlobalDataSlow(v96);
      v99 = *(_QWORD *)(v98 + 40);
      if (!v99)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v98);
        v99 = *(_QWORD *)(v98 + 40);
      }
      ++*((_DWORD *)v5 + 4);
      v146 = 0;
      v147 = v5;
      v143 = 0;
      v144 = 0;
      v145 = 0;
      (*(void (**)(WebCore::Node *, uint64_t, WTF::MonotonicTime **, char *))(*(_QWORD *)a2 + 24))(a2, v99 + 2024, &v147, &v143);
      v101 = v146;
      v146 = 0;
      if (v101)
      {
        if (*((_DWORD *)v101 + 6) == 1)
        {
          WebCore::AbortSignal::~AbortSignal(v101, v100);
          bmalloc::api::isoDeallocate(v139, v140);
        }
        else
        {
          --*((_DWORD *)v101 + 6);
        }
      }
      v102 = v147;
      v147 = 0;
      if (v102)
      {
        if (*((_DWORD *)v102 + 4) == 1)
          v102 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v102 + 8))(v102);
        else
          --*((_DWORD *)v102 + 4);
      }
      v103 = *(_QWORD *)(StatusReg + 736);
      if (!v103 || (v104 = *(_QWORD *)(v103 + 96)) == 0)
        v104 = WebCore::threadGlobalDataSlow(v102);
      v105 = *(_QWORD *)(v104 + 40);
      if (!v105)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v104);
        v105 = *(_QWORD *)(v104 + 40);
      }
      ++*((_DWORD *)v5 + 4);
      v146 = 0;
      v147 = v5;
      v143 = 0;
      v144 = 0;
      v145 = 0;
      (*(void (**)(WebCore::Node *, uint64_t, WTF::MonotonicTime **, char *))(*(_QWORD *)a2 + 24))(a2, v105 + 2272, &v147, &v143);
      v107 = v146;
      v146 = 0;
      if (v107)
      {
        if (*((_DWORD *)v107 + 6) == 1)
        {
          WebCore::AbortSignal::~AbortSignal(v107, v106);
          bmalloc::api::isoDeallocate(v141, v142);
        }
        else
        {
          --*((_DWORD *)v107 + 6);
        }
      }
      result = (uint64_t)v147;
      v147 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 16) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        else
          --*(_DWORD *)(result + 16);
      }
      if ((*((_QWORD *)this + 47) & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)((*((_QWORD *)this + 47) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        *((_QWORD *)this + 46) = 0x3FB1111111111111;
        WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
        result = WebCore::TimerBase::setNextFireTime((uint64_t)this + 344, v108 + 0.0);
      }
    }
  }
  if (*((_DWORD *)v5 + 4) == 1)
    return (*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)v5 + 8))(v5);
  --*((_DWORD *)v5 + 4);
  return result;
}

unsigned int *WebCore::InspectorDOMAgent::willDestroyFrontendAndBackend(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;

  v3 = *(WTF **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v3)
  {
    v4 = *((unsigned int *)v3 + 3);
    if ((_DWORD)v4)
    {
      v5 = *(WTF **)v3;
      v6 = 8 * v4;
      do
      {
        v7 = *(_QWORD *)v5;
        *(_QWORD *)v5 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v5 = (WTF *)((char *)v5 + 8);
        v6 -= 8;
      }
      while (v6);
    }
    v8 = *(WTF **)v3;
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)v3 = 0;
      *((_DWORD *)v3 + 2) = 0;
      WTF::fastFree(v8, a2);
    }
    WTF::fastFree(v3, a2);
  }
  v9 = *(WTF **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v9)
    WTF::fastFree(v9, a2);
  v10 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  v11 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  v12 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  if (*(_BYTE *)(a1 + 436))
  {
    *(_BYTE *)(a1 + 436) = 0;
    WebCore::InspectorOverlay::hideHighlight(*(WebCore::InspectorOverlay **)(a1 + 72), a2);
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 72) + 8) + 120))(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8), *(unsigned __int8 *)(a1 + 436));
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 80) + 88);
    if (v13)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 128))(v13, *(unsigned __int8 *)(a1 + 436));
  }
  WebCore::InspectorOverlay::hideHighlight(*(WebCore::InspectorOverlay **)(a1 + 72), a2);
  WebCore::InspectorOverlay::clearAllGridOverlays(*(WebCore::InspectorOverlay **)(a1 + 72), v14);
  WebCore::InspectorOverlay::clearAllFlexOverlays(*(WebCore::InspectorOverlay **)(a1 + 72), v15);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  return WebCore::InspectorDOMAgent::reset((WebCore::InspectorDOMAgent *)a1, v16);
}

uint64_t WebCore::InspectorDOMAgent::setSearchingForNode(uint64_t result, void *a2, int a3, WTF::JSONImpl::ObjectBase **a4, WTF::JSONImpl::ObjectBase **a5, WTF::JSONImpl::ObjectBase **a6)
{
  uint64_t v6;
  void *v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  uint64_t (*v14)();
  uint64_t (*v15)();
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  char v40;
  unsigned __int8 v41;
  __int128 v42;
  __int128 v43;

  if (*(unsigned __int8 *)(result + 436) != a3)
  {
    v6 = result;
    *(_BYTE *)(result + 436) = a3;
    if (!a3)
    {
      WebCore::InspectorOverlay::hideHighlight(*(WebCore::InspectorOverlay **)(result + 72), a2);
LABEL_18:
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 72) + 8) + 120))(*(_QWORD *)(*(_QWORD *)(v6 + 72) + 8), *(unsigned __int8 *)(v6 + 436));
      result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 64) + 80) + 88);
      if (result)
        return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 128))(result, *(unsigned __int8 *)(v6 + 436));
      return result;
    }
    WebCore::InspectorDOMAgent::highlightConfigFromInspectorObject((uint64_t *)&v38, (WTF::StringImpl **)a2, a4);
    v11 = v38;
    result = *(_QWORD *)(v6 + 168);
    *(_QWORD *)(v6 + 168) = v38;
    if (result)
    {
      WebCore::InspectorOverlayHighlight::Config::~Config((WebCore::InspectorOverlayHighlight::Config *)result, v10);
      result = WTF::fastFree(v12, v13);
      v11 = *(_QWORD *)(v6 + 168);
    }
    if (v11)
    {
      v14 = WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>::unspecifiedBoolTypeInstance;
      if (*a5)
        v15 = WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>::unspecifiedBoolTypeInstance;
      else
        v15 = 0;
      result = (uint64_t)WebCore::InspectorDOMAgent::gridOverlayConfigFromInspectorObject((WTF::StringImpl *)&v38, (WTF::StringImpl **)a2, a5);
      v17 = (unint64_t *)(v6 + 176);
      if (*(unsigned __int8 *)(v6 + 192) != v41)
      {
        if (*(_BYTE *)(v6 + 192))
        {
          if ((*v17 & 0x8000000000000) != 0)
          {
            result = *v17 & 0xFFFFFFFFFFFFLL;
            do
            {
              v31 = __ldaxr((unsigned int *)result);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, (unsigned int *)result));
            if (!v32)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, v16);
            }
          }
          *(_BYTE *)(v6 + 192) = 0;
        }
        else
        {
          *v17 = 0;
          if (v38)
          {
            *v17 = v38;
            v38 = 0;
          }
          *(_DWORD *)(v6 + 184) = v39;
          *(_BYTE *)(v6 + 188) = v40;
          *(_BYTE *)(v6 + 192) = 1;
        }
        goto LABEL_27;
      }
      if (!*(_BYTE *)(v6 + 192))
        goto LABEL_29;
      v18 = *v17;
      if ((*v17 & 0x8000000000000) != 0)
      {
        v37 = v38;
        if ((v38 & 0x8000000000000) == 0)
          goto LABEL_14;
        v43 = *(_OWORD *)((v18 & 0xFFFFFFFFFFFFLL) + 4);
        v42 = *(_OWORD *)((v38 & 0xFFFFFFFFFFFFLL) + 4);
        result = WebCore::operator==<float,4ul>((float *)&v43, (float *)&v42);
        v18 = *v17;
        if (!(_DWORD)result || HIBYTE(v18) != HIBYTE(v37) || BYTE6(v18) != BYTE6(v37))
          goto LABEL_14;
      }
      else if (v18 != v38 || (v38 & 0x8000000000000) != 0)
      {
LABEL_14:
        if ((v18 & 0x8000000000000) != 0)
        {
          result = v18 & 0xFFFFFFFFFFFFLL;
          do
          {
            v29 = __ldaxr((unsigned int *)result);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, (unsigned int *)result));
          if (!v30)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, v16);
          }
        }
        *v17 = v38;
        v38 = 0;
      }
      *(_DWORD *)(v6 + 184) = v39;
      *(_BYTE *)(v6 + 188) = v40;
LABEL_27:
      if (v41)
      {
        if ((v38 & 0x8000000000000) != 0)
        {
          result = v38 & 0xFFFFFFFFFFFFLL;
          do
          {
            v25 = __ldaxr((unsigned int *)result);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, (unsigned int *)result));
          if (!v26)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, v16);
          }
        }
      }
LABEL_29:
      if (v15 && !*(_BYTE *)(v6 + 192))
        return result;
      if (!*a6)
        v14 = 0;
      result = (uint64_t)WebCore::InspectorDOMAgent::flexOverlayConfigFromInspectorObject((WTF::StringImpl *)&v38, (WTF::StringImpl **)a2, a6);
      v20 = (unint64_t *)(v6 + 200);
      if (*(unsigned __int8 *)(v6 + 216) != v41)
      {
        if (*(_BYTE *)(v6 + 216))
        {
          if ((*v20 & 0x8000000000000) != 0)
          {
            result = *v20 & 0xFFFFFFFFFFFFLL;
            do
            {
              v35 = __ldaxr((unsigned int *)result);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, (unsigned int *)result));
            if (!v36)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, v19);
            }
          }
          *(_BYTE *)(v6 + 216) = 0;
        }
        else
        {
          *v20 = 0;
          if (v38)
          {
            *v20 = v38;
            v38 = 0;
          }
          *(_BYTE *)(v6 + 208) = v39;
          *(_BYTE *)(v6 + 216) = 1;
        }
        goto LABEL_47;
      }
      if (!*(_BYTE *)(v6 + 216))
        goto LABEL_49;
      v21 = *v20;
      v22 = v38;
      if ((*v20 & 0x8000000000000) != 0)
      {
        if ((v38 & 0x8000000000000) == 0)
          goto LABEL_38;
        v43 = *(_OWORD *)((v21 & 0xFFFFFFFFFFFFLL) + 4);
        v42 = *(_OWORD *)((v38 & 0xFFFFFFFFFFFFLL) + 4);
        result = WebCore::operator==<float,4ul>((float *)&v43, (float *)&v42);
        v21 = *v20;
        if (!(_DWORD)result || HIBYTE(v21) != HIBYTE(v22) || BYTE6(v21) != BYTE6(v22))
          goto LABEL_38;
      }
      else if (v21 != v38 || (v38 & 0x8000000000000) != 0)
      {
LABEL_38:
        if ((v21 & 0x8000000000000) != 0)
        {
          result = v21 & 0xFFFFFFFFFFFFLL;
          do
          {
            v33 = __ldaxr((unsigned int *)result);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, (unsigned int *)result));
          if (!v34)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, v19);
          }
        }
        *v20 = v38;
        v38 = 0;
      }
      *(_BYTE *)(v6 + 208) = v39;
LABEL_47:
      if (v41)
      {
        if ((v38 & 0x8000000000000) != 0)
        {
          result = v38 & 0xFFFFFFFFFFFFLL;
          do
          {
            v27 = __ldaxr((unsigned int *)result);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, (unsigned int *)result));
          if (!v28)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, v19);
          }
        }
      }
LABEL_49:
      if (!v14 || *(_BYTE *)(v6 + 216))
      {
        *(_BYTE *)(v6 + 437) = 0;
        v23 = *(_QWORD *)(v6 + 152);
        if (v23)
        {
          if ((*(_WORD *)(v23 + 28) & 2) == 0 || (v23 = *(_QWORD *)(v23 + 32)) != 0)
          {
            v24 = *(_QWORD *)(v6 + 168);
            if (v24)
              WebCore::InspectorOverlay::highlightNode(*(_QWORD ***)(v6 + 72), (_DWORD *)v23, v24, v6 + 176, v6 + 200, 0);
          }
        }
        goto LABEL_18;
      }
    }
  }
  return result;
}

uint64_t WebCore::InspectorDOMAgent::hideHighlight@<X0>(WebCore::InspectorOverlay **this@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = WebCore::InspectorOverlay::hideHighlight(this[9], a2);
  *a3 = 0;
  a3[8] = 0;
  return result;
}

unsigned int *WebCore::InspectorDOMAgent::reset(WebCore::InspectorDOMAgent *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  WTF *v26;
  unsigned int *result;
  uint64_t v28;
  uint64_t v29;

  v3 = *((_QWORD *)this + 28);
  if (v3)
  {
    *(_QWORD *)(v3 + 16) = 0;
    if (*(_DWORD *)(v3 + 8))
    {
      v4 = *(unsigned int *)(v3 + 12);
      if ((_DWORD)v4)
      {
        v5 = *(WTF **)v3;
        v6 = 8 * v4;
        do
        {
          v7 = *(_QWORD *)v5;
          *(_QWORD *)v5 = 0;
          if (v7)
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
          v5 = (WTF *)((char *)v5 + 8);
          v6 -= 8;
        }
        while (v6);
        *(_DWORD *)(v3 + 12) = 0;
      }
      v8 = *(WTF **)v3;
      if (*(_QWORD *)v3)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
        WTF::fastFree(v8, a2);
      }
    }
  }
  v9 = *((_QWORD *)this + 16);
  if (v9)
  {
    *((_QWORD *)this + 16) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v9, a2);
  }
  v10 = *((_QWORD *)this + 10);
  if (v10)
  {
    *((_QWORD *)this + 10) = 0;
    v11 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v11)
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = (uint64_t *)(v10 + 16 * i);
        v14 = *v13;
        if (*v13 != -1)
        {
          *v13 = 0;
          if (v14)
          {
            do
            {
              v15 = __ldaxr((unsigned int *)v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, (unsigned int *)v14));
            if (!v16)
            {
              atomic_store(1u, (unsigned int *)v14);
              v17 = *(unsigned int *)(v14 + 28);
              if ((_DWORD)v17)
              {
                v29 = v14;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v14 + 16), (WTF::StringImpl *)(*(_QWORD *)(v14 + 16) + 32 * v17));
                v14 = v29;
              }
              v18 = *(WTF **)(v14 + 16);
              if (v18)
              {
                *(_QWORD *)(v14 + 16) = 0;
                *(_DWORD *)(v14 + 24) = 0;
                v28 = v14;
                WTF::fastFree(v18, a2);
                v14 = v28;
              }
              WTF::fastFree((WTF *)v14, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v10 - 16), a2);
    v19 = *((_QWORD *)this + 10);
    *((_DWORD *)this + 22) = 0;
    if (v19)
    {
      LODWORD(v19) = *(_DWORD *)(v19 - 12);
      if (v19 > 0x7FFFFFFE)
        LODWORD(v19) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v19) = 0;
    *((_DWORD *)this + 22) = 0;
  }
  *((_DWORD *)this + 23) = 2 * v19;
  v20 = *((_QWORD *)this + 12);
  if (v20)
  {
    *((_QWORD *)this + 12) = 0;
    WTF::HashTable<int,WTF::KeyValuePair<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::deallocateTable(v20, a2);
  }
  v21 = *((_QWORD *)this + 52);
  if (v21)
  {
    *((_QWORD *)this + 52) = 0;
    WTF::fastFree((WTF *)(v21 - 16), a2);
  }
  v22 = *((_QWORD *)this + 53);
  if (v22)
  {
    *((_QWORD *)this + 53) = 0;
    WTF::HashTable<int,WTF::KeyValuePair<int,WebCore::InspectorDOMAgent::InspectorEventListener>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WebCore::InspectorDOMAgent::InspectorEventListener>>,WTF::DefaultHash<int>,WTF::HashMap<int,WebCore::InspectorDOMAgent::InspectorEventListener,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WebCore::InspectorDOMAgent::InspectorEventListener>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::deallocateTable(v22, (WTF::StringImpl *)a2);
  }
  v23 = *((_QWORD *)this + 13);
  if (v23)
  {
    *((_QWORD *)this + 13) = 0;
    WTF::fastFree((WTF *)(v23 - 16), a2);
  }
  v24 = *((_QWORD *)this + 17);
  if (v24 && (*(_QWORD *)(v24 + 40) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v24 + 8));
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)this + 15);
  if (*((_DWORD *)this + 66))
  {
    if (*((_DWORD *)this + 67))
      *((_DWORD *)this + 67) = 0;
    v26 = (WTF *)*((_QWORD *)this + 32);
    if (v26)
    {
      *((_QWORD *)this + 32) = 0;
      *((_DWORD *)this + 66) = 0;
      WTF::fastFree(v26, v25);
    }
  }
  result = WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this + 68, 0);
  if ((*((_QWORD *)this + 40) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 40) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    return (unsigned int *)WebCore::TimerBase::stopSlowCase((WebCore::InspectorDOMAgent *)((char *)this + 288));
  }
  return result;
}

uint64_t WebCore::InspectorDOMAgent::setDocument(uint64_t this, WebCore::Document *a2)
{
  uint64_t v3;
  void *v4;
  WebCore::Document *v5;

  if (*(WebCore::Document **)(this + 120) != a2)
  {
    v3 = this;
    WebCore::InspectorDOMAgent::reset((WebCore::InspectorDOMAgent *)this, a2);
    if (a2)
      *((_DWORD *)a2 + 6) += 2;
    this = *(_QWORD *)(v3 + 120);
    *(_QWORD *)(v3 + 120) = a2;
    v5 = a2;
    if (this)
    {
      if (*(_DWORD *)(this + 24) == 2)
      {
        if ((*(_WORD *)(this + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)this);
      }
      else
      {
        *(_DWORD *)(this + 24) -= 2;
      }
      v5 = *(WebCore::Document **)(v3 + 120);
    }
    if (v5)
    {
      WTF::WeakHashMap<WebCore::RenderObject,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>::clear(v3 + 240, v4);
      this = WebCore::Document::updateLayout(*(_QWORD *)(v3 + 120), 0, 0);
    }
    if (*(_BYTE *)(v3 + 440) && (!a2 || !*((_BYTE *)a2 + 3389)))
      return Inspector::DOMFrontendDispatcher::documentUpdated(*(Inspector::DOMFrontendDispatcher **)(v3 + 48));
  }
  return this;
}

uint64_t WTF::WeakHashMap<WebCore::RenderObject,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>::clear(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  uint64_t v8;

  v2 = result;
  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    *(_QWORD *)result = 0;
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = v3;
      do
      {
        v6 = *(WTF **)v5;
        if (*(_QWORD *)v5 != -1)
        {
          v7 = *(WTF **)(v5 + 8);
          if (v7)
          {
            *(_QWORD *)(v5 + 8) = 0;
            *(_DWORD *)(v5 + 16) = 0;
            WTF::fastFree(v7, a2);
            v6 = *(WTF **)v5;
          }
          *(_QWORD *)v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
              WTF::fastFree(v6, a2);
            else
              --*(_DWORD *)v6;
          }
        }
        v5 += 24;
        --v4;
      }
      while (v4);
    }
    result = WTF::fastFree((WTF *)(v3 - 16), a2);
    v8 = *(_QWORD *)v2;
    *(_DWORD *)(v2 + 8) = 0;
    if (v8)
    {
      LODWORD(v8) = *(_DWORD *)(v8 - 12);
      if (v8 > 0x7FFFFFFE)
        LODWORD(v8) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v8) = 0;
    *(_DWORD *)(result + 8) = 0;
  }
  *(_DWORD *)(v2 + 12) = 2 * v8;
  return result;
}

uint64_t WebCore::InspectorDOMAgent::bind(WebCore::InspectorDOMAgent *this, WebCore::Node *a2)
{
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  int v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int i;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  unsigned int *v48;
  void *v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  unsigned int *v56;
  void *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  WTF *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  WTF *v80;
  uint64_t v81;
  WTF *v82;
  uint64_t v83;
  WTF *v84;

  v4 = (uint64_t *)((char *)this + 80);
  v5 = *((_DWORD *)this + 22);
  v6 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 22) = v5 + 1;
  if (v5 > v6)
    WTF::WeakHashMap<WebCore::Node,int,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences((uint64_t)this + 80, a2);
  if ((*((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v7 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 8) = a2;
    *(_BYTE *)(v7 + 32) = 0;
    v8 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v8 & 0xFFFF000000000000 | v7;
    v9 = v8 & 0xFFFFFFFFFFFFLL;
    if ((v8 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v10 = __ldaxr((unsigned int *)v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, (unsigned int *)v9));
      if (!v11)
      {
        atomic_store(1u, (unsigned int *)v9);
        v83 = *(unsigned int *)(v9 + 28);
        if ((_DWORD)v83)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v9 + 16), (WTF::StringImpl *)(*(_QWORD *)(v9 + 16) + 32 * v83));
        v84 = *(WTF **)(v9 + 16);
        if (v84)
        {
          *(_QWORD *)(v9 + 16) = 0;
          *(_DWORD *)(v9 + 24) = 0;
          WTF::fastFree(v84, a2);
        }
        WTF::fastFree((WTF *)v9, a2);
      }
    }
  }
  v12 = *((_QWORD *)a2 + 2);
  v13 = v12 & 0xFFFFFFFFFFFFLL;
  do
    v14 = __ldaxr((unsigned int *)v13);
  while (__stlxr(v14 + 1, (unsigned int *)v13));
  do
    v15 = __ldaxr((unsigned int *)v13);
  while (__stlxr(v15 + 1, (unsigned int *)v13));
  if (v13)
  {
    do
    {
      v16 = __ldaxr((unsigned int *)v13);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v13));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)v13);
      v79 = *(unsigned int *)((v12 & 0xFFFFFFFFFFFFLL) + 0x1C);
      if ((_DWORD)v79)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)((v12 & 0xFFFFFFFFFFFFLL) + 0x10), (WTF::StringImpl *)(*(_QWORD *)((v12 & 0xFFFFFFFFFFFFLL) + 0x10) + 32 * v79));
      v80 = *(WTF **)((v12 & 0xFFFFFFFFFFFFLL) + 0x10);
      if (v80)
      {
        *(_QWORD *)((v12 & 0xFFFFFFFFFFFFLL) + 0x10) = 0;
        *(_DWORD *)((v12 & 0xFFFFFFFFFFFFLL) + 0x18) = 0;
        WTF::fastFree(v80, a2);
      }
      WTF::fastFree((WTF *)(v12 & 0xFFFFFFFFFFFFLL), a2);
    }
  }
  v18 = *v4;
  if (*v4
    || (WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,int>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,int,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(v4, 8u, 0), (v18 = *v4) != 0))
  {
    v19 = 0;
    v20 = *(_DWORD *)(v18 - 8);
  }
  else
  {
    v20 = 0;
    v19 = 1;
  }
  v21 = 0;
  v22 = (v13 + ~(v12 << 32)) ^ ((unint64_t)(v13 + ~(v12 << 32)) >> 22);
  v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
  v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
  v25 = (v24 >> 31) ^ v24;
  for (i = 1; ; ++i)
  {
    v27 = v25 & v20;
    v28 = v18 + 16 * v27;
    v29 = *(_QWORD *)v28;
    if (*(_QWORD *)v28 != -1)
      break;
    v21 = (uint64_t *)(v18 + 16 * v27);
LABEL_22:
    v25 = i + v27;
  }
  if (!v29)
  {
    if (v21)
    {
      *v21 = 0;
      v21[1] = 0;
      --*(_DWORD *)(*v4 - 16);
      *v21 = v13;
      v28 = (uint64_t)v21;
    }
    else
    {
      *(_QWORD *)v28 = v13;
    }
    v38 = *((_QWORD *)this + 12);
    v37 = (char *)this + 96;
    v36 = v38;
    v39 = *((_DWORD *)v37 + 4);
    *((_DWORD *)v37 + 4) = v39 + 1;
    if (v38
      || (WTF::HashTable<int,WTF::KeyValuePair<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash((uint64_t *)v37, 8u), (v36 = *(_QWORD *)v37) != 0))
    {
      v40 = *(_DWORD *)(v36 - 8);
    }
    else
    {
      v40 = 0;
    }
    v41 = 9 * ((v39 + ~(v39 << 15)) ^ ((v39 + ~(v39 << 15)) >> 10));
    v42 = (v41 ^ (v41 >> 6)) + ~((v41 ^ (v41 >> 6)) << 11);
    v43 = v40 & (v42 ^ HIWORD(v42));
    v44 = v36 + 16 * v43;
    v45 = *(_DWORD *)v44;
    if (*(_DWORD *)v44)
    {
      v46 = 0;
      v47 = 1;
      while (v45 != v39)
      {
        if (v45 == -1)
          v46 = v44;
        v43 = (v43 + v47) & v40;
        v44 = v36 + 16 * v43;
        v45 = *(_DWORD *)v44;
        ++v47;
        if (!*(_DWORD *)v44)
        {
          if (v46)
          {
            *(_DWORD *)v46 = 0;
            *(_QWORD *)(v46 + 8) = 0;
            --*(_DWORD *)(*(_QWORD *)v37 - 16);
            v44 = v46;
          }
          goto LABEL_48;
        }
      }
      v56 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
      if (v56)
      {
        do
          v58 = __ldaxr(v56);
        while (__stlxr(v58 + 1, v56));
      }
      v59 = *(_QWORD *)(v44 + 8);
      *(_QWORD *)(v44 + 8) = v56;
      if (v59)
      {
        do
        {
          v60 = __ldaxr((unsigned int *)v59);
          v61 = v60 - 1;
        }
        while (__stlxr(v61, (unsigned int *)v59));
        if (!v61)
        {
          atomic_store(1u, (unsigned int *)v59);
          v62 = *(unsigned int *)(v59 + 28);
          if ((_DWORD)v62)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v59 + 16), (WTF::StringImpl *)(*(_QWORD *)(v59 + 16) + 32 * v62));
          v63 = *(WTF **)(v59 + 16);
          if (v63)
          {
            *(_QWORD *)(v59 + 16) = 0;
            *(_DWORD *)(v59 + 24) = 0;
            WTF::fastFree(v63, v57);
          }
          WTF::fastFree((WTF *)v59, v57);
        }
      }
LABEL_77:
      *(_DWORD *)(v28 + 8) = v39;
      v69 = *v4;
      if (*v4)
        v70 = *(_DWORD *)(v69 - 12) + 1;
      else
        v70 = 1;
      *(_DWORD *)(v69 - 12) = v70;
      v71 = *v4;
      if (*v4)
        v72 = *(_DWORD *)(v71 - 12);
      else
        v72 = 0;
      v73 = (*(_DWORD *)(v71 - 16) + v72);
      v74 = *(unsigned int *)(v71 - 4);
      if (v74 > 0x400)
      {
        if (v74 <= 2 * v73)
          goto LABEL_86;
      }
      else if (3 * v74 <= 4 * v73)
      {
        if (!(_DWORD)v74)
        {
          v75 = 8;
LABEL_88:
          v28 = WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,int>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,int,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(v4, v75, (uint64_t *)v28);
          v71 = *v4;
          if (*v4)
            v74 = *(unsigned int *)(v71 - 4);
          else
            v74 = 0;
          goto LABEL_92;
        }
LABEL_86:
        v75 = (_DWORD)v74 << (6 * *(_DWORD *)(v71 - 12) >= (2 * v74));
        goto LABEL_88;
      }
LABEL_92:
      v31 = v71 + 16 * v74;
      goto LABEL_93;
    }
LABEL_48:
    *(_DWORD *)v44 = v39;
    v48 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
    if (v48)
    {
      do
        v50 = __ldaxr(v48);
      while (__stlxr(v50 + 1, v48));
    }
    v51 = *(_QWORD *)(v44 + 8);
    *(_QWORD *)(v44 + 8) = v48;
    if (v51)
    {
      do
      {
        v52 = __ldaxr((unsigned int *)v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, (unsigned int *)v51));
      if (!v53)
      {
        atomic_store(1u, (unsigned int *)v51);
        v81 = *(unsigned int *)(v51 + 28);
        if ((_DWORD)v81)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v51 + 16), (WTF::StringImpl *)(*(_QWORD *)(v51 + 16) + 32 * v81));
        v82 = *(WTF **)(v51 + 16);
        if (v82)
        {
          *(_QWORD *)(v51 + 16) = 0;
          *(_DWORD *)(v51 + 24) = 0;
          WTF::fastFree(v82, v49);
        }
        WTF::fastFree((WTF *)v51, v49);
      }
    }
    v54 = *(_QWORD *)v37;
    if (*(_QWORD *)v37)
      v55 = *(_DWORD *)(v54 - 12) + 1;
    else
      v55 = 1;
    *(_DWORD *)(v54 - 12) = v55;
    v64 = *(_QWORD *)v37;
    if (*(_QWORD *)v37)
      v65 = *(_DWORD *)(v64 - 12);
    else
      v65 = 0;
    v66 = (*(_DWORD *)(v64 - 16) + v65);
    v67 = *(unsigned int *)(v64 - 4);
    if (v67 > 0x400)
    {
      if (v67 > 2 * v66)
        goto LABEL_77;
    }
    else
    {
      if (3 * v67 > 4 * v66)
        goto LABEL_77;
      if (!(_DWORD)v67)
      {
        v68 = 8;
        goto LABEL_76;
      }
    }
    v68 = (_DWORD)v67 << (6 * *(_DWORD *)(v64 - 12) >= (2 * v67));
LABEL_76:
    WTF::HashTable<int,WTF::KeyValuePair<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash((uint64_t *)v37, v68);
    goto LABEL_77;
  }
  if (v29 != v13)
    goto LABEL_22;
  if ((v19 & 1) != 0)
    v30 = 0;
  else
    v30 = *(unsigned int *)(v18 - 4);
  v31 = v18 + 16 * v30;
  if (v13)
  {
    do
    {
      v32 = __ldaxr((unsigned int *)v13);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, (unsigned int *)v13));
    if (!v33)
    {
      atomic_store(1u, (unsigned int *)v13);
      v34 = *(unsigned int *)(v13 + 28);
      if ((_DWORD)v34)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v13 + 16), (WTF::StringImpl *)(*(_QWORD *)(v13 + 16) + 32 * v34));
      v35 = *(WTF **)(v13 + 16);
      if (v35)
      {
        *(_QWORD *)(v13 + 16) = 0;
        *(_DWORD *)(v13 + 24) = 0;
        WTF::fastFree(v35, a2);
      }
      WTF::fastFree((WTF *)v13, a2);
    }
  }
LABEL_93:
  v76 = *v4;
  if (*v4)
    v76 += 16 * *(unsigned int *)(v76 - 4);
  if (v28 != v76)
  {
    while (!*(_QWORD *)(*(_QWORD *)v28 + 8))
    {
      v77 = v28 + 16;
      v28 = v31;
      if (v77 != v31)
      {
        v28 = v77;
        while ((unint64_t)(*(_QWORD *)v28 + 1) <= 1)
        {
          v28 += 16;
          if (v28 == v31)
          {
            v28 = v31;
            break;
          }
        }
      }
      if (v28 == v76)
      {
        v28 = v76;
        return *(unsigned int *)(v28 + 8);
      }
    }
  }
  return *(unsigned int *)(v28 + 8);
}

uint64_t *WebCore::InspectorDOMAgent::unbind(WebCore::InspectorDOMAgent *this, WebCore::Node *a2)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::InspectorCSSAgent *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  result = (uint64_t *)WTF::WeakHashMap<WebCore::Node,int,WebCore::WeakPtrImplWithEventTargetData>::take((uint64_t)this + 80, a2);
  if ((_DWORD)result)
  {
    v5 = result;
    v6 = *((_QWORD *)this + 12);
    if (v6)
    {
      v7 = *(_DWORD *)(v6 - 8);
      v8 = 9
         * (((_DWORD)result + ~((_DWORD)result << 15)) ^ (((_DWORD)result + ~((_DWORD)result << 15)) >> 10));
      v9 = (v8 ^ (v8 >> 6)) + ~((v8 ^ (v8 >> 6)) << 11);
      v10 = v7 & (v9 ^ HIWORD(v9));
      v11 = *(_DWORD *)(v6 + 16 * v10);
      if (v11 != (_DWORD)result)
      {
        v12 = 1;
        while (v11)
        {
          v10 = ((_DWORD)v10 + v12) & v7;
          v11 = *(_DWORD *)(v6 + 16 * v10);
          ++v12;
          if (v11 == (_DWORD)result)
            goto LABEL_9;
        }
        v10 = *(unsigned int *)(v6 - 4);
      }
LABEL_9:
      if (v10 != *(_DWORD *)(v6 - 4))
        WTF::HashTable<int,WTF::KeyValuePair<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::remove((uint64_t *)this + 12, (_QWORD *)(v6 + 16 * v10));
    }
    if ((*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)a2 + 192))(a2))
    {
      v54 = *((_QWORD *)a2 + 14);
      if (v54)
      {
        v55 = *(_QWORD *)(v54 + 8);
        if (v55)
        {
          if (!*(_BYTE *)(v55 + 144))
          {
            v56 = *(_QWORD *)(v55 + 296);
            if (v56)
            {
              *(_DWORD *)(v56 + 24) += 2;
              WebCore::InspectorDOMAgent::unbind(this, (WebCore::Node *)v56);
              if (*(_DWORD *)(v56 + 24) == 2)
              {
                if ((*(_WORD *)(v56 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v56);
              }
              else
              {
                *(_DWORD *)(v56 + 24) -= 2;
              }
            }
          }
        }
      }
    }
    if ((*((_WORD *)a2 + 14) & 8) != 0)
    {
      *((_DWORD *)a2 + 6) += 2;
      if ((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v41 = *(_QWORD *)((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
        if (v41)
        {
          *(_DWORD *)(v41 + 24) += 2;
          WebCore::InspectorDOMAgent::unbind(this, (WebCore::Node *)v41);
          if (*(_DWORD *)(v41 + 24) == 2)
          {
            if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v41);
          }
          else
          {
            *(_DWORD *)(v41 + 24) -= 2;
          }
        }
      }
      if ((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v13 = *(_QWORD *)((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0xA8);
        if (v13)
        {
          *(_DWORD *)(v13 + 24) += 2;
          WebCore::InspectorDOMAgent::unbind(this, (WebCore::Node *)v13);
          if (*(_DWORD *)(v13 + 24) == 2)
          {
            if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v13);
          }
          else
          {
            *(_DWORD *)(v13 + 24) -= 2;
          }
        }
      }
      if ((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v14 = *(_QWORD *)((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0xB0);
        if (v14)
        {
          *(_DWORD *)(v14 + 24) += 2;
          WebCore::InspectorDOMAgent::unbind(this, (WebCore::Node *)v14);
          if (*(_DWORD *)(v14 + 24) == 2)
          {
            if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v14);
          }
          else
          {
            *(_DWORD *)(v14 + 24) -= 2;
          }
        }
      }
      if (*((_DWORD *)a2 + 6) == 2)
      {
        if ((*((_WORD *)a2 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a2);
      }
      else
      {
        *((_DWORD *)a2 + 6) -= 2;
      }
    }
    v15 = *(WebCore::InspectorCSSAgent **)(*((_QWORD *)this + 2) + 112);
    if (v15)
      WebCore::InspectorCSSAgent::didRemoveDOMNode(v15, a2, v5);
    result = (uint64_t *)((char *)this + 104);
    v16 = *((_QWORD *)this + 13);
    if (v16)
    {
      v17 = *(_DWORD *)(v16 - 8);
      v18 = 9 * (((_DWORD)v5 + ~((_DWORD)v5 << 15)) ^ (((_DWORD)v5 + ~((_DWORD)v5 << 15)) >> 10));
      v19 = v17 & (((v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11)) ^ (((v18 ^ (v18 >> 6))
                                                                        + ~((v18 ^ (v18 >> 6)) << 11)) >> 16));
      v20 = *(_DWORD *)(v16 + 4 * v19);
      if (v20 != (_DWORD)v5)
      {
        v21 = 1;
        while (v20)
        {
          v19 = ((_DWORD)v19 + v21) & v17;
          v20 = *(_DWORD *)(v16 + 4 * v19);
          ++v21;
          if (v20 == (_DWORD)v5)
            goto LABEL_33;
        }
        v19 = *(unsigned int *)(v16 - 4);
      }
LABEL_33:
      if (v19 != *(_DWORD *)(v16 - 4))
      {
        v22 = -1;
        *(_DWORD *)(v16 + 4 * v19) = -1;
        ++*(_DWORD *)(*result - 16);
        v23 = *result;
        if (*result)
          v22 = *(_DWORD *)(v23 - 12) - 1;
        *(_DWORD *)(v23 - 12) = v22;
        v24 = *result;
        if (*result)
        {
          v25 = 6 * *(_DWORD *)(v24 - 12);
          v26 = *(_DWORD *)(v24 - 4);
          if (v25 < v26 && v26 >= 9)
            result = (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(result, v26 >> 1, 0);
        }
        if ((*((_WORD *)a2 + 14) & 4) != 0)
        {
          v28 = *((_QWORD *)a2 + 10);
          if (v28)
          {
            while ((*(_WORD *)(v28 + 28) & 2) != 0)
            {
              v29 = *(_WORD *)(v28 + 30);
              if ((v29 & 0x100) != 0)
              {
                if ((v29 & 0x80) == 0)
                  break;
              }
              else
              {
                v30 = *(_QWORD *)(v28 + 80);
                if (v30)
                {
                  v31 = *(unsigned __int8 **)(v30 + 8);
                  v32 = *(unsigned int *)(v30 + 4);
                  if ((*(_BYTE *)(v30 + 16) & 4) != 0)
                  {
                    if ((_DWORD)v32)
                    {
                      while (1)
                      {
                        v33 = *v31;
                        v34 = v33 > 0x20;
                        v35 = (1 << v33) & 0x100003600;
                        if (v34 || v35 == 0)
                          break;
                        ++v31;
                        if (!--v32)
                          goto LABEL_66;
                      }
LABEL_78:
                      *(_WORD *)(v28 + 30) = v29 & 0xFE7F | 0x100;
                      break;
                    }
                  }
                  else if ((_DWORD)v32)
                  {
                    v37 = 2 * v32;
                    do
                    {
                      v38 = *(unsigned __int16 *)v31;
                      v34 = v38 > 0x20;
                      v39 = (1 << v38) & 0x100003600;
                      if (v34 || v39 == 0)
                        goto LABEL_78;
                      v31 += 2;
                      v37 -= 2;
                    }
                    while (v37);
                  }
                }
LABEL_66:
                *(_WORD *)(v28 + 30) = v29 | 0x180;
              }
              v28 = *(_QWORD *)(v28 + 56);
              if (!v28)
                return result;
            }
            result = (uint64_t *)WebCore::InspectorDOMAgent::unbind(this, (WebCore::Node *)v28);
            v42 = *(_QWORD *)(v28 + 56);
            if (v42)
            {
              while (1)
              {
                if ((*(_WORD *)(v42 + 28) & 2) == 0)
                  goto LABEL_83;
                v43 = *(_WORD *)(v42 + 30);
                if ((v43 & 0x100) == 0)
                  break;
                if ((v43 & 0x80) == 0)
                  goto LABEL_83;
LABEL_84:
                v42 = *(_QWORD *)(v42 + 56);
                if (!v42)
                  return result;
              }
              v44 = *(_QWORD *)(v42 + 80);
              if (!v44)
                goto LABEL_102;
              v45 = *(unsigned __int8 **)(v44 + 8);
              v46 = *(unsigned int *)(v44 + 4);
              if ((*(_BYTE *)(v44 + 16) & 4) != 0)
              {
                if (!(_DWORD)v46)
                  goto LABEL_102;
                while (1)
                {
                  v47 = *v45;
                  v34 = v47 > 0x20;
                  v48 = (1 << v47) & 0x100003600;
                  if (v34 || v48 == 0)
                    break;
                  ++v45;
                  if (!--v46)
                    goto LABEL_102;
                }
              }
              else
              {
                if (!(_DWORD)v46)
                {
LABEL_102:
                  *(_WORD *)(v42 + 30) = v43 | 0x180;
                  goto LABEL_84;
                }
                v50 = 2 * v46;
                while (1)
                {
                  v51 = *(unsigned __int16 *)v45;
                  v34 = v51 > 0x20;
                  v52 = (1 << v51) & 0x100003600;
                  if (v34 || v52 == 0)
                    break;
                  v45 += 2;
                  v50 -= 2;
                  if (!v50)
                    goto LABEL_102;
                }
              }
              *(_WORD *)(v42 + 30) = v43 & 0xFE7F | 0x100;
LABEL_83:
              result = (uint64_t *)WebCore::InspectorDOMAgent::unbind(this, (WebCore::Node *)v42);
              goto LABEL_84;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::Node,int,WebCore::WeakPtrImplWithEventTargetData>::take(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF *v31;

  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  if (v4 > v5)
    WTF::WeakHashMap<WebCore::Node,int,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(a1, a2);
  v6 = a2[2];
  v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
  if ((v6 & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 8))
    return 0;
  v8 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    return 0;
  v9 = *(_DWORD *)(v8 - 8);
  v10 = ((unint64_t)v7 + ~(v6 << 32)) ^ (((unint64_t)v7 + ~(v6 << 32)) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  for (i = 1; ; v13 = (v15 + i++) & v9)
  {
    v15 = v13;
    v16 = *(unsigned int **)(v8 + 16 * v13);
    if (v16 != (unsigned int *)-1)
    {
      if (!v16)
        return 0;
      if (v16 == v7)
        break;
    }
  }
  if ((_DWORD)v15 == *(_DWORD *)(v8 - 4))
    return 0;
  v19 = v8 + 16 * v15;
  v17 = *(unsigned int *)(v19 + 8);
  *(_QWORD *)v19 = 0;
  do
  {
    v20 = __ldaxr(v7);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v7));
  if (!v21)
  {
    v30 = v19;
    v31 = (WTF *)v7;
    atomic_store(1u, v7);
    v28 = v7[7];
    if ((_DWORD)v28)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v31 + 2), (WTF::StringImpl *)(*((_QWORD *)v31 + 2) + 32 * v28));
    v29 = (WTF *)*((_QWORD *)v31 + 2);
    if (v29)
    {
      *((_QWORD *)v31 + 2) = 0;
      *((_DWORD *)v31 + 6) = 0;
      WTF::fastFree(v29, a2);
    }
    WTF::fastFree(v31, a2);
    v19 = v30;
  }
  *(_QWORD *)v19 = -1;
  ++*(_DWORD *)(*(_QWORD *)a1 - 16);
  v22 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    v23 = *(_DWORD *)(v22 - 12) - 1;
  else
    v23 = -1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v25 = 6 * *(_DWORD *)(v24 - 12);
    v26 = *(_DWORD *)(v24 - 4);
    if (v25 < v26 && v26 >= 9)
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,int>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,int,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)a1, v26 >> 1, 0);
  }
  return v17;
}

uint64_t WebCore::InspectorDOMAgent::nodeForId(WebCore::InspectorDOMAgent *this, void *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (((_DWORD)a2 - 1) > 0xFFFFFFFD)
    return 0;
  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = 9 * ((~((_DWORD)a2 << 15) + (_DWORD)a2) ^ ((~((_DWORD)a2 << 15) + (_DWORD)a2) >> 10));
    v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
    v6 = v3 & (v5 ^ HIWORD(v5));
    v7 = *(_DWORD *)(v2 + 16 * v6);
    if (v7 != (_DWORD)a2)
    {
      v8 = 1;
      while (v7)
      {
        v6 = ((_DWORD)v6 + v8) & v3;
        v7 = *(_DWORD *)(v2 + 16 * v6);
        ++v8;
        if (v7 == (_DWORD)a2)
          goto LABEL_7;
      }
      return 0;
    }
LABEL_7:
    v9 = *(_QWORD *)(v2 + 16 * v6 + 8);
    if (!v9)
      return 0;
    do
      v10 = __ldaxr((unsigned int *)v9);
    while (__stlxr(v10 + 1, (unsigned int *)v9));
    v2 = *(_QWORD *)(v9 + 8);
    do
    {
      v11 = __ldaxr((unsigned int *)v9);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v9));
    if (!v12)
    {
      v18 = v2;
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(unsigned int *)(v9 + 28);
      if ((_DWORD)v13)
      {
        v17 = v9;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v9 + 16), (WTF::StringImpl *)(*(_QWORD *)(v9 + 16) + 32 * v13));
        v9 = v17;
      }
      v14 = *(WTF **)(v9 + 16);
      if (v14)
      {
        *(_QWORD *)(v9 + 16) = 0;
        *(_DWORD *)(v9 + 24) = 0;
        v16 = v9;
        WTF::fastFree(v14, a2);
        v9 = v16;
      }
      WTF::fastFree((WTF *)v9, a2);
      return v18;
    }
  }
  return v2;
}

uint64_t WebCore::InspectorDOMAgent::assertDocument(WebCore::InspectorDOMAgent *this, WTF::StringImpl **a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v4 = WebCore::InspectorDOMAgent::nodeForId(this, a3);
  if (!v4)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v11 = *a2;
    *a2 = v14;
    if (v11)
    {
      if (*(_DWORD *)v11 != 2)
      {
        v7 = 0;
        *(_DWORD *)v11 -= 2;
        return v7;
      }
      WTF::StringImpl::destroy(v11, v10);
    }
    return 0;
  }
  v5 = v4;
  v6 = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v6 + 2;
  if (!v6)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) != 0)
    {
      v6 = 2;
    }
    else
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v4);
      v6 = *(_DWORD *)(v5 + 24);
    }
  }
  *(_DWORD *)(v5 + 24) = v6 + 2;
  if ((*(_WORD *)(v5 + 28) & 0xF000) == 0x9000)
    v7 = v5;
  else
    v7 = 0;
  if (v7)
  {
    v8 = *(_DWORD *)(v7 + 24);
    *(_DWORD *)(v7 + 24) = v8 + 2;
    if (v8)
    {
      *(_DWORD *)(v7 + 24) = v8;
    }
    else if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = *a2;
    *a2 = v14;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v7;
}

uint64_t WebCore::InspectorDOMAgent::assertEditableNode(WebCore::InspectorDOMAgent *this, WTF::StringImpl **a2, void *a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v5 = WebCore::InspectorDOMAgent::nodeForId(this, a3);
  if (!v5)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v15 = *a2;
    *a2 = v16;
    if (v15)
    {
      if (*(_DWORD *)v15 != 2)
      {
        v11 = 0;
        *(_DWORD *)v15 -= 2;
        return v11;
      }
      WTF::StringImpl::destroy(v15, v14);
    }
    return 0;
  }
  v7 = v5;
  v8 = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v8 + 2;
  if (!v8)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) != 0)
    {
      v8 = 2;
    }
    else
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
      v8 = *(_DWORD *)(v7 + 24);
    }
  }
  *(_DWORD *)(v7 + 24) = v8 + 2;
  v9 = **(_QWORD **)(v7 + 40);
  if (v9)
    v10 = (*(_WORD *)(v9 + 28) & 0x80) == 0;
  else
    v10 = 1;
  if (!v10 && !*(_BYTE *)(v9 + 193) && !*((_BYTE *)this + 441)
    || (v11 = v7, (~*(unsigned __int16 *)(v7 + 28) & 0x408) == 0)
    && (v11 = v7, (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 368))(v7)))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = *a2;
    *a2 = v16;
    if (v12)
    {
      if (*(_DWORD *)v12 != 2)
      {
        v11 = 0;
        *(_DWORD *)v12 -= 2;
        goto LABEL_13;
      }
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v6);
    }
    v11 = 0;
  }
LABEL_13:
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v6);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  return v11;
}

uint64_t WebCore::InspectorDOMAgent::assertEditableElement(WebCore::InspectorDOMAgent *this, WTF::StringImpl **a2, void *a3)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v4 = WebCore::InspectorDOMAgent::assertEditableNode(this, a2, a3);
  if (!v4)
    return 0;
  v6 = v4;
  v7 = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 4;
  v8 = v7 + 2;
  if ((*(_WORD *)(v4 + 28) & 8) != 0)
  {
    if (v8)
    {
      *(_DWORD *)(v4 + 24) = v8;
LABEL_5:
      v9 = v6;
      goto LABEL_6;
    }
    v9 = v4;
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
      goto LABEL_5;
    }
  }
  else
  {
    if (v8)
    {
      *(_DWORD *)(v4 + 24) = v8;
    }
    else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v11 = *a2;
    *a2 = v12;
    if (v11)
    {
      if (*(_DWORD *)v11 != 2)
      {
        v9 = 0;
        *(_DWORD *)v11 -= 2;
        goto LABEL_6;
      }
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v5);
    }
    v9 = 0;
  }
LABEL_6:
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v5);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return v9;
}

void WebCore::InspectorDOMAgent::getDocument(WebCore::InspectorDOMAgent *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  WebCore::Node *v7;
  void *v8;
  WTF::StringImpl *v9;

  *((_BYTE *)this + 440) = 1;
  v4 = *((_QWORD *)this + 15);
  if (v4)
  {
    *(_DWORD *)(v4 + 24) += 2;
    WebCore::InspectorDOMAgent::reset(this, a2);
    *(_DWORD *)(v4 + 24) += 2;
    v6 = *((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = v4;
    v7 = (WebCore::Node *)v4;
    if (v6)
    {
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        v7 = (WebCore::Node *)v4;
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v6, (void *)v4);
          v7 = (WebCore::Node *)*((_QWORD *)this + 15);
        }
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
        v7 = (WebCore::Node *)v4;
      }
    }
    WebCore::InspectorDOMAgent::buildObjectForNode(&v9, this, v7, 2);
    if (*((_QWORD *)this + 18))
      WebCore::InspectorDOMAgent::focusNode(this, v8);
    *(_QWORD *)a3 = v9;
    *(_DWORD *)(a3 + 8) = 0;
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v8);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_DWORD *)(a3 + 8) = 1;
  }
}

WTF::StringImpl *WebCore::InspectorDOMAgent::buildObjectForNode@<X0>(WTF::StringImpl **__return_ptr a1@<X8>, WebCore::InspectorDOMAgent *this@<X0>, WebCore::Node *a3@<X1>, int a4@<W2>)
{
  WebCore::InspectorDOMAgent *v6;
  WTF::JSONImpl::Value *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::JSONImpl::Value *v33;
  WTF::StringImpl *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  const WTF::String *v41;
  WTF::StringImpl *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  const WTF::String *v49;
  WTF::StringImpl *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  const WTF::String *v57;
  WTF::StringImpl *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  unsigned __int8 *v68;
  uint64_t v69;
  unsigned int v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v78;
  WTF::StringImpl *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  char v96;
  char v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  unsigned int *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  __int16 v112;
  WebCore::Node *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringBuilder *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WebCore::Node *v134;
  WTF::StringImpl *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  WTF::StringImpl *v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  void *v154;
  void *v155;
  void *v156;
  WTF::StringImpl **v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  __int16 v167;
  WTF::StringImpl **v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF *v171;
  WTF *v172;
  void *v173;
  unsigned int *v174;
  uint64_t v175;
  WTF::StringImpl *v176;
  const WTF::String *v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  uint64_t v185;
  uint64_t v186;
  const WTF::String *v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  WTF::StringImpl *v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  void *v207;
  void *v208;
  void *v209;
  WTF::StringImpl **v210;
  WTF::StringImpl *v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  void *v216;
  void *v217;
  void *v218;
  WTF::StringImpl **v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  WTF::StringImpl *v223;
  WTF::StringImpl *v224;
  WTF::StringImpl *v225;
  WTF::StringImpl *v226;
  WTF *v227;
  WebCore::HTMLMetaCharsetParser *v228;
  WTF *v229;
  void *v230;
  uint64_t v231;
  const WTF::String *v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t v235;
  WTF::StringImpl *v236;
  WTF::StringImpl *v237;
  WTF::StringImpl *v238;
  int v239;
  WTF::StringImpl *v240;
  WTF::StringImpl *v241;
  WTF::StringImpl *result;
  uint64_t v243;
  __int16 v244;
  uint64_t v245;
  unsigned __int8 *v246;
  uint64_t v247;
  unsigned int v248;
  uint64_t v249;
  uint64_t v251;
  unsigned int v252;
  uint64_t v253;
  _DWORD **v255;
  uint64_t v256;
  _DWORD *v257;
  _DWORD **v258;
  uint64_t v259;
  _DWORD *v260;
  _DWORD **v261;
  uint64_t v262;
  _DWORD *v263;
  _DWORD **v264;
  uint64_t v265;
  _DWORD *v266;
  _DWORD **v267;
  uint64_t v268;
  _DWORD *v269;
  _DWORD **v270;
  uint64_t v271;
  _DWORD *v272;
  _DWORD **v273;
  uint64_t v274;
  _DWORD *v275;
  _DWORD **v276;
  uint64_t v277;
  _DWORD *v278;
  _DWORD **v279;
  uint64_t v280;
  _DWORD *v281;
  _DWORD **v282;
  uint64_t v283;
  _DWORD *v284;
  _DWORD **v285;
  uint64_t v286;
  _DWORD *v287;
  _DWORD **v288;
  uint64_t v289;
  _DWORD *v290;
  _DWORD **v291;
  uint64_t v292;
  _DWORD *v293;
  _DWORD **v294;
  uint64_t v295;
  _DWORD *v296;
  _DWORD **v297;
  uint64_t v298;
  _DWORD *v299;
  int v300;
  uint64_t v301;
  WebCore::Frame *v302;
  WTF::StringImpl *v303;
  WTF::StringImpl *v304;
  WTF::StringImpl *v305;
  const WTF::String *v306;
  WTF::StringImpl *v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t v310;
  WTF::StringImpl *v311;
  WTF::StringImpl *v312;
  WTF::StringImpl *v313;
  WTF::StringImpl *v314;
  WTF::StringImpl *v315;
  WTF::StringImpl *v316;
  int v317;
  const WTF::String *v318;
  WTF::StringImpl *v319;
  uint64_t *v320;
  uint64_t v321;
  uint64_t v322;
  WTF::StringImpl *v323;
  WTF::StringImpl *v324;
  WTF::StringImpl *v325;
  WTF::StringImpl *v326;
  WTF::StringImpl *v327;
  const WTF::String *v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  WTF::StringImpl *v332;
  WTF::StringImpl *v333;
  WTF::StringImpl *v334;
  _DWORD **v335;
  uint64_t v336;
  _DWORD *v337;
  _DWORD **v338;
  uint64_t v339;
  _DWORD *v340;
  _DWORD **v341;
  uint64_t v342;
  _DWORD *v343;
  _DWORD **v344;
  uint64_t v345;
  _DWORD *v346;
  const WTF::String *v347;
  WTF::StringImpl *v348;
  uint64_t *v349;
  uint64_t v350;
  uint64_t v351;
  WTF::StringImpl *v352;
  WTF::StringImpl *v353;
  WTF::StringImpl *v354;
  const WTF::String *v355;
  uint64_t *v356;
  uint64_t v357;
  uint64_t v358;
  WTF::StringImpl *v359;
  uint64_t v360;
  __int16 v361;
  _DWORD **v362;
  uint64_t v363;
  _DWORD *v364;
  _DWORD **v365;
  uint64_t v366;
  _DWORD *v367;
  int v368;
  unsigned int v369;
  const WTF::String *v370;
  WTF::StringImpl *v371;
  WTF::String *v372;
  __n128 v373;
  uint64_t *v374;
  uint64_t v375;
  uint64_t v376;
  WTF::StringImpl *v377;
  WTF::StringImpl *v378;
  WTF::StringImpl *v379;
  WTF::StringImpl *v380;
  uint64_t v381;
  WTF::StringImpl *v382;
  uint64_t v383;
  _DWORD **v384;
  uint64_t v385;
  _DWORD *v386;
  char v387;
  WebCore::InspectorDOMAgent *v388;
  WebCore::InspectorDOMAgent *v389;
  WTF::StringImpl *v390;
  WTF::StringImpl *v391;
  WTF::StringImpl *v392;
  WTF::StringImpl *v393;
  WTF::StringImpl *v394;
  uint64_t v395;
  int v396;
  WTF::StringImpl *v397;
  unsigned int v398;
  WTF *v399;
  WTF::StringImpl *v400;
  uint64_t v401;
  WTF::StringImpl *v402[2];
  WTF::StringImpl *v403;
  __int128 v404;
  uint64_t v405;

  v6 = this;
  v8 = (WTF::JSONImpl::Value *)WebCore::InspectorDOMAgent::bind(this, a3);
  v392 = 0;
  v393 = 0;
  v391 = 0;
  switch(*((unsigned __int16 *)a3 + 14) >> 12)
  {
    case 2:
      v9 = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)a3 + 144))(a3);
      v10 = *(WTF::StringImpl **)v9;
      if (*(_QWORD *)v9)
        *(_DWORD *)v10 += 2;
      v392 = v10;
      goto LABEL_26;
    case 3:
    case 4:
    case 8:
      goto LABEL_14;
    case 7:
      (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Node *))(*(_QWORD *)a3 + 104))(&v403, a3);
      v14 = v403;
      v403 = 0;
      v393 = v14;
      v16 = *(WTF::StringImpl **)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)a3 + 144))(a3);
      if (v16)
        *(_DWORD *)v16 += 2;
      v17 = v392;
      v392 = v16;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v15);
        else
          *(_DWORD *)v17 -= 2;
      }
LABEL_14:
      (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Node *))(*(_QWORD *)a3 + 112))(&v403, a3);
      v19 = v403;
      v403 = 0;
      v9 = v391;
      v391 = v19;
      if (!v9)
        goto LABEL_18;
      v20 = *(_DWORD *)v9 - 2;
      if (*(_DWORD *)v9 != 2)
        goto LABEL_16;
      WTF::StringImpl::destroy(v9, v18);
      v9 = v403;
      v403 = 0;
      if (v9)
      {
        v20 = *(_DWORD *)v9 - 2;
        if (*(_DWORD *)v9 == 2)
          v9 = (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v226);
        else
LABEL_16:
          *(_DWORD *)v9 = v20;
      }
      v19 = v391;
LABEL_18:
      if (v19 && *((_DWORD *)v19 + 1) >= 0x2711u)
      {
        v21 = *((_DWORD *)v19 + 4);
        v22 = (WTF::StringImpl *)*((_QWORD *)v19 + 1);
        WTF::tryFastCompactMalloc((WTF *)0x4E36);
        v23 = v403;
        if (!v403)
        {
          __break(0xC471u);
          JUMPOUT(0x195E19B28);
        }
        v24 = 10000;
        *(_QWORD *)v403 = 0x271100000002;
        *((_QWORD *)v23 + 1) = (char *)v23 + 20;
        if ((v21 & 4) != 0)
          v24 = 0x100002710;
        *((_DWORD *)v23 + 4) = 0;
        v403 = v22;
        *(_QWORD *)&v404 = v24;
        WTF::StringView::getCharacters<char16_t>(&v403, (char *)v23 + 20);
        *((_WORD *)v23 + v404 + 10) = 8230;
        v9 = v391;
        v391 = v23;
        if (v9)
        {
LABEL_24:
          if (*(_DWORD *)v9 == 2)
            v9 = (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v12);
          else
            *(_DWORD *)v9 -= 2;
        }
      }
LABEL_26:
      WTF::JSONImpl::Object::create(v9);
      v25 = v403;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create(v8);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v25 + 2, v402, (const WTF::StringImpl *)&v394, (uint64_t)&v403);
      if (BYTE8(v404))
      {
        v27 = (uint64_t *)((char *)v25 + 24);
        v28 = *((unsigned int *)v25 + 9);
        if ((_DWORD)v28 == *((_DWORD *)v25 + 8))
        {
          v255 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v27, v28 + 1, (unint64_t)v402);
          v28 = *((unsigned int *)v25 + 9);
          v256 = *((_QWORD *)v25 + 3);
          v257 = *v255;
          if (*v255)
            *v257 += 2;
          *(_QWORD *)(v256 + 8 * v28) = v257;
        }
        else
        {
          v29 = *v27;
          v30 = v402[0];
          if (v402[0])
            *(_DWORD *)v402[0] += 2;
          *(_QWORD *)(v29 + 8 * v28) = v30;
        }
        *((_DWORD *)v25 + 9) = v28 + 1;
      }
      v31 = v394;
      v394 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v31;
      }
      v32 = v402[0];
      v402[0] = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v26);
        else
          *(_DWORD *)v32 -= 2;
      }
      v33 = (WTF::JSONImpl::Value *)(*((unsigned __int16 *)a3 + 14) >> 12);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create(v33);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v25 + 2, v402, (const WTF::StringImpl *)&v394, (uint64_t)&v403);
      if (BYTE8(v404))
      {
        v35 = (uint64_t *)((char *)v25 + 24);
        v36 = *((unsigned int *)v25 + 9);
        if ((_DWORD)v36 == *((_DWORD *)v25 + 8))
        {
          v258 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, v36 + 1, (unint64_t)v402);
          v36 = *((unsigned int *)v25 + 9);
          v259 = *((_QWORD *)v25 + 3);
          v260 = *v258;
          if (*v258)
            *v260 += 2;
          *(_QWORD *)(v259 + 8 * v36) = v260;
        }
        else
        {
          v37 = *v35;
          v38 = v402[0];
          if (v402[0])
            *(_DWORD *)v402[0] += 2;
          *(_QWORD *)(v37 + 8 * v36) = v38;
        }
        *((_DWORD *)v25 + 9) = v36 + 1;
      }
      v39 = v394;
      v394 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v39;
      }
      v40 = v402[0];
      v402[0] = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v34);
        else
          *(_DWORD *)v40 -= 2;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v393, v41);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v25 + 2, v402, (const WTF::StringImpl *)&v394, (uint64_t)&v403);
      if (BYTE8(v404))
      {
        v43 = (uint64_t *)((char *)v25 + 24);
        v44 = *((unsigned int *)v25 + 9);
        if ((_DWORD)v44 == *((_DWORD *)v25 + 8))
        {
          v261 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)v402);
          v44 = *((unsigned int *)v25 + 9);
          v262 = *((_QWORD *)v25 + 3);
          v263 = *v261;
          if (*v261)
            *v263 += 2;
          *(_QWORD *)(v262 + 8 * v44) = v263;
        }
        else
        {
          v45 = *v43;
          v46 = v402[0];
          if (v402[0])
            *(_DWORD *)v402[0] += 2;
          *(_QWORD *)(v45 + 8 * v44) = v46;
        }
        *((_DWORD *)v25 + 9) = v44 + 1;
      }
      v47 = v394;
      v394 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v47;
      }
      v48 = v402[0];
      v402[0] = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
          WTF::StringImpl::destroy(v48, v42);
        else
          *(_DWORD *)v48 -= 2;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v392, v49);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v25 + 2, v402, (const WTF::StringImpl *)&v394, (uint64_t)&v403);
      if (BYTE8(v404))
      {
        v51 = (uint64_t *)((char *)v25 + 24);
        v52 = *((unsigned int *)v25 + 9);
        if ((_DWORD)v52 == *((_DWORD *)v25 + 8))
        {
          v264 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v51, v52 + 1, (unint64_t)v402);
          v52 = *((unsigned int *)v25 + 9);
          v265 = *((_QWORD *)v25 + 3);
          v266 = *v264;
          if (*v264)
            *v266 += 2;
          *(_QWORD *)(v265 + 8 * v52) = v266;
        }
        else
        {
          v53 = *v51;
          v54 = v402[0];
          if (v402[0])
            *(_DWORD *)v402[0] += 2;
          *(_QWORD *)(v53 + 8 * v52) = v54;
        }
        *((_DWORD *)v25 + 9) = v52 + 1;
      }
      v55 = v394;
      v394 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v55;
      }
      v56 = v402[0];
      v402[0] = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
          WTF::StringImpl::destroy(v56, v50);
        else
          *(_DWORD *)v56 -= 2;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v391, v57);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v25 + 2, v402, (const WTF::StringImpl *)&v394, (uint64_t)&v403);
      if (BYTE8(v404))
      {
        v59 = (uint64_t *)((char *)v25 + 24);
        v60 = *((unsigned int *)v25 + 9);
        if ((_DWORD)v60 == *((_DWORD *)v25 + 8))
        {
          v267 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v59, v60 + 1, (unint64_t)v402);
          v60 = *((unsigned int *)v25 + 9);
          v268 = *((_QWORD *)v25 + 3);
          v269 = *v267;
          if (*v267)
            *v269 += 2;
          *(_QWORD *)(v268 + 8 * v60) = v269;
        }
        else
        {
          v61 = *v59;
          v62 = v402[0];
          if (v402[0])
            *(_DWORD *)v402[0] += 2;
          *(_QWORD *)(v61 + 8 * v60) = v62;
        }
        *((_DWORD *)v25 + 9) = v60 + 1;
      }
      v63 = v394;
      v394 = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v63;
      }
      v64 = v402[0];
      v402[0] = 0;
      if (v64)
      {
        if (*(_DWORD *)v64 == 2)
          WTF::StringImpl::destroy(v64, v58);
        else
          *(_DWORD *)v64 -= 2;
      }
      *a1 = v25;
      if ((*((_WORD *)a3 + 14) & 4) == 0)
        goto LABEL_138;
      v65 = *((_QWORD *)a3 + 10);
      if (!v65)
        goto LABEL_110;
      break;
    default:
      (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Node *))(*(_QWORD *)a3 + 104))(&v403, a3);
      v11 = v403;
      v403 = 0;
      v393 = v11;
      v13 = *(WTF::StringImpl **)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)a3 + 144))(a3);
      if (v13)
        *(_DWORD *)v13 += 2;
      v9 = v392;
      v392 = v13;
      if (!v9)
        goto LABEL_26;
      goto LABEL_24;
  }
  do
  {
    if ((*(_WORD *)(v65 + 28) & 2) == 0)
      goto LABEL_461;
    v66 = *(_WORD *)(v65 + 30);
    if ((v66 & 0x100) != 0)
    {
      if ((v66 & 0x80) == 0)
        goto LABEL_461;
    }
    else
    {
      v67 = *(_QWORD *)(v65 + 80);
      if (v67)
      {
        v68 = *(unsigned __int8 **)(v67 + 8);
        v69 = *(unsigned int *)(v67 + 4);
        if ((*(_BYTE *)(v67 + 16) & 4) != 0)
        {
          if ((_DWORD)v69)
          {
            while (1)
            {
              v70 = *v68;
              v71 = v70 > 0x20;
              v72 = (1 << v70) & 0x100003600;
              if (v71 || v72 == 0)
                break;
              ++v68;
              if (!--v69)
                goto LABEL_109;
            }
LABEL_460:
            *(_WORD *)(v65 + 30) = v66 & 0xFE7F | 0x100;
LABEL_461:
            v243 = *(_QWORD *)(v65 + 56);
            if (!v243)
            {
              v78 = 1;
              goto LABEL_111;
            }
            v78 = 1;
            while (2)
            {
              if ((*(_WORD *)(v243 + 28) & 2) == 0)
                goto LABEL_486;
              v244 = *(_WORD *)(v243 + 30);
              if ((v244 & 0x100) != 0)
              {
                if ((v244 & 0x80) != 0)
                  goto LABEL_466;
LABEL_486:
                v78 = (v78 + 1);
LABEL_466:
                v243 = *(_QWORD *)(v243 + 56);
                if (!v243)
                  goto LABEL_111;
                continue;
              }
              break;
            }
            v245 = *(_QWORD *)(v243 + 80);
            if (v245)
            {
              v246 = *(unsigned __int8 **)(v245 + 8);
              v247 = *(unsigned int *)(v245 + 4);
              if ((*(_BYTE *)(v245 + 16) & 4) != 0)
              {
                if ((_DWORD)v247)
                {
                  while (1)
                  {
                    v248 = *v246;
                    v71 = v248 > 0x20;
                    v249 = (1 << v248) & 0x100003600;
                    if (v71 || v249 == 0)
                      break;
                    ++v246;
                    if (!--v247)
                      goto LABEL_484;
                  }
LABEL_485:
                  *(_WORD *)(v243 + 30) = v244 & 0xFE7F | 0x100;
                  goto LABEL_486;
                }
              }
              else if ((_DWORD)v247)
              {
                v251 = 2 * v247;
                do
                {
                  v252 = *(unsigned __int16 *)v246;
                  v71 = v252 > 0x20;
                  v253 = (1 << v252) & 0x100003600;
                  if (v71 || v253 == 0)
                    goto LABEL_485;
                  v246 += 2;
                  v251 -= 2;
                }
                while (v251);
              }
            }
LABEL_484:
            *(_WORD *)(v243 + 30) = v244 | 0x180;
            goto LABEL_466;
          }
        }
        else if ((_DWORD)v69)
        {
          v74 = 2 * v69;
          do
          {
            v75 = *(unsigned __int16 *)v68;
            v71 = v75 > 0x20;
            v76 = (1 << v75) & 0x100003600;
            if (v71 || v76 == 0)
              goto LABEL_460;
            v68 += 2;
            v74 -= 2;
          }
          while (v74);
        }
      }
LABEL_109:
      *(_WORD *)(v65 + 30) = v66 | 0x180;
    }
    v65 = *(_QWORD *)(v65 + 56);
  }
  while (v65);
LABEL_110:
  v78 = 0;
LABEL_111:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)v78);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v25 + 2, v402, (const WTF::StringImpl *)&v394, (uint64_t)&v403);
  if (BYTE8(v404))
  {
    v80 = (uint64_t *)((char *)v25 + 24);
    v81 = *((unsigned int *)v25 + 9);
    if ((_DWORD)v81 == *((_DWORD *)v25 + 8))
    {
      v279 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v80, v81 + 1, (unint64_t)v402);
      v81 = *((unsigned int *)v25 + 9);
      v280 = *((_QWORD *)v25 + 3);
      v281 = *v279;
      if (*v279)
        *v281 += 2;
      *(_QWORD *)(v280 + 8 * v81) = v281;
    }
    else
    {
      v82 = *v80;
      v83 = v402[0];
      if (v402[0])
        *(_DWORD *)v402[0] += 2;
      *(_QWORD *)(v82 + 8 * v81) = v83;
    }
    *((_DWORD *)v25 + 9) = v81 + 1;
  }
  v84 = v394;
  v394 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v84;
  }
  v85 = v402[0];
  v402[0] = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
      WTF::StringImpl::destroy(v85, v79);
    else
      *(_DWORD *)v85 -= 2;
  }
  WebCore::InspectorDOMAgent::buildArrayForContainerChildren((WebCore::InspectorDOMAgent *)&v400, v6, (uint64_t)a3, a4);
  v86 = v400;
  if (*((_DWORD *)v400 + 7))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v400 = 0;
    v402[0] = v86;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v25 + 2, &v394, (const WTF::StringImpl *)v402, (uint64_t)&v403);
    if (BYTE8(v404))
    {
      v87 = (uint64_t *)((char *)v25 + 24);
      v88 = *((unsigned int *)v25 + 9);
      if ((_DWORD)v88 == *((_DWORD *)v25 + 8))
      {
        v288 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v87, v88 + 1, (unint64_t)&v394);
        v88 = *((unsigned int *)v25 + 9);
        v289 = *((_QWORD *)v25 + 3);
        v290 = *v288;
        if (*v288)
          *v290 += 2;
        *(_QWORD *)(v289 + 8 * v88) = v290;
      }
      else
      {
        v89 = *v87;
        v90 = v394;
        if (v394)
          *(_DWORD *)v394 += 2;
        *(_QWORD *)(v89 + 8 * v88) = v90;
      }
      *((_DWORD *)v25 + 9) = v88 + 1;
    }
    v91 = v402[0];
    v402[0] = 0;
    if (v91)
    {
      if (*(_DWORD *)v91 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v91;
    }
    v92 = v394;
    v394 = 0;
    if (v92)
    {
      if (*(_DWORD *)v92 == 2)
        WTF::StringImpl::destroy(v92, v58);
      else
        *(_DWORD *)v92 -= 2;
    }
  }
  else if (*(_DWORD *)v400 == 1)
  {
    WTF::JSONImpl::Value::operator delete();
  }
  else
  {
    --*(_DWORD *)v400;
  }
LABEL_138:
  v93 = *((_QWORD *)v6 + 2);
  v94 = *(_QWORD *)(v93 + 112);
  if (v94)
  {
    v95 = WebCore::InspectorCSSAgent::layoutFlagsForNode(a3, v58);
    LOBYTE(v403) = v95;
    if (v95)
    {
      v96 = v95;
      WTF::WeakHashMap<WebCore::Node,WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>,WebCore::WeakPtrImplWithEventTargetData>::set<WebCore::Node,WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>&>(v94 + 136, a3, &v403);
      v97 = v96;
    }
    else
    {
      v97 = 0;
    }
    WebCore::toProtocol((WTF::StringImpl *)&v400, v97);
    v98 = v400;
    if (v400)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v402[0] = v98;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v25 + 2, &v394, (const WTF::StringImpl *)v402, (uint64_t)&v403);
      if (BYTE8(v404))
      {
        v100 = (uint64_t *)((char *)v25 + 24);
        v101 = *((unsigned int *)v25 + 9);
        if ((_DWORD)v101 == *((_DWORD *)v25 + 8))
        {
          v285 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v100, v101 + 1, (unint64_t)&v394);
          v101 = *((unsigned int *)v25 + 9);
          v286 = *((_QWORD *)v25 + 3);
          v287 = *v285;
          if (*v285)
            *v287 += 2;
          *(_QWORD *)(v286 + 8 * v101) = v287;
        }
        else
        {
          v102 = *v100;
          v103 = v394;
          if (v394)
            *(_DWORD *)v394 += 2;
          *(_QWORD *)(v102 + 8 * v101) = v103;
        }
        *((_DWORD *)v25 + 9) = v101 + 1;
      }
      v104 = v402[0];
      v402[0] = 0;
      if (v104)
      {
        if (*(_DWORD *)v104 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v104;
      }
      v105 = v394;
      v394 = 0;
      if (v105)
      {
        if (*(_DWORD *)v105 == 2)
          WTF::StringImpl::destroy(v105, v99);
        else
          *(_DWORD *)v105 -= 2;
      }
    }
    v93 = *((_QWORD *)v6 + 2);
  }
  v106 = *(unsigned int **)(v93 + 200);
  if (v106)
  {
    v107 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 5) + 8) + 528);
    if (v107)
    {
      v108 = *(_QWORD *)(v107 + 8);
      if (v108)
      {
        v109 = *(_QWORD *)(v108 + 288);
        if (v109)
        {
          WebCore::InspectorPageAgent::frameId(v106, *(WebCore::Frame **)(v109 + 328), &v403);
          Inspector::Protocol::DOM::Node::setFrameId(v25, (const WTF::String *)&v403);
          v111 = v403;
          v403 = 0;
          if (v111)
          {
            if (*(_DWORD *)v111 == 2)
              WTF::StringImpl::destroy(v111, v110);
            else
              *(_DWORD *)v111 -= 2;
          }
        }
      }
    }
  }
  v112 = *((_WORD *)a3 + 14);
  if ((v112 & 8) != 0)
    v113 = a3;
  else
    v113 = 0;
  if ((v112 & 8) != 0)
  {
    *((_DWORD *)a3 + 6) += 2;
    WebCore::InspectorDOMAgent::buildArrayForElementAttributes((WebCore::InspectorDOMAgent *)&v400, a3);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v114 = v400;
    v400 = 0;
    v402[0] = v114;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v25 + 2, &v394, (const WTF::StringImpl *)v402, (uint64_t)&v403);
    if (BYTE8(v404))
    {
      v116 = (uint64_t *)((char *)v25 + 24);
      v117 = *((unsigned int *)v25 + 9);
      if ((_DWORD)v117 == *((_DWORD *)v25 + 8))
      {
        v270 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v116, v117 + 1, (unint64_t)&v394);
        v117 = *((unsigned int *)v25 + 9);
        v271 = *((_QWORD *)v25 + 3);
        v272 = *v270;
        if (*v270)
          *v272 += 2;
        *(_QWORD *)(v271 + 8 * v117) = v272;
      }
      else
      {
        v118 = *v116;
        v119 = v394;
        if (v394)
          *(_DWORD *)v394 += 2;
        *(_QWORD *)(v118 + 8 * v117) = v119;
      }
      *((_DWORD *)v25 + 9) = v117 + 1;
    }
    v120 = v402[0];
    v402[0] = 0;
    if (v120)
    {
      if (*(_DWORD *)v120 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v120;
    }
    v121 = v394;
    v394 = 0;
    if (v121)
    {
      if (*(_DWORD *)v121 == 2)
        WTF::StringImpl::destroy(v121, v115);
      else
        *(_DWORD *)v121 -= 2;
    }
    if ((*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)a3 + 192))(a3))
    {
      *((_DWORD *)a3 + 6) += 2;
      v124 = *((_QWORD *)a3 + 14);
      if (v124)
      {
        v125 = *(_QWORD *)(v124 + 8);
        if (v125)
        {
          if (!*(_BYTE *)(v125 + 144))
          {
            v126 = *(_QWORD *)(v125 + 296);
            if (v126)
            {
              *(_DWORD *)(v126 + 24) += 2;
              WebCore::InspectorDOMAgent::buildObjectForNode((uint64_t *)&v400, v6, (WebCore::Node *)v126, 0);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v127 = v400;
              v400 = 0;
              v402[0] = v127;
              WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v25 + 2, &v394, (const WTF::StringImpl *)v402, (uint64_t)&v403);
              if (BYTE8(v404))
              {
                v128 = (uint64_t *)((char *)v25 + 24);
                v129 = *((unsigned int *)v25 + 9);
                if ((_DWORD)v129 == *((_DWORD *)v25 + 8))
                {
                  v294 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v128, v129 + 1, (unint64_t)&v394);
                  v129 = *((unsigned int *)v25 + 9);
                  v295 = *((_QWORD *)v25 + 3);
                  v296 = *v294;
                  if (*v294)
                    *v296 += 2;
                  *(_QWORD *)(v295 + 8 * v129) = v296;
                }
                else
                {
                  v130 = *v128;
                  v131 = v394;
                  if (v394)
                    *(_DWORD *)v394 += 2;
                  *(_QWORD *)(v130 + 8 * v129) = v131;
                }
                *((_DWORD *)v25 + 9) = v129 + 1;
              }
              v132 = v402[0];
              v402[0] = 0;
              if (v132)
              {
                if (*(_DWORD *)v132 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*(_DWORD *)v132;
              }
              v133 = v394;
              v394 = 0;
              if (v133)
              {
                if (*(_DWORD *)v133 == 2)
                  WTF::StringImpl::destroy(v133, v122);
                else
                  *(_DWORD *)v133 -= 2;
              }
              if (*(_DWORD *)(v126 + 24) == 2)
              {
                if ((*(_WORD *)(v126 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v126);
              }
              else
              {
                *(_DWORD *)(v126 + 24) -= 2;
              }
            }
          }
        }
      }
      if (*((_DWORD *)a3 + 6) == 2)
      {
        if ((*((_WORD *)a3 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a3);
      }
      else
      {
        *((_DWORD *)a3 + 6) -= 2;
      }
    }
    if ((*((_QWORD *)a3 + 9) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v147 = *(_QWORD *)((*((_QWORD *)a3 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
      if (v147)
      {
        *(_DWORD *)(v147 + 24) += 2;
        v148 = WTF::fastMalloc((WTF *)0x20);
        WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v148);
        v388 = v6;
        WebCore::InspectorDOMAgent::buildObjectForNode((uint64_t *)&v403, v6, (WebCore::Node *)v147, 0);
        v149 = v403;
        v150 = *(unsigned int *)(v148 + 28);
        if ((_DWORD)v150 == *(_DWORD *)(v148 + 24))
        {
          v151 = v150 + (v150 >> 2);
          if (v151 >= 0x10)
            v152 = v151 + 1;
          else
            v152 = 16;
          if (v152 <= v150 + 1)
            v153 = v150 + 1;
          else
            v153 = v152;
          if (v153 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x195E19B98);
          }
          v154 = *(void **)(v148 + 16);
          v155 = (void *)WTF::fastMalloc((WTF *)(8 * v153));
          *(_DWORD *)(v148 + 24) = v153;
          *(_QWORD *)(v148 + 16) = v155;
          memcpy(v155, v154, 8 * v150);
          if (v154)
          {
            if (*(void **)(v148 + 16) == v154)
            {
              *(_QWORD *)(v148 + 16) = 0;
              *(_DWORD *)(v148 + 24) = 0;
            }
            WTF::fastFree((WTF *)v154, v156);
          }
          v150 = *(unsigned int *)(v148 + 28);
          v157 = (WTF::StringImpl **)(*(_QWORD *)(v148 + 16) + 8 * v150);
        }
        else
        {
          v157 = (WTF::StringImpl **)(*(_QWORD *)(v148 + 16) + 8 * v150);
        }
        *v157 = v149;
        *(_DWORD *)(v148 + 28) = v150 + 1;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v402[0] = (WTF::StringImpl *)v148;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v25 + 2, &v394, (const WTF::StringImpl *)v402, (uint64_t)&v403);
        v6 = v388;
        if (BYTE8(v404))
        {
          v158 = (uint64_t *)((char *)v25 + 24);
          v159 = *((unsigned int *)v25 + 9);
          if ((_DWORD)v159 == *((_DWORD *)v25 + 8))
          {
            v297 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v158, v159 + 1, (unint64_t)&v394);
            v159 = *((unsigned int *)v25 + 9);
            v298 = *((_QWORD *)v25 + 3);
            v299 = *v297;
            if (*v297)
              *v299 += 2;
            *(_QWORD *)(v298 + 8 * v159) = v299;
          }
          else
          {
            v160 = *v158;
            v161 = v394;
            if (v394)
              *(_DWORD *)v394 += 2;
            *(_QWORD *)(v160 + 8 * v159) = v161;
          }
          *((_DWORD *)v25 + 9) = v159 + 1;
        }
        v162 = v402[0];
        v402[0] = 0;
        if (v162)
        {
          if (*(_DWORD *)v162 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v162;
        }
        v163 = v394;
        v394 = 0;
        if (v163)
        {
          if (*(_DWORD *)v163 == 2)
            WTF::StringImpl::destroy(v163, v122);
          else
            *(_DWORD *)v163 -= 2;
        }
        if (*(_DWORD *)(v147 + 24) == 2)
        {
          if ((*(_WORD *)(v147 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v147);
        }
        else
        {
          *(_DWORD *)(v147 + 24) -= 2;
        }
      }
    }
    if ((*((_WORD *)a3 + 14) & 0x10) != 0
      && *(_QWORD *)(*((_QWORD *)a3 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::templateTag + 24))
    {
      *((_DWORD *)a3 + 6) += 2;
      v134 = (WebCore::Node *)WebCore::HTMLTemplateElement::content(a3);
      WebCore::InspectorDOMAgent::buildObjectForNode((uint64_t *)&v400, v6, v134, 0);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v135 = v400;
      v400 = 0;
      v402[0] = v135;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v25 + 2, &v394, (const WTF::StringImpl *)v402, (uint64_t)&v403);
      if (BYTE8(v404))
      {
        v136 = (uint64_t *)((char *)v25 + 24);
        v137 = *((unsigned int *)v25 + 9);
        if ((_DWORD)v137 == *((_DWORD *)v25 + 8))
        {
          v282 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v136, v137 + 1, (unint64_t)&v394);
          v137 = *((unsigned int *)v25 + 9);
          v283 = *((_QWORD *)v25 + 3);
          v284 = *v282;
          if (*v282)
            *v284 += 2;
          *(_QWORD *)(v283 + 8 * v137) = v284;
        }
        else
        {
          v138 = *v136;
          v139 = v394;
          if (v394)
            *(_DWORD *)v394 += 2;
          *(_QWORD *)(v138 + 8 * v137) = v139;
        }
        *((_DWORD *)v25 + 9) = v137 + 1;
      }
      v140 = v402[0];
      v402[0] = 0;
      if (v140)
      {
        if (*(_DWORD *)v140 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v140;
      }
      v141 = v394;
      v394 = 0;
      if (v141)
      {
        if (*(_DWORD *)v141 == 2)
          WTF::StringImpl::destroy(v141, v122);
        else
          *(_DWORD *)v141 -= 2;
      }
      if (*((_DWORD *)a3 + 6) == 2)
      {
        if ((*((_WORD *)a3 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a3);
      }
      else
      {
        *((_DWORD *)a3 + 6) -= 2;
      }
    }
    if ((*((_WORD *)a3 + 14) & 0x10) != 0)
    {
      v142 = *(_QWORD *)(*((_QWORD *)a3 + 12) + 24);
      if (v142 == *(_QWORD *)(WebCore::HTMLNames::styleTag + 24))
        goto LABEL_273;
      if (v142 != *(_QWORD *)(WebCore::HTMLNames::scriptTag + 24))
        goto LABEL_308;
      v143 = *((_QWORD *)a3 + 13);
      if (!v143)
        goto LABEL_273;
      v144 = *(_DWORD *)(v143 + 4);
      if ((v144 & 1) != 0)
      {
        v145 = *(uint64_t **)(v143 + 40);
        LODWORD(v146) = *(_DWORD *)(v143 + 52);
        if (!(_DWORD)v146)
        {
LABEL_273:
          v165 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v113 + 5) + 8) + 1744);
          if (v165)
          {
            v166 = (*(_DWORD *)v165)++;
            v403 = (WTF::StringImpl *)&off_1E31F4A18;
            v167 = *(_WORD *)(v165 + 32);
            v404 = *(_OWORD *)(v165 + 16);
            LOWORD(v405) = v167;
            if (v166)
            {
              *(_DWORD *)v165 = v166;
            }
            else
            {
              v227 = *(WTF **)(v165 + 72);
              if (v227)
              {
                *(_QWORD *)(v165 + 72) = 0;
                *(_DWORD *)(v165 + 80) = 0;
                WTF::fastFree(v227, v122);
              }
              v228 = *(WebCore::HTMLMetaCharsetParser **)(v165 + 48);
              *(_QWORD *)(v165 + 48) = 0;
              if (v228)
              {
                WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v228, v122);
                WTF::fastFree(v229, v230);
              }
              v231 = *(_QWORD *)(v165 + 40);
              *(_QWORD *)(v165 + 40) = 0;
              if (v231)
                (*(void (**)(uint64_t))(*(_QWORD *)v231 + 8))(v231);
              WTF::fastFree((WTF *)v165, v122);
            }
          }
          else
          {
            v405 = 0;
            v403 = (WTF::StringImpl *)&off_1E31F4A18;
            v404 = 0uLL;
          }
          if (*((_QWORD *)&v404 + 1))
          {
            v168 = &v403;
          }
          else
          {
            v168 = (WTF::StringImpl **)&PAL::UTF8Encoding(void)::globalUTF8Encoding;
            {
              PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
              *((_QWORD *)&xmmword_1ECE86C80 + 1) = v360;
              v394 = (WTF::StringImpl *)xmmword_1ECE86C80;
              v395 = v360;
              if (v360 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
              {
                if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)&v394))
                {
                  v361 = 165;
                }
                else
                {
                  v361 = 92;
                }
              }
              else
              {
                v361 = 92;
              }
              word_1ECE86C90 = v361;
            }
          }
          WebCore::TextNodeTraversal::contentsAsString(v113, v123, &v394);
          v169 = v394;
          if (v394)
          {
            PAL::TextEncoding::encode((PAL *)v168, *((const PAL::TextEncoding **)v394 + 1), *((unsigned int *)v394 + 1) | ((unint64_t)((*((_DWORD *)v394 + 4) >> 2) & 1) << 32), 0, 1, &v400);
            if (*(_DWORD *)v169 == 2)
              WTF::StringImpl::destroy(v169, v170);
            else
              *(_DWORD *)v169 -= 2;
          }
          else
          {
            v400 = 0;
            v401 = 0;
          }
          PAL::CryptoDigest::create(2, (uint64_t *)&v399);
          v171 = v399;
          PAL::CryptoDigest::addBytes((uint64_t)v399, v400, HIDWORD(v401));
          PAL::CryptoDigest::computeHash((uint64_t)v171, (unsigned __int8 **)&v397);
          v172 = v397;
          v394 = v397;
          v395 = v398;
          v396 = 0;
          v402[0] = (WTF::StringImpl *)"sha256-";
          v402[1] = (WTF::StringImpl *)8;
          WTF::tryMakeString<WTF::ASCIILiteral,WTF::Base64Specification>((uint64_t)v402, (uint64_t)&v394, &v390);
          if (!v390)
          {
            __break(0xC471u);
            JUMPOUT(0x195E19B20);
          }
          if (v172)
            WTF::fastFree(v172, v173);
          if (v171)
          {
            v174 = *(unsigned int **)v171;
            *(_QWORD *)v171 = 0;
            if (v174)
            {
              v175 = v174[4];
              if ((_DWORD)v175 != -1)
                ((void (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v175])(v402, v174 + 2);
              v174[4] = -1;
              WTF::fastFree((WTF *)v174, v173);
            }
            WTF::fastFree(v171, v173);
          }
          v176 = v400;
          if (v400)
          {
            v400 = 0;
            LODWORD(v401) = 0;
            WTF::fastFree(v176, v173);
          }
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v390, v177);
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v25 + 2, v402, (const WTF::StringImpl *)&v394, (uint64_t)&v403);
          if (BYTE8(v404))
          {
            v178 = (uint64_t *)((char *)v25 + 24);
            v179 = *((unsigned int *)v25 + 9);
            if ((_DWORD)v179 == *((_DWORD *)v25 + 8))
            {
              v276 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v178, v179 + 1, (unint64_t)v402);
              v179 = *((unsigned int *)v25 + 9);
              v277 = *((_QWORD *)v25 + 3);
              v278 = *v276;
              if (*v276)
                *v278 += 2;
              *(_QWORD *)(v277 + 8 * v179) = v278;
            }
            else
            {
              v180 = *v178;
              v181 = v402[0];
              if (v402[0])
                *(_DWORD *)v402[0] += 2;
              *(_QWORD *)(v180 + 8 * v179) = v181;
            }
            *((_DWORD *)v25 + 9) = v179 + 1;
          }
          v182 = v394;
          v394 = 0;
          if (v182)
          {
            if (*(_DWORD *)v182 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v182;
          }
          v183 = v402[0];
          v402[0] = 0;
          if (v183)
          {
            if (*(_DWORD *)v183 == 2)
              WTF::StringImpl::destroy(v183, v122);
            else
              *(_DWORD *)v183 -= 2;
          }
          v184 = v390;
          v390 = 0;
          if (v184)
          {
            if (*(_DWORD *)v184 == 2)
              WTF::StringImpl::destroy(v184, v122);
            else
              *(_DWORD *)v184 -= 2;
          }
          goto LABEL_308;
        }
      }
      else
      {
        v145 = (uint64_t *)(v143 + 32);
        LODWORD(v146) = v144 >> 5;
        if (!(_DWORD)v146)
          goto LABEL_273;
      }
      v146 = v146;
      while (1)
      {
        v164 = *v145;
        if (*v145 == WebCore::HTMLNames::srcAttr
          || *(_QWORD *)(v164 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
          && *(_QWORD *)(v164 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
        {
          break;
        }
        v145 += 2;
        if (!--v146)
          goto LABEL_273;
      }
    }
LABEL_308:
    v185 = *((_QWORD *)a3 + 9) & 0x3000000000000000;
    switch(v185)
    {
      case 0x1000000000000000:
        v186 = 125;
        break;
      case 0x2000000000000000:
        v186 = 124;
        break;
      case 0x3000000000000000:
        v186 = 126;
        break;
      default:
        goto LABEL_329;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)v186);
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v400, v187);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v25 + 2, v402, (const WTF::StringImpl *)&v394, (uint64_t)&v403);
    if (BYTE8(v404))
    {
      v188 = (uint64_t *)((char *)v25 + 24);
      v189 = *((unsigned int *)v25 + 9);
      if ((_DWORD)v189 == *((_DWORD *)v25 + 8))
      {
        v273 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v188, v189 + 1, (unint64_t)v402);
        v189 = *((unsigned int *)v25 + 9);
        v274 = *((_QWORD *)v25 + 3);
        v275 = *v273;
        if (*v273)
          *v275 += 2;
        *(_QWORD *)(v274 + 8 * v189) = v275;
      }
      else
      {
        v190 = *v188;
        v191 = v402[0];
        if (v402[0])
          *(_DWORD *)v402[0] += 2;
        *(_QWORD *)(v190 + 8 * v189) = v191;
      }
      *((_DWORD *)v25 + 9) = v189 + 1;
    }
    v192 = v394;
    v394 = 0;
    if (v192)
    {
      if (*(_DWORD *)v192 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v192;
    }
    v193 = v400;
    v400 = 0;
    if (v193)
    {
      if (*(_DWORD *)v193 == 2)
        WTF::StringImpl::destroy(v193, v122);
      else
        *(_DWORD *)v193 -= 2;
    }
    v194 = v402[0];
    v402[0] = 0;
    if (v194)
    {
      if (*(_DWORD *)v194 == 2)
        WTF::StringImpl::destroy(v194, v122);
      else
        *(_DWORD *)v194 -= 2;
    }
LABEL_329:
    if ((~*((unsigned __int16 *)a3 + 14) & 0x408) == 0
      && (*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)v113 + 368))(v113))
    {
      if ((~*((unsigned __int16 *)a3 + 14) & 0x408) != 0)
        goto LABEL_418;
      v195 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v113 + 368))(v113);
      if (v195 == 6)
      {
        v196 = 25;
      }
      else
      {
        if (v195 != 7)
          goto LABEL_418;
        v196 = 26;
      }
LABEL_403:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)v196);
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v400, v232);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v25 + 2, v402, (const WTF::StringImpl *)&v394, (uint64_t)&v403);
      if (BYTE8(v404))
      {
        v233 = (uint64_t *)((char *)v25 + 24);
        v234 = *((unsigned int *)v25 + 9);
        if ((_DWORD)v234 == *((_DWORD *)v25 + 8))
        {
          v335 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v233, v234 + 1, (unint64_t)v402);
          v234 = *((unsigned int *)v25 + 9);
          v336 = *((_QWORD *)v25 + 3);
          v337 = *v335;
          if (*v335)
            *v337 += 2;
          *(_QWORD *)(v336 + 8 * v234) = v337;
        }
        else
        {
          v235 = *v233;
          v236 = v402[0];
          if (v402[0])
            *(_DWORD *)v402[0] += 2;
          *(_QWORD *)(v235 + 8 * v234) = v236;
        }
        *((_DWORD *)v25 + 9) = v234 + 1;
      }
      v237 = v394;
      v394 = 0;
      if (v237)
      {
        if (*(_DWORD *)v237 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v237;
      }
      v238 = v400;
      v400 = 0;
      if (v238)
      {
        v239 = *(_DWORD *)v238 - 2;
        if (*(_DWORD *)v238 != 2)
        {
LABEL_414:
          *(_DWORD *)v238 = v239;
          goto LABEL_415;
        }
        WTF::StringImpl::destroy(v238, v122);
      }
      goto LABEL_415;
    }
    v197 = *((_QWORD *)v113 + 9) & 0xFFFFFFFFFFFFLL;
    if (!v197)
      goto LABEL_418;
    v198 = *(_QWORD *)((*((_QWORD *)v113 + 9) & 0xFFFFFFFFFFFFLL) + 0xA8);
    if (v198)
    {
      *(_DWORD *)(v198 + 24) += 2;
      v199 = *(_QWORD *)(v197 + 176);
      if (!v199)
      {
        v200 = 1;
LABEL_339:
        v201 = WTF::fastMalloc((WTF *)0x20);
        WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v201);
        v387 = v200;
        if (v198)
        {
          WebCore::InspectorDOMAgent::buildObjectForNode((uint64_t *)&v403, v6, (WebCore::Node *)v198, 0);
          v202 = v403;
          v203 = *(unsigned int *)(v201 + 28);
          if ((_DWORD)v203 == *(_DWORD *)(v201 + 24))
          {
            v389 = v6;
            v204 = v203 + (v203 >> 2);
            if (v204 >= 0x10)
              v205 = v204 + 1;
            else
              v205 = 16;
            if (v205 <= v203 + 1)
              v206 = v203 + 1;
            else
              v206 = v205;
            if (v206 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x195E19BA0);
            }
            v207 = *(void **)(v201 + 16);
            v208 = (void *)WTF::fastMalloc((WTF *)(8 * v206));
            *(_DWORD *)(v201 + 24) = v206;
            *(_QWORD *)(v201 + 16) = v208;
            memcpy(v208, v207, 8 * v203);
            v6 = v389;
            if (v207)
            {
              if (*(void **)(v201 + 16) == v207)
              {
                *(_QWORD *)(v201 + 16) = 0;
                *(_DWORD *)(v201 + 24) = 0;
              }
              WTF::fastFree((WTF *)v207, v209);
            }
            v203 = *(unsigned int *)(v201 + 28);
            v210 = (WTF::StringImpl **)(*(_QWORD *)(v201 + 16) + 8 * v203);
            v200 = v387;
          }
          else
          {
            v210 = (WTF::StringImpl **)(*(_QWORD *)(v201 + 16) + 8 * v203);
          }
          *v210 = v202;
          *(_DWORD *)(v201 + 28) = v203 + 1;
        }
        if (v199)
        {
          WebCore::InspectorDOMAgent::buildObjectForNode((uint64_t *)&v403, v6, (WebCore::Node *)v199, 0);
          v211 = v403;
          v212 = *(unsigned int *)(v201 + 28);
          if ((_DWORD)v212 == *(_DWORD *)(v201 + 24))
          {
            v213 = v212 + (v212 >> 2);
            if (v213 >= 0x10)
              v214 = v213 + 1;
            else
              v214 = 16;
            if (v214 <= v212 + 1)
              v215 = v212 + 1;
            else
              v215 = v214;
            if (v215 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x195E19BA8);
            }
            v216 = *(void **)(v201 + 16);
            v217 = (void *)WTF::fastMalloc((WTF *)(8 * v215));
            *(_DWORD *)(v201 + 24) = v215;
            *(_QWORD *)(v201 + 16) = v217;
            memcpy(v217, v216, 8 * v212);
            if (v216)
            {
              if (*(void **)(v201 + 16) == v216)
              {
                *(_QWORD *)(v201 + 16) = 0;
                *(_DWORD *)(v201 + 24) = 0;
              }
              WTF::fastFree((WTF *)v216, v218);
            }
            v212 = *(unsigned int *)(v201 + 28);
            v219 = (WTF::StringImpl **)(*(_QWORD *)(v201 + 16) + 8 * v212);
          }
          else
          {
            v219 = (WTF::StringImpl **)(*(_QWORD *)(v201 + 16) + 8 * v212);
          }
          *v219 = v211;
          *(_DWORD *)(v201 + 28) = v212 + 1;
          v200 = v387;
        }
        if ((v200 & 1) == 0)
        {
          if (*(_DWORD *)(v199 + 24) == 2)
          {
            if ((*(_WORD *)(v199 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v199);
          }
          else
          {
            *(_DWORD *)(v199 + 24) -= 2;
          }
        }
        if (v198)
        {
          if (*(_DWORD *)(v198 + 24) == 2)
          {
            if ((*(_WORD *)(v198 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v198);
          }
          else
          {
            *(_DWORD *)(v198 + 24) -= 2;
          }
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v402[0] = (WTF::StringImpl *)v201;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v25 + 2, &v394, (const WTF::StringImpl *)v402, (uint64_t)&v403);
        if (BYTE8(v404))
        {
          v220 = (uint64_t *)((char *)v25 + 24);
          v221 = *((unsigned int *)v25 + 9);
          if ((_DWORD)v221 == *((_DWORD *)v25 + 8))
          {
            v291 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v220, v221 + 1, (unint64_t)&v394);
            v221 = *((unsigned int *)v25 + 9);
            v292 = *((_QWORD *)v25 + 3);
            v293 = *v291;
            if (*v291)
              *v293 += 2;
            *(_QWORD *)(v292 + 8 * v221) = v293;
          }
          else
          {
            v222 = *v220;
            v223 = v394;
            if (v394)
              *(_DWORD *)v394 += 2;
            *(_QWORD *)(v222 + 8 * v221) = v223;
          }
          *((_DWORD *)v25 + 9) = v221 + 1;
        }
        v224 = v402[0];
        v402[0] = 0;
        if (v224)
        {
          if (*(_DWORD *)v224 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v224;
        }
        v225 = v394;
        v394 = 0;
        if (!v225)
          goto LABEL_418;
        goto LABEL_416;
      }
    }
    else
    {
      v199 = *(_QWORD *)(v197 + 176);
      if (!v199)
        goto LABEL_418;
    }
    v200 = 0;
    *(_DWORD *)(v199 + 24) += 2;
    goto LABEL_339;
  }
  v300 = v112 & 0xF000;
  if (v300 == 36864)
  {
    *((_DWORD *)a3 + 6) += 2;
    if (v106)
    {
      v301 = *((_QWORD *)a3 + 66);
      v302 = v301 ? *(WebCore::Frame **)(v301 + 8) : 0;
      WebCore::InspectorPageAgent::frameId(v106, v302, &v403);
      Inspector::Protocol::DOM::Node::setFrameId(v25, (const WTF::String *)&v403);
      v304 = v403;
      v403 = 0;
      if (v304)
      {
        if (*(_DWORD *)v304 == 2)
          WTF::StringImpl::destroy(v304, v303);
        else
          *(_DWORD *)v304 -= 2;
      }
    }
    v305 = (WTF::StringImpl *)*((_QWORD *)a3 + 92);
    if (v305 || (v305 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
      *(_DWORD *)v305 += 2;
    v400 = v305;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v400, v306);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v25 + 2, v402, (const WTF::StringImpl *)&v394, (uint64_t)&v403);
    if (BYTE8(v404))
    {
      v308 = (uint64_t *)((char *)v25 + 24);
      v309 = *((unsigned int *)v25 + 9);
      if ((_DWORD)v309 == *((_DWORD *)v25 + 8))
      {
        v341 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v308, v309 + 1, (unint64_t)v402);
        v309 = *((unsigned int *)v25 + 9);
        v342 = *((_QWORD *)v25 + 3);
        v343 = *v341;
        if (*v341)
          *v343 += 2;
        *(_QWORD *)(v342 + 8 * v309) = v343;
      }
      else
      {
        v310 = *v308;
        v311 = v402[0];
        if (v402[0])
          *(_DWORD *)v402[0] += 2;
        *(_QWORD *)(v310 + 8 * v309) = v311;
      }
      *((_DWORD *)v25 + 9) = v309 + 1;
    }
    v312 = v394;
    v394 = 0;
    if (v312)
    {
      if (*(_DWORD *)v312 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v312;
    }
    v313 = v402[0];
    v402[0] = 0;
    if (v313)
    {
      if (*(_DWORD *)v313 == 2)
        WTF::StringImpl::destroy(v313, v307);
      else
        *(_DWORD *)v313 -= 2;
    }
    v314 = v400;
    v400 = 0;
    if (v314)
    {
      if (*(_DWORD *)v314 == 2)
        WTF::StringImpl::destroy(v314, v307);
      else
        *(_DWORD *)v314 -= 2;
    }
    WebCore::Document::completeURL(a3, MEMORY[0x1E0CBF738], (uint64_t)a3 + 848, 0, (WTF::URL *)&v403);
    v316 = v403;
    if (v403)
    {
      v317 = *(_DWORD *)v403;
      *(_DWORD *)v403 += 2;
      v400 = v316;
      v403 = 0;
      if (v317)
        *(_DWORD *)v316 = v317;
      else
        WTF::StringImpl::destroy(v316, v315);
    }
    else
    {
      v400 = 0;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v400, v318);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v25 + 2, v402, (const WTF::StringImpl *)&v394, (uint64_t)&v403);
    if (BYTE8(v404))
    {
      v320 = (uint64_t *)((char *)v25 + 24);
      v321 = *((unsigned int *)v25 + 9);
      if ((_DWORD)v321 == *((_DWORD *)v25 + 8))
      {
        v344 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v320, v321 + 1, (unint64_t)v402);
        v321 = *((unsigned int *)v25 + 9);
        v345 = *((_QWORD *)v25 + 3);
        v346 = *v344;
        if (*v344)
          *v346 += 2;
        *(_QWORD *)(v345 + 8 * v321) = v346;
      }
      else
      {
        v322 = *v320;
        v323 = v402[0];
        if (v402[0])
          *(_DWORD *)v402[0] += 2;
        *(_QWORD *)(v322 + 8 * v321) = v323;
      }
      *((_DWORD *)v25 + 9) = v321 + 1;
    }
    v324 = v394;
    v394 = 0;
    if (v324)
    {
      if (*(_DWORD *)v324 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v324;
    }
    v325 = v402[0];
    v402[0] = 0;
    if (v325)
    {
      if (*(_DWORD *)v325 == 2)
        WTF::StringImpl::destroy(v325, v319);
      else
        *(_DWORD *)v325 -= 2;
    }
    v326 = v400;
    v400 = 0;
    if (v326)
    {
      if (*(_DWORD *)v326 == 2)
        WTF::StringImpl::destroy(v326, v319);
      else
        *(_DWORD *)v326 -= 2;
    }
    v327 = (WTF::StringImpl *)*((_QWORD *)a3 + 213);
    if (v327)
      *(_DWORD *)v327 += 2;
    v400 = v327;
  }
  else
  {
    if (v300 == 40960)
    {
      *((_DWORD *)a3 + 6) += 2;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WebCore::Node *)((char *)a3 + 88), v347);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v25 + 2, v402, (const WTF::StringImpl *)&v394, (uint64_t)&v403);
      if (BYTE8(v404))
      {
        v349 = (uint64_t *)((char *)v25 + 24);
        v350 = *((unsigned int *)v25 + 9);
        if ((_DWORD)v350 == *((_DWORD *)v25 + 8))
        {
          v362 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v349, v350 + 1, (unint64_t)v402);
          v350 = *((unsigned int *)v25 + 9);
          v363 = *((_QWORD *)v25 + 3);
          v364 = *v362;
          if (*v362)
            *v364 += 2;
          *(_QWORD *)(v363 + 8 * v350) = v364;
        }
        else
        {
          v351 = *v349;
          v352 = v402[0];
          if (v402[0])
            *(_DWORD *)v402[0] += 2;
          *(_QWORD *)(v351 + 8 * v350) = v352;
        }
        *((_DWORD *)v25 + 9) = v350 + 1;
      }
      v353 = v394;
      v394 = 0;
      if (v353)
      {
        if (*(_DWORD *)v353 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v353;
      }
      v354 = v402[0];
      v402[0] = 0;
      if (v354)
      {
        if (*(_DWORD *)v354 == 2)
          WTF::StringImpl::destroy(v354, v348);
        else
          *(_DWORD *)v354 -= 2;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WebCore::Node *)((char *)a3 + 96), v355);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v25 + 2, v402, (const WTF::StringImpl *)&v394, (uint64_t)&v403);
      if (BYTE8(v404))
      {
        v356 = (uint64_t *)((char *)v25 + 24);
        v357 = *((unsigned int *)v25 + 9);
        if ((_DWORD)v357 == *((_DWORD *)v25 + 8))
        {
          v365 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v356, v357 + 1, (unint64_t)v402);
          v357 = *((unsigned int *)v25 + 9);
          v366 = *((_QWORD *)v25 + 3);
          v367 = *v365;
          if (*v365)
            *v367 += 2;
          *(_QWORD *)(v366 + 8 * v357) = v367;
        }
        else
        {
          v358 = *v356;
          v359 = v402[0];
          if (v402[0])
            *(_DWORD *)v402[0] += 2;
          *(_QWORD *)(v358 + 8 * v357) = v359;
        }
        *((_DWORD *)v25 + 9) = v357 + 1;
      }
      v238 = v394;
      v394 = 0;
      if (v238)
      {
        v239 = *(_DWORD *)v238 - 1;
        if (*(_DWORD *)v238 != 1)
          goto LABEL_414;
        WTF::JSONImpl::Value::operator delete();
      }
LABEL_415:
      v225 = v402[0];
      v402[0] = 0;
      if (!v225)
        goto LABEL_418;
      goto LABEL_416;
    }
    if (!(*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)a3 + 184))(a3))
    {
      if ((*((_WORD *)a3 + 14) & 0x80) == 0)
        goto LABEL_420;
      *((_DWORD *)a3 + 6) += 2;
      v368 = *((unsigned __int8 *)a3 + 193);
      if (v368 == 1)
        v369 = 122;
      else
        v369 = 17;
      if (v368 == 2)
        v196 = 121;
      else
        v196 = v369;
      goto LABEL_403;
    }
    *((_DWORD *)a3 + 6) += 2;
    WebCore::Attr::name(a3, &v400);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v400, v370);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v25 + 2, v402, (const WTF::StringImpl *)&v394, (uint64_t)&v403);
    if (BYTE8(v404))
    {
      v374 = (uint64_t *)((char *)v25 + 24);
      v375 = *((unsigned int *)v25 + 9);
      if ((_DWORD)v375 == *((_DWORD *)v25 + 8))
      {
        v384 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v374, v375 + 1, (unint64_t)v402);
        v375 = *((unsigned int *)v25 + 9);
        v385 = *((_QWORD *)v25 + 3);
        v386 = *v384;
        if (*v384)
          *v386 += 2;
        *(_QWORD *)(v385 + 8 * v375) = v386;
      }
      else
      {
        v376 = *v374;
        v377 = v402[0];
        if (v402[0])
          *(_DWORD *)v402[0] += 2;
        *(_QWORD *)(v376 + 8 * v375) = v377;
      }
      *((_DWORD *)v25 + 9) = v375 + 1;
    }
    v378 = v394;
    v394 = 0;
    if (v378)
    {
      if (*(_DWORD *)v378 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v378;
    }
    v379 = v402[0];
    v402[0] = 0;
    if (v379)
    {
      if (*(_DWORD *)v379 == 2)
        WTF::StringImpl::destroy(v379, v371);
      else
        *(_DWORD *)v379 -= 2;
    }
    v380 = v400;
    v400 = 0;
    if (v380)
    {
      if (*(_DWORD *)v380 == 2)
        WTF::StringImpl::destroy(v380, v371);
      else
        *(_DWORD *)v380 -= 2;
    }
    v381 = *((_QWORD *)a3 + 10);
    if (v381 && (v383 = *(_QWORD *)(v381 + 8)) != 0)
    {
      *(_DWORD *)(v383 + 24) += 2;
      WebCore::Element::getAttributeForBindings(v383, (unsigned __int8 *)a3 + 88, 1, v372, &v400, v373);
      if (*(_DWORD *)(v383 + 24) == 2)
      {
        if ((*(_WORD *)(v383 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v383);
      }
      else
      {
        *(_DWORD *)(v383 + 24) -= 2;
      }
    }
    else
    {
      v382 = (WTF::StringImpl *)*((_QWORD *)a3 + 12);
      if (v382)
        *(_DWORD *)v382 += 2;
      v400 = v382;
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v400, v328);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v25 + 2, v402, (const WTF::StringImpl *)&v394, (uint64_t)&v403);
  if (BYTE8(v404))
  {
    v329 = (uint64_t *)((char *)v25 + 24);
    v330 = *((unsigned int *)v25 + 9);
    if ((_DWORD)v330 == *((_DWORD *)v25 + 8))
    {
      v338 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v329, v330 + 1, (unint64_t)v402);
      v330 = *((unsigned int *)v25 + 9);
      v339 = *((_QWORD *)v25 + 3);
      v340 = *v338;
      if (*v338)
        *v340 += 2;
      *(_QWORD *)(v339 + 8 * v330) = v340;
    }
    else
    {
      v331 = *v329;
      v332 = v402[0];
      if (v402[0])
        *(_DWORD *)v402[0] += 2;
      *(_QWORD *)(v331 + 8 * v330) = v332;
    }
    *((_DWORD *)v25 + 9) = v330 + 1;
  }
  v333 = v394;
  v394 = 0;
  if (v333)
  {
    if (*(_DWORD *)v333 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v333;
  }
  v334 = v402[0];
  v402[0] = 0;
  if (v334)
  {
    if (*(_DWORD *)v334 == 2)
      WTF::StringImpl::destroy(v334, v122);
    else
      *(_DWORD *)v334 -= 2;
  }
  v225 = v400;
  v400 = 0;
  if (!v225)
    goto LABEL_418;
LABEL_416:
  if (*(_DWORD *)v225 == 2)
    WTF::StringImpl::destroy(v225, v122);
  else
    *(_DWORD *)v225 -= 2;
LABEL_418:
  if (*((_DWORD *)a3 + 6) == 2)
  {
    if ((*((_WORD *)a3 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(a3);
  }
  else
  {
    *((_DWORD *)a3 + 6) -= 2;
  }
LABEL_420:
  v240 = v391;
  v391 = 0;
  if (v240)
  {
    if (*(_DWORD *)v240 == 2)
      WTF::StringImpl::destroy(v240, v122);
    else
      *(_DWORD *)v240 -= 2;
  }
  v241 = v392;
  v392 = 0;
  if (v241)
  {
    if (*(_DWORD *)v241 == 2)
      WTF::StringImpl::destroy(v241, v122);
    else
      *(_DWORD *)v241 -= 2;
  }
  result = v393;
  v393 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v122);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::InspectorDOMAgent::focusNode(WebCore::InspectorDOMAgent *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::WindowProxy *v6;
  WebCore::DOMWrapperWorld *v7;
  JSC::JSGlobalObject *v8;
  WebCore::Node *v9;
  JSValue v10;
  uint64_t v11;
  WebCore::WindowProxy *v12;
  _BYTE v13[24];
  _QWORD *v14;

  if (*((_BYTE *)this + 440))
  {
    v3 = *((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = 0;
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 528);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = *(WebCore::WindowProxy **)(v5 + 112);
        {
          v7 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
        }
        else
        {
          v12 = *(WebCore::WindowProxy **)(v5 + 112);
          v11 = WebCore::g_commonVMOrNull;
          if (!WebCore::g_commonVMOrNull)
            v11 = WebCore::commonVMSlow(0);
          v7 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v11 + 41456) + 16);
          WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v7;
          v6 = v12;
        }
        v8 = (JSC::JSGlobalObject *)*((_QWORD *)WebCore::WindowProxy::jsWindowProxy(v6, v7) + 2);
        Inspector::InjectedScriptManager::injectedScriptFor(*((Inspector::InjectedScriptManager **)this + 5), v8);
        if (v14 && *v14)
        {
          v10.super.isa = (Class)WebCore::InspectorDOMAgent::nodeAsScriptValue(v8, (JSC::JSGlobalObject *)v3, v9);
          Inspector::InjectedScript::inspectObject((Inspector::InjectedScript *)v13, v10);
        }
        Inspector::InjectedScript::~InjectedScript((Inspector::InjectedScript *)v13);
      }
    }
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
}

void `non-virtual thunk to'WebCore::InspectorDOMAgent::getDocument(WebCore::InspectorDOMAgent *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::InspectorDOMAgent::getDocument((WebCore::InspectorDOMAgent *)((char *)this - 32), a2, a3);
}

uint64_t WebCore::InspectorDOMAgent::pushChildNodesToFrontend(WebCore::InspectorDOMAgent *this, void *a2, int a3)
{
  int v4;
  uint64_t result;
  unsigned int v7;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  int i;
  uint64_t v39;
  uint64_t v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v53;

  v4 = (int)a2;
  result = WebCore::InspectorDOMAgent::nodeForId(this, a2);
  if (!result)
    return result;
  v7 = *(unsigned __int16 *)(result + 28);
  if (v7 >> 12 > 0xB || ((1 << (v7 >> 12)) & 0xA02) == 0)
    return result;
  v9 = *((_QWORD *)this + 13);
  if (!v9)
    goto LABEL_37;
  v10 = *(_DWORD *)(v9 - 8);
  v11 = 9 * ((~(v4 << 15) + v4) ^ ((~(v4 << 15) + v4) >> 10));
  v12 = (v11 ^ (v11 >> 6)) + ~((v11 ^ (v11 >> 6)) << 11);
  v13 = v10 & (v12 ^ HIWORD(v12));
  v14 = *(_DWORD *)(v9 + 4 * v13);
  if (v14 != v4)
  {
    v15 = 1;
    while (v14)
    {
      v13 = (v13 + v15) & v10;
      v14 = *(_DWORD *)(v9 + 4 * v13);
      ++v15;
      if (v14 == v4)
        goto LABEL_11;
    }
LABEL_37:
    WebCore::InspectorDOMAgent::buildArrayForContainerChildren((WebCore::InspectorDOMAgent *)&v53, this, result, a3);
    Inspector::DOMFrontendDispatcher::setChildNodes();
    result = v53;
    v53 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        return WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)result;
    }
    return result;
  }
LABEL_11:
  if (a3 >= 2 && (v7 & 4) != 0)
  {
    v16 = *(_QWORD *)(result + 80);
    if (v16)
    {
      v17 = a3 - 1;
      do
      {
        if ((*(_WORD *)(v16 + 28) & 2) == 0)
          goto LABEL_43;
        v18 = *(_WORD *)(v16 + 30);
        if ((v18 & 0x100) != 0)
        {
          if ((v18 & 0x80) == 0)
            goto LABEL_43;
        }
        else
        {
          v19 = *(_QWORD *)(v16 + 80);
          if (v19)
          {
            v20 = *(unsigned __int8 **)(v19 + 8);
            v21 = *(unsigned int *)(v19 + 4);
            if ((*(_BYTE *)(v19 + 16) & 4) != 0)
            {
              if ((_DWORD)v21)
              {
                while (1)
                {
                  v22 = *v20;
                  v23 = v22 > 0x20;
                  v24 = (1 << v22) & 0x100003600;
                  if (v23 || v24 == 0)
                    break;
                  ++v20;
                  if (!--v21)
                    goto LABEL_36;
                }
LABEL_42:
                *(_WORD *)(v16 + 30) = v18 & 0xFE7F | 0x100;
LABEL_43:
                ++*((_DWORD *)this + 22);
                v30 = *(_QWORD *)(v16 + 16);
                v31 = v30 & 0xFFFFFFFFFFFFLL;
                if ((v30 & 0xFFFFFFFFFFFFLL) != 0
                  && *(_QWORD *)((v30 & 0xFFFFFFFFFFFFLL) + 8)
                  && (v32 = *((_QWORD *)this + 10)) != 0)
                {
                  v33 = *(_DWORD *)(v32 - 8);
                  v34 = (v31 + ~(v30 << 32)) ^ ((unint64_t)(v31 + ~(v30 << 32)) >> 22);
                  v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
                  v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
                  v37 = v33 & ((v36 >> 31) ^ v36);
                  for (i = 1; ; ++i)
                  {
                    v39 = v37;
                    v40 = *(_QWORD *)(v32 + 16 * v37);
                    if (v40 != -1)
                    {
                      if (!v40)
                        goto LABEL_51;
                      if (v40 == v31)
                        break;
                    }
                    v37 = (v39 + i) & v33;
                  }
                  v41 = *(_DWORD *)(v32 + 16 * v39 + 8);
                }
                else
                {
LABEL_51:
                  v41 = 0;
                }
                result = WebCore::InspectorDOMAgent::pushChildNodesToFrontend(this, v41, v17);
                while (1)
                {
                  while (1)
                  {
                    v16 = *(_QWORD *)(v16 + 56);
                    if (!v16)
                      return result;
                    if ((*(_WORD *)(v16 + 28) & 2) == 0)
                      goto LABEL_43;
                    v42 = *(_WORD *)(v16 + 30);
                    if ((v42 & 0x100) == 0)
                      break;
                    if ((v42 & 0x80) == 0)
                      goto LABEL_43;
                  }
                  v43 = *(_QWORD *)(v16 + 80);
                  if (v43)
                  {
                    v44 = *(unsigned __int8 **)(v43 + 8);
                    v45 = *(unsigned int *)(v43 + 4);
                    if ((*(_BYTE *)(v43 + 16) & 4) != 0)
                    {
                      if ((_DWORD)v45)
                      {
                        while (1)
                        {
                          v46 = *v44;
                          v23 = v46 > 0x20;
                          v47 = (1 << v46) & 0x100003600;
                          if (v23 || v47 == 0)
                            break;
                          ++v44;
                          if (!--v45)
                            goto LABEL_74;
                        }
LABEL_76:
                        *(_WORD *)(v16 + 30) = v42 & 0xFE7F | 0x100;
                        goto LABEL_43;
                      }
                    }
                    else if ((_DWORD)v45)
                    {
                      v49 = 2 * v45;
                      do
                      {
                        v50 = *(unsigned __int16 *)v44;
                        v23 = v50 > 0x20;
                        v51 = (1 << v50) & 0x100003600;
                        if (v23 || v51 == 0)
                          goto LABEL_76;
                        v44 += 2;
                        v49 -= 2;
                      }
                      while (v49);
                    }
                  }
LABEL_74:
                  *(_WORD *)(v16 + 30) = v42 | 0x180;
                }
              }
            }
            else if ((_DWORD)v21)
            {
              v26 = 2 * v21;
              do
              {
                v27 = *(unsigned __int16 *)v20;
                v23 = v27 > 0x20;
                v28 = (1 << v27) & 0x100003600;
                if (v23 || v28 == 0)
                  goto LABEL_42;
                v20 += 2;
                v26 -= 2;
              }
              while (v26);
            }
          }
LABEL_36:
          *(_WORD *)(v16 + 30) = v18 | 0x180;
        }
        v16 = *(_QWORD *)(v16 + 56);
      }
      while (v16);
    }
  }
  return result;
}

int *WebCore::InspectorDOMAgent::buildArrayForContainerChildren(WebCore::InspectorDOMAgent *this, WebCore::Node *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  int *result;
  BOOL v11;
  uint64_t i;
  __int16 v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t *v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t *v44;
  __int16 v45;
  uint64_t v46;
  unsigned __int16 *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v56[3];
  int v57;

  v8 = WTF::fastMalloc((WTF *)0x20);
  result = (int *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v8);
  *(_QWORD *)this = result;
  v11 = (*(_WORD *)(a3 + 28) & 4) == 0 || a3 == 0;
  if (a4)
  {
    if (v11)
    {
      i = 0;
    }
    else
    {
      for (i = *(_QWORD *)(a3 + 80); i; i = *(_QWORD *)(i + 56))
      {
        if ((*(_WORD *)(i + 28) & 2) == 0)
          break;
        v13 = *(_WORD *)(i + 30);
        if ((v13 & 0x100) != 0)
        {
          if ((v13 & 0x80) == 0)
            break;
        }
        else
        {
          v14 = *(_QWORD *)(i + 80);
          if (v14)
          {
            v15 = *(unsigned __int8 **)(v14 + 8);
            v16 = *(unsigned int *)(v14 + 4);
            if ((*(_BYTE *)(v14 + 16) & 4) != 0)
            {
              if ((_DWORD)v16)
              {
                while (1)
                {
                  v17 = *v15;
                  v18 = v17 > 0x20;
                  v19 = (1 << v17) & 0x100003600;
                  if (v18 || v19 == 0)
                    break;
                  ++v15;
                  if (!--v16)
                    goto LABEL_31;
                }
LABEL_94:
                *(_WORD *)(i + 30) = v13 & 0xFE7F | 0x100;
                break;
              }
            }
            else if ((_DWORD)v16)
            {
              v21 = 2 * v16;
              do
              {
                v22 = *(unsigned __int16 *)v15;
                v18 = v22 > 0x20;
                v23 = (1 << v22) & 0x100003600;
                if (v18 || v23 == 0)
                  goto LABEL_94;
                v15 += 2;
                v21 -= 2;
              }
              while (v21);
            }
          }
LABEL_31:
          *(_WORD *)(i + 30) = v13 | 0x180;
        }
      }
    }
    v57 = WebCore::InspectorDOMAgent::bind(a2, (WebCore::Node *)a3);
    result = WTF::HashTable<int,int,WTF::IdentityExtractor,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<int>>::add((int *)v56, (uint64_t *)a2 + 13, &v57);
    if (i)
    {
      v35 = a4 - 1;
      while (1)
      {
        result = (int *)WebCore::InspectorDOMAgent::buildObjectForNode(v56, a2, (WebCore::Node *)i, v35);
        v36 = v56[0];
        v37 = *(unsigned int *)(v8 + 28);
        if ((_DWORD)v37 == *(_DWORD *)(v8 + 24))
        {
          v38 = v37 + (v37 >> 2);
          if (v38 >= 0x10)
            v39 = v38 + 1;
          else
            v39 = 16;
          if (v39 <= v37 + 1)
            v40 = v37 + 1;
          else
            v40 = v39;
          if (v40 >> 29)
            goto LABEL_95;
          v41 = *(void **)(v8 + 16);
          v42 = (void *)WTF::fastMalloc((WTF *)(8 * v40));
          *(_DWORD *)(v8 + 24) = v40;
          *(_QWORD *)(v8 + 16) = v42;
          result = (int *)memcpy(v42, v41, 8 * v37);
          if (v41)
          {
            if (*(void **)(v8 + 16) == v41)
            {
              *(_QWORD *)(v8 + 16) = 0;
              *(_DWORD *)(v8 + 24) = 0;
            }
            result = (int *)WTF::fastFree((WTF *)v41, v43);
          }
          v37 = *(unsigned int *)(v8 + 28);
          v44 = (uint64_t *)(*(_QWORD *)(v8 + 16) + 8 * v37);
        }
        else
        {
          v44 = (uint64_t *)(*(_QWORD *)(v8 + 16) + 8 * v37);
        }
        *v44 = v36;
        *(_DWORD *)(v8 + 28) = v37 + 1;
        while (1)
        {
          while (1)
          {
            i = *(_QWORD *)(i + 56);
            if (!i)
              return result;
            if ((*(_WORD *)(i + 28) & 2) == 0)
              goto LABEL_90;
            v45 = *(_WORD *)(i + 30);
            if ((v45 & 0x100) == 0)
              break;
            if ((v45 & 0x80) == 0)
              goto LABEL_90;
          }
          v46 = *(_QWORD *)(i + 80);
          if (!v46)
            goto LABEL_88;
          v47 = *(unsigned __int16 **)(v46 + 8);
          v48 = *(unsigned int *)(v46 + 4);
          if ((*(_BYTE *)(v46 + 16) & 4) != 0)
            break;
          if ((_DWORD)v48)
          {
            v52 = 2 * v48;
            do
            {
              v53 = *v47;
              v18 = v53 > 0x20;
              v54 = (1 << v53) & 0x100003600;
              if (v18 || v54 == 0)
                goto LABEL_89;
              ++v47;
              v52 -= 2;
            }
            while (v52);
          }
LABEL_88:
          *(_WORD *)(i + 30) = v45 | 0x180;
        }
        if (!(_DWORD)v48)
          goto LABEL_88;
        while (1)
        {
          v49 = *(unsigned __int8 *)v47;
          v18 = v49 > 0x20;
          v50 = (1 << v49) & 0x100003600;
          if (v18 || v50 == 0)
            break;
          v47 = (unsigned __int16 *)((char *)v47 + 1);
          if (!--v48)
            goto LABEL_88;
        }
LABEL_89:
        *(_WORD *)(i + 30) = v45 & 0xFE7F | 0x100;
LABEL_90:
        v8 = *(_QWORD *)this;
      }
    }
  }
  else if (!v11)
  {
    v25 = *(_QWORD *)(a3 + 80);
    if (v25)
    {
      if ((*(_WORD *)(v25 + 28) & 0xF000) == 0x3000 && !*(_QWORD *)(v25 + 56))
      {
        WebCore::InspectorDOMAgent::buildObjectForNode(v56, a2, (WebCore::Node *)v25, 0);
        v26 = v56[0];
        v27 = *(unsigned int *)(v8 + 28);
        if ((_DWORD)v27 == *(_DWORD *)(v8 + 24))
        {
          v28 = v27 + (v27 >> 2);
          if (v28 >= 0x10)
            v29 = v28 + 1;
          else
            v29 = 16;
          if (v29 <= v27 + 1)
            v30 = v27 + 1;
          else
            v30 = v29;
          if (v30 >> 29)
          {
LABEL_95:
            __break(0xC471u);
            JUMPOUT(0x195E1A5A8);
          }
          v31 = *(void **)(v8 + 16);
          v32 = (void *)WTF::fastMalloc((WTF *)(8 * v30));
          *(_DWORD *)(v8 + 24) = v30;
          *(_QWORD *)(v8 + 16) = v32;
          memcpy(v32, v31, 8 * v27);
          if (v31)
          {
            if (*(void **)(v8 + 16) == v31)
            {
              *(_QWORD *)(v8 + 16) = 0;
              *(_DWORD *)(v8 + 24) = 0;
            }
            WTF::fastFree((WTF *)v31, v33);
          }
          v27 = *(unsigned int *)(v8 + 28);
          v34 = (uint64_t *)(*(_QWORD *)(v8 + 16) + 8 * v27);
        }
        else
        {
          v34 = (uint64_t *)(*(_QWORD *)(v8 + 16) + 8 * v27);
        }
        *v34 = v26;
        *(_DWORD *)(v8 + 28) = v27 + 1;
        v57 = WebCore::InspectorDOMAgent::bind(a2, (WebCore::Node *)a3);
        return WTF::HashTable<int,int,WTF::IdentityExtractor,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<int>>::add((int *)v56, (uint64_t *)a2 + 13, &v57);
      }
    }
  }
  return result;
}

uint64_t WebCore::InspectorDOMAgent::pushNodeToFrontend(WebCore::InspectorDOMAgent *this, WebCore::Node *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v18;

  if (!a2)
    return 0;
  v18 = 0;
  v2 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  if (v2
    && (++*((_DWORD *)this + 22), v3 = *(_QWORD *)(v2 + 16), v4 = v3 & 0xFFFFFFFFFFFFLL, (v3 & 0xFFFFFFFFFFFFLL) != 0)
    && *(_QWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 8)
    && (v5 = *((_QWORD *)this + 10)) != 0)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = (v4 + ~(v3 << 32)) ^ ((unint64_t)(v4 + ~(v3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    for (i = 1; ; ++i)
    {
      v12 = v10;
      v13 = *(_QWORD *)(v5 + 16 * v10);
      if (v13 != -1)
      {
        if (!v13)
          goto LABEL_11;
        if (v13 == v4)
          break;
      }
      v10 = (v12 + i) & v6;
    }
    v14 = (void *)*(unsigned int *)(v5 + 16 * v12 + 8);
  }
  else
  {
LABEL_11:
    v14 = 0;
  }
  v16 = WebCore::InspectorDOMAgent::pushNodeToFrontend(this, &v18, v14, a2);
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v15);
    else
      *(_DWORD *)v18 -= 2;
  }
  return v16;
}

uint64_t WebCore::InspectorDOMAgent::pushNodeToFrontend(WebCore::InspectorDOMAgent *this, WTF::StringImpl **a2, void *a3, WebCore::Node *a4)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v15[2];

  v7 = WebCore::InspectorDOMAgent::assertDocument(this, a2, a3);
  if (!v7)
    return 0;
  if (*(_QWORD *)(*((_QWORD *)a4 + 5) + 8) != v7)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = *a2;
    *a2 = v15[1];
    if (v9)
    {
      v10 = *(_DWORD *)v9 - 2;
      if (*(_DWORD *)v9 != 2)
      {
        v11 = 0;
LABEL_10:
        *(_DWORD *)v9 = v10;
        return v11;
      }
      WTF::StringImpl::destroy(v9, v8);
    }
    return 0;
  }
  v12 = *a2;
  if (*a2)
    *(_DWORD *)v12 += 2;
  v15[0] = v12;
  v11 = WebCore::InspectorDOMAgent::pushNodePathToFrontend((uint64_t)this, (WebCore::Node *)v15, a4);
  v9 = v15[0];
  if (v15[0])
  {
    v10 = *(_DWORD *)v15[0] - 2;
    if (*(_DWORD *)v15[0] == 2)
    {
      WTF::StringImpl::destroy(v15[0], v13);
      return v11;
    }
    goto LABEL_10;
  }
  return v11;
}

uint64_t WebCore::InspectorDOMAgent::pushNodePathToFrontend(uint64_t a1, WebCore::Node *a2, WebCore::InspectorDOMAgent *a3)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int j;
  uint64_t v30;
  uint64_t v31;
  WebCore::InspectorDOMAgent *v32;
  WebCore::Node *v33;
  WebCore::InspectorDOMAgent *v34;
  unsigned int v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  int k;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t *v57;
  _DWORD *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int v68;
  int m;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned int v81;
  int n;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  uint64_t v86;
  uint64_t v87;
  WebCore::InspectorDOMAgent *v88;
  WTF *v89;
  uint64_t v90;

  v4 = *(_QWORD *)(a1 + 120);
  if (!v4
    || (v6 = *(_DWORD *)(a1 + 88),
        *(_DWORD *)(a1 + 88) = v6 + 1,
        v7 = *(_QWORD *)(v4 + 16),
        v8 = v7 & 0xFFFFFFFFFFFFLL,
        (v7 & 0xFFFFFFFFFFFFLL) == 0)
    || !*(_QWORD *)((v7 & 0xFFFFFFFFFFFFLL) + 8)
    || (v9 = *(_QWORD *)(a1 + 80)) == 0)
  {
LABEL_10:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v19 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = v89;
    if (v19)
    {
      if (*(_DWORD *)v19 != 2)
      {
        v20 = 0;
        *(_DWORD *)v19 -= 2;
        return v20;
      }
      WTF::StringImpl::destroy(v19, v18);
    }
    return 0;
  }
  v11 = *(_DWORD *)(v9 - 8);
  v12 = (v8 + ~(v7 << 32)) ^ ((unint64_t)(v8 + ~(v7 << 32)) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v11 & ((v14 >> 31) ^ v14);
  for (i = 1; ; ++i)
  {
    v17 = *(_QWORD *)(v9 + 16 * v15);
    if (v17 != -1)
    {
      if (!v17)
        goto LABEL_10;
      if (v17 == v8)
        break;
    }
    v15 = (v15 + i) & v11;
  }
  if (!a3)
    goto LABEL_25;
  *(_DWORD *)(a1 + 88) = v6 + 2;
  v22 = *((_QWORD *)a3 + 2);
  v23 = v22 & 0xFFFFFFFFFFFFLL;
  if ((v22 & 0xFFFFFFFFFFFFLL) == 0 || !*(_QWORD *)((v22 & 0xFFFFFFFFFFFFLL) + 8))
    goto LABEL_25;
  v24 = *(_DWORD *)(v9 - 8);
  v25 = (v23 + ~(v22 << 32)) ^ ((unint64_t)(v23 + ~(v22 << 32)) >> 22);
  v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
  v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
  v28 = v24 & ((v27 >> 31) ^ v27);
  for (j = 1; ; ++j)
  {
    v30 = v28;
    v31 = *(_QWORD *)(v9 + 16 * v28);
    if (v31 != -1)
    {
      if (!v31)
        goto LABEL_25;
      if (v31 == v23)
        break;
    }
    v28 = (v30 + j) & v24;
  }
  v20 = *(unsigned int *)(v9 + 16 * v30 + 8);
  if (!(_DWORD)v20)
  {
LABEL_25:
    v89 = 0;
    v90 = 0;
    v32 = (WebCore::InspectorDOMAgent *)WebCore::InspectorDOMAgent::innerParentNode(a3, a2);
    v88 = v32;
    v34 = a3;
    if (v32)
    {
      while (1)
      {
        v35 = HIDWORD(v90);
        if (HIDWORD(v90) == (_DWORD)v90)
        {
          v36 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v89, HIDWORD(v90) + 1, (unint64_t)&v88);
          v35 = HIDWORD(v90);
          *((_QWORD *)v89 + HIDWORD(v90)) = *(_QWORD *)v36;
        }
        else
        {
          *((_QWORD *)v89 + HIDWORD(v90)) = v32;
        }
        HIDWORD(v90) = v35 + 1;
        v34 = v88;
        if (v88)
        {
          ++*(_DWORD *)(a1 + 88);
          v37 = *((_QWORD *)v34 + 2);
          v38 = v37 & 0xFFFFFFFFFFFFLL;
          if ((v37 & 0xFFFFFFFFFFFFLL) != 0)
          {
            if (*(_QWORD *)((v37 & 0xFFFFFFFFFFFFLL) + 8))
            {
              v39 = *(_QWORD *)(a1 + 80);
              if (v39)
              {
                v40 = *(_DWORD *)(v39 - 8);
                v41 = (v38 + ~(v37 << 32)) ^ ((unint64_t)(v38 + ~(v37 << 32)) >> 22);
                v42 = 9 * ((v41 + ~(v41 << 13)) ^ ((v41 + ~(v41 << 13)) >> 8));
                v43 = (v42 ^ (v42 >> 15)) + ~((v42 ^ (v42 >> 15)) << 27);
                v44 = v40 & ((v43 >> 31) ^ v43);
                for (k = 1; ; ++k)
                {
                  v46 = v44;
                  v47 = *(_QWORD *)(v39 + 16 * v44);
                  if (v47 != -1)
                  {
                    if (!v47)
                      goto LABEL_39;
                    if (v47 == v38)
                      break;
                  }
                  v44 = (v46 + k) & v40;
                }
                if (*(_DWORD *)(v39 + 16 * v46 + 8))
                  break;
              }
            }
          }
        }
LABEL_39:
        v88 = 0;
        v32 = (WebCore::InspectorDOMAgent *)WebCore::InspectorDOMAgent::innerParentNode(v34, v33);
        v88 = v32;
        if (!v32)
          goto LABEL_40;
      }
    }
    else
    {
LABEL_40:
      v48 = WTF::fastMalloc((WTF *)0x20);
      v87 = WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v48);
      WebCore::InspectorDOMAgent::buildObjectForNode(&v86, (WebCore::InspectorDOMAgent *)a1, v34, 0);
      v49 = v86;
      v50 = *(unsigned int *)(v48 + 28);
      if ((_DWORD)v50 == *(_DWORD *)(v48 + 24))
      {
        v51 = v50 + (v50 >> 2);
        if (v51 >= 0x10)
          v52 = v51 + 1;
        else
          v52 = 16;
        if (v52 <= v50 + 1)
          v53 = v50 + 1;
        else
          v53 = v52;
        if (v53 >> 29)
          goto LABEL_89;
        v54 = *(void **)(v48 + 16);
        v55 = (void *)WTF::fastMalloc((WTF *)(8 * v53));
        *(_DWORD *)(v48 + 24) = v53;
        *(_QWORD *)(v48 + 16) = v55;
        memcpy(v55, v54, 8 * v50);
        if (v54)
        {
          if (*(void **)(v48 + 16) == v54)
          {
            *(_QWORD *)(v48 + 16) = 0;
            *(_DWORD *)(v48 + 24) = 0;
          }
          WTF::fastFree((WTF *)v54, v56);
        }
        v50 = *(unsigned int *)(v48 + 28);
        v57 = (uint64_t *)(*(_QWORD *)(v48 + 16) + 8 * v50);
      }
      else
      {
        v57 = (uint64_t *)(*(_QWORD *)(v48 + 16) + 8 * v50);
      }
      *v57 = v49;
      *(_DWORD *)(v48 + 28) = v50 + 1;
      Inspector::DOMFrontendDispatcher::setChildNodes();
      v58 = (_DWORD *)v87;
      v87 = 0;
      if (v58)
      {
        if (*v58 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v58;
      }
      v35 = HIDWORD(v90) - 1;
    }
    if ((v35 & 0x80000000) == 0)
    {
      v59 = v35;
      while (v59 < HIDWORD(v90))
      {
        v60 = *((_QWORD *)v89 + v59);
        if (v60
          && (++*(_DWORD *)(a1 + 88),
              v61 = *(_QWORD *)(v60 + 16),
              v62 = v61 & 0xFFFFFFFFFFFFLL,
              (v61 & 0xFFFFFFFFFFFFLL) != 0)
          && *(_QWORD *)((v61 & 0xFFFFFFFFFFFFLL) + 8)
          && (v63 = *(_QWORD *)(a1 + 80)) != 0)
        {
          v64 = *(_DWORD *)(v63 - 8);
          v65 = (v62 + ~(v61 << 32)) ^ ((unint64_t)(v62 + ~(v61 << 32)) >> 22);
          v66 = 9 * ((v65 + ~(v65 << 13)) ^ ((v65 + ~(v65 << 13)) >> 8));
          v67 = (v66 ^ (v66 >> 15)) + ~((v66 ^ (v66 >> 15)) << 27);
          v68 = v64 & ((v67 >> 31) ^ v67);
          for (m = 1; ; ++m)
          {
            v70 = v68;
            v71 = *(_QWORD *)(v63 + 16 * v68);
            if (v71 != -1)
            {
              if (!v71)
                goto LABEL_70;
              if (v71 == v62)
                break;
            }
            v68 = (v70 + m) & v64;
          }
          v72 = (void *)*(unsigned int *)(v63 + 16 * v70 + 8);
        }
        else
        {
LABEL_70:
          v72 = 0;
        }
        WebCore::InspectorDOMAgent::pushChildNodesToFrontend((WebCore::InspectorDOMAgent *)a1, v72, 1);
        if ((uint64_t)v59-- <= 0)
          goto LABEL_75;
      }
LABEL_89:
      __break(0xC471u);
      JUMPOUT(0x195E1AD48);
    }
LABEL_75:
    if (a3
      && (++*(_DWORD *)(a1 + 88), v74 = *((_QWORD *)a3 + 2), v75 = v74 & 0xFFFFFFFFFFFFLL, (v74 & 0xFFFFFFFFFFFFLL) != 0)
      && *(_QWORD *)((v74 & 0xFFFFFFFFFFFFLL) + 8)
      && (v76 = *(_QWORD *)(a1 + 80)) != 0)
    {
      v77 = *(_DWORD *)(v76 - 8);
      v78 = (v75 + ~(v74 << 32)) ^ ((unint64_t)(v75 + ~(v74 << 32)) >> 22);
      v79 = 9 * ((v78 + ~(v78 << 13)) ^ ((v78 + ~(v78 << 13)) >> 8));
      v80 = (v79 ^ (v79 >> 15)) + ~((v79 ^ (v79 >> 15)) << 27);
      v81 = v77 & ((v80 >> 31) ^ v80);
      for (n = 1; ; ++n)
      {
        v83 = v81;
        v84 = *(_QWORD *)(v76 + 16 * v81);
        if (v84 != -1)
        {
          if (!v84)
            goto LABEL_84;
          if (v84 == v75)
            break;
        }
        v81 = (v83 + n) & v77;
      }
      v20 = *(unsigned int *)(v76 + 16 * v83 + 8);
    }
    else
    {
LABEL_84:
      v20 = 0;
    }
    v85 = v89;
    if (v89)
    {
      v89 = 0;
      LODWORD(v90) = 0;
      WTF::fastFree(v85, v33);
    }
  }
  return v20;
}

uint64_t WebCore::InspectorDOMAgent::requestChildNodes@<X0>(WebCore::InspectorDOMAgent *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  int v5;
  uint64_t result;
  char v7;

  if (!*(_BYTE *)(a3 + 4))
  {
    v5 = 1;
    goto LABEL_7;
  }
  v5 = *(_DWORD *)a3;
  if (v5 == -1)
  {
    v5 = 0x7FFFFFFF;
    goto LABEL_7;
  }
  if (v5 > 0)
  {
LABEL_7:
    result = WebCore::InspectorDOMAgent::pushChildNodesToFrontend(a1, a2, v5);
    v7 = 0;
    *a4 = 0;
    goto LABEL_8;
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = 1;
LABEL_8:
  a4[8] = v7;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorDOMAgent::requestChildNodes@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  int v5;
  uint64_t result;
  char v7;

  if (!*(_BYTE *)(a3 + 4))
  {
    v5 = 1;
    goto LABEL_7;
  }
  v5 = *(_DWORD *)a3;
  if (v5 == -1)
  {
    v5 = 0x7FFFFFFF;
    goto LABEL_7;
  }
  if (v5 > 0)
  {
LABEL_7:
    result = WebCore::InspectorDOMAgent::pushChildNodesToFrontend((WebCore::InspectorDOMAgent *)(a1 - 32), a2, v5);
    v7 = 0;
    *a4 = 0;
    goto LABEL_8;
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = 1;
LABEL_8:
  a4[8] = v7;
  return result;
}

WTF::StringImpl *WebCore::InspectorDOMAgent::querySelector@<X0>(WebCore::InspectorDOMAgent *this@<X0>, WTF::StringImpl **a2@<X2>, void *a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v7;
  void *v8;
  int16x8_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  char **v14;
  char *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  WTF::StringImpl *result;
  void *v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  uint64_t v27;

  v7 = WebCore::InspectorDOMAgent::nodeForId(this, a3);
  if (!v7)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = v24;
    if (v24)
    {
      v22 = *(_DWORD *)v24;
      *(_DWORD *)v24 += 2;
      *(_QWORD *)(a4 + 8) = result;
      *(_DWORD *)(a4 + 16) = 1;
      if (v22)
        *(_DWORD *)result = v22;
      else
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
    }
    else
    {
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 1;
    }
    return result;
  }
  v10 = v7;
  v11 = *(_DWORD *)(v7 + 24);
  *(_DWORD *)(v7 + 24) = v11 + 2;
  if (!v11)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) != 0)
      goto LABEL_43;
    WebCore::Node::removedLastRef((WebCore::Node *)v7, v8);
    v11 = *(_DWORD *)(v10 + 24);
  }
  while (1)
  {
    *(_DWORD *)(v10 + 24) = v11 + 2;
    if ((*(_WORD *)(v10 + 28) & 4) == 0)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_DWORD *)(a4 + 16) = 1;
      goto LABEL_30;
    }
    *(_DWORD *)(v10 + 24) = v11 + 4;
    WebCore::ContainerNode::querySelector((WebCore::ContainerNode *)v10, a2, (uint64_t)&v24, v9);
    a2 = (WTF::StringImpl **)v26;
    if (!v26)
      break;
    if (v26 == 1)
    {
      v13 = v25;
      v25 = 0;
      if (v24 >= 0x20u)
        v14 = (char **)&WebCore::DOMException::description(WebCore::ExceptionCode)::emptyDescription;
      else
        v14 = &(&WebCore::descriptions)[5 * v24];
      v15 = v14[1];
      if (v15)
      {
        v12 = (WTF::StringImpl *)(v15 - 1);
        if (v15 == (char *)1)
        {
          v16 = MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v16 = v27;
        }
      }
      else
      {
        v16 = 0;
      }
      *(_QWORD *)(a4 + 8) = v16;
      *(_DWORD *)(a4 + 16) = 1;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
      goto LABEL_28;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_43:
    v11 = 2;
  }
  if (!v24)
  {
    *(_BYTE *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 12) = 0;
    goto LABEL_22;
  }
  v23 = 0;
  v18 = WebCore::InspectorDOMAgent::pushNodePathToFrontend((uint64_t)this, (WebCore::Node *)&v23, v24);
  if (!v23)
    goto LABEL_19;
  if (*(_DWORD *)v23 != 2)
  {
    *(_DWORD *)v23 -= 2;
LABEL_19:
    if (v18)
    {
LABEL_20:
      *(_QWORD *)(a4 + 8) = v18 | 0x100000000;
LABEL_22:
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  WTF::StringImpl::destroy(v23, v17);
  if (v18)
    goto LABEL_20;
LABEL_27:
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 1;
LABEL_28:
  result = (WTF::StringImpl *)((uint64_t (*)(uint64_t *, WTF::StringImpl **))off_1E33EF940[(_QWORD)a2])(&v27, &v24);
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v10, v20);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
LABEL_30:
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v10, v20);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMAgent::querySelector@<X0>(WebCore::InspectorDOMAgent *this@<X0>, WTF::StringImpl **a2@<X2>, void *a3@<X1>, uint64_t a4@<X8>)
{
  return WebCore::InspectorDOMAgent::querySelector((WebCore::InspectorDOMAgent *)((char *)this - 32), a2, a3, a4);
}

WTF::StringImpl *WebCore::InspectorDOMAgent::querySelectorAll@<X0>(WebCore::InspectorDOMAgent *this@<X0>, const WTF::StringImpl **a2@<X2>, void *a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  char **v14;
  char *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::InspectorDOMAgent *v20;
  WTF::StringImpl *v21;
  WTF::JSONImpl::Value *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int v32;
  WTF::StringImpl *v33;

  v7 = WebCore::InspectorDOMAgent::nodeForId(this, a3);
  if (v7)
  {
    v9 = v7;
    v10 = *(_DWORD *)(v7 + 24);
    *(_DWORD *)(v7 + 24) = v10 + 2;
    if (!v10)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) != 0)
        goto LABEL_53;
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v8);
      v10 = *(_DWORD *)(v9 + 24);
    }
    while (1)
    {
      *(_DWORD *)(v9 + 24) = v10 + 2;
      if ((*(_WORD *)(v9 + 28) & 4) == 0)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        *(_DWORD *)(a4 + 8) = 1;
        goto LABEL_36;
      }
      *(_DWORD *)(v9 + 24) = v10 + 4;
      result = (WTF::StringImpl *)WebCore::ContainerNode::querySelectorAll((WebCore::ContainerNode *)v9, a2, (uint64_t)&v30);
      if (!v32)
        break;
      if (v32 == 1)
      {
        v13 = v31;
        v31 = 0;
        if (v30 >= 0x20u)
          v14 = (char **)&WebCore::DOMException::description(WebCore::ExceptionCode)::emptyDescription;
        else
          v14 = &(&WebCore::descriptions)[5 * v30];
        v15 = v14[1];
        if (v15)
        {
          v12 = (WTF::StringImpl *)(v15 - 1);
          if (v15 == (char *)1)
          {
            v16 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
            *MEMORY[0x1E0CBEF70] += 2;
          }
          else
          {
            result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
            v16 = v33;
          }
        }
        else
        {
          v16 = 0;
        }
        *(_QWORD *)a4 = v16;
        *(_DWORD *)(a4 + 8) = 1;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(v13, v12);
          else
            *(_DWORD *)v13 -= 2;
        }
        goto LABEL_32;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_53:
      v10 = 2;
    }
    v17 = v30;
    v30 = 0;
    v18 = WTF::fastMalloc((WTF *)0x20);
    WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v18);
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v17 + 16))(v17);
    if ((_DWORD)result)
    {
      v19 = 0;
      do
      {
        v20 = (WebCore::InspectorDOMAgent *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)v17 + 24))(v17, v19);
        v33 = 0;
        v22 = (WTF::JSONImpl::Value *)WebCore::InspectorDOMAgent::pushNodePathToFrontend((uint64_t)this, (WebCore::Node *)&v33, v20);
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            WTF::StringImpl::destroy(v33, v21);
          else
            *(_DWORD *)v33 -= 2;
        }
        WTF::JSONImpl::Value::create(v22);
        v23 = *(unsigned int *)(v18 + 28);
        if ((_DWORD)v23 == *(_DWORD *)(v18 + 24))
        {
          v24 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v18 + 16), v23 + 1, (unint64_t)&v33);
          v23 = *(unsigned int *)(v18 + 28);
          v25 = *(_QWORD *)(v18 + 16);
          v26 = *(WTF::StringImpl **)v24;
          *(_QWORD *)v24 = 0;
        }
        else
        {
          v25 = *(_QWORD *)(v18 + 16);
          v26 = v33;
          v33 = 0;
        }
        *(_QWORD *)(v25 + 8 * v23) = v26;
        *(_DWORD *)(v18 + 28) = v23 + 1;
        v27 = v33;
        v33 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v27;
        }
        v19 = (v19 + 1);
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v17 + 16))(v17);
      }
      while (v19 < result);
    }
    *(_QWORD *)a4 = v18;
    *(_DWORD *)(a4 + 8) = 0;
    if (*((_DWORD *)v17 + 4) == 1)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v17 + 8))(v17);
    else
      --*((_DWORD *)v17 + 4);
LABEL_32:
    if (v32 != -1)
      result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33EF950[v32])(&v33, &v30);
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v9, v12);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
LABEL_36:
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v9, v12);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = v30;
    if (v30)
    {
      v29 = *(_DWORD *)v30;
      *(_DWORD *)v30 += 2;
      *(_QWORD *)a4 = result;
      *(_DWORD *)(a4 + 8) = 1;
      if (v29)
        *(_DWORD *)result = v29;
      else
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v28);
    }
    else
    {
      *(_QWORD *)a4 = 0;
      *(_DWORD *)(a4 + 8) = 1;
    }
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMAgent::querySelectorAll@<X0>(WebCore::InspectorDOMAgent *this@<X0>, const WTF::StringImpl **a2@<X2>, void *a3@<X1>, uint64_t a4@<X8>)
{
  return WebCore::InspectorDOMAgent::querySelectorAll((WebCore::InspectorDOMAgent *)((char *)this - 32), a2, a3, a4);
}

uint64_t WebCore::InspectorDOMAgent::innerParentNode(WebCore::InspectorDOMAgent *this, WebCore::Node *a2)
{
  __int16 v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = *((_WORD *)this + 14);
  if (this && (v2 & 0xF000) == 0x9000)
  {
    v3 = *((_DWORD *)this + 6);
    *((_DWORD *)this + 6) = v3 + 2;
    v4 = *((_QWORD *)this + 66);
    if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0 && (v6 = *(_QWORD *)(v5 + 120)) != 0)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v3)
      {
LABEL_7:
        *((_DWORD *)this + 6) = v3;
        return v7;
      }
    }
    else
    {
      v7 = 0;
      if (v3)
        goto LABEL_7;
    }
  }
  else
  {
    if ((v2 & 0x80) == 0)
      return *((_QWORD *)this + 4);
    v3 = *((_DWORD *)this + 6);
    *((_DWORD *)this + 6) = v3 + 2;
    v9 = *((_QWORD *)this + 25);
    if (v9)
      v7 = *(_QWORD *)(v9 + 8);
    else
      v7 = 0;
    if (v3)
      goto LABEL_7;
  }
  if ((*((_WORD *)this + 15) & 0x400) == 0)
    WebCore::Node::removedLastRef(this);
  return v7;
}

WTF::StringImpl *WebCore::InspectorDOMAgent::setAttributeValue@<X0>(WebCore::DOMEditor **this@<X0>, WTF::AtomStringImpl **a2@<X2>, WTF::AtomStringImpl **a3@<X3>, void *a4@<X1>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  WTF::StringImpl *v10;
  WebCore::Element *v11;
  WebCore::DOMEditor *v12;
  WTF::AtomStringImpl *v13;
  WTF::AtomStringImpl *v14;
  BOOL v15;
  char v16;
  WTF::StringImpl *result;
  WTF::AtomStringImpl *v18;
  WTF::StringImpl *v19;
  WTF::AtomStringImpl *v20;

  v19 = 0;
  v9 = WebCore::InspectorDOMAgent::assertEditableElement((WebCore::InspectorDOMAgent *)this, &v19, a4);
  if (!v9)
    goto LABEL_18;
  v11 = (WebCore::Element *)v9;
  v12 = this[29];
  v13 = *a2;
  if (v13)
  {
    if ((*((_BYTE *)v13 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v13 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v13, v10);
      v13 = v20;
    }
  }
  v18 = v13;
  v14 = *a3;
  if (v14)
  {
    if ((*((_BYTE *)v14 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v14 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v14, v10);
      v14 = v20;
    }
  }
  v20 = v14;
  v15 = WebCore::DOMEditor::setAttribute(v12, v11, (const WTF::AtomString *)&v18, (const WTF::AtomString *)&v20, &v19);
  v20 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v10);
      v13 = v18;
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  v18 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy(v13, v10);
      if (v15)
        goto LABEL_15;
      goto LABEL_18;
    }
    *(_DWORD *)v13 -= 2;
  }
  if (v15)
  {
LABEL_15:
    v16 = 0;
    *a5 = 0;
    result = v19;
    goto LABEL_21;
  }
LABEL_18:
  result = v19;
  if (v19)
    *(_DWORD *)v19 += 2;
  *(_QWORD *)a5 = result;
  v16 = 1;
LABEL_21:
  a5[8] = v16;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMAgent::setAttributeValue@<X0>(WebCore::DOMEditor **this@<X0>, WTF::AtomStringImpl **a2@<X2>, WTF::AtomStringImpl **a3@<X3>, void *a4@<X1>, _BYTE *a5@<X8>)
{
  return WebCore::InspectorDOMAgent::setAttributeValue(this - 4, a2, a3, a4, a5);
}

WTF::StringImpl *WebCore::InspectorDOMAgent::setAttributesAsText@<X0>(WebCore::DOMEditor **this@<X0>, const WTF::String *a2@<X2>, WTF::AtomStringImpl **a3@<X3>, void *a4@<X1>, uint64_t a5@<X8>)
{
  uint64_t v9;
  WTF::StringImpl *v10;
  WebCore::Element *v11;
  WebCore::Node *v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  int v16;
  _BOOL4 v17;
  WTF::StringImpl *result;
  WTF::StringImpl *v19;
  const WTF::StringImpl *v20;
  WTF::String *v21;
  __n128 v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  char **v25;
  char *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  WTF::AtomStringImpl *v36;
  WebCore::DOMEditor *v37;
  BOOL v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unsigned __int16 *v51;
  uint64_t v52;
  int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  WebCore::DOMEditor *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  int v62;
  _BYTE v63[8];
  WTF::StringImpl *v64;
  char v65;
  WebCore::Node *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;

  v67 = 0;
  v9 = WebCore::InspectorDOMAgent::assertEditableElement((WebCore::InspectorDOMAgent *)this, &v67, a4);
  if (v9)
  {
    v11 = (WebCore::Element *)v9;
    WebCore::HTMLElementFactory::createElement((WebCore::HTMLElementFactory *)&WebCore::HTMLNames::spanTag, *(const WebCore::QualifiedName **)(*(_QWORD *)(v9 + 40) + 8), 0, 0, (uint64_t *)&v66);
    v12 = v66;
    v13 = *(_QWORD *)a2;
    if (v13)
    {
      v14 = *(_DWORD *)(v13 + 4);
      *(_DWORD *)v13 += 2;
      if (v14 < 0)
        goto LABEL_143;
    }
    else
    {
      v14 = 0;
    }
    v15 = __OFADD__(v14, 8);
    v16 = v14 + 8;
    if (!v15 && !__OFADD__(v16, 6))
    {
      v17 = !v13 || (*(_BYTE *)(v13 + 16) & 4) != 0;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v16 + 6), v17, (int8x16_t *)"<span ", 6u, v13, (int8x16_t *)"></span>", 8u, &v68);
      v19 = v68;
      if (v68)
      {
        v68 = 0;
        v61 = v19;
        v62 = 1;
        WebCore::Element::setInnerHTML((uint64_t)v12, (uint64_t)&v61, (uint64_t)v63);
        if (v62 != -1)
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33EF960[v62])(&v60, &v61);
        v62 = -1;
        v23 = v68;
        v68 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
          {
            WTF::StringImpl::destroy(v23, v10);
            if (v13)
            {
LABEL_20:
              if (*(_DWORD *)v13 == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v13, v10);
              else
                *(_DWORD *)v13 -= 2;
            }
LABEL_22:
            if (v65)
            {
              v24 = v64;
              v64 = 0;
              if (v63[0] >= 0x20u)
                v25 = (char **)&WebCore::DOMException::description(WebCore::ExceptionCode)::emptyDescription;
              else
                v25 = &(&WebCore::descriptions)[5 * v63[0]];
              v26 = v25[1];
              if (v26)
              {
                v10 = (WTF::StringImpl *)(v26 - 1);
                if (v26 == (char *)1)
                {
                  v27 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
                  *MEMORY[0x1E0CBEF70] += 2;
                }
                else
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v27 = v61;
                }
              }
              else
              {
                v27 = 0;
              }
              *(_QWORD *)a5 = v27;
              *(_BYTE *)(a5 + 8) = 1;
              if (v24)
              {
                if (*(_DWORD *)v24 == 2)
                {
                  v35 = v24;
LABEL_51:
                  WTF::StringImpl::destroy(v35, v10);
                }
                else
                {
                  *(_DWORD *)v24 -= 2;
                }
              }
              goto LABEL_119;
            }
            v28 = *((_QWORD *)v12 + 10);
            if (!v28)
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_118:
              *(_BYTE *)(a5 + 8) = 1;
LABEL_119:
              if (v65)
              {
                v59 = v64;
                v64 = 0;
                if (v59)
                {
                  if (*(_DWORD *)v59 == 2)
                    WTF::StringImpl::destroy(v59, v10);
                  else
                    *(_DWORD *)v59 -= 2;
                }
              }
              if (v66)
              {
                if (*((_DWORD *)v66 + 6) == 2)
                {
                  if ((*((_WORD *)v66 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v66, v10);
                }
                else
                {
                  *((_DWORD *)v66 + 6) -= 2;
                }
              }
              result = v67;
              goto LABEL_125;
            }
            v29 = *(_WORD *)(v28 + 28);
            if ((v29 & 8) != 0)
            {
              v30 = *(_QWORD *)(v28 + 104);
              if (!v30)
              {
                v31 = 0;
                goto LABEL_53;
              }
              if ((*(_BYTE *)(v30 + 4) & 8) != 0)
              {
                WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)v28, (unsigned __int8 *)v10, v22, (uint64_t)v20, v21);
                if ((*(_WORD *)(v28 + 28) & 0x20) == 0)
                {
LABEL_38:
                  v31 = *(_QWORD *)(v28 + 104);
                  if (v31)
                  {
                    v32 = *(_DWORD *)(v31 + 4);
                    if ((v32 & 1) != 0)
                    {
                      if (*(_DWORD *)(v31 + 52))
                      {
LABEL_41:
                        if ((v32 & 1) == 0)
                          goto LABEL_42;
                        goto LABEL_59;
                      }
                    }
                    else if (v32 >> 5)
                    {
                      goto LABEL_41;
                    }
                  }
LABEL_53:
                  v36 = *a3;
                  if (*a3)
                  {
                    v37 = this[29];
                    if ((*((_BYTE *)v36 + 16) & 0x10) != 0)
                    {
                      *(_DWORD *)v36 += 2;
                    }
                    else
                    {
                      WTF::AtomStringImpl::addSlowCase(*a3, v10);
                      v36 = v61;
                    }
                    v61 = v36;
                    v38 = WebCore::DOMEditor::removeAttribute(v37, v11, (const WTF::AtomString *)&v61, &v67);
                    if (!v36)
                      goto LABEL_112;
                    goto LABEL_110;
                  }
                  v32 = *(_DWORD *)(v31 + 4);
                  if ((v32 & 1) == 0)
                  {
LABEL_42:
                    v33 = v31 + 32;
                    v34 = v32 >> 5;
                    if (!(v32 >> 5))
                      goto LABEL_91;
                    goto LABEL_60;
                  }
LABEL_59:
                  v33 = *(_QWORD *)(v31 + 40);
                  v34 = *(_DWORD *)(v31 + 52);
                  if (!v34)
                  {
LABEL_91:
                    v36 = *a3;
                    if (!*a3)
                      goto LABEL_113;
                    v51 = (unsigned __int16 *)*((_QWORD *)v36 + 1);
                    v52 = *((unsigned int *)v36 + 1);
                    if ((*((_BYTE *)v36 + 16) & 4) == 0)
                    {
                      if ((_DWORD)v52)
                      {
                        while (1)
                        {
                          v56 = *v51++;
                          v55 = v56;
                          if (v56 > 0xFF)
                          {
                            if (MEMORY[0x19AEA858C]() != 9)
                              goto LABEL_105;
                          }
                          else if (v55 - 9 >= 5 && v55 != 32)
                          {
LABEL_105:
                            v36 = *a3;
                            goto LABEL_106;
                          }
                          if (!--v52)
                            goto LABEL_113;
                        }
                      }
                      goto LABEL_113;
                    }
                    if (!(_DWORD)v52)
                    {
LABEL_113:
                      *(_BYTE *)a5 = 0;
                      *(_BYTE *)(a5 + 8) = 0;
                      goto LABEL_119;
                    }
                    while (1)
                    {
                      v54 = *(unsigned __int8 *)v51;
                      v51 = (unsigned __int16 *)((char *)v51 + 1);
                      v53 = v54;
                      if ((v54 - 9) >= 5 && v53 != 32)
                        break;
                      if (!--v52)
                        goto LABEL_113;
                    }
LABEL_106:
                    v57 = this[29];
                    if (v36)
                    {
                      if ((*((_BYTE *)v36 + 16) & 0x10) != 0)
                      {
                        *(_DWORD *)v36 += 2;
                      }
                      else
                      {
                        WTF::AtomStringImpl::addSlowCase(v36, v10);
                        v36 = v61;
                      }
                    }
                    v61 = v36;
                    v38 = WebCore::DOMEditor::removeAttribute(v57, v11, (const WTF::AtomString *)&v61, &v67);
                    v61 = 0;
                    if (!v36)
                      goto LABEL_112;
LABEL_110:
                    if (*(_DWORD *)v36 == 2)
                    {
                      WTF::StringImpl::destroy(v36, v10);
                      if (v38)
                        goto LABEL_113;
LABEL_115:
                      v58 = v67;
                      if (v67)
                        *(_DWORD *)v67 += 2;
                      *(_QWORD *)a5 = v58;
                      goto LABEL_118;
                    }
                    *(_DWORD *)v36 -= 2;
LABEL_112:
                    if (v38)
                      goto LABEL_113;
                    goto LABEL_115;
                  }
LABEL_60:
                  v39 = 0;
                  v40 = 0;
                  do
                  {
                    v41 = *(_QWORD *)(v33 + 16 * v40);
                    v42 = *(WTF::StringImpl **)(v41 + 16);
                    if (v42)
                    {
                      *(_DWORD *)v42 += 2;
                      v61 = v42;
                      v46 = *(WTF::StringImpl **)(v41 + 24);
                      if (v46)
                        *(_DWORD *)v46 += 2;
                      v68 = v46;
                      WTF::makeAtomString<WTF::AtomString,char,WTF::AtomString>(&v61, 58, &v68, (WTF::AtomString *)&v60);
                      v48 = v68;
                      v68 = 0;
                      if (v48)
                      {
                        if (*(_DWORD *)v48 == 2)
                          WTF::StringImpl::destroy(v48, v47);
                        else
                          *(_DWORD *)v48 -= 2;
                      }
                      v49 = v61;
                      v61 = 0;
                      if (v49)
                      {
                        if (*(_DWORD *)v49 == 2)
                          WTF::StringImpl::destroy(v49, v47);
                        else
                          *(_DWORD *)v49 -= 2;
                      }
                    }
                    else
                    {
                      v43 = *(WTF::StringImpl **)(v41 + 24);
                      if (v43)
                        *(_DWORD *)v43 += 2;
                      v60 = v43;
                    }
                    if ((v39 & 1) != 0)
                      v39 = 1;
                    else
                      v39 = WTF::equal(v60, *a3, v20);
                    if (!WebCore::DOMEditor::setAttribute(this[29], v11, (const WTF::AtomString *)&v60, (const WTF::AtomString *)(v33 + 16 * v40 + 8), &v67))
                    {
                      v50 = v67;
                      if (v67)
                        *(_DWORD *)v67 += 2;
                      *(_QWORD *)a5 = v50;
                      *(_BYTE *)(a5 + 8) = 1;
                      v35 = v60;
                      v60 = 0;
                      if (v35)
                      {
                        if (*(_DWORD *)v35 == 2)
                          goto LABEL_51;
                        *(_DWORD *)v35 -= 2;
                      }
                      goto LABEL_119;
                    }
                    v44 = v60;
                    v60 = 0;
                    if (v44)
                    {
                      if (*(_DWORD *)v44 == 2)
                        WTF::StringImpl::destroy(v44, v10);
                      else
                        *(_DWORD *)v44 -= 2;
                    }
                    v45 = v40 + 1;
                    v40 = (v40 + 1);
                  }
                  while (v34 != v45);
                  if ((v39 & 1) != 0)
                    goto LABEL_113;
                  goto LABEL_91;
                }
              }
              else if ((v29 & 0x20) == 0)
              {
                goto LABEL_38;
              }
              WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v28);
              goto LABEL_38;
            }
            __break(0xC471u);
LABEL_145:
            JUMPOUT(0x195E1BCE0);
          }
          *(_DWORD *)v23 -= 2;
        }
        if (v13)
          goto LABEL_20;
        goto LABEL_22;
      }
LABEL_144:
      __break(0xC471u);
      goto LABEL_145;
    }
LABEL_143:
    v68 = 0;
    goto LABEL_144;
  }
  result = v67;
  if (v67)
    *(_DWORD *)v67 += 2;
  *(_QWORD *)a5 = result;
  *(_BYTE *)(a5 + 8) = 1;
LABEL_125:
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMAgent::setAttributesAsText@<X0>(WebCore::DOMEditor **this@<X0>, const WTF::String *a2@<X2>, WTF::AtomStringImpl **a3@<X3>, void *a4@<X1>, uint64_t a5@<X8>)
{
  return WebCore::InspectorDOMAgent::setAttributesAsText(this - 4, a2, a3, a4, a5);
}

WTF::StringImpl *WebCore::InspectorDOMAgent::removeAttribute@<X0>(WebCore::DOMEditor **this@<X0>, WTF::AtomStringImpl **a2@<X2>, void *a3@<X1>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  WebCore::Element *v9;
  WebCore::DOMEditor *v10;
  WTF::AtomStringImpl *v11;
  BOOL v12;
  BOOL v13;
  char v14;
  WTF::StringImpl *result;
  WTF::StringImpl *v16;
  WTF::AtomStringImpl *v17;

  v16 = 0;
  v7 = WebCore::InspectorDOMAgent::assertEditableElement((WebCore::InspectorDOMAgent *)this, &v16, a3);
  if (!v7)
    goto LABEL_11;
  v9 = (WebCore::Element *)v7;
  v10 = this[29];
  v11 = *a2;
  if (v11)
  {
    if ((*((_BYTE *)v11 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v11 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v11, v8);
      v11 = v17;
    }
  }
  v17 = v11;
  v12 = WebCore::DOMEditor::removeAttribute(v10, v9, (const WTF::AtomString *)&v17, &v16);
  v13 = v12;
  v17 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v8);
      if (v13)
        goto LABEL_9;
      goto LABEL_11;
    }
    *(_DWORD *)v11 -= 2;
  }
  if (v12)
  {
LABEL_9:
    v14 = 0;
    *a4 = 0;
    result = v16;
    goto LABEL_14;
  }
LABEL_11:
  result = v16;
  if (v16)
    *(_DWORD *)v16 += 2;
  *(_QWORD *)a4 = result;
  v14 = 1;
LABEL_14:
  a4[8] = v14;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMAgent::removeAttribute@<X0>(WebCore::DOMEditor **this@<X0>, WTF::AtomStringImpl **a2@<X2>, void *a3@<X1>, _BYTE *a4@<X8>)
{
  return WebCore::InspectorDOMAgent::removeAttribute(this - 4, a2, a3, a4);
}

WTF::StringImpl *WebCore::InspectorDOMAgent::removeNode@<X0>(WebCore::DOMEditor **this@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v13 = 0;
  v5 = WebCore::InspectorDOMAgent::assertEditableNode((WebCore::InspectorDOMAgent *)this, &v13, a2);
  if (v5)
  {
    v7 = v5;
    *(_DWORD *)(v5 + 24) += 2;
    v8 = *(_QWORD *)(v5 + 32);
    if (v8)
    {
      *(_DWORD *)(v8 + 24) += 2;
      if (WebCore::DOMEditor::removeChild(this[29], (WebCore::ContainerNode *)v8, (WebCore::Node *)v5, &v13))
      {
        v9 = 0;
        *a3 = 0;
      }
      else
      {
        v10 = v13;
        if (v13)
          *(_DWORD *)v13 += 2;
        *(_QWORD *)a3 = v10;
        v9 = 1;
      }
      a3[8] = v9;
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v8, v6);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      a3[8] = 1;
    }
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v6);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  else
  {
    v12 = v13;
    if (v13)
      *(_DWORD *)v13 += 2;
    *(_QWORD *)a3 = v12;
    a3[8] = 1;
  }
  result = v13;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v13 -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMAgent::removeNode@<X0>(WebCore::DOMEditor **this@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  return WebCore::InspectorDOMAgent::removeNode(this - 4, a2, a3);
}

WTF::StringImpl *WebCore::InspectorDOMAgent::setNodeName@<X0>(WebCore::DOMEditor **this@<X0>, WebCore::Element **a2@<X2>, void *a3@<X1>, _DWORD *a4@<X8>)
{
  int v5;
  uint64_t v8;
  WTF::StringImpl *v9;
  int32x4_t v10;
  const WebCore::Element *v11;
  WebCore::Document *v12;
  WebCore::Element *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebCore::TreeScope *v16;
  __n128 v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  char **v20;
  char *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *result;
  WebCore::Element *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t *v29;
  BOOL v30;
  BOOL v31;
  WTF::StringImpl *v32;
  void *v33;
  WebCore::DOMEditor *v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  WTF::StringImpl *v42;
  WebCore::Element *v43;
  WebCore::Document *v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;

  v5 = (int)a3;
  v46 = 0;
  v8 = WebCore::InspectorDOMAgent::assertElement((WebCore::InspectorDOMAgent *)this, &v46, a3);
  if (v8)
  {
    v11 = (const WebCore::Element *)v8;
    v12 = *(WebCore::Document **)(*(_QWORD *)(v8 + 40) + 8);
    v13 = *a2;
    if (*a2)
    {
      if ((*((_BYTE *)v13 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v13 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(v13, v9);
        v13 = v43;
      }
    }
    v47 = v13;
    WebCore::Document::createElementForBindings(v12, (const WTF::AtomString *)&v47, (uint64_t)&v43, v10);
    v18 = v47;
    v47 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v14);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v45;
    if (!v45)
    {
      v24 = v43;
      v43 = 0;
      WebCore::Element::cloneAttributesFromElement(v24, v11, v15, v16, v17);
      v25 = 0;
      while (1)
      {
        v26 = v25;
        v25 = *((_QWORD *)v11 + 10);
        if (v25)
          *(_DWORD *)(v25 + 24) += 2;
        if (v26)
        {
          if (*(_DWORD *)(v26 + 24) == 2)
          {
            if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v26, v9);
          }
          else
          {
            *(_DWORD *)(v26 + 24) -= 2;
          }
        }
        if (!v25)
          break;
        v27 = (uint64_t *)this[29];
        *(_DWORD *)(v25 + 24) += 2;
        v47 = (WTF::StringImpl *)v25;
        v28 = WebCore::DOMEditor::insertBefore(v27, (uint64_t)v24, (uint64_t *)&v47, 0, &v46);
        if (v47)
        {
          if (*((_DWORD *)v47 + 6) == 2)
          {
            if ((*((_WORD *)v47 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v47, v9);
          }
          else
          {
            *((_DWORD *)v47 + 6) -= 2;
          }
        }
        if (!v28)
          goto LABEL_57;
      }
      v25 = *((_QWORD *)v11 + 4);
      if (v25)
        *(_DWORD *)(v25 + 24) += 2;
      v29 = (uint64_t *)this[29];
      *((_DWORD *)v24 + 6) += 2;
      v47 = v24;
      v30 = WebCore::DOMEditor::insertBefore(v29, v25, (uint64_t *)&v47, *((_QWORD *)v11 + 7), &v46);
      if (v47)
      {
        if (*((_DWORD *)v47 + 6) == 2)
        {
          if ((*((_WORD *)v47 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v47, v9);
        }
        else
        {
          *((_DWORD *)v47 + 6) -= 2;
        }
      }
      if (v30)
      {
        v31 = WebCore::DOMEditor::removeChild(this[29], (WebCore::ContainerNode *)v25, v11, &v46);
        v32 = v46;
        if (v31)
        {
          if (v46)
            *(_DWORD *)v46 += 2;
          v42 = v32;
          v33 = (void *)WebCore::InspectorDOMAgent::pushNodePathToFrontend((uint64_t)this, (WebCore::Node *)&v42, v24);
          if (v42)
          {
            if (*(_DWORD *)v42 == 2)
              WTF::StringImpl::destroy(v42, v9);
            else
              *(_DWORD *)v42 -= 2;
          }
          v34 = this[13];
          if (v34)
          {
            v35 = *((_DWORD *)v34 - 2);
            v36 = 9 * ((~(v5 << 15) + v5) ^ ((~(v5 << 15) + v5) >> 10));
            v37 = (v36 ^ (v36 >> 6)) + ~((v36 ^ (v36 >> 6)) << 11);
            v38 = v35 & (v37 ^ HIWORD(v37));
            v39 = *((_DWORD *)v34 + v38);
            if (v39 == v5)
            {
LABEL_55:
              WebCore::InspectorDOMAgent::pushChildNodesToFrontend((WebCore::InspectorDOMAgent *)this, v33, 1);
            }
            else
            {
              v40 = 1;
              while (v39)
              {
                v38 = (v38 + v40) & v35;
                v39 = *((_DWORD *)v34 + v38);
                ++v40;
                if (v39 == v5)
                  goto LABEL_55;
              }
            }
          }
          v41 = 0;
          *a4 = (_DWORD)v33;
LABEL_61:
          a4[2] = v41;
          if (*(_DWORD *)(v25 + 24) == 2)
          {
            if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v25, v9);
          }
          else
          {
            *(_DWORD *)(v25 + 24) -= 2;
          }
          if (v24)
          {
            if (*((_DWORD *)v24 + 6) == 2)
            {
              if ((*((_WORD *)v24 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v24, v9);
            }
            else
            {
              *((_DWORD *)v24 + 6) -= 2;
            }
          }
          if ((_DWORD)v19 == -1)
            goto LABEL_68;
          goto LABEL_67;
        }
      }
      else
      {
LABEL_57:
        v32 = v46;
      }
      if (v32)
        *(_DWORD *)v32 += 2;
      *(_QWORD *)a4 = v32;
      v41 = 1;
      goto LABEL_61;
    }
    if (v45 == 1)
    {
      v12 = v44;
      v44 = 0;
      if (v43 >= 0x20u)
        v20 = (char **)&WebCore::DOMException::description(WebCore::ExceptionCode)::emptyDescription;
      else
        v20 = &(&WebCore::descriptions)[5 * v43];
      v21 = v20[1];
      if (v21)
      {
        v14 = (WTF::StringImpl *)(v21 - 1);
        if (v21 == (char *)1)
        {
          v22 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v22 = v47;
        }
LABEL_16:
        *(_QWORD *)a4 = v22;
        a4[2] = 1;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v14);
          else
            *(_DWORD *)v12 -= 2;
        }
LABEL_67:
        ((void (*)(WTF::StringImpl **, WebCore::Element **))off_1E33EF970[v19])(&v47, &v43);
LABEL_68:
        result = v46;
        goto LABEL_69;
      }
    }
    else
    {
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    v22 = 0;
    goto LABEL_16;
  }
  result = v46;
  if (v46)
    *(_DWORD *)v46 += 2;
  *(_QWORD *)a4 = result;
  a4[2] = 1;
LABEL_69:
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMAgent::setNodeName@<X0>(WebCore::DOMEditor **this@<X0>, WebCore::Element **a2@<X2>, void *a3@<X1>, _DWORD *a4@<X8>)
{
  return WebCore::InspectorDOMAgent::setNodeName(this - 4, a2, a3, a4);
}

WTF::StringImpl *WebCore::InspectorDOMAgent::getOuterHTML@<X0>(WebCore::InspectorDOMAgent *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  WTF *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = WebCore::InspectorDOMAgent::nodeForId(this, a2);
  if (v4)
  {
    v6 = v4;
    v7 = *(_DWORD *)(v4 + 24);
    *(_DWORD *)(v4 + 24) = v7 + 2;
    if (v7)
    {
      *(_DWORD *)(v4 + 24) = v7;
    }
    else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
    }
    v18 = 0;
    v19 = 0;
    v16 = 0;
    v17 = 0;
    WebCore::serializeFragment(v6, 0, 0, 0, 0, 0, (uint64_t *)&v18, (uint64_t *)&v16, &v20);
    *(_QWORD *)a3 = v20;
    *(_DWORD *)(a3 + 8) = 0;
    v20 = 0;
    if (HIDWORD(v17))
      WTF::VectorDestructor<true,WebCore::MarkupExclusionRule>::destruct(v16, (WTF *)((char *)v16 + 24 * HIDWORD(v17)));
    v9 = v16;
    if (v16)
    {
      v16 = 0;
      LODWORD(v17) = 0;
      WTF::fastFree(v9, v8);
    }
    if (HIDWORD(v19))
    {
      v13 = v18;
      v14 = 8 * HIDWORD(v19);
      do
      {
        v15 = *(_QWORD *)v13;
        *(_QWORD *)v13 = 0;
        if (v15)
        {
          if (*(_DWORD *)(v15 + 24) == 2)
          {
            if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v15, v8);
          }
          else
          {
            *(_DWORD *)(v15 + 24) -= 2;
          }
        }
        v13 = (WTF::StringImpl *)((char *)v13 + 8);
        v14 -= 8;
      }
      while (v14);
    }
    result = v18;
    if (v18)
    {
      v18 = 0;
      LODWORD(v19) = 0;
      return (WTF::StringImpl *)WTF::fastFree(result, v8);
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = v18;
    if (v18)
    {
      v12 = *(_DWORD *)v18;
      *(_DWORD *)v18 += 2;
      *(_QWORD *)a3 = result;
      *(_DWORD *)(a3 + 8) = 1;
      if (v12)
        *(_DWORD *)result = v12;
      else
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    }
    else
    {
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 1;
    }
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMAgent::getOuterHTML@<X0>(WebCore::InspectorDOMAgent *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorDOMAgent::getOuterHTML((WebCore::InspectorDOMAgent *)((char *)this - 32), a2, a3);
}

WTF::StringImpl *WebCore::InspectorDOMAgent::setOuterHTML@<X0>(WebCore::DOMEditor **this@<X0>, const WTF::String *a2@<X2>, void *a3@<X1>, _BYTE *a4@<X8>)
{
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WebCore::InspectorDOMAgent *v11;
  WTF::StringImpl *v12;
  void *v13;
  WebCore::DOMEditor *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  WebCore::Node *v21;
  WTF::StringImpl **v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  char v27;
  WTF::StringImpl *result;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WebCore::Node *v31[2];
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;

  v33 = 0;
  if ((_DWORD)a3)
  {
    v7 = (int)a3;
    v8 = WebCore::InspectorDOMAgent::assertEditableNode((WebCore::InspectorDOMAgent *)this, &v33, a3);
    if (v8)
    {
      v10 = v8;
      *(_DWORD *)(v8 + 24) += 2;
      if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 3358) & 0x81) != 0)
      {
        v31[0] = 0;
        if (WebCore::DOMEditor::setOuterHTML(this[29], (WebCore::Node *)v8, a2, v31, &v33))
        {
          v11 = v31[0];
          if (v31[0])
          {
            v12 = v33;
            if (v33)
              *(_DWORD *)v33 += 2;
            v30 = v12;
            v13 = (void *)WebCore::InspectorDOMAgent::pushNodePathToFrontend((uint64_t)this, (WebCore::Node *)&v30, v11);
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy(v30, v9);
              else
                *(_DWORD *)v30 -= 2;
            }
            v14 = this[13];
            if (v14)
            {
              v15 = *((_DWORD *)v14 - 2);
              v16 = 9 * ((~(v7 << 15) + v7) ^ ((~(v7 << 15) + v7) >> 10));
              v17 = (v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11);
              v18 = v15 & (v17 ^ HIWORD(v17));
              v19 = *((_DWORD *)v14 + v18);
              if (v19 == v7)
              {
LABEL_16:
                WebCore::InspectorDOMAgent::pushChildNodesToFrontend((WebCore::InspectorDOMAgent *)this, v13, 1);
              }
              else
              {
                v20 = 1;
                while (v19)
                {
                  v18 = (v18 + v20) & v15;
                  v19 = *((_DWORD *)v14 + v18);
                  ++v20;
                  if (v19 == v7)
                    goto LABEL_16;
                }
              }
            }
            *a4 = 0;
            a4[8] = 0;
            goto LABEL_36;
          }
          v27 = 0;
          *a4 = 0;
LABEL_35:
          a4[8] = v27;
LABEL_36:
          if (*(_DWORD *)(v10 + 24) == 2)
          {
            if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v10, v9);
          }
          else
          {
            *(_DWORD *)(v10 + 24) -= 2;
          }
          goto LABEL_38;
        }
        v26 = v33;
        if (v33)
          *(_DWORD *)v33 += 2;
        *(_QWORD *)a4 = v26;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
      }
      v27 = 1;
      goto LABEL_35;
    }
    v29 = v33;
    if (v33)
      *(_DWORD *)v33 += 2;
    *(_QWORD *)a4 = v29;
    a4[8] = 1;
  }
  else
  {
    v21 = this[15];
    v31[0] = this[29];
    v31[1] = v21;
    v32 = 0;
    WebCore::DOMPatchSupport::patchDocument((WebCore::DOMPatchSupport *)v31, (unsigned int **)a2);
    v22 = v32;
    if (v32)
    {
      v23 = *((unsigned int *)v32 - 1);
      if ((_DWORD)v23)
      {
        v24 = v32;
        do
        {
          v25 = *v24;
          if (*v24 != (WTF::StringImpl *)-1)
          {
            *v24 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, v9);
              else
                *(_DWORD *)v25 -= 2;
            }
          }
          v24 += 2;
          --v23;
        }
        while (v23);
      }
      WTF::fastFree((WTF *)(v22 - 2), v9);
    }
    *a4 = 0;
    a4[8] = 0;
  }
LABEL_38:
  result = v33;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v33, v9);
    else
      *(_DWORD *)v33 -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMAgent::setOuterHTML@<X0>(WebCore::DOMEditor **this@<X0>, const WTF::String *a2@<X2>, void *a3@<X1>, _BYTE *a4@<X8>)
{
  return WebCore::InspectorDOMAgent::setOuterHTML(this - 4, a2, a3, a4);
}

WTF::StringImpl *WebCore::InspectorDOMAgent::insertAdjacentHTML@<X0>(WebCore::DOMEditor **this@<X0>, const WTF::String *a2@<X2>, const WTF::String *a3@<X3>, void *a4@<X1>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int v12;
  char v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  v17 = 0;
  v9 = WebCore::InspectorDOMAgent::assertEditableNode((WebCore::InspectorDOMAgent *)this, &v17, a4);
  if (v9)
  {
    v11 = v9;
    v12 = *(_DWORD *)(v9 + 24);
    *(_DWORD *)(v9 + 24) = v12 + 2;
    if ((*(_WORD *)(v9 + 28) & 8) != 0)
    {
      *(_DWORD *)(v9 + 24) = v12 + 4;
      if (WebCore::DOMEditor::insertAdjacentHTML(this[29], (WebCore::Element *)v9, a2, a3, &v17))
      {
        v13 = 0;
        *a5 = 0;
      }
      else
      {
        v14 = v17;
        if (v17)
          *(_DWORD *)v17 += 2;
        *(_QWORD *)a5 = v14;
        v13 = 1;
      }
      a5[8] = v13;
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v11, v10);
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      a5[8] = 1;
    }
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, v10);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  else
  {
    v16 = v17;
    if (v17)
      *(_DWORD *)v17 += 2;
    *(_QWORD *)a5 = v16;
    a5[8] = 1;
  }
  result = v17;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v10);
    else
      *(_DWORD *)v17 -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMAgent::insertAdjacentHTML@<X0>(WebCore::DOMEditor **this@<X0>, const WTF::String *a2@<X2>, const WTF::String *a3@<X3>, void *a4@<X1>, _BYTE *a5@<X8>)
{
  return WebCore::InspectorDOMAgent::insertAdjacentHTML(this - 4, a2, a3, a4, a5);
}

WTF::StringImpl *WebCore::InspectorDOMAgent::setNodeValue@<X0>(WebCore::DOMEditor **this@<X0>, const WTF::String *a2@<X2>, void *a3@<X1>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  int v10;
  char v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v15 = 0;
  v7 = WebCore::InspectorDOMAgent::assertEditableNode((WebCore::InspectorDOMAgent *)this, &v15, a3);
  if (v7)
  {
    v9 = v7;
    v10 = *(_DWORD *)(v7 + 24);
    *(_DWORD *)(v7 + 24) = v10 + 2;
    if ((*(_WORD *)(v7 + 28) & 2) != 0)
    {
      *(_DWORD *)(v7 + 24) = v10 + 4;
      if (WebCore::DOMEditor::replaceWholeText(this[29], (WebCore::Text *)v7, a2, &v15))
      {
        v11 = 0;
        *a4 = 0;
      }
      else
      {
        v12 = v15;
        if (v15)
          *(_DWORD *)v15 += 2;
        *(_QWORD *)a4 = v12;
        v11 = 1;
      }
      a4[8] = v11;
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v9, v8);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      a4[8] = 1;
    }
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v8);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  else
  {
    v14 = v15;
    if (v15)
      *(_DWORD *)v15 += 2;
    *(_QWORD *)a4 = v14;
    a4[8] = 1;
  }
  result = v15;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)v15 -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMAgent::setNodeValue@<X0>(WebCore::DOMEditor **this@<X0>, const WTF::String *a2@<X2>, void *a3@<X1>, _BYTE *a4@<X8>)
{
  return WebCore::InspectorDOMAgent::setNodeValue(this - 4, a2, a3, a4);
}

WTF::StringImpl *WebCore::InspectorDOMAgent::getSupportedEventNames@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3;
  WebCore *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const WTF::String *v8;
  uint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t j;
  WTF::StringImpl *result;
  _QWORD v17[319];
  _DWORD *v18;

  v3 = WTF::fastMalloc((WTF *)0x20);
  v4 = (WebCore *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v3);
  v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
    v6 = WebCore::threadGlobalDataSlow(v4);
  v7 = *(_QWORD *)(v6 + 40);
  if (!v7)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
    v7 = *(_QWORD *)(v6 + 40);
  }
  WebCore::EventNames::allEventNames(v7, v17);
  for (i = 0; i != 319; ++i)
  {
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v17[i], v8);
    v10 = *(unsigned int *)(v3 + 28);
    if ((_DWORD)v10 == *(_DWORD *)(v3 + 24))
    {
      v11 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v3 + 16), v10 + 1, (unint64_t)&v18);
      v10 = *(unsigned int *)(v3 + 28);
      v12 = *(_QWORD *)(v3 + 16);
      v13 = *(_DWORD **)v11;
      *(_QWORD *)v11 = 0;
    }
    else
    {
      v12 = *(_QWORD *)(v3 + 16);
      v13 = v18;
      v18 = 0;
    }
    *(_QWORD *)(v12 + 8 * v10) = v13;
    *(_DWORD *)(v3 + 28) = v10 + 1;
    v14 = v18;
    v18 = 0;
    if (v14)
    {
      if (*v14 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v14;
    }
  }
  for (j = 318; j != -1; --j)
  {
    result = (WTF::StringImpl *)v17[j];
    v17[j] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t WebCore::InspectorDOMAgent::getDataBindingsForNode@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_DWORD *)(a1 + 8) = 1;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorDOMAgent::getDataBindingsForNode@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_DWORD *)(a1 + 8) = 1;
  return result;
}

uint64_t WebCore::InspectorDOMAgent::getAssociatedDataForNode@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_DWORD *)(a1 + 8) = 1;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorDOMAgent::getAssociatedDataForNode@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_DWORD *)(a1 + 8) = 1;
  return result;
}

WTF::StringImpl *WebCore::InspectorDOMAgent::getEventListenersForNode@<X0>(WebCore::InspectorDOMAgent *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  int v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  WTF *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  WTF::StringImpl **v41;
  uint64_t v42;
  _DWORD **v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  char *v56;
  WTF *v57;
  _DWORD *v58;
  WTF *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF *v62;
  unint64_t v63;
  unint64_t v64;
  unsigned int v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  _DWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _DWORD **v75;
  uint64_t v76;
  _DWORD *v77;
  uint64_t v78;
  WTF *v79;
  WTF::StringImpl **v80;
  WTF::StringImpl **v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  WTF *v87;
  _DWORD *v88;
  uint64_t v89;
  WTF *v90;
  _DWORD *v91;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF *v95;
  uint64_t v96;
  WTF *v97;
  _DWORD *v98;
  WTF *v99;
  int v101;
  uint64_t v102;
  WTF::StringImpl **v103;
  WTF::StringImpl *v104;
  char v105;
  WTF *v106;
  WTF::JSONImpl::ArrayBase *v107;
  void *v108;
  uint64_t v109;
  WTF *v110;
  WTF *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  WTF::StringImpl *result;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  WebCore::InspectorDOMAgent *v130;
  uint64_t v131;
  WTF::StringImpl **v132;
  _QWORD *__src;
  WTF::StringImpl **v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF *v137;
  int v138;
  unsigned int v139;
  uint64_t v140;
  WTF *v141;
  uint64_t v142;
  uint64_t v143;
  WTF *v144;
  uint64_t v145;

  v7 = WebCore::InspectorDOMAgent::nodeForId(a1, a2);
  if (!v7)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = v135;
    if (v135)
    {
      v126 = *(_DWORD *)v135;
      *(_DWORD *)v135 += 2;
      *(_QWORD *)a4 = result;
      *(_DWORD *)(a4 + 8) = 1;
      if (v126)
        *(_DWORD *)result = v126;
      else
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v125);
    }
    else
    {
      *(_QWORD *)a4 = 0;
      *(_DWORD *)(a4 + 8) = 1;
    }
    return result;
  }
  v9 = v7;
  v10 = *(_DWORD *)(v7 + 24);
  *(_DWORD *)(v7 + 24) = v10 + 2;
  if (!v10)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) != 0)
    {
      v10 = 2;
    }
    else
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v8);
      v10 = *(_DWORD *)(v9 + 24);
    }
  }
  *(_DWORD *)(v9 + 24) = v10 + 2;
  __src = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  if ((*(_BYTE *)(v9 + 22) & 2) != 0)
    *(_DWORD *)(v9 + 24) += 2;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
  *__src = v9;
  v128 = a4;
  v129 = v9;
  v130 = a1;
  if (a3[1] && !*a3)
    goto LABEL_7;
  if ((*(_WORD *)(v9 + 28) & 0x80) != 0)
  {
    v33 = *(_QWORD *)(v9 + 200);
    if (!v33)
      goto LABEL_61;
    v14 = (uint64_t *)(v33 + 8);
  }
  else
  {
    v14 = (uint64_t *)(v9 + 32);
  }
  v15 = *v14;
  if (!*v14)
  {
LABEL_61:
    v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 8) + 696);
    if (!v27)
    {
LABEL_7:
      LODWORD(v12) = 1;
      v13 = __src;
      goto LABEL_57;
    }
    v12 = 1;
    goto LABEL_63;
  }
  v16 = v9;
  *(_DWORD *)(v15 + 24) += 2;
  LODWORD(v12) = 1;
  LODWORD(v17) = 16;
  do
  {
    v18 = v15;
    if ((_DWORD)v12 == (_DWORD)v17)
    {
      v19 = v12 + ((unint64_t)v12 >> 2);
      if (v19 >= 0x10)
        v20 = v19 + 1;
      else
        v20 = 16;
      if (v20 <= (unint64_t)v12 + 1)
        v17 = v12 + 1;
      else
        v17 = v20;
      if (v17 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x195E1D89CLL);
      }
      v21 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v17));
      memcpy(v21, __src, 8 * v12);
      if (v21 == __src)
      {
        LODWORD(v17) = 0;
        v23 = 0;
      }
      else
      {
        v23 = v21;
      }
      WTF::fastFree((WTF *)__src, v22);
      if ((*(_BYTE *)(v18 + 22) & 2) != 0)
        *(_DWORD *)(v18 + 24) += 2;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 88))(v18);
      v24 = &v23[v12];
      __src = v21;
    }
    else
    {
      v24 = &__src[v12];
      if ((*(_BYTE *)(v15 + 22) & 2) != 0)
        *(_DWORD *)(v15 + 24) += 2;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 88))(v15);
    }
    *v24 = v18;
    if ((*(_WORD *)(v18 + 28) & 0x80) != 0)
    {
      v26 = *(_QWORD *)(v18 + 200);
      if (!v26)
      {
        v15 = 0;
        goto LABEL_32;
      }
      v25 = (uint64_t *)(v26 + 8);
    }
    else
    {
      v25 = (uint64_t *)(v18 + 32);
    }
    v15 = *v25;
    if (*v25)
      *(_DWORD *)(v15 + 24) += 2;
LABEL_32:
    if (*(_DWORD *)(v18 + 24) == 2)
    {
      if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v18, v11);
    }
    else
    {
      *(_DWORD *)(v18 + 24) -= 2;
    }
    v12 = (v12 + 1);
  }
  while (v15);
  v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 8) + 696);
  if (!v27)
  {
LABEL_66:
    v144 = 0;
    v145 = 0;
    if ((_DWORD)v12)
    {
      v13 = __src;
      goto LABEL_68;
    }
    v127 = 0;
    v106 = 0;
    v35 = 0;
    v105 = 1;
    goto LABEL_186;
  }
  if ((_DWORD)v12 != (_DWORD)v17)
  {
LABEL_63:
    if ((*(_BYTE *)(v27 + 22) & 2) != 0)
      *(_DWORD *)(v27 + 24) += 2;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 88))(v27);
    __src[v12] = v27;
    LODWORD(v12) = v12 + 1;
    goto LABEL_66;
  }
  v28 = ((unint64_t)v17 >> 2) + v17;
  if (v28 >= 0x10)
    v29 = v28 + 1;
  else
    v29 = 16;
  if (v29 <= v12 + 1)
    v29 = v12 + 1;
  if (v29 >> 29)
  {
    __break(0xC471u);
LABEL_241:
    JUMPOUT(0x195E1D884);
  }
  v30 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v29));
  memcpy(v30, __src, 8 * v12);
  if (v30 == __src)
    v32 = 0;
  else
    v32 = v30;
  WTF::fastFree((WTF *)__src, v31);
  if ((*(_BYTE *)(v27 + 22) & 2) != 0)
    *(_DWORD *)(v27 + 24) += 2;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 88))(v27);
  v32[v12] = v27;
  LODWORD(v12) = v17 + 1;
  v13 = v30;
LABEL_57:
  v144 = 0;
  v145 = 0;
LABEL_68:
  v34 = 0;
  v35 = 0;
  v12 = v12;
  v127 = v12;
  __src = v13;
  while (2)
  {
    v36 = *(_QWORD *)(v13[--v12] + 16);
    if ((v36 & 0x1000000000000) != 0)
    {
      v37 = v36 & 0xFFFFFFFFFFFFLL;
      v38 = *(unsigned int *)((v36 & 0xFFFFFFFFFFFFLL) + 0x1C);
      if ((_DWORD)v38)
      {
        if (v38 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x195E1D894);
        }
        v39 = WTF::fastMalloc((WTF *)(8 * v38));
        v41 = (WTF::StringImpl **)v39;
        v42 = *(unsigned int *)(v37 + 28);
        if ((_DWORD)v42)
        {
          v43 = *(_DWORD ***)(v37 + 16);
          v44 = *(unsigned int *)(v37 + 28);
          v45 = (_QWORD *)v39;
          v46 = __src;
          do
          {
            v47 = *v43;
            if (*v43)
              *v47 += 2;
            *v45++ = v47;
            v43 += 4;
            --v44;
          }
          while (v44);
          v131 = v42;
          v132 = (WTF::StringImpl **)v39;
          v134 = (WTF::StringImpl **)(v39 + 8 * v42);
          while (2)
          {
            v141 = (WTF *)&v143;
            v142 = 1;
            v48 = *(_QWORD *)(v46[v12] + 16);
            if ((v48 & 0x1000000000000) != 0)
              v49 = WebCore::EventListenerMap::find((v48 & 0xFFFFFFFFFFFFLL) + 16, v41);
            else
              v49 = 0;
            {
              WebCore::EventTarget::eventListeners(WTF::AtomString const&)::emptyVector = (uint64_t)algn_1ECE90528;
              qword_1ECE90520 = 1;
            }
            if (v49)
              v50 = (uint64_t *)v49;
            else
              v50 = &WebCore::EventTarget::eventListeners(WTF::AtomString const&)::emptyVector;
            v51 = *((unsigned int *)v50 + 3);
            if ((_DWORD)v51)
            {
              v52 = *v50;
              v53 = 8 * v51;
              do
              {
                v54 = *(_DWORD **)v52;
                if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v52 + 8) + 20))
                {
                  v55 = HIDWORD(v142);
                  if (HIDWORD(v142) == (_DWORD)v142)
                  {
                    v56 = WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v141, HIDWORD(v142) + 1, v52);
                    v54 = (_DWORD *)HIDWORD(v142);
                    v57 = v141;
                    v58 = *(_DWORD **)v56;
                    if (*(_QWORD *)v56)
                      ++*v58;
                    *((_QWORD *)v57 + (_QWORD)v54) = v58;
                  }
                  else
                  {
                    v59 = v141;
                    ++*v54;
                    *((_QWORD *)v59 + v55) = v54;
                    LODWORD(v54) = v55;
                  }
                  HIDWORD(v142) = (_DWORD)v54 + 1;
                }
                v52 += 8;
                v53 -= 8;
              }
              while (v53);
            }
            if (!HIDWORD(v142))
              goto LABEL_163;
            v60 = (WTF::StringImpl *)v46[v12];
            if (v60)
            {
              if ((*((_BYTE *)v60 + 22) & 2) != 0)
                *((_DWORD *)v60 + 6) += 2;
              else
                (*(void (**)(_QWORD))(*(_QWORD *)v60 + 88))(v46[v12]);
            }
            v135 = v60;
            v61 = *v41;
            if (*v41)
              *(_DWORD *)v61 += 2;
            v136 = v61;
            v137 = (WTF *)&v140;
            v138 = 1;
            v62 = v141;
            if (v141 == (WTF *)&v143)
            {
              v63 = HIDWORD(v142);
              memcpy(&v140, &v143, 8 * HIDWORD(v142));
            }
            else
            {
              v141 = (WTF *)&v143;
              v137 = v62;
              v101 = v142;
              v63 = HIDWORD(v142);
              LODWORD(v142) = 1;
              v138 = v101;
            }
            HIDWORD(v142) = 0;
            v139 = v63;
            if (v35 == (_DWORD)v145)
            {
              v64 = WTF::Vector<WebCore::InspectorDOMAgent::getEventListenersForNode(int,std::optional<BOOL> &&)::EventListenerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v144, v35 + 1, (unint64_t)&v135);
              v34 = v144;
              v65 = HIDWORD(v145);
              v66 = (_QWORD *)((char *)v144 + 40 * HIDWORD(v145));
              v67 = *(_QWORD *)v64;
              *(_QWORD *)v64 = 0;
              *v66 = v67;
              v68 = v66 + 1;
              v69 = *(_DWORD **)(v64 + 8);
              if (v69)
                *v69 += 2;
              *v68 = v69;
              v70 = (uint64_t)v34 + 40 * v65;
              v71 = (_QWORD *)(v70 + 32);
              *(_QWORD *)(v70 + 16) = v70 + 32;
              v72 = v70 + 16;
              v73 = *(unsigned int *)(v64 + 28);
              *(_DWORD *)(v72 + 8) = 1;
              *(_DWORD *)(v72 + 12) = v73;
              if (v73 >= 2)
              {
                if (v73 >> 29)
                {
                  __break(0xC471u);
                  goto LABEL_241;
                }
                v71 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v73));
                *(_DWORD *)(v72 + 8) = v73;
                *(_QWORD *)v72 = v71;
              }
              v74 = *(unsigned int *)(v64 + 28);
              v46 = __src;
              if ((_DWORD)v74)
              {
                v75 = *(_DWORD ***)(v64 + 16);
                v76 = 8 * v74;
                do
                {
                  v77 = *v75;
                  if (*v75)
                    ++*v77;
                  *v71++ = v77;
                  ++v75;
                  v76 -= 8;
                }
                while (v76);
              }
              v35 = v65 + 1;
              HIDWORD(v145) = v35;
              v78 = v139;
              v79 = v137;
              if (!v139)
              {
LABEL_139:
                if (&v140 != (uint64_t *)v79 && v79 != 0)
                {
                  v137 = 0;
                  v138 = 0;
                  WTF::fastFree(v79, v40);
                }
                v93 = v136;
                v136 = 0;
                if (v93)
                {
                  if (*(_DWORD *)v93 == 2)
                    WTF::StringImpl::destroy(v93, (WTF::StringImpl *)v40);
                  else
                    *(_DWORD *)v93 -= 2;
                }
                v94 = v135;
                v135 = 0;
                if (v94)
                {
                  if ((*((_BYTE *)v94 + 22) & 2) != 0)
                  {
                    if (*((_DWORD *)v94 + 6) == 2)
                    {
                      if ((*((_WORD *)v94 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v94, v40);
                    }
                    else
                    {
                      *((_DWORD *)v94 + 6) -= 2;
                    }
                  }
                  else
                  {
                    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v94 + 96))(v94);
                  }
                }
                if (HIDWORD(v142))
                {
                  v95 = v141;
                  v96 = 8 * HIDWORD(v142);
                  do
                  {
                    v97 = *(WTF **)v95;
                    *(_QWORD *)v95 = 0;
                    if (v97)
                    {
                      if (*(_DWORD *)v97 == 1)
                      {
                        v98 = (_DWORD *)*((_QWORD *)v97 + 1);
                        *((_QWORD *)v97 + 1) = 0;
                        if (v98)
                        {
                          if (v98[4] == 1)
                            (*(void (**)(_DWORD *))(*(_QWORD *)v98 + 8))(v98);
                          else
                            --v98[4];
                        }
                        WTF::fastFree(v97, v40);
                      }
                      else
                      {
                        --*(_DWORD *)v97;
                      }
                    }
                    v95 = (WTF *)((char *)v95 + 8);
                    v96 -= 8;
                  }
                  while (v96);
                }
LABEL_163:
                v99 = v141;
                if (&v143 != (uint64_t *)v141 && v141 != 0)
                {
                  v141 = 0;
                  LODWORD(v142) = 0;
                  WTF::fastFree(v99, v40);
                }
                if (++v41 == v134)
                {
                  v41 = v132;
                  v102 = 8 * v131;
                  v103 = v132;
                  do
                  {
                    v104 = *v103;
                    *v103 = 0;
                    if (v104)
                    {
                      if (*(_DWORD *)v104 == 2)
                        WTF::StringImpl::destroy(v104, (WTF::StringImpl *)v40);
                      else
                        *(_DWORD *)v104 -= 2;
                    }
                    ++v103;
                    v102 -= 8;
                  }
                  while (v102);
                  goto LABEL_182;
                }
                continue;
              }
            }
            else
            {
              v80 = (WTF::StringImpl **)((char *)v34 + 40 * v35);
              v135 = 0;
              *v80 = v60;
              v81 = v80 + 1;
              v82 = v136;
              if (v136)
                *(_DWORD *)v136 += 2;
              v83 = (uint64_t)v34 + 40 * v35;
              v84 = (_QWORD *)(v83 + 32);
              *(_QWORD *)(v83 + 16) = v83 + 32;
              v85 = v83 + 16;
              *v81 = v82;
              *(_DWORD *)(v85 + 8) = 1;
              *(_DWORD *)(v85 + 12) = v63;
              if (v63 >= 2)
              {
                if (v63 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195E1D88CLL);
                }
                v84 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v63));
                *(_DWORD *)(v85 + 8) = v63;
                *(_QWORD *)v85 = v84;
              }
              v78 = v139;
              v79 = v137;
              if (v139)
              {
                v86 = 8 * v139;
                v87 = v137;
                do
                {
                  v88 = *(_DWORD **)v87;
                  if (*(_QWORD *)v87)
                    ++*v88;
                  *v84++ = v88;
                  v87 = (WTF *)((char *)v87 + 8);
                  v86 -= 8;
                }
                while (v86);
              }
              HIDWORD(v145) = ++v35;
              if (!v78)
                goto LABEL_139;
            }
            break;
          }
          v89 = 8 * v78;
          do
          {
            v90 = *(WTF **)v79;
            *(_QWORD *)v79 = 0;
            if (v90)
            {
              if (*(_DWORD *)v90 == 1)
              {
                v91 = (_DWORD *)*((_QWORD *)v90 + 1);
                *((_QWORD *)v90 + 1) = 0;
                if (v91)
                {
                  if (v91[4] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v91 + 8))(v91);
                  else
                    --v91[4];
                }
                WTF::fastFree(v90, v40);
              }
              else
              {
                --*(_DWORD *)v90;
              }
            }
            v79 = (WTF *)((char *)v79 + 8);
            v89 -= 8;
          }
          while (v89);
          v79 = v137;
          goto LABEL_139;
        }
LABEL_182:
        WTF::fastFree((WTF *)v41, v40);
      }
      v13 = __src;
    }
    if (v12)
      continue;
    break;
  }
  v105 = 0;
  v106 = v144;
LABEL_186:
  v107 = (WTF::JSONImpl::ArrayBase *)WTF::fastMalloc((WTF *)0x20);
  v141 = (WTF *)WTF::JSONImpl::ArrayBase::ArrayBase(v107);
  v135 = v130;
  v136 = (WTF::StringImpl *)&v141;
  if (v35)
  {
    v109 = v35;
    v110 = (WTF *)((char *)v106 + 40 * v35);
    v111 = v106;
    do
    {
      v112 = *((unsigned int *)v111 + 7);
      if ((_DWORD)v112)
      {
        v113 = *((_QWORD *)v111 + 2);
        v114 = 8 * v112;
        do
        {
          v108 = *(void **)v113;
          if ((*(_BYTE *)(*(_QWORD *)v113 + 4) & 1) != 0)
            WebCore::InspectorDOMAgent::getEventListenersForNode(int,std::optional<BOOL> &&)::$_0::operator()((WTF::JSONImpl::Object *)&v135, (uint64_t)v108, (uint64_t *)v111);
          v113 += 8;
          v114 -= 8;
        }
        while (v114);
      }
      v111 = (WTF *)((char *)v111 + 40);
    }
    while (v111 != v110);
    do
    {
      --v109;
      v115 = (char *)v106 + 40 * v109;
      v116 = *((unsigned int *)v115 + 7);
      if ((_DWORD)v116)
      {
        v117 = *((_QWORD *)v115 + 2);
        v118 = 8 * v116;
        do
        {
          v108 = *(void **)v117;
          if ((*(_BYTE *)(*(_QWORD *)v117 + 4) & 1) == 0)
            WebCore::InspectorDOMAgent::getEventListenersForNode(int,std::optional<BOOL> &&)::$_0::operator()((WTF::JSONImpl::Object *)&v135, (uint64_t)v108, (uint64_t *)v106 + 5 * v109);
          v117 += 8;
          v118 -= 8;
        }
        while (v118);
      }
    }
    while (v109);
  }
  if (*((_QWORD *)v130 + 20) == v129)
    *((_BYTE *)v130 + 439) = 0;
  *(_QWORD *)v128 = v141;
  *(_DWORD *)(v128 + 8) = 0;
  if (HIDWORD(v145))
  {
    v119 = 40 * HIDWORD(v145);
    v120 = (uint64_t *)v106;
    do
    {
      v120 = WebCore::InspectorDOMAgent::getEventListenersForNode(int,std::optional<BOOL> &&)::EventListenerInfo::~EventListenerInfo(v120, v108)+ 5;
      v119 -= 40;
    }
    while (v119);
  }
  if (v106)
    WTF::fastFree(v106, v108);
  if ((v105 & 1) == 0)
  {
    v122 = 8 * v127;
    v123 = __src;
    do
    {
      v124 = *v123;
      *v123 = 0;
      if (v124)
      {
        if ((*(_BYTE *)(v124 + 22) & 2) != 0)
        {
          if (*(_DWORD *)(v124 + 24) == 2)
          {
            if ((*(_WORD *)(v124 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v124, v108);
          }
          else
          {
            *(_DWORD *)(v124 + 24) -= 2;
          }
        }
        else
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v124 + 96))(v124);
        }
      }
      ++v123;
      v122 -= 8;
    }
    while (v122);
  }
  result = (WTF::StringImpl *)__src;
  if (__src)
    result = (WTF::StringImpl *)WTF::fastFree((WTF *)__src, v108);
  if (*(_DWORD *)(v129 + 24) == 2)
  {
    if ((*(_WORD *)(v129 + 30) & 0x400) == 0)
      return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v129, v108);
  }
  else
  {
    *(_DWORD *)(v129 + 24) -= 2;
  }
  return result;
}

uint64_t *WebCore::InspectorDOMAgent::getEventListenersForNode(int,std::optional<BOOL> &&)::EventListenerInfo::~EventListenerInfo(uint64_t *a1, void *a2)
{
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  _DWORD *v7;
  WTF *v8;
  WTF::StringImpl *v10;
  uint64_t v11;

  v3 = *((unsigned int *)a1 + 7);
  if ((_DWORD)v3)
  {
    v4 = (WTF **)a1[2];
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
        {
          v7 = (_DWORD *)*((_QWORD *)v6 + 1);
          *((_QWORD *)v6 + 1) = 0;
          if (v7)
          {
            if (v7[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
            else
              --v7[4];
          }
          WTF::fastFree(v6, a2);
        }
        else
        {
          --*(_DWORD *)v6;
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v8 = (WTF *)a1[2];
  if (a1 + 4 != (uint64_t *)v8 && v8 != 0)
  {
    a1[2] = 0;
    *((_DWORD *)a1 + 6) = 0;
    WTF::fastFree(v8, a2);
  }
  v10 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *a1;
  *a1 = 0;
  if (v11)
  {
    if ((*(_BYTE *)(v11 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 96))(v11);
    }
  }
  return a1;
}

WTF::StringImpl *WebCore::InspectorDOMAgent::getEventListenersForNode(int,std::optional<BOOL> &&)::$_0::operator()(WTF::JSONImpl::Object *Ref, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  WTF::JSONImpl::Object *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  WTF::JSONImpl::Value *v16;
  char v17;
  WTF::StringImpl *v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  _BOOL4 v42;
  WTF::JSONImpl::Value *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WebCore::JSWindowProxy *v61;
  JSC::JSObject *v62;
  WTF::JSONImpl::Value *v63;
  JSC::JSGlobalObject *v64;
  unsigned int v65;
  _BOOL4 v66;
  JSC::JSObject *v67;
  WTF::StringImpl *v68;
  JSC::JSObject *v69;
  uint64_t v70;
  JSC::Structure *v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  int v79;
  void *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::JSONImpl::Value *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  const WTF::String *v90;
  WTF::StringImpl *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::JSONImpl::Value *v98;
  WTF::StringImpl *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::JSONImpl::Value *v106;
  WTF::StringImpl *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::JSONImpl::Value *v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  const WTF::String *v124;
  WTF::StringImpl *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  char v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *result;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  void *v183;
  void *v184;
  WTF::StringImpl **v185;
  const WTF::String *v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  WTF::StringImpl *v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  WTF::JSONImpl::Value *v193;
  _BOOL4 v194;
  unsigned int v195;
  _DWORD **v196;
  uint64_t v197;
  _DWORD *v198;
  _DWORD **v199;
  uint64_t v200;
  _DWORD *v201;
  _DWORD **v202;
  uint64_t v203;
  _DWORD *v204;
  _DWORD **v205;
  uint64_t v206;
  _DWORD *v207;
  _DWORD **v208;
  uint64_t v209;
  _DWORD *v210;
  _DWORD **v211;
  uint64_t v212;
  _DWORD *v213;
  _DWORD **v214;
  uint64_t v215;
  _DWORD *v216;
  _DWORD **v217;
  uint64_t v218;
  _DWORD *v219;
  _DWORD **v220;
  uint64_t v221;
  _DWORD *v222;
  _DWORD **v223;
  uint64_t v224;
  _DWORD *v225;
  _DWORD **v226;
  uint64_t v227;
  _DWORD *v228;
  _DWORD **v229;
  uint64_t v230;
  _DWORD *v231;
  _DWORD **v232;
  uint64_t v233;
  _DWORD *v234;
  uint64_t v235;
  WTF::StringImpl *v236;
  WTF::StringImpl *v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  WTF::StringImpl *v241;
  WTF::StringImpl *v242;
  uint64_t v243;
  int v244;
  unsigned int *v245;
  uint64_t v246;
  _BOOL4 v247;
  WTF::StringImpl *v248;
  uint64_t v249;
  _DWORD **v250;
  uint64_t v251;
  _DWORD *v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  WTF::StringImpl *v256;
  WTF::StringImpl *v257;
  WTF::StringImpl *v258;
  _BOOL4 v259;
  _BOOL4 v260;
  uint64_t v261;
  _DWORD **v262;
  uint64_t v263;
  _DWORD *v264;
  _DWORD *v265;
  _BOOL4 v266;
  WTF::StringImpl *v267;
  unsigned int v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  unsigned int v272;
  unsigned int v273;
  uint64_t v275;
  uint64_t v276;
  WTF::StringImpl *v277;
  WTF::StringImpl *v278;
  WTF::StringImpl *v279;
  WTF::StringImpl *v280;
  WTF::StringImpl *v281[2];
  char v282;

  v4 = a2;
  v5 = Ref;
  v6 = *(_QWORD *)Ref;
  v7 = *(_QWORD *)(*(_QWORD *)Ref + 424);
  if (!v7)
  {
    v10 = 0;
    LODWORD(v8) = 0;
LABEL_10:
    v9 = v7 + 56 * v8;
    goto LABEL_11;
  }
  v8 = *(unsigned int *)(v7 - 4);
  v9 = v7 + 56 * v8;
  if (!*(_DWORD *)(v7 - 12))
  {
    v10 = v7 + 56 * v8;
    goto LABEL_10;
  }
  v10 = *(_QWORD *)(*(_QWORD *)Ref + 424);
  if ((_DWORD)v8)
  {
    v11 = 56 * v8;
    v10 = *(_QWORD *)(*(_QWORD *)Ref + 424);
    while ((*(_DWORD *)v10 + 1) <= 1)
    {
      v10 += 56;
      v11 -= 56;
      if (!v11)
      {
        v10 = v9;
        break;
      }
    }
  }
LABEL_11:
  if (v7)
    v7 += 56 * *(unsigned int *)(v7 - 4);
  v12 = *a3;
  v275 = *(_QWORD *)Ref;
  if (v7 == v10)
  {
    v15 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    goto LABEL_27;
  }
  v13 = *(_QWORD *)(a2 + 8);
  while (*(_QWORD *)(v10 + 16) != v12
       || *(_QWORD *)(v10 + 24) != v13
       || *(_QWORD *)(v10 + 32) != a3[1]
       || *(_BYTE *)(v10 + 40) != (*(_BYTE *)(a2 + 4) & 1))
  {
    v14 = v10 + 56;
    v10 = v9;
    if (v14 != v9)
    {
      v10 = v14;
      while ((*(_DWORD *)v10 + 1) <= 1)
      {
        v10 += 56;
        if (v10 == v9)
        {
          v10 = v9;
          break;
        }
      }
    }
    if (v10 == v7)
    {
      v15 = 0;
      goto LABEL_27;
    }
  }
  v16 = (WTF::JSONImpl::Value *)*(unsigned int *)(v10 + 8);
  v42 = *(_BYTE *)(v10 + 41) != 0;
  v15 = *(_DWORD **)(v10 + 48);
  if (v15)
    ++*v15;
  if (!(_DWORD)v16)
  {
LABEL_27:
    v16 = (WTF::JSONImpl::Value *)*(unsigned int *)(v6 + 432);
    *(_DWORD *)(v6 + 432) = (_DWORD)v16 + 1;
    v17 = *(_BYTE *)(a2 + 4);
    if ((*(_BYTE *)(v12 + 22) & 2) != 0)
      *(_DWORD *)(v12 + 24) += 2;
    else
      Ref = (WTF::JSONImpl::Object *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
    ++*(_DWORD *)(v13 + 16);
    v18 = (WTF::StringImpl *)a3[1];
    if (v18)
      *(_DWORD *)v18 += 2;
    v19 = (uint64_t *)(v275 + 424);
    if (v15)
      Ref = (WTF::JSONImpl::Object *)WTF::RefCounted<JSC::Breakpoint>::deref((uint64_t)v15, (WTF::StringImpl *)a2);
    v20 = *v19;
    if (*v19
      || (Ref = (WTF::JSONImpl::Object *)WTF::HashTable<int,WTF::KeyValuePair<int,WebCore::InspectorDOMAgent::InspectorEventListener>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WebCore::InspectorDOMAgent::InspectorEventListener>>,WTF::DefaultHash<int>,WTF::HashMap<int,WebCore::InspectorDOMAgent::InspectorEventListener,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WebCore::InspectorDOMAgent::InspectorEventListener>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(v19, 8u, 0), (v20 = *v19) != 0))
    {
      v21 = *(_DWORD *)(v20 - 8);
    }
    else
    {
      v21 = 0;
    }
    v22 = 9 * (((_DWORD)v16 + ~((_DWORD)v16 << 15)) ^ (((_DWORD)v16 + ~((_DWORD)v16 << 15)) >> 10));
    v23 = (v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11);
    v24 = v21 & (v23 ^ HIWORD(v23));
    v25 = v20 + 56 * v24;
    v26 = *(_DWORD *)v25;
    if (*(_DWORD *)v25)
    {
      v27 = 0;
      v28 = 1;
      while (v26 != (_DWORD)v16)
      {
        if (v26 == -1)
          v27 = v25;
        v24 = (v24 + v28) & v21;
        v25 = v20 + 56 * v24;
        v26 = *(_DWORD *)v25;
        ++v28;
        if (!*(_DWORD *)v25)
        {
          if (v27)
          {
            *(_DWORD *)v27 = 0;
            *(_DWORD *)(v27 + 8) = 1;
            *(_QWORD *)(v27 + 48) = 0;
            *(_QWORD *)(v27 + 24) = 0;
            *(_QWORD *)(v27 + 32) = 0;
            *(_QWORD *)(v27 + 16) = 0;
            *(_WORD *)(v27 + 40) = 0;
            --*(_DWORD *)(*v19 - 16);
            v25 = v27;
          }
          *(_DWORD *)v25 = (_DWORD)v16;
          *(_DWORD *)(v25 + 8) = (_DWORD)v16;
          v29 = (uint64_t *)(v25 + 16);
          if (v12)
            goto LABEL_47;
          goto LABEL_49;
        }
      }
LABEL_78:
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
        {
          Ref = (WTF::JSONImpl::Object *)WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
          if (v13)
          {
LABEL_82:
            if (*(_DWORD *)(v13 + 16) == 1)
              Ref = (WTF::JSONImpl::Object *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
            else
              --*(_DWORD *)(v13 + 16);
          }
LABEL_84:
          if (v12)
          {
            if ((*(_BYTE *)(v12 + 22) & 2) != 0)
            {
              if (*(_DWORD *)(v12 + 24) == 2)
              {
                if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
                  Ref = (WTF::JSONImpl::Object *)WebCore::Node::removedLastRef((WebCore::Node *)v12, (void *)a2);
              }
              else
              {
                *(_DWORD *)(v12 + 24) -= 2;
              }
            }
            else
            {
              Ref = (WTF::JSONImpl::Object *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 96))(v12);
            }
          }
          v15 = 0;
          v42 = 0;
          v12 = *a3;
          v13 = *(_QWORD *)(v4 + 8);
          goto LABEL_89;
        }
        *(_DWORD *)v18 -= 2;
      }
      if (v13)
        goto LABEL_82;
      goto LABEL_84;
    }
    *(_DWORD *)v25 = (_DWORD)v16;
    v30 = v20 + 56 * v24;
    *(_DWORD *)(v30 + 8) = (_DWORD)v16;
    v29 = (uint64_t *)(v30 + 16);
LABEL_47:
    if ((*(_BYTE *)(v12 + 22) & 2) != 0)
      *(_DWORD *)(v12 + 24) += 2;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
LABEL_49:
    v31 = *v29;
    *v29 = v12;
    v4 = a2;
    if (v31)
    {
      if ((*(_BYTE *)(v31 + 22) & 2) != 0)
      {
        if (*(_DWORD *)(v31 + 24) == 2)
        {
          if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v31, (void *)a2);
        }
        else
        {
          *(_DWORD *)(v31 + 24) -= 2;
        }
      }
      else
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 96))(v31);
      }
    }
    if (v13)
      ++*(_DWORD *)(v13 + 16);
    v32 = v17 & 1;
    v33 = *(_DWORD **)(v25 + 24);
    *(_QWORD *)(v25 + 24) = v13;
    if (v33)
    {
      if (v33[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
        if (!v18)
        {
LABEL_60:
          v34 = *(WTF::StringImpl **)(v25 + 32);
          *(_QWORD *)(v25 + 32) = v18;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v34 -= 2;
          }
          *(_WORD *)(v25 + 40) = v32;
          Ref = *(WTF::JSONImpl::Object **)(v25 + 48);
          *(_QWORD *)(v25 + 48) = 0;
          if (Ref)
            Ref = (WTF::JSONImpl::Object *)WTF::RefCounted<JSC::Breakpoint>::deref((uint64_t)Ref, (WTF::StringImpl *)a2);
          v35 = *v19;
          if (*v19)
            v36 = *(_DWORD *)(v35 - 12) + 1;
          else
            v36 = 1;
          *(_DWORD *)(v35 - 12) = v36;
          v37 = *v19;
          if (*v19)
            v38 = *(_DWORD *)(v37 - 12);
          else
            v38 = 0;
          v39 = (*(_DWORD *)(v37 - 16) + v38);
          v40 = *(unsigned int *)(v37 - 4);
          if (v40 > 0x400)
          {
            if (v40 > 2 * v39)
              goto LABEL_78;
          }
          else
          {
            if (3 * v40 > 4 * v39)
              goto LABEL_78;
            if (!(_DWORD)v40)
            {
              v41 = 8;
              goto LABEL_77;
            }
          }
          v41 = (_DWORD)v40 << (6 * *(_DWORD *)(v37 - 12) >= (2 * v40));
LABEL_77:
          Ref = (WTF::JSONImpl::Object *)WTF::HashTable<int,WTF::KeyValuePair<int,WebCore::InspectorDOMAgent::InspectorEventListener>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WebCore::InspectorDOMAgent::InspectorEventListener>>,WTF::DefaultHash<int>,WTF::HashMap<int,WebCore::InspectorDOMAgent::InspectorEventListener,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WebCore::InspectorDOMAgent::InspectorEventListener>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(v19, v41, (_DWORD *)v25);
          goto LABEL_78;
        }
LABEL_59:
        *(_DWORD *)v18 += 2;
        goto LABEL_60;
      }
      --v33[4];
    }
    if (!v18)
      goto LABEL_60;
    goto LABEL_59;
  }
LABEL_89:
  v43 = 0;
  v44 = **((_QWORD **)v5 + 1);
  ++*(_DWORD *)(v13 + 16);
  v277 = 0;
  v278 = 0;
  if (!v13)
  {
    v45 = 0;
    goto LABEL_136;
  }
  v45 = 0;
  if (*(_BYTE *)(v13 + 20))
    goto LABEL_136;
  if (!*(_QWORD *)(v13 + 64))
    goto LABEL_135;
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (v46)
  {
    if (!*(_BYTE *)(v46 + 274))
    {
      v48 = v46 - 192;
      *(_DWORD *)(v46 - 168) += 2;
      goto LABEL_101;
    }
    goto LABEL_508;
  }
  if ((*(_BYTE *)(v12 + 22) & 2) == 0)
  {
LABEL_508:
    v48 = 0;
    goto LABEL_101;
  }
  v49 = *(_DWORD *)(v12 + 24) + 2;
  *(_DWORD *)(v12 + 24) = v49;
  v48 = *(_QWORD *)(*(_QWORD *)(v12 + 40) + 8);
  if (v48)
  {
    *(_DWORD *)(v48 + 24) += 2;
    v49 = *(_DWORD *)(v12 + 24);
  }
  v50 = v49 - 2;
  if (v50)
  {
    *(_DWORD *)(v12 + 24) = v50;
  }
  else if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v12, v47);
  }
LABEL_101:
  MEMORY[0x19AEA3294](&v280, *(_QWORD *)(*(_QWORD *)(v13 + 64) + 16));
  if (!v48)
  {
    Ref = (WTF::JSONImpl::Object *)MEMORY[0x19AEA32A0](&v280);
LABEL_135:
    v43 = 0;
    v45 = 0;
    goto LABEL_136;
  }
  v266 = v42;
  v51 = WebCore::JSEventListener::ensureJSFunction((WebCore::JSEventListener *)v13, (const JSCell *)(v48 + 192));
  v52 = *(_QWORD *)(v48 + 528);
  if (!v52)
    goto LABEL_131;
  v53 = *(_QWORD *)(v52 + 8);
  if (!v53)
    goto LABEL_131;
  v54 = v51;
  v55 = *(_QWORD **)(*(_QWORD *)(v53 + 304) + 16);
  v56 = v55[37];
  if (v56)
  {
    if ((*(_BYTE *)(v56 + 268) & 0x10) != 0)
      goto LABEL_131;
  }
  if ((v57 = v55[3]) == 0
    || !*(_QWORD *)(v57 + 8)
    || ((v58 = *(_QWORD *)(v55[35] + 16), v59 = v55[17], *(_BYTE *)(v59 + 245))
      ? (v60 = *(unsigned __int8 *)(v59 + 244) != 0)
      : (v60 = (*(_QWORD *)(v59 + 688) >> 52) & 1),
        !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 968))(v58, v60)))
  {
LABEL_131:
    Ref = (WTF::JSONImpl::Object *)MEMORY[0x19AEA32A0](&v280);
    v45 = 0;
    v43 = 0;
    v42 = v266;
    goto LABEL_132;
  }
  v61 = WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(*(_QWORD *)(v53 + 304) + 16) + 112), *(WebCore::DOMWrapperWorld **)(v13 + 64));
  v62 = (JSC::JSObject *)v54;
  v63 = 0;
  v265 = v15;
  if (!v62)
  {
    v65 = 0;
LABEL_395:
    v66 = v266;
    goto LABEL_396;
  }
  v64 = (JSC::JSGlobalObject *)*((_QWORD *)v61 + 2);
  v65 = 0;
  v66 = v266;
  if (v64)
  {
    v67 = v62;
    v68 = (WTF::StringImpl *)*((_QWORD *)v64 + 7);
    v69 = v62;
    v70 = (uint64_t)v62;
    if (*((_BYTE *)v62 + 5) == 26)
      goto LABEL_122;
    v267 = (WTF::StringImpl *)*((_QWORD *)v64 + 7);
    WTF::AtomStringImpl::addLiteral();
    v71 = v69;
    v72 = v281[0];
    v73 = JSC::JSObject::get(v71, v64, (unint64_t)v281[0]);
    v68 = v267;
    v70 = v73;
    if (v72)
    {
      if (*(_DWORD *)v72 == 2)
      {
        v248 = v72;
        v249 = v70;
        WTF::StringImpl::destroy(v248, v267);
        v70 = v249;
        v68 = v267;
      }
      else
      {
        *(_DWORD *)v72 -= 2;
      }
    }
    v66 = v266;
    if (*((_QWORD *)v68 + 2))
    {
      v261 = v70;
      JSC::VM::clearException(v68);
      v70 = v261;
      v68 = v267;
      v66 = v266;
    }
    v63 = 0;
    if (!v70)
    {
      v65 = 0;
      goto LABEL_396;
    }
    v65 = 0;
    if ((v70 & 0xFFFE000000000002) == 0)
    {
      v69 = v67;
      if (*(_BYTE *)(v70 + 5) != 26)
      {
LABEL_393:
        v63 = 0;
        v65 = 0;
        goto LABEL_396;
      }
LABEL_122:
      v74 = *(_QWORD *)(v70 + 24);
      if ((v74 & 1) != 0)
        v74 = *(_QWORD *)((v74 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v74 + 5) != 8 && (*(_QWORD *)(*(_QWORD *)(v74 + 88) + 16) & 0x80000000) == 0)
      {
        if ((JSC::JSObject *)v70 == v69)
        {
          v77 = v278;
LABEL_444:
          if (!v77
            || !*((_DWORD *)v77 + 1)
            || (v242 = v68, v243 = v70, v244 = MEMORY[0x19AEA53F4](v77, "Object", 6), v70 = v243, v236 = v242, v244))
          {
            v235 = v70;
            JSC::JSFunction::calculatedDisplayName();
            v237 = v281[0];
            if (v281[0])
              *(_DWORD *)v281[0] += 2;
            v278 = v237;
            if (v77)
            {
              if (*(_DWORD *)v77 == 2)
              {
                WTF::StringImpl::destroy(v77, v236);
                v70 = v235;
                v237 = v281[0];
              }
              else
              {
                v70 = v235;
                *(_DWORD *)v77 -= 2;
              }
            }
            else
            {
              v70 = v235;
            }
            v281[0] = 0;
            if (v237)
            {
              if (*(_DWORD *)v237 == 2)
              {
                WTF::StringImpl::destroy(v237, v236);
                v70 = v235;
              }
              else
              {
                *(_DWORD *)v237 -= 2;
              }
            }
          }
          v238 = *(_QWORD *)(v70 + 24);
          if ((v238 & 1) != 0)
            v238 = *(_QWORD *)((v238 & 0xFFFFFFFFFFFFFFFELL) + 48);
          if (v238)
          {
            v65 = *(_DWORD *)(v238 + 56);
            v63 = (WTF::JSONImpl::Value *)*(unsigned int *)(v238 + 60);
            v239 = *(_QWORD *)(v238 + 40);
            if (!v239)
              goto LABEL_460;
            v240 = *(_DWORD *)(v239 + 112);
            if (!v240)
            {
              v270 = *(_DWORD *)(v238 + 56);
              JSC::SourceProvider::getID(*(JSC::SourceProvider **)(v238 + 40));
              v65 = v270;
              v240 = *(_DWORD *)(v239 + 112);
            }
            if (v240 != 1)
            {
              v271 = v65;
              v245 = *(unsigned int **)(v238 + 40);
              if (v245)
              {
                v246 = v245[28];
                v247 = v266;
                if (!(_DWORD)v246)
                {
                  JSC::SourceProvider::getID((JSC::SourceProvider *)v245);
                  v246 = v245[28];
                }
              }
              else
              {
                v246 = 1;
                v247 = v266;
              }
              WTF::String::number((WTF::String *)v246);
              v241 = v281[0];
              v65 = v271;
              v66 = v247;
            }
            else
            {
LABEL_460:
              v241 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
              if (*MEMORY[0x1E0CBF738])
                *(_DWORD *)v241 += 2;
              v281[0] = v241;
              v66 = v266;
            }
            if (v241)
              *(_DWORD *)v241 += 2;
            v258 = v277;
            v277 = v241;
            if (v258)
            {
              if (*(_DWORD *)v258 == 2)
              {
                v272 = v65;
                v259 = v66;
                WTF::StringImpl::destroy(v258, v236);
                v66 = v259;
                v65 = v272;
                v241 = v281[0];
              }
              else
              {
                *(_DWORD *)v258 -= 2;
              }
            }
            v281[0] = 0;
            if (v241)
            {
              if (*(_DWORD *)v241 == 2)
              {
                v273 = v65;
                v260 = v66;
                WTF::StringImpl::destroy(v241, v236);
                v66 = v260;
                v65 = v273;
              }
              else
              {
                *(_DWORD *)v241 -= 2;
              }
            }
            goto LABEL_396;
          }
          v63 = 0;
          v65 = 0;
          goto LABEL_395;
        }
        v75 = v70;
        v76 = v68;
        JSC::JSObject::calculatedClassName(v69, v68);
        v68 = v76;
        v77 = v281[0];
        v281[0] = 0;
        v78 = v278;
        v278 = v77;
        if (v78)
        {
          v79 = *(_DWORD *)v78 - 2;
          if (*(_DWORD *)v78 == 2)
          {
            WTF::StringImpl::destroy(v78, v76);
            v68 = v76;
            v78 = v281[0];
            v281[0] = 0;
            if (!v78)
              goto LABEL_130;
            v79 = *(_DWORD *)v78 - 2;
            if (*(_DWORD *)v78 == 2)
            {
              WTF::StringImpl::destroy(v78, v76);
              v68 = v76;
              goto LABEL_130;
            }
          }
          *(_DWORD *)v78 = v79;
        }
LABEL_130:
        v70 = v75;
        goto LABEL_444;
      }
      goto LABEL_393;
    }
  }
LABEL_396:
  v193 = v63;
  v194 = v66;
  v195 = v65;
  Ref = (WTF::JSONImpl::Object *)MEMORY[0x19AEA32A0](&v280);
  v45 = v195;
  v42 = v194;
  v43 = v193;
  v15 = v265;
LABEL_132:
  if (*(_DWORD *)(v48 + 24) == 2)
  {
    v269 = v45;
    if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
      Ref = (WTF::JSONImpl::Object *)WebCore::Node::removedLastRef((WebCore::Node *)v48, v80);
    v45 = v269;
  }
  else
  {
    *(_DWORD *)(v48 + 24) -= 2;
  }
LABEL_136:
  v268 = v45;
  WTF::JSONImpl::Object::create(Ref);
  v81 = v281[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v16);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v81 + 2, &v279, (const WTF::StringImpl *)&v280, (uint64_t)v281);
  if (v282)
  {
    v83 = (uint64_t *)((char *)v81 + 24);
    v84 = *((unsigned int *)v81 + 9);
    if ((_DWORD)v84 == *((_DWORD *)v81 + 8))
    {
      v196 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v83, v84 + 1, (unint64_t)&v279);
      v84 = *((unsigned int *)v81 + 9);
      v197 = *((_QWORD *)v81 + 3);
      v198 = *v196;
      if (*v196)
        *v198 += 2;
      *(_QWORD *)(v197 + 8 * v84) = v198;
    }
    else
    {
      v85 = *v83;
      v86 = v279;
      if (v279)
        *(_DWORD *)v279 += 2;
      *(_QWORD *)(v85 + 8 * v84) = v86;
    }
    *((_DWORD *)v81 + 9) = v84 + 1;
  }
  v87 = (WTF::JSONImpl::Value *)(a3 + 1);
  v88 = v280;
  v280 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v88;
  }
  v89 = v279;
  v279 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
      WTF::StringImpl::destroy(v89, v82);
    else
      *(_DWORD *)v89 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v87, v90);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v81 + 2, &v279, (const WTF::StringImpl *)&v280, (uint64_t)v281);
  if (v282)
  {
    v92 = (uint64_t *)((char *)v81 + 24);
    v93 = *((unsigned int *)v81 + 9);
    if ((_DWORD)v93 == *((_DWORD *)v81 + 8))
    {
      v199 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v92, v93 + 1, (unint64_t)&v279);
      v93 = *((unsigned int *)v81 + 9);
      v200 = *((_QWORD *)v81 + 3);
      v201 = *v199;
      if (*v199)
        *v201 += 2;
      *(_QWORD *)(v200 + 8 * v93) = v201;
    }
    else
    {
      v94 = *v92;
      v95 = v279;
      if (v279)
        *(_DWORD *)v279 += 2;
      *(_QWORD *)(v94 + 8 * v93) = v95;
    }
    *((_DWORD *)v81 + 9) = v93 + 1;
  }
  v96 = v280;
  v280 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v96;
  }
  v97 = v279;
  v279 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
      WTF::StringImpl::destroy(v97, v91);
    else
      *(_DWORD *)v97 -= 2;
  }
  v98 = (WTF::JSONImpl::Value *)(*(_BYTE *)(v4 + 4) & 1);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v98);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v81 + 2, &v279, (const WTF::StringImpl *)&v280, (uint64_t)v281);
  if (v282)
  {
    v100 = (uint64_t *)((char *)v81 + 24);
    v101 = *((unsigned int *)v81 + 9);
    if ((_DWORD)v101 == *((_DWORD *)v81 + 8))
    {
      v202 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v100, v101 + 1, (unint64_t)&v279);
      v101 = *((unsigned int *)v81 + 9);
      v203 = *((_QWORD *)v81 + 3);
      v204 = *v202;
      if (*v202)
        *v204 += 2;
      *(_QWORD *)(v203 + 8 * v101) = v204;
    }
    else
    {
      v102 = *v100;
      v103 = v279;
      if (v279)
        *(_DWORD *)v279 += 2;
      *(_QWORD *)(v102 + 8 * v101) = v103;
    }
    *((_DWORD *)v81 + 9) = v101 + 1;
  }
  v104 = v280;
  v280 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v104;
  }
  v105 = v279;
  v279 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
      WTF::StringImpl::destroy(v105, v99);
    else
      *(_DWORD *)v105 -= 2;
  }
  v106 = (WTF::JSONImpl::Value *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v106);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v81 + 2, &v279, (const WTF::StringImpl *)&v280, (uint64_t)v281);
  if (v282)
  {
    v108 = (uint64_t *)((char *)v81 + 24);
    v109 = *((unsigned int *)v81 + 9);
    if ((_DWORD)v109 == *((_DWORD *)v81 + 8))
    {
      v205 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v108, v109 + 1, (unint64_t)&v279);
      v109 = *((unsigned int *)v81 + 9);
      v206 = *((_QWORD *)v81 + 3);
      v207 = *v205;
      if (*v205)
        *v207 += 2;
      *(_QWORD *)(v206 + 8 * v109) = v207;
    }
    else
    {
      v110 = *v108;
      v111 = v279;
      if (v279)
        *(_DWORD *)v279 += 2;
      *(_QWORD *)(v110 + 8 * v109) = v111;
    }
    *((_DWORD *)v81 + 9) = v109 + 1;
  }
  v112 = v280;
  v280 = 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v112;
  }
  v113 = v279;
  v279 = 0;
  if (v113)
  {
    if (*(_DWORD *)v113 == 2)
      WTF::StringImpl::destroy(v113, v107);
    else
      *(_DWORD *)v113 -= 2;
  }
  if ((*(_BYTE *)(v12 + 22) & 2) != 0)
  {
    *(_DWORD *)(v12 + 24) += 2;
    v281[0] = 0;
    v115 = (WTF::JSONImpl::Value *)WebCore::InspectorDOMAgent::pushNodePathToFrontend(v275, (WebCore::Node *)v281, (WebCore::InspectorDOMAgent *)v12);
    if (v281[0])
    {
      if (*(_DWORD *)v281[0] == 2)
        WTF::StringImpl::destroy(v281[0], v114);
      else
        *(_DWORD *)v281[0] -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v115);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v81 + 2, &v279, (const WTF::StringImpl *)&v280, (uint64_t)v281);
    v117 = a2;
    if (v282)
    {
      v118 = (uint64_t *)((char *)v81 + 24);
      v119 = *((unsigned int *)v81 + 9);
      if ((_DWORD)v119 == *((_DWORD *)v81 + 8))
      {
        v208 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v118, v119 + 1, (unint64_t)&v279);
        v119 = *((unsigned int *)v81 + 9);
        v209 = *((_QWORD *)v81 + 3);
        v210 = *v208;
        if (*v208)
          *v210 += 2;
        *(_QWORD *)(v209 + 8 * v119) = v210;
      }
      else
      {
        v120 = *v118;
        v121 = v279;
        if (v279)
          *(_DWORD *)v279 += 2;
        *(_QWORD *)(v120 + 8 * v119) = v121;
      }
      *((_DWORD *)v81 + 9) = v119 + 1;
    }
    v122 = v280;
    v280 = 0;
    if (v122)
    {
      if (*(_DWORD *)v122 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v122;
    }
    v123 = v279;
    v279 = 0;
    if (v123)
    {
      if (*(_DWORD *)v123 == 2)
        v123 = (WTF::StringImpl *)WTF::StringImpl::destroy(v123, v116);
      else
        *(_DWORD *)v123 -= 2;
    }
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        v123 = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v12, v116);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  else
  {
    v123 = (WTF::StringImpl *)(**(uint64_t (***)(uint64_t))v12)(v12);
    v117 = a2;
    if ((_DWORD)v123 == 54)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v81 + 2, &v279, (const WTF::StringImpl *)&v280, (uint64_t)v281);
      if (v282)
      {
        v253 = (uint64_t *)((char *)v81 + 24);
        v254 = *((unsigned int *)v81 + 9);
        if ((_DWORD)v254 == *((_DWORD *)v81 + 8))
        {
          v262 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v253, v254 + 1, (unint64_t)&v279);
          v254 = *((unsigned int *)v81 + 9);
          v263 = *((_QWORD *)v81 + 3);
          v264 = *v262;
          if (*v262)
            *v264 += 2;
          *(_QWORD *)(v263 + 8 * v254) = v264;
          v117 = a2;
        }
        else
        {
          v255 = *v253;
          v256 = v279;
          if (v279)
            *(_DWORD *)v279 += 2;
          *(_QWORD *)(v255 + 8 * v254) = v256;
        }
        *((_DWORD *)v81 + 9) = v254 + 1;
      }
      v257 = v280;
      v280 = 0;
      if (v257)
      {
        if (*(_DWORD *)v257 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v257;
      }
      v123 = v279;
      v279 = 0;
      if (v123)
      {
        if (*(_DWORD *)v123 == 2)
          v123 = (WTF::StringImpl *)WTF::StringImpl::destroy(v123, v116);
        else
          *(_DWORD *)v123 -= 2;
      }
    }
  }
  if (v277)
  {
    WTF::JSONImpl::Object::create(v123);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v277, v124);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v276 + 16), &v279, (const WTF::StringImpl *)&v280, (uint64_t)v281);
    if (v282)
    {
      v126 = (uint64_t *)(v276 + 24);
      v127 = *(unsigned int *)(v276 + 36);
      if ((_DWORD)v127 == *(_DWORD *)(v276 + 32))
      {
        v211 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v126, v127 + 1, (unint64_t)&v279);
        v127 = *(unsigned int *)(v276 + 36);
        v212 = *(_QWORD *)(v276 + 24);
        v213 = *v211;
        if (*v211)
          *v213 += 2;
        *(_QWORD *)(v212 + 8 * v127) = v213;
      }
      else
      {
        v128 = *v126;
        v129 = v279;
        if (v279)
          *(_DWORD *)v279 += 2;
        *(_QWORD *)(v128 + 8 * v127) = v129;
      }
      *(_DWORD *)(v276 + 36) = v127 + 1;
    }
    v130 = v280;
    v280 = 0;
    if (v130)
    {
      if (*(_DWORD *)v130 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v130;
    }
    v131 = v279;
    v279 = 0;
    if (v131)
    {
      if (*(_DWORD *)v131 == 2)
        WTF::StringImpl::destroy(v131, v125);
      else
        *(_DWORD *)v131 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)v268);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v276 + 16), &v279, (const WTF::StringImpl *)&v280, (uint64_t)v281);
    if (v282)
    {
      v133 = (uint64_t *)(v276 + 24);
      v134 = *(unsigned int *)(v276 + 36);
      if ((_DWORD)v134 == *(_DWORD *)(v276 + 32))
      {
        v214 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v133, v134 + 1, (unint64_t)&v279);
        v134 = *(unsigned int *)(v276 + 36);
        v215 = *(_QWORD *)(v276 + 24);
        v216 = *v214;
        if (*v214)
          *v216 += 2;
        *(_QWORD *)(v215 + 8 * v134) = v216;
      }
      else
      {
        v135 = *v133;
        v136 = v279;
        if (v279)
          *(_DWORD *)v279 += 2;
        *(_QWORD *)(v135 + 8 * v134) = v136;
      }
      *(_DWORD *)(v276 + 36) = v134 + 1;
    }
    v137 = v280;
    v280 = 0;
    if (v137)
    {
      if (*(_DWORD *)v137 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v137;
    }
    v138 = v279;
    v279 = 0;
    if (v138)
    {
      if (*(_DWORD *)v138 == 2)
        WTF::StringImpl::destroy(v138, v132);
      else
        *(_DWORD *)v138 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v43);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v276 + 16), &v279, (const WTF::StringImpl *)&v280, (uint64_t)v281);
    if (v282)
    {
      v140 = (uint64_t *)(v276 + 24);
      v141 = *(unsigned int *)(v276 + 36);
      if ((_DWORD)v141 == *(_DWORD *)(v276 + 32))
      {
        v217 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v140, v141 + 1, (unint64_t)&v279);
        v141 = *(unsigned int *)(v276 + 36);
        v218 = *(_QWORD *)(v276 + 24);
        v219 = *v217;
        if (*v217)
          *v219 += 2;
        *(_QWORD *)(v218 + 8 * v141) = v219;
      }
      else
      {
        v142 = *v140;
        v143 = v279;
        if (v279)
          *(_DWORD *)v279 += 2;
        *(_QWORD *)(v142 + 8 * v141) = v143;
      }
      *(_DWORD *)(v276 + 36) = v141 + 1;
    }
    v144 = v280;
    v280 = 0;
    if (v144)
    {
      if (*(_DWORD *)v144 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v144;
    }
    v145 = v279;
    v279 = 0;
    if (v145)
    {
      if (*(_DWORD *)v145 == 2)
        WTF::StringImpl::destroy(v145, v139);
      else
        *(_DWORD *)v145 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v279 = (WTF::StringImpl *)v276;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v81 + 2, &v280, (const WTF::StringImpl *)&v279, (uint64_t)v281);
    if (v282)
    {
      v146 = (uint64_t *)((char *)v81 + 24);
      v147 = *((unsigned int *)v81 + 9);
      if ((_DWORD)v147 == *((_DWORD *)v81 + 8))
      {
        v220 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v146, v147 + 1, (unint64_t)&v280);
        v147 = *((unsigned int *)v81 + 9);
        v221 = *((_QWORD *)v81 + 3);
        v222 = *v220;
        if (*v220)
          *v222 += 2;
        *(_QWORD *)(v221 + 8 * v147) = v222;
      }
      else
      {
        v148 = *v146;
        v149 = v280;
        if (v280)
          *(_DWORD *)v280 += 2;
        *(_QWORD *)(v148 + 8 * v147) = v149;
      }
      *((_DWORD *)v81 + 9) = v147 + 1;
    }
    v150 = v279;
    v279 = 0;
    if (v150)
    {
      if (*(_DWORD *)v150 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v150;
    }
    v151 = v280;
    v280 = 0;
    if (v151)
    {
      if (*(_DWORD *)v151 == 2)
        WTF::StringImpl::destroy(v151, v116);
      else
        *(_DWORD *)v151 -= 2;
    }
  }
  if (v278 && *((_DWORD *)v278 + 1))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v278, v186);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v81 + 2, &v279, (const WTF::StringImpl *)&v280, (uint64_t)v281);
    if (v282)
    {
      v187 = (uint64_t *)((char *)v81 + 24);
      v188 = *((unsigned int *)v81 + 9);
      if ((_DWORD)v188 == *((_DWORD *)v81 + 8))
      {
        v250 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v187, v188 + 1, (unint64_t)&v279);
        v188 = *((unsigned int *)v81 + 9);
        v251 = *((_QWORD *)v81 + 3);
        v252 = *v250;
        if (*v250)
          *v252 += 2;
        *(_QWORD *)(v251 + 8 * v188) = v252;
      }
      else
      {
        v189 = *v187;
        v190 = v279;
        if (v279)
          *(_DWORD *)v279 += 2;
        *(_QWORD *)(v189 + 8 * v188) = v190;
      }
      *((_DWORD *)v81 + 9) = v188 + 1;
    }
    v191 = v280;
    v280 = 0;
    if (v191)
    {
      if (*(_DWORD *)v191 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v191;
    }
    v192 = v279;
    v279 = 0;
    if (v192)
    {
      if (*(_DWORD *)v192 == 2)
        WTF::StringImpl::destroy(v192, v116);
      else
        *(_DWORD *)v192 -= 2;
    }
  }
  v152 = *(_BYTE *)(v117 + 4);
  if ((v152 & 2) != 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v81 + 2, &v279, (const WTF::StringImpl *)&v280, (uint64_t)v281);
    if (v282)
    {
      v153 = (uint64_t *)((char *)v81 + 24);
      v154 = *((unsigned int *)v81 + 9);
      if ((_DWORD)v154 == *((_DWORD *)v81 + 8))
      {
        v226 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v153, v154 + 1, (unint64_t)&v279);
        v154 = *((unsigned int *)v81 + 9);
        v227 = *((_QWORD *)v81 + 3);
        v228 = *v226;
        if (*v226)
          *v228 += 2;
        *(_QWORD *)(v227 + 8 * v154) = v228;
      }
      else
      {
        v155 = *v153;
        v156 = v279;
        if (v279)
          *(_DWORD *)v279 += 2;
        *(_QWORD *)(v155 + 8 * v154) = v156;
      }
      *((_DWORD *)v81 + 9) = v154 + 1;
    }
    v157 = v280;
    v280 = 0;
    if (v157)
    {
      if (*(_DWORD *)v157 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v157;
    }
    v158 = v279;
    v279 = 0;
    if (v158)
    {
      if (*(_DWORD *)v158 == 2)
        WTF::StringImpl::destroy(v158, v116);
      else
        *(_DWORD *)v158 -= 2;
    }
    v152 = *(_BYTE *)(v117 + 4);
  }
  if ((v152 & 4) != 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v81 + 2, &v279, (const WTF::StringImpl *)&v280, (uint64_t)v281);
    if (v282)
    {
      v159 = (uint64_t *)((char *)v81 + 24);
      v160 = *((unsigned int *)v81 + 9);
      if ((_DWORD)v160 == *((_DWORD *)v81 + 8))
      {
        v229 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v159, v160 + 1, (unint64_t)&v279);
        v160 = *((unsigned int *)v81 + 9);
        v230 = *((_QWORD *)v81 + 3);
        v231 = *v229;
        if (*v229)
          *v231 += 2;
        *(_QWORD *)(v230 + 8 * v160) = v231;
      }
      else
      {
        v161 = *v159;
        v162 = v279;
        if (v279)
          *(_DWORD *)v279 += 2;
        *(_QWORD *)(v161 + 8 * v160) = v162;
      }
      *((_DWORD *)v81 + 9) = v160 + 1;
    }
    v163 = v280;
    v280 = 0;
    if (v163)
    {
      if (*(_DWORD *)v163 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v163;
    }
    v164 = v279;
    v279 = 0;
    if (v164)
    {
      if (*(_DWORD *)v164 == 2)
      {
        WTF::StringImpl::destroy(v164, v116);
        if (!v42)
          goto LABEL_292;
        goto LABEL_280;
      }
      *(_DWORD *)v164 -= 2;
    }
  }
  if (!v42)
    goto LABEL_292;
LABEL_280:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v81 + 2, &v279, (const WTF::StringImpl *)&v280, (uint64_t)v281);
  if (v282)
  {
    v165 = (uint64_t *)((char *)v81 + 24);
    v166 = *((unsigned int *)v81 + 9);
    if ((_DWORD)v166 == *((_DWORD *)v81 + 8))
    {
      v232 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v165, v166 + 1, (unint64_t)&v279);
      v166 = *((unsigned int *)v81 + 9);
      v233 = *((_QWORD *)v81 + 3);
      v234 = *v232;
      if (*v232)
        *v234 += 2;
      *(_QWORD *)(v233 + 8 * v166) = v234;
    }
    else
    {
      v167 = *v165;
      v168 = v279;
      if (v279)
        *(_DWORD *)v279 += 2;
      *(_QWORD *)(v167 + 8 * v166) = v168;
    }
    *((_DWORD *)v81 + 9) = v166 + 1;
  }
  v169 = v280;
  v280 = 0;
  if (v169)
  {
    if (*(_DWORD *)v169 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v169;
  }
  v170 = v279;
  v279 = 0;
  if (v170)
  {
    if (*(_DWORD *)v170 == 2)
      WTF::StringImpl::destroy(v170, v116);
    else
      *(_DWORD *)v170 -= 2;
  }
LABEL_292:
  if (v15)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v81 + 2, &v279, (const WTF::StringImpl *)&v280, (uint64_t)v281);
    if (v282)
    {
      v171 = (uint64_t *)((char *)v81 + 24);
      v172 = *((unsigned int *)v81 + 9);
      if ((_DWORD)v172 == *((_DWORD *)v81 + 8))
      {
        v223 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v171, v172 + 1, (unint64_t)&v279);
        v172 = *((unsigned int *)v81 + 9);
        v224 = *((_QWORD *)v81 + 3);
        v225 = *v223;
        if (*v223)
          *v225 += 2;
        *(_QWORD *)(v224 + 8 * v172) = v225;
      }
      else
      {
        v173 = *v171;
        v174 = v279;
        if (v279)
          *(_DWORD *)v279 += 2;
        *(_QWORD *)(v173 + 8 * v172) = v174;
      }
      *((_DWORD *)v81 + 9) = v172 + 1;
    }
    v175 = v280;
    v280 = 0;
    if (v175)
    {
      if (*(_DWORD *)v175 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v175;
    }
    v176 = v279;
    v279 = 0;
    if (v176)
    {
      if (*(_DWORD *)v176 == 2)
        WTF::StringImpl::destroy(v176, v116);
      else
        *(_DWORD *)v176 -= 2;
    }
  }
  v177 = v277;
  v277 = 0;
  if (v177)
  {
    if (*(_DWORD *)v177 == 2)
      WTF::StringImpl::destroy(v177, v116);
    else
      *(_DWORD *)v177 -= 2;
  }
  result = v278;
  v278 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v116);
    else
      *(_DWORD *)result -= 2;
  }
  if (*(_DWORD *)(v13 + 16) == 1)
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  else
    --*(_DWORD *)(v13 + 16);
  v179 = *(unsigned int *)(v44 + 28);
  if ((_DWORD)v179 == *(_DWORD *)(v44 + 24))
  {
    v180 = v179 + (v179 >> 2);
    if (v180 >= 0x10)
      v181 = v180 + 1;
    else
      v181 = 16;
    if (v181 <= v179 + 1)
      v182 = v179 + 1;
    else
      v182 = v181;
    if (v182 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v183 = *(void **)(v44 + 16);
    v184 = (void *)WTF::fastMalloc((WTF *)(8 * v182));
    *(_DWORD *)(v44 + 24) = v182;
    *(_QWORD *)(v44 + 16) = v184;
    result = (WTF::StringImpl *)memcpy(v184, v183, 8 * v179);
    if (v183)
    {
      if (*(void **)(v44 + 16) == v183)
      {
        *(_QWORD *)(v44 + 16) = 0;
        *(_DWORD *)(v44 + 24) = 0;
      }
      result = (WTF::StringImpl *)WTF::fastFree((WTF *)v183, v116);
    }
    v179 = *(unsigned int *)(v44 + 28);
    v185 = (WTF::StringImpl **)(*(_QWORD *)(v44 + 16) + 8 * v179);
  }
  else
  {
    v185 = (WTF::StringImpl **)(*(_QWORD *)(v44 + 16) + 8 * v179);
  }
  *v185 = v81;
  *(_DWORD *)(v44 + 28) = v179 + 1;
  if (v15)
    return (WTF::StringImpl *)WTF::RefCounted<JSC::Breakpoint>::deref((uint64_t)v15, v116);
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMAgent::getEventListenersForNode@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  return WebCore::InspectorDOMAgent::getEventListenersForNode((WebCore::InspectorDOMAgent *)(a1 - 32), a2, a3, a4);
}

uint64_t WebCore::InspectorDOMAgent::setEventListenerDisabled@<X0>(uint64_t this@<X0>, int a2@<W1>, char a3@<W2>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int *v10;
  int v11;
  int v12;
  char v13;

  v5 = *(_QWORD *)(this + 424);
  if (!v5)
    goto LABEL_10;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v8 = (v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11);
  v9 = v6 & (v8 ^ HIWORD(v8));
  v10 = (int *)(v5 + 56 * v9);
  v11 = *v10;
  if (*v10 != a2)
  {
    v12 = 1;
    while (v11)
    {
      v9 = (v9 + v12) & v6;
      v10 = (int *)(v5 + 56 * v9);
      v11 = *v10;
      ++v12;
      if (*v10 == a2)
        goto LABEL_8;
    }
    v10 = (int *)(v5 + 56 * *(unsigned int *)(v5 - 4));
  }
LABEL_8:
  if (v10 == (int *)(v5 + 56 * *(unsigned int *)(v5 - 4)))
  {
LABEL_10:
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = 1;
  }
  else
  {
    v13 = 0;
    *((_BYTE *)v10 + 41) = a3;
    *a4 = 0;
  }
  a4[8] = v13;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::InspectorDOMAgent::setEventListenerDisabled@<X0>(uint64_t this@<X0>, int a2@<W1>, char a3@<W2>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int *v10;
  int v11;
  int v12;
  char v13;

  v5 = *(_QWORD *)(this + 392);
  if (!v5)
    goto LABEL_10;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v8 = (v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11);
  v9 = v6 & (v8 ^ HIWORD(v8));
  v10 = (int *)(v5 + 56 * v9);
  v11 = *v10;
  if (*v10 != a2)
  {
    v12 = 1;
    while (v11)
    {
      v9 = (v9 + v12) & v6;
      v10 = (int *)(v5 + 56 * v9);
      v11 = *v10;
      ++v12;
      if (*v10 == a2)
        goto LABEL_8;
    }
    v10 = (int *)(v5 + 56 * *(unsigned int *)(v5 - 4));
  }
LABEL_8:
  if (v10 == (int *)(v5 + 56 * *(unsigned int *)(v5 - 4)))
  {
LABEL_10:
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = 1;
  }
  else
  {
    v13 = 0;
    *((_BYTE *)v10 + 41) = a3;
    *a4 = 0;
  }
  a4[8] = v13;
  return this;
}

uint64_t WebCore::InspectorDOMAgent::setBreakpointForEventListener@<X0>(uint64_t a1@<X0>, int a2@<W1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int *v9;
  int v10;
  int v11;
  char v12;
  WTF::StringImpl *v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;

  v4 = *(_QWORD *)(a1 + 424);
  if (!v4)
    goto LABEL_10;
  v5 = *(_DWORD *)(v4 - 8);
  v6 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
  v8 = v5 & (v7 ^ HIWORD(v7));
  v9 = (int *)(v4 + 56 * v8);
  v10 = *v9;
  if (*v9 != a2)
  {
    v11 = 1;
    while (v10)
    {
      v8 = (v8 + v11) & v5;
      v9 = (int *)(v4 + 56 * v8);
      v10 = *v9;
      ++v11;
      if (*v9 == a2)
        goto LABEL_8;
    }
    v9 = (int *)(v4 + 56 * *(unsigned int *)(v4 - 4));
  }
LABEL_8:
  if (v9 == (int *)(v4 + 56 * *(unsigned int *)(v4 - 4)) || *((_QWORD *)v9 + 6))
  {
LABEL_10:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  else
  {
    Inspector::InspectorDebuggerAgent::debuggerBreakpointFromPayload();
    v15 = v17;
    v16 = *((_QWORD *)v9 + 6);
    *((_QWORD *)v9 + 6) = v17;
    if (v16)
    {
      WTF::RefCounted<JSC::Breakpoint>::deref(v16, v14);
      v15 = (WTF *)*((_QWORD *)v9 + 6);
    }
    if (v15)
    {
      v12 = 0;
      *a3 = 0;
      goto LABEL_12;
    }
    *(_QWORD *)a3 = 0;
  }
  v12 = 1;
LABEL_12:
  a3[8] = v12;
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::InspectorDOMAgent::setBreakpointForEventListener@<X0>(uint64_t a1@<X0>, int a2@<W1>, _BYTE *a3@<X8>)
{
  return WebCore::InspectorDOMAgent::setBreakpointForEventListener(a1 - 32, a2, a3);
}

uint64_t WebCore::InspectorDOMAgent::removeBreakpointForEventListener@<X0>(WebCore::InspectorDOMAgent *this@<X0>, WTF::StringImpl *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t result;

  v4 = *((_QWORD *)this + 53);
  if (!v4)
    goto LABEL_11;
  v5 = *(_DWORD *)(v4 - 8);
  v6 = 9 * ((~((_DWORD)a2 << 15) + (_DWORD)a2) ^ ((~((_DWORD)a2 << 15) + (_DWORD)a2) >> 10));
  v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
  v8 = v5 & (v7 ^ HIWORD(v7));
  v9 = (int *)(v4 + 56 * v8);
  v10 = *v9;
  if (*v9 != (_DWORD)a2)
  {
    v11 = 1;
    while (v10)
    {
      v8 = (v8 + v11) & v5;
      v9 = (int *)(v4 + 56 * v8);
      v10 = *v9;
      ++v11;
      if (*v9 == (_DWORD)a2)
        goto LABEL_8;
    }
    v9 = (int *)(v4 + 56 * *(unsigned int *)(v4 - 4));
  }
LABEL_8:
  if (v9 != (int *)(v4 + 56 * *(unsigned int *)(v4 - 4)) && (v12 = *((_QWORD *)v9 + 6)) != 0)
  {
    *((_QWORD *)v9 + 6) = 0;
    result = WTF::RefCounted<JSC::Breakpoint>::deref(v12, a2);
    *a3 = 0;
    a3[8] = 0;
  }
  else
  {
LABEL_11:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    a3[8] = 1;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorDOMAgent::removeBreakpointForEventListener@<X0>(WebCore::InspectorDOMAgent *this@<X0>, WTF::StringImpl *a2@<X1>, _BYTE *a3@<X8>)
{
  return WebCore::InspectorDOMAgent::removeBreakpointForEventListener((WebCore::InspectorDOMAgent *)((char *)this - 32), a2, a3);
}

WTF::StringImpl *WebCore::InspectorDOMAgent::getAccessibilityPropertiesForNode@<X0>(WebCore::InspectorDOMAgent *this@<X0>, void *a2@<X1>, WebCore::InspectorDOMAgent *a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  int v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;

  v5 = WebCore::InspectorDOMAgent::nodeForId(this, a2);
  if (v5)
  {
    v7 = v5;
    v8 = *(_DWORD *)(v5 + 24);
    *(_DWORD *)(v5 + 24) = v8 + 2;
    if (v8)
    {
      *(_DWORD *)(v5 + 24) = v8;
    }
    else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
    }
    result = WebCore::InspectorDOMAgent::buildObjectForAccessibilityProperties(a3, this, v7);
    *((_DWORD *)a3 + 2) = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = v12;
    if (v12)
    {
      v11 = *(_DWORD *)v12;
      *(_DWORD *)v12 += 2;
      *(_QWORD *)a3 = v12;
      *((_DWORD *)a3 + 2) = 1;
      if (v11)
        *(_DWORD *)v12 = v11;
      else
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v12, v10);
    }
    else
    {
      *(_QWORD *)a3 = 0;
      *((_DWORD *)a3 + 2) = 1;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorDOMAgent::buildObjectForAccessibilityProperties(WebCore::InspectorDOMAgent *this, WebCore::Node *a2, uint64_t a3)
{
  unsigned __int8 v5;
  WTF *v6;
  unsigned __int8 v7;
  WTF::JSONImpl::ArrayBase *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WebCore::AXObjectCache *v20;
  WTF::StringImpl *v21;
  const WTF::String *v22;
  WTF::StringImpl *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WebCore::AXObjectCache *v28;
  WTF::StringImpl *v29;
  const WTF::String *v30;
  WTF::StringImpl *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WebCore::AXObjectCache *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::JSONImpl::Value *v39;
  WTF::StringImpl *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WebCore::AXObjectCache *v45;
  WTF::StringImpl *v46;
  WTF::JSONImpl::Value *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WebCore::AXObjectCache *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WebCore::AXObjectCache *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  unint64_t v63;
  const WTF::String *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WebCore::AXObjectCache *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  WebCore::AXObjectCache *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  WebCore::AXObjectCache *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  const WTF::String *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  WebCore::AXObjectCache *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  WebCore::AXObjectCache *v100;
  WTF::StringImpl *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  WebCore::AXObjectCache *v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  WebCore::AXObjectCache *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WebCore::AXObjectCache *v121;
  WTF::StringImpl *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  WebCore::AXObjectCache *v128;
  WTF::StringImpl *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  WebCore::AXObjectCache *v135;
  WTF::StringImpl *v136;
  uint64_t v137;
  const WTF::String *v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  WebCore::AXObjectCache *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  WTF::StringImpl *v150;
  WebCore::AXObjectCache *v151;
  WTF::StringImpl *v152;
  uint64_t v153;
  WTF::StringImpl *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  WTF::StringImpl *v158;
  WebCore::AXObjectCache *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  WebCore::AXObjectCache *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  const WTF::String *v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  WTF::StringImpl *v172;
  WebCore::AXObjectCache *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  WTF::JSONImpl::Value *v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  WTF::StringImpl *v181;
  WebCore::AXObjectCache *v182;
  WTF::StringImpl *v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  WebCore::AXObjectCache *v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  WTF::JSONImpl::Value *v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  WTF::StringImpl *v196;
  WebCore::AXObjectCache *v197;
  WTF::StringImpl *v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  WTF::StringImpl *v203;
  WebCore::AXObjectCache *v204;
  WTF::StringImpl *v205;
  uint64_t v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  WTF::StringImpl *v210;
  WebCore::AXObjectCache *v211;
  WTF::StringImpl *v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  WTF::StringImpl *v217;
  WebCore::AXObjectCache *v218;
  WTF::StringImpl *v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  WTF::StringImpl *v224;
  WebCore::AXObjectCache *v225;
  WTF::StringImpl *v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  WebCore::AXObjectCache *v231;
  WTF::StringImpl *v232;
  WTF::StringImpl *v233;
  uint64_t v234;
  double v235;
  WTF::JSONImpl::Value *v236;
  uint64_t *v237;
  uint64_t v238;
  uint64_t v239;
  WTF::StringImpl *v240;
  WebCore::AXObjectCache *v241;
  WTF::StringImpl *v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  WTF::StringImpl *v247;
  WebCore::AXObjectCache *v248;
  WTF::StringImpl *v249;
  WTF::StringImpl *v250;
  WTF::StringImpl *result;
  _DWORD **v252;
  uint64_t v253;
  _DWORD *v254;
  _DWORD **v255;
  uint64_t v256;
  _DWORD *v257;
  _DWORD **v258;
  uint64_t v259;
  _DWORD *v260;
  _DWORD **v261;
  uint64_t v262;
  _DWORD *v263;
  _DWORD **v264;
  uint64_t v265;
  _DWORD *v266;
  _DWORD **v267;
  uint64_t v268;
  _DWORD *v269;
  _DWORD **v270;
  uint64_t v271;
  _DWORD *v272;
  _DWORD **v273;
  uint64_t v274;
  _DWORD *v275;
  _DWORD **v276;
  uint64_t v277;
  _DWORD *v278;
  _DWORD **v279;
  uint64_t v280;
  _DWORD *v281;
  _DWORD **v282;
  uint64_t v283;
  _DWORD *v284;
  _DWORD **v285;
  uint64_t v286;
  _DWORD *v287;
  _DWORD **v288;
  uint64_t v289;
  _DWORD *v290;
  _DWORD **v291;
  uint64_t v292;
  _DWORD *v293;
  _DWORD **v294;
  uint64_t v295;
  _DWORD *v296;
  _DWORD **v297;
  uint64_t v298;
  _DWORD *v299;
  _DWORD **v300;
  uint64_t v301;
  _DWORD *v302;
  _DWORD **v303;
  uint64_t v304;
  _DWORD *v305;
  _DWORD **v306;
  uint64_t v307;
  _DWORD *v308;
  _DWORD **v309;
  uint64_t v310;
  _DWORD *v311;
  _DWORD **v312;
  uint64_t v313;
  _DWORD *v314;
  _DWORD **v315;
  uint64_t v316;
  _DWORD *v317;
  _DWORD **v318;
  uint64_t v319;
  _DWORD *v320;
  _DWORD **v321;
  uint64_t v322;
  _DWORD *v323;
  _DWORD **v324;
  uint64_t v325;
  _DWORD *v326;
  _DWORD **v327;
  uint64_t v328;
  _DWORD *v329;
  _DWORD **v330;
  uint64_t v331;
  _DWORD *v332;
  _DWORD **v333;
  uint64_t v334;
  _DWORD *v335;
  _DWORD **v336;
  uint64_t v337;
  _DWORD *v338;
  _DWORD **v339;
  uint64_t v340;
  _DWORD *v341;
  _DWORD **v342;
  uint64_t v343;
  _DWORD *v344;
  uint64_t v345;
  BOOL v346;
  WebCore::AXObjectCache **v347;
  WebCore::AXObjectCache *v348;
  void *v349;
  uint64_t v350;
  uint64_t v351;
  int v352;
  uint64_t v353;
  int v354;
  int v355;
  int v356;
  int v357;
  unsigned int v358;
  int v359;
  int v360;
  int v361;
  int v362;
  WebCore::InspectorDOMAgent **v363;
  uint64_t v364;
  WebCore::InspectorDOMAgent *v365;
  WTF::StringImpl *v366;
  WTF::JSONImpl::Value *v367;
  uint64_t v368;
  char *v369;
  uint64_t v370;
  WTF::StringImpl *v371;
  WTF::StringImpl *v372;
  unsigned int v373;
  int v374;
  WebCore::InspectorDOMAgent **v375;
  uint64_t v376;
  WebCore::InspectorDOMAgent *v377;
  WTF::StringImpl *v378;
  WTF::JSONImpl::Value *v379;
  uint64_t v380;
  char *v381;
  uint64_t v382;
  WTF::StringImpl *v383;
  WTF::StringImpl *v384;
  int v385;
  WebCore::AccessibilityObject *v386;
  WTF::StringImpl *v387;
  WTF::StringImpl *v388;
  WTF::StringImpl *v389;
  int v390;
  WTF::StringImpl *v391;
  WTF::StringImpl *v392;
  WTF::StringImpl *v393;
  WTF::StringImpl *v394;
  WTF::StringImpl *v395;
  WTF::StringImpl *v396;
  int v397;
  WTF::StringImpl *v398;
  WTF::StringImpl *v399;
  WTF::StringImpl *v400;
  WTF::StringImpl *v401;
  uint64_t v402;
  WebCore::InspectorDOMAgent *v403;
  WTF::JSONImpl::Value *v404;
  uint64_t v405;
  char *v406;
  uint64_t v407;
  WTF::StringImpl *v408;
  WTF::StringImpl *v409;
  uint64_t v410;
  WebCore::InspectorDOMAgent *v411;
  uint64_t v412;
  int v413;
  WTF::StringImpl *v416;
  WTF::StringImpl *v417;
  WTF::StringImpl *v418;
  int v419;
  WTF::StringImpl *v420;
  char **v421;
  uint64_t v422;
  WebCore::InspectorDOMAgent *v423;
  WTF::StringImpl *v424;
  WTF::JSONImpl::Value *v425;
  uint64_t v426;
  char *v427;
  char *v428;
  WTF::StringImpl *v429;
  WTF::StringImpl *v430;
  int v431;
  int v432;
  int v433;
  void *v434;
  WTF::StringImpl *v435;
  WTF *v436;
  WTF::StringImpl *v437;
  WTF::StringImpl *v438;
  WTF::StringImpl *v439;
  unint64_t v440;
  WTF::StringImpl *v441;
  _BOOL4 v442;
  char **v443;
  const WTF::String *v444;
  uint64_t v445;
  char *v446;
  char *v447;
  WTF::StringImpl *v448;
  WTF::StringImpl *v449;
  WTF::StringImpl *v450;
  WTF::StringImpl *v451;
  unint64_t v452;
  WTF::StringImpl *v453;
  _BOOL4 v454;
  char **v455;
  uint64_t v456;
  char *v457;
  char *v458;
  WTF::StringImpl *v459;
  WTF::StringImpl *v460;
  const WTF::String *v461;
  uint64_t v462;
  char *v463;
  char *v464;
  WTF::StringImpl *v465;
  WTF::StringImpl *v466;
  uint64_t v467;
  int v468;
  WTF::StringImpl *v469;
  WTF::StringImpl *v470;
  unint64_t v471;
  WTF::StringImpl *v472;
  _BOOL4 v473;
  char **v474;
  uint64_t v475;
  char *v476;
  char *v477;
  WTF::StringImpl *v478;
  WTF::StringImpl *v479;
  WTF::StringImpl *v480;
  unint64_t v481;
  WTF::StringImpl *v482;
  _BOOL4 v483;
  char *v484;
  char *v485;
  WTF::StringImpl *v486;
  WTF::StringImpl *v487;
  WTF *v488;
  WTF::StringImpl *v489;
  WTF::StringImpl *v490;
  WTF::StringImpl *v491;
  WTF::StringImpl *v492;
  uint64_t v493;
  uint64_t v494;
  WebCore::AXObjectCache *v495;
  uint64_t v496;
  uint64_t v497;
  const WTF::AtomString *v498;
  WTF::StringImpl *v499;
  int v500;
  uint64_t v501;
  int v502;
  unsigned int v503;
  unsigned int v504;
  uint64_t v505;
  WTF::JSONImpl::Value *v506;
  WebCore::InspectorDOMAgent *v507;
  _BOOL4 v508;
  unsigned int v509;
  WebCore::InspectorDOMAgent *v510;
  WebCore::InspectorDOMAgent *v511;
  int v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  unsigned int v517;
  _BOOL4 isDOMHidden;
  int hasPopup;
  WebCore::AccessibilityObject *v520;
  int v521;
  _BOOL4 IsEnabled;
  int v523;
  uint64_t v524;
  uint64_t v525;
  WTF::StringImpl *v527;
  WTF *v528;
  WTF::StringImpl *v529;
  WTF::StringImpl *v530;
  WTF::StringImpl *v531;
  WTF::StringImpl *v532;
  WebCore::InspectorDOMAgent **v533;
  int v534;
  unsigned int v535;
  WebCore::InspectorDOMAgent **v536;
  int v537;
  unsigned int v538;
  WTF::StringImpl *v539;
  WTF::StringImpl *v540;
  WTF::StringImpl *v541;
  WTF::StringImpl *v542;
  int v543;
  unsigned int v544;
  char v545;

  v5 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v5 & 1) == 0)
    atomic_store(1u, WebCore::AXObjectCache::gAccessibilityEnabled);
  v539 = 0;
  v540 = 0;
  v6 = *(WTF **)(*(_QWORD *)(a3 + 40) + 8);
  v7 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v7 & 1) == 0)
    goto LABEL_4;
  v345 = WebCore::Document::topDocument((uint64_t)v6);
  *(_DWORD *)(v345 + 24) += 2;
  v542 = (WTF::StringImpl *)v345;
  if (*(_QWORD *)(v345 + 1944))
    v346 = *(_BYTE *)(v345 + 3405) == 0;
  else
    v346 = 0;
  if (!v346)
  {
    v6 = (WTF *)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v542);
    goto LABEL_4;
  }
  v347 = (WebCore::AXObjectCache **)v345;
  v13 = *(_QWORD *)(v345 + 1488);
  if (v13)
  {
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v542);
  }
  else
  {
    v348 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
    v536 = (WebCore::InspectorDOMAgent **)WebCore::AXObjectCache::AXObjectCache(v348, (WebCore::Document *)v347);
    std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v347 + 186, (WebCore::AXObjectCache **)&v536);
    std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100]((WebCore::AXObjectCache **)&v536);
    v521 = 1;
    WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
    v13 = (uint64_t)v347[186];
    v6 = (WTF *)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v542);
    if (!v13)
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v524 = 0;
      v525 = 0;
      v11 = 0;
      IsEnabled = 0;
      v523 = 0;
      v512 = 0;
      v514 = 0;
      v515 = 0;
      isDOMHidden = 0;
      hasPopup = 0;
      v516 = 0;
      v513 = 0;
      v502 = 0;
      v508 = 0;
      v505 = 0;
      v506 = 0;
      v504 = 0;
      v510 = 0;
      v511 = 0;
      v12 = 0;
      v507 = 0;
      goto LABEL_5;
    }
  }
  v6 = (WTF *)WebCore::AXObjectCache::getOrCreate(v13, a3, 0);
  v520 = v6;
  if (!v6)
  {
LABEL_4:
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v524 = 0;
    v525 = 0;
    v11 = 0;
    IsEnabled = 0;
    v523 = 0;
    v512 = 0;
    v514 = 0;
    v515 = 0;
    isDOMHidden = 0;
    hasPopup = 0;
    v516 = 0;
    v513 = 0;
    v502 = 0;
    v508 = 0;
    v505 = 0;
    v506 = 0;
    v504 = 0;
    v510 = 0;
    v511 = 0;
    v12 = 0;
    v13 = 0;
    v507 = 0;
    v521 = 1;
LABEL_5:
    v517 = 131;
    v503 = 98;
    v509 = 131;
    v501 = 0x6200000083;
    goto LABEL_6;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, WTF *, uint64_t))(*(_QWORD *)v6 + 984))(&v542, v6, 1);
  if (!v544)
  {
    WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v542, v349);
    goto LABEL_658;
  }
  v350 = *(_QWORD *)v542;
  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v542, v349);
  if (!v350)
  {
LABEL_658:
    v507 = 0;
    goto LABEL_659;
  }
  v507 = (WebCore::InspectorDOMAgent *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v350 + 840))(v350);
LABEL_659:
  v351 = (uint64_t)v520;
  do
  {
    v352 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v351 + 2256))(v351);
    v353 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v351 + 1232))(v351);
    v523 = v352;
    if ((v352 & 1) != 0)
      break;
    v351 = v353;
  }
  while (v353);
  v354 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 1456))(v520);
  v508 = v354 == 113;
  v502 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 1048))(v520);
  if (!v502)
  {
    v358 = 131;
    goto LABEL_672;
  }
  v355 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 880))(v520);
  if (v355 == 2)
  {
    if (v354 == 113)
      goto LABEL_675;
    v358 = 132;
LABEL_672:
    v501 = v358 | 0x6200000000;
    goto LABEL_688;
  }
  if (v355 != 1)
  {
LABEL_675:
    v359 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 528))(v520);
    if (v354 == 113)
      v360 = 142;
    else
      v360 = 98;
    if (v354 == 113)
      v361 = 131;
    else
      v361 = 130;
    if (v359)
      v362 = v360;
    else
      v362 = 98;
    HIDWORD(v501) = v362;
    if (v359)
      v357 = v361;
    else
      v357 = 131;
    goto LABEL_687;
  }
  if (v354 == 113)
    v356 = 142;
  else
    v356 = 98;
  HIDWORD(v501) = v356;
  if (v354 == 113)
    v357 = 131;
  else
    v357 = 130;
LABEL_687:
  LODWORD(v501) = v357;
LABEL_688:
  if (*(_DWORD *)((*(uint64_t (**)(WebCore::AccessibilityObject *, uint64_t))(*(_QWORD *)v520 + 1896))(v520, 1)+ 12))
  {
    v8 = (WTF::JSONImpl::ArrayBase *)WTF::fastMalloc((WTF *)0x20);
    WTF::JSONImpl::ArrayBase::ArrayBase(v8);
    WebCore::InspectorDOMAgent::processAccessibilityChildren((uint64_t)a2, (uint64_t)v520, (uint64_t)v8);
  }
  else
  {
    v8 = 0;
  }
  WebCore::AccessibilityObject::elementsFromAttribute(v520, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_controlsAttr, (WTF::StringImpl *)&v536);
  if (v538)
  {
    v9 = WTF::fastMalloc((WTF *)0x20);
    WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v9);
    if (v538)
    {
      v363 = v536;
      v364 = 8 * v538;
      while (1)
      {
        v365 = *v363;
        v542 = 0;
        v367 = (WTF::JSONImpl::Value *)WebCore::InspectorDOMAgent::pushNodePathToFrontend((uint64_t)a2, (WebCore::Node *)&v542, v365);
        if (!v542)
          goto LABEL_697;
        if (*(_DWORD *)v542 != 2)
          break;
        WTF::StringImpl::destroy(v542, v366);
        if ((_DWORD)v367)
        {
LABEL_698:
          WTF::JSONImpl::Value::create(v367);
          v368 = *(unsigned int *)(v9 + 28);
          if ((_DWORD)v368 == *(_DWORD *)(v9 + 24))
          {
            v369 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v9 + 16), v368 + 1, (unint64_t)&v542);
            v368 = *(unsigned int *)(v9 + 28);
            v370 = *(_QWORD *)(v9 + 16);
            v371 = *(WTF::StringImpl **)v369;
            *(_QWORD *)v369 = 0;
          }
          else
          {
            v370 = *(_QWORD *)(v9 + 16);
            v371 = v542;
            v542 = 0;
          }
          *(_QWORD *)(v370 + 8 * v368) = v371;
          *(_DWORD *)(v9 + 28) = v368 + 1;
          v372 = v542;
          v542 = 0;
          if (v372)
          {
            if (*(_DWORD *)v372 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v372;
          }
        }
LABEL_704:
        ++v363;
        v364 -= 8;
        if (!v364)
          goto LABEL_710;
      }
      *(_DWORD *)v542 -= 2;
LABEL_697:
      if ((_DWORD)v367)
        goto LABEL_698;
      goto LABEL_704;
    }
  }
  else
  {
    v9 = 0;
  }
LABEL_710:
  v373 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 1096))(v520) - 1;
  if (v373 > 5)
    v374 = 131;
  else
    v374 = dword_1969F22E0[v373];
  v509 = v374;
  v500 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 536))(v520);
  HIDWORD(v513) = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 1040))(v520);
  if (HIDWORD(v513))
    LODWORD(v505) = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 632))(v520);
  else
    LODWORD(v505) = 0;
  WebCore::AccessibilityObject::elementsFromAttribute(v520, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_flowtoAttr, (WTF::StringImpl *)&v533);
  if (v535)
  {
    v10 = WTF::fastMalloc((WTF *)0x20);
    WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v10);
    if (v535)
    {
      v375 = v533;
      v376 = 8 * v535;
      while (1)
      {
        v377 = *v375;
        v542 = 0;
        v379 = (WTF::JSONImpl::Value *)WebCore::InspectorDOMAgent::pushNodePathToFrontend((uint64_t)a2, (WebCore::Node *)&v542, v377);
        if (!v542)
          goto LABEL_722;
        if (*(_DWORD *)v542 != 2)
          break;
        WTF::StringImpl::destroy(v542, v378);
        if ((_DWORD)v379)
        {
LABEL_723:
          WTF::JSONImpl::Value::create(v379);
          v380 = *(unsigned int *)(v10 + 28);
          if ((_DWORD)v380 == *(_DWORD *)(v10 + 24))
          {
            v381 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 16), v380 + 1, (unint64_t)&v542);
            v380 = *(unsigned int *)(v10 + 28);
            v382 = *(_QWORD *)(v10 + 16);
            v383 = *(WTF::StringImpl **)v381;
            *(_QWORD *)v381 = 0;
          }
          else
          {
            v382 = *(_QWORD *)(v10 + 16);
            v383 = v542;
            v542 = 0;
          }
          *(_QWORD *)(v382 + 8 * v380) = v383;
          *(_DWORD *)(v10 + 28) = v380 + 1;
          v384 = v542;
          v542 = 0;
          if (v384)
          {
            if (*(_DWORD *)v384 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v384;
          }
        }
LABEL_729:
        ++v375;
        v376 -= 8;
        if (!v376)
          goto LABEL_735;
      }
      *(_DWORD *)v542 -= 2;
LABEL_722:
      if ((_DWORD)v379)
        goto LABEL_723;
      goto LABEL_729;
    }
  }
  else
  {
    v10 = 0;
  }
LABEL_735:
  if ((*(_WORD *)(a3 + 28) & 8) != 0
    && (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 800))(v520))
  {
    HIDWORD(v505) = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 552))(v520);
    LODWORD(v514) = 1;
  }
  else
  {
    LODWORD(v514) = 0;
    HIDWORD(v505) = 0;
  }
  v521 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 856))(v520);
  HIDWORD(v516) = WebCore::AccessibilityObject::defaultObjectInclusion(v520) == 1;
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 1032))(&v532, v520);
  if ((MEMORY[0x19AEA53F4](v532, "false", 5) & 1) != 0)
  {
    v385 = 131;
  }
  else if ((MEMORY[0x19AEA53F4](v532, "grammar", 7) & 1) != 0)
  {
    v385 = 138;
  }
  else if (MEMORY[0x19AEA53F4](v532, "spelling", 8))
  {
    v385 = 139;
  }
  else
  {
    v385 = 130;
  }
  v517 = v385;
  if (((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 552))(v520) & 1) != 0)
  {
LABEL_750:
    isDOMHidden = WebCore::AccessibilityObject::isDOMHidden(v520);
  }
  else
  {
    v386 = v520;
    while (!WebCore::AccessibilityObject::isARIAHidden(v386))
    {
      v386 = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v386 + 1232))(v386);
      if (!v386)
        goto LABEL_750;
    }
    isDOMHidden = 1;
  }
  WebCore::AccessibilityObject::computedLabel(v520, &v542);
  v388 = v542;
  v542 = 0;
  v389 = v540;
  v540 = v388;
  if (v389)
  {
    v390 = *(_DWORD *)v389 - 2;
    if (*(_DWORD *)v389 != 2)
    {
LABEL_754:
      *(_DWORD *)v389 = v390;
      goto LABEL_755;
    }
    WTF::StringImpl::destroy(v389, v387);
    v389 = v542;
    v542 = 0;
    if (v389)
    {
      v390 = *(_DWORD *)v389 - 2;
      if (*(_DWORD *)v389 != 2)
        goto LABEL_754;
      WTF::StringImpl::destroy(v389, v449);
    }
  }
LABEL_755:
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v520 + 2232))(&v541);
  v392 = v541;
  if (v541)
  {
    if ((*((_BYTE *)v541 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v541 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v541, v391);
      v392 = v542;
    }
  }
  v542 = v392;
  IsEnabled = WebCore::AXCoreObject::liveRegionStatusIsEnabled((uint64_t *)&v542);
  v394 = v542;
  v542 = 0;
  if (v394)
  {
    if (*(_DWORD *)v394 == 2)
      WTF::StringImpl::destroy(v394, v393);
    else
      *(_DWORD *)v394 -= 2;
  }
  v395 = v541;
  v541 = 0;
  if (v395)
  {
    if (*(_DWORD *)v395 == 2)
      WTF::StringImpl::destroy(v395, v393);
    else
      *(_DWORD *)v395 -= 2;
  }
  if (!IsEnabled)
  {
    v525 = 0;
    HIDWORD(v506) = 0;
    v503 = 98;
    goto LABEL_779;
  }
  HIDWORD(v506) = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 2248))(v520);
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 2240))(&v541, v520);
  if (!v541 || !*((_DWORD *)v541 + 1))
  {
    v525 = 0;
    goto LABEL_767;
  }
  Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)0x7F);
  Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)0x80);
  Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)0x81);
  v525 = WTF::fastMalloc((WTF *)0x20);
  WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v525);
  v438 = v541;
  if (!v541)
    goto LABEL_881;
  if ((*((_BYTE *)v541 + 16) & 0x10) != 0)
  {
    *(_DWORD *)v541 += 2;
    v527 = v438;
    goto LABEL_880;
  }
  WTF::AtomStringImpl::addSlowCase(v541, v437);
  v438 = v542;
  v527 = v542;
  if (v542)
  {
LABEL_880:
    if (*((_DWORD *)v438 + 1))
      goto LABEL_1027;
  }
LABEL_881:
  v528 = 0;
  while (1)
  {
    v527 = 0;
    if (v438)
    {
      if (*(_DWORD *)v438 == 2)
        WTF::StringImpl::destroy(v438, v437);
      else
        *(_DWORD *)v438 -= 2;
    }
    WTF::AtomStringImpl::add();
    if (!v528)
    {
      v442 = 0;
      if (!v542)
        goto LABEL_892;
LABEL_890:
      if (*(_DWORD *)v542 == 2)
        WTF::StringImpl::destroy(v542, v439);
      else
        *(_DWORD *)v542 -= 2;
      goto LABEL_892;
    }
    v440 = 0;
    do
    {
      v441 = (WTF::StringImpl *)*((_QWORD *)v528 + v440 + 2);
      v442 = v441 == v542;
      if (v441 == v542)
        break;
      ++v440;
    }
    while (v440 < *((unsigned int *)v528 + 3));
    if (v542)
      goto LABEL_890;
LABEL_892:
    if (v442)
    {
      v443 = (char **)(v525 + 16);
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v531, v439);
      v445 = *(unsigned int *)(v525 + 28);
      if ((_DWORD)v445 == *(_DWORD *)(v525 + 24))
      {
        v446 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v443, v445 + 1, (unint64_t)&v542);
        v445 = *(unsigned int *)(v525 + 28);
        v447 = *(char **)(v525 + 16);
        v448 = *(WTF::StringImpl **)v446;
        *(_QWORD *)v446 = 0;
      }
      else
      {
        v447 = *v443;
        v448 = v542;
        v542 = 0;
      }
      *(_QWORD *)&v447[8 * v445] = v448;
      *(_DWORD *)(v525 + 28) = v445 + 1;
      v460 = v542;
      v542 = 0;
      if (v460)
      {
        if (*(_DWORD *)v460 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v460;
      }
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v530, v444);
      v462 = *(unsigned int *)(v525 + 28);
      if ((_DWORD)v462 == *(_DWORD *)(v525 + 24))
      {
        v463 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v443, v462 + 1, (unint64_t)&v542);
        v462 = *(unsigned int *)(v525 + 28);
        v464 = *(char **)(v525 + 16);
        v465 = *(WTF::StringImpl **)v463;
        *(_QWORD *)v463 = 0;
      }
      else
      {
        v464 = *v443;
        v465 = v542;
        v542 = 0;
      }
      *(_QWORD *)&v464[8 * v462] = v465;
      *(_DWORD *)(v525 + 28) = v462 + 1;
      v466 = v542;
      v542 = 0;
      if (v466)
      {
        if (*(_DWORD *)v466 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v466;
      }
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v529, v461);
      v468 = *(_DWORD *)(v525 + 24);
      v467 = *(unsigned int *)(v525 + 28);
      goto LABEL_965;
    }
    v451 = v531;
    if (v531)
    {
      if ((*((_BYTE *)v531 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v531 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(v531, v439);
        v451 = v542;
      }
    }
    if (v528)
    {
      v452 = 0;
      do
      {
        v453 = (WTF::StringImpl *)*((_QWORD *)v528 + v452 + 2);
        v454 = v453 == v451;
        if (v453 == v451)
          break;
        ++v452;
      }
      while (v452 < *((unsigned int *)v528 + 3));
      if (v451)
      {
LABEL_913:
        if (*(_DWORD *)v451 == 2)
          WTF::StringImpl::destroy(v451, v439);
        else
          *(_DWORD *)v451 -= 2;
      }
    }
    else
    {
      v454 = 0;
      if (v451)
        goto LABEL_913;
    }
    if (v454)
    {
      v455 = (char **)(v525 + 16);
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v531, v439);
      v456 = *(unsigned int *)(v525 + 28);
      if ((_DWORD)v456 == *(_DWORD *)(v525 + 24))
      {
        v457 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v455, v456 + 1, (unint64_t)&v542);
        v456 = *(unsigned int *)(v525 + 28);
        v458 = *(char **)(v525 + 16);
        v459 = *(WTF::StringImpl **)v457;
        *(_QWORD *)v457 = 0;
      }
      else
      {
        v458 = *v455;
        v459 = v542;
        v542 = 0;
      }
      *(_QWORD *)&v458[8 * v456] = v459;
      *(_DWORD *)(v525 + 28) = v456 + 1;
      v469 = v542;
      v542 = 0;
      if (v469)
      {
        if (*(_DWORD *)v469 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v469;
      }
    }
    v470 = v530;
    if (v530)
    {
      if ((*((_BYTE *)v530 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v530 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(v530, v439);
        v470 = v542;
      }
    }
    if (v528)
    {
      v471 = 0;
      do
      {
        v472 = (WTF::StringImpl *)*((_QWORD *)v528 + v471 + 2);
        v473 = v472 == v470;
        if (v472 == v470)
          break;
        ++v471;
      }
      while (v471 < *((unsigned int *)v528 + 3));
      if (v470)
      {
LABEL_944:
        if (*(_DWORD *)v470 == 2)
          WTF::StringImpl::destroy(v470, v439);
        else
          *(_DWORD *)v470 -= 2;
      }
    }
    else
    {
      v473 = 0;
      if (v470)
        goto LABEL_944;
    }
    if (v473)
    {
      v474 = (char **)(v525 + 16);
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v530, v439);
      v475 = *(unsigned int *)(v525 + 28);
      if ((_DWORD)v475 == *(_DWORD *)(v525 + 24))
      {
        v476 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v474, v475 + 1, (unint64_t)&v542);
        v475 = *(unsigned int *)(v525 + 28);
        v477 = *(char **)(v525 + 16);
        v478 = *(WTF::StringImpl **)v476;
        *(_QWORD *)v476 = 0;
      }
      else
      {
        v477 = *v474;
        v478 = v542;
        v542 = 0;
      }
      *(_QWORD *)&v477[8 * v475] = v478;
      *(_DWORD *)(v525 + 28) = v475 + 1;
      v479 = v542;
      v542 = 0;
      if (v479)
      {
        if (*(_DWORD *)v479 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v479;
      }
    }
    v480 = v529;
    if (v529)
    {
      if ((*((_BYTE *)v529 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v529 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(v529, v439);
        v480 = v542;
      }
    }
    if (v528)
    {
      v481 = 0;
      do
      {
        v482 = (WTF::StringImpl *)*((_QWORD *)v528 + v481 + 2);
        v483 = v482 == v480;
        if (v482 == v480)
          break;
        ++v481;
      }
      while (v481 < *((unsigned int *)v528 + 3));
      if (!v480)
        goto LABEL_963;
LABEL_961:
      if (*(_DWORD *)v480 == 2)
        WTF::StringImpl::destroy(v480, v439);
      else
        *(_DWORD *)v480 -= 2;
      goto LABEL_963;
    }
    v483 = 0;
    if (v480)
      goto LABEL_961;
LABEL_963:
    if (!v483)
      goto LABEL_971;
    v443 = (char **)(v525 + 16);
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v529, v439);
    v468 = *(_DWORD *)(v525 + 24);
    v467 = *(unsigned int *)(v525 + 28);
LABEL_965:
    if ((_DWORD)v467 == v468)
    {
      v484 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v443, v467 + 1, (unint64_t)&v542);
      v467 = *(unsigned int *)(v525 + 28);
      v485 = *(char **)(v525 + 16);
      v486 = *(WTF::StringImpl **)v484;
      *(_QWORD *)v484 = 0;
    }
    else
    {
      v485 = *v443;
      v486 = v542;
      v542 = 0;
    }
    *(_QWORD *)&v485[8 * v467] = v486;
    *(_DWORD *)(v525 + 28) = v467 + 1;
    v487 = v542;
    v542 = 0;
    if (v487)
    {
      if (*(_DWORD *)v487 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v487;
    }
LABEL_971:
    v488 = v528;
    v528 = 0;
    if (v488)
    {
      if (*((_DWORD *)v488 + 2) == 1)
        WebCore::SpaceSplitStringData::destroy(v488, v439);
      else
        --*((_DWORD *)v488 + 2);
    }
    v489 = v529;
    v529 = 0;
    if (v489)
    {
      if (*(_DWORD *)v489 == 2)
        WTF::StringImpl::destroy(v489, v439);
      else
        *(_DWORD *)v489 -= 2;
    }
    v490 = v530;
    v530 = 0;
    if (v490)
    {
      if (*(_DWORD *)v490 == 2)
        WTF::StringImpl::destroy(v490, v439);
      else
        *(_DWORD *)v490 -= 2;
    }
    v491 = v531;
    v531 = 0;
    if (v491)
    {
      if (*(_DWORD *)v491 == 2)
        WTF::StringImpl::destroy(v491, v439);
      else
        *(_DWORD *)v491 -= 2;
    }
LABEL_767:
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v520 + 2232))(&v542);
    if ((MEMORY[0x19AEA53F4](v542, "assertive", 9) & 1) != 0)
    {
      v397 = 140;
    }
    else if (MEMORY[0x19AEA53F4](v542, "polite", 6))
    {
      v397 = 141;
    }
    else
    {
      v397 = 98;
    }
    v503 = v397;
    v398 = v542;
    v542 = 0;
    if (v398)
    {
      if (*(_DWORD *)v398 == 2)
        WTF::StringImpl::destroy(v398, v396);
      else
        *(_DWORD *)v398 -= 2;
    }
    v399 = v541;
    v541 = 0;
    if (v399)
    {
      if (*(_DWORD *)v399 == 2)
        WTF::StringImpl::destroy(v399, v396);
      else
        *(_DWORD *)v399 -= 2;
    }
LABEL_779:
    if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 2672))(v520))
      v510 = (WebCore::InspectorDOMAgent *)WebCore::AccessibilityNodeObject::mouseButtonListener((uint64_t)v520, 2);
    else
      v510 = 0;
    if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 976))(v520))
    {
      WebCore::AccessibilityObject::elementsFromAttribute(v520, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_ownsAttr, (WTF::StringImpl *)&v542);
      if (!v544)
      {
        v11 = 0;
        goto LABEL_812;
      }
      v11 = WTF::fastMalloc((WTF *)0x20);
      WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v11);
      v401 = v542;
      if (v544)
      {
        v402 = 8 * v544;
        while (1)
        {
          v403 = *(WebCore::InspectorDOMAgent **)v401;
          v541 = 0;
          v404 = (WTF::JSONImpl::Value *)WebCore::InspectorDOMAgent::pushNodePathToFrontend((uint64_t)a2, (WebCore::Node *)&v541, v403);
          if (!v541)
            goto LABEL_789;
          if (*(_DWORD *)v541 != 2)
            break;
          WTF::StringImpl::destroy(v541, v400);
          if ((_DWORD)v404)
          {
LABEL_790:
            WTF::JSONImpl::Value::create(v404);
            v405 = *(unsigned int *)(v11 + 28);
            if ((_DWORD)v405 == *(_DWORD *)(v11 + 24))
            {
              v406 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v11 + 16), v405 + 1, (unint64_t)&v541);
              v405 = *(unsigned int *)(v11 + 28);
              v407 = *(_QWORD *)(v11 + 16);
              v408 = *(WTF::StringImpl **)v406;
              *(_QWORD *)v406 = 0;
            }
            else
            {
              v407 = *(_QWORD *)(v11 + 16);
              v408 = v541;
              v541 = 0;
            }
            *(_QWORD *)(v407 + 8 * v405) = v408;
            *(_DWORD *)(v11 + 28) = v405 + 1;
            v409 = v541;
            v541 = 0;
            if (v409)
            {
              if (*(_DWORD *)v409 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v409;
            }
          }
LABEL_796:
          v401 = (WTF::StringImpl *)((char *)v401 + 8);
          v402 -= 8;
          if (!v402)
          {
            v401 = v542;
            if (v544)
            {
              v410 = 8 * v544;
              do
              {
                v411 = *(WebCore::InspectorDOMAgent **)v401;
                *(_QWORD *)v401 = 0;
                if (v411)
                {
                  if (*((_DWORD *)v411 + 6) == 2)
                  {
                    if ((*((_WORD *)v411 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v411, v400);
                  }
                  else
                  {
                    *((_DWORD *)v411 + 6) -= 2;
                  }
                }
                v401 = (WTF::StringImpl *)((char *)v401 + 8);
                v410 -= 8;
              }
              while (v410);
LABEL_812:
              v401 = v542;
            }
            goto LABEL_813;
          }
        }
        *(_DWORD *)v541 -= 2;
LABEL_789:
        if ((_DWORD)v404)
          goto LABEL_790;
        goto LABEL_796;
      }
LABEL_813:
      if (v401)
      {
        v542 = 0;
        v543 = 0;
        WTF::fastFree(v401, v400);
      }
    }
    else
    {
      v11 = 0;
    }
    v412 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 1240))(v520);
    if (v412)
      v511 = (WebCore::InspectorDOMAgent *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v412 + 840))(v412);
    else
      v511 = 0;
    v512 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 1024))(v520);
    if (v512)
      v504 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 600))(v520);
    else
      v504 = 0;
    v413 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 1456))(v520);
    if ((v413 - 101) <= 0x19 && ((1 << (v413 - 101)) & 0x3000001) != 0 || v413 == 19)
      LODWORD(v513) = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 808))(v520) ^ 1;
    else
      LODWORD(v513) = 0;
    HIDWORD(v514) = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 624))(v520);
    if (HIDWORD(v514))
      LODWORD(v506) = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 616))(v520);
    else
      LODWORD(v506) = 0;
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v520 + 2192))(&v542);
    v417 = v542;
    v542 = 0;
    v418 = v539;
    v539 = v417;
    if (v418)
    {
      v419 = *(_DWORD *)v418 - 2;
      if (*(_DWORD *)v418 == 2)
      {
        WTF::StringImpl::destroy(v418, v416);
        v418 = v542;
        v542 = 0;
        if (!v418)
          goto LABEL_836;
        v419 = *(_DWORD *)v418 - 2;
        if (*(_DWORD *)v418 == 2)
        {
          WTF::StringImpl::destroy(v418, v450);
          goto LABEL_836;
        }
      }
      *(_DWORD *)v418 = v419;
    }
LABEL_836:
    LODWORD(v515) = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 544))(v520);
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 1928))(&v542, v520);
    if (!v545 || !v544)
    {
      v524 = 0;
      goto LABEL_858;
    }
    v524 = WTF::fastMalloc((WTF *)0x20);
    WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v524);
    if (v545)
      break;
    __break(1u);
LABEL_1027:
    WTF::AtomString::convertToASCIILowercase((WTF::AtomString *)&v527);
    WebCore::SpaceSplitStringData::create((WebCore::SpaceSplitStringData *)&v542, v498, &v528);
    v499 = v542;
    v542 = 0;
    if (v499)
    {
      if (*(_DWORD *)v499 == 2)
        WTF::StringImpl::destroy(v499, v437);
      else
        *(_DWORD *)v499 -= 2;
    }
    v438 = v527;
  }
  if (v544)
  {
    v420 = v542;
    v421 = (char **)(v524 + 16);
    v422 = 8 * v544;
    while (1)
    {
      v423 = (WebCore::InspectorDOMAgent *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)v420 + 840))(*(_QWORD *)v420);
      if (!v423)
        goto LABEL_852;
      v541 = 0;
      v425 = (WTF::JSONImpl::Value *)WebCore::InspectorDOMAgent::pushNodePathToFrontend((uint64_t)a2, (WebCore::Node *)&v541, v423);
      if (!v541)
        goto LABEL_845;
      if (*(_DWORD *)v541 != 2)
        break;
      WTF::StringImpl::destroy(v541, v424);
      if ((_DWORD)v425)
      {
LABEL_846:
        WTF::JSONImpl::Value::create(v425);
        v426 = *(unsigned int *)(v524 + 28);
        if ((_DWORD)v426 == *(_DWORD *)(v524 + 24))
        {
          v427 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v421, v426 + 1, (unint64_t)&v541);
          v426 = *(unsigned int *)(v524 + 28);
          v428 = *(char **)(v524 + 16);
          v429 = *(WTF::StringImpl **)v427;
          *(_QWORD *)v427 = 0;
        }
        else
        {
          v428 = *v421;
          v429 = v541;
          v541 = 0;
        }
        *(_QWORD *)&v428[8 * v426] = v429;
        *(_DWORD *)(v524 + 28) = v426 + 1;
        v430 = v541;
        v541 = 0;
        if (v430)
        {
          if (*(_DWORD *)v430 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v430;
        }
      }
LABEL_852:
      v420 = (WTF::StringImpl *)((char *)v420 + 8);
      v422 -= 8;
      if (!v422)
        goto LABEL_858;
    }
    *(_DWORD *)v541 -= 2;
LABEL_845:
    if ((_DWORD)v425)
      goto LABEL_846;
    goto LABEL_852;
  }
LABEL_858:
  v431 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 872))(v520);
  v432 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 1744))(v520);
  if (v432)
    v433 = v432;
  else
    v433 = v431;
  HIDWORD(v515) = v433;
  LODWORD(v516) = v431;
  if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v520 + 1456))(v520) == 84)
    hasPopup = 1;
  else
    hasPopup = WebCore::AXCoreObject::hasPopup(v520);
  if (v545)
    WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v542, v434);
  v435 = v532;
  v532 = 0;
  if (v435)
  {
    if (*(_DWORD *)v435 == 2)
      WTF::StringImpl::destroy(v435, (WTF::StringImpl *)v434);
    else
      *(_DWORD *)v435 -= 2;
  }
  if (v535)
  {
    v492 = (WTF::StringImpl *)v533;
    v493 = 8 * v535;
    do
    {
      v494 = *(_QWORD *)v492;
      *(_QWORD *)v492 = 0;
      if (v494)
      {
        if (*(_DWORD *)(v494 + 24) == 2)
        {
          if ((*(_WORD *)(v494 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v494, v434);
        }
        else
        {
          *(_DWORD *)(v494 + 24) -= 2;
        }
      }
      v492 = (WTF::StringImpl *)((char *)v492 + 8);
      v493 -= 8;
    }
    while (v493);
  }
  v436 = (WTF *)v533;
  if (v533)
  {
    v533 = 0;
    v534 = 0;
    WTF::fastFree(v436, v434);
  }
  if (v538)
  {
    v495 = (WebCore::AXObjectCache *)v536;
    v496 = 8 * v538;
    do
    {
      v497 = *(_QWORD *)v495;
      *(_QWORD *)v495 = 0;
      if (v497)
      {
        if (*(_DWORD *)(v497 + 24) == 2)
        {
          if ((*(_WORD *)(v497 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v497, v434);
        }
        else
        {
          *(_DWORD *)(v497 + 24) -= 2;
        }
      }
      v495 = (WebCore::AXObjectCache *)((char *)v495 + 8);
      v496 -= 8;
    }
    while (v496);
  }
  v12 = v500 ^ 1;
  v6 = (WTF *)v536;
  if (v536)
  {
    v536 = 0;
    v537 = 0;
    v6 = (WTF *)WTF::fastFree(v6, v434);
  }
  v13 = 1;
LABEL_6:
  WTF::JSONImpl::Object::create(v6);
  v14 = v542;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)v13);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v14 + 2, (WTF::StringImpl **)&v533, (const WTF::StringImpl *)&v536, (uint64_t)&v542);
  if (v545)
  {
    v16 = (uint64_t *)((char *)v14 + 24);
    v17 = *((unsigned int *)v14 + 9);
    if ((_DWORD)v17 == *((_DWORD *)v14 + 8))
    {
      v252 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v16, v17 + 1, (unint64_t)&v533);
      v17 = *((unsigned int *)v14 + 9);
      v253 = *((_QWORD *)v14 + 3);
      v254 = *v252;
      if (*v252)
        *v254 += 2;
      *(_QWORD *)(v253 + 8 * v17) = v254;
    }
    else
    {
      v18 = *v16;
      v19 = (WTF::StringImpl *)v533;
      if (v533)
        *(_DWORD *)v533 += 2;
      *(_QWORD *)(v18 + 8 * v17) = v19;
    }
    *((_DWORD *)v14 + 9) = v17 + 1;
  }
  v20 = (WebCore::AXObjectCache *)v536;
  v536 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v20;
  }
  v21 = (WTF::StringImpl *)v533;
  v533 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v15);
    else
      *(_DWORD *)v21 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v540, v22);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v14 + 2, (WTF::StringImpl **)&v533, (const WTF::StringImpl *)&v536, (uint64_t)&v542);
  if (v545)
  {
    v24 = (uint64_t *)((char *)v14 + 24);
    v25 = *((unsigned int *)v14 + 9);
    if ((_DWORD)v25 == *((_DWORD *)v14 + 8))
    {
      v255 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v24, v25 + 1, (unint64_t)&v533);
      v25 = *((unsigned int *)v14 + 9);
      v256 = *((_QWORD *)v14 + 3);
      v257 = *v255;
      if (*v255)
        *v257 += 2;
      *(_QWORD *)(v256 + 8 * v25) = v257;
    }
    else
    {
      v26 = *v24;
      v27 = (WTF::StringImpl *)v533;
      if (v533)
        *(_DWORD *)v533 += 2;
      *(_QWORD *)(v26 + 8 * v25) = v27;
    }
    *((_DWORD *)v14 + 9) = v25 + 1;
  }
  v28 = (WebCore::AXObjectCache *)v536;
  v536 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v28;
  }
  v29 = (WTF::StringImpl *)v533;
  v533 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v23);
    else
      *(_DWORD *)v29 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v539, v30);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v14 + 2, (WTF::StringImpl **)&v533, (const WTF::StringImpl *)&v536, (uint64_t)&v542);
  if (v545)
  {
    v32 = (uint64_t *)((char *)v14 + 24);
    v33 = *((unsigned int *)v14 + 9);
    if ((_DWORD)v33 == *((_DWORD *)v14 + 8))
    {
      v258 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v32, v33 + 1, (unint64_t)&v533);
      v33 = *((unsigned int *)v14 + 9);
      v259 = *((_QWORD *)v14 + 3);
      v260 = *v258;
      if (*v258)
        *v260 += 2;
      *(_QWORD *)(v259 + 8 * v33) = v260;
    }
    else
    {
      v34 = *v32;
      v35 = (WTF::StringImpl *)v533;
      if (v533)
        *(_DWORD *)v533 += 2;
      *(_QWORD *)(v34 + 8 * v33) = v35;
    }
    *((_DWORD *)v14 + 9) = v33 + 1;
  }
  v36 = (WebCore::AXObjectCache *)v536;
  v536 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v36;
  }
  v37 = (WTF::StringImpl *)v533;
  v533 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v31);
    else
      *(_DWORD *)v37 -= 2;
  }
  v542 = 0;
  v39 = (WTF::JSONImpl::Value *)WebCore::InspectorDOMAgent::pushNodePathToFrontend((uint64_t)a2, (WebCore::Node *)&v542, (WebCore::InspectorDOMAgent *)a3);
  if (v542)
  {
    if (*(_DWORD *)v542 == 2)
      WTF::StringImpl::destroy(v542, v38);
    else
      *(_DWORD *)v542 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v39);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v14 + 2, (WTF::StringImpl **)&v533, (const WTF::StringImpl *)&v536, (uint64_t)&v542);
  if (v545)
  {
    v41 = (uint64_t *)((char *)v14 + 24);
    v42 = *((unsigned int *)v14 + 9);
    if ((_DWORD)v42 == *((_DWORD *)v14 + 8))
    {
      v261 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v533);
      v42 = *((unsigned int *)v14 + 9);
      v262 = *((_QWORD *)v14 + 3);
      v263 = *v261;
      if (*v261)
        *v263 += 2;
      *(_QWORD *)(v262 + 8 * v42) = v263;
    }
    else
    {
      v43 = *v41;
      v44 = (WTF::StringImpl *)v533;
      if (v533)
        *(_DWORD *)v533 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *((_DWORD *)v14 + 9) = v42 + 1;
  }
  v45 = (WebCore::AXObjectCache *)v536;
  v536 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v45;
  }
  v46 = (WTF::StringImpl *)v533;
  v533 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v40);
    else
      *(_DWORD *)v46 -= 2;
  }
  *(_QWORD *)this = v14;
  if ((_DWORD)v13)
  {
    if (!v507)
      goto LABEL_75;
    v542 = 0;
    v47 = (WTF::JSONImpl::Value *)WebCore::InspectorDOMAgent::pushNodePathToFrontend((uint64_t)a2, (WebCore::Node *)&v542, v507);
    if (v542)
    {
      if (*(_DWORD *)v542 == 2)
      {
        WTF::StringImpl::destroy(v542, v40);
        if (!(_DWORD)v47)
          goto LABEL_75;
        goto LABEL_63;
      }
      *(_DWORD *)v542 -= 2;
    }
    if (!(_DWORD)v47)
      goto LABEL_75;
LABEL_63:
    v48 = *(_QWORD *)this;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v47);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v48 + 16), (WTF::StringImpl **)&v533, (const WTF::StringImpl *)&v536, (uint64_t)&v542);
    if (v545)
    {
      v49 = (uint64_t *)(v48 + 24);
      v50 = *(unsigned int *)(v48 + 36);
      if ((_DWORD)v50 == *(_DWORD *)(v48 + 32))
      {
        v333 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v49, v50 + 1, (unint64_t)&v533);
        v50 = *(unsigned int *)(v48 + 36);
        v334 = *(_QWORD *)(v48 + 24);
        v335 = *v333;
        if (*v333)
          *v335 += 2;
        *(_QWORD *)(v334 + 8 * v50) = v335;
      }
      else
      {
        v51 = *v49;
        v52 = (WTF::StringImpl *)v533;
        if (v533)
          *(_DWORD *)v533 += 2;
        *(_QWORD *)(v51 + 8 * v50) = v52;
      }
      *(_DWORD *)(v48 + 36) = v50 + 1;
    }
    v53 = (WebCore::AXObjectCache *)v536;
    v536 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v53;
    }
    v54 = (WTF::StringImpl *)v533;
    v533 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, v40);
      else
        *(_DWORD *)v54 -= 2;
    }
LABEL_75:
    if (v523)
    {
      v55 = *(_QWORD *)this;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v55 + 16), (WTF::StringImpl **)&v533, (const WTF::StringImpl *)&v536, (uint64_t)&v542);
      if (v545)
      {
        v56 = (uint64_t *)(v55 + 24);
        v57 = *(unsigned int *)(v55 + 36);
        if ((_DWORD)v57 == *(_DWORD *)(v55 + 32))
        {
          v285 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v56, v57 + 1, (unint64_t)&v533);
          v57 = *(unsigned int *)(v55 + 36);
          v286 = *(_QWORD *)(v55 + 24);
          v287 = *v285;
          if (*v285)
            *v287 += 2;
          *(_QWORD *)(v286 + 8 * v57) = v287;
        }
        else
        {
          v58 = *v56;
          v59 = (WTF::StringImpl *)v533;
          if (v533)
            *(_DWORD *)v533 += 2;
          *(_QWORD *)(v58 + 8 * v57) = v59;
        }
        *(_DWORD *)(v55 + 36) = v57 + 1;
      }
      v60 = (WebCore::AXObjectCache *)v536;
      v536 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v60;
      }
      v61 = (WTF::StringImpl *)v533;
      v533 = 0;
      if (v61)
      {
        if (*(_DWORD *)v61 == 2)
          WTF::StringImpl::destroy(v61, v40);
        else
          *(_DWORD *)v61 -= 2;
      }
    }
    if (v508)
    {
      v62 = *(_QWORD *)this;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v63 = HIDWORD(v501);
    }
    else
    {
      if (!v502)
        goto LABEL_110;
      v62 = *(_QWORD *)this;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v63 = v501;
    }
    Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)v63);
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v541, v64);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v62 + 16), (WTF::StringImpl **)&v533, (const WTF::StringImpl *)&v536, (uint64_t)&v542);
    if (v545)
    {
      v65 = (uint64_t *)(v62 + 24);
      v66 = *(unsigned int *)(v62 + 36);
      if ((_DWORD)v66 == *(_DWORD *)(v62 + 32))
      {
        v267 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v65, v66 + 1, (unint64_t)&v533);
        v66 = *(unsigned int *)(v62 + 36);
        v268 = *(_QWORD *)(v62 + 24);
        v269 = *v267;
        if (*v267)
          *v269 += 2;
        *(_QWORD *)(v268 + 8 * v66) = v269;
      }
      else
      {
        v67 = *v65;
        v68 = (WTF::StringImpl *)v533;
        if (v533)
          *(_DWORD *)v533 += 2;
        *(_QWORD *)(v67 + 8 * v66) = v68;
      }
      *(_DWORD *)(v62 + 36) = v66 + 1;
    }
    v69 = (WebCore::AXObjectCache *)v536;
    v536 = 0;
    if (v69)
    {
      if (*(_DWORD *)v69 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v69;
    }
    v70 = v541;
    v541 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
        WTF::StringImpl::destroy(v70, v40);
      else
        *(_DWORD *)v70 -= 2;
    }
    v71 = (WTF::StringImpl *)v533;
    v533 = 0;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2)
      {
        WTF::StringImpl::destroy(v71, v40);
        if (!v8)
          goto LABEL_123;
        goto LABEL_111;
      }
      *(_DWORD *)v71 -= 2;
    }
LABEL_110:
    if (!v8)
      goto LABEL_123;
LABEL_111:
    v72 = *(_QWORD *)this;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v533 = (WebCore::InspectorDOMAgent **)v8;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v72 + 16), (WTF::StringImpl **)&v536, (const WTF::StringImpl *)&v533, (uint64_t)&v542);
    if (v545)
    {
      v73 = (uint64_t *)(v72 + 24);
      v74 = *(unsigned int *)(v72 + 36);
      if ((_DWORD)v74 == *(_DWORD *)(v72 + 32))
      {
        v270 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v73, v74 + 1, (unint64_t)&v536);
        v74 = *(unsigned int *)(v72 + 36);
        v271 = *(_QWORD *)(v72 + 24);
        v272 = *v270;
        if (*v270)
          *v272 += 2;
        *(_QWORD *)(v271 + 8 * v74) = v272;
      }
      else
      {
        v75 = *v73;
        v76 = (WebCore::AXObjectCache *)v536;
        if (v536)
          *(_DWORD *)v536 += 2;
        *(_QWORD *)(v75 + 8 * v74) = v76;
      }
      *(_DWORD *)(v72 + 36) = v74 + 1;
    }
    v77 = (WTF::StringImpl *)v533;
    v533 = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v77;
    }
    v78 = (WTF::StringImpl *)v536;
    v536 = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        WTF::StringImpl::destroy(v78, v40);
      else
        *(_DWORD *)v78 -= 2;
    }
LABEL_123:
    if (v9)
    {
      v79 = *(_QWORD *)this;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v533 = (WebCore::InspectorDOMAgent **)v9;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v79 + 16), (WTF::StringImpl **)&v536, (const WTF::StringImpl *)&v533, (uint64_t)&v542);
      if (v545)
      {
        v80 = (uint64_t *)(v79 + 24);
        v81 = *(unsigned int *)(v79 + 36);
        if ((_DWORD)v81 == *(_DWORD *)(v79 + 32))
        {
          v273 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v80, v81 + 1, (unint64_t)&v536);
          v81 = *(unsigned int *)(v79 + 36);
          v274 = *(_QWORD *)(v79 + 24);
          v275 = *v273;
          if (*v273)
            *v275 += 2;
          *(_QWORD *)(v274 + 8 * v81) = v275;
        }
        else
        {
          v82 = *v80;
          v83 = (WebCore::AXObjectCache *)v536;
          if (v536)
            *(_DWORD *)v536 += 2;
          *(_QWORD *)(v82 + 8 * v81) = v83;
        }
        *(_DWORD *)(v79 + 36) = v81 + 1;
      }
      v84 = (WTF::StringImpl *)v533;
      v533 = 0;
      if (v84)
      {
        if (*(_DWORD *)v84 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v84;
      }
      v85 = (WTF::StringImpl *)v536;
      v536 = 0;
      if (v85)
      {
        if (*(_DWORD *)v85 == 2)
          WTF::StringImpl::destroy(v85, v40);
        else
          *(_DWORD *)v85 -= 2;
      }
    }
    if (v509 != 131)
    {
      v86 = *(_QWORD *)this;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)v509);
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v541, v87);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v86 + 16), (WTF::StringImpl **)&v533, (const WTF::StringImpl *)&v536, (uint64_t)&v542);
      if (v545)
      {
        v88 = (uint64_t *)(v86 + 24);
        v89 = *(unsigned int *)(v86 + 36);
        if ((_DWORD)v89 == *(_DWORD *)(v86 + 32))
        {
          v288 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v88, v89 + 1, (unint64_t)&v533);
          v89 = *(unsigned int *)(v86 + 36);
          v289 = *(_QWORD *)(v86 + 24);
          v290 = *v288;
          if (*v288)
            *v290 += 2;
          *(_QWORD *)(v289 + 8 * v89) = v290;
        }
        else
        {
          v90 = *v88;
          v91 = (WTF::StringImpl *)v533;
          if (v533)
            *(_DWORD *)v533 += 2;
          *(_QWORD *)(v90 + 8 * v89) = v91;
        }
        *(_DWORD *)(v86 + 36) = v89 + 1;
      }
      v92 = (WebCore::AXObjectCache *)v536;
      v536 = 0;
      if (v92)
      {
        if (*(_DWORD *)v92 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v92;
      }
      v93 = v541;
      v541 = 0;
      if (v93)
      {
        if (*(_DWORD *)v93 == 2)
          WTF::StringImpl::destroy(v93, v40);
        else
          *(_DWORD *)v93 -= 2;
      }
      v94 = (WTF::StringImpl *)v533;
      v533 = 0;
      if (v94)
      {
        if (*(_DWORD *)v94 == 2)
        {
          WTF::StringImpl::destroy(v94, v40);
          if (!v12)
            goto LABEL_165;
LABEL_153:
          v95 = *(_QWORD *)this;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v95 + 16), (WTF::StringImpl **)&v533, (const WTF::StringImpl *)&v536, (uint64_t)&v542);
          if (v545)
          {
            v96 = (uint64_t *)(v95 + 24);
            v97 = *(unsigned int *)(v95 + 36);
            if ((_DWORD)v97 == *(_DWORD *)(v95 + 32))
            {
              v291 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v96, v97 + 1, (unint64_t)&v533);
              v97 = *(unsigned int *)(v95 + 36);
              v292 = *(_QWORD *)(v95 + 24);
              v293 = *v291;
              if (*v291)
                *v293 += 2;
              *(_QWORD *)(v292 + 8 * v97) = v293;
            }
            else
            {
              v98 = *v96;
              v99 = (WTF::StringImpl *)v533;
              if (v533)
                *(_DWORD *)v533 += 2;
              *(_QWORD *)(v98 + 8 * v97) = v99;
            }
            *(_DWORD *)(v95 + 36) = v97 + 1;
          }
          v100 = (WebCore::AXObjectCache *)v536;
          v536 = 0;
          if (v100)
          {
            if (*(_DWORD *)v100 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v100;
          }
          v101 = (WTF::StringImpl *)v533;
          v533 = 0;
          if (v101)
          {
            if (*(_DWORD *)v101 == 2)
              WTF::StringImpl::destroy(v101, v40);
            else
              *(_DWORD *)v101 -= 2;
          }
LABEL_165:
          if (HIDWORD(v513))
          {
            v102 = *(_QWORD *)this;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)v505);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v102 + 16), (WTF::StringImpl **)&v533, (const WTF::StringImpl *)&v536, (uint64_t)&v542);
            if (v545)
            {
              v103 = (uint64_t *)(v102 + 24);
              v104 = *(unsigned int *)(v102 + 36);
              if ((_DWORD)v104 == *(_DWORD *)(v102 + 32))
              {
                v294 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v103, v104 + 1, (unint64_t)&v533);
                v104 = *(unsigned int *)(v102 + 36);
                v295 = *(_QWORD *)(v102 + 24);
                v296 = *v294;
                if (*v294)
                  *v296 += 2;
                *(_QWORD *)(v295 + 8 * v104) = v296;
              }
              else
              {
                v105 = *v103;
                v106 = (WTF::StringImpl *)v533;
                if (v533)
                  *(_DWORD *)v533 += 2;
                *(_QWORD *)(v105 + 8 * v104) = v106;
              }
              *(_DWORD *)(v102 + 36) = v104 + 1;
            }
            v107 = (WebCore::AXObjectCache *)v536;
            v536 = 0;
            if (v107)
            {
              if (*(_DWORD *)v107 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v107;
            }
            v108 = (WTF::StringImpl *)v533;
            v533 = 0;
            if (v108)
            {
              if (*(_DWORD *)v108 == 2)
              {
                WTF::StringImpl::destroy(v108, v40);
                if (!v10)
                  goto LABEL_191;
                goto LABEL_179;
              }
              *(_DWORD *)v108 -= 2;
            }
          }
          if (!v10)
            goto LABEL_191;
LABEL_179:
          v109 = *(_QWORD *)this;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v533 = (WebCore::InspectorDOMAgent **)v10;
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v109 + 16), (WTF::StringImpl **)&v536, (const WTF::StringImpl *)&v533, (uint64_t)&v542);
          if (v545)
          {
            v110 = (uint64_t *)(v109 + 24);
            v111 = *(unsigned int *)(v109 + 36);
            if ((_DWORD)v111 == *(_DWORD *)(v109 + 32))
            {
              v276 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v110, v111 + 1, (unint64_t)&v536);
              v111 = *(unsigned int *)(v109 + 36);
              v277 = *(_QWORD *)(v109 + 24);
              v278 = *v276;
              if (*v276)
                *v278 += 2;
              *(_QWORD *)(v277 + 8 * v111) = v278;
            }
            else
            {
              v112 = *v110;
              v113 = (WebCore::AXObjectCache *)v536;
              if (v536)
                *(_DWORD *)v536 += 2;
              *(_QWORD *)(v112 + 8 * v111) = v113;
            }
            *(_DWORD *)(v109 + 36) = v111 + 1;
          }
          v114 = (WTF::StringImpl *)v533;
          v533 = 0;
          if (v114)
          {
            if (*(_DWORD *)v114 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v114;
          }
          v115 = (WTF::StringImpl *)v536;
          v536 = 0;
          if (v115)
          {
            if (*(_DWORD *)v115 == 2)
              WTF::StringImpl::destroy(v115, v40);
            else
              *(_DWORD *)v115 -= 2;
          }
LABEL_191:
          if ((_DWORD)v514)
          {
            v116 = *(_QWORD *)this;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)HIDWORD(v505));
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v116 + 16), (WTF::StringImpl **)&v533, (const WTF::StringImpl *)&v536, (uint64_t)&v542);
            if (v545)
            {
              v117 = (uint64_t *)(v116 + 24);
              v118 = *(unsigned int *)(v116 + 36);
              if ((_DWORD)v118 == *(_DWORD *)(v116 + 32))
              {
                v297 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v117, v118 + 1, (unint64_t)&v533);
                v118 = *(unsigned int *)(v116 + 36);
                v298 = *(_QWORD *)(v116 + 24);
                v299 = *v297;
                if (*v297)
                  *v299 += 2;
                *(_QWORD *)(v298 + 8 * v118) = v299;
              }
              else
              {
                v119 = *v117;
                v120 = (WTF::StringImpl *)v533;
                if (v533)
                  *(_DWORD *)v533 += 2;
                *(_QWORD *)(v119 + 8 * v118) = v120;
              }
              *(_DWORD *)(v116 + 36) = v118 + 1;
            }
            v121 = (WebCore::AXObjectCache *)v536;
            v536 = 0;
            if (v121)
            {
              if (*(_DWORD *)v121 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v121;
            }
            v122 = (WTF::StringImpl *)v533;
            v533 = 0;
            if (v122)
            {
              if (*(_DWORD *)v122 == 2)
                WTF::StringImpl::destroy(v122, v40);
              else
                *(_DWORD *)v122 -= 2;
            }
          }
          if (v521)
          {
            v123 = *(_QWORD *)this;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v123 + 16), (WTF::StringImpl **)&v533, (const WTF::StringImpl *)&v536, (uint64_t)&v542);
            if (v545)
            {
              v124 = (uint64_t *)(v123 + 24);
              v125 = *(unsigned int *)(v123 + 36);
              if ((_DWORD)v125 == *(_DWORD *)(v123 + 32))
              {
                v300 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v124, v125 + 1, (unint64_t)&v533);
                v125 = *(unsigned int *)(v123 + 36);
                v301 = *(_QWORD *)(v123 + 24);
                v302 = *v300;
                if (*v300)
                  *v302 += 2;
                *(_QWORD *)(v301 + 8 * v125) = v302;
              }
              else
              {
                v126 = *v124;
                v127 = (WTF::StringImpl *)v533;
                if (v533)
                  *(_DWORD *)v533 += 2;
                *(_QWORD *)(v126 + 8 * v125) = v127;
              }
              *(_DWORD *)(v123 + 36) = v125 + 1;
            }
            v128 = (WebCore::AXObjectCache *)v536;
            v536 = 0;
            if (v128)
            {
              if (*(_DWORD *)v128 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v128;
            }
            v129 = (WTF::StringImpl *)v533;
            v533 = 0;
            if (v129)
            {
              if (*(_DWORD *)v129 == 2)
                WTF::StringImpl::destroy(v129, v40);
              else
                *(_DWORD *)v129 -= 2;
            }
          }
          if (HIDWORD(v516))
          {
            v130 = *(_QWORD *)this;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v130 + 16), (WTF::StringImpl **)&v533, (const WTF::StringImpl *)&v536, (uint64_t)&v542);
            if (v545)
            {
              v131 = (uint64_t *)(v130 + 24);
              v132 = *(unsigned int *)(v130 + 36);
              if ((_DWORD)v132 == *(_DWORD *)(v130 + 32))
              {
                v303 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v131, v132 + 1, (unint64_t)&v533);
                v132 = *(unsigned int *)(v130 + 36);
                v304 = *(_QWORD *)(v130 + 24);
                v305 = *v303;
                if (*v303)
                  *v305 += 2;
                *(_QWORD *)(v304 + 8 * v132) = v305;
              }
              else
              {
                v133 = *v131;
                v134 = (WTF::StringImpl *)v533;
                if (v533)
                  *(_DWORD *)v533 += 2;
                *(_QWORD *)(v133 + 8 * v132) = v134;
              }
              *(_DWORD *)(v130 + 36) = v132 + 1;
            }
            v135 = (WebCore::AXObjectCache *)v536;
            v536 = 0;
            if (v135)
            {
              if (*(_DWORD *)v135 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v135;
            }
            v136 = (WTF::StringImpl *)v533;
            v533 = 0;
            if (v136)
            {
              if (*(_DWORD *)v136 == 2)
                WTF::StringImpl::destroy(v136, v40);
              else
                *(_DWORD *)v136 -= 2;
            }
          }
          if (v517 != 131)
          {
            v137 = *(_QWORD *)this;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)v517);
            WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v541, v138);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v137 + 16), (WTF::StringImpl **)&v533, (const WTF::StringImpl *)&v536, (uint64_t)&v542);
            if (v545)
            {
              v139 = (uint64_t *)(v137 + 24);
              v140 = *(unsigned int *)(v137 + 36);
              if ((_DWORD)v140 == *(_DWORD *)(v137 + 32))
              {
                v306 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v139, v140 + 1, (unint64_t)&v533);
                v140 = *(unsigned int *)(v137 + 36);
                v307 = *(_QWORD *)(v137 + 24);
                v308 = *v306;
                if (*v306)
                  *v308 += 2;
                *(_QWORD *)(v307 + 8 * v140) = v308;
              }
              else
              {
                v141 = *v139;
                v142 = (WTF::StringImpl *)v533;
                if (v533)
                  *(_DWORD *)v533 += 2;
                *(_QWORD *)(v141 + 8 * v140) = v142;
              }
              *(_DWORD *)(v137 + 36) = v140 + 1;
            }
            v143 = (WebCore::AXObjectCache *)v536;
            v536 = 0;
            if (v143)
            {
              if (*(_DWORD *)v143 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v143;
            }
            v144 = v541;
            v541 = 0;
            if (v144)
            {
              if (*(_DWORD *)v144 == 2)
                WTF::StringImpl::destroy(v144, v40);
              else
                *(_DWORD *)v144 -= 2;
            }
            v145 = (WTF::StringImpl *)v533;
            v533 = 0;
            if (v145)
            {
              if (*(_DWORD *)v145 == 2)
                WTF::StringImpl::destroy(v145, v40);
              else
                *(_DWORD *)v145 -= 2;
            }
          }
          if (isDOMHidden)
          {
            v146 = *(_QWORD *)this;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v146 + 16), (WTF::StringImpl **)&v533, (const WTF::StringImpl *)&v536, (uint64_t)&v542);
            if (v545)
            {
              v147 = (uint64_t *)(v146 + 24);
              v148 = *(unsigned int *)(v146 + 36);
              if ((_DWORD)v148 == *(_DWORD *)(v146 + 32))
              {
                v309 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v147, v148 + 1, (unint64_t)&v533);
                v148 = *(unsigned int *)(v146 + 36);
                v310 = *(_QWORD *)(v146 + 24);
                v311 = *v309;
                if (*v309)
                  *v311 += 2;
                *(_QWORD *)(v310 + 8 * v148) = v311;
              }
              else
              {
                v149 = *v147;
                v150 = (WTF::StringImpl *)v533;
                if (v533)
                  *(_DWORD *)v533 += 2;
                *(_QWORD *)(v149 + 8 * v148) = v150;
              }
              *(_DWORD *)(v146 + 36) = v148 + 1;
            }
            v151 = (WebCore::AXObjectCache *)v536;
            v536 = 0;
            if (v151)
            {
              if (*(_DWORD *)v151 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v151;
            }
            v152 = (WTF::StringImpl *)v533;
            v533 = 0;
            if (v152)
            {
              if (*(_DWORD *)v152 == 2)
                WTF::StringImpl::destroy(v152, v40);
              else
                *(_DWORD *)v152 -= 2;
            }
          }
          if (IsEnabled)
          {
            v153 = *(_QWORD *)this;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)HIDWORD(v506));
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v153 + 16), (WTF::StringImpl **)&v533, (const WTF::StringImpl *)&v536, (uint64_t)&v542);
            if (v545)
            {
              v155 = (uint64_t *)(v153 + 24);
              v156 = *(unsigned int *)(v153 + 36);
              if ((_DWORD)v156 == *(_DWORD *)(v153 + 32))
              {
                v312 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v155, v156 + 1, (unint64_t)&v533);
                v156 = *(unsigned int *)(v153 + 36);
                v313 = *(_QWORD *)(v153 + 24);
                v314 = *v312;
                if (*v312)
                  *v314 += 2;
                *(_QWORD *)(v313 + 8 * v156) = v314;
              }
              else
              {
                v157 = *v155;
                v158 = (WTF::StringImpl *)v533;
                if (v533)
                  *(_DWORD *)v533 += 2;
                *(_QWORD *)(v157 + 8 * v156) = v158;
              }
              *(_DWORD *)(v153 + 36) = v156 + 1;
            }
            v159 = (WebCore::AXObjectCache *)v536;
            v536 = 0;
            if (v159)
            {
              if (*(_DWORD *)v159 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v159;
            }
            v160 = (WTF::StringImpl *)v533;
            v533 = 0;
            if (v160)
            {
              if (*(_DWORD *)v160 == 2)
                WTF::StringImpl::destroy(v160, v154);
              else
                *(_DWORD *)v160 -= 2;
            }
            if (*(_DWORD *)(v525 + 28))
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v533 = (WebCore::InspectorDOMAgent **)v525;
              WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v153 + 16), (WTF::StringImpl **)&v536, (const WTF::StringImpl *)&v533, (uint64_t)&v542);
              if (v545)
              {
                v162 = (uint64_t *)(v153 + 24);
                v163 = *(unsigned int *)(v153 + 36);
                if ((_DWORD)v163 == *(_DWORD *)(v153 + 32))
                {
                  v342 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v162, v163 + 1, (unint64_t)&v536);
                  v163 = *(unsigned int *)(v153 + 36);
                  v343 = *(_QWORD *)(v153 + 24);
                  v344 = *v342;
                  if (*v342)
                    *v344 += 2;
                  *(_QWORD *)(v343 + 8 * v163) = v344;
                }
                else
                {
                  v164 = *v162;
                  v165 = (WebCore::AXObjectCache *)v536;
                  if (v536)
                    *(_DWORD *)v536 += 2;
                  *(_QWORD *)(v164 + 8 * v163) = v165;
                }
                *(_DWORD *)(v153 + 36) = v163 + 1;
              }
              v166 = (WTF::StringImpl *)v533;
              v533 = 0;
              if (v166)
              {
                if (*(_DWORD *)v166 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*(_DWORD *)v166;
              }
              v167 = (WTF::StringImpl *)v536;
              v536 = 0;
              if (v167)
              {
                if (*(_DWORD *)v167 == 2)
                  WTF::StringImpl::destroy(v167, v161);
                else
                  *(_DWORD *)v167 -= 2;
              }
              v525 = 0;
            }
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)v503);
            WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v541, v168);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v153 + 16), (WTF::StringImpl **)&v533, (const WTF::StringImpl *)&v536, (uint64_t)&v542);
            if (v545)
            {
              v169 = (uint64_t *)(v153 + 24);
              v170 = *(unsigned int *)(v153 + 36);
              if ((_DWORD)v170 == *(_DWORD *)(v153 + 32))
              {
                v315 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v169, v170 + 1, (unint64_t)&v533);
                v170 = *(unsigned int *)(v153 + 36);
                v316 = *(_QWORD *)(v153 + 24);
                v317 = *v315;
                if (*v315)
                  *v317 += 2;
                *(_QWORD *)(v316 + 8 * v170) = v317;
              }
              else
              {
                v171 = *v169;
                v172 = (WTF::StringImpl *)v533;
                if (v533)
                  *(_DWORD *)v533 += 2;
                *(_QWORD *)(v171 + 8 * v170) = v172;
              }
              *(_DWORD *)(v153 + 36) = v170 + 1;
            }
            v173 = (WebCore::AXObjectCache *)v536;
            v536 = 0;
            if (v173)
            {
              if (*(_DWORD *)v173 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v173;
            }
            v174 = v541;
            v541 = 0;
            if (v174)
            {
              if (*(_DWORD *)v174 == 2)
                WTF::StringImpl::destroy(v174, v40);
              else
                *(_DWORD *)v174 -= 2;
            }
            v175 = (WTF::StringImpl *)v533;
            v533 = 0;
            if (v175)
            {
              if (*(_DWORD *)v175 == 2)
                WTF::StringImpl::destroy(v175, v40);
              else
                *(_DWORD *)v175 -= 2;
            }
          }
          if (!v510)
          {
LABEL_318:
            if (v11)
            {
              v184 = *(_QWORD *)this;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v533 = (WebCore::InspectorDOMAgent **)v11;
              WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v184 + 16), (WTF::StringImpl **)&v536, (const WTF::StringImpl *)&v533, (uint64_t)&v542);
              if (v545)
              {
                v185 = (uint64_t *)(v184 + 24);
                v186 = *(unsigned int *)(v184 + 36);
                if ((_DWORD)v186 == *(_DWORD *)(v184 + 32))
                {
                  v279 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v185, v186 + 1, (unint64_t)&v536);
                  v186 = *(unsigned int *)(v184 + 36);
                  v280 = *(_QWORD *)(v184 + 24);
                  v281 = *v279;
                  if (*v279)
                    *v281 += 2;
                  *(_QWORD *)(v280 + 8 * v186) = v281;
                }
                else
                {
                  v187 = *v185;
                  v188 = (WebCore::AXObjectCache *)v536;
                  if (v536)
                    *(_DWORD *)v536 += 2;
                  *(_QWORD *)(v187 + 8 * v186) = v188;
                }
                *(_DWORD *)(v184 + 36) = v186 + 1;
              }
              v189 = (WTF::StringImpl *)v533;
              v533 = 0;
              if (v189)
              {
                if (*(_DWORD *)v189 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*(_DWORD *)v189;
              }
              v190 = (WTF::StringImpl *)v536;
              v536 = 0;
              if (v190)
              {
                if (*(_DWORD *)v190 == 2)
                  WTF::StringImpl::destroy(v190, v40);
                else
                  *(_DWORD *)v190 -= 2;
              }
            }
            if (!v511)
            {
LABEL_348:
              if (v512)
              {
                v199 = *(_QWORD *)this;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)v504);
                WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v199 + 16), (WTF::StringImpl **)&v533, (const WTF::StringImpl *)&v536, (uint64_t)&v542);
                if (v545)
                {
                  v200 = (uint64_t *)(v199 + 24);
                  v201 = *(unsigned int *)(v199 + 36);
                  if ((_DWORD)v201 == *(_DWORD *)(v199 + 32))
                  {
                    v318 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v200, v201 + 1, (unint64_t)&v533);
                    v201 = *(unsigned int *)(v199 + 36);
                    v319 = *(_QWORD *)(v199 + 24);
                    v320 = *v318;
                    if (*v318)
                      *v320 += 2;
                    *(_QWORD *)(v319 + 8 * v201) = v320;
                  }
                  else
                  {
                    v202 = *v200;
                    v203 = (WTF::StringImpl *)v533;
                    if (v533)
                      *(_DWORD *)v533 += 2;
                    *(_QWORD *)(v202 + 8 * v201) = v203;
                  }
                  *(_DWORD *)(v199 + 36) = v201 + 1;
                }
                v204 = (WebCore::AXObjectCache *)v536;
                v536 = 0;
                if (v204)
                {
                  if (*(_DWORD *)v204 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*(_DWORD *)v204;
                }
                v205 = (WTF::StringImpl *)v533;
                v533 = 0;
                if (v205)
                {
                  if (*(_DWORD *)v205 == 2)
                    WTF::StringImpl::destroy(v205, v40);
                  else
                    *(_DWORD *)v205 -= 2;
                }
              }
              if ((_DWORD)v513)
              {
                v206 = *(_QWORD *)this;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
                WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v206 + 16), (WTF::StringImpl **)&v533, (const WTF::StringImpl *)&v536, (uint64_t)&v542);
                if (v545)
                {
                  v207 = (uint64_t *)(v206 + 24);
                  v208 = *(unsigned int *)(v206 + 36);
                  if ((_DWORD)v208 == *(_DWORD *)(v206 + 32))
                  {
                    v321 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v207, v208 + 1, (unint64_t)&v533);
                    v208 = *(unsigned int *)(v206 + 36);
                    v322 = *(_QWORD *)(v206 + 24);
                    v323 = *v321;
                    if (*v321)
                      *v323 += 2;
                    *(_QWORD *)(v322 + 8 * v208) = v323;
                  }
                  else
                  {
                    v209 = *v207;
                    v210 = (WTF::StringImpl *)v533;
                    if (v533)
                      *(_DWORD *)v533 += 2;
                    *(_QWORD *)(v209 + 8 * v208) = v210;
                  }
                  *(_DWORD *)(v206 + 36) = v208 + 1;
                }
                v211 = (WebCore::AXObjectCache *)v536;
                v536 = 0;
                if (v211)
                {
                  if (*(_DWORD *)v211 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*(_DWORD *)v211;
                }
                v212 = (WTF::StringImpl *)v533;
                v533 = 0;
                if (v212)
                {
                  if (*(_DWORD *)v212 == 2)
                    WTF::StringImpl::destroy(v212, v40);
                  else
                    *(_DWORD *)v212 -= 2;
                }
              }
              if (HIDWORD(v514))
              {
                v213 = *(_QWORD *)this;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)v506);
                WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v213 + 16), (WTF::StringImpl **)&v533, (const WTF::StringImpl *)&v536, (uint64_t)&v542);
                if (v545)
                {
                  v214 = (uint64_t *)(v213 + 24);
                  v215 = *(unsigned int *)(v213 + 36);
                  if ((_DWORD)v215 == *(_DWORD *)(v213 + 32))
                  {
                    v324 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v214, v215 + 1, (unint64_t)&v533);
                    v215 = *(unsigned int *)(v213 + 36);
                    v325 = *(_QWORD *)(v213 + 24);
                    v326 = *v324;
                    if (*v324)
                      *v326 += 2;
                    *(_QWORD *)(v325 + 8 * v215) = v326;
                  }
                  else
                  {
                    v216 = *v214;
                    v217 = (WTF::StringImpl *)v533;
                    if (v533)
                      *(_DWORD *)v533 += 2;
                    *(_QWORD *)(v216 + 8 * v215) = v217;
                  }
                  *(_DWORD *)(v213 + 36) = v215 + 1;
                }
                v218 = (WebCore::AXObjectCache *)v536;
                v536 = 0;
                if (v218)
                {
                  if (*(_DWORD *)v218 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*(_DWORD *)v218;
                }
                v219 = (WTF::StringImpl *)v533;
                v533 = 0;
                if (v219)
                {
                  if (*(_DWORD *)v219 == 2)
                    WTF::StringImpl::destroy(v219, v40);
                  else
                    *(_DWORD *)v219 -= 2;
                }
              }
              if ((_DWORD)v515)
              {
                v220 = *(_QWORD *)this;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
                WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v220 + 16), (WTF::StringImpl **)&v533, (const WTF::StringImpl *)&v536, (uint64_t)&v542);
                if (v545)
                {
                  v221 = (uint64_t *)(v220 + 24);
                  v222 = *(unsigned int *)(v220 + 36);
                  if ((_DWORD)v222 == *(_DWORD *)(v220 + 32))
                  {
                    v327 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v221, v222 + 1, (unint64_t)&v533);
                    v222 = *(unsigned int *)(v220 + 36);
                    v328 = *(_QWORD *)(v220 + 24);
                    v329 = *v327;
                    if (*v327)
                      *v329 += 2;
                    *(_QWORD *)(v328 + 8 * v222) = v329;
                  }
                  else
                  {
                    v223 = *v221;
                    v224 = (WTF::StringImpl *)v533;
                    if (v533)
                      *(_DWORD *)v533 += 2;
                    *(_QWORD *)(v223 + 8 * v222) = v224;
                  }
                  *(_DWORD *)(v220 + 36) = v222 + 1;
                }
                v225 = (WebCore::AXObjectCache *)v536;
                v536 = 0;
                if (v225)
                {
                  if (*(_DWORD *)v225 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*(_DWORD *)v225;
                }
                v226 = (WTF::StringImpl *)v533;
                v533 = 0;
                if (v226)
                {
                  if (*(_DWORD *)v226 == 2)
                    WTF::StringImpl::destroy(v226, v40);
                  else
                    *(_DWORD *)v226 -= 2;
                }
              }
              if (v524)
              {
                v227 = *(_QWORD *)this;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v533 = (WebCore::InspectorDOMAgent **)v524;
                WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v227 + 16), (WTF::StringImpl **)&v536, (const WTF::StringImpl *)&v533, (uint64_t)&v542);
                if (v545)
                {
                  v228 = (uint64_t *)(v227 + 24);
                  v229 = *(unsigned int *)(v227 + 36);
                  if ((_DWORD)v229 == *(_DWORD *)(v227 + 32))
                  {
                    v282 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v228, v229 + 1, (unint64_t)&v536);
                    v229 = *(unsigned int *)(v227 + 36);
                    v283 = *(_QWORD *)(v227 + 24);
                    v284 = *v282;
                    if (*v282)
                      *v284 += 2;
                    *(_QWORD *)(v283 + 8 * v229) = v284;
                  }
                  else
                  {
                    v230 = *v228;
                    v231 = (WebCore::AXObjectCache *)v536;
                    if (v536)
                      *(_DWORD *)v536 += 2;
                    *(_QWORD *)(v230 + 8 * v229) = v231;
                  }
                  *(_DWORD *)(v227 + 36) = v229 + 1;
                }
                v232 = (WTF::StringImpl *)v533;
                v533 = 0;
                if (v232)
                {
                  if (*(_DWORD *)v232 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*(_DWORD *)v232;
                }
                v233 = (WTF::StringImpl *)v536;
                v536 = 0;
                if (v233)
                {
                  if (*(_DWORD *)v233 == 2)
                    WTF::StringImpl::destroy(v233, v40);
                  else
                    *(_DWORD *)v233 -= 2;
                }
              }
              if ((_DWORD)v516)
              {
                v234 = *(_QWORD *)this;
                v235 = (double)HIDWORD(v515);
              }
              else
              {
                if (!HIDWORD(v515))
                {
LABEL_429:
                  if (hasPopup)
                  {
                    v243 = *(_QWORD *)this;
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
                    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v243 + 16), (WTF::StringImpl **)&v533, (const WTF::StringImpl *)&v536, (uint64_t)&v542);
                    if (v545)
                    {
                      v244 = (uint64_t *)(v243 + 24);
                      v245 = *(unsigned int *)(v243 + 36);
                      if ((_DWORD)v245 == *(_DWORD *)(v243 + 32))
                      {
                        v330 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v244, v245 + 1, (unint64_t)&v533);
                        v245 = *(unsigned int *)(v243 + 36);
                        v331 = *(_QWORD *)(v243 + 24);
                        v332 = *v330;
                        if (*v330)
                          *v332 += 2;
                        *(_QWORD *)(v331 + 8 * v245) = v332;
                      }
                      else
                      {
                        v246 = *v244;
                        v247 = (WTF::StringImpl *)v533;
                        if (v533)
                          *(_DWORD *)v533 += 2;
                        *(_QWORD *)(v246 + 8 * v245) = v247;
                      }
                      *(_DWORD *)(v243 + 36) = v245 + 1;
                    }
                    v248 = (WebCore::AXObjectCache *)v536;
                    v536 = 0;
                    if (v248)
                    {
                      if (*(_DWORD *)v248 == 1)
                        WTF::JSONImpl::Value::operator delete();
                      else
                        --*(_DWORD *)v248;
                    }
                    v249 = (WTF::StringImpl *)v533;
                    v533 = 0;
                    if (v249)
                    {
                      if (*(_DWORD *)v249 == 2)
                        WTF::StringImpl::destroy(v249, v40);
                      else
                        *(_DWORD *)v249 -= 2;
                    }
                  }
                  v11 = 0;
                  v10 = 0;
                  v9 = 0;
                  v8 = 0;
                  goto LABEL_443;
                }
                v234 = *(_QWORD *)this;
                v235 = (double)HIDWORD(v515);
              }
              v236 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
              WTF::JSONImpl::Value::create(v236, v235);
              WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v234 + 16), (WTF::StringImpl **)&v533, (const WTF::StringImpl *)&v536, (uint64_t)&v542);
              if (v545)
              {
                v237 = (uint64_t *)(v234 + 24);
                v238 = *(unsigned int *)(v234 + 36);
                if ((_DWORD)v238 == *(_DWORD *)(v234 + 32))
                {
                  v264 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v237, v238 + 1, (unint64_t)&v533);
                  v238 = *(unsigned int *)(v234 + 36);
                  v265 = *(_QWORD *)(v234 + 24);
                  v266 = *v264;
                  if (*v264)
                    *v266 += 2;
                  *(_QWORD *)(v265 + 8 * v238) = v266;
                }
                else
                {
                  v239 = *v237;
                  v240 = (WTF::StringImpl *)v533;
                  if (v533)
                    *(_DWORD *)v533 += 2;
                  *(_QWORD *)(v239 + 8 * v238) = v240;
                }
                *(_DWORD *)(v234 + 36) = v238 + 1;
              }
              v241 = (WebCore::AXObjectCache *)v536;
              v536 = 0;
              if (v241)
              {
                if (*(_DWORD *)v241 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*(_DWORD *)v241;
              }
              v242 = (WTF::StringImpl *)v533;
              v533 = 0;
              if (v242)
              {
                if (*(_DWORD *)v242 == 2)
                  WTF::StringImpl::destroy(v242, v40);
                else
                  *(_DWORD *)v242 -= 2;
              }
              goto LABEL_429;
            }
            v542 = 0;
            v191 = (WTF::JSONImpl::Value *)WebCore::InspectorDOMAgent::pushNodePathToFrontend((uint64_t)a2, (WebCore::Node *)&v542, v511);
            if (v542)
            {
              if (*(_DWORD *)v542 == 2)
              {
                WTF::StringImpl::destroy(v542, v40);
                if (!(_DWORD)v191)
                  goto LABEL_348;
                goto LABEL_336;
              }
              *(_DWORD *)v542 -= 2;
            }
            if (!(_DWORD)v191)
              goto LABEL_348;
LABEL_336:
            v192 = *(_QWORD *)this;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::Value::create(v191);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v192 + 16), (WTF::StringImpl **)&v533, (const WTF::StringImpl *)&v536, (uint64_t)&v542);
            if (v545)
            {
              v193 = (uint64_t *)(v192 + 24);
              v194 = *(unsigned int *)(v192 + 36);
              if ((_DWORD)v194 == *(_DWORD *)(v192 + 32))
              {
                v339 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v193, v194 + 1, (unint64_t)&v533);
                v194 = *(unsigned int *)(v192 + 36);
                v340 = *(_QWORD *)(v192 + 24);
                v341 = *v339;
                if (*v339)
                  *v341 += 2;
                *(_QWORD *)(v340 + 8 * v194) = v341;
              }
              else
              {
                v195 = *v193;
                v196 = (WTF::StringImpl *)v533;
                if (v533)
                  *(_DWORD *)v533 += 2;
                *(_QWORD *)(v195 + 8 * v194) = v196;
              }
              *(_DWORD *)(v192 + 36) = v194 + 1;
            }
            v197 = (WebCore::AXObjectCache *)v536;
            v536 = 0;
            if (v197)
            {
              if (*(_DWORD *)v197 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v197;
            }
            v198 = (WTF::StringImpl *)v533;
            v533 = 0;
            if (v198)
            {
              if (*(_DWORD *)v198 == 2)
                WTF::StringImpl::destroy(v198, v40);
              else
                *(_DWORD *)v198 -= 2;
            }
            goto LABEL_348;
          }
          v542 = 0;
          v176 = (WTF::JSONImpl::Value *)WebCore::InspectorDOMAgent::pushNodePathToFrontend((uint64_t)a2, (WebCore::Node *)&v542, v510);
          if (v542)
          {
            if (*(_DWORD *)v542 == 2)
            {
              WTF::StringImpl::destroy(v542, v40);
              if (!(_DWORD)v176)
                goto LABEL_318;
              goto LABEL_306;
            }
            *(_DWORD *)v542 -= 2;
          }
          if (!(_DWORD)v176)
            goto LABEL_318;
LABEL_306:
          v177 = *(_QWORD *)this;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          WTF::JSONImpl::Value::create(v176);
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v177 + 16), (WTF::StringImpl **)&v533, (const WTF::StringImpl *)&v536, (uint64_t)&v542);
          if (v545)
          {
            v178 = (uint64_t *)(v177 + 24);
            v179 = *(unsigned int *)(v177 + 36);
            if ((_DWORD)v179 == *(_DWORD *)(v177 + 32))
            {
              v336 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v178, v179 + 1, (unint64_t)&v533);
              v179 = *(unsigned int *)(v177 + 36);
              v337 = *(_QWORD *)(v177 + 24);
              v338 = *v336;
              if (*v336)
                *v338 += 2;
              *(_QWORD *)(v337 + 8 * v179) = v338;
            }
            else
            {
              v180 = *v178;
              v181 = (WTF::StringImpl *)v533;
              if (v533)
                *(_DWORD *)v533 += 2;
              *(_QWORD *)(v180 + 8 * v179) = v181;
            }
            *(_DWORD *)(v177 + 36) = v179 + 1;
          }
          v182 = (WebCore::AXObjectCache *)v536;
          v536 = 0;
          if (v182)
          {
            if (*(_DWORD *)v182 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v182;
          }
          v183 = (WTF::StringImpl *)v533;
          v533 = 0;
          if (v183)
          {
            if (*(_DWORD *)v183 == 2)
              WTF::StringImpl::destroy(v183, v40);
            else
              *(_DWORD *)v183 -= 2;
          }
          goto LABEL_318;
        }
        *(_DWORD *)v94 -= 2;
      }
    }
    if (!v12)
      goto LABEL_165;
    goto LABEL_153;
  }
  if (v524)
  {
    if (*(_DWORD *)v524 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v524;
  }
LABEL_443:
  v250 = v539;
  v539 = 0;
  if (v250)
  {
    if (*(_DWORD *)v250 == 2)
    {
      WTF::StringImpl::destroy(v250, v40);
      if (!v11)
        goto LABEL_449;
      goto LABEL_447;
    }
    *(_DWORD *)v250 -= 2;
  }
  if (!v11)
    goto LABEL_449;
LABEL_447:
  if (*(_DWORD *)v11 == 1)
    WTF::JSONImpl::Value::operator delete();
  else
    --*(_DWORD *)v11;
LABEL_449:
  if (v525)
  {
    if (*(_DWORD *)v525 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v525;
  }
  result = v540;
  v540 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v40);
      if (!v10)
        goto LABEL_458;
      goto LABEL_456;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v10)
    goto LABEL_458;
LABEL_456:
  if (*(_DWORD *)v10 == 1)
    result = (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
  else
    --*(_DWORD *)v10;
LABEL_458:
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      result = (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
      if (!v8)
        return result;
      goto LABEL_462;
    }
    --*(_DWORD *)v9;
  }
  if (!v8)
    return result;
LABEL_462:
  if (*(_DWORD *)v8 == 1)
    return (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
  --*(_DWORD *)v8;
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMAgent::getAccessibilityPropertiesForNode@<X0>(WebCore::InspectorDOMAgent *this@<X0>, void *a2@<X1>, WebCore::InspectorDOMAgent *a3@<X8>)
{
  return WebCore::InspectorDOMAgent::getAccessibilityPropertiesForNode((WebCore::InspectorDOMAgent *)((char *)this - 32), a2, a3);
}

uint64_t WebCore::InspectorDOMAgent::performSearch@<X0>(uint64_t a1@<X0>, const WTF::String *a2@<X1>, uint64_t *a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X8>)
{
  BOOL v8;
  char v9;
  Inspector::IdentifiersFactory *v10;
  double v11;
  double v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  WTF::JSONImpl::Value **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  double v21;
  double v22;
  float v23;
  WebCore::Node *v24;
  int v25;
  WebCore::Node *v26;
  void *v27;
  const WTF::StringImpl *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  _QWORD *v36;
  int i;
  unsigned int v38;
  _QWORD *v39;
  WTF *v40;
  uint64_t result;
  WTF::StringImpl *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  WTF *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  int v69;
  WTF *v70;
  WTF *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  WTF *v78;
  WTF::StringImpl *v79;

  if (a4[1])
    v8 = *a4 == 0;
  else
    v8 = 1;
  v9 = !v8;
  v10 = WebCore::InspectorNodeFinder::InspectorNodeFinder((WebCore::InspectorNodeFinder *)&v74, a2, v9);
  v14 = *a3;
  if (*a3)
  {
    v15 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v15)
    {
      v16 = *(WTF::JSONImpl::Value ***)(v14 + 16);
      v17 = 8 * v15;
      while (1)
      {
        v18 = WTF::JSONImpl::Value::asInteger(*v16);
        if ((v18 & 0xFF00000000) == 0)
          break;
        v19 = WebCore::InspectorDOMAgent::nodeForId((WebCore::InspectorDOMAgent *)a1, (void *)v18);
        if (!v19)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v35 = v79;
          if (v79)
            *(_DWORD *)v79 += 2;
          *(_QWORD *)a5 = v35;
          goto LABEL_26;
        }
        v24 = (WebCore::Node *)v19;
        v25 = *(_DWORD *)(v19 + 24);
        *(_DWORD *)(v19 + 24) = v25 + 2;
        if (v25)
        {
          *(_DWORD *)(v19 + 24) = v25;
        }
        else if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v19, v20);
        }
        WebCore::InspectorNodeFinder::searchUsingXPath((WebCore::InspectorNodeFinder *)&v74, v24, v21, v22, v23);
        WebCore::InspectorNodeFinder::searchUsingCSSSelectors((unsigned int *)&v74, v24);
        v10 = (Inspector::IdentifiersFactory *)WebCore::InspectorNodeFinder::searchUsingDOMTreeTraversal((uint64_t)&v74, v24);
        ++v16;
        v17 -= 8;
        if (!v17)
          goto LABEL_20;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v35 = 0;
LABEL_26:
      *(_DWORD *)(a5 + 16) = 1;
      goto LABEL_90;
    }
  }
  else
  {
    v26 = *(WebCore::Node **)(a1 + 120);
    if (v26)
    {
      WebCore::InspectorNodeFinder::searchUsingXPath((WebCore::InspectorNodeFinder *)&v74, *(WebCore::Node **)(a1 + 120), v11, v12, v13);
      WebCore::InspectorNodeFinder::searchUsingCSSSelectors((unsigned int *)&v74, v26);
      v10 = (Inspector::IdentifiersFactory *)WebCore::InspectorNodeFinder::searchUsingDOMTreeTraversal((uint64_t)&v74, v26);
    }
  }
LABEL_20:
  Inspector::IdentifiersFactory::createIdentifier(v10);
  v31 = *(_QWORD *)(a1 + 128);
  v29 = (uint64_t *)(a1 + 128);
  v30 = v31;
  if (v31
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v29, 8u, 0), (v30 = *v29) != 0))
  {
    v32 = *(_DWORD *)(v30 - 8);
  }
  else
  {
    v32 = 0;
  }
  v33 = *((_DWORD *)v79 + 4);
  if (v33 < 0x100)
    v34 = WTF::StringImpl::hashSlowCase(v79);
  else
    v34 = v33 >> 8;
  v36 = 0;
  for (i = 1; ; ++i)
  {
    v38 = v34 & v32;
    v39 = (_QWORD *)(v30 + 24 * (v34 & v32));
    v40 = (WTF *)*v39;
    if (*v39 == -1)
    {
      v36 = (_QWORD *)(v30 + 24 * v38);
      goto LABEL_34;
    }
    if (!v40)
      break;
    result = WTF::equal(v40, v79, v28);
    if ((result & 1) != 0)
      goto LABEL_63;
LABEL_34:
    v34 = i + v38;
  }
  if (v36)
  {
    *v36 = 0;
    v36[1] = 0;
    v36[2] = 0;
    --*(_DWORD *)(*v29 - 16);
    v39 = v36;
  }
  v42 = v79;
  if (v79)
    *(_DWORD *)v79 += 2;
  *v39 = v42;
  v43 = v39 + 1;
  v44 = *((unsigned int *)v39 + 5);
  if ((_DWORD)v44)
  {
    v45 = (uint64_t *)*v43;
    v46 = 8 * v44;
    do
    {
      v47 = *v45;
      *v45 = 0;
      if (v47)
      {
        if (*(_DWORD *)(v47 + 24) == 2)
        {
          if ((*(_WORD *)(v47 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v47, v27);
        }
        else
        {
          *(_DWORD *)(v47 + 24) -= 2;
        }
      }
      ++v45;
      v46 -= 8;
    }
    while (v46);
  }
  result = *v43;
  if (*v43)
  {
    v39[1] = 0;
    *((_DWORD *)v39 + 4) = 0;
    result = WTF::fastFree((WTF *)result, v27);
  }
  *v43 = 0;
  v39[2] = 0;
  v48 = *v29;
  if (*v29)
    v49 = *(_DWORD *)(v48 - 12) + 1;
  else
    v49 = 1;
  *(_DWORD *)(v48 - 12) = v49;
  v50 = *v29;
  if (*v29)
    v51 = *(_DWORD *)(v50 - 12);
  else
    v51 = 0;
  v52 = (*(_DWORD *)(v50 - 16) + v51);
  v53 = *(unsigned int *)(v50 - 4);
  if (v53 > 0x400)
  {
    if (v53 <= 2 * v52)
    {
LABEL_59:
      v54 = (_DWORD)v53 << (6 * *(_DWORD *)(v50 - 12) >= (2 * v53));
      goto LABEL_62;
    }
  }
  else if (3 * v53 <= 4 * v52)
  {
    if ((_DWORD)v53)
      goto LABEL_59;
    v54 = 8;
LABEL_62:
    result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v29, v54, (WTF::StringImpl **)v39);
    v39 = (_QWORD *)result;
  }
LABEL_63:
  v55 = v78;
  if (v78)
  {
    LODWORD(v56) = *((_DWORD *)v39 + 5);
    while (1)
    {
      v57 = v56;
      if ((_DWORD)v56 == *((_DWORD *)v39 + 4))
      {
        v58 = v56 + 1;
        v59 = v57 + (v57 >> 2);
        if (v59 >= 0x10)
          v60 = v59 + 1;
        else
          v60 = 16;
        if (v60 <= v58)
          v61 = v57 + 1;
        else
          v61 = v60;
        if (v61 >> 29)
        {
          __break(0xC471u);
          return result;
        }
        v62 = (void *)v39[1];
        v63 = (void *)WTF::fastMalloc((WTF *)(8 * v61));
        *((_DWORD *)v39 + 4) = v61;
        v39[1] = v63;
        result = (uint64_t)memcpy(v63, v62, 8 * v57);
        if (v62)
        {
          if ((void *)v39[1] == v62)
          {
            v39[1] = 0;
            *((_DWORD *)v39 + 4) = 0;
          }
          result = WTF::fastFree((WTF *)v62, v27);
        }
        v56 = *((unsigned int *)v39 + 5);
        v64 = v39[1];
        v65 = *(_QWORD *)v55;
        if (*(_QWORD *)v55)
          *(_DWORD *)(v65 + 24) += 2;
        *(_QWORD *)(v64 + 8 * v56) = v65;
      }
      else
      {
        v66 = v39[1];
        v67 = *(_QWORD *)v55;
        if (*(_QWORD *)v55)
          *(_DWORD *)(v67 + 24) += 2;
        *(_QWORD *)(v66 + 8 * v56) = v67;
      }
      LODWORD(v56) = v56 + 1;
      *((_DWORD *)v39 + 5) = v56;
      v55 = (WTF *)*((_QWORD *)v55 + 2);
      if (!v55)
        goto LABEL_86;
    }
  }
  LODWORD(v56) = *((_DWORD *)v39 + 5);
LABEL_86:
  v68 = v79;
  if (v79)
  {
    v69 = *(_DWORD *)v79;
    *(_DWORD *)v79 += 2;
    *(_QWORD *)a5 = v68;
    *(_DWORD *)(a5 + 8) = v56;
    *(_DWORD *)(a5 + 16) = 0;
    v79 = 0;
    if (v69)
      *(_DWORD *)v68 = v69;
    else
      WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v27);
  }
  else
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = v56;
    *(_DWORD *)(a5 + 16) = 0;
  }
  v35 = 0;
LABEL_90:
  v70 = v78;
  if (v78)
  {
    do
    {
      v71 = (WTF *)*((_QWORD *)v70 + 2);
      WTF::fastFree(v70, v27);
      v70 = v71;
    }
    while (v71);
  }
  if (v77)
    WTF::fastFree((WTF *)(v77 - 16), v27);
  v72 = v76;
  v76 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
      WTF::StringImpl::destroy(v72, (WTF::StringImpl *)v27);
    else
      *(_DWORD *)v72 -= 2;
  }
  v73 = v75;
  v75 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
      WTF::StringImpl::destroy(v73, (WTF::StringImpl *)v27);
    else
      *(_DWORD *)v73 -= 2;
  }
  result = (uint64_t)v74;
  v74 = 0;
  if (!result)
  {
LABEL_103:
    if (!v35)
      return result;
    goto LABEL_104;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_103;
  }
  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v27);
  if (v35)
  {
LABEL_104:
    if (*(_DWORD *)v35 == 2)
      return WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v27);
    else
      *(_DWORD *)v35 -= 2;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorDOMAgent::performSearch@<X0>(uint64_t a1@<X0>, const WTF::String *a2@<X1>, uint64_t *a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X8>)
{
  return WebCore::InspectorDOMAgent::performSearch(a1 - 32, a2, a3, a4, a5);
}

_DWORD *WebCore::InspectorDOMAgent::getSearchResults@<X0>(WebCore::InspectorDOMAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int i;
  int v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  _DWORD *result;
  char **v23;
  unint64_t v24;
  WebCore::InspectorDOMAgent *v25;
  WTF::StringImpl *v26;
  WTF::JSONImpl::Value *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  WTF::StringImpl *v31;
  int v32;
  int v33;
  WTF::StringImpl *v34;

  v6 = *((_QWORD *)this + 16);
  if (!v6)
    goto LABEL_35;
  v33 = (int)a3;
  v10 = *(_DWORD *)(v6 - 8);
  v11 = *((_DWORD *)*a2 + 4);
  v12 = a5;
  v13 = v11 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v11 >> 8;
  for (i = 0; ; v13 = ++i + v15)
  {
    v15 = v13 & v10;
    v16 = v6 + 24 * (v13 & v10);
    v17 = *(WTF **)v16;
    if (*(_QWORD *)v16 != -1)
    {
      if (!v17)
      {
        v18 = *((_QWORD *)this + 16);
        a5 = v12;
        v19 = v33;
        if (!v18)
          goto LABEL_35;
        v20 = *(_DWORD *)(v18 - 4);
        v16 = v18 + 24 * v20;
        goto LABEL_14;
      }
      if ((WTF::equal(v17, *a2, a3) & 1) != 0)
        break;
    }
  }
  v18 = *((_QWORD *)this + 16);
  a5 = v12;
  if (!v18)
  {
    v19 = v33;
    goto LABEL_17;
  }
  v20 = *(_DWORD *)(v18 - 4);
  v19 = v33;
LABEL_14:
  if (v16 == v18 + 24 * v20)
    goto LABEL_35;
LABEL_17:
  if (v19 >= a4 || v19 < 0 || *(_DWORD *)(v16 + 20) < a4)
  {
LABEL_35:
    result = (_DWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v32 = 1;
LABEL_36:
    *(_DWORD *)(a5 + 8) = v32;
  }
  else
  {
    v21 = WTF::fastMalloc((WTF *)0x20);
    result = (_DWORD *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v21);
    v23 = (char **)(result + 4);
    v24 = v19;
    while (v24 < *(unsigned int *)(v16 + 20))
    {
      v25 = *(WebCore::InspectorDOMAgent **)(*(_QWORD *)(v16 + 8) + 8 * v24);
      v34 = 0;
      v27 = (WTF::JSONImpl::Value *)WebCore::InspectorDOMAgent::pushNodePathToFrontend((uint64_t)this, (WebCore::Node *)&v34, v25);
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v26);
        else
          *(_DWORD *)v34 -= 2;
      }
      WTF::JSONImpl::Value::create(v27);
      v28 = *(unsigned int *)(v21 + 28);
      if ((_DWORD)v28 == *(_DWORD *)(v21 + 24))
      {
        v29 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v28 + 1, (unint64_t)&v34);
        v28 = *(unsigned int *)(v21 + 28);
        v30 = *(char **)(v21 + 16);
        v31 = *(WTF::StringImpl **)v29;
        *(_QWORD *)v29 = 0;
      }
      else
      {
        v30 = *v23;
        v31 = v34;
        v34 = 0;
      }
      *(_QWORD *)&v30[8 * v28] = v31;
      *(_DWORD *)(v21 + 28) = v28 + 1;
      result = v34;
      v34 = 0;
      if (result)
      {
        if (*result == 1)
          result = (_DWORD *)WTF::JSONImpl::Value::operator delete();
        else
          --*result;
      }
      if ((int)++v24 >= a4)
      {
        v32 = 0;
        *(_QWORD *)a5 = v21;
        goto LABEL_36;
      }
    }
    __break(0xC471u);
  }
  return result;
}

_DWORD *`non-virtual thunk to'WebCore::InspectorDOMAgent::getSearchResults@<X0>(WebCore::InspectorDOMAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  return WebCore::InspectorDOMAgent::getSearchResults((WebCore::InspectorDOMAgent *)((char *)this - 32), a2, a3, a4, a5);
}

uint64_t WebCore::InspectorDOMAgent::discardSearchResults@<X0>(uint64_t this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int i;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;

  v5 = (uint64_t *)(this + 128);
  v6 = *(_QWORD *)(this + 128);
  if (v6)
  {
    v8 = *(_DWORD *)(v6 - 8);
    v9 = *((_DWORD *)*a2 + 4);
    if (v9 < 0x100)
      v10 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v10 = v9 >> 8;
    for (i = 0; ; v10 = i + v12)
    {
      v12 = v10 & v8;
      v13 = v6 + 24 * (v10 & v8);
      this = *(_QWORD *)v13;
      if (*(_QWORD *)v13 != -1)
      {
        if (!this)
        {
          v14 = *v5;
          if (!*v5)
            goto LABEL_40;
          v15 = *(_DWORD *)(v14 - 4);
          v13 = v14 + 24 * v15;
          goto LABEL_14;
        }
        this = WTF::equal((WTF *)this, *a2, a3);
        if ((this & 1) != 0)
          break;
      }
      ++i;
    }
    v14 = *v5;
    if (!*v5)
      goto LABEL_15;
    v15 = *(_DWORD *)(v14 - 4);
LABEL_14:
    v14 += 24 * v15;
    if (v14 == v13)
      goto LABEL_40;
LABEL_15:
    if (v14 != v13)
    {
      v16 = *(WTF::StringImpl **)v13;
      *(_QWORD *)v13 = -1;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = *(unsigned int *)(v13 + 20);
      if ((_DWORD)v17)
      {
        v18 = *(uint64_t **)(v13 + 8);
        v19 = 8 * v17;
        do
        {
          v20 = *v18;
          *v18 = 0;
          if (v20)
          {
            if (*(_DWORD *)(v20 + 24) == 2)
            {
              if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v20, a2);
            }
            else
            {
              *(_DWORD *)(v20 + 24) -= 2;
            }
          }
          ++v18;
          v19 -= 8;
        }
        while (v19);
      }
      this = *(_QWORD *)(v13 + 8);
      if (this)
      {
        *(_QWORD *)(v13 + 8) = 0;
        *(_DWORD *)(v13 + 16) = 0;
        this = WTF::fastFree((WTF *)this, a2);
      }
      ++*(_DWORD *)(*v5 - 16);
      v21 = *v5;
      if (*v5)
        v22 = *(_DWORD *)(v21 - 12) - 1;
      else
        v22 = -1;
      *(_DWORD *)(v21 - 12) = v22;
      v23 = *v5;
      if (*v5)
      {
        v24 = 6 * *(_DWORD *)(v23 - 12);
        v25 = *(_DWORD *)(v23 - 4);
        if (v24 < v25 && v25 >= 9)
          this = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v5, v25 >> 1, 0);
      }
    }
  }
LABEL_40:
  *a4 = 0;
  a4[8] = 0;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::InspectorDOMAgent::discardSearchResults@<X0>(WebCore::InspectorDOMAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _BYTE *a4@<X8>)
{
  return WebCore::InspectorDOMAgent::discardSearchResults((uint64_t)this - 32, a2, a3, a4);
}

void WebCore::InspectorDOMAgent::inspect(WebCore::InspectorDOMAgent *this, WebCore::Node *a2)
{
  WebCore::Node *v2;
  uint64_t v4;
  __int16 v5;
  WebCore::Node *v6;
  WebCore::Node **v7;
  char v8;
  WebCore::Node *v9;
  WebCore::Node *v10;

  v2 = a2;
  if (a2)
    *((_DWORD *)a2 + 6) += 2;
  if (*((_BYTE *)this + 436))
  {
    *((_BYTE *)this + 436) = 0;
    WebCore::InspectorOverlay::hideHighlight(*((WebCore::InspectorOverlay **)this + 9), a2);
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)this + 9) + 8) + 120))(*(_QWORD *)(*((_QWORD *)this + 9) + 8), *((unsigned __int8 *)this + 436));
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 80) + 88);
    if (v4)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 128))(v4, *((unsigned __int8 *)this + 436));
  }
  v5 = *((_WORD *)v2 + 14);
  if ((v5 & 8) != 0 || (v5 & 0xF000) == 0x9000)
  {
    v7 = (WebCore::Node **)((char *)this + 144);
    goto LABEL_15;
  }
  v6 = (WebCore::Node *)*((_QWORD *)v2 + 4);
  if (v6)
    *((_DWORD *)v6 + 6) += 2;
  if (*((_DWORD *)v2 + 6) == 2)
  {
    if ((*((_WORD *)v2 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v2, a2);
  }
  else
  {
    *((_DWORD *)v2 + 6) -= 2;
  }
  v7 = (WebCore::Node **)((char *)this + 144);
  if (v6)
  {
    v2 = v6;
LABEL_15:
    v8 = 0;
    *((_DWORD *)v2 + 6) += 2;
    goto LABEL_16;
  }
  v2 = 0;
  v8 = 1;
LABEL_16:
  v9 = *v7;
  *v7 = v2;
  v10 = v2;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9, a2);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
    v10 = *v7;
  }
  if (v10)
    WebCore::InspectorDOMAgent::focusNode(this, a2);
  if ((v8 & 1) == 0)
  {
    if (*((_DWORD *)v2 + 6) == 2)
    {
      if ((*((_WORD *)v2 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v2, a2);
    }
    else
    {
      *((_DWORD *)v2 + 6) -= 2;
    }
  }
}

unint64_t WebCore::InspectorDOMAgent::nodeAsScriptValue(WebCore::InspectorDOMAgent *this, JSC::JSGlobalObject *a2, WebCore::Node *a3)
{
  WebCore::Document *v5;
  unint64_t Wrapper;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  JSC::JSGlobalObject *v15;
  int v16;
  void *v17;
  WebCore::Node *v18;
  uint64_t v19;
  WebCore::Node *v20;

  JSC::JSLockHolder::JSLockHolder();
  if (!a2
    || !WebCore::canAccessDocument((uint64_t)this, *(WTF::StringImpl **)(*((_QWORD *)a2 + 5) + 8), 1))
  {
    Wrapper = 2;
    goto LABEL_4;
  }
  if (*((_BYTE *)this + 3328))
  {
    v8 = *((_QWORD *)a2 + 1);
    if (v8)
    {
LABEL_7:
      if ((*(_BYTE *)(v8 + 8) & 3) == 0 && *(_QWORD *)v8)
      {
        Wrapper = *(_QWORD *)v8;
        goto LABEL_4;
      }
    }
  }
  else
  {
    v9 = *(_QWORD *)(*((_QWORD *)this + 415) + 32);
    if (v9)
    {
      v10 = *(_DWORD *)(v9 - 8);
      v11 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(JSC::JSGlobalObject **)(v9 + 16 * v14);
      if (v15 == a2)
      {
LABEL_15:
        v8 = *(_QWORD *)(v9 + 16 * v14 + 8);
        if (v8)
          goto LABEL_7;
      }
      else
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v10;
          v15 = *(JSC::JSGlobalObject **)(v9 + 16 * v14);
          ++v16;
          if (v15 == a2)
            goto LABEL_15;
        }
      }
    }
  }
  *((_DWORD *)a2 + 6) += 2;
  v20 = a2;
  Wrapper = WebCore::createWrapper((WebCore::DOMWrapperWorld **)this, this, (WebCore::JSDOMGlobalObject *)&v20, v5);
  v18 = v20;
  v20 = 0;
  if (v18)
  {
    if (*((_DWORD *)v18 + 6) == 2)
    {
      if ((*((_WORD *)v18 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v18, v17);
    }
    else
    {
      *((_DWORD *)v18 + 6) -= 2;
    }
  }
LABEL_4:
  MEMORY[0x19AEA32A0](&v19);
  return Wrapper;
}

WTF::StringImpl *WebCore::InspectorDOMAgent::highlightConfigFromInspectorObject(uint64_t *a1, WTF::StringImpl **a2, WTF::JSONImpl::ObjectBase **a3)
{
  uint64_t v5;
  WTF::JSONImpl::ObjectBase *v6;
  WTF::StringImpl *v7;
  unsigned int Boolean;
  WTF::StringImpl *v9;
  void *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  void *v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  void *v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  void *v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  WTF::StringImpl *result;
  WTF::StringImpl *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int *v50;
  _BOOL4 v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int *v54;
  uint64_t v55;
  _BOOL4 v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int *v59;
  uint64_t v60;
  _BOOL4 v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  _BOOL4 v65;
  unsigned int v66;
  unsigned int v67;
  unint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70[2];
  __int128 v71;

  if (*a3)
  {
    v5 = WTF::fastMalloc((WTF *)0x30);
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *a1 = v5;
    v6 = *a3;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v70[0] = (WTF::StringImpl *)v71;
    Boolean = (unsigned __int16)WTF::JSONImpl::ObjectBase::getBoolean(v6, (const WTF::String *)v70);
    if (Boolean <= 0x100)
      LOBYTE(Boolean) = 0;
    *(_BYTE *)(v5 + 40) = Boolean != 0;
    v9 = v70[0];
    v70[0] = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::ObjectBase::getObject(*a3, (const WTF::String *)&v69);
    WebCore::parseColor((WTF::StringImpl *)&v71, v70);
    v11 = v70[0];
    v70[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v11;
    }
    v12 = v71;
    if (!BYTE8(v71))
      v12 = 0x1104000000000000;
    v13 = *(_QWORD *)v5;
    if ((*(_QWORD *)v5 & 0x8000000000000) != 0)
    {
      if ((v12 & 0x8000000000000) != 0)
      {
        v71 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFLL) + 4);
        v68 = v12;
        v50 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
        *(_OWORD *)v70 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFLL) + 4);
        v51 = WebCore::operator==<float,4ul>((float *)&v71, (float *)v70);
        v13 = *(_QWORD *)v5;
        if (v51 && HIBYTE(v13) == HIBYTE(v68))
        {
          v12 = v68;
          if (BYTE6(v13) == BYTE6(v68))
          {
            do
            {
              v52 = __ldaxr(v50);
              v53 = v52 - 1;
            }
            while (__stlxr(v53, v50));
            if (!v53)
            {
              atomic_store(1u, v50);
              WTF::fastFree((WTF *)v50, v10);
            }
LABEL_17:
            v14 = v69;
            v69 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2)
                WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v10);
              else
                *(_DWORD *)v14 -= 2;
            }
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::ObjectBase::getObject(*a3, (const WTF::String *)&v69);
            WebCore::parseColor((WTF::StringImpl *)&v71, v70);
            v16 = v70[0];
            v70[0] = 0;
            if (v16)
            {
              if (*(_DWORD *)v16 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v16;
            }
            if (BYTE8(v71))
              v17 = v71;
            else
              v17 = 0x1104000000000000;
            v18 = *a1;
            v19 = *(_QWORD *)(*a1 + 16);
            if ((v19 & 0x8000000000000) != 0)
            {
              if ((v17 & 0x8000000000000) != 0)
              {
                v71 = *(_OWORD *)((v19 & 0xFFFFFFFFFFFFLL) + 4);
                v54 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
                *(_OWORD *)v70 = *(_OWORD *)((v17 & 0xFFFFFFFFFFFFLL) + 4);
                v55 = v18;
                v56 = WebCore::operator==<float,4ul>((float *)&v71, (float *)v70);
                v18 = v55;
                v19 = *(_QWORD *)(v55 + 16);
                if (v56 && HIBYTE(v19) == HIBYTE(v17) && BYTE6(v19) == BYTE6(v17))
                {
                  do
                  {
                    v57 = __ldaxr(v54);
                    v58 = v57 - 1;
                  }
                  while (__stlxr(v58, v54));
                  if (!v58)
                  {
                    atomic_store(1u, v54);
                    WTF::fastFree((WTF *)(v17 & 0xFFFFFFFFFFFFLL), v15);
                  }
LABEL_31:
                  v20 = v69;
                  v69 = 0;
                  if (v20)
                  {
                    if (*(_DWORD *)v20 == 2)
                      WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v15);
                    else
                      *(_DWORD *)v20 -= 2;
                  }
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  WTF::JSONImpl::ObjectBase::getObject(*a3, (const WTF::String *)&v69);
                  WebCore::parseColor((WTF::StringImpl *)&v71, v70);
                  v22 = v70[0];
                  v70[0] = 0;
                  if (v22)
                  {
                    if (*(_DWORD *)v22 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*(_DWORD *)v22;
                  }
                  if (BYTE8(v71))
                    v23 = v71;
                  else
                    v23 = 0x1104000000000000;
                  v24 = *a1;
                  v25 = *(_QWORD *)(*a1 + 24);
                  if ((v25 & 0x8000000000000) != 0)
                  {
                    if ((v23 & 0x8000000000000) != 0)
                    {
                      v71 = *(_OWORD *)((v25 & 0xFFFFFFFFFFFFLL) + 4);
                      v59 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
                      *(_OWORD *)v70 = *(_OWORD *)((v23 & 0xFFFFFFFFFFFFLL) + 4);
                      v60 = v24;
                      v61 = WebCore::operator==<float,4ul>((float *)&v71, (float *)v70);
                      v24 = v60;
                      v25 = *(_QWORD *)(v60 + 24);
                      if (v61 && HIBYTE(v25) == HIBYTE(v23) && BYTE6(v25) == BYTE6(v23))
                      {
                        do
                        {
                          v62 = __ldaxr(v59);
                          v63 = v62 - 1;
                        }
                        while (__stlxr(v63, v59));
                        if (!v63)
                        {
                          atomic_store(1u, v59);
                          WTF::fastFree((WTF *)(v23 & 0xFFFFFFFFFFFFLL), v21);
                        }
LABEL_45:
                        v26 = v69;
                        v69 = 0;
                        if (v26)
                        {
                          if (*(_DWORD *)v26 == 2)
                            WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v21);
                          else
                            *(_DWORD *)v26 -= 2;
                        }
                        WTF::StringImpl::createWithoutCopyingNonEmpty();
                        WTF::JSONImpl::ObjectBase::getObject(*a3, (const WTF::String *)&v69);
                        WebCore::parseColor((WTF::StringImpl *)&v71, v70);
                        v28 = v70[0];
                        v70[0] = 0;
                        if (v28)
                        {
                          if (*(_DWORD *)v28 == 1)
                            WTF::JSONImpl::Value::operator delete();
                          else
                            --*(_DWORD *)v28;
                        }
                        if (BYTE8(v71))
                          v29 = v71;
                        else
                          v29 = 0x1104000000000000;
                        v30 = *a1;
                        v31 = *(_QWORD *)(*a1 + 32);
                        if ((v31 & 0x8000000000000) != 0)
                        {
                          if ((v29 & 0x8000000000000) != 0)
                          {
                            v71 = *(_OWORD *)((v31 & 0xFFFFFFFFFFFFLL) + 4);
                            v64 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFLL);
                            *(_OWORD *)v70 = *(_OWORD *)((v29 & 0xFFFFFFFFFFFFLL) + 4);
                            v65 = WebCore::operator==<float,4ul>((float *)&v71, (float *)v70);
                            v31 = *(_QWORD *)(v30 + 32);
                            if (v65 && HIBYTE(v31) == HIBYTE(v29) && BYTE6(v31) == BYTE6(v29))
                            {
                              do
                              {
                                v66 = __ldaxr(v64);
                                v67 = v66 - 1;
                              }
                              while (__stlxr(v67, v64));
                              if (!v67)
                              {
                                atomic_store(1u, v64);
                                WTF::fastFree((WTF *)(v29 & 0xFFFFFFFFFFFFLL), v27);
                              }
                              goto LABEL_59;
                            }
                          }
                        }
                        else if ((v29 & 0x8000000000000) == 0 && v31 == v29)
                        {
LABEL_59:
                          result = v69;
                          v69 = 0;
                          if (result)
                          {
                            if (*(_DWORD *)result == 2)
                              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v27);
                            else
                              *(_DWORD *)result -= 2;
                          }
                          return result;
                        }
                        if ((v31 & 0x8000000000000) != 0)
                        {
                          v47 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFLL);
                          do
                          {
                            v48 = __ldaxr(v47);
                            v49 = v48 - 1;
                          }
                          while (__stlxr(v49, v47));
                          if (!v49)
                          {
                            atomic_store(1u, v47);
                            WTF::fastFree((WTF *)v47, v27);
                          }
                        }
                        *(_QWORD *)(v30 + 32) = v29;
                        goto LABEL_59;
                      }
                    }
                  }
                  else if ((v23 & 0x8000000000000) == 0 && v25 == v23)
                  {
                    goto LABEL_45;
                  }
                  if ((v25 & 0x8000000000000) != 0)
                  {
                    v43 = v24;
                    v44 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFLL);
                    do
                    {
                      v45 = __ldaxr(v44);
                      v46 = v45 - 1;
                    }
                    while (__stlxr(v46, v44));
                    if (!v46)
                    {
                      atomic_store(1u, v44);
                      WTF::fastFree((WTF *)v44, v21);
                      v24 = v43;
                    }
                  }
                  *(_QWORD *)(v24 + 24) = v23;
                  goto LABEL_45;
                }
              }
            }
            else if ((v17 & 0x8000000000000) == 0 && v19 == v17)
            {
              goto LABEL_31;
            }
            if ((v19 & 0x8000000000000) != 0)
            {
              v39 = v18;
              v40 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
              do
              {
                v41 = __ldaxr(v40);
                v42 = v41 - 1;
              }
              while (__stlxr(v42, v40));
              if (!v42)
              {
                atomic_store(1u, v40);
                WTF::fastFree((WTF *)v40, v15);
                v18 = v39;
              }
            }
            *(_QWORD *)(v18 + 16) = v17;
            goto LABEL_31;
          }
        }
        else
        {
          v12 = v68;
        }
      }
    }
    else if (v13 == v12 && (v12 & 0x8000000000000) == 0)
    {
      goto LABEL_17;
    }
    if ((v13 & 0x8000000000000) != 0)
    {
      v35 = v12;
      v36 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        atomic_store(1u, v36);
        WTF::fastFree((WTF *)v36, v10);
        v12 = v35;
      }
    }
    *(_QWORD *)v5 = v12;
    goto LABEL_17;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  result = *a2;
  *a2 = (WTF::StringImpl *)v71;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v34);
    else
      *(_DWORD *)result -= 2;
  }
  *a1 = 0;
  return result;
}

WTF::StringImpl *WebCore::InspectorDOMAgent::gridOverlayConfigFromInspectorObject(WTF::StringImpl *result, WTF::StringImpl **a2, WTF::JSONImpl::ObjectBase **a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::JSONImpl::ObjectBase *v10;
  WTF::StringImpl *v11;
  unsigned int Boolean;
  BOOL v13;
  WTF::StringImpl *v14;
  WTF::JSONImpl::ObjectBase *v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  BOOL v18;
  WTF::StringImpl *v19;
  WTF::JSONImpl::ObjectBase *v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  BOOL v23;
  WTF::StringImpl *v24;
  WTF::JSONImpl::ObjectBase *v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  BOOL v28;
  WTF::StringImpl *v29;
  WTF::JSONImpl::ObjectBase *v30;
  WTF::StringImpl *v31;
  unsigned int v32;
  BOOL v33;
  unsigned int v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  char v41;
  WTF::StringImpl *v42;

  v3 = result;
  if (!*a3)
  {
LABEL_44:
    *(_BYTE *)v3 = 0;
    *((_BYTE *)v3 + 16) = 0;
    return result;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v39 = v40;
  WTF::JSONImpl::ObjectBase::getObject(*a3, (const WTF::String *)&v39);
  WebCore::parseColor((WTF::StringImpl *)&v40, &v42);
  v7 = v42;
  v42 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v7;
  }
  v8 = v39;
  v39 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  if (!v41)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = *a2;
    *a2 = v42;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v36);
      else
        *(_DWORD *)result -= 2;
    }
    goto LABEL_44;
  }
  v9 = v40;
  if (((unint64_t)v40 & 0x8000000000000) != 0)
  {
    v37 = (unsigned int *)((unint64_t)v40 & 0xFFFFFFFFFFFFLL);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 + 1, v37));
  }
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Boolean = (unsigned __int16)WTF::JSONImpl::ObjectBase::getBoolean(v10, (const WTF::String *)&v42);
  if (Boolean <= 0x100)
    LOBYTE(Boolean) = 0;
  v13 = Boolean != 0;
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v17 = (unsigned __int16)WTF::JSONImpl::ObjectBase::getBoolean(v15, (const WTF::String *)&v42);
  if (v17 <= 0x100)
    LOBYTE(v17) = 0;
  v18 = v17 != 0;
  v19 = v42;
  v42 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v22 = (unsigned __int16)WTF::JSONImpl::ObjectBase::getBoolean(v20, (const WTF::String *)&v42);
  if (v22 <= 0x100)
    LOBYTE(v22) = 0;
  v23 = v22 != 0;
  v24 = v42;
  v42 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v21);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v27 = (unsigned __int16)WTF::JSONImpl::ObjectBase::getBoolean(v25, (const WTF::String *)&v42);
  if (v27 <= 0x100)
    LOBYTE(v27) = 0;
  v28 = v27 != 0;
  v29 = v42;
  v42 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v26);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v32 = (unsigned __int16)WTF::JSONImpl::ObjectBase::getBoolean(v30, (const WTF::String *)&v42);
  if (v32 <= 0x100)
    LOBYTE(v32) = 0;
  v33 = v32 != 0;
  result = v42;
  v42 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v31);
    else
      *(_DWORD *)result -= 2;
  }
  *(_QWORD *)v3 = v9;
  *((_BYTE *)v3 + 8) = v13;
  *((_BYTE *)v3 + 9) = v18;
  *((_BYTE *)v3 + 10) = v23;
  *((_BYTE *)v3 + 11) = v28;
  *((_BYTE *)v3 + 12) = v33;
  *((_BYTE *)v3 + 16) = 1;
  if (v41 && ((unint64_t)v40 & 0x8000000000000) != 0)
  {
    result = (WTF::StringImpl *)((unint64_t)v40 & 0xFFFFFFFFFFFFLL);
    do
    {
      v34 = __ldaxr((unsigned int *)result);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, (unsigned int *)result));
    if (!v35)
    {
      atomic_store(1u, (unsigned int *)result);
      return (WTF::StringImpl *)WTF::fastFree(result, v31);
    }
  }
  return result;
}

