uint64_t WebCore::RenderElement::getTrailingCorner(WebCore::RenderElement *this, WebCore::FloatPoint *a2, BOOL *a3)
{
  WebCore::RenderElement *v4;
  float v5;
  void (*v6)(void);
  WebCore::RenderObject *v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  unint64_t v25;
  signed int v26;
  unint64_t v27;
  unint64_t v28;
  signed int v29;
  signed int v30;
  float v31;
  int v32;
  int v33;
  float v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  WTF *v38;
  WTF *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  char v43;
  char v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  char v48;
  __int16 v49;
  int v50;
  int v51;

  v4 = this;
  if ((*((_BYTE *)this + 20) & 3) != 0)
  {
    if ((*((_BYTE *)this + 45) & 4) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1963B0548);
    }
    v5 = (float)*((int *)this + 41) * 0.015625;
    *(float *)&v40 = (float)*((int *)this + 40) * 0.015625;
    *((float *)&v40 + 1) = v5;
    v44 = 0;
    v41 = 0u;
    v42 = 0u;
    v43 = 0;
    v46 = 0;
    v47 = 0;
    v45 = 0;
    v48 = 0;
    v49 = 1;
    v50 = 0;
    v51 = 0;
    v6 = *(void (**)(void))(*(_QWORD *)this + 576);
LABEL_55:
    v6();
    WebCore::TransformState::flatten((WebCore::TransformState *)&v40, 0);
    v37 = v40;
    v38 = v46;
    v46 = 0;
    if (v38)
      WTF::fastFree(v38, v36);
    v39 = v45;
    v45 = 0;
    if (v39)
      WTF::fastFree(v39, v36);
    *(_QWORD *)a2 = v37;
    return 1;
  }
  else
  {
    while (1)
    {
      v7 = (WebCore::RenderObject *)(*(uint64_t (**)(WebCore::RenderElement *))(*(_QWORD *)v4 + 120))(v4);
      if (!v7)
      {
        v20 = *((unsigned int *)v4 + 10);
        if (!(v20 | ((unint64_t)*((unsigned __int8 *)v4 + 44) << 32)))
          break;
        v7 = *(WebCore::RenderObject **)((v20 | ((unint64_t)*((unsigned __int8 *)v4 + 44) << 32)) + 8);
        if (!v7)
          break;
      }
LABEL_5:
      if ((*((_BYTE *)v7 + 45) & 2) == 0)
      {
        v4 = v7;
        if ((*((_BYTE *)v7 + 20) & 2) == 0)
          continue;
      }
      *(_QWORD *)a2 = 0;
      if ((*((_BYTE *)v7 + 45) & 2) == 0)
      {
        if ((*((_BYTE *)v7 + 45) & 4) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1963B0568);
        }
        v24 = *((_QWORD *)v7 + 19);
        v25 = *((_QWORD *)v7 + 20);
        v26 = v24 + v25;
        if (__OFADD__((_DWORD)v24, (_DWORD)v25))
          v26 = (v24 >> 31) + 0x7FFFFFFF;
        v27 = HIDWORD(v24);
        v28 = HIDWORD(v25);
        v18 = __OFADD__((_DWORD)v27, (_DWORD)v28);
        v29 = v27 + v28;
        v30 = (v27 >> 31) + 0x7FFFFFFF;
        if (!v18)
          v30 = v29;
        *(float *)a2 = (float)((float)v26 * 0.015625) + 0.0;
        v31 = (float)((float)v30 * 0.015625) + 0.0;
        goto LABEL_54;
      }
      v8 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v7 + 672))(v7);
      v11 = (_DWORD)v8 << 6;
      if ((int)v8 < -33554432)
        v11 = 0x80000000;
      if ((int)v8 <= 0x1FFFFFF)
        v12 = v11;
      else
        v12 = 0x7FFFFFFF;
      v13 = HIDWORD(v8) << 6;
      if (SHIDWORD(v8) < -33554432)
        v13 = 0x80000000;
      if (SHIDWORD(v8) <= 0x1FFFFFF)
        v14 = v13;
      else
        v14 = 0x7FFFFFFF;
      v15 = v9 << 6;
      if (v9 < -33554432)
        v15 = 0x80000000;
      if (v9 > 0x1FFFFFF)
        v15 = 0x7FFFFFFF;
      v16 = v10 << 6;
      if (v10 < -33554432)
        v16 = 0x80000000;
      if (v10 <= 0x1FFFFFF)
        v17 = v16;
      else
        v17 = 0x7FFFFFFF;
      v18 = __OFADD__(v12, v15);
      v19 = v12 + v15;
      if (v18)
      {
        v19 = (v12 >> 31) + 0x7FFFFFFF;
LABEL_51:
        v18 = __OFADD__(v14, v17);
        v32 = v14 + v17;
        v33 = (v14 >> 31) + 0x7FFFFFFF;
        if (!v18)
          v33 = v32;
        v34 = *((float *)a2 + 1);
        *(float *)a2 = (float)((float)v19 * 0.015625) + *(float *)a2;
        v31 = (float)((float)v33 * 0.015625) + v34;
LABEL_54:
        *((float *)a2 + 1) = v31;
        v35 = WebCore::RenderObject::container(v7);
        v40 = *(_QWORD *)a2;
        v44 = 0;
        v41 = 0u;
        v42 = 0u;
        v43 = 0;
        v46 = 0;
        v47 = 0;
        v45 = 0;
        v48 = 0;
        v49 = 1;
        v50 = 0;
        v51 = 0;
        v6 = *(void (**)(void))(*(_QWORD *)v35 + 576);
        goto LABEL_55;
      }
      if (!v19 && !__OFADD__(v14, v17))
      {
        v4 = v7;
        if (!(v14 + v17))
          continue;
      }
      goto LABEL_51;
    }
    while (1)
    {
      v21 = *((_QWORD *)v4 + 4);
      if (!v21)
        return 0;
      v4 = *(WebCore::RenderElement **)(v21 + 8);
      if (!v4)
        return 0;
      v22 = *((unsigned int *)v4 + 10);
      if (v22 | ((unint64_t)*((unsigned __int8 *)v4 + 44) << 32))
      {
        v7 = *(WebCore::RenderObject **)((v22 | ((unint64_t)*((unsigned __int8 *)v4 + 44) << 32)) + 8);
        if (v7)
          goto LABEL_5;
      }
    }
  }
}

uint64_t WebCore::RenderElement::absoluteAnchorRect(WebCore::RenderElement *this, BOOL *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  unsigned int v9;
  uint64_t v10;
  float v11;
  unsigned int v12;
  uint64_t v13;
  BOOL v15[2];
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  *(_WORD *)v15 = 0;
  WebCore::RenderElement::getLeadingCorner(this, (WebCore::FloatPoint *)&v17, &v15[1]);
  WebCore::RenderElement::getTrailingCorner(this, (WebCore::FloatPoint *)&v16, v15);
  v5 = *((float *)&v17 + 1);
  v4 = *(float *)&v17;
  if (*(float *)&v16 >= *(float *)&v17)
    v6 = *(float *)&v17;
  else
    v6 = *(float *)&v16;
  if (*((float *)&v16 + 1) >= *((float *)&v17 + 1))
    v7 = *((float *)&v17 + 1);
  else
    v7 = *((float *)&v16 + 1);
  if ((*((_BYTE *)this + 20) & 3) != 0)
  {
    v4 = v6;
    v5 = v7;
  }
  if (a2)
    *a2 = v15[1];
  v8 = floorf(v4 * 64.0);
  if (v8 > -2147500000.0)
    v9 = (int)v8;
  else
    v9 = 0x80000000;
  if (v8 < 2147500000.0)
    v10 = v9;
  else
    v10 = 0x7FFFFFFFLL;
  v11 = floorf(v5 * 64.0);
  if (v11 > -2147500000.0)
    v12 = (int)v11;
  else
    v12 = 0x80000000;
  if (v11 < 2147500000.0)
    v13 = v12;
  else
    v13 = 0x7FFFFFFFLL;
  return v10 | (v13 << 32);
}

WebCore::Length *WebCore::RenderElement::absoluteAnchorRectWithScrollMargin@<X0>(WebCore::RenderElement *this@<X0>, BOOL *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WebCore::Length *result;
  int v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  unint64_t v15;
  float v16;
  unint64_t v17;
  float v18;
  double v19;
  float v20;
  int v21;
  float v22;
  double v23;
  float v24;
  unint64_t v25;
  float v26;
  double v27;
  float v28;
  unsigned int v29;
  int v30;
  float v31;
  double v32;
  int v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;

  v6 = WebCore::RenderElement::absoluteAnchorRect(this, a2);
  v7 = v5;
  v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  result = (WebCore::Length *)(v8 + 128);
  v10 = *(unsigned __int8 *)(v8 + 132);
  if (*(_BYTE *)(v8 + 132))
    v11 = v10 == 11;
  else
    v11 = 1;
  if (v11)
    goto LABEL_31;
  if (*(_BYTE *)(v8 + 134))
  {
    if (*(float *)result != 0.0)
      goto LABEL_31;
  }
  else if (*(_DWORD *)result)
  {
    goto LABEL_31;
  }
  if (*(_BYTE *)(v8 + 140))
    v12 = *(_BYTE *)(v8 + 140) == 11;
  else
    v12 = 1;
  if (v12)
    goto LABEL_31;
  if (*(_BYTE *)(v8 + 142))
  {
    if (*(float *)(v8 + 136) != 0.0)
      goto LABEL_31;
  }
  else if (*(_DWORD *)(v8 + 136))
  {
    goto LABEL_31;
  }
  if (*(_BYTE *)(v8 + 148))
    v13 = *(_BYTE *)(v8 + 148) == 11;
  else
    v13 = 1;
  if (v13)
    goto LABEL_31;
  if (*(_BYTE *)(v8 + 150))
  {
    if (*(float *)(v8 + 144) == 0.0)
      goto LABEL_25;
  }
  else if (!*(_DWORD *)(v8 + 144))
  {
LABEL_25:
    if (*(_BYTE *)(v8 + 156))
      v14 = *(_BYTE *)(v8 + 156) == 11;
    else
      v14 = 1;
    if (v14)
      goto LABEL_31;
    if (*(_BYTE *)(v8 + 158))
    {
      if (*(float *)(v8 + 152) != 0.0)
        goto LABEL_31;
    }
    else if (*(_DWORD *)(v8 + 152))
    {
      goto LABEL_31;
    }
    *(_QWORD *)a3 = v6;
    *(_QWORD *)(a3 + 8) = v5;
    goto LABEL_94;
  }
LABEL_31:
  v15 = HIDWORD(v5);
  if (v10 == 4)
  {
    v16 = *(float *)(v8 + 128);
    if (!*(_BYTE *)(v8 + 134))
      v16 = (float)SLODWORD(v16);
LABEL_39:
    v19 = v16 * 64.0;
    if (v19 >= 2147483650.0)
    {
      LODWORD(v17) = 0x7FFFFFFF;
    }
    else if (v19 <= -2147483650.0)
    {
      LODWORD(v17) = 0x80000000;
    }
    else
    {
      LODWORD(v17) = (int)v19;
    }
  }
  else
  {
    LODWORD(v17) = 0;
    switch(*(_BYTE *)(v8 + 132))
    {
      case 0:
      case 1:
      case 9:
        v17 = HIDWORD(v5);
        break;
      case 3:
        v18 = *(float *)(v8 + 128);
        if (!*(_BYTE *)(v8 + 134))
          v18 = (float)SLODWORD(v18);
        v16 = (float)((float)((float)SHIDWORD(v5) * 0.015625) * v18) / 100.0;
        goto LABEL_39;
      case 0xB:
        result = (WebCore::Length *)WebCore::Length::nonNanCalculatedValue(result, (float)SHIDWORD(v5) * 0.015625);
        goto LABEL_39;
      default:
        break;
    }
  }
  if (*(_BYTE *)(v8 + 140) == 4)
  {
    v20 = *(float *)(v8 + 136);
    if (!*(_BYTE *)(v8 + 142))
      v20 = (float)SLODWORD(v20);
LABEL_50:
    v23 = v20 * 64.0;
    if (v23 >= 2147483650.0)
    {
      v21 = 0x7FFFFFFF;
    }
    else if (v23 <= -2147483650.0)
    {
      v21 = 0x80000000;
    }
    else
    {
      v21 = (int)v23;
    }
  }
  else
  {
    v21 = 0;
    switch(*(_BYTE *)(v8 + 140))
    {
      case 0:
      case 1:
      case 9:
        v21 = v7;
        break;
      case 3:
        v22 = *(float *)(v8 + 136);
        if (!*(_BYTE *)(v8 + 142))
          v22 = (float)SLODWORD(v22);
        v20 = (float)((float)((float)(int)v7 * 0.015625) * v22) / 100.0;
        goto LABEL_50;
      case 0xB:
        result = (WebCore::Length *)WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v8 + 136), (float)(int)v7 * 0.015625);
        goto LABEL_50;
      default:
        break;
    }
  }
  if (*(_BYTE *)(v8 + 148) == 4)
  {
    v24 = *(float *)(v8 + 144);
    if (!*(_BYTE *)(v8 + 150))
      v24 = (float)SLODWORD(v24);
LABEL_61:
    v27 = v24 * 64.0;
    if (v27 >= 2147483650.0)
    {
      LODWORD(v25) = 0x7FFFFFFF;
    }
    else if (v27 <= -2147483650.0)
    {
      LODWORD(v25) = 0x80000000;
    }
    else
    {
      LODWORD(v25) = (int)v27;
    }
  }
  else
  {
    LODWORD(v25) = 0;
    switch(*(_BYTE *)(v8 + 148))
    {
      case 0:
      case 1:
      case 9:
        v25 = HIDWORD(v7);
        break;
      case 3:
        v26 = *(float *)(v8 + 144);
        if (!*(_BYTE *)(v8 + 150))
          v26 = (float)SLODWORD(v26);
        v24 = (float)((float)((float)(int)v15 * 0.015625) * v26) / 100.0;
        goto LABEL_61;
      case 0xB:
        result = (WebCore::Length *)WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v8 + 144), (float)(int)v15 * 0.015625);
        goto LABEL_61;
      default:
        break;
    }
  }
  if (*(_BYTE *)(v8 + 156) != 4)
  {
    v29 = 0;
    v30 = v7;
    switch(*(_BYTE *)(v8 + 156))
    {
      case 0:
      case 1:
      case 9:
        goto LABEL_75;
      case 3:
        v31 = *(float *)(v8 + 152);
        if (!*(_BYTE *)(v8 + 158))
          v31 = (float)SLODWORD(v31);
        v28 = (float)((float)((float)(int)v7 * 0.015625) * v31) / 100.0;
        goto LABEL_72;
      case 0xB:
        result = (WebCore::Length *)WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v8 + 152), (float)(int)v7 * 0.015625);
        goto LABEL_72;
      default:
        goto LABEL_108;
    }
  }
  v28 = *(float *)(v8 + 152);
  if (!*(_BYTE *)(v8 + 158))
    v28 = (float)SLODWORD(v28);
LABEL_72:
  v32 = v28 * 64.0;
  if (v32 >= 2147483650.0)
  {
    v29 = 0x7FFFFFFF;
LABEL_108:
    v33 = -v29;
  }
  else
  {
    if (v32 <= -2147483650.0)
      goto LABEL_76;
    v30 = (int)v32;
LABEL_75:
    if (v30 == 0x80000000)
    {
LABEL_76:
      v33 = 0x7FFFFFFF;
      v29 = 0x80000000;
    }
    else
    {
      v33 = -v30;
      v29 = v30;
    }
  }
  if ((_DWORD)v17 == 0x80000000)
    v34 = 0x7FFFFFFF;
  else
    v34 = -(int)v17;
  v35 = __OFADD__((_DWORD)v6, v33);
  v36 = v6 + v33;
  if (v35)
    v36 = (v6 >> 31) + 0x7FFFFFFF;
  v35 = __OFADD__(HIDWORD(v6), v34);
  v37 = HIDWORD(v6) + v34;
  if (v35)
    v37 = (HIDWORD(v6) >> 31) + 0x7FFFFFFF;
  v38 = v29 + v21;
  if (__OFADD__(v29, v21))
    v38 = (v29 >> 31) + 0x7FFFFFFF;
  v39 = v17 + v25;
  if (__OFADD__((_DWORD)v17, (_DWORD)v25))
    v39 = (v17 >> 31) + 0x7FFFFFFF;
  v40 = v7 + v38;
  if (__OFADD__((_DWORD)v7, v38))
    v40 = (v7 >> 31) + 0x7FFFFFFF;
  v41 = v15 + v39;
  if (__OFADD__((_DWORD)v15, v39))
    v41 = (v15 >> 31) + 0x7FFFFFFF;
  *(_DWORD *)a3 = v36;
  *(_DWORD *)(a3 + 4) = v37;
  *(_DWORD *)(a3 + 8) = v40;
  *(_DWORD *)(a3 + 12) = v41;
LABEL_94:
  *(_QWORD *)(a3 + 16) = v6;
  *(_QWORD *)(a3 + 24) = v7;
  return result;
}

uint64_t WebCore::RenderElement::paintFocusRing(uint64_t a1, uint64_t a2, WebCore::RenderStyle *this, uint64_t *a4)
{
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  int v21;
  int v22;
  int v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  double v32;
  double v33;
  double v34;
  double v35;
  BOOL v36;
  int v37;
  int v38;
  BOOL v39;
  int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  int v45;
  int v46;
  int v47;
  double v48;
  double v49;
  double v50;
  double v51;
  unsigned int v52;
  unsigned int v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  _OWORD *v59;
  uint64_t v60;
  unsigned __int8 v61;
  void (**v62)(WebCore::RenderThemeIOS *__hidden);
  uint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  uint64_t result;
  uint64_t v67;
  int v68;
  void *v69;
  WTF *v70;
  WTF *v71;
  void *v72;
  WTF *v73;
  WTF *v74;
  uint64_t v75;
  __int128 v76;
  void *v77;
  uint64_t v78;
  int v79;
  int v80;
  float v81;
  __n128 v82;
  WTF *v83;
  uint64_t v84;
  __int128 v85;
  unsigned int *v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  WTF *v95;
  int v96;
  int v97;
  __int128 v98;
  unint64_t v99;
  WTF *v100;
  uint64_t v101;
  _OWORD v102[4];
  int v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v8 = WebCore::RenderStyle::outlineOffset(this);
  v100 = 0;
  v101 = 0;
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 528);
  v10 = 1.0;
  if (v9)
  {
    v11 = *(_QWORD *)(v9 + 8);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 24);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
        {
          v14 = (*(_DWORD *)v13)++;
          v10 = *(float *)(v13 + 364);
          if (v14)
          {
            *(_DWORD *)v13 = v14;
          }
          else
          {
            WebCore::Page::~Page(v13);
            WTF::fastFree(v71, v72);
          }
        }
      }
    }
  }
  v15 = *((unsigned int *)a4 + 3);
  if ((_DWORD)v15)
  {
    v16 = 0;
    v17 = *a4;
    v18 = v17 + 16 * v15;
    v19 = v8 * 64.0;
    v20 = v10;
    v21 = (int)fmax(v19, -2147483650.0);
    if (v19 < 2147483650.0)
      v22 = v21;
    else
      v22 = 0x7FFFFFFF;
    do
    {
      v23 = *(_DWORD *)v17 - v22;
      if (__OFSUB__(*(_DWORD *)v17, v22))
        v23 = (*(_DWORD *)v17 >> 31) + 0x7FFFFFFF;
      v24 = *(_QWORD *)(v17 + 8);
      v25 = v24 + v22;
      if (__OFADD__((_DWORD)v24, v22))
        v25 = (v24 >> 31) + 0x7FFFFFFF;
      v26 = v25 + v22;
      if (__OFADD__(v25, v22))
        v26 = (v25 >> 31) + 0x7FFFFFFF;
      v27 = *(_DWORD *)(v17 + 4);
      v28 = v27 - v22;
      if (__OFSUB__(v27, v22))
        v28 = (v27 >> 31) + 0x7FFFFFFF;
      v29 = HIDWORD(v24);
      v30 = v29 + v22;
      if (__OFADD__((_DWORD)v29, v22))
        v30 = (v29 >> 31) + 0x7FFFFFFF;
      v31 = v30 + v22;
      if (__OFADD__(v30, v22))
        v31 = (v30 >> 31) + 0x7FFFFFFF;
      v32 = (double)v23 * 0.015625;
      if (v32 < 0.0)
        v33 = round((v32 + (double)-v23) * v20) / v20 - (double)-v23;
      else
        v33 = round(v32 * v20) / v20;
      v34 = (double)v28 * 0.015625;
      if (v34 < 0.0)
        v35 = round((v34 + (double)-v28) * v20) / v20 - (double)-v28;
      else
        v35 = round(v34 * v20) / v20;
      v36 = -v23 < 0;
      v37 = -v23 & 0x3F;
      v38 = v23 & 0x3F;
      if (!v36)
        v38 = -v37;
      v39 = __OFADD__(v38, v26);
      v40 = v38 + v26;
      if (v39)
        v40 = (v38 >> 31) + 0x7FFFFFFF;
      v41 = (double)v40 * 0.015625;
      if (v41 < 0.0)
        v42 = round((v41 + (double)-v40) * v20) / v20 - (double)-v40;
      else
        v42 = round(v41 * v20) / v20;
      v43 = (double)v38 * 0.015625;
      if (v43 < 0.0)
        v44 = round((v43 + (double)-v38) * v20) / v20 - (double)-v38;
      else
        v44 = round(v43 * v20) / v20;
      v36 = -v28 < 0;
      v45 = -v28 & 0x3F;
      v46 = v28 & 0x3F;
      if (!v36)
        v46 = -v45;
      v47 = v46 + v31;
      if (__OFADD__(v46, v31))
        v47 = (v46 >> 31) + 0x7FFFFFFF;
      v48 = (double)v47 * 0.015625;
      if (v48 < 0.0)
        v49 = round((v48 + (double)-v47) * v20) / v20 - (double)-v47;
      else
        v49 = round(v48 * v20) / v20;
      v50 = (double)v46 * 0.015625;
      if (v50 < 0.0)
        v51 = round((v50 + (double)-v46) * v20) / v20 - (double)-v46;
      else
        v51 = round(v50 * v20) / v20;
      *(float *)&v52 = v35;
      *(float *)&v53 = v33;
      v54 = v42;
      v55 = v44;
      v56 = v54 - v55;
      v57 = v49;
      v58 = v51;
      *(_QWORD *)&v102[0] = __PAIR64__(v52, v53);
      *((float *)v102 + 2) = v56;
      *((float *)v102 + 3) = v57 - v58;
      if (v16 == (_DWORD)v101)
      {
        v59 = (_OWORD *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v100, v16 + 1, (unint64_t)v102);
        *((_OWORD *)v100 + HIDWORD(v101)) = *v59;
      }
      else
      {
        *((_OWORD *)v100 + v16) = v102[0];
      }
      v16 = ++HIDWORD(v101);
      v17 += 16;
    }
    while (v17 != v18);
  }
  v60 = a1;
  if ((*(_BYTE *)(a1 + 45) & 2) != 0)
  {
    v60 = *(_QWORD *)(a1 + 32);
    if (v60)
      v60 = *(_QWORD *)(v60 + 8);
  }
  v61 = WebCore::Document::styleColorOptions(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8), (const WebCore::RenderStyle *)(v60 + 80)) | 2;
  {
    v62 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
  }
  else
  {
    v88 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    *(_OWORD *)(v88 + 40) = 0u;
    *(_OWORD *)(v88 + 24) = 0u;
    v62 = &off_1E335BC30;
    *(_QWORD *)v88 = &off_1E335BC30;
  }
  v63 = v61;
  v65 = (unint64_t *)(((uint64_t (*)(uint64_t *, _QWORD))v62[134])(&WebCore::RenderTheme::singleton(void)::theme, v61)+ 32);
  v64 = *v65;
  if ((*v65 & 0x4000000000000) == 0)
  {
    (*(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t))(WebCore::RenderTheme::singleton(void)::theme + 240))(v102, &WebCore::RenderTheme::singleton(void)::theme, v63);
    WebCore::Color::operator=(v65, v102);
    if ((*(_QWORD *)&v102[0] & 0x8000000000000) != 0)
    {
      v92 = (unsigned int *)(*(_QWORD *)&v102[0] & 0xFFFFFFFFFFFFLL);
      do
      {
        v93 = __ldaxr(v92);
        v94 = v93 - 1;
      }
      while (__stlxr(v94, v92));
      if (!v94)
      {
        atomic_store(1u, v92);
        WTF::fastFree((WTF *)v92, v77);
      }
    }
    v64 = *v65;
  }
  v99 = v64;
  if ((v64 & 0x8000000000000) != 0)
  {
    v86 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFLL);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 + 1, v86));
  }
  result = WebCore::RenderStyle::hasBorderRadius(this);
  if ((result & 1) != 0)
  {
    v78 = *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 104;
    v79 = *((_DWORD *)this + 11);
    v80 = (*((_DWORD *)this + 10) >> 26) & 1;
    v81 = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)
                                                                                 + 40)
                                                                     + 8));
    v82.n128_f32[0] = v8;
    WebCore::PathUtilities::pathWithShrinkWrappedRectsForOutline((uint64_t)&v100, v78, v80, (unsigned __int16)v79 >> 13, (uint64_t)v102, v82, v81);
    if (WebCore::Path::isEmpty((WebCore::Path *)v102) && HIDWORD(v101))
    {
      v83 = v100;
      v84 = 16 * HIDWORD(v101);
      do
      {
        v85 = *(_OWORD *)v83;
        v83 = (WTF *)((char *)v83 + 16);
        v98 = v85;
        WebCore::Path::addRect((WebCore::Path *)v102, (const WebCore::FloatRect *)&v98);
        v84 -= 16;
      }
      while (v84);
    }
    (*(void (**)(_QWORD, _OWORD *, unint64_t *))(**(_QWORD **)(a2 + 80) + 616))(*(_QWORD *)(a2 + 80), v102, &v99);
    if (v103 != -1)
      ((void (*)(__int128 *, char *))off_1E3425520[v103])(&v98, (char *)v102 + 8);
  }
  else
  {
    v67 = *(_QWORD *)(a2 + 80);
    v68 = HIDWORD(v101);
    v95 = 0;
    v96 = 0;
    v97 = HIDWORD(v101);
    if (HIDWORD(v101))
    {
      if (HIDWORD(v101) >> 28)
      {
        __break(0xC471u);
        return result;
      }
      v73 = (WTF *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v101)));
      v96 = v68;
      v95 = v73;
      if (HIDWORD(v101))
      {
        v74 = v100;
        v75 = 16 * HIDWORD(v101);
        do
        {
          v76 = *(_OWORD *)v74;
          v74 = (WTF *)((char *)v74 + 16);
          *(_OWORD *)v73 = v76;
          v73 = (WTF *)((char *)v73 + 16);
          v75 -= 16;
        }
        while (v75);
      }
    }
    WebCore::RenderStyle::outlineOffset(this);
    (*(void (**)(uint64_t, WTF **, unint64_t *))(*(_QWORD *)v67 + 624))(v67, &v95, &v99);
    v70 = v95;
    if (v95)
    {
      v95 = 0;
      v96 = 0;
      WTF::fastFree(v70, v69);
    }
  }
  if ((v99 & 0x8000000000000) != 0)
  {
    v89 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFLL);
    do
    {
      v90 = __ldaxr(v89);
      v91 = v90 - 1;
    }
    while (__stlxr(v91, v89));
    if (!v91)
    {
      atomic_store(1u, v89);
      WTF::fastFree((WTF *)v89, v69);
    }
  }
  result = (uint64_t)v100;
  if (v100)
  {
    v100 = 0;
    LODWORD(v101) = 0;
    return WTF::fastFree((WTF *)result, v69);
  }
  return result;
}

uint64_t WebCore::RenderElement::paintOutline(WebCore::RenderElement *this, WebCore::PaintInfo *a2, const WebCore::LayoutRect *a3)
{
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  float v12;
  _QWORD v13[2];

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 10) + 40))(*((_QWORD *)a2 + 10));
  if ((result & 1) == 0)
  {
    v7 = *(_QWORD *)(*((_QWORD *)this + 11) + 16);
    v8 = *(unsigned __int8 *)(v7 + 52);
    if ((v8 & 0xE) != 0 && (v8 & 0xF) != 0)
    {
      v12 = *(float *)(v7 + 48);
      if (((v12 < 3.0) & (v8 >> 4)) != 0 || v12 > 0.0)
        goto LABEL_14;
    }
    if ((*((_BYTE *)this + 45) & 1) == 0)
    {
      v10 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
      if (v10)
      {
        if ((*(_WORD *)(v10 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1963B1580);
        }
        if ((*(_WORD *)(v10 + 30) & 1) != 0)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 8);
          if (*(_BYTE *)(v11 + 3382) || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 1944) + 248) + 1149) & 0x20) != 0)
          {
LABEL_14:
            WebCore::BackgroundPainter::BackgroundPainter(v13, (uint64_t)this, (uint64_t)a2);
            return WebCore::BorderPainter::paintOutline((uint64_t)v13, a3);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderElement::requiresRenderingConsolidationForViewTransition(WebCore::RenderElement *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  int v4;

  v2 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  if (!*(_BYTE *)(v2 + 368))
    return (*((unsigned __int8 *)this + 22) >> 6) & 1;
  v3 = *(WTF::StringImpl **)(v2 + 352);
  if (v3)
  {
    v4 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    if (v4)
    {
      *(_DWORD *)v3 = v4;
      return 1;
    }
    WTF::StringImpl::destroy(v3, a2);
  }
  return 1;
}

uint64_t WebCore::RenderElement::checkForRepaintDuringLayout(WebCore::RenderElement *this)
{
  int v1;
  uint64_t result;
  uint64_t v3;

  v1 = *((_DWORD *)this + 5);
  if ((v1 & 0x200) == 0)
    return 0;
  if ((v1 & 0x8000) == 0)
    return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                                + 40)
                                                                    + 8)
                                                        + 528)
                                            + 8)
                                + 288)
                    + 476) == 0;
  if ((*((_BYTE *)this + 45) & 0x10) != 0)
  {
    v3 = *((_QWORD *)this + 18);
    if (!v3 || (*(_BYTE *)(v3 + 25) & 8) == 0)
      return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)
                                                                                              + 8)
                                                                                  + 40)
                                                                      + 8)
                                                          + 528)
                                              + 8)
                                  + 288)
                      + 476) == 0;
    return 0;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

BOOL WebCore::RenderStyle::hasTransformRelatedProperty(WebCore::RenderStyle *this)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *((_QWORD *)this + 1);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 40) + 20))
    return 1;
  v3 = *(_QWORD *)(v1 + 40);
  return *(_QWORD *)(v3 + 328)
      || *(_QWORD *)(v3 + 320)
      || *(_QWORD *)(v3 + 312)
      || *(_QWORD *)(v3 + 304)
      || (*(_DWORD *)(v3 + 636) & 0x180) == 0x80
      || *(float *)(v3 + 260) != -1.0;
}

uint64_t WebCore::RenderDescendantIteratorAdapter<WebCore::RenderBlock>::begin(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;

  v1 = *a1;
  if (*(unsigned int *)(*a1 + 64) | ((unint64_t)*(unsigned __int8 *)(*a1 + 68) << 32))
  {
    v2 = *(_QWORD *)((*(unsigned int *)(*a1 + 64) | ((unint64_t)*(unsigned __int8 *)(*a1 + 68) << 32)) + 8);
    if (v2)
    {
      if ((*(_BYTE *)(v2 + 45) & 0x40) == 0)
      {
        do
        {
          v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 112))(v2);
          if (!v3)
          {
            if (v2 == v1)
              return v1;
            v4 = *(unsigned int *)(v2 + 47);
            if (!(v4 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32))
              || (v3 = *(_QWORD *)((v4 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)) + 8)) == 0)
            {
              v5 = *(_QWORD *)(v2 + 32);
              if (!v5)
                return v1;
              v6 = *(_QWORD *)(v5 + 8);
              if (!v6 || v6 == v1)
                return v1;
              while (1)
              {
                v9 = *(unsigned int *)(v6 + 47);
                if (v9 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32))
                {
                  v3 = *(_QWORD *)((v9 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32)) + 8);
                  if (v3)
                    break;
                }
                v10 = *(_QWORD *)(v6 + 32);
                if (v10)
                {
                  v6 = *(_QWORD *)(v10 + 8);
                  if (v6 && v6 != v1)
                    continue;
                }
                return v1;
              }
            }
          }
          v2 = v3;
        }
        while ((*(_BYTE *)(v3 + 45) & 0x40) == 0);
      }
    }
  }
  return v1;
}

uint64_t *WebCore::RenderDescendantIterator<WebCore::RenderObject>::operator++(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a1;
  v2 = a1[1];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 112))(v2);
  if (!v4)
  {
    if (v2 == v3)
      goto LABEL_12;
    v6 = *(unsigned int *)(v2 + 47);
    if (v6 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32))
    {
      v4 = *(_QWORD *)((v6 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)) + 8);
      if (v4)
        goto LABEL_2;
    }
    v7 = *(_QWORD *)(v2 + 32);
    if (!v7 || ((v8 = *(_QWORD *)(v7 + 8)) != 0 ? (v9 = v8 == v3) : (v9 = 1), v9))
    {
LABEL_12:
      v4 = 0;
      goto LABEL_2;
    }
    do
    {
      v10 = *(unsigned int *)(v8 + 47);
      if (v10 | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32))
      {
        v4 = *(_QWORD *)((v10 | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32)) + 8);
        if (v4)
          break;
      }
      v11 = *(_QWORD *)(v8 + 32);
      if (!v11)
        goto LABEL_12;
      v4 = 0;
      v8 = *(_QWORD *)(v11 + 8);
    }
    while (v8 && v8 != v3);
  }
LABEL_2:
  a1[1] = v4;
  return a1;
}

_BYTE *WebCore::RenderElement::removeFromRenderFragmentedFlow(WebCore::RenderElement *this)
{
  return WebCore::RenderElement::removeFromRenderFragmentedFlowIncludingDescendants(this, (void *)1);
}

_BYTE *WebCore::RenderElement::removeFromRenderFragmentedFlowIncludingDescendants(_BYTE *this, void *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  void *v11;
  _BYTE *v12;
  int v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;

  v2 = (int)a2;
  v3 = (uint64_t)this;
  if ((this[52] & 7) == 1)
  {
    if ((this[53] & 2) != 0)
      v2 = 0;
    else
      v2 = (int)a2;
  }
  v4 = *((unsigned int *)this + 16);
  if (v4 | ((unint64_t)this[68] << 32))
  {
    v5 = *(_QWORD *)((v4 | ((unint64_t)this[68] << 32)) + 8);
    if (v5)
    {
      if ((v2 & 1) != 0)
      {
        while (1)
        {
          v6 = *(_DWORD *)(v5 + 16) + 1;
          *(_DWORD *)(v5 + 16) = v6;
          if ((*(_BYTE *)(v5 + 45) & 2) != 0)
          {
            *(_DWORD *)(v5 + 20) &= ~0x10000000u;
          }
          else
          {
            this = (_BYTE *)WebCore::RenderElement::removeFromRenderFragmentedFlowIncludingDescendants((WebCore::RenderElement *)v5, 1);
            v6 = *(_DWORD *)(v5 + 16);
          }
          if (!v6)
            break;
          *(_DWORD *)(v5 + 16) = v6 - 1;
          v7 = *(unsigned int *)(v5 + 47);
          if (v7 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32))
          {
            v5 = *(_QWORD *)((v7 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32)) + 8);
            if (v5)
              continue;
          }
          goto LABEL_20;
        }
      }
      else
      {
        while (1)
        {
          v8 = *(_DWORD *)(v5 + 16) + 1;
          *(_DWORD *)(v5 + 16) = v8;
          if ((*(_BYTE *)(v5 + 45) & 2) == 0)
          {
            this = (_BYTE *)WebCore::RenderElement::removeFromRenderFragmentedFlowIncludingDescendants((WebCore::RenderElement *)v5, 0);
            v8 = *(_DWORD *)(v5 + 16);
          }
          if (!v8)
            break;
          *(_DWORD *)(v5 + 16) = v8 - 1;
          v9 = *(unsigned int *)(v5 + 47);
          if (v9 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32))
          {
            v5 = *(_QWORD *)((v9 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32)) + 8);
            if (v5)
              continue;
          }
          goto LABEL_20;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x1963B1A80);
    }
  }
LABEL_20:
  if ((*(_BYTE *)(v3 + 23) & 0x10) != 0
    && (this = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 648))(v3)) != 0)
  {
    v15 = this;
    ++*((_DWORD *)this + 4);
    v10 = 0;
    while (1)
    {
      this = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v15 + 1944))(v15, v3);
      if ((v15[23] & 0x10) == 0)
        break;
      v16 = *((_QWORD *)v15 + 4);
      if (!v16)
        break;
      this = *(_BYTE **)(v16 + 8);
      if (!this)
        break;
      if ((this[23] & 0x10) != 0)
      {
        this = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 648))(this);
        if (this)
          ++*((_DWORD *)this + 4);
      }
      else
      {
        this = 0;
      }
      v17 = *((_DWORD *)v15 + 4);
      if (!v17)
        goto LABEL_54;
      *((_DWORD *)v15 + 4) = v17 - 1;
      v15 = this;
      if (!this)
        goto LABEL_22;
    }
    v10 = v15;
  }
  else
  {
    v10 = 0;
  }
LABEL_22:
  if (v3 && (*(_BYTE *)(v3 + 45) & 0x40) != 0)
  {
    ++*(_DWORD *)(v3 + 16);
    this = (_BYTE *)WebCore::RenderBlock::ensureBlockRareData((WebCore::RenderBlock *)v3, a2);
    if (this[24])
    {
      v12 = this;
      this = (_BYTE *)*((_QWORD *)this + 2);
      *((_QWORD *)v12 + 2) = 0;
      if (this)
      {
        if (*(_DWORD *)this == 1)
          this = (_BYTE *)WTF::fastFree((WTF *)this, v11);
        else
          --*(_DWORD *)this;
      }
      v12[24] = 0;
    }
    v13 = *(_DWORD *)(v3 + 16);
    if (!v13)
    {
LABEL_54:
      __break(0xC471u);
      JUMPOUT(0x1963B1A40);
    }
    *(_DWORD *)(v3 + 16) = v13 - 1;
  }
  if (v2)
    *(_DWORD *)(v3 + 20) &= ~0x10000000u;
  if (v10)
  {
    v14 = *((_DWORD *)v10 + 4);
    if (!v14)
    {
      __break(0xC471u);
      JUMPOUT(0x1963B1A60);
    }
    *((_DWORD *)v10 + 4) = v14 - 1;
  }
  return this;
}

uint64_t WebCore::RenderElement::resetEnclosingFragmentedFlowAndChildInfoIncludingDescendants(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v3 = result;
  if (a2)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 1944))(a2, result);
  v4 = *(unsigned __int8 *)(v3 + 68);
  for (i = *(unsigned int *)(v3 + 64); ; i = *(unsigned int *)(v7 + 47))
  {
    v6 = i | (v4 << 32);
    if (!v6)
      break;
    v7 = *(_QWORD *)(v6 + 8);
    if (!v7)
      break;
    if ((*(_BYTE *)(v7 + 45) & 2) == 0)
    {
LABEL_8:
      ++*(_DWORD *)(v7 + 16);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 704))(v7, a2);
      v8 = *(_DWORD *)(v7 + 16);
      if (v8)
      {
        *(_DWORD *)(v7 + 16) = v8 - 1;
        while (1)
        {
          v9 = *(unsigned int *)(v7 + 47);
          if (!(v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)))
            break;
          v7 = *(_QWORD *)((v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)) + 8);
          if (!v7)
            break;
          if ((*(_BYTE *)(v7 + 45) & 2) == 0)
            goto LABEL_8;
        }
      }
      else
      {
        result = 286;
        __break(0xC471u);
      }
      return result;
    }
    v4 = *(unsigned __int8 *)(v7 + 51);
  }
  return result;
}

void WebCore::RenderElement::repaintRendererOrClientsOfReferencedSVGResources(WebCore::RenderElement *this, WebCore::SVGElement *a2)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if ((*((_BYTE *)this + 52) & 7) == 4 && (*((_BYTE *)this + 53) & 1) == 0 && (*((_BYTE *)this + 53) & 8) != 0)
  {
LABEL_13:
    v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v4 + 28) & 0x20) != 0)
    {
      *(_DWORD *)(v4 + 24) += 2;
      WebCore::notifyResourceChanged((WebCore *)v4, a2);
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
  else
  {
    for (i = *((_QWORD *)this + 4); i; i = *(_QWORD *)(v3 + 32))
    {
      v3 = *(_QWORD *)(i + 8);
      if (!v3)
        break;
      if ((*(_BYTE *)(v3 + 52) & 7) == 4 && (*(_BYTE *)(v3 + 53) & 1) == 0 && (*(_BYTE *)(v3 + 53) & 8) != 0)
      {
        this = (WebCore::RenderElement *)v3;
        goto LABEL_13;
      }
    }
    WebCore::RenderElement::repaintOldAndNewPositionsForSVGRenderer((uint64_t)this, a2);
  }
}

uint64_t WebCore::lineageOfType<WebCore::RenderSVGResourceContainer>(uint64_t result)
{
  uint64_t v1;

  while ((*(_BYTE *)(result + 52) & 7) != 4 || (*(_BYTE *)(result + 53) & 1) != 0 || (*(_BYTE *)(result + 53) & 8) == 0)
  {
    v1 = *(_QWORD *)(result + 32);
    if (!v1)
      return 0;
    result = *(_QWORD *)(v1 + 8);
    if (!result)
      return result;
  }
  return result;
}

uint64_t WebCore::RenderElement::repaintOldAndNewPositionsForSVGRenderer(uint64_t this, void *a2)
{
  _QWORD *v2;
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int updated;
  double v11;
  int v12;
  unsigned int v13;
  _BYTE v14[20];
  __int128 v15;
  char v16;

  v2 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8);
  if ((*(_QWORD *)(v2[85] + 680) & 0x800000000000) == 0)
    goto LABEL_10;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2[66] + 8) + 288) + 480))
    goto LABEL_10;
  v3 = *(_DWORD *)(this + 20);
  if ((v3 & 0x8000) == 0)
    goto LABEL_10;
  v4 = *(unsigned __int8 *)(this + 46);
  if (v4 != 83)
  {
    if ((*(_BYTE *)(this + 52) & 7) == 4)
    {
      if (v4 == 85 || (*(_BYTE *)(this + 53) & 1) == 0)
        goto LABEL_9;
      v13 = v4 - 67;
      if (v13 > 0x13)
      {
LABEL_10:
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2[243] + 24) + 8) + 40) + 8) + 3382))
        {
          LOBYTE(v15) = 0;
          v16 = 0;
          v14[0] = 0;
          v14[16] = 0;
          return WebCore::RenderObject::issueRepaint(this, &v15, 0, 0, (uint64_t)v14);
        }
        return this;
      }
      v6 = 1 << v13;
      v7 = 655377;
    }
    else
    {
      v5 = v4 - 67;
      if (v5 > 0x13)
        goto LABEL_10;
      v6 = 1 << v5;
      v7 = 917521;
    }
    if ((v6 & v7) == 0)
      goto LABEL_10;
  }
LABEL_9:
  if ((v3 & 0xF8) != 0)
    goto LABEL_10;
  if ((*(_BYTE *)(this + 45) & 0x10) == 0)
    goto LABEL_27;
  v8 = *(_QWORD *)(this + 144);
  if (v8)
    ++*(_DWORD *)(v8 + 8);
  v9 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 24) + 8) + 40) + 8)
                  + 1496);
  if (v9)
  {
    ++*(_DWORD *)v9;
    WebCore::DocumentMarkerController::invalidateRectsForAllMarkers(v9, a2);
    if (!*(_DWORD *)v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1963B1F1CLL);
    }
    --*(_DWORD *)v9;
  }
  updated = WebCore::RenderLayer::flagsForUpdateLayerPositions((WebCore::RenderLayer *)v8, (WebCore::RenderLayer *)a2);
  this = WebCore::RenderLayer::recursiveUpdateLayerPositions(v8, updated, 0, v11);
  v12 = *(_DWORD *)(v8 + 8);
  if (!v12)
  {
LABEL_27:
    __break(0xC471u);
    JUMPOUT(0x1963B1EFCLL);
  }
  *(_DWORD *)(v8 + 8) = v12 - 1;
  return this;
}

uint64_t WebCore::RenderElement::backdropRenderer@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;
  _QWORD *v3;

  if ((*(_BYTE *)(this + 21) & 0x40) != 0)
  {
    v3 = a2;
    this = WebCore::RenderObject::rareData((WebCore::RenderObject *)this);
    v2 = *(_DWORD **)(this + 16);
    if (v2)
      ++*v2;
    a2 = v3;
  }
  else
  {
    v2 = 0;
  }
  *a2 = v2;
  return this;
}

WTF *WebCore::RenderElement::setBackdropRenderer(WebCore::RenderElement *this, WebCore::RenderBlockFlow *a2)
{
  uint64_t v3;
  void *v4;
  WTF *v5;
  WTF *result;
  WTF *v8;

  v3 = *((_QWORD *)a2 + 1);
  if (v3)
    goto LABEL_2;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = a2;
  v8 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  if (!v8)
    goto LABEL_2;
  if (*(_DWORD *)v8 != 1)
  {
    --*(_DWORD *)v8;
LABEL_2:
    ++*(_DWORD *)v3;
    goto LABEL_3;
  }
  WTF::fastFree(v8, a2);
  v3 = *((_QWORD *)a2 + 1);
  if (v3)
    goto LABEL_2;
LABEL_3:
  v5 = WebCore::RenderObject::ensureRareData(this, a2);
  result = (WTF *)*((_QWORD *)v5 + 2);
  *((_QWORD *)v5 + 2) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v4);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::RenderElement::effectiveOverflowX(WebCore::RenderElement *this)
{
  uint64_t result;

  result = (*((_DWORD *)this + 24) >> 10) & 7;
  if ((*((_BYTE *)this + 22) & 8) != 0 && !(_DWORD)result)
    return 2;
  return result;
}

BOOL WebCore::RenderElement::establishesIndependentFormattingContext(WebCore::RenderElement *this)
{
  int v1;
  _BOOL8 v2;
  WebCore::RenderElement *v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  WebCore::RenderElement *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v1 = *((_DWORD *)this + 5);
  v2 = 1;
  if ((v1 & 0x800) == 0 && (v1 & 0x1800000) != 0x1000000)
  {
    v3 = this;
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v3 = *(WebCore::RenderElement **)(*((_QWORD *)this + 4) + 8);
    v4 = *((_DWORD *)v3 + 24) & 0x1F;
    v5 = v4 > 0x17;
    v6 = (1 << v4) & 0xA94016;
    if (v5 || v6 == 0)
      goto LABEL_15;
    v8 = this;
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v8 = *(WebCore::RenderElement **)(*((_QWORD *)this + 4) + 8);
    if ((v9 = *((_DWORD *)v8 + 24) & 0x1F, v9 > 0x15)
      || ((1 << v9) & 0x20300E) == 0
      || (v1 & 0x10000) == 0
      || (*((_BYTE *)this + 52) & 7) == 3
      || ((*((_BYTE *)this + 45) & 2) != 0
        ? (v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 96))
        : (v12 = *((_QWORD *)this + 12)),
          (v13 = v12 & 0x1C00, v13 == 2048) || !v13))
    {
LABEL_15:
      v10 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
      if ((*(_BYTE *)(v10 + 642) & 3u) - 1 >= 2
        && ((*(unsigned __int8 *)(v10 + 462) | ((v1 & 0x80000u) >> 19)) & 1) == 0)
      {
        v2 = 0;
        if ((*((_DWORD *)this + 24) & 0x1Fu) <= 0x17 && ((1 << (*((_DWORD *)this + 24) & 0x1F)) & 0xA94016) != 0)
        {
          v19 = 0;
          v2 = *(_BYTE *)(v10 + 632) != 0;
          if (*(_BYTE *)(v10 + 632))
          {
            v18 = 0;
            v16 = *(_BYTE *)(v10 + 628);
            v17 = *(_BYTE *)(v10 + 629);
            if (v16 == 11)
            {
              v14 = (void *)*(unsigned int *)(v10 + 624);
              v15 = *(_DWORD *)(v10 + 624);
              WebCore::Length::ref(&v15);
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v14);
            }
          }
        }
      }
    }
  }
  return v2;
}

void WebCore::RenderElement::referenceBoxRect(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  __int16 v6;
  unsigned int *v7;
  unsigned int v8;
  char v9;
  void *v10;
  WTF *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  WTF *v25;
  unsigned int v26;
  uint64_t v27;
  WTF *v28;
  float v29;
  WTF *v30;
  WTF *v31;
  WTF *v32[3];
  char v33;
  char v34;

  if ((*(_BYTE *)(a1 + 45) & 1) == 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    if (v3)
    {
      v4 = *(_WORD *)(v3 + 28);
      if ((v4 & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1963B2618);
      }
      if ((v4 & 0x20) == 0)
        return;
    }
  }
  if (a2 != 7)
  {
    if (a2 <= 6)
    {
      if (((1 << a2) & 0x47) != 0)
        v29 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
      else
        v29 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 232))(a1);
      WebCore::RenderElement::referenceBoxRect(WebCore::CSSBoxType)const::$_0::operator()(a1, v29);
    }
    return;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if ((*(_BYTE *)(a1 + 45) & 1) != 0)
  {
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) + 680) + 680) & 0x800000000000) == 0)
    {
      v5 = 0;
      v7 = 0;
      v9 = 1;
      goto LABEL_13;
    }
    if (*(_BYTE *)(a1 + 46) != 88)
    {
      __break(0xC471u);
      JUMPOUT(0x1963B26E4);
    }
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8) + 24) + 8);
    if ((*(_WORD *)(v5 + 28) & 0x20) == 0
      || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x1963B25B8);
    }
  }
  else
  {
    v6 = *(_WORD *)(v5 + 28);
    if ((v6 & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1963B25F8);
    }
    if ((v6 & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1963B2638);
    }
  }
  *(_DWORD *)(v5 + 24) += 2;
  if ((*(_QWORD *)(v5 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v18 = 1;
    *(_QWORD *)(v18 + 16) = 0;
    *(_QWORD *)(v18 + 24) = 0;
    *(_QWORD *)(v18 + 8) = v5;
    *(_BYTE *)(v18 + 32) = 0;
    v20 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)(v5 + 16) = v20 & 0xFFFF000000000000 | v18;
    v21 = v20 & 0xFFFFFFFFFFFFLL;
    if ((v20 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v22 = __ldaxr((unsigned int *)v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, (unsigned int *)v21));
      if (!v23)
      {
        atomic_store(1u, (unsigned int *)v21);
        v24 = *(unsigned int *)(v21 + 28);
        if ((_DWORD)v24)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v21 + 16), (WTF::StringImpl *)(*(_QWORD *)(v21 + 16) + 32 * v24));
        v25 = *(WTF **)(v21 + 16);
        if (v25)
        {
          *(_QWORD *)(v21 + 16) = 0;
          *(_DWORD *)(v21 + 24) = 0;
          WTF::fastFree(v25, v19);
        }
        WTF::fastFree((WTF *)v21, v19);
      }
    }
  }
  v7 = (unsigned int *)(*(_QWORD *)(v5 + 16) & 0xFFFFFFFFFFFFLL);
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  v9 = 0;
LABEL_13:
  v34 = 0;
  v32[1] = 0;
  v32[2] = 0;
  v32[0] = (WTF *)v7;
  v33 = 0;
  WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v32);
  v11 = v32[0];
  v32[0] = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      v27 = *((unsigned int *)v11 + 7);
      if ((_DWORD)v27)
      {
        v31 = v11;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v11 + 2), (WTF::StringImpl *)(*((_QWORD *)v11 + 2) + 32 * v27));
        v11 = v31;
      }
      v28 = (WTF *)*((_QWORD *)v11 + 2);
      if (v28)
      {
        *((_QWORD *)v11 + 2) = 0;
        *((_DWORD *)v11 + 6) = 0;
        v30 = v11;
        WTF::fastFree(v28, v10);
        v11 = v30;
      }
      WTF::fastFree(v11, v10);
    }
  }
  if ((v9 & 1) == 0)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v10);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + 46);
  if (v14 != 83)
  {
    if ((*(_BYTE *)(a1 + 52) & 7) == 4)
    {
      if (v14 == 85 || (*(_BYTE *)(a1 + 53) & 1) == 0)
      {
LABEL_24:
        if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                    + 680)
                        + 680) & 0x800000000000) != 0)
        {
          if ((*(_BYTE *)(a1 + 45) & 0x10) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1963B2658);
          }
          (*(float (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1);
        }
        return;
      }
      v26 = v14 - 67;
      if (v26 > 0x13)
        return;
      v16 = 1 << v26;
      v17 = 655377;
    }
    else
    {
      v15 = v14 - 67;
      if (v15 > 0x13)
        return;
      v16 = 1 << v15;
      v17 = 917521;
    }
    if ((v16 & v17) == 0)
      return;
    goto LABEL_24;
  }
}

float WebCore::RenderElement::referenceBoxRect(WebCore::CSSBoxType)const::$_0::operator()(uint64_t a1, float a2)
{
  int v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  int v7;
  int v8;
  float v10;
  float v11;
  int v12;
  float v13;
  int v14;
  unsigned int v17;

  v3 = *(unsigned __int8 *)(a1 + 46);
  if (v3 == 83)
    return a2;
  if ((*(_BYTE *)(a1 + 52) & 7) != 4)
  {
    v4 = v3 - 67;
    v5 = v4 > 0x13;
    v6 = 1 << v4;
    v7 = 917521;
    goto LABEL_4;
  }
  if (v3 != 85 && (*(_BYTE *)(a1 + 53) & 1) != 0)
  {
    v17 = v3 - 67;
    v5 = v17 > 0x13;
    v6 = 1 << v17;
    v7 = 655377;
LABEL_4:
    v8 = v6 & v7;
    if (v5 || v8 == 0)
      return a2;
  }
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
  {
    if ((*(_BYTE *)(a1 + 45) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1963B2950);
    }
    v10 = floorf((*(float (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1) * 64.0);
    if (v10 >= 2147500000.0)
    {
      v12 = 0x7FFFFFFF;
    }
    else if (v10 <= -2147500000.0)
    {
      v12 = 0x80000000;
    }
    else
    {
      v12 = (int)v10;
    }
    v13 = floorf(v11 * 64.0);
    if (v13 >= 2147500000.0)
    {
      if (v12 == 0x80000000)
        v14 = 0x7FFFFFFF;
      else
        v14 = -v12;
    }
    else if (v13 <= -2147500000.0)
    {
      if (v12 == 0x80000000)
        v14 = 0x7FFFFFFF;
      else
        v14 = -v12;
    }
    else if (v12 == 0x80000000)
    {
      v14 = 0x7FFFFFFF;
    }
    else
    {
      v14 = -v12;
    }
    return a2 + (float)((float)v14 * 0.015625);
  }
  return a2;
}

void WebCore::RenderElement::markRendererDirtyAfterTopLayerChange(WebCore::RenderElement *this, WebCore::RenderElement *a2, WebCore::RenderBlock *a3)
{
  uint64_t v4;
  WebCore::RenderElement *v6;
  WebCore::RenderElement *v7;
  uint64_t v8;
  WebCore::RenderObject *v9;
  int v10;
  WebCore::RenderElement *v11;
  int v12;
  WebCore::RenderElement *v13;
  int v14;
  WebCore::RenderElement *v15;

  if (this)
  {
    if ((*((_BYTE *)this + 45) & 4) != 0)
    {
      v4 = *((_QWORD *)this + 4);
      if (v4)
      {
        if (a2)
        {
          if (*(_QWORD *)(v4 + 8))
          {
            v6 = WebCore::RenderObject::containingBlock(this);
            if (v6 != a2 && (*((_DWORD *)this + 5) & 0x1800000) == 0x1000000)
            {
              v7 = v6;
              {
                WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
                unk_1ECE91358 = 0u;
              }
              WebCore::PositionedDescendantsMap::removeDescendant((WebCore::PositionedDescendantsMap *)&WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants, this);
              v8 = *((_QWORD *)this + 4);
              if (v8)
                v9 = *(WebCore::RenderObject **)(v8 + 8);
              else
                v9 = 0;
              v10 = *((_DWORD *)v9 + 5);
              if ((v10 & 0x20) == 0)
              {
                *((_DWORD *)v9 + 5) = v10 | 0x20;
                v11 = WebCore::RenderObject::markContainingBlocksForLayout(v9, 0);
                WebCore::RenderObject::scheduleLayout(v9, v11);
              }
              v12 = *((_DWORD *)v7 + 5);
              if ((v12 & 0x20) == 0)
              {
                *((_DWORD *)v7 + 5) = v12 | 0x20;
                v13 = WebCore::RenderObject::markContainingBlocksForLayout(v7, 0);
                WebCore::RenderObject::scheduleLayout(v7, v13);
              }
              v14 = *((_DWORD *)this + 5);
              if ((v14 & 8) == 0)
              {
                *((_DWORD *)this + 5) = v14 | 8;
                v15 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
                WebCore::RenderObject::scheduleLayout(this, v15);
                if ((*((_BYTE *)this + 21) & 0x80) != 0)
                  WebCore::RenderObject::setLayerNeedsFullRepaint((uint64_t)this);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t WebCore::RenderElement::hasEligibleContainmentForSizeQuery(WebCore::RenderElement *this)
{
  uint64_t v1;
  char v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v10;
  WebCore::RenderElement *v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  WebCore::RenderElement *v16;

  v1 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  v2 = *(_BYTE *)(v1 + 462);
  v3 = *(_DWORD *)(v1 + 636);
  v4 = *(_BYTE *)(v1 + 642) & 3;
  v5 = v2 & 1;
  v6 = *(_QWORD *)&v3 & 0xC0000;
  if ((v4 - 3) <= 0xFFFFFFFD && v5 == 0 && v6 == 0)
    return 0;
  v10 = *((_DWORD *)this + 5);
  if ((v10 & 1) == 0)
  {
    v11 = this;
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v11 = *(WebCore::RenderElement **)(*((_QWORD *)this + 4) + 8);
    v12 = *((_DWORD *)v11 + 24) & 0x1F;
    v13 = v12 > 0x19;
    v14 = (1 << v12) & 0x3528029;
    if (v13 || v14 == 0)
      return 0;
    v16 = this;
    if ((*((_BYTE *)this + 45) & 2) != 0)
    {
      v16 = *(WebCore::RenderElement **)(*((_QWORD *)this + 4) + 8);
      if ((v10 & 2) != 0)
        goto LABEL_20;
    }
    else if ((v10 & 2) != 0)
    {
      goto LABEL_20;
    }
    if ((*((_QWORD *)v16 + 12) & 0x1FLL) == 0)
      return 0;
  }
LABEL_20:
  if ((*((_QWORD *)this + 12) & 0x1FLL) == 0x19
    || *((unsigned __int8 *)this + 46) - 36 <= 4 && (*((_BYTE *)this + 52) & 7) != 1)
  {
    return 0;
  }
  if (!v4)
    return 1;
  if (v4 != 1)
  {
    if (v4 == 2)
      return WebCore::RenderElement::shouldApplyInlineSizeContainment(this);
    return 0;
  }
  return WebCore::RenderElement::shouldApplySizeContainment(this);
}

uint64_t WebCore::RenderElement::clearNeedsLayoutForSkippedContent(WebCore::RenderElement *this)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  result = (*(uint64_t (**)(WebCore::RenderElement *))(*(_QWORD *)this + 112))(this);
  do
  {
    if (!result)
    {
LABEL_21:
      v9 = *((_DWORD *)this + 5) | 0x200200;
      *((_DWORD *)this + 5) = v9;
      if ((*((_BYTE *)this + 45) & 2) == 0)
      {
        *(_WORD *)((char *)this + 69) &= ~1u;
        *((_WORD *)this + 38) = *((_WORD *)this + 38) & 0xF | (16
                                                             * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                                + 1944)
                                                                                    + 248)
                                                                        + 472));
      }
      *((_DWORD *)this + 5) = v9 & 0xFFFFFE07;
      return result;
    }
    v3 = result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 112))(result);
  }
  while (result);
  while (1)
  {
    v4 = *(_DWORD *)(v3 + 16);
    v5 = *(_DWORD *)(v3 + 20) | 0x200200;
    *(_DWORD *)(v3 + 16) = v4 + 1;
    *(_DWORD *)(v3 + 20) = v5;
    if ((*(_BYTE *)(v3 + 45) & 2) == 0)
    {
      *(_WORD *)(v3 + 69) &= ~1u;
      *(_WORD *)(v3 + 76) = *(_WORD *)(v3 + 76) & 0xF | (16
                                                       * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + 40) + 8)
                                                                                          + 1944)
                                                                              + 248)
                                                                  + 472));
    }
    *(_DWORD *)(v3 + 20) = v5 & 0xFFFFFE07;
    if (v4 == -1)
      break;
    *(_DWORD *)(v3 + 16) = v4;
    v6 = *(unsigned int *)(v3 + 47);
    if (v6 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)
      && (v7 = *(_QWORD *)((v6 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)) + 8)) != 0)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 112))(v7);
      while (result)
      {
        v3 = result;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 112))(result);
        if (!result)
          goto LABEL_20;
      }
      v3 = v7;
    }
    else
    {
      v8 = *(_QWORD *)(v3 + 32);
      if (v8)
        v3 = *(_QWORD *)(v8 + 8);
      else
        v3 = 0;
      if ((WebCore::RenderElement *)v3 == this)
        goto LABEL_21;
    }
LABEL_20:
    if (!v3)
      goto LABEL_21;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

void WebCore::RenderEmbeddedObject::~RenderEmbeddedObject(WebCore::RenderEmbeddedObject *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = off_1E3439928;
  *((_QWORD *)this + 27) = &unk_1E3439FE8;
  v5 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  *(_QWORD *)this = off_1E34201A0;
  v6 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF *v6;
  void *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = off_1E3439928;
  *((_QWORD *)this + 27) = &unk_1E3439FE8;
  v5 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  *(_QWORD *)this = off_1E34201A0;
  v6 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_QWORD *)this + 36) = 0;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v7);
  }
}

void `non-virtual thunk to'WebCore::RenderEmbeddedObject::~RenderEmbeddedObject(WebCore::RenderEmbeddedObject *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *((_QWORD *)this - 27) = off_1E3439928;
  *(_QWORD *)this = &unk_1E3439FE8;
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  *((_QWORD *)this - 27) = off_1E34201A0;
  v6 = (WTF *)*((_QWORD *)this - 3);
  *((_QWORD *)this - 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  *((_QWORD *)this - 27) = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject((WebCore::RenderEmbeddedObject *)((char *)this - 216), a2);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF *v6;
  void *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *((_QWORD *)this - 27) = off_1E3439928;
  *(_QWORD *)this = &unk_1E3439FE8;
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  *((_QWORD *)this - 27) = off_1E34201A0;
  v6 = (WTF *)*((_QWORD *)this - 3);
  *((_QWORD *)this - 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  *((_QWORD *)this - 27) = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject((WebCore::RenderEmbeddedObject *)((char *)this - 216), a2);
  if (*((_DWORD *)this - 50))
  {
    *((_QWORD *)this + 9) = 0;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this - 24) = 0u;
    *(_OWORD *)((char *)this - 8) = 0u;
    *(_OWORD *)((char *)this - 56) = 0u;
    *(_OWORD *)((char *)this - 40) = 0u;
    *(_OWORD *)((char *)this - 88) = 0u;
    *(_OWORD *)((char *)this - 72) = 0u;
    *(_OWORD *)((char *)this - 120) = 0u;
    *(_OWORD *)((char *)this - 104) = 0u;
    *(_OWORD *)((char *)this - 152) = 0u;
    *(_OWORD *)((char *)this - 136) = 0u;
    *(_OWORD *)((char *)this - 184) = 0u;
    *(_OWORD *)((char *)this - 168) = 0u;
    *(_OWORD *)((char *)this - 216) = 0u;
    *(_OWORD *)((char *)this - 200) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((WebCore::RenderEmbeddedObject *)((char *)this - 216), v7);
  }
}

void WebCore::RenderEmbeddedObject::willBeDestroyed(WebCore::RenderEmbeddedObject *this)
{
  uint64_t *v2;

  v2 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                       + 8)
                                           + 1944)
                               + 248)
                   + 560);
  if (v2)
    WTF::ListHashSet<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>>>::remove<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>>(v2, this);
  WebCore::RenderWidget::willBeDestroyed(this);
}

uint64_t WebCore::RenderEmbeddedObject::requiresAcceleratedCompositing(WebCore::RenderEmbeddedObject *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD **)(*((_QWORD *)this + 3) + 8);
  if (((*(uint64_t (**)(_QWORD *))(*v2 + 192))(v2) & 1) == 0)
  {
    result = 96;
    __break(0xC471u);
    return result;
  }
  v3 = v2[14];
  if (v3
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && !*(_BYTE *)(v4 + 144)
    && (v8 = *(_QWORD *)(v4 + 296)) != 0
    && (v9 = *(_QWORD *)(v8 + 1944)) != 0)
  {
    v10 = *(_QWORD *)(v9 + 400);
    if (v10 && *(_BYTE *)(v10 + 195))
      return 1;
  }
  else
  {
    v5 = *((_QWORD *)this + 29);
    if (v5 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5) & 1) != 0)
      return 1;
  }
  v6 = *((_QWORD *)this + 29);
  if (!v6)
    return 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 88))(v6);
  if ((_DWORD)result)
    return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 248))(v6) != 0;
  return result;
}

uint64_t WebCore::RenderEmbeddedObject::usesAsyncScrolling(WebCore::RenderEmbeddedObject *this)
{
  _DWORD *v1;
  uint64_t v2;

  v1 = (_DWORD *)*((_QWORD *)this + 29);
  if (!v1 || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v1 + 88))(*((_QWORD *)this + 29)))
    return 0;
  ++v1[2];
  v2 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 344))(v1);
  if (v1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[2];
  return v2;
}

uint64_t WebCore::RenderEmbeddedObject::scrollingNodeID(WebCore::RenderEmbeddedObject *this)
{
  _DWORD *v1;
  uint64_t v2;

  v1 = (_DWORD *)*((_QWORD *)this + 29);
  if (!v1 || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v1 + 88))(*((_QWORD *)this + 29)))
    return 0;
  ++v1[2];
  v2 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 352))(v1);
  if (v1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[2];
  return v2;
}

uint64_t WebCore::RenderEmbeddedObject::willAttachScrollingNode(uint64_t this)
{
  _DWORD *v1;

  v1 = *(_DWORD **)(this + 232);
  if (v1)
  {
    this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 88))(*(_QWORD *)(this + 232));
    if ((_DWORD)this)
    {
      ++v1[2];
      this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 360))(v1);
      if (v1[2] == 1)
        return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
      else
        --v1[2];
    }
  }
  return this;
}

uint64_t WebCore::RenderEmbeddedObject::didAttachScrollingNode(uint64_t this)
{
  _DWORD *v1;

  v1 = *(_DWORD **)(this + 232);
  if (v1)
  {
    this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 88))(*(_QWORD *)(this + 232));
    if ((_DWORD)this)
    {
      ++v1[2];
      this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 368))(v1);
      if (v1[2] == 1)
        return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
      else
        --v1[2];
    }
  }
  return this;
}

void WebCore::RenderEmbeddedObject::paint(WebCore::RenderEmbeddedObject *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  uint64_t v6;
  _BOOL4 v8;
  uint64_t v9;
  WebCore::Page *v10;
  uint64_t v11;
  WebCore::Page *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  v8 = (*(_WORD *)(v6 + 3358) & 8) == 0 && *((_WORD *)a2 + 8) == 8;
  if (*((_BYTE *)this + 256))
  {
    if (v8)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 528) + 8) + 24);
      if (v9)
        v10 = *(WebCore::Page **)(v9 + 8);
      else
        v10 = 0;
      v13 = *((_QWORD *)this + 24);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 20);
        v15 = (uint64_t *)(v13 + 28);
      }
      else
      {
        v14 = 0;
        v15 = (uint64_t *)((char *)this + 160);
      }
      v16 = *v15;
      v21 = v14;
      v22 = v16;
      WebCore::Page::addRelevantUnpaintedObject(v10, this, (const WebCore::LayoutRect *)&v21);
    }
    WebCore::RenderReplaced::paint(this, a2, a3);
  }
  else
  {
    if (v8)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 528) + 8) + 24);
      if (v11)
        v12 = *(WebCore::Page **)(v11 + 8);
      else
        v12 = 0;
      v17 = *((_QWORD *)this + 24);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 20);
        v19 = (uint64_t *)(v17 + 28);
      }
      else
      {
        v18 = 0;
        v19 = (uint64_t *)((char *)this + 160);
      }
      v20 = *v19;
      v21 = v18;
      v22 = v20;
      WebCore::Page::addRelevantRepaintedObject(v12, this, (const WebCore::LayoutRect *)&v21);
    }
    WebCore::RenderWidget::paint((WebCore::Widget **)this, a2, a3);
  }
}

void WebCore::RenderEmbeddedObject::paintReplaced(WebCore::RenderEmbeddedObject *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  _DWORD *v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  double v16;
  unsigned int v17;
  void *v18;
  void *v22;
  void *v23;
  uint64_t v24;
  float v25;
  float v26;
  void *v27;
  uint64_t v28;
  void *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  __n128 v52;
  float v53;
  int v54;
  WTF::StringImpl *v55;
  int v56;
  char v57;
  uint64_t v58;
  int v59;
  char v60;
  char v61;
  uint64_t v62;
  int v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  char v71;
  _DWORD *v72;
  __int16 v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  int v79;
  unsigned int v80;
  unsigned __int16 v81;
  unsigned __int8 v82;
  _QWORD *v83;
  int v84;
  __int16 v85;
  int v86;
  __int16 v87;
  char v88;
  int v89;
  __int16 v90;
  char v91;
  _QWORD v92[2];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  float32x2_t v97;
  float32x2_t v98;
  uint64_t v99;
  uint64_t v100;
  __n128 v101;
  float32x2_t v102[2];
  float v103;
  float v104;
  float v105[2];
  _BYTE v106[8];
  uint64_t v107;
  int v108;
  _BYTE v109[8];
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 256))
  {
    if (*((_DWORD *)this + 65) != 1 && *((_WORD *)a2 + 8) != 128)
    {
      v5 = *((_QWORD *)a2 + 10);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5) & 1) == 0)
      {
        v102[0] = 0;
        v102[1] = 0;
        v101 = 0uLL;
        v99 = 0;
        v100 = 0;
        v97 = 0;
        v98 = 0;
        v62 = 0;
        v63 = 0;
        v70 = 256;
        v64 = 0u;
        v65 = 0u;
        v66 = 0u;
        v67 = 0u;
        v68 = 0u;
        v69 = 0u;
        v71 = 0;
        v7 = MEMORY[0x1E0CBF2F8];
        v8 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
        if (*MEMORY[0x1E0CBF2F8])
        {
          *v8 += 2;
          v6 = v80;
          v7 = v81 | (v82 << 16);
        }
        v72 = v8;
        v73 = 0;
        v74 = 2143289344;
        v75 = 0;
        v76 = 0;
        v77 = 26216000;
        v78 = 257;
        v79 = 0;
        v80 = v6 & 0x80000000 | 0xE000;
        v81 = 0;
        v82 = (v7 & 0xFC0000u) >> 16;
        v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v9 = 0x100000001;
        v9[1] = 0;
        v83 = v9;
        v84 = 0;
        v85 &= 0xFC00u;
        v86 = 0;
        v87 = 4;
        v88 = 0;
        v89 = 0;
        v90 = 4;
        v91 = 0;
        v95 = 0u;
        v96 = 0u;
        v94 = 0u;
        v93 = 0u;
        *(_QWORD *)((char *)v92 + 7) = 0;
        v92[0] = 0;
        v54 = 0;
        v10 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)v10 += 2;
        v55 = v10;
        v56 = 0;
        v57 = 1;
        v58 = 0x3F80000000000000;
        v59 = 0;
        v60 = 4;
        v61 = v61 & 0xE0 | 8;
        v53 = 0.0;
        WebCore::RenderEmbeddedObject::getReplacementTextGeometry(this, a3, v102, (WebCore::FloatRect *)&v101, (WebCore::FloatRect *)&v99, (WebCore::FloatRect *)&v97, (WebCore::FontCascade *)&v62, (WebCore::TextRun *)&v54, &v53);
        v111 = 0;
        __asm { FMOV            V0.2S, #11.0 }
        v112 = _Q0.n128_u64[0];
        v16 = WebCore::Path::addRoundedRect((WebCore::Path *)v109, &v101, (float *)&v112, 0, _Q0);
        (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v5 + 96))(v5, 1, v16);
        (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)v5 + 456))(v5, v102);
        if (*((_BYTE *)this + 280))
          v17 = -227972759;
        else
          v17 = -226656899;
        v112 = bswap32(v17) | 0x1104000000000000;
        WebCore::GraphicsContext::setFillColor((WebCore::GraphicsContext *)v5, (const WebCore::Color *)&v112);
        if ((v112 & 0x8000000000000) != 0)
        {
          v40 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFLL);
          do
          {
            v41 = __ldaxr(v40);
            v42 = v41 - 1;
          }
          while (__stlxr(v42, v40));
          if (!v42)
          {
            atomic_store(1u, v40);
            WTF::fastFree((WTF *)v40, v18);
          }
        }
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 176))(v5, v109);
        v108 = 0;
        _Q0.n128_u64[1] = v101.n128_u64[1];
        __asm
        {
          FMOV            V0.2S, #-1.0
          FMOV            V1.2S, #1.0
        }
        v52.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)v101.n128_u64[0], _D0);
        *(float32x2_t *)&v52.n128_i8[8] = vadd_f32(vadd_f32(*(float32x2_t *)&v101.n128_i8[8], _D1), _D1);
        __asm { FMOV            V0.2S, #12.0 }
        v112 = _Q0.n128_u64[0];
        WebCore::Path::addRoundedRect((WebCore::Path *)v106, &v52, (float *)&v112, 0, _Q0);
        v112 = 0x11040000FFFFFFD8;
        WebCore::GraphicsContext::setStrokeColor((WebCore::GraphicsContext *)v5, (const WebCore::Color *)&v112);
        if ((v112 & 0x8000000000000) != 0)
        {
          v43 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFLL);
          do
          {
            v44 = __ldaxr(v43);
            v45 = v44 - 1;
          }
          while (__stlxr(v45, v43));
          if (!v45)
          {
            atomic_store(1u, v43);
            WTF::fastFree((WTF *)v43, v22);
          }
        }
        if (*(float *)(v5 + 188) != 2.0)
        {
          *(_DWORD *)(v5 + 184) |= 8u;
          *(_DWORD *)(v5 + 188) = 0x40000000;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, v5 + 8);
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 184))(v5, v106);
        v24 = WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)&v62, v23);
        v25 = roundf(*(float *)&v99 + 10.0);
        v26 = roundf((float)((float)(*((float *)&v99 + 1)+ (float)((float)(*((float *)&v100 + 1)- (float)(*(_DWORD *)(v24 + 48) + *(_DWORD *)(v24 + 44)))* 0.5))+ (float)*(int *)(v24 + 44))+ -1.0);
        v112 = 0x11040000F0F0F0FFLL;
        WebCore::GraphicsContext::setFillColor((WebCore::GraphicsContext *)v5, (const WebCore::Color *)&v112);
        if ((v112 & 0x8000000000000) != 0)
        {
          v46 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFLL);
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (!v48)
          {
            atomic_store(1u, v46);
            WTF::fastFree((WTF *)v46, v27);
          }
        }
        v112 = __PAIR64__(LODWORD(v26), LODWORD(v25));
        (*(void (**)(uint64_t, uint64_t *, int *, uint64_t *, _QWORD))(*(_QWORD *)v5 + 536))(v5, &v62, &v54, &v112, 0);
        v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                                                                + 8)
                                                                                    + 528)
                                                                        + 8)
                                                            + 24)
                                                + 8)
                                    + 48)
                        + 16);
        if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 512))(v28, *((unsigned int *)this + 66)))
        {
          __asm
          {
            FMOV            V0.2S, #3.0
            FMOV            V1.2S, #-3.0
          }
          v97 = vadd_f32(v97, _D0);
          v98 = vadd_f32(vadd_f32(v98, _D1), _D1);
          (*(void (**)(uint64_t, float))(*(_QWORD *)v5 + 592))(v5, 1.0);
          v112 = 0x11040000F0F0F0FFLL;
          WebCore::GraphicsContext::setFillColor((WebCore::GraphicsContext *)v5, (const WebCore::Color *)&v112);
          if ((v112 & 0x8000000000000) != 0)
          {
            v49 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFLL);
            do
            {
              v50 = __ldaxr(v49);
              v51 = v50 - 1;
            }
            while (__stlxr(v51, v49));
            if (!v51)
            {
              atomic_store(1u, v49);
              WTF::fastFree((WTF *)v49, v31);
            }
          }
          (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)v5 + 200))(v5, &v97);
          if (*(_BYTE *)(v5 + 194) || *(_BYTE *)(v5 + 195) != 1)
          {
            *(_WORD *)(v5 + 194) = 256;
            *(_DWORD *)(v5 + 184) |= 0x20u;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, v5 + 8);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 96))(v5, 1);
          v32 = v97.f32[0] + 4.0;
          v33 = (float)(v98.f32[0] + -4.0) + -4.0;
          v34 = v97.f32[1] + 4.0;
          v35 = (float)(v98.f32[1] + -4.0) + -4.0;
          v36 = (float)(v97.f32[0] + 4.0) + (float)(v33 * 0.5);
          v37 = (float)(v97.f32[1] + 4.0) + (float)(v35 * 0.5);
          v105[0] = (float)(v97.f32[0] + 4.0) + v33;
          v105[1] = v37;
          if (*(float *)(v5 + 188) != 2.0)
          {
            *(_DWORD *)(v5 + 184) |= 8u;
            *(_DWORD *)(v5 + 188) = 0x40000000;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, v5 + 8);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 296))(v5, 1);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 312))(v5, 1);
          v114 = 0;
          v103 = v32;
          v104 = v37;
          WebCore::Path::moveTo((WebCore::Path *)&v112, (const WebCore::FloatPoint *)&v103);
          WebCore::Path::addLineTo((uint64_t)&v112, (const WebCore::FloatPoint *)v105);
          v103 = v36;
          v104 = v34;
          WebCore::Path::addLineTo((uint64_t)&v112, (const WebCore::FloatPoint *)&v103);
          WebCore::Path::moveTo((WebCore::Path *)&v112, (const WebCore::FloatPoint *)v105);
          v103 = v36;
          v104 = v34 + v35;
          WebCore::Path::addLineTo((uint64_t)&v112, (const WebCore::FloatPoint *)&v103);
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 184))(v5, &v112);
          if (v114 != -1)
            ((void (*)(float *, uint64_t *))off_1E3425520[v114])(&v103, &v113);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 104))(v5, 1);
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 608))(v5);
        }
        if (v108 != -1)
          ((void (*)(uint64_t *, uint64_t *))off_1E3425520[v108])(&v112, &v107);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 104))(v5, 1);
        if (v111 != -1)
          ((void (*)(uint64_t *, uint64_t *))off_1E3425520[v111])(&v112, &v110);
        v39 = v55;
        v55 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, v38);
          else
            *(_DWORD *)v39 -= 2;
        }
        WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)&v62, v38);
      }
    }
  }
}

void WebCore::RenderEmbeddedObject::getReplacementTextGeometry(WebCore::RenderEmbeddedObject *this, const WebCore::LayoutPoint *a2, float32x2_t *a3, WebCore::FloatRect *a4, WebCore::FloatRect *a5, WebCore::FloatRect *a6, WebCore::FontCascade *a7, WebCore::TextRun *a8, float *a9)
{
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  _DWORD *v24;
  WTF *v25;
  WTF *v26;
  unint64_t StatusReg;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _DWORD **v31;
  WTF::StringImpl *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  void *v35;
  WebCore *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WebCore *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float32x2_t v49;
  float32x2_t v55;
  float32x2_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  unsigned int *v68;
  uint64_t v69;
  WTF::StringImpl **v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  int v73;
  WebCore *v74[37];
  uint64_t v75[13];
  char v76;
  _DWORD *v77;
  __int16 v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  char v86;
  WTF *v87;
  int v88;
  __int16 v89;

  v17 = *((unsigned int *)this + 66);
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                                                          + 8)
                                                                              + 528)
                                                                  + 8)
                                                      + 24)
                                          + 8)
                              + 48)
                  + 16);
  v73 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 512))(v18, v17);
  v19 = WebCore::RenderBox::contentBoxRect(this);
  a3[1].f32[0] = (float)v20 * 0.015625;
  a3[1].f32[1] = (float)v21 * 0.015625;
  v22 = *((_DWORD *)a2 + 1);
  v23 = *(_DWORD *)a2 + 63;
  if (*(int *)a2 >= 0)
    v23 = *(_DWORD *)a2;
  a3->f32[0] = (float)((float)(int)v19 * 0.015625)
             + (float)(((int)(*(_DWORD *)a2 - (v23 & 0xFFFFFFC0) + 32) >> 6) + (v23 >> 6));
  a3->f32[1] = (float)((float)SHIDWORD(v19) * 0.015625)
             + (float)(((int)(v22 - (v23 & 0xFFFFFFC0) + 32) >> 6) + v22 / 64);
  v75[12] = 256;
  memset(v75, 0, 96);
  v76 = 0;
  v24 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v24 += 2;
  v77 = v24;
  v78 = 0;
  v79 = 2143289344;
  v80 = 0;
  v81 = 0;
  v82 = 26216000;
  v83 = 257;
  v84 = 0xE00000000000;
  v86 = 0;
  v85 = 0;
  v25 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  v26 = v25;
  *(_QWORD *)v25 = 0x100000001;
  *((_QWORD *)v25 + 1) = 0;
  v87 = v25;
  v88 = 0;
  v89 = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v28 = *(_QWORD *)(StatusReg + 736);
  if (!v28 || (v29 = *(_QWORD *)(v28 + 96)) == 0)
    v29 = WebCore::threadGlobalDataSlow(v25);
  v30 = *(WTF::StringImpl **)(v29 + 80);
  if (!v30)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v29);
    v30 = *(WTF::StringImpl **)(v29 + 80);
  }
  v31 = (_DWORD **)WebCore::SystemFontDatabase::systemFontShorthandInfo((uint64_t)v30 + 344, 6u, v30);
  if (!*((_DWORD *)v26 + 1))
  {
    __break(0xC471u);
    JUMPOUT(0x1963B42B4);
  }
  v33 = *v31;
  if (*v31)
    *v33 += 2;
  v34 = (WTF::StringImpl *)*((_QWORD *)v26 + 1);
  *((_QWORD *)v26 + 1) = v33;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v32);
    else
      *(_DWORD *)v34 -= 2;
  }
  LOWORD(v82) = 2800;
  LODWORD(v84) = 1094713344;
  WebCore::FontCascade::FontCascade((uint64_t)v74, v75);
  WebCore::FontCascade::operator=((uint64_t)a7, (uint64_t)v74);
  WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)v74, v35);
  v74[0] = 0;
  v37 = *(_QWORD *)(StatusReg + 736);
  if (!v37 || (v38 = *(_QWORD *)(v37 + 96)) == 0)
    v38 = WebCore::threadGlobalDataSlow(v36);
  v39 = *(_QWORD *)(v38 + 80);
  if (!v39)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v38);
    v39 = *(_QWORD *)(v38 + 80);
  }
  WebCore::FontCache::updateFontCascade(v39, (uint64_t)a7, v74);
  v41 = v74[0];
  v74[0] = 0;
  if (v41)
  {
    if (*((_DWORD *)v41 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v41 + 8))(v41);
    else
      --*((_DWORD *)v41 + 2);
  }
  v42 = (WTF::StringImpl *)*((_QWORD *)this + 34);
  if (v42)
    *(_DWORD *)v42 += 4;
  v43 = (WTF::StringImpl *)*((_QWORD *)a8 + 1);
  *((_QWORD *)a8 + 1) = v42;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v40);
    else
      *(_DWORD *)v43 -= 2;
  }
  *((_DWORD *)a8 + 4) = 0;
  *((_BYTE *)a8 + 20) = 1;
  *((_QWORD *)a8 + 3) = 0x3F80000000000000;
  *((_DWORD *)a8 + 8) = 0;
  *((_WORD *)a8 + 18) = 2052;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v40);
    else
      *(_DWORD *)v42 -= 2;
  }
  v45 = WebCore::FontCascade::width((uint64_t)a7, (uint64_t)a8);
  *a9 = v45;
  v46 = 10.0;
  v47 = v45 + 10.0;
  if (v73)
    v46 = 5.0;
  v48 = v46 + v47;
  *((float *)a5 + 2) = v48;
  *((_DWORD *)a5 + 3) = 1102053376;
  v49 = vmul_f32(a3[1], (float32x2_t)0x3F0000003F000000);
  __asm { FMOV            V3.2S, #-11.0 }
  v55 = vadd_f32(v49, _D3);
  _D3.f32[0] = v48 * 0.5;
  v56.i32[0] = vsub_f32(v49, _D3).u32[0];
  v56.i32[1] = v55.i32[1];
  *(float32x2_t *)a5 = vadd_f32(*a3, v56);
  *(_OWORD *)a4 = *(_OWORD *)a5;
  if (v73)
  {
    *(_OWORD *)a6 = *(_OWORD *)a5;
    v57 = *((float *)a6 + 3);
    v58 = ceilf((float)(*(float *)a6 + *((float *)a6 + 2)) + -4.0);
    *(float *)a6 = v58;
    *((float *)a6 + 2) = v57;
    if (v57 > 0.0)
    {
      v59 = *((float *)a4 + 2);
      if (v59 <= 0.0 || (v60 = *((float *)a4 + 3), v60 <= 0.0))
      {
        *(_OWORD *)a4 = *(_OWORD *)a6;
      }
      else
      {
        v61 = *((float *)a4 + 1);
        if (v58 >= *(float *)a4)
          v62 = *(float *)a4;
        else
          v62 = v58;
        v63 = *((float *)a6 + 1);
        if (v63 >= v61)
          v64 = *((float *)a4 + 1);
        else
          v64 = *((float *)a6 + 1);
        v65 = v59 + *(float *)a4;
        v66 = v57 + v58;
        if (v65 >= v66)
          v66 = v65;
        v67 = v57 + v63;
        if ((float)(v60 + v61) >= v67)
          v67 = v60 + v61;
        *(float *)a4 = v62;
        *((float *)a4 + 1) = v64;
        *((float *)a4 + 2) = v66 - v62;
        *((float *)a4 + 3) = v67 - v64;
      }
    }
  }
  v68 = (unsigned int *)v87;
  v87 = 0;
  if (v68)
  {
    if (*v68 == 1)
    {
      v69 = v68[1];
      if ((_DWORD)v69)
      {
        v70 = (WTF::StringImpl **)(v68 + 2);
        v71 = 8 * v69;
        do
        {
          v72 = *v70;
          *v70 = 0;
          if (v72)
          {
            if (*(_DWORD *)v72 == 2)
              WTF::StringImpl::destroy(v72, v44);
            else
              *(_DWORD *)v72 -= 2;
          }
          ++v70;
          v71 -= 8;
        }
        while (v71);
      }
      WTF::fastFree((WTF *)v68, v44);
    }
    else
    {
      --*v68;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v75, v44);
}

uint64_t WebCore::RenderEmbeddedObject::setUnavailablePluginIndicatorIsHidden(uint64_t this, int a2)
{
  int v2;
  _BYTE v3[20];
  __int128 v4;
  char v5;

  if (a2)
    v2 = 1;
  else
    v2 = 2;
  if (*(_DWORD *)(this + 260) != v2)
  {
    *(_DWORD *)(this + 260) = v2;
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40)
                                                                                           + 8)
                                                                               + 1944)
                                                                   + 24)
                                                       + 8)
                                           + 40)
                               + 8)
                   + 3382))
    {
      LOBYTE(v4) = 0;
      v5 = 0;
      v3[0] = 0;
      v3[16] = 0;
      return WebCore::RenderObject::issueRepaint(this, &v4, 0, 0, (uint64_t)v3);
    }
  }
  return this;
}

unint64_t WebCore::RenderEmbeddedObject::getReplacementTextGeometry(WebCore::RenderEmbeddedObject *this, const WebCore::LayoutPoint *a2)
{
  _DWORD *v4;
  _QWORD *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  double v8;
  uint64_t v9;
  double v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  float v14;
  int v15;
  WTF::StringImpl *v16;
  int v17;
  char v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  _DWORD *v32;
  __int16 v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  char v41;
  _QWORD *v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  char v47;
  int v48;
  __int16 v49;
  char v50;
  _QWORD v51[2];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[2];
  float32x2_t v59[2];

  v59[0] = 0;
  v59[1] = 0;
  v58[0] = 0;
  v58[1] = 0;
  v57[0] = 0;
  v57[1] = 0;
  v56[0] = 0;
  v56[1] = 0;
  v22 = 0;
  v23 = 0;
  v30 = 256;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v31 = 0;
  v4 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v4 += 2;
  v32 = v4;
  v33 = 0;
  v34 = 2143289344;
  v35 = 0;
  v36 = 0;
  v37 = 26216000;
  v38 = 257;
  v39 = 0xE00000000000;
  v41 = 0;
  v40 = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = 0x100000001;
  v5[1] = 0;
  v42 = v5;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 4;
  v47 = 0;
  v48 = 0;
  v49 = 4;
  v50 = 0;
  v54 = 0u;
  v55 = 0u;
  v53 = 0u;
  v52 = 0u;
  *(_QWORD *)((char *)v51 + 7) = 0;
  v51[0] = 0;
  v15 = 0;
  v6 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v6 += 2;
  v16 = v6;
  v17 = 0;
  v18 = 1;
  v19 = 0x3F80000000000000;
  v20 = 0;
  v21 = 2052;
  WebCore::RenderEmbeddedObject::getReplacementTextGeometry(this, a2, v59, (WebCore::FloatRect *)v58, (WebCore::FloatRect *)v57, (WebCore::FloatRect *)v56, (WebCore::FontCascade *)&v22, (WebCore::TextRun *)&v15, &v14);
  v8 = *(float *)v58 * 64.0;
  if (v8 >= 2147483650.0)
  {
    v9 = 0x7FFFFFFFLL;
  }
  else if (v8 <= -2147483650.0)
  {
    v9 = 0x80000000;
  }
  else
  {
    v9 = (int)v8;
  }
  v10 = *((float *)v58 + 1) * 64.0;
  if (v10 >= 2147483650.0)
  {
    v11 = 0x7FFFFFFF00000000;
  }
  else if (v10 <= -2147483650.0)
  {
    v11 = 0x8000000000000000;
  }
  else
  {
    v11 = (unint64_t)(int)v10 << 32;
  }
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v7);
    else
      *(_DWORD *)v12 -= 2;
  }
  WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)&v22, v7);
  return v11 | v9;
}

WTF *WebCore::RenderEmbeddedObject::layout(WebCore::RenderEmbeddedObject *this)
{
  char v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  WTF *v11;
  void *v12;
  WTF *result;
  unsigned int v14;
  WebCore::RenderFragmentedFlow *v15;
  BOOL v16;
  _QWORD v17[2];
  uint64_t v18;

  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  WebCore::RenderBox::computeLogicalWidthInFragment(this, (int *)v17, 0);
  v2 = *((_DWORD *)this + 31) >> 13;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
  {
    *((_DWORD *)this + 41) = v17[0];
    *((_DWORD *)this + 39) = HIDWORD(v17[0]);
  }
  else
  {
    *((_DWORD *)this + 40) = v17[0];
    *((_DWORD *)this + 38) = HIDWORD(v17[0]);
  }
  v3 = v2 & 7;
  v4 = *((_DWORD *)this + 30);
  v5 = (v4 >> 26) & 1;
  v6 = v5;
  if ((v3 - 2) >= 2)
  {
    if (v3 == 4)
    {
      v6 = (v4 & 0x4000000) == 0;
    }
    else
    {
      v6 = (v4 >> 26) & 1;
      if (v3 != 5)
      {
        if ((v4 & 0x4000000) != 0)
          v7 = 1;
        else
          v7 = 3;
        goto LABEL_9;
      }
    }
  }
  if (v6)
    v7 = 2;
  else
    v7 = 0;
LABEL_9:
  *((_DWORD *)this + v7 + 42) = v18;
  if ((v3 - 2) >= 2)
  {
    if (v3 == 4)
    {
      v5 = (v4 & 0x4000000) == 0;
    }
    else if (v3 != 5)
    {
      v8 = 3;
      if ((v4 & 0x4000000) == 0)
        v8 = 1;
      goto LABEL_14;
    }
  }
  v16 = v5 == 0;
  v8 = 2;
  if (!v16)
    v8 = 0;
LABEL_14:
  *((_DWORD *)this + v8 + 42) = HIDWORD(v18);
  WebCore::RenderBox::updateLogicalHeight(this);
  v10 = *((_DWORD *)this + 5) & 0xFFDFFDFF | 0x200;
  *((_DWORD *)this + 5) = v10;
  if ((*((_BYTE *)this + 45) & 2) == 0)
  {
    *(_WORD *)((char *)this + 69) &= ~1u;
    *((_WORD *)this + 38) = *((_WORD *)this + 38) & 0xF | (16
                                                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                            + 1944)
                                                                                + 248)
                                                                    + 472));
  }
  *((_DWORD *)this + 5) = v10 & 0xFFDFFE07;
  v11 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
      WTF::fastFree(v11, v9);
    else
      --*(_DWORD *)v11;
  }
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v15 = (WebCore::RenderFragmentedFlow *)(*(uint64_t (**)(WebCore::RenderEmbeddedObject *))(*(_QWORD *)this + 648))(this);
    if (v15)
      WebCore::RenderFragmentedFlow::clearFragmentsOverflow(v15, this);
  }
  WebCore::RenderBox::addVisualEffectOverflow(this);
  result = WebCore::RenderLayerModelObject::updateLayerTransform(this, v12);
  if (!*((_QWORD *)this + 29))
    result = (WTF *)WebCore::LocalFrameView::addEmbeddedObjectToUpdate(*(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)+ 8)+ 40)+ 8)+ 1944)+ 248), this);
  v14 = *((_DWORD *)this + 5) & 0xFFDFFDFF | 0x200;
  *((_DWORD *)this + 5) = v14;
  if ((*((_BYTE *)this + 45) & 2) == 0)
  {
    *(_WORD *)((char *)this + 69) &= ~1u;
    *((_WORD *)this + 38) = *((_WORD *)this + 38) & 0xF | (16
                                                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                            + 1944)
                                                                                + 248)
                                                                    + 472));
  }
  *((_DWORD *)this + 5) = v14 & 0xFFDFFE07;
  return result;
}

uint64_t WebCore::RenderEmbeddedObject::nodeAtPoint(WebCore::RenderBox *a1, uint64_t a2, _QWORD *a3, WebCore::HitTestLocation *a4, const WebCore::LayoutPoint *a5, unsigned int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  WebCore::Scrollbar *v16;
  WebCore::Scrollbar *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  WebCore::Scrollbar *v24;
  WebCore::Scrollbar *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  BOOL v30;
  _DWORD *v32;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  const CGRect *v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  const CGRect *v43;
  CGRect v44;

  v9 = WebCore::RenderWidget::nodeAtPoint(a1, a2, a3, a4, a5, a6);
  if ((_DWORD)v9)
  {
    v10 = *((_QWORD *)a1 + 29);
    if (v10)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10))
      {
        v11 = *((_QWORD *)a1 + 29);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 88))(v11) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1963B4A5CLL);
        }
        v12 = *(_DWORD *)a4;
        v13 = *(_DWORD *)a4 + 63;
        if (*(int *)a4 >= 0)
          v13 = *(_DWORD *)a4;
        v14 = ((int)(v12 - (v13 & 0xFFFFFFC0) + 32) >> 6) + (v13 >> 6);
        v15 = ((int)(*((_DWORD *)a4 + 1) - (v12 & 0xFFFFFFC0) + 32) >> 6) + *((_DWORD *)a4 + 1) / 64;
        v16 = (WebCore::Scrollbar *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 296))(v11);
        if (v16)
        {
          v17 = v16;
          if (WebCore::Scrollbar::shouldParticipateInHitTesting(v16))
          {
            v18 = (void *)*((_QWORD *)v17 + 5);
            if (v18)
            {
              if (objc_msgSend(*((id *)v17 + 5), "conformsToProtocol:", &unk_1EE342188))
                v18 = (void *)objc_msgSend(v18, "superview");
              objc_msgSend(v18, "frame");
              v44.origin.x = v34;
              v44.origin.y = v35;
              v44.size.width = v36;
              v44.size.height = v37;
              v19 = WebCore::enclosingIntRect(&v44, v38);
            }
            else
            {
              v19 = *((_QWORD *)v17 + 6);
              v20 = *((_QWORD *)v17 + 7);
            }
            v21 = v14 < (int)v19 || (int)v20 + (int)v19 <= v14;
            v22 = v21 || v15 < SHIDWORD(v19);
            if (!v22 && HIDWORD(v20) + HIDWORD(v19) > v15)
            {
              ++*((_DWORD *)v17 + 2);
              v32 = (_DWORD *)a3[14];
              a3[14] = v17;
              if (!v32)
                return v9;
              goto LABEL_39;
            }
          }
        }
        v24 = (WebCore::Scrollbar *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 304))(v11);
        if (v24)
        {
          v25 = v24;
          if (WebCore::Scrollbar::shouldParticipateInHitTesting(v24))
          {
            v26 = (void *)*((_QWORD *)v25 + 5);
            if (v26)
            {
              if (objc_msgSend(*((id *)v25 + 5), "conformsToProtocol:", &unk_1EE342188))
                v26 = (void *)objc_msgSend(v26, "superview");
              objc_msgSend(v26, "frame");
              v44.origin.x = v39;
              v44.origin.y = v40;
              v44.size.width = v41;
              v44.size.height = v42;
              v27 = WebCore::enclosingIntRect(&v44, v43);
            }
            else
            {
              v27 = *((_QWORD *)v25 + 6);
              v28 = *((_QWORD *)v25 + 7);
            }
            v29 = v14 < (int)v27 || (int)v28 + (int)v27 <= v14;
            v30 = v29 || v15 < SHIDWORD(v27);
            if (!v30 && HIDWORD(v28) + HIDWORD(v27) > v15)
            {
              ++*((_DWORD *)v25 + 2);
              v32 = (_DWORD *)a3[14];
              a3[14] = v25;
              if (v32)
              {
LABEL_39:
                if (v32[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
                else
                  --v32[2];
              }
            }
          }
        }
      }
    }
  }
  return v9;
}

uint64_t WebCore::RenderEmbeddedObject::scroll(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v6;

  v3 = *(_DWORD **)(a1 + 232);
  if (!v3 || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v3 + 88))(*(_QWORD *)(a1 + 232)))
    return 0;
  ++v3[2];
  v6 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)v3 + 280))(v3, a2, a3);
  if (v3[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  else
    --v3[2];
  return v6;
}

uint64_t WebCore::RenderEmbeddedObject::logicalScroll(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v6;

  if (a2 >= 4)
    v3 = 0;
  else
    v3 = a2;
  v4 = *(_DWORD **)(a1 + 232);
  if (!v4 || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v4 + 88))(*(_QWORD *)(a1 + 232)))
    return 0;
  ++v4[2];
  v6 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)v4 + 280))(v4, v3, a3);
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  else
    --v4[2];
  return v6;
}

BOOL WebCore::RenderEmbeddedObject::isInUnavailablePluginIndicator(WebCore::RenderEmbeddedObject *this, const WebCore::MouseEvent *a2, unsigned int a3)
{
  void *v4;
  float32x2_t v5;
  WTF *v6;
  WTF *v7;
  unint64_t ReplacementTextGeometry;
  int v9;
  int v10;
  double v11;
  int v12;
  int v13;
  double v14;
  int v15;
  signed int v16;
  int v17;
  float32x2_t v19;
  __int128 v20;
  __int128 v21;
  char v22;
  char v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  char v27;
  __int16 v28;
  uint64_t v29;

  v19 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(a3, a2)), (float32x2_t)vdup_n_s32(0x3C800000u));
  v23 = 0;
  v20 = 0u;
  v21 = 0u;
  v22 = 0;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v27 = 0;
  v28 = 1;
  v29 = 0x100000000;
  (*(void (**)(WebCore::RenderEmbeddedObject *, uint64_t, float32x2_t *))(*(_QWORD *)this + 584))(this, 2, &v19);
  WebCore::TransformState::flatten((WebCore::TransformState *)&v19, 0);
  v5 = v19;
  v6 = v25;
  v25 = 0;
  if (v6)
    WTF::fastFree(v6, v4);
  v7 = v24;
  v24 = 0;
  if (v7)
    WTF::fastFree(v7, v4);
  v19 = 0;
  ReplacementTextGeometry = WebCore::RenderEmbeddedObject::getReplacementTextGeometry(this, (const WebCore::LayoutPoint *)&v19);
  v11 = v5.f32[0] * 64.0;
  if (v11 > -2147483650.0)
    v12 = (int)v11;
  else
    v12 = 0x80000000;
  if (v11 < 2147483650.0)
    v13 = v12;
  else
    v13 = 0x7FFFFFFF;
  v14 = v5.f32[1] * 64.0;
  if (v14 >= 2147483650.0)
  {
    v15 = 0x7FFFFFFF;
  }
  else if (v14 <= -2147483650.0)
  {
    v15 = 0x80000000;
  }
  else
  {
    v15 = (int)v14;
  }
  if (v13 < (int)ReplacementTextGeometry)
    return 0;
  v16 = ReplacementTextGeometry + v9;
  if (__OFADD__((_DWORD)ReplacementTextGeometry, v9))
    v16 = (ReplacementTextGeometry >> 31) + 0x7FFFFFFF;
  if (v16 <= v13 || v15 < SHIDWORD(ReplacementTextGeometry))
    return 0;
  v17 = (HIDWORD(ReplacementTextGeometry) >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(HIDWORD(ReplacementTextGeometry), v10))
    v17 = HIDWORD(ReplacementTextGeometry) + v10;
  return v17 > v15;
}

uint64_t WebCore::RenderEmbeddedObject::handleUnavailablePluginIndicatorEvent(WebCore::RenderEmbeddedObject *this, WebCore::Event *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  void *v8;
  unint64_t StatusReg;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[16];
  char v26;
  __int128 v27;
  char v28;

  v4 = *((unsigned int *)this + 66);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                                                         + 8)
                                                                             + 528)
                                                                 + 8)
                                                     + 24)
                                         + 8)
                             + 48)
                 + 16);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 512))(v5, v4);
  if (!(_DWORD)result)
    return result;
  result = (*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 88))(a2);
  if (!(_DWORD)result)
    return result;
  ++*((_DWORD *)a2 + 4);
  v7 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 192))(v7) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1963B52A8);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 200))(v7);
  if ((result & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1963B52C8);
  }
  *(_DWORD *)(v7 + 24) += 2;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v10 = *(_QWORD *)(StatusReg + 736);
  if (!v10 || (result = *(_QWORD *)(v10 + 96)) == 0)
    result = WebCore::threadGlobalDataSlow((WebCore *)result);
  v11 = *(_QWORD *)(result + 40);
  if (!v11)
  {
    v22 = result;
    result = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)result);
    v11 = *(_QWORD *)(v22 + 40);
  }
  if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v11 + 1208))
  {
    v12 = *((unsigned __int16 *)a2 + 77);
    if ((v12 < 3 || v12 - 65534 <= 1) && !*((_WORD *)a2 + 77))
    {
      result = WebCore::RenderEmbeddedObject::isInUnavailablePluginIndicator(this, (const WebCore::MouseEvent *)*((unsigned int *)a2 + 36), *((_DWORD *)a2 + 37));
      *((_BYTE *)this + 281) = result;
      if ((_DWORD)result)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                            + 8)
                                                + 528)
                                    + 8)
                        + 640);
        *(_DWORD *)(v7 + 24) += 2;
        result = *(_QWORD *)(v13 + 200);
        *(_QWORD *)(v13 + 200) = v7;
        if (result)
        {
          if (*(_DWORD *)(result + 24) == 2)
          {
            if ((*(_WORD *)(result + 30) & 0x400) == 0)
              result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v8);
          }
          else
          {
            *(_DWORD *)(result + 24) -= 2;
          }
        }
        *(_BYTE *)(v13 + 194) = 0;
        *(_BYTE *)(v13 + 190) = 0;
        *(_BYTE *)(v7 + 200) = 1;
        if (!*((_BYTE *)this + 280))
        {
          *((_BYTE *)this + 280) = 1;
          if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                                                                 + 8)
                                                                                     + 1944)
                                                                         + 24)
                                                             + 8)
                                                 + 40)
                                     + 8)
                         + 3382))
          {
            LOBYTE(v27) = 0;
            v28 = 0;
            v25[0] = 0;
            v26 = 0;
            result = WebCore::RenderObject::issueRepaint((uint64_t)this, &v27, 0, 0, (uint64_t)v25);
          }
        }
      }
      *((_DWORD *)a2 + 5) |= 0x80u;
    }
  }
  v14 = *(_QWORD *)(StatusReg + 736);
  if (!v14 || (result = *(_QWORD *)(v14 + 96)) == 0)
    result = WebCore::threadGlobalDataSlow((WebCore *)result);
  v15 = *(_QWORD *)(result + 40);
  if (!v15)
  {
    v23 = result;
    result = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)result);
    v15 = *(_QWORD *)(v23 + 40);
  }
  if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v15 + 1256))
  {
    v16 = *((unsigned __int16 *)a2 + 77);
    if ((v16 < 3 || v16 - 65534 <= 1) && !*((_WORD *)a2 + 77))
    {
      if (*((_BYTE *)this + 280))
      {
        v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                            + 8)
                                                + 528)
                                    + 8)
                        + 640);
        result = *(_QWORD *)(v17 + 200);
        *(_QWORD *)(v17 + 200) = 0;
        if (!result)
        {
LABEL_35:
          *(_BYTE *)(v17 + 194) = 0;
          *(_BYTE *)(v17 + 190) = 0;
          *(_BYTE *)(v7 + 200) = 0;
          goto LABEL_36;
        }
        if (*(_DWORD *)(result + 24) != 2)
        {
          *(_DWORD *)(result + 24) -= 2;
          goto LABEL_35;
        }
        if ((*(_WORD *)(result + 30) & 0x400) != 0)
          goto LABEL_35;
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v8);
        v21 = *((unsigned __int8 *)this + 280);
        *(_BYTE *)(v17 + 194) = 0;
        *(_BYTE *)(v17 + 190) = 0;
        *(_BYTE *)(v7 + 200) = 0;
        if (v21)
        {
LABEL_36:
          *((_BYTE *)this + 280) = 0;
          if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                                                                 + 8)
                                                                                     + 1944)
                                                                         + 24)
                                                             + 8)
                                                 + 40)
                                     + 8)
                         + 3382))
          {
            LOBYTE(v27) = 0;
            v28 = 0;
            v25[0] = 0;
            v26 = 0;
            result = WebCore::RenderObject::issueRepaint((uint64_t)this, &v27, 0, 0, (uint64_t)v25);
          }
        }
      }
      if (*((_BYTE *)this + 281))
      {
        result = WebCore::RenderEmbeddedObject::isInUnavailablePluginIndicator(this, (const WebCore::MouseEvent *)*((unsigned int *)a2 + 36), *((_DWORD *)a2 + 37));
        if ((_DWORD)result)
        {
          v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                                                                  + 8)
                                                                                      + 528)
                                                                          + 8)
                                                              + 24)
                                                  + 8)
                                      + 48)
                          + 16);
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v18 + 520))(v18, v7, *((unsigned int *)this + 66));
        }
      }
      *((_BYTE *)this + 281) = 0;
      *((_DWORD *)a2 + 5) |= 0x80u;
    }
  }
  v19 = *(_QWORD *)(StatusReg + 736);
  if (!v19 || (result = *(_QWORD *)(v19 + 96)) == 0)
    result = WebCore::threadGlobalDataSlow((WebCore *)result);
  v20 = *(_QWORD *)(result + 40);
  if (!v20)
  {
    v24 = result;
    result = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)result);
    v20 = *(_QWORD *)(v24 + 40);
  }
  if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v20 + 1232))
  {
    if (*((_BYTE *)this + 281))
      result = WebCore::RenderEmbeddedObject::isInUnavailablePluginIndicator(this, (const WebCore::MouseEvent *)*((unsigned int *)a2 + 36), *((_DWORD *)a2 + 37));
    else
      result = 0;
    if (*((unsigned __int8 *)this + 280) != (_DWORD)result)
    {
      *((_BYTE *)this + 280) = result;
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                                                             + 8)
                                                                                 + 1944)
                                                                     + 24)
                                                         + 8)
                                             + 40)
                                 + 8)
                     + 3382))
      {
        LOBYTE(v27) = 0;
        v28 = 0;
        v25[0] = 0;
        v26 = 0;
        result = WebCore::RenderObject::issueRepaint((uint64_t)this, &v27, 0, 0, (uint64_t)v25);
      }
    }
    *((_DWORD *)a2 + 5) |= 0x80u;
  }
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v7, v8);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  if (*((_DWORD *)a2 + 4) == 1)
    return (*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 8))(a2);
  --*((_DWORD *)a2 + 4);
  return result;
}

uint64_t WebCore::RenderEmbeddedObject::getCursor(WebCore::RenderEmbeddedObject *this, const WebCore::LayoutPoint *a2, WebCore::Cursor *a3)
{
  uint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  unint64_t ReplacementTextGeometry;
  double v11;
  int v12;
  double v13;
  signed int v14;
  signed int v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v20;
  uint64_t v21;

  if (!*((_BYTE *)this + 256))
    goto LABEL_28;
  if (*((_DWORD *)this + 65) == 1)
    goto LABEL_28;
  v6 = *((unsigned int *)this + 66);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                                                         + 8)
                                                                             + 528)
                                                                 + 8)
                                                     + 24)
                                         + 8)
                             + 48)
                 + 16);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 512))(v7, v6))
    goto LABEL_28;
  v8 = (float)*(int *)a2 * 0.015625;
  v9 = (float)*((int *)a2 + 1) * 0.015625;
  v21 = 0;
  ReplacementTextGeometry = WebCore::RenderEmbeddedObject::getReplacementTextGeometry(this, (const WebCore::LayoutPoint *)&v21);
  v11 = v8 * 64.0;
  if (v11 > -2147483650.0)
    v12 = (int)v11;
  else
    v12 = 0x80000000;
  if (v11 >= 2147483650.0)
    v12 = 0x7FFFFFFF;
  v13 = v9 * 64.0;
  if (v13 >= 2147483650.0)
    v14 = 0x7FFFFFFF;
  else
    v14 = v13 <= -2147483650.0 ? 0x80000000 : (int)v13;
  if (v12 < (int)ReplacementTextGeometry)
    goto LABEL_28;
  v15 = ReplacementTextGeometry + (_DWORD)a2;
  if (__OFADD__((_DWORD)ReplacementTextGeometry, (_DWORD)a2))
    v15 = (ReplacementTextGeometry >> 31) + 0x7FFFFFFF;
  if (v15 <= v12 || v14 < SHIDWORD(ReplacementTextGeometry))
    goto LABEL_28;
  v16 = HIDWORD(ReplacementTextGeometry) + HIDWORD(a2);
  if (__OFADD__(HIDWORD(ReplacementTextGeometry), HIDWORD(a2)))
    v16 = (HIDWORD(ReplacementTextGeometry) >> 31) + 0x7FFFFFFF;
  if (v16 > v14)
  {
    {
      v17 = qword_1ECE90BB8;
      *(_BYTE *)a3 = WebCore::handCursor(void)::c;
      if (v17)
        ++*(_DWORD *)(v17 + 8);
    }
    else
    {
      v17 = 0;
      WebCore::handCursor(void)::c = 3;
      xmmword_1ECE90BC0 = 0uLL;
      qword_1ECE90BB8 = 0;
      *(_BYTE *)a3 = 3;
    }
    v18 = (_DWORD *)*((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = v17;
    if (v18)
    {
      if (v18[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
      else
        --v18[2];
    }
    *((_OWORD *)a3 + 1) = xmmword_1ECE90BC0;
    return 1;
  }
  else
  {
LABEL_28:
    v20 = *((_QWORD *)this + 29);
    if (v20
      && ((*(uint64_t (**)(uint64_t, const WebCore::LayoutPoint *, WebCore::Cursor *))(*(_QWORD *)v20 + 88))(v20, a2, a3) & 1) != 0)
    {
      return 2;
    }
    else
    {
      return 0;
    }
  }
}

void WebCore::RenderFileUploadControl::~RenderFileUploadControl(WebCore::RenderFileUploadControl *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::RenderBlockFlow::~RenderBlockFlow(this, a2);
  if (*((_DWORD *)v2 + 4))
  {
    *((_OWORD *)v2 + 14) = 0u;
    *((_OWORD *)v2 + 15) = 0u;
    *((_OWORD *)v2 + 12) = 0u;
    *((_OWORD *)v2 + 13) = 0u;
    *((_OWORD *)v2 + 10) = 0u;
    *((_OWORD *)v2 + 11) = 0u;
    *((_OWORD *)v2 + 8) = 0u;
    *((_OWORD *)v2 + 9) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 7) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *(_OWORD *)v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(v2, v3);
  }
}

void WebCore::RenderFileUploadControl::updateFromElement(WebCore::RenderFileUploadControl *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[20];
  __int128 v9;
  char v10;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x10) == 0
    || (v2 = *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24), v2 != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)))
  {
    __break(0xC471u);
    JUMPOUT(0x1963B5670);
  }
  v4 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v1 + 72) & 0xFFFFFFFFFFFFLL) + 0x58) + 80);
  if (v4)
  {
    if ((*(_WORD *)(v4 + 28) & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == v2)
    {
      v5 = *(_WORD *)(v1 + 232) & 0x200;
      if (*((unsigned __int8 *)this + 248) != v5 >> 9)
      {
        *((_BYTE *)this + 248) = v5 >> 9;
        WebCore::Element::setActive(v4, (void *)(v5 != 0), 0);
        v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
        if ((*(_WORD *)(v1 + 28) & 0x10) == 0
          || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
        {
          __break(0xC471u);
          JUMPOUT(0x1963B5650);
        }
      }
    }
  }
  v6 = *(_QWORD *)(v1 + 240);
  if (*(_DWORD *)(v6 + 12) == 64)
  {
    v7 = *(_QWORD *)(v6 + 72);
    if (v7)
    {
      if (!*(_DWORD *)(v7 + 28)
        && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8)
                                                                                 + 1944)
                                                                     + 24)
                                                         + 8)
                                             + 40)
                                 + 8)
                     + 3382))
      {
        LOBYTE(v9) = 0;
        v10 = 0;
        v8[0] = 0;
        v8[16] = 0;
        WebCore::RenderObject::issueRepaint((uint64_t)this, &v9, 0, 0, (uint64_t)v8);
      }
    }
  }
}

uint64_t WebCore::RenderFileUploadControl::maxFilenameLogicalWidth(WebCore::RenderFileUploadControl *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  unint64_t v6;
  int v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x10) == 0)
    goto LABEL_31;
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24);
  if (v2 != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    goto LABEL_31;
  v4 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v1 + 72) & 0xFFFFFFFFFFFFLL) + 0x58) + 80);
  if (v4
    && (*(_WORD *)(v4 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == v2
    && (*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v5 = -4;
    if ((*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
    {
      v6 = *(_QWORD *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0xA0);
      if (((*(_DWORD *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x7C) >> 13) & 6u) - 2 <= 3)
        v6 <<= 32;
      v7 = SHIDWORD(v6) / 64;
      v8 = -HIDWORD(v6) < 0;
      v9 = -HIDWORD(v6) & 0x3F;
      v10 = HIDWORD(v6) & 0x3F;
      if (!v8)
        LODWORD(v10) = -v9;
      v5 = -4 - (v7 + (((int)v10 + 32) >> 6));
    }
  }
  else
  {
    v5 = -4;
  }
  v11 = WebCore::RenderBox::contentLogicalWidth(this);
  v12 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v12 + 28) & 0x10) == 0
    || (v13 = *(_QWORD *)(*(_QWORD *)(v12 + 96) + 24), v13 != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)))
  {
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x1963B5924);
  }
  v14 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v12 + 72) & 0xFFFFFFFFFFFFLL) + 0x58) + 80);
  if (v14
    && (*(_WORD *)(v14 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v14 + 96) + 24) == v13
    && (v13 = *(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL) != 0
    && (*(_BYTE *)((*(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
  {
    v13 = *(_QWORD *)((*(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL) + 0xA0);
    if (((*(_DWORD *)((*(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL) + 0x7C) >> 13) & 6u) - 2 <= 3)
      v13 >>= 32;
    v16 = (int)v13 / 64;
    v8 = -(int)v13 < 0;
    v17 = -(int)v13 & 0x3F;
    LODWORD(v13) = v13 & 0x3F;
    if (!v8)
      LODWORD(v13) = -v17;
    v15 = -(v16 + (((int)v13 + 32) >> 6));
  }
  else
  {
    v15 = 0;
  }
  v18 = v11 / 64;
  v19 = v11 - (v13 & 0xFFFFFFC0) + 32;
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 240) + 664))(*(_QWORD *)(v12 + 240)))
    v20 = v5;
  else
    v20 = 0;
  v21 = v18 + (v19 >> 6) + v15 + v20 - 4;
  return v21 & ~(v21 >> 31);
}

void WebCore::RenderFileUploadControl::paintObject(WebCore::RenderFileUploadControl *this, int32x4_t *a2, const WebCore::LayoutPoint *a3)
{
  float v3;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  float v12;
  double v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  float v18;
  double v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  float v25;
  double v26;
  int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  float v31;
  double v32;
  int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  float v37;
  double v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  float v42;
  double v43;
  int v44;
  BOOL v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  int v55;
  uint64_t v56;
  char v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  int v81;
  unsigned int v82;
  int v83;
  int v84;
  WTF::StringImpl *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  unsigned int v91;
  unint64_t v92;
  int v93;
  unsigned int v94;
  uint64_t v95;
  WebCore::RenderObject *v96;
  int v97;
  int v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  int v103;
  int v104;
  double v105;
  uint64_t v106;
  const WebCore::RenderText *v107;
  WebCore::LayoutIntegration::LineLayout *v108;
  int v109;
  int v110;
  void *v111;
  unint64_t v112;
  WTF *v113;
  WTF *v114;
  uint64_t v115;
  float v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  double v121;
  double v122;
  int v123;
  double v124;
  double v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  int v129;
  int v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  int v136;
  int v137;
  WebCore::GraphicsContext *v138;
  void *v139;
  uint64_t v140;
  int v141;
  int v142;
  int v143;
  float v144;
  unsigned int v145;
  unsigned int v146;
  float v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char v152;
  uint64_t v153;
  unsigned int v154;
  int v155;
  int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  unsigned int v166;
  int v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  float v175;
  WTF *v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  float v180;
  double v181;
  unsigned int v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  float v186;
  double v187;
  unsigned int v188;
  int v189;
  char v190;
  int v191;
  int v192;
  int v193;
  int v194;
  uint64_t v195;
  float v196;
  double v197;
  unsigned int v198;
  int v199;
  uint64_t v200;
  float v201;
  double v202;
  unsigned int v203;
  int v204;
  uint64_t v205;
  float v206;
  double v207;
  unsigned int v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  float v213;
  double v214;
  unsigned int v215;
  int v216;
  unsigned int *v217;
  unsigned int v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  unsigned int v227;
  int v228;
  int v229;
  char v230;
  unsigned int v231;
  char v232[8];
  WTF::StringImpl *v233;
  WTF::StringImpl *v234;
  _QWORD v235[2];
  int v236;
  char v237;
  unint64_t v238;
  __int128 v239;
  __int128 v240;
  char v241;
  char v242;
  WTF *v243;
  WTF *v244;
  uint64_t v245;
  char v246;
  __int16 v247;
  int v248;
  int v249;

  if ((*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) == 0 && (*((_BYTE *)this + 120) & 0x30) == 0)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2[5].i64[0] + 40))(a2[5].i64[0]) & 1) != 0)
    {
LABEL_256:
      WebCore::RenderBlock::paintObject(this, a2, a3);
      return;
    }
    v7 = a2[5].i64[0];
    v8 = a2[1].u16[0];
    if (v8 == 8 || v8 == 2)
    {
      v9 = *(_DWORD *)a3;
      v10 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
      if ((v10 == 4 || v10 == 2) && WebCore::RenderBlock::intrinsicBorderForFieldset(this))
      {
        v195 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
        v196 = 0.0;
        if ((*(_BYTE *)(v195 + 124) & 0xE) != 0)
        {
          v222 = *(_QWORD *)(v195 + 200);
          if (*(_BYTE *)(v222 + 5) && *(_BYTE *)(v222 + 76) == 4)
          {
            if (*(_BYTE *)(v222 + 78))
              v196 = *(float *)(v222 + 72);
            else
              v196 = (float)*(int *)(v222 + 72);
          }
          else
          {
            v196 = *(float *)(v195 + 120);
          }
        }
        v197 = v196 * 64.0;
        if (v197 >= 2147483650.0)
        {
          v198 = 0x7FFFFFFF;
        }
        else if (v197 <= -2147483650.0)
        {
          v198 = 0x80000000;
        }
        else
        {
          v198 = (int)v197;
        }
        v199 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
        v14 = v198 + v199;
        if (__OFADD__(v198, v199))
          v14 = (v198 >> 31) + 0x7FFFFFFF;
      }
      else
      {
        v11 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
        v12 = 0.0;
        if ((*(_BYTE *)(v11 + 124) & 0xE) != 0)
        {
          v72 = *(_QWORD *)(v11 + 200);
          if (*(_BYTE *)(v72 + 5) && *(_BYTE *)(v72 + 76) == 4)
          {
            if (*(_BYTE *)(v72 + 78))
              v12 = *(float *)(v72 + 72);
            else
              v12 = (float)*(int *)(v72 + 72);
          }
          else
          {
            v12 = *(float *)(v11 + 120);
          }
        }
        v13 = v12 * 64.0;
        if (v13 >= 2147483650.0)
        {
          v14 = 0x7FFFFFFF;
        }
        else if (v13 <= -2147483650.0)
        {
          v14 = 0x80000000;
        }
        else
        {
          v14 = (int)v13;
        }
      }
      v15 = v9 + v14;
      if (__OFADD__(v9, v14))
        v15 = (v9 >> 31) + 0x7FFFFFFF;
      v16 = *((_DWORD *)a3 + 1);
      if (((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1 >= 5
        && (*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0
        && (v178 = WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this)) != 0&& *(_DWORD *)(v178 + 8))
      {
        v179 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
        v180 = 0.0;
        if ((*(_BYTE *)(v179 + 172) & 0xE) != 0)
        {
          v210 = *(_QWORD *)(v179 + 200);
          if (*(_BYTE *)(v210 + 5) && *(_BYTE *)(v210 + 52) == 4)
          {
            if (*(_BYTE *)(v210 + 54))
              v180 = *(float *)(v210 + 48);
            else
              v180 = (float)*(int *)(v210 + 48);
          }
          else
          {
            v180 = *(float *)(v179 + 168);
          }
        }
        v181 = v180 * 64.0;
        if (v181 >= 2147483650.0)
        {
          v182 = 0x7FFFFFFF;
        }
        else if (v181 <= -2147483650.0)
        {
          v182 = 0x80000000;
        }
        else
        {
          v182 = (int)v181;
        }
        v183 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
        v20 = v182 + v183;
        if (__OFADD__(v182, v183))
          v20 = (v182 >> 31) + 0x7FFFFFFF;
      }
      else
      {
        v17 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
        v18 = 0.0;
        if ((*(_BYTE *)(v17 + 172) & 0xE) != 0)
        {
          v74 = *(_QWORD *)(v17 + 200);
          if (*(_BYTE *)(v74 + 5) && *(_BYTE *)(v74 + 52) == 4)
          {
            if (*(_BYTE *)(v74 + 54))
              v18 = *(float *)(v74 + 48);
            else
              v18 = (float)*(int *)(v74 + 48);
          }
          else
          {
            v18 = *(float *)(v17 + 168);
          }
        }
        v19 = v18 * 64.0;
        if (v19 >= 2147483650.0)
        {
          v20 = 0x7FFFFFFF;
        }
        else if (v19 <= -2147483650.0)
        {
          v20 = 0x80000000;
        }
        else
        {
          v20 = (int)v19;
        }
      }
      v21 = v16 + v20;
      if (__OFADD__(v16, v20))
        v21 = (v16 >> 31) + 0x7FFFFFFF;
      v22 = *((_DWORD *)this + 40);
      v23 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
      if ((v23 == 4 || v23 == 2) && WebCore::RenderBlock::intrinsicBorderForFieldset(this))
      {
        v200 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
        v201 = 0.0;
        if ((*(_BYTE *)(v200 + 124) & 0xE) != 0)
        {
          v223 = *(_QWORD *)(v200 + 200);
          if (*(_BYTE *)(v223 + 5) && *(_BYTE *)(v223 + 76) == 4)
          {
            if (*(_BYTE *)(v223 + 78))
              v201 = *(float *)(v223 + 72);
            else
              v201 = (float)*(int *)(v223 + 72);
          }
          else
          {
            v201 = *(float *)(v200 + 120);
          }
        }
        v202 = v201 * 64.0;
        if (v202 >= 2147483650.0)
        {
          v203 = 0x7FFFFFFF;
        }
        else if (v202 <= -2147483650.0)
        {
          v203 = 0x80000000;
        }
        else
        {
          v203 = (int)v202;
        }
        v204 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
        v27 = v203 + v204;
        if (__OFADD__(v203, v204))
          v27 = (v203 >> 31) + 0x7FFFFFFF;
      }
      else
      {
        v24 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
        v25 = 0.0;
        if ((*(_BYTE *)(v24 + 124) & 0xE) != 0)
        {
          v73 = *(_QWORD *)(v24 + 200);
          if (*(_BYTE *)(v73 + 5) && *(_BYTE *)(v73 + 76) == 4)
          {
            if (*(_BYTE *)(v73 + 78))
              v25 = *(float *)(v73 + 72);
            else
              v25 = (float)*(int *)(v73 + 72);
          }
          else
          {
            v25 = *(float *)(v24 + 120);
          }
        }
        v26 = v25 * 64.0;
        if (v26 >= 2147483650.0)
        {
          v27 = 0x7FFFFFFF;
        }
        else if (v26 <= -2147483650.0)
        {
          v27 = 0x80000000;
        }
        else
        {
          v27 = (int)v26;
        }
      }
      v28 = v22 - v27;
      if (__OFSUB__(v22, v27))
        v28 = (v22 >> 31) + 0x7FFFFFFF;
      v29 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
      if ((v29 == 5 || v29 == 3) && WebCore::RenderBlock::intrinsicBorderForFieldset(this))
      {
        v205 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
        v206 = 0.0;
        if ((*(_BYTE *)(v205 + 148) & 0xE) != 0)
        {
          v220 = *(_QWORD *)(v205 + 200);
          if (*(_BYTE *)(v220 + 5) && *(_BYTE *)(v220 + 60) == 4)
          {
            if (*(_BYTE *)(v220 + 62))
              v206 = *(float *)(v220 + 56);
            else
              v206 = (float)*(int *)(v220 + 56);
          }
          else
          {
            v206 = *(float *)(v205 + 144);
          }
        }
        v207 = v206 * 64.0;
        if (v207 >= 2147483650.0)
        {
          v208 = 0x7FFFFFFF;
        }
        else if (v207 <= -2147483650.0)
        {
          v208 = 0x80000000;
        }
        else
        {
          v208 = (int)v207;
        }
        v209 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
        v33 = v208 + v209;
        if (__OFADD__(v208, v209))
          v33 = (v208 >> 31) + 0x7FFFFFFF;
      }
      else
      {
        v30 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
        v31 = 0.0;
        if ((*(_BYTE *)(v30 + 148) & 0xE) != 0)
        {
          v71 = *(_QWORD *)(v30 + 200);
          if (*(_BYTE *)(v71 + 5) && *(_BYTE *)(v71 + 60) == 4)
          {
            if (*(_BYTE *)(v71 + 62))
              v31 = *(float *)(v71 + 56);
            else
              v31 = (float)*(int *)(v71 + 56);
          }
          else
          {
            v31 = *(float *)(v30 + 144);
          }
        }
        v32 = v31 * 64.0;
        if (v32 >= 2147483650.0)
        {
          v33 = 0x7FFFFFFF;
        }
        else if (v32 <= -2147483650.0)
        {
          v33 = 0x80000000;
        }
        else
        {
          v33 = (int)v32;
        }
      }
      v34 = v28 - v33;
      if (__OFSUB__(v28, v33))
        v34 = (v28 >> 31) + 0x7FFFFFFF;
      v35 = *((_DWORD *)this + 41);
      if ((*((_DWORD *)this + 31) & 0xE000) == 0x2000
        && WebCore::RenderBlock::intrinsicBorderForFieldset(this))
      {
        v212 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
        v213 = 0.0;
        if ((*(_BYTE *)(v212 + 196) & 0xE) != 0)
        {
          v221 = *(_QWORD *)(v212 + 200);
          if (*(_BYTE *)(v221 + 5) && *(_BYTE *)(v221 + 68) == 4)
          {
            if (*(_BYTE *)(v221 + 70))
              v213 = *(float *)(v221 + 64);
            else
              v213 = (float)*(int *)(v221 + 64);
          }
          else
          {
            v213 = *(float *)(v212 + 192);
          }
        }
        v214 = v213 * 64.0;
        if (v214 >= 2147483650.0)
        {
          v215 = 0x7FFFFFFF;
        }
        else if (v214 <= -2147483650.0)
        {
          v215 = 0x80000000;
        }
        else
        {
          v215 = (int)v214;
        }
        v216 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
        v39 = v215 + v216;
        if (__OFADD__(v215, v216))
          v39 = (v215 >> 31) + 0x7FFFFFFF;
      }
      else
      {
        v36 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
        v37 = 0.0;
        if ((*(_BYTE *)(v36 + 196) & 0xE) != 0)
        {
          v70 = *(_QWORD *)(v36 + 200);
          if (*(_BYTE *)(v70 + 5) && *(_BYTE *)(v70 + 68) == 4)
          {
            if (*(_BYTE *)(v70 + 70))
              v37 = *(float *)(v70 + 64);
            else
              v37 = (float)*(int *)(v70 + 64);
          }
          else
          {
            v37 = *(float *)(v36 + 192);
          }
        }
        v38 = v37 * 64.0;
        if (v38 >= 2147483650.0)
        {
          v39 = 0x7FFFFFFF;
        }
        else if (v38 <= -2147483650.0)
        {
          v39 = 0x80000000;
        }
        else
        {
          v39 = (int)v38;
        }
      }
      v40 = v35 - v39;
      if (__OFSUB__(v35, v39))
        v40 = (v35 >> 31) + 0x7FFFFFFF;
      if (((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1 >= 5
        && (*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0
        && (v184 = WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this)) != 0&& *(_DWORD *)(v184 + 8))
      {
        v185 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
        v186 = 0.0;
        if ((*(_BYTE *)(v185 + 172) & 0xE) != 0)
        {
          v211 = *(_QWORD *)(v185 + 200);
          if (*(_BYTE *)(v211 + 5) && *(_BYTE *)(v211 + 52) == 4)
          {
            if (*(_BYTE *)(v211 + 54))
              v186 = *(float *)(v211 + 48);
            else
              v186 = (float)*(int *)(v211 + 48);
          }
          else
          {
            v186 = *(float *)(v185 + 168);
          }
        }
        v187 = v186 * 64.0;
        if (v187 >= 2147483650.0)
        {
          v188 = 0x7FFFFFFF;
        }
        else if (v187 <= -2147483650.0)
        {
          v188 = 0x80000000;
        }
        else
        {
          v188 = (int)v187;
        }
        v189 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
        v44 = v188 + v189;
        if (__OFADD__(v188, v189))
          v44 = (v188 >> 31) + 0x7FFFFFFF;
      }
      else
      {
        v41 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
        v42 = 0.0;
        if ((*(_BYTE *)(v41 + 172) & 0xE) != 0)
        {
          v75 = *(_QWORD *)(v41 + 200);
          if (*(_BYTE *)(v75 + 5) && *(_BYTE *)(v75 + 52) == 4)
          {
            if (*(_BYTE *)(v75 + 54))
              v42 = *(float *)(v75 + 48);
            else
              v42 = (float)*(int *)(v75 + 48);
          }
          else
          {
            v42 = *(float *)(v41 + 168);
          }
        }
        v43 = v42 * 64.0;
        if (v43 >= 2147483650.0)
        {
          v44 = 0x7FFFFFFF;
        }
        else if (v43 <= -2147483650.0)
        {
          v44 = 0x80000000;
        }
        else
        {
          v44 = (int)v43;
        }
      }
      v45 = __OFSUB__(v40, v44);
      v46 = v40 - v44;
      if (v45)
        v46 = (v40 >> 31) + 0x7FFFFFFF;
      v47 = v46 + 128;
      if (__OFADD__(v46, 128))
        v47 = 0x7FFFFFFF;
      v48 = v15 >> 6;
      if (v34)
      {
        v49 = v15 + v34;
        if (__OFADD__(v15, v34))
          v49 = (v15 >> 31) + 0x7FFFFFFF;
        if (v49 > 2147483583)
        {
          v50 = 0x1FFFFFF;
        }
        else if (v49 < 0)
        {
          v50 = -(-v49 >> 6);
        }
        else
        {
          v50 = (v49 + 63) >> 6;
        }
      }
      else
      {
        v50 = v15 >> 6;
      }
      v51 = v21 >> 6;
      if (v47)
      {
        v45 = __OFADD__(v21, v47);
        v52 = v21 + v47;
        if (v45)
          v52 = (v21 >> 31) + 0x7FFFFFFF;
        if (v52 > 2147483583)
        {
          v53 = 0x1FFFFFF;
        }
        else if (v52 < 0)
        {
          v53 = -(-v52 >> 6);
        }
        else
        {
          v53 = (v52 + 63) >> 6;
        }
      }
      else
      {
        v53 = v21 >> 6;
      }
      v54 = v50 - v48;
      if ((int)(v50 - v48) < 1)
        goto LABEL_256;
      v55 = v53 - v51;
      if ((int)(v53 - v51) < 1)
        goto LABEL_256;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, 1);
      v56 = a2[5].i64[0];
      *(float *)&v238 = (float)v48;
      *((float *)&v238 + 1) = (float)v51;
      *(float *)&v239 = (float)v54;
      *((float *)&v239 + 1) = (float)v55;
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v56 + 456))(v56, &v238);
      v57 = 0;
    }
    else
    {
      v57 = 1;
    }
    v58 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    v59 = 1;
    v60 = v58 - 1;
    v191 = 0;
    v192 = 0;
    v193 = 0;
    v194 = 0;
    switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
    {
      case 1:
LABEL_378:
        v190 = 1;
        goto LABEL_75;
      case 2:
LABEL_377:
        v190 = 2;
        v58 = v191;
        v59 = v192;
        goto LABEL_75;
      case 3:
      case 5:
        v59 = 0;
        goto LABEL_73;
      case 4:
        goto LABEL_78;
      default:
LABEL_73:
        v58 = v59;
        v190 = 2;
        v191 = v59;
        v192 = v59;
        switch(v60)
        {
          case 0:
            goto LABEL_378;
          case 1:
            goto LABEL_377;
          case 2:
          case 4:
            v190 = 3;
            break;
          case 3:
            break;
          default:
            v190 = 0;
            break;
        }
LABEL_75:
        v193 = v190 & 1;
        if (v58)
        {
          v61 = 0;
          v62 = *(_QWORD *)a3;
        }
        else
        {
          v194 = v59;
LABEL_78:
          v62 = *((unsigned int *)a3 + 1) | ((unint64_t)*(unsigned int *)a3 << 32);
          v61 = 1;
          v59 = v194;
        }
        if (a2[1].i16[0] != 8)
          goto LABEL_255;
        v228 = v193;
        v63 = (uint64_t *)((char *)this + 80);
        WebCore::RenderFileUploadControl::fileTextValue(this, &v234);
        v64 = *((_QWORD *)this + 14);
        if (v234)
          v65 = *((unsigned int *)v234 + 1) | ((unint64_t)((*((_DWORD *)v234 + 4) >> 2) & 1) << 32);
        else
          v65 = 0x100000000;
        WebCore::RenderBlock::constructTextRun(v65, (uint64_t)this + 80, 4, 3, (uint64_t)v232);
        v66 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
        if ((*(_WORD *)(v66 + 28) & 0x10) == 0
          || (v67 = *(_QWORD *)(*(_QWORD *)(v66 + 96) + 24), v67 != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)))
        {
          __break(0xC471u);
          JUMPOUT(0x1963B6084);
        }
        v68 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v66 + 72) & 0xFFFFFFFFFFFFLL) + 0x58) + 80);
        if (v68
          && (*(_WORD *)(v68 + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v68 + 96) + 24) == v67
          && (v69 = *(_QWORD *)(v68 + 64) & 0xFFFFFFFFFFFFLL) != 0
          && (*(_BYTE *)((*(_QWORD *)(v68 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
        {
          v76 = ((*(_DWORD *)((*(_QWORD *)(v68 + 64) & 0xFFFFFFFFFFFFLL) + 0x7C) >> 13) & 6) - 2;
          v77 = *(_QWORD *)(v69 + 160);
          if (v76 <= 3)
            v77 <<= 32;
          v229 = ((int)(HIDWORD(v77) - (v76 & 0xFFFFFFC0) + 32) >> 6) + SHIDWORD(v77) / 64;
        }
        else
        {
          v229 = 0;
        }
        v230 = v57;
        v78 = *(_QWORD *)this;
        if ((*((_BYTE *)this + 21) & 0x10) != 0)
        {
          v79 = (*(uint64_t (**)(WebCore::RenderFileUploadControl *))(v78 + 1000))(this);
          v80 = (*(uint64_t (**)(WebCore::RenderFileUploadControl *))(*(_QWORD *)this + 928))(this);
        }
        else
        {
          v79 = (*(uint64_t (**)(WebCore::RenderFileUploadControl *))(v78 + 1016))(this);
          v80 = (*(uint64_t (**)(WebCore::RenderFileUploadControl *))(*(_QWORD *)this + 944))(this);
        }
        v81 = v79 + v80;
        if (__OFADD__(v79, v80))
          v81 = (v79 >> 31) + 0x7FFFFFFF;
        v82 = v62 + v81;
        v231 = v61;
        if (__OFADD__((_DWORD)v62, v81))
          v82 = (v62 >> 31) + 0x7FFFFFFF;
        v83 = *((_DWORD *)this + 30);
        v84 = WebCore::RenderBlock::textIndentOffset(this);
        if ((v83 & 0x4000000) != 0)
        {
          if (__OFSUB__(v82, v84))
            v86 = (v82 >> 31) + 0x7FFFFFFF;
          else
            v86 = v82 - v84;
        }
        else
        {
          v86 = v82 + v84;
          if (__OFADD__(v82, v84))
            v86 = (v82 >> 31) + 0x7FFFFFFF;
        }
        v87 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
        if ((*(_WORD *)(v87 + 28) & 0x10) == 0
          || (v88 = *(_QWORD *)(*(_QWORD *)(v87 + 96) + 24), v88 != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)))
        {
          __break(0xC471u);
          JUMPOUT(0x1963B60A4);
        }
        v89 = *(uint64_t **)(*(_QWORD *)((*(_QWORD *)(v87 + 72) & 0xFFFFFFFFFFFFLL) + 0x58) + 80);
        if (!v89 || (*((_WORD *)v89 + 14) & 0x10) == 0 || *(_QWORD *)(v89[12] + 24) != v88)
          goto LABEL_249;
        v90 = v89[8] & 0xFFFFFFFFFFFFLL;
        v227 = v86;
        if (v90)
        {
          if ((*(_BYTE *)((v89[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
          {
            v91 = ((*(_DWORD *)((v89[8] & 0xFFFFFFFFFFFFLL) + 0x7C) >> 13) & 6) - 2;
            v92 = *(_QWORD *)((v89[8] & 0xFFFFFFFFFFFFLL) + 0xA0);
            if (v91 <= 3)
              v92 >>= 32;
            v93 = ((int)(v92 - (v91 & 0xFFFFFFC0) + 32) >> 6) + (int)v92 / 64;
            if (v93 >= -33554432)
            {
              if (v93 <= 0x1FFFFFF)
                LODWORD(v90) = v93 << 6;
              else
                LODWORD(v90) = 0x7FFFFFFF;
            }
            else
            {
              LODWORD(v90) = 0x80000000;
            }
          }
          else
          {
            LODWORD(v90) = 0;
          }
        }
        v224 = v90;
        v94 = v90 + 256;
        if (__OFADD__((_DWORD)v90, 256))
          v94 = 0x7FFFFFFF;
        v226 = v64 + 32;
        v95 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v87 + 240) + 664))(*(_QWORD *)(v87 + 240));
        v97 = v229 + 4;
        if (!v95)
          v97 = 0;
        v98 = v97 << 6;
        if (v97 > 0x1FFFFFF)
          v98 = 0x7FFFFFFF;
        v99 = v94 + v98;
        if (__OFADD__(v94, v98))
          v99 = (v94 >> 31) + 0x7FFFFFFF;
        v225 = v7;
        if ((*((_BYTE *)this + 123) & 4) != 0)
        {
          v100 = WebCore::RenderBox::contentLogicalWidth(this);
          v101 = v227 + v100;
          if (__OFADD__(v227, v100))
            v101 = (v227 >> 31) + 0x7FFFFFFF;
          v45 = __OFSUB__(v101, v99);
          v102 = v101 - v99;
          v103 = (v101 >> 31) + 0x7FFFFFFF;
          if (v45)
            v104 = v103;
          else
            v104 = v102;
          v105 = (float)((float)((float)v104 * 0.015625) - WebCore::FontCascade::width(v226, (uint64_t)v232)) * 64.0;
          if (v105 >= 2147483650.0)
          {
            v7 = 0x7FFFFFFFLL;
          }
          else if (v105 <= -2147483650.0)
          {
            v7 = 0x80000000;
          }
          else
          {
            v7 = (int)v105;
          }
        }
        else
        {
          v7 = v227 + v99;
          if (__OFADD__(v227, v99))
            v7 = (v227 >> 31) + 0x7FFFFFFF;
        }
        if ((v89[8] & 0xFFFFFFFFFFFFLL) == 0)
          goto LABEL_198;
        if ((*(_BYTE *)((v89[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1963B6974);
        }
        if (*(_BYTE *)((v89[8] & 0xFFFFFFFFFFFFLL) + 0x2E) != 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1963B6994);
        }
        v106 = *(_QWORD *)((v89[8] & 0xFFFFFFFFFFFFLL) + 0x198);
        if (!v106)
          goto LABEL_198;
        v107 = *(const WebCore::RenderText **)(v106 + 8);
        if (!v107)
          goto LABEL_198;
        v108 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing(*(WebCore::LayoutIntegration::LineLayout **)(v106 + 8), v96);
        if (v108)
        {
          WebCore::LayoutIntegration::LineLayout::textBoxesFor(v108, v107, (uint64_t)v235);
        }
        else
        {
          v235[0] = *((_QWORD *)v107 + 8);
          v236 = 1;
        }
        v109 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v235);
        if ((v109 & 1) != 0)
          goto LABEL_195;
        if (v236 == -1)
          goto LABEL_286;
        v238 = (unint64_t)&v237;
        if ((((uint64_t (*)(unint64_t *, _QWORD *))off_1E3425548[v236])(&v238, v235) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1963B6A7CLL);
        }
        if (v236 == -1)
          goto LABEL_286;
        v238 = (unint64_t)&v237;
        LODWORD(v238) = ((float (*)(unint64_t *, _QWORD *))off_1E3425578[v236])(&v238, v235);
        HIDWORD(v238) = v110;
        v242 = 0;
        v239 = 0u;
        v240 = 0u;
        v241 = 0;
        v244 = 0;
        v245 = 0;
        v243 = 0;
        v246 = 0;
        v247 = 1;
        v248 = 0;
        v249 = 0;
        (*(void (**)(const WebCore::RenderText *, WebCore::RenderFileUploadControl *, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v107 + 576))(v107, this, &v238, 6, 0);
        WebCore::TransformState::flatten((WebCore::TransformState *)&v238, 0);
        v112 = v238;
        v113 = v244;
        v244 = 0;
        if (v113)
          WTF::fastFree(v113, v111);
        v114 = v243;
        v243 = 0;
        if (v114)
          WTF::fastFree(v114, v111);
        v115 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
        v116 = 1.0;
        if (v115)
        {
          v117 = *(_QWORD *)(v115 + 8);
          if (v117)
          {
            v118 = *(_QWORD *)(v117 + 24);
            if (v118)
            {
              v119 = *(_QWORD *)(v118 + 8);
              if (v119)
              {
                v120 = (*(_DWORD *)v119)++;
                v116 = *(float *)(v119 + 364);
                if (v120)
                {
                  *(_DWORD *)v119 = v120;
                }
                else
                {
                  v175 = *(float *)(v119 + 364);
                  WebCore::Page::~Page(v119);
                  WTF::fastFree(v176, v177);
                  v116 = v175;
                }
              }
            }
          }
        }
        v121 = (double)*(int *)a3 * 0.015625;
        v122 = v121 < 0.0
             ? round((v121 + (double)-*(_DWORD *)a3) * v116) / v116 - (double)-*(_DWORD *)a3
             : round(v121 * v116) / v116;
        v123 = *((_DWORD *)a3 + 1);
        v124 = (double)v123 * 0.015625;
        v125 = v124 < 0.0
             ? round((v124 + (double)-v123) * v116) / v116 - (double)-v123
             : round(v124 * v116) / v116;
        if (v236 == -1)
          goto LABEL_286;
        v238 = (unint64_t)&v237;
        if ((((uint64_t (*)(unint64_t *, _QWORD *))off_1E3425548[v236])(&v238, v235) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1963B6A9CLL);
        }
        if (v236 == -1)
        {
LABEL_286:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_287:
          WebCore::RenderTheme::RenderTheme((uint64_t)v63);
          *(_OWORD *)(v63 + 5) = 0u;
          *(_OWORD *)(v63 + 3) = 0u;
          *v63 = (uint64_t)&off_1E335BC30;
          *((_BYTE *)v89 + 2784) = 1;
          v171 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
          if ((*(_BYTE *)(v171 + 28) & 0x10) == 0
            || *(_QWORD *)(*(_QWORD *)(v171 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
          {
            __break(0xC471u);
            JUMPOUT(0x1963B6B74);
          }
LABEL_248:
          v172 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v171 + 240) + 664))(*(_QWORD *)(v171 + 240));
          (*(void (**)(uint64_t *, WebCore::RenderFileUploadControl *, unint64_t, int32x4_t *, unint64_t *, uint64_t, BOOL))(*v63 + 456))(v63, this, v62, a2, &v238, v172, v59 != 1);
          goto LABEL_249;
        }
        v238 = (unint64_t)&v237;
        v126 = ((uint64_t (*)(unint64_t *, _QWORD *))off_1E3425588[v236])(&v238, v235);
        v128 = WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)(*(_QWORD *)(v126 + 32) + 32), v127);
        v129 = *(_DWORD *)(v128 + 44);
        v130 = *(_DWORD *)(v128 + 48);
        if (v231)
        {
          v131 = v122;
          v132 = *(float *)&v112 + v131;
          if (v228)
          {
            v133 = (float)v129;
LABEL_191:
            v3 = v132 - v133;
            goto LABEL_195;
          }
          v135 = (float)v130;
        }
        else
        {
          v134 = v125;
          v132 = *((float *)&v112 + 1) + v134;
          if (v228)
          {
            v133 = (float)v130;
            goto LABEL_191;
          }
          v135 = (float)v129;
        }
        v3 = v132 + v135;
LABEL_195:
        if (v236 != -1)
          ((void (*)(unint64_t *, _QWORD *))off_1E3425538[v236])(&v238, v235);
        if (v109)
        {
LABEL_198:
          v136 = WebCore::RenderBlock::baselinePosition(this, 0, 1, v231, 0);
          v3 = (float)(((int)(v136 - (v137 & 0xFFFFFFC0) + 32) >> 6) + v136 / 64);
        }
        v138 = (WebCore::GraphicsContext *)a2[5].i64[0];
        WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)this + 80, 5, 0, &v238);
        WebCore::GraphicsContext::setFillColor(v138, (const WebCore::Color *)&v238);
        if ((v238 & 0x8000000000000) != 0)
        {
          v217 = (unsigned int *)(v238 & 0xFFFFFFFFFFFFLL);
          do
          {
            v218 = __ldaxr(v217);
            v219 = v218 - 1;
          }
          while (__stlxr(v219, v217));
          if (!v219)
          {
            atomic_store(1u, v217);
            WTF::fastFree((WTF *)v217, v139);
          }
        }
        v140 = a2[5].i64[0];
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v140 + 96))(v140, 1);
        v142 = ((int)(v7 - (v141 & 0xFFFFFFC0) + 32) >> 6) + (int)v7 / 64;
        v143 = (int)roundf(v3);
        v144 = (float)v143;
        v145 = v231;
        if ((v231 & 1) != 0)
        {
          v146 = llroundf(v3);
          v147 = (float)v142;
          (*(void (**)(uint64_t, float, float))(*(_QWORD *)a2[5].i64[0] + 648))(a2[5].i64[0], (float)v143, (float)v142);
          (*(void (**)(uint64_t, float))(*(_QWORD *)a2[5].i64[0] + 640))(a2[5].i64[0], 1.5708);
          v148 = -v146;
          v145 = v231;
          (*(void (**)(uint64_t, float, float))(*(_QWORD *)a2[5].i64[0] + 648))(a2[5].i64[0], (float)v148, (float)-v142);
        }
        else
        {
          v147 = (float)v143;
          v144 = (float)v142;
        }
        v7 = v225;
        v149 = a2[5].i64[0];
        v238 = __PAIR64__(LODWORD(v147), LODWORD(v144));
        (*(void (**)(uint64_t, uint64_t, char *, unint64_t *, _QWORD))(*(_QWORD *)v149 + 536))(v149, v226, v232, &v238, 0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v140 + 104))(v140, 1);
        v150 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
        if ((*(_WORD *)(v150 + 28) & 0x10) == 0
          || *(_QWORD *)(*(_QWORD *)(v150 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
        {
          __break(0xC471u);
          JUMPOUT(0x1963B68B8);
        }
        if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v150 + 240) + 664))(*(_QWORD *)(v150 + 240)))
        {
          v151 = HIDWORD(v62);
          if (v228)
            v152 = v59;
          else
            v152 = 1;
          v153 = *(_QWORD *)this;
          if ((v152 & 1) != 0)
          {
            v154 = (*(uint64_t (**)(WebCore::RenderFileUploadControl *))(v153 + 1048))(this);
            v155 = (*(uint64_t (**)(WebCore::RenderFileUploadControl *))(*(_QWORD *)this + 960))(this);
          }
          else
          {
            v154 = (*(uint64_t (**)(WebCore::RenderFileUploadControl *))(v153 + 1056))(this);
            v155 = (*(uint64_t (**)(WebCore::RenderFileUploadControl *))(*(_QWORD *)this + 968))(this);
          }
          v156 = v154 + v155;
          if (__OFADD__(v154, v155))
            v156 = (v154 >> 31) + 0x7FFFFFFF;
          v157 = v151 + v156;
          if (__OFADD__((_DWORD)v151, v156))
            v157 = (v151 >> 31) + 0x7FFFFFFF;
          v158 = WebCore::RenderBox::contentLogicalHeight(this);
          v159 = v229 << 6;
          if (v229 < -33554432)
            v159 = 0x80000000;
          if (v229 <= 0x1FFFFFF)
            v160 = v159;
          else
            v160 = 0x7FFFFFFF;
          v161 = v158 - v160;
          if (__OFSUB__(v158, v160))
            v161 = (v158 >> 31) + 0x7FFFFFFF;
          v162 = v157 + v161 / 2;
          if (__OFADD__(v157, v161 / 2))
            v162 = (v157 >> 31) + 0x7FFFFFFF;
          if ((*((_BYTE *)this + 123) & 4) != 0)
          {
            v165 = WebCore::RenderBox::contentLogicalWidth(this);
            v166 = v227 + v165;
            if (__OFADD__(v227, v165))
              v166 = (v227 >> 31) + 0x7FFFFFFF;
            v167 = v166 - v224;
            if (__OFSUB__(v166, v224))
              v167 = (v166 >> 31) + 0x7FFFFFFF;
            v45 = __OFSUB__(v167, 256);
            v168 = v167 - 256;
            if (v45)
              v168 = 0x80000000;
            v164 = v168 - v160;
            if (__OFSUB__(v168, v160))
              v164 = (v168 >> 31) + 0x7FFFFFFF;
          }
          else
          {
            v163 = v227 + v224;
            if (__OFADD__(v227, v224))
              v163 = (v227 >> 31) + 0x7FFFFFFF;
            v45 = __OFADD__(v163, 256);
            v164 = v163 + 256;
            if (v45)
              v164 = 0x7FFFFFFF;
          }
          v169 = (v164 / 64);
          LODWORD(v238) = v169;
          HIDWORD(v238) = v162 / 64;
          LODWORD(v239) = v229;
          DWORD1(v239) = v229;
          if (v145)
          {
            v238 = (v162 / 64) | (unint64_t)(v169 << 32);
            *(_QWORD *)&v239 = v229 | ((unint64_t)v229 << 32);
          }
          v170 = v89[8];
          v62 = v170 & 0xFFFFFFFFFFFFLL;
          if ((v170 & 0xFFFFFFFFFFFFLL) != 0)
          {
            if ((*(_BYTE *)((v170 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1963B69FCLL);
            }
            if (*(_BYTE *)((v170 & 0xFFFFFFFFFFFFLL) + 0x2E) != 2)
            {
              __break(0xC471u);
              JUMPOUT(0x1963B6A1CLL);
            }
            v171 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
            if ((*(_WORD *)(v171 + 28) & 0x10) == 0
              || *(_QWORD *)(*(_QWORD *)(v171 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
            {
              __break(0xC471u);
              JUMPOUT(0x1963B68D8);
            }
            v59 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v171 + 240) + 72) + 28);
            v89 = &WebCore::MathMLNames::rspaceAttr;
            v63 = &WebCore::RenderTheme::singleton(void)::theme;
              goto LABEL_248;
            goto LABEL_287;
          }
        }
LABEL_249:
        v173 = v233;
        v233 = 0;
        v57 = v230;
        if (v173)
        {
          if (*(_DWORD *)v173 == 2)
            WTF::StringImpl::destroy(v173, v85);
          else
            *(_DWORD *)v173 -= 2;
        }
        v174 = v234;
        v234 = 0;
        if (v174)
        {
          if (*(_DWORD *)v174 == 2)
          {
            WTF::StringImpl::destroy(v174, v85);
            if ((v230 & 1) != 0)
              goto LABEL_256;
            goto LABEL_259;
          }
          *(_DWORD *)v174 -= 2;
        }
LABEL_255:
        if ((v57 & 1) != 0)
          goto LABEL_256;
LABEL_259:
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 104))(v7, 1);
        goto LABEL_256;
    }
  }
}

WTF::StringImpl *WebCore::RenderFileUploadControl::fileTextValue@<X0>(WTF::StringImpl *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::RenderFileUploadControl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v22;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1963B7308);
  }
  v3 = *(_QWORD *)(v2 + 240);
  if (*(_DWORD *)(v3 + 12) != 64 || (v4 = *(_QWORD *)(v3 + 72)) == 0)
  {
    *a2 = 0;
    return this;
  }
  v5 = this;
  if (!*(_DWORD *)(v4 + 28))
    goto LABEL_10;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v3 + 920))(&v22, v3);
  v7 = v22;
  if (!v22)
    goto LABEL_10;
  v19 = *((_DWORD *)v22 + 1);
  v22 = 0;
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::destroy(v7, v6);
    if (v19)
    {
LABEL_30:
      (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(v2 + 240) + 920))(&v22);
      WebCore::RenderFileUploadControl::maxFilenameLogicalWidth(v5);
      WebCore::truncateString((uint64_t)a2, (uint64_t)&v22);
      this = v22;
      v22 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v20);
        else
          *(_DWORD *)this -= 2;
      }
      return this;
    }
  }
  else
  {
    *(_DWORD *)v7 -= 2;
    if (v19)
      goto LABEL_30;
  }
LABEL_10:
  {
    WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    unk_1ECE88AD0 = 0u;
    unk_1ECE88AC0 = 0u;
    WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
  }
  v8 = *(_QWORD *)(v2 + 240);
  if (*(_DWORD *)(v8 + 12) == 64)
    v9 = *(_QWORD *)(v8 + 72);
  else
    v9 = 0;
  v10 = v5;
  v11 = *((_QWORD *)v5 + 14) + 32;
  v12 = WebCore::RenderFileUploadControl::maxFilenameLogicalWidth(v10);
  v13 = *(_QWORD *)(v2 + 104);
  if (v13
    && ((v14 = *(_DWORD *)(v13 + 4), (v14 & 1) != 0)
      ? (v15 = *(uint64_t **)(v13 + 40), LODWORD(v16) = *(_DWORD *)(v13 + 52))
      : (v15 = (uint64_t *)(v13 + 32), LODWORD(v16) = v14 >> 5),
        (_DWORD)v16))
  {
    v16 = v16;
    while (1)
    {
      v17 = *v15;
      if (*v15 == WebCore::HTMLNames::multipleAttr
        || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::multipleAttr + 24)
        && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::multipleAttr + 32))
      {
        break;
      }
      v15 += 2;
      if (!--v16)
        goto LABEL_26;
    }
    v18 = 1;
  }
  else
  {
LABEL_26:
    v18 = 0;
  }
  return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(WebCore::RenderTheme::singleton(void)::theme + 448))(&WebCore::RenderTheme::singleton(void)::theme, v9, v11, v12, v18);
}

uint64_t WebCore::RenderFileUploadControl::computeIntrinsicLogicalWidths(WebCore::RenderFileUploadControl *this, WebCore::LayoutUnit *a2, WebCore::LayoutUnit *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  float v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  float v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  float v28;
  int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  int v36;
  float v37;
  double v38;
  int v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  _BYTE v43[8];
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  __int16 v46;

  if (WebCore::RenderElement::shouldApplySizeOrInlineSizeContainment(this))
  {
    result = WebCore::RenderBox::explicitIntrinsicInnerLogicalWidth(this);
    if ((result & 0xFF00000000) != 0)
    {
      *(_DWORD *)a2 = result;
      *(_DWORD *)a3 = result;
    }
    return result;
  }
  v46 = 48;
  WTF::String::String();
  v7 = *((_QWORD *)this + 14) + 32;
  if (v45)
    v8 = *((unsigned int *)v45 + 1) | ((unint64_t)((*((_DWORD *)v45 + 4) >> 2) & 1) << 32);
  else
    v8 = 0x100000000;
  WebCore::RenderBlock::constructTextRun(v8, (uint64_t)this + 80, 4, 0, (uint64_t)v43);
  v10 = WebCore::FontCascade::width(v7, (uint64_t)v43);
  v11 = v44;
  v44 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  {
    v41 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    *(_OWORD *)(v41 + 40) = 0u;
    *(_OWORD *)(v41 + 24) = 0u;
    *(_QWORD *)v41 = &off_1E335BC30;
  }
  v12 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v12 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v12 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1963B7908);
  }
  v13 = *(_QWORD *)(v12 + 104);
  if (v13)
  {
    v14 = *(_DWORD *)(v13 + 4);
    if ((v14 & 1) == 0)
    {
      v15 = (uint64_t *)(v13 + 32);
      LODWORD(v16) = v14 >> 5;
      if (!(_DWORD)v16)
        goto LABEL_24;
LABEL_18:
      v16 = v16;
      do
      {
        v17 = *v15;
        if (*v15 == WebCore::HTMLNames::multipleAttr
          || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::multipleAttr + 24)
          && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::multipleAttr + 32))
        {
          break;
        }
        v15 += 2;
        --v16;
      }
      while (v16);
      goto LABEL_24;
    }
    v15 = *(uint64_t **)(v13 + 40);
    LODWORD(v16) = *(_DWORD *)(v13 + 52);
    if ((_DWORD)v16)
      goto LABEL_18;
  }
LABEL_24:
  (*(void (**)(WTF::StringImpl **__return_ptr))(WebCore::RenderTheme::singleton(void)::theme + 440))(&v42);
  if (v42)
    v18 = *((unsigned int *)v42 + 1) | ((unint64_t)((*((_DWORD *)v42 + 4) >> 2) & 1) << 32);
  else
    v18 = 0x100000000;
  WebCore::RenderBlock::constructTextRun(v18, (uint64_t)this + 80, 4, 0, (uint64_t)v43);
  v20 = WebCore::FontCascade::width(v7, (uint64_t)v43);
  v21 = v44;
  v44 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v19);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v22 + 28) & 0x10) == 0
    || (v23 = *(_QWORD *)(*(_QWORD *)(v22 + 96) + 24), v23 != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)))
  {
    __break(0xC471u);
    JUMPOUT(0x1963B7928);
  }
  v24 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v22 + 72) & 0xFFFFFFFFFFFFLL) + 0x58) + 80);
  if (v24)
  {
    if ((*(_WORD *)(v24 + 28) & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v24 + 96) + 24) == v23)
    {
      v25 = *(_QWORD *)(v24 + 64) & 0xFFFFFFFFFFFFLL;
      if (v25)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v24 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1963B7980);
        }
        v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 416))(v25);
        v27 = v26 + 256;
        if (__OFADD__(v26, 256))
          v27 = 0x7FFFFFFF;
        v20 = v20 + (float)((float)v27 * 0.015625);
      }
    }
  }
  v28 = v10 * 38.0;
  if ((float)(v10 * 38.0) < v20)
    v28 = v20;
  v29 = vcvtps_s32_f32(v28);
  v30 = v29 << 6;
  if (v29 <= -33554432)
    v30 = 0x80000000;
  if (v29 >= 0x2000000)
    v31 = 0x7FFFFFFF;
  else
    v31 = v30;
  *(_DWORD *)a3 = v31;
  v32 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v33 = (unsigned __int8 *)(v32 + 12);
  v34 = (unsigned __int8 *)(v32 + 4);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v35 = v34;
  else
    v35 = v33;
  v36 = v35[4];
  if (v36 != 3)
  {
    if (v36 == 11)
    {
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v35, 0.0);
      v38 = v37 * 64.0;
      if (v38 >= 2147483650.0)
      {
        v39 = 0x7FFFFFFF;
      }
      else if (v38 <= -2147483650.0)
      {
        v39 = 0x80000000;
      }
      else
      {
        v39 = (int)v38;
      }
      v31 = v39 & ~(v39 >> 31);
    }
    *(_DWORD *)a2 = v31;
  }
  v40 = v42;
  v42 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v19);
    else
      *(_DWORD *)v40 -= 2;
  }
  result = (uint64_t)v45;
  v45 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::RenderFileUploadControl::computePreferredLogicalWidths(WebCore::RenderFileUploadControl *this)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  const WebCore::RenderBox *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t result;

  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 47) = 0;
  v2 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  v3 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  if (v2 <= 3)
  {
    if (*(_BYTE *)(v3 + 16) != 4)
      goto LABEL_14;
    v4 = v3 + 12;
  }
  else
  {
    if (*(_BYTE *)(v3 + 8) != 4)
      goto LABEL_14;
    v4 = v3 + 4;
  }
  if (*(_BYTE *)(v4 + 6))
    v5 = *(float *)v4;
  else
    v5 = (float)*(int *)v4;
  if (v5 > 0.0)
  {
    v6 = v2 >= 4;
    v7 = v3 + 12;
    v8 = v3 + 4;
    if (v6)
      v9 = v8;
    else
      v9 = v7;
    v10 = WebCore::RenderBox::adjustContentBoxLogicalWidthForBoxSizing(this, v9);
    *((_DWORD *)this + 46) = v10;
    *((_DWORD *)this + 47) = v10;
    goto LABEL_15;
  }
LABEL_14:
  WebCore::RenderFileUploadControl::computeIntrinsicLogicalWidths(this, (WebCore::RenderFileUploadControl *)((char *)this + 184), (WebCore::RenderFileUploadControl *)((char *)this + 188));
LABEL_15:
  v11 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
  {
    v12 = (const WebCore::RenderBox *)(v11 + 36);
    v13 = v11 + 44;
    v20 = WebCore::RenderBoxModelObject::verticalBorderAndPaddingExtent(this);
  }
  else
  {
    v12 = (const WebCore::RenderBox *)(v11 + 20);
    v13 = v11 + 28;
    v14 = (*(uint64_t (**)(WebCore::RenderFileUploadControl *))(*(_QWORD *)this + 1016))(this);
    v15 = (*(uint64_t (**)(WebCore::RenderFileUploadControl *))(*(_QWORD *)this + 1024))(this);
    if (__OFADD__(v14, v15))
      v16 = (v14 >> 31) + 0x7FFFFFFF;
    else
      v16 = v14 + v15;
    v17 = (*(uint64_t (**)(WebCore::RenderFileUploadControl *))(*(_QWORD *)this + 944))(this);
    if (__OFADD__(v16, v17))
      v18 = (v16 >> 31) + 0x7FFFFFFF;
    else
      v18 = v16 + v17;
    v19 = (*(uint64_t (**)(WebCore::RenderFileUploadControl *))(*(_QWORD *)this + 952))(this);
    if (__OFADD__(v18, v19))
      v20 = (v18 >> 31) + 0x7FFFFFFF;
    else
      v20 = v18 + v19;
  }
  result = WebCore::RenderBox::computePreferredLogicalWidths((uint64_t)this, v12, v13, v20);
  *((_DWORD *)this + 5) &= ~0x2000u;
  return result;
}

void WebCore::RenderFileUploadControl::positionForPoint(_QWORD *a1@<X8>)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  *((_BYTE *)a1 + 16) = 1;
}

uint64_t WebCore::RenderFileUploadControl::buttonValue@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v3 = *(_QWORD *)(*(_QWORD *)(this + 24) + 8);
  if ((*(_WORD *)(v3 + 28) & 0x10) == 0
    || (v4 = *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24), v4 != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)))
  {
    __break(0xC471u);
    JUMPOUT(0x1963B7C98);
  }
  v5 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL) + 0x58) + 80);
  if (!v5 || (*(_WORD *)(v5 + 28) & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != v4)
  {
    *a2 = 0;
    return this;
  }
  this = *(_QWORD *)(v5 + 240);
  if (*(_DWORD *)(this + 12) == 64)
    return WebCore::FileInputType::firstElementPathForInputValue(this, a2);
  v6 = *(_DWORD **)(v5 + 216);
  if (v6)
  {
    *v6 += 2;
    *a2 = v6;
    return this;
  }
  v7 = *(_QWORD *)(v5 + 104);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 + 4);
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD *)(v7 + 40);
      LODWORD(v10) = *(_DWORD *)(v7 + 52);
      if ((_DWORD)v10)
      {
LABEL_11:
        v10 = v10;
        v11 = (_QWORD *)(v9 + 8);
        while (1)
        {
          v12 = *(v11 - 1);
          if (v12 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_23;
          }
          v11 += 2;
          if (!--v10)
          {
            v11 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_23;
          }
        }
      }
    }
    else
    {
      v9 = v7 + 32;
      LODWORD(v10) = v8 >> 5;
      if ((_DWORD)v10)
        goto LABEL_11;
    }
  }
  v11 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_23:
  if (!*v11)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 64))(this);
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 296))(this);
  if (!*a2)
  {
    *a2 = 0;
    this = *(_QWORD *)(v5 + 240);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 64))(this);
  }
  return this;
}

uint64_t WebCore::RenderFlexibleBox::operator new(uint64_t this)
{
  if (this == 408)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

double WebCore::RenderFlexibleBox::RenderFlexibleBox(uint64_t a1, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  double result;

  v4 = WebCore::RenderLayerModelObject::RenderLayerModelObject(a1, a2, a3, a4, 204, 0);
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_QWORD *)v4 = off_1E3423D88;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_QWORD *)(v4 + 248) = v4 + 256;
  *(_QWORD *)(v4 + 256) = 0;
  *(_QWORD *)(v4 + 232) = v4;
  *(_QWORD *)(v4 + 240) = 0;
  *(_QWORD *)(v4 + 264) = 0;
  *(_QWORD *)(v4 + 272) = v4 + 256;
  *(_WORD *)(v4 + 280) = 1;
  *(_BYTE *)(v4 + 288) = 0;
  *(_BYTE *)(v4 + 296) = 0;
  *(_BYTE *)(v4 + 304) = 0;
  *(_BYTE *)(v4 + 312) = 0;
  *(_QWORD *)(v4 + 384) = 0;
  *(_OWORD *)(v4 + 352) = 0u;
  *(_OWORD *)(v4 + 368) = 0u;
  *(_OWORD *)(v4 + 320) = 0u;
  *(_OWORD *)(v4 + 336) = 0u;
  *(_QWORD *)&result = 0x200000002;
  *(_DWORD *)(v4 + 392) = 2;
  *(_QWORD *)(v4 + 400) = 0;
  *(_DWORD *)(v4 + 20) &= ~0x40000u;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  v5 = WebCore::RenderObject::RenderObject(a1, a2, a3, 220, 0);
  *(_QWORD *)v5 = off_1E3422BC8;
  *(_QWORD *)(v5 + 70) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_DWORD *)(v5 + 80) = 0;
  v6 = a4[1];
  a4[1] = 0;
  *(_QWORD *)(v5 + 88) = v6;
  *(_QWORD *)(v5 + 96) = a4[2];
  v7 = a4[3];
  a4[3] = 0;
  *(_QWORD *)(v5 + 104) = v7;
  v8 = a4[4];
  a4[4] = 0;
  *(_QWORD *)(v5 + 112) = v8;
  *(_QWORD *)(v5 + 120) = a4[5];
  v9 = a4[6];
  a4[6] = 0;
  *(_QWORD *)(v5 + 128) = v9;
  v10 = a4[7];
  a4[7] = 0;
  *(_QWORD *)(v5 + 136) = v10;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_QWORD *)(v5 + 192) = 0;
  *(_QWORD *)v5 = off_1E3423D88;
  *(_OWORD *)(v5 + 200) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_QWORD *)(v5 + 248) = v5 + 256;
  *(_QWORD *)(v5 + 256) = 0;
  *(_BYTE *)(v5 + 281) = 0;
  *(_QWORD *)(v5 + 232) = v5;
  *(_QWORD *)(v5 + 240) = 0;
  *(_QWORD *)(v5 + 264) = 0;
  *(_QWORD *)(v5 + 272) = v5 + 256;
  *(_BYTE *)(v5 + 280) = 1;
  *(_BYTE *)(v5 + 288) = 0;
  *(_BYTE *)(v5 + 296) = 0;
  *(_BYTE *)(v5 + 304) = 0;
  *(_BYTE *)(v5 + 312) = 0;
  *(_QWORD *)(v5 + 384) = 0;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_QWORD *)&result = 0x200000002;
  *(_DWORD *)(v5 + 392) = 2;
  *(_QWORD *)(v5 + 400) = 0;
  *(_DWORD *)(v5 + 20) &= ~0x40000u;
  return result;
}

void WebCore::RenderFlexibleBox::~RenderFlexibleBox(WebCore::RenderFlexibleBox *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF **v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  WTF **v19;
  WTF *v20;
  WTF *v21;
  uint64_t v22;
  WTF **v23;
  WTF *v24;
  uint64_t v25;
  WTF **v26;
  WTF *v27;
  uint64_t v28;
  WTF **v29;
  WTF *v30;
  uint64_t v31;
  WTF **v32;
  WTF *v33;
  uint64_t v34;
  WTF **v35;
  WTF *v36;

  *(_QWORD *)this = off_1E3423D88;
  v3 = *((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v3)
  {
    v4 = *(unsigned int **)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
    WebCore::LayoutIntegration::BoxTree::~BoxTree((WebCore::LayoutIntegration::BoxTree *)(v3 + 8), (unint64_t)a2);
    if (*(_DWORD *)v3)
    {
      *(_OWORD *)v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v7 = *((_QWORD *)this + 46);
  if (v7)
  {
    v22 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v22)
    {
      v23 = (WTF **)*((_QWORD *)this + 46);
      do
      {
        v24 = *v23;
        if (*v23 != (WTF *)-1)
        {
          *v23 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 1)
              WTF::fastFree(v24, a2);
            else
              --*(_DWORD *)v24;
          }
        }
        ++v23;
        --v22;
      }
      while (v22);
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  v8 = *((_QWORD *)this + 44);
  if (v8)
  {
    v25 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v25)
    {
      v26 = (WTF **)*((_QWORD *)this + 44);
      do
      {
        v27 = *v26;
        if (*v26 != (WTF *)-1)
        {
          *v26 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 1)
              WTF::fastFree(v27, a2);
            else
              --*(_DWORD *)v27;
          }
        }
        ++v26;
        --v25;
      }
      while (v25);
    }
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
  v9 = *((_QWORD *)this + 42);
  if (v9)
  {
    v28 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v28)
    {
      v29 = (WTF **)*((_QWORD *)this + 42);
      do
      {
        v30 = *v29;
        if (*v29 != (WTF *)-1)
        {
          *v29 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 1)
              WTF::fastFree(v30, a2);
            else
              --*(_DWORD *)v30;
          }
        }
        ++v29;
        --v28;
      }
      while (v28);
    }
    WTF::fastFree((WTF *)(v9 - 16), a2);
  }
  v10 = *((_QWORD *)this + 40);
  if (v10)
  {
    v31 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v31)
    {
      v32 = (WTF **)*((_QWORD *)this + 40);
      do
      {
        v33 = *v32;
        if (*v32 != (WTF *)-1)
        {
          *v32 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 1)
              WTF::fastFree(v33, a2);
            else
              --*(_DWORD *)v33;
          }
        }
        ++v32;
        --v31;
      }
      while (v31);
    }
    WTF::fastFree((WTF *)(v10 - 16), a2);
  }
  std::__tree<int,std::less<int>,WTF::FastAllocator<int>>::destroy((uint64_t)this + 248, *((WTF **)this + 32));
  v12 = *((_QWORD *)this + 27);
  if (v12)
  {
    v34 = *(unsigned int *)(v12 - 4);
    if ((_DWORD)v34)
    {
      v35 = (WTF **)*((_QWORD *)this + 27);
      do
      {
        v36 = *v35;
        if (*v35 != (WTF *)-1)
        {
          *v35 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 1)
              WTF::fastFree(v36, v11);
            else
              --*(_DWORD *)v36;
          }
        }
        ++v35;
        --v34;
      }
      while (v34);
    }
    WTF::fastFree((WTF *)(v12 - 16), v11);
  }
  v13 = *((_QWORD *)this + 26);
  if (v13)
  {
    v14 = *(unsigned int *)(v13 - 4);
    if ((_DWORD)v14)
    {
      v15 = (WTF **)*((_QWORD *)this + 26);
      do
      {
        v16 = *v15;
        if (*v15 != (WTF *)-1)
        {
          *v15 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 1)
              WTF::fastFree(v16, v11);
            else
              --*(_DWORD *)v16;
          }
        }
        v15 += 2;
        --v14;
      }
      while (v14);
    }
    WTF::fastFree((WTF *)(v13 - 16), v11);
  }
  v17 = *((_QWORD *)this + 25);
  if (v17)
  {
    v18 = *(unsigned int *)(v17 - 4);
    if ((_DWORD)v18)
    {
      v19 = (WTF **)*((_QWORD *)this + 25);
      do
      {
        v20 = *v19;
        if (*v19 != (WTF *)-1)
        {
          *v19 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 1)
              WTF::fastFree(v20, v11);
            else
              --*(_DWORD *)v20;
          }
        }
        v19 += 2;
        --v18;
      }
      while (v18);
    }
    WTF::fastFree((WTF *)(v17 - 16), v11);
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v21 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 1)
      WTF::fastFree(v21, v11);
    else
      --*(_DWORD *)v21;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, v11);
}

{
  uint64_t v2;
  void *v3;

  WebCore::RenderFlexibleBox::~RenderFlexibleBox(this, a2);
  if (*(_DWORD *)(v2 + 16))
  {
    *(_QWORD *)(v2 + 400) = 0;
    *(_OWORD *)(v2 + 368) = 0u;
    *(_OWORD *)(v2 + 384) = 0u;
    *(_OWORD *)(v2 + 336) = 0u;
    *(_OWORD *)(v2 + 352) = 0u;
    *(_OWORD *)(v2 + 304) = 0u;
    *(_OWORD *)(v2 + 320) = 0u;
    *(_OWORD *)(v2 + 272) = 0u;
    *(_OWORD *)(v2 + 288) = 0u;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_OWORD *)(v2 + 256) = 0u;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
}

const char *WebCore::RenderFlexibleBox::renderName(WebCore::RenderFlexibleBox *this)
{
  return "RenderFlexibleBox";
}

uint64_t WebCore::RenderFlexibleBox::computeIntrinsicLogicalWidths(WebCore::LayoutUnit &,WebCore::LayoutUnit &)const::$_0::operator()(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unsigned int v5;
  int *v6;
  int *v7;
  int v8;
  BOOL v9;
  int v10;

  v2 = *a1;
  v3 = 1352;
  if (((*(_DWORD *)(v2 + 124) >> 13) & 6u) - 2 < 4)
    v3 = 1360;
  result = (*(uint64_t (**)(void))(*(_QWORD *)v2 + v3))();
  v5 = (_DWORD)result << 6;
  if ((int)result < -33554432)
    v5 = 0x80000000;
  if ((int)result > 0x1FFFFFF)
    v5 = 0x7FFFFFFF;
  v6 = (int *)a1[1];
  v7 = (int *)a1[2];
  v8 = (*v6 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(*v6, v5))
    v8 = *v6 + v5;
  *v6 = v8;
  v9 = __OFADD__(*v7, v5);
  v10 = *v7 + v5;
  if (v9)
    v10 = (*v7 >> 31) + 0x7FFFFFFF;
  *v7 = v10;
  return result;
}

uint64_t WebCore::RenderFlexibleBox::computeCrossSizeForChildUsingContainerCrossSize(WebCore::RenderFlexibleBox *this, const WebCore::RenderBox *a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v21;
  int v22;
  uint64_t (*v23)(WebCore::RenderFlexibleBox *);
  WebCore::RenderFlexibleBox *v24;
  unsigned int v25;
  int v26;
  int v27;

  if ((*((_BYTE *)this + 21) & 0x10) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) == 0)
      goto LABEL_3;
  }
  else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) != 0)
  {
LABEL_3:
    v4 = *((_DWORD *)this + 40);
    v5 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)this + 1016))(this);
    if (__OFSUB__(v4, v5))
      v6 = (v4 >> 31) + 0x7FFFFFFF;
    else
      v6 = v4 - v5;
    v7 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)this + 1024))(this);
    if (__OFSUB__(v6, v7))
      v8 = (v6 >> 31) + 0x7FFFFFFF;
    else
      v8 = v6 - v7;
    v9 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)this + 1352))(this);
    v10 = v9 << 6;
    if (v9 < -33554432)
      v10 = 0x80000000;
    if (v9 > 0x1FFFFFF)
      v10 = 0x7FFFFFFF;
    v11 = __OFSUB__(v8, v10);
    v12 = v8 - v10;
    if (v11)
      v12 = (v8 >> 31) + 0x7FFFFFFF;
    v13 = v12 & ~(v12 >> 31);
    v14 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)this + 944))(this);
    if (__OFSUB__(v13, v14))
      v15 = 0x7FFFFFFF;
    else
      v15 = v13 - v14;
    v16 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)this + 952))(this);
    v17 = v15 - v16;
    if (__OFSUB__(v15, v16))
      v17 = (v15 >> 31) + 0x7FFFFFFF;
    if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
    {
      v23 = *(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)this + 1352);
      v24 = this;
      v25 = v17;
      v26 = v23(v24);
      v17 = v25;
      v27 = v26 << 6;
      if (v26 > 0x1FFFFFF)
        v27 = 0x7FFFFFFF;
      if (v26 >= -33554432)
        v18 = v27;
      else
        v18 = 0x80000000;
    }
    else
    {
      v18 = 0;
    }
    v11 = __OFSUB__(v17, v18);
    v19 = v17 - v18;
    if (v11)
      v19 = (v17 >> 31) + 0x7FFFFFFF;
    return v19 & ~(v19 >> 31);
  }
  v21 = WebCore::RenderFlexibleBox::computeCrossSizeForChildUsingContainerCrossSize(WebCore::RenderBox const&)const::$_0::operator()(this, a2);
  v22 = WebCore::RenderFlexibleBox::crossAxisMarginExtentForChild(this, a2);
  v19 = (v21 >> 31) + 0x7FFFFFFF;
  if (!__OFSUB__(v21, v22))
    v19 = v21 - v22;
  return v19 & ~(v19 >> 31);
}

uint64_t WebCore::RenderFlexibleBox::baselinePosition(int *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  unsigned int v20;
  BOOL v23;
  int *v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;

  v6 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 1480))(a1);
  if ((v6 & 0xFF00000000) != 0)
  {
    v7 = v6;
    v8 = 1104;
    if (!a4)
      v8 = 1080;
    v9 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + v8))(a1);
    v10 = v9 + 63;
    if (v9 >= 0)
      v10 = v9;
    v11 = v10 & 0xFFFFFFC0;
    v12 = __OFADD__(v7, v11);
    v13 = v7 + v11;
    v14 = (v7 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    v16 = *(_QWORD *)(*((_QWORD *)a1 + 4) + 8);
    v17 = v16 + 80;
    if (!v16)
      v17 = 0;
    v18 = (unsigned __int16)*(_DWORD *)(v17 + 44) >> 13;
    LOBYTE(v19) = 2;
    switch((unsigned __int16)*(_DWORD *)(v17 + 44) >> 13)
    {
      case 1:
      case 2:
        v19 = (unsigned __int16)*(_DWORD *)(v17 + 44) >> 13;
        break;
      case 3:
      case 5:
        LOBYTE(v19) = 3;
        break;
      case 4:
        break;
      default:
        LOBYTE(v19) = 0;
        break;
    }
    v20 = (*(_DWORD *)(*(_QWORD *)(v17 + 24) + 232) >> 4) & 3;
    v23 = (v19 & 6) != 2 || v20 == 2 || v20 > 1;
    if (v18 == 2 && v23)
    {
      v25 = 0;
    }
    else
    {
      v24 = a1 + 40;
      if (!a4)
        v24 = a1 + 41;
      v25 = *v24;
      if (!v23)
      {
        if (v25 >= 0)
          v29 = *v24;
        else
          v29 = v25 + 1;
        v25 = v29 >> 1;
      }
    }
    v26 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)a1 + 1112))(a1, 0);
    v27 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)a1 + 1120))(a1, 0);
    v28 = v26 + v27;
    if (__OFADD__(v26, v27))
      v28 = (v26 >> 31) + 0x7FFFFFFF;
    v12 = __OFADD__(v25, v28);
    v13 = v25 + v28;
    v14 = (v25 >> 31) + 0x7FFFFFFF;
  }
  if (v12)
    return v14;
  else
    return v13;
}

uint64_t WebCore::RenderFlexibleBox::firstLineBaseline(WebCore::RenderFlexibleBox *this)
{
  uint64_t v1;
  uint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t BaselineChild;
  int *v7;
  int v8;
  int v9;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  __int16 v18;
  unsigned int v19;
  char v22;
  int *v23;
  int v24;
  int v25;
  int v26;
  int *v27;
  int v28;
  int v29;
  uint64_t v30;
  int *v31;
  int v32;
  BOOL v33;
  int v34;
  unsigned int *v35;
  unsigned int v36;
  int *v37;
  int v38;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    goto LABEL_73;
  v1 = *(_QWORD *)(v1 + 8);
  if (!v1)
    goto LABEL_73;
  if (((*((_DWORD *)this + 31) ^ *(_DWORD *)(v1 + 124)) & 0xE000) != 0
    && ((*(char *)(v1 + 45) & 0x80000000) == 0 || (*((_BYTE *)this + 21) & 4) != 0)
    || !*((_BYTE *)this + 296)
    || ((v3 = *(_QWORD *)(*((_QWORD *)this + 11) + 40), (*(_BYTE *)(v3 + 642) & 3u) - 3 <= 0xFFFFFFFD)
      ? (v4 = (*(_BYTE *)(v3 + 462) & 1) == 0)
      : (v4 = 0),
        v4 ? (v5 = (*(_DWORD *)(v3 + 636) & 0xC0000) == 0) : (v5 = 0),
        !v5
     && ((*((_BYTE *)this + 20) & 1) != 0 || WebCore::RenderObject::isAtomicInlineLevelBox(this))
     && (*((_QWORD *)this + 12) & 0x1FLL) != 0x19
     && (*((unsigned __int8 *)this + 46) - 36 > 4 || (*((_BYTE *)this + 52) & 7) == 1))
    || (BaselineChild = WebCore::RenderFlexibleBox::getBaselineChild((uint64_t)this, 4)) == 0)
  {
    v1 = 0;
LABEL_73:
    LOBYTE(v15) = 0;
    v16 = 0;
    return v1 | v16 | v15;
  }
  v7 = (int *)BaselineChild;
  v8 = *((_DWORD *)this + 5);
  v9 = *(_DWORD *)(BaselineChild + 20);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) != 0)
  {
    if ((v8 & 0x1000) != 0)
    {
      if ((v9 & 0x1000) != 0)
        goto LABEL_17;
      v30 = *(_QWORD *)(BaselineChild + 160);
    }
    else
    {
      if ((v9 & 0x1000) == 0)
        goto LABEL_17;
      LODWORD(v30) = *(_DWORD *)(BaselineChild + 164);
    }
    v31 = (int *)(BaselineChild + 152);
    if (((*(_DWORD *)(BaselineChild + 124) >> 13) & 6u) - 2 >= 4)
      v31 = (int *)(BaselineChild + 156);
    v32 = *v31;
    v33 = __OFADD__((_DWORD)v30, v32);
    v34 = v30 + v32;
    v13 = (v30 >> 31) + 0x7FFFFFFF;
LABEL_63:
    if (!v33)
      v13 = v34;
    goto LABEL_23;
  }
  if ((v8 & 0x1000) != 0)
  {
    if ((v9 & 0x1000) != 0)
      goto LABEL_17;
    v35 = (unsigned int *)(BaselineChild + 160);
    goto LABEL_60;
  }
  if ((v9 & 0x1000) != 0)
  {
    v35 = (unsigned int *)(BaselineChild + 164);
LABEL_60:
    v36 = *v35;
    v37 = (int *)(BaselineChild + 152);
    if (((*(_DWORD *)(BaselineChild + 124) >> 13) & 6u) - 2 >= 4)
      v37 = (int *)(BaselineChild + 156);
    v38 = *v37;
    v33 = __OFADD__(v36, v38);
    v34 = v36 + v38;
    v13 = (v36 >> 31) + 0x7FFFFFFF;
    goto LABEL_63;
  }
LABEL_17:
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)BaselineChild + 1480))(BaselineChild);
  if ((v10 & 0xFF00000000) == 0)
  {
    LOBYTE(v18) = 2;
    switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
    {
      case 1:
      case 2:
        v18 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
        break;
      case 3:
      case 5:
        LOBYTE(v18) = 3;
        break;
      case 4:
        break;
      default:
        LOBYTE(v18) = 0;
        break;
    }
    v4 = (v18 & 6) == 2;
    v19 = (*(_DWORD *)(*((_QWORD *)this + 13) + 232) >> 4) & 3;
    v22 = !v4 || v19 == 2 || v19 > 1;
    if ((unsigned __int16)*((_DWORD *)this + 31) >> 13 == 2 && (v22 & 1) != 0)
    {
      v24 = 0;
    }
    else
    {
      if ((*((_DWORD *)this + 5) & 0x1000) != 0)
        v23 = v7 + 40;
      else
        v23 = v7 + 41;
      v24 = *v23;
      if (v24 >= 0)
        v25 = v24;
      else
        v25 = v24 + 1;
      v26 = v25 >> 1;
      if ((v22 & 1) == 0)
        v24 = v26;
    }
    v27 = v7 + 38;
    if (((v7[31] >> 13) & 6) - 2 >= 4)
      v27 = v7 + 39;
    v28 = *v27;
    v33 = __OFADD__(v24, v28);
    v15 = v24 + v28;
    v29 = (v24 >> 31) + 0x7FFFFFFF;
    if (v33)
      v15 = v29;
    v16 = v15 & 0xFFFFFF00;
    goto LABEL_24;
  }
  v11 = v7 + 38;
  if (((v7[31] >> 13) & 6) - 2 >= 4)
    v11 = v7 + 39;
  v12 = *v11;
  v33 = __OFADD__((_DWORD)v10, v12);
  v13 = v10 + v12;
  if (v33)
    v13 = (v10 >> 31) + 0x7FFFFFFF;
LABEL_23:
  v14 = v13 + (v13 < 0 ? 0x3F : 0);
  LOBYTE(v15) = v14 & 0xC0;
  v16 = v14 & 0xFFFFFF00;
LABEL_24:
  v1 = 0x100000000;
  return v1 | v16 | v15;
}

uint64_t WebCore::RenderFlexibleBox::getBaselineChild(uint64_t a1, int a2)
{
  int **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  WTF **v22;
  WTF *v23[3];
  __int16 v24;

  v3 = (int **)(a1 + 232);
  if (a2 != 4)
  {
    WebCore::OrderIterator::reverse(v3, (uint64_t)&v21);
    v4 = WebCore::OrderIterator::first((WebCore::OrderIterator *)&v21);
    if (v4)
    {
      v5 = v4;
      v6 = 0;
      v7 = 0;
      while (1)
      {
        if ((*(_DWORD *)(v5 + 20) & 0x1800000) == 0x1000000 || (*(_DWORD *)(v5 + 20) & 0x400) != 0)
          goto LABEL_14;
        if (WebCore::RenderFlexibleBox::alignmentForChild((WebCore::RenderFlexibleBox *)a1, (const WebCore::RenderBox *)v5) == 5)break;
LABEL_10:
        if (!v7)
          v7 = v5;
        ++v6;
        if (*(_BYTE *)(a1 + 312) && v6 == *(_QWORD *)(a1 + 304))
          goto LABEL_37;
LABEL_14:
        v5 = WebCore::OrderIterator::next((WebCore::OrderIterator *)&v21);
        if (!v5)
          goto LABEL_37;
      }
      v12 = *(_QWORD *)(v5 + 88);
      if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
      {
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) == 0)
          goto LABEL_32;
      }
      else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) != 0)
      {
LABEL_32:
        v13 = *(_QWORD *)(v12 + 24);
        if (!*(_BYTE *)(v13 + 68))
          goto LABEL_10;
        v14 = (_BYTE *)(v13 + 52);
LABEL_34:
        if (*v14)
          goto LABEL_35;
        goto LABEL_10;
      }
      v19 = *(_QWORD *)(v12 + 24);
      if (!*(_BYTE *)(v19 + 44))
        goto LABEL_10;
      v14 = (_BYTE *)(v19 + 60);
      goto LABEL_34;
    }
LABEL_36:
    v7 = 0;
    goto LABEL_37;
  }
  v21 = *(_OWORD *)v3;
  v23[0] = 0;
  v23[1] = 0;
  v22 = v23;
  std::set<int,std::less<int>,WTF::FastAllocator<int>>::insert[abi:sn180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(&v22, *(int **)(a1 + 248), (int *)(a1 + 256));
  v23[2] = *(WTF **)(a1 + 272);
  v24 = *(_WORD *)(a1 + 280);
  v9 = WebCore::OrderIterator::first((WebCore::OrderIterator *)&v21);
  if (!v9)
    goto LABEL_36;
  v5 = v9;
  v10 = 0;
  v7 = 0;
  while (1)
  {
    if ((*(_DWORD *)(v5 + 20) & 0x1800000) == 0x1000000 || (*(_DWORD *)(v5 + 20) & 0x400) != 0)
      goto LABEL_28;
    if (WebCore::RenderFlexibleBox::alignmentForChild((WebCore::RenderFlexibleBox *)a1, (const WebCore::RenderBox *)v5) != 4)goto LABEL_24;
    v16 = *(_QWORD *)(v5 + 88);
    if ((*(_BYTE *)(a1 + 21) & 0x10) == 0)
    {
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) != 0)
        break;
      goto LABEL_48;
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) == 0)
      break;
LABEL_48:
    v20 = *(_QWORD *)(v16 + 24);
    if (*(_BYTE *)(v20 + 44))
    {
      v18 = (_BYTE *)(v20 + 60);
      goto LABEL_42;
    }
LABEL_24:
    if (!v7)
      v7 = v5;
    ++v10;
    if (*(_BYTE *)(a1 + 296) && v10 == *(_QWORD *)(a1 + 288))
      goto LABEL_37;
LABEL_28:
    v5 = WebCore::OrderIterator::next((WebCore::OrderIterator *)&v21);
    if (!v5)
      goto LABEL_37;
  }
  v17 = *(_QWORD *)(v16 + 24);
  if (!*(_BYTE *)(v17 + 68))
    goto LABEL_24;
  v18 = (_BYTE *)(v17 + 52);
LABEL_42:
  if (!*v18)
    goto LABEL_24;
LABEL_35:
  v7 = v5;
LABEL_37:
  std::__tree<int,std::less<int>,WTF::FastAllocator<int>>::destroy((uint64_t)&v22, v23[0]);
  return v7;
}

uint64_t WebCore::RenderFlexibleBox::lastLineBaseline(WebCore::RenderFlexibleBox *this)
{
  WebCore::RenderFlexibleBox *v1;
  uint64_t v3;
  unsigned int v4;
  uint64_t v6;
  BOOL v7;
  uint64_t BaselineChild;
  int *v10;
  int v11;
  int v12;
  unsigned int *v13;
  unsigned int v14;
  int *v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  int *v24;
  int v25;
  int v26;
  __int16 v27;
  unsigned int v28;
  char v31;
  int *v32;
  int v33;
  int v34;
  int v35;
  int *v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  BOOL v41;

  v1 = (WebCore::RenderFlexibleBox *)*((_QWORD *)this + 4);
  if (v1 && (v1 = (WebCore::RenderFlexibleBox *)*((_QWORD *)v1 + 1)) != 0)
  {
    if (((*((_DWORD *)this + 31) ^ *((_DWORD *)v1 + 31)) & 0xE000) == 0 && *((_BYTE *)this + 312))
    {
      v6 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
      v7 = (*(_BYTE *)(v6 + 642) & 3u) - 3 <= 0xFFFFFFFD && (*(_BYTE *)(v6 + 462) & 1) == 0;
      if (v7 && (*(_DWORD *)(v6 + 636) & 0xC0000) == 0)
        goto LABEL_16;
      v39 = *((_DWORD *)this + 5);
      if ((v39 & 1) == 0)
      {
        if ((*((_BYTE *)this + 45) & 2) == 0)
          v1 = this;
        v40 = *((_QWORD *)v1 + 12);
        v41 = (v40 & 0x1Fu) > 0x19 || ((1 << (v40 & 0x1F)) & 0x3528029) == 0;
        if (v41 || (v39 & 2) == 0 && (v40 & 0x1F) == 0)
          goto LABEL_16;
      }
      if ((*((_QWORD *)this + 12) & 0x1FLL) == 0x19
        || *((unsigned __int8 *)this + 46) - 36 <= 4 && (*((_BYTE *)this + 52) & 7) != 1)
      {
LABEL_16:
        BaselineChild = WebCore::RenderFlexibleBox::getBaselineChild((uint64_t)this, 5);
        if (BaselineChild)
        {
          v10 = (int *)BaselineChild;
          v11 = *((_DWORD *)this + 5);
          v12 = *(_DWORD *)(BaselineChild + 20);
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) == 0)
          {
            if ((v11 & 0x1000) != 0)
            {
              if ((v12 & 0x1000) == 0)
              {
                v13 = (unsigned int *)(BaselineChild + 160);
                goto LABEL_21;
              }
            }
            else if ((v12 & 0x1000) != 0)
            {
              v13 = (unsigned int *)(BaselineChild + 164);
LABEL_21:
              v14 = *v13;
              v15 = (int *)(BaselineChild + 152);
              if (((*(_DWORD *)(BaselineChild + 124) >> 13) & 6u) - 2 >= 4)
                v15 = (int *)(BaselineChild + 156);
              v16 = *v15;
              v17 = __OFADD__(v14, v16);
              v18 = v14 + v16;
              v19 = (v14 >> 31) + 0x7FFFFFFF;
LABEL_36:
              if (!v17)
                v19 = v18;
              goto LABEL_38;
            }
LABEL_26:
            v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)BaselineChild + 1488))(BaselineChild);
            if ((v20 & 0xFF00000000) == 0)
            {
              LOBYTE(v27) = 2;
              switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
              {
                case 1:
                case 2:
                  v27 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
                  break;
                case 3:
                case 5:
                  LOBYTE(v27) = 3;
                  break;
                case 4:
                  break;
                default:
                  LOBYTE(v27) = 0;
                  break;
              }
              v7 = (v27 & 6) == 2;
              v28 = (*(_DWORD *)(*((_QWORD *)this + 13) + 232) >> 4) & 3;
              v31 = !v7 || v28 == 2 || v28 > 1;
              if ((unsigned __int16)*((_DWORD *)this + 31) >> 13 == 2 && (v31 & 1) != 0)
              {
                v33 = 0;
              }
              else
              {
                if ((*((_DWORD *)this + 5) & 0x1000) != 0)
                  v32 = v10 + 40;
                else
                  v32 = v10 + 41;
                v33 = *v32;
                if (v33 >= 0)
                  v34 = v33;
                else
                  v34 = v33 + 1;
                v35 = v34 >> 1;
                if ((v31 & 1) == 0)
                  v33 = v35;
              }
              v36 = v10 + 38;
              if (((v10[31] >> 13) & 6) - 2 >= 4)
                v36 = v10 + 39;
              v37 = *v36;
              v17 = __OFADD__(v33, v37);
              v38 = v33 + v37;
              LODWORD(v1) = (v33 >> 31) + 0x7FFFFFFF;
              if (!v17)
                LODWORD(v1) = v38;
              v4 = v1 & 0xFFFFFF00;
              goto LABEL_41;
            }
            v21 = v10 + 38;
            if (((v10[31] >> 13) & 6) - 2 >= 4)
              v21 = v10 + 39;
            v22 = *v21;
            v17 = __OFADD__((_DWORD)v20, v22);
            v19 = v20 + v22;
            if (v17)
              v19 = (v20 >> 31) + 0x7FFFFFFF;
LABEL_38:
            v26 = v19 + 63;
            if (v19 >= 0)
              v26 = v19;
            LOBYTE(v1) = v26 & 0xC0;
            v4 = v26 & 0xFFFFFF00;
LABEL_41:
            v3 = 0x100000000;
            return v3 | v4 | v1;
          }
          if ((v11 & 0x1000) != 0)
          {
            if ((v12 & 0x1000) != 0)
              goto LABEL_26;
            v23 = *(_QWORD *)(BaselineChild + 160);
          }
          else
          {
            if ((v12 & 0x1000) == 0)
              goto LABEL_26;
            LODWORD(v23) = *(_DWORD *)(BaselineChild + 164);
          }
          v24 = (int *)(BaselineChild + 152);
          if (((*(_DWORD *)(BaselineChild + 124) >> 13) & 6u) - 2 >= 4)
            v24 = (int *)(BaselineChild + 156);
          v25 = *v24;
          v17 = __OFADD__((_DWORD)v23, v25);
          v18 = v23 + v25;
          v19 = (v23 >> 31) + 0x7FFFFFFF;
          goto LABEL_36;
        }
      }
    }
    v3 = 0;
    LOBYTE(v1) = 0;
  }
  else
  {
    v3 = 0;
  }
  v4 = 0;
  return v3 | v4 | v1;
}

uint64_t WebCore::RenderFlexibleBox::inlineBlockBaseline(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1480))(a1);
}

uint64_t WebCore::RenderFlexibleBox::hitTestChildren(WebCore::RenderBox *this, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  WTF *v19;
  uint64_t v20;
  const WebCore::RenderBox **v21;
  const WebCore::RenderBox **v22;
  const WebCore::RenderBox *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;

  if (a6 != 4)
    return 0;
  if ((*((_BYTE *)this + 22) & 1) != 0)
  {
    v34 = WebCore::RenderBox::scrollPosition(this);
    v35 = (_DWORD)v34 << 6;
    v36 = HIDWORD(v34) << 6;
    if ((int)v34 < -33554432)
      v35 = 0x80000000;
    if ((int)v34 > 0x1FFFFFF)
      v35 = 0x7FFFFFFF;
    if (SHIDWORD(v34) < -33554432)
      v36 = 0x80000000;
    if (SHIDWORD(v34) <= 0x1FFFFFF)
      v37 = v36;
    else
      v37 = 0x7FFFFFFF;
    v38 = a5[1];
    v29 = __OFSUB__(*a5, v35);
    LODWORD(v39) = *a5 - v35;
    if (v29)
      v39 = ((*a5 >> 31) + 0x7FFFFFFF);
    else
      v39 = v39;
    v29 = __OFSUB__(v38, v37);
    LODWORD(v40) = v38 - v37;
    if (v29)
      v40 = (v38 >> 31) + 0x7FFFFFFF;
    else
      v40 = v40;
    v11 = v39 | (v40 << 32);
  }
  else
  {
    v11 = *(_QWORD *)a5;
  }
  v48 = 0;
  v49 = v11;
  v47 = 0;
  v12 = WebCore::OrderIterator::first((WebCore::RenderBox *)((char *)this + 232));
  v46 = v12;
  if (v12)
  {
    v14 = 0;
    do
    {
      if ((*(_DWORD *)(v12 + 20) & 0x1800000) != 0x1000000 && (*(_DWORD *)(v12 + 20) & 0x400) == 0)
      {
        if ((_DWORD)v14 == (_DWORD)v48)
        {
          v16 = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v47, v14 + 1, (unint64_t)&v46);
          LODWORD(v14) = HIDWORD(v48);
          *((_QWORD *)v47 + HIDWORD(v48)) = *v16;
        }
        else
        {
          *((_QWORD *)v47 + v14) = v12;
        }
        v14 = (v14 + 1);
        HIDWORD(v48) = v14;
      }
      v12 = WebCore::OrderIterator::next((WebCore::RenderBox *)((char *)this + 232));
      v46 = v12;
    }
    while (v12);
    if (v14 < 2)
    {
      v21 = (const WebCore::RenderBox **)v47;
      if ((_DWORD)v14)
      {
        v22 = (const WebCore::RenderBox **)((char *)v47 + 8 * v14);
        goto LABEL_23;
      }
      v25 = 0;
      goto LABEL_42;
    }
    v17 = 0;
    v18 = (v14 - 1);
    do
    {
      if (8 * v14 == v17)
      {
        __break(0xC471u);
        JUMPOUT(0x1963B9274);
      }
      if (v18 >= v14)
      {
        __break(0xC471u);
        JUMPOUT(0x1963B927CLL);
      }
      v19 = v47;
      v20 = *(_QWORD *)((char *)v47 + v17);
      *(_QWORD *)((char *)v47 + v17) = *((_QWORD *)v47 + v18);
      *((_QWORD *)v19 + v18--) = v20;
      v17 += 8;
    }
    while (8 * (v14 >> 1) != v17);
    v21 = (const WebCore::RenderBox **)v47;
    v22 = (const WebCore::RenderBox **)((char *)v47 + 8 * v14);
LABEL_23:
    while (1)
    {
      v23 = *v21;
      v24 = *((_QWORD *)*v21 + 18);
      if (!v24 || (*(_BYTE *)(v24 + 25) & 8) == 0)
      {
        v46 = WebCore::RenderBox::flipForWritingModeForChild(this, *v21, (const WebCore::LayoutPoint *)&v49);
        if (((*(uint64_t (**)(const WebCore::RenderBox *, uint64_t, uint64_t, _DWORD *, unint64_t *, uint64_t))(*(_QWORD *)v23 + 336))(v23, a2, a3, a4, &v46, 4) & 1) != 0|| ((*(uint64_t (**)(const WebCore::RenderBox *, uint64_t, uint64_t, _DWORD *, unint64_t *, uint64_t))(*(_QWORD *)v23 + 336))(v23, a2, a3, a4, &v46, 3) & 1) != 0|| ((*(uint64_t (**)(const WebCore::RenderBox *, uint64_t, uint64_t, _DWORD *, unint64_t *, uint64_t))(*(_QWORD *)v23 + 336))(v23, a2, a3, a4, &v46,
                2) & 1) != 0
          || (*(unsigned int (**)(const WebCore::RenderBox *, uint64_t, uint64_t, _DWORD *, unint64_t *, _QWORD))(*(_QWORD *)v23 + 336))(v23, a2, a3, a4, &v46, 0))
        {
          break;
        }
      }
      if (++v21 == v22)
        goto LABEL_31;
    }
    v26 = a4[1];
    v27 = a5[1];
    v28 = *a4 - *a5;
    if (__OFSUB__(*a4, *a5))
      v28 = (*a4 >> 31) + 0x7FFFFFFF;
    v29 = __OFSUB__(v26, v27);
    LODWORD(v30) = v26 - v27;
    v31 = (v26 >> 31) + 0x7FFFFFFF;
    if (v29)
      v30 = v31;
    else
      v30 = v30;
    v32 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    if (v32 <= 5 && ((1 << v32) & 0x2A) != 0)
    {
      if ((*((_BYTE *)this + 21) & 0x10) != 0)
      {
        v43 = *((_DWORD *)this + 40);
        v29 = __OFSUB__(v43, v28);
        v28 = v43 - v28;
        v44 = (v43 >> 31) + 0x7FFFFFFF;
        if (v29)
          v28 = v44;
      }
      else
      {
        v41 = *((_DWORD *)this + 41);
        v29 = __OFSUB__(v41, (_DWORD)v30);
        LODWORD(v30) = v41 - v30;
        v42 = (v41 >> 31) + 0x7FFFFFFF;
        if (v29)
          v30 = v42;
        else
          v30 = v30;
      }
    }
    v45 = v28 | (unint64_t)(v30 << 32);
    (*(void (**)(WebCore::RenderBox *, uint64_t, unint64_t *))(*(_QWORD *)this + 328))(this, a3, &v45);
    v25 = 1;
  }
  else
  {
LABEL_31:
    v25 = 0;
  }
  v21 = (const WebCore::RenderBox **)v47;
LABEL_42:
  if (v21)
  {
    v47 = 0;
    LODWORD(v48) = 0;
    WTF::fastFree((WTF *)v21, v13);
  }
  return v25;
}

WTF *WebCore::RenderFlexibleBox::initializeMarginTrimState(WTF *this)
{
  WTF *v1;
  char v2;
  unsigned int v3;
  int v4;
  _BOOL4 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _BYTE v21[24];

  v1 = this;
  v2 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 461);
  v3 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20);
  v4 = (v3 >> 1) & 1;
  v5 = (v3 & 2) == 0;
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
    v6 = v4;
  else
    v6 = v5;
  v7 = *((unsigned int *)this + 16);
  if (v7 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
  {
    v8 = *(_QWORD *)((v7 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 + 20);
      if ((v9 & 0x800) != 0 || (v9 & 0x1800000) == 0x1000000)
      {
        v18 = *(unsigned int *)(v8 + 47);
        if (!(v18 | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32)))
          goto LABEL_14;
        v8 = *(_QWORD *)((v18 | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32)) + 8);
        if (!v8)
          goto LABEL_14;
        while (1)
        {
          v19 = *(_DWORD *)(v8 + 20);
          if ((v19 & 0x800) == 0 && (v19 & 0x1800000) != 0x1000000)
            break;
          v20 = *(unsigned int *)(v8 + 47);
          if (v20 | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32))
          {
            v8 = *(_QWORD *)((v20 | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32)) + 8);
            if (v8)
              continue;
          }
          goto LABEL_14;
        }
      }
      if ((*(_BYTE *)(v8 + 45) & 4) != 0 && (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 461) & 4) != 0)
      {
        if (v6)
          v10 = (uint64_t)this + 320;
        else
          v10 = (uint64_t)this + 352;
        this = WTF::WeakHashSet<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBox>(v10, (_QWORD *)v8, (uint64_t)v21);
      }
    }
  }
LABEL_14:
  v11 = *(unsigned int *)((char *)v1 + 71);
  if (v11 | ((unint64_t)*((unsigned __int8 *)v1 + 75) << 32))
  {
    v12 = *(_QWORD *)((v11 | ((unint64_t)*((unsigned __int8 *)v1 + 75) << 32)) + 8);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 20);
      if ((v13 & 0x800) != 0 || (v13 & 0x1800000) == 0x1000000)
      {
        v15 = *(unsigned int *)(v12 + 40);
        if (!(v15 | ((unint64_t)*(unsigned __int8 *)(v12 + 44) << 32)))
          return this;
        v12 = *(_QWORD *)((v15 | ((unint64_t)*(unsigned __int8 *)(v12 + 44) << 32)) + 8);
        if (!v12)
          return this;
        while (1)
        {
          v16 = *(_DWORD *)(v12 + 20);
          if ((v16 & 0x800) == 0 && (v16 & 0x1800000) != 0x1000000)
            break;
          v17 = *(unsigned int *)(v12 + 40);
          if (v17 | ((unint64_t)*(unsigned __int8 *)(v12 + 44) << 32))
          {
            v12 = *(_QWORD *)((v17 | ((unint64_t)*(unsigned __int8 *)(v12 + 44) << 32)) + 8);
            if (v12)
              continue;
          }
          return this;
        }
      }
      if ((*(_BYTE *)(v12 + 45) & 4) != 0 && (v2 & 8) != 0)
      {
        if (v6)
          v14 = (uint64_t)v1 + 336;
        else
          v14 = (uint64_t)v1 + 368;
        return WTF::WeakHashSet<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBox>(v14, (_QWORD *)v12, (uint64_t)v21);
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderFlexibleBox::crossAxisContentExtent(WebCore::RenderFlexibleBox *this)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t (*v20)(WebCore::RenderFlexibleBox *);
  WebCore::RenderFlexibleBox *v21;
  unsigned int v22;
  int v23;
  int v24;

  if ((*((_BYTE *)this + 21) & 0x10) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) == 0)
      goto LABEL_3;
    return WebCore::RenderBox::contentHeight(this);
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) == 0)
    return WebCore::RenderBox::contentHeight(this);
LABEL_3:
  v2 = *((_DWORD *)this + 40);
  v3 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)this + 1016))(this);
  if (__OFSUB__(v2, v3))
    v4 = (v2 >> 31) + 0x7FFFFFFF;
  else
    v4 = v2 - v3;
  v5 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)this + 1024))(this);
  if (__OFSUB__(v4, v5))
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  else
    v6 = v4 - v5;
  v7 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)this + 1352))(this);
  v8 = v7 << 6;
  if (v7 < -33554432)
    v8 = 0x80000000;
  if (v7 > 0x1FFFFFF)
    v8 = 0x7FFFFFFF;
  v9 = __OFSUB__(v6, v8);
  v10 = v6 - v8;
  if (v9)
    v10 = (v6 >> 31) + 0x7FFFFFFF;
  v11 = v10 & ~(v10 >> 31);
  v12 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)this + 944))(this);
  if (__OFSUB__(v11, v12))
    v13 = 0x7FFFFFFF;
  else
    v13 = v11 - v12;
  v14 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)this + 952))(this);
  v15 = v13 - v14;
  if (__OFSUB__(v13, v14))
    v15 = (v13 >> 31) + 0x7FFFFFFF;
  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
  {
    v20 = *(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)this + 1352);
    v21 = this;
    v22 = v15;
    v23 = v20(v21);
    v15 = v22;
    v24 = v23 << 6;
    if (v23 > 0x1FFFFFF)
      v24 = 0x7FFFFFFF;
    if (v23 >= -33554432)
      v16 = v24;
    else
      v16 = 0x80000000;
  }
  else
  {
    v16 = 0;
  }
  v9 = __OFSUB__(v15, v16);
  v17 = v15 - v16;
  v18 = (v15 >> 31) + 0x7FFFFFFF;
  if (!v9)
    v18 = v17;
  return v18 & ~(v18 >> 31);
}

uint64_t WebCore::RenderFlexibleBox::flipForWrapReverse(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  result = WebCore::RenderFlexibleBox::crossAxisContentExtent((WebCore::RenderFlexibleBox *)a1);
  v7 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v7)
  {
    v8 = 0;
    while (1)
    {
      v9 = *(_QWORD *)a2 + 48 * v8;
      if (*(_DWORD *)(v9 + 44))
        break;
LABEL_32:
      if (++v8 >= v7)
        return result;
    }
    v10 = 0;
    v11 = 0;
    v12 = v9 + 32;
    while (1)
    {
      if (*(_DWORD *)(a2 + 12) <= v8)
      {
        __break(0xC471u);
        return result;
      }
      v13 = *(_DWORD *)(*(_QWORD *)a2 + 48 * v8);
      v14 = *(_DWORD *)(*(_QWORD *)a2 + 48 * v8 + 4);
      v15 = __OFSUB__(v13, a3);
      v16 = v13 - a3;
      v17 = (v13 >> 31) + 0x7FFFFFFF;
      if (!v15)
        v17 = v16;
      v18 = result - v17;
      if (__OFSUB__((_DWORD)result, v17))
        v18 = (result >> 31) + 0x7FFFFFFF;
      v15 = __OFSUB__(v18, v14);
      v19 = v18 - v14;
      v20 = (v18 >> 31) + 0x7FFFFFFF;
      if (v15)
        v19 = v20;
      v21 = *(_QWORD *)(*(_QWORD *)v12 + v10);
      v15 = __OFSUB__(v19, v17);
      v22 = v19 - v17;
      v23 = (v19 >> 31) + 0x7FFFFFFF;
      if (v15)
        v24 = v23;
      else
        v24 = v22;
      v25 = *(_DWORD *)(a1 + 20);
      if ((v25 & 0x1000) != 0)
      {
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) == 0)
        {
LABEL_19:
          v26 = __ROR8__(*(_QWORD *)(v21 + 152), 32);
          goto LABEL_20;
        }
      }
      else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) != 0)
      {
        goto LABEL_19;
      }
      v26 = *(_QWORD *)(v21 + 152);
LABEL_20:
      v15 = __OFADD__(HIDWORD(v26), v24);
      LODWORD(v27) = HIDWORD(v26) + v24;
      if (v15)
        v27 = ((HIDWORD(v26) >> 31) + 0x7FFFFFFF);
      else
        v27 = v27;
      if ((v25 & 0x1000) != 0)
      {
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) == 0)
        {
LABEL_29:
          v28 = v27 | (v26 << 32);
          goto LABEL_30;
        }
      }
      else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) != 0)
      {
        goto LABEL_29;
      }
      v28 = (v27 << 32) | v26;
LABEL_30:
      *(_QWORD *)(v21 + 152) = v28;
      ++v11;
      v10 += 40;
      if (v11 >= *(unsigned int *)(v12 + 12))
      {
        v7 = *(unsigned int *)(a2 + 12);
        goto LABEL_32;
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderFlexibleBox::isLeftToRightFlow(WebCore::RenderFlexibleBox *this)
{
  char v1;
  unsigned int v2;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) != 0)
  {
    v2 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
    v1 = (v2 > 4) | v2;
  }
  else
  {
    v1 = ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 3) == 1) ^ ((*((_BYTE *)this + 123) & 4) == 0);
  }
  return v1 & 1;
}

WTF *WebCore::RenderFlexibleBox::setCachedChildIntrinsicContentLogicalHeight(WTF *result, uint64_t a2, int a3)
{
  uint64_t *v4;
  WTF *v5;
  void *v6;
  void *v7;
  WTF *v8;
  _BYTE v9[24];
  WTF *v10;
  int v11;

  v11 = a3;
  if ((*(_BYTE *)(a2 + 52) & 7) != 3)
  {
    v4 = (uint64_t *)((char *)result + 208);
    v5 = *(WTF **)(a2 + 8);
    if (!v5)
    {
      v5 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v5 = 1;
      *((_QWORD *)v5 + 1) = a2;
      v8 = *(WTF **)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v5;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          WTF::fastFree(v8, v7);
          v5 = *(WTF **)(a2 + 8);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
    }
    ++*(_DWORD *)v5;
    v10 = v5;
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::set<WebCore::LayoutUnit&>(v4, (uint64_t *)&v10, &v11, (uint64_t)v9);
    result = v10;
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        return (WTF *)WTF::fastFree(result, v6);
      else
        --*(_DWORD *)result;
    }
  }
  return result;
}

WTF *WTF::WeakHashSet<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBox>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  WTF *v11;
  void *v12;
  WTF *result;
  uint64_t v14;
  int v15;
  uint64_t v16;
  WTF **v17;
  unsigned int v19;
  void *v21;
  WTF *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  WTF *v28;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v9 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v10 = v9;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v10;
      goto LABEL_6;
    }
    v14 = *(unsigned int *)(v8 - 4);
    if (!(_DWORD)v14)
      goto LABEL_23;
    v15 = 0;
    v16 = v14 - 1;
    do
    {
      v17 = (WTF **)(v8 + 8 * v16);
      if ((unint64_t)*v17 + 1 >= 2 && !*((_QWORD *)*v17 + 1))
      {
        v27 = v15;
        v26 = v16;
        WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket(v17, a2);
        v16 = v26;
        v15 = v27 + 1;
      }
    }
    while ((unint64_t)v16--);
    v8 = *(_QWORD *)a1;
    if (v15)
    {
      v23 = v15;
      *(_DWORD *)(v8 - 16) += v15;
      v24 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v25 = *(_DWORD *)(v24 - 12);
      else
        v25 = 0;
      *(_DWORD *)(v24 - 12) = v25 - v23;
      v8 = *(_QWORD *)a1;
    }
    if (!v8)
      goto LABEL_3;
    v19 = *(_DWORD *)(v8 - 4);
    if (v19 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v19)
    {
LABEL_23:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v8 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_4;
      }
    }
    v9 = *(_DWORD *)(v8 - 12);
    v10 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v11 = (WTF *)a2[1];
  if (!v11)
  {
    v11 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *((_QWORD *)v11 + 1) = a2;
    v22 = (WTF *)a2[1];
    a2[1] = v11;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
      {
        WTF::fastFree(v22, v21);
        v11 = (WTF *)a2[1];
      }
      else
      {
        --*(_DWORD *)v22;
      }
    }
  }
  *(_DWORD *)v11 += 2;
  v28 = v11;
  WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add((uint64_t *)a1, &v28, a3);
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v12);
    else
      --*(_DWORD *)result;
  }
  if (*(_DWORD *)v11 == 1)
    return (WTF *)WTF::fastFree(v11, v12);
  --*(_DWORD *)v11;
  return result;
}

uint64_t WebCore::RenderFlexibleBox::isChildEligibleForMarginTrim(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *v3;

  if ((*(_BYTE *)(a1 + 21) & 0x10) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) == 0)
      goto LABEL_3;
LABEL_9:
    if (a2 != 1)
    {
      if (a2 == 4)
      {
LABEL_14:
        v3 = (uint64_t *)(a1 + 352);
        return WTF::WeakHashSet<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebCore::RenderBox>(v3, *(_QWORD *)(a3 + 8));
      }
      if (a2 == 8)
        goto LABEL_12;
LABEL_15:
      v3 = (uint64_t *)(a1 + 336);
      return WTF::WeakHashSet<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebCore::RenderBox>(v3, *(_QWORD *)(a3 + 8));
    }
LABEL_13:
    v3 = (uint64_t *)(a1 + 320);
    return WTF::WeakHashSet<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebCore::RenderBox>(v3, *(_QWORD *)(a3 + 8));
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) == 0)
    goto LABEL_9;
LABEL_3:
  if ((a2 - 1) >= 2)
  {
    if (a2 != 4)
      goto LABEL_15;
    goto LABEL_13;
  }
  if (a2 == 1)
    goto LABEL_14;
LABEL_12:
  v3 = (uint64_t *)(a1 + 368);
  return WTF::WeakHashSet<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebCore::RenderBox>(v3, *(_QWORD *)(a3 + 8));
}

uint64_t WTF::WeakHashSet<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebCore::RenderBox>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;

  ++*((_DWORD *)a1 + 2);
  if (a2)
  {
    if (*(_QWORD *)(a2 + 8))
    {
      v2 = *a1;
      if (*a1)
      {
        v3 = *(_DWORD *)(v2 - 8);
        v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
        v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
        v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
        v7 = v3 & ((v6 >> 31) ^ v6);
        for (i = 1; ; ++i)
        {
          v9 = *(_QWORD *)(v2 + 8 * v7);
          if (!v9)
            break;
          if (v9 != -1 && v9 == a2)
            return 1;
          v7 = (v7 + i) & v3;
        }
      }
    }
  }
  return 0;
}

WTF *WebCore::RenderFlexibleBox::trimMainAxisMarginStart(uint64_t a1, uint64_t a2)
{
  WebCore::RenderObject *v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  int v14;
  BOOL v16;
  _BYTE v17[24];

  if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) != 0)
    {
LABEL_3:
      v4 = *(WebCore::RenderObject **)a2;
      v5 = *(_DWORD *)(a1 + 120);
      v6 = (v5 >> 26) & 1;
      v7 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
      if ((v7 - 2) >= 2)
      {
        if (v7 == 4)
        {
          v6 = (v5 & 0x4000000) == 0;
        }
        else if (v7 != 5)
        {
          v8 = 3;
          if ((v5 & 0x4000000) != 0)
            v8 = 1;
LABEL_8:
          v9 = 4;
          goto LABEL_12;
        }
      }
      v16 = v6 == 0;
      v8 = 2;
      if (v16)
        v8 = 0;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = *(WebCore::RenderObject **)a2;
  v9 = 1;
  v8 = 3;
  switch((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13)
  {
    case 1:
      v8 = 2;
      break;
    case 2:
    case 4:
      break;
    case 3:
    case 5:
      v8 = 1;
      break;
    default:
      v8 = 0;
      v9 = 1;
      break;
  }
LABEL_12:
  v10 = *((_DWORD *)v4 + v8 + 42);
  v11 = *(_DWORD *)(a2 + 16);
  v12 = __OFSUB__(v11, v10);
  v13 = v11 - v10;
  v14 = (v11 >> 31) + 0x7FFFFFFF;
  if (v12)
    v13 = v14;
  *(_DWORD *)(a2 + 16) = v13;
  WebCore::RenderBlock::setTrimmedMarginForChild((WTF *)a1, v4, v9);
  return WTF::WeakHashSet<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::CheckedRef<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>((uint64_t)v17, a1 + 320, (uint64_t *)a2);
}

WTF *WTF::WeakHashSet<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::CheckedRef<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;
  WTF *result;
  WTF *v12;
  WTF *v13;

  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 > v6)
  {
    _ZN3WTF7HashSetINS_3RefINS_23SingleThreadWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetIKN7WebCore9RenderBoxES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSL_((uint64_t *)a2, &v13);
    v8 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    if (*(_QWORD *)a2)
    {
      v8 = *(_DWORD *)(*(_QWORD *)a2 - 12);
      if (v8 > 0x7FFFFFFE)
        v8 = 0x7FFFFFFF;
    }
    *(_DWORD *)(a2 + 12) = 2 * v8;
  }
  WTF::WeakPtrFactory<WebCore::CachedResourceClient,WTF::SingleThreadWeakPtrImpl>::createWeakPtr<WebCore::RenderBox>((uint64_t *)&v12, (uint64_t *)(*a3 + 8), *a3);
  v9 = v12;
  ++*(_DWORD *)v12;
  v13 = v9;
  WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add((uint64_t *)a2, &v13, a1);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v10);
    else
      --*(_DWORD *)result;
  }
  if (*(_DWORD *)v9 == 1)
    return (WTF *)WTF::fastFree(v9, v10);
  --*(_DWORD *)v9;
  return result;
}

WTF *WebCore::RenderFlexibleBox::trimMainAxisMarginEnd(uint64_t a1, uint64_t a2)
{
  WebCore::RenderObject *v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  int v14;
  BOOL v16;
  _BYTE v17[24];

  if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) != 0)
    {
LABEL_3:
      v4 = *(WebCore::RenderObject **)a2;
      v5 = *(_DWORD *)(a1 + 120);
      v6 = (v5 >> 26) & 1;
      v7 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
      if ((v7 - 2) >= 2)
      {
        if (v7 == 4)
        {
          v6 = (v5 & 0x4000000) == 0;
        }
        else if (v7 != 5)
        {
          v8 = 3;
          if ((v5 & 0x4000000) == 0)
            v8 = 1;
LABEL_8:
          v9 = 8;
          goto LABEL_12;
        }
      }
      v16 = v6 == 0;
      v8 = 2;
      if (!v16)
        v8 = 0;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = *(WebCore::RenderObject **)a2;
  v9 = 2;
  v8 = 3;
  switch((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13)
  {
    case 1:
      v8 = 0;
      break;
    case 2:
    case 4:
      v8 = 1;
      break;
    case 3:
    case 5:
      break;
    default:
      v8 = 2;
      v9 = 2;
      break;
  }
LABEL_12:
  v10 = *((_DWORD *)v4 + v8 + 42);
  v11 = *(_DWORD *)(a2 + 16);
  v12 = __OFSUB__(v11, v10);
  v13 = v11 - v10;
  v14 = (v11 >> 31) + 0x7FFFFFFF;
  if (v12)
    v13 = v14;
  *(_DWORD *)(a2 + 16) = v13;
  WebCore::RenderBlock::setTrimmedMarginForChild((WTF *)a1, v4, v9);
  return WTF::WeakHashSet<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::CheckedRef<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>((uint64_t)v17, a1 + 336, (uint64_t *)a2);
}

WTF *WebCore::RenderFlexibleBox::trimCrossAxisMarginStart(uint64_t a1, WebCore::RenderObject **a2)
{
  int v4;
  _BYTE v6[24];

  if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) != 0)
      goto LABEL_3;
LABEL_5:
    v4 = 4;
    goto LABEL_6;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) != 0)
    goto LABEL_5;
LABEL_3:
  v4 = 1;
LABEL_6:
  WebCore::RenderBlock::setTrimmedMarginForChild((WTF *)a1, *a2, v4);
  return WTF::WeakHashSet<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::CheckedRef<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>((uint64_t)v6, a1 + 352, (uint64_t *)a2);
}

WTF *WebCore::RenderFlexibleBox::trimCrossAxisMarginEnd(uint64_t a1, WebCore::RenderObject **a2)
{
  int v4;
  _BYTE v6[24];

  if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) != 0)
      goto LABEL_3;
LABEL_5:
    v4 = 8;
    goto LABEL_6;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) != 0)
    goto LABEL_5;
LABEL_3:
  v4 = 2;
LABEL_6:
  WebCore::RenderBlock::setTrimmedMarginForChild((WTF *)a1, *a2, v4);
  return WTF::WeakHashSet<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::CheckedRef<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>((uint64_t)v6, a1 + 368, (uint64_t *)a2);
}

_QWORD *WebCore::RenderFlexibleBox::layoutUsingFlexFormattingContext(WebCore::LayoutIntegration::FlexLayout **this)
{
  uint64_t v2;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  WebCore::LayoutIntegration::FlexLayout *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;

  if (!this[50])
  {
    v2 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)v2 = 0;
    WebCore::LayoutIntegration::BoxTree::BoxTree((WebCore::LayoutIntegration::BoxTree *)(v2 + 8), (WebCore::RenderBlock *)this);
    v4 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[3] + 1) + 40) + 8) + 1944) + 272);
    v5 = *v4;
    if (*v4)
      goto LABEL_47;
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = v4;
    v29 = (unsigned int *)*v4;
    *v4 = v5;
    if (!v29)
      goto LABEL_47;
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, v3);
    }
    v5 = *v4;
    if (*v4)
    {
LABEL_47:
      do
        v6 = __ldaxr((unsigned int *)v5);
      while (__stlxr(v6 + 1, (unsigned int *)v5));
    }
    *(_QWORD *)(v2 + 24) = v5;
    v7 = this[50];
    this[50] = (WebCore::LayoutIntegration::FlexLayout *)v2;
    if (v7)
    {
      v8 = (unsigned int *)*((_QWORD *)v7 + 3);
      *((_QWORD *)v7 + 3) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, v3);
        }
      }
      WebCore::LayoutIntegration::BoxTree::~BoxTree((WebCore::LayoutIntegration::FlexLayout *)((char *)v7 + 8), (unint64_t)v3);
      if (*(_DWORD *)v7)
      {
        *(_OWORD *)v7 = 0u;
        *((_OWORD *)v7 + 1) = 0u;
      }
      else
      {
        WTF::fastFree(v7, v11);
      }
    }
  }
  WebCore::LayoutIntegration::FlexLayout::updateFormattingRootGeometryAndInvalidate(this[50]);
  *((_BYTE *)this + 392) = 2;
  v12 = *((unsigned __int8 *)this + 68);
  for (i = *((unsigned int *)this + 16); ; i = *(unsigned int *)(v15 + 47))
  {
    v14 = i | (v12 << 32);
    if (!v14)
      break;
    v15 = *(_QWORD *)(v14 + 8);
    if (!v15)
      break;
    if ((*(_BYTE *)(v15 + 45) & 0x40) != 0)
    {
LABEL_16:
      v16 = (uint64_t)this[50];
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 408))(v15);
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 416))(v15);
      WebCore::LayoutIntegration::FlexLayout::updateFlexItemDimensions(v16, (_QWORD *)v15);
      while (1)
      {
        v17 = *(unsigned int *)(v15 + 47);
        if (!(v17 | ((unint64_t)*(unsigned __int8 *)(v15 + 51) << 32)))
          goto LABEL_21;
        v15 = *(_QWORD *)((v17 | ((unint64_t)*(unsigned __int8 *)(v15 + 51) << 32)) + 8);
        if (!v15)
          goto LABEL_21;
        if ((*(_BYTE *)(v15 + 45) & 0x40) != 0)
          goto LABEL_16;
      }
    }
    v12 = *(unsigned __int8 *)(v15 + 51);
  }
LABEL_21:
  WebCore::LayoutIntegration::FlexLayout::layout(this[50]);
  v18 = (char *)this + 164;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v19 = (char *)this + 164;
  else
    v19 = (char *)(this + 20);
  v20 = *(_DWORD *)v19;
  v21 = (*((uint64_t (**)(WebCore::LayoutIntegration::FlexLayout **))*this + 131))(this);
  v22 = (*((uint64_t (**)(WebCore::LayoutIntegration::FlexLayout **))*this + 120))(this);
  if (__OFADD__(v21, v22))
    v23 = (v21 >> 31) + 0x7FFFFFFF;
  else
    v23 = v21 + v22;
  v24 = (*((uint64_t (**)(WebCore::LayoutIntegration::FlexLayout **))*this + 132))(this);
  if (__OFADD__(v23, v24))
    v25 = (v23 >> 31) + 0x7FFFFFFF;
  else
    v25 = v23 + v24;
  v26 = (*((uint64_t (**)(WebCore::LayoutIntegration::FlexLayout **))*this + 121))(this);
  v27 = v25 + v26;
  if (__OFADD__(v25, v26))
    v27 = (v25 >> 31) + 0x7FFFFFFF;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    v18 = (char *)(this + 20);
  if (v20 > v27)
    v27 = v20;
  *(_DWORD *)v18 = v27;
  return WebCore::RenderBox::updateLogicalHeight((WebCore::RenderBox *)this);
}

unint64_t WebCore::RenderFlexibleBox::usedChildOverridingMainSizeForPercentageResolution(WebCore::RenderFlexibleBox *this, const WebCore::RenderBox *a2)
{
  uint64_t v4;
  _BOOL4 v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _BOOL4 IsDefinite;
  unsigned int v13;
  __int16 v14;
  char v15;

  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 32) + 16);
  if (*(float *)(v4 + 4) == 0.0 && *(float *)(v4 + 8) == 0.0)
  {
    WebCore::RenderFlexibleBox::flexBasisForChild((int *)&v13, this, (uint64_t)a2);
    IsDefinite = WebCore::RenderFlexibleBox::childMainSizeIsDefinite(this, a2, (const WebCore::Length *)&v13);
    if (v14 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v13);
    }
    if (IsDefinite)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 3;
  v15 = 0;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) == 0)
    goto LABEL_4;
  if (*((_BYTE *)this + 392) == 1)
  {
    v5 = 0;
  }
  else
  {
    if (!*((_BYTE *)this + 392))
    {
LABEL_4:
      v5 = 1;
      goto LABEL_5;
    }
    v11 = WebCore::RenderBox::computePercentageLogicalHeight(a2, &v13, 1) & 0xFF00000000;
    v5 = v11 != 0;
    if (*((_BYTE *)this + 393) && ((*((_BYTE *)this + 21) & 0x10) == 0) == ((*((_BYTE *)a2 + 21) & 0x10) == 0))
      *((_BYTE *)this + 392) = v11 == 0;
  }
LABEL_5:
  if (v14 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v13);
  }
  if (v5)
  {
LABEL_20:
    v9 = WebCore::RenderBox::overridingLogicalHeight(a2);
    v6 = v9 & 0xFFFFFF00;
    v8 = v9 & 0xFFFFFFFF00000000;
    v7 = v9 & 0xFFFFFF0000000000;
    return v6 & 0xFFFFFF00 | v7 | v8 & 0xFF00000000 | v9;
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  LOBYTE(v9) = 0;
  return v6 & 0xFFFFFF00 | v7 | v8 & 0xFF00000000 | v9;
}

unint64_t WebCore::RenderFlexibleBox::usedChildOverridingLogicalHeightForPercentageResolution(WebCore::RenderFlexibleBox *this, const WebCore::RenderBox *a2)
{
  unsigned int v3;
  int v4;
  int v5;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20);
  v4 = (v3 >> 1) & 1;
  v5 = (v3 & 2) == 0;
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
    v5 = v4;
  if (v5 == (*((_BYTE *)a2 + 21) & 0x10) >> 4)
    return WebCore::RenderFlexibleBox::usedChildOverridingMainSizeForPercentageResolution(this, a2);
  if (WebCore::RenderFlexibleBox::alignmentForChild(this, a2) == 3)
    return WebCore::RenderBox::overridingLogicalHeight(a2);
  return 0;
}

uint64_t WebCore::RenderFlexibleBox::staticMainAxisPositionForPositionedChild(WebCore::RenderFlexibleBox *this, const WebCore::RenderBox *a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  char v15;
  uint64_t result;
  unsigned int v17;
  int v18;
  char *v19;
  uint64_t v20;

  if ((*((_BYTE *)a2 + 20) & 0xF8) == 0)
  {
    if ((*((_BYTE *)this + 21) & 0x10) != 0)
    {
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) == 0)
        goto LABEL_4;
    }
    else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) != 0)
    {
LABEL_4:
      v4 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a2 + 1080))(a2);
      v5 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a2 + 1088))(a2);
      goto LABEL_5;
    }
    v4 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a2 + 1096))(a2);
    v5 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a2 + 1104))(a2);
LABEL_5:
    v6 = v4 + v5;
    if (__OFADD__(v4, v5))
      v6 = (v4 >> 31) + 0x7FFFFFFF;
    goto LABEL_8;
  }
  v20 = 0;
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) != 0)
      goto LABEL_25;
  }
  else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) == 0)
  {
LABEL_25:
    v18 = WebCore::RenderBox::containingBlockLogicalWidthForContentInFragment(a2, 0);
    v19 = (char *)a2 + 164;
    if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4)
      v19 = (char *)a2 + 160;
    WebCore::RenderBox::computeInlineDirectionMargins((int *)a2, this, v18, *(unsigned int *)v19 | 0x100000000, 0, (int *)&v20 + 1, (int *)&v20);
    goto LABEL_34;
  }
  WebCore::RenderBox::computeBlockDirectionMargins(a2, this, (WebCore::LayoutUnit *)((char *)&v20 + 4), (WebCore::LayoutUnit *)&v20);
LABEL_34:
  v6 = (HIDWORD(v20) >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(HIDWORD(v20), (_DWORD)v20))
    v6 = HIDWORD(v20) + v20;
LABEL_8:
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) == 0)
      goto LABEL_10;
  }
  else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) != 0)
  {
LABEL_10:
    LODWORD(v7) = *((_DWORD *)a2 + 41);
    goto LABEL_11;
  }
  v7 = *((_QWORD *)a2 + 20);
LABEL_11:
  v8 = __OFADD__(v6, (_DWORD)v7);
  v9 = v6 + v7;
  v10 = (v6 >> 31) + 0x7FFFFFFF;
  if (v8)
    v11 = v10;
  else
    v11 = v9;
  v12 = WebCore::RenderBox::contentLogicalHeight(this);
  v13 = WebCore::RenderFlexibleBox::mainAxisContentExtent((uint64_t)this, v12);
  if (__OFSUB__(v13, v11))
    v14 = (v13 >> 31) + 0x7FFFFFFF;
  else
    v14 = v13 - v11;
  v15 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20);
  LODWORD(result) = WebCore::initialJustifyContentOffset((WebCore::RenderFlexibleBox *)((char *)this + 80), (const WebCore::RenderStyle *)v14, 1, v15 & 1);
  v17 = v14 - result;
  if (__OFSUB__((_DWORD)v14, (_DWORD)result))
    v17 = (v14 >> 31) + 0x7FFFFFFF;
  if ((v15 & 1) != 0)
    return v17;
  else
    return result;
}

uint64_t WebCore::RenderFlexibleBox::staticCrossAxisPositionForPositionedChild(WebCore::RenderFlexibleBox *this, const WebCore::RenderBox *a2)
{
  unsigned int v4;
  uint64_t v5;
  char v6;
  unsigned int v7;
  int v8;
  unint64_t v9;

  v4 = WebCore::RenderFlexibleBox::crossAxisContentExtent(this);
  v5 = WebCore::RenderFlexibleBox::availableAlignmentSpaceForChild((uint64_t)this, v4, (unsigned int *)a2);
  (*(void (**)(WebCore::RenderFlexibleBox *, _QWORD))(*(_QWORD *)this + 1600))(this, 0);
  v6 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 32) + 125);
  v7 = v6 & 0xF;
  if (v7 == 1)
  {
    v6 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 124);
    v7 = v6 & 0xF;
  }
  v8 = WebCore::RenderFlexibleBox::alignmentForChild(this, a2);
  if ((v5 & 0x80000000) != 0 && v7 >= 3 && (v6 & 0x60) == 0x40)
    return 0;
  switch(v8)
  {
    case 3:
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 0xC) != 8)
        return 0;
      break;
    case 6:
      v9 = (uint64_t)(int)v5 << 6;
      if (((int)v5 & 0x200000000000000) != 0)
        v9 += 127;
      v5 = v9 >> 7;
      break;
    case 12:
      return v5;
    default:
      return 0;
  }
  return v5;
}

uint64_t WebCore::RenderFlexibleBox::computeCrossSizeForChildUsingContainerCrossSize(WebCore::RenderBox const&)const::$_0::operator()(WebCore::RenderBlock *this, const WebCore::RenderBox *a2)
{
  uint64_t v3;
  unsigned int *v4;
  int v5;
  int v6;
  void *v7;
  float v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  int v15;
  float v16;
  void *v17;
  double v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  void *v22;
  float v23;
  double v24;
  int v25;
  int v27;
  char v28;
  char v29;
  char v30;
  int v31;
  unsigned __int8 v32;
  char v33;
  char v34;
  float v35;
  unsigned __int8 v36;
  char v37;
  char v38;

  v3 = *((_QWORD *)this + 11);
  if ((*((_DWORD *)this + 5) & 0x1000) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 16) + 20) & 2) != 0)
      goto LABEL_3;
  }
  else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 16) + 20) & 2) == 0)
  {
LABEL_3:
    v4 = (unsigned int *)(*(_QWORD *)(v3 + 8) + 12);
    v5 = 1;
    goto LABEL_6;
  }
  v5 = 0;
  v4 = (unsigned int *)(*(_QWORD *)(v3 + 8) + 4);
LABEL_6:
  v38 = 0;
  v36 = *((_BYTE *)v4 + 4);
  v6 = v36;
  v37 = *((_BYTE *)v4 + 5);
  if (v36 - 2 >= 9)
  {
    v7 = 0;
    if (v36 == 11)
    {
      v7 = (void *)*v4;
      v35 = *(float *)v4;
      WebCore::Length::ref((int *)&v35);
    }
    goto LABEL_11;
  }
  if (!*((_BYTE *)v4 + 6))
  {
    v7 = (void *)*v4;
LABEL_11:
    v8 = (float)(int)v7;
    goto LABEL_13;
  }
  v8 = *(float *)v4;
  v7 = (void *)*v4;
LABEL_13:
  v9 = v8 * 64.0;
  if (v9 >= 2147483650.0)
  {
    v10 = 0x7FFFFFFFLL;
  }
  else if (v9 <= -2147483650.0)
  {
    v10 = 0x80000000;
  }
  else
  {
    v10 = (int)v9;
  }
  if (v6 == 3)
  {
    v11 = WebCore::RenderBlock::availableLogicalHeightForPercentageComputation(this, a2);
    if ((v11 & 0xFF00000000) != 0)
      v10 = v11;
    else
      v10 = 0;
  }
  v12 = *(_BYTE **)(*((_QWORD *)this + 11) + 8);
  v13 = v12 + 44;
  v14 = 28;
  if (v5)
    v14 = 44;
  else
    v13 = v12 + 28;
  v34 = 0;
  v32 = v13[4];
  v15 = v32;
  v33 = v13[5];
  if (v32 - 2 >= 9)
  {
    if (v32 == 11)
    {
      v17 = (void *)*(unsigned int *)&v12[v14];
      v31 = *(_DWORD *)&v12[v14];
      WebCore::Length::ref(&v31);
      v12 = *(_BYTE **)(*((_QWORD *)this + 11) + 8);
    }
    else
    {
      v17 = 0;
    }
  }
  else
  {
    v16 = *(float *)&v12[v14];
    v17 = (void *)LODWORD(v16);
    if (v32 == 4)
    {
      if (!v13[6])
        v16 = (float)SLODWORD(v16);
      v18 = v16 * 64.0;
      if (v18 >= 2147483650.0)
      {
        v19 = 0x7FFFFFFF;
      }
      else if (v18 <= -2147483650.0)
      {
        v19 = 0x80000000;
      }
      else
      {
        v19 = (int)v18;
      }
      if (v19 >= (int)v10)
        v10 = v10;
      else
        v10 = v19;
    }
  }
  v20 = v12 + 36;
  v21 = 20;
  if (v5)
    v21 = 36;
  else
    v20 = v12 + 20;
  v30 = 0;
  v28 = v20[4];
  v29 = v20[5];
  if (v28 == 4)
  {
    v23 = *(float *)&v12[v21];
    if (!v20[6])
      v23 = (float)SLODWORD(v23);
    v24 = v23 * 64.0;
    if (v24 >= 2147483650.0)
    {
      v25 = 0x7FFFFFFF;
    }
    else if (v24 <= -2147483650.0)
    {
      v25 = 0x80000000;
    }
    else
    {
      v25 = (int)v24;
    }
    if ((int)v10 <= v25)
      v10 = v25;
    else
      v10 = v10;
  }
  else if (v28 == 11)
  {
    v22 = (void *)*(unsigned int *)&v12[v21];
    v27 = *(_DWORD *)&v12[v21];
    WebCore::Length::ref(&v27);
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v22);
  }
  if (v15 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v17);
  }
  if (v6 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v7);
  }
  return v10;
}

uint64_t WebCore::RenderFlexibleBox::layoutColumnReverse(uint64_t *a1, uint64_t *a2, unsigned int a3, int a4, int a5)
{
  unsigned int v7;
  unsigned int *v8;
  char v9;
  unsigned int v10;
  char v11;
  BOOL v12;
  uint64_t (**v13)(uint64_t *);
  int v14;
  unsigned int v15;
  char v16;
  unsigned int v17;
  uint64_t (**v18)(uint64_t *);
  int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned __int16 *v23;
  __int16 v24;
  unsigned int v25;
  char v26;
  int v27;
  int v28;
  int64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  uint64_t v43;
  __int16 v44;
  uint64_t result;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  unint64_t i;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  _QWORD *v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  int v66;
  uint64_t *v67;
  uint64_t v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  uint64_t v74;
  unsigned int v75;
  _QWORD *v76;
  unint64_t v77;
  int64_t v78;
  BOOL v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  unint64_t v83;
  unsigned int v85;
  int v86;

  v7 = *((_DWORD *)a1 + 31);
  if (((v7 >> 13) & 6) - 2 < 4)
    v8 = (unsigned int *)(a1 + 20);
  else
    v8 = (unsigned int *)a1 + 41;
  v9 = v7 >> 13;
  v10 = *v8;
  v11 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1[11] + 32) + 16) + 20);
  if ((*((_BYTE *)a1 + 21) & 0x10) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1[11] + 32) + 16) + 20) & 2) == 0)
    {
      if (((v11 & 3) == 1) == ((*((_BYTE *)a1 + 123) & 4) == 0))
      {
LABEL_76:
        v13 = (uint64_t (**)(uint64_t *))(*a1 + 1000);
        goto LABEL_11;
      }
LABEL_10:
      v13 = (uint64_t (**)(uint64_t *))(*a1 + 1008);
      goto LABEL_11;
    }
    if ((v9 & 7u) > 5 || ((1 << (v9 & 7)) & 0x2A) == 0)
    {
      v36 = *a1;
      goto LABEL_49;
    }
    v36 = *a1;
  }
  else
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1[11] + 32) + 16) + 20) & 2) != 0)
    {
      v12 = (v9 & 7u) > 5 || ((1 << (v9 & 7)) & 0x2A) == 0;
      if (!v12)
        goto LABEL_76;
      goto LABEL_10;
    }
    v35 = ((v11 & 3) == 1) ^ ((*((_BYTE *)a1 + 123) & 4) == 0);
    v36 = *a1;
    if ((v35 & 1) != 0)
    {
LABEL_49:
      v13 = (uint64_t (**)(uint64_t *))(v36 + 1024);
      goto LABEL_11;
    }
  }
  v13 = (uint64_t (**)(uint64_t *))(v36 + 1016);
LABEL_11:
  v14 = (*v13)(a1);
  v15 = v10 - v14;
  if (__OFSUB__(v10, v14))
    v15 = (v10 >> 31) + 0x7FFFFFFF;
  v16 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1[11] + 32) + 16) + 20);
  if ((*((_BYTE *)a1 + 21) & 0x10) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1[11] + 32) + 16) + 20) & 2) == 0)
    {
      if (((v16 & 3) == 1) != ((*((_BYTE *)a1 + 123) & 4) == 0))
      {
LABEL_17:
        v18 = (uint64_t (**)(uint64_t *))(*a1 + 936);
        goto LABEL_18;
      }
      goto LABEL_79;
    }
    v85 = (unsigned __int16)*((_DWORD *)a1 + 31) >> 13;
    if (v85 > 5 || ((1 << v85) & 0x2A) == 0)
    {
      v38 = *a1;
      goto LABEL_51;
    }
    v38 = *a1;
  }
  else
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1[11] + 32) + 16) + 20) & 2) != 0)
    {
      v17 = (unsigned __int16)*((_DWORD *)a1 + 31) >> 13;
      if (v17 > 5 || ((1 << v17) & 0x2A) == 0)
        goto LABEL_17;
LABEL_79:
      v18 = (uint64_t (**)(uint64_t *))(*a1 + 928);
      goto LABEL_18;
    }
    v37 = ((v16 & 3) == 1) ^ ((*((_BYTE *)a1 + 123) & 4) == 0);
    v38 = *a1;
    if ((v37 & 1) != 0)
    {
LABEL_51:
      v18 = (uint64_t (**)(uint64_t *))(v38 + 952);
      goto LABEL_18;
    }
  }
  v18 = (uint64_t (**)(uint64_t *))(v38 + 944);
LABEL_18:
  v19 = (*v18)(a1);
  if (__OFSUB__(v15, v19))
    v20 = (v15 >> 31) + 0x7FFFFFFF;
  else
    v20 = v15 - v19;
  v21 = *((_DWORD *)a2 + 3);
  v22 = *(_QWORD *)(a1[11] + 32);
  v25 = *(unsigned __int16 *)(v22 + 122);
  v23 = (unsigned __int16 *)(v22 + 122);
  v24 = v25;
  v26 = *(_BYTE *)(*(_QWORD *)(v23 - 53) + 20);
  v27 = (v25 >> 4) & 7;
  if ((v25 & 0x7F) != 0)
    v28 = v27;
  else
    v28 = 4;
  if (a4 < 0 && (v24 & 0x180) == 0x100)
    goto LABEL_72;
  if ((v24 & 0xE) == 8)
  {
    if ((*(_BYTE *)(*(_QWORD *)(v23 - 53) + 20) & 2) != 0)
    {
      v43 = ((unsigned __int16)*((_DWORD *)a1 + 31) >> 13) - 2;
      if (v43 > 3)
      {
        LOWORD(v39) = 0;
        v44 = 0;
LABEL_69:
        if ((WebCore::StyleContentAlignmentData::isEndward(v23, v44 | (unsigned __int16)v39, *(_BYTE *)(*(_QWORD *)(v23 - 53) + 20) & 1) & 1) != 0)
        {
LABEL_70:
          LODWORD(v29) = a4;
          if ((v26 & 1) == 0)
            goto LABEL_30;
LABEL_27:
          if (v28 == 2)
          {
            if (a4 >= 1 && v21)
            {
              LODWORD(v34) = v21 << 7;
              if ((2 * v21) <= 0x1FFFFFE)
                v34 = v34;
              else
                v34 = 0x7FFFFFFFLL;
              v29 = ((unint64_t)a4 << 6) / v34;
              if (v29 >= 0x7FFFFFFF)
                LODWORD(v29) = 0x7FFFFFFF;
            }
            else
            {
              v33 = (uint64_t)a4 << 6;
              if ((a4 & 0x200000000000000) != 0)
                v33 += 127;
              v29 = v33 >> 7;
            }
          }
          else if (v28 == 3)
          {
            if (a4 >= 1 && v21)
            {
              LODWORD(v40) = (v21 + 1) << 6;
              LODWORD(v29) = 0x7FFFFFFF;
              if ((v21 + 1) <= 0x1FFFFFE)
                v40 = v40;
              else
                v40 = 0x7FFFFFFFLL;
              v41 = ((unint64_t)a4 << 6) / v40;
              if (v41 < 0x7FFFFFFF)
                LODWORD(v29) = v41;
            }
            else
            {
LABEL_62:
              v42 = (uint64_t)a4 << 6;
              if ((a4 & 0x200000000000000) != 0)
                v42 += 127;
              v29 = v42 >> 7;
            }
          }
          else
          {
            LODWORD(v29) = 0;
          }
          goto LABEL_30;
        }
LABEL_72:
        LODWORD(v29) = a4;
        if ((v26 & 1) != 0)
          goto LABEL_30;
        goto LABEL_27;
      }
      v39 = qword_1969FC9C8[v43];
    }
    else
    {
      v39 = ((unint64_t)*((unsigned int *)a1 + 30) >> 26) & 1;
    }
    v44 = 256;
    goto LABEL_69;
  }
  v30 = (v24 & 0xF) - 3;
  LODWORD(v29) = a4;
  switch(v30)
  {
    case 0:
      goto LABEL_62;
    case 1:
      goto LABEL_72;
    case 2:
      goto LABEL_70;
    case 4:
      break;
    default:
      goto LABEL_27;
  }
LABEL_30:
  v31 = v20 - v29;
  if (__OFSUB__(v20, (_DWORD)v29))
    v31 = (v20 >> 31) + 0x7FFFFFFF;
  if ((*((_BYTE *)a1 + 21) & 0x10) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1[11] + 32) + 16) + 20) & 2) != 0)
      goto LABEL_34;
  }
  else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1[11] + 32) + 16) + 20) & 2) == 0)
  {
LABEL_34:
    v32 = 169;
    goto LABEL_82;
  }
  v32 = 170;
LABEL_82:
  result = (*(uint64_t (**)(uint64_t *))(*a1 + 8 * v32))(a1);
  if ((int)result >= -33554432)
    v46 = (_DWORD)result << 6;
  else
    v46 = 0x80000000;
  if ((int)result > 0x1FFFFFF)
    v46 = 0x7FFFFFFF;
  v47 = v31 - v46;
  if (__OFSUB__(v31, v46))
    v47 = (v31 >> 31) + 0x7FFFFFFF;
  v48 = *(unsigned __int8 *)(*(_QWORD *)(a1[11] + 32) + 122);
  if ((v48 & 0x7F) != 0)
    v49 = (v48 >> 4) & 7;
  else
    v49 = 4;
  v86 = v49;
  if (*((_DWORD *)a2 + 3))
  {
    v50 = 0;
    for (i = 0; i < v77; ++i)
    {
      v52 = *a2;
      v53 = *(_QWORD *)(*a2 + v50);
      v54 = *((_DWORD *)a1 + 5);
      v55 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1[11] + 32) + 16) + 20);
      if ((v54 & 0x1000) != 0)
      {
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1[11] + 32) + 16) + 20) & 2) == 0)
        {
LABEL_96:
          LODWORD(v56) = *(_DWORD *)(v53 + 164);
          if ((v54 & 0x1000) == 0)
            goto LABEL_97;
          goto LABEL_130;
        }
      }
      else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1[11] + 32) + 16) + 20) & 2) != 0)
      {
        goto LABEL_96;
      }
      v56 = *(_QWORD *)(v53 + 160);
      if ((v54 & 0x1000) == 0)
      {
LABEL_97:
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1[11] + 32) + 16) + 20) & 2) != 0)
        {
          v58 = ((unsigned __int16)*((_DWORD *)a1 + 31) >> 13) - 1;
          if (v58 < 5)
          {
            v59 = &unk_1969FCA10;
LABEL_103:
            v57 = v59[v58];
            goto LABEL_105;
          }
          v57 = 136;
        }
        else if (((v55 & 3) == 1) != ((*((_BYTE *)a1 + 123) & 4) == 0))
        {
          v57 = 138;
        }
        else
        {
          v57 = 137;
        }
        goto LABEL_105;
      }
LABEL_130:
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1[11] + 32) + 16) + 20) & 2) != 0)
      {
        v58 = ((unsigned __int16)*((_DWORD *)a1 + 31) >> 13) - 1;
        if (v58 < 5)
        {
          v59 = &unk_1969FC9E8;
          goto LABEL_103;
        }
        v57 = 138;
      }
      else
      {
        v12 = ((v55 & 3) == 1) == ((*((_BYTE *)a1 + 123) & 4) == 0);
        v57 = 135;
        if (!v12)
          v57 = 136;
      }
LABEL_105:
      v60 = (*(uint64_t (**)(void))(*(_QWORD *)v53 + 8 * v57))();
      v61 = v56 + v60;
      if (__OFADD__((_DWORD)v56, v60))
        v61 = (v56 >> 31) + 0x7FFFFFFF;
      v62 = v47 - v61;
      if (__OFSUB__(v47, v61))
        v62 = (v47 >> 31) + 0x7FFFFFFF;
      v63 = *(_QWORD *)(v52 + v50);
      v64 = (unsigned __int16)*((_DWORD *)a1 + 31) >> 13;
      v65 = 0x30203020100uLL >> (8 * v64);
      if (v64 > 5)
        LOBYTE(v65) = 0;
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1[11] + 32) + 16) + 20) & 2) != 0)
      {
        v69 = *((_DWORD *)a1 + 30);
        if (v64 > 5 || ((3u >> v64) & 1) != 0)
        {
          if ((v69 & 0x4000000) != 0)
          {
LABEL_119:
            v67 = *(uint64_t **)(v52 + v50);
            v68 = 138;
          }
          else
          {
LABEL_118:
            v67 = *(uint64_t **)(v52 + v50);
            v68 = 137;
          }
          goto LABEL_120;
        }
        LODWORD(v65) = (v69 >> 26) & 1;
      }
      v66 = v65;
      v67 = *(uint64_t **)(v52 + v50);
      v68 = 135;
      switch(v66)
      {
        case 0:
          break;
        case 1:
          v67 = *(uint64_t **)(v52 + v50);
          v68 = 136;
          break;
        case 2:
          goto LABEL_118;
        case 3:
          goto LABEL_119;
        default:
          v67 = a1;
          v68 = 135;
          break;
      }
LABEL_120:
      v70 = (*(uint64_t (**)(void))(*v67 + 8 * v68))();
      LODWORD(v71) = a3 + v70;
      if (__OFADD__(a3, v70))
        v71 = (a3 >> 31) + 0x7FFFFFFF;
      else
        v71 = v71;
      if ((*((_BYTE *)a1 + 21) & 0x10) != 0)
      {
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1[11] + 32) + 16) + 20) & 2) != 0)
        {
LABEL_125:
          v72 = v62 | (unint64_t)(v71 << 32);
          goto LABEL_135;
        }
      }
      else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1[11] + 32) + 16) + 20) & 2) == 0)
      {
        goto LABEL_125;
      }
      v72 = v71 | (v62 << 32);
LABEL_135:
      *(_QWORD *)(v63 + 152) = v72;
      v73 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1[11] + 32) + 16) + 20);
      if ((*((_BYTE *)a1 + 21) & 0x10) != 0)
      {
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1[11] + 32) + 16) + 20) & 2) != 0)
        {
          v75 = ((unsigned __int16)*((_DWORD *)a1 + 31) >> 13) - 1;
          if (v75 < 5)
          {
            v76 = &unk_1969FCA38;
            goto LABEL_142;
          }
          v74 = 137;
        }
        else
        {
          v12 = ((v73 & 3) == 1) == ((*((_BYTE *)a1 + 123) & 4) == 0);
          v74 = 135;
          if (v12)
            v74 = 136;
        }
      }
      else
      {
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1[11] + 32) + 16) + 20) & 2) == 0)
        {
          if (((v73 & 3) == 1) != ((*((_BYTE *)a1 + 123) & 4) == 0))
            v74 = 137;
          else
            v74 = 138;
          goto LABEL_144;
        }
        v75 = ((unsigned __int16)*((_DWORD *)a1 + 31) >> 13) - 1;
        if (v75 < 5)
        {
          v76 = &unk_1969FCA60;
LABEL_142:
          v74 = v76[v75];
          goto LABEL_144;
        }
        v74 = 135;
      }
LABEL_144:
      result = (*(uint64_t (**)(void))(**(_QWORD **)(v52 + v50) + 8 * v74))();
      if (__OFSUB__((_DWORD)v62, (_DWORD)result))
        v47 = (v62 >> 31) + 0x7FFFFFFF;
      else
        v47 = v62 - result;
      v77 = *((unsigned int *)a2 + 3);
      if (i != v77 - 1)
      {
        LODWORD(v78) = 0;
        if (a4 < 1 || v77 < 2)
          goto LABEL_154;
        switch(v86)
        {
          case 1:
            v82 = v77 - 1;
            break;
          case 2:
            v82 = *((_DWORD *)a2 + 3);
            break;
          case 3:
            v82 = v77 + 1;
            break;
          default:
            LODWORD(v78) = 0;
LABEL_154:
            v79 = __OFADD__((_DWORD)v78, a5);
            v80 = v78 + a5;
            if (v79)
              v80 = 0x7FFFFFFF;
            v79 = __OFSUB__(v47, v80);
            v81 = v47 - v80;
            if (v79)
              v47 = (v47 >> 31) + 0x7FFFFFFF;
            else
              v47 = v81;
            goto LABEL_159;
        }
        if (v82 <= 0x1FFFFFE)
          v83 = v82 << 6;
        else
          v83 = 0x7FFFFFFFLL;
        v78 = ((unint64_t)a4 << 6) / v83;
        if (v78 >= 0x7FFFFFFF)
          LODWORD(v78) = 0x7FFFFFFF;
        goto LABEL_154;
      }
LABEL_159:
      v50 += 40;
    }
  }
  return result;
}

BOOL WebCore::RenderFlexibleBox::performBaselineAlignment(WebCore::RenderFlexibleBox::LineState &)::$_1::operator()(uint64_t a1, char a2, int a3)
{
  char v3;
  char v4;
  char v5;
  char v6;
  char v8;
  char v9;
  char v10;
  char v11;

  if (a3 == 4)
  {
    switch((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13)
    {
      case 1:
        v3 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20);
        if ((v3 & 0xC) == 8)
          v4 = 3;
        else
          v4 = 2;
        v5 = (v3 & 0xC) != 8;
        break;
      case 2:
      case 4:
        v3 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20);
        v4 = (v3 & 0xC) == 8;
        if ((v3 & 0xC) == 8)
          v5 = 3;
        else
          v5 = 2;
        break;
      case 3:
      case 5:
        v3 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20);
        v4 = (v3 & 0xC) == 8;
        if ((v3 & 0xC) == 8)
          v5 = 2;
        else
          v5 = 3;
        break;
      default:
        v3 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20);
        if ((v3 & 0xC) == 8)
          v4 = 3;
        else
          v4 = 2;
        v5 = (v3 & 0xC) == 8;
        break;
    }
    if ((v3 & 2) != 0)
      v6 = v4;
    else
      v6 = v5;
    return v6 != a2;
  }
  else
  {
    switch((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13)
    {
      case 1:
        v8 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20);
        if ((v8 & 0xC) == 8)
          v9 = 3;
        else
          v9 = 2;
        v10 = (v8 & 0xC) != 8;
        break;
      case 2:
      case 4:
        v8 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20);
        v9 = (v8 & 0xC) == 8;
        if ((v8 & 0xC) == 8)
          v10 = 3;
        else
          v10 = 2;
        break;
      case 3:
      case 5:
        v8 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20);
        v9 = (v8 & 0xC) == 8;
        if ((v8 & 0xC) == 8)
          v10 = 2;
        else
          v10 = 3;
        break;
      default:
        v8 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20);
        if ((v8 & 0xC) == 8)
          v9 = 3;
        else
          v9 = 2;
        v10 = (v8 & 0xC) == 8;
        break;
    }
    if ((v8 & 2) != 0)
      v11 = v9;
    else
      v11 = v10;
    return v11 == a2;
  }
}

uint64_t WebCore::RenderFlexibleBox::leftRightAxisDirectionFromStyle(WebCore::RenderFlexibleBox *this, const WebCore::RenderStyle *a2)
{
  int v2;
  unsigned int v3;
  int v4;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 16) + 20) & 2) != 0)
  {
    v3 = *((_DWORD *)this + 11);
    if (((v3 >> 13) & 6) - 2 > 3)
    {
      v2 = 0;
      v4 = 0;
      return v2 | (v4 << 8);
    }
    v2 = (v3 >> 13) & 1;
  }
  else
  {
    v2 = (*((_DWORD *)this + 10) >> 26) & 1;
  }
  v4 = 1;
  return v2 | (v4 << 8);
}

void WebCore::RenderFragmentContainer::~RenderFragmentContainer(WebCore::RenderFragmentContainer *this, void *a2)
{
  WTF **v3;
  WTF *v4;

  *(_QWORD *)this = off_1E3424520;
  v3 = (WTF **)*((_QWORD *)this + 34);
  if (v3)
    WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v3, a2);
  v4 = (WTF *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  WebCore::RenderBlockFlow::~RenderBlockFlow(this, a2);
}

{
  WTF **v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E3424520;
  v3 = (WTF **)*((_QWORD *)this + 34);
  if (v3)
    WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v3, a2);
  v4 = (WTF *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  WebCore::RenderBlockFlow::~RenderBlockFlow(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v5);
  }
}

unsigned int *WebCore::RenderFragmentContainer::positionForPoint@<X0>(WebCore::RenderBlock *this@<X0>, int *a2@<X1>, uint64_t a3@<X2>, WebCore::RenderFragmentContainer *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  if (!*((_BYTE *)this + 280))
    return WebCore::RenderBlock::positionForPoint(this, a2, a3, a4, a5);
  v6 = *(_QWORD *)(*((_QWORD *)this + 31) + 8);
  v7 = *(unsigned int *)(v6 + 64);
  if (!(v7 | ((unint64_t)*(unsigned __int8 *)(v6 + 68) << 32))
    || !*(_QWORD *)((v7 | ((unint64_t)*(unsigned __int8 *)(v6 + 68) << 32)) + 8))
  {
    return WebCore::RenderBlock::positionForPoint(this, a2, a3, a4, a5);
  }
  v9 = *a2;
  v8 = a2[1];
  v10 = *((_DWORD *)this + 5);
  if ((v10 & 0x1000) != 0)
  {
    v11 = *((unsigned int *)this + 64);
    v12 = *((unsigned int *)this + 65);
    v13 = *((_DWORD *)this + 66);
    v14 = *((unsigned int *)this + 67);
    v15 = (v11 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__((_DWORD)v11, v13))
      v15 = v11 + v13;
    v16 = (v12 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__((_DWORD)v12, (_DWORD)v14))
      v16 = v12 + v14;
    v17 = v9;
    v9 = v8;
    if ((v17 & 0x80000000) == 0)
      goto LABEL_10;
  }
  else
  {
    v11 = *((unsigned int *)this + 65);
    v12 = *((unsigned int *)this + 64);
    v13 = *((_DWORD *)this + 67);
    v14 = *((unsigned int *)this + 66);
    v15 = (v11 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__((_DWORD)v11, v13))
      v15 = v11 + v13;
    v16 = (v12 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__((_DWORD)v12, (_DWORD)v14))
      v16 = v12 + v14;
    v17 = v8;
    if ((v8 & 0x80000000) == 0)
    {
LABEL_10:
      if (v17 >= v13)
      {
        LODWORD(v27) = v15 - 1;
        if (__OFSUB__(v15, 1))
          v27 = 0x80000000;
        else
          v27 = v27;
        v28 = v27 | (v14 << 32);
        v29 = v14 | (unint64_t)(v27 << 32);
        if ((v10 & 0x1000) != 0)
          v25 = v28;
        else
          v25 = v29;
      }
      else if (v9 < 0)
      {
        LODWORD(v30) = v17 + v11;
        if (__OFADD__(v17, (_DWORD)v11))
          v30 = 0x7FFFFFFFLL;
        else
          v30 = v30;
        v31 = v30 | (v12 << 32);
        v32 = v12 | (unint64_t)(v30 << 32);
        if ((v10 & 0x1000) != 0)
          v25 = v31;
        else
          v25 = v32;
      }
      else
      {
        v18 = __OFADD__(v9, (_DWORD)v12);
        LODWORD(v12) = v9 + v12;
        if (v18)
          v12 = 0x7FFFFFFFLL;
        else
          v12 = v12;
        LODWORD(v19) = v17 + v11;
        if (__OFADD__(v17, (_DWORD)v11))
          v19 = 0x7FFFFFFFLL;
        else
          v19 = v19;
        v20 = v19 | (v12 << 32);
        v21 = v12 | (v19 << 32);
        if ((v10 & 0x1000) != 0)
          v21 = v20;
        LODWORD(v22) = v16 - 1;
        if (__OFSUB__(v16, 1))
          v22 = 0x80000000;
        else
          v22 = v22;
        v18 = __OFADD__(v17, (_DWORD)v11);
        LODWORD(v11) = v17 + v11;
        if (v18)
          v11 = 0x7FFFFFFFLL;
        else
          v11 = v11;
        v23 = v11 | (v22 << 32);
        v24 = v22 | (v11 << 32);
        if ((v10 & 0x1000) != 0)
          v25 = v23;
        else
          v25 = v24;
        if (v9 < (int)v14)
          v25 = v21;
      }
      goto LABEL_53;
    }
  }
  if ((v10 & 0x1000) != 0)
    v25 = v11;
  else
    v25 = v11 << 32;
LABEL_53:
  v33 = v25;
  return (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, WebCore::RenderBlock *))(*(_QWORD *)v6 + 352))(v6, &v33, a3, this);
}

uint64_t WebCore::RenderFragmentContainer::pageLogicalWidth(WebCore::RenderFragmentContainer *this)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t (*v20)(WebCore::RenderFragmentContainer *);
  WebCore::RenderFragmentContainer *v21;
  unsigned int v22;
  int v23;
  int v24;

  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 21) & 0x10) != 0)
    return WebCore::RenderBox::contentHeight(this);
  v2 = *((_DWORD *)this + 40);
  v3 = (*(uint64_t (**)(WebCore::RenderFragmentContainer *))(*(_QWORD *)this + 1016))(this);
  if (__OFSUB__(v2, v3))
    v4 = (v2 >> 31) + 0x7FFFFFFF;
  else
    v4 = v2 - v3;
  v5 = (*(uint64_t (**)(WebCore::RenderFragmentContainer *))(*(_QWORD *)this + 1024))(this);
  if (__OFSUB__(v4, v5))
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  else
    v6 = v4 - v5;
  v7 = (*(uint64_t (**)(WebCore::RenderFragmentContainer *))(*(_QWORD *)this + 1352))(this);
  v8 = v7 << 6;
  if (v7 < -33554432)
    v8 = 0x80000000;
  if (v7 > 0x1FFFFFF)
    v8 = 0x7FFFFFFF;
  v9 = __OFSUB__(v6, v8);
  v10 = v6 - v8;
  if (v9)
    v10 = (v6 >> 31) + 0x7FFFFFFF;
  v11 = v10 & ~(v10 >> 31);
  v12 = (*(uint64_t (**)(WebCore::RenderFragmentContainer *))(*(_QWORD *)this + 944))(this);
  if (__OFSUB__(v11, v12))
    v13 = 0x7FFFFFFF;
  else
    v13 = v11 - v12;
  v14 = (*(uint64_t (**)(WebCore::RenderFragmentContainer *))(*(_QWORD *)this + 952))(this);
  v15 = v13 - v14;
  if (__OFSUB__(v13, v14))
    v15 = (v13 >> 31) + 0x7FFFFFFF;
  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
  {
    v20 = *(uint64_t (**)(WebCore::RenderFragmentContainer *))(*(_QWORD *)this + 1352);
    v21 = this;
    v22 = v15;
    v23 = v20(v21);
    v15 = v22;
    v24 = v23 << 6;
    if (v23 > 0x1FFFFFF)
      v24 = 0x7FFFFFFF;
    if (v23 >= -33554432)
      v16 = v24;
    else
      v16 = 0x80000000;
  }
  else
  {
    v16 = 0;
  }
  v9 = __OFSUB__(v15, v16);
  v17 = v15 - v16;
  v18 = (v15 >> 31) + 0x7FFFFFFF;
  if (!v9)
    v18 = v17;
  return v18 & ~(v18 >> 31);
}

uint64_t WebCore::RenderFragmentContainer::pageLogicalHeight(WebCore::RenderFragmentContainer *this)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t (*v20)(WebCore::RenderFragmentContainer *);
  WebCore::RenderFragmentContainer *v21;
  unsigned int v22;
  int v23;
  int v24;

  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 21) & 0x10) == 0)
    return WebCore::RenderBox::contentHeight(this);
  v3 = *((_DWORD *)this + 40);
  v4 = (*(uint64_t (**)(WebCore::RenderFragmentContainer *))(*(_QWORD *)this + 1016))(this);
  if (__OFSUB__(v3, v4))
    v5 = (v3 >> 31) + 0x7FFFFFFF;
  else
    v5 = v3 - v4;
  v6 = (*(uint64_t (**)(WebCore::RenderFragmentContainer *))(*(_QWORD *)this + 1024))(this);
  if (__OFSUB__(v5, v6))
    v7 = (v5 >> 31) + 0x7FFFFFFF;
  else
    v7 = v5 - v6;
  v8 = (*(uint64_t (**)(WebCore::RenderFragmentContainer *))(*(_QWORD *)this + 1352))(this);
  v9 = v8 << 6;
  if (v8 < -33554432)
    v9 = 0x80000000;
  if (v8 > 0x1FFFFFF)
    v9 = 0x7FFFFFFF;
  v10 = __OFSUB__(v7, v9);
  v11 = v7 - v9;
  if (v10)
    v11 = (v7 >> 31) + 0x7FFFFFFF;
  v12 = v11 & ~(v11 >> 31);
  v13 = (*(uint64_t (**)(WebCore::RenderFragmentContainer *))(*(_QWORD *)this + 944))(this);
  if (__OFSUB__(v12, v13))
    v14 = 0x7FFFFFFF;
  else
    v14 = v12 - v13;
  v15 = (*(uint64_t (**)(WebCore::RenderFragmentContainer *))(*(_QWORD *)this + 952))(this);
  v16 = v14 - v15;
  if (__OFSUB__(v14, v15))
    v16 = (v14 >> 31) + 0x7FFFFFFF;
  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
  {
    v20 = *(uint64_t (**)(WebCore::RenderFragmentContainer *))(*(_QWORD *)this + 1352);
    v21 = this;
    v22 = v16;
    v23 = v20(v21);
    v16 = v22;
    v24 = v23 << 6;
    if (v23 > 0x1FFFFFF)
      v24 = 0x7FFFFFFF;
    if (v23 >= -33554432)
      v17 = v24;
    else
      v17 = 0x80000000;
  }
  else
  {
    v17 = 0;
  }
  v10 = __OFSUB__(v16, v17);
  v18 = v16 - v17;
  v19 = (v16 >> 31) + 0x7FFFFFFF;
  if (!v10)
    v19 = v18;
  return v19 & ~(v19 >> 31);
}

uint64_t WebCore::RenderFragmentContainer::logicalHeightOfAllFragmentedFlowContent(WebCore::RenderFragmentContainer *this)
{
  return (*(uint64_t (**)(WebCore::RenderFragmentContainer *))(*(_QWORD *)this + 1976))(this);
}

unint64_t WebCore::RenderFragmentContainer::fragmentedFlowPortionOverflowRect(WebCore::RenderFragmentContainer *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  WebCore::RenderFragmentContainer *v6;
  _QWORD **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *i;
  __int128 v14;

  v14 = *((_OWORD *)this + 16);
  v3 = *((_QWORD *)this + 31);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  if ((WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)(v4 + 248), a2) & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    v7 = (_QWORD **)(v4 + 256);
    do
    {
      v8 = *v7;
      v9 = *v8;
      v7 = (_QWORD **)(v8 + 2);
      v6 = *(WebCore::RenderFragmentContainer **)(v9 + 8);
    }
    while (!v6);
  }
  v10 = *((_QWORD *)this + 31);
  if (v10)
    v11 = *(_QWORD *)(v10 + 8);
  else
    v11 = 0;
  if ((WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)(v11 + 248), v5) & 1) == 0)
  {
    for (i = *(_QWORD **)(v11 + 264); i != *(_QWORD **)(v11 + 256) && !*(_QWORD *)(*i + 8); i = (_QWORD *)i[1])
      ;
    ++*(_DWORD *)(v11 + 272);
  }
  return WebCore::RenderFragmentContainer::overflowRectForFragmentedFlowPortion(this, (const WebCore::LayoutRect *)&v14, v6 == this);
}

unint64_t WebCore::RenderFragmentContainer::overflowRectForFragmentedFlowPortion(WebCore::RenderFragmentContainer *this, const WebCore::LayoutRect *a2, int a3)
{
  uint64_t v6;
  int v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  WTF *v14;

  if ((*(unsigned int (**)(WebCore::RenderFragmentContainer *))(*(_QWORD *)this + 1960))(this))
  {
    v7 = *(_DWORD *)a2;
    v6 = *((unsigned int *)a2 + 1);
  }
  else
  {
    v8 = *(_QWORD **)(*((_QWORD *)this + 31) + 8);
    v14 = 0;
    WebCore::RenderFragmentContainer::ensureOverflowForBox((uint64_t)this, v8, (uint64_t *)&v14, 1);
    v10 = *(_QWORD *)((char *)v14 + 20);
    if (*(_DWORD *)v14 == 1)
      WTF::fastFree(v14, v9);
    else
      --*(_DWORD *)v14;
    if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 21) & 0x10) != 0)
    {
      v6 = *((unsigned int *)a2 + 1);
      if (a3)
        v7 = v10;
      else
        v7 = *(_DWORD *)a2;
      if ((*((_BYTE *)this + 22) & 8) == 0 && (*((_QWORD *)this + 12) & 0xE000) == 0)
      {
        if ((int)v6 >= SHIDWORD(v10))
          v12 = HIDWORD(v10);
        else
          v12 = v6;
        v6 = v12;
      }
    }
    else
    {
      v7 = *(_DWORD *)a2;
      if (a3)
        v6 = HIDWORD(v10);
      else
        v6 = *((unsigned int *)a2 + 1);
      if ((*((_BYTE *)this + 22) & 8) == 0 && (*((_QWORD *)this + 12) & 0x1C00) == 0)
      {
        if (v7 >= (int)v10)
          v11 = v10;
        else
          v11 = *(_DWORD *)a2;
        v7 = v11;
      }
    }
  }
  return v7 | (unint64_t)(v6 << 32);
}

uint64_t WebCore::RenderFragmentContainer::pageLogicalTopForOffset(uint64_t a1)
{
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 8) + 21) & 0x10) != 0)
    return *(unsigned int *)(a1 + 256);
  else
    return *(unsigned int *)(a1 + 260);
}

uint64_t WebCore::RenderFragmentContainer::shouldClipFragmentedFlowContent(WebCore::RenderFragmentContainer *this)
{
  return *((_BYTE *)this + 22) & 1;
}

void WebCore::RenderFragmentContainer::styleDidChange(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WebCore::RenderBlockFlow::styleDidChange(a1, a2, a3);
  if (a3 && *(_BYTE *)(a1 + 280) && ((*(_DWORD *)(a1 + 124) ^ *(_DWORD *)(a3 + 44)) & 0xE000) != 0)
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 248) + 8) + 1960))(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 8), a1);
}

uint64_t WebCore::RenderFragmentContainer::repaintFragmentedFlowContent(WebCore::RenderFragmentContainer *this, const WebCore::LayoutRect *a2)
{
  unint64_t v5;
  __int128 v6;

  v6 = *((_OWORD *)this + 16);
  v5 = WebCore::RenderBox::contentBoxRect(this);
  return WebCore::RenderFragmentContainer::repaintFragmentedFlowContentRectangle((uint64_t)this, a2, (const WebCore::LayoutRect *)&v6, (const WebCore::LayoutPoint *)&v5, 0);
}

uint64_t WebCore::RenderFragmentContainer::repaintFragmentedFlowContentRectangle(uint64_t this, const WebCore::LayoutRect *a2, const WebCore::LayoutRect *a3, const WebCore::LayoutPoint *a4, const WebCore::LayoutRect *a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  signed int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  int v65;
  __int128 v66;

  v66 = *(_OWORD *)a2;
  if (a5)
  {
    v5 = *(_DWORD *)a5;
    v6 = *((_DWORD *)a5 + 1);
    v7 = *(_QWORD *)(this + 248);
    if (v7)
      v8 = *(_QWORD *)(v7 + 8);
    else
      v8 = 0;
    v12 = *((_DWORD *)a5 + 2);
    v11 = *((_DWORD *)a5 + 3);
    v13 = (unsigned __int16)*(_DWORD *)(v8 + 124) >> 13;
    v27 = v13 > 5;
    v14 = (1 << v13) & 0x2A;
    if (!v27 && v14 != 0)
    {
      if ((*(_BYTE *)(v8 + 21) & 0x10) != 0)
      {
        v53 = *(_DWORD *)(v8 + 160);
        v19 = __OFADD__(v5, v12);
        v54 = v5 + v12;
        v55 = (v5 >> 31) + 0x7FFFFFFF;
        if (!v19)
          v55 = v54;
        v19 = __OFSUB__(v53, v55);
        v5 = v53 - v55;
        v56 = (v53 >> 31) + 0x7FFFFFFF;
        if (v19)
          v5 = v56;
      }
      else
      {
        v42 = *(_DWORD *)(v8 + 164);
        v43 = v6 + v11;
        if (__OFADD__(v6, v11))
          v43 = (v6 >> 31) + 0x7FFFFFFF;
        v6 = v42 - v43;
        if (__OFSUB__(v42, v43))
          v6 = (v42 >> 31) + 0x7FFFFFFF;
      }
    }
    if ((int)v66 <= (int)v5)
      v16 = v5;
    else
      v16 = v66;
    if (SDWORD1(v66) <= (int)v6)
      v17 = v6;
    else
      v17 = DWORD1(v66);
    v18 = (v66 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__((_DWORD)v66, DWORD2(v66)))
      v18 = v66 + DWORD2(v66);
    v19 = __OFADD__(v5, v12);
    v20 = v5 + v12;
    v21 = (v5 >> 31) + 0x7FFFFFFF;
    if (!v19)
      v21 = v20;
    if (v21 >= v18)
      v21 = v18;
    v22 = DWORD1(v66) + HIDWORD(v66);
    if (__OFADD__(DWORD1(v66), HIDWORD(v66)))
      v22 = (DWORD1(v66) >> 31) + 0x7FFFFFFF;
    v19 = __OFADD__(v6, v11);
    v23 = v6 + v11;
    v24 = (v6 >> 31) + 0x7FFFFFFF;
    if (!v19)
      v24 = v23;
    if (v24 >= v22)
      v24 = v22;
    if ((int)v16 >= v21 || (int)v17 >= v24)
    {
      v21 = 0;
      v24 = 0;
      v16 = 0;
      v17 = 0;
    }
    v19 = __OFSUB__(v21, v16);
    v25 = v21 - v16;
    LODWORD(v9) = (v21 >> 31) + 0x7FFFFFFF;
    if (v19)
      v9 = v9;
    else
      v9 = v25;
    v19 = __OFSUB__(v24, (_DWORD)v17);
    v26 = v24 - v17;
    LODWORD(v10) = (v24 >> 31) + 0x7FFFFFFF;
    if (v19)
      v10 = v10;
    else
      v10 = v26;
    *(_QWORD *)&v66 = v16 | (unint64_t)(v17 << 32);
    *((_QWORD *)&v66 + 1) = v9 | (v10 << 32);
  }
  else
  {
    LODWORD(v9) = DWORD2(v66);
    LODWORD(v10) = HIDWORD(v66);
  }
  v27 = (int)v9 < 1 || (int)v10 < 1;
  if (!v27)
  {
    v29 = *(_DWORD *)a3;
    v28 = *((_DWORD *)a3 + 1);
    v30 = *(_QWORD *)(this + 248);
    if (v30)
      v30 = *(_QWORD *)(v30 + 8);
    v31 = (unsigned __int16)*(_DWORD *)(v30 + 124) >> 13;
    v27 = v31 > 5;
    v32 = (1 << v31) & 0x2A;
    if (!v27 && v32 != 0)
    {
      if ((*(_BYTE *)(v30 + 21) & 0x10) != 0)
      {
        v61 = *((_DWORD *)a3 + 2);
        v62 = *(_DWORD *)(v30 + 160);
        v19 = __OFADD__(v29, v61);
        v63 = v29 + v61;
        v64 = (v29 >> 31) + 0x7FFFFFFF;
        if (!v19)
          v64 = v63;
        v19 = __OFSUB__(v62, v64);
        v29 = v62 - v64;
        v65 = (v62 >> 31) + 0x7FFFFFFF;
        if (v19)
          v29 = v65;
      }
      else
      {
        v48 = *((_DWORD *)a3 + 3);
        v49 = *(_DWORD *)(v30 + 164);
        v19 = __OFADD__(v28, v48);
        v50 = v28 + v48;
        v51 = (v28 >> 31) + 0x7FFFFFFF;
        if (!v19)
          v51 = v50;
        v19 = __OFSUB__(v49, v51);
        v28 = v49 - v51;
        v52 = (v49 >> 31) + 0x7FFFFFFF;
        if (v19)
          v28 = v52;
      }
    }
    v19 = __OFSUB__((_DWORD)v66, v29);
    v34 = v66 - v29;
    if (v19)
      v34 = (v66 >> 31) + 0x7FFFFFFF;
    v19 = __OFSUB__(DWORD1(v66), v28);
    v35 = DWORD1(v66) - v28;
    v36 = (DWORD1(v66) >> 31) + 0x7FFFFFFF;
    if (!v19)
      v36 = v35;
    v37 = *((_DWORD *)a4 + 1);
    v19 = __OFADD__(*(_DWORD *)a4, v34);
    v38 = *(_DWORD *)a4 + v34;
    LODWORD(v39) = (*(_DWORD *)a4 >> 31) + 0x7FFFFFFF;
    if (v19)
      v39 = v39;
    else
      v39 = v38;
    LODWORD(v40) = v37 + v36;
    if (__OFADD__(v37, v36))
      v40 = (v37 >> 31) + 0x7FFFFFFF;
    else
      v40 = v40;
    *(_QWORD *)&v66 = v39 | (v40 << 32);
    v41 = (unsigned __int16)*(_DWORD *)(this + 124) >> 13;
    if (v41 <= 5 && ((1 << v41) & 0x2A) != 0)
    {
      if ((*(_BYTE *)(this + 21) & 0x10) != 0)
      {
        v57 = *(_DWORD *)(this + 160);
        v19 = __OFADD__((_DWORD)v39, (_DWORD)v9);
        v58 = v39 + v9;
        v59 = (v39 >> 31) + 0x7FFFFFFF;
        if (v19)
          v58 = v59;
        v19 = __OFSUB__(v57, v58);
        v60 = v57 - v58;
        if (v19)
          v60 = (v57 >> 31) + 0x7FFFFFFF;
        LODWORD(v66) = v60;
      }
      else
      {
        v44 = *(_DWORD *)(this + 164);
        v19 = __OFADD__((_DWORD)v40, (_DWORD)v10);
        v45 = v40 + v10;
        v46 = (v40 >> 31) + 0x7FFFFFFF;
        if (v19)
          v45 = v46;
        v19 = __OFSUB__(v44, v45);
        v47 = v44 - v45;
        if (v19)
          v47 = (v44 >> 31) + 0x7FFFFFFF;
        DWORD1(v66) = v47;
      }
    }
    return WebCore::RenderObject::repaintRectangle(this, (const WebCore::LayoutRect *)&v66);
  }
  return this;
}

unint64_t WebCore::RenderFragmentContainer::fragmentedFlowContentRectangle(WebCore::RenderFragmentContainer *this, const WebCore::LayoutRect *a2, const WebCore::LayoutRect *a3, const WebCore::LayoutPoint *a4, const WebCore::LayoutRect *a5)
{
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  signed int v18;
  signed int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  BOOL v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;

  v6 = *(_DWORD *)a2;
  v5 = *((_DWORD *)a2 + 1);
  v7 = *((_QWORD *)a2 + 1);
  if (a5)
  {
    v9 = *(_DWORD *)a5;
    v8 = *((_DWORD *)a5 + 1);
    v10 = *((_QWORD *)this + 31);
    if (v10)
      v11 = *(_QWORD *)(v10 + 8);
    else
      v11 = 0;
    v13 = *((_DWORD *)a5 + 2);
    v12 = *((_DWORD *)a5 + 3);
    v14 = (unsigned __int16)*(_DWORD *)(v11 + 124) >> 13;
    v15 = v14 > 5;
    v16 = (1 << v14) & 0x2A;
    if (!v15 && v16 != 0)
    {
      if ((*(_BYTE *)(v11 + 21) & 0x10) != 0)
      {
        v63 = *(_DWORD *)(v11 + 160);
        v64 = v9 + v13;
        if (__OFADD__(v9, v13))
          v64 = (v9 >> 31) + 0x7FFFFFFF;
        v9 = v63 - v64;
        if (__OFSUB__(v63, v64))
          v9 = (v63 >> 31) + 0x7FFFFFFF;
      }
      else
      {
        v52 = *(_DWORD *)(v11 + 164);
        v53 = v8 + v12;
        if (__OFADD__(v8, v12))
          v53 = (v8 >> 31) + 0x7FFFFFFF;
        v8 = v52 - v53;
        if (__OFSUB__(v52, v53))
          v8 = (v52 >> 31) + 0x7FFFFFFF;
      }
    }
    if ((int)v6 <= (int)v9)
      v18 = v9;
    else
      v18 = v6;
    if ((int)v5 <= (int)v8)
      v19 = v8;
    else
      v19 = v5;
    v20 = v6 + v7;
    if (__OFADD__(v6, (_DWORD)v7))
      v20 = (v6 >> 31) + 0x7FFFFFFF;
    v21 = v9 + v13;
    if (__OFADD__(v9, v13))
      v21 = (v9 >> 31) + 0x7FFFFFFF;
    if (v21 >= v20)
      v22 = v20;
    else
      v22 = v21;
    v23 = v5 + HIDWORD(v7);
    if (__OFADD__(v5, HIDWORD(v7)))
      v23 = (v5 >> 31) + 0x7FFFFFFF;
    v24 = v8 + v12;
    if (__OFADD__(v8, v12))
      v24 = (v8 >> 31) + 0x7FFFFFFF;
    if (v24 >= v23)
      v25 = v23;
    else
      v25 = v24;
    if (v18 <= v22 && v19 <= v25)
    {
      v6 = v18;
      v5 = v19;
    }
    else
    {
      v22 = 0;
      v25 = 0;
      v6 = 0;
      v5 = 0;
    }
    v26 = v22 - v6;
    if (__OFSUB__(v22, v6))
      v26 = (v22 >> 31) + 0x7FFFFFFF;
    v27 = v25 - v5;
    if (__OFSUB__(v25, v5))
      v27 = (v25 >> 31) + 0x7FFFFFFF;
    v7 = v26 | (unint64_t)(v27 << 32);
  }
  else
  {
    v10 = *((_QWORD *)this + 31);
  }
  v29 = *(_DWORD *)a3;
  v28 = *((_DWORD *)a3 + 1);
  if (v10)
    v10 = *(_QWORD *)(v10 + 8);
  v30 = (unsigned __int16)*(_DWORD *)(v10 + 124) >> 13;
  v15 = v30 > 5;
  v31 = (1 << v30) & 0x2A;
  if (!v15 && v31 != 0)
  {
    if ((*(_BYTE *)(v10 + 21) & 0x10) != 0)
    {
      v58 = *((_DWORD *)a3 + 2);
      v59 = *(_DWORD *)(v10 + 160);
      v33 = __OFADD__(v29, v58);
      v60 = v29 + v58;
      v61 = (v29 >> 31) + 0x7FFFFFFF;
      if (!v33)
        v61 = v60;
      v33 = __OFSUB__(v59, v61);
      v29 = v59 - v61;
      v62 = (v59 >> 31) + 0x7FFFFFFF;
      if (v33)
        v29 = v62;
    }
    else
    {
      v47 = *((_DWORD *)a3 + 3);
      v48 = *(_DWORD *)(v10 + 164);
      v33 = __OFADD__(v28, v47);
      v49 = v28 + v47;
      v50 = (v28 >> 31) + 0x7FFFFFFF;
      if (!v33)
        v50 = v49;
      v33 = __OFSUB__(v48, v50);
      v28 = v48 - v50;
      v51 = (v48 >> 31) + 0x7FFFFFFF;
      if (v33)
        v28 = v51;
    }
  }
  v33 = __OFSUB__(v6, v29);
  v34 = v6 - v29;
  v35 = (v6 >> 31) + 0x7FFFFFFF;
  if (v33)
    v34 = v35;
  v33 = __OFSUB__(v5, v28);
  v36 = v5 - v28;
  v37 = (v5 >> 31) + 0x7FFFFFFF;
  if (!v33)
    v37 = v36;
  v38 = *((_DWORD *)a4 + 1);
  v33 = __OFADD__(*(_DWORD *)a4, v34);
  v39 = *(_DWORD *)a4 + v34;
  if (v33)
    v39 = (*(_DWORD *)a4 >> 31) + 0x7FFFFFFF;
  v33 = __OFADD__(v38, v37);
  LODWORD(v40) = v38 + v37;
  if (v33)
    v40 = (v38 >> 31) + 0x7FFFFFFF;
  else
    v40 = v40;
  v41 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if (v41 <= 5 && ((1 << v41) & 0x2A) != 0)
  {
    if ((*((_BYTE *)this + 21) & 0x10) != 0)
    {
      v54 = *((_DWORD *)this + 40);
      v33 = __OFADD__(v39, (_DWORD)v7);
      v55 = v39 + v7;
      v56 = (v39 >> 31) + 0x7FFFFFFF;
      if (!v33)
        v56 = v55;
      v33 = __OFSUB__(v54, v56);
      v39 = v54 - v56;
      v57 = (v54 >> 31) + 0x7FFFFFFF;
      if (v33)
        v39 = v57;
    }
    else
    {
      v43 = *((_DWORD *)this + 41);
      v33 = __OFADD__((_DWORD)v40, HIDWORD(v7));
      v44 = v40 + HIDWORD(v7);
      v45 = (v40 >> 31) + 0x7FFFFFFF;
      if (!v33)
        v45 = v44;
      v33 = __OFSUB__(v43, v45);
      LODWORD(v40) = v43 - v45;
      v46 = (v43 >> 31) + 0x7FFFFFFF;
      if (v33)
        v40 = v46;
      else
        v40 = v40;
    }
  }
  return v39 | (unint64_t)(v40 << 32);
}

double WebCore::RenderFragmentContainer::fragmentRectsForFlowContentRect@<D0>(WebCore::RenderFragmentContainer *this@<X0>, const WebCore::LayoutRect *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  double result;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;

  v6 = *((_QWORD *)this + 32);
  v7 = *((_QWORD *)this + 33);
  v8 = WebCore::RenderBox::contentBoxRect(this);
  v9 = *(_QWORD *)a2;
  v10 = *((_QWORD *)this + 31);
  if (v10)
    v10 = *(_QWORD *)(v10 + 8);
  v12 = *((_DWORD *)a2 + 2);
  v11 = *((_DWORD *)a2 + 3);
  v13 = (unsigned __int16)*(_DWORD *)(v10 + 124) >> 13;
  v14 = v13 > 5;
  v15 = (1 << v13) & 0x2A;
  if (!v14 && v15 != 0)
  {
    if ((*(_BYTE *)(v10 + 21) & 0x10) != 0)
    {
      v38 = *(_DWORD *)(v10 + 160);
      v39 = v6 + v7;
      if (__OFADD__((_DWORD)v6, (_DWORD)v7))
        v39 = (v6 >> 31) + 0x7FFFFFFF;
      v18 = __OFSUB__(v38, v39);
      v40 = v38 - v39;
      LODWORD(v41) = (v38 >> 31) + 0x7FFFFFFF;
      if (v18)
        v41 = v41;
      else
        v41 = v40;
      v6 = v6 & 0xFFFFFFFF00000000 | v41;
    }
    else
    {
      v30 = *(_DWORD *)(v10 + 164);
      v31 = (HIDWORD(v6) >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(HIDWORD(v6), HIDWORD(v7)))
        v31 = HIDWORD(v6) + HIDWORD(v7);
      v18 = __OFSUB__(v30, v31);
      v32 = v30 - v31;
      v33 = (v30 >> 31) + 0x7FFFFFFF;
      if (!v18)
        v33 = v32;
      v6 = v6 | ((unint64_t)v33 << 32);
    }
  }
  v17 = HIDWORD(v9);
  v18 = __OFSUB__((_DWORD)v9, (_DWORD)v6);
  v19 = v9 - v6;
  v20 = (v9 >> 31) + 0x7FFFFFFF;
  if (!v18)
    v20 = v19;
  v18 = __OFSUB__((_DWORD)v17, HIDWORD(v6));
  v21 = v17 - HIDWORD(v6);
  v22 = (v17 >> 31) + 0x7FFFFFFF;
  if (!v18)
    v22 = v21;
  v18 = __OFADD__((_DWORD)v8, v20);
  v23 = v8 + v20;
  if (v18)
    v23 = (v8 >> 31) + 0x7FFFFFFF;
  v18 = __OFADD__(HIDWORD(v8), v22);
  v24 = HIDWORD(v8) + v22;
  LODWORD(v25) = (HIDWORD(v8) >> 31) + 0x7FFFFFFF;
  if (v18)
    v25 = v25;
  else
    v25 = v24;
  v26 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if (v26 <= 5 && ((1 << v26) & 0x2A) != 0)
  {
    if ((*((_BYTE *)this + 21) & 0x10) != 0)
    {
      v42 = *((_DWORD *)this + 40);
      v18 = __OFADD__(v23, v12);
      v43 = v23 + v12;
      v44 = (v23 >> 31) + 0x7FFFFFFF;
      if (!v18)
        v44 = v43;
      v18 = __OFSUB__(v42, v44);
      v23 = v42 - v44;
      v45 = (v42 >> 31) + 0x7FFFFFFF;
      if (v18)
        v23 = v45;
    }
    else
    {
      v34 = *((_DWORD *)this + 41);
      v18 = __OFADD__((_DWORD)v25, v11);
      v35 = v25 + v11;
      v36 = (v25 >> 31) + 0x7FFFFFFF;
      if (!v18)
        v36 = v35;
      v18 = __OFSUB__(v34, v36);
      LODWORD(v25) = v34 - v36;
      v37 = (v34 >> 31) + 0x7FFFFFFF;
      if (v18)
        v25 = v37;
      else
        v25 = v25;
    }
  }
  v27 = v23 | (unint64_t)(v25 << 32);
  v28 = WTF::fastMalloc((WTF *)0x10);
  *a3 = v28;
  *(_QWORD *)v28 = v27;
  *(_DWORD *)(v28 + 8) = v12;
  *(_DWORD *)(v28 + 12) = v11;
  *(_QWORD *)&result = 0x100000001;
  a3[1] = 0x100000001;
  return result;
}

_QWORD *WebCore::RenderFragmentContainer::attachFragment(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this[3] + 8) + 40) + 8) + 3405))
  {
    v1 = this;
    *((_BYTE *)this + 280) = 0;
    this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 2032))(this);
    v2 = v1[31];
    if (v2)
    {
      this = *(_QWORD **)(v2 + 8);
      if (this)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*this + 1952))(this, v1);
    }
  }
  return this;
}

WTF *WebCore::RenderFragmentContainer::detachFragment(WebCore::RenderFragmentContainer *this, void *a2)
{
  WTF *result;
  uint64_t v4;

  result = (WTF *)*((_QWORD *)this + 31);
  if (!result)
  {
    *((_QWORD *)this + 31) = 0;
    return result;
  }
  v4 = *((_QWORD *)result + 1);
  if (v4)
  {
    WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderFragmentContainer>(v4 + 248, (uint64_t)this);
    result = (WTF *)*((_QWORD *)this + 31);
    *((_QWORD *)this + 31) = 0;
    if (!result)
      return result;
  }
  else
  {
    *((_QWORD *)this + 31) = 0;
  }
  if (*(_DWORD *)result == 1)
    return (WTF *)WTF::fastFree(result, a2);
  --*(_DWORD *)result;
  return result;
}

uint64_t WebCore::RenderFragmentContainer::renderBoxFragmentInfo(WebCore::RenderFragmentContainer *this, const WebCore::RenderBox *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 34);
  if (!v2)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  for (i = 1; ; ++i)
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 16 * v7);
    if (v10 != -1)
    {
      if (!v10)
        return 0;
      if (*(const WebCore::RenderBox **)(v10 + 8) == a2)
        break;
    }
    v7 = (v9 + i) & v3;
  }
  return *(_QWORD *)(v2 + 16 * v9 + 8);
}

uint64_t WebCore::RenderFragmentContainer::setRenderBoxFragmentInfo(uint64_t a1, uint64_t a2, int a3, int a4, char a5)
{
  uint64_t *v8;
  WTF *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  WTF *v13;
  WTF *v14;
  WTF *v15;
  void *v18;
  WTF *v19;
  WTF *v20;
  WTF *v21;
  _QWORD v22[3];

  v8 = (uint64_t *)(a1 + 272);
  v9 = *(WTF **)(a2 + 8);
  if (!v9)
  {
    v9 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    *((_QWORD *)v9 + 1) = a2;
    v19 = *(WTF **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v9;
    if (v19)
    {
      if (*(_DWORD *)v19 == 1)
      {
        WTF::fastFree(v19, v18);
        v9 = *(WTF **)(a2 + 8);
      }
      else
      {
        --*(_DWORD *)v19;
      }
    }
  }
  ++*(_DWORD *)v9;
  v21 = v9;
  v10 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v10 = a3;
  *(_DWORD *)(v10 + 4) = a4;
  *(_BYTE *)(v10 + 8) = a5;
  *(_QWORD *)(v10 + 16) = 0;
  v20 = (WTF *)v10;
  WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::HashTableTraits>::add<std::unique_ptr<WebCore::RenderBoxFragmentInfo>>(v8, (uint64_t *)&v21, (uint64_t *)&v20, (uint64_t)v22);
  v12 = v22[0];
  v13 = v20;
  v20 = 0;
  if (v13)
  {
    v14 = (WTF *)*((_QWORD *)v13 + 2);
    *((_QWORD *)v13 + 2) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1)
        WTF::fastFree(v14, v11);
      else
        --*(_DWORD *)v14;
    }
    WTF::fastFree(v13, v11);
  }
  v15 = v21;
  v21 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
      WTF::fastFree(v15, v11);
    else
      --*(_DWORD *)v15;
  }
  return *(_QWORD *)(v12 + 8);
}

uint64_t *WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::HashTableTraits>::add<std::unique_ptr<WebCore::RenderBoxFragmentInfo>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int i;
  unsigned int v19;
  uint64_t *v20;
  WTF *v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *a2;
  v13 = *(_QWORD *)(*a2 + 8);
  v14 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = (v16 >> 31) ^ v16;
  for (i = 1; ; ++i)
  {
    v19 = v17 & v10;
    v20 = (uint64_t *)(v8 + 16 * v19);
    v21 = (WTF *)*v20;
    if (*v20 != -1)
      break;
    v11 = (uint64_t *)(v8 + 16 * v19);
LABEL_10:
    v17 = i + v19;
  }
  if (!v21)
  {
    if (v11)
    {
      *v11 = 0;
      v11[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v12 = *a2;
      v20 = v11;
    }
    *a2 = 0;
    result = (uint64_t *)*v20;
    *v20 = v12;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
      else
        --*(_DWORD *)result;
    }
    v22 = *a3;
    *a3 = 0;
    v23 = (WTF *)v20[1];
    v20[1] = v22;
    if (v23)
    {
      v24 = (WTF *)*((_QWORD *)v23 + 2);
      *((_QWORD *)v23 + 2) = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 1)
          WTF::fastFree(v24, a2);
        else
          --*(_DWORD *)v24;
      }
      result = (uint64_t *)WTF::fastFree(v23, a2);
    }
    v25 = *v6;
    if (*v6)
      v26 = *(_DWORD *)(v25 - 12) + 1;
    else
      v26 = 1;
    *(_DWORD *)(v25 - 12) = v26;
    v30 = *v6;
    if (*v6)
      v31 = *(_DWORD *)(v30 - 12);
    else
      v31 = 0;
    v32 = (*(_DWORD *)(v30 - 16) + v31);
    v33 = *(unsigned int *)(v30 - 4);
    if (v33 > 0x400)
    {
      if (v33 <= 2 * v32)
        goto LABEL_32;
    }
    else if (3 * v33 <= 4 * v32)
    {
      if (!(_DWORD)v33)
      {
        v34 = 8;
LABEL_37:
        result = (uint64_t *)WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::rehash(v6, v34, (WTF **)v20);
        v20 = result;
        v30 = *v6;
        if (*v6)
          v33 = *(unsigned int *)(v30 - 4);
        else
          v33 = 0;
        goto LABEL_41;
      }
LABEL_32:
      v34 = (_DWORD)v33 << (6 * *(_DWORD *)(v30 - 12) >= (2 * v33));
      goto LABEL_37;
    }
LABEL_41:
    v29 = v30 + 16 * v33;
    v28 = 1;
    goto LABEL_42;
  }
  if (*((_QWORD *)v21 + 1) != v13)
    goto LABEL_10;
  if ((v9 & 1) != 0)
    v27 = 0;
  else
    v27 = *(unsigned int *)(v8 - 4);
  v28 = 0;
  v29 = v8 + 16 * v27;
LABEL_42:
  *(_QWORD *)a4 = v20;
  *(_QWORD *)(a4 + 8) = v29;
  *(_BYTE *)(a4 + 16) = v28;
  return result;
}

uint64_t WebCore::RenderFragmentContainer::insertedIntoTree(WebCore::RenderFragmentContainer *this)
{
  uint64_t result;
  void *v3;
  uint64_t v4;
  WebCore::RenderLayer *v5;
  BOOL v6;

  result = (*(uint64_t (**)(WebCore::RenderFragmentContainer *))(*(_QWORD *)this + 1944))(this);
  if (*((_BYTE *)this + 280))
    return WebCore::RenderElement::insertedIntoTree((uint64_t)this, v3, v4, v5, v6);
  return result;
}

uint64_t WebCore::RenderFragmentContainer::willBeRemovedFromTree(WebCore::RenderFragmentContainer *this, void *a2)
{
  WebCore::RenderElement::willBeRemovedFromTree(this, a2);
  return (*(uint64_t (**)(WebCore::RenderFragmentContainer *))(*(_QWORD *)this + 1952))(this);
}

void WebCore::RenderFragmentContainer::computeIntrinsicLogicalWidths(WebCore::RenderBlockFlow *this, WebCore::LayoutUnit *a2, WebCore::LayoutUnit *a3)
{
  if (*((_BYTE *)this + 280))
  {
    *(_DWORD *)a3 = 0;
    *(_DWORD *)a2 = 0;
  }
  else
  {
    WebCore::RenderBlockFlow::computeIntrinsicLogicalWidths(this, a2, a3);
  }
}

int *WebCore::RenderFragmentContainer::computePreferredLogicalWidths(WebCore::RenderFragmentContainer *this)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  int *result;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  const WebCore::RenderBox *v13;
  uint64_t v14;
  const WebCore::RenderBox *v15;
  uint64_t v16;
  const WebCore::RenderBox *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;

  if (!*((_BYTE *)this + 280))
    return WebCore::RenderBlock::computePreferredLogicalWidths(this);
  *((_DWORD *)this + 47) = 0;
  *((_DWORD *)this + 46) = 0;
  v2 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  v3 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  if (v2 <= 3)
  {
    if (*(_BYTE *)(v3 + 16) != 4)
      goto LABEL_16;
    v4 = v3 + 12;
  }
  else
  {
    if (*(_BYTE *)(v3 + 8) != 4)
      goto LABEL_16;
    v4 = v3 + 4;
  }
  if (*(_BYTE *)(v4 + 6))
    v5 = *(float *)v4;
  else
    v5 = (float)*(int *)v4;
  if (v5 > 0.0)
  {
    v7 = v2 >= 4;
    v8 = v3 + 12;
    v9 = v3 + 4;
    if (v7)
      v10 = v9;
    else
      v10 = v8;
    v11 = WebCore::RenderBox::adjustContentBoxLogicalWidthForBoxSizing(this, v10);
    *((_DWORD *)this + 46) = v11;
    *((_DWORD *)this + 47) = v11;
    goto LABEL_17;
  }
LABEL_16:
  (*(void (**)(WebCore::RenderFragmentContainer *, char *))(*(_QWORD *)this + 1624))(this, (char *)this + 184);
LABEL_17:
  v12 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v13 = (const WebCore::RenderBox *)(v12 + 36);
  v14 = v12 + 44;
  v15 = (const WebCore::RenderBox *)(v12 + 20);
  v16 = v12 + 28;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v17 = v15;
  else
    v17 = v13;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v18 = v16;
  else
    v18 = v14;
  v19 = (*(uint64_t (**)(WebCore::RenderFragmentContainer *))(*(_QWORD *)this + 1064))(this);
  v20 = (*(uint64_t (**)(WebCore::RenderFragmentContainer *))(*(_QWORD *)this + 1072))(this);
  if (__OFADD__(v19, v20))
    v21 = (v19 >> 31) + 0x7FFFFFFF;
  else
    v21 = v19 + v20;
  v22 = (*(uint64_t (**)(WebCore::RenderFragmentContainer *))(*(_QWORD *)this + 976))(this);
  if (__OFADD__(v21, v22))
    v23 = (v21 >> 31) + 0x7FFFFFFF;
  else
    v23 = v21 + v22;
  v24 = (*(uint64_t (**)(WebCore::RenderFragmentContainer *))(*(_QWORD *)this + 984))(this);
  if (__OFADD__(v23, v24))
    v25 = (v23 >> 31) + 0x7FFFFFFF;
  else
    v25 = v23 + v24;
  result = (int *)WebCore::RenderBox::computePreferredLogicalWidths((uint64_t)this, v17, v18, v25);
  *((_DWORD *)this + 5) &= ~0x2000u;
  return result;
}

uint64_t WebCore::RenderFragmentContainer::ensureOverflowForBox(uint64_t result, _QWORD *a2, uint64_t *a3, int a4)
{
  WebCore::RenderFragmentContainer *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  WebCore::RenderObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::RenderObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  void *v30;
  WTF *v31;
  int v32;
  WTF *v33;
  int v34;
  BOOL v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  __int128 v43;
  __int128 v44;

  v6 = (WebCore::RenderFragmentContainer *)result;
  v7 = *(_QWORD *)(result + 272);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    for (i = 1; ; ++i)
    {
      v14 = v12;
      v15 = *(_QWORD *)(v7 + 16 * v12);
      if (v15 != -1)
      {
        if (!v15)
          goto LABEL_7;
        if (*(_QWORD **)(v15 + 8) == a2)
          break;
      }
      v12 = (v14 + i) & v8;
    }
    v16 = *(_QWORD *)(v7 + 16 * v14 + 8);
    if (v16)
      goto LABEL_10;
  }
  else
  {
LABEL_7:
    v16 = 0;
  }
  if (!a4)
    return result;
LABEL_10:
  if (v16)
  {
    v17 = *(_DWORD **)(v16 + 16);
    if (v17)
    {
      ++*v17;
      result = *a3;
      *a3 = (uint64_t)v17;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          return WTF::fastFree((WTF *)result, a2);
        else
          --*(_DWORD *)result;
      }
      return result;
    }
  }
  v18 = a2[20];
  *(_QWORD *)&v44 = 0;
  *((_QWORD *)&v44 + 1) = v18;
  v43 = 0uLL;
  if ((int)v18 >= 1 && SHIDWORD(v18) >= 1)
  {
    v20 = WebCore::RenderFragmentContainer::rectFlowPortionForBox((WebCore::RenderFragmentContainer *)result, (const WebCore::RenderBox *)a2, (const WebCore::LayoutRect *)&v44);
    v22 = v21;
    *(_QWORD *)&v44 = v20;
    *((_QWORD *)&v44 + 1) = v21;
    *(_QWORD *)&v43 = WebCore::RenderBox::clientBoxRectInFragment((WebCore::RenderBox *)a2, (uint64_t)v6);
    *((_QWORD *)&v43 + 1) = v23;
    v24 = WebCore::RenderFragmentContainer::rectFlowPortionForBox(v6, (const WebCore::RenderBox *)a2, (const WebCore::LayoutRect *)&v43);
    *(_QWORD *)&v43 = v24;
    *((_QWORD *)&v43 + 1) = v25;
    v26 = *((_QWORD *)v6 + 31);
    if (v26)
      v27 = *(_QWORD *)(v26 + 8);
    else
      v27 = 0;
    v28 = (unsigned __int16)*(_DWORD *)(v27 + 124) >> 13;
    if (v28 <= 5 && ((1 << v28) & 0x2A) != 0)
    {
      if ((*(_BYTE *)(v27 + 21) & 0x10) != 0)
      {
        v39 = (_DWORD)v20 + v22;
        if (__OFADD__((_DWORD)v20, (_DWORD)v22))
          v39 = (v20 >> 31) + 0x7FFFFFFF;
        v35 = __OFSUB__(0, v39);
        v40 = -v39;
        if (v35)
          v40 = 0x7FFFFFFF;
        LODWORD(v44) = v40;
      }
      else
      {
        v34 = HIDWORD(v20) + HIDWORD(v22);
        if (__OFADD__(HIDWORD(v20), HIDWORD(v22)))
          v34 = (HIDWORD(v20) >> 31) + 0x7FFFFFFF;
        v35 = __OFSUB__(0, v34);
        v36 = -v34;
        if (v35)
          v36 = 0x7FFFFFFF;
        DWORD1(v44) = v36;
      }
    }
    if (v26)
      v26 = *(_QWORD *)(v26 + 8);
    v29 = (unsigned __int16)*(_DWORD *)(v26 + 124) >> 13;
    if (v29 <= 5 && ((1 << v29) & 0x2A) != 0)
    {
      if ((*(_BYTE *)(v26 + 21) & 0x10) != 0)
      {
        v41 = (_DWORD)v24 + v25;
        if (__OFADD__((_DWORD)v24, (_DWORD)v25))
          v41 = (v24 >> 31) + 0x7FFFFFFF;
        v35 = __OFSUB__(0, v41);
        v42 = -v41;
        if (v35)
          v42 = 0x7FFFFFFF;
        LODWORD(v43) = v42;
      }
      else
      {
        v37 = HIDWORD(v24) + HIDWORD(v25);
        if (__OFADD__(HIDWORD(v24), HIDWORD(v25)))
          v37 = (HIDWORD(v24) >> 31) + 0x7FFFFFFF;
        v35 = __OFSUB__(0, v37);
        v38 = -v37;
        if (v35)
          v38 = 0x7FFFFFFF;
        DWORD1(v43) = v38;
      }
    }
  }
  result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)result = 1;
  *(_OWORD *)(result + 4) = v43;
  *(_OWORD *)(result + 20) = v44;
  *(_DWORD *)(result + 36) = 0;
  if (v16)
  {
    v31 = *(WTF **)(v16 + 16);
    *(_QWORD *)(v16 + 16) = result;
    if (!v31)
    {
      v32 = 2;
      goto LABEL_33;
    }
    if (*(_DWORD *)v31 != 1)
    {
      --*(_DWORD *)v31;
LABEL_32:
      v32 = *(_DWORD *)result + 1;
LABEL_33:
      *(_DWORD *)result = v32;
      goto LABEL_34;
    }
    WTF::fastFree(v31, v30);
    result = *(_QWORD *)(v16 + 16);
    if (result)
      goto LABEL_32;
  }
LABEL_34:
  v33 = (WTF *)*a3;
  *a3 = result;
  if (v33)
  {
    if (*(_DWORD *)v33 == 1)
      return WTF::fastFree(v33, v30);
    else
      --*(_DWORD *)v33;
  }
  return result;
}

WebCore::RenderObject *WebCore::RenderFragmentContainer::rectFlowPortionForBox(WebCore::RenderFragmentContainer *this, const WebCore::RenderBox *a2, const WebCore::LayoutRect *a3)
{
  uint64_t v5;
  WebCore::RenderFragmentedFlow *v6;
  WebCore::RenderObject *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WebCore::RenderFragmentedFlow *v11;
  int FragmentRangeForBox;
  uint64_t v13;
  WebCore::RenderFragmentedFlow *v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  signed int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  WebCore::RenderFragmentContainer *v38;
  WebCore::RenderFragmentContainer *v39;
  WebCore::RenderObject *v40;
  unint64_t v41;

  v5 = *((_QWORD *)this + 31);
  if (v5)
    v6 = *(WebCore::RenderFragmentedFlow **)(v5 + 8);
  else
    v6 = 0;
  v7 = WebCore::RenderFragmentedFlow::mapFromLocalToFragmentedFlow(v6, a2, a3);
  v9 = v8;
  v40 = v7;
  v41 = v8;
  v38 = 0;
  v39 = 0;
  v10 = *((_QWORD *)this + 31);
  if (v10)
    v11 = *(WebCore::RenderFragmentedFlow **)(v10 + 8);
  else
    v11 = 0;
  FragmentRangeForBox = WebCore::RenderFragmentedFlow::getFragmentRangeForBox(v11, a2, &v39, &v38);
  v13 = *((_QWORD *)this + 31);
  if (FragmentRangeForBox)
  {
    v14 = *(WebCore::RenderFragmentedFlow **)(v13 + 8);
    if ((*((_BYTE *)v14 + 21) & 0x10) != 0)
    {
      if (v39 != this)
      {
        v28 = *((_DWORD *)this + 64);
        if ((int)v7 > v28)
          v28 = (int)v7;
        v29 = v28 - (_DWORD)v7;
        if (__OFSUB__(v28, (_DWORD)v7))
          v29 = (v28 >> 31) + 0x7FFFFFFF;
        v19 = __OFSUB__((_DWORD)v9, v29);
        v30 = v9 - v29;
        if (v19)
          v30 = (v9 >> 31) + 0x7FFFFFFF;
        LODWORD(v9) = v30 & ~(v30 >> 31);
        LODWORD(v40) = v28;
        LODWORD(v41) = v9;
        LODWORD(v7) = v28;
      }
      if (v38 != this)
      {
        v31 = *((_DWORD *)this + 66);
        v32 = *((_DWORD *)this + 64);
        v19 = __OFADD__(v32, v31);
        v33 = v32 + v31;
        v34 = (v32 >> 31) + 0x7FFFFFFF;
        if (v19)
          v33 = v34;
        v19 = __OFSUB__(v33, (_DWORD)v7);
        v35 = v33 - (_DWORD)v7;
        v36 = (v33 >> 31) + 0x7FFFFFFF;
        if (!v19)
          v36 = v35;
        if ((int)v9 < v36)
          v36 = v9;
        LODWORD(v41) = v36 & ~(v36 >> 31);
      }
    }
    else
    {
      v15 = (unint64_t)v7 >> 32;
      v16 = HIDWORD(v9);
      if (v39 != this)
      {
        v17 = *((_DWORD *)this + 65);
        if (SHIDWORD(v7) > v17)
          v17 = HIDWORD(v7);
        v18 = v17 - HIDWORD(v7);
        if (__OFSUB__(v17, HIDWORD(v7)))
          v18 = (v17 >> 31) + 0x7FFFFFFF;
        v19 = __OFSUB__(HIDWORD(v9), v18);
        v20 = HIDWORD(v9) - v18;
        v21 = (HIDWORD(v9) >> 31) + 0x7FFFFFFF;
        if (!v19)
          v21 = v20;
        LODWORD(v16) = v21 & ~(v21 >> 31);
        HIDWORD(v40) = v17;
        HIDWORD(v41) = v16;
        LODWORD(v15) = v17;
      }
      if (v38 != this)
      {
        v22 = *((_DWORD *)this + 67);
        v23 = *((_DWORD *)this + 65);
        v19 = __OFADD__(v23, v22);
        v24 = v23 + v22;
        v25 = (v23 >> 31) + 0x7FFFFFFF;
        if (v19)
          v24 = v25;
        v19 = __OFSUB__(v24, (_DWORD)v15);
        v26 = v24 - v15;
        v27 = (v24 >> 31) + 0x7FFFFFFF;
        if (v19)
          v26 = v27;
        if ((int)v16 >= v26)
          LODWORD(v16) = v26;
        HIDWORD(v41) = v16 & ~((int)v16 >> 31);
      }
    }
  }
  else if (v13)
  {
    v14 = *(WebCore::RenderFragmentedFlow **)(v13 + 8);
  }
  else
  {
    v14 = 0;
  }
  return WebCore::RenderFragmentedFlow::mapFromFragmentedFlowToLocal(v14, a2, (const WebCore::LayoutRect *)&v40);
}

WTF *WebCore::RenderFragmentContainer::addLayoutOverflowForBox(WTF *this, const WebCore::RenderBox *a2, const WebCore::LayoutRect *a3)
{
  void *v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  WTF *v24;

  if (*((int *)a3 + 2) >= 1 && *((_DWORD *)a3 + 3) >= 1)
  {
    v24 = 0;
    WebCore::RenderFragmentContainer::ensureOverflowForBox((uint64_t)this, a2, (uint64_t *)&v24, 0);
    this = v24;
    if (v24)
    {
      v6 = *(_DWORD *)a3;
      v7 = *((_DWORD *)a3 + 1);
      v8 = *((_DWORD *)a3 + 2);
      v9 = *((_DWORD *)a3 + 3);
      v10 = __OFADD__(*(_DWORD *)a3, v8);
      v11 = *(_DWORD *)a3 + v8;
      if (v10)
        v11 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
      v13 = *((_DWORD *)v24 + 2);
      v12 = *((_DWORD *)v24 + 3);
      v15 = *(_DWORD *)v24;
      v14 = *((_DWORD *)v24 + 1);
      v10 = __OFADD__(v14, v12);
      v16 = v14 + v12;
      if (v10)
        v16 = (v14 >> 31) + 0x7FFFFFFF;
      if ((int)v11 <= v16)
        v11 = v16;
      v10 = __OFADD__(v7, v9);
      v17 = v7 + v9;
      if (v10)
        v17 = (v7 >> 31) + 0x7FFFFFFF;
      v18 = *((_DWORD *)v24 + 4);
      v10 = __OFADD__(v13, v18);
      v19 = v13 + v18;
      if (v10)
        v19 = (v13 >> 31) + 0x7FFFFFFF;
      if ((int)v17 <= v19)
        v17 = v19;
      if ((int)v14 < v6)
        v6 = *((_DWORD *)v24 + 1);
      if ((int)v13 < (int)v7)
        v7 = *((_DWORD *)v24 + 2);
      v10 = __OFSUB__(v11, v6);
      v20 = v11 - v6;
      if (v10)
        v20 = (v11 >> 31) + 0x7FFFFFFF;
      v10 = __OFSUB__(v17, v7);
      v21 = v17 - v7;
      if (v10)
        v21 = (v17 >> 31) + 0x7FFFFFFF;
      *((_DWORD *)v24 + 3) = v20;
      *((_DWORD *)this + 4) = v21;
      v10 = __OFSUB__(v11, v20);
      v22 = v11 - v20;
      if (v10)
        v22 = (v11 >> 31) + 0x7FFFFFFF;
      v10 = __OFSUB__(v17, v21);
      v23 = v17 - v21;
      if (v10)
        v23 = (v17 >> 31) + 0x7FFFFFFF;
      *((_DWORD *)this + 1) = v22;
      *((_DWORD *)this + 2) = v23;
      if (v15 == 1)
        return (WTF *)WTF::fastFree(this, v5);
      else
        *(_DWORD *)this = v15 - 1;
    }
  }
  return this;
}

WTF *WebCore::RenderFragmentContainer::addVisualOverflowForBox(WTF *this, const WebCore::RenderBox *a2, const WebCore::LayoutRect *a3)
{
  BOOL v3;
  WTF *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  BOOL v16;
  int v17;
  signed int v18;
  signed int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  char v29;
  int v30;
  int v31;
  int v32;
  int v33;
  WTF *v34;

  v3 = *((int *)a3 + 2) < 1 || *((_DWORD *)a3 + 3) < 1;
  if (!v3)
  {
    v5 = this;
    v34 = 0;
    WebCore::RenderFragmentContainer::ensureOverflowForBox((uint64_t)this, a2, (uint64_t *)&v34, 0);
    this = v34;
    if (v34)
    {
      v7 = *((_QWORD *)v5 + 31);
      if (v7)
        v8 = *(_QWORD *)(v7 + 8);
      else
        v8 = 0;
      v10 = *(_DWORD *)a3;
      v9 = *((_DWORD *)a3 + 1);
      v12 = *((_DWORD *)a3 + 2);
      v11 = *((_DWORD *)a3 + 3);
      v13 = (unsigned __int16)*(_DWORD *)(v8 + 124) >> 13;
      v3 = v13 > 5;
      v14 = (1 << v13) & 0x2A;
      if (!v3 && v14 != 0)
      {
        v29 = *(_BYTE *)(v8 + 21);
        v30 = v10 + v12;
        if (__OFADD__(v10, v12))
          v30 = (v10 >> 31) + 0x7FFFFFFF;
        v16 = __OFSUB__(0, v30);
        v31 = -v30;
        if (v16)
          v31 = 0x7FFFFFFF;
        v32 = (v9 >> 31) + 0x7FFFFFFF;
        if (!__OFADD__(v9, v11))
          v32 = v9 + v11;
        v16 = __OFSUB__(0, v32);
        v33 = -v32;
        if (v16)
          v33 = 0x7FFFFFFF;
        if ((v29 & 0x10) != 0)
          v10 = v31;
        else
          v9 = v33;
      }
      v16 = __OFADD__(v10, v12);
      v17 = v10 + v12;
      if (v16)
        v17 = (v10 >> 31) + 0x7FFFFFFF;
      v18 = *((_DWORD *)v34 + 5);
      v19 = *((_DWORD *)v34 + 6);
      v20 = *((_DWORD *)v34 + 7);
      v21 = *((_DWORD *)v34 + 8);
      v16 = __OFADD__(v18, v20);
      v22 = v18 + v20;
      if (v16)
        v22 = (v18 >> 31) + 0x7FFFFFFF;
      if (v17 <= v22)
        v17 = v22;
      v16 = __OFADD__(v9, v11);
      v23 = v9 + v11;
      if (v16)
        v23 = (v9 >> 31) + 0x7FFFFFFF;
      v24 = v19 + v21;
      if (__OFADD__(v19, v21))
        v24 = (v19 >> 31) + 0x7FFFFFFF;
      if (v23 <= v24)
        v23 = v24;
      if (v18 < (int)v10)
        v10 = *((_DWORD *)v34 + 5);
      if (v19 < (int)v9)
        v9 = *((_DWORD *)v34 + 6);
      *((_DWORD *)v34 + 5) = v10;
      *((_DWORD *)this + 6) = v9;
      v16 = __OFSUB__(v17, v10);
      v25 = v17 - v10;
      v26 = (v17 >> 31) + 0x7FFFFFFF;
      if (v16)
        v25 = v26;
      v16 = __OFSUB__(v23, v9);
      v27 = v23 - v9;
      v28 = (v23 >> 31) + 0x7FFFFFFF;
      if (v16)
        v27 = v28;
      *((_DWORD *)this + 7) = v25;
      *((_DWORD *)this + 8) = v27;
      if (*(_DWORD *)this == 1)
        return (WTF *)WTF::fastFree(this, v6);
      else
        --*(_DWORD *)this;
    }
  }
  return this;
}

unint64_t WebCore::RenderFragmentContainer::layoutOverflowRectForBoxForPropagation(WebCore::RenderFragmentContainer *this, const WebCore::RenderBox *a2)
{
  unint64_t v4;
  void *v5;
  WebCore::RenderObject *v6;
  double v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  WebCore::RenderObject *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  signed int v17;
  BOOL v18;
  signed int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  const WebCore::RenderBox *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  int v35;
  int v37;
  int v38;
  int v39;
  int v40;
  double v41;
  float v42;
  int v43;
  double v44;
  WTF *v45[2];
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  _DWORD v54[4];

  v4 = *((_QWORD *)a2 + 20);
  v52 = 0;
  v53 = v4;
  v6 = WebCore::RenderFragmentContainer::rectFlowPortionForBox(this, a2, (const WebCore::LayoutRect *)&v52);
  v52 = (unint64_t)v6;
  v53 = (unint64_t)v5;
  v8 = *((_DWORD *)a2 + 5);
  if ((v8 & 0x10000) == 0)
  {
    v9 = (uint64_t)v5;
    v45[0] = 0;
    WebCore::RenderFragmentContainer::ensureOverflowForBox((uint64_t)this, a2, (uint64_t *)v45, 1);
    v10 = *(_QWORD *)((char *)v45[0] + 12);
    v11 = HIDWORD(v10);
    if ((int)v10 >= 1 && SHIDWORD(v10) >= 1)
    {
      v13 = *(WebCore::RenderObject **)((char *)v45[0] + 4);
      if ((int)v9 < 1 || v9 <= 0)
      {
        v52 = *(_QWORD *)((char *)v45[0] + 4);
        v53 = v10;
        v6 = v13;
      }
      else
      {
        v14 = (unint64_t)v13 >> 32;
        if ((int)v13 >= (int)v6)
          v15 = v6;
        else
          v15 = v13;
        if (SHIDWORD(v13) >= SHIDWORD(v6))
          v16 = HIDWORD(v6);
        else
          v16 = HIDWORD(v13);
        v17 = (_DWORD)v6 + v9;
        if (__OFADD__((_DWORD)v6, (_DWORD)v9))
          v17 = (v6 >> 31) + 0x7FFFFFFF;
        v18 = __OFADD__((_DWORD)v13, (_DWORD)v10);
        v19 = (_DWORD)v13 + v10;
        v20 = (v13 >> 31) + 0x7FFFFFFF;
        if (v18)
          v19 = v20;
        if (v17 > v19)
          v19 = v17;
        v21 = HIDWORD(v6) + HIDWORD(v9);
        if (__OFADD__(HIDWORD(v6), HIDWORD(v9)))
          v21 = (HIDWORD(v6) >> 31) + 0x7FFFFFFF;
        v18 = __OFADD__((_DWORD)v14, (_DWORD)v11);
        v22 = v14 + v11;
        if (v18)
          v22 = (v14 >> 31) + 0x7FFFFFFF;
        if (v21 > (int)v22)
          v22 = v21;
        v6 = (WebCore::RenderObject *)(v15 | (v16 << 32));
        v52 = (unint64_t)v6;
        v18 = __OFSUB__(v19, (_DWORD)v15);
        v23 = v19 - v15;
        v24 = (v19 >> 31) + 0x7FFFFFFF;
        if (!v18)
          v24 = v23;
        v18 = __OFSUB__(v22, (_DWORD)v16);
        v25 = v22 - v16;
        v26 = (v22 >> 31) + 0x7FFFFFFF;
        if (!v18)
          v26 = v25;
        v53 = __PAIR64__(v26, v24);
      }
    }
    if (*(_DWORD *)v45[0] == 1)
      WTF::fastFree(v45[0], v5);
    else
      --*(_DWORD *)v45[0];
    v8 = *((_DWORD *)a2 + 5);
  }
  if ((v8 & 0x20000) != 0)
  {
    v27 = a2;
    if ((*((_BYTE *)a2 + 45) & 2) != 0)
      v27 = *(const WebCore::RenderBox **)(*((_QWORD *)a2 + 4) + 8);
    v28 = *((_QWORD *)v27 + 11);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 32) + 40) + 20))
      goto LABEL_42;
    v29 = *(_QWORD **)(v28 + 40);
    if (v29[41] || v29[38] || v29[39] || v29[40])
      goto LABEL_42;
    if ((v8 & 0x900000) == 0)
      return (unint64_t)v6;
    if ((v8 & 0x100000) != 0)
    {
LABEL_42:
      WebCore::RenderLayer::currentTransform(*((WebCore::RenderLayer **)a2 + 18), v5, (uint64_t)v45);
      v6 = (WebCore::RenderObject *)WebCore::TransformationMatrix::mapRect((WebCore::TransformationMatrix *)v45, (const WebCore::LayoutRect *)&v52);
      v52 = (unint64_t)v6;
      v53 = v30;
      v8 = *((_DWORD *)a2 + 5);
    }
  }
  if ((v8 & 0x800000) != 0)
  {
    v31 = v8 & 0x1800000;
    if (v31 == 0x800000)
    {
      v32 = WebCore::RenderBoxModelObject::relativePositionOffset(a2);
      v33 = HIDWORD(v32);
    }
    else if (v31 == 25165824)
    {
      WebCore::RenderBoxModelObject::constrainingRectForStickyPosition(a2, v7);
      v54[0] = v37;
      v54[1] = v38;
      v54[2] = v39;
      v54[3] = v40;
      v46 = 0;
      v45[0] = (WTF *)off_1E34043D0;
      v45[1] = 0;
      v47 = 0u;
      v48 = 0u;
      v49 = 0u;
      v50 = 0u;
      v51 = 0u;
      WebCore::RenderBoxModelObject::computeStickyPositionConstraints(a2, (WebCore::StickyPositionViewportConstraints *)v45, (const WebCore::FloatRect *)v54);
      v41 = WebCore::StickyPositionViewportConstraints::computeStickyOffset((WebCore::StickyPositionViewportConstraints *)v45, (const WebCore::FloatRect *)v54)* 64.0;
      if (v41 > -2147483650.0)
        v43 = (int)v41;
      else
        v43 = 0x80000000;
      if (v41 < 2147483650.0)
        LODWORD(v32) = v43;
      else
        LODWORD(v32) = 0x7FFFFFFF;
      v44 = v42 * 64.0;
      if (v44 >= 2147483650.0)
      {
        LODWORD(v33) = 0x7FFFFFFF;
      }
      else if (v44 <= -2147483650.0)
      {
        LODWORD(v33) = 0x80000000;
      }
      else
      {
        LODWORD(v33) = (int)v44;
      }
    }
    else
    {
      LODWORD(v33) = 0;
      LODWORD(v32) = 0;
    }
    v34 = (v52 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__((_DWORD)v52, (_DWORD)v32))
      v34 = v52 + v32;
    v18 = __OFADD__(HIDWORD(v52), (_DWORD)v33);
    v35 = HIDWORD(v52) + v33;
    if (v18)
      v35 = (HIDWORD(v52) >> 31) + 0x7FFFFFFF;
    v52 = __PAIR64__(v35, v34);
    return __PAIR64__(v35, v34);
  }
  return (unint64_t)v6;
}

unint64_t WebCore::RenderFragmentContainer::visualOverflowRectForBoxForPropagation(WebCore::RenderFragmentContainer *this, const WebCore::RenderBox *a2)
{
  void *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  char v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  int v17;
  unsigned int v18;
  WTF *v19;

  v19 = 0;
  WebCore::RenderFragmentContainer::ensureOverflowForBox((uint64_t)this, a2, (uint64_t *)&v19, 1);
  v4 = *(_QWORD *)((char *)v19 + 20);
  v5 = *(_QWORD *)((char *)v19 + 28);
  if (*(_DWORD *)v19 == 1)
    WTF::fastFree(v19, v3);
  else
    --*(_DWORD *)v19;
  v6 = HIDWORD(v4);
  v7 = *((_QWORD *)this + 31);
  if (v7)
    v7 = *(_QWORD *)(v7 + 8);
  v8 = (unsigned __int16)*(_DWORD *)(v7 + 124) >> 13;
  v9 = v8 > 5;
  v10 = (1 << v8) & 0x2A;
  if (!v9 && v10 != 0)
  {
    v13 = *(_BYTE *)(v7 + 21);
    v14 = v4 + v5;
    if (__OFADD__((_DWORD)v4, (_DWORD)v5))
      v14 = (v4 >> 31) + 0x7FFFFFFF;
    v15 = __OFSUB__(0, v14);
    v16 = -v14;
    if (v15)
      v16 = 0x7FFFFFFF;
    v17 = HIDWORD(v4) + HIDWORD(v5);
    if (__OFADD__(HIDWORD(v4), HIDWORD(v5)))
      v17 = (HIDWORD(v4) >> 31) + 0x7FFFFFFF;
    v15 = __OFSUB__(0, v17);
    v18 = -v17;
    if (v15)
      v18 = 0x7FFFFFFF;
    if ((v13 & 0x10) != 0)
      v6 = HIDWORD(v4);
    else
      v6 = v18;
    if ((v13 & 0x10) != 0)
      LODWORD(v4) = v16;
  }
  return v4 | (v6 << 32);
}

uint64_t WebCore::RenderFragmentContainerSet::RenderFragmentContainerSet(uint64_t a1, char a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v16;
  WTF *v17;

  v8 = WebCore::RenderObject::RenderObject(a1, a2, a3, 92, 257);
  *(_QWORD *)v8 = off_1E3422BC8;
  *(_QWORD *)(v8 + 70) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_DWORD *)(v8 + 80) = 0;
  v9 = a4[1];
  a4[1] = 0;
  *(_QWORD *)(v8 + 88) = v9;
  *(_QWORD *)(v8 + 96) = a4[2];
  v10 = a4[3];
  a4[3] = 0;
  *(_QWORD *)(v8 + 104) = v10;
  v11 = a4[4];
  a4[4] = 0;
  *(_QWORD *)(v8 + 112) = v11;
  *(_QWORD *)(v8 + 120) = a4[5];
  v12 = a4[6];
  a4[6] = 0;
  *(_QWORD *)(v8 + 128) = v12;
  v13 = a4[7];
  a4[7] = 0;
  *(_QWORD *)(v8 + 136) = v13;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_QWORD *)(v8 + 192) = 0;
  *(_DWORD *)(v8 + 200) = -1;
  *(_BYTE *)(v8 + 204) &= 0xFCu;
  *(_BYTE *)(v8 + 208) = 0;
  *(_BYTE *)(v8 + 212) = 0;
  *(_DWORD *)(v8 + 240) = 0;
  *(_QWORD *)(v8 + 216) = 0;
  *(_QWORD *)(v8 + 224) = 0;
  *(_DWORD *)(v8 + 20) |= 0x40000u;
  *(_QWORD *)v8 = off_1E3424520;
  v14 = *(_QWORD *)(a5 + 8);
  if (!v14)
  {
    v14 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = a5;
    v17 = *(WTF **)(a5 + 8);
    *(_QWORD *)(a5 + 8) = v14;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
      {
        WTF::fastFree(v17, v16);
        v14 = *(_QWORD *)(a5 + 8);
        if (!v14)
          goto LABEL_3;
      }
      else
      {
        --*(_DWORD *)v17;
      }
    }
  }
  ++*(_DWORD *)v14;
LABEL_3:
  *(_QWORD *)(a1 + 248) = v14;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_QWORD *)a1 = off_1E3424D28;
  return a1;
}

unint64_t WebCore::RenderFragmentContainerSet::expandToEncompassFragmentedFlowContentsIfNeeded(WebCore::RenderFragmentContainerSet *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v2 = *((_QWORD *)this + 32);
  v3 = *((_QWORD *)this + 33);
  v4 = *((_QWORD *)this + 31);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if ((*(_BYTE *)(v5 + 21) & 0x10) == 0)
    {
LABEL_3:
      v6 = *(_QWORD *)(v5 + 192);
      if (v6)
      {
        result = *(_QWORD *)(v6 + 4);
        v8 = *(_QWORD *)(v6 + 12);
      }
      else
      {
        result = WebCore::RenderBox::flippedClientBoxRect((WebCore::RenderBox *)v5);
      }
      v9 = HIDWORD(result) + HIDWORD(v8);
      v10 = 1;
      if (__OFADD__(HIDWORD(result), HIDWORD(v8)))
        v9 = (HIDWORD(result) >> 31) + 0x7FFFFFFF;
      v11 = HIDWORD(v2);
      goto LABEL_16;
    }
  }
  else
  {
    v5 = 0;
    if ((MEMORY[0x15] & 0x10) == 0)
      goto LABEL_3;
  }
  v12 = *(_QWORD *)(v5 + 192);
  if (v12)
  {
    result = *(_QWORD *)(v12 + 4);
    v13 = *(_QWORD *)(v12 + 12);
  }
  else
  {
    result = WebCore::RenderBox::flippedClientBoxRect((WebCore::RenderBox *)v5);
  }
  v9 = result + v13;
  v10 = 0;
  if (__OFADD__((_DWORD)result, (_DWORD)v13))
    v9 = (result >> 31) + 0x7FFFFFFF;
  LODWORD(v11) = v2;
LABEL_16:
  v14 = v9 - v11;
  if (__OFSUB__(v9, (_DWORD)v11))
    v14 = (v9 >> 31) + 0x7FFFFFFF;
  if ((_DWORD)v11 != 0x3FFFFFFF)
    v9 = v14;
  v15 = v10 == 0;
  if (v10)
    v16 = v3;
  else
    v16 = v9;
  *((_QWORD *)this + 32) = v2;
  if (v15)
    v9 = HIDWORD(v3);
  *((_DWORD *)this + 66) = v16;
  *((_DWORD *)this + 67) = v9;
  return result;
}

uint64_t WebCore::RenderDeprecatedFlexibleBox::canDropAnonymousBlockChild(WebCore::RenderDeprecatedFlexibleBox *this)
{
  return 0;
}

const char *WebCore::RenderDetailsMarker::renderName(WebCore::RenderDetailsMarker *this)
{
  return "RenderDetailsMarker";
}

uint64_t WebCore::RenderElement::startAnimation(WebCore::RenderElement *this, double a2, const WebCore::Animation *a3, const WebCore::BlendingKeyframes *a4)
{
  return 0;
}

const char *WebCore::RenderEmbeddedObject::renderName(WebCore::RenderEmbeddedObject *this)
{
  return "RenderEmbeddedObject";
}

uint64_t WebCore::RenderReplaced::canHaveChildren(WebCore::RenderReplaced *this)
{
  return 0;
}

const char *WebCore::RenderFileUploadControl::renderName(WebCore::RenderFileUploadControl *this)
{
  return "RenderFileUploadControl";
}

uint64_t WebCore::RenderFlexibleBox::isFlexibleBoxImpl(WebCore::RenderFlexibleBox *this)
{
  return 0;
}

const char *WebCore::RenderFragmentContainer::renderName(WebCore::RenderFragmentContainer *this)
{
  return "RenderFragmentContainer";
}

uint64_t WebCore::RenderFragmentContainer::canHaveChildren(WebCore::RenderFragmentContainer *this)
{
  return 0;
}

uint64_t WebCore::RenderFragmentContainer::canHaveGeneratedChildren(WebCore::RenderFragmentContainer *this)
{
  return 1;
}

uint64_t WebCore::RenderFragmentContainer::isRenderFragmentContainerSet(WebCore::RenderFragmentContainer *this)
{
  return 0;
}

uint64_t WebCore::RenderFragmentContainerSet::isRenderFragmentContainerSet(WebCore::RenderFragmentContainerSet *this)
{
  return 1;
}

_QWORD *WTF::Vector<WebCore::LayoutSize,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::LayoutSize>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)WTF::Vector<WebCore::BidiEmbedding,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

_QWORD *WTF::copyToVector<WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>>(_QWORD *result, int **a2)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  int *i;
  int *v7;
  unsigned int v8;
  int v9;
  _QWORD *v11;

  *result = 0;
  result[1] = 0;
  if (*a2)
  {
    v2 = *(*a2 - 3);
    if ((_DWORD)v2)
    {
      v11 = result;
      if (v2 >> 30)
      {
        __break(0xC471u);
      }
      else
      {
        result = (_QWORD *)WTF::fastMalloc((WTF *)(4 * v2));
        *((_DWORD *)v11 + 2) = v2;
        *v11 = result;
        v3 = *a2;
        if (*a2 && *(v3 - 3))
        {
          v4 = *(v3 - 1);
          if ((_DWORD)v4)
          {
            v5 = 4 * v4;
            for (i = *a2; (*i + 1) <= 1; ++i)
            {
              v5 -= 4;
              if (!v5)
                return result;
            }
          }
          else
          {
            i = *a2;
          }
          v7 = &v3[v4];
          if (i != v7)
          {
            v8 = 0;
            v9 = *i;
LABEL_15:
            *((_DWORD *)result + v8++) = v9;
            while (++i != v7)
            {
              v9 = *i;
              if ((*i + 1) > 1)
              {
                if (i != v7)
                  goto LABEL_15;
                break;
              }
            }
            *((_DWORD *)v11 + 3) = v8;
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::lineCountFor(WebCore *this, const WebCore::RenderBlockFlow *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *((_DWORD *)this + 5);
  if ((v3 & 0x40000) != 0)
    return (int)WebCore::RenderBlockFlow::lineCount(this);
  v4 = *((unsigned int *)this + 16);
  if (!(v4 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)))
    return 0;
  v5 = *(_QWORD *)((v4 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
  if (!v5)
    return 0;
  while ((*(_BYTE *)(v5 + 52) & 7) != 1)
  {
    v6 = *(unsigned int *)(v5 + 47);
    if (!(v6 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32)))
      return 0;
    v7 = 0;
    v5 = *(_QWORD *)((v6 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32)) + 8);
    if (!v5)
      return v7;
  }
  v7 = 0;
  if ((v3 & 0x800) != 0)
    goto LABEL_15;
LABEL_12:
  if ((v3 & 0x1800000) != 0x1000000 && !*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8) + 16))
    v7 += WebCore::lineCountFor((WebCore *)v5, a2);
LABEL_15:
  while (1)
  {
    v9 = *(unsigned int *)(v5 + 47);
    if (!(v9 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32)))
      return v7;
    v5 = *(_QWORD *)((v9 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32)) + 8);
    if (!v5)
      return v7;
    if ((*(_BYTE *)(v5 + 52) & 7) == 1)
    {
      v3 = *((_DWORD *)this + 5);
      if ((v3 & 0x800) == 0)
        goto LABEL_12;
    }
  }
}

uint64_t WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>::operator=(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;

  if (a2)
    ++*(_DWORD *)(a2 + 8);
  v2 = *(_QWORD *)result;
  *(_QWORD *)result = a2;
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 8);
    if (v3)
    {
      *(_DWORD *)(v2 + 8) = v3 - 1;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

void WebCore::RenderFlexibleBox::LineState::~LineState(WebCore::RenderFlexibleBox::LineState *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t i;
  uint64_t v6;
  int v7;
  WTF *v8;
  unsigned int v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  WTF **v14;
  WTF *v15;

  v3 = *((unsigned int *)this + 11);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)*((_QWORD *)this + 4);
    for (i = 40 * v3; i; i -= 40)
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        v7 = *(_DWORD *)(v6 + 16);
        if (!v7)
        {
          __break(0xC471u);
          return;
        }
        *(_DWORD *)(v6 + 16) = v7 - 1;
      }
      v4 += 5;
    }
  }
  v8 = (WTF *)*((_QWORD *)this + 4);
  if (v8)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v8, a2);
  }
  if (*((_BYTE *)this + 24))
  {
    v9 = *((_DWORD *)this + 5);
    v10 = (WTF *)*((_QWORD *)this + 1);
    if (v9)
    {
      v11 = (WTF *)((char *)v10 + 24 * v9);
      do
      {
        v12 = *((_QWORD *)v10 + 1);
        if (v12)
        {
          v13 = *(unsigned int *)(v12 - 4);
          if ((_DWORD)v13)
          {
            v14 = (WTF **)*((_QWORD *)v10 + 1);
            do
            {
              v15 = *v14;
              if (*v14 != (WTF *)-1)
              {
                *v14 = 0;
                if (v15)
                {
                  if (*(_DWORD *)v15 == 1)
                    WTF::fastFree(v15, a2);
                  else
                    --*(_DWORD *)v15;
                }
              }
              ++v14;
              --v13;
            }
            while (v13);
          }
          WTF::fastFree((WTF *)(v12 - 16), a2);
        }
        v10 = (WTF *)((char *)v10 + 24);
      }
      while (v10 != v11);
      v10 = (WTF *)*((_QWORD *)this + 1);
    }
    if (v10)
    {
      *((_QWORD *)this + 1) = 0;
      *((_DWORD *)this + 4) = 0;
      WTF::fastFree(v10, a2);
    }
  }
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(WTF **a1, void *a2)
{
  uint64_t v3;
  WTF **v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WTF *)-1)
      {
        v6 = v4[1];
        v4[1] = 0;
        if (v6)
        {
          v7 = (WTF *)*((_QWORD *)v6 + 2);
          *((_QWORD *)v6 + 2) = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 1)
              WTF::fastFree(v7, a2);
            else
              --*(_DWORD *)v7;
          }
          WTF::fastFree(v6, a2);
          v5 = *v4;
        }
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 1)
            WTF::fastFree(v5, a2);
          else
            --*(_DWORD *)v5;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::Vector<WebCore::LayoutRect,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  WTF *v13;
  __int128 v14;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::LayoutRect,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= (unint64_t)a2)
    v9 = (unint64_t)a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 9)
  {
    v11 = (_OWORD *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 8;
    goto LABEL_13;
  }
  if (!(v9 >> 28))
  {
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_13:
    if ((_DWORD)v10)
    {
      v12 = 16 * v10;
      v13 = v5;
      do
      {
        v14 = *(_OWORD *)v13;
        v13 = (WTF *)((char *)v13 + 16);
        *v11++ = v14;
        v12 -= 16;
      }
      while (v12);
    }
    if ((WTF *)(v4 + 16) != v5 && v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::LayoutRect,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  __int128 v11;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= (unint64_t)a2)
    v5 = (unint64_t)a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v6 = result;
    v7 = *(WTF **)result;
    v8 = *(unsigned int *)(result + 12);
    if (v5 < 9)
    {
      result += 16;
      *(_QWORD *)v6 = v6 + 16;
      *(_DWORD *)(v6 + 8) = 8;
    }
    else
    {
      if (v5 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x1963BE314);
      }
      result = WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(v6 + 8) = v5;
      *(_QWORD *)v6 = result;
    }
    if ((_DWORD)v8)
    {
      v9 = 16 * v8;
      v10 = v7;
      do
      {
        v11 = *(_OWORD *)v10;
        v10 = (WTF *)((char *)v10 + 16);
        *(_OWORD *)result = v11;
        result += 16;
        v9 -= 16;
      }
      while (v9);
    }
    if ((WTF *)(v6 + 16) != v7 && v7)
    {
      if (*(WTF **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      return WTF::fastFree(v7, a2);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF *v5;
  WTF::StringImpl ***v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF *v9;
  void *v10;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = *((unsigned int *)v3 + 5);
      if ((_DWORD)v4)
      {
        v6 = (WTF::StringImpl ***)*((_QWORD *)v3 + 1);
        v7 = 8 * v4;
        do
        {
          v8 = *v6;
          *v6 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v8);
              WTF::fastFree(v9, v10);
            }
            else
            {
              --*(_DWORD *)v8;
            }
          }
          ++v6;
          v7 -= 8;
        }
        while (v7);
      }
      v5 = (WTF *)*((_QWORD *)v3 + 1);
      if (v5)
      {
        *((_QWORD *)v3 + 1) = 0;
        *((_DWORD *)v3 + 4) = 0;
        WTF::fastFree(v5, a2);
      }
      result = *(WTF::StringImpl **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 24);
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>(uint64_t *a1, void *a2)
{
  uint64_t v2;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t result;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  for (i = 1; ; v8 = (v8 + i++) & v4)
  {
    result = *(_QWORD *)(v2 + 16 * v8);
    if (result != -1)
    {
      if (!result)
        return result;
      if (*(void **)(result + 8) == a2)
        break;
    }
  }
  if (v8 == *(_DWORD *)(v2 - 4))
    return 0;
  v11 = (_QWORD *)(v2 + 16 * v8);
  *v11 = 0;
  if (*(_DWORD *)result == 1)
    WTF::fastFree((WTF *)result, a2);
  else
    --*(_DWORD *)result;
  *v11 = -1;
  ++*(_DWORD *)(*a1 - 16);
  v12 = *a1;
  if (*a1)
    v13 = *(_DWORD *)(v12 - 12) - 1;
  else
    v13 = -1;
  *(_DWORD *)(v12 - 12) = v13;
  v14 = *a1;
  if (*a1)
  {
    v15 = 6 * *(_DWORD *)(v14 - 12);
    v16 = *(_DWORD *)(v14 - 4);
    if (v15 < v16 && v16 >= 9)
      WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::LayoutUnit>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::LayoutUnit>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1, v16 >> 1, 0);
  }
  return 1;
}

uint64_t _ZN3WTF7HashSetINS_3RefINS_23SingleThreadWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetIKN7WebCore9RenderBoxES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSL_(uint64_t *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(unsigned int *)(v2 - 4);
  if ((_DWORD)v3)
  {
    v5 = 0;
    v6 = v3 - 1;
    do
    {
      v7 = v2 + 8 * v6;
      if ((unint64_t)(*(_QWORD *)v7 + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)v7 + 8))
      {
        v20 = a1;
        v17 = v5;
        v16 = v2;
        v18 = v6;
        WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket((WTF **)(v2 + 8 * v6), a2);
        v6 = v18;
        v2 = v16;
        a1 = v20;
        v5 = v17 + 1;
      }
    }
    while ((unint64_t)v6--);
    v9 = *a1;
    v3 = v5 != 0;
    if (v5)
    {
      v13 = v5;
      *(_DWORD *)(v9 - 16) += v5;
      v14 = *a1;
      if (*a1)
        v15 = *(_DWORD *)(v14 - 12);
      else
        v15 = 0;
      *(_DWORD *)(v14 - 12) = v15 - v13;
      v9 = *a1;
    }
    if (v9)
    {
      v10 = *(_DWORD *)(v9 - 4);
      v11 = 6 * *(_DWORD *)(v9 - 12);
      if (v10 >= 9 && v11 < v10)
      {
        v19 = v3;
        WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize(a1);
        return v19;
      }
    }
  }
  return v3;
}

uint64_t WebCore::RenderFlexibleBox::LineState::LineState(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)result = *(_QWORD *)a2;
  *(_BYTE *)(result + 8) = 0;
  *(_BYTE *)(result + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    v2 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(result + 8) = v2;
    LODWORD(v2) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    *(_DWORD *)(result + 16) = v2;
    LODWORD(v2) = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    *(_DWORD *)(result + 20) = v2;
    *(_BYTE *)(result + 24) = 1;
  }
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(result + 32) = v3;
  LODWORD(v3) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(result + 40) = v3;
  LODWORD(v3) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_DWORD *)(result + 44) = v3;
  return result;
}

WTF **WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  WTF **v11;
  uint64_t v12;
  WTF **v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  WTF *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  WTF **v27;
  WTF *v28;
  WTF *v29;
  WTF *v30;
  WTF *v31;
  uint64_t v32;
  WTF *v33;
  WTF *v34;
  WTF *v35;
  WTF *v36;
  WTF **result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = v6;
    do
    {
      v13 = (WTF **)(v5 + 16 * v10);
      v14 = *v13;
      if (*v13 != (WTF *)-1)
      {
        if (v14)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = ~(*((_QWORD *)v14 + 1) << 32) + *((_QWORD *)v14 + 1);
          v21 = (v20 ^ (v20 >> 22)) + ~((v20 ^ (v20 >> 22)) << 13);
          v22 = (9 * (v21 ^ (v21 >> 8))) ^ ((9 * (v21 ^ (v21 >> 8))) >> 15);
          v23 = v19 & (((v22 + ~(v22 << 27)) >> 31) ^ (v22 + ~((_DWORD)v22 << 27)));
          v24 = 1;
          do
          {
            v25 = v23;
            v26 = *(_QWORD *)(v18 + 16 * v23);
            v23 = (v23 + v24++) & v19;
          }
          while (v26);
          v27 = (WTF **)(v18 + 16 * v25);
          v28 = v27[1];
          v27[1] = 0;
          if (v28)
          {
            v29 = (WTF *)*((_QWORD *)v28 + 2);
            *((_QWORD *)v28 + 2) = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 1)
                WTF::fastFree(v29, v9);
              else
                --*(_DWORD *)v29;
            }
            WTF::fastFree(v28, v9);
            v30 = *v27;
            *v27 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 1)
                WTF::fastFree(v30, v9);
              else
                --*(_DWORD *)v30;
            }
          }
          else
          {
            *v27 = 0;
          }
          v31 = *v13;
          *v13 = 0;
          *v27 = v31;
          v32 = v5 + 16 * v10;
          v33 = *(WTF **)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          v27[1] = v33;
          v34 = *(WTF **)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          if (v34)
          {
            v35 = (WTF *)*((_QWORD *)v34 + 2);
            *((_QWORD *)v34 + 2) = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 1)
                WTF::fastFree(v35, v9);
              else
                --*(_DWORD *)v35;
            }
            WTF::fastFree(v34, v9);
          }
          v36 = *v13;
          *v13 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 1)
              WTF::fastFree(v36, v9);
            else
              --*(_DWORD *)v36;
          }
          if (v13 == a3)
            v11 = v27;
        }
        else
        {
          v15 = v5 + 16 * v10;
          v16 = *(WTF **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            v17 = (WTF *)*((_QWORD *)v16 + 2);
            *((_QWORD *)v16 + 2) = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 1)
                WTF::fastFree(v17, v9);
              else
                --*(_DWORD *)v17;
            }
            WTF::fastFree(v16, v9);
            v14 = *v13;
          }
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 1)
              WTF::fastFree(v14, v9);
            else
              --*(_DWORD *)v14;
          }
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

WTF **WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::remove(uint64_t *a1, WTF **a2)
{
  WTF **result;
  void *v5;
  WTF *v6;
  WTF *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;

  result = (WTF **)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket(a2, a2);
  v6 = a2[1];
  a2[1] = 0;
  if (v6)
  {
    v7 = (WTF *)*((_QWORD *)v6 + 2);
    *((_QWORD *)v6 + 2) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
        WTF::fastFree(v7, v5);
      else
        --*(_DWORD *)v7;
    }
    result = (WTF **)WTF::fastFree(v6, v5);
  }
  ++*(_DWORD *)(*a1 - 16);
  v8 = *a1;
  if (*a1)
    v9 = *(_DWORD *)(v8 - 12) - 1;
  else
    v9 = -1;
  *(_DWORD *)(v8 - 12) = v9;
  v10 = *a1;
  if (*a1)
  {
    v11 = 6 * *(_DWORD *)(v10 - 12);
    v12 = *(_DWORD *)(v10 - 4);
    if (v11 < v12 && v12 >= 9)
      return WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1, v12 >> 1, 0);
  }
  return result;
}

void WebCore::RenderFragmentedFlow::~RenderFragmentedFlow(WebCore::RenderFragmentedFlow *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF *i;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WTF **v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  WTF **v15;
  WTF *v16;
  WTF *v17;
  WTF **v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  WTF **v22;
  WTF *v23;
  WTF *v24;
  uint64_t v25;
  WTF *v26;
  WTF *v27;

  *(_QWORD *)this = off_1E34255F8;
  v3 = (WTF *)*((_QWORD *)this + 39);
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = *(WTF **)v3;
    }
    while (v3);
    do
    {
      v5 = v4;
      v4 = (WTF *)*((_QWORD *)v4 + 2);
      if (v4)
      {
        if (*(WTF **)v4 == v5)
        {
          for (i = (WTF *)*((_QWORD *)v4 + 1); i; i = *(WTF **)i)
            v4 = i;
        }
      }
      v7 = (WTF *)*((_QWORD *)v5 + 5);
      *((_QWORD *)v5 + 5) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
          WTF::fastFree(v7, a2);
        else
          --*(_DWORD *)v7;
      }
      WTF::fastFree(v5, a2);
    }
    while (v4);
    *((_QWORD *)this + 39) = 0;
  }
  v8 = *((_QWORD *)this + 38);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      v10 = (WTF **)*((_QWORD *)this + 38);
      do
      {
        v11 = *v10;
        if (*v10 != (WTF *)-1)
        {
          v12 = v10[1];
          v10[1] = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 1)
            {
              WTF::fastFree(v12, a2);
              v11 = *v10;
            }
            else
            {
              --*(_DWORD *)v12;
            }
          }
          *v10 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 1)
              WTF::fastFree(v11, a2);
            else
              --*(_DWORD *)v11;
          }
        }
        v10 += 2;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
  v13 = *((_QWORD *)this + 37);
  if (v13)
  {
    v14 = *(unsigned int *)(v13 - 4);
    if ((_DWORD)v14)
    {
      v15 = (WTF **)*((_QWORD *)this + 37);
      do
      {
        v16 = *v15;
        if (*v15 != (WTF *)-1)
        {
          v17 = v15[1];
          v15[1] = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 1)
            {
              WTF::fastFree(v17, a2);
              v16 = *v15;
            }
            else
            {
              --*(_DWORD *)v17;
            }
          }
          *v15 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 1)
              WTF::fastFree(v16, a2);
            else
              --*(_DWORD *)v16;
          }
        }
        v15 += 2;
        --v14;
      }
      while (v14);
    }
    WTF::fastFree((WTF *)(v13 - 16), a2);
  }
  v18 = (WTF **)*((_QWORD *)this + 36);
  if (v18)
    WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::RenderFragmentedFlow::RenderFragmentContainerRange>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::RenderFragmentedFlow::RenderFragmentContainerRange>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::RenderFragmentedFlow::RenderFragmentContainerRange,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::RenderFragmentedFlow::RenderFragmentContainerRange>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v18, a2);
  v19 = (WTF *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v19)
  {
    v20 = *(_QWORD *)v19;
    if (*(_QWORD *)v19)
    {
      v21 = *(unsigned int *)(v20 - 4);
      if ((_DWORD)v21)
      {
        v22 = (WTF **)(v20 + 8);
        do
        {
          if (*(v22 - 1) != (WTF *)-1)
          {
            v23 = *v22;
            *v22 = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 1)
                WTF::fastFree(v23, a2);
              else
                --*(_DWORD *)v23;
            }
          }
          v22 += 2;
          --v21;
        }
        while (v21);
      }
      WTF::fastFree((WTF *)(v20 - 16), a2);
    }
    WTF::fastFree(v19, a2);
  }
  v24 = (WTF *)*((_QWORD *)this + 32);
  while (v24)
  {
    v26 = v24;
    v24 = (WTF *)*((_QWORD *)v24 + 2);
    v27 = *(WTF **)v26;
    *(_QWORD *)v26 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 1)
        WTF::fastFree(v27, a2);
      else
        --*(_DWORD *)v27;
    }
    WTF::fastFree(v26, a2);
  }
  v25 = *((_QWORD *)this + 31);
  if (v25)
    WTF::fastFree((WTF *)(v25 - 16), a2);
  WebCore::RenderBlockFlow::~RenderBlockFlow(this, a2);
}

void WebCore::RenderFragmentedFlow::styleDidChange(WebCore::RenderObject *a1, WTF::StringImpl *a2, uint64_t a3)
{
  WebCore::RenderBlockFlow::styleDidChange((uint64_t)a1, a2, a3);
  if (a3)
  {
    if (((*((_DWORD *)a1 + 31) ^ *(_DWORD *)(a3 + 44)) & 0xE000) != 0)
      WebCore::RenderFragmentedFlow::invalidateFragments(a1, (void *)1);
  }
}

void WebCore::RenderFragmentedFlow::invalidateFragments(WebCore::RenderObject *this, void *a2)
{
  int v2;
  WTF **v4;
  WTF **v5;
  uint64_t v6;
  WTF **v7;
  WTF *v8;
  WTF *v9;
  WTF **v10;
  uint64_t v11;
  WTF **v12;
  WTF *v13;
  WTF *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  WTF **v18;
  WTF *v19;
  int v20;
  int v21;
  WebCore::RenderElement *v22;
  uint64_t v23;
  int v24;

  if ((*((_BYTE *)this + 328) & 1) == 0)
  {
    v2 = (int)a2;
    v4 = (WTF **)*((_QWORD *)this + 36);
    if (v4)
    {
      *((_QWORD *)this + 36) = 0;
      WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::RenderFragmentedFlow::RenderFragmentContainerRange>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::RenderFragmentedFlow::RenderFragmentContainerRange>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::RenderFragmentedFlow::RenderFragmentContainerRange,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::RenderFragmentedFlow::RenderFragmentContainerRange>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v4, a2);
    }
    v5 = (WTF **)*((_QWORD *)this + 37);
    if (v5)
    {
      *((_QWORD *)this + 37) = 0;
      v6 = *((unsigned int *)v5 - 1);
      if ((_DWORD)v6)
      {
        v7 = v5;
        do
        {
          v8 = *v7;
          if (*v7 != (WTF *)-1)
          {
            v9 = v7[1];
            v7[1] = 0;
            if (v9)
            {
              if (*(_DWORD *)v9 == 1)
              {
                WTF::fastFree(v9, a2);
                v8 = *v7;
              }
              else
              {
                --*(_DWORD *)v9;
              }
            }
            *v7 = 0;
            if (v8)
            {
              if (*(_DWORD *)v8 == 1)
                WTF::fastFree(v8, a2);
              else
                --*(_DWORD *)v8;
            }
          }
          v7 += 2;
          --v6;
        }
        while (v6);
      }
      WTF::fastFree((WTF *)(v5 - 2), a2);
    }
    v10 = (WTF **)*((_QWORD *)this + 38);
    if (v10)
    {
      *((_QWORD *)this + 38) = 0;
      v11 = *((unsigned int *)v10 - 1);
      if ((_DWORD)v11)
      {
        v12 = v10;
        do
        {
          v13 = *v12;
          if (*v12 != (WTF *)-1)
          {
            v14 = v12[1];
            v12[1] = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 1)
              {
                WTF::fastFree(v14, a2);
                v13 = *v12;
              }
              else
              {
                --*(_DWORD *)v14;
              }
            }
            *v12 = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 1)
                WTF::fastFree(v13, a2);
              else
                --*(_DWORD *)v13;
            }
          }
          v12 += 2;
          --v11;
        }
        while (v11);
      }
      WTF::fastFree((WTF *)(v10 - 2), a2);
    }
    v15 = (uint64_t *)*((_QWORD *)this + 35);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        *v15 = 0;
        v17 = *(unsigned int *)(v16 - 4);
        if ((_DWORD)v17)
        {
          v18 = (WTF **)(v16 + 8);
          do
          {
            if (*(v18 - 1) != (WTF *)-1)
            {
              v19 = *v18;
              *v18 = 0;
              if (v19)
              {
                if (*(_DWORD *)v19 == 1)
                  WTF::fastFree(v19, a2);
                else
                  --*(_DWORD *)v19;
              }
            }
            v18 += 2;
            --v17;
          }
          while (v17);
        }
        WTF::fastFree((WTF *)(v16 - 16), a2);
      }
    }
    v20 = *((_DWORD *)this + 5);
    if ((v20 & 8) == 0)
    {
      v21 = v20 | 8;
      *((_DWORD *)this + 5) = v21;
      if (v2 == 1)
      {
        v22 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
        WebCore::RenderObject::scheduleLayout(this, v22);
        v21 = *((_DWORD *)this + 5);
      }
      if ((v21 & 0x8000) != 0)
      {
        if ((*((_BYTE *)this + 45) & 0x10) == 0
          || ((v23 = *((_QWORD *)this + 18)) == 0
            ? (v24 = MEMORY[8])
            : (v24 = *(_DWORD *)(v23 + 8) + 1, *(_DWORD *)(v23 + 8) = v24),
              *(_QWORD *)(v23 + 24) = *(_QWORD *)(v23 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000,
              !v24))
        {
          __break(0xC471u);
          JUMPOUT(0x1963BEF84);
        }
        *(_DWORD *)(v23 + 8) = v24 - 1;
      }
    }
    *((_BYTE *)this + 328) |= 1u;
  }
}

void WebCore::RenderFragmentedFlow::removeFlowChildInfo(WebCore::RenderFragmentedFlow *this, WebCore::RenderElement *a2)
{
  int v4;
  uint64_t *v5;
  void *v6;
  WebCore::RenderFragmentContainer *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  _QWORD *v28;
  WTF *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t *v50;
  WTF *v51;
  uint64_t v52;
  WTF *v53;
  uint64_t *v54;
  WebCore::RenderFragmentContainer *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  int j;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  int k;
  uint64_t v74;
  WebCore::RenderElement **v75;
  _QWORD *v76;
  uint64_t v77;
  WTF **v78;
  WTF *v79;
  WTF *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  int v87;
  int v88;
  WebCore::RenderFragmentContainer *v89;
  WebCore::RenderFragmentContainer *v90;

  if ((*((_BYTE *)a2 + 52) & 7) == 1)
  {
    v4 = *((_DWORD *)a2 + 4) + 1;
    *((_DWORD *)a2 + 4) = v4;
    if (*((_QWORD *)this + 35))
    {
      if (*((_DWORD *)a2 + 60) == 2)
      {
        v17 = *((_QWORD *)a2 + 29);
        if (v17)
        {
          v18 = *(_QWORD **)(v17 + 8);
          if (v18)
          {
            if (!(*(unsigned int (**)(_QWORD))(*v18 + 88))(*(_QWORD *)(v17 + 8)))
              goto LABEL_117;
            while (1)
            {
              v19 = (uint64_t *)*((_QWORD *)this + 35);
              v20 = *v19;
              if (*v19)
              {
                v21 = *(_DWORD *)(v20 - 8);
                v22 = ((unint64_t)v18 + ~((_QWORD)v18 << 32)) ^ (((unint64_t)v18 + ~((_QWORD)v18 << 32)) >> 22);
                v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
                v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
                v25 = v21 & ((v24 >> 31) ^ v24);
                v26 = *(_QWORD **)(v20 + 16 * v25);
                if (v26 != v18)
                {
                  v27 = 1;
                  while (v26)
                  {
                    v25 = ((_DWORD)v25 + v27) & v21;
                    v26 = *(_QWORD **)(v20 + 16 * v25);
                    ++v27;
                    if (v26 == v18)
                      goto LABEL_28;
                  }
                  v25 = *(unsigned int *)(v20 - 4);
                }
LABEL_28:
                if (v25 != *(_DWORD *)(v20 - 4))
                {
                  v28 = (_QWORD *)(v20 + 16 * v25);
                  v29 = (WTF *)v28[1];
                  *v28 = -1;
                  v28[1] = 0;
                  if (v29)
                  {
                    if (*(_DWORD *)v29 == 1)
                      WTF::fastFree(v29, a2);
                    else
                      --*(_DWORD *)v29;
                  }
                  ++*(_DWORD *)(*v19 - 16);
                  v30 = *v19;
                  if (*v19)
                    v31 = *(_DWORD *)(v30 - 12) - 1;
                  else
                    v31 = -1;
                  *(_DWORD *)(v30 - 12) = v31;
                  v32 = *v19;
                  if (*v19)
                  {
                    v88 = *(_DWORD *)(v32 - 12);
                    v33 = *(unsigned int *)(v32 - 4);
                    if (6 * v88 < v33 && v33 >= 9)
                    {
                      v35 = WTF::fastMalloc((WTF *)(16 * (v33 >> 1) + 16));
                      bzero((void *)(v35 + 16), 16 * (v33 >> 1));
                      v37 = 0;
                      *v19 = v35 + 16;
                      *(_DWORD *)(v35 + 12) = v33 >> 1;
                      *(_DWORD *)(*v19 - 8) = (v33 >> 1) - 1;
                      *(_DWORD *)(*v19 - 16) = 0;
                      *(_DWORD *)(*v19 - 12) = v88;
                      do
                      {
                        v38 = (uint64_t *)(v32 + 16 * v37);
                        v39 = *v38;
                        if (*v38 != -1)
                        {
                          if (v39)
                          {
                            v41 = *v19;
                            if (*v19)
                              v42 = *(_DWORD *)(v41 - 8);
                            else
                              v42 = 0;
                            v43 = (~(v39 << 32) + v39) ^ ((unint64_t)(~(v39 << 32) + v39) >> 22);
                            v44 = 9 * ((v43 + ~(v43 << 13)) ^ ((v43 + ~(v43 << 13)) >> 8));
                            v45 = (v44 ^ (v44 >> 15)) + ~((v44 ^ (v44 >> 15)) << 27);
                            v46 = v42 & ((v45 >> 31) ^ v45);
                            v47 = 1;
                            do
                            {
                              v48 = v46;
                              v49 = *(_QWORD *)(v41 + 16 * v46);
                              v46 = (v46 + v47++) & v42;
                            }
                            while (v49);
                            v50 = (uint64_t *)(v41 + 16 * v48);
                            v51 = (WTF *)v50[1];
                            v50[1] = 0;
                            if (v51)
                            {
                              if (*(_DWORD *)v51 == 1)
                                WTF::fastFree(v51, v36);
                              else
                                --*(_DWORD *)v51;
                            }
                            *v50 = *v38;
                            v40 = v32 + 16 * v37;
                            v52 = *(_QWORD *)(v40 + 8);
                            *(_QWORD *)(v40 + 8) = 0;
                            v50[1] = v52;
                          }
                          else
                          {
                            v40 = v32 + 16 * v37;
                          }
                          v53 = *(WTF **)(v40 + 8);
                          *(_QWORD *)(v40 + 8) = 0;
                          if (v53)
                          {
                            if (*(_DWORD *)v53 == 1)
                              WTF::fastFree(v53, v36);
                            else
                              --*(_DWORD *)v53;
                          }
                        }
                        ++v37;
                      }
                      while (v37 != v33);
                      WTF::fastFree((WTF *)(v32 - 16), v36);
                    }
                  }
                }
              }
              v18 = (_QWORD *)v18[12];
              if (!v18)
                break;
              if (((*(uint64_t (**)(_QWORD *))(*v18 + 88))(v18) & 1) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x1963BF690);
              }
            }
            v4 = *((_DWORD *)a2 + 4);
          }
        }
      }
    }
    if (v4)
    {
      *((_DWORD *)a2 + 4) = v4 - 1;
      goto LABEL_6;
    }
LABEL_117:
    __break(0xC471u);
    JUMPOUT(0x1963BF648);
  }
LABEL_6:
  if ((*((_BYTE *)a2 + 45) & 4) != 0)
  {
    ++*((_DWORD *)a2 + 4);
    v5 = (uint64_t *)((char *)this + 248);
    if ((WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)this + 31, a2) & 1) == 0&& (*((_BYTE *)this + 328) & 1) == 0)
    {
      v89 = 0;
      v90 = 0;
      if (WebCore::RenderFragmentedFlow::getFragmentRangeForBox(this, a2, &v90, &v89))
      {
        v7 = v90;
        ++*((_DWORD *)this + 68);
        v8 = *((_QWORD *)v7 + 1);
        if (v8)
        {
          if (*(_QWORD *)(v8 + 8))
          {
            v9 = *v5;
            if (*v5)
            {
              v10 = *(_DWORD *)(v9 - 8);
              v11 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
              v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
              v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
              v14 = v10 & ((v13 >> 31) ^ v13);
              for (i = 1; ; ++i)
              {
                v16 = *(_QWORD **)(v9 + 8 * v14);
                if (!v16)
                  break;
                if (v16 != (_QWORD *)-1 && *v16 == v8)
                {
                  if (v14 != *(_DWORD *)(v9 - 4))
                  {
                    while (1)
                    {
                      v54 = *(uint64_t **)(*v16 + 8);
                      if (v54)
                        break;
                      v16 = (_QWORD *)v16[2];
                      if (!v16)
                        goto LABEL_83;
                    }
                    v55 = v89;
                    v56 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
                    v57 = 9 * ((v56 + ~(v56 << 13)) ^ ((v56 + ~(v56 << 13)) >> 8));
                    v58 = (v57 ^ (v57 >> 15)) + ~((v57 ^ (v57 >> 15)) << 27);
                    v59 = (v58 >> 31) ^ v58;
LABEL_70:
                    v60 = v54[34];
                    if (v60)
                    {
                      v61 = *(_DWORD *)(v60 - 8);
                      v62 = v61 & v59;
                      for (j = 1; ; ++j)
                      {
                        v64 = v62;
                        v65 = *(_QWORD *)(v60 + 16 * v62);
                        if (v65 != -1)
                        {
                          if (!v65)
                            goto LABEL_78;
                          if (*(WebCore::RenderElement **)(v65 + 8) == a2)
                            break;
                        }
                        v62 = (v64 + j) & v61;
                      }
                      if ((_DWORD)v64 != *(_DWORD *)(v60 - 4))
                        WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::remove(v54 + 34, (WTF **)(v60 + 16 * v64));
                    }
LABEL_78:
                    if (v54 != (uint64_t *)v55)
                    {
                      while (1)
                      {
                        v16 = (_QWORD *)v16[2];
                        if (!v16)
                          break;
                        v54 = *(uint64_t **)(*v16 + 8);
                        if (v54)
                        {
                          ++*((_DWORD *)this + 68);
                          goto LABEL_70;
                        }
                      }
                      ++*((_DWORD *)this + 68);
                    }
                  }
                  break;
                }
                v14 = (v14 + i) & v10;
              }
            }
          }
        }
      }
LABEL_83:
      v66 = *((_QWORD *)this + 36);
      if (v66)
      {
        v67 = (uint64_t *)((char *)this + 288);
        v68 = *(_DWORD *)(v66 - 8);
        v69 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
        v70 = 9 * ((v69 + ~(v69 << 13)) ^ ((v69 + ~(v69 << 13)) >> 8));
        v71 = (v70 ^ (v70 >> 15)) + ~((v70 ^ (v70 >> 15)) << 27);
        v72 = v68 & ((v71 >> 31) ^ v71);
        for (k = 1; ; ++k)
        {
          v74 = v72;
          v75 = *(WebCore::RenderElement ***)(v66 + 32 * v72);
          if (v75 != (WebCore::RenderElement **)-1)
          {
            if (!v75)
              goto LABEL_108;
            if (v75[1] == a2)
              break;
          }
          v72 = (v72 + k) & v68;
        }
        if (v72 != *(_DWORD *)(v66 - 4))
        {
          v76 = (_QWORD *)(v66 + 32 * v72);
          *v76 = 0;
          if (*(_DWORD *)v75 == 1)
            WTF::fastFree((WTF *)v75, v6);
          else
            --*(_DWORD *)v75;
          *v76 = -1;
          v77 = v66 + 32 * v74;
          v78 = (WTF **)(v77 + 8);
          v79 = *(WTF **)(v77 + 16);
          *(_QWORD *)(v77 + 16) = 0;
          if (v79)
          {
            if (*(_DWORD *)v79 == 1)
              WTF::fastFree(v79, v6);
            else
              --*(_DWORD *)v79;
          }
          v80 = *v78;
          *v78 = 0;
          if (v80)
          {
            if (*(_DWORD *)v80 == 1)
              WTF::fastFree(v80, v6);
            else
              --*(_DWORD *)v80;
          }
          ++*(_DWORD *)(*v67 - 16);
          v81 = *v67;
          if (*v67)
            v82 = *(_DWORD *)(v81 - 12) - 1;
          else
            v82 = -1;
          *(_DWORD *)(v81 - 12) = v82;
          v83 = *v67;
          if (*v67)
          {
            v84 = 6 * *(_DWORD *)(v83 - 12);
            v85 = *(_DWORD *)(v83 - 4);
            if (v84 < v85 && v85 >= 9)
              WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::RenderFragmentedFlow::RenderFragmentContainerRange>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::RenderFragmentedFlow::RenderFragmentContainerRange>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::RenderFragmentedFlow::RenderFragmentContainerRange,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::RenderFragmentedFlow::RenderFragmentContainerRange>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::rehash(v67, v85 >> 1, 0);
          }
        }
      }
    }
LABEL_108:
    v87 = *((_DWORD *)a2 + 4);
    if (!v87)
    {
      __break(0xC471u);
      JUMPOUT(0x1963BF668);
    }
    *((_DWORD *)a2 + 4) = v87 - 1;
  }
}

BOOL WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderFragmentContainer>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  WTF *v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  WTF *v17;

  v4 = *(_DWORD *)(a1 + 28);
  v5 = *(_DWORD *)(a1 + 24) + 1;
  *(_DWORD *)(a1 + 24) = v5;
  if (v5 > v4)
  {
    v6 = *(WTF **)(a1 + 8);
    if (v6)
    {
      do
      {
        v7 = (WTF *)*((_QWORD *)v6 + 2);
        if (!*(_QWORD *)(*(_QWORD *)v6 + 8))
          WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::remove((uint64_t *)a1, (void *)a1, v6);
        v6 = v7;
      }
      while (v7);
    }
    *(_DWORD *)(a1 + 24) = 0;
    v8 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      LODWORD(v8) = *(_DWORD *)(v8 - 12);
      if (v8 > 0x7FFFFFFE)
        LODWORD(v8) = 0x7FFFFFFF;
    }
    *(_DWORD *)(a1 + 28) = 2 * v8;
  }
  v9 = *(_QWORD *)(a2 + 8);
  if (!v9 || !*(_QWORD *)(v9 + 8))
    return 0;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v11 = *(_DWORD *)(v10 - 8);
    v12 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    for (i = 1; ; ++i)
    {
      v17 = *(WTF **)(v10 + 8 * v15);
      if (!v17)
        break;
      if (v17 != (WTF *)-1 && *(_QWORD *)v17 == v9)
      {
        if (v15 == *(_DWORD *)(v10 - 4))
          v17 = 0;
        return WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::remove((uint64_t *)a1, (void *)a1, v17);
      }
      v15 = (v15 + i) & v11;
    }
  }
  else
  {
    v17 = 0;
  }
  return WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::remove((uint64_t *)a1, (void *)a1, v17);
}

uint64_t *WebCore::RenderFragmentedFlow::validateFragments(WebCore::RenderFragmentedFlow *this, void *a2)
{
  void *v3;
  _QWORD **v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;
  int v8;
  WTF **v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *i;
  void *v18;

  if ((*((_BYTE *)this + 328) & 1) != 0)
  {
    *((_BYTE *)this + 328) = *((_BYTE *)this + 328) & 0xF8 | 6;
    if ((WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)this + 31, a2) & 1) == 0)
    {
      v4 = (_QWORD **)((char *)this + 256);
      v5 = (_QWORD *)*((_QWORD *)this + 32);
      if (v5)
      {
        while (1)
        {
          v6 = *(_QWORD **)(*v5 + 8);
          if (v6)
            break;
          v5 = (_QWORD *)v5[2];
          if (!v5)
            goto LABEL_22;
        }
        v7 = 0;
        v8 = 0;
LABEL_8:
        v9 = (WTF **)v6[34];
        if (v9)
        {
          v6[34] = 0;
          WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v9, v3);
        }
        v10 = (*(uint64_t (**)(_QWORD *))(*v6 + 1968))(v6);
        v11 = (*(uint64_t (**)(_QWORD *))(*v6 + 1976))(v6);
        if ((v7 & 1) != 0)
        {
          v12 = *((unsigned __int8 *)this + 328);
          v13 = (v8 != v10) & (v12 >> 1);
          if (v13)
            v12 &= ~2u;
          v14 = (v11 != 0) & (v12 >> 2);
          if ((v13 & 1) != 0 || v14)
          {
            if (v14)
              LOBYTE(v12) = v12 & 0xFB;
            *((_BYTE *)this + 328) = v12;
          }
        }
        while (1)
        {
          v5 = (_QWORD *)v5[2];
          if (!v5)
            break;
          v6 = *(_QWORD **)(*v5 + 8);
          if (v6)
          {
            ++*((_DWORD *)this + 68);
            v7 = 1;
            v8 = v10;
            goto LABEL_8;
          }
        }
        ++*((_DWORD *)this + 68);
      }
      do
      {
LABEL_22:
        v15 = *v4;
        v16 = *v15;
        v4 = (_QWORD **)(v15 + 2);
      }
      while (!*(_QWORD *)(v16 + 8));
      for (i = (_QWORD *)*((_QWORD *)this + 33); i != *((_QWORD **)this + 32) && !*(_QWORD *)(*i + 8); i = (_QWORD *)i[1])
        ;
      ++*((_DWORD *)this + 68);
      (*(void (**)(WebCore::RenderFragmentedFlow *, WebCore::RenderFragmentedFlow *))(*(_QWORD *)this + 2016))(this, this);
    }
  }
  WebCore::RenderFragmentedFlow::updateLogicalWidth(this);
  return WebCore::RenderFragmentedFlow::updateFragmentsFragmentedFlowPortionRect((uint64_t *)this, v18);
}

uint64_t WebCore::RenderFragmentedFlow::updateLogicalWidth(WebCore::RenderFragmentedFlow *this)
{
  uint64_t result;
  int v3;
  _QWORD *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int v9;

  result = (*(uint64_t (**)(WebCore::RenderFragmentedFlow *))(*(_QWORD *)this + 2056))(this);
  v3 = result;
  v4 = (_QWORD *)*((_QWORD *)this + 32);
  if (v4)
  {
    while (1)
    {
      result = *(_QWORD *)(*v4 + 8);
      if (result)
        break;
      v4 = (_QWORD *)v4[2];
      if (!v4)
        goto LABEL_11;
    }
LABEL_5:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 1968))(result);
    if ((int)result > v3)
      v3 = result;
    while (1)
    {
      v4 = (_QWORD *)v4[2];
      if (!v4)
        break;
      result = *(_QWORD *)(*v4 + 8);
      if (result)
      {
        ++*((_DWORD *)this + 68);
        goto LABEL_5;
      }
    }
    ++*((_DWORD *)this + 68);
  }
LABEL_11:
  v5 = (char *)this + 164;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v5 = (char *)this + 160;
  *(_DWORD *)v5 = v3;
  v6 = (_QWORD *)*((_QWORD *)this + 32);
  if (v6)
  {
    while (1)
    {
      v7 = *(_QWORD *)(*v6 + 8);
      if (v7)
        break;
      v6 = (_QWORD *)v6[2];
      if (!v6)
        return result;
    }
LABEL_17:
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1968))(v7);
    if ((*((_BYTE *)this + 123) & 4) != 0)
    {
      v9 = v3 - v8;
      if (__OFSUB__(v3, v8))
        v9 = (v3 >> 31) + 0x7FFFFFFF;
    }
    else
    {
      v9 = 0;
    }
    result = WebCore::RenderFragmentContainer::setRenderBoxFragmentInfo(v7, (uint64_t)this, v9, v8, 0);
    while (1)
    {
      v6 = (_QWORD *)v6[2];
      if (!v6)
        break;
      v7 = *(_QWORD *)(*v6 + 8);
      if (v7)
      {
        ++*((_DWORD *)this + 68);
        goto LABEL_17;
      }
    }
    ++*((_DWORD *)this + 68);
  }
  return result;
}

uint64_t *WebCore::RenderFragmentedFlow::updateFragmentsFragmentedFlowPortionRect(uint64_t *this, void *a2)
{
  uint64_t v2;
  uint64_t *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  WTF *i;
  WTF *v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unsigned int v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  signed int v30;
  int *v31;
  uint64_t v32;
  int *v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t **v48;
  int *v49;
  uint64_t v50;
  int *v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  int *v59;
  uint64_t v60;
  int *v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  int *v66;
  uint64_t v67;
  int *v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  int v76;
  int *v77;
  int *v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  _QWORD *v88;
  uint64_t *v89;
  int *v90;
  uint64_t v91;
  int *v92;
  int v93;
  uint64_t v94;
  int v95;
  int v96;
  int *v97;
  int v98;
  uint64_t v99;
  int v100;
  int v101;
  int *v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t *v108;
  int *v109;
  int *v110;
  int v111;
  uint64_t v112;
  int v113;
  int *v114;
  int v115;
  uint64_t v116;
  int *v117;
  uint64_t v118;
  int *v119;
  int v120;
  uint64_t v121;
  int v122;
  int v123;
  void *v124;
  WTF *v125;
  _BOOL4 v126;

  v2 = (uint64_t)this;
  v3 = this + 39;
  v4 = (WTF *)this[39];
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = *(WTF **)v4;
    }
    while (v4);
    do
    {
      v6 = v5;
      v5 = (WTF *)*((_QWORD *)v5 + 2);
      if (v5)
      {
        if (*(WTF **)v5 == v6)
        {
          for (i = (WTF *)*((_QWORD *)v5 + 1); i; i = *(WTF **)i)
            v5 = i;
        }
      }
      v8 = (WTF *)*((_QWORD *)v6 + 5);
      *((_QWORD *)v6 + 5) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
          WTF::fastFree(v8, a2);
        else
          --*(_DWORD *)v8;
      }
      this = (uint64_t *)WTF::fastFree(v6, a2);
    }
    while (v5);
    *v3 = 0;
  }
  v9 = *(_QWORD **)(v2 + 256);
  if (!v9)
    return this;
  while (1)
  {
    v10 = *(_QWORD **)(*v9 + 8);
    if (v10)
      break;
    v9 = (_QWORD *)v9[2];
    if (!v9)
      return this;
  }
  v11 = 0;
LABEL_19:
  v12 = (*(uint64_t (**)(_QWORD *))(*v10 + 1968))(v10);
  if (__OFSUB__(0x3FFFFFFF, v11))
    v13 = 0x7FFFFFFF;
  else
    v13 = 0x3FFFFFFF - v11;
  v14 = (*(uint64_t (**)(_QWORD *))(*v10 + 1984))(v10);
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  if ((*(_BYTE *)(v2 + 123) & 4) != 0)
  {
    v17 = 160;
    if (((*(_DWORD *)(v2 + 124) >> 13) & 6u) - 2 < 4)
      v17 = 164;
    v18 = *(_DWORD *)(v2 + v17);
    v23 = __OFSUB__(v18, v12);
    v19 = v18 - v12;
    v16 = (v18 >> 31) + 0x7FFFFFFF;
    if (!v23)
      v16 = v19;
  }
  else
  {
    v16 = 0;
  }
  v20 = v16 | ((unint64_t)v11 << 32);
  v21 = v11 | ((unint64_t)v16 << 32);
  v22 = v15 | ((unint64_t)v12 << 32);
  if ((*(_DWORD *)(v2 + 20) & 0x1000) == 0)
  {
    v22 = v12 | (unint64_t)(v15 << 32);
    v21 = v20;
  }
  v10[32] = v21;
  v10[33] = v22;
  v23 = __OFADD__(v11, (_DWORD)v15);
  v24 = v11 + v15;
  v25 = __OFADD__(v11, (_DWORD)v15);
  v126 = v25;
  if (v23)
    v26 = (v11 >> 31) + 0x7FFFFFFF;
  else
    v26 = v24;
  v27 = v10[1];
  if (v27)
    goto LABEL_40;
  v27 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v27 = 1;
  *(_QWORD *)(v27 + 8) = v10;
  v125 = (WTF *)v10[1];
  v10[1] = v27;
  if (!v125)
    goto LABEL_40;
  if (*(_DWORD *)v125 != 1)
  {
    --*(_DWORD *)v125;
LABEL_40:
    ++*(_DWORD *)v27;
    goto LABEL_41;
  }
  WTF::fastFree(v125, v124);
  v27 = v10[1];
  if (v27)
    goto LABEL_40;
LABEL_41:
  this = (uint64_t *)WTF::fastMalloc((WTF *)0x38);
  this[1] = 0;
  this[2] = 0;
  *this = 0;
  *((_DWORD *)this + 6) = 0;
  this[4] = v11 | (unint64_t)(v26 << 32);
  this[5] = v27;
  *((_DWORD *)this + 12) = v26;
  v28 = v3;
  v29 = *v3;
  if (*v3)
  {
    do
    {
      while (1)
      {
        v28 = (uint64_t *)v29;
        v30 = *(_DWORD *)(v29 + 32);
        if ((int)v11 >= v30 && (v30 < (int)v11 || (int)v26 >= *((_DWORD *)v28 + 9)))
          break;
        v29 = *v28;
        if (!*v28)
        {
          this[2] = (uint64_t)v28;
          goto LABEL_49;
        }
      }
      v29 = v28[1];
    }
    while (v29);
    this[2] = (uint64_t)v28++;
  }
LABEL_49:
  *v28 = (uint64_t)this;
  *((_DWORD *)this + 6) = 0;
  v31 = (int *)this + 9;
  v32 = *this;
  if (*this)
  {
    v34 = *(_DWORD *)(v32 + 48);
    v33 = (int *)(v32 + 48);
    if ((int)v26 < v34)
      v31 = v33;
  }
  v35 = this[1];
  if (v35)
  {
    v36 = *v31;
    v37 = *(_DWORD *)(v35 + 48);
    if (v36 <= v37)
      v36 = v37;
  }
  else
  {
    v36 = *v31;
  }
  if (v36 != (_DWORD)v26)
    *((_DWORD *)this + 12) = v36;
  v39 = this + 2;
  v38 = this[2];
  v40 = *v3;
  if ((uint64_t *)*v3 == this)
  {
    v116 = this[2];
LABEL_201:
    v40 = (uint64_t)this;
    v38 = v116;
    if (!v116)
      goto LABEL_211;
  }
  else
  {
    v41 = (_DWORD *)(v38 + 24);
    if (!*(_DWORD *)(v38 + 24))
    {
      while (1)
      {
        v42 = *(_QWORD *)(v38 + 16);
        v43 = *(_QWORD *)v42;
        if (v38 == *(_QWORD *)v42)
          break;
        if (v43 && !*(_DWORD *)(v43 + 24))
        {
          *v41 = 1;
          *(_DWORD *)(v43 + 24) = 1;
          *(_DWORD *)(v42 + 24) = 0;
          v49 = (int *)(v38 + 36);
          v50 = *(_QWORD *)v38;
          if (*(_QWORD *)v38)
          {
            v52 = *(_DWORD *)(v50 + 48);
            v51 = (int *)(v50 + 48);
            if (*v49 < v52)
              v49 = v51;
          }
          v53 = *(_QWORD *)(v38 + 8);
          if (v53)
          {
            v54 = *v49;
            v55 = *(_DWORD *)(v53 + 48);
            if (v54 <= v55)
              v54 = v55;
          }
          else
          {
            v54 = *v49;
          }
          if (v54 != *(_DWORD *)(v38 + 48))
            *(_DWORD *)(v38 + 48) = v54;
          v73 = *(_DWORD *)(v42 + 36);
          if (v73 <= *(_DWORD *)(v43 + 48))
            v73 = *(_DWORD *)(v43 + 48);
          v74 = *(_QWORD *)(v42 + 8);
          if (v74)
          {
            v75 = *(_DWORD *)(v74 + 48);
            if (v73 <= v75)
              v73 = v75;
          }
          v76 = *(_DWORD *)(v42 + 48);
LABEL_194:
          if (v73 != v76)
            *(_DWORD *)(v42 + 48) = v73;
          v87 = (uint64_t *)(v42 + 16);
          this = (uint64_t *)v42;
          goto LABEL_197;
        }
        if (this == *(uint64_t **)v38)
        {
          v47 = this[1];
          *(_QWORD *)v38 = v47;
          if (v47)
          {
            *(_QWORD *)(v47 + 16) = v38;
            v42 = *(_QWORD *)(v38 + 16);
          }
          *v39 = v42;
          v48 = *(uint64_t ***)(v38 + 16);
          if (v48)
          {
            if (*v48 == (uint64_t *)v38)
            {
              *v48 = this;
              v47 = *(_QWORD *)v38;
            }
            else
            {
              v48[1] = this;
            }
          }
          else
          {
            *v3 = (uint64_t)this;
          }
          this[1] = v38;
          *(_QWORD *)(v38 + 16) = this;
          v77 = (int *)(v38 + 36);
          if (v47)
          {
            v79 = *(_DWORD *)(v47 + 48);
            v78 = (int *)(v47 + 48);
            if (*v77 < v79)
              v77 = v78;
          }
          v80 = *(_QWORD *)(v38 + 8);
          if (v80)
          {
            v81 = *v77;
            v82 = *(_DWORD *)(v80 + 48);
            if (v81 <= v82)
              v81 = v82;
          }
          else
          {
            v81 = *v77;
          }
          if (v81 != *(_DWORD *)(v38 + 48))
            *(_DWORD *)(v38 + 48) = v81;
          if (*this)
          {
            v83 = *(_DWORD *)(*this + 48);
            if (*((_DWORD *)this + 9) > v83)
              v83 = *((_DWORD *)this + 9);
          }
          else
          {
            v83 = *((_DWORD *)this + 9);
          }
          if (v83 > v81)
            v81 = v83;
          if (v81 != *((_DWORD *)this + 12))
            *((_DWORD *)this + 12) = v81;
          v44 = (uint64_t)this;
        }
        else
        {
          v44 = v38;
          v38 = (uint64_t)this;
        }
        *(_DWORD *)(v44 + 24) = 1;
        v84 = *(uint64_t **)(v44 + 16);
        *((_DWORD *)v84 + 6) = 0;
        v85 = v84[1];
        v86 = *(_QWORD *)v85;
        v84[1] = *(_QWORD *)v85;
        if (v86)
          *(_QWORD *)(v86 + 16) = v84;
        *(_QWORD *)(v85 + 16) = v84[2];
        v87 = (uint64_t *)(v85 + 16);
        v88 = (_QWORD *)v84[2];
        v89 = v3;
        if (v88)
        {
          v89 = v88 + 1;
          if ((uint64_t *)*v88 == v84)
            v89 = (uint64_t *)v84[2];
        }
        *v89 = v85;
        *(_QWORD *)v85 = v84;
        v84[2] = v85;
        v90 = (int *)v84 + 9;
        v91 = *v84;
        if (*v84)
        {
          v93 = *(_DWORD *)(v91 + 48);
          v92 = (int *)(v91 + 48);
          if (*v90 < v93)
            v90 = v92;
        }
        v94 = v84[1];
        if (v94)
        {
          v95 = *v90;
          v96 = *(_DWORD *)(v94 + 48);
          if (v95 <= v96)
            v95 = v96;
        }
        else
        {
          v95 = *v90;
        }
        v98 = *((_DWORD *)v84 + 12);
        v97 = (int *)(v84 + 6);
        if (v95 != v98)
          *v97 = v95;
        if (*(_DWORD *)(v85 + 36) >= v95)
          v97 = (int *)(v85 + 36);
        v99 = *(_QWORD *)(v85 + 8);
        if (v99)
        {
          v100 = *v97;
          v101 = *(_DWORD *)(v99 + 48);
LABEL_181:
          if (v100 <= v101)
            v100 = v101;
          goto LABEL_183;
        }
        v100 = *v97;
LABEL_183:
        if (v100 != *(_DWORD *)(v85 + 48))
          *(_DWORD *)(v85 + 48) = v100;
        this = (uint64_t *)v38;
LABEL_197:
        v116 = *v87;
        if (this == (uint64_t *)*v3)
          goto LABEL_201;
        v39 = this + 2;
        v38 = this[2];
        v41 = (_DWORD *)(v38 + 24);
        if (*(_DWORD *)(v38 + 24))
        {
          this = (uint64_t *)*v3;
          goto LABEL_201;
        }
      }
      v45 = *(_QWORD *)(v42 + 8);
      if (v45 && !*(_DWORD *)(v45 + 24))
      {
        *v41 = 1;
        *(_DWORD *)(v45 + 24) = 1;
        *(_DWORD *)(v42 + 24) = 0;
        v66 = (int *)(v38 + 36);
        v67 = *(_QWORD *)v38;
        if (*(_QWORD *)v38)
        {
          v69 = *(_DWORD *)(v67 + 48);
          v68 = (int *)(v67 + 48);
          if (*v66 < v69)
            v66 = v68;
        }
        v70 = *(_QWORD *)(v38 + 8);
        if (v70)
        {
          v71 = *v66;
          v72 = *(_DWORD *)(v70 + 48);
          if (v71 <= v72)
            v71 = v72;
        }
        else
        {
          v71 = *v66;
        }
        v115 = *(_DWORD *)(v38 + 48);
        v114 = (int *)(v38 + 48);
        if (v71 != v115)
          *v114 = v71;
        if (*(_DWORD *)(v42 + 36) >= v71)
          v114 = (int *)(v42 + 36);
        v73 = *v114;
        if (v73 <= *(_DWORD *)(v45 + 48))
          v73 = *(_DWORD *)(v45 + 48);
        v76 = *(_DWORD *)(v42 + 48);
        goto LABEL_194;
      }
      if (this == *(uint64_t **)(v38 + 8))
      {
        v56 = *this;
        *(_QWORD *)(v38 + 8) = *this;
        if (v56)
        {
          *(_QWORD *)(v56 + 16) = v38;
          v42 = *(_QWORD *)(v38 + 16);
        }
        *v39 = v42;
        v57 = *(_QWORD **)(v38 + 16);
        v58 = v3;
        if (v57)
        {
          v58 = v57 + 1;
          if (*v57 == v38)
            v58 = *(uint64_t **)(v38 + 16);
        }
        *v58 = (uint64_t)this;
        *this = v38;
        *(_QWORD *)(v38 + 16) = this;
        v59 = (int *)(v38 + 36);
        v60 = *(_QWORD *)v38;
        if (*(_QWORD *)v38)
        {
          v62 = *(_DWORD *)(v60 + 48);
          v61 = (int *)(v60 + 48);
          if (*v59 < v62)
            v59 = v61;
        }
        v63 = *(_QWORD *)(v38 + 8);
        if (v63)
        {
          v64 = *v59;
          v65 = *(_DWORD *)(v63 + 48);
          if (v64 <= v65)
            v64 = v65;
        }
        else
        {
          v64 = *v59;
        }
        if (v64 != *(_DWORD *)(v38 + 48))
          *(_DWORD *)(v38 + 48) = v64;
        if (*((_DWORD *)this + 9) >= v64)
          v102 = (int *)this + 9;
        else
          v102 = (int *)(v38 + 48);
        v103 = this[1];
        if (v103)
        {
          v104 = *v102;
          v105 = *(_DWORD *)(v103 + 48);
          if (v104 <= v105)
            v104 = v105;
        }
        else
        {
          v104 = *v102;
        }
        if (v104 != *((_DWORD *)this + 12))
          *((_DWORD *)this + 12) = v104;
        v46 = (uint64_t)this;
      }
      else
      {
        v46 = v38;
        v38 = (uint64_t)this;
      }
      *(_DWORD *)(v46 + 24) = 1;
      v106 = *(uint64_t **)(v46 + 16);
      *((_DWORD *)v106 + 6) = 0;
      v85 = *v106;
      v107 = *(_QWORD *)(*v106 + 8);
      *v106 = v107;
      if (v107)
        *(_QWORD *)(v107 + 16) = v106;
      *(_QWORD *)(v85 + 16) = v106[2];
      v87 = (uint64_t *)(v85 + 16);
      v108 = (uint64_t *)v106[2];
      if (v108)
      {
        if ((uint64_t *)*v108 == v106)
        {
          *v108 = v85;
          v107 = *v106;
        }
        else
        {
          v108[1] = v85;
        }
      }
      else
      {
        *v3 = v85;
      }
      *(_QWORD *)(v85 + 8) = v106;
      v106[2] = v85;
      v109 = (int *)v106 + 9;
      if (v107)
      {
        v111 = *(_DWORD *)(v107 + 48);
        v110 = (int *)(v107 + 48);
        if (*v109 < v111)
          v109 = v110;
      }
      v112 = v106[1];
      if (v112)
      {
        v113 = *v109;
        v101 = *(_DWORD *)(v112 + 48);
        if (v113 > v101)
          v101 = v113;
      }
      else
      {
        v101 = *v109;
      }
      if (v101 != *((_DWORD *)v106 + 12))
        *((_DWORD *)v106 + 12) = v101;
      if (*(_QWORD *)v85)
      {
        v100 = *(_DWORD *)(*(_QWORD *)v85 + 48);
        if (*(_DWORD *)(v85 + 36) > v100)
          v100 = *(_DWORD *)(v85 + 36);
      }
      else
      {
        v100 = *(_DWORD *)(v85 + 36);
      }
      goto LABEL_181;
    }
  }
  do
  {
    v117 = (int *)(v38 + 36);
    v118 = *(_QWORD *)v38;
    if (*(_QWORD *)v38)
    {
      v120 = *(_DWORD *)(v118 + 48);
      v119 = (int *)(v118 + 48);
      if (*v117 < v120)
        v117 = v119;
    }
    v121 = *(_QWORD *)(v38 + 8);
    if (v121)
    {
      v122 = *v117;
      v123 = *(_DWORD *)(v121 + 48);
      if (v122 <= v123)
        v122 = v123;
    }
    else
    {
      v122 = *v117;
    }
    if (v122 == *(_DWORD *)(v38 + 48))
      break;
    *(_DWORD *)(v38 + 48) = v122;
    v38 = *(_QWORD *)(v38 + 16);
  }
  while (v38);
LABEL_211:
  *(_DWORD *)(v40 + 24) = 1;
  if (v126)
    v11 = (v11 >> 31) + 0x7FFFFFFF;
  else
    v11 = v24;
  while (1)
  {
    v9 = (_QWORD *)v9[2];
    if (!v9)
      break;
    v10 = *(_QWORD **)(*v9 + 8);
    if (v10)
    {
      ++*(_DWORD *)(v2 + 272);
      goto LABEL_19;
    }
  }
  ++*(_DWORD *)(v2 + 272);
  return this;
}

uint64_t WebCore::RenderFragmentedFlow::layout(WebCore::RenderFragmentedFlow *this, void *a2)
{
  int v3;
  uint64_t result;

  if ((*((_BYTE *)this + 328) & 1) != 0)
    v3 = (*((_DWORD *)this + 5) >> 6) & 8;
  else
    LOBYTE(v3) = 0;
  *((_BYTE *)this + 328) = v3 | *((_BYTE *)this + 328) & 0xF7;
  WebCore::RenderFragmentedFlow::validateFragments(this, a2);
  result = WebCore::RenderBlock::layout(this);
  *((_BYTE *)this + 328) &= ~8u;
  return result;
}

_QWORD *WebCore::RenderFragmentedFlow::computeLogicalHeight@<X0>(_QWORD *result@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  unsigned int v6;
  int v7;
  int v8;
  BOOL v9;
  unsigned int v10;

  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)a3 = 0;
  *(_DWORD *)(a3 + 4) = a2;
  v3 = (_QWORD *)result[32];
  if (v3)
  {
    v4 = result;
    while (1)
    {
      result = *(_QWORD **)(*v3 + 8);
      if (result)
        break;
      v3 = (_QWORD *)v3[2];
      if (!v3)
        return result;
    }
    v6 = 0;
LABEL_7:
    if (__OFSUB__(0x3FFFFFFF, v6))
      v7 = 0x7FFFFFFF;
    else
      v7 = 0x3FFFFFFF - v6;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 1984))(result);
    if ((int)result >= v7)
      v8 = v7;
    else
      v8 = (int)result;
    v9 = __OFADD__(v6, v8);
    v10 = v6 + v8;
    if (v9)
    {
      v6 = (v6 >> 31) + 0x7FFFFFFF;
      *(_DWORD *)a3 = v6;
LABEL_15:
      while (1)
      {
        v3 = (_QWORD *)v3[2];
        if (!v3)
          break;
        result = *(_QWORD **)(*v3 + 8);
        if (result)
        {
          ++*((_DWORD *)v4 + 68);
          goto LABEL_7;
        }
      }
      ++*((_DWORD *)v4 + 68);
    }
    else
    {
      *(_DWORD *)a3 = v10;
      v6 = v10;
      if (v10 != 0x3FFFFFFF)
        goto LABEL_15;
    }
  }
  return result;
}

uint64_t WebCore::RenderFragmentedFlow::nodeAtPoint(uint64_t a1, int *a2, WebCore::HitTestResult *a3, float32x4_t *a4, const WebCore::LayoutPoint *a5, uint64_t a6)
{
  if ((_DWORD)a6)
    return WebCore::RenderBlock::nodeAtPoint(a1, a2, a3, a4, a5, a6);
  else
    return 0;
}

uint64_t WebCore::RenderFragmentedFlow::repaintRectangleInFragments(uint64_t this, const WebCore::LayoutRect *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40)
                                                                                         + 8)
                                                                             + 1944)
                                                                 + 24)
                                                     + 8)
                                         + 40)
                             + 8)
                 + 3382)
    && *((int *)a2 + 2) >= 1
    && *((int *)a2 + 3) >= 1)
  {
    v3 = this;
    if ((*(_BYTE *)(this + 328) & 1) == 0)
    {
      this = WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)(this + 248), a2);
      if ((this & 1) == 0)
      {
        v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + 40) + 8)
                                   + 1944)
                       + 248);
        v5 = *(_DWORD *)(v4 + 492);
        *(_DWORD *)(v4 + 492) = v5 + 1;
        v6 = *(_QWORD **)(v3 + 256);
        if (v6)
        {
          while (1)
          {
            this = *(_QWORD *)(*v6 + 8);
            if (this)
              break;
            v6 = (_QWORD *)v6[2];
            if (!v6)
              goto LABEL_16;
          }
LABEL_11:
          this = (*(uint64_t (**)(uint64_t, const WebCore::LayoutRect *))(*(_QWORD *)this + 2008))(this, a2);
          while (1)
          {
            v6 = (_QWORD *)v6[2];
            if (!v6)
              break;
            this = *(_QWORD *)(*v6 + 8);
            if (this)
            {
              ++*(_DWORD *)(v3 + 272);
              goto LABEL_11;
            }
          }
          ++*(_DWORD *)(v3 + 272);
          v5 = *(_DWORD *)(v4 + 492) - 1;
        }
LABEL_16:
        *(_DWORD *)(v4 + 492) = v5;
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderFragmentedFlow::absoluteQuadsForBox(uint64_t a1, _DWORD *a2, uint64_t a3, int *a4)
{
  uint64_t *v7;
  uint64_t v8;
  float v10;
  float v11;
  unsigned int v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  BOOL v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v26;
  float v28;
  float v30;
  float v31;
  double v32;
  int v33;
  int v34;
  double v35;
  int v36;
  double v37;
  int v38;
  int v39;
  double v40;
  int v41;
  WebCore::RenderFragmentContainer *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  int i;
  _QWORD *v51;
  uint64_t v52;
  WebCore::RenderFragmentContainer *v53;
  float32x2_t v54;
  void *v55;
  int32x2_t *v56;
  int32x2_t *v57;
  float32x2_t v58;
  float32x2_t v59;
  uint64_t v60;
  __int128 *v61;
  _OWORD *v62;
  __int128 v63;
  __int128 v64;
  WTF *v65;
  int v66;
  unsigned int v67;
  WebCore::RenderFragmentContainer *v68;
  WebCore::RenderFragmentContainer *v69;
  float32x2_t v70;
  unint64_t v71;
  float32x2_t v72;
  float32x2_t v73;
  __int128 v74;
  __int128 v75;
  _DWORD v76[4];

  if ((*(_BYTE *)(a1 + 328) & 1) != 0)
    return 0;
  v7 = (uint64_t *)(a1 + 248);
  if ((WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)(a1 + 248), a2) & 1) != 0)return 0;
  v10 = (float)a4[40] * 0.015625;
  v11 = (float)a4[41] * 0.015625;
  v70 = 0;
  *(float *)&v12 = v10 + 0.0;
  v71 = v12;
  v72.i32[0] = v12;
  v72.f32[1] = v11 + 0.0;
  v73.i32[0] = 0;
  v73.f32[1] = v11 + 0.0;
  WebCore::RenderObject::localToContainerQuad((uint64_t)a4, (float *)&v70, a1, 2u, &v74);
  v13 = *((float *)&v75 + 1);
  v14 = *(float *)&v75;
  if (*((float *)&v75 + 2) >= *(float *)&v75)
    v15 = *(float *)&v75;
  else
    v15 = *((float *)&v75 + 2);
  v16 = *((float *)&v74 + 1);
  v17 = *(float *)&v74;
  if (*((float *)&v74 + 2) >= *(float *)&v74)
    v18 = *(float *)&v74;
  else
    v18 = *((float *)&v74 + 2);
  if (v15 >= v18)
    v15 = v18;
  v19 = fabsf(v15);
  v20 = v19 != INFINITY && v19 <= 2147500000.0;
  v21 = (float)((SLODWORD(v15) >> 31) ^ 0x7FFFFFFF);
  if (v20)
    v21 = v15;
  if (*((float *)&v75 + 3) >= *((float *)&v75 + 1))
    v22 = *((float *)&v75 + 1);
  else
    v22 = *((float *)&v75 + 3);
  if (*((float *)&v74 + 3) >= *((float *)&v74 + 1))
    v23 = *((float *)&v74 + 1);
  else
    v23 = *((float *)&v74 + 3);
  if (v22 >= v23)
    v22 = v23;
  v24 = fabsf(v22);
  if (v24 == INFINITY || v24 > 2147500000.0)
    v22 = (float)((SLODWORD(v22) >> 31) ^ 0x7FFFFFFF);
  if (*(float *)&v74 < *((float *)&v74 + 2))
    v17 = *((float *)&v74 + 2);
  if (*(float *)&v75 < *((float *)&v75 + 2))
    v14 = *((float *)&v75 + 2);
  if (v17 >= v14)
    v14 = v17;
  v26 = fabsf(v14);
  if (v26 == INFINITY || v26 > 2147500000.0)
    v14 = (float)((SLODWORD(v14) >> 31) ^ 0x7FFFFFFF);
  if (*((float *)&v74 + 1) < *((float *)&v74 + 3))
    v16 = *((float *)&v74 + 3);
  if (*((float *)&v75 + 1) < *((float *)&v75 + 3))
    v13 = *((float *)&v75 + 3);
  if (v16 >= v13)
    v13 = v16;
  v28 = fabsf(v13);
  if (v28 == INFINITY || v28 > 2147500000.0)
    v13 = (float)((SLODWORD(v13) >> 31) ^ 0x7FFFFFFF);
  v30 = v14 - v21;
  v31 = v13 - v22;
  v32 = v21 * 64.0;
  if (v32 > -2147483650.0)
    v33 = (int)v32;
  else
    v33 = 0x80000000;
  if (v32 < 2147483650.0)
    v34 = v33;
  else
    v34 = 0x7FFFFFFF;
  v35 = v22 * 64.0;
  if (v35 > -2147483650.0)
    v36 = (int)v35;
  else
    v36 = 0x80000000;
  if (v35 >= 2147483650.0)
    v36 = 0x7FFFFFFF;
  v76[0] = v34;
  v76[1] = v36;
  v37 = v30 * 64.0;
  if (v37 > -2147483650.0)
    v38 = (int)v37;
  else
    v38 = 0x80000000;
  if (v37 < 2147483650.0)
    v39 = v38;
  else
    v39 = 0x7FFFFFFF;
  v76[2] = v39;
  v40 = v31 * 64.0;
  if (v40 >= 2147483650.0)
  {
    v41 = 0x7FFFFFFF;
  }
  else if (v40 <= -2147483650.0)
  {
    v41 = 0x80000000;
  }
  else
  {
    v41 = (int)v40;
  }
  v76[3] = v41;
  v68 = 0;
  v69 = 0;
  v8 = WebCore::RenderFragmentedFlow::computedFragmentRangeForBox((WebCore::RenderFragmentedFlow *)a1, (const WebCore::RenderBox *)a4, &v69, &v68);
  if ((_DWORD)v8)
  {
    v42 = v69;
    ++*(_DWORD *)(a1 + 272);
    v43 = *((_QWORD *)v42 + 1);
    if (v43)
    {
      if (*(_QWORD *)(v43 + 8))
      {
        v44 = *v7;
        if (*v7)
        {
          v45 = *(_DWORD *)(v44 - 8);
          v46 = (~(v43 << 32) + v43) ^ ((unint64_t)(~(v43 << 32) + v43) >> 22);
          v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
          v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
          v49 = v45 & ((v48 >> 31) ^ v48);
          for (i = 1; ; ++i)
          {
            v51 = *(_QWORD **)(v44 + 8 * v49);
            if (!v51)
              break;
            if (v51 != (_QWORD *)-1 && *v51 == v43)
            {
              if (v49 != *(_DWORD *)(v44 - 4))
              {
                while (1)
                {
                  v52 = *(_QWORD *)(*v51 + 8);
                  if (v52)
                    break;
                  v51 = (_QWORD *)v51[2];
                  if (!v51)
                    return v8;
                }
                v53 = v68;
                v54 = (float32x2_t)vdup_n_s32(0x3C800000u);
LABEL_87:
                (*(void (**)(WTF **__return_ptr, uint64_t, _DWORD *))(*(_QWORD *)v52 + 2024))(&v65, v52, v76);
                v56 = (int32x2_t *)v65;
                v57 = (int32x2_t *)((char *)v65 + 16 * v67);
                if (v67)
                {
                  do
                  {
                    v58 = vmul_f32(vcvt_f32_s32(*v56), v54);
                    v59 = vadd_f32(v58, vmul_f32(vcvt_f32_s32(v56[1]), v54));
                    v70 = v58;
                    v71 = __PAIR64__(v58.u32[1], v59.u32[0]);
                    v58.i32[1] = v59.i32[1];
                    v72 = v59;
                    v73 = v58;
                    WebCore::RenderObject::localToContainerQuad(v52, (float *)&v70, 0, 2u, &v74);
                    v60 = a2[3];
                    if ((_DWORD)v60 == a2[2])
                    {
                      v61 = (__int128 *)WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, v60 + 1, (unint64_t)&v74);
                      v62 = (_OWORD *)(*(_QWORD *)a2 + 32 * a2[3]);
                      v63 = *v61;
                      v64 = v61[1];
                    }
                    else
                    {
                      v62 = (_OWORD *)(*(_QWORD *)a2 + 32 * v60);
                      v63 = v74;
                      v64 = v75;
                    }
                    *v62 = v63;
                    v62[1] = v64;
                    ++a2[3];
                    v56 += 2;
                  }
                  while (v56 != v57);
                  v56 = (int32x2_t *)v65;
                }
                if (v56)
                {
                  v65 = 0;
                  v66 = 0;
                  WTF::fastFree((WTF *)v56, v55);
                }
                if ((WebCore::RenderFragmentContainer *)v52 != v53)
                {
                  while (1)
                  {
                    v51 = (_QWORD *)v51[2];
                    if (!v51)
                      break;
                    v52 = *(_QWORD *)(*v51 + 8);
                    if (v52)
                    {
                      ++*(_DWORD *)(a1 + 272);
                      goto LABEL_87;
                    }
                  }
                  ++*(_DWORD *)(a1 + 272);
                }
              }
              return v8;
            }
            v49 = (v49 + i) & v45;
          }
        }
      }
    }
  }
  return v8;
}

uint64_t WebCore::RenderFragmentedFlow::computedFragmentRangeForBox(WebCore::RenderFragmentedFlow *this, const WebCore::RenderBox *a2, WebCore::RenderFragmentContainer **a3, WebCore::RenderFragmentContainer **a4)
{
  const WebCore::RenderBox *v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int i;
  uint64_t v19;
  unsigned int v20;
  WebCore::RenderFragmentContainer *v21;

  *a4 = 0;
  *a3 = 0;
  if ((*((_BYTE *)this + 328) & 1) == 0)
  {
    v6 = a2;
    if ((WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)this + 31, a2) & 1) == 0)
    {
      if ((WebCore::RenderFragmentedFlow::getFragmentRangeForBox(this, v6, a3, a4) & 1) != 0)
        return 1;
LABEL_7:
      while ((*((_BYTE *)v6 + 52) & 7) != 1 || (*((_BYTE *)v6 + 53) & 2) == 0)
      {
        v10 = *((_QWORD *)v6 + 4);
        if (v10)
          v6 = *(const WebCore::RenderBox **)(v10 + 8);
        else
          v6 = 0;
        while ((*((_BYTE *)v6 + 45) & 4) == 0)
        {
          v11 = *((_QWORD *)v6 + 4);
          if (!v11)
          {
            v6 = 0;
            break;
          }
          v6 = *(const WebCore::RenderBox **)(v11 + 8);
          if (!v6)
            break;
        }
        v12 = *((_QWORD *)this + 36);
        if (v12)
        {
          v13 = *(_DWORD *)(v12 - 8);
          v14 = ((unint64_t)v6 + ~((_QWORD)v6 << 32)) ^ (((unint64_t)v6 + ~((_QWORD)v6 << 32)) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          for (i = 1; ; ++i)
          {
            v19 = *(_QWORD *)(v12 + 32 * v17);
            if (v19 != -1)
            {
              if (!v19)
                goto LABEL_7;
              if (*(const WebCore::RenderBox **)(v19 + 8) == v6)
                break;
            }
            v17 = (v17 + i) & v13;
          }
          v20 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)v6 + 1288))(v6);
          v8 = 1;
          v21 = (WebCore::RenderFragmentContainer *)(*(uint64_t (**)(WebCore::RenderFragmentedFlow *, const WebCore::RenderBox *, _QWORD, uint64_t))(*(_QWORD *)this + 2000))(this, v6, v20, 1);
          *a4 = v21;
          *a3 = v21;
          return v8;
        }
      }
    }
  }
  return 0;
}

WebCore::RenderFragmentContainer *WebCore::RenderFragmentedFlow::fragmentAtBlockOffset(uint64_t a1, _BYTE *a2, int a3, int a4)
{
  uint64_t *v8;
  WebCore::RenderFragmentContainer *v9;
  _QWORD **v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  WTF *v20;
  WebCore::RenderFragmentedFlow *v21;
  int v22;
  WebCore::RenderFragmentContainer *v23;
  int v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  WebCore::RenderFragmentedFlow *v28;
  int v29;
  WebCore::RenderFragmentContainer *v30;
  int v31;
  int v32;
  _QWORD *v33;
  _QWORD *i;
  _QWORD *v35;
  _QWORD *j;
  WebCore::RenderFragmentedFlow *v37;
  int v38;
  WebCore::RenderFragmentContainer *v39;
  int v40;
  int v41;
  WebCore::RenderFragmentContainer *v43;
  WTF *v44;
  WebCore::RenderFragmentContainer *v45;
  WebCore::RenderFragmentContainer *v46;

  v8 = (uint64_t *)(a1 + 248);
  if ((WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)(a1 + 248), a2) & 1) != 0)return 0;
  v10 = (_QWORD **)(a1 + 256);
  v11 = *(WTF **)(a1 + 256);
  if (v11)
  {
    do
    {
      v12 = (WTF *)*((_QWORD *)v11 + 2);
      if (!*(_QWORD *)(*(_QWORD *)v11 + 8))
        WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::remove(v8, v8, v11);
      v11 = v12;
    }
    while (v12);
  }
  *(_DWORD *)(a1 + 272) = 0;
  v13 = *(_QWORD *)(a1 + 248);
  if (v13)
  {
    v14 = *(_DWORD *)(v13 - 12);
    if (v14 >= 0x7FFFFFFF)
      v15 = -2;
    else
      v15 = 2 * v14;
    *(_DWORD *)(a1 + 276) = v15;
    if (*(_DWORD *)(v13 - 12) == 1 && a4 != 0)
    {
      do
      {
        v17 = *v10;
        v18 = *v17;
        v10 = (_QWORD **)(v17 + 2);
        v9 = *(WebCore::RenderFragmentContainer **)(v18 + 8);
      }
      while (!v9);
      return v9;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 276) = 0;
  }
  if (a3 <= 0)
  {
    do
    {
      v26 = *v10;
      v27 = *v26;
      v10 = (_QWORD **)(v26 + 2);
      v9 = *(WebCore::RenderFragmentContainer **)(v27 + 8);
    }
    while (!v9);
    if (a2)
    {
      v28 = (a2[23] & 0x10) != 0
          ? (WebCore::RenderFragmentedFlow *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a2 + 648))(a2)
          : 0;
      if (a2[46] != 49)
      {
        v43 = 0;
        v46 = 0;
        if (!WebCore::RenderFragmentedFlow::getFragmentRangeForBox(v28, (const WebCore::RenderBox *)a2, &v43, &v46))return v9;
        v29 = *((_DWORD *)v9 + 64);
        if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v9 + 31) + 8) + 21) & 0x10) == 0)
          v29 = *((_DWORD *)v9 + 65);
        v30 = v43;
        v31 = *((_DWORD *)v43 + 64);
        if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v43 + 31) + 8) + 21) & 0x10) == 0)
          v31 = *((_DWORD *)v43 + 65);
        if (v29 >= v31)
        {
          v30 = v46;
          v32 = *((_DWORD *)v46 + 64);
          if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v46 + 31) + 8) + 21) & 0x10) == 0)
            v32 = *((_DWORD *)v46 + 65);
          if (v29 <= v32)
            return v9;
        }
        return v30;
      }
    }
  }
  else
  {
    LODWORD(v43) = a3;
    v44 = 0;
    WebCore::PODIntervalTree<WebCore::LayoutUnit,WTF::WeakPtr<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>::searchForOverlapsFrom<WebCore::RenderFragmentedFlow::FragmentSearchAdapter>(*(WTF **)(a1 + 312), &v43);
    v20 = v44;
    if (v44)
    {
      v9 = (WebCore::RenderFragmentContainer *)*((_QWORD *)v44 + 1);
      if (v9)
      {
        if (a2)
        {
          v21 = (a2[23] & 0x10) != 0
              ? (WebCore::RenderFragmentedFlow *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a2 + 648))(a2)
              : 0;
          if (a2[46] != 49)
          {
            v45 = 0;
            v46 = 0;
            if (WebCore::RenderFragmentedFlow::getFragmentRangeForBox(v21, (const WebCore::RenderBox *)a2, &v46, &v45))
            {
              v22 = *((_DWORD *)v9 + 64);
              if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v9 + 31) + 8) + 21) & 0x10) == 0)
                v22 = *((_DWORD *)v9 + 65);
              v23 = v46;
              v24 = *((_DWORD *)v46 + 64);
              if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v46 + 31) + 8) + 21) & 0x10) == 0)
                v24 = *((_DWORD *)v46 + 65);
              if (v22 >= v24)
              {
                v23 = v45;
                v25 = *((_DWORD *)v45 + 64);
                if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v45 + 31) + 8) + 21) & 0x10) == 0)
                  v25 = *((_DWORD *)v45 + 65);
                if (v22 <= v25)
                  v23 = v9;
              }
            }
            else
            {
              v23 = v9;
            }
            v9 = v23;
          }
        }
LABEL_85:
        if (*(_DWORD *)v20 == 1)
          WTF::fastFree(v20, v19);
        else
          --*(_DWORD *)v20;
        return v9;
      }
    }
    if ((a4 & 1) != 0)
      goto LABEL_59;
    v33 = *(_QWORD **)(a1 + 256);
    for (i = *(_QWORD **)(a1 + 264); i != v33; i = (_QWORD *)i[1])
    {
      if (*(_QWORD *)(*i + 8))
      {
        v33 = i;
        break;
      }
    }
    ++*(_DWORD *)(a1 + 272);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*v33 + 8) + 2000))(*(_QWORD *)(*v33 + 8)))
    {
LABEL_59:
      v35 = *(_QWORD **)(a1 + 256);
      for (j = *(_QWORD **)(a1 + 264); j != v35; j = (_QWORD *)j[1])
      {
        if (*(_QWORD *)(*j + 8))
        {
          v35 = j;
          break;
        }
      }
      ++*(_DWORD *)(a1 + 272);
      v9 = *(WebCore::RenderFragmentContainer **)(*v35 + 8);
      if (a2)
      {
        v37 = (a2[23] & 0x10) != 0
            ? (WebCore::RenderFragmentedFlow *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a2 + 648))(a2)
            : 0;
        if (a2[46] != 49)
        {
          v45 = 0;
          v46 = 0;
          if (WebCore::RenderFragmentedFlow::getFragmentRangeForBox(v37, (const WebCore::RenderBox *)a2, &v46, &v45))
          {
            v38 = *((_DWORD *)v9 + 64);
            if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v9 + 31) + 8) + 21) & 0x10) == 0)
              v38 = *((_DWORD *)v9 + 65);
            v39 = v46;
            v40 = *((_DWORD *)v46 + 64);
            if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v46 + 31) + 8) + 21) & 0x10) == 0)
              v40 = *((_DWORD *)v46 + 65);
            if (v38 >= v40)
            {
              v39 = v45;
              v41 = *((_DWORD *)v45 + 64);
              if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v45 + 31) + 8) + 21) & 0x10) == 0)
                v41 = *((_DWORD *)v45 + 65);
              if (v38 <= v41)
                v39 = v9;
            }
          }
          else
          {
            v39 = v9;
          }
          v9 = v39;
        }
      }
    }
    else
    {
      v9 = 0;
    }
    if (v20)
      goto LABEL_85;
  }
  return v9;
}

WebCore::RenderBox *WebCore::RenderFragmentedFlow::mapFromFlowToFragment(WebCore::RenderFragmentedFlow *this, WebCore::TransformState *a2)
{
  WebCore::RenderBox *v4;
  WebCore::RenderBox **v5;
  __int128 v6;
  float m_y;
  float m_x;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  BOOL v14;
  float v15;
  float v16;
  float v17;
  float v19;
  float v21;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  int v36;
  int v37;
  float v38;
  float v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  signed int v46;
  unsigned int v47;
  BOOL v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  int v54;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v60;
  unsigned int v61;
  unint64_t v62;
  int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  FloatQuad v74;

  if ((*((_BYTE *)this + 328) & 1) != 0
    || (WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)this + 31, a2) & 1) != 0)
  {
    return 0;
  }
  v5 = (WebCore::RenderBox **)*((_QWORD *)this + 40);
  if (v5)
  {
    v4 = *v5;
    if (*v5)
      goto LABEL_109;
  }
  v6 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)&v74.var0.m_x = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)&v74.var2.m_x = v6;
  WebCore::TransformState::mapQuad((uint64_t)a2, &v74, (double (*)[4][4])*((unsigned int *)a2 + 28), 0);
  m_y = v74.var2.m_y;
  m_x = v74.var2.m_x;
  if (v74.var3.m_x >= v74.var2.m_x)
    v9 = v74.var2.m_x;
  else
    v9 = v74.var3.m_x;
  v10 = v74.var0.m_y;
  v11 = v74.var0.m_x;
  if (v74.var1.m_x >= v74.var0.m_x)
    v12 = v74.var0.m_x;
  else
    v12 = v74.var1.m_x;
  if (v9 >= v12)
    v9 = v12;
  v13 = fabsf(v9);
  v14 = v13 != INFINITY && v13 <= 2147500000.0;
  if (!v14)
    v9 = (float)((SLODWORD(v9) >> 31) ^ 0x7FFFFFFF);
  if (v74.var3.m_y >= v74.var2.m_y)
    v15 = v74.var2.m_y;
  else
    v15 = v74.var3.m_y;
  if (v74.var1.m_y >= v74.var0.m_y)
    v16 = v74.var0.m_y;
  else
    v16 = v74.var1.m_y;
  if (v15 >= v16)
    v15 = v16;
  v17 = fabsf(v15);
  if (v17 == INFINITY || v17 > 2147500000.0)
    v15 = (float)((SLODWORD(v15) >> 31) ^ 0x7FFFFFFF);
  if (v74.var0.m_x < v74.var1.m_x)
    v11 = v74.var1.m_x;
  if (v74.var2.m_x < v74.var3.m_x)
    m_x = v74.var3.m_x;
  if (v11 >= m_x)
    m_x = v11;
  v19 = fabsf(m_x);
  if (v19 == INFINITY || v19 > 2147500000.0)
    m_x = (float)((SLODWORD(m_x) >> 31) ^ 0x7FFFFFFF);
  if (v74.var0.m_y < v74.var1.m_y)
    v10 = v74.var1.m_y;
  if (v74.var2.m_y < v74.var3.m_y)
    m_y = v74.var3.m_y;
  if (v10 >= m_y)
    m_y = v10;
  v21 = fabsf(m_y);
  if (v21 == INFINITY || v21 > 2147500000.0)
    m_y = (float)((SLODWORD(m_y) >> 31) ^ 0x7FFFFFFF);
  v23 = m_x - v9;
  v24 = m_y - v15;
  v25 = floorf(v9);
  v26 = -2147500000.0;
  if (v25 > -2147500000.0)
    v26 = (float)(int)v25;
  if (v25 < 2147500000.0)
    v27 = v26;
  else
    v27 = 2147500000.0;
  v28 = floorf(v15);
  v29 = -2147500000.0;
  if (v28 > -2147500000.0)
    v29 = (float)(int)v28;
  if (v28 < 2147500000.0)
    v30 = v29;
  else
    v30 = 2147500000.0;
  v31 = v15 + v24;
  v32 = ceilf(v9 + v23);
  v33 = 2147500000.0;
  if (v32 < 2147500000.0)
  {
    v33 = -2147500000.0;
    if (v32 > -2147500000.0)
      v33 = (float)(int)v32;
  }
  v34 = ceilf(v31);
  v35 = 2147500000.0;
  if (v34 < 2147500000.0)
  {
    v35 = -2147500000.0;
    if (v34 > -2147500000.0)
      v35 = (float)(int)v34;
  }
  if (v27 >= 2147500000.0)
  {
    v36 = 0x7FFFFFFF;
  }
  else if (v27 <= -2147500000.0)
  {
    v36 = 0x80000000;
  }
  else
  {
    v36 = (int)v27;
  }
  if (v30 >= 2147500000.0)
  {
    v37 = 0x7FFFFFFF;
  }
  else if (v30 <= -2147500000.0)
  {
    v37 = 0x80000000;
  }
  else
  {
    v37 = (int)v30;
  }
  v38 = v33 - v27;
  v39 = v35 - v30;
  if (v38 >= 2147500000.0)
  {
    v40 = 0x7FFFFFFF;
  }
  else if (v38 <= -2147500000.0)
  {
    v40 = 0x80000000;
  }
  else
  {
    v40 = (int)v38;
  }
  if (v39 >= 2147500000.0)
  {
    v41 = 0x7FFFFFFF;
  }
  else if (v39 <= -2147500000.0)
  {
    v41 = 0x80000000;
  }
  else
  {
    v41 = (int)v39;
  }
  v42 = v36 << 6;
  if (v36 < -33554432)
    v42 = 0x80000000;
  if (v36 > 0x1FFFFFF)
    v42 = 0x7FFFFFFF;
  v43 = v37 << 6;
  if (v37 < -33554432)
    v43 = 0x80000000;
  if (v37 > 0x1FFFFFF)
    v43 = 0x7FFFFFFF;
  v44 = v40 << 6;
  if (v40 < -33554432)
    v44 = 0x80000000;
  if (v40 <= 0x1FFFFFF)
    v45 = v44;
  else
    v45 = 0x7FFFFFFF;
  v46 = v41 << 6;
  if (v41 < -33554432)
    v46 = 0x80000000;
  if (v41 > 0x1FFFFFF)
    v46 = 0x7FFFFFFF;
  v47 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if (v47 <= 5 && ((1 << v47) & 0x2A) != 0)
  {
    if ((*((_BYTE *)this + 21) & 0x10) != 0)
    {
      v72 = *((_DWORD *)this + 40);
      v73 = v42 + v45;
      if (__OFADD__(v42, v45))
        v73 = (v42 >> 31) + 0x7FFFFFFF;
      v42 = v72 - v73;
      if (__OFSUB__(v72, v73))
        v42 = (v72 >> 31) + 0x7FFFFFFF;
    }
    else
    {
      v66 = *((_DWORD *)this + 41);
      v67 = v43 + v46;
      if (__OFADD__(v43, v46))
        v67 = (v43 >> 31) + 0x7FFFFFFF;
      v43 = v66 - v67;
      if (__OFSUB__(v66, v67))
        v43 = (v66 >> 31) + 0x7FFFFFFF;
    }
  }
  v48 = __OFADD__(v42, v45 / 2);
  v49 = v42 + v45 / 2;
  if (v48)
    v49 = (v42 >> 31) + 0x7FFFFFFF;
  v48 = __OFADD__(v43, v46 / 2);
  v50 = v43 + v46 / 2;
  if (v48)
    v50 = (v43 >> 31) + 0x7FFFFFFF;
  v51 = (*((_DWORD *)this + 5) & 0x1000) != 0 ? v49 : v50;
  v4 = (WebCore::RenderBox *)(*(uint64_t (**)(WebCore::RenderFragmentedFlow *, WebCore::RenderFragmentedFlow *, uint64_t, uint64_t))(*(_QWORD *)this + 2000))(this, this, v51, 1);
  if (v4)
  {
LABEL_109:
    v52 = *((_QWORD *)v4 + 32);
    v53 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    v14 = v53 > 5;
    v54 = (1 << v53) & 0x2A;
    if (!v14 && v54 != 0)
    {
      v60 = *((_QWORD *)v4 + 33);
      if ((*((_BYTE *)this + 21) & 0x10) != 0)
      {
        v68 = *((_DWORD *)this + 40);
        v48 = __OFADD__((_DWORD)v52, (_DWORD)v60);
        v69 = v52 + v60;
        if (v48)
          v69 = (v52 >> 31) + 0x7FFFFFFF;
        v48 = __OFSUB__(v68, v69);
        LODWORD(v70) = v68 - v69;
        v71 = (v68 >> 31) + 0x7FFFFFFF;
        if (v48)
          v70 = v71;
        else
          v70 = v70;
        v52 = v52 & 0xFFFFFFFF00000000 | v70;
      }
      else
      {
        v61 = *((_DWORD *)this + 41);
        v62 = HIDWORD(v60);
        v48 = __OFADD__(HIDWORD(v52), (_DWORD)v62);
        v63 = HIDWORD(v52) + v62;
        if (v48)
          v63 = (HIDWORD(v52) >> 31) + 0x7FFFFFFF;
        v48 = __OFSUB__(v61, v63);
        v64 = v61 - v63;
        v65 = (v61 >> 31) + 0x7FFFFFFF;
        if (v48)
          v64 = v65;
        v52 = *((_QWORD *)v4 + 32) | ((unint64_t)v64 << 32);
      }
    }
    v56 = WebCore::RenderBox::contentBoxRect(v4);
    LODWORD(v57) = v56 - v52;
    if (__OFSUB__((_DWORD)v56, (_DWORD)v52))
      v57 = (v56 >> 31) + 0x7FFFFFFF;
    else
      v57 = v57;
    LODWORD(v58) = (HIDWORD(v56) >> 31) + 0x7FFFFFFF;
    if (__OFSUB__(HIDWORD(v56), HIDWORD(v52)))
      v58 = v58;
    else
      v58 = (HIDWORD(v56) - HIDWORD(v52));
    v74.var0 = (FloatPoint)(v57 | (v58 << 32));
    WebCore::TransformState::move(a2, (WebCore::LayoutSize *)&v74, 0);
  }
  return v4;
}

uint64_t WebCore::RenderFragmentedFlow::getFragmentRangeForBox(WebCore::RenderFragmentedFlow *this, const WebCore::RenderBox *a2, WebCore::RenderFragmentContainer **a3, WebCore::RenderFragmentContainer **a4)
{
  uint64_t *v8;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  _QWORD **v15;
  _QWORD *v16;
  uint64_t v17;
  WebCore::RenderFragmentContainer *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int i;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::RenderFragmentContainer *v29;
  WebCore::RenderFragmentContainer *v30;

  *a4 = 0;
  *a3 = 0;
  if ((*((_BYTE *)this + 328) & 1) != 0)
    return 0;
  v8 = (uint64_t *)((char *)this + 248);
  if ((WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)this + 31, a2) & 1) != 0)return 0;
  v10 = (WTF *)*((_QWORD *)this + 32);
  if (v10)
  {
    do
    {
      v11 = (WTF *)*((_QWORD *)v10 + 2);
      if (!*(_QWORD *)(*(_QWORD *)v10 + 8))
        WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::remove(v8, v8, v10);
      v10 = v11;
    }
    while (v11);
  }
  *((_DWORD *)this + 68) = 0;
  v12 = *((_QWORD *)this + 31);
  if (v12)
  {
    v13 = *(_DWORD *)(v12 - 12);
    if (v13 >= 0x7FFFFFFF)
      v14 = -2;
    else
      v14 = 2 * v13;
    *((_DWORD *)this + 69) = v14;
    if (*(_DWORD *)(v12 - 12) == 1)
    {
      v15 = (_QWORD **)((char *)this + 256);
      do
      {
        v16 = *v15;
        v17 = *v16;
        v15 = (_QWORD **)(v16 + 2);
        v18 = *(WebCore::RenderFragmentContainer **)(v17 + 8);
      }
      while (!v18);
      *a4 = v18;
      *a3 = v18;
      return 1;
    }
  }
  else
  {
    *((_DWORD *)this + 69) = 0;
  }
  v19 = *((_QWORD *)this + 36);
  if (!v19)
    return 0;
  v20 = *(_DWORD *)(v19 - 8);
  v21 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
  v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
  v24 = v20 & ((v23 >> 31) ^ v23);
  for (i = 1; ; v24 = (v26 + i++) & v20)
  {
    v26 = v24;
    v27 = *(_QWORD *)(v19 + 32 * v24);
    if (v27 != -1)
    {
      if (!v27)
        return 0;
      if (*(const WebCore::RenderBox **)(v27 + 8) == a2)
        break;
    }
  }
  if ((_DWORD)v26 == *(_DWORD *)(v19 - 4))
    return 0;
  v28 = v19 + 32 * v26;
  v29 = *(WebCore::RenderFragmentContainer **)(v28 + 8);
  if (v29)
    v29 = (WebCore::RenderFragmentContainer *)*((_QWORD *)v29 + 1);
  *a3 = v29;
  v30 = *(WebCore::RenderFragmentContainer **)(v28 + 16);
  if (v30)
    v30 = (WebCore::RenderFragmentContainer *)*((_QWORD *)v30 + 1);
  *a4 = v30;
  return 1;
}

uint64_t WebCore::RenderFragmentedFlow::logicalWidthChangedInFragmentsForBlock(uint64_t this, const WebCore::RenderBlock *a2, BOOL *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  int i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  WebCore::RenderFragmentContainer *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int j;
  _QWORD *v28;
  WebCore::RenderFragmentContainer *v29;
  uint64_t v30;
  WebCore::RenderFragmentContainer *v31;
  uint64_t *v32;
  int v33;
  unsigned int v34;
  int k;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  WebCore::RenderFragmentContainer *v42;
  WebCore::RenderFragmentContainer *v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  int m;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  WTF *v52;
  uint64_t v53;
  WebCore::RenderFragmentContainer *v54;
  WebCore::RenderFragmentContainer *v55;

  if ((*(_BYTE *)(this + 328) & 1) == 0)
  {
    v5 = this;
    v6 = (uint64_t *)(this + 248);
    this = WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)(this + 248), a2);
    if ((this & 1) == 0)
    {
      v7 = *(_QWORD *)(v5 + 288);
      if (v7)
      {
        v8 = *(_DWORD *)(v7 - 8);
        v9 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
        v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
        v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
        v12 = (v11 >> 31) ^ v11;
        v13 = v8 & v12;
        for (i = 1; ; v13 = (v15 + i++) & v8)
        {
          v15 = v13;
          v16 = *(_QWORD *)(v7 + 32 * v13);
          if (v16 != -1)
          {
            if (!v16)
              return this;
            if (*(const WebCore::RenderBlock **)(v16 + 8) == a2)
              break;
          }
        }
        if ((_DWORD)v15 != *(_DWORD *)(v7 - 4))
        {
          v17 = v7 + 32 * v15;
          v18 = *(_BYTE *)(v17 + 24);
          *(_BYTE *)(v17 + 24) = 0;
          if (!*a3)
          {
            if (a2 == (const WebCore::RenderBlock *)v5)
            {
              *a3 = (*(_BYTE *)(v5 + 328) & 8) != 0;
              return this;
            }
            v54 = 0;
            v55 = 0;
            this = WebCore::RenderFragmentedFlow::getFragmentRangeForBox((WebCore::RenderFragmentedFlow *)v5, a2, &v55, &v54);
            if ((_DWORD)this)
            {
              v19 = v55;
              ++*(_DWORD *)(v5 + 272);
              v20 = *((_QWORD *)v19 + 1);
              if (v20)
              {
                if (*(_QWORD *)(v20 + 8))
                {
                  v21 = *v6;
                  if (*v6)
                  {
                    v22 = *(_DWORD *)(v21 - 8);
                    v23 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
                    v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
                    v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
                    v26 = v22 & ((v25 >> 31) ^ v25);
                    for (j = 1; ; ++j)
                    {
                      v28 = *(_QWORD **)(v21 + 8 * v26);
                      if (!v28)
                        return this;
                      if (v28 != (_QWORD *)-1 && *v28 == v20)
                        break;
                      v26 = (v26 + j) & v22;
                    }
                    if (v26 == *(_DWORD *)(v21 - 4))
                      return this;
                    while (1)
                    {
                      v29 = *(WebCore::RenderFragmentContainer **)(*v28 + 8);
                      if (v29)
                        break;
                      v28 = (_QWORD *)v28[2];
                      if (!v28)
                        return this;
                    }
                    v30 = *((_QWORD *)v29 + 34);
                    if (!v30)
                      goto LABEL_59;
                    v31 = v54;
                    v32 = (uint64_t *)((char *)v29 + 272);
                    while (2)
                    {
                      v33 = *(_DWORD *)(v30 - 8);
                      v34 = v33 & v12;
                      for (k = 1; ; v34 = (v36 + k++) & v33)
                      {
                        v36 = v34;
                        v37 = *(_QWORD *)(v30 + 16 * v34);
                        if (v37 != -1)
                        {
                          if (!v37)
                            goto LABEL_59;
                          if (*(const WebCore::RenderBlock **)(v37 + 8) == a2)
                            break;
                        }
                      }
                      if ((_DWORD)v36 == *(_DWORD *)(v30 - 4))
                        goto LABEL_59;
                      v38 = v30 + 16 * v36;
                      v39 = *(_QWORD *)(v38 + 8);
                      *(_QWORD *)(v38 + 8) = 0;
                      v40 = *v32;
                      if (!*v32 || (v40 += 16 * *(unsigned int *)(v40 - 4), v40 != v38))
                      {
                        if (v40 != v38)
                        {
                          v53 = v39;
                          v41 = v32;
                          v42 = v31;
                          v43 = v29;
                          this = (uint64_t)WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::remove(v32, (WTF **)v38);
                          v29 = v43;
                          v31 = v42;
                          v32 = v41;
                          v39 = v53;
                        }
                      }
                      if (!v39)
                      {
LABEL_59:
                        *a3 = v18;
                        return this;
                      }
                      v44 = *v32;
                      if (!*v32)
                        goto LABEL_49;
                      v45 = *(_DWORD *)(v44 - 8);
                      v46 = v45 & v12;
                      for (m = 1; ; v46 = (v48 + m++) & v45)
                      {
                        v48 = v46;
                        v49 = *(_QWORD *)(v44 + 16 * v46);
                        if (v49 != -1)
                        {
                          if (!v49)
                            goto LABEL_49;
                          if (*(const WebCore::RenderBlock **)(v49 + 8) == a2)
                            break;
                        }
                      }
                      v50 = *(_QWORD *)(v44 + 16 * v48 + 8);
                      if (v50 && *(_DWORD *)(v50 + 4) == *(_DWORD *)(v39 + 4))
                      {
                        v51 = 2 * (v29 == v31);
                      }
                      else
                      {
LABEL_49:
                        v51 = 1;
                        *a3 = 1;
                      }
                      v52 = *(WTF **)(v39 + 16);
                      *(_QWORD *)(v39 + 16) = 0;
                      if (v52)
                      {
                        if (*(_DWORD *)v52 == 1)
                          WTF::fastFree(v52, (void *)v38);
                        else
                          --*(_DWORD *)v52;
                      }
                      this = WTF::fastFree((WTF *)v39, (void *)v38);
                      if (!v51)
                      {
                        do
                        {
                          v28 = (_QWORD *)v28[2];
                          if (!v28)
                          {
                            ++*(_DWORD *)(v5 + 272);
                            return this;
                          }
                          v29 = *(WebCore::RenderFragmentContainer **)(*v28 + 8);
                        }
                        while (!v29);
                        ++*(_DWORD *)(v5 + 272);
                        v32 = (uint64_t *)((char *)v29 + 272);
                        v30 = *((_QWORD *)v29 + 34);
                        if (v30)
                          continue;
                        goto LABEL_59;
                      }
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderFragmentedFlow::contentLogicalWidthOfFirstFragment(WebCore::RenderFragmentedFlow *this, void *a2)
{
  _QWORD **v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  unsigned int v27;
  int v28;
  int v29;

  if ((WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)this + 31, a2) & 1) != 0)return 0;
  v4 = (_QWORD **)((char *)this + 256);
  do
  {
    v5 = *v4;
    v6 = *v5;
    v4 = (_QWORD **)(v5 + 2);
    v7 = *(_QWORD *)(v6 + 8);
  }
  while (!v7);
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
    return WebCore::RenderBox::contentHeight((WebCore::RenderBox *)v7);
  v8 = *(_DWORD *)(v7 + 160);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1016))(v7);
  if (__OFSUB__(v8, v9))
    v10 = (v8 >> 31) + 0x7FFFFFFF;
  else
    v10 = v8 - v9;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1024))(v7);
  if (__OFSUB__(v10, v11))
    v12 = (v10 >> 31) + 0x7FFFFFFF;
  else
    v12 = v10 - v11;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1352))(v7);
  v14 = v13 << 6;
  if (v13 < -33554432)
    v14 = 0x80000000;
  if (v13 > 0x1FFFFFF)
    v14 = 0x7FFFFFFF;
  v15 = __OFSUB__(v12, v14);
  v16 = v12 - v14;
  if (v15)
    v16 = (v12 >> 31) + 0x7FFFFFFF;
  v17 = v16 & ~(v16 >> 31);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 944))(v7);
  if (__OFSUB__(v17, v18))
    v19 = 0x7FFFFFFF;
  else
    v19 = v17 - v18;
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 952))(v7);
  v21 = v19 - v20;
  if (__OFSUB__(v19, v20))
    v21 = (v19 >> 31) + 0x7FFFFFFF;
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 40) + 584) & 0x100) != 0)
  {
    v25 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1352);
    v26 = v7;
    v27 = v21;
    v28 = v25(v26);
    v21 = v27;
    v29 = v28 << 6;
    if (v28 > 0x1FFFFFF)
      v29 = 0x7FFFFFFF;
    if (v28 >= -33554432)
      v22 = v29;
    else
      v22 = 0x80000000;
  }
  else
  {
    v22 = 0;
  }
  v15 = __OFSUB__(v21, v22);
  v23 = v21 - v22;
  v24 = (v21 >> 31) + 0x7FFFFFFF;
  if (!v15)
    v24 = v23;
  return v24 & ~(v24 >> 31);
}

uint64_t WebCore::RenderFragmentedFlow::contentLogicalHeightOfFirstFragment(WebCore::RenderFragmentedFlow *this, void *a2)
{
  _QWORD **v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  unsigned int v27;
  int v28;
  int v29;

  if ((WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)this + 31, a2) & 1) != 0)return 0;
  v4 = (_QWORD **)((char *)this + 256);
  do
  {
    v5 = *v4;
    v6 = *v5;
    v4 = (_QWORD **)(v5 + 2);
    v7 = *(_QWORD *)(v6 + 8);
  }
  while (!v7);
  if ((*((_BYTE *)this + 21) & 0x10) == 0)
    return WebCore::RenderBox::contentHeight((WebCore::RenderBox *)v7);
  v8 = *(_DWORD *)(v7 + 160);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1016))(v7);
  if (__OFSUB__(v8, v9))
    v10 = (v8 >> 31) + 0x7FFFFFFF;
  else
    v10 = v8 - v9;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1024))(v7);
  if (__OFSUB__(v10, v11))
    v12 = (v10 >> 31) + 0x7FFFFFFF;
  else
    v12 = v10 - v11;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1352))(v7);
  v14 = v13 << 6;
  if (v13 < -33554432)
    v14 = 0x80000000;
  if (v13 > 0x1FFFFFF)
    v14 = 0x7FFFFFFF;
  v15 = __OFSUB__(v12, v14);
  v16 = v12 - v14;
  if (v15)
    v16 = (v12 >> 31) + 0x7FFFFFFF;
  v17 = v16 & ~(v16 >> 31);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 944))(v7);
  if (__OFSUB__(v17, v18))
    v19 = 0x7FFFFFFF;
  else
    v19 = v17 - v18;
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 952))(v7);
  v21 = v19 - v20;
  if (__OFSUB__(v19, v20))
    v21 = (v19 >> 31) + 0x7FFFFFFF;
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 40) + 584) & 0x100) != 0)
  {
    v25 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1352);
    v26 = v7;
    v27 = v21;
    v28 = v25(v26);
    v21 = v27;
    v29 = v28 << 6;
    if (v28 > 0x1FFFFFF)
      v29 = 0x7FFFFFFF;
    if (v28 >= -33554432)
      v22 = v29;
    else
      v22 = 0x80000000;
  }
  else
  {
    v22 = 0;
  }
  v15 = __OFSUB__(v21, v22);
  v23 = v21 - v22;
  v24 = (v21 >> 31) + 0x7FFFFFFF;
  if (!v15)
    v24 = v23;
  return v24 & ~(v24 >> 31);
}

void WebCore::RenderFragmentedFlow::setFragmentRangeForBox(WebCore::RenderFragmentedFlow *this, const WebCore::RenderBox *a2, WebCore::RenderFragmentContainer *a3, WebCore::RenderFragmentContainer *a4)
{
  WebCore::RenderFragmentedFlow *v6;
  WTF *v7;
  uint64_t v8;
  uint64_t *v9;
  WebCore::RenderFragmentContainer *v10;
  uint64_t v11;
  WebCore::RenderFragmentedFlow *v12;
  WebCore::RenderFragmentContainer *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int i;
  uint64_t v22;
  WTF **v23;
  WTF *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t *v27;
  WTF *v28;
  WebCore::RenderFragmentContainer **v29;
  WTF *v30;
  uint64_t v31;
  WebCore::RenderFragmentContainer *v32;
  WTF *v33;
  WTF *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  WebCore::RenderFragmentContainer *v42;
  WebCore::RenderFragmentContainer *v43;
  WebCore::RenderFragmentContainer *v44;
  _QWORD *v45;
  WebCore::RenderFragmentContainer *v46;
  char v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  char v53;
  char v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  int v58;
  unsigned int j;
  uint64_t v60;
  uint64_t v61;
  int k;
  uint64_t v63;
  uint64_t v64;
  WebCore::RenderFragmentedFlow *v65;
  WebCore::RenderFragmentContainer *v66;
  WebCore::RenderFragmentContainer *v67;
  WTF *v69;
  WebCore::RenderFragmentContainer *v70;
  WebCore::RenderFragmentedFlow *v71;
  WTF *v72;
  WebCore::RenderFragmentedFlow *v73;
  WebCore::RenderFragmentContainer *v74;
  uint64_t v75;
  WTF *v76;
  WebCore::RenderFragmentedFlow *v77;
  WebCore::RenderFragmentContainer *v78;
  WebCore::RenderFragmentedFlow *v79;
  WebCore::RenderFragmentContainer *v80;
  WebCore::RenderFragmentedFlow *v81;
  WebCore::RenderFragmentContainer *v82;
  int v83;

  v6 = this;
  v7 = (WTF *)*((_QWORD *)a2 + 1);
  if (!v7)
  {
    v67 = a4;
    v7 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v7 = 1;
    *((_QWORD *)v7 + 1) = a2;
    v69 = (WTF *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v7;
    if (v69)
    {
      if (*(_DWORD *)v69 == 1)
      {
        WTF::fastFree(v69, a2);
        v7 = (WTF *)*((_QWORD *)a2 + 1);
      }
      else
      {
        --*(_DWORD *)v69;
      }
    }
    v6 = this;
    a4 = v67;
  }
  ++*(_DWORD *)v7;
  if (a3)
  {
    v8 = *((_QWORD *)a3 + 1);
    if (v8)
    {
LABEL_4:
      ++*(_DWORD *)v8;
      goto LABEL_6;
    }
    v70 = a4;
    v71 = v6;
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = a3;
    v72 = (WTF *)*((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = v8;
    if (!v72)
    {
LABEL_100:
      v6 = v71;
      a4 = v70;
      goto LABEL_4;
    }
    if (*(_DWORD *)v72 != 1)
    {
      --*(_DWORD *)v72;
      goto LABEL_100;
    }
    WTF::fastFree(v72, a2);
    v8 = *((_QWORD *)a3 + 1);
    v6 = v71;
    a4 = v70;
    if (v8)
      goto LABEL_4;
  }
  else
  {
    v8 = 0;
  }
LABEL_6:
  v9 = (uint64_t *)((char *)v6 + 288);
  if (a4)
  {
    v10 = (WebCore::RenderFragmentContainer *)*((_QWORD *)a4 + 1);
    if (v10)
    {
LABEL_8:
      ++*(_DWORD *)v10;
      goto LABEL_10;
    }
    v73 = v6;
    v74 = a4;
    v75 = WTF::fastCompactMalloc((WTF *)0x10);
    a4 = v74;
    v10 = (WebCore::RenderFragmentContainer *)v75;
    *(_DWORD *)v75 = 1;
    *(_QWORD *)(v75 + 8) = v74;
    v76 = (WTF *)*((_QWORD *)v74 + 1);
    *((_QWORD *)v74 + 1) = v10;
    if (!v76)
    {
LABEL_104:
      v6 = v73;
      goto LABEL_8;
    }
    if (*(_DWORD *)v76 != 1)
    {
      --*(_DWORD *)v76;
      goto LABEL_104;
    }
    WTF::fastFree(v76, a2);
    a4 = v74;
    v10 = (WebCore::RenderFragmentContainer *)*((_QWORD *)v74 + 1);
    v6 = v73;
    if (v10)
      goto LABEL_8;
  }
  else
  {
    v10 = 0;
  }
LABEL_10:
  v11 = *v9;
  if (*v9
    || (v12 = v6,
        v13 = a4,
        WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::RenderFragmentedFlow::RenderFragmentContainerRange>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::RenderFragmentedFlow::RenderFragmentContainerRange>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::RenderFragmentedFlow::RenderFragmentContainerRange,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::RenderFragmentedFlow::RenderFragmentContainerRange>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::rehash(v9, 8u, 0), a4 = v13, v6 = v12, (v11 = *v9) != 0))
  {
    v14 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = 0;
  v16 = *((_QWORD *)v7 + 1);
  v17 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
  v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = (v19 >> 31) ^ v19;
  for (i = 1; ; ++i)
  {
    v22 = v20 & v14;
    v23 = (WTF **)(v11 + 32 * v22);
    v24 = *v23;
    if (*v23 != (WTF *)-1)
      break;
    v15 = v11 + 32 * v22;
LABEL_19:
    v20 = i + v22;
  }
  if (!v24)
  {
    if (v15)
    {
      *(_OWORD *)v15 = 0u;
      *(_OWORD *)(v15 + 16) = 0u;
      --*(_DWORD *)(*v9 - 16);
      *(_QWORD *)v15 = v7;
    }
    else
    {
      *v23 = v7;
      v15 = v11 + 32 * v22;
    }
    v33 = *(WTF **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v8;
    if (v33)
    {
      if (*(_DWORD *)v33 == 1)
        WTF::fastFree(v33, a2);
      else
        --*(_DWORD *)v33;
    }
    v34 = *(WTF **)(v15 + 16);
    *(_QWORD *)(v15 + 16) = v10;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, a2);
      else
        --*(_DWORD *)v34;
    }
    v35 = 1;
    *(_BYTE *)(v15 + 24) = 1;
    v36 = *v9;
    if (*v9)
      v35 = *(_DWORD *)(v36 - 12) + 1;
    *(_DWORD *)(v36 - 12) = v35;
    v37 = *v9;
    if (*v9)
      v38 = *(_DWORD *)(v37 - 12);
    else
      v38 = 0;
    v39 = (*(_DWORD *)(v37 - 16) + v38);
    v40 = *(unsigned int *)(v37 - 4);
    if (v40 > 0x400)
    {
      if (v40 > 2 * v39)
        return;
    }
    else
    {
      if (3 * v40 > 4 * v39)
        return;
      if (!(_DWORD)v40)
      {
        v41 = 8;
        goto LABEL_90;
      }
    }
    v41 = (_DWORD)v40 << (6 * *(_DWORD *)(v37 - 12) >= (2 * v40));
LABEL_90:
    WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::RenderFragmentedFlow::RenderFragmentContainerRange>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::RenderFragmentedFlow::RenderFragmentContainerRange>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::RenderFragmentedFlow::RenderFragmentContainerRange,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::RenderFragmentedFlow::RenderFragmentContainerRange>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::rehash(v9, v41, (WTF **)v15);
    return;
  }
  if (*((_QWORD *)v24 + 1) != v16)
    goto LABEL_19;
  v25 = v11 + 32 * v22;
  v27 = (uint64_t *)(v25 + 8);
  v26 = *(WTF **)(v25 + 8);
  *(_QWORD *)(v25 + 8) = v8;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
    {
      v77 = v6;
      v78 = a4;
      WTF::fastFree(v26, a2);
      a4 = v78;
      v6 = v77;
    }
    else
    {
      --*(_DWORD *)v26;
    }
  }
  v30 = *(WTF **)(v25 + 16);
  v29 = (WebCore::RenderFragmentContainer **)(v25 + 16);
  v28 = v30;
  *v29 = v10;
  if (v30)
  {
    if (*(_DWORD *)v28 == 1)
    {
      v79 = v6;
      v80 = a4;
      WTF::fastFree(v28, a2);
      a4 = v80;
      v6 = v79;
    }
    else
    {
      --*(_DWORD *)v28;
    }
  }
  *(_BYTE *)(v11 + 32 * v22 + 24) = 1;
  if (*(_DWORD *)v7 == 1)
  {
    v81 = v6;
    v82 = a4;
    WTF::fastFree(v7, a2);
    a4 = v82;
    v6 = v81;
  }
  else
  {
    --*(_DWORD *)v7;
  }
  v31 = *v27;
  if (*v27)
    v32 = *(WebCore::RenderFragmentContainer **)(v31 + 8);
  else
    v32 = 0;
  if (v32 != a3)
    goto LABEL_117;
  v42 = *v29;
  if (*v29)
    v42 = (WebCore::RenderFragmentContainer *)*((_QWORD *)v42 + 1);
  if (v42 != a4)
  {
LABEL_117:
    v43 = v31 ? *(WebCore::RenderFragmentContainer **)(v31 + 8) : 0;
    v44 = *v29 ? (WebCore::RenderFragmentContainer *)*((_QWORD *)*v29 + 1) : 0;
    v45 = (_QWORD *)*((_QWORD *)v6 + 32);
    if (v45)
    {
      while (1)
      {
        v46 = *(WebCore::RenderFragmentContainer **)(*v45 + 8);
        if (v46)
          break;
        v45 = (_QWORD *)v45[2];
        if (!v45)
          return;
      }
      v47 = 0;
      v48 = 0;
      v49 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
      v50 = 9 * ((v49 + ~(v49 << 13)) ^ ((v49 + ~(v49 << 13)) >> 8));
      v51 = (v50 ^ (v50 >> 15)) + ~((v50 ^ (v50 >> 15)) << 27);
      v52 = (v51 >> 31) ^ v51;
      while (1)
      {
        v53 = v47 | (v46 == v43);
        v54 = (v46 == a3) | v48;
        if (!(v47 & 1 | (v46 == v43)) || !((v46 == a3) | v48 & 1))
        {
          v55 = *((_QWORD *)v46 + 34);
          if (v55)
          {
            v56 = *(_DWORD *)(v55 - 8);
            v57 = v56 & v52;
            v58 = 1;
            for (j = v56 & v52; ; j = (v60 + v58++) & v56)
            {
              v60 = j;
              v61 = *(_QWORD *)(v55 + 16 * j);
              if (v61 != -1)
              {
                if (!v61)
                  goto LABEL_81;
                if (*(const WebCore::RenderBox **)(v61 + 8) == a2)
                  break;
              }
            }
            if (*(_QWORD *)(v55 + 16 * v60 + 8))
            {
              for (k = 1; ; ++k)
              {
                v63 = v57;
                v64 = *(_QWORD *)(v55 + 16 * v57);
                if (v64 != -1)
                {
                  if (!v64)
                    goto LABEL_81;
                  if (*(const WebCore::RenderBox **)(v64 + 8) == a2)
                    break;
                }
                v57 = (v63 + k) & v56;
              }
              if ((_DWORD)v63 != *(_DWORD *)(v55 - 4))
              {
                v65 = v6;
                v66 = a4;
                v83 = v52;
                WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::remove((uint64_t *)v46 + 34, (WTF **)(v55 + 16 * v63));
                v52 = v83;
                a4 = v66;
                v6 = v65;
              }
            }
          }
        }
LABEL_81:
        v45 = (_QWORD *)v45[2];
        if (!v45)
          break;
        v47 = (v46 != v44) & v53;
        v48 = (v46 != a4) & v54;
        while (1)
        {
          v46 = *(WebCore::RenderFragmentContainer **)(*v45 + 8);
          if (v46)
            break;
          v45 = (_QWORD *)v45[2];
          if (!v45)
            goto LABEL_87;
        }
        ++*((_DWORD *)v6 + 68);
      }
LABEL_87:
      ++*((_DWORD *)v6 + 68);
    }
  }
}

uint64_t WebCore::RenderFragmentedFlow::hasCachedFragmentRangeForBox(WebCore::RenderFragmentedFlow *this, const WebCore::RenderBox *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;

  v2 = *((_QWORD *)this + 36);
  if (!v2)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  for (i = 1; ; ++i)
  {
    v9 = *(_QWORD *)(v2 + 32 * v7);
    if (v9 != -1)
    {
      if (!v9)
        return 0;
      if (*(const WebCore::RenderBox **)(v9 + 8) == a2)
        break;
    }
    v7 = (v7 + i) & v3;
  }
  return 1;
}

uint64_t WebCore::RenderFragmentedFlow::fragmentInRange(WebCore::RenderFragmentedFlow *this, const WebCore::RenderFragmentContainer *a2, const WebCore::RenderFragmentContainer *a3, const WebCore::RenderFragmentContainer *a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  _QWORD *v13;
  const WebCore::RenderFragmentContainer *v14;

  v4 = *((_DWORD *)this + 68) + 1;
  *((_DWORD *)this + 68) = v4;
  v5 = *((_QWORD *)a3 + 1);
  if (v5)
  {
    if (*(_QWORD *)(v5 + 8))
    {
      v6 = *((_QWORD *)this + 31);
      if (v6)
      {
        v7 = *(_DWORD *)(v6 - 8);
        v8 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
        v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
        v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
        v11 = v7 & ((v10 >> 31) ^ v10);
        for (i = 1; ; ++i)
        {
          v13 = *(_QWORD **)(v6 + 8 * v11);
          if (!v13)
            break;
          if (v13 != (_QWORD *)-1 && *v13 == v5)
          {
            if (v11 == *(_DWORD *)(v6 - 4))
              return 0;
            while (1)
            {
              v14 = *(const WebCore::RenderFragmentContainer **)(*v13 + 8);
              if (v14)
                break;
              v13 = (_QWORD *)v13[2];
              if (!v13)
                return 0;
            }
            if (v14 == a2)
              return 1;
            while (2)
            {
              v5 = v14 != a4;
              if (v14 != a4)
              {
                do
                {
                  v13 = (_QWORD *)v13[2];
                  if (!v13)
                  {
                    v5 = 0;
                    *((_DWORD *)this + 68) = v4 + 1;
                    return v5;
                  }
                  v14 = *(const WebCore::RenderFragmentContainer **)(*v13 + 8);
                }
                while (!v14);
                *((_DWORD *)this + 68) = ++v4;
                if (v14 != a2)
                  continue;
              }
              break;
            }
            return v5;
          }
          v11 = (v11 + i) & v7;
        }
      }
    }
    return 0;
  }
  return v5;
}

uint64_t WebCore::RenderFragmentedFlow::objectShouldFragmentInFlowFragment(WebCore::RenderFragmentedFlow *this, const WebCore::RenderObject *a2, const WebCore::RenderFragmentContainer *a3)
{
  WebCore::RenderFragmentedFlow *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  _QWORD *v16;
  const WebCore::RenderObject *v17;
  unsigned int v18;
  WebCore::RenderFragmentContainer *v19;
  WebCore::RenderFragmentContainer *v20;

  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
    v6 = (WebCore::RenderFragmentedFlow *)(*(uint64_t (**)(const WebCore::RenderObject *))(*(_QWORD *)a2 + 648))(a2);
  else
    v6 = 0;
  if (v6 == this)
  {
    ++*((_DWORD *)this + 68);
    v8 = *((_QWORD *)a3 + 1);
    if (v8)
    {
      if (*(_QWORD *)(v8 + 8))
      {
        v9 = *((_QWORD *)this + 31);
        if (v9)
        {
          v10 = *(_DWORD *)(v9 - 8);
          v11 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
          v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
          v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
          v14 = v10 & ((v13 >> 31) ^ v13);
          for (i = 1; ; ++i)
          {
            v16 = *(_QWORD **)(v9 + 8 * v14);
            if (!v16)
              break;
            if (v16 != (_QWORD *)-1 && *v16 == v8)
            {
              v19 = 0;
              v20 = 0;
              v17 = a2;
              if ((*((_BYTE *)a2 + 45) & 4) == 0)
              {
                v17 = a2;
                do
                  v17 = *(const WebCore::RenderObject **)(*((_QWORD *)v17 + 4) + 8);
                while ((*((_BYTE *)v17 + 45) & 4) == 0);
              }
              if (!WebCore::RenderFragmentedFlow::computedFragmentRangeForBox(this, v17, &v20, &v19)
                || (result = WebCore::RenderFragmentedFlow::fragmentInRange(this, a3, v20, v19), (_DWORD)result))
              {
                v18 = *((unsigned __int8 *)a2 + 45);
                if ((v18 & 4) != 0)
                  return 1;
                else
                  return (v18 >> 5) & 1;
              }
              return result;
            }
            v14 = (v14 + i) & v10;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t *WebCore::RenderFragmentedFlow::deleteLines(uint64_t *this, void *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  WTF **v6;
  WTF *v7;
  uint64_t v8;
  uint64_t *v9;
  WebCore::Element *v10;
  char v11;

  v2 = (uint64_t)this;
  v3 = (uint64_t *)this[35];
  if (v3)
  {
    v4 = *v3;
    if (*v3)
    {
      *v3 = 0;
      v5 = *(unsigned int *)(v4 - 4);
      if ((_DWORD)v5)
      {
        v6 = (WTF **)(v4 + 8);
        do
        {
          if (*(v6 - 1) != (WTF *)-1)
          {
            v7 = *v6;
            *v6 = 0;
            if (v7)
            {
              if (*(_DWORD *)v7 == 1)
                WTF::fastFree(v7, a2);
              else
                --*(_DWORD *)v7;
            }
          }
          v6 += 2;
          --v5;
        }
        while (v5);
      }
      this = (uint64_t *)WTF::fastFree((WTF *)(v4 - 16), a2);
    }
  }
  v8 = *(unsigned int *)(v2 + 240);
  if ((_DWORD)v8 != -1)
  {
    if (!(_DWORD)v8)
      goto LABEL_17;
    this = (uint64_t *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateENS_10unique_ptrIN7WebCore17LayoutIntegration10LineLayoutENS_14default_deleteISA_EEEENS7_INS8_16LegacyLineLayoutENSB_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v8])(&v11, v2 + 232);
  }
  *(_DWORD *)(v2 + 240) = 0;
LABEL_17:
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    this = (uint64_t *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40)
                                                                                         + 8));
    if (this)
    {
      v9 = this;
      v10 = (WebCore::Element *)WebCore::RenderElement::element((WebCore::RenderElement *)v2);
      return WebCore::AXObjectCache::deferRecomputeIsIgnored(v9, v10);
    }
  }
  return this;
}

void WebCore::RenderFragmentedFlow::willBeDestroyed(WebCore::RenderFragmentedFlow *this, void *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  WTF **v6;
  WTF *v7;

  v3 = (uint64_t *)*((_QWORD *)this + 35);
  if (v3)
  {
    v4 = *v3;
    if (*v3)
    {
      *v3 = 0;
      v5 = *(unsigned int *)(v4 - 4);
      if ((_DWORD)v5)
      {
        v6 = (WTF **)(v4 + 8);
        do
        {
          if (*(v6 - 1) != (WTF *)-1)
          {
            v7 = *v6;
            *v6 = 0;
            if (v7)
            {
              if (*(_DWORD *)v7 == 1)
                WTF::fastFree(v7, a2);
              else
                --*(_DWORD *)v7;
            }
          }
          v6 += 2;
          --v5;
        }
        while (v5);
      }
      WTF::fastFree((WTF *)(v4 - 16), a2);
    }
  }
  WebCore::RenderBlockFlow::willBeDestroyed(this, a2);
}

uint64_t WebCore::RenderFragmentedFlow::addForcedFragmentBreak(uint64_t a1, void *a2, unsigned int a3, uint64_t a4, uint64_t a5, int *a6)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;

  WebCore::RenderFragmentedFlow::updateFragmentsFragmentedFlowPortionRect((uint64_t *)a1, a2);
  v10 = (*(uint64_t (**)(uint64_t, void *, _QWORD, _QWORD))(*(_QWORD *)a1 + 2000))(a1, a2, a3, 0);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 256);
    if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
    {
      v12 = *(_QWORD *)(v10 + 264);
    }
    else
    {
      v11 >>= 32;
      LODWORD(v12) = *(_DWORD *)(v10 + 268);
    }
    v13 = __OFADD__((_DWORD)v11, (_DWORD)v12);
    v14 = v11 + v12;
    v15 = (v11 >> 31) + 0x7FFFFFFF;
    if (!v13)
      v15 = v14;
    if (a6)
    {
      v13 = __OFSUB__(v15, a3);
      v16 = v15 - a3;
      v17 = (v15 >> 31) + 0x7FFFFFFF;
      if (!v13)
        v17 = v16;
      *a6 = v17 & ~(v17 >> 31);
    }
  }
  return 0;
}

_QWORD *WebCore::RenderFragmentedFlow::collectLayerFragments(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v8;

  v4 = (_QWORD *)result[32];
  if (v4)
  {
    v8 = result;
    while (1)
    {
      result = *(_QWORD **)(*v4 + 8);
      if (result)
        break;
      v4 = (_QWORD *)v4[2];
      if (!v4)
        return result;
    }
LABEL_6:
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*result + 2016))(result, a2, a3, a4);
    while (1)
    {
      v4 = (_QWORD *)v4[2];
      if (!v4)
        break;
      result = *(_QWORD **)(*v4 + 8);
      if (result)
      {
        ++*((_DWORD *)v8 + 68);
        goto LABEL_6;
      }
    }
    ++*((_DWORD *)v8 + 68);
  }
  return result;
}

unint64_t WebCore::RenderFragmentedFlow::fragmentsBoundingBox(WebCore::RenderFragmentedFlow *this, const WebCore::LayoutRect *a2)
{
  _QWORD *v2;
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  WTF *v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  signed int v18;
  int v19;
  int v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  signed int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  signed int v53;
  signed int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  __int128 v60;
  WTF *v61;
  uint64_t v62;
  _BYTE v63[104];

  v2 = (_QWORD *)*((_QWORD *)this + 32);
  if (!v2)
    return 0;
  while (1)
  {
    v5 = *(_QWORD *)(*v2 + 8);
    if (v5)
      break;
    v2 = (_QWORD *)v2[2];
    if (!v2)
      return 0;
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = xmmword_1969FCA90;
LABEL_6:
  v61 = (WTF *)v63;
  v62 = 1;
  v60 = v10;
  (*(void (**)(uint64_t, WTF **, const WebCore::LayoutRect *, __int128 *))(*(_QWORD *)v5 + 2016))(v5, &v61, a2, &v60);
  v12 = v61;
  if (HIDWORD(v62))
  {
    v13 = *(_QWORD *)a2;
    v14 = HIDWORD(*(_QWORD *)a2);
    v15 = *((_DWORD *)a2 + 2);
    v16 = *((_DWORD *)a2 + 3);
    v17 = __OFADD__(*(_QWORD *)a2, v15);
    v18 = *(_QWORD *)a2 + v15;
    v19 = v17;
    v17 = __OFADD__((_DWORD)v14, v16);
    v20 = v14 + v16;
    v21 = v17;
    v22 = (_DWORD *)((char *)v61 + 100);
    v23 = 104 * HIDWORD(v62);
    v10 = xmmword_1969FCA90;
    do
    {
      v25 = *(v22 - 3);
      v24 = *(v22 - 2);
      if ((int)v13 <= v25)
        v26 = *(v22 - 3);
      else
        v26 = *(_QWORD *)a2;
      if ((int)v14 <= v24)
        v27 = *(v22 - 2);
      else
        v27 = HIDWORD(*(_QWORD *)a2);
      v28 = v18;
      if (v19)
        v28 = (v13 >> 31) + 0x7FFFFFFF;
      v29 = *(v22 - 1);
      v17 = __OFADD__(v25, v29);
      v30 = v25 + v29;
      v31 = (v25 >> 31) + 0x7FFFFFFF;
      if (!v17)
        v31 = v30;
      if (v31 >= v28)
        v31 = v28;
      v32 = v20;
      if (v21)
        v32 = (v13 >> 63) + 0x7FFFFFFF;
      v17 = __OFADD__(v24, *v22);
      v33 = v24 + *v22;
      v34 = (v24 >> 31) + 0x7FFFFFFF;
      if (!v17)
        v34 = v33;
      if (v34 >= v32)
        v34 = v32;
      v35 = v26 < v31 && v27 < v34;
      if (v35)
      {
        v36 = v26;
      }
      else
      {
        v31 = 0;
        v34 = 0;
        v36 = 0;
      }
      if (!v35)
        v27 = 0;
      v17 = __OFSUB__(v31, v36);
      v37 = v31 - v36;
      v38 = (v31 >> 31) + 0x7FFFFFFF;
      if (v17)
        v39 = v38;
      else
        v39 = v37;
      v17 = __OFSUB__(v34, v27);
      LODWORD(v11) = v34 - v27;
      v40 = (v34 >> 31) + 0x7FFFFFFF;
      if (v17)
        v11 = v40;
      else
        v11 = v11;
      v41 = *(v22 - 5);
      v42 = *(v22 - 4);
      v17 = __OFADD__(v36, v41);
      v43 = v36 + v41;
      v44 = (v36 >> 31) + 0x7FFFFFFF;
      if (!v17)
        v44 = v43;
      v17 = __OFADD__(v27, v42);
      v45 = v27 + v42;
      LODWORD(v46) = (v27 >> 31) + 0x7FFFFFFF;
      if (v17)
        v46 = v46;
      else
        v46 = v45;
      if ((int)v39 >= 1 && (int)v11 >= 1)
      {
        if ((int)v9 < 1 || (v47 = HIDWORD(v9), SHIDWORD(v9) < 1))
        {
          v7 = v44;
          v8 = v46;
          v9 = v39 | (v11 << 32);
        }
        else
        {
          if (v44 >= (int)v7)
            v48 = v7;
          else
            v48 = v44;
          if ((int)v46 >= (int)v8)
            v49 = v8;
          else
            v49 = v46;
          v17 = __OFADD__(v7, (_DWORD)v9);
          v50 = v7 + v9;
          if (v17)
            v50 = (v7 >> 31) + 0x7FFFFFFF;
          v17 = __OFADD__(v44, (_DWORD)v39);
          v51 = v44 + v39;
          v52 = (v44 >> 31) + 0x7FFFFFFF;
          if (v17)
            v51 = v52;
          if (v50 > v51)
            v51 = v50;
          v53 = v8 + v47;
          if (__OFADD__((_DWORD)v8, (_DWORD)v47))
            v53 = (v8 >> 31) + 0x7FFFFFFF;
          v17 = __OFADD__((_DWORD)v46, (_DWORD)v11);
          v54 = v46 + v11;
          v55 = (v46 >> 31) + 0x7FFFFFFF;
          if (v17)
            v54 = v55;
          if (v53 > v54)
            v54 = v53;
          v17 = __OFSUB__(v51, v48);
          LODWORD(v56) = v51 - v48;
          v57 = (v51 >> 31) + 0x7FFFFFFF;
          if (v17)
            v56 = v57;
          else
            v56 = v56;
          v17 = __OFSUB__(v54, (_DWORD)v49);
          v58 = v54 - v49;
          LODWORD(v11) = (v54 >> 31) + 0x7FFFFFFF;
          if (v17)
            v11 = v11;
          else
            v11 = v58;
          v9 = v56 | (v11 << 32);
          v7 = v48;
          v8 = v49;
        }
      }
      v22 += 26;
      v23 -= 104;
    }
    while (v23);
  }
  else
  {
    v10 = xmmword_1969FCA90;
  }
  if (v63 != (_BYTE *)v61 && v61 != 0)
  {
    v61 = 0;
    LODWORD(v62) = 0;
    WTF::fastFree(v12, (void *)v11);
    v10 = xmmword_1969FCA90;
  }
  while (1)
  {
    v2 = (_QWORD *)v2[2];
    if (!v2)
      break;
    v5 = *(_QWORD *)(*v2 + 8);
    if (v5)
    {
      ++*((_DWORD *)this + 68);
      goto LABEL_6;
    }
  }
  ++*((_DWORD *)this + 68);
  return v7 | (unint64_t)(v8 << 32);
}

WebCore::RenderObject *WebCore::RenderFragmentedFlow::offsetFromLogicalTopOfFirstFragment(WebCore::RenderFragmentedFlow *this, const WebCore::RenderBlock *a2)
{
  WebCore::RenderObject *result;
  _BYTE *v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  WebCore::RenderObject *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;

  result = a2;
  v3 = (char *)a2 + 46;
  if (*((_BYTE *)a2 + 46) == 49)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = *((_DWORD *)a2 + 40);
    v7 = *((_DWORD *)a2 + 41);
    do
    {
      v8 = result;
      if ((*((_BYTE *)result + 52) & 7) == 1 && (*((_BYTE *)result + 53) & 2) != 0)
        break;
      result = WebCore::RenderObject::containingBlock(result);
      if (!result)
        return result;
      v10 = *((_DWORD *)v8 + 38);
      v9 = *((_DWORD *)v8 + 39);
      if (*v3 == 37)
      {
        v11 = *((_QWORD *)v8 + 4);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if (v12)
          {
            if (*(_BYTE *)(v12 + 46) != 39)
              goto LABEL_66;
            v13 = *(_QWORD *)(v12 + 32);
            if (v13)
            {
              v14 = *(_QWORD *)(v13 + 8);
              if (v14)
              {
                if (*(_BYTE *)(v14 + 46) != 40)
                {
LABEL_66:
                  __break(0xC471u);
                  JUMPOUT(0x1963C2EACLL);
                }
                v15 = *(_DWORD *)(v14 + 152);
                v16 = __OFADD__(v10, v15);
                v17 = v10 + v15;
                if (v16)
                  v10 = (v10 >> 31) + 0x7FFFFFFF;
                else
                  v10 = v17;
                v18 = *(_DWORD *)(v14 + 156);
                v16 = __OFADD__(v9, v18);
                v19 = v9 + v18;
                if (v16)
                  v9 = (v9 >> 31) + 0x7FFFFFFF;
                else
                  v9 = v19;
              }
            }
          }
        }
      }
      v20 = (unsigned __int16)*((_DWORD *)result + 31) >> 13;
      v21 = (unsigned __int16)*((_DWORD *)v8 + 31) >> 13;
      if (v20 != v21)
      {
        v22 = v20 > 5;
        v23 = (1 << v20) & 0x2A;
        if (!v22 && v23 != 0)
        {
          if ((*((_BYTE *)result + 21) & 0x10) != 0)
          {
            v39 = *((_DWORD *)v8 + 40);
            v40 = v5 + v6;
            if (__OFADD__(v5, v6))
              v40 = (v5 >> 31) + 0x7FFFFFFF;
            v16 = __OFSUB__(v39, v40);
            v41 = v39 - v40;
            v42 = (v39 >> 31) + 0x7FFFFFFF;
            if (v16)
              v5 = v42;
            else
              v5 = v41;
          }
          else
          {
            v31 = *((_DWORD *)v8 + 41);
            v32 = v4 + v7;
            if (__OFADD__(v4, v7))
              v32 = (v4 >> 31) + 0x7FFFFFFF;
            v16 = __OFSUB__(v31, v32);
            v33 = v31 - v32;
            v34 = (v31 >> 31) + 0x7FFFFFFF;
            if (v16)
              v4 = v34;
            else
              v4 = v33;
          }
        }
        if (v21 <= 5 && ((1 << v21) & 0x2A) != 0)
        {
          if ((*((_BYTE *)v8 + 21) & 0x10) != 0)
          {
            v35 = *((_DWORD *)v8 + 40);
            v36 = v5 + v6;
            if (__OFADD__(v5, v6))
              v36 = (v5 >> 31) + 0x7FFFFFFF;
            v16 = __OFSUB__(v35, v36);
            v37 = v35 - v36;
            v38 = (v35 >> 31) + 0x7FFFFFFF;
            if (v16)
              v5 = v38;
            else
              v5 = v37;
          }
          else
          {
            v27 = *((_DWORD *)v8 + 41);
            v28 = v4 + v7;
            if (__OFADD__(v4, v7))
              v28 = (v4 >> 31) + 0x7FFFFFFF;
            v16 = __OFSUB__(v27, v28);
            v29 = v27 - v28;
            v30 = (v27 >> 31) + 0x7FFFFFFF;
            if (v16)
              v4 = v30;
            else
              v4 = v29;
          }
        }
      }
      v16 = __OFADD__(v5, v10);
      v25 = v5 + v10;
      v5 = v16 ? (v5 >> 31) + 0x7FFFFFFF : v25;
      v16 = __OFADD__(v4, v9);
      v26 = v4 + v9;
      v4 = v16 ? (v4 >> 31) + 0x7FFFFFFF : v26;
      v3 = (char *)result + 46;
    }
    while (*((_BYTE *)result + 46) != 49);
  }
  if ((*((_BYTE *)result + 21) & 0x10) != 0)
    return (WebCore::RenderObject *)v5;
  else
    return (WebCore::RenderObject *)v4;
}

const WebCore::RenderBox *WebCore::RenderFragmentedFlow::mapLocalToContainer(const WebCore::RenderBox *result, const WebCore::RenderBox *a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  const WebCore::RenderBox *v9;
  uint64_t v10;
  int v11;
  WebCore::RenderFragmentedFlow *v12;
  uint64_t v13;
  WebCore::RenderFragmentContainer *v14;
  WebCore::RenderFragmentContainer *v15;
  WebCore::RenderFragmentContainer *v16;
  uint64_t v17;

  if (result != a2)
  {
    result = (const WebCore::RenderBox *)(*(uint64_t (**)(const WebCore::RenderBox *, uint64_t))(*(_QWORD *)result + 2008))(result, a3);
    if (result)
    {
      v9 = result;
      if (a2)
      {
        WebCore::RenderObject::containerForRepaint(result, (uint64_t)&v16);
        v10 = v17;
        if (v17)
        {
          v11 = *(_DWORD *)(v17 + 16);
          if (!v11)
          {
            __break(0xC471u);
            JUMPOUT(0x1963C2FA0);
          }
          *(_DWORD *)(v17 + 16) = v11 - 1;
        }
      }
      else
      {
        v10 = 0;
      }
      if ((*((_BYTE *)v9 + 23) & 0x10) != 0
        && (v13 = v10,
            (v12 = (WebCore::RenderFragmentedFlow *)(*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)v9 + 648))(v9)) != 0)
        && (v16 = 0, WebCore::RenderFragmentedFlow::getFragmentRangeForBox(v12, v9, &v16, &v15)))
      {
        v14 = v16;
        *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v16 + 31) + 8) + 320) = &v14;
        result = (const WebCore::RenderBox *)(*(uint64_t (**)(const WebCore::RenderBox *, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 576))(v9, v13, a3, a4, a5);
        *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v14 + 31) + 8) + 320) = 0;
      }
      else
      {
        return (const WebCore::RenderBox *)(*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)v9 + 576))(v9);
      }
    }
  }
  return result;
}

WebCore::RenderObject *WebCore::RenderFragmentedFlow::mapFromLocalToFragmentedFlow(WebCore::RenderFragmentedFlow *this, const WebCore::RenderBox *a2, const WebCore::LayoutRect *a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  const WebCore::RenderBox *v7;
  WebCore::RenderObject *result;
  int v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  int v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;

  v4 = *(_DWORD *)a3;
  v3 = *((unsigned int *)a3 + 1);
  v5 = *((_QWORD *)a3 + 1);
  if (!a2 || a2 == this)
    return (WebCore::RenderObject *)(v4 | (unint64_t)(v3 << 32));
  while (1)
  {
    v7 = a2;
    result = WebCore::RenderObject::containingBlock(a2);
    if (!result)
      break;
    a2 = result;
    v9 = *((_DWORD *)v7 + 31);
    v10 = (unsigned __int16)v9 >> 13;
    v11 = (((unsigned __int16)v9 ^ (unsigned __int16)*((_DWORD *)result + 31)) & 0xE000) == 0 || v10 > 5;
    v12 = (1 << v10) & 0x2A;
    if (!v11 && v12 != 0)
    {
      if ((*((_BYTE *)v7 + 21) & 0x10) != 0)
      {
        v22 = *((_DWORD *)v7 + 40);
        v23 = v4 + v5;
        if (__OFADD__(v4, (_DWORD)v5))
          v23 = (v4 >> 31) + 0x7FFFFFFF;
        v16 = __OFSUB__(v22, v23);
        v24 = v22 - v23;
        v25 = (v22 >> 31) + 0x7FFFFFFF;
        if (v16)
          v4 = v25;
        else
          v4 = v24;
      }
      else
      {
        v18 = *((_DWORD *)v7 + 41);
        v19 = v3 + HIDWORD(v5);
        if (__OFADD__((_DWORD)v3, HIDWORD(v5)))
          v19 = (v3 >> 31) + 0x7FFFFFFF;
        v16 = __OFSUB__(v18, v19);
        v20 = v18 - v19;
        v21 = (v18 >> 31) + 0x7FFFFFFF;
        if (v16)
          LODWORD(v3) = v21;
        else
          LODWORD(v3) = v20;
      }
    }
    v14 = *((_DWORD *)v7 + 38);
    v15 = *((_DWORD *)v7 + 39);
    v16 = __OFADD__(v4, v14);
    v17 = v4 + v14;
    if (v16)
      v4 = (v4 >> 31) + 0x7FFFFFFF;
    else
      v4 = v17;
    if (__OFADD__((_DWORD)v3, v15))
      v3 = (v3 >> 31) + 0x7FFFFFFF;
    else
      v3 = (v3 + v15);
    if (result == this)
      return (WebCore::RenderObject *)(v4 | (unint64_t)(v3 << 32));
  }
  return result;
}

WebCore::RenderObject *WebCore::RenderFragmentedFlow::mapFromFragmentedFlowToLocal(WebCore::RenderFragmentedFlow *this, const WebCore::RenderBox *a2, const WebCore::LayoutRect *a3)
{
  WebCore::RenderObject *result;
  WebCore::RenderObject *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  __int128 v28;

  v28 = *(_OWORD *)a3;
  if (a2 == this)
    return (WebCore::RenderObject *)v28;
  result = WebCore::RenderObject::containingBlock(a2);
  if (result)
  {
    v6 = result;
    v7 = WebCore::RenderFragmentedFlow::mapFromFragmentedFlowToLocal(this, result, (const WebCore::LayoutRect *)&v28);
    v10 = *((_DWORD *)a2 + 38);
    v11 = *((_DWORD *)a2 + 39);
    if (v11 == 0x80000000)
      v12 = 0x7FFFFFFF;
    else
      v12 = -v11;
    if (v10 == 0x80000000)
      v13 = 0x7FFFFFFF;
    else
      v13 = -v10;
    v14 = __OFADD__((_DWORD)v7, v13);
    v15 = v7 + v13;
    if (v14)
      v15 = (v7 >> 31) + 0x7FFFFFFF;
    v14 = __OFADD__(HIDWORD(v7), v12);
    v16 = HIDWORD(v7) + v12;
    if (v14)
      v16 = (HIDWORD(v7) >> 31) + 0x7FFFFFFF;
    *(_QWORD *)&v28 = __PAIR64__(v16, v15);
    v17 = *((_DWORD *)a2 + 31);
    if (((v17 ^ *((_DWORD *)v6 + 31)) & 0xE000) != 0)
    {
      v18 = (unsigned __int16)v17 >> 13;
      if (v18 <= 5 && ((1 << v18) & 0x2A) != 0)
      {
        if ((*((_BYTE *)a2 + 21) & 0x10) != 0)
        {
          v23 = *((_DWORD *)a2 + 40);
          v14 = __OFADD__(v15, v8);
          v24 = v15 + v8;
          v25 = (v15 >> 31) + 0x7FFFFFFF;
          if (!v14)
            v25 = v24;
          v14 = __OFSUB__(v23, v25);
          v26 = v23 - v25;
          v27 = (v23 >> 31) + 0x7FFFFFFF;
          if (v14)
            v26 = v27;
          LODWORD(v28) = v26;
        }
        else
        {
          v19 = *((_DWORD *)a2 + 41);
          v14 = __OFADD__(v16, v9);
          v20 = v16 + v9;
          v21 = (v16 >> 31) + 0x7FFFFFFF;
          if (v14)
            v20 = v21;
          v14 = __OFSUB__(v19, v20);
          v22 = v19 - v20;
          if (v14)
            v22 = (v19 >> 31) + 0x7FFFFFFF;
          DWORD1(v28) = v22;
        }
      }
    }
    return (WebCore::RenderObject *)v28;
  }
  return result;
}

WTF *WebCore::RenderFragmentedFlow::addFragmentsVisualEffectOverflow(WebCore::RenderFragmentedFlow *this, const WebCore::RenderBox *a2)
{
  WTF *result;
  WebCore::RenderFragmentContainer *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  _QWORD *v14;
  WebCore::RenderFragmentContainer *v15;
  WebCore::RenderFragmentContainer *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  WebCore::RenderFragmentContainer *v22;
  WebCore::RenderFragmentContainer *v23;

  v22 = 0;
  v23 = 0;
  result = (WTF *)WebCore::RenderFragmentedFlow::getFragmentRangeForBox(this, a2, &v23, &v22);
  if ((_DWORD)result)
  {
    v5 = v23;
    ++*((_DWORD *)this + 68);
    v6 = *((_QWORD *)v5 + 1);
    if (v6)
    {
      if (*(_QWORD *)(v6 + 8))
      {
        v7 = *((_QWORD *)this + 31);
        if (v7)
        {
          v8 = *(_DWORD *)(v7 - 8);
          v9 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
          v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
          v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
          v12 = v8 & ((v11 >> 31) ^ v11);
          for (i = 1; ; ++i)
          {
            v14 = *(_QWORD **)(v7 + 8 * v12);
            if (!v14)
              break;
            if (v14 != (_QWORD *)-1 && *v14 == v6)
            {
              if (v12 != *(_DWORD *)(v7 - 4))
              {
                while (1)
                {
                  v15 = *(WebCore::RenderFragmentContainer **)(*v14 + 8);
                  if (v15)
                    break;
                  v14 = (_QWORD *)v14[2];
                  if (!v14)
                    return result;
                }
                v16 = v22;
LABEL_15:
                v17 = *((_QWORD *)a2 + 20);
                v20 = 0;
                v21 = v17;
                v20 = WebCore::RenderBox::applyVisualEffectOverflow(a2, (const WebCore::LayoutRect *)&v20);
                v21 = v18;
                v20 = (unint64_t)WebCore::RenderFragmentContainer::rectFlowPortionForBox(v15, a2, (const WebCore::LayoutRect *)&v20);
                v21 = v19;
                result = WebCore::RenderFragmentContainer::addVisualOverflowForBox(v15, a2, (const WebCore::LayoutRect *)&v20);
                if (v15 != v16)
                {
                  while (1)
                  {
                    v14 = (_QWORD *)v14[2];
                    if (!v14)
                      break;
                    v15 = *(WebCore::RenderFragmentContainer **)(*v14 + 8);
                    if (v15)
                    {
                      ++*((_DWORD *)this + 68);
                      goto LABEL_15;
                    }
                  }
                  ++*((_DWORD *)this + 68);
                }
              }
              return result;
            }
            v12 = (v12 + i) & v8;
          }
        }
      }
    }
  }
  return result;
}

WTF *WebCore::RenderFragmentedFlow::addFragmentsVisualOverflowFromTheme(WebCore::RenderFragmentedFlow *this, const WebCore::RenderBlock *a2)
{
  WTF *result;
  WebCore::RenderFragmentContainer *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  _QWORD *v14;
  WebCore::RenderFragmentContainer *v15;
  WebCore::RenderFragmentContainer *v16;
  uint64_t *v17;
  uint64_t v18;
  int32x4_t v19;
  uint64_t v20;
  void (**v21)(WebCore::RenderThemeIOS *__hidden);
  double v22;
  int v23;
  double v24;
  int v25;
  double v26;
  int v27;
  double v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  BOOL v34;
  int v35;
  int v36;
  BOOL v37;
  int v38;
  int v39;
  uint32x2_t v40;
  int v41;
  int v42;
  int32x2_t v43;
  int v44;
  int v45;
  int v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int8x16_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  float32x4_t v56;
  int8x16_t v57;
  float32x4_t v58;
  uint64_t v59;
  uint64_t v60;
  WebCore::RenderFragmentContainer *v61;
  WebCore::RenderFragmentContainer *v62;

  v61 = 0;
  v62 = 0;
  result = (WTF *)WebCore::RenderFragmentedFlow::getFragmentRangeForBox(this, a2, &v62, &v61);
  if ((_DWORD)result)
  {
    v5 = v62;
    ++*((_DWORD *)this + 68);
    v6 = *((_QWORD *)v5 + 1);
    if (v6)
    {
      if (*(_QWORD *)(v6 + 8))
      {
        v7 = *((_QWORD *)this + 31);
        if (v7)
        {
          v8 = *(_DWORD *)(v7 - 8);
          v9 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
          v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
          v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
          v12 = v8 & ((v11 >> 31) ^ v11);
          for (i = 1; ; ++i)
          {
            v14 = *(_QWORD **)(v7 + 8 * v12);
            if (!v14)
              break;
            if (v14 != (_QWORD *)-1 && *v14 == v6)
            {
              if (v12 != *(_DWORD *)(v7 - 4))
              {
                while (1)
                {
                  v15 = *(WebCore::RenderFragmentContainer **)(*v14 + 8);
                  if (v15)
                    break;
                  v14 = (_QWORD *)v14[2];
                  if (!v14)
                    return result;
                }
                v16 = v61;
                v56 = (float32x4_t)vdupq_n_s32(0x3C800000u);
                v17 = &WebCore::MathMLNames::rspaceAttr;
LABEL_15:
                v18 = *((_QWORD *)a2 + 20);
                v59 = 0;
                v60 = v18;
                v19.i64[0] = (uint64_t)WebCore::RenderFragmentContainer::rectFlowPortionForBox(v15, a2, (const WebCore::LayoutRect *)&v59);
                v19.i64[1] = v20;
                v59 = v19.i64[0];
                v60 = v20;
                v58 = vmulq_f32(vcvtq_f32_s32(v19), v56);
                if (*((_BYTE *)v17 + 2784) == 1)
                {
                  v21 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
                }
                else
                {
                  WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
                  unk_1ECE88AD0 = 0u;
                  unk_1ECE88AC0 = 0u;
                  v21 = &off_1E335BC30;
                  WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
                  *((_BYTE *)v17 + 2784) = 1;
                }
                ((void (*)(uint64_t *, const WebCore::RenderBlock *, float32x4_t *))v21[22])(&WebCore::RenderTheme::singleton(void)::theme, a2, &v58);
                v22 = v58.f32[0] * 64.0;
                if (v22 >= 2147483650.0)
                {
                  v23 = 0x7FFFFFFF;
                }
                else if (v22 <= -2147483650.0)
                {
                  v23 = 0x80000000;
                }
                else
                {
                  v23 = (int)v22;
                }
                v24 = v58.f32[1] * 64.0;
                if (v24 >= 2147483650.0)
                {
                  v25 = 0x7FFFFFFF;
                }
                else if (v24 <= -2147483650.0)
                {
                  v25 = 0x80000000;
                }
                else
                {
                  v25 = (int)v24;
                }
                v26 = v58.f32[2] * 64.0;
                if (v26 >= 2147483650.0)
                {
                  v27 = 0x7FFFFFFF;
                }
                else if (v26 <= -2147483650.0)
                {
                  v27 = 0x80000000;
                }
                else
                {
                  v27 = (int)v26;
                }
                v28 = v58.f32[3] * 64.0;
                v29 = (int)v28;
                if (v28 <= -2147483650.0)
                  v29 = 0x80000000;
                if (v28 >= 2147483650.0)
                  v29 = 0x7FFFFFFF;
                v30 = v23 + 63;
                if (v23 >= 0)
                  v30 = v23;
                v31 = v23 - (v30 & 0xFFFFFFC0);
                v32 = v25 + 63;
                if (v25 >= 0)
                  v32 = v25;
                v33 = v25 - (v32 & 0xFFFFFFC0);
                v34 = __OFADD__(v31, v27);
                v35 = v31 + v27;
                if (v34)
                  v35 = (v31 >> 31) + 0x7FFFFFFF;
                v34 = __OFADD__(v33, v29);
                v36 = v33 + v29;
                if (v34)
                  v36 = (v33 >> 31) + 0x7FFFFFFF;
                v38 = -v35;
                v37 = -v35 < 0;
                v39 = v35 & 0x3F;
                v40 = (uint32x2_t)__PAIR64__(v36, v35);
                v41 = v30 >> 6;
                v42 = v32 >> 6;
                v43 = (int32x2_t)vsra_n_u32(v40, (uint32x2_t)vcltz_s32((int32x2_t)v40), 0x1AuLL);
                if (v37)
                  v44 = v39;
                else
                  v44 = -(v38 & 0x3F);
                v37 = -v36 < 0;
                v45 = -v36 & 0x3F;
                v46 = v36 & 0x3F;
                if (!v37)
                  v46 = -v45;
                v47.i64[0] = __PAIR64__(v33, v31);
                v47.i64[1] = __PAIR64__(v46, v44);
                v48.i64[0] = 0x2000000020;
                v48.i64[1] = 0x2000000020;
                v49 = vaddq_s32(v47, v48);
                v50.i64[0] = __PAIR64__(v42, v41);
                v50.u64[1] = (unint64_t)vsub_s32(vshr_n_s32(v43, 6uLL), (int32x2_t)*(_OWORD *)&vshrq_n_s32(v49, 6uLL));
                v51 = (int8x16_t)vsraq_n_s32(v50, v49, 6uLL);
                v52.i64[0] = 0xFE000000FE000000;
                v52.i64[1] = 0xFE000000FE000000;
                v53 = (int8x16_t)vcgtq_s32((int32x4_t)v51, v52);
                v49.i64[0] = 0xFE000000FE000000;
                v49.i64[1] = 0xFE000000FE000000;
                v54 = (int8x16_t)vcgtq_s32(v49, (int32x4_t)v51);
                v55 = (int8x16_t)vshlq_n_s32((int32x4_t)v51, 6uLL);
                v51.i64[0] = 0x8000000080000000;
                v51.i64[1] = 0x8000000080000000;
                v57 = vorrq_s8((int8x16_t)(*(_OWORD *)&v53 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8(v54, v51, v55), v53));
                result = WebCore::RenderFragmentContainer::addVisualOverflowForBox(v15, a2, (const WebCore::LayoutRect *)&v57);
                if (v15 != v16)
                {
                  while (1)
                  {
                    v14 = (_QWORD *)v14[2];
                    if (!v14)
                      break;
                    v15 = *(WebCore::RenderFragmentContainer **)(*v14 + 8);
                    if (v15)
                    {
                      ++*((_DWORD *)this + 68);
                      v17 = &WebCore::MathMLNames::rspaceAttr;
                      goto LABEL_15;
                    }
                  }
                  ++*((_DWORD *)this + 68);
                }
              }
              return result;
            }
            v12 = (v12 + i) & v8;
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderFragmentedFlow::addFragmentsOverflowFromChild(WebCore::RenderFragmentedFlow *this, const WebCore::RenderBox *a2, const WebCore::RenderBox *a3, const WebCore::LayoutSize *a4)
{
  uint64_t result;
  WebCore::RenderFragmentContainer *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int i;
  _QWORD *v18;
  const WebCore::RenderFragmentContainer *v19;
  WebCore::RenderFragmentContainer *v20;
  WebCore::RenderFragmentContainer *v21;
  WebCore::RenderFragmentContainer *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  int v34;
  _DWORD v35[2];
  uint64_t v36;
  _DWORD v37[2];
  uint64_t v38;
  WebCore::RenderFragmentContainer *v39;
  WebCore::RenderFragmentContainer *v40;
  WebCore::RenderFragmentContainer *v41;
  WebCore::RenderFragmentContainer *v42;

  v41 = 0;
  v42 = 0;
  result = WebCore::RenderFragmentedFlow::getFragmentRangeForBox(this, a3, &v42, &v41);
  if ((_DWORD)result)
  {
    v39 = 0;
    v40 = 0;
    result = WebCore::RenderFragmentedFlow::getFragmentRangeForBox(this, a2, &v40, &v39);
    if ((_DWORD)result)
    {
      v9 = v42;
      ++*((_DWORD *)this + 68);
      v10 = *((_QWORD *)v9 + 1);
      if (v10)
      {
        if (*(_QWORD *)(v10 + 8))
        {
          v11 = *((_QWORD *)this + 31);
          if (v11)
          {
            v12 = *(_DWORD *)(v11 - 8);
            v13 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
            v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
            v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
            v16 = v12 & ((v15 >> 31) ^ v15);
            for (i = 1; ; ++i)
            {
              v18 = *(_QWORD **)(v11 + 8 * v16);
              if (!v18)
                break;
              if (v18 != (_QWORD *)-1 && *v18 == v10)
              {
                if (v16 != *(_DWORD *)(v11 - 4))
                {
                  while (1)
                  {
                    v19 = *(const WebCore::RenderFragmentContainer **)(*v18 + 8);
                    if (v19)
                      break;
                    v18 = (_QWORD *)v18[2];
                    if (!v18)
                      return result;
                  }
                  v21 = v39;
                  v20 = v40;
                  v22 = v41;
LABEL_16:
                  result = WebCore::RenderFragmentedFlow::fragmentInRange(this, v19, v20, v21);
                  if ((result & 1) != 0)
                  {
                    v23 = WebCore::RenderFragmentContainer::layoutOverflowRectForBoxForPropagation(v19, a3);
                    v38 = v24;
                    v25 = *((_DWORD *)a4 + 1);
                    v26 = v23 + *(_DWORD *)a4;
                    if (__OFADD__((_DWORD)v23, *(_DWORD *)a4))
                      v26 = (v23 >> 31) + 0x7FFFFFFF;
                    v27 = __OFADD__(HIDWORD(v23), v25);
                    v28 = HIDWORD(v23) + v25;
                    if (v27)
                      v28 = (HIDWORD(v23) >> 31) + 0x7FFFFFFF;
                    v37[0] = v26;
                    v37[1] = v28;
                    result = (uint64_t)WebCore::RenderFragmentContainer::addLayoutOverflowForBox(v19, a2, (const WebCore::LayoutRect *)v37);
                    v29 = *((_QWORD *)a3 + 18);
                    if ((!v29 || (*(_BYTE *)(v29 + 25) & 8) == 0) && (*((_BYTE *)a2 + 22) & 1) == 0)
                    {
                      v30 = WebCore::RenderFragmentContainer::visualOverflowRectForBoxForPropagation(v19, a3);
                      v36 = v31;
                      v32 = v30 + *(_DWORD *)a4;
                      if (__OFADD__((_DWORD)v30, *(_DWORD *)a4))
                        v32 = (v30 >> 31) + 0x7FFFFFFF;
                      v33 = *((_DWORD *)a4 + 1);
                      v35[0] = v32;
                      v34 = HIDWORD(v30) + v33;
                      if (__OFADD__(HIDWORD(v30), v33))
                        v34 = (HIDWORD(v30) >> 31) + 0x7FFFFFFF;
                      v35[1] = v34;
                      result = (uint64_t)WebCore::RenderFragmentContainer::addVisualOverflowForBox(v19, a2, (const WebCore::LayoutRect *)v35);
                    }
                  }
                  if (v19 != v22)
                  {
                    while (1)
                    {
                      v18 = (_QWORD *)v18[2];
                      if (!v18)
                        break;
                      v19 = *(const WebCore::RenderFragmentContainer **)(*v18 + 8);
                      if (v19)
                      {
                        ++*((_DWORD *)this + 68);
                        goto LABEL_16;
                      }
                    }
                    ++*((_DWORD *)this + 68);
                  }
                }
                return result;
              }
              v16 = (v16 + i) & v12;
            }
          }
        }
      }
    }
  }
  return result;
}

WTF *WebCore::RenderFragmentedFlow::addFragmentsVisualOverflow(WebCore::RenderFragmentedFlow *this, const WebCore::RenderBox *a2, const WebCore::LayoutRect *a3)
{
  WTF *result;
  WebCore::RenderFragmentContainer *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  _QWORD *v16;
  WebCore::RenderFragmentContainer *v17;
  WebCore::RenderFragmentContainer *v18;
  uint64_t v19;
  _QWORD v20[2];
  WebCore::RenderFragmentContainer *v21;
  WebCore::RenderFragmentContainer *v22;

  v21 = 0;
  v22 = 0;
  result = (WTF *)WebCore::RenderFragmentedFlow::getFragmentRangeForBox(this, a2, &v22, &v21);
  if ((_DWORD)result)
  {
    v7 = v22;
    ++*((_DWORD *)this + 68);
    v8 = *((_QWORD *)v7 + 1);
    if (v8)
    {
      if (*(_QWORD *)(v8 + 8))
      {
        v9 = *((_QWORD *)this + 31);
        if (v9)
        {
          v10 = *(_DWORD *)(v9 - 8);
          v11 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
          v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
          v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
          v14 = v10 & ((v13 >> 31) ^ v13);
          for (i = 1; ; ++i)
          {
            v16 = *(_QWORD **)(v9 + 8 * v14);
            if (!v16)
              break;
            if (v16 != (_QWORD *)-1 && *v16 == v8)
            {
              if (v14 != *(_DWORD *)(v9 - 4))
              {
                while (1)
                {
                  v17 = *(WebCore::RenderFragmentContainer **)(*v16 + 8);
                  if (v17)
                    break;
                  v16 = (_QWORD *)v16[2];
                  if (!v16)
                    return result;
                }
                v18 = v21;
LABEL_15:
                v20[0] = WebCore::RenderFragmentContainer::rectFlowPortionForBox(v17, a2, a3);
                v20[1] = v19;
                result = WebCore::RenderFragmentContainer::addVisualOverflowForBox(v17, a2, (const WebCore::LayoutRect *)v20);
                if (v17 != v18)
                {
                  while (1)
                  {
                    v16 = (_QWORD *)v16[2];
                    if (!v16)
                      break;
                    v17 = *(WebCore::RenderFragmentContainer **)(*v16 + 8);
                    if (v17)
                    {
                      ++*((_DWORD *)this + 68);
                      goto LABEL_15;
                    }
                  }
                  ++*((_DWORD *)this + 68);
                }
              }
              return result;
            }
            v14 = (v14 + i) & v10;
          }
        }
      }
    }
  }
  return result;
}

WTF *WebCore::RenderFragmentedFlow::clearFragmentsOverflow(WebCore::RenderFragmentedFlow *this, const WebCore::RenderBox *a2)
{
  WTF *result;
  void *v5;
  WebCore::RenderFragmentContainer *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  _QWORD *v15;
  WebCore::RenderFragmentContainer *v16;
  WebCore::RenderFragmentContainer *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int j;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::RenderFragmentContainer *v29;
  WebCore::RenderFragmentContainer *v30;

  v29 = 0;
  v30 = 0;
  result = (WTF *)WebCore::RenderFragmentedFlow::getFragmentRangeForBox(this, a2, &v30, &v29);
  if ((_DWORD)result)
  {
    v6 = v30;
    ++*((_DWORD *)this + 68);
    v7 = *((_QWORD *)v6 + 1);
    if (v7)
    {
      if (*(_QWORD *)(v7 + 8))
      {
        v8 = *((_QWORD *)this + 31);
        if (v8)
        {
          v9 = *(_DWORD *)(v8 - 8);
          v10 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
          v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
          v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
          v13 = v9 & ((v12 >> 31) ^ v12);
          for (i = 1; ; ++i)
          {
            v15 = *(_QWORD **)(v8 + 8 * v13);
            if (!v15)
              break;
            if (v15 != (_QWORD *)-1 && *v15 == v7)
            {
              if (v13 != *(_DWORD *)(v8 - 4))
              {
                while (1)
                {
                  v16 = *(WebCore::RenderFragmentContainer **)(*v15 + 8);
                  if (v16)
                    break;
                  v15 = (_QWORD *)v15[2];
                  if (!v15)
                    return result;
                }
                v17 = v29;
                v18 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
                v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
                v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
                v21 = (v20 >> 31) ^ v20;
LABEL_15:
                v22 = *((_QWORD *)v16 + 34);
                if (v22)
                {
                  v23 = *(_DWORD *)(v22 - 8);
                  v24 = v23 & v21;
                  for (j = 1; ; ++j)
                  {
                    v26 = v24;
                    v27 = *(_QWORD *)(v22 + 16 * v24);
                    if (v27 != -1)
                    {
                      if (!v27)
                        goto LABEL_25;
                      if (*(const WebCore::RenderBox **)(v27 + 8) == a2)
                        break;
                    }
                    v24 = (v26 + j) & v23;
                  }
                  v28 = *(_QWORD *)(v22 + 16 * v26 + 8);
                  if (v28)
                  {
                    result = *(WTF **)(v28 + 16);
                    if (result)
                    {
                      *(_QWORD *)(v28 + 16) = 0;
                      if (*(_DWORD *)result == 1)
                        result = (WTF *)WTF::fastFree(result, v5);
                      else
                        --*(_DWORD *)result;
                    }
                  }
                }
LABEL_25:
                if (v16 != v17)
                {
                  while (1)
                  {
                    v15 = (_QWORD *)v15[2];
                    if (!v15)
                      break;
                    v16 = *(WebCore::RenderFragmentContainer **)(*v15 + 8);
                    if (v16)
                    {
                      ++*((_DWORD *)this + 68);
                      goto LABEL_15;
                    }
                  }
                  ++*((_DWORD *)this + 68);
                }
              }
              return result;
            }
            v13 = (v13 + i) & v9;
          }
        }
      }
    }
  }
  return result;
}

void WebCore::RenderFrame::~RenderFrame(WebCore::RenderFrame *this, void *a2)
{
  _DWORD *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E3439928;
  *((_QWORD *)this + 27) = &unk_1E3439FE8;
  v3 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  _DWORD *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E3439928;
  *((_QWORD *)this + 27) = &unk_1E3439FE8;
  v3 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v5);
  }
}

void `non-virtual thunk to'WebCore::RenderFrame::~RenderFrame(WebCore::RenderFrame *this, void *a2)
{
  WebCore::RenderLayerModelObject *v3;
  _DWORD *v4;
  WTF *v5;

  *((_QWORD *)this - 27) = off_1E3439928;
  v3 = (WebCore::RenderFrame *)((char *)this - 216);
  *(_QWORD *)this = &unk_1E3439FE8;
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  *((_QWORD *)this - 27) = off_1E34201A0;
  v5 = (WTF *)*((_QWORD *)this - 3);
  *((_QWORD *)this - 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
  *(_QWORD *)v3 = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(v3, a2);
}

{
  WebCore::RenderLayerModelObject *v3;
  _DWORD *v4;
  WTF *v5;
  void *v6;

  *((_QWORD *)this - 27) = off_1E3439928;
  v3 = (WebCore::RenderFrame *)((char *)this - 216);
  *(_QWORD *)this = &unk_1E3439FE8;
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  *((_QWORD *)this - 27) = off_1E34201A0;
  v5 = (WTF *)*((_QWORD *)this - 3);
  *((_QWORD *)this - 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
  *((_QWORD *)this - 27) = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(v3, a2);
  if (*((_DWORD *)this - 50))
  {
    *((_OWORD *)v3 + 14) = 0u;
    *((_OWORD *)v3 + 15) = 0u;
    *((_OWORD *)v3 + 12) = 0u;
    *((_OWORD *)v3 + 13) = 0u;
    *((_OWORD *)v3 + 10) = 0u;
    *((_OWORD *)v3 + 11) = 0u;
    *((_OWORD *)v3 + 8) = 0u;
    *((_OWORD *)v3 + 9) = 0u;
    *((_OWORD *)v3 + 6) = 0u;
    *((_OWORD *)v3 + 7) = 0u;
    *((_OWORD *)v3 + 4) = 0u;
    *((_OWORD *)v3 + 5) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    *((_OWORD *)v3 + 3) = 0u;
    *(_OWORD *)v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(v3, v6);
  }
}

uint64_t WebCore::RenderFrame::updateFromElement(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *(_QWORD *)(this + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 46) == 11)
      {
        v3 = *(_DWORD *)(v2 + 16) + 1;
        *(_DWORD *)(v2 + 16) = v3;
        if ((*(_BYTE *)(v2 + 20) & 0xF8) == 0)
        {
          this = WebCore::RenderFrameSet::computeEdgeInfo((WebCore::RenderFrameSet *)v2);
          v3 = *(_DWORD *)(v2 + 16);
        }
        if (v3)
        {
          *(_DWORD *)(v2 + 16) = v3 - 1;
        }
        else
        {
          this = 286;
          __break(0xC471u);
        }
      }
    }
  }
  return this;
}

void WebCore::RenderFrameSet::~RenderFrameSet(WebCore::RenderFrameSet *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;
  WTF *v11;

  v3 = (WTF *)*((_QWORD *)this + 40);
  if (v3)
  {
    *((_QWORD *)this + 40) = 0;
    *((_DWORD *)this + 82) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 38);
  if (v4)
  {
    *((_QWORD *)this + 38) = 0;
    *((_DWORD *)this + 78) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF *)*((_QWORD *)this + 36);
  if (v5)
  {
    *((_QWORD *)this + 36) = 0;
    *((_DWORD *)this + 74) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = (WTF *)*((_QWORD *)this + 34);
  if (v6)
  {
    *((_QWORD *)this + 34) = 0;
    *((_DWORD *)this + 70) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (WTF *)*((_QWORD *)this + 31);
  if (v7)
  {
    *((_QWORD *)this + 31) = 0;
    *((_DWORD *)this + 64) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (WTF *)*((_QWORD *)this + 29);
  if (v8)
  {
    *((_QWORD *)this + 29) = 0;
    *((_DWORD *)this + 60) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = (WTF *)*((_QWORD *)this + 27);
  if (v9)
  {
    *((_QWORD *)this + 27) = 0;
    *((_DWORD *)this + 56) = 0;
    WTF::fastFree(v9, a2);
  }
  v10 = (WTF *)*((_QWORD *)this + 25);
  if (v10)
  {
    *((_QWORD *)this + 25) = 0;
    *((_DWORD *)this + 52) = 0;
    WTF::fastFree(v10, a2);
  }
  *(_QWORD *)this = off_1E34201A0;
  v11 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
      WTF::fastFree(v11, a2);
    else
      --*(_DWORD *)v11;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::RenderFrameSet::~RenderFrameSet(this, a2);
  if (*((_DWORD *)v2 + 4))
  {
    *((_OWORD *)v2 + 20) = 0u;
    *((_OWORD *)v2 + 21) = 0u;
    *((_OWORD *)v2 + 18) = 0u;
    *((_OWORD *)v2 + 19) = 0u;
    *((_OWORD *)v2 + 16) = 0u;
    *((_OWORD *)v2 + 17) = 0u;
    *((_OWORD *)v2 + 14) = 0u;
    *((_OWORD *)v2 + 15) = 0u;
    *((_OWORD *)v2 + 12) = 0u;
    *((_OWORD *)v2 + 13) = 0u;
    *((_OWORD *)v2 + 10) = 0u;
    *((_OWORD *)v2 + 11) = 0u;
    *((_OWORD *)v2 + 8) = 0u;
    *((_OWORD *)v2 + 9) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 7) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *(_OWORD *)v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(v2, v3);
  }
}

uint64_t WebCore::RenderFrameSet::paint(uint64_t this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  signed int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  int v58;
  void *v59;
  int v60;
  void *v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unint64_t v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  int v79;
  int v80;
  unint64_t v81;
  int v82;
  int v83;
  int v84;
  int v85;
  unsigned int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  unsigned int v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  unsigned int v109;
  int v110;
  int v111;
  unsigned int v112;
  int v113;
  float v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  int v118;
  void *v119;
  int v120;
  void *v121;
  int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  unint64_t v137;
  float v138;
  float v139;
  float v140;
  float v141;

  if (*((_WORD *)a2 + 8) == 8)
  {
    v3 = this;
    v4 = *(unsigned int *)(this + 64);
    if (v4 | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32))
    {
      v5 = *(_QWORD *)((v4 | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32)) + 8);
      if (v5)
      {
        v7 = *(_DWORD *)(this + 152);
        v6 = *(_DWORD *)(this + 156);
        v8 = *((_DWORD *)a3 + 1);
        v9 = __OFADD__(*(_DWORD *)a3, v7);
        LODWORD(v10) = *(_DWORD *)a3 + v7;
        if (v9)
          v10 = ((*(_DWORD *)a3 >> 31) + 0x7FFFFFFF);
        else
          v10 = v10;
        v9 = __OFADD__(v8, v6);
        LODWORD(v11) = v8 + v6;
        if (v9)
          v11 = (v8 >> 31) + 0x7FFFFFFF;
        else
          v11 = v11;
        v136 = v10 | (v11 << 32);
        v12 = *(_QWORD *)(*(_QWORD *)(this + 24) + 8);
        if ((*(_WORD *)(v12 + 28) & 0x10) == 0
          || *(_QWORD *)(*(_QWORD *)(v12 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
        {
          __break(0xC471u);
          goto LABEL_225;
        }
        v14 = *(unsigned int *)(this + 212);
        if (*(_BYTE *)(v12 + 142))
        {
          v15 = *(_DWORD *)(v12 + 136);
          if (v15 >= -33554432)
          {
            if (v15 <= 0x1FFFFFF)
              v16 = v15 << 6;
            else
              v16 = 0x7FFFFFFF;
          }
          else
          {
            v16 = 0x80000000;
          }
          v135 = v16;
          if ((_DWORD)v14)
            goto LABEL_21;
        }
        else
        {
          v135 = 0;
          if ((_DWORD)v14)
          {
LABEL_21:
            v132 = 0;
            v133 = 0;
            v134 = *(unsigned int *)(this + 284);
            v130 = this + 80;
            do
            {
              if ((_DWORD)v134)
              {
                if (v135)
                {
                  v17 = 0;
                  v18 = 0;
                  v131 = v14;
                  while ((*(_BYTE *)(v5 + 45) & 2) == 0)
                  {
                    this = (*(uint64_t (**)(uint64_t, WebCore::PaintInfo *, uint64_t *))(*(_QWORD *)v5 + 680))(v5, a2, &v136);
                    if (v17 >= *(unsigned int *)(v3 + 284))
                      goto LABEL_222;
                    v19 = *(_DWORD *)(*(_QWORD *)(v3 + 272) + 4 * v17);
                    v20 = v19 << 6;
                    if (v19 < -33554432)
                      v20 = 0x80000000;
                    if (v19 <= 0x1FFFFFF)
                      v21 = v20;
                    else
                      v21 = 0x7FFFFFFF;
                    v9 = __OFADD__(v18, v21);
                    v22 = v18 + v21;
                    if (v9)
                      v18 = (v18 >> 31) + 0x7FFFFFFF;
                    else
                      v18 = v22;
                    if (++v17 >= *(unsigned int *)(v3 + 332))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1963C4D3CLL);
                    }
                    if (*(_BYTE *)(*(_QWORD *)(v3 + 320) + v17))
                    {
                      v23 = v136 + v18;
                      if (__OFADD__((_DWORD)v136, v18))
                        v23 = (v136 >> 31) + 0x7FFFFFFF;
                      v24 = HIDWORD(v136) + v133;
                      if (__OFADD__(HIDWORD(v136), v133))
                        v24 = (HIDWORD(v136) >> 31) + 0x7FFFFFFF;
                      v25 = *(_DWORD *)(v3 + 164);
                      if (v23 >= 0)
                        v26 = v23;
                      else
                        v26 = v23 + 63;
                      v27 = v23 - (v26 & 0xFFFFFFC0);
                      v28 = v24 + 63;
                      if (v24 >= 0)
                        v28 = v24;
                      v29 = v24 - (v28 & 0xFFFFFFC0);
                      v30 = (v27 >> 31) + 0x7FFFFFFF;
                      if (!__OFADD__(v27, v135))
                        v30 = v27 + v135;
                      v31 = v29 + v25;
                      if (__OFADD__(v29, v25))
                        v31 = (v29 >> 31) + 0x7FFFFFFF;
                      v32 = v29 + 32;
                      v33 = (v28 >> 6) + (v32 >> 6);
                      v34 = v27 + 32;
                      v35 = (v26 >> 6) + (v34 >> 6);
                      v36 = v30 / 64 - (v34 >> 6) + ((int)(v30 - (v26 & 0xFFFFFFC0) + 32) >> 6);
                      v37 = v31 / 64 - (v32 >> 6) + ((int)(v31 - (v30 & 0xFFFFFFC0) + 32) >> 6);
                      v38 = v35 << 6;
                      if (v35 < -33554432)
                        v38 = 0x80000000;
                      if (v35 <= 0x1FFFFFF)
                        v39 = v38;
                      else
                        v39 = 0x7FFFFFFF;
                      v40 = v33 << 6;
                      if (v33 < -33554432)
                        v40 = 0x80000000;
                      if (v33 > 0x1FFFFFF)
                        v40 = 0x7FFFFFFF;
                      v41 = v36 << 6;
                      if (v36 < -33554432)
                        v41 = 0x80000000;
                      if (v36 <= 0x1FFFFFF)
                        v42 = v41;
                      else
                        v42 = 0x7FFFFFFF;
                      v43 = v37 << 6;
                      if (v37 < -33554432)
                        v43 = 0x80000000;
                      if (v37 <= 0x1FFFFFF)
                        v44 = v43;
                      else
                        v44 = 0x7FFFFFFF;
                      v45 = *((_DWORD *)a2 + 2);
                      if (v45 >= 1)
                      {
                        v46 = *((_DWORD *)a2 + 3);
                        if (v46 >= 1 && v42 >= 1 && v44 >= 1)
                        {
                          v9 = __OFADD__(v39, v42);
                          v48 = v39 + v42;
                          if (v9)
                            v48 = (v39 >> 31) + 0x7FFFFFFF;
                          v49 = *(_DWORD *)a2;
                          if (*(_DWORD *)a2 < v48)
                          {
                            v9 = __OFADD__(v49, v45);
                            v50 = v49 + v45;
                            if (v9)
                              v50 = (v49 >> 31) + 0x7FFFFFFF;
                            if (v39 < v50)
                            {
                              v51 = v40 + v44;
                              if (__OFADD__(v40, v44))
                                v51 = (v40 >> 31) + 0x7FFFFFFF;
                              v52 = *((_DWORD *)a2 + 1);
                              if ((int)v52 < v51)
                              {
                                v53 = v52 + v46;
                                if (__OFADD__(v52, v46))
                                  v53 = (v52 >> 31) + 0x7FFFFFFF;
                                if ((int)v40 < v53)
                                {
                                  v54 = (float)v33;
                                  v55 = *((_QWORD *)a2 + 10);
                                  v138 = (float)v35;
                                  v139 = (float)v33;
                                  v140 = (float)v36;
                                  v141 = (float)v37;
                                  v56 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
                                  if ((*(_WORD *)(v56 + 28) & 0x10) == 0
                                    || *(_QWORD *)(*(_QWORD *)(v56 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::framesetTag
                                                                                              + 24))
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x1963C4CF4);
                                  }
                                  if (*(_BYTE *)(v56 + 141))
                                    WebCore::RenderStyle::visitedDependentColorWithColorFilter(v130, 374, 0, &v137);
                                  else
                                    v137 = 0x11040000D0D0D0FFLL;
                                  this = (*(uint64_t (**)(uint64_t, float *, unint64_t *))(*(_QWORD *)v55 + 224))(v55, &v138, &v137);
                                  if ((v137 & 0x8000000000000) != 0)
                                  {
                                    this = v137 & 0xFFFFFFFFFFFFLL;
                                    do
                                    {
                                      v63 = __ldaxr((unsigned int *)this);
                                      v64 = v63 - 1;
                                    }
                                    while (__stlxr(v64, (unsigned int *)this));
                                    if (!v64)
                                    {
                                      atomic_store(1u, (unsigned int *)this);
                                      this = WTF::fastFree((WTF *)this, v57);
                                    }
                                  }
                                  if (v36 >= 3)
                                  {
                                    v58 = *(_DWORD *)(v3 + 164);
                                    v138 = (float)v35;
                                    v139 = v54;
                                    v140 = 1.0;
                                    v141 = (float)(v58 / 64);
                                    v137 = 0x11040000AAAAAAFFLL;
                                    (*(void (**)(uint64_t, float *, unint64_t *))(*(_QWORD *)v55 + 224))(v55, &v138, &v137);
                                    if ((v137 & 0x8000000000000) != 0)
                                    {
                                      v65 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFLL);
                                      do
                                      {
                                        v66 = __ldaxr(v65);
                                        v67 = v66 - 1;
                                      }
                                      while (__stlxr(v67, v65));
                                      if (!v67)
                                      {
                                        atomic_store(1u, v65);
                                        WTF::fastFree((WTF *)v65, v59);
                                      }
                                    }
                                    v60 = *(_DWORD *)(v3 + 164);
                                    v138 = (float)(v35 + v36 - 1);
                                    v139 = v54;
                                    v140 = 1.0;
                                    v141 = (float)(v60 / 64);
                                    v137 = 0x11040000000000FFLL;
                                    this = (*(uint64_t (**)(uint64_t, float *, unint64_t *))(*(_QWORD *)v55 + 224))(v55, &v138, &v137);
                                    if ((v137 & 0x8000000000000) != 0)
                                    {
                                      this = v137 & 0xFFFFFFFFFFFFLL;
                                      do
                                      {
                                        v68 = __ldaxr((unsigned int *)this);
                                        v69 = v68 - 1;
                                      }
                                      while (__stlxr(v69, (unsigned int *)this));
                                      if (!v69)
                                      {
                                        atomic_store(1u, (unsigned int *)this);
                                        this = WTF::fastFree((WTF *)this, v61);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      if (__OFADD__(v18, v135))
                        v18 = (v18 >> 31) + 0x7FFFFFFF;
                      else
                        v18 += v135;
                      v14 = v131;
                    }
                    v62 = *(unsigned int *)(v5 + 47);
                    if (!(v62 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32)))
                      return this;
                    v5 = *(_QWORD *)((v62 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32)) + 8);
                    if (!v5)
                      return this;
                    if (v17 == v134)
                      goto LABEL_130;
                  }
                }
                else
                {
                  v70 = 0;
                  v71 = 0;
                  while ((*(_BYTE *)(v5 + 45) & 2) == 0)
                  {
                    this = (*(uint64_t (**)(uint64_t, WebCore::PaintInfo *, uint64_t *))(*(_QWORD *)v5 + 680))(v5, a2, &v136);
                    if (v70 >= *(unsigned int *)(v3 + 284))
                    {
LABEL_222:
                      __break(0xC471u);
                      JUMPOUT(0x1963C4D44);
                    }
                    v72 = *(_DWORD *)(*(_QWORD *)(v3 + 272) + 4 * v70);
                    v73 = v72 << 6;
                    if (v72 < -33554432)
                      v73 = 0x80000000;
                    if (v72 <= 0x1FFFFFF)
                      v74 = v73;
                    else
                      v74 = 0x7FFFFFFF;
                    v9 = __OFADD__(v71, v74);
                    v75 = v71 + v74;
                    if (v9)
                      v71 = (v71 >> 31) + 0x7FFFFFFF;
                    else
                      v71 = v75;
                    v76 = *(unsigned int *)(v5 + 47);
                    if (!(v76 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32)))
                      return this;
                    v5 = *(_QWORD *)((v76 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32)) + 8);
                    if (!v5)
                      return this;
                    if (v134 == ++v70)
                      goto LABEL_130;
                  }
                }
                __break(0xC471u);
                JUMPOUT(0x1963C4D34);
              }
LABEL_130:
              if (v132 >= *(unsigned int *)(v3 + 212))
              {
                __break(0xC471u);
                JUMPOUT(0x1963C4D4CLL);
              }
              v77 = *(_DWORD *)(*(_QWORD *)(v3 + 200) + 4 * v132);
              v78 = v77 << 6;
              if (v77 < -33554432)
                v78 = 0x80000000;
              if (v77 <= 0x1FFFFFF)
                v79 = v78;
              else
                v79 = 0x7FFFFFFF;
              v9 = __OFADD__(v133, v79);
              v80 = v133 + v79;
              if (v9)
                v80 = (v133 >> 31) + 0x7FFFFFFF;
              v133 = v80;
              v81 = v132 + 1;
              if (v135)
              {
                if (v81 >= *(unsigned int *)(v3 + 260))
                {
                  __break(0xC471u);
LABEL_225:
                  JUMPOUT(0x1963C4CD4);
                }
                if (*(_BYTE *)(*(_QWORD *)(v3 + 248) + v81))
                {
                  v82 = HIDWORD(v136) + v80;
                  v83 = (HIDWORD(v136) >> 31) + 0x7FFFFFFF;
                  if (!__OFADD__(HIDWORD(v136), v133))
                    v83 = v82;
                  v84 = *(_DWORD *)(v3 + 160);
                  if ((int)v136 >= 0)
                    v85 = v136;
                  else
                    v85 = v136 + 63;
                  v86 = v136 - (v85 & 0xFFFFFFC0);
                  if (v83 >= 0)
                    v87 = v83;
                  else
                    v87 = v83 + 63;
                  v88 = v86 + v84;
                  if (__OFADD__(v86, v84))
                    v88 = (v86 >> 31) + 0x7FFFFFFF;
                  v89 = v85 >> 6;
                  v90 = v87 >> 6;
                  v91 = v83 - (v87 & 0xFFFFFFC0);
                  v92 = (v91 >> 31) + 0x7FFFFFFF;
                  if (!__OFADD__(v91, v135))
                    v92 = v91 + v135;
                  v93 = v91 + 32;
                  v94 = v90 + ((int)(v91 + 32) >> 6);
                  v95 = v86 + 32;
                  v96 = v89 + (v95 >> 6);
                  v97 = v88 / 64 - (v95 >> 6) + ((int)(v88 - (v89 & 0xFFFFFFC0) + 32) >> 6);
                  v98 = v92 / 64 - (v93 >> 6) + ((int)(v92 - (v95 & 0xFFFFFFC0) + 32) >> 6);
                  v99 = v96 << 6;
                  if (v96 < -33554432)
                    v99 = 0x80000000;
                  if (v96 <= 0x1FFFFFF)
                    v100 = v99;
                  else
                    v100 = 0x7FFFFFFF;
                  v101 = v94 << 6;
                  if (v94 < -33554432)
                    v101 = 0x80000000;
                  if (v94 > 0x1FFFFFF)
                    v101 = 0x7FFFFFFF;
                  v102 = v97 << 6;
                  if (v97 < -33554432)
                    v102 = 0x80000000;
                  if (v97 <= 0x1FFFFFF)
                    v103 = v102;
                  else
                    v103 = 0x7FFFFFFF;
                  v104 = v98 << 6;
                  if (v98 < -33554432)
                    v104 = 0x80000000;
                  if (v98 <= 0x1FFFFFF)
                    v105 = v104;
                  else
                    v105 = 0x7FFFFFFF;
                  v106 = *((_DWORD *)a2 + 2);
                  if (v106 >= 1)
                  {
                    v107 = *((_DWORD *)a2 + 3);
                    if (v107 >= 1 && v103 >= 1 && v105 >= 1)
                    {
                      v9 = __OFADD__(v100, v103);
                      v108 = v100 + v103;
                      if (v9)
                        v108 = (v100 >> 31) + 0x7FFFFFFF;
                      v109 = *(_DWORD *)a2;
                      if (*(_DWORD *)a2 < v108)
                      {
                        v9 = __OFADD__(v109, v106);
                        v110 = v109 + v106;
                        if (v9)
                          v110 = (v109 >> 31) + 0x7FFFFFFF;
                        if (v100 < v110)
                        {
                          v111 = v101 + v105;
                          if (__OFADD__(v101, v105))
                            v111 = (v101 >> 31) + 0x7FFFFFFF;
                          v112 = *((_DWORD *)a2 + 1);
                          if ((int)v112 < v111)
                          {
                            v113 = v112 + v107;
                            if (__OFADD__(v112, v107))
                              v113 = (v112 >> 31) + 0x7FFFFFFF;
                            if ((int)v101 < v113)
                            {
                              v114 = (float)v96;
                              v115 = *((_QWORD *)a2 + 10);
                              v138 = (float)v96;
                              v139 = (float)v94;
                              v140 = (float)v97;
                              v141 = (float)v98;
                              v116 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
                              if ((*(_WORD *)(v116 + 28) & 0x10) == 0
                                || *(_QWORD *)(*(_QWORD *)(v116 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::framesetTag
                                                                                           + 24))
                              {
                                __break(0xC471u);
                                JUMPOUT(0x1963C4D14);
                              }
                              if (*(_BYTE *)(v116 + 141))
                                WebCore::RenderStyle::visitedDependentColorWithColorFilter(v130, 374, 0, &v137);
                              else
                                v137 = 0x11040000D0D0D0FFLL;
                              this = (*(uint64_t (**)(uint64_t, float *, unint64_t *))(*(_QWORD *)v115 + 224))(v115, &v138, &v137);
                              if ((v137 & 0x8000000000000) != 0)
                              {
                                this = v137 & 0xFFFFFFFFFFFFLL;
                                do
                                {
                                  v123 = __ldaxr((unsigned int *)this);
                                  v124 = v123 - 1;
                                }
                                while (__stlxr(v124, (unsigned int *)this));
                                if (!v124)
                                {
                                  atomic_store(1u, (unsigned int *)this);
                                  this = WTF::fastFree((WTF *)this, v117);
                                }
                              }
                              if (v98 >= 3)
                              {
                                v118 = *(_DWORD *)(v3 + 160);
                                v138 = v114;
                                v139 = (float)v94;
                                v140 = (float)(v118 / 64);
                                v141 = 1.0;
                                v137 = 0x11040000AAAAAAFFLL;
                                (*(void (**)(uint64_t, float *, unint64_t *))(*(_QWORD *)v115 + 224))(v115, &v138, &v137);
                                if ((v137 & 0x8000000000000) != 0)
                                {
                                  v125 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFLL);
                                  do
                                  {
                                    v126 = __ldaxr(v125);
                                    v127 = v126 - 1;
                                  }
                                  while (__stlxr(v127, v125));
                                  if (!v127)
                                  {
                                    atomic_store(1u, v125);
                                    WTF::fastFree((WTF *)v125, v119);
                                  }
                                }
                                v120 = *(_DWORD *)(v3 + 160);
                                v138 = v114;
                                v139 = (float)(v94 + v98 - 1);
                                v140 = (float)(v120 / 64);
                                v141 = 1.0;
                                v137 = 0x11040000000000FFLL;
                                this = (*(uint64_t (**)(uint64_t, float *, unint64_t *))(*(_QWORD *)v115 + 224))(v115, &v138, &v137);
                                if ((v137 & 0x8000000000000) != 0)
                                {
                                  this = v137 & 0xFFFFFFFFFFFFLL;
                                  do
                                  {
                                    v128 = __ldaxr((unsigned int *)this);
                                    v129 = v128 - 1;
                                  }
                                  while (__stlxr(v129, (unsigned int *)this));
                                  if (!v129)
                                  {
                                    atomic_store(1u, (unsigned int *)this);
                                    this = WTF::fastFree((WTF *)this, v121);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  v122 = v133 + v135;
                  if (__OFADD__(v133, v135))
                    v122 = (v133 >> 31) + 0x7FFFFFFF;
                  v133 = v122;
                }
              }
              ++v132;
            }
            while (v81 != v14);
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderFrameSet::GridAxis::resize(WebCore::RenderFrameSet::GridAxis *this, unsigned int a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  unsigned int v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  size_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  int v40;

  v4 = (int)a2;
  v5 = *((unsigned int *)this + 3);
  if (v5 < (int)a2)
  {
    v6 = *((unsigned int *)this + 2);
    if (v6 < (int)a2)
    {
      v28 = v6 + (v6 >> 2);
      if (v28 >= 0x10)
        v29 = v28 + 1;
      else
        v29 = 16;
      if (v29 <= (int)a2)
        v30 = (int)a2;
      else
        v30 = v29;
      if (v30 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x1963C4FC8);
      }
      v31 = *(void **)this;
      v32 = (void *)WTF::fastMalloc((WTF *)(4 * v30));
      *((_DWORD *)this + 2) = v30;
      *(_QWORD *)this = v32;
      memcpy(v32, v31, 4 * v5);
      if (v31)
      {
        if (*(void **)this == v31)
        {
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
        }
        WTF::fastFree((WTF *)v31, v33);
      }
    }
  }
  *((_DWORD *)this + 3) = a2;
  v7 = (void **)((char *)this + 16);
  v8 = *((unsigned int *)this + 7);
  if (v8 < v4)
  {
    v9 = *((unsigned int *)this + 6);
    if (v9 < v4)
    {
      v34 = v9 + (v9 >> 2);
      if (v34 >= 0x10)
        v35 = v34 + 1;
      else
        v35 = 16;
      if (v35 <= v4)
        v36 = v4;
      else
        v36 = v35;
      if (v36 >> 30)
      {
        __break(0xC471u);
LABEL_58:
        JUMPOUT(0x1963C4FB8);
      }
      v37 = *v7;
      v38 = (void *)WTF::fastMalloc((WTF *)(4 * v36));
      *((_DWORD *)this + 6) = v36;
      *((_QWORD *)this + 2) = v38;
      memcpy(v38, v37, 4 * v8);
      if (v37)
      {
        if (*v7 == v37)
        {
          *((_QWORD *)this + 2) = 0;
          *((_DWORD *)this + 6) = 0;
        }
        WTF::fastFree((WTF *)v37, v39);
      }
    }
  }
  *((_DWORD *)this + 7) = a2;
  v40 = 0;
  result = (uint64_t)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::fill((unsigned int *)this + 4, &v40, a2);
  v11 = a2 + 1;
  v12 = *((unsigned int *)this + 11);
  if (v12 >= (int)v11)
    goto LABEL_15;
  v13 = *((unsigned int *)this + 10);
  if (v13 >= (int)v11)
    goto LABEL_15;
  v14 = v13 + (v13 >> 2);
  if (v14 >= 0x10)
    v15 = v14 + 1;
  else
    v15 = 16;
  if (v15 <= (int)v11)
    v16 = (int)v11;
  else
    v16 = v15;
  if (HIDWORD(v16))
  {
    __break(0xC471u);
    goto LABEL_58;
  }
  v17 = (void *)*((_QWORD *)this + 4);
  v18 = (void *)WTF::fastMalloc((WTF *)v16);
  *((_DWORD *)this + 10) = v16;
  *((_QWORD *)this + 4) = v18;
  result = (uint64_t)memcpy(v18, v17, v12);
  if (v17)
  {
    if (*((void **)this + 4) == v17)
    {
      *((_QWORD *)this + 4) = 0;
      *((_DWORD *)this + 10) = 0;
    }
    result = WTF::fastFree((WTF *)v17, v19);
  }
LABEL_15:
  *((_DWORD *)this + 11) = v11;
  v20 = *((unsigned int *)this + 15);
  if (v20 < (int)v11)
  {
    v21 = *((unsigned int *)this + 14);
    if (v21 < (int)v11)
    {
      v22 = v21 + (v21 >> 2);
      if (v22 >= 0x10)
        v23 = v22 + 1;
      else
        v23 = 16;
      if (v23 <= (int)v11)
        v24 = (int)v11;
      else
        v24 = v23;
      if (HIDWORD(v24))
      {
        __break(0xC471u);
        JUMPOUT(0x1963C4FC0);
      }
      v25 = (void *)*((_QWORD *)this + 6);
      v26 = (void *)WTF::fastMalloc((WTF *)v24);
      *((_DWORD *)this + 14) = v24;
      *((_QWORD *)this + 6) = v26;
      result = (uint64_t)memcpy(v26, v25, v20);
      if (v25)
      {
        if (*((void **)this + 6) == v25)
        {
          *((_QWORD *)this + 6) = 0;
          *((_DWORD *)this + 14) = 0;
        }
        result = WTF::fastFree((WTF *)v25, v27);
      }
    }
  }
  *((_DWORD *)this + 15) = v11;
  return result;
}

unsigned int *WebCore::RenderFrameSet::layOutAxis(unsigned int *this, WebCore::RenderFrameSet::GridAxis *a2, const WebCore::Length *a3)
{
  signed int v3;
  signed int *v4;
  WebCore::RenderFrameSet::GridAxis *v5;
  unsigned int *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  signed int v12;
  int v13;
  int v14;
  float v15;
  int *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  int v21;
  float v22;
  double v23;
  int v24;
  int v25;
  int v26;
  float v27;
  double v28;
  unsigned __int8 *v29;
  int *v30;
  uint64_t v31;
  signed int v32;
  int v33;
  int v34;
  signed int v35;
  unsigned __int8 *v36;
  int *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  unsigned __int8 *v45;
  signed int *v46;
  uint64_t v47;
  signed int v48;
  int v49;
  int v50;
  uint64_t v51;
  unsigned __int8 *v52;
  signed int *v53;
  uint64_t v54;
  int v55;
  int v56;
  unsigned __int8 *v57;
  signed int *v58;
  uint64_t v59;
  int v60;
  int v61;
  unsigned __int8 *v62;
  signed int *v63;
  uint64_t v64;
  int v65;
  int v66;
  int *v67;
  char v68;
  signed int *v69;
  int *v70;
  uint64_t v71;
  int v72;
  signed int v73;
  BOOL v74;
  char v75;
  int v76;
  int v77;
  signed int v78;
  int v79;
  int v80;
  unsigned int *v81;
  int v82;

  v3 = a3 & ~((int)a3 >> 31);
  v4 = *(signed int **)this;
  if (!a2)
  {
    *v4 = v3;
    return this;
  }
  v5 = a2;
  v6 = this;
  v7 = this[3];
  if ((int)v7 < 1)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
LABEL_45:
    v32 = v3 - v12;
    goto LABEL_46;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = v3 << 6;
  v15 = (float)(v3 << 6) * 0.015625;
  v16 = *(int **)this;
  v17 = this[3];
  v18 = (unsigned __int8 *)a2;
  do
  {
    v19 = v18[4];
    if (v19 == 4)
    {
      if (v18[6])
        v20 = (int)*(float *)v18;
      else
        v20 = *(_DWORD *)v18;
      v21 = v20 & ~(v20 >> 31);
      *v16 = v21;
      v12 += v21;
      ++v9;
    }
    else
    {
      if ((v19 & 0xFFFFFFF7) == 3)
      {
        if (v19 == 3)
        {
          v22 = *(float *)v18;
          if (!v18[6])
            v22 = (float)*(int *)v18;
          v23 = (float)((float)(v15 * v22) / 100.0) * 64.0;
          if (v23 >= 2147483650.0)
          {
            v24 = 0x7FFFFFFF;
          }
          else if (v23 <= -2147483650.0)
          {
            v24 = 0x80000000;
          }
          else
          {
            v24 = (int)v23;
          }
        }
        else
        {
          v77 = v14;
          v78 = v3;
          v79 = v10;
          v80 = v8;
          v81 = v6;
          if (v19 == 11)
          {
            this = (unsigned int *)WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v18, v15);
            v28 = v27 * 64.0;
            if (v28 >= 2147483650.0)
            {
              v24 = 0x7FFFFFFF;
              v6 = v81;
              v10 = v79;
              v8 = v80;
              v14 = v77;
              v3 = v78;
            }
            else
            {
              v6 = v81;
              v10 = v79;
              v8 = v80;
              v14 = v77;
              v3 = v78;
              if (v28 <= -2147483650.0)
                v24 = 0x80000000;
              else
                v24 = (int)v28;
            }
          }
          else if (v19 == 9)
          {
            v24 = v14;
          }
          else
          {
            v24 = 0;
          }
        }
        v25 = (v24 / 64) & ~((v24 + (v24 < 0 ? 0x3F : 0)) >> 31);
        *v16 = v25;
        v11 += v25;
        ++v8;
        v19 = v18[4];
      }
      if (v19 == 2)
      {
        if (v18[6])
          v26 = (int)*(float *)v18;
        else
          v26 = *(_DWORD *)v18;
        if (v26 <= 1)
          v26 = 1;
        v13 += v26;
        ++v10;
      }
    }
    v18 += 8;
    ++v16;
    --v17;
  }
  while (v17);
  if (v12 <= v3)
    goto LABEL_45;
  v29 = (unsigned __int8 *)v5 + 4;
  v30 = v4;
  v31 = v7;
  v32 = v3;
  do
  {
    v33 = *v29;
    v29 += 8;
    if (v33 == 4)
    {
      v34 = *v30 * v3 / v12;
      *v30 = v34;
      v32 -= v34;
    }
    ++v30;
    --v31;
  }
  while (v31);
LABEL_46:
  v35 = v32 - v11;
  if (v32 >= v11)
  {
LABEL_52:
    if (v10)
    {
      if ((int)v7 < 1)
      {
        v42 = 0;
        v32 = v35;
      }
      else
      {
        v41 = 0;
        v42 = 0;
        v32 = v35;
        do
        {
          if (*((_BYTE *)v5 + 4) == 2)
          {
            if (*((_BYTE *)v5 + 6))
              v43 = (int)*(float *)v5;
            else
              v43 = *(_DWORD *)v5;
            if (v43 <= 1)
              v43 = 1;
            v44 = v43 * v35 / v13;
            v4[v41] = v44;
            v32 -= v44;
            v42 = v41;
          }
          ++v41;
          v5 = (WebCore::RenderFrameSet::GridAxis *)((char *)v5 + 8);
        }
        while (v7 != v41);
      }
      if (!v32)
        goto LABEL_108;
      goto LABEL_76;
    }
    v32 = v35;
LABEL_65:
    if (!v32)
      goto LABEL_108;
    if (v8 && v11)
    {
      if ((int)v7 < 1)
        goto LABEL_106;
      v45 = (unsigned __int8 *)v5 + 4;
      v46 = v4;
      v47 = v7;
      v48 = v32;
      do
      {
        v49 = *v45;
        v45 += 8;
        if ((v49 & 0xFFFFFFF7) == 3)
        {
          v50 = *v46 * v32 / v11;
          *v46 += v50;
          v48 -= v50;
        }
        ++v46;
        --v47;
      }
      while (v47);
    }
    else if ((int)v7 >= 1 && v12)
    {
      v52 = (unsigned __int8 *)v5 + 4;
      v53 = v4;
      v54 = v7;
      v48 = v32;
      do
      {
        v55 = *v52;
        v52 += 8;
        if (v55 == 4)
        {
          v56 = *v53 * v32 / v12;
          *v53 += v56;
          v48 -= v56;
        }
        ++v53;
        --v54;
      }
      while (v54);
    }
    else
    {
      v48 = v32;
    }
    if (v8 && v48)
    {
      if ((int)v7 < 1)
      {
        v32 = v48;
        goto LABEL_106;
      }
      v57 = (unsigned __int8 *)v5 + 4;
      v58 = v4;
      v59 = v7;
      v60 = v48 / v8;
      do
      {
        v61 = *v57;
        v57 += 8;
        if ((v61 & 0xFFFFFFF7) == 3)
        {
          *v58 += v60;
          v48 -= v60;
        }
        ++v58;
        --v59;
      }
      while (v59);
    }
    else if ((int)v7 >= 1 && v48 && v9)
    {
      v62 = (unsigned __int8 *)v5 + 4;
      v63 = v4;
      v64 = v7;
      v65 = v48 / v9;
      do
      {
        v66 = *v62;
        v62 += 8;
        if (v66 == 4)
        {
          *v63 += v65;
          v48 -= v65;
        }
        ++v63;
        --v64;
      }
      while (v64);
    }
    v32 = v48;
    if (!v48)
      goto LABEL_108;
LABEL_106:
    v51 = (int)v7 - 1;
    goto LABEL_107;
  }
  if ((int)v7 >= 1)
  {
    v36 = (unsigned __int8 *)v5 + 4;
    v37 = v4;
    v38 = v7;
    v35 = v32;
    do
    {
      v39 = *v36;
      v36 += 8;
      if ((v39 & 0xFFFFFFF7) == 3)
      {
        v40 = *v37 * v32 / v11;
        *v37 = v40;
        v35 -= v40;
      }
      ++v37;
      --v38;
    }
    while (v38);
    goto LABEL_52;
  }
  if (!v10)
    goto LABEL_65;
  v42 = 0;
  if (v32)
  {
LABEL_76:
    v51 = v42;
LABEL_107:
    v4[v51] += v32;
  }
LABEL_108:
  if ((int)v7 >= 1)
  {
    this = v6 + 4;
    v67 = (int *)*((_QWORD *)v6 + 2);
    v68 = 1;
    v69 = v4;
    v70 = v67;
    v71 = v7;
    do
    {
      v72 = *v70++;
      v73 = v72 + *v69;
      if (*v69)
        v74 = v73 <= 0;
      else
        v74 = 0;
      v75 = !v74;
      v68 &= v75;
      *v69++ = v73;
      --v71;
    }
    while (v71);
    if ((v68 & 1) == 0)
    {
      do
      {
        v76 = *v67++;
        *v4++ -= v76;
        --v7;
      }
      while (v7);
      v82 = 0;
      return WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::fill(this, &v82, v6[7]);
    }
  }
  return this;
}

uint64_t WebCore::RenderFrameSet::computeEdgeInfo(WebCore::RenderFrameSet *this)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  WTF *v14;
  int v15;
  uint64_t v16;
  int v17;
  WTF *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  WTF *v22;
  int v23;
  int v24;
  BOOL v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  unint64_t v33;
  _BYTE *v34;
  unint64_t v35;
  _BYTE *v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t *v46;
  int v47;
  int v48;
  void *v49;
  void *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t i;
  unint64_t v57;
  uint64_t v58;
  WTF *v59;
  WTF *v60;
  uint64_t v61;
  char v62;
  char v63;
  char v64;
  char v65;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x10) == 0
    || (v2 = &WebCore::HTMLNames::framesetTag,
        *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24)))
  {
    __break(0xC471u);
    goto LABEL_105;
  }
  v4 = (_QWORD *)((char *)this + 232);
  v65 = *(_BYTE *)(v1 + 144);
  WTF::Vector<BOOL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::fill((uint64_t)this + 232, &v65, (WTF *)*((unsigned int *)this + 61));
  v5 = (_QWORD *)((char *)this + 248);
  v64 = 0;
  WTF::Vector<BOOL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::fill((uint64_t)this + 248, &v64, (WTF *)*((unsigned int *)this + 65));
  v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v6 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1963C5B60);
  }
  v7 = (_QWORD *)((char *)this + 304);
  v63 = *(_BYTE *)(v6 + 144);
  WTF::Vector<BOOL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::fill((uint64_t)this + 304, &v63, (WTF *)*((unsigned int *)this + 79));
  v8 = (_QWORD *)((char *)this + 320);
  v62 = 0;
  result = (uint64_t)WTF::Vector<BOOL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::fill((uint64_t)this + 320, &v62, (WTF *)*((unsigned int *)this + 83));
  v10 = *((unsigned int *)this + 16);
  if (v10 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
  {
    v11 = *(_QWORD *)((v10 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    if (v11)
    {
      v55 = *((unsigned int *)this + 53);
      if ((_DWORD)v55)
      {
        v58 = *((unsigned int *)this + 71);
        if ((_DWORD)v58)
        {
          for (i = 0; i != v55; ++i)
          {
            v12 = 0;
            v57 = (int)i + 1;
            do
            {
              v61 = v12;
              v13 = (WTF *)WTF::fastMalloc((WTF *)4);
              *(_DWORD *)v13 = 0;
              v14 = (WTF *)WTF::fastMalloc((WTF *)4);
              *(_DWORD *)v14 = 16843009;
              v15 = *(unsigned __int8 *)(v11 + 46);
              v59 = v14;
              v60 = v13;
              if (v15 != 11)
              {
                if (v15 != 10)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1963C5BC0);
                }
                v26 = *(_QWORD **)(*(_QWORD *)(v11 + 24) + 8);
                if (!(*(unsigned int (**)(_QWORD *))(*v26 + 192))(v26))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1963C5BE0);
                }
                if (*(_QWORD *)(v26[12] + 24) != *(_QWORD *)(WebCore::HTMLNames::frameTag + 24))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1963C5C00);
                }
                v27 = v26[13];
                if (v27)
                {
                  v28 = *(unsigned int *)(v27 + 4);
                  if ((v28 & 1) == 0)
                  {
                    v29 = (uint64_t *)(v27 + 32);
                    v30 = v28 >> 5;
                    if (!(v28 >> 5))
                      goto LABEL_45;
LABEL_39:
                    while (1)
                    {
                      v39 = *v29;
                      if (*v29 == WebCore::HTMLNames::noresizeAttr
                        || *(_QWORD *)(v39 + 24) == *(_QWORD *)(WebCore::HTMLNames::noresizeAttr + 24)
                        && *(_QWORD *)(v39 + 32) == *(_QWORD *)(WebCore::HTMLNames::noresizeAttr + 32))
                      {
                        break;
                      }
                      v29 += 2;
                      if (!--v30)
                        goto LABEL_45;
                    }
                    v40 = 1;
LABEL_46:
                    v41 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8);
                    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v41 + 192))(v41))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1963C5C20);
                    }
                    if (*(_QWORD *)(*(_QWORD *)(v41 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::frameTag + 24))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1963C5C40);
                    }
                    v42 = v8;
                    v43 = v7;
                    v44 = v5;
                    v45 = v4;
                    v46 = v2;
                    v47 = *(unsigned __int8 *)(v41 + 137);
                    v18 = (WTF *)WTF::fastMalloc((WTF *)4);
                    *(_DWORD *)v18 = 16843009 * v40;
                    v22 = (WTF *)WTF::fastMalloc((WTF *)4);
                    v48 = 16843009 * v47;
                    v2 = v46;
                    v4 = v45;
                    v5 = v44;
                    v7 = v43;
                    v8 = v42;
                    *(_DWORD *)v22 = v48;
                    goto LABEL_49;
                  }
                  v29 = *(uint64_t **)(v27 + 40);
                  v30 = *(unsigned int *)(v27 + 52);
                  if (v30)
                    goto LABEL_39;
                }
LABEL_45:
                v40 = 0;
                goto LABEL_46;
              }
              v16 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8);
              if ((*(_WORD *)(v16 + 28) & 0x10) == 0
                || *(_QWORD *)(*(_QWORD *)(v16 + 96) + 24) != *(_QWORD *)(*v2 + 24))
              {
                __break(0xC471u);
                JUMPOUT(0x1963C5B80);
              }
              v17 = *(unsigned __int8 *)(v16 + 144);
              v18 = (WTF *)WTF::fastMalloc((WTF *)4);
              *(_DWORD *)v18 = 16843009 * v17;
              v19 = WTF::fastMalloc((WTF *)4);
              *(_DWORD *)v19 = 16843009;
              v21 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8);
              if ((*(_WORD *)(v21 + 28) & 0x10) == 0
                || *(_QWORD *)(*(_QWORD *)(v21 + 96) + 24) != *(_QWORD *)(*v2 + 24))
              {
                __break(0xC471u);
                JUMPOUT(0x1963C5BA0);
              }
              v22 = (WTF *)v19;
              v23 = *(_DWORD *)(v21 + 128);
              v24 = *(_DWORD *)(v21 + 132);
              if (v23)
                v25 = v24 == 0;
              else
                v25 = 1;
              if (!v25)
              {
                v31 = *(unsigned int *)(v11 + 316);
                if (!(_DWORD)v31)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1963C5C88);
                }
                v32 = *(_BYTE **)(v11 + 304);
                *(_BYTE *)v18 = *v32;
                v33 = *(unsigned int *)(v11 + 332);
                if (!(_DWORD)v33)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1963C5C90);
                }
                v34 = *(_BYTE **)(v11 + 320);
                *(_BYTE *)v19 = *v34;
                if (v31 <= v24)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1963C5C98);
                }
                *((_BYTE *)v18 + 1) = v32[v24];
                if (v33 <= v24)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1963C5CA0);
                }
                *(_BYTE *)(v19 + 1) = v34[v24];
                v35 = *(unsigned int *)(v11 + 244);
                if (!(_DWORD)v35)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1963C5CA8);
                }
                v36 = *(_BYTE **)(v11 + 232);
                *((_BYTE *)v18 + 2) = *v36;
                v37 = *(unsigned int *)(v11 + 260);
                if (!(_DWORD)v37)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1963C5CB0);
                }
                v38 = *(_BYTE **)(v11 + 248);
                *(_BYTE *)(v19 + 2) = *v38;
                if (v35 <= v23)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1963C5CB8);
                }
                *((_BYTE *)v18 + 3) = v36[v23];
                if (v37 <= v23)
                {
                  __break(0xC471u);
LABEL_105:
                  JUMPOUT(0x1963C5B40);
                }
                *(_BYTE *)(v19 + 3) = v38[v23];
              }
LABEL_49:
              WTF::fastFree(v60, v20);
              WTF::fastFree(v59, v49);
              if (*(_BYTE *)v22)
              {
                if ((int)v61 >= (unint64_t)*((unsigned int *)this + 83))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1963C5C48);
                }
                *(_BYTE *)(*v8 + (int)v61) = 1;
              }
              if (*((_BYTE *)v22 + 1))
              {
                v51 = (int)v61 + 1;
                if (v51 >= *((unsigned int *)this + 83))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1963C5C50);
                }
                *(_BYTE *)(*v8 + v51) = 1;
              }
              if (*(_BYTE *)v18)
              {
                if ((int)v61 >= (unint64_t)*((unsigned int *)this + 79))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1963C5C58);
                }
                *(_BYTE *)(*v7 + (int)v61) = 1;
              }
              if (*((_BYTE *)v18 + 1))
              {
                v52 = (int)v61 + 1;
                if (v52 >= *((unsigned int *)this + 79))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1963C5C60);
                }
                *(_BYTE *)(*v7 + v52) = 1;
              }
              if (*((_BYTE *)v22 + 2))
              {
                if ((int)i >= (unint64_t)*((unsigned int *)this + 65))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1963C5C68);
                }
                *(_BYTE *)(*v5 + (int)i) = 1;
              }
              if (*((_BYTE *)v22 + 3))
              {
                if (v57 >= *((unsigned int *)this + 65))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1963C5C70);
                }
                *(_BYTE *)(*v5 + v57) = 1;
              }
              if (*((_BYTE *)v18 + 2))
              {
                if ((int)i >= (unint64_t)*((unsigned int *)this + 61))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1963C5C78);
                }
                *(_BYTE *)(*v4 + (int)i) = 1;
              }
              if (*((_BYTE *)v18 + 3))
              {
                if (v57 >= *((unsigned int *)this + 61))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1963C5C80);
                }
                *(_BYTE *)(*v4 + v57) = 1;
              }
              v53 = *(unsigned int *)(v11 + 47);
              if (v53 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32))
                v11 = *(_QWORD *)((v53 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32)) + 8);
              else
                v11 = 0;
              WTF::fastFree(v22, v50);
              result = WTF::fastFree(v18, v54);
              if (!v11)
                return result;
              v12 = v61 + 1;
            }
            while (v61 + 1 != v58);
          }
        }
      }
    }
  }
  return result;
}

unint64_t WebCore::RenderFrameSet::layout(WebCore::RenderFrameSet *this)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  double v6;
  int v7;
  int v8;
  double v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  signed int v14;
  int v15;
  int v16;
  WebCore::RenderFrameSet::GridAxis *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  int v24;
  uint64_t v25;
  WebCore::RenderFrameSet::GridAxis *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void *v34;
  unint64_t result;
  WTF *v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  BOOL v43;
  int v44;
  int v45;
  int v46;
  int32x2_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int32x4_t v52;
  int v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int8x16_t v58;
  int8x16_t v59;
  void *v60;
  WTF *v61;
  unint64_t v62;
  WTF *v63;
  int v64;
  int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  WTF *v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  int32x2_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int32x4_t v80;
  int v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  void *v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  int v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  unint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  int v104;
  uint64_t v105;
  int v106;
  double v107;
  int v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t i;
  WebCore::RenderFrameSet *v119;
  uint64_t v121;
  void *v122;
  WTF *v123;
  void *v124;
  uint64_t v125;
  int v126;
  int v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  unint64_t v132;
  int v133;
  uint64_t v134;
  WTF *v135;
  int8x16_t v136;

  v2 = *((_DWORD *)this + 5);
  if ((~v2 & 0x208) != 0)
    goto LABEL_4;
  if ((v2 & 0x8000) != 0)
  {
    if ((*((_BYTE *)this + 45) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1963C67B4);
    }
    v113 = *((_QWORD *)this + 18);
    if (v113)
    {
      if ((*(_BYTE *)(v113 + 25) & 8) != 0)
        goto LABEL_4;
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                            + 40)
                                                                + 8)
                                                    + 528)
                                        + 8)
                            + 288)
                + 476))
  {
LABEL_4:
    v133 = 0;
    v3 = 0;
    v134 = 0;
    LODWORD(v132) = 0;
    v4 = 0;
  }
  else
  {
    WebCore::RenderObject::containerForRepaint(this, (uint64_t)&v136);
    v3 = v136.i64[1];
    v94 = (*(uint64_t (**)(WebCore::RenderFrameSet *, uint64_t, uint64_t))(*(_QWORD *)this + 440))(this, v136.i64[1], 0xC00000000);
    v4 = v94;
    v134 = v95;
    v132 = HIDWORD(v94);
    v133 = 1;
  }
  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 46) != 11)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
    if (!*(_BYTE *)(v5 + 3382))
    {
      v6 = (float)(int)WebCore::RenderView::viewWidth(*(WebCore::RenderView **)(v5 + 1944)) * 64.0;
      if (v6 > -2147483650.0)
        v7 = (int)v6;
      else
        v7 = 0x80000000;
      if (v6 < 2147483650.0)
        v8 = v7;
      else
        v8 = 0x7FFFFFFF;
      *((_DWORD *)this + 40) = v8;
      v9 = (float)(int)WebCore::RenderView::viewHeight(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                                                           + 8)
                                                                               + 1944))
         * 64.0;
      if (v9 >= 2147483650.0)
      {
        v10 = 0x7FFFFFFF;
      }
      else if (v9 <= -2147483650.0)
      {
        v10 = 0x80000000;
      }
      else
      {
        v10 = (int)v9;
      }
      *((_DWORD *)this + 41) = v10;
    }
  }
  v11 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v11 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1963C637CLL);
  }
  v13 = *(_DWORD *)(v11 + 128);
  v12 = *(_DWORD *)(v11 + 132);
  if (*((_DWORD *)this + 53) != v13 || *((_DWORD *)this + 71) != v12)
  {
    WebCore::RenderFrameSet::GridAxis::resize((WebCore::RenderFrameSet *)((char *)this + 200), *(_DWORD *)(v11 + 128));
    WebCore::RenderFrameSet::GridAxis::resize((WebCore::RenderFrameSet *)((char *)this + 272), v12);
    v11 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v11 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x1963C63E0);
    }
  }
  v14 = *(unsigned __int8 *)(v11 + 142);
  if (*(_BYTE *)(v11 + 142))
  {
    v15 = *(_DWORD *)(v11 + 136);
    v16 = v15 << 6;
    if (v15 > 0x1FFFFFF)
      v16 = 0x7FFFFFFF;
    if (v15 >= -33554432)
      v14 = v16;
    else
      v14 = 0x80000000;
  }
  v17 = *(WebCore::RenderFrameSet::GridAxis **)(v11 + 112);
  v18 = *((_DWORD *)this + 41);
  LODWORD(v19) = (v13 - 1) << 6;
  if ((v13 - 1) <= 0x1FFFFFE)
    v19 = v19;
  else
    v19 = 0x7FFFFFFFLL;
  v20 = v14;
  v21 = v14 * v19 / 64;
  if (HIDWORD(v21) != (int)v21 >> 31)
    LODWORD(v21) = (v20 >> 31) + 0x7FFFFFFF;
  v22 = __OFSUB__(v18, (_DWORD)v21);
  v23 = v18 - v21;
  v24 = (v18 >> 31) + 0x7FFFFFFF;
  if (!v22)
    v24 = v23;
  WebCore::RenderFrameSet::layOutAxis((unsigned int *)this + 50, v17, (const WebCore::Length *)(v24 / 64));
  v25 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v25 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v25 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1963C6400);
  }
  v26 = *(WebCore::RenderFrameSet::GridAxis **)(v25 + 120);
  v27 = *((_DWORD *)this + 40);
  LODWORD(v28) = (v12 - 1) << 6;
  if (v12 - 1 <= 0x1FFFFFE)
    v28 = v28;
  else
    v28 = 0x7FFFFFFFLL;
  v29 = v20 * v28 / 64;
  if (HIDWORD(v29) != (int)v29 >> 31)
    LODWORD(v29) = (v20 >> 31) + 0x7FFFFFFF;
  v30 = v27 - v29;
  if (__OFSUB__(v27, (_DWORD)v29))
    v30 = (v27 >> 31) + 0x7FFFFFFF;
  WebCore::RenderFrameSet::layOutAxis((unsigned int *)this + 68, v26, (const WebCore::Length *)(v30 / 64));
  v31 = *((unsigned int *)this + 16);
  if (v31 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
  {
    v32 = *(_QWORD *)((v31 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    if (v32)
    {
      v33 = *(_BYTE *)(v32 + 45);
      if ((v33 & 4) != 0)
      {
        v91 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
        if ((*(_WORD *)(v91 + 28) & 0x10) == 0
          || *(_QWORD *)(*(_QWORD *)(v91 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
        {
          __break(0xC471u);
          JUMPOUT(0x1963C673CLL);
        }
        v92 = *(_DWORD *)(v91 + 128);
        if (*(_BYTE *)(v91 + 142))
          v93 = *(_DWORD *)(v91 + 136);
        else
          v93 = 0;
        if (v92 > 0)
        {
          v130 = *(unsigned int *)(v91 + 132);
          if ((int)v130 < 1)
          {
            if (*((_DWORD *)this + 53) > (v92 - 1))
              goto LABEL_147;
          }
          else
          {
            v125 = *(unsigned int *)(v91 + 128);
            v96 = 0;
            v97 = 0;
            while (v96 < *((unsigned int *)this + 53))
            {
              v98 = 0;
              v99 = 0;
              v128 = v96;
              v100 = *(_DWORD *)(*((_QWORD *)this + 25) + 4 * v96);
              LODWORD(v101) = v97 << 6;
              if (v97 < -33554432)
                LODWORD(v101) = 0x80000000;
              v126 = *(_DWORD *)(*((_QWORD *)this + 25) + 4 * v96);
              v127 = v97;
              if (v97 <= 0x1FFFFFF)
                v101 = v101;
              else
                v101 = 0x7FFFFFFFLL;
              v102 = v101 << 32;
              v103 = (float)v100 * 64.0;
              v104 = (int)fmax(v103, -2147483650.0);
              if (v103 >= 2147483650.0)
                v104 = 0x7FFFFFFF;
              v131 = v104;
              v129 = v102;
              do
              {
                LODWORD(v105) = v99 << 6;
                if (v99 < -33554432)
                  LODWORD(v105) = 0x80000000;
                if (v99 <= 0x1FFFFFF)
                  v105 = v105;
                else
                  v105 = 0x7FFFFFFFLL;
                *(_QWORD *)(v32 + 152) = v102 | v105;
                if (v98 >= *((unsigned int *)this + 71))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1963C68C4);
                }
                v106 = *(_DWORD *)(*((_QWORD *)this + 34) + 4 * v98);
                v107 = (float)v106 * 64.0;
                if (v107 >= 2147483650.0)
                {
                  v108 = 0x7FFFFFFF;
                }
                else if (v107 <= -2147483650.0)
                {
                  v108 = 0x80000000;
                }
                else
                {
                  v108 = (int)v107;
                }
                *(_DWORD *)(v32 + 160) = v108;
                *(_DWORD *)(v32 + 164) = v131;
                v109 = *(_DWORD *)(v32 + 20);
                if ((v109 & 8) == 0)
                {
                  *(_DWORD *)(v32 + 20) = v109 | 8;
                  if ((v109 & 0x8000) != 0)
                  {
                    if ((*(_BYTE *)(v32 + 45) & 0x10) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1963C67D4);
                    }
                    v110 = *(_QWORD *)(v32 + 144);
                    if (v110)
                    {
                      v111 = *(_DWORD *)(v110 + 8) + 1;
                      *(_DWORD *)(v110 + 8) = v111;
                    }
                    else
                    {
                      v111 = MEMORY[8];
                    }
                    *(_QWORD *)(v110 + 24) = *(_QWORD *)(v110 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
                    if (!v111)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1963C67F4);
                    }
                    *(_DWORD *)(v110 + 8) = v111 - 1;
                  }
                }
                (*(void (**)(uint64_t))(*(_QWORD *)v32 + 688))(v32);
                v112 = *(unsigned int *)(v32 + 47);
                if (!(v112 | ((unint64_t)*(unsigned __int8 *)(v32 + 51) << 32)))
                  goto LABEL_48;
                v32 = *(_QWORD *)((v112 | ((unint64_t)*(unsigned __int8 *)(v32 + 51) << 32)) + 8);
                if (!v32)
                  goto LABEL_48;
                v33 = *(_BYTE *)(v32 + 45);
                if ((v33 & 4) == 0)
                  goto LABEL_48;
                v99 += v93 + v106;
                ++v98;
                v102 = v129;
              }
              while (v130 != v98);
              v97 = v127 + v93 + v126;
              v96 = v128 + 1;
              if (v128 + 1 == v125)
                goto LABEL_147;
            }
          }
          __break(0xC471u);
          JUMPOUT(0x1963C68CCLL);
        }
        while (1)
        {
LABEL_147:
          *(_QWORD *)(v32 + 160) = 0;
          v114 = *(_DWORD *)(v32 + 20) & 0xFFDFFDFF | 0x200;
          *(_DWORD *)(v32 + 20) = v114;
          if ((v33 & 2) == 0)
          {
            *(_WORD *)(v32 + 69) &= ~1u;
            *(_WORD *)(v32 + 76) = *(_WORD *)(v32 + 76) & 0xF | (16
                                                               * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 24) + 8) + 40) + 8)
                                                                                                  + 1944)
                                                                                      + 248)
                                                                          + 472));
          }
          *(_DWORD *)(v32 + 20) = v114 & 0xFFDFFE07;
          v115 = *(unsigned int *)(v32 + 64);
          if (!(v115 | ((unint64_t)*(unsigned __int8 *)(v32 + 68) << 32))
            || (v116 = *(_QWORD *)((v115 | ((unint64_t)*(unsigned __int8 *)(v32 + 68) << 32)) + 8)) == 0)
          {
            if ((WebCore::RenderFrameSet *)v32 == this)
              goto LABEL_48;
            v117 = *(unsigned int *)(v32 + 47);
            if (!(v117 | ((unint64_t)*(unsigned __int8 *)(v32 + 51) << 32)))
              break;
            v116 = *(_QWORD *)((v117 | ((unint64_t)*(unsigned __int8 *)(v32 + 51) << 32)) + 8);
            if (!v116)
              break;
          }
LABEL_154:
          v33 = *(_BYTE *)(v116 + 45);
          v32 = v116;
          if ((v33 & 4) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1963C678CLL);
          }
        }
        for (i = *(_QWORD *)(v32 + 32); i; i = *((_QWORD *)v119 + 4))
        {
          v119 = *(WebCore::RenderFrameSet **)(i + 8);
          if (!v119 || v119 == this)
            break;
          v121 = *(unsigned int *)((char *)v119 + 47);
          if (v121 | ((unint64_t)*((unsigned __int8 *)v119 + 51) << 32))
          {
            v116 = *(_QWORD *)((v121 | ((unint64_t)*((unsigned __int8 *)v119 + 51) << 32)) + 8);
            if (v116)
              goto LABEL_154;
          }
        }
      }
    }
  }
LABEL_48:
  WebCore::RenderBox::layout((uint64_t)this);
  WebCore::RenderFrameSet::computeEdgeInfo(this);
  result = (unint64_t)WebCore::RenderLayerModelObject::updateLayerTransform(this, v34);
  if (!v133)
    goto LABEL_88;
  if (!v3)
  {
    v36 = 0;
    goto LABEL_51;
  }
  v36 = *(WTF **)(v3 + 8);
  if (v36)
    goto LABEL_174;
  v36 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v36 = 1;
  *((_QWORD *)v36 + 1) = v3;
  v123 = *(WTF **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v36;
  if (!v123)
    goto LABEL_174;
  if (*(_DWORD *)v123 != 1)
  {
    --*(_DWORD *)v123;
LABEL_174:
    ++*(_DWORD *)v36;
    goto LABEL_51;
  }
  WTF::fastFree(v123, v122);
  v36 = *(WTF **)(v3 + 8);
  if (v36)
    goto LABEL_174;
LABEL_51:
  v135 = v36;
  v37 = v4 + 63;
  if (v4 >= 0)
    v37 = v4;
  v38 = v4 - (v37 & 0xFFFFFFC0);
  v39 = v132 + 63;
  if ((v132 & 0x80000000) == 0)
    v39 = v132;
  v40 = v132 - (v39 & 0xFFFFFFC0);
  v41 = v38 + v134;
  if (__OFADD__(v38, (_DWORD)v134))
    v41 = (v38 >> 31) + 0x7FFFFFFF;
  v42 = (v40 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(v40, HIDWORD(v134)))
    v42 = v40 + HIDWORD(v134);
  v43 = -v41 < 0;
  v44 = v41 & 0x3F;
  v45 = v37 >> 6;
  v46 = v39 >> 6;
  v47 = vshr_n_s32((int32x2_t)vsra_n_u32((uint32x2_t)__PAIR64__(v42, v41), (uint32x2_t)vcltz_s32((int32x2_t)__PAIR64__(v42, v41)), 0x1AuLL), 6uLL);
  v48 = -v41 & 0x3F;
  if (v43)
    v49 = v44;
  else
    v49 = -v48;
  v43 = -v42 < 0;
  v50 = -v42 & 0x3F;
  v51 = v42 & 0x3F;
  v52.i64[0] = __PAIR64__(v40, v38);
  v52.i32[2] = v49;
  if (v43)
    v53 = v51;
  else
    v53 = -v50;
  v52.i32[3] = v53;
  v54.i64[0] = 0x2000000020;
  v54.i64[1] = 0x2000000020;
  v55 = vaddq_s32(v52, v54);
  v54.i64[0] = __PAIR64__(v46, v45);
  v54.u64[1] = (unint64_t)vsub_s32(v47, (int32x2_t)*(_OWORD *)&vshrq_n_s32(v55, 6uLL));
  v56 = vsraq_n_s32(v54, v55, 6uLL);
  v57.i64[0] = 0xFE000000FE000000;
  v57.i64[1] = 0xFE000000FE000000;
  v58 = (int8x16_t)vcgtq_s32(v56, v57);
  v55.i64[0] = 0xFE000000FE000000;
  v55.i64[1] = 0xFE000000FE000000;
  v59.i64[0] = 0x8000000080000000;
  v59.i64[1] = 0x8000000080000000;
  v136 = vorrq_s8((int8x16_t)(*(_OWORD *)&v58 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v55, v56), v59, (int8x16_t)vshlq_n_s32(v56, 6uLL)), v58));
  WebCore::RenderObject::repaintUsingContainer((uint64_t)this, (uint64_t *)&v135, (WebCore::LayoutRect *)&v136, 1);
  v61 = v135;
  v135 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 1)
      WTF::fastFree(v61, v60);
    else
      --*(_DWORD *)v61;
  }
  result = (*(uint64_t (**)(WebCore::RenderFrameSet *, uint64_t, uint64_t))(*(_QWORD *)this + 440))(this, v3, 0xC00000000);
  v65 = result;
  v66 = v62;
  v67 = HIDWORD(result);
  v68 = HIDWORD(v62);
  if (v4 != (_DWORD)result
    || (LODWORD(v63) = v132, (_DWORD)v132 != HIDWORD(result))
    || (LODWORD(v63) = v134, v62 != v134))
  {
    if (v3)
    {
      v69 = *(WTF **)(v3 + 8);
      if (!v69)
      {
        v69 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v69 = 1;
        *((_QWORD *)v69 + 1) = v3;
        v63 = *(WTF **)(v3 + 8);
        *(_QWORD *)(v3 + 8) = v69;
        if (v63)
        {
          if (*(_DWORD *)v63 == 1)
          {
            WTF::fastFree(v63, v124);
            v69 = *(WTF **)(v3 + 8);
            if (!v69)
              goto LABEL_74;
          }
          else
          {
            --*(_DWORD *)v63;
          }
        }
      }
      ++*(_DWORD *)v69;
    }
    else
    {
      v69 = 0;
    }
LABEL_74:
    v135 = v69;
    v70 = v65 - (v63 & 0xFFFFFFC0);
    v71 = v67 - (v64 & 0xFFFFFFC0);
    v72 = v70 + v66;
    if (__OFADD__(v70, v66))
      v72 = (v70 >> 31) + 0x7FFFFFFF;
    v73 = (v71 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__(v71, (_DWORD)v68))
      v73 = v71 + v68;
    v43 = -v72 < 0;
    v74 = v72 & 0x3F;
    v75 = vshr_n_s32((int32x2_t)vsra_n_u32((uint32x2_t)__PAIR64__(v73, v72), (uint32x2_t)vcltz_s32((int32x2_t)__PAIR64__(v73, v72)), 0x1AuLL), 6uLL);
    v76 = -v72 & 0x3F;
    if (v43)
      v77 = v74;
    else
      v77 = -v76;
    v43 = -v73 < 0;
    v78 = -v73 & 0x3F;
    v79 = v73 & 0x3F;
    v80.i64[0] = __PAIR64__(v71, v70);
    v80.i32[2] = v77;
    if (v43)
      v81 = v79;
    else
      v81 = -v78;
    v80.i32[3] = v81;
    v82.i64[0] = 0x2000000020;
    v82.i64[1] = 0x2000000020;
    v83 = vaddq_s32(v80, v82);
    v82.i32[0] = v65 / 64;
    v82.i32[1] = (int)v67 / 64;
    v82.u64[1] = (unint64_t)vsub_s32(v75, (int32x2_t)*(_OWORD *)&vshrq_n_s32(v83, 6uLL));
    v84 = vsraq_n_s32(v82, v83, 6uLL);
    v85.i64[0] = 0xFE000000FE000000;
    v85.i64[1] = 0xFE000000FE000000;
    v86 = (int8x16_t)vcgtq_s32(v84, v85);
    v83.i64[0] = 0xFE000000FE000000;
    v83.i64[1] = 0xFE000000FE000000;
    v87.i64[0] = 0x8000000080000000;
    v87.i64[1] = 0x8000000080000000;
    v136 = vorrq_s8((int8x16_t)(*(_OWORD *)&v86 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v83, v84), v87, (int8x16_t)vshlq_n_s32(v84, 6uLL)), v86));
    WebCore::RenderObject::repaintUsingContainer((uint64_t)this, (uint64_t *)&v135, (WebCore::LayoutRect *)&v136, 1);
    result = (unint64_t)v135;
    v135 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        result = WTF::fastFree((WTF *)result, v88);
      else
        --*(_DWORD *)result;
    }
  }
LABEL_88:
  v89 = *((_DWORD *)this + 5) & 0xFFDFFDFF | 0x200;
  *((_DWORD *)this + 5) = v89;
  if (this && (*((_BYTE *)this + 45) & 2) == 0)
  {
    *(_WORD *)((char *)this + 69) &= ~1u;
    *((_WORD *)this + 38) = *((_WORD *)this + 38) & 0xF | (16
                                                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                            + 1944)
                                                                                + 248)
                                                                    + 472));
  }
  *((_DWORD *)this + 5) = v89 & 0xFFDFFE07;
  if (v3)
  {
    v90 = *(_DWORD *)(v3 + 16);
    if (!v90)
    {
      __break(0xC471u);
      JUMPOUT(0x1963C676CLL);
    }
    *(_DWORD *)(v3 + 16) = v90 - 1;
  }
  return result;
}

uint64_t WebCore::RenderFrameSet::startResizing(uint64_t result, int **a2, int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  if ((*(_BYTE *)(result + 20) & 0xF8) != 0)
    goto LABEL_2;
  v3 = *(_QWORD *)(*(_QWORD *)(result + 24) + 8);
  if ((*(_WORD *)(v3 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
  {
    goto LABEL_31;
  }
  if (!*(_BYTE *)(v3 + 142))
    goto LABEL_2;
  v4 = *(_DWORD *)(v3 + 136);
  if (v4 < 1)
    goto LABEL_2;
  v5 = *((unsigned int *)a2 + 3);
  if (v5 < 2)
    goto LABEL_2;
  v6 = 0;
  v7 = *a2;
  v8 = **a2;
  v9 = 0x100000000;
  while (1)
  {
    v10 = v8 + v4;
    if (v8 <= a3 && v10 > a3)
      break;
    v8 = (*a2)[++v6] + v10;
    v9 += 0x100000000;
    if (v5 - 1 == v6)
      goto LABEL_2;
  }
  if ((_DWORD)v6 == -2)
    goto LABEL_2;
  if (v9 >> 32 >= (unint64_t)*((unsigned int *)a2 + 11))
  {
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x1963C69B8);
  }
  if (*((_BYTE *)a2[4] + (v9 >> 32)))
  {
LABEL_2:
    *((_DWORD *)a2 + 16) = -1;
    return result;
  }
  v11 = v6 + 1;
  *((_DWORD *)a2 + 16) = v6 + 1;
  if ((*(_BYTE *)(result + 20) & 0xF8) != 0)
  {
    v12 = 0;
  }
  else
  {
    if (v11 >= (int)v5)
      v13 = v5;
    else
      v13 = v6 + 1;
    if (v13 < 1)
    {
      v14 = 0;
    }
    else
    {
      v14 = 0;
      if ((int)v5 >= v11)
        v5 = v11;
      else
        v5 = v5;
      do
      {
        v15 = *v7++;
        v14 += v4 + v15;
        --v5;
      }
      while (v5);
    }
    v12 = v4 - v14;
  }
  *((_DWORD *)a2 + 17) = v12 + a3;
  return result;
}

void WebCore::RenderFrameSet::continueResizing(WebCore::RenderFrameSet *this, WebCore::RenderFrameSet::GridAxis *a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  WebCore::RenderElement *v17;
  uint64_t v18;
  int v19;

  if ((*((_BYTE *)this + 20) & 0xF8) != 0)
    return;
  v3 = *((int *)a2 + 16);
  if ((_DWORD)v3 == -1)
    return;
  v5 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v5 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
  {
    goto LABEL_35;
  }
  if (*(_BYTE *)(v5 + 142))
    v6 = *(_DWORD *)(v5 + 136);
  else
    v6 = 0;
  LODWORD(v7) = *((_DWORD *)a2 + 3);
  if ((_DWORD)v7)
  {
    if ((int)v3 >= (int)v7)
      v7 = v7;
    else
      v7 = v3;
    if ((int)v7 < 1)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      v9 = *(int **)a2;
      do
      {
        v10 = *v9++;
        v8 += v6 + v10;
        --v7;
      }
      while (v7);
    }
    v11 = v8 - v6;
  }
  else
  {
    v11 = 0;
  }
  v12 = a3 - (*((_DWORD *)a2 + 17) + v11);
  if (!v12)
    return;
  v13 = v3 - 1;
  if (*((unsigned int *)a2 + 7) <= (unint64_t)(v3 - 1))
  {
    __break(0xC471u);
    JUMPOUT(0x1963C6C34);
  }
  v14 = *((_QWORD *)a2 + 2);
  *(_DWORD *)(v14 + 4 * v13) += v12;
  v15 = *((int *)a2 + 16);
  if (*((unsigned int *)a2 + 7) <= v15)
  {
LABEL_35:
    __break(0xC471u);
    JUMPOUT(0x1963C6BE0);
  }
  *(_DWORD *)(v14 + 4 * v15) -= v12;
  v16 = *((_DWORD *)this + 5);
  if ((v16 & 8) == 0)
  {
    *((_DWORD *)this + 5) = v16 | 8;
    v17 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
    WebCore::RenderObject::scheduleLayout(this, v17);
    if ((*((_BYTE *)this + 21) & 0x80) != 0)
    {
      if ((*((_BYTE *)this + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1963C6C00);
      }
      v18 = *((_QWORD *)this + 18);
      if (v18)
      {
        v19 = *(_DWORD *)(v18 + 8) + 1;
        *(_DWORD *)(v18 + 8) = v19;
      }
      else
      {
        v19 = MEMORY[8];
      }
      *(_QWORD *)(v18 + 24) = *(_QWORD *)(v18 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
      if (!v19)
      {
        __break(0xC471u);
        JUMPOUT(0x1963C6C2CLL);
      }
      *(_DWORD *)(v18 + 8) = v19 - 1;
    }
  }
}

uint64_t WebCore::RenderFrameSet::userResize(WebCore::EventNames **this, int32x2_t *a2)
{
  WebCore::RenderFrameSet *v3;
  unint64_t StatusReg;
  uint64_t v5;
  WebCore::RenderFrameSet *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  void *v12;
  float32x2_t v13;
  WTF *v14;
  WTF *v15;
  WebCore *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::EventNames *v25;
  unsigned int v26;
  void *v28;
  float32x2_t v29;
  WTF *v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  __int16 v35;
  WebCore::EventNames **v36;
  float32x2_t v37;
  __int128 v38;
  __int128 v39;
  char v40;
  char v41;
  WTF *v42;
  WTF *v43;
  uint64_t v44;
  char v45;
  __int16 v46;
  uint64_t v47;

  v3 = (WebCore::RenderFrameSet *)this;
  if (!*((_BYTE *)this + 344))
  {
    if ((*((_BYTE *)this + 20) & 0xF8) == 0)
    {
      v24 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v24 || (this = *(WebCore::EventNames ***)(v24 + 96)) == 0)
        this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
      v25 = this[5];
      if (!v25)
      {
        v36 = this;
        WebCore::ThreadGlobalData::initializeEventNames(this);
        v25 = v36[5];
      }
      if (*(_QWORD *)&a2[3] == *((_QWORD *)v25 + 151))
      {
        v26 = a2[19].u16[1];
        if ((v26 < 3 || v26 - 65534 <= 1) && !a2[19].i16[1])
        {
          v37 = vmul_f32(vcvt_f32_s32(a2[18]), (float32x2_t)vdup_n_s32(0x3C800000u));
          v41 = 0;
          v38 = 0u;
          v39 = 0u;
          v40 = 0;
          v43 = 0;
          v44 = 0;
          v42 = 0;
          v45 = 0;
          v46 = 1;
          v47 = 0x100000000;
          (*(void (**)(WebCore::RenderFrameSet *, uint64_t, float32x2_t *))(*(_QWORD *)v3 + 584))(v3, 2, &v37);
          WebCore::TransformState::flatten((WebCore::TransformState *)&v37, 0);
          v29 = v37;
          v30 = v43;
          v43 = 0;
          if (v30)
            WTF::fastFree(v30, v28);
          v31 = v42;
          v42 = 0;
          if (v31)
            WTF::fastFree(v31, v28);
          WebCore::RenderFrameSet::startResizing((uint64_t)v3, (int **)v3 + 34, (int)v29.f32[0]);
          WebCore::RenderFrameSet::startResizing((uint64_t)v3, (int **)v3 + 25, (int)v29.f32[1]);
          if (*((_DWORD *)v3 + 84) != -1 || *((_DWORD *)v3 + 66) != -1)
          {
            *((_BYTE *)v3 + 344) = 1;
            v32 = *(_QWORD *)(*((_QWORD *)v3 + 3) + 8);
            if ((*(_WORD *)(v32 + 28) & 0x10) == 0
              || *(_QWORD *)(*(_QWORD *)(v32 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
            {
              __break(0xC471u);
              JUMPOUT(0x1963C7000);
            }
            v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 40) + 8) + 528) + 8) + 640);
            *(_DWORD *)(v32 + 24) += 2;
            v23 = *(_QWORD *)(v33 + 280);
            *(_QWORD *)(v33 + 280) = v32;
            if (!v23)
              return 1;
            goto LABEL_52;
          }
        }
      }
    }
    return 0;
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD *)(StatusReg + 736);
  if (!v5 || (v6 = *(WebCore::RenderFrameSet **)(v5 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v6 = (WebCore::RenderFrameSet *)this;
  }
  v7 = *((_QWORD *)v6 + 5);
  if (!v7)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
    v7 = *((_QWORD *)v6 + 5);
  }
  if (*(_QWORD *)&a2[3] != *(_QWORD *)(v7 + 1232))
  {
    v8 = *(_QWORD *)(StatusReg + 736);
    if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
      v9 = WebCore::threadGlobalDataSlow((WebCore *)this);
    v10 = *(_QWORD *)(v9 + 40);
    if (!v10)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
      v10 = *(_QWORD *)(v9 + 40);
    }
    if (*(_QWORD *)&a2[3] != *(_QWORD *)(v10 + 1256))
      return 0;
    v11 = a2[19].u16[1];
    if (v11 >= 3 && v11 - 65534 > 1)
      return 0;
    if (a2[19].i16[1])
      return 0;
  }
  v37 = vmul_f32(vcvt_f32_s32(a2[18]), (float32x2_t)vdup_n_s32(0x3C800000u));
  v41 = 0;
  v38 = 0u;
  v39 = 0u;
  v40 = 0;
  v43 = 0;
  v44 = 0;
  v42 = 0;
  v45 = 0;
  v46 = 1;
  v47 = 0x100000000;
  (*(void (**)(WebCore::RenderFrameSet *, uint64_t, float32x2_t *))(*(_QWORD *)v3 + 584))(v3, 2, &v37);
  WebCore::TransformState::flatten((WebCore::TransformState *)&v37, 0);
  v13 = v37;
  v14 = v43;
  v43 = 0;
  if (v14)
    WTF::fastFree(v14, v12);
  v15 = v42;
  v42 = 0;
  if (v15)
    WTF::fastFree(v15, v12);
  WebCore::RenderFrameSet::continueResizing(v3, (WebCore::RenderFrameSet *)((char *)v3 + 272), (int)v13.f32[0]);
  WebCore::RenderFrameSet::continueResizing(v3, (WebCore::RenderFrameSet *)((char *)v3 + 200), (int)v13.f32[1]);
  v18 = *(_QWORD *)(StatusReg + 736);
  if (!v18 || (v19 = *(_QWORD *)(v18 + 96)) == 0)
    v19 = WebCore::threadGlobalDataSlow(v16);
  v20 = *(_QWORD *)(v19 + 40);
  if (!v20)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v19);
    v20 = *(_QWORD *)(v19 + 40);
  }
  if (*(_QWORD *)&a2[3] != *(_QWORD *)(v20 + 1256))
    return 0;
  v21 = a2[19].u16[1];
  if (v21 >= 3 && v21 - 65534 > 1)
    return 0;
  if (a2[19].i16[1])
    return 0;
  *((_BYTE *)v3 + 344) = 0;
  v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 3) + 8) + 40) + 8)
                                          + 528)
                              + 8)
                  + 640);
  v23 = *(_QWORD *)(v22 + 280);
  *(_QWORD *)(v22 + 280) = 0;
  if (v23)
  {
LABEL_52:
    if (*(_DWORD *)(v23 + 24) == 2)
    {
      v34 = *(_WORD *)(v23 + 30);
      if ((v34 & 0x400) == 0)
      {
        v35 = *(_WORD *)(v23 + 28);
        if ((v35 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v23, v17);
        }
        else
        {
          if ((v35 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v23 + 160) + 16))(*(_QWORD *)(v23 + 160));
            v34 = *(_WORD *)(v23 + 30);
          }
          *(_WORD *)(v23 + 30) = v34 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 72))(v23);
        }
      }
    }
    else
    {
      *(_DWORD *)(v23 + 24) -= 2;
    }
  }
  return 1;
}

BOOL WebCore::RenderFrameSet::isChildAllowed(WebCore::RenderFrameSet *this, const WebCore::RenderObject *a2, const WebCore::RenderStyle *a3)
{
  return (*((_BYTE *)a2 + 46) & 0xFE) == 10;
}

uint64_t WebCore::RenderFrameSet::getCursor(WebCore::RenderFrameSet *this, const WebCore::LayoutPoint *a2, WebCore::Cursor *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  int v11;
  uint64_t v12;
  int v13;
  int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t i;
  int v26;
  uint64_t v27;
  _DWORD *v28;
  __int128 *v29;
  uint64_t v30;
  _DWORD *v31;

  v3 = *(_DWORD *)a2;
  v4 = *((_DWORD *)a2 + 1);
  v5 = *(_DWORD *)a2 + 63;
  if (*(int *)a2 >= 0)
    v5 = *(_DWORD *)a2;
  if (v4 >= 0)
    v6 = *((_DWORD *)a2 + 1);
  else
    v6 = v4 + 63;
  if ((*((_BYTE *)this + 20) & 0xF8) != 0)
    return 0;
  v9 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v9 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
  {
    goto LABEL_53;
  }
  if (!*(_BYTE *)(v9 + 142))
    return 0;
  v11 = *(_DWORD *)(v9 + 136);
  if (v11 >= 1)
  {
    v12 = *((unsigned int *)this + 53);
    if (v12 >= 2)
    {
      v13 = ((int)(v4 - (v6 & 0xFFFFFFC0) + 32) >> 6) + (v6 >> 6);
      v14 = (int *)*((_QWORD *)this + 25);
      v15 = *v14;
      v16 = 1;
      v17 = 0x100000000;
      while (1)
      {
        v18 = v15 + v11;
        if (v15 <= v13 && v18 > v13)
          break;
        v15 = v14[v16++] + v18;
        v17 += 0x100000000;
        if (v12 == v16)
          goto LABEL_23;
      }
      if ((_DWORD)v16 != -1)
      {
        if (v17 >> 32 >= (unint64_t)*((unsigned int *)this + 61))
        {
          __break(0xC471u);
          JUMPOUT(0x1963C73C4);
        }
        if (!*(_BYTE *)(*((_QWORD *)this + 29) + (v17 >> 32)))
        {
          {
            v30 = qword_1EE2F8438;
            *(_BYTE *)a3 = WebCore::rowResizeCursor(void)::c;
            if (v30)
              ++*(_DWORD *)(v30 + 8);
          }
          else
          {
            v30 = 0;
            WebCore::rowResizeCursor(void)::c = 20;
            xmmword_1EE2F8440 = 0uLL;
            qword_1EE2F8438 = 0;
            *(_BYTE *)a3 = 20;
          }
          v31 = (_DWORD *)*((_QWORD *)a3 + 1);
          *((_QWORD *)a3 + 1) = v30;
          if (v31)
          {
            if (v31[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 8))(v31);
            else
              --v31[2];
          }
          v29 = &xmmword_1EE2F8440;
          goto LABEL_47;
        }
      }
    }
  }
LABEL_23:
  v19 = *(_DWORD *)(v9 + 136);
  if (v19 < 1)
    return 0;
  v20 = *((unsigned int *)this + 71);
  if (v20 < 2)
    return 0;
  v21 = ((int)(v3 - (v5 & 0xFFFFFFC0) + 32) >> 6) + (v5 >> 6);
  v22 = (int *)*((_QWORD *)this + 34);
  v23 = *v22;
  v24 = 1;
  for (i = 0x100000000; ; i += 0x100000000)
  {
    v26 = v23 + v19;
    if (v23 <= v21 && v26 > v21)
      break;
    v7 = 0;
    v23 = v22[v24++] + v26;
    if (v20 == v24)
      return v7;
  }
  if ((_DWORD)v24 == -1)
    return 0;
  if (i >> 32 >= (unint64_t)*((unsigned int *)this + 79))
  {
LABEL_53:
    __break(0xC471u);
    JUMPOUT(0x1963C71C8);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 38) + (i >> 32)))
  {
    {
      v27 = qword_1EE2F8410;
      *(_BYTE *)a3 = WebCore::columnResizeCursor(void)::c;
      if (v27)
        ++*(_DWORD *)(v27 + 8);
    }
    else
    {
      v27 = 0;
      WebCore::columnResizeCursor(void)::c = 19;
      xmmword_1EE2F8418 = 0uLL;
      qword_1EE2F8410 = 0;
      *(_BYTE *)a3 = 19;
    }
    v28 = (_DWORD *)*((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = v27;
    if (v28)
    {
      if (v28[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
      else
        --v28[2];
    }
    v29 = &xmmword_1EE2F8418;
LABEL_47:
    *((_OWORD *)a3 + 1) = *v29;
    return 1;
  }
  return 0;
}

void WebCore::RenderGeometryMap::~RenderGeometryMap(WebCore::RenderGeometryMap *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v6;
  WTF **v7;
  WTF *v8;

  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v6 = 32 * v3;
    v7 = (WTF **)(*((_QWORD *)this + 3) + 16);
    do
    {
      v8 = *v7;
      *v7 = 0;
      if (v8)
        WTF::fastFree(v8, a2);
      v7 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  v4 = (WTF *)*((_QWORD *)this + 3);
  if ((WebCore::RenderGeometryMap *)((char *)this + 40) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
}

const WebCore::RenderObject *WebCore::RenderGeometryMap::pushMappingsToAncestor(WebCore::RenderGeometryMap *this, const WebCore::RenderObject *a2, const WebCore::RenderLayerModelObject *a3)
{
  uint64_t v5;
  const WebCore::RenderObject *result;
  BOOL v7;

  v5 = *(_QWORD *)this;
  *(_QWORD *)this = *((unsigned int *)this + 9);
  do
  {
    result = (const WebCore::RenderObject *)(*(uint64_t (**)(const WebCore::RenderObject *, const WebCore::RenderLayerModelObject *, WebCore::RenderGeometryMap *))(*(_QWORD *)a2 + 592))(a2, a3, this);
    a2 = result;
    if (result)
      v7 = result == a3;
    else
      v7 = 1;
  }
  while (!v7);
  *(_QWORD *)this = v5;
  return result;
}

void WebCore::RenderGrid::~RenderGrid(WebCore::RenderGrid *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF **v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  void *v14;
  void *v15;
  WTF *v16;
  uint64_t v17;
  WTF **v18;
  WTF *v19;
  uint64_t v20;
  WTF **v21;
  WTF *v22;

  v3 = *((_QWORD *)this + 92);
  if (v3)
  {
    v17 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v17)
    {
      v18 = (WTF **)*((_QWORD *)this + 92);
      do
      {
        v19 = *v18;
        if (*v18 != (WTF *)-1)
        {
          *v18 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 1)
              WTF::fastFree(v19, a2);
            else
              --*(_DWORD *)v19;
          }
        }
        v18 += 3;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v4 = *((_QWORD *)this + 91);
  if (v4)
  {
    v20 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v20)
    {
      v21 = (WTF **)*((_QWORD *)this + 91);
      do
      {
        v22 = *v21;
        if (*v21 != (WTF *)-1)
        {
          *v21 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 1)
              WTF::fastFree(v22, a2);
            else
              --*(_DWORD *)v22;
          }
        }
        v21 += 3;
        --v20;
      }
      while (v20);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v5 = *((_QWORD *)this + 84);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v6)
    {
      v7 = (WTF **)*((_QWORD *)this + 84);
      do
      {
        v8 = *v7;
        if (*v7 != (WTF *)-1)
        {
          *v7 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 1)
              WTF::fastFree(v8, a2);
            else
              --*(_DWORD *)v8;
          }
        }
        v7 += 2;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  v9 = (WTF *)*((_QWORD *)this + 82);
  if (v9)
  {
    *((_QWORD *)this + 82) = 0;
    *((_DWORD *)this + 166) = 0;
    WTF::fastFree(v9, a2);
  }
  v10 = (WTF *)*((_QWORD *)this + 80);
  if (v10)
  {
    *((_QWORD *)this + 80) = 0;
    *((_DWORD *)this + 162) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = (WTF *)*((_QWORD *)this + 78);
  if (v11)
  {
    *((_QWORD *)this + 78) = 0;
    *((_DWORD *)this + 158) = 0;
    WTF::fastFree(v11, a2);
  }
  v12 = (WTF *)*((_QWORD *)this + 73);
  if (v12)
  {
    *((_QWORD *)this + 73) = 0;
    *((_DWORD *)this + 148) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = (WTF *)*((_QWORD *)this + 71);
  if (v13)
  {
    *((_QWORD *)this + 71) = 0;
    *((_DWORD *)this + 144) = 0;
    WTF::fastFree(v13, a2);
  }
  WebCore::GridTrackSizingAlgorithm::~GridTrackSizingAlgorithm((WebCore::RenderGrid *)((char *)this + 336), a2);
  WebCore::Grid::~Grid((WebCore::RenderGrid *)((char *)this + 200), v14);
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v16 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
      WTF::fastFree(v16, v15);
    else
      --*(_DWORD *)v16;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, v15);
}

{
  _DWORD *v2;
  void *v3;

  WebCore::RenderGrid::~RenderGrid(this, a2);
  if (v2[4])
    bzero(v2, 0x2F0uLL);
  else
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
}

uint64_t WebCore::RenderGrid::selfAlignmentForChild(uint64_t a1, int a2, WebCore::RenderElement *this, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t result;
  int v13;

  if (a2 == 1)
    return WebCore::RenderGrid::justifySelfForChild(a1, this, 0, a4);
  v7 = *((unsigned __int8 *)this + 46);
  if (v7 == 12)
  {
    ++*((_DWORD *)this + 4);
    if ((WebCore::RenderGrid::isSubgridInParentDirection(this, 1) & 1) != 0)
    {
      result = 3;
LABEL_15:
      v13 = *((_DWORD *)this + 4);
      if (!v13)
      {
        __break(0xC471u);
        JUMPOUT(0x1963C77E4);
      }
      *((_DWORD *)this + 4) = v13 - 1;
      return result;
    }
  }
  if ((*((_BYTE *)this + 52) & 7) == 3)
    v8 = 7;
  else
    v8 = 3;
  v9 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 125);
  v10 = v9 & 0xF;
  if (v10 == 1)
  {
    v11 = a1 + 80;
    if (a4)
      v11 = a4;
    v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 32) + 124);
    v10 = v9 & 0xF;
  }
  if (v10 >= 3)
    result = v9;
  else
    result = v8;
  if (v7 == 12)
    goto LABEL_15;
  return result;
}

uint64_t WebCore::RenderGrid::justifySelfForChild(uint64_t a1, WebCore::RenderElement *this, int a3, uint64_t a4)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t result;
  int v14;

  v8 = *((unsigned __int8 *)this + 46);
  if (v8 == 12)
  {
    ++*((_DWORD *)this + 4);
    if ((WebCore::RenderGrid::isSubgridInParentDirection(this, 0) & 1) != 0)
    {
      result = 3;
LABEL_16:
      v14 = *((_DWORD *)this + 4);
      if (!v14)
      {
        __break(0xC471u);
        JUMPOUT(0x1963C7904);
      }
      *((_DWORD *)this + 4) = v14 - 1;
      return result;
    }
  }
  if ((*((_BYTE *)this + 52) & 7) == 3)
    v9 = 7;
  else
    v9 = 3;
  if (a3)
    v9 = 2;
  v10 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 127);
  v11 = v10 & 0xF;
  if (v11 == 1)
  {
    v12 = a1 + 80;
    if (a4)
      v12 = a4;
    v10 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 32) + 126);
    v11 = v10 & 0xF;
  }
  if (v11 >= 3)
    result = v10;
  else
    result = v9;
  if (v8 == 12)
    goto LABEL_16;
  return result;
}

uint64_t WebCore::RenderGrid::alignSelfForChild(uint64_t a1, WebCore::RenderElement *this)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t result;
  int v8;

  v4 = *((unsigned __int8 *)this + 46);
  if (v4 == 12)
  {
    ++*((_DWORD *)this + 4);
    if ((WebCore::RenderGrid::isSubgridInParentDirection(this, 1) & 1) != 0)
    {
      result = 3;
LABEL_9:
      v8 = *((_DWORD *)this + 4);
      if (!v8)
      {
        __break(0xC471u);
        JUMPOUT(0x1963C79C8);
      }
      *((_DWORD *)this + 4) = v8 - 1;
      return result;
    }
  }
  v5 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 125);
  v6 = v5 & 0xF;
  if (v6 == 1)
  {
    v5 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 124);
    v6 = v5 & 0xF;
  }
  if (v6 <= 2)
    result = 2;
  else
    result = v5;
  if (v4 == 12)
    goto LABEL_9;
  return result;
}

BOOL WebCore::RenderGrid::selfAlignmentChangedToStretch(uint64_t a1, int a2, uint64_t a3, uint64_t a4, WebCore::RenderElement *this)
{
  return (WebCore::RenderGrid::selfAlignmentForChild(a1, a2, this, a3) & 0xF) != 3
      && (WebCore::RenderGrid::selfAlignmentForChild(a1, a2, this, a4) & 0xF) == 3;
}

BOOL WebCore::RenderGrid::selfAlignmentChangedFromStretch(uint64_t a1, int a2, uint64_t a3, uint64_t a4, WebCore::RenderElement *this)
{
  return (WebCore::RenderGrid::selfAlignmentForChild(a1, a2, this, a3) & 0xF) == 3
      && (WebCore::RenderGrid::selfAlignmentForChild(a1, a2, this, a4) & 0xF) != 3;
}

void WebCore::RenderGrid::styleDidChange(uint64_t a1, WTF::StringImpl *a2, const WebCore::RenderStyle *a3)
{
  int v4;
  WebCore::RenderObject *v6;
  WebCore::RenderObject *v7;
  char v8;
  WebCore::RenderObject *v9;
  WebCore::RenderObject *v10;
  WebCore::RenderGrid *v11;
  const WebCore::RenderStyle *v12;
  int v13;
  const WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::RenderObject *v18;
  uint64_t v19;

  v4 = (int)a2;
  WebCore::RenderBlock::styleDidChange(a1, a2, a3);
  if (v4 == 8 && a3)
  {
    if (WebCore::RenderGrid::styleDidChange(WebCore::StyleDifference,WebCore::RenderStyle const*)::$_0::operator()(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 80), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 40) + 80), 0)|| WebCore::RenderGrid::styleDidChange(WebCore::StyleDifference,WebCore::RenderStyle const*)::$_0::operator()(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 80), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 40) + 80), 1))
    {
      v19 = a1;
      v17 = WebCore::RenderChildIteratorAdapter<WebCore::RenderBox>::begin(&v19);
      v18 = v6;
      if (v6)
      {
        v7 = v6;
        do
        {
          WebCore::RenderElement::setChildNeedsLayout(v7, 1);
          WebCore::RenderChildIterator<WebCore::RenderBox>::operator++((uint64_t)&v17);
          v7 = v18;
        }
        while (v18);
      }
    }
    if ((*(_BYTE *)(a1 + 52) & 7) == 3)
      v8 = 7;
    else
      v8 = 3;
    if ((WebCore::RenderStyle::resolvedAlignItems((uint64_t)a3, v8) & 0xF) == 3)
    {
      v19 = a1;
      v17 = WebCore::RenderChildIteratorAdapter<WebCore::RenderBox>::begin(&v19);
      v18 = v9;
      if (v9)
      {
        v10 = v9;
        do
        {
          if ((*((_DWORD *)v10 + 5) & 0x1800000) != 0x1000000
            && (WebCore::RenderGrid::selfAlignmentChangedToStretch(a1, 1, (uint64_t)a3, a1 + 80, v10)
             || WebCore::RenderGrid::selfAlignmentChangedFromStretch(a1, 1, (uint64_t)a3, a1 + 80, v10)
             || WebCore::RenderGrid::selfAlignmentChangedToStretch(a1, 2, (uint64_t)a3, a1 + 80, v10)
             || WebCore::RenderGrid::selfAlignmentChangedFromStretch(a1, 2, (uint64_t)a3, a1 + 80, v10)))
          {
            WebCore::RenderObject::setNeedsLayout(v10, 1);
          }
          WebCore::RenderChildIterator<WebCore::RenderBox>::operator++((uint64_t)&v17);
          v10 = v18;
        }
        while (v18);
      }
    }
    v11 = *(WebCore::RenderGrid **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 80);
    v12 = *(const WebCore::RenderStyle **)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 40) + 80);
    if ((*((_BYTE *)v12 + 258) != 0) != (*((_BYTE *)v11 + 258) != 0))
      v13 = 1;
    else
      v13 = (*((_BYTE *)v12 + 259) != 0) ^ (*((_BYTE *)v11 + 259) != 0);
    if (WebCore::RenderGrid::explicitGridDidResize(v11, v12)
      || WebCore::RenderGrid::namedGridLinesDefinitionDidChange((WebCore::RenderGrid *)a1, a3, v14)
      || WebCore::RenderGrid::implicitGridLinesDefinitionDidChange((WebCore::RenderGrid *)a1, a3, v15)
      || (v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 80),
          ((*(_BYTE *)(v16 + 24) ^ *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 40) + 80) + 24)) & 0xF) != 0)
      || *(_DWORD *)(v16 + 228)
      || ((*(_DWORD *)(v16 + 244) == 0) & ~v13) == 0)
    {
      WebCore::RenderGrid::dirtyGrid((WebCore::RenderGrid *)a1, v13);
    }
  }
}

BOOL WebCore::RenderGrid::styleDidChange(WebCore::StyleDifference,WebCore::RenderStyle const*)::$_0::operator()(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;

  v3 = a1 + 136;
  v4 = 120;
  if (a3 == 1)
    v4 = 136;
  else
    v3 = a1 + 120;
  v5 = a2 + 136;
  if (a3 != 1)
    v5 = a2 + 120;
  v6 = *(unsigned int *)(v3 + 12);
  if ((_DWORD)v6 != *(_DWORD *)(v5 + 12))
    return 1;
  if (!(_DWORD)v6)
    return 0;
  v8 = *(_QWORD *)(a1 + v4);
  v9 = *(_QWORD *)(a2 + v4);
  if (!WebCore::GridTrackSize::operator==(v8, v9))
    return 1;
  v10 = v8 + 88;
  v11 = v9 + 88;
  v12 = 1;
  do
  {
    v13 = v12;
    if (v6 == v12)
      break;
    v14 = WebCore::GridTrackSize::operator==(v10, v11);
    v12 = v13 + 1;
    v10 += 88;
    v11 += 88;
  }
  while (v14);
  return v13 < v6;
}

uint64_t WebCore::RenderGrid::selfAlignmentNormalBehavior(WebCore::RenderGrid *this, const WebCore::RenderBox *a2)
{
  if ((*((_BYTE *)a2 + 52) & 7) == 3)
    return 7;
  else
    return 3;
}

BOOL WebCore::RenderGrid::explicitGridDidResize(WebCore::RenderGrid *this, const WebCore::RenderStyle *a2)
{
  return *((_DWORD *)a2 + 33) != *((_DWORD *)this + 33)
      || *((_DWORD *)a2 + 37) != *((_DWORD *)this + 37)
      || *((_DWORD *)a2 + 21) != *((_DWORD *)this + 21)
      || *((_DWORD *)a2 + 20) != *((_DWORD *)this + 20)
      || *((_DWORD *)a2 + 57) != *((_DWORD *)this + 57)
      || *((_DWORD *)a2 + 61) != *((_DWORD *)this + 61);
}

BOOL WebCore::RenderGrid::namedGridLinesDefinitionDidChange(WebCore::RenderGrid *this, const WebCore::RenderStyle *a2, const WTF::StringImpl *a3)
{
  const WTF::StringImpl *v5;

  return !WTF::operator==<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>((WTF::StringImpl ***)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 40) + 80) + 160), (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 80) + 160), a3)|| !WTF::operator==<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>((WTF::StringImpl ***)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 40) + 80) + 152), (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 80) + 152), v5);
}

BOOL WebCore::RenderGrid::implicitGridLinesDefinitionDidChange(WebCore::RenderGrid *this, const WebCore::RenderStyle *a2, const WTF::StringImpl *a3)
{
  const WTF::StringImpl *v5;

  return !WTF::operator==<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>((WTF::StringImpl ***)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 40) + 80) + 16), (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 80) + 16), a3)|| !WTF::operator==<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>((WTF::StringImpl ***)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 40) + 80) + 8), (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 80) + 8), v5);
}

uint64_t WebCore::RenderGrid::dirtyGrid(WebCore::RenderGrid *this, char a2)
{
  WebCore::RenderGrid *v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::RenderGrid *v12;
  uint64_t v13;
  WebCore::RenderGrid *v14;

  v2 = this;
  result = *((_QWORD *)this + 41);
  if (!*(_BYTE *)(result + 80))
  {
    while (1)
    {
      result = WebCore::Grid::setNeedsItemsPlacement(result, (void *)1);
      if ((a2 & 1) != 0)
      {
        v5 = *((_QWORD *)v2 + 4);
      }
      else
      {
        if (!WebCore::RenderElement::establishesIndependentFormattingContext(v2))
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 40) + 80) + 258))
          {
            v13 = *((_QWORD *)v2 + 4);
            if (v13)
            {
              v14 = *(WebCore::RenderGrid **)(v13 + 8);
              if (v14)
              {
                if (*((_BYTE *)v14 + 46) == 12)
                {
                  result = WebCore::RenderGrid::areMasonryRows(v14);
                  v12 = v14;
                  if (!(_DWORD)result)
                    goto LABEL_26;
                }
              }
            }
          }
        }
        result = WebCore::RenderElement::establishesIndependentFormattingContext(v2);
        if ((result & 1) != 0)
          return result;
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 40) + 80) + 259))
          return result;
        v5 = *((_QWORD *)v2 + 4);
        if (!v5)
          return result;
        v6 = *(_QWORD *)(v5 + 8);
        if (!v6 || *(_BYTE *)(v6 + 46) != 12)
          return result;
        do
        {
          v7 = v6;
          v8 = *(_QWORD *)(v6 + 32);
          if (!v8)
            break;
          v6 = *(_QWORD *)(v8 + 8);
          if (!v6)
            break;
        }
        while (*(_BYTE *)(v6 + 46) == 12
             && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 40) + 80) + 259));
        v9 = v7;
        do
        {
          v10 = v9;
          v11 = *(_QWORD *)(v9 + 32);
          if (!v11)
            break;
          v9 = *(_QWORD *)(v11 + 8);
          if (!v9)
            break;
        }
        while (*(_BYTE *)(v9 + 46) == 12
             && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 40) + 80) + 258));
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 40) + 80) + 260)
          && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 40) + 80) + 261))
        {
          return result;
        }
      }
      if (!v5)
        return result;
      v12 = *(WebCore::RenderGrid **)(v5 + 8);
      if (!v12)
        return result;
LABEL_26:
      if (*((_BYTE *)v12 + 46) != 12)
        return result;
      a2 = 0;
      result = *((_QWORD *)v12 + 41);
      v2 = v12;
    }
  }
  return result;
}

uint64_t WebCore::RenderGrid::availableSpaceForGutters(WebCore::RenderBox *a1, int a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v9;

  v2 = *(_QWORD *)(*((_QWORD *)a1 + 11) + 40);
  v3 = (_BYTE *)(v2 + 388);
  v4 = (_BYTE *)(v2 + 376);
  if (a2)
    v4 = v3;
  if (!*v4 && (v4[8] & 0xF7) == 3)
  {
    if (a2)
      v9 = WebCore::RenderBox::contentLogicalHeight(a1);
    else
      v9 = WebCore::RenderBox::contentLogicalWidth(a1);
    v7 = v9 & 0xFFFFFF00;
    v5 = v9;
    v6 = 0x100000000;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
  }
  return v6 | v7 | v5;
}

uint64_t WebCore::RenderGrid::computeTrackSizesForDefiniteSize(uint64_t a1, unsigned int a2, uint64_t a3)
{
  WebCore::GridTrackSizingAlgorithm *v3;

  v3 = (WebCore::GridTrackSizingAlgorithm *)(a1 + 336);
  WebCore::GridTrackSizingAlgorithm::setup(a1 + 336, (void *)1, *(_DWORD *)(*(_QWORD *)(a1 + 328) + 100), 0, a2 | 0x100000000, a3);
  return WebCore::GridTrackSizingAlgorithm::run(v3);
}

uint64_t WebCore::RenderGrid::computeContentPositionAndDistributionOffset(WebCore::RenderGrid *this, int a2, _DWORD *a3, unsigned int a4)
{
  BOOL v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unsigned int v11;
  uint64_t result;
  unsigned int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::RenderGrid *v25;
  uint64_t v26;

  if (a2)
  {
    *((_QWORD *)this + 76) = 0;
    v7 = WebCore::RenderElement::establishesIndependentFormattingContext(this);
    v8 = *((_QWORD *)this + 11);
    if (!v7)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 80) + 258))
      {
        v24 = *((_QWORD *)this + 4);
        if (v24)
        {
          v25 = *(WebCore::RenderGrid **)(v24 + 8);
          if (v25)
          {
            if (*((_BYTE *)v25 + 46) == 12)
            {
              v26 = *((_QWORD *)this + 11);
              result = WebCore::RenderGrid::areMasonryRows(v25);
              v8 = v26;
              if (!(_DWORD)result)
                return result;
            }
          }
        }
      }
    }
    v9 = (char *)this + 608;
    v10 = (char *)this + 612;
    v11 = *(unsigned __int16 *)(*(_QWORD *)(v8 + 32) + 120);
    if ((v11 & 0x7F) != 0)
      result = v11;
    else
      result = 64;
  }
  else
  {
    *((_QWORD *)this + 75) = 0;
    result = WebCore::RenderGrid::isSubgridColumns(this);
    if ((result & 1) != 0)
      return result;
    result = WebCore::RenderStyle::resolvedJustifyContent((uint64_t)this + 80, WebCore::contentAlignmentNormalBehaviorGrid(void)::normalBehavior);
    v10 = (char *)this + 604;
    v9 = (char *)this + 600;
  }
  v13 = (result >> 4) & 7;
  v14 = result & 0xF;
  if (!v13)
  {
    LODWORD(v16) = *a3;
    goto LABEL_13;
  }
  v15 = (0x403030400uLL >> (8 * v13)) & 7;
  if (v13 > 4)
    LODWORD(v15) = 0;
  if ((result & 0xF) == 0)
    v14 = v15;
  v16 = *a3;
  if ((int)v16 < 1)
  {
LABEL_13:
    if ((int)v16 <= 0 && ((result >> 7) & 3) == 2)
      return result;
    goto LABEL_15;
  }
  if (v13 == 3)
  {
    LODWORD(v21) = (a4 + 1) << 6;
    if (a4 + 1 <= 0x1FFFFFE)
      v21 = v21;
    else
      v21 = 0x7FFFFFFFLL;
    v16 = (v16 << 6) / v21;
    if (v16 >= 0x7FFFFFFF)
      LODWORD(v16) = 0x7FFFFFFF;
    *(_DWORD *)v10 = v16;
LABEL_44:
    *(_DWORD *)v9 = v16;
  }
  else
  {
    if (v13 != 2)
    {
      if (v13 == 1 && a4 >= 2)
      {
        LODWORD(v17) = (a4 - 1) << 6;
        v18 = 0x7FFFFFFF;
        if (a4 - 1 <= 0x1FFFFFE)
          v17 = v17;
        else
          v17 = 0x7FFFFFFFLL;
        v19 = (v16 << 6) / v17;
        if (v19 < 0x7FFFFFFF)
          v18 = v19;
        *(_DWORD *)v10 = v18;
        return result;
      }
LABEL_15:
      switch(v14)
      {
        case 3:
          if ((int)v16 >= 0)
            v20 = v16;
          else
            v20 = v16 + 1;
          *(_DWORD *)v9 = v20 >> 1;
          break;
        case 5:
        case 7:
          goto LABEL_44;
        case 8:
          if ((*((_BYTE *)this + 123) & 4) != 0)
            goto LABEL_44;
          break;
        case 9:
          if ((*((_BYTE *)this + 123) & 4) == 0)
            goto LABEL_44;
          break;
        default:
          return result;
      }
      return result;
    }
    if (!a4)
      goto LABEL_15;
    LODWORD(v22) = a4 << 6;
    if (a4 <= 0x1FFFFFE)
      v22 = v22;
    else
      v22 = 0x7FFFFFFFLL;
    v23 = (v16 << 6) / v22;
    if (v23 >= 0x7FFFFFFF)
      v23 = 0x7FFFFFFFLL;
    *(_DWORD *)v10 = v23;
    *(_DWORD *)v9 = (unint64_t)v23 >> 1;
  }
  return result;
}

BOOL WebCore::RenderGrid::canPerformSimplifiedLayout(WebCore::RenderGrid *this)
{
  unsigned int v1;
  _BOOL8 result;

  v1 = *((_DWORD *)this + 5);
  if ((v1 & 0x40) != 0 && *(_BYTE *)(*((_QWORD *)this + 41) + 80) != 0 || (*((_DWORD *)this + 5) & 0x128) != 0)
    return 0;
  if ((v1 & 0x200) != 0)
  {
    result = (v1 & 0x200000) == 0;
    if ((v1 & 0x200040) == 0)
      return (v1 >> 7) & 1;
  }
  else
  {
    if ((v1 & 0x40) == 0)
      return (v1 >> 7) & 1;
    return 1;
  }
  return result;
}

uint64_t WebCore::RenderGrid::computeAspectRatioDependentAndBaselineItems(WebCore::RenderGrid *this, uint64_t a2)
{
  char v3;
  uint64_t v5;
  WebCore::RenderGrid *v6;
  uint64_t v7[2];

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v3 = 1;
  *(_BYTE *)(a2 + 746) = 1;
  *(_WORD *)(a2 + 744) = 0;
  v7[0] = a2;
  v7[1] = (uint64_t)this;
  if (!WebCore::RenderElement::establishesIndependentFormattingContext((WebCore::RenderElement *)a2))
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 40) + 80) + 258))
    {
      v5 = *(_QWORD *)(a2 + 32);
      if (v5)
      {
        v6 = *(WebCore::RenderGrid **)(v5 + 8);
        if (v6)
        {
          if (*((_BYTE *)v6 + 46) == 12)
            v3 = WebCore::RenderGrid::areMasonryRows(v6);
        }
      }
    }
  }
  return WebCore::cacheBaselineAlignedChildren<WebCore::RenderGrid::computeAspectRatioDependentAndBaselineItems(void)::$_0>(a2, (_QWORD *)(a2 + 336), 3, v7, v3);
}

uint64_t WebCore::cacheBaselineAlignedChildren<WebCore::RenderGrid::computeAspectRatioDependentAndBaselineItems(void)::$_0>(uint64_t result, _QWORD *a2, char a3, uint64_t *a4, BOOL a5)
{
  uint64_t v5;
  char v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  int v28;
  _BYTE *v29;
  _BYTE *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;

  if (*(unsigned int *)(result + 64) | ((unint64_t)*(unsigned __int8 *)(result + 68) << 32))
  {
    v5 = *(_QWORD *)((*(unsigned int *)(result + 64) | ((unint64_t)*(unsigned __int8 *)(result + 68) << 32)) + 8);
    if (v5)
    {
      v6 = *(_BYTE *)(v5 + 45);
      if ((v6 & 4) != 0)
      {
        v11 = result;
        while (1)
        {
          if ((*(_DWORD *)(v5 + 20) & 0x1800000) == 0x1000000)
            goto LABEL_98;
          if ((v6 & 1) == 0)
          {
            v12 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
            if (v12)
            {
              if ((*(_WORD *)(v12 + 28) & 0x10) != 0
                && *(_QWORD *)(*(_QWORD *)(v12 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
              {
                goto LABEL_98;
              }
            }
          }
          v48 = v5;
          v13 = *a4;
          WebCore::RenderBox::clearOverridingContentSize(v5, a2);
          if (((*(_BYTE *)(v5 + 21) & 0x10) == 0) != ((*(_BYTE *)(v13 + 21) & 0x10) == 0))
            *(_BYTE *)(v13 + 744) = 1;
          if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 88) + 32) + 148) >> 5) & 3u) - 1 < 2
            || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 288))(v5), (_DWORD)result))
          {
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1544))(v5);
            if ((result & 1) != 0
              || (result = WebCore::RenderBox::hasStretchedLogicalHeight((WebCore::RenderBox *)v5), (_DWORD)result))
            {
              v17 = *(_QWORD *)(*(_QWORD *)(v13 + 88) + 8);
              if (((*(_DWORD *)(v13 + 124) >> 13) & 6u) - 2 <= 3)
              {
                if (*(_BYTE *)(v17 + 16))
                  v47 = *(_BYTE *)(v17 + 16) == 7;
                else
                  v47 = 1;
                if (v47)
                {
LABEL_35:
                  v20 = a4[1];
                  v21 = *(unsigned int *)(v20 + 12);
                  if ((_DWORD)v21 == *(_DWORD *)(v20 + 8))
                  {
                    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4[1], v21 + 1, (unint64_t)&v48);
                    v21 = *(unsigned int *)(v20 + 12);
                    *(_QWORD *)(*(_QWORD *)v20 + 8 * v21) = *(_QWORD *)result;
                  }
                  else
                  {
                    *(_QWORD *)(*(_QWORD *)v20 + 8 * v21) = v5;
                  }
                  *(_DWORD *)(v20 + 12) = v21 + 1;
                  *(_BYTE *)(v13 + 745) = 1;
                  goto LABEL_15;
                }
                v19 = v17 + 12;
              }
              else
              {
                if (*(_BYTE *)(v17 + 8))
                  v18 = *(_BYTE *)(v17 + 8) == 7;
                else
                  v18 = 1;
                if (v18)
                  goto LABEL_35;
                v19 = v17 + 4;
              }
              if (*(_BYTE *)(v19 + 4) == 8)
                goto LABEL_35;
            }
          }
LABEL_15:
          v14 = *(_BYTE *)(v5 + 46);
          if (v14 == 12)
            v15 = v5;
          else
            v15 = 0;
          if (v14 == 12)
          {
            ++*(_DWORD *)(v5 + 16);
            if ((a3 & 2) != 0)
            {
              result = (uint64_t)WebCore::RenderGrid::isSubgridInParentDirection((WebCore::RenderElement *)v5, 1);
              if ((_DWORD)result)
              {
                if (((*(_BYTE *)(v5 + 21) & 0x10) == 0) != ((*(_BYTE *)(v11 + 21) & 0x10) == 0))
                  v16 = 1;
                else
                  v16 = 2;
                if ((a3 & 1) == 0)
                  goto LABEL_70;
LABEL_45:
                if (v14 == 12)
                {
                  result = (uint64_t)WebCore::RenderGrid::isSubgridInParentDirection((WebCore::RenderElement *)v5, 0);
                  if ((_DWORD)result)
                  {
                    if (((*(_BYTE *)(v5 + 21) & 0x10) == 0) != ((*(_BYTE *)(v11 + 21) & 0x10) == 0))
                      v22 = 2;
                    else
                      v22 = 1;
                    v16 = v22 | v16;
                    goto LABEL_70;
                  }
                }
LABEL_51:
                if ((*(_DWORD *)(v5 + 20) & 0x1800000) == 0x1000000)
                  goto LABEL_70;
                v23 = *(unsigned __int8 *)(v5 + 46);
                if (v23 == 12)
                {
                  ++*(_DWORD *)(v5 + 16);
                  result = (uint64_t)WebCore::RenderGrid::isSubgridInParentDirection((WebCore::RenderElement *)v5, 0);
                  if ((result & 1) != 0)
                  {
                    v24 = 3;
                    goto LABEL_62;
                  }
                }
                if ((*(_BYTE *)(v5 + 52) & 7) == 3)
                  v24 = 7;
                else
                  v24 = 3;
                v25 = *(_QWORD *)(v5 + 88);
                v26 = *(_BYTE *)(*(_QWORD *)(v25 + 32) + 127);
                v27 = v26 & 0xF;
                if (v27 == 1)
                {
                  v26 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 88) + 32) + 126);
                  v27 = v26 & 0xF;
                }
                if (v27 >= 3)
                  v24 = v26;
                if (v23 == 12)
                {
LABEL_62:
                  v28 = *(_DWORD *)(v5 + 16);
                  if (!v28)
                    goto LABEL_125;
                  *(_DWORD *)(v5 + 16) = v28 - 1;
                  v25 = *(_QWORD *)(v5 + 88);
                }
                v29 = *(_BYTE **)(v25 + 24);
                if ((*(_BYTE *)(v11 + 21) & 0x10) != 0)
                {
                  if (!v29[44])
                    goto LABEL_70;
                  v30 = v29 + 60;
                }
                else
                {
                  if (!v29[68])
                    goto LABEL_70;
                  v30 = v29 + 52;
                }
                if ((v24 & 0xE) == 4 && *v30)
                  result = WebCore::GridTrackSizingAlgorithm::cacheBaselineAlignedItem((uint64_t)a2, v5, 1, a5);
LABEL_70:
                if (v14 != 12 || !a5)
                  goto LABEL_93;
                v31 = (*(_DWORD *)(v15 + 20) & 0x1000) == 0;
                v32 = (*(_DWORD *)(a2[17] + 20) & 0x1000) == 0;
                result = WebCore::RenderElement::establishesIndependentFormattingContext((WebCore::RenderElement *)v15);
                if (v31 == v32)
                {
                  if ((result & 1) != 0)
                    goto LABEL_108;
                  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 88) + 40) + 80) + 258))
                    goto LABEL_92;
                  v43 = *(_QWORD *)(v15 + 32);
                  if (!v43)
                    goto LABEL_92;
                  v44 = *(_QWORD *)(v43 + 8);
                  if (!v44 || *(_BYTE *)(v44 + 46) != 12)
                    goto LABEL_92;
                  do
                  {
                    v45 = v44;
                    v46 = *(_QWORD *)(v44 + 32);
                    if (!v46)
                      break;
                    v44 = *(_QWORD *)(v46 + 8);
                    if (!v44)
                      break;
                  }
                  while (*(_BYTE *)(v44 + 46) == 12
                       && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 88) + 40) + 80) + 258));
                  a5 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 88) + 40) + 80) + 260) == 0;
                }
                else
                {
                  if ((result & 1) == 0)
                  {
                    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 88) + 40) + 80) + 259))
                    {
                      v33 = *(_QWORD *)(v15 + 32);
                      if (v33)
                      {
                        v34 = *(_QWORD *)(v33 + 8);
                        if (v34)
                        {
                          if (*(_BYTE *)(v34 + 46) == 12)
                          {
                            do
                            {
                              v35 = v34;
                              v36 = *(_QWORD *)(v34 + 32);
                              if (!v36)
                                break;
                              v34 = *(_QWORD *)(v36 + 8);
                              if (!v34)
                                break;
                            }
                            while (*(_BYTE *)(v34 + 46) == 12
                                 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 88) + 40) + 80) + 259));
                            v37 = v35;
                            do
                            {
                              v38 = v37;
                              v39 = *(_QWORD *)(v37 + 32);
                              if (!v39)
                                break;
                              v37 = *(_QWORD *)(v39 + 8);
                              if (!v37)
                                break;
                            }
                            while (*(_BYTE *)(v37 + 46) == 12
                                 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 88) + 40) + 80) + 258));
                            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 88) + 40) + 80) + 260))
                              v40 = 0;
                            else
                              v40 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 88) + 40) + 80) + 261) != 0;
                            a5 = !v40;
                            if (!(_DWORD)v16)
                            {
LABEL_95:
                              if (v14 == 12)
                              {
                                v41 = *(_DWORD *)(v5 + 16);
                                if (!v41)
                                {
LABEL_125:
                                  __break(0xC471u);
                                  JUMPOUT(0x1963C8B48);
                                }
                                *(_DWORD *)(v5 + 16) = v41 - 1;
                              }
                              goto LABEL_98;
                            }
LABEL_94:
                            result = WebCore::cacheBaselineAlignedChildren<WebCore::RenderGrid::computeAspectRatioDependentAndBaselineItems(void)::$_0>(v15, a2, v16, a4, a5);
                            goto LABEL_95;
                          }
                        }
                      }
                    }
LABEL_92:
                    a5 = 0;
LABEL_93:
                    if (!(_DWORD)v16)
                      goto LABEL_95;
                    goto LABEL_94;
                  }
LABEL_108:
                  a5 = 0;
                }
                if (!(_DWORD)v16)
                  goto LABEL_95;
                goto LABEL_94;
              }
LABEL_42:
              result = WebCore::RenderGrid::isBaselineAlignmentForChild(v11, (WebCore::RenderElement *)v5);
              if ((_DWORD)result)
                result = WebCore::GridTrackSizingAlgorithm::cacheBaselineAlignedItem((uint64_t)a2, v5, 2, a5);
            }
            v16 = 0;
            if ((a3 & 1) == 0)
              goto LABEL_70;
            goto LABEL_45;
          }
          if ((a3 & 2) != 0)
            goto LABEL_42;
          if ((a3 & 1) != 0)
          {
            v16 = 0;
            goto LABEL_51;
          }
LABEL_98:
          v42 = *(unsigned int *)(v5 + 47);
          if (v42 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32))
          {
            v5 = *(_QWORD *)((v42 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32)) + 8);
            if (v5)
            {
              v6 = *(_BYTE *)(v5 + 45);
              if ((v6 & 4) != 0)
                continue;
            }
          }
          return result;
        }
      }
    }
  }
  return result;
}

BOOL WebCore::RenderGrid::canSetColumnAxisStretchRequirementForItem(WebCore::RenderGrid *this, const WebCore::RenderBox *a2)
{
  int v4;
  char v5;
  char v6;
  unsigned int v7;
  int v8;
  _BOOL8 result;
  _BYTE *v10;
  unsigned __int8 *v11;

  if (((*((_BYTE *)a2 + 21) & 0x10) == 0) != ((*((_BYTE *)this + 21) & 0x10) == 0))
    return 0;
  v4 = *((unsigned __int8 *)a2 + 46);
  if (v4 == 12)
  {
    ++*((_DWORD *)a2 + 4);
    if ((WebCore::RenderGrid::isSubgridInParentDirection(a2, 1) & 1) != 0)
    {
      v5 = 3;
LABEL_12:
      v8 = *((_DWORD *)a2 + 4);
      if (!v8)
      {
        __break(0xC471u);
        JUMPOUT(0x1963C8CA4);
      }
      *((_DWORD *)a2 + 4) = v8 - 1;
      goto LABEL_14;
    }
  }
  if ((*((_BYTE *)a2 + 52) & 7) == 3)
    v5 = 7;
  else
    v5 = 3;
  v6 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 32) + 125);
  v7 = v6 & 0xF;
  if (v7 == 1)
  {
    v6 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 124);
    v7 = v6 & 0xF;
  }
  if (v7 >= 3)
    v5 = v6;
  if (v4 == 12)
    goto LABEL_12;
LABEL_14:
  if ((v5 & 0xF) != 3)
    return 0;
  result = WebCore::RenderGrid::hasAutoSizeInColumnAxis(this, a2);
  if ((_DWORD)result)
  {
    v10 = *(_BYTE **)(*((_QWORD *)a2 + 11) + 24);
    if ((*((_BYTE *)this + 21) & 0x10) != 0)
    {
      if (!v10[68])
        return 0;
      v11 = v10 + 52;
    }
    else
    {
      if (!v10[44])
        return 0;
      v11 = v10 + 60;
    }
    return *v11 != 0;
  }
  return result;
}

uint64_t WebCore::RenderGrid::layoutBlock(uint64_t a1, BOOL a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  int v7;
  _BOOL4 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *updated;
  uint64_t v15;
  const WebCore::RenderBox *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  const WebCore::RenderGrid *v34;
  uint64_t v35;
  unsigned int v36;
  _QWORD *v37;
  _BOOL4 v38;
  uint64_t v39;
  _BYTE *v40;
  int v41;
  int v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  BOOL v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  WebCore::RenderElement *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  int v76;
  int v77;
  unsigned int v78;
  uint64_t *v79;
  int v80;
  int v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  int v88;
  _QWORD *v89;
  const WebCore::RenderGrid *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  _QWORD *v94;
  _QWORD *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  WTF **v100;
  WTF **v101;
  const WebCore::RenderBlock *v102;
  unsigned int v103;
  void *v104;
  WTF *v105;
  uint64_t v106;
  uint64_t v107;
  WTF **v108;
  WTF *v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int v112;
  void *v113;
  unsigned int v114;
  WTF **v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  _BYTE *v120;
  int v121;
  WebCore::RenderObject *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  _BYTE *v128;
  uint64_t v129;
  unsigned int v130;
  int v131;
  int v132;
  unsigned int v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  unsigned int v152;
  BOOL v153;
  int v154;
  BOOL v155;
  _DWORD *v156;
  uint64_t v157;
  uint64_t v158;
  WebCore::RenderLayerScrollableArea *v159;
  unsigned int v160;
  int v161;
  unsigned int v162;
  uint64_t v163;
  int v164;
  unsigned int v165;
  int v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  WebCore::RenderGrid *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  int v177;
  int v178;
  uint64_t v179;
  WebCore::LocalFrameViewLayoutContext *v180;
  int v181;
  uint64_t v182;
  _BOOL4 v183;
  int v184;
  WTF *v185;
  uint64_t v186;
  int v187;
  WTF *v188;
  _QWORD v189[2];
  BOOL v190[63];
  BOOL v191;
  __int128 v192;
  uint64_t v193;

  if (!a2)
  {
    result = WebCore::RenderBlock::simplifiedLayout((WebCore::RenderBlock *)a1);
    if ((result & 1) != 0)
      return result;
  }
  if (WebCore::RenderGrid::isMasonry((WebCore::RenderGrid *)a1))
    return WebCore::RenderGrid::layoutMasonry(a1, a2);
  v191 = a2;
  WebCore::LayoutRepainter::LayoutRepainter((uint64_t)v190, (WebCore::RenderObject *)a1, 0, 0, 1);
  v5 = *(_QWORD *)(a1 + 152);
  v6 = *(_DWORD *)(a1 + 20);
  if ((v6 & 0x20000) != 0)
  {
    v149 = a1;
    if ((*(_BYTE *)(a1 + 45) & 2) != 0)
      v149 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v150 = *(_QWORD *)(v149 + 88);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v150 + 32) + 40) + 20))
      goto LABEL_247;
    v151 = *(_QWORD **)(v150 + 40);
    if (v151[41] || v151[38] || v151[39] || v151[40] || (v6 & 0x100000) != 0)
      goto LABEL_247;
  }
  if ((v6 & 0x4000) != 0 && *(_BYTE *)WebCore::RenderObject::rareData((WebCore::RenderObject *)a1))
  {
LABEL_247:
    v8 = 1;
  }
  else
  {
    v7 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
    v178 = 2;
    switch((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13)
    {
      case 1:
      case 2:
        goto LABEL_8;
      case 3:
      case 5:
        v7 = 3;
        goto LABEL_8;
      case 4:
        goto LABEL_9;
      default:
        v7 = 0;
LABEL_8:
        v178 = v7;
LABEL_9:
        v8 = (v178 & 0xFFFFFFFD) == 1;
        break;
    }
  }
  *(_QWORD *)&v192 = v5;
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944)
                 + 248);
  v180 = (WebCore::LocalFrameViewLayoutContext *)(v9 + 336);
  v10 = WebCore::LocalFrameViewLayoutContext::pushLayoutState(v9 + 336, (WebCore::RenderObject *)a1, (int *)&v192, 0, 0);
  v183 = v8;
  if (v8 && v10)
    ++*(_DWORD *)(v9 + 492);
  v181 = v10;
  v179 = v9;
  v188 = 0;
  v189[0] = 0;
  v189[1] = 0;
  v187 = 1;
  v11 = *(unsigned int *)(a1 + 64);
  if (v11 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
  {
    v12 = *(_QWORD *)((v11 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
    if (v12)
    {
      while ((*(_BYTE *)(v12 + 45) & 4) == 0)
      {
        v13 = *(unsigned int *)(v12 + 47);
        if (v13 | ((unint64_t)*(unsigned __int8 *)(v12 + 51) << 32))
        {
          v12 = *(_QWORD *)((v13 | ((unint64_t)*(unsigned __int8 *)(v12 + 51) << 32)) + 8);
          if (v12)
            continue;
        }
        goto LABEL_18;
      }
LABEL_58:
      v41 = *(_DWORD *)(v12 + 20);
      if ((v41 & 0x400) == 0)
      {
        v42 = v41 & 0x1800000;
        v43 = (*(_DWORD *)(v12 + 20) & 0xF8) == 0 || v42 == 0x1000000;
        if (!v43
          && WebCore::RenderGrid::canSetColumnAxisStretchRequirementForItem((WebCore::RenderGrid *)a1, (const WebCore::RenderBox *)v12))
        {
          LOBYTE(v185) = 1;
          WTF::WeakHashMap<WebCore::RenderBox,WebCore::ItemLayoutRequirement,WTF::SingleThreadWeakPtrImpl>::add<WebCore::ItemLayoutRequirement>((uint64_t)v189, (_QWORD *)v12, &v185, (uint64_t)&v192);
        }
      }
      while (1)
      {
        v44 = *(unsigned int *)(v12 + 47);
        if (!(v44 | ((unint64_t)*(unsigned __int8 *)(v12 + 51) << 32)))
          break;
        v12 = *(_QWORD *)((v44 | ((unint64_t)*(unsigned __int8 *)(v12 + 51) << 32)) + 8);
        if (!v12)
          break;
        if ((*(_BYTE *)(v12 + 45) & 4) != 0)
          goto LABEL_58;
      }
    }
  }
LABEL_18:
  WebCore::RenderBlock::preparePaginationBeforeBlockLayout((const WebCore::RenderBlock *)a1, &v191);
  updated = (_DWORD *)WebCore::LocalFrameViewLayoutContext::updateScrollInfoAfterLayoutTransaction((WebCore::LocalFrameViewLayoutContext *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944) + 248) + 336));
  ++*updated;
  v15 = *(_QWORD *)(a1 + 160);
  LOBYTE(v17) = 1;
  if ((WebCore::RenderBlock::availableLogicalHeightForPercentageComputation((WebCore::RenderBlock *)a1, v16) & 0xFF00000000) == 0
    && (WebCore::RenderBox::overridingLogicalHeight((WebCore::RenderBox *)a1) & 0xFF00000000) == 0)
  {
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
    v19 = v18 + 4;
    v20 = v18 + 12;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
      v21 = v20;
    else
      v21 = v19;
    v22 = WebCore::RenderBox::computeContentAndScrollbarLogicalHeightUsing((WebCore::RenderBox *)a1, 0, v21, 0);
    if ((v22 & 0xFF00000000) == 0)
    {
      v24 = 0;
      goto LABEL_28;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 1272))(a1, v22);
    v23 = 1360;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v23 = 1352;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + v23))(a1);
  }
  v24 = 1;
LABEL_28:
  v185 = 0;
  v186 = 0;
  *(_BYTE *)(a1 + 746) = 1;
  *(_WORD *)(a1 + 744) = 0;
  *(_QWORD *)&v192 = a1;
  *((_QWORD *)&v192 + 1) = &v185;
  v182 = v15;
  if (!WebCore::RenderElement::establishesIndependentFormattingContext((WebCore::RenderElement *)a1)
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 80) + 258))
  {
    goto LABEL_308;
  }
  while (1)
  {
    WebCore::cacheBaselineAlignedChildren<WebCore::RenderGrid::computeAspectRatioDependentAndBaselineItems(void)::$_0>(a1, (_QWORD *)(a1 + 336), 3, (uint64_t *)&v192, v17);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1592))(a1) & 1) != 0
      || (v39 = *(_QWORD *)(a1 + 32)) != 0
      && (v40 = *(_BYTE **)(v39 + 8)) != 0
      && (v40[45] & 0x40) != 0
      && (*(unsigned int (**)(_BYTE *, uint64_t))(*(_QWORD *)v40 + 1704))(v40, a1))
    {
      v25 = 164;
      if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
        v25 = 160;
      *(_DWORD *)(a1 + v25) = 0;
    }
    WebCore::RenderBlock::layoutExcludedChildren(a1, v191);
    v192 = 0uLL;
    v193 = 0;
    WebCore::RenderBox::computeLogicalWidthInFragment((WebCore::RenderBox *)a1, (int *)&v192, 0);
    v26 = *(_DWORD *)(a1 + 124) >> 13;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
    {
      *(_DWORD *)(a1 + 164) = v192;
      *(_DWORD *)(a1 + 156) = DWORD1(v192);
    }
    else
    {
      *(_DWORD *)(a1 + 160) = v192;
      *(_DWORD *)(a1 + 152) = DWORD1(v192);
    }
    v27 = v26 & 7;
    v28 = *(_DWORD *)(a1 + 120);
    v29 = (v28 >> 26) & 1;
    v30 = v29;
    if ((v27 - 2) >= 2)
    {
      if (v27 == 4)
      {
        v30 = (v28 & 0x4000000) == 0;
      }
      else
      {
        v30 = (v28 >> 26) & 1;
        if (v27 != 5)
        {
          if ((v28 & 0x4000000) != 0)
            v31 = 1;
          else
            v31 = 3;
          goto LABEL_42;
        }
      }
    }
    v31 = v30 ? 2 : 0;
LABEL_42:
    *(_DWORD *)(a1 + 168 + 4 * v31) = v193;
    if ((v27 - 2) < 2)
      goto LABEL_344;
    if (v27 == 4)
    {
      v29 = (v28 & 0x4000000) == 0;
LABEL_344:
      v43 = v29 == 0;
      v32 = 2;
      if (!v43)
        v32 = 0;
      goto LABEL_47;
    }
    if (v27 == 5)
      goto LABEL_344;
    v32 = 3;
    if ((v28 & 0x4000000) == 0)
      v32 = 1;
LABEL_47:
    *(_DWORD *)(a1 + 168 + 4 * v32) = HIDWORD(v193);
    v33 = WebCore::RenderBox::contentLogicalWidth((WebCore::RenderBox *)a1);
    v17 = v33 | 0x100000000;
    WebCore::RenderGrid::placeItemsOnGrid((WebCore::RenderBlock *)a1, v17);
    *(_DWORD *)(a1 + 348) = v33;
    *(_BYTE *)(a1 + 352) = 1;
    WebCore::RenderGrid::performPreLayoutForGridItems(a1, (_QWORD *)(a1 + 336), 1);
    v35 = *(_QWORD *)(a1 + 328);
    v36 = *(_DWORD *)(v35 + 100)
        ? *(_DWORD *)(*(_QWORD *)(v35 + 88) + 12)
        : WebCore::GridPositionsResolver::explicitGridColumnCount((WebCore::GridPositionsResolver *)a1, v34);
    WebCore::GridTrackSizingAlgorithm::setup(a1 + 336, 0, v36, 0, v17, (uint64_t)&v187);
    WebCore::GridTrackSizingAlgorithm::run((WebCore::GridTrackSizingAlgorithm *)(a1 + 336));
    *(_QWORD *)&v192 = *(_QWORD *)(a1 + 356);
    if ((v192 & 0xFF00000000) != 0)
    {
      v37 = *(_QWORD **)(*(_QWORD *)(a1 + 328) + 112);
      if (v37)
      {
        v37 = (_QWORD *)*v37;
        if (v37)
          LODWORD(v37) = *((_DWORD *)v37 - 3);
      }
      WebCore::RenderGrid::computeContentPositionAndDistributionOffset((WebCore::RenderGrid *)a1, 0, &v192, *(_DWORD *)(a1 + 388) - (_DWORD)v37);
      v184 = v24;
      if ((v24 & 1) != 0)
      {
        v45 = WebCore::RenderBox::overridingLogicalHeight((WebCore::RenderBox *)a1);
        if ((v45 & 0xFF00000000) != 0)
        {
          v46 = v45;
          v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
          v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
          if (__OFADD__(v47, v48))
            v49 = (v47 >> 31) + 0x7FFFFFFF;
          else
            v49 = v47 + v48;
          v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1);
          v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
          v52 = v50 + v51;
          if (__OFADD__(v50, v51))
            v52 = (v50 >> 31) + 0x7FFFFFFF;
          v53 = __OFADD__(v49, v52);
          v54 = v49 + v52;
          if (v53)
            v54 = (v49 >> 31) + 0x7FFFFFFF;
          v53 = __OFSUB__(v46, v54);
          v55 = v46 - v54;
          if (v53)
            v55 = (v46 >> 31) + 0x7FFFFFFF;
          v56 = WebCore::RenderBox::constrainContentBoxLogicalHeightByMinMax((WebCore::RenderBox *)a1, v55, 0);
        }
        else
        {
          v56 = WebCore::RenderBox::availableLogicalHeight((WebCore::RenderObject *)a1, 0);
        }
        WebCore::GridTrackSizingAlgorithm::setup(a1 + 336, (void *)1, *(_DWORD *)(*(_QWORD *)(a1 + 328) + 100), 0, v56 | 0x100000000, (uint64_t)&v187);
        WebCore::GridTrackSizingAlgorithm::run((WebCore::GridTrackSizingAlgorithm *)(a1 + 336));
        v38 = 0;
      }
      else
      {
        WebCore::GridTrackSizingAlgorithm::setup(a1 + 336, (void *)1, *(_DWORD *)(*(_QWORD *)(a1 + 328) + 100), 1, 0, (uint64_t)&v187);
        WebCore::GridTrackSizingAlgorithm::run((WebCore::GridTrackSizingAlgorithm *)(a1 + 336));
        WebCore::RenderGrid::guttersSize((WebCore::RenderElement *)a1, 1, 0, *(_DWORD *)(a1 + 404), 0);
        v38 = WebCore::RenderElement::shouldApplySizeContainment((WebCore::RenderElement *)a1) != 0;
      }
      v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
      v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
      v59 = v57 + v58;
      if (__OFADD__(v57, v58))
        v59 = (v57 >> 31) + 0x7FFFFFFF;
      v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1);
      v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
      v62 = v60 + v61;
      if (__OFADD__(v60, v61))
        v62 = (v60 >> 31) + 0x7FFFFFFF;
      v63 = v59 + v62;
      if (__OFADD__(v59, v62))
        v63 = (v59 >> 31) + 0x7FFFFFFF;
      v64 = 1360;
      if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
        v64 = 1352;
      v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + v64))(a1);
      if (v65 >= -33554432)
        v66 = v65 << 6;
      else
        v66 = 0x80000000;
      if (v65 > 0x1FFFFFF)
        v66 = 0x7FFFFFFF;
      v67 = v63 + v66;
      if (__OFADD__(v63, v66))
        v67 = (v63 >> 31) + 0x7FFFFFFF;
      if (WebCore::RenderElement::shouldApplySizeContainment((WebCore::RenderElement *)a1)
        && (v168 = WebCore::RenderBox::explicitIntrinsicInnerLogicalHeight((WebCore::RenderBox *)a1),
            (v168 & 0xFF00000000) != 0))
      {
        v83 = v67 + v168;
        if (__OFADD__(v67, (_DWORD)v168))
          v83 = (v67 >> 31) + 0x7FFFFFFF;
      }
      else
      {
        v68 = *(WebCore::RenderElement **)(a1 + 472);
        v69 = *(unsigned __int8 *)(a1 + 456);
        if (WebCore::RenderGrid::isMasonry((uint64_t)v68, v69))
        {
          v81 = *((_DWORD *)v68 + 173);
        }
        else
        {
          if (v69)
            v70 = a1 + 392;
          else
            v70 = a1 + 376;
          v71 = *(unsigned int *)(v70 + 12);
          if ((_DWORD)v71)
          {
            v72 = 0;
            v73 = *(_QWORD *)v70;
            v74 = 136 * v71;
            v75 = (int *)(v73 + 8);
            do
            {
              v76 = *v75;
              v75 += 34;
              v77 = v76 & ~(v76 >> 31);
              v53 = __OFADD__(v72, v77);
              v78 = v72 + v77;
              if (v53)
                v72 = (v72 >> 31) + 0x7FFFFFFF;
              else
                v72 = v78;
              v74 -= 136;
            }
            while (v74);
          }
          else
          {
            v72 = 0;
          }
          if (v69)
            v79 = (uint64_t *)(a1 + 340);
          else
            v79 = (uint64_t *)(a1 + 348);
          v80 = WebCore::RenderGrid::guttersSize(v68, v69, 0, v71, *v79);
          v81 = v72 + v80;
          if (__OFADD__(v72, v80))
            v81 = (v72 >> 31) + 0x7FFFFFFF;
        }
        v53 = __OFADD__(v67, v81);
        v82 = v67 + v81;
        v83 = v53 ? (v67 >> 31) + 0x7FFFFFFF : v82;
      }
      v24 = v184;
      if (v38)
        WebCore::RenderGrid::computeTrackSizesForDefiniteSize(a1, v83, (uint64_t)&v187);
      v84 = 164;
      if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
        v84 = 160;
      *(_DWORD *)(a1 + v84) = v83;
      WebCore::RenderBox::updateLogicalHeight((WebCore::RenderBox *)a1);
      if ((v184 & 1) == 0)
      {
        v85 = 164;
        if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
          v85 = 160;
        v86 = *(_DWORD *)(a1 + v85);
        v53 = __OFSUB__(v86, v83);
        v87 = v86 - v83;
        v88 = (v86 >> 31) + 0x7FFFFFFF;
        if (!v53)
          v88 = v87;
        *(_DWORD *)(a1 + 364) = v88;
        *(_BYTE *)(a1 + 368) = 1;
      }
      *(_QWORD *)&v192 = *(_QWORD *)(a1 + 364);
      if ((v192 & 0xFF00000000) != 0)
      {
        v89 = *(_QWORD **)(*(_QWORD *)(a1 + 328) + 120);
        if (v89)
        {
          v89 = (_QWORD *)*v89;
          if (v89)
            LODWORD(v89) = *((_DWORD *)v89 - 3);
        }
        WebCore::RenderGrid::computeContentPositionAndDistributionOffset((WebCore::RenderGrid *)a1, 1, &v192, *(_DWORD *)(a1 + 404) - (_DWORD)v89);
        if (HIDWORD(v186))
        {
          WebCore::RenderGrid::updateGridAreaForAspectRatioItems((WebCore::RenderBox *)a1, (uint64_t)&v185, (unint64_t)&v187);
          WebCore::RenderBox::updateLogicalWidth((WebCore::RenderBox *)a1);
        }
        v91 = WebCore::RenderBox::contentLogicalHeight((WebCore::RenderBox *)a1);
        if (!*(_BYTE *)(a1 + 744)
          && !*(_BYTE *)(a1 + 337)
          && (!*(_BYTE *)(a1 + 338)
           || (v116 = *(_QWORD *)(a1 + 536)) != 0 && *(_DWORD *)(v116 - 12)
           || (v117 = *(_QWORD *)(a1 + 544)) != 0 && *(_DWORD *)(v117 - 12))
          && !*(_BYTE *)(a1 + 745))
        {
          goto LABEL_141;
        }
        v92 = *(_QWORD *)(a1 + 328);
        v93 = *(_DWORD *)(v92 + 100)
            ? *(_DWORD *)(*(_QWORD *)(v92 + 88) + 12)
            : WebCore::GridPositionsResolver::explicitGridColumnCount((WebCore::GridPositionsResolver *)a1, v90);
        WebCore::GridTrackSizingAlgorithm::setup(a1 + 336, 0, v93, 0, v17, (uint64_t)&v187);
        WebCore::GridTrackSizingAlgorithm::run((WebCore::GridTrackSizingAlgorithm *)(a1 + 336));
        *(_QWORD *)&v192 = *(_QWORD *)(a1 + 356);
        if ((v192 & 0xFF00000000) != 0)
        {
          v94 = *(_QWORD **)(*(_QWORD *)(a1 + 328) + 112);
          if (v94)
          {
            v94 = (_QWORD *)*v94;
            if (v94)
              LODWORD(v94) = *((_DWORD *)v94 - 3);
          }
          WebCore::RenderGrid::computeContentPositionAndDistributionOffset((WebCore::RenderGrid *)a1, 0, &v192, *(_DWORD *)(a1 + 388) - (_DWORD)v94);
          WebCore::GridTrackSizingAlgorithm::setup(a1 + 336, (void *)1, *(_DWORD *)(*(_QWORD *)(a1 + 328) + 100), 0, v91 | 0x100000000, (uint64_t)&v187);
          WebCore::GridTrackSizingAlgorithm::run((WebCore::GridTrackSizingAlgorithm *)(a1 + 336));
          *(_QWORD *)&v192 = *(_QWORD *)(a1 + 364);
          if ((v192 & 0xFF00000000) != 0)
            break;
        }
      }
    }
    std::__throw_bad_optional_access[abi:sn180100]();
LABEL_308:
    v169 = *(_QWORD *)(a1 + 32);
    if (v169)
    {
      v170 = *(WebCore::RenderGrid **)(v169 + 8);
      if (v170)
      {
        if (*((_BYTE *)v170 + 46) == 12)
          LOBYTE(v17) = WebCore::RenderGrid::areMasonryRows(v170);
      }
    }
  }
  v95 = *(_QWORD **)(*(_QWORD *)(a1 + 328) + 120);
  if (v95)
  {
    v95 = (_QWORD *)*v95;
    if (v95)
      LODWORD(v95) = *((_DWORD *)v95 - 3);
  }
  WebCore::RenderGrid::computeContentPositionAndDistributionOffset((WebCore::RenderGrid *)a1, 1, &v192, *(_DWORD *)(a1 + 404) - (_DWORD)v95);
LABEL_141:
  if (WebCore::RenderBlock::hasLineIfEmpty((WebCore::RenderBlock *)a1, v90))
  {
    v160 = WebCore::RenderBoxModelObject::borderAndPaddingLogicalHeight((WebCore::RenderBoxModelObject *)a1);
    v161 = WebCore::RenderBlock::lineHeight((char *)a1, (WTF::StringImpl *)1, (*(_DWORD *)(a1 + 20) >> 12) & 1, 1);
    v162 = v160 + v161;
    if (__OFADD__(v160, v161))
      v162 = (v160 >> 31) + 0x7FFFFFFF;
    v163 = 1360;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v163 = 1352;
    v164 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + v163))(a1);
    v165 = v164 << 6;
    if (v164 < -33554432)
      v165 = 0x80000000;
    if (v164 > 0x1FFFFFF)
      v165 = 0x7FFFFFFF;
    v53 = __OFADD__(v162, v165);
    v166 = v162 + v165;
    if (v53)
      v166 = (v162 >> 31) + 0x7FFFFFFF;
    v167 = 164;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v167 = 160;
    if (*(_DWORD *)(a1 + v167) > v166)
      v166 = *(_DWORD *)(a1 + v167);
    *(_DWORD *)(a1 + v167) = v166;
  }
  WebCore::RenderGrid::populateGridPositionsForDirection((WebCore::RenderBox *)a1, 0);
  WebCore::RenderGrid::populateGridPositionsForDirection((WebCore::RenderBox *)a1, 1);
  v97 = *(unsigned int *)(a1 + 64);
  if (v97 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
  {
    v98 = *(_QWORD *)((v97 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
    if (v98)
    {
      if ((*(_BYTE *)(v98 + 45) & 4) != 0)
      {
        v118 = &unk_1EE2F9000;
        v119 = &unk_1ECE91000;
        v120 = &unk_1ECE91000;
        do
        {
          v121 = *(_DWORD *)(v98 + 20) & 0x1800000;
          if (v121 != 0x1000000 && (*(_DWORD *)(v98 + 20) & 0x400) == 0)
          {
            if (*(_BYTE *)(v98 + 46) == 12)
            {
              if (!WebCore::RenderElement::establishesIndependentFormattingContext((WebCore::RenderElement *)v98))
              {
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v98 + 88) + 40) + 80) + 259))
                {
                  v136 = *(_QWORD *)(v98 + 32);
                  if (v136)
                  {
                    v137 = *(_QWORD *)(v136 + 8);
                    if (v137)
                    {
                      if (*(_BYTE *)(v137 + 46) == 12)
                      {
                        do
                        {
                          v138 = v137;
                          v139 = *(_QWORD *)(v137 + 32);
                          if (!v139)
                            break;
                          v137 = *(_QWORD *)(v139 + 8);
                          if (!v137)
                            break;
                        }
                        while (*(_BYTE *)(v137 + 46) == 12
                             && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v138 + 88) + 40) + 80) + 259));
                        v140 = v138;
                        do
                        {
                          v141 = v140;
                          v142 = *(_QWORD *)(v140 + 32);
                          if (!v142)
                            break;
                          v140 = *(_QWORD *)(v142 + 8);
                          if (!v140)
                            break;
                        }
                        while (*(_BYTE *)(v140 + 46) == 12
                             && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v141 + 88) + 40) + 80) + 258));
                        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v141 + 88) + 40) + 80) + 260)
                          || !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v138 + 88) + 40) + 80) + 261))
                        {
                          goto LABEL_354;
                        }
                      }
                    }
                  }
                }
              }
              if (!WebCore::RenderElement::establishesIndependentFormattingContext((WebCore::RenderElement *)v98))
              {
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v98 + 88) + 40) + 80) + 258))
                {
                  v171 = *(_QWORD *)(v98 + 32);
                  if (v171)
                  {
                    v172 = *(_QWORD *)(v171 + 8);
                    if (v172)
                    {
                      if (*(_BYTE *)(v172 + 46) == 12)
                      {
                        do
                        {
                          v173 = v172;
                          v174 = *(_QWORD *)(v172 + 32);
                          if (!v174)
                            break;
                          v172 = *(_QWORD *)(v174 + 8);
                          if (!v172)
                            break;
                        }
                        while (*(_BYTE *)(v172 + 46) == 12
                             && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v173 + 88) + 40) + 80) + 258));
                        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v173 + 88) + 40) + 80) + 260))
                        {
LABEL_354:
                          v175 = *(_DWORD *)(v98 + 20);
                          if ((v175 & 8) == 0)
                          {
                            *(_DWORD *)(v98 + 20) = v175 | 8;
                            if ((v175 & 0x8000) != 0)
                            {
                              if ((*(_BYTE *)(v98 + 45) & 0x10) == 0)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x1963CA058);
                              }
                              v176 = *(_QWORD *)(v98 + 144);
                              if (v176)
                              {
                                v177 = *(_DWORD *)(v176 + 8) + 1;
                                *(_DWORD *)(v176 + 8) = v177;
                              }
                              else
                              {
                                v177 = MEMORY[8];
                              }
                              *(_QWORD *)(v176 + 24) = *(_QWORD *)(v176 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
                              if (!v177)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x1963CA084);
                              }
                              *(_DWORD *)(v176 + 8) = v177 - 1;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v143 = WebCore::RenderGrid::gridAreaBreadthForChildIncludingAlignmentOffsets(a1, v98, 0);
            v144 = WebCore::RenderGrid::gridAreaBreadthForChildIncludingAlignmentOffsets(a1, v98, 1);
            WebCore::RenderGrid::updateGridAreaLogicalSize(a1, (WebCore::RenderBox *)v98, v143 | 0x100000000, v144 | 0x100000000);
            v192 = *(_OWORD *)(v98 + 152);
            WebCore::RenderGrid::applyStretchAlignmentToChildIfNeeded(a1, (WebCore::RenderBox *)v98, (unint64_t)&v187);
            WebCore::RenderGrid::applySubgridStretchAlignmentToChildIfNeeded(a1, (WebCore::RenderBox *)v98);
            if ((*(_BYTE *)(v98 + 20) & 0xF8) != 0)
            {
              v145 = *(_QWORD *)(v98 + 32);
              if (v145
                && (v146 = *(_QWORD *)(v145 + 8)) != 0
                && (*(_BYTE *)(*(_QWORD *)(v146 + 104) + 239) & 0x18) != 0
                && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v98 + 24) + 8)
                                                                             + 40)
                                                                 + 8)
                                                     + 1944)
                                         + 248)
                             + 479))
              {
                WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v98);
              }
              else
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v98 + 688))(v98);
              }
            }
            WebCore::RenderGrid::updateAutoMarginsInColumnAxisIfNeeded((WebCore::RenderGrid *)a1, (WebCore::RenderBox *)v98);
            WebCore::RenderGrid::updateAutoMarginsInRowAxisIfNeeded((WebCore::RenderGrid *)a1, (WebCore::RenderBox *)v98);
            WebCore::RenderGrid::setLogicalPositionForChild((WebCore::RenderGrid *)a1, (WebCore::RenderBox *)v98);
            if ((*(_BYTE *)(a1 + 20) & 8) == 0)
            {
              v147 = *(_DWORD *)(v98 + 20);
              if ((v147 & 0x200) != 0)
              {
                if ((v147 & 0x8000) == 0)
                  goto LABEL_353;
                if ((*(_BYTE *)(v98 + 45) & 0x10) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1963C9F3CLL);
                }
                v157 = *(_QWORD *)(v98 + 144);
                if (!v157 || (*(_BYTE *)(v157 + 25) & 8) == 0)
                {
LABEL_353:
                  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v98 + 24) + 8)
                                                                                             + 40)
                                                                                 + 8)
                                                                     + 528)
                                                         + 8)
                                             + 288)
                                 + 476))
                    WebCore::RenderBox::repaintDuringLayoutIfMoved(v98, (const WebCore::LayoutRect *)&v192);
                }
              }
            }
          }
          else if (v121 == 0x1000000)
          {
            v123 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v98);
            v124 = v118[100];
            if (v124)
              WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(v124, (_QWORD *)v98);
            v125 = v119;
            v126 = v119[104];
            if (v126)
              WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(v126, (_QWORD *)v98);
            v127 = v118;
            if ((*(_BYTE *)(v98 + 52) & 7) != 1 || (*(_BYTE *)(v98 + 53) & 2) == 0)
            {
              if ((*(_BYTE *)(v98 + 20) & 0xF8) != 0)
                *((_DWORD *)v123 + 5) |= 0x40u;
              if ((v120[872] & 1) == 0)
              {
                WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
                unk_1ECE91358 = 0u;
                v120[872] = 1;
              }
              WebCore::PositionedDescendantsMap::addDescendant((WebCore::PositionedDescendantsMap *)&WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants, v123, (WebCore::RenderBox *)v98);
            }
            v128 = v120;
            v129 = *(_QWORD *)(v98 + 144);
            v130 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1);
            v131 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1);
            v132 = v130 + v131;
            if (__OFADD__(v130, v131))
              v132 = (v130 >> 31) + 0x7FFFFFFF;
            *(_DWORD *)(v129 + 148) = v132;
            v133 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
            v134 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
            v135 = v133 + v134;
            if (__OFADD__(v133, v134))
              v135 = (v133 >> 31) + 0x7FFFFFFF;
            *(_DWORD *)(v129 + 152) = v135;
            v120 = v128;
            v118 = v127;
            v119 = v125;
          }
          v148 = *(unsigned int *)(v98 + 47);
          if (!(v148 | ((unint64_t)*(unsigned __int8 *)(v98 + 51) << 32)))
            break;
          v98 = *(_QWORD *)((v148 | ((unint64_t)*(unsigned __int8 *)(v98 + 51) << 32)) + 8);
          if (!v98)
            break;
        }
        while ((*(_BYTE *)(v98 + 45) & 4) != 0);
      }
    }
  }
  WebCore::RenderBlock::endAndCommitUpdateScrollInfoAfterLayoutTransaction((WTF **)a1, v96);
  if (*(_QWORD *)(a1 + 160) != v182)
    v191 = 1;
  v100 = *(WTF ***)(a1 + 728);
  if (v100)
  {
    *(_QWORD *)(a1 + 728) = 0;
    WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::optional<unsigned long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v100, v99);
  }
  v101 = *(WTF ***)(a1 + 736);
  if (v101)
  {
    *(_QWORD *)(a1 + 736) = 0;
    WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::optional<unsigned long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v101, v99);
  }
  WebCore::RenderBlock::layoutPositionedObjects(a1);
  *(_BYTE *)(a1 + 504) = 0;
  WTF::Vector<WebCore::GridTrack,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((unsigned int *)(a1 + 376), 0);
  WTF::Vector<WebCore::GridTrack,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((unsigned int *)(a1 + 392), 0);
  *(_DWORD *)(a1 + 420) = 0;
  *(_DWORD *)(a1 + 436) = 0;
  *(_DWORD *)(a1 + 452) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 340) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 348) = 0;
  *(_WORD *)(a1 + 337) = 0;
  v103 = WebCore::RenderBlock::layoutOverflowLogicalBottom((WebCore::RenderBlock *)a1, v102);
  WebCore::RenderBlock::computeOverflow((const WebCore::RenderBox *)a1, (void *)v103);
  WebCore::RenderBlock::updateDescendantTransformsAfterLayout((WebCore::RenderBlock *)a1);
  v105 = v185;
  if (v185)
  {
    v185 = 0;
    LODWORD(v186) = 0;
    WTF::fastFree(v105, v104);
  }
  if (!v187)
  {
    __break(0xC471u);
    JUMPOUT(0x1963C9D10);
  }
  --v187;
  v106 = v189[0];
  if (v189[0])
  {
    v107 = *(unsigned int *)(v189[0] - 4);
    if ((_DWORD)v107)
    {
      v108 = (WTF **)v189[0];
      do
      {
        v109 = *v108;
        if (*v108 != (WTF *)-1)
        {
          *v108 = 0;
          if (v109)
          {
            if (*(_DWORD *)v109 == 1)
              WTF::fastFree(v109, v104);
            else
              --*(_DWORD *)v109;
          }
        }
        v108 += 2;
        --v107;
      }
      while (v107);
    }
    WTF::fastFree((WTF *)(v106 - 16), v104);
  }
  if (v188)
  {
    *((_QWORD *)v188 + 1) = 0;
    v110 = (unsigned int *)v188;
    v188 = 0;
    if (v110)
    {
      do
      {
        v111 = __ldaxr(v110);
        v112 = v111 - 1;
      }
      while (__stlxr(v112, v110));
      if (!v112)
      {
        atomic_store(1u, v110);
        WTF::fastFree((WTF *)v110, v104);
      }
    }
  }
  if (v181)
  {
    WebCore::LocalFrameViewLayoutContext::popLayoutState((uint64_t)v180, v104);
    if (v183)
      --*(_DWORD *)(v179 + 492);
  }
  WebCore::RenderLayerModelObject::updateLayerTransform((WTF *)a1, v104);
  if ((*(_BYTE *)(a1 + 22) & 1) != 0)
  {
    v152 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
    v153 = v152 > 5;
    v154 = (1 << v152) & 0x2A;
    v155 = v153 || v154 == 0;
    if (v155
      && (v156 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)
                                                                            + 40)
                                                                + 8)
                                                    + 1944)
                                        + 248)
                            + 528)) != 0
      && *v156)
    {
      WTF::WeakHashSet<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBlock>((uint64_t)(v156 + 2), (_QWORD *)a1, (uint64_t)&v192);
    }
    else
    {
      v158 = *(_QWORD *)(a1 + 144);
      if (v158)
      {
        WebCore::RenderLayer::updateLayerScrollableArea(*(WebCore::RenderLayer **)(a1 + 144));
        v159 = *(WebCore::RenderLayerScrollableArea **)(v158 + 264);
        if (v159)
          WebCore::RenderLayerScrollableArea::updateScrollInfoAfterLayout(v159);
      }
    }
  }
  WebCore::LayoutRepainter::repaintAfterLayout((WebCore::LayoutRepainter *)v190);
  v114 = *(_DWORD *)(a1 + 20) & 0xFFDFFDFF | 0x200;
  *(_DWORD *)(a1 + 20) = v114;
  if ((*(_BYTE *)(a1 + 45) & 2) == 0)
  {
    *(_WORD *)(a1 + 69) &= ~1u;
    *(_WORD *)(a1 + 76) = *(_WORD *)(a1 + 76) & 0xF | (16
                                                     * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                                                                        + 1944)
                                                                            + 248)
                                                                + 472));
  }
  *(_DWORD *)(a1 + 20) = v114 & 0xFFDFFE07;
  v115 = *(WTF ***)(a1 + 536);
  if (v115)
  {
    *(_QWORD *)(a1 + 536) = 0;
    WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v115, v113);
  }
  result = *(_QWORD *)(a1 + 544);
  if (result)
  {
    *(_QWORD *)(a1 + 544) = 0;
    result = WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable((WTF **)result, v113);
  }
  *(_BYTE *)(a1 + 746) = 0;
  return result;
}

BOOL WebCore::RenderGrid::isMasonry(WebCore::RenderGrid *this)
{
  WebCore::RenderGrid *v1;
  WebCore::RenderGrid *v2;
  uint64_t v3;
  WebCore::RenderGrid *v4;
  uint64_t v5;
  WebCore::RenderGrid *v6;
  WebCore::RenderGrid *v7;
  uint64_t v8;

  v1 = this;
  do
  {
    v2 = v1;
    v3 = *((_QWORD *)v1 + 4);
    if (!v3)
      break;
    v1 = *(WebCore::RenderGrid **)(v3 + 8);
    if (!v1)
      break;
  }
  while (*((_BYTE *)v1 + 46) == 12 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 40) + 80) + 258));
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 40) + 80) + 260))
    return 1;
  do
  {
    v4 = this;
    v5 = *((_QWORD *)this + 4);
    if (!v5)
      break;
    this = *(WebCore::RenderGrid **)(v5 + 8);
    if (!this)
      break;
  }
  while (*((_BYTE *)this + 46) == 12
       && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 11) + 40) + 80) + 259));
  v6 = v4;
  do
  {
    v7 = v6;
    v8 = *((_QWORD *)v6 + 4);
    if (!v8)
      break;
    v6 = *(WebCore::RenderGrid **)(v8 + 8);
    if (!v6)
      break;
  }
  while (*((_BYTE *)v6 + 46) == 12 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 11) + 40) + 80) + 258));
  return !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 11) + 40) + 80) + 260)
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 11) + 40) + 80) + 261) != 0;
}

uint64_t WebCore::RenderGrid::layoutMasonry(uint64_t this, BOOL a2)
{
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  WebCore::LocalFrameViewLayoutContext *v10;
  int v11;
  int v12;
  _DWORD *updated;
  const WebCore::RenderBox *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  int v25;
  char v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  const WebCore::RenderGrid *v36;
  uint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  unsigned int v40;
  int shouldApplySizeContainment;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  BOOL v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  int v82;
  _QWORD *v83;
  void *v84;
  char v85;
  int v86;
  unsigned int v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  WTF::StringImpl *v97;
  int v98;
  unsigned int v99;
  char *LineStyle;
  void *v101;
  float v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  int v106;
  unsigned int v107;
  int v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  WTF **v114;
  WTF **v115;
  const WebCore::RenderBlock *v116;
  unsigned int v117;
  void *v118;
  WTF *v119;
  WTF **v120;
  uint64_t v121;
  WTF **v122;
  WTF *v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int v126;
  void *v127;
  unsigned int v128;
  uint64_t result;
  _QWORD *v130;
  int v131;
  BOOL v132;
  WebCore::RenderObject *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  unsigned int v137;
  int v138;
  int v139;
  unsigned int v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  int v163;
  unsigned int v164;
  BOOL v165;
  int v166;
  BOOL v167;
  _DWORD *v168;
  uint64_t v169;
  WebCore::RenderLayerScrollableArea *v170;
  int v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unsigned int v175;
  int i;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  WTF **v181;
  WTF *v182;
  uint64_t v183;
  WTF **v184;
  WTF *v185;
  int v186;
  WebCore::LocalFrameViewLayoutContext *v187;
  unsigned int v188;
  uint64_t v189;
  int v190;
  WTF *v191;
  int v192;
  int v193;
  uint64_t v194;
  WTF *v195;
  WTF **v196;
  uint64_t v197;
  BOOL v198[63];
  BOOL v199;
  __int128 v200;
  uint64_t v201;

  v199 = a2;
  WebCore::LayoutRepainter::LayoutRepainter((uint64_t)v198, (WebCore::RenderObject *)this, 0, 0, 1);
  v3 = *(_DWORD *)(this + 20);
  if ((v3 & 0x20000) != 0)
  {
    v6 = this;
    if ((*(_BYTE *)(this + 45) & 2) != 0)
      v6 = *(_QWORD *)(*(_QWORD *)(this + 32) + 8);
    v7 = *(_QWORD *)(v6 + 88);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 40) + 20))
      goto LABEL_11;
    v8 = *(_QWORD **)(v7 + 40);
    if (v8[41] || v8[38] || v8[39] || v8[40] || (v3 & 0x100000) != 0)
      goto LABEL_11;
  }
  if ((v3 & 0x4000) == 0)
    goto LABEL_3;
  v171 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
  v172 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
  v173 = 9 * ((v172 + ~(v172 << 13)) ^ ((v172 + ~(v172 << 13)) >> 8));
  v174 = (v173 ^ (v173 >> 15)) + ~((v173 ^ (v173 >> 15)) << 27);
  v175 = v171 & ((v174 >> 31) ^ v174);
  for (i = 1; ; v175 = (v177 + i++) & v171)
  {
    v177 = v175;
    v178 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v175);
    if (v178 != -1 && *(_QWORD *)(v178 + 8) == this)
      break;
  }
  if (**(_BYTE **)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v177 + 8))
  {
LABEL_11:
    v5 = 1;
  }
  else
  {
LABEL_3:
    v4 = (unsigned __int16)*(_DWORD *)(this + 124) >> 13;
    v186 = 2;
    switch((unsigned __int16)*(_DWORD *)(this + 124) >> 13)
    {
      case 1:
      case 2:
        goto LABEL_5;
      case 3:
      case 5:
        v4 = 3;
        goto LABEL_5;
      case 4:
        goto LABEL_6;
      default:
        v4 = 0;
LABEL_5:
        v186 = v4;
LABEL_6:
        v5 = (v186 & 0xFFFFFFFD) == 1;
        break;
    }
  }
  v194 = *(_QWORD *)(this + 152);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8) + 1944)
                 + 248);
  v10 = (WebCore::LocalFrameViewLayoutContext *)(v9 + 336);
  v11 = WebCore::LocalFrameViewLayoutContext::pushLayoutState(v9 + 336, (WebCore::RenderObject *)this, (int *)&v194, 0, 0);
  v12 = v11;
  if (v5 && v11)
    ++*(_DWORD *)(v9 + 492);
  LODWORD(v194) = 0;
  v196 = 0;
  v197 = 0;
  v195 = 0;
  WebCore::RenderBlock::preparePaginationBeforeBlockLayout((const WebCore::RenderBlock *)this, &v199);
  updated = (_DWORD *)WebCore::LocalFrameViewLayoutContext::updateScrollInfoAfterLayoutTransaction((WebCore::LocalFrameViewLayoutContext *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8) + 1944) + 248) + 336));
  ++*updated;
  v189 = *(_QWORD *)(this + 160);
  if ((WebCore::RenderBlock::availableLogicalHeightForPercentageComputation((WebCore::RenderBlock *)this, v14) & 0xFF00000000) != 0
    || (WebCore::RenderBox::overridingLogicalHeight((WebCore::RenderBox *)this) & 0xFF00000000) != 0)
  {
    goto LABEL_24;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(this + 88) + 8);
  v16 = v15 + 4;
  v17 = v15 + 12;
  if (((*(_DWORD *)(this + 124) >> 13) & 6u) - 2 >= 4)
    v18 = v17;
  else
    v18 = v16;
  v19 = WebCore::RenderBox::computeContentAndScrollbarLogicalHeightUsing((WebCore::RenderBox *)this, 0, v18, 0);
  if ((v19 & 0xFF00000000) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)this + 1272))(this, v19);
    v20 = 1360;
    if (((*(_DWORD *)(this + 124) >> 13) & 6u) - 2 < 4)
      v20 = 1352;
    (*(void (**)(uint64_t))(*(_QWORD *)this + v20))(this);
LABEL_24:
    v21 = 1;
    goto LABEL_25;
  }
  v21 = 0;
LABEL_25:
  WebCore::RenderGrid::computeAspectRatioDependentAndBaselineItems((WebCore::RenderGrid *)&v191, this);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 1592))(this) & 1) != 0
    || (v22 = *(_QWORD *)(this + 32)) != 0
    && (v23 = *(_BYTE **)(v22 + 8)) != 0
    && (v23[45] & 0x40) != 0
    && (*(unsigned int (**)(_BYTE *, uint64_t))(*(_QWORD *)v23 + 1704))(v23, this))
  {
    v24 = 164;
    if (((*(_DWORD *)(this + 124) >> 13) & 6u) - 2 < 4)
      v24 = 160;
    *(_DWORD *)(this + v24) = 0;
  }
  WebCore::RenderBlock::layoutExcludedChildren(this, v199);
  v200 = 0uLL;
  v201 = 0;
  WebCore::RenderBox::computeLogicalWidthInFragment((WebCore::RenderBox *)this, (int *)&v200, 0);
  v25 = v200;
  v26 = *(_DWORD *)(this + 124) >> 13;
  if (((*(_DWORD *)(this + 124) >> 13) & 6u) - 2 < 4)
    goto LABEL_329;
  *(_DWORD *)(this + 160) = v200;
  *(_DWORD *)(this + 152) = DWORD1(v200);
  while (1)
  {
    v27 = v26 & 7;
    v28 = *(_DWORD *)(this + 120);
    v29 = (v28 >> 26) & 1;
    v30 = v29;
    if ((v27 - 2) >= 2)
    {
      if (v27 == 4)
      {
        v30 = (v28 & 0x4000000) == 0;
      }
      else
      {
        v30 = (v28 >> 26) & 1;
        if (v27 != 5)
        {
          v31 = 3;
          if ((v28 & 0x4000000) != 0)
            v31 = 1;
          goto LABEL_40;
        }
      }
    }
    v132 = v30 == 0;
    v31 = 2;
    if (v132)
      v31 = 0;
LABEL_40:
    v32 = (char *)(this + 168);
    *(_DWORD *)(this + 168 + 4 * v31) = v201;
    v188 = v5;
    v187 = v10;
    v190 = v12;
    if ((v27 - 2) >= 2)
    {
      if (v27 == 4)
      {
        v29 = (v28 & 0x4000000) == 0;
      }
      else if (v27 != 5)
      {
        v33 = 3;
        if ((v28 & 0x4000000) == 0)
          v33 = 1;
        goto LABEL_45;
      }
    }
    v132 = v29 == 0;
    v33 = 2;
    if (!v132)
      v33 = 0;
LABEL_45:
    *(_DWORD *)&v32[4 * v33] = HIDWORD(v201);
    v34 = WebCore::RenderBox::contentLogicalWidth((WebCore::RenderBox *)this);
    v35 = v34 | 0x100000000;
    WebCore::RenderGrid::placeItemsOnGrid((WebCore::RenderBlock *)this, v35);
    v12 = this + 336;
    *(_BYTE *)(this + 352) = 1;
    *(_DWORD *)(this + 348) = v34;
    WebCore::RenderGrid::performPreLayoutForGridItems(this, (_QWORD *)(this + 336), 1);
    v37 = *(_QWORD *)(this + 328);
    v38 = *(_DWORD *)(v37 + 100)
        ? *(_DWORD *)(*(_QWORD *)(v37 + 88) + 12)
        : WebCore::GridPositionsResolver::explicitGridColumnCount((WebCore::GridPositionsResolver *)this, v36);
    WebCore::GridTrackSizingAlgorithm::setup(this + 336, 0, v38, 0, v35, (uint64_t)&v194);
    WebCore::GridTrackSizingAlgorithm::run((WebCore::GridTrackSizingAlgorithm *)(this + 336));
    *(_QWORD *)&v200 = *(_QWORD *)(this + 356);
    if ((v200 & 0xFF00000000) != 0)
      break;
LABEL_328:
    std::__throw_bad_optional_access[abi:sn180100]();
LABEL_329:
    *(_DWORD *)(this + 164) = v25;
    *(_DWORD *)(this + 156) = DWORD1(v200);
  }
  v39 = *(_QWORD **)(*(_QWORD *)(this + 328) + 112);
  if (v39)
  {
    v39 = (_QWORD *)*v39;
    if (v39)
      LODWORD(v39) = *((_DWORD *)v39 - 3);
  }
  WebCore::RenderGrid::computeContentPositionAndDistributionOffset((WebCore::RenderGrid *)this, 0, &v200, *(_DWORD *)(this + 388) - (_DWORD)v39);
  if ((v21 & 1) != 0)
  {
    v40 = WebCore::RenderBox::availableLogicalHeight((WebCore::RenderObject *)this, 0);
    WebCore::GridTrackSizingAlgorithm::setup(this + 336, (void *)1, *(_DWORD *)(*(_QWORD *)(this + 328) + 100), 0, v40 | 0x100000000, (uint64_t)&v194);
    WebCore::GridTrackSizingAlgorithm::run((WebCore::GridTrackSizingAlgorithm *)(this + 336));
    shouldApplySizeContainment = 0;
  }
  else
  {
    WebCore::GridTrackSizingAlgorithm::setup(this + 336, (void *)1, *(_DWORD *)(*(_QWORD *)(this + 328) + 100), 1, 0, (uint64_t)&v194);
    WebCore::GridTrackSizingAlgorithm::run((WebCore::GridTrackSizingAlgorithm *)(this + 336));
    WebCore::RenderGrid::guttersSize((WebCore::RenderElement *)this, 1, 0, *(_DWORD *)(this + 404), 0);
    shouldApplySizeContainment = WebCore::RenderElement::shouldApplySizeContainment((WebCore::RenderElement *)this);
  }
  v42 = this;
  do
  {
    v43 = v42;
    v44 = *(_QWORD *)(v42 + 32);
    if (!v44)
      break;
    v42 = *(_QWORD *)(v44 + 8);
    if (!v42)
      break;
  }
  while (*(_BYTE *)(v42 + 46) == 12
       && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v43 + 88) + 40) + 80) + 258));
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v43 + 88) + 40) + 80) + 260))
  {
    v45 = *(_QWORD *)(this + 328);
    if (*(_DWORD *)(v45 + 100))
    {
      v46 = (int *)(*(_QWORD *)(v45 + 88) + 12);
      v47 = 1;
      goto LABEL_73;
    }
    v54 = 0;
    v47 = 1;
LABEL_74:
    WebCore::GridMasonryLayout::performMasonryPlacement(this + 616, v54, v47);
  }
  else
  {
    v48 = this;
    do
    {
      v49 = v48;
      v50 = *(_QWORD *)(v48 + 32);
      if (!v50)
        break;
      v48 = *(_QWORD *)(v50 + 8);
      if (!v48)
        break;
    }
    while (*(_BYTE *)(v48 + 46) == 12
         && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v49 + 88) + 40) + 80) + 259));
    v51 = v49;
    do
    {
      v52 = v51;
      v53 = *(_QWORD *)(v51 + 32);
      if (!v53)
        break;
      v51 = *(_QWORD *)(v53 + 8);
      if (!v51)
        break;
    }
    while (*(_BYTE *)(v51 + 46) == 12
         && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v52 + 88) + 40) + 80) + 258));
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v52 + 88) + 40) + 80) + 260)
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v49 + 88) + 40) + 80) + 261))
    {
      v47 = 0;
      v46 = (int *)(*(_QWORD *)(this + 328) + 100);
LABEL_73:
      v54 = *v46;
      goto LABEL_74;
    }
  }
  v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 1048))(this);
  v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 960))(this);
  if (__OFADD__(v55, v56))
    v57 = (v55 >> 31) + 0x7FFFFFFF;
  else
    v57 = v55 + v56;
  v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 1056))(this);
  v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 968))(this);
  v60 = v58 + v59;
  if (__OFADD__(v58, v59))
    v60 = (v58 >> 31) + 0x7FFFFFFF;
  v71 = __OFADD__(v57, v60);
  v61 = v57 + v60;
  if (v71)
    v5 = (v57 >> 31) + 0x7FFFFFFF;
  else
    v5 = v61;
  v62 = 1360;
  if (((*(_DWORD *)(this + 124) >> 13) & 6u) - 2 < 4)
    v62 = 1352;
  v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + v62))(this);
  v64 = v63 << 6;
  if (v63 < -33554432)
    v64 = 0x80000000;
  if (v63 > 0x1FFFFFF)
    v64 = 0x7FFFFFFF;
  v71 = __OFADD__(v5, v64);
  v65 = v5 + v64;
  if (v71)
    v10 = (WebCore::LocalFrameViewLayoutContext *)((v5 >> 31) + 0x7FFFFFFF);
  else
    v10 = (WebCore::LocalFrameViewLayoutContext *)v65;
  v66 = WebCore::RenderElement::shouldApplySizeContainment((WebCore::RenderElement *)this);
  v67 = this;
  if ((v66 & 1) != 0
    && (v179 = WebCore::RenderBox::explicitIntrinsicInnerLogicalHeight((WebCore::RenderBox *)this),
        v67 = this,
        (v179 & 0xFF00000000) != 0))
  {
    v74 = (_DWORD)v10 + v179;
    if (__OFADD__((_DWORD)v10, (_DWORD)v179))
      v74 = (v10 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    do
    {
      v68 = v67;
      v69 = *(_QWORD *)(v67 + 32);
      if (!v69)
        break;
      v67 = *(_QWORD *)(v69 + 8);
      if (!v67)
        break;
    }
    while (*(_BYTE *)(v67 + 46) == 12
         && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v68 + 88) + 40) + 80) + 258));
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v68 + 88) + 40) + 80) + 260))
    {
      v70 = *(_DWORD *)(this + 692);
      v71 = __OFADD__((_DWORD)v10, v70);
      v72 = (_DWORD)v10 + v70;
    }
    else
    {
      v73 = WebCore::GridTrackSizingAlgorithm::computeTrackBasedSize((WebCore::RenderGrid **)(this + 336));
      v71 = __OFADD__((_DWORD)v10, v73);
      v72 = (_DWORD)v10 + v73;
    }
    if (v71)
      v74 = (v10 >> 31) + 0x7FFFFFFF;
    else
      v74 = v72;
  }
  if (shouldApplySizeContainment)
  {
    WebCore::GridTrackSizingAlgorithm::setup(this + 336, (void *)1, *(_DWORD *)(*(_QWORD *)(this + 328) + 100), 0, v74 | 0x100000000, (uint64_t)&v194);
    WebCore::GridTrackSizingAlgorithm::run((WebCore::GridTrackSizingAlgorithm *)(this + 336));
  }
  v75 = 164;
  if (((*(_DWORD *)(this + 124) >> 13) & 6u) - 2 < 4)
    v75 = 160;
  *(_DWORD *)(this + v75) = v74;
  WebCore::RenderBox::updateLogicalHeight((WebCore::RenderBox *)this);
  if (!v21)
    goto LABEL_115;
  v76 = this;
  do
  {
    v77 = v76;
    v78 = *(_QWORD *)(v76 + 32);
    if (!v78)
      break;
    v76 = *(_QWORD *)(v78 + 8);
    if (!v76)
      break;
  }
  while (*(_BYTE *)(v76 + 46) == 12
       && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v77 + 88) + 40) + 80) + 258));
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v77 + 88) + 40) + 80) + 260))
  {
LABEL_115:
    v79 = 164;
    if (((*(_DWORD *)(this + 124) >> 13) & 6u) - 2 < 4)
      v79 = 160;
    v80 = *(_DWORD *)(this + v79);
    v71 = __OFSUB__(v80, v74);
    v81 = v80 - v74;
    v82 = (v80 >> 31) + 0x7FFFFFFF;
    if (!v71)
      v82 = v81;
    *(_DWORD *)(this + 364) = v82;
    *(_BYTE *)(this + 368) = 1;
  }
  *(_QWORD *)&v200 = *(_QWORD *)(this + 364);
  if ((v200 & 0xFF00000000) == 0)
    goto LABEL_328;
  v83 = *(_QWORD **)(*(_QWORD *)(this + 328) + 120);
  if (v83)
  {
    v83 = (_QWORD *)*v83;
    if (v83)
      LODWORD(v83) = *((_DWORD *)v83 - 3);
  }
  WebCore::RenderGrid::computeContentPositionAndDistributionOffset((WebCore::RenderGrid *)this, 1, &v200, *(_DWORD *)(this + 404) - (_DWORD)v83);
  if (v193)
  {
    WebCore::RenderGrid::updateGridAreaForAspectRatioItems((WebCore::RenderBox *)this, (uint64_t)&v191, (unint64_t)&v194);
    v200 = 0uLL;
    v201 = 0;
    WebCore::RenderBox::computeLogicalWidthInFragment((WebCore::RenderBox *)this, (int *)&v200, 0);
    v85 = *(_DWORD *)(this + 124) >> 13;
    if (((*(_DWORD *)(this + 124) >> 13) & 6u) - 2 < 4)
    {
      *(_DWORD *)(this + 164) = v200;
      *(_DWORD *)(this + 156) = DWORD1(v200);
    }
    else
    {
      *(_DWORD *)(this + 160) = v200;
      *(_DWORD *)(this + 152) = DWORD1(v200);
    }
    v86 = v85 & 7;
    v87 = *(_DWORD *)(this + 120);
    v88 = (v87 >> 26) & 1;
    v89 = v88;
    if ((v86 - 2) >= 2)
    {
      if (v86 == 4)
      {
        v89 = (v87 & 0x4000000) == 0;
      }
      else
      {
        v89 = (v87 >> 26) & 1;
        if (v86 != 5)
        {
          v90 = 3;
          if ((v87 & 0x4000000) != 0)
            v90 = 1;
          goto LABEL_130;
        }
      }
    }
    v132 = v89 == 0;
    v90 = 2;
    if (v132)
      v90 = 0;
LABEL_130:
    *(_DWORD *)&v32[4 * v90] = v201;
    if ((v86 - 2) >= 2)
    {
      if (v86 == 4)
      {
        v88 = (v87 & 0x4000000) == 0;
      }
      else if (v86 != 5)
      {
        v91 = 3;
        if ((v87 & 0x4000000) == 0)
          v91 = 1;
        goto LABEL_135;
      }
    }
    v132 = v88 == 0;
    v91 = 2;
    if (!v132)
      v91 = 0;
LABEL_135:
    *(_DWORD *)&v32[4 * v91] = HIDWORD(v201);
  }
  if (WebCore::RenderBlock::hasLineIfEmpty((WebCore::RenderBlock *)this, v84))
  {
    v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 1048))(this);
    v93 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 960))(this);
    v94 = v92 + v93;
    if (__OFADD__(v92, v93))
      v94 = (v92 >> 31) + 0x7FFFFFFF;
    v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 1056))(this);
    v96 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 968))(this);
    v98 = v95 + v96;
    if (__OFADD__(v95, v96))
      v98 = (v95 >> 31) + 0x7FFFFFFF;
    v99 = v94 + v98;
    if (__OFADD__(v94, v98))
      v99 = (v94 >> 31) + 0x7FFFFFFF;
    LineStyle = WebCore::RenderElement::firstLineStyle((WebCore::RenderElement *)this, v97);
    v102 = ceilf(WebCore::RenderStyle::computedLineHeight((WebCore::RenderStyle *)LineStyle, v101) * 64.0);
    if (v102 >= 2147500000.0)
    {
      v103 = 0x7FFFFFFF;
    }
    else if (v102 <= -2147500000.0)
    {
      v103 = 0x80000000;
    }
    else
    {
      v103 = (int)v102;
    }
    v104 = v99 + v103;
    if (__OFADD__(v99, v103))
      v104 = (v99 >> 31) + 0x7FFFFFFF;
    v105 = 1360;
    if (((*(_DWORD *)(this + 124) >> 13) & 6u) - 2 < 4)
      v105 = 1352;
    v106 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + v105))(this);
    v107 = v106 << 6;
    if (v106 < -33554432)
      v107 = 0x80000000;
    if (v106 > 0x1FFFFFF)
      v107 = 0x7FFFFFFF;
    v71 = __OFADD__(v104, v107);
    v108 = v104 + v107;
    if (v71)
      v108 = (v104 >> 31) + 0x7FFFFFFF;
    v109 = 164;
    if (((*(_DWORD *)(this + 124) >> 13) & 6u) - 2 < 4)
      v109 = 160;
    if (*(_DWORD *)(this + v109) > v108)
      v108 = *(_DWORD *)(this + v109);
    *(_DWORD *)(this + v109) = v108;
  }
  WebCore::RenderGrid::populateGridPositionsForDirection((WebCore::RenderBox *)this, 0);
  WebCore::RenderGrid::populateGridPositionsForDirection((WebCore::RenderBox *)this, 1);
  v111 = *(unsigned int *)(this + 64);
  if (v111 | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32))
  {
    v112 = *(_QWORD *)((v111 | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32)) + 8);
    if (v112)
    {
      if ((*(_BYTE *)(v112 + 45) & 4) != 0)
      {
        v130 = &unk_1ECE91000;
        do
        {
          v131 = *(_DWORD *)(v112 + 20) & 0x1800000;
          v132 = v131 != 0x1000000 && (*(_DWORD *)(v112 + 20) & 0x400) == 0;
          if (v132)
          {
            if (*(_BYTE *)(v112 + 46) == 12)
            {
              if (!WebCore::RenderElement::establishesIndependentFormattingContext((WebCore::RenderElement *)v112))
              {
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v112 + 88) + 40) + 80) + 259))
                {
                  v143 = *(_QWORD *)(v112 + 32);
                  if (v143)
                  {
                    v144 = *(_QWORD *)(v143 + 8);
                    if (v144)
                    {
                      if (*(_BYTE *)(v144 + 46) == 12)
                      {
                        do
                        {
                          v145 = v144;
                          v146 = *(_QWORD *)(v144 + 32);
                          if (!v146)
                            break;
                          v144 = *(_QWORD *)(v146 + 8);
                          if (!v144)
                            break;
                        }
                        while (*(_BYTE *)(v144 + 46) == 12
                             && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v145 + 88) + 40) + 80) + 259));
                        v147 = v145;
                        do
                        {
                          v148 = v147;
                          v149 = *(_QWORD *)(v147 + 32);
                          if (!v149)
                            break;
                          v147 = *(_QWORD *)(v149 + 8);
                          if (!v147)
                            break;
                        }
                        while (*(_BYTE *)(v147 + 46) == 12
                             && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v148 + 88) + 40) + 80) + 258));
                        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v148 + 88) + 40) + 80) + 260)
                          || !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v145 + 88) + 40) + 80) + 261))
                        {
                          goto LABEL_357;
                        }
                      }
                    }
                  }
                }
              }
              if (!WebCore::RenderElement::establishesIndependentFormattingContext((WebCore::RenderElement *)v112))
              {
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v112 + 88) + 40) + 80) + 258))
                {
                  v157 = *(_QWORD *)(v112 + 32);
                  if (v157)
                  {
                    v158 = *(_QWORD *)(v157 + 8);
                    if (v158)
                    {
                      if (*(_BYTE *)(v158 + 46) == 12)
                      {
                        do
                        {
                          v159 = v158;
                          v160 = *(_QWORD *)(v158 + 32);
                          if (!v160)
                            break;
                          v158 = *(_QWORD *)(v160 + 8);
                          if (!v158)
                            break;
                        }
                        while (*(_BYTE *)(v158 + 46) == 12
                             && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v159 + 88) + 40) + 80) + 258));
                        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v159 + 88) + 40) + 80) + 260))
                        {
LABEL_357:
                          v161 = *(_DWORD *)(v112 + 20);
                          if ((v161 & 8) == 0)
                          {
                            *(_DWORD *)(v112 + 20) = v161 | 8;
                            if ((v161 & 0x8000) != 0)
                            {
                              if ((*(_BYTE *)(v112 + 45) & 0x10) == 0)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x1963CB5D0);
                              }
                              v162 = *(_QWORD *)(v112 + 144);
                              if (v162)
                              {
                                v163 = *(_DWORD *)(v162 + 8) + 1;
                                *(_DWORD *)(v162 + 8) = v163;
                              }
                              else
                              {
                                v163 = MEMORY[8];
                              }
                              *(_QWORD *)(v162 + 24) = *(_QWORD *)(v162 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
                              if (!v163)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x1963CB5F0);
                              }
                              *(_DWORD *)(v162 + 8) = v163 - 1;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v150 = WebCore::RenderGrid::gridAreaBreadthForChildIncludingAlignmentOffsets(this, v112, 0);
            v151 = WebCore::RenderGrid::gridAreaBreadthForChildIncludingAlignmentOffsets(this, v112, 1);
            WebCore::RenderGrid::updateGridAreaLogicalSize(this, (WebCore::RenderBox *)v112, v150 | 0x100000000, v151 | 0x100000000);
            v200 = *(_OWORD *)(v112 + 152);
            WebCore::RenderGrid::applyStretchAlignmentToChildIfNeeded(this, (WebCore::RenderBox *)v112, (unint64_t)&v194);
            WebCore::RenderGrid::applySubgridStretchAlignmentToChildIfNeeded(this, (WebCore::RenderBox *)v112);
            if ((*(_BYTE *)(v112 + 20) & 0xF8) != 0)
            {
              v152 = *(_QWORD *)(v112 + 32);
              if (v152
                && (v153 = *(_QWORD *)(v152 + 8)) != 0
                && (*(_BYTE *)(*(_QWORD *)(v153 + 104) + 239) & 0x18) != 0
                && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v112 + 24) + 8)
                                                                             + 40)
                                                                 + 8)
                                                     + 1944)
                                         + 248)
                             + 479))
              {
                WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v112);
              }
              else
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v112 + 688))(v112);
              }
            }
            WebCore::RenderGrid::updateAutoMarginsInColumnAxisIfNeeded((WebCore::RenderGrid *)this, (WebCore::RenderBox *)v112);
            WebCore::RenderGrid::updateAutoMarginsInRowAxisIfNeeded((WebCore::RenderGrid *)this, (WebCore::RenderBox *)v112);
            WebCore::RenderGrid::setLogicalPositionForChild((WebCore::RenderGrid *)this, (WebCore::RenderBox *)v112);
            if ((*(_BYTE *)(this + 20) & 8) == 0)
            {
              v154 = *(_DWORD *)(v112 + 20);
              if ((v154 & 0x200) != 0)
              {
                if ((v154 & 0x8000) == 0)
                  goto LABEL_356;
                if ((*(_BYTE *)(v112 + 45) & 0x10) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1963CB578);
                }
                v156 = *(_QWORD *)(v112 + 144);
                if (!v156 || (*(_BYTE *)(v156 + 25) & 8) == 0)
                {
LABEL_356:
                  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v112 + 24) + 8)
                                                                                             + 40)
                                                                                 + 8)
                                                                     + 528)
                                                         + 8)
                                             + 288)
                                 + 476))
                    WebCore::RenderBox::repaintDuringLayoutIfMoved(v112, (const WebCore::LayoutRect *)&v200);
                }
              }
            }
          }
          else if (v131 == 0x1000000)
          {
            v133 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v112);
            if (WebCore::gOverridingContainingBlockContentLogicalWidthMap)
              WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalWidthMap, (_QWORD *)v112);
            v134 = v130[104];
            if (v134)
              WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(v134, (_QWORD *)v112);
            if ((*(_BYTE *)(v112 + 52) & 7) != 1 || (*(_BYTE *)(v112 + 53) & 2) == 0)
            {
              if ((*(_BYTE *)(v112 + 20) & 0xF8) != 0)
                *((_DWORD *)v133 + 5) |= 0x40u;
              {
                WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
                unk_1ECE91358 = 0u;
              }
              WebCore::PositionedDescendantsMap::addDescendant((WebCore::PositionedDescendantsMap *)&WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants, v133, (WebCore::RenderBox *)v112);
            }
            v135 = v130;
            v136 = *(_QWORD *)(v112 + 144);
            v137 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 1064))(this);
            v138 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 976))(this);
            v139 = v137 + v138;
            if (__OFADD__(v137, v138))
              v139 = (v137 >> 31) + 0x7FFFFFFF;
            *(_DWORD *)(v136 + 148) = v139;
            v140 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 1048))(this);
            v141 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 960))(this);
            v142 = v140 + v141;
            if (__OFADD__(v140, v141))
              v142 = (v140 >> 31) + 0x7FFFFFFF;
            *(_DWORD *)(v136 + 152) = v142;
            v130 = v135;
          }
          v155 = *(unsigned int *)(v112 + 47);
          if (!(v155 | ((unint64_t)*(unsigned __int8 *)(v112 + 51) << 32)))
            break;
          v112 = *(_QWORD *)((v155 | ((unint64_t)*(unsigned __int8 *)(v112 + 51) << 32)) + 8);
          if (!v112)
            break;
        }
        while ((*(_BYTE *)(v112 + 45) & 4) != 0);
      }
    }
  }
  WebCore::RenderBlock::endAndCommitUpdateScrollInfoAfterLayoutTransaction((WTF **)this, v110);
  if (*(_QWORD *)(this + 160) != v189)
    v199 = 1;
  v114 = *(WTF ***)(this + 728);
  if (v114)
  {
    *(_QWORD *)(this + 728) = 0;
    v180 = *((unsigned int *)v114 - 1);
    if ((_DWORD)v180)
    {
      v181 = v114;
      do
      {
        v182 = *v181;
        if (*v181 != (WTF *)-1)
        {
          *v181 = 0;
          if (v182)
          {
            if (*(_DWORD *)v182 == 1)
              WTF::fastFree(v182, v113);
            else
              --*(_DWORD *)v182;
          }
        }
        v181 += 3;
        --v180;
      }
      while (v180);
    }
    WTF::fastFree((WTF *)(v114 - 2), v113);
  }
  v115 = *(WTF ***)(this + 736);
  if (v115)
  {
    *(_QWORD *)(this + 736) = 0;
    v183 = *((unsigned int *)v115 - 1);
    if ((_DWORD)v183)
    {
      v184 = v115;
      do
      {
        v185 = *v184;
        if (*v184 != (WTF *)-1)
        {
          *v184 = 0;
          if (v185)
          {
            if (*(_DWORD *)v185 == 1)
              WTF::fastFree(v185, v113);
            else
              --*(_DWORD *)v185;
          }
        }
        v184 += 3;
        --v183;
      }
      while (v183);
    }
    WTF::fastFree((WTF *)(v115 - 2), v113);
  }
  WebCore::RenderBlock::layoutPositionedObjects(this);
  WebCore::GridTrackSizingAlgorithm::reset((WebCore::GridTrackSizingAlgorithm *)(this + 336));
  v117 = WebCore::RenderBlock::layoutOverflowLogicalBottom((WebCore::RenderBlock *)this, v116);
  WebCore::RenderBlock::computeOverflow((const WebCore::RenderBox *)this, (void *)v117);
  WebCore::RenderBlock::updateDescendantTransformsAfterLayout((WebCore::RenderBlock *)this);
  v119 = v191;
  if (v191)
  {
    v191 = 0;
    v192 = 0;
    WTF::fastFree(v119, v118);
  }
  v120 = v196;
  if (v196)
  {
    v121 = *((unsigned int *)v196 - 1);
    if ((_DWORD)v121)
    {
      v122 = v196;
      do
      {
        v123 = *v122;
        if (*v122 != (WTF *)-1)
        {
          *v122 = 0;
          if (v123)
          {
            if (*(_DWORD *)v123 == 1)
              WTF::fastFree(v123, v118);
            else
              --*(_DWORD *)v123;
          }
        }
        v122 += 2;
        --v121;
      }
      while (v121);
    }
    WTF::fastFree((WTF *)(v120 - 2), v118);
  }
  if (v195)
  {
    *((_QWORD *)v195 + 1) = 0;
    v124 = (unsigned int *)v195;
    v195 = 0;
    if (v124)
    {
      do
      {
        v125 = __ldaxr(v124);
        v126 = v125 - 1;
      }
      while (__stlxr(v126, v124));
      if (!v126)
      {
        atomic_store(1u, v124);
        WTF::fastFree((WTF *)v124, v118);
      }
    }
  }
  if (v190)
  {
    WebCore::LocalFrameViewLayoutContext::popLayoutState((uint64_t)v187, v118);
    if (v188)
      --*(_DWORD *)(v9 + 492);
  }
  WebCore::RenderLayerModelObject::updateLayerTransform((WTF *)this, v118);
  if ((*(_BYTE *)(this + 22) & 1) != 0)
  {
    v164 = (unsigned __int16)*(_DWORD *)(this + 124) >> 13;
    v165 = v164 > 5;
    v166 = (1 << v164) & 0x2A;
    v167 = v165 || v166 == 0;
    if (v167
      && (v168 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8)
                                                                            + 40)
                                                                + 8)
                                                    + 1944)
                                        + 248)
                            + 528)) != 0
      && *v168)
    {
      WTF::WeakHashSet<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBlock>((uint64_t)(v168 + 2), (_QWORD *)this, (uint64_t)&v194);
    }
    else
    {
      v169 = *(_QWORD *)(this + 144);
      if (v169)
      {
        WebCore::RenderLayer::updateLayerScrollableArea(*(WebCore::RenderLayer **)(this + 144));
        v170 = *(WebCore::RenderLayerScrollableArea **)(v169 + 264);
        if (v170)
          WebCore::RenderLayerScrollableArea::updateScrollInfoAfterLayout(v170);
      }
    }
  }
  WebCore::LayoutRepainter::repaintAfterLayout((WebCore::LayoutRepainter *)v198);
  v128 = *(_DWORD *)(this + 20) & 0xFFDFFDFF | 0x200;
  *(_DWORD *)(this + 20) = v128;
  if ((*(_BYTE *)(this + 45) & 2) == 0)
  {
    *(_WORD *)(this + 69) &= ~1u;
    *(_WORD *)(this + 76) = *(_WORD *)(this + 76) & 0xF | (16
                                                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8)
                                                                                            + 1944)
                                                                                + 248)
                                                                    + 472));
  }
  *(_DWORD *)(this + 20) = v128 & 0xFFDFFE07;
  result = WebCore::GridTrackSizingAlgorithm::clearBaselineItemsCache(this + 336, v127);
  *(_BYTE *)(this + 746) = 0;
  return result;
}

uint64_t WebCore::RenderGrid::placeItemsOnGrid(WebCore::RenderBlock *a1, uint64_t a2)
{
  unsigned int v3;
  const WebCore::RenderBox *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  WebCore::RenderBox *v10;
  char v12;
  WebCore::RenderBlock *v13;
  WebCore::RenderBlock *v14;
  uint64_t v15;
  WebCore::RenderBlock *v16;
  WebCore::RenderBlock *v17;
  uint64_t v18;
  WebCore::RenderBox *v19;
  _QWORD *v20;
  char v21;
  WebCore::RenderBlock *v22;
  WebCore::RenderBlock *v23;
  uint64_t v24;
  WebCore::RenderBox *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int i;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  WebCore::RenderBox *v40;
  int v41;
  uint64_t v42;
  int v43;
  WTF *v44;
  WebCore::RenderBox *v45;
  WebCore::RenderBox **v46;
  int v47;
  const float *v48;
  int32x2_t v49;
  int v50;
  const float *v51;
  int32x2_t v52;
  uint64_t *v53;
  unsigned int v54;
  _BOOL4 v55;
  char v56;
  WTF *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  void *v66;
  WTF *v67;
  WTF *v68;
  WTF *v69;
  uint64_t v70;
  void *v71;
  WTF *v72;
  WTF *v73;
  WTF *v74;
  WTF *v75;
  void *v76;
  WTF *v77;
  WTF *v78;
  WTF *v79;
  void *v80;
  WTF *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  _BOOL4 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BOOL4 v91;
  WebCore::RenderBox *v92;
  int v93;
  WebCore::RenderElement *v94;
  _BOOL4 v95;
  int v96;
  WTF *v97;
  _BOOL4 v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  void *v102;
  int *v103;
  WebCore::RenderElement *v104;
  _BOOL4 v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  BOOL v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  __int128 v114;
  uint64_t v115;
  WTF *v116;
  uint64_t v117;
  WTF *v118;
  uint64_t v119;
  int v120;
  __int128 v121;
  uint64_t v122;
  _BYTE v123[24];
  char v124;
  WTF *v125;
  int v126;
  unint64_t v127;
  int v128;
  int v129;
  WebCore::RenderBox *v130;
  int v131;
  uint64_t v132;

  v3 = WebCore::RenderGrid::computeAutoRepeatTracksCount((uint64_t)a1, 0, a2);
  v5 = WebCore::RenderBlock::availableLogicalHeightForPercentageComputation(a1, v4);
  v6 = WebCore::RenderGrid::computeAutoRepeatTracksCount((uint64_t)a1, 1, v5);
  v7 = 0;
  if (v6)
  {
    v107 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 11) + 40) + 80) + 252);
    v108 = WebCore::GridPosition::gMaxPositionForTesting;
    if (!byte_1EE2F9580)
      v108 = 1000000;
    if (v107)
    {
      v109 = v108 >= v107;
      v110 = v108 - v107;
      if (v110 != 0 && v109)
      {
        if (v110 >= v6)
          v7 = v6;
        else
          v7 = v110;
      }
      else
      {
        v7 = 0;
      }
    }
    else if (v108 >= v6)
    {
      v7 = v6;
    }
    else
    {
      v7 = v108;
    }
  }
  if (v3)
  {
    v111 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 11) + 40) + 80) + 248);
    v112 = WebCore::GridPosition::gMaxPositionForTesting;
    if (!byte_1EE2F9580)
      v112 = 1000000;
    if (v111)
    {
      v109 = v112 >= v111;
      v113 = v112 - v111;
      if (v113 != 0 && v109)
      {
        if (v113 < v3)
          v3 = v113;
      }
      else
      {
        v3 = 0;
      }
    }
    else if (v112 < v3)
    {
      v3 = v112;
    }
  }
  if ((WebCore::RenderGrid::isSubgridInParentDirection(a1, 0) & 1) != 0
    || WebCore::RenderGrid::isSubgridInParentDirection(a1, 1))
  {
    v82 = *((_QWORD *)a1 + 4);
    if (v82)
    {
      v83 = *(_QWORD *)(v82 + 8);
      if (v83)
      {
        if (*(_BYTE *)(v83 + 46) == 12 && *(_BYTE *)(*(_QWORD *)(v83 + 328) + 80))
          WebCore::Grid::setNeedsItemsPlacement(*((_QWORD *)a1 + 41), (void *)1);
      }
    }
  }
  v8 = *((_QWORD *)a1 + 41);
  if (v3 != *(_DWORD *)(v8 + 64)
    || v7 != *(_DWORD *)(v8 + 68)
    || (result = WebCore::RenderGrid::isMasonry(a1), (_DWORD)result))
  {
    WebCore::Grid::setNeedsItemsPlacement(v8, (void *)1);
    result = WebCore::Grid::setAutoRepeatTracks(*((_QWORD *)a1 + 41), v7, v3);
    v8 = *((_QWORD *)a1 + 41);
  }
  if (*(_BYTE *)(v8 + 80))
  {
    WebCore::RenderGrid::populateExplicitGridAndOrderIterator(a1);
    v118 = 0;
    v119 = 0;
    v116 = 0;
    v117 = 0;
    v10 = (WebCore::RenderBox *)WebCore::OrderIterator::first(*((WebCore::OrderIterator **)a1 + 41));
    v130 = v10;
    if (v10)
    {
      while (1)
      {
        if ((*((_DWORD *)v10 + 5) & 0x1800000) == 0x1000000 || (*((_DWORD *)v10 + 5) & 0x400) != 0)
          goto LABEL_60;
        WebCore::RenderBox::overridingContainingBlockContentLogicalWidth(v10);
        if (!v12)
        {
          v13 = a1;
          do
          {
            v14 = v13;
            v15 = *((_QWORD *)v13 + 4);
            if (!v15)
              break;
            v13 = *(WebCore::RenderBlock **)(v15 + 8);
            if (!v13)
              break;
          }
          while (*((_BYTE *)v13 + 46) == 12
               && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v14 + 11) + 40) + 80) + 259));
          v16 = v14;
          do
          {
            v17 = v16;
            v18 = *((_QWORD *)v16 + 4);
            if (!v18)
              break;
            v16 = *(WebCore::RenderBlock **)(v18 + 8);
            if (!v16)
              break;
          }
          while (*((_BYTE *)v16 + 46) == 12
               && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v17 + 11) + 40) + 80) + 258));
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v17 + 11) + 40) + 80) + 260)
            || !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v14 + 11) + 40) + 80) + 261))
          {
            v19 = v130;
            *(_QWORD *)v123 = 0x100000000;
            v20 = (_QWORD *)WebCore::gOverridingContainingBlockContentLogicalWidthMap;
            if (!WebCore::gOverridingContainingBlockContentLogicalWidthMap)
            {
              v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v20 = 0;
              v20[1] = 0;
              WebCore::gOverridingContainingBlockContentLogicalWidthMap = (uint64_t)v20;
            }
            WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,std::optional<WebCore::LayoutUnit>&>((uint64_t)v20, v19, (int *)v123);
          }
        }
        WebCore::RenderBox::overridingContainingBlockContentLogicalHeight(v130);
        if (!v21)
        {
          v22 = a1;
          do
          {
            v23 = v22;
            v24 = *((_QWORD *)v22 + 4);
            if (!v24)
              break;
            v22 = *(WebCore::RenderBlock **)(v24 + 8);
            if (!v22)
              break;
          }
          while (*((_BYTE *)v22 + 46) == 12
               && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v23 + 11) + 40) + 80) + 258));
          if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v23 + 11) + 40) + 80) + 260))
          {
            v25 = v130;
            *(_QWORD *)v123 = 0;
            v26 = (_QWORD *)WebCore::gOverridingContainingBlockContentLogicalHeightMap;
            if (!WebCore::gOverridingContainingBlockContentLogicalHeightMap)
            {
              v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v26 = 0;
              v26[1] = 0;
              WebCore::gOverridingContainingBlockContentLogicalHeightMap = (uint64_t)v26;
            }
            WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,std::optional<WebCore::LayoutUnit>&>((uint64_t)v26, v25, (int *)v123);
          }
        }
        v27 = *((_QWORD *)a1 + 41);
        v28 = *(_QWORD *)(v27 + 104);
        if (v28)
        {
          v29 = *(_DWORD *)(v28 - 8);
          v30 = ((unint64_t)v130 + ~((_QWORD)v130 << 32)) ^ (((unint64_t)v130 + ~((_QWORD)v130 << 32)) >> 22);
          v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
          v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
          v33 = v29 & ((v32 >> 31) ^ v32);
          for (i = 1; ; ++i)
          {
            v35 = v33;
            v36 = *(_QWORD *)(v28 + 32 * v33);
            if (v36 != -1)
            {
              if (!v36)
                goto LABEL_164;
              if (*(WebCore::RenderBox **)(v36 + 8) == v130)
                break;
            }
            v33 = (v35 + i) & v29;
          }
          v37 = v28 + 32 * v35;
          v38 = *(_OWORD *)(v37 + 8);
          *(_QWORD *)&v123[16] = *(_QWORD *)(v37 + 24);
          *(_OWORD *)v123 = v38;
        }
        else
        {
LABEL_164:
          WTF::GenericHashTraits<WebCore::GridArea>::emptyValue((uint64_t)v123);
          v27 = *((_QWORD *)a1 + 41);
        }
        v39 = *(_DWORD *)&v123[20];
        if (*(_DWORD *)&v123[20] != 2)
        {
          v50 = *(_DWORD *)(v27 + 76);
          if (v50)
          {
            v86 = *(_DWORD *)&v123[12] & ~(*(int *)&v123[12] >> 31);
            if (*(int *)&v123[16] < v50)
              v50 = *(_DWORD *)&v123[16];
            if (v50 <= 1)
              v50 = 1;
            *(_DWORD *)&v123[12] &= ~(*(int *)&v123[12] >> 31);
            *(_DWORD *)&v123[16] = v50;
            if (v86 >= v50)
              *(_DWORD *)&v123[12] = v50 - 1;
          }
        }
        if (*(_DWORD *)&v123[8] != 2)
        {
          v47 = *(_DWORD *)(v27 + 72);
          if (v47)
          {
            v85 = *(_DWORD *)v123 & ~(*(int *)v123 >> 31);
            if (*(int *)&v123[4] < v47)
              v47 = *(_DWORD *)&v123[4];
            if (v47 <= 1)
              v47 = 1;
            *(_DWORD *)v123 &= ~(*(int *)v123 >> 31);
            *(_DWORD *)&v123[4] = v47;
            if (v85 >= v47)
              *(_DWORD *)v123 = v47 - 1;
          }
        }
        if (*(_DWORD *)&v123[20] != 2)
        {
          v51 = (const float *)(v27 + 60);
          *(_DWORD *)&v123[20] = 1;
          v52 = (int32x2_t)vld1_dup_f32(v51);
          *(int32x2_t *)&v123[12] = vadd_s32(*(int32x2_t *)&v123[12], v52);
        }
        if (*(_DWORD *)&v123[8] == 2)
          break;
        v48 = (const float *)(v27 + 56);
        *(_DWORD *)&v123[8] = 1;
        v49 = (int32x2_t)vld1_dup_f32(v48);
        *(int32x2_t *)v123 = vadd_s32(*(int32x2_t *)v123, v49);
        v40 = v130;
        if (v39 == 2)
          goto LABEL_54;
        v125 = *(WTF **)v123;
        v126 = *(_DWORD *)&v123[8];
        v127 = *(_QWORD *)&v123[12];
        v128 = *(_DWORD *)&v123[20];
        WebCore::insertIntoGrid((unsigned int *)&v121, (WebCore::Grid *)v27, (uint64_t)v130, (uint64_t)&v125);
LABEL_60:
        v10 = (WebCore::RenderBox *)WebCore::OrderIterator::next(*((WebCore::OrderIterator **)a1 + 41));
        v130 = v10;
        if (!v10)
        {
          v53 = (uint64_t *)v116;
          v54 = HIDWORD(v117);
          goto LABEL_69;
        }
      }
      v40 = v130;
LABEL_54:
      v114 = *(_OWORD *)v123;
      v115 = *(_QWORD *)&v123[16];
      WebCore::Grid::setGridItemArea(v27, (uint64_t)v40, &v114);
      if (WebCore::RenderGrid::autoPlacementMajorAxisDirection(a1))
        v41 = *(_DWORD *)&v123[20];
      else
        v41 = *(_DWORD *)&v123[8];
      if (v41 == 2)
      {
        v42 = HIDWORD(v119);
        if (HIDWORD(v119) == (_DWORD)v119)
        {
          v46 = (WebCore::RenderBox **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v118, HIDWORD(v119) + 1, (unint64_t)&v130);
          v42 = HIDWORD(v119);
          v43 = HIDWORD(v119) + 1;
          v44 = v118;
          v45 = *v46;
        }
        else
        {
          v43 = HIDWORD(v119) + 1;
          v44 = v118;
          v45 = v130;
        }
        *((_QWORD *)v44 + v42) = v45;
        HIDWORD(v119) = v43;
      }
      else
      {
        v84 = HIDWORD(v117);
        if (HIDWORD(v117) == (_DWORD)v117)
        {
          WTF::Vector<WebCore::RenderBox *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RenderBox *&>((uint64_t)&v116, (unint64_t)&v130);
        }
        else
        {
          *((_QWORD *)v116 + HIDWORD(v117)) = v130;
          HIDWORD(v117) = v84 + 1;
        }
      }
      goto LABEL_60;
    }
    v54 = 0;
    v53 = 0;
LABEL_69:
    v55 = WebCore::RenderGrid::autoPlacementMajorAxisDirection(a1);
    v56 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 11) + 40) + 80) + 24);
    v132 = 0;
    if (v54)
    {
      v87 = v55;
      v88 = 8 * v54;
      do
      {
        v89 = *((_QWORD *)a1 + 41);
        v90 = *v53;
        v91 = WebCore::RenderGrid::autoPlacementMajorAxisDirection(a1);
        v92 = (WebCore::RenderBox *)WebCore::Grid::gridItemSpan(v89, v90, v91);
        v130 = v92;
        v131 = v93;
        v94 = (WebCore::RenderElement *)*v53;
        v95 = WebCore::RenderGrid::autoPlacementMajorAxisDirection(a1);
        v96 = WebCore::GridPositionsResolver::spanSizeForAutoPlacedItem(v94, (WTF::StringImpl *)!v95);
        v129 = (int)v92;
        v97 = (WTF *)*((_QWORD *)a1 + 41);
        v98 = WebCore::RenderGrid::autoPlacementMajorAxisDirection(a1);
        if ((v56 & 2) != 0)
          v99 = 0;
        else
          v99 = WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get(v132, (int)v92);
        v125 = v97;
        LOBYTE(v126) = v98;
        if (v98)
          v100 = v92;
        else
          v100 = v99;
        if (v98)
          v101 = v99;
        else
          v101 = v92;
        v127 = __PAIR64__(v101, v100);
        v128 = 0;
        WebCore::GridIterator::nextEmptyGridArea((uint64_t *)&v125, HIDWORD(v92) - (_DWORD)v92, v96, (uint64_t)v123);
        if (!v124)
        {
          v104 = (WebCore::RenderElement *)*v53;
          v105 = WebCore::RenderGrid::autoPlacementMajorAxisDirection(a1);
          WebCore::RenderGrid::createEmptyGridAreaAtSpecifiedPositionsOutsideGrid((uint64_t)&v121, *((_QWORD *)a1 + 41), v104, v105, (uint64_t *)&v130);
          *(_OWORD *)v123 = v121;
          *(_QWORD *)&v123[16] = v122;
          if (!v124)
            v124 = 1;
        }
        WebCore::insertIntoGrid((unsigned int *)&v121, *((WebCore::Grid **)a1 + 41), *v53, (uint64_t)v123);
        *(_OWORD *)v123 = v121;
        *(_QWORD *)&v123[16] = v122;
        if (!v124)
          v124 = 1;
        if ((v56 & 2) == 0)
        {
          v103 = (int *)((unint64_t)v123 | 0xC);
          if (v87)
            v103 = (int *)v123;
          v120 = *v103;
          WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,unsigned int>(&v121, &v132, &v129, &v120);
        }
        ++v53;
        v88 -= 8;
      }
      while (v88);
      if (v132)
        WTF::fastFree((WTF *)(v132 - 16), v102);
    }
    *(_QWORD *)v123 = 0;
    if (HIDWORD(v119))
    {
      v57 = v118;
      v58 = 8 * HIDWORD(v119);
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 11) + 40) + 80) + 24) & 2) != 0)
      {
        do
        {
          v106 = *(_QWORD *)v57;
          v57 = (WTF *)((char *)v57 + 8);
          WebCore::RenderGrid::placeAutoMajorAxisItemOnGrid((WebCore::Grid **)a1, v106, (unsigned int *)v123);
          *(_QWORD *)v123 = 0;
          v58 -= 8;
        }
        while (v58);
      }
      else
      {
        do
        {
          v59 = *(_QWORD *)v57;
          v57 = (WTF *)((char *)v57 + 8);
          WebCore::RenderGrid::placeAutoMajorAxisItemOnGrid((WebCore::Grid **)a1, v59, (unsigned int *)v123);
          v58 -= 8;
        }
        while (v58);
      }
    }
    v60 = *((_QWORD *)a1 + 41);
    WebCore::RenderGrid::computeEmptyTracksForAutoRepeat((uint64_t)v123, a1, 0);
    v62 = *(_QWORD *)v123;
    *(_QWORD *)v123 = 0;
    v63 = *(WTF **)(v60 + 112);
    *(_QWORD *)(v60 + 112) = v62;
    if (v63)
    {
      v64 = (WTF *)*((_QWORD *)v63 + 1);
      if (v64)
      {
        do
        {
          v65 = (WTF *)*((_QWORD *)v64 + 2);
          WTF::fastFree(v64, v61);
          v64 = v65;
        }
        while (v65);
      }
      if (*(_QWORD *)v63)
        WTF::fastFree((WTF *)(*(_QWORD *)v63 - 16), v61);
      WTF::fastFree(v63, v61);
      v67 = *(WTF **)v123;
      *(_QWORD *)v123 = 0;
      if (v67)
      {
        v68 = (WTF *)*((_QWORD *)v67 + 1);
        if (v68)
        {
          do
          {
            v69 = (WTF *)*((_QWORD *)v68 + 2);
            WTF::fastFree(v68, v66);
            v68 = v69;
          }
          while (v69);
        }
        if (*(_QWORD *)v67)
          WTF::fastFree((WTF *)(*(_QWORD *)v67 - 16), v66);
        WTF::fastFree(v67, v66);
      }
    }
    v70 = *((_QWORD *)a1 + 41);
    WebCore::RenderGrid::computeEmptyTracksForAutoRepeat((uint64_t)&v125, a1, 1);
    v72 = v125;
    v125 = 0;
    v73 = *(WTF **)(v70 + 120);
    *(_QWORD *)(v70 + 120) = v72;
    if (v73)
    {
      v74 = (WTF *)*((_QWORD *)v73 + 1);
      if (v74)
      {
        do
        {
          v75 = (WTF *)*((_QWORD *)v74 + 2);
          WTF::fastFree(v74, v71);
          v74 = v75;
        }
        while (v75);
      }
      if (*(_QWORD *)v73)
        WTF::fastFree((WTF *)(*(_QWORD *)v73 - 16), v71);
      WTF::fastFree(v73, v71);
      v77 = v125;
      v125 = 0;
      if (v77)
      {
        v78 = (WTF *)*((_QWORD *)v77 + 1);
        if (v78)
        {
          do
          {
            v79 = (WTF *)*((_QWORD *)v78 + 2);
            WTF::fastFree(v78, v76);
            v78 = v79;
          }
          while (v79);
        }
        if (*(_QWORD *)v77)
          WTF::fastFree((WTF *)(*(_QWORD *)v77 - 16), v76);
        WTF::fastFree(v77, v76);
      }
    }
    WebCore::Grid::setNeedsItemsPlacement(*((_QWORD *)a1 + 41), 0);
    v81 = v116;
    if (v116)
    {
      v116 = 0;
      LODWORD(v117) = 0;
      WTF::fastFree(v81, v80);
    }
    result = (uint64_t)v118;
    if (v118)
    {
      v118 = 0;
      LODWORD(v119) = 0;
      return WTF::fastFree((WTF *)result, v80);
    }
  }
  return result;
}

uint64_t WebCore::RenderGrid::performPreLayoutForGridItems(uint64_t this, _QWORD *a2, char a3)
{
  uint64_t v3;
  WebCore::RenderGrid *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!(*(unsigned int *)(this + 64) | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32)))
    return this;
  v3 = *(_QWORD *)((*(unsigned int *)(this + 64) | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32)) + 8);
  if (!v3 || (*(_BYTE *)(v3 + 45) & 4) == 0)
    return this;
  v5 = (WebCore::RenderGrid *)this;
  if ((a3 & 1) == 0)
  {
    while (1)
    {
      if ((*(_DWORD *)(v3 + 20) & 0x1800000) == 0x1000000)
        goto LABEL_17;
      if (((*(_DWORD *)(v3 + 20) & 0x1000) == 0) == ((*((_BYTE *)v5 + 21) & 0x10) == 0))
      {
        this = WebCore::RenderGrid::isBaselineAlignmentForChild(v5, (const WebCore::RenderBox *)v3);
        if (!(_DWORD)this)
          goto LABEL_17;
      }
      else
      {
        v10 = WebCore::GridTrackSizingAlgorithm::estimatedGridAreaBreadthForChild(a2, (_BYTE *)v3, 0);
        v11 = WebCore::GridTrackSizingAlgorithm::estimatedGridAreaBreadthForChild(a2, (_BYTE *)v3, 1u);
        WebCore::RenderGrid::updateGridAreaLogicalSize((uint64_t)v5, (WebCore::RenderBox *)v3, v10, v11);
      }
      this = WebCore::RenderElement::layoutIfNeeded(v3);
LABEL_17:
      v9 = *(unsigned int *)(v3 + 47);
      if (v9 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32))
      {
        v3 = *(_QWORD *)((v9 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)) + 8);
        if (v3)
        {
          if ((*(_BYTE *)(v3 + 45) & 4) != 0)
            continue;
        }
      }
      return this;
    }
  }
  do
  {
    if ((*(_DWORD *)(v3 + 20) & 0x1800000) != 0x1000000)
    {
      if (((*(_DWORD *)(v3 + 20) & 0x1000) == 0) != ((*((_BYTE *)v5 + 21) & 0x10) == 0)
        || (this = WebCore::RenderGrid::isBaselineAlignmentForChild(v5, (const WebCore::RenderBox *)v3), (_DWORD)this))
      {
        v7 = WebCore::GridTrackSizingAlgorithm::estimatedGridAreaBreadthForChild(a2, (_BYTE *)v3, 0);
        v8 = WebCore::GridTrackSizingAlgorithm::estimatedGridAreaBreadthForChild(a2, (_BYTE *)v3, 1u);
        WebCore::RenderGrid::updateGridAreaLogicalSize((uint64_t)v5, (WebCore::RenderBox *)v3, v7, v8);
        this = WebCore::RenderElement::layoutIfNeeded(v3);
      }
    }
    v6 = *(unsigned int *)(v3 + 47);
    if (!(v6 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)))
      break;
    v3 = *(_QWORD *)((v6 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)) + 8);
    if (!v3)
      break;
  }
  while ((*(_BYTE *)(v3 + 45) & 4) != 0);
  return this;
}

uint64_t WebCore::RenderGrid::explicitIntrinsicInnerLogicalSize(WebCore::RenderElement *a1, int a2)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  if (!a2)
  {
    if ((WebCore::RenderElement::shouldApplySizeOrInlineSizeContainment(a1) & 1) == 0)
      goto LABEL_3;
    v6 = WebCore::RenderBox::explicitIntrinsicInnerLogicalWidth(a1);
LABEL_8:
    v3 = v6 & 0xFFFFFF00;
    v5 = v6 & 0xFFFFFFFF00000000;
    v4 = v6 & 0xFFFFFF0000000000;
    return v3 & 0xFFFFFF00 | v4 | v5 & 0xFF00000000 | v6;
  }
  if ((WebCore::RenderElement::shouldApplySizeContainment(a1) & 1) != 0)
  {
    v6 = WebCore::RenderBox::explicitIntrinsicInnerLogicalHeight(a1);
    goto LABEL_8;
  }
LABEL_3:
  v3 = 0;
  v4 = 0;
  v5 = 0;
  LOBYTE(v6) = 0;
  return v3 & 0xFFFFFF00 | v4 | v5 & 0xFF00000000 | v6;
}

uint64_t WebCore::RenderGrid::updateGridAreaForAspectRatioItems(WebCore::RenderBox *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  WebCore::RenderBox *v10;
  unsigned int v11;
  unsigned int v12;

  WebCore::RenderGrid::populateGridPositionsForDirection(a1, 0);
  result = WebCore::RenderGrid::populateGridPositionsForDirection(a1, 1);
  v7 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v7)
  {
    v8 = *(uint64_t **)a2;
    v9 = 8 * v7;
    do
    {
      v10 = (WebCore::RenderBox *)*v8;
      v11 = WebCore::RenderGrid::gridAreaBreadthForChildIncludingAlignmentOffsets((uint64_t)a1, *v8, 0);
      v12 = WebCore::RenderGrid::gridAreaBreadthForChildIncludingAlignmentOffsets((uint64_t)a1, *v8, 1);
      WebCore::RenderGrid::updateGridAreaLogicalSize((uint64_t)a1, v10, v11 | 0x100000000, v12 | 0x100000000);
      result = WebCore::RenderBox::hasStretchedLogicalHeight((WebCore::RenderBox *)*v8);
      if ((_DWORD)result)
        result = WebCore::RenderGrid::applyStretchAlignmentToChildIfNeeded((uint64_t)a1, (WebCore::RenderBox *)*v8, a3);
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  return result;
}

uint64_t WebCore::RenderGrid::areMasonryRows(WebCore::RenderGrid *this)
{
  WebCore::RenderGrid *v1;
  uint64_t v2;

  do
  {
    v1 = this;
    v2 = *((_QWORD *)this + 4);
    if (!v2)
      break;
    this = *(WebCore::RenderGrid **)(v2 + 8);
    if (!this)
      break;
  }
  while (*((_BYTE *)this + 46) == 12
       && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 11) + 40) + 80) + 258));
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 11) + 40) + 80) + 260);
}

BOOL WebCore::RenderGrid::areMasonryColumns(WebCore::RenderGrid *this)
{
  WebCore::RenderGrid *v1;
  uint64_t v2;
  WebCore::RenderGrid *v3;
  WebCore::RenderGrid *v4;
  uint64_t v5;

  do
  {
    v1 = this;
    v2 = *((_QWORD *)this + 4);
    if (!v2)
      break;
    this = *(WebCore::RenderGrid **)(v2 + 8);
    if (!this)
      break;
  }
  while (*((_BYTE *)this + 46) == 12
       && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 11) + 40) + 80) + 259));
  v3 = v1;
  do
  {
    v4 = v3;
    v5 = *((_QWORD *)v3 + 4);
    if (!v5)
      break;
    v3 = *(WebCore::RenderGrid **)(v5 + 8);
    if (!v3)
      break;
  }
  while (*((_BYTE *)v3 + 46) == 12 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 11) + 40) + 80) + 258));
  return !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 11) + 40) + 80) + 260)
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 11) + 40) + 80) + 261) != 0;
}

uint64_t WebCore::RenderGrid::gridGap(WebCore::RenderElement *a1, _BOOL4 a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _BOOL4 v7;
  uint64_t v9;
  uint64_t result;
  unsigned __int8 *v11;
  unsigned int v12;
  int v14;
  float v15;
  float v16;
  double v17;
  int v18;
  float v19;
  float v20;
  uint64_t v22;
  WebCore::RenderGrid *v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::RenderGrid *v29;
  WebCore::RenderElement *v30;

  v3 = BYTE4(a3);
  v4 = *(_QWORD *)(*((_QWORD *)a1 + 11) + 40);
  v5 = (_BYTE *)(v4 + 376);
  v6 = (_BYTE *)(v4 + 388);
  if (!a2)
    v6 = v5;
  if (*v6)
  {
    v7 = a2;
    if (WebCore::RenderElement::establishesIndependentFormattingContext(a1))
      return 0;
    v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 11) + 40) + 80);
    if (v7)
    {
      if (!*(_BYTE *)(v9 + 258))
        return 0;
    }
    else if (!*(_BYTE *)(v9 + 259))
    {
      return 0;
    }
    v30 = a1;
    v22 = *((_QWORD *)a1 + 4);
    if (!v22)
      return 0;
    v23 = *(WebCore::RenderGrid **)(v22 + 8);
    if (!v23 || *((_BYTE *)v23 + 46) != 12)
      return 0;
    if (v7)
    {
      if ((WebCore::RenderGrid::areMasonryRows(v23) & 1) != 0)
        return 0;
    }
    else if (WebCore::RenderGrid::areMasonryColumns(v23))
    {
      return 0;
    }
    if (((*((_BYTE *)v23 + 21) & 0x10) == 0) != ((*((_BYTE *)v30 + 21) & 0x10) == 0))
      v7 = !v7;
    if (v3)
      return WebCore::RenderGrid::gridGap(v23, v7);
    while (1)
    {
      v24 = *(_QWORD *)(*((_QWORD *)v23 + 11) + 40);
      v25 = (_BYTE *)(v24 + 388);
      v26 = (_BYTE *)(v24 + 376);
      if (v7)
        v26 = v25;
      if (!*v26)
        break;
      if (WebCore::RenderElement::establishesIndependentFormattingContext(v23))
        return 0;
      v27 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v23 + 11) + 40) + 80);
      if (v7)
      {
        if (!*(_BYTE *)(v27 + 258))
          return 0;
      }
      else if (!*(_BYTE *)(v27 + 259))
      {
        return 0;
      }
      v28 = *((_QWORD *)v23 + 4);
      if (!v28)
        return 0;
      v29 = *(WebCore::RenderGrid **)(v28 + 8);
      if (!v29 || *((_BYTE *)v29 + 46) != 12)
        return 0;
      if (v7)
      {
        if ((WebCore::RenderGrid::areMasonryRows(v29) & 1) != 0)
          return 0;
      }
      else if (WebCore::RenderGrid::areMasonryColumns(v29))
      {
        return 0;
      }
      if (((*((_BYTE *)v29 + 21) & 0x10) == 0) != ((*((_BYTE *)v23 + 21) & 0x10) == 0))
        LOBYTE(v7) = !v7;
      v23 = v29;
    }
    v11 = v26 + 4;
  }
  else
  {
    v11 = v6 + 4;
    if (BYTE4(a3))
    {
      result = a3;
      goto LABEL_11;
    }
  }
  result = 0;
LABEL_11:
  v12 = v11[4];
  if (v12 - 3 < 2 || v12 == 11)
  {
    switch(v12)
    {
      case 4u:
        v14 = v11[6];
        v15 = *(float *)v11;
        v16 = *(float *)v11;
        if (!v14)
          v15 = (float)SLODWORD(v16);
        break;
      case 3u:
        v18 = v11[6];
        v19 = *(float *)v11;
        v20 = *(float *)v11;
        if (!v18)
          v19 = (float)SLODWORD(v20);
        v15 = (float)((float)((float)(int)result * 0.015625) * v19) / 100.0;
        break;
      case 0xBu:
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v11, (float)(int)result * 0.015625);
        break;
      default:
        return 0;
    }
    v17 = v15 * 64.0;
    if (v17 >= 2147483650.0)
    {
      return 0x7FFFFFFFLL;
    }
    else if (v17 <= -2147483650.0)
    {
      return 0x80000000;
    }
    else
    {
      return (int)v17;
    }
  }
  else if (v12 >= 2 && v12 != 9)
  {
    return 0;
  }
  return result;
}

WebCore::RenderGrid *WebCore::RenderGrid::isSubgrid(WebCore::RenderElement *a1, int a2)
{
  uint64_t v4;
  WebCore::RenderGrid *result;
  uint64_t v6;
  int v7;

  if (WebCore::RenderElement::establishesIndependentFormattingContext(a1))
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 11) + 40) + 80);
  if (a2)
  {
    if (!*(_BYTE *)(v4 + 258))
      return 0;
  }
  else if (!*(_BYTE *)(v4 + 259))
  {
    return 0;
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6)
    return 0;
  result = *(WebCore::RenderGrid **)(v6 + 8);
  if (result)
  {
    if (*((_BYTE *)result + 46) != 12)
      return 0;
    if (a2 == 1)
      v7 = WebCore::RenderGrid::areMasonryRows(result);
    else
      v7 = WebCore::RenderGrid::areMasonryColumns(result);
    return (WebCore::RenderGrid *)(v7 ^ 1u);
  }
  return result;
}

uint64_t WebCore::RenderGrid::gridGap(WebCore::RenderBox *a1, int a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;

  v2 = *(_QWORD *)(*((_QWORD *)a1 + 11) + 40);
  v3 = (_BYTE *)(v2 + 388);
  v4 = (_BYTE *)(v2 + 376);
  if (a2)
    v4 = v3;
  if (!*v4 && (v4[8] & 0xF7) == 3)
  {
    if (a2)
      WebCore::RenderBox::contentLogicalHeight(a1);
    else
      WebCore::RenderBox::contentLogicalWidth(a1);
  }
  return WebCore::RenderGrid::gridGap();
}

uint64_t WebCore::RenderGrid::guttersSize(WebCore::RenderElement *a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  char isEmptyAutoRepeatTrack;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t *v33;

  if (a4 < 2)
    return 0;
  v11 = WebCore::RenderGrid::gridGap(a1, a2, a5);
  v12 = v11;
  v13 = *((_QWORD *)a1 + 41);
  v14 = 120;
  if (!a2)
    v14 = 112;
  v15 = *(uint64_t **)(v13 + v14);
  if (!v15)
  {
    if (a4 - 1 <= 0x1FFFFFE)
      v16 = (a4 - 1) << 6;
    else
      v16 = 0x7FFFFFFFLL;
    v5 = (int)v11 * v16 / 64;
    if (HIDWORD(v5) != (int)v5 >> 31)
      return (v11 >> 31) + 0x7FFFFFFF;
    return v5;
  }
  v33 = v15;
  v17 = a4 + a3 - 1;
  if (v17 <= a3)
    goto LABEL_28;
  v18 = 0;
  v19 = a4 - 1;
  v20 = a3;
  do
  {
    isEmptyAutoRepeatTrack = WebCore::Grid::isEmptyAutoRepeatTrack(v13, a2, v20);
    v22 = v18 + v12;
    if (__OFADD__(v18, v12))
      v22 = (v18 >> 31) + 0x7FFFFFFF;
    if ((isEmptyAutoRepeatTrack & 1) == 0)
      v18 = v22;
    ++v20;
    --v19;
  }
  while (v19);
  if (v18)
  {
    v23 = WebCore::Grid::isEmptyAutoRepeatTrack(v13, a2, v17);
    v24 = v18 - v12;
    if (__OFSUB__(v18, v12))
      v24 = (v18 >> 31) + 0x7FFFFFFF;
    if (v23)
      v25 = v24;
    else
      v25 = v18;
  }
  else
  {
LABEL_28:
    v25 = 0;
  }
  if (!a3 || !WebCore::Grid::isEmptyAutoRepeatTrack(v13, a2, a3))
  {
    v27 = 0;
    goto LABEL_37;
  }
  v26 = (_QWORD *)v33[1];
  if (*v26 == a3)
  {
    v27 = a3;
LABEL_33:
    if (__OFADD__((_DWORD)v25, v12))
      v25 = (v25 >> 31) + 0x7FFFFFFF;
    else
      v25 = v25 + v12;
    goto LABEL_37;
  }
  v27 = a3;
  do
  {
    --v27;
    v26 = (_QWORD *)v26[2];
  }
  while (*v26 != a3);
  if (v27)
    goto LABEL_33;
LABEL_37:
  if (!WebCore::Grid::isEmptyAutoRepeatTrack(v13, a2, v17))
    return v25;
  v28 = *(_DWORD *)(v13 + 100);
  if (a2 != 1 && v28)
    v28 = *(_DWORD *)(*(_QWORD *)(v13 + 88) + 12);
  v29 = WTF::ListHashSet<unsigned long,WTF::DefaultHash<unsigned long>>::find(v33, v17);
  v30 = ~v28 + a4 + a3;
  do
  {
    v29 = (_QWORD *)v29[2];
    ++v30;
  }
  while (v29);
  v31 = v25 - v12;
  v32 = (v25 >> 31) + 0x7FFFFFFF;
  if (__OFSUB__((_DWORD)v25, v12))
    v31 = (v25 >> 31) + 0x7FFFFFFF;
  if (!v27)
    v31 = v25;
  if (!__OFADD__((_DWORD)v25, v12))
    v32 = v25 + v12;
  if (v27)
    v32 = v25;
  if (v30)
    return v32;
  else
    return v31;
}

_QWORD *WTF::ListHashSet<unsigned long,WTF::DefaultHash<unsigned long>>::find(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  _QWORD *result;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  for (i = 1; ; ++i)
  {
    result = *(_QWORD **)(v2 + 8 * v7);
    if (result != (_QWORD *)-1)
    {
      if (!result)
        return result;
      if (*result == a2)
        break;
    }
    v7 = (v7 + i) & v3;
  }
  if (v7 == *(_DWORD *)(v2 - 4))
    return 0;
  return result;
}

void WebCore::RenderGrid::computeIntrinsicLogicalWidths(WebCore::RenderGrid *this, WebCore::LayoutUnit *a2, WebCore::LayoutUnit *a3)
{
  int v6;
  char v7;
  const WebCore::RenderGrid *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  void *v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  void *v21;
  void *v22;
  WTF **v23;
  uint64_t v24;
  WTF **v25;
  WTF *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  WebCore::RenderGrid *v34;
  int v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD *v49;
  WebCore::RenderGrid *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _QWORD v58[3];
  _QWORD v59[3];
  __int16 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  WTF **v71;
  uint64_t v72;

  v69 = 0;
  v71 = 0;
  v72 = 0;
  v70 = 0;
  v68 = 0;
  v6 = WebCore::RenderBlock::computePreferredWidthsForExcludedChildren(this, (WebCore::LayoutUnit *)&v69, (WebCore::LayoutUnit *)&v68);
  v58[2] = v59;
  v59[0] = 0;
  v58[0] = this;
  v58[1] = 0;
  v59[1] = 0;
  v59[2] = v59;
  v60 = 1;
  v62 = 0;
  v63 = 0;
  v61 = 0;
  v64 = 1;
  v65 = 0u;
  v66 = 0u;
  v67 = 0;
  *((_QWORD *)this + 41) = v58;
  LOWORD(v36) = 1;
  BYTE2(v36) = 0;
  BYTE4(v36) = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = v58;
  v50 = this;
  v52 = 0;
  v53 = 0;
  v51 = 0;
  v54 = 0;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  WebCore::RenderGrid::placeItemsOnGrid(this, 0);
  WebCore::RenderGrid::performPreLayoutForGridItems((uint64_t)this, &v36, 0);
  if (*((_BYTE *)this + 746))
  {
    WebCore::GridTrackSizingAlgorithm::copyBaselineItemsCache((uint64_t)&v36, (uint64_t)this + 336, 1);
  }
  else
  {
    if (!WebCore::RenderElement::establishesIndependentFormattingContext(this)
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 80) + 258)
      && (v33 = *((_QWORD *)this + 4)) != 0
      && (v34 = *(WebCore::RenderGrid **)(v33 + 8)) != 0
      && *((_BYTE *)v34 + 46) == 12)
    {
      v7 = WebCore::RenderGrid::areMasonryRows(v34);
    }
    else
    {
      v7 = 1;
    }
    WebCore::cacheBaselineAlignedChildren<WebCore::RenderGrid::computeIntrinsicLogicalWidths(WebCore::LayoutUnit &,WebCore::LayoutUnit &)::$_0>((uint64_t)this, (uint64_t)&v36, 1, v7);
  }
  v9 = *((_QWORD *)this + 41);
  if (*(_DWORD *)(v9 + 100))
    v10 = *(_DWORD *)(*(_QWORD *)(v9 + 88) + 12);
  else
    v10 = WebCore::GridPositionsResolver::explicitGridColumnCount(this, v8);
  WebCore::GridTrackSizingAlgorithm::setup((uint64_t)&v36, 0, v10, 1, 0, (uint64_t)&v69 + 4);
  WebCore::GridTrackSizingAlgorithm::run((WebCore::GridTrackSizingAlgorithm *)&v36);
  v11 = HIDWORD(v44);
  if (WebCore::RenderElement::shouldApplySizeOrInlineSizeContainment(this)
    && (WebCore::RenderBox::explicitIntrinsicInnerLogicalWidth(this) & 0xFF00000000) != 0)
  {
    v12 = 0;
  }
  else
  {
    v12 = WebCore::RenderGrid::guttersSize(this, 0, 0, v11, 0);
  }
  v14 = v53 + v12;
  if (__OFADD__((_DWORD)v53, v12))
    v14 = (v53 >> 31) + 0x7FFFFFFF;
  *(_DWORD *)a2 = v14;
  v15 = HIDWORD(v53) + v12;
  if (__OFADD__(HIDWORD(v53), v12))
    v15 = (HIDWORD(v53) >> 31) + 0x7FFFFFFF;
  *(_DWORD *)a3 = v15;
  *((_QWORD *)this + 41) = (char *)this + 200;
  if (v6)
  {
    v31 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 <= (int)v69)
      v31 = v69;
    *(_DWORD *)a2 = v31;
    v32 = *(_DWORD *)a3;
    if (*(_DWORD *)a3 <= v68)
      v32 = v68;
    *(_DWORD *)a3 = v32;
  }
  v16 = *((_DWORD *)this + 5);
  if ((v16 & 0x10000) == 0)
    goto LABEL_16;
  if ((v16 & 0x1000) != 0)
  {
LABEL_41:
    if ((*((_QWORD *)this + 12) & 0x1C00) == 0xC00 && (WebCore::RenderBox::canUseOverlayScrollbars(this) & 1) == 0)
    {
      v30 = 170;
      goto LABEL_59;
    }
LABEL_16:
    v17 = 0;
    goto LABEL_17;
  }
  if ((*((_QWORD *)this + 12) & 0xE000) != 0x6000)
    goto LABEL_16;
  if (WebCore::RenderBox::canUseOverlayScrollbars(this))
  {
    if ((*((_BYTE *)this + 21) & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
  v30 = 169;
LABEL_59:
  v35 = (*(uint64_t (**)(WebCore::RenderGrid *))(*(_QWORD *)this + 8 * v30))(this);
  if (v35 >= -33554432)
  {
    v17 = v35 << 6;
    if (v35 > 0x1FFFFFF)
      v17 = 0x7FFFFFFF;
  }
  else
  {
    v17 = 0x80000000;
  }
LABEL_17:
  v18 = *(_DWORD *)a2 + v17;
  if (__OFADD__(*(_DWORD *)a2, v17))
    v18 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
  *(_DWORD *)a2 = v18;
  v19 = __OFADD__(*(_DWORD *)a3, v17);
  v20 = *(_DWORD *)a3 + v17;
  if (v19)
    v20 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
  *(_DWORD *)a3 = v20;
  WebCore::GridTrackSizingAlgorithm::~GridTrackSizingAlgorithm((WebCore::GridTrackSizingAlgorithm *)&v36, v13);
  WebCore::Grid::~Grid((WebCore::Grid *)v58, v21);
  v23 = v71;
  if (v71)
  {
    v24 = *((unsigned int *)v71 - 1);
    if ((_DWORD)v24)
    {
      v25 = v71;
      do
      {
        v26 = *v25;
        if (*v25 != (WTF *)-1)
        {
          *v25 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 1)
              WTF::fastFree(v26, v22);
            else
              --*(_DWORD *)v26;
          }
        }
        v25 += 2;
        --v24;
      }
      while (v24);
    }
    WTF::fastFree((WTF *)(v23 - 2), v22);
  }
  if (v70)
  {
    *(_QWORD *)(v70 + 8) = 0;
    v27 = (unsigned int *)v70;
    v70 = 0;
    if (v27)
    {
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        atomic_store(1u, v27);
        WTF::fastFree((WTF *)v27, v22);
      }
    }
  }
}

uint64_t WebCore::cacheBaselineAlignedChildren<WebCore::RenderGrid::computeIntrinsicLogicalWidths(WebCore::LayoutUnit &,WebCore::LayoutUnit &)::$_0>(uint64_t result, uint64_t a2, char a3, BOOL a4)
{
  uint64_t v4;
  char v5;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  int v18;
  char v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  int v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (*(unsigned int *)(result + 64) | ((unint64_t)*(unsigned __int8 *)(result + 68) << 32))
  {
    v4 = *(_QWORD *)((*(unsigned int *)(result + 64) | ((unint64_t)*(unsigned __int8 *)(result + 68) << 32)) + 8);
    if (v4)
    {
      v5 = *(_BYTE *)(v4 + 45);
      if ((v5 & 4) != 0)
      {
        v9 = result;
        v10 = &WebCore::HTMLNames::legendTag;
        while (1)
        {
          v11 = *(_DWORD *)(v4 + 20);
          if ((v11 & 0x1800000) != 0x1000000
            && ((v5 & 1) != 0
             || (v12 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8)) == 0
             || (*(_WORD *)(v12 + 28) & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(v12 + 96) + 24) != *(_QWORD *)(*v10 + 24)))
          {
            v13 = *(_BYTE *)(v4 + 46);
            if (v13 == 12)
              v14 = v4;
            else
              v14 = 0;
            if (v13 == 12)
            {
              ++*(_DWORD *)(v4 + 16);
              if ((a3 & 2) != 0)
              {
                result = (uint64_t)WebCore::RenderGrid::isSubgridInParentDirection((WebCore::RenderElement *)v4, 1);
                if ((_DWORD)result)
                {
                  if (((*(_BYTE *)(v4 + 21) & 0x10) == 0) != ((*(_BYTE *)(v9 + 21) & 0x10) == 0))
                    v15 = 1;
                  else
                    v15 = 2;
                  if ((a3 & 1) == 0)
                    goto LABEL_54;
                  goto LABEL_28;
                }
LABEL_25:
                result = WebCore::RenderGrid::isBaselineAlignmentForChild(v9, (WebCore::RenderElement *)v4);
                if ((_DWORD)result)
                  result = WebCore::GridTrackSizingAlgorithm::cacheBaselineAlignedItem(a2, v4, 2, a4);
              }
              v15 = 0;
              if ((a3 & 1) == 0)
                goto LABEL_54;
LABEL_28:
              if (v13 != 12)
              {
                v11 = *(_DWORD *)(v4 + 20);
                goto LABEL_35;
              }
              result = (uint64_t)WebCore::RenderGrid::isSubgridInParentDirection((WebCore::RenderElement *)v4, 0);
              v11 = *(_DWORD *)(v4 + 20);
              if (!(_DWORD)result)
                goto LABEL_35;
              if (((*(_DWORD *)(v4 + 20) & 0x1000) == 0) != ((*(_BYTE *)(v9 + 21) & 0x10) == 0))
                v16 = 2;
              else
                v16 = 1;
              v15 = v16 | v15;
              goto LABEL_54;
            }
            if ((a3 & 2) != 0)
              goto LABEL_25;
            if ((a3 & 1) != 0)
            {
              v15 = 0;
LABEL_35:
              v17 = v10;
              if ((v11 & 0x1800000) == 0x1000000)
                goto LABEL_94;
              v18 = *(unsigned __int8 *)(v4 + 46);
              if (v18 == 12)
              {
                ++*(_DWORD *)(v4 + 16);
                result = (uint64_t)WebCore::RenderGrid::isSubgridInParentDirection((WebCore::RenderElement *)v4, 0);
                if ((result & 1) != 0)
                {
                  v19 = 3;
                  goto LABEL_46;
                }
              }
              if ((*(_BYTE *)(v4 + 52) & 7) == 3)
                v19 = 7;
              else
                v19 = 3;
              v20 = *(_QWORD *)(v4 + 88);
              v21 = *(_BYTE *)(*(_QWORD *)(v20 + 32) + 127);
              v22 = v21 & 0xF;
              if (v22 == 1)
              {
                v21 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 88) + 32) + 126);
                v22 = v21 & 0xF;
              }
              if (v22 >= 3)
                v19 = v21;
              if (v18 == 12)
              {
LABEL_46:
                v10 = v17;
                v23 = *(_DWORD *)(v4 + 16);
                if (!v23)
                  goto LABEL_107;
                *(_DWORD *)(v4 + 16) = v23 - 1;
                v20 = *(_QWORD *)(v4 + 88);
              }
              else
              {
                v10 = v17;
              }
              v24 = *(_BYTE **)(v20 + 24);
              if ((*(_BYTE *)(v9 + 21) & 0x10) == 0)
              {
                if (v24[68])
                {
                  v25 = v24 + 52;
                  goto LABEL_51;
                }
                goto LABEL_54;
              }
              if (!v24[44])
              {
LABEL_94:
                v10 = v17;
                goto LABEL_54;
              }
              v25 = v24 + 60;
              v10 = v17;
LABEL_51:
              if ((v19 & 0xE) == 4 && *v25)
                result = WebCore::GridTrackSizingAlgorithm::cacheBaselineAlignedItem(a2, v4, 1, a4);
LABEL_54:
              if (v13 != 12 || !a4)
                goto LABEL_78;
              v26 = v10;
              v27 = (*(_DWORD *)(v14 + 20) & 0x1000) == 0;
              v28 = (*(_DWORD *)(*(_QWORD *)(a2 + 136) + 20) & 0x1000) == 0;
              result = WebCore::RenderElement::establishesIndependentFormattingContext((WebCore::RenderElement *)v14);
              if (v27 == v28)
              {
                if ((result & 1) != 0)
                  goto LABEL_104;
                if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 88) + 40) + 80) + 258))
                {
                  v10 = v26;
                  goto LABEL_77;
                }
                v39 = *(_QWORD *)(v14 + 32);
                if (!v39)
                  goto LABEL_104;
                v40 = *(_QWORD *)(v39 + 8);
                if (!v40 || *(_BYTE *)(v40 + 46) != 12)
                  goto LABEL_104;
                do
                {
                  v41 = v40;
                  v42 = *(_QWORD *)(v40 + 32);
                  if (!v42)
                    break;
                  v40 = *(_QWORD *)(v42 + 8);
                  if (!v40)
                    break;
                }
                while (*(_BYTE *)(v40 + 46) == 12
                     && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 88) + 40) + 80) + 258));
                a4 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 88) + 40) + 80) + 260) == 0;
              }
              else
              {
                if ((result & 1) == 0)
                {
                  v10 = v26;
                  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 88) + 40) + 80) + 259))
                  {
                    v29 = *(_QWORD *)(v14 + 32);
                    if (v29 && (v30 = *(_QWORD *)(v29 + 8)) != 0 && *(_BYTE *)(v30 + 46) == 12)
                    {
                      do
                      {
                        v31 = v30;
                        v32 = *(_QWORD *)(v30 + 32);
                        if (!v32)
                          break;
                        v30 = *(_QWORD *)(v32 + 8);
                        if (!v30)
                          break;
                      }
                      while (*(_BYTE *)(v30 + 46) == 12
                           && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 88) + 40) + 80) + 259));
                      v33 = v31;
                      do
                      {
                        v34 = v33;
                        v35 = *(_QWORD *)(v33 + 32);
                        if (!v35)
                          break;
                        v33 = *(_QWORD *)(v35 + 8);
                        if (!v33)
                          break;
                      }
                      while (*(_BYTE *)(v33 + 46) == 12
                           && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 88) + 40) + 80) + 258));
                      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 88) + 40) + 80) + 260))
                        v36 = 0;
                      else
                        v36 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 88) + 40) + 80) + 261) != 0;
                      a4 = !v36;
                      if (!(_DWORD)v15)
                      {
LABEL_80:
                        if (v13 == 12)
                        {
                          v37 = *(_DWORD *)(v4 + 16);
                          if (!v37)
                          {
LABEL_107:
                            __break(0xC471u);
                            JUMPOUT(0x1963CD418);
                          }
                          *(_DWORD *)(v4 + 16) = v37 - 1;
                        }
                        goto LABEL_83;
                      }
                    }
                    else
                    {
                      a4 = 0;
                      if (!(_DWORD)v15)
                        goto LABEL_80;
                    }
LABEL_79:
                    result = WebCore::cacheBaselineAlignedChildren<WebCore::RenderGrid::computeIntrinsicLogicalWidths(WebCore::LayoutUnit &,WebCore::LayoutUnit &)::$_0>(v14, a2, v15, a4);
                    goto LABEL_80;
                  }
LABEL_77:
                  a4 = 0;
LABEL_78:
                  if (!(_DWORD)v15)
                    goto LABEL_80;
                  goto LABEL_79;
                }
LABEL_104:
                a4 = 0;
              }
              v10 = v26;
              goto LABEL_78;
            }
          }
LABEL_83:
          v38 = *(unsigned int *)(v4 + 47);
          if (v38 | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32))
          {
            v4 = *(_QWORD *)((v38 | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32)) + 8);
            if (v4)
            {
              v5 = *(_BYTE *)(v4 + 45);
              if ((v5 & 4) != 0)
                continue;
            }
          }
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderGrid::computeAutoRepeatTracksCount(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  const WebCore::Length *v17;
  int v18;
  unsigned __int8 *v19;
  float v20;
  float v21;
  unsigned int v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned int v27;
  int v29;
  unsigned int v30;
  uint64_t v31;
  BOOL v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned int v37;
  BOOL v38;
  int v39;
  uint64_t v41;
  signed int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  signed int v52;
  int v53;
  int v54;
  signed int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned __int8 *v62;
  int v63;
  unsigned int v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  WebCore::RenderGrid *v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  _BOOL4 v89;
  int v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  char v98;
  char v99;

  if (!WebCore::RenderElement::establishesIndependentFormattingContext((WebCore::RenderElement *)a1))
  {
    v6 = *(_QWORD *)(a1 + 88);
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 80);
    if (a2)
    {
      if (!*(_BYTE *)(v7 + 258))
      {
LABEL_4:
        v8 = (uint64_t *)(v7 + 232);
        goto LABEL_5;
      }
    }
    else if (!*(_BYTE *)(v7 + 259))
    {
      goto LABEL_188;
    }
    v84 = *(_QWORD *)(a1 + 32);
    if (v84)
    {
      v85 = *(WebCore::RenderGrid **)(v84 + 8);
      if (v85)
      {
        if (*((_BYTE *)v85 + 46) == 12)
        {
          if (a2 == 1)
          {
            if ((WebCore::RenderGrid::areMasonryRows(v85) & 1) == 0)
              return 0;
            goto LABEL_4;
          }
          result = WebCore::RenderGrid::areMasonryColumns(v85);
          if (!(_DWORD)result)
            return result;
        }
      }
    }
  }
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 80);
  if (a2)
    goto LABEL_4;
LABEL_188:
  v8 = (uint64_t *)(v7 + 216);
LABEL_5:
  if (!*((_DWORD *)v8 + 3))
    return 0;
  v94 = *((unsigned int *)v8 + 3);
  v10 = BYTE4(a3);
  if (BYTE4(a3))
  {
    v89 = 0;
    v11 = *v8;
    v12 = v11 + 88 * v94;
    v95 = a3;
LABEL_10:
    LODWORD(v13) = 0;
    LODWORD(v14) = v95;
    v15 = 0x7FFFFFFF;
    v16 = (uint64_t)&WebCore::calculationValues(void)::map;
    goto LABEL_11;
  }
  v22 = ((*(_DWORD *)(a1 + 124) >> 13) & 6) - 2;
  v23 = *(unsigned __int8 **)(v6 + 8);
  v24 = v23 + 28;
  if (v22 >= 4)
    v25 = v23 + 44;
  else
    v25 = v23 + 28;
  if (v22 < 4)
    v24 = v23 + 44;
  if (a2)
    v26 = v25;
  else
    v26 = v24;
  v27 = v26[4];
  if (v27 <= 0xB && ((1 << v27) & 0x818) != 0)
  {
    if ((v27 & 0xFFFFFFF7) == 3)
    {
      if (a2)
      {
        v29 = WebCore::RenderBox::containingBlockLogicalHeightForContent((WebCore::RenderBox *)a1, 0);
        v30 = WebCore::valueForLength(v26, v29);
        v31 = 1;
LABEL_49:
        v92 = WebCore::RenderBlock::adjustContentBoxLogicalHeightForBoxSizing(a1, v30 | 0x100000000);
        v96 = v29;
        v16 = v31;
LABEL_50:
        v90 = 0;
        v23 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 88) + 8);
        v22 = ((*(_DWORD *)(a1 + 124) >> 13) & 6) - 2;
        v87 = v92 & 0xFFFFFF00;
        v88 = 1;
        goto LABEL_51;
      }
      v96 = WebCore::RenderBox::containingBlockLogicalWidthForContent((WebCore::RenderBox *)a1);
      v30 = WebCore::valueForLength(v26, v96);
      v16 = 1;
    }
    else
    {
      v30 = WebCore::valueForLength(v26, 0);
      v96 = 0;
      v16 = 0;
      v29 = 0;
      v31 = 0;
      if (a2)
        goto LABEL_49;
    }
    v92 = WebCore::RenderBox::adjustContentBoxLogicalWidthForBoxSizing((_QWORD *)a1, v30, v26[4]);
    goto LABEL_50;
  }
  v87 = 0;
  v88 = 0;
  LOBYTE(v92) = 0;
  v96 = 0;
  v16 = 0;
  v90 = 1;
LABEL_51:
  v32 = v22 >= 4;
  v33 = v23 + 20;
  v34 = v23 + 36;
  if (v32)
    v35 = v34;
  else
    v35 = v33;
  if (v32)
    v34 = v33;
  if (a2)
    v36 = v35;
  else
    v36 = v34;
  if (!a2)
    v34 = v35;
  v37 = v34[4];
  v38 = v37 > 0xB;
  v39 = (1 << v37) & 0x818;
  v15 = !v38 && v39 != 0 && !WebCore::RenderBox::shouldIgnoreAspectRatio((WebCore::RenderBox *)a1);
  v41 = WebCore::RenderGrid::explicitIntrinsicInnerLogicalSize((WebCore::RenderElement *)a1, a2);
  v42 = v41;
  v12 = BYTE4(v41);
  v43 = v36[4];
  if (((v88 | v15) & 1) == 0)
  {
    if (v43 <= 0xB && ((1 << v43) & 0x818) != 0)
    {
LABEL_70:
      if ((_DWORD)v16 || (v43 & 0xFFFFFFF7) != 3)
      {
        if ((_DWORD)v16)
          v46 = v96;
        else
          v46 = 0;
        v45 = WebCore::valueForLength(v36, v46);
        if (a2)
          goto LABEL_82;
      }
      else
      {
        if (a2)
        {
          v44 = WebCore::RenderBox::containingBlockLogicalHeightForContent((WebCore::RenderBox *)a1, 0);
          v45 = WebCore::valueForLength(v36, v44);
LABEL_82:
          v47 = WebCore::RenderBlock::adjustContentBoxLogicalHeightForBoxSizing(a1, v45 | 0x100000000);
LABEL_83:
          v48 = 0;
          v49 = v47 & 0xFFFFFF00;
          v10 = 1;
          goto LABEL_84;
        }
        v86 = WebCore::RenderBox::containingBlockLogicalWidthForContent((WebCore::RenderBox *)a1);
        v45 = WebCore::valueForLength(v36, v86);
      }
      v47 = WebCore::RenderBox::adjustContentBoxLogicalWidthForBoxSizing((_QWORD *)a1, v45, v36[4]);
      goto LABEL_83;
    }
    if (!BYTE4(v41))
      return v94;
  }
  if (v43 <= 0xB && ((1 << v43) & 0x818) != 0)
    goto LABEL_70;
  if (v15)
  {
    v47 = WebCore::RenderBox::computeMinMaxLogicalWidthFromAspectRatio((WebCore::RenderBox *)a1);
    goto LABEL_83;
  }
  v49 = 0;
  LOBYTE(v47) = 0;
  v10 = 0;
  v48 = 1;
LABEL_84:
  v50 = v26[4];
  v89 = v50 > 0xB || ((1 << v50) & 0x818) == 0 || (_DWORD)v12;
  v51 = v47 | v49;
  v95 = v51;
  if (v48)
    v52 = 0;
  else
    v52 = v51;
  v53 = v92 | v87;
  if (v90)
    v54 = 0;
  else
    v54 = v92 | v87;
  if ((_DWORD)v12)
    v55 = v42;
  else
    v55 = 0;
  if (v52 <= v54)
    v52 = v54;
  if (v52 <= v55)
    v52 = v55;
  if (v50 <= 0xB && ((1 << v50) & 0x818) != 0)
  {
    if ((v90 & 1) == 0)
    {
      if (v53 >= v52)
      {
        v10 = 1;
        v95 = v52;
      }
      else if ((v48 & 1) != 0 || (int)v95 < v53)
      {
        v95 = v92 | v87;
        v10 = v88;
      }
    }
  }
  else
  {
    v95 = v52;
    v10 = 1;
  }
  v56 = *((_DWORD *)v8 + 3);
  if (v56)
  {
    v11 = *v8;
    v12 = v11 + 88 * v56;
    goto LABEL_10;
  }
  LODWORD(v13) = 0;
  while (1)
  {
    if ((int)v13 <= 64)
      v57 = 64;
    else
      v57 = (int)v13;
    v93 = v57;
    v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 80);
    v59 = v58 + 120;
    v60 = 136;
    if (a2)
      v59 = v58 + 136;
    else
      v60 = 120;
    v91 = v59;
    v61 = *(_DWORD *)(v59 + 12);
    if (v61)
    {
      v12 = *(_QWORD *)(v58 + v60);
      v14 = v95;
      v16 = 88 * v61;
      v13 = (_DWORD *)(v12 + 48);
      v15 = 0x7FFFFFFF;
      v11 = v93;
      while (1)
      {
        v62 = *v13 || !*((_BYTE *)v13 - 12) || *((unsigned __int8 *)v13 - 12) - 7 <= 1
            ? (unsigned __int8 *)(v13 - 10)
            : (unsigned __int8 *)(v12 + 32);
        if (!(_DWORD)v10)
          goto LABEL_192;
        v63 = WebCore::valueForLength(v62, v95);
        if (__OFADD__((_DWORD)v11, v63))
          v11 = (v11 >> 31) + 0x7FFFFFFF;
        else
          v11 = (v11 + v63);
        v12 += 88;
        v13 += 22;
        v16 -= 88;
        if (!v16)
          goto LABEL_131;
      }
    }
    v14 = v95;
    v11 = v93;
LABEL_131:
    v64 = WebCore::RenderGrid::gridGap((WebCore::RenderElement *)a1, a2, v14 | a3 & 0xFFFFFF0000000000 | (v10 << 32));
    v65 = ((*(unsigned int *)(v91 + 12) + v94) << 6) - 64;
    if (v65 >= 0x7FFFFFFF)
      v65 = 0x7FFFFFFFLL;
    v66 = (int)v64;
    v67 = (uint64_t)(v65 * (int)v64) / 64;
    if (HIDWORD(v67) != (int)v67 >> 31)
      LODWORD(v67) = (v64 >> 31) + 0x7FFFFFFF;
    v68 = __OFADD__((_DWORD)v11, (_DWORD)v67);
    v69 = v11 + v67;
    if (v68)
      v69 = (v11 >> 31) + 0x7FFFFFFF;
    if ((_DWORD)v10)
      break;
LABEL_192:
    std::__throw_bad_optional_access[abi:sn180100]();
LABEL_193:
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
LABEL_191:
    WebCore::CalculationValueMap::deref((int *)v16, (void *)v97);
    while (1)
    {
      v11 += 88;
      if (v11 == v12)
        break;
LABEL_11:
      if (*(_DWORD *)(v11 + 48) || !*(_BYTE *)(v11 + 36) || *(unsigned __int8 *)(v11 + 36) - 7 <= 1)
        v17 = (const WebCore::Length *)(v11 + 8);
      else
        v17 = (const WebCore::Length *)(v11 + 32);
      WebCore::Length::Length((WebCore::Length *)&v97, v17);
      if (!*(_DWORD *)(v11 + 24) && *(_BYTE *)(v11 + 12) && *(unsigned __int8 *)(v11 + 12) - 7 >= 2)
      {
        v19 = (unsigned __int8 *)(v11 + 8);
        v20 = *(float *)&v97;
        if (!v99)
          v20 = (float)(int)v97;
        if (*(_BYTE *)(v11 + 14))
          v21 = *(float *)v19;
        else
          v21 = (float)*(int *)v19;
        if (v20 < v21)
          WebCore::Length::operator=((WebCore::Length *)&v97, v19);
      }
      if (!(_DWORD)v10)
        goto LABEL_192;
      v18 = WebCore::valueForLength((unsigned __int8 *)&v97, v14);
      if (__OFADD__((_DWORD)v13, v18))
        LODWORD(v13) = v15 + (v13 >> 31);
      else
        LODWORD(v13) = (_DWORD)v13 + v18;
      if (v98 == 11)
      {
          goto LABEL_193;
        goto LABEL_191;
      }
    }
  }
  v68 = __OFSUB__(v95, v69);
  v70 = v95 - v69;
  if (v68)
    v70 = (v95 >> 31) + 0x7FFFFFFF;
  result = v94;
  if (v70 >= 1)
  {
    LODWORD(v71) = (_DWORD)v94 << 6;
    if (v94 <= 0x1FFFFFE)
      v71 = v71;
    else
      v71 = 0x7FFFFFFFLL;
    v72 = v66 * v71 / 64;
    v73 = (v66 >> 31) + 0x7FFFFFFF;
    if (HIDWORD(v72) == (int)v72 >> 31)
      v73 = v72;
    v68 = __OFADD__(v93, v73);
    v74 = v93 + v73;
    if (v68)
      v74 = 0x7FFFFFFF;
    v75 = (uint64_t)((unint64_t)v70 << 6) / v74;
    if (v75 <= (uint64_t)0xFFFFFFFF80000000)
      v75 = 0xFFFFFFFF80000000;
    if (v75 >= 0x7FFFFFFF)
      LODWORD(v75) = 0x7FFFFFFF;
    v76 = (int)v75 / 64;
    v77 = (int)v75 / 64 + 1;
    v78 = (v75 + ((int)v75 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
    if (v76 <= 0x1FFFFFE)
      v79 = v78;
    else
      v79 = 0x7FFFFFFFLL;
    v80 = v79 * v74 / 64;
    v81 = (v74 >> 31) + 0x7FFFFFFF;
    if (HIDWORD(v80) == (int)v80 >> 31)
      v81 = v80;
    if (v70 == v81)
      v82 = v77;
    else
      v82 = v76 + 2;
    if (__OFSUB__(v70, v81))
      v83 = v76 + 2;
    else
      v83 = v82;
    if (!v89)
      v83 = v77;
    return (v83 * v94);
  }
  return result;
}

uint64_t WebCore::RenderGrid::computeEmptyTracksForAutoRepeat(uint64_t result, WebCore::RenderElement *this, int a3)
{
  WTF **v5;
  uint64_t v6;
  WebCore::RenderElement *v7;
  WebCore::RenderElement *v8;
  uint64_t v9;
  BOOL v10;
  int *v11;
  int v12;
  WebCore::RenderElement *v13;
  WebCore::RenderElement *v14;
  uint64_t v15;
  WebCore::RenderElement *v16;
  WebCore::RenderElement *v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  WTF *v30;
  uint64_t *v31;
  void *v32;
  uint64_t *v33;
  void *v34;
  WTF *v35;
  uint64_t *v36[3];
  uint64_t *v37;
  uint64_t *v38;
  char v39;
  int v40;
  int v41;
  int v42;

  v5 = (WTF **)result;
  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 80);
  if (a3)
  {
    v12 = *(unsigned __int8 *)(v6 + 257);
    v13 = this;
    do
    {
      v14 = v13;
      v15 = *((_QWORD *)v13 + 4);
      if (!v15)
        break;
      v13 = *(WebCore::RenderElement **)(v15 + 8);
      if (!v13)
        break;
    }
    while (*((_BYTE *)v13 + 46) == 12
         && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v14 + 11) + 40) + 80) + 259));
    v16 = v14;
    do
    {
      v17 = v16;
      v18 = *((_QWORD *)v16 + 4);
      if (!v18)
        break;
      v16 = *(WebCore::RenderElement **)(v18 + 8);
      if (!v16)
        break;
    }
    while (*((_BYTE *)v16 + 46) == 12
         && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v17 + 11) + 40) + 80) + 258));
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v17 + 11) + 40) + 80) + 260))
    {
      if (v12 != 2)
      {
LABEL_28:
        *(_QWORD *)result = 0;
        return result;
      }
    }
    else
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v14 + 11) + 40) + 80) + 261))
        v19 = 0;
      else
        v19 = v12 == 2;
      if (!v19)
        goto LABEL_28;
    }
    *(_QWORD *)result = 0;
    v11 = (int *)(v6 + 252);
  }
  else
  {
    v7 = this;
    do
    {
      v8 = v7;
      v9 = *((_QWORD *)v7 + 4);
      if (!v9)
        break;
      v7 = *(WebCore::RenderElement **)(v9 + 8);
      if (!v7)
        break;
    }
    while (*((_BYTE *)v7 + 46) == 12
         && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 11) + 40) + 80) + 258));
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 11) + 40) + 80) + 260))
      v10 = 0;
    else
      v10 = *(_BYTE *)(v6 + 256) == 2;
    if (!v10)
      goto LABEL_28;
    *(_QWORD *)result = 0;
    v11 = (int *)(v6 + 248);
  }
  v20 = *v11;
  v21 = *((_QWORD *)this + 41);
  v22 = 56;
  if (a3 == 1)
    v22 = 60;
  v23 = (uint64_t *)(*(_DWORD *)(v21 + v22) + v20);
  v24 = 64;
  if (a3 == 1)
    v24 = 68;
  v25 = *(_DWORD *)(v21 + v24);
  v26 = v25 + (_DWORD)v23;
  v27 = *(_QWORD *)(v21 + 104);
  if (v27 && *(_DWORD *)(v27 - 12))
  {
    if (a3)
    {
      result = WebCore::RenderElement::shouldApplySizeContainment(this);
      if (!(_DWORD)result)
      {
LABEL_43:
        if (v23 < v26)
        {
          do
          {
            v38 = (uint64_t *)*((_QWORD *)this + 41);
            v39 = a3;
            if (a3)
              v28 = (int)v23;
            else
              v28 = 0;
            if (a3)
              v29 = 0;
            else
              v29 = (int)v23;
            v40 = v28;
            v41 = v29;
            v42 = 0;
            result = WebCore::GridIterator::nextGridItem((WebCore::GridIterator *)&v38);
            if (!result)
            {
              v30 = *v5;
              if (!*v5)
              {
                v31 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
                v31[1] = 0;
                v31[2] = 0;
                *v31 = 0;
                v36[0] = v31;
                std::unique_ptr<WTF::ListHashSet<unsigned long,WTF::DefaultHash<unsigned long>>>::operator=[abi:sn180100](v5, (WTF **)v36);
                std::unique_ptr<WTF::ListHashSet<unsigned long,WTF::DefaultHash<unsigned long>>>::~unique_ptr[abi:sn180100]((WTF **)v36, v32);
                v30 = *v5;
              }
              v37 = v23;
              result = (uint64_t)WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::add(v36, (uint64_t *)v30, &v37);
            }
            v23 = (uint64_t *)((char *)v23 + 1);
            --v25;
          }
          while (v25);
        }
        return result;
      }
    }
    else
    {
      result = WebCore::RenderElement::shouldApplySizeOrInlineSizeContainment(this);
      if ((result & 1) == 0)
        goto LABEL_43;
    }
    result = WebCore::RenderGrid::explicitIntrinsicInnerLogicalSize(this, a3);
    if ((result & 0xFF00000000) != 0)
      goto LABEL_43;
  }
  v33 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
  v33[1] = 0;
  v33[2] = 0;
  *v33 = 0;
  v38 = v33;
  std::unique_ptr<WTF::ListHashSet<unsigned long,WTF::DefaultHash<unsigned long>>>::operator=[abi:sn180100](v5, (WTF **)&v38);
  result = (uint64_t)std::unique_ptr<WTF::ListHashSet<unsigned long,WTF::DefaultHash<unsigned long>>>::~unique_ptr[abi:sn180100]((WTF **)&v38, v34);
  if (v23 < v26)
  {
    do
    {
      v35 = *v5;
      v36[0] = v23;
      result = (uint64_t)WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::add(&v38, (uint64_t *)v35, v36);
      v23 = (uint64_t *)((char *)v23 + 1);
      --v25;
    }
    while (v25);
  }
  return result;
}

WTF **std::unique_ptr<WTF::ListHashSet<unsigned long,WTF::DefaultHash<unsigned long>>>::operator=[abi:sn180100](WTF **a1, WTF **a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    v5 = (WTF *)*((_QWORD *)v4 + 1);
    if (v5)
    {
      do
      {
        v6 = (WTF *)*((_QWORD *)v5 + 2);
        WTF::fastFree(v5, a2);
        v5 = v6;
      }
      while (v6);
    }
    if (*(_QWORD *)v4)
      WTF::fastFree((WTF *)(*(_QWORD *)v4 - 16), a2);
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF **std::unique_ptr<WTF::ListHashSet<unsigned long,WTF::DefaultHash<unsigned long>>>::~unique_ptr[abi:sn180100](WTF **a1, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = (WTF *)*((_QWORD *)v3 + 1);
    if (v4)
    {
      do
      {
        v5 = (WTF *)*((_QWORD *)v4 + 2);
        WTF::fastFree(v4, a2);
        v4 = v5;
      }
      while (v5);
    }
    if (*(_QWORD *)v3)
      WTF::fastFree((WTF *)(*(_QWORD *)v3 - 16), a2);
    WTF::fastFree(v3, a2);
  }
  return a1;
}

uint64_t WebCore::RenderGrid::placeItems(WebCore::RenderGrid *this)
{
  char v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v11;
  _QWORD v12[2];
  uint64_t v13;

  v12[0] = 0;
  v12[1] = 0;
  v13 = 0;
  WebCore::RenderBox::computeLogicalWidthInFragment(this, (int *)v12, 0);
  v2 = *((_DWORD *)this + 31) >> 13;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
  {
    *((_DWORD *)this + 41) = v12[0];
    *((_DWORD *)this + 39) = HIDWORD(v12[0]);
  }
  else
  {
    *((_DWORD *)this + 40) = v12[0];
    *((_DWORD *)this + 38) = HIDWORD(v12[0]);
  }
  v3 = v2 & 7;
  v4 = *((_DWORD *)this + 30);
  v5 = (v4 >> 26) & 1;
  v6 = v5;
  if ((v3 - 2) >= 2)
  {
    if (v3 == 4)
    {
      v6 = (v4 & 0x4000000) == 0;
    }
    else
    {
      v6 = (v4 >> 26) & 1;
      if (v3 != 5)
      {
        if ((v4 & 0x4000000) != 0)
          v7 = 1;
        else
          v7 = 3;
        goto LABEL_9;
      }
    }
  }
  if (v6)
    v7 = 2;
  else
    v7 = 0;
LABEL_9:
  *((_DWORD *)this + v7 + 42) = v13;
  if ((v3 - 2) >= 2)
  {
    if (v3 == 4)
    {
      v5 = (v4 & 0x4000000) == 0;
    }
    else if (v3 != 5)
    {
      v8 = 3;
      if ((v4 & 0x4000000) == 0)
        v8 = 1;
      goto LABEL_14;
    }
  }
  v11 = v5 == 0;
  v8 = 2;
  if (!v11)
    v8 = 0;
LABEL_14:
  *((_DWORD *)this + v8 + 42) = HIDWORD(v13);
  v9 = WebCore::RenderBox::contentLogicalWidth(this);
  return WebCore::RenderGrid::placeItemsOnGrid(this, v9 | 0x100000000);
}

uint64_t WebCore::RenderGrid::isMasonry(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;

  v2 = a1;
  do
  {
    v3 = v2;
    v4 = *(_QWORD *)(v2 + 32);
    if (!v4)
      break;
    v2 = *(_QWORD *)(v4 + 8);
    if (!v2)
      break;
  }
  while (*(_BYTE *)(v2 + 46) == 12 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 40) + 80) + 258));
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 40) + 80) + 260))
    v5 = a2 == 1;
  else
    v5 = 0;
  if (v5)
    return 1;
  do
  {
    v6 = a1;
    v7 = *(_QWORD *)(a1 + 32);
    if (!v7)
      break;
    a1 = *(_QWORD *)(v7 + 8);
    if (!a1)
      break;
  }
  while (*(_BYTE *)(a1 + 46) == 12 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 88) + 40) + 80) + 259));
  v8 = v6;
  do
  {
    v9 = v8;
    v10 = *(_QWORD *)(v8 + 32);
    if (!v10)
      break;
    v8 = *(_QWORD *)(v10 + 8);
    if (!v8)
      break;
  }
  while (*(_BYTE *)(v8 + 46) == 12 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 88) + 40) + 80) + 258));
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 88) + 40) + 80) + 260)
    && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 88) + 40) + 80) + 261) ? (v11 = a2 == 0) : (v11 = 0),
        v11))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

WebCore::RenderGrid *WebCore::RenderGrid::isSubgridInParentDirection(WebCore::RenderElement *this, _BOOL4 a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v4;
  uint64_t v6;
  WebCore::RenderGrid *result;
  uint64_t v8;
  int v9;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3 || *(_BYTE *)(v3 + 46) != 12)
    return 0;
  v4 = a2;
  if (((*((_BYTE *)this + 21) & 0x10) == 0) != ((*(_BYTE *)(v3 + 21) & 0x10) == 0))
    v4 = !a2;
  if (WebCore::RenderElement::establishesIndependentFormattingContext(this))
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 80);
  if (v4)
  {
    if (!*(_BYTE *)(v6 + 258))
      return 0;
  }
  else if (!*(_BYTE *)(v6 + 259))
  {
    return 0;
  }
  v8 = *((_QWORD *)this + 4);
  if (!v8)
    return 0;
  result = *(WebCore::RenderGrid **)(v8 + 8);
  if (result)
  {
    if (*((_BYTE *)result + 46) != 12)
      return 0;
    if (v4)
      v9 = WebCore::RenderGrid::areMasonryRows(result);
    else
      v9 = WebCore::RenderGrid::areMasonryColumns(result);
    return (WebCore::RenderGrid *)(v9 ^ 1u);
  }
  return result;
}

BOOL WebCore::RenderGrid::populateExplicitGridAndOrderIterator(WebCore::RenderGrid *this)
{
  uint64_t v2;
  uint64_t *v3;
  const WebCore::RenderGrid *v4;
  int v5;
  const WebCore::RenderGrid *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  WebCore::Grid *v12;
  uint64_t v13;
  _BOOL8 result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  int v26;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  WebCore::RenderGrid *v49;
  uint64_t v50;
  WebCore::RenderGrid *v51;
  _QWORD **v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;

  v2 = *((_QWORD *)this + 41);
  v3 = (uint64_t *)(v2 + 24);
  std::__tree<int,std::less<int>,WTF::FastAllocator<int>>::destroy(v2 + 16, *(WTF **)(v2 + 24));
  *(_QWORD *)(v2 + 16) = v2 + 24;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  v5 = WebCore::GridPositionsResolver::explicitGridRowCount(this, v4);
  v7 = WebCore::GridPositionsResolver::explicitGridColumnCount(this, v6);
  v8 = *((unsigned int *)this + 16);
  if (v8 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)
    && (v9 = *(_QWORD *)((v8 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8)) != 0
    && (*(_BYTE *)(v9 + 45) & 4) != 0)
  {
    v52 = (_QWORD **)(v2 + 16);
    v11 = 0;
    v10 = 0;
    do
    {
      v54 = v11;
      v22 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 88) + 32) + 144);
      v23 = *v3;
      v24 = (uint64_t *)(v2 + 24);
      v25 = (uint64_t *)(v2 + 24);
      if (*v3)
      {
        do
        {
          while (1)
          {
            v25 = (uint64_t *)v23;
            v26 = *(_DWORD *)(v23 + 28);
            if (v22 >= v26)
              break;
            v23 = *v25;
            v24 = v25;
            if (!*v25)
              goto LABEL_64;
          }
          if (v26 >= v22)
            goto LABEL_30;
          v23 = v25[1];
        }
        while (v23);
        v24 = v25 + 1;
      }
LABEL_64:
      v44 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(v44 + 28) = v22;
      *(_QWORD *)v44 = 0;
      *(_QWORD *)(v44 + 8) = 0;
      *(_QWORD *)(v44 + 16) = v25;
      *v24 = v44;
      v45 = (_QWORD *)**v52;
      if (v45)
      {
        *v52 = v45;
        v46 = *v24;
      }
      else
      {
        v46 = v44;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(_QWORD *)(v2 + 24), v46);
      ++*(_QWORD *)(v2 + 32);
LABEL_30:
      if ((*(_DWORD *)(v9 + 20) & 0x1800000) != 0x1000000 && (*(_DWORD *)(v9 + 20) & 0x400) == 0)
      {
        v28 = WebCore::GridPositionsResolver::resolveGridPositionsFromStyle(this, (WebCore::RenderElement *)v9, (WTF::StringImpl *)1);
        v30 = v29;
        v53 = v28;
        if (WebCore::RenderElement::establishesIndependentFormattingContext(this)
          || !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 80) + 258)
          || (v50 = *((_QWORD *)this + 4)) == 0
          || (v51 = *(WebCore::RenderGrid **)(v50 + 8)) == 0
          || *((_BYTE *)v51 + 46) != 12
          || WebCore::RenderGrid::areMasonryRows(v51))
        {
          if (v30 == 2)
          {
            v31 = WebCore::GridPositionsResolver::spanSizeForAutoPlacedItem((WebCore::RenderElement *)v9, (WTF::StringImpl *)1);
            if (v5 <= v31)
              v5 = v31;
          }
          else
          {
            v47 = v54;
            if (v54 <= -(int)v28)
              v47 = -(int)v28;
            v54 = v47;
            if (v5 <= SHIDWORD(v28))
              v5 = HIDWORD(v28);
          }
        }
        v32 = WebCore::GridPositionsResolver::resolveGridPositionsFromStyle(this, (WebCore::RenderElement *)v9, 0);
        v34 = v33;
        if (WebCore::RenderElement::establishesIndependentFormattingContext(this))
          goto LABEL_56;
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 80) + 259))
          goto LABEL_56;
        v35 = *((_QWORD *)this + 4);
        if (!v35)
          goto LABEL_56;
        v36 = *(_QWORD *)(v35 + 8);
        if (!v36 || *(_BYTE *)(v36 + 46) != 12)
          goto LABEL_56;
        do
        {
          v37 = v36;
          v38 = *(_QWORD *)(v36 + 32);
          if (!v38)
            break;
          v36 = *(_QWORD *)(v38 + 8);
          if (!v36)
            break;
        }
        while (*(_BYTE *)(v36 + 46) == 12
             && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 88) + 40) + 80) + 259));
        v39 = v37;
        do
        {
          v40 = v39;
          v41 = *(_QWORD *)(v39 + 32);
          if (!v41)
            break;
          v39 = *(_QWORD *)(v41 + 8);
          if (!v39)
            break;
        }
        while (*(_BYTE *)(v39 + 46) == 12
             && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 88) + 40) + 80) + 258));
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 88) + 40) + 80) + 260)
          && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 88) + 40) + 80) + 261))
        {
LABEL_56:
          if (v34 == 2)
          {
            v42 = WebCore::GridPositionsResolver::spanSizeForAutoPlacedItem((WebCore::RenderElement *)v9, 0);
            if (v7 <= v42)
              v7 = v42;
          }
          else
          {
            if (v10 <= -(int)v32)
              v10 = -(int)v32;
            if (v7 <= SHIDWORD(v32))
              v7 = HIDWORD(v32);
          }
        }
        v43 = *((_QWORD *)this + 41);
        v55 = v32;
        v56 = v34;
        v57 = v53;
        v58 = v30;
        WebCore::Grid::setGridItemArea(v43, v9, (__int128 *)&v55);
      }
      v11 = v54;
      if (!(*(unsigned int *)(v9 + 47) | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32)))
        break;
      v9 = *(_QWORD *)((*(unsigned int *)(v9 + 47) | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32)) + 8);
      if (!v9)
        break;
    }
    while ((*(_BYTE *)(v9 + 45) & 4) != 0);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = (WebCore::Grid *)*((_QWORD *)this + 41);
  *((_DWORD *)v12 + 14) = v10;
  *((_DWORD *)v12 + 15) = v11;
  WebCore::Grid::ensureGridSize(v12, v11 + v5, v10 + v7);
  v13 = *((_QWORD *)this + 41);
  if (!WebCore::RenderElement::establishesIndependentFormattingContext(this)
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 80) + 258)
    && (v48 = *((_QWORD *)this + 4)) != 0
    && (v49 = *(WebCore::RenderGrid **)(v48 + 8)) != 0
    && *((_BYTE *)v49 + 46) == 12)
  {
    if (WebCore::RenderGrid::areMasonryRows(v49))
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  result = WebCore::RenderElement::establishesIndependentFormattingContext(this);
  if (result)
    goto LABEL_24;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 80) + 259))
    goto LABEL_24;
  v15 = *((_QWORD *)this + 4);
  if (!v15)
    goto LABEL_24;
  v16 = *(_QWORD *)(v15 + 8);
  if (!v16 || *(_BYTE *)(v16 + 46) != 12)
    goto LABEL_24;
  do
  {
    v17 = v16;
    v18 = *(_QWORD *)(v16 + 32);
    if (!v18)
      break;
    v16 = *(_QWORD *)(v18 + 8);
    if (!v16)
      break;
  }
  while (*(_BYTE *)(v16 + 46) == 12
       && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 88) + 40) + 80) + 259));
  v19 = v17;
  do
  {
    v20 = v19;
    v21 = *(_QWORD *)(v19 + 32);
    if (!v21)
      break;
    v19 = *(_QWORD *)(v21 + 8);
    if (!v19)
      break;
  }
  while (*(_BYTE *)(v19 + 46) == 12
       && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 88) + 40) + 80) + 258));
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 88) + 40) + 80) + 260)
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 88) + 40) + 80) + 261))
  {
LABEL_24:
    v7 = 0;
  }
  *(_DWORD *)(v13 + 72) = v7;
  *(_DWORD *)(v13 + 76) = v5;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 40) = *(_QWORD *)(v2 + 16);
  *(_BYTE *)(v2 + 48) = 1;
  return result;
}

BOOL WebCore::RenderGrid::autoPlacementMajorAxisDirection(WebCore::RenderGrid *this)
{
  WebCore::RenderGrid *v1;
  WebCore::RenderGrid *v2;
  uint64_t v3;
  WebCore::RenderGrid *v4;
  WebCore::RenderGrid *v5;
  uint64_t v6;
  WebCore::RenderGrid *v7;
  WebCore::RenderGrid *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v1 = this;
  do
  {
    v2 = v1;
    v3 = *((_QWORD *)v1 + 4);
    if (!v3)
      break;
    v1 = *(WebCore::RenderGrid **)(v3 + 8);
    if (!v1)
      break;
  }
  while (*((_BYTE *)v1 + 46) == 12 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 40) + 80) + 259));
  v4 = v2;
  do
  {
    v5 = v4;
    v6 = *((_QWORD *)v4 + 4);
    if (!v6)
      break;
    v4 = *(WebCore::RenderGrid **)(v6 + 8);
    if (!v4)
      break;
  }
  while (*((_BYTE *)v4 + 46) == 12 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 11) + 40) + 80) + 258));
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 11) + 40) + 80) + 260)
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 40) + 80) + 261))
  {
    return 0;
  }
  v7 = this;
  do
  {
    v8 = v7;
    v9 = *((_QWORD *)v7 + 4);
    if (!v9)
      break;
    v7 = *(WebCore::RenderGrid **)(v9 + 8);
    if (!v7)
      break;
  }
  while (*((_BYTE *)v7 + 46) == 12 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 11) + 40) + 80) + 258));
  v10 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 11) + 40) + 80) + 260);
  v11 = 1;
  if (!v10)
    return ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 80) + 24) >> 3) & 1) == 0;
  return v11;
}

WTF *WebCore::insertIntoGrid(unsigned int *a1, WebCore::Grid *this, uint64_t a3, uint64_t a4)
{
  WTF *result;
  int v6;
  WebCore::RenderGrid *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  WebCore::RenderGrid *v17;

  result = WebCore::Grid::insert(this, (_QWORD *)a3, a4, a1);
  v6 = *(unsigned __int8 *)(a3 + 46);
  if (v6 == 12)
    v7 = (WebCore::RenderGrid *)a3;
  else
    v7 = 0;
  if (v6 == 12)
  {
    ++*(_DWORD *)(a3 + 16);
    if (!WebCore::RenderElement::establishesIndependentFormattingContext((WebCore::RenderElement *)a3))
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 88) + 40) + 80) + 258))
      {
        v16 = *(_QWORD *)(a3 + 32);
        if (v16)
        {
          v17 = *(WebCore::RenderGrid **)(v16 + 8);
          if (v17)
          {
            if (*((_BYTE *)v17 + 46) == 12 && !WebCore::RenderGrid::areMasonryRows(v17))
              goto LABEL_31;
          }
        }
      }
    }
    result = (WTF *)WebCore::RenderElement::establishesIndependentFormattingContext((WebCore::RenderElement *)a3);
    if ((result & 1) == 0)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 88) + 40) + 80) + 259))
      {
        v8 = *(_QWORD *)(a3 + 32);
        if (v8)
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (v9)
          {
            if (*(_BYTE *)(v9 + 46) == 12)
            {
              do
              {
                v10 = v9;
                v11 = *(_QWORD *)(v9 + 32);
                if (!v11)
                  break;
                v9 = *(_QWORD *)(v11 + 8);
                if (!v9)
                  break;
              }
              while (*(_BYTE *)(v9 + 46) == 12
                   && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 40) + 80) + 259));
              v12 = v10;
              do
              {
                v13 = v12;
                v14 = *(_QWORD *)(v12 + 32);
                if (!v14)
                  break;
                v12 = *(_QWORD *)(v14 + 8);
                if (!v12)
                  break;
              }
              while (*(_BYTE *)(v12 + 46) == 12
                   && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 88) + 40) + 80) + 258));
              if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 88) + 40) + 80) + 260)
                || !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 40) + 80) + 261))
              {
LABEL_31:
                result = (WTF *)WebCore::RenderGrid::placeItems(v7);
              }
            }
          }
        }
      }
    }
    v15 = *(_DWORD *)(a3 + 16);
    if (!v15)
    {
      __break(0xC471u);
      JUMPOUT(0x1963CEA04);
    }
    *(_DWORD *)(a3 + 16) = v15 - 1;
  }
  return result;
}

uint64_t WebCore::RenderGrid::masonryContentSize(WebCore::RenderGrid *this)
{
  return *((unsigned int *)this + 173);
}

WTF *WebCore::RenderGrid::updateGridAreaLogicalSize(uint64_t a1, WebCore::RenderBox *this, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  char v9;
  char v10;
  char v11;
  unint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v8 = WebCore::RenderBox::overridingContainingBlockContentLogicalWidth(this);
  if (!v9)
  {
    v12 = WebCore::RenderBox::overridingContainingBlockContentLogicalHeight(this);
    if (!v19)
      goto LABEL_28;
    v11 = 1;
    goto LABEL_9;
  }
  if ((v8 & 0xFF00000000) != 0)
    v10 = (_DWORD)v8 != (_DWORD)a3;
  else
    v10 = ((a3 & 0xFF00000000) != 0) ^ ((v8 & 0xFF00000000) != 0);
  if ((a3 & 0xFF00000000) != 0)
    v11 = v10;
  else
    v11 = ((a3 & 0xFF00000000) != 0) ^ ((v8 & 0xFF00000000) != 0);
  v12 = WebCore::RenderBox::overridingContainingBlockContentLogicalHeight(this);
  if (v13)
  {
LABEL_9:
    if ((v12 & 0xFF00000000) != 0)
      v14 = v12 != a4;
    else
      v14 = ((a4 & 0xFF00000000) != 0) ^ ((v12 & 0xFF00000000) != 0);
    if ((a4 & 0xFF00000000) == 0)
      v14 = ((a4 & 0xFF00000000) != 0) ^ ((v12 & 0xFF00000000) != 0);
    if ((v11 & 1) != 0)
      goto LABEL_28;
    if (!v14)
      goto LABEL_18;
    goto LABEL_16;
  }
  if ((v11 & 1) != 0)
    goto LABEL_28;
LABEL_16:
  v15 = *(_QWORD *)this;
  if (((*((_BYTE *)this + 21) & 0x10) == 0) == ((*(_BYTE *)(a1 + 21) & 0x10) == 0))
  {
    if (((*(uint64_t (**)(WebCore::RenderBox *))(v15 + 1544))(this) & 1) == 0)
      goto LABEL_18;
    goto LABEL_28;
  }
  if (((*(uint64_t (**)(WebCore::RenderBox *))(v15 + 1552))(this) & 1) != 0)
    goto LABEL_28;
  v23 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v24 = v23 + 12;
  v25 = v23 + 4;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v24 = v25;
  if (!*(_BYTE *)(v24 + 4))
  {
LABEL_28:
    v20 = *((_DWORD *)this + 5);
    if ((v20 & 8) == 0)
    {
      *((_DWORD *)this + 5) = v20 | 8;
      if ((v20 & 0x8000) != 0)
      {
        if ((*((_BYTE *)this + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1963CEC30);
        }
        v21 = *((_QWORD *)this + 18);
        if (v21)
        {
          v22 = *(_DWORD *)(v21 + 8) + 1;
          *(_DWORD *)(v21 + 8) = v22;
        }
        else
        {
          v22 = MEMORY[8];
        }
        *(_QWORD *)(v21 + 24) = *(_QWORD *)(v21 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
        if (!v22)
        {
          __break(0xC471u);
          JUMPOUT(0x1963CEC5CLL);
        }
        *(_DWORD *)(v21 + 8) = v22 - 1;
      }
    }
  }
LABEL_18:
  v26 = a3;
  v16 = (_QWORD *)WebCore::gOverridingContainingBlockContentLogicalWidthMap;
  if (!WebCore::gOverridingContainingBlockContentLogicalWidthMap)
  {
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v16 = 0;
    v16[1] = 0;
    WebCore::gOverridingContainingBlockContentLogicalWidthMap = (uint64_t)v16;
  }
  WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,std::optional<WebCore::LayoutUnit>&>((uint64_t)v16, this, (int *)&v26);
  v26 = a4;
  v17 = (_QWORD *)WebCore::gOverridingContainingBlockContentLogicalHeightMap;
  if (!WebCore::gOverridingContainingBlockContentLogicalHeightMap)
  {
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v17 = 0;
    v17[1] = 0;
    WebCore::gOverridingContainingBlockContentLogicalHeightMap = (uint64_t)v17;
  }
  return WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,std::optional<WebCore::LayoutUnit>&>((uint64_t)v17, this, (int *)&v26);
}

BOOL WebCore::RenderGrid::isBaselineAlignmentForChild(WebCore::RenderGrid *this, const WebCore::RenderBox *a2)
{
  int v4;
  char v5;
  uint64_t v6;
  char v7;
  unsigned int v8;
  int v9;
  _BYTE *v10;
  _BYTE *v11;

  if ((*((_DWORD *)a2 + 5) & 0x1800000) == 0x1000000)
    return WebCore::RenderGrid::isBaselineAlignmentForChild((uint64_t)this, a2);
  v4 = *((unsigned __int8 *)a2 + 46);
  if (v4 == 12)
  {
    ++*((_DWORD *)a2 + 4);
    if ((WebCore::RenderGrid::isSubgridInParentDirection(a2, 0) & 1) != 0)
    {
      v5 = 3;
LABEL_12:
      v9 = *((_DWORD *)a2 + 4);
      if (!v9)
      {
        __break(0xC471u);
        JUMPOUT(0x1963CEDACLL);
      }
      *((_DWORD *)a2 + 4) = v9 - 1;
      v6 = *((_QWORD *)a2 + 11);
      goto LABEL_14;
    }
  }
  if ((*((_BYTE *)a2 + 52) & 7) == 3)
    v5 = 7;
  else
    v5 = 3;
  v6 = *((_QWORD *)a2 + 11);
  v7 = *(_BYTE *)(*(_QWORD *)(v6 + 32) + 127);
  v8 = v7 & 0xF;
  if (v8 == 1)
  {
    v7 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 126);
    v8 = v7 & 0xF;
  }
  if (v8 >= 3)
    v5 = v7;
  if (v4 == 12)
    goto LABEL_12;
LABEL_14:
  v10 = *(_BYTE **)(v6 + 24);
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
  {
    if (v10[44])
    {
      v11 = v10 + 60;
      goto LABEL_17;
    }
    return WebCore::RenderGrid::isBaselineAlignmentForChild((uint64_t)this, a2);
  }
  if (!v10[68])
    return WebCore::RenderGrid::isBaselineAlignmentForChild((uint64_t)this, a2);
  v11 = v10 + 52;
LABEL_17:
  if ((v5 & 0xE) != 4 || !*v11)
    return WebCore::RenderGrid::isBaselineAlignmentForChild((uint64_t)this, a2);
  return 1;
}

BOOL WebCore::RenderGrid::isSubgridColumns(WebCore::RenderGrid *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (WebCore::RenderElement::establishesIndependentFormattingContext(this))
    return 0;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 80) + 259))
    return 0;
  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3 || *(_BYTE *)(v3 + 46) != 12)
    return 0;
  do
  {
    v4 = v3;
    v5 = *(_QWORD *)(v3 + 32);
    if (!v5)
      break;
    v3 = *(_QWORD *)(v5 + 8);
    if (!v3)
      break;
  }
  while (*(_BYTE *)(v3 + 46) == 12 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 40) + 80) + 259));
  v6 = v4;
  do
  {
    v7 = v6;
    v8 = *(_QWORD *)(v6 + 32);
    if (!v8)
      break;
    v6 = *(_QWORD *)(v8 + 8);
    if (!v6)
      break;
  }
  while (*(_BYTE *)(v6 + 46) == 12 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 40) + 80) + 258));
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 40) + 80) + 260)
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 40) + 80) + 261) == 0;
}

uint64_t WebCore::RenderGrid::createEmptyGridAreaAtSpecifiedPositionsOutsideGrid(uint64_t a1, uint64_t a2, WebCore::RenderElement *a3, int a4, uint64_t *a5)
{
  uint64_t *v5;
  int v7;
  uint64_t *v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;

  v5 = a5;
  v7 = *(_DWORD *)(a2 + 100);
  if (a4)
  {
    if (v7)
      v7 = *(_DWORD *)(*(_QWORD *)(a2 + 88) + 12);
    v8 = &v15;
  }
  else
  {
    v8 = a5;
    v5 = &v15;
  }
  result = WebCore::GridPositionsResolver::spanSizeForAutoPlacedItem(a3, (WTF::StringImpl *)(a4 == 0));
  LODWORD(v10) = result + v7;
  v11 = WebCore::GridPosition::gMaxPositionForTesting;
  if (!byte_1EE2F9580)
    v11 = 1000000;
  v12 = v11 - 1;
  if (v11 - 1 >= v7)
    v12 = v7;
  if (-v11 > v12)
    v13 = -v11;
  else
    v13 = v12;
  v14 = 1 - v11;
  if (v11 < (int)v10)
    LODWORD(v10) = v11;
  if (v14 <= (int)v10)
    v10 = v10;
  else
    v10 = v14;
  v15 = v13 | (v10 << 32);
  v16 = 1;
  *(_QWORD *)a1 = *v8;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)v8 + 2);
  *(_QWORD *)(a1 + 12) = *v5;
  *(_DWORD *)(a1 + 20) = *((_DWORD *)v5 + 2);
  return result;
}

uint64_t WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v4 = (v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11);
    v5 = v2 & (v4 ^ HIWORD(v4));
    v6 = *(_DWORD *)(result + 8 * v5);
    if (v6 == a2)
    {
      return *(unsigned int *)(result + 8 * v5 + 4);
    }
    else
    {
      v7 = 1;
      while (v6 != -1)
      {
        v5 = ((_DWORD)v5 + v7) & v2;
        v6 = *(_DWORD *)(result + 8 * v5);
        ++v7;
        if (v6 == a2)
          return *(unsigned int *)(result + 8 * v5 + 4);
      }
      return 0;
    }
  }
  return result;
}

double WebCore::RenderGrid::placeAutoMajorAxisItemOnGrid(WebCore::Grid **a1, uint64_t a2, unsigned int *a3)
{
  _BOOL8 v6;
  int v7;
  WebCore::Grid *v8;
  _BOOL4 v9;
  _BOOL4 v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t v26;
  _BYTE *v27;
  int v28;
  _BOOL4 v29;
  int v30;
  uint64_t v31;
  _BOOL4 v32;
  unsigned int v33;
  unsigned int v34;
  _BOOL4 v35;
  _BYTE *v36;
  unsigned int v37;
  WebCore::Grid *v38;
  unsigned int v39;
  double result;
  unsigned int v41;
  uint64_t v42;
  _BOOL4 v43;
  unsigned int v44;
  unsigned int v45;
  _BOOL4 v46;
  unsigned int j;
  uint64_t v48;
  _BOOL4 v49;
  unsigned int v50;
  unsigned int v51;
  _BOOL4 v52;
  _BYTE *v53;
  WebCore::Grid *v54;
  unsigned int v55;
  _BOOL8 v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  WebCore::Grid *v62;
  int v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  _BYTE v73[25];
  uint64_t v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  uint64_t v79;
  int v80;
  _BYTE v81[25];

  v6 = WebCore::RenderGrid::autoPlacementMajorAxisDirection((WebCore::RenderGrid *)a1);
  v7 = WebCore::GridPositionsResolver::spanSizeForAutoPlacedItem((WebCore::RenderElement *)a2, (WTF::StringImpl *)v6);
  v8 = a1[41];
  v9 = WebCore::RenderGrid::autoPlacementMajorAxisDirection((WebCore::RenderGrid *)a1);
  v10 = v9;
  v11 = *((_DWORD *)v8 + 25);
  if (!v9 && v11)
    v11 = *(_DWORD *)(*((_QWORD *)v8 + 11) + 12);
  if (v9)
    v12 = *a3;
  else
    v12 = a3[1];
  if (v9)
    v13 = a3[1];
  else
    v13 = *a3;
  v81[0] = 0;
  v14 = *((_QWORD *)v8 + 13);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 - 8);
    v16 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v15 & ((v18 >> 31) ^ v18);
    for (i = 1; ; ++i)
    {
      v21 = v19;
      v22 = *(_QWORD *)(v14 + 32 * v19);
      if (v22 != -1)
      {
        if (!v22)
          goto LABEL_98;
        if (*(_QWORD *)(v22 + 8) == a2)
          break;
      }
      v19 = (v21 + i) & v15;
    }
    v23 = v14 + 32 * v21;
    v24 = *(_OWORD *)(v23 + 8);
    *(_QWORD *)&v73[16] = *(_QWORD *)(v23 + 24);
    *(_OWORD *)v73 = v24;
  }
  else
  {
LABEL_98:
    WTF::GenericHashTraits<WebCore::GridArea>::emptyValue((uint64_t)v73);
  }
  v25 = (uint64_t *)((unint64_t)v73 | 0xC);
  if (v10)
    v25 = (uint64_t *)v73;
  v26 = *v25;
  v27 = &v73[20];
  if (v10)
    v27 = &v73[8];
  v28 = *(_DWORD *)v27;
  v79 = *v25;
  v80 = v28;
  if (v28 == 1)
  {
    if (v13 > v26)
      ++v12;
    v42 = (uint64_t)a1[41];
    if (v12 < v11)
    {
      v43 = WebCore::RenderGrid::autoPlacementMajorAxisDirection((WebCore::RenderGrid *)a1);
      v74 = v42;
      LOBYTE(v75) = !v43;
      if (!v43)
        v44 = v26;
      else
        v44 = v12;
      if (!v43)
        v45 = v12;
      else
        v45 = v26;
      v76 = v44;
      v77 = v45;
      v78 = 0;
      WebCore::GridIterator::nextEmptyGridArea(&v74, HIDWORD(v26) - v26, v7, (uint64_t)v73);
      *(_OWORD *)&v81[9] = *(_OWORD *)&v73[9];
      *(_OWORD *)v81 = *(_OWORD *)v73;
      if (v73[24])
        goto LABEL_36;
      v42 = (uint64_t)a1[41];
    }
    v46 = WebCore::RenderGrid::autoPlacementMajorAxisDirection((WebCore::RenderGrid *)a1);
    WebCore::RenderGrid::createEmptyGridAreaAtSpecifiedPositionsOutsideGrid((uint64_t)v81, v42, (WebCore::RenderElement *)a2, !v46, &v79);
    v81[24] = 1;
    goto LABEL_36;
  }
  v29 = WebCore::RenderGrid::autoPlacementMajorAxisDirection((WebCore::RenderGrid *)a1);
  v30 = WebCore::GridPositionsResolver::spanSizeForAutoPlacedItem((WebCore::RenderElement *)a2, (WTF::StringImpl *)!v29);
  if (v12 >= v11)
    goto LABEL_65;
  v31 = (uint64_t)a1[41];
  v32 = WebCore::RenderGrid::autoPlacementMajorAxisDirection((WebCore::RenderGrid *)a1);
  v74 = v31;
  LOBYTE(v75) = v32;
  if (v32)
    v33 = v12;
  else
    v33 = v13;
  if (v32)
    v34 = v13;
  else
    v34 = v12;
  v76 = v33;
  v77 = v34;
  v78 = 0;
  WebCore::GridIterator::nextEmptyGridArea(&v74, v7, v30, (uint64_t)v73);
  *(_OWORD *)&v81[9] = *(_OWORD *)&v73[9];
  *(_OWORD *)v81 = *(_OWORD *)v73;
  if (!v73[24])
    goto LABEL_49;
  v35 = WebCore::RenderGrid::autoPlacementMajorAxisDirection((WebCore::RenderGrid *)a1);
  v36 = &v81[16];
  if (v35)
    v36 = &v81[4];
  v37 = *(_DWORD *)v36;
  v38 = a1[41];
  v39 = *((_DWORD *)v38 + 25);
  if (v35 && v39)
    v39 = *(_DWORD *)(*((_QWORD *)v38 + 11) + 12);
  if (v37 > v39)
  {
LABEL_49:
    for (j = v12 + 1; v11 != j; ++j)
    {
      v48 = (uint64_t)a1[41];
      v49 = WebCore::RenderGrid::autoPlacementMajorAxisDirection((WebCore::RenderGrid *)a1);
      v74 = v48;
      LOBYTE(v75) = v49;
      if (v49)
        v50 = j;
      else
        v50 = 0;
      if (v49)
        v51 = 0;
      else
        v51 = j;
      v76 = v50;
      v77 = v51;
      v78 = 0;
      WebCore::GridIterator::nextEmptyGridArea(&v74, v7, v30, (uint64_t)v73);
      *(_OWORD *)&v81[9] = *(_OWORD *)&v73[9];
      *(_OWORD *)v81 = *(_OWORD *)v73;
      if (v73[24])
      {
        v52 = WebCore::RenderGrid::autoPlacementMajorAxisDirection((WebCore::RenderGrid *)a1);
        v53 = &v81[4];
        if (!v52)
          v53 = &v81[16];
        v54 = a1[41];
        v55 = *((_DWORD *)v54 + 25);
        if (v52 && v55)
          v55 = *(_DWORD *)(*((_QWORD *)v54 + 11) + 12);
        if (*(_DWORD *)v53 <= v55)
          goto LABEL_36;
        v81[0] = 0;
        v81[24] = 0;
      }
    }
LABEL_65:
    v56 = WebCore::RenderGrid::autoPlacementMajorAxisDirection((WebCore::RenderGrid *)a1);
    if (byte_1EE2F9580)
      LODWORD(v57) = WebCore::GridPosition::gMaxPositionForTesting;
    else
      LODWORD(v57) = 1000000;
    if ((int)v57 >= 1)
      v58 = 1;
    else
      v58 = v57;
    v59 = v58 - 1;
    if (-(int)v57 > v59)
      v60 = -(int)v57;
    else
      v60 = v59;
    v61 = 1 - v57;
    if ((int)v57 >= v30)
      LODWORD(v57) = v30;
    if (v61 <= (int)v57)
      v57 = v57;
    else
      v57 = v61;
    v71 = v60 | (v57 << 32);
    v72 = 1;
    v62 = a1[41];
    v63 = *((_DWORD *)v62 + 25);
    if (v56)
    {
      v64 = &v74;
      v65 = &v71;
    }
    else
    {
      if (v63)
        v63 = *(_DWORD *)(*((_QWORD *)v62 + 11) + 12);
      v64 = &v71;
      v65 = &v74;
    }
    LODWORD(v66) = WebCore::GridPositionsResolver::spanSizeForAutoPlacedItem((WebCore::RenderElement *)a2, (WTF::StringImpl *)v56)+ v63;
    if (byte_1EE2F9580)
      v67 = WebCore::GridPosition::gMaxPositionForTesting;
    else
      v67 = 1000000;
    v68 = v67 - 1;
    if (v67 - 1 >= v63)
      v68 = v63;
    if (-v67 > v68)
      v69 = -v67;
    else
      v69 = v68;
    v70 = 1 - v67;
    if (v67 < (int)v66)
      LODWORD(v66) = v67;
    if (v70 <= (int)v66)
      v66 = v66;
    else
      v66 = v70;
    v74 = v69 | (v66 << 32);
    v75 = 1;
    *(_QWORD *)v73 = *v65;
    *(_DWORD *)&v73[8] = *((_DWORD *)v65 + 2);
    *(_DWORD *)&v73[20] = *((_DWORD *)v64 + 2);
    *(_QWORD *)&v73[12] = *v64;
    *(_QWORD *)&v81[16] = *(_QWORD *)&v73[16];
    *(_OWORD *)v81 = *(_OWORD *)v73;
    v81[24] = 1;
  }
LABEL_36:
  WebCore::insertIntoGrid((unsigned int *)v73, a1[41], a2, (uint64_t)v81);
  result = *(double *)v73;
  *(_OWORD *)v81 = *(_OWORD *)v73;
  *(_QWORD *)&v81[16] = *(_QWORD *)&v73[16];
  v41 = *(_DWORD *)v73;
  *a3 = *(_DWORD *)&v73[12];
  a3[1] = v41;
  return result;
}

_QWORD *WebCore::RenderGrid::trackSizesForComputedStyle@<X0>(_QWORD *this@<X0>, _BOOL4 a2@<W1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::RenderElement *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _DWORD *v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t i;
  unint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int v62;
  int j;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int v68;
  int k;
  _QWORD *v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;

  if (a2)
    v4 = this + 73;
  else
    v4 = this + 71;
  v5 = 612;
  if (!a2)
    v5 = 604;
  v6 = *(_DWORD *)((char *)this + v5);
  v7 = *((unsigned int *)v4 + 3);
  if (a2)
    v8 = 584;
  else
    v8 = 568;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  if (v7 < 2)
    return this;
  v10 = (WebCore::RenderElement *)this;
  v11 = 120;
  if (!a2)
    v11 = 112;
  v12 = *(_QWORD *)(this[41] + v11);
  if (v12)
  {
    v13 = 0;
  }
  else
  {
    v14 = *(_QWORD *)(this[11] + 40);
    v15 = (_BYTE *)(v14 + 388);
    v16 = (_BYTE *)(v14 + 376);
    if (a2)
      v16 = v15;
    if (!*v16 && (v16[8] & 0xF7) == 3)
    {
      if (a2)
        v75 = WebCore::RenderBox::contentLogicalHeight((WebCore::RenderBox *)this);
      else
        v75 = WebCore::RenderBox::contentLogicalWidth((WebCore::RenderBox *)this);
      v19 = v75 & 0xFFFFFF00;
      v17 = v75;
      v18 = 0x100000000;
    }
    else
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
    }
    v13 = WebCore::RenderGrid::gridGap(v10, a2, v18 | v19 | v17);
  }
  if (v7 >= 0x40000001)
  {
    __break(0xC471u);
    JUMPOUT(0x1963CF940);
  }
  v20 = v7 - 1;
  v21 = WTF::fastMalloc((WTF *)(4 * (v7 - 1)));
  *(_DWORD *)(a3 + 8) = v7 - 1;
  *(_QWORD *)a3 = v21;
  v22 = v7 - 2;
  this = (_QWORD *)WTF::Vector<WebCore::LayoutUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a3, v22 + *(unsigned int *)(a3 + 12));
  if (v22)
  {
    v23 = 0;
    v24 = *(_QWORD *)a3;
    while (1)
    {
      v25 = v23 + 1;
      if (v23 + 1 >= (unint64_t)*((unsigned int *)v4 + 3))
        break;
      v27 = (_DWORD *)(*(_QWORD *)((char *)v10 + v8) + 4 * v23);
      v26 = v27[1];
      v28 = __OFSUB__(v26, *v27);
      v29 = v26 - *v27;
      v30 = (v26 >> 31) + 0x7FFFFFFF;
      if (v28)
        v29 = v30;
      v28 = __OFSUB__(v29, v6);
      v31 = v29 - v6;
      v32 = (v29 >> 31) + 0x7FFFFFFF;
      if (!v28)
        v32 = v31;
      v28 = __OFSUB__(v32, v13);
      v33 = v32 - v13;
      v34 = (v32 >> 31) + 0x7FFFFFFF;
      if (!v28)
        v34 = v33;
      *(_DWORD *)(v24 + 4 * (*(_DWORD *)(a3 + 12))++) = v34;
      v23 = v25;
      if (v22 == v25)
        goto LABEL_32;
    }
LABEL_86:
    __break(0xC471u);
    JUMPOUT(0x1963CF930);
  }
LABEL_32:
  v35 = *((unsigned int *)v4 + 3);
  if (v20 >= v35)
  {
    __break(0xC471u);
    JUMPOUT(0x1963CF948);
  }
  if (v22 >= v35)
    goto LABEL_86;
  v36 = *(_QWORD *)((char *)v10 + v8);
  v37 = *(_DWORD *)(v36 + 4 * v20);
  LODWORD(v36) = *(_DWORD *)(v36 + 4 * v22);
  v28 = __OFSUB__(v37, (_DWORD)v36);
  v38 = v37 - v36;
  v39 = (v37 >> 31) + 0x7FFFFFFF;
  if (v28)
    v38 = v39;
  v76 = v38;
  v40 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v40 == *(_DWORD *)(a3 + 8))
  {
    this = (_QWORD *)WTF::Vector<WebCore::LayoutUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v40 + 1, (unint64_t)&v76);
    *(_DWORD *)(*(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 12)) = *(_DWORD *)this;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)a3 + 4 * v40) = v38;
  }
  v41 = (*(_DWORD *)(a3 + 12) + 1);
  *(_DWORD *)(a3 + 12) = v41;
  if (!v12)
    return this;
  v42 = 120;
  if (!a2)
    v42 = 112;
  v43 = **(_QWORD **)(*((_QWORD *)v10 + 41) + v42);
  if (v43)
    v44 = *(unsigned int *)(v43 - 12);
  else
    v44 = 0;
  v45 = *(_QWORD *)(*((_QWORD *)v10 + 11) + 40);
  v46 = (_BYTE *)(v45 + 388);
  v47 = (_BYTE *)(v45 + 376);
  if (a2)
    v47 = v46;
  if (!*v47 && (v47[8] & 0xF7) == 3)
  {
    v74 = a2 ? WebCore::RenderBox::contentLogicalHeight(v10) : WebCore::RenderBox::contentLogicalWidth(v10);
    v50 = v74 & 0xFFFFFF00;
    v48 = v74;
    v49 = 0x100000000;
  }
  else
  {
    v48 = 0;
    v49 = 0;
    v50 = 0;
  }
  this = (_QWORD *)WebCore::RenderGrid::gridGap(v10, a2, v49 | v50 | v48);
  if (v41 < 2)
    return this;
  v51 = 120;
  if (!a2)
    v51 = 112;
  v52 = *(uint64_t **)(*((_QWORD *)v10 + 41) + v51);
  v53 = *(unsigned int *)(a3 + 12);
  v54 = *(_QWORD *)a3;
  for (i = 1; i != v41; ++i)
  {
    v56 = i - 1;
    v57 = *v52;
    if (!*v52)
    {
LABEL_67:
      if (v56 >= v53)
      {
        __break(0xC471u);
        JUMPOUT(0x1963CF938);
      }
      v71 = *(_DWORD *)(v54 + 4 * v56);
      v28 = __OFSUB__(v71, (_DWORD)this);
      v72 = v71 - (_DWORD)this;
      v73 = (v71 >> 31) + 0x7FFFFFFF;
      if (!v28)
        v73 = v72;
      *(_DWORD *)(v54 + 4 * v56) = v73;
      continue;
    }
    v58 = *(_DWORD *)(v57 - 8);
    v59 = (v56 + ~(v56 << 32)) ^ ((v56 + ~(v56 << 32)) >> 22);
    v60 = 9 * ((v59 + ~(v59 << 13)) ^ ((v59 + ~(v59 << 13)) >> 8));
    v61 = (v60 ^ (v60 >> 15)) + ~((v60 ^ (v60 >> 15)) << 27);
    v62 = v58 & ((v61 >> 31) ^ v61);
    for (j = 1; ; ++j)
    {
      v64 = *(_QWORD **)(v57 + 8 * v62);
      if (v64 == (_QWORD *)-1)
        goto LABEL_60;
      if (!v64)
        break;
      if (*v64 == v56)
      {
        --v44;
        goto LABEL_72;
      }
LABEL_60:
      v62 = (v62 + j) & v58;
    }
    if (v44 != v41 - i)
      goto LABEL_67;
    v65 = (i + ~(i << 32)) ^ ((unint64_t)(i + ~(i << 32)) >> 22);
    v66 = 9 * ((v65 + ~(v65 << 13)) ^ ((v65 + ~(v65 << 13)) >> 8));
    v67 = (v66 ^ (v66 >> 15)) + ~((v66 ^ (v66 >> 15)) << 27);
    v68 = v58 & ((v67 >> 31) ^ v67);
    for (k = 1; ; ++k)
    {
      v70 = *(_QWORD **)(v57 + 8 * v68);
      if (v70 != (_QWORD *)-1)
      {
        if (!v70)
          goto LABEL_67;
        if (*v70 == i)
          break;
      }
      v68 = (v68 + k) & v58;
    }
LABEL_72:
    ;
  }
  return this;
}

uint64_t WebCore::RenderGrid::populateGridPositionsForDirection(WebCore::RenderBox *a1, int a2)
{
  int v2;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  WTF *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t result;
  unsigned int v26;
  BOOL v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  int v49;
  uint64_t v50;
  _DWORD *v51;
  WTF *v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  _QWORD *v75;
  uint64_t v76;

  v2 = a2;
  if (a2)
    v4 = (_QWORD *)((char *)a1 + 392);
  else
    v4 = (_QWORD *)((char *)a1 + 376);
  v5 = *((unsigned int *)v4 + 3);
  v6 = (v5 + 1);
  v7 = 120;
  if (!a2)
    v7 = 112;
  v8 = *(_QWORD **)(*((_QWORD *)a1 + 41) + v7);
  if (v8)
  {
    if (*v8)
      v74 = *(_DWORD *)(*v8 - 12);
    else
      v74 = 0;
  }
  else
  {
    v74 = 0;
  }
  if (a2)
    v9 = (_DWORD *)((char *)a1 + 608);
  else
    v9 = (_DWORD *)((char *)a1 + 600);
  if (a2)
    v10 = (uint64_t *)((char *)a1 + 584);
  else
    v10 = (uint64_t *)((char *)a1 + 568);
  v11 = *((unsigned int *)v10 + 3);
  if (v11 < v6)
  {
    v75 = *(_QWORD **)(*((_QWORD *)a1 + 41) + v7);
    v13 = *((unsigned int *)v4 + 3);
    v14 = v9;
    v15 = *((unsigned int *)v10 + 2);
    v16 = (WTF *)*v10;
    if (v15 >= v6)
    {
      v5 = *((unsigned int *)v4 + 3);
      v2 = a2;
      v8 = *(_QWORD **)(*((_QWORD *)a1 + 41) + v7);
    }
    else
    {
      v17 = v15 + (v15 >> 2);
      if (v17 >= 0x10)
        v18 = v17 + 1;
      else
        v18 = 16;
      if (v18 <= v6)
        v19 = v6;
      else
        v19 = v18;
      if (v19 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x1963CFE0CLL);
      }
      v20 = WTF::fastMalloc((WTF *)(4 * v19));
      *((_DWORD *)v10 + 2) = v19;
      *v10 = v20;
      if ((_DWORD)v11)
      {
        v50 = 4 * v11;
        v51 = (_DWORD *)v20;
        v52 = v16;
        do
        {
          v53 = *(_DWORD *)v52;
          v52 = (WTF *)((char *)v52 + 4);
          *v51++ = v53;
          v50 -= 4;
        }
        while (v50);
      }
      v9 = v14;
      v5 = v13;
      v2 = a2;
      v8 = v75;
      if (!v16)
      {
LABEL_25:
        v22 = *((unsigned int *)v10 + 3);
        if ((_DWORD)v22 != (_DWORD)v6)
          bzero((void *)(v20 + 4 * v22), (4 * v6 - 4 * v22) & 0xFFFFFFFFFFFFFFFCLL);
        goto LABEL_27;
      }
      if ((WTF *)v20 == v16)
      {
        *v10 = 0;
        *((_DWORD *)v10 + 2) = 0;
      }
      WTF::fastFree(v16, v21);
      v16 = (WTF *)*v10;
    }
    v20 = (uint64_t)v16;
    if (!v16)
      goto LABEL_27;
    goto LABEL_25;
  }
LABEL_27:
  *((_DWORD *)v10 + 3) = v6;
  v23 = *(_QWORD *)a1;
  if (v2)
  {
    v24 = (*(uint64_t (**)(WebCore::RenderBox *))(v23 + 1048))(a1);
    result = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 960))(a1);
  }
  else
  {
    v24 = (*(uint64_t (**)(WebCore::RenderBox *))(v23 + 1064))(a1);
    result = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 976))(a1);
  }
  v26 = v24 + result;
  if (__OFADD__(v24, (_DWORD)result))
    v26 = (v24 >> 31) + 0x7FFFFFFF;
  v27 = __OFADD__(v26, *v9);
  v28 = v26 + *v9;
  v29 = (v26 >> 31) + 0x7FFFFFFF;
  if (!v27)
    v29 = v28;
  if (!*((_DWORD *)v10 + 3))
  {
    __break(0xC471u);
    JUMPOUT(0x1963CFDECLL);
  }
  *(_DWORD *)*v10 = v29;
  if (v6 >= 2)
  {
    if (v8)
      result = 0;
    else
      result = WebCore::RenderGrid::gridGap(a1, v2);
    v30 = (v5 - 1);
    if ((_DWORD)v5 == 1)
    {
      v44 = 0;
    }
    else
    {
      v31 = 0;
      v32 = 8;
      do
      {
        v33 = *((unsigned int *)v10 + 3);
        if (v31 >= v33)
          goto LABEL_114;
        v34 = *(_DWORD *)(*v10 + 4 * v31);
        v35 = v9[1];
        v27 = __OFADD__(v34, v35);
        v36 = v34 + v35;
        v37 = (v34 >> 31) + 0x7FFFFFFF;
        if (!v27)
          v37 = v36;
        if (v31 >= *((unsigned int *)v4 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x1963CFDDCLL);
        }
        v38 = *(_DWORD *)(*v4 + v32);
        v27 = __OFADD__(v37, v38);
        v39 = v37 + v38;
        v40 = (v37 >> 31) + 0x7FFFFFFF;
        if (!v27)
          v40 = v39;
        v27 = __OFADD__(v40, (_DWORD)result);
        v41 = v40 + result;
        v42 = (v40 >> 31) + 0x7FFFFFFF;
        if (v27)
          v41 = v42;
        v43 = v31 + 1;
        if (v31 + 1 >= v33)
        {
          __break(0xC471u);
          JUMPOUT(0x1963CFDE4);
        }
        *(_DWORD *)(*v10 + 4 * v31 + 4) = v41;
        v32 += 136;
        ++v31;
      }
      while (v30 != v43);
      v44 = (v5 - 1);
    }
    v45 = *((_DWORD *)v10 + 3);
    if (v45 <= v30)
    {
      __break(0xC471u);
      JUMPOUT(0x1963CFDF4);
    }
    if (*((_DWORD *)v4 + 3) <= v30)
    {
      __break(0xC471u);
      JUMPOUT(0x1963CFDFCLL);
    }
    v46 = *v4 + 136 * v44;
    v47 = *(_DWORD *)(*v10 + 4 * v44);
    LODWORD(v46) = *(_DWORD *)(v46 + 8);
    v27 = __OFADD__(v47, (_DWORD)v46);
    v48 = v47 + v46;
    v49 = (v47 >> 31) + 0x7FFFFFFF;
    if (!v27)
      v49 = v48;
    if (v45 <= v5)
    {
      __break(0xC471u);
      JUMPOUT(0x1963CFE04);
    }
    *(_DWORD *)(*v10 + 4 * v5) = v49;
    if (v8)
    {
      result = WebCore::RenderGrid::gridGap(a1, v2);
      v72 = v5;
      if (v5 < 2)
      {
        v56 = 0;
        v55 = 0;
      }
      else
      {
        v54 = 0;
        v55 = 0;
        v56 = 0;
        v57 = *((_QWORD *)a1 + 41);
        LODWORD(v58) = *((_DWORD *)v10 + 3);
        if (v58 <= 1)
          v58 = 1;
        else
          v58 = v58;
        v76 = v58 - 1;
        v59 = v72 - 1;
        v73 = result;
        v60 = v74;
        do
        {
          result = WebCore::Grid::isEmptyAutoRepeatTrack(v57, v2, v54);
          if ((_DWORD)result)
          {
            --v60;
            v61 = v9[1];
            v27 = __OFADD__(v55, v61);
            v62 = v55 + v61;
            if (v27)
              v55 = (v55 >> 31) + 0x7FFFFFFF;
            else
              v55 = v62;
          }
          else if (v59 != v60
                 || (result = WebCore::Grid::isEmptyAutoRepeatTrack(v57, v2, (int)v54 + 1), (result & 1) == 0))
          {
            if (__OFADD__(v56, v73))
              v56 = (v56 >> 31) + 0x7FFFFFFF;
            else
              v56 += v73;
          }
          v63 = v56 - v55;
          if (__OFSUB__(v56, v55))
            v63 = (v56 >> 31) + 0x7FFFFFFF;
          if (v76 == v54)
          {
            __break(0xC471u);
            JUMPOUT(0x1963CFE14);
          }
          v64 = *v10 + 4 * v54;
          v65 = *(_DWORD *)(v64 + 4);
          v27 = __OFADD__(v65, v63);
          v66 = v65 + v63;
          v67 = (v65 >> 31) + 0x7FFFFFFF;
          if (v27)
            v66 = v67;
          *(_DWORD *)(v64 + 4) = v66;
          ++v54;
          --v59;
        }
        while (v72 - 1 != v54);
      }
      v68 = v56 - v55;
      if (__OFSUB__(v56, v55))
        v68 = (v56 >> 31) + 0x7FFFFFFF;
      if (*((_DWORD *)v10 + 3) <= v72)
      {
LABEL_114:
        __break(0xC471u);
        JUMPOUT(0x1963CFDD4);
      }
      v69 = *(_DWORD *)(*v10 + 4 * v72);
      v27 = __OFADD__(v69, v68);
      v70 = v69 + v68;
      v71 = (v69 >> 31) + 0x7FFFFFFF;
      if (!v27)
        v71 = v70;
      *(_DWORD *)(*v10 + 4 * v72) = v71;
    }
  }
  return result;
}

uint64_t WebCore::RenderGrid::gridAreaBreadthForChildIncludingAlignmentOffsets(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  BOOL v40;
  unsigned int v41;
  unsigned int v42;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[24];

  v3 = a1;
  if (a3 == 1)
  {
    do
    {
      v4 = v3;
      v5 = *(_QWORD *)(v3 + 32);
      if (!v5)
        break;
      v3 = *(_QWORD *)(v5 + 8);
      if (!v3)
        break;
    }
    while (*(_BYTE *)(v3 + 46) == 12
         && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 40) + 80) + 258));
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 40) + 80) + 260))
    {
      v6 = (_DWORD *)a2;
      v7 = *(_QWORD *)a2;
      if ((*(_BYTE *)(a1 + 21) & 0x10) == 0)
      {
LABEL_8:
        v8 = v6[41];
        v9 = (*(uint64_t (**)(_DWORD *))(v7 + 1080))(v6);
        v10 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 1088))(v6);
LABEL_41:
        v44 = v9 + v10;
        if (__OFADD__(v9, v10))
          v44 = (v9 >> 31) + 0x7FFFFFFF;
        v40 = __OFADD__(v8, v44);
        v41 = v8 + v44;
        v42 = (v8 >> 31) + 0x7FFFFFFF;
        goto LABEL_36;
      }
LABEL_40:
      v8 = v6[40];
      v9 = (*(uint64_t (**)(_DWORD *))(v7 + 1096))(v6);
      v10 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 1104))(v6);
      goto LABEL_41;
    }
LABEL_21:
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 104);
    if (v16)
    {
      v17 = *(_DWORD *)(v16 - 8);
      v18 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      for (i = 1; ; ++i)
      {
        v23 = v21;
        v24 = *(_QWORD *)(v16 + 32 * v21);
        if (v24 != -1)
        {
          if (!v24)
            goto LABEL_45;
          if (*(_QWORD *)(v24 + 8) == a2)
            break;
        }
        v21 = (v23 + i) & v17;
      }
      v25 = v16 + 32 * v23;
      v26 = *(_OWORD *)(v25 + 8);
      *(_QWORD *)&v47[16] = *(_QWORD *)(v25 + 24);
      *(_OWORD *)v47 = v26;
    }
    else
    {
LABEL_45:
      v45 = a1;
      WTF::GenericHashTraits<WebCore::GridArea>::emptyValue((uint64_t)v47);
      a1 = v45;
    }
    v27 = *(_QWORD *)&v47[12];
    v28 = a1 + 392;
    v29 = (uint64_t *)(a1 + 584);
    goto LABEL_29;
  }
  do
  {
    v11 = v3;
    v12 = *(_QWORD *)(v3 + 32);
    if (!v12)
      break;
    v3 = *(_QWORD *)(v12 + 8);
    if (!v3)
      break;
  }
  while (*(_BYTE *)(v3 + 46) == 12 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 88) + 40) + 80) + 259));
  v13 = v11;
  do
  {
    v14 = v13;
    v15 = *(_QWORD *)(v13 + 32);
    if (!v15)
      break;
    v13 = *(_QWORD *)(v15 + 8);
    if (!v13)
      break;
  }
  while (*(_BYTE *)(v13 + 46) == 12
       && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 88) + 40) + 80) + 258));
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 88) + 40) + 80) + 260)
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 88) + 40) + 80) + 261))
  {
    v6 = (_DWORD *)a2;
    v7 = *(_QWORD *)a2;
    if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
      goto LABEL_8;
    goto LABEL_40;
  }
  if (a3)
    goto LABEL_21;
  v28 = a1 + 376;
  v46 = a1;
  v27 = WebCore::Grid::gridItemSpan(*(_QWORD *)(a1 + 328), a2, 0);
  v29 = (uint64_t *)(v46 + 568);
LABEL_29:
  v30 = v27;
  v31 = *((unsigned int *)v29 + 3);
  if (v27 >= v31)
    goto LABEL_49;
  v32 = (HIDWORD(v27) - 1);
  if (v32 >= v31)
  {
    __break(0xC471u);
    JUMPOUT(0x1963D00FCLL);
  }
  v33 = *v29;
  v34 = *(_DWORD *)(v33 + 4 * v30);
  v35 = *(_DWORD *)(v33 + 4 * v32);
  v40 = __OFSUB__(v35, v34);
  v36 = v35 - v34;
  v37 = (v35 >> 31) + 0x7FFFFFFF;
  if (v40)
    v36 = v37;
  if (v32 >= *(unsigned int *)(v28 + 12))
  {
LABEL_49:
    __break(0xC471u);
    JUMPOUT(0x1963D00F4);
  }
  v38 = *(_DWORD *)(*(_QWORD *)v28 + 136 * v32 + 8);
  v39 = v38 & ~(v38 >> 31);
  v40 = __OFADD__(v36, v39);
  v41 = v36 + v39;
  v42 = (v36 >> 31) + 0x7FFFFFFF;
LABEL_36:
  if (v40)
    return v42;
  else
    return v41;
}

uint64_t WebCore::RenderGrid::applyStretchAlignmentToChildIfNeeded(uint64_t a1, WebCore::RenderBox *this, unint64_t a3)
{
  void *v6;
  uint64_t result;
  unsigned int v8;
  int v9;
  char v10;
  char v11;
  unsigned int v12;
  int v13;
  int v14;
  char v15;
  char v16;
  unsigned int v17;
  int v18;
  _BYTE *v19;
  _BYTE *v20;
  unint64_t v21;
  char v22;
  int v23;
  signed int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  BOOL v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  unsigned int v50;
  int v51;
  int v52;
  int v53;
  _QWORD *v54;
  char *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int v63;
  int i;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  char v70;
  unsigned int v71;
  char v72;
  int v73;
  char v74;
  char v75;
  char v76;
  unsigned int v77;
  int v78;
  int v79;
  char v80;
  unsigned int v81;
  int v82;
  int v83;

  WebCore::RenderBox::clearOverridingLogicalHeight((uint64_t)this, this);
  result = WebCore::RenderBox::clearOverridingLogicalWidth((uint64_t)this, v6);
  v8 = ((*((_BYTE *)this + 21) & 0x10) == 0) ^ ((*(_BYTE *)(a1 + 21) & 0x10) == 0);
  v9 = *((unsigned __int8 *)this + 46);
  if (!v8)
  {
    if (v9 == 12
      && (++*((_DWORD *)this + 4),
          result = (uint64_t)WebCore::RenderGrid::isSubgridInParentDirection(this, 1),
          (result & 1) != 0))
    {
      v10 = 3;
    }
    else
    {
      if ((*((_BYTE *)this + 52) & 7) == 3)
        v10 = 7;
      else
        v10 = 3;
      v11 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 125);
      v12 = v11 & 0xF;
      if (v12 == 1)
      {
        v11 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 124);
        v12 = v11 & 0xF;
      }
      if (v12 >= 3)
        v10 = v11;
      if (v9 != 12)
      {
LABEL_14:
        if ((v10 & 0xF) != 3)
          goto LABEL_15;
        result = WebCore::RenderGrid::hasAutoSizeInColumnAxis((WebCore::RenderGrid *)a1, this);
        if (!(_DWORD)result)
          goto LABEL_15;
        v44 = *((_QWORD *)this + 11);
        v45 = *(_BYTE **)(v44 + 24);
        if ((*(_BYTE *)(a1 + 21) & 0x10) == 0)
          goto LABEL_64;
        goto LABEL_144;
      }
    }
    v13 = *((_DWORD *)this + 4);
    if (!v13)
    {
      __break(0xC471u);
      JUMPOUT(0x1963D0698);
    }
    *((_DWORD *)this + 4) = v13 - 1;
    goto LABEL_14;
  }
  if (v9 == 12
    && (++*((_DWORD *)this + 4),
        result = (uint64_t)WebCore::RenderGrid::isSubgridInParentDirection(this, 0),
        (result & 1) != 0))
  {
    v75 = 3;
  }
  else
  {
    if ((*((_BYTE *)this + 52) & 7) == 3)
      v75 = 7;
    else
      v75 = 3;
    v76 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 127);
    v77 = v76 & 0xF;
    if (v77 == 1)
    {
      v76 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 126);
      v77 = v76 & 0xF;
    }
    if (v77 >= 3)
      v75 = v76;
    if (v9 != 12)
      goto LABEL_141;
  }
  v78 = *((_DWORD *)this + 4);
  if (!v78)
  {
    __break(0xC471u);
    goto LABEL_164;
  }
  *((_DWORD *)this + 4) = v78 - 1;
LABEL_141:
  if ((v75 & 0xF) != 3)
    goto LABEL_15;
  result = WebCore::RenderGrid::hasAutoSizeInRowAxis((WebCore::RenderGrid *)a1, this);
  if (!(_DWORD)result)
    goto LABEL_15;
  v44 = *((_QWORD *)this + 11);
  v45 = *(_BYTE **)(v44 + 24);
  if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
  {
LABEL_64:
    if (v45[44])
    {
      v46 = v45 + 60;
      goto LABEL_66;
    }
LABEL_15:
    v14 = *((unsigned __int8 *)this + 46);
    if (v14 == 12
      && (++*((_DWORD *)this + 4),
          result = (uint64_t)WebCore::RenderGrid::isSubgridInParentDirection(this, 0),
          (result & 1) != 0))
    {
      v15 = 3;
    }
    else
    {
      if ((*((_BYTE *)this + 52) & 7) == 3)
        v15 = 7;
      else
        v15 = 3;
      v16 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 127);
      v17 = v16 & 0xF;
      if (v17 == 1)
      {
        v16 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 126);
        v17 = v16 & 0xF;
      }
      if (v17 >= 3)
        v15 = v16;
      if (v14 != 12)
      {
LABEL_27:
        if ((v15 & 0xF) != 3)
          return result;
        result = WebCore::RenderGrid::hasAutoSizeInRowAxis((WebCore::RenderGrid *)a1, this);
        if (!(_DWORD)result)
          return result;
        v19 = *(_BYTE **)(*((_QWORD *)this + 11) + 24);
        if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
        {
          if (!v19[44])
            return result;
          v20 = v19 + 60;
        }
        else
        {
          if (!v19[68])
            return result;
          v20 = v19 + 52;
        }
        if (!*v20)
          return result;
        if ((v8 & 1) != 0)
          v21 = WebCore::RenderBox::overridingContainingBlockContentLogicalHeight(this);
        else
          v21 = WebCore::RenderBox::overridingContainingBlockContentLogicalWidth(this);
        a3 = v21;
        if (v22)
        {
          if ((v21 & 0xFF00000000) == 0)
          {
LABEL_146:
            std::__throw_bad_optional_access[abi:sn180100]();
            goto LABEL_147;
          }
          v23 = WebCore::GridLayoutFunctions::marginLogicalSizeForChild((WebCore::RenderBlock *)a1, ((*((_BYTE *)this + 21) & 0x10) == 0) != ((*(_BYTE *)(a1 + 21) & 0x10) == 0), this);
          v24 = a3 - v23;
          if (!__OFSUB__((_DWORD)a3, v23))
          {
LABEL_38:
            v25 = *(_DWORD *)(a1 + 160);
            v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1016))(a1);
            v27 = v25 - v26;
            if (__OFSUB__(v25, v26))
              v27 = (v25 >> 31) + 0x7FFFFFFF;
            v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1024))(a1);
            v29 = v27 - v28;
            if (__OFSUB__(v27, v28))
              v29 = (v27 >> 31) + 0x7FFFFFFF;
            v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1352))(a1);
            v31 = v30 << 6;
            if (v30 < -33554432)
              v31 = 0x80000000;
            if (v30 > 0x1FFFFFF)
              v31 = 0x7FFFFFFF;
            v32 = __OFSUB__(v29, v31);
            v33 = v29 - v31;
            if (v32)
              v33 = (v29 >> 31) + 0x7FFFFFFF;
            v34 = v33 & ~(v33 >> 31);
            v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 944))(a1);
            v36 = v34 - v35;
            if (__OFSUB__(v34, v35))
              v36 = 0x7FFFFFFF;
            v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 952))(a1);
            v38 = v36 - v37;
            if (__OFSUB__(v36, v37))
              v38 = (v36 >> 31) + 0x7FFFFFFF;
            if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 584) & 0x100) != 0)
            {
              v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1352))(a1);
              if (v79 >= -33554432)
              {
                v39 = v79 << 6;
                if (v79 > 0x1FFFFFF)
                  v39 = 0x7FFFFFFF;
              }
              else
              {
                v39 = 0x80000000;
              }
            }
            else
            {
              v39 = 0;
            }
            v32 = __OFSUB__(v38, v39);
            v40 = v38 - v39;
            if (v32)
              v40 = (v38 >> 31) + 0x7FFFFFFF;
            v41 = WebCore::RenderBox::constrainLogicalWidthInFragmentByMinMax(this, v24 & ~(v24 >> 31), v40 & ~(v40 >> 31), (unsigned int *)a1, 0, 1);
            v83 = v41;
            v42 = (_QWORD *)WebCore::gOverridingLogicalWidthMap;
            if (!WebCore::gOverridingLogicalWidthMap)
            {
              v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v42 = 0;
              v42[1] = 0;
              WebCore::gOverridingLogicalWidthMap = (uint64_t)v42;
            }
            result = WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,WebCore::LayoutUnit&>((uint64_t)v42, this, &v83);
            if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
              v43 = (char *)this + 164;
            else
              v43 = (char *)this + 160;
            if (v41 == *(_DWORD *)v43)
              return result;
LABEL_96:
            v67 = *((_DWORD *)this + 5);
            if ((v67 & 8) == 0)
            {
              *((_DWORD *)this + 5) = v67 | 8;
              if ((v67 & 0x8000) != 0)
              {
                if ((*((_BYTE *)this + 45) & 0x10) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1963D0778);
                }
                v68 = *((_QWORD *)this + 18);
                if (v68)
                {
                  v69 = *(_DWORD *)(v68 + 8) + 1;
                  *(_DWORD *)(v68 + 8) = v69;
                }
                else
                {
                  v69 = MEMORY[8];
                }
                *(_QWORD *)(v68 + 24) = *(_QWORD *)(v68 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
                if (!v69)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1963D07A4);
                }
                *(_DWORD *)(v68 + 8) = v69 - 1;
              }
            }
            return result;
          }
LABEL_165:
          v24 = (a3 >> 31) + 0x7FFFFFFF;
          goto LABEL_38;
        }
LABEL_164:
        __break(1u);
        goto LABEL_165;
      }
    }
    v18 = *((_DWORD *)this + 4);
    if (!v18)
    {
      __break(0xC471u);
      JUMPOUT(0x1963D06B8);
    }
    *((_DWORD *)this + 4) = v18 - 1;
    goto LABEL_27;
  }
LABEL_144:
  if (!v45[68])
    goto LABEL_15;
  v46 = v45 + 52;
LABEL_66:
  if (!*v46)
    goto LABEL_15;
  v47 = *(_QWORD *)(v44 + 32);
  if (((*(_DWORD *)(v47 + 148) >> 5) & 3u) - 1 <= 1)
  {
    if (*((_BYTE *)this + 46) == 12)
    {
      ++*((_DWORD *)this + 4);
      if ((WebCore::RenderGrid::isSubgridInParentDirection(this, 0) & 1) != 0)
      {
        v72 = 3;
      }
      else
      {
        v70 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 127);
        v71 = v70 & 0xF;
        if (v71 == 1)
        {
          v70 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 126);
          v71 = v70 & 0xF;
        }
        v72 = v71 <= 2 ? 2 : v70;
      }
      v73 = *((_DWORD *)this + 4);
      if (!v73)
      {
        __break(0xC471u);
        JUMPOUT(0x1963D0940);
      }
      *((_DWORD *)this + 4) = v73 - 1;
    }
    else
    {
      v80 = *(_BYTE *)(v47 + 127);
      v81 = v80 & 0xF;
      if (v81 == 1)
      {
        v80 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 126);
        v81 = v80 & 0xF;
      }
      v72 = v81 <= 2 ? 2 : v80;
    }
    result = WebCore::RenderGrid::alignSelfForChild(a1, this);
    v74 = v8 ? v72 : result;
    if ((v74 & 0xF) != 3)
      return result;
  }
  if (v8)
    v48 = WebCore::RenderBox::overridingContainingBlockContentLogicalWidth(this);
  else
    v48 = WebCore::RenderBox::overridingContainingBlockContentLogicalHeight(this);
  v8 = v48;
  if (!v49)
    goto LABEL_164;
  if ((v48 & 0xFF00000000) == 0)
    goto LABEL_146;
  if (((*((_BYTE *)this + 21) & 0x10) == 0) != ((*(_BYTE *)(a1 + 21) & 0x10) == 0))
  {
LABEL_147:
    v50 = 0;
    goto LABEL_74;
  }
  v50 = 1;
LABEL_74:
  v51 = WebCore::GridLayoutFunctions::marginLogicalSizeForChild((WebCore::RenderBlock *)a1, v50, this);
  v52 = v8 - v51;
  if (__OFSUB__(v8, v51))
    v52 = (v8 >> 31) + 0x7FFFFFFF;
  v53 = WebCore::RenderBox::constrainLogicalHeightByMinMax(this, (const WebCore::RenderBox *)(v52 & ~(v52 >> 31)), 0);
  v82 = v53;
  v54 = (_QWORD *)WebCore::gOverridingLogicalHeightMap;
  if (!WebCore::gOverridingLogicalHeightMap)
  {
    v54 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v54 = 0;
    v54[1] = 0;
    WebCore::gOverridingLogicalHeightMap = (uint64_t)v54;
  }
  result = WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,WebCore::LayoutUnit&>((uint64_t)v54, this, &v82);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    v55 = (char *)this + 160;
  else
    v55 = (char *)this + 164;
  if (v53 != *(_DWORD *)v55)
    goto LABEL_94;
  result = WebCore::RenderGrid::canSetColumnAxisStretchRequirementForItem((WebCore::RenderGrid *)a1, this);
  if (!(_DWORD)result)
  {
    if ((*((_BYTE *)this + 45) & 0x40) == 0)
      return result;
    result = WebCore::RenderBlock::hasPercentHeightDescendants(this, v56);
    if ((result & 1) == 0)
      return result;
    goto LABEL_94;
  }
  ++*(_DWORD *)(a3 + 24);
  v57 = *((_QWORD *)this + 1);
  if (v57)
  {
    if (*(_QWORD *)(v57 + 8))
    {
      v58 = *(_QWORD *)(a3 + 16);
      if (v58)
      {
        v59 = *(_DWORD *)(v58 - 8);
        v60 = (~(v57 << 32) + v57) ^ ((unint64_t)(~(v57 << 32) + v57) >> 22);
        v61 = 9 * ((v60 + ~(v60 << 13)) ^ ((v60 + ~(v60 << 13)) >> 8));
        v62 = (v61 ^ (v61 >> 15)) + ~((v61 ^ (v61 >> 15)) << 27);
        v63 = v59 & ((v62 >> 31) ^ v62);
        for (i = 1; ; ++i)
        {
          v65 = v63;
          v66 = *(_QWORD *)(v58 + 16 * v63);
          if (v66 != -1)
          {
            if (!v66)
              return result;
            if (v66 == v57)
              break;
          }
          v63 = (v65 + i) & v59;
        }
        if (*(_BYTE *)(v58 + 16 * v65 + 8))
        {
LABEL_94:
          if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
            *((_DWORD *)this + 40) = 0;
          else
            *((_DWORD *)this + 41) = 0;
          goto LABEL_96;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderGrid::applySubgridStretchAlignmentToChildIfNeeded(uint64_t this, WebCore::RenderBox *a2)
{
  WebCore::RenderBlock *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  WebCore::RenderGrid *v16;
  int i;
  unint64_t v18;
  char v19;
  int v20;

  if (*((_BYTE *)a2 + 46) != 12)
    return this;
  v3 = (WebCore::RenderBlock *)this;
  ++*((_DWORD *)a2 + 4);
  if (WebCore::RenderElement::establishesIndependentFormattingContext(a2))
    goto LABEL_4;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 40) + 80) + 258))
    goto LABEL_4;
  v15 = *((_QWORD *)a2 + 4);
  if (!v15)
    goto LABEL_4;
  v16 = *(WebCore::RenderGrid **)(v15 + 8);
  if (!v16 || *((_BYTE *)v16 + 46) != 12 || (WebCore::RenderGrid::areMasonryRows(v16) & 1) != 0)
    goto LABEL_4;
  if (((*((_BYTE *)a2 + 21) & 0x10) == 0) != ((*((_BYTE *)v3 + 21) & 0x10) == 0))
    goto LABEL_38;
  for (i = 1; ; i = 0)
  {
    v18 = WebCore::GridLayoutFunctions::overridingContainingBlockContentSizeForChild(a2, i);
    if (!v19)
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if ((v18 & 0xFF00000000) != 0)
    {
      v20 = WebCore::RenderGrid::availableAlignmentSpaceForChildBeforeStretching(v3, v18, a2, 1u);
      WebCore::RenderBox::setOverridingLogicalHeight(a2, v20);
LABEL_4:
      this = WebCore::RenderElement::establishesIndependentFormattingContext(a2);
      if ((this & 1) != 0)
        goto LABEL_20;
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 40) + 80) + 259))
        goto LABEL_20;
      v4 = *((_QWORD *)a2 + 4);
      if (!v4)
        goto LABEL_20;
      v5 = *(_QWORD *)(v4 + 8);
      if (!v5 || *(_BYTE *)(v5 + 46) != 12)
        goto LABEL_20;
      do
      {
        v6 = v5;
        v7 = *(_QWORD *)(v5 + 32);
        if (!v7)
          break;
        v5 = *(_QWORD *)(v7 + 8);
        if (!v5)
          break;
      }
      while (*(_BYTE *)(v5 + 46) == 12
           && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 88) + 40) + 80) + 259));
      v8 = v6;
      do
      {
        v9 = v8;
        v10 = *(_QWORD *)(v8 + 32);
        if (!v10)
          break;
        v8 = *(_QWORD *)(v10 + 8);
        if (!v8)
          break;
      }
      while (*(_BYTE *)(v8 + 46) == 12
           && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 88) + 40) + 80) + 258));
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 88) + 40) + 80) + 260)
        && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 88) + 40) + 80) + 261))
      {
        goto LABEL_20;
      }
      v12 = WebCore::GridLayoutFunctions::overridingContainingBlockContentSizeForChild(a2, ((*((_BYTE *)a2 + 21) & 0x10) == 0) != ((*((_BYTE *)v3 + 21) & 0x10) == 0));
      if (!v13)
        goto LABEL_36;
      if ((v12 & 0xFF00000000) != 0)
        break;
    }
LABEL_37:
    std::__throw_bad_optional_access[abi:sn180100]();
LABEL_38:
    ;
  }
  v14 = WebCore::RenderGrid::availableAlignmentSpaceForChildBeforeStretching(v3, v12, a2, 0);
  this = WebCore::RenderBox::setOverridingLogicalWidth(a2, v14);
LABEL_20:
  v11 = *((_DWORD *)a2 + 4);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x1963D0B98);
  }
  *((_DWORD *)a2 + 4) = v11 - 1;
  return this;
}

uint64_t WebCore::RenderGrid::updateAutoMarginsInColumnAxisIfNeeded(WebCore::RenderGrid *this, WebCore::RenderBox *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int i;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t result;
  char v28;
  char *v29;
  int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned __int8 v43;
  char v44;
  char v45;
  int v46;
  unsigned __int8 v47;
  char v48;
  char v49;

  v4 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 24);
  v5 = *((_DWORD *)this + 31);
  v6 = ((unsigned __int16)v5 >> 13) - 1;
  if (v6 > 4)
    v7 = 0;
  else
    v7 = qword_1969FCAC0[v6];
  v8 = v5 >> 13;
  v9 = v4 + 8 * v7;
  v10 = (int *)(v9 + 40);
  v49 = 0;
  v47 = *(_BYTE *)(v9 + 44);
  v11 = v47;
  v48 = *(_BYTE *)(v9 + 45);
  if (v47 - 2 >= 9)
  {
    if (v47 == 11)
    {
      v12 = *v10;
      v46 = *v10;
      WebCore::Length::ref(&v46);
      v4 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 24);
      v8 = *((_DWORD *)this + 31) >> 13;
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = *v10;
  }
  v13 = (v8 & 7) - 1;
  if (v13 > 4)
    v14 = 2;
  else
    v14 = qword_1969FCAE8[v13];
  v15 = v4 + 8 * v14;
  v16 = (int *)(v15 + 40);
  v45 = 0;
  v43 = *(_BYTE *)(v15 + 44);
  v17 = v43;
  v44 = *(_BYTE *)(v15 + 45);
  if (v43 - 2 >= 9)
  {
    v18 = 0;
    if (v43 == 11)
    {
      v18 = *v16;
      v42 = *v16;
      WebCore::Length::ref(&v42);
    }
  }
  else
  {
    v18 = *v16;
  }
  if (!v11)
    goto LABEL_50;
  v19 = ((unsigned __int16)*((_DWORD *)a2 + 31) >> 13) - 1;
  if (v19 > 4)
    v20 = 0;
  else
    v20 = qword_1969FCAC0[v19];
  for (i = *((_DWORD *)a2 + v20 + 42); ; i = 0)
  {
    if (v17)
    {
      v22 = ((unsigned __int16)*((_DWORD *)a2 + 31) >> 13) - 1;
      if (v22 > 4)
        v23 = 2;
      else
        v23 = qword_1969FCAE8[v22];
      v24 = *((_DWORD *)a2 + v23 + 42);
      v25 = __OFADD__(i, v24);
      v26 = i + v24;
      if (v25)
        i = (i >> 31) + 0x7FFFFFFF;
      else
        i = v26;
    }
    result = WebCore::RenderBox::overridingContainingBlockContentLogicalHeight(a2);
    if (v28)
      break;
    __break(1u);
LABEL_50:
    ;
  }
  if ((result & 0xFF00000000) == 0)
  {
    result = std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_67;
  }
  if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 < 4)
  {
LABEL_67:
    v29 = (char *)a2 + 160;
    goto LABEL_26;
  }
  v29 = (char *)a2 + 164;
LABEL_26:
  v30 = *(_DWORD *)v29;
  v31 = result - v30;
  if (__OFSUB__((_DWORD)result, v30))
    v31 = (result >> 31) + 0x7FFFFFFF;
  v32 = v31 - i;
  if (__OFSUB__(v31, i))
    v32 = (v31 >> 31) + 0x7FFFFFFF;
  if (v32 < 1)
    goto LABEL_31;
  if (!v11)
  {
    if (!v17)
    {
      v37 = v32 >> 1;
      v38 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
      if (v38 > 4)
        v39 = 0;
      else
        v39 = qword_1969FCAC0[v38];
      *((_DWORD *)a2 + v39 + 42) = v37;
      v40 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
      if (v40 > 4)
        v41 = 2;
      else
        v41 = qword_1969FCAE8[v40];
      *((_DWORD *)a2 + v41 + 42) = v37;
      return result;
    }
    v35 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
    if (v35 > 4)
      v36 = 0;
    else
      v36 = qword_1969FCAC0[v35];
    *((_DWORD *)a2 + v36 + 42) = v32;
    goto LABEL_31;
  }
  if (v17)
  {
LABEL_31:
    if (v17 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v18);
    }
    goto LABEL_32;
  }
  v33 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
  if (v33 > 4)
    v34 = 2;
  else
    v34 = qword_1969FCAE8[v33];
  *((_DWORD *)a2 + v34 + 42) = v32;
LABEL_32:
  if (v11 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v12);
  }
  return result;
}

uint64_t WebCore::RenderGrid::updateAutoMarginsInRowAxisIfNeeded(WebCore::RenderGrid *this, WebCore::RenderBox *a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int *v13;
  int v14;
  unint64_t v15;
  _BOOL4 v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int i;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  int v35;
  uint64_t result;
  char v37;
  char *v38;
  int v39;
  unsigned int v40;
  int v41;
  char *v42;
  int v43;
  int v44;
  unsigned __int8 v45;
  char v46;
  char v47;
  int v48;
  unsigned __int8 v49;
  char v50;
  char v51;

  v4 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 24);
  v6 = *((_DWORD *)this + 30);
  v5 = *((_DWORD *)this + 31);
  v7 = v6 & 0x4000000;
  v8 = (v6 >> 26) & 1;
  v9 = (unsigned __int16)v5 >> 13;
  if ((v9 - 2) >= 2)
  {
    if (v9 == 4)
    {
      v8 = v7 == 0;
    }
    else if (v9 != 5)
    {
      v10 = 3;
      if (v7)
        v10 = 1;
      goto LABEL_6;
    }
  }
  v18 = v8 == 0;
  v10 = 2;
  if (v18)
    v10 = 0;
LABEL_6:
  v11 = v5 >> 13;
  v12 = v4 + 8 * v10;
  v13 = (int *)(v12 + 40);
  v51 = 0;
  v49 = *(_BYTE *)(v12 + 44);
  v14 = v49;
  v50 = *(_BYTE *)(v12 + 45);
  if (v49 - 2 >= 9)
  {
    if (v49 == 11)
    {
      v15 = *v13;
      v48 = *v13;
      WebCore::Length::ref(&v48);
      v4 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 24);
      v11 = *((_DWORD *)this + 31) >> 13;
      v7 = *((_DWORD *)this + 30) & 0x4000000;
    }
    else
    {
      v15 = 0;
    }
  }
  else
  {
    v15 = *v13;
  }
  v16 = v7 != 0;
  v17 = v11 & 7;
  if ((v17 - 2) >= 2)
  {
    if (v17 == 4)
    {
      v16 = v7 == 0;
    }
    else if (v17 != 5)
    {
      v18 = v7 == 0;
      v19 = 3;
      if (v18)
        v19 = 1;
      goto LABEL_14;
    }
  }
  v19 = 2;
  if (v16)
    v19 = 0;
LABEL_14:
  v20 = v4 + 8 * v19;
  v21 = (int *)(v20 + 40);
  v47 = 0;
  v45 = *(_BYTE *)(v20 + 44);
  v22 = v45;
  v46 = *(_BYTE *)(v20 + 45);
  if (v45 - 2 >= 9)
  {
    v23 = 0;
    if (v45 == 11)
    {
      v23 = *v21;
      v44 = *v21;
      WebCore::Length::ref(&v44);
    }
  }
  else
  {
    v23 = *v21;
  }
  if (!v14)
    goto LABEL_58;
  v24 = *((_DWORD *)a2 + 30);
  v25 = (v24 >> 26) & 1;
  v26 = (unsigned __int16)*((_DWORD *)a2 + 31) >> 13;
  if ((v26 - 2) < 2)
    goto LABEL_74;
  if (v26 == 4)
  {
    v25 = (v24 & 0x4000000) == 0;
LABEL_74:
    v18 = v25 == 0;
    v27 = 2;
    if (v18)
      v27 = 0;
    goto LABEL_22;
  }
  if (v26 == 5)
    goto LABEL_74;
  v27 = 3;
  if ((v24 & 0x4000000) != 0)
    v27 = 1;
LABEL_22:
  for (i = *((_DWORD *)a2 + v27 + 42); ; i = 0)
  {
    if (!v22)
      goto LABEL_31;
    v29 = *((_DWORD *)a2 + 30);
    v30 = (v29 >> 26) & 1;
    v31 = (unsigned __int16)*((_DWORD *)a2 + 31) >> 13;
    if ((v31 - 2) < 2)
      goto LABEL_78;
    if (v31 == 4)
    {
      v30 = (v29 & 0x4000000) == 0;
LABEL_78:
      v18 = v30 == 0;
      v32 = 2;
      if (!v18)
        v32 = 0;
      goto LABEL_29;
    }
    if (v31 == 5)
      goto LABEL_78;
    v32 = 3;
    if ((v29 & 0x4000000) == 0)
      v32 = 1;
LABEL_29:
    v33 = *((_DWORD *)a2 + v32 + 42);
    v34 = __OFADD__(i, v33);
    v35 = i + v33;
    i = v34 ? (i >> 31) + 0x7FFFFFFF : v35;
LABEL_31:
    result = WebCore::RenderBox::overridingContainingBlockContentLogicalWidth(a2);
    if (v37)
      break;
    __break(1u);
LABEL_58:
    ;
  }
  if ((result & 0xFF00000000) != 0)
  {
    if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4)
    {
      v38 = (char *)a2 + 160;
      goto LABEL_35;
    }
  }
  else
  {
    result = std::__throw_bad_optional_access[abi:sn180100]();
  }
  v38 = (char *)a2 + 164;
LABEL_35:
  v39 = *(_DWORD *)v38;
  v40 = result - v39;
  if (__OFSUB__((_DWORD)result, v39))
    v40 = (result >> 31) + 0x7FFFFFFF;
  v41 = v40 - i;
  if (__OFSUB__(v40, i))
    v41 = (v40 >> 31) + 0x7FFFFFFF;
  if (v41 < 1)
  {
LABEL_40:
    if (v22 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v23);
    }
    goto LABEL_41;
  }
  v42 = (char *)this + 80;
  if (v14)
  {
    if (v22)
      goto LABEL_40;
    result = WebCore::RenderBox::setMarginEnd((uint64_t)a2, v41, (uint64_t)v42);
LABEL_41:
    if (v14 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      return (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v15);
    }
  }
  else
  {
    if (v22)
    {
      result = WebCore::RenderBox::setMarginStart((uint64_t)a2, v41, (uint64_t)v42);
      goto LABEL_40;
    }
    v43 = v41 >> 1;
    WebCore::RenderBox::setMarginStart((uint64_t)a2, v41 >> 1, (uint64_t)v42);
    return WebCore::RenderBox::setMarginEnd((uint64_t)a2, v43, (uint64_t)v42);
  }
  return result;
}

uint64_t WebCore::RenderGrid::setLogicalPositionForChild(WebCore::RenderGrid *this, WebCore::RenderBox *a2)
{
  int v4;
  unsigned int v5;
  uint64_t result;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char *v14;
  char *v15;
  int *v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  v4 = WebCore::RenderGrid::rowAxisOffsetForChild(this, a2);
  v5 = v4;
  if ((*((_BYTE *)this + 123) & 4) != 0)
  {
    v13 = WebCore::RenderGrid::translateRTLCoordinate(this, v4);
    v14 = (char *)a2 + 164;
    if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4)
      v15 = (char *)a2 + 160;
    else
      v15 = (char *)a2 + 164;
    if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 < 4)
      v14 = (char *)a2 + 160;
    if (((*((_BYTE *)a2 + 21) & 0x10) == 0) == ((*((_BYTE *)this + 21) & 0x10) == 0))
      v16 = (int *)v15;
    else
      v16 = (int *)v14;
    v17 = *v16;
    v18 = __OFSUB__(v13, v17);
    v19 = v13 - v17;
    if (v18)
      v5 = (v13 >> 31) + 0x7FFFFFFF;
    else
      v5 = v19;
  }
  result = WebCore::RenderGrid::columnAxisOffsetForChild(this, a2);
  v7 = ((*((_BYTE *)a2 + 21) & 0x10) == 0) ^ ((*((_BYTE *)this + 21) & 0x10) == 0);
  v8 = v7 == 0;
  if (v7)
    v9 = v5;
  else
    v9 = result;
  if (v8)
    v10 = v5;
  else
    v10 = result;
  v11 = v10 | (v9 << 32);
  v12 = __ROR8__(v11, 32);
  if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 <= 3)
    v11 = v12;
  *((_QWORD *)a2 + 19) = v11;
  return result;
}

BOOL WebCore::RenderGrid::hasStaticPositionForChild(__int16 a1, _BYTE *a2, int a3)
{
  unsigned __int8 *v3;

  if (a3)
  {
    if ((a1 & 0x1000) != 0)
    {
LABEL_3:
      if (!a2[36])
      {
        v3 = a2 + 20;
        return *v3 == 0;
      }
      return 0;
    }
  }
  else if ((a1 & 0x1000) == 0)
  {
    goto LABEL_3;
  }
  if (!a2[12])
  {
    v3 = a2 + 28;
    return *v3 == 0;
  }
  return 0;
}

uint64_t WebCore::RenderGrid::layoutPositionedObject(WebCore::RenderGrid *this, WebCore::RenderBox *a2, int a3, int a4)
{
  WebCore::Element *v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  BOOL v16;
  uint64_t v17;

  if ((*((_BYTE *)this + 45) & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    v8 = *(WebCore::Element **)(*((_QWORD *)this + 3) + 8);
    if (v8 && (*((_WORD *)v8 + 14) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1963D1644);
    }
  }
  v9 = (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 636) >> 18) & 3;
  if (v9)
  {
    v16 = (*((_BYTE *)this + 96) & 0x1F) != 0xD && (*((_BYTE *)this + 96) & 0x1Eu) - 14 > 0xFFFFFFF5;
    if (!v16
      && (v9 == 2 || v8 && !WebCore::Element::isRelevantToUser(v8))
      && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                       + 8)
                                           + 1944)
                               + 248)
                   + 479))
    {
      return WebCore::RenderElement::clearNeedsLayoutForSkippedContent(a2);
    }
  }
  v10 = WebCore::RenderGrid::gridAreaBreadthForOutOfFlowChild((uint64_t)this, a2, 0);
  v11 = WebCore::RenderGrid::gridAreaBreadthForOutOfFlowChild((uint64_t)this, a2, (WTF::StringImpl *)1);
  v17 = v10 | 0x100000000;
  v12 = (_QWORD *)WebCore::gOverridingContainingBlockContentLogicalWidthMap;
  if (!WebCore::gOverridingContainingBlockContentLogicalWidthMap)
  {
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = 0;
    v12[1] = 0;
    WebCore::gOverridingContainingBlockContentLogicalWidthMap = (uint64_t)v12;
  }
  WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,std::optional<WebCore::LayoutUnit>&>((uint64_t)v12, a2, (int *)&v17);
  v17 = v11 | 0x100000000;
  v13 = (_QWORD *)WebCore::gOverridingContainingBlockContentLogicalHeightMap;
  if (!WebCore::gOverridingContainingBlockContentLogicalHeightMap)
  {
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = 0;
    v13[1] = 0;
    WebCore::gOverridingContainingBlockContentLogicalHeightMap = (uint64_t)v13;
  }
  WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,std::optional<WebCore::LayoutUnit>&>((uint64_t)v13, a2, (int *)&v17);
  v14 = *((_DWORD *)a2 + 5);
  if ((v14 & 0x20) == 0)
    *((_DWORD *)a2 + 5) = v14 | 0x20;
  WebCore::RenderBlock::layoutPositionedObject(this, a2, a3, a4);
  WebCore::RenderGrid::setLogicalOffsetForChild((uint64_t)this, (uint64_t)a2, 0);
  return WebCore::RenderGrid::setLogicalOffsetForChild((uint64_t)this, (uint64_t)a2, 1);
}

uint64_t WebCore::RenderGrid::gridAreaBreadthForOutOfFlowChild(uint64_t a1, const WebCore::RenderGrid *a2, WTF::StringImpl *a3)
{
  uint64_t v6;
  int v7;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  int v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  WTF **v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int i;
  unsigned int v24;
  WTF **v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int *v44;
  int v45;
  int v46;
  unsigned int v47;
  void *v48;
  WTF *v49;
  double v50;
  int v51;
  uint64_t v52;
  _BYTE *v53;
  int v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;

  v6 = *(_QWORD *)(a1 + 328);
  v7 = *(_DWORD *)(v6 + 100);
  if ((_DWORD)a3 != 1)
  {
    if (v7)
      v7 = *(_DWORD *)(*(_QWORD *)(v6 + 88) + 12);
    else
      v7 = WebCore::GridPositionsResolver::explicitGridColumnCount((WebCore::GridPositionsResolver *)a1, a2);
  }
  v57 = 0;
  v56 = 0;
  if (!WebCore::RenderGrid::computeGridPositionsForOutOfFlowChild((WebCore::GridPositionsResolver *)a1, a2, a3, (int *)&v57 + 1, (BOOL *)&v56 + 1, (int *)&v57, (BOOL *)&v56))
  {
    if ((_DWORD)a3)
    {
      if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
        return WebCore::RenderBox::clientWidth((WebCore::RenderBox *)a1);
      else
        return WebCore::RenderBox::clientHeight((WebCore::RenderBox *)a1);
    }
    return WebCore::RenderBox::clientLogicalWidth((WebCore::RenderBox *)a1);
  }
  v9 = HIBYTE(v56);
  if (HIBYTE(v56) && (_BYTE)v56)
  {
    if ((_DWORD)a3)
      return WebCore::RenderBox::clientLogicalHeight((WebCore::RenderBox *)a1);
    return WebCore::RenderBox::clientLogicalWidth((WebCore::RenderBox *)a1);
  }
  if ((_DWORD)a3)
  {
    v10 = a1 + 584;
    v11 = (uint64_t *)(a1 + 736);
    v12 = WebCore::RenderBlock::borderBefore((WebCore::RenderBlock *)a1);
  }
  else
  {
    v10 = a1 + 568;
    v11 = (uint64_t *)(a1 + 728);
    v50 = WebCore::RenderStyle::borderStartWidth((WebCore::RenderStyle *)(a1 + 80)) * 64.0;
    if (v50 >= 2147483650.0)
    {
      v12 = 0x7FFFFFFF;
    }
    else if (v50 <= -2147483650.0)
    {
      v12 = 0x80000000;
    }
    else
    {
      v12 = (int)v50;
    }
  }
  v13 = v12;
  if (!v9)
  {
    v14 = (WTF *)*((_QWORD *)a2 + 1);
    if (!v14)
    {
      v14 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v14 = 1;
      *((_QWORD *)v14 + 1) = a2;
      v49 = (WTF *)*((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v14;
      if (v49)
      {
        if (*(_DWORD *)v49 == 1)
        {
          WTF::fastFree(v49, v48);
          v14 = (WTF *)*((_QWORD *)a2 + 1);
        }
        else
        {
          --*(_DWORD *)v49;
        }
      }
    }
    ++*(_DWORD *)v14;
    v15 = *v11;
    if (*v11
      || (WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::optional<unsigned long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::rehash(v11, 8u), (v15 = *v11) != 0))
    {
      v16 = *(_DWORD *)(v15 - 8);
    }
    else
    {
      v16 = 0;
    }
    v17 = 0;
    v18 = *((_QWORD *)v14 + 1);
    v19 = (~(v18 << 32) + v18) ^ ((unint64_t)(~(v18 << 32) + v18) >> 22);
    v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
    v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
    v22 = (v21 >> 31) ^ v21;
    for (i = 1; ; ++i)
    {
      v24 = v22 & v16;
      v25 = (WTF **)(v15 + 24 * v24);
      v26 = *v25;
      if (!*v25)
        break;
      if (v26 != (WTF *)-1)
      {
        v25 = v17;
        if (*((_QWORD *)v26 + 1) == v18)
        {
          v52 = v15 + 24 * v24;
          v54 = *(unsigned __int8 *)(v52 + 16);
          v53 = (_BYTE *)(v52 + 16);
          v55 = SHIDWORD(v57);
          if (!v54)
            *v53 = 1;
          *((_QWORD *)v53 - 1) = v55;
          if (*(_DWORD *)v14 == 1)
            WTF::fastFree(v14, v17);
          else
            --*(_DWORD *)v14;
          goto LABEL_28;
        }
      }
      v22 = i + v24;
      v17 = v25;
    }
    if (v17)
    {
      *v17 = 0;
      v17[1] = 0;
      v17[2] = 0;
      --*(_DWORD *)(*v11 - 16);
      *v17 = v14;
    }
    else
    {
      *v25 = v14;
      v17 = (WTF **)(v15 + 24 * v24);
    }
    v27 = (WTF *)SHIDWORD(v57);
    if (!*((_BYTE *)v17 + 16))
      *((_BYTE *)v17 + 16) = 1;
    v17[1] = v27;
    v28 = *v11;
    if (*v11)
      v29 = *(_DWORD *)(v28 - 12) + 1;
    else
      v29 = 1;
    *(_DWORD *)(v28 - 12) = v29;
    v30 = *v11;
    if (*v11)
      v31 = *(_DWORD *)(v30 - 12);
    else
      v31 = 0;
    v32 = (*(_DWORD *)(v30 - 16) + v31);
    v33 = *(unsigned int *)(v30 - 4);
    if (v33 > 0x400)
    {
      if (v33 > 2 * v32)
        goto LABEL_28;
    }
    else if (3 * v33 > 4 * v32)
    {
      goto LABEL_28;
    }
    WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::optional<unsigned long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::expand(v11);
LABEL_28:
    if (*(unsigned int *)(v10 + 12) <= (unint64_t)SHIDWORD(v57))
    {
      __break(0xC471u);
      JUMPOUT(0x1963D1C18);
    }
    v13 = *(_DWORD *)(*(_QWORD *)v10 + 4 * SHIDWORD(v57));
  }
  if ((_BYTE)v56)
  {
    if ((_DWORD)a3 == 1)
    {
      v47 = WebCore::RenderBox::clientLogicalHeight((WebCore::RenderBox *)a1);
    }
    else if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
    {
      v47 = WebCore::RenderBox::clientHeight((WebCore::RenderBox *)a1);
    }
    else
    {
      v47 = WebCore::RenderBox::clientWidth((WebCore::RenderBox *)a1);
    }
    if (__OFADD__(v47, v12))
      v35 = (v47 >> 31) + 0x7FFFFFFF;
    else
      v35 = v47 + v12;
  }
  else
  {
    v34 = v57;
    if (*(unsigned int *)(v10 + 12) <= (unint64_t)(int)v57)
    {
      __break(0xC471u);
      JUMPOUT(0x1963D1C20);
    }
    v35 = *(_DWORD *)(*(_QWORD *)v10 + 4 * (int)v57);
    v36 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 40);
    v37 = (_BYTE *)(v36 + 388);
    v38 = (_BYTE *)(v36 + 376);
    if ((_DWORD)a3)
      v38 = v37;
    if (!*v38 && (v38[8] & 0xF7) == 3)
    {
      if ((_DWORD)a3)
        v51 = WebCore::RenderBox::contentLogicalHeight((WebCore::RenderBox *)a1);
      else
        v51 = WebCore::RenderBox::contentLogicalWidth((WebCore::RenderBox *)a1);
      v41 = v51 & 0xFFFFFF00;
      v39 = v51;
      v40 = 0x100000000;
    }
    else
    {
      v39 = 0;
      v40 = 0;
      v41 = 0;
    }
    if (v34 >= 1 && v34 < v7)
    {
      v42 = WebCore::RenderGrid::guttersSize((WebCore::RenderElement *)a1, (int)a3, v34 - 1, 2u, v40 | v41 | v39);
      v43 = v35 - v42;
      if (__OFSUB__(v35, v42))
        v43 = (v35 >> 31) + 0x7FFFFFFF;
      v44 = (int *)(a1 + 612);
      if (!(_DWORD)a3)
        v44 = (int *)(a1 + 604);
      v45 = *v44;
      v35 = v43 - v45;
      if (__OFSUB__(v43, v45))
        v35 = (v43 >> 31) + 0x7FFFFFFF;
    }
  }
  v46 = v35 - v13;
  if (__OFSUB__(v35, v13))
    v46 = (v35 >> 31) + 0x7FFFFFFF;
  return v46 & ~(v46 >> 31);
}

uint64_t WebCore::RenderGrid::setLogicalOffsetForChild(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  int v6;
  _BOOL4 v7;
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  int *v11;
  unsigned int v12;
  int *v13;
  int *v14;
  int *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  unsigned int v21;
  int v22;

  v5 = *(_QWORD *)(a2 + 32);
  if (v5)
    v5 = *(_QWORD *)(v5 + 8);
  if (v5 == a1)
  {
    v6 = *(_DWORD *)(a1 + 20);
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 20);
    v22 = a3;
    result = WebCore::RenderGrid::hasStaticPositionForChild(v6, *(_BYTE **)(*(_QWORD *)(a2 + 88) + 24), a3);
    a3 = v22;
    if ((result & 1) != 0)
      return result;
  }
  if (((*(_BYTE *)(a2 + 21) & 0x10) == 0) == ((v6 & 0x1000) == 0))
    v7 = a3;
  else
    v7 = a3 == 0;
  if (v7)
  {
    if (a3 == 1)
    {
      result = WebCore::RenderGrid::columnAxisOffsetForChild((WebCore::RenderGrid *)a1, (const WebCore::RenderBox *)a2);
    }
    else
    {
      result = WebCore::RenderGrid::rowAxisOffsetForChild((WebCore::RenderGrid *)a1, (const WebCore::RenderBox *)a2);
      if ((*(_BYTE *)(a1 + 123) & 4) != 0)
      {
        v12 = WebCore::RenderGrid::translateRTLCoordinate((WebCore::RenderBox *)a1, result);
        v13 = (int *)(a2 + 164);
        if (((*(_DWORD *)(a2 + 124) >> 13) & 6u) - 2 >= 4)
          v14 = (int *)(a2 + 160);
        else
          v14 = (int *)(a2 + 164);
        if (((*(_DWORD *)(a2 + 124) >> 13) & 6u) - 2 < 4)
          v13 = (int *)(a2 + 160);
        if (((*(_BYTE *)(a2 + 21) & 0x10) == 0) == ((*(_BYTE *)(a1 + 21) & 0x10) == 0))
          v15 = v14;
        else
          v15 = v13;
        v16 = *v15;
        v17 = __OFSUB__(v12, v16);
        v18 = v12 - v16;
        if (v17)
          result = (v12 >> 31) + 0x7FFFFFFF;
        else
          result = v18;
      }
    }
    if (((*(_DWORD *)(a2 + 124) >> 13) & 6u) - 2 < 4)
      goto LABEL_15;
  }
  else
  {
    if (a3 == 1)
    {
      result = WebCore::RenderGrid::columnAxisOffsetForChild((WebCore::RenderGrid *)a1, (const WebCore::RenderBox *)a2);
    }
    else
    {
      result = WebCore::RenderGrid::rowAxisOffsetForChild((WebCore::RenderGrid *)a1, (const WebCore::RenderBox *)a2);
      if ((*(_BYTE *)(a1 + 123) & 4) != 0)
      {
        v9 = WebCore::RenderGrid::translateRTLCoordinate((WebCore::RenderBox *)a1, result);
        v10 = ((*(_DWORD *)(a2 + 124) >> 13) & 6) - 2;
        if (((*(_BYTE *)(a2 + 21) & 0x10) == 0) == ((*(_BYTE *)(a1 + 21) & 0x10) == 0))
        {
          v19 = v10 >= 4;
          v11 = (int *)(a2 + 164);
          if (v19)
            v11 = (int *)(a2 + 160);
        }
        else if (v10 < 4)
        {
          v11 = (int *)(a2 + 160);
        }
        else
        {
          v11 = (int *)(a2 + 164);
        }
        v20 = *v11;
        v17 = __OFSUB__(v9, v20);
        v21 = v9 - v20;
        if (v17)
          result = (v9 >> 31) + 0x7FFFFFFF;
        else
          result = v21;
      }
    }
    if (((*(_DWORD *)(a2 + 124) >> 13) & 6u) - 2 >= 4)
    {
LABEL_15:
      *(_DWORD *)(a2 + 152) = result;
      return result;
    }
  }
  *(_DWORD *)(a2 + 156) = result;
  return result;
}

uint64_t WebCore::RenderGrid::availableAlignmentSpaceForChildBeforeStretching(WebCore::RenderBlock *a1, unsigned int a2, WebCore::RenderBox *a3, unsigned int a4)
{
  unsigned int v5;
  int v6;
  int v7;

  if (((*((_BYTE *)a3 + 21) & 0x10) == 0) == ((*((_BYTE *)a1 + 21) & 0x10) == 0))
    v5 = a4;
  else
    v5 = a4 == 0;
  v6 = WebCore::GridLayoutFunctions::marginLogicalSizeForChild(a1, v5, a3);
  v7 = a2 - v6;
  if (__OFSUB__(a2, v6))
    v7 = (a2 >> 31) + 0x7FFFFFFF;
  return v7 & ~(v7 >> 31);
}

uint64_t WebCore::RenderBox::setMarginStart(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  BOOL v9;

  v3 = result + 80;
  if (a3)
    v3 = a3;
  v4 = *(_DWORD *)(v3 + 40);
  v5 = *(_DWORD *)(v3 + 44);
  v6 = (v4 >> 26) & 1;
  v7 = (unsigned __int16)v5 >> 13;
  if ((v7 - 2) >= 2)
  {
    if (v7 == 4)
    {
      v6 = (v4 & 0x4000000) == 0;
    }
    else if (v7 != 5)
    {
      v8 = 3;
      if ((v4 & 0x4000000) != 0)
        v8 = 1;
      goto LABEL_8;
    }
  }
  v9 = v6 == 0;
  v8 = 2;
  if (v9)
    v8 = 0;
LABEL_8:
  *(_DWORD *)(result + 4 * v8 + 168) = a2;
  return result;
}

uint64_t WebCore::RenderBox::setMarginEnd(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  BOOL v9;

  v3 = result + 80;
  if (a3)
    v3 = a3;
  v4 = *(_DWORD *)(v3 + 40);
  v5 = *(_DWORD *)(v3 + 44);
  v6 = (v4 >> 26) & 1;
  v7 = (unsigned __int16)v5 >> 13;
  if ((v7 - 2) >= 2)
  {
    if (v7 == 4)
    {
      v6 = (v4 & 0x4000000) == 0;
    }
    else if (v7 != 5)
    {
      v8 = 3;
      if ((v4 & 0x4000000) == 0)
        v8 = 1;
      goto LABEL_8;
    }
  }
  v9 = v6 == 0;
  v8 = 2;
  if (!v9)
    v8 = 0;
LABEL_8:
  *(_DWORD *)(result + 4 * v8 + 168) = a2;
  return result;
}

uint64_t WebCore::RenderGrid::isChildEligibleForMarginTrim(uint64_t a1, int a2, uint64_t a3)
{
  int v4;
  unint64_t v5;
  uint64_t result;
  BOOL v7;
  unint64_t v8;
  int v9;
  uint64_t v10;

  v4 = a2 - 1;
  v5 = WebCore::Grid::gridItemSpanIgnoringCollapsedTracks(*(_QWORD *)(a1 + 328), a3, (a2 - 1) < 2);
  result = 0;
  switch(v4)
  {
    case 0:
    case 3:
      v7 = (_DWORD)v5 == 0;
      goto LABEL_7;
    case 1:
      v8 = HIDWORD(v5);
      v9 = *(_DWORD *)(*(_QWORD *)(a1 + 328) + 100);
      goto LABEL_6;
    case 7:
      v8 = HIDWORD(v5);
      v10 = *(_QWORD *)(a1 + 328);
      if (*(_DWORD *)(v10 + 100))
        v9 = *(_DWORD *)(*(_QWORD *)(v10 + 88) + 12);
      else
        v9 = 0;
LABEL_6:
      v7 = v9 == (_DWORD)v8;
LABEL_7:
      result = v7;
      break;
    default:
      return result;
  }
  return result;
}

BOOL WebCore::RenderGrid::isBaselineAlignmentForChild(uint64_t a1, WebCore::RenderElement *this)
{
  int v4;
  char v5;
  uint64_t v6;
  char v7;
  unsigned int v8;
  int v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  _BOOL8 result;

  if ((*((_DWORD *)this + 5) & 0x1800000) != 0x1000000)
  {
    v4 = *((unsigned __int8 *)this + 46);
    if (v4 == 12
      && (++*((_DWORD *)this + 4), (WebCore::RenderGrid::isSubgridInParentDirection(this, 1) & 1) != 0))
    {
      v5 = 3;
    }
    else
    {
      if ((*((_BYTE *)this + 52) & 7) == 3)
        v5 = 7;
      else
        v5 = 3;
      v6 = *((_QWORD *)this + 11);
      v7 = *(_BYTE *)(*(_QWORD *)(v6 + 32) + 125);
      v8 = v7 & 0xF;
      if (v8 == 1)
      {
        v7 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 124);
        v8 = v7 & 0xF;
      }
      if (v8 >= 3)
        v5 = v7;
      if (v4 != 12)
      {
LABEL_14:
        v10 = *(_BYTE **)(v6 + 24);
        if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
        {
          if (v10[68])
          {
            v11 = v10 + 52;
            goto LABEL_17;
          }
        }
        else if (v10[44])
        {
          v11 = v10 + 60;
LABEL_17:
          result = *v11 != 0;
          goto LABEL_18;
        }
        result = 0;
LABEL_18:
        if ((v5 & 0xE) == 4)
          return result;
        return 0;
      }
    }
    v9 = *((_DWORD *)this + 4);
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1963D2118);
    }
    *((_DWORD *)this + 4) = v9 - 1;
    v6 = *((_QWORD *)this + 11);
    goto LABEL_14;
  }
  return 0;
}

uint64_t WebCore::RenderGrid::baselinePosition(int *a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t LineBaseline;
  int *v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  unsigned int v17;
  BOOL v20;
  int *v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;

  LineBaseline = WebCore::RenderGrid::firstLineBaseline((WebCore::RenderGrid *)a1);
  if (HIDWORD(LineBaseline))
  {
    v7 = a1 + 43;
    if (!a4)
      v7 = a1 + 42;
    v8 = (*v7 + (*v7 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
    v9 = __OFADD__((_DWORD)LineBaseline, v8);
    v10 = LineBaseline + v8;
    v11 = (LineBaseline >> 31) + 0x7FFFFFFF;
  }
  else
  {
    v13 = *(_QWORD *)(*((_QWORD *)a1 + 4) + 8);
    v14 = v13 + 80;
    if (!v13)
      v14 = 0;
    v15 = (unsigned __int16)*(_DWORD *)(v14 + 44) >> 13;
    LOBYTE(v16) = 2;
    switch((unsigned __int16)*(_DWORD *)(v14 + 44) >> 13)
    {
      case 1:
      case 2:
        v16 = (unsigned __int16)*(_DWORD *)(v14 + 44) >> 13;
        break;
      case 3:
      case 5:
        LOBYTE(v16) = 3;
        break;
      case 4:
        break;
      default:
        LOBYTE(v16) = 0;
        break;
    }
    v17 = (*(_DWORD *)(*(_QWORD *)(v14 + 24) + 232) >> 4) & 3;
    v20 = (v16 & 6) != 2 || v17 == 2 || v17 > 1;
    if (v15 == 2 && v20)
    {
      v22 = 0;
    }
    else
    {
      v21 = a1 + 40;
      if (!a4)
        v21 = a1 + 41;
      v22 = *v21;
      if (!v20)
      {
        if (v22 >= 0)
          v26 = *v21;
        else
          v26 = v22 + 1;
        v22 = v26 >> 1;
      }
    }
    v23 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)a1 + 1112))(a1, 0);
    v24 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)a1 + 1120))(a1, 0);
    v25 = v23 + v24;
    if (__OFADD__(v23, v24))
      v25 = (v23 >> 31) + 0x7FFFFFFF;
    v9 = __OFADD__(v22, v25);
    v10 = v22 + v25;
    v11 = (v22 >> 31) + 0x7FFFFFFF;
  }
  if (v9)
    return v11;
  else
    return v10;
}

uint64_t WebCore::RenderGrid::firstLineBaseline(WebCore::RenderGrid *this)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  void *v9;
  WTF *v10;
  WebCore::RenderBoxModelObject *v11;
  unsigned int v12;
  uint64_t v13;
  _DWORD *v14;
  BOOL v15;
  int *v16;
  int *v17;
  unsigned int v18;
  BOOL v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v25;
  uint64_t v26;
  int *v27;
  int *v28;
  int v29;
  WebCore::RenderBoxModelObject **v30;

  v2 = *((_QWORD *)this + 4);
  if (!v2
    || (v3 = *(_QWORD *)(v2 + 8)) == 0
    || ((*((_DWORD *)this + 31) ^ *(_DWORD *)(v3 + 124)) & 0xE000) != 0
    && ((*(char *)(v3 + 45) & 0x80000000) == 0 || (*((_BYTE *)this + 21) & 4) != 0)
    || (v5 = *(_QWORD *)(*((_QWORD *)this + 41) + 104)) == 0
    || !*(_DWORD *)(v5 - 12)
    || ((v6 = *(_QWORD *)(*((_QWORD *)this + 11) + 40), (*(_BYTE *)(v6 + 642) & 3u) - 3 <= 0xFFFFFFFD)
      ? (v7 = (*(_BYTE *)(v6 + 462) & 1) == 0)
      : (v7 = 0),
        v7 ? (v8 = (*(_DWORD *)(v6 + 636) & 0xC0000) == 0) : (v8 = 0),
        !v8
     && ((*((_BYTE *)this + 20) & 1) != 0 || WebCore::RenderObject::isAtomicInlineLevelBox(this))
     && (*((_QWORD *)this + 12) & 0x1FLL) != 0x19
     && (*((unsigned __int8 *)this + 46) - 36 > 4 || (*((_BYTE *)this + 52) & 7) == 1)))
  {
    v23 = 0;
    LOBYTE(v22) = 0;
    return v22 | ((*(_QWORD *)&v1 & 0xFFFFFFLL) << 8) | (v23 << 32);
  }
  WebCore::RenderGrid::getBaselineChild((uint64_t *)&v30, (uint64_t)this, 4);
  v10 = (WTF *)v30;
  if (!v30)
  {
    LOBYTE(v22) = 0;
    v23 = 0;
    return v22 | ((*(_QWORD *)&v1 & 0xFFFFFFLL) << 8) | (v23 << 32);
  }
  v11 = v30[1];
  if (v11)
  {
    v12 = *((_DWORD *)this + 5);
    if (((*((_BYTE *)v11 + 21) & 0x10) == 0) == ((v12 & 0x1000) == 0))
    {
      v13 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)v11 + 1480))(v11);
      if ((v13 & 0xFF00000000) != 0)
      {
        v14 = (_DWORD *)*((_QWORD *)v10 + 1);
        v15 = ((v14[31] >> 13) & 6u) - 2 >= 4;
        v16 = v14 + 38;
        v17 = v14 + 39;
        if (!v15)
          v17 = v16;
        v18 = (*v17 + (*v17 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
        v19 = __OFADD__((_DWORD)v13, v18);
        v20 = v13 + v18;
        v21 = (v13 >> 31) + 0x7FFFFFFF;
LABEL_21:
        if (v19)
          v22 = v21;
        else
          v22 = v20;
        v1 = v22 >> 8;
        v23 = 1;
        goto LABEL_25;
      }
      v12 = *((_DWORD *)this + 5);
      v11 = (WebCore::RenderBoxModelObject *)*((_QWORD *)v10 + 1);
    }
    v25 = WebCore::synthesizedBaseline(v11, (uint64_t)this + 80, (v12 >> 12) & 1, 1);
    v26 = *((_QWORD *)v10 + 1);
    v27 = (int *)(v26 + 152);
    v28 = (int *)(v26 + 156);
    if ((*((_BYTE *)this + 21) & 0x10) != 0)
      v28 = v27;
    v29 = *v28;
    v19 = __OFADD__(v25, v29);
    v20 = v25 + v29;
    v21 = (v25 >> 31) + 0x7FFFFFFF;
    goto LABEL_21;
  }
  v23 = 0;
  LOBYTE(v22) = 0;
LABEL_25:
  if (*(_DWORD *)v10 == 1)
    WTF::fastFree(v10, v9);
  else
    --*(_DWORD *)v10;
  return v22 | ((*(_QWORD *)&v1 & 0xFFFFFFLL) << 8) | (v23 << 32);
}

uint64_t WebCore::RenderGrid::getBaselineChild(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t result;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  _DWORD **v21;
  uint64_t v22;
  WTF *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  int v28;
  void *v29;
  WTF *v30;
  unint64_t v32;
  int v33;
  char v34;
  WTF *v35;
  int v36;
  unsigned int v37;
  uint64_t v38;

  v5 = a1;
  v6 = *(_QWORD *)(a2 + 328);
  v7 = *(_DWORD *)(v6 + 100);
  if (v7)
    v8 = *(_DWORD *)(*(_QWORD *)(v6 + 88) + 12);
  else
    v8 = 0;
  v9 = v7 - 1;
  if (a3 == 4)
    v10 = 0;
  else
    v10 = v9;
  if (v8)
  {
    v11 = 0;
    v12 = 0;
    v13 = v8;
    while (1)
    {
      if (a3 == 4)
        v14 = v12;
      else
        v14 = ~(_DWORD)v12 + v13;
      result = (uint64_t)WebCore::Grid::cell(*(WebCore::Grid **)(a2 + 328), v10, v14);
      v17 = result;
      v18 = *(unsigned int *)(result + 12);
      v35 = (WTF *)&v38;
      v36 = 1;
      v37 = v18;
      v19 = (WTF *)&v38;
      if (v18 >= 2)
      {
        if (v18 >> 29)
        {
          __break(0xC471u);
          return result;
        }
        v19 = (WTF *)WTF::fastMalloc((WTF *)(8 * v18));
        v36 = v18;
        v35 = v19;
      }
      v20 = *(unsigned int *)(v17 + 12);
      if ((_DWORD)v20)
      {
        v21 = *(_DWORD ***)v17;
        v22 = 8 * v20;
        v23 = v19;
        do
        {
          v24 = *v21;
          if (*v21)
            ++*v24;
          *(_QWORD *)v23 = v24;
          v23 = (WTF *)((char *)v23 + 8);
          ++v21;
          v22 -= 8;
        }
        while (v22);
      }
      if (v37)
      {
        v25 = 8 * v37;
        while (1)
        {
          if (WebCore::RenderGrid::isBaselineAlignmentForChild(a2, *(WebCore::RenderElement **)(*(_QWORD *)v19 + 8)))
          {
            v34 = 0;
            v34 = WebCore::RenderGrid::selfAlignmentForChild(a2, 2, *(WebCore::RenderElement **)(*(_QWORD *)v19 + 8), 0) & 0xF;
            v32 = WebCore::RenderGrid::gridSpanForChild(a2, *(_QWORD *)(*(_QWORD *)v19 + 8), 1u);
            v33 = v28;
            if (v10 == WebCore::GridLayoutFunctions::alignmentContextForBaselineAlignment((unsigned int *)&v32, &v34))break;
          }
          if (!v11)
          {
            if (*(_QWORD *)v19)
              v11 = *(_QWORD *)(*(_QWORD *)v19 + 8);
            else
              v11 = 0;
          }
          v19 = (WTF *)((char *)v19 + 8);
          v25 -= 8;
          if (!v25)
            goto LABEL_28;
        }
        if (*(_QWORD *)v19)
          v11 = *(_QWORD *)(*(_QWORD *)v19 + 8);
        else
          v11 = 0;
LABEL_28:
        v19 = v35;
        if (v37)
        {
          v26 = 8 * v37;
          do
          {
            v27 = *(WTF **)v19;
            *(_QWORD *)v19 = 0;
            if (v27)
            {
              if (*(_DWORD *)v27 == 1)
                WTF::fastFree(v27, v16);
              else
                --*(_DWORD *)v27;
            }
            v19 = (WTF *)((char *)v19 + 8);
            v26 -= 8;
          }
          while (v26);
          v19 = v35;
        }
      }
      if (&v38 != (uint64_t *)v19 && v19)
      {
        v35 = 0;
        v36 = 0;
        WTF::fastFree(v19, v16);
      }
      if (++v12 == v13)
      {
        if (v11)
        {
          result = *(_QWORD *)(v11 + 8);
          if (!result)
          {
            result = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)result = 1;
            *(_QWORD *)(result + 8) = v11;
            v30 = *(WTF **)(v11 + 8);
            *(_QWORD *)(v11 + 8) = result;
            if (v30)
            {
              if (*(_DWORD *)v30 == 1)
              {
                WTF::fastFree(v30, v29);
                result = *(_QWORD *)(v11 + 8);
                if (!result)
                  goto LABEL_37;
              }
              else
              {
                --*(_DWORD *)v30;
              }
            }
          }
          ++*(_DWORD *)result;
        }
        else
        {
          result = 0;
        }
LABEL_37:
        v5 = a1;
        goto LABEL_38;
      }
    }
  }
  result = 0;
LABEL_38:
  *v5 = result;
  return result;
}

uint64_t WebCore::RenderGrid::lastLineBaseline(WebCore::RenderGrid *this)
{
  unsigned int v1;
  uint64_t v2;
  WebCore::RenderGrid *v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  void *v12;
  WTF *v13;
  int *v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  BOOL v18;
  int *v19;
  int *v20;
  unsigned int v21;
  BOOL v22;
  unsigned int v23;
  int v24;
  __int16 v25;
  unsigned int v26;
  char v29;
  int *v30;
  int v31;
  int v32;
  int v33;
  int *v34;
  int v35;
  int v36;
  uint64_t v37;
  BOOL v38;
  WTF *v39;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    goto LABEL_4;
  v3 = *(WebCore::RenderGrid **)(v2 + 8);
  if (!v3)
    goto LABEL_4;
  if (((*((_DWORD *)this + 31) ^ *((_DWORD *)v3 + 31)) & 0xE000) != 0)
    goto LABEL_4;
  v8 = *(_QWORD *)(*((_QWORD *)this + 41) + 104);
  if (!v8 || !*(_DWORD *)(v8 - 12))
    goto LABEL_4;
  v9 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  v10 = (*(_BYTE *)(v9 + 642) & 3u) - 3 <= 0xFFFFFFFD && (*(_BYTE *)(v9 + 462) & 1) == 0;
  if (!v10 || (*(_DWORD *)(v9 + 636) & 0xC0000) != 0)
  {
    v36 = *((_DWORD *)this + 5);
    if ((v36 & 1) != 0)
      goto LABEL_69;
    if ((*((_BYTE *)this + 45) & 2) == 0)
      v3 = this;
    v37 = *((_QWORD *)v3 + 12);
    v38 = (v37 & 0x1Fu) > 0x19 || ((1 << (v37 & 0x1F)) & 0x3528029) == 0;
    if (!v38 && ((v36 & 2) != 0 || (v37 & 0x1F) != 0))
    {
LABEL_69:
      if ((*((_QWORD *)this + 12) & 0x1FLL) != 0x19
        && (*((unsigned __int8 *)this + 46) - 36 > 4 || (*((_BYTE *)this + 52) & 7) == 1))
      {
LABEL_4:
        v5 = 0;
        LOBYTE(v6) = 0;
        return v6 | ((*(_QWORD *)&v1 & 0xFFFFFFLL) << 8) | (v5 << 32);
      }
    }
  }
  WebCore::RenderGrid::getBaselineChild((uint64_t *)&v39, (uint64_t)this, 5);
  v13 = v39;
  if (!v39)
  {
    LOBYTE(v6) = 0;
    v5 = 0;
    return v6 | ((*(_QWORD *)&v1 & 0xFFFFFFLL) << 8) | (v5 << 32);
  }
  v14 = (int *)*((_QWORD *)v39 + 1);
  if (v14)
  {
    v15 = *((_DWORD *)this + 5);
    if (((*((_BYTE *)v14 + 21) & 0x10) == 0) == ((v15 & 0x1000) == 0))
    {
      v16 = (*(uint64_t (**)(int *))(*(_QWORD *)v14 + 1488))(v14);
      if ((v16 & 0xFF00000000) != 0)
      {
        v17 = (_DWORD *)*((_QWORD *)v13 + 1);
        v18 = ((v17[31] >> 13) & 6u) - 2 >= 4;
        v19 = v17 + 38;
        v20 = v17 + 39;
        if (!v18)
          v20 = v19;
        v21 = (*v20 + (*v20 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
        v22 = __OFADD__((_DWORD)v16, v21);
        v23 = v16 + v21;
        v24 = (v16 >> 31) + 0x7FFFFFFF;
LABEL_50:
        if (v22)
          v6 = v24;
        else
          v6 = v23;
        v1 = v6 >> 8;
        v5 = 1;
        goto LABEL_54;
      }
      v15 = *((_DWORD *)this + 5);
      v14 = (int *)*((_QWORD *)v13 + 1);
    }
    LOBYTE(v25) = 2;
    switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
    {
      case 1:
      case 2:
        v25 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
        break;
      case 3:
      case 5:
        LOBYTE(v25) = 3;
        break;
      case 4:
        break;
      default:
        LOBYTE(v25) = 0;
        break;
    }
    v10 = (v25 & 6) == 2;
    v26 = (*(_DWORD *)(*((_QWORD *)this + 13) + 232) >> 4) & 3;
    v29 = !v10 || v26 == 2 || v26 > 1;
    if ((unsigned __int16)*((_DWORD *)this + 31) >> 13 == 2 && (v29 & 1) != 0)
    {
      v31 = 0;
    }
    else
    {
      v30 = v14 + 40;
      if ((v15 & 0x1000) == 0)
        v30 = v14 + 41;
      v31 = *v30;
      if (v31 >= 0)
        v32 = v31;
      else
        v32 = v31 + 1;
      v33 = v32 >> 1;
      if ((v29 & 1) == 0)
        v31 = v33;
    }
    if ((v15 & 0x1000) != 0)
      v34 = v14 + 38;
    else
      v34 = v14 + 39;
    v35 = *v34;
    v22 = __OFADD__(v31, v35);
    v23 = v31 + v35;
    v24 = (v31 >> 31) + 0x7FFFFFFF;
    goto LABEL_50;
  }
  v5 = 0;
  LOBYTE(v6) = 0;
LABEL_54:
  if (*(_DWORD *)v13 == 1)
    WTF::fastFree(v13, v12);
  else
    --*(_DWORD *)v13;
  return v6 | ((*(_QWORD *)&v1 & 0xFFFFFFLL) << 8) | (v5 << 32);
}

unint64_t WebCore::RenderGrid::gridSpanForChild(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  int isSubgridReversedDirection;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
  if (*(_BYTE *)(v3 + 46) != 12)
  {
    __break(0xC471u);
    goto LABEL_42;
  }
  if (((*(_BYTE *)(v3 + 21) & 0x10) == 0) == ((*(_BYTE *)(a1 + 21) & 0x10) == 0))
    v4 = a3;
  else
    v4 = a3 == 0;
  if ((*(_DWORD *)(a2 + 20) & 0x1800000) == 0x1000000)
  {
    v23 = a1;
    v17 = WebCore::RenderGrid::gridSpanForOutOfFlowChild(*(WebCore::GridPositionsResolver **)(*(_QWORD *)(a2 + 32) + 8), (const WebCore::RenderGrid *)a2, (WTF::StringImpl *)v4);
    a1 = v23;
  }
  else
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v3 + 328) + 104);
    if (v5)
    {
      v6 = *(_DWORD *)(v5 - 8);
      v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
      v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
      v10 = v6 & ((v9 >> 31) ^ v9);
      for (i = 1; ; ++i)
      {
        v12 = v10;
        v13 = *(_QWORD *)(v5 + 32 * v10);
        if (v13 != -1)
        {
          if (!v13)
            goto LABEL_20;
          if (*(_QWORD *)(v13 + 8) == a2)
            break;
        }
        v10 = (v12 + i) & v6;
      }
      v14 = v5 + 32 * v12;
      v15 = *(_OWORD *)(v14 + 8);
      v34 = *(_QWORD *)(v14 + 24);
      v33 = v15;
    }
    else
    {
LABEL_20:
      v22 = a1;
      WTF::GenericHashTraits<WebCore::GridArea>::emptyValue((uint64_t)&v33);
      a1 = v22;
    }
    v16 = (unint64_t *)((unint64_t)&v33 | 0xC);
    if (!(_DWORD)v4)
      v16 = (unint64_t *)&v33;
    v17 = *v16;
  }
  v18 = HIDWORD(v17);
  if (v3 != a1)
  {
    v31 = a1;
    v32 = v3;
    v24 = v4;
    while (1)
    {
      v25 = *(_QWORD *)(v32 + 32);
      if (v25)
      {
        v26 = *(_QWORD *)(v25 + 8);
        if (v26 && *(_BYTE *)(v26 + 46) != 12)
        {
          __break(0xC471u);
LABEL_42:
          JUMPOUT(0x1963D2BE8);
        }
      }
      else
      {
        v26 = 0;
      }
      v27 = WebCore::RenderGrid::isSubgrid((WebCore::RenderElement *)v32, v24);
      if (((*(_DWORD *)(v32 + 20) & 0x1000) == 0) != ((*(_BYTE *)(v26 + 21) & 0x10) == 0))
        v24 = !v24;
      if ((*(_DWORD *)(v32 + 20) & 0x1800000) == 0x1000000)
        v28 = WebCore::RenderGrid::gridSpanForOutOfFlowChild((WebCore::GridPositionsResolver *)v26, (const WebCore::RenderGrid *)v32, (WTF::StringImpl *)v24);
      else
        v28 = WebCore::Grid::gridItemSpan(*(_QWORD *)(v26 + 328), v32, v24);
      v20 = v28;
      v19 = HIDWORD(v28);
      if (v27)
      {
        isSubgridReversedDirection = WebCore::GridLayoutFunctions::isSubgridReversedDirection(v26, v24, v32);
        v30 = v19 - v18;
        if (isSubgridReversedDirection)
          v19 = (v19 - v17);
        else
          v19 = v18 + v20;
        if (isSubgridReversedDirection)
          v20 = v30;
        else
          v20 += v17;
      }
      v32 = v26;
      LODWORD(v17) = v20;
      LODWORD(v18) = v19;
      if (v26 == v31)
        return v20 | (v19 << 32);
    }
  }
  v19 = HIDWORD(v17);
  v20 = v17;
  return v20 | (v19 << 32);
}

uint64_t WebCore::RenderGrid::columnAxisBaselineOffsetForChild(WebCore::RenderGrid *this, const WebCore::RenderBox *a2)
{
  uint64_t v5;
  WebCore::RenderGrid *v6;
  _BOOL4 v7;

  do
  {
    if (WebCore::RenderGrid::isMasonry(this))
      return 0;
    if (WebCore::RenderElement::establishesIndependentFormattingContext(this))
      return WebCore::GridTrackSizingAlgorithm::baselineOffsetForChild((uint64_t)this + 336, (uint64_t)a2, 2);
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 80) + 258))
      return WebCore::GridTrackSizingAlgorithm::baselineOffsetForChild((uint64_t)this + 336, (uint64_t)a2, 2);
    v5 = *((_QWORD *)this + 4);
    if (!v5)
      return WebCore::GridTrackSizingAlgorithm::baselineOffsetForChild((uint64_t)this + 336, (uint64_t)a2, 2);
    v6 = *(WebCore::RenderGrid **)(v5 + 8);
    if (!v6 || *((_BYTE *)v6 + 46) != 12 || (WebCore::RenderGrid::areMasonryRows(v6) & 1) != 0)
      return WebCore::GridTrackSizingAlgorithm::baselineOffsetForChild((uint64_t)this + 336, (uint64_t)a2, 2);
    v7 = (*((_BYTE *)this + 21) & 0x10) == 0;
    this = v6;
  }
  while (v7 == ((*((_BYTE *)v6 + 21) & 0x10) == 0));
  return WebCore::RenderGrid::rowAxisBaselineOffsetForChild(v6, a2);
}

uint64_t WebCore::RenderGrid::rowAxisBaselineOffsetForChild(WebCore::RenderGrid *this, const WebCore::RenderBox *a2)
{
  uint64_t v4;
  WebCore::RenderGrid *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v13;

  while (!WebCore::RenderGrid::isMasonry(this))
  {
    if (WebCore::RenderElement::establishesIndependentFormattingContext(this))
      return WebCore::GridTrackSizingAlgorithm::baselineOffsetForChild((uint64_t)this + 336, (uint64_t)a2, 1);
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 80) + 259))
      return WebCore::GridTrackSizingAlgorithm::baselineOffsetForChild((uint64_t)this + 336, (uint64_t)a2, 1);
    v4 = *((_QWORD *)this + 4);
    if (!v4)
      return WebCore::GridTrackSizingAlgorithm::baselineOffsetForChild((uint64_t)this + 336, (uint64_t)a2, 1);
    v5 = *(WebCore::RenderGrid **)(v4 + 8);
    if (!v5 || *((_BYTE *)v5 + 46) != 12)
      return WebCore::GridTrackSizingAlgorithm::baselineOffsetForChild((uint64_t)this + 336, (uint64_t)a2, 1);
    v6 = *(_QWORD *)(v4 + 8);
    do
    {
      v7 = v6;
      v8 = *(_QWORD *)(v6 + 32);
      if (!v8)
        break;
      v6 = *(_QWORD *)(v8 + 8);
      if (!v6)
        break;
    }
    while (*(_BYTE *)(v6 + 46) == 12
         && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 40) + 80) + 259));
    v9 = v7;
    do
    {
      v10 = v9;
      v11 = *(_QWORD *)(v9 + 32);
      if (!v11)
        break;
      v9 = *(_QWORD *)(v11 + 8);
      if (!v9)
        break;
    }
    while (*(_BYTE *)(v9 + 46) == 12
         && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 40) + 80) + 258));
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 40) + 80) + 260)
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 40) + 80) + 261))
    {
      return WebCore::GridTrackSizingAlgorithm::baselineOffsetForChild((uint64_t)this + 336, (uint64_t)a2, 1);
    }
    v13 = (*((_BYTE *)this + 21) & 0x10) == 0;
    this = v5;
    if (v13 != ((*((_BYTE *)v5 + 21) & 0x10) == 0))
      return WebCore::RenderGrid::columnAxisBaselineOffsetForChild(v5, a2);
  }
  return 0;
}

uint64_t WebCore::RenderGrid::columnAxisOffsetForChild(WebCore::RenderGrid *this, const WebCore::RenderBox *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  char *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  WebCore::RenderGrid *v17;
  WebCore::RenderGrid *v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  char v39;
  char v40;
  unsigned int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  _BYTE *v49;
  char *v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;

  v55 = 0;
  if ((*((_DWORD *)a2 + 5) & 0x1800000) == 0x1000000)
    WebCore::RenderGrid::gridAreaPositionForOutOfFlowChild((uint64_t)this, a2, 1, (unsigned int *)&v55 + 1, (int *)&v55);
  else
    WebCore::RenderGrid::gridAreaPositionForInFlowChild(this, (uint64_t)a2, 1, (_DWORD *)&v55 + 1, &v55);
  v4 = (*(uint64_t (**)(const WebCore::RenderBox *, char *))(*(_QWORD *)a2 + 1112))(a2, (char *)this + 80);
  v5 = HIDWORD(v55);
  if (__OFADD__(HIDWORD(v55), v4))
    v6 = ((HIDWORD(v55) >> 31) + 0x7FFFFFFF);
  else
    v6 = (HIDWORD(v55) + v4);
  v7 = ((*((_DWORD *)a2 + 31) >> 13) & 6) - 2;
  if (((*((_BYTE *)a2 + 21) & 0x10) == 0) == ((*((_BYTE *)this + 21) & 0x10) == 0))
  {
    v8 = v7 >= 4;
    v9 = (char *)a2 + 160;
    if (v8)
      v9 = (char *)a2 + 164;
    v10 = *(_DWORD *)v9;
    v11 = (*(uint64_t (**)(const WebCore::RenderBox *, _QWORD))(*(_QWORD *)a2 + 1112))(a2, 0);
    v12 = (*(uint64_t (**)(const WebCore::RenderBox *, _QWORD))(*(_QWORD *)a2 + 1120))(a2, 0);
  }
  else
  {
    v8 = v7 >= 4;
    v50 = (char *)a2 + 164;
    if (v8)
      v50 = (char *)a2 + 160;
    v10 = *(_DWORD *)v50;
    v11 = (*(uint64_t (**)(const WebCore::RenderBox *, _QWORD))(*(_QWORD *)a2 + 1128))(a2, 0);
    v12 = (*(uint64_t (**)(const WebCore::RenderBox *, _QWORD))(*(_QWORD *)a2 + 1136))(a2, 0);
  }
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
    v13 = (v11 >> 31) + 0x7FFFFFFF;
  v14 = __OFADD__(v10, v13);
  v15 = v10 + v13;
  if (v14)
    v16 = (v10 >> 31) + 0x7FFFFFFF;
  else
    v16 = v15;
  v17 = this;
  do
  {
    v18 = v17;
    v19 = *((_QWORD *)v17 + 4);
    if (!v19)
      break;
    v17 = *(WebCore::RenderGrid **)(v19 + 8);
    if (!v17)
      break;
  }
  while (*((_BYTE *)v17 + 46) == 12
       && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v18 + 11) + 40) + 80) + 258));
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v18 + 11) + 40) + 80) + 260))
    v20 = WebCore::GridMasonryLayout::offsetForChild((WebCore::RenderGrid *)((char *)this + 616), a2);
  else
    v20 = 0;
  v21 = *((unsigned __int8 *)a2 + 46);
  if (v21 == 12)
  {
    ++*((_DWORD *)a2 + 4);
    if ((WebCore::RenderGrid::isSubgridInParentDirection(a2, 1) & 1) != 0)
    {
      v22 = 3;
LABEL_34:
      v25 = *((_DWORD *)a2 + 4);
      if (!v25)
      {
        __break(0xC471u);
        JUMPOUT(0x1963D3300);
      }
      *((_DWORD *)a2 + 4) = v25 - 1;
      goto LABEL_36;
    }
  }
  if ((*((_BYTE *)a2 + 52) & 7) == 3)
    v22 = 7;
  else
    v22 = 3;
  v23 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 32) + 125);
  v24 = v23 & 0xF;
  if (v24 == 1)
  {
    v23 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 124);
    v24 = v23 & 0xF;
  }
  if (v24 >= 3)
    v22 = v23;
  if (v21 == 12)
    goto LABEL_34;
LABEL_36:
  v26 = (v22 >> 5) & 3;
  v27 = (v55 >> 31) + 0x7FFFFFFF;
  if (!__OFSUB__((_DWORD)v55, v5))
    v27 = v55 - v5;
  v14 = __OFSUB__(v27, v16);
  v28 = v27 - v16;
  v29 = (v27 >> 31) + 0x7FFFFFFF;
  if (v14)
    v30 = v29;
  else
    v30 = v28;
  if (v26 >= 2)
  {
    if (v26 == 2)
      v30 &= ~(v30 >> 31);
    else
      v30 = 0;
  }
  v31 = *((_DWORD *)this + 5);
  v32 = *((_QWORD *)a2 + 11);
  v33 = *(_BYTE **)(v32 + 24);
  if ((v31 & 0x1000) != 0)
  {
    if (!v33[68])
      return v6;
    v34 = v33 + 52;
  }
  else
  {
    if (!v33[44])
      return v6;
    v34 = v33 + 60;
  }
  if (!*v34)
    return v6;
  v35 = *((_DWORD *)a2 + 30);
  v36 = (*((_DWORD *)this + 31) ^ *((_DWORD *)a2 + 31)) & 0xE000;
  v37 = v36 == 0;
  if ((*((_DWORD *)a2 + 5) & 0x1800000) == 0x1000000)
  {
    if ((v31 & 0x1000) != 0)
    {
      if (v33[36])
        goto LABEL_69;
      v49 = v33 + 20;
    }
    else
    {
      if (v33[12])
        goto LABEL_69;
      v49 = v33 + 28;
    }
    if (!*v49)
      goto LABEL_47;
LABEL_69:
    v46 = WebCore::RenderGrid::columnAxisBaselineOffsetForChild(this, a2);
    v47 = v6 + v46;
    if (__OFADD__((_DWORD)v6, v46))
      v47 = (v6 >> 31) + 0x7FFFFFFF;
    v6 = v47 + v20;
    if (__OFADD__(v47, v20))
      return (v47 >> 31) + 0x7FFFFFFF;
    return v6;
  }
LABEL_47:
  v38 = *((unsigned __int8 *)a2 + 46);
  if (v38 != 12)
    goto LABEL_50;
  ++*((_DWORD *)a2 + 4);
  if ((WebCore::RenderGrid::isSubgridInParentDirection(a2, 1) & 1) == 0)
  {
    v32 = *((_QWORD *)a2 + 11);
LABEL_50:
    if ((*((_BYTE *)a2 + 52) & 7) == 3)
      v39 = 7;
    else
      v39 = 3;
    v40 = *(_BYTE *)(*(_QWORD *)(v32 + 32) + 125);
    v41 = v40 & 0xF;
    if (v41 == 1)
    {
      v40 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 124);
      v41 = v40 & 0xF;
    }
    if (v41 < 3)
      v40 = v39;
    if (v38 != 12)
      goto LABEL_60;
    goto LABEL_58;
  }
  v40 = 3;
LABEL_58:
  v42 = *((_DWORD *)a2 + 4);
  if (!v42)
  {
    __break(0xC471u);
    JUMPOUT(0x1963D3320);
  }
  *((_DWORD *)a2 + 4) = v42 - 1;
LABEL_60:
  v43 = v40 & 0xF;
  switch(v43)
  {
    case 4:
    case 5:
      if (((*((_BYTE *)a2 + 21) & 0x10) == 0) == ((*((_BYTE *)this + 21) & 0x10) == 0))
        v37 = (v36 == 0) ^ (v43 == 4);
      else
        v37 = v43 != 4;
      goto LABEL_92;
    case 6:
      if (v30 >= 0)
        v44 = v30;
      else
        v44 = v30 + 1;
      v14 = __OFADD__((_DWORD)v6, v44 >> 1);
      v45 = (v6 + (v44 >> 1));
      if (v14)
        return (v6 >> 31) + 0x7FFFFFFF;
      else
        return v45;
    case 8:
    case 12:
      goto LABEL_93;
    case 9:
      if (((*((_BYTE *)a2 + 21) & 0x10) == 0) == ((*((_BYTE *)this + 21) & 0x10) == 0))
      {
        v37 = v36 != 0;
      }
      else
      {
        v54 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
        if (v54 <= 5 && ((1 << v54) & 0x2A) != 0)
LABEL_101:
          v37 = (v35 & 0x4000000) == 0;
        else
LABEL_105:
          v37 = (v35 >> 26) & 1;
      }
LABEL_92:
      if (!v37)
        goto LABEL_69;
LABEL_93:
      v51 = v6 + v30;
      if (__OFADD__((_DWORD)v6, v30))
        v51 = (v6 >> 31) + 0x7FFFFFFF;
      v52 = WebCore::RenderGrid::columnAxisBaselineOffsetForChild(this, a2);
      v6 = v51 - v52;
      if (__OFSUB__(v51, v52))
        v6 = (v51 >> 31) + 0x7FFFFFFF;
      break;
    case 10:
      if (((*((_BYTE *)a2 + 21) & 0x10) == 0) == ((*((_BYTE *)this + 21) & 0x10) == 0))
        goto LABEL_92;
      v53 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
      if (v53 > 5 || ((1 << v53) & 0x2A) == 0)
        goto LABEL_101;
      goto LABEL_105;
    default:
      goto LABEL_69;
  }
  return v6;
}

uint64_t WebCore::RenderGrid::rowAxisOffsetForChild(WebCore::RenderGrid *this, const WebCore::RenderBox *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  WebCore::RenderGrid *v7;
  WebCore::RenderGrid *v8;
  uint64_t v9;
  WebCore::RenderGrid *v10;
  WebCore::RenderGrid *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  char v22;
  char v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  unsigned int v32;
  _BYTE *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  char *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;

  v56 = 0;
  if ((*((_DWORD *)a2 + 5) & 0x1800000) == 0x1000000)
    WebCore::RenderGrid::gridAreaPositionForOutOfFlowChild((uint64_t)this, a2, 0, (unsigned int *)&v56 + 1, (int *)&v56);
  else
    WebCore::RenderGrid::gridAreaPositionForInFlowChild(this, (uint64_t)a2, 0, (_DWORD *)&v56 + 1, &v56);
  v4 = (*(uint64_t (**)(const WebCore::RenderBox *, char *))(*(_QWORD *)a2 + 1128))(a2, (char *)this + 80);
  v5 = HIDWORD(v56);
  if (__OFADD__(HIDWORD(v56), v4))
    v6 = ((HIDWORD(v56) >> 31) + 0x7FFFFFFF);
  else
    v6 = (HIDWORD(v56) + v4);
  v7 = this;
  do
  {
    v8 = v7;
    v9 = *((_QWORD *)v7 + 4);
    if (!v9)
      break;
    v7 = *(WebCore::RenderGrid **)(v9 + 8);
    if (!v7)
      break;
  }
  while (*((_BYTE *)v7 + 46) == 12 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 11) + 40) + 80) + 259));
  v10 = v8;
  do
  {
    v11 = v10;
    v12 = *((_QWORD *)v10 + 4);
    if (!v12)
      break;
    v10 = *(WebCore::RenderGrid **)(v12 + 8);
    if (!v10)
      break;
  }
  while (*((_BYTE *)v10 + 46) == 12
       && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v11 + 11) + 40) + 80) + 258));
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v11 + 11) + 40) + 80) + 260)
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 11) + 40) + 80) + 261))
  {
    v13 = WebCore::GridMasonryLayout::offsetForChild((WebCore::RenderGrid *)((char *)this + 616), a2);
  }
  else
  {
    v13 = 0;
  }
  v14 = *((_DWORD *)this + 5);
  v15 = *((_QWORD *)a2 + 11);
  v16 = *(_BYTE **)(v15 + 24);
  if ((v14 & 0x1000) != 0)
  {
    if (!v16[44])
      return v6;
    v17 = v16 + 60;
  }
  else
  {
    if (!v16[68])
      return v6;
    v17 = v16 + 52;
  }
  if (!*v17)
    return v6;
  v18 = *((unsigned __int8 *)a2 + 123);
  v19 = *((_DWORD *)this + 30);
  v20 = v19 & 0x4000000;
  if ((*((_DWORD *)a2 + 5) & 0x1800000) == 0x1000000)
  {
    if ((v14 & 0x1000) != 0)
    {
      if (v16[12])
        goto LABEL_38;
      v34 = v16 + 28;
    }
    else
    {
      if (v16[36])
        goto LABEL_38;
      v34 = v16 + 20;
    }
    if (!*v34)
      goto LABEL_24;
LABEL_38:
    v28 = WebCore::RenderGrid::rowAxisBaselineOffsetForChild(this, a2);
    v29 = v6 + v28;
    if (__OFADD__((_DWORD)v6, v28))
      v29 = (v6 >> 31) + 0x7FFFFFFF;
    v30 = __OFADD__(v29, v13);
    v31 = v29 + v13;
    v32 = (v29 >> 31) + 0x7FFFFFFF;
    if (v30)
      return v32;
    else
      return v31;
  }
LABEL_24:
  v21 = *((unsigned __int8 *)a2 + 46);
  if (v21 == 12)
  {
    ++*((_DWORD *)a2 + 4);
    if ((WebCore::RenderGrid::isSubgridInParentDirection(a2, 0) & 1) != 0)
    {
      v23 = 3;
LABEL_35:
      v25 = *((_DWORD *)a2 + 4);
      if (!v25)
      {
        __break(0xC471u);
        JUMPOUT(0x1963D37D4);
      }
      *((_DWORD *)a2 + 4) = v25 - 1;
      goto LABEL_37;
    }
    v15 = *((_QWORD *)a2 + 11);
  }
  if ((*((_BYTE *)a2 + 52) & 7) == 3)
    v22 = 7;
  else
    v22 = 3;
  v23 = *(_BYTE *)(*(_QWORD *)(v15 + 32) + 127);
  v24 = v23 & 0xF;
  if (v24 == 1)
  {
    v23 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 126);
    v24 = v23 & 0xF;
  }
  if (v24 < 3)
    v23 = v22;
  if (v21 == 12)
    goto LABEL_35;
LABEL_37:
  v26 = 0;
  LOBYTE(v27) = (v19 & 0x4000000) == 0;
  switch(v23 & 0xF)
  {
    case 6:
      goto LABEL_66;
    case 8:
    case 0xC:
      goto LABEL_65;
    case 9:
      v27 = (v18 >> 2) & 1 ^ (v20 >> 26);
      if (((*((_BYTE *)a2 + 21) & 0x10) == 0) != ((*((_BYTE *)this + 21) & 0x10) == 0))
      {
        v36 = (unsigned __int16)*((_DWORD *)a2 + 31) >> 13;
        if (v36 > 5)
          goto LABEL_61;
        LOBYTE(v27) = (v19 & 0x4000000) == 0;
        if (((1 << v36) & 0x2A) == 0)
          goto LABEL_61;
      }
      goto LABEL_64;
    case 0xA:
      if (((*((_BYTE *)a2 + 21) & 0x10) == 0) == ((*((_BYTE *)this + 21) & 0x10) == 0))
      {
        LOBYTE(v27) = ((v18 & 4) != 0) ^ (v20 >> 26) ^ 1;
      }
      else
      {
        v35 = (unsigned __int16)*((_DWORD *)a2 + 31) >> 13;
        if (v35 > 5)
        {
          LOBYTE(v27) = (v19 & 0x4000000) == 0;
        }
        else
        {
          LOBYTE(v27) = (v19 & 0x4000000) == 0;
          if (((1 << v35) & 0x2A) != 0)
          {
LABEL_61:
            if ((v19 & 0x4000000) == 0)
              goto LABEL_38;
            goto LABEL_65;
          }
        }
      }
LABEL_64:
      if ((v27 & 1) == 0)
        goto LABEL_38;
LABEL_65:
      v26 = 1;
LABEL_66:
      v37 = ((*((_DWORD *)a2 + 31) >> 13) & 6) - 2;
      if (((*((_BYTE *)a2 + 21) & 0x10) == 0) == ((*((_BYTE *)this + 21) & 0x10) == 0))
      {
        if (v37 < 4)
          v38 = (char *)a2 + 164;
        else
          v38 = (char *)a2 + 160;
        v39 = *(_DWORD *)v38;
        v40 = (*(uint64_t (**)(const WebCore::RenderBox *, _QWORD))(*(_QWORD *)a2 + 1128))(a2, 0);
        v41 = (*(uint64_t (**)(const WebCore::RenderBox *, _QWORD))(*(_QWORD *)a2 + 1136))(a2, 0);
      }
      else
      {
        if (v37 < 4)
          v55 = (char *)a2 + 160;
        else
          v55 = (char *)a2 + 164;
        v39 = *(_DWORD *)v55;
        v40 = (*(uint64_t (**)(const WebCore::RenderBox *, _QWORD))(*(_QWORD *)a2 + 1112))(a2, 0);
        v41 = (*(uint64_t (**)(const WebCore::RenderBox *, _QWORD))(*(_QWORD *)a2 + 1120))(a2, 0);
      }
      v42 = v40 + v41;
      if (__OFADD__(v40, v41))
        v42 = (v40 >> 31) + 0x7FFFFFFF;
      v43 = v39 + v42;
      if (__OFADD__(v39, v42))
        v43 = (v39 >> 31) + 0x7FFFFFFF;
      v44 = *((unsigned __int8 *)a2 + 46);
      if (v44 == 12)
      {
        ++*((_DWORD *)a2 + 4);
        if ((WebCore::RenderGrid::isSubgridInParentDirection(a2, 0) & 1) != 0)
        {
          v45 = 3;
LABEL_84:
          v48 = *((_DWORD *)a2 + 4);
          if (!v48)
          {
            __break(0xC471u);
            JUMPOUT(0x1963D3A38);
          }
          *((_DWORD *)a2 + 4) = v48 - 1;
          goto LABEL_86;
        }
      }
      if ((*((_BYTE *)a2 + 52) & 7) == 3)
        v45 = 7;
      else
        v45 = 3;
      v46 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 32) + 127);
      v47 = v46 & 0xF;
      if (v47 == 1)
      {
        v46 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 126);
        v47 = v46 & 0xF;
      }
      if (v47 >= 3)
        v45 = v46;
      if (v44 == 12)
        goto LABEL_84;
LABEL_86:
      v49 = v56 - v5;
      if (__OFSUB__((_DWORD)v56, v5))
        v49 = (v56 >> 31) + 0x7FFFFFFF;
      v50 = (v45 >> 5) & 3;
      v51 = v49 - v43;
      if (__OFSUB__(v49, v43))
        v51 = (v49 >> 31) + 0x7FFFFFFF;
      if (v50 >= 2)
      {
        if (v50 == 2)
          v51 &= ~(v51 >> 31);
        else
          v51 = 0;
      }
      if (v51 >= 0)
        v52 = v51;
      else
        v52 = v51 + 1;
      v53 = v52 >> 1;
      if (!v26)
        v51 = v53;
      v30 = __OFADD__((_DWORD)v6, v51);
      v54 = (v6 + v51);
      if (v30)
        v6 = (v6 >> 31) + 0x7FFFFFFF;
      else
        v6 = v54;
      break;
    case 0xD:
      goto LABEL_61;
    case 0xE:
      goto LABEL_64;
    default:
      goto LABEL_38;
  }
  return v6;
}

uint64_t WebCore::RenderGrid::isSubgridOf(WebCore::RenderElement *a1, BOOL a2, uint64_t a3)
{
  WebCore::RenderElement *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = a1;
  if (!WebCore::RenderElement::establishesIndependentFormattingContext(a1))
  {
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 11) + 40) + 80);
      if (a2)
      {
        if (!*(_BYTE *)(v6 + 258))
          return 0;
      }
      else if (!*(_BYTE *)(v6 + 259))
      {
        return 0;
      }
      v7 = *((_QWORD *)v5 + 4);
      if (!v7)
        return 0;
      v8 = *(_QWORD *)(v7 + 8);
      if (!v8 || *(_BYTE *)(v8 + 46) != 12)
        return 0;
      v9 = *(_QWORD *)(v7 + 8);
      if (a2)
      {
        v10 = *(_QWORD *)(v7 + 8);
        do
        {
          v11 = v10;
          v12 = *(_QWORD *)(v10 + 32);
          if (!v12)
            break;
          v10 = *(_QWORD *)(v12 + 8);
          if (!v10)
            break;
        }
        while (*(_BYTE *)(v10 + 46) == 12
             && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 88) + 40) + 80) + 258));
        v13 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 88) + 40) + 80) + 260);
      }
      else
      {
        do
        {
          v14 = v9;
          v15 = *(_QWORD *)(v9 + 32);
          if (!v15)
            break;
          v9 = *(_QWORD *)(v15 + 8);
          if (!v9)
            break;
        }
        while (*(_BYTE *)(v9 + 46) == 12
             && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 88) + 40) + 80) + 259));
        v16 = v14;
        do
        {
          v17 = v16;
          v18 = *(_QWORD *)(v16 + 32);
          if (!v18)
            break;
          v16 = *(_QWORD *)(v18 + 8);
          if (!v16)
            break;
        }
        while (*(_BYTE *)(v16 + 46) == 12
             && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 88) + 40) + 80) + 258));
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 88) + 40) + 80) + 260))
          goto LABEL_28;
        v13 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 88) + 40) + 80) + 261);
      }
      if (*v13)
        return 0;
LABEL_28:
      if (v8 == a3)
        return 1;
      if (((*((_DWORD *)v5 + 5) & 0x1000) == 0) != ((*(_DWORD *)(v8 + 20) & 0x1000) == 0))
        a2 = !a2;
      v5 = (WebCore::RenderElement *)v8;
    }
    while (!WebCore::RenderElement::establishesIndependentFormattingContext((WebCore::RenderElement *)v8));
  }
  return 0;
}

BOOL WebCore::RenderGrid::computeGridPositionsForOutOfFlowChild(WebCore::GridPositionsResolver *a1, const WebCore::RenderGrid *a2, WTF::StringImpl *a3, int *a4, BOOL *a5, int *a6, BOOL *a7)
{
  uint64_t v14;
  int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  BOOL v31;
  BOOL v33;

  v14 = *((_QWORD *)a1 + 41);
  v15 = *(_DWORD *)(v14 + 100);
  if ((_DWORD)a3 != 1)
  {
    if (v15)
      v15 = *(_DWORD *)(*(_QWORD *)(v14 + 88) + 12);
    else
      v15 = WebCore::GridPositionsResolver::explicitGridColumnCount(a1, a2);
  }
  v16 = WebCore::GridPositionsResolver::resolveGridPositionsFromStyle(a1, a2, a3);
  v18 = v17;
  if (v17 != 2)
  {
    v20 = 56;
    if ((_DWORD)a3 == 1)
      v20 = 60;
    v21 = *(_DWORD *)(*((_QWORD *)a1 + 41) + v20);
    *a4 = v21 + v16;
    *a6 = v21 + HIDWORD(v16);
    v22 = *(unsigned __int8 **)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 40) + 88);
    v23 = v22 + 8;
    if ((_DWORD)a3)
      v23 = v22 + 40;
    v24 = *v23;
    v25 = (WTF::StringImpl *)*((_QWORD *)v23 + 1);
    if (v25)
      *(_DWORD *)v25 += 2;
    v26 = v22 + 56;
    v27 = v22 + 24;
    if (!(_DWORD)a3)
      v26 = v27;
    v28 = *v26;
    v29 = (WTF::StringImpl *)*((_QWORD *)v26 + 1);
    if (v29)
      *(_DWORD *)v29 += 2;
    if (v24)
      v31 = *a4 < 0 || *a4 > v15;
    else
      v31 = 1;
    *a5 = v31;
    if (v28)
      v33 = *a6 < 0 || *a6 > v15;
    else
      v33 = 1;
    *a7 = v33;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v17);
      else
        *(_DWORD *)v29 -= 2;
    }
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v17);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  return v18 != 2;
}

uint64_t WebCore::RenderBox::clientLogicalHeight(WebCore::RenderBox *this)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  int v10;

  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    return WebCore::RenderBox::clientWidth(this);
  v2 = *((_DWORD *)this + 41);
  v3 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1000))(this);
  if (__OFSUB__(v2, v3))
    v4 = (v2 >> 31) + 0x7FFFFFFF;
  else
    v4 = v2 - v3;
  v5 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1008))(this);
  if (__OFSUB__(v4, v5))
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  else
    v6 = v4 - v5;
  v7 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360))(this);
  v8 = v7 << 6;
  if (v7 < -33554432)
    v8 = 0x80000000;
  if (v7 > 0x1FFFFFF)
    v8 = 0x7FFFFFFF;
  v9 = __OFSUB__(v6, v8);
  v10 = v6 - v8;
  if (v9)
    v10 = (v6 >> 31) + 0x7FFFFFFF;
  return v10 & ~(v10 >> 31);
}

unint64_t WebCore::RenderGrid::gridAreaPositionForOutOfFlowChild(uint64_t a1, WebCore::RenderBox *this, _BOOL4 a3, unsigned int *a4, int *a5)
{
  unint64_t result;
  char v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  int v19;
  _BYTE *v20;
  _BYTE *v21;
  int v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  int v26;
  _BOOL4 v27;
  char *v28;
  char *v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  char *v52;
  char *v53;

  if (a3)
    result = WebCore::RenderBox::overridingContainingBlockContentLogicalHeight(this);
  else
    result = WebCore::RenderBox::overridingContainingBlockContentLogicalWidth(this);
  v17 = result;
  if (!v11)
  {
    __break(1u);
    goto LABEL_66;
  }
  if ((result & 0xFF00000000) == 0)
  {
    std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_82;
  }
  if (a3)
  {
    v18 = (uint64_t *)(a1 + 736);
    result = WebCore::RenderBlock::borderBefore((WebCore::RenderBlock *)a1);
  }
  else
  {
    v18 = (uint64_t *)(a1 + 728);
    v50 = WebCore::RenderStyle::borderStartWidth((WebCore::RenderStyle *)(a1 + 80)) * 64.0;
    if (v50 >= 2147483650.0)
    {
      result = 0x7FFFFFFFLL;
    }
    else if (v50 > -2147483650.0)
    {
      result = (int)v50;
    }
    else
    {
      result = 0x80000000;
    }
  }
  *a4 = result;
  v12 = *v18;
  if (*v18)
  {
    v13 = *(_DWORD *)(v12 - 8);
    v41 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v42 = 9 * ((v41 + ~(v41 << 13)) ^ ((v41 + ~(v41 << 13)) >> 8));
    v43 = (v42 ^ (v42 >> 15)) + ~((v42 ^ (v42 >> 15)) << 27);
    v16 = v13 & ((v43 >> 31) ^ v43);
    v14 = 1;
    v15 = 24;
    while (1)
    {
      v44 = *(_QWORD *)(v12 + v16 * (unint64_t)v15);
      if (!v44)
        break;
      if (v44 != -1 && *(WebCore::RenderBox **)(v44 + 8) == this)
      {
        v45 = v12 + 24 * v16;
        if (*(_BYTE *)(v45 + 16))
        {
          v46 = *(_QWORD *)(v45 + 8);
          v47 = a1 + 584;
          if (!a3)
            v47 = a1 + 568;
          if (v46 >= *(unsigned int *)(v47 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x1963D4324);
          }
          *a4 = *(_DWORD *)(*(_QWORD *)v47 + 4 * v46);
        }
        break;
      }
LABEL_66:
      v16 = (v16 + v14++) & v13;
    }
  }
  v19 = *(_DWORD *)(a1 + 20);
  v20 = *(_BYTE **)(*((_QWORD *)this + 11) + 24);
  if (a3)
  {
    if ((v19 & 0x1000) != 0)
      goto LABEL_10;
  }
  else if ((v19 & 0x1000) == 0)
  {
LABEL_10:
    if (v20[36])
      goto LABEL_21;
    v21 = v20 + 20;
    goto LABEL_12;
  }
  if (v20[12])
    goto LABEL_21;
  v21 = v20 + 28;
LABEL_12:
  if (!*v21)
  {
    v22 = 0;
    goto LABEL_14;
  }
LABEL_21:
  v27 = a3;
  if (((*(_DWORD *)(a1 + 20) & 0x1000) == 0) != ((*((_BYTE *)this + 21) & 0x10) == 0))
LABEL_82:
    v27 = !a3;
  v28 = (char *)this + 152;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v29 = (char *)this + 156;
  else
    v29 = (char *)this + 152;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    v28 = (char *)this + 156;
  if (v27)
    v28 = v29;
  v30 = *(_DWORD *)v28;
  if (a3)
  {
    result = WebCore::RenderBlock::borderBefore((WebCore::RenderBlock *)a1);
    v51 = 3;
    switch((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13)
    {
      case 1:
        v51 = 2;
        break;
      case 2:
      case 4:
        break;
      case 3:
      case 5:
        v51 = 1;
        break;
      default:
        v51 = 0;
        break;
    }
  }
  else
  {
    v48 = 1016;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v48 = 1000;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + v48))(a1);
    v49 = ((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13) - 2;
    if (v49 > 3)
      v51 = 3;
    else
      v51 = qword_1969FCB10[v49];
  }
  v31 = *((_DWORD *)this + v51 + 42);
  v32 = v30 - result;
  if (__OFSUB__(v30, (_DWORD)result))
    v32 = (v30 >> 31) + 0x7FFFFFFF;
  v24 = __OFSUB__(v32, v31);
  v33 = v32 - v31;
  v34 = (v32 >> 31) + 0x7FFFFFFF;
  if (v24)
    v22 = v34;
  else
    v22 = v33;
  if (!a3 && (*(_BYTE *)(a1 + 123) & 4) != 0)
  {
    v35 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
    if (v27)
    {
      if (v35 >= 4)
        v52 = (char *)this + 164;
      else
        v52 = (char *)this + 160;
      v36 = *(_DWORD *)v52;
      v37 = (*(uint64_t (**)(WebCore::RenderBox *, _QWORD))(*(_QWORD *)this + 1112))(this, 0);
      result = (*(uint64_t (**)(WebCore::RenderBox *, _QWORD))(*(_QWORD *)this + 1120))(this, 0);
    }
    else
    {
      if (v35 >= 4)
        v53 = (char *)this + 160;
      else
        v53 = (char *)this + 164;
      v36 = *(_DWORD *)v53;
      v37 = (*(uint64_t (**)(WebCore::RenderBox *, _QWORD))(*(_QWORD *)this + 1128))(this, 0);
      result = (*(uint64_t (**)(WebCore::RenderBox *, _QWORD))(*(_QWORD *)this + 1136))(this, 0);
    }
    v38 = v37 + result;
    if (__OFADD__(v37, (_DWORD)result))
      v38 = (v37 >> 31) + 0x7FFFFFFF;
    v24 = __OFADD__(v36, v38);
    v39 = v36 + v38;
    if (v24)
      v39 = (v36 >> 31) + 0x7FFFFFFF;
    v40 = v17 - v22;
    if (__OFSUB__(v17, v22))
      v40 = (v17 >> 31) + 0x7FFFFFFF;
    v22 = v40 - v39;
    if (__OFSUB__(v40, v39))
      v22 = (v40 >> 31) + 0x7FFFFFFF;
  }
LABEL_14:
  v23 = (*a4 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(*a4, v22))
    v23 = *a4 + v22;
  *a4 = v23;
  v24 = __OFADD__(v23, v17);
  v25 = v23 + v17;
  v26 = (v23 >> 31) + 0x7FFFFFFF;
  if (!v24)
    v26 = v25;
  *a5 = v26;
  return result;
}

void WebCore::RenderGrid::gridAreaPositionForInFlowChild(WebCore::RenderBox *this, uint64_t a2, int a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char *v33;
  int v34;
  BOOL v35;
  int v36;
  int v37;
  int v38;
  _DWORD *v39;
  __int128 v40;
  uint64_t v41;

  v8 = *(_QWORD *)(*((_QWORD *)this + 41) + 104);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    for (i = 1; ; ++i)
    {
      v15 = v13;
      v16 = *(_QWORD *)(v8 + 32 * v13);
      if (v16 != -1)
      {
        if (!v16)
          goto LABEL_37;
        if (*(_QWORD *)(v16 + 8) == a2)
          break;
      }
      v13 = (v15 + i) & v9;
    }
    v17 = v8 + 32 * v15;
    v18 = *(_OWORD *)(v17 + 8);
    v41 = *(_QWORD *)(v17 + 24);
    v40 = v18;
  }
  else
  {
LABEL_37:
    v39 = a4;
    WTF::GenericHashTraits<WebCore::GridArea>::emptyValue((uint64_t)&v40);
    a4 = v39;
  }
  v19 = (unint64_t *)&v40;
  if (a3)
    v19 = (unint64_t *)((unint64_t)&v40 | 0xC);
  v20 = *v19;
  v21 = (char *)this + 584;
  if (!a3)
    v21 = (char *)this + 568;
  if (v20 >= (unint64_t)*((unsigned int *)v21 + 3)
    || (v22 = *(_QWORD *)v21,
        *a4 = *(_DWORD *)(*(_QWORD *)v21 + 4 * v20),
        v23 = HIDWORD(v20),
        HIDWORD(v20) >= *((unsigned int *)v21 + 3)))
  {
    __break(0xC471u);
    JUMPOUT(0x1963D4580);
  }
  *a5 = *(_DWORD *)(v22 + 4 * v23);
  if ((unint64_t)*((unsigned int *)v21 + 3) - 1 > v23)
  {
    v24 = *((_QWORD *)this + 41);
    v25 = 120;
    if (!a3)
      v25 = 112;
    if (!*(_QWORD *)(v24 + v25) || (WebCore::Grid::isEmptyAutoRepeatTrack(v24, a3, HIDWORD(v20)) & 1) == 0)
    {
      v26 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
      v27 = (_BYTE *)(v26 + 388);
      v28 = (_BYTE *)(v26 + 376);
      if (a3)
        v28 = v27;
      if (!*v28 && (v28[8] & 0xF7) == 3)
      {
        if (a3)
          v38 = WebCore::RenderBox::contentLogicalHeight(this);
        else
          v38 = WebCore::RenderBox::contentLogicalWidth(this);
        v31 = v38 & 0xFFFFFF00;
        v29 = v38;
        v30 = 0x100000000;
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v31 = 0;
      }
      v32 = WebCore::RenderGrid::gridGap(this, a3, v30 | v31 | v29);
      v33 = (char *)this + 604;
      if (a3 == 1)
        v33 = (char *)this + 612;
      v34 = *(_DWORD *)v33;
      v35 = __OFADD__(v32, v34);
      v36 = v32 + v34;
      if (v35)
        v36 = (v32 >> 31) + 0x7FFFFFFF;
      v35 = __OFSUB__(*a5, v36);
      v37 = *a5 - v36;
      if (v35)
        v37 = (*a5 >> 31) + 0x7FFFFFFF;
      *a5 = v37;
    }
  }
}

_DWORD *WebCore::RenderGrid::allowedLayoutOverflow@<X0>(_DWORD *this@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  _DWORD *v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;

  *a2 = 0;
  a2[4] = 0;
  v2 = a2 + 4;
  a2[8] = 0;
  v3 = a2 + 8;
  a2[12] = 0;
  a2[16] = 0;
  a2[20] = 0;
  a2[24] = 0;
  a2[28] = 0;
  v4 = this[5];
  if ((v4 & 0x1000) != 0)
  {
    a2[28] = 1;
    *((_DWORD *)a2 + 6) = 0;
    v5 = this[30];
    if ((v5 & 0x4000000) != 0)
    {
      v2 = a2 + 20;
      v3 = a2 + 16;
    }
    else
    {
      v3 = a2;
    }
  }
  else
  {
    a2[4] = 1;
    *(_DWORD *)a2 = 0;
    v5 = this[30];
    if ((v5 & 0x4000000) != 0)
      v2 = a2 + 12;
    else
      v2 = a2 + 28;
    if ((v5 & 0x4000000) == 0)
      v3 = a2 + 24;
  }
  *v2 = 1;
  *v3 = 0;
  v6 = this[150];
  if (v6 < 0)
  {
    if (v6 == 0x80000000)
      v7 = 0x7FFFFFFF;
    else
      v7 = -v6;
    v8 = (v5 >> 26) & 1;
    v9 = (unsigned __int16)this[31] >> 13;
    if ((v9 - 2) >= 2)
    {
      if (v9 == 4)
      {
        v8 = (v5 & 0x4000000) == 0;
      }
      else if (v9 != 5)
      {
        v14 = (v5 & 0x4000000) == 0;
        v10 = 3;
        if (!v14)
          v10 = 1;
LABEL_16:
        v11 = &a2[8 * v10];
        *(_DWORD *)v11 = v7;
        v11[4] = 1;
        goto LABEL_17;
      }
    }
    v10 = 2;
    if (!v8)
      v10 = 0;
    goto LABEL_16;
  }
LABEL_17:
  v12 = this[152];
  if (v12 < 0)
  {
    if (v12 == 0x80000000)
      v13 = 0x7FFFFFFF;
    else
      v13 = -v12;
    v14 = (v4 & 0x1000) == 0;
    v15 = 24;
    if (v14)
      v15 = 0;
    v16 = 28;
    if (v14)
      v16 = 4;
    *(_DWORD *)&a2[v15] = v13;
    a2[v16] = 1;
  }
  return this;
}

uint64_t WebCore::RenderGrid::translateRTLCoordinate(WebCore::RenderBox *a1, int a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;

  v4 = 1016;
  if (((*((_DWORD *)a1 + 31) >> 13) & 6u) - 2 < 4)
    v4 = 1000;
  v5 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + v4))();
  v6 = 1024;
  if (((*((_DWORD *)a1 + 31) >> 13) & 6u) - 2 < 4)
    v6 = 1008;
  v7 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + v6))(a1);
  if (__OFADD__(v5, v7))
    v8 = (v5 >> 31) + 0x7FFFFFFF;
  else
    v8 = v5 + v7;
  if (((*((_DWORD *)a1 + 31) >> 13) & 6u) - 2 < 4)
    v9 = WebCore::RenderBox::clientHeight(a1);
  else
    v9 = WebCore::RenderBox::clientWidth(a1);
  v10 = v8 + v9;
  if (__OFADD__(v8, v9))
    v10 = (v8 >> 31) + 0x7FFFFFFF;
  v11 = __OFSUB__(v10, a2);
  v12 = v10 - a2;
  v13 = (v10 >> 31) + 0x7FFFFFFF;
  if (v11)
    return v13;
  else
    return v12;
}

WebCore::RenderBoxModelObject *WebCore::RenderGrid::paintChildren(WebCore::OrderIterator **this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3, WebCore::PaintInfo *a4, int a5)
{
  WebCore::RenderBoxModelObject *result;
  WebCore::RenderBoxModelObject *v11;

  result = (WebCore::RenderBoxModelObject *)WebCore::OrderIterator::first(this[41]);
  if (result)
  {
    v11 = result;
    do
    {
      WebCore::RenderBlock::paintChild((uint64_t)this, v11, (uint64_t)a2, (unsigned int *)a3, (uint64_t)a4, a5, 1);
      result = (WebCore::RenderBoxModelObject *)WebCore::OrderIterator::next(this[41]);
      v11 = result;
    }
    while (result);
  }
  return result;
}

const char *WebCore::RenderGrid::renderName(WebCore::RenderGrid *this)
{
  int v1;
  int v2;
  const char *v3;

  v1 = *((_DWORD *)this + 5);
  if ((v1 & 0x800) != 0)
    return "RenderGrid (floating)";
  v2 = v1 & 0x1800000;
  if (v2 == 0x1000000)
    return "RenderGrid (positioned)";
  v3 = "RenderGrid";
  if (v2 == 0x800000)
    v3 = "RenderGrid (relative positioned)";
  if ((*((_BYTE *)this + 45) & 1) != 0)
    return "RenderGrid (generated)";
  else
    return v3;
}

BOOL WebCore::RenderGrid::hasAutoSizeInColumnAxis(WebCore::RenderGrid *this, const WebCore::RenderBox *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::RenderGrid *v16;

  v2 = *((_QWORD *)a2 + 11);
  v3 = *(_QWORD *)(v2 + 32);
  if (((*(_DWORD *)(v3 + 148) >> 5) & 3u) - 1 <= 1)
  {
    if (((*((_BYTE *)this + 21) & 0x10) == 0) != ((*((_BYTE *)a2 + 21) & 0x10) == 0)
      || (*(_BYTE *)(v3 + 125) & 0xF) == 3)
    {
      v16 = this;
      if ((*(_BYTE *)(v3 + 127) & 0xF) == 3)
      {
LABEL_8:
        this = v16;
        goto LABEL_2;
      }
      v8 = *(_QWORD *)(v2 + 8);
      v9 = v8 + 4;
      v10 = v8 + 12;
      if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4)
        v9 = v10;
      v11 = *(unsigned __int8 *)(v9 + 4);
      if (v11 != 4)
      {
        if ((v11 & 0xFFFFFFF7) != 3)
          goto LABEL_2;
        if (!WebCore::RenderBox::percentageLogicalHeightIsResolvable(a2))
        {
          v2 = *((_QWORD *)a2 + 11);
          goto LABEL_8;
        }
      }
    }
    else
    {
      v12 = *(_QWORD *)(v2 + 8);
      v13 = v12 + 12;
      v14 = v12 + 4;
      if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4)
        v13 = v14;
      if (!*(_BYTE *)(v13 + 4))
        goto LABEL_2;
    }
    return 0;
  }
LABEL_2:
  v4 = *(_QWORD *)(v2 + 8);
  v5 = (unsigned __int8 *)(v4 + 8);
  v6 = (unsigned __int8 *)(v4 + 16);
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
    v6 = v5;
  return *v6 == 0;
}

BOOL WebCore::RenderGrid::hasAutoSizeInRowAxis(WebCore::RenderGrid *this, const WebCore::RenderBox *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  WebCore::RenderGrid *v16;

  v2 = *((_QWORD *)a2 + 11);
  v3 = *(_QWORD *)(v2 + 32);
  if (((*(_DWORD *)(v3 + 148) >> 5) & 3u) - 1 <= 1)
  {
    v16 = this;
    if (((*((_BYTE *)this + 21) & 0x10) == 0) != ((*((_BYTE *)a2 + 21) & 0x10) == 0)
      || (*(_BYTE *)(v3 + 127) & 0xF) == 3)
    {
      if ((*(_BYTE *)(v3 + 125) & 0xF) == 3)
      {
LABEL_8:
        this = v16;
        goto LABEL_2;
      }
      v8 = *(_QWORD *)(v2 + 8);
      v9 = v8 + 12;
      v10 = v8 + 4;
      if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4)
        v9 = v10;
      if (!*(_BYTE *)(v9 + 4))
        goto LABEL_2;
    }
    else
    {
      v11 = *(_QWORD *)(v2 + 8);
      v12 = v11 + 4;
      v13 = v11 + 12;
      if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4)
        v12 = v13;
      v14 = *(unsigned __int8 *)(v12 + 4);
      if (v14 != 4)
      {
        if ((v14 & 0xFFFFFFF7) != 3)
          goto LABEL_2;
        if (!WebCore::RenderBox::percentageLogicalHeightIsResolvable(a2))
        {
          v2 = *((_QWORD *)a2 + 11);
          goto LABEL_8;
        }
      }
    }
    return 0;
  }
LABEL_2:
  v4 = *(_QWORD *)(v2 + 8);
  v5 = (unsigned __int8 *)(v4 + 16);
  v6 = (unsigned __int8 *)(v4 + 8);
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
    v6 = v5;
  return *v6 == 0;
}

unint64_t WebCore::RenderGrid::gridSpanForOutOfFlowChild(WebCore::GridPositionsResolver *a1, const WebCore::RenderGrid *a2, WTF::StringImpl *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  const WebCore::RenderGrid *v11;
  int v12;
  unsigned int v13;
  WebCore::GridPositionsResolver *v14;
  __int16 v15;
  int v16;
  int v17;

  v3 = *((_QWORD *)a1 + 41);
  v4 = *(_DWORD *)(v3 + 100);
  if ((_DWORD)a3 != 1)
  {
    if (v4)
    {
      v4 = *(_DWORD *)(*(_QWORD *)(v3 + 88) + 12);
    }
    else
    {
      v14 = a1;
      v13 = a3;
      v11 = a2;
      v12 = WebCore::GridPositionsResolver::explicitGridColumnCount(a1, a2);
      a2 = v11;
      a3 = (WTF::StringImpl *)v13;
      v4 = v12;
      a1 = v14;
    }
  }
  v17 = 0;
  v16 = 0;
  v15 = 0;
  if (WebCore::RenderGrid::computeGridPositionsForOutOfFlowChild(a1, a2, a3, &v17, (BOOL *)&v15 + 1, &v16, (BOOL *)&v15))
  {
    v5 = v17;
    if (HIBYTE(v15))
      v5 = 0;
    if (!(_BYTE)v15)
      v4 = v16;
    LODWORD(v6) = WebCore::GridPosition::gMaxPositionForTesting;
    if (!byte_1EE2F9580)
      LODWORD(v6) = 1000000;
    if ((int)v6 - 1 < v5)
      v5 = v6 - 1;
    if (-(int)v6 > v5)
      v5 = -(int)v6;
  }
  else
  {
    LODWORD(v6) = WebCore::GridPosition::gMaxPositionForTesting;
    if (!byte_1EE2F9580)
      LODWORD(v6) = 1000000;
    if ((int)v6 >= 1)
      v7 = 1;
    else
      v7 = v6;
    v8 = v7 - 1;
    if (-(int)v6 > v8)
      v5 = -(int)v6;
    else
      v5 = v8;
  }
  v9 = 1 - v6;
  if ((int)v6 >= v4)
    LODWORD(v6) = v4;
  if (v9 <= (int)v6)
    v6 = v6;
  else
    v6 = v9;
  return v5 | (unint64_t)(v6 << 32);
}

BOOL WebCore::RenderGrid::establishesIndependentFormattingContext(WebCore::RenderGrid *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return WebCore::RenderElement::establishesIndependentFormattingContext(this);
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3 || *(_BYTE *)(v3 + 46) != 12 || (*((_BYTE *)this + 21) & 4) != 0)
    return WebCore::RenderElement::establishesIndependentFormattingContext(this);
  if (!WebCore::RenderElement::establishesIndependentFormattingContext(this))
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 80) + 258))
    {
      v12 = *((_QWORD *)this + 4);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
        {
          if (*(_BYTE *)(v13 + 46) == 12)
          {
            do
            {
              v14 = v13;
              v15 = *(_QWORD *)(v13 + 32);
              if (!v15)
                break;
              v13 = *(_QWORD *)(v15 + 8);
              if (!v13)
                break;
            }
            while (*(_BYTE *)(v13 + 46) == 12
                 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 88) + 40) + 80) + 258));
            if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 88) + 40) + 80) + 260))
              return WebCore::RenderElement::establishesIndependentFormattingContext(this);
          }
        }
      }
    }
  }
  if (WebCore::RenderElement::establishesIndependentFormattingContext(this))
    return 1;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 80) + 259))
    return 1;
  v5 = *((_QWORD *)this + 4);
  if (!v5)
    return 1;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6 || *(_BYTE *)(v6 + 46) != 12)
    return 1;
  do
  {
    v7 = v6;
    v8 = *(_QWORD *)(v6 + 32);
    if (!v8)
      break;
    v6 = *(_QWORD *)(v8 + 8);
    if (!v6)
      break;
  }
  while (*(_BYTE *)(v6 + 46) == 12 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 40) + 80) + 259));
  v9 = v7;
  do
  {
    v10 = v9;
    v11 = *(_QWORD *)(v9 + 32);
    if (!v11)
      break;
    v9 = *(_QWORD *)(v11 + 8);
    if (!v9)
      break;
  }
  while (*(_BYTE *)(v9 + 46) == 12 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 40) + 80) + 258));
  return !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 40) + 80) + 260)
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 40) + 80) + 261)
      || WebCore::RenderElement::establishesIndependentFormattingContext(this);
}

void WebCore::RenderHTMLCanvas::~RenderHTMLCanvas(WebCore::RenderHTMLCanvas *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34201A0;
  v3 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF *v3;
  void *v4;

  *(_QWORD *)this = off_1E34201A0;
  v3 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_QWORD *)this + 26) = 0;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v4);
  }
}

uint64_t WebCore::RenderHTMLCanvas::canvasElement(WebCore::RenderHTMLCanvas *this)
{
  uint64_t result;

  result = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(result + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::canvasTag + 24))
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

BOOL WebCore::RenderHTMLCanvas::requiresLayer(WebCore::RenderHTMLCanvas *this, WTF::StringImpl *a2)
{
  const WebCore::RenderObject *v3;

  return (WebCore::RenderBox::requiresLayer(this, a2) & 1) != 0
      || WebCore::canvasCompositingStrategy(this, v3) != 0;
}

uint64_t WebCore::RenderHTMLCanvas::paintReplaced(WebCore::RenderHTMLCanvas *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  signed int v12;
  int v13;
  unint64_t v14;
  int32x2_t v15;
  __int32 v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  char v26;
  __int32 v27;
  uint64_t v28;
  signed __int32 v29;
  int v30;
  signed __int32 v31;
  int v32;
  int v33;
  WebCore::Page *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned __int8 *v40;
  unsigned int v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int32x2_t v59[2];

  v6 = *((_QWORD *)a2 + 10);
  v7 = WebCore::RenderBox::contentBoxRect(this);
  v9 = v8;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
  if (!(_DWORD)result)
  {
    v11 = *((_DWORD *)a3 + 1);
    v12 = v7 + *(_DWORD *)a3;
    if (__OFADD__((_DWORD)v7, *(_DWORD *)a3))
      v12 = (v7 >> 31) + 0x7FFFFFFF;
    v13 = HIDWORD(v7) + v11;
    if (__OFADD__(HIDWORD(v7), v11))
      v13 = (HIDWORD(v7) >> 31) + 0x7FFFFFFF;
    v59[0] = (int32x2_t)WebCore::RenderReplaced::intrinsicSize((unint64_t)this);
    v14 = WebCore::RenderReplaced::replacedContentRect(this, v59);
    v16 = v15.i32[0];
    v59[1] = v15;
    v17 = *((_DWORD *)a3 + 1);
    v18 = v14 + *(_DWORD *)a3;
    if (__OFADD__((_DWORD)v14, *(_DWORD *)a3))
      v18 = (v14 >> 31) + 0x7FFFFFFF;
    v19 = HIDWORD(*(_QWORD *)&v15);
    v59[0].i32[0] = v18;
    v20 = __OFADD__(HIDWORD(v14), v17);
    v21 = HIDWORD(v14) + v17;
    if (v20)
      v21 = (HIDWORD(v14) >> 31) + 0x7FFFFFFF;
    v59[0].i32[1] = v21;
    if (v12 > (int)v18)
      goto LABEL_66;
    v22 = v12 + v9;
    if (__OFADD__(v12, (_DWORD)v9))
      v22 = (v12 >> 31) + 0x7FFFFFFF;
    v23 = v18 + v15.i32[0];
    if (__OFADD__(v18, v15.i32[0]))
      v23 = (v18 >> 31) + 0x7FFFFFFF;
    if (v22 < v23 || v13 > v21)
    {
LABEL_66:
      v45 = *((_QWORD *)a2 + 10);
    }
    else
    {
      v24 = v13 + HIDWORD(v9);
      if (__OFADD__(v13, HIDWORD(v9)))
        v24 = (v13 >> 31) + 0x7FFFFFFF;
      v25 = v21 + v15.i32[1];
      if (__OFADD__(v21, v15.i32[1]))
        v25 = (v21 >> 31) + 0x7FFFFFFF;
      v56 = *((_QWORD *)a2 + 10);
      if (v24 >= v25)
      {
        v26 = 1;
LABEL_23:
        if (*((_WORD *)a2 + 8) == 8)
        {
          if (v59[0].i32[0] <= v12)
            v27 = v12;
          else
            v27 = v59[0].i32[0];
          if (v59[0].i32[1] <= v13)
            v28 = v13;
          else
            v28 = v59[0].u32[1];
          v29 = v59[0].i32[0] + v16;
          if (__OFADD__(v59[0].i32[0], v16))
            v29 = ((unsigned __int32)v59[0].i32[0] >> 31) + 0x7FFFFFFF;
          v30 = v12 + v9;
          if (__OFADD__(v12, (_DWORD)v9))
            v30 = (v12 >> 31) + 0x7FFFFFFF;
          if (v30 < v29)
            v29 = v30;
          v31 = v59[0].i32[1] + v19;
          if (__OFADD__(v59[0].i32[1], (_DWORD)v19))
            v31 = ((unsigned __int32)v59[0].i32[1] >> 31) + 0x7FFFFFFF;
          v32 = v13 + HIDWORD(v9);
          if (__OFADD__(v13, HIDWORD(v9)))
            v32 = (v13 >> 31) + 0x7FFFFFFF;
          if (v32 >= v31)
            v33 = v31;
          else
            v33 = v32;
          if (v27 >= v29 || (int)v28 >= v33)
          {
            v29 = 0;
            v33 = 0;
            v27 = 0;
            v28 = 0;
          }
          v34 = *(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                                              + 40)
                                                                                  + 8)
                                                                      + 528)
                                                          + 8)
                                              + 24)
                                  + 8);
          v35 = v29 - v27;
          if (__OFSUB__(v29, v27))
            v35 = (v29 >> 31) + 0x7FFFFFFF;
          v36 = v28 << 32;
          v20 = __OFSUB__(v33, (_DWORD)v28);
          v37 = (v33 - v28);
          if (v20)
            v37 = (v33 >> 31) + 0x7FFFFFFF;
          v57 = v36 | v27;
          v58 = v35 | (unint64_t)(v37 << 32);
          WebCore::Page::addRelevantRepaintedObject(v34, this, (const WebCore::LayoutRect *)&v57);
        }
        v38 = (*(_BYTE *)(*((_QWORD *)this + 13) + 234) & 7) - 1;
        if (v38 > 3)
        {
          v40 = (unsigned __int8 *)(v6 + 340);
          v41 = *(unsigned __int8 *)(v6 + 340);
          v39 = v41;
        }
        else
        {
          v39 = (0x1010002u >> (8 * v38)) & 3;
          v40 = (unsigned __int8 *)(v6 + 340);
          v41 = *(unsigned __int8 *)(v6 + 340);
        }
        if (!v39 || v41 == v39)
        {
          v42 = 1;
        }
        else
        {
          *(_BYTE *)(v6 + 340) = v39;
          *(_DWORD *)(v6 + 184) |= 0x400u;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 88))(v6, v6 + 8);
          v42 = 0;
        }
        v43 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
        if ((*(_WORD *)(v43 + 28) & 0x10) == 0
          || *(_QWORD *)(*(_QWORD *)(v43 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::canvasTag + 24))
        {
          __break(0xC471u);
          JUMPOUT(0x1963D5358);
        }
        *(_BYTE *)(v43 + 275) = *((_BYTE *)a2 + 22) & 1;
        result = WebCore::HTMLCanvasElement::paint((WebCore::HTMLCanvasElement *)v43, (WebCore::GraphicsContext *)v6, (const WebCore::LayoutRect *)v59);
        v44 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
        if ((*(_WORD *)(v44 + 28) & 0x10) == 0
          || *(_QWORD *)(*(_QWORD *)(v44 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::canvasTag + 24))
        {
          __break(0xC471u);
          JUMPOUT(0x1963D538CLL);
        }
        *(_BYTE *)(v44 + 275) = 0;
        if ((v42 & 1) == 0)
        {
          if (*v40 != v41)
          {
            *(_BYTE *)(v6 + 340) = v41;
            *(_DWORD *)(v6 + 184) |= 0x400u;
          }
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 88))(v6, v6 + 8);
        }
        if ((v26 & 1) == 0)
          return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 104))(v56, 1);
        return result;
      }
      v45 = *((_QWORD *)a2 + 10);
    }
    v56 = v45;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 96))(v45, 1);
    v46 = *((_QWORD *)a2 + 10);
    v48 = v12 - (v47 & 0xFFFFFFC0);
    v50 = v13 - (v49 & 0xFFFFFFC0);
    v51 = v48 + v9;
    if (__OFADD__(v48, (_DWORD)v9))
      v51 = (v48 >> 31) + 0x7FFFFFFF;
    v52 = v50 + HIDWORD(v9);
    v53 = (v50 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__(v50, HIDWORD(v9)))
      v53 = v50 + HIDWORD(v9);
    v54 = v50 + 32;
    v55 = v48 + 32;
    *(float *)&v57 = (float)(v12 / 64 + (v55 >> 6));
    *((float *)&v57 + 1) = (float)(v13 / 64 + (v54 >> 6));
    *(float *)&v58 = (float)(v51 / 64 - (v55 >> 6) + ((int)(v51 - (v52 & 0xFFFFFFC0) + 32) >> 6));
    *((float *)&v58 + 1) = (float)(v53 / 64 - (v54 >> 6) + ((int)(v53 - (v51 & 0xFFFFFFC0) + 32) >> 6));
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v46 + 456))(v46, &v57);
    v26 = 0;
    goto LABEL_23;
  }
  if ((*(_BYTE *)(v6 + 716) & 2) == 0)
  {
    result = WebCore::RenderHTMLCanvas::canvasElement(this);
    if (*(_QWORD *)(result + 248))
      *(_BYTE *)(v6 + 716) |= 2u;
  }
  return result;
}

unint64_t WebCore::RenderHTMLCanvas::canvasSizeChanged(WebCore::RenderHTMLCanvas *this)
{
  uint64_t v1;
  float v3;
  double v4;
  unsigned int v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  unint64_t result;
  uint64_t v10;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::canvasTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1963D55E0);
  }
  v3 = *(float *)(*((_QWORD *)this + 13) + 184);
  v4 = (float)(v3 * (float)*(int *)(v1 + 120)) * 64.0;
  if (v4 > -2147483650.0)
    v5 = (int)v4;
  else
    v5 = 0x80000000;
  if (v4 < 2147483650.0)
    v6 = v5;
  else
    v6 = 0x7FFFFFFFLL;
  v7 = (float)(v3 * (float)*(int *)(v1 + 124)) * 64.0;
  if (v7 >= 2147483650.0)
  {
    v8 = 0x7FFFFFFFLL;
  }
  else if (v7 <= -2147483650.0)
  {
    v8 = 0x80000000;
  }
  else
  {
    v8 = (int)v7;
  }
  result = WebCore::RenderReplaced::intrinsicSize((unint64_t)this);
  if (__PAIR64__(v8, v6) != result)
  {
    *((_QWORD *)this + 25) = v6 | (v8 << 32);
    v10 = *((_QWORD *)this + 4);
    if (v10)
    {
      if (*(_QWORD *)(v10 + 8))
        return WebCore::RenderReplaced::setNeedsLayoutIfNeededAfterIntrinsicSizeChange(this);
    }
  }
  return result;
}

uint64_t WebCore::RenderRangeIterator::checkForSpanner(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this && *(_BYTE *)(v1 + 46) == 27)
  {
    v2 = (_QWORD *)this;
    ++*(_DWORD *)(v1 + 16);
    v6 = v1;
    v3 = *(unsigned int *)(this + 20);
    if ((_DWORD)v3 == *(_DWORD *)(this + 16))
    {
      this = WTF::Vector<WebCore::RenderMultiColumnSpannerPlaceholder *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RenderMultiColumnSpannerPlaceholder *>(this + 8, (unint64_t)&v6);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(this + 8) + 8 * v3) = v1;
      *(_DWORD *)(this + 20) = v3 + 1;
    }
    v4 = *(_QWORD *)(v1 + 200);
    if (v4)
      v4 = *(_QWORD *)(v4 + 8);
    *v2 = v4;
    v5 = *(_DWORD *)(v1 + 16);
    if (v5)
    {
      *(_DWORD *)(v1 + 16) = v5 - 1;
    }
    else
    {
      this = 286;
      __break(0xC471u);
    }
  }
  return this;
}

uint64_t WebCore::RenderRangeIterator::RenderRangeIterator(WebCore::RenderRangeIterator *this, WebCore::RenderObject *a2)
{
  char **v3;
  uint64_t result;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  WebCore::RenderObject *v10;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  v3 = (char **)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (!a2 || *((_BYTE *)a2 + 46) != 27)
    return (uint64_t)this;
  ++*((_DWORD *)a2 + 4);
  v10 = a2;
  v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3, 1uLL, (unint64_t)&v10);
  v7 = *((unsigned int *)this + 5);
  *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v7) = *(_QWORD *)v6;
  *((_DWORD *)this + 5) = v7 + 1;
  v8 = *((_QWORD *)a2 + 25);
  if (v8)
    v8 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)this = v8;
  v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    *((_DWORD *)a2 + 4) = v9 - 1;
    return (uint64_t)this;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RenderRangeIterator::next(WebCore::RenderRangeIterator *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *((unsigned int *)this + 5);
  if ((_DWORD)v2 && (v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8 * v2 - 8) + 200)) != 0)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v5 = *(_QWORD *)this;
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 112))(*(_QWORD *)this);
  if (!v6)
  {
    if (v5 == v4)
    {
LABEL_31:
      v6 = 0;
    }
    else
    {
      do
      {
        v7 = *(unsigned int *)(v5 + 47);
        if (v7 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32))
        {
          v6 = *(_QWORD *)((v7 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32)) + 8);
          if (v6)
            break;
        }
        v8 = *(_QWORD *)(v5 + 32);
        if (!v8)
          goto LABEL_31;
        v6 = 0;
        v5 = *(_QWORD *)(v8 + 8);
      }
      while (v5 && v5 != v4);
    }
  }
  *(_QWORD *)this = v6;
  WebCore::RenderRangeIterator::checkForSpanner((uint64_t)this);
  result = *(_QWORD *)this;
  if (v4 && !result)
  {
    v11 = *((unsigned int *)this + 5);
    if ((_DWORD)v11)
    {
      v12 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v11 - 8);
      *((_DWORD *)this + 5) = v11 - 1;
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 112))(v12);
      if (!v13)
      {
        v14 = *(unsigned int *)(v12 + 47);
        if (!(v14 | ((unint64_t)*(unsigned __int8 *)(v12 + 51) << 32))
          || (v13 = *(_QWORD *)((v14 | ((unint64_t)*(unsigned __int8 *)(v12 + 51) << 32)) + 8)) == 0)
        {
          v15 = *(_QWORD *)(v12 + 32);
          if (v15 && (v16 = *(_QWORD *)(v15 + 8)) != 0)
          {
            do
            {
              v17 = *(unsigned int *)(v16 + 47);
              if (v17 | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32))
              {
                v13 = *(_QWORD *)((v17 | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32)) + 8);
                if (v13)
                  break;
              }
              v18 = *(_QWORD *)(v16 + 32);
              if (!v18)
                goto LABEL_30;
              v13 = 0;
              v16 = *(_QWORD *)(v18 + 8);
            }
            while (v16);
          }
          else
          {
LABEL_30:
            v13 = 0;
          }
        }
      }
      *(_QWORD *)this = v13;
      WebCore::RenderRangeIterator::checkForSpanner((uint64_t)this);
      return *(_QWORD *)this;
    }
    else
    {
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebCore::RenderHighlight::setRenderRange(WTF **this, const WebCore::HighlightRange *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  int v6;
  unsigned int v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::RenderObject *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  WTF *v26;
  __int16 v28;
  __int16 v29;
  const WebCore::HighlightRange *v30;
  const WebCore::HighlightRange *v31;
  __int16 v32;
  __int16 v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  WebCore::RenderObject *v38;
  WTF *v39;
  WTF *v40;
  WTF *v41;

  v2 = *((_QWORD *)a2 + 3);
  if (!v2)
    return 0;
  v3 = *((_QWORD *)a2 + 5);
  if (!v3)
    return 0;
  *(_DWORD *)(v2 + 24) += 2;
  v4 = *((_DWORD *)a2 + 8);
  v5 = *((_BYTE *)a2 + 36);
  v6 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v6 + 2;
  v7 = v5 & 7;
  if (v7 <= 4)
  {
    v9 = *((_DWORD *)a2 + 12);
    if (((1 << v7) & 0x19) != 0 || *(_QWORD *)(v2 + 32))
    {
      v10 = *((_BYTE *)a2 + 52) & 7;
      if (v10 <= 4 && (((1 << v10) & 0x19) != 0 || *(_QWORD *)(v3 + 32)))
      {
        v11 = v2;
        if (v7 - 1 <= 1)
          v11 = *(_QWORD *)(v2 + 32);
        a2 = (const WebCore::HighlightRange *)(*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL);
        v12 = v3;
        if (v10 - 1 <= 1)
          v12 = *(_QWORD *)(v3 + 32);
        v13 = 0;
        if (!a2
          || (v14 = *(_QWORD *)(v12 + 64),
              v15 = (WebCore::RenderObject *)(v14 & 0xFFFFFFFFFFFFLL),
              (v14 & 0xFFFFFFFFFFFFLL) == 0))
        {
LABEL_54:
          if (!v6)
            goto LABEL_86;
          goto LABEL_55;
        }
        if (v7)
        {
          if (v7 != 4)
          {
            v34 = v9;
            v35 = v10;
            v37 = v14 & 0xFFFFFFFFFFFFLL;
            v30 = a2;
            if (v7 == 1)
            {
              v4 = WebCore::Node::computeNodeIndex((WebCore::Node *)v2);
            }
            else if (v7 == 2)
            {
              v4 = WebCore::Node::computeNodeIndex((WebCore::Node *)v2) + 1;
            }
            else
            {
              v4 = 0;
            }
            a2 = v30;
            v9 = v34;
            v10 = v35;
            v15 = (WebCore::RenderObject *)v37;
            if (!v35)
              goto LABEL_37;
LABEL_27:
            if (v10 != 4)
            {
              v38 = v15;
              v36 = v4;
              v31 = a2;
              if (v10 == 1)
              {
                v9 = WebCore::Node::computeNodeIndex((WebCore::Node *)v3);
              }
              else if (v10 == 2)
              {
                v9 = WebCore::Node::computeNodeIndex((WebCore::Node *)v3) + 1;
              }
              else
              {
                v9 = 0;
              }
              a2 = v31;
              v4 = v36;
              v15 = v38;
              goto LABEL_37;
            }
            v19 = *(_WORD *)(v3 + 28);
            if ((v19 & 1) != 0)
            {
              v21 = *(_QWORD *)(v3 + 80);
              if (v21)
              {
                v9 = *(_DWORD *)(v21 + 4);
                goto LABEL_37;
              }
            }
            else if ((v19 & 4) != 0)
            {
              v20 = *(_QWORD *)(v3 + 80);
              if (v20)
              {
                v9 = 0;
                do
                {
                  ++v9;
                  v20 = *(_QWORD *)(v20 + 56);
                }
                while (v20);
                goto LABEL_37;
              }
            }
            v9 = 0;
LABEL_37:
            WebCore::RenderRange::RenderRange((WebCore::RenderRange *)&v39, a2, v15, v4, v9);
            v22 = v39;
            if (v39)
              ++*(_DWORD *)v39;
            v23 = *this;
            *this = v22;
            if (v23)
            {
              if (*(_DWORD *)v23 == 1)
                WTF::fastFree(v23, a2);
              else
                --*(_DWORD *)v23;
            }
            v24 = v40;
            if (v40)
              ++*(_DWORD *)v40;
            v25 = this[1];
            this[1] = v24;
            if (v25)
            {
              if (*(_DWORD *)v25 == 1)
              {
                WTF::fastFree(v25, a2);
                v24 = v40;
              }
              else
              {
                --*(_DWORD *)v25;
              }
            }
            this[2] = v41;
            v40 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 1)
                WTF::fastFree(v24, a2);
              else
                --*(_DWORD *)v24;
            }
            v26 = v39;
            v39 = 0;
            if (v26)
            {
              if (*(_DWORD *)v26 == 1)
                WTF::fastFree(v26, a2);
              else
                --*(_DWORD *)v26;
            }
            v6 = *(_DWORD *)(v3 + 24) - 2;
            v13 = 1;
            goto LABEL_54;
          }
          v16 = *(_WORD *)(v2 + 28);
          if ((v16 & 1) != 0)
          {
            v18 = *(_QWORD *)(v2 + 80);
            if (!v18)
              goto LABEL_18;
            v4 = *(_DWORD *)(v18 + 4);
          }
          else
          {
            if ((v16 & 4) == 0 || (v17 = *(_QWORD *)(v2 + 80)) == 0)
            {
LABEL_18:
              v4 = 0;
              if (!v10)
                goto LABEL_37;
              goto LABEL_27;
            }
            v4 = 0;
            do
            {
              ++v4;
              v17 = *(_QWORD *)(v17 + 56);
            }
            while (v17);
          }
        }
        if (!v10)
          goto LABEL_37;
        goto LABEL_27;
      }
    }
  }
  v13 = 0;
  if (!v6)
  {
LABEL_86:
    v32 = *(_WORD *)(v3 + 30);
    if ((v32 & 0x400) == 0)
    {
      v33 = *(_WORD *)(v3 + 28);
      if ((v33 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v3, a2);
      }
      else
      {
        if ((v33 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
          v32 = *(_WORD *)(v3 + 30);
        }
        *(_WORD *)(v3 + 30) = v32 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
      }
    }
    goto LABEL_56;
  }
LABEL_55:
  *(_DWORD *)(v3 + 24) = v6;
LABEL_56:
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    v28 = *(_WORD *)(v2 + 30);
    if ((v28 & 0x400) == 0)
    {
      v29 = *(_WORD *)(v2 + 28);
      if ((v29 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v2, a2);
      }
      else
      {
        if ((v29 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 160) + 16))(*(_QWORD *)(v2 + 160));
          v28 = *(_WORD *)(v2 + 30);
        }
        *(_WORD *)(v2 + 30) = v28 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
      }
    }
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v13;
}

uint64_t WebCore::RenderHighlight::highlightStateForRenderer(WebCore::RenderHighlight *this, const WebCore::RenderObject *a2)
{
  WebCore *v4;
  uint64_t v5;
  WebCore::RenderObject *v6;
  void *v7;
  const WebCore::RenderObject *v8;
  BOOL v9;
  uint64_t v10;
  WTF *v11;
  const WebCore::RenderObject *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  const WebCore::RenderObject *v16;
  BOOL v17;
  char v19[8];
  WTF *v20;
  int v21;

  if (*((_BYTE *)this + 24))
    return (*((_DWORD *)a2 + 5) >> 25) & 7;
  if (*(_QWORD *)this && *(const WebCore::RenderObject **)(*(_QWORD *)this + 8) == a2)
  {
    v15 = *((_QWORD *)this + 1);
    if (v15 && ((v16 = *(const WebCore::RenderObject **)(v15 + 8)) != 0 ? (v17 = v16 == a2) : (v17 = 0), v17))
      return 4;
    else
      return 1;
  }
  else
  {
    v4 = *(WebCore **)(*((_QWORD *)this + 1) + 8);
    if (v4 == a2)
    {
      return 3;
    }
    else
    {
      v5 = WebCore::rendererAfterOffset(v4, (const WebCore::RenderObject *)*((unsigned int *)this + 5));
      if (*(_QWORD *)this)
        v6 = *(WebCore::RenderObject **)(*(_QWORD *)this + 8);
      else
        v6 = 0;
      WebCore::RenderRangeIterator::RenderRangeIterator((WebCore::RenderRangeIterator *)v19, v6);
      if (!*(_QWORD *)this
        || ((v8 = *(const WebCore::RenderObject **)(*(_QWORD *)this + 8)) != 0
          ? (v9 = v8 == (const WebCore::RenderObject *)v5)
          : (v9 = 1),
            v9))
      {
        v10 = 0;
      }
      else
      {
        while (1)
        {
          v12 = *(const WebCore::RenderObject **)this;
          if (*(_QWORD *)this)
            v12 = (const WebCore::RenderObject *)*((_QWORD *)v12 + 1);
          if (v8 != v12)
          {
            v13 = (*(uint64_t (**)(const WebCore::RenderObject *))(*(_QWORD *)v8 + 512))(v8);
            if (v8 == a2 && (v13 & 1) != 0)
              break;
          }
          v14 = WebCore::RenderRangeIterator::next((WebCore::RenderRangeIterator *)v19);
          v10 = 0;
          if (v14)
          {
            v8 = (const WebCore::RenderObject *)v14;
            if (v14 != v5)
              continue;
          }
          goto LABEL_15;
        }
        v10 = 2;
      }
LABEL_15:
      v11 = v20;
      if (v20)
      {
        v20 = 0;
        v21 = 0;
        WTF::fastFree(v11, v7);
      }
      return v10;
    }
  }
}

uint64_t WebCore::rendererAfterOffset(WebCore *this, const WebCore::RenderObject *a2)
{
  unsigned int v2;
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;

  v2 = a2;
  result = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 112))(this);
  if (v2 && result)
  {
    v5 = 1;
    while (1)
    {
      v6 = *(unsigned int *)(result + 47);
      if (!(v6 | ((unint64_t)*(unsigned __int8 *)(result + 51) << 32)))
        break;
      result = *(_QWORD *)((v6 | ((unint64_t)*(unsigned __int8 *)(result + 51) << 32)) + 8);
      if (result)
        v7 = v5 >= v2;
      else
        v7 = 1;
      ++v5;
      if (v7)
        goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    if (result)
      return result;
  }
  v8 = *(unsigned int *)((char *)this + 47);
  if (!(v8 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32))
    || (result = *(_QWORD *)((v8 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32)) + 8)) == 0)
  {
    for (i = *((_QWORD *)this + 4); i; i = *(_QWORD *)(v10 + 32))
    {
      v10 = *(_QWORD *)(i + 8);
      if (!v10)
        break;
      v11 = *(unsigned int *)(v10 + 47);
      if (v11 | ((unint64_t)*(unsigned __int8 *)(v10 + 51) << 32))
      {
        result = *(_QWORD *)((v11 | ((unint64_t)*(unsigned __int8 *)(v10 + 51) << 32)) + 8);
        if (result)
          return result;
      }
    }
    return 0;
  }
  return result;
}

unint64_t WebCore::RenderHighlight::rangeForTextBox(WebCore::RenderHighlight *this, const WebCore::RenderText *a2, const WebCore::TextBoxSelectableRange *a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;

  v5 = WebCore::RenderHighlight::highlightStateForTextBox(this, a2, a3);
  v7 = v5;
  switch((int)v5)
  {
    case 0:
      return v5 | (unint64_t)(v7 << 32);
    case 1:
      v8 = *(_DWORD *)a3;
      v9 = *((_DWORD *)a3 + 1);
      v6 = v9 + *(_DWORD *)a3;
      if (__CFADD__(v9, *(_DWORD *)a3))
        goto LABEL_51;
      v10 = *((_DWORD *)this + 4);
      if (v6 >= v10)
        v6 = *((_DWORD *)this + 4);
      v6 -= v8;
      if (v8 > v10)
        v6 = 0;
      if (!*((_BYTE *)a3 + 20))
        goto LABEL_8;
      goto LABEL_52;
    case 2:
      v9 = *(_DWORD *)a3;
      LODWORD(v7) = *((_DWORD *)a3 + 1);
      if (__CFADD__(*(_DWORD *)a3, (_DWORD)v7))
        goto LABEL_51;
      if (*((_BYTE *)a3 + 20) && (v26 = *((_DWORD *)a3 + 4)) != 0)
      {
        LODWORD(v5) = 0;
        if (v26 >= v7)
          v7 = v7;
        else
          v7 = v26;
      }
      else
      {
        if ((_DWORD)v7)
          LODWORD(v5) = 0;
        else
          LODWORD(v5) = *((_DWORD *)a3 + 2);
        v7 = (*((_DWORD *)a3 + 2) + v7);
      }
      return v5 | (unint64_t)(v7 << 32);
    case 3:
      v11 = *(_DWORD *)a3;
      v9 = *((_DWORD *)a3 + 1);
      v12 = v9 + *(_DWORD *)a3;
      if (__CFADD__(v9, *(_DWORD *)a3))
        goto LABEL_51;
      v13 = *((_DWORD *)this + 5);
      if (*((_BYTE *)a3 + 20))
      {
        v16 = *((_DWORD *)a3 + 4);
        if (v16)
        {
          LODWORD(v5) = 0;
          if (v12 >= v13)
            v27 = *((_DWORD *)this + 5);
          else
            v27 = v9 + *(_DWORD *)a3;
          v28 = v27 - v11;
          if (v11 <= v13)
            LODWORD(v7) = v28;
          else
            LODWORD(v7) = 0;
LABEL_70:
          if (v16 >= v7)
            v7 = v7;
          else
            v7 = v16;
          return v5 | (unint64_t)(v7 << 32);
        }
      }
      if (v9)
        LODWORD(v5) = 0;
      else
        LODWORD(v5) = *((_DWORD *)a3 + 2);
      if (v12 >= v13)
        v14 = *((_DWORD *)this + 5);
      else
        v14 = v9 + *(_DWORD *)a3;
      v15 = v14 - v11;
      if (v11 <= v13)
        v7 = v15;
      else
        v7 = 0;
      if (*((_BYTE *)a3 + 20))
      {
        v16 = *((_DWORD *)a3 + 4);
        if (v16)
          goto LABEL_70;
      }
      goto LABEL_48;
    case 4:
      v17 = *(_DWORD *)a3;
      v9 = *((_DWORD *)a3 + 1);
      v18 = v9 + *(_DWORD *)a3;
      if (__CFADD__(v9, *(_DWORD *)a3))
      {
LABEL_51:
        __break(1u);
LABEL_52:
        LODWORD(v7) = *((_DWORD *)a3 + 4);
        if ((_DWORD)v7)
        {
          if (v7 >= v6)
            LODWORD(v5) = v6;
          else
            LODWORD(v5) = *((_DWORD *)a3 + 4);
          if (v7 >= v9)
            v7 = v9;
          else
            v7 = v7;
        }
        else
        {
LABEL_8:
          v7 = *((_DWORD *)a3 + 2) + v9;
          if (v6 == v9)
            LODWORD(v5) = *((_DWORD *)a3 + 2) + v9;
          else
            LODWORD(v5) = v6;
        }
      }
      else
      {
        v20 = *((_DWORD *)this + 4);
        v19 = *((_DWORD *)this + 5);
        if (v18 >= v20)
          v21 = *((_DWORD *)this + 4);
        else
          v21 = v9 + *(_DWORD *)a3;
        v22 = v21 - v17;
        if (v17 <= v20)
          v23 = v22;
        else
          v23 = 0;
        if (*((_BYTE *)a3 + 20))
        {
          v29 = *((_DWORD *)a3 + 4);
          if (v29)
          {
            if (v29 >= v23)
              LODWORD(v5) = v23;
            else
              LODWORD(v5) = *((_DWORD *)a3 + 4);
            if (v18 >= v19)
              v30 = *((_DWORD *)this + 5);
            else
              v30 = v9 + *(_DWORD *)a3;
            v31 = v30 - v17;
            if (v17 <= v19)
              LODWORD(v7) = v31;
            else
              LODWORD(v7) = 0;
LABEL_83:
            if (v29 >= v7)
              v7 = v7;
            else
              v7 = v29;
            return v5 | (unint64_t)(v7 << 32);
          }
        }
        if (v23 == v9)
          LODWORD(v5) = *((_DWORD *)a3 + 2) + v9;
        else
          LODWORD(v5) = v23;
        if (v18 >= v19)
          v18 = *((_DWORD *)this + 5);
        v24 = v18 - v17;
        if (v17 <= v19)
          v7 = v24;
        else
          v7 = 0;
        if (*((_BYTE *)a3 + 20))
        {
          v29 = *((_DWORD *)a3 + 4);
          if (v29)
            goto LABEL_83;
        }
LABEL_48:
        if ((_DWORD)v7 == v9)
          v7 = *((_DWORD *)a3 + 2) + v9;
      }
      return v5 | (unint64_t)(v7 << 32);
    default:
      __break(0xC471u);
      JUMPOUT(0x1963D6110);
  }
}

uint64_t WebCore::RenderFragmentedFlow::requiresLayer(WebCore::RenderFragmentedFlow *this)
{
  return 1;
}

uint64_t WebCore::RenderFragmentedFlow::cachedEnclosingFragmentedFlowNeedsUpdate(WebCore::RenderFragmentedFlow *this)
{
  return 0;
}

uint64_t WebCore::RenderFragmentedFlow::isPageLogicalHeightKnown(WebCore::RenderFragmentedFlow *this)
{
  return 1;
}

uint64_t WebCore::RenderFragmentedFlow::shouldCheckColumnBreaks(WebCore::RenderFragmentedFlow *this)
{
  return 0;
}

uint64_t WebCore::RenderFragmentedFlow::initialLogicalWidth(WebCore::RenderFragmentedFlow *this)
{
  return 0;
}

const char *WebCore::RenderFrame::renderName(WebCore::RenderFrame *this)
{
  return "RenderFrame";
}

const char *WebCore::RenderReplaced::renderName(WebCore::RenderReplaced *this)
{
  return "RenderReplaced";
}

const char *WebCore::RenderFrameSet::renderName(WebCore::RenderFrameSet *this)
{
  return "RenderFrameSet";
}

uint64_t WebCore::RenderFrameSet::canHaveChildren(WebCore::RenderFrameSet *this)
{
  return 1;
}

uint64_t WebCore::RenderGrid::avoidsFloats(WebCore::RenderGrid *this)
{
  return 1;
}

uint64_t WebCore::RenderGrid::shouldResetLogicalHeightBeforeLayout(WebCore::RenderGrid *this)
{
  return 1;
}

uint64_t WebCore::RenderGrid::canDropAnonymousBlockChild(WebCore::RenderGrid *this)
{
  return 0;
}

const char *WebCore::RenderHTMLCanvas::renderName(WebCore::RenderHTMLCanvas *this)
{
  return "RenderHTMLCanvas";
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::RenderFragmentedFlow::RenderFragmentContainerRange>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::RenderFragmentedFlow::RenderFragmentContainerRange>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::RenderFragmentedFlow::RenderFragmentContainerRange,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::RenderFragmentedFlow::RenderFragmentContainerRange>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(WTF **a1, void *a2)
{
  uint64_t v3;
  WTF **v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      if (*v4 != (WTF *)-1)
      {
        v5 = v4[2];
        v4[2] = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 1)
            WTF::fastFree(v5, a2);
          else
            --*(_DWORD *)v5;
        }
        v6 = v4[1];
        v4[1] = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 1)
            WTF::fastFree(v6, a2);
          else
            --*(_DWORD *)v6;
        }
        v7 = *v4;
        *v4 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 1)
            WTF::fastFree(v7, a2);
          else
            --*(_DWORD *)v7;
        }
      }
      v4 += 4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::optional<unsigned long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(WTF **a1, void *a2)
{
  uint64_t v3;
  WTF **v4;
  WTF *v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WTF *)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 1)
            WTF::fastFree(v5, a2);
          else
            --*(_DWORD *)v5;
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

void WebCore::Grid::~Grid(WebCore::Grid *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  WTF **v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;

  v3 = (WTF *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    v4 = (WTF *)*((_QWORD *)v3 + 1);
    if (v4)
    {
      do
      {
        v5 = (WTF *)*((_QWORD *)v4 + 2);
        WTF::fastFree(v4, a2);
        v4 = v5;
      }
      while (v5);
    }
    if (*(_QWORD *)v3)
      WTF::fastFree((WTF *)(*(_QWORD *)v3 - 16), a2);
    WTF::fastFree(v3, a2);
  }
  v6 = (WTF *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v6)
  {
    v7 = (WTF *)*((_QWORD *)v6 + 1);
    if (v7)
    {
      do
      {
        v8 = (WTF *)*((_QWORD *)v7 + 2);
        WTF::fastFree(v7, a2);
        v7 = v8;
      }
      while (v8);
    }
    if (*(_QWORD *)v6)
      WTF::fastFree((WTF *)(*(_QWORD *)v6 - 16), a2);
    WTF::fastFree(v6, a2);
  }
  v9 = *((_QWORD *)this + 13);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      v11 = (WTF **)*((_QWORD *)this + 13);
      do
      {
        v12 = *v11;
        if (*v11 != (WTF *)-1)
        {
          *v11 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 1)
              WTF::fastFree(v12, a2);
            else
              --*(_DWORD *)v12;
          }
        }
        v11 += 4;
        --v10;
      }
      while (v10);
    }
    WTF::fastFree((WTF *)(v9 - 16), a2);
  }
  v13 = *((unsigned int *)this + 25);
  if ((_DWORD)v13)
    WTF::VectorDestructor<true,WTF::Vector<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::destruct(*((WTF **)this + 11), (WTF *)(*((_QWORD *)this + 11) + 16 * v13));
  v14 = (WTF *)*((_QWORD *)this + 11);
  if (v14)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v14, a2);
  }
  std::__tree<int,std::less<int>,WTF::FastAllocator<int>>::destroy((uint64_t)this + 16, *((WTF **)this + 3));
}

WTF *WebCore::PODIntervalTree<WebCore::LayoutUnit,WTF::WeakPtr<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>::searchForOverlapsFrom<WebCore::RenderFragmentedFlow::FragmentSearchAdapter>(WTF *result, _QWORD *a2)
{
  WTF *v3;
  _DWORD *v5;

  if (result)
  {
    v3 = result;
    do
    {
      if (*(_QWORD *)v3 && *(_DWORD *)(*(_QWORD *)v3 + 48) >= *(_DWORD *)a2)
        WebCore::PODIntervalTree<WebCore::LayoutUnit,WTF::WeakPtr<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>::searchForOverlapsFrom<WebCore::RenderFragmentedFlow::FragmentSearchAdapter>();
      result = (WTF *)a2[1];
      if ((!result || !*((_QWORD *)result + 1))
        && *((_DWORD *)v3 + 8) <= *(_DWORD *)a2
        && *((_DWORD *)v3 + 9) > *(_DWORD *)a2)
      {
        v5 = (_DWORD *)*((_QWORD *)v3 + 5);
        if (v5)
          ++*v5;
        a2[1] = v5;
        if (result)
        {
          if (*(_DWORD *)result == 1)
            result = (WTF *)WTF::fastFree(result, a2);
          else
            --*(_DWORD *)result;
        }
      }
      if (*(_DWORD *)a2 < *((_DWORD *)v3 + 8))
        break;
      v3 = (WTF *)*((_QWORD *)v3 + 1);
    }
    while (v3);
  }
  return result;
}

void WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::RenderFragmentedFlow::RenderFragmentContainerRange>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::RenderFragmentedFlow::RenderFragmentContainerRange>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::RenderFragmentedFlow::RenderFragmentContainerRange,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::RenderFragmentedFlow::RenderFragmentContainerRange>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  WTF **v13;
  uint64_t v14;
  WTF **v15;
  WTF **v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20;
  WTF *v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  WTF **v32;
  WTF *v33;
  WTF *v34;
  WTF *v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  WTF *v40;
  WTF *v41;
  WTF *v42;
  WTF *v43;
  WTF **v44;
  WTF **v45;
  WTF **v46;
  WTF **v47;
  WTF **v48;
  WTF **v49;
  WTF **v50;
  WTF **v51;
  WTF **v52;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 32 * a2);
  v11 = a1;
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v12 = 0;
    v13 = 0;
    v14 = v5;
    v15 = a3;
    do
    {
      v16 = (WTF **)(v4 + 32 * v12);
      v17 = *v16;
      if (*v16 != (WTF *)-1)
      {
        if (v17)
        {
          v22 = *v11;
          if (*v11)
            v23 = *(_DWORD *)(v22 - 8);
          else
            v23 = 0;
          v24 = ~(*((_QWORD *)v17 + 1) << 32) + *((_QWORD *)v17 + 1);
          v25 = (v24 ^ (v24 >> 22)) + ~((v24 ^ (v24 >> 22)) << 13);
          v26 = (9 * (v25 ^ (v25 >> 8))) ^ ((9 * (v25 ^ (v25 >> 8))) >> 15);
          v27 = v23 & (((v26 + ~(v26 << 27)) >> 31) ^ (v26 + ~((_DWORD)v26 << 27)));
          v28 = 1;
          do
          {
            v29 = v27;
            v30 = *(_QWORD *)(v22 + 32 * v27);
            v27 = (v27 + v28++) & v23;
          }
          while (v30);
          v31 = v29;
          v32 = (WTF **)(v22 + 32 * v29);
          v33 = v32[2];
          v32[2] = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 1)
            {
              v46 = v13;
              WTF::fastFree(v33, v8);
              v13 = v46;
              v15 = a3;
              v11 = a1;
            }
            else
            {
              --*(_DWORD *)v33;
            }
          }
          v34 = v32[1];
          v32[1] = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 1)
            {
              v47 = v13;
              WTF::fastFree(v34, v8);
              v13 = v47;
              v15 = a3;
              v11 = a1;
            }
            else
            {
              --*(_DWORD *)v34;
            }
          }
          v35 = *v32;
          *v32 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 1)
            {
              v51 = v13;
              WTF::fastFree(v35, v8);
              v13 = v51;
              v15 = a3;
              v11 = a1;
            }
            else
            {
              --*(_DWORD *)v35;
            }
          }
          v36 = *v16;
          *v16 = 0;
          *v32 = v36;
          v37 = v4 + 32 * v12;
          v39 = *(WTF **)(v37 + 8);
          v38 = v37 + 8;
          *(_QWORD *)v38 = 0;
          v32[1] = v39;
          v40 = *(WTF **)(v38 + 8);
          *(_QWORD *)(v38 + 8) = 0;
          v32[2] = v40;
          *(_BYTE *)(v22 + 32 * v31 + 24) = *(_BYTE *)(v38 + 16);
          v41 = *(WTF **)(v38 + 8);
          *(_QWORD *)(v38 + 8) = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 1)
            {
              v48 = v13;
              WTF::fastFree(v41, v8);
              v13 = v48;
              v15 = a3;
              v11 = a1;
            }
            else
            {
              --*(_DWORD *)v41;
            }
          }
          v42 = *(WTF **)v38;
          *(_QWORD *)v38 = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 1)
            {
              v49 = v13;
              WTF::fastFree(v42, v8);
              v13 = v49;
              v15 = a3;
              v11 = a1;
            }
            else
            {
              --*(_DWORD *)v42;
            }
          }
          v43 = *v16;
          *v16 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 1)
            {
              v52 = v13;
              WTF::fastFree(v43, v8);
              v13 = v52;
              v15 = a3;
              v11 = a1;
            }
            else
            {
              --*(_DWORD *)v43;
            }
          }
          if (v16 == v15)
            v13 = v32;
        }
        else
        {
          v18 = v4 + 32 * v12;
          v19 = *(WTF **)(v18 + 16);
          *(_QWORD *)(v18 + 16) = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 1)
            {
              v44 = v13;
              WTF::fastFree(v19, v8);
              v13 = v44;
              v15 = a3;
              v11 = a1;
            }
            else
            {
              --*(_DWORD *)v19;
            }
          }
          v20 = *(WTF **)(v18 + 8);
          *(_QWORD *)(v18 + 8) = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 1)
            {
              v45 = v13;
              WTF::fastFree(v20, v8);
              v13 = v45;
              v15 = a3;
              v11 = a1;
            }
            else
            {
              --*(_DWORD *)v20;
            }
          }
          v21 = *v16;
          *v16 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 1)
            {
              v50 = v13;
              WTF::fastFree(v21, v8);
              v13 = v50;
              v15 = a3;
              v11 = a1;
            }
            else
            {
              --*(_DWORD *)v21;
            }
          }
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else if (!v4)
  {
    return;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
}

unsigned int *WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::fill(unsigned int *result, _DWORD *a2, unint64_t a3)
{
  unsigned int *v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _DWORD *v13;
  unint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;

  v5 = result;
  v6 = result[3];
  if (v6 <= a3)
  {
    v8 = result[2];
    if (v8 < a3)
    {
      if ((_DWORD)v8)
      {
        if ((_DWORD)v6)
          result[3] = 0;
        result = *(unsigned int **)result;
        if (*(_QWORD *)v5)
        {
          *(_QWORD *)v5 = 0;
          v5[2] = 0;
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
          LODWORD(v8) = v5[2];
        }
      }
      if (v8 < a3)
      {
        if (a3 >> 30)
        {
          __break(0xC471u);
          return result;
        }
        v9 = *(_DWORD **)v5;
        v10 = v5[3];
        v11 = (void *)WTF::fastMalloc((WTF *)(4 * a3));
        v5[2] = a3;
        *(_QWORD *)v5 = v11;
        result = (unsigned int *)memcpy(v11, v9, 4 * v10);
        if (v9)
        {
          if (*(_DWORD **)v5 == v9)
          {
            *(_QWORD *)v5 = 0;
            v5[2] = 0;
          }
          result = (unsigned int *)WTF::fastFree((WTF *)v9, v12);
        }
      }
    }
    v7 = v5[3];
  }
  else
  {
    result[3] = a3;
    v7 = a3;
  }
  v13 = *(_DWORD **)v5;
  if (v7)
  {
    v14 = v7 + 1;
    v15 = *(_DWORD **)v5;
    do
    {
      *v15++ = *a2;
      --v14;
    }
    while (v14 > 1);
    v16 = v5[3];
  }
  else
  {
    v16 = 0;
  }
  if (v16 != a3)
  {
    v17 = &v13[v16];
    v18 = 4 * a3 - 4 * v16;
    do
    {
      *v17++ = *a2;
      v18 -= 4;
    }
    while (v18);
  }
  v5[3] = a3;
  return result;
}

void *WTF::Vector<BOOL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::fill(uint64_t a1, _BYTE *a2, WTF *this)
{
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  WTF *v9;
  size_t v10;
  void *v11;
  void *v12;
  WTF *v13;
  uint64_t v14;
  unint64_t v15;
  WTF *v16;
  void *result;
  WTF *v18;

  v6 = *(unsigned int *)(a1 + 12);
  if (v6 <= (unint64_t)this)
  {
    v8 = *(unsigned int *)(a1 + 8);
    if (v8 < (unint64_t)this)
    {
      if ((_DWORD)v8)
      {
        if ((_DWORD)v6)
          *(_DWORD *)(a1 + 12) = 0;
        v18 = *(WTF **)a1;
        if (*(_QWORD *)a1)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
          WTF::fastFree(v18, a2);
          LODWORD(v8) = *(_DWORD *)(a1 + 8);
        }
      }
      if (v8 < (unint64_t)this)
      {
        v9 = *(WTF **)a1;
        v10 = *(unsigned int *)(a1 + 12);
        v11 = (void *)WTF::fastMalloc(this);
        *(_DWORD *)(a1 + 8) = (_DWORD)this;
        *(_QWORD *)a1 = v11;
        memcpy(v11, v9, v10);
        if (v9)
        {
          if (*(WTF **)a1 == v9)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v9, v12);
        }
      }
    }
    v7 = *(_DWORD *)(a1 + 12);
  }
  else
  {
    v7 = this;
  }
  v13 = *(WTF **)a1;
  v14 = v7;
  if (v7)
  {
    v15 = v7 + 1;
    v16 = *(WTF **)a1;
    do
    {
      *(_BYTE *)v16 = *a2;
      v16 = (WTF *)((char *)v16 + 1);
      --v15;
    }
    while (v15 > 1);
  }
  result = memset((char *)v13 + v14, *a2, (size_t)this - v14);
  *(_DWORD *)(a1 + 12) = (_DWORD)this;
  return result;
}

uint64_t WTF::Vector<WebCore::RenderGeometryMapStep,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 32 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 32 * ((uint64_t)(v3 - (_QWORD)v5) >> 5);
      if (v10 < 0x21)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 32;
        goto LABEL_30;
      }
      if (!(v10 >> 27))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(32 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 32 * v6);
        if ((void *)(a1 + 16) != v5 && v5)
        {
          if (*(void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v19);
        }
        return *(_QWORD *)a1 + 32 * ((uint64_t)(v3 - (_QWORD)v5) >> 5);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x1963D6C9CLL);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0x21)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 32;
    }
    else
    {
      if (v15 >> 27)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(32 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 32 * v16);
    if ((void *)(a1 + 16) != v5 && v5)
    {
      if (*(void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return v3;
}

_QWORD *WTF::Vector<WebCore::RenderBox *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RenderBox *&>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

_QWORD *WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,unsigned int>(_QWORD *result, uint64_t *a2, int *a3, _DWORD *a4)
{
  _QWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (_DWORD *)(v8 + 8 * v14);
  v16 = *v15;
  if (*v15 != -1)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v21 = 0;
        else
          v21 = *(unsigned int *)(v8 - 4);
        *v7 = v15;
        v7[1] = v8 + 8 * v21;
        *((_BYTE *)v7 + 16) = 0;
        v15[1] = *a4;
        return result;
      }
      if (v16 == -2)
        v17 = v15;
      v14 = (v14 + v18) & v10;
      v15 = (_DWORD *)(v8 + 8 * v14);
      v16 = *v15;
      ++v18;
    }
    while (*v15 != -1);
    if (v17)
    {
      *v17 = 0xFFFFFFFFLL;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v15 = v17;
    }
  }
  *v15 = v11;
  v15[1] = *a4;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
      goto LABEL_28;
  }
  else if (3 * v25 <= 4 * v24)
  {
    if (!(_DWORD)v25)
    {
      v26 = 8;
      goto LABEL_29;
    }
LABEL_28:
    v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
LABEL_29:
    result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a2, v26, v15);
    v15 = result;
    v22 = *a2;
    if (*a2)
      v25 = *(unsigned int *)(v22 - 4);
    else
      v25 = 0;
  }
  *v7 = v15;
  v7[1] = v22 + 8 * v25;
  *((_BYTE *)v7 + 16) = 1;
  return result;
}

void WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::optional<unsigned long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::optional<unsigned long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1, v3);
}

void WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::optional<unsigned long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 24 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = v5;
    v12 = (uint64_t *)v4;
    do
    {
      if (*v12 != -1)
      {
        if (*v12)
          WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::optional<unsigned long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::reinsert(*a1, v12);
        WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>::~WeakRef((WTF **)v12, v8);
      }
      v12 += 3;
      --v11;
    }
    while (v11);
    goto LABEL_15;
  }
  if (v4)
LABEL_15:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

_QWORD *WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::optional<unsigned long>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::optional<unsigned long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::reinsert(uint64_t a1, uint64_t *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = ~(*(_QWORD *)(*a2 + 8) << 32) + *(_QWORD *)(*a2 + 8);
  v4 = (v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13);
  v5 = (9 * (v4 ^ (v4 >> 8))) ^ ((9 * (v4 ^ (v4 >> 8))) >> 15);
  v6 = v2 & (((v5 + ~(v5 << 27)) >> 31) ^ (v5 + ~((_DWORD)v5 << 27)));
  v7 = 1;
  do
  {
    v8 = v6;
    v9 = (_QWORD *)(a1 + 24 * v6);
    v6 = (v6 + v7++) & v2;
  }
  while (*v9);
  *v9 = 0;
  v10 = *a2;
  *a2 = 0;
  *v9 = v10;
  *(_OWORD *)(a1 + 24 * v8 + 8) = *(_OWORD *)(a2 + 1);
  return v9;
}

uint64_t WTF::Vector<WebCore::RenderMultiColumnSpannerPlaceholder *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RenderMultiColumnSpannerPlaceholder *>(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;

  v3 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *(_QWORD *)v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

void WebCore::RenderIFrame::~RenderIFrame(WebCore::RenderIFrame *this, void *a2)
{
  _DWORD *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E3439928;
  *((_QWORD *)this + 27) = &unk_1E3439FE8;
  v3 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  _DWORD *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E3439928;
  *((_QWORD *)this + 27) = &unk_1E3439FE8;
  v3 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  *(_QWORD *)this = off_1E34201A0;
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v5);
  }
}

void `non-virtual thunk to'WebCore::RenderIFrame::~RenderIFrame(WebCore::RenderIFrame *this, void *a2)
{
  WebCore::RenderLayerModelObject *v3;
  _DWORD *v4;
  WTF *v5;

  *((_QWORD *)this - 27) = off_1E3439928;
  v3 = (WebCore::RenderIFrame *)((char *)this - 216);
  *(_QWORD *)this = &unk_1E3439FE8;
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  *((_QWORD *)this - 27) = off_1E34201A0;
  v5 = (WTF *)*((_QWORD *)this - 3);
  *((_QWORD *)this - 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
  *(_QWORD *)v3 = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(v3, a2);
}

{
  WebCore::RenderLayerModelObject *v3;
  _DWORD *v4;
  WTF *v5;
  void *v6;

  *((_QWORD *)this - 27) = off_1E3439928;
  v3 = (WebCore::RenderIFrame *)((char *)this - 216);
  *(_QWORD *)this = &unk_1E3439FE8;
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  *((_QWORD *)this - 27) = off_1E34201A0;
  v5 = (WTF *)*((_QWORD *)this - 3);
  *((_QWORD *)this - 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
  *((_QWORD *)this - 27) = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(v3, a2);
  if (*((_DWORD *)this - 50))
  {
    *((_OWORD *)v3 + 14) = 0u;
    *((_OWORD *)v3 + 15) = 0u;
    *((_OWORD *)v3 + 12) = 0u;
    *((_OWORD *)v3 + 13) = 0u;
    *((_OWORD *)v3 + 10) = 0u;
    *((_OWORD *)v3 + 11) = 0u;
    *((_OWORD *)v3 + 8) = 0u;
    *((_OWORD *)v3 + 9) = 0u;
    *((_OWORD *)v3 + 6) = 0u;
    *((_OWORD *)v3 + 7) = 0u;
    *((_OWORD *)v3 + 4) = 0u;
    *((_OWORD *)v3 + 5) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    *((_OWORD *)v3 + 3) = 0u;
    *(_OWORD *)v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(v3, v6);
  }
}

uint64_t WebCore::RenderImage::operator new(uint64_t this)
{
  if (this == 240)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::RenderImage::collectSelectionGeometries(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WebCore::RenderObject *v5;
  WebCore::RenderObject *v6;
  WebCore::LayoutIntegration::LineLayout *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  unsigned int v20;
  unsigned int v21;
  int *v22;
  float v23;
  BOOL v24;
  int *v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  double v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  double v45;
  unsigned int v46;
  unsigned int v47;
  int *v48;
  int v49;
  BOOL v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  uint64_t result;
  char v65;
  float v66;
  float v67;
  float v68;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  uint64_t v85;
  unint64_t v86;
  float v87;
  float v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  int v97;
  int v98;
  char v99;
  float v100;
  float v101;
  float v102;
  uint64_t v103;
  float v104;
  float v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int *v124;
  int *v125;
  unsigned int v126;
  int v127;
  int v128;
  int v129;
  char v130;
  unsigned int v131;
  float v132[2];
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  __int128 v139;
  __int128 v140;
  char v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  int v147;
  _QWORD v148[2];
  uint64_t v149;

  v5 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)a1);
  v7 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing((WebCore::LayoutIntegration::LineLayout *)a1, v6);
  if (v7)
  {
    WebCore::LayoutIntegration::LineLayout::boxFor(v7, (const WebCore::RenderElement *)a1, (uint64_t)v148);
  }
  else
  {
    v148[1] = 0;
    v149 = 1;
    v148[0] = 0;
  }
  if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v148))
  {
    v2 = (uint64_t)off_1E3428F28;
    v8 = (*(_DWORD *)(a1 + 160) / 64);
    v9 = (*(_DWORD *)(a1 + 164) / 64);
    v10 = v8 | ((unint64_t)v9 << 32);
    if ((*((_BYTE *)v5 + 21) & 0x10) != 0)
    {
      v14 = 0;
      v12 = 0;
      v13 = 0;
      v11 = *((_DWORD *)v5 + 39) / 64;
      v15 = v8 | ((unint64_t)(*((_DWORD *)v5 + 41) / 64) << 32);
    }
    else
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = *((_DWORD *)v5 + 38) / 64;
      v15 = (v9 << 32) | (*((_DWORD *)v5 + 40) / 64);
    }
    v130 = 1;
    v131 = 1;
  }
  else
  {
    if ((_DWORD)v149 == -1)
      goto LABEL_168;
    *(_QWORD *)&v139 = v132;
    ((void (*)(__int128 *__return_ptr, __int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v149])(&v142, &v139, v148);
    WebCore::LineSelection::logicalRect((unsigned int *)&v142);
    v17 = v16;
    v19 = v18;
    if ((_DWORD)v143 != -1)
      ((void (*)(__int128 *, __int128 *))off_1E3428F18[v143])(&v139, &v142);
    v20 = (unsigned __int16)*((_DWORD *)v5 + 31) >> 13;
    if (v20 <= 5 && ((1 << v20) & 0x2A) != 0)
    {
      v21 = ((*(_DWORD *)(a1 + 124) >> 13) & 6) - 2;
      v124 = (unsigned int *)(a1 + 152);
      v125 = (int *)(a1 + 160);
      if (v21 >= 4)
      {
        v124 = (unsigned int *)(a1 + 156);
        v125 = (int *)(a1 + 164);
      }
      v126 = *v124;
      v127 = *v125;
      v50 = __OFADD__(v126, v127);
      v128 = v126 + v127;
      v129 = (v126 >> 31) + 0x7FFFFFFF;
      if (!v50)
        v129 = v128;
      v23 = v17 + v19;
      v17 = (float)v129 * 0.015625;
    }
    else
    {
      v21 = ((*(_DWORD *)(a1 + 124) >> 13) & 6) - 2;
      v22 = (int *)(a1 + 152);
      if (v21 >= 4)
        v22 = (int *)(a1 + 156);
      v23 = (float)*v22 * 0.015625;
    }
    v24 = v21 >= 4;
    v25 = (int *)(a1 + 164);
    if (v24)
      v25 = (int *)(a1 + 160);
    v26 = *v25;
    if (v26 >= 0)
      v27 = v26;
    else
      v27 = v26 + 63;
    WebCore::InlineIterator::Box::previousOnLine((WebCore::InlineIterator::Box *)v148, (uint64_t)&v142);
    v28 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v142);
    if ((_DWORD)v143 != -1)
      ((void (*)(__int128 *, __int128 *))off_1E3428F28[v143])(&v139, &v142);
    LOBYTE(v142) = 0;
    v2 = 0xFFFFFFFFLL;
    LODWORD(v143) = -1;
    v29 = v149;
    if ((_DWORD)v149 == -1)
      goto LABEL_168;
    ((void (*)(__int128 *, __int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v149])(&v139, &v142, v148);
    LODWORD(v143) = v29;
    *(_QWORD *)&v139 = v132;
    ((void (*)(__int128 *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v29])(&v139, &v142);
    LOBYTE(v139) = 0;
    LODWORD(v140) = -1;
    v30 = v143;
    if ((_DWORD)v143 != -1)
    {
      ((void (*)(float *, __int128 *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v143])(v132, &v139, &v142);
      LODWORD(v140) = v30;
      if ((_DWORD)v143 != -1)
        ((void (*)(float *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v143])(v132, &v142);
    }
    v2 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v139);
    if ((_DWORD)v140 != -1)
      ((void (*)(__int128 *, __int128 *))off_1E3428F28[v140])(&v142, &v139);
    WebCore::LogicalSelectionOffsetCaches::LogicalSelectionOffsetCaches((WebCore::LogicalSelectionOffsetCaches *)&v142, v5);
    if ((_DWORD)v149 == -1)
      goto LABEL_168;
    v131 = v28;
    *(_QWORD *)&v139 = v132;
    ((void (*)(__int128 *, _QWORD *))off_1E3428F38[v149])(&v139, v148);
    if ((_DWORD)v149 == -1)
      goto LABEL_168;
    v33 = v31;
    v34 = v32;
    *(_QWORD *)&v139 = v132;
    v35 = ((unsigned int (*)(__int128 *, _QWORD *))off_1E3428F48[v149])(&v139, v148)
        ? v34
        : v33;
    v36 = v35 * 64.0;
    if (v36 >= 2147483650.0)
      v37 = 0x7FFFFFFF;
    else
      v37 = v36 <= -2147483650.0 ? 0x80000000 : (int)v36;
    v38 = WebCore::RenderBlock::logicalLeftSelectionOffset((uint64_t *)v5, (uint64_t)v5, v37, (uint64_t *)&v142);
    if ((_DWORD)v149 == -1)
      goto LABEL_168;
    v39 = v38;
    *(_QWORD *)&v139 = v132;
    ((void (*)(__int128 *, _QWORD *))off_1E3428F38[v149])(&v139, v148);
    if ((_DWORD)v149 == -1)
      goto LABEL_168;
    v42 = v40;
    v43 = v41;
    *(_QWORD *)&v139 = v132;
    if (((unsigned int (*)(__int128 *, _QWORD *))off_1E3428F48[v149])(&v139, v148))
      v44 = v43;
    else
      v44 = v42;
    v45 = v44 * 64.0;
    if (v45 >= 2147483650.0)
    {
      v46 = 0x7FFFFFFF;
    }
    else if (v45 <= -2147483650.0)
    {
      v46 = 0x80000000;
    }
    else
    {
      v46 = (int)v45;
    }
    v47 = WebCore::RenderBlock::logicalRightSelectionOffset(v5, v5, v46, (uint64_t)&v142);
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v48 = (int *)(a1 + 156);
    else
      v48 = (int *)(a1 + 152);
    v49 = *v48;
    v50 = __OFSUB__(v39, v49);
    v51 = v39 - v49;
    if (v50)
      v51 = (v39 >> 31) + 0x7FFFFFFF;
    v52 = v51 + (v51 < 0 ? 0x3F : 0);
    v53 = v47 - v39;
    v130 = v2;
    if (__OFSUB__(v47, v39))
      v53 = (v47 >> 31) + 0x7FFFFFFF;
    v54 = v53 + 63;
    if (v53 >= 0)
      v54 = v53;
    if ((_DWORD)v149 == -1)
    {
LABEL_168:
      result = std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_169;
    }
    v2 = (uint64_t)off_1E3428F28;
    v55 = (int)v19;
    v56 = (v27 >> 6);
    v13 = (int)(float)(v17 - v23);
    v14 = v52 >> 6;
    v57 = (v54 >> 6);
    *(_QWORD *)&v139 = v132;
    if ((((uint64_t (*)(__int128 *, _QWORD *))off_1E3428F48[v149])(&v139, v148) & 1) != 0)
    {
      v10 = v56 | ((unint64_t)v55 << 32);
      v15 = (v55 << 32) | v57;
      v11 = (int)(float)(v17 - v23);
      v12 = v11;
      v13 = 0;
    }
    else
    {
      v12 = 0;
      v11 = v14;
      v14 = (int)(float)(v17 - v23);
      v10 = v55 | (v56 << 32);
      v15 = v55 | (v57 << 32);
    }
  }
  v141 = 0;
  *(float *)&v142 = (float)v13;
  *((float *)&v142 + 1) = (float)v12;
  *((float *)&v142 + 2) = (float)(int)v10 + (float)v13;
  *((float *)&v142 + 3) = (float)v12;
  *(float *)&v143 = *((float *)&v142 + 2);
  *((float *)&v143 + 1) = (float)v12 + (float)SHIDWORD(v10);
  *((float *)&v143 + 2) = (float)v13;
  *((float *)&v143 + 3) = *((float *)&v143 + 1);
  WebCore::RenderObject::localToContainerQuad(a1, (float *)&v142, 0, 2u, &v139);
  v132[0] = (float)v14;
  v132[1] = (float)v11;
  v133 = (float)(int)v15 + (float)v14;
  v134 = (float)v11;
  v135 = v133;
  v136 = (float)v11 + (float)SHIDWORD(v15);
  v137 = (float)v14;
  v138 = v136;
  WebCore::RenderObject::localToContainerQuad(a1, v132, 0, 2u, &v142);
  v58 = *(float *)&v142;
  v59 = *(float *)&v143;
  if (*((float *)&v143 + 2) >= *(float *)&v143)
    v60 = *(float *)&v143;
  else
    v60 = *((float *)&v143 + 2);
  if (*((float *)&v142 + 2) >= *(float *)&v142)
    v61 = *(float *)&v142;
  else
    v61 = *((float *)&v142 + 2);
  if (v60 >= v61)
    v60 = v61;
  v62 = fabsf(v60);
  if (v62 == INFINITY || v62 > 2147500000.0)
    v60 = (float)((SLODWORD(v60) >> 31) ^ 0x7FFFFFFF);
  v65 = v130;
  result = v131;
  if (*((float *)&v143 + 3) >= *((float *)&v143 + 1))
    v66 = *((float *)&v143 + 1);
  else
    v66 = *((float *)&v143 + 3);
  if (*((float *)&v142 + 3) >= *((float *)&v142 + 1))
    v67 = *((float *)&v142 + 1);
  else
    v67 = *((float *)&v142 + 3);
  if (v66 >= v67)
    v66 = v67;
  v68 = fabsf(v66);
  if (v68 == INFINITY || v68 > 2147500000.0)
    v66 = (float)((SLODWORD(v66) >> 31) ^ 0x7FFFFFFF);
  if (*(float *)&v142 < *((float *)&v142 + 2))
    v58 = *((float *)&v142 + 2);
  if (*(float *)&v143 < *((float *)&v143 + 2))
    v59 = *((float *)&v143 + 2);
  if (v58 >= v59)
    v59 = v58;
  v70 = fabsf(v59);
  if (v70 == INFINITY || v70 > 2147500000.0)
    v59 = (float)((SLODWORD(v59) >> 31) ^ 0x7FFFFFFF);
  if (*((float *)&v142 + 1) >= *((float *)&v142 + 3))
    v71 = *((float *)&v142 + 1);
  else
    v71 = *((float *)&v142 + 3);
  if (*((float *)&v143 + 1) >= *((float *)&v143 + 3))
    v72 = *((float *)&v143 + 1);
  else
    v72 = *((float *)&v143 + 3);
  if (v71 >= v72)
    v72 = v71;
  v73 = fabsf(v72);
  if (v73 == INFINITY || v73 > 2147500000.0)
    v72 = (float)((SLODWORD(v72) >> 31) ^ 0x7FFFFFFF);
  v74 = floorf(v60);
  v75 = 2147500000.0;
  if (v74 < 2147500000.0)
  {
    v75 = -2147500000.0;
    if (v74 > -2147500000.0)
      v75 = (float)(int)v74;
  }
  v76 = v59 - v60;
  v77 = v72 - v66;
  v78 = floorf(v66);
  v79 = 2147500000.0;
  if (v78 < 2147500000.0)
  {
    v79 = -2147500000.0;
    if (v78 > -2147500000.0)
      v79 = (float)(int)v78;
  }
  v80 = v66 + v77;
  v81 = ceilf(v60 + v76);
  v82 = 2147500000.0;
  if (v81 < 2147500000.0)
  {
    v82 = -2147500000.0;
    if (v81 > -2147500000.0)
      v82 = (float)(int)v81;
  }
  v83 = ceilf(v80);
  v84 = 2147500000.0;
  if (v83 < 2147500000.0)
  {
    v84 = -2147500000.0;
    if (v83 > -2147500000.0)
      v84 = (float)(int)v83;
  }
  if (v75 >= 2147500000.0)
  {
    v85 = 0x7FFFFFFFLL;
  }
  else if (v75 <= -2147500000.0)
  {
    v85 = 0x80000000;
  }
  else
  {
    v85 = (int)v75;
  }
  if (v79 >= 2147500000.0)
  {
    v86 = 0x7FFFFFFF00000000;
  }
  else if (v79 <= -2147500000.0)
  {
    v86 = 0x8000000000000000;
  }
  else
  {
    v86 = (unint64_t)(int)v79 << 32;
  }
  v87 = v82 - v75;
  v88 = v84 - v79;
  if (v87 >= 2147500000.0)
  {
    v89 = 0x7FFFFFFFLL;
  }
  else if (v87 <= -2147500000.0)
  {
    v89 = 0x80000000;
  }
  else
  {
    v89 = (int)v87;
  }
  if (v88 >= 2147500000.0)
  {
    v90 = 0x7FFFFFFF00000000;
  }
  else if (v88 <= -2147500000.0)
  {
    v90 = 0x8000000000000000;
  }
  else
  {
    v90 = (unint64_t)(int)v88 << 32;
  }
  v91 = v86 | v85;
  v92 = v90 | v89;
  v93 = __ROR8__(v91, 32);
  v94 = __ROR8__(v92, 32);
  if ((*((_DWORD *)v5 + 5) & 0x1000) != 0)
  {
    v91 = v93;
    v95 = v94;
  }
  else
  {
    v95 = v92;
  }
  v96 = *((_DWORD *)v5 + 30);
  v97 = (unsigned __int16)*((_DWORD *)v5 + 31) >> 13;
  v98 = v97 - 1;
LABEL_169:
  v99 = 2;
  switch(v98)
  {
    case 0:
    case 1:
      goto LABEL_131;
    case 2:
    case 4:
      LOBYTE(v97) = 3;
      goto LABEL_131;
    case 3:
      goto LABEL_132;
    default:
      LOBYTE(v97) = 0;
LABEL_131:
      v99 = v97;
LABEL_132:
      v100 = *(float *)&v139;
      v101 = *(float *)&v140;
      if (*((float *)&v140 + 2) < *(float *)&v140)
        v101 = *((float *)&v140 + 2);
      if (*((float *)&v139 + 2) < *(float *)&v139)
        v100 = *((float *)&v139 + 2);
      if (v101 < v100)
        v100 = v101;
      v102 = fabsf(v100);
      if (v102 == INFINITY || v102 > 2147500000.0)
        v100 = (float)((SLODWORD(v100) >> 31) ^ 0x7FFFFFFF);
      v103 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944);
      v104 = floorf(v100);
      v105 = 2147500000.0;
      if (v104 < 2147500000.0)
      {
        v105 = -2147500000.0;
        if (v104 > -2147500000.0)
          v105 = (float)(int)v104;
      }
      if (v105 >= 2147500000.0)
      {
        v106 = 0x7FFFFFFF;
      }
      else if (v105 <= -2147500000.0)
      {
        v106 = 0x80000000;
      }
      else
      {
        v106 = (int)v105;
      }
      v107 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v103 + 24) + 8) + 40)
                                                           + 8)
                                               + 528)
                                   + 8)
                       + 24);
      if (v107)
        v108 = *(_QWORD *)(v107 + 8);
      else
        v108 = 0;
      v109 = v99 & 6;
      if (*(_BYTE *)(v108 + 468))
      {
        v110 = *(_QWORD *)(v103 + 224);
        if (v110)
        {
          v110 = *(_QWORD *)(v110 + 24);
          if (v110)
          {
            v110 = *(_QWORD *)(v110 + 8);
            if (v110)
            {
              if (*(_BYTE *)(v110 + 367))
              {
                LODWORD(v110) = 0;
              }
              else
              {
                v122 = *(_DWORD *)(v108 + 476) + *(_DWORD *)(v108 + 472);
                if (*(_BYTE *)(v110 + 368))
                  v123 = v106;
                else
                  v123 = v122 - v106;
                LODWORD(v110) = v123 / v122;
              }
            }
            v65 = v130;
            result = v131;
          }
        }
      }
      else
      {
        LODWORD(v110) = 0;
      }
      v142 = v139;
      v143 = v140;
      LOBYTE(v144) = 0;
      BYTE1(v144) = (v96 & 0x4000000) != 0;
      DWORD1(v144) = v91;
      DWORD2(v144) = v95 + v91;
      HIDWORD(v144) = HIDWORD(v95) + HIDWORD(v91);
      LODWORD(v145) = 0;
      BYTE4(v145) = 0;
      BYTE5(v145) = result;
      BYTE6(v145) = v65;
      *(_WORD *)((char *)&v145 + 7) = 0;
      BYTE9(v145) = v109 != 2;
      BYTE10(v145) = v141;
      HIDWORD(v145) = v110;
      LOBYTE(v146) = 0;
      LOBYTE(v147) = 0;
      v111 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v111 == *(_DWORD *)(a2 + 8))
      {
        result = (uint64_t)WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v111 + 1, (unint64_t)&v142);
        v112 = *(_QWORD *)a2 + 84 * *(unsigned int *)(a2 + 12);
        v114 = *(_OWORD *)(result + 48);
        v113 = *(_OWORD *)(result + 64);
        v115 = *(_OWORD *)(result + 32);
        *(_DWORD *)(v112 + 80) = *(_DWORD *)(result + 80);
        *(_OWORD *)(v112 + 48) = v114;
        *(_OWORD *)(v112 + 64) = v113;
        *(_OWORD *)(v112 + 32) = v115;
        v116 = *(_OWORD *)(result + 16);
        *(_OWORD *)v112 = *(_OWORD *)result;
        *(_OWORD *)(v112 + 16) = v116;
      }
      else
      {
        v117 = *(_QWORD *)a2 + 84 * v111;
        v118 = v143;
        *(_OWORD *)v117 = v142;
        *(_OWORD *)(v117 + 16) = v118;
        v119 = v144;
        v120 = v145;
        v121 = v146;
        *(_DWORD *)(v117 + 80) = v147;
        *(_OWORD *)(v117 + 48) = v120;
        *(_OWORD *)(v117 + 64) = v121;
        *(_OWORD *)(v117 + 32) = v119;
      }
      ++*(_DWORD *)(a2 + 12);
      if ((_DWORD)v149 != -1)
        return (*(uint64_t (**)(__int128 *, _QWORD *))(v2 + 8 * v149))(&v142, v148);
      return result;
  }
}

float32_t WebCore::FloatQuad::FloatQuad(float32x2_t *this, float32x2_t *a2)
{
  float v2;
  float32x2_t v3;
  float32_t result;

  *this = *a2;
  v2 = a2->f32[0];
  this[1].i32[1] = a2->i32[1];
  v3 = a2[1];
  this[1].f32[0] = v2 + v3.f32[0];
  this[2] = vadd_f32(*a2, v3);
  result = a2->f32[0];
  v3.f32[0] = v3.f32[1] + a2->f32[1];
  this[3].i32[0] = a2->i32[0];
  this[3].f32[1] = v3.f32[0];
  return result;
}

unint64_t WebCore::FloatQuad::enclosingBoundingBox(WebCore::FloatQuad *this)
{
  float v1;
  float v2;
  float v3;
  float v5;
  float v6;
  float v7;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  unint64_t v16;

  if (*((float *)this + 6) >= *((float *)this + 4))
    v1 = *((float *)this + 4);
  else
    v1 = *((float *)this + 6);
  if (*((float *)this + 2) >= *(float *)this)
    v2 = *(float *)this;
  else
    v2 = *((float *)this + 2);
  if (v1 >= v2)
    v1 = v2;
  v3 = fabsf(v1);
  if (v3 == INFINITY || v3 > 2147500000.0)
    v1 = (float)((SLODWORD(v1) >> 31) ^ 0x7FFFFFFF);
  if (*((float *)this + 7) >= *((float *)this + 5))
    v5 = *((float *)this + 5);
  else
    v5 = *((float *)this + 7);
  if (*((float *)this + 3) >= *((float *)this + 1))
    v6 = *((float *)this + 1);
  else
    v6 = *((float *)this + 3);
  if (v5 >= v6)
    v5 = v6;
  v7 = fabsf(v5);
  if (v7 == INFINITY || v7 > 2147500000.0)
    v5 = (float)((SLODWORD(v5) >> 31) ^ 0x7FFFFFFF);
  v9 = floorf(v1);
  v10 = -2147500000.0;
  if (v9 > -2147500000.0)
    v10 = (float)(int)v9;
  if (v9 < 2147500000.0)
    v11 = v10;
  else
    v11 = 2147500000.0;
  v12 = floorf(v5);
  v13 = -2147500000.0;
  if (v12 > -2147500000.0)
    v13 = (float)(int)v12;
  if (v12 < 2147500000.0)
    v14 = v13;
  else
    v14 = 2147500000.0;
  if (v11 >= 2147500000.0)
  {
    v15 = 0x7FFFFFFFLL;
  }
  else if (v11 <= -2147500000.0)
  {
    v15 = 0x80000000;
  }
  else
  {
    v15 = (int)v11;
  }
  if (v14 >= 2147500000.0)
  {
    v16 = 0x7FFFFFFF00000000;
  }
  else if (v14 <= -2147500000.0)
  {
    v16 = 0x8000000000000000;
  }
  else
  {
    v16 = (unint64_t)(int)v14 << 32;
  }
  return v16 | v15;
}

uint64_t WebCore::RenderImage::RenderImage(uint64_t a1, char a2, uint64_t a3, _QWORD *a4, unint64_t a5, uint64_t a6, float a7)
{
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char hasElementWithId;
  uint64_t v16;
  int v17;
  _QWORD v18[2];

  v11 = WebCore::RenderLayerModelObject::RenderLayerModelObject(a1, a2, a3, a4, 12, (((a5 >> 1) & 0x1F) << 9) | 0x103);
  *(_OWORD *)(v11 + 184) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_QWORD *)(v11 + 208) = 0;
  *(_QWORD *)(v11 + 216) = 0;
  *(_QWORD *)(v11 + 200) = 0;
  *(_DWORD *)(v11 + 20) |= 2u;
  *(_QWORD *)v11 = off_1E34280E8;
  v12 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v12 + 8) = 0;
  if (a6)
  {
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(v12 + 24) = 0;
    *(_BYTE *)(v12 + 32) = 1;
    *(_QWORD *)v12 = off_1E3428808;
    ++*(_DWORD *)(a6 + 8);
    *(_QWORD *)(v12 + 40) = a6;
  }
  else
  {
    *(_QWORD *)v12 = off_1E34287A0;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(v12 + 24) = 0;
    *(_BYTE *)(v12 + 32) = 1;
  }
  *(_QWORD *)(a1 + 224) = v12;
  *(_WORD *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 234) = 0;
  if ((*(_BYTE *)(a3 + 28) & 0x10) != 0
    && (*(_QWORD *)(a3 + 72) & 0xFFFFFFFFFFFFLL) != 0
    && (v16 = *(_QWORD *)((*(_QWORD *)(a3 + 72) & 0xFFFFFFFFFFFFLL) + 0x58)) != 0)
  {
    v17 = *(_DWORD *)(v16 + 24);
    *(_DWORD *)(v16 + 24) = v17 + 2;
    if (*(_BYTE *)(v16 + 193))
    {
      hasElementWithId = 0;
      if (v17)
      {
LABEL_11:
        *(_DWORD *)(v16 + 24) = v17;
        goto LABEL_7;
      }
    }
    else
    {
      {
        v18[0] = "image-overlay";
        v18[1] = 14;
        WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::ImageOverlay::imageOverlayElementIdentifier(void)::identifier, (uint64_t)v18);
      }
      hasElementWithId = WebCore::TreeScope::hasElementWithId(v16 + 96, (uint64_t)&WebCore::ImageOverlay::imageOverlayElementIdentifier(void)::identifier);
      v17 = *(_DWORD *)(v16 + 24) - 2;
      if (*(_DWORD *)(v16 + 24) != 2)
        goto LABEL_11;
    }
    if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v16, v13);
  }
  else
  {
    hasElementWithId = 0;
  }
LABEL_7:
  *(_BYTE *)(a1 + 235) = hasElementWithId;
  *(float *)(a1 + 236) = a7;
  WebCore::RenderImage::updateAltText(a1);
  return a1;
}

uint64_t WebCore::RenderImage::RenderImage(uint64_t a1, char a2, uint64_t a3, _QWORD *a4, uint64_t a5, float a6)
{
  return WebCore::RenderImage::RenderImage(a1, a2, a3, a4, 1uLL, a5, a6);
}

void WebCore::RenderImage::~RenderImage(WebCore::RenderImage *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF *v5;

  *(_QWORD *)this = off_1E34280E8;
  v3 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = off_1E34201A0;
  v5 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = off_1E34280E8;
  v3 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = off_1E34201A0;
  v5 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v6);
  }
}

void WebCore::RenderImage::willBeDestroyed(WebCore::RenderImage *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 28) + 24))(*((_QWORD *)this + 28));
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3405))
  {
    v3 = *((_QWORD *)this + 4);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
        (*(void (**)(uint64_t, WebCore::RenderImage *))(*(_QWORD *)v4 + 672))(v4, this);
    }
  }
  WebCore::RenderBox::willBeDestroyed(this, v2);
}

unint64_t WebCore::RenderImage::imageSizeForError(WebCore::RenderImage *this, WebCore::CachedImage *a2)
{
  WTF *v3;
  float v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  int v11;
  unsigned int *v12;
  void *v13;
  float v14;
  float v15;
  unsigned int v16;
  unsigned int v17;
  WTF *v19;
  void *v20;
  float v21;
  float v22;
  uint64_t v23;
  float v24;

  if ((*(_WORD *)((char *)a2 + 557) >> 5) - 3 <= 1 && (*((_BYTE *)a2 + 720) & 0x10) != 0)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
    v7 = 1.0;
    if (v6)
    {
      v8 = *(_QWORD *)(v6 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 24);
        if (v9)
        {
          v10 = *(float **)(v9 + 8);
          if (v10)
          {
            v11 = (*(_DWORD *)v10)++;
            v7 = v10[91];
            if (v11)
            {
              *(_DWORD *)v10 = v11;
            }
            else
            {
              WebCore::Page::~Page((uint64_t)v10);
              WTF::fastFree(v19, v20);
            }
          }
        }
      }
    }
    WebCore::CachedImage::brokenImage(v7, (uint64_t)&v23);
    v12 = (unsigned int *)v23;
    v14 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(v23 + 8) + 168))(*(_QWORD *)(v23 + 8), 0);
    v4 = v14 * (float)(1.0 / v24);
    v5 = v15 * (float)(1.0 / v24);
    v23 = 0;
    do
    {
      v16 = __ldaxr(v12);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v12));
    if (!v17)
    {
      atomic_store(1u, v12);
      v21 = v4;
      v22 = v5;
      WTF::fastFree((WTF *)v12, v13);
      v5 = v22;
      v4 = v21;
    }
  }
  else
  {
    v3 = WebCore::CachedImage::imageForRenderer(a2, this);
    (*(void (**)(WTF *, _QWORD))(*(_QWORD *)v3 + 168))(v3, 0);
  }
  return (int)(float)((float)(v4 * *(float *)(*((_QWORD *)this + 13) + 184)) + 4.0) | ((unint64_t)(int)(float)((float)(v5 * *(float *)(*((_QWORD *)this + 13) + 184)) + 4.0) << 32);
}

uint64_t WebCore::RenderImage::setImageSizeForAltText(WebCore::RenderImage *this, WebCore::CachedImage *a2)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  WebCore::FontCascade *v10;
  void *v11;
  float v12;
  float v13;
  BOOL v14;
  float v15;
  int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  int v19;
  int v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  _BYTE v27[8];
  WTF::StringImpl *v28;

  if (a2 && WebCore::CachedImage::imageForRenderer(a2, this))
  {
    v4 = WebCore::RenderImage::imageSizeForError(this, a2);
    v5 = v4;
    v6 = HIDWORD(v4);
    v7 = *((_QWORD *)this + 27);
    if (!v7)
      goto LABEL_25;
  }
  else
  {
    v7 = *((_QWORD *)this + 27);
    if (v7)
      v8 = *(_DWORD *)(v7 + 4) == 0;
    else
      v8 = 1;
    if (a2 == 0 && v8)
      v5 = 0;
    else
      v5 = 4;
    LODWORD(v6) = v5;
    if (!v7)
      goto LABEL_25;
  }
  v9 = *(unsigned int *)(v7 + 4);
  if ((_DWORD)v9)
  {
    v10 = (WebCore::FontCascade *)(*((_QWORD *)this + 14) + 32);
    WebCore::RenderBlock::constructTextRun(v9 | ((unint64_t)((*(_DWORD *)(v7 + 16) >> 2) & 1) << 32), (uint64_t)this + 80, 4, 0, (uint64_t)v27);
    v12 = ceilf(WebCore::FontCascade::width((uint64_t)v10, (uint64_t)v27));
    v13 = v12 + 4.0;
    v14 = v12 <= 1024.0;
    v15 = 1028.0;
    if (v14)
      v15 = v13;
    v16 = (int)v15;
    v17 = WebCore::FontCascade::metricsOfPrimaryFont(v10, v11);
    v19 = *(_DWORD *)(v17 + 48) + *(_DWORD *)(v17 + 44);
    if (v19 >= 256)
      v19 = 256;
    v20 = v19 + 4;
    v21 = v28;
    v28 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v18);
      else
        *(_DWORD *)v21 -= 2;
    }
    if (v5 <= v16)
      v5 = v16;
    if ((int)v6 <= v20)
      LODWORD(v6) = v20;
  }
LABEL_25:
  v22 = v5 << 6;
  if (v5 < -33554432)
    v22 = 0x80000000;
  if (v5 <= 0x1FFFFFF)
    v23 = v22;
  else
    v23 = 0x7FFFFFFFLL;
  v24 = (_DWORD)v6 << 6;
  if ((int)v6 < -33554432)
    v24 = 0x80000000;
  if ((int)v6 <= 0x1FFFFFF)
    v25 = v24;
  else
    v25 = 0x7FFFFFFFLL;
  if (__PAIR64__(v25, v23) == WebCore::RenderReplaced::intrinsicSize((unint64_t)this))
    return 0;
  *((_QWORD *)this + 25) = v23 | (v25 << 32);
  return 1;
}

uint64_t WebCore::RenderImage::isMultiRepresentationHEIC(WebCore::RenderImage *this, void *a2)
{
  uint64_t v2;
  __int16 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  if ((*((_BYTE *)this + 45) & 1) != 0)
    return 0;
  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (!v2)
    return 0;
  v3 = *(_WORD *)(v2 + 28);
  if ((v3 & 8) != 0)
  {
    if ((v3 & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
    {
      v4 = *(_DWORD *)(v2 + 24);
      *(_DWORD *)(v2 + 24) = v4 + 2;
      v5 = *(_QWORD *)(v2 + 280);
      if (!v5 || (v6 = *(_QWORD *)(v5 + 8)) == 0)
      {
        v13 = 0;
        if (!v4)
          goto LABEL_25;
LABEL_20:
        *(_DWORD *)(v2 + 24) = v4;
        return v13;
      }
      v7 = *(_QWORD *)(v6 + 104);
      if (v7)
      {
        v8 = *(_DWORD *)(v7 + 4);
        if ((v8 & 1) != 0)
        {
          v9 = *(_QWORD *)(v7 + 40);
          LODWORD(v10) = *(_DWORD *)(v7 + 52);
          if ((_DWORD)v10)
          {
LABEL_11:
            v10 = v10;
            v11 = (_QWORD *)(v9 + 8);
            while (1)
            {
              v12 = *(v11 - 1);
              if (v12 == WebCore::HTMLNames::typeAttr
                || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
                && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
              {
                break;
              }
              v11 += 2;
              if (!--v10)
              {
                v11 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                break;
              }
            }
LABEL_24:
            v13 = MEMORY[0x19AEA53F4](*v11, "image/x-apple-adaptive-glyph", 28);
            v4 = *(_DWORD *)(v2 + 24) - 2;
            if (*(_DWORD *)(v2 + 24) == 2)
            {
LABEL_25:
              if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
              return v13;
            }
            goto LABEL_20;
          }
        }
        else
        {
          v9 = v7 + 32;
          LODWORD(v10) = v8 >> 5;
          if ((_DWORD)v10)
            goto LABEL_11;
        }
      }
      v11 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      goto LABEL_24;
    }
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RenderImage::baselinePosition(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  int v5;
  uint64_t v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  int v19;
  float v20;
  float v21;
  double v22;
  int v23;
  int v24;
  unsigned int v25;
  BOOL v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v38;
  unsigned int v39;
  int v40;
  int v41;

  v5 = (int)a2;
  if ((*(_BYTE *)(a1 + 45) & 1) != 0)
    goto LABEL_34;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if (!v7)
    goto LABEL_34;
  v8 = *(_WORD *)(v7 + 28);
  if ((v8 & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1963D8E28);
  }
  if ((v8 & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
    goto LABEL_34;
  v9 = *(_DWORD *)(v7 + 24) + 2;
  *(_DWORD *)(v7 + 24) = v9;
  v10 = *(_QWORD *)(v7 + 280);
  if (!v10 || (v11 = *(_QWORD *)(v10 + 8)) == 0)
  {
    v18 = 0;
    goto LABEL_22;
  }
  v12 = *(_QWORD *)(v11 + 104);
  if (v12)
  {
    v13 = *(_DWORD *)(v12 + 4);
    if ((v13 & 1) != 0)
    {
      v14 = *(_QWORD *)(v12 + 40);
      LODWORD(v15) = *(_DWORD *)(v12 + 52);
      if ((_DWORD)v15)
      {
LABEL_11:
        v15 = v15;
        v16 = (_QWORD *)(v14 + 8);
        while (1)
        {
          v17 = *(v16 - 1);
          if (v17 == WebCore::HTMLNames::typeAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
          {
            goto LABEL_21;
          }
          v16 += 2;
          if (!--v15)
          {
            v16 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_21;
          }
        }
      }
    }
    else
    {
      v14 = v12 + 32;
      LODWORD(v15) = v13 >> 5;
      if ((_DWORD)v15)
        goto LABEL_11;
    }
  }
  v16 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_21:
  v18 = MEMORY[0x19AEA53F4](*v16, "image/x-apple-adaptive-glyph", 28);
  v9 = *(_DWORD *)(v7 + 24);
LABEL_22:
  v19 = v9 - 2;
  if (v19)
  {
    *(_DWORD *)(v7 + 24) = v19;
    if ((v18 & 1) != 0)
      goto LABEL_24;
LABEL_34:
    v23 = 0;
    goto LABEL_35;
  }
  if ((*(_WORD *)(v7 + 30) & 0x400) != 0)
  {
    if (!v18)
      goto LABEL_34;
  }
  else
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    if ((v18 & 1) == 0)
      goto LABEL_34;
  }
LABEL_24:
  WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*(_QWORD *)(a1 + 112) + 32), a2);
  CTFontGetTypographicBoundsForEmojiImageProvider();
  if ((float)0.0 < 0.0)
    v20 = -0.0078125;
  else
    v20 = 0.0078125;
  v21 = (float)0.0 + v20;
  if (v21 >= 33554432.0)
    goto LABEL_62;
  if (v21 > -33554000.0)
  {
    v22 = v21 * 64.0;
    if (v22 < 2147483650.0)
    {
      if (v22 > -2147483650.0)
      {
        v23 = (int)v22;
        goto LABEL_35;
      }
      goto LABEL_63;
    }
LABEL_62:
    v23 = 0x7FFFFFFF;
    goto LABEL_35;
  }
LABEL_63:
  v23 = 0x80000000;
LABEL_35:
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
  {
    if (a4)
    {
      v24 = *(_DWORD *)(a1 + 160);
      v25 = *(_DWORD *)(a1 + 172);
      v26 = __OFADD__(v25, v24);
      v27 = v25 + v24;
      v28 = (v25 >> 31) + 0x7FFFFFFF;
      if (v26)
        v27 = v28;
      v29 = *(_DWORD *)(a1 + 180);
    }
    else
    {
      v38 = *(_DWORD *)(a1 + 164);
      v39 = *(_DWORD *)(a1 + 168);
      v26 = __OFADD__(v39, v38);
      v27 = v39 + v38;
      v40 = (v39 >> 31) + 0x7FFFFFFF;
      if (v26)
        v27 = v40;
      v29 = *(_DWORD *)(a1 + 176);
    }
    v26 = __OFADD__(v27, v29);
    v30 = v27 + v29;
    v31 = (v27 >> 31) + 0x7FFFFFFF;
    if (!v26)
      v31 = v30;
    v32 = ((int)(v31 - (v30 & 0xFFFFFFC0) + 32) >> 6) + v31 / 64;
    if (v5)
    {
      if (v32 >= 0)
        v41 = v32;
      else
        v41 = v32 + 1;
      v32 -= v41 >> 1;
    }
    v33 = v32 << 6;
    if (v32 < -33554432)
      v33 = 0x80000000;
    if (v32 <= 0x1FFFFFF)
      v34 = v33;
    else
      v34 = 0x7FFFFFFF;
  }
  else
  {
    v34 = 0;
  }
  v26 = __OFSUB__(v34, v23);
  v35 = v34 - v23;
  v36 = (v34 >> 31) + 0x7FFFFFFF;
  if (v26)
    return v36;
  else
    return v35;
}

BOOL WebCore::RenderElement::hasMask(WebCore::RenderElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t (*v4)();

  v1 = *((_QWORD *)this + 11);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 48);
  if (*(_QWORD *)(v2 + 8))
  {
    while (!*(_QWORD *)(v2 + 16))
    {
      v2 = *(_QWORD *)(v2 + 8);
      if (!v2)
        goto LABEL_6;
    }
    return 1;
  }
  if (*(_QWORD *)(v2 + 16))
    v3 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  else
    v3 = 0;
  if (v3)
    return 1;
LABEL_6:
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 216) + 8))
    v4 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  else
    v4 = 0;
  return v4 != 0;
}

uint64_t WebCore::RenderImage::notifyFinished(uint64_t result, WebCore::CachedResource *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  __int16 v9;
  WebCore::Document *v10;
  WTF::StringImpl *v11;
  void *v12;
  WTF *v13;
  void *v14;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8) + 40) + 8) + 3405))
  {
    v3 = result;
    v4 = *(_DWORD *)(result + 20);
    if ((v4 & 0x60000000) != 0)
    {
      v4 = v4 & 0x9FFFFFFF | 0x20000000;
      *(_DWORD *)(result + 20) = v4;
    }
    v5 = *(_QWORD *)(*(_QWORD *)(result + 224) + 24);
    if (v5)
    {
      v6 = v4 & 0x8000;
      if (*(WebCore::CachedResource **)(v5 + 8) == a2 && v6 != 0)
        WebCore::RenderLayer::contentChanged(*(_QWORD *)(result + 144), 0);
    }
    if ((*(_BYTE *)(v3 + 45) & 1) == 0)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
      if (v8)
      {
        v9 = *(_WORD *)(v8 + 28);
        if ((v9 & 8) == 0)
        {
          result = 105;
          __break(0xC471u);
          return result;
        }
        if ((v9 & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
        {
          *(_DWORD *)(v8 + 24) += 2;
          WebCore::Page::didFinishLoadingImageForElement(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 528)+ 8)+ 24)+ 8), (WebCore::HTMLImageElement *)v8);
          if (*(_DWORD *)(v8 + 24) == 2)
          {
            if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
          }
          else
          {
            *(_DWORD *)(v8 + 24) -= 2;
          }
        }
      }
    }
    v10 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + 40) + 8);
    v11 = (WTF::StringImpl *)*((_QWORD *)v10 + 90);
    if (!v11)
      v11 = (WTF::StringImpl *)WebCore::Document::ensureCachedResourceLoader(v10, a2);
    ++*(_DWORD *)v11;
    result = (uint64_t)WebCore::CachedResourceLoader::notifyFinished(v11, a2);
    if (*(_DWORD *)v11 == 1)
    {
      WebCore::CachedResourceLoader::~CachedResourceLoader(v11, v12);
      return WTF::fastFree(v13, v14);
    }
    else
    {
      --*(_DWORD *)v11;
    }
  }
  return result;
}

uint64_t WebCore::RenderImage::isShowingAltText(WebCore::RenderImage *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = (_QWORD *)*((_QWORD *)this + 28);
  v3 = v2[3];
  if (!v3 || !*(_QWORD *)(v3 + 8) || (result = (*(uint64_t (**)(_QWORD *))(*v2 + 40))(v2), (_DWORD)result))
  {
    v5 = *((_QWORD *)this + 27);
    return v5 && *(_DWORD *)(v5 + 4) != 0;
  }
  return result;
}

unint64_t WebCore::RenderImage::paintIncompleteImageOutline(WebCore::RenderBox *a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t result;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  WebCore::GraphicsContext *v14;
  void *v15;
  void *v16;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  WTF *v32;
  void *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  _QWORD v40[2];
  uint64_t v41;
  int v42;
  int v43;

  result = WebCore::RenderBox::contentSize(a1);
  v9 = result;
  if ((int)result >= 129 && SHIDWORD(result) >= 129)
  {
    v10 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 1016))(a1);
    v11 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 1000))(a1);
    v12 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 944))(a1);
    v13 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 928))(a1);
    v14 = *(WebCore::GraphicsContext **)(a2 + 80);
    if (*((_BYTE *)v14 + 193) != 1)
    {
      *((_BYTE *)v14 + 193) = 1;
      *((_DWORD *)v14 + 46) |= 0x10u;
    }
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v14 + 88))(v14, (uint64_t)v14 + 8);
    v41 = 0x11040000C0C0C0FFLL;
    WebCore::GraphicsContext::setStrokeColor(v14, (const WebCore::Color *)&v41);
    if ((v41 & 0x8000000000000) != 0)
    {
      v34 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFLL);
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        atomic_store(1u, v34);
        WTF::fastFree((WTF *)v34, v15);
      }
    }
    v41 = 0x1104000000000000;
    WebCore::GraphicsContext::setFillColor(v14, (const WebCore::Color *)&v41);
    if ((v41 & 0x8000000000000) != 0)
    {
      v37 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFLL);
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        atomic_store(1u, v37);
        WTF::fastFree((WTF *)v37, v16);
      }
    }
    v17 = a3 + v10;
    if (__OFADD__((_DWORD)a3, v10))
      v17 = (a3 >> 31) + 0x7FFFFFFF;
    v18 = __OFADD__(v17, v12);
    v19 = v17 + v12;
    LODWORD(v20) = (v17 >> 31) + 0x7FFFFFFF;
    if (v18)
      v20 = v20;
    else
      v20 = v19;
    v21 = HIDWORD(a3) + v11;
    if (__OFADD__(HIDWORD(a3), v11))
      v21 = (HIDWORD(a3) >> 31) + 0x7FFFFFFF;
    LODWORD(v22) = (v21 >> 31) + 0x7FFFFFFF;
    if (__OFADD__(v21, v13))
      v22 = v22;
    else
      v22 = v21 + v13;
    v40[0] = v20 | (v22 << 32);
    v40[1] = v9;
    v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8) + 528);
    v24 = 1.0;
    if (v23)
    {
      v25 = *(_QWORD *)(v23 + 8);
      if (v25)
      {
        v26 = *(_QWORD *)(v25 + 24);
        if (v26)
        {
          v27 = *(float **)(v26 + 8);
          if (v27)
          {
            v28 = (*(_DWORD *)v27)++;
            v24 = v27[91];
            if (v28)
            {
              *(_DWORD *)v27 = v28;
            }
            else
            {
              WebCore::Page::~Page((uint64_t)v27);
              WTF::fastFree(v32, v33);
            }
          }
        }
      }
    }
    LODWORD(v41) = WebCore::snapRectToDevicePixels((int *)v40, v24);
    HIDWORD(v41) = v29;
    v42 = v30;
    v43 = v31;
    return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t *, float))(*(_QWORD *)v14 + 144))(v14, &v41, (float)a4 * 0.015625);
  }
  return result;
}

BOOL WebCore::RenderImage::paintReplaced(WebCore::PaintInfo &,WebCore::LayoutPoint const&)::$_0::operator()(uint64_t a1)
{
  _DWORD *v1;
  int *v2;
  uint64_t v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (**(_BYTE **)a1)
  {
    v1 = *(_DWORD **)(a1 + 8);
    if (*v1 >= **(_DWORD **)(a1 + 32))
    {
      if (**(_BYTE **)(a1 + 16))
        v1 = *(_DWORD **)(a1 + 24);
      v2 = v1 + 1;
      goto LABEL_11;
    }
    return 0;
  }
  v3 = 24;
  if (!**(_BYTE **)(a1 + 16))
    v3 = 8;
  if (*(_DWORD *)(*(_QWORD *)(a1 + v3) + 4) < **(_DWORD **)(a1 + 32))
    return 0;
  v2 = *(int **)(a1 + 8);
LABEL_11:
  v5 = *v2;
  v6 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 48) + *(_DWORD *)(*(_QWORD *)(a1 + 40) + 44);
  v7 = v6 << 6;
  if (v6 < -33554432)
    v7 = 0x80000000;
  if (v6 <= 0x1FFFFFF)
    v8 = v7;
  else
    v8 = 0x7FFFFFFF;
  return v5 >= v8;
}

uint64_t WebCore::RenderImage::paintReplaced(WebCore::PaintInfo &,WebCore::LayoutPoint const&)::$_1::operator()(unsigned int **a1)
{
  unsigned int v1;
  int v2;
  BOOL v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;

  v1 = **a1;
  v2 = *a1[1];
  v3 = __OFADD__(v1, v2);
  v4 = v1 + v2;
  v5 = (v1 >> 31) + 0x7FFFFFFF;
  if (!v3)
    v5 = v4;
  v3 = __OFADD__(v5, 128);
  v6 = v5 + 128;
  if (v3)
    v6 = 0x7FFFFFFF;
  v7 = *a1[2];
  v3 = __OFSUB__(v6, v7);
  v8 = v6 - v7;
  v9 = (v6 >> 31) + 0x7FFFFFFF;
  if (!v3)
    v9 = v8;
  v10 = *a1[3];
  v11 = *a1[4];
  v3 = __OFADD__(v10, v11);
  v12 = v10 + v11;
  v13 = (v10 >> 31) + 0x7FFFFFFF;
  if (!v3)
    v13 = v12;
  v14 = a1[5][11];
  v15 = v14 << 6;
  if (v14 < -33554432)
    v15 = 0x80000000;
  if (v14 <= 0x1FFFFFF)
    v16 = v15;
  else
    v16 = 0x7FFFFFFF;
  v3 = __OFADD__(v13, v16);
  v17 = v13 + v16;
  v18 = (v13 >> 31) + 0x7FFFFFFF;
  if (!v3)
    v18 = v17;
  v19 = v18 + 128;
  if (__OFADD__(v18, 128))
    v19 = 0x7FFFFFFF;
  v3 = __OFSUB__(v19, v7);
  v20 = v19 - v7;
  v21 = (v19 >> 31) + 0x7FFFFFFF;
  if (v3)
    v20 = v21;
  if ((*((_BYTE *)a1[6] + 43) & 4) != 0)
  {
    v22 = *a1[7];
    v23 = *a1[8];
    v3 = __OFSUB__(v22, v23);
    v24 = v22 - v23;
    v25 = (v22 >> 31) + 0x7FFFFFFF;
    if (!v3)
      v25 = v24;
    v3 = __OFADD__(v9, v25);
    v26 = v9 + v25;
    v9 = (v9 >> 31) + 0x7FFFFFFF;
    if (!v3)
      v9 = v26;
  }
  v27 = a1[9];
  v29 = *v27;
  v28 = v27[1];
  v3 = __OFADD__(v29, v9);
  LODWORD(v30) = v29 + v9;
  v31 = (v29 >> 31) + 0x7FFFFFFF;
  if (v3)
    v30 = v31;
  else
    v30 = v30;
  v3 = __OFADD__(v28, v20);
  v32 = v28 + v20;
  LODWORD(v33) = (v28 >> 31) + 0x7FFFFFFF;
  if (v3)
    v33 = v33;
  else
    v33 = v32;
  return v30 | (v33 << 32);
}

uint64_t WebCore::RenderImage::paintIntoRect(WebCore::RenderImage *this, WebCore::GraphicsContext **a2, const WebCore::FloatRect *a3)
{
  _QWORD *v4;
  uint64_t v5;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::Image *v23;
  char v24;
  char v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  WebCore::GraphicsContext *v32;
  float v33;
  double v34;
  int v35;
  double v36;
  int v37;
  char v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  __int16 v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  WebCore::Image *v59;
  uint64_t v60;
  WebCore::GraphicsContext *v61;
  WebCore::Image *v62;
  float v63;
  int v64;
  uint64_t v65;
  WebCore::CachedImage *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WebCore::Image *v71;
  uint64_t v72;
  uint64_t v73;
  _BOOL4 isSystemPreviewLink;
  uint64_t v75;
  void (**v76)(WebCore::RenderThemeIOS *__hidden);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WebCore::Image *v80;
  WebCore::Image *v81;
  float v82;
  int v83;

  v4 = (_QWORD *)*((_QWORD *)this + 28);
  v5 = v4[3];
  if (!v5)
    return 0;
  if (!*(_QWORD *)(v5 + 8))
    return 0;
  if (((*(uint64_t (**)(_QWORD *))(*v4 + 40))(v4) & 1) != 0)
    return 0;
  v8 = *((float *)a3 + 2);
  if (v8 <= 0.0)
    return 0;
  v9 = *((float *)a3 + 3);
  if (v9 <= 0.0)
    return 0;
  v10 = *((_QWORD *)this + 28);
  v11 = floorf(v8);
  v12 = 0x7FFFFFFFLL;
  v13 = 0x80000000;
  if (v11 > -2147500000.0)
    v13 = (int)v11;
  if (v11 < 2147500000.0)
    v12 = v13;
  v14 = floorf(v9);
  v15 = 0x7FFFFFFF00000000;
  v16 = 0x8000000000000000;
  if (v14 > -2147500000.0)
    v16 = (unint64_t)(int)v14 << 32;
  if (v14 < 2147500000.0)
    v15 = v16;
  v81 = (WebCore::Image *)(v15 | v12);
  (*(void (**)(WebCore::Image **__return_ptr, uint64_t, WebCore::Image **))(*(_QWORD *)v10 + 32))(&v80, v10, &v81);
  if (!v80)
    return 0;
  v18 = 0;
  if ((*(float (**)(WebCore::Image *, _QWORD))(*(_QWORD *)v80 + 168))(v80, 0) > 0.0 && v17 > 0.0)
  {
    if ((*((_BYTE *)this + 45) & 1) != 0)
      goto LABEL_31;
    v19 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (!v19)
      goto LABEL_31;
    v20 = *(_WORD *)(v19 + 28);
    if ((v20 & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1963D9BA4);
    }
    if ((v20 & 0x10) != 0)
    {
      if (*(_QWORD *)(*(_QWORD *)(v19 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
        v21 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
      else
        v21 = 0;
    }
    else
    {
LABEL_31:
      v21 = 0;
    }
    v22 = *((_QWORD *)this + 28);
    v79 = 0;
    (*(void (**)(WebCore::Image **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v22 + 32))(&v81, v22, &v79);
    v23 = v81;
    v81 = 0;
    if (v23)
    {
      if (*((_DWORD *)v23 + 2) == 1)
      {
        (*(void (**)(WebCore::Image *))(*(_QWORD *)v23 + 8))(v23);
        if (v21)
          goto LABEL_28;
        goto LABEL_33;
      }
      --*((_DWORD *)v23 + 2);
    }
    if (v21)
    {
LABEL_28:
      v24 = *(_BYTE *)(v21 + 256);
      goto LABEL_34;
    }
LABEL_33:
    v24 = 2;
LABEL_34:
    v26 = WebCore::RenderBoxModelObject::decodingModeForImageDraw(this, v23, (const WebCore::PaintInfo *)a2);
    if ((*((_BYTE *)this + 45) & 1) != 0)
      goto LABEL_42;
    v27 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (!v27)
      goto LABEL_42;
    v28 = *(_WORD *)(v27 + 28);
    if ((v28 & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1963D9BE4);
    }
    if ((v28 & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v27 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24)
      && (v29 = *(_QWORD *)(*(_QWORD *)(v27 + 176) + 24)) != 0
      && (v30 = *(_QWORD *)(v29 + 8)) != 0
      && (*(char *)(v30 + 720) & 0x80000000) == 0)
    {
      v31 = 0;
    }
    else
    {
LABEL_42:
      v31 = (*(_DWORD *)(*((_QWORD *)this + 13) + 232) >> 15) & 1;
    }
    v32 = a2[10];
    v33 = *((float *)a3 + 3);
    v34 = *((float *)a3 + 2) * 64.0;
    if (v34 >= 2147483650.0)
    {
      v35 = 0x7FFFFFFF;
    }
    else if (v34 > -2147483650.0)
    {
      v35 = (int)v34;
    }
    else
    {
      v35 = 0x80000000;
    }
    LODWORD(v81) = v35;
    v36 = v33 * 64.0;
    if (v36 >= 2147483650.0)
    {
      v37 = 0x7FFFFFFF;
    }
    else if (v36 <= -2147483650.0)
    {
      v37 = 0x80000000;
    }
    else
    {
      v37 = (int)v36;
    }
    HIDWORD(v81) = v37;
    v38 = WebCore::RenderBoxModelObject::chooseInterpolationQuality((uint64_t)this, v32, v23, (uint64_t)v23, (const WebCore::LayoutSize *)&v81);
    v40 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 40) + 8) + 528)
                                                        + 8)
                                            + 24)
                                + 8)
                    + 112);
    v42 = *(_QWORD *)(v41 + 680);
    if (*(_BYTE *)(v41 + 247))
      LODWORD(v41) = *(unsigned __int8 *)(v41 + 246) != 0;
    else
      v41 = (*(_QWORD *)(v41 + 696) >> 28) & 1;
    v43 = (v42 >> 3) & 0x100000;
    if ((_DWORD)v41)
      v44 = 0x200000;
    else
      v44 = 0;
    v45 = v43 & 0xFFF0FFFF | (32 * (v26 & 7)) | ((v24 & 0xF) << 8) | (v31 << 12) & 0xFFF0FFFF | ((v38 & 0xF) << 16) | v44 | 1;
    if ((*((_BYTE *)this + 45) & 1) != 0)
      goto LABEL_79;
    v46 = *(_WORD *)(v40 + 28);
    if ((v46 & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1963D9BC4);
    }
    if ((v46 & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v40 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
      goto LABEL_79;
    v47 = *(_DWORD *)(v40 + 24) + 2;
    *(_DWORD *)(v40 + 24) = v47;
    v48 = *(_QWORD *)(v40 + 280);
    if (v48 && (v49 = *(_QWORD *)(v48 + 8)) != 0)
    {
      v50 = *(_QWORD *)(v49 + 104);
      if (v50
        && ((v51 = *(_DWORD *)(v50 + 4), (v51 & 1) != 0)
          ? (v52 = *(_QWORD *)(v50 + 40), LODWORD(v53) = *(_DWORD *)(v50 + 52))
          : (v52 = v50 + 32, LODWORD(v53) = v51 >> 5),
            (_DWORD)v53))
      {
        v53 = v53;
        v55 = (_QWORD *)(v52 + 8);
        while (1)
        {
          v56 = *(v55 - 1);
          if (v56 == WebCore::HTMLNames::typeAttr
            || *(_QWORD *)(v56 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
            && *(_QWORD *)(v56 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
          {
            break;
          }
          v55 += 2;
          if (!--v53)
          {
            v55 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      else
      {
        v55 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      }
      v54 = MEMORY[0x19AEA53F4](*v55, "image/x-apple-adaptive-glyph", 28);
      v47 = *(_DWORD *)(v40 + 24);
    }
    else
    {
      v54 = 0;
    }
    v57 = v47 - 2;
    if (v57)
    {
      *(_DWORD *)(v40 + 24) = v57;
      if ((v54 & 1) == 0)
        goto LABEL_79;
    }
    else if ((*(_WORD *)(v40 + 30) & 0x400) != 0)
    {
      if (!v54)
        goto LABEL_79;
    }
    else
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v40, v39);
      if ((v54 & 1) == 0)
        goto LABEL_79;
    }
    v58 = (uint64_t)a2[10];
    v59 = v80;
    v60 = WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*((_QWORD *)this + 14) + 32), v39);
    v18 = WebCore::GraphicsContext::drawMultiRepresentationHEIC(v58, v59, v60, (uint64_t)a3, v45);
    if ((_DWORD)v18)
    {
LABEL_80:
      if ((_DWORD)v18 == 1)
      {
        v65 = *(_QWORD *)(*((_QWORD *)this + 28) + 24);
        if (v65)
          v66 = *(WebCore::CachedImage **)(v65 + 8);
        else
          v66 = 0;
        WebCore::CachedImage::addClientWaitingForAsyncDecoding(v66, this);
      }
      if (v21)
      {
        v67 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 40) + 8) + 680);
        if (((*(unsigned int *)(v67 + 720) | (unint64_t)((uint64_t)*(char *)(v67 + 724) << 32)) & 0x8000000000000000) != 0)
        {
          v68 = *(_QWORD *)(v21 + 32);
          if (v68)
          {
            if ((~*(unsigned __int16 *)(v68 + 28) & 0x18) == 0)
            {
              v72 = *(_QWORD *)(*(_QWORD *)(v68 + 96) + 24);
              v73 = *(_QWORD *)(WebCore::HTMLNames::aTag + 24);
              if (v72 == v73
                || v72 == *(_QWORD *)(WebCore::HTMLNames::pictureTag + 24)
                && (v77 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v68 + 40) + 8) + 680),
                    ((*(unsigned int *)(v77 + 720) | (unint64_t)((uint64_t)*(char *)(v77 + 724) << 32)) & 0x8000000000000000) != 0)
                && (v68 = *(_QWORD *)(v68 + 32)) != 0
                && (~*(unsigned __int16 *)(v68 + 28) & 0x18) == 0
                && *(_QWORD *)(*(_QWORD *)(v68 + 96) + 24) == v73)
              {
                isSystemPreviewLink = WebCore::HTMLAnchorElement::isSystemPreviewLink((WebCore::HTMLAnchorElement *)v68);
                if ((_DWORD)v18 == 3 && isSystemPreviewLink)
                {
                  v75 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 40) + 8) + 680);
                  if (((*(unsigned int *)(v75 + 720) | (unint64_t)((uint64_t)*(char *)(v75 + 724) << 32)) & 0x8000000000000000) != 0)
                  {
                    {
                      v76 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
                    }
                    else
                    {
                      v78 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
                      *(_OWORD *)(v78 + 40) = 0u;
                      *(_OWORD *)(v78 + 24) = 0u;
                      v76 = &off_1E335BC30;
                      *(_QWORD *)v78 = &off_1E335BC30;
                    }
                    ((void (*)(uint64_t *, WebCore::Image *, WebCore::GraphicsContext **, const WebCore::FloatRect *))v76[62])(&WebCore::RenderTheme::singleton(void)::theme, v80, a2, a3);
                  }
                }
              }
            }
          }
        }
      }
      if ((*((_BYTE *)this + 45) & 1) == 0)
      {
        v69 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
        if (v69)
        {
          if ((*(_WORD *)(v69 + 28) & 8) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1963D9C04);
          }
          if (((*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2[10] + 40))(a2[10]) & 1) == 0)
          {
            if ((*((_BYTE *)this + 45) & 1) != 0)
            {
              v70 = 0;
            }
            else
            {
              v70 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
              if (v70 && (*(_WORD *)(v70 + 28) & 8) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x1963D9C34);
              }
            }
            WebCore::Node::setHasEverPaintedImages(v70, 1);
          }
        }
      }
      goto LABEL_96;
    }
LABEL_79:
    v61 = a2[10];
    v62 = v80;
    v63 = (*(float (**)(WebCore::Image *, _QWORD))(*(_QWORD *)v80 + 168))(v80, (unsigned __int16)v45 >> 12);
    v81 = 0;
    v82 = v63;
    v83 = v64;
    v18 = (*(uint64_t (**)(WebCore::GraphicsContext *, WebCore::Image *, const WebCore::FloatRect *, WebCore::Image **, uint64_t))(*(_QWORD *)v61 + 360))(v61, v62, a3, &v81, *(_QWORD *)&v45 & 0xFFFFFFLL);
    goto LABEL_80;
  }
LABEL_96:
  v71 = v80;
  v80 = 0;
  if (v71)
  {
    if (*((_DWORD *)v71 + 2) == 1)
      (*(void (**)(WebCore::Image *))(*(_QWORD *)v71 + 8))(v71);
    else
      --*((_DWORD *)v71 + 2);
  }
  return v18;
}

uint64_t WebCore::RenderImage::foregroundIsKnownToBeOpaqueInRect(WebCore::RenderImage *this, const WebCore::LayoutRect *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  signed int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t isCalculatedEqual;
  uint64_t v26;
  uint64_t v27;
  int v29;
  int v30;
  void *v31;
  float v32;
  int v33;
  int v34;
  int v35;
  void *v36;
  float v37;
  int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  WebCore::CachedImage *v44;
  WTF *v45;
  WTF *v46;
  unsigned int v47;
  unsigned __int8 v48;
  char v49;
  char v50;
  unsigned int v51;
  unsigned __int8 v52;
  char v53;
  char v54;
  float v55;
  unsigned __int8 v56;
  char v57;
  char v58;
  float v59;
  unsigned __int8 v60;
  char v61;
  char v62;

  v3 = (_QWORD *)*((_QWORD *)this + 28);
  v4 = v3[3];
  if (!v4)
    return 0;
  if (!*(_QWORD *)(v4 + 8))
    return 0;
  if (((*(uint64_t (**)(_QWORD *))(*v3 + 40))(v3) & 1) != 0)
    return 0;
  v6 = *(_QWORD *)(*((_QWORD *)this + 28) + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      if ((*(_WORD *)(v7 + 557) & 0x400) != 0)
        return 0;
    }
  }
  v8 = WebCore::RenderBox::contentBoxRect(this);
  v11 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 < (int)v8)
    return 0;
  v12 = v8 + v9;
  if (__OFADD__((_DWORD)v8, v9))
    v12 = (v8 >> 31) + 0x7FFFFFFF;
  v13 = *((_DWORD *)a2 + 2);
  v14 = __OFADD__(v11, v13);
  v15 = v11 + v13;
  v16 = (v11 >> 31) + 0x7FFFFFFF;
  if (!v14)
    v16 = v15;
  if (v12 < v16)
    return 0;
  v17 = *((_DWORD *)a2 + 1);
  if (v17 < SHIDWORD(v8))
    return 0;
  v18 = (HIDWORD(v8) >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(HIDWORD(v8), v10))
    v18 = HIDWORD(v8) + v10;
  v19 = *((_DWORD *)a2 + 3);
  v14 = __OFADD__(v17, v19);
  v20 = v17 + v19;
  v21 = (v17 >> 31) + 0x7FFFFFFF;
  if (!v14)
    v21 = v20;
  if (v18 < v21)
    return 0;
  v22 = (_QWORD *)*((_QWORD *)this + 11);
  v23 = (*(unsigned __int8 *)(*(_QWORD *)(v22[2] + 8) + 58) >> 2) & 7;
  if (v23 != 1)
  {
    if (v23)
      goto LABEL_56;
    if ((v24 = v22[3], *(float *)(v24 + 120) != 0.0) && (*(_BYTE *)(v24 + 124) & 0xF) != 0
      || *(float *)(v24 + 144) != 0.0 && (*(_BYTE *)(v24 + 148) & 0xF) != 0
      || *(float *)(v24 + 168) != 0.0 && (*(_BYTE *)(v24 + 172) & 0xF) != 0
      || *(float *)(v24 + 192) != 0.0 && (*(_BYTE *)(v24 + 196) & 0xF) != 0)
    {
      if (!WebCore::RenderBoxModelObject::borderObscuresBackground(this))
        return 0;
      v22 = (_QWORD *)*((_QWORD *)this + 11);
    }
  }
  isCalculatedEqual = 0;
  v26 = v22[3];
  if (!*(_BYTE *)(v26 + 76) || *(_BYTE *)(v26 + 76) == 11)
    return isCalculatedEqual;
  if (*(_BYTE *)(v26 + 78))
  {
    if (*(float *)(v26 + 72) != 0.0)
      return 0;
  }
  else if (*(_DWORD *)(v26 + 72))
  {
    return 0;
  }
  isCalculatedEqual = 0;
  if (!*(_BYTE *)(v26 + 84) || *(_BYTE *)(v26 + 84) == 11)
    return isCalculatedEqual;
  if (*(_BYTE *)(v26 + 86))
  {
    if (*(float *)(v26 + 80) != 0.0)
      return 0;
  }
  else if (*(_DWORD *)(v26 + 80))
  {
    return 0;
  }
  isCalculatedEqual = 0;
  if (!*(_BYTE *)(v26 + 92) || *(_BYTE *)(v26 + 92) == 11)
    return isCalculatedEqual;
  if (*(_BYTE *)(v26 + 94))
  {
    if (*(float *)(v26 + 88) != 0.0)
      return 0;
  }
  else if (*(_DWORD *)(v26 + 88))
  {
    return 0;
  }
  isCalculatedEqual = 0;
  if (!*(_BYTE *)(v26 + 100) || *(_BYTE *)(v26 + 100) == 11)
    return isCalculatedEqual;
  if (*(_BYTE *)(v26 + 102))
  {
    if (*(float *)(v26 + 96) == 0.0)
      goto LABEL_56;
    return 0;
  }
  if (*(_DWORD *)(v26 + 96))
    return 0;
LABEL_56:
  v27 = v22[4];
  if ((*(_BYTE *)(v27 + 151) & 5) != 0)
    return 0;
  v55 = 0.0;
  v58 = 0;
  v56 = *(_BYTE *)(v27 + 132);
  v29 = v56;
  v30 = *(unsigned __int8 *)(v27 + 133);
  v57 = *(_BYTE *)(v27 + 133);
  if (v56 - 2 >= 9)
  {
    if (v56 == 11)
    {
      v31 = (void *)*(unsigned int *)(v27 + 128);
      v55 = *(float *)(v27 + 128);
      WebCore::Length::ref((int *)&v55);
      goto LABEL_62;
    }
    v31 = 0;
    v33 = 1;
    v32 = 0.0;
  }
  else
  {
    v58 = *(_BYTE *)(v27 + 134);
    if (!v58)
    {
      v31 = (void *)*(unsigned int *)(v27 + 128);
      v55 = *(float *)(v27 + 128);
LABEL_62:
      v32 = *(float *)&v31;
      v33 = 1;
      goto LABEL_66;
    }
    v33 = 0;
    v32 = *(float *)(v27 + 128);
    v55 = v32;
    v31 = (void *)LODWORD(v32);
  }
LABEL_66:
  v59 = 0.0;
  v62 = 0;
  v60 = *(_BYTE *)(v27 + 140);
  v34 = v60;
  v35 = *(unsigned __int8 *)(v27 + 141);
  v61 = *(_BYTE *)(v27 + 141);
  if (v60 - 2 >= 9)
  {
    if (v60 != 11)
    {
      v36 = 0;
      v38 = 1;
      v37 = 0.0;
      goto LABEL_73;
    }
    v36 = (void *)*(unsigned int *)(v27 + 136);
    v59 = *(float *)&v36;
    WebCore::Length::ref((int *)&v59);
  }
  else
  {
    v62 = *(_BYTE *)(v27 + 142);
    if (v62)
    {
      v38 = 0;
      v37 = *(float *)(v27 + 136);
      v59 = v37;
      v36 = (void *)LODWORD(v37);
      goto LABEL_73;
    }
    v36 = (void *)*(unsigned int *)(v27 + 136);
    v59 = *(float *)&v36;
  }
  v37 = *(float *)&v36;
  v38 = 1;
LABEL_73:
  WebCore::RenderStyle::initialObjectPosition((uint64_t)&v47);
  if (v29 != v48 || (v30 != 0) != (v49 != 0))
    goto LABEL_121;
  if (v29 != 13)
  {
    if (v29 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)&v55, (const WebCore::Length *)&v47) & 1) == 0)
      {
LABEL_121:
        isCalculatedEqual = 0;
        goto LABEL_91;
      }
    }
    else
    {
      v39 = (float)SLODWORD(v32);
      if (!v33)
        v39 = v32;
      v40 = *(float *)&v47;
      if (!v50)
        v40 = (float)(int)v47;
      if (v39 != v40)
        goto LABEL_121;
    }
  }
  if (v34 != v52 || (v35 != 0) != (v53 != 0))
    goto LABEL_121;
  if (v34 == 13)
  {
    isCalculatedEqual = 1;
  }
  else if (v34 == 11)
  {
    isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)&v59, (const WebCore::Length *)&v51);
  }
  else
  {
    v41 = (float)SLODWORD(v37);
    if (!v38)
      v41 = v37;
    v42 = *(float *)&v51;
    if (!v54)
      v42 = (float)(int)v51;
    isCalculatedEqual = v41 == v42;
  }
LABEL_91:
  if (v52 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v51);
  }
  if (v48 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v47);
    if (!(_DWORD)isCalculatedEqual)
      goto LABEL_101;
    goto LABEL_94;
  }
  if ((_DWORD)isCalculatedEqual)
  {
LABEL_94:
    v43 = *(_QWORD *)(*((_QWORD *)this + 28) + 24);
    if (v43 && (v44 = *(WebCore::CachedImage **)(v43 + 8)) != 0)
    {
      v45 = WebCore::CachedImage::imageForRenderer(v44, this);
      v46 = v45;
      if (v45)
        ++*((_DWORD *)v45 + 2);
      isCalculatedEqual = (*(uint64_t (**)(WTF *))(*(_QWORD *)v45 + 104))(v45);
      if (*((_DWORD *)v46 + 2) == 1)
        (*(void (**)(WTF *))(*(_QWORD *)v46 + 8))(v46);
      else
        --*((_DWORD *)v46 + 2);
    }
    else
    {
      isCalculatedEqual = 0;
    }
  }
LABEL_101:
  if (v34 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v36);
  }
  if (v29 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v31);
  }
  return isCalculatedEqual;
}

uint64_t WebCore::RenderImage::computeBackgroundIsKnownToBeObscured(WebCore::RenderImage *this, const WebCore::LayoutPoint *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t (*v6)();
  _BOOL4 v7;
  uint64_t result;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14[2];

  WebCore::RenderStyle::visitedDependentColor((uint64_t)this + 80, 61, 0, v14);
  if ((v14[0] & 0x8000000000000) != 0)
  {
    v9 = (unsigned int *)(v14[0] & 0xFFFFFFFFFFFFLL);
    if (*(float *)((v14[0] & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
    {
      v13 = 1;
      goto LABEL_14;
    }
  }
  else if (LOBYTE(v14[0]))
  {
    goto LABEL_10;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + 8);
  if (*(_QWORD *)(v5 + 8))
  {
    do
    {
      v12 = *(_QWORD *)(v5 + 16);
      v7 = v12 != 0;
      if (v12)
        break;
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5);
  }
  else
  {
    if (*(_QWORD *)(v5 + 16))
      v6 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    else
      v6 = 0;
    v7 = v6 != 0;
  }
  if ((v14[0] & 0x8000000000000) == 0)
  {
    if (v7)
      goto LABEL_10;
    return 0;
  }
  v13 = v7;
  v9 = (unsigned int *)(v14[0] & 0xFFFFFFFFFFFFLL);
  do
  {
LABEL_14:
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (v11)
  {
    if (!v13)
      return 0;
  }
  else
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v4);
    if ((v13 & 1) == 0)
      return 0;
  }
LABEL_10:
  v14[0] = 0;
  v14[1] = 0;
  result = WebCore::RenderBox::getBackgroundPaintedExtent(this, a2, (WebCore::LayoutRect *)v14);
  if ((_DWORD)result)
    return (*(uint64_t (**)(WebCore::RenderImage *, uint64_t *, _QWORD))(*(_QWORD *)this + 1608))(this, v14, 0);
  return result;
}

uint64_t WebCore::RenderImage::nodeAtPoint(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, const WebCore::LayoutPoint *a5, unsigned int a6)
{
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  const WebCore::TreeScope *v17;
  unsigned int *v18;
  WebCore::Node *v20;
  unint64_t v21;
  int32x2_t v22;
  float v23;
  int v24;
  unsigned __int32 v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  float v39;
  int v40;
  double v41;
  uint64_t v42;
  double v43;
  unint64_t v44;
  WebCore::Node *v45;
  int v46;
  WebCore::Node *v47;
  uint64_t v49;
  int32x2_t v50;
  WebCore::Node *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int16 v57;
  uint64_t v58;
  WebCore::Node *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;

  v52 = *(_QWORD *)a3;
  v53 = *(_OWORD *)(a3 + 8);
  v54 = *(_QWORD *)(a3 + 24);
  v11 = *(_OWORD *)(a3 + 48);
  v55 = *(_OWORD *)(a3 + 32);
  v56 = v11;
  v57 = *(_WORD *)(a3 + 64);
  v58 = 0;
  v59 = 0;
  v65 = 0;
  v64 = 0;
  v60 = v52;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v13 = WebCore::RenderBox::nodeAtPoint((WebCore::RenderBox *)a1, (int *)a2, (WebCore::HitTestResult *)&v52, a4, a5, a6);
  if (v58)
  {
    if ((*(_BYTE *)(a1 + 45) & 1) == 0)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      if (v12)
      {
        v14 = *(_WORD *)(v12 + 28);
        if ((v14 & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1963DA70CLL);
        }
        if ((v14 & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v12 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
        {
          v16 = *(_QWORD *)(v12 + 248);
          v12 += 248;
          v15 = v16;
          v17 = *(const WebCore::TreeScope **)(v12 - 208);
          v18 = (unsigned int *)*((_QWORD *)v17 + 5);
          if (v18 && v15 != 0)
          {
            WebCore::TreeScopeOrderedMap::getElementByMapName(v18, (const WTF::AtomString *)v12, v17, (uint64_t *)&v51);
            v20 = v51;
            if (v51)
            {
              v21 = WebCore::RenderBox::contentBoxRect((WebCore::RenderBox *)a1);
              v23 = 1.0 / *(float *)(*(_QWORD *)(a1 + 104) + 184);
              v24 = *((_DWORD *)a5 + 1);
              v25 = a4->u32[1];
              v26 = a4->i32[0] - *(_DWORD *)a5;
              if (__OFSUB__(a4->i32[0], *(_DWORD *)a5))
                v26 = ((unsigned __int32)a4->i32[0] >> 31) + 0x7FFFFFFF;
              v27 = __OFSUB__(v25, v24);
              v28 = v25 - v24;
              if (v27)
                v28 = (v25 >> 31) + 0x7FFFFFFF;
              v30 = *(_DWORD *)(a1 + 152);
              v29 = *(_DWORD *)(a1 + 156);
              v27 = __OFSUB__(v26, v30);
              v31 = v26 - v30;
              v32 = (v26 >> 31) + 0x7FFFFFFF;
              if (!v27)
                v32 = v31;
              v27 = __OFSUB__(v28, v29);
              v33 = v28 - v29;
              v34 = (v28 >> 31) + 0x7FFFFFFF;
              if (!v27)
                v34 = v33;
              v27 = __OFSUB__(v32, (_DWORD)v21);
              v35 = v32 - v21;
              v36 = (v32 >> 31) + 0x7FFFFFFF;
              if (!v27)
                v36 = v35;
              v27 = __OFSUB__(v34, HIDWORD(v21));
              v37 = v34 - HIDWORD(v21);
              v38 = (v34 >> 31) + 0x7FFFFFFF;
              v39 = (float)v36;
              if (v27)
                v40 = v38;
              else
                v40 = v37;
              v41 = (float)(v23 * (float)(v39 * 0.015625)) * 64.0;
              if (v41 >= 2147483650.0)
              {
                v42 = 0x7FFFFFFFLL;
              }
              else if (v41 <= -2147483650.0)
              {
                v42 = 0x80000000;
              }
              else
              {
                v42 = (int)v41;
              }
              v43 = (float)(v23 * (float)((float)v40 * 0.015625)) * 64.0;
              if (v43 >= 2147483650.0)
              {
                v44 = 0x7FFFFFFF00000000;
              }
              else if (v43 <= -2147483650.0)
              {
                v44 = 0x8000000000000000;
              }
              else
              {
                v44 = (unint64_t)(int)v43 << 32;
              }
              v50 = v22;
              if (!WebCore::HTMLMapElement::mapMouseEvent((uint64_t)v20, (void *)(v44 | v42), &v50, (WebCore::HitTestResult *)&v52))goto LABEL_43;
              if ((*(_BYTE *)(a1 + 45) & 1) != 0)
                goto LABEL_60;
              v45 = *(WebCore::Node **)(*(_QWORD *)(a1 + 24) + 8);
              if (!v45)
                goto LABEL_60;
              v46 = *((unsigned __int16 *)v45 + 14);
              if ((v46 & 8) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x1963DA73CLL);
              }
              if ((~v46 & 0x408) != 0
                || !(*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)v45 + 368))(v45))
              {
                goto LABEL_39;
              }
              v49 = *((_QWORD *)v45 + 14);
              if (v49)
              {
                v45 = *(WebCore::Node **)(v49 + 8);
                if (v45)
LABEL_39:
                  *((_DWORD *)v45 + 6) += 2;
              }
              else
              {
LABEL_60:
                v45 = 0;
              }
              v47 = v59;
              v59 = v45;
              if (v47)
              {
                if (*((_DWORD *)v47 + 6) == 2)
                {
                  if ((*((_WORD *)v47 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v47, (void *)v12);
                }
                else
                {
                  *((_DWORD *)v47 + 6) -= 2;
                }
              }
LABEL_43:
              if (v51)
              {
                if (*((_DWORD *)v51 + 6) == 2)
                {
                  if ((*((_WORD *)v51 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v51, (void *)v12);
                }
                else
                {
                  *((_DWORD *)v51 + 6) -= 2;
                }
              }
            }
          }
        }
      }
    }
  }
  if ((v13 & 1) != 0)
  {
    WebCore::HitTestResult::operator=(a3, (uint64_t)&v52);
  }
  else if ((*(_BYTE *)(a2 + 1) & 0x80) != 0)
  {
    WebCore::HitTestResult::append((_QWORD *)a3, (uint64_t)&v52);
  }
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)&v52, (void *)v12);
  return v13;
}

uint64_t WebCore::RenderImage::layoutShadowContent(uint64_t this, const WebCore::LayoutSize *a2)
{
  WebCore::RenderBox *v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v16;
  int v17;
  _BOOL4 v18;
  WebCore::RenderBox *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  int v24;
  _BOOL4 v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  void *v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  int i;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v44;
  int v45;
  const WebCore::LayoutSize *v46;
  unsigned int v47[2];

  v2 = (WebCore::RenderBox *)this;
  if (*(unsigned int *)(this + 64) | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32))
  {
    v3 = *(_QWORD *)((*(unsigned int *)(this + 64) | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32)) + 8);
    if (v3)
    {
      while ((*(_BYTE *)(v3 + 45) & 4) == 0)
      {
        v5 = *(unsigned int *)(v3 + 47);
        if (v5 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32))
        {
          v3 = *(_QWORD *)((v5 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)) + 8);
          if (v3)
            continue;
        }
        goto LABEL_6;
      }
      v6 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
      v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      v45 = (v8 >> 31) ^ v8;
LABEL_8:
      v9 = *(_DWORD *)(v3 + 20) & 0xF8;
      v10 = v9 != 0;
      if ((*((_BYTE *)v2 + 23) & 0x10) != 0)
      {
        v42 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v2 + 648))(v2);
        if (v42 && v9 == 0)
          v10 = (*(unsigned __int8 *)(v42 + 328) >> 3) & 1;
      }
      this = WebCore::RenderBox::contentBoxRect(v2);
      v12 = v11;
      v13 = HIDWORD(v11);
      if (*(_DWORD *)a2 != (_DWORD)v11 || *((_DWORD *)a2 + 1) != HIDWORD(v11) || v10 != 0)
      {
        v16 = *((_DWORD *)v2 + 5);
        if ((v16 & 0x20000) != 0)
        {
          v19 = v2;
          if ((*((_BYTE *)v2 + 45) & 2) != 0)
            v19 = *(WebCore::RenderBox **)(*((_QWORD *)v2 + 4) + 8);
          v20 = *((_QWORD *)v19 + 11);
          if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 32) + 40) + 20))
            goto LABEL_26;
          v21 = *(_QWORD **)(v20 + 40);
          if (v21[41] || v21[38] || v21[39] || v21[40] || (v16 & 0x100000) != 0)
            goto LABEL_26;
        }
        if ((v16 & 0x4000) == 0)
          goto LABEL_18;
        v37 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
        v38 = v37 & v45;
        for (i = 1; ; v38 = (v40 + i++) & v37)
        {
          v40 = v38;
          v41 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v38);
          if (v41 != -1 && *(WebCore::RenderBox **)(v41 + 8) == v2)
            break;
        }
        if (**(_BYTE **)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v40 + 8))
        {
LABEL_26:
          v18 = 1;
        }
        else
        {
LABEL_18:
          v17 = (unsigned __int16)*((_DWORD *)v2 + 31) >> 13;
          v44 = 2;
          switch((unsigned __int16)*((_DWORD *)v2 + 31) >> 13)
          {
            case 1:
            case 2:
              goto LABEL_20;
            case 3:
            case 5:
              v17 = 3;
              goto LABEL_20;
            case 4:
              goto LABEL_21;
            default:
              v17 = 0;
LABEL_20:
              v44 = v17;
LABEL_21:
              v18 = (v44 & 0xFFFFFFFD) == 1;
              break;
          }
        }
        v46 = a2;
        *(_QWORD *)v47 = *((_QWORD *)v2 + 19);
        v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 3) + 8) + 40) + 8)
                                    + 1944)
                        + 248);
        v23 = WebCore::LocalFrameViewLayoutContext::pushLayoutState(v22 + 336, v2, (int *)v47, 0, 0);
        v24 = v23;
        v25 = v18;
        if (v18 && v23)
          ++*(_DWORD *)(v22 + 492);
        v26 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v2 + 1016))(v2);
        v27 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v2 + 1000))(v2);
        v28 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v2 + 944))(v2);
        v29 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v2 + 928))(v2);
        LODWORD(v30) = v26 + v28;
        if (__OFADD__(v26, v28))
          v30 = (v26 >> 31) + 0x7FFFFFFF;
        else
          v30 = v30;
        LODWORD(v31) = v27 + v29;
        if (__OFADD__(v27, v29))
          v31 = (v27 >> 31) + 0x7FFFFFFF;
        else
          v31 = v31;
        *(_QWORD *)(v3 + 152) = v30 | (v31 << 32);
        *(float *)v47 = (float)(int)v13 * 0.015625;
        LOWORD(v47[1]) = 4;
        BYTE2(v47[1]) = 1;
        WebCore::RenderStyle::setHeight(v3 + 80, (WebCore::Length *)v47);
        if (LOBYTE(v47[1]) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v47[0]);
        }
        *(float *)v47 = (float)v12 * 0.015625;
        LOWORD(v47[1]) = 4;
        BYTE2(v47[1]) = 1;
        WebCore::RenderStyle::setWidth(v3 + 80, (WebCore::Length *)v47);
        a2 = v46;
        if (LOBYTE(v47[1]) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v47[0]);
        }
        v32 = *(_DWORD *)(v3 + 20);
        if ((v32 & 8) == 0)
        {
          *(_DWORD *)(v3 + 20) = v32 | 8;
          if ((v32 & 0x8000) != 0)
          {
            if ((*(_BYTE *)(v3 + 45) & 0x10) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1963DAC1CLL);
            }
            v33 = *(_QWORD *)(v3 + 144);
            if (v33)
            {
              v34 = *(_DWORD *)(v33 + 8) + 1;
              *(_DWORD *)(v33 + 8) = v34;
            }
            else
            {
              v34 = MEMORY[8];
            }
            *(_QWORD *)(v33 + 24) = *(_QWORD *)(v33 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
            if (!v34)
            {
              __break(0xC471u);
              JUMPOUT(0x1963DAC3CLL);
            }
            *(_DWORD *)(v33 + 8) = v34 - 1;
          }
        }
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 688))(v3);
        if (v24)
        {
          this = WebCore::LocalFrameViewLayoutContext::popLayoutState(v22 + 336, v35);
          if (v25)
            --*(_DWORD *)(v22 + 492);
        }
      }
      while (1)
      {
        v36 = *(unsigned int *)(v3 + 47);
        if (!(v36 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)))
          break;
        v3 = *(_QWORD *)((v36 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)) + 8);
        if (!v3)
          break;
        if ((*(_BYTE *)(v3 + 45) & 4) != 0)
          goto LABEL_8;
      }
    }
  }
LABEL_6:
  *((_DWORD *)v2 + 5) &= 0xFFFFFE0F;
  return this;
}

void WebCore::RenderImageResource::~RenderImageResource(unsigned int **this, void *a2)
{
  void *v3;
  WTF *v4;

  *this = (unsigned int *)off_1E34287A0;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(this + 3, a2);
  v4 = (WTF *)this[2];
  this[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, v3);
    else
      --*(_DWORD *)v4;
  }
}

{
  void *v3;
  WTF *v4;

  *this = (unsigned int *)off_1E34287A0;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(this + 3, a2);
  v4 = (WTF *)this[2];
  this[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, v3);
    else
      --*(_DWORD *)v4;
  }
  if (*((_DWORD *)this + 2))
  {
    this[4] = 0;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)this, v3);
  }
}

void WebCore::RenderImageResource::shutdown(WebCore::RenderImageResource *this)
{
  unsigned int *v2;
  void *v3;
  uint64_t v4;
  unsigned int *v5;

  v4 = 0;
  (*(void (**)(unsigned int **__return_ptr, WebCore::RenderImageResource *, uint64_t *))(*(_QWORD *)this + 32))(&v5, this, &v4);
  (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 264))(v5);
  v2 = v5;
  v5 = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v5 = 0;
  WebCore::RenderImageResource::setCachedImage(this, (uint64_t *)&v5);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v5, v3);
}

_QWORD *WebCore::RenderImageResource::setCachedImage(_QWORD *this, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int **v9;
  uint64_t v10;
  WebCore::CachedResource *v11;
  uint64_t v12;
  WebCore::CachedResource *v13;
  WebCore::CachedResourceClient *v14;

  v3 = this;
  v5 = this + 3;
  v4 = this[3];
  if (v4)
    v6 = *(_QWORD *)(v4 + 8);
  else
    v6 = 0;
  v7 = *a2;
  if (*a2)
    v7 = *(_QWORD *)(v7 + 8);
  if (v6 != v7)
  {
    if (v4)
    {
      this = *(_QWORD **)(v4 + 8);
      if (this)
      {
        v8 = v3[2];
        if (v8)
        {
          v9 = *(unsigned int ***)(v8 + 8);
          if (v9)
          {
            if (*((_BYTE *)v3 + 32))
              this = (_QWORD *)WebCore::CachedResource::removeClient((WebCore::CachedResource *)this, v9);
          }
        }
      }
    }
    v10 = v3[2];
    if (v10 && *(_QWORD *)(v10 + 8))
    {
      v11 = *a2 ? *(WebCore::CachedResource **)(*a2 + 8) : 0;
      this = WebCore::CachedResourceHandleBase::setResource(v5, v11);
      *((_BYTE *)v3 + 32) = 1;
      v12 = v3[3];
      if (v12)
      {
        v13 = *(WebCore::CachedResource **)(v12 + 8);
        if (v13)
        {
          v14 = *(WebCore::CachedResourceClient **)(v3[2] + 8);
          this = (_QWORD *)WebCore::CachedResource::addClientToSet(v13, v14);
          if ((_DWORD)this)
            this = (_QWORD *)(*(uint64_t (**)(WebCore::CachedResource *, WebCore::CachedResourceClient *))(*(_QWORD *)v13 + 88))(v13, v14);
          if ((*(_WORD *)(*(_QWORD *)(*v5 + 8) + 557) >> 5) - 3 <= 1)
            return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3[2] + 8) + 48))(*(_QWORD *)(v3[2] + 8));
        }
      }
    }
  }
  return this;
}

_QWORD *WebCore::RenderImageResource::resetAnimation(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v4[2];
  char v5;
  __int128 v6;
  char v7;

  v1 = this[3];
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = this;
    v4[0] = 0;
    (*(void (**)(__int128 *__return_ptr, _QWORD *, _QWORD *))(*this + 32))(&v6, this, v4);
    (*(void (**)(_QWORD))(*(_QWORD *)v6 + 272))(v6);
    this = (_QWORD *)v6;
    *(_QWORD *)&v6 = 0;
    if (this)
    {
      if (*((_DWORD *)this + 2) == 1)
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
      else
        --*((_DWORD *)this + 2);
    }
    v3 = v2[2];
    if (v3)
    {
      this = *(_QWORD **)(v3 + 8);
      if (this)
      {
        if ((*((_BYTE *)this + 20) & 0xF8) == 0
          && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this[3] + 8) + 40)
                                                                                               + 8)
                                                                                   + 1944)
                                                                       + 24)
                                                           + 8)
                                               + 40)
                                   + 8)
                       + 3382))
        {
          LOBYTE(v6) = 0;
          v7 = 0;
          LOBYTE(v4[0]) = 0;
          v5 = 0;
          return (_QWORD *)WebCore::RenderObject::issueRepaint((uint64_t)this, &v6, 0, 0, (uint64_t)v4);
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderImageResourceStyleImage::initialize(WebCore::RenderImageResourceStyleImage *this, WebCore::RenderElement *a2)
{
  _BYTE *v4;
  WebCore::CachedImage *v5;

  v4 = (_BYTE *)*((_QWORD *)this + 5);
  if (!v4[24])
    goto LABEL_5;
  if (!*(_BYTE *)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 192))(v4) + 24))
  {
    v4 = (_BYTE *)*((_QWORD *)this + 5);
LABEL_5:
    v5 = (WebCore::CachedImage *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 200))(v4);
    goto LABEL_6;
  }
  v5 = 0;
LABEL_6:
  WebCore::RenderImageResource::initialize(this, a2, v5);
  return (*(uint64_t (**)(_QWORD, WebCore::RenderElement *))(**((_QWORD **)this + 5) + 96))(*((_QWORD *)this + 5), a2);
}

void WebCore::RenderImageResourceStyleImage::shutdown(WebCore::RenderImageResourceStyleImage *this)
{
  unsigned int *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;

  v5 = 0;
  (*(void (**)(unsigned int **__return_ptr, WebCore::RenderImageResourceStyleImage *, uint64_t *))(*(_QWORD *)this + 32))(&v6, this, &v5);
  (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 264))(v6);
  v2 = v6;
  v6 = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v6 = 0;
  WebCore::RenderImageResource::setCachedImage(this, (uint64_t *)&v6);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v6, v3);
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    if (*(_QWORD *)(v4 + 8))
      (*(void (**)(_QWORD))(**((_QWORD **)this + 5) + 104))(*((_QWORD *)this + 5));
  }
}

WebCore::Image *WebCore::RenderImageResourceStyleImage::image@<X0>(WebCore::RenderImageResourceStyleImage *this@<X0>, int32x2_t *a2@<X1>, WebCore::Image **a3@<X8>)
{
  WebCore::Image *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x2_t v10;

  result = (WebCore::Image *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5));
  if ((_DWORD)result)
    goto LABEL_6;
  v7 = *((_QWORD *)this + 5);
  v8 = *((_QWORD *)this + 2);
  if (v8)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  v10 = vcvt_f32_s32(*a2);
  result = (WebCore::Image *)(*(uint64_t (**)(uint64_t, uint64_t, float32x2_t *, _QWORD))(*(_QWORD *)v7 + 176))(v7, v9, &v10, 0);
  if (!*a3)
  {
    *a3 = 0;
LABEL_6:
    result = (WebCore::Image *)WebCore::Image::nullImage(result);
    ++*((_DWORD *)result + 2);
    *a3 = result;
  }
  return result;
}

uint64_t WebCore::RenderImageResourceStyleImage::setContainerContext(uint64_t result, int32x2_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  float32x2_t v6;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(result + 40);
      v6 = vcvt_f32_s32(*a2);
      return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v5 + 216))(v5, *(float *)(*(_QWORD *)(v4 + 104) + 184));
    }
  }
  return result;
}

uint64_t WebCore::RenderInline::RenderInline(uint64_t a1, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = WebCore::RenderObject::RenderObject(a1, a2, a3, 56, 0);
  *(_QWORD *)result = off_1E3422BC8;
  *(_QWORD *)(result + 70) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_DWORD *)(result + 80) = 0;
  v6 = a4[1];
  a4[1] = 0;
  *(_QWORD *)(result + 88) = v6;
  *(_QWORD *)(result + 96) = a4[2];
  v7 = a4[3];
  a4[3] = 0;
  *(_QWORD *)(result + 104) = v7;
  v8 = a4[4];
  a4[4] = 0;
  *(_QWORD *)(result + 112) = v8;
  *(_QWORD *)(result + 120) = a4[5];
  v9 = a4[6];
  a4[6] = 0;
  *(_QWORD *)(result + 128) = v9;
  v10 = a4[7];
  a4[7] = 0;
  *(_QWORD *)(result + 136) = v10;
  *(_QWORD *)(result + 144) = 0;
  *(_QWORD *)result = off_1E3428870;
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 160) = 0;
  *(_DWORD *)(result + 20) |= 0x40000u;
  return result;
}

void WebCore::RenderInline::~RenderInline(WebCore::RenderLayerModelObject *this, void *a2)
{
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

void WebCore::updateStyleOfAnonymousBlockContinuations(unint64_t this, const WebCore::RenderBlock *a2, const WebCore::RenderStyle *a3, const WebCore::RenderStyle *a4)
{
  uint64_t v4;
  char v5;
  uint64_t v8;
  int v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  const WebCore::Element *v14;
  void *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int i;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  unint64_t v32;

  if ((this & 0xFFFFFFFFFFLL) != 0)
  {
    v4 = *(_QWORD *)((this & 0xFFFFFFFFFFLL) + 8);
    if (v4)
    {
      v5 = *(_BYTE *)(v4 + 45);
      if ((v5 & 4) != 0)
      {
        while ((v5 & 1) != 0)
        {
          v8 = (v5 & 2) != 0 ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8) + 96) : *(_QWORD *)(v4 + 96);
          if ((v8 & 0x1F) != 1 && (v8 & 0x1F) != 14)
            break;
          if ((v5 & 0x40) == 0)
            break;
          if ((v8 & 0xF80000000000) != 0)
            break;
          if (((*(uint64_t (**)(uint64_t, const WebCore::RenderBlock *, const WebCore::RenderStyle *, const WebCore::RenderStyle *))(*(_QWORD *)v4 + 176))(v4, a2, a3, a4) & 1) != 0)break;
          v10 = *(unsigned __int8 *)(v4 + 46);
          if (v10 == 20)
            break;
          if ((*(_BYTE *)(v4 + 52) & 7) == 1)
          {
            if ((*(_BYTE *)(v4 + 53) & 2) != 0 || v10 == 26 || v10 == 49)
              return;
          }
          else if (v10 == 49 || v10 == 26)
          {
            return;
          }
          if (((*((_DWORD *)a2 + 4) ^ *(_DWORD *)(v4 + 96)) & 0x380000) != 0)
          {
            v11 = (*(_BYTE *)(v4 + 45) & 0x40) != 0 ? v4 : 0;
            if ((*(_BYTE *)(v4 + 45) & 0x40) != 0)
            {
              v12 = *(_DWORD *)(v4 + 16) + 1;
              *(_DWORD *)(v4 + 16) = v12;
              v13 = *(_WORD *)(v4 + 69);
              if ((v13 & 0x20) != 0)
              {
                if ((v13 & 0x10) != 0)
                {
                  {
                    v17 = dword_1ECE91378 + 1;
                  }
                  else
                  {
                    WebCore::continuationChainNodeMap(void)::map = 0;
                    *(_QWORD *)&dword_1ECE91378 = 0;
                    v17 = 1;
                  }
                  dword_1ECE91378 = v17;
                  v18 = *(_QWORD *)(v4 + 8);
                  v19 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
                  v20 = (~(v18 << 32) + v18) ^ ((unint64_t)(~(v18 << 32) + v18) >> 22);
                  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
                  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
                  v23 = v19 & ((v22 >> 31) ^ v22);
                  for (i = 1; ; ++i)
                  {
                    v25 = v23;
                    v26 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v23);
                    if (v26 != -1 && v26 == v18)
                      break;
                    v23 = (v25 + i) & v19;
                  }
                  v28 = *(uint64_t **)(WebCore::continuationChainNodeMap(void)::map + 16 * v25 + 8);
                  while (1)
                  {
                    v28 = (uint64_t *)v28[2];
                    if (!v28)
                      break;
                    v29 = *v28;
                    if (*v28)
                      v29 = *(_QWORD *)(v29 + 8);
                    if (v29 && (*(_BYTE *)(v29 + 45) & 0x20) != 0)
                    {
                      if ((*((_QWORD *)a3 + 2) & 0x280000) == 0x80000)
                      {
                        do
                        {
                          if ((*(_BYTE *)(v29 + 45) & 0x20) == 0)
                            break;
                          if ((*(_BYTE *)(v29 + 22) & 0x80) != 0)
                            goto LABEL_29;
                          v30 = *(_QWORD *)(v29 + 32);
                          if (!v30)
                            break;
                          v29 = *(_QWORD *)(v30 + 8);
                        }
                        while (v29);
                      }
                      break;
                    }
                  }
                }
                WebCore::RenderStyle::createAnonymousStyleWithDisplay((_QWORD *)(v11 + 80), (WTF::StringImpl *)1, a3, (uint64_t)v31);
                v32 = v32 & 0xFFFFFFFFFFC7FFFFLL | (((*((_QWORD *)a2 + 2) >> 19) & 7) << 19);
                WebCore::RenderElement::setStyle(v11, (WebCore::Style *)v31, 0, v14);
                WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v31, v15);
                v12 = *(_DWORD *)(v4 + 16);
              }
LABEL_29:
              if (!v12)
              {
                __break(0xC471u);
                return;
              }
              *(_DWORD *)(v4 + 16) = v12 - 1;
            }
          }
          v16 = *(unsigned int *)(v4 + 47);
          if (v16 | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32))
          {
            v4 = *(_QWORD *)((v16 | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32)) + 8);
            if (v4)
            {
              v5 = *(_BYTE *)(v4 + 45);
              if ((v5 & 4) != 0)
                continue;
            }
          }
          return;
        }
      }
    }
  }
}

uint64_t WebCore::RenderInline::mayAffectLayout(WebCore::RenderInline *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::RenderInline *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BOOL4 v9;
  int v10;
  int v11;
  uint64_t result;
  BOOL v13;
  _DWORD *v14;
  void *v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  int v20;
  float v21;
  float v22;
  char v23;
  uint64_t v24;
  WebCore::RenderElement *v25;
  char *LineStyle;
  WTF::StringImpl *v27;
  char *v28;
  void *v29;
  _DWORD *v30;
  void *v31;
  _DWORD *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  int v35;
  float v36;
  float v37;
  int isCalculatedEqual;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v3 = *(_QWORD *)(v3 + 8);
    v4 = v3 + 80;
  }
  else
  {
    v4 = 80;
  }
  if ((*(_BYTE *)(v3 + 45) & 0x20) != 0)
    v5 = (WebCore::RenderInline *)v3;
  else
    v5 = 0;
  v6 = *((unsigned int *)this + 16);
  if (v6 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)
    && (v7 = *(_BYTE **)((v6 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8)) != 0
    && (v8 = *(unsigned int *)((char *)this + 71), v8 | ((unint64_t)*((unsigned __int8 *)this + 75) << 32))
    && v7 == *(_BYTE **)((v8 | ((unint64_t)*((unsigned __int8 *)this + 75) << 32)) + 8)
    && v7[46] == 17)
  {
    v9 = (v7[52] & 7) != 2 || (v7[53] & 1) == 0;
  }
  else
  {
    v9 = 0;
  }
  v10 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3384);
  if (v5
    && ((WebCore::RenderInline::mayAffectLayout(v5) & 1) != 0
     || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8) + 68) > 0xFu))
  {
    return 1;
  }
  if (*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8) + 68) > 0xFu)
    return 1;
  v11 = (*(_DWORD *)(*((_QWORD *)this + 13) + 228) >> 26) & 7;
  if (v11 == 1)
    return 1;
  if (v11)
    result = 1;
  else
    result = v9;
  if (v11)
    v13 = 0;
  else
    v13 = v10 == 1;
  if (!v13)
    return result;
  v14 = (_DWORD *)WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)(*(_QWORD *)(v4 + 32) + 32), a2);
  v16 = (_DWORD *)WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)(*((_QWORD *)this + 14) + 32), v15);
  if (v14[11] != v16[11])
    return 1;
  if (v14[12] != v16[12])
    return 1;
  if (v14[13] != v16[13])
    return 1;
  v18 = *(unsigned __int8 **)(v4 + 32);
  v19 = (unsigned __int8 *)*((_QWORD *)this + 14);
  v20 = v18[16];
  if (v20 != v19[16] || (v18[17] != 0) != (v19[17] != 0))
    return 1;
  if (v20 == 13)
  {
    if (!v9)
      goto LABEL_40;
    return 1;
  }
  if (v20 == 11)
  {
    if (((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v18 + 12), (const WebCore::Length *)(v19 + 12)) ^ 1 | v9) & 1) == 0)goto LABEL_40;
    return 1;
  }
  v21 = *((float *)v18 + 3);
  if (!v18[18])
    v21 = (float)SLODWORD(v21);
  v22 = *((float *)v19 + 3);
  if (!v19[18])
    v22 = (float)SLODWORD(v22);
  v23 = v21 != v22 || v9;
  if ((v23 & 1) != 0)
    return 1;
LABEL_40:
  v24 = *((_QWORD *)this + 4);
  if (v24)
    v25 = *(WebCore::RenderElement **)(v24 + 8);
  else
    v25 = 0;
  LineStyle = WebCore::RenderElement::firstLineStyle(v25, v17);
  v28 = WebCore::RenderElement::firstLineStyle(this, v27);
  v30 = (_DWORD *)WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)(*((_QWORD *)LineStyle + 4) + 32), v29);
  v32 = (_DWORD *)WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)(*((_QWORD *)v28 + 4) + 32), v31);
  if (v30[11] != v32[11]
    || v30[12] != v32[12]
    || v30[13] != v32[13]
    || *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)v28 + 1) + 8) + 68) > 0xFu)
  {
    return 1;
  }
  v33 = (unsigned __int8 *)*((_QWORD *)LineStyle + 4);
  v34 = (unsigned __int8 *)*((_QWORD *)v28 + 4);
  v35 = v33[16];
  if (v35 != v34[16] || (v33[17] != 0) != (v34[17] != 0))
  {
    isCalculatedEqual = 0;
  }
  else if (v35 == 13)
  {
    isCalculatedEqual = 1;
  }
  else if (v35 == 11)
  {
    isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v33 + 12), (const WebCore::Length *)(v34 + 12));
  }
  else
  {
    v36 = *((float *)v33 + 3);
    if (!v33[18])
      v36 = (float)SLODWORD(v36);
    v37 = *((float *)v34 + 3);
    if (!v34[18])
      v37 = (float)SLODWORD(v37);
    isCalculatedEqual = v36 == v37;
  }
  return isCalculatedEqual ^ 1u;
}

void WebCore::RenderInline::paint(WebCore::RenderInline *this, WebCore::PaintInfo *a2, int32x2_t *a3)
{
  WebCore::LayoutIntegration::LineLayout *v6;

  v6 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing(this, a2);
  if (v6)
    WebCore::LayoutIntegration::LineLayout::paint(v6, (uint64_t)a2, a3, (WebCore::Layout::Box **)this);
  else
    WebCore::RenderLineBoxList::paint((uint64_t)this + 152, this, a2, a3);
}

WTF *WebCore::RenderInline::boundingRects(uint64_t a1, WebCore::RenderObject *a2, unsigned int *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  void *v8;
  float *v9;
  float *v10;
  float v11;
  double v12;
  unsigned int v13;
  double v14;
  unsigned int v15;
  double v16;
  int v17;
  double v18;
  int v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  WTF *result;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 *v33;
  __int128 *v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WebCore::RenderObject *v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v61;
  __int16 v62;
  float v63;
  float v64;
  WebCore::RenderObject *v65;
  int v66;
  unsigned int v67;
  WTF *v68;
  int v69;
  unsigned int v70;
  __int128 v71;

  v6 = WebCore::LayoutIntegration::LineLayout::containing((WebCore::LayoutIntegration::LineLayout *)a1, a2);
  if (v6)
  {
    WebCore::LayoutIntegration::LineLayout::collectInlineBoxRects(v6, (const WebCore::RenderInline *)a1, (uint64_t)&v68);
    if (v70)
    {
      v9 = (float *)v68;
      v10 = (float *)((char *)v68 + 16 * v70);
      do
      {
        v11 = v9[3];
        v12 = *v9 * 64.0;
        v13 = (int)v12;
        if (v12 <= -2147483650.0)
          v13 = 0x80000000;
        if (v12 >= 2147483650.0)
          v13 = 0x7FFFFFFF;
        v14 = v9[1] * 64.0;
        v15 = (int)v14;
        if (v14 <= -2147483650.0)
          v15 = 0x80000000;
        if (v14 >= 2147483650.0)
          v15 = 0x7FFFFFFF;
        v16 = v9[2] * 64.0;
        v17 = (int)v16;
        if (v16 <= -2147483650.0)
          v17 = 0x80000000;
        if (v16 >= 2147483650.0)
          v17 = 0x7FFFFFFF;
        DWORD2(v71) = v17;
        v18 = v11 * 64.0;
        if (v18 >= 2147483650.0)
        {
          v19 = 0x7FFFFFFF;
        }
        else if (v18 <= -2147483650.0)
        {
          v19 = 0x80000000;
        }
        else
        {
          v19 = (int)v18;
        }
        HIDWORD(v71) = v19;
        v20 = a3[1];
        v21 = __OFADD__(v13, *a3);
        v22 = v13 + *a3;
        v23 = (v13 >> 31) + 0x7FFFFFFF;
        if (!v21)
          v23 = v22;
        v21 = __OFADD__(v15, v20);
        v24 = v15 + v20;
        v25 = (v15 >> 31) + 0x7FFFFFFF;
        if (!v21)
          v25 = v24;
        *(_QWORD *)&v71 = __PAIR64__(v25, v23);
        v26 = *((unsigned int *)a2 + 3);
        if ((_DWORD)v26 == *((_DWORD *)a2 + 2))
        {
          v33 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, v26 + 1, (unint64_t)&v71);
          v26 = *((unsigned int *)a2 + 3);
          v27 = *(_QWORD *)a2;
          v28 = *v33;
        }
        else
        {
          v27 = *(_QWORD *)a2;
          v28 = v71;
        }
        *(_OWORD *)(v27 + 16 * v26) = v28;
        ++*((_DWORD *)a2 + 3);
        v9 += 4;
      }
      while (v9 != v10);
    }
    else
    {
      *((_QWORD *)&v71 + 1) = 0;
      *(_QWORD *)&v71 = *(_QWORD *)a3;
      v30 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v30 == *((_DWORD *)a2 + 2))
      {
        v34 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, v30 + 1, (unint64_t)&v71);
        v30 = *((unsigned int *)a2 + 3);
        v31 = *(_QWORD *)a2;
        v32 = *v34;
      }
      else
      {
        v31 = *(_QWORD *)a2;
        v32 = v71;
      }
      *(_OWORD *)(v31 + 16 * v30) = v32;
      ++*((_DWORD *)a2 + 3);
    }
    result = v68;
    if (v68)
    {
      v68 = 0;
      v69 = 0;
      result = (WTF *)WTF::fastFree(result, v8);
    }
  }
  else
  {
    v61 = *(_QWORD *)(a1 + 152);
    if (v61)
    {
      do
      {
        v62 = *(_WORD *)(v61 + 52);
        if ((v62 & 0x800) != 0)
        {
          v63 = *(float *)(v61 + 40);
        }
        else
        {
          v63 = WebCore::LegacyInlineBox::logicalHeight((WebCore::LegacyInlineBox *)v61, v7);
          v62 = *(_WORD *)(v61 + 52);
        }
        if ((v62 & 0x800) != 0)
          v64 = WebCore::LegacyInlineBox::logicalHeight((WebCore::LegacyInlineBox *)v61, v7);
        else
          v64 = *(float *)(v61 + 40);
        *(_QWORD *)&v71 = *(_QWORD *)(v61 + 44);
        *((_QWORD *)&v71 + 1) = __PAIR64__(LODWORD(v64), LODWORD(v63));
        result = (WTF *)WebCore::AbsoluteRectsGeneratorContext::addRect(a2, (const WebCore::FloatRect *)*a3, a3[1], (const WebCore::FloatRect *)&v71);
        v61 = *(_QWORD *)(v61 + 96);
      }
      while (v61);
    }
    else
    {
      v71 = 0uLL;
      result = (WTF *)WebCore::AbsoluteRectsGeneratorContext::addRect(a2, (const WebCore::FloatRect *)*a3, a3[1], (const WebCore::FloatRect *)&v71);
    }
  }
  if ((*(_WORD *)(a1 + 69) & 0x10) != 0)
  {
    ++dword_1ECE91378;
    v35 = *(_QWORD *)(a1 + 8);
    v36 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
    v37 = (~(v35 << 32) + v35) ^ ((unint64_t)(~(v35 << 32) + v35) >> 22);
    v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
    v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
    v40 = v36 & ((v39 >> 31) ^ v39);
    v41 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v40);
    if (v41 == -1 || v41 != v35)
    {
      v58 = 1;
      do
      {
        v40 = ((_DWORD)v40 + v58) & v36;
        v59 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v40);
        ++v58;
      }
      while (v59 == -1 || v59 != v35);
    }
    v43 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v40 + 8) + 16);
    if (v43)
    {
      v44 = *v43;
      if (v44)
      {
        v45 = *(_QWORD *)(v44 + 8);
        if (v45)
        {
          if ((*(_BYTE *)(v45 + 45) & 4) != 0)
          {
            v46 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)a1);
            v48 = *((_DWORD *)v46 + 38);
            v47 = *((_DWORD *)v46 + 39);
            v49 = a3[1];
            v21 = __OFSUB__(*a3, v48);
            v50 = *a3 - v48;
            if (v21)
              v50 = (*a3 >> 31) + 0x7FFFFFFF;
            v21 = __OFSUB__(v49, v47);
            v51 = v49 - v47;
            if (v21)
              v51 = (v49 >> 31) + 0x7FFFFFFF;
            v53 = *(_DWORD *)(v45 + 152);
            v52 = *(_DWORD *)(v45 + 156);
            v21 = __OFADD__(v50, v53);
            v54 = v50 + v53;
            LODWORD(v55) = (v50 >> 31) + 0x7FFFFFFF;
            if (v21)
              v55 = v55;
            else
              v55 = v54;
            v21 = __OFADD__(v51, v52);
            v56 = v51 + v52;
            LODWORD(v57) = (v51 >> 31) + 0x7FFFFFFF;
            if (v21)
              v57 = v57;
            else
              v57 = v56;
          }
          else
          {
            v65 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)a1);
            LODWORD(v55) = *((_DWORD *)v65 + 38);
            v66 = *((_DWORD *)v65 + 39);
            v67 = a3[1];
            v21 = __OFSUB__(*a3, (_DWORD)v55);
            LODWORD(v55) = *a3 - v55;
            if (v21)
              v55 = (*a3 >> 31) + 0x7FFFFFFF;
            else
              v55 = v55;
            v21 = __OFSUB__(v67, v66);
            LODWORD(v57) = v67 - v66;
            if (v21)
              v57 = (v67 >> 31) + 0x7FFFFFFF;
            else
              v57 = v57;
          }
          *(_QWORD *)&v71 = v55 | (v57 << 32);
          return (WTF *)(*(uint64_t (**)(uint64_t, WebCore::RenderObject *, __int128 *))(*(_QWORD *)v45 + 384))(v45, a2, &v71);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderInline::absoluteQuads(WebCore::RenderBoxModelObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  (*(void (**)(WebCore::RenderBoxModelObject *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 1168))(a1, v7, a2, a3);
  result = WebCore::RenderBoxModelObject::continuation(a1);
  if (result)
    return WebCore::RenderBoxModelObject::collectAbsoluteQuadsForContinuation((uint64_t)a1, a2, a3);
  return result;
}

void WebCore::RenderInline::absoluteQuadsIgnoringContinuation(const WebCore::RenderObject *a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;

  WebCore::RenderGeometryMap::~RenderGeometryMap((WebCore::RenderGeometryMap *)&v6, v4);
}

void WebCore::RenderInline::generateLineBoxRects<WebCore::`anonymous namespace'::AbsoluteQuadsGeneratorContext>(WebCore::LayoutIntegration::LineLayout *a1, WebCore::RenderObject *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF *v6;
  uint64_t v7;
  __int128 v8;
  void *v9;
  WTF *v10;
  uint64_t v11;
  float v12;
  unsigned int v13;
  __int128 v14;
  WTF *v15;
  unint64_t v16;

  v4 = WebCore::LayoutIntegration::LineLayout::containing(a1, a2);
  if (v4)
  {
    WebCore::LayoutIntegration::LineLayout::collectInlineBoxRects(v4, a1, (uint64_t)&v15);
    if (HIDWORD(v16))
    {
      v6 = v15;
      v7 = 16 * HIDWORD(v16);
      do
      {
        v8 = *(_OWORD *)v6;
        v6 = (WTF *)((char *)v6 + 16);
        v14 = v8;
        v7 -= 16;
      }
      while (v7);
    }
    else
    {
      v14 = 0uLL;
    }
    v10 = v15;
    if (v15)
    {
      v15 = 0;
      LODWORD(v16) = 0;
      WTF::fastFree(v10, v9);
    }
  }
  else
  {
    v11 = *((_QWORD *)a1 + 19);
    if (v11)
    {
      do
      {
        v12 = WebCore::LegacyInlineBox::size((WebCore::LegacyInlineBox *)v11, v5);
        v15 = *(WTF **)(v11 + 44);
        v16 = __PAIR64__(v13, LODWORD(v12));
        v11 = *(_QWORD *)(v11 + 96);
      }
      while (v11);
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
  }
}

WTF *WebCore::RenderInline::absoluteQuadsForSelection(const WebCore::RenderObject *a1, uint64_t a2)
{
  void *v3;
  WTF *result;
  uint64_t v6;
  WTF **v7;
  WTF *v8;
  _BYTE v9[32];
  WTF *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;

  if (v12)
  {
    v6 = 32 * v12;
    v7 = (WTF **)((char *)v10 + 16);
    do
    {
      v8 = *v7;
      *v7 = 0;
      if (v8)
        WTF::fastFree(v8, v3);
      v7 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  result = v10;
  if (&v13 != (uint64_t *)v10 && v10 != 0)
  {
    v10 = 0;
    v11 = 0;
    return (WTF *)WTF::fastFree(result, v3);
  }
  return result;
}

unint64_t WebCore::RenderInline::offsetLeft(WebCore::RenderInline *this, WebCore::RenderObject *a2)
{
  WebCore::LayoutIntegration::LineLayout *v3;
  unint64_t InlineBoxRect;
  unint64_t v5;
  float v6;
  float v7;
  int v8;
  float v9;
  unint64_t v11;

  v3 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing(this, a2);
  if (v3)
  {
    InlineBoxRect = WebCore::LayoutIntegration::LineLayout::firstInlineBoxRect(v3, this);
    v5 = InlineBoxRect & 0xFFFFFFFF00000000;
  }
  else
  {
    InlineBoxRect = *((_QWORD *)this + 19);
    if (InlineBoxRect)
    {
      v6 = floorf(WebCore::LegacyInlineBox::locationIncludingFlipping((WebCore::LegacyInlineBox *)InlineBoxRect) * 64.0);
      if (v6 >= 2147500000.0)
      {
        v8 = 0x7FFFFFFF;
      }
      else if (v6 <= -2147500000.0)
      {
        v8 = 0x80000000;
      }
      else
      {
        v8 = (int)v6;
      }
      v9 = floorf(v7 * 64.0);
      if (v9 >= 2147500000.0)
      {
        v5 = 0x7FFFFFFF00000000;
      }
      else if (v9 <= -2147500000.0)
      {
        v5 = 0x8000000000000000;
      }
      else
      {
        v5 = (unint64_t)(int)v9 << 32;
      }
      LODWORD(InlineBoxRect) = v5 | v8;
    }
    else
    {
      v5 = 0;
    }
  }
  v11 = v5 | InlineBoxRect;
  return WebCore::RenderBoxModelObject::adjustedPositionRelativeToOffsetParent(this, (const WebCore::LayoutPoint *)&v11);
}

unint64_t WebCore::RenderInline::offsetTop(WebCore::RenderInline *this, WebCore::RenderObject *a2)
{
  WebCore::LayoutIntegration::LineLayout *v3;
  unint64_t InlineBoxRect;
  unint64_t v5;
  float v6;
  float v7;
  int v8;
  float v9;
  unint64_t v11;

  v3 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing(this, a2);
  if (v3)
  {
    InlineBoxRect = WebCore::LayoutIntegration::LineLayout::firstInlineBoxRect(v3, this);
    v5 = InlineBoxRect & 0xFFFFFFFF00000000;
  }
  else
  {
    InlineBoxRect = *((_QWORD *)this + 19);
    if (InlineBoxRect)
    {
      v6 = floorf(WebCore::LegacyInlineBox::locationIncludingFlipping((WebCore::LegacyInlineBox *)InlineBoxRect) * 64.0);
      if (v6 >= 2147500000.0)
      {
        v8 = 0x7FFFFFFF;
      }
      else if (v6 <= -2147500000.0)
      {
        v8 = 0x80000000;
      }
      else
      {
        v8 = (int)v6;
      }
      v9 = floorf(v7 * 64.0);
      if (v9 >= 2147500000.0)
      {
        v5 = 0x7FFFFFFF00000000;
      }
      else if (v9 <= -2147500000.0)
      {
        v5 = 0x8000000000000000;
      }
      else
      {
        v5 = (unint64_t)(int)v9 << 32;
      }
      LODWORD(InlineBoxRect) = v5 | v8;
    }
    else
    {
      v5 = 0;
    }
  }
  v11 = v5 | InlineBoxRect;
  return WebCore::RenderBoxModelObject::adjustedPositionRelativeToOffsetParent(this, (const WebCore::LayoutPoint *)&v11) >> 32;
}

uint64_t WebCore::RenderInline::marginStart(WebCore::RenderInline *this, const WebCore::RenderStyle *a2)
{
  const WebCore::RenderStyle *v2;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float v11;
  float v12;
  double v13;
  WebCore::RenderBox *v15;
  int v16;
  BOOL v17;
  unsigned __int8 *v18;

  if (a2)
    v2 = a2;
  else
    v2 = (WebCore::RenderInline *)((char *)this + 80);
  v3 = *((_DWORD *)v2 + 10);
  v4 = *((_DWORD *)v2 + 11);
  v5 = (v3 >> 26) & 1;
  v6 = (unsigned __int16)v4 >> 13;
  if ((v6 - 2) >= 2)
  {
    if (v6 == 4)
    {
      v5 = (v3 & 0x4000000) == 0;
    }
    else if (v6 != 5)
    {
      v7 = 3;
      if ((v3 & 0x4000000) != 0)
        v7 = 1;
      goto LABEL_9;
    }
  }
  v17 = v5 == 0;
  v7 = 2;
  if (v17)
    v7 = 0;
LABEL_9:
  v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 40 + 8 * v7;
  v9 = *(unsigned __int8 *)(v8 + 4);
  if ((_DWORD)v9 == 4)
  {
    v10 = *(unsigned __int8 *)(v8 + 6);
    v11 = *(float *)v8;
    v12 = *(float *)v8;
    if (!v10)
      v11 = (float)SLODWORD(v12);
    v13 = v11 * 64.0;
    if (v13 >= 2147483650.0)
      return 0x7FFFFFFFLL;
    if (v13 <= -2147483650.0)
      return 0x80000000;
    return (int)v13;
  }
  v18 = (unsigned __int8 *)v8;
  if (!*(_BYTE *)(v8 + 4))
    return v9;
  if ((v9 & 0xFFFFFFF7) != 3)
    return 0;
  v15 = WebCore::RenderObject::containingBlock(this);
  v16 = WebCore::RenderBox::contentLogicalWidth(v15);
  return WebCore::minimumValueForLength(v18, v16 & ~(v16 >> 31));
}

uint64_t WebCore::RenderInline::marginEnd(WebCore::RenderInline *this, const WebCore::RenderStyle *a2)
{
  const WebCore::RenderStyle *v2;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float v11;
  float v12;
  double v13;
  WebCore::RenderBox *v15;
  int v16;
  BOOL v17;
  unsigned __int8 *v18;

  if (a2)
    v2 = a2;
  else
    v2 = (WebCore::RenderInline *)((char *)this + 80);
  v3 = *((_DWORD *)v2 + 10);
  v4 = *((_DWORD *)v2 + 11);
  v5 = (v3 >> 26) & 1;
  v6 = (unsigned __int16)v4 >> 13;
  if ((v6 - 2) >= 2)
  {
    if (v6 == 4)
    {
      v5 = (v3 & 0x4000000) == 0;
    }
    else if (v6 != 5)
    {
      v7 = 3;
      if ((v3 & 0x4000000) == 0)
        v7 = 1;
      goto LABEL_9;
    }
  }
  v17 = v5 == 0;
  v7 = 2;
  if (!v17)
    v7 = 0;
LABEL_9:
  v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 40 + 8 * v7;
  v9 = *(unsigned __int8 *)(v8 + 4);
  if ((_DWORD)v9 == 4)
  {
    v10 = *(unsigned __int8 *)(v8 + 6);
    v11 = *(float *)v8;
    v12 = *(float *)v8;
    if (!v10)
      v11 = (float)SLODWORD(v12);
    v13 = v11 * 64.0;
    if (v13 >= 2147483650.0)
      return 0x7FFFFFFFLL;
    if (v13 <= -2147483650.0)
      return 0x80000000;
    return (int)v13;
  }
  v18 = (unsigned __int8 *)v8;
  if (!*(_BYTE *)(v8 + 4))
    return v9;
  if ((v9 & 0xFFFFFFF7) != 3)
    return 0;
  v15 = WebCore::RenderObject::containingBlock(this);
  v16 = WebCore::RenderBox::contentLogicalWidth(v15);
  return WebCore::minimumValueForLength(v18, v16 & ~(v16 >> 31));
}

uint64_t WebCore::RenderInline::marginBefore(WebCore::RenderInline *this, const WebCore::RenderStyle *a2)
{
  const WebCore::RenderStyle *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  float v10;
  float v11;
  BOOL v12;
  double v13;
  WebCore::RenderBox *v14;
  int v15;
  int v16;
  int v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::Length *v21;
  unsigned __int8 *v22;

  if (a2)
    v3 = a2;
  else
    v3 = (WebCore::RenderInline *)((char *)this + 80);
  v4 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v5 = ((unsigned __int16)*((_DWORD *)v3 + 11) >> 13) - 1;
  if (v5 > 4)
    v6 = 0;
  else
    v6 = qword_1969FCC40[v5];
  v7 = v4 + 40;
  v8 = v4 + 40 + 8 * v6;
  result = *(unsigned __int8 *)(v8 + 4);
  if ((_DWORD)result == 4)
  {
    v10 = *(float *)v8;
    v11 = (float)*(int *)v8;
    v12 = *(_BYTE *)(v8 + 6) == 0;
    goto LABEL_9;
  }
  v22 = (unsigned __int8 *)(v8 + 4);
  v19 = v7;
  v20 = v6;
  v21 = (WebCore::Length *)v8;
  if (!*(_BYTE *)(v8 + 4))
    return result;
  if ((result & 0xFFFFFFF7) != 3)
    return 0;
  v14 = WebCore::RenderObject::containingBlock(this);
  v15 = WebCore::RenderBox::contentLogicalWidth(v14);
  v16 = *v22;
  if (v16 == 4)
  {
    v10 = *(float *)v21;
    v11 = (float)*(int *)v21;
    v12 = *(_BYTE *)(v19 + 8 * v20 + 6) == 0;
LABEL_9:
    if (v12)
      v10 = v11;
    goto LABEL_11;
  }
  v17 = v15 & ~(v15 >> 31);
  if (v16 == 3)
  {
    v18 = *(float *)v21;
    if (!*(_BYTE *)(v19 + 8 * v20 + 6))
      v18 = (float)*(int *)v21;
    v10 = (float)((float)((float)v17 * 0.015625) * v18) / 100.0;
    goto LABEL_11;
  }
  if (v16 != 11)
    return 0;
  WebCore::Length::nonNanCalculatedValue(v21, (float)v17 * 0.015625);
LABEL_11:
  v13 = v10 * 64.0;
  if (v13 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v13 <= -2147483650.0)
    return 0x80000000;
  return (int)v13;
}

uint64_t WebCore::RenderInline::marginAfter(WebCore::RenderInline *this, const WebCore::RenderStyle *a2)
{
  const WebCore::RenderStyle *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  float v10;
  float v11;
  BOOL v12;
  double v13;
  WebCore::RenderBox *v14;
  int v15;
  int v16;
  int v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::Length *v21;
  unsigned __int8 *v22;

  if (a2)
    v3 = a2;
  else
    v3 = (WebCore::RenderInline *)((char *)this + 80);
  v4 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v5 = ((unsigned __int16)*((_DWORD *)v3 + 11) >> 13) - 1;
  if (v5 > 4)
    v6 = 2;
  else
    v6 = qword_1969FCC68[v5];
  v7 = v4 + 40;
  v8 = v4 + 40 + 8 * v6;
  result = *(unsigned __int8 *)(v8 + 4);
  if ((_DWORD)result == 4)
  {
    v10 = *(float *)v8;
    v11 = (float)*(int *)v8;
    v12 = *(_BYTE *)(v8 + 6) == 0;
    goto LABEL_9;
  }
  v22 = (unsigned __int8 *)(v8 + 4);
  v19 = v7;
  v20 = v6;
  v21 = (WebCore::Length *)v8;
  if (!*(_BYTE *)(v8 + 4))
    return result;
  if ((result & 0xFFFFFFF7) != 3)
    return 0;
  v14 = WebCore::RenderObject::containingBlock(this);
  v15 = WebCore::RenderBox::contentLogicalWidth(v14);
  v16 = *v22;
  if (v16 == 4)
  {
    v10 = *(float *)v21;
    v11 = (float)*(int *)v21;
    v12 = *(_BYTE *)(v19 + 8 * v20 + 6) == 0;
LABEL_9:
    if (v12)
      v10 = v11;
    goto LABEL_11;
  }
  v17 = v15 & ~(v15 >> 31);
  if (v16 == 3)
  {
    v18 = *(float *)v21;
    if (!*(_BYTE *)(v19 + 8 * v20 + 6))
      v18 = (float)*(int *)v21;
    v10 = (float)((float)((float)v17 * 0.015625) * v18) / 100.0;
    goto LABEL_11;
  }
  if (v16 != 11)
    return 0;
  WebCore::Length::nonNanCalculatedValue(v21, (float)v17 * 0.015625);
LABEL_11:
  v13 = v10 * 64.0;
  if (v13 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v13 <= -2147483650.0)
    return 0x80000000;
  return (int)v13;
}

const char *WebCore::RenderInline::renderName(WebCore::RenderInline *this)
{
  int v1;
  unsigned __int16 *v4;

  v1 = *((_DWORD *)this + 5) & 0x1800000;
  if (v1 == 0x800000)
    return "RenderInline (relative positioned)";
  if (v1 == 25165824)
    return "RenderInline (sticky positioned)";
  if ((*((_BYTE *)this + 45) & 1) != 0)
    return "RenderInline (generated)";
  v4 = *(unsigned __int16 **)(*((_QWORD *)this + 3) + 8);
  if (v4)
  {
    if ((~v4[14] & 0x408) == 0
      && ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v4 + 368))(v4)
       || (*((_BYTE *)this + 45) & 1) != 0))
    {
      return "RenderInline (generated)";
    }
  }
  return "RenderInline";
}

uint64_t WebCore::RenderInline::nodeAtPoint(WebCore::LayoutIntegration::LineLayout *a1, WebCore::RenderObject *a2, uint64_t a3, unsigned int *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v12;

  v12 = WebCore::LayoutIntegration::LineLayout::containing(a1, a2);
  if (v12)
    return WebCore::LayoutIntegration::LineLayout::hitTest(v12, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, (uint64_t)a1);
  else
    return WebCore::RenderLineBoxList::hitTest((_QWORD *)a1 + 19, a1, (uint64_t)a2, a3, a4, a5, a6);
}

unsigned int *WebCore::RenderInline::positionForPoint@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  WebCore::RenderObject *v10;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  uint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  WebCore::RenderObject *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  int i;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v44;
  int v45;
  int v46;
  int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v10 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)a1);
  if ((*(_WORD *)(a1 + 69) & 0x10) == 0)
    return (unsigned int *)(*(uint64_t (**)(WebCore::RenderObject *, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)v10 + 352))(v10, a2, a3, a4);
  ++dword_1ECE91378;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
  v14 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = v13 & ((v16 >> 31) ^ v16);
  v18 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v17);
  if (v18 == -1 || v18 != v12)
  {
    v20 = 1;
    do
    {
      v17 = ((_DWORD)v17 + v20) & v13;
      v21 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v17);
      ++v20;
    }
    while (v21 == -1 || v21 != v12);
  }
  v23 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v17 + 8) + 16);
  if (!v23)
    return (unsigned int *)(*(uint64_t (**)(WebCore::RenderObject *, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)v10 + 352))(v10, a2, a3, a4);
  v24 = *v23;
  if (!v24)
    return (unsigned int *)(*(uint64_t (**)(WebCore::RenderObject *, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)v10 + 352))(v10, a2, a3, a4);
  v25 = *(_QWORD *)(v24 + 8);
  if (!v25)
    return (unsigned int *)(*(uint64_t (**)(WebCore::RenderObject *, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)v10 + 352))(v10, a2, a3, a4);
  v27 = *((_DWORD *)v10 + 38);
  v26 = *((_DWORD *)v10 + 39);
  v28 = v27 + *a2;
  if (__OFADD__(v27, *a2))
    v28 = (v27 >> 31) + 0x7FFFFFFF;
  v29 = a2[1];
  v30 = v26 + v29;
  if (__OFADD__(v26, v29))
    v30 = (v26 >> 31) + 0x7FFFFFFF;
LABEL_20:
  if ((*(_BYTE *)(v25 + 20) & 1) != 0)
  {
    v31 = (WebCore::RenderObject *)v25;
    if ((*(_BYTE *)(v25 + 45) & 0x40) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1963DCB20);
    }
  }
  else
  {
    v31 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v25);
    if ((*(_BYTE *)(v25 + 20) & 1) == 0)
      goto LABEL_45;
  }
  v32 = *(unsigned int *)(v25 + 64);
  if (v32 | ((unint64_t)*(unsigned __int8 *)(v25 + 68) << 32)
    && *(_QWORD *)((v32 | ((unint64_t)*(unsigned __int8 *)(v25 + 68) << 32)) + 8))
  {
LABEL_45:
    v47 = *((_DWORD *)v31 + 38);
    v46 = *((_DWORD *)v31 + 39);
    v48 = __OFSUB__(v28, v47);
    LODWORD(v49) = v28 - v47;
    if (v48)
      v49 = (v28 >> 31) + 0x7FFFFFFF;
    else
      v49 = v49;
    v48 = __OFSUB__(v30, v46);
    LODWORD(v50) = v30 - v46;
    if (v48)
      v50 = (v30 >> 31) + 0x7FFFFFFF;
    else
      v50 = v50;
    v51 = v49 | (v50 << 32);
    return (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v25 + 352))(v25, &v51, a3, a4);
  }
  if ((*(_WORD *)(v25 + 69) & 0x10) != 0)
  {
    {
      v33 = dword_1ECE91378 + 1;
    }
    else
    {
      WebCore::continuationChainNodeMap(void)::map = 0;
      *(_QWORD *)&dword_1ECE91378 = 0;
      v33 = 1;
    }
    dword_1ECE91378 = v33;
    v34 = *(_QWORD *)(v25 + 8);
    v35 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
    v36 = (~(v34 << 32) + v34) ^ ((unint64_t)(~(v34 << 32) + v34) >> 22);
    v37 = 9 * ((v36 + ~(v36 << 13)) ^ ((v36 + ~(v36 << 13)) >> 8));
    v38 = (v37 ^ (v37 >> 15)) + ~((v37 ^ (v37 >> 15)) << 27);
    v39 = v35 & ((v38 >> 31) ^ v38);
    for (i = 1; ; ++i)
    {
      v41 = v39;
      v42 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v39);
      if (v42 != -1 && v42 == v34)
        break;
      v39 = (v41 + i) & v35;
    }
    v44 = *(_QWORD **)(WebCore::continuationChainNodeMap(void)::map + 16 * v41 + 8);
    while (1)
    {
      v44 = (_QWORD *)v44[2];
      if (!v44)
        break;
      if (*v44)
        v25 = *(_QWORD *)(*v44 + 8);
      else
        v25 = 0;
      if (v25 && (*(_BYTE *)(v25 + 45) & 0x20) != 0)
        goto LABEL_20;
    }
  }
  v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 528))(a1);
  return WebCore::RenderObject::createVisiblePosition((unsigned int *)a1, v45, 1, a5);
}

uint64_t WebCore::RenderInline::innerPaddingBoxWidth(WebCore::RenderInline *this, WebCore::RenderObject *a2)
{
  uint64_t (**v2)();
  double v3;
  WebCore::RenderObject *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  float v11;
  double v12;
  int v13;
  uint64_t v14;
  double v15;
  unsigned int v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  double v22;
  unsigned int v23;
  uint64_t i;
  uint64_t v25;
  int v26;
  char v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  int v36;
  float v37;
  float v38;
  double v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  int v53;
  float v54;
  float v55;
  double v56;
  unsigned int v57;
  int v58;
  float v59;
  float v60;
  float v61;
  float v62;
  double v63;
  BOOL v64;
  int v65;
  double v67;
  uint64_t v68;
  double v69;
  int v70;
  int v71;
  unsigned int v72;
  _BYTE v73[16];
  int v74;
  unint64_t v75[2];
  unsigned int v76;
  _QWORD v77[2];
  int v78;
  char v79;
  char *v80;

  if (WebCore::LayoutIntegration::LineLayout::containing(this, a2))
  {
    v6 = WebCore::LayoutIntegration::LineLayout::containing(this, v5);
    if (v6)
    {
      WebCore::LayoutIntegration::LineLayout::firstInlineBoxFor(v6, this, v75);
    }
    else
    {
      v75[0] = *((_QWORD *)this + 19);
      v76 = 1;
    }
    if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v75) & 1) == 0)
    {
      if ((*((_BYTE *)this + 123) & 4) != 0)
      {
        if (v76 != -1)
        {
          v77[0] = v73;
          if ((((uint64_t (*)(_QWORD *, unint64_t *))off_1E3428F70[v76])(v77, v75) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1963DD464);
          }
          if (v76 != -1)
          {
            v77[0] = v73;
            ((void (*)(_QWORD *, unint64_t *))off_1E3428F38[v76])(v77, v75);
            if (v76 != -1)
            {
              v32 = v28;
              v33 = v29;
              v34 = v30;
              v35 = v31;
              v77[0] = v73;
              v36 = ((uint64_t (*)(_QWORD *, unint64_t *))off_1E3428F48[v76])(v77, v75);
              v37 = v36 ? v34 : v35;
              v38 = v36 ? v32 : v33;
              v39 = (float)((float)(v38 + v37)
                          + (float)((float)(*(int (**)(WebCore::RenderInline *))(*(_QWORD *)this + 1064))(this)
                                  * -0.015625))
                  * 64.0;
              if (v39 >= 2147483650.0)
                v40 = 0x7FFFFFFF;
              else
                v40 = v39 <= -2147483650.0 ? 0x80000000 : (int)v39;
              v72 = v40;
              v41 = v76;
              if (v76 != -1)
              {
                v2 = off_1E3428F28;
                while (1)
                {
                  v77[0] = &v80;
                  if ((((uint64_t (*)(_QWORD *, unint64_t *))off_1E3428F70[v41])(v77, v75) & 1) == 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1963DD424);
                  }
                  LOBYTE(v77[0]) = 0;
                  v78 = -1;
                  v42 = v76;
                  if (v76 == -1)
                    break;
                  ((void (*)(char **, _QWORD *, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v76])(&v80, v77, v75);
                  v78 = v42;
                  v80 = &v79;
                  ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator21traverseNextInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v42])(&v80, v77);
                  v73[0] = 0;
                  v74 = -1;
                  v43 = v78;
                  if (v78 != -1)
                  {
                    ((void (*)(char **, _BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v78])(&v80, v73, v77);
                    v74 = v43;
                    if (v78 != -1)
                      ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v78])(&v80, v77);
                  }
                  v44 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v73);
                  if (v74 != -1)
                    ((void (*)(_QWORD *, _BYTE *))off_1E3428F28[v74])(v77, v73);
                  if ((v44 & 1) != 0)
                  {
                    if (v76 != -1)
                    {
                      v77[0] = v73;
                      if ((((uint64_t (*)(_QWORD *, unint64_t *))off_1E3428F70[v76])(v77, v75) & 1) == 0)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1963DD4A4);
                      }
                      if (v76 != -1)
                      {
                        v77[0] = v73;
                        ((void (*)(_QWORD *, unint64_t *))off_1E3428F38[v76])(v77, v75);
                        if (v76 != -1)
                        {
                          v61 = v59;
                          v62 = v60;
                          v77[0] = v73;
                          if (!((unsigned int (*)(_QWORD *, unint64_t *))off_1E3428F48[v76])(v77, v75))v61 = v62;
                          v63 = (float)(v61
                                      + (float)((float)(*(int (**)(WebCore::RenderInline *))(*(_QWORD *)this + 1072))(this)
                                              * 0.015625))
                              * 64.0;
                          if (v63 >= 2147483650.0)
                          {
                            v58 = 0x7FFFFFFF;
                            v57 = v72;
                          }
                          else
                          {
                            v57 = v72;
                            if (v63 <= -2147483650.0)
                              v58 = 0x80000000;
                            else
                              v58 = (int)v63;
                          }
                          goto LABEL_97;
                        }
                      }
                    }
                    goto LABEL_73;
                  }
                  if (v76 != -1)
                  {
                    v77[0] = v73;
                    ((void (*)(_QWORD *, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator21traverseNextInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v76])(v77, v75);
                    v41 = v76;
                    if (v76 != -1)
                      continue;
                  }
                  goto LABEL_73;
                }
              }
            }
          }
        }
      }
      else if (v76 != -1)
      {
        v77[0] = v73;
        v2 = off_1E3428F70;
        if ((((uint64_t (*)(_QWORD *, unint64_t *))off_1E3428F70[v76])(v77, v75) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1963DD444);
        }
        if (v76 != -1)
        {
          v77[0] = v73;
          ((void (*)(_QWORD *, unint64_t *))off_1E3428F38[v76])(v77, v75);
          if (v76 != -1)
          {
            v20 = v18;
            v21 = v19;
            v77[0] = v73;
            if (!((unsigned int (*)(_QWORD *, unint64_t *))off_1E3428F48[v76])(v77, v75))
              v20 = v21;
            v22 = (float)(v20
                        + (float)((float)(*(int (**)(WebCore::RenderInline *))(*(_QWORD *)this + 1064))(this)
                                * 0.015625))
                * 64.0;
            v3 = 2147483650.0;
            if (v22 >= 2147483650.0)
              v23 = 0x7FFFFFFF;
            else
              v23 = v22 <= -2147483650.0 ? 0x80000000 : (int)v22;
            v72 = v23;
            for (i = v76; v76 != -1; i = v76)
            {
              v77[0] = &v80;
              if ((((uint64_t (*)(_QWORD *, unint64_t *))off_1E3428F70[i])(v77, v75) & 1) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x1963DD404);
              }
              LOBYTE(v77[0]) = 0;
              v78 = -1;
              v25 = v76;
              if (v76 == -1)
                break;
              ((void (*)(char **, _QWORD *, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v76])(&v80, v77, v75);
              v78 = v25;
              v80 = &v79;
              ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator21traverseNextInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v25])(&v80, v77);
              v73[0] = 0;
              v74 = -1;
              v26 = v78;
              if (v78 != -1)
              {
                ((void (*)(char **, _BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v78])(&v80, v73, v77);
                v74 = v26;
                if (v78 != -1)
                  ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v78])(&v80, v77);
              }
              v27 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v73);
              if (v74 != -1)
                ((void (*)(_QWORD *, _BYTE *))off_1E3428F28[v74])(v77, v73);
              if ((v27 & 1) != 0)
                goto LABEL_74;
              if (v76 == -1)
                break;
              v77[0] = v73;
              ((void (*)(_QWORD *, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator21traverseNextInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v76])(v77, v75);
            }
          }
        }
      }
      while (1)
      {
LABEL_73:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_74:
        if (v76 != -1)
        {
          v77[0] = v73;
          if ((((uint64_t (*)(_QWORD *, unint64_t *))v2[v76])(v77, v75) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1963DD484);
          }
          if (v76 != -1)
          {
            v77[0] = v73;
            ((void (*)(_QWORD *, unint64_t *))off_1E3428F38[v76])(v77, v75);
            if (v76 != -1)
              break;
          }
        }
      }
      v49 = v45;
      v50 = v46;
      v51 = v47;
      v52 = v48;
      v77[0] = v73;
      v53 = ((uint64_t (*)(_QWORD *, unint64_t *))off_1E3428F48[v76])(v77, v75);
      if (v53)
        v54 = v51;
      else
        v54 = v52;
      if (v53)
        v55 = v49;
      else
        v55 = v50;
      v56 = (float)((float)(v55 + v54)
                  + (float)((float)(*(int (**)(WebCore::RenderInline *))(*(_QWORD *)this + 1072))(this)
                          * -0.015625))
          * 64.0;
      if (v56 >= v3)
      {
        v57 = 0x7FFFFFFF;
      }
      else if (v56 <= -2147483650.0)
      {
        v57 = 0x80000000;
      }
      else
      {
        v57 = (int)v56;
      }
      v58 = v72;
LABEL_97:
      v64 = __OFSUB__(v57, v58);
      v65 = v57 - v58;
      if (v64)
        v65 = (v57 >> 31) + 0x7FFFFFFF;
      v17 = v65 & ~(v65 >> 31);
      if (v76 != -1)
        ((void (*)(_QWORD *, unint64_t *))off_1E3428F28[v76])(v77, v75);
      return v17;
    }
    if (v76 != -1)
      ((void (*)(_QWORD *, unint64_t *))off_1E3428F28[v76])(v77, v75);
    return 0;
  }
  v8 = *((_QWORD *)this + 19);
  v7 = *((_QWORD *)this + 20);
  if (v8)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (v9)
    return 0;
  v10 = 44;
  if ((*(_WORD *)(v8 + 52) & 0x800) == 0)
    v10 = 48;
  v11 = *(float *)(v8 + v10);
  if ((*((_BYTE *)this + 123) & 4) != 0)
  {
    v67 = (float)(v11 + *(float *)(v8 + 40)) * 64.0;
    if (v67 >= 2147483650.0)
    {
      v16 = 0x7FFFFFFF;
    }
    else if (v67 <= -2147483650.0)
    {
      v16 = 0x80000000;
    }
    else
    {
      v16 = (int)v67;
    }
    v68 = 44;
    if ((*(_WORD *)(v7 + 52) & 0x800) == 0)
      v68 = 48;
    v69 = *(float *)(v7 + v68) * 64.0;
    if (v69 > -2147483650.0)
      v13 = (int)v69;
    else
      v13 = 0x80000000;
    if (v69 >= 2147483650.0)
      v13 = 0x7FFFFFFF;
  }
  else
  {
    v12 = v11 * 64.0;
    if (v12 > -2147483650.0)
      v13 = (int)v12;
    else
      v13 = 0x80000000;
    if (v12 >= 2147483650.0)
      v13 = 0x7FFFFFFF;
    v14 = 44;
    if ((*(_WORD *)(v7 + 52) & 0x800) == 0)
      v14 = 48;
    v15 = (float)(*(float *)(v7 + v14) + *(float *)(v7 + 40)) * 64.0;
    if (v15 >= 2147483650.0)
    {
      v16 = 0x7FFFFFFF;
    }
    else if (v15 <= -2147483650.0)
    {
      v16 = 0x80000000;
    }
    else
    {
      v16 = (int)v15;
    }
  }
  v64 = __OFSUB__(v16, v13);
  v70 = v16 - v13;
  v71 = (v16 >> 31) + 0x7FFFFFFF;
  if (v64)
    v70 = v71;
  return v70 & ~(v70 >> 31);
}

uint64_t WebCore::RenderInline::innerPaddingBoxHeight(WebCore::RenderInline *this, WebCore::RenderObject *a2)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  BOOL v11;
  unsigned int v12;

  v3 = *((_DWORD *)this + 5);
  WebCore::RenderInline::linesBoundingBox((WebCore::LegacyInlineBox **)this, a2);
  v5 = HIDWORD(v4);
  if ((v3 & 0x1000) != 0)
    LODWORD(v5) = v4;
  v6 = (_DWORD)v5 << 6;
  if ((int)v5 < -33554432)
    v6 = 0x80000000;
  if ((int)v5 <= 0x1FFFFFF)
    v7 = v6;
  else
    v7 = 0x7FFFFFFF;
  v8 = (*(uint64_t (**)(WebCore::RenderInline *))(*(_QWORD *)this + 1048))(this);
  v9 = (*(uint64_t (**)(WebCore::RenderInline *))(*(_QWORD *)this + 1056))(this);
  v10 = v8 + v9;
  if (__OFADD__(v8, v9))
    v10 = (v8 >> 31) + 0x7FFFFFFF;
  v11 = __OFSUB__(v7, v10);
  v12 = v7 - v10;
  if (v11)
    return (v7 >> 31) + 0x7FFFFFFF;
  else
    return v12;
}

uint64_t WebCore::RenderInline::rectsForRepaintingAfterLayout@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 440))(a1, a2, 0xC00000000);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 32) = 0;
  return result;
}

unint64_t WebCore::RenderInline::rectWithOutlineForRepaint(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  unint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v27;
  unint64_t v28;
  unsigned int v29;
  signed int v30;
  signed int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;

  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 440))(a1, a2, 0xC00000000);
  if (__OFSUB__((_DWORD)v6, a3))
    v9 = (v6 >> 31) + 0x7FFFFFFF;
  else
    v9 = v6 - a3;
  v10 = v7 + a3;
  if (__OFADD__(v7, a3))
    v10 = (v7 >> 31) + 0x7FFFFFFF;
  v11 = __OFADD__(v10, a3);
  v12 = v10 + a3;
  v13 = (v10 >> 31) + 0x7FFFFFFF;
  if (v11)
    v14 = v13;
  else
    v14 = v12;
  if (__OFSUB__(HIDWORD(v6), a3))
    v15 = ((HIDWORD(v6) >> 31) + 0x7FFFFFFF);
  else
    v15 = HIDWORD(v6) - a3;
  v16 = v8 + a3;
  if (__OFADD__(v8, a3))
    v16 = (v8 >> 31) + 0x7FFFFFFF;
  v11 = __OFADD__(v16, a3);
  v17 = v16 + a3;
  v18 = (v16 >> 31) + 0x7FFFFFFF;
  if (v11)
    LODWORD(v19) = v18;
  else
    LODWORD(v19) = v17;
  result = v9 | (v15 << 32);
  v21 = *(unsigned int *)(a1 + 64);
  if (v21 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
  {
    v22 = *(_QWORD *)((v21 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
    if (v22)
    {
      while ((*(_BYTE *)(v22 + 45) & 2) != 0)
      {
        v23 = *(unsigned int *)(v22 + 47);
        if (v23 | ((unint64_t)*(unsigned __int8 *)(v22 + 51) << 32))
        {
          v22 = *(_QWORD *)((v23 | ((unint64_t)*(unsigned __int8 *)(v22 + 51) << 32)) + 8);
          if (v22)
            continue;
        }
        return result;
      }
LABEL_25:
      v24 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v22 + 448))(v22, a2, a3);
      if ((int)v25 >= 1 && SHIDWORD(v25) >= 1)
      {
        if (v14 < 1 || (int)v19 < 1)
        {
          LODWORD(v9) = v24;
          v15 = HIDWORD(v24);
          v14 = v25;
          v19 = HIDWORD(v25);
        }
        else
        {
          if ((int)v24 >= (int)v9)
            v27 = v9;
          else
            v27 = v24;
          if (SHIDWORD(v24) >= (int)v15)
            v28 = v15;
          else
            v28 = HIDWORD(v24);
          v29 = v9 + v14;
          if (__OFADD__((_DWORD)v9, v14))
            v29 = (v9 >> 31) + 0x7FFFFFFF;
          v30 = v24 + v25;
          if (__OFADD__((_DWORD)v24, (_DWORD)v25))
            v30 = (v24 >> 31) + 0x7FFFFFFF;
          if ((int)v29 <= v30)
            v29 = v30;
          v31 = v15 + v19;
          if (__OFADD__((_DWORD)v15, (_DWORD)v19))
            v31 = (v15 >> 31) + 0x7FFFFFFF;
          v32 = HIDWORD(v24) + HIDWORD(v25);
          if (__OFADD__(HIDWORD(v24), HIDWORD(v25)))
            v32 = (HIDWORD(v24) >> 31) + 0x7FFFFFFF;
          if (v31 > v32)
            v32 = v31;
          v11 = __OFSUB__(v29, v27);
          v33 = v29 - v27;
          v34 = (v29 >> 31) + 0x7FFFFFFF;
          if (v11)
            v14 = v34;
          else
            v14 = v33;
          v11 = __OFSUB__(v32, (_DWORD)v28);
          v35 = v32 - v28;
          v36 = (v32 >> 31) + 0x7FFFFFFF;
          if (v11)
            LODWORD(v19) = v36;
          else
            LODWORD(v19) = v35;
          LODWORD(v9) = v27;
          v15 = v28;
        }
      }
      while (1)
      {
        v37 = *(unsigned int *)(v22 + 47);
        if (!(v37 | ((unint64_t)*(unsigned __int8 *)(v22 + 51) << 32)))
          break;
        v22 = *(_QWORD *)((v37 | ((unint64_t)*(unsigned __int8 *)(v22 + 51) << 32)) + 8);
        if (!v22)
          break;
        if ((*(_BYTE *)(v22 + 45) & 2) == 0)
          goto LABEL_25;
      }
      return v9 | (v15 << 32);
    }
  }
  return result;
}

unsigned int *WebCore::RenderInline::computeVisibleRectsUsingPaintOffset(unsigned int *this, const WebCore::RenderObject::RepaintRects *a2, uint64_t a3)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;

  v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)this = *(_OWORD *)a3;
  *((_OWORD *)this + 1) = v3;
  this[8] = *(_DWORD *)(a3 + 32);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 1944)
                 + 248);
  v5 = *(unsigned int *)(v4 + 508);
  if ((_DWORD)v5)
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 496) + 8 * v5 - 8);
  else
    v6 = 0;
  if ((*((_QWORD *)a2 + 12) & 0x280000) == 0x80000)
  {
    v7 = *((_QWORD *)a2 + 18);
    v8 = *this;
    if (v7)
    {
      v11 = v7 + 148;
      v10 = *(_DWORD *)(v7 + 148);
      v9 = *(_DWORD *)(v11 + 4);
      v12 = __OFADD__(v8, v10);
      v13 = v8 + v10;
      v8 = (v8 >> 31) + 0x7FFFFFFF;
      if (!v12)
        v8 = v13;
      v14 = this[1];
      v12 = __OFADD__(v14, v9);
      v15 = v14 + v9;
      v16 = (v14 >> 31) + 0x7FFFFFFF;
      if (!v12)
        v16 = v15;
      this[1] = v16;
      if (*((_BYTE *)this + 32))
      {
        v17 = this[4];
        v12 = __OFADD__(v17, v10);
        v18 = v17 + v10;
        if (v12)
          v18 = (v17 >> 31) + 0x7FFFFFFF;
        this[4] = v18;
        v19 = this[5];
        v12 = __OFADD__(v19, v9);
        v20 = v19 + v9;
        if (v12)
          v20 = (v19 >> 31) + 0x7FFFFFFF;
        this[5] = v20;
      }
    }
  }
  else
  {
    v8 = *this;
  }
  v22 = *(_DWORD *)(v6 + 48);
  v21 = *(_DWORD *)(v6 + 52);
  v12 = __OFADD__(v8, v22);
  v23 = v8 + v22;
  v24 = (v8 >> 31) + 0x7FFFFFFF;
  if (v12)
    v23 = v24;
  v25 = this[1];
  v12 = __OFADD__(v25, v21);
  v26 = v25 + v21;
  v27 = (v25 >> 31) + 0x7FFFFFFF;
  if (v12)
    v26 = v27;
  *this = v23;
  this[1] = v26;
  if (*((_BYTE *)this + 32))
  {
    v28 = this[4];
    v29 = this[5];
    v12 = __OFADD__(v28, v22);
    v30 = v28 + v22;
    v31 = (v28 >> 31) + 0x7FFFFFFF;
    if (!v12)
      v31 = v30;
    v12 = __OFADD__(v29, v21);
    v32 = v29 + v21;
    if (v12)
      v32 = (v29 >> 31) + 0x7FFFFFFF;
    this[4] = v31;
    this[5] = v32;
  }
  if ((*(_BYTE *)v6 & 1) != 0)
  {
    v34 = *(_DWORD *)(v6 + 32);
    v33 = *(_DWORD *)(v6 + 36);
    v35 = *(_QWORD *)(v6 + 40);
    if (v23 <= v34)
      v36 = *(_DWORD *)(v6 + 32);
    else
      v36 = v23;
    if ((int)v26 <= (int)v33)
      v37 = v33;
    else
      v37 = v26;
    v38 = this[2];
    v39 = this[3];
    v12 = __OFADD__(v23, v38);
    v40 = v23 + v38;
    v41 = (v23 >> 31) + 0x7FFFFFFF;
    if (!v12)
      v41 = v40;
    v12 = __OFADD__(v34, (_DWORD)v35);
    v42 = v34 + v35;
    v43 = (v34 >> 31) + 0x7FFFFFFF;
    if (!v12)
      v43 = v42;
    if (v43 < v41)
      v41 = v43;
    v12 = __OFADD__(v26, v39);
    v44 = v26 + v39;
    v45 = (v26 >> 31) + 0x7FFFFFFF;
    if (!v12)
      v45 = v44;
    v12 = __OFADD__(v33, HIDWORD(v35));
    v46 = v33 + HIDWORD(v35);
    v47 = (v33 >> 31) + 0x7FFFFFFF;
    if (!v12)
      v47 = v46;
    if (v47 < v45)
      v45 = v47;
    if (v36 >= v41 || (int)v37 >= v45)
    {
      v41 = 0;
      v45 = 0;
      v36 = 0;
      v37 = 0;
    }
    v48 = v36 | (unint64_t)(v37 << 32);
    v12 = __OFSUB__(v41, v36);
    LODWORD(v49) = v41 - v36;
    v50 = (v41 >> 31) + 0x7FFFFFFF;
    if (v12)
      v49 = v50;
    else
      v49 = v49;
    v12 = __OFSUB__(v45, (_DWORD)v37);
    LODWORD(v37) = v45 - v37;
    if (v12)
      v37 = (v45 >> 31) + 0x7FFFFFFF;
    else
      v37 = v37;
    *(_QWORD *)this = v48;
    *((_QWORD *)this + 1) = v49 | (v37 << 32);
  }
  return this;
}

unint64_t WebCore::RenderInline::offsetFromContainer(WebCore::RenderInline *this, WebCore::RenderElement *a2, const WebCore::LayoutPoint *a3, BOOL *a4, double a5)
{
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  BOOL v21;
  unint64_t v22;

  if ((*((_BYTE *)this + 22) & 0x80) != 0)
  {
    v22 = WebCore::RenderBoxModelObject::offsetForInFlowPosition(this, a5);
    v7 = v22;
    v8 = HIDWORD(v22);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  if ((*((_BYTE *)a2 + 45) & 4) != 0)
  {
    v9 = WebCore::RenderBox::scrollPosition(a2);
    v10 = (_DWORD)v9 << 6;
    v11 = HIDWORD(v9) << 6;
    if ((int)v9 < -33554432)
      v10 = 0x80000000;
    if ((int)v9 > 0x1FFFFFF)
      v10 = 0x7FFFFFFF;
    if (SHIDWORD(v9) < -33554432)
      v11 = 0x80000000;
    if (SHIDWORD(v9) <= 0x1FFFFFF)
      v12 = v11;
    else
      v12 = 0x7FFFFFFF;
    v13 = __OFSUB__(v7, v10);
    v14 = v7 - v10;
    if (v13)
      v7 = (v7 >> 31) + 0x7FFFFFFF;
    else
      v7 = v14;
    v13 = __OFSUB__((_DWORD)v8, v12);
    v15 = v8 - v12;
    if (v13)
      v8 = (v8 >> 31) + 0x7FFFFFFF;
    else
      v8 = v15;
  }
  if (a4)
  {
    if ((*((_BYTE *)a2 + 45) & 4) == 0
      || ((v17 = (unsigned __int16)*((_DWORD *)a2 + 31) >> 13,
           LOBYTE(v18) = 1,
           v19 = v17 > 5,
           v20 = (1 << v17) & 0x2A,
           !v19)
        ? (v21 = v20 == 0)
        : (v21 = 1),
          v21))
    {
      v18 = (*((unsigned __int8 *)a2 + 53) >> 1) & 1;
      if ((*((_BYTE *)a2 + 52) & 7) != 1)
        LOBYTE(v18) = 0;
    }
    *a4 = v18;
  }
  return v7 | (v8 << 32);
}

void WebCore::RenderInline::mapLocalToContainer(WebCore::RenderObject *this, WebCore::RenderLayerModelObject *a2, double **a3, unsigned int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  double (*v15)[4][4];
  double v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  BOOL v20;
  int v21;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  __int128 *v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float v54;
  float v55;
  double v56;
  int v57;
  double v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  _QWORD v64[16];
  char v65;
  float64x2_t v66[8];
  float v67[2];

  if (a2 != this)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                + 1944)
                    + 248);
    if (!*(_DWORD *)(v10 + 492)
      && (v11 = *(unsigned int *)(v10 + 508), (_DWORD)v11)
      && ((v12 = *(_QWORD *)(*(_QWORD *)(v10 + 496) + 8 * v11 - 8)) != 0 ? (v13 = a2 == 0) : (v13 = 0), v13))
    {
      v40 = *(_QWORD *)(v12 + 48);
      v64[0] = v40;
      if ((*((_QWORD *)this + 12) & 0x280000) == 0x80000)
      {
        v41 = *((_QWORD *)this + 18);
        if (v41)
        {
          v42 = HIDWORD(v40);
          v44 = *(_DWORD *)(v41 + 148);
          v43 = *(_DWORD *)(v41 + 152);
          v34 = __OFADD__((_DWORD)v40, v44);
          v45 = v40 + v44;
          v46 = (v40 >> 31) + 0x7FFFFFFF;
          if (!v34)
            v46 = v45;
          v34 = __OFADD__((_DWORD)v42, v43);
          v47 = v42 + v43;
          v48 = (v42 >> 31) + 0x7FFFFFFF;
          if (v34)
            v47 = v48;
          v64[0] = __PAIR64__(v47, v46);
        }
      }
      WebCore::TransformState::move((WebCore::TransformState *)a3, (WebCore::LayoutSize *)v64, 0);
    }
    else
    {
      v63 = 0;
      v14 = WebCore::RenderObject::container(this, a2, &v63);
      if (v14)
      {
        v17 = v14;
        if ((a4 & 4) != 0 && (*(_BYTE *)(v14 + 45) & 4) != 0)
        {
          v18 = *(_DWORD *)(v14 + 16) + 1;
          *(_DWORD *)(v14 + 16) = v18;
          v19 = (unsigned __int16)*(_DWORD *)(v14 + 124) >> 13;
          v20 = v19 > 5;
          v21 = (1 << v19) & 0x2A;
          if (!v20 && v21 != 0)
          {
            LODWORD(v54) = WebCore::TransformState::mappedPoint((WebCore::TransformState *)a3, 0, v15).u32[0];
            v56 = v54 * 64.0;
            if (v56 >= 2147483650.0)
            {
              v57 = 0x7FFFFFFF;
            }
            else if (v56 <= -2147483650.0)
            {
              v57 = 0x80000000;
            }
            else
            {
              v57 = (int)v56;
            }
            LODWORD(v64[0]) = v57;
            v58 = v55 * 64.0;
            if (v58 >= 2147483650.0)
            {
              v59 = 0x7FFFFFFF;
            }
            else if (v58 <= -2147483650.0)
            {
              v59 = 0x80000000;
            }
            else
            {
              v59 = (int)v58;
            }
            HIDWORD(v64[0]) = v59;
            v60 = WebCore::RenderBox::flipForWritingMode((WebCore::RenderBox *)v17, (const WebCore::LayoutPoint *)v64);
            LODWORD(v61) = v60 - v57;
            if (__OFSUB__((_DWORD)v60, v57))
              v61 = (v60 >> 31) + 0x7FFFFFFF;
            else
              v61 = v61;
            LODWORD(v62) = (HIDWORD(v60) >> 31) + 0x7FFFFFFF;
            if (__OFSUB__(HIDWORD(v60), v59))
              v62 = v62;
            else
              v62 = (HIDWORD(v60) - v59);
            *(_QWORD *)&v66[0].f64[0] = v61 | (v62 << 32);
            WebCore::TransformState::move((WebCore::TransformState *)a3, (WebCore::LayoutSize *)v66, 0);
            v18 = *(_DWORD *)(v17 + 16);
          }
          if (!v18)
          {
            __break(0xC471u);
            JUMPOUT(0x1963DDD4CLL);
          }
          a4 &= ~4u;
          *(_DWORD *)(v17 + 16) = v18 - 1;
        }
        v23 = *((_DWORD *)a3 + 28);
        if (v23)
        {
          v24 = *((_DWORD *)a3 + 24);
          v25 = *((_DWORD *)a3 + 25);
          if (v24 == 0x80000000)
            v26 = 0x7FFFFFFFLL;
          else
            v26 = -v24;
          if (v25 == 0x80000000)
            v27 = 0x7FFFFFFFLL;
          else
            v27 = -v25;
          v28 = v26 | (v27 << 32);
        }
        else
        {
          v28 = (uint64_t)a3[12];
        }
        *(float *)&v16 = (float)((float)SHIDWORD(v28) * 0.015625) + *((float *)a3 + 1);
        v67[0] = (float)((float)(int)v28 * 0.015625) + *(float *)a3;
        v67[1] = *(float *)&v16;
        if (v23)
        {
          v29 = a3[10];
          if (v29)
          {
            WebCore::TransformationMatrix::inverse(v29, v15, (uint64_t)v64);
            if (v65)
              v49 = (__int128 *)v64;
            else
              v49 = &constinit_5;
            v50 = (float64x2_t)v49[5];
            v66[4] = (float64x2_t)v49[4];
            v66[5] = v50;
            v51 = (float64x2_t)v49[7];
            v66[6] = (float64x2_t)v49[6];
            v66[7] = v51;
            v52 = (float64x2_t)v49[1];
            v66[0] = (float64x2_t)*v49;
            v66[1] = v52;
            v53 = (float64x2_t)v49[3];
            v66[2] = (float64x2_t)v49[2];
            v66[3] = v53;
            *(float32x2_t *)&v16 = WebCore::TransformationMatrix::projectPoint(v66, (const WebCore::FloatPoint *)v67, 0);
          }
        }
        if ((*((_BYTE *)this + 22) & 0x80) != 0)
        {
          v30 = WebCore::RenderBoxModelObject::offsetForInFlowPosition(this, v16);
          v31 = HIDWORD(v30);
        }
        else
        {
          LODWORD(v30) = 0;
          v31 = 0;
        }
        if ((*(_BYTE *)(v17 + 45) & 4) != 0)
        {
          if ((*(_BYTE *)(v17 + 22) & 1) == 0
            || ((*(_BYTE *)(v17 + 45) & 2) != 0
              ? (v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 32) + 8) + 96))
              : (v37 = *(_QWORD *)(v17 + 96)),
                v33 = v37 & 0x1C00,
                v33 == 2048))
          {
            v32 = 0;
            LODWORD(v33) = 0;
          }
          else if (v33 && (v33 = *(_QWORD *)(*(_QWORD *)(v17 + 144) + 264)) != 0)
          {
            v38 = *(_QWORD *)(v33 + 104);
            v32 = (_DWORD)v38 << 6;
            v39 = HIDWORD(v38) << 6;
            if ((int)v38 < -33554432)
              v32 = 0x80000000;
            if ((int)v38 > 0x1FFFFFF)
              v32 = 0x7FFFFFFF;
            if (SHIDWORD(v38) < -33554432)
              v39 = 0x80000000;
            if (SHIDWORD(v38) <= 0x1FFFFFF)
              LODWORD(v33) = v39;
            else
              LODWORD(v33) = 0x7FFFFFFF;
          }
          else
          {
            v32 = 0;
          }
          v34 = __OFSUB__((_DWORD)v30, v32);
          v35 = v30 - v32;
          if (v34)
            LODWORD(v30) = (v30 >> 31) + 0x7FFFFFFF;
          else
            LODWORD(v30) = v35;
          v34 = __OFSUB__((_DWORD)v31, (_DWORD)v33);
          v36 = (v31 - v33);
          if (v34)
            v31 = (v31 >> 31) + 0x7FFFFFFF;
          else
            v31 = v36;
        }
        v64[0] = v30 | (v31 << 32);
        WebCore::RenderObject::pushOntoTransformState((uint64_t)this, (WebCore::TransformState *)a3, a4, a2, v17, (const WebCore::LayoutSize *)v64, v63);
        if (!v63)
          (*(void (**)(uint64_t, WebCore::RenderLayerModelObject *, double **, _QWORD, uint64_t))(*(_QWORD *)v17 + 576))(v17, a2, a3, a4, a5);
      }
    }
  }
}

WebCore::RenderElement *WebCore::RenderInline::pushMappingToContainer(WebCore::RenderInline *this, const WebCore::RenderLayerModelObject *a2, WebCore::RenderGeometryMap *a3)
{
  WebCore::RenderElement *result;
  WebCore::RenderElement *v7;
  BOOL v8;

  v8 = 0;
  result = (WebCore::RenderElement *)WebCore::RenderObject::container(this, a2, &v8);
  if (result)
  {
    v7 = result;
    WebCore::RenderObject::pushOntoGeometryMap(this, a3, a2, result, v8);
    if (v8)
      return a2;
    else
      return v7;
  }
  return result;
}

unsigned int *WebCore::RenderInline::updateHitTestResult(unsigned int *this, WebCore::HitTestResult *a2, const WebCore::LayoutPoint *a3)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  void *v7;
  unsigned int *v8;
  WebCore::RenderObject *v9;
  WebCore::RenderObject *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  int v23;
  unsigned int *v24;
  int v25;

  if (!*((_QWORD *)a2 + 9))
  {
    v4 = this;
    v6 = *(_DWORD *)a3;
    v5 = *((unsigned int *)a3 + 1);
    this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 320))(this);
    if (this)
    {
      v8 = this;
      this[6] += 2;
      if ((*(_WORD *)((_BYTE *)v4 + 69) & 0x20) != 0)
      {
        v9 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL));
        v10 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v4);
        v12 = *((_DWORD *)v10 + 38);
        v11 = *((_DWORD *)v10 + 39);
        v14 = *((_DWORD *)v9 + 38);
        v13 = *((_DWORD *)v9 + 39);
        v15 = __OFSUB__(v12, v14);
        v16 = v12 - v14;
        v17 = (v12 >> 31) + 0x7FFFFFFF;
        if (!v15)
          v17 = v16;
        v15 = __OFSUB__(v11, v13);
        v18 = v11 - v13;
        v19 = (v11 >> 31) + 0x7FFFFFFF;
        if (!v15)
          v19 = v18;
        v15 = __OFADD__(v6, v17);
        v20 = v6 + v17;
        if (v15)
          v6 = (v6 >> 31) + 0x7FFFFFFF;
        else
          v6 = v20;
        v15 = __OFADD__((_DWORD)v5, v19);
        v21 = v5 + v19;
        if (v15)
          v5 = (v5 >> 31) + 0x7FFFFFFF;
        else
          v5 = v21;
      }
      v22 = v8;
      if ((~*((unsigned __int16 *)v8 + 14) & 0x408) != 0
        || (v23 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v8 + 368))(v8), v22 = v8, !v23)
        || (v22 = (unsigned int *)*((_QWORD *)v8 + 14)) != 0 && (v22 = (unsigned int *)*((_QWORD *)v22 + 1)) != 0)
      {
        v22[6] += 2;
      }
      this = (unsigned int *)*((_QWORD *)a2 + 9);
      *((_QWORD *)a2 + 9) = v22;
      if (this)
      {
        if (this[6] == 2)
        {
          if ((*((_WORD *)this + 15) & 0x400) == 0)
            this = WebCore::Node::removedLastRef((WebCore::Node *)this, v7);
        }
        else
        {
          this[6] -= 2;
        }
      }
      if (!*((_QWORD *)a2 + 10))
      {
        v24 = v8;
        if ((~*((unsigned __int16 *)v8 + 14) & 0x408) != 0
          || (v25 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v8 + 368))(v8), v24 = v8, !v25)
          || (v24 = (unsigned int *)*((_QWORD *)v8 + 14)) != 0 && (v24 = (unsigned int *)*((_QWORD *)v24 + 1)) != 0)
        {
          v24[6] += 2;
        }
        this = (unsigned int *)*((_QWORD *)a2 + 10);
        *((_QWORD *)a2 + 10) = v24;
        if (this)
        {
          if (this[6] == 2)
          {
            if ((*((_WORD *)this + 15) & 0x400) == 0)
              this = WebCore::Node::removedLastRef((WebCore::Node *)this, v7);
          }
          else
          {
            this[6] -= 2;
          }
        }
      }
      *((_QWORD *)a2 + 12) = v6 | (unint64_t)(v5 << 32);
      if (v8[6] == 2)
      {
        if ((*((_WORD *)v8 + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v8, v7);
      }
      else
      {
        v8[6] -= 2;
      }
    }
  }
  return this;
}

_QWORD **WebCore::RenderInline::dirtyLineBoxes(WebCore::RenderInline *this, int a2)
{
  char *v2;
  _QWORD **result;
  _QWORD **v4;

  v2 = (char *)this + 152;
  if (!a2)
    return WebCore::RenderLineBoxList::dirtyLineBoxes((_QWORD **)this + 19);
  result = *(_QWORD ***)v2;
  if (*(_QWORD *)v2)
  {
    do
    {
      v4 = (_QWORD **)result[12];
      ((void (*)(_QWORD **))(*result)[1])(result);
      result = v4;
    }
    while (v4);
    *(_QWORD *)v2 = 0;
    *((_QWORD *)v2 + 1) = 0;
  }
  return result;
}

double WebCore::RenderInline::createInlineFlowBox@<D0>(WebCore::RenderInline *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  double result;
  void *v8;
  WTF *v9;

  v4 = bmalloc::api::isoAllocate();
  *(_QWORD *)v4 = off_1E341E8B8;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  v5 = *((_QWORD *)this + 1);
  if (!v5)
  {
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = this;
    v9 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        WTF::fastFree(v9, v8);
        v5 = *((_QWORD *)this + 1);
        if (!v5)
          goto LABEL_3;
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
  }
  ++*(_DWORD *)v5;
LABEL_3:
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 48) = 0;
  v6 = (*(unsigned __int16 *)(v4 + 52) | (*(unsigned __int8 *)(v4 + 54) << 16)) & 0xFE5000;
  *(_WORD *)(v4 + 52) = *(_WORD *)(v4 + 52) & 0x5000 | 0x2800;
  *(_BYTE *)(v4 + 54) = BYTE2(v6);
  *(_QWORD *)v4 = off_1E341E6E0;
  *(_DWORD *)(v4 + 56) &= 0xFFFBFFF8;
  result = 0.0;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 96) = 0;
  *a2 = v4;
  return result;
}

uint64_t WebCore::RenderInline::createAndAppendInlineFlowBox(WebCore::RenderInline *this)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 1184))(&v5);
  result = v5;
  if (*((_QWORD *)this + 19))
  {
    v4 = *((_QWORD *)this + 20);
    v3 = (_QWORD *)((char *)this + 160);
    *(_QWORD *)(v4 + 96) = v5;
    *(_QWORD *)(result + 88) = v4;
  }
  else
  {
    *((_QWORD *)this + 19) = v5;
    v3 = (_QWORD *)((char *)this + 160);
  }
  *v3 = result;
  return result;
}

uint64_t WebCore::RenderInline::lineHeight(WebCore::RenderElement *a1, WTF::StringImpl *a2)
{
  char *LineStyle;
  float v3;

  if ((_DWORD)a2)
    LineStyle = WebCore::RenderElement::firstLineStyle(a1, a2);
  else
    LineStyle = (char *)a1 + 80;
  v3 = ceilf(WebCore::RenderStyle::computedLineHeight((WebCore::RenderStyle *)LineStyle, a2) * 64.0);
  if (v3 >= 2147500000.0)
    return 0x7FFFFFFFLL;
  if (v3 <= -2147500000.0)
    return 0x80000000;
  return (int)v3;
}

uint64_t WebCore::RenderInline::baselinePosition(WebCore::RenderElement *this, WTF::StringImpl *a2, int a3)
{
  int v4;
  char *LineStyle;
  WTF *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  float v10;
  char *v11;
  float v12;
  float v13;
  float v14;
  double v15;

  v4 = (int)a2;
  if (a3)
    LineStyle = WebCore::RenderElement::firstLineStyle(this, a2);
  else
    LineStyle = (char *)this + 80;
  v7 = WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)LineStyle, a2);
  v9 = v7;
  v10 = *((float *)v7 + 1);
  if (v4)
  {
    v10 = (float)(v10 + *((float *)v7 + 3)) * 0.5;
    if (a3)
      goto LABEL_6;
  }
  else if (a3)
  {
LABEL_6:
    v11 = WebCore::RenderElement::firstLineStyle(this, v8);
    goto LABEL_9;
  }
  v11 = (char *)this + 80;
LABEL_9:
  v12 = ceilf(WebCore::RenderStyle::computedLineHeight((WebCore::RenderStyle *)v11, v8) * 64.0);
  v13 = -33554000.0;
  if (v12 > -2147500000.0)
    v13 = (float)(int)v12 * 0.015625;
  if (v12 < 2147500000.0)
    v14 = v13;
  else
    v14 = 33554000.0;
  v15 = (float)(v10 + (float)((float)(v14 - (float)(*((float *)v9 + 1) + *((float *)v9 + 3))) * 0.5)) * 64.0;
  if (v15 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v15 <= -2147483650.0)
    return 0x80000000;
  return (int)v15;
}

uint64_t WebCore::RenderInline::offsetForInFlowPositionedInline(WebCore::RenderInline *this, const WebCore::RenderBox *a2)
{
  uint64_t (**v2)();
  uint64_t (**v3)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t (**v14)();
  WebCore::RenderObject *v15;
  unint64_t v16;
  float v17;
  double v18;
  uint64_t v19;
  double v20;
  unsigned int v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  double v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  double v40;
  unint64_t v41[2];
  unsigned int v42;
  char v43;
  char *v44;

  if ((*((_BYTE *)this + 22) & 0x80) == 0)
  {
    v4 = 0;
LABEL_3:
    v5 = 0;
    return v5 | v4;
  }
  v8 = *((_QWORD *)this + 19);
  if (v8)
  {
    v9 = 44;
    if ((*(_WORD *)(v8 + 52) & 0x800) == 0)
      v9 = 48;
    v10 = *(float *)(v8 + v9);
    if (v10 < 0.0)
      v11 = -0.0078125;
    else
      v11 = 0.0078125;
    v17 = v10 + v11;
    if (v17 < 33554432.0)
    {
      if (v17 <= -33554000.0)
        goto LABEL_79;
      v18 = v17 * 64.0;
      if (v18 < 2147483650.0)
      {
        if (v18 > -2147483650.0)
        {
          v13 = (int)v18;
LABEL_20:
          v19 = 48;
          if ((*(_WORD *)(v8 + 52) & 0x800) == 0)
            v19 = 44;
          v20 = *(float *)(v8 + v19) * 64.0;
          if (v20 >= 2147483650.0)
          {
            LODWORD(v14) = 0x7FFFFFFF;
          }
          else if (v20 <= -2147483650.0)
          {
            LODWORD(v14) = 0x80000000;
          }
          else
          {
            LODWORD(v14) = (int)v20;
          }
          goto LABEL_25;
        }
LABEL_79:
        v13 = 0x80000000;
        goto LABEL_20;
      }
    }
    v13 = 0x7FFFFFFF;
    goto LABEL_20;
  }
  v12 = *((_QWORD *)this + 18);
  v13 = *(_DWORD *)(v12 + 148);
  v14 = (uint64_t (**)())*(unsigned int *)(v12 + 152);
  if (WebCore::LayoutIntegration::LineLayout::containing(this, a2))
  {
    v4 = *((_QWORD *)this + 7);
    if (!v4)
      goto LABEL_3;
    if ((*(_WORD *)(v4 + 12) & 0x40) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1963DE8DCLL);
    }
    v16 = WebCore::LayoutIntegration::LineLayout::containing(this, v15);
    if (v16)
    {
      WebCore::LayoutIntegration::LineLayout::firstInlineBoxFor(v16, this, v41);
    }
    else
    {
      v41[0] = *((_QWORD *)this + 19);
      v42 = 1;
    }
    if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v41) & 1) == 0)
    {
      if (v42 == -1)
        goto LABEL_80;
      v44 = &v43;
      v14 = off_1E3428F70;
      if ((((uint64_t (*)(char **, unint64_t *))off_1E3428F70[v42])(&v44, v41) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1963DE8FCLL);
      }
      if (v42 == -1)
        goto LABEL_80;
      v44 = &v43;
      v2 = off_1E3428F38;
      ((void (*)(char **, unint64_t *))off_1E3428F38[v42])(&v44, v41);
      if (v42 == -1)
        goto LABEL_80;
      v29 = v27;
      v30 = v28;
      v44 = &v43;
      v3 = off_1E3428F48;
      if (((unsigned int (*)(char **, unint64_t *))off_1E3428F48[v42])(&v44, v41))
        v31 = v29;
      else
        v31 = v30;
      if (v31 < 0.0)
        v32 = -0.0078125;
      else
        v32 = 0.0078125;
      v33 = v31 + v32;
      if (v33 >= 33554432.0)
        goto LABEL_77;
      if (v33 <= -33554000.0)
        goto LABEL_81;
      v34 = v33 * 64.0;
      if (v34 >= 2147483650.0)
      {
LABEL_77:
        v13 = 0x7FFFFFFF;
      }
      else
      {
        if (v34 <= -2147483650.0)
          goto LABEL_81;
        v13 = (int)v34;
      }
      while (1)
      {
        if (v42 != -1)
        {
          v44 = &v43;
          if ((((uint64_t (*)(char **, unint64_t *))v14[v42])(&v44, v41) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1963DE91CLL);
          }
          if (v42 != -1)
          {
            v14 = (uint64_t (**)())&v43;
            v44 = &v43;
            ((void (*)(char **, unint64_t *))v2[v42])(&v44, v41);
            if (v42 != -1)
              break;
          }
        }
LABEL_80:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_81:
        v13 = 0x80000000;
      }
      v37 = v35;
      v38 = v36;
      v44 = &v43;
      if (((unsigned int (*)(char **, unint64_t *))v3[v42])(&v44, v41))
        v39 = v38;
      else
        v39 = v37;
      v40 = v39 * 64.0;
      if (v40 >= 2147483650.0)
      {
        LODWORD(v14) = 0x7FFFFFFF;
      }
      else if (v40 <= -2147483650.0)
      {
        LODWORD(v14) = 0x80000000;
      }
      else
      {
        LODWORD(v14) = (int)v40;
      }
    }
    if (v42 != -1)
      ((void (*)(char **, unint64_t *))off_1E3428F28[v42])(&v44, v41);
  }
LABEL_25:
  v21 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  v22 = *(_BYTE **)(*((_QWORD *)a2 + 11) + 24);
  if (v21 < 4)
  {
    if (v22[12])
      goto LABEL_30;
    v23 = v22 + 28;
  }
  else
  {
    if (v22[36])
      goto LABEL_30;
    v23 = v22 + 20;
  }
  if (!*v23)
    v13 = 0;
LABEL_30:
  if (v21 < 4)
  {
    if (!v22[36])
    {
      v24 = v22 + 20;
LABEL_33:
      if (!*v24)
        LODWORD(v14) = 0;
    }
  }
  else if (!v22[12])
  {
    v24 = v22 + 28;
    goto LABEL_33;
  }
  if (v21 >= 4)
    v25 = v14;
  else
    v25 = v13;
  if (v21 >= 4)
    v4 = v13;
  else
    v4 = v14;
  v5 = v25 << 32;
  return v5 | v4;
}

uint64_t WebCore::RenderInline::imageChanged(uint64_t this, const void *a2, const WebCore::IntRect *a3)
{
  uint64_t v3;
  _BYTE v4[20];
  __int128 v5;
  char v6;

  v3 = *(_QWORD *)(this + 32);
  if (v3
    && *(_QWORD *)(v3 + 8)
    && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40)
                                                                                         + 8)
                                                                             + 1944)
                                                                 + 24)
                                                     + 8)
                                         + 40)
                             + 8)
                 + 3382))
  {
    LOBYTE(v5) = 0;
    v6 = 0;
    v4[0] = 0;
    v4[16] = 0;
    return WebCore::RenderObject::issueRepaint(this, &v5, 0, 0, (uint64_t)v4);
  }
  return this;
}

void WebCore::RenderInline::addFocusRingRects(uint64_t a1, WebCore::RenderObject *a2, int32x2_t *a3, uint64_t a4)
{
  uint64_t v8;
  WTF::StringImpl *v9;
  void *v10;
  WTF *v11;
  float *v12;
  uint64_t v13;
  float v14;
  double v15;
  int v16;
  unsigned int v17;
  double v18;
  unsigned int v19;
  double v20;
  int v21;
  double v22;
  int v23;
  int v24;
  __int32 v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 *v31;
  uint64_t v32;
  float v33;
  float v34;
  double v35;
  int v36;
  unsigned int v37;
  double v38;
  unsigned int v39;
  double v40;
  int v41;
  double v42;
  int v43;
  int v44;
  __int32 v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 *v50;
  uint64_t v51;
  uint64_t i;
  uint64_t v53;
  uint64_t v54;
  char v55;
  float32x2_t v56;
  float32x2_t v57;
  void *v58;
  WTF *v59;
  WTF *v60;
  float v61;
  int v62;
  float v63;
  int v64;
  int8x8_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v75;
  uint64_t v76;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  WebCore::RenderObject *v81;
  int v82;
  int v83;
  unsigned __int32 v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  WebCore::RenderObject *v89;
  int v90;
  int v91;
  int v92;
  int v93;
  float v94;
  float v95;
  uint64_t v96;
  uint64_t v97;
  float v98;
  unint64_t v99;
  float32x2_t v100;
  WTF *v101;
  int v102;
  unsigned int v103;
  _OWORD v104[4];
  char v105;
  WTF *v106;
  WTF *v107;
  uint64_t v108;
  char v109;
  __int16 v110;
  int v111;
  int v112;

  v8 = WebCore::LayoutIntegration::LineLayout::containing((WebCore::LayoutIntegration::LineLayout *)a1, a2);
  if (v8)
  {
    WebCore::LayoutIntegration::LineLayout::collectInlineBoxRects(v8, (const WebCore::RenderInline *)a1, (uint64_t)&v101);
    v11 = v101;
    if (v103)
    {
      v12 = (float *)((char *)v101 + 8);
      v13 = 16 * v103;
      do
      {
        if (*v12 > 0.0)
        {
          v14 = v12[1];
          if (v14 > 0.0)
          {
            v15 = *(v12 - 2) * 64.0;
            v16 = (int)v15;
            if (v15 <= -2147483650.0)
              v16 = 0x80000000;
            if (v15 < 2147483650.0)
              v17 = v16;
            else
              v17 = 0x7FFFFFFF;
            v18 = *(v12 - 1) * 64.0;
            v19 = (int)v18;
            if (v18 <= -2147483650.0)
              v19 = 0x80000000;
            if (v18 >= 2147483650.0)
              v19 = 0x7FFFFFFF;
            v20 = *v12 * 64.0;
            v21 = (int)v20;
            if (v20 <= -2147483650.0)
              v21 = 0x80000000;
            if (v20 >= 2147483650.0)
              v21 = 0x7FFFFFFF;
            DWORD2(v104[0]) = v21;
            v22 = v14 * 64.0;
            if (v22 >= 2147483650.0)
            {
              v23 = 0x7FFFFFFF;
            }
            else if (v22 <= -2147483650.0)
            {
              v23 = 0x80000000;
            }
            else
            {
              v23 = (int)v22;
            }
            HIDWORD(v104[0]) = v23;
            v24 = v17 + a3->i32[0];
            if (__OFADD__(v17, a3->i32[0]))
              v24 = (v17 >> 31) + 0x7FFFFFFF;
            v25 = a3->i32[1];
            LODWORD(v104[0]) = v24;
            v26 = __OFADD__(v19, v25);
            v27 = v19 + v25;
            if (v26)
              v27 = (v19 >> 31) + 0x7FFFFFFF;
            DWORD1(v104[0]) = v27;
            v28 = *((unsigned int *)a2 + 3);
            if ((_DWORD)v28 == *((_DWORD *)a2 + 2))
            {
              v31 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, v28 + 1, (unint64_t)v104);
              v28 = *((unsigned int *)a2 + 3);
              v29 = *(_QWORD *)a2;
              v30 = *v31;
            }
            else
            {
              v29 = *(_QWORD *)a2;
              v30 = v104[0];
            }
            *(_OWORD *)(v29 + 16 * v28) = v30;
            ++*((_DWORD *)a2 + 3);
          }
        }
        v12 += 4;
        v13 -= 16;
      }
      while (v13);
      v11 = v101;
    }
    if (v11)
    {
      v101 = 0;
      v102 = 0;
      WTF::fastFree(v11, v10);
    }
    goto LABEL_72;
  }
  v32 = *(_QWORD *)(a1 + 152);
  if (v32)
  {
    while ((*(_WORD *)(v32 + 52) & 0x800) == 0)
    {
      v33 = WebCore::LegacyInlineBox::logicalHeight((WebCore::LegacyInlineBox *)v32, v9);
      if ((*(_WORD *)(v32 + 52) & 0x800) != 0)
        goto LABEL_39;
      v34 = *(float *)(v32 + 40);
LABEL_42:
      if (v33 > 0.0 && v34 > 0.0)
      {
        v35 = *(float *)(v32 + 44) * 64.0;
        v36 = (int)v35;
        if (v35 <= -2147483650.0)
          v36 = 0x80000000;
        if (v35 < 2147483650.0)
          v37 = v36;
        else
          v37 = 0x7FFFFFFF;
        v38 = *(float *)(v32 + 48) * 64.0;
        v39 = (int)v38;
        if (v38 <= -2147483650.0)
          v39 = 0x80000000;
        if (v38 >= 2147483650.0)
          v39 = 0x7FFFFFFF;
        v40 = v33 * 64.0;
        v41 = (int)v40;
        if (v40 <= -2147483650.0)
          v41 = 0x80000000;
        if (v40 >= 2147483650.0)
          v41 = 0x7FFFFFFF;
        DWORD2(v104[0]) = v41;
        v42 = v34 * 64.0;
        if (v42 >= 2147483650.0)
        {
          v43 = 0x7FFFFFFF;
        }
        else if (v42 <= -2147483650.0)
        {
          v43 = 0x80000000;
        }
        else
        {
          v43 = (int)v42;
        }
        HIDWORD(v104[0]) = v43;
        v44 = v37 + a3->i32[0];
        if (__OFADD__(v37, a3->i32[0]))
          v44 = (v37 >> 31) + 0x7FFFFFFF;
        v45 = a3->i32[1];
        LODWORD(v104[0]) = v44;
        v26 = __OFADD__(v39, v45);
        v46 = v39 + v45;
        if (v26)
          v46 = (v39 >> 31) + 0x7FFFFFFF;
        DWORD1(v104[0]) = v46;
        v47 = *((unsigned int *)a2 + 3);
        if ((_DWORD)v47 == *((_DWORD *)a2 + 2))
        {
          v50 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, v47 + 1, (unint64_t)v104);
          v47 = *((unsigned int *)a2 + 3);
          v48 = *(_QWORD *)a2;
          v49 = *v50;
        }
        else
        {
          v48 = *(_QWORD *)a2;
          v49 = v104[0];
        }
        *(_OWORD *)(v48 + 16 * v47) = v49;
        ++*((_DWORD *)a2 + 3);
      }
      v32 = *(_QWORD *)(v32 + 96);
      if (!v32)
        goto LABEL_72;
    }
    v33 = *(float *)(v32 + 40);
LABEL_39:
    v34 = WebCore::LegacyInlineBox::logicalHeight((WebCore::LegacyInlineBox *)v32, v9);
    goto LABEL_42;
  }
LABEL_72:
  v51 = *(unsigned __int8 *)(a1 + 68);
  for (i = *(unsigned int *)(a1 + 64); ; i = *(unsigned int *)(v54 + 47))
  {
    v53 = i | (v51 << 32);
    if (!v53)
      break;
    v54 = *(_QWORD *)(v53 + 8);
    if (!v54)
      break;
    v55 = *(_BYTE *)(v54 + 45);
    if ((v55 & 2) == 0)
    {
      v56 = (float32x2_t)vdup_n_s32(0x3C800000u);
LABEL_78:
      if (*(_BYTE *)(v54 + 46) != 20)
      {
        if ((*(_BYTE *)(v54 + 21) & 0x80) != 0)
        {
          v105 = 0;
          v107 = 0;
          v108 = 0;
          v106 = 0;
          v109 = 0;
          memset(v104, 0, 41);
          v110 = 1;
          v111 = 0;
          v112 = 0;
          (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t, _QWORD))(*(_QWORD *)v54 + 576))(v54, a4, v104, 6, 0);
          WebCore::TransformState::flatten((WebCore::TransformState *)v104, 0);
          v57 = *(float32x2_t *)&v104[0];
          v59 = v107;
          v107 = 0;
          v100 = *(float32x2_t *)&v104[0];
          if (v59)
          {
            WTF::fastFree(v59, v58);
            v57 = v100;
          }
          v60 = v106;
          v106 = 0;
          if (v60)
          {
            WTF::fastFree(v60, v58);
            v57 = v100;
          }
        }
        else
        {
          v57 = vmul_f32(vcvt_f32_s32(*a3), v56);
          if ((v55 & 4) != 0)
            v57 = vadd_f32(v57, vmul_f32(vcvt_f32_s32(*(int32x2_t *)(v54 + 152)), v56));
        }
        v61 = floorf(v57.f32[0]);
        if (v61 >= 2147500000.0)
        {
          v62 = 0x7FFFFFFF;
        }
        else if (v61 <= -2147500000.0)
        {
          v62 = 0x80000000;
        }
        else
        {
          v62 = (int)v61;
        }
        v63 = floorf(v57.f32[1]);
        if (v63 >= 2147500000.0)
        {
          v64 = 0x7FFFFFFF;
        }
        else if (v63 <= -2147500000.0)
        {
          v64 = 0x80000000;
        }
        else
        {
          v64 = (int)v63;
        }
        v65 = (int8x8_t)vcgt_s32((int32x2_t)__PAIR64__(v64, v62), (int32x2_t)0xFE000000FE000000);
        *(int8x8_t *)&v104[0] = vorr_s8((int8x8_t)(*(_QWORD *)&v65 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)__PAIR64__(v64, v62)), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)__PAIR64__(v64, v62), 6uLL)), v65));
        (*(void (**)(uint64_t, WebCore::RenderObject *, _OWORD *, uint64_t))(*(_QWORD *)v54 + 600))(v54, a2, v104, a4);
      }
      while (1)
      {
        v66 = *(unsigned int *)(v54 + 47);
        if (!(v66 | ((unint64_t)*(unsigned __int8 *)(v54 + 51) << 32)))
          goto LABEL_101;
        v54 = *(_QWORD *)((v66 | ((unint64_t)*(unsigned __int8 *)(v54 + 51) << 32)) + 8);
        if (!v54)
          goto LABEL_101;
        v55 = *(_BYTE *)(v54 + 45);
        if ((v55 & 2) == 0)
          goto LABEL_78;
      }
    }
    v51 = *(unsigned __int8 *)(v54 + 51);
  }
LABEL_101:
  if ((*(_WORD *)(a1 + 69) & 0x10) != 0)
  {
    ++dword_1ECE91378;
    v67 = *(_QWORD *)(a1 + 8);
    v68 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
    v69 = (~(v67 << 32) + v67) ^ ((unint64_t)(~(v67 << 32) + v67) >> 22);
    v70 = 9 * ((v69 + ~(v69 << 13)) ^ ((v69 + ~(v69 << 13)) >> 8));
    v71 = (v70 ^ (v70 >> 15)) + ~((v70 ^ (v70 >> 15)) << 27);
    v72 = v68 & ((v71 >> 31) ^ v71);
    v73 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v72);
    if (v73 == -1 || v73 != v67)
    {
      v75 = 1;
      do
      {
        v72 = ((_DWORD)v72 + v75) & v68;
        v76 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v72);
        ++v75;
      }
      while (v76 == -1 || v76 != v67);
    }
    v78 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v72 + 8) + 16);
    if (v78)
    {
      v79 = *v78;
      if (v79)
      {
        v80 = *(_QWORD *)(v79 + 8);
        if (v80)
        {
          if ((*(_BYTE *)(v80 + 20) & 1) != 0)
          {
            if ((*(_BYTE *)(v80 + 45) & 4) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1963DF114);
            }
            v83 = *(_DWORD *)(v80 + 152);
            v82 = *(_DWORD *)(v80 + 156);
          }
          else
          {
            v81 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v80);
            v83 = *((_DWORD *)v81 + 38);
            v82 = *((_DWORD *)v81 + 39);
          }
          v84 = a3->u32[1];
          v26 = __OFADD__(a3->i32[0], v83);
          v85 = a3->i32[0] + v83;
          if (v26)
            v86 = ((unsigned __int32)a3->i32[0] >> 31) + 0x7FFFFFFF;
          else
            v86 = v85;
          v26 = __OFADD__(v84, v82);
          v87 = v84 + v82;
          if (v26)
            v88 = (v84 >> 31) + 0x7FFFFFFF;
          else
            v88 = v87;
          v89 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)a1);
          v91 = *((_DWORD *)v89 + 38);
          v90 = *((_DWORD *)v89 + 39);
          v26 = __OFSUB__(v86, v91);
          v92 = v86 - v91;
          if (v26)
            v92 = (v86 >> 31) + 0x7FFFFFFF;
          v26 = __OFSUB__(v88, v90);
          v93 = v88 - v90;
          if (v26)
            v93 = (v88 >> 31) + 0x7FFFFFFF;
          v94 = (float)v93 * 0.015625;
          v95 = floorf((float)((float)v92 * 0.015625) * 64.0);
          v96 = 0x7FFFFFFFLL;
          v97 = 0x80000000;
          if (v95 > -2147500000.0)
            v97 = (int)v95;
          if (v95 < 2147500000.0)
            v96 = v97;
          v98 = floorf(v94 * 64.0);
          if (v98 >= 2147500000.0)
          {
            v99 = 0x7FFFFFFF00000000;
          }
          else if (v98 <= -2147500000.0)
          {
            v99 = 0x8000000000000000;
          }
          else
          {
            v99 = (unint64_t)(int)v98 << 32;
          }
          *(_QWORD *)&v104[0] = v99 | v96;
          (*(void (**)(uint64_t, WebCore::RenderObject *, _OWORD *, uint64_t))(*(_QWORD *)v80 + 600))(v80, a2, v104, a4);
        }
      }
    }
  }
}

uint64_t WebCore::RenderInline::paintOutline(uint64_t this, WebCore::PaintInfo *a2, int32x2_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  void (**v11)(WebCore::RenderThemeIOS *__hidden);
  void *v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  int v18;
  WebCore::RenderObject *v20;
  int v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  void (**v26)(WebCore::RenderThemeIOS *__hidden);
  float v27;
  uint64_t v28;
  __n128 v29;
  void *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  int v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  unsigned int v67;
  double v68;
  int v69;
  double v70;
  int v71;
  double v72;
  int v73;
  double v74;
  int v75;
  uint64_t v76;
  WTF *v77;
  __int128 v78;
  __int128 *v79;
  uint64_t v80;
  float v81;
  float v82;
  float v83;
  uint64_t v84;
  WebCore::RenderObject *v85;
  int v86;
  __int128 v87;
  _QWORD v88[2];
  int v89;
  WTF *v90;
  WebCore::PaintInfo *v91;
  int v92;
  WTF *v93;
  uint64_t v94;
  _BYTE v95[9];

  v5 = this;
  v6 = *(_QWORD *)(*(_QWORD *)(this + 88) + 16);
  v7 = *(unsigned __int8 *)(v6 + 52);
  if ((v7 & 0xE) != 0 && (v7 & 0xF) != 0)
  {
    v27 = *(float *)(v6 + 48);
    if (((v27 < 3.0) & (v7 >> 4)) != 0 || v27 > 0.0)
      goto LABEL_158;
  }
  if ((*(_BYTE *)(this + 45) & 1) == 0)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(this + 24) + 8);
    if (v9)
    {
      if ((*(_WORD *)(v9 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1963DF350);
      }
      if ((*(_WORD *)(v9 + 30) & 1) != 0)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 8);
        if (*(_BYTE *)(v10 + 3382) || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 1944) + 248) + 1149) & 0x20) != 0)
        {
LABEL_158:
          if ((v7 & 0x10) != 0)
          {
            {
              v11 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
            }
            else
            {
              v28 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
              *(_OWORD *)(v28 + 40) = 0u;
              *(_OWORD *)(v28 + 24) = 0u;
              v11 = &off_1E335BC30;
              *(_QWORD *)v28 = &off_1E335BC30;
            }
            if ((((uint64_t (*)(uint64_t *, uint64_t))v11[23])(&WebCore::RenderTheme::singleton(void)::theme, v5 + 80) & 1) == 0)
            {
              v90 = 0;
              v91 = 0;
              WebCore::RenderInline::addFocusRingRects(v5, (WebCore::RenderObject *)&v90, a3, *((_QWORD *)a2 + 6));
              WebCore::RenderElement::paintFocusRing(v5, (uint64_t)a2, (WebCore::RenderStyle *)(v5 + 80), (uint64_t *)&v90);
              v13 = v90;
              if (v90)
              {
                v90 = 0;
                LODWORD(v91) = 0;
                WTF::fastFree(v13, v12);
              }
            }
          }
          if ((*(_BYTE *)(v5 + 45) & 1) == 0)
          {
            v14 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
            if (v14)
            {
              if ((*(_WORD *)(v14 + 28) & 8) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x1963DF3E4);
              }
              if ((*(_WORD *)(v14 + 30) & 1) != 0)
              {
                v25 = *(_QWORD *)(*(_QWORD *)(v14 + 40) + 8);
                if ((*(_BYTE *)(v25 + 3382)
                   || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v25 + 1944) + 248) + 1149) & 0x20) != 0)
                  && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 88) + 16) + 52) & 0x10) == 0)
                {
                  {
                    v26 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
                  }
                  else
                  {
                    v84 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
                    *(_OWORD *)(v84 + 40) = 0u;
                    *(_OWORD *)(v84 + 24) = 0u;
                    v26 = &off_1E335BC30;
                    *(_QWORD *)v84 = &off_1E335BC30;
                  }
                  if ((((uint64_t (*)(uint64_t *, uint64_t))v26[23])(&WebCore::RenderTheme::singleton(void)::theme, v5 + 80) & 1) == 0)WebCore::RenderObject::addPDFURLRect((WebCore::RenderObject *)v5, a2, (const WebCore::LayoutPoint *)a3);
                }
              }
            }
          }
          this = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 10) + 40))(*((_QWORD *)a2 + 10));
          if ((this & 1) == 0)
          {
            v15 = *(_QWORD *)(*(_QWORD *)(v5 + 88) + 16);
            v16 = *(_BYTE *)(v15 + 52);
            if ((v16 & 0x10) == 0)
            {
              v17 = v16 & 0xE;
              v18 = v16 & 0xF;
              if (v17 && v18 != 0 && *(float *)(v15 + 48) > 0.0)
              {
                this = (uint64_t)WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v5);
                if (this)
                {
                  v86 = *(_DWORD *)(v5 + 20);
                  v85 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v5);
                  v21 = (unsigned __int16)*((_DWORD *)v85 + 31) >> 13;
                  v22 = v21 - 1;
LABEL_147:
                  v23 = 2;
                  switch(v22)
                  {
                    case 0:
                    case 1:
                      goto LABEL_33;
                    case 2:
                    case 4:
                      v21 = 3;
                      goto LABEL_33;
                    case 3:
                      goto LABEL_34;
                    default:
                      v21 = 0;
LABEL_33:
                      v23 = v21;
LABEL_34:
                      v93 = 0;
                      v94 = 0;
                      v24 = WebCore::LayoutIntegration::LineLayout::containing((WebCore::LayoutIntegration::LineLayout *)v5, v20);
                      if (v24)
                      {
                        WebCore::LayoutIntegration::LineLayout::firstInlineBoxFor(v24, (const WebCore::RenderInline *)v5, (unint64_t *)&v90);
                      }
                      else
                      {
                        v90 = *(WTF **)(v5 + 152);
                        v92 = 1;
                      }
                      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v90) & 1) != 0)
                        goto LABEL_51;
                      break;
                  }
                  do
                  {
                    if (v92 == -1)
                      goto LABEL_146;
                    v88[0] = &v87;
                    if ((((uint64_t (*)(_QWORD *, WTF **))off_1E3428F70[v92])(v88, &v90) & 1) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1963DF9E4);
                    }
                    if (v92 == -1)
                      goto LABEL_146;
                    *(_QWORD *)&v87 = v95;
                    ((void (*)(_QWORD *__return_ptr, __int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v92])(v88, &v87, &v90);
                    if (v89 == -1)
                      goto LABEL_146;
                    *(_QWORD *)&v87 = v95;
                    ((void (*)(__int128 *, _QWORD *))off_1E3428F80[v89])(&v87, v88);
                    if (v92 == -1)
                      goto LABEL_146;
                    v32 = v31;
                    *(_QWORD *)&v87 = v95;
                    if ((((uint64_t (*)(__int128 *, WTF **))off_1E3428F70[v92])(&v87, &v90) & 1) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1963DFA04);
                    }
                    if (v92 == -1)
                      goto LABEL_146;
                    *(_QWORD *)&v87 = v95;
                    ((void (*)(__int128 *, WTF **))off_1E3428F38[v92])(&v87, &v90);
                    if (v92 == -1)
                      goto LABEL_146;
                    v35 = v33;
                    v36 = v34;
                    *(_QWORD *)&v87 = v95;
                    v37 = ((unsigned int (*)(__int128 *, WTF **))off_1E3428F48[v92])(&v87, &v90) ? v36 : v35;
                    v38 = v32 >= v37 ? v32 : v37;
                    if (v89 == -1)
                      goto LABEL_146;
                    *(_QWORD *)&v87 = v95;
                    ((void (*)(__int128 *, _QWORD *))off_1E3428F90[v89])(&v87, v88);
                    if (v92 == -1)
                      goto LABEL_146;
                    v40 = v39;
                    *(_QWORD *)&v87 = v95;
                    if ((((uint64_t (*)(__int128 *, WTF **))off_1E3428F70[v92])(&v87, &v90) & 1) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1963DFA24);
                    }
                    if (v92 == -1)
                      goto LABEL_146;
                    *(_QWORD *)&v87 = v95;
                    ((void (*)(__int128 *, WTF **))off_1E3428F38[v92])(&v87, &v90);
                    if (v92 == -1)
                      goto LABEL_146;
                    v45 = v41;
                    v46 = v42;
                    v47 = v43;
                    v48 = v44;
                    *(_QWORD *)&v87 = v95;
                    v49 = ((uint64_t (*)(__int128 *, WTF **))off_1E3428F48[v92])(&v87, &v90);
                    v50 = v49 ? v46 : v45;
                    v51 = v49 ? v48 : v47;
                    v52 = v50 + v51;
                    v53 = v52 >= v40 ? v40 : v52;
                    if (v92 == -1)
                      goto LABEL_146;
                    *(_QWORD *)&v87 = v95;
                    if ((((uint64_t (*)(__int128 *, WTF **))off_1E3428F70[v92])(&v87, &v90) & 1) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1963DFA44);
                    }
                    if (v92 == -1)
                      goto LABEL_146;
                    *(_QWORD *)&v87 = v95;
                    ((void (*)(__int128 *, WTF **))off_1E3428F38[v92])(&v87, &v90);
                    if (v92 == -1)
                      goto LABEL_146;
                    v56 = v54;
                    v57 = v55;
                    *(_QWORD *)&v87 = v95;
                    v58 = ((unsigned int (*)(__int128 *, WTF **))off_1E3428F48[v92])(&v87, &v90) ? v56 : v57;
                    if (v92 == -1)
                      goto LABEL_146;
                    *(_QWORD *)&v87 = v95;
                    if ((((uint64_t (*)(__int128 *, WTF **))off_1E3428F70[v92])(&v87, &v90) & 1) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1963DFA64);
                    }
                    if (v92 == -1)
                      goto LABEL_146;
                    *(_QWORD *)&v87 = v95;
                    ((void (*)(__int128 *, WTF **))off_1E3428F38[v92])(&v87, &v90);
                    if (v92 == -1)
                      goto LABEL_146;
                    v61 = v59;
                    v62 = v60;
                    *(_QWORD *)&v87 = v95;
                    if (((unsigned int (*)(__int128 *, WTF **))off_1E3428F48[v92])(&v87, &v90))
                      v63 = v61;
                    else
                      v63 = v62;
                    v64 = v53 - v38;
                    if ((v86 & 0x1000) != 0)
                    {
                      v65 = v38;
                      v66 = v63;
                    }
                    else
                    {
                      v65 = v58;
                      v58 = v38;
                      v66 = v53 - v38;
                      v64 = v63;
                    }
                    if ((v23 & 0xFFFFFFFD) == 1)
                    {
                      v67 = (unsigned __int16)*((_DWORD *)v85 + 31) >> 13;
                      if (v67 <= 5 && ((1 << v67) & 0x2A) != 0)
                      {
                        v80 = 160;
                        if ((*((_DWORD *)v85 + 5) & 0x1000) != 0)
                        {
                          v81 = v65;
                        }
                        else
                        {
                          v80 = 164;
                          v81 = v58;
                        }
                        if ((*((_DWORD *)v85 + 5) & 0x1000) != 0)
                          v82 = v64;
                        else
                          v82 = v66;
                        v83 = (float)((float)*(int *)((char *)v85 + v80) * 0.015625) - (float)(v81 + v82);
                        if ((*((_DWORD *)v85 + 5) & 0x1000) != 0)
                          v65 = v83;
                        else
                          v58 = v83;
                      }
                    }
                    v68 = v65 * 64.0;
                    if (v68 >= 2147483650.0)
                    {
                      v69 = 0x7FFFFFFF;
                    }
                    else if (v68 <= -2147483650.0)
                    {
                      v69 = 0x80000000;
                    }
                    else
                    {
                      v69 = (int)v68;
                    }
                    LODWORD(v87) = v69;
                    v70 = v58 * 64.0;
                    if (v70 >= 2147483650.0)
                    {
                      v71 = 0x7FFFFFFF;
                    }
                    else if (v70 <= -2147483650.0)
                    {
                      v71 = 0x80000000;
                    }
                    else
                    {
                      v71 = (int)v70;
                    }
                    DWORD1(v87) = v71;
                    v72 = v64 * 64.0;
                    if (v72 >= 2147483650.0)
                    {
                      v73 = 0x7FFFFFFF;
                    }
                    else if (v72 <= -2147483650.0)
                    {
                      v73 = 0x80000000;
                    }
                    else
                    {
                      v73 = (int)v72;
                    }
                    DWORD2(v87) = v73;
                    v74 = v66 * 64.0;
                    if (v74 >= 2147483650.0)
                    {
                      v75 = 0x7FFFFFFF;
                    }
                    else if (v74 <= -2147483650.0)
                    {
                      v75 = 0x80000000;
                    }
                    else
                    {
                      v75 = (int)v74;
                    }
                    HIDWORD(v87) = v75;
                    v76 = HIDWORD(v94);
                    if (HIDWORD(v94) == (_DWORD)v94)
                    {
                      v79 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v93, HIDWORD(v94) + 1, (unint64_t)&v87);
                      v76 = HIDWORD(v94);
                      v77 = v93;
                      v78 = *v79;
                    }
                    else
                    {
                      v77 = v93;
                      v78 = v87;
                    }
                    *((_OWORD *)v77 + v76) = v78;
                    ++HIDWORD(v94);
                    if (v89 != -1)
                      ((void (*)(__int128 *, _QWORD *))off_1E3428F18[v89])(&v87, v88);
                    if (v92 == -1)
                    {
LABEL_146:
                      std::__throw_bad_variant_access[abi:sn180100]();
                      goto LABEL_147;
                    }
                    v88[0] = &v87;
                    ((void (*)(_QWORD *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator21traverseNextInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v92])(v88, &v90);
                  }
                  while ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v90) & 1) == 0);
LABEL_51:
                  if (v92 != -1)
                    v29.n128_f64[0] = ((double (*)(_QWORD *, WTF **))off_1E3428F28[v92])(v88, &v90);
                  v90 = (WTF *)v5;
                  v91 = a2;
                  WebCore::BorderPainter::paintOutline((WebCore::BorderPainter *)&v90, a3, (__n128 **)&v93, v29);
                  this = (uint64_t)v93;
                  if (v93)
                  {
                    v93 = 0;
                    LODWORD(v94) = 0;
                    return WTF::fastFree((WTF *)this, v30);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::isEmptyInline(WebCore *this, const WebCore::RenderInline *a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;
  uint64_t v5;

  if (!(*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)))
    return 1;
  v2 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
  if (!v2)
    return 1;
  while (1)
  {
    v3 = *(_DWORD *)(v2 + 20);
    if ((v3 & 0x800) != 0 || (v3 & 0x1800000) == 0x1000000)
      goto LABEL_11;
    if ((*(_BYTE *)(v2 + 45) & 2) == 0)
      break;
    if ((WebCore::RenderText::containsOnlyCollapsibleWhitespace((WebCore::RenderText *)v2) & 1) == 0)
      return 0;
LABEL_11:
    v5 = *(unsigned int *)(v2 + 47);
    if (!(v5 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)))
      return 1;
    v2 = *(_QWORD *)((v5 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)) + 8);
    result = 1;
    if (!v2)
      return result;
  }
  if ((*(_BYTE *)(v2 + 45) & 0x20) != 0)
  {
    result = WebCore::isEmptyInline((WebCore *)v2, a2);
    if (!(_DWORD)result)
      return result;
    goto LABEL_11;
  }
  return 0;
}

uint64_t WebCore::RenderLayer::computeCanBeBackdropRoot(WebCore::RenderLayer *this)
{
  WebCore::RenderElement *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  WebCore::RenderLayer *v10;

  v2 = (WebCore::RenderElement *)*((_QWORD *)this + 4);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 3) + 8) + 40)
                                                                                          + 8)
                                                                              + 528)
                                                                  + 8)
                                                      + 24)
                                          + 8)
                              + 112)
                  + 672) & 0x1000000000) == 0)
    return 0;
  v10 = this;
  if ((*((_BYTE *)this + 24) & 1) != 0)
    return 1;
  v4 = *((_QWORD *)v2 + 11);
  v5 = *(_QWORD *)(v4 + 32);
  if (*(float *)(v5 + 4) < 1.0)
    return 1;
  v6 = *(_QWORD *)(v4 + 40);
  if (*(_DWORD *)(*(_QWORD *)(v6 + 72) + 20))
    return 1;
  if (*(_QWORD *)(v6 + 264))
    return 1;
  if (*(_DWORD *)(*(_QWORD *)(v5 + 32) + 20))
    return 1;
  if ((*(_DWORD *)(v6 + 636) & 0x1F00000) != 0x100000)
    return 1;
  if (WebCore::RenderElement::hasMask(v2))
    return 1;
  v8 = WebCore::RenderElement::requiresRenderingConsolidationForViewTransition(*((WebCore::RenderElement **)v10 + 4), v7);
  v9 = *((_QWORD *)v10 + 4);
  if (v8)
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(v9 + 24) + 8))
      return 1;
  }
  result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 88) + 40) + 200);
  if (result)
    return WebCore::WillChangeData::canBeBackdropRoot((WebCore::WillChangeData *)result);
  return result;
}

WTF *WebCore::RenderLayer::removeReflection(WebCore::RenderLayer *this, WebCore::RenderLayer *a2)
{
  _QWORD *v2;
  uint64_t *v3;
  WTF *result;
  uint64_t v6;

  v3 = (uint64_t *)((char *)this + 208);
  v2 = (_QWORD *)*((_QWORD *)this + 26);
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2[3] + 8) + 40) + 8) + 3405))
  {
    a2 = (WebCore::RenderLayer *)v2[18];
    if (a2)
    {
      WebCore::RenderLayer::removeChild(this, a2);
      v2 = (_QWORD *)*((_QWORD *)this + 26);
    }
  }
  result = (WTF *)v2[4];
  v2[4] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  v6 = *v3;
  *v3 = 0;
  if (v6)
    return (WTF *)WebCore::RenderObjectDeleter::operator()((uint64_t)v3, v6);
  return result;
}

WebCore::RenderLayerScrollableArea *WebCore::RenderLayer::clearLayerScrollableArea(WebCore::RenderLayer *this)
{
  WebCore::RenderLayerScrollableArea *result;

  result = (WebCore::RenderLayerScrollableArea *)*((_QWORD *)this + 33);
  if (result)
  {
    WebCore::RenderLayerScrollableArea::clear(result);
    result = (WebCore::RenderLayerScrollableArea *)*((_QWORD *)this + 33);
    *((_QWORD *)this + 33) = 0;
    if (result)
      return (WebCore::RenderLayerScrollableArea *)(*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)result + 800))(result);
  }
  return result;
}

WebCore::RenderLayerFilters *WebCore::RenderLayer::clearLayerFilters(WebCore::RenderLayer *this, void *a2)
{
  WebCore::RenderLayerFilters *result;
  WTF *v4;
  void *v5;

  result = (WebCore::RenderLayerFilters *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (result)
  {
    WebCore::RenderLayerFilters::~RenderLayerFilters(result, a2);
    return (WebCore::RenderLayerFilters *)WTF::fastFree(v4, v5);
  }
  return result;
}

WebCore::RenderLayer *WebCore::RenderLayer::clearBacking(WebCore::RenderLayer *this)
{
  WebCore::RenderLayer *v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::RenderLayerCompositor *v4;
  unsigned int ***v5;
  const WebCore::FilterOperations *v6;
  const WebCore::GraphicsLayer **v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  WebCore::Page *v11;
  uint64_t v12;
  WebCore::InspectorInstrumentation *v13;
  unsigned int v14;
  uint64_t v15;
  WTF::StringImpl *v16;

  if (*((_QWORD *)this + 32))
  {
    v1 = this;
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 8) + 40) + 8);
    if (!*(_BYTE *)(v2 + 3405))
    {
      v10 = WebCore::RenderView::compositor(*(WebCore::RenderView **)(v2 + 1944));
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8)
                                                                                              + 24)
                                                                                  + 8)
                                                                      + 40)
                                                          + 8)
                                              + 528)
                                  + 8)
                      + 24);
      if (v12)
      {
        v13 = *(WebCore::InspectorInstrumentation **)(v12 + 8);
        v14 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter);
        if (v14 && v13)
        {
          v15 = v10;
          v16 = (WTF::StringImpl *)WebCore::InspectorInstrumentation::instrumentingAgents(v13, v11);
          WebCore::InspectorInstrumentation::renderLayerDestroyedImpl(v16, (uint64_t)v1);
          v10 = v15;
        }
      }
      else
      {
        atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter);
      }
      if (*(WebCore::RenderLayer **)(*(_QWORD *)(v10 + 8) + 144) != v1)
        --*(_DWORD *)(v10 + 200);
    }
    v3 = *((_QWORD *)v1 + 32);
    v4 = (WebCore::RenderLayerCompositor *)WebCore::RenderView::compositor(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 32) + 24) + 8) + 40) + 8) + 1944));
    WebCore::RenderLayerCompositor::removeFromScrollCoordinatedLayers(v4, *(WebCore::RenderLayer **)(v3 + 8));
    WebCore::RenderLayerBacking::clearBackingSharingLayers((void **)v3);
    v7 = (const WebCore::GraphicsLayer **)*((_QWORD *)v1 + 32);
    *((_QWORD *)v1 + 32) = 0;
    if (v7)
    {
      WebCore::RenderLayerBacking::~RenderLayerBacking(v7);
      WTF::fastFree(v8, v9);
    }
    return (WebCore::RenderLayer *)WebCore::RenderLayer::updateFilterPaintingStrategy(v1, v5, v6);
  }
  return this;
}

WTF **std::unique_ptr<WTF::Vector<WebCore::RenderLayer *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~unique_ptr[abi:sn180100](WTF **a1, void *a2)
{
  WTF *v3;
  WTF *v4;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = *(WTF **)v3;
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)v3 = 0;
      *((_DWORD *)v3 + 2) = 0;
      WTF::fastFree(v4, a2);
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

WebCore::RenderLayerCompositor *WebCore::RenderLayer::compositor(WebCore::RenderLayer *this)
{
  WebCore::RenderView *v1;
  WebCore::RenderLayerCompositor *result;
  WebCore::RenderLayerCompositor *v3;
  WebCore::RenderLayerCompositor *v4;
  WTF *v5;
  void *v6;

  v1 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 8)
                                                       + 40)
                                           + 8)
                               + 1944);
  result = (WebCore::RenderLayerCompositor *)*((_QWORD *)v1 + 50);
  if (!result)
  {
    v3 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    result = WebCore::RenderLayerCompositor::RenderLayerCompositor(v3, v1);
    v4 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v1 + 50);
    *((_QWORD *)v1 + 50) = result;
    if (v4)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v4);
      WTF::fastFree(v5, v6);
      return (WebCore::RenderLayerCompositor *)*((_QWORD *)v1 + 50);
    }
  }
  return result;
}

uint64_t WebCore::RenderLayer::setDescendantsNeedCompositingRequirementsTraversal(uint64_t this)
{
  int v1;

  *(_DWORD *)(this + 12) |= 0x10u;
  if ((*(_BYTE *)(this + 24) & 4) != 0)
  {
    this = *(_QWORD *)(this + 40);
    if (this)
    {
LABEL_4:
      do
      {
        v1 = *(_DWORD *)(this + 12);
        if ((v1 & 1) != 0)
          break;
        *(_DWORD *)(this + 12) = v1 | 1;
        if ((*(_BYTE *)(this + 24) & 4) == 0)
        {
          while (1)
          {
            this = *(_QWORD *)(this + 40);
            if (!this)
              return this;
            if ((*(_BYTE *)(this + 24) & 0x4A) != 0)
              goto LABEL_9;
          }
        }
        this = *(_QWORD *)(this + 40);
LABEL_9:
        ;
      }
      while (this);
    }
  }
  else
  {
    while (1)
    {
      this = *(_QWORD *)(this + 40);
      if (!this)
        break;
      if ((*(_BYTE *)(this + 24) & 0x4A) != 0)
        goto LABEL_4;
    }
  }
  return this;
}

uint64_t WebCore::RenderLayer::updateAncestorChainHasBlendingDescendants(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  if (this)
  {
    v1 = this;
    do
    {
      v2 = *(_QWORD *)(v1 + 24);
      if ((v2 & 0x1800000000000) == 0x800000000000)
        break;
      *(_QWORD *)(v1 + 24) = v2 & 0xFFFE7FFFFFFFFFFFLL | 0x800000000000;
      this = WebCore::RenderLayer::updateSelfPaintingLayer(v1);
      if ((*(_BYTE *)(v1 + 24) & 0xA) != 0)
        break;
      v1 = *(_QWORD *)(v1 + 40);
    }
    while (v1);
  }
  return this;
}

uint64_t WebCore::RenderLayer::dirtyVisibleContentStatus(uint64_t this)
{
  uint64_t i;
  uint64_t v2;

  *(_QWORD *)(this + 24) |= 0x40000uLL;
  for (i = *(_QWORD *)(this + 40); i; i = *(_QWORD *)(i + 40))
  {
    v2 = *(_QWORD *)(i + 24);
    if ((v2 & 0x100000) != 0)
      break;
    *(_QWORD *)(i + 24) = v2 | 0x100000;
  }
  return this;
}

_QWORD *WebCore::RenderLayer::dirtyNormalFlowList(_QWORD *this, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v2 = this;
  v3 = this[13];
  if (v3 && *(_DWORD *)(v3 + 8))
  {
    if (*(_DWORD *)(v3 + 12))
      *(_DWORD *)(v3 + 12) = 0;
    this = *(_QWORD **)v3;
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)v3 = 0;
      *(_DWORD *)(v3 + 8) = 0;
      this = (_QWORD *)WTF::fastFree((WTF *)this, a2);
    }
  }
  v4 = v2[3];
  v2[3] = v4 | 0x100;
  if ((v4 & 0x4000000) != 0)
  {
    *((_DWORD *)v2 + 3) |= 4u;
    if ((v4 & 4) != 0)
    {
      v2 = (_QWORD *)v2[5];
      if (v2)
      {
LABEL_12:
        do
        {
          v5 = *((_DWORD *)v2 + 3);
          if ((v5 & 1) != 0)
            break;
          *((_DWORD *)v2 + 3) = v5 | 1;
          if ((v2[3] & 4) == 0)
          {
            while (1)
            {
              v2 = (_QWORD *)v2[5];
              if (!v2)
                return this;
              if ((v2[3] & 0x4A) != 0)
                goto LABEL_16;
            }
          }
          v2 = (_QWORD *)v2[5];
LABEL_16:
          ;
        }
        while (v2);
      }
    }
    else
    {
      while (1)
      {
        v2 = (_QWORD *)v2[5];
        if (!v2)
          break;
        if ((v2[3] & 0x4A) != 0)
          goto LABEL_12;
      }
    }
  }
  return this;
}

WTF *WebCore::RenderLayer::dirtyStackingContextZOrderLists(WTF *this, void *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = this;
  while (1)
  {
    v2 = (WTF *)*((_QWORD *)v2 + 5);
    if (!v2)
      return this;
    if ((*((_BYTE *)v2 + 24) & 0x4A) != 0)
    {
      v3 = *((_QWORD *)v2 + 11);
      if (v3 && *(_DWORD *)(v3 + 8))
      {
        if (*(_DWORD *)(v3 + 12))
          *(_DWORD *)(v3 + 12) = 0;
        this = *(WTF **)v3;
        if (*(_QWORD *)v3)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
          this = (WTF *)WTF::fastFree(this, a2);
        }
      }
      v4 = *((_QWORD *)v2 + 12);
      if (v4 && *(_DWORD *)(v4 + 8))
      {
        if (*(_DWORD *)(v4 + 12))
          *(_DWORD *)(v4 + 12) = 0;
        this = *(WTF **)v4;
        if (*(_QWORD *)v4)
        {
          *(_QWORD *)v4 = 0;
          *(_DWORD *)(v4 + 8) = 0;
          this = (WTF *)WTF::fastFree(this, a2);
        }
      }
      v5 = *((_QWORD *)v2 + 3);
      *((_QWORD *)v2 + 3) = v5 | 0x80;
      if ((v5 & 0x4000000) != 0)
      {
        *((_DWORD *)v2 + 3) |= 4u;
        if ((v5 & 4) != 0)
        {
          v2 = (WTF *)*((_QWORD *)v2 + 5);
          if (v2)
          {
LABEL_16:
            while (1)
            {
              v6 = *((_DWORD *)v2 + 3);
              if ((v6 & 1) != 0)
                break;
              *((_DWORD *)v2 + 3) = v6 | 1;
              if ((*((_BYTE *)v2 + 24) & 4) == 0)
              {
                while (1)
                {
                  v2 = (WTF *)*((_QWORD *)v2 + 5);
                  if (!v2)
                    return this;
                  if ((*((_BYTE *)v2 + 24) & 0x4A) != 0)
                    goto LABEL_20;
                }
              }
              v2 = (WTF *)*((_QWORD *)v2 + 5);
LABEL_20:
              if (!v2)
                return this;
            }
          }
        }
        else
        {
          while (1)
          {
            v2 = (WTF *)*((_QWORD *)v2 + 5);
            if (!v2)
              break;
            if ((*((_BYTE *)v2 + 24) & 0x4A) != 0)
              goto LABEL_16;
          }
        }
      }
      return this;
    }
  }
}

double WebCore::RenderLayer::removeOnlyThisLayer(uint64_t a1, int a2)
{
  WTF **v3;
  uint64_t v5;
  WebCore::RenderLayer *v6;
  uint64_t v7;
  WebCore::RenderLayer *v8;
  void *v9;
  double result;
  WebCore::RenderLayer *v11;
  WebCore::RenderLayer *v12;

  v3 = *(WTF ***)(a1 + 40);
  if (v3)
  {
    if (!a2)
      WebCore::RenderView::layerChildrenChangedDuringStyleChange(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8)+ 40)+ 8)+ 1944), v3);
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 20) &= ~0x8000u;
    v5 = WebCore::RenderView::compositor(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8)
                                                                                         + 40)
                                                                             + 8)
                                                                 + 1944));
    WebCore::RenderLayerCompositor::layerWillBeRemoved(v5, *(WebCore::RenderLayer **)(a1 + 40), (WebCore::RenderLayer *)a1);
    WebCore::RenderLayer::clearClipRectsIncludingDescendants((WTF *)a1, (void *)4);
    v6 = *(WebCore::RenderLayer **)(a1 + 56);
    v7 = *(_QWORD *)(a1 + 208);
    if (v7)
    {
      v12 = *(WebCore::RenderLayer **)(v7 + 144);
      if (v12)
        WebCore::RenderLayer::removeChild((WebCore::RenderLayer *)a1, v12);
    }
    v8 = *(WebCore::RenderLayer **)(a1 + 64);
    if (v8)
    {
      do
      {
        v11 = (WebCore::RenderLayer *)*((_QWORD *)v8 + 7);
        WebCore::RenderLayer::removeChild((WebCore::RenderLayer *)a1, v8);
        WebCore::RenderLayer::addChild(*(WebCore::RenderLayer **)(a1 + 40), v8, v6);
        *((_QWORD *)v8 + 3) = *((_QWORD *)v8 + 3) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
        v8 = v11;
      }
      while (v11);
    }
    WebCore::RenderLayer::removeChild(*(WebCore::RenderLayer **)(a1 + 40), (WebCore::RenderLayer *)a1);
    return WebCore::RenderLayerModelObject::destroyLayer(*(WebCore::RenderLayerModelObject **)(a1 + 32), v9);
  }
  return result;
}

_QWORD *WebCore::RenderLayer::isStackingContextChanged(WebCore::RenderLayer *this, void *a2)
{
  void *v3;

  WebCore::RenderLayer::dirtyStackingContextZOrderLists(this, a2);
  if ((*((_BYTE *)this + 24) & 0x4A) != 0)
    return WebCore::RenderLayer::dirtyZOrderLists(this, v3);
  else
    return (_QWORD *)WebCore::RenderLayer::clearZOrderLists((uint64_t)this, v3);
}

uint64_t WebCore::RenderLayer::clearZOrderLists(uint64_t this, void *a2)
{
  uint64_t v2;
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;

  v2 = this;
  v3 = *(WTF **)(this + 88);
  *(_QWORD *)(this + 88) = 0;
  if (v3)
  {
    v4 = *(WTF **)v3;
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)v3 = 0;
      *((_DWORD *)v3 + 2) = 0;
      WTF::fastFree(v4, a2);
    }
    this = WTF::fastFree(v3, a2);
  }
  v5 = *(WTF **)(v2 + 96);
  *(_QWORD *)(v2 + 96) = 0;
  if (v5)
  {
    v6 = *(WTF **)v5;
    if (*(_QWORD *)v5)
    {
      *(_QWORD *)v5 = 0;
      *((_DWORD *)v5 + 2) = 0;
      WTF::fastFree(v6, a2);
    }
    return WTF::fastFree(v5, a2);
  }
  return this;
}

_QWORD *WebCore::RenderLayer::dirtyHiddenStackingContextAncestorZOrderLists(_QWORD *this, void *a2)
{
  uint64_t v2;
  void *v3;

  v2 = (uint64_t)this;
  while (1)
  {
    v2 = *(_QWORD *)(v2 + 40);
    if (!v2)
      break;
    if ((*(_BYTE *)(v2 + 24) & 0x4A) != 0)
    {
      this = WebCore::RenderLayer::dirtyZOrderLists((_QWORD *)v2, a2);
      if ((*(_BYTE *)(v2 + 26) & 8) == 0)
      {
        while (1)
        {
          v2 = *(_QWORD *)(v2 + 40);
          if (!v2)
            break;
          if ((*(_BYTE *)(v2 + 24) & 0x4A) != 0)
          {
            this = WebCore::RenderLayer::dirtyZOrderLists((_QWORD *)v2, v3);
            if ((*(_BYTE *)(v2 + 26) & 8) != 0)
              break;
          }
        }
      }
      return this;
    }
  }
  return this;
}

uint64_t WebCore::RenderLayer::updateNormalFlowList(uint64_t this, void *a2)
{
  _QWORD *v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((*(_BYTE *)(this + 25) & 1) != 0)
  {
    v2 = (_QWORD *)this;
    for (i = *(_QWORD *)(this + 64); ; i = *(_QWORD *)(i + 56))
    {
      v11 = i;
      if (!i)
        break;
      if ((*(_BYTE *)(i + 24) & 4) != 0)
      {
        v5 = v2[26];
        if (!v5 || *(_QWORD *)(v5 + 144) != i)
        {
          v6 = v2[13];
          if (!v6)
          {
            v6 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v6 = 0;
            *(_QWORD *)(v6 + 8) = 0;
            this = v2[13];
            v2[13] = v6;
            if (this)
            {
              v7 = *(WTF **)this;
              if (*(_QWORD *)this)
              {
                *(_QWORD *)this = 0;
                *(_DWORD *)(this + 8) = 0;
                v10 = this;
                WTF::fastFree(v7, a2);
                this = v10;
              }
              this = WTF::fastFree((WTF *)this, a2);
              v6 = v2[13];
            }
          }
          v8 = *(unsigned int *)(v6 + 12);
          if ((_DWORD)v8 == *(_DWORD *)(v6 + 8))
          {
            this = WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, v8 + 1, (unint64_t)&v11);
            v8 = *(unsigned int *)(v6 + 12);
            *(_QWORD *)(*(_QWORD *)v6 + 8 * v8) = *(_QWORD *)this;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v6 + 8 * v8) = v11;
          }
          *(_DWORD *)(v6 + 12) = v8 + 1;
          i = v11;
          *(_QWORD *)(v11 + 24) &= ~0x20000000000000uLL;
        }
      }
    }
    v4 = v2[13];
    if (v4)
    {
      v9 = *(unsigned int *)(v4 + 12);
      if (*(_DWORD *)(v4 + 8) > v9)
      {
        this = *(_QWORD *)v4;
        if ((_DWORD)v9)
        {
          *(_DWORD *)(v4 + 8) = v9;
          this = WTF::fastRealloc((WTF *)this, (void *)(8 * v9));
          *(_QWORD *)v4 = this;
        }
        else if (this)
        {
          *(_QWORD *)v4 = 0;
          *(_DWORD *)(v4 + 8) = 0;
          this = WTF::fastFree((WTF *)this, a2);
        }
      }
    }
    v2[3] &= ~0x100uLL;
  }
  return this;
}

WTF **std::unique_ptr<WTF::Vector<WebCore::RenderLayer *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100](WTF **a1, WTF **a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    v5 = *(WTF **)v4;
    if (*(_QWORD *)v4)
    {
      *(_QWORD *)v4 = 0;
      *((_DWORD *)v4 + 2) = 0;
      WTF::fastFree(v5, a2);
    }
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WebCore::RenderLayer::setNeedsCompositingConfigurationUpdate(uint64_t this)
{
  int v1;

  *(_DWORD *)(this + 12) |= 0x80u;
  if ((*(_BYTE *)(this + 24) & 4) != 0)
  {
    this = *(_QWORD *)(this + 40);
    if (this)
    {
LABEL_4:
      do
      {
        v1 = *(_DWORD *)(this + 12);
        if ((v1 & 2) != 0)
          break;
        *(_DWORD *)(this + 12) = v1 | 2;
        if ((*(_BYTE *)(this + 24) & 4) == 0)
        {
          while (1)
          {
            this = *(_QWORD *)(this + 40);
            if (!this)
              return this;
            if ((*(_BYTE *)(this + 24) & 0x4A) != 0)
              goto LABEL_9;
          }
        }
        this = *(_QWORD *)(this + 40);
LABEL_9:
        ;
      }
      while (this);
    }
  }
  else
  {
    while (1)
    {
      this = *(_QWORD *)(this + 40);
      if (!this)
        break;
      if ((*(_BYTE *)(this + 24) & 0x4A) != 0)
        goto LABEL_4;
    }
  }
  return this;
}

uint64_t WebCore::RenderLayer::setDescendantsNeedUpdateBackingAndHierarchyTraversal(uint64_t this)
{
  int v1;

  *(_DWORD *)(this + 12) |= 0x800u;
  if ((*(_BYTE *)(this + 24) & 4) != 0)
  {
    this = *(_QWORD *)(this + 40);
    if (this)
    {
LABEL_4:
      do
      {
        v1 = *(_DWORD *)(this + 12);
        if ((v1 & 2) != 0)
          break;
        *(_DWORD *)(this + 12) = v1 | 2;
        if ((*(_BYTE *)(this + 24) & 4) == 0)
        {
          while (1)
          {
            this = *(_QWORD *)(this + 40);
            if (!this)
              return this;
            if ((*(_BYTE *)(this + 24) & 0x4A) != 0)
              goto LABEL_9;
          }
        }
        this = *(_QWORD *)(this + 40);
LABEL_9:
        ;
      }
      while (this);
    }
  }
  else
  {
    while (1)
    {
      this = *(_QWORD *)(this + 40);
      if (!this)
        break;
      if ((*(_BYTE *)(this + 24) & 0x4A) != 0)
        goto LABEL_4;
    }
  }
  return this;
}

uint64_t WebCore::RenderLayer::collectLayers(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  WTF *v18;
  WebCore::RenderView *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t i;
  uint64_t v26;
  WebCore::RenderLayerCompositor *v27;
  WebCore::RenderLayerCompositor *v28;
  WTF *v29;
  void *v30;
  uint64_t v31;

  result = WebCore::RenderLayer::establishesTopLayer((WebCore::RenderLayer *)a1);
  if ((result & 1) != 0)
    return result;
  v9 = *(_QWORD *)(a1 + 24);
  v10 = v9 & 0x4A;
  if ((v9 & 4) == 0)
  {
    v11 = *(_QWORD *)(a1 + 32);
    v12 = (v9 & 0x4000000080000) != 0;
    if ((v9 & 0x8000000200000) != 0 && v10 != 0)
      v12 = 1;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 24) + 8)
                                                                                          + 40)
                                                                              + 8)
                                                                  + 528)
                                                      + 8)
                                          + 24)
                              + 8)
                  + 1099) | v12)
    {
      if (*(int *)(*(_QWORD *)(*(_QWORD *)(v11 + 88) + 8) + 64) >= 0)
        v14 = a2;
      else
        v14 = a3;
      v15 = *v14;
      if (!*v14)
      {
        result = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)result = 0;
        *(_QWORD *)(result + 8) = 0;
        v17 = (WTF *)*v14;
        *v14 = result;
        if (v17)
        {
          v18 = *(WTF **)v17;
          if (*(_QWORD *)v17)
          {
            *(_QWORD *)v17 = 0;
            *((_DWORD *)v17 + 2) = 0;
            WTF::fastFree(v18, v16);
          }
          result = WTF::fastFree(v17, v16);
          v15 = *v14;
        }
        else
        {
          v15 = result;
        }
      }
      v31 = a1;
      v22 = *(unsigned int *)(v15 + 12);
      if ((_DWORD)v22 == *(_DWORD *)(v15 + 8))
      {
        result = WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15, v22 + 1, (unint64_t)&v31);
        v22 = *(unsigned int *)(v15 + 12);
        *(_QWORD *)(*(_QWORD *)v15 + 8 * v22) = *(_QWORD *)result;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)v15 + 8 * v22) = a1;
      }
      *(_DWORD *)(v15 + 12) = v22 + 1;
      *a4 |= *(_DWORD *)(a1 + 12);
      v9 = *(_QWORD *)(a1 + 24) & 0xFFDFFFFFFFFFFFFFLL;
    }
    else
    {
      if ((v9 & 0x20000000000000) != 0)
        goto LABEL_39;
      WebCore::RenderLayer::removeSelfAndDescendantsFromCompositor((WebCore::RenderLayer *)a1);
      v19 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8)
                                                            + 40)
                                                + 8)
                                    + 1944);
      result = *((_QWORD *)v19 + 50);
      if (!result)
      {
        v27 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        result = WebCore::RenderLayerCompositor::RenderLayerCompositor(v27, v19);
        v28 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v19 + 50);
        *((_QWORD *)v19 + 50) = result;
        if (v28)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v28);
          WTF::fastFree(v29, v30);
          result = *((_QWORD *)v19 + 50);
        }
      }
      if (*(_DWORD *)(result + 200))
      {
        v20 = *(_QWORD *)(a1 + 40);
        if (v20)
        {
          *(_DWORD *)(v20 + 12) |= 0x10u;
          if ((*(_BYTE *)(v20 + 24) & 4) != 0)
          {
            v20 = *(_QWORD *)(v20 + 40);
            if (v20)
            {
LABEL_24:
              do
              {
                v21 = *(_DWORD *)(v20 + 12);
                if ((v21 & 1) != 0)
                  break;
                *(_DWORD *)(v20 + 12) = v21 | 1;
                if ((*(_BYTE *)(v20 + 24) & 4) == 0)
                {
                  while (1)
                  {
                    v20 = *(_QWORD *)(v20 + 40);
                    if (!v20)
                      goto LABEL_37;
                    if ((*(_BYTE *)(v20 + 24) & 0x4A) != 0)
                      goto LABEL_24;
                  }
                }
                v20 = *(_QWORD *)(v20 + 40);
              }
              while (v20);
            }
          }
          else
          {
            while (1)
            {
              v20 = *(_QWORD *)(v20 + 40);
              if (!v20)
                break;
              if ((*(_BYTE *)(v20 + 24) & 0x4A) != 0)
                goto LABEL_24;
            }
          }
        }
      }
LABEL_37:
      v9 = *(_QWORD *)(a1 + 24) | 0x20000000000000;
    }
    *(_QWORD *)(a1 + 24) = v9;
  }
LABEL_39:
  v23 = v9 & 0x8000000200000;
  if (v10)
    v24 = 1;
  else
    v24 = v23 == 0;
  if (!v24)
  {
    for (i = *(_QWORD *)(a1 + 64); i; i = *(_QWORD *)(i + 56))
    {
      v26 = *(_QWORD *)(a1 + 208);
      if (!v26 || *(_QWORD *)(v26 + 144) != i)
        result = WebCore::RenderLayer::collectLayers(i, a2, a3, a4);
    }
  }
  return result;
}

_QWORD *WebCore::RenderLayer::topLayerRenderLayers@<X0>(_QWORD *this@<X0>, const WebCore::RenderView *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  char v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v4 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this[3] + 8) + 40) + 8) + 3096);
  if (v4)
  {
    v5 = 0;
    LODWORD(v6) = 0;
    do
    {
      v7 = *(_QWORD *)(*v4 + 64);
      v8 = v7 & 0xFFFFFFFFFFFFLL;
      if ((v7 & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((v7 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          goto LABEL_36;
        if ((*(_BYTE *)((v7 & 0xFFFFFFFFFFFFLL) + 0x15) & 0x40) != 0)
        {
          v12 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
          v22 = v7 & 0xFFFFFFFFFFFFLL;
          v13 = (v8 + ~(v7 << 32)) ^ ((unint64_t)(v8 + ~(v7 << 32)) >> 22);
          v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
          v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
          v16 = v12 & ((v15 >> 31) ^ v15);
          for (i = 1; ; ++i)
          {
            v18 = v16;
            v19 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v16);
            if (v19 != -1 && *(_QWORD *)(v19 + 8) == v22)
              break;
            v16 = (v18 + i) & v12;
          }
          v9 = *(WTF **)(*(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v18 + 8) + 16);
          if (v9)
          {
            ++*(_DWORD *)v9;
            v20 = *((_QWORD *)v9 + 1);
            if (v20 && (*(_BYTE *)(v20 + 21) & 0x80) != 0 && (v21 = *(_QWORD *)(v20 + 144), *(_QWORD *)(v21 + 40)))
            {
              v23 = v21;
              if ((_DWORD)v6 == *(_DWORD *)(a3 + 8))
              {
                this = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v6 + 1, (unint64_t)&v23);
                v6 = *(unsigned int *)(a3 + 12);
                v5 = *(_QWORD *)a3;
                *(_QWORD *)(*(_QWORD *)a3 + 8 * v6) = *this;
              }
              else
              {
                *(_QWORD *)(v5 + 8 * v6) = v21;
              }
              v10 = 0;
              LODWORD(v6) = v6 + 1;
              *(_DWORD *)(a3 + 12) = v6;
            }
            else
            {
              v10 = 0;
            }
          }
          else
          {
            v10 = 1;
          }
          v8 = v22;
        }
        else
        {
          v9 = 0;
          v10 = 1;
        }
        if ((*(_BYTE *)(v8 + 21) & 0x80) != 0)
        {
          if ((*(_BYTE *)(v8 + 45) & 0x10) == 0)
          {
LABEL_36:
            __break(0xC471u);
            JUMPOUT(0x1963E0C30);
          }
          v11 = *(_QWORD *)(v8 + 144);
          if (*(_QWORD *)(v11 + 40))
          {
            v23 = *(_QWORD *)(v8 + 144);
            if ((_DWORD)v6 == *(_DWORD *)(a3 + 8))
            {
              this = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v6 + 1, (unint64_t)&v23);
              v6 = *(unsigned int *)(a3 + 12);
              v5 = *(_QWORD *)a3;
              *(_QWORD *)(*(_QWORD *)a3 + 8 * v6) = *this;
            }
            else
            {
              *(_QWORD *)(v5 + 8 * v6) = v11;
            }
            LODWORD(v6) = v6 + 1;
            *(_DWORD *)(a3 + 12) = v6;
          }
        }
        if ((v10 & 1) == 0)
        {
          if (*(_DWORD *)v9 == 1)
            this = (_QWORD *)WTF::fastFree(v9, a2);
          else
            --*(_DWORD *)v9;
        }
      }
      v4 = (_QWORD *)v4[2];
    }
    while (v4);
  }
  return this;
}

void **WTF::Vector<WebCore::RenderLayer *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::RenderLayer *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(void **result, void *__src, unsigned int a3)
{
  void **v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  if (a3)
  {
    v4 = result;
    v5 = a3;
    v6 = *((unsigned int *)result + 3);
    v7 = v6 + a3;
    if (v7 > *((unsigned int *)result + 2)
      && (result = WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v6 + a3), v6 = *((unsigned int *)v4 + 3), v7 < v6))
    {
      __break(0xC471u);
    }
    else
    {
      result = (void **)memcpy((char *)*v4 + 8 * v6, __src, 8 * v5);
      *((_DWORD *)v4 + 3) = v7;
    }
  }
  return result;
}

WebCore::RenderLayer *WebCore::RenderLayer::removeSelfAndDescendantsFromCompositor(WebCore::RenderLayer *this)
{
  WebCore::RenderView *v2;
  uint64_t v3;
  WebCore::RenderLayer *result;
  WebCore::RenderLayer *i;
  WebCore::RenderLayerCompositor *v6;
  WebCore::RenderLayerCompositor *v7;
  WTF *v8;
  void *v9;

  if (*((_QWORD *)this + 5))
  {
    v2 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 8)
                                                         + 40)
                                             + 8)
                                 + 1944);
    v3 = *((_QWORD *)v2 + 50);
    if (!v3)
    {
      v6 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
      v3 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v6, v2);
      v7 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
      *((_QWORD *)v2 + 50) = v3;
      if (v7)
      {
        WebCore::RenderLayerCompositor::~RenderLayerCompositor(v7);
        WTF::fastFree(v8, v9);
        v3 = *((_QWORD *)v2 + 50);
      }
    }
    WebCore::RenderLayerCompositor::layerWillBeRemoved(v3, *((WebCore::RenderLayer **)this + 5), this);
  }
  result = WebCore::RenderLayer::clearBacking(this);
  for (i = (WebCore::RenderLayer *)*((_QWORD *)this + 8); i; i = (WebCore::RenderLayer *)*((_QWORD *)i + 7))
    result = (WebCore::RenderLayer *)WebCore::RenderLayer::removeSelfAndDescendantsFromCompositor(i);
  return result;
}

BOOL WebCore::RenderLayer::establishesTopLayer(WebCore::RenderLayer *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  if ((*(_BYTE *)(v1 + 45) & 1) != 0)
    return (*(_QWORD *)(v1 + 96) & 0xF80000000000) == 0x480000000000;
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8);
  if (!v2)
    return (*(_QWORD *)(v1 + 96) & 0xF80000000000) == 0x480000000000;
  if ((*(_WORD *)(v2 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1963E0DE0);
  }
  return (*(_BYTE *)(v2 + 23) & 0x20) != 0 || (*(_QWORD *)(v1 + 96) & 0xF80000000000) == 0x480000000000;
}

void WebCore::RenderLayer::updateZOrderLists(WebCore::RenderLayer *this, void *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  if ((v2 & 0x80) != 0)
  {
    if ((v2 & 0x4A) != 0)
    {
      WebCore::RenderLayer::rebuildZOrderLists(this, a2);
    }
    else
    {
      WebCore::RenderLayer::clearZOrderLists((uint64_t)this, a2);
      *((_QWORD *)this + 3) &= ~0x80uLL;
    }
  }
}

WTF::StringImpl *WebCore::RenderLayer::name(WebCore::RenderLayer *this, _BYTE *a2)
{
  uint64_t (*v3)(_BYTE *);
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)a2 + 632);
  if (a2[46] != 30)
    return (WTF::StringImpl *)v3(a2);
  ((void (*)(WTF::StringImpl **__return_ptr, _BYTE *))v3)(&v6, a2);
  WTF::makeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v6, (int8x16_t *)" (reflection)", 14, this);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

BOOL WebCore::RenderLayer::paintsWithFilters(WebCore::RenderLayer *this, uint64_t a2, const WebCore::FilterOperations *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int ***v8;
  int v9;
  uint64_t v10;

  v4 = *((_QWORD *)this + 4);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 32) + 32);
  v6 = *(_DWORD *)(v5 + 20);
  if (!v6)
    return 0;
  v8 = (unsigned int ***)(v5 + 8);
  v9 = *(unsigned __int8 *)(v4 + 46);
  if ((v9 == 103 || v9 == 83) && v6 == 1 && !*((_BYTE *)**v8 + 12))
    return 0;
  if ((WebCore::CSSFilter::isIdentity((WebCore::CSSFilter *)v4, v8, a3) & 1) != 0)
    return 0;
  v10 = *((_QWORD *)this + 32);
  return !v10 || *(_BYTE *)(v10 + 292) == 0;
}

BOOL WebCore::RenderLayer::requiresFullLayerImageForFilters(WebCore::RenderLayer *this, uint64_t a2, const WebCore::FilterOperations *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int ***v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *((_QWORD *)this + 4);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 32) + 32);
  v6 = *(_DWORD *)(v5 + 20);
  if (!v6)
    return 0;
  v8 = (unsigned int ***)(v5 + 8);
  v9 = *(unsigned __int8 *)(v4 + 46);
  if ((v9 == 103 || v9 == 83) && v6 == 1 && !*((_BYTE *)**v8 + 12))
    return 0;
  if ((WebCore::CSSFilter::isIdentity((WebCore::CSSFilter *)v4, v8, a3) & 1) != 0)
    return 0;
  v10 = *((_QWORD *)this + 32);
  if (v10)
  {
    if (*(_BYTE *)(v10 + 292))
      return 0;
  }
  v11 = *((_QWORD *)this + 31);
  if (!v11)
    return 0;
  v12 = *(_QWORD *)(v11 + 136);
  return v12 && *(_BYTE *)(v12 + 76) != 0;
}

uint64_t WebCore::RenderLayer::willUpdateLayerPositions(uint64_t this, void *a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 32) + 24) + 8) + 40) + 8)
                  + 1496);
  if (v2)
  {
    ++*(_DWORD *)v2;
    this = (uint64_t)WebCore::DocumentMarkerController::invalidateRectsForAllMarkers(v2, a2);
    if (*(_DWORD *)v2)
    {
      --*(_DWORD *)v2;
    }
    else
    {
      this = 286;
      __break(0xC471u);
    }
  }
  return this;
}

uint64_t WebCore::RenderLayer::updateLayerPositionsAfterStyleChange(WebCore::RenderLayer *this, void *a2)
{
  _QWORD *v3;
  unsigned int updated;
  double v5;
  uint64_t result;

  v3 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 8) + 40) + 8)
                  + 1496);
  if (!v3)
    goto LABEL_4;
  ++*(_DWORD *)v3;
  WebCore::DocumentMarkerController::invalidateRectsForAllMarkers(v3, a2);
  if (*(_DWORD *)v3)
  {
    --*(_DWORD *)v3;
LABEL_4:
    updated = WebCore::RenderLayer::flagsForUpdateLayerPositions(this, (WebCore::RenderLayer *)a2);
    return WebCore::RenderLayer::recursiveUpdateLayerPositions((uint64_t)this, updated, 0, v5);
  }
  result = 286;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RenderLayer::recursiveUpdateLayerPositions(uint64_t a1, unsigned int a2, uint64_t a3, double a4)
{
  void *v6;
  uint64_t v7;
  WTF **v8;
  WTF *v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  _QWORD *v15;
  void *v16;
  const WebCore::FilterOperations *v17;
  __int128 v18;
  WTF *v19;
  WebCore::RenderElement *v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t (*v24)();
  uint64_t v25;
  unsigned int v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::RenderView *v43;
  WebCore::RenderLayerCompositor *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  char v50;
  int v51;
  char v52;
  char v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  WebCore::RenderElement *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL4 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  WebCore::RenderLayerScrollableArea *v77;
  int v78;
  int v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  char v93;
  __int128 v94;
  __int128 v95;
  unint64_t v96;
  __int128 v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  WebCore *v101;
  WTF *v102;
  uint64_t v103;
  int v104;
  int v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  int v120;
  WebCore::RenderLayerCompositor *v121;
  WebCore::RenderLayerCompositor *v122;
  WTF *v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  void *v130;
  WTF *v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  WebCore::RenderElement *v139;
  unsigned int v140;
  WTF *v141;
  _BYTE v142[17];
  _BYTE v143[19];
  __int128 v144;
  __int128 v145;
  int v146;
  char v147;
  __int128 v148;
  _BYTE v149[19];
  uint64_t v150;

  v150 = *MEMORY[0x1E0C80C00];
  v140 = a2;
  WebCore::RenderLayer::updateLayerPosition(a1, (WebCore::RenderObject *)&v140, a4);
  v7 = *(_QWORD *)(a1 + 264);
  if (v7)
  {
    if (*(_BYTE *)(v7 + 120))
    {
      *(_QWORD *)v142 = WebCore::ScrollableArea::scrollOffsetFromPosition(*(_QWORD *)(a1 + 264), *(_QWORD *)(v7 + 112));
      v144 = xmmword_1968DF820;
      WebCore::RenderLayerScrollableArea::scrollToOffset((WebCore::ScrollableArea *)v7, (WebCore::IntPoint *)v142, &v144);
      if (*(_BYTE *)(v7 + 120))
        *(_BYTE *)(v7 + 120) = 0;
    }
  }
  v8 = *(WTF ***)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v8)
  {
    v9 = v8[5];
    v8[5] = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
        WTF::fastFree(v9, v6);
      else
        --*(_DWORD *)v9;
    }
    v10 = v8[4];
    v8[4] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
        WTF::fastFree(v10, v6);
      else
        --*(_DWORD *)v10;
    }
    v11 = v8[3];
    v8[3] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
        WTF::fastFree(v11, v6);
      else
        --*(_DWORD *)v11;
    }
    v12 = v8[2];
    v8[2] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v6);
      else
        --*(_DWORD *)v12;
    }
    v13 = v8[1];
    v8[1] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        WTF::fastFree(v13, v6);
      else
        --*(_DWORD *)v13;
    }
    v14 = *v8;
    *v8 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1)
        WTF::fastFree(v14, v6);
      else
        --*(_DWORD *)v14;
    }
    WTF::fastFree((WTF *)v8, v6);
  }
  v15 = *(_QWORD **)(a1 + 264);
  if (v15
    && (v15[16]
     || v15[17]
     || v15[19]
     || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15[12] + 32) + 88) + 32) + 151) & 0x38) != 0))
  {
    v74 = a1;
    do
    {
      v75 = v74;
      v74 = *(_QWORD *)(v74 + 40);
    }
    while (v74);
    v76 = WebCore::RenderLayer::offsetFromAncestor(a1, v75, 0);
    v77 = *(WebCore::RenderLayerScrollableArea **)(a1 + 264);
    *(_QWORD *)&v144 = (((int)(v76 - (v78 & 0xFFFFFFC0) + 32) >> 6) + (int)v76 / 64) | ((unint64_t)(((int)(HIDWORD(v76) - (v79 & 0xFFFFFFC0) + 32) >> 6) + SHIDWORD(v76) / 64) << 32);
    WebCore::RenderLayerScrollableArea::positionOverflowControls(v77, (int32x2_t *)&v144);
  }
  WebCore::RenderLayer::updateDescendantDependentFlags((WebCore::RenderLayer *)a1);
  if ((v140 & 8) != 0)
  {
    WebCore::RenderLayer::updatePagination((WebCore::RenderLayer *)a1, v16);
  }
  else
  {
    v19 = *(WTF **)(a1 + 216);
    *(_QWORD *)(a1 + 216) = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 1)
        WTF::fastFree(v19, v16);
      else
        --*(_DWORD *)v19;
    }
  }
  v20 = *(WebCore::RenderElement **)(a1 + 32);
  v21 = *((unsigned __int8 *)v20 + 46);
  if (v21 != 83)
  {
    if ((*((_BYTE *)v20 + 52) & 7) == 4)
    {
      if (v21 != 85
        && (*((_BYTE *)v20 + 53) & 1) != 0
        && ((v21 - 67) > 0x13 || ((1 << (v21 - 67)) & 0xA0011) == 0))
      {
        goto LABEL_34;
      }
    }
    else if ((v21 - 67) > 0x13 || ((1 << (v21 - 67)) & 0xE0011) == 0)
    {
      goto LABEL_34;
    }
  }
  if (v21 != 83
    && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v20 + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
  }
LABEL_34:
  if ((~*(_DWORD *)(a1 + 24) & 0x80800) != 0)
  {
    *(_QWORD *)(a1 + 24) &= ~0x2000000000000uLL;
    goto LABEL_45;
  }
  v22 = v140;
  if ((_DWORD)a3)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v20 + 3) + 8) + 40) + 8);
    if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 1944) + 248) + 472) & 0xFFF) != *((unsigned __int16 *)v20 + 38) >> 4)
      goto LABEL_45;
    if ((*((_BYTE *)v20 + 45) & 4) != 0)
    {
      if (*((_QWORD *)v20 + 24))
        v24 = WTF::RefPtr<WebCore::RenderOverflow,WTF::RawPtrTraits<WebCore::RenderOverflow>,WTF::DefaultRefDerefTraits<WebCore::RenderOverflow>>::unspecifiedBoolTypeInstance;
      else
        v24 = 0;
      if (v24)
        a3 = 0;
      else
        a3 = a3;
    }
  }
  else
  {
    v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v20 + 3) + 8) + 40) + 8);
  }
  v55 = *(_QWORD *)(v23 + 1944);
  v56 = *(_QWORD *)(v55 + 400);
  if (!v56 || !*(_BYTE *)(v56 + 195))
    goto LABEL_220;
  v57 = v20;
  if ((*((_BYTE *)v20 + 45) & 0x10) == 0)
  {
    v84 = *((_QWORD *)v20 + 4);
    if (!v84)
      goto LABEL_220;
    v57 = *(WebCore::RenderElement **)(v84 + 8);
    if (!v57)
      goto LABEL_220;
    v58 = 0;
    while ((*((_BYTE *)v57 + 45) & 0x10) == 0)
    {
      v85 = *((_QWORD *)v57 + 4);
      if (!v85)
        goto LABEL_220;
      v57 = *(WebCore::RenderElement **)(v85 + 8);
      if (!v57)
        goto LABEL_242;
    }
  }
  if ((*((_BYTE *)v57 + 21) & 0x80) == 0)
  {
    v58 = 0;
    do
    {
      v59 = *((_QWORD *)v57 + 4);
      if (!v59)
        goto LABEL_220;
      v57 = *(WebCore::RenderElement **)(v59 + 8);
      if (!v57)
        goto LABEL_220;
      while ((*((_BYTE *)v57 + 45) & 0x10) == 0)
      {
        v86 = *((_QWORD *)v57 + 4);
        if (!v86)
          goto LABEL_220;
        v57 = *(WebCore::RenderElement **)(v86 + 8);
        if (!v57)
          goto LABEL_242;
      }
    }
    while ((*((_BYTE *)v57 + 21) & 0x80) == 0);
  }
  v60 = *((_QWORD *)v57 + 18);
  if (!v60)
  {
LABEL_220:
    v58 = 0;
    goto LABEL_242;
  }
  ++*(_DWORD *)(v60 + 8);
  v61 = *(_QWORD *)(v60 + 24);
  if ((v61 & 0x800) != 0
    && ((v62 = *(_QWORD *)(v60 + 32), (*(_BYTE *)(v62 + 22) & 1) == 0)
     || ((*(_BYTE *)(v62 + 45) & 2) != 0
       ? (v81 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v62 + 32) + 8) + 96))
       : (v81 = *(_QWORD *)(v62 + 96)),
         (v82 = v81 & 0x1C00, v82 == 2048) || !v82)))
  {
    v63 = (WORD1(v61) & 3) - 1 < 2u;
    if (*(_BYTE *)(v62 + 46) == 49)
      v63 = 0;
  }
  else
  {
    v63 = 0;
  }
  v64 = *(_QWORD *)(v60 + 256);
  if (!v64 || !*(_BYTE *)(v64 + 291))
  {
    v65 = *(_QWORD *)(v60 + 80);
    if (v65)
    {
      v66 = *(_QWORD *)(v65 + 8);
      if (v66)
        goto LABEL_161;
    }
    if ((v61 & 4) == 0)
    {
      v66 = v60;
      while (1)
      {
        v66 = *(_QWORD *)(v66 + 40);
        if (!v66)
          break;
        if ((*(_BYTE *)(v66 + 24) & 0x4A) != 0)
          goto LABEL_139;
      }
LABEL_239:
      v58 = 0;
      goto LABEL_240;
    }
    v66 = *(_QWORD *)(v60 + 40);
    if (!v66)
      goto LABEL_239;
    while (1)
    {
LABEL_139:
      if (v63)
      {
        v63 = 1;
      }
      else
      {
        v67 = *(_QWORD *)(v66 + 24);
        if ((v67 & 0x800) != 0)
        {
          v68 = *(_QWORD *)(v66 + 32);
          if ((*(_BYTE *)(v68 + 22) & 1) == 0
            || ((*(_BYTE *)(v68 + 45) & 2) != 0
              ? (v70 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v68 + 32) + 8) + 96))
              : (v70 = *(_QWORD *)(v68 + 96)),
                (v71 = v70 & 0x1C00, v71 == 2048) || !v71))
          {
            v63 = (WORD1(v67) & 3) - 1 < 2u;
            if (*(_BYTE *)(v68 + 46) == 49)
              v63 = 0;
            v69 = *(_QWORD *)(v66 + 256);
            if (!v69)
              goto LABEL_152;
            goto LABEL_157;
          }
        }
        v63 = 0;
      }
      v69 = *(_QWORD *)(v66 + 256);
      if (!v69)
        goto LABEL_152;
LABEL_157:
      if (*(_BYTE *)(v69 + 291))
        goto LABEL_161;
LABEL_152:
      v72 = *(_QWORD *)(v66 + 80);
      if (v72)
      {
        v73 = *(_QWORD *)(v72 + 8);
        if (v73)
        {
          v66 = v73;
          goto LABEL_161;
        }
      }
      if ((*(_BYTE *)(v66 + 24) & 4) == 0)
      {
        while (1)
        {
          v66 = *(_QWORD *)(v66 + 40);
          if (!v66)
            goto LABEL_239;
          if ((*(_BYTE *)(v66 + 24) & 0x4A) != 0)
            goto LABEL_139;
        }
      }
      v66 = *(_QWORD *)(v66 + 40);
      if (!v66)
        goto LABEL_239;
    }
  }
  v66 = v60;
LABEL_161:
  v58 = *(_QWORD *)(v66 + 32);
  if (v58)
    ++*(_DWORD *)(v58 + 16);
  if (v63
    && (*((_BYTE *)v20 + 45) & 2) == 0
    && (*((_BYTE *)v20 + 45) & 0x10) == 0
    && (*((_DWORD *)v20 + 5) & 0x8000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1963E18E0);
  }
LABEL_240:
  v91 = *(_DWORD *)(v60 + 8);
  if (!v91)
  {
    __break(0xC471u);
    JUMPOUT(0x1963E1EFCLL);
  }
  *(_DWORD *)(v60 + 8) = v91 - 1;
LABEL_242:
  if (!*(_BYTE *)(v55 + 440))
    goto LABEL_243;
  v139 = v20;
  v112 = WebCore::RenderObject::enclosingLayer(v20);
  v20 = v139;
  if (!v112)
    goto LABEL_243;
  v113 = v22;
  ++*(_DWORD *)(v112 + 8);
  v114 = WebCore::RenderLayer::enclosingFilterLayer((_QWORD *)v112, 0, v17);
  if (!v114)
  {
    v132 = *(_DWORD *)(v112 + 8);
    if (!v132)
      goto LABEL_370;
    *(_DWORD *)(v112 + 8) = v132 - 1;
    v20 = v139;
LABEL_243:
    if ((*((_BYTE *)v20 + 23) & 0x10) == 0)
      goto LABEL_244;
    v125 = (*(uint64_t (**)(WebCore::RenderElement *))(*(_QWORD *)v20 + 648))(v20);
    if (!v125)
      goto LABEL_244;
    v126 = v125;
    ++*(_DWORD *)(v125 + 16);
    if (v58)
    {
      if ((*(_BYTE *)(v58 + 23) & 0x10) != 0)
      {
        v135 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 648))(v58);
        if (v135)
        {
          ++*(_DWORD *)(v135 + 16);
          if (v135 == v126)
          {
            v138 = *(_DWORD *)(v126 + 16);
            if (v138)
            {
              *(_DWORD *)(v126 + 16) = v138 - 1;
              if (v138 == 1)
              {
                __break(0xC471u);
                JUMPOUT(0x1963E2434);
              }
              *(_DWORD *)(v126 + 16) = v138 - 2;
              goto LABEL_347;
            }
            goto LABEL_399;
          }
          v136 = *(_DWORD *)(v58 + 16);
          if (v136)
          {
            *(_DWORD *)(v58 + 16) = v136 - 1;
            v137 = *(_DWORD *)(v135 + 16);
            if (v137)
            {
              *(_DWORD *)(v135 + 16) = v137 - 1;
              goto LABEL_346;
            }
LABEL_399:
            __break(0xC471u);
            JUMPOUT(0x1963E2414);
          }
LABEL_393:
          __break(0xC471u);
          JUMPOUT(0x1963E23BCLL);
        }
      }
      v127 = *(_DWORD *)(v58 + 16);
      if (!v127)
        goto LABEL_393;
      *(_DWORD *)(v58 + 16) = v127 - 1;
    }
LABEL_346:
    v58 = v126;
    goto LABEL_347;
  }
  v115 = v114;
  ++*((_DWORD *)v114 + 2);
  if ((*(_BYTE *)(v112 + 26) & 3u) - 1 <= 1 && (*((_BYTE *)v139 + 45) & 2) == 0)
    WebCore::RenderElement::hasSelfPaintingLayer(v139);
  v116 = v115[4];
  v117 = v116;
  if (v116)
    ++*(_DWORD *)(v116 + 16);
  v118 = *((_DWORD *)v115 + 2);
  if (!v118)
  {
    __break(0xC471u);
    JUMPOUT(0x1963E22B0);
  }
  *((_DWORD *)v115 + 2) = v118 - 1;
  v119 = *(_DWORD *)(v112 + 8);
  if (!v119)
  {
LABEL_370:
    __break(0xC471u);
    JUMPOUT(0x1963E2290);
  }
  *(_DWORD *)(v112 + 8) = v119 - 1;
  if (v58)
  {
    v120 = *(_DWORD *)(v58 + 16);
    if (!v120)
    {
      __break(0xC471u);
      JUMPOUT(0x1963E22D0);
    }
    *(_DWORD *)(v58 + 16) = v120 - 1;
  }
  v58 = v117;
  v22 = v113;
LABEL_244:
  if (!v58)
    goto LABEL_245;
LABEL_347:
  v128 = v58;
  v58 = *(_QWORD *)(v58 + 8);
  if (!v58)
  {
    v58 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v58 = 1;
    *(_QWORD *)(v58 + 8) = v128;
    v131 = *(WTF **)(v128 + 8);
    *(_QWORD *)(v128 + 8) = v58;
    if (v131)
    {
      if (*(_DWORD *)v131 == 1)
      {
        WTF::fastFree(v131, v130);
        v58 = *(_QWORD *)(v128 + 8);
        if (!v58)
          goto LABEL_349;
      }
      else
      {
        --*(_DWORD *)v131;
      }
    }
  }
  ++*(_DWORD *)v58;
LABEL_349:
  v129 = *(_DWORD *)(v128 + 16);
  if (!v129)
  {
    __break(0xC471u);
    JUMPOUT(0x1963E2254);
  }
  *(_DWORD *)(v128 + 16) = v129 - 1;
LABEL_245:
  v92 = *(_QWORD *)(a1 + 24);
  if ((v92 & 0x2000000000000) != 0)
  {
    v93 = *(_BYTE *)(a1 + 112);
    v18 = *(_OWORD *)(a1 + 113);
    v94 = *(_OWORD *)(a1 + 129);
    v148 = v18;
    *(_OWORD *)v149 = v94;
    *(_DWORD *)&v149[15] = *(_DWORD *)(a1 + 144);
  }
  else
  {
    v93 = 0;
  }
  if (v58)
    v16 = *(void **)(v58 + 8);
  else
    v16 = 0;
  if ((v92 & 0x800) != 0)
  {
    (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 32) + 464))(&v144);
    *(_QWORD *)&v18 = v144;
    v95 = v145;
    *(_OWORD *)(a1 + 112) = v144;
    *(_OWORD *)(a1 + 128) = v95;
    *(_DWORD *)(a1 + 144) = v146;
    v96 = *(_QWORD *)(a1 + 24) | 0x2000000000000;
  }
  else
  {
    v96 = v92 & 0xFFFDFFFFFFFFFFFFLL;
  }
  *(_QWORD *)(a1 + 24) = v96;
  if ((v96 & 0x2000000000000) != 0)
  {
    v18 = *(_OWORD *)(a1 + 112);
    v97 = *(_OWORD *)(a1 + 128);
    v144 = v18;
    v145 = v97;
    v146 = *(_DWORD *)(a1 + 144);
    v98 = 1;
  }
  else
  {
    v98 = 0;
    LOBYTE(v144) = 0;
  }
  v147 = v98;
  if ((v22 & 1) == 0)
    goto LABEL_254;
  v99 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v99 + 52) & 7) == 4 && (*(_BYTE *)(v99 + 53) & 1) == 0 && (*(_BYTE *)(v99 + 53) & 2) != 0)
  {
    v103 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v99 + 88) + 32) + 32);
    v104 = *(_DWORD *)(v103 + 20);
    if (!v104)
      goto LABEL_254;
    v16 = (void *)(v103 + 8);
    v105 = *(unsigned __int8 *)(v99 + 46);
    if ((v105 == 103 || v105 == 83) && v104 == 1 && !*(_BYTE *)(**(_QWORD **)v16 + 12))
      goto LABEL_254;
    v106 = v96;
    if ((WebCore::CSSFilter::isIdentity((WebCore::CSSFilter *)v99, (unsigned int ***)v16, v17) & 1) != 0)
      goto LABEL_254;
    v96 = v106;
    v107 = *(_QWORD *)(a1 + 256);
    if (v107)
    {
      if (*(_BYTE *)(v107 + 292))
        goto LABEL_254;
    }
  }
  v100 = *(_QWORD *)(a1 + 24);
  if ((v100 & 0x20000) != 0 && (v111 = *(_QWORD *)(a1 + 256)) != 0)
  {
    if ((v96 & 0x2000000000000) == 0 || *(_BYTE *)(v111 + 291))
      goto LABEL_254;
  }
  else if ((v96 & 0x2000000000000) == 0)
  {
LABEL_254:
    if (!v58)
      goto LABEL_45;
    if (*(_DWORD *)v58 != 1)
    {
      --*(_DWORD *)v58;
      goto LABEL_45;
    }
    v102 = (WTF *)v58;
    goto LABEL_280;
  }
  if ((v92 & 0x2000000000000) != 0)
  {
    v142[0] = v93;
    *(_OWORD *)&v142[1] = v148;
    *(_OWORD *)v143 = *(_OWORD *)v149;
    *(_DWORD *)&v143[15] = *(_DWORD *)&v149[15];
  }
  else
  {
    memset(v142, 0, sizeof(v142));
    v143[15] = 0;
  }
  v101 = *(WebCore **)(a1 + 32);
  v141 = (WTF *)v58;
  WebCore::RenderElement::repaintAfterLayoutIfNeeded(v101, &v141, (const WebCore::FillLayer *)((v100 & 0x30000) == 0x10000), (__int128 *)v142, &v144);
  v102 = v141;
  v141 = 0;
  if (!v102)
    goto LABEL_45;
  if (*(_DWORD *)v102 != 1)
  {
    --*(_DWORD *)v102;
    goto LABEL_45;
  }
LABEL_280:
  WTF::fastFree(v102, v16);
LABEL_45:
  v25 = *(_QWORD *)(a1 + 24);
  v26 = v140;
  *(_QWORD *)(a1 + 24) = v25 & 0xFFFFFFFF1FFCFFFFLL | ((((unint64_t)v140 >> 5) & 7) << 29);
  if (((((v25 & 0x800000) == 0) ^ ((v26 & 0x10) >> 4)) & 1) == 0)
  {
    v108 = *(_QWORD *)(a1 + 32);
    if ((*(_DWORD *)(v108 + 20) & 0x1800000) == 0x1000000)
    {
      if ((*(_BYTE *)(v108 + 45) & 2) != 0)
        v108 = *(_QWORD *)(*(_QWORD *)(v108 + 32) + 8);
      if ((*(_QWORD *)(v108 + 96) & 0x380000) == 0x300000)
      {
        *(_DWORD *)(a1 + 12) |= 0x80u;
        if ((v25 & 4) != 0)
        {
          v109 = *(_QWORD *)(a1 + 40);
          if (v109)
          {
LABEL_291:
            do
            {
              v110 = *(_DWORD *)(v109 + 12);
              if ((v110 & 2) != 0)
                break;
              *(_DWORD *)(v109 + 12) = v110 | 2;
              if ((*(_BYTE *)(v109 + 24) & 4) == 0)
              {
                while (1)
                {
                  v109 = *(_QWORD *)(v109 + 40);
                  if (!v109)
                    goto LABEL_46;
                  if ((*(_BYTE *)(v109 + 24) & 0x4A) != 0)
                    goto LABEL_295;
                }
              }
              v109 = *(_QWORD *)(v109 + 40);
LABEL_295:
              ;
            }
            while (v109);
          }
        }
        else
        {
          v109 = a1;
          while (1)
          {
            v109 = *(_QWORD *)(v109 + 40);
            if (!v109)
              break;
            if ((*(_BYTE *)(v109 + 24) & 0x4A) != 0)
              goto LABEL_291;
          }
        }
      }
    }
  }
LABEL_46:
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 24) & 0xFFFFFFFFEF7FFFFFLL | (v26 << 20) & 0x10000000 | ((v26 & 0x10) << 19);
  result = *(_QWORD *)(a1 + 208);
  if (result)
    result = (uint64_t)WebCore::RenderReplica::layout((WebCore::RenderReplica *)result, v16);
  v28 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v28 + 52) & 7) == 1 && (*(_BYTE *)(v28 + 53) & 2) != 0)
  {
    result = (uint64_t)WebCore::RenderLayer::updatePagination((WebCore::RenderLayer *)a1, v16);
    v140 |= 8u;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
  {
    v29 = *(_QWORD *)(a1 + 32);
    v30 = *(unsigned __int8 *)(v29 + 46);
    if (v30 != 49
      && ((*(_BYTE *)(v29 + 45) & 0x40) == 0 && ((v30 - 36) > 4 || v30 == 38)
       || (*(_BYTE *)(v29 + 22) & 2) == 0))
    {
      v31 = *(_QWORD *)(*(_QWORD *)(v29 + 88) + 40);
      if (!*(_DWORD *)(*(_QWORD *)(v31 + 72) + 20)
        || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 24) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*(_QWORD *)(v29 + 24) + 8))
      {
        if ((*(_BYTE *)(v29 + 45) & 0x40) == 0)
          goto LABEL_58;
        result = *(_QWORD *)(v31 + 200);
        if (!result)
          goto LABEL_58;
        result = WebCore::WillChangeData::createsContainingBlockForOutOfFlowPositioned((WebCore::WillChangeData *)result, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 24) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*(_QWORD *)(v29 + 24) + 8));
        if ((result & 1) == 0)
        {
          v30 = *(unsigned __int8 *)(v29 + 46);
LABEL_58:
          if (v30 != 67 && v30 != 90)
          {
            v49 = *(_QWORD *)(*(_QWORD *)(v29 + 88) + 40);
            v50 = *(_BYTE *)(v49 + 462);
            v51 = *(_BYTE *)(v49 + 642) & 3;
            v52 = v50 | 0x19;
            if (v51 == 1)
              v50 |= 0x15u;
            v53 = v51 == 2 ? v52 : v50;
            if ((v53 & 3) == 0
              || (*(_BYTE *)(v29 + 20) & 1) == 0
              && (result = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v29), !(_DWORD)result)
              || (*(_QWORD *)(v29 + 96) & 0x1FLL) == 0x19
              || *(unsigned __int8 *)(v29 + 46) - 36 <= 4 && (*(_BYTE *)(v29 + 52) & 7) != 1)
            {
              if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 88) + 40) + 636) & 0xC0000) == 0)
                goto LABEL_71;
              if ((*(_BYTE *)(v29 + 20) & 1) == 0)
              {
                result = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v29);
                if (!(_DWORD)result)
                  goto LABEL_71;
              }
              if ((*(_QWORD *)(v29 + 96) & 0x1FLL) == 0x19)
                goto LABEL_71;
              v54 = *(unsigned __int8 *)(v29 + 46);
              if ((v54 - 36) <= 4)
              {
                if (v54 != 36)
                  goto LABEL_71;
              }
              else if (v54 == 35 || v54 == 63)
              {
                goto LABEL_71;
              }
            }
          }
        }
      }
    }
    v32 = v140;
    v140 |= 0x20u;
    v33 = *(_QWORD **)(a1 + 200);
    if (v33)
    {
      v140 = v32 | 0x60;
      *(_QWORD *)&v18 = v33[2];
      if (*(double *)&v18 != 0.0)
        goto LABEL_314;
      *(_QWORD *)&v18 = v33[3];
      if (*(double *)&v18 != 0.0)
        goto LABEL_314;
      *(_QWORD *)&v18 = v33[6];
      if (*(double *)&v18 != 0.0
        || (*(_QWORD *)&v18 = v33[7], *(double *)&v18 != 0.0)
        || (*(_QWORD *)&v18 = v33[8], *(double *)&v18 != 0.0)
        || (*(_QWORD *)&v18 = v33[9], *(double *)&v18 != 0.0)
        || (*(_QWORD *)&v18 = v33[10], *(double *)&v18 != 1.0)
        || (*(_QWORD *)&v18 = v33[11], *(double *)&v18 != 0.0)
        || (*(_QWORD *)&v18 = v33[14], *(double *)&v18 != 0.0)
        || (*(_QWORD *)&v18 = v33[15], *(double *)&v18 != 1.0))
      {
LABEL_314:
        v140 = v32 | 0xE0;
      }
    }
  }
LABEL_71:
  v34 = *(_QWORD *)(a1 + 32);
  if ((*(_DWORD *)(v34 + 20) & 0x1800000) == 0x1000000)
  {
    v39 = *(_QWORD *)(a1 + 32);
    if ((*(_BYTE *)(v34 + 45) & 2) != 0)
      v39 = *(_QWORD *)(*(_QWORD *)(v34 + 32) + 8);
    if ((*(_QWORD *)(v39 + 96) & 0x380000) == 0x300000)
    {
      v40 = *(_QWORD *)(a1 + 24);
      if ((v40 & 0x20800000) != 0x800000)
      {
        if ((v40 & 0x20000000) != 0)
          goto LABEL_72;
        if ((v40 & 0x800000) == 0)
        {
          if ((*(_BYTE *)(v34 + 45) & 2) != 0)
            v34 = *(_QWORD *)(*(_QWORD *)(v34 + 32) + 8);
          if ((*(_QWORD *)(v34 + 96) & 0x380000) == 0x300000)
          {
            *(_DWORD *)(a1 + 12) |= 0x80u;
            if ((v40 & 4) != 0)
            {
              v133 = *(_QWORD *)(a1 + 40);
              if (v133)
              {
LABEL_382:
                do
                {
                  v134 = *(_DWORD *)(v133 + 12);
                  if ((v134 & 2) != 0)
                    break;
                  *(_DWORD *)(v133 + 12) = v134 | 2;
                  if ((*(_BYTE *)(v133 + 24) & 4) == 0)
                  {
                    while (1)
                    {
                      v133 = *(_QWORD *)(v133 + 40);
                      if (!v133)
                        goto LABEL_84;
                      if ((*(_BYTE *)(v133 + 24) & 0x4A) != 0)
                        goto LABEL_386;
                    }
                  }
                  v133 = *(_QWORD *)(v133 + 40);
LABEL_386:
                  ;
                }
                while (v133);
              }
            }
            else
            {
              v133 = a1;
              while (1)
              {
                v133 = *(_QWORD *)(v133 + 40);
                if (!v133)
                  break;
                if ((*(_BYTE *)(v133 + 24) & 0x4A) != 0)
                  goto LABEL_382;
              }
            }
          }
        }
      }
LABEL_84:
      *(_QWORD *)(a1 + 24) |= 0x800000uLL;
      v140 |= 0x10u;
    }
  }
LABEL_72:
  v35 = *(_QWORD *)(a1 + 264);
  if (v35 && *(_BYTE *)(v35 + 79))
    v140 |= 0x100u;
  v36 = *(_QWORD *)(a1 + 64);
  if (v36)
  {
    do
    {
      result = WebCore::RenderLayer::recursiveUpdateLayerPositions(v36, v140, a3);
      v36 = *(_QWORD *)(v36 + 56);
    }
    while (v36);
    v35 = *(_QWORD *)(a1 + 264);
  }
  if (v35)
  {
    result = *(_QWORD *)(v35 + 168);
    if (result)
    {
      v80 = *(_BYTE *)(v35 + 83);
      *(_BYTE *)(v35 + 83) = 1;
      result = (uint64_t)WebCore::RenderMarquee::updateMarqueePosition((WebCore::RenderMarquee *)result);
      *(_BYTE *)(v35 + 83) = v80;
    }
  }
  v37 = *(_QWORD *)(a1 + 32);
  if ((*(_DWORD *)(v37 + 20) & 0x1800000) == 0x1000000)
  {
    v41 = *(_QWORD *)(a1 + 32);
    if ((*(_BYTE *)(v37 + 45) & 2) != 0)
      v41 = *(_QWORD *)(*(_QWORD *)(v37 + 32) + 8);
    if ((*(_QWORD *)(v41 + 96) & 0x380000) == 0x300000)
    {
      v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 24) + 8) + 40) + 8);
      if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 528) + 8) + 24) + 8)
                                  + 112)
                      + 664) & 0x20) != 0)
      {
        v43 = *(WebCore::RenderView **)(v42 + 1944);
        v44 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v43 + 50);
        if (!v44)
        {
          v121 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
          v44 = (WebCore::RenderLayerCompositor *)WebCore::RenderLayerCompositor::RenderLayerCompositor(v121, v43);
          v122 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v43 + 50);
          *((_QWORD *)v43 + 50) = v44;
          if (v122)
          {
            WebCore::RenderLayerCompositor::~RenderLayerCompositor(v122);
            WTF::fastFree(v123, v124);
            v44 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v43 + 50);
          }
        }
        result = WebCore::RenderLayerCompositor::fixedLayerIntersectsViewport(v44, (const WebCore::RenderLayer *)a1, *(double *)&v18);
        v45 = *(_QWORD *)(a1 + 24);
        if (((result ^ ((v45 & 0x400000) == 0)) & 1) == 0)
        {
          v46 = 0x400000;
          if (!(_DWORD)result)
            v46 = 0;
          *(_QWORD *)(a1 + 24) = v45 & 0xFFFFFFFFFFBFFFFFLL | v46;
          *(_DWORD *)(a1 + 12) |= 8u;
          if ((v45 & 4) != 0)
          {
            v47 = *(_QWORD *)(a1 + 40);
            if (v47)
            {
LABEL_97:
              do
              {
                v48 = *(_DWORD *)(v47 + 12);
                if ((v48 & 1) != 0)
                  break;
                *(_DWORD *)(v47 + 12) = v48 | 1;
                if ((*(_BYTE *)(v47 + 24) & 4) == 0)
                {
                  while (1)
                  {
                    v47 = *(_QWORD *)(v47 + 40);
                    if (!v47)
                      goto LABEL_78;
                    if ((*(_BYTE *)(v47 + 24) & 0x4A) != 0)
                      goto LABEL_101;
                  }
                }
                v47 = *(_QWORD *)(v47 + 40);
LABEL_101:
                ;
              }
              while (v47);
            }
          }
          else
          {
            v47 = a1;
            while (1)
            {
              v47 = *(_QWORD *)(v47 + 40);
              if (!v47)
                break;
              if ((*(_BYTE *)(v47 + 24) & 0x4A) != 0)
                goto LABEL_97;
            }
          }
        }
      }
    }
  }
LABEL_78:
  v38 = *(uint64_t **)(a1 + 256);
  if (v38)
  {
    v83 = v140;
    result = WebCore::RenderLayerBacking::updateCompositedBounds((WebCore::RenderLayerBacking *)v38, *(double *)&v18);
    if ((_DWORD)result)
    {
      v87 = v38[1];
      *(_DWORD *)(v87 + 12) |= 0x40u;
      if ((*(_BYTE *)(v87 + 24) & 4) != 0)
      {
        v88 = *(_QWORD *)(v87 + 40);
        if (v88)
        {
LABEL_228:
          do
          {
            v89 = *(_DWORD *)(v88 + 12);
            if ((v89 & 2) != 0)
              break;
            *(_DWORD *)(v88 + 12) = v89 | 2;
            if ((*(_BYTE *)(v88 + 24) & 4) == 0)
            {
              while (1)
              {
                v88 = *(_QWORD *)(v88 + 40);
                if (!v88)
                  goto LABEL_229;
                if ((*(_BYTE *)(v88 + 24) & 0x4A) != 0)
                  goto LABEL_308;
              }
            }
            v88 = *(_QWORD *)(v88 + 40);
LABEL_308:
            ;
          }
          while (v88);
        }
      }
      else
      {
        v88 = v87;
        while (1)
        {
          v88 = *(_QWORD *)(v88 + 40);
          if (!v88)
            break;
          if ((*(_BYTE *)(v88 + 24) & 0x4A) != 0)
            goto LABEL_228;
        }
      }
LABEL_229:
      *(_DWORD *)(v87 + 12) |= 0x400u;
      if ((*(_BYTE *)(v87 + 24) & 4) != 0)
      {
        v87 = *(_QWORD *)(v87 + 40);
        if (v87)
        {
LABEL_232:
          do
          {
            v90 = *(_DWORD *)(v87 + 12);
            if ((v90 & 2) != 0)
              break;
            *(_DWORD *)(v87 + 12) = v90 | 2;
            if ((*(_BYTE *)(v87 + 24) & 4) == 0)
            {
              while (1)
              {
                v87 = *(_QWORD *)(v87 + 40);
                if (!v87)
                  goto LABEL_207;
                if ((*(_BYTE *)(v87 + 24) & 0x4A) != 0)
                  goto LABEL_236;
              }
            }
            v87 = *(_QWORD *)(v87 + 40);
LABEL_236:
            ;
          }
          while (v87);
        }
      }
      else
      {
        while (1)
        {
          v87 = *(_QWORD *)(v87 + 40);
          if (!v87)
            break;
          if ((*(_BYTE *)(v87 + 24) & 0x4A) != 0)
            goto LABEL_232;
        }
      }
    }
    else if ((v83 & 4) != 0)
    {
      WebCore::RenderLayer::setNeedsCompositingConfigurationUpdate(v38[1]);
      result = WebCore::RenderLayer::setNeedsCompositingGeometryUpdate(v38[1]);
    }
LABEL_207:
    if ((v83 & 2) != 0)
    {
      result = WebCore::RenderLayerBacking::canIssueSetNeedsDisplay((WebCore::RenderLayerBacking *)v38);
      if ((_DWORD)result)
        return WebCore::RenderLayerBacking::setContentsNeedDisplay((uint64_t)v38, 1);
    }
  }
  return result;
}

BOOL WebCore::RenderObject::isSVGLayerAwareRenderer(WebCore::RenderObject *this)
{
  int v1;
  _BOOL8 result;

  v1 = *((unsigned __int8 *)this + 46);
  if (v1 == 83)
    return 1;
  if ((*((_BYTE *)this + 52) & 7) != 4)
  {
    if ((v1 - 71) >= 0x10u || ((0xE001u >> (v1 - 71)) & 1) == 0)
      return v1 == 67;
    return 1;
  }
  if (v1 == 85 || (*((_BYTE *)this + 53) & 1) == 0)
    return 1;
  result = 1;
  if ((v1 - 71) > 0xF || ((1 << (v1 - 71)) & 0xA001) == 0)
    return v1 == 67;
  return result;
}

BOOL WebCore::RenderLayerCompositor::fixedLayerIntersectsViewport(WebCore::RenderLayerCompositor *this, const WebCore::RenderLayer *a2, double a3)
{
  WebCore::LocalFrameView **v5;
  double v6;
  int8x8_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  BOOL v20;
  float v21;
  float v22;
  float v23;
  float v25;
  float v27;
  float v28;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  int v42;
  int v43;
  float v44;
  float v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  int v53;
  _BOOL8 result;
  BOOL v55;
  int v56;
  signed __int32 v57;
  int v58;
  __int32 v59;
  uint64_t v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  __int128 v69;
  float v70;
  float v71;
  float v72;
  float v73;
  int8x8_t v74;
  uint64_t v75;

  v74 = 0;
  v75 = 0;
  v5 = (WebCore::LocalFrameView **)*((_QWORD *)this + 1);
  if (*((_BYTE *)v5[31] + 321))
  {
    *(_QWORD *)&v69 = WebCore::RenderView::unscaledDocumentRect((WebCore::RenderView *)v5);
    *((_QWORD *)&v69 + 1) = v60;
    *(int8x8_t *)&v6 = WebCore::LayoutRect::LayoutRect(&v74, (int32x2_t *)&v69);
  }
  else
  {
    v6 = WebCore::LocalFrameView::rectForFixedPositionLayout(v5[31], a3);
    v74 = v7;
    v75 = v8;
  }
  *(_QWORD *)&v69 = 0;
  v9 = WebCore::RenderLayer::calculateLayerBounds((uint64_t)a2, a2, &v69, 0xF6u, v6);
  v10 = *((_QWORD *)a2 + 4);
  v61 = (float)(int)v9 * 0.015625;
  v62 = (float)SHIDWORD(v9) * 0.015625;
  v63 = v61 + (float)((float)v11 * 0.015625);
  v64 = v62;
  v65 = v63;
  v66 = v62 + (float)((float)v12 * 0.015625);
  v67 = v61;
  v68 = v66;
  WebCore::RenderObject::localToContainerQuad(v10, &v61, *((_QWORD *)this + 1), 2u, &v69);
  v14 = v70;
  v13 = v71;
  if (v72 >= v70)
    v15 = v70;
  else
    v15 = v72;
  v16 = *((float *)&v69 + 1);
  v17 = *(float *)&v69;
  if (*((float *)&v69 + 2) >= *(float *)&v69)
    v18 = *(float *)&v69;
  else
    v18 = *((float *)&v69 + 2);
  if (v15 >= v18)
    v15 = v18;
  v19 = fabsf(v15);
  v20 = v19 != INFINITY && v19 <= 2147500000.0;
  if (!v20)
    v15 = (float)((SLODWORD(v15) >> 31) ^ 0x7FFFFFFF);
  if (v73 >= v71)
    v21 = v71;
  else
    v21 = v73;
  if (*((float *)&v69 + 3) >= *((float *)&v69 + 1))
    v22 = *((float *)&v69 + 1);
  else
    v22 = *((float *)&v69 + 3);
  if (v21 >= v22)
    v21 = v22;
  v23 = fabsf(v21);
  if (v23 == INFINITY || v23 > 2147500000.0)
    v21 = (float)((SLODWORD(v21) >> 31) ^ 0x7FFFFFFF);
  if (*(float *)&v69 < *((float *)&v69 + 2))
    v17 = *((float *)&v69 + 2);
  if (v70 < v72)
    v14 = v72;
  if (v17 >= v14)
    v14 = v17;
  v25 = fabsf(v14);
  if (v25 == INFINITY || v25 > 2147500000.0)
    v14 = (float)((SLODWORD(v14) >> 31) ^ 0x7FFFFFFF);
  if (*((float *)&v69 + 1) < *((float *)&v69 + 3))
    v16 = *((float *)&v69 + 3);
  if (v71 < v73)
    v13 = v73;
  if (v16 >= v13)
    v27 = v16;
  else
    v27 = v13;
  v28 = fabsf(v27);
  if (v28 == INFINITY || v28 > 2147500000.0)
    v27 = (float)((SLODWORD(v27) >> 31) ^ 0x7FFFFFFF);
  v30 = floorf(v15);
  v31 = 2147500000.0;
  if (v30 < 2147500000.0)
  {
    v31 = -2147500000.0;
    v20 = v30 <= -2147500000.0;
    v32 = (float)(int)v30;
    if (!v20)
      v31 = v32;
  }
  v33 = v14 - v15;
  v34 = v27 - v21;
  v35 = floorf(v21);
  v36 = 2147500000.0;
  if (v35 < 2147500000.0)
  {
    v36 = -2147500000.0;
    if (v35 > -2147500000.0)
      v36 = (float)(int)v35;
  }
  v37 = v21 + v34;
  v38 = ceilf(v15 + v33);
  v39 = 2147500000.0;
  if (v38 < 2147500000.0)
  {
    v39 = -2147500000.0;
    if (v38 > -2147500000.0)
      v39 = (float)(int)v38;
  }
  v40 = ceilf(v37);
  v41 = 2147500000.0;
  if (v40 < 2147500000.0)
  {
    v41 = -2147500000.0;
    if (v40 > -2147500000.0)
      v41 = (float)(int)v40;
  }
  if (v31 >= 2147500000.0)
  {
    v42 = 0x7FFFFFFF;
  }
  else if (v31 <= -2147500000.0)
  {
    v42 = 0x80000000;
  }
  else
  {
    v42 = (int)v31;
  }
  if (v36 >= 2147500000.0)
  {
    v43 = 0x7FFFFFFF;
  }
  else if (v36 <= -2147500000.0)
  {
    v43 = 0x80000000;
  }
  else
  {
    v43 = (int)v36;
  }
  v44 = v39 - v31;
  v45 = v41 - v36;
  if (v44 >= 2147500000.0)
  {
    v46 = 0x7FFFFFFF;
  }
  else if (v44 <= -2147500000.0)
  {
    v46 = 0x80000000;
  }
  else
  {
    v46 = (int)v44;
  }
  if (v45 >= 2147500000.0)
  {
    v47 = 0x7FFFFFFF;
  }
  else if (v45 <= -2147500000.0)
  {
    v47 = 0x80000000;
  }
  else
  {
    v47 = (int)v45;
  }
  v48 = v42 << 6;
  if (v42 < -33554432)
    v48 = 0x80000000;
  if (v42 > 0x1FFFFFF)
    v48 = 0x7FFFFFFF;
  v49 = v43 << 6;
  if (v43 < -33554432)
    v49 = 0x80000000;
  if (v43 > 0x1FFFFFF)
    v49 = 0x7FFFFFFF;
  v50 = v46 << 6;
  if (v46 < -33554432)
    v50 = 0x80000000;
  if (v46 <= 0x1FFFFFF)
    v51 = v50;
  else
    v51 = 0x7FFFFFFF;
  v52 = v47 << 6;
  if (v47 < -33554432)
    v52 = 0x80000000;
  if (v47 <= 0x1FFFFFF)
    v53 = v52;
  else
    v53 = 0x7FFFFFFF;
  if ((int)v75 < 1 || SHIDWORD(v75) < 1)
    return 0;
  result = 0;
  if (v51 < 1 || v53 < 1)
    return result;
  v55 = __OFADD__(v48, v51);
  v56 = v48 + v51;
  if (v55)
    v56 = (v48 >> 31) + 0x7FFFFFFF;
  if (v74.i32[0] >= v56)
    return 0;
  v57 = v74.i32[0] + v75;
  if (__OFADD__(v74.i32[0], (_DWORD)v75))
    v57 = ((unsigned __int32)v74.i32[0] >> 31) + 0x7FFFFFFF;
  if ((int)v48 >= v57)
    return 0;
  v55 = __OFADD__(v49, v53);
  v58 = v49 + v53;
  if (v55)
    v58 = (v49 >> 31) + 0x7FFFFFFF;
  if (v74.i32[1] >= v58)
    return 0;
  v59 = v74.i32[1] + HIDWORD(v75);
  if (__OFADD__(v74.i32[1], HIDWORD(v75)))
    v59 = ((unsigned __int32)v74.i32[1] >> 31) + 0x7FFFFFFF;
  return (int)v49 < v59;
}

unint64_t WebCore::RenderLayer::repaintRectIncludingNonCompositingDescendants(WebCore::RenderLayer *this)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int v3;
  WebCore::RenderLayer *i;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  signed int v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;

  if ((*((_BYTE *)this + 30) & 2) != 0)
  {
    v3 = *((_DWORD *)this + 28);
    v2 = *((unsigned int *)this + 29);
    v1 = *((_QWORD *)this + 15);
  }
  else
  {
    v1 = 0;
    v2 = 0;
    v3 = 0;
  }
  for (i = (WebCore::RenderLayer *)*((_QWORD *)this + 8); i; i = (WebCore::RenderLayer *)*((_QWORD *)i + 7))
  {
    if (!*((_QWORD *)i + 32))
    {
      v5 = WebCore::RenderLayer::repaintRectIncludingNonCompositingDescendants(i);
      if ((_DWORD)v6 || HIDWORD(v6))
      {
        if ((_DWORD)v1 || HIDWORD(v1))
        {
          if ((int)v5 >= (int)v3)
            v7 = v3;
          else
            v7 = v5;
          if (SHIDWORD(v5) >= (int)v2)
            v8 = v2;
          else
            v8 = HIDWORD(v5);
          v9 = v3 + v1;
          if (__OFADD__(v3, (_DWORD)v1))
            v9 = (v3 >> 31) + 0x7FFFFFFF;
          v10 = v5 + v6;
          if (__OFADD__((_DWORD)v5, (_DWORD)v6))
            v10 = (v5 >> 31) + 0x7FFFFFFF;
          if (v9 <= v10)
            v9 = v10;
          v11 = v2 + HIDWORD(v1);
          if (__OFADD__((_DWORD)v2, HIDWORD(v1)))
            v11 = (v2 >> 31) + 0x7FFFFFFF;
          v12 = HIDWORD(v5) + HIDWORD(v6);
          if (__OFADD__(HIDWORD(v5), HIDWORD(v6)))
            v12 = (HIDWORD(v5) >> 31) + 0x7FFFFFFF;
          if (v11 > v12)
            v12 = v11;
          LODWORD(v13) = v9 - v7;
          if (__OFSUB__(v9, v7))
            v13 = (v9 >> 31) + 0x7FFFFFFF;
          else
            v13 = v13;
          v14 = __OFSUB__(v12, (_DWORD)v8);
          v15 = v12 - v8;
          LODWORD(v16) = (v12 >> 31) + 0x7FFFFFFF;
          if (v14)
            v16 = v16;
          else
            v16 = v15;
          v1 = v13 | (v16 << 32);
          v2 = v8;
          v3 = v7;
        }
        else
        {
          v1 = v6;
          v2 = HIDWORD(v5);
          v3 = v5;
        }
      }
    }
  }
  return v3 | (v2 << 32);
}

WebCore::RenderMarquee *WebCore::RenderLayer::updateLayerPositionsAfterOverflowScroll(WebCore::RenderLayer *this, void *a2)
{
  WebCore::RenderLayer::willUpdateLayerPositions((uint64_t)this, a2);
  return WebCore::RenderLayer::recursiveUpdateLayerPositionsAfterScroll((uint64_t)this, 1);
}

WebCore::RenderMarquee *WebCore::RenderLayer::recursiveUpdateLayerPositionsAfterScroll(uint64_t a1, int a2)
{
  WebCore::RenderMarquee *result;
  double v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  int v16;
  uint64_t i;
  uint64_t v18;
  char v19;
  _BYTE v20[8];
  uint64_t v21;
  _OWORD v22[2];
  int v23;

  result = WebCore::RenderLayer::updateDescendantDependentFlags((WebCore::RenderLayer *)a1);
  if ((*(_BYTE *)(a1 + 26) & 0x28) != 0)
  {
    if (WebCore::RenderLayer::updateLayerPosition(a1, 0, v5))
      a2 |= 8u;
    if ((a2 & 0xB) != 0)
      WebCore::RenderLayer::clearClipRects((WTF *)a1, (void *)4);
    v6 = *(_QWORD *)(a1 + 32);
    v7 = (*(_DWORD *)(v6 + 96) >> 19) & 7;
    v8 = v7 == 6 || v7 == 3;
    v9 = a2 | 2;
    if (!v8)
      v9 = a2;
    v10 = (*(_DWORD *)(v6 + 20) >> 14) & 4 | v9;
    if ((v9 & 2) != 0 || ((*(_DWORD *)(v6 + 20) >> 14) & 4 | v9 & 5) == 5)
    {
      v11 = *(_QWORD *)(a1 + 24);
      result = (WebCore::RenderMarquee *)WebCore::RenderLayer::isVisuallyNonEmpty(a1, 0);
      if ((v11 & 0x800) != 0)
      {
        if ((result & 1) != 0)
        {
          result = (WebCore::RenderMarquee *)WebCore::RenderObject::containerForRepaint(*(_QWORD **)(a1 + 32), (uint64_t)v20);
          v12 = *(_QWORD *)(a1 + 24);
          if ((v12 & 0x800) != 0)
          {
            v13 = v21;
            result = (WebCore::RenderMarquee *)(*(_QWORD *(**)(_OWORD *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 464))(v22, *(_QWORD *)(a1 + 32), v21, 1);
            v14 = v22[1];
            *(_OWORD *)(a1 + 112) = v22[0];
            *(_OWORD *)(a1 + 128) = v14;
            *(_DWORD *)(a1 + 144) = v23;
            v15 = *(_QWORD *)(a1 + 24) | 0x2000000000000;
          }
          else
          {
            v15 = v12 & 0xFFFDFFFFFFFFFFFFLL;
            v13 = v21;
          }
          *(_QWORD *)(a1 + 24) = v15;
          if (v13)
          {
            v16 = *(_DWORD *)(v13 + 16);
            if (!v16)
            {
              __break(0xC471u);
              JUMPOUT(0x1963E2C20);
            }
            *(_DWORD *)(v13 + 16) = v16 - 1;
          }
        }
        else
        {
          *(_QWORD *)(a1 + 24) &= ~0x2000000000000uLL;
        }
      }
    }
    else
    {
      result = (WebCore::RenderMarquee *)WebCore::RenderLayer::isVisuallyNonEmpty(a1, 0);
    }
    for (i = *(_QWORD *)(a1 + 64); i; i = *(_QWORD *)(i + 56))
      result = (WebCore::RenderMarquee *)WebCore::RenderLayer::recursiveUpdateLayerPositionsAfterScroll(i, v10);
    v18 = *(_QWORD *)(a1 + 264);
    if (v18)
    {
      result = *(WebCore::RenderMarquee **)(v18 + 168);
      if (result)
      {
        v19 = *(_BYTE *)(v18 + 83);
        *(_BYTE *)(v18 + 83) = 1;
        result = WebCore::RenderMarquee::updateMarqueePosition(result);
        *(_BYTE *)(v18 + 83) = v19;
      }
    }
  }
  return result;
}

BOOL WebCore::RenderLayer::isVisuallyNonEmpty(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  float v11;
  uint64_t v12;

  if ((*(_BYTE *)(a1 + 26) & 8) == 0)
    return 0;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(v3 + 88);
  if (*(float *)(*(_QWORD *)(v4 + 32) + 4) == 0.0)
    return 0;
  if ((*(_BYTE *)(v3 + 52) & 7) == 3
    || (v5 = *(_QWORD **)(a1 + 264)) != 0
    && (v5[16]
     || v5[17]
     || v5[19]
     || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[12] + 32) + 88) + 32) + 151) & 0x38) != 0))
  {
    if (!a2)
      return 1;
LABEL_26:
    *(_DWORD *)a2 = 3;
    return 1;
  }
  if ((*(_BYTE *)(v3 + 23) & 0x60) != 0
    || ((v6 = *(_QWORD *)(v4 + 16), v7 = *(unsigned __int8 *)(v6 + 52), (v7 & 0xE) != 0)
      ? (v8 = (v7 & 0xF) == 0)
      : (v8 = 1),
        !v8 && (v11 = *(float *)(v6 + 48), ((v11 < 3.0) & (v7 >> 4)) != 0 || v11 > 0.0)))
  {
    if (!a2)
      return 1;
    goto LABEL_26;
  }
  v12 = 0;
  if (a2)
    v9 = a2;
  else
    v9 = &v12;
  WebCore::determineNonLayerDescendantsPaintedContent(v3, (WebCore::RenderObject *)((char *)&v12 + 4), v9);
  return (*(_DWORD *)v9 - 3) < 2;
}

uint64_t WebCore::RenderLayer::willRemoveChildWithBlendMode(uint64_t this)
{
  uint64_t i;
  uint64_t v2;

  for (i = *(_QWORD *)(this + 40); i; i = *(_QWORD *)(i + 40))
  {
    v2 = *(_QWORD *)(i + 24);
    if ((v2 & 0x1000000000000) != 0)
      break;
    *(_QWORD *)(i + 24) = v2 | 0x1000000000000;
  }
  return this;
}

float WebCore::RenderLayer::referenceBoxRectForClipPath(uint64_t a1, int *a2, int *a3)
{
  uint64_t v5;
  uint64_t v7;
  BOOL isSVGLayerAwareRenderer;
  BOOL v9;
  int *v10;

  v5 = *(_QWORD *)(a1 + 32);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
  {
    v10 = a3;
    v7 = a1;
    isSVGLayerAwareRenderer = WebCore::RenderObject::isSVGLayerAwareRenderer((WebCore::RenderObject *)v5);
    a3 = v10;
    v9 = isSVGLayerAwareRenderer;
    v5 = *(_QWORD *)(v7 + 32);
    if (v9)
      return (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 752))(v5, 2)
           + (float)((float)*a2 * 0.015625);
  }
  if ((*(_BYTE *)(v5 + 45) & 4) != 0)
    return (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 752))(v5, 2) + (float)((float)*a2 * 0.015625);
  else
    return WebCore::LayoutRect::operator WebCore::FloatRect(a3);
}

double *WebCore::RenderLayer::has3DTransform(double *this)
{
  if (this)
  {
    if (this[2] == 0.0
      && this[3] == 0.0
      && this[6] == 0.0
      && this[7] == 0.0
      && this[8] == 0.0
      && this[9] == 0.0
      && this[10] == 1.0
      && this[11] == 0.0
      && this[14] == 0.0)
    {
      return (double *)(this[15] != 1.0);
    }
    else
    {
      return (double *)1;
    }
  }
  return this;
}

_QWORD *WebCore::RenderLayer::dirty3DTransformedDescendantStatus(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;

  while (1)
  {
    this = (_QWORD *)this[5];
    if (!this)
      return this;
    v1 = this[3];
    if ((v1 & 0x4A) != 0)
    {
      v2 = v1 | 0x1000000;
      this[3] = v1 | 0x1000000;
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(this[4] + 88) + 40) + 636) & 0x380) == 0x80)
      {
LABEL_5:
        this[3] = v2 | 0x1000000;
        while (1)
        {
          this = (_QWORD *)this[5];
          if (!this)
            break;
          v2 = this[3];
          if ((v2 & 0x4A) != 0)
          {
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(this[4] + 88) + 40) + 636) & 0x380) != 0x80)
              return this;
            goto LABEL_5;
          }
        }
      }
      return this;
    }
  }
}

uint64_t WebCore::RenderLayer::setNeedsPostLayoutCompositingUpdateOnAncestors(uint64_t this)
{
  int v1;

  if ((*(_BYTE *)(this + 24) & 4) != 0)
  {
    this = *(_QWORD *)(this + 40);
    if (this)
    {
LABEL_4:
      do
      {
        v1 = *(_DWORD *)(this + 12);
        if ((v1 & 8) != 0)
          break;
        *(_DWORD *)(this + 12) = v1 | 8;
        if ((*(_BYTE *)(this + 24) & 4) == 0)
        {
          while (1)
          {
            this = *(_QWORD *)(this + 40);
            if (!this)
              return this;
            if ((*(_BYTE *)(this + 24) & 0x4A) != 0)
              goto LABEL_9;
          }
        }
        this = *(_QWORD *)(this + 40);
LABEL_9:
        ;
      }
      while (this);
    }
  }
  else
  {
    while (1)
    {
      this = *(_QWORD *)(this + 40);
      if (!this)
        break;
      if ((*(_BYTE *)(this + 24) & 0x4A) != 0)
        goto LABEL_4;
    }
  }
  return this;
}

WTF *WebCore::RenderLayer::forceStackingContextIfNeeded(WTF *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  WTF *v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;

  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v2 | 8;
  if ((v2 & 0x4A) == 0)
  {
    v3 = (uint64_t)this;
    this = WebCore::RenderLayer::dirtyStackingContextZOrderLists(this, a2);
    if ((*(_BYTE *)(v3 + 24) & 0x4A) != 0)
    {
      this = (WTF *)WebCore::RenderLayer::dirtyZOrderLists((_QWORD *)v3, v4);
    }
    else
    {
      v9 = *(WTF **)(v3 + 88);
      *(_QWORD *)(v3 + 88) = 0;
      if (v9)
      {
        v10 = *(WTF **)v9;
        if (*(_QWORD *)v9)
        {
          *(_QWORD *)v9 = 0;
          *((_DWORD *)v9 + 2) = 0;
          WTF::fastFree(v10, v4);
        }
        this = (WTF *)WTF::fastFree(v9, v4);
      }
      v11 = *(WTF **)(v3 + 96);
      *(_QWORD *)(v3 + 96) = 0;
      if (v11)
      {
        v12 = *(WTF **)v11;
        if (*(_QWORD *)v11)
        {
          *(_QWORD *)v11 = 0;
          *((_DWORD *)v11 + 2) = 0;
          WTF::fastFree(v12, v4);
        }
        this = (WTF *)WTF::fastFree(v11, v4);
      }
    }
    v5 = *(_QWORD *)(v3 + 24);
    if ((v5 & 4) != 0)
    {
      *(_QWORD *)(v3 + 24) = v5 & 0xFFFFFFFFFFFFFFFBLL;
      v8 = *(_QWORD **)(v3 + 40);
      if (v8)
        WebCore::RenderLayer::dirtyNormalFlowList(v8, v4);
      this = WebCore::RenderLayer::dirtyStackingContextZOrderLists((WTF *)v3, v4);
    }
    v6 = *(_QWORD *)(v3 + 40);
    if (v6 && (*(_QWORD *)(v3 + 24) & 0x1800000000000) == 0x800000000000)
    {
      do
      {
        v7 = *(_QWORD *)(v6 + 24);
        if ((v7 & 0x1000000000000) != 0)
          break;
        *(_QWORD *)(v6 + 24) = v7 | 0x1000000000000;
        v6 = *(_QWORD *)(v6 + 40);
      }
      while (v6);
    }
  }
  return this;
}

uint64_t WebCore::RenderLayer::enclosingOverflowClipLayer(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
    result = *(_QWORD *)(result + 40);
  for (; result; result = *(_QWORD *)(result + 40))
  {
    v2 = *(_QWORD *)(result + 32);
    if ((*(_BYTE *)(v2 + 22) & 1) != 0)
    {
      if ((*(_BYTE *)(v2 + 45) & 2) != 0)
        v2 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8);
      v3 = *(_QWORD *)(v2 + 96) & 0x1C00;
      if (v3 != 2048)
      {
        if (v3)
          break;
      }
    }
  }
  return result;
}

WebCore::RenderLayer *WebCore::RenderLayer::hasCompositedLayerInEnclosingPaginationChain(WebCore::RenderLayer *this)
{
  uint64_t v1;
  WebCore::RenderLayer *v2;
  WebCore::RenderObject *v4;

  v1 = *((_QWORD *)this + 27);
  if (!v1)
    return 0;
  do
  {
    v2 = *(WebCore::RenderLayer **)(v1 + 8);
    if (!v2)
      break;
    if (*((_QWORD *)v2 + 32))
      return (WebCore::RenderLayer *)1;
    if (v2 == this)
      return 0;
    if (*((_QWORD *)this + 32))
      return (WebCore::RenderLayer *)1;
    if ((*((_BYTE *)this + 24) & 4) == 0)
    {
      v4 = WebCore::RenderObject::containingBlock(*((WebCore::RenderObject **)this + 4));
      if (v4)
      {
        while (*((_BYTE *)v4 + 46) != 49)
        {
          if ((*((_BYTE *)v4 + 21) & 0x80) != 0)
          {
            v2 = 0;
            this = (WebCore::RenderLayer *)*((_QWORD *)v4 + 18);
            goto LABEL_15;
          }
          v4 = WebCore::RenderObject::containingBlock(v4);
          v2 = 0;
          if (!v4)
            return v2;
        }
      }
      return 0;
    }
    v2 = 0;
    this = (WebCore::RenderLayer *)*((_QWORD *)this + 5);
LABEL_15:
    v1 = *((_QWORD *)this + 27);
  }
  while (v1);
  return v2;
}

uint64_t WebCore::RenderLayer::isTransformed(WebCore::RenderLayer *this)
{
  unsigned int v1;
  uint64_t v3;
  _QWORD *v4;

  v1 = *((_DWORD *)this + 5);
  if ((v1 & 0x20000) == 0)
    return 0;
  if ((*((_BYTE *)this + 45) & 2) != 0)
    this = *(WebCore::RenderLayer **)(*((_QWORD *)this + 4) + 8);
  v3 = *((_QWORD *)this + 11);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 40) + 20))
    return 1;
  v4 = *(_QWORD **)(v3 + 40);
  if (v4[41] || v4[38] || v4[39] || v4[40])
    return 1;
  else
    return (v1 >> 20) & 1;
}

uint64_t *WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  void *v5;
  WTF *v6;

  v2 = a1;
  if (a2)
  {
    v3 = *a2;
    if (!*a2)
    {
      v3 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v3 = 1;
      *(_QWORD *)(v3 + 8) = a2;
      v6 = (WTF *)*a2;
      *a2 = v3;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
        {
          WTF::fastFree(v6, v5);
          v3 = *a2;
          if (!*a2)
            goto LABEL_6;
        }
        else
        {
          --*(_DWORD *)v6;
        }
      }
    }
    ++*(_DWORD *)v3;
LABEL_6:
    v2 = a1;
    goto LABEL_3;
  }
  v3 = 0;
LABEL_3:
  *v2 = v3;
  return v2;
}

_QWORD *WebCore::RenderLayer::setHasVisibleContent(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  unint64_t v7;
  int v8;
  _QWORD *v9;
  void *v10;
  uint64_t i;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  _OWORD v15[2];
  int v16;

  v1 = this[3];
  if ((v1 & 0xC0000) != 0x80000)
  {
    v2 = this;
    this[3] = v1 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
    this = WebCore::RenderObject::containerForRepaint((_QWORD *)this[4], (uint64_t)v13);
    v4 = v2[3];
    if ((v4 & 0x800) != 0)
    {
      v5 = v14;
      this = (*(_QWORD *(**)(_OWORD *__return_ptr, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v2[4] + 464))(v15, v2[4], v14, 1);
      v6 = v15[1];
      *((_OWORD *)v2 + 7) = v15[0];
      *((_OWORD *)v2 + 8) = v6;
      *((_DWORD *)v2 + 36) = v16;
      v7 = v2[3] | 0x2000000000000;
    }
    else
    {
      v7 = v4 & 0xFFFDFFFFFFFFFFFFLL;
      v5 = v14;
    }
    v2[3] = v7;
    if (v5)
    {
      v8 = *(_DWORD *)(v5 + 16);
      if (!v8)
      {
        __break(0xC471u);
        JUMPOUT(0x1963E3420);
      }
      *(_DWORD *)(v5 + 16) = v8 - 1;
      v7 = v2[3];
    }
    if ((v7 & 4) == 0)
    {
      v9 = v2;
      while (1)
      {
        v9 = (_QWORD *)v9[5];
        if (!v9)
          break;
        if ((v9[3] & 0x4A) != 0)
        {
          this = WebCore::RenderLayer::dirtyZOrderLists(v9, v3);
          if ((*((_BYTE *)v9 + 26) & 8) == 0)
          {
            while (1)
            {
              v9 = (_QWORD *)v9[5];
              if (!v9)
                break;
              if ((v9[3] & 0x4A) != 0)
              {
                this = WebCore::RenderLayer::dirtyZOrderLists(v9, v10);
                if ((*((_BYTE *)v9 + 26) & 8) != 0)
                  break;
              }
            }
          }
          break;
        }
      }
    }
    for (i = v2[5]; i; i = *(_QWORD *)(i + 40))
    {
      v12 = *(_QWORD *)(i + 24);
      if ((v12 & 0x100000) != 0)
        break;
      *(_QWORD *)(i + 24) = v12 | 0x100000;
    }
  }
  return this;
}

uint64_t WebCore::RenderLayer::updateAncestorDependentState(void)::$_0::operator()(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  WTF *v6;

  if (!a2)
    return result;
  v2 = a2[1];
  if (!v2)
    return result;
  v3 = result;
  while (*(_BYTE *)(v2 + 46) != 69
       && ((*(_BYTE *)(v2 + 52) & 7) != 4 || (*(_BYTE *)(v2 + 53) & 1) != 0 || (*(_BYTE *)(v2 + 53) & 8) == 0)
       && *(_BYTE *)(v2 + 46) != 77)
  {
    v4 = *(_QWORD *)(v2 + 32);
    if (v4)
    {
      v2 = *(_QWORD *)(v4 + 8);
      if (v2)
        continue;
    }
    return result;
  }
  result = *(_QWORD *)(v2 + 8);
  if (result)
    goto LABEL_13;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = v2;
  v6 = *(WTF **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = result;
  if (!v6)
    goto LABEL_13;
  if (*(_DWORD *)v6 != 1)
  {
    --*(_DWORD *)v6;
LABEL_13:
    ++*(_DWORD *)result;
    goto LABEL_14;
  }
  WTF::fastFree(v6, a2);
  result = *(_QWORD *)(v2 + 8);
  if (result)
    goto LABEL_13;
LABEL_14:
  v5 = *(WTF **)(v3 + 224);
  *(_QWORD *)(v3 + 224) = result;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      return WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
  return result;
}

uint64_t WebCore::RenderLayer::computeHasVisibleContent(WebCore::RenderLayer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = *((_QWORD *)this + 4);
  if (((*(_BYTE *)(v2 + 45) & 1) == 0 || *(_BYTE *)(v2 + 46) != 88) && (*((_BYTE *)this + 28) & 2) == 0)
  {
    v3 = *(_QWORD *)(v2 + 32);
    if (!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0 || (*(_BYTE *)(*(_QWORD *)(v4 + 104) + 239) & 0x18) == 0)
    {
      if ((*(_BYTE *)(*(_QWORD *)(v2 + 104) + 239) & 4) == 0 && (*(_BYTE *)(v2 + 120) & 0x30) == 0)
        return 1;
      v5 = *(unsigned int *)(v2 + 64) | ((unint64_t)*(unsigned __int8 *)(v2 + 68) << 32);
      if (v5)
      {
        result = *(_QWORD *)(v5 + 8);
        if (!result)
          return result;
        while (1)
        {
LABEL_10:
          v7 = result;
          v8 = result;
          if ((*(_BYTE *)(result + 45) & 2) != 0)
          {
            v8 = *(_QWORD *)(result + 32);
            if (v8)
              v8 = *(_QWORD *)(v8 + 8);
          }
          if ((*(_BYTE *)(*(_QWORD *)(v8 + 104) + 239) & 4) == 0
            && (*(_BYTE *)(v8 + 120) & 0x30) == 0
            && (*(_BYTE *)(result + 21) & 0x80) == 0)
          {
            return 1;
          }
          if ((*(_BYTE *)(result + 21) & 0x80) == 0)
          {
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 112))(result);
            if (result)
              continue;
          }
          v9 = *(unsigned int *)(v7 + 47);
          if (v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32))
          {
            result = *(_QWORD *)((v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)) + 8);
            if (result)
              continue;
          }
          v10 = *(_QWORD *)(v7 + 32);
          if (v10)
          {
            while (1)
            {
              v11 = *(_QWORD *)(v10 + 8);
              if (!v11 || v11 == *((_QWORD *)this + 4))
                break;
              v13 = *(unsigned int *)(v11 + 47);
              if (v13 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32))
              {
                result = *(_QWORD *)((v13 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32)) + 8);
                if (result)
                  goto LABEL_10;
              }
              v10 = *(_QWORD *)(v11 + 32);
              if (!v10)
                return 0;
            }
          }
          return 0;
        }
      }
    }
  }
  return 0;
}

unint64_t WebCore::RenderLayer::update3DTransformedDescendantStatus(WebCore::RenderLayer *this, void *a2)
{
  unint64_t v3;
  double *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WebCore::RenderLayer **v10;
  uint64_t v11;
  WebCore::RenderLayer *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::RenderLayer **v16;
  uint64_t v17;
  WebCore::RenderLayer *v18;
  int v19;
  uint64_t v20;
  double *v21;
  unint64_t v22;

  v3 = *((_QWORD *)this + 3);
  if ((v3 & 0x1000000) != 0)
  {
    *((_QWORD *)this + 3) = v3 & 0xFFFFFFFFFDFFFFFFLL;
    if ((v3 & 0x80) != 0)
    {
      if ((v3 & 0x4A) != 0)
      {
        WebCore::RenderLayer::rebuildZOrderLists(this, a2);
      }
      else
      {
        WebCore::RenderLayer::clearZOrderLists((uint64_t)this, a2);
        *((_QWORD *)this + 3) &= ~0x80uLL;
      }
    }
    v6 = *((_QWORD *)this + 11);
    if (v6)
    {
      v9 = *(unsigned int *)(v6 + 12);
      if ((_DWORD)v9)
      {
        v10 = *(WebCore::RenderLayer ***)v6;
        v11 = 8 * v9;
        do
        {
          v12 = *v10++;
          v13 = WebCore::RenderLayer::update3DTransformedDescendantStatus(v12);
          v14 = *((_QWORD *)this + 3) & 0x2000000;
          if (v13)
            v14 = 0x2000000;
          *((_QWORD *)this + 3) = v14 | *((_QWORD *)this + 3) & 0xFFFFFFFFFDFFFFFFLL;
          v11 -= 8;
        }
        while (v11);
      }
    }
    v7 = *((_QWORD *)this + 12);
    if (v7 && (v15 = *(unsigned int *)(v7 + 12), (_DWORD)v15))
    {
      v16 = *(WebCore::RenderLayer ***)v7;
      v17 = 8 * v15;
      do
      {
        v18 = *v16++;
        v19 = WebCore::RenderLayer::update3DTransformedDescendantStatus(v18);
        v20 = *((_QWORD *)this + 3) & 0x2000000;
        if (v19)
          v20 = 0x2000000;
        v8 = v20 | *((_QWORD *)this + 3) & 0xFFFFFFFFFDFFFFFFLL;
        *((_QWORD *)this + 3) = v8;
        v17 -= 8;
      }
      while (v17);
    }
    else
    {
      v8 = *((_QWORD *)this + 3);
    }
    v3 = v8 & 0xFFFFFFFFFEFFFFFFLL;
    *((_QWORD *)this + 3) = v3;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 88) + 40) + 636) & 0x380) == 0x80)
  {
    v21 = (double *)*((_QWORD *)this + 25);
    v22 = v3;
    if ((WebCore::RenderLayer::has3DTransform(v21) & 1) != 0)
      return 1;
    else
      return (v22 >> 25) & 1;
  }
  else
  {
    v4 = (double *)*((_QWORD *)this + 25);
    if (v4)
      return v4[2] != 0.0
          || v4[3] != 0.0
          || v4[6] != 0.0
          || v4[7] != 0.0
          || v4[8] != 0.0
          || v4[9] != 0.0
          || v4[10] != 1.0
          || v4[11] != 0.0
          || v4[14] != 0.0
          || v4[15] != 1.0;
    else
      return 0;
  }
}

unint64_t WebCore::RenderBox::topLeftLocationOffset(WebCore::RenderBox *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && (v3 = *(_QWORD *)(v2 + 288)) != 0 && *(_BYTE *)(v3 + 1383))
    return WebCore::RenderBox::topLeftLocationWithFlipping(this);
  else
    return *((_QWORD *)this + 19);
}

uint64_t WebCore::RenderLayer::enclosingAncestorForPosition(uint64_t a1, int a2)
{
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  WebCore::WillChangeData *v10;
  uint64_t v11;
  char v12;
  int v13;
  char v14;
  char v15;
  int v17;
  int isAtomicInlineLevelBox;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  for (i = *(_QWORD *)(a1 + 40); i; i = *(_QWORD *)(i + 40))
  {
    v5 = *(_QWORD *)(a1 + 32);
    if ((*(_BYTE *)(v5 + 45) & 1) == 0)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
      if (v6)
      {
        if ((*(_WORD *)(v6 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1963E3A38);
        }
        if ((*(_BYTE *)(v6 + 23) & 0x20) != 0)
          goto LABEL_39;
      }
    }
    if ((*(_QWORD *)(v5 + 96) & 0xF80000000000) == 0x480000000000)
    {
LABEL_39:
      if ((*(_BYTE *)(i + 24) & 1) != 0)
        return i;
    }
    else
    {
      v7 = *(_QWORD *)(i + 32);
      if (a2 == 2)
      {
        v8 = *(unsigned __int8 *)(v7 + 46);
        if (v8 == 49
          || (*(_BYTE *)(v7 + 98) & 0x38) != 0
          || ((*(_BYTE *)(v7 + 45) & 0x40) != 0 || (v8 - 36) <= 4 && v8 != 38)
          && (*(_BYTE *)(v7 + 22) & 2) != 0)
        {
          return i;
        }
        v9 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 40);
        if (*(_DWORD *)(*(_QWORD *)(v9 + 72) + 20))
        {
          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8))
            return i;
        }
        if ((*(_BYTE *)(v7 + 45) & 0x40) != 0)
        {
          v10 = *(WebCore::WillChangeData **)(v9 + 200);
          if (v10)
          {
            v20 = *(_QWORD *)(i + 32);
            if ((WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(v10, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8)) & 1) != 0)return i;
            v7 = v20;
            v8 = *(unsigned __int8 *)(v20 + 46);
          }
        }
        if (v8 == 67 || v8 == 90)
          return i;
        v11 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 40);
        v12 = *(_BYTE *)(v11 + 462);
        v13 = *(_BYTE *)(v11 + 642) & 3;
        v14 = v12 | 0x19;
        if (v13 == 1)
          v12 |= 0x15u;
        v15 = v13 == 2 ? v14 : v12;
        if ((v15 & 3) != 0)
        {
          if ((*(_BYTE *)(v7 + 20) & 1) != 0
            || (v21 = v7,
                isAtomicInlineLevelBox = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v7),
                v7 = v21,
                isAtomicInlineLevelBox))
          {
            if ((*(_QWORD *)(v7 + 96) & 0x1FLL) != 0x19
              && (*(unsigned __int8 *)(v7 + 46) - 36 > 4 || (*(_BYTE *)(v7 + 52) & 7) == 1))
            {
              return i;
            }
          }
        }
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 40) + 636) & 0xC0000) != 0)
        {
          if ((*(_BYTE *)(v7 + 20) & 1) != 0
            || (v22 = v7, v19 = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v7),
                          v7 = v22,
                          v19))
          {
            if ((*(_QWORD *)(v7 + 96) & 0x1FLL) != 0x19)
            {
              v17 = *(unsigned __int8 *)(v7 + 46);
              if ((v17 - 36) <= 4)
              {
                if (v17 == 36)
                  return i;
              }
              else if (v17 != 63 && v17 != 35)
              {
                return i;
              }
            }
          }
        }
      }
      else if (a2 == 6 && WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)v7))
      {
        return i;
      }
    }
  }
  return i;
}

uint64_t WebCore::RenderLayer::scrollableArea(WebCore::RenderLayer *this)
{
  return *((_QWORD *)this + 33);
}

uint64_t WebCore::RenderLayer::setNeedsCompositingGeometryUpdate(uint64_t this)
{
  int v1;

  *(_DWORD *)(this + 12) |= 0x40u;
  if ((*(_BYTE *)(this + 24) & 4) != 0)
  {
    this = *(_QWORD *)(this + 40);
    if (this)
    {
LABEL_4:
      do
      {
        v1 = *(_DWORD *)(this + 12);
        if ((v1 & 2) != 0)
          break;
        *(_DWORD *)(this + 12) = v1 | 2;
        if ((*(_BYTE *)(this + 24) & 4) == 0)
        {
          while (1)
          {
            this = *(_QWORD *)(this + 40);
            if (!this)
              return this;
            if ((*(_BYTE *)(this + 24) & 0x4A) != 0)
              goto LABEL_9;
          }
        }
        this = *(_QWORD *)(this + 40);
LABEL_9:
        ;
      }
      while (this);
    }
  }
  else
  {
    while (1)
    {
      this = *(_QWORD *)(this + 40);
      if (!this)
        break;
      if ((*(_BYTE *)(this + 24) & 0x4A) != 0)
        goto LABEL_4;
    }
  }
  return this;
}

void WebCore::RenderLayer::perspectiveTransform(WebCore::RenderLayer *this, const WebCore::FloatRect **a2)
{
  const WebCore::FloatRect *v3;
  uint64_t v4;
  WebCore::RenderStyle *v6;
  unint64_t v7;
  char v8;
  int v9;
  int v10;
  int v11;
  const WebCore::RenderLayerModelObject *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  double v24;
  double v25;
  double v26;
  double v27;
  float64x2_t v28;
  float v29;
  int v30;
  int v31;
  int v32;
  _DWORD v33[4];

  v3 = a2[4];
  if ((*((_BYTE *)v3 + 22) & 2) == 0 || (v4 = *((_QWORD *)v3 + 11), *(float *)(*(_QWORD *)(v4 + 40) + 260) == -1.0))
  {
    *((_OWORD *)this + 4) = xmmword_1969FCC00;
    *((float64x2_t *)this + 5) = xmmword_1969FCC10;
    *((_OWORD *)this + 6) = xmmword_1969FCC20;
    *((_OWORD *)this + 7) = unk_1969FCC30;
    *(_OWORD *)this = constinit_103;
    *((_OWORD *)this + 1) = *(_OWORD *)algn_1969FCBD0;
    *((_OWORD *)this + 2) = xmmword_1969FCBE0;
    *((float64x2_t *)this + 3) = xmmword_1969FCBF0;
  }
  else
  {
    v6 = (const WebCore::FloatRect *)((char *)v3 + 80);
    v7 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 40) + 44);
    if (v7 >= 5)
      v8 = 2;
    else
      v8 = 0x705020406uLL >> (8 * v7);
    v29 = (*(float (**)(const WebCore::FloatRect *, _QWORD))(*(_QWORD *)v3 + 752))(v3, v8 & 7);
    v30 = v9;
    v31 = v10;
    v32 = v11;
    WebCore::snapRectToDevicePixelsIfNeeded((WebCore::Page *)&v29, a2[4], v12);
    v33[0] = v13;
    v33[1] = v14;
    v33[2] = v15;
    v33[3] = v16;
    v29 = WebCore::RenderStyle::computePerspectiveOrigin(v6, (const WebCore::FloatRect *)v33);
    v30 = v17;
    WebCore::RenderLayer::transformOriginPixelSnappedIfNeeded((WebCore::RenderLayer *)a2);
    v21 = v18;
    v22 = v19;
    v23 = v20;
    *((_OWORD *)this + 4) = xmmword_1969FCC00;
    *((float64x2_t *)this + 5) = xmmword_1969FCC10;
    *((_OWORD *)this + 6) = xmmword_1969FCC20;
    *((_OWORD *)this + 7) = unk_1969FCC30;
    *(_OWORD *)this = constinit_103;
    *((_OWORD *)this + 1) = *(_OWORD *)algn_1969FCBD0;
    *((_OWORD *)this + 2) = xmmword_1969FCBE0;
    *((float64x2_t *)this + 3) = xmmword_1969FCBF0;
    if (v18 == 0.0 && v19 == 0.0 && v20 == 0.0)
    {
      WebCore::RenderStyle::applyPerspective(v6, (float64x2_t *)this, (const WebCore::FloatPoint *)&v29);
    }
    else
    {
      v24 = (float)-v18;
      v25 = (float)-v19;
      v26 = (float)-v20;
      *((double *)this + 12) = v25 * 0.0 + v24 + v26 * 0.0 + 0.0;
      *((double *)this + 13) = v25 + v24 * 0.0 + v26 * 0.0 + 0.0;
      v27 = v25 * 0.0 + v24 * 0.0;
      *((double *)this + 14) = v27 + v26 + 0.0;
      *((double *)this + 15) = v27 + v26 * 0.0 + 1.0;
      WebCore::RenderStyle::applyPerspective(v6, (float64x2_t *)this, (const WebCore::FloatPoint *)&v29);
      v28 = vaddq_f64(*((float64x2_t *)this + 7), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*((float64x2_t *)this + 3), v22), *((float64x2_t *)this + 1), v21), *((float64x2_t *)this + 5), v23));
      *((float64x2_t *)this + 6) = vaddq_f64(*((float64x2_t *)this + 6), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*((float64x2_t *)this + 2), v22), *(float64x2_t *)this, v21), *((float64x2_t *)this + 4), v23));
      *((float64x2_t *)this + 7) = v28;
    }
  }
}

float WebCore::RenderLayer::perspectiveOrigin(WebCore::RenderLayer *this)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v5;
  int v6;
  unsigned __int8 v7;
  unsigned int v8;
  char v9;
  int v10;
  char v11;
  unsigned int v12;
  char v13;
  _QWORD *v14;
  unint64_t v15;
  char v16;
  int v17;
  int v18;
  unsigned int v20;
  char v21;
  unsigned __int8 v22;
  char v23;
  unsigned int v24;
  char v25;
  char v26;
  char v27;
  unsigned int v28;
  unsigned __int8 v29;
  char v30;
  char v31;
  unsigned int v32;
  int v33;

  v1 = *((_QWORD *)this + 4);
  v2 = 0;
  v3 = 0;
  if ((*(_BYTE *)(v1 + 22) & 2) == 0)
    return *(float *)&v2;
  v5 = *(_QWORD *)(*(_QWORD *)(v1 + 88) + 40);
  LOBYTE(v33) = *(_BYTE *)(v5 + 32);
  v6 = v33;
  v7 = *(_BYTE *)(v5 + 33);
  *(_WORD *)((char *)&v33 + 1) = v7;
  v8 = v33 - 2;
  if (v8 >= 9)
  {
    if (v33 == 11)
    {
      v32 = *(_DWORD *)(v5 + 28);
      v2 = v32;
      WebCore::Length::ref((int *)&v32);
    }
    v9 = 0;
  }
  else if (*(_BYTE *)(v5 + 34))
  {
    v2 = *(_DWORD *)(v5 + 28);
    v9 = 1;
  }
  else
  {
    v9 = 0;
    v2 = *(_DWORD *)(v5 + 28);
  }
  v31 = 0;
  v29 = *(_BYTE *)(v5 + 40);
  v10 = v29;
  v11 = *(_BYTE *)(v5 + 41);
  v30 = v11;
  v12 = v29 - 2;
  if (v12 >= 9)
  {
    if (v29 == 11)
    {
      v28 = *(_DWORD *)(v5 + 36);
      v3 = v28;
      WebCore::Length::ref((int *)&v28);
    }
    v13 = 0;
  }
  else
  {
    v13 = *(_BYTE *)(v5 + 42);
    v3 = *(_DWORD *)(v5 + 36);
    if (v13)
      v13 = 1;
  }
  v20 = 0;
  v23 = 0;
  v21 = v6;
  v22 = v7;
  if (v8 < 9)
  {
    v23 = v9;
LABEL_18:
    v20 = v2;
    goto LABEL_19;
  }
  if (v6 == 11)
    goto LABEL_18;
LABEL_19:
  v24 = 0;
  v27 = 0;
  v25 = v10;
  v26 = v11;
  if (v12 >= 9)
  {
    if (v10 != 11)
      goto LABEL_22;
  }
  else
  {
    v27 = v13;
  }
  v24 = v3;
LABEL_22:
  v14 = (_QWORD *)*((_QWORD *)this + 4);
  v15 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v14[11] + 32) + 40) + 44);
  if (v15 >= 5)
    v16 = 2;
  else
    v16 = 0x705020406uLL >> (8 * v15);
  (*(void (**)(_QWORD *, _QWORD))(*v14 + 752))(v14, v16 & 7);
  v32 = v17;
  v33 = v18;
  v2 = WebCore::floatPointForLengthPoint(&v20, (float *)&v32);
  if (v25 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v24);
  }
  if (v21 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v20);
  }
  return *(float *)&v2;
}

uint64_t WebCore::RenderLayer::enclosingFrameRenderLayer(WebCore::RenderLayer *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 8) + 40) + 8)
                 + 528);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 120);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v5)
    return 0;
  if ((*(_BYTE *)(v5 + 45) & 2) == 0)
  {
    if ((*(_BYTE *)(v5 + 45) & 0x10) != 0)
    {
LABEL_8:
      if ((*(_BYTE *)(v5 + 21) & 0x80) != 0)
        return *(_QWORD *)(v5 + 144);
      result = 0;
      while (1)
      {
        v7 = *(_QWORD *)(v5 + 32);
        if (!v7)
          break;
        v5 = *(_QWORD *)(v7 + 8);
        if (!v5)
          break;
        while ((*(_BYTE *)(v5 + 45) & 0x10) == 0)
        {
          v8 = *(_QWORD *)(v5 + 32);
          if (!v8)
            return 0;
          v5 = *(_QWORD *)(v8 + 8);
          if (!v5)
            return result;
        }
        if ((*(_BYTE *)(v5 + 21) & 0x80) != 0)
          return *(_QWORD *)(v5 + 144);
      }
      return 0;
    }
    v9 = *(_QWORD *)(v5 + 32);
    if (v9)
    {
      v5 = *(_QWORD *)(v9 + 8);
      if (v5)
      {
        result = 0;
        while ((*(_BYTE *)(v5 + 45) & 0x10) == 0)
        {
          v10 = *(_QWORD *)(v5 + 32);
          if (!v10)
            return 0;
          v5 = *(_QWORD *)(v10 + 8);
          if (!v5)
            return result;
        }
        goto LABEL_8;
      }
    }
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RenderLayer::enclosingScrollableLayer(uint64_t a1, int a2, int a3)
{
  uint64_t v4;
  WebCore::RenderBox *v5;
  BOOL v6;
  WebCore::RenderObject *v7;
  uint64_t v8;
  WebCore::RenderBox *v9;
  BOOL v10;
  WebCore::RenderObject *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::RenderObject *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = a1;
  v33 = WebCore::RenderTreeMutationDisallowedScope::s_currentMutationAssertion;
  WebCore::RenderTreeMutationDisallowedScope::s_currentMutationAssertion = (uint64_t)&v33;
  if (!a2)
  {
    v5 = *(WebCore::RenderBox **)(a1 + 32);
    v6 = !v5 || (*((_BYTE *)v5 + 45) & 4) == 0;
    if (!v6 && (WebCore::RenderBox::canBeScrolledAndHasScrollableArea(v5) & 1) != 0)
      goto LABEL_23;
  }
  v7 = *(WebCore::RenderObject **)(v4 + 32);
  while (1)
  {
    v7 = WebCore::RenderObject::containingBlock(v7);
    if (!v7)
      break;
    v8 = *((_QWORD *)v7 + 18);
    if (v8)
    {
      if ((a3 & 1) != 0)
        goto LABEL_41;
      while (1)
      {
        v9 = *(WebCore::RenderBox **)(v8 + 32);
        if (v9)
          v10 = (*((_BYTE *)v9 + 45) & 4) == 0;
        else
          v10 = 1;
        if (!v10)
        {
          if ((WebCore::RenderBox::canBeScrolledAndHasScrollableArea(v9) & 1) != 0)
            goto LABEL_73;
          v9 = *(WebCore::RenderBox **)(v8 + 32);
        }
        v11 = WebCore::RenderObject::containingBlock(v9);
        if (!v11)
          goto LABEL_22;
        while (1)
        {
          v8 = *((_QWORD *)v11 + 18);
          if (v8)
            break;
          v11 = WebCore::RenderObject::containingBlock(v11);
          v4 = 0;
          if (!v11)
            goto LABEL_23;
        }
      }
    }
  }
  if (!a3)
    goto LABEL_22;
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 24) + 8) + 40) + 8)
                  + 528);
  if (!v13)
    goto LABEL_22;
  v14 = *(_QWORD *)(v13 + 8);
  if (!v14)
    goto LABEL_22;
  v15 = *(_QWORD *)(v14 + 120);
  if (!v15)
    goto LABEL_22;
  v16 = *(_QWORD *)(v15 + 8);
  if (!v16)
    goto LABEL_22;
  v17 = *(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v17)
    goto LABEL_22;
  if ((*(_BYTE *)(v17 + 45) & 2) != 0)
  {
LABEL_81:
    __break(0xC471u);
    JUMPOUT(0x1963E4418);
  }
  if ((*(_BYTE *)(v17 + 45) & 0x10) == 0)
  {
    v31 = *(_QWORD *)(v17 + 32);
    if (!v31)
      goto LABEL_22;
    v17 = *(_QWORD *)(v31 + 8);
    if (!v17)
      goto LABEL_22;
    v4 = 0;
    while ((*(_BYTE *)(v17 + 45) & 0x10) == 0)
    {
      v32 = *(_QWORD *)(v17 + 32);
      if (!v32)
        goto LABEL_22;
      v17 = *(_QWORD *)(v32 + 8);
      if (!v17)
        goto LABEL_23;
    }
  }
  if ((*(_BYTE *)(v17 + 21) & 0x80) == 0)
  {
    v4 = 0;
    do
    {
      v18 = *(_QWORD *)(v17 + 32);
      if (!v18)
        goto LABEL_22;
      v17 = *(_QWORD *)(v18 + 8);
      if (!v17)
        goto LABEL_22;
      while ((*(_BYTE *)(v17 + 45) & 0x10) == 0)
      {
        v19 = *(_QWORD *)(v17 + 32);
        if (!v19)
          goto LABEL_22;
        v17 = *(_QWORD *)(v19 + 8);
        if (!v17)
          goto LABEL_23;
      }
    }
    while ((*(_BYTE *)(v17 + 21) & 0x80) == 0);
  }
  v8 = *(_QWORD *)(v17 + 144);
  if (!v8)
  {
LABEL_22:
    v4 = 0;
    goto LABEL_23;
  }
LABEL_41:
  while (1)
  {
    v20 = *(WebCore::RenderObject **)(v8 + 32);
    if (v20 && (*((_BYTE *)v20 + 45) & 4) != 0)
      break;
LABEL_47:
    while (1)
    {
      v20 = WebCore::RenderObject::containingBlock(v20);
      if (!v20)
        break;
      if (*((_QWORD *)v20 + 18))
      {
        v8 = *((_QWORD *)v20 + 18);
        goto LABEL_65;
      }
    }
    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 24) + 8) + 40) + 8)
                    + 528);
    if (!v22)
      goto LABEL_22;
    v23 = *(_QWORD *)(v22 + 8);
    if (!v23)
      goto LABEL_22;
    v24 = *(_QWORD *)(v23 + 120);
    if (!v24)
      goto LABEL_22;
    v25 = *(_QWORD *)(v24 + 8);
    if (!v25)
      goto LABEL_22;
    v26 = *(_QWORD *)(v25 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v26)
      goto LABEL_22;
    if ((*(_BYTE *)(v26 + 45) & 2) != 0)
      goto LABEL_81;
    if ((*(_BYTE *)(v26 + 45) & 0x10) != 0)
      goto LABEL_57;
    v29 = *(_QWORD *)(v26 + 32);
    if (!v29)
      goto LABEL_22;
    v26 = *(_QWORD *)(v29 + 8);
    if (!v26)
      goto LABEL_22;
    while ((*(_BYTE *)(v26 + 45) & 0x10) == 0)
    {
      v30 = *(_QWORD *)(v26 + 32);
      if (!v30)
        goto LABEL_22;
      v4 = 0;
      v26 = *(_QWORD *)(v30 + 8);
      if (!v26)
        goto LABEL_23;
    }
LABEL_57:
    while ((*(_BYTE *)(v26 + 21) & 0x80) == 0)
    {
      v27 = *(_QWORD *)(v26 + 32);
      if (!v27)
        goto LABEL_22;
      v26 = *(_QWORD *)(v27 + 8);
      if (!v26)
        goto LABEL_22;
      while ((*(_BYTE *)(v26 + 45) & 0x10) == 0)
      {
        v28 = *(_QWORD *)(v26 + 32);
        if (!v28)
          goto LABEL_22;
        v4 = 0;
        v26 = *(_QWORD *)(v28 + 8);
        if (!v26)
          goto LABEL_23;
      }
    }
    v8 = *(_QWORD *)(v26 + 144);
LABEL_65:
    v4 = 0;
    if (!v8)
      goto LABEL_23;
  }
  if ((WebCore::RenderBox::canBeScrolledAndHasScrollableArea(v20) & 1) == 0)
  {
    v20 = *(WebCore::RenderObject **)(v8 + 32);
    goto LABEL_47;
  }
LABEL_73:
  v4 = v8;
LABEL_23:
  WebCore::RenderTreeMutationDisallowedScope::s_currentMutationAssertion = v33;
  return v4;
}

uint64_t WebCore::RenderLayerBacking::removeBackingSharingLayer(WebCore::RenderLayerBacking *this, WebCore::RenderLayer *a2)
{
  WTF *v4;

  v4 = (WTF *)*((_QWORD *)a2 + 10);
  if (v4 && *((_QWORD *)v4 + 1))
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 24) + 8) + 40) + 8)
                  + 3405))
    {
      *((_QWORD *)a2 + 10) = 0;
    }
    else
    {
      WebCore::RenderLayer::clearClipRectsIncludingDescendants(a2, (void *)4);
      v4 = (WTF *)*((_QWORD *)a2 + 10);
      *((_QWORD *)a2 + 10) = 0;
      if (!v4)
        return WTF::WeakListHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderLayer>((uint64_t)this + 16, a2);
    }
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  return WTF::WeakListHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderLayer>((uint64_t)this + 16, a2);
}

uint64_t WebCore::RenderLayer::enclosingCompositingLayer(uint64_t result, int a2)
{
  if (a2 || !*(_QWORD *)(result + 256))
  {
    if ((*(_BYTE *)(result + 24) & 4) != 0)
    {
      result = *(_QWORD *)(result + 40);
      if (result)
      {
LABEL_5:
        while (!*(_QWORD *)(result + 256))
        {
          if ((*(_BYTE *)(result + 24) & 4) == 0)
          {
            while (1)
            {
              result = *(_QWORD *)(result + 40);
              if (!result)
                return result;
              if ((*(_BYTE *)(result + 24) & 0x4A) != 0)
                goto LABEL_5;
            }
          }
          result = *(_QWORD *)(result + 40);
          if (!result)
            return result;
        }
      }
    }
    else
    {
      while (1)
      {
        result = *(_QWORD *)(result + 40);
        if (!result)
          break;
        if ((*(_BYTE *)(result + 24) & 0x4A) != 0)
          goto LABEL_5;
      }
    }
  }
  return result;
}

_QWORD *WebCore::RenderLayer::enclosingFilterLayer(_QWORD *a1, int a2, const WebCore::FilterOperations *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int ***v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1;
  if (a2)
    v3 = (_QWORD *)a1[5];
  for (; v3; v3 = (_QWORD *)v3[5])
  {
    v4 = v3[4];
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 32) + 32);
    v6 = *(_DWORD *)(v5 + 20);
    if (v6)
    {
      if ((v7 = (unsigned int ***)(v5 + 8), v8 = *(unsigned __int8 *)(v4 + 46), v8 != 103) && v8 != 83
        || v6 != 1
        || *((_BYTE *)**v7 + 12))
      {
        if ((WebCore::CSSFilter::isIdentity((WebCore::CSSFilter *)v4, v7, a3) & 1) == 0)
        {
          v9 = v3[32];
          if (!v9 || !*(_BYTE *)(v9 + 292))
          {
            v10 = v3[31];
            if (v10)
            {
              v11 = *(_QWORD *)(v10 + 136);
              if (v11)
              {
                if (*(_BYTE *)(v11 + 76))
                  break;
              }
            }
          }
        }
      }
    }
  }
  return v3;
}

uint64_t WebCore::RenderLayer::setFilterBackendNeedsRepaintingInRect(uint64_t this, const WebCore::LayoutRect *a2, const WebCore::FilterOperations *a3, double a4)
{
  int v4;
  int v5;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  WebCore::RenderLayerFilters *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int32x4_t v14;
  uint64_t v15;
  const WebCore::FloatRect *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  _DWORD *v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t i;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unsigned int ***v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const WebCore::FilterOperations *v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v67;
  float v68;
  float v69;
  float v71;
  float v73;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  int v87;
  int v88;
  float v89;
  float v90;
  int v91;
  int v92;
  int32x4_t v93;
  int32x4_t v94;
  int8x16_t v95;
  int32x4_t v96;
  int8x16_t v97;
  uint64_t v98;
  uint64_t v99;
  WebCore::RenderView *v100;
  uint64_t v101;
  WebCore::RenderView *v102;
  uint64_t v103;
  uint64_t v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  int v128;
  int v129;
  float v130;
  float v131;
  int v132;
  int v133;
  int32x4_t v134;
  int32x4_t v135;
  int8x16_t v136;
  int32x4_t v137;
  int8x16_t v138;
  uint64_t v139;
  int v140;
  WebCore::RenderView *v141;
  unsigned int ***v142;
  int v143;
  uint64_t v144;
  WebCore::RenderLayerCompositor *v145;
  WebCore::RenderLayerCompositor *v146;
  WTF *v147;
  void *v148;
  WebCore::RenderLayerCompositor *v149;
  WebCore::RenderLayerCompositor *v150;
  WTF *v151;
  void *v152;
  __int128 v153;
  float v154;
  float v155;
  float v156;
  float v157;
  int8x16_t v158;
  float32x4_t v159;
  float v160;
  float v161;
  float v162;
  float v163;

  v4 = *((_DWORD *)a2 + 2);
  v5 = *((_DWORD *)a2 + 3);
  if (v4 >= 1 && v5 >= 1)
  {
    v7 = this;
    v8 = *(_DWORD *)a2;
    v9 = *((_DWORD *)a2 + 1);
    v10 = *(WebCore::RenderLayerFilters **)(this + 32);
    if (*(_QWORD *)(this + 248))
    {
      v14.i64[0] = WebCore::RenderLayer::localBoundingBox(this, 0, a4);
      v14.i64[1] = v15;
      v159 = vmulq_f32(vcvtq_f32_s32(v14), (float32x4_t)vdupq_n_s32(0x3C800000u));
      v12 = WebCore::RenderLayerFilters::calculateOutsets(v10, (WebCore::RenderElement *)&v159, v16);
    }
    else
    {
      v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 11) + 32) + 32);
      if (*(_DWORD *)(v11 + 20))
      {
        v12 = WebCore::FilterOperations::outsets((uint64_t **)(v11 + 8));
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    v17 = HIDWORD(v12) << 6;
    if (SHIDWORD(v12) < -33554432)
      v17 = 0x80000000;
    if (SHIDWORD(v12) <= 0x1FFFFFF)
      v18 = v17;
    else
      v18 = 0x7FFFFFFF;
    v19 = HIDWORD(v13) << 6;
    if (SHIDWORD(v13) < -33554432)
      v19 = 0x80000000;
    if (SHIDWORD(v13) <= 0x1FFFFFF)
      v20 = v19;
    else
      v20 = 0x7FFFFFFF;
    if ((int)v12 >= -33554432)
      v21 = (_DWORD)v12 << 6;
    else
      v21 = 0x80000000;
    if ((int)v13 >= -33554432)
      v22 = (_DWORD)v13 << 6;
    else
      v22 = 0x80000000;
    if (v20 == 0x80000000)
      v23 = 0x7FFFFFFF;
    else
      v23 = -v20;
    if ((int)v12 <= 0x1FFFFFF)
      v24 = v21;
    else
      v24 = 0x7FFFFFFF;
    if (v24 == 0x80000000)
      v25 = 0x7FFFFFFF;
    else
      v25 = -v24;
    v26 = v8 + v23;
    if (__OFADD__(v8, v23))
      v26 = (v8 >> 31) + 0x7FFFFFFF;
    v27 = v9 + v25;
    if (__OFADD__(v9, v25))
      v27 = (v9 >> 31) + 0x7FFFFFFF;
    v28 = __OFADD__(v20, v18);
    v29 = v20 + v18;
    v30 = (v20 >> 31) + 0x7FFFFFFF;
    if (!v28)
      v30 = v29;
    if ((int)v13 <= 0x1FFFFFF)
      v31 = v22;
    else
      v31 = 0x7FFFFFFF;
    v28 = __OFADD__(v24, v31);
    v32 = v24 + v31;
    if (v28)
      v32 = (v24 >> 31) + 0x7FFFFFFF;
    v28 = __OFADD__(v4, v30);
    v33 = v4 + v30;
    if (v28)
      v33 = 0x7FFFFFFF;
    v28 = __OFADD__(v5, v32);
    v34 = v5 + v32;
    if (v28)
      v34 = 0x7FFFFFFF;
    if (v33 >= 1 && v34 >= 1)
    {
      v35 = *(_DWORD **)(v7 + 248);
      v36 = v35[20];
      if (v36 < 1 || (v37 = v35[21], v37 <= 0))
      {
        v35[18] = v26;
        v35[19] = v27;
        v35[20] = v33;
        v35[21] = v34;
      }
      else
      {
        v39 = v35[18];
        v38 = v35[19];
        if (v26 >= (int)v39)
          v40 = v39;
        else
          v40 = v26;
        if (v27 >= (int)v38)
          v41 = v38;
        else
          v41 = v27;
        v28 = __OFADD__(v39, v36);
        v42 = v39 + v36;
        if (v28)
          v42 = (v39 >> 31) + 0x7FFFFFFF;
        v43 = v26 + v33;
        if (__OFADD__(v26, v33))
          v43 = (v26 >> 31) + 0x7FFFFFFF;
        if (v42 <= v43)
          v42 = v43;
        v28 = __OFADD__(v38, v37);
        v44 = v38 + v37;
        if (v28)
          v44 = (v38 >> 31) + 0x7FFFFFFF;
        v45 = v27 + v34;
        if (__OFADD__(v27, v34))
          v45 = (v27 >> 31) + 0x7FFFFFFF;
        if (v44 <= v45)
          v44 = v45;
        *((_QWORD *)v35 + 9) = v40 | (v41 << 32);
        v28 = __OFSUB__(v42, (_DWORD)v40);
        v46 = v42 - v40;
        if (v28)
          v46 = (v42 >> 31) + 0x7FFFFFFF;
        v35[20] = v46;
        v28 = __OFSUB__(v44, (_DWORD)v41);
        v47 = v44 - v41;
        if (v28)
          v47 = (v44 >> 31) + 0x7FFFFFFF;
        v35[21] = v47;
      }
    }
    for (i = v7; ; i = *(_QWORD *)(i + 40))
    {
      if (i != v7)
      {
        v49 = *(_QWORD *)(i + 32);
        v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v49 + 88) + 32) + 32);
        v51 = *(_DWORD *)(v50 + 20);
        if (v51)
        {
          if ((v53 = (unsigned int ***)(v50 + 8), v54 = *(unsigned __int8 *)(v49 + 46), v54 != 103) && v54 != 83
            || v51 != 1
            || *((_BYTE *)**v53 + 12))
          {
            if ((WebCore::CSSFilter::isIdentity((WebCore::CSSFilter *)v49, v53, a3) & 1) == 0)
            {
              v55 = *(_QWORD *)(i + 256);
              if (!v55 || !*(_BYTE *)(v55 + 292))
              {
                v56 = *(_QWORD *)(i + 248);
                if (v56)
                {
                  v57 = *(_QWORD *)(v56 + 136);
                  if (v57)
                  {
                    if (*(_BYTE *)(v57 + 76))
                      break;
                  }
                }
              }
            }
          }
        }
      }
      v52 = *(_QWORD *)(i + 256);
      if (v52)
      {
        if (*(_BYTE *)(v52 + 291))
          break;
      }
      if ((*(_BYTE *)(i + 24) & 1) != 0)
        break;
    }
    v159.f32[0] = (float)v26 * 0.015625;
    v159.f32[1] = (float)v27 * 0.015625;
    v159.f32[2] = v159.f32[0] + (float)((float)v33 * 0.015625);
    v159.f32[3] = v159.f32[1];
    v160 = v159.f32[2];
    v161 = v159.f32[1] + (float)((float)v34 * 0.015625);
    v162 = v159.f32[0];
    v163 = v161;
    WebCore::RenderObject::localToContainerQuad(*(_QWORD *)(v7 + 32), v159.f32, *(_QWORD *)(i + 32), 2u, &v153);
    v60 = v154;
    v59 = v155;
    if (v156 >= v154)
      v61 = v154;
    else
      v61 = v156;
    v62 = *((float *)&v153 + 1);
    v63 = *(float *)&v153;
    if (*((float *)&v153 + 2) >= *(float *)&v153)
      v64 = *(float *)&v153;
    else
      v64 = *((float *)&v153 + 2);
    if (v61 >= v64)
      v61 = v64;
    v65 = fabsf(v61);
    if (v65 == INFINITY || v65 > 2147500000.0)
      v61 = (float)((SLODWORD(v61) >> 31) ^ 0x7FFFFFFF);
    if (v157 >= v155)
      v67 = v155;
    else
      v67 = v157;
    if (*((float *)&v153 + 3) >= *((float *)&v153 + 1))
      v68 = *((float *)&v153 + 1);
    else
      v68 = *((float *)&v153 + 3);
    if (v67 >= v68)
      v67 = v68;
    v69 = fabsf(v67);
    if (v69 == INFINITY || v69 > 2147500000.0)
      v67 = (float)((SLODWORD(v67) >> 31) ^ 0x7FFFFFFF);
    if (*(float *)&v153 < *((float *)&v153 + 2))
      v63 = *((float *)&v153 + 2);
    if (v154 < v156)
      v60 = v156;
    if (v63 >= v60)
      v60 = v63;
    v71 = fabsf(v60);
    if (v71 == INFINITY || v71 > 2147500000.0)
      v60 = (float)((SLODWORD(v60) >> 31) ^ 0x7FFFFFFF);
    if (*((float *)&v153 + 1) < *((float *)&v153 + 3))
      v62 = *((float *)&v153 + 3);
    if (v155 < v157)
      v59 = v157;
    if (v62 >= v59)
      v59 = v62;
    v73 = fabsf(v59);
    if (v73 == INFINITY || v73 > 2147500000.0)
      v59 = (float)((SLODWORD(v59) >> 31) ^ 0x7FFFFFFF);
    v75 = v60 - v61;
    v76 = v59 - v67;
    v77 = floorf(v61);
    v78 = 2147500000.0;
    v79 = -2147500000.0;
    if (v77 > -2147500000.0)
      v79 = (float)(int)v77;
    if (v77 < 2147500000.0)
      v80 = v79;
    else
      v80 = 2147500000.0;
    v81 = floorf(v67);
    if (v81 < 2147500000.0)
    {
      v78 = -2147500000.0;
      if (v81 > -2147500000.0)
        v78 = (float)(int)v81;
    }
    v82 = v67 + v76;
    v83 = ceilf(v61 + v75);
    v84 = 2147500000.0;
    if (v83 < 2147500000.0)
    {
      v84 = -2147500000.0;
      if (v83 > -2147500000.0)
        v84 = (float)(int)v83;
    }
    v85 = ceilf(v82);
    v86 = 2147500000.0;
    if (v85 < 2147500000.0)
    {
      v86 = -2147500000.0;
      if (v85 > -2147500000.0)
        v86 = (float)(int)v85;
    }
    if (v80 >= 2147500000.0)
    {
      v87 = 0x7FFFFFFF;
    }
    else if (v80 <= -2147500000.0)
    {
      v87 = 0x80000000;
    }
    else
    {
      v87 = (int)v80;
    }
    if (v78 >= 2147500000.0)
    {
      v88 = 0x7FFFFFFF;
    }
    else if (v78 <= -2147500000.0)
    {
      v88 = 0x80000000;
    }
    else
    {
      v88 = (int)v78;
    }
    v89 = v84 - v80;
    v90 = v86 - v78;
    if (v89 >= 2147500000.0)
    {
      v91 = 0x7FFFFFFF;
    }
    else if (v89 > -2147500000.0)
    {
      v91 = (int)v89;
    }
    else
    {
      v91 = 0x80000000;
    }
    if (v90 >= 2147500000.0)
    {
      v92 = 0x7FFFFFFF;
    }
    else if (v90 <= -2147500000.0)
    {
      v92 = 0x80000000;
    }
    else
    {
      v92 = (int)v90;
    }
    v93.i64[0] = __PAIR64__(v88, v87);
    v93.i64[1] = __PAIR64__(v92, v91);
    v94.i64[0] = 0xFE000000FE000000;
    v94.i64[1] = 0xFE000000FE000000;
    v95 = (int8x16_t)vcgtq_s32(v93, v94);
    v96.i64[0] = 0xFE000000FE000000;
    v96.i64[1] = 0xFE000000FE000000;
    v97.i64[0] = 0x8000000080000000;
    v97.i64[1] = 0x8000000080000000;
    v158 = vorrq_s8((int8x16_t)(*(_OWORD *)&v95 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v96, v93), v97, (int8x16_t)vshlq_n_s32(v93, 6uLL)), v95));
    v98 = *(_QWORD *)(i + 256);
    if (v98)
    {
      if (*(_BYTE *)(v98 + 290))
        return WebCore::RenderLayer::setBackingNeedsRepaintInRect(i, &v158, 1);
      v99 = *(_QWORD *)(v98 + 8);
      if ((*(_BYTE *)(v99 + 24) & 1) == 0)
        return WebCore::RenderLayer::setBackingNeedsRepaintInRect(i, &v158, 1);
      v100 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v99 + 32) + 24)
                                                                         + 8)
                                                             + 40)
                                                 + 8)
                                     + 1944);
      v101 = *((_QWORD *)v100 + 50);
      if (!v101)
      {
        v145 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        v101 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v145, v100);
        v146 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v100 + 50);
        *((_QWORD *)v100 + 50) = v101;
        if (v146)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v146);
          WTF::fastFree(v147, v148);
          v101 = *((_QWORD *)v100 + 50);
        }
      }
      if (*(_BYTE *)(v101 + 198))
        return WebCore::RenderLayer::setBackingNeedsRepaintInRect(i, &v158, 1);
      v102 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v98 + 8)
                                                                                                 + 32)
                                                                                     + 24)
                                                                         + 8)
                                                             + 40)
                                                 + 8)
                                     + 1944);
      v103 = *((_QWORD *)v102 + 50);
      if (!v103)
      {
        v149 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        v103 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v149, v102);
        v150 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v102 + 50);
        *((_QWORD *)v102 + 50) = v103;
        if (v150)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v150);
          WTF::fastFree(v151, v152);
          v103 = *((_QWORD *)v102 + 50);
        }
      }
      if (*(_DWORD *)(v103 + 216) == 2)
        return WebCore::RenderLayer::setBackingNeedsRepaintInRect(i, &v158, 1);
      v104 = *(_QWORD *)(v7 + 32);
      i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v104 + 24) + 8) + 40) + 8)
                                + 1944)
                    + 144);
      WebCore::RenderObject::localToContainerQuad(v104, v159.f32, *(_QWORD *)(i + 32), 2u, &v153);
      v105 = *(float *)&v153;
      v106 = v154;
      if (v156 >= v154)
        v107 = v154;
      else
        v107 = v156;
      if (*((float *)&v153 + 2) >= *(float *)&v153)
        v108 = *(float *)&v153;
      else
        v108 = *((float *)&v153 + 2);
      if (v107 >= v108)
        v107 = v108;
      v109 = fabsf(v107);
      if (v109 == INFINITY || v109 > 2147500000.0)
        v107 = (float)((SLODWORD(v107) >> 31) ^ 0x7FFFFFFF);
      if (v157 >= v155)
        v110 = v155;
      else
        v110 = v157;
      if (*((float *)&v153 + 3) >= *((float *)&v153 + 1))
        v111 = *((float *)&v153 + 1);
      else
        v111 = *((float *)&v153 + 3);
      if (v110 >= v111)
        v110 = v111;
      v112 = fabsf(v110);
      if (v112 == INFINITY || v112 > 2147500000.0)
        v110 = (float)((SLODWORD(v110) >> 31) ^ 0x7FFFFFFF);
      if (*(float *)&v153 < *((float *)&v153 + 2))
        v105 = *((float *)&v153 + 2);
      if (v154 < v156)
        v106 = v156;
      if (v105 >= v106)
        v106 = v105;
      v113 = fabsf(v106);
      if (v113 == INFINITY || v113 > 2147500000.0)
        v106 = (float)((SLODWORD(v106) >> 31) ^ 0x7FFFFFFF);
      if (*((float *)&v153 + 1) >= *((float *)&v153 + 3))
        v114 = *((float *)&v153 + 1);
      else
        v114 = *((float *)&v153 + 3);
      if (v155 >= v157)
        v115 = v155;
      else
        v115 = v157;
      if (v114 >= v115)
        v115 = v114;
      v116 = fabsf(v115);
      if (v116 == INFINITY || v116 > 2147500000.0)
        v115 = (float)((SLODWORD(v115) >> 31) ^ 0x7FFFFFFF);
      v117 = floorf(v107);
      v118 = 2147500000.0;
      if (v117 < 2147500000.0)
      {
        v118 = -2147500000.0;
        if (v117 > -2147500000.0)
          v118 = (float)(int)v117;
      }
      v119 = v106 - v107;
      v120 = v115 - v110;
      v121 = floorf(v110);
      v122 = 2147500000.0;
      if (v121 < 2147500000.0)
      {
        v122 = -2147500000.0;
        if (v121 > -2147500000.0)
          v122 = (float)(int)v121;
      }
      v123 = v110 + v120;
      v124 = ceilf(v107 + v119);
      v125 = 2147500000.0;
      if (v124 < 2147500000.0)
      {
        v125 = -2147500000.0;
        if (v124 > -2147500000.0)
          v125 = (float)(int)v124;
      }
      v126 = ceilf(v123);
      v127 = 2147500000.0;
      if (v126 < 2147500000.0)
      {
        v127 = -2147500000.0;
        if (v126 > -2147500000.0)
          v127 = (float)(int)v126;
      }
      if (v118 >= 2147500000.0)
      {
        v128 = 0x7FFFFFFF;
      }
      else if (v118 <= -2147500000.0)
      {
        v128 = 0x80000000;
      }
      else
      {
        v128 = (int)v118;
      }
      if (v122 >= 2147500000.0)
      {
        v129 = 0x7FFFFFFF;
      }
      else if (v122 <= -2147500000.0)
      {
        v129 = 0x80000000;
      }
      else
      {
        v129 = (int)v122;
      }
      v130 = v125 - v118;
      v131 = v127 - v122;
      if (v130 >= 2147500000.0)
      {
        v132 = 0x7FFFFFFF;
      }
      else if (v130 <= -2147500000.0)
      {
        v132 = 0x80000000;
      }
      else
      {
        v132 = (int)v130;
      }
      if (v131 >= 2147500000.0)
      {
        v133 = 0x7FFFFFFF;
      }
      else if (v131 <= -2147500000.0)
      {
        v133 = 0x80000000;
      }
      else
      {
        v133 = (int)v131;
      }
      v134.i64[0] = __PAIR64__(v129, v128);
      v134.i64[1] = __PAIR64__(v133, v132);
      v135.i64[0] = 0xFE000000FE000000;
      v135.i64[1] = 0xFE000000FE000000;
      v136 = (int8x16_t)vcgtq_s32(v134, v135);
      v137.i64[0] = 0xFE000000FE000000;
      v137.i64[1] = 0xFE000000FE000000;
      v138.i64[0] = 0x8000000080000000;
      v138.i64[1] = 0x8000000080000000;
      v158 = vorrq_s8((int8x16_t)(*(_OWORD *)&v136 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v137, v134), v138, (int8x16_t)vshlq_n_s32(v134, 6uLL)), v136));
    }
    this = *(_QWORD *)(i + 32);
    v139 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 88) + 32) + 32);
    v140 = *(_DWORD *)(v139 + 20);
    if (!v140
      || ((v142 = (unsigned int ***)(v139 + 8), v143 = *(unsigned __int8 *)(this + 46), v143 == 103) || v143 == 83)
      && v140 == 1
      && !*((_BYTE *)**v142 + 12)
      || (this = WebCore::CSSFilter::isIdentity((WebCore::CSSFilter *)this, v142, v58), (this & 1) != 0)
      || (v144 = *(_QWORD *)(i + 256)) != 0 && *(_BYTE *)(v144 + 292))
    {
      if ((*(_BYTE *)(i + 24) & 1) != 0)
      {
        v141 = *(WebCore::RenderView **)(i + 32);
        if (*((_BYTE *)v141 + 46) != 49)
        {
          __break(0xC471u);
          JUMPOUT(0x1963E4F4CLL);
        }
        return WebCore::RenderView::repaintViewRectangle(v141, (const WebCore::LayoutRect *)&v158);
      }
    }
    else
    {
      return WebCore::RenderLayer::setFilterBackendNeedsRepaintingInRect((WebCore::RenderLayer *)i, (const WebCore::LayoutRect *)&v158);
    }
  }
  return this;
}

uint64_t WebCore::toLayoutBoxExtent(int *a1)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;

  v1 = a1[1];
  LODWORD(v2) = *a1 << 6;
  if (*a1 < -33554432)
    LODWORD(v2) = 0x80000000;
  if (*a1 <= 0x1FFFFFF)
    v2 = v2;
  else
    v2 = 0x7FFFFFFFLL;
  v3 = v1 << 6;
  if (v1 < -33554432)
    v3 = 0x80000000;
  if (v1 <= 0x1FFFFFF)
    v4 = v3;
  else
    v4 = 0x7FFFFFFFLL;
  return v2 | (v4 << 32);
}

unint64_t WebCore::RenderLayer::filterOutsets(WebCore::RenderLayer *this, double a2)
{
  WebCore::RenderLayerFilters *v2;
  uint64_t v3;
  int32x4_t v5;
  uint64_t v6;
  const WebCore::FloatRect *v7;
  float32x4_t v8;

  v2 = (WebCore::RenderLayerFilters *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 31))
  {
    v5.i64[0] = WebCore::RenderLayer::localBoundingBox((uint64_t)this, 0, a2);
    v5.i64[1] = v6;
    v8 = vmulq_f32(vcvtq_f32_s32(v5), (float32x4_t)vdupq_n_s32(0x3C800000u));
    return WebCore::RenderLayerFilters::calculateOutsets(v2, (WebCore::RenderElement *)&v8, v7);
  }
  else
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 32) + 32);
    if (*(_DWORD *)(v3 + 20))
      return WebCore::FilterOperations::outsets((uint64_t **)(v3 + 8));
    else
      return 0;
  }
}

_QWORD *WebCore::RenderLayer::setBackingNeedsRepaintInRect(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v4;
  int32x2_t *v6;
  int32x2_t v7;
  uint64_t v8;
  uint64_t v9;
  int32x2_t *v10;
  uint64_t v11;
  int32x2_t *v12;
  int32x2_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::RenderObject *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  int v24;
  double v25;
  double v26;
  int v27;
  double v28;
  double v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  double v34;
  double v35;
  int v36;
  int v37;
  double v38;
  double v39;
  int v40;
  int v41;
  double v42;
  double v43;
  double v44;
  double v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  int32x2_t v55;
  int32x2_t v56;
  int32x2_t v57;
  int32x2_t v58;
  _QWORD *result;
  uint64_t v60;
  WebCore::RenderView *v61;
  WebCore::RenderLayerCompositor *v62;
  WebCore::RenderView *v63;
  WebCore::RenderLayerCompositor *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unsigned int v69;
  int v70;
  int32x2_t v71;
  int v72;
  uint64_t v73;
  uint64_t *v74;
  WebCore::Page *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  int32x2_t v81;
  int8x8_t v82;
  int8x8_t v83;
  float32x2_t v84;
  WTF *v85;
  void *v86;
  uint64_t v87;
  WebCore::RenderLayerCompositor *v88;
  WebCore::RenderLayerCompositor *v89;
  WTF *v90;
  void *v91;
  WebCore::RenderLayerCompositor *v92;
  WebCore::RenderLayerCompositor *v93;
  WTF *v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;

  v4 = *(_QWORD *)(a1 + 256);
  if (!v4)
    goto LABEL_70;
  if (!*(_BYTE *)(v4 + 290))
  {
    v60 = *(_QWORD *)(v4 + 8);
    if ((*(_BYTE *)(v60 + 24) & 1) != 0)
    {
      v61 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v60 + 32) + 24) + 8)
                                                            + 40)
                                                + 8)
                                    + 1944);
      v62 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v61 + 50);
      if (!v62)
      {
        v97 = a1;
        v88 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        WebCore::RenderLayerCompositor::RenderLayerCompositor(v88, v61);
        v89 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v61 + 50);
        *((_QWORD *)v61 + 50) = v88;
        if (v89)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v89);
          WTF::fastFree(v90, v91);
          v62 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v61 + 50);
        }
        else
        {
          v62 = v88;
        }
        a1 = v97;
      }
      if (!*((_BYTE *)v62 + 198))
      {
        v63 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8)
                                                                                                  + 32)
                                                                                      + 24)
                                                                          + 8)
                                                              + 40)
                                                  + 8)
                                      + 1944);
        v64 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v63 + 50);
        if (!v64)
        {
          v98 = a1;
          v92 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
          WebCore::RenderLayerCompositor::RenderLayerCompositor(v92, v63);
          v93 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v63 + 50);
          *((_QWORD *)v63 + 50) = v92;
          if (v93)
          {
            WebCore::RenderLayerCompositor::~RenderLayerCompositor(v93);
            WTF::fastFree(v94, v95);
            v64 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v63 + 50);
          }
          else
          {
            v64 = v92;
          }
          a1 = v98;
        }
        if (*((_DWORD *)v64 + 54) != 2)
        {
LABEL_70:
          v100 = *(_OWORD *)a2;
          v65 = a1;
          v66 = a1;
          do
          {
            v67 = v66;
            v66 = *(_QWORD *)(v66 + 40);
          }
          while (v66);
          v68 = WebCore::RenderLayer::offsetFromAncestor(a1, v67, 0);
          v69 = (v100 >> 31) + 0x7FFFFFFF;
          if (!__OFADD__((_DWORD)v100, (_DWORD)v68))
            v69 = v100 + v68;
          v70 = (DWORD1(v100) >> 31) + 0x7FFFFFFF;
          if (!__OFADD__(DWORD1(v100), HIDWORD(v68)))
            v70 = DWORD1(v100) + HIDWORD(v68);
          *(_QWORD *)&v100 = __PAIR64__(v70, v69);
          return WebCore::RenderView::repaintViewRectangle(*(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v65 + 32) + 24) + 8)+ 40)+ 8)+ 1944), (const WebCore::LayoutRect *)&v100);
        }
      }
    }
  }
  v6 = *(int32x2_t **)(a1 + 256);
  v7 = v6[1];
  v8 = *(_QWORD *)(*(_QWORD *)&v7 + 24);
  if ((v8 & 1) == 0)
  {
    *(_DWORD *)(*(_QWORD *)&v7 + 12) |= 0x80u;
    if ((v8 & 4) != 0)
    {
      v71 = *(int32x2_t *)(*(_QWORD *)&v7 + 40);
      if (v71)
      {
LABEL_83:
        do
        {
          v72 = *(_DWORD *)(*(_QWORD *)&v71 + 12);
          if ((v72 & 2) != 0)
            break;
          *(_DWORD *)(*(_QWORD *)&v71 + 12) = v72 | 2;
          if ((*(_BYTE *)(*(_QWORD *)&v71 + 24) & 4) == 0)
          {
            while (1)
            {
              v71 = *(int32x2_t *)(*(_QWORD *)&v71 + 40);
              if (!*(_QWORD *)&v71)
                goto LABEL_4;
              if ((*(_BYTE *)(*(_QWORD *)&v71 + 24) & 0x4A) != 0)
                goto LABEL_87;
            }
          }
          v71 = *(int32x2_t *)(*(_QWORD *)&v71 + 40);
LABEL_87:
          ;
        }
        while (v71);
      }
    }
    else
    {
      v71 = v7;
      while (1)
      {
        v71 = *(int32x2_t *)(*(_QWORD *)&v71 + 40);
        if (!*(_QWORD *)&v71)
          break;
        if ((*(_BYTE *)(*(_QWORD *)&v71 + 24) & 0x4A) != 0)
          goto LABEL_83;
      }
    }
  }
LABEL_4:
  v9 = *(_QWORD *)(*(_QWORD *)&v7 + 256);
  if (v9 && *(_BYTE *)(v9 + 291))
  {
LABEL_78:
    v13 = v7;
LABEL_19:
    v14 = *(_QWORD *)(*(_QWORD *)&v13 + 256);
    if (WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 32) + 24) + 8) + 40) + 8) + 528)
                                                                                       + 8)
                                                                           + 24)
                                                               + 8))
      && *(_BYTE *)(v14 + 291))
    {
      v15 = *(_QWORD *)(v14 + 8);
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 32) + 24) + 8) + 40) + 8);
      if (*(_BYTE *)(*(_QWORD *)(v16 + 1944) + 442))
        goto LABEL_22;
      if (*(_BYTE *)(v16 + 3443))
        goto LABEL_22;
      if (*(_BYTE *)(v16 + 3444))
      {
        v73 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 528) + 8) + 24) + 8);
        if (*(_BYTE *)(v73 + 1100) || (*(_BYTE *)(*(_QWORD *)(v73 + 112) + 612) & 8) != 0)
          goto LABEL_22;
      }
      if ((v74 = *(uint64_t **)(v16 + 2304)) != 0 && (v87 = *v74) != 0 && *(_DWORD *)(v87 - 12)
        || (*(_BYTE *)(v15 + 24) & 1) == 0
        && (v75 = *(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 528) + 8) + 24) + 8),
            (*(_QWORD *)(*((_QWORD *)v75 + 14) + 664) & 0xC0000000) != 0)
        && (v76 = WebCore::Page::scrollingCoordinator(v75),
            v77 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 32) + 24) + 8) + 40) + 8) + 1944) + 24) + 8)
                                                                                        + 40)
                                                                            + 8)
                                                                + 528)
                                                    + 8)
                                        + 632)
                            + 8),
            (*(unsigned int (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v76 + 440))(v76, *(_QWORD *)(v77 + 32), *(_QWORD *)(v77 + 40))))
      {
LABEL_22:
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)&v13 + 256) + 297) = 1;
      }
    }
    goto LABEL_23;
  }
  v10 = *(int32x2_t **)(*(_QWORD *)&v7 + 80);
  if (v10)
  {
    v13 = v10[1];
    if (v13)
      goto LABEL_19;
  }
  if ((*(_QWORD *)(*(_QWORD *)&v7 + 24) & 4) != 0)
  {
    v7 = *(int32x2_t *)(*(_QWORD *)&v7 + 40);
    if (v7)
      goto LABEL_9;
  }
  else
  {
    while (1)
    {
      v7 = *(int32x2_t *)(*(_QWORD *)&v7 + 40);
      if (!*(_QWORD *)&v7)
        break;
      if ((*(_BYTE *)(*(_QWORD *)&v7 + 24) & 0x4A) != 0)
      {
LABEL_9:
        while (1)
        {
          v11 = *(_QWORD *)(*(_QWORD *)&v7 + 256);
          if (v11)
          {
            if (*(_BYTE *)(v11 + 291))
              goto LABEL_78;
          }
          v12 = *(int32x2_t **)(*(_QWORD *)&v7 + 80);
          if (v12)
          {
            v13 = v12[1];
            if (v13)
              goto LABEL_19;
          }
          if ((*(_BYTE *)(*(_QWORD *)&v7 + 24) & 4) == 0)
          {
            while (1)
            {
              v7 = *(int32x2_t *)(*(_QWORD *)&v7 + 40);
              if (!*(_QWORD *)&v7)
                goto LABEL_23;
              if ((*(_BYTE *)(*(_QWORD *)&v7 + 24) & 0x4A) != 0)
                goto LABEL_14;
            }
          }
          v7 = *(int32x2_t *)(*(_QWORD *)&v7 + 40);
LABEL_14:
          if (!*(_QWORD *)&v7)
            goto LABEL_23;
        }
      }
    }
  }
LABEL_23:
  v17 = *(WebCore::RenderObject **)(*(_QWORD *)&v6[1] + 32);
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v17 + 3) + 8) + 40) + 8);
  if ((*(_QWORD *)(*(_QWORD *)(v18 + 680) + 680) & 0x800000000000) == 0)
    goto LABEL_24;
  v96 = *(_QWORD *)(*(_QWORD *)&v6[1] + 32);
  if (!WebCore::RenderObject::isSVGLayerAwareRenderer(v17) || *(_BYTE *)(v96 + 46) == 83)
  {
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v96 + 24) + 8) + 40) + 8);
LABEL_24:
    v19 = *(_QWORD *)(v18 + 528);
    v20 = 1.0;
    if (v19)
    {
      v21 = *(_QWORD *)(v19 + 8);
      if (v21)
      {
        v22 = *(_QWORD *)(v21 + 24);
        if (v22)
        {
          v23 = *(float **)(v22 + 8);
          if (v23)
          {
            v24 = (*(_DWORD *)v23)++;
            v20 = v23[91];
            if (v24)
            {
              *(_DWORD *)v23 = v24;
            }
            else
            {
              WebCore::Page::~Page((WebCore::Page *)v23);
              WTF::fastFree(v85, v86);
            }
          }
        }
      }
    }
    v25 = (double)*a2 * 0.015625;
    if (v25 < 0.0)
      v26 = round((v25 + (double)-*a2) * v20) / v20 - (double)-*a2;
    else
      v26 = round(v25 * v20) / v20;
    v27 = a2[1];
    v28 = (double)v27 * 0.015625;
    if (v28 < 0.0)
      v29 = round((v28 + (double)-v27) * v20) / v20 - (double)-v27;
    else
      v29 = round(v28 * v20) / v20;
    v30 = a2[2];
    v31 = *a2 & 0x3F;
    if (*a2 <= 0)
      v31 = -(-*a2 & 0x3F);
    v32 = __OFADD__(v31, v30);
    v33 = v31 + v30;
    if (v32)
      v33 = (v31 >> 31) + 0x7FFFFFFF;
    v34 = (double)v33 * 0.015625;
    if (v34 < 0.0)
      v35 = round((v34 + (double)-v33) * v20) / v20 - (double)-v33;
    else
      v35 = round(v34 * v20) / v20;
    v36 = a2[3];
    v37 = a2[1];
    v38 = (double)v31 * 0.015625;
    if (v38 < 0.0)
      v39 = round((v38 + (double)-v31) * v20) / v20 - (double)-v31;
    else
      v39 = round(v38 * v20) / v20;
    if (v37 <= 0)
      v40 = -(-v37 & 0x3F);
    else
      v40 = a2[1] & 0x3F;
    v32 = __OFADD__(v40, v36);
    v41 = v40 + v36;
    if (v32)
      v41 = (v40 >> 31) + 0x7FFFFFFF;
    v42 = (double)v41 * 0.015625;
    if (v42 < 0.0)
      v43 = round((v42 + (double)-v41) * v20) / v20 - (double)-v41;
    else
      v43 = round(v42 * v20) / v20;
    v44 = (double)v40 * 0.015625;
    if (v44 < 0.0)
      v45 = round((v44 + (double)-v40) * v20) / v20 - (double)-v40;
    else
      v45 = round(v44 * v20) / v20;
    v46 = v29;
    v47 = v26;
    v48 = v35;
    v49 = v39;
    v50 = v48 - v49;
    v51 = v43;
    v52 = v45;
    v53 = v51 - v52;
    goto LABEL_54;
  }
  v47 = WebCore::LayoutRect::operator WebCore::FloatRect(a2);
LABEL_54:
  *(_QWORD *)&v100 = __PAIR64__(LODWORD(v46), LODWORD(v47));
  *((_QWORD *)&v100 + 1) = __PAIR64__(LODWORD(v53), LODWORD(v50));
  if (v6[36].i8[1])
  {
    v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v6[1] + 32)
                                                                                + 24)
                                                                    + 8)
                                                        + 40)
                                            + 8)
                                + 1944)
                    + 248);
    if (*(_BYTE *)(v54 + 1371))
      WebCore::LocalFrameView::addTrackedRepaintRect(v54, (const WebCore::FloatRect *)&v100);
  }
  v55 = v6[9];
  if (*(_QWORD *)&v55 && (*(_WORD *)(*(_QWORD *)&v55 + 177) & 0x20) != 0)
  {
    v99 = v100;
    *(float32x2_t *)&v99 = vadd_f32(*(float32x2_t *)&v100, vsub_f32(vmul_f32(vcvt_f32_s32(v6[24]), (float32x2_t)vdup_n_s32(0xBC800000)), *(float32x2_t *)(*(_QWORD *)&v55 + 40)));
    (*(void (**)(int32x2_t, __int128 *, uint64_t))(**(_QWORD **)&v55 + 328))(v55, &v99, a3);
  }
  v56 = v6[10];
  if (*(_QWORD *)&v56 && (*(_WORD *)(*(_QWORD *)&v56 + 177) & 0x20) != 0)
  {
    v99 = v100;
    *(float32x2_t *)&v99 = vadd_f32(*(float32x2_t *)&v100, vsub_f32(vmul_f32(vcvt_f32_s32(v6[24]), (float32x2_t)vdup_n_s32(0xBC800000)), *(float32x2_t *)(*(_QWORD *)&v56 + 40)));
    (*(void (**)(int32x2_t, __int128 *, uint64_t))(**(_QWORD **)&v56 + 328))(v56, &v99, a3);
  }
  v57 = v6[11];
  if (*(_QWORD *)&v57 && (*(_WORD *)(*(_QWORD *)&v57 + 177) & 0x20) != 0)
  {
    v99 = v100;
    *(float32x2_t *)&v99 = vadd_f32(*(float32x2_t *)&v100, vsub_f32(vmul_f32(vcvt_f32_s32(v6[24]), (float32x2_t)vdup_n_s32(0xBC800000)), *(float32x2_t *)(*(_QWORD *)&v57 + 40)));
    (*(void (**)(int32x2_t, __int128 *, uint64_t))(**(_QWORD **)&v57 + 328))(v57, &v99, a3);
  }
  v58 = v6[14];
  if (*(_QWORD *)&v58 && (*(_WORD *)(*(_QWORD *)&v58 + 177) & 0x20) != 0)
  {
    v99 = v100;
    *(float32x2_t *)&v99 = vadd_f32(*(float32x2_t *)&v100, vsub_f32(vmul_f32(vcvt_f32_s32(v6[24]), (float32x2_t)vdup_n_s32(0xBC800000)), *(float32x2_t *)(*(_QWORD *)&v58 + 40)));
    (*(void (**)(int32x2_t, __int128 *, uint64_t))(**(_QWORD **)&v58 + 328))(v58, &v99, a3);
  }
  result = (_QWORD *)v6[21];
  if (result && (*(_WORD *)((_BYTE *)result + 177) & 0x20) != 0)
  {
    v99 = v100;
    v78 = *(_QWORD **)(*(_QWORD *)&v6[1] + 264);
    if (v78)
    {
      v79 = (*(uint64_t (**)(_QWORD *))(*v78 + 416))(v78);
      v80 = ((v78[4] & 0xFFFFFFFF00000000) + v79) & 0xFFFFFFFF00000000 | (v78[4] + v79);
      v81.i32[1] = (((v78[4] & 0xFFFFFFFF00000000) + v79) & 0xFFFFFFFF00000000) >> 32;
      v82 = (int8x8_t)vshl_n_s32((int32x2_t)v80, 6uLL);
      HIDWORD(v80) = 0x1FFFFFF;
      v81.i32[0] = -33554432;
      result = (_QWORD *)v6[21];
      v83 = (int8x8_t)vcgt_s32(v81, (int32x2_t)v80);
      HIDWORD(v80) = -33554432;
      v81.i32[0] = 0x1FFFFFF;
      v84 = vmul_f32(vcvt_f32_s32((int32x2_t)vbsl_s8(v83, (int8x8_t)0x7FFFFFFF80000000, vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v80, v81), (int8x8_t)0x800000007FFFFFFFLL, v82))), (float32x2_t)vdup_n_s32(0x3C800000u));
    }
    else
    {
      v84 = 0;
    }
    *(float32x2_t *)&v99 = vadd_f32(*(float32x2_t *)&v99, vadd_f32(vsub_f32(v84, (float32x2_t)result[5]), vmul_f32(vcvt_f32_s32(v6[24]), (float32x2_t)vdup_n_s32(0xBC800000))));
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, __int128 *, uint64_t))(*result + 328))(result, &v99, a3);
  }
  return result;
}

BOOL WebCore::RenderLayer::hasAncestorWithFilterOutsets(_BOOL8 this)
{
  _QWORD *v1;
  int32x4_t v2;
  WebCore::RenderLayerFilters *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int32x4_t v7;
  uint64_t v8;
  const WebCore::FloatRect *v9;
  unint64_t v10;
  float32x4_t v11;
  float32x4_t v12;

  if (this)
  {
    v1 = (_QWORD *)this;
    v2 = vdupq_n_s32(0x3C800000u);
    v11 = (float32x4_t)v2;
    do
    {
      v3 = (WebCore::RenderLayerFilters *)v1[4];
      if (v1[31])
      {
        v7.i64[0] = WebCore::RenderLayer::localBoundingBox((uint64_t)v1, 0, *(double *)v2.i64);
        v7.i64[1] = v8;
        v12 = vmulq_f32(vcvtq_f32_s32(v7), v11);
        v5 = WebCore::RenderLayerFilters::calculateOutsets(v3, (WebCore::RenderElement *)&v12, v9);
      }
      else
      {
        v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 11) + 32) + 32);
        if (*(_DWORD *)(v4 + 20))
        {
          v5 = WebCore::FilterOperations::outsets((uint64_t **)(v4 + 8));
        }
        else
        {
          v5 = 0;
          v6 = 0;
        }
      }
      v10 = v5 | v6 | HIDWORD(v6);
      this = v10 != 0;
      if (v10)
        break;
      v1 = (_QWORD *)v1[5];
    }
    while (v1);
  }
  return this;
}

uint64_t WebCore::RenderLayer::beginTransparencyLayers(uint64_t a1, uint64_t a2, uint64_t a3, const WebCore::LayoutRect *a4)
{
  uint64_t result;
  __n128 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)();
  uint64_t v15;
  uint64_t (*v16)();
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)();
  uint64_t (*v25)();
  uint64_t v26;
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)();
  uint64_t v33;
  uint64_t (*v34)();
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t (*v51)();
  uint64_t v52;
  float v53;
  float v54;
  int v55;
  WTF *v56;
  void *v57;
  unsigned int *v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  float v62;
  uint64_t v63;
  void *v64;
  WTF *v65;
  uint64_t v66;
  const WebCore::RenderLayerModelObject *v67;
  WTF *v68;
  int v69;
  int v70;
  BOOL v71;
  unsigned int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD v82[4];
  WTF *v83[2];

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  if ((result & 1) != 0)
    return result;
  v10 = *(_DWORD *)(a3 + 48);
  result = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(result + 88);
  v12 = *(_QWORD *)(v11 + 32);
  if (*(float *)(v12 + 4) < 1.0)
    goto LABEL_48;
  v13 = *(_QWORD *)(v12 + 48);
  if (*(_QWORD *)(v13 + 8))
  {
    while (!*(_QWORD *)(v13 + 16))
    {
      v13 = *(_QWORD *)(v13 + 8);
      if (!v13)
        goto LABEL_8;
    }
    goto LABEL_48;
  }
  if (*(_QWORD *)(v13 + 16))
    v14 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  else
    v14 = 0;
  if (v14)
    goto LABEL_48;
LABEL_8:
  v15 = *(_QWORD *)(v11 + 40);
  if (*(_QWORD *)(*(_QWORD *)(v15 + 216) + 8))
    v16 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  else
    v16 = 0;
  if (v16)
    goto LABEL_48;
  if ((*(_DWORD *)(v15 + 636) & 0x1F00000) != 0x100000)
    goto LABEL_48;
  v17 = *(_QWORD *)(a1 + 24);
  if ((v17 & 0x800000000000) != 0 && (v17 & 0xA) != 0)
    goto LABEL_48;
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8) + 40) + 8)
                              + 680)
                  + 680) & 0x800000000000) != 0)
  {
    v26 = WebCore::RenderLayerModelObject::svgClipperResourceFromStyle((WebCore::RenderLayerModelObject *)result);
    if (v26)
    {
      WebCore::RenderSVGResourceClipper::shouldApplyPathClipping(v26, v83);
      result = (uint64_t)v83[0];
      v83[0] = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)result, v27);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
        goto LABEL_15;
      }
LABEL_48:
      if (((v10 & 0x200) != 0 || !*(_QWORD *)(a1 + 256)) && (*(_BYTE *)(a1 + 25) & 0x40) != 0)
        return result;
    }
  }
LABEL_15:
  if (*(_QWORD *)a3 != a1 && !*(_QWORD *)(a1 + 256))
  {
    v18 = *(_QWORD *)(a1 + 80);
    if (!v18 || !*(_QWORD *)(v18 + 8))
    {
      v9.n128_u32[0] = 1.0;
      v19 = a1;
      do
      {
        v19 = *(_QWORD *)(v19 + 40);
        if (!v19)
          break;
        if ((*(_BYTE *)(v19 + 24) & 0x4A) != 0)
        {
          if (*(_QWORD *)(v19 + 256))
            break;
          v20 = *(_QWORD *)(v19 + 80);
          if (v20)
          {
            if (*(_QWORD *)(v20 + 8))
              break;
          }
          v21 = *(_QWORD *)(*(_QWORD *)(v19 + 32) + 88);
          v22 = *(_QWORD *)(v21 + 32);
          if (*(float *)(v22 + 4) < 1.0)
            goto LABEL_55;
          v23 = *(_QWORD *)(v22 + 48);
          if (*(_QWORD *)(v23 + 8))
          {
            while (!*(_QWORD *)(v23 + 16))
            {
              v23 = *(_QWORD *)(v23 + 8);
              if (!v23)
                goto LABEL_29;
            }
LABEL_55:
            WebCore::RenderLayer::beginTransparencyLayers(v9);
            break;
          }
          if (*(_QWORD *)(v23 + 16))
            v24 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
          else
            v24 = 0;
          if (v24)
            goto LABEL_55;
LABEL_29:
          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 40) + 216) + 8))
            v25 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
          else
            v25 = 0;
          if (v25)
            goto LABEL_55;
        }
      }
      while (v19 != *(_QWORD *)a3);
    }
  }
  v28 = *(_DWORD *)(a3 + 48);
  result = *(_QWORD *)(a1 + 32);
  v29 = *(_QWORD *)(result + 88);
  v30 = *(_QWORD *)(v29 + 32);
  if (*(float *)(v30 + 4) >= 1.0)
  {
    v31 = *(_QWORD *)(v30 + 48);
    if (*(_QWORD *)(v31 + 8))
    {
      while (!*(_QWORD *)(v31 + 16))
      {
        v31 = *(_QWORD *)(v31 + 8);
        if (!v31)
          goto LABEL_62;
      }
    }
    else
    {
      if (*(_QWORD *)(v31 + 16))
        v32 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
      else
        v32 = 0;
      if (!v32)
      {
LABEL_62:
        v33 = *(_QWORD *)(v29 + 40);
        if (*(_QWORD *)(*(_QWORD *)(v33 + 216) + 8))
          v34 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
        else
          v34 = 0;
        if (!v34 && (*(_DWORD *)(v33 + 636) & 0x1F00000) == 0x100000)
        {
          v35 = *(_QWORD *)(a1 + 24);
          if ((v35 & 0x800000000000) == 0 || (v35 & 0xA) == 0)
          {
            if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8) + 40)
                                                    + 8)
                                        + 680)
                            + 680) & 0x800000000000) == 0)
              return result;
            result = WebCore::RenderLayerModelObject::svgClipperResourceFromStyle((WebCore::RenderLayerModelObject *)result);
            if (!result)
              return result;
            WebCore::RenderSVGResourceClipper::shouldApplyPathClipping(result, v83);
            result = (uint64_t)v83[0];
            v83[0] = 0;
            if (result)
            {
              if (*(_DWORD *)(result + 24) == 2)
              {
                if ((*(_WORD *)(result + 30) & 0x400) == 0)
                  return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v36);
              }
              else
              {
                *(_DWORD *)(result + 24) -= 2;
              }
              return result;
            }
          }
        }
      }
    }
  }
  if ((v28 & 0x200) != 0 || !*(_QWORD *)(a1 + 256))
  {
    v37 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) |= 0x4000uLL;
    if ((*(_BYTE *)(v37 + 23) & 0x60) == 0)
    {
      v38 = *(_QWORD **)(v37 + 88);
      v39 = v38[2];
      v40 = *(unsigned __int8 *)(v39 + 52);
      v41 = (v40 & 0xE) == 0 || (v40 & 0xF) == 0;
      if (v41 || (v62 = *(float *)(v39 + 48), ((v62 < 3.0) & (v40 >> 4)) == 0 && v62 <= 0.0))
      {
        if (*(_BYTE *)(v37 + 46) != 13)
        {
          if ((*(_BYTE *)(v37 + 52) & 7) != 3 || (*(_BYTE *)(v37 + 53) & 1) == 0)
            goto LABEL_151;
          ++*(_DWORD *)(v37 + 16);
          v43 = *(_QWORD *)(*(_QWORD *)(v37 + 224) + 24);
          if (v43 && (v44 = *(_QWORD *)(v43 + 8)) != 0 && (v45 = *(_QWORD *)(v44 + 688)) != 0)
          {
            if ((*(_WORD *)(v44 + 557) >> 5) - 3 <= 1
              && (*(_BYTE *)(v44 + 720) & 0x10) != 0)
            {
              WebCore::CachedImage::brokenImage(1.0, (uint64_t)v83);
              v58 = (unsigned int *)v83[0];
              if (v83[0])
              {
                v59 = *((_QWORD *)v83[0] + 1);
                v83[0] = 0;
                do
                {
                  v60 = __ldaxr(v58);
                  v61 = v60 - 1;
                }
                while (__stlxr(v61, v58));
                if (!v61)
                {
                  atomic_store(1u, v58);
                  WTF::fastFree((WTF *)v58, v57);
                }
              }
              else
              {
                v59 = 0;
              }
              v46 = v59;
            }
            else if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v45 + 56))(*(_QWORD *)(v44 + 688)) & 1) == 0
                   && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v45 + 64))(v45)
            {
              v46 = *(_QWORD *)(v44 + 688);
            }
            if (v46)
              LODWORD(v46) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46);
          }
          else
          {
            LODWORD(v46) = 0;
          }
          v47 = *(_DWORD *)(v37 + 16);
          if (!v47)
          {
            __break(0xC471u);
            JUMPOUT(0x1963E61E4);
          }
          *(_DWORD *)(v37 + 16) = v47 - 1;
          if (!(_DWORD)v46)
            goto LABEL_151;
          v37 = *(_QWORD *)(a1 + 32);
          v38 = *(_QWORD **)(v37 + 88);
        }
        v48 = *(_QWORD *)(v38[4] + 48);
        if (*(_QWORD *)(v48 + 8))
        {
          while (!*(_QWORD *)(v48 + 16))
          {
            v48 = *(_QWORD *)(v48 + 8);
            if (!v48)
              goto LABEL_110;
          }
          goto LABEL_151;
        }
        if (!(*(_QWORD *)(v48 + 16)
             ? WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance
             : 0))
        {
LABEL_110:
          v50 = v38[5];
          if (*(_QWORD *)(*(_QWORD *)(v50 + 216) + 8))
            v51 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
          else
            v51 = 0;
          if (!v51 && (*(_DWORD *)(v50 + 636) & 0x1F00000) == 0x100000)
          {
            v52 = *(_QWORD *)(a1 + 24);
            if ((v52 & 0x800000000000) == 0 || (v52 & 0xA) == 0)
            {
              if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 24) + 8) + 40)
                                                      + 8)
                                          + 680)
                              + 680) & 0x800000000000) == 0
                || (v63 = WebCore::RenderLayerModelObject::svgClipperResourceFromStyle((WebCore::RenderLayerModelObject *)v37)) == 0)
              {
LABEL_117:
                *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 336);
                *(_BYTE *)(a1 + 20) = 1;
                v53 = *(float *)(a2 + 336);
                v54 = v53 * *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 88) + 32) + 4);
                if (v53 == v54)
                  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a2 + 8);
                *(float *)(a2 + 336) = v54;
                v55 = *(_DWORD *)(a2 + 184) | 0x100;
LABEL_119:
                *(_DWORD *)(a2 + 184) = v55;
                return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a2 + 8);
              }
              WebCore::RenderSVGResourceClipper::shouldApplyPathClipping(v63, v83);
              v65 = v83[0];
              v83[0] = 0;
              if (v65)
              {
                if (*((_DWORD *)v65 + 6) == 2)
                {
                  if ((*((_WORD *)v65 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v65, v64);
                }
                else
                {
                  *((_DWORD *)v65 + 6) -= 2;
                }
                goto LABEL_117;
              }
            }
          }
        }
      }
    }
LABEL_151:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
    v66 = WebCore::transparencyClipBox((WebCore::RenderLayer **)a1, *(WebCore::RenderLayer **)a3, 0, 1, *(unsigned int *)(a3 + 48), a4);
    v83[1] = v68;
    v69 = *(_DWORD *)(a3 + 32);
    v70 = *(_DWORD *)(a3 + 36);
    v71 = __OFADD__((_DWORD)v66, v69);
    v72 = v66 + v69;
    if (v71)
      v72 = (v66 >> 31) + 0x7FFFFFFF;
    v71 = __OFADD__(HIDWORD(v66), v70);
    v73 = HIDWORD(v66) + v70;
    if (v71)
      v73 = (HIDWORD(v66) >> 31) + 0x7FFFFFFF;
    v83[0] = (WTF *)__PAIR64__(v73, v72);
    WebCore::snapRectToDevicePixelsIfNeeded((WebCore *)v83, *(const WebCore::LayoutRect **)(a1 + 32), v67);
    v82[0] = v74;
    v82[1] = v75;
    v82[2] = v76;
    v82[3] = v77;
    (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 456))(a2, v82);
    v78 = *(_QWORD *)(a1 + 32);
    v79 = *(_QWORD *)(v78 + 88);
    if ((*(_DWORD *)(*(_QWORD *)(v79 + 40) + 636) & 0x1F00000) == 0x100000)
      return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)a2 + 592))(a2, *(float *)(*(_QWORD *)(v79 + 32) + 4));
    if (*(_BYTE *)(v78 + 46) == 103)
    {
      v80 = *(_QWORD *)(a1 + 40);
      if (v80)
      {
        if ((*(_BYTE *)(v80 + 24) & 1) != 0)
          return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)a2 + 592))(a2, *(float *)(*(_QWORD *)(v79 + 32) + 4));
      }
    }
    WebCore::GraphicsContext::setCompositeOperation(a2, *(unsigned __int8 *)(a2 + 194), (*(_QWORD *)(a1 + 24) >> 41) & 0x1F);
    (*(void (**)(uint64_t, float))(*(_QWORD *)a2 + 592))(a2, *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 88) + 32) + 4));
    if ((*(_WORD *)(a2 + 194) & 0xFF00) == 0x100)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a2 + 8);
    *(_WORD *)(a2 + 194) = *(_WORD *)(a2 + 194) | 0x100;
    v55 = *(_DWORD *)(a2 + 184) | 0x20;
    goto LABEL_119;
  }
  return result;
}

uint64_t WebCore::transparencyClipBox(WebCore::RenderLayer **this, WebCore::RenderLayer *a2, int a3, int a4, unint64_t a5, const WebCore::LayoutRect *a6)
{
  WebCore::RenderLayer *v12;
  BOOL v13;
  __int16 v14;
  double v15;
  uint64_t v16;
  double v17;
  WebCore::CSSFilter *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t result;
  unsigned int v38;
  unsigned int v39;
  signed int v40;
  uint64_t v41;
  signed int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  int32x4_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  const WebCore::FloatRect *v60;
  uint64_t v61;
  WebCore::RenderLayer *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  double v66;
  double v67;
  const double *v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WebCore::RenderFragmentedFlow *v74;
  uint64_t v75;
  unint64_t v76;
  unsigned int v77;
  int v78;
  _QWORD v79[2];
  _QWORD v80[2];
  float32x4_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  __int128 v89;
  __int128 v90;
  float64x2x4_t v91;
  float64x2x4_t v92;
  float64x2x4_t v93;
  float64x2x4_t v94;

  if (a2 == (WebCore::RenderLayer *)this)
    goto LABEL_7;
  if (a3)
  {
    if (a3 != 1 || !WebCore::RenderLayer::isTransformed(this[4]))
      goto LABEL_7;
    if (a4)
      goto LABEL_98;
LABEL_97:
    v62 = this[27];
    if (v62)
    {
      v63 = *((_QWORD *)v62 + 1);
LABEL_99:
      if (v63)
        v64 = v63;
      else
        v64 = (uint64_t)a2;
      v65 = WebCore::RenderLayer::offsetFromAncestor((uint64_t)this, v64, 0);
      v83 = (float64x2_t)xmmword_1969FCBE0;
      v84 = xmmword_1969FCBF0;
      v85 = (float64x2_t)xmmword_1969FCC00;
      v86 = xmmword_1969FCC10;
      v81 = (float32x4_t)constinit_103;
      v82 = *(float64x2_t *)algn_1969FCBD0;
      v66 = (double)(int)v65 * 0.015625;
      v67 = (double)SHIDWORD(v65) * 0.015625;
      v87.f64[0] = v66 + v67 * 0.0 + 0.0;
      v87.f64[1] = v67 + v66 * 0.0 + 0.0;
      v88 = vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v67 * 0.0 + v66 * 0.0), 0), (float64x2_t)xmmword_1968A14C0);
      v68 = (const double *)this[25];
      v93 = vld4q_dup_f64(v68);
      v68 += 4;
      v91 = vld4q_dup_f64(v68);
      v68 += 4;
      v81 = (float32x4_t)vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v93.val[0], (float64x2_t)constinit_103), v93.val[1], (float64x2_t)xmmword_1969FCBE0), v93.val[2], (float64x2_t)xmmword_1969FCC00), v93.val[3], v87);
      v82 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v93.val[0], *(float64x2_t *)algn_1969FCBD0), v93.val[1], xmmword_1969FCBF0), v93.val[2], xmmword_1969FCC10), v93.val[3], v88);
      v94 = vld4q_dup_f64(v68);
      v68 += 4;
      v83 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v91.val[0], (float64x2_t)constinit_103), v91.val[1], (float64x2_t)xmmword_1969FCBE0), v91.val[2], (float64x2_t)xmmword_1969FCC00), v91.val[3], v87);
      v84 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v91.val[0], *(float64x2_t *)algn_1969FCBD0), v91.val[1], xmmword_1969FCBF0), v91.val[2], xmmword_1969FCC10), v91.val[3], v88);
      v92 = vld4q_dup_f64(v68);
      v85 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v94.val[0], (float64x2_t)constinit_103), v94.val[1], (float64x2_t)xmmword_1969FCBE0), v94.val[2], (float64x2_t)xmmword_1969FCC00), v94.val[3], v87);
      v86 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v94.val[0], *(float64x2_t *)algn_1969FCBD0), v94.val[1], xmmword_1969FCBF0), v94.val[2], xmmword_1969FCC10), v94.val[3], v88);
      v87 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v92.val[0], (float64x2_t)constinit_103), v92.val[1], (float64x2_t)xmmword_1969FCBE0), v92.val[2], (float64x2_t)xmmword_1969FCC00), v92.val[3], v87);
      v88 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v92.val[0], *(float64x2_t *)algn_1969FCBD0), v92.val[1], xmmword_1969FCBF0), v92.val[2], xmmword_1969FCC10), v92.val[3], v88);
      *(_QWORD *)&v90 = 0;
      v80[0] = WebCore::RenderLayer::boundingBox((uint64_t)this, (const WebCore::RenderLayerModelObject *)this, &v90, 0, v92.val[0].f64[0]);
      v80[1] = v69;
      WebCore::expandClipRectForDescendantsAndReflection((WebCore::LayoutRect *)v80, this, (uint64_t)this);
      v79[0] = WebCore::RenderLayer::filterOutsets((WebCore::RenderLayer *)this, v70);
      v79[1] = v71;
      *(_QWORD *)&v90 = WebCore::toLayoutBoxExtent((int *)v79);
      *((_QWORD *)&v90 + 1) = v72;
      WebCore::LayoutRect::expand(v80, (unsigned int *)&v90);
      result = WebCore::TransformationMatrix::mapRect((WebCore::TransformationMatrix *)&v81, (const WebCore::LayoutRect *)v80);
      *(_QWORD *)&v89 = result;
      *((_QWORD *)&v89 + 1) = v73;
      if (v63)
      {
        v74 = *(WebCore::RenderFragmentedFlow **)(v63 + 32);
        if ((*((_BYTE *)v74 + 52) & 7) != 1 || (*((_BYTE *)v74 + 53) & 2) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1963E6AC8);
        }
        *(_QWORD *)&v89 = WebCore::RenderFragmentedFlow::fragmentsBoundingBox(v74, (const WebCore::LayoutRect *)&v89);
        *((_QWORD *)&v89 + 1) = v75;
        v76 = WebCore::RenderLayer::offsetFromAncestor(v63, (uint64_t)a2, 0);
        v77 = v89 + v76;
        if (__OFADD__((_DWORD)v89, (_DWORD)v76))
          v77 = (v89 >> 31) + 0x7FFFFFFF;
        LODWORD(v89) = v77;
        v78 = DWORD1(v89) + HIDWORD(v76);
        if (__OFADD__(DWORD1(v89), HIDWORD(v76)))
          v78 = (DWORD1(v89) >> 31) + 0x7FFFFFFF;
        DWORD1(v89) = v78;
        if (!a6)
          return v89;
      }
      else if (!a6)
      {
        return result;
      }
      v90 = v89;
      WebCore::LayoutRect::intersect((int *)&v90, a6);
      *((_QWORD *)&v89 + 1) = *((_QWORD *)&v90 + 1);
      return v90;
    }
LABEL_98:
    v63 = 0;
    goto LABEL_99;
  }
  v12 = this[32];
  if (v12)
    v13 = !*((_BYTE *)v12 + 290)
       && (v61 = *((_QWORD *)v12 + 1), (*(_BYTE *)(v61 + 24) & 1) != 0)
       && !*(_BYTE *)(WebCore::RenderView::compositor(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v61 + 32) + 24) + 8) + 40)
                                                                                          + 8)
                                                                              + 1944))
                    + 198)
       && *(_DWORD *)(WebCore::RenderView::compositor(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v12 + 1) + 32) + 24) + 8) + 40)
                                                                                          + 8)
                                                                              + 1944))
                    + 216) != 2;
  else
    v13 = 1;
  if (this[25] && (a5 >> 9) & 1 | v13)
  {
    if (a4
      || (WebCore::RenderLayer::hasCompositedLayerInEnclosingPaginationChain((WebCore::RenderLayer *)this) & 1) != 0)
    {
      goto LABEL_98;
    }
    goto LABEL_97;
  }
LABEL_7:
  if (a3 == 1)
    v14 = 768;
  else
    v14 = 640;
  v81.i64[0] = WebCore::RenderLayer::offsetFromAncestor((uint64_t)this, (uint64_t)a2, 0);
  *(_QWORD *)&v89 = WebCore::RenderLayer::boundingBox((uint64_t)this, a2, &v81, v14, v15);
  *((_QWORD *)&v89 + 1) = v16;
  WebCore::expandClipRectForDescendantsAndReflection((WebCore::LayoutRect *)&v89, this, (uint64_t)a2);
  v18 = this[4];
  if (this[31])
  {
    v52.i64[0] = WebCore::RenderLayer::localBoundingBox((uint64_t)this, 0, v17);
    v52.i64[1] = v53;
    v81 = vmulq_f32(vcvtq_f32_s32(v52), (float32x4_t)vdupq_n_s32(0x3C800000u));
    v54 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v18 + 11) + 32) + 32);
    v57 = *(_QWORD **)(v54 + 8);
    v55 = v54 + 8;
    v56 = v57;
    v58 = *(unsigned int *)(v55 + 12);
    if ((_DWORD)v58)
    {
      v59 = 8 * v58;
      while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v56 + 80))(*v56))
      {
        ++v56;
        v59 -= 8;
        if (!v59)
          goto LABEL_12;
      }
      v20 = WebCore::CSSFilter::calculateOutsets(v18, (unsigned int ***)v55, (const WebCore::FilterOperations *)&v81, v60);
      goto LABEL_13;
    }
  }
  else
  {
    v19 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v18 + 11) + 32) + 32);
    if (*(_DWORD *)(v19 + 20))
    {
      v20 = WebCore::FilterOperations::outsets((uint64_t **)(v19 + 8));
      goto LABEL_13;
    }
  }
LABEL_12:
  v20 = 0;
  v21 = 0;
LABEL_13:
  v22 = HIDWORD(v20) << 6;
  if (SHIDWORD(v20) < -33554432)
    v22 = 0x80000000;
  if (SHIDWORD(v20) > 0x1FFFFFF)
    v22 = 0x7FFFFFFF;
  v23 = HIDWORD(v21) << 6;
  if (SHIDWORD(v21) < -33554432)
    v23 = 0x80000000;
  if (SHIDWORD(v21) <= 0x1FFFFFF)
    v24 = v23;
  else
    v24 = 0x7FFFFFFF;
  if ((int)v20 >= -33554432)
    v25 = (_DWORD)v20 << 6;
  else
    v25 = 0x80000000;
  if ((int)v21 >= -33554432)
    v26 = (_DWORD)v21 << 6;
  else
    v26 = 0x80000000;
  if (v24 == 0x80000000)
    v27 = 0x7FFFFFFF;
  else
    v27 = -v24;
  if ((int)v20 <= 0x1FFFFFF)
    v28 = v25;
  else
    v28 = 0x7FFFFFFF;
  if (v28 == 0x80000000)
    v29 = 0x7FFFFFFF;
  else
    v29 = -v28;
  v30 = v89 + v27;
  if (__OFADD__((_DWORD)v89, v27))
    v30 = (v89 >> 31) + 0x7FFFFFFF;
  LODWORD(v89) = v30;
  v31 = DWORD1(v89) + v29;
  if (__OFADD__(DWORD1(v89), v29))
    v31 = (DWORD1(v89) >> 31) + 0x7FFFFFFF;
  DWORD1(v89) = v31;
  v32 = __OFADD__(v24, v22);
  v33 = v24 + v22;
  if (v32)
    v33 = (v24 >> 31) + 0x7FFFFFFF;
  if ((int)v21 > 0x1FFFFFF)
    v26 = 0x7FFFFFFF;
  v32 = __OFADD__(v28, v26);
  v34 = v28 + v26;
  if (v32)
    v34 = (v28 >> 31) + 0x7FFFFFFF;
  v35 = DWORD2(v89) + v33;
  if (__OFADD__(DWORD2(v89), v33))
    v35 = (DWORD2(v89) >> 31) + 0x7FFFFFFF;
  DWORD2(v89) = v35;
  v32 = __OFADD__(HIDWORD(v89), v34);
  v36 = HIDWORD(v89) + v34;
  if (v32)
    v36 = (HIDWORD(v89) >> 31) + 0x7FFFFFFF;
  HIDWORD(v89) = v36;
  result = v89;
  if (a6)
  {
    v39 = *(_DWORD *)a6;
    v38 = *((_DWORD *)a6 + 1);
    if ((int)v89 <= *(_DWORD *)a6)
      v40 = *(_DWORD *)a6;
    else
      v40 = v89;
    if (SDWORD1(v89) <= (int)v38)
      v41 = v38;
    else
      v41 = DWORD1(v89);
    v42 = v89 + DWORD2(v89);
    if (__OFADD__((_DWORD)v89, DWORD2(v89)))
      v42 = (v89 >> 31) + 0x7FFFFFFF;
    v43 = *((_DWORD *)a6 + 2);
    v32 = __OFADD__(v39, v43);
    v44 = v39 + v43;
    if (v32)
      v44 = (v39 >> 31) + 0x7FFFFFFF;
    if (v44 < v42)
      v42 = v44;
    v45 = DWORD1(v89) + HIDWORD(v89);
    if (__OFADD__(DWORD1(v89), HIDWORD(v89)))
      v45 = (DWORD1(v89) >> 31) + 0x7FFFFFFF;
    v46 = *((_DWORD *)a6 + 3);
    v32 = __OFADD__(v38, v46);
    v47 = v38 + v46;
    if (v32)
      v47 = (v38 >> 31) + 0x7FFFFFFF;
    if (v47 >= v45)
      v48 = v45;
    else
      v48 = v47;
    if (v40 >= v42 || (int)v41 >= v48)
    {
      v42 = 0;
      v48 = 0;
      v40 = 0;
      v41 = 0;
    }
    v49 = v42 - v40;
    if (__OFSUB__(v42, v40))
      v49 = (v42 >> 31) + 0x7FFFFFFF;
    v50 = v41 << 32;
    v32 = __OFSUB__(v48, (_DWORD)v41);
    v51 = (v48 - v41);
    if (v32)
      v51 = (v48 >> 31) + 0x7FFFFFFF;
    result = v50 | v40;
    *((_QWORD *)&v89 + 1) = v49 | (unint64_t)(v51 << 32);
  }
  return result;
}

uint64_t WebCore::GraphicsContext::setCompositeOperation(uint64_t a1, int a2, int a3)
{
  if (*(unsigned __int8 *)(a1 + 194) != a2 || *(unsigned __int8 *)(a1 + 195) != a3)
  {
    *(_WORD *)(a1 + 194) = a2 | ((_WORD)a3 << 8);
    *(_DWORD *)(a1 + 184) |= 0x20u;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a1 + 8);
}

WebCore::RenderLayer *WebCore::RenderLayer::commonAncestorWithLayer(WebCore::RenderLayer *this, const WebCore::RenderLayer *a2)
{
  WebCore::RenderLayer *v2;
  const WebCore::RenderLayer *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  int v11;
  unsigned int v12;
  int v14;
  WTF *v15;
  WTF *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int i;
  WTF *v26;
  uint64_t v28;
  WTF **v29;
  WTF *v30;
  uint64_t v32;
  WTF **v33;
  uint64_t v34;
  WTF *v35;

  v2 = this;
  if (this == a2)
    return this;
  v3 = a2;
  v33 = 0;
  v34 = 0;
  do
  {
    LODWORD(v34) = v34 + 1;
    if (v34 <= HIDWORD(v34))
      goto LABEL_32;
    v4 = (uint64_t)v33;
    if (!v33)
    {
LABEL_5:
      v5 = 0;
      LODWORD(v34) = 0;
LABEL_30:
      v14 = v5;
      goto LABEL_31;
    }
    v6 = *((_DWORD *)v33 - 1);
    if (!v6)
      goto LABEL_27;
    v7 = 0;
    v8 = v6 - 1;
    do
    {
      v9 = v8;
      v10 = *(WTF **)(v4 + 8 * v8);
      if ((unint64_t)v10 + 1 >= 2 && !*((_QWORD *)v10 + 1))
      {
        *(_QWORD *)(v4 + 8 * v8) = 0;
        if (*(_DWORD *)v10 == 1)
          WTF::fastFree(v10, a2);
        else
          --*(_DWORD *)v10;
        *(_QWORD *)(v4 + 8 * v8) = -1;
        ++v7;
      }
      --v8;
    }
    while (v9);
    v4 = (uint64_t)v33;
    if (v7)
    {
      *((_DWORD *)v33 - 4) += v7;
      if (v33)
        v11 = *((_DWORD *)v33 - 3);
      else
        v11 = 0;
      *((_DWORD *)v33 - 3) = v11 - v7;
      v4 = (uint64_t)v33;
    }
    if (!v4)
      goto LABEL_5;
    v12 = *(_DWORD *)(v4 - 4);
    if (v12 < 9 || 6 * *(_DWORD *)(v4 - 12) >= v12)
    {
LABEL_27:
      LODWORD(v34) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)&v33);
      v4 = (uint64_t)v33;
      LODWORD(v34) = 0;
      if (!v33)
      {
        v5 = 0;
        goto LABEL_30;
      }
    }
    v5 = *(_DWORD *)(v4 - 12);
    v14 = 0x7FFFFFFF;
    if (v5 < 0x7FFFFFFF)
      goto LABEL_30;
LABEL_31:
    HIDWORD(v34) = 2 * v14;
LABEL_32:
    WTF::WeakPtrFactory<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl>::initializeIfNeeded(v2, (uint64_t)v2);
    v15 = *(WTF **)v2;
    *(_DWORD *)v15 = **(_DWORD **)v2 + 2;
    v35 = v15;
    WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add((uint64_t *)&v33, &v35, (uint64_t)&v32);
    v16 = v35;
    v35 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        WTF::fastFree(v16, a2);
      else
        --*(_DWORD *)v16;
    }
    if (*(_DWORD *)v15 == 1)
      WTF::fastFree(v15, a2);
    else
      --*(_DWORD *)v15;
    v2 = (WebCore::RenderLayer *)*((_QWORD *)v2 + 5);
  }
  while (v2);
  v17 = v34;
  v18 = (uint64_t)v33;
  if (v33)
  {
    do
    {
      LODWORD(v34) = ++v17;
      v19 = *(_QWORD *)v3;
      if (*(_QWORD *)v3 && *(_QWORD *)(v19 + 8))
      {
        v20 = *((_DWORD *)v33 - 2);
        v21 = (~(v19 << 32) + v19) ^ ((unint64_t)(~(v19 << 32) + v19) >> 22);
        v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
        v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
        v24 = v20 & ((v23 >> 31) ^ v23);
        for (i = 1; ; ++i)
        {
          v26 = v33[v24];
          if (!v26)
            break;
          if (v26 != (WTF *)-1 && v26 == (WTF *)v19)
            goto LABEL_56;
          v24 = (v24 + i) & v20;
        }
      }
      v3 = (const WebCore::RenderLayer *)*((_QWORD *)v3 + 5);
    }
    while (v3);
  }
  else
  {
    do
    {
      ++v17;
      v3 = (const WebCore::RenderLayer *)*((_QWORD *)v3 + 5);
    }
    while (v3);
    LODWORD(v34) = v17;
  }
LABEL_56:
  if (v33)
  {
    v28 = *((unsigned int *)v33 - 1);
    if ((_DWORD)v28)
    {
      v29 = v33;
      do
      {
        v30 = *v29;
        if (*v29 != (WTF *)-1)
        {
          *v29 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 1)
              WTF::fastFree(v30, a2);
            else
              --*(_DWORD *)v30;
          }
        }
        ++v29;
        --v28;
      }
      while (v28);
    }
    WTF::fastFree((WTF *)(v18 - 16), a2);
  }
  return v3;
}

uint64_t WebCore::RenderLayer::shouldTryToScrollForScrollIntoView(WebCore::RenderLayer *this)
{
  _DWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;

  v1 = (_DWORD *)*((_QWORD *)this + 4);
  if ((*((_BYTE *)v1 + 45) & 4) == 0)
    return 0;
  if ((*((_BYTE *)v1 + 22) & 1) == 0)
    return 0;
  v3 = *((_QWORD *)v1 + 4);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 40) + 48) != -1)
        return 0;
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 3) + 8)
                                                                                        + 40)
                                                                            + 8)
                                                                + 528)
                                                    + 8)
                                        + 640)
                            + 144)
                + 64) == 2)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 1384))(*((_QWORD *)this + 4));
  v5 = (*((_BYTE *)v1 + 45) & 2) != 0 ? *(_QWORD *)(*(_QWORD *)(v3 + 8) + 96) : *((_QWORD *)v1 + 12);
  v6 = v5 & 0x1C00;
  if (v6 == 2048 || !v6)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 1208))(*((_QWORD *)this + 4));
  v8 = v1[40];
  v9 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 1016))(v1);
  if (__OFSUB__(v8, v9))
    v10 = (v8 >> 31) + 0x7FFFFFFF;
  else
    v10 = v8 - v9;
  v11 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 1024))(v1);
  if (__OFSUB__(v10, v11))
    v12 = (v10 >> 31) + 0x7FFFFFFF;
  else
    v12 = v10 - v11;
  v13 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 1352))(v1);
  v14 = v13 << 6;
  if (v13 < -33554432)
    v14 = 0x80000000;
  if (v13 > 0x1FFFFFF)
    v14 = 0x7FFFFFFF;
  v15 = __OFSUB__(v12, v14);
  v16 = v12 - v14;
  if (v15)
    v16 = (v12 >> 31) + 0x7FFFFFFF;
  if (v7 != (((v16 & ~(v16 >> 31) & 0x20u) + 32) >> 6) + ((v16 & ~(v16 >> 31)) >> 6))
    return 1;
  v17 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 1216))(v1);
  v18 = v1[41];
  v19 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 1000))(v1);
  if (__OFSUB__(v18, v19))
    v20 = (v18 >> 31) + 0x7FFFFFFF;
  else
    v20 = v18 - v19;
  v21 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 1008))(v1);
  if (__OFSUB__(v20, v21))
    v22 = (v20 >> 31) + 0x7FFFFFFF;
  else
    v22 = v20 - v21;
  v23 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 1360))(v1);
  v24 = v23 << 6;
  if (v23 < -33554432)
    v24 = 0x80000000;
  if (v23 > 0x1FFFFFF)
    v24 = 0x7FFFFFFF;
  v15 = __OFSUB__(v22, v24);
  v25 = v22 - v24;
  if (v15)
    v25 = (v22 >> 31) + 0x7FFFFFFF;
  return v17 != (((v25 & ~(v25 >> 31) & 0x20u) + 32) >> 6) + ((v25 & ~(v25 >> 31)) >> 6);
}

uint64_t WebCore::RenderLayer::overflowControlsRects@<X0>(WebCore::RenderLayer *this@<X0>, uint64_t a2@<X8>)
{
  WebCore::RenderLayerScrollableArea *v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t *v35;
  char *v36;

  v4 = (WebCore::RenderLayerScrollableArea *)*((_QWORD *)this + 33);
  if (v4)
    return WebCore::RenderLayerScrollableArea::overflowControlsRects(v4, a2);
  v6 = *((_QWORD *)this + 4);
  if ((*(_BYTE *)(v6 + 45) & 4) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1963E7244);
  }
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 992))(*((_QWORD *)this + 4));
  v9 = *(_DWORD *)(v6 + 160);
  v10 = *(_DWORD *)(v6 + 164);
  v11 = __OFSUB__(v9, v8);
  v12 = v9 - v8;
  v13 = (v9 >> 31) + 0x7FFFFFFF;
  if (!v11)
    v13 = v12;
  v11 = __OFSUB__(v13, HIDWORD(result));
  v14 = v13 - HIDWORD(result);
  v15 = (v13 >> 31) + 0x7FFFFFFF;
  if (v11)
    v14 = v15;
  v11 = __OFSUB__(v10, (_DWORD)result);
  v16 = v10 - result;
  v17 = (v10 >> 31) + 0x7FFFFFFF;
  if (v11)
    v16 = v17;
  v11 = __OFSUB__(v16, v7);
  v18 = v16 - v7;
  v19 = (v16 >> 31) + 0x7FFFFFFF;
  if (v11)
    v20 = v19;
  else
    v20 = v18;
  v21 = v8 + 63;
  if (v8 >= 0)
    v21 = v8;
  v22 = v8 - (v21 & 0xFFFFFFC0);
  v23 = result + 63;
  if ((int)result >= 0)
    v23 = result;
  v24 = result - (v23 & 0xFFFFFFC0);
  v11 = __OFADD__(v22, v14);
  v25 = v22 + v14;
  v26 = (v22 >> 31) + 0x7FFFFFFF;
  if (!v11)
    v26 = v25;
  v11 = __OFADD__(v24, v20);
  v27 = v24 + v20;
  v28 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 88) + 32) + 148);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  if (v11)
    v27 = (v24 >> 31) + 0x7FFFFFFF;
  *(_OWORD *)(a2 + 32) = 0uLL;
  *(_OWORD *)(a2 + 48) = 0uLL;
  if ((v28 & 0x38000000) != 0)
  {
    v29 = v21 >> 6;
    v30 = v23 >> 6;
    v31 = v27 / 64;
    v32 = (int)(v27 - (v21 & 0xFFFFFFC0) + 32) >> 6;
    v33 = v26 / 64;
    v34 = (int)(v26 - (v21 & 0xFFFFFFC0) + 32) >> 6;
    {
      if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
      {
        v35 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
          goto LABEL_28;
        WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
        goto LABEL_35;
      }
    }
    else
    {
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0uLL;
      *(_OWORD *)&byte_1ECE90A50 = 0uLL;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
    }
    v35 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
    {
LABEL_28:
      result = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*v35 + 40))(v35, 0, 1);
      *(_QWORD *)(a2 + 48) = (v33 + v29 + v34 - result) | ((unint64_t)(v31 + v30 + v32 - result) << 32);
      *(_QWORD *)(a2 + 56) = result | ((unint64_t)result << 32);
      return result;
    }
    WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
LABEL_35:
    *v36 = 1;
    goto LABEL_28;
  }
  return result;
}

uint64_t WebCore::RenderLayer::resize(uint64_t result, uint64_t a2, int *a3)
{
  WebCore::RenderLayer *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  unint64_t v11;
  uint64_t v12;
  int8x8_t v13;
  void *v14;
  float32x2_t v15;
  WTF *v16;
  WTF *v17;
  double v18;
  int v19;
  double v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  double v31;
  double v32;
  int v33;
  double v34;
  unsigned int v35;
  double v36;
  unsigned int v37;
  double v38;
  int v39;
  double v40;
  int v41;
  unsigned int v42;
  BOOL v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  WebCore::RenderObject *v49;
  unsigned __int8 *v50;
  WebCore::RenderObject *v51;
  int v52;
  float v53;
  double v54;
  int v55;
  WebCore::RenderObject *v56;
  unsigned __int8 *v57;
  WebCore::RenderObject *v58;
  int v59;
  float v60;
  double v61;
  int v62;
  double v63;
  int v64;
  double v65;
  int v66;
  signed int v67;
  unsigned int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  char v73;
  unsigned int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  int v85;
  int v86;
  int v87;
  double v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  int v92;
  BOOL v93;
  int v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  int v100;
  unsigned int v101;
  int v102;
  int v103;
  int v104;
  double v105;
  unsigned int v106;
  int v107;
  int v108;
  float v109;
  int v110;
  float v111;
  uint64_t v112;
  float32x2_t v113;
  __int128 v114;
  __int128 v115;
  char v116;
  int v117;
  int v118;
  int v119;
  int v120;
  char v121;
  WTF *v122;
  WTF *v123;
  uint64_t v124;
  char v125;
  __int16 v126;
  uint64_t v127;

  if ((*(_BYTE *)(result + 25) & 4) != 0)
  {
    v4 = (WebCore::RenderLayer *)result;
    v5 = *(_QWORD *)(result + 32);
    if (((*(_BYTE *)(v5 + 22) & 1) != 0 || *(_BYTE *)(v5 + 46) == 14)
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 88) + 32) + 151) & 0x38) != 0
      && (*(_BYTE *)(v5 + 45) & 1) == 0)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
      if (v6)
      {
        if ((*(_WORD *)(v6 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1963E7D48);
        }
        v7 = *(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL;
        if (v7)
        {
          if ((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1963E7D68);
          }
          if ((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1963E7D88);
          }
        }
        v8 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8);
        v9 = *(_QWORD *)(*(_QWORD *)(v8 + 528) + 8);
        if (*(_BYTE *)(*(_QWORD *)(v9 + 640) + 168))
        {
          v10 = *(float *)(*(_QWORD *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x68) + 184);
          v11 = WebCore::ScrollView::windowToContents(*(WebCore::ScrollView **)(v9 + 288), (const WebCore::IntPoint *)(a2 + 52), (const WebCore::IntPoint *)a3);
          v12 = *((_QWORD *)v4 + 4);
          v13 = (int8x8_t)vcgt_s32((int32x2_t)v11, (int32x2_t)0xFE000000FE000000);
          v113 = vmul_f32(vcvt_f32_s32((int32x2_t)vorr_s8((int8x8_t)(*(_QWORD *)&v13 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)v11), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)v11, 6uLL)), v13))), (float32x2_t)vdup_n_s32(0x3C800000u));
          v121 = 0;
          v114 = 0u;
          v115 = 0u;
          v116 = 0;
          v123 = 0;
          v124 = 0;
          v122 = 0;
          v125 = 0;
          v126 = 1;
          v127 = 0x100000000;
          (*(void (**)(uint64_t, uint64_t, float32x2_t *))(*(_QWORD *)v12 + 584))(v12, 2, &v113);
          WebCore::TransformState::flatten((WebCore::TransformState *)&v113, 0);
          v15 = v113;
          v16 = v123;
          v123 = 0;
          if (v16)
            WTF::fastFree(v16, v14);
          v17 = v122;
          v122 = 0;
          if (v17)
            WTF::fastFree(v17, v14);
          v18 = v15.f32[0] * 64.0;
          if (v18 >= 2147483650.0)
          {
            v19 = 0x7FFFFFFF;
          }
          else if (v18 <= -2147483650.0)
          {
            v19 = 0x80000000;
          }
          else
          {
            v19 = (int)v18;
          }
          v20 = v15.f32[1] * 64.0;
          v21 = 0x7FFFFFFF;
          v112 = v8;
          if (v20 >= 2147483650.0)
          {
            v22 = 0x7FFFFFFF;
          }
          else if (v20 <= -2147483650.0)
          {
            v22 = 0x80000000;
          }
          else
          {
            v22 = (int)v20;
          }
          if (v19 >= 0)
            v23 = v19;
          else
            v23 = v19 + 63;
          v24 = (int)(v19 - (v23 & 0xFFFFFFC0) + 32) >> 6;
          if (v22 >= 0)
            v25 = v22;
          else
            v25 = v22 + 63;
          v26 = (int)(v22 - (v25 & 0xFFFFFFC0) + 32) >> 6;
          WebCore::RenderLayer::overflowControlsRects(v4, (uint64_t)&v113);
          v27 = v24 + (v23 >> 6) - (v117 + v119);
          v28 = v26 + (v25 >> 6) - (v118 + v120);
          v29 = v27 << 6;
          if (v27 < -33554432)
            v29 = 0x80000000;
          if (v27 > 0x1FFFFFF)
            v29 = 0x7FFFFFFF;
          v30 = v28 << 6;
          if (v28 < -33554432)
            v30 = 0x80000000;
          if (v28 > 0x1FFFFFF)
            v30 = 0x7FFFFFFF;
          v31 = (float)((float)((float)v29 * 0.015625) / v10) * 64.0;
          if (v31 < 2147483650.0)
          {
            if (v31 <= -2147483650.0)
              v21 = 0x80000000;
            else
              v21 = (int)v31;
          }
          v32 = (float)((float)((float)v30 * 0.015625) / v10) * 64.0;
          if (v32 >= 2147483650.0)
          {
            v33 = 0x7FFFFFFF;
          }
          else if (v32 <= -2147483650.0)
          {
            v33 = 0x80000000;
          }
          else
          {
            v33 = (int)v32;
          }
          v34 = (float)((float)((float)*(int *)(v7 + 160) * 0.015625) / v10) * 64.0;
          if (v34 >= 2147483650.0)
          {
            v35 = 0x7FFFFFFF;
          }
          else if (v34 <= -2147483650.0)
          {
            v35 = 0x80000000;
          }
          else
          {
            v35 = (int)v34;
          }
          v36 = (float)((float)((float)*(int *)(v7 + 164) * 0.015625) / v10) * 64.0;
          if (v36 >= 2147483650.0)
          {
            v37 = 0x7FFFFFFF;
          }
          else if (v36 <= -2147483650.0)
          {
            v37 = 0x80000000;
          }
          else
          {
            v37 = (int)v36;
          }
          v38 = (float)((float)((float)*a3 * 0.015625) / v10) * 64.0;
          if (v38 >= 2147483650.0)
          {
            v39 = 0x7FFFFFFF;
          }
          else if (v38 <= -2147483650.0)
          {
            v39 = 0x80000000;
          }
          else
          {
            v39 = (int)v38;
          }
          v40 = (float)((float)((float)a3[1] * 0.015625) / v10) * 64.0;
          if (v40 >= 2147483650.0)
          {
            v41 = 0x7FFFFFFF;
          }
          else if (v40 <= -2147483650.0)
          {
            v41 = 0x80000000;
          }
          else
          {
            v41 = (int)v40;
          }
          v42 = v35 + v21;
          if (__OFADD__(v35, v21))
            v42 = (v35 >> 31) + 0x7FFFFFFF;
          v43 = __OFADD__(v37, v33);
          v44 = v37 + v33;
          if (v43)
            v44 = (v37 >> 31) + 0x7FFFFFFF;
          v45 = v42 - v39;
          if (__OFSUB__(v42, v39))
            v45 = (v42 >> 31) + 0x7FFFFFFF;
          v46 = v44 - v41;
          if (__OFSUB__(v44, v41))
            v46 = (v44 >> 31) + 0x7FFFFFFF;
          WebCore::RenderLayer::overflowControlsRects(v4, (uint64_t)&v113);
          v48 = v119;
          v47 = v120;
          v49 = (WebCore::RenderObject *)*((_QWORD *)v4 + 4);
          v50 = *(unsigned __int8 **)(*((_QWORD *)v49 + 11) + 8);
          v51 = WebCore::RenderObject::containingBlock(v49);
          v52 = v50[24];
          if (v52 == 4)
          {
            v53 = *((float *)v50 + 5);
            if (!v50[26])
              v53 = (float)SLODWORD(v53);
          }
          else
          {
            v108 = *((_DWORD *)v51 + 40);
            if (v52 == 3)
            {
              v109 = *((float *)v50 + 5);
              if (!v50[26])
                v109 = (float)SLODWORD(v109);
              v53 = (float)((float)((float)v108 * 0.015625) * v109) / 100.0;
            }
            else
            {
              if (v52 != 11)
              {
                v55 = 0;
                goto LABEL_69;
              }
              WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v50 + 20), (float)v108 * 0.015625);
            }
          }
          v54 = v53 * 64.0;
          if (v54 >= 2147483650.0)
          {
            v55 = 0x7FFFFFFF;
          }
          else if (v54 <= -2147483650.0)
          {
            v55 = 0x80000000;
          }
          else
          {
            v55 = (int)v54;
          }
LABEL_69:
          v56 = (WebCore::RenderObject *)*((_QWORD *)v4 + 4);
          v57 = *(unsigned __int8 **)(*((_QWORD *)v56 + 11) + 8);
          v58 = WebCore::RenderObject::containingBlock(v56);
          v59 = v57[40];
          if (v59 == 4)
          {
            v60 = *((float *)v57 + 9);
            if (!v57[42])
              v60 = (float)SLODWORD(v60);
          }
          else
          {
            v110 = *((_DWORD *)v58 + 41);
            if (v59 == 3)
            {
              v111 = *((float *)v57 + 9);
              if (!v57[42])
                v111 = (float)SLODWORD(v111);
              v60 = (float)((float)((float)v110 * 0.015625) * v111) / 100.0;
            }
            else
            {
              if (v59 != 11)
              {
                v62 = 0;
LABEL_75:
                v63 = (float)((float)((float)v55 * 0.015625) / v10) * 64.0;
                if (v63 >= 2147483650.0)
                {
                  v64 = 0x7FFFFFFF;
                }
                else if (v63 <= -2147483650.0)
                {
                  v64 = 0x80000000;
                }
                else
                {
                  v64 = (int)v63;
                }
                v65 = (float)((float)((float)v62 * 0.015625) / v10) * 64.0;
                if (v65 >= 2147483650.0)
                {
                  v66 = 0x7FFFFFFF;
                }
                else if (v65 <= -2147483650.0)
                {
                  v66 = 0x80000000;
                }
                else
                {
                  v66 = (int)v65;
                }
                v67 = v48 << 6;
                if (v48 < -33554432)
                  v67 = 0x80000000;
                if (v48 > 0x1FFFFFF)
                  v67 = 0x7FFFFFFF;
                if (v64 <= v67)
                  v64 = v67;
                v68 = v47 << 6;
                if (v47 < -33554432)
                  v68 = 0x80000000;
                if (v47 <= 0x1FFFFFF)
                  v69 = v68;
                else
                  v69 = 0x7FFFFFFF;
                if (v66 > v69)
                  v69 = v66;
                if (v45 > v64)
                  v64 = v45;
                if (v46 > v69)
                  v69 = v46;
                v70 = v64 - v35;
                if (__OFSUB__(v64, v35))
                  v70 = (v64 >> 31) + 0x7FFFFFFF;
                v71 = v69 - v37;
                if (__OFSUB__(v69, v37))
                  v71 = (v69 >> 31) + 0x7FFFFFFF;
                if ((*(_WORD *)(v6 + 28) & 0x70) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1963E7DA8);
                }
                v72 = *(_QWORD *)(v7 + 88);
                v73 = *(_BYTE *)(*(_QWORD *)(v72 + 8) + 68);
                v74 = *(_DWORD *)(*(_QWORD *)(v72 + 32) + 148);
                v75 = (v74 >> 27) & 7;
                if ((v75 - 1) < 2
                  || ((*(_BYTE *)(v7 + 21) & 0x10) != 0 ? (v76 = 4) : (v76 = 5), v75 == v76))
                {
                  if (v70)
                  {
                    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 848))(v6))
                    {
                      v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1096))(v7);
                      WebCore::StyledElement::setInlineStyleProperty((WebCore::StyledElement *)v6, (WTF::StringImpl *)0x195, 6, 0, (float)((float)((float)v77 * 0.015625) / v10));
                      v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1104))(v7);
                      WebCore::StyledElement::setInlineStyleProperty((WebCore::StyledElement *)v6, (WTF::StringImpl *)0x196, 6, 0, (float)((float)((float)v78 * 0.015625) / v10));
                    }
                    v79 = *(_DWORD *)(v7 + 160);
                    if ((v73 & 4) != 0)
                    {
                      v86 = 0;
                    }
                    else
                    {
                      v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1016))(v7);
                      v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1024))(v7);
                      if (__OFADD__(v80, v81))
                        v82 = (v80 >> 31) + 0x7FFFFFFF;
                      else
                        v82 = v80 + v81;
                      v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 944))(v7);
                      if (__OFADD__(v82, v83))
                        v84 = (v82 >> 31) + 0x7FFFFFFF;
                      else
                        v84 = v82 + v83;
                      v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 952))(v7);
                      v86 = v84 + v85;
                      if (__OFADD__(v84, v85))
                        v86 = (v84 >> 31) + 0x7FFFFFFF;
                    }
                    v43 = __OFSUB__(v79, v86);
                    v87 = v79 - v86;
                    if (v43)
                      v87 = (v79 >> 31) + 0x7FFFFFFF;
                    v88 = (float)((float)((float)v87 * 0.015625) / v10) * 64.0;
                    if (v88 >= 2147483650.0)
                    {
                      v89 = 0x7FFFFFFF;
                    }
                    else if (v88 <= -2147483650.0)
                    {
                      v89 = 0x80000000;
                    }
                    else
                    {
                      v89 = (int)v88;
                    }
                    v90 = v89 + v70;
                    if (__OFADD__(v89, v70))
                      v90 = (v89 >> 31) + 0x7FFFFFFF;
                    WebCore::StyledElement::setInlineStyleProperty((WebCore::StyledElement *)v6, (WTF::StringImpl *)0x1C2, 6, 0, (double)(((int)(v90 - (v89 & 0xFFFFFFC0) + 32) >> 6) + v90 / 64));
                  }
                }
                if (((v74 >> 27) & 5) == 1)
                {
                  v91 = v112;
                }
                else
                {
                  if ((*(_BYTE *)(v7 + 21) & 0x10) != 0)
                    v92 = 5;
                  else
                    v92 = 4;
                  v93 = v75 == v92;
                  v91 = v112;
                  if (!v93)
                    return WebCore::Document::updateLayout(v91, 0, 0);
                }
                if (v71)
                {
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 848))(v6))
                  {
                    v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1080))(v7);
                    WebCore::StyledElement::setInlineStyleProperty((WebCore::StyledElement *)v6, (WTF::StringImpl *)0x197, 6, 0, (float)((float)((float)v94 * 0.015625) / v10));
                    v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1088))(v7);
                    WebCore::StyledElement::setInlineStyleProperty((WebCore::StyledElement *)v6, (WTF::StringImpl *)0x192, 6, 0, (float)((float)((float)v95 * 0.015625) / v10));
                  }
                  v96 = *(_DWORD *)(v7 + 164);
                  if ((v73 & 4) != 0)
                  {
                    v103 = 0;
                  }
                  else
                  {
                    v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1000))(v7);
                    v98 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1008))(v7);
                    if (__OFADD__(v97, v98))
                      v99 = (v97 >> 31) + 0x7FFFFFFF;
                    else
                      v99 = v97 + v98;
                    v100 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 928))(v7);
                    if (__OFADD__(v99, v100))
                      v101 = (v99 >> 31) + 0x7FFFFFFF;
                    else
                      v101 = v99 + v100;
                    v102 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 936))(v7);
                    v103 = v101 + v102;
                    if (__OFADD__(v101, v102))
                      v103 = (v101 >> 31) + 0x7FFFFFFF;
                  }
                  v43 = __OFSUB__(v96, v103);
                  v104 = v96 - v103;
                  if (v43)
                    v104 = (v96 >> 31) + 0x7FFFFFFF;
                  v105 = (float)((float)((float)v104 * 0.015625) / v10) * 64.0;
                  if (v105 >= 2147483650.0)
                  {
                    v106 = 0x7FFFFFFF;
                  }
                  else if (v105 <= -2147483650.0)
                  {
                    v106 = 0x80000000;
                  }
                  else
                  {
                    v106 = (int)v105;
                  }
                  v107 = v106 + v71;
                  if (__OFADD__(v106, v71))
                    v107 = (v106 >> 31) + 0x7FFFFFFF;
                  WebCore::StyledElement::setInlineStyleProperty((WebCore::StyledElement *)v6, (WTF::StringImpl *)0x189, 6, 0, (double)(((int)(v107 - (v106 & 0xFFFFFFC0) + 32) >> 6) + v107 / 64));
                }
                return WebCore::Document::updateLayout(v91, 0, 0);
              }
              WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v57 + 36), (float)v110 * 0.015625);
            }
          }
          v61 = v60 * 64.0;
          if (v61 >= 2147483650.0)
          {
            v62 = 0x7FFFFFFF;
          }
          else if (v61 <= -2147483650.0)
          {
            v62 = 0x80000000;
          }
          else
          {
            v62 = (int)v61;
          }
          goto LABEL_75;
        }
      }
    }
  }
  return result;
}

unsigned __int128 *WebCore::RenderLayer::debugDescription@<X0>(WebCore::RenderLayer *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::RenderView *v6;
  WebCore::RenderLayerCompositor *v7;
  WebCore::RenderView *v8;
  WebCore::RenderLayerCompositor *v9;
  WTF::TextStream *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unsigned __int128 *result;
  char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const char *v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  const char *v29;
  uint64_t v30;
  BOOL v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  BOOL v39;
  int v40;
  unsigned int v41;
  int v42;
  BOOL v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  BOOL v49;
  int v50;
  int v51;
  BOOL v52;
  int v53;
  int v54;
  BOOL v55;
  int v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  char *v59;
  int8x16_t *v60;
  uint64_t v61;
  char *v62;
  WTF::StringImpl **v63;
  int v64;
  _BYTE *v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  char *v69;
  uint64_t v70;
  unsigned int v71;
  _BYTE *v72;
  size_t v73;
  unsigned int v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unsigned int v78;
  _BYTE *v79;
  size_t v80;
  unsigned int v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  size_t v87;
  __int128 v88;
  char *v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  char *v93;
  char *v94;
  char *v95;
  __int16 v96;
  char *v97;
  _WORD *v98;
  uint64_t v99;
  unsigned int v100;
  _WORD *v101;
  BOOL v102;
  unsigned int v103;
  uint64_t v104;
  _WORD *v105;
  unsigned int v106;
  _WORD *v107;
  _WORD *v108;
  uint64_t v109;
  unsigned int v110;
  _WORD *v111;
  unsigned int v112;
  uint64_t v113;
  _WORD *v114;
  unsigned int v115;
  char *v116;
  char *v117;
  int8x16_t *v118;
  int v119;
  int v120;
  size_t v121;
  char *v122;
  __int128 v123;
  int8x16_t v124;
  __int128 v125;
  __int128 v126;
  char *v127;
  char *v128;
  char *v129;
  __int16 v130;
  char *v131;
  char *v132;
  __int128 v133;
  int8x16_t v134;
  __int128 v135;
  __int128 v136;
  char *v137;
  char *v138;
  char *v139;
  __int16 v140;
  int v141;
  int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  WebCore::RenderLayerCompositor *v153;
  WebCore::RenderLayerCompositor *v154;
  WTF *v155;
  void *v156;
  unsigned __int128 *v157;
  unsigned __int128 *v158;
  unsigned __int128 v159;
  char v160;
  WebCore::RenderLayerCompositor *v161;
  WebCore::RenderLayerCompositor *v162;
  WTF *v163;
  void *v164;
  size_t v165;
  int8x16_t *__src;
  int8x16_t *v167;
  int8x16_t *v168;
  size_t v170;
  size_t v171;
  size_t v172;
  size_t v173;
  __int128 v174;
  unsigned int __n;
  WTF::StringImpl *__n_4;
  WTF::StringImpl *v177;
  int v178;
  char v179;
  int v180;
  __int16 v181;
  int v182;
  uint64_t v183;
  int8x16x2_t v184;
  int8x16x2_t v185;
  int8x16x2_t v186;
  int8x16x2_t v187;
  int8x16x2_t v188;
  int8x16x2_t v189;
  int8x16x2_t v190;
  int8x16x2_t v191;
  int8x16x2_t v192;

  v183 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 32))
  {
    __n_4 = 0;
    v177 = 0;
    v178 = 0;
    v179 = 1;
    v180 = 0;
    v181 = 256;
    v182 = 0;
    WTF::TextStream::operator<<();
    v3 = *((_QWORD *)this + 32);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v4 = WTF::TextStream::operator<<();
    WebCore::operator<<(v4);
    if (!*(_BYTE *)(v3 + 290) || (WTF::TextStream::operator<<(), !*(_BYTE *)(v3 + 290)))
    {
      v5 = *(_QWORD *)(v3 + 8);
      if ((*(_BYTE *)(v5 + 24) & 1) != 0)
      {
        v6 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 24) + 8)
                                                             + 40)
                                                 + 8)
                                     + 1944);
        v7 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v6 + 50);
        if (!v7)
        {
          v153 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
          v7 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v153, v6);
          v154 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v6 + 50);
          *((_QWORD *)v6 + 50) = v7;
          if (v154)
          {
            WebCore::RenderLayerCompositor::~RenderLayerCompositor(v154);
            WTF::fastFree(v155, v156);
            v7 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v6 + 50);
          }
        }
        if (!*((_BYTE *)v7 + 198))
        {
          v8 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 32)
                                                                                       + 24)
                                                                           + 8)
                                                               + 40)
                                                   + 8)
                                       + 1944);
          v9 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v8 + 50);
          if (!v9)
          {
            v161 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
            v9 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v161, v8);
            v162 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v8 + 50);
            *((_QWORD *)v8 + 50) = v9;
            if (v162)
            {
              WebCore::RenderLayerCompositor::~RenderLayerCompositor(v162);
              WTF::fastFree(v163, v164);
              v9 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v8 + 50);
            }
          }
          if (*((_DWORD *)v9 + 54) != 2)
            WTF::TextStream::operator<<();
        }
      }
    }
    if (!*(_BYTE *)(v3 + 291))
      WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 72) + 32))(*(_QWORD *)(v3 + 72));
    WTF::operator<<();
    if (*(_QWORD *)(v3 + 208))
    {
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::operator<<();
      WTF::TextStream::operator<<();
      WTF::operator<<();
      WTF::TextStream::operator<<();
    }
    if (*(_QWORD *)(v3 + 224))
    {
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::operator<<();
      WTF::TextStream::operator<<();
      WTF::operator<<();
      WTF::TextStream::operator<<();
    }
    if (*(_QWORD *)(v3 + 48))
    {
      v10 = (WTF::TextStream *)WTF::TextStream::operator<<();
      WebCore::operator<<(v10, *(uint64_t **)(v3 + 48));
    }
    if (*(_QWORD *)(v3 + 240))
    {
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::operator<<();
      WTF::TextStream::operator<<();
      WTF::operator<<();
      WTF::TextStream::operator<<();
    }
    if (*(_QWORD *)(v3 + 256))
    {
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::operator<<();
      WTF::TextStream::operator<<();
      WTF::operator<<();
      WTF::TextStream::operator<<();
    }
    v174 = *(_OWORD *)(v3 + 272);
    if ((_QWORD)v174)
    {
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::operator<<();
      WTF::TextStream::operator<<();
      WTF::operator<<();
      WTF::TextStream::operator<<();
    }
    WTF::TextStream::release((WTF::TextStream *)&__n_4);
    v12 = v174;
    v13 = v177;
    v177 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = __n_4;
    __n_4 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  else
  {
    v12 = 0;
  }
  result = (unsigned __int128 *)WTF::Internal::appendHex();
  __n = v16;
  v17 = *((_QWORD *)this + 25);
  if (v17)
    v18 = " has transform";
  else
    v18 = (const char *)&str_9_62;
  if (v17)
    v19 = 15;
  else
    v19 = 1;
  v20 = *((_QWORD *)this + 3);
  v21 = *(_QWORD *)(*((_QWORD *)this + 4) + 88);
  v23 = *(_QWORD *)(v21 + 32);
  v22 = *(_QWORD *)(v21 + 40);
  v24 = *(_DWORD *)(*(_QWORD *)(v23 + 32) + 20);
  if (v24)
    v25 = " has filter";
  else
    v25 = (const char *)&str_9_62;
  if (v24)
    v26 = 12;
  else
    v26 = 1;
  v27 = *(_DWORD *)(*(_QWORD *)(v22 + 72) + 20);
  v28 = v27 == 0;
  if (v27)
    v29 = " has backdrop filter";
  else
    v29 = (const char *)&str_9_62;
  __src = (int8x16_t *)v29;
  v30 = 21;
  if (v28)
    v30 = 1;
  v31 = (*(_DWORD *)(v22 + 636) & 0x1F00000) == 0x100000;
  v32 = " has blend mode";
  if (v31)
    v32 = (const char *)&str_9_62;
  v167 = (int8x16_t *)v32;
  if (v31)
    v33 = 1;
  else
    v33 = 16;
  if ((v20 & 0x800000000000) != 0 && (v20 & 0xA) != 0)
  {
    v168 = (int8x16_t *)" isolates blending";
    v34 = 19;
  }
  else
  {
    v168 = (int8x16_t *)&str_9_62;
    v34 = 1;
  }
  v36 = *((_DWORD *)this + 41);
  v35 = *((_DWORD *)this + 42);
  if (v12)
    *(_DWORD *)v12 += 2;
  v165 = v19 - 1;
  if ((unint64_t)(v19 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1963E8F94);
  }
  v170 = v26 - 1;
  if ((unint64_t)(v26 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1963E8FC4);
  }
  v171 = v30 - 1;
  if ((unint64_t)(v30 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1963E8FF4);
  }
  v172 = v33 - 1;
  if ((unint64_t)(v33 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1963E9024);
  }
  v173 = v34 - 1;
  if ((unint64_t)(v34 - 1) >> 31)
  {
    __break(0xC471u);
LABEL_272:
    JUMPOUT(0x1963E8F68);
  }
  if ((v36 & 0x80000000) != 0)
  {
    v143 = -v36;
    v37 = 1;
    do
    {
      ++v37;
      v102 = v143 >= 0xA;
      v143 /= 0xAu;
    }
    while (v102);
  }
  else
  {
    v37 = 0;
    v38 = v36;
    do
    {
      ++v37;
      v39 = v38 > 9;
      v38 /= 0xAu;
    }
    while (v39);
  }
  if ((v35 & 0x80000000) != 0)
  {
    v144 = -v35;
    v40 = 1;
    do
    {
      ++v40;
      v102 = v144 >= 0xA;
      v144 /= 0xAu;
    }
    while (v102);
  }
  else
  {
    v40 = 0;
    v41 = v35;
    do
    {
      ++v40;
      v39 = v41 > 9;
      v41 /= 0xAu;
    }
    while (v39);
  }
  if (v12)
  {
    v42 = *(_DWORD *)(v12 + 4);
    if (v42 < 0)
      goto LABEL_261;
  }
  else
  {
    v42 = 0;
  }
  v43 = __OFADD__((_DWORD)v173, v42);
  v44 = v173 + v42;
  if (v43)
    goto LABEL_261;
  v43 = __OFADD__((_DWORD)v172, v44);
  v45 = v172 + v44;
  if (v43)
    goto LABEL_261;
  v43 = __OFADD__((_DWORD)v171, v45);
  v46 = v171 + v45;
  if (v43)
    goto LABEL_261;
  v43 = __OFADD__((_DWORD)v170, v46);
  v47 = v170 + v46;
  if (v43)
    goto LABEL_261;
  v43 = __OFADD__((_DWORD)v165, v47);
  v48 = v165 + v47;
  v49 = v43;
  if (v40 < 0)
    goto LABEL_261;
  if (v49)
    goto LABEL_261;
  v43 = __OFADD__(v40, v48);
  v50 = v40 + v48;
  if (v43)
    goto LABEL_261;
  v43 = __OFADD__(v50, 1);
  v51 = v50 + 1;
  v52 = v43;
  if (v37 < 0)
    goto LABEL_261;
  if (v52)
    goto LABEL_261;
  v43 = __OFADD__(v37, v51);
  v53 = v37 + v51;
  if (v43)
    goto LABEL_261;
  v43 = __OFADD__(v53, 1);
  v54 = v53 + 1;
  v55 = v43;
  if ((v16 & 0x80000000) != 0)
    goto LABEL_261;
  if (v55)
    goto LABEL_261;
  v43 = __OFADD__((_DWORD)v16, v54);
  v56 = (_DWORD)v16 + v54;
  if (v43)
    goto LABEL_261;
  v57 = (v56 + 14);
  if (__OFADD__(v56, 14))
    goto LABEL_261;
  if (v12 && (*(_BYTE *)(v12 + 16) & 4) == 0)
  {
    if (v56 != -14)
    {
      if (v57 <= 0x7FFFFFEF)
      {
        WTF::tryFastCompactMalloc((WTF *)(2 * v57 + 20));
        v58 = __n_4;
        if (__n_4)
        {
          *(_DWORD *)__n_4 = 2;
          *((_DWORD *)v58 + 1) = v57;
          *(_OWORD *)((char *)v58 + 20) = xmmword_1969FCCE0;
          *((_QWORD *)v58 + 1) = (char *)v58 + 20;
          *((_DWORD *)v58 + 4) = 0;
          v59 = (char *)v58 + 48;
          *(_QWORD *)((char *)v58 + 36) = 0x20007200650079;
          *((_DWORD *)v58 + 11) = 7864368;
          v60 = (int8x16_t *)((char *)&__n - __n);
          v61 = (uint64_t)v58 + 2 * __n + 48;
          if (__n >= 0x40)
          {
            v62 = &v59[2 * (__n & 0xFFFFFFC0)];
            v88 = 0uLL;
            v89 = (char *)v58 + 48;
            v63 = a2;
            v64 = v172;
            do
            {
              v184.val[0] = *v60;
              v90 = v60[1];
              v187.val[0] = v60[2];
              v91 = v60[3];
              v60 += 4;
              v92 = v91;
              v187.val[1] = 0uLL;
              v190.val[0] = v90;
              v184.val[1] = 0uLL;
              v93 = v89;
              vst2q_s8(v93, v184);
              v93 += 32;
              v190.val[1] = 0uLL;
              vst2q_s8(v93, v190);
              v94 = v89 + 64;
              vst2q_s8(v94, v187);
              v95 = v89 + 96;
              vst2q_s8(v95, *(int8x16x2_t *)(&v88 - 1));
              v89 += 128;
            }
            while (v89 != v62);
          }
          else
          {
            v62 = (char *)v58 + 48;
            v63 = a2;
            v64 = v172;
          }
          while (v62 != (char *)v61)
          {
            v96 = v60->u8[0];
            v60 = (int8x16_t *)((char *)v60 + 1);
            *(_WORD *)v62 = v96;
            v62 += 2;
          }
          v97 = &v59[2 * __n];
          *(_WORD *)v97 = 32;
          v98 = v97 + 2;
          if ((v36 & 0x80000000) != 0)
          {
            v103 = -v36;
            v104 = 12;
            do
            {
              *((_BYTE *)&__n_4 + v104--) = (v103 % 0xA) | 0x30;
              v39 = v103 > 9;
              v103 /= 0xAu;
            }
            while (v39);
            *((_BYTE *)&__n_4 + v104) = 45;
            if (v104 + 2 <= 14)
            {
              v105 = v98;
              do
              {
                *v105++ = *((unsigned __int8 *)&__n_4 + v104);
                v39 = v104++ < 12;
              }
              while (v39);
            }
          }
          else
          {
            v99 = 0;
            v100 = v36;
            do
            {
              *((_BYTE *)&v177 + v99-- + 4) = (v100 % 0xA) | 0x30;
              v39 = v100 > 9;
              v100 /= 0xAu;
            }
            while (v39);
            if (v99 + 14 <= 13)
            {
              v101 = v98;
              do
              {
                *v101++ = *((unsigned __int8 *)&v177 + v99 + 5);
                v102 = __CFADD__(v99++, 1);
              }
              while (!v102);
            }
          }
          if ((v36 & 0x80000000) != 0)
          {
            v151 = -v36;
            v106 = 1;
            do
            {
              ++v106;
              v102 = v151 >= 0xA;
              v151 /= 0xAu;
            }
            while (v102);
          }
          else
          {
            v106 = 0;
            do
            {
              ++v106;
              v39 = v36 > 9;
              v36 /= 0xAu;
            }
            while (v39);
          }
          v107 = &v98[v106];
          *v107 = 120;
          v108 = v107 + 1;
          if ((v35 & 0x80000000) != 0)
          {
            v112 = -v35;
            v113 = 12;
            do
            {
              *((_BYTE *)&__n_4 + v113--) = (v112 % 0xA) | 0x30;
              v39 = v112 > 9;
              v112 /= 0xAu;
            }
            while (v39);
            *((_BYTE *)&__n_4 + v113) = 45;
            if (v113 + 2 <= 14)
            {
              v114 = v108;
              do
              {
                *v114++ = *((unsigned __int8 *)&__n_4 + v113);
                v39 = v113++ < 12;
              }
              while (v39);
            }
          }
          else
          {
            v109 = 0;
            v110 = v35;
            do
            {
              *((_BYTE *)&v177 + v109-- + 4) = (v110 % 0xA) | 0x30;
              v39 = v110 > 9;
              v110 /= 0xAu;
            }
            while (v39);
            if (v109 + 14 <= 13)
            {
              v111 = v108;
              do
              {
                *v111++ = *((unsigned __int8 *)&v177 + v109 + 5);
                v102 = __CFADD__(v109++, 1);
              }
              while (!v102);
            }
          }
          if ((v35 & 0x80000000) != 0)
          {
            v152 = -v35;
            v115 = 1;
            do
            {
              ++v115;
              v102 = v152 >= 0xA;
              v152 /= 0xAu;
            }
            while (v102);
          }
          else
          {
            v115 = 0;
            do
            {
              ++v115;
              v39 = v35 > 9;
              v35 /= 0xAu;
            }
            while (v39);
          }
          v116 = (char *)&v108[v115];
          v117 = &v116[2 * v165];
          if ((v165 & 0x7FFFFFC0) != 0)
          {
            v122 = &v116[2 * (v165 & 0x7FFFFFC0)];
            v123 = 0uLL;
            v118 = __src;
            v119 = v173;
            v121 = v170;
            v120 = v171;
            do
            {
              v185.val[0] = *(int8x16_t *)v18;
              v124 = *((int8x16_t *)v18 + 1);
              v188.val[0] = (int8x16_t)*((_OWORD *)v18 + 2);
              v125 = *((_OWORD *)v18 + 3);
              v18 += 64;
              v126 = v125;
              v188.val[1] = 0uLL;
              v191.val[0] = v124;
              v185.val[1] = 0uLL;
              v127 = v116;
              vst2q_s8(v127, v185);
              v127 += 32;
              v191.val[1] = 0uLL;
              vst2q_s8(v127, v191);
              v128 = v116 + 64;
              vst2q_s8(v128, v188);
              v129 = v116 + 96;
              vst2q_s8(v129, *(int8x16x2_t *)(&v123 - 1));
              v116 += 128;
            }
            while (v116 != v122);
            v116 = v122;
          }
          else
          {
            v118 = __src;
            v119 = v173;
            v121 = v170;
            v120 = v171;
          }
          while (v116 != v117)
          {
            v130 = *(unsigned __int8 *)v18++;
            *(_WORD *)v116 = v130;
            v116 += 2;
          }
          v131 = &v117[2 * v121];
          if ((v121 & 0x7FFFFFC0) != 0)
          {
            v132 = &v117[2 * (v121 & 0x7FFFFFC0)];
            v133 = 0uLL;
            do
            {
              v186.val[0] = *(int8x16_t *)v25;
              v134 = *((int8x16_t *)v25 + 1);
              v189.val[0] = (int8x16_t)*((_OWORD *)v25 + 2);
              v135 = *((_OWORD *)v25 + 3);
              v25 += 64;
              v136 = v135;
              v189.val[1] = 0uLL;
              v192.val[0] = v134;
              v186.val[1] = 0uLL;
              v137 = v117;
              vst2q_s8(v137, v186);
              v137 += 32;
              v192.val[1] = 0uLL;
              vst2q_s8(v137, v192);
              v138 = v117 + 64;
              vst2q_s8(v138, v189);
              v139 = v117 + 96;
              vst2q_s8(v139, *(int8x16x2_t *)(&v133 - 1));
              v117 += 128;
            }
            while (v117 != v132);
            v117 = v132;
          }
          while (v117 != v131)
          {
            v140 = *(unsigned __int8 *)v25++;
            *(_WORD *)v117 = v140;
            v117 += 2;
          }
          result = (unsigned __int128 *)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v131, v118, v120, v167, v64, v168, v119, v12);
LABEL_208:
          *v63 = v58;
          if (!v12)
            return result;
          goto LABEL_209;
        }
      }
LABEL_261:
      *a2 = 0;
      __break(0xC471u);
      goto LABEL_272;
    }
    goto LABEL_216;
  }
  if (v56 == -14)
  {
LABEL_216:
    v58 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
LABEL_217:
    v63 = a2;
    goto LABEL_208;
  }
  if ((v57 & 0x80000000) != 0)
    goto LABEL_261;
  result = (unsigned __int128 *)WTF::tryFastCompactMalloc((WTF *)(v57 + 20));
  v58 = __n_4;
  if (!__n_4)
    goto LABEL_261;
  *(_DWORD *)__n_4 = 2;
  *((_DWORD *)v58 + 1) = v57;
  qmemcpy((char *)v58 + 20, "RenderLayer 0x", 14);
  *((_QWORD *)v58 + 1) = (char *)v58 + 20;
  *((_DWORD *)v58 + 4) = 4;
  v65 = (char *)v58 + 34;
  v66 = __n;
  if (__n)
  {
    v67 = (char *)&__n - __n;
    if (__n == 1)
      *v65 = *v67;
    else
      result = (unsigned __int128 *)memcpy((char *)v58 + 34, v67, __n);
  }
  v68 = &v65[v66];
  *v68 = 32;
  v69 = v68 + 1;
  v70 = 0;
  if ((v36 & 0x80000000) != 0)
  {
    v145 = -v36;
    do
    {
      *((_BYTE *)&v177 + v70-- + 4) = (v145 % 0xA) | 0x30;
      v39 = v145 > 9;
      v145 /= 0xAu;
    }
    while (v39);
    v146 = v70 + 12;
    v72 = (char *)&__n_4 + v70 + 12;
    *v72 = 45;
    if (v70 + 14 > 14)
      goto LABEL_113;
    if (v146 <= 12)
      v146 = 12;
    v73 = v146 - v70 - 11;
  }
  else
  {
    v71 = v36;
    do
    {
      *((_BYTE *)&v177 + v70-- + 4) = (v71 % 0xA) | 0x30;
      v39 = v71 > 9;
      v71 /= 0xAu;
    }
    while (v39);
    if (v70 + 14 > 13)
      goto LABEL_113;
    v72 = (char *)&v177 + v70 + 5;
    v73 = -v70;
  }
  result = (unsigned __int128 *)memcpy(v69, v72, v73);
LABEL_113:
  if ((v36 & 0x80000000) != 0)
  {
    v149 = -v36;
    v74 = 1;
    do
    {
      ++v74;
      v102 = v149 >= 0xA;
      v149 /= 0xAu;
    }
    while (v102);
  }
  else
  {
    v74 = 0;
    do
    {
      ++v74;
      v39 = v36 > 9;
      v36 /= 0xAu;
    }
    while (v39);
  }
  v75 = &v69[v74];
  *v75 = 120;
  v76 = v75 + 1;
  v77 = 0;
  if ((v35 & 0x80000000) != 0)
  {
    v147 = -v35;
    do
    {
      *((_BYTE *)&v177 + v77-- + 4) = (v147 % 0xA) | 0x30;
      v39 = v147 > 9;
      v147 /= 0xAu;
    }
    while (v39);
    v148 = v77 + 12;
    v79 = (char *)&__n_4 + v77 + 12;
    *v79 = 45;
    if (v77 + 14 > 14)
      goto LABEL_122;
    if (v148 <= 12)
      v148 = 12;
    v80 = v148 - v77 - 11;
  }
  else
  {
    v78 = v35;
    do
    {
      *((_BYTE *)&v177 + v77-- + 4) = (v78 % 0xA) | 0x30;
      v39 = v78 > 9;
      v78 /= 0xAu;
    }
    while (v39);
    if (v77 + 14 > 13)
      goto LABEL_122;
    v79 = (char *)&v177 + v77 + 5;
    v80 = -v77;
  }
  result = (unsigned __int128 *)memcpy(v76, v79, v80);
LABEL_122:
  if ((v35 & 0x80000000) != 0)
  {
    v150 = -v35;
    v81 = 1;
    do
    {
      ++v81;
      v102 = v150 >= 0xA;
      v150 /= 0xAu;
    }
    while (v102);
  }
  else
  {
    v81 = 0;
    do
    {
      ++v81;
      v39 = v35 > 9;
      v35 /= 0xAu;
    }
    while (v39);
  }
  v82 = &v76[v81];
  if ((_DWORD)v165)
  {
    if ((_DWORD)v165 == 1)
      *v82 = *v18;
    else
      result = (unsigned __int128 *)memcpy(v82, v18, v165);
  }
  v83 = &v82[v165];
  if ((_DWORD)v170)
  {
    if ((_DWORD)v170 == 1)
      *v83 = *v25;
    else
      result = (unsigned __int128 *)memcpy(v83, v25, v170);
  }
  v84 = &v83[v170];
  if ((_DWORD)v171)
  {
    if ((_DWORD)v171 == 1)
      *v84 = __src->i8[0];
    else
      result = (unsigned __int128 *)memcpy(v84, __src, v171);
  }
  v85 = &v84[v171];
  if ((_DWORD)v172)
  {
    if ((_DWORD)v172 == 1)
      *v85 = v167->i8[0];
    else
      result = (unsigned __int128 *)memcpy(v85, v167, v172);
  }
  v86 = &v85[v172];
  if (!(_DWORD)v173)
  {
LABEL_140:
    if (v12)
      goto LABEL_141;
LABEL_155:
    *a2 = v58;
    return result;
  }
  if ((_DWORD)v173 != 1)
  {
    result = (unsigned __int128 *)memcpy(v86, v168, v173);
    goto LABEL_140;
  }
  *v86 = v168->i8[0];
  if (!v12)
    goto LABEL_155;
LABEL_141:
  result = (unsigned __int128 *)&v86[v173];
  v16 = *(char **)(v12 + 8);
  v87 = *(unsigned int *)(v12 + 4);
  if ((*(_BYTE *)(v12 + 16) & 4) == 0)
  {
    v157 = (unsigned __int128 *)((char *)result + v87);
    if (v87 >= 0x10)
    {
      v158 = (unsigned __int128 *)((char *)result + (v87 & 0xFFFFFFF0));
      do
      {
        v159 = (unsigned __int128)vld2q_s8(v16);
        v16 += 32;
        *result++ = v159;
      }
      while (result != v158);
      result = v158;
    }
    while (result != v157)
    {
      v160 = *v16;
      v16 += 2;
      *(_BYTE *)result = v160;
      result = (unsigned __int128 *)((char *)result + 1);
    }
    goto LABEL_217;
  }
  if ((_DWORD)v87)
  {
    if ((_DWORD)v87 == 1)
      *(_BYTE *)result = *v16;
    else
      result = (unsigned __int128 *)memcpy(result, v16, v87);
  }
  *a2 = v58;
LABEL_209:
  v141 = *(_DWORD *)v12 - 2;
  if (*(_DWORD *)v12 == 2)
  {
    result = (unsigned __int128 *)WTF::StringImpl::destroy((WTF::StringImpl *)v12, (WTF::StringImpl *)v16);
    v141 = *(_DWORD *)v12;
  }
  else
  {
    *(_DWORD *)v12 = v141;
  }
  v142 = v141 - 2;
  if (!v142)
    return (unsigned __int128 *)WTF::StringImpl::destroy((WTF::StringImpl *)v12, (WTF::StringImpl *)v16);
  *(_DWORD *)v12 = v142;
  return result;
}

uint64_t WebCore::RenderLayer::scrollWidth(WebCore::RenderLayer *this)
{
  uint64_t v1;
  WebCore::RenderBox *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;

  v1 = *((_QWORD *)this + 33);
  if (v1)
  {
    if (*(_BYTE *)(v1 + 76))
      WebCore::RenderLayerScrollableArea::computeScrollDimensions(*((WebCore::RenderLayerScrollableArea **)this + 33));
    return *(unsigned int *)(v1 + 88);
  }
  else
  {
    if ((*(_BYTE *)(*((_QWORD *)this + 4) + 45) & 4) != 0)
      v3 = (WebCore::RenderBox *)*((_QWORD *)this + 4);
    else
      v3 = 0;
    v4 = *((_QWORD *)v3 + 24);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 4);
      v6 = *(_QWORD *)(v4 + 12);
    }
    else
    {
      v5 = WebCore::RenderBox::flippedClientBoxRect(v3);
    }
    v11 = v5;
    v12 = v6;
    WebCore::RenderBox::flipForWritingMode((uint64_t)v3, (WebCore::LayoutRect *)&v11);
    v7 = v11 + v12;
    if (__OFADD__((_DWORD)v11, (_DWORD)v12))
      v7 = (v11 >> 31) + 0x7FFFFFFF;
    v8 = __OFSUB__(v7, (_DWORD)v11);
    v9 = v7 - v11;
    v10 = (v7 >> 31) + 0x7FFFFFFF;
    if (v8)
      v9 = v10;
    return (((int)(v9 - (v10 & 0xFFFFFFC0) + 32) >> 6) + v9 / 64);
  }
}

uint64_t WebCore::RenderLayer::scrollHeight(WebCore::RenderLayer *this)
{
  uint64_t v1;
  WebCore::RenderBox *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;

  v1 = *((_QWORD *)this + 33);
  if (v1)
  {
    if (*(_BYTE *)(v1 + 76))
      WebCore::RenderLayerScrollableArea::computeScrollDimensions(*((WebCore::RenderLayerScrollableArea **)this + 33));
    return *(unsigned int *)(v1 + 92);
  }
  else
  {
    if ((*(_BYTE *)(*((_QWORD *)this + 4) + 45) & 4) != 0)
      v3 = (WebCore::RenderBox *)*((_QWORD *)this + 4);
    else
      v3 = 0;
    v4 = *((_QWORD *)v3 + 24);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 4);
      v6 = *(_QWORD *)(v4 + 12);
    }
    else
    {
      v5 = WebCore::RenderBox::flippedClientBoxRect(v3);
    }
    v11 = v5;
    v12 = v6;
    WebCore::RenderBox::flipForWritingMode((uint64_t)v3, (WebCore::LayoutRect *)&v11);
    v7 = HIDWORD(v11) + HIDWORD(v12);
    if (__OFADD__(HIDWORD(v11), HIDWORD(v12)))
      v7 = (HIDWORD(v11) >> 31) + 0x7FFFFFFF;
    v8 = __OFSUB__(v7, HIDWORD(v11));
    v9 = v7 - HIDWORD(v11);
    v10 = (v7 >> 31) + 0x7FFFFFFF;
    if (v8)
      v9 = v10;
    return (((int)(v9 - (v10 & 0xFFFFFFC0) + 32) >> 6) + v9 / 64);
  }
}

double WebCore::RenderLayer::updateScrollInfoAfterLayout(WebCore::RenderLayerScrollableArea **this)
{
  double result;
  WebCore::RenderLayerScrollableArea *v3;

  result = WebCore::RenderLayer::updateLayerScrollableArea((WebCore::RenderLayer *)this);
  v3 = this[33];
  if (v3)
    return WebCore::RenderLayerScrollableArea::updateScrollInfoAfterLayout(v3);
  return result;
}

uint64_t WebCore::RenderLayer::clipToRect(uint64_t result, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, __int16 a6, uint64_t a7, int a8)
{
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  WTF *v25;
  void *v26;
  const WebCore::RenderLayerModelObject *v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  unsigned int v45;
  unint64_t v46;
  float v47;
  float v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  float v67;
  unsigned int v68;
  unsigned int v69;
  float v70;
  __int128 v71;
  float v72[12];
  _OWORD v73[3];
  unint64_t v74;
  unint64_t v75;

  v15 = result;
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 24) + 8) + 40) + 8)
                  + 528);
  v17 = 1.0;
  if (v16)
  {
    v18 = *(_QWORD *)(v16 + 8);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 24);
      if (v19)
      {
        result = *(_QWORD *)(v19 + 8);
        if (result)
        {
          v20 = (*(_DWORD *)result)++;
          v17 = *(float *)(result + 364);
          if (v20)
          {
            *(_DWORD *)result = v20;
          }
          else
          {
            WebCore::Page::~Page(result);
            result = WTF::fastFree(v25, v26);
          }
        }
      }
    }
  }
  v21 = *(_DWORD *)(a7 + 4);
  v22 = *(_DWORD *)a7 == -1073741808 && v21 == -1073741808;
  if (v22 && (*(_DWORD *)(a7 + 8) == 2147483615 ? (v23 = *(_DWORD *)(a7 + 12) == 2147483615) : (v23 = 0), v23)
    || (*(_DWORD *)a7 == *(_DWORD *)(a5 + 16) ? (v24 = v21 == *(_DWORD *)(a5 + 20)) : (v24 = 0),
        v24 && *(_DWORD *)(a7 + 8) == *(_DWORD *)(a5 + 24) && *(_DWORD *)(a7 + 12) == *(_DWORD *)(a5 + 28)))
  {
    if (*(_BYTE *)(a7 + 16))
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)a3 + 96))(*(_QWORD *)a3, 1);
      a3[8] = 1;
    }
    goto LABEL_25;
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)a3 + 96))(*(_QWORD *)a3, 1);
  a3[8] = 1;
  v73[0] = *(_OWORD *)a7;
  v29 = *(_DWORD *)(a5 + 32);
  v28 = *(_DWORD *)(a5 + 36);
  v30 = __OFADD__(v73[0], v29);
  v31 = LODWORD(v73[0]) + v29;
  if (v30)
    v31 = (LODWORD(v73[0]) >> 31) + 0x7FFFFFFF;
  LODWORD(v73[0]) = v31;
  v30 = __OFADD__(DWORD1(v73[0]), v28);
  v32 = DWORD1(v73[0]) + v28;
  if (v30)
    v32 = (DWORD1(v73[0]) >> 31) + 0x7FFFFFFF;
  DWORD1(v73[0]) = v32;
  WebCore::snapRectToDevicePixelsIfNeeded((WebCore *)v73, *(const WebCore::LayoutRect **)(v15 + 32), v27);
  *(_QWORD *)v72 = __PAIR64__(v34, v33);
  *(_QWORD *)&v72[2] = __PAIR64__(v36, v35);
  (*(void (**)(uint64_t, float *))(*(_QWORD *)a2 + 456))(a2, v72);
  v37 = floorf(v72[0]);
  if (v37 < 2147500000.0 && v37 > -2147500000.0
    || (v38 = 2147500000.0, v37 < 2147500000.0) && (v38 = -2147500000.0, v37 > -2147500000.0))
  {
    v38 = (float)(int)v37;
  }
  v39 = floorf(v72[1]);
  if (v39 < 2147500000.0 && v39 > -2147500000.0
    || (v40 = 2147500000.0, v39 < 2147500000.0) && (v40 = -2147500000.0, v39 > -2147500000.0))
  {
    v40 = (float)(int)v39;
  }
  v41 = ceilf(v72[0] + v72[2]);
  if (v41 < 2147500000.0 && v41 > -2147500000.0
    || (v42 = 2147500000.0, v41 < 2147500000.0) && (v42 = -2147500000.0, v41 > -2147500000.0))
  {
    v42 = (float)(int)v41;
  }
  v43 = ceilf(v72[1] + v72[3]);
  if (v43 < 2147500000.0 && v43 > -2147500000.0
    || (v44 = 2147500000.0, v43 < 2147500000.0) && (v44 = -2147500000.0, v43 > -2147500000.0))
  {
    v44 = (float)(int)v43;
  }
  if (v38 < 2147500000.0 && v38 > -2147500000.0)
    goto LABEL_46;
  if (v38 >= 2147500000.0)
  {
    v45 = 0x7FFFFFFF;
  }
  else
  {
    if (v38 > -2147500000.0)
    {
LABEL_46:
      v45 = (int)v38;
      goto LABEL_47;
    }
    v45 = 0x80000000;
  }
LABEL_47:
  if (v40 < 2147500000.0 && v40 > -2147500000.0)
    goto LABEL_49;
  if (v40 >= 2147500000.0)
  {
    v46 = 0x7FFFFFFF00000000;
    goto LABEL_50;
  }
  if (v40 > -2147500000.0)
LABEL_49:
    v46 = (unint64_t)(int)v40 << 32;
  else
    v46 = 0x8000000000000000;
LABEL_50:
  v47 = v42 - v38;
  v48 = v44 - v40;
  if (v47 < 2147500000.0 && v47 > -2147500000.0)
    goto LABEL_52;
  if (v47 >= 2147500000.0)
  {
    v49 = 0x7FFFFFFF;
  }
  else
  {
    if (v47 > -2147500000.0)
    {
LABEL_52:
      v49 = (int)v47;
      goto LABEL_53;
    }
    v49 = 0x80000000;
  }
LABEL_53:
  if (v48 < 2147500000.0 && v48 > -2147500000.0)
    goto LABEL_55;
  if (v48 >= 2147500000.0)
  {
    v50 = 0x7FFFFFFF00000000;
    goto LABEL_56;
  }
  if (v48 > -2147500000.0)
LABEL_55:
    v50 = (unint64_t)(int)v48 << 32;
  else
    v50 = 0x8000000000000000;
LABEL_56:
  v74 = v46 | v45;
  v75 = v50 | v49;
  result = *(_QWORD *)a4;
  if (*(_QWORD *)a4)
    result = (uint64_t)WebCore::RegionContext::pushClip((WebCore::RegionContext *)result, (const WebCore::IntRect *)&v74);
  *(_BYTE *)(a4 + 8) = 1;
LABEL_25:
  if (*(_BYTE *)(a7 + 16))
  {
    v51 = v15;
    if (!a8 || (v51 = *(_QWORD *)(v15 + 40)) != 0)
    {
      do
      {
        if ((a6 & 0x1000) != 0)
        {
          v52 = *(_QWORD *)(v51 + 264);
          if (v52)
          {
            if (*(_BYTE *)(v52 + 79) && *(_QWORD *)(*(_QWORD *)(v52 + 96) + 256))
              break;
          }
        }
        v53 = *(_QWORD *)(v51 + 32);
        if ((*(_BYTE *)(v53 + 22) & 1) != 0)
        {
          result = WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)(v53 + 80));
          if ((_DWORD)result)
          {
            result = WebCore::RenderLayer::ancestorLayerIsInContainingBlockChain((WebCore::RenderLayer *)v15, (const WebCore::RenderLayer *)v51, 0);
            if ((_DWORD)result)
            {
              v54 = WebCore::RenderLayer::offsetFromAncestor(v51, *(_QWORD *)a5, 1);
              v55 = *(_DWORD *)(v51 + 164);
              v56 = *(_DWORD *)(v51 + 168);
              LODWORD(v57) = v55 << 6;
              if (v55 < -33554432)
                LODWORD(v57) = 0x80000000;
              if (v55 <= 0x1FFFFFF)
                v57 = v57;
              else
                v57 = 0x7FFFFFFFLL;
              if (v56 >= -33554432)
                v58 = v56 << 6;
              else
                v58 = 0x80000000;
              if (v56 <= 0x1FFFFFF)
                v59 = v58;
              else
                v59 = 0x7FFFFFFFLL;
              v75 = v57 | (v59 << 32);
              v60 = *(_DWORD *)(a5 + 32);
              v30 = __OFADD__((_DWORD)v54, v60);
              v61 = v54 + v60;
              if (v30)
                v61 = (v54 >> 31) + 0x7FFFFFFF;
              v62 = *(_DWORD *)(a5 + 36);
              v30 = __OFADD__(HIDWORD(v54), v62);
              v63 = HIDWORD(v54) + v62;
              v64 = (HIDWORD(v54) >> 31) + 0x7FFFFFFF;
              if (!v30)
                v64 = v63;
              v74 = __PAIR64__(v64, v61);
              WebCore::RenderStyle::getRoundedInnerBorderFor((WebCore::RenderStyle *)(*(_QWORD *)(v51 + 32) + 80), (const WebCore::LayoutRect *)&v74, 1, 1, (uint64_t)v72);
              WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)v72, v17, (uint64_t)v73);
              v72[0] = WebCore::LayoutRect::operator WebCore::FloatRect((int *)(a5 + 16));
              *(_QWORD *)&v72[1] = __PAIR64__(v66, v65);
              v72[3] = v67;
              if (WebCore::FloatRoundedRect::intersectionIsRectangular((WebCore::FloatRoundedRect *)v73, (const WebCore::FloatRect *)v72))
              {
                *(_OWORD *)v72 = *(_OWORD *)(a5 + 16);
                WebCore::LayoutRect::intersect((int *)v72, (const WebCore::LayoutRect *)&v74);
                v71 = *(_OWORD *)v72;
                v72[0] = WebCore::snapRectToDevicePixels((int *)&v71, v17);
                *(_QWORD *)&v72[1] = __PAIR64__(v69, v68);
                v72[3] = v70;
                result = (*(uint64_t (**)(uint64_t, float *))(*(_QWORD *)a2 + 456))(a2, v72);
              }
              else
              {
                result = (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)a2 + 464))(a2, v73);
              }
            }
          }
        }
        if (v51 == *(_QWORD *)a5)
          break;
        v51 = *(_QWORD *)(v51 + 40);
      }
      while (v51);
    }
  }
  return result;
}

WTF *WebCore::RenderLayer::paintTransformedLayerIntoFragments(uint64_t a1, WTF *a2, uint64_t a3, int a4)
{
  WTF *v6;
  WTF *v7;
  uint64_t v8;
  WebCore::RenderLayer *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  WTF *result;
  WebCore::RenderLayer *v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  WTF *v25;
  uint64_t v26;
  int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  int v44;
  int v45;
  signed int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF *v65;
  WebCore::RenderObject *v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  WTF *v70;
  WTF *v71;
  BOOL v72;
  uint64_t v73;
  WebCore::RenderLayer *v74;
  int v75;
  uint64_t v77;
  __int16 v78;
  int v79;
  WebCore::RenderLayer *v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  char v84;
  WTF *v85;
  char v86;
  __int128 v87;
  unint64_t v88;
  WTF *v89;
  uint64_t v90;
  _BYTE v91[112];

  v6 = a2;
  v7 = (WTF *)v91;
  v88 = 0;
  v89 = (WTF *)v91;
  v90 = 1;
  v8 = *(_QWORD *)(a1 + 216);
  v77 = a1;
  if (v8)
  {
    v62 = a1;
    do
    {
      v63 = *(_QWORD *)(v8 + 8);
      if (!v63)
        break;
      v64 = a3;
      v65 = v7;
      if (*(_QWORD *)(v63 + 256))
        goto LABEL_100;
      v6 = a2;
      if (v63 == v62)
        break;
      if (*(_QWORD *)(v62 + 256))
      {
LABEL_100:
        v9 = 0;
        v6 = a2;
        a1 = v77;
        goto LABEL_3;
      }
      if ((*(_BYTE *)(v62 + 24) & 4) == 0)
      {
        v66 = *(WebCore::RenderObject **)(v62 + 32);
        while (1)
        {
          v66 = WebCore::RenderObject::containingBlock(v66);
          v7 = v65;
          a3 = v64;
          v6 = a2;
          if (!v66 || *((_BYTE *)v66 + 46) == 49)
            goto LABEL_95;
          if ((*((_BYTE *)v66 + 21) & 0x80) != 0)
          {
            v62 = *((_QWORD *)v66 + 18);
            goto LABEL_94;
          }
        }
      }
      v62 = *(_QWORD *)(v62 + 40);
LABEL_94:
      v8 = *(_QWORD *)(v62 + 216);
      v7 = v65;
      a3 = v64;
      v6 = a2;
    }
    while (v8);
LABEL_95:
    a1 = v77;
    v67 = *(_QWORD *)(v77 + 216);
    if (!v67)
      goto LABEL_2;
    v9 = *(WebCore::RenderLayer **)(v67 + 8);
  }
  else
  {
LABEL_2:
    v9 = 0;
  }
LABEL_3:
  *(_QWORD *)&v87 = WebCore::transparencyClipBox((WebCore::RenderLayer **)a1, v9, 0, 1, *(unsigned int *)(a3 + 48), 0);
  *((_QWORD *)&v87 + 1) = v10;
  v11 = a4 & 0x400;
  if ((a4 & 4) != 0)
    v12 = 5;
  else
    v12 = 0;
  v75 = v12;
  WebCore::RenderLayer::collectFragments((uint64_t)v9, &v89, *(WebCore::RenderLayer **)a3, (const WebCore::LayoutRect *)(a3 + 16), 0, v12, (a4 & 0x400) == 0, (uint64_t *)&v88, &v87, 1);
  result = v89;
  if (HIDWORD(v90))
  {
    v15 = v9;
    v71 = v7;
    v72 = v11 == 0;
    v78 = 4 * v11;
    v79 = a4;
    v16 = v88;
    v17 = (_DWORD *)((char *)v89 + 84);
    v18 = 104 * HIDWORD(v90);
    v19 = v77;
    v73 = a3;
    v74 = v9;
    do
    {
      v21 = *(v17 - 11);
      v20 = *(v17 - 10);
      v22 = *(_QWORD *)(v17 - 9);
      if (*(WebCore::RenderLayer **)(v19 + 40) != v15)
      {
        v23 = WebCore::RenderLayer::convertToLayerCoords(v15, *(WebCore::RenderLayer **)a3, v16, 0);
        v88 = v23;
        v80 = v15;
        LODWORD(v81) = v75;
        BYTE4(v81) = v72;
        WebCore::RenderLayer::parentClipRects((WTF *)&v85, v19, (uint64_t)&v80);
        v25 = v85;
        v26 = *(_QWORD *)(v19 + 32);
        v27 = (*(_DWORD *)(v26 + 96) >> 19) & 7;
        if (v27 == 2)
        {
          v28 = (unsigned int *)((char *)v85 + 48);
        }
        else if (v27 == 6)
        {
          v28 = (unsigned int *)((char *)v85 + 28);
        }
        else
        {
          v28 = (unsigned int *)((char *)v85 + 8);
        }
        v30 = *v28;
        v29 = v28[1];
        v31 = v28[2];
        v32 = v28[3];
        if (*((_BYTE *)v85 + 4))
        {
          v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 24) + 8) + 40) + 8) + 1944);
          v59 = *((_QWORD *)v15 + 4);
          v33 = v30;
          v34 = v29;
          if (v59 == v58)
          {
            v33 = -1073741808;
            if (v30 != -1073741808 || v29 != -1073741808 || v31 != 2147483615 || (v34 = -1073741808, v32 != 2147483615))
            {
              v68 = v31;
              v69 = v32;
              v70 = v85;
              v60 = WebCore::LocalFrameView::scrollPositionForFixedPosition(*(int32x2_t **)(v58 + 248));
              v33 = v30 + v60;
              if (__OFADD__(v30, (_DWORD)v60))
                v33 = (v30 >> 31) + 0x7FFFFFFF;
              v34 = v29 + HIDWORD(v60);
              if (__OFADD__(v29, HIDWORD(v60)))
                v34 = (v29 >> 31) + 0x7FFFFFFF;
              v25 = v70;
              v31 = v68;
              v32 = v69;
            }
          }
        }
        else
        {
          v33 = *v28;
          v34 = v28[1];
        }
        if (*(_DWORD *)v25 == 1)
        {
          v55 = v32;
          v56 = v31;
          WTF::fastFree(v25, v24);
          v31 = v56;
          v32 = v55;
        }
        else
        {
          --*(_DWORD *)v25;
        }
        v19 = v77;
        v16 = v23;
        v35 = *(v17 - 1);
        v36 = v35 + v23;
        if (__OFADD__(v35, (_DWORD)v23))
          v36 = (v35 >> 31) + 0x7FFFFFFF;
        v37 = *v17 + HIDWORD(v23);
        if (__OFADD__(*v17, HIDWORD(v23)))
          v37 = (*v17 >> 31) + 0x7FFFFFFF;
        v38 = v33 + v36;
        if (__OFADD__(v33, v36))
          v38 = (v33 >> 31) + 0x7FFFFFFF;
        a3 = v73;
        v39 = v34 + v37;
        v6 = a2;
        if (__OFADD__(v34, v37))
          v39 = (v34 >> 31) + 0x7FFFFFFF;
        v15 = v74;
        if ((int)v21 <= v38)
          v40 = v38;
        else
          v40 = v21;
        if ((int)v20 <= (int)v39)
          v41 = v39;
        else
          v41 = v20;
        v42 = v21 + v22;
        if (__OFADD__(v21, (_DWORD)v22))
          v42 = (v21 >> 31) + 0x7FFFFFFF;
        v43 = __OFADD__(v38, v31);
        v44 = v38 + v31;
        if (v43)
          v44 = (v38 >> 31) + 0x7FFFFFFF;
        if (v44 >= v42)
          v45 = v42;
        else
          v45 = v44;
        v46 = v20 + HIDWORD(v22);
        if (__OFADD__((_DWORD)v20, HIDWORD(v22)))
          v46 = (v20 >> 31) + 0x7FFFFFFF;
        v47 = v39 + v32;
        if (__OFADD__(v39, v32))
          v47 = (v39 >> 31) + 0x7FFFFFFF;
        if (v47 >= v46)
          v48 = v46;
        else
          v48 = v47;
        if (v40 >= v45 || (int)v41 >= v48)
        {
          v45 = 0;
          v48 = 0;
          v21 = 0;
          v20 = 0;
        }
        else
        {
          v21 = v40;
          v20 = v41;
        }
        LODWORD(v49) = v45 - v21;
        if (__OFSUB__(v45, v21))
          v49 = (v45 >> 31) + 0x7FFFFFFF;
        else
          v49 = v49;
        v43 = __OFSUB__(v48, (_DWORD)v20);
        LODWORD(v50) = v48 - v20;
        v51 = (v48 >> 31) + 0x7FFFFFFF;
        if (v43)
          v50 = v51;
        else
          v50 = v50;
        v22 = v49 | (v50 << 32);
      }
      v85 = v6;
      v86 = 0;
      v52 = *(_QWORD *)(a3 + 56);
      v83 = v52;
      if (v52)
        ++*(_DWORD *)(v52 + 8);
      v84 = 0;
      v53 = *(_QWORD *)(v19 + 40);
      v80 = (WebCore::RenderLayer *)(v21 | (unint64_t)(v20 << 32));
      v81 = v22;
      v82 = 0;
      WebCore::RenderLayer::clipToRect(v53, (uint64_t)v6, &v85, (uint64_t)&v83, a3, v78, (uint64_t)&v80, 0);
      WebCore::RenderLayer::paintLayerByApplyingTransform(v19, (uint64_t)v6, (__int128 *)a3, v79, v17 - 1);
      v54 = v83;
      if (v83)
      {
        if (v84)
        {
          v61 = *(_DWORD *)(v83 + 44);
          if (v61)
            *(_DWORD *)(v83 + 44) = v61 - 1;
        }
        v57 = *(_DWORD *)(v54 + 8);
        if (!v57)
        {
          __break(0xC471u);
          JUMPOUT(0x1963E9D54);
        }
        *(_DWORD *)(v54 + 8) = v57 - 1;
      }
      if (v86)
        (*(void (**)(WTF *, uint64_t))(*(_QWORD *)v85 + 104))(v85, 1);
      v17 += 26;
      v18 -= 104;
    }
    while (v18);
    result = v89;
    v7 = v71;
  }
  if (v7 != result)
  {
    if (result)
    {
      v89 = 0;
      LODWORD(v90) = 0;
      return (WTF *)WTF::fastFree(result, v13);
    }
  }
  return result;
}

__n128 WebCore::ClipRect::intersect(int *this, const WebCore::LayoutRect *a2)
{
  BOOL v2;
  BOOL v3;
  BOOL v4;
  BOOL v5;
  __n128 result;

  v2 = *(_DWORD *)a2 == -1073741808 && *((_DWORD *)a2 + 1) == -1073741808;
  if (!v2 || (*((_DWORD *)a2 + 2) == 2147483615 ? (v3 = *((_DWORD *)a2 + 3) == 2147483615) : (v3 = 0), !v3))
  {
    v4 = *this == -1073741808 && this[1] == -1073741808;
    if (v4 && (this[2] == 2147483615 ? (v5 = this[3] == 2147483615) : (v5 = 0), v5))
    {
      result = *(__n128 *)a2;
      *(_OWORD *)this = *(_OWORD *)a2;
    }
    else
    {
      WebCore::LayoutRect::intersect(this, a2);
    }
  }
  return result;
}

uint64_t WebCore::RenderLayer::paintLayerByApplyingTransform(uint64_t a1, uint64_t a2, __int128 *a3, int a4, _DWORD *a5)
{
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  __int128 *v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  float64x2_t v26;
  int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double (*v39)[4][4];
  WebCore::RegionContext *v40;
  uint64_t v41;
  double v42;
  int v43;
  double v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  int v58;
  signed int v59;
  int v60;
  float v61;
  float v62;
  float v63;
  float v64;
  double v65;
  int v66;
  int v67;
  double v68;
  int v69;
  int v70;
  double v71;
  int v72;
  int v73;
  double v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v79;
  void *v80;
  int v81;
  uint64_t v82;
  _QWORD v83[16];
  char v84;
  _OWORD v85[8];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _QWORD v90[6];
  _QWORD v91[6];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  float64x2_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;

  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8) + 40) + 8)
                  + 528);
  v11 = 1.0;
  if (v10)
  {
    v12 = *(_QWORD *)(v10 + 8);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 24);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 8);
        if (v14)
        {
          v15 = (*(_DWORD *)v14)++;
          v11 = *(float *)(v14 + 364);
          if (v15)
          {
            *(_DWORD *)v14 = v15;
          }
          else
          {
            WebCore::Page::~Page(v14);
            WTF::fastFree(v79, v80);
          }
        }
      }
    }
  }
  v16 = WebCore::RenderLayer::offsetFromAncestor(a1, *(_QWORD *)a3, 0);
  v17 = v16 + *a5;
  if (__OFADD__((_DWORD)v16, *a5))
    v17 = (v16 >> 31) + 0x7FFFFFFF;
  v18 = a5[1];
  v19 = __OFADD__(HIDWORD(v16), v18);
  v20 = HIDWORD(v16) + v18;
  if (v19)
    v20 = (HIDWORD(v16) >> 31) + 0x7FFFFFFF;
  v21 = *(__int128 **)(a1 + 200);
  if (v21)
  {
    v22 = *((_DWORD *)a3 + 12);
    v23 = v21[5];
    v96 = v21[4];
    v97 = v23;
    v24 = v21[7];
    v98 = v21[6];
    v99 = v24;
    v25 = v21[1];
    v92 = *v21;
    v93 = v25;
    v26 = (float64x2_t)v21[3];
    v94 = v21[2];
    v95 = v26;
    if ((v22 & 0x200) != 0)
    {
      v93 = 0uLL;
      v95 = 0u;
      v96 = 0u;
      v97 = xmmword_1968A14B0;
      v99 = xmmword_1968A14C0;
    }
  }
  else
  {
    v96 = xmmword_1969FCC00;
    v97 = (__int128)xmmword_1969FCC10;
    v98 = xmmword_1969FCC20;
    v99 = unk_1969FCC30;
    v92 = constinit_103;
    v93 = *(_OWORD *)algn_1969FCBD0;
    v94 = xmmword_1969FCBE0;
    v95 = xmmword_1969FCBF0;
  }
  v27 = *((_DWORD *)a3 + 8);
  v28 = v17 + v27;
  if (__OFADD__(v17, v27))
    v28 = (v17 >> 31) + 0x7FFFFFFF;
  v29 = *((_DWORD *)a3 + 9);
  v30 = v20 + v29;
  if (__OFADD__(v20, v29))
    v30 = (v20 >> 31) + 0x7FFFFFFF;
  v31 = *(_QWORD *)(a1 + 32);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 24) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0
    && WebCore::RenderObject::isSVGLayerAwareRenderer(*(WebCore::RenderObject **)(a1 + 32))
    && *(_BYTE *)(v31 + 46) != 83)
  {
    v32 = (float)(int)v28 * 0.015625;
    v33 = (float)(int)v30 * 0.015625;
  }
  else
  {
    v83[0] = v28 | (unint64_t)(v30 << 32);
    v32 = WebCore::roundPointToDevicePixels((WebCore *)v83, (const WebCore::LayoutPoint *)1, v11);
  }
  v34 = v32;
  if (v32 != 0.0)
  {
    *(double *)&v92 = *(double *)&v92 + *((double *)&v93 + 1) * v34;
    *(double *)&v94 = *(double *)&v94 + v95.f64[1] * v34;
    *(double *)&v96 = *(double *)&v96 + *((double *)&v97 + 1) * v34;
    *(double *)&v98 = *(double *)&v98 + *((double *)&v99 + 1) * v34;
  }
  v35 = v33;
  if (v33 == 0.0)
  {
    v36 = *((double *)&v92 + 1);
    v37 = *((double *)&v94 + 1);
    v38 = *((double *)&v98 + 1);
  }
  else
  {
    v36 = *((double *)&v92 + 1) + *((double *)&v93 + 1) * v35;
    v37 = *((double *)&v94 + 1) + v95.f64[1] * v35;
    v38 = *((double *)&v98 + 1) + *((double *)&v99 + 1) * v35;
    *((double *)&v92 + 1) = v36;
    *((double *)&v94 + 1) = v37;
    *((double *)&v96 + 1) = *((double *)&v96 + 1) + *((double *)&v97 + 1) * v35;
    *((double *)&v98 + 1) = v38;
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 672))(v91, a2, 1);
  v90[0] = v92;
  *(double *)&v90[1] = v36;
  v90[2] = v94;
  *(double *)&v90[3] = v37;
  v90[4] = v98;
  *(double *)&v90[5] = v38;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 656))(a2, v90);
  v40 = (WebCore::RegionContext *)*((_QWORD *)a3 + 7);
  if (v40)
    WebCore::RegionContext::pushTransform(v40, (const WebCore::AffineTransform *)v90);
  v41 = *(_QWORD *)(a1 + 32);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 24) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
  {
    if (WebCore::RenderObject::isSVGLayerAwareRenderer(*(WebCore::RenderObject **)(a1 + 32))
      && *(_BYTE *)(v41 + 46) != 83)
    {
      goto LABEL_91;
    }
    v41 = *(_QWORD *)(a1 + 32);
  }
  if (*(_BYTE *)(v41 + 46) == 83)
  {
LABEL_91:
    v47 = 0;
    v48 = 0;
    goto LABEL_39;
  }
  v42 = v34 * 64.0;
  if (v34 * 64.0 >= 2147483650.0)
  {
    v43 = 0x7FFFFFFF;
  }
  else if (v42 <= -2147483650.0)
  {
    v43 = 0x80000000;
  }
  else
  {
    v43 = (int)v42;
  }
  v44 = v35 * 64.0;
  if (v35 * 64.0 >= 2147483650.0)
  {
    v45 = 0x7FFFFFFF;
  }
  else if (v44 <= -2147483650.0)
  {
    v45 = 0x80000000;
  }
  else
  {
    v45 = (int)v44;
  }
  v19 = __OFSUB__(v28, v43);
  v46 = v28 - v43;
  if (v19)
    v46 = (v28 >> 31) + 0x7FFFFFFF;
  v47 = (v30 - v45);
  if (__OFSUB__((_DWORD)v30, v45))
    v47 = (v30 >> 31) + 0x7FFFFFFF;
  v48 = v46;
LABEL_39:
  v49 = a3[1];
  v86 = *a3;
  v87 = v49;
  v50 = a3[3];
  v88 = a3[2];
  v89 = v50;
  *(_QWORD *)&v86 = a1;
  if ((_DWORD)v87 != -1073741808 || *(_QWORD *)((char *)&v87 + 4) != 0x7FFFFFDFC0000010 || HIDWORD(v87) != 2147483615)
  {
    WebCore::TransformationMatrix::inverse((double *)&v92, v39, (uint64_t)v83);
    if (v84)
      v51 = (__int128 *)v83;
    else
      v51 = &constinit_103;
    v52 = v51[5];
    v85[4] = v51[4];
    v85[5] = v52;
    v53 = v51[7];
    v85[6] = v51[6];
    v85[7] = v53;
    v54 = v51[1];
    v85[0] = *v51;
    v85[1] = v54;
    v55 = v51[3];
    v85[2] = v51[2];
    v85[3] = v55;
    v56 = WebCore::TransformationMatrix::mapRect((WebCore::TransformationMatrix *)v85, (const WebCore::LayoutRect *)(a3 + 1));
    v59 = v56 + v58;
    if (__OFADD__((_DWORD)v56, v58))
      v59 = (v56 >> 31) + 0x7FFFFFFF;
    if (__OFADD__(HIDWORD(v56), v57))
      v60 = (HIDWORD(v56) >> 31) + 0x7FFFFFFF;
    else
      v60 = HIDWORD(v56) + v57;
    v61 = floorf((float)(v11 * (float)SHIDWORD(v56)) * 0.015625) / v11;
    v62 = floorf((float)(v11 * (float)(int)v56) * 0.015625) / v11;
    v63 = (float)(ceilf((float)(v11 * (float)v59) * 0.015625) / v11) - v62;
    v64 = (float)(ceilf((float)(v11 * (float)v60) * 0.015625) / v11) - v61;
    v65 = v62 * 64.0;
    if (v65 > -2147483650.0)
      v66 = (int)v65;
    else
      v66 = 0x80000000;
    if (v65 < 2147483650.0)
      v67 = v66;
    else
      v67 = 0x7FFFFFFF;
    v68 = v61 * 64.0;
    if (v68 > -2147483650.0)
      v69 = (int)v68;
    else
      v69 = 0x80000000;
    if (v68 < 2147483650.0)
      v70 = v69;
    else
      v70 = 0x7FFFFFFF;
    *(_QWORD *)&v87 = __PAIR64__(v70, v67);
    v71 = v63 * 64.0;
    if (v71 > -2147483650.0)
      v72 = (int)v71;
    else
      v72 = 0x80000000;
    if (v71 < 2147483650.0)
      v73 = v72;
    else
      v73 = 0x7FFFFFFF;
    DWORD2(v87) = v73;
    v74 = v64 * 64.0;
    if (v74 >= 2147483650.0)
    {
      v75 = 0x7FFFFFFF;
    }
    else if (v74 <= -2147483650.0)
    {
      v75 = 0x80000000;
    }
    else
    {
      v75 = (int)v74;
    }
    HIDWORD(v87) = v75;
  }
  *(_QWORD *)&v88 = v48 | (v47 << 32);
  v76 = *(_QWORD *)(a1 + 208);
  if (v76)
  {
    v82 = *(_QWORD *)(a1 + 24);
    if ((v82 & 0x8000) == 0)
    {
      *(_QWORD *)(a1 + 24) = v82 | 0x8000;
      WebCore::RenderLayer::paintLayer(*(_QWORD *)(v76 + 144), a2, &v86, a4 & 0xFFFFFFF5 | 8);
      *(_QWORD *)(a1 + 24) &= ~0x8000uLL;
    }
  }
  WebCore::RenderLayer::paintLayerContents(a1, a2, (uint64_t)&v86, a4 & 0xFFFFFF9D | 0x60);
  v77 = *((_QWORD *)a3 + 7);
  if (v77)
  {
    v81 = *(_DWORD *)(v77 + 28);
    if (v81)
      *(_DWORD *)(v77 + 28) = v81 - 1;
  }
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 664))(a2, v91);
}

void WebCore::RenderLayer::computeClipPath(WebCore::RenderLayer *this, const WebCore::LayoutSize *a2, int32x2_t *a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  const WebCore::RenderLayerModelObject *v12;
  float v13;
  int v14;
  int v15;
  float v16;
  float v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int *v25;
  float v26;
  double v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  BOOL isSVGLayerAwareRenderer;
  int *v32;
  int v33;
  int *v34;
  float32x2_t v35;
  int v36;
  int v37;
  char *v38;
  _DWORD v39[2];
  _DWORD v40[14];
  unsigned int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v7 = *((_QWORD *)a2 + 4);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 40) + 264);
  v9 = *(_DWORD *)(v8 + 12);
  if (v8)
    v10 = v9 == 1;
  else
    v10 = 0;
  if (!v10)
  {
    if (v9 != 2)
      v8 = 0;
    if (v8)
    {
      ++*(_DWORD *)(v8 + 8);
      if ((*(_BYTE *)(v7 + 45) & 4) != 0)
      {
        v25 = (int *)(v7 + 16);
        ++*(_DWORD *)(v7 + 16);
        WebCore::computeRoundedRectForBoxShape(*(unsigned __int8 *)(v8 + 16), (_QWORD *)v7, (uint64_t)v39);
        v26 = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 24)
                                                                                                 + 8)
                                                                                     + 40)
                                                                         + 8));
        WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)v39, v26, (uint64_t)&v35);
        v35 = vadd_f32(vmul_f32(vcvt_f32_s32(*a3), (float32x2_t)vdup_n_s32(0x3C800000u)), v35);
        v41 = 0;
        v27 = WebCore::Path::addRoundedRect((WebCore::Path *)v39, (WebCore::FloatRect *)&v35, 0);
        *((_DWORD *)this + 16) = 0;
        if (v41 == -1)
        {
          *((_DWORD *)this + 16) = -1;
          *((_BYTE *)this + 72) = 0;
        }
        else
        {
          v38 = (char *)this + 8;
          ((void (*)(char **, double))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v41])(&v38, v27);
          v28 = v41;
          *((_BYTE *)this + 72) = 0;
          if ((_DWORD)v28 != -1)
            ((void (*)(char **, _DWORD *))off_1E3428F58[v28])(&v38, v40);
        }
        v29 = *v25;
        goto LABEL_24;
      }
    }
    else if ((*(_BYTE *)(v7 + 45) & 4) != 0)
    {
      v33 = *(_DWORD *)(v7 + 16);
      v32 = (int *)(v7 + 16);
      v29 = v33 + 1;
      *v32 = v33 + 1;
      *((_BYTE *)this + 8) = 0;
      *((_DWORD *)this + 16) = 0;
      *((_BYTE *)this + 72) = 0;
      v25 = v32;
LABEL_24:
      if (!v29)
      {
        __break(0xC471u);
        JUMPOUT(0x1963EA7E0);
      }
      *v25 = v29 - 1;
LABEL_26:
      if (!v8)
        return;
      goto LABEL_12;
    }
    *((_BYTE *)this + 8) = 0;
    *((_DWORD *)this + 16) = 0;
    *((_BYTE *)this + 72) = 0;
    goto LABEL_26;
  }
  ++*(_DWORD *)(v8 + 8);
  v11 = *(unsigned __int8 *)(v8 + 16);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0
    && (v34 = a4,
        v30 = *(unsigned __int8 *)(v8 + 16),
        isSVGLayerAwareRenderer = WebCore::RenderObject::isSVGLayerAwareRenderer((WebCore::RenderObject *)v7),
        v11 = v30,
        a4 = v34,
        v7 = *((_QWORD *)a2 + 4),
        isSVGLayerAwareRenderer)
    || (*(_BYTE *)(v7 + 45) & 4) != 0)
  {
    v13 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 752))(v7, v11)
        + (float)((float)a3->i32[0] * 0.015625);
    v17 = v16 + (float)((float)a3->i32[1] * 0.015625);
  }
  else
  {
    v13 = WebCore::LayoutRect::operator WebCore::FloatRect(a4);
  }
  *(float *)v39 = v13;
  *(float *)&v39[1] = v17;
  v40[0] = v14;
  v40[1] = v15;
  WebCore::snapRectToDevicePixelsIfNeeded((WebCore::Page *)v39, *((const WebCore::FloatRect **)a2 + 4), v12);
  v35 = (float32x2_t)__PAIR64__(v19, v18);
  v36 = v20;
  v37 = v21;
  v22 = (*(uint64_t (**)(_QWORD, float32x2_t *))(**(_QWORD **)(v8 + 24) + 32))(*(_QWORD *)(v8 + 24), &v35);
  v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24));
  *((_DWORD *)this + 16) = 0;
  v24 = *(unsigned int *)(v22 + 64);
  if ((_DWORD)v24 == -1)
  {
    *((_DWORD *)this + 16) = -1;
  }
  else
  {
    v38 = (char *)this + 8;
    ((void (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v24])(&v38);
  }
  *((_BYTE *)this + 72) = v23;
LABEL_12:
  if (*(_DWORD *)(v8 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  else
    --*(_DWORD *)(v8 + 8);
}

unint64_t WebCore::RenderLayerModelObject::nominalSVGLayoutLocation(WebCore::RenderLayerModelObject *this)
{
  float v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  unint64_t v6;

  v1 = floorf((*(float (**)(WebCore::RenderLayerModelObject *))(*(_QWORD *)this + 248))(this) * 64.0);
  v3 = 0x7FFFFFFFLL;
  v4 = 0x80000000;
  if (v1 > -2147500000.0)
    v4 = (int)v1;
  if (v1 < 2147500000.0)
    v3 = v4;
  v5 = floorf(v2 * 64.0);
  if (v5 >= 2147500000.0)
  {
    v6 = 0x7FFFFFFF00000000;
  }
  else if (v5 <= -2147500000.0)
  {
    v6 = 0x8000000000000000;
  }
  else
  {
    v6 = (unint64_t)(int)v5 << 32;
  }
  return v6 | v3;
}

uint64_t WebCore::RenderLayer::filtersForPainting(_QWORD *a1, uint64_t a2, char a3)
{
  const WebCore::FilterOperations *v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int ***v11;
  int v12;
  uint64_t v13;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  result = 0;
  if ((v6 & 1) == 0 && (a3 & 0x10) == 0)
  {
    v8 = a1[4];
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 88) + 32) + 32);
    v10 = *(_DWORD *)(v9 + 20);
    if (!v10)
      return 0;
    v11 = (unsigned int ***)(v9 + 8);
    v12 = *(unsigned __int8 *)(v8 + 46);
    if ((v12 == 103 || v12 == 83) && v10 == 1 && !*((_BYTE *)**v11 + 12))
      return 0;
    if ((WebCore::CSSFilter::isIdentity((WebCore::CSSFilter *)v8, v11, v5) & 1) != 0)
      return 0;
    v13 = a1[32];
    if (v13 && *(_BYTE *)(v13 + 292))
      return 0;
    else
      return a1[31];
  }
  return result;
}

uint64_t WebCore::RenderLayer::applyFilters(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v11;
  char *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  char *v21;
  char v22;
  uint64_t v23;
  unsigned __int8 v24;
  char v25;
  char **v26;

  v23 = a2;
  v24 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 144);
  if (v7)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7) & 1) != 0)
    {
      v11 = *(_QWORD *)(a3 + 56);
      v21 = (char *)v11;
      if (v11)
        ++*(_DWORD *)(v11 + 8);
      v22 = 0;
      WebCore::RenderLayer::clipToRect(a1, a2, &v23, (uint64_t)&v21, a3, a4, a5, 0);
      v12 = v21;
      if (v21)
      {
        if (v22)
        {
          v20 = *((_DWORD *)v21 + 11);
          if (v20)
            *((_DWORD *)v21 + 11) = v20 - 1;
        }
        v19 = *((_DWORD *)v12 + 2);
        if (!v19)
        {
          __break(0xC471u);
          JUMPOUT(0x1963EAB2CLL);
        }
        *((_DWORD *)v12 + 2) = v19 - 1;
      }
      v13 = v24;
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 144);
      v15 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
      if (v15 != -1)
      {
        v21 = &v25;
        v26 = &v21;
        std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v26, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v14 + 40))(v14, a2, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
      if (v13)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 104))(v23, 1);
      return result;
    }
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 144);
  }
  else
  {
    v17 = 0;
  }
  v18 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v18 != -1)
  {
    v21 = &v25;
    v26 = &v21;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v26, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v17 + 40))(v17, a2, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
}

WTF::MonotonicTime *WebCore::PaintFrequencyTracker::track(WTF::MonotonicTime *result, double a2)
{
  WTF::MonotonicTime *v2;
  unsigned int v3;

  v2 = result;
  if (a2 == 0.0)
    result = (WTF::MonotonicTime *)WTF::MonotonicTime::now(result);
  *((_BYTE *)v2 + 12) = 0;
  if (a2 - *(double *)v2 > 5.0)
  {
    v3 = 0;
  }
  else
  {
    v3 = *((_DWORD *)v2 + 2);
    if (v3 >= 0x14)
      *((_BYTE *)v2 + 12) = 1;
  }
  *(double *)v2 = a2;
  *((_DWORD *)v2 + 2) = v3 + 1;
  return result;
}

BOOL WebCore::RenderLayer::updatePaintingInfoForFragments(_BOOL8 result, WebCore::RenderObject *a2, unsigned int a3, _QWORD *a4, __int16 a5, int a6, _DWORD *a7, double a8)
{
  WebCore::RenderObject *v10;
  uint64_t v11;
  unsigned int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  char v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)();
  uint64_t (*v31)();
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  WebCore::RenderObject *v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t Cell;
  WebCore::RenderTableCell *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  unsigned __int8 *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[2];
  __int128 v61;

  if (a3)
  {
    v10 = a2;
    v11 = result;
    v54 = (unsigned __int8 *)a2 + 104 * a3;
    v55 = a5 & 0x400;
    v53 = a4;
    while (1)
    {
      *(_BYTE *)v10 = a6;
      if (*a4 == v11 && v55 != 0)
        goto LABEL_31;
      v13 = a7[1];
      v14 = *((_DWORD *)v10 + 20);
      v15 = *((_DWORD *)v10 + 21);
      v16 = __OFADD__(*a7, v14);
      v17 = *a7 + v14;
      if (v16)
        v17 = (*a7 >> 31) + 0x7FFFFFFF;
      v16 = __OFADD__(v13, v15);
      v18 = v13 + v15;
      v19 = (v13 >> 31) + 0x7FFFFFFF;
      if (v16)
        v20 = v19;
      else
        v20 = v18;
      if ((*(_BYTE *)(v11 + 24) & 1) != 0
        || (v21 = *(_QWORD *)(v11 + 32),
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 24) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*(_QWORD *)(v21 + 24) + 8)))
      {
LABEL_61:
        result = 1;
LABEL_62:
        v24 = a6;
        goto LABEL_27;
      }
      v22 = *((_DWORD *)v10 + 12);
      if (*((_DWORD *)v10 + 10) == -1073741808 && *((_DWORD *)v10 + 11) == -1073741808)
      {
        v23 = *((_DWORD *)v10 + 13);
        if (v22 == 2147483615 && v23 == 2147483615)
          goto LABEL_61;
      }
      else
      {
        v23 = *((_DWORD *)v10 + 13);
      }
      result = 0;
      if (v22 < 1)
        goto LABEL_62;
      v24 = a6;
      if (v23 >= 1)
        break;
LABEL_27:
      if (v24)
        v26 = result;
      else
        v26 = 0;
      *(_BYTE *)v10 = v26;
LABEL_31:
      v10 = (WebCore::RenderObject *)((char *)v10 + 104);
      if (v10 == (WebCore::RenderObject *)v54)
        return result;
    }
    v52 = v17;
    v25 = *(_BYTE *)(v21 + 45);
    if ((v25 & 0x20) != 0)
    {
      if (!*((_BYTE *)v10 + 20))
      {
        v61 = 0uLL;
        ++*(_DWORD *)(v21 + 16);
        v27 = v21;
        if ((*(_BYTE *)(v21 + 20) & 1) == 0)
        {
          *(_QWORD *)&v61 = WebCore::RenderInline::linesVisualOverflowBoundingBox((WebCore::LegacyInlineBox **)v21, a2);
          *((_QWORD *)&v61 + 1) = v40;
          v27 = v21;
          goto LABEL_53;
        }
LABEL_35:
        if ((*(_BYTE *)(v21 + 52) & 7) == 4 && (*(_BYTE *)(v21 + 53) & 1) == 0)
        {
          v51 = v27;
          v50 = v20;
          ++*(_DWORD *)(v21 + 16);
          *(_QWORD *)&v61 = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect((WebCore::SVGBoundingBoxComputation *)v21, a2, a8);
          *((_QWORD *)&v61 + 1) = v41;
          v42 = *(_DWORD *)(v21 + 16);
          if (!v42)
          {
            __break(0xC471u);
            JUMPOUT(0x1963EAF2CLL);
          }
        }
        else
        {
          if (*(_BYTE *)(v21 + 46) != 39)
          {
            if ((v25 & 4) == 0)
              v21 = 0;
            v28 = *(_QWORD *)(v21 + 88);
            v29 = *(_QWORD *)(*(_QWORD *)(v28 + 32) + 48);
            if (*(_QWORD *)(v29 + 8))
            {
              while (!*(_QWORD *)(v29 + 16))
              {
                v29 = *(_QWORD *)(v29 + 8);
                if (!v29)
                  goto LABEL_45;
              }
            }
            else
            {
              if (*(_QWORD *)(v29 + 16))
                v30 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
              else
                v30 = 0;
              if (!v30)
              {
LABEL_45:
                if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 40) + 216) + 8))
                  v31 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
                else
                  v31 = 0;
                if (!v31)
                {
                  v32 = *(_QWORD *)(v21 + 192);
                  if (v32)
                  {
                    v33 = *(_QWORD *)(v32 + 20);
                    v34 = (uint64_t *)(v32 + 28);
                  }
                  else
                  {
                    v33 = 0;
                    v34 = (uint64_t *)(v21 + 160);
                  }
                  v35 = *v34;
                  *(_QWORD *)&v61 = v33;
                  *((_QWORD *)&v61 + 1) = v35;
LABEL_52:
                  if ((v25 & 0x20) == 0)
                  {
LABEL_55:
                    v57 = v61;
                    v37 = *(WebCore::RenderObject **)(v11 + 32);
                    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v37 + 3)
                                                                                              + 8)
                                                                                  + 40)
                                                                      + 8)
                                                          + 1944)
                                              + 248)
                                  + 1383))
                    {
                      if ((*((_BYTE *)v37 + 45) & 4) == 0)
                        v37 = WebCore::RenderObject::containingBlock(v37);
                      WebCore::RenderBox::flipForWritingMode((uint64_t)v37, (WebCore::LayoutRect *)&v57);
                    }
                    v38 = (v57 >> 31) + 0x7FFFFFFF;
                    if (!__OFADD__((_DWORD)v57, v52))
                      v38 = v57 + v52;
                    v39 = (DWORD1(v57) >> 31) + 0x7FFFFFFF;
                    if (!__OFADD__(DWORD1(v57), v20))
                      v39 = DWORD1(v57) + v20;
                    *(_QWORD *)&v57 = __PAIR64__(v39, v38);
                    v56 = v57;
                    result = WebCore::LayoutRect::intersects((WebCore::LayoutRect *)&v56, (WebCore::RenderObject *)((char *)v10 + 40));
                    v24 = *(unsigned __int8 *)v10;
                    goto LABEL_26;
                  }
LABEL_53:
                  v36 = *(_DWORD *)(v27 + 16);
                  if (!v36)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1963EAE68);
                  }
                  *(_DWORD *)(v27 + 16) = v36 - 1;
                  goto LABEL_55;
                }
              }
            }
            v60[0] = 0;
            v51 = v27;
            *(_QWORD *)&v61 = WebCore::RenderBox::maskClipRect((WebCore::RenderBox *)v21, (const WebCore::LayoutPoint *)v60);
            *((_QWORD *)&v61 + 1) = v49;
            WebCore::RenderBox::flipForWritingMode(v21, (WebCore::LayoutRect *)&v61);
LABEL_89:
            v27 = v51;
            goto LABEL_52;
          }
          v51 = v27;
          v50 = v20;
          ++*(_DWORD *)(v21 + 16);
          Cell = WebCore::RenderTableRow::firstCell((WebCore::RenderTableRow *)v21);
          if (Cell)
          {
            v44 = (WebCore::RenderTableCell *)Cell;
            do
            {
              v45 = *((_QWORD *)v44 + 20);
              v60[0] = 0;
              v60[1] = v45;
              WebCore::LayoutRect::unite((WebCore::LayoutRect *)&v61, (const WebCore::LayoutRect *)v60);
              v46 = *(_QWORD *)(v21 + 192);
              if (v46)
              {
                v48 = *(_QWORD *)(v46 + 20);
                v47 = *(_QWORD *)(v46 + 28);
                v58 = v48;
                v59 = v47;
                if (v48)
                {
LABEL_78:
                  WebCore::LayoutRect::unite((WebCore::LayoutRect *)&v61, (const WebCore::LayoutRect *)&v58);
                  goto LABEL_79;
                }
              }
              else
              {
                v47 = *(_QWORD *)(v21 + 160);
                v58 = 0;
                v59 = v47;
              }
              if (v45 != v47)
                goto LABEL_78;
LABEL_79:
              v44 = (WebCore::RenderTableCell *)WebCore::RenderTableCell::nextCell(v44);
            }
            while (v44);
          }
          v42 = *(_DWORD *)(v21 + 16);
          if (!v42)
          {
            __break(0xC471u);
            JUMPOUT(0x1963EAFF0);
          }
        }
        *(_DWORD *)(v21 + 16) = v42 - 1;
        v20 = v50;
        goto LABEL_89;
      }
    }
    else
    {
      if (WebCore::LayoutRect::intersects((WebCore::RenderObject *)((char *)v10 + 24), (WebCore::RenderObject *)((char *)v10 + 40)))
      {
        result = 1;
LABEL_25:
        v24 = a6;
LABEL_26:
        a4 = v53;
        goto LABEL_27;
      }
      if (!*((_BYTE *)v10 + 20))
      {
        v27 = 0;
        v61 = 0uLL;
        goto LABEL_35;
      }
    }
    result = WebCore::LayoutRect::intersects((WebCore::RenderObject *)((char *)v10 + 4), (WebCore::RenderObject *)((char *)v10 + 40));
    goto LABEL_25;
  }
  return result;
}

uint64_t WebCore::RenderLayer::clipRectRelativeToAncestor(_QWORD *a1, _QWORD *a2, uint64_t a3, const WebCore::LayoutRect *a4, int a5)
{
  uint64_t v9;
  int v10;
  WTF *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  double v23;
  uint64_t v24;
  int v25;
  uint64_t v27;
  _QWORD *v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const WebCore::RenderLayerModelObject *v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  BOOL v52;
  uint64_t v53;
  WTF *v54;
  unsigned int v55;
  _QWORD *v56;
  int v57;
  char v58;
  WTF *v59[2];
  char v60;
  __int128 v61;
  char v62;
  __int128 v63;
  __int128 v64;

  v61 = 0uLL;
  v62 = 0;
  v9 = a1[27];
  if (!v9 || ((v29 = *(_QWORD **)(v9 + 8)) != 0 ? (v30 = v29 == a2) : (v30 = 1), v30))
  {
    if (a5)
      v10 = 5;
    else
      v10 = 0;
  }
  else
  {
    v10 = 5;
  }
  v56 = a2;
  v57 = v10;
  v58 = 1;
  if (a2 == a1 || !a1[5])
  {
    v61 = *(_OWORD *)a4;
    v62 = 0;
  }
  else
  {
    WebCore::RenderLayer::parentClipRects((WTF *)v59, (uint64_t)a1, (uint64_t)&v56);
    v11 = v59[0];
    v12 = a1[4];
    v13 = (*(_DWORD *)(v12 + 96) >> 19) & 7;
    v14 = a3;
    if (v13 == 2)
    {
      v15 = (int *)((char *)v59[0] + 48);
    }
    else if (v13 == 6)
    {
      v15 = (int *)((char *)v59[0] + 28);
    }
    else
    {
      v15 = (int *)((char *)v59[0] + 8);
    }
    v17 = *v15;
    v16 = v15[1];
    v19 = v15[2];
    v18 = v15[3];
    v20 = v15[4];
    if (*((_BYTE *)v59[0] + 4))
    {
      v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8) + 40) + 8) + 1944);
      v46 = a2[4];
      v21 = v17;
      v22 = v16;
      if (v46 == v45)
      {
        if (v17 != -1073741808
          || v16 != -1073741808
          || v19 != 2147483615
          || (v21 = -1073741808, v22 = -1073741808, v18 != 2147483615))
        {
          v55 = v16;
          v54 = v59[0];
          v47 = WebCore::LocalFrameView::scrollPositionForFixedPosition(*(int32x2_t **)(v45 + 248));
          v21 = v17 + v47;
          if (__OFADD__(v17, (_DWORD)v47))
            v21 = (v17 >> 31) + 0x7FFFFFFF;
          v22 = v55 + HIDWORD(v47);
          if (__OFADD__(v55, HIDWORD(v47)))
            v22 = (v55 >> 31) + 0x7FFFFFFF;
          v11 = v54;
        }
      }
    }
    else
    {
      v21 = *v15;
      v22 = v15[1];
    }
    if (*(_DWORD *)v11 == 1)
      WTF::fastFree(v11, a2);
    else
      --*(_DWORD *)v11;
    a3 = v14;
    *(_QWORD *)&v61 = __PAIR64__(v22, v21);
    *((_QWORD *)&v61 + 1) = __PAIR64__(v18, v19);
    v62 = v20;
    if (*(_DWORD *)a4 != -1073741808
      || *((_DWORD *)a4 + 1) != -1073741808
      || *((_DWORD *)a4 + 2) != 2147483615
      || *((_DWORD *)a4 + 3) != 2147483615)
    {
      if (v21 == -1073741808 && v22 == -1073741808 && v19 == 2147483615 && v18 == 2147483615)
        v61 = *(_OWORD *)a4;
      else
        WebCore::LayoutRect::intersect((int *)&v61, a4);
    }
  }
  v23 = *(double *)&v61;
  *(_OWORD *)v59 = v61;
  v60 = v62;
  v24 = a1[4];
  v25 = *(_DWORD *)(v24 + 20);
  if ((v25 & 0x1800000) != 0x1000000)
  {
    if ((v25 & 0x10000) == 0)
      return v61;
    goto LABEL_29;
  }
  if ((v25 & 0x10000) == 0
    && (((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v24 + 88) + 40) + 642) << 48) & 0x20000000000000) == 0)
  {
    return v61;
  }
  if ((v25 & 0x10000) != 0)
  {
LABEL_29:
    *(_QWORD *)&v63 = a3;
    if ((*(_BYTE *)(v24 + 45) & 4) != 0)
    {
      v27 = 177;
    }
    else
    {
      if ((*(_BYTE *)(v24 + 52) & 7) != 4 || (*(_BYTE *)(v24 + 53) & 1) != 0)
      {
        v64 = 0uLL;
LABEL_35:
        if (LODWORD(v59[0]) == -1073741808
          && *(WTF **)((char *)v59 + 4) == (WTF *)0x7FFFFFDFC0000010
          && HIDWORD(v59[1]) == 2147483615)
        {
          v23 = *(double *)&v64;
          *(_OWORD *)v59 = v64;
        }
        else
        {
          WebCore::LayoutRect::intersect((int *)v59, (const WebCore::LayoutRect *)&v64);
        }
LABEL_48:
        v60 = 1;
        v24 = a1[4];
        v25 = *(_DWORD *)(v24 + 20);
        goto LABEL_49;
      }
      v27 = 110;
    }
    *(_QWORD *)&v64 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v24 + 8 * v27))(v24, &v63, 0, 0, 0);
    *((_QWORD *)&v64 + 1) = a2;
    if ((_QWORD)v64 == 0xC0000010C0000010 && a2 == (_QWORD *)0x7FFFFFDF7FFFFFDFLL)
      goto LABEL_48;
    goto LABEL_35;
  }
LABEL_49:
  if ((v25 & 0x1800000) == 0x1000000
    && ((*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v24 + 88) + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v24 + 88) + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v24 + 88) + 40) + 642) << 16)) << 32)) & 0x20000000000000) != 0
    && (*(_BYTE *)(v24 + 45) & 4) != 0)
  {
    ++*(_DWORD *)(v24 + 16);
    *(_QWORD *)&v63 = a3;
    *(_QWORD *)&v64 = WebCore::RenderBox::clipRect((WebCore::RenderBox *)v24, (const WebCore::LayoutPoint *)&v63, 0);
    *((_QWORD *)&v64 + 1) = a2;
    if ((_QWORD)v64 != 0xC0000010C0000010 || a2 != (_QWORD *)0x7FFFFFDF7FFFFFDFLL)
    {
      if ((_DWORD)v61 == -1073741808
        && *(_QWORD *)((char *)&v61 + 4) == 0x7FFFFFDFC0000010
        && HIDWORD(v61) == 2147483615)
      {
        v61 = v64;
      }
      else
      {
        WebCore::LayoutRect::intersect((int *)&v61, (const WebCore::LayoutRect *)&v64);
      }
      if (LODWORD(v59[0]) == -1073741808
        && *(WTF **)((char *)v59 + 4) == (WTF *)0x7FFFFFDFC0000010
        && HIDWORD(v59[1]) == 2147483615)
      {
        v23 = *(double *)&v64;
        *(_OWORD *)v59 = v64;
      }
      else
      {
        WebCore::LayoutRect::intersect((int *)v59, (const WebCore::LayoutRect *)&v64);
      }
    }
    v44 = *(_DWORD *)(v24 + 16);
    if (!v44)
    {
      __break(0xC471u);
      JUMPOUT(0x1963EB634);
    }
    *(_DWORD *)(v24 + 16) = v44 - 1;
    v24 = a1[4];
  }
  v31 = *(_BYTE *)(v24 + 45) & 4;
  if (v24 && (*(_BYTE *)(v24 + 45) & 4) != 0)
  {
    v32 = *(_QWORD *)(v24 + 192);
    if (v32)
    {
      v34 = *(_QWORD *)(v24 + 160);
      *(_QWORD *)&v64 = 0;
      *((_QWORD *)&v64 + 1) = v34;
      v63 = *(_OWORD *)(v32 + 20);
      if (!WebCore::LayoutRect::contains((WebCore::LayoutRect *)&v64, (const WebCore::LayoutRect *)&v63))
        goto LABEL_66;
    }
  }
  else if ((*(_BYTE *)(v24 + 52) & 7) == 4 && (*(_BYTE *)(v24 + 53) & 1) == 0)
  {
    v49 = *(_QWORD *)(v24 + 160);
    *(_QWORD *)&v64 = 0;
    *((_QWORD *)&v64 + 1) = v49;
    *(_QWORD *)&v63 = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect((WebCore::SVGBoundingBoxComputation *)v24, (const WebCore::RenderLayerModelObject *)a2, v23);
    *((_QWORD *)&v63 + 1) = v50;
    v51 = WebCore::LayoutRect::contains((WebCore::LayoutRect *)&v64, (const WebCore::LayoutRect *)&v63);
    v24 = a1[4];
    v31 = *(_BYTE *)(v24 + 45) & 4;
    if (!v51)
    {
LABEL_66:
      if (v31)
      {
        v37 = *(_QWORD *)(v24 + 192);
        if (v37)
        {
          v38 = *(_QWORD *)(v37 + 20);
          v39 = (uint64_t *)(v37 + 28);
        }
        else
        {
          v38 = 0;
          v39 = (uint64_t *)(v24 + 160);
        }
        v40 = *v39;
        *(_QWORD *)&v64 = v38;
        *((_QWORD *)&v64 + 1) = v40;
      }
      else
      {
        v41 = 0;
        v52 = 1;
        if ((*(_BYTE *)(v24 + 52) & 7) == 4 && (*(_BYTE *)(v24 + 53) & 1) == 0)
        {
          v41 = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect((WebCore::SVGBoundingBoxComputation *)v24, v35, v36);
          v24 = a1[4];
          v52 = (*(_BYTE *)(v24 + 45) & 4) == 0;
        }
        else
        {
          v53 = 0;
        }
        *(_QWORD *)&v64 = v41;
        *((_QWORD *)&v64 + 1) = v53;
        if (v52)
        {
LABEL_71:
          v42 = v41 + a3;
          if (__OFADD__((_DWORD)v41, (_DWORD)a3))
            v42 = (v41 >> 31) + 0x7FFFFFFF;
          LODWORD(v64) = v42;
          v43 = DWORD1(v64) + HIDWORD(a3);
          if (__OFADD__(DWORD1(v64), HIDWORD(a3)))
            v43 = (DWORD1(v64) >> 31) + 0x7FFFFFFF;
          DWORD1(v64) = v43;
          if (v56 == a1 && (v58 & 1) == 0
            || v42 == -1073741808 && v43 == -1073741808 && *((_QWORD *)&v64 + 1) == 0x7FFFFFDF7FFFFFDFLL)
          {
            return v61;
          }
LABEL_59:
          if ((_DWORD)v61 == -1073741808
            && *(_QWORD *)((char *)&v61 + 4) == 0x7FFFFFDFC0000010
            && HIDWORD(v61) == 2147483615)
          {
            return v64;
          }
          else
          {
            WebCore::LayoutRect::intersect((int *)&v61, (const WebCore::LayoutRect *)&v64);
          }
          return v61;
        }
      }
      WebCore::RenderBox::flipForWritingMode(v24, (WebCore::LayoutRect *)&v64);
      LODWORD(v41) = v64;
      goto LABEL_71;
    }
  }
  if (v31 || (v33 = 0, (*(_BYTE *)(v24 + 52) & 7) == 4) && (*(_BYTE *)(v24 + 53) & 1) == 0)
    v33 = *(_QWORD *)(v24 + 160);
  *((_QWORD *)&v64 + 1) = v33;
  *(_QWORD *)&v64 = a3;
  if ((v56 != a1 || (v58 & 1) != 0) && (a3 != 0xC0000010C0000010 || v33 != 0x7FFFFFDF7FFFFFDFLL))
    goto LABEL_59;
  return v61;
}

uint64_t WebCore::RenderLayer::collectAccessibilityRegionsForFragments(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  BOOL v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  __int128 v31;
  __int16 v32;
  int v33;
  __int128 v34;
  __int128 v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (a3)
  {
    v9 = result;
    v10 = 104 * a3;
    v11 = (_OWORD *)(a2 + 60);
    do
    {
      v31 = *v11;
      v32 = 0x2000;
      v33 = a6;
      v34 = 0u;
      v35 = 0u;
      v36 = 0;
      v12 = *(_QWORD *)(a5 + 56);
      v37 = 0;
      v38 = v12;
      v39 = a4;
      v13 = *(_QWORD *)(v9 + 32);
      if (v13 && (*(_BYTE *)(v13 + 45) & 4) != 0
        || ((*(_BYTE *)(v13 + 52) & 7) == 4 ? (v29 = (*(_BYTE *)(v13 + 53) & 1) == 0) : (v29 = 0), v29))
      {
        v14 = *(_QWORD *)(v13 + 152);
        v15 = v14 & 0xFFFFFFFF00000000;
      }
      else
      {
        v15 = 0;
        LODWORD(v14) = 0;
      }
      v16 = *((_DWORD *)v11 - 9);
      v17 = *((_DWORD *)v11 - 8);
      v11 = (_OWORD *)((char *)v11 + 104);
      v18 = HIDWORD(v15);
      v19 = __OFSUB__(v16, (_DWORD)v14);
      v20 = v16 - v14;
      v21 = (v16 >> 31) + 0x7FFFFFFF;
      if (v19)
        v20 = v21;
      v19 = __OFSUB__(v17, (_DWORD)v18);
      v22 = v17 - v18;
      if (v19)
        v22 = (v17 >> 31) + 0x7FFFFFFF;
      v23 = *(_DWORD *)(a5 + 32);
      v24 = *(_DWORD *)(a5 + 36);
      v19 = __OFADD__(v20, v23);
      v25 = v20 + v23;
      LODWORD(v26) = (v20 >> 31) + 0x7FFFFFFF;
      if (v19)
        v26 = v26;
      else
        v26 = v25;
      v19 = __OFADD__(v22, v24);
      v27 = v22 + v24;
      LODWORD(v28) = (v22 >> 31) + 0x7FFFFFFF;
      if (v19)
        v28 = v28;
      else
        v28 = v27;
      v30 = v26 | (v28 << 32);
      result = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v13 + 680))(v13, &v31, &v30);
      v10 -= 104;
    }
    while (v10);
  }
  return result;
}

uint64_t WebCore::RenderLayer::paintOverflowControlsForFragments(uint64_t result, uint64_t a2, unsigned int a3, WebCore::GraphicsContext *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  BOOL v38;
  _DWORD v39[4];
  int32x2_t v40;
  uint64_t v41;
  char v42;
  WebCore::GraphicsContext *v43;
  char v44;

  if (a3)
  {
    v7 = result;
    v8 = 104 * a3;
    v9 = a2 + 40;
    do
    {
      if (*(int *)(v9 + 8) >= 1 && *(int *)(v9 + 12) >= 1)
      {
        v43 = a4;
        v44 = 0;
        v10 = *(_QWORD *)(a5 + 56);
        v41 = v10;
        if (v10)
          ++*(_DWORD *)(v10 + 8);
        v42 = 0;
        WebCore::RenderLayer::clipToRect(v7, (uint64_t)a4, &v43, (uint64_t)&v41, a5, 0, v9, 0);
        v11 = *(_QWORD *)(v7 + 264);
        v13 = *(_DWORD *)(v9 - 16);
        v12 = *(_DWORD *)(v9 - 12);
        v14 = *(_QWORD *)(v7 + 32);
        if (v14 && (*(_BYTE *)(v14 + 45) & 4) != 0
          || ((*(_BYTE *)(v14 + 52) & 7) == 4 ? (v38 = (*(_BYTE *)(v14 + 53) & 1) == 0) : (v38 = 0), v38))
        {
          v15 = *(_QWORD *)(v14 + 152);
          v16 = HIDWORD(v15);
        }
        else
        {
          v16 = 0;
          LODWORD(v15) = 0;
        }
        v17 = __OFSUB__(v13, (_DWORD)v15);
        v18 = v13 - v15;
        if (v17)
          v18 = (v13 >> 31) + 0x7FFFFFFF;
        v19 = v12 - v16;
        if (__OFSUB__(v12, v16))
          v19 = (v12 >> 31) + 0x7FFFFFFF;
        v20 = *(_DWORD *)(a5 + 32);
        v17 = __OFADD__(v18, v20);
        v21 = v18 + v20;
        if (v17)
          v21 = (v18 >> 31) + 0x7FFFFFFF;
        v22 = *(_DWORD *)(a5 + 36);
        v17 = __OFADD__(v19, v22);
        v23 = v19 + v22;
        if (v17)
          v23 = (v19 >> 31) + 0x7FFFFFFF;
        v40.i32[0] = ((int)(v21 - (v19 & 0xFFFFFFC0) + 32) >> 6) + v21 / 64;
        v40.i32[1] = ((int)(v23 - (v19 & 0xFFFFFFC0) + 32) >> 6) + v23 / 64;
        v24 = HIDWORD(*(_QWORD *)v9);
        if ((int)*(_QWORD *)v9 >= 0)
          v25 = *(_QWORD *)v9;
        else
          v25 = *(_QWORD *)v9 + 63;
        v26 = *(_QWORD *)v9 - (v25 & 0xFFFFFFC0);
        if ((int)v24 >= 0)
          v27 = HIDWORD(*(_QWORD *)v9);
        else
          v27 = v24 + 63;
        v28 = *(_DWORD *)(v9 + 8);
        v29 = *(_DWORD *)(v9 + 12);
        v17 = __OFADD__(v26, v28);
        v30 = v26 + v28;
        if (v17)
          v30 = (v26 >> 31) + 0x7FFFFFFF;
        v31 = v24 - (v27 & 0xFFFFFFC0);
        v32 = v31 + v29;
        if (__OFADD__(v31, v29))
          v32 = (v31 >> 31) + 0x7FFFFFFF;
        v33 = v31 + 32;
        v34 = v26 + 32;
        v39[0] = (v25 >> 6) + (v34 >> 6);
        v39[1] = (v27 >> 6) + (v33 >> 6);
        v39[2] = v30 / 64 - (v34 >> 6) + ((int)(v30 - (v27 & 0xFFFFFFC0) + 32) >> 6);
        v39[3] = v32 / 64 - (v33 >> 6) + ((int)(v32 - (v34 & 0xFFFFFFC0) + 32) >> 6);
        result = WebCore::RenderLayerScrollableArea::paintOverflowControls(v11, a4, &v40, (const WebCore::IntRect *)v39, 1);
        v35 = v41;
        if (v41)
        {
          if (v42)
          {
            v37 = *(_DWORD *)(v41 + 44);
            if (v37)
              *(_DWORD *)(v41 + 44) = v37 - 1;
          }
          v36 = *(_DWORD *)(v35 + 8);
          if (!v36)
          {
            result = 286;
            __break(0xC471u);
            return result;
          }
          *(_DWORD *)(v35 + 8) = v36 - 1;
        }
        if (v44)
          result = (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v43 + 104))(v43, 1);
      }
      v9 += 104;
      v8 -= 104;
    }
    while (v8);
  }
  return result;
}

uint64_t WebCore::RenderLayer::paintMaskForFragments(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  __int16 v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;

  if (a3)
  {
    v11 = result;
    v12 = a6;
    v13 = 104 * a3;
    v14 = (_OWORD *)(a2 + 40);
    do
    {
      if (!*((_BYTE *)v14 - 40))
        goto LABEL_24;
      v51 = a4;
      v52 = 0;
      v15 = *(_QWORD *)(a5 + 56);
      v49 = v15;
      if (v15)
        ++*(_DWORD *)(v15 + 8);
      v50 = 0;
      if (*(_BYTE *)(a5 + 53))
        WebCore::RenderLayer::clipToRect(v11, a4, &v51, (uint64_t)&v49, a5, v12, (uint64_t)v14, 1);
      v16 = *(_QWORD *)(*(_QWORD *)a5 + 32);
      v38 = *v14;
      v39 = 1024;
      v40 = a6;
      v42 = 0;
      v43 = 0;
      v41 = a7;
      v44 = v16;
      v45 = 0;
      v46 = v11;
      v47 = 0;
      v48 = a4;
      v17 = *(_QWORD *)(v11 + 32);
      v19 = *((_DWORD *)v14 - 4);
      v18 = *((_DWORD *)v14 - 3);
      if (v17 && (*(_BYTE *)(v17 + 45) & 4) != 0)
        goto LABEL_10;
      v21 = 0;
      if ((*(_BYTE *)(v17 + 52) & 7) != 4)
      {
        LODWORD(v20) = 0;
        goto LABEL_11;
      }
      LODWORD(v20) = 0;
      if ((*(_BYTE *)(v17 + 53) & 1) == 0)
      {
LABEL_10:
        v20 = *(_QWORD *)(v17 + 152);
        v21 = v20 & 0xFFFFFFFF00000000;
      }
LABEL_11:
      v22 = HIDWORD(v21);
      v23 = __OFSUB__(v19, (_DWORD)v20);
      v24 = v19 - v20;
      v25 = (v19 >> 31) + 0x7FFFFFFF;
      if (!v23)
        v25 = v24;
      v23 = __OFSUB__(v18, (_DWORD)v22);
      v26 = v18 - v22;
      v27 = (v18 >> 31) + 0x7FFFFFFF;
      if (!v23)
        v27 = v26;
      v28 = *(_DWORD *)(a5 + 32);
      v29 = *(_DWORD *)(a5 + 36);
      v23 = __OFADD__(v25, v28);
      v30 = v25 + v28;
      LODWORD(v31) = (v25 >> 31) + 0x7FFFFFFF;
      if (v23)
        v31 = v31;
      else
        v31 = v30;
      v23 = __OFADD__(v27, v29);
      v32 = v27 + v29;
      LODWORD(v33) = (v27 >> 31) + 0x7FFFFFFF;
      if (v23)
        v33 = v33;
      else
        v33 = v32;
      v37 = v31 | (v33 << 32);
      result = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v17 + 680))(v17, &v38, &v37);
      v34 = v49;
      if (v49)
      {
        if (v50)
        {
          v36 = *(_DWORD *)(v49 + 44);
          if (v36)
            *(_DWORD *)(v49 + 44) = v36 - 1;
        }
        v35 = *(_DWORD *)(v34 + 8);
        if (!v35)
        {
          result = 286;
          __break(0xC471u);
          return result;
        }
        *(_DWORD *)(v34 + 8) = v35 - 1;
      }
      if (v52)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 104))(v51, 1);
LABEL_24:
      v14 = (_OWORD *)((char *)v14 + 104);
      v13 -= 104;
    }
    while (v13);
  }
  return result;
}

uint64_t WebCore::RenderLayer::paintChildClippingMaskForFragments(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  __int16 v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;

  if (a3)
  {
    v11 = result;
    v12 = a6;
    v13 = 104 * a3;
    v14 = a2 + 60;
    do
    {
      if (!*(_BYTE *)(v14 - 60))
        goto LABEL_24;
      v51 = a4;
      v52 = 0;
      v15 = *(_QWORD *)(a5 + 56);
      v49 = v15;
      if (v15)
        ++*(_DWORD *)(v15 + 8);
      v50 = 0;
      if (*(_BYTE *)(a5 + 53))
        WebCore::RenderLayer::clipToRect(v11, a4, &v51, (uint64_t)&v49, a5, v12, v14, 0);
      v16 = *(_QWORD *)(*(_QWORD *)a5 + 32);
      v38 = *(_OWORD *)(v14 - 20);
      v39 = 2048;
      v40 = a6;
      v42 = 0;
      v43 = 0;
      v41 = a7;
      v44 = v16;
      v45 = 0;
      v46 = v11;
      v47 = 0;
      v48 = a4;
      v17 = *(_QWORD *)(v11 + 32);
      v19 = *(_DWORD *)(v14 - 36);
      v18 = *(_DWORD *)(v14 - 32);
      if (v17 && (*(_BYTE *)(v17 + 45) & 4) != 0)
        goto LABEL_10;
      v21 = 0;
      if ((*(_BYTE *)(v17 + 52) & 7) != 4)
      {
        LODWORD(v20) = 0;
        goto LABEL_11;
      }
      LODWORD(v20) = 0;
      if ((*(_BYTE *)(v17 + 53) & 1) == 0)
      {
LABEL_10:
        v20 = *(_QWORD *)(v17 + 152);
        v21 = v20 & 0xFFFFFFFF00000000;
      }
LABEL_11:
      v22 = HIDWORD(v21);
      v23 = __OFSUB__(v19, (_DWORD)v20);
      v24 = v19 - v20;
      v25 = (v19 >> 31) + 0x7FFFFFFF;
      if (!v23)
        v25 = v24;
      v23 = __OFSUB__(v18, (_DWORD)v22);
      v26 = v18 - v22;
      v27 = (v18 >> 31) + 0x7FFFFFFF;
      if (!v23)
        v27 = v26;
      v28 = *(_DWORD *)(a5 + 32);
      v29 = *(_DWORD *)(a5 + 36);
      v23 = __OFADD__(v25, v28);
      v30 = v25 + v28;
      LODWORD(v31) = (v25 >> 31) + 0x7FFFFFFF;
      if (v23)
        v31 = v31;
      else
        v31 = v30;
      v23 = __OFADD__(v27, v29);
      v32 = v27 + v29;
      LODWORD(v33) = (v27 >> 31) + 0x7FFFFFFF;
      if (v23)
        v33 = v33;
      else
        v33 = v32;
      v37 = v31 | (v33 << 32);
      result = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v17 + 680))(v17, &v38, &v37);
      v34 = v49;
      if (v49)
      {
        if (v50)
        {
          v36 = *(_DWORD *)(v49 + 44);
          if (v36)
            *(_DWORD *)(v49 + 44) = v36 - 1;
        }
        v35 = *(_DWORD *)(v34 + 8);
        if (!v35)
        {
          result = 286;
          __break(0xC471u);
          return result;
        }
        *(_DWORD *)(v34 + 8) = v35 - 1;
      }
      if (v52)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 104))(v51, 1);
LABEL_24:
      v14 += 104;
      v13 -= 104;
    }
    while (v13);
  }
  return result;
}

WebCore::RenderLayer *WebCore::RenderLayer::enclosingPaginationLayerInSubtree(WebCore::RenderLayer *this, WebCore::RenderLayer *a2, int a3)
{
  WebCore::RenderLayer *v4;
  uint64_t v5;
  WebCore::RenderLayer *result;
  WebCore::RenderLayer *v7;
  BOOL v8;

  v4 = this;
  if (!a3 && (WebCore::RenderLayer::hasCompositedLayerInEnclosingPaginationChain(this) & 1) != 0)
    return 0;
  v5 = *((_QWORD *)v4 + 27);
  if (!v5)
    return 0;
  v7 = *(WebCore::RenderLayer **)(v5 + 8);
  if (!v7)
    return 0;
  if (v7 == a2)
    return a2;
  if (v4 == a2)
    return 0;
  while (v4 != v7)
  {
    result = 0;
    v4 = (WebCore::RenderLayer *)*((_QWORD *)v4 + 5);
    if (v4)
      v8 = v4 == a2;
    else
      v8 = 1;
    if (v8)
      return result;
  }
  return v7;
}

uint64_t WebCore::LayerFragment::moveBy(uint64_t this, const WebCore::LayoutPoint *a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;

  v2 = *((_DWORD *)a2 + 1);
  v3 = *(_DWORD *)(this + 24);
  v4 = *(_DWORD *)(this + 28);
  v5 = __OFADD__(v3, *(_DWORD *)a2);
  v6 = v3 + *(_DWORD *)a2;
  v7 = (v3 >> 31) + 0x7FFFFFFF;
  if (v5)
    v6 = v7;
  v5 = __OFADD__(v4, v2);
  v8 = v4 + v2;
  if (v5)
    v8 = (v4 >> 31) + 0x7FFFFFFF;
  *(_DWORD *)(this + 24) = v6;
  *(_DWORD *)(this + 28) = v8;
  v9 = *((_DWORD *)a2 + 1);
  v10 = *(_DWORD *)(this + 40);
  v11 = *(_DWORD *)(this + 44);
  v5 = __OFADD__(v10, *(_DWORD *)a2);
  v12 = v10 + *(_DWORD *)a2;
  v13 = (v10 >> 31) + 0x7FFFFFFF;
  if (v5)
    v12 = v13;
  v5 = __OFADD__(v11, v9);
  v14 = v11 + v9;
  if (v5)
    v14 = (v11 >> 31) + 0x7FFFFFFF;
  *(_DWORD *)(this + 40) = v12;
  *(_DWORD *)(this + 44) = v14;
  v15 = *((_DWORD *)a2 + 1);
  v16 = *(_DWORD *)(this + 60);
  v17 = *(_DWORD *)(this + 64);
  v5 = __OFADD__(v16, *(_DWORD *)a2);
  v18 = v16 + *(_DWORD *)a2;
  v19 = (v16 >> 31) + 0x7FFFFFFF;
  if (v5)
    v18 = v19;
  v5 = __OFADD__(v17, v15);
  v20 = v17 + v15;
  if (v5)
    v20 = (v17 >> 31) + 0x7FFFFFFF;
  *(_DWORD *)(this + 60) = v18;
  *(_DWORD *)(this + 64) = v20;
  v21 = *((_DWORD *)a2 + 1);
  v22 = *(_DWORD *)(this + 88);
  v23 = *(_DWORD *)(this + 92);
  v5 = __OFADD__(v22, *(_DWORD *)a2);
  v24 = v22 + *(_DWORD *)a2;
  v25 = (v22 >> 31) + 0x7FFFFFFF;
  if (v5)
    v24 = v25;
  v5 = __OFADD__(v23, v21);
  v26 = v23 + v21;
  if (v5)
    v26 = (v23 >> 31) + 0x7FFFFFFF;
  *(_DWORD *)(this + 88) = v24;
  *(_DWORD *)(this + 92) = v26;
  if (*(_BYTE *)(this + 20))
  {
    v27 = *((_DWORD *)a2 + 1);
    v28 = *(_DWORD *)(this + 4);
    v29 = v28 + *(_DWORD *)a2;
    if (__OFADD__(v28, *(_DWORD *)a2))
      v29 = (v28 >> 31) + 0x7FFFFFFF;
    *(_DWORD *)(this + 4) = v29;
    v30 = *(_DWORD *)(this + 8);
    v5 = __OFADD__(v30, v27);
    v31 = v30 + v27;
    if (v5)
      v31 = (v30 >> 31) + 0x7FFFFFFF;
    *(_DWORD *)(this + 8) = v31;
  }
  return this;
}

uint64_t WebCore::LayerFragment::intersect(uint64_t this, const WebCore::LayoutRect *a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  _OWORD *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  unsigned int v61;

  v3 = *(_DWORD *)a2;
  v2 = *((_DWORD *)a2 + 1);
  v4 = *(_DWORD *)a2 == -1073741808 && v2 == -1073741808;
  if (!v4 || (*((_DWORD *)a2 + 2) == 2147483615 ? (v5 = *((_DWORD *)a2 + 3) == 2147483615) : (v5 = 0), !v5))
  {
    v6 = this + 40;
    v8 = *(_DWORD *)(this + 40);
    v7 = *(_DWORD *)(this + 44);
    v9 = *(_DWORD *)(this + 48);
    v10 = v8 == -1073741808 && v7 == -1073741808;
    if (v10 && (v9 == 2147483615 ? (v11 = *(_DWORD *)(this + 52) == 2147483615) : (v11 = 0), v11))
    {
      *(_OWORD *)v6 = *(_OWORD *)a2;
    }
    else
    {
      if ((int)v8 <= (int)v3)
        v12 = *(_DWORD *)a2;
      else
        v12 = *(_DWORD *)(this + 40);
      if ((int)v7 <= (int)v2)
        v13 = v2;
      else
        v13 = v7;
      v14 = __OFADD__(v8, v9);
      v15 = v8 + v9;
      if (v14)
        v15 = (v8 >> 31) + 0x7FFFFFFF;
      v16 = *((_DWORD *)a2 + 2);
      v14 = __OFADD__(v3, v16);
      v17 = v3 + v16;
      if (v14)
        v17 = (v3 >> 31) + 0x7FFFFFFF;
      if (v17 >= v15)
        v18 = v15;
      else
        v18 = v17;
      v19 = *(_DWORD *)(this + 52);
      v14 = __OFADD__(v7, v19);
      v20 = v7 + v19;
      if (v14)
        v20 = (v7 >> 31) + 0x7FFFFFFF;
      v21 = *((_DWORD *)a2 + 3);
      v14 = __OFADD__(v2, v21);
      v22 = v2 + v21;
      if (v14)
        v22 = (v2 >> 31) + 0x7FFFFFFF;
      if (v22 >= v20)
        v23 = v20;
      else
        v23 = v22;
      if (v12 >= v18 || (int)v13 >= v23)
      {
        v18 = 0;
        v23 = 0;
        v12 = 0;
        v13 = 0;
      }
      *(_QWORD *)v6 = v12 | (unint64_t)(v13 << 32);
      v14 = __OFSUB__(v18, v12);
      LODWORD(v6) = v18 - v12;
      v24 = (v18 >> 31) + 0x7FFFFFFF;
      if (v14)
        v6 = v24;
      else
        v6 = v6;
      v14 = __OFSUB__(v23, (_DWORD)v13);
      LODWORD(v13) = v23 - v13;
      if (v14)
        v13 = (v23 >> 31) + 0x7FFFFFFF;
      else
        v13 = v13;
      *(_QWORD *)(this + 48) = v6 | (v13 << 32);
    }
  }
  v26 = *(_DWORD *)a2;
  v25 = *((_DWORD *)a2 + 1);
  v27 = *(_DWORD *)a2 == -1073741808 && v25 == -1073741808;
  if (!v27 || *((_DWORD *)a2 + 2) != 2147483615 || *((_DWORD *)a2 + 3) != 2147483615)
  {
    v28 = (_OWORD *)(this + 60);
    v30 = *(_DWORD *)(this + 60);
    v29 = *(_DWORD *)(this + 64);
    v31 = *(_DWORD *)(this + 68);
    if (__PAIR64__(v29, v30) == 0xC0000010C0000010 && v31 == 2147483615 && *(_DWORD *)(this + 72) == 2147483615)
    {
      *v28 = *(_OWORD *)a2;
    }
    else
    {
      if ((int)v30 <= (int)v26)
        v32 = *(_DWORD *)a2;
      else
        v32 = *(_DWORD *)(this + 60);
      if ((int)v29 <= (int)v25)
        v33 = v25;
      else
        v33 = v29;
      v14 = __OFADD__(v30, v31);
      v34 = v30 + v31;
      if (v14)
        v34 = (v30 >> 31) + 0x7FFFFFFF;
      v35 = *((_DWORD *)a2 + 2);
      v14 = __OFADD__(v26, v35);
      v36 = v26 + v35;
      if (v14)
        v36 = (v26 >> 31) + 0x7FFFFFFF;
      if (v36 >= v34)
        v37 = v34;
      else
        v37 = v36;
      v38 = *(_DWORD *)(this + 72);
      v14 = __OFADD__(v29, v38);
      v39 = v29 + v38;
      if (v14)
        v39 = (v29 >> 31) + 0x7FFFFFFF;
      v40 = *((_DWORD *)a2 + 3);
      v14 = __OFADD__(v25, v40);
      v41 = v25 + v40;
      if (v14)
        v41 = (v25 >> 31) + 0x7FFFFFFF;
      if (v41 >= v39)
        v42 = v39;
      else
        v42 = v41;
      if (v32 >= v37 || (int)v33 >= v42)
      {
        v37 = 0;
        v42 = 0;
        v32 = 0;
        v33 = 0;
      }
      *(_QWORD *)v28 = v32 | (unint64_t)(v33 << 32);
      v14 = __OFSUB__(v37, v32);
      LODWORD(v43) = v37 - v32;
      v44 = (v37 >> 31) + 0x7FFFFFFF;
      if (v14)
        v43 = v44;
      else
        v43 = v43;
      v14 = __OFSUB__(v42, (_DWORD)v33);
      LODWORD(v33) = v42 - v33;
      if (v14)
        v33 = (v42 >> 31) + 0x7FFFFFFF;
      else
        v33 = v33;
      *(_QWORD *)(this + 68) = v43 | (v33 << 32);
    }
  }
  if (*(_BYTE *)(this + 20))
  {
    v46 = *(_DWORD *)(this + 4);
    v45 = *(_DWORD *)(this + 8);
    v48 = *(_DWORD *)a2;
    v47 = *((_DWORD *)a2 + 1);
    if ((signed int)v46 <= *(_DWORD *)a2)
      v49 = *(_DWORD *)a2;
    else
      v49 = *(_DWORD *)(this + 4);
    if ((int)v45 <= (int)v47)
      v50 = v47;
    else
      v50 = v45;
    v51 = *(_DWORD *)(this + 12);
    v14 = __OFADD__(v46, v51);
    v52 = v46 + v51;
    if (v14)
      v52 = (v46 >> 31) + 0x7FFFFFFF;
    v53 = *((_DWORD *)a2 + 2);
    v14 = __OFADD__(v48, v53);
    v54 = v48 + v53;
    if (v14)
      v54 = (v48 >> 31) + 0x7FFFFFFF;
    if (v54 < v52)
      v52 = v54;
    v55 = *(_DWORD *)(this + 16);
    v14 = __OFADD__(v45, v55);
    v56 = v45 + v55;
    if (v14)
      v56 = (v45 >> 31) + 0x7FFFFFFF;
    v57 = *((_DWORD *)a2 + 3);
    v14 = __OFADD__(v47, v57);
    v58 = v47 + v57;
    if (v14)
      v58 = (v47 >> 31) + 0x7FFFFFFF;
    if (v58 >= v56)
      v59 = v56;
    else
      v59 = v58;
    if (v49 >= v52 || (int)v50 >= v59)
    {
      v52 = 0;
      v59 = 0;
      v49 = 0;
      v50 = 0;
    }
    *(_QWORD *)(this + 4) = v49 | (unint64_t)(v50 << 32);
    v14 = __OFSUB__(v52, v49);
    LODWORD(v60) = v52 - v49;
    v61 = (v52 >> 31) + 0x7FFFFFFF;
    if (v14)
      v60 = v61;
    else
      v60 = v60;
    v14 = __OFSUB__(v59, (_DWORD)v50);
    LODWORD(v50) = v59 - v50;
    if (v14)
      v50 = (v59 >> 31) + 0x7FFFFFFF;
    else
      v50 = v50;
    *(_QWORD *)(this + 12) = v60 | (v50 << 32);
  }
  return this;
}

BOOL WebCore::RenderLayer::intersectsDamageRect(uint64_t a1, WebCore::LayoutRect *this, WebCore::LayoutRect *a3, double a4, uint64_t a5, _DWORD *a6, WebCore::LayoutRect *a7)
{
  uint64_t v8;
  int v12;
  _BOOL8 result;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)();
  uint64_t (*v20)();
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  WebCore::RenderObject *v26;
  int v27;
  unsigned int v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t Cell;
  WebCore::RenderTableCell *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[2];
  __int128 v49;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    return 1;
  v8 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8))
    return 1;
  v12 = *((_DWORD *)a3 + 2);
  if (*(_DWORD *)a3 == -1073741808 && *((_DWORD *)a3 + 1) == -1073741808)
  {
    v40 = *((_DWORD *)a3 + 3);
    if (v12 == 2147483615 && v40 == 2147483615)
      return 1;
  }
  else
  {
    v40 = *((_DWORD *)a3 + 3);
  }
  result = 0;
  if (v12 >= 1 && v40 >= 1)
  {
    v15 = *(_BYTE *)(v8 + 45);
    if ((v15 & 0x20) != 0)
    {
      if (!*((_BYTE *)a7 + 16))
      {
        v49 = 0uLL;
        ++*(_DWORD *)(v8 + 16);
        v16 = v8;
        if ((*(_BYTE *)(v8 + 20) & 1) == 0)
        {
          *(_QWORD *)&v49 = WebCore::RenderInline::linesVisualOverflowBoundingBox((WebCore::LegacyInlineBox **)v8, this);
          *((_QWORD *)&v49 + 1) = v31;
          v16 = v8;
          goto LABEL_36;
        }
LABEL_18:
        if ((*(_BYTE *)(v8 + 52) & 7) == 4 && (*(_BYTE *)(v8 + 53) & 1) == 0)
        {
          ++*(_DWORD *)(v8 + 16);
          *(_QWORD *)&v49 = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect((WebCore::SVGBoundingBoxComputation *)v8, this, a4);
          *((_QWORD *)&v49 + 1) = v32;
          v33 = *(_DWORD *)(v8 + 16);
          if (!v33)
          {
            __break(0xC471u);
            JUMPOUT(0x1963EC7FCLL);
          }
          *(_DWORD *)(v8 + 16) = v33 - 1;
        }
        else
        {
          if (*(_BYTE *)(v8 + 46) != 39)
          {
            if ((v15 & 4) == 0)
              v8 = 0;
            v17 = *(_QWORD *)(v8 + 88);
            v18 = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 48);
            if (*(_QWORD *)(v18 + 8))
            {
              while (!*(_QWORD *)(v18 + 16))
              {
                v18 = *(_QWORD *)(v18 + 8);
                if (!v18)
                  goto LABEL_28;
              }
            }
            else
            {
              if (*(_QWORD *)(v18 + 16))
                v19 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
              else
                v19 = 0;
              if (!v19)
              {
LABEL_28:
                if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 216) + 8))
                  v20 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
                else
                  v20 = 0;
                if (!v20)
                {
                  v21 = *(_QWORD *)(v8 + 192);
                  if (v21)
                  {
                    v22 = *(_QWORD *)(v21 + 20);
                    v23 = (uint64_t *)(v21 + 28);
                  }
                  else
                  {
                    v22 = 0;
                    v23 = (uint64_t *)(v8 + 160);
                  }
                  v24 = *v23;
                  *(_QWORD *)&v49 = v22;
                  *((_QWORD *)&v49 + 1) = v24;
                  goto LABEL_35;
                }
              }
            }
            v48[0] = 0;
            *(_QWORD *)&v49 = WebCore::RenderBox::maskClipRect((WebCore::RenderBox *)v8, (const WebCore::LayoutPoint *)v48);
            *((_QWORD *)&v49 + 1) = v42;
            WebCore::RenderBox::flipForWritingMode(v8, (WebCore::LayoutRect *)&v49);
            goto LABEL_35;
          }
          v43 = v16;
          ++*(_DWORD *)(v8 + 16);
          Cell = WebCore::RenderTableRow::firstCell((WebCore::RenderTableRow *)v8);
          if (Cell)
          {
            v35 = (WebCore::RenderTableCell *)Cell;
            do
            {
              v36 = *((_QWORD *)v35 + 20);
              v48[0] = 0;
              v48[1] = v36;
              WebCore::LayoutRect::unite((WebCore::LayoutRect *)&v49, (const WebCore::LayoutRect *)v48);
              v37 = *(_QWORD *)(v8 + 192);
              if (v37)
              {
                v41 = *(_QWORD *)(v37 + 20);
                v38 = *(_QWORD *)(v37 + 28);
                v46 = v41;
                v47 = v38;
                if (v41)
                {
LABEL_61:
                  WebCore::LayoutRect::unite((WebCore::LayoutRect *)&v49, (const WebCore::LayoutRect *)&v46);
                  goto LABEL_62;
                }
              }
              else
              {
                v38 = *(_QWORD *)(v8 + 160);
                v46 = 0;
                v47 = v38;
              }
              if (v36 != v38)
                goto LABEL_61;
LABEL_62:
              v35 = (WebCore::RenderTableCell *)WebCore::RenderTableCell::nextCell(v35);
            }
            while (v35);
          }
          v39 = *(_DWORD *)(v8 + 16);
          if (!v39)
          {
            __break(0xC471u);
            JUMPOUT(0x1963EC81CLL);
          }
          *(_DWORD *)(v8 + 16) = v39 - 1;
          v16 = v43;
        }
LABEL_35:
        if ((v15 & 0x20) == 0)
        {
LABEL_38:
          v45 = v49;
          v26 = *(WebCore::RenderObject **)(a1 + 32);
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v26 + 3) + 8) + 40)
                                                            + 8)
                                                + 1944)
                                    + 248)
                        + 1383))
          {
            if ((*((_BYTE *)v26 + 45) & 4) == 0)
              v26 = WebCore::RenderObject::containingBlock(v26);
            WebCore::RenderBox::flipForWritingMode((uint64_t)v26, (WebCore::LayoutRect *)&v45);
          }
          v27 = a6[1];
          v28 = v45 + *a6;
          if (__OFADD__((_DWORD)v45, *a6))
            v28 = (v45 >> 31) + 0x7FFFFFFF;
          v29 = __OFADD__(DWORD1(v45), v27);
          v30 = DWORD1(v45) + v27;
          if (v29)
            v30 = (DWORD1(v45) >> 31) + 0x7FFFFFFF;
          *(_QWORD *)&v45 = __PAIR64__(v30, v28);
          v44 = v45;
          return WebCore::LayoutRect::intersects((WebCore::LayoutRect *)&v44, a3);
        }
LABEL_36:
        v25 = *(_DWORD *)(v16 + 16);
        if (!v25)
        {
          __break(0xC471u);
          JUMPOUT(0x1963EC6A8);
        }
        *(_DWORD *)(v16 + 16) = v25 - 1;
        goto LABEL_38;
      }
    }
    else
    {
      if (WebCore::LayoutRect::intersects(this, a3))
        return 1;
      if (!*((_BYTE *)a7 + 16))
      {
        v16 = 0;
        v49 = 0uLL;
        goto LABEL_18;
      }
    }
    return WebCore::LayoutRect::intersects(a7, a3);
  }
  return result;
}

uint64_t WebCore::RenderLayer::paintForegroundForFragmentsWithPhase(uint64_t result, int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  _BOOL4 v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  __int128 v40;
  __int16 v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;

  v9 = a4 > 1 && *(_BYTE *)(a6 + 53) != 0;
  if (a4)
  {
    v15 = result;
    v16 = 104 * a4;
    for (i = a3 + 60; !*(_BYTE *)(i - 60) || *(int *)(i + 8) < 1 || *(int *)(i + 12) < 1; i += 104)
    {
LABEL_34:
      v16 -= 104;
      if (!v16)
        return result;
    }
    v53 = a5;
    v54 = 0;
    v18 = *(_QWORD *)(a6 + 56);
    v51 = v18;
    if (v18)
      ++*(_DWORD *)(v18 + 8);
    v52 = 0;
    if (v9)
      WebCore::RenderLayer::clipToRect(v15, a5, &v53, (uint64_t)&v51, a6, a7, i, 0);
    v19 = *(_QWORD *)(*(_QWORD *)a6 + 32);
    v20 = *(_BYTE *)(a6 + 52);
    v40 = *(_OWORD *)i;
    v41 = a2;
    v42 = a7;
    v44 = 0;
    v45 = 0;
    v43 = a8;
    v46 = v19;
    v47 = v20;
    v48 = v15;
    v49 = 0;
    v50 = a5;
    if (a2 == 8)
      v45 = *(_QWORD *)(a6 + 40);
    v21 = *(_QWORD *)(v15 + 32);
    v23 = *(_DWORD *)(i - 36);
    v22 = *(_DWORD *)(i - 32);
    if (v21 && (*(_BYTE *)(v21 + 45) & 4) != 0)
      goto LABEL_20;
    v25 = 0;
    if ((*(_BYTE *)(v21 + 52) & 7) != 4)
    {
      LODWORD(v24) = 0;
      goto LABEL_21;
    }
    LODWORD(v24) = 0;
    if ((*(_BYTE *)(v21 + 53) & 1) == 0)
    {
LABEL_20:
      v24 = *(_QWORD *)(v21 + 152);
      v25 = v24 & 0xFFFFFFFF00000000;
    }
LABEL_21:
    v26 = HIDWORD(v25);
    v27 = __OFSUB__(v23, (_DWORD)v24);
    v28 = v23 - v24;
    v29 = (v23 >> 31) + 0x7FFFFFFF;
    if (v27)
      v28 = v29;
    v30 = v22 - v26;
    if (__OFSUB__(v22, (_DWORD)v26))
      v30 = (v22 >> 31) + 0x7FFFFFFF;
    v31 = *(_DWORD *)(a6 + 32);
    v32 = *(_DWORD *)(a6 + 36);
    v27 = __OFADD__(v28, v31);
    LODWORD(v33) = v28 + v31;
    v34 = (v28 >> 31) + 0x7FFFFFFF;
    if (v27)
      v33 = v34;
    else
      v33 = v33;
    v35 = v30 + v32;
    if (__OFADD__(v30, v32))
      v35 = (v30 >> 31) + 0x7FFFFFFF;
    v39 = v33 | (v35 << 32);
    result = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v21 + 680))(v21, &v40, &v39);
    v36 = v51;
    if (v51)
    {
      if (v52)
      {
        v38 = *(_DWORD *)(v51 + 44);
        if (v38)
          *(_DWORD *)(v51 + 44) = v38 - 1;
      }
      v37 = *(_DWORD *)(v36 + 8);
      if (!v37)
      {
        __break(0xC471u);
        JUMPOUT(0x1963ECA70);
      }
      *(_DWORD *)(v36 + 8) = v37 - 1;
    }
    if (v54)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 104))(v53, 1);
    goto LABEL_34;
  }
  return result;
}

BOOL WebCore::RenderLayer::hitTest(uint64_t a1, _BYTE *a2, WebCore::HitTestingTransformState *a3)
{
  return WebCore::RenderLayer::hitTest(a1, a2, a3, (uint64_t)a3);
}

BOOL WebCore::RenderLayer::hitTest(uint64_t a1, _BYTE *a2, WebCore::HitTestingTransformState *a3, uint64_t a4)
{
  int32x4_t v8;
  uint64_t v9;
  int32x4_t v10;
  int8x16_t v11;
  int32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  signed int v26;
  uint64_t v27;
  signed int v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  signed int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  float v60;
  unsigned int v61;
  int v62;
  int v63;
  unsigned int v64;
  int v65;
  int8x16_t v66;
  _QWORD v67[2];
  int8x16_t v68;

  v8.i64[0] = WebCore::RenderView::documentRect(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8)
                                                                                                + 40)
                                                                                    + 8)
                                                                        + 1944));
  v8.i64[1] = v9;
  v10.i64[0] = 0xFE000000FE000000;
  v10.i64[1] = 0xFE000000FE000000;
  v11 = (int8x16_t)vcgtq_s32(v8, v10);
  v12.i64[0] = 0xFE000000FE000000;
  v12.i64[1] = 0xFE000000FE000000;
  v13.i64[0] = 0x8000000080000000;
  v13.i64[1] = 0x8000000080000000;
  v14 = vorrq_s8((int8x16_t)(*(_OWORD *)&v11 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v12, v8), v13, (int8x16_t)vshlq_n_s32(v8, 6uLL)), v11));
  v68 = v14;
  if ((*a2 & 0x20) == 0)
  {
    v66 = v14;
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8) + 40) + 8);
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 528) + 8) + 24) + 8) + 112);
    v17 = *(_QWORD *)(*(_QWORD *)(v15 + 1944) + 248);
    if (~*(_QWORD *)(v16 + 664) & 0x20000000000000 | ~(unsigned __int16)*(_DWORD *)(v16 + 704) & 0x1000)
    {
      v18 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v17 + 64) + 832))(v17 + 64, 0, 1);
      if ((int)v18 >= -33554432)
        v21 = (_DWORD)v18 << 6;
      else
        v21 = 0x80000000;
      if ((int)v18 > 0x1FFFFFF)
        v21 = 0x7FFFFFFF;
      v22 = HIDWORD(v18) << 6;
      if (SHIDWORD(v18) < -33554432)
        v22 = 0x80000000;
      if (SHIDWORD(v18) > 0x1FFFFFF)
        v22 = 0x7FFFFFFF;
      v23 = v19 << 6;
      if (v19 < -33554432)
        v23 = 0x80000000;
      if (v19 > 0x1FFFFFF)
        v23 = 0x7FFFFFFF;
      if (v20 >= -33554432)
        v24 = v20 << 6;
      else
        v24 = 0x80000000;
      if (v20 <= 0x1FFFFFF)
        v25 = v24;
      else
        v25 = 0x7FFFFFFF;
      if (v66.i32[0] <= v21)
        v26 = v21;
      else
        v26 = v66.i32[0];
      if (v66.i32[1] <= (int)v22)
        v27 = v22;
      else
        v27 = v66.u32[1];
      v28 = ((unsigned __int32)v66.i32[0] >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(v66.i32[0], v66.i32[2]))
        v28 = v66.i32[0] + v66.i32[2];
      v29 = __OFADD__(v21, v23);
      v30 = v21 + v23;
      v31 = (v21 >> 31) + 0x7FFFFFFF;
      if (!v29)
        v31 = v30;
      if (v31 < v28)
        v28 = v31;
      v32 = v66.i32[1] + v66.i32[3];
      if (__OFADD__(v66.i32[1], v66.i32[3]))
        v32 = ((unsigned __int32)v66.i32[1] >> 31) + 0x7FFFFFFF;
      v29 = __OFADD__(v22, v25);
      v33 = v22 + v25;
      v34 = (v22 >> 31) + 0x7FFFFFFF;
      if (v29)
        v33 = v34;
      if (v33 < v32)
        v32 = v33;
      v35 = v26 < v28 && (int)v27 < v32;
      if (!v35)
      {
        v28 = 0;
        v32 = 0;
        v26 = 0;
        v27 = 0;
      }
      v36 = v26 | (unint64_t)(v27 << 32);
      v29 = __OFSUB__(v28, v26);
      LODWORD(v37) = v28 - v26;
      v38 = (v28 >> 31) + 0x7FFFFFFF;
      if (v29)
        v37 = v38;
      else
        v37 = v37;
      v29 = __OFSUB__(v32, (_DWORD)v27);
      v39 = v32 - v27;
      LODWORD(v40) = (v32 >> 31) + 0x7FFFFFFF;
      if (v29)
        v40 = v40;
      else
        v40 = v39;
      v68.i64[0] = v36;
      v68.i64[1] = v37 | (v40 << 32);
    }
    else
    {
      v67[0] = WebCore::LocalFrameView::layoutViewportRect((WebCore::LocalFrameView *)v17);
      v67[1] = v59;
      v60 = WebCore::LocalFrame::frameScaleFactor(*(WebCore::LocalFrame **)(v17 + 328));
      if (v60 > 1.0)
        WebCore::LayoutRect::scale((int *)v67, v60);
      WebCore::LayoutRect::intersect(v68.i32, (const WebCore::LayoutRect *)v67);
    }
  }
  v41 = WebCore::RenderLayer::hitTestLayer(a1, (WebCore::FloatQuad *)a1, 0, a2, a4, (WebCore::HitTestLocation *)&v68, a3, 0, 0, 0);
  if (!v41 && (*(_DWORD *)a2 & 0x2000) == 0 && (*(_DWORD *)a2 & 0xA) != 0)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      v50 = *(_QWORD *)(a1 + 32);
      if (*(_BYTE *)(v50 + 46) != 49)
      {
        __break(0xC471u);
        JUMPOUT(0x1963ECF20);
      }
      v51 = (unsigned __int16)*(_DWORD *)(v50 + 124) >> 13;
      v35 = v51 > 5;
      v52 = (1 << v51) & 0x2A;
      if (v35 || v52 == 0)
      {
        v54 = *(_DWORD *)a3;
        v55 = *((_DWORD *)a3 + 1);
      }
      else if ((*(_BYTE *)(v50 + 21) & 0x10) != 0)
      {
        v64 = *(_DWORD *)(v50 + 160);
        v55 = *((_DWORD *)a3 + 1);
        v29 = __OFSUB__(v64, *(_DWORD *)a3);
        v65 = v64 - *(_DWORD *)a3;
        v54 = (v64 >> 31) + 0x7FFFFFFF;
        if (!v29)
          v54 = v65;
      }
      else
      {
        v61 = *(_DWORD *)(v50 + 164);
        v54 = *(_DWORD *)a3;
        v62 = *((_DWORD *)a3 + 1);
        v29 = __OFSUB__(v61, v62);
        v63 = v61 - v62;
        v55 = (v61 >> 31) + 0x7FFFFFFF;
        if (!v29)
          v55 = v63;
      }
      LODWORD(v67[0]) = v54;
      HIDWORD(v67[0]) = v55;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v50 + 328))(v50, a4, v67);
      v41 = a1;
    }
    else
    {
      v41 = 0;
    }
  }
  v42 = *(_QWORD *)(a4 + 72);
  if (!v42 || *(_QWORD *)(a4 + 104))
    return v41 != 0;
  while (1)
  {
    v43 = *(_WORD *)(v42 + 28);
    if ((v43 & 8) != 0
      && (*(_WORD *)(v42 + 30) & 1) != 0
      && ((v43 & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v42 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24)))
    {
      *(_DWORD *)(v42 + 24) += 2;
      goto LABEL_86;
    }
    v45 = (uint64_t *)(v42 + 32);
    v44 = *(_QWORD *)(v42 + 32);
    if (v44)
    {
      if ((*(_WORD *)(v44 + 28) & 8) != 0)
      {
        v46 = *(_QWORD *)(v44 + 72) & 0xFFFFFFFFFFFFLL;
        if (v46)
        {
          v48 = *(_QWORD *)(v46 + 88);
          if (v48)
          {
            v49 = *(_QWORD *)(v48 + 224);
            if (v49)
            {
              v47 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, v42);
              if (v47)
                goto LABEL_64;
              v43 = *(_WORD *)(v42 + 28);
            }
          }
        }
      }
    }
    if ((v43 & 0x80) != 0)
      break;
LABEL_63:
    v47 = *v45;
LABEL_64:
    v42 = v47;
    if (!v47)
      goto LABEL_86;
  }
  v56 = *(_QWORD *)(v42 + 200);
  if (v56)
  {
    v45 = (uint64_t *)(v56 + 8);
    goto LABEL_63;
  }
  v42 = 0;
LABEL_86:
  v57 = *(_QWORD *)(a4 + 104);
  *(_QWORD *)(a4 + 104) = v42;
  if (v57)
  {
    if (*(_DWORD *)(v57 + 24) == 2)
    {
      if ((*(_WORD *)(v57 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v57);
    }
    else
    {
      *(_DWORD *)(v57 + 24) -= 2;
    }
  }
  return v41 != 0;
}

uint64_t WebCore::RenderLayer::hitTestLayer(uint64_t a1, WebCore::FloatQuad *a2, WebCore::LayoutRect *a3, _BYTE *a4, uint64_t a5, WebCore::HitTestLocation *a6, WebCore::HitTestingTransformState *a7, int a8, WebCore::LayoutSize *a9, uint64_t a10)
{
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  double *v25;
  uint64_t v26;
  double (*v27)[4][4];
  int v28;
  double v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  __int128 v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 *v47;
  __int128 *v48;
  WebCore::HitTestingTransformState *v49;
  WebCore::Node *v50;
  uint64_t v51;
  __int128 v52;
  unsigned int v53;
  const WebCore::LayoutRect *v54;
  char v55;
  uint64_t v56;
  WTF *v57;
  unsigned int v58;
  unsigned int v59;
  int *v60;
  int v61;
  BOOL v62;
  int v64;
  int v65;
  int v66;
  BOOL v67;
  int v68;
  int v69;
  int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unsigned int v79;
  unsigned int v80;
  unint64_t v81;
  unsigned int v82;
  unsigned int v83;
  _BYTE *v84;
  WebCore::HitTestingTransformState *v85;
  WebCore::RenderLayerScrollableArea *v86;
  unsigned __int8 v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  WebCore::RenderLayer *v91;
  WebCore::RenderLayer *v92;
  WTF *v93;
  WebCore::Node *v94;
  uint64_t v95;
  __int128 v96;
  WebCore::FloatQuad *v97;
  void *v98;
  uint64_t v99;
  double v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  WebCore::RenderLayer *v105;
  WebCore::RenderLayer *v106;
  WTF *v107;
  WebCore::Node *v108;
  __int128 v109;
  __int128 *v110;
  WTF *v111;
  void *v112;
  uint64_t v113;
  double v114;
  double v115;
  uint64_t v116;
  WTF *v117;
  uint64_t v118;
  int v119;
  char *v120;
  WebCore::HitTestingTransformState *v121;
  __int128 v122;
  uint64_t v123;
  uint64_t i;
  uint64_t v125;
  WebCore::ViewTransition *v126;
  uint64_t v127;
  double (*v128)[4][4];
  int v129;
  float v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  WTF *v134;
  WTF *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  WTF *v139;
  uint64_t v140;
  __int128 v141;
  double v142;
  uint64_t v143;
  uint64_t v144;
  WebCore::HitTestingTransformState *v145;
  WebCore::Node *v146;
  uint64_t v147;
  __int128 v148;
  unint64_t v149;
  const WebCore::LayoutRect *v150;
  char v151;
  WebCore::HitTestLocation *v152;
  char *v153;
  unint64_t v154;
  WTF *v155;
  unsigned int v156;
  unsigned int v157;
  int *v158;
  int v159;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  unsigned int v168;
  int v169;
  int v170;
  int v171;
  uint64_t v172;
  WebCore::HitTestLocation *v173;
  uint64_t v174;
  unint64_t v175;
  unsigned int v176;
  unsigned int v177;
  unint64_t v178;
  unsigned int v179;
  unsigned int v180;
  WTF *v181;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  WebCore::Node *v186;
  __int128 v187;
  WTF *v188;
  uint64_t *v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  WTF *v194;
  uint64_t v195;
  int v196;
  int v197;
  unsigned int v198;
  unsigned int v199;
  uint64_t v200;
  int v201;
  int v202;
  unsigned int v203;
  unsigned int v204;
  uint64_t v205;
  char v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  WTF *v210;
  double *v211;
  uint64_t v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  double (*v221)[4][4];
  uint64_t v222;
  double (*v223)[4][4];
  WTF *v224;
  double *v225;
  uint64_t v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  double (*v235)[4][4];
  uint64_t v236;
  double (*v237)[4][4];
  uint64_t v238;
  unsigned int v239;
  unsigned int v240;
  unint64_t v241;
  int v242;
  int v243;
  double v244;
  WebCore::RenderLayer *v245;
  WebCore::RenderLayer *v246;
  WTF *v247;
  WTF *v248;
  double *v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  double (*v258)[4][4];
  uint64_t v259;
  double (*v260)[4][4];
  WebCore::Node *v261;
  __int128 v262;
  WTF *v263;
  uint64_t *v264;
  _BYTE *v265;
  double v266;
  unint64_t *v267;
  uint64_t v268;
  char v269;
  WebCore::Node *v270;
  WebCore::Node *v271;
  int v272;
  float v273;
  int v274;
  float v275;
  int v276;
  float v277;
  BOOL v278;
  int v279;
  unsigned int v280;
  unsigned int v281;
  _BOOL4 v282;
  BOOL v283;
  int v284;
  unsigned int v285;
  unsigned int v286;
  _BOOL4 v287;
  char v288;
  WebCore::Node *v289;
  uint64_t v290;
  void *v291;
  void *v292;
  _OWORD *v295;
  __int128 *v296;
  double *v297;
  WTF *v298;
  uint64_t *v299;
  WTF *v300;
  WTF *v301;
  __int128 *v302;
  WebCore::FloatQuad *v303;
  __int128 *v304;
  WTF *v305;
  uint64_t v306;
  unint64_t *v307;
  WebCore::FloatQuad *v308;
  uint64_t v309;
  WTF *v310;
  WebCore::HitTestLocation *v311;
  _BYTE *v312;
  WebCore::HitTestingTransformState *v313;
  WTF *v314;
  uint64_t v315;
  _BYTE v316[104];
  WebCore::Node *v317;
  __int128 v318;
  uint64_t v319;
  __int128 v320;
  __int128 v321;
  __int16 v322;
  uint64_t v323;
  uint64_t v324;
  WebCore::Node *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  char v329;
  uint64_t v330;
  unint64_t v331;
  unint64_t v332;
  float32x2_t v333;
  _BYTE v334[24];
  uint64_t v335;
  __int128 v336;
  __int128 v337;
  __int16 v338;
  uint64_t v339;
  double v340;
  WebCore::Node *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char v345;
  uint64_t v346;

  v313 = a7;
  v311 = a6;
  WebCore::RenderLayer::updateDescendantDependentFlags((WebCore::RenderLayer *)a1);
  v17 = *(_QWORD *)(a1 + 24);
  if ((v17 & 0x80) != 0)
  {
    if ((v17 & 0x4A) != 0)
    {
      WebCore::RenderLayer::rebuildZOrderLists((WebCore::RenderLayer *)a1, v16);
      v17 = *(_QWORD *)(a1 + 24);
    }
    else
    {
      WebCore::RenderLayer::clearZOrderLists(a1, v16);
      v17 = *(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFF7FLL;
      *(_QWORD *)(a1 + 24) = v17;
    }
  }
  if ((v17 & 0x100) != 0)
  {
    for (i = *(_QWORD *)(a1 + 64); ; i = *(_QWORD *)(i + 56))
    {
      *(_QWORD *)v334 = i;
      if (!i)
        break;
      if ((*(_BYTE *)(i + 24) & 4) != 0)
      {
        v131 = *(_QWORD *)(a1 + 208);
        if (!v131 || *(_QWORD *)(v131 + 144) != i)
        {
          v132 = *(_QWORD *)(a1 + 104);
          if (!v132)
          {
            v133 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v133 = 0;
            v133[1] = 0;
            v134 = *(WTF **)(a1 + 104);
            *(_QWORD *)(a1 + 104) = v133;
            if (v134)
            {
              v135 = *(WTF **)v134;
              if (*(_QWORD *)v134)
              {
                *(_QWORD *)v134 = 0;
                *((_DWORD *)v134 + 2) = 0;
                WTF::fastFree(v135, v16);
              }
              WTF::fastFree(v134, v16);
              v132 = *(_QWORD *)(a1 + 104);
            }
            else
            {
              v132 = (uint64_t)v133;
            }
          }
          v136 = *(unsigned int *)(v132 + 12);
          if ((_DWORD)v136 == *(_DWORD *)(v132 + 8))
          {
            v137 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v132, v136 + 1, (unint64_t)v334);
            v136 = *(unsigned int *)(v132 + 12);
            *(_QWORD *)(*(_QWORD *)v132 + 8 * v136) = *v137;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v132 + 8 * v136) = *(_QWORD *)v334;
          }
          *(_DWORD *)(v132 + 12) = v136 + 1;
          i = *(_QWORD *)v334;
          *(_QWORD *)(*(_QWORD *)v334 + 24) &= ~0x20000000000000uLL;
        }
      }
    }
    v125 = *(_QWORD *)(a1 + 104);
    if (v125)
    {
      v138 = *(unsigned int *)(v125 + 12);
      if (*(_DWORD *)(v125 + 8) > v138)
      {
        v139 = *(WTF **)v125;
        if ((_DWORD)v138)
        {
          *(_DWORD *)(v125 + 8) = v138;
          *(_QWORD *)v125 = WTF::fastRealloc(v139, (void *)(8 * v138));
        }
        else if (v139)
        {
          *(_QWORD *)v125 = 0;
          *(_DWORD *)(v125 + 8) = 0;
          WTF::fastFree(v139, v16);
        }
      }
    }
    v17 = *(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFEFFLL;
    *(_QWORD *)(a1 + 24) = v17;
  }
  v18 = *(_QWORD *)(a1 + 208);
  if (v18)
  {
    v290 = *(_QWORD *)(v18 + 144);
    if (v290)
    {
      WebCore::RenderLayer::updateZOrderLists(*(WebCore::RenderLayer **)(v18 + 144), v16);
      WebCore::RenderLayer::updateNormalFlowList(v290, v291);
      v17 = *(_QWORD *)(a1 + 24);
    }
  }
  if ((v17 & 0x1800) == 0)
    return 0;
  v19 = *(_QWORD *)(a1 + 32);
  v20 = *(_QWORD *)(*(_QWORD *)(v19 + 24) + 8);
  v21 = *(_QWORD *)(*(_QWORD *)(v20 + 40) + 8);
  if (*(_QWORD *)(v21 + 1272) != v20)
  {
    if (*(_BYTE *)(v19 + 46) == 49)
    {
      v126 = *(WebCore::ViewTransition **)(v21 + 2112);
      if (v126 && (WebCore::ViewTransition::documentElementIsCaptured(v126) & 1) != 0)
        return 0;
    }
    else if ((*(_BYTE *)(v19 + 22) & 0x40) != 0)
    {
      return 0;
    }
  }
  if ((*a4 & 0x40) == 0)
  {
    v22 = *(_QWORD *)(a1 + 224);
    if (v22)
    {
      v268 = *(_QWORD *)(v22 + 8);
      if (v268)
      {
        if ((*(_BYTE *)(v268 + 52) & 7) == 4)
        {
          v269 = *(_BYTE *)(v268 + 53);
          if ((v269 & 1) == 0 && (v269 & 8) != 0)
            return 0;
        }
      }
    }
    v23 = *(unsigned __int8 **)(a1 + 32);
    v24 = v23[46];
    if (v24 == 69)
      return 0;
    if ((v23[52] & 7) == 4)
    {
      v87 = v23[53];
      if ((v87 & 1) == 0 && (v87 & 8) != 0)
        return 0;
    }
    if (v24 == 77)
      return 0;
  }
  v25 = (double *)a9;
  v26 = *(_QWORD *)(a1 + 200);
  v312 = a4;
  if (v26 && (a8 & 1) == 0)
  {
    v116 = *(_QWORD *)(a1 + 216);
    if (v116 && *(_QWORD *)(v116 + 8))
    {
      WebCore::RenderLayer::hitTestTransformedLayerInFragments((WebCore::RenderLayer *)a1, a2, a3, (uint64_t)a4, a5, v311, (uint64_t)v313, a9, a10);
      return v123;
    }
    if (!*(_QWORD *)(a1 + 40))
      goto LABEL_151;
    v317 = a2;
    LODWORD(v318) = 1;
    BYTE4(v318) = 3;
    WebCore::RenderLayer::parentClipRects((WTF *)&v314, a1, (uint64_t)&v317);
    v117 = v314;
    v118 = *(_QWORD *)(a1 + 32);
    v119 = (*(_DWORD *)(v118 + 96) >> 19) & 7;
    if (v119 == 2)
    {
      v120 = (char *)v314 + 48;
      v121 = v313;
    }
    else
    {
      v121 = v313;
      if (v119 == 6)
        v120 = (char *)v314 + 28;
      else
        v120 = (char *)v314 + 8;
    }
    v122 = *(_OWORD *)v120;
    *(_DWORD *)&v334[16] = *((_DWORD *)v120 + 4);
    *(_OWORD *)v334 = v122;
    if (*((_BYTE *)v314 + 4))
    {
      v238 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v118 + 24) + 8) + 40) + 8) + 1944);
      if (*((_QWORD *)a2 + 4) == v238)
      {
        v239 = *(_DWORD *)v334;
        v240 = *(_DWORD *)&v334[4];
        if (*(_QWORD *)v334 != 0xC0000010C0000010 || *(_QWORD *)&v334[8] != 0x7FFFFFDF7FFFFFDFLL)
        {
          v241 = WebCore::LocalFrameView::scrollPositionForFixedPosition(*(int32x2_t **)(v238 + 248));
          v242 = v239 + v241;
          if (__OFADD__(v239, (_DWORD)v241))
            v242 = (v239 >> 31) + 0x7FFFFFFF;
          *(_DWORD *)v334 = v242;
          v243 = v240 + HIDWORD(v241);
          if (__OFADD__(v240, HIDWORD(v241)))
            v243 = (v240 >> 31) + 0x7FFFFFFF;
          *(_DWORD *)&v334[4] = v243;
          v121 = v313;
        }
      }
    }
    if (*(_DWORD *)v117 == 1)
    {
      WTF::fastFree(v117, v121);
      v121 = v313;
    }
    else
    {
      --*(_DWORD *)v117;
    }
    a4 = v312;
    if (WebCore::ClipRect::intersects((int *)v334, (uint64_t)v121))
    {
LABEL_151:
      *(_QWORD *)v334 = 0;
      return WebCore::RenderLayer::hitTestLayerByApplyingTransform((WebCore::RenderLayer *)a1, a2, a3, (uint64_t)a4, a5, (int32x2_t *)v311, v313, a9, a10, v334);
    }
    return 0;
  }
  WebCore::RenderLayer::update3DTransformedDescendantStatus((WebCore::RenderLayer *)a1, v16);
  if (a8)
  {
    if (!a9)
    {
LABEL_338:
      v28 = 0;
      goto LABEL_20;
    }
    ++*(_DWORD *)a9;
  }
  else
  {
    if (!a9
      && (*(_BYTE *)(a1 + 27) & 2) == 0
      && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 88) + 40) + 636) & 0x380) != 0x80)
    {
      v28 = 0;
      v25 = 0;
      goto LABEL_20;
    }
    v317 = 0;
    WebCore::RenderLayer::createLocalTransformState((WebCore::RenderLayer *)v334, (WebCore::RenderLayer *)a1, a2, a3, (int32x2_t *)v311, v313, a9, &v317);
    v25 = *(double **)v334;
    if (!*(_QWORD *)v334)
      goto LABEL_338;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 88) + 40) + 636) & 0x400) != 0)
  {
    WebCore::TransformationMatrix::inverse(v25 + 10, v27, (uint64_t)v334);
    v28 = 1;
    if ((_BYTE)v346 && v340 < 0.0)
    {
      v309 = 0;
      goto LABEL_264;
    }
    a4 = v312;
  }
  else
  {
    v28 = 1;
  }
LABEL_20:
  v332 = 0xFFF0000000000000;
  v306 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 88) + 40) + 636) & 0x380;
  if (v306 == 128)
  {
    v267 = &v332;
    if (a10)
      v267 = (unint64_t *)a10;
    v307 = v267;
  }
  else
  {
    v307 = 0;
  }
  v29 = 0.0;
  if (v28 && !WebCore::TransformationMatrix::isAffine((WebCore::TransformationMatrix *)(v25 + 10)))
  {
    *(_DWORD *)v334 = WebCore::HitTestingTransformState::mappedPoint((WebCore::HitTestingTransformState *)v25, v127, v128).u32[0];
    *(_DWORD *)&v334[4] = v129;
    *(_DWORD *)&v334[8] = 0;
    WebCore::TransformationMatrix::mapPoint(v25 + 10, (float *)v334);
    v29 = v130;
  }
  v31 = WebCore::RenderLayer::offsetFromAncestor(a1, (uint64_t)a2, 0);
  v331 = v31;
  v32 = *(_QWORD *)(a1 + 32);
  v310 = (WTF *)v25;
  if (!v32 || (*(_BYTE *)(v32 + 45) & 4) == 0)
    goto LABEL_30;
  v33 = HIDWORD(v31);
  v35 = *(_DWORD *)(v32 + 152);
  v34 = *(_DWORD *)(v32 + 156);
  v36 = v31 - v35;
  if (__OFSUB__((_DWORD)v31, v35))
    v36 = (v31 >> 31) + 0x7FFFFFFF;
  v37 = HIDWORD(v31) - v34;
  if (__OFSUB__((_DWORD)v33, v34))
    v37 = (v33 >> 31) + 0x7FFFFFFF;
  v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 88) + 40) + 264);
  if (!v38)
    goto LABEL_30;
  v67 = __OFADD__(v36, v35);
  v196 = v36 + v35;
  if (v67)
    v196 = (v36 >> 31) + 0x7FFFFFFF;
  v67 = __OFADD__(v37, v34);
  v197 = v37 + v34;
  if (v67)
    v197 = (v37 >> 31) + 0x7FFFFFFF;
  v198 = *(_DWORD *)v313 - v196;
  if (__OFSUB__(*(_DWORD *)v313, v196))
    v198 = (*(_DWORD *)v313 >> 31) + 0x7FFFFFFF;
  v199 = *((_DWORD *)v313 + 1);
  v67 = __OFSUB__(v199, v197);
  v200 = v199 - v197;
  if (v67)
    v200 = (v199 >> 31) + 0x7FFFFFFF;
  v314 = (WTF *)(v198 | (unint64_t)(v200 << 32));
  *(_QWORD *)v334 = v32;
  *(_QWORD *)&v334[8] = &v314;
  v201 = *(_DWORD *)(v38 + 12);
  if (v201 != 1)
  {
    if (v201)
      goto LABEL_30;
    WebCore::TreeScope::getElementById((unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 24) + 8) + 40) + 8) + 96), (const WTF::AtomString *)(v38 + 32), (uint64_t *)&v317);
    v30 = (uint64_t)v317;
    if (v317)
    {
      if ((*((_QWORD *)v317 + 8) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((*((_QWORD *)v317 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1963EEB68);
        }
        if ((*((_WORD *)v317 + 14) & 0x20) != 0
          && *(_QWORD *)(*((_QWORD *)v317 + 12) + 24) == *(_QWORD *)(WebCore::SVGNames::clipPathTag + 24))
        {
          v288 = WebCore::RenderBox::hitTestClipPath(WebCore::HitTestLocation const&,WebCore::LayoutPoint const&)const::$_0::operator()((uint64_t *)v334, (uint64_t)v317);
          v289 = v317;
          v317 = 0;
          if (v289)
          {
            if (*((_DWORD *)v289 + 6) == 2)
            {
              if ((*((_WORD *)v289 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v289);
            }
            else
            {
              *((_DWORD *)v289 + 6) -= 2;
            }
          }
          a4 = v312;
          v25 = (double *)v310;
          if ((v288 & 1) == 0)
            goto LABEL_312;
          goto LABEL_30;
        }
      }
      v317 = 0;
      if (*(_DWORD *)(v30 + 24) == 2)
      {
        if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v30);
      }
      else
      {
        *(_DWORD *)(v30 + 24) -= 2;
      }
    }
    a4 = v312;
    goto LABEL_30;
  }
  LODWORD(v317) = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 752))(v32, *(unsigned __int8 *)(v38 + 16));
  HIDWORD(v317) = v202;
  *(_QWORD *)&v318 = __PAIR64__(v204, v203);
  v205 = (*(uint64_t (**)(_QWORD, WebCore::Node **))(**(_QWORD **)(v38 + 24) + 32))(*(_QWORD *)(v38 + 24), &v317);
  v333 = vmul_f32(vcvt_f32_s32((int32x2_t)v314), (float32x2_t)vdup_n_s32(0x3C800000u));
  v206 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v38 + 24) + 40))(*(_QWORD *)(v38 + 24));
  v207 = *(_DWORD *)(v205 + 64);
  if (v207 == 2)
  {
    v208 = *(_QWORD *)(v205 + 8);
    if (v208 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v208 + 200))(v208))
      goto LABEL_312;
  }
  else if (!v207)
  {
    goto LABEL_312;
  }
  v209 = WebCore::Path::ensurePlatformPathImpl((WebCore::Path *)v205);
  if (!WebCore::PathCG::contains(v209, (float *)&v333, v206))
  {
LABEL_312:
    v309 = 0;
    goto LABEL_263;
  }
LABEL_30:
  v39 = *(_QWORD *)(a1 + 88);
  v308 = a2;
  if (!v39 || (v88 = *(unsigned int *)(v39 + 12), !(_DWORD)v88) || (*(_BYTE *)(a1 + 25) & 0x10) == 0)
  {
LABEL_31:
    v309 = 0;
    v40 = -INFINITY;
    goto LABEL_32;
  }
  v309 = 0;
  v89 = *(_QWORD *)v39 + 8 * v88;
  v304 = (__int128 *)(a5 + 8);
  v305 = (WTF *)&v334[8];
  v303 = (WebCore::FloatQuad *)&v336;
  v301 = 0;
  v302 = (__int128 *)(a5 + 32);
  v90 = 0.0;
  v40 = -INFINITY;
  while (1)
  {
    v92 = *(WebCore::RenderLayer **)(v89 - 8);
    v89 -= 8;
    v91 = v92;
    if (v310)
    {
      if (WebCore::RenderLayer::participatesInPreserve3D(v91))
      {
        v93 = v310;
      }
      else
      {
        v93 = v301;
        if (!v301)
        {
          v210 = v310;
          v211 = (double *)((char *)v310 + 80);
          v212 = WTF::fastMalloc((WTF *)0xD8);
          *(_DWORD *)v212 = 1;
          *(_QWORD *)(v212 + 4) = *(_QWORD *)((char *)v210 + 4);
          v213 = *(_OWORD *)((char *)v210 + 12);
          *(_OWORD *)(v212 + 28) = *(_OWORD *)((char *)v210 + 28);
          *(_OWORD *)(v212 + 12) = v213;
          v214 = *(_OWORD *)((char *)v210 + 60);
          *(_OWORD *)(v212 + 44) = *(_OWORD *)((char *)v210 + 44);
          *(_OWORD *)(v212 + 60) = v214;
          v216 = *((_OWORD *)v210 + 7);
          v215 = *((_OWORD *)v210 + 8);
          v217 = *((_OWORD *)v210 + 6);
          *(_OWORD *)(v212 + 80) = *((_OWORD *)v210 + 5);
          *(_OWORD *)(v212 + 96) = v217;
          *(_OWORD *)(v212 + 112) = v216;
          *(_OWORD *)(v212 + 128) = v215;
          v218 = *((_OWORD *)v210 + 12);
          v220 = *((_OWORD *)v210 + 9);
          v219 = *((_OWORD *)v210 + 10);
          *(_OWORD *)(v212 + 176) = *((_OWORD *)v210 + 11);
          *(_OWORD *)(v212 + 192) = v218;
          *(_OWORD *)(v212 + 144) = v220;
          *(_OWORD *)(v212 + 160) = v219;
          *(_BYTE *)(v212 + 208) = *((_BYTE *)v210 + 208);
          WebCore::HitTestingTransformState::flattenWithTransform((WebCore::HitTestingTransformState *)v212, (const WebCore::TransformationMatrix *)(v212 + 80), v221);
          v90 = 0.0;
          v301 = (WTF *)v212;
          if (!WebCore::TransformationMatrix::isAffine((WebCore::TransformationMatrix *)v211))
          {
            *(_DWORD *)v334 = WebCore::HitTestingTransformState::mappedPoint(v310, v222, v223).u32[0];
            *(_DWORD *)&v334[4] = v272;
            *(_DWORD *)&v334[8] = 0;
            WebCore::TransformationMatrix::mapPoint(v211, (float *)v334);
            v90 = v273;
          }
          v93 = (WTF *)v212;
        }
      }
    }
    else
    {
      v93 = 0;
    }
    v94 = *(WebCore::Node **)a5;
    *(_OWORD *)v305 = *v304;
    v95 = *(_QWORD *)(a5 + 24);
    *(_QWORD *)v334 = v94;
    v335 = v95;
    v96 = v302[1];
    v97 = v303;
    *(_OWORD *)v303 = *v302;
    *((_OWORD *)v97 + 1) = v96;
    v338 = *(_WORD *)(a5 + 64);
    v339 = 0;
    v340 = 0.0;
    v341 = v94;
    v346 = 0;
    v343 = 0;
    v344 = 0;
    v345 = 0;
    v342 = 0;
    v99 = WebCore::RenderLayer::hitTestLayer(v91, v308, a1, v312, v334, v311, v313, 0, v93, v307);
    v100 = *(double *)&v98;
    if ((v312[1] & 0x80) != 0)
      WebCore::HitTestResult::append((_QWORD *)a5, (uint64_t)v334);
    if (!v99)
      goto LABEL_106;
    v101 = v301 == v93 ? v90 : v100;
    if (v306 == 128 && v101 <= v40)
      goto LABEL_106;
    a4 = v312;
    if ((v312[1] & 0x80) == 0)
      WebCore::HitTestResult::operator=(a5, (uint64_t)v334);
    if (v306 != 128)
      break;
    v309 = v99;
    v40 = v101;
LABEL_106:
    WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v334, v98);
    a4 = v312;
    if (v89 == *(_QWORD *)v39)
      goto LABEL_116;
  }
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v334, v98);
  v309 = v99;
  v40 = v101;
LABEL_116:
  v25 = (double *)v310;
  a2 = v308;
  if (v301)
  {
    if (*(_DWORD *)v301 == 1)
      WTF::fastFree(v301, (void *)v30);
    else
      --*(_DWORD *)v301;
  }
  if (!v309)
    goto LABEL_31;
  if (v306 != 128)
    goto LABEL_263;
  if (v40 <= -INFINITY)
  {
    v309 = 0;
    v40 = -INFINITY;
  }
  a4 = v312;
  a2 = v308;
LABEL_32:
  v41 = *(_QWORD *)(a5 + 24);
  v317 = *(WebCore::Node **)a5;
  v319 = v41;
  v322 = *(_WORD *)(a5 + 64);
  v318 = *(_OWORD *)(a5 + 8);
  v42 = *(_OWORD *)(a5 + 48);
  v320 = *(_OWORD *)(a5 + 32);
  v321 = v42;
  v323 = 0;
  v324 = 0;
  v330 = 0;
  v329 = 0;
  v325 = v317;
  v326 = 0;
  v327 = 0;
  v328 = 0;
  v43 = 0.0;
  v44 = *(_QWORD *)(a1 + 104);
  if (!v44 || (v102 = *(unsigned int *)(v44 + 12), !(_DWORD)v102) || (*(_BYTE *)(a1 + 25) & 0x10) == 0)
  {
    v45 = 0;
    goto LABEL_34;
  }
  v45 = 0;
  v304 = &v320;
  v305 = (WTF *)&v318;
  v103 = *(_QWORD *)v44 + 8 * v102;
  v302 = &v336;
  v303 = (WebCore::FloatQuad *)&v334[8];
  v43 = -INFINITY;
  v300 = 0;
  v301 = (WTF *)&v339;
  v104 = 0.0;
  while (2)
  {
    v106 = *(WebCore::RenderLayer **)(v103 - 8);
    v103 -= 8;
    v105 = v106;
    if (v310)
    {
      if (WebCore::RenderLayer::participatesInPreserve3D(v105))
      {
        v107 = v310;
      }
      else
      {
        v107 = v300;
        if (!v300)
        {
          v224 = v310;
          v225 = (double *)((char *)v310 + 80);
          v226 = WTF::fastMalloc((WTF *)0xD8);
          *(_DWORD *)v226 = 1;
          *(_QWORD *)(v226 + 4) = *(_QWORD *)((char *)v224 + 4);
          v227 = *(_OWORD *)((char *)v224 + 12);
          *(_OWORD *)(v226 + 28) = *(_OWORD *)((char *)v224 + 28);
          *(_OWORD *)(v226 + 12) = v227;
          v228 = *(_OWORD *)((char *)v224 + 60);
          *(_OWORD *)(v226 + 44) = *(_OWORD *)((char *)v224 + 44);
          *(_OWORD *)(v226 + 60) = v228;
          v230 = *((_OWORD *)v224 + 7);
          v229 = *((_OWORD *)v224 + 8);
          v231 = *((_OWORD *)v224 + 6);
          *(_OWORD *)(v226 + 80) = *((_OWORD *)v224 + 5);
          *(_OWORD *)(v226 + 96) = v231;
          *(_OWORD *)(v226 + 112) = v230;
          *(_OWORD *)(v226 + 128) = v229;
          v232 = *((_OWORD *)v224 + 12);
          v234 = *((_OWORD *)v224 + 9);
          v233 = *((_OWORD *)v224 + 10);
          *(_OWORD *)(v226 + 176) = *((_OWORD *)v224 + 11);
          *(_OWORD *)(v226 + 192) = v232;
          *(_OWORD *)(v226 + 144) = v234;
          *(_OWORD *)(v226 + 160) = v233;
          *(_BYTE *)(v226 + 208) = *((_BYTE *)v224 + 208);
          WebCore::HitTestingTransformState::flattenWithTransform((WebCore::HitTestingTransformState *)v226, (const WebCore::TransformationMatrix *)(v226 + 80), v235);
          v104 = 0.0;
          v300 = (WTF *)v226;
          if (!WebCore::TransformationMatrix::isAffine((WebCore::TransformationMatrix *)v225))
          {
            *(_DWORD *)v334 = WebCore::HitTestingTransformState::mappedPoint(v310, v236, v237).u32[0];
            *(_DWORD *)&v334[4] = v274;
            *(_DWORD *)&v334[8] = 0;
            WebCore::TransformationMatrix::mapPoint(v225, (float *)v334);
            v104 = v275;
          }
          v107 = (WTF *)v226;
        }
      }
    }
    else
    {
      v107 = 0;
    }
    *(_OWORD *)v303 = *(_OWORD *)v305;
    v108 = v317;
    *(_QWORD *)v334 = v317;
    v335 = v319;
    v109 = v304[1];
    v110 = v302;
    *v302 = *v304;
    v110[1] = v109;
    v338 = v322;
    v111 = v301;
    *(_QWORD *)v301 = 0;
    *((_QWORD *)v111 + 1) = 0;
    v341 = v108;
    v346 = 0;
    v343 = 0;
    v344 = 0;
    v345 = 0;
    v342 = 0;
    v113 = WebCore::RenderLayer::hitTestLayer(v105, v308, a1, v312, v334, v311, v313, 0, v107, v307);
    v114 = *(double *)&v112;
    if ((v312[1] & 0x80) != 0)
      WebCore::HitTestResult::append(&v317, (uint64_t)v334);
    if (!v113 || (v300 != v107 ? (v115 = v114) : (v115 = v104), v306 == 128 && v115 <= v43))
    {
LABEL_130:
      WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v334, v112);
      a4 = v312;
      if (v103 == *(_QWORD *)v44)
        goto LABEL_140;
      continue;
    }
    break;
  }
  a4 = v312;
  if ((v312[1] & 0x80) == 0)
    WebCore::HitTestResult::operator=((uint64_t)&v317, (uint64_t)v334);
  if (v306 == 128)
  {
    v45 = v113;
    v43 = v115;
    goto LABEL_130;
  }
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v334, v112);
  v45 = v113;
  v43 = v115;
LABEL_140:
  if (v300)
  {
    a2 = v308;
    if (*(_DWORD *)v300 == 1)
      WTF::fastFree(v300, (void *)v30);
    else
      --*(_DWORD *)v300;
  }
  else
  {
    a2 = v308;
  }
LABEL_34:
  if ((a4[1] & 0x80) != 0)
    WebCore::HitTestResult::append((_QWORD *)a5, (uint64_t)&v317);
  if (v45 && (v306 != 128 || v40 < v43))
  {
    if ((a4[1] & 0x80) == 0)
      WebCore::HitTestResult::operator=(a5, (uint64_t)&v317);
    if (v306 != 128)
    {
      WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)&v317, (void *)v30);
      v309 = v45;
      goto LABEL_262;
    }
    v40 = v43;
    v309 = v45;
    a4 = v312;
  }
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)&v317, (void *)v30);
  v305 = (WTF *)v316;
  v314 = (WTF *)v316;
  v315 = 1;
  WebCore::RenderLayer::collectFragments(a1, &v314, a2, v311, 1, 1, 3u, (uint64_t *)&v331, 0, 1);
  v333 = 0;
  v46 = *(_QWORD *)(a1 + 32);
  if (((*(_BYTE *)(v46 + 22) & 1) != 0 || *(_BYTE *)(v46 + 46) == 14)
    && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v46 + 88) + 32) + 151) & 0x38) != 0)
  {
    v86 = *(WebCore::RenderLayerScrollableArea **)(a1 + 264);
    if (v86)
    {
      if (WebCore::RenderLayerScrollableArea::hitTestResizerInFragments(v86, (uint64_t *)&v314, (unsigned int *)v313, (unint64_t *)&v333))
      {
        (*(void (**)(_QWORD, uint64_t, float32x2_t *))(**(_QWORD **)(a1 + 32) + 328))(*(_QWORD *)(a1 + 32), a5, &v333);
        goto LABEL_294;
      }
    }
  }
  v47 = (__int128 *)(a5 + 8);
  v48 = (__int128 *)(a5 + 32);
  v49 = v313;
  if ((*(_BYTE *)(a1 + 25) & 8) == 0)
    goto LABEL_199;
  v50 = *(WebCore::Node **)a5;
  *(_OWORD *)&v334[8] = *v47;
  v51 = *(_QWORD *)(a5 + 24);
  *(_QWORD *)v334 = v50;
  v335 = v51;
  v52 = *(_OWORD *)(a5 + 48);
  v336 = *v48;
  v337 = v52;
  v338 = *(_WORD *)(a5 + 64);
  v340 = 0.0;
  v339 = 0;
  v346 = 0;
  v345 = 0;
  v341 = v50;
  v342 = 0;
  v344 = 0;
  v343 = 0;
  v53 = HIDWORD(v315);
  if (HIDWORD(v315) - 1 < 0)
    goto LABEL_198;
  v304 = (__int128 *)(a5 + 8);
  v30 = 2147483615;
  v54 = (WebCore::HitTestingTransformState *)((char *)v313 + 8);
  v55 = 1;
LABEL_42:
  v56 = 104 * --v53 + 72;
  do
  {
    if (HIDWORD(v315) <= v53)
    {
      __break(0xC471u);
      JUMPOUT(0x1963EEB28);
    }
    v57 = v314;
    v59 = *(_DWORD *)((char *)v314 + v56 - 12);
    v58 = *(_DWORD *)((char *)v314 + v56 - 8);
    v60 = (int *)((char *)v314 + v56 - 12);
    v61 = *(_DWORD *)((char *)v314 + v56 - 4);
    v62 = v59 == -1073741808 && v58 == -1073741808;
    if (v62 && v61 == 2147483615 && *(_DWORD *)((char *)v314 + v56) == 2147483615)
      goto LABEL_75;
    if (v61 >= 1)
    {
      v64 = *(_DWORD *)((char *)v314 + v56);
      if (v64 >= 1)
      {
        v65 = *((_DWORD *)v49 + 4);
        if (v65 >= 1)
        {
          v66 = *((_DWORD *)v49 + 5);
          if (v66 >= 1)
          {
            v67 = __OFADD__(*(_DWORD *)v54, v65);
            v68 = *(_DWORD *)v54 + v65;
            if (v67)
              v68 = (*(_DWORD *)v54 >> 31) + 0x7FFFFFFF;
            if ((int)v59 < v68)
            {
              v67 = __OFADD__(v59, v61);
              v69 = v59 + v61;
              v70 = (v59 >> 31) + 0x7FFFFFFF;
              if (!v67)
                v70 = v69;
              if (*(_DWORD *)v54 < v70)
              {
                v71 = *((_DWORD *)v49 + 3);
                v72 = v71 + v66;
                if (__OFADD__(v71, v66))
                  v72 = (v71 >> 31) + 0x7FFFFFFF;
                if ((int)v58 < v72)
                {
                  v67 = __OFADD__(v58, v64);
                  v73 = v58 + v64;
                  v74 = (v58 >> 31) + 0x7FFFFFFF;
                  if (!v67)
                    v74 = v73;
                  if ((int)v71 < v74)
                  {
                    if (*((_BYTE *)v49 + 65))
                      goto LABEL_75;
                    v278 = WebCore::LayoutRect::contains((WTF *)((char *)v314 + v56 - 12), v54);
                    v49 = v313;
                    if (v278
                      || (v303 = (WebCore::HitTestingTransformState *)((char *)v313 + 32),
                          LODWORD(v317) = WebCore::LayoutRect::operator WebCore::FloatRect(v60),
                          HIDWORD(v317) = v279,
                          *(_QWORD *)&v318 = __PAIR64__(v281, v280),
                          v282 = WebCore::FloatQuad::intersectsRect(v303, (const WebCore::FloatRect *)&v317),
                          v30 = 2147483615,
                          v49 = v313,
                          v282))
                    {
LABEL_75:
                      v76 = *(_QWORD *)(a1 + 32);
                      if (v76 && (*(_BYTE *)(v76 + 45) & 4) != 0)
                      {
                        v77 = *(_QWORD *)(v76 + 152);
                        v78 = v77 & 0xFFFFFFFF00000000;
                      }
                      else
                      {
                        if ((*(_BYTE *)(v76 + 52) & 7) == 4 && (*(_BYTE *)(v76 + 53) & 1) == 0)
                        {
                          v77 = *(_QWORD *)(v76 + 152);
                          v78 = v77 & 0xFFFFFFFF00000000;
                        }
                        else
                        {
                          v78 = 0;
                          LODWORD(v77) = 0;
                        }
                        v49 = v313;
                      }
                      v80 = *(_DWORD *)((char *)v57 + v56 - 48);
                      v79 = *(_DWORD *)((char *)v57 + v56 - 44);
                      v81 = HIDWORD(v78);
                      v67 = __OFSUB__(v80, (_DWORD)v77);
                      LODWORD(v77) = v80 - v77;
                      v82 = (v80 >> 31) + 0x7FFFFFFF;
                      if (v67)
                        v77 = v82;
                      else
                        v77 = v77;
                      v67 = __OFSUB__(v79, (_DWORD)v81);
                      LODWORD(v81) = v79 - v81;
                      v83 = (v79 >> 31) + 0x7FFFFFFF;
                      if (v67)
                        v81 = v83;
                      else
                        v81 = v81;
                      v317 = (WebCore::Node *)(v77 | (v81 << 32));
                      v84 = v312;
                      v85 = v49;
                      if (((*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *, WebCore::HitTestingTransformState *, WebCore::Node **, uint64_t))(*(_QWORD *)v76 + 336))(v76, v312, v334, v49, &v317, 4) & 1) != 0|| (*(unsigned int (**)(uint64_t, _BYTE *, _BYTE *, WebCore::HitTestingTransformState *, WebCore::Node **, uint64_t))(*(_QWORD *)v76 + 336))(v76, v84, v334, v85, &v317, 3)|| (*(unsigned int (**)(uint64_t, _BYTE *, _BYTE *, WebCore::HitTestingTransformState *, WebCore::Node **, uint64_t))(*(_QWORD *)v76 + 336))(v76, v84, v334, v85, &v317,
                             2))
                      {
                        if (!v339 || v340 == 0.0)
                        {
                          v270 = (WebCore::Node *)WebCore::RenderLayer::enclosingElement((WebCore::RenderLayer *)a1);
                          if (!v339)
                            WebCore::HitTestResult::setInnerNode((WebCore::HitTestResult *)v334, v270);
                          if (v340 == 0.0)
                            WebCore::HitTestResult::setInnerNonSharedNode((WebCore::HitTestResult *)v334, v270);
                        }
                        if (v306 == 128 && v29 <= v40)
                          goto LABEL_195;
                        a4 = v312;
                        if ((v312[1] & 0x80) != 0)
                          WebCore::HitTestResult::append((_QWORD *)a5, (uint64_t)v334);
                        else
                          WebCore::HitTestResult::operator=(a5, (uint64_t)v334);
                        v40 = v29;
                        v309 = a1;
                        v47 = v304;
                        if (v306 == 128)
                          goto LABEL_198;
LABEL_293:
                        WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v334, (void *)v30);
LABEL_294:
                        v309 = a1;
                        goto LABEL_261;
                      }
                      v55 = 0;
                      v49 = v313;
                      v30 = 2147483615;
                      if (!v53)
                        goto LABEL_195;
                      goto LABEL_42;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v56 -= 104;
    v75 = (int)v53-- <= 0;
  }
  while (!v75);
  if ((v55 & 1) != 0)
  {
    a4 = v312;
    goto LABEL_197;
  }
LABEL_195:
  a4 = v312;
  if ((v312[1] & 0x80) != 0)
    WebCore::HitTestResult::append((_QWORD *)a5, (uint64_t)v334);
LABEL_197:
  v47 = v304;
LABEL_198:
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v334, (void *)v30);
LABEL_199:
  v140 = *(_QWORD *)(a5 + 24);
  v317 = *(WebCore::Node **)a5;
  v319 = v140;
  v322 = *(_WORD *)(a5 + 64);
  v318 = *v47;
  v141 = *(_OWORD *)(a5 + 48);
  v320 = *v48;
  v321 = v141;
  v323 = 0;
  v324 = 0;
  v330 = 0;
  v329 = 0;
  v325 = v317;
  v326 = 0;
  v327 = 0;
  v328 = 0;
  v142 = 0.0;
  v143 = *(_QWORD *)(a1 + 96);
  if (!v143 || (v183 = *(unsigned int *)(v143 + 12), !(_DWORD)v183) || (*(_BYTE *)(a1 + 25) & 0x10) == 0)
  {
    v144 = 0;
    goto LABEL_201;
  }
  v302 = &v320;
  v303 = (WebCore::FloatQuad *)&v318;
  v184 = *(_QWORD *)v143 + 8 * v183;
  v300 = (WTF *)&v336;
  v301 = (WTF *)&v334[8];
  v299 = &v339;
  if (!v310)
  {
    v144 = 0;
    v142 = -INFINITY;
    while (1)
    {
      v185 = *(_QWORD *)(v184 - 8);
      v184 -= 8;
      *(_OWORD *)v301 = *(_OWORD *)v303;
      v186 = v317;
      *(_QWORD *)v334 = v317;
      v335 = v319;
      v187 = v302[1];
      v188 = v300;
      *(_OWORD *)v300 = *v302;
      *((_OWORD *)v188 + 1) = v187;
      v338 = v322;
      v189 = v299;
      *v299 = 0;
      v189[1] = 0;
      v341 = v186;
      v346 = 0;
      v343 = 0;
      v344 = 0;
      v345 = 0;
      v342 = 0;
      v191 = WebCore::RenderLayer::hitTestLayer(v185, v308, a1, a4, v334, v311, v313, 0, 0, v307);
      if ((a4[1] & 0x80) != 0)
        WebCore::HitTestResult::append(&v317, (uint64_t)v334);
      if (v191 && (v306 != 128 || v142 < 0.0))
      {
        if ((a4[1] & 0x80) == 0)
          WebCore::HitTestResult::operator=((uint64_t)&v317, (uint64_t)v334);
        v142 = 0.0;
        if (v306 != 128)
        {
          v192 = 0;
          goto LABEL_281;
        }
        v144 = v191;
      }
      WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v334, v190);
      if (v184 == *(_QWORD *)v143)
        goto LABEL_201;
    }
  }
  v144 = 0;
  v192 = 0;
  v295 = (_OWORD *)((char *)v310 + 44);
  v296 = (__int128 *)((char *)v310 + 12);
  v297 = (double *)((char *)v310 + 80);
  v244 = 0.0;
  v142 = -INFINITY;
  v304 = v47;
  while (2)
  {
    v246 = *(WebCore::RenderLayer **)(v184 - 8);
    v184 -= 8;
    v245 = v246;
    if (WebCore::RenderLayer::participatesInPreserve3D(v246))
    {
      v247 = v310;
    }
    else
    {
      v247 = (WTF *)v192;
      if (!v192)
      {
        v192 = WTF::fastMalloc((WTF *)0xD8);
        *(_DWORD *)v192 = 1;
        v248 = v310;
        *(_QWORD *)(v192 + 4) = *(_QWORD *)((char *)v310 + 4);
        v249 = v297;
        v250 = *v296;
        *(_OWORD *)(v192 + 28) = v296[1];
        *(_OWORD *)(v192 + 12) = v250;
        v251 = v295[1];
        *(_OWORD *)(v192 + 44) = *v295;
        *(_OWORD *)(v192 + 60) = v251;
        v253 = *((_OWORD *)v249 + 2);
        v252 = *((_OWORD *)v249 + 3);
        v254 = *((_OWORD *)v249 + 1);
        *(_OWORD *)(v192 + 80) = *(_OWORD *)v249;
        *(_OWORD *)(v192 + 96) = v254;
        *(_OWORD *)(v192 + 112) = v253;
        *(_OWORD *)(v192 + 128) = v252;
        v255 = *((_OWORD *)v249 + 7);
        v257 = *((_OWORD *)v249 + 4);
        v256 = *((_OWORD *)v249 + 5);
        *(_OWORD *)(v192 + 176) = *((_OWORD *)v249 + 6);
        *(_OWORD *)(v192 + 192) = v255;
        *(_OWORD *)(v192 + 144) = v257;
        *(_OWORD *)(v192 + 160) = v256;
        *(_BYTE *)(v192 + 208) = *((_BYTE *)v248 + 208);
        WebCore::HitTestingTransformState::flattenWithTransform((WebCore::HitTestingTransformState *)v192, (const WebCore::TransformationMatrix *)(v192 + 80), v258);
        v244 = 0.0;
        if (!WebCore::TransformationMatrix::isAffine((WebCore::TransformationMatrix *)v249))
        {
          *(_DWORD *)v334 = WebCore::HitTestingTransformState::mappedPoint(v310, v259, v260).u32[0];
          *(_DWORD *)&v334[4] = v276;
          *(_DWORD *)&v334[8] = 0;
          WebCore::TransformationMatrix::mapPoint(v297, (float *)v334);
          v244 = v277;
        }
        v247 = (WTF *)v192;
      }
    }
    v298 = (WTF *)v192;
    *(_OWORD *)v301 = *(_OWORD *)v303;
    v261 = v317;
    *(_QWORD *)v334 = v317;
    v335 = v319;
    v262 = v302[1];
    v263 = v300;
    *(_OWORD *)v300 = *v302;
    *((_OWORD *)v263 + 1) = v262;
    v338 = v322;
    v264 = v299;
    *v299 = 0;
    v264[1] = 0;
    v341 = v261;
    v346 = 0;
    v343 = 0;
    v344 = 0;
    v345 = 0;
    v342 = 0;
    v265 = v312;
    v191 = WebCore::RenderLayer::hitTestLayer(v245, v308, a1, v312, v334, v311, v313, 0, v247, v307);
    if ((v265[1] & 0x80) != 0)
    {
      v292 = v190;
      WebCore::HitTestResult::append(&v317, (uint64_t)v334);
      v190 = v292;
    }
    if (!v191)
    {
LABEL_349:
      v47 = v304;
      v192 = (uint64_t)v298;
      goto LABEL_350;
    }
    v192 = (uint64_t)v298;
    if (v298 == v247)
      v266 = v244;
    else
      v266 = *(double *)&v190;
    v47 = v304;
    if (v306 == 128 && v266 <= v142)
    {
LABEL_350:
      WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v334, v190);
      if (v184 == *(_QWORD *)v143)
        goto LABEL_282;
      continue;
    }
    break;
  }
  if ((v312[1] & 0x80) == 0)
    WebCore::HitTestResult::operator=((uint64_t)&v317, (uint64_t)v334);
  if (v306 == 128)
  {
    v144 = v191;
    v142 = v266;
    goto LABEL_349;
  }
  v142 = v266;
  v47 = v304;
  v192 = (uint64_t)v298;
LABEL_281:
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v334, v190);
  v144 = v191;
LABEL_282:
  if (v192)
  {
    v193 = *(_DWORD *)v192 - 1;
    v62 = *(_DWORD *)v192 == 1;
    v194 = (WTF *)v192;
    a4 = v312;
    if (v62)
      WTF::fastFree(v194, (void *)v30);
    else
      *(_DWORD *)v194 = v193;
  }
  else
  {
    a4 = v312;
  }
LABEL_201:
  if ((a4[1] & 0x80) != 0)
    WebCore::HitTestResult::append((_QWORD *)a5, (uint64_t)&v317);
  if (v144)
  {
    if (v306 != 128 || v40 < v142)
    {
      if ((v312[1] & 0x80) == 0)
        WebCore::HitTestResult::operator=(a5, (uint64_t)&v317);
      if (v306 != 128)
      {
        WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)&v317, (void *)v30);
        v309 = v144;
        goto LABEL_261;
      }
      v40 = v142;
      v309 = v144;
    }
    WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)&v317, (void *)v30);
    v145 = v313;
  }
  else
  {
    WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)&v317, (void *)v30);
    if (v306 == 128)
    {
      v145 = v313;
    }
    else
    {
      v145 = v313;
      if (v309)
        goto LABEL_261;
    }
  }
  if ((*(_BYTE *)(a1 + 25) & 8) != 0)
  {
    v146 = *(WebCore::Node **)a5;
    *(_OWORD *)&v334[8] = *v47;
    v147 = *(_QWORD *)(a5 + 24);
    *(_QWORD *)v334 = v146;
    v335 = v147;
    v148 = *(_OWORD *)(a5 + 48);
    v336 = *v48;
    v337 = v148;
    v338 = *(_WORD *)(a5 + 64);
    v340 = 0.0;
    v339 = 0;
    v346 = 0;
    v345 = 0;
    v341 = v146;
    v342 = 0;
    v344 = 0;
    v343 = 0;
    if (HIDWORD(v315))
    {
      v149 = (HIDWORD(v315) - 1);
      if ((v149 & 0x80000000) == 0)
      {
        v150 = (WebCore::HitTestingTransformState *)((char *)v145 + 8);
        v151 = 1;
        v152 = (WebCore::HitTestLocation *)52;
        while (2)
        {
          v153 = (char *)v152 + 104 * v149;
          v154 = v149;
          while (1)
          {
            if (v154 >= HIDWORD(v315))
            {
              __break(0xC471u);
              JUMPOUT(0x1963EEB30);
            }
            v155 = v314;
            v157 = *(_DWORD *)&v153[(_QWORD)v314 - 12];
            v156 = *(_DWORD *)&v153[(_QWORD)v314 - 8];
            v158 = (int *)&v153[(_QWORD)v314 - 12];
            v159 = *(_DWORD *)&v153[(_QWORD)v314 - 4];
            if (v157 == -1073741808
              && v156 == -1073741808
              && v159 == 2147483615
              && *(_DWORD *)&v153[(_QWORD)v314] == 2147483615)
            {
              break;
            }
            if (v159 >= 1)
            {
              v162 = *(_DWORD *)&v153[(_QWORD)v314];
              if (v162 >= 1)
              {
                v163 = *((_DWORD *)v145 + 4);
                if (v163 >= 1)
                {
                  v164 = *((_DWORD *)v145 + 5);
                  if (v164 >= 1)
                  {
                    v67 = __OFADD__(*(_DWORD *)v150, v163);
                    v165 = *(_DWORD *)v150 + v163;
                    if (v67)
                      v165 = (*(_DWORD *)v150 >> 31) + 0x7FFFFFFF;
                    if ((int)v157 < v165)
                    {
                      v67 = __OFADD__(v157, v159);
                      v166 = v157 + v159;
                      v167 = (v157 >> 31) + 0x7FFFFFFF;
                      if (!v67)
                        v167 = v166;
                      if (*(_DWORD *)v150 < v167)
                      {
                        v168 = *((_DWORD *)v145 + 3);
                        v169 = v168 + v164;
                        if (__OFADD__(v168, v164))
                          v169 = (v168 >> 31) + 0x7FFFFFFF;
                        if ((int)v156 < v169)
                        {
                          v67 = __OFADD__(v156, v162);
                          v170 = v156 + v162;
                          v171 = (v156 >> 31) + 0x7FFFFFFF;
                          if (!v67)
                            v171 = v170;
                          if ((int)v168 < v171)
                          {
                            if (*((_BYTE *)v145 + 65))
                              break;
                            v311 = v152;
                            v283 = WebCore::LayoutRect::contains((WebCore::LayoutRect *)&v153[(_QWORD)v314 - 12], v150);
                            v152 = v311;
                            if (v283)
                              break;
                            v308 = (WebCore::HitTestingTransformState *)((char *)v313 + 32);
                            LODWORD(v317) = WebCore::LayoutRect::operator WebCore::FloatRect(v158);
                            HIDWORD(v317) = v284;
                            *(_QWORD *)&v318 = __PAIR64__(v286, v285);
                            v287 = WebCore::FloatQuad::intersectsRect(v308, (const WebCore::FloatRect *)&v317);
                            v152 = v311;
                            v145 = v313;
                            if (v287)
                              break;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v153 -= 104;
            v75 = (uint64_t)v154-- <= 0;
            if (v75)
            {
              if ((v151 & 1) != 0)
                goto LABEL_260;
              goto LABEL_258;
            }
          }
          v172 = *(_QWORD *)(a1 + 32);
          if (v172 && (*(_BYTE *)(v172 + 45) & 4) != 0)
          {
            v173 = v152;
            v174 = *(_QWORD *)(v172 + 152);
            v175 = v174 & 0xFFFFFFFF00000000;
          }
          else
          {
            v173 = v152;
            if ((*(_BYTE *)(v172 + 52) & 7) == 4 && (*(_BYTE *)(v172 + 53) & 1) == 0)
            {
              v174 = *(_QWORD *)(v172 + 152);
              v175 = v174 & 0xFFFFFFFF00000000;
            }
            else
            {
              v175 = 0;
              LODWORD(v174) = 0;
            }
          }
          v177 = *(_DWORD *)&v153[(_QWORD)v155 - 28];
          v176 = *(_DWORD *)&v153[(_QWORD)v155 - 24];
          v178 = HIDWORD(v175);
          v67 = __OFSUB__(v177, (_DWORD)v174);
          LODWORD(v174) = v177 - v174;
          v179 = (v177 >> 31) + 0x7FFFFFFF;
          if (v67)
            v174 = v179;
          else
            v174 = v174;
          v67 = __OFSUB__(v176, (_DWORD)v178);
          LODWORD(v178) = v176 - v178;
          v180 = (v176 >> 31) + 0x7FFFFFFF;
          if (v67)
            v178 = v180;
          else
            v178 = v178;
          v317 = (WebCore::Node *)(v174 | (v178 << 32));
          if ((*(unsigned int (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)v172 + 336))(v172, v312, v334))
          {
            if (!v339 || v340 == 0.0)
            {
              v271 = (WebCore::Node *)WebCore::RenderLayer::enclosingElement((WebCore::RenderLayer *)a1);
              if (!v339)
                WebCore::HitTestResult::setInnerNode((WebCore::HitTestResult *)v334, v271);
              if (v340 == 0.0)
                WebCore::HitTestResult::setInnerNonSharedNode((WebCore::HitTestResult *)v334, v271);
            }
            v195 = v306;
            if (v306 != 128 || v29 > v40)
            {
              if ((v312[1] & 0x80) != 0)
                WebCore::HitTestResult::append((_QWORD *)a5, (uint64_t)v334);
              else
                WebCore::HitTestResult::operator=(a5, (uint64_t)v334);
              if (v195 != 128)
                goto LABEL_293;
              v309 = a1;
            }
          }
          else
          {
            v151 = 0;
            v149 = v154 - 1;
            v145 = v313;
            v152 = v173;
            if (v154)
              continue;
          }
          break;
        }
LABEL_258:
        if ((v312[1] & 0x80) != 0)
          WebCore::HitTestResult::append((_QWORD *)a5, (uint64_t)v334);
      }
    }
LABEL_260:
    WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v334, (void *)v30);
  }
LABEL_261:
  v181 = v314;
  if (v305 != v314 && v314)
  {
    v314 = 0;
    LODWORD(v315) = 0;
    WTF::fastFree(v181, (void *)v30);
  }
LABEL_262:
  v25 = (double *)v310;
LABEL_263:
  if (v25)
  {
LABEL_264:
    if (*(_DWORD *)v25 == 1)
      WTF::fastFree((WTF *)v25, (void *)v30);
    else
      --*(_DWORD *)v25;
  }
  return v309;
}

uint64_t WebCore::RenderLayer::enclosingElement(WebCore::RenderLayer *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  while (1)
  {
    if ((*(_BYTE *)(v1 + 45) & 1) == 0)
    {
      result = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8);
      if (result)
        break;
    }
    v3 = *(_QWORD *)(v1 + 32);
    if (v3)
    {
      v1 = *(_QWORD *)(v3 + 8);
      if (v1)
        continue;
    }
    return 0;
  }
  if ((*(_WORD *)(result + 28) & 8) == 0)
  {
    result = 105;
    __break(0xC471u);
  }
  return result;
}

WebCore::RenderLayer *WebCore::RenderLayer::establishesTopLayerWillChange(WebCore::RenderLayer *this, uint64_t a2, WebCore::RenderLayer *a3)
{
  WebCore::RenderView *v4;
  WebCore::RenderLayer *v5;
  WebCore::RenderLayer *result;
  WebCore::RenderLayerCompositor *v7;
  WebCore::RenderLayerCompositor *v8;
  WTF *v9;
  void *v10;

  v4 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 8)
                                                       + 40)
                                           + 8)
                               + 1944);
  if (!*((_QWORD *)v4 + 50))
  {
    v7 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    WebCore::RenderLayerCompositor::RenderLayerCompositor(v7, v4);
    v8 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v4 + 50);
    *((_QWORD *)v4 + 50) = v7;
    if (v8)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v8);
      WTF::fastFree(v9, v10);
    }
  }
  v5 = this;
  while (1)
  {
    v5 = (WebCore::RenderLayer *)*((_QWORD *)v5 + 5);
    if (!v5)
      break;
    if ((*((_BYTE *)v5 + 24) & 0x4A) != 0)
    {
      WebCore::clearBackingSharingWithinStackingContext((WebCore::RenderLayer **)v5, (WebCore::RenderLayer **)v5, a3);
      break;
    }
  }
  result = (WebCore::RenderLayer *)*((_QWORD *)this + 5);
  if (result)
    return (WebCore::RenderLayer *)WebCore::RenderLayer::removeChild(result, this);
  return result;
}

WebCore::RenderLayer *WebCore::RenderLayer::establishesTopLayerDidChange(WebCore::RenderElement **this, void *a2)
{
  WebCore::RenderLayer *result;
  WTF::StringImpl *v4;
  WebCore::RenderLayer *v5;
  int shouldBeNormalFlowOnly;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  const WebCore::RenderElement **Sibling;
  uint64_t v12;
  WebCore::RenderElement *v13;

  result = (WebCore::RenderLayer *)WebCore::RenderElement::layerParent(this[4], a2);
  if (result)
  {
    v5 = result;
    shouldBeNormalFlowOnly = WebCore::RenderLayer::shouldBeNormalFlowOnly((WebCore::RenderLayer *)this, v4);
    if (((shouldBeNormalFlowOnly ^ (((unint64_t)this[3] & 4) == 0)) & 1) == 0)
    {
      v12 = 4;
      if (!shouldBeNormalFlowOnly)
        v12 = 0;
      this[3] = (WebCore::RenderElement *)((unint64_t)this[3] & 0xFFFFFFFFFFFFFFFBLL | v12);
      v13 = this[5];
      if (v13)
        WebCore::RenderLayer::dirtyNormalFlowList(v13, v7);
      WebCore::RenderLayer::dirtyStackingContextZOrderLists((WTF *)this, v7);
    }
    Sibling = WebCore::RenderElement::layerNextSibling(this[4], v5, v8, v9, v10);
    return (WebCore::RenderLayer *)WebCore::RenderLayer::addChild(v5, (WebCore::RenderLayer *)this, (WebCore::RenderLayer *)Sibling);
  }
  return result;
}

void WebCore::RenderLayer::createLocalTransformState(WebCore::RenderLayer *this, WebCore::RenderLayer *a2, WebCore::RenderLayer *a3, const WebCore::LayoutRect *a4, int32x2_t *a5, const WebCore::HitTestingTransformState *a6, const WebCore::LayoutSize *a7, _DWORD *a8)
{
  float32x2_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  int v18;
  signed int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  float64x2_t v27;
  uint64_t v28;
  uint64_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  const double *v38;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _QWORD *v48;
  uint64_t v49;
  float32x2_t v50;
  float32x2_t v51;
  _OWORD v52[2];
  _OWORD v53[6];
  unint64_t v54;
  float64x2x4_t v55;
  float64x2x4_t v56;
  float64x2x4_t v57;
  float64x2x4_t v58;

  v54 = 0;
  if (a7)
  {
    v15 = WTF::fastMalloc((WTF *)0xD8);
    *(_DWORD *)v15 = 1;
    *(_QWORD *)(v15 + 4) = *(_QWORD *)((char *)a7 + 4);
    v40 = *(_OWORD *)((char *)a7 + 12);
    *(_OWORD *)(v15 + 28) = *(_OWORD *)((char *)a7 + 28);
    *(_OWORD *)(v15 + 12) = v40;
    v41 = *(_OWORD *)((char *)a7 + 60);
    *(_OWORD *)(v15 + 44) = *(_OWORD *)((char *)a7 + 44);
    *(_OWORD *)(v15 + 60) = v41;
    v43 = *((_OWORD *)a7 + 7);
    v42 = *((_OWORD *)a7 + 8);
    v44 = *((_OWORD *)a7 + 6);
    *(_OWORD *)(v15 + 80) = *((_OWORD *)a7 + 5);
    *(_OWORD *)(v15 + 96) = v44;
    *(_OWORD *)(v15 + 112) = v43;
    *(_OWORD *)(v15 + 128) = v42;
    v45 = *((_OWORD *)a7 + 12);
    v47 = *((_OWORD *)a7 + 9);
    v46 = *((_OWORD *)a7 + 10);
    *(_OWORD *)(v15 + 176) = *((_OWORD *)a7 + 11);
    *(_OWORD *)(v15 + 192) = v45;
    *(_OWORD *)(v15 + 144) = v47;
    *(_OWORD *)(v15 + 160) = v46;
    *(_BYTE *)(v15 + 208) = *((_BYTE *)a7 + 208);
    a3 = a4;
  }
  else
  {
    v14 = (float32x2_t)vdup_n_s32(0x3C800000u);
    v50 = vmul_f32(vcvt_f32_s32(*a5), v14);
    v51 = vadd_f32(v50, vmul_f32(vcvt_f32_s32(a5[1]), v14));
    v15 = WTF::fastMalloc((WTF *)0xD8);
    *(_DWORD *)v15 = 1;
    *(_QWORD *)(v15 + 4) = *((_QWORD *)a6 + 3);
    v16 = *((_OWORD *)a6 + 2);
    *(_OWORD *)(v15 + 28) = *((_OWORD *)a6 + 3);
    *(_OWORD *)(v15 + 12) = v16;
    *(float32x2_t *)(v15 + 44) = v50;
    *(_QWORD *)(v15 + 52) = __PAIR64__(v50.u32[1], v51.u32[0]);
    *(float32x2_t *)(v15 + 60) = v51;
    *(_QWORD *)(v15 + 68) = __PAIR64__(v51.u32[1], v50.u32[0]);
    *(_OWORD *)(v15 + 144) = xmmword_1969FCC00;
    *(_OWORD *)(v15 + 160) = unk_1969FCC10;
    *(_OWORD *)(v15 + 176) = xmmword_1969FCC20;
    *(_OWORD *)(v15 + 192) = unk_1969FCC30;
    *(_OWORD *)(v15 + 80) = constinit_103;
    *(_OWORD *)(v15 + 96) = *(_OWORD *)algn_1969FCBD0;
    *(_OWORD *)(v15 + 112) = xmmword_1969FCBE0;
    *(_OWORD *)(v15 + 128) = unk_1969FCBF0;
    *(_BYTE *)(v15 + 208) = 0;
  }
  v17 = WebCore::RenderLayer::offsetFromAncestor((uint64_t)a2, (uint64_t)a3, 0);
  v18 = a8[1];
  v19 = (v17 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__((_DWORD)v17, *a8))
    v19 = v17 + *a8;
  v20 = HIDWORD(v17) + v18;
  if (__OFADD__(HIDWORD(v17), v18))
    v20 = (HIDWORD(v17) >> 31) + 0x7FFFFFFF;
  v54 = __PAIR64__(v20, v19);
  if (a4)
    v21 = *((_QWORD *)a4 + 4);
  else
    v21 = 0;
  v22 = *((_QWORD *)a2 + 4);
  v23 = *(_DWORD *)(v22 + 20);
  if ((v23 & 0x20000) != 0)
  {
    v28 = *((_QWORD *)a2 + 4);
    if ((*(_BYTE *)(v22 + 45) & 2) != 0)
      v28 = *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8);
    v29 = *(_QWORD *)(v28 + 88);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 32) + 40) + 20))
      goto LABEL_20;
    v48 = *(_QWORD **)(v29 + 40);
    if (v48[41] || v48[38] || v48[39] || v48[40] || (v23 & 0x100000) != 0)
      goto LABEL_20;
  }
  if (!v21)
    goto LABEL_15;
  v24 = v21;
  if ((*(_BYTE *)(v21 + 45) & 2) != 0)
    v24 = *(_QWORD *)(*(_QWORD *)(v21 + 32) + 8);
  if (*(float *)(*(_QWORD *)(*(_QWORD *)(v24 + 88) + 40) + 260) == -1.0)
    goto LABEL_15;
  v49 = *(_QWORD *)(v22 + 32);
  if (v49)
    v49 = *(_QWORD *)(v49 + 8);
  if (v49 == v21)
  {
LABEL_20:
    v53[3] = unk_1969FCC10;
    v53[4] = xmmword_1969FCC20;
    v53[5] = unk_1969FCC30;
    v52[0] = constinit_103;
    v52[1] = *(_OWORD *)algn_1969FCBD0;
    v53[0] = xmmword_1969FCBE0;
    memset(&v53[1], 0, 32);
    WebCore::RenderObject::getTransformFromContainer((WebCore::RenderObject *)v22, (const WebCore::LayoutSize *)&v54, (WebCore::TransformationMatrix *)v52);
    v30 = *(float64x2_t *)(v15 + 80);
    v31 = *(float64x2_t *)(v15 + 96);
    v32 = *(float64x2_t *)(v15 + 112);
    v33 = *(float64x2_t *)(v15 + 128);
    v34 = *(float64x2_t *)(v15 + 144);
    v35 = *(float64x2_t *)(v15 + 160);
    v36 = *(float64x2_t *)(v15 + 176);
    v37 = *(float64x2_t *)(v15 + 192);
    v57 = vld4q_dup_f64((const double *)v52);
    v38 = (const double *)v53;
    v55 = vld4q_dup_f64(v38);
    v38 += 4;
    *(float64x2_t *)(v15 + 80) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v57.val[0], v30), v57.val[1], v32), v57.val[2], v34), v57.val[3], v36);
    *(float64x2_t *)(v15 + 96) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v57.val[0], v31), v57.val[1], v33), v57.val[2], v35), v57.val[3], v37);
    v58 = vld4q_dup_f64(v38);
    v38 += 4;
    *(float64x2_t *)(v15 + 112) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v55.val[0], v30), v55.val[1], v32), v55.val[2], v34), v55.val[3], v36);
    *(float64x2_t *)(v15 + 128) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v55.val[0], v31), v55.val[1], v33), v55.val[2], v35), v55.val[3], v37);
    v56 = vld4q_dup_f64(v38);
    *(float64x2_t *)(v15 + 144) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v58.val[0], v30), v58.val[1], v32), v58.val[2], v34), v58.val[3], v36);
    *(float64x2_t *)(v15 + 160) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v58.val[0], v31), v58.val[1], v33), v58.val[2], v35), v58.val[3], v37);
    *(float64x2_t *)(v15 + 176) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v56.val[0], v30), v56.val[1], v32), v56.val[2], v34), v56.val[3], v36);
    *(float64x2_t *)(v15 + 192) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v56.val[0], v31), v56.val[1], v33), v56.val[2], v35), v56.val[3], v37);
  }
  else
  {
LABEL_15:
    v25 = v19 / 64;
    v26 = v20 / 64;
    v27 = vaddq_f64(*(float64x2_t *)(v15 + 192), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(v15 + 128), (double)v26), *(float64x2_t *)(v15 + 96), (double)v25));
    *(float64x2_t *)(v15 + 176) = vaddq_f64(*(float64x2_t *)(v15 + 176), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(v15 + 112), (double)v26), *(float64x2_t *)(v15 + 80), (double)v25));
    *(float64x2_t *)(v15 + 192) = v27;
  }
  *(_BYTE *)(v15 + 208) = 1;
  *(_QWORD *)this = v15;
}

BOOL WebCore::RenderLayer::ancestorLayerIsDOMParent(WebCore::RenderLayer *this, const WebCore::RenderLayer *a2)
{
  uint64_t v4;
  WebCore::Node *v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::Node *v8;
  uint64_t v9;
  _BOOL8 v10;
  int v12;
  uint64_t v13;
  WebCore::Node *v14;

  v4 = *((_QWORD *)this + 4);
  if ((*(_BYTE *)(v4 + 45) & 1) != 0)
  {
    v5 = 0;
    goto LABEL_12;
  }
  v5 = *(WebCore::Node **)(*(_QWORD *)(v4 + 24) + 8);
  if (!v5)
    goto LABEL_12;
  if ((*((_WORD *)v5 + 14) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1963EF230);
  }
  v5 = (WebCore::Node *)WebCore::Node::parentElementInComposedTree(v5);
  if (!v5)
    goto LABEL_12;
  *((_DWORD *)v5 + 6) += 2;
  v14 = v5;
  while (1)
  {
    v6 = *(_QWORD *)(WebCore::Node::computedStyle(v5) + 16) & 0x1FLL;
    v5 = v14;
    if (v6 != 18)
      break;
    v13 = WebCore::Node::parentElementInComposedTree(v14);
    WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v14, v13);
    v5 = v14;
    if (!v14)
      goto LABEL_12;
  }
  if (!v14)
    goto LABEL_12;
  v7 = *((_QWORD *)a2 + 4);
  if ((*(_BYTE *)(v7 + 45) & 1) != 0)
    goto LABEL_12;
  v8 = *(WebCore::Node **)(*(_QWORD *)(v7 + 24) + 8);
  if (!v8)
    goto LABEL_12;
  if ((*((_WORD *)v8 + 14) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1963EF250);
  }
  if (v14 != v8)
  {
LABEL_12:
    v9 = (*(_QWORD *)(*((_QWORD *)this + 4) + 96) >> 43) & 0x1FLL;
    switch((int)v9)
    {
      case 13:
        v12 = 12;
        goto LABEL_27;
      case 14:
        v12 = 13;
        goto LABEL_27;
      case 15:
      case 16:
        v12 = 14;
        goto LABEL_27;
      default:
        if ((_DWORD)v9 == 2)
        {
          v12 = 1;
LABEL_27:
          v10 = v12 == ((*(_QWORD *)(*((_QWORD *)a2 + 4) + 96) >> 43) & 0x1F);
        }
        else
        {
          v10 = 0;
        }
        v14 = 0;
        if (v5)
          goto LABEL_16;
        return v10;
    }
  }
  v14 = 0;
  v10 = 1;
LABEL_16:
  if (*((_DWORD *)v5 + 6) == 2)
  {
    if ((*((_WORD *)v5 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v5);
  }
  else
  {
    *((_DWORD *)v5 + 6) -= 2;
  }
  return v10;
}

void WebCore::RenderLayer::hitTestTransformedLayerInFragments(WebCore::RenderLayer *this, WebCore::RenderLayer *a2, WebCore::LayoutRect *a3, uint64_t a4, uint64_t a5, const WebCore::LayoutRect *a6, uint64_t a7, WebCore::LayoutSize *a8, uint64_t a9)
{
  WebCore::RenderLayer *v10;
  uint64_t v11;
  WebCore::RenderLayer *v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  WebCore::RenderLayer *v18;
  WTF *v19;
  int v20;
  int v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  BOOL v50;
  int v51;
  int v52;
  int v54;
  BOOL v55;
  int v56;
  _BOOL4 v57;
  int v58;
  int v59;
  _BOOL4 v60;
  int v61;
  int v62;
  BOOL v63;
  int v64;
  int v65;
  int v66;
  int v67;
  _BOOL4 v68;
  unint64_t v69;
  uint64_t v70;
  WTF *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int32x4_t v77;
  _BOOL4 v78;
  WTF *v79;
  unsigned int v80;
  unsigned int v81;
  float32x4_t v82;
  WebCore::FloatQuad *v83;
  WebCore::RenderLayer *v89;
  uint64_t v90;
  WebCore::RenderLayer *v91;
  WTF *v93;
  unint64_t v94;
  __int128 v95;
  unint64_t v96;
  WTF *v97;
  uint64_t v98;
  _BYTE v99[104];
  uint64_t v100;
  float32x4_t v101;

  v10 = this;
  v96 = 0;
  v97 = (WTF *)v99;
  v98 = 1;
  v11 = *((_QWORD *)this + 27);
  if (v11)
    v12 = *(WebCore::RenderLayer **)(v11 + 8);
  else
    v12 = 0;
  *(_QWORD *)&v95 = WebCore::transparencyClipBox((WebCore::RenderLayer **)this, v12, 1, 1, 0, 0);
  *((_QWORD *)&v95 + 1) = v13;
  v91 = v12;
  WebCore::RenderLayer::collectFragments((uint64_t)v12, &v97, a2, a6, 1, 1, 3u, (uint64_t *)&v96, &v95, 1);
  v15 = (HIDWORD(v98) - 1);
  if (HIDWORD(v98) - 1 >= 0)
  {
    v16 = v96;
    v83 = (WebCore::FloatQuad *)(a7 + 32);
    v17 = 104 * v15;
    v82 = (float32x4_t)vdupq_n_s32(0x3C800000u);
    v89 = v10;
    v90 = a7;
    v18 = v12;
    while (1)
    {
      if (v15 >= HIDWORD(v98))
      {
        __break(0xC471u);
        return;
      }
      v19 = v97;
      v21 = *(_DWORD *)((char *)v97 + v17 + 40);
      v20 = *(_DWORD *)((char *)v97 + v17 + 44);
      v22 = *(_QWORD *)((char *)v97 + v17 + 48);
      if (*((WebCore::RenderLayer **)v10 + 5) != v18)
      {
        v94 = WebCore::RenderLayer::convertToLayerCoords(v18, a2, v16, 0);
        v101.i64[0] = (uint64_t)v18;
        v101.i32[2] = 1;
        v101.i8[12] = 3;
        WebCore::RenderLayer::parentClipRects((WTF *)&v100, (uint64_t)v10, (uint64_t)&v101);
        v23 = (WTF *)v100;
        v24 = *((_QWORD *)v10 + 4);
        v25 = (*(_DWORD *)(v24 + 96) >> 19) & 7;
        v93 = v19;
        if (v25 == 2)
        {
          v26 = (unsigned int *)(v100 + 48);
        }
        else if (v25 == 6)
        {
          v26 = (unsigned int *)(v100 + 28);
        }
        else
        {
          v26 = (unsigned int *)(v100 + 8);
        }
        v16 = v94;
        v27 = *v26;
        v28 = v26[1];
        v29 = v26[2];
        v30 = v26[3];
        if (*(_BYTE *)(v100 + 4))
        {
          v74 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 24) + 8) + 40) + 8) + 1944);
          v75 = *((_QWORD *)v18 + 4);
          v31 = v28;
          v32 = v27;
          if (v75 == v74)
          {
            v31 = -1073741808;
            if (v27 != -1073741808 || v28 != -1073741808 || v29 != 2147483615 || (v32 = -1073741808, v30 != 2147483615))
            {
              v80 = v29;
              v81 = v30;
              v76 = WebCore::LocalFrameView::scrollPositionForFixedPosition(*(int32x2_t **)(v74 + 248));
              v32 = v27 + v76;
              if (__OFADD__(v27, (_DWORD)v76))
                v32 = (v27 >> 31) + 0x7FFFFFFF;
              v31 = v28 + HIDWORD(v76);
              if (__OFADD__(v28, HIDWORD(v76)))
                v31 = (v28 >> 31) + 0x7FFFFFFF;
              v16 = v94;
              v29 = v80;
              v30 = v81;
            }
          }
        }
        else
        {
          v31 = v26[1];
          v32 = *v26;
        }
        if (*(_DWORD *)v23 == 1)
        {
          v71 = v23;
          v72 = v30;
          v73 = v29;
          WTF::fastFree(v71, v14);
          v29 = v73;
          v30 = v72;
          v16 = v94;
        }
        else
        {
          --*(_DWORD *)v23;
        }
        a7 = v90;
        v19 = v93;
        v33 = *(_DWORD *)((char *)v93 + v17 + 80);
        v34 = v33 + v16;
        if (__OFADD__(v33, (_DWORD)v16))
          v34 = (v33 >> 31) + 0x7FFFFFFF;
        v35 = *(_DWORD *)((char *)v93 + v17 + 84);
        v36 = v35 + HIDWORD(v16);
        if (__OFADD__(v35, HIDWORD(v16)))
          v36 = (v35 >> 31) + 0x7FFFFFFF;
        v37 = v32 + v34;
        if (__OFADD__(v32, v34))
          v37 = (v32 >> 31) + 0x7FFFFFFF;
        v18 = v91;
        v38 = v31 + v36;
        if (__OFADD__(v31, v36))
          v38 = (v31 >> 31) + 0x7FFFFFFF;
        v10 = v89;
        if (v21 <= v37)
          v39 = v37;
        else
          v39 = v21;
        if (v20 <= v38)
          v40 = v38;
        else
          v40 = v20;
        v41 = v21 + v22;
        if (__OFADD__(v21, (_DWORD)v22))
          v41 = (v21 >> 31) + 0x7FFFFFFF;
        v55 = __OFADD__(v37, v29);
        v42 = v37 + v29;
        if (v55)
          v42 = (v37 >> 31) + 0x7FFFFFFF;
        if (v42 >= v41)
          v43 = v41;
        else
          v43 = v42;
        v44 = v20 + HIDWORD(v22);
        if (__OFADD__(v20, HIDWORD(v22)))
          v44 = (v20 >> 31) + 0x7FFFFFFF;
        v55 = __OFADD__(v38, v30);
        v45 = v38 + v30;
        v46 = (v38 >> 31) + 0x7FFFFFFF;
        if (!v55)
          v46 = v45;
        if (v46 >= v44)
          v46 = v44;
        if (v39 >= v43 || v40 >= v46)
        {
          v43 = 0;
          v46 = 0;
          v21 = 0;
          v20 = 0;
        }
        else
        {
          v21 = v39;
          v20 = v40;
        }
        LODWORD(v47) = v43 - v21;
        if (__OFSUB__(v43, v21))
          v47 = (v43 >> 31) + 0x7FFFFFFF;
        else
          v47 = v47;
        v55 = __OFSUB__(v46, v20);
        LODWORD(v48) = v46 - v20;
        v49 = (v46 >> 31) + 0x7FFFFFFF;
        if (v55)
          v48 = v49;
        else
          v48 = v48;
        v22 = v47 | (v48 << 32);
      }
      v50 = (int)v22 < 1 || SHIDWORD(v22) < 1;
      if (v50)
        goto LABEL_88;
      v52 = *(_DWORD *)(a7 + 16);
      v51 = *(_DWORD *)(a7 + 20);
      if (v52 < 1 || v51 < 1)
        goto LABEL_88;
      v54 = *(_DWORD *)(a7 + 8);
      v55 = __OFADD__(v54, v52);
      v56 = v54 + v52;
      v57 = __OFADD__(v54, v52);
      v58 = (v54 >> 31) + 0x7FFFFFFF;
      if (!v55)
        v58 = v56;
      if (v21 >= v58)
        goto LABEL_88;
      v59 = v21 + v22;
      v60 = __OFADD__(v21, (_DWORD)v22);
      v61 = (v21 >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(v21, (_DWORD)v22))
        v61 = v21 + v22;
      if (v54 >= v61)
        goto LABEL_88;
      v62 = *(_DWORD *)(a7 + 12);
      v63 = __OFADD__(v62, v51);
      v64 = v62 + v51;
      v65 = v63;
      v66 = (v62 >> 31) + 0x7FFFFFFF;
      if (!v63)
        v66 = v64;
      if (v20 >= v66)
        goto LABEL_88;
      v67 = v20 + HIDWORD(v22);
      v68 = __OFADD__(v20, HIDWORD(v22));
      LODWORD(v14) = (v20 >> 31) + 0x7FFFFFFF;
      v14 = __OFADD__(v20, HIDWORD(v22)) ? (void *)v14 : (void *)v67;
      if (v62 >= (int)v14)
        goto LABEL_88;
      v69 = v16;
      if (*(_BYTE *)(a7 + 65))
        goto LABEL_87;
      if (v21 <= v54)
        break;
LABEL_112:
      v77.i64[0] = __PAIR64__(v20, v21);
      v77.i64[1] = v22;
      v101 = vmulq_f32(vcvtq_f32_s32(v77), v82);
      v78 = WebCore::FloatQuad::intersectsRect(v83, (const WebCore::FloatRect *)&v101);
      v16 = v69;
      if (v78)
      {
LABEL_87:
        v70 = WebCore::RenderLayer::hitTestLayerByApplyingTransform(v10, a2, a3, a4, a5, (int32x2_t *)a6, (WebCore::HitTestingTransformState *)a7, a8, a9, (WTF *)((char *)v19 + v17 + 80));
        v16 = v69;
        if (v70)
          goto LABEL_118;
      }
LABEL_88:
      v17 -= 104;
      v50 = (uint64_t)v15-- <= 0;
      if (v50)
        goto LABEL_118;
    }
    if (v60)
    {
      v59 = (v21 >> 31) + 0x7FFFFFFF;
      if (!v57)
        goto LABEL_107;
    }
    else if (!v57)
    {
LABEL_107:
      v10 = v89;
      a7 = v90;
      v18 = v91;
      if (v59 < v56 || v20 > v62)
        goto LABEL_112;
      if (v68)
      {
        v67 = (v20 >> 31) + 0x7FFFFFFF;
        if (!v65)
          goto LABEL_111;
      }
      else if (!v65)
      {
        goto LABEL_111;
      }
      v64 = (v62 >> 31) + 0x7FFFFFFF;
LABEL_111:
      v10 = v89;
      a7 = v90;
      v18 = v91;
      if (v67 >= v64)
        goto LABEL_87;
      goto LABEL_112;
    }
    v56 = (v54 >> 31) + 0x7FFFFFFF;
    goto LABEL_107;
  }
LABEL_118:
  v79 = v97;
  if (v99 != (_BYTE *)v97)
  {
    if (v97)
    {
      v97 = 0;
      LODWORD(v98) = 0;
      WTF::fastFree(v79, v14);
    }
  }
}

uint64_t WebCore::RenderLayer::hitTestLayerByApplyingTransform(WebCore::RenderLayer *a1, WebCore::RenderLayer *a2, WebCore::LayoutRect *a3, uint64_t a4, uint64_t a5, int32x2_t *a6, WebCore::HitTestingTransformState *a7, WebCore::LayoutSize *a8, uint64_t a9, _DWORD *a10)
{
  double (*v15)[4][4];
  double (*v16)[4][4];
  double *v17;
  double *v18;
  double v19;
  double v20;
  double (*v21)[4][4];
  float v22;
  float v23;
  float v24;
  double (*v25)[4][4];
  const FloatQuad *v26;
  uint64_t v27;
  float v28;
  unsigned int v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v34;
  float64_t v35;
  float64x2_t v36;
  float64_t v37;
  __int128 v38;
  __int128 v39;
  __int16 v40;
  _QWORD v41[2];
  _OWORD v42[2];
  _DWORD v43[2];
  double *v44;
  float64x2_t v45[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char v52;

  WebCore::RenderLayer::createLocalTransformState((WebCore::RenderLayer *)&v44, a1, a2, a3, a6, a7, a8, a10);
  v17 = v44;
  v18 = v44 + 10;
  if (v44[12] != 0.0
    || v44[13] != 0.0
    || v44[16] != 0.0
    || v44[17] != 0.0
    || v44[21] != 0.0
    || v44[18] != 0.0
    || v44[19] != 0.0
    || v44[20] != 1.0
    || v44[25] != 1.0)
  {
    goto LABEL_42;
  }
  v19 = v44[11];
  if (v19 == 0.0 && v44[14] == 0.0 && *v18 == 1.0 && v44[15] == 1.0)
    goto LABEL_14;
  if (v44[24] == 0.0)
    v20 = v44[10] * v44[15] - v19 * v44[14];
  else
LABEL_42:
    v20 = WebCore::determinant4x4((WebCore *)(v44 + 10), v15);
  if (((*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
  {
    v32 = 0;
    goto LABEL_29;
  }
LABEL_14:
  WebCore::TransformationMatrix::inverse(v18, v16, (uint64_t)v45);
  if (v52)
  {
    LODWORD(v22) = WebCore::TransformationMatrix::projectPoint(v45, (const WebCore::FloatPoint *)((char *)v17 + 4), 0).u32[0];
    v24 = v23;
  }
  else
  {
    v22 = *((float *)v17 + 1);
    v24 = *((float *)v17 + 2);
  }
  *(float *)v43 = v22;
  *(float *)&v43[1] = v24;
  WebCore::TransformationMatrix::inverse(v18, v21, (uint64_t)v45);
  if (v52)
  {
    WebCore::TransformationMatrix::projectQuad(v45, (const FloatQuad *)((char *)v17 + 12), 0, (uint64_t)v42);
  }
  else
  {
    v34 = *(_OWORD *)((char *)v17 + 28);
    v42[0] = *(_OWORD *)((char *)v17 + 12);
    v42[1] = v34;
  }
  WebCore::TransformationMatrix::inverse(v18, v25, (uint64_t)v45);
  if (v52)
  {
    v26 = (const FloatQuad *)((char *)v17 + 44);
  }
  else
  {
    v48 = xmmword_1969FC490;
    v49 = unk_1969FC4A0;
    v50 = xmmword_1969FC4B0;
    v51 = unk_1969FC4C0;
    v45[0] = (float64x2_t)constinit_6;
    v45[1] = (float64x2_t)unk_1969FC460;
    v26 = (const FloatQuad *)((char *)v17 + 44);
    v46 = xmmword_1969FC470;
    v47 = unk_1969FC480;
  }
  v41[0] = WebCore::TransformationMatrix::clampedBoundsOfProjectedQuad(v45, v26);
  v41[1] = v27;
  LOBYTE(v48) = 0;
  v46 = 0u;
  v47 = 0u;
  memset(v45, 0, sizeof(v45));
  if (*((_BYTE *)a7 + 64))
  {
    WebCore::HitTestLocation::HitTestLocation((WebCore::HitTestLocation *)&v35, (const WebCore::FloatPoint *)v43, (const WebCore::FloatQuad *)v42);
    *(float64x2_t *)((char *)v45 + 8) = v36;
    v45[0].f64[0] = v35;
    v45[1].f64[1] = v37;
    v46 = v38;
    v47 = v39;
    LOWORD(v48) = v40;
  }
  else
  {
    v28 = floorf(v22 * 64.0);
    if (v28 >= 2147500000.0)
    {
      v29 = 0x7FFFFFFF;
    }
    else if (v28 <= -2147500000.0)
    {
      v29 = 0x80000000;
    }
    else
    {
      v29 = (int)v28;
    }
    v30 = floorf(v24 * 64.0);
    if (v30 >= 2147500000.0)
    {
      v31 = 0x7FFFFFFFLL;
    }
    else if (v30 <= -2147500000.0)
    {
      v31 = 0x80000000;
    }
    else
    {
      v31 = (int)v30;
    }
    *(_QWORD *)&v45[0].f64[0] = v29 | (unint64_t)(v31 << 32);
    *(_QWORD *)&v45[0].f64[1] = v29 & 0xFFFFFFC0 | ((unint64_t)((v31 & 0xFFFFFFC0) >> 6) << 38);
    *(_QWORD *)&v45[1].f64[0] = 0x4000000040;
    *(float32x2_t *)&v45[1].f64[1] = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v31, v29)), (float32x2_t)vdup_n_s32(0x3C800000u));
    *(float *)&v46 = (float)(int)(v29 & 0xFFFFFFC0) * 0.015625;
    *((float *)&v46 + 1) = (float)(v31 & 0xFFFFFFC0) * 0.015625;
    *((float *)&v46 + 2) = *(float *)&v46 + 1.0;
    *((float *)&v46 + 3) = *((float *)&v46 + 1);
    *(float *)&v47 = *(float *)&v46 + 1.0;
    *((float *)&v47 + 1) = *((float *)&v46 + 1) + 1.0;
    *((float *)&v47 + 2) = *(float *)&v46;
    *((float *)&v47 + 3) = *((float *)&v46 + 1) + 1.0;
    BYTE1(v48) = 1;
  }
  v32 = WebCore::RenderLayer::hitTestLayer(a1, a1, a3, a4, a5, v41, v45, 1, v17, a9);
LABEL_29:
  if (*(_DWORD *)v17 == 1)
    WTF::fastFree((WTF *)v17, v15);
  else
    --*(_DWORD *)v17;
  return v32;
}

double WebCore::RenderLayer::selfClipRect(WebCore::RenderLayer *this)
{
  WebCore::RenderLayer *v2;
  unint64_t v3;
  int32x4_t v4;
  uint64_t v5;
  int32x4_t v6;
  int8x16_t v7;
  int32x4_t v8;
  int8x16_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v20;
  float v21;
  float v22;
  float v24;
  float v26;
  float v27;
  float v28;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int32x2_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int32x2_t v52;
  int8x16_t v53;
  int32x2_t v54;
  int8x16_t v55;
  int32x2_t v56;
  double result;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  int8x16_t v66;
  float v67;
  float v68;
  float v69;
  float v70;

  v2 = WebCore::RenderLayer::clippingRootForPainting(this);
  v3 = WebCore::RenderLayer::offsetFromAncestor((uint64_t)this, (uint64_t)v2, 0);
  v4.i64[0] = WebCore::RenderView::documentRect(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 8)
                                                                                                + 40)
                                                                                    + 8)
                                                                        + 1944));
  v4.i64[1] = v5;
  v6.i64[0] = 0xFE000000FE000000;
  v6.i64[1] = 0xFE000000FE000000;
  v7 = (int8x16_t)vcgtq_s32(v4, v6);
  v8.i64[0] = 0xFE000000FE000000;
  v8.i64[1] = 0xFE000000FE000000;
  v9.i64[0] = 0x8000000080000000;
  v9.i64[1] = 0x8000000080000000;
  v66 = vorrq_s8((int8x16_t)(*(_OWORD *)&v7 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v8, v4), v9, (int8x16_t)vshlq_n_s32(v4, 6uLL)), v7));
  v10 = WebCore::RenderLayer::clipRectRelativeToAncestor(this, v2, v3, (const WebCore::LayoutRect *)&v66, 0);
  v11 = *((_QWORD *)v2 + 4);
  v58 = (float)(int)v10 * 0.015625;
  v59 = (float)SHIDWORD(v10) * 0.015625;
  v60 = v58 + (float)((float)v12 * 0.015625);
  v61 = v59;
  v62 = v60;
  v63 = v59 + (float)((float)v13 * 0.015625);
  v64 = v58;
  v65 = v63;
  WebCore::RenderObject::localToContainerQuad(v11, &v58, 0, 2u, &v66);
  v14 = *(float *)v66.i32;
  v15 = v67;
  if (v69 >= v67)
    v16 = v67;
  else
    v16 = v69;
  if (*(float *)&v66.i32[2] >= *(float *)v66.i32)
    v17 = *(float *)v66.i32;
  else
    v17 = *(float *)&v66.i32[2];
  if (v16 >= v17)
    v16 = v17;
  v18 = fabsf(v16);
  if (v18 == INFINITY || v18 > 2147500000.0)
    v16 = (float)((SLODWORD(v16) >> 31) ^ 0x7FFFFFFF);
  if (v70 >= v68)
    v20 = v68;
  else
    v20 = v70;
  if (*(float *)&v66.i32[3] >= *(float *)&v66.i32[1])
    v21 = *(float *)&v66.i32[1];
  else
    v21 = *(float *)&v66.i32[3];
  if (v20 >= v21)
    v20 = v21;
  v22 = fabsf(v20);
  if (v22 == INFINITY || v22 > 2147500000.0)
    v20 = (float)((SLODWORD(v20) >> 31) ^ 0x7FFFFFFF);
  if (*(float *)v66.i32 < *(float *)&v66.i32[2])
    v14 = *(float *)&v66.i32[2];
  if (v67 < v69)
    v15 = v69;
  if (v14 >= v15)
    v15 = v14;
  v24 = fabsf(v15);
  if (v24 == INFINITY || v24 > 2147500000.0)
    v15 = (float)((SLODWORD(v15) >> 31) ^ 0x7FFFFFFF);
  if (*(float *)&v66.i32[1] >= *(float *)&v66.i32[3])
    v26 = *(float *)&v66.i32[1];
  else
    v26 = *(float *)&v66.i32[3];
  if (v68 >= v70)
    v27 = v68;
  else
    v27 = v70;
  if (v26 >= v27)
    v27 = v26;
  v28 = fabsf(v27);
  if (v28 == INFINITY || v28 > 2147500000.0)
    v27 = (float)((SLODWORD(v27) >> 31) ^ 0x7FFFFFFF);
  v30 = floorf(v16);
  v31 = 2147500000.0;
  if (v30 < 2147500000.0)
  {
    v31 = -2147500000.0;
    if (v30 > -2147500000.0)
      v31 = (float)(int)v30;
  }
  v32 = v15 - v16;
  v33 = v27 - v20;
  v34 = floorf(v20);
  v35 = 2147500000.0;
  if (v34 < 2147500000.0)
  {
    v35 = -2147500000.0;
    if (v34 > -2147500000.0)
      v35 = (float)(int)v34;
  }
  v36 = v20 + v33;
  v37 = ceilf(v16 + v32);
  v38 = 2147500000.0;
  if (v37 < 2147500000.0)
  {
    v38 = -2147500000.0;
    if (v37 > -2147500000.0)
      v38 = (float)(int)v37;
  }
  v39 = ceilf(v36);
  v40 = 2147500000.0;
  if (v39 < 2147500000.0)
  {
    v40 = -2147500000.0;
    if (v39 > -2147500000.0)
      v40 = (float)(int)v39;
  }
  if (v31 >= 2147500000.0)
  {
    v41 = 0x7FFFFFFFLL;
  }
  else if (v31 <= -2147500000.0)
  {
    v41 = 0x80000000;
  }
  else
  {
    v41 = (int)v31;
  }
  if (v35 >= 2147500000.0)
  {
    v42 = 0x7FFFFFFFLL;
  }
  else if (v35 <= -2147500000.0)
  {
    v42 = 0x80000000;
  }
  else
  {
    v42 = (int)v35;
  }
  v43 = v38 - v31;
  v44 = v40 - v35;
  if (v43 >= 2147500000.0)
  {
    v45 = 0x7FFFFFFFLL;
  }
  else if (v43 <= -2147500000.0)
  {
    v45 = 0x80000000;
  }
  else
  {
    v45 = (int)v43;
  }
  if (v44 >= 2147500000.0)
  {
    v46 = 0x7FFFFFFFLL;
  }
  else if (v44 <= -2147500000.0)
  {
    v46 = 0x80000000;
  }
  else
  {
    v46 = (int)v44;
  }
  v47.i64[0] = v41;
  v47.i64[1] = v45;
  v48.i64[0] = v42;
  v48.i64[1] = v46;
  v49 = vcgt_s32((int32x2_t)__PAIR64__(v45, v41), (int32x2_t)0xFE000000FE000000);
  v50.i64[0] = v49.i32[0];
  v50.i64[1] = v49.i32[1];
  v51 = v50;
  v52 = vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)__PAIR64__(v45, v41));
  v50.i64[0] = v52.i32[0];
  v50.i64[1] = v52.i32[1];
  v53 = vorrq_s8(vandq_s8(v50, (int8x16_t)vdupq_n_s64(0x80000000uLL)), vandq_s8(vbicq_s8((int8x16_t)vshlq_n_s64(v47, 6uLL), v50), (int8x16_t)vdupq_n_s64(0xFFFFFFC0uLL)));
  v54 = vcgt_s32((int32x2_t)__PAIR64__(v46, v42), (int32x2_t)0xFE000000FE000000);
  v50.i64[0] = v54.i32[0];
  v50.i64[1] = v54.i32[1];
  v55 = v50;
  v56 = vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)__PAIR64__(v46, v42));
  v50.i64[0] = v56.i32[0];
  v50.i64[1] = v56.i32[1];
  *(_QWORD *)&result = vorrq_s8(vbslq_s8(v55, (int8x16_t)vdupq_n_s64(0x7FFFFFFF00000000uLL), vbslq_s8(v50, (int8x16_t)vdupq_n_s64(0x8000000000000000), (int8x16_t)vshlq_n_s64(v48, 0x26uLL))), vbslq_s8(v51, (int8x16_t)vdupq_n_s64(0x7FFFFFFFuLL), v53)).u64[0];
  return result;
}

_QWORD *WebCore::RenderLayer::clearBlockSelectionGapsBounds(_QWORD *this)
{
  WebCore::RenderLayer *i;

  this[29] = 0;
  this[30] = 0;
  for (i = (WebCore::RenderLayer *)this[8]; i; i = (WebCore::RenderLayer *)*((_QWORD *)i + 7))
    this = (_QWORD *)WebCore::RenderLayer::clearBlockSelectionGapsBounds(i);
  return this;
}

int *WebCore::RenderLayer::repaintBlockSelectionGaps(int *this)
{
  int32x2_t *v1;
  WebCore::RenderLayer *i;
  __n128 v3;
  int32x2_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  unsigned __int32 v11;
  unsigned __int32 v12;
  uint64_t *v13;
  int *v14;
  int v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;

  v1 = (int32x2_t *)this;
  for (i = (WebCore::RenderLayer *)*((_QWORD *)this + 8); i; i = (WebCore::RenderLayer *)*((_QWORD *)i + 7))
    this = (int *)WebCore::RenderLayer::repaintBlockSelectionGaps(i);
  if (v1[30].i32[0] >= 1 && v1[30].i32[1] >= 1)
  {
    v3.n128_u64[0] = (unint64_t)WebCore::LayoutRect::LayoutRect((int8x8_t *)&v22, v1 + 29);
    v4 = v1[33];
    if (v4)
    {
      v5 = *(_DWORD *)(*(_QWORD *)&v4 + 108);
      v6 = -*(_DWORD *)(*(_QWORD *)&v4 + 104);
      v7 = -64 * *(_DWORD *)(*(_QWORD *)&v4 + 104);
      if (v6 < -33554432)
        v7 = 0x80000000;
      if (v6 > 0x1FFFFFF)
        v7 = 0x7FFFFFFF;
      if (v5 <= 0x2000000)
        v8 = -64 * v5;
      else
        v8 = 0x80000000;
      if (v5 >= -33554431)
        v9 = v8;
      else
        v9 = 0x7FFFFFFF;
      v10 = __OFADD__((_DWORD)v22, v7);
      v11 = v22 + v7;
      if (v10)
        v11 = (v22 >> 31) + 0x7FFFFFFF;
      v10 = __OFADD__(HIDWORD(v22), v9);
      v12 = HIDWORD(v22) + v9;
      if (v10)
        v12 = (HIDWORD(v22) >> 31) + 0x7FFFFFFF;
      v22 = __PAIR64__(v12, v11);
      v14 = (int *)v1[4];
      v13 = (uint64_t *)&v1[4];
      this = v14;
      v15 = v14[5];
      if ((v15 & 0x10000) == 0
        || *(_BYTE *)(*(_QWORD *)&v4 + 79) && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v4 + 96) + 256))
      {
        goto LABEL_30;
      }
    }
    else
    {
      v16 = (int *)v1[4];
      v13 = (uint64_t *)&v1[4];
      this = v16;
      v15 = v16[5];
      if ((v15 & 0x10000) == 0)
        goto LABEL_30;
    }
    if ((*((_BYTE *)this + 45) & 4) == 0)
    {
      __break(0xC471u);
      goto LABEL_39;
    }
    v19 = 0;
    v20 = (*(uint64_t (**)(int *, uint64_t *, _QWORD, _QWORD, _QWORD, __n128))(*(_QWORD *)this + 1416))(this, &v19, 0, 0, 0, v3);
    v21 = v17;
    WebCore::LayoutRect::intersect((int *)&v22, (const WebCore::LayoutRect *)&v20);
    this = (int *)*v13;
    v15 = *(_DWORD *)(*v13 + 20);
LABEL_30:
    if ((v15 & 0x1800000) != 0x1000000
      || ((*(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 642) << 16)) << 32)) & 0x20000000000000) == 0)
    {
LABEL_31:
      if (v23 >= 1 && v24 >= 1)
        return (int *)WebCore::RenderObject::repaintRectangle(*v13, (const WebCore::LayoutRect *)&v22);
      return this;
    }
    if ((*((_BYTE *)this + 45) & 4) != 0)
    {
      v19 = 0;
      v20 = WebCore::RenderBox::clipRect((WebCore::RenderBox *)this, (const WebCore::LayoutPoint *)&v19, 0);
      v21 = v18;
      this = WebCore::LayoutRect::intersect((int *)&v22, (const WebCore::LayoutRect *)&v20);
      goto LABEL_31;
    }
    __break(0xC471u);
LABEL_39:
    JUMPOUT(0x1963F02D4);
  }
  return this;
}

unint64_t WebCore::RenderLayer::absoluteBoundingBox(WebCore::RenderLayer *this)
{
  WebCore::RenderLayer *v2;
  const WebCore::RenderLayerModelObject *v3;
  double v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v9;

  v2 = this;
  do
  {
    v3 = v2;
    v2 = (WebCore::RenderLayer *)*((_QWORD *)v2 + 5);
  }
  while (v2);
  v9 = WebCore::RenderLayer::offsetFromAncestor((uint64_t)this, (uint64_t)v3, 0);
  v5 = WebCore::RenderLayer::boundingBox((uint64_t)this, v3, &v9, 0, v4);
  return ((int)v5 / 64 + ((int)(v5 - (v6 & 0xFFFFFFC0) + 32) >> 6)) | ((unint64_t)(SHIDWORD(v5) / 64 + ((int)(HIDWORD(v5) - (v7 & 0xFFFFFFC0) + 32) >> 6)) << 32);
}

void WebCore::RenderLayer::absoluteBoundingBoxForPainting(WebCore::RenderLayer *this)
{
  WebCore::RenderLayer *v2;
  const WebCore::RenderLayerModelObject *v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  int v11;
  WTF *v12;
  void *v13;
  unint64_t v14;
  _QWORD v15[2];

  v2 = this;
  do
  {
    v3 = v2;
    v2 = (WebCore::RenderLayer *)*((_QWORD *)v2 + 5);
  }
  while (v2);
  v14 = WebCore::RenderLayer::offsetFromAncestor((uint64_t)this, (uint64_t)v3, 0);
  v15[0] = WebCore::RenderLayer::boundingBox((uint64_t)this, v3, &v14, 0, v4);
  v15[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 8) + 40) + 8)
                 + 528);
  v7 = 1.0;
  if (v6)
  {
    v8 = *(_QWORD *)(v6 + 8);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 24);
      if (v9)
      {
        v10 = *(float **)(v9 + 8);
        if (v10)
        {
          v11 = (*(_DWORD *)v10)++;
          v7 = v10[91];
          if (v11)
          {
            *(_DWORD *)v10 = v11;
          }
          else
          {
            WebCore::Page::~Page((WebCore::Page *)v10);
            WTF::fastFree(v12, v13);
          }
        }
      }
    }
  }
  WebCore::snapRectToDevicePixels((int *)v15, v7);
}

uint64_t WebCore::RenderLayer::calculateLayerBounds(WebCore::RenderLayer const*,WebCore::LayoutSize const&,WTF::OptionSet<WebCore::RenderLayer::CalculateLayerBoundsFlag>)const::$_0::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[2];

  v3 = result;
  v4 = *(_QWORD *)result;
  if ((*(_BYTE *)(result + 16) & 0x40) != 0
    || !*(_QWORD *)(a2 + 256) && ((v5 = *(_QWORD *)(a2 + 80)) == 0 || !*(_QWORD *)(v5 + 8)))
  {
    v7 = WebCore::RenderLayer::offsetFromAncestor(a2, v4, 0);
    v8[0] = WebCore::RenderLayer::calculateLayerBounds(a2, v4, &v7, *(unsigned int *)(v3 + 20));
    v8[1] = v6;
    return WebCore::LayoutRect::checkedUnite(*(int **)(v3 + 8), (unsigned int *)v8);
  }
  return result;
}

uint64_t WebCore::RenderLayer::repaintIncludingDescendants(WebCore::RenderLayer *this)
{
  uint64_t result;
  WebCore::RenderLayer *i;
  _BYTE v4[20];
  __int128 v5;
  char v6;

  result = *((_QWORD *)this + 4);
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8) + 40)
                                                                                         + 8)
                                                                             + 1944)
                                                                 + 24)
                                                     + 8)
                                         + 40)
                             + 8)
                 + 3382))
  {
    LOBYTE(v5) = 0;
    v6 = 0;
    v4[0] = 0;
    v4[16] = 0;
    result = WebCore::RenderObject::issueRepaint(result, &v5, 0, 0, (uint64_t)v4);
  }
  for (i = (WebCore::RenderLayer *)*((_QWORD *)this + 8); i; i = (WebCore::RenderLayer *)*((_QWORD *)i + 7))
    result = WebCore::RenderLayer::repaintIncludingDescendants(i);
  return result;
}

_QWORD *WebCore::RenderLayer::setBackingNeedsRepaint(WebCore::RenderLayer *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  WebCore::RenderView *v7;
  uint64_t v8;
  _QWORD *v9;
  int32x2_t v10;
  WebCore::RenderLayerCompositor *v11;
  WebCore::RenderLayerCompositor *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  int32x2_t v16[2];
  int8x8_t v17[2];

  v4 = *((_QWORD *)a1 + 32);
  if (*(_BYTE *)(v4 + 290))
    return (_QWORD *)WebCore::RenderLayerBacking::setContentsNeedDisplay(*((_QWORD *)a1 + 32), a2);
  v6 = *(_QWORD *)(v4 + 8);
  if ((*(_BYTE *)(v6 + 24) & 1) == 0)
    return (_QWORD *)WebCore::RenderLayerBacking::setContentsNeedDisplay(*((_QWORD *)a1 + 32), a2);
  v7 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 24) + 8)
                                                       + 40)
                                           + 8)
                               + 1944);
  v8 = *((_QWORD *)v7 + 50);
  if (!v8)
  {
    v15 = v4;
    v11 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v8 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v11, v7);
    v12 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v7 + 50);
    *((_QWORD *)v7 + 50) = v8;
    if (v12)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v12);
      WTF::fastFree(v13, v14);
      v8 = *((_QWORD *)v7 + 50);
    }
    v4 = v15;
  }
  if (*(_BYTE *)(v8 + 198)
    || *(_DWORD *)(WebCore::RenderView::compositor(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 32) + 24) + 8) + 40)
                                                                                       + 8)
                                                                           + 1944))
                 + 216) == 2)
  {
    return (_QWORD *)WebCore::RenderLayerBacking::setContentsNeedDisplay(*((_QWORD *)a1 + 32), a2);
  }
  v9 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 24) + 8) + 40) + 8)
                  + 1944);
  v16[0] = (int32x2_t)WebCore::RenderLayer::absoluteBoundingBox(a1);
  v16[1] = v10;
  WebCore::LayoutRect::LayoutRect(v17, v16);
  return WebCore::RenderView::repaintViewRectangle(v9, (const WebCore::LayoutRect *)v17);
}

WebCore::RenderObject *WebCore::RenderLayer::updateSelfPaintingLayer(void)::$_0::operator()(WebCore::RenderObject *this)
{
  if (this && (*((_BYTE *)this + 45) & 4) != 0 && (*((_BYTE *)this + 21) & 8) != 0)
    return WebCore::RenderBox::updateFloatPainterAfterSelfPaintingLayerChange(this);
  return this;
}

BOOL WebCore::RenderLayer::hasVisibleBoxDecorationsOrBackground(WebCore::RenderLayer *this)
{
  uint64_t v1;
  float v3;

  if ((*((_BYTE *)this + 23) & 0x60) != 0)
    return 1;
  v1 = *(_QWORD *)(*((_QWORD *)this + 11) + 16);
  if ((*(_BYTE *)(v1 + 52) & 0xE) == 0)
    return 0;
  v3 = 0.0;
  if ((*(_BYTE *)(v1 + 52) & 0xF) != 0)
  {
    v3 = *(float *)(v1 + 48);
    if ((*(_BYTE *)(v1 + 52) & 0x10) != 0 && v3 < 3.0)
      v3 = 3.0;
  }
  return v3 > 0.0;
}

WTF::StringImpl *WebCore::RenderLayer::createReflection(WebCore::RenderLayer *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  WebCore::RenderElement **v12;
  void *v13;
  uint64_t v14;
  const WebCore::Element *v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 8) + 40) + 8);
  WebCore::RenderLayer::createReflectionStyle(this, a3, (uint64_t)&v21);
  v5 = bmalloc::api::isoAllocate();
  v6 = WebCore::RenderObject::RenderObject(v5, 30, v4, 28, 0);
  *(_QWORD *)v6 = off_1E3422BC8;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 70) = 0;
  *(_DWORD *)(v6 + 80) = 0;
  v7 = v22;
  v8 = v23;
  v22 = 0;
  *(_QWORD *)(v6 + 88) = v7;
  *(_QWORD *)(v6 + 96) = v8;
  v9 = v24;
  v24 = 0u;
  *(_OWORD *)(v6 + 104) = v9;
  *(_QWORD *)(v6 + 120) = v25;
  v10 = v26;
  v26 = 0u;
  *(_OWORD *)(v6 + 128) = v10;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_QWORD *)(v6 + 192) = 0;
  *(_QWORD *)v6 = off_1E342F228;
  *(_DWORD *)(v6 + 20) |= 2u;
  v12 = (WebCore::RenderElement **)((char *)this + 208);
  v11 = (void *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = v6;
  if (v11)
    WebCore::RenderObjectDeleter::operator()((uint64_t)this + 208, (uint64_t)v11);
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v21, v11);
  v16 = *((_QWORD *)this + 4);
  if (!v16)
  {
    v17 = 0;
    goto LABEL_5;
  }
  v17 = *(_QWORD *)(v16 + 8);
  if (v17)
    goto LABEL_11;
  v17 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v17 = 1;
  *(_QWORD *)(v17 + 8) = v16;
  v20 = *(WTF **)(v16 + 8);
  *(_QWORD *)(v16 + 8) = v17;
  if (!v20)
    goto LABEL_11;
  if (*(_DWORD *)v20 != 1)
  {
    --*(_DWORD *)v20;
LABEL_11:
    ++*(_DWORD *)v17;
    goto LABEL_5;
  }
  WTF::fastFree(v20, v13);
  v17 = *(_QWORD *)(v16 + 8);
  if (v17)
    goto LABEL_11;
LABEL_5:
  v18 = (WTF *)*((_QWORD *)*v12 + 4);
  *((_QWORD *)*v12 + 4) = v17;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
      WTF::fastFree(v18, v13);
    else
      --*(_DWORD *)v18;
  }
  return WebCore::RenderElement::initializeStyle(*v12, (uint64_t)v13, v14, v15);
}

uint64_t WebCore::RenderLayer::createReflectionStyle@<X0>(WebCore::RenderLayer *this@<X0>, const WTF::StringImpl *a2@<X2>, uint64_t a3@<X8>)
{
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  __int128 v15;
  WTF *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  void *v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  _DWORD *v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WebCore::StyleRareNonInheritedData *v42;
  _DWORD *v43;
  WebCore::NinePieceImage::Data *v44;
  WTF *v45;
  void *v46;
  WTF *v47;
  void *v48;
  BOOL v49;
  WTF *v50;
  int v51;
  unsigned int v52;
  int v53;
  __int16 v54;
  char v55;
  int v56;
  __int16 v57;
  char v58;
  int v59;
  __int16 v60;
  char v61;

  {
    WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
  }
  *(_DWORD *)a3 = 0;
  v5 = (_DWORD *)qword_1ECE913C0;
  *(_QWORD *)(a3 + 8) = qword_1ECE913C0;
  ++*v5;
  v6 = (_DWORD *)qword_1ECE913D0;
  *(_QWORD *)(a3 + 16) = qword_1ECE913C8;
  ++*v6;
  *(_QWORD *)(a3 + 24) = v6;
  v7 = qword_1ECE913D8;
  ++*(_DWORD *)qword_1ECE913D8;
  v8 = qword_1ECE913E0;
  *(_QWORD *)(a3 + 32) = v7;
  *(_QWORD *)(a3 + 40) = v8;
  *(_QWORD *)(a3 + 48) = 0;
  v9 = qword_1ECE913F0;
  ++*(_DWORD *)qword_1ECE913F0;
  *(_QWORD *)(a3 + 56) = v9;
  WebCore::RenderStyle::inheritFrom((WebCore::RenderStyle *)a3, (const WebCore::RenderStyle *)(*((_QWORD *)this + 4) + 80), a2);
  switch(*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 88) + 40) + 208) + 4))
  {
    case 0:
      v59 = 0;
      v60 = 4;
      v61 = 0;
      v56 = 1120403456;
      v57 = 3;
      v58 = 1;
      v10 = WTF::fastMalloc((WTF *)0x28);
      LODWORD(v50) = 0;
      WORD2(v50) = 4;
      BYTE6(v50) = 0;
      WebCore::TranslateTransformOperation::TranslateTransformOperation(v10, (uint64_t)&v59, (uint64_t)&v56, (uint64_t)&v50, 5u);
      v53 = 0;
      v54 = 4;
      v55 = 0;
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 88) + 40) + 208) + 8;
      v12 = (_DWORD *)WTF::fastMalloc((WTF *)0x28);
      LODWORD(v50) = 0;
      WORD2(v50) = 4;
      BYTE6(v50) = 0;
      WebCore::TranslateTransformOperation::TranslateTransformOperation((uint64_t)v12, (uint64_t)&v53, v11, (uint64_t)&v50, 5u);
      v13 = WTF::fastMalloc((WTF *)0x28);
      v14 = (_DWORD *)v13;
      *(_DWORD *)(v13 + 8) = 1;
      *(_BYTE *)(v13 + 12) = 2;
      *(_QWORD *)v13 = off_1E3416F18;
      v15 = xmmword_1969FCD00;
      goto LABEL_10;
    case 1:
      v10 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v10 + 8) = 1;
      *(_BYTE *)(v10 + 12) = 2;
      *(_QWORD *)v10 = off_1E3416F18;
      *(_OWORD *)(v10 + 16) = xmmword_1969FCD00;
      *(_QWORD *)(v10 + 32) = 0x3FF0000000000000;
      v59 = 0;
      v60 = 4;
      v61 = 0;
      v56 = 1120403456;
      v57 = 3;
      v58 = 1;
      v12 = (_DWORD *)WTF::fastMalloc((WTF *)0x28);
      LODWORD(v50) = 0;
      WORD2(v50) = 4;
      BYTE6(v50) = 0;
      WebCore::TranslateTransformOperation::TranslateTransformOperation((uint64_t)v12, (uint64_t)&v59, (uint64_t)&v56, (uint64_t)&v50, 5u);
      v53 = 0;
      v54 = 4;
      v55 = 0;
      v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 88) + 40) + 208) + 8;
      v19 = WTF::fastMalloc((WTF *)0x28);
      v14 = (_DWORD *)v19;
      LODWORD(v50) = 0;
      WORD2(v50) = 4;
      BYTE6(v50) = 0;
      v20 = &v53;
      v21 = (int *)v18;
      goto LABEL_8;
    case 2:
      v10 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v10 + 8) = 1;
      *(_BYTE *)(v10 + 12) = 2;
      *(_QWORD *)v10 = off_1E3416F18;
      *(_OWORD *)(v10 + 16) = xmmword_1969FCCF0;
      *(_QWORD *)(v10 + 32) = 0x3FF0000000000000;
      v59 = 1120403456;
      v60 = 3;
      v61 = 1;
      v56 = 0;
      v57 = 4;
      v58 = 0;
      v12 = (_DWORD *)WTF::fastMalloc((WTF *)0x28);
      LODWORD(v50) = 0;
      WORD2(v50) = 4;
      BYTE6(v50) = 0;
      WebCore::TranslateTransformOperation::TranslateTransformOperation((uint64_t)v12, (uint64_t)&v59, (uint64_t)&v56, (uint64_t)&v50, 5u);
      v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 88) + 40) + 208) + 8;
      v53 = 0;
      v54 = 4;
      v55 = 0;
      v19 = WTF::fastMalloc((WTF *)0x28);
      v14 = (_DWORD *)v19;
      LODWORD(v50) = 0;
      WORD2(v50) = 4;
      BYTE6(v50) = 0;
      v21 = &v53;
      v20 = (int *)v22;
LABEL_8:
      WebCore::TranslateTransformOperation::TranslateTransformOperation(v19, (uint64_t)v20, (uint64_t)v21, (uint64_t)&v50, 5u);
      goto LABEL_11;
    case 3:
      v59 = 1120403456;
      v60 = 3;
      v61 = 1;
      v56 = 0;
      v57 = 4;
      v58 = 0;
      v10 = WTF::fastMalloc((WTF *)0x28);
      LODWORD(v50) = 0;
      WORD2(v50) = 4;
      BYTE6(v50) = 0;
      WebCore::TranslateTransformOperation::TranslateTransformOperation(v10, (uint64_t)&v59, (uint64_t)&v56, (uint64_t)&v50, 5u);
      v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 88) + 40) + 208) + 8;
      v53 = 0;
      v54 = 4;
      v55 = 0;
      v12 = (_DWORD *)WTF::fastMalloc((WTF *)0x28);
      LODWORD(v50) = 0;
      WORD2(v50) = 4;
      BYTE6(v50) = 0;
      WebCore::TranslateTransformOperation::TranslateTransformOperation((uint64_t)v12, v23, (uint64_t)&v53, (uint64_t)&v50, 5u);
      v13 = WTF::fastMalloc((WTF *)0x28);
      v14 = (_DWORD *)v13;
      *(_DWORD *)(v13 + 8) = 1;
      *(_BYTE *)(v13 + 12) = 2;
      *(_QWORD *)v13 = off_1E3416F18;
      v15 = xmmword_1969FCCF0;
LABEL_10:
      *(_OWORD *)(v13 + 16) = v15;
      *(_QWORD *)(v13 + 32) = 0x3FF0000000000000;
LABEL_11:
      v16 = (WTF *)WTF::fastMalloc((WTF *)0x18);
      ++*(_DWORD *)(v10 + 8);
      *(_QWORD *)v16 = v10;
      ++v12[2];
      *((_QWORD *)v16 + 1) = v12;
      v24 = v14[2];
      v14[2] = v24 + 1;
      *((_QWORD *)v16 + 2) = v14;
      if (v24)
        v14[2] = v24;
      else
        (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
      if (v12[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
      else
        --v12[2];
      if (*(_DWORD *)(v10 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      else
        --*(_DWORD *)(v10 + 8);
      v17 = 3;
      break;
    default:
      v16 = 0;
      v17 = 0;
      break;
  }
  v50 = v16;
  v51 = v17;
  v52 = v17;
  WebCore::RenderStyle::setTransform((WTF **)a3, (uint64_t)&v50);
  if (v52)
  {
    v31 = v50;
    v32 = 8 * v52;
    do
    {
      v33 = *(_DWORD **)v31;
      *(_QWORD *)v31 = 0;
      if (v33)
      {
        if (v33[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
        else
          --v33[2];
      }
      v31 = (WTF *)((char *)v31 + 8);
      v32 -= 8;
    }
    while (v32);
  }
  v26 = v50;
  if (v50)
  {
    v50 = 0;
    v51 = 0;
    WTF::fastFree(v26, v25);
  }
  v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 88) + 40) + 208);
  v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 40) + 216);
  v29 = *(_QWORD *)(v27 + 16);
  if (v28 != v29)
  {
    if ((v34 = *(_QWORD *)(v28 + 8), v35 = *(_QWORD *)(v29 + 8), v34 != v35)
      && (v34 ? (v49 = v35 == 0) : (v49 = 1),
          v49 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34))
      || !WebCore::operator==((unsigned __int8 *)(v28 + 16), (unsigned __int8 *)(v29 + 16))
      || *(unsigned __int8 *)(v28 + 4) != *(unsigned __int8 *)(v29 + 4)
      || !WebCore::operator==((unsigned __int8 *)(v28 + 48), (unsigned __int8 *)(v29 + 48))
      || *(unsigned __int8 *)(v28 + 5) != *(unsigned __int8 *)(v29 + 5)
      || !WebCore::operator==((unsigned __int8 *)(v28 + 80), (unsigned __int8 *)(v29 + 80))
      || *(unsigned __int8 *)(v28 + 6) != *(unsigned __int8 *)(v29 + 6)
      || *(unsigned __int8 *)(v28 + 7) != *(unsigned __int8 *)(v29 + 7))
    {
      v36 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)(a3 + 8));
      v37 = (_DWORD *)*((_QWORD *)v36 + 5);
      if (*v37 == 1)
      {
        v40 = *((_QWORD *)v36 + 5);
      }
      else
      {
        v38 = v36;
        v39 = WTF::fastMalloc((WTF *)0x288);
        v40 = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v39, (uint64_t)v37);
        v42 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v38 + 5);
        *((_QWORD *)v38 + 5) = v40;
        if (v42)
        {
          if (*(_DWORD *)v42 == 1)
          {
            WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v42, v41);
            WTF::fastFree(v47, v48);
            v40 = *((_QWORD *)v38 + 5);
          }
          else
          {
            --*(_DWORD *)v42;
          }
        }
      }
      v43 = *(_DWORD **)(v27 + 16);
      ++*v43;
      v44 = *(WebCore::NinePieceImage::Data **)(v40 + 216);
      *(_QWORD *)(v40 + 216) = v43;
      if (v44)
      {
        if (*(_DWORD *)v44 == 1)
        {
          WebCore::NinePieceImage::Data::~Data(v44);
          WTF::fastFree(v45, v46);
        }
        else
        {
          --*(_DWORD *)v44;
        }
      }
    }
  }
  return WebCore::RenderStyle::setUsedZIndex((WebCore::RenderStyle *)a3, 0);
}

WebCore::RenderLayerFilters *WebCore::RenderLayer::updateFiltersAfterStyleChange(WebCore::RenderLayer *this, unsigned int a2, const WebCore::FilterOperations *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::RenderLayerFilters *result;
  WTF *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v6 = *((_QWORD *)this + 4);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 88) + 32) + 32);
  v10 = *(_QWORD *)(v7 + 8);
  v8 = (unsigned int *)(v7 + 8);
  v9 = v10;
  v11 = v8[3];
  if (!(_DWORD)v11)
    goto LABEL_6;
  v12 = 0;
  do
  {
    if (!*(_BYTE *)(*(_QWORD *)(v9 + v12) + 12))
    {
      WebCore::RenderLayer::ensureLayerFilters(this);
      result = (WebCore::RenderLayerFilters *)WebCore::RenderLayerFilters::updateReferenceFilterClients(*((WebCore::RenderLayerFilters **)this + 31), (const WebCore::FilterOperations *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 88) + 32)+ 32)+ 8));
      goto LABEL_8;
    }
    v12 += 8;
  }
  while (8 * v11 != v12);
  if (((v25 = *(unsigned __int8 *)(v6 + 46), v25 == 103) || v25 == 83)
    && (_DWORD)v11 == 1
    && !*(_BYTE *)(*(_QWORD *)v9 + 12)
    || (WebCore::CSSFilter::isIdentity((WebCore::CSSFilter *)v6, (unsigned int ***)v8, a3) & 1) != 0
    || (v26 = *((_QWORD *)this + 32)) != 0 && *(_BYTE *)(v26 + 292))
  {
LABEL_6:
    result = (WebCore::RenderLayerFilters *)*((_QWORD *)this + 31);
    *((_QWORD *)this + 31) = 0;
    if (result)
    {
      WebCore::RenderLayerFilters::~RenderLayerFilters(result, v8);
      result = (WebCore::RenderLayerFilters *)WTF::fastFree(v14, v15);
    }
  }
  else
  {
    result = (WebCore::RenderLayerFilters *)*((_QWORD *)this + 31);
    if (result)
      result = (WebCore::RenderLayerFilters *)WebCore::RenderLayerFilters::removeReferenceFilterClients((uint64_t)result, v8);
  }
LABEL_8:
  if (a2 >= 4 && a3)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 32) + 32);
    v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 88) + 32) + 32);
    v18 = *(unsigned int *)(v16 + 20);
    if ((_DWORD)v18 != *(_DWORD *)(v17 + 20))
      return WebCore::RenderLayer::clearLayerFilters(this, v8);
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD **)(v16 + 8);
    if ((_DWORD)v18)
    {
      v21 = 8 * v18 - 8;
      v22 = v20;
      v23 = *(_QWORD **)(v17 + 8);
      while (1)
      {
        v24 = v21;
        result = (WebCore::RenderLayerFilters *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v22 + 24))(*v22, *v23);
        if (!(_DWORD)result)
          return WebCore::RenderLayer::clearLayerFilters(this, v8);
        ++v22;
        ++v23;
        v21 = v24 - 8;
        if (!v24)
          goto LABEL_15;
      }
    }
    v23 = *(_QWORD **)(v17 + 8);
    v22 = *(_QWORD **)(v16 + 8);
LABEL_15:
    if (v22 != &v20[v18] || v23 != (_QWORD *)(v19 + 8 * v18))
      return WebCore::RenderLayer::clearLayerFilters(this, v8);
  }
  return result;
}

_QWORD *WebCore::RenderLayer::ensureLayerFilters(_QWORD *this)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  WTF *v9;
  void *v10;

  if (!this[31])
  {
    v1 = this;
    v3 = WTF::fastMalloc((WTF *)0x98);
    *(_QWORD *)v3 = off_1E3429298;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = v1;
    *(_OWORD *)(v3 + 24) = 0u;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_OWORD *)(v3 + 56) = 0u;
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_BYTE *)(v3 + 104) = 1;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)(v3 + 108) = _D0;
    *(_QWORD *)(v3 + 124) = 0;
    *(_QWORD *)(v3 + 116) = 0;
    *(_QWORD *)(v3 + 136) = 0;
    *(_QWORD *)(v3 + 144) = 0;
    this = (_QWORD *)v1[31];
    v1[31] = v3;
    if (this)
    {
      WebCore::RenderLayerFilters::~RenderLayerFilters((WebCore::RenderLayerFilters *)this, v2);
      return (_QWORD *)WTF::fastFree(v9, v10);
    }
  }
  return this;
}

uint64_t WebCore::RenderLayerFilters::clearFilter(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;

  v2 = *(_QWORD *)(this + 136);
  *(_QWORD *)(this + 136) = 0;
  if (!v2)
    return this;
  v3 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  this = MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 8);
  v6 = v5 - 1;
  *(_QWORD *)(v3 + 8) = v5 - 1;
  if (v5 == 1)
  {
    v10 = *(_QWORD *)(v3 + 16);
    v7 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    v8 = v10 != 0;
  }
  else
  {
    v7 = 0;
    v8 = 1;
  }
  v9 = __ldxr((unsigned __int8 *)v3);
  if (v9 != 1)
  {
    __clrex();
LABEL_13:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (v6)
      return this;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
    goto LABEL_13;
  if (v6)
    return this;
LABEL_14:
  if (v7)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (!v8)
    return WTF::fastFree((WTF *)v3, a2);
  return this;
}

uint64_t WebCore::RenderLayer::isTransparentRespectingParentFrames(uint64_t this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!this)
    return this;
  v1 = this;
  v2 = 1.0;
  while (1)
  {
    v3 = *(_QWORD *)(v1 + 32);
    v2 = v2 * *(float *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 32) + 4);
    if (v2 < 0.01)
      return v2 < 0.01;
    v1 = *(_QWORD *)(v1 + 40);
    if (!v1)
      break;
LABEL_23:
    this = v2 < 0.01;
    if (!v1)
      return this;
  }
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + 40) + 8) + 528);
  if (!v4)
    return v2 < 0.01;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return v2 < 0.01;
  v6 = *(_QWORD *)(v5 + 120);
  if (!v6)
    return v2 < 0.01;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return v2 < 0.01;
  v8 = *(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v8)
    return v2 < 0.01;
  if ((*(_BYTE *)(v8 + 45) & 2) != 0)
  {
    this = 105;
    __break(0xC471u);
    return this;
  }
  if ((*(_BYTE *)(v8 + 45) & 0x10) == 0)
  {
    v9 = *(_QWORD *)(v8 + 32);
    if (!v9)
      return v2 < 0.01;
    v8 = *(_QWORD *)(v9 + 8);
    if (!v8)
      return v2 < 0.01;
    while ((*(_BYTE *)(v8 + 45) & 0x10) == 0)
    {
      v10 = *(_QWORD *)(v8 + 32);
      if (!v10)
        return 0;
      this = 0;
      v8 = *(_QWORD *)(v10 + 8);
      if (!v8)
        return this;
    }
  }
LABEL_21:
  if ((*(_BYTE *)(v8 + 21) & 0x80) != 0)
  {
    v1 = *(_QWORD *)(v8 + 144);
    goto LABEL_23;
  }
  while (1)
  {
    v11 = *(_QWORD *)(v8 + 32);
    if (!v11)
      return 0;
    v8 = *(_QWORD *)(v11 + 8);
    if (!v8)
      return 0;
    if ((*(_BYTE *)(v8 + 45) & 0x10) != 0)
      goto LABEL_21;
  }
}

WTF::MonotonicTime *WebCore::RenderLayer::simulateFrequentPaint(WebCore::RenderLayer *this)
{
  return WebCore::PaintFrequencyTracker::track((WebCore::RenderLayer *)((char *)this + 272), *(double *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 8)+ 40)+ 8)+ 528)+ 8)+ 24)+ 8)+ 1688));
}

uint64_t WebCore::RenderLayer::purgeFrontBufferForTesting(uint64_t this)
{
  uint64_t v1;
  _DWORD *v2;

  v1 = *(_QWORD *)(this + 256);
  if (v1)
  {
    v2 = *(_DWORD **)(v1 + 72);
    if (v2)
    {
      ++v2[2];
      this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 896))(v2);
      if (v2[2] == 1)
        return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
      else
        --v2[2];
    }
  }
  return this;
}

uint64_t WebCore::RenderLayer::purgeBackBufferForTesting(uint64_t this)
{
  uint64_t v1;
  _DWORD *v2;

  v1 = *(_QWORD *)(this + 256);
  if (v1)
  {
    v2 = *(_DWORD **)(v1 + 72);
    if (v2)
    {
      ++v2[2];
      this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 904))(v2);
      if (v2[2] == 1)
        return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
      else
        --v2[2];
    }
  }
  return this;
}

uint64_t WebCore::RenderLayer::markFrontBufferVolatileForTesting(uint64_t this)
{
  uint64_t v1;
  _DWORD *v2;

  v1 = *(_QWORD *)(this + 256);
  if (v1)
  {
    v2 = *(_DWORD **)(v1 + 72);
    if (v2)
    {
      ++v2[2];
      this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 880))(v2);
      if (v2[2] == 1)
        return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
      else
        --v2[2];
    }
  }
  return this;
}

uint64_t WebCore::canvasCompositingStrategy(WebCore *this, const WebCore::RenderObject *a2)
{
  uint64_t v2;
  _QWORD **v3;
  uint64_t v4;
  uint64_t v5;

  if (*((_BYTE *)this + 46) != 13)
  {
    __break(0xC471u);
    JUMPOUT(0x1963F1730);
  }
  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::canvasTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1963F1708);
  }
  v3 = *(_QWORD ***)(v2 + 248);
  if (!v3)
    return 0;
  (*(void (**)(_QWORD *, const WebCore::RenderObject *))(*v3[4] + 16))(v3[4], a2);
  if ((((uint64_t (*)(_QWORD **))(*v3)[15])(v3) & 1) != 0)
  {
    v5 = 2;
  }
  else
  {
    (*(void (**)(_QWORD *))(*v3[4] + 16))(v3[4]);
    if (((unsigned int (*)(_QWORD **))(*v3)[2])(v3)
      && (v4 = ((uint64_t (*)(_QWORD **))(*v3)[29])(v3)) != 0)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 136))(v4);
    }
    else
    {
      v5 = 0;
    }
    (*(void (**)(_QWORD *))(*v3[4] + 24))(v3[4]);
  }
  (*(void (**)(_QWORD *))(*v3[4] + 24))(v3[4]);
  return v5;
}

uint64_t WebCore::RenderLayerBacking::tiledBacking(WebCore::RenderLayerBacking *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 832))(*((_QWORD *)this + 9));
}

uint64_t WebCore::RenderLayerCompositor::removeFromScrollCoordinatedLayers(WebCore::RenderLayerCompositor *this, WebCore::RenderLayer *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = (_QWORD *)*((_QWORD *)this + 42);
  if (!v4)
    return (uint64_t)WebCore::RenderLayerCompositor::detachScrollCoordinatedLayer(this, (uint64_t)a2, 63);
  v5 = *((_QWORD *)a2 + 32);
  if (!WTF::WeakHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderLayer>((uint64_t)(v4 + 1), a2))
  {
LABEL_7:
    WTF::WeakHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderLayer>((uint64_t)(v4 + 3), a2);
    return (uint64_t)WebCore::RenderLayerCompositor::detachScrollCoordinatedLayer(this, (uint64_t)a2, 63);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 160) + 584))(*(_QWORD *)(v5 + 160));
  (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 168) + 584))(*(_QWORD *)(v5 + 168));
  v6 = *((_QWORD *)a2 + 4);
  if ((*(_BYTE *)(v6 + 45) & 1) != 0
    || (v7 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8)) == 0
    || (*(_WORD *)(v7 + 28) & 8) != 0)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 736))(*v4);
    goto LABEL_7;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

WTF *WebCore::clearBackingSharingLayerProviders(WTF *result, void *a2)
{
  _QWORD *v2;
  WTF *v4;
  WTF *v5;

  v2 = (_QWORD *)*((_QWORD *)result + 1);
  if (v2)
  {
    v4 = result;
    while (1)
    {
      v5 = *(WTF **)(*v2 + 8);
      if (v5)
        break;
      v2 = (_QWORD *)v2[2];
      if (!v2)
        return result;
    }
LABEL_4:
    result = (WTF *)*((_QWORD *)v5 + 10);
    if (result && *((void **)result + 1) == a2)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 4) + 24) + 8) + 40) + 8)
                    + 3405))
      {
        *((_QWORD *)v5 + 10) = 0;
      }
      else
      {
        WebCore::RenderLayer::clearClipRectsIncludingDescendants(v5, (void *)4);
        result = (WTF *)*((_QWORD *)v5 + 10);
        *((_QWORD *)v5 + 10) = 0;
        if (!result)
          goto LABEL_5;
      }
      if (*(_DWORD *)result == 1)
        result = (WTF *)WTF::fastFree(result, a2);
      else
        --*(_DWORD *)result;
    }
LABEL_5:
    while (1)
    {
      v2 = (_QWORD *)v2[2];
      if (!v2)
        break;
      v5 = *(WTF **)(*v2 + 8);
      if (v5)
      {
        ++*((_DWORD *)v4 + 6);
        goto LABEL_4;
      }
    }
    ++*((_DWORD *)v4 + 6);
  }
  return result;
}

uint64_t WTF::WeakListHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::clear(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *i;
  uint64_t v5;
  WTF *v6;
  WTF *v7;

  v2 = result;
  v3 = result + 8;
  for (i = *(WTF **)(result + 8); i; result = WTF::fastFree(v6, a2))
  {
    v6 = i;
    i = (WTF *)*((_QWORD *)i + 2);
    v7 = *(WTF **)v6;
    *(_QWORD *)v6 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
        WTF::fastFree(v7, a2);
      else
        --*(_DWORD *)v7;
    }
  }
  v5 = *(_QWORD *)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    result = WTF::fastFree((WTF *)(v5 - 16), a2);
    v5 = *(_QWORD *)v2;
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_DWORD *)(v3 + 16) = 0;
    if (v5)
    {
      LODWORD(v5) = *(_DWORD *)(v5 - 12);
      if (v5 > 0x7FFFFFFE)
        LODWORD(v5) = 0x7FFFFFFF;
    }
  }
  else
  {
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_DWORD *)(v3 + 16) = 0;
  }
  *(_DWORD *)(v2 + 28) = 2 * v5;
  return result;
}

uint64_t WebCore::RenderLayerBacking::setUsesDisplayListDrawing(WebCore::RenderLayerBacking *this, int a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (a2 != (unsigned __int16)(*(_WORD *)(result + 177) & 0x200) >> 9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 248))(result);
    result = *((_QWORD *)this + 9);
    if ((*(_WORD *)(result + 177) & 0x20) != 0)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 320))(result);
  }
  return result;
}

uint64_t WebCore::RenderLayerBacking::displayListAsText(uint64_t a1, unsigned __int8 a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 768))(*(_QWORD *)(a1 + 72), a2);
}

uint64_t WebCore::RenderLayerBacking::setIsTrackingDisplayListReplay(WebCore::RenderLayerBacking *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 784))(*((_QWORD *)this + 9));
}

uint64_t WebCore::RenderLayerBacking::replayDisplayListAsText(uint64_t a1, unsigned __int8 a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 800))(*(_QWORD *)(a1 + 72), a2);
}

WebCore::RenderLayerCompositor *WebCore::RenderLayerBacking::tiledBackingUsageChanged(WebCore::RenderLayerCompositor *this, const WebCore::GraphicsLayer *a2, int a3)
{
  WebCore::RenderView *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF *v7;
  void *v8;
  const WebCore::GraphicsLayer *v9;
  int v10;

  v3 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32)
                                                                               + 24)
                                                                   + 8)
                                                       + 40)
                                           + 8)
                               + 1944);
  v4 = *((_QWORD *)v3 + 50);
  if (!v4)
  {
    v10 = a3;
    v9 = a2;
    v4 = WTF::fastMalloc((WTF *)0x158);
    WebCore::RenderLayerCompositor::RenderLayerCompositor((WebCore::RenderLayerCompositor *)v4, v3);
    this = (WebCore::RenderLayerCompositor *)*((_QWORD *)v3 + 50);
    *((_QWORD *)v3 + 50) = v4;
    if (this)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(this);
      this = (WebCore::RenderLayerCompositor *)WTF::fastFree(v7, v8);
      v4 = *((_QWORD *)v3 + 50);
    }
    a2 = v9;
    a3 = v10;
  }
  v5 = *(_DWORD *)(v4 + 204);
  if (a3)
  {
    *(_DWORD *)(v4 + 204) = v5 + 1;
    v6 = (*(uint64_t (**)(const WebCore::GraphicsLayer *))(*(_QWORD *)a2 + 832))(a2);
    return (WebCore::RenderLayerCompositor *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 144))(v6, (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 24) + 8) + 40) + 8) + 528) + 8)+ 24)+ 8)+ 658) >> 4) & 1);
  }
  else
  {
    *(_DWORD *)(v4 + 204) = v5 - 1;
  }
  return this;
}

uint64_t WTF::downcast<WebCore::HTMLCanvasElement,WebCore::Element>(uint64_t result)
{
  if (result
    && ((*(_WORD *)(result + 28) & 0x10) == 0
     || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::canvasTag + 24)))
  {
    result = 105;
    __break(0xC471u);
  }
  return result;
}

BOOL WebCore::RenderLayerBacking::needsIOSDumpRenderTreeMainFrameRenderViewLayerIsAlwaysOpaqueHack(WebCore::RenderLayerBacking *this, const WebCore::GraphicsLayer *a2)
{
  return *((_BYTE *)this + 289) && (WebCore::IOSApplication::isDumpRenderTree(this) & 1) != 0;
}

_DWORD *WebCore::RenderLayerBacking::removeClippingStackLayers(_DWORD *this, WebCore::LayerAncestorClippingStack *a2)
{
  uint64_t v2;
  _DWORD *v3;

  if ((_DWORD)a2)
  {
    v2 = 96 * a2;
    v3 = this + 22;
    do
    {
      WebCore::GraphicsLayer::unparentAndClear(v3 - 2);
      this = WebCore::GraphicsLayer::unparentAndClear(v3);
      v3 += 24;
      v2 -= 96;
    }
    while (v2);
  }
  return this;
}

uint64_t WebCore::RenderLayerBacking::updateChildrenTransformAndAnchorPoint(WebCore::LayoutRect const&,WebCore::LayoutSize)::$_0::operator()(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v4 = *a1;
  if (!*(_BYTE *)(*a1 + 290))
  {
    v5 = *(_QWORD *)(v4 + 96);
    if (v5 && v5 != a2)
    {
      v14 = xmmword_1969FCC00;
      v15 = unk_1969FCC10;
      v16 = xmmword_1969FCC20;
      v17 = unk_1969FCC30;
      v10 = constinit_103;
      v11 = *(_OWORD *)algn_1969FCBD0;
      v12 = xmmword_1969FCBE0;
      v13 = unk_1969FCBF0;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v5 + 192))(v5, &v10);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 152))(v5, a1[1]);
    }
  }
  v7 = *(_QWORD *)(v4 + 160);
  if (v7)
    v8 = v7 == a2;
  else
    v8 = 1;
  if (!v8)
  {
    v14 = xmmword_1969FCC00;
    v15 = unk_1969FCC10;
    v16 = xmmword_1969FCC20;
    v17 = unk_1969FCC30;
    v10 = constinit_103;
    v11 = *(_OWORD *)algn_1969FCBD0;
    v12 = xmmword_1969FCBE0;
    v13 = unk_1969FCBF0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v7 + 192))(v7, &v10);
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 160) + 152))(*(_QWORD *)(v4 + 160), a1[1]);
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 168) + 200))(*(_QWORD *)(v4 + 168), 0);
  }
  result = *(_QWORD *)(v4 + 72);
  if (result != a2)
  {
    v14 = xmmword_1969FCC00;
    v15 = unk_1969FCC10;
    v16 = xmmword_1969FCC20;
    v17 = unk_1969FCC30;
    v10 = constinit_103;
    v11 = *(_OWORD *)algn_1969FCBD0;
    v12 = xmmword_1969FCBE0;
    v13 = unk_1969FCBF0;
    return (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)result + 192))(result, &v10);
  }
  return result;
}

unint64_t WebCore::RenderLayerBacking::updateChildrenTransformAndAnchorPoint(WebCore::LayoutRect const&,WebCore::LayoutSize)::$_1::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WebCore::RenderBox *v4;
  unint64_t result;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  char v14;

  v3 = *(_QWORD *)(a2 + 160);
  if (!v3)
  {
    if (*(_BYTE *)(a2 + 290) || (v3 = *(_QWORD *)(a2 + 96)) == 0)
    {
      v11 = *(_QWORD *)(a2 + 72);
      v12 = *(_QWORD **)(*(_QWORD *)(a2 + 8) + 32);
      v13 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v12[11] + 32) + 40) + 44);
      if (v13 >= 5)
        v14 = 2;
      else
        v14 = 0x705020406uLL >> (8 * v13);
      result = (*(uint64_t (**)(_QWORD *, _QWORD))(*v12 + 752))(v12, v14 & 7);
      *(_QWORD *)a1 = v11;
      goto LABEL_8;
    }
    result = WebCore::clippingLayerBox(*(WebCore **)(*(_QWORD *)(a2 + 8) + 32), (const WebCore::RenderLayerModelObject *)a2);
LABEL_7:
    *(_QWORD *)a1 = v3;
    v7 = (float)(int)result * 0.015625;
    v8 = (float)SHIDWORD(result) * 0.015625;
    v9 = (float)(int)v6 * 0.015625;
    v10 = (float)SHIDWORD(v6) * 0.015625;
LABEL_8:
    *(float *)(a1 + 8) = v7;
    *(float *)(a1 + 12) = v8;
    *(float *)(a1 + 16) = v9;
    *(float *)(a1 + 20) = v10;
    return result;
  }
  v4 = *(WebCore::RenderBox **)(*(_QWORD *)(a2 + 8) + 32);
  if ((*((_BYTE *)v4 + 45) & 4) != 0)
  {
    result = WebCore::RenderBox::paddingBoxRect(v4);
    goto LABEL_7;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RenderLayerBacking::contentOffsetInCompositingLayer(WebCore::RenderLayerBacking *this)
{
  int v1;
  int v2;
  unsigned int v3;
  int v4;
  int v5;
  BOOL v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  v1 = *((_DWORD *)this + 44);
  v2 = *((_DWORD *)this + 45);
  if (v1 == 0x80000000)
    v3 = 0x7FFFFFFF;
  else
    v3 = -v1;
  v4 = *((_DWORD *)this + 50);
  v5 = *((_DWORD *)this + 51);
  v6 = __OFADD__(v3, v4);
  v7 = v3 + v4;
  LODWORD(v8) = (v3 >> 31) + 0x7FFFFFFF;
  if (v6)
    v8 = v8;
  else
    v8 = v7;
  if (v2 == 0x80000000)
    v9 = 0x7FFFFFFF;
  else
    v9 = -v2;
  v6 = __OFADD__(v9, v5);
  v10 = v9 + v5;
  LODWORD(v11) = (v9 >> 31) + 0x7FFFFFFF;
  if (v6)
    v11 = v11;
  else
    v11 = v10;
  return v8 | (v11 << 32);
}

uint64_t WebCore::RenderLayerBacking::layerForContents(WebCore::RenderLayerBacking *this)
{
  WebCore::RenderEmbeddedObject *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = *(WebCore::RenderEmbeddedObject **)(*((_QWORD *)this + 1) + 32);
  if (*((_BYTE *)v2 + 46) != 7 || !WebCore::RenderEmbeddedObject::requiresAcceleratedCompositing(v2))
    return 0;
  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
  if (*(_BYTE *)(v4 + 46) == 7)
  {
    v5 = *(_QWORD *)(v4 + 232);
    if (v5
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5)
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 248))(v5) == 2)
    {
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 264))(v5);
    }
    return 0;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RenderLayer::setChildrenNeedCompositingGeometryUpdate(uint64_t this)
{
  int v1;

  *(_DWORD *)(this + 12) |= 0x400u;
  if ((*(_BYTE *)(this + 24) & 4) != 0)
  {
    this = *(_QWORD *)(this + 40);
    if (this)
    {
LABEL_4:
      do
      {
        v1 = *(_DWORD *)(this + 12);
        if ((v1 & 2) != 0)
          break;
        *(_DWORD *)(this + 12) = v1 | 2;
        if ((*(_BYTE *)(this + 24) & 4) == 0)
        {
          while (1)
          {
            this = *(_QWORD *)(this + 40);
            if (!this)
              return this;
            if ((*(_BYTE *)(this + 24) & 0x4A) != 0)
              goto LABEL_9;
          }
        }
        this = *(_QWORD *)(this + 40);
LABEL_9:
        ;
      }
      while (this);
    }
  }
  else
  {
    while (1)
    {
      this = *(_QWORD *)(this + 40);
      if (!this)
        break;
      if ((*(_BYTE *)(this + 24) & 0x4A) != 0)
        goto LABEL_4;
    }
  }
  return this;
}

WebCore *WebCore::RenderLayerBacking::updateConfigurationAfterStyleChange(WebCore::RenderLayerBacking *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t (*v5)();
  _BOOL4 v6;
  WebCore::RenderObject *v7;
  uint64_t v8;
  __n128 v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _DWORD *v17;
  const WebCore::RenderObject *v18;
  WebCore *result;
  WebCore::RenderView *v20;
  WebCore::RenderLayerCompositor *v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  uint64_t v27;
  WebCore::RenderLayerCompositor *v28;
  WebCore::RenderLayerCompositor *v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  _DWORD *v33;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 88);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 48);
  v4 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  if (*(_QWORD *)(v3 + 8))
  {
    while (!*(_QWORD *)(v3 + 16))
    {
      v3 = *(_QWORD *)(v3 + 8);
      if (!v3)
        goto LABEL_6;
    }
    goto LABEL_56;
  }
  if (*(_QWORD *)(v3 + 16))
    v5 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  else
    v5 = 0;
  if (v5)
  {
LABEL_56:
    v6 = 1;
    goto LABEL_9;
  }
LABEL_6:
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 216) + 8))
    v4 = 0;
  v6 = v4 != 0;
LABEL_9:
  WebCore::RenderLayerBacking::updateMaskingLayer(this, v6, *(_QWORD *)(*(_QWORD *)(v2 + 40) + 264) != 0);
  v7 = *(WebCore::RenderObject **)(*((_QWORD *)this + 1) + 32);
  if ((*((_BYTE *)v7 + 21) & 0x40) == 0 || !*(_BYTE *)WebCore::RenderObject::rareData(v7))
  {
    v8 = *((_QWORD *)this + 9);
    v33 = 0;
LABEL_11:
    (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v8 + 120))(v8, &v33);
    v10 = v33;
    v33 = 0;
    if (v10)
    {
      if (v10[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
      else
        --v10[2];
    }
    goto LABEL_14;
  }
  v23 = *(_QWORD *)(*((_QWORD *)this + 1) + 208);
  if (v23)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v23 + 144) + 256);
    if (v24)
    {
      v25 = *(_DWORD **)(v24 + 72);
      v8 = *((_QWORD *)this + 9);
      if (v25)
        ++v25[2];
      v33 = v25;
      goto LABEL_11;
    }
  }
LABEL_14:
  v11 = *((_QWORD *)this + 1);
  v12 = *(_QWORD *)(v11 + 32);
  v9.n128_u32[0] = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 88) + 32) + 4);
  while (1)
  {
    v11 = *(_QWORD *)(v11 + 40);
    if (!v11)
      break;
    if ((*(_BYTE *)(v11 + 24) & 0x4A) != 0)
    {
      if (!*(_QWORD *)(v11 + 256))
      {
LABEL_18:
        v9.n128_f32[0] = v9.n128_f32[0]
                       * *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 32) + 88) + 32) + 4);
        while (1)
        {
          v11 = *(_QWORD *)(v11 + 40);
          if (!v11)
            break;
          if ((*(_BYTE *)(v11 + 24) & 0x4A) != 0)
          {
            if (!*(_QWORD *)(v11 + 256))
              goto LABEL_18;
            goto LABEL_22;
          }
        }
      }
      break;
    }
  }
LABEL_22:
  (*(void (**)(_QWORD, __n128))(**((_QWORD **)this + 9) + 280))(*((_QWORD *)this + 9), v9);
  *((_BYTE *)this + 292) = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 9) + 288))(*((_QWORD *)this + 9), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 88) + 32) + 32) + 8);
  *((_BYTE *)this + 293) = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 9) + 296))(*((_QWORD *)this + 9), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 88) + 40) + 72) + 8);
  v13 = *((_QWORD *)this + 1);
  v14 = *(_QWORD *)(v13 + 24);
  if ((v14 & 0x20) != 0 && (v14 & 0x10) != 0)
  {
    v15 = !WebCore::RenderLayerBacking::paintsIntoWindow(this);
    v13 = *((_QWORD *)this + 1);
    v14 = *(_QWORD *)(v13 + 24);
  }
  else
  {
    v15 = 0;
  }
  if ((v14 & 1) != 0)
  {
    v20 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 32) + 24) + 8)
                                                          + 40)
                                              + 8)
                                  + 1944);
    v21 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v20 + 50);
    if (!v21)
    {
      v32 = v12;
      v28 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
      v21 = (WebCore::RenderLayerCompositor *)WebCore::RenderLayerCompositor::RenderLayerCompositor(v28, v20);
      v29 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v20 + 50);
      *((_QWORD *)v20 + 50) = v21;
      if (v29)
      {
        WebCore::RenderLayerCompositor::~RenderLayerCompositor(v29);
        WTF::fastFree(v30, v31);
        v21 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v20 + 50);
      }
      v12 = v32;
    }
    v15 = WebCore::RenderLayerCompositor::viewHasTransparentBackground(v21, 0) & v15;
  }
  v16 = (_BYTE *)*((_QWORD *)this + 9);
  if ((_DWORD)v15 != (v16[179] & 1))
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v16 + 112))(v16, v15);
  v17 = (_DWORD *)*((_QWORD *)this + 6);
  if (v17)
  {
    if (!v17[3])
    {
      __break(0xC471u);
      JUMPOUT(0x1963F23E4);
    }
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)v17 + 80) + 312))(*(_QWORD *)(*(_QWORD *)v17 + 80), (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 88) + 40) + 636) >> 20) & 0x1F);
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 9) + 312))(*((_QWORD *)this + 9), 1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 9) + 312))(*((_QWORD *)this + 9), (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 88) + 40) + 636) >> 20) & 0x1F);
  }
  result = *(WebCore **)(*((_QWORD *)this + 1) + 32);
  if (*((_BYTE *)result + 46) == 13)
  {
    result = (WebCore *)WebCore::canvasCompositingStrategy(result, v18);
    if ((_DWORD)result == 2)
    {
      v22 = (*(_WORD *)(*(_QWORD *)(v12 + 104) + 234) & 7u) - 3 < 2;
      (*(void (**)(_QWORD, _BOOL8))(**((_QWORD **)this + 9) + 600))(*((_QWORD *)this + 9), v22);
      result = (WebCore *)(*(uint64_t (**)(_QWORD, _BOOL8))(**((_QWORD **)this + 9) + 608))(*((_QWORD *)this + 9), v22);
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 46) == 48)
  {
    v26 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 88) + 32) + 151) & 7;
    if (v26 == 2)
      v27 = 2;
    else
      v27 = v26 == 1;
    return (WebCore *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 9) + 392))(*((_QWORD *)this + 9), v27);
  }
  return result;
}

BOOL WebCore::RenderLayerCompositor::clipsCompositingDescendants(WebCore::RenderLayerCompositor *this, const WebCore::RenderLayer *a2)
{
  int v3;

  if ((this & 0x4000000) == 0)
    return 0;
  v3 = *((_DWORD *)a2 + 5);
  if ((v3 & 0x1800000) == 0x1000000)
  {
    if ((v3 & 0x10000) == 0
      && (((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 40) + 642) << 48) & 0x20000000000000) == 0)
    {
      return 0;
    }
  }
  else if ((v3 & 0x10000) == 0)
  {
    return 0;
  }
  if ((this & 0x8000000) != 0)
    return 0;
  return WebCore::canUseDescendantClippingLayer((unint64_t)this, a2);
}

BOOL WebCore::PaintedContentsInfo::isDirectlyCompositedImage(WebCore::PaintedContentsInfo *this)
{
  int v1;

  v1 = *((_DWORD *)this + 4);
  if (!v1)
  {
    if ((WebCore::RenderLayerBacking::isSimpleContainerCompositingLayer(*(_QWORD **)this, this) & 1) != 0)
    {
      v1 = 1;
    }
    else if ((WebCore::RenderLayerBacking::isDirectlyCompositedImage(*(WebCore::RenderLayerBacking **)this) & 1) != 0)
    {
      v1 = 2;
    }
    else if (WebCore::RenderLayerBacking::isUnscaledBitmapOnly(*(WebCore::RenderLayerBacking **)this))
    {
      v1 = 3;
    }
    else
    {
      v1 = 4;
    }
    *((_DWORD *)this + 4) = v1;
  }
  return v1 == 2;
}

uint64_t WebCore::RenderLayerBacking::updateImageContents(uint64_t this, WebCore::PaintedContentsInfo *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  WebCore::RenderLayerBacking *v7;
  uint64_t v8;

  v3 = *(_QWORD *)(*(_QWORD *)(this + 8) + 32);
  if ((*(_BYTE *)(v3 + 52) & 7) != 3 || (*(_BYTE *)(v3 + 53) & 1) == 0)
  {
    this = 96;
    __break(0xC471u);
  }
  else
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v3 + 224) + 24);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = (WebCore::RenderLayerBacking *)this;
        this = (uint64_t)WebCore::CachedImage::imageForRenderer(*(WebCore::CachedImage **)(v5 + 8), (const WebCore::RenderObject *)v3);
        if (this)
        {
          if ((*(_WORD *)(v6 + 557) & 0x400) == 0)
          {
            v8 = this;
            WebCore::RenderLayerBacking::updateContentsRects(v7);
            (*(void (**)(_QWORD *, uint64_t))(**((_QWORD **)v7 + 9) + 480))(*((_QWORD **)v7 + 9), v8);
            WebCore::RenderLayerBacking::updateDrawsContent(v7, a2);
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 256))(v8);
          }
        }
      }
    }
  }
  return this;
}

BOOL WebCore::PaintedContentsInfo::isUnscaledBitmapOnly(WebCore::PaintedContentsInfo *this)
{
  int v1;

  v1 = *((_DWORD *)this + 4);
  if (!v1)
  {
    if ((WebCore::RenderLayerBacking::isSimpleContainerCompositingLayer(*(_QWORD **)this, this) & 1) != 0)
    {
      v1 = 1;
    }
    else if ((WebCore::RenderLayerBacking::isDirectlyCompositedImage(*(WebCore::RenderLayerBacking **)this) & 1) != 0)
    {
      v1 = 2;
    }
    else if (WebCore::RenderLayerBacking::isUnscaledBitmapOnly(*(WebCore::RenderLayerBacking **)this))
    {
      v1 = 3;
    }
    else
    {
      v1 = 4;
    }
    *((_DWORD *)this + 4) = v1;
  }
  return v1 == 3;
}

uint64_t WebCore::RenderLayerBacking::updateConfiguration(WebCore::RenderLayer const*)::$_0::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v3 = result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
    if ((_DWORD)result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 248))(a2);
      if ((_DWORD)result == 1)
      {
        v4 = *(_QWORD *)(v3 + 72);
        v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 256))(a2);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 512))(v4, v5, 5);
      }
    }
  }
  return result;
}

uint64_t WTF::downcast<WebCore::HTMLVideoElement,WebCore::Element>(uint64_t result)
{
  if ((*(_WORD *)(result + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::downcast<WebCore::HTMLModelElement,WebCore::Element>(uint64_t result)
{
  __int16 v1;

  if (result)
  {
    v1 = *(_WORD *)(result + 28);
    if ((v1 & 0x10) == 0
      || (v1 & 0x110) == 0x110
      || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::modelTag + 24))
    {
      result = 105;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebCore::RenderLayerCompositor::attachWidgetContentLayersIfNecessary(WebCore::RenderLayerCompositor *this, WebCore::RenderWidget *a2)
{
  uint64_t v2;
  WebCore::RenderLayerBacking *v3;
  _DWORD *v6;
  _BOOL4 v7;
  _QWORD *v8;
  uint64_t v9;
  WebCore::RenderView *v10;
  _DWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v17;
  _DWORD *v18;
  int v19;
  _DWORD *v20;
  _DWORD *v21;
  void *v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  _DWORD *v46;
  WebCore::RenderLayerCompositor *v47;
  WebCore::RenderLayerCompositor *v48;
  WTF *v49;
  void *v50;
  _DWORD *v51;
  const WebCore::RenderLayer *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  WebCore::RenderEmbeddedObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t *v63;
  _DWORD *v64;
  _DWORD *v65;

  v2 = *((_QWORD *)a2 + 18);
  v3 = *(WebCore::RenderLayerBacking **)(v2 + 256);
  if (!v3)
  {
    v7 = 0;
    LODWORD(v10) = 0;
    return v7 | ((_DWORD)v10 << 8);
  }
  v6 = (_DWORD *)*((_QWORD *)v3 + 21);
  if (v6 || (v6 = (_DWORD *)*((_QWORD *)v3 + 12)) != 0 || (v6 = (_DWORD *)*((_QWORD *)v3 + 9)) != 0)
    ++v6[2];
  v64 = v6;
  v7 = (*(_DWORD *)(*((_QWORD *)a2 + 13) + 236) & 0x4000000 | *((_DWORD *)a2 + 30) & 0x30) == 0;
  v63 = (uint64_t *)&v64;
  if (*((_BYTE *)a2 + 46) != 7
    || !WebCore::RenderEmbeddedObject::requiresAcceleratedCompositing(a2)
    || (v51 = (_DWORD *)WebCore::RenderLayerBacking::layerForContents(v3)) == 0)
  {
    v8 = *(_QWORD **)(*((_QWORD *)a2 + 3) + 8);
    if (((*(uint64_t (**)(_QWORD *))(*v8 + 192))(v8) & 1) == 0)
    {
      __break(0xC471u);
      goto LABEL_105;
    }
    v9 = v8[14];
    if (!v9)
      goto LABEL_9;
    v13 = *(_QWORD *)(v9 + 8);
    if (!v13)
      goto LABEL_9;
    if (*(_BYTE *)(v13 + 144))
      goto LABEL_9;
    v14 = *(_QWORD *)(v13 + 296);
    if (!v14)
      goto LABEL_9;
    v10 = *(WebCore::RenderView **)(v14 + 1944);
    if (!v10)
    {
      v7 = 0;
      goto LABEL_10;
    }
    v15 = *((_QWORD *)v10 + 50);
    if (!v15)
    {
      v47 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
      v15 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v47, v10);
      v48 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v10 + 50);
      *((_QWORD *)v10 + 50) = v15;
      if (v48)
      {
        WebCore::RenderLayerCompositor::~RenderLayerCompositor(v48);
        WTF::fastFree(v49, v50);
        v15 = *((_QWORD *)v10 + 50);
      }
    }
    if (!*(_BYTE *)(v15 + 195) || *(_DWORD *)(v15 + 216) != 2)
    {
LABEL_9:
      v7 = 0;
      LODWORD(v10) = 0;
      goto LABEL_10;
    }
    v17 = *(_DWORD **)(v15 + 256);
    if (!v17)
    {
      v17 = *(_DWORD **)(v15 + 224);
      if (!v17)
        goto LABEL_84;
    }
    v18 = v64;
    v19 = v64[49];
    if (v7)
    {
      if (!v19)
        goto LABEL_27;
      if (v19 != 1 || **((_DWORD ***)v64 + 23) != v17)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v64 + 912))(v64);
        v40 = (WTF *)*((_QWORD *)v18 + 23);
        v41 = v18[49];
        if ((_DWORD)v41)
        {
          v42 = 8 * v41;
          v43 = 8 * v41;
          v44 = (uint64_t *)*((_QWORD *)v18 + 23);
          do
          {
            v45 = *v44++;
            *(_QWORD *)(v45 + 200) = 0;
            v43 -= 8;
          }
          while (v43);
          if (v18[48])
          {
            do
            {
              v46 = *(_DWORD **)v40;
              *(_QWORD *)v40 = 0;
              if (v46)
              {
                if (v46[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 16))(v46);
                else
                  --v46[2];
              }
              v40 = (WTF *)((char *)v40 + 8);
              v42 -= 8;
            }
            while (v42);
            v18[49] = 0;
            v40 = (WTF *)*((_QWORD *)v18 + 23);
            goto LABEL_68;
          }
        }
        else if (v18[48])
        {
LABEL_68:
          if (v40)
          {
            *((_QWORD *)v18 + 23) = 0;
            v18[48] = 0;
            WTF::fastFree(v40, v39);
          }
        }
LABEL_27:
        v20 = v64;
        ++v17[2];
        v65 = v17;
        (*(void (**)(_DWORD *, _DWORD **))(*(_QWORD *)v20 + 64))(v20, &v65);
        v21 = v65;
        v65 = 0;
        if (v21)
        {
          if (v21[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
          else
            --v21[2];
        }
        goto LABEL_43;
      }
LABEL_84:
      LODWORD(v10) = 0;
      goto LABEL_44;
    }
    if (!v19)
      goto LABEL_84;
    (*(void (**)(_DWORD *))(*(_QWORD *)v64 + 912))(v64);
    v23 = (WTF *)*((_QWORD *)v18 + 23);
    v24 = v18[49];
    if ((_DWORD)v24)
    {
      v25 = 8 * v24;
      v26 = 8 * v24;
      v27 = (uint64_t *)*((_QWORD *)v18 + 23);
      do
      {
        v28 = *v27++;
        *(_QWORD *)(v28 + 200) = 0;
        v26 -= 8;
      }
      while (v26);
      if (v18[48])
      {
        do
        {
          v29 = *(_DWORD **)v23;
          *(_QWORD *)v23 = 0;
          if (v29)
          {
            if (v29[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 16))(v29);
            else
              --v29[2];
          }
          v23 = (WTF *)((char *)v23 + 8);
          v25 -= 8;
        }
        while (v25);
        v18[49] = 0;
        v23 = (WTF *)*((_QWORD *)v18 + 23);
        goto LABEL_41;
      }
    }
    else if (v18[48])
    {
LABEL_41:
      if (v23)
      {
        *((_QWORD *)v18 + 23) = 0;
        v18[48] = 0;
        WTF::fastFree(v23, v22);
      }
    }
LABEL_43:
    LODWORD(v10) = 1;
LABEL_44:
    if (*((_QWORD *)v3 + 30))
    {
      v30 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8) + 40) + 8) + 528)
                                                                                          + 8)
                                                                              + 24)
                                                                  + 8));
      if (v30)
      {
        v31 = v30;
        v32 = *(_QWORD **)(*((_QWORD *)a2 + 3) + 8);
        if (((*(uint64_t (**)(_QWORD *))(*v32 + 192))(v32) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1963F2BC4);
        }
        v33 = v32[14];
        if (v33)
        {
          v33 = *(_QWORD *)(v33 + 8);
          if (v33)
          {
            if (*(_BYTE *)(v33 + 144))
              v33 = 0;
            else
              v33 = *(_QWORD *)(v33 + 296);
          }
        }
        v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 1944) + 248) + 328) + 296);
        if (v34)
        {
          v35 = *(_QWORD *)(v34 + 1944);
          if (v35)
          {
            v36 = *(_QWORD *)(*(_QWORD *)(v35 + 144) + 256);
            if (v36)
            {
              v37 = *(_QWORD *)(v36 + 224);
              if (v37)
              {
                if (v7)
                {
                  v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 248) + 328) + 632)
                                  + 8);
                  v7 = 1;
                  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v31 + 240))(v31, *(_QWORD *)(v38 + 32), *(_QWORD *)(v38 + 40), 1);
                }
                else
                {
                  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v31 + 248))(v31, v37, *(_QWORD *)(v36 + 232));
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_10;
  }
  LODWORD(v10) = WebCore::RenderLayerCompositor::attachWidgetContentLayersIfNecessary(WebCore::RenderWidget &)::$_0::operator()(&v63, v51, v7);
  if (!WebCore::RenderLayerCompositor::isLayerForPluginWithScrollCoordinatedContents(*(WebCore::RenderLayerCompositor **)(v2 + 32), v52))goto LABEL_10;
  v53 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8) + 40) + 8)
                                                                                                  + 528)
                                                                                      + 8)
                                                                          + 24)
                                                              + 8));
  if (!v53)
    goto LABEL_10;
  v54 = *((_QWORD *)v3 + 32);
  if (!v54)
    goto LABEL_10;
  v55 = v53;
  v56 = *((_QWORD *)v3 + 33);
  v57 = *((unsigned __int8 *)a2 + 46);
  if (v57 == 7)
    v58 = a2;
  else
    v58 = 0;
  if (v57 == 7)
    ++*((_DWORD *)a2 + 4);
  WebCore::RenderEmbeddedObject::willAttachScrollingNode((uint64_t)v58);
  v59 = WebCore::RenderEmbeddedObject::scrollingNodeID(v58);
  if (v59)
  {
    if (v7)
    {
      v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 248) + 328) + 632) + 8);
      (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t *))(*(_QWORD *)v55 + 240))(v55, *(_QWORD *)(v61 + 32), *(_QWORD *)(v61 + 40), 3, v59, v60, v54, v56, 0, v63);
      WebCore::RenderEmbeddedObject::didAttachScrollingNode((uint64_t)v58);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v55 + 248))(v55, v59, v60);
    }
  }
  if (v57 != 7)
    goto LABEL_10;
  v62 = *((_DWORD *)a2 + 4);
  if (!v62)
  {
    __break(0xC471u);
LABEL_105:
    JUMPOUT(0x1963F2B88);
  }
  *((_DWORD *)a2 + 4) = v62 - 1;
LABEL_10:
  v11 = v64;
  v64 = 0;
  if (v11)
  {
    if (v11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
    else
      --v11[2];
  }
  return v7 | ((_DWORD)v10 << 8);
}

uint64_t WebCore::RenderLayerBacking::compositedBounds(WebCore::RenderLayerBacking *this)
{
  return *((_QWORD *)this + 22);
}

uint64_t WebCore::ComputedOffsets::fromParentGraphicsLayer(WebCore::ComputedOffsets *this)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;

  if (*((_BYTE *)this + 20))
    return *(_QWORD *)((char *)this + 12);
  if (*((_BYTE *)this + 8))
  {
    v3 = *(_QWORD *)this;
  }
  else
  {
    v2 = WebCore::RenderLayer::convertToLayerCoords(*((WebCore::RenderLayer **)this + 5), *((WebCore::RenderLayer **)this + 6), *((_QWORD *)this + 7), 1);
    v3 = WebCore::computeOffsetFromAncestorGraphicsLayer(*((_QWORD *)this + 6), v2, *((float *)this + 20));
    if (!*((_BYTE *)this + 8))
      *((_BYTE *)this + 8) = 1;
    *(_QWORD *)this = v3;
  }
  v4 = *((_DWORD *)this + 16);
  v5 = *((_DWORD *)this + 17);
  v6 = __OFSUB__((_DWORD)v3, v4);
  LODWORD(v7) = v3 - v4;
  if (v6)
    v7 = (v3 >> 31) + 0x7FFFFFFF;
  else
    v7 = v7;
  v6 = __OFSUB__(HIDWORD(v3), v5);
  v8 = HIDWORD(v3) - v5;
  LODWORD(v9) = (HIDWORD(v3) >> 31) + 0x7FFFFFFF;
  if (v6)
    v9 = v9;
  else
    v9 = v8;
  result = v7 | (v9 << 32);
  if (!*((_BYTE *)this + 20))
    *((_BYTE *)this + 20) = 1;
  *(_QWORD *)((char *)this + 12) = result;
  return result;
}

unint64_t WebCore::clippingLayerBox(WebCore *this, const WebCore::RenderLayerModelObject *a2)
{
  unint64_t result;
  unint64_t v4;
  int v5;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  signed int v17;
  signed int v18;
  int v19;
  int v20;
  BOOL v21;
  uint64_t v22;

  result = 0xC0000010C0000010;
  LODWORD(v4) = -1073741808;
  v5 = 2147483615;
  v6 = *((_DWORD *)this + 5);
  if ((v6 & 0x10000) == 0)
  {
    v7 = -1073741808;
    LODWORD(v8) = 2147483615;
    goto LABEL_6;
  }
  if ((*((_BYTE *)this + 45) & 4) != 0)
  {
    ++*((_DWORD *)this + 4);
    v22 = 0;
    result = (*(uint64_t (**)(WebCore *, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 1416))(this, &v22, 0, 0, 0);
    v10 = *((_DWORD *)this + 4);
    if (!v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1963F3048);
    }
LABEL_5:
    v7 = result;
    v5 = v9;
    v8 = HIDWORD(v9);
    v4 = HIDWORD(result);
    *((_DWORD *)this + 4) = v10 - 1;
    v6 = *((_DWORD *)this + 5);
    goto LABEL_6;
  }
  v21 = (*((_BYTE *)this + 52) & 7) == 4 && (*((_BYTE *)this + 53) & 1) == 0;
  v7 = -1073741808;
  LODWORD(v8) = 2147483615;
  if (v21)
  {
    ++*((_DWORD *)this + 4);
    v22 = 0;
    result = (*(uint64_t (**)(WebCore *, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 880))(this, &v22, 0, 0, 0);
    v10 = *((_DWORD *)this + 4);
    if (!v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1963F3028);
    }
    goto LABEL_5;
  }
LABEL_6:
  if ((v6 & 0x1800000) == 0x1000000
    && ((*(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 642) << 16)) << 32)) & 0x20000000000000) != 0
    && (*((_BYTE *)this + 45) & 4) != 0)
  {
    v22 = 0;
    v11 = WebCore::RenderBox::clipRect(this, (const WebCore::LayoutPoint *)&v22, 0);
    if (v7 <= (int)v11)
      v14 = v11;
    else
      v14 = v7;
    if ((int)v4 <= SHIDWORD(v11))
      v15 = HIDWORD(v11);
    else
      v15 = v4;
    v16 = v7 + v5;
    if (__OFADD__(v7, v5))
      v16 = (v7 >> 31) + 0x7FFFFFFF;
    v17 = v11 + v12;
    if (__OFADD__((_DWORD)v11, v12))
      v17 = (v11 >> 31) + 0x7FFFFFFF;
    if (v17 < v16)
      v16 = v17;
    v18 = v4 + v8;
    if (__OFADD__((_DWORD)v4, (_DWORD)v8))
      v18 = (v4 >> 31) + 0x7FFFFFFF;
    v19 = HIDWORD(v11) + v13;
    if (__OFADD__(HIDWORD(v11), v13))
      v19 = (HIDWORD(v11) >> 31) + 0x7FFFFFFF;
    if (v19 >= v18)
      v20 = v18;
    else
      v20 = v19;
    if (v14 >= v16 || (int)v15 >= v20)
    {
      v14 = 0;
      v15 = 0;
    }
    return (v15 << 32) | v14;
  }
  return result;
}

int *WebCore::snappedGraphicsLayer(WebCore *this, const WebCore::LayoutSize *a2, const WebCore::LayoutSize *a3, const WebCore::RenderLayerModelObject *a4)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int *result;
  unsigned int v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  _DWORD v17[4];
  __int128 v18;
  _QWORD v19[2];

  v19[0] = *(_QWORD *)a2;
  v19[1] = a3;
  WebCore::snapRectToDevicePixelsIfNeeded((WebCore *)v19, a4, a3);
  v17[0] = v6;
  v17[1] = v7;
  v17[2] = v8;
  v17[3] = v9;
  result = WebCore::LayoutRect::LayoutRect((int *)&v18, (const WebCore::FloatRect *)v17);
  *(_OWORD *)this = v18;
  v11 = *((_DWORD *)this + 1);
  v12 = *((_DWORD *)a2 + 1);
  LODWORD(v13) = (*(_DWORD *)this >> 31) + 0x7FFFFFFF;
  if (__OFSUB__(*(_DWORD *)this, *(_DWORD *)a2))
    v13 = v13;
  else
    v13 = (*(_DWORD *)this - *(_DWORD *)a2);
  v14 = __OFSUB__(v11, v12);
  v15 = v11 - v12;
  LODWORD(v16) = (v11 >> 31) + 0x7FFFFFFF;
  if (v14)
    v16 = v16;
  else
    v16 = v15;
  *((_QWORD *)this + 2) = v13 | (v16 << 32);
  return result;
}

float32x2_t WebCore::RenderLayerBacking::updateGeometry(WebCore::RenderLayer const*)::$_1::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::RenderStyle *v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  float32x2_t v10;
  float32x4_t v11;
  uint64_t v12;
  double v13;
  float32x2_t v14;
  double v15;
  float v16;
  float32x2_t result;
  uint64_t v18;
  int v19;
  float v20;
  _QWORD v21[2];
  int32x2_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x2_t v25;

  v4 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(*a2 + 8) + 32);
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 88) + 40) + 264))
  {
    if (!WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)(v5 + 80)))
    {
      v18 = a2[2];
      v19 = *(_DWORD *)(v18 + 12);
      v20 = (float)*(int *)(v18 + 8);
      *(_QWORD *)a1 = 0;
      *(float *)(a1 + 8) = v20 * 0.015625;
      *(float *)(a1 + 12) = (float)v19 * 0.015625;
      result = 0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      return result;
    }
    v5 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 32);
  }
  v6 = (WebCore::RenderStyle *)(v5 + 80);
  if (v5)
    v7 = (*(_BYTE *)(v5 + 45) & 4) == 0;
  else
    v7 = 1;
  if (!v7 || ((*(_BYTE *)(v5 + 52) & 7) == 4 ? (v8 = (*(_BYTE *)(v5 + 53) & 1) == 0) : (v8 = 0), v8))
    v9 = *(_QWORD *)(v5 + 160);
  else
    v9 = 0;
  v21[0] = 0;
  v21[1] = v9;
  WebCore::RenderStyle::getRoundedInnerBorderFor(v6, (const WebCore::LayoutRect *)v21, 1, 1, (uint64_t)&v22);
  v10 = vcvt_f32_s32(v22);
  v11 = (float32x4_t)vdupq_n_s32(0x3C800000u);
  *(float32x4_t *)(a1 + 8) = vmulq_f32(vcvtq_f32_s32(v23), v11);
  *(float32x4_t *)(a1 + 24) = vmulq_f32(vcvtq_f32_s32(v24), v11);
  *(float32x2_t *)(a1 + 40) = vmul_f32(vcvt_f32_s32(v25), *(float32x2_t *)v11.f32);
  v12 = *(_QWORD *)a2[1];
  v13 = *(float *)(v12 + 40) * -64.0;
  if (v13 >= 2147483650.0)
  {
    LODWORD(v13) = 1275068416;
  }
  else if (v13 <= -2147483650.0)
  {
    LODWORD(v13) = -872415232;
  }
  else
  {
    *(float *)&v13 = (float)(int)v13 * 0.015625;
  }
  v14 = vmul_f32(v10, *(float32x2_t *)v11.f32);
  v15 = (float)-*(float *)(v12 + 44) * 64.0;
  if (v15 >= 2147483650.0)
  {
    v16 = 33554000.0;
  }
  else if (v15 <= -2147483650.0)
  {
    v16 = -33554000.0;
  }
  else
  {
    v16 = (float)(int)v15 * 0.015625;
  }
  *((float *)&v13 + 1) = v16;
  result = vadd_f32(v14, *(float32x2_t *)&v13);
  *(float32x2_t *)a1 = result;
  return result;
}

uint64_t WebCore::RenderLayerBacking::updateMaskingLayerGeometry(WebCore::RenderLayerBacking *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  double v5;
  float v6;
  uint64_t v8;
  const WebCore::RenderLayerModelObject *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  double v14;
  int v15;
  double v16;
  int v17;
  double v18;
  int v19;
  double v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::RenderView *v26;
  uint64_t v27;
  double v28;
  float v29;
  int v30;
  __int32 v31;
  double v32;
  int v33;
  _QWORD *v34;
  float32x2_t v35;
  float v36;
  float v37;
  WebCore::RenderLayerCompositor *v38;
  WebCore::RenderLayerCompositor *v39;
  WTF *v40;
  void *v41;
  int32x2_t v42;
  int v43[4];
  _QWORD v44[2];
  float64x2_t v45;
  uint64_t v46;
  uint64_t v47;
  float64x2_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 14) + 160))(*((_QWORD *)this + 14), *((_QWORD *)this + 9) + 88);
  v2 = *((_QWORD *)this + 14);
  v49 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 128))(v2, &v49);
  result = *((_QWORD *)this + 14);
  v4 = *((_QWORD *)this + 9);
  LODWORD(v5) = *(_DWORD *)(v4 + 40);
  v6 = *(float *)(v4 + 44);
  if (*(float *)&v5 != *(float *)(result + 40) || v6 != *(float *)(result + 44))
  {
    *(_DWORD *)(result + 40) = LODWORD(v5);
    *(float *)(result + 44) = v6;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 320))(result);
    result = *((_QWORD *)this + 14);
  }
  if ((*(_WORD *)(result + 177) & 0x20) == 0)
  {
    result = *((_QWORD *)this + 1);
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 88) + 40) + 264))
    {
      v49 = 0;
      v44[0] = WebCore::RenderLayer::boundingBox(result, (const WebCore::RenderLayerModelObject *)result, &v49, 0, v5);
      v44[1] = v8;
      WebCore::snapRectToDevicePixelsIfNeeded((WebCore *)v44, *(const WebCore::LayoutRect **)(*((_QWORD *)this + 1) + 32), v9);
      v14 = v13 * 64.0;
      if (v14 >= 2147483650.0)
      {
        v15 = 0x7FFFFFFF;
      }
      else if (v14 <= -2147483650.0)
      {
        v15 = 0x80000000;
      }
      else
      {
        v15 = (int)v14;
      }
      v43[0] = v15;
      v16 = v10 * 64.0;
      if (v16 >= 2147483650.0)
      {
        v17 = 0x7FFFFFFF;
      }
      else if (v16 <= -2147483650.0)
      {
        v17 = 0x80000000;
      }
      else
      {
        v17 = (int)v16;
      }
      v43[1] = v17;
      v18 = v11 * 64.0;
      if (v18 >= 2147483650.0)
      {
        v19 = 0x7FFFFFFF;
      }
      else if (v18 <= -2147483650.0)
      {
        v19 = 0x80000000;
      }
      else
      {
        v19 = (int)v18;
      }
      v43[2] = v19;
      v20 = v12 * 64.0;
      if (v20 >= 2147483650.0)
      {
        v21 = 0x7FFFFFFF;
      }
      else if (v20 <= -2147483650.0)
      {
        v21 = 0x80000000;
      }
      else
      {
        v21 = (int)v20;
      }
      v43[3] = v21;
      v22 = *((_DWORD *)this + 48);
      v23 = *((_DWORD *)this + 49);
      if (v22 == 0x80000000)
        v24 = 0x7FFFFFFFLL;
      else
        v24 = -v22;
      if (v23 == 0x80000000)
        v25 = 0x7FFFFFFFLL;
      else
        v25 = -v23;
      v49 = v24 | (v25 << 32);
      v45.f64[0] = 0.0;
      v26 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1)
                                                                                                + 32)
                                                                                    + 24)
                                                                        + 8)
                                                            + 40)
                                                + 8)
                                    + 1944);
      v27 = *((_QWORD *)v26 + 50);
      if (!v27)
      {
        v38 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        v27 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v38, v26);
        v39 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v26 + 50);
        *((_QWORD *)v26 + 50) = v27;
        if (v39)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v39);
          WTF::fastFree(v40, v41);
          v27 = *((_QWORD *)v26 + 50);
        }
      }
      v28 = WebCore::snapSizeToDevicePixel((int *)&v49, (int *)&v45, *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) + 24) + 8)+ 40)+ 8)+ 528)+ 8)+ 24)+ 8)+ 364))* 64.0;
      if (v28 > -2147483650.0)
        v30 = (int)v28;
      else
        v30 = 0x80000000;
      if (v28 < 2147483650.0)
        v31 = v30;
      else
        v31 = 0x7FFFFFFF;
      v42.i32[0] = v31;
      v32 = v29 * 64.0;
      if (v32 >= 2147483650.0)
      {
        v33 = 0x7FFFFFFF;
      }
      else if (v32 <= -2147483650.0)
      {
        v33 = 0x80000000;
      }
      else
      {
        v33 = (int)v32;
      }
      v42.i32[1] = v33;
      WebCore::RenderLayer::computeClipPath((WebCore::RenderLayer *)&v49, *((const WebCore::LayoutSize **)this + 1), &v42, v43);
      v34 = (_QWORD *)*((_QWORD *)this + 14);
      v35 = (float32x2_t)v34[5];
      v36 = v35.f32[0];
      if (v35.f32[0] != 0.0)
      {
        if (v35.f32[0] < 0.0)
          v36 = -v35.f32[0];
        if (v36 >= 0.00000011921)
          goto LABEL_48;
      }
      v37 = v35.f32[1];
      if (v35.f32[1] != 0.0)
      {
        if (v35.f32[1] < 0.0)
          v37 = -v35.f32[1];
        if (v37 >= 0.00000011921)
        {
LABEL_48:
          v45 = (float64x2_t)0x3FF0000000000000uLL;
          v46 = 0;
          v47 = 0x3FF0000000000000;
          v48 = vcvtq_f64_f32(vneg_f32(v35));
          WebCore::Path::transform((WebCore::Path *)&v49, &v45);
          v34 = (_QWORD *)*((_QWORD *)this + 14);
        }
      }
      (*(void (**)(_QWORD *, uint64_t *))(*v34 + 400))(v34, &v49);
      result = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 14) + 408))(*((_QWORD *)this + 14), v52);
      if (v51 != -1)
        return ((uint64_t (*)(float64x2_t *, uint64_t *))off_1E3428F58[v51])(&v45, &v50);
    }
  }
  return result;
}

uint64_t WebCore::RenderLayerBacking::resetContentsRect(WebCore::RenderLayerBacking *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  WebCore::RenderLayerBacking::updateContentsRects(this);
  v2 = *((_QWORD *)this + 9);
  v5 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 360))(v2, &v5);
  v3 = *((_QWORD *)this + 9);
  v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 352))(v3, &v5);
}

uint64_t WebCore::RenderLayerBacking::hasVisibleNonCompositedDescendants(WebCore::RenderLayerBacking *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  unsigned __int8 v6;

  v6 = 0;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34291D0;
  v2[1] = &v6;
  v5 = v2;
  WebCore::traverseVisibleNonCompositedDescendantLayers(this, &v5);
  v3 = v5;
  v5 = 0;
  if (v3)
    (*(void (**)(_QWORD *))(*v3 + 8))(v3);
  return v6;
}

void WebCore::RenderLayerBacking::updateEventRegion(void)::$_1::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  unint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  unint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  unint64_t v31;
  void *v32;
  WTF *v33;
  WTF *v34;
  WTF *v35;
  WTF *v36;
  WTF *v37;
  uint64_t v38;
  WTF *v39;
  WTF *v40;
  WTF *v41;
  WTF *v42;
  WTF *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  WTF *v49;
  WTF *v51;
  WTF *v52;
  WTF *v53;
  WTF *v55;
  WTF *v57;
  unint64_t v58;
  _QWORD v59[2];
  float v60[2];
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  void (**v64)(WebCore::EventRegionContext *__hidden);
  int v65;
  WTF *v66[2];
  WTF *v67[2];
  __int128 *v68;
  __int128 v69;
  WTF *v70[2];
  __int128 v71;
  WTF *v72[2];
  _BYTE v73[32];
  uint64_t v74;
  WTF *v75;
  char v76;
  void (**v77)(WebCore::NullGraphicsContext *__hidden);
  _BYTE v78[344];
  WTF *v79;
  uint64_t v80;
  _DWORD v81[87];
  char v82;
  char v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)a1;
  LODWORD(v69) = 0;
  v77 = (void (**)(WebCore::NullGraphicsContext *__hidden))off_1E340BA10;
  WebCore::GraphicsContextState::GraphicsContextState((uint64_t)v78, &v69, 0);
  v80 = 1;
  v81[86] = 0;
  v82 &= 0xFCu;
  v79 = (WTF *)v81;
  v77 = off_1E33FFA58;
  v83 = 0;
  v76 = 0;
  *(_OWORD *)v72 = 0u;
  memset(v73, 0, 25);
  *(_OWORD *)v70 = 0u;
  v71 = 0u;
  v69 = 0u;
  v5 = v4[1];
  v6 = *(_QWORD **)(v5 + 32);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6[3] + 8) + 40) + 8)
                                                     + 528)
                                         + 8)
                             + 24)
                 + 8);
  if (*(_BYTE *)(v7 + 1100) || (*(_BYTE *)(*(_QWORD *)(v7 + 112) + 612) & 8) != 0)
  {
    *(_QWORD *)&v73[24] = 0;
    v74 = 0;
    v75 = 0;
    v76 = 1;
  }
  v65 = 0;
  *(_OWORD *)v66 = 0uLL;
  *(_OWORD *)v67 = 0uLL;
  v64 = off_1E341E260;
  v68 = &v69;
  v8 = (float)*(int *)(a2 + 48) - *(float *)(a2 + 40);
  v9 = (float)*(int *)(a2 + 52) - *(float *)(a2 + 44);
  v10 = *(_QWORD *)(a2 + 88);
  v63 = 0uLL;
  v62 = 0uLL;
  v60[0] = -v8;
  v60[1] = -v9;
  v61 = v10;
  if (**(_BYTE **)(a1 + 8) && v4[21] == a2)
  {
    WebCore::EventRegionContext::unite((WebCore::EventRegionContext *)&v64, (const WebCore::FloatRoundedRect *)v60, (WebCore::RenderObject *)v6, (const WebCore::RenderStyle *)(v6 + 10), 0);
    v5 = v4[1];
  }
  if ((*(_BYTE *)(v5 + 24) & 1) != 0 && (v4[9] == a2 || v4[10] == a2))
    WebCore::EventRegionContext::unite((WebCore::EventRegionContext *)&v64, (const WebCore::FloatRoundedRect *)v60, *(WebCore::RenderObject **)(v5 + 32), (const WebCore::RenderStyle *)(*(_QWORD *)(v5 + 32) + 80), 0);
  v11 = *(float *)(a2 + 40);
  v12 = *(float *)(a2 + 44);
  v13 = floorf(v11);
  v14 = 2147500000.0;
  if (v13 < 2147500000.0)
  {
    v14 = -2147500000.0;
    if (v13 > -2147500000.0)
      v14 = (float)(int)v13;
  }
  v15 = floorf(v12);
  v16 = 2147500000.0;
  if (v15 < 2147500000.0)
  {
    v16 = -2147500000.0;
    if (v15 > -2147500000.0)
      v16 = (float)(int)v15;
  }
  v17 = v12 + *(float *)(a2 + 92);
  v18 = ceilf(v11 + *(float *)(a2 + 88));
  v19 = 2147500000.0;
  if (v18 < 2147500000.0)
  {
    v19 = -2147500000.0;
    if (v18 > -2147500000.0)
      v19 = (float)(int)v18;
  }
  v20 = ceilf(v17);
  v21 = 2147500000.0;
  if (v20 < 2147500000.0)
  {
    v21 = -2147500000.0;
    if (v20 > -2147500000.0)
      v21 = (float)(int)v20;
  }
  if (v14 >= 2147500000.0)
  {
    v22 = 0x7FFFFFFFLL;
  }
  else if (v14 <= -2147500000.0)
  {
    v22 = 0x80000000;
  }
  else
  {
    v22 = (int)v14;
  }
  if (v16 >= 2147500000.0)
  {
    v23 = 0x7FFFFFFF00000000;
  }
  else if (v16 <= -2147500000.0)
  {
    v23 = 0x8000000000000000;
  }
  else
  {
    v23 = (unint64_t)(int)v16 << 32;
  }
  v24 = v19 - v14;
  v25 = v21 - v16;
  if (v24 >= 2147500000.0)
  {
    v26 = 0x7FFFFFFFLL;
  }
  else if (v24 <= -2147500000.0)
  {
    v26 = 0x80000000;
  }
  else
  {
    v26 = (int)v24;
  }
  if (v25 >= 2147500000.0)
  {
    v27 = 0x7FFFFFFF00000000;
  }
  else if (v25 <= -2147500000.0)
  {
    v27 = 0x8000000000000000;
  }
  else
  {
    v27 = (unint64_t)(int)v25 << 32;
  }
  v59[0] = v23 | v22;
  v59[1] = v27 | v26;
  WebCore::RenderLayerBacking::paintIntoLayer((uint64_t)v4, a2, (uint64_t)&v77, (uint64_t)v59, 0, (uint64_t)&v64);
  v28 = roundf(v8);
  if (v28 >= 2147500000.0)
  {
    v29 = 0x7FFFFFFFLL;
  }
  else if (v28 <= -2147500000.0)
  {
    v29 = 0x80000000;
  }
  else
  {
    v29 = (int)v28;
  }
  v30 = roundf(v9);
  if (v30 >= 2147500000.0)
  {
    v31 = 0x7FFFFFFF00000000;
  }
  else if (v30 <= -2147500000.0)
  {
    v31 = 0x8000000000000000;
  }
  else
  {
    v31 = (unint64_t)(int)v30 << 32;
  }
  v58 = v31 | v29;
  WebCore::EventRegion::translate((int32x2_t *)&v69, (int32x2_t *)&v58);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 416))(a2, &v69);
  v64 = off_1E341E140;
  v33 = v67[0];
  if (v67[0])
  {
    v67[0] = 0;
    LODWORD(v67[1]) = 0;
    WTF::fastFree(v33, v32);
  }
  v34 = v66[0];
  if (v66[0])
  {
    v66[0] = 0;
    LODWORD(v66[1]) = 0;
    WTF::fastFree(v34, v32);
  }
  if (v76)
  {
    v35 = v75;
    v75 = 0;
    if (v35)
    {
      v36 = (WTF *)*((_QWORD *)v35 + 18);
      if ((WTF *)((char *)v35 + 160) != v36 && v36)
      {
        *((_QWORD *)v35 + 18) = 0;
        *((_DWORD *)v35 + 38) = 0;
        WTF::fastFree(v36, v32);
      }
      v37 = *(WTF **)v35;
      if ((WTF *)((char *)v35 + 16) != *(WTF **)v35 && v37)
      {
        *(_QWORD *)v35 = 0;
        *((_DWORD *)v35 + 2) = 0;
        WTF::fastFree(v37, v32);
      }
      WTF::fastFree(v35, v32);
    }
  }
  v38 = *(_QWORD *)&v73[16];
  *(_QWORD *)&v73[16] = 0;
  if (v38)
  {
    v39 = *(WTF **)(v38 + 144);
    if ((WTF *)(v38 + 160) != v39 && v39)
    {
      *(_QWORD *)(v38 + 144) = 0;
      *(_DWORD *)(v38 + 152) = 0;
      WTF::fastFree(v39, v32);
    }
    v40 = *(WTF **)v38;
    if (v38 + 16 != *(_QWORD *)v38 && v40)
    {
      *(_QWORD *)v38 = 0;
      *(_DWORD *)(v38 + 8) = 0;
      WTF::fastFree(v40, v32);
    }
    WTF::fastFree((WTF *)v38, v32);
  }
  v41 = v72[1];
  v72[1] = 0;
  if (v41)
  {
    v42 = (WTF *)*((_QWORD *)v41 + 18);
    if ((WTF *)((char *)v41 + 160) != v42 && v42)
    {
      *((_QWORD *)v41 + 18) = 0;
      *((_DWORD *)v41 + 38) = 0;
      WTF::fastFree(v42, v32);
    }
    v43 = *(WTF **)v41;
    if ((WTF *)((char *)v41 + 16) != *(WTF **)v41 && v43)
    {
      *(_QWORD *)v41 = 0;
      *((_DWORD *)v41 + 2) = 0;
      WTF::fastFree(v43, v32);
    }
    WTF::fastFree(v41, v32);
  }
  if (DWORD1(v71))
  {
    v44 = (uint64_t *)((char *)v70[1] + 16);
    v45 = 24 * DWORD1(v71);
    do
    {
      v46 = *v44;
      *v44 = 0;
      if (v46)
      {
        v47 = *(WTF **)(v46 + 144);
        if ((WTF *)(v46 + 160) != v47 && v47 != 0)
        {
          *(_QWORD *)(v46 + 144) = 0;
          *(_DWORD *)(v46 + 152) = 0;
          WTF::fastFree(v47, v32);
        }
        v49 = *(WTF **)v46;
        if (v46 + 16 != *(_QWORD *)v46 && v49 != 0)
        {
          *(_QWORD *)v46 = 0;
          *(_DWORD *)(v46 + 8) = 0;
          WTF::fastFree(v49, v32);
        }
        WTF::fastFree((WTF *)v46, v32);
      }
      v44 += 3;
      v45 -= 24;
    }
    while (v45);
  }
  v51 = v70[1];
  if (v70[1])
  {
    v70[1] = 0;
    LODWORD(v71) = 0;
    WTF::fastFree(v51, v32);
  }
  v52 = v70[0];
  v70[0] = 0;
  if (v52)
  {
    v53 = (WTF *)*((_QWORD *)v52 + 18);
    if ((WTF *)((char *)v52 + 160) != v53 && v53 != 0)
    {
      *((_QWORD *)v52 + 18) = 0;
      *((_DWORD *)v52 + 38) = 0;
      WTF::fastFree(v53, v32);
    }
    v55 = *(WTF **)v52;
    if ((WTF *)((char *)v52 + 16) != *(WTF **)v52 && v55 != 0)
    {
      *(_QWORD *)v52 = 0;
      *((_DWORD *)v52 + 2) = 0;
      WTF::fastFree(v55, v32);
    }
    WTF::fastFree(v52, v32);
  }
  v77 = (void (**)(WebCore::NullGraphicsContext *__hidden))off_1E340BA10;
  if (HIDWORD(v80))
    WTF::VectorTypeOperations<WebCore::GraphicsContextState>::destruct((unsigned int *)v79, (unsigned int *)v79 + 86 * HIDWORD(v80));
  v57 = v79;
  if (v81 != (_DWORD *)v79 && v79)
  {
    v79 = 0;
    LODWORD(v80) = 0;
    WTF::fastFree(v57, v32);
  }
  WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)v78, v32);
}

WTF *WebCore::RenderLayerBacking::updateEventRegion(void)::$_0::operator()(WTF *result, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  void *v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  WTF *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  WTF *v22;
  WTF *v24;
  WTF *v25;
  WTF *v27;
  _QWORD v29[2];
  __int128 v30;
  __int128 v31;
  void (**v32)(WebCore::EventRegionContext *__hidden);
  int v33;
  WTF *v34[2];
  WTF *v35[2];
  __int128 *v36;
  __int128 v37;
  WTF *v38[2];
  __int128 v39;
  __int128 v40;
  WTF *v41[5];
  WTF *v42;
  char v43;

  if (a3)
  {
    v43 = 0;
    v37 = 0u;
    *(_OWORD *)v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    memset(v41, 0, 25);
    v33 = 0;
    *(_OWORD *)v34 = 0u;
    *(_OWORD *)v35 = 0u;
    v32 = off_1E341E260;
    v36 = &v37;
    if (*(_BYTE *)result)
    {
      v4 = a3[11];
      v31 = 0uLL;
      v30 = 0uLL;
      v29[0] = 0;
      v29[1] = v4;
      WebCore::EventRegionContext::unite((WebCore::EventRegionContext *)&v32, (const WebCore::FloatRoundedRect *)v29, *(WebCore::RenderObject **)(*(_QWORD *)(a2 + 8) + 32), (const WebCore::RenderStyle *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 32) + 80), 0);
    }
    (*(void (**)(_QWORD *, __int128 *))(*a3 + 416))(a3, &v37);
    v32 = off_1E341E140;
    v6 = v35[0];
    if (v35[0])
    {
      v35[0] = 0;
      LODWORD(v35[1]) = 0;
      WTF::fastFree(v6, v5);
    }
    v7 = v34[0];
    if (v34[0])
    {
      v34[0] = 0;
      LODWORD(v34[1]) = 0;
      WTF::fastFree(v7, v5);
    }
    if (v43)
    {
      v8 = v42;
      v42 = 0;
      if (v8)
      {
        v9 = (WTF *)*((_QWORD *)v8 + 18);
        if ((WTF *)((char *)v8 + 160) != v9 && v9)
        {
          *((_QWORD *)v8 + 18) = 0;
          *((_DWORD *)v8 + 38) = 0;
          WTF::fastFree(v9, v5);
        }
        v10 = *(WTF **)v8;
        if ((WTF *)((char *)v8 + 16) != *(WTF **)v8 && v10)
        {
          *(_QWORD *)v8 = 0;
          *((_DWORD *)v8 + 2) = 0;
          WTF::fastFree(v10, v5);
        }
        WTF::fastFree(v8, v5);
      }
    }
    v11 = v41[2];
    v41[2] = 0;
    if (v11)
    {
      v12 = (WTF *)*((_QWORD *)v11 + 18);
      if ((WTF *)((char *)v11 + 160) != v12 && v12)
      {
        *((_QWORD *)v11 + 18) = 0;
        *((_DWORD *)v11 + 38) = 0;
        WTF::fastFree(v12, v5);
      }
      v13 = *(WTF **)v11;
      if ((WTF *)((char *)v11 + 16) != *(WTF **)v11 && v13)
      {
        *(_QWORD *)v11 = 0;
        *((_DWORD *)v11 + 2) = 0;
        WTF::fastFree(v13, v5);
      }
      WTF::fastFree(v11, v5);
    }
    v14 = *((_QWORD *)&v40 + 1);
    *((_QWORD *)&v40 + 1) = 0;
    if (v14)
    {
      v15 = *(WTF **)(v14 + 144);
      if ((WTF *)(v14 + 160) != v15 && v15)
      {
        *(_QWORD *)(v14 + 144) = 0;
        *(_DWORD *)(v14 + 152) = 0;
        WTF::fastFree(v15, v5);
      }
      v16 = *(WTF **)v14;
      if (v14 + 16 != *(_QWORD *)v14 && v16)
      {
        *(_QWORD *)v14 = 0;
        *(_DWORD *)(v14 + 8) = 0;
        WTF::fastFree(v16, v5);
      }
      WTF::fastFree((WTF *)v14, v5);
    }
    if (DWORD1(v39))
    {
      v17 = (uint64_t *)((char *)v38[1] + 16);
      v18 = 24 * DWORD1(v39);
      do
      {
        v19 = *v17;
        *v17 = 0;
        if (v19)
        {
          v20 = *(WTF **)(v19 + 144);
          if ((WTF *)(v19 + 160) != v20 && v20 != 0)
          {
            *(_QWORD *)(v19 + 144) = 0;
            *(_DWORD *)(v19 + 152) = 0;
            WTF::fastFree(v20, v5);
          }
          v22 = *(WTF **)v19;
          if (v19 + 16 != *(_QWORD *)v19 && v22 != 0)
          {
            *(_QWORD *)v19 = 0;
            *(_DWORD *)(v19 + 8) = 0;
            WTF::fastFree(v22, v5);
          }
          WTF::fastFree((WTF *)v19, v5);
        }
        v17 += 3;
        v18 -= 24;
      }
      while (v18);
    }
    result = v38[1];
    if (v38[1])
    {
      v38[1] = 0;
      LODWORD(v39) = 0;
      result = (WTF *)WTF::fastFree(result, v5);
    }
    v24 = v38[0];
    v38[0] = 0;
    if (v24)
    {
      v25 = (WTF *)*((_QWORD *)v24 + 18);
      if ((WTF *)((char *)v24 + 160) != v25 && v25 != 0)
      {
        *((_QWORD *)v24 + 18) = 0;
        *((_DWORD *)v24 + 38) = 0;
        WTF::fastFree(v25, v5);
      }
      v27 = *(WTF **)v24;
      if ((WTF *)((char *)v24 + 16) != *(WTF **)v24 && v27 != 0)
      {
        *(_QWORD *)v24 = 0;
        *((_DWORD *)v24 + 2) = 0;
        WTF::fastFree(v27, v5);
      }
      return (WTF *)WTF::fastFree(v24, v5);
    }
  }
  return result;
}

unsigned int **std::unique_ptr<WebCore::LayerAncestorClippingStack>::operator=[abi:sn180100](unsigned int **a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  void *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = WTF::Vector<WebCore::LayerAncestorClippingStack::ClippingStackEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
    WTF::fastFree((WTF *)v4, v5);
  }
  return a1;
}

uint64_t WebCore::RenderLayerBacking::needsRepaintOnCompositedScroll(WebCore::RenderLayerBacking *this)
{
  uint64_t (*v1)();
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v1 = WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>::unspecifiedBoolTypeInstance;
  if (!*((_QWORD *)this + 20))
    v1 = 0;
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + 16);
  while (1)
  {
    v4 = *(_QWORD *)(v4 + 8);
    if (!v4)
      break;
    if (*(_QWORD *)(v4 + 16) && (*(_WORD *)(v4 + 58) & 3) == 1)
      return 1;
  }
  result = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + 40) + 8) + 528)
                                                                                         + 8)
                                                                             + 24)
                                                                 + 8));
  if (result)
    return (*(unsigned __int8 (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)result + 360))(result, *((_QWORD *)this + 28), *((_QWORD *)this + 29)) != 0;
  return result;
}

uint64_t WebCore::RenderLayerBacking::updateOverflowControlsLayers(BOOL,BOOL,BOOL)::$_0::operator()(uint64_t a1, uint64_t *a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  _BYTE *v7;
  int v8;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  WTF::StringImpl *v18;
  WebCore::RenderView *v19;
  uint64_t v20;
  WebCore::RenderLayerCompositor *v21;
  WebCore::RenderLayerCompositor *v22;
  WTF *v23;
  void *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  v7 = (_BYTE *)*a2;
  v8 = (*a2 == 0) ^ a3;
  if ((v8 & 1) == 0)
  {
    if (a3)
    {
      if (a6)
      {
        if (a6 == 1)
        {
          v11 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v11 = v26;
        }
        v25 = v11;
      }
      else
      {
        v25 = 0;
      }
      WebCore::RenderLayerBacking::createGraphicsLayer((uint64_t *)&v26, a1, (uint64_t)&v25, 0);
      v13 = (uint64_t)v26;
      v26 = 0;
      v14 = (_DWORD *)*a2;
      *a2 = v13;
      if (v14)
      {
        if (v14[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
          v18 = v26;
          v26 = 0;
          if (v18)
          {
            if (*((_DWORD *)v18 + 2) == 1)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v18 + 16))(v18);
            else
              --*((_DWORD *)v18 + 2);
          }
        }
        else
        {
          --v14[2];
          v26 = 0;
        }
      }
      v15 = v25;
      v25 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v12);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = (_DWORD *)*a2;
      if (a4)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 696))(*a2, 0);
        (*(void (**)(uint64_t))(*(_QWORD *)*a2 + 712))(*a2);
      }
      else
      {
        if (v16[43])
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 320))(*a2);
          v16[43] = 0;
          v16 = (_DWORD *)*a2;
        }
        (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 216))(v16);
      }
    }
    else
    {
      if (v7 && !v7[169] && (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v7 + 832))(v7))
      {
        v19 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                                                                  + 32)
                                                                                      + 24)
                                                                          + 8)
                                                              + 40)
                                                  + 8)
                                      + 1944);
        v20 = *((_QWORD *)v19 + 50);
        if (!v20)
        {
          v21 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
          v20 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v21, v19);
          v22 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v19 + 50);
          *((_QWORD *)v19 + 50) = v20;
          if (v22)
          {
            WebCore::RenderLayerCompositor::~RenderLayerCompositor(v22);
            WTF::fastFree(v23, v24);
            v20 = *((_QWORD *)v19 + 50);
          }
        }
        --*(_DWORD *)(v20 + 204);
      }
      WebCore::GraphicsLayer::unparentAndClear(a2);
    }
  }
  return v8 ^ 1u;
}

unsigned int *WebCore::RenderLayerBacking::rendererBackgroundColor(WebCore::RenderLayerBacking *this, uint64_t a2)
{
  WebCore::RenderElement *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(WebCore::RenderElement **)(*(_QWORD *)(a2 + 8) + 32);
  v4 = *(_QWORD *)(*((_QWORD *)v3 + 3) + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
  if (*(_QWORD *)(v5 + 1272) == v4)
  {
    v3 = WebCore::RenderView::rendererForRootBackground(*(WebCore::RenderView **)(v5 + 1944));
    if (!v3)
      v3 = *(WebCore::RenderElement **)(*(_QWORD *)(a2 + 8) + 32);
  }
  return WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)v3 + 80, 61, 0, (unint64_t *)this);
}

void WebCore::RenderLayerBacking::backgroundBoxForSimpleContainerPainting(WebCore::RenderLayerBacking *this, const WebCore::RenderBox *a2)
{
  uint64_t v2;
  BOOL v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  float v10;
  int v11;
  int v12[2];
  uint64_t v13;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
  if (v2)
    v3 = (*(_BYTE *)(v2 + 45) & 4) == 0;
  else
    v3 = 1;
  if (!v3)
  {
    ++*(_DWORD *)(v2 + 16);
    v5 = WebCore::backgroundRectForBox((WebCore *)v2, a2);
    v13 = v6;
    v7 = WebCore::RenderLayerBacking::contentOffsetInCompositingLayer(this);
    v8 = v5 + v7;
    if (__OFADD__((_DWORD)v5, (_DWORD)v7))
      v8 = (v5 >> 31) + 0x7FFFFFFF;
    v9 = HIDWORD(v5) + HIDWORD(v7);
    if (__OFADD__(HIDWORD(v5), HIDWORD(v7)))
      v9 = (HIDWORD(v5) >> 31) + 0x7FFFFFFF;
    v12[0] = v8;
    v12[1] = v9;
    v10 = WebCore::RenderLayerBacking::deviceScaleFactor(this);
    WebCore::snapRectToDevicePixels(v12, v10);
    v11 = *(_DWORD *)(v2 + 16);
    if (v11)
      *(_DWORD *)(v2 + 16) = v11 - 1;
    else
      __break(0xC471u);
  }
}

uint64_t WebCore::lineageOfType<WebCore::RenderSVGHiddenContainer>(uint64_t result)
{
  int v1;
  uint64_t v2;

  do
  {
    v1 = *(unsigned __int8 *)(result + 46);
    if (v1 == 69
      || (*(_BYTE *)(result + 52) & 7) == 4 && (*(_BYTE *)(result + 53) & 1) == 0 && (*(_BYTE *)(result + 53) & 8) != 0)
    {
      break;
    }
    if (v1 == 77)
      break;
    v2 = *(_QWORD *)(result + 32);
    if (!v2)
      return 0;
    result = *(_QWORD *)(v2 + 8);
  }
  while (result);
  return result;
}

unint64_t WebCore::backgroundRectForBox(WebCore *this, const WebCore::RenderBox *a2)
{
  int v2;

  v2 = (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + 8) + 58) >> 2) & 7;
  switch(v2)
  {
    case 0:
      return 0;
    case 1:
      return WebCore::RenderBox::paddingBoxRect(this);
    case 2:
      return WebCore::RenderBox::contentBoxRect(this);
  }
  return 0;
}

uint64_t WebCore::RenderLayerBacking::childForSuperlayers(WebCore::RenderLayerBacking *this)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  WebCore::ViewTransition *v7;
  int IsCaptured;
  uint64_t v9;
  int v10;
  WebCore::RenderLayerBacking *v11;
  int v12;
  uint64_t v13;

  v2 = *((_QWORD *)this + 1);
  if ((*(_BYTE *)(v2 + 24) & 1) != 0)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 24) + 8) + 40) + 8);
    v6 = *(_DWORD *)(v5 + 24);
    *(_DWORD *)(v5 + 24) = v6 + 2;
    v7 = *(WebCore::ViewTransition **)(v5 + 2112);
    if (v7)
    {
      v13 = v5;
      IsCaptured = WebCore::ViewTransition::documentElementIsCaptured(v7);
      v5 = v13;
      v6 = *(_DWORD *)(v13 + 24) - 2;
    }
    else
    {
      IsCaptured = 0;
    }
    if (v6)
    {
      *(_DWORD *)(v5 + 24) = v6;
    }
    else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    if (IsCaptured)
    {
      v9 = *(_QWORD *)(*((_QWORD *)this + 1) + 72);
      if (v9)
      {
        v10 = *(_DWORD *)(v9 + 8);
        *(_DWORD *)(v9 + 8) = v10 + 1;
        if ((*(_QWORD *)(*(_QWORD *)(v9 + 32) + 96) & 0xF80000000000) == 0x600000000000)
        {
          v11 = *(WebCore::RenderLayerBacking **)(v9 + 256);
          if (v11)
          {
            result = WebCore::RenderLayerBacking::childForSuperlayers(v11);
            v12 = *(_DWORD *)(v9 + 8);
            if (v12)
            {
              *(_DWORD *)(v9 + 8) = v12 - 1;
              return result;
            }
LABEL_25:
            __break(0xC471u);
            JUMPOUT(0x1963F47E0);
          }
        }
        if (v10 == -1)
          goto LABEL_25;
        *(_DWORD *)(v9 + 8) = v10;
      }
    }
  }
  result = *((_QWORD *)this + 15);
  if (!result)
  {
    v4 = (_DWORD *)*((_QWORD *)this + 6);
    if (v4)
    {
      if (!v4[3])
        goto LABEL_25;
      return *(_QWORD *)(*(_QWORD *)v4 + 80);
    }
    else
    {
      result = *((_QWORD *)this + 13);
      if (!result)
      {
        result = *((_QWORD *)this + 8);
        if (!result)
          return *((_QWORD *)this + 9);
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderLayerBacking::childForSuperlayersExcludingViewTransitions(WebCore::RenderLayerBacking *this)
{
  uint64_t result;
  _DWORD *v3;
  char *v4;

  result = *((_QWORD *)this + 15);
  if (!result)
  {
    v3 = (_DWORD *)*((_QWORD *)this + 6);
    if (v3)
    {
      if (!v3[3])
      {
        __break(0xC471u);
        return result;
      }
      v4 = (char *)(*(_QWORD *)v3 + 80);
      return *(_QWORD *)v4;
    }
    result = *((_QWORD *)this + 13);
    if (!result)
    {
      result = *((_QWORD *)this + 8);
      if (!result)
      {
        v4 = (char *)this + 72;
        return *(_QWORD *)v4;
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderLayerCompositor::repaintInCompositedAncestor(WebCore::RenderLayerCompositor *this, WebCore::RenderLayer *a2, const WebCore::LayoutRect *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  result = WebCore::RenderLayer::enclosingCompositingLayerForRepaint(a2, 1);
  if (v7)
  {
    v8 = v7;
    v14 = *(_OWORD *)a3;
    v9 = WebCore::RenderLayer::offsetFromAncestor((uint64_t)a2, v7, 0);
    v10 = (v14 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__((_DWORD)v14, (_DWORD)v9))
      v10 = v14 + v9;
    v11 = DWORD1(v14) + HIDWORD(v9);
    if (__OFADD__(DWORD1(v14), HIDWORD(v9)))
      v11 = (DWORD1(v14) >> 31) + 0x7FFFFFFF;
    *(_QWORD *)&v14 = __PAIR64__(v11, v10);
    result = (uint64_t)WebCore::RenderLayer::setBackingNeedsRepaintInRect(v8, (int *)&v14, 1);
    if ((*(_BYTE *)(v8 + 24) & 1) != 0)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 248) + 328) + 24);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
          return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v13 + 48) + 16) + 1000))(*(_QWORD *)(*(_QWORD *)(v13 + 48) + 16));
      }
    }
  }
  return result;
}

void WebCore::RenderLayerBacking::paintIntoLayer(WebCore::GraphicsLayer const*,WebCore::GraphicsContext &,WebCore::IntRect const&,WTF::OptionSet<WebCore::PaintBehavior>,WebCore::RegionContext *)::$_0::operator()(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int8x16_t v17;
  int32x4_t v18;
  int8x16_t v19;
  uint64_t v20;
  WTF *v21;
  const double (*v22)[4][4];
  int v23;
  __int16 v24;
  uint64_t v25;
  _BOOL4 v26;
  int v27;
  uint64_t v28;
  float64x2_t v29;
  double v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  void *v40;
  WTF *v41;
  uint64_t v42;
  int v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  int v62;
  signed int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  int32x4_t *v74;
  WebCore::RenderObject *v75;
  int32x4_t v76;
  int8x16_t v77;
  int32x4_t v78;
  int8x16_t v79;
  uint64_t v81;
  uint64_t v82;
  WTF *v83;
  uint64_t v84;
  WebCore::RenderObject *v85;
  uint64_t v86;
  uint64_t v87;
  WebCore::RenderView *v88;
  WebCore::RenderLayerCompositor *v89;
  int v90;
  WebCore::RenderView *v91;
  WebCore::RenderLayerCompositor *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  WebCore::Frame *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WTF::MonotonicTime *v106;
  int v107;
  unint64_t v108;
  signed int v109;
  int v110;
  uint64_t v111;
  float v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  float v126;
  float v127;
  double v128;
  int v129;
  int v130;
  double v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  WebCore::RenderLayerCompositor *v136;
  WebCore::RenderLayerCompositor *v137;
  WTF *v138;
  void *v139;
  uint64_t v140;
  WebCore::RenderLayerCompositor *v141;
  WebCore::RenderLayerCompositor *v142;
  WTF *v143;
  void *v144;
  WTF *v145;
  void *v146;
  uint64_t v147;
  __int16 v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  __int128 v152;
  int8x16_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  __int16 v157;
  uint64_t v158;
  int v159;
  __int16 v160;
  WTF *v161[2];
  uint64_t v162;
  int v163;
  BOOL v164;
  uint64_t v165;
  char v166;
  WTF *v167;
  char v168;
  int8x16_t v169;
  char v170;
  int8x16_t v171;
  int8x16_t v172;
  __int128 v173;
  float64x2_t v174;
  int8x16_t v175;
  int8x16_t v176;
  __int128 v177;
  __int128 v178;

  v159 = 0;
  v160 = 0;
  v6 = *(uint64_t **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  if (!**(_QWORD **)a1)
  {
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v96 = *(WebCore::Frame **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 24)
                                                                               + 8)
                                                                   + 40)
                                                       + 8)
                                           + 528)
                               + 8);
      v97 = *((_QWORD *)v96 + 3);
      if (v97)
      {
        v98 = *(_QWORD *)(v97 + 8);
        if (v98)
        {
          v99 = *(_QWORD *)(*(_QWORD *)(v98 + 80) + 8);
          if (v99)
          {
            v100 = *(_QWORD *)(v99 + 232);
            if (v100)
            {
              if (!*(_BYTE *)(v100 + 157))
              {
                WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)a1);
                WebCore::InspectorTimelineAgent::pushCurrentRecord(v100, (WTF::JSONImpl::Object **)&v171, 5, 1, v96, 0, 0);
                v101 = (_DWORD *)v171.i64[0];
                v171.i64[0] = 0;
                if (v101)
                {
                  if (*v101 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v101;
                }
              }
            }
          }
        }
      }
    }
    v6 = *(uint64_t **)a1;
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      WebCore::LocalFrameView::willPaintContents(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 32)+ 24)+ 8)+ 40)+ 8)+ 1944)+ 248), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)&v159, *v6);
      v6 = *(uint64_t **)a1;
    }
  }
  v9 = *(_QWORD *)(v7 + 8);
  v10 = **(_DWORD **)(a1 + 32);
  v11 = *(_DWORD *)(v7 + 192);
  v12 = *(_DWORD *)(v7 + 196);
  if (v11 == 0x80000000)
    v13 = 0x7FFFFFFFLL;
  else
    v13 = -v11;
  if (v12 == 0x80000000)
    v14 = 0x7FFFFFFFLL;
  else
    v14 = -v12;
  v15 = *(int32x4_t *)*(_QWORD *)(a1 + 24);
  v152 = *(unint64_t *)(v7 + 8);
  v16.i64[0] = 0xFE000000FE000000;
  v16.i64[1] = 0xFE000000FE000000;
  v17 = (int8x16_t)vcgtq_s32(v15, v16);
  v18.i64[0] = 0xFE000000FE000000;
  v18.i64[1] = 0xFE000000FE000000;
  v19.i64[0] = 0x8000000080000000;
  v19.i64[1] = 0x8000000080000000;
  v153 = vorrq_s8((int8x16_t)(*(_OWORD *)&v17 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v18, v15), v19, (int8x16_t)vshlq_n_s32(v15, 6uLL)), v17));
  v154 = v13 | (v14 << 32);
  v155 = 0;
  v156 = v10;
  v157 = 256;
  v158 = *v6;
  if (v9 == a2)
  {
    v45 = *(_QWORD *)(a1 + 16);
    if (*(_BYTE *)(v7 + 298) && *(_WORD *)(v45 + 194) == 258)
    {
      *(_WORD *)(v45 + 194) = 257;
      *(_DWORD *)(v45 + 184) |= 0x20u;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 88))(v45, v45 + 8);
      v46 = a3;
      WebCore::RenderLayer::paintLayerContents(a2, *(_QWORD *)(a1 + 16), (uint64_t)&v152, a3);
      v47 = *(_QWORD *)(a1 + 16);
      if (*(_BYTE *)(v47 + 194) != 2 || *(_BYTE *)(v47 + 195) != 1)
      {
        *(_WORD *)(v47 + 194) = 258;
        *(_DWORD *)(v47 + 184) |= 0x20u;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 88))(v47, v47 + 8);
    }
    else
    {
      v46 = a3;
      WebCore::RenderLayer::paintLayerContents(a2, v45, (uint64_t)&v152, a3);
    }
    v52 = *(_QWORD *)(a2 + 264);
    if (!v52 || !*(_BYTE *)(v52 + 82) || **(_QWORD **)a1)
      goto LABEL_100;
    v51 = *(_QWORD *)(a1 + 16);
    v49 = v46 | 0x10;
    v50 = a2;
LABEL_48:
    WebCore::RenderLayer::paintLayerContents(v50, v51, (uint64_t)&v152, v49);
    goto LABEL_100;
  }
  if ((*(_BYTE *)(a2 + 25) & 0x18) == 0)
    goto LABEL_100;
  v20 = *(_QWORD *)(a2 + 32);
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 24) + 8) + 40) + 8) + 3414)
    || *(float *)(*(_QWORD *)(*(_QWORD *)(v20 + 88) + 32) + 4) == 0.0)
  {
    goto LABEL_100;
  }
  v21 = *(WTF **)(a1 + 16);
  v23 = WebCore::RenderLayer::paintsWithTransparency((_QWORD *)a2, v10);
  v24 = v156;
  v25 = *(_QWORD *)(a2 + 256);
  if (v25)
  {
    if (*(_BYTE *)(v25 + 290))
      goto LABEL_127;
    v87 = *(_QWORD *)(v25 + 8);
    if ((*(_BYTE *)(v87 + 24) & 1) == 0)
      goto LABEL_127;
    v88 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v87 + 32) + 24) + 8)
                                                          + 40)
                                              + 8)
                                  + 1944);
    v89 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v88 + 50);
    if (!v89)
    {
      v135 = v7;
      v136 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
      v89 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v136, v88);
      v137 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v88 + 50);
      *((_QWORD *)v88 + 50) = v89;
      if (v137)
      {
        WebCore::RenderLayerCompositor::~RenderLayerCompositor(v137);
        WTF::fastFree(v138, v139);
        v89 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v88 + 50);
      }
      v7 = v135;
    }
    if (*((_BYTE *)v89 + 198))
    {
LABEL_127:
      v26 = 0;
    }
    else
    {
      v91 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 8)
                                                                                                + 32)
                                                                                    + 24)
                                                                        + 8)
                                                            + 40)
                                                + 8)
                                    + 1944);
      v92 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v91 + 50);
      if (!v92)
      {
        v140 = v7;
        v141 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        v92 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v141, v91);
        v142 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v91 + 50);
        *((_QWORD *)v91 + 50) = v92;
        if (v142)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v142);
          WTF::fastFree(v143, v144);
          v92 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v91 + 50);
        }
        v7 = v140;
      }
      v26 = *((_DWORD *)v92 + 54) != 2;
    }
  }
  else
  {
    v26 = 1;
  }
  v27 = v23 | a3;
  v28 = *(_QWORD *)(a2 + 200);
  if (!v28 || (v26 | ((unsigned __int16)(v24 & 0x200) >> 9)) != 1 || (a3 & 2) != 0)
  {
    v48 = *(_QWORD *)(a2 + 208);
    if (v48)
    {
      v134 = *(_QWORD *)(a2 + 24);
      if ((v134 & 0x8000) == 0)
      {
        *(_QWORD *)(a2 + 24) = v134 | 0x8000;
        WebCore::RenderLayer::paintLayer(*(_QWORD *)(v48 + 144), v21, (uint64_t)&v152, v27 & 0xFFFFFFF5 | 8);
        *(_QWORD *)(a2 + 24) &= ~0x8000uLL;
      }
    }
    v49 = v27 & 0xFFFFFF9D | 0x60;
    v50 = a2;
    v51 = (uint64_t)v21;
    goto LABEL_48;
  }
  v175 = *(int8x16_t *)(v28 + 64);
  v176 = *(int8x16_t *)(v28 + 80);
  v177 = *(_OWORD *)(v28 + 96);
  v178 = *(_OWORD *)(v28 + 112);
  v171 = *(int8x16_t *)v28;
  v172 = *(int8x16_t *)(v28 + 16);
  v173 = *(_OWORD *)(v28 + 32);
  v174 = *(float64x2_t *)(v28 + 48);
  if ((v156 & 0x200) != 0)
  {
    v172 = 0uLL;
    v31 = 0uLL;
    v174 = 0u;
    v175 = 0u;
    v176 = (int8x16_t)xmmword_1968A14B0;
    v32 = (float64x2_t)xmmword_1968A14C0;
    v178 = xmmword_1968A14C0;
    v30 = 1.0;
    v29 = 0uLL;
    v33 = 0uLL;
  }
  else
  {
    v29 = v174;
    v30 = *((double *)&v178 + 1);
    v31 = (float64x2_t)vextq_s8(v172, v172, 8uLL);
    v32 = (float64x2_t)vextq_s8(v175, v176, 8uLL);
    v33 = (float64x2_t)vextq_s8(v176, v175, 8uLL);
  }
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v31), (int32x4_t)vceqzq_f64(v29)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v33), (int32x4_t)vceqq_f64(v32, (float64x2_t)xmmword_1968A14C0)))))) & 1) != 0|| v30 != 1.0)
  {
    goto LABEL_162;
  }
  if (*(double *)&v171.i64[1] != 0.0
    || *(double *)&v173 != 0.0
    || *(double *)v171.i64 != 1.0
    || *((double *)&v173 + 1) != 1.0)
  {
    if (*(double *)&v178 == 0.0)
    {
      v34 = *(double *)v171.i64 * *((double *)&v173 + 1) - *(double *)&v171.i64[1] * *(double *)&v173;
      goto LABEL_30;
    }
LABEL_162:
    v34 = WebCore::determinant4x4((WebCore *)&v171, v22);
LABEL_30:
    if (((*(_QWORD *)&v34 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
      goto LABEL_100;
  }
  if ((v27 & 1) != 0)
  {
    if ((_QWORD)v152 == a2 || (v35 = *(_QWORD *)(a2 + 40)) == 0)
      v35 = a2;
    WebCore::RenderLayer::beginTransparencyLayers(v35, (uint64_t)v21, (uint64_t)&v152, (const WebCore::LayoutRect *)&v153);
  }
  v36 = *(_QWORD *)(a2 + 216);
  v151 = v23 | a3;
  if (!v36)
    goto LABEL_36;
  v81 = a2;
  do
  {
    v82 = *(_QWORD *)(v36 + 8);
    if (!v82)
      break;
    if (*(_QWORD *)(v82 + 256))
      goto LABEL_36;
    if (v82 == v81)
      break;
    if (*(_QWORD *)(v81 + 256))
      goto LABEL_36;
    v83 = v21;
    v84 = v7;
    if ((*(_BYTE *)(v81 + 24) & 4) == 0)
    {
      v85 = *(WebCore::RenderObject **)(v81 + 32);
      while (1)
      {
        v85 = WebCore::RenderObject::containingBlock(v85);
        v7 = v84;
        v21 = v83;
        v27 = v151;
        if (!v85 || *((_BYTE *)v85 + 46) == 49)
          goto LABEL_118;
        if ((*((_BYTE *)v85 + 21) & 0x80) != 0)
        {
          v81 = *((_QWORD *)v85 + 18);
          goto LABEL_117;
        }
      }
    }
    v81 = *(_QWORD *)(v81 + 40);
LABEL_117:
    v36 = *(_QWORD *)(v81 + 216);
    v7 = v84;
    v21 = v83;
    v27 = v151;
  }
  while (v36);
LABEL_118:
  v86 = *(_QWORD *)(a2 + 216);
  if (v86 && *(_QWORD *)(v86 + 8))
  {
    WebCore::RenderLayer::paintTransformedLayerIntoFragments(a2, v21, (uint64_t)&v152, v27);
  }
  else
  {
LABEL_36:
    v169 = v153;
    v170 = 0;
    v167 = v21;
    v168 = 0;
    v37 = v158;
    v165 = v158;
    if (v158)
      ++*(_DWORD *)(v158 + 8);
    v166 = 0;
    if (*(_QWORD *)(a2 + 40))
    {
      v38 = a3 & 0x400;
      v39 = v152;
      v162 = v152;
      v163 = ((int)(a3 << 29) >> 31) & 5;
      v164 = (a3 & 0x400) == 0;
      WebCore::RenderLayer::parentClipRects((WTF *)v161, a2, (uint64_t)&v162);
      v41 = v161[0];
      v42 = *(_QWORD *)(a2 + 32);
      v43 = (*(_DWORD *)(v42 + 96) >> 19) & 7;
      v148 = v38;
      if (v43 == 2)
      {
        v44 = (int *)((char *)v161[0] + 48);
      }
      else if (v43 == 6)
      {
        v44 = (int *)((char *)v161[0] + 28);
      }
      else
      {
        v44 = (int *)((char *)v161[0] + 8);
      }
      v149 = (uint64_t)v21;
      v150 = v7;
      v53 = *v44;
      v54 = v44[1];
      v55 = v44[2];
      v56 = v44[3];
      v57 = v44[4];
      v147 = v39;
      if (*((_BYTE *)v161[0] + 4))
      {
        v93 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 24) + 8) + 40) + 8) + 1944);
        v94 = *(_QWORD *)(v39 + 32);
        v58 = v53;
        v59 = v54;
        if (v94 == v93)
        {
          if (v53 != -1073741808
            || v54 != -1073741808
            || v55 != 2147483615
            || (v58 = -1073741808, v59 = -1073741808, v56 != 2147483615))
          {
            v95 = WebCore::LocalFrameView::scrollPositionForFixedPosition(*(int32x2_t **)(v93 + 248));
            v58 = v53 + v95;
            if (__OFADD__(v53, (_DWORD)v95))
              v58 = (v53 >> 31) + 0x7FFFFFFF;
            v59 = v54 + HIDWORD(v95);
            if (__OFADD__(v54, HIDWORD(v95)))
              v59 = (v54 >> 31) + 0x7FFFFFFF;
          }
        }
      }
      else
      {
        v58 = *v44;
        v59 = v44[1];
      }
      if (*(_DWORD *)v41 == 1)
        WTF::fastFree(v41, v40);
      else
        --*(_DWORD *)v41;
      v169.i64[0] = __PAIR64__(v59, v58);
      v169.i64[1] = __PAIR64__(v56, v55);
      v170 = v57;
      if (*(_OWORD *)&v153 != __PAIR128__(0x7FFFFFDF7FFFFFDFLL, 0xC0000010C0000010))
      {
        if (v58 == -1073741808 && v59 == -1073741808 && v55 == 2147483615 && v56 == 2147483615)
        {
          v169 = v153;
        }
        else
        {
          if (v58 <= v153.i32[0])
            v60 = v153.i32[0];
          else
            v60 = v58;
          if ((int)v59 <= v153.i32[1])
            v61 = v153.u32[1];
          else
            v61 = v59;
          v62 = v58 + v55;
          if (__OFADD__(v58, v55))
            v62 = (v58 >> 31) + 0x7FFFFFFF;
          v63 = v153.i32[0] + v153.i32[2];
          if (__OFADD__(v153.i32[0], v153.i32[2]))
            v63 = ((unsigned __int32)v153.i32[0] >> 31) + 0x7FFFFFFF;
          if (v63 >= v62)
            v64 = v62;
          else
            v64 = v63;
          v65 = v59 + v56;
          if (__OFADD__(v59, v56))
            v65 = (v59 >> 31) + 0x7FFFFFFF;
          v66 = v153.i32[1] + v153.i32[3];
          if (__OFADD__(v153.i32[1], v153.i32[3]))
            v66 = ((unsigned __int32)v153.i32[1] >> 31) + 0x7FFFFFFF;
          if (v66 >= v65)
            v67 = v65;
          else
            v67 = v66;
          if (v60 >= v64 || (int)v61 >= v67)
          {
            v64 = 0;
            v67 = 0;
            v60 = 0;
            v61 = 0;
          }
          v68 = v60 | (unint64_t)(v61 << 32);
          v69 = __OFSUB__(v64, v60);
          LODWORD(v70) = v64 - v60;
          v71 = (v64 >> 31) + 0x7FFFFFFF;
          if (v69)
            v70 = v71;
          else
            v70 = v70;
          v69 = __OFSUB__(v67, (_DWORD)v61);
          LODWORD(v61) = v67 - v61;
          v72 = (v67 >> 31) + 0x7FFFFFFF;
          if (v69)
            v61 = v72;
          else
            v61 = v61;
          v169.i64[0] = v68;
          v169.i64[1] = v70 | (v61 << 32);
        }
      }
      v73 = *(_QWORD *)(a2 + 32);
      if (*(_BYTE *)(v73 + 46) == 83)
      {
        ++*(_DWORD *)(v73 + 16);
        if (WebCore::RenderSVGRoot::shouldApplyViewportClip((WebCore::RenderSVGRoot *)v73))
        {
          v161[1] = *(WTF **)(v73 + 160);
          v108 = WebCore::RenderLayer::offsetFromAncestor(a2, v147, 0);
          if (__OFADD__((_DWORD)v108, (_DWORD)v154))
            v109 = (v108 >> 31) + 0x7FFFFFFF;
          else
            v109 = v108 + v154;
          if (__OFADD__(HIDWORD(v108), HIDWORD(v154)))
            v110 = (HIDWORD(v108) >> 31) + 0x7FFFFFFF;
          else
            v110 = HIDWORD(v108) + HIDWORD(v154);
          v111 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 24) + 8) + 40)
                                       + 8)
                           + 528);
          v112 = 1.0;
          if (v111)
          {
            v113 = *(_QWORD *)(v111 + 8);
            if (v113)
            {
              v114 = *(_QWORD *)(v113 + 24);
              if (v114)
              {
                v115 = *(_QWORD *)(v114 + 8);
                if (v115)
                {
                  v116 = (*(_DWORD *)v115)++;
                  v112 = *(float *)(v115 + 364);
                  if (v116)
                  {
                    *(_DWORD *)v115 = v116;
                  }
                  else
                  {
                    WebCore::Page::~Page(v115);
                    WTF::fastFree(v145, v146);
                  }
                }
              }
            }
          }
          v117 = (double)v109 * 0.015625;
          v118 = v112;
          v119 = round((v117 + (double)-v109) * v112) / v112 - (double)-v109;
          v120 = round(v117 * v112) / v112;
          if (v117 >= 0.0)
            v121 = v120;
          else
            v121 = v119;
          v122 = (double)v110 * 0.015625;
          v123 = round((v122 + (double)-v110) * v118) / v118 - (double)-v110;
          v124 = round(v122 * v118) / v118;
          if (v122 >= 0.0)
            v125 = v124;
          else
            v125 = v123;
          v126 = v121;
          v127 = v125;
          v128 = (float)(v126 + 0.0) * 64.0;
          if (v128 > -2147483650.0)
            v129 = (int)v128;
          else
            v129 = 0x80000000;
          if (v128 < 2147483650.0)
            v130 = v129;
          else
            v130 = 0x7FFFFFFF;
          LODWORD(v161[0]) = v130;
          v131 = (float)(v127 + 0.0) * 64.0;
          if (v131 >= 2147483650.0)
          {
            v132 = 0x7FFFFFFF;
          }
          else if (v131 <= -2147483650.0)
          {
            v132 = 0x80000000;
          }
          else
          {
            v132 = (int)v131;
          }
          HIDWORD(v161[0]) = v132;
          WebCore::ClipRect::intersect(v169.i32, (const WebCore::LayoutRect *)v161);
        }
        v133 = *(_DWORD *)(v73 + 16);
        if (!v133)
        {
          __break(0xC471u);
          JUMPOUT(0x1963F567CLL);
        }
        *(_DWORD *)(v73 + 16) = v133 - 1;
      }
      v21 = (WTF *)v149;
      WebCore::RenderLayer::clipToRect(*(_QWORD *)(a2 + 40), v149, &v167, (uint64_t)&v165, (uint64_t)&v152, 4 * v148, (uint64_t)&v169, 0);
      v37 = v165;
      v7 = v150;
      v27 = v151;
    }
    v162 = 0;
    WebCore::RenderLayer::paintLayerByApplyingTransform(a2, (uint64_t)v21, &v152, v27, &v162);
    if (v37)
    {
      if (v166)
      {
        v107 = *(_DWORD *)(v37 + 44);
        if (v107)
          *(_DWORD *)(v37 + 44) = v107 - 1;
      }
      v90 = *(_DWORD *)(v37 + 8);
      if (!v90)
      {
        __break(0xC471u);
        JUMPOUT(0x1963F536CLL);
      }
      *(_DWORD *)(v37 + 8) = v90 - 1;
    }
    if (v168)
      (*(void (**)(WTF *, uint64_t))(*(_QWORD *)v167 + 104))(v167, 1);
  }
LABEL_100:
  if (!**(_QWORD **)a1)
  {
    v74 = *(int32x4_t **)(a1 + 24);
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      WebCore::LocalFrameView::didPaintContents(*(WTF::MonotonicTime **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 32)+ 24)+ 8)+ 40)+ 8)+ 1944)+ 248), *(_QWORD *)(a1 + 16), v74, (uint64_t)&v159);
      v74 = *(int32x4_t **)(a1 + 24);
    }
    v75 = *(WebCore::RenderObject **)(a2 + 32);
    v76.i64[0] = 0xFE000000FE000000;
    v76.i64[1] = 0xFE000000FE000000;
    v77 = (int8x16_t)vcgtq_s32(*v74, v76);
    v78.i64[0] = 0xFE000000FE000000;
    v78.i64[1] = 0xFE000000FE000000;
    v79.i64[0] = 0x8000000080000000;
    v79.i64[1] = 0x8000000080000000;
    v171 = vorrq_s8((int8x16_t)(*(_OWORD *)&v77 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v78, *v74), v79, (int8x16_t)vshlq_n_s32(*v74, 6uLL)), v77));
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v102 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v75 + 3) + 8) + 40)
                                                           + 8)
                                               + 528)
                                   + 8)
                       + 24);
      if (v102)
      {
        v103 = *(_QWORD *)(v102 + 8);
        if (v103)
        {
          v104 = *(_QWORD *)(*(_QWORD *)(v103 + 80) + 8);
          if (v104)
          {
            v105 = *(_QWORD *)(v104 + 232);
            if (v105)
              WebCore::InspectorTimelineAgent::didPaint(v105, v75, (int32x2_t *)&v171);
            v106 = *(WTF::MonotonicTime **)(v104 + 200);
            if (v106)
              WebCore::InspectorPageAgent::didPaint(v106, v75, (int32x2_t *)&v171);
          }
        }
      }
    }
  }
}

WebCore::RenderLayerBacking *WebCore::RenderLayerBacking::paintDebugOverlays(WebCore::RenderLayerBacking *this, const WebCore::GraphicsLayer *a2, WebCore::GraphicsContext *a3)
{
  WebCore::RenderLayerBacking *v5;
  float v6;
  int v7;
  int v8;
  float v9;
  int v10;
  int v11;
  char v12;
  void *v13;
  void *v14;
  int *v15;
  int *v16;
  int v17;
  int v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  int *v25;
  int *v26;
  int v27;
  int v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  int *v35;
  int *v36;
  int v37;
  int v38;
  float v39;
  void *v40;
  void *v41;
  int *v42;
  int *v43;
  int v44;
  int v45;
  float v46;
  uint64_t v47;
  int v48;
  unsigned __int8 v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char **v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  int *v60;
  int *v61;
  int v62;
  int v63;
  float v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  char v71;
  uint64_t v72;
  float v73;
  float v74;
  float v75;
  float v76;
  WTF *v77[2];
  __int128 v78;

  if (*((int *)a2 + 102) >= 1 && *((int *)a2 + 103) >= 1)
  {
    v5 = this;
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 96))(a3, 1);
    v6 = roundf(*((float *)a2 + 10));
    if (v6 > -2147500000.0)
      v7 = (int)v6;
    else
      v7 = 0x80000000;
    if (v6 < 2147500000.0)
      v8 = v7;
    else
      v8 = 0x7FFFFFFF;
    v9 = roundf(*((float *)a2 + 11));
    if (v9 > -2147500000.0)
      v10 = (int)v9;
    else
      v10 = 0x80000000;
    if (v9 < 2147500000.0)
      v11 = v10;
    else
      v11 = 0x7FFFFFFF;
    (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)a3 + 648))(a3, (float)v8, (float)v11);
    v12 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 32) + 24) + 8) + 40)
                                                                                           + 8)
                                                                               + 528)
                                                                   + 8)
                                                       + 24)
                                           + 8)
                               + 112)
                   + 612);
    if ((v12 & 6) != 0)
    {
      v77[0] = (WTF *)0x110400000000FF32;
      WebCore::GraphicsContext::setFillColor(a3, (const WebCore::Color *)v77);
      if (((unint64_t)v77[0] & 0x8000000000000) != 0)
      {
        v65 = (unsigned int *)((unint64_t)v77[0] & 0xFFFFFFFFFFFFLL);
        do
        {
          v66 = __ldaxr(v65);
          v67 = v66 - 1;
        }
        while (__stlxr(v67, v65));
        if (!v67)
        {
          atomic_store(1u, v65);
          WTF::fastFree((WTF *)v65, v13);
        }
      }
      WebCore::Region::rects((uint64_t)a2 + 400, (uint64_t)v77);
      v15 = (int *)v77[0];
      if (HIDWORD(v77[1]))
      {
        v16 = (int *)((char *)v77[0] + 16 * HIDWORD(v77[1]));
        do
        {
          v17 = v15[2];
          v18 = v15[3];
          v19 = (float)v15[1];
          v73 = (float)*v15;
          v74 = v19;
          v75 = (float)v17;
          v76 = (float)v18;
          (*(void (**)(WebCore::GraphicsContext *, float *, uint64_t))(*(_QWORD *)a3 + 216))(a3, &v73, 1);
          v15 += 4;
        }
        while (v15 != v16);
        v15 = (int *)v77[0];
      }
      if (&v78 != (__int128 *)v15 && v15)
      {
        v77[0] = 0;
        LODWORD(v77[1]) = 0;
        WTF::fastFree((WTF *)v15, v14);
      }
    }
    v71 = v12;
    if ((v12 & 4) == 0)
    {
      if ((v12 & 2) == 0)
        goto LABEL_43;
LABEL_25:
      v20 = *((float *)a2 + 10);
      v21 = *((float *)a2 + 11);
      v77[0] = (WTF *)"wheel";
      v77[1] = (WTF *)6;
      *(_QWORD *)&v78 = 0;
      DWORD2(v78) = -2147450880;
      WebCore::patternForDescription(&v72, (uint64_t)v77, (uint64_t)a3, v20, v21);
      v22 = v72;
      v72 = 0;
      v23 = *((unsigned int *)a3 + 22);
      if ((_DWORD)v23 != -1)
        ((void (*)(WTF **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v23])(v77, (char *)a3 + 24);
      *((_QWORD *)a3 + 3) = v22;
      *((_DWORD *)a3 + 22) = 2;
      *((_DWORD *)a3 + 46) |= 1u;
      (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a3 + 88))(a3, (char *)a3 + 8);
      WebCore::Region::rects((uint64_t)a2 + 440, (uint64_t)v77);
      v25 = (int *)v77[0];
      if (HIDWORD(v77[1]))
      {
        v26 = (int *)((char *)v77[0] + 16 * HIDWORD(v77[1]));
        do
        {
          v27 = v25[2];
          v28 = v25[3];
          v29 = (float)v25[1];
          v73 = (float)*v25;
          v74 = v29;
          v75 = (float)v27;
          v76 = (float)v28;
          (*(void (**)(WebCore::GraphicsContext *, float *, uint64_t))(*(_QWORD *)a3 + 216))(a3, &v73, 1);
          v25 += 4;
        }
        while (v25 != v26);
        v25 = (int *)v77[0];
      }
      if (&v78 != (__int128 *)v25 && v25)
      {
        v77[0] = 0;
        LODWORD(v77[1]) = 0;
        WTF::fastFree((WTF *)v25, v24);
      }
      v30 = *((float *)a2 + 10);
      v31 = *((float *)a2 + 11);
      v77[0] = (WTF *)"sync";
      v77[1] = (WTF *)5;
      *(_QWORD *)&v78 = 0x4110000000000000;
      DWORD2(v78) = -2147483448;
      WebCore::patternForDescription(&v72, (uint64_t)v77, (uint64_t)a3, v30, v31);
      v32 = v72;
      v72 = 0;
      v33 = *((unsigned int *)a3 + 22);
      if ((_DWORD)v33 != -1)
        ((void (*)(WTF **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v33])(v77, (char *)a3 + 24);
      *((_QWORD *)a3 + 3) = v32;
      *((_DWORD *)a3 + 22) = 2;
      *((_DWORD *)a3 + 46) |= 1u;
      (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a3 + 88))(a3, (char *)a3 + 8);
      WebCore::Region::rects((uint64_t)a2 + 464, (uint64_t)v77);
      v35 = (int *)v77[0];
      if (HIDWORD(v77[1]))
      {
        v36 = (int *)((char *)v77[0] + 16 * HIDWORD(v77[1]));
        do
        {
          v37 = v35[2];
          v38 = v35[3];
          v39 = (float)v35[1];
          v73 = (float)*v35;
          v74 = v39;
          v75 = (float)v37;
          v76 = (float)v38;
          (*(void (**)(WebCore::GraphicsContext *, float *, uint64_t))(*(_QWORD *)a3 + 216))(a3, &v73, 1);
          v35 += 4;
        }
        while (v35 != v36);
        v35 = (int *)v77[0];
      }
      if (&v78 != (__int128 *)v35 && v35)
      {
        v77[0] = 0;
        LODWORD(v77[1]) = 0;
        WTF::fastFree((WTF *)v35, v34);
        if ((v71 & 8) != 0)
        {
LABEL_44:
          v77[0] = (WTF *)0x1104000080008032;
          WebCore::GraphicsContext::setFillColor(a3, (const WebCore::Color *)v77);
          if (((unint64_t)v77[0] & 0x8000000000000) != 0)
          {
            v68 = (unsigned int *)((unint64_t)v77[0] & 0xFFFFFFFFFFFFLL);
            do
            {
              v69 = __ldaxr(v68);
              v70 = v69 - 1;
            }
            while (__stlxr(v70, v68));
            if (!v70)
            {
              atomic_store(1u, v68);
              WTF::fastFree((WTF *)v68, v40);
            }
          }
          if (*((_BYTE *)a2 + 512))
          {
            WebCore::Region::rects((uint64_t)a2 + 488, (uint64_t)v77);
            v42 = (int *)v77[0];
            if (HIDWORD(v77[1]))
            {
              v43 = (int *)((char *)v77[0] + 16 * HIDWORD(v77[1]));
              do
              {
                v44 = v42[2];
                v45 = v42[3];
                v46 = (float)v42[1];
                v73 = (float)*v42;
                v74 = v46;
                v75 = (float)v44;
                v76 = (float)v45;
                (*(void (**)(WebCore::GraphicsContext *, float *, uint64_t))(*(_QWORD *)a3 + 216))(a3, &v73, 1);
                v42 += 4;
              }
              while (v42 != v43);
              v42 = (int *)v77[0];
            }
            if (&v78 != (__int128 *)v42)
            {
              if (v42)
              {
                v77[0] = 0;
                LODWORD(v77[1]) = 0;
                WTF::fastFree((WTF *)v42, v41);
              }
            }
          }
        }
      }
      else
      {
LABEL_43:
        if ((v71 & 8) != 0)
          goto LABEL_44;
      }
      return (WebCore::RenderLayerBacking *)(*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 104))(a3, 1);
    }
    v47 = 0;
    while (1)
    {
      v48 = byte_1969FCB84[v47];
      HIDWORD(v50) = v48;
      LODWORD(v50) = (v48 << 24) - 0x4000000;
      v49 = v50 >> 26;
      if (v49 > 7u)
        v51 = 0;
      else
        v51 = qword_1969FCC90[(char)v49];
      if (v51 < *((unsigned int *)a2 + 109))
      {
        v52 = *((_QWORD *)a2 + 53);
        if (v52)
        {
          v53 = WebCore::RenderLayerBacking::contentOffsetInCompositingLayer(v5);
          if (v48 <= 7)
          {
            if (v48 == 2)
            {
              v54 = 1;
LABEL_72:
              v55 = &(&WebCore::patternForTouchAction(WebCore::TouchAction,WebCore::FloatSize,WebCore::GraphicsContext &)::patternDescriptions)[4 * v54];
              v56 = *((_OWORD *)v55 + 1);
              *(_OWORD *)v77 = *(_OWORD *)v55;
              v78 = v56;
              WebCore::patternForDescription(&v72, (uint64_t)v77, (uint64_t)a3, (float)(int)v53 * 0.015625, (float)SHIDWORD(v53) * 0.015625);
              v57 = v72;
              if (v72)
              {
                v72 = 0;
                v58 = *((unsigned int *)a3 + 22);
                if ((_DWORD)v58 != -1)
                  ((void (*)(WTF **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v58])(v77, (char *)a3 + 24);
                *((_QWORD *)a3 + 3) = v57;
                *((_DWORD *)a3 + 22) = 2;
                *((_DWORD *)a3 + 46) |= 1u;
                (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a3 + 88))(a3, (char *)a3 + 8);
                WebCore::Region::rects(v52 + 24 * v51, (uint64_t)v77);
                v60 = (int *)v77[0];
                v61 = (int *)((char *)v77[0] + 16 * HIDWORD(v77[1]));
                if (HIDWORD(v77[1]))
                {
                  do
                  {
                    v62 = v60[2];
                    v63 = v60[3];
                    v64 = (float)v60[1];
                    v73 = (float)*v60;
                    v74 = v64;
                    v75 = (float)v62;
                    v76 = (float)v63;
                    (*(void (**)(WebCore::GraphicsContext *, float *, uint64_t))(*(_QWORD *)a3 + 216))(a3, &v73, 1);
                    v60 += 4;
                  }
                  while (v60 != v61);
                  v60 = (int *)v77[0];
                }
                if (&v78 != (__int128 *)v60 && v60)
                {
                  v77[0] = 0;
                  LODWORD(v77[1]) = 0;
                  WTF::fastFree((WTF *)v60, v59);
                }
              }
              goto LABEL_81;
            }
            if (v48 == 4)
            {
              v54 = 2;
              goto LABEL_72;
            }
          }
          else
          {
            switch(v48)
            {
              case 8:
                v54 = 3;
                goto LABEL_72;
              case 16:
                v54 = 4;
                goto LABEL_72;
              case 32:
                v54 = 5;
                goto LABEL_72;
            }
          }
        }
      }
LABEL_81:
      if (++v47 == 5)
        goto LABEL_25;
    }
  }
  return this;
}

uint64_t WebCore::paintScrollbar(uint64_t this, WebCore::Scrollbar *a2, CGPoint *a3, const WebCore::IntRect *a4, const WebCore::Color *a5)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  const CGRect *v15;
  float v16[4];
  CGRect v17;

  if (this)
  {
    v8 = this;
    (*(void (**)(WebCore::Scrollbar *, uint64_t, CGPoint *, const WebCore::IntRect *, const WebCore::Color *))(*(_QWORD *)a2 + 96))(a2, 1, a3, a4, a5);
    v9 = *(void **)(v8 + 40);
    if (v9)
    {
      if (objc_msgSend(*(id *)(v8 + 40), "conformsToProtocol:", &unk_1EE342188))
        v9 = (void *)objc_msgSend(v9, "superview");
      objc_msgSend(v9, "frame");
      v17.origin.x = v11;
      v17.origin.y = v12;
      v17.size.width = v13;
      v17.size.height = v14;
      v10 = WebCore::enclosingIntRect(&v17, v15);
    }
    else
    {
      v10 = *(_QWORD *)(v8 + 48);
    }
    (*(void (**)(WebCore::Scrollbar *, float, float))(*(_QWORD *)a2 + 648))(a2, (float)-(int)v10, (float)(int)((unint64_t)-(uint64_t)(v10 & 0xFFFFFFFF00000000) >> 32));
    v17.origin = *a3;
    LODWORD(v17.origin.x) += v10;
    HIDWORD(v17.origin.x) += HIDWORD(v10);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 272))(v8) & 1) != 0)
      goto LABEL_8;
    if ((*(_QWORD *)a4 & 0x8000000000000) != 0)
    {
      if (*(float *)((*(_QWORD *)a4 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
        goto LABEL_8;
    }
    else if (!*(_QWORD *)a4)
    {
LABEL_8:
      (*(void (**)(uint64_t, WebCore::Scrollbar *, CGRect *, _QWORD, _QWORD))(*(_QWORD *)v8 + 24))(v8, a2, &v17, 0, 0);
      return (*(uint64_t (**)(WebCore::Scrollbar *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
    }
    v16[0] = (float)SLODWORD(v17.origin.x);
    v16[1] = (float)SHIDWORD(v17.origin.x);
    v16[2] = (float)SLODWORD(v17.origin.y);
    v16[3] = (float)SHIDWORD(v17.origin.y);
    (*(void (**)(WebCore::Scrollbar *, float *, const WebCore::IntRect *))(*(_QWORD *)a2 + 224))(a2, v16, a4);
    goto LABEL_8;
  }
  return this;
}

float WebCore::RenderLayerCompositor::zoomedOutPageScaleFactor(WebCore::RenderLayerCompositor *this)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8)
                                                                                          + 40)
                                                                              + 8)
                                                                  + 528)
                                                      + 8)
                                          + 24)
                              + 8)
                  + 360);
}

float WebCore::RenderLayerCompositor::contentsScaleMultiplierForNewTiles(WebCore::RenderLayerCompositor *this, const WebCore::GraphicsLayer *a2)
{
  uint64_t v2;
  float v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8)
                                                                                         + 40)
                                                                             + 8)
                                                                 + 528)
                                                     + 8)
                                         + 24)
                             + 8)
                 + 160);
  v3 = 1.0;
  if (v2)
    v4 = *(_BYTE *)(v2 + 144) == 0;
  else
    v4 = 0;
  if (v4)
  {
    v5 = *(_QWORD *)(v2 + 288);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 32);
      if (!v6 || !*(_QWORD *)(v6 + 8))
      {
        v7 = objc_msgSend((id)objc_msgSend(*(id *)(v5 + 40), "window"), "tileCache");
        if (v7)
        {
          if (*(_BYTE *)(v7 + 68))
            return 0.125;
          else
            return 1.0;
        }
      }
    }
  }
  return v3;
}

unsigned int *WebCore::RenderLayerBacking::didChangePlatformLayerForLayer(WebCore::RenderLayerBacking *this, const WebCore::GraphicsLayer *a2)
{
  WebCore::RenderView *v3;
  WebCore::RenderLayerCompositor *v4;
  uint64_t v5;
  unsigned int *result;
  WebCore::ScrollingCoordinator *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::RenderLayerCompositor *v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v3 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32)
                                                                               + 24)
                                                                   + 8)
                                                       + 40)
                                           + 8)
                               + 1944);
  v4 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v3 + 50);
  if (!v4)
  {
    v4 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    WebCore::RenderLayerCompositor::RenderLayerCompositor(v4, v3);
    v17 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v3 + 50);
    *((_QWORD *)v3 + 50) = v4;
    if (v17)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v17);
      WTF::fastFree(v18, v19);
      v4 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v3 + 50);
    }
  }
  v5 = *((_QWORD *)this + 1);
  result = (unsigned int *)WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 1) + 24) + 8) + 40) + 8) + 528) + 8)
                                                                                             + 24)
                                                                                 + 8));
  if (result)
  {
    v7 = (WebCore::ScrollingCoordinator *)result;
    v8 = *(_QWORD **)(v5 + 256);
    v9 = v8[28];
    v10 = v8;
    if (v9)
    {
      WebCore::RenderLayerCompositor::updateScrollingNodeLayers((uint64_t)v4, v9, v8[29], v5, (uint64_t)result);
      v10 = *(_QWORD **)(v5 + 256);
    }
    result = (unsigned int *)v10[6];
    if (result)
      result = WebCore::LayerAncestorClippingStack::updateScrollingNodeLayers(result, v7);
    v11 = v8[26];
    if (v11)
    {
      v14 = v8[27];
      v20 = v8[13];
      v21 = 0u;
      v22 = 0u;
      v23 = 0u;
      v24 = 0;
      result = (unsigned int *)(*(uint64_t (**)(WebCore::ScrollingCoordinator *, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v7 + 304))(v7, v11, v14, &v20);
    }
    v12 = v8[30];
    if (v12)
    {
      v15 = v8[31];
      v20 = v8[9];
      v21 = 0u;
      v22 = 0u;
      v23 = 0u;
      v24 = 0;
      result = (unsigned int *)(*(uint64_t (**)(WebCore::ScrollingCoordinator *, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v7 + 304))(v7, v12, v15, &v20);
    }
    v13 = v8[34];
    if (v13)
    {
      v16 = v8[35];
      v20 = v8[9];
      v21 = 0u;
      v22 = 0u;
      v23 = 0u;
      v24 = 0;
      return (unsigned int *)(*(uint64_t (**)(WebCore::ScrollingCoordinator *, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v7 + 304))(v7, v13, v16, &v20);
    }
  }
  return result;
}

uint64_t WebCore::RenderLayerCompositor::isTrackingRepaints(WebCore::RenderLayerCompositor *this)
{
  return *((unsigned __int8 *)this + 199);
}

BOOL WebCore::RenderLayerBacking::shouldSkipLayerInDump(uint64_t a1, uint64_t a2, char a3)
{
  _BOOL8 result;

  if ((a3 & 1) != 0)
    return 0;
  result = 0;
  if (a2)
  {
    if (*(_BYTE *)(a1 + 289))
      return *(_QWORD *)(a1 + 96) == a2;
  }
  return result;
}

uint64_t WebCore::RenderLayerBacking::shouldDumpPropertyForLayer(uint64_t a1, float *a2, char *__s1, uint64_t a4, __int16 a5)
{
  uint64_t result;
  const WebCore::Color *v10;
  BOOL isWhiteColor;

  if (!*(_BYTE *)(a1 + 289))
    goto LABEL_13;
  if (*(float **)(a1 + 72) != a2 || (a5 & 0x400) != 0)
    goto LABEL_13;
  if (__s1)
  {
    result = strcmp(__s1, "drawsContent");
    if (!(_DWORD)result)
      return result;
    if (strcmp(__s1, "backgroundColor") || !WebCore::Color::isWhiteColor((WebCore::Color *)(a2 + 30), v10))
    {
      result = strcmp(__s1, "repaintRects");
      if (!(_DWORD)result)
        return result;
LABEL_13:
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 24) & 1) == 0 || *(float **)(a1 + 72) != a2 && *(float **)(a1 + 64) != a2)
      {
        if (__s1)
        {
          if (!strcmp(__s1, "anchorPoint"))
          {
LABEL_18:
            if (a2[19] != 0.5 || a2[20] != 0.5)
              return 1;
            return a2[21] != 0.0;
          }
        }
        else if (!"anchorPoint")
        {
          goto LABEL_18;
        }
        return 1;
      }
      if (__s1)
      {
        if (strcmp(__s1, "anchorPoint"))
          return 1;
      }
      else if ("anchorPoint")
      {
        return 1;
      }
      if (a2[19] != 0.0 || a2[20] != 0.0)
        return 1;
      return a2[21] != 0.0;
    }
    return 0;
  }
  if (!"drawsContent")
    return 0;
  if ("backgroundColor")
  {
    if ("repaintRects")
      goto LABEL_13;
    return 0;
  }
  isWhiteColor = WebCore::Color::isWhiteColor((WebCore::Color *)(a2 + 30), (const WebCore::Color *)a2);
  result = 0;
  if (!isWhiteColor && "backgroundColor" != "repaintRects")
    goto LABEL_13;
  return result;
}

uint64_t WebCore::RenderLayerBacking::cssUnprefixedBackdropFilterEnabled(WebCore::RenderLayerBacking *this)
{
  return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 24) + 8) + 40)
                                                                                            + 8)
                                                                                + 528)
                                                                    + 8)
                                                        + 24)
                                            + 8)
                                + 112)
                    + 672) >> 36) & 1;
}

WTF::MonotonicTime *WebCore::RenderLayerBacking::logFilledVisibleFreshTile(WTF::MonotonicTime *this, unsigned int a2)
{
  uint64_t (***v2)(_QWORD, uint64_t, _QWORD);

  v2 = *(uint64_t (****)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 24) + 8) + 40) + 8) + 528)
                                                                                               + 8)
                                                                                   + 24)
                                                                       + 8)
                                                           + 264);
  if (v2)
  {
    WTF::MonotonicTime::now(this);
    return (WTF::MonotonicTime *)(**v2)(v2, 2, a2);
  }
  return this;
}

uint64_t WebCore::RenderLayerBacking::updateAcceleratedEffectsAndBaseValues(WebCore::RenderLayerBacking *this, const WebCore::RenderElement *a2)
{
  uint64_t v2;
  WTF *v3;
  char v4;
  uint64_t v5;
  int v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  void *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _WORD *v36;
  uint64_t (**v37)();
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t (**v44)();
  int v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  _DWORD *v49;
  WTF *v50;
  WTF::StringImpl *v51;
  WTF *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  _WORD *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  WTF *v64;
  WTF *v65;
  WebCore::KeyframeEffect *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  WTF *v85;
  WTF *v86;
  unsigned int v87;
  uint64_t v88;
  void *v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  char *v101;
  WTF *v102;
  uint64_t v103;
  _DWORD *v104;
  uint64_t v105;
  WebCore::WebAnimation *v106;
  WTF *v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t *v114;
  const WebCore::RenderStyle *v115;
  WTF *v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  WTF *v120;
  unsigned int v121;
  WTF *v122[2];
  __int128 v123;
  WTF *v124;
  uint64_t v125;
  _OWORD v126[6];
  __int128 v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  _QWORD v131[3];
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  _QWORD v137[2];
  uint64_t v138;
  int v139;
  WTF::StringImpl *v140;
  char v141;
  char v142;
  __int16 v143;
  uint64_t *v144[3];
  _QWORD v145[3];
  char v146;

  v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 40)
                                                                                          + 8)
                                                                              + 528)
                                                                  + 8)
                                                      + 24)
                                          + 8)
                              + 112)
                  + 664) & 8) == 0)
    return 0;
  v143 = 0;
  if ((*(_BYTE *)(v5 + 45) & 4) == 0)
  {
    v7 = *(unsigned __int8 *)(v5 + 46);
    if (v7 != 83)
    {
      if ((*(_BYTE *)(v5 + 52) & 7) != 4)
      {
        v8 = v7 - 67;
        v9 = v8 > 0x13;
        v10 = 1 << v8;
        v11 = 917521;
        goto LABEL_7;
      }
      if (v7 != 85 && (*(_BYTE *)(v5 + 53) & 1) != 0)
      {
        v27 = v7 - 67;
        v9 = v27 > 0x13;
        v10 = 1 << v27;
        v11 = 655377;
LABEL_7:
        v12 = v10 & v11;
        if (v9 || v12 == 0)
          v143 = 2044;
      }
    }
  }
  WebCore::Styleable::fromRenderer(v5, a2, (uint64_t)&v138);
  v16 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
  if (v16 && (*(_BYTE *)(v16 + 45) & 4) != 0
    || ((v15 = *(_BYTE *)(v16 + 53) & 1, (*(_BYTE *)(v16 + 52) & 7) == 4) ? (v18 = v15 == 0) : (v18 = 0), v18))
  {
    v17 = *(_QWORD *)(v16 + 160);
  }
  else
  {
    v17 = 0;
  }
  v137[0] = 0;
  v137[1] = (((int)(v17 - (v15 & 0xFFFFFFC0) + 32) >> 6) + (int)v17 / 64) | ((unint64_t)(((int)(HIDWORD(v17) - (v15 & 0xFFFFFFC0) + 32) >> 6) + SHIDWORD(v17) / 64) << 32);
  if (!v142)
  {
    __break(1u);
    goto LABEL_233;
  }
  v19 = v138;
  if ((*(_QWORD *)(v138 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_24;
  v20 = *(unsigned int *)((*(_QWORD *)(v138 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
  if (!(_DWORD)v20)
    goto LABEL_24;
  v28 = *(uint64_t **)((*(_QWORD *)(v138 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
  v29 = 8 * v20;
  if (v141)
  {
    while (1)
    {
      v30 = *v28;
      if (*(_BYTE *)(*v28 + 96))
      {
        if (*(_DWORD *)(v30 + 80) == v139 && *(_QWORD *)(v30 + 88) == (_QWORD)v140)
          break;
      }
      ++v28;
      v29 -= 8;
      if (!v29)
        goto LABEL_24;
    }
  }
  else
  {
    while (1)
    {
      v30 = *v28;
      if (!*(_BYTE *)(*v28 + 96))
        break;
      ++v28;
      v29 -= 8;
      if (!v29)
        goto LABEL_24;
    }
  }
  v115 = *(const WebCore::RenderStyle **)(v30 + 8);
  if (v115)
  {
    WebCore::AcceleratedEffectValues::AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)v126, v115, (const WebCore::IntRect *)v137, (const WebCore::RenderLayerModelObject *)v5);
  }
  else
  {
LABEL_24:
    v134 = 0;
    v132 = 0u;
    v133 = 0u;
    v128 = 1;
    v127 = 0u;
    memset(v126, 0, sizeof(v126));
    LODWORD(v126[0]) = 1065353216;
    LODWORD(v127) = 0;
    *(_DWORD *)((char *)&v127 + 3) = 0;
    DWORD2(v127) = 0;
    *(_DWORD *)((char *)&v127 + 11) = 0;
    LODWORD(v132) = 0;
    *(_DWORD *)((char *)&v132 + 3) = 0;
    DWORD2(v132) = 0;
    *(_DWORD *)((char *)&v132 + 11) = 0;
    LODWORD(v133) = 0;
    *(_DWORD *)((char *)&v133 + 3) = 0;
    DWORD2(v133) = 0;
    *(_DWORD *)((char *)&v133 + 11) = 0;
    v129 = 0u;
    v130 = 0u;
    memset(v131, 0, sizeof(v131));
    v135 = 0u;
    v136 = 0u;
  }
  v124 = 0;
  v125 = 0;
  *(_OWORD *)v122 = 0u;
  v123 = 0u;
  if ((*(_QWORD *)(v19 + 72) & 0xFFFFFFFFFFFFLL) == 0
    || (v21 = *(unsigned int *)((*(_QWORD *)(v19 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4), !(_DWORD)v21))
  {
LABEL_27:
    v5 = 0;
    goto LABEL_28;
  }
  v32 = *(uint64_t **)((*(_QWORD *)(v19 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
  v33 = 8 * v21;
  if (v141)
  {
    while (1)
    {
      v34 = *v32;
      if (*(_BYTE *)(*v32 + 96))
      {
        if (*(_DWORD *)(v34 + 80) == v139 && *(_QWORD *)(v34 + 88) == (_QWORD)v140)
          break;
      }
      v5 = 0;
      ++v32;
      v33 -= 8;
      if (!v33)
        goto LABEL_28;
    }
  }
  else
  {
    v5 = 0;
    while (1)
    {
      v34 = *v32;
      if (!*(_BYTE *)(*v32 + 96))
        break;
      ++v32;
      v33 -= 8;
      if (!v33)
        goto LABEL_28;
    }
  }
  v5 = *(_QWORD *)v34;
  if (*(_QWORD *)v34)
  {
    v36 = (_WORD *)WTF::fastMalloc((WTF *)0x10);
    v37 = off_1E3391CE0;
    *(_QWORD *)v36 = off_1E3391CE0;
    v36[4] = 450;
    v38 = *(unsigned int *)(v5 + 12);
    if ((_DWORD)v38)
    {
      v39 = *(uint64_t **)v5;
      v40 = 8 * v38 - 8;
      do
      {
        v41 = *v39++;
        v42 = (*(uint64_t (**)(_WORD *, _QWORD))(*(_QWORD *)v36 + 16))(v36, *(_QWORD *)(v41 + 8));
        if ((v42 & 1) != 0)
          break;
        v43 = v40;
        v40 -= 8;
      }
      while (v43);
      v44 = *(uint64_t (***)())v36;
    }
    else
    {
      v42 = 0;
      v44 = off_1E3391CE0;
    }
    ((void (*)(_WORD *))v44[1])(v36);
    v57 = (_WORD *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v57 = off_1E3391CE0;
    v57[4] = 393;
    v58 = *(unsigned int *)(v5 + 12);
    if ((_DWORD)v58)
    {
      v59 = *(uint64_t **)v5;
      v60 = 8 * v58 - 8;
      do
      {
        v61 = *v59++;
        v62 = (*(uint64_t (**)(_WORD *, _QWORD))(*(_QWORD *)v57 + 16))(v57, *(_QWORD *)(v61 + 8));
        if ((v62 & 1) != 0)
          break;
        v63 = v60;
        v60 -= 8;
      }
      while (v63);
      v37 = *(uint64_t (***)())v57;
    }
    else
    {
      v62 = 0;
    }
    ((void (*)(_WORD *))v37[1])(v57);
    WebCore::KeyframeEffectStack::sortedEffects((uint64_t *)&v120, (WebCore::KeyframeEffectStack *)v5);
    v64 = v120;
    if (!v121)
    {
      v4 = 0;
      goto LABEL_210;
    }
    v4 = 0;
    v65 = (WTF *)((char *)v120 + 8 * v121);
    while (1)
    {
      if (!*(_QWORD *)v64)
        goto LABEL_184;
      v66 = *(WebCore::KeyframeEffect **)(*(_QWORD *)v64 + 8);
      if (!v66 || !WebCore::KeyframeEffect::canBeAccelerated(v66))
        goto LABEL_184;
      v67 = *(_QWORD *)v64;
      if (!(v42 | v62))
        goto LABEL_127;
      if (v67)
      {
        v68 = *(_QWORD *)(v67 + 8);
        if (!v42)
          goto LABEL_124;
      }
      else
      {
        v68 = 0;
        if (!v42)
          goto LABEL_124;
      }
      if (*(_BYTE *)(v68 + 202))
        goto LABEL_126;
LABEL_124:
      if (v62 && *(_BYTE *)(v68 + 203))
LABEL_126:
        v143 |= 0x7FCu;
LABEL_127:
      v69 = *(_QWORD *)(v67 + 8);
      v70 = bmalloc::api::isoAllocate();
      WebCore::AcceleratedEffect::AcceleratedEffect(v70, v69, (const WebCore::IntRect *)v137, &v143);
      v145[0] = v71;
      v145[1] = v126;
      v145[2] = &v146;
      v144[0] = v145;
      v144[1] = (uint64_t *)&v143;
      v144[2] = (uint64_t *)v71;
      v72 = *(unsigned __int16 *)(v71 + 128);
      if ((v72 & 0x800) != 0)
      {
        WebCore::AcceleratedEffect::validateFilters(WebCore::AcceleratedEffectValues const&,WTF::OptionSet<WebCore::AcceleratedEffectProperty> &)::$_2::operator()(v144, (unsigned __int8 *)0x800);
        v72 = *(unsigned __int16 *)(v70 + 128);
        if ((v72 & 0x1000) == 0)
        {
LABEL_129:
          if (v72)
            goto LABEL_133;
          goto LABEL_184;
        }
      }
      else if ((v72 & 0x1000) == 0)
      {
        goto LABEL_129;
      }
      WebCore::AcceleratedEffect::validateFilters(WebCore::AcceleratedEffectValues const&,WTF::OptionSet<WebCore::AcceleratedEffectProperty> &)::$_2::operator()(v144, (unsigned __int8 *)0x1000);
      if (*(_WORD *)(v70 + 128))
      {
LABEL_133:
        if ((v4 & 1) == 0)
        {
          if (*(_QWORD *)v64)
            v73 = *(_QWORD *)(*(_QWORD *)v64 + 8);
          else
            v73 = 0;
          v74 = *(_QWORD *)(v73 + 120);
          if ((v74 && (v75 = *(_QWORD *)(v74 + 8)) != 0
             || (v105 = *(_QWORD *)(v73 + 264)) != 0 && (v75 = *(_QWORD *)(*(_QWORD *)(v105 + 40) + 8)) != 0)
            && (*(_QWORD *)(*(_QWORD *)(v75 + 680) + 712) & 0x800000000000) != 0)
          {
            if (*(_BYTE *)(v73 + 328))
            {
              if (WebCore::KeyframeEffect::canBeAccelerated((WebCore::KeyframeEffect *)v73))
              {
                v106 = *(WebCore::WebAnimation **)(*(_QWORD *)(v73 + 96) + 8);
                if (!*((_BYTE *)v106 + 156) && WebCore::WebAnimation::playState(v106) == 1)
LABEL_140:
                  v4 = 1;
              }
            }
          }
          else if (*(_BYTE *)(v73 + 310) == 1)
          {
            goto LABEL_140;
          }
        }
        if (*(_QWORD *)v64)
          v76 = *(_QWORD *)(*(_QWORD *)v64 + 8);
        else
          v76 = 0;
        v77 = *(_QWORD *)(v70 + 16);
        if (v77)
          goto LABEL_241;
        v77 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v77 = 1;
        *(_QWORD *)(v77 + 8) = v70;
        v78 = *(unsigned int **)(v70 + 16);
        *(_QWORD *)(v70 + 16) = v77;
        if (!v78)
          goto LABEL_241;
        do
        {
          v79 = __ldaxr(v78);
          v80 = v79 - 1;
        }
        while (__stlxr(v80, v78));
        if (!v80)
        {
          atomic_store(1u, v78);
          WTF::fastFree((WTF *)v78, v14);
        }
        v77 = *(_QWORD *)(v70 + 16);
        if (v77)
        {
LABEL_241:
          do
            v81 = __ldaxr((unsigned int *)v77);
          while (__stlxr(v81 + 1, (unsigned int *)v77));
        }
        v82 = *(unsigned int **)(v76 + 296);
        *(_QWORD *)(v76 + 296) = v77;
        if (v82)
        {
          do
          {
            v83 = __ldaxr(v82);
            v84 = v83 - 1;
          }
          while (__stlxr(v84, v82));
          if (!v84)
          {
            atomic_store(1u, v82);
            WTF::fastFree((WTF *)v82, v14);
          }
        }
        if (++DWORD2(v123) > HIDWORD(v123))
        {
          v85 = v122[1];
          if (v122[1])
          {
            do
            {
              v86 = (WTF *)*((_QWORD *)v85 + 2);
              if (!*(_QWORD *)(*(_QWORD *)v85 + 8))
                WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)v122, v122, v85);
              v85 = v86;
            }
            while (v86);
          }
          DWORD2(v123) = 0;
          v87 = v122[0];
          if (v122[0])
          {
            v87 = *((_DWORD *)v122[0] - 3);
            if (v87 > 0x7FFFFFFE)
              v87 = 0x7FFFFFFF;
          }
          HIDWORD(v123) = 2 * v87;
        }
        v88 = *(_QWORD *)(v70 + 16);
        if (!v88)
        {
          v88 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v88 = 1;
          *(_QWORD *)(v88 + 8) = v70;
          v90 = *(unsigned int **)(v70 + 16);
          *(_QWORD *)(v70 + 16) = v88;
          if (v90)
          {
            do
            {
              v91 = __ldaxr(v90);
              v92 = v91 - 1;
            }
            while (__stlxr(v92, v90));
            if (!v92)
            {
              atomic_store(1u, v90);
              WTF::fastFree((WTF *)v90, v89);
            }
            v88 = *(_QWORD *)(v70 + 16);
          }
        }
        do
          v93 = __ldaxr((unsigned int *)v88);
        while (__stlxr(v93 + 1, (unsigned int *)v88));
        do
          v94 = __ldaxr((unsigned int *)v88);
        while (__stlxr(v94 + 1, (unsigned int *)v88));
        v144[0] = (uint64_t *)v88;
        WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)v122, (uint64_t *)v144, (uint64_t)v145);
        v95 = (unsigned int *)v144[0];
        v144[0] = 0;
        if (!v95)
          goto LABEL_174;
        do
        {
          v96 = __ldaxr(v95);
          v97 = v96 - 1;
        }
        while (__stlxr(v97, v95));
        if (!v97)
        {
          atomic_store(1u, v95);
          WTF::fastFree((WTF *)v95, v14);
          if (v88)
            goto LABEL_175;
        }
        else
        {
LABEL_174:
          if (v88)
          {
            do
            {
LABEL_175:
              v98 = __ldaxr((unsigned int *)v88);
              v99 = v98 - 1;
            }
            while (__stlxr(v99, (unsigned int *)v88));
            if (!v99)
            {
              atomic_store(1u, (unsigned int *)v88);
              WTF::fastFree((WTF *)v88, v14);
            }
          }
        }
        v145[0] = v70;
        LODWORD(v100) = HIDWORD(v125);
        if (HIDWORD(v125) == (_DWORD)v125)
        {
          v101 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v124, HIDWORD(v125) + 1, (unint64_t)v145);
          v100 = HIDWORD(v125);
          v102 = v124;
          v103 = *(_QWORD *)v101;
          *(_QWORD *)v101 = 0;
          *((_QWORD *)v102 + v100) = v103;
        }
        else
        {
          v145[0] = 0;
          *((_QWORD *)v124 + HIDWORD(v125)) = v70;
        }
        HIDWORD(v125) = v100 + 1;
        v104 = (_DWORD *)v145[0];
        v145[0] = 0;
        if (v104)
        {
          if (v104[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v104 + 56))(v104);
          else
            --v104[2];
        }
      }
LABEL_184:
      v64 = (WTF *)((char *)v64 + 8);
      if (v64 == v65)
      {
        v64 = v120;
        if (v121)
        {
          v107 = (WTF *)((char *)v120 + 8 * v121);
          do
          {
            v108 = *(unsigned int **)v64;
            *(_QWORD *)v64 = 0;
            if (v108)
            {
              do
              {
                v109 = __ldaxr(v108);
                v110 = v109 - 1;
              }
              while (__stlxr(v110, v108));
              if (!v110)
              {
                atomic_store(1u, v108);
                WTF::fastFree((WTF *)v108, v14);
              }
            }
            v64 = (WTF *)((char *)v64 + 8);
          }
          while (v64 != v107);
          v64 = v120;
        }
LABEL_210:
        if (v64)
          WTF::fastFree(v64, v14);
        v111 = v123;
        *(_QWORD *)&v123 = 0;
        v2 = *(_QWORD *)(v5 + 16);
        v3 = *(WTF **)(v5 + 24);
        v112 = *(_OWORD *)v122;
        v122[0] = 0;
        v122[1] = 0;
        *(_OWORD *)(v5 + 16) = v112;
        *(_QWORD *)(v5 + 32) = v111;
        if (!v3)
        {
LABEL_213:
          if (v2)
            WTF::fastFree((WTF *)(v2 - 16), v14);
          *(_QWORD *)(v5 + 40) = *((_QWORD *)&v123 + 1);
          if ((v4 & 1) != 0)
          {
            v5 = 1;
          }
          else
          {
            if (!(_DWORD)v125)
              goto LABEL_27;
            v5 = (uint64_t)v124;
            if (HIDWORD(v125))
            {
              v113 = 8 * HIDWORD(v125);
              do
              {
                v114 = *(uint64_t **)v5;
                *(_QWORD *)v5 = 0;
                if (v114)
                {
                  if (*((_DWORD *)v114 + 2) == 1)
                    (*(void (**)(uint64_t *))(*v114 + 56))(v114);
                  else
                    --*((_DWORD *)v114 + 2);
                }
                v5 += 8;
                v113 -= 8;
              }
              while (v113);
              HIDWORD(v125) = 0;
              v5 = (uint64_t)v124;
            }
            if (v5)
            {
              v124 = 0;
              LODWORD(v125) = 0;
              WTF::fastFree((WTF *)v5, v14);
              goto LABEL_27;
            }
          }
          break;
        }
        do
        {
LABEL_233:
          v116 = v3;
          v3 = (WTF *)*((_QWORD *)v3 + 2);
          v117 = *(unsigned int **)v116;
          *(_QWORD *)v116 = 0;
          if (v117)
          {
            do
            {
              v118 = __ldaxr(v117);
              v119 = v118 - 1;
            }
            while (__stlxr(v119, v117));
            if (!v119)
            {
              atomic_store(1u, v117);
              WTF::fastFree((WTF *)v117, v14);
            }
          }
          WTF::fastFree(v116, v14);
        }
        while (v3);
        goto LABEL_213;
      }
    }
  }
LABEL_28:
  (*(void (**)(_QWORD, WTF **, _OWORD *))(**((_QWORD **)this + 9) + 888))(*((_QWORD *)this + 9), &v124, v126);
  v23 = *((_QWORD *)this + 1);
  *(_DWORD *)(v23 + 12) |= 8u;
  if ((*(_BYTE *)(v23 + 24) & 4) != 0)
  {
    v24 = *(_QWORD *)(v23 + 40);
    if (v24)
    {
LABEL_32:
      do
      {
        v25 = *(_DWORD *)(v24 + 12);
        if ((v25 & 1) != 0)
          break;
        *(_DWORD *)(v24 + 12) = v25 | 1;
        if ((*(_BYTE *)(v24 + 24) & 4) == 0)
        {
          while (1)
          {
            v24 = *(_QWORD *)(v24 + 40);
            if (!v24)
              goto LABEL_71;
            if ((*(_BYTE *)(v24 + 24) & 0x4A) != 0)
              goto LABEL_32;
          }
        }
        v24 = *(_QWORD *)(v24 + 40);
      }
      while (v24);
    }
  }
  else
  {
    v24 = v23;
    while (1)
    {
      v24 = *(_QWORD *)(v24 + 40);
      if (!v24)
        break;
      if ((*(_BYTE *)(v24 + 24) & 0x4A) != 0)
        goto LABEL_32;
    }
  }
LABEL_71:
  *(_DWORD *)(v23 + 12) |= 0x40u;
  if ((*(_BYTE *)(v23 + 24) & 4) != 0)
  {
    v23 = *(_QWORD *)(v23 + 40);
    if (v23)
    {
LABEL_74:
      do
      {
        v45 = *(_DWORD *)(v23 + 12);
        if ((v45 & 2) != 0)
          break;
        *(_DWORD *)(v23 + 12) = v45 | 2;
        if ((*(_BYTE *)(v23 + 24) & 4) == 0)
        {
          while (1)
          {
            v23 = *(_QWORD *)(v23 + 40);
            if (!v23)
              goto LABEL_82;
            if ((*(_BYTE *)(v23 + 24) & 0x4A) != 0)
              goto LABEL_74;
          }
        }
        v23 = *(_QWORD *)(v23 + 40);
      }
      while (v23);
    }
  }
  else
  {
    while (1)
    {
      v23 = *(_QWORD *)(v23 + 40);
      if (!v23)
        break;
      if ((*(_BYTE *)(v23 + 24) & 0x4A) != 0)
        goto LABEL_74;
    }
  }
LABEL_82:
  v46 = v122[1];
  while (v46)
  {
    v53 = v46;
    v46 = (WTF *)*((_QWORD *)v46 + 2);
    v54 = *(unsigned int **)v53;
    *(_QWORD *)v53 = 0;
    if (v54)
    {
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (!v56)
      {
        atomic_store(1u, v54);
        WTF::fastFree((WTF *)v54, v22);
      }
    }
    WTF::fastFree(v53, v22);
  }
  if (v122[0])
    WTF::fastFree((WTF *)((char *)v122[0] - 16), v22);
  if (HIDWORD(v125))
  {
    v47 = v124;
    v48 = 8 * HIDWORD(v125);
    do
    {
      v49 = *(_DWORD **)v47;
      *(_QWORD *)v47 = 0;
      if (v49)
      {
        if (v49[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v49 + 56))(v49);
        else
          --v49[2];
      }
      v47 = (WTF *)((char *)v47 + 8);
      v48 -= 8;
    }
    while (v48);
  }
  v50 = v124;
  if (v124)
  {
    v124 = 0;
    LODWORD(v125) = 0;
    WTF::fastFree(v50, v22);
  }
  WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)v126, v22);
  if (v142 && v141 && v140)
  {
    if (*(_DWORD *)v140 == 2)
      WTF::StringImpl::destroy(v140, v51);
    else
      *(_DWORD *)v140 -= 2;
  }
  return v5;
}

uint64_t WebCore::RenderLayer::rendererBorderBoxRect(WebCore::RenderLayer *this)
{
  return 0;
}

uint64_t WebCore::RenderLayerBacking::animationFinished(WebCore::RenderLayerBacking *this, const WTF::String *a2)
{
  (*(void (**)(_QWORD, const WTF::String *, _QWORD))(**((_QWORD **)this + 9) + 440))(*((_QWORD *)this + 9), a2, 0);
  WebCore::RenderLayer::setNeedsPostLayoutCompositingUpdate(*((_QWORD *)this + 1));
  return WebCore::RenderLayer::setNeedsCompositingGeometryUpdate(*((_QWORD *)this + 1));
}

double WebCore::RenderLayerBacking::notifySubsequentFlushRequired(WebCore::RenderLayerBacking *this, const WebCore::GraphicsLayer *a2)
{
  WebCore::RenderView *v2;
  WebCore::RenderLayerCompositor *v3;
  uint64_t v4;
  double v5;
  double result;
  WebCore::RenderLayerCompositor *v7;
  WebCore::RenderLayerCompositor *v8;
  WTF *v9;
  void *v10;

  v2 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32)
                                                                               + 24)
                                                                   + 8)
                                                       + 40)
                                           + 8)
                               + 1944);
  v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
  if (!v3)
  {
    v7 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v3 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v7, v2);
    v8 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
    *((_QWORD *)v2 + 50) = v3;
    if (v8)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v8);
      WTF::fastFree(v9, v10);
      v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
    }
  }
  if ((*((_QWORD *)v3 + 13) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*((_QWORD *)v3 + 13) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    v4 = (uint64_t)v3 + 72;
    *((_QWORD *)v3 + 12) = 0;
    WTF::MonotonicTime::now(v3);
    WebCore::TimerBase::setNextFireTime(v4, v5 + 0.0);
  }
  return result;
}

double WebCore::RenderLayerCompositor::notifySubsequentFlushRequired(WebCore::RenderLayerCompositor *this, const WebCore::GraphicsLayer *a2)
{
  char *v2;
  double v3;
  double result;

  if ((*((_QWORD *)this + 13) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*((_QWORD *)this + 13) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    v2 = (char *)this + 72;
    *((_QWORD *)this + 12) = 0;
    WTF::MonotonicTime::now(this);
    WebCore::TimerBase::setNextFireTime((uint64_t)v2, v3 + 0.0);
  }
  return result;
}

uint64_t WebCore::RenderLayerBacking::compositingLayerType(WebCore::RenderLayerBacking *this)
{
  uint64_t v3;

  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 576))(*((_QWORD *)this + 9)) & 1) != 0)
    return 2;
  v3 = *((_QWORD *)this + 9);
  if ((*(_WORD *)(v3 + 177) & 0x20) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 832))(v3) != 0;
  else
    return 3;
}

double WebCore::RenderLayerBacking::backingStoreMemoryEstimate(WebCore::RenderLayerBacking *this)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (*(double (**)(_QWORD))(**((_QWORD **)this + 9) + 808))(*((_QWORD *)this + 9));
  v3 = *((_QWORD *)this + 10);
  if (v3)
    v2 = v2 + (*(double (**)(uint64_t))(*(_QWORD *)v3 + 808))(v3);
  v4 = *((_QWORD *)this + 11);
  if (v4)
    v2 = v2 + (*(double (**)(uint64_t))(*(_QWORD *)v4 + 808))(v4);
  v5 = *((_QWORD *)this + 14);
  if (v5)
    v2 = v2 + (*(double (**)(uint64_t))(*(_QWORD *)v5 + 808))(v5);
  v6 = *((_QWORD *)this + 21);
  if (v6)
    v2 = v2 + (*(double (**)(uint64_t))(*(_QWORD *)v6 + 808))(v6);
  v7 = *((_QWORD *)this + 16);
  if (v7)
    v2 = v2 + (*(double (**)(uint64_t))(*(_QWORD *)v7 + 808))(v7);
  v8 = *((_QWORD *)this + 17);
  if (v8)
    v2 = v2 + (*(double (**)(uint64_t))(*(_QWORD *)v8 + 808))(v8);
  v9 = *((_QWORD *)this + 18);
  if (v9)
    return v2 + (*(double (**)(uint64_t))(*(_QWORD *)v9 + 808))(v9);
  return v2;
}

uint64_t WebCore::RenderLayerBacking::transformMatrixForProperty(WebCore::AnimatedProperty)const::$_0::operator()(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  float v8[2];

  if (a3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 32);
    if (v4)
      v5 = (*(_BYTE *)(v4 + 45) & 4) == 0;
    else
      v5 = 1;
    if (!v5 || ((v3 = *(_BYTE *)(v4 + 53) & 1, (*(_BYTE *)(v4 + 52) & 7) == 4) ? (v6 = v3 == 0) : (v6 = 0), v6))
      v7 = *(_QWORD *)(v4 + 160);
    else
      v7 = 0;
    v8[0] = (float)(((int)(v7 - (v3 & 0xFFFFFFC0) + 32) >> 6) + (int)v7 / 64);
    v8[1] = (float)(((int)(HIDWORD(v7) - (v3 & 0xFFFFFFC0) + 32) >> 6) + SHIDWORD(v7) / 64);
    return (*(uint64_t (**)(uint64_t, uint64_t, float *))(*(_QWORD *)a3 + 48))(a3, result, v8);
  }
  return result;
}

WTF *WebCore::RenderLayerCompositor::BackingSharingState::startBackingSharingSequence(uint64_t a1, WTF **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  WTF *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  WTF *result;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  WTF *v23;
  WTF *v24;
  WTF *v25[2];
  __int128 v26;
  __int128 v27;

  v9 = *a2;
  if (*a2)
    goto LABEL_2;
  v9 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v9 = 1;
  *((_QWORD *)v9 + 1) = a2;
  v20 = *a2;
  *a2 = v9;
  if (!v20)
    goto LABEL_2;
  if (*(_DWORD *)v20 != 1)
  {
    --*(_DWORD *)v20;
LABEL_2:
    ++*(_DWORD *)v9;
    goto LABEL_3;
  }
  WTF::fastFree(v20, a2);
  v9 = *a2;
  if (*a2)
    goto LABEL_2;
LABEL_3:
  v24 = v9;
  *(_OWORD *)v25 = 0u;
  v26 = 0u;
  *(_QWORD *)&v27 = a3;
  *((_QWORD *)&v27 + 1) = a4;
  v10 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
  {
    v11 = WTF::Vector<WebCore::RenderLayerCompositor::BackingSharingState::Provider,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v10 + 1, (unint64_t)&v24);
    v12 = *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 12);
    v13 = *(_QWORD *)v11;
    *(_QWORD *)v11 = 0;
    *(_QWORD *)v12 = v13;
    *(_QWORD *)(v12 + 8) = 0;
    v14 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v12 + 8) = v14;
    v15 = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v12 + 16) = v15;
    v16 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v12 + 24) = v16;
    *(_QWORD *)(v12 + 32) = *(_QWORD *)(v11 + 32);
    *(_OWORD *)(v12 + 40) = *(_OWORD *)(v11 + 40);
    v17 = v25[1];
    ++*(_DWORD *)(a1 + 12);
    while (v17)
    {
      v22 = v17;
      v17 = (WTF *)*((_QWORD *)v17 + 2);
      v23 = *(WTF **)v22;
      *(_QWORD *)v22 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 1)
          WTF::fastFree(v23, a2);
        else
          --*(_DWORD *)v23;
      }
      WTF::fastFree(v22, a2);
    }
  }
  else
  {
    v21 = *(_QWORD *)a1 + 56 * v10;
    v24 = 0;
    *(_QWORD *)v21 = v9;
    v25[0] = 0;
    *(_QWORD *)(v21 + 8) = 0;
    v25[1] = 0;
    *(_QWORD *)(v21 + 16) = 0;
    *(_QWORD *)&v26 = 0;
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(v21 + 32) = 0;
    *(_OWORD *)(v21 + 40) = v27;
    ++*(_DWORD *)(a1 + 12);
  }
  if (v25[0])
    WTF::fastFree((WTF *)((char *)v25[0] - 16), a2);
  result = v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  *(_QWORD *)(a1 + 16) = a5;
  return result;
}

void WebCore::RenderLayerCompositor::BackingSharingState::Provider::~Provider(WebCore::RenderLayerCompositor::BackingSharingState::Provider *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;

  v3 = (WTF *)*((_QWORD *)this + 2);
  while (v3)
  {
    v6 = v3;
    v3 = (WTF *)*((_QWORD *)v3 + 2);
    v7 = *(WTF **)v6;
    *(_QWORD *)v6 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
        WTF::fastFree(v7, a2);
      else
        --*(_DWORD *)v7;
    }
    WTF::fastFree(v6, a2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = *(WTF **)this;
  *(_QWORD *)this = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
}

void WebCore::RenderLayerCompositor::BackingSharingState::addBackingSharingCandidate(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  WTF *v11;
  void *v12;
  WTF *v13;
  WTF *v14;
  void *v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  WTF *v19;
  WTF *v20;
  WTF *v21[2];
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  if (*(_QWORD *)(a1 + 16) != a5)
  {
    WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v20, a2);
    *(_OWORD *)v21 = 0u;
    v22 = 0u;
    v23 = a3;
    v24 = a4;
    WTF::Vector<WebCore::RenderLayerCompositor::BackingSharingState::Provider,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert(a1, 0, (unint64_t)&v20);
    WebCore::RenderLayerCompositor::BackingSharingState::Provider::~Provider((WebCore::RenderLayerCompositor::BackingSharingState::Provider *)&v20, v17);
    return;
  }
  v11 = (WTF *)*a2;
  if (!*a2)
  {
    v11 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *((_QWORD *)v11 + 1) = a2;
    v16 = (WTF *)*a2;
    *a2 = (uint64_t)v11;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
      {
        WTF::fastFree(v16, v15);
        v11 = (WTF *)*a2;
        if (!*a2)
          goto LABEL_4;
      }
      else
      {
        --*(_DWORD *)v16;
      }
    }
  }
  ++*(_DWORD *)v11;
LABEL_4:
  v20 = v11;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = a3;
  v24 = a4;
  WTF::Vector<WebCore::RenderLayerCompositor::BackingSharingState::Provider,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert(a1, a6, (unint64_t)&v20);
  v13 = v21[1];
  while (v13)
  {
    v18 = v13;
    v13 = (WTF *)*((_QWORD *)v13 + 2);
    v19 = *(WTF **)v18;
    *(_QWORD *)v18 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 1)
        WTF::fastFree(v19, v12);
      else
        --*(_DWORD *)v19;
    }
    WTF::fastFree(v18, v12);
  }
  if (v21[0])
    WTF::fastFree((WTF *)((char *)v21[0] - 16), v12);
  v14 = v20;
  v20 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
      WTF::fastFree(v14, v12);
    else
      --*(_DWORD *)v14;
  }
}

__n128 WTF::Vector<WebCore::RenderLayerCompositor::BackingSharingState::Provider,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::RenderLayerCompositor::BackingSharingState::Provider *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = a3;
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6 == *(_DWORD *)(a1 + 8))
  {
    v3 = WTF::Vector<WebCore::RenderLayerCompositor::BackingSharingState::Provider,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v6 + 1, a3);
    LODWORD(v6) = *(_DWORD *)(a1 + 12);
  }
  v7 = *(_QWORD *)a1;
  v8 = (_QWORD *)(*(_QWORD *)a1 + 56 * (_QWORD)a2);
  if ((void *)v6 != a2)
  {
    v15 = 0;
    v16 = 56 * v6;
    v17 = v7 + v16;
    v18 = v7 + 56 * (_QWORD)a2 + 56 * ((v7 + v16 - (uint64_t)v8) / 56);
    v19 = 56 * (_QWORD)a2 - v16;
    do
    {
      v20 = v18 + v15;
      v21 = (WebCore::RenderLayerCompositor::BackingSharingState::Provider *)(v17 + v15 - 56);
      v22 = *(_QWORD *)v21;
      *(_QWORD *)v21 = 0;
      *(_QWORD *)v20 = v22;
      *(_QWORD *)(v20 + 8) = 0;
      v23 = *(_QWORD *)(v17 + v15 - 48);
      *((_QWORD *)v21 + 1) = 0;
      *(_QWORD *)(v20 + 8) = v23;
      v24 = *(_QWORD *)(v17 + v15 - 40);
      *((_QWORD *)v21 + 2) = 0;
      *(_QWORD *)(v20 + 16) = v24;
      v25 = *(_QWORD *)(v17 + v15 - 32);
      *((_QWORD *)v21 + 3) = 0;
      *(_QWORD *)(v20 + 24) = v25;
      *(_QWORD *)(v20 + 32) = *(_QWORD *)(v17 + v15 - 24);
      *(_OWORD *)(v20 + 40) = *(_OWORD *)(v17 + v15 - 16);
      WebCore::RenderLayerCompositor::BackingSharingState::Provider::~Provider(v21, a2);
      v15 -= 56;
    }
    while (v19 != v15);
  }
  v9 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *v8 = v9;
  v10 = v7 + 56 * (_QWORD)a2;
  *(_QWORD *)(v10 + 8) = 0;
  v11 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v10 + 8) = v11;
  v12 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v10 + 16) = v12;
  v13 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v10 + 24) = v13;
  *(_QWORD *)(v10 + 32) = *(_QWORD *)(v3 + 32);
  result = *(__n128 *)(v3 + 40);
  *(__n128 *)(v10 + 40) = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WebCore::RenderLayerCompositor::BackingSharingState::issuePendingRepaints(uint64_t this, void *a2)
{
  uint64_t v2;
  WTF **v3;
  WTF ***v4;
  WTF **v5;
  uint64_t v6;
  WTF **v7;
  WTF **v8;
  uint64_t v9;
  WTF **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF **v14;
  WTF *v15;
  WebCore::RenderLayer *v16;
  WebCore::RenderLayerCompositor *v17;
  WTF **v18;
  WTF **v19;
  uint64_t v20;
  WTF **v21;
  WTF **v22;
  WTF **v23;
  WTF **v24;

  v2 = this;
  v4 = (WTF ***)(this + 24);
  v3 = *(WTF ***)(this + 24);
  if (!v3)
  {
    v5 = 0;
    v6 = 0;
LABEL_3:
    v7 = &v3[v6];
    goto LABEL_4;
  }
  v6 = *((unsigned int *)v3 - 1);
  v7 = &v3[v6];
  if (!*((_DWORD *)v3 - 3))
  {
    v5 = &v3[v6];
    goto LABEL_3;
  }
  v5 = *(WTF ***)(this + 24);
  if ((_DWORD)v6)
  {
    v12 = 8 * v6;
    v5 = *(WTF ***)(this + 24);
    while ((unint64_t)*v5 + 1 <= 1)
    {
      ++v5;
      v12 -= 8;
      if (!v12)
      {
        v5 = v7;
        break;
      }
    }
  }
LABEL_4:
  v20 = this + 24;
  v21 = v5;
  v22 = v7;
  if (v3)
  {
    v9 = *((unsigned int *)v3 - 1);
    v8 = &v3[v9];
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v23 = v8;
  v24 = &v3[v9];
  if (v5 != v8)
  {
    if (!*((_QWORD *)*v5 + 1))
    {
      v18 = v5;
      do
      {
        v19 = v18 + 1;
        v18 = v7;
        if (v19 != v7)
        {
          v18 = v19;
          while ((unint64_t)*v18 + 1 <= 1)
          {
            if (++v18 == v7)
            {
              v18 = v7;
              break;
            }
          }
        }
        v5 = v8;
        if (v18 == v8)
          break;
        v5 = v18;
      }
      while (!*((_QWORD *)*v18 + 1));
    }
    v21 = v5;
  }
  if (v3)
    v10 = &v3[*((unsigned int *)v3 - 1)];
  else
    v10 = 0;
  if (v5 != v10)
  {
    do
    {
      v16 = (WebCore::RenderLayer *)*((_QWORD *)*v5 + 1);
      WebCore::RenderLayer::computeRepaintRectsIncludingDescendants(v16);
      v17 = (WebCore::RenderLayerCompositor *)WebCore::RenderView::compositor(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v16 + 4) + 24) + 8) + 40) + 8) + 1944));
      WebCore::RenderLayerCompositor::repaintOnCompositingChange(v17, v16);
      this = (uint64_t)WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v20);
      v5 = v21;
    }
    while (v21 != v10);
    v3 = *v4;
  }
  if (v3)
  {
    *v4 = 0;
    v13 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v13)
    {
      v14 = v3;
      do
      {
        v15 = *v14;
        if (*v14 != (WTF *)-1)
        {
          *v14 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 1)
              WTF::fastFree(v15, a2);
            else
              --*(_DWORD *)v15;
          }
        }
        ++v14;
        --v13;
      }
      while (v13);
    }
    this = WTF::fastFree((WTF *)(v3 - 2), a2);
    v11 = *(_QWORD *)(v2 + 24);
    *(_DWORD *)(v2 + 32) = 0;
    if (v11)
    {
      LODWORD(v11) = *(_DWORD *)(v11 - 12);
      if (v11 > 0x7FFFFFFE)
        LODWORD(v11) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v11) = 0;
    *(_DWORD *)(v2 + 32) = 0;
  }
  *(_DWORD *)(v2 + 36) = 2 * v11;
  return this;
}

uint64_t WebCore::RenderLayerCompositor::repaintOnCompositingChange(WebCore::RenderLayerCompositor *this, WebCore::RenderLayer *a2)
{
  uint64_t result;
  uint64_t v5;
  WebCore::RenderLayerModelObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  WebCore::RenderLayerModelObject *v11;

  result = *((_QWORD *)a2 + 4);
  if (result == *((_QWORD *)this + 1) || (v5 = *(_QWORD *)(result + 32)) != 0 && *(_QWORD *)(v5 + 8))
  {
    WebCore::RenderObject::containerForRepaint((_QWORD *)result, (uint64_t)&v10);
    v6 = v11;
    if (!v11)
    {
      v6 = (WebCore::RenderLayerModelObject *)*((_QWORD *)this + 1);
      if (v6)
        ++*((_DWORD *)v6 + 4);
    }
    result = (uint64_t)WebCore::RenderLayer::repaintIncludingNonCompositingDescendants(a2, v6);
    if (v6 == *((WebCore::RenderLayerModelObject **)this + 1))
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 31) + 328) + 24);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
          result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 48) + 16) + 1000))(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 16));
      }
    }
    else if (!v6)
    {
      return result;
    }
    v9 = *((_DWORD *)v6 + 4);
    if (v9)
    {
      *((_DWORD *)v6 + 4) = v9 - 1;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

_QWORD *WebCore::RenderLayerCompositor::destroyRootLayer(_QWORD *this)
{
  _DWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Scrollbar *v5;
  WebCore::ScrollableArea *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Scrollbar *v10;
  WebCore::ScrollableArea *v11;
  uint64_t v12;
  WebCore::ScrollView *v13;
  WebCore::ScrollableArea *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = this + 28;
  if (this[28])
  {
    v2 = this;
    WebCore::RenderLayerCompositor::detachRootLayer((WebCore::RenderLayerCompositor *)this);
    if (v2[33])
    {
      WebCore::GraphicsLayer::unparentAndClear((_DWORD *)v2 + 66);
      v3 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2[1] + 24) + 8) + 40) + 8) + 528)
                                                                                         + 8)
                                                                             + 24)
                                                                 + 8));
      if (v3)
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 456))(v3, *(_QWORD *)(v2[1] + 248) + 64, 0);
      v4 = *(_QWORD *)(v2[1] + 248);
      v5 = *(WebCore::Scrollbar **)(v4 + 152);
      if (v5)
      {
        v6 = (WebCore::ScrollableArea *)(v4 + 64);
        WebCore::Widget::frameRect(*(WebCore::Widget **)(v4 + 152));
        v16 = 0;
        v17 = v7;
        WebCore::ScrollableArea::invalidateScrollbar(v6, v5, (const WebCore::IntRect *)&v16);
      }
    }
    if (v2[34])
    {
      WebCore::GraphicsLayer::unparentAndClear((_DWORD *)v2 + 68);
      v8 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2[1] + 24) + 8) + 40) + 8) + 528)
                                                                                         + 8)
                                                                             + 24)
                                                                 + 8));
      if (v8)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 456))(v8, *(_QWORD *)(v2[1] + 248) + 64, 1);
      v9 = *(_QWORD *)(v2[1] + 248);
      v10 = *(WebCore::Scrollbar **)(v9 + 160);
      if (v10)
      {
        v11 = (WebCore::ScrollableArea *)(v9 + 64);
        WebCore::Widget::frameRect(*(WebCore::Widget **)(v9 + 160));
        v16 = 0;
        v17 = v12;
        WebCore::ScrollableArea::invalidateScrollbar(v11, v10, (const WebCore::IntRect *)&v16);
      }
    }
    if (v2[35])
    {
      WebCore::GraphicsLayer::unparentAndClear((_DWORD *)v2 + 70);
      v13 = *(WebCore::ScrollView **)(v2[1] + 248);
      v14 = (WebCore::ScrollView *)((char *)v13 + 64);
      v16 = WebCore::ScrollView::scrollCornerRect(v13);
      v17 = v15;
      WebCore::ScrollableArea::invalidateScrollCorner(v14, (const WebCore::IntRect *)&v16);
    }
    if (v2[32])
    {
      WebCore::GraphicsLayer::unparentAndClear((_DWORD *)v2 + 64);
      WebCore::GraphicsLayer::unparentAndClear((_DWORD *)v2 + 58);
      WebCore::GraphicsLayer::unparentAndClear((_DWORD *)v2 + 60);
      WebCore::GraphicsLayer::unparentAndClear((_DWORD *)v2 + 62);
    }
    return WebCore::GraphicsLayer::unparentAndClear(v1);
  }
  return this;
}

uint64_t WebCore::RenderLayerCompositor::rootRenderLayer(WebCore::RenderLayerCompositor *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 144);
}

_BYTE *PAL::HysteresisActivity::impulse(_BYTE *this)
{
  _BYTE *v1;

  if (!this[48])
  {
    v1 = this;
    if ((WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(this + 16)) & 1) == 0)
    {
      v1[48] = 1;
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v1 + 16))(*(_QWORD *)v1, 0);
      v1[48] = 0;
    }
    return (_BYTE *)WTF::RunLoop::TimerBase::start();
  }
  return this;
}

BOOL WebCore::RenderLayerCompositor::shouldDumpPropertyForLayer(int a1, float *a2, char *__s1)
{
  if (__s1)
  {
    if (strcmp(__s1, "anchorPoint"))
      return 1;
  }
  else if ("anchorPoint")
  {
    return 1;
  }
  if (a2[19] != 0.5 || a2[20] != 0.5)
    return 1;
  return a2[21] != 0.0;
}

uint64_t WebCore::RenderLayerCompositor::setRenderingIsSuppressed(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;

  v2 = *(_QWORD *)(this + 256);
  if (v2 || (v2 = *(_QWORD *)(this + 224)) != 0)
  {
    v4 = *(unsigned __int16 *)(v2 + 177);
    v3 = v2 + 177;
    v5 = v4 | (*(unsigned __int8 *)(v3 + 2) << 16);
    if (a2)
      v6 = 0x200000;
    else
      v6 = 0;
    v7 = v5 & 0xFFDFFFFF;
    *(_WORD *)v3 = v7;
    *(_BYTE *)(v3 + 2) = (v7 | v6) >> 16;
  }
  return this;
}

uint64_t WebCore::LegacyWebKitScrollingLayerCoordinator::registerAllViewportConstrainedLayers(uint64_t this, WebCore::RenderLayerCompositor *a2)
{
  uint64_t *v3;
  _QWORD *i;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  _QWORD *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  _QWORD *v54;
  WebCore::RenderLayer *v55;
  uint64_t v56;
  int v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t *v63;
  _QWORD *v64;
  uint64_t *v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69[2];

  if (*(_BYTE *)(this + 40))
  {
    v68 = 0;
    v69[0] = 0;
    v54 = (_QWORD *)this;
    v3 = (uint64_t *)(this + 24);
    WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t *)(this + 24), &v65);
    WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v3, &v63);
    for (i = v66; v66 != v64; i = v66)
    {
      v5 = *(_QWORD *)(*i + 8);
      v6 = *(_QWORD *)(v5 + 32);
      v7 = *(_DWORD *)(v6 + 20) & 0x1800000;
      if (v7 == 25165824)
      {
        WebCore::RenderLayerCompositor::computeStickyViewportConstraints((WebCore::RenderLayerCompositor *)&v55, (WebCore::RenderLayer *)v6, *(_QWORD *)(v5 + 256));
        v8 = WTF::fastMalloc((WTF *)0x68);
        *(_QWORD *)v8 = off_1E3403D10;
        v9 = v56;
        *(_DWORD *)(v8 + 16) = v57;
        *(_QWORD *)v8 = off_1E34043D0;
        *(_QWORD *)(v8 + 8) = v9;
        *(_OWORD *)(v8 + 20) = v58;
        v10 = v61;
        v11 = v62;
        v12 = v60;
        *(_OWORD *)(v8 + 36) = v59;
        *(_OWORD *)(v8 + 84) = v11;
        *(_OWORD *)(v8 + 68) = v10;
        *(_OWORD *)(v8 + 52) = v12;
        v55 = 0;
        if (!WebCore::RenderLayerCompositor::isAsyncScrollableStickyLayer(a2, *(const WebCore::RenderLayer **)(v5 + 40), &v55)|| v55 == 0)
        {
          goto LABEL_34;
        }
        v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 256) + 72) + 584))(*(_QWORD *)(*(_QWORD *)(v5 + 256) + 72));
        v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v55 + 32) + 160) + 584))(*(_QWORD *)(*((_QWORD *)v55 + 32) + 160));
        v16 = v68;
        if (v68
          || (WTF::HashTable<WebCore::StyleRuleFontFace *,WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>>,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashMap<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::CSSFontFace *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::StyleRuleFontFace *>>::rehash(&v68, 8u), (v16 = v68) != 0))
        {
          v17 = *(_DWORD *)(v16 - 8);
        }
        else
        {
          v17 = 0;
        }
        v18 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
        v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
        v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
        v21 = v17 & ((v20 >> 31) ^ v20);
        v22 = (uint64_t *)(v16 + 16 * v21);
        v23 = *v22;
        if (*v22)
        {
          v24 = 0;
          v25 = 1;
          while (v23 != v14)
          {
            if (v23 == -1)
              v24 = v22;
            v21 = (v21 + v25) & v17;
            v22 = (uint64_t *)(v16 + 16 * v21);
            v23 = *v22;
            ++v25;
            if (!*v22)
            {
              if (v24)
              {
                *v24 = 0;
                v24[1] = 0;
                --*(_DWORD *)(v16 - 16);
                v22 = v24;
              }
              goto LABEL_19;
            }
          }
        }
        else
        {
LABEL_19:
          *v22 = v14;
          v22[1] = v15;
          v26 = v68;
          if (v68)
            v27 = *(_DWORD *)(v68 - 12) + 1;
          else
            v27 = 1;
          *(_DWORD *)(v68 - 12) = v27;
          v28 = (*(_DWORD *)(v26 - 16) + v27);
          v29 = *(unsigned int *)(v26 - 4);
          if (v29 > 0x400)
          {
            if (v29 > 2 * v28)
              goto LABEL_34;
LABEL_30:
            v30 = (_DWORD)v29 << (6 * v27 >= (2 * v29));
LABEL_33:
            WTF::HashTable<WebCore::StyleRuleFontFace *,WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>>,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashMap<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::CSSFontFace *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::StyleRuleFontFace *>>::rehash(&v68, v30);
            goto LABEL_34;
          }
          if (3 * v29 <= 4 * v28)
          {
            if ((_DWORD)v29)
              goto LABEL_30;
            v30 = 8;
            goto LABEL_33;
          }
        }
      }
      else
      {
        if (v7 != 0x1000000)
          goto LABEL_58;
        if ((*(_BYTE *)(v6 + 45) & 2) != 0)
          v6 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8);
        if ((*(_QWORD *)(v6 + 96) & 0x380000) != 0x300000)
          goto LABEL_58;
        WebCore::RenderLayerCompositor::computeFixedViewportConstraints((WebCore::RenderLayerCompositor *)&v55, a2, v5);
        v8 = WTF::fastMalloc((WTF *)0x30);
        *(_QWORD *)(v8 + 8) = v56;
        *(_DWORD *)(v8 + 16) = v57;
        *(_QWORD *)v8 = off_1E3403CE8;
        *(_OWORD *)(v8 + 20) = v58;
        *(_QWORD *)(v8 + 36) = v59;
      }
LABEL_34:
      v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 256) + 72) + 584))(*(_QWORD *)(*(_QWORD *)(v5 + 256) + 72));
      v32 = v69[0];
      if (v69[0]
        || (WTF::HashTable<void const*,WTF::KeyValuePair<void const*,std::unique_ptr<WebCore::GameControllerGamepad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,std::unique_ptr<WebCore::GameControllerGamepad>>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,std::unique_ptr<WebCore::GameControllerGamepad>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<std::unique_ptr<WebCore::GameControllerGamepad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(v69, 8u), (v32 = v69[0]) != 0))
      {
        v33 = *(_DWORD *)(v32 - 8);
      }
      else
      {
        v33 = 0;
      }
      v34 = (~(v31 << 32) + v31) ^ ((unint64_t)(~(v31 << 32) + v31) >> 22);
      v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
      v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
      v37 = v33 & ((v36 >> 31) ^ v36);
      v38 = (uint64_t *)(v32 + 16 * v37);
      v39 = *v38;
      if (*v38)
      {
        v40 = 0;
        v41 = 1;
        do
        {
          if (v39 == v31)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
            goto LABEL_58;
          }
          if (v39 == -1)
            v40 = v38;
          v37 = (v37 + v41) & v33;
          v38 = (uint64_t *)(v32 + 16 * v37);
          v39 = *v38;
          ++v41;
        }
        while (*v38);
        if (v40)
        {
          *v40 = 0;
          v40[1] = 0;
          --*(_DWORD *)(v32 - 16);
          v38 = v40;
        }
      }
      v42 = v38[1];
      *v38 = v31;
      v38[1] = v8;
      if (v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      v43 = v69[0];
      if (v69[0])
        v44 = *(_DWORD *)(v69[0] - 12) + 1;
      else
        v44 = 1;
      *(_DWORD *)(v69[0] - 12) = v44;
      v45 = (*(_DWORD *)(v43 - 16) + v44);
      v46 = *(unsigned int *)(v43 - 4);
      if (v46 <= 0x400)
      {
        if (3 * v46 > 4 * v45)
          goto LABEL_58;
        if ((_DWORD)v46)
LABEL_54:
          v47 = (_DWORD)v46 << (6 * v44 >= (2 * v46));
        else
          v47 = 8;
        WTF::HashTable<void const*,WTF::KeyValuePair<void const*,std::unique_ptr<WebCore::GameControllerGamepad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,std::unique_ptr<WebCore::GameControllerGamepad>>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,std::unique_ptr<WebCore::GameControllerGamepad>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<std::unique_ptr<WebCore::GameControllerGamepad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(v69, v47);
        goto LABEL_58;
      }
      if (v46 <= 2 * v45)
        goto LABEL_54;
LABEL_58:
      v48 = v66;
      do
        v66 = ++v48;
      while (v48 != v67 && (unint64_t)(*v48 + 1) <= 1);
      WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v65);
      ++*((_DWORD *)v65 + 2);
    }
    this = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t *))(*(_QWORD *)*v54 + 720))(*v54, v69, &v68);
    if (v68)
      this = WTF::fastFree((WTF *)(v68 - 16), v49);
    v50 = v69[0];
    if (v69[0])
    {
      v51 = *(unsigned int *)(v69[0] - 4);
      if ((_DWORD)v51)
      {
        v52 = (uint64_t *)(v69[0] + 8);
        do
        {
          if (*(v52 - 1) != -1)
          {
            v53 = *v52;
            *v52 = 0;
            if (v53)
              (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
          }
          v52 += 2;
          --v51;
        }
        while (v51);
      }
      return WTF::fastFree((WTF *)(v50 - 16), v49);
    }
  }
  return this;
}

uint64_t *WebCore::LegacyWebKitScrollingLayerCoordinator::registerAllScrollingLayers(WebCore::LegacyWebKitScrollingLayerCoordinator *this)
{
  uint64_t *v2;
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5[5];
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;

  v2 = (uint64_t *)((char *)this + 8);
  WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t *)this + 1, &v6);
  result = WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v2, v5);
  while (v7 != v5[1])
  {
    WebCore::LegacyWebKitScrollingLayerCoordinator::updateScrollingLayer(this, *(WebCore::RenderLayer **)(*v7 + 8));
    v4 = v7;
    do
      v7 = ++v4;
    while (v4 != v8 && (unint64_t)(*v4 + 1) <= 1);
    result = WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v6);
    ++*((_DWORD *)v6 + 2);
  }
  return result;
}

uint64_t WebCore::RenderLayerCompositor::updateScrollingNodeLayers(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::RenderView *v8;
  WebCore::RenderView *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  char v14;
  WebCore::RenderLayerCompositor *v15;
  uint64_t v16;
  WebCore::RenderLayerCompositor *v17;
  WTF *v18;
  void *v19;
  WebCore::RenderLayerCompositor *v20;
  uint64_t v21;
  WebCore::RenderLayerCompositor *v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = *(_QWORD *)(a4 + 32);
  if (*(_BYTE *)(v5 + 46) != 7)
    goto LABEL_28;
  v26 = result;
  v29 = a4;
  v10 = a5;
  ++*(_DWORD *)(v5 + 16);
  v11 = v5;
  v12 = WebCore::RenderEmbeddedObject::usesAsyncScrolling((WebCore::RenderEmbeddedObject *)v5);
  v13 = *(_DWORD *)(v11 + 16);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x1963F8828);
  }
  v14 = v12;
  *(_DWORD *)(v11 + 16) = v13 - 1;
  a5 = v10;
  a4 = v29;
  result = v26;
  if ((v14 & 1) == 0)
  {
LABEL_28:
    if ((*(_BYTE *)(a4 + 24) & 1) != 0)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(result + 8) + 248);
      v7 = *(_QWORD *)(*(_QWORD *)(v6 + 328) + 296);
      if (v7)
      {
        v8 = *(WebCore::RenderView **)(v7 + 1944);
        if (!v8)
          goto LABEL_7;
        if (!*((_QWORD *)v8 + 50))
        {
          v25 = *(_QWORD *)(*(_QWORD *)(result + 8) + 248);
          v27 = a5;
          v15 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
          v16 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v15, v8);
          v17 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v8 + 50);
          *((_QWORD *)v8 + 50) = v16;
          if (v17)
          {
            WebCore::RenderLayerCompositor::~RenderLayerCompositor(v17);
            WTF::fastFree(v18, v19);
          }
          a5 = v27;
          v6 = v25;
        }
        v7 = *(_QWORD *)(*(_QWORD *)(v6 + 328) + 296);
        if (v7)
        {
LABEL_7:
          v9 = *(WebCore::RenderView **)(v7 + 1944);
          if (v9 && !*((_QWORD *)v9 + 50))
          {
            v28 = a5;
            v20 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
            v21 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v20, v9);
            v22 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v9 + 50);
            *((_QWORD *)v9 + 50) = v21;
            if (v22)
            {
              WebCore::RenderLayerCompositor::~RenderLayerCompositor(v22);
              WTF::fastFree(v23, v24);
            }
            a5 = v28;
          }
        }
      }
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 304))(a5);
  }
  return result;
}

WebCore::Page *WebCore::RenderLayerCompositor::applyToCompositedLayerIncludingDescendants<WebCore::RenderLayerCompositor::updateEventRegions(void)::$_0>(uint64_t a1)
{
  WebCore::Page *result;
  uint64_t i;

  result = *(WebCore::Page **)(a1 + 256);
  if (result)
    result = WebCore::RenderLayerBacking::updateEventRegion(result);
  for (i = *(_QWORD *)(a1 + 64); i; i = *(_QWORD *)(i + 56))
    result = (WebCore::Page *)WebCore::RenderLayerCompositor::applyToCompositedLayerIncludingDescendants<WebCore::RenderLayerCompositor::updateEventRegions(void)::$_0>(i);
  return result;
}

uint64_t **WTF::WeakHashSet<WebCore::RenderLayerModelObject,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;

  v2 = *a2;
  if (!*a2)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_10;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v5 = (uint64_t *)(v2 + 8 * v4);
  if (!*(_DWORD *)(v2 - 12))
  {
    v3 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_3;
  }
  v3 = (uint64_t *)*a2;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    v3 = (uint64_t *)*a2;
    while ((unint64_t)(*v3 + 1) <= 1)
    {
      ++v3;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        break;
      }
    }
  }
LABEL_10:
  *result = a2;
  result[1] = v3;
  result[2] = v5;
  if (v2)
  {
    v8 = *(unsigned int *)(v2 - 4);
    v7 = (uint64_t *)(v2 + 8 * v8);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  result[3] = v7;
  result[4] = (uint64_t *)(v2 + 8 * v8);
LABEL_14:
  while (v3 != v7 && !*(_QWORD *)(*v3 + 8))
  {
    v9 = v3 + 1;
    result[1] = v3 + 1;
    v3 = v5;
    if (v9 != v5)
    {
      v3 = v9;
      while ((unint64_t)(*v3 + 1) <= 1)
      {
        result[1] = ++v3;
        if (v3 == v5)
        {
          v3 = v5;
          goto LABEL_14;
        }
      }
    }
  }
  return result;
}

WTF *WebCore::RenderLayerCompositor::updateBackingAndHierarchy(uint64_t a1, uint64_t a2, unint64_t a3, __int128 *a4, __int128 *a5, int a6)
{
  void *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  __int128 v17;
  WTF **v18;
  __int128 v19;
  uint64_t v20;
  WTF **v21;
  uint64_t v22;
  _BOOL4 v23;
  char v24;
  _BOOL4 v25;
  WTF *v26;
  WTF *v27;
  WTF *result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t i;
  uint64_t v35;
  uint64_t v36;
  double v37;
  unsigned int v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  const WebCore::RenderLayer *v42;
  int isViewportConstrainedFixedOrStickyLayer;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v71;
  uint64_t v72;
  const WebCore::RenderLayer *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  int v86;
  void *v87;
  WTF *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  WTF *v99;
  WTF *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  uint64_t v115;
  unint64_t v116;
  WebCore::RenderLayerCompositor *v117;
  uint64_t v118;
  uint64_t v119;
  WTF *v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  WTF *v128;
  WTF *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  WTF *v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  void *v146;
  WTF *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  WTF *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  WTF *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t *v181;
  uint64_t v182;
  WTF *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  __int128 *v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  WTF *v195;
  void *v196;
  void *v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t v200;
  WebCore::RenderWidget *v201;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned __int8 *v210;
  int v211;
  WTF *v212;
  WTF *v213;
  __int128 v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int v217;
  _BYTE *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _OWORD *v222;
  int v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  int v231;
  int v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t *v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  int v241;
  WTF *v242;
  uint64_t v243;
  unsigned int v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  WebCore::RenderLayer *v250;
  int v251;
  WebCore::RenderLayerBacking *v252;
  WTF::StringImpl *v253;
  uint64_t v254;
  uint64_t v255;
  void *v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  _DWORD *v264;
  uint64_t v265;
  char v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  uint64_t v270;
  uint64_t v271;
  WebCore::LayerAncestorClippingStack *v272;
  void *v273;
  WTF **v274;
  unint64_t v275;
  WTF *v276;
  WTF *v277;
  unsigned int *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  void *v284;
  WTF *v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  int v291;
  int v292;
  WTF *v293;
  uint64_t v294;
  unint64_t v295;
  int v296;
  unint64_t v297;
  _QWORD *v298;
  const WebCore::LayoutRect *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  unsigned int v304;
  unint64_t v305;
  unsigned int v306;
  unsigned int v307;
  BOOL v308;
  unsigned int v309;
  unsigned int v310;
  uint64_t v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  uint64_t v316;
  WebCore::LayerAncestorClippingStack *v317;
  WebCore::RenderLayer *v318;
  uint64_t v319;
  float v320;
  uint64_t v321;
  uint64_t v322;
  float *v323;
  int v324;
  unint64_t v325;
  uint64_t v326;
  const WebCore::RenderLayerModelObject *v327;
  unsigned int v328;
  int v329;
  uint64_t v330;
  uint64_t v331;
  const WebCore::LayoutRect *v332;
  float v333;
  double v334;
  float v335;
  double v336;
  double v337;
  float v338;
  double v339;
  float v340;
  double v341;
  double v342;
  double v343;
  float v344;
  float v345;
  float v346;
  float v347;
  float v348;
  float v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  _QWORD *v354;
  _QWORD *v355;
  uint64_t v356;
  uint64_t *v357;
  void *v358;
  unsigned int *v359;
  _QWORD *v360;
  uint64_t v361;
  uint64_t v362;
  _QWORD *v363;
  uint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  uint64_t v375;
  uint64_t v376;
  _BOOL4 canContainFixedPositionObjects;
  int v378;
  uint64_t v379;
  uint64_t v380;
  char v381;
  uint64_t v383;
  char *v384;
  WTF *v385;
  __int128 v386;
  unsigned int *v387;
  void *v388;
  int v389;
  _DWORD *v390;
  WTF *v391;
  void *v392;
  _DWORD **v393;
  uint64_t v394;
  _DWORD *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  _BOOL4 v400;
  WebCore::ViewTransition *v401;
  int v402;
  int v403;
  int v404;
  int v405;
  uint64_t v406;
  WTF *v407;
  _QWORD *v408;
  int v409;
  uint64_t v410;
  void *v411;
  int v412;
  char v413;
  int v414;
  uint64_t v415;
  WebCore::RenderLayerBacking *v416;
  uint64_t v417;
  uint64_t v418;
  double v419;
  double v420;
  double v421;
  __int128 *v422;
  __int128 *v423;
  __int128 *v424;
  __int128 *v425;
  char v426;
  uint64_t v427;
  unint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  WTF *v440;
  unint64_t v441;
  uint64_t *v442;
  WebCore::RenderLayer *v443;
  const WebCore::RenderLayer *v444;
  unint64_t *v445;
  int v446;
  WebCore::RenderLayer *v447[2];
  WTF *v448;
  unsigned int v449;
  unint64_t v450;
  unint64_t v451;
  unint64_t v452;
  unint64_t v453;
  unint64_t v454;
  WTF *v455;
  uint64_t v456;
  WTF *v457;
  uint64_t v458;
  __int128 v459;
  WTF **v460;
  __int128 v461;
  __int128 v462;
  uint64_t v463;
  unint64_t v464;
  uint64_t v465;
  char v466;
  uint64_t v467;
  char v468;
  _BYTE v469[24];
  __int128 v470;
  __int128 v471;
  uint64_t v472;
  WTF *v473;
  uint64_t v474;
  uint64_t v475[11];

  WebCore::RenderLayer::updateDescendantDependentFlags((WebCore::RenderLayer *)a2);
  WebCore::RenderLayer::updateDescendantDependentFlags((WebCore::RenderLayer *)a2);
  v13 = *(_QWORD *)(a2 + 24);
  if ((v13 & 0x80) != 0)
  {
    if ((v13 & 0x4A) != 0)
    {
      WebCore::RenderLayer::rebuildZOrderLists((WebCore::RenderLayer *)a2, v12);
      v13 = *(_QWORD *)(a2 + 24);
    }
    else
    {
      WebCore::RenderLayer::clearZOrderLists(a2, v12);
      v13 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFF7FLL;
      *(_QWORD *)(a2 + 24) = v13;
    }
  }
  if ((v13 & 0x100) != 0)
  {
    for (i = *(_QWORD *)(a2 + 64); ; i = *(_QWORD *)(i + 56))
    {
      *(_QWORD *)v469 = i;
      if (!i)
        break;
      if ((*(_BYTE *)(i + 24) & 4) != 0)
      {
        v125 = *(_QWORD *)(a2 + 208);
        if (!v125 || *(_QWORD *)(v125 + 144) != i)
        {
          v126 = *(_QWORD *)(a2 + 104);
          if (!v126)
          {
            v127 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v127 = 0;
            v127[1] = 0;
            v128 = *(WTF **)(a2 + 104);
            *(_QWORD *)(a2 + 104) = v127;
            if (v128)
            {
              v129 = *(WTF **)v128;
              if (*(_QWORD *)v128)
              {
                *(_QWORD *)v128 = 0;
                *((_DWORD *)v128 + 2) = 0;
                WTF::fastFree(v129, v12);
              }
              WTF::fastFree(v128, v12);
              v126 = *(_QWORD *)(a2 + 104);
            }
            else
            {
              v126 = (uint64_t)v127;
            }
          }
          v130 = *(unsigned int *)(v126 + 12);
          if ((_DWORD)v130 == *(_DWORD *)(v126 + 8))
          {
            v131 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v126, v130 + 1, (unint64_t)v469);
            v130 = *(unsigned int *)(v126 + 12);
            *(_QWORD *)(*(_QWORD *)v126 + 8 * v130) = *v131;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v126 + 8 * v130) = *(_QWORD *)v469;
          }
          *(_DWORD *)(v126 + 12) = v130 + 1;
          i = *(_QWORD *)v469;
          *(_QWORD *)(*(_QWORD *)v469 + 24) &= ~0x20000000000000uLL;
        }
      }
    }
    v35 = a1;
    v36 = *(_QWORD *)(a2 + 104);
    if (v36)
    {
      v132 = *(unsigned int *)(v36 + 12);
      if (*(_DWORD *)(v36 + 8) > v132)
      {
        v133 = *(WTF **)v36;
        if ((_DWORD)v132)
        {
          *(_DWORD *)(v36 + 8) = v132;
          *(_QWORD *)v36 = WTF::fastRealloc(v133, (void *)(8 * v132));
        }
        else if (v133)
        {
          *(_QWORD *)v36 = 0;
          *(_DWORD *)(v36 + 8) = 0;
          WTF::fastFree(v133, v12);
        }
      }
    }
    *(_QWORD *)(a2 + 24) &= ~0x100uLL;
    a1 = v35;
  }
  v14 = *(_QWORD *)(a2 + 208);
  if (v14)
  {
    v410 = *(_QWORD *)(v14 + 144);
    if (v410)
    {
      WebCore::RenderLayer::updateZOrderLists(*(WebCore::RenderLayer **)(v14 + 144), v12);
      WebCore::RenderLayer::updateNormalFlowList(v410, v411);
    }
  }
  v15 = *(_DWORD *)(a2 + 12);
  v16 = a6;
  if ((v15 & 0x800) != 0)
    v16 = a6 | 1;
  v17 = a5[1];
  v461 = *a5;
  v462 = v17;
  v463 = *((_QWORD *)a5 + 4);
  v18 = (WTF **)*((_QWORD *)a4 + 2);
  v19 = *a4;
  v459 = *a4;
  v460 = v18;
  v457 = 0;
  v458 = 0;
  v455 = 0;
  v456 = 0;
  if ((v15 & 0x100) != 0)
    *((_BYTE *)a5 + 32) = 1;
  v20 = *(_QWORD *)(a2 + 256);
  if (!v20)
  {
    v21 = (WTF **)a3;
    goto LABEL_10;
  }
  if (WebCore::RenderLayerBacking::updateCompositedBounds(*(WebCore::RenderLayerBacking **)(a2 + 256), *(double *)&v19))
  {
    *(_DWORD *)(a2 + 12) |= 0x40u;
    if ((*(_BYTE *)(a2 + 24) & 4) != 0)
    {
      v123 = *(_QWORD *)(a2 + 40);
      if (v123)
      {
LABEL_190:
        do
        {
          v124 = *(_DWORD *)(v123 + 12);
          if ((v124 & 2) != 0)
            break;
          *(_DWORD *)(v123 + 12) = v124 | 2;
          if ((*(_BYTE *)(v123 + 24) & 4) == 0)
          {
            while (1)
            {
              v123 = *(_QWORD *)(v123 + 40);
              if (!v123)
                goto LABEL_191;
              if ((*(_BYTE *)(v123 + 24) & 0x4A) != 0)
                goto LABEL_533;
            }
          }
          v123 = *(_QWORD *)(v123 + 40);
LABEL_533:
          ;
        }
        while (v123);
      }
    }
    else
    {
      v123 = a2;
      while (1)
      {
        v123 = *(_QWORD *)(v123 + 40);
        if (!v123)
          break;
        if ((*(_BYTE *)(v123 + 24) & 0x4A) != 0)
          goto LABEL_190;
      }
    }
LABEL_191:
    v16 |= 2u;
  }
  else
  {
    v16 &= ~2u;
  }
  if (a6 || (v38 = *(_DWORD *)(a2 + 12), (v38 & 0x80) != 0))
  {
    if (WebCore::RenderLayerBacking::updateConfiguration((WTF::StringImpl **)v20, *(const WebCore::RenderLayer **)a4))
    {
      *(_DWORD *)(a2 + 12) |= 0x200u;
      if ((*(_BYTE *)(a2 + 24) & 4) != 0)
      {
        v134 = *(_QWORD *)(a2 + 40);
        if (v134)
        {
LABEL_210:
          do
          {
            v135 = *(_DWORD *)(v134 + 12);
            if ((v135 & 2) != 0)
              break;
            *(_DWORD *)(v134 + 12) = v135 | 2;
            if ((*(_BYTE *)(v134 + 24) & 4) == 0)
            {
              while (1)
              {
                v134 = *(_QWORD *)(v134 + 40);
                if (!v134)
                  goto LABEL_211;
                if ((*(_BYTE *)(v134 + 24) & 0x4A) != 0)
                  goto LABEL_554;
              }
            }
            v134 = *(_QWORD *)(v134 + 40);
LABEL_554:
            ;
          }
          while (v134);
        }
      }
      else
      {
        v134 = a2;
        while (1)
        {
          v134 = *(_QWORD *)(v134 + 40);
          if (!v134)
            break;
          if ((*(_BYTE *)(v134 + 24) & 0x4A) != 0)
            goto LABEL_210;
        }
      }
LABEL_211:
      WebCore::RenderLayerBacking::updateDebugIndicators((WebCore::RenderLayerBacking *)v20, *(unsigned __int8 *)(a1 + 192), *(unsigned __int8 *)(a1 + 193));
      goto LABEL_56;
    }
    WebCore::RenderLayerBacking::updateDebugIndicators((WebCore::RenderLayerBacking *)v20, *(unsigned __int8 *)(a1 + 192), *(unsigned __int8 *)(a1 + 193));
    if (a6)
    {
LABEL_56:
      WebCore::RenderLayerBacking::updateGeometry((WebCore::RenderLayerBacking *)v20, *(const WebCore::RenderLayer **)a4);
      LOBYTE(v39) = 3;
      goto LABEL_57;
    }
    v38 = *(_DWORD *)(a2 + 12);
  }
  if ((v38 & 0x40) != 0)
    goto LABEL_56;
  v39 = (v38 >> 7) & 2 | 1;
LABEL_57:
  v41 = *(_QWORD *)(a2 + 208);
  if (v41)
  {
    v415 = *(_QWORD *)(v41 + 144);
    if (v415)
    {
      v416 = *(WebCore::RenderLayerBacking **)(v415 + 256);
      if (v416)
      {
        WebCore::RenderLayerBacking::updateCompositedBounds(*(WebCore::RenderLayerBacking **)(v415 + 256), v37);
        WebCore::RenderLayerBacking::updateGeometry(v416, (const WebCore::RenderLayer *)a2);
        WebCore::RenderLayerBacking::updateAfterDescendants(v416);
      }
    }
  }
  if (!*(_QWORD *)(a2 + 40))
  {
    v47 = *(_QWORD *)(a1 + 224);
    if (v47)
    {
      v48 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 248);
      v49 = (float)*(int *)(v48 + 260);
      *(float *)v469 = (float)*(int *)(v48 + 256);
      *(float *)&v469[4] = v49;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v47 + 160))(v47, v469);
      v50 = *(_QWORD *)(a1 + 224);
      *(_DWORD *)v469 = WebCore::LocalFrameView::positionForRootContentLayer(*(WebCore::LocalFrameView **)(*(_QWORD *)(a1 + 8) + 248));
      *(_DWORD *)&v469[4] = v51;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v50 + 128))(v50, v469);
      v52 = *(_QWORD *)(a1 + 224);
      *(_DWORD *)&v469[8] = 0;
      *(_QWORD *)v469 = 0;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v52 + 152))(v52, v469);
    }
    WebCore::RenderLayerCompositor::updateScrollLayerClipping((_QWORD *)a1);
  }
  v42 = *(const WebCore::RenderLayer **)a4;
  isViewportConstrainedFixedOrStickyLayer = WebCore::RenderLayerCompositor::isViewportConstrainedFixedOrStickyLayer((WebCore::RenderLayerCompositor *)a1, (const WebCore::RenderLayer *)a2);
  if ((*(_BYTE *)(a2 + 24) & 1) != 0
    && (v53 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 8) + 40) + 8) + 528)
                                                                                            + 8)
                                                                                + 24)
                                                                    + 8))) != 0
    && ((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 40))(v53, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 248)) & 1) != 0|| (v44 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 8) + 40) + 8) + 528)+ 8)+ 24)+ 8))) != 0&& (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 48))(v44, a2))
  {
    isViewportConstrainedFixedOrStickyLayer |= 2u;
  }
  v54 = *(_QWORD *)(a2 + 24);
  v444 = v42;
  if ((v54 & 1) != 0)
    goto LABEL_80;
  v55 = *(_QWORD *)(a2 + 32);
  if ((*(_DWORD *)(v55 + 20) & 0x1800000) == 0x1000000)
  {
    if ((*(_BYTE *)(v55 + 45) & 2) != 0)
      v55 = *(_QWORD *)(*(_QWORD *)(v55 + 32) + 8);
    v69 = *(_QWORD *)(v55 + 96) & 0x380000;
    v71 = (v54 & 0x800000) == 0 || v69 != 3145728;
    if ((v54 & 0x10000000) == 0 || !v71)
      goto LABEL_80;
  }
  else if ((v54 & 0x10000000) == 0)
  {
LABEL_80:
    v56 = a1;
    goto LABEL_81;
  }
  v72 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 8) + 40) + 8)
                                                                                                  + 528)
                                                                                      + 8)
                                                                          + 24)
                                                              + 8));
  if (!v42 || !v72)
    goto LABEL_80;
  v56 = a1;
  v74 = WebCore::RenderLayerCompositor::layerScrollBehahaviorRelativeToCompositedAncestor((WebCore::RenderLayerCompositor *)a2, v444, v73);
  if (v74 == 1)
  {
    isViewportConstrainedFixedOrStickyLayer |= 4u;
  }
  else if (v74 == 2)
  {
    isViewportConstrainedFixedOrStickyLayer |= 0x20u;
  }
LABEL_81:
  v57 = *(_QWORD *)(a2 + 32);
  LODWORD(v441) = isViewportConstrainedFixedOrStickyLayer;
  if ((*(_BYTE *)(v57 + 52) & 7) != 3 || (*(_BYTE *)(v57 + 53) & 4) == 0)
    goto LABEL_83;
  v363 = *(_QWORD **)(*(_QWORD *)(v57 + 24) + 8);
  if (((*(uint64_t (**)(_QWORD *))(*v363 + 192))(v363) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1963FAF58);
  }
  v364 = v363[14];
  if (v364)
  {
    v365 = *(_QWORD *)(v364 + 8);
    if (v365)
    {
      if (*(_BYTE *)(v365 + 144))
      {
        if ((*(_BYTE *)(v57 + 21) & 0x80) == 0 || !*(_QWORD *)(*(_QWORD *)(v57 + 144) + 256))
          goto LABEL_83;
LABEL_550:
        LODWORD(v441) = v441 | 8;
        goto LABEL_83;
      }
    }
  }
  v366 = *(_QWORD **)(*(_QWORD *)(v57 + 24) + 8);
  if (((*(uint64_t (**)(_QWORD *))(*v366 + 192))(v366) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1963FAF78);
  }
  v367 = v366[14];
  if (v367)
  {
    v368 = *(_QWORD *)(v367 + 8);
    if (v368)
    {
      if (!*(_BYTE *)(v368 + 144))
      {
        v369 = *(_QWORD *)(v368 + 296);
        if (v369)
        {
          v370 = *(_QWORD *)(v369 + 1944);
          if (v370)
          {
            v371 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v56 + 8) + 24) + 8) + 40) + 8) + 528)
                                                                                                 + 8)
                                                                                     + 24)
                                                                         + 8));
            if (v371)
            {
              if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v371 + 40))(v371, *(_QWORD *)(v370 + 248)))
              {
                goto LABEL_550;
              }
            }
          }
        }
      }
    }
  }
LABEL_83:
  v58 = *(_QWORD *)(a2 + 32);
  a1 = v56;
  if (*(_BYTE *)(v58 + 46) == 7)
  {
    ++*(_DWORD *)(v58 + 16);
    v403 = WebCore::RenderEmbeddedObject::usesAsyncScrolling((WebCore::RenderEmbeddedObject *)v58);
    v404 = *(_DWORD *)(v58 + 16);
    if (!v404)
    {
      __break(0xC471u);
      JUMPOUT(0x1963FB0A8);
    }
    *(_DWORD *)(v58 + 16) = v404 - 1;
    v405 = v441;
    if (v403)
      v405 = v441 | 0x10;
    LODWORD(v441) = v405;
  }
  v59 = *(_QWORD *)(v56 + 336);
  v60 = v441;
  if (v59)
  {
    v61 = v59 + 24;
    if ((v441 & 1) != 0)
      WTF::WeakHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderLayer>(v61, (WTF **)a2, (uint64_t)v469);
    else
      WTF::WeakHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderLayer>(v61, (_QWORD *)a2);
  }
  v62 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v56 + 8) + 24) + 8) + 40) + 8)
                                                                                                  + 528)
                                                                                      + 8)
                                                                          + 24)
                                                              + 8));
  if (v62
    && (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v62 + 40))(v62, *(_QWORD *)(*(_QWORD *)(v56 + 8) + 248)))
  {
    v426 = v39;
    v63 = *((unsigned __int8 *)a5 + 16);
    v65 = *(_QWORD *)a5;
    v64 = *((_QWORD *)a5 + 1);
    LOBYTE(v464) = 0;
    v466 = 0;
    v467 = 0;
    v468 = 0;
    v442 = (uint64_t *)v56;
    if ((v441 & 0x20) == 0)
    {
      if (v63)
        v66 = v65;
      else
        v66 = 0;
      if (v63)
        v67 = v64;
      else
        v67 = 0;
      WebCore::RenderLayerCompositor::detachScrollCoordinatedLayer((WTF *)a1, a2, 32);
      v445 = (unint64_t *)a5;
LABEL_170:
      if ((v60 & 4) != 0)
      {
        v437 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 8) + 40) + 8) + 528)
                                                                                             + 8)
                                                                                 + 24)
                                                                     + 8));
        v110 = *(uint64_t **)(*(_QWORD *)(a2 + 256) + 48);
        if (!v110)
          goto LABEL_232;
        v111 = *((unsigned int *)v110 + 3);
        if (!(_DWORD)v111)
          goto LABEL_232;
        v112 = *v110;
        if ((v426 & 2) != 0)
        {
          v66 = 0;
          v67 = 0;
          v136 = 96 * v111;
          v137 = (_QWORD *)(v112 + 88);
          v423 = a4;
          v452 = a3;
          do
          {
            if (*((_BYTE *)v137 - 32))
            {
              WebCore::RenderLayerCompositor::registerScrollingNodeID((uint64_t)v442, v437, *(v137 - 3), *(v137 - 2), 6, (uint64_t *)v445);
              if (!v138)
                goto LABEL_232;
              v66 = v138;
              *(v137 - 3) = v138;
              *(v137 - 2) = v139;
              v430 = v139;
              v140 = v139;
              v141 = v138;
              if ((v426 & 1) != 0)
              {
                *(_QWORD *)v469 = *v137;
                *(_OWORD *)&v469[8] = 0u;
                v470 = 0u;
                v471 = 0u;
                v472 = 0;
                (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v437 + 304))(v437, v138, v139, v469);
                v141 = *(v137 - 3);
                v140 = *(v137 - 2);
              }
              v142 = *(_QWORD *)(*(_QWORD *)(*(v137 - 11) + 8) + 256);
              if (v142 && (v143 = *(_QWORD *)(v142 + 224)) != 0)
              {
                v427 = v66;
                v144 = *(_QWORD *)(v142 + 232);
                v145 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                *(_DWORD *)&v469[8] = 1;
                *(_QWORD *)v469 = v145;
                *v145 = v143;
                v145[1] = v144;
                *(_DWORD *)&v469[12] = 1;
                (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v437 + 344))(v437, v141, v140, v469);
                v147 = *(WTF **)v469;
                if (*(_QWORD *)v469)
                {
                  *(_QWORD *)v469 = 0;
                  *(_DWORD *)&v469[8] = 0;
                  WTF::fastFree(v147, v146);
                }
                a4 = v423;
                a3 = v452;
                v66 = v427;
              }
              else
              {
                WTF::WeakHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderLayer>((uint64_t)(v442 + 40), (WTF **)a2, (uint64_t)v469);
                a4 = v423;
                a3 = v452;
              }
              v67 = v430;
            }
            v137 += 12;
            v136 -= 96;
          }
          while (v136);
        }
        else
        {
          v66 = 0;
          v67 = 0;
          v113 = 96 * v111;
          if ((v426 & 1) != 0)
          {
            v148 = (_QWORD *)(v112 + 88);
            do
            {
              if (*((_BYTE *)v148 - 32))
              {
                WebCore::RenderLayerCompositor::registerScrollingNodeID((uint64_t)v442, v437, *(v148 - 3), *(v148 - 2), 6, (uint64_t *)v445);
                if (!v149)
                  goto LABEL_232;
                v66 = v149;
                v67 = v150;
                *(v148 - 3) = v149;
                *(v148 - 2) = v150;
                *(_QWORD *)v469 = *v148;
                *(_OWORD *)&v469[8] = 0u;
                v470 = 0u;
                v471 = 0u;
                v472 = 0;
                (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v437 + 304))(v437, v149, v150, v469);
              }
              v148 += 12;
              v113 -= 96;
            }
            while (v113);
          }
          else
          {
            v114 = (unint64_t *)(v112 + 72);
            do
            {
              if (*((_BYTE *)v114 - 16))
              {
                WebCore::RenderLayerCompositor::registerScrollingNodeID((uint64_t)v442, v437, *(v114 - 1), *v114, 6, (uint64_t *)v445);
                if (!v115)
                  goto LABEL_232;
                v66 = v115;
                v67 = v116;
                *(v114 - 1) = v115;
                *v114 = v116;
              }
              v114 += 12;
              v113 -= 96;
            }
            while (v113);
          }
        }
        if (!v66)
        {
LABEL_232:
          if (*((_BYTE *)v445 + 16))
            v67 = v445[1];
          else
            v67 = 0;
          if (*((_BYTE *)v445 + 16))
            v66 = *v445;
          else
            v66 = 0;
        }
        v464 = v66;
        v465 = v67;
        if (!v466)
          v466 = 1;
        v445 = &v464;
        a1 = (uint64_t)v442;
        v60 = v441;
      }
      else
      {
        WebCore::RenderLayerCompositor::detachScrollCoordinatedLayer((WTF *)a1, a2, 4);
      }
      if ((v60 & 1) == 0)
      {
        WebCore::RenderLayerCompositor::detachScrollCoordinatedLayer((WTF *)a1, a2, 1);
        goto LABEL_256;
      }
      v151 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 8) + 40) + 8) + 528)
                                                                                           + 8)
                                                                               + 24)
                                                                   + 8));
      v152 = a1;
      v153 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 96) & 0x380000;
      if (v153 == 1572864)
        v154 = 8;
      else
        v154 = 7;
      v155 = WebCore::RenderLayerCompositor::attachScrollingNode(v152, (uint64_t *)a2, v154, (uint64_t *)v445);
      v431 = v156;
      if (v155)
      {
        v66 = v155;
        if ((v426 & 1) != 0)
        {
          v157 = *(_QWORD *)(*(_QWORD *)(a2 + 256) + 104);
          *(_OWORD *)&v469[8] = 0u;
          v470 = 0u;
          v471 = 0u;
          *(_QWORD *)v469 = v157;
          v472 = 0;
          (*(void (**)(uint64_t, unint64_t, uint64_t, _BYTE *))(*(_QWORD *)v151 + 304))(v151, v155, v156, v469);
        }
        if ((v426 & 2) == 0)
        {
          a1 = (uint64_t)v442;
          v67 = v431;
          goto LABEL_253;
        }
        if (v153 != 1572864)
        {
          a1 = (uint64_t)v442;
          WebCore::RenderLayerCompositor::computeFixedViewportConstraints((WebCore::RenderLayerCompositor *)v469, (WebCore::RenderLayer *)v442, a2);
          v67 = v431;
          (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v151 + 328))(v151, v66, v431, v469);
          goto LABEL_253;
        }
        WebCore::RenderLayerCompositor::computeStickyViewportConstraints((WebCore::RenderLayerCompositor *)v469, *(WebCore::RenderLayer **)(a2 + 32), *(_QWORD *)(a2 + 256));
        v67 = v431;
        (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v151 + 328))(v151, v66, v431, v469);
      }
      else
      {
        if (*((_BYTE *)v445 + 16))
          v67 = v445[1];
        else
          v67 = 0;
        if (*((_BYTE *)v445 + 16))
          v66 = *v445;
        else
          v66 = 0;
      }
      a1 = (uint64_t)v442;
LABEL_253:
      v464 = v66;
      v465 = v67;
      v60 = v441;
      if (!v466)
        v466 = 1;
      v445 = &v464;
LABEL_256:
      if ((v60 & 2) == 0)
      {
        v428 = v66;
        WebCore::RenderLayerCompositor::detachScrollCoordinatedLayer((WTF *)a1, a2, 2);
        goto LABEL_267;
      }
      v438 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 8) + 40) + 8) + 528)
                                                                                           + 8)
                                                                               + 24)
                                                                   + 8));
      v158 = *(_QWORD **)(a1 + 8);
      if ((*(_BYTE *)(a2 + 24) & 1) != 0)
      {
        v432 = v158[31];
        v159 = (uint64_t *)v158[18];
        v160 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v158[3] + 8) + 40) + 8) + 528);
        if (v160)
          v160 = *(_QWORD *)(v160 + 8);
        v428 = WebCore::RenderLayerCompositor::attachScrollingNode(a1, v159, *(_QWORD *)(*(_QWORD *)(v160 + 128) + 8) != v160, (uint64_t *)v445);
        if (v428)
        {
          v67 = v161;
          if ((v426 & 1) != 0)
            WebCore::RenderLayerCompositor::updateScrollingNodeLayers(a1, v428, v161, a2, v438);
          if ((v426 & 2) != 0)
          {
            (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v438 + 312))(v438, v428, v67, v432 + 64);
            (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v438 + 320))(v438, v428, v67, v432);
          }
        }
        else
        {
          if (*((_BYTE *)v445 + 16))
            v67 = v445[1];
          else
            v67 = 0;
          if (*((_BYTE *)v445 + 16))
            v406 = *v445;
          else
            v406 = 0;
          v428 = v406;
        }
      }
      else
      {
        v179 = a1;
        v180 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v158[3] + 8) + 40) + 8) + 528)
                                                                                             + 8)
                                                                                 + 24)
                                                                     + 8));
        v181 = v445;
        if (v180
          && (v182 = *(_QWORD *)(a2 + 256)) != 0
          && (WebCore::RenderLayerCompositor::registerScrollingNodeID(v179, v180, *(_QWORD *)(v182 + 224), *(_QWORD *)(v182 + 232), 5, (uint64_t *)v445), v473 = v183, v474 = v184, v183))
        {
          v453 = a3;
          v428 = (unint64_t)v183;
          v434 = v184;
          *(_QWORD *)(v182 + 224) = v183;
          *(_QWORD *)(v182 + 232) = v184;
          WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebCore::RenderLayer&>((uint64_t)v469, (uint64_t *)(v179 + 312), &v473, (uint64_t *)a2);
          v185 = *(_QWORD *)(a2 + 32);
          a1 = v179;
          if (*(_BYTE *)(v185 + 46) == 7)
          {
            ++*(_DWORD *)(v185 + 16);
            v413 = WebCore::RenderEmbeddedObject::usesAsyncScrolling((WebCore::RenderEmbeddedObject *)v185);
            v414 = *(_DWORD *)(v185 + 16);
            if (!v414)
            {
              __break(0xC471u);
              JUMPOUT(0x1963FB0F0);
            }
            *(_DWORD *)(v185 + 16) = v414 - 1;
            a1 = v179;
            v181 = v445;
            if ((v413 & 1) != 0)
            {
              a3 = v453;
              v60 = v441;
              v67 = v434;
LABEL_267:
              if ((v60 & 8) == 0)
              {
                WebCore::RenderLayerCompositor::detachScrollCoordinatedLayer((WTF *)a1, a2, 8);
                v68 = v428;
                goto LABEL_269;
              }
              v162 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 8) + 40) + 8) + 528) + 8)
                                                                                       + 24)
                                                                           + 8));
              v163 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 8) + 40) + 8) + 528) + 8)
                                                                                       + 24)
                                                                           + 8));
              if (v163
                && (v164 = *(_QWORD *)(a2 + 256)) != 0
                && (v439 = v162,
                    WebCore::RenderLayerCompositor::registerScrollingNodeID((uint64_t)v442, v163, *(_QWORD *)(v164 + 240), *(_QWORD *)(v164 + 248), 2, (uint64_t *)v445), v473 = v165, v474 = v166, v165))
              {
                v68 = (uint64_t)v165;
                v67 = v166;
                *(_QWORD *)(v164 + 240) = v165;
                *(_QWORD *)(v164 + 248) = v166;
                WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebCore::RenderLayer&>((uint64_t)v469, v442 + 39, &v473, (uint64_t *)a2);
                a1 = (uint64_t)v442;
                if ((v426 & 1) != 0)
                {
                  v167 = *(_QWORD *)(*(_QWORD *)(a2 + 256) + 72);
                  *(_OWORD *)&v469[8] = 0u;
                  v470 = 0u;
                  v471 = 0u;
                  *(_QWORD *)v469 = v167;
                  v472 = 0;
                  (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v439 + 304))(v439, v68, v67, v469);
                }
                v433 = v67;
                v168 = *(_QWORD *)(a2 + 32);
                if ((*(_BYTE *)(v168 + 52) & 7) != 3)
                {
                  v60 = v441;
                  goto LABEL_322;
                }
                if ((*(_BYTE *)(v168 + 53) & 4) == 0)
                {
LABEL_294:
                  v60 = v441;
                  goto LABEL_269;
                }
                v169 = v68;
                v170 = a3;
                v171 = *(_QWORD **)(*(_QWORD *)(v168 + 24) + 8);
                if (((*(uint64_t (**)(_QWORD *))(*v171 + 192))(v171) & 1) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1963FB050);
                }
                v172 = v171[14];
                if (!v172 || (v173 = *(_QWORD *)(v172 + 8)) == 0 || !*(_BYTE *)(v173 + 144))
                {
                  a3 = v170;
                  a1 = (uint64_t)v442;
                  v60 = v441;
                  v68 = v169;
LABEL_322:
                  v67 = v433;
LABEL_269:
                  if ((v60 & 0x10) != 0)
                  {
                    v174 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 8) + 40) + 8) + 528) + 8)
                                                                                             + 24)
                                                                                 + 8));
                    if (v174
                      && (v175 = *(_QWORD *)(a2 + 256)) != 0
                      && (WebCore::RenderLayerCompositor::registerScrollingNodeID((uint64_t)v442, v174, *(_QWORD *)(v175 + 256), *(_QWORD *)(v175 + 264), 4, (uint64_t *)v445), v473 = v176, v474 = (uint64_t)v12, v176))
                    {
                      v177 = (uint64_t)v176;
                      v178 = (uint64_t)v12;
                      *(_QWORD *)(v175 + 256) = v176;
                      *(_QWORD *)(v175 + 264) = v12;
                      WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebCore::RenderLayer&>((uint64_t)v469, v442 + 39, &v473, (uint64_t *)a2);
                      a1 = (uint64_t)v442;
                      v68 = v177;
                      v67 = v178;
                    }
                    else
                    {
                      a1 = (uint64_t)v442;
                      if (*((_BYTE *)v445 + 16))
                        v67 = v445[1];
                      else
                        v67 = 0;
                      if (*((_BYTE *)v445 + 16))
                        v68 = *v445;
                      else
                        v68 = 0;
                    }
                  }
                  else
                  {
                    WebCore::RenderLayerCompositor::detachScrollCoordinatedLayer((WTF *)a1, a2, 16);
                  }
                  goto LABEL_99;
                }
                v417 = v169;
                v418 = v169;
                v67 = v433;
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v439 + 528))(v439, v418, v433);
                a3 = v170;
                v68 = v417;
              }
              else
              {
                if (*((_BYTE *)v445 + 16))
                  v67 = v445[1];
                else
                  v67 = 0;
                if (*((_BYTE *)v445 + 16))
                  v68 = *v445;
                else
                  v68 = 0;
              }
              a1 = (uint64_t)v442;
              goto LABEL_294;
            }
          }
          v67 = v434;
          if ((v426 & 1) != 0)
            WebCore::RenderLayerCompositor::updateScrollingNodeLayers(a1, v428, v434, a2, v438);
          a3 = v453;
          if ((v426 & 2) != 0 && *((_BYTE *)v181 + 16) && *(_QWORD *)(a2 + 264))
            (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v438 + 312))(v438, v428, v434);
          if (*(_QWORD *)(a2 + 264))
          {
            v186 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 8) + 40) + 8)
                                                                                         + 528)
                                                                             + 8)
                                                                 + 24)
                                                     + 8)
                                         + 48)
                             + 16);
            (*(void (**)(uint64_t))(*(_QWORD *)v186 + 1080))(v186);
          }
        }
        else
        {
          if (*((_BYTE *)v445 + 16))
            v67 = v445[1];
          else
            v67 = 0;
          if (*((_BYTE *)v445 + 16))
            v187 = *v445;
          else
            v187 = 0;
          v428 = v187;
          a1 = v179;
        }
      }
      v60 = v441;
      goto LABEL_267;
    }
    v75 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v56 + 8) + 24) + 8) + 40) + 8) + 528)
                                                                                        + 8)
                                                                            + 24)
                                                                + 8));
    v76 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v56 + 8) + 24) + 8) + 40) + 8) + 528)
                                                                                        + 8)
                                                                            + 24)
                                                                + 8));
    if (v76
      && (v77 = *(_QWORD *)(a2 + 256)) != 0
      && (v436 = v75,
          WebCore::RenderLayerCompositor::registerScrollingNodeID(v56, v76, *(_QWORD *)(v77 + 272), *(_QWORD *)(v77 + 280), 9, (uint64_t *)a5), v473 = v78, v474 = v79, v78))
    {
      v80 = (uint64_t)v78;
      *(_QWORD *)(v77 + 272) = v78;
      *(_QWORD *)(v77 + 280) = v79;
      v429 = v79;
      WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebCore::RenderLayer&>((uint64_t)v469, v442 + 39, &v473, (uint64_t *)a2);
      a1 = (uint64_t)v442;
      v66 = v80;
      v67 = v429;
      if ((v426 & 1) != 0)
      {
        v81 = *(_QWORD *)(*(_QWORD *)(a2 + 256) + 72);
        *(_OWORD *)&v469[8] = 0u;
        v470 = 0u;
        v471 = 0u;
        *(_QWORD *)v469 = v81;
        v472 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v436 + 304))(v436, v66, v429, v469);
      }
      if ((v426 & 2) != 0 && *((_BYTE *)a5 + 16))
      {
        v451 = a3;
        v82 = WebCore::RenderLayerCompositor::computeCoordinatedPositioningForLayer((WebCore::RenderLayerCompositor *)v442, (const WebCore::RenderLayer *)a2, v444);
        v473 = 0;
        v474 = 0;
        if (v82 != 2)
          goto LABEL_133;
        v83 = *(_QWORD *)(a2 + 24);
        if ((v83 & 4) == 0)
        {
          v84 = a2;
          while (1)
          {
            v84 = *(_QWORD *)(v84 + 40);
            if (!v84)
              break;
            if ((*(_BYTE *)(v84 + 24) & 0x4A) != 0)
              goto LABEL_128;
          }
LABEL_133:
          v67 = v429;
          (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(_QWORD *)v436 + 344))(v436, v66, v429, &v473);
          v85 = *(_QWORD **)(*(_QWORD *)(a2 + 256) + 72);
          *(_DWORD *)v469 = (*(float (**)(_QWORD *))(*v85 + 672))(v85);
          *(_DWORD *)&v469[4] = v86;
          *(_QWORD *)&v469[8] = v85[7];
          (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v436 + 336))(v436, v66, v429, v469);
          v88 = v473;
          if (v473)
          {
            v473 = 0;
            LODWORD(v474) = 0;
            WTF::fastFree(v88, v87);
          }
          a3 = v451;
          a1 = (uint64_t)v442;
          v60 = v441;
          goto LABEL_169;
        }
        v84 = *(_QWORD *)(a2 + 40);
        if (!v84)
          goto LABEL_133;
LABEL_128:
        while (!*(_QWORD *)(v84 + 256))
        {
          if ((*(_BYTE *)(v84 + 24) & 4) == 0)
          {
            while (1)
            {
              v84 = *(_QWORD *)(v84 + 40);
              if (!v84)
                goto LABEL_133;
              if ((*(_BYTE *)(v84 + 24) & 0x4A) != 0)
                goto LABEL_132;
            }
          }
          v84 = *(_QWORD *)(v84 + 40);
LABEL_132:
          if (!v84)
            goto LABEL_133;
        }
        v425 = a4;
        if ((v83 & 4) != 0)
        {
          v373 = *(_QWORD *)(a2 + 40);
          v372 = v373;
        }
        else
        {
          v372 = a2;
          do
            v372 = *(_QWORD *)(v372 + 40);
          while (v372 && (*(_BYTE *)(v372 + 24) & 0x4A) == 0);
          v373 = *(_QWORD *)(a2 + 40);
        }
        if (!v373)
          goto LABEL_133;
        v374 = 0;
        v375 = (*(_DWORD *)(*(_QWORD *)(a2 + 32) + 96) >> 19) & 7;
        while (1)
        {
          if (v375 == 6)
          {
            v376 = v375;
            canContainFixedPositionObjects = WebCore::RenderElement::canContainFixedPositionObjects(*(WebCore::RenderElement **)(v373 + 32));
          }
          else
          {
            if (v375 != 2)
            {
              v378 = 1;
              goto LABEL_571;
            }
            v376 = v375;
            canContainFixedPositionObjects = WebCore::RenderElement::canContainAbsolutelyPositionedObjects(*(WebCore::RenderElement **)(v373 + 32));
          }
          v375 = v376;
          v378 = canContainFixedPositionObjects;
LABEL_571:
          v379 = *(_QWORD *)(v373 + 256);
          v380 = *(_QWORD *)(v373 + 264);
          if (v373 != v372 || (v378 & 1) == 0)
          {
            v374 |= v373 == v372;
            if ((_BYTE)v374)
              v381 = v378;
            else
              v381 = 1;
            if ((v381 & 1) == 0 && v380 && *(_BYTE *)(v380 + 79) && v379 != 0)
            {
              v449 = v375;
              *(_OWORD *)v469 = *(_OWORD *)(v379 + 224);
              if (*(_QWORD *)v469)
              {
                v383 = HIDWORD(v474);
                if (HIDWORD(v474) == (_DWORD)v474)
                {
                  v384 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v473, HIDWORD(v474) + 1, (unint64_t)v469);
                  v383 = HIDWORD(v474);
                  v385 = v473;
                  v386 = *(_OWORD *)v384;
                }
                else
                {
                  v385 = v473;
                  v386 = *(_OWORD *)v469;
                }
                *((_OWORD *)v385 + v383) = v386;
                ++HIDWORD(v474);
              }
              a4 = v425;
              v375 = v449;
            }
            if (v378)
              v375 = (*(_DWORD *)(*(_QWORD *)(v373 + 32) + 96) >> 19) & 7;
            if (v373 == v372)
            {
              v372 = v373;
              if ((*(_BYTE *)(v373 + 24) & 4) != 0)
              {
                v372 = *(_QWORD *)(v373 + 40);
              }
              else
              {
                do
                  v372 = *(_QWORD *)(v372 + 40);
                while (v372 && (*(_BYTE *)(v372 + 24) & 0x4A) == 0);
              }
            }
            v373 = *(_QWORD *)(v373 + 40);
            if (v373)
              continue;
          }
          goto LABEL_133;
        }
      }
    }
    else
    {
      if (*((_BYTE *)a5 + 16))
        v67 = *((_QWORD *)a5 + 1);
      else
        v67 = 0;
      if (*((_BYTE *)a5 + 16))
        v66 = *(_QWORD *)a5;
      else
        v66 = 0;
      a1 = (uint64_t)v442;
    }
LABEL_169:
    v464 = v66;
    v465 = v67;
    v466 = 1;
    v445 = &v464;
    goto LABEL_170;
  }
  v67 = 0;
  v68 = 0;
LABEL_99:
  *(_QWORD *)&v461 = v68;
  *((_QWORD *)&v461 + 1) = v67;
  if (!(_BYTE)v462)
    LOBYTE(v462) = 1;
  *((_QWORD *)&v462 + 1) = 0;
  *(_QWORD *)&v459 = a2;
  *((_QWORD *)&v459 + 1) = &v457;
  v460 = &v455;
  v21 = &v473;
  v15 = *(_DWORD *)(a2 + 12);
LABEL_10:
  v22 = (v15 >> 9) & 2 | v16;
  v473 = 0;
  v474 = 0;
  if ((v15 & 2) != 0)
  {
    v23 = 0;
    if (v20 && (v15 & 0x200) != 0)
      v23 = (*(_BYTE *)(a2 + 27) & 4) == 0;
  }
  else
  {
    if ((*(_BYTE *)(a2 + 27) & 4) == 0)
    {
      v23 = 0;
      v24 = 0;
      if (v20 && (v15 & 0x200) != 0)
      {
        v117 = (WebCore::RenderLayerCompositor *)a1;
        v118 = *(_QWORD *)(a2 + 96);
        if (v118)
        {
          if (*(_DWORD *)(v118 + 12))
          {
            v119 = *(_QWORD *)(v20 + 80);
            if (v119)
            {
              v120 = (WTF *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v474) = 16;
              v473 = v120;
              v121 = HIDWORD(v474);
              v122 = HIDWORD(v474) + 1;
              ++*(_DWORD *)(v119 + 8);
              *((_QWORD *)v120 + v121) = v119;
              HIDWORD(v474) = v122;
            }
          }
        }
        goto LABEL_345;
      }
      goto LABEL_14;
    }
    v23 = 0;
    if (v20)
    {
      if ((v15 & 0x200) == 0)
      {
        v25 = 0;
        if (!(_DWORD)v22)
          goto LABEL_327;
      }
    }
  }
  v29 = a1;
  v450 = a3;
  v30 = *(_QWORD *)(a2 + 96);
  if (v30)
  {
    v89 = *(unsigned int *)(v30 + 12);
    if ((_DWORD)v89)
    {
      v90 = *(uint64_t **)v30;
      v91 = 8 * v89;
      do
      {
        v92 = *v90++;
        WebCore::RenderLayerCompositor::updateBackingAndHierarchy(v29, v92, v21, &v459, &v461, v22);
        v91 -= 8;
      }
      while (v91);
      v93 = *(_QWORD *)(a2 + 96);
      if (v93)
      {
        if (v20)
        {
          if (*(_DWORD *)(v93 + 12))
          {
            v94 = *(_QWORD *)(v20 + 80);
            if (v94)
            {
              v422 = a4;
              v95 = HIDWORD(v474);
              if (HIDWORD(v474) == (_DWORD)v474)
              {
                v96 = HIDWORD(v474) + ((unint64_t)HIDWORD(v474) >> 2);
                if (v96 >= 0x10)
                  v97 = v96 + 1;
                else
                  v97 = 16;
                if (v97 <= (unint64_t)HIDWORD(v474) + 1)
                  v98 = HIDWORD(v474) + 1;
                else
                  v98 = v97;
                if (v98 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1963FB264);
                }
                v99 = v473;
                v446 = v98;
                v100 = (WTF *)WTF::fastMalloc((WTF *)(8 * v98));
                LODWORD(v474) = v446;
                v473 = v100;
                memcpy(v100, v99, 8 * v95);
                if (v99)
                {
                  if (v473 == v99)
                  {
                    v473 = 0;
                    LODWORD(v474) = 0;
                  }
                  WTF::fastFree(v99, v12);
                }
                LODWORD(v95) = HIDWORD(v474);
                v101 = (_QWORD *)((char *)v473 + 8 * HIDWORD(v474));
              }
              else
              {
                v101 = (_QWORD *)((char *)v473 + 8 * HIDWORD(v474));
              }
              ++*(_DWORD *)(v94 + 8);
              *v101 = v94;
              HIDWORD(v474) = v95 + 1;
              a4 = v422;
            }
          }
        }
      }
    }
  }
  v31 = *(_QWORD *)(a2 + 104);
  if (v31)
  {
    v102 = *(unsigned int *)(v31 + 12);
    if ((_DWORD)v102)
    {
      v103 = *(uint64_t **)v31;
      v104 = 8 * v102;
      do
      {
        v105 = *v103++;
        WebCore::RenderLayerCompositor::updateBackingAndHierarchy(v29, v105, v21, &v459, &v461, v22);
        v104 -= 8;
      }
      while (v104);
    }
  }
  v32 = *(_QWORD *)(a2 + 88);
  if (v32)
  {
    v106 = *(unsigned int *)(v32 + 12);
    if ((_DWORD)v106)
    {
      v107 = *(uint64_t **)v32;
      v108 = 8 * v106;
      do
      {
        v109 = *v107++;
        WebCore::RenderLayerCompositor::updateBackingAndHierarchy(v29, v109, v21, &v459, &v461, v22);
        v108 -= 8;
      }
      while (v108);
    }
  }
  *((_BYTE *)a5 + 32) |= v463;
  if (*((_BYTE *)a5 + 16))
    v33 = v462 == 0;
  else
    v33 = 1;
  a3 = v450;
  if (!v33)
  {
    v40 = *(_QWORD *)a5 == (_QWORD)v461 && *((_QWORD *)a5 + 1) == *((_QWORD *)&v461 + 1);
    a1 = v29;
    if (!v40)
      goto LABEL_36;
    goto LABEL_35;
  }
  a1 = v29;
  if ((*((_BYTE *)a5 + 16) != 0) == (v462 != 0))
LABEL_35:
    *((_QWORD *)a5 + 3) = *((_QWORD *)&v462 + 1);
LABEL_36:
  v24 = 1;
LABEL_14:
  v25 = v23;
  LOBYTE(v23) = v24;
  if (!v20)
    goto LABEL_15;
LABEL_327:
  v117 = (WebCore::RenderLayerCompositor *)a1;
  if (!v23 && !v25)
    goto LABEL_329;
LABEL_345:
  v201 = *(WebCore::RenderWidget **)(a2 + 32);
  if ((*((_BYTE *)v201 + 52) & 7) != 3 || (*((_BYTE *)v201 + 53) & 4) == 0)
  {
    WebCore::RenderLayerCompositor::collectViewTransitionNewContentLayers(a2, (uint64_t)&v473);
  }
  else
  {
    v389 = WebCore::RenderLayerCompositor::attachWidgetContentLayersIfNecessary(v117, v201);
    WebCore::RenderLayerCompositor::collectViewTransitionNewContentLayers(a2, (uint64_t)&v473);
    if (v389)
      goto LABEL_329;
  }
  if ((!*(_QWORD *)(v20 + 96) || *(_BYTE *)(v20 + 290))
    && !(*(_QWORD *)(v20 + 160)
       ? WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>::unspecifiedBoolTypeInstance
       : 0))
  {
    v390 = *(_DWORD **)(v20 + 152);
    if (v390)
    {
      v396 = HIDWORD(v474);
      if (HIDWORD(v474) == (_DWORD)v474)
      {
        WTF::Vector<WTF::Ref<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaSourceHandle&>((uint64_t)&v473, (uint64_t)v390);
      }
      else
      {
        v407 = v473;
        ++v390[2];
        *((_QWORD *)v407 + v396) = v390;
        HIDWORD(v474) = v396 + 1;
      }
    }
  }
  if (HIDWORD(v458))
  {
    v454 = a3;
    v424 = a4;
    v212 = v457;
    v475[0] = 0;
    v213 = (WTF *)((char *)v457 + 8 * HIDWORD(v458));
    v214 = xmmword_1968A5190;
    while (1)
    {
      v215 = *(_QWORD *)v212;
      v216 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v212 + 256) + 48);
      v217 = *(_DWORD *)(v216 + 12);
      if (v217)
        break;
LABEL_390:
      v212 = (WTF *)((char *)v212 + 8);
      if (v212 == v213)
      {
        v235 = v475[0];
        a4 = v424;
        if (!HIDWORD(v456))
        {
LABEL_392:
          a3 = v454;
          if (v235)
          {
            v236 = *(unsigned int *)(v235 - 4);
            if ((_DWORD)v236)
            {
              v237 = (uint64_t *)(v235 + 8);
              do
              {
                v238 = *(v237 - 1);
                if (v238 != -1)
                {
                  v239 = *v237;
                  if (*v237)
                  {
                    v240 = *(_DWORD *)(v239 + 8);
                    if (!v240)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1963FAC7CLL);
                    }
                    *(_DWORD *)(v239 + 8) = v240 - 1;
                  }
                  if (v238)
                  {
                    v241 = *(_DWORD *)(v238 + 8);
                    if (!v241)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1963FAC9CLL);
                    }
                    *(_DWORD *)(v238 + 8) = v241 - 1;
                  }
                }
                v237 += 2;
                --v236;
              }
              while (v236);
            }
            WTF::fastFree((WTF *)(v235 - 16), v390);
          }
          goto LABEL_359;
        }
        if (!v475[0])
          goto LABEL_359;
        v242 = v455;
        v440 = (WTF *)((char *)v455 + 8 * HIDWORD(v456));
        v435 = v475[0];
        while (2)
        {
          v243 = *(_QWORD *)v242;
          v244 = *(_DWORD *)(v235 - 8);
          v245 = ~(*(_QWORD *)v242 << 32) + *(_QWORD *)v242;
          v246 = (v245 ^ (v245 >> 22)) + ~((v245 ^ (v245 >> 22)) << 13);
          v247 = (9 * (v246 ^ (v246 >> 8))) ^ ((9 * (v246 ^ (v246 >> 8))) >> 15);
          v248 = v244 & (((v247 + ~(v247 << 27)) >> 31) ^ ((_DWORD)v247 + ~((_DWORD)v247 << 27)));
          v249 = *(_QWORD *)(v235 + 16 * v248);
          if (v249 != *(_QWORD *)v242)
          {
            v402 = 1;
            while (v249)
            {
              v248 = ((_DWORD)v248 + v402) & v244;
              v235 = v435;
              v249 = *(_QWORD *)(v435 + 16 * v248);
              ++v402;
              a4 = v424;
              if (v249 == v243)
                goto LABEL_407;
            }
            v235 = v435;
            v248 = *(unsigned int *)(v435 - 4);
            a4 = v424;
          }
LABEL_407:
          if (v248 != *(_DWORD *)(v235 - 4))
          {
            v250 = *(WebCore::RenderLayer **)(v235 + 16 * v248 + 8);
            if (v250)
            {
              v251 = *((_DWORD *)v250 + 2) + 1;
              *((_DWORD *)v250 + 2) = v251;
              v252 = (WebCore::RenderLayerBacking *)*((_QWORD *)v250 + 32);
              if (v252)
              {
                v253 = *(WTF::StringImpl **)(v243 + 256);
                if (v253)
                {
                  v443 = v250;
                  v448 = v242;
                  v254 = *((_QWORD *)v253 + 19);
                  if (v254)
                  {
                    v255 = *(_QWORD *)(v254 + 200);
                    if (v255)
                    {
                      (*(void (**)(uint64_t))(*(_QWORD *)v255 + 912))(v255);
                      v352 = *(_QWORD *)(v254 + 200);
                      if (v352)
                      {
                        *(_QWORD *)(v254 + 200) = 0;
                        v353 = *(unsigned int *)(v352 + 196);
                        if ((_DWORD)v353)
                        {
                          v354 = *(_QWORD **)(v352 + 184);
                          v355 = v354 + 1;
                          v356 = *(unsigned int *)(v352 + 196);
                          while (*v354 != v254)
                          {
                            ++v354;
                            ++v355;
                            if (!--v356)
                              goto LABEL_413;
                          }
                          *v354 = 0;
                          if (*(_DWORD *)(v254 + 8) == 1)
                          {
                            (*(void (**)(uint64_t))(*(_QWORD *)v254 + 16))(v254);
                            v353 = *(unsigned int *)(v352 + 196);
                          }
                          else
                          {
                            --*(_DWORD *)(v254 + 8);
                          }
                          memmove(v354, v354 + 1, *(_QWORD *)(v352 + 184) + 8 * v353 - (_QWORD)v355);
                          --*(_DWORD *)(v352 + 196);
                        }
                      }
                    }
LABEL_413:
                    if (*((_QWORD *)v253 + 6))
                    {
                      v256 = (void *)WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v253 + 1) + 32) + 24) + 8) + 40) + 8) + 528) + 8) + 24)
                                                                                           + 8));
                      v257 = (uint64_t *)*((_QWORD *)v253 + 6);
                      *(_QWORD *)v469 = 0;
                      *(_QWORD *)&v469[8] = 0;
                      v258 = *((unsigned int *)v257 + 3);
                      if ((_DWORD)v258)
                      {
                        if (v258 >> 26)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1963FB200);
                        }
                        v259 = WTF::fastMalloc((WTF *)(v258 << 6));
                        *(_DWORD *)&v469[8] = v258;
                        *(_QWORD *)v469 = v259;
                        if (*((_DWORD *)v257 + 3))
                        {
                          v260 = 0;
                          v261 = 0;
                          v262 = v259 + 8;
                          do
                          {
                            v263 = *v257;
                            v264 = *(_DWORD **)(*v257 + v260);
                            if (v264)
                              ++*v264;
                            v265 = v263 + v260;
                            v266 = *(_BYTE *)(v265 + 56);
                            v267 = *(_OWORD *)(v265 + 40);
                            v268 = *(_OWORD *)(v265 + 24);
                            v269 = *(_OWORD *)(v265 + 8);
                            *(_QWORD *)(v262 - 8) = v264;
                            *(_OWORD *)v262 = v269;
                            *(_OWORD *)(v262 + 16) = v268;
                            *(_OWORD *)(v262 + 32) = v267;
                            *(_BYTE *)(v262 + 48) = v266;
                            ++v261;
                            v262 += 64;
                            v260 += 96;
                          }
                          while (v261 < *((unsigned int *)v257 + 3));
                          *(_DWORD *)&v469[12] = v261;
                        }
                      }
                      v270 = *((_QWORD *)v253 + 7);
                      if (v270)
                      {
                        WebCore::LayerAncestorClippingStack::updateWithClipData(v270, v256, (uint64_t *)v469);
                      }
                      else
                      {
                        v357 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
                        WebCore::LayerAncestorClippingStack::LayerAncestorClippingStack(v357, (uint64_t **)v469);
                        v359 = (unsigned int *)*((_QWORD *)v253 + 7);
                        *((_QWORD *)v253 + 7) = v357;
                        if (v359)
                        {
                          v387 = WTF::Vector<WebCore::LayerAncestorClippingStack::ClippingStackEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v359, v358);
                          WTF::fastFree((WTF *)v387, v388);
                        }
                      }
                      WebCore::RenderLayerBacking::ensureClippingStackLayers(v253, **((WebCore::LayerAncestorClippingStack ***)v253 + 7), *(_DWORD *)(*((_QWORD *)v253 + 7) + 12));
                      v464 = WebCore::RenderLayerBacking::computeParentGraphicsLayerRect(v253, (const WebCore::RenderLayer *)a2);
                      v465 = v271;
                      WebCore::RenderLayerBacking::updateClippingStackLayerGeometry((WebCore::RenderLayer **)v253, *((WebCore::LayerAncestorClippingStack **)v253 + 7), (const WebCore::RenderLayer *)a2, (WebCore::LayoutRect *)&v464);
                      WebCore::RenderLayerBacking::connectClippingStackLayers(*((_DWORD **)v253 + 7), v272);
                      if (*(_DWORD *)&v469[12])
                      {
                        v274 = *(WTF ***)v469;
                        v275 = (unint64_t)*(unsigned int *)&v469[12] << 6;
                        do
                        {
                          v276 = *v274;
                          *v274 = 0;
                          if (v276)
                          {
                            if (*(_DWORD *)v276 == 1)
                              WTF::fastFree(v276, v273);
                            else
                              --*(_DWORD *)v276;
                          }
                          v274 += 8;
                          v275 -= 64;
                        }
                        while (v275);
                      }
                      v277 = *(WTF **)v469;
                      if (*(_QWORD *)v469)
                      {
                        *(_QWORD *)v469 = 0;
                        *(_DWORD *)&v469[8] = 0;
                        WTF::fastFree(v277, v273);
                      }
                    }
                    v278 = (unsigned int *)*((_QWORD *)v253 + 7);
                    if (v278)
                    {
                      v279 = v278[3];
                      if (!(_DWORD)v279)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1963FB208);
                      }
                      v280 = v279 - 1;
                      v281 = *(_QWORD *)(*(_QWORD *)v278 + 96 * v280 + 88);
                      if (!v281)
                        v281 = *(_QWORD *)(*(_QWORD *)v278 + 96 * v280 + 80);
                      ++*(_DWORD *)(v254 + 8);
                      *(_QWORD *)v469 = 0;
                      *(_QWORD *)&v469[8] = 0;
                      v282 = WTF::fastMalloc((WTF *)8);
                      *(_DWORD *)&v469[8] = 1;
                      *(_QWORD *)v469 = v282;
                      v283 = *(unsigned int *)&v469[12];
                      ++*(_DWORD *)(v254 + 8);
                      *(_QWORD *)(v282 + 8 * v283) = v254;
                      *(_DWORD *)&v469[12] = v283 + 1;
                      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v281 + 56))(v281, v469);
                      if (*(_DWORD *)&v469[12])
                      {
                        v393 = *(_DWORD ***)v469;
                        v394 = 8 * *(unsigned int *)&v469[12];
                        do
                        {
                          v395 = *v393;
                          *v393 = 0;
                          if (v395)
                          {
                            if (v395[2] == 1)
                              (*(void (**)(_DWORD *))(*(_QWORD *)v395 + 16))(v395);
                            else
                              --v395[2];
                          }
                          ++v393;
                          v394 -= 8;
                        }
                        while (v394);
                      }
                      v285 = *(WTF **)v469;
                      if (*(_QWORD *)v469)
                      {
                        *(_QWORD *)v469 = 0;
                        *(_DWORD *)&v469[8] = 0;
                        WTF::fastFree(v285, v284);
                      }
                      if (*(_DWORD *)(v254 + 8) == 1)
                        (*(void (**)(uint64_t))(*(_QWORD *)v254 + 16))(v254);
                      else
                        --*(_DWORD *)(v254 + 8);
                      if (!v278[3])
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1963FB210);
                      }
                      v254 = *(_QWORD *)(*(_QWORD *)v278 + 80);
                    }
                    v286 = WebCore::RenderLayerBacking::childForSuperlayers(v252);
                    v287 = WebCore::RenderLayerBacking::childForSuperlayers(v253);
                    v288 = v441 & 0xFFFFFFFFFFFFFF00;
                    a3 &= 0xFFFFFFFFFFFFFF00;
                    v289 = HIDWORD(v474);
                    if (!HIDWORD(v474))
                      goto LABEL_515;
                    v290 = 0;
                    v291 = 0;
                    v292 = 0;
                    v293 = v473;
                    do
                    {
                      v294 = *((_QWORD *)v473 + v290);
                      if (v294 == v287)
                        v295 = v290;
                      else
                        v295 = a3;
                      if (v294 == v287)
                        v296 = 1;
                      else
                        v296 = v292;
                      if (v294 == v286)
                      {
                        v288 = v290;
                        v291 = 1;
                      }
                      else
                      {
                        a3 = v295;
                        v292 = v296;
                      }
                      ++v290;
                    }
                    while (HIDWORD(v474) != v290);
                    if (v291 && v292)
                    {
                      if (v288 + 1 <= a3 + 1)
                        v297 = a3 + 1;
                      else
                        v297 = v288 + 1;
                      v441 = v288;
                      if (HIDWORD(v474) == (_DWORD)v474)
                      {
                        WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)&v473, HIDWORD(v474) + 1);
                        v289 = HIDWORD(v474);
                        v293 = v473;
                      }
                      v298 = (_QWORD *)((char *)v293 + 8 * v297);
                      memmove(v298 + 1, v298, 8 * v289 - 8 * v297);
                      ++*(_DWORD *)(v254 + 8);
                      *v298 = v254;
                      ++HIDWORD(v474);
                    }
                    else
                    {
LABEL_515:
                      v441 = v288;
                    }
                    if (*(_QWORD *)(a2 + 256))
                    {
                      v299 = (const WebCore::LayoutRect *)WebCore::RenderLayerBacking::computeParentGraphicsLayerRect(v253, (const WebCore::RenderLayer *)a2);
                      v464 = (unint64_t)v299;
                      v465 = v300;
                      WebCore::RenderLayerBacking::computePrimaryGraphicsLayerRect(v253, (const WebCore::RenderLayer *)a2, v299);
                      v301 = *(_QWORD *)(*((_QWORD *)v253 + 1) + 32);
                      if ((*(_BYTE *)(v301 + 45) & 4) == 0)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1963FAED8);
                      }
                      v302 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v301 + 992))(*(_QWORD *)(*((_QWORD *)v253 + 1) + 32));
                      v304 = v302;
                      v305 = HIDWORD(v303);
                      v306 = *(_DWORD *)(v301 + 160);
                      v307 = v306 - HIDWORD(v303);
                      if (__OFSUB__(v306, HIDWORD(v303)))
                        v307 = (v306 >> 31) + 0x7FFFFFFF;
                      v308 = __OFSUB__(v307, HIDWORD(v302));
                      v309 = v307 - HIDWORD(v302);
                      v310 = (v307 >> 31) + 0x7FFFFFFF;
                      if (v308)
                        v311 = v310;
                      else
                        v311 = v309;
                      v312 = *(_DWORD *)(v301 + 164);
                      v313 = v312 - v302;
                      if (__OFSUB__(v312, (_DWORD)v302))
                        v313 = (v312 >> 31) + 0x7FFFFFFF;
                      v308 = __OFSUB__(v313, (_DWORD)v303);
                      v314 = v313 - v303;
                      v315 = (v313 >> 31) + 0x7FFFFFFF;
                      if (v308)
                        v316 = v315;
                      else
                        v316 = v314;
                      v317 = (WebCore::LayerAncestorClippingStack *)*((_QWORD *)v253 + 7);
                      if (v317)
                      {
                        WebCore::RenderLayerBacking::updateClippingStackLayerGeometry((WebCore::RenderLayer **)v253, v317, (const WebCore::RenderLayer *)a2, (WebCore::LayoutRect *)&v464);
                        v299 = (const WebCore::LayoutRect *)v464;
                      }
                      v318 = (WebCore::RenderLayer *)*((_QWORD *)v253 + 1);
                      v319 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v318 + 4) + 24)
                                                                           + 8)
                                                               + 40)
                                                   + 8)
                                       + 528);
                      v320 = 1.0;
                      if (v319)
                      {
                        v321 = *(_QWORD *)(v319 + 8);
                        if (v321)
                        {
                          v322 = *(_QWORD *)(v321 + 24);
                          if (v322)
                          {
                            v323 = *(float **)(v322 + 8);
                            if (v323)
                            {
                              v324 = (*(_DWORD *)v323)++;
                              v320 = v323[91];
                              if (v324)
                              {
                                *(_DWORD *)v323 = v324;
                              }
                              else
                              {
                                WebCore::Page::~Page((WebCore::Page *)v323);
                                WTF::fastFree(v391, v392);
                              }
                            }
                          }
                        }
                      }
                      v325 = WebCore::RenderLayer::convertToLayerCoords(v318, (WebCore::RenderLayer *)a2, 0, 1);
                      v326 = WebCore::computeOffsetFromAncestorGraphicsLayer(a2, v325, v320);
                      v328 = v326 - (_DWORD)v299;
                      if (__OFSUB__((_DWORD)v326, (_DWORD)v299))
                        v328 = (v326 >> 31) + 0x7FFFFFFF;
                      v329 = HIDWORD(v326) - HIDWORD(v299);
                      if (__OFSUB__(HIDWORD(v326), HIDWORD(v299)))
                        v329 = (HIDWORD(v326) >> 31) + 0x7FFFFFFF;
                      v308 = __OFADD__((_DWORD)v305, v328);
                      LODWORD(v330) = v305 + v328;
                      if (v308)
                        v330 = (v305 >> 31) + 0x7FFFFFFF;
                      else
                        v330 = v330;
                      v308 = __OFADD__(v304, v329);
                      LODWORD(v331) = v304 + v329;
                      if (v308)
                        v331 = (v304 >> 31) + 0x7FFFFFFF;
                      else
                        v331 = v331;
                      v332 = *(const WebCore::LayoutRect **)(*((_QWORD *)v253 + 1) + 32);
                      *(_QWORD *)v469 = v330 | (v331 << 32);
                      *(_QWORD *)&v469[8] = v311 | (v316 << 32);
                      WebCore::snapRectToDevicePixelsIfNeeded((WebCore *)v469, v332, v327);
                      v334 = v333 * 64.0;
                      v336 = v335;
                      v337 = v335 * 64.0;
                      v339 = v338;
                      v341 = v340;
                      if (v337 < 2147483650.0)
                      {
                        v342 = v339 * 64.0;
                        if (v339 * 64.0 < 2147483650.0)
                        {
                          v343 = v341 * 64.0;
                          if (v341 * 64.0 < 2147483650.0
                            && v334 > -2147483650.0
                            && v337 > -2147483650.0
                            && v342 > -2147483650.0
                            && v343 > -2147483650.0
                            && v334 < 2147483650.0)
                          {
                            v344 = (float)(int)v337;
                            v345 = (float)(int)v334 * 0.015625;
                            v346 = v344 * 0.015625;
                            v347 = (float)(int)v342 * 0.015625;
                            v348 = (float)(int)v343;
                            goto LABEL_502;
                          }
                        }
                      }
                      if (v334 >= 2147483650.0)
                      {
                        v345 = 33554000.0;
                      }
                      else if (v334 <= -2147483650.0)
                      {
                        v345 = -33554000.0;
                      }
                      else
                      {
                        v345 = (float)(int)v334 * 0.015625;
                      }
                      v419 = v336 * 64.0;
                      if (v336 * 64.0 >= 2147483650.0)
                      {
                        v346 = 33554000.0;
                      }
                      else if (v419 <= -2147483650.0)
                      {
                        v346 = -33554000.0;
                      }
                      else
                      {
                        v346 = (float)(int)v419 * 0.015625;
                      }
                      v420 = v339 * 64.0;
                      if (v420 >= 2147483650.0)
                      {
                        v347 = 33554000.0;
                      }
                      else if (v420 <= -2147483650.0)
                      {
                        v347 = -33554000.0;
                      }
                      else
                      {
                        v347 = (float)(int)v420 * 0.015625;
                      }
                      v421 = v341 * 64.0;
                      if (v421 >= 2147483650.0)
                      {
                        v349 = 33554000.0;
                      }
                      else if (v421 <= -2147483650.0)
                      {
                        v349 = -33554000.0;
                      }
                      else
                      {
                        v348 = (float)(int)v421;
LABEL_502:
                        v349 = v348 * 0.015625;
                      }
                      v350 = *((_QWORD *)v253 + 19);
                      *(float *)v469 = v345;
                      *(float *)&v469[4] = v346;
                      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v350 + 128))(v350, v469);
                      v351 = *((_QWORD *)v253 + 19);
                      *(float *)v469 = v347;
                      *(float *)&v469[4] = v349;
                      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v351 + 160))(v351, v469);
                    }
                    v250 = v443;
                    v242 = v448;
                    v251 = *((_DWORD *)v443 + 2);
                    v235 = v435;
                  }
                  else
                  {
                    v235 = v435;
                  }
                }
              }
              a4 = v424;
              if (!v251)
              {
                __break(0xC471u);
                JUMPOUT(0x1963FAEB8);
              }
              *((_DWORD *)v250 + 2) = v251 - 1;
            }
          }
          v242 = (WTF *)((char *)v242 + 8);
          if (v242 == v440)
            goto LABEL_392;
          continue;
        }
      }
    }
    v218 = *(_BYTE **)v216;
    v219 = *(_QWORD *)v216 + 96 * v217;
    while (1)
    {
      if (!v218[56])
        goto LABEL_378;
      if (!*(_QWORD *)v218)
        goto LABEL_378;
      v220 = *(_QWORD *)(*(_QWORD *)v218 + 8);
      if (!v220)
        goto LABEL_378;
      *(_OWORD *)v447 = v214;
      ++*(_DWORD *)(v220 + 8);
      v221 = v475[0];
      if (!v475[0])
      {
        v222 = (_OWORD *)WTF::fastZeroedMalloc((WTF *)0x90);
        v214 = *(_OWORD *)v447;
        *v222 = *(_OWORD *)v447;
        v221 = (uint64_t)(v222 + 1);
        v475[0] = v221;
      }
      v223 = *(_DWORD *)(v221 - 8);
      v224 = (~(v220 << 32) + v220) ^ ((unint64_t)(~(v220 << 32) + v220) >> 22);
      v225 = 9 * ((v224 + ~(v224 << 13)) ^ ((v224 + ~(v224 << 13)) >> 8));
      v226 = (v225 ^ (v225 >> 15)) + ~((v225 ^ (v225 >> 15)) << 27);
      v227 = v223 & ((v226 >> 31) ^ v226);
      v390 = (_DWORD *)(v221 + 16 * v227);
      v228 = *(_QWORD *)v390;
      if (*(_QWORD *)v390)
        break;
LABEL_384:
      *(_QWORD *)v390 = v220;
      ++*(_DWORD *)(v215 + 8);
      v229 = *((_QWORD *)v390 + 1);
      *((_QWORD *)v390 + 1) = v215;
      if (v229)
      {
        v230 = *(_DWORD *)(v229 + 8);
        if (!v230)
        {
          __break(0xC471u);
          JUMPOUT(0x1963FAEF8);
        }
        *(_DWORD *)(v229 + 8) = v230 - 1;
      }
      v231 = *(_DWORD *)(v221 - 16);
      v232 = *(_DWORD *)(v221 - 12) + 1;
      *(_DWORD *)(v221 - 12) = v232;
      v233 = (v231 + v232);
      v234 = *(unsigned int *)(v221 - 4);
      if (v234 > 0x400)
      {
        if (v234 <= 2 * v233)
        {
LABEL_557:
          WTF::HashTable<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::KeyValuePair<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::HashMap<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>>::expand(v475);
LABEL_558:
          v214 = *(_OWORD *)v447;
        }
      }
      else if (3 * v234 <= 4 * v233)
      {
        goto LABEL_557;
      }
LABEL_378:
      v218 += 96;
      if (v218 == (_BYTE *)v219)
        goto LABEL_390;
    }
    v408 = 0;
    v409 = 1;
    while (v228 != v220)
    {
      if (v228 == -1)
        v408 = v390;
      v227 = (v227 + v409) & v223;
      v390 = (_DWORD *)(v221 + 16 * v227);
      v228 = *(_QWORD *)v390;
      ++v409;
      if (!*(_QWORD *)v390)
      {
        v214 = *(_OWORD *)v447;
        if (v408)
        {
          *v408 = 0;
          v408[1] = 0;
          --*(_DWORD *)(v221 - 16);
          v390 = v408;
        }
        goto LABEL_384;
      }
    }
    WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>::operator=((uint64_t)(v390 + 2), v215);
    v412 = *(_DWORD *)(v220 + 8);
    if (!v412)
    {
      __break(0xC471u);
      JUMPOUT(0x1963FB0D0);
    }
    *(_DWORD *)(v220 + 8) = v412 - 1;
    goto LABEL_558;
  }
LABEL_359:
  v204 = *(_QWORD *)(v20 + 168);
  if (!v204)
  {
    v204 = *(_QWORD *)(v20 + 96);
    if (!v204)
      v204 = *(_QWORD *)(v20 + 72);
  }
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v204 + 56))(v204, &v473);
LABEL_329:
  v188 = *(_QWORD *)(a2 + 32);
  if ((*(_BYTE *)(v188 + 22) & 0x40) == 0)
  {
    v189 = a4;
    if ((*(_QWORD *)(v188 + 96) & 0xF80000000000) != 0x600000000000)
    {
LABEL_331:
      v190 = WebCore::RenderLayerBacking::childForSuperlayers((WebCore::RenderLayerBacking *)v20);
      v191 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v191 == *(_DWORD *)(a3 + 8))
      {
        v192 = v191 + (v191 >> 2);
        if (v192 >= 0x10)
          v193 = v192 + 1;
        else
          v193 = 16;
        if (v193 <= v191 + 1)
          v194 = v191 + 1;
        else
          v194 = v193;
        if (v194 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1963FB0F8);
        }
        v195 = *(WTF **)a3;
        v196 = (void *)WTF::fastMalloc((WTF *)(8 * v194));
        *(_DWORD *)(a3 + 8) = v194;
        *(_QWORD *)a3 = v196;
        memcpy(v196, v195, 8 * v191);
        if (v195)
        {
          if (*(WTF **)a3 == v195)
          {
            *(_QWORD *)a3 = 0;
            *(_DWORD *)(a3 + 8) = 0;
          }
          WTF::fastFree(v195, v197);
        }
        v191 = *(unsigned int *)(a3 + 12);
        v198 = (uint64_t *)(*(_QWORD *)a3 + 8 * v191);
      }
      else
      {
        v198 = (uint64_t *)(*(_QWORD *)a3 + 8 * v191);
      }
      ++*(_DWORD *)(v190 + 8);
      *v198 = v190;
      *(_DWORD *)(a3 + 12) = v191 + 1;
      goto LABEL_342;
    }
    v400 = 0;
    v398 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v188 + 24) + 8) + 40) + 8);
LABEL_631:
    v401 = *(WebCore::ViewTransition **)(v398 + 2112);
    if (v401)
      LODWORD(v401) = WebCore::ViewTransition::documentElementIsCaptured(v401);
    if (((v401 | v400) & 1) != 0)
      goto LABEL_342;
    goto LABEL_331;
  }
  v189 = a4;
  v397 = *(_QWORD *)(*(_QWORD *)(v188 + 24) + 8);
  v398 = *(_QWORD *)(*(_QWORD *)(v397 + 40) + 8);
  v399 = *(_QWORD *)(v398 + 1272);
  v400 = v399 != v397;
  if ((*(_QWORD *)(v188 + 96) & 0xF80000000000) == 0x600000000000)
    goto LABEL_631;
  if (v399 == v397)
    goto LABEL_331;
LABEL_342:
  v199 = *(uint64_t **)(v20 + 48);
  if (v199)
  {
    v207 = *((unsigned int *)v199 + 3);
    if ((_DWORD)v207)
    {
      v208 = *v199;
      v209 = 96 * v207;
      v210 = (unsigned __int8 *)(v208 + 56);
      while (1)
      {
        v211 = *v210;
        v210 += 96;
        if (v211)
          break;
        v209 -= 96;
        if (!v209)
          goto LABEL_343;
      }
      v361 = *((_QWORD *)v189 + 1);
      *(_QWORD *)v469 = a2;
      v362 = *(unsigned int *)(v361 + 12);
      if ((_DWORD)v362 == *(_DWORD *)(v361 + 8))
      {
        WTF::Vector<WebCore::FlexItem *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FlexItem *>(v361, (unint64_t)v469);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)v361 + 8 * v362) = a2;
        *(_DWORD *)(v361 + 12) = v362 + 1;
      }
    }
  }
LABEL_343:
  v200 = *(_QWORD *)(a2 + 264);
  if (v200 && *(_BYTE *)(v200 + 79))
  {
    v205 = *((_QWORD *)v189 + 2);
    *(_QWORD *)v469 = a2;
    v206 = *(unsigned int *)(v205 + 12);
    if ((_DWORD)v206 == *(_DWORD *)(v205 + 8))
    {
      v360 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v205, v206 + 1, (unint64_t)v469);
      v206 = *(unsigned int *)(v205 + 12);
      *(_QWORD *)(*(_QWORD *)v205 + 8 * v206) = *v360;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)v205 + 8 * v206) = a2;
    }
    *(_DWORD *)(v205 + 12) = v206 + 1;
  }
  WebCore::RenderLayerBacking::updateAfterDescendants((WebCore::RenderLayerBacking *)v20);
LABEL_15:
  *(_DWORD *)(a2 + 12) &= 0xFFFFF03D;
  v26 = v473;
  if (HIDWORD(v474))
  {
    v45 = 8 * HIDWORD(v474);
    do
    {
      v46 = *(_DWORD **)v26;
      *(_QWORD *)v26 = 0;
      if (v46)
      {
        if (v46[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 16))(v46);
        else
          --v46[2];
      }
      v26 = (WTF *)((char *)v26 + 8);
      v45 -= 8;
    }
    while (v45);
    v26 = v473;
  }
  if (v26)
  {
    v473 = 0;
    LODWORD(v474) = 0;
    WTF::fastFree(v26, v12);
  }
  v27 = v455;
  if (v455)
  {
    v455 = 0;
    LODWORD(v456) = 0;
    WTF::fastFree(v27, v12);
  }
  result = v457;
  if (v457)
  {
    v457 = 0;
    LODWORD(v458) = 0;
    return (WTF *)WTF::fastFree(result, v12);
  }
  return result;
}

WTF *WTF::WeakListHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderLayer>(uint64_t a1, uint64_t a2, WTF **a3)
{
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  void *v9;
  WTF *result;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  void *v14;
  WTF *v15;
  WTF *v16;

  v6 = *(_DWORD *)(a2 + 28);
  v7 = *(_DWORD *)(a2 + 24) + 1;
  *(_DWORD *)(a2 + 24) = v7;
  if (v7 > v6)
  {
    v11 = *(WTF **)(a2 + 8);
    if (v11)
    {
      do
      {
        v12 = (WTF *)*((_QWORD *)v11 + 2);
        if (!*(_QWORD *)(*(_QWORD *)v11 + 8))
          WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::remove((uint64_t *)a2, (void *)a2, v11);
        v11 = v12;
      }
      while (v12);
    }
    *(_DWORD *)(a2 + 24) = 0;
    v13 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      LODWORD(v13) = *(_DWORD *)(v13 - 12);
      if (v13 > 0x7FFFFFFE)
        LODWORD(v13) = 0x7FFFFFFF;
    }
    *(_DWORD *)(a2 + 28) = 2 * v13;
  }
  v8 = *a3;
  if (!*a3)
  {
    v8 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *((_QWORD *)v8 + 1) = a3;
    v15 = *a3;
    *a3 = v8;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
      {
        WTF::fastFree(v15, v14);
        v8 = *a3;
      }
      else
      {
        --*(_DWORD *)v15;
      }
    }
  }
  *(_DWORD *)v8 += 2;
  v16 = v8;
  WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::add((uint64_t *)a2, (uint64_t *)&v16, a1);
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v9);
    else
      --*(_DWORD *)result;
  }
  if (*(_DWORD *)v8 == 1)
    return (WTF *)WTF::fastFree(v8, v9);
  --*(_DWORD *)v8;
  return result;
}

uint64_t *WebCore::RenderLayerCompositor::computeCompositingRequirements(WebCore::RenderLayer *,WebCore::RenderLayer&,WebCore::LayerOverlapMap &,WebCore::RenderLayerCompositor::CompositingState &,WebCore::RenderLayerCompositor::BackingSharingState &,BOOL &)::$_0::operator()(uint64_t *result)
{
  uint64_t *v1;
  const WebCore::RenderLayer *v2;
  uint64_t v3;
  _BYTE *v4;

  v1 = result;
  v3 = *result;
  v2 = (const WebCore::RenderLayer *)result[1];
  *(_BYTE *)(v3 + 25) = 1;
  *(_QWORD *)v3 = v2;
  *(_QWORD *)(v3 + 8) = 0;
  v4 = (_BYTE *)result[2];
  if (*v4)
  {
    *v4 = 0;
    *((_QWORD *)v2 + 3) = *((_QWORD *)v2 + 3) & 0xFFFFFF87FFFFFFFFLL | 0x2000000000;
  }
  else if (!*(_BYTE *)result[3])
  {
    result = WebCore::LayerOverlapMap::pushCompositingContainer((WebCore::LayerOverlapMap *)result[4], v2);
    *(_BYTE *)v1[3] = 1;
  }
  *(_BYTE *)v1[5] = 1;
  return result;
}

uint64_t *WebCore::RenderLayerCompositor::computeCompositingRequirements(WebCore::RenderLayer *,WebCore::RenderLayer&,WebCore::LayerOverlapMap &,WebCore::RenderLayerCompositor::CompositingState &,WebCore::RenderLayerCompositor::BackingSharingState &,BOOL &)::$_1::operator()(uint64_t *result)
{
  uint64_t *v1;
  _QWORD *v2;
  const WebCore::RenderLayer *v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;

  v1 = result;
  v2 = (_QWORD *)*result;
  v4 = *(_QWORD *)*result;
  v3 = *(const WebCore::RenderLayer **)(*result + 8);
  *(_BYTE *)(v4 + 25) = 1;
  *(_QWORD *)v4 = v3;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (_BYTE *)v2[2];
  if (*v5)
  {
    *v5 = 0;
    *((_QWORD *)v3 + 3) = *((_QWORD *)v3 + 3) & 0xFFFFFF87FFFFFFFFLL | 0x2000000000;
  }
  else if (!*(_BYTE *)v2[3])
  {
    result = WebCore::LayerOverlapMap::pushCompositingContainer((WebCore::LayerOverlapMap *)v2[4], v3);
    *(_BYTE *)v2[3] = 1;
  }
  *(_BYTE *)v2[5] = 1;
  v6 = (_BYTE *)v1[2];
  *(_BYTE *)(v1[1] + 24) = 1;
  *v6 = 1;
  return result;
}

uint64_t WebCore::RenderLayer::setNeedsCompositingLayerConnection(uint64_t this)
{
  int v1;

  *(_DWORD *)(this + 12) |= 0x200u;
  if ((*(_BYTE *)(this + 24) & 4) != 0)
  {
    this = *(_QWORD *)(this + 40);
    if (this)
    {
LABEL_4:
      do
      {
        v1 = *(_DWORD *)(this + 12);
        if ((v1 & 2) != 0)
          break;
        *(_DWORD *)(this + 12) = v1 | 2;
        if ((*(_BYTE *)(this + 24) & 4) == 0)
        {
          while (1)
          {
            this = *(_QWORD *)(this + 40);
            if (!this)
              return this;
            if ((*(_BYTE *)(this + 24) & 0x4A) != 0)
              goto LABEL_9;
          }
        }
        this = *(_QWORD *)(this + 40);
LABEL_9:
        ;
      }
      while (this);
    }
  }
  else
  {
    while (1)
    {
      this = *(_QWORD *)(this + 40);
      if (!this)
        break;
      if ((*(_BYTE *)(this + 24) & 0x4A) != 0)
        goto LABEL_4;
    }
  }
  return this;
}

uint64_t WebCore::RenderLayerCompositor::updateLayerCompositingState(WebCore::RenderLayerCompositor *a1, uint64_t a2, const WebCore::RenderLayer *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t updated;
  WTF::StringImpl **v8;

  updated = WebCore::RenderLayerCompositor::updateBacking(a1, a2, a4, a5, 2);
  v8 = *(WTF::StringImpl ***)(a2 + 256);
  if (v8)
    return WebCore::RenderLayerBacking::updateConfiguration(v8, a3) | updated;
  return updated;
}

uint64_t WebCore::RenderLayerCompositor::collectViewTransitionNewContentLayers(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::RenderLayerBacking *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  _DWORD *v23;
  char v24;
  char v25;

  v2 = *(_QWORD *)(result + 32);
  if ((*(_QWORD *)(v2 + 96) & 0xF80000000000) == 0x800000000000 && (*(_BYTE *)(result + 26) & 8) != 0)
  {
    if ((*(_BYTE *)(v2 + 52) & 7) != 3 || (*(_BYTE *)(v2 + 53) & 8) == 0)
    {
      __break(0xC471u);
      goto LABEL_34;
    }
    if ((*(_BYTE *)(v2 + 22) & 1) == 0)
    {
      v4 = result;
      result = WebCore::Document::activeViewTransition(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8)
                                                                                         + 40)
                                                                             + 8));
      if (result)
      {
        v5 = (_DWORD *)result;
        v6 = v4;
        v7 = *(_DWORD *)(result + 24);
        *(_DWORD *)(result + 24) = v7 + 1;
        result = WebCore::OrderedNamedElementsMap::find(*(_QWORD *)(result + 64), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 88) + 40) + 592));
        if (!result)
          goto LABEL_27;
        v9 = *(_QWORD *)(result + 56);
        if (!v9 || (v10 = *(_QWORD *)(v9 + 8)) == 0)
        {
          LOBYTE(v21) = 0;
          v25 = 0;
LABEL_26:
          result = std::optional<WebCore::Styleable const>::~optional((uint64_t)&v21, v8);
          v7 = v5[6] - 1;
LABEL_27:
          if (!v7)
            return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
          v5[6] = v7;
          return result;
        }
        if (*(_BYTE *)(result + 80))
        {
          v11 = *(_DWORD *)(result + 64);
          v12 = *(_DWORD **)(result + 72);
          if (v12)
            *v12 += 2;
          v21 = v10;
          v22 = v11;
          v23 = v12;
          v24 = 1;
        }
        else
        {
          v21 = v10;
          LOBYTE(v22) = 0;
          v24 = 0;
        }
        v25 = 1;
        v13 = WebCore::Styleable::renderer((WebCore::Styleable *)&v21);
        if (!v13 || (*(_BYTE *)(v13 + 21) & 0x80) == 0)
          goto LABEL_26;
        v14 = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 8);
        v15 = *(_QWORD *)(*(_QWORD *)(v14 + 40) + 8);
        if (*(_QWORD *)(v15 + 1272) == v14)
          v13 = *(_QWORD *)(v15 + 1944);
        if ((*(_BYTE *)(v13 + 45) & 0x10) != 0)
        {
          v16 = *(WebCore::RenderLayerBacking **)(*(_QWORD *)(v13 + 144) + 256);
          if (v16)
          {
            v17 = WebCore::RenderLayerBacking::childForSuperlayersExcludingViewTransitions(v16);
            v8 = (WTF::StringImpl *)v17;
            v18 = *(unsigned int *)(a2 + 12);
            if ((_DWORD)v18 == *(_DWORD *)(a2 + 8))
            {
              WTF::Vector<WTF::Ref<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaSourceHandle&>(a2, v17);
            }
            else
            {
              v19 = *(_QWORD *)a2;
              ++*(_DWORD *)(v17 + 8);
              *(_QWORD *)(v19 + 8 * v18) = v17;
              *(_DWORD *)(a2 + 12) = v18 + 1;
            }
          }
          goto LABEL_26;
        }
        __break(0xC471u);
LABEL_34:
        JUMPOUT(0x1963FB7DCLL);
      }
    }
  }
  return result;
}

uint64_t WebCore::OrderedNamedElementsMap::find(uint64_t result, uint64_t a2)
{
  int v2;
  unsigned int i;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v2 = 0;
    for (i = *(_DWORD *)(a2 + 16) >> 8; ; i = v2 + v4)
    {
      v4 = i & *(_DWORD *)(result - 8);
      v5 = *(_QWORD *)(result + 16 * v4);
      if (v5 != -1)
      {
        if (!v5)
          return 0;
        if (v5 == a2)
          break;
      }
      ++v2;
    }
    if ((_DWORD)v4 == *(_DWORD *)(result - 4))
      return 0;
    return *(_QWORD *)(result + 16 * v4 + 8);
  }
  return result;
}

uint64_t WebCore::RenderLayer::setSubsequentLayersNeedCompositingRequirementsTraversal(uint64_t this)
{
  int v1;

  *(_DWORD *)(this + 12) |= 0x20u;
  if ((*(_BYTE *)(this + 24) & 4) != 0)
  {
    this = *(_QWORD *)(this + 40);
    if (this)
    {
LABEL_4:
      do
      {
        v1 = *(_DWORD *)(this + 12);
        if ((v1 & 1) != 0)
          break;
        *(_DWORD *)(this + 12) = v1 | 1;
        if ((*(_BYTE *)(this + 24) & 4) == 0)
        {
          while (1)
          {
            this = *(_QWORD *)(this + 40);
            if (!this)
              return this;
            if ((*(_BYTE *)(this + 24) & 0x4A) != 0)
              goto LABEL_9;
          }
        }
        this = *(_QWORD *)(this + 40);
LABEL_9:
        ;
      }
      while (this);
    }
  }
  else
  {
    while (1)
    {
      this = *(_QWORD *)(this + 40);
      if (!this)
        break;
      if ((*(_BYTE *)(this + 24) & 0x4A) != 0)
        goto LABEL_4;
    }
  }
  return this;
}

uint64_t WebCore::clearBackingSharingWithinStackingContext(WebCore::RenderLayer **this, WebCore::RenderLayer **a2, WebCore::RenderLayer *a3)
{
  uint64_t result;
  WebCore::RenderLayer *v6;
  WebCore::RenderLayer *i;
  WebCore::RenderLayer *v8;

  result = WebCore::RenderLayer::establishesTopLayer((WebCore::RenderLayer *)a2);
  if ((result & 1) == 0 && (a2 == this || ((_BYTE)a2[3] & 0x4A) == 0))
  {
    for (i = a2[8]; i; i = (WebCore::RenderLayer *)*((_QWORD *)i + 7))
    {
      result = *((_QWORD *)i + 32);
      if (result)
        result = WebCore::RenderLayerBacking::clearBackingSharingLayers((void **)result);
      v8 = a2[26];
      if (!v8 || *((WebCore::RenderLayer **)v8 + 18) != i)
        result = WebCore::clearBackingSharingWithinStackingContext((WebCore *)this, i, v6);
    }
  }
  return result;
}

uint64_t WebCore::rendererForCompositingTests(uint64_t this, const WebCore::RenderLayer *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(this + 46) == 30)
  {
    v2 = *(_QWORD *)(this + 32);
    if (v2)
    {
      this = *(_QWORD *)(v2 + 8);
      if (this && (*(_BYTE *)(this + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1963FC7F4);
      }
    }
    else
    {
      return 0;
    }
  }
  return this;
}

float WebCore::RenderGeometryMap::absoluteRect(WebCore::RenderGeometryMap *this, const WebCore::FloatRect *a2)
{
  float v3[8];

  WebCore::RenderGeometryMap::mapToContainer(this, a2, 0, v3);
  return WebCore::FloatQuad::boundingBox((WebCore::FloatQuad *)v3);
}

WebCore::RenderLayerCompositor *WebCore::RenderLayerCompositor::addDescendantsToOverlapMapRecursive(WebCore::RenderLayerCompositor *this, WebCore::LayerOverlapMap *a2, const WebCore::RenderLayer *a3, const WebCore::RenderLayer *a4, __n128 a5, __n128 a6)
{
  WebCore::RenderLayerCompositor *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  WebCore::RenderLayerCompositor *v33;
  uint64_t v34;
  const WebCore::RenderLayer **v35;
  uint64_t v36;
  const WebCore::RenderLayer *v37;
  uint64_t v38;
  const WebCore::RenderLayer **v39;
  uint64_t v40;
  const WebCore::RenderLayer *v41;
  uint64_t v42;
  const WebCore::RenderLayer **v43;
  uint64_t v44;
  const WebCore::RenderLayer *v45;
  _QWORD v46[2];
  WTF *v47;
  uint64_t v48;
  _DWORD v49[14];

  if (*((_BYTE *)this + 132))
  {
    if ((*((_BYTE *)a3 + 25) & 8) != 0)
    {
      v9 = this;
      v10 = *((_QWORD *)a3 + 4);
      v11 = *(_QWORD *)(v10 + 32);
      if ((!v11 || (v12 = *(_QWORD *)(v11 + 8)) == 0 || (*(_BYTE *)(*(_QWORD *)(v12 + 104) + 239) & 0x18) == 0)
        && ((*(_BYTE *)(v10 + 23) & 0x10) == 0 || (*(_BYTE *)(v10 + 52) & 7) != 1 || (*(_BYTE *)(v10 + 53) & 2) == 0))
      {
        if (a4)
        {
          WebCore::RenderGeometryMap::pushMappingsToAncestor((WebCore::LayerOverlapMap *)((char *)a2 + 32), (WTF **)a3, a4, 1, a5, a6);
          v46[0] = 0;
          v46[1] = 0;
          v47 = (WTF *)v49;
          v48 = 2;
          v49[12] = 0;
          WebCore::RenderLayerCompositor::addToOverlapMap((uint64_t)v9, a2, (uint64_t)a3, (uint64_t)v46, COERCE_DOUBLE(2));
          this = v47;
          if (v49 != (_DWORD *)v47)
          {
            if (v47)
            {
              v47 = 0;
              LODWORD(v48) = 0;
              this = (WebCore::RenderLayerCompositor *)WTF::fastFree(this, a2);
            }
          }
        }
        v13 = *((_QWORD *)a3 + 12);
        if (v13)
        {
          v34 = *(unsigned int *)(v13 + 12);
          if ((_DWORD)v34)
          {
            v35 = *(const WebCore::RenderLayer ***)v13;
            v36 = 8 * v34;
            do
            {
              v37 = *v35++;
              this = (WebCore::RenderLayerCompositor *)WebCore::RenderLayerCompositor::addDescendantsToOverlapMapRecursive(v9, a2, v37, a3);
              v36 -= 8;
            }
            while (v36);
          }
        }
        v14 = *((_QWORD *)a3 + 13);
        if (v14)
        {
          v38 = *(unsigned int *)(v14 + 12);
          if ((_DWORD)v38)
          {
            v39 = *(const WebCore::RenderLayer ***)v14;
            v40 = 8 * v38;
            do
            {
              v41 = *v39++;
              this = (WebCore::RenderLayerCompositor *)WebCore::RenderLayerCompositor::addDescendantsToOverlapMapRecursive(v9, a2, v41, a3);
              v40 -= 8;
            }
            while (v40);
          }
        }
        v15 = *((_QWORD *)a3 + 11);
        if (v15)
        {
          v42 = *(unsigned int *)(v15 + 12);
          if ((_DWORD)v42)
          {
            v43 = *(const WebCore::RenderLayer ***)v15;
            v44 = 8 * v42;
            do
            {
              v45 = *v43++;
              this = (WebCore::RenderLayerCompositor *)WebCore::RenderLayerCompositor::addDescendantsToOverlapMapRecursive(v9, a2, v45, a3);
              v44 -= 8;
            }
            while (v44);
          }
        }
        if (a4)
        {
          v16 = *((_DWORD *)a2 + 17);
          if (v16)
          {
            v17 = *((_QWORD *)a4 + 4);
            do
            {
              v18 = v16 - 1;
              v19 = *((_QWORD *)a2 + 7);
              v20 = *(_QWORD *)(v19 + 32 * v18);
              if (v20 == v17)
                break;
              if (*(_BYTE *)(v20 + 46) != 49)
              {
                v21 = v19 + 32 * v18;
                v22 = *((_DWORD *)a2 + 274);
                v23 = *(_DWORD *)(v21 + 8);
                v24 = __OFSUB__(v22, v23);
                v25 = v22 - v23;
                v26 = (v22 >> 31) + 0x7FFFFFFF;
                if (!v24)
                  v26 = v25;
                *((_DWORD *)a2 + 274) = v26;
                v27 = *((_DWORD *)a2 + 275);
                v28 = *(_DWORD *)(v21 + 12);
                v24 = __OFSUB__(v27, v28);
                v29 = v27 - v28;
                v30 = (v27 >> 31) + 0x7FFFFFFF;
                if (v24)
                  v29 = v30;
                *((_DWORD *)a2 + 275) = v29;
              }
              v31 = v19 + 32 * v18;
              if (*(_BYTE *)(v31 + 25))
                --*((_DWORD *)a2 + 10);
              v33 = *(WebCore::RenderLayerCompositor **)(v31 + 16);
              v32 = (_QWORD *)(v31 + 16);
              this = v33;
              if (v33)
                --*((_DWORD *)a2 + 11);
              if (*(_BYTE *)(v19 + 32 * v18 + 26))
                --*((_DWORD *)a2 + 12);
              *v32 = 0;
              if (this)
                this = (WebCore::RenderLayerCompositor *)WTF::fastFree(this, a2);
              *((_DWORD *)a2 + 17) = v18;
              --v16;
            }
            while ((_DWORD)v18);
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderLayerCompositor::updateScrollLayerPosition(WebCore::RenderLayerCompositor *this)
{
  int32x2_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  float v10;
  float v11;

  v2 = *(int32x2_t **)(*((_QWORD *)this + 1) + 248);
  v3 = (*(uint64_t (**)(int32x2_t *, _QWORD, uint64_t))(*(_QWORD *)&v2[8] + 832))(v2 + 8, 0, 1);
  v4 = *((_QWORD *)this + 31);
  v10 = (float)-(int)v3;
  v11 = (float)-HIDWORD(v3);
  result = (*(uint64_t (**)(uint64_t, float *))(*(_QWORD *)v4 + 128))(v4, &v10);
  v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 144);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 256);
    if (v7)
    {
      if (*(_BYTE *)(v7 + 294))
      {
        v8 = *(_QWORD *)(v7 + 88);
        if (v8)
        {
          v9 = WebCore::LocalFrameView::scrollPositionForFixedPosition(v2);
          v10 = (float)(int)v9 * 0.015625;
          v11 = (float)SHIDWORD(v9) * 0.015625;
          return (*(uint64_t (**)(uint64_t, float *))(*(_QWORD *)v8 + 128))(v8, &v10);
        }
      }
    }
  }
  return result;
}

double WebCore::RenderLayerCompositor::rootLayerConfigurationChanged(WebCore::RenderLayerCompositor *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  char *v4;
  double v5;
  double result;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 144);
  v2 = *(_QWORD *)(v1 + 256);
  if (v2 && *(_BYTE *)(v2 + 290))
  {
    *(_DWORD *)(v1 + 12) |= 0x80u;
    if ((*(_BYTE *)(v1 + 24) & 4) != 0)
    {
      v1 = *(_QWORD *)(v1 + 40);
      if (v1)
      {
LABEL_6:
        do
        {
          v3 = *(_DWORD *)(v1 + 12);
          if ((v3 & 2) != 0)
            break;
          *(_DWORD *)(v1 + 12) = v3 | 2;
          if ((*(_BYTE *)(v1 + 24) & 4) == 0)
          {
            while (1)
            {
              v1 = *(_QWORD *)(v1 + 40);
              if (!v1)
                goto LABEL_7;
              if ((*(_BYTE *)(v1 + 24) & 0x4A) != 0)
                goto LABEL_12;
            }
          }
          v1 = *(_QWORD *)(v1 + 40);
LABEL_12:
          ;
        }
        while (v1);
      }
    }
    else
    {
      while (1)
      {
        v1 = *(_QWORD *)(v1 + 40);
        if (!v1)
          break;
        if ((*(_BYTE *)(v1 + 24) & 0x4A) != 0)
          goto LABEL_6;
      }
    }
LABEL_7:
    if ((*((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL) == 0
      || (result = *(double *)((*((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
    {
      v4 = (char *)this + 16;
      *((_QWORD *)this + 5) = 0;
      WTF::MonotonicTime::now(this);
      WebCore::TimerBase::setNextFireTime((uint64_t)v4, v5 + 0.0);
    }
  }
  return result;
}

uint64_t WebCore::RenderLayerCompositor::updateCompositingForLayerTreeAsTextDump(WebCore::RenderLayerCompositor *this)
{
  uint64_t v2;
  void *v3;
  WebCore::Frame *RenderedChild;
  void *v5;
  WebCore::Frame *v6;
  uint64_t v7;
  WebCore::RenderView *v8;
  WebCore::RenderLayerCompositor *v9;
  char *v10;
  _QWORD *v11;
  WebCore::RenderLayerCompositor *v12;
  WebCore::RenderLayerCompositor *v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 248);
  WebCore::LocalFrameView::updateLayoutAndStyleIfNeededRecursive((_DWORD *)v2, (void *)8);
  WebCore::RenderLayerCompositor::applyToCompositedLayerIncludingDescendants<WebCore::RenderLayerCompositor::updateEventRegions(void)::$_0>(*(_QWORD *)(*((_QWORD *)this + 1) + 144));
  RenderedChild = WebCore::FrameTree::firstRenderedChild((WebCore::FrameTree *)(*(_QWORD *)(v2 + 328) + 48), v3);
  if (RenderedChild)
  {
LABEL_2:
    v6 = RenderedChild;
    while (1)
    {
      do
      {
        if (!*((_BYTE *)v6 + 144))
        {
          v7 = *((_QWORD *)v6 + 37);
          if (v7)
          {
            v8 = *(WebCore::RenderView **)(v7 + 1944);
            if (v8)
            {
              v9 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v8 + 50);
              if (!v9)
              {
                v12 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
                v9 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v12, v8);
                v13 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v8 + 50);
                *((_QWORD *)v8 + 50) = v9;
                if (v13)
                {
                  WebCore::RenderLayerCompositor::~RenderLayerCompositor(v13);
                  WTF::fastFree(v14, v15);
                  v9 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v8 + 50);
                }
              }
              WebCore::RenderLayerCompositor::applyToCompositedLayerIncludingDescendants<WebCore::RenderLayerCompositor::updateEventRegions(void)::$_0>(*(_QWORD *)(*((_QWORD *)v9 + 1) + 144));
            }
          }
        }
        v10 = (char *)v6 + 48;
        v6 = WebCore::FrameTree::firstRenderedChild((WebCore::Frame *)((char *)v6 + 48), v5);
      }
      while (v6);
      v11 = *(_QWORD **)(*(_QWORD *)v10 + 8);
      if (!v11)
        break;
      v6 = (WebCore::Frame *)v11[9];
      if (!v6)
      {
LABEL_18:
        while (1)
        {
          v16 = v11[7];
          if (!v16)
            goto LABEL_22;
          v11 = *(_QWORD **)(v16 + 8);
          if (!v11)
            goto LABEL_22;
          RenderedChild = WebCore::FrameTree::nextRenderedSibling((WebCore::FrameTree *)(v11 + 6));
          if (RenderedChild)
            goto LABEL_2;
        }
      }
      while (*((_BYTE *)v6 + 144) || !WebCore::Frame::ownerRenderer(v6))
      {
        v6 = (WebCore::Frame *)*((_QWORD *)v6 + 9);
        if (!v6)
        {
          v11 = *(_QWORD **)(*(_QWORD *)v10 + 8);
          goto LABEL_18;
        }
      }
    }
  }
LABEL_22:
  result = WebCore::RenderLayerCompositor::updateCompositingLayers((unint64_t)this, 1u, 0);
  if (*((_QWORD *)this + 28))
  {
    WebCore::RenderLayerCompositor::flushPendingLayerChanges((uint64_t *)this, 1);
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8) + 40)
                                                                                            + 8)
                                                                                + 528)
                                                                    + 8)
                                                        + 24)
                                            + 8)
                                + 48)
                    + 16);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 1016))(v18);
  }
  return result;
}

WTF::StringImpl *WebCore::RenderLayerCompositor::layerTreeAsText@<X0>(uint64_t a1@<X0>, unsigned __int16 a2@<W1>, WTF::StringImpl **a3@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  char v26;
  int v27;
  __int16 v28;
  int v29;

  WebCore::RenderLayerCompositor::updateCompositingForLayerTreeAsTextDump((WebCore::RenderLayerCompositor *)a1);
  result = *(WTF::StringImpl **)(a1 + 224);
  if (!result)
  {
    *a3 = 0;
    return result;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 1;
  v27 = 0;
  v28 = 257;
  v29 = 0;
  WebCore::GraphicsLayer::dumpLayer((uint64_t)result, (WTF::TextStream *)&v23, a2);
  WTF::TextStream::release((WTF::TextStream *)&v23);
  v8 = v24;
  v24 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  if (!*(_DWORD *)(a1 + 200))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 256);
      if (v10)
      {
        v11 = *(_BYTE *)(v10 + 290) && (a2 & 4) == 0;
        if (v11 && (a2 & 0x400) == 0)
        {
          v13 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
          if (*MEMORY[0x1E0CBF738])
            *(_DWORD *)v13 += 2;
          result = v22;
          v22 = v13;
          if (result)
          {
            if (*(_DWORD *)result == 2)
            {
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
              if ((a2 & 8) == 0)
                goto LABEL_25;
              goto LABEL_30;
            }
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  if ((a2 & 8) == 0)
  {
LABEL_25:
    *a3 = v22;
    return result;
  }
LABEL_30:
  result = WebCore::LocalFrameView::trackedRepaintRectsAsText(*(WebCore::LocalFrameView **)(*(_QWORD *)(a1 + 8) + 248));
  if (v22)
    *(_DWORD *)v22 += 2;
  if (v21)
  {
    v15 = *((_DWORD *)v21 + 1);
    if (v22)
    {
LABEL_34:
      v16 = *((_DWORD *)v22 + 1);
      goto LABEL_35;
    }
  }
  else
  {
    v15 = 0;
    if (v22)
      goto LABEL_34;
  }
  v16 = 0;
LABEL_35:
  if ((v16 | v15) < 0)
    goto LABEL_64;
  v17 = (v15 + v16);
  if (__OFADD__(v15, v16))
    goto LABEL_64;
  if (v21)
  {
    v18 = *((_DWORD *)v21 + 4);
    v19 = (v18 >> 2) & 1;
    if (!v22 || (v18 & 4) == 0)
    {
LABEL_41:
      result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v17, v19, (uint64_t)v21, (uint64_t)v22, a3);
      if (*a3)
      {
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v14);
          else
            *(_DWORD *)v22 -= 2;
        }
        goto LABEL_45;
      }
LABEL_65:
      __break(0xC471u);
      return result;
    }
LABEL_40:
    v19 = (*((unsigned __int8 *)v22 + 16) >> 2) & 1;
    goto LABEL_41;
  }
  if (v22)
    goto LABEL_40;
  if (!(_DWORD)v17)
  {
    v20 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_62;
  }
  if ((v17 & 0x80000000) != 0
    || (result = (WTF::StringImpl *)WTF::tryFastCompactMalloc((WTF *)(v17 + 20)), (v20 = v23) == 0))
  {
LABEL_64:
    *a3 = 0;
    goto LABEL_65;
  }
  *(_DWORD *)v23 = 2;
  *((_DWORD *)v20 + 1) = v17;
  *((_QWORD *)v20 + 1) = (char *)v20 + 20;
  *((_DWORD *)v20 + 4) = 4;
LABEL_62:
  *a3 = v20;
LABEL_45:
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v14);
    else
      *(_DWORD *)v21 -= 2;
  }
  result = v22;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v22, v14);
    else
      *(_DWORD *)v22 -= 2;
  }
  return result;
}

uint64_t WebCore::RenderLayerCompositor::platformLayerTreeAsText@<X0>(WebCore::RenderLayerCompositor *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, _BYTE *a4@<X8>)
{
  uint64_t result;
  uint64_t v8;

  result = WebCore::RenderLayerCompositor::updateCompositingForLayerTreeAsTextDump(a1);
  if ((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_4;
  if ((*(_BYTE *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    goto LABEL_10;
  if ((*(_BYTE *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x15) & 0x80) == 0)
  {
LABEL_4:
    LOBYTE(v8) = 0;
LABEL_8:
    *a4 = 0;
    goto LABEL_9;
  }
  if ((*(_BYTE *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 0x10) == 0)
  {
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x1963FD14CLL);
  }
  v8 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x90) + 256);
  if (!v8)
    goto LABEL_8;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v8 + 72) + 776))(*(_QWORD *)(v8 + 72), a3);
  LOBYTE(v8) = 1;
LABEL_9:
  a4[8] = v8;
  return result;
}

uint64_t WebCore::RenderLayerCompositor::attachWidgetContentLayersIfNecessary(WebCore::RenderWidget &)::$_0::operator()(uint64_t **a1, _DWORD *a2, int a3)
{
  uint64_t v3;
  int v4;
  void *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _DWORD *v14;
  void *v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;

  v3 = **a1;
  v4 = *(_DWORD *)(v3 + 196);
  if (a3)
  {
    if (!v4)
      goto LABEL_33;
    if (v4 != 1 || **(_DWORD ***)(v3 + 184) != a2)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 912))(**a1);
      v8 = *(WTF **)(v3 + 184);
      v9 = *(unsigned int *)(v3 + 196);
      if ((_DWORD)v9)
      {
        v10 = 8 * v9;
        v11 = 8 * v9;
        v12 = *(uint64_t **)(v3 + 184);
        do
        {
          v13 = *v12++;
          *(_QWORD *)(v13 + 200) = 0;
          v11 -= 8;
        }
        while (v11);
        if (*(_DWORD *)(v3 + 192))
        {
          do
          {
            v14 = *(_DWORD **)v8;
            *(_QWORD *)v8 = 0;
            if (v14)
            {
              if (v14[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
              else
                --v14[2];
            }
            v8 = (WTF *)((char *)v8 + 8);
            v10 -= 8;
          }
          while (v10);
          *(_DWORD *)(v3 + 196) = 0;
          v8 = *(WTF **)(v3 + 184);
          goto LABEL_31;
        }
      }
      else if (*(_DWORD *)(v3 + 192))
      {
LABEL_31:
        if (v8)
        {
          *(_QWORD *)(v3 + 184) = 0;
          *(_DWORD *)(v3 + 192) = 0;
          WTF::fastFree(v8, v7);
        }
      }
LABEL_33:
      v24 = **a1;
      ++a2[2];
      v26 = a2;
      (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v24 + 64))(v24, &v26);
      v25 = v26;
      v26 = 0;
      if (v25)
      {
        if (v25[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 16))(v25);
        else
          --v25[2];
      }
      return 1;
    }
    return 0;
  }
  if (!v4)
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 912))(**a1);
  v16 = *(WTF **)(v3 + 184);
  v17 = *(unsigned int *)(v3 + 196);
  if ((_DWORD)v17)
  {
    v18 = 8 * v17;
    v19 = 8 * v17;
    v20 = *(uint64_t **)(v3 + 184);
    do
    {
      v21 = *v20++;
      *(_QWORD *)(v21 + 200) = 0;
      v19 -= 8;
    }
    while (v19);
    if (*(_DWORD *)(v3 + 192))
    {
      do
      {
        v22 = *(_DWORD **)v16;
        *(_QWORD *)v16 = 0;
        if (v22)
        {
          if (v22[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 16))(v22);
          else
            --v22[2];
        }
        v16 = (WTF *)((char *)v16 + 8);
        v18 -= 8;
      }
      while (v18);
      *(_DWORD *)(v3 + 196) = 0;
      v16 = *(WTF **)(v3 + 184);
      goto LABEL_28;
    }
  }
  else if (*(_DWORD *)(v3 + 192))
  {
LABEL_28:
    if (v16)
    {
      *(_QWORD *)(v3 + 184) = 0;
      *(_DWORD *)(v3 + 192) = 0;
      WTF::fastFree(v16, v15);
    }
  }
  return 1;
}

uint64_t WebCore::RenderLayerCompositor::isLayerForPluginWithScrollCoordinatedContents(WebCore::RenderLayerCompositor *this, const WebCore::RenderLayer *a2)
{
  uint64_t result;
  int v4;

  if (*((_BYTE *)this + 46) != 7)
    return 0;
  ++*((_DWORD *)this + 4);
  result = WebCore::RenderEmbeddedObject::usesAsyncScrolling(this);
  v4 = *((_DWORD *)this + 4);
  if (v4)
  {
    *((_DWORD *)this + 4) = v4 - 1;
  }
  else
  {
    result = 286;
    __break(0xC471u);
  }
  return result;
}

void WebCore::RenderLayerCompositor::recursiveRepaintLayer(WebCore::RenderLayerCompositor *this, WebCore::RenderLayer *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::RenderLayer **v9;
  uint64_t v10;
  WebCore::RenderLayer *v11;
  uint64_t v12;
  WebCore::RenderLayer **v13;
  uint64_t v14;
  WebCore::RenderLayer *v15;
  uint64_t v16;
  WebCore::RenderLayer **v17;
  uint64_t v18;
  WebCore::RenderLayer *v19;

  WebCore::RenderLayer::updateLayerListsIfNeeded(a2);
  v4 = *((_QWORD *)a2 + 32);
  if (v4 && *(_BYTE *)(v4 + 291))
    WebCore::RenderLayer::setBackingNeedsRepaint(a2, 1);
  if ((*((_BYTE *)a2 + 27) & 4) != 0)
  {
    v5 = *((_QWORD *)a2 + 12);
    if (v5)
    {
      v12 = *(unsigned int *)(v5 + 12);
      if ((_DWORD)v12)
      {
        v13 = *(WebCore::RenderLayer ***)v5;
        v14 = 8 * v12;
        do
        {
          v15 = *v13++;
          WebCore::RenderLayerCompositor::recursiveRepaintLayer(this, v15);
          v14 -= 8;
        }
        while (v14);
      }
    }
    v6 = *((_QWORD *)a2 + 11);
    if (v6)
    {
      v16 = *(unsigned int *)(v6 + 12);
      if ((_DWORD)v16)
      {
        v17 = *(WebCore::RenderLayer ***)v6;
        v18 = 8 * v16;
        do
        {
          v19 = *v17++;
          WebCore::RenderLayerCompositor::recursiveRepaintLayer(this, v19);
          v18 -= 8;
        }
        while (v18);
      }
    }
  }
  v7 = *((_QWORD *)a2 + 13);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 + 12);
    if ((_DWORD)v8)
    {
      v9 = *(WebCore::RenderLayer ***)v7;
      v10 = 8 * v8;
      do
      {
        v11 = *v9++;
        WebCore::RenderLayerCompositor::recursiveRepaintLayer(this, v11);
        v10 -= 8;
      }
      while (v10);
    }
  }
}

uint64_t WebCore::RenderLayerCompositor::applyToCompositedLayerIncludingDescendants<WebCore::RenderLayerCompositor::invalidateEventRegionForAllLayers(void)::$_0>(uint64_t result)
{
  uint64_t v1;
  uint64_t i;

  v1 = result;
  if (*(_QWORD *)(result + 256))
    result = WebCore::RenderLayer::invalidateEventRegion(result, 1);
  for (i = *(_QWORD *)(v1 + 64); i; i = *(_QWORD *)(i + 56))
    result = WebCore::RenderLayerCompositor::applyToCompositedLayerIncludingDescendants<WebCore::RenderLayerCompositor::invalidateEventRegionForAllLayers(void)::$_0>(i);
  return result;
}

WebCore::RenderLayer *WebCore::RenderLayerCompositor::clearBackingForAllLayers(WebCore::RenderLayerCompositor *this)
{
  return WebCore::RenderLayerCompositor::applyToCompositedLayerIncludingDescendants<WebCore::RenderLayerCompositor::clearBackingForAllLayers(void)::$_0>(*(WebCore::RenderLayer **)(*((_QWORD *)this + 1) + 144));
}

WebCore::RenderLayer *WebCore::RenderLayerCompositor::applyToCompositedLayerIncludingDescendants<WebCore::RenderLayerCompositor::clearBackingForAllLayers(void)::$_0>(WebCore::RenderLayer *result)
{
  WebCore::RenderLayer *v1;
  uint64_t i;

  v1 = result;
  if (*((_QWORD *)result + 32))
    result = WebCore::RenderLayer::clearBacking(result);
  for (i = *((_QWORD *)v1 + 8); i; i = *(_QWORD *)(i + 56))
    result = (WebCore::RenderLayer *)WebCore::RenderLayerCompositor::applyToCompositedLayerIncludingDescendants<WebCore::RenderLayerCompositor::clearBackingForAllLayers(void)::$_0>(i);
  return result;
}

uint64_t WebCore::RenderLayerCompositor::layerHas3DContent(WebCore::RenderLayerCompositor *this, const WebCore::RenderLayer *a2)
{
  WebCore *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const WebCore::RenderLayer **v11;
  uint64_t v12;
  uint64_t v13;
  const WebCore::RenderLayer **v14;
  uint64_t v15;
  uint64_t v16;
  const WebCore::RenderLayer **v17;
  uint64_t v18;
  const WebCore::RenderLayer *v19;
  uint64_t v20;

  v3 = *(WebCore **)(*((_QWORD *)a2 + 4) + 88);
  v4 = *((_QWORD *)v3 + 5);
  if ((*(_DWORD *)(v4 + 636) & 0x380) == 0x80
    || *(float *)(v4 + 260) != -1.0
    || (WebCore::styleHas3DTransformOperation(v3, a2) & 1) != 0)
  {
    return 1;
  }
  WebCore::RenderLayer::updateLayerListsIfNeeded(a2);
  v7 = *((_QWORD *)a2 + 12);
  if (v7)
  {
    v10 = *(unsigned int *)(v7 + 12);
    if ((_DWORD)v10)
    {
      v11 = *(const WebCore::RenderLayer ***)v7;
      v12 = 8 * v10;
      while ((WebCore::RenderLayerCompositor::layerHas3DContent(this, *v11) & 1) == 0)
      {
        ++v11;
        v12 -= 8;
        if (!v12)
          goto LABEL_7;
      }
      return 1;
    }
  }
LABEL_7:
  v8 = *((_QWORD *)a2 + 11);
  if (v8)
  {
    v13 = *(unsigned int *)(v8 + 12);
    if ((_DWORD)v13)
    {
      v14 = *(const WebCore::RenderLayer ***)v8;
      v15 = 8 * v13;
      while ((WebCore::RenderLayerCompositor::layerHas3DContent(this, *v14) & 1) == 0)
      {
        ++v14;
        v15 -= 8;
        if (!v15)
          goto LABEL_8;
      }
      return 1;
    }
  }
LABEL_8:
  v9 = *((_QWORD *)a2 + 13);
  if (!v9)
    return 0;
  v16 = *(unsigned int *)(v9 + 12);
  if (!(_DWORD)v16)
    return 0;
  v17 = *(const WebCore::RenderLayer ***)v9;
  v18 = 8 * v16 - 8;
  do
  {
    v19 = *v17++;
    result = WebCore::RenderLayerCompositor::layerHas3DContent(this, v19);
    if ((result & 1) != 0)
      break;
    v20 = v18;
    v18 -= 8;
  }
  while (v20);
  return result;
}

BOOL WebCore::RenderLayerCompositor::requiresCompositingForTransform(WebCore::RenderLayerCompositor *this, WebCore::RenderLayerModelObject *a2)
{
  int v3;
  WebCore::RenderLayerModelObject *v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  BOOL v33;
  int v34;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  BOOL v47;
  unsigned int v48;
  int v49;
  BOOL v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  double *v54;
  BOOL v55;

  if ((*((_BYTE *)this + 128) & 1) == 0)
    return 0;
  v3 = *((_DWORD *)a2 + 5);
  if ((v3 & 0x20000) == 0)
    return 0;
  v5 = a2;
  if ((*((_BYTE *)a2 + 45) & 2) != 0)
    v5 = *(WebCore::RenderLayerModelObject **)(*((_QWORD *)a2 + 4) + 8);
  v6 = *((_QWORD *)v5 + 11);
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 40) + 20))
  {
    v20 = *(_QWORD **)(v6 + 40);
    if (!v20[41] && !v20[38] && !v20[39] && !v20[40] && (v3 & 0x100000) == 0)
      return 0;
  }
  if ((*((_BYTE *)a2 + 45) & 1) == 0)
  {
    v7 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
    if (v7)
    {
      v8 = *(_WORD *)(v7 + 28);
      if ((v8 & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1963FD8D0);
      }
      if ((v8 & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::canvasTag + 24))
      {
        v22 = *(_DWORD *)(v7 + 120);
        v21 = *(_DWORD *)(v7 + 124);
        if (v22 < 0)
          v22 = -v22;
        if (v21 < 0)
          v21 = -v21;
        v23 = v21 * (unint64_t)v22;
        if ((v23 & 0xFFFFFFFF00000000) == 0 && v23 >> 3 < 0x271)
          goto LABEL_35;
      }
    }
  }
  if (*((_BYTE *)this + 133))
  {
LABEL_35:
    v24 = *((_QWORD *)a2 + 11);
    v25 = *(_QWORD *)(v24 + 32);
    v26 = *(_QWORD *)(v25 + 40);
    v27 = *(_QWORD **)(v26 + 8);
    v28 = *(unsigned int *)(v26 + 20);
    v29 = 8 * v28;
    if ((_DWORD)v28)
    {
      v30 = 8 * v28;
      v31 = v27;
      while (1)
      {
        v32 = *(unsigned __int8 *)(*v31 + 12);
        v33 = v32 > 0x14;
        v34 = (1 << v32) & 0x1DE0C0;
        if (!v33 && v34 != 0)
          break;
        ++v31;
        v30 -= 8;
        if (!v30)
          goto LABEL_43;
      }
    }
    else
    {
LABEL_43:
      v36 = *(_QWORD **)(v24 + 40);
      v37 = v36[40];
      if (!v37
        || ((v45 = *(unsigned __int8 *)(v37 + 12), v33 = v45 > 0x14, v46 = (1 << v45) & 0x1DE0C0, !v33)
          ? (v47 = v46 == 0)
          : (v47 = 1),
            v47))
      {
        v38 = v36[39];
        if (!v38
          || ((v48 = *(unsigned __int8 *)(v38 + 12), v33 = v48 > 0x14, v49 = (1 << v48) & 0x1DE0C0, !v33)
            ? (v50 = v49 == 0)
            : (v50 = 1),
              v50))
        {
          v39 = v36[38];
          if (!v39
            || ((v40 = *(unsigned __int8 *)(v39 + 12), v33 = v40 > 0x14, v41 = (1 << v40) & 0x1DE0C0, !v33)
              ? (v42 = v41 == 0)
              : (v42 = 1),
                v42))
          {
LABEL_70:
            if ((_DWORD)v28)
            {
              while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v27 + 88))(*v27) & 1) != 0)
              {
                ++v27;
                v29 -= 8;
                if (!v29)
                {
                  v24 = *((_QWORD *)a2 + 11);
                  goto LABEL_74;
                }
              }
              return 1;
            }
LABEL_74:
            v51 = *(_QWORD **)(v24 + 40);
            v52 = v51[40];
            if (v52)
            {
              if (*(_BYTE *)(v52 + 36))
                v55 = *(_BYTE *)(v52 + 36) == 11;
              else
                v55 = 1;
              if (v55)
                return 1;
              if (*(_BYTE *)(v52 + 38))
              {
                if (*(float *)(v52 + 32) != 0.0)
                  return 1;
              }
              else if (*(_DWORD *)(v52 + 32))
              {
                return 1;
              }
            }
            v53 = v51[39];
            if (v53 && *(double *)(v53 + 32) != 1.0)
              return 1;
            v54 = (double *)v51[38];
            if (v54 && (v54[2] != 0.0 || v54[3] != 0.0))
              return v54[5] != 0.0;
            return 0;
          }
        }
      }
    }
    if (*(_DWORD *)(*(_QWORD *)(v25 + 32) + 20))
      return 1;
    goto LABEL_70;
  }
  v9 = *((_QWORD *)a2 + 11);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 40);
  v11 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(v10 + 8);
    v13 = 8 * v11;
    do
    {
      v14 = *(unsigned __int8 *)(*(_QWORD *)v12 + 12) - 6;
      if (v14 < 0xF && ((0x7783u >> v14) & 1) != 0)
        return 1;
      v12 += 8;
      v13 -= 8;
    }
    while (v13);
  }
  v15 = *(_QWORD **)(v9 + 40);
  v16 = v15[40];
  if (!v16 || (v43 = *(unsigned __int8 *)(v16 + 12) - 6, v43 >= 0xF) || ((0x7783u >> v43) & 1) == 0)
  {
    v17 = v15[39];
    if (!v17 || (v44 = *(unsigned __int8 *)(v17 + 12) - 6, v44 >= 0xF) || ((0x7783u >> v44) & 1) == 0)
    {
      v18 = v15[38];
      if (v18)
      {
        v19 = *(unsigned __int8 *)(v18 + 12);
        if (v19 < 0x15)
          return (0x1DE0C0u >> v19) & 1;
      }
      return 0;
    }
  }
  return 1;
}

uint64_t WebCore::RenderLayerCompositor::requiresCompositingForVideo(WebCore::RenderLayerCompositor *this, WebCore::RenderLayerModelObject *a2)
{
  uint64_t result;
  int v4;
  WebCore::RenderLayerCompositor *v5;

  result = 0;
  if ((*((_BYTE *)this + 128) & 2) != 0 && *((_BYTE *)a2 + 46) == 48)
  {
    v5 = this;
    ++*((_DWORD *)a2 + 4);
    result = ((WebCore::RenderVideo::requiresImmediateCompositing(a2) & 1) != 0
           || WebCore::RenderVideo::shouldDisplayVideo(a2))
          && *((_BYTE *)v5 + 132)
          && (WebCore::RenderVideo::supportsAcceleratedRendering(a2) & 1) != 0;
    v4 = *((_DWORD *)a2 + 4);
    if (v4)
    {
      *((_DWORD *)a2 + 4) = v4 - 1;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebCore::RenderLayerCompositor::requiresCompositingForFrame(uint64_t a1, _BYTE *a2)
{
  uint64_t isComposited;
  unint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  if ((*(_BYTE *)(a1 + 52) & 7) != 3 || (*(_BYTE *)(a1 + 53) & 4) == 0)
    return 0;
  ++*(_DWORD *)(a1 + 224);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 104) + 239) & 4) != 0
    || (*(_BYTE *)(a1 + 120) & 0x30) != 0
    || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1696))(a1))
  {
    isComposited = 0;
  }
  else if (*a2)
  {
    v7 = WebCore::RenderBox::contentBoxRect((WebCore::RenderBox *)a1);
    if ((int)v7 <= 0)
      v10 = -(-(int)v7 & 0x3F);
    else
      v10 = v7 & 0x3F;
    if (SHIDWORD(v7) <= 0)
      v11 = -(-HIDWORD(v7) & 0x3F);
    else
      v11 = BYTE4(v7) & 0x3F;
    v12 = v10 + v8;
    if (__OFADD__(v10, v8))
      v12 = (v10 >> 31) + 0x7FFFFFFF;
    v13 = v11 + v9;
    v14 = (v11 >> 31) + 0x7FFFFFFF;
    if (__OFADD__(v11, v9))
      v13 = (v11 >> 31) + 0x7FFFFFFF;
    v15 = v13 / 64 - ((int)(v11 + 32) >> 6) + ((int)(v13 - (v12 & 0xFFFFFFC0) + 32) >> 6);
    isComposited = v12 / 64 - ((int)(v10 + 32) >> 6) + ((int)(v12 - (v14 & 0xFFFFFFC0) + 32) >> 6) > 0 && v15 > 0;
  }
  else
  {
    a2[8] = 1;
    isComposited = WebCore::RenderObject::isComposited((WebCore::RenderObject *)a1);
  }
  if (*(_DWORD *)(a1 + 224) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  else
    --*(_DWORD *)(a1 + 224);
  return isComposited;
}

uint64_t WebCore::RenderLayerCompositor::requiresCompositingForPlugin(char a1, WebCore::RenderEmbeddedObject *this, _BYTE *a3)
{
  uint64_t result;
  const WebCore::LayoutRect *v6;
  int v7;
  int v8;
  _QWORD v11[2];

  result = 0;
  if ((a1 & 4) != 0 && *((_BYTE *)this + 46) == 7)
  {
    result = WebCore::RenderEmbeddedObject::requiresAcceleratedCompositing(this);
    if ((_DWORD)result)
    {
      if ((*((_BYTE *)this + 52) & 7) != 3 || (*((_BYTE *)this + 53) & 4) == 0)
      {
        result = 96;
        __break(0xC471u);
      }
      else if ((*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) != 0 || (*((_BYTE *)this + 120) & 0x30) != 0)
      {
        return 0;
      }
      else if (*a3)
      {
        v11[0] = WebCore::RenderBox::contentBoxRect(this);
        v11[1] = v6;
        WebCore::snappedIntRect((WebCore *)v11, v6);
        return v8 * v7 > 1;
      }
      else
      {
        a3[8] = 1;
        return WebCore::RenderObject::isComposited(this);
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderLayerCompositor::requiresCompositingForOverflowScrolling(uint64_t a1, _BYTE *a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;

  result = *(_QWORD *)(a1 + 264);
  if (result)
  {
    result = WebCore::RenderLayerScrollableArea::canUseCompositedScrolling((WebCore::RenderLayerScrollableArea *)result);
    if ((_DWORD)result)
    {
      if (*a2)
      {
        result = *(_QWORD *)(a1 + 264);
        if (!result)
          return result;
        WebCore::RenderLayerScrollableArea::computeHasCompositedScrollableOverflow(result, 1);
        v5 = *(_QWORD *)(a1 + 264);
        if (!v5)
          return 0;
        v6 = *(_BYTE *)(v5 + 79) == 0;
      }
      else
      {
        a2[8] = 1;
        v6 = *(_QWORD *)(a1 + 256) == 0;
      }
      return !v6;
    }
  }
  return result;
}

uint64_t WebCore::RenderLayerCompositor::reasonsForCompositing(WebCore::RenderLayerCompositor *this, const WebCore::RenderLayer *a2)
{
  uint64_t v4;
  unsigned int v5;
  const WebCore::RenderLayer *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore *v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)();
  uint64_t (*v24)();
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int i;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[4];
  int v37;
  __int16 v38;

  if (!*((_QWORD *)a2 + 32))
    return 0;
  v36[0] = 1;
  v37 = 0;
  v38 = 0;
  v4 = WebCore::rendererForCompositingTests(*((_QWORD *)a2 + 4), a2);
  v5 = WebCore::RenderLayerCompositor::requiresCompositingForTransform(this, (WebCore::RenderLayerModelObject *)v4);
  if (WebCore::RenderLayerCompositor::requiresCompositingForVideo(this, (WebCore::RenderLayerModelObject *)v4))
  {
    v5 |= 2u;
  }
  else if (WebCore::RenderLayerCompositor::requiresCompositingForCanvas(this, (WebCore::RenderLayerModelObject *)v4))
  {
    v5 |= 4u;
  }
  else if (*(_BYTE *)(v4 + 46) == 24)
  {
    v5 |= 0x8000000u;
  }
  else if (WebCore::RenderLayerCompositor::requiresCompositingForPlugin(*((_DWORD *)this + 32), (WebCore::RenderEmbeddedObject *)v4, v36))
  {
    v5 |= 8u;
  }
  else if (WebCore::RenderLayerCompositor::requiresCompositingForFrame(v4, v36))
  {
    v5 |= 0x10u;
  }
  if (*((_BYTE *)this + 132) && (*((_BYTE *)this + 128) & 1) != 0)
    v5 |= (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 40) + 636) >> 5) & 0x20;
  if (WebCore::RenderLayerCompositor::requiresCompositingForAnimation(this, (WebCore::RenderLayerModelObject *)v4))v5 |= 0x80u;
  v8 = *(_QWORD *)(v4 + 88);
  v9 = *(_QWORD *)(v8 + 40);
  if (*(_DWORD *)(*(_QWORD *)(v9 + 72) + 20)
    || (*((_BYTE *)this + 128) & 0x20) != 0 && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 32) + 20))
  {
    v5 |= 0x100u;
  }
  v10 = *(_QWORD *)(v9 + 200);
  if (v10)
  {
    if (*(_BYTE *)(v10 + 33))
    {
      v11 = *(WebCore **)(v4 + 144);
      if ((!v11 || WebCore::isDescendantOfFullScreenLayer(v11, v7) != 1)
        && !*((_BYTE *)this + 133)
        && ((*(_BYTE *)(v4 + 45) & 4) != 0
         || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 40) + 200) + 34)))
      {
        v5 |= 0x1000000u;
      }
    }
  }
  if (WebCore::RenderLayerCompositor::requiresCompositingForPosition(this, (WebCore::RenderObject *)v4, *(_QWORD *)(v4 + 144), v36))
  {
    if ((*(_DWORD *)(v4 + 20) & 0x1800000) == 0x1000000)
    {
      v13 = v4;
      if ((*(_BYTE *)(v4 + 45) & 2) != 0)
        v13 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8);
      if ((*(_QWORD *)(v13 + 96) & 0x380000) == 0x300000)
        v12 = 512;
      else
        v12 = 1024;
    }
    else
    {
      v12 = 1024;
    }
    v5 |= v12;
  }
  if (WebCore::RenderLayerCompositor::requiresCompositingForOverflowScrolling(*(_QWORD *)(v4 + 144), v36))
    v14 = v5 | 0x800;
  else
    v14 = v5;
  v15 = *(_QWORD *)(*(_QWORD *)(v4 + 144) + 24);
  switch((v15 >> 35) & 0xF)
  {
    case 1uLL:
      v14 |= 0x40u;
      goto LABEL_79;
    case 2uLL:
      v14 |= 0x1000u;
      goto LABEL_79;
    case 3uLL:
      v14 |= 0x4000u;
      goto LABEL_79;
    case 4uLL:
      v14 |= 0x2000u;
      goto LABEL_79;
    case 5uLL:
      v14 |= 0x8000u;
      goto LABEL_79;
    case 6uLL:
      v16 = *(_DWORD *)(v4 + 20);
      if ((v16 & 0x20000) != 0)
      {
        v17 = v4;
        if ((*(_BYTE *)(v4 + 45) & 2) != 0)
          v17 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8);
        v18 = *(_QWORD *)(v17 + 88);
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 32) + 40) + 20)
          || (v19 = *(_QWORD **)(v18 + 40), v19[41])
          || v19[38]
          || v19[39]
          || v19[40]
          || (v16 & 0x100000) != 0)
        {
          v14 |= 0x10000u;
        }
      }
      v20 = *(_QWORD *)(v4 + 88);
      v21 = *(_QWORD *)(v20 + 32);
      if (*(float *)(v21 + 4) < 1.0)
        v14 |= 0x20000u;
      v22 = *(_QWORD *)(v21 + 48);
      v23 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
      if (*(_QWORD *)(v22 + 8))
      {
        while (!*(_QWORD *)(v22 + 16))
        {
          v22 = *(_QWORD *)(v22 + 8);
          if (!v22)
            goto LABEL_59;
        }
      }
      else
      {
        if (*(_QWORD *)(v22 + 16))
          v24 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
        else
          v24 = 0;
        if (!v24)
        {
LABEL_59:
          if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 40) + 216) + 8))
            v23 = 0;
          if (!v23)
            goto LABEL_63;
        }
      }
      v14 |= 0x40000u;
LABEL_63:
      if ((v16 & 0x4000) != 0)
      {
        v28 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
        v29 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
        v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
        v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
        v32 = v28 & ((v31 >> 31) ^ v31);
        for (i = 1; ; ++i)
        {
          v34 = v32;
          v35 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v32);
          if (v35 != -1 && *(_QWORD *)(v35 + 8) == v4)
            break;
          v32 = (v34 + i) & v28;
        }
        if (**(_BYTE **)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v34 + 8))
          v14 |= 0x80000u;
      }
      if (*(_DWORD *)(*(_QWORD *)(v21 + 32) + 20) || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 40) + 72) + 20))
        v14 |= 0x100000u;
      v25 = *((_QWORD *)a2 + 3);
      if ((v25 & 0x20) != 0)
        v14 = v14 & 0xEFFFFFFF | (((v25 >> 4) & 1) << 28);
      v26 = v14 | 0x4000000;
      if ((v25 & 0xA) == 0)
        v26 = v14;
      if ((v25 & 0x400000000000) != 0)
        v14 = v26;
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 88) + 40) + 636) & 0x1F00000) != 0x100000)
        v14 |= 0x200000u;
      if (*(_QWORD *)(*(_QWORD *)(v20 + 40) + 264))
        v14 |= 0x40u;
      goto LABEL_79;
    case 7uLL:
      v14 |= 0x400000u;
      goto LABEL_79;
    case 8uLL:
      v14 |= 0x800000u;
      goto LABEL_79;
    default:
LABEL_79:
      v27 = (v15 & 1) << 25;
      if (!*((_BYTE *)this + 195))
        v27 = 0;
      return v14 | v27;
  }
}

BOOL WebCore::canUseDescendantClippingLayer(unint64_t this, const WebCore::RenderLayer *a2)
{
  _BOOL8 result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;

  if ((this & 0x400000000000) != 0 && (this & 0xA) != 0)
    return 0;
  result = 1;
  if ((*((_BYTE *)a2 + 45) & 4) != 0
    && a2
    && (*((_DWORD *)a2 + 5) & 0x1800000) == 0x1000000
    && ((*(unsigned int *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 40) + 642) << 16)) << 32)) & 0x20000000000000) != 0)
  {
    v3 = *((_QWORD *)a2 + 20);
    v9 = 0;
    v4 = WebCore::RenderBox::clipRect(a2, (const WebCore::LayoutPoint *)&v9, 0);
    v6 = v5;
    v8[0] = v4;
    v8[1] = v5;
    v9 = 0;
    v10 = v3;
    WebCore::LayoutRect::intersect((int *)&v9, (const WebCore::LayoutRect *)v8);
    return v4 == v9 && v6 == v10;
  }
  return result;
}

uint64_t WebCore::RenderLayerCompositor::asyncScrollableContainerNodeID(WebCore::RenderLayerCompositor *this, const WebCore::RenderObject *a2)
{
  WebCore::RenderLayerCompositor *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BOOL4 canContainFixedPositionObjects;
  uint64_t v11;
  uint64_t v12;

  v2 = this;
  if ((*((_BYTE *)this + 45) & 0x10) == 0)
  {
    v3 = *((_QWORD *)this + 4);
    if (!v3)
      return v3;
    v2 = *(WebCore::RenderLayerCompositor **)(v3 + 8);
    if (!v2)
      return 0;
    while ((*((_BYTE *)v2 + 45) & 0x10) == 0)
    {
      v4 = *((_QWORD *)v2 + 4);
      if (!v4)
        return 0;
      v3 = 0;
      v2 = *(WebCore::RenderLayerCompositor **)(v4 + 8);
      if (!v2)
        return v3;
    }
  }
  while ((*((_BYTE *)v2 + 21) & 0x80) == 0)
  {
    do
    {
      v3 = *((_QWORD *)v2 + 4);
      if (!v3)
        return v3;
      v2 = *(WebCore::RenderLayerCompositor **)(v3 + 8);
      if (!v2)
        return 0;
    }
    while ((*((_BYTE *)v2 + 45) & 0x10) == 0);
  }
  v5 = *((_QWORD *)v2 + 18);
  if (!v5)
    return 0;
  if ((*((_BYTE *)this + 21) & 0x80) != 0 || (v6 = *(_QWORD *)(v5 + 256)) == 0 || (v3 = *(_QWORD *)(v6 + 224)) == 0)
  {
    if ((*(_BYTE *)(v5 + 24) & 4) != 0)
    {
      v8 = *(_QWORD *)(v5 + 40);
      v7 = v8;
      if (!v8)
        return 0;
    }
    else
    {
      v7 = v5;
      do
        v7 = *(_QWORD *)(v7 + 40);
      while (v7 && (*(_BYTE *)(v7 + 24) & 0x4A) == 0);
      v8 = *(_QWORD *)(v5 + 40);
      if (!v8)
        return 0;
    }
    v9 = (*(_DWORD *)(*(_QWORD *)(v5 + 32) + 96) >> 19) & 7;
    while (1)
    {
      if (v9 == 6)
      {
        canContainFixedPositionObjects = WebCore::RenderElement::canContainFixedPositionObjects(*(WebCore::RenderElement **)(v8 + 32));
        if (!canContainFixedPositionObjects)
          goto LABEL_30;
      }
      else if (v9 == 2)
      {
        canContainFixedPositionObjects = WebCore::RenderElement::canContainAbsolutelyPositionedObjects(*(WebCore::RenderElement **)(v8 + 32));
        if (!canContainFixedPositionObjects)
          goto LABEL_30;
      }
      else
      {
        canContainFixedPositionObjects = 1;
      }
      v11 = *(_QWORD *)(v8 + 264);
      if (v11 && *(_BYTE *)(v11 + 79))
      {
        v12 = *(_QWORD *)(v8 + 256);
        if (v12)
          return *(_QWORD *)(v12 + 224);
        return 0;
      }
LABEL_30:
      if (canContainFixedPositionObjects)
        v9 = (*(_DWORD *)(*(_QWORD *)(v8 + 32) + 96) >> 19) & 7;
      if (v8 == v7)
      {
        v7 = v8;
        if ((*(_BYTE *)(v8 + 24) & 4) != 0)
        {
          v7 = *(_QWORD *)(v8 + 40);
        }
        else
        {
          do
            v7 = *(_QWORD *)(v7 + 40);
          while (v7 && (*(_BYTE *)(v7 + 24) & 0x4A) == 0);
        }
      }
      v8 = *(_QWORD *)(v8 + 40);
      if (!v8)
        return 0;
    }
  }
  return v3;
}

uint64_t WebCore::styleHas3DTransformOperation(WebCore *this, const WebCore::RenderStyle *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  v2 = *(_QWORD *)(*((_QWORD *)this + 4) + 40);
  v3 = *(unsigned int *)(v2 + 20);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD *)(v2 + 8);
    v5 = 8 * v3;
    do
    {
      v6 = *(unsigned __int8 *)(*(_QWORD *)v4 + 12) - 6;
      if (v6 < 0xF && ((0x7783u >> v6) & 1) != 0)
        return 1;
      v4 += 8;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (_QWORD *)*((_QWORD *)this + 5);
  v8 = v7[40];
  if (v8)
  {
    v12 = *(unsigned __int8 *)(v8 + 12) - 6;
    if (v12 < 0xF && ((0x7783u >> v12) & 1) != 0)
      return 1;
  }
  v9 = v7[39];
  if (v9)
  {
    v13 = *(unsigned __int8 *)(v9 + 12) - 6;
    if (v13 < 0xF && ((0x7783u >> v13) & 1) != 0)
      return 1;
  }
  v10 = v7[38];
  if (v10 && (v14 = *(unsigned __int8 *)(v10 + 12), v14 < 0x15))
    return (0x1DE0C0u >> v14) & 1;
  else
    return 0;
}

uint64_t WebCore::isDescendantOfFullScreenLayer(WebCore *this, const WebCore::RenderLayer *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  WebCore *v12;
  void *v13;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  WebCore *v18;
  WTF *v19;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 8) + 40) + 8)
                 + 1992);
  if (!v2)
    return 2;
  v3 = *(_DWORD *)(v2 + 8) + 1;
  *(_DWORD *)(v2 + 8) = v3;
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8);
  v5 = *(_QWORD **)(v4 + 3096);
  if (v5)
  {
    v9 = 0;
    v10 = (_QWORD *)(v4 + 3104);
    do
    {
      if (v9)
        v11 = v9 + 1;
      else
        v11 = v10;
      v9 = (_QWORD *)*v11;
      v6 = *v9;
      if ((*(_BYTE *)(*v9 + 54) & 0x40) != 0)
        break;
      v6 = 0;
    }
    while (v9 != v5);
  }
  else
  {
    v6 = 0;
  }
  if (*(_QWORD *)(v2 + 56))
  {
    v17 = v2;
    v18 = this;
    if (!v6)
      goto LABEL_15;
    v8 = *(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v8)
      goto LABEL_15;
    if ((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1963FE734);
    }
    if ((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 0x10) == 0
      || (v12 = *(WebCore **)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x90)) == 0)
    {
LABEL_15:
      result = 2;
      goto LABEL_6;
    }
    WebCore::RenderElement::backdropRenderer(v8, &v19);
    if (v19 && (v16 = *((_QWORD *)v19 + 1)) != 0 && v16 == *((_QWORD *)v18 + 4))
    {
      v15 = 0;
    }
    else
    {
      if (v12 == v18)
      {
        v15 = 0;
      }
      else
      {
        do
          v18 = (WebCore *)*((_QWORD *)v18 + 5);
        while (v18 != v12 && v18 != 0);
        v15 = v18 == 0;
      }
      if (!v19)
        goto LABEL_35;
    }
    if (*(_DWORD *)v19 == 1)
      WTF::fastFree(v19, v13);
    else
      --*(_DWORD *)v19;
LABEL_35:
    v2 = v17;
    v3 = *(_DWORD *)(v17 + 8);
    result = v15;
    goto LABEL_6;
  }
  result = 2;
LABEL_6:
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x1963FE638);
  }
  *(_DWORD *)(v2 + 8) = v3 - 1;
  return result;
}

BOOL WebCore::RenderLayerCompositor::isAsyncScrollableStickyLayer(WebCore::RenderLayerCompositor *this, const WebCore::RenderLayer *a2, const WebCore::RenderLayer **a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  if (a2)
  {
    while (1)
    {
      v4 = *((_QWORD *)a2 + 4);
      if ((*(_BYTE *)(v4 + 22) & 1) != 0)
      {
        if ((*(_BYTE *)(v4 + 45) & 2) != 0)
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8);
        v5 = *(_QWORD *)(v4 + 96) & 0x1C00;
        if (v5 != 2048)
        {
          if (v5)
            break;
        }
      }
      a2 = (const WebCore::RenderLayer *)*((_QWORD *)a2 + 5);
      if (!a2)
        goto LABEL_15;
    }
    v6 = *((_QWORD *)a2 + 33);
    if (!v6 || !*(_BYTE *)(v6 + 79))
      return 0;
    if (a3)
      *a3 = a2;
    return 1;
  }
LABEL_15:
  v8 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8) + 40) + 8)
                                                                                                 + 528)
                                                                                     + 8)
                                                                         + 24)
                                                             + 8));
  if (v8
    && ((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(*((_QWORD *)this + 1) + 248)) & 1) != 0)
  {
    return 1;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 248) + 328);
  return *(_QWORD *)(*(_QWORD *)(v9 + 632) + 8) == v9;
}

uint64_t WebCore::RenderLayerCompositor::layerScrollBehahaviorRelativeToCompositedAncestor(WebCore::RenderLayerCompositor *this, const WebCore::RenderLayer *a2, const WebCore::RenderLayer *a3)
{
  uint64_t v3;
  WebCore::RenderLayerCompositor *v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  WebCore::WillChangeData *v11;
  uint64_t v12;
  WebCore::WillChangeData *v13;
  int v14;
  uint64_t v15;
  char v16;
  int v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  _BOOL4 v24;
  int v25;
  int v26;
  char v28;
  int isAtomicInlineLevelBox;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const WebCore::RenderLayer *v36;
  const WebCore::RenderLayer *v37;
  const WebCore::RenderLayer *v38;
  WebCore::RenderLayerCompositor *v39;
  WebCore::RenderLayerCompositor *v40;
  WebCore::RenderLayerCompositor *v41;
  WebCore::RenderLayerCompositor *v42;
  WebCore::RenderLayerCompositor *v43;
  WebCore::RenderLayerCompositor *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;

  v3 = *((_QWORD *)this + 3);
  if ((v3 & 0x10000000) == 0)
    return 0;
  if ((v3 & 4) != 0)
  {
    v5 = *((_QWORD *)this + 5);
    v4 = (WebCore::RenderLayerCompositor *)v5;
  }
  else
  {
    v4 = this;
    do
      v4 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v4 + 5);
    while (v4 && (*((_BYTE *)v4 + 24) & 0x4A) == 0);
    v5 = *((_QWORD *)this + 5);
  }
  if (v5)
  {
    v6 = (*(_DWORD *)(*((_QWORD *)this + 4) + 96) >> 19) & 7;
    do
    {
      if (v6 == 6)
      {
        v8 = *(_QWORD *)(v5 + 32);
        v9 = *(unsigned __int8 *)(v8 + 46);
        if (v9 == 49
          || ((*(_BYTE *)(v8 + 45) & 0x40) != 0 || (v9 - 36) <= 4 && v9 != 38)
          && (*(_BYTE *)(v8 + 22) & 2) != 0
          || (v12 = *(_QWORD *)(*(_QWORD *)(v8 + 88) + 40), *(_DWORD *)(*(_QWORD *)(v12 + 72) + 20))
          && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8))
        {
LABEL_44:
          v14 = 1;
          goto LABEL_45;
        }
        if ((*(_BYTE *)(v8 + 45) & 0x40) != 0)
        {
          v13 = *(WebCore::WillChangeData **)(v12 + 200);
          if (v13)
          {
            v48 = v6;
            v45 = v5;
            v39 = this;
            v42 = v4;
            v33 = *(_QWORD *)(v5 + 32);
            v36 = a2;
            if ((WebCore::WillChangeData::createsContainingBlockForOutOfFlowPositioned(v13, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8)) & 1) != 0)goto LABEL_81;
LABEL_77:
            v8 = v33;
            a2 = v36;
            v9 = *(unsigned __int8 *)(v33 + 46);
            this = v39;
            v4 = v42;
            v5 = v45;
            v6 = v48;
          }
        }
      }
      else
      {
        if (v6 != 2)
          goto LABEL_44;
        v8 = *(_QWORD *)(v5 + 32);
        v9 = *(unsigned __int8 *)(v8 + 46);
        if (v9 == 49 || (*(_BYTE *)(v8 + 98) & 0x38) != 0)
          goto LABEL_44;
        if (((*(_BYTE *)(v8 + 45) & 0x40) != 0 || (v9 - 36) <= 4 && v9 != 38)
          && (*(_BYTE *)(v8 + 22) & 2) != 0)
        {
          goto LABEL_44;
        }
        v10 = *(_QWORD *)(*(_QWORD *)(v8 + 88) + 40);
        if (*(_DWORD *)(*(_QWORD *)(v10 + 72) + 20))
        {
          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8))
            goto LABEL_44;
        }
        if ((*(_BYTE *)(v8 + 45) & 0x40) != 0)
        {
          v11 = *(WebCore::WillChangeData **)(v10 + 200);
          if (v11)
          {
            v48 = v6;
            v45 = v5;
            v39 = this;
            v42 = v4;
            v33 = *(_QWORD *)(v5 + 32);
            v36 = a2;
            v28 = WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(v11, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8));
            if ((v28 & 1) != 0)
            {
LABEL_81:
              v14 = 1;
              a2 = v36;
              this = v39;
              v4 = v42;
              v5 = v45;
              v6 = v48;
              goto LABEL_45;
            }
            goto LABEL_77;
          }
        }
      }
      v14 = 1;
      if (v9 == 67 || v9 == 90)
        goto LABEL_45;
      v15 = *(_QWORD *)(*(_QWORD *)(v8 + 88) + 40);
      v16 = *(_BYTE *)(v15 + 462);
      v17 = *(_BYTE *)(v15 + 642) & 3;
      v18 = v16 | 0x19;
      if (v17 == 1)
        v16 |= 0x15u;
      if (v17 == 2)
        v19 = v18;
      else
        v19 = v16;
      if ((v19 & 3) != 0)
      {
        if ((*(_BYTE *)(v8 + 20) & 1) != 0)
          goto LABEL_84;
        v37 = a2;
        v40 = this;
        v34 = v8;
        v43 = v4;
        v46 = v5;
        v49 = v6;
        isAtomicInlineLevelBox = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v8);
        v6 = v49;
        v5 = v46;
        v8 = v34;
        a2 = v37;
        v30 = isAtomicInlineLevelBox;
        this = v40;
        v4 = v43;
        if (v30)
        {
LABEL_84:
          if ((*(_QWORD *)(v8 + 96) & 0x1FLL) != 0x19)
          {
            if (*(unsigned __int8 *)(v8 + 46) - 36 > 4)
            {
              v14 = 1;
              goto LABEL_45;
            }
            v14 = *(_BYTE *)(v8 + 52) & 7;
            if (v14 == 1)
              goto LABEL_45;
          }
        }
      }
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 88) + 40) + 636) & 0xC0000) == 0)
        goto LABEL_42;
      if ((*(_BYTE *)(v8 + 20) & 1) == 0)
      {
        v38 = a2;
        v41 = this;
        v35 = v8;
        v44 = v4;
        v47 = v5;
        v50 = v6;
        v31 = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v8);
        v6 = v50;
        v5 = v47;
        v8 = v35;
        a2 = v38;
        v32 = v31;
        this = v41;
        v4 = v44;
        if (!v32)
          goto LABEL_42;
      }
      if ((*(_QWORD *)(v8 + 96) & 0x1FLL) == 0x19
        || (v26 = *(unsigned __int8 *)(v8 + 46), (v26 - 36) <= 4) && v26 != 36)
      {
LABEL_42:
        if ((const WebCore::RenderLayer *)v5 == a2)
          break;
        goto LABEL_11;
      }
      v14 = v26 != 35 && v26 != 63;
LABEL_45:
      if ((const WebCore::RenderLayer *)v5 == a2 || !v14)
      {
        if ((const WebCore::RenderLayer *)v5 == a2)
          break;
      }
      else
      {
        v20 = *(_QWORD *)(v5 + 264);
        if (v20 && *(_BYTE *)(v20 + 79))
          return 1;
      }
      if (v14)
        v6 = (*(_DWORD *)(*(_QWORD *)(v5 + 32) + 96) >> 19) & 7;
LABEL_11:
      if ((WebCore::RenderLayerCompositor *)v5 == v4)
      {
        v4 = (WebCore::RenderLayerCompositor *)v5;
        if ((*(_BYTE *)(v5 + 24) & 4) != 0)
        {
          v4 = *(WebCore::RenderLayerCompositor **)(v5 + 40);
        }
        else
        {
          do
            v4 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v4 + 5);
          while (v4 && (*((_BYTE *)v4 + 24) & 0x4A) == 0);
        }
      }
      v5 = *(_QWORD *)(v5 + 40);
    }
    while (v5);
  }
  v21 = *((_QWORD *)this + 23);
  v22 = v21 != 0;
  v23 = *((_QWORD *)a2 + 24);
  v24 = v23 != 0;
  v25 = v21 != v23;
  if (!v22 || !v24)
    v25 = v22 ^ v24;
  if (v25)
    return 2;
  else
    return 0;
}

uint64_t WebCore::RenderLayerCompositor::computeCoordinatedPositioningForLayer(WebCore::RenderLayerCompositor *this, const WebCore::RenderLayer *a2, const WebCore::RenderLayer *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v8;
  BOOL v10;
  uint64_t v11;
  const WebCore::RenderLayer *v12;

  v3 = *((_QWORD *)a2 + 3);
  if ((v3 & 1) != 0)
    return 0;
  v6 = *((_QWORD *)a2 + 4);
  if ((*(_DWORD *)(v6 + 20) & 0x1800000) == 0x1000000)
  {
    if ((*(_BYTE *)(v6 + 45) & 2) != 0)
      v6 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8);
    v8 = *(_QWORD *)(v6 + 96) & 0x380000;
    v10 = (v3 & 0x800000) == 0 || v8 != 3145728;
    if ((v3 & 0x10000000) == 0 || !v10)
      return 0;
  }
  else if ((v3 & 0x10000000) == 0)
  {
    return 0;
  }
  v11 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8) + 40) + 8)
                                                                                                  + 528)
                                                                                      + 8)
                                                                          + 24)
                                                              + 8));
  if (!a3 || !v11)
    return 0;
  return WebCore::RenderLayerCompositor::layerScrollBehahaviorRelativeToCompositedAncestor(a2, a3, v12);
}

unint64_t WebCore::RenderLayerCompositor::paintContents(_QWORD *a1, uint64_t a2, WebCore::Scrollbar *a3, WebCore::FloatRect *a4)
{
  const WebCore::LayoutRect *v7;
  unint64_t result;
  const WebCore::Color *v9;
  CGFloat v10;
  uint64_t v11;
  uint64_t v12;
  int32x2_t v13[2];
  CGPoint v14;

  WebCore::LayoutRect::LayoutRect((int *)v13, a4);
  result = WebCore::snappedIntRect((WebCore *)v13, v7);
  *(_QWORD *)&v14.x = result;
  v14.y = v10;
  if (a1[33] == a2)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1[1] + 248) + 152);
    return WebCore::paintScrollbar(v11, a3, &v14, (const WebCore::IntRect *)(a1 + 37), v9);
  }
  if (a1[34] == a2)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1[1] + 248) + 160);
    return WebCore::paintScrollbar(v11, a3, &v14, (const WebCore::IntRect *)(a1 + 37), v9);
  }
  if (a1[35] == a2)
  {
    v12 = WebCore::ScrollView::scrollCornerRect(*(WebCore::ScrollView **)(a1[1] + 248));
    (*(void (**)(WebCore::Scrollbar *, uint64_t))(*(_QWORD *)a3 + 96))(a3, 1);
    (*(void (**)(WebCore::Scrollbar *, float, float))(*(_QWORD *)a3 + 648))(a3, (float)-(int)v12, (float)(int)((unint64_t)-(uint64_t)(v12 & 0xFFFFFFFF00000000) >> 32));
    v13[1] = *(int32x2_t *)&v14.y;
    v13[0].i32[0] = LODWORD(v14.x) + v12;
    v13[0].i32[1] = HIDWORD(v14.x) + HIDWORD(v12);
    WebCore::LocalFrameView::paintScrollCorner(*(WebCore::RenderElement ***)(a1[1] + 248), a3, v13);
    return (*(uint64_t (**)(WebCore::Scrollbar *, uint64_t))(*(_QWORD *)a3 + 104))(a3, 1);
  }
  return result;
}

BOOL WebCore::RenderLayerCompositor::supportsFixedRootBackgroundCompositing(WebCore::RenderLayerCompositor *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 144) + 256);
  return v1 && *(_BYTE *)(v1 + 290) != 0;
}

void WebCore::RenderLayerCompositor::computeFixedViewportConstraints(WebCore::RenderLayerCompositor *this, WebCore::RenderLayer *a2, uint64_t a3)
{
  double *v4;
  double v6;
  uint64_t v7;
  int32x4_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _BOOL4 v18;
  BOOL v19;
  int v20;

  v4 = *(double **)(*(_QWORD *)(a3 + 256) + 104);
  if (!v4)
  {
    *((_DWORD *)this + 4) = 0;
    *(_QWORD *)this = off_1E3403CE8;
    *((_QWORD *)this + 1) = 0;
    *(_QWORD *)((char *)this + 28) = 0;
    *(_QWORD *)((char *)this + 36) = 0;
    *(_QWORD *)((char *)this + 20) = 0;
    return;
  }
  *((_DWORD *)this + 4) = 0;
  *(_QWORD *)this = off_1E3403CE8;
  v6 = v4[7];
  *(double *)((char *)this + 36) = v6;
  WebCore::LocalFrameView::rectForFixedPositionLayout(*(WebCore::LocalFrameView **)(*((_QWORD *)a2 + 1) + 248), v6);
  v8.i64[0] = v7;
  v8.i64[1] = v9;
  *(float32x4_t *)((char *)this + 20) = vmulq_f32(vcvtq_f32_s32(v8), (float32x4_t)vdupq_n_s32(0x3C800000u));
  *((float *)this + 2) = (*(float (**)(double *))(*(_QWORD *)v4 + 672))(v4);
  *((_DWORD *)this + 3) = v10;
  v11 = *(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 88) + 24);
  v12 = v11[36];
  if (v11[36])
  {
    v13 = 1;
    *((_DWORD *)this + 4) = 1;
  }
  else
  {
    v13 = 0;
  }
  v14 = v11[20];
  if (v11[20])
  {
    v13 |= 2u;
    *((_DWORD *)this + 4) = v13;
  }
  v15 = v11[12];
  if (v11[12])
  {
    v13 |= 4u;
    *((_DWORD *)this + 4) = v13;
  }
  v16 = v11[28];
  v17 = v13 | 8;
  if (!v16)
    v17 = v13;
  if (!(v14 | v12))
  {
    v17 |= 1u;
    v18 = (v16 | v15) == 0;
LABEL_16:
    if (v18)
      v20 = v17 | 4;
    else
      v20 = v17;
    *((_DWORD *)this + 4) = v20;
    return;
  }
  v18 = (v16 | v15) == 0;
  if (v16)
    v19 = 1;
  else
    v19 = v15 == 0;
  if (v19)
    goto LABEL_16;
}

void WebCore::RenderLayerCompositor::computeStickyViewportConstraints(WebCore::RenderLayerCompositor *this, WebCore::RenderLayer *a2, uint64_t a3)
{
  double *v4;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  double v10;
  int v11;
  int v12;
  int v13;
  int v14;
  double v15;
  float v16;
  float v17;
  double v18;
  float v19;
  int v20;
  void (**v21)(WebCore::StickyPositionViewportConstraints *__hidden);
  unint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _DWORD v29[4];

  if ((*((_BYTE *)a2 + 45) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1963FF1DCLL);
  }
  v4 = *(double **)(a3 + 104);
  *((_DWORD *)this + 4) = 0;
  *(_QWORD *)this = off_1E34043D0;
  *((_QWORD *)this + 1) = 0;
  *(_OWORD *)((char *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  *(_OWORD *)((char *)this + 68) = 0u;
  *(_OWORD *)((char *)this + 84) = 0u;
  if (v4)
  {
    WebCore::RenderBoxModelObject::constrainingRectForStickyPosition(a2, 0.0);
    v21 = (void (**)(WebCore::StickyPositionViewportConstraints *__hidden))__PAIR64__(v7, v6);
    v22 = __PAIR64__(v9, v8);
    WebCore::RenderBoxModelObject::computeStickyPositionConstraints(a2, this, (const WebCore::FloatRect *)&v21);
    v10 = v4[7];
    *(double *)((char *)this + 92) = v10;
    WebCore::RenderBoxModelObject::constrainingRectForStickyPosition(a2, v10);
    v29[0] = v11;
    v29[1] = v12;
    v29[2] = v13;
    v29[3] = v14;
    v21 = off_1E34043D0;
    v22 = 0;
    v23 = 0;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    WebCore::RenderBoxModelObject::computeStickyPositionConstraints(a2, (WebCore::StickyPositionViewportConstraints *)&v21, (const WebCore::FloatRect *)v29);
    v15 = WebCore::StickyPositionViewportConstraints::computeStickyOffset((WebCore::StickyPositionViewportConstraints *)&v21, (const WebCore::FloatRect *)v29)* 64.0;
    if (v15 >= 2147483650.0)
    {
      v17 = 33554000.0;
    }
    else if (v15 <= -2147483650.0)
    {
      v17 = -33554000.0;
    }
    else
    {
      v17 = (float)(int)v15 * 0.015625;
    }
    v18 = v16 * 64.0;
    if (v18 >= 2147483650.0)
    {
      v19 = 33554000.0;
    }
    else if (v18 <= -2147483650.0)
    {
      v19 = -33554000.0;
    }
    else
    {
      v19 = (float)(int)v18 * 0.015625;
    }
    *((float *)this + 21) = v17;
    *((float *)this + 22) = v19;
    *((float *)this + 2) = (*(float (**)(double *))(*(_QWORD *)v4 + 672))(v4);
    *((_DWORD *)this + 3) = v20;
  }
}

void WebCore::RenderLayerCompositor::registerScrollingNodeID(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t *a6)
{
  unint64_t IdentifierInternal;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  char v22;
  char **v23;
  char *v24;

  if (a3)
  {
    IdentifierInternal = a3;
    goto LABEL_3;
  }
  if (WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    __break(0xC471u);
LABEL_26:
    __break(1u);
    return;
  }
  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  v20 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
  if (v20 != -1)
  {
    v24 = &v22;
    v23 = &v24;
    std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v23, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
  }
  if ((WebCore::Process::globalIdentifier & 1) == 0)
    goto LABEL_26;
  a4 = WebCore::Process::globalIdentifier;
LABEL_3:
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 248) + 328) + 632) + 8);
  v13 = *(_QWORD *)(v12 + 32);
  v14 = *(_QWORD *)(v12 + 40);
  if ((_DWORD)a5 == 1 && !*((_BYTE *)a6 + 16))
  {
    IdentifierInternal = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 232))(a2, v13, v14, 1, IdentifierInternal, a4);
  }
  else
  {
    if (*((_BYTE *)a6 + 16))
      v15 = a6[1];
    else
      v15 = 0;
    if (*((_BYTE *)a6 + 16))
      v16 = *a6;
    else
      v16 = 0;
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 240))(a2, v13, v14, a5, IdentifierInternal, a4, v16, v15, a6[3]);
    if (v17 != IdentifierInternal || v18 != a4)
    {
      v21 = v17;
      (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 256))(a2, IdentifierInternal, a4);
      WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::remove((WTF *)(a1 + 312), IdentifierInternal, a4);
      IdentifierInternal = v21;
    }
  }
  if (IdentifierInternal)
    ++a6[3];
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebCore::RenderLayer&>(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unint64_t *v21;
  uint64_t result;
  unint64_t v23;
  unint64_t *v24;
  int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  WTF *v37;

  v6 = a2;
  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a2, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = a3[1];
  v12 = (*a3 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*a3 - 1640531527) << 16) ^ ((unsigned __int16)*a3
                                                                                             - 1640531527);
  v13 = v12 + (unsigned __int16)WORD2(*a3) + (v12 >> 11);
  v14 = (*a3 >> 37) & 0x7FFF800 ^ (v13 << 16) ^ v13;
  v15 = (v11 >> 5) & 0x7FFF800 ^ ((v14 + (unsigned __int16)v11 + (v14 >> 11)) << 16) ^ (v14 + (unsigned __int16)v11 + (v14 >> 11));
  v16 = (v11 >> 37) & 0x7FFF800 ^ ((v15 + WORD2(v11) + (v15 >> 11)) << 16) ^ (v15 + WORD2(v11) + (v15 >> 11));
  v17 = (v16 + (v16 >> 11)) ^ (8 * (v16 + (v16 >> 11)));
  v18 = (v17 + (v17 >> 5)) ^ (4 * (v17 + (v17 >> 5)));
  v19 = (v18 + (v18 >> 15)) ^ ((v18 + (v18 >> 15)) << 10);
  if (!v19)
    v19 = 0x800000;
  v20 = v19 & v10;
  v21 = (unint64_t *)(v8 + 24 * (v19 & v10));
  result = *v21;
  v23 = v21[1];
  if (*(_OWORD *)v21 != 0)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      if (result == *a3 && v23 == v11)
      {
        if ((v9 & 1) != 0)
          v26 = 0;
        else
          v26 = *(_DWORD *)(v8 - 4);
        v27 = 0;
        v28 = v8 + 24 * v26;
        goto LABEL_12;
      }
      if (v23 == -1)
        v24 = v21;
      v20 = (v20 + v25) & v10;
      v21 = (unint64_t *)(v8 + 24 * v20);
      result = *v21;
      v23 = v21[1];
      ++v25;
      a2 = (uint64_t *)(*v21 | v23);
    }
    while (a2);
    if (v24)
    {
      *v24 = 0;
      v24[1] = 0;
      v24[2] = 0;
      --*(_DWORD *)(*v6 - 16);
      v21 = v24;
    }
  }
  *(_OWORD *)v21 = *(_OWORD *)a3;
  result = *a4;
  if (*a4)
    goto LABEL_19;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = a4;
  v37 = (WTF *)*a4;
  *a4 = result;
  if (!v37)
    goto LABEL_19;
  if (*(_DWORD *)v37 != 1)
  {
    --*(_DWORD *)v37;
LABEL_19:
    ++*(_DWORD *)result;
    goto LABEL_20;
  }
  WTF::fastFree(v37, a2);
  result = *a4;
  if (*a4)
    goto LABEL_19;
LABEL_20:
  v29 = (WTF *)v21[2];
  v21[2] = result;
  if (v29)
  {
    if (*(_DWORD *)v29 == 1)
      result = WTF::fastFree(v29, a2);
    else
      --*(_DWORD *)v29;
  }
  v30 = *v6;
  if (*v6)
    v31 = *(_DWORD *)(v30 - 12) + 1;
  else
    v31 = 1;
  *(_DWORD *)(v30 - 12) = v31;
  v32 = *v6;
  if (*v6)
    v33 = *(_DWORD *)(v32 - 12);
  else
    v33 = 0;
  v34 = (*(_DWORD *)(v32 - 16) + v33);
  v35 = *(unsigned int *)(v32 - 4);
  if (v35 > 0x400)
  {
    if (v35 > 2 * v34)
      goto LABEL_29;
    goto LABEL_34;
  }
  if (3 * v35 <= 4 * v34)
  {
    if (!(_DWORD)v35)
    {
      v36 = 8;
LABEL_40:
      result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(v6, v36, v21);
      v21 = (unint64_t *)result;
      v32 = *v6;
      if (*v6)
        LODWORD(v35) = *(_DWORD *)(v32 - 4);
      else
        LODWORD(v35) = 0;
      goto LABEL_29;
    }
LABEL_34:
    v36 = (_DWORD)v35 << (6 * *(_DWORD *)(v32 - 12) >= (2 * v35));
    goto LABEL_40;
  }
LABEL_29:
  v28 = v32 + 24 * v35;
  v27 = 1;
LABEL_12:
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v28;
  *(_BYTE *)(a1 + 16) = v27;
  return result;
}

WTF *WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::remove(WTF *result, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  void **v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v24;

  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v4 = (uint64_t *)result;
    v5 = *(_DWORD *)(v3 - 8);
    v6 = (a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)a2 - 1640531527) << 16) ^ ((unsigned __int16)a2
                                                                                            - 1640531527);
    v7 = (a2 >> 37) & 0x7FFF800 ^ ((v6 + WORD2(a2) + (v6 >> 11)) << 16) ^ (v6 + WORD2(a2) + (v6 >> 11));
    v8 = (a3 >> 5) & 0x7FFF800 ^ ((v7 + (unsigned __int16)a3 + (v7 >> 11)) << 16) ^ (v7
                                                                                                 + (unsigned __int16)a3
                                                                                                 + (v7 >> 11));
    v9 = (a3 >> 37) & 0x7FFF800 ^ ((v8 + WORD2(a3) + (v8 >> 11)) << 16) ^ (v8 + WORD2(a3) + (v8 >> 11));
    v10 = (v9 + (v9 >> 11)) ^ (8 * (v9 + (v9 >> 11)));
    v11 = (v10 + (v10 >> 5)) ^ (4 * (v10 + (v10 >> 5)));
    v12 = (v11 + (v11 >> 15)) ^ ((v11 + (v11 >> 15)) << 10);
    if (!v12)
      v12 = 0x800000;
    v13 = v5 & v12;
    v14 = (void **)(v3 + 24 * (v5 & v12));
    v15 = (unint64_t)*v14;
    v16 = (unint64_t)v14[1];
    if (*v14 != (void *)a2 || v16 != a3)
    {
      v24 = 1;
      while (v15 | v16)
      {
        v13 = (v13 + v24) & v5;
        v14 = (void **)(v3 + 24 * v13);
        v15 = (unint64_t)*v14;
        v16 = (unint64_t)v14[1];
        ++v24;
        if (*v14 == (void *)a2 && v16 == a3)
          goto LABEL_9;
      }
      v14 = (void **)(v3 + 24 * *(unsigned int *)(v3 - 4));
    }
LABEL_9:
    if ((void **)(v3 + 24 * *(unsigned int *)(v3 - 4)) != v14)
    {
      *(_OWORD *)v14 = xmmword_1968C18F0;
      result = (WTF *)v14[2];
      v14[2] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (WTF *)WTF::fastFree(result, (void *)a2);
        else
          --*(_DWORD *)result;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          return (WTF *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  return result;
}

WTF *WebCore::RenderLayerCompositor::detachScrollCoordinatedLayerWithRole(WebCore::RenderLayer &,WebCore::ScrollingCoordinator &,WebCore::ScrollCoordinationRole)::$_0::operator()(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  WTF *v7;
  WTF *v8;
  uint64_t *v9;
  void *v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  int v14;
  void *v15;
  WTF *result;
  __int128 v17;
  WTF *v18;
  int v19;
  unsigned int v20;

  (*(void (**)(WTF **__return_ptr, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a1 + 288))(&v18, a1, a3, a4);
  if (v20)
  {
    v7 = v18;
    v8 = (WTF *)((char *)v18 + 16 * v20);
    do
    {
      v17 = *(_OWORD *)v7;
      v9 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(a2 + 312), (uint64_t *)&v17);
      if (v9)
      {
        v11 = (WTF *)v9[2];
        if (v11)
        {
          v12 = (*(_DWORD *)v11)++;
          v13 = *((_QWORD *)v11 + 1);
          if (v13)
          {
            *(_DWORD *)(v13 + 12) |= 0x100u;
            if ((*(_BYTE *)(v13 + 24) & 4) != 0)
            {
              v13 = *(_QWORD *)(v13 + 40);
              if (v13)
              {
LABEL_9:
                do
                {
                  v14 = *(_DWORD *)(v13 + 12);
                  if ((v14 & 2) != 0)
                    break;
                  *(_DWORD *)(v13 + 12) = v14 | 2;
                  if ((*(_BYTE *)(v13 + 24) & 4) == 0)
                  {
                    while (1)
                    {
                      v13 = *(_QWORD *)(v13 + 40);
                      if (!v13)
                        goto LABEL_17;
                      if ((*(_BYTE *)(v13 + 24) & 0x4A) != 0)
                        goto LABEL_9;
                    }
                  }
                  v13 = *(_QWORD *)(v13 + 40);
                }
                while (v13);
              }
            }
            else
            {
              while (1)
              {
                v13 = *(_QWORD *)(v13 + 40);
                if (!v13)
                  break;
                if ((*(_BYTE *)(v13 + 24) & 0x4A) != 0)
                  goto LABEL_9;
              }
            }
          }
LABEL_17:
          if (v12)
            *(_DWORD *)v11 = v12;
          else
            WTF::fastFree(v11, v10);
        }
      }
      v7 = (WTF *)((char *)v7 + 16);
    }
    while (v7 != v8);
  }
  WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::remove((WTF *)(a2 + 312), a3, a4);
  result = v18;
  if (v18)
  {
    v18 = 0;
    v19 = 0;
    return (WTF *)WTF::fastFree(result, v15);
  }
  return result;
}

WTF *WTF::WeakHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderLayer>@<X0>(uint64_t a1@<X0>, WTF **a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v19;
  WTF *v20;
  void *v21;
  WTF *result;
  void *v23;
  WTF *v24;
  WTF *v25;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v9 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_28;
    }
    v10 = *(_DWORD *)(v8 - 4);
    if (!v10)
      goto LABEL_25;
    v11 = 0;
    v12 = v10 - 1;
    do
    {
      v13 = v12;
      v14 = *(WTF **)(v8 + 8 * v12);
      if ((unint64_t)v14 + 1 >= 2 && !*((_QWORD *)v14 + 1))
      {
        *(_QWORD *)(v8 + 8 * v12) = 0;
        if (*(_DWORD *)v14 == 1)
          WTF::fastFree(v14, a2);
        else
          --*(_DWORD *)v14;
        *(_QWORD *)(v8 + 8 * v12) = -1;
        ++v11;
      }
      --v12;
    }
    while (v13);
    v8 = *(_QWORD *)a1;
    if (v11)
    {
      *(_DWORD *)(v8 - 16) += v11;
      v15 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v16 = *(_DWORD *)(v15 - 12);
      else
        v16 = 0;
      *(_DWORD *)(v15 - 12) = v16 - v11;
      v8 = *(_QWORD *)a1;
    }
    if (!v8)
      goto LABEL_3;
    v17 = *(_DWORD *)(v8 - 4);
    if (v17 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v17)
    {
LABEL_25:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v8 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_28;
      }
    }
    v9 = *(_DWORD *)(v8 - 12);
    v19 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
    {
LABEL_29:
      *(_DWORD *)(a1 + 12) = 2 * v19;
      goto LABEL_30;
    }
LABEL_28:
    v19 = v9;
    goto LABEL_29;
  }
LABEL_30:
  v20 = *a2;
  if (!*a2)
  {
    v20 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v20 = 1;
    *((_QWORD *)v20 + 1) = a2;
    v24 = *a2;
    *a2 = v20;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
      {
        WTF::fastFree(v24, v23);
        v20 = *a2;
      }
      else
      {
        --*(_DWORD *)v24;
      }
    }
  }
  *(_DWORD *)v20 += 2;
  v25 = v20;
  WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add((uint64_t *)a1, &v25, a3);
  result = v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v21);
    else
      --*(_DWORD *)result;
  }
  if (*(_DWORD *)v20 == 1)
    return (WTF *)WTF::fastFree(v20, v21);
  --*(_DWORD *)v20;
  return result;
}

uint64_t WebCore::RenderLayerCompositor::updateSynchronousScrollingNodes(void)::$_1::operator()(_QWORD **a1, int a2)
{
  char v4;
  unsigned __int8 v5;

  v4 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)**a1 + 360))(**a1, *a1[1], a1[1][1]);
  v5 = v4 & 0xEF;
  if (a2)
    v5 = v4 | 0x10;
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)**a1 + 352))(**a1, *a1[1], a1[1][1], v5);
}

uint64_t **WebCore::RenderLayerCompositor::updateSynchronousScrollingNodes(void)::$_0::operator()(uint64_t **result)
{
  uint64_t **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = result;
  v2 = **result;
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    v4 = v2 + 16 * v3;
    if (*(_DWORD *)(v2 - 12))
    {
      v5 = **result;
      if ((_DWORD)v3)
      {
        v6 = 16 * v3;
        v5 = **result;
        while (*(_OWORD *)v5 == 0 || *(_QWORD *)(v5 + 8) == -1)
        {
          v5 += 16;
          v6 -= 16;
          if (!v6)
          {
            v5 = v4;
            goto LABEL_12;
          }
        }
      }
      goto LABEL_12;
    }
    v5 = v2 + 16 * v3;
  }
  else
  {
    v5 = 0;
    v3 = 0;
  }
  v4 = v2 + 16 * v3;
  if (v2)
  {
LABEL_12:
    v8 = v2 + 16 * *(unsigned int *)(v2 - 4);
    goto LABEL_13;
  }
  v8 = 0;
LABEL_13:
  while (v5 != v8)
  {
    v9 = v1[1];
    v11 = *v9;
    v10 = v9[1];
    if (*(_QWORD *)v5 != v11 || *(_QWORD *)(v5 + 8) != v10)
      result = (uint64_t **)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1[2] + 352))(*v1[2]);
    v13 = v5 + 16;
    v5 = v4;
    if (v13 != v4)
    {
      v5 = v13;
      while (*(_OWORD *)v5 == 0 || *(_QWORD *)(v5 + 8) == -1)
      {
        v5 += 16;
        if (v5 == v4)
        {
          v5 = v4;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t *WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t *v13;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *result;
  if (*result)
  {
    v4 = result;
    v5 = *(_DWORD *)(v2 - 8);
    result = (uint64_t *)WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>::hash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2);
    v6 = a2[1];
    v7 = result & v5;
    v8 = (uint64_t *)(v2 + 16 * v7);
    v9 = *v8;
    v10 = v8[1];
    if (*v8 == *a2 && v10 == v6)
    {
LABEL_13:
      v15 = (_OWORD *)(v2 + 16 * v7);
      v16 = *v4;
      if (!*v4)
      {
LABEL_18:
        if ((_OWORD *)v16 != v15)
          return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v4, v15);
        return result;
      }
      v17 = *(unsigned int *)(v16 - 4);
LABEL_17:
      v16 += 16 * v17;
      if ((_OWORD *)v16 == v15)
        return result;
      goto LABEL_18;
    }
    v12 = 1;
    while (v9 | v10)
    {
      v7 = ((_DWORD)v7 + v12) & v5;
      v13 = (uint64_t *)(v2 + 16 * v7);
      v9 = *v13;
      v10 = v13[1];
      ++v12;
      if (v9 == *a2 && v10 == v6)
        goto LABEL_13;
    }
    v16 = *v4;
    if (*v4)
    {
      v17 = *(unsigned int *)(v16 - 4);
      v15 = (_OWORD *)(v16 + 16 * v17);
      goto LABEL_17;
    }
  }
  return result;
}

uint64_t WebCore::LegacyWebKitScrollingLayerCoordinator::updateScrollingLayer(WebCore::LegacyWebKitScrollingLayerCoordinator *this, WebCore::RenderLayer *a2)
{
  WebCore::RenderLayerScrollableArea *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;

  v5 = *((_QWORD *)a2 + 32);
  v4 = (WebCore::RenderLayerScrollableArea *)*((_QWORD *)a2 + 33);
  v6 = *((_QWORD *)v4 + 16);
  if (v6 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 280))(v6) & 1) != 0)
  {
    v7 = 0;
  }
  {
    v7 = 1;
  }
  else
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    v7 = 1;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  v8 = *((_QWORD *)v4 + 17);
  if (v8 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 280))(v8) & 1) != 0)
  {
    v9 = 0;
  }
  {
    v9 = 1;
  }
  else
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    v9 = 1;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)a2 + 4);
  if ((*(_BYTE *)(v11 + 45) & 1) != 0)
  {
    v12 = 0;
  }
  else
  {
    v12 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8);
    if (v12 && (*(_WORD *)(v12 + 28) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19640026CLL);
    }
  }
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 160) + 584))(*(_QWORD *)(v5 + 160));
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 168) + 584))(*(_QWORD *)(v5 + 168));
  v16 = WebCore::RenderLayerScrollableArea::reachableTotalContentsSize(v4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v10 + 728))(v10, v12, v13, v14, &v16, v7, v9);
}

uint64_t WTF::WeakHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderLayer>(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v17;
  WTF *v18;

  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  if (v5 > v4)
  {
    v6 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v7 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_28;
    }
    v8 = *(_DWORD *)(v6 - 4);
    if (!v8)
      goto LABEL_25;
    v9 = 0;
    v10 = v8 - 1;
    do
    {
      v11 = v10;
      v12 = *(WTF **)(v6 + 8 * v10);
      if ((unint64_t)v12 + 1 >= 2 && !*((_QWORD *)v12 + 1))
      {
        *(_QWORD *)(v6 + 8 * v10) = 0;
        if (*(_DWORD *)v12 == 1)
          WTF::fastFree(v12, a2);
        else
          --*(_DWORD *)v12;
        *(_QWORD *)(v6 + 8 * v10) = -1;
        ++v9;
      }
      --v10;
    }
    while (v11);
    v6 = *(_QWORD *)a1;
    if (v9)
    {
      *(_DWORD *)(v6 - 16) += v9;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v14 = *(_DWORD *)(v13 - 12);
      else
        v14 = 0;
      *(_DWORD *)(v13 - 12) = v14 - v9;
      v6 = *(_QWORD *)a1;
    }
    if (!v6)
      goto LABEL_3;
    v15 = *(_DWORD *)(v6 - 4);
    if (v15 < 9 || 6 * *(_DWORD *)(v6 - 12) >= v15)
    {
LABEL_25:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v6 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v6)
      {
        v7 = 0;
        goto LABEL_28;
      }
    }
    v7 = *(_DWORD *)(v6 - 12);
    v17 = 0x7FFFFFFF;
    if (v7 >= 0x7FFFFFFF)
    {
LABEL_29:
      *(_DWORD *)(a1 + 12) = 2 * v17;
      goto LABEL_30;
    }
LABEL_28:
    v17 = v7;
    goto LABEL_29;
  }
LABEL_30:
  v18 = (WTF *)*a2;
  if (*a2 && *((_QWORD *)v18 + 1))
    return WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>((uint64_t *)a1, v18);
  else
    return 0;
}

void WebCore::RenderImageResourceStyleImage::~RenderImageResourceStyleImage(WebCore::RenderImageResourceStyleImage *this, void *a2)
{
  _DWORD *v3;
  void *v4;
  WTF *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  *(_QWORD *)this = off_1E34287A0;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this + 3, a2);
  v5 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, v4);
    else
      --*(_DWORD *)v5;
  }
}

{
  _DWORD *v3;
  void *v4;
  WTF *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  *(_QWORD *)this = off_1E34287A0;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this + 3, a2);
  v5 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, v4);
    else
      --*(_DWORD *)v5;
  }
  if (*((_DWORD *)this + 2))
  {
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v4);
  }
}

uint64_t WebCore::RenderImageResourceStyleImage::errorOccurred(WebCore::RenderImageResourceStyleImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 64))(*((_QWORD *)this + 5));
}

uint64_t WebCore::RenderImageResourceStyleImage::imageHasRelativeWidth(WebCore::RenderImageResourceStyleImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 144))(*((_QWORD *)this + 5));
}

uint64_t WebCore::RenderImageResourceStyleImage::imageHasRelativeHeight(WebCore::RenderImageResourceStyleImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 152))(*((_QWORD *)this + 5));
}

uint64_t WebCore::RenderImageResourceStyleImage::imagePtr(WebCore::RenderImageResourceStyleImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
}

unint64_t WebCore::RenderImageResourceStyleImage::imageSize(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  unint64_t v10;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v5 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 120))(v2, v4) * 64.0;
  v7 = 0x7FFFFFFFLL;
  v8 = 0x80000000;
  if (v5 > -2147483650.0)
    v8 = (int)v5;
  if (v5 < 2147483650.0)
    v7 = v8;
  v9 = v6 * 64.0;
  if (v9 >= 2147483650.0)
  {
    v10 = 0x7FFFFFFF00000000;
  }
  else if (v9 <= -2147483650.0)
  {
    v10 = 0x8000000000000000;
  }
  else
  {
    v10 = (unint64_t)(int)v9 << 32;
  }
  return v10 | v7;
}

const char *WebCore::RenderImage::renderName(WebCore::RenderImage *this)
{
  return "RenderImage";
}

uint64_t WebCore::RenderImage::intrinsicSizeChanged(WebCore::RenderImage *this)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 28) + 72))(*((_QWORD *)this + 28));
  return (*(uint64_t (**)(WebCore::RenderImage *, uint64_t, _QWORD))(*(_QWORD *)this + 568))(this, v2, 0);
}

uint64_t WebCore::RenderInline::offsetHeight(WebCore::LegacyInlineBox **this, WebCore::RenderObject *a2)
{
  int v2;
  unsigned int v3;

  WebCore::RenderInline::linesBoundingBox(this, a2);
  v3 = v2 << 6;
  if (v2 < -33554432)
    v3 = 0x80000000;
  if (v2 <= 0x1FFFFFF)
    return v3;
  else
    return 0x7FFFFFFFLL;
}

uint64_t WebCore::RenderInline::borderBoundingBox(WebCore::LegacyInlineBox **this, WebCore::RenderObject *a2)
{
  WebCore::RenderInline::linesBoundingBox(this, a2);
  return 0;
}

double WebCore::RenderInline::frameRectForStickyPositioning(WebCore::LegacyInlineBox **this, WebCore::RenderObject *a2)
{
  WebCore::LegacyInlineBox *v2;
  uint64x2_t v3;
  uint64_t v4;
  int64x2_t v5;
  int32x2_t v6;
  int32x2_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int32x2_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int32x2_t v13;
  double result;

  v2 = WebCore::RenderInline::linesBoundingBox(this, a2);
  v3.i64[0] = (uint64_t)v2;
  v3.i64[1] = v4;
  v5 = (int64x2_t)vshrq_n_u64(v3, 0x20uLL);
  v6 = vshrn_n_s64((int64x2_t)v3, 0x20uLL);
  v7 = vcgt_s32((int32x2_t)__PAIR64__(v4, v2), (int32x2_t)0xFE000000FE000000);
  v8.i64[0] = v7.i32[0];
  v8.i64[1] = v7.i32[1];
  v9 = v8;
  v10 = vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)__PAIR64__(v4, v2));
  v8.i64[0] = v10.i32[0];
  v8.i64[1] = v10.i32[1];
  v11 = vorrq_s8(vandq_s8(v8, (int8x16_t)vdupq_n_s64(0x80000000uLL)), vandq_s8(vbicq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v3, 6uLL), v8), (int8x16_t)vdupq_n_s64(0xFFFFFFC0uLL)));
  *(int32x2_t *)v3.i8 = vcgt_s32(v6, (int32x2_t)0xFE000000FE000000);
  v8.i64[0] = v3.i32[0];
  v8.i64[1] = v3.i32[1];
  v12 = v8;
  v13 = vcgt_s32((int32x2_t)0xFE000000FE000000, v6);
  v8.i64[0] = v13.i32[0];
  v8.i64[1] = v13.i32[1];
  *(_QWORD *)&result = vorrq_s8(vbslq_s8(v12, (int8x16_t)vdupq_n_s64(0x7FFFFFFF00000000uLL), vbslq_s8(v8, (int8x16_t)vdupq_n_s64(0x8000000000000000), (int8x16_t)vshlq_n_s64(v5, 0x26uLL))), vbslq_s8(v9, (int8x16_t)vdupq_n_s64(0x7FFFFFFFuLL), v11)).u64[0];
  return result;
}

float WebCore::LegacyInlineBox::size(WebCore::LegacyInlineBox *this, WTF::StringImpl *a2)
{
  float v3;

  if ((*((_WORD *)this + 26) & 0x800) != 0)
  {
    v3 = *((float *)this + 10);
    goto LABEL_3;
  }
  v3 = WebCore::LegacyInlineBox::logicalHeight(this, a2);
  if ((*((_WORD *)this + 26) & 0x800) != 0)
LABEL_3:
    WebCore::LegacyInlineBox::logicalHeight(this, a2);
  return v3;
}

uint64_t WebCore::`anonymous namespace'::AbsoluteQuadsGeneratorContext::AbsoluteQuadsGeneratorContext(uint64_t a1, const WebCore::RenderObject *a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 48;
  *(_QWORD *)(a1 + 40) = 32;
  *(_QWORD *)(a1 + 1072) = 0;
  *(_DWORD *)(a1 + 1080) = 2;
  WebCore::RenderGeometryMap::pushMappingsToAncestor((WebCore::RenderGeometryMap *)(a1 + 8), a2, 0);
  return a1;
}

void WebCore::expandClipRectForDescendantsAndReflection(WebCore::LayoutRect *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t (*v10)();
  WebCore::RenderLayer *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  BOOL v20;
  int v21;
  int v22;
  WebCore::RenderBox *v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;

  v6 = a2[4];
  v7 = *(_QWORD *)(v6 + 88);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 48);
  if (*(_QWORD *)(v8 + 8))
  {
    while (!*(_QWORD *)(v8 + 16))
    {
      v8 = *(_QWORD *)(v8 + 8);
      if (!v8)
        goto LABEL_6;
    }
  }
  else
  {
    if (*(_QWORD *)(v8 + 16))
      v9 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    else
      v9 = 0;
    if (!v9)
    {
LABEL_6:
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 216) + 8))
        v10 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
      else
        v10 = 0;
      if (!v10)
      {
        v11 = (WebCore::RenderLayer *)a2[8];
        if (v11)
        {
          do
          {
            v12 = a2[26];
            if (!v12 || *(WebCore::RenderLayer **)(v12 + 144) != v11)
            {
              v29 = WebCore::transparencyClipBox(v11);
              v30 = v13;
              WebCore::LayoutRect::unite(a1, (const WebCore::LayoutRect *)&v29);
            }
            v11 = (WebCore::RenderLayer *)*((_QWORD *)v11 + 7);
          }
          while (v11);
          v6 = a2[4];
        }
      }
    }
  }
  if ((*(_BYTE *)(v6 + 45) & 4) != 0
    && (*(_BYTE *)(v6 + 21) & 0x40) != 0
    && *(_BYTE *)WebCore::RenderObject::rareData((WebCore::RenderObject *)v6))
  {
    v14 = WebCore::RenderLayer::offsetFromAncestor((uint64_t)a2, a3, 0);
    v15 = v14;
    v16 = HIDWORD(v14);
    if (HIDWORD(v14) == 0x80000000)
      v17 = 0x7FFFFFFF;
    else
      v17 = -HIDWORD(v14);
    if ((_DWORD)v14 == 0x80000000)
      v18 = 0x7FFFFFFF;
    else
      v18 = -(int)v14;
    v19 = *((_DWORD *)a1 + 1);
    v20 = __OFADD__(*(_DWORD *)a1, v18);
    v21 = *(_DWORD *)a1 + v18;
    if (v20)
      v21 = (*(_DWORD *)a1 >> 31) + 0x7FFFFFFF;
    v20 = __OFADD__(v19, v17);
    v22 = v19 + v17;
    if (v20)
      v22 = (v19 >> 31) + 0x7FFFFFFF;
    *(_DWORD *)a1 = v21;
    *((_DWORD *)a1 + 1) = v22;
    if ((*(_BYTE *)(a2[4] + 45) & 4) != 0)
      v23 = (WebCore::RenderBox *)a2[4];
    else
      v23 = 0;
    v29 = WebCore::RenderBox::reflectedRect(v23, a1);
    v30 = v24;
    WebCore::LayoutRect::unite(a1, (const WebCore::LayoutRect *)&v29);
    v25 = *((_DWORD *)a1 + 1);
    v26 = (*(_DWORD *)a1 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__(*(_DWORD *)a1, v15))
      v26 = *(_DWORD *)a1 + v15;
    v20 = __OFADD__(v25, (_DWORD)v16);
    v27 = v25 + v16;
    v28 = (v25 >> 31) + 0x7FFFFFFF;
    if (!v20)
      v28 = v27;
    *(_DWORD *)a1 = v26;
    *((_DWORD *)a1 + 1) = v28;
  }
}

WTF *WTF::WeakPtrFactory<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl>::initializeIfNeeded(WTF *result, uint64_t a2)
{
  WTF **v3;
  void *v4;
  uint64_t v5;

  if (!*(_QWORD *)result)
  {
    v3 = (WTF **)result;
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = a2;
    result = *v3;
    *v3 = (WTF *)v5;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        return (WTF *)WTF::fastFree(result, v4);
      else
        --*(_DWORD *)result;
    }
  }
  return result;
}

_QWORD *WTF::HashMap<WebCore::OverlapTestRequestClient *,WebCore::IntRect,WTF::DefaultHash<WebCore::OverlapTestRequestClient *>,WTF::HashTraits<WebCore::OverlapTestRequestClient *>,WTF::HashTraits<WebCore::IntRect>,WTF::HashTableTraits>::begin(_QWORD *result)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[3 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[3 * v2];
  if ((_DWORD)v2)
  {
    v4 = 24 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 3;
      v4 -= 24;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WebCore::OverlapTestRequestClient *,WebCore::IntRect,WTF::DefaultHash<WebCore::OverlapTestRequestClient *>,WTF::HashTraits<WebCore::OverlapTestRequestClient *>,WTF::HashTraits<WebCore::IntRect>,WTF::HashTableTraits>::remove(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *result;
  if (*result)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = (uint64_t *)(v2 + 24 * v7);
    v9 = *v8;
    if (*v8 != a2)
    {
      v10 = 1;
      while (v9)
      {
        v7 = (v7 + v10) & v3;
        v8 = (uint64_t *)(v2 + 24 * v7);
        v9 = *v8;
        ++v10;
        if (*v8 == a2)
          goto LABEL_8;
      }
      v8 = (uint64_t *)(v2 + 24 * *(unsigned int *)(v2 - 4));
    }
LABEL_8:
    if ((uint64_t *)(v2 + 24 * *(unsigned int *)(v2 - 4)) != v8)
    {
      *v8 = -1;
      ++*(_DWORD *)(*result - 16);
      v11 = *result;
      v12 = *result ? *(_DWORD *)(v11 - 12) - 1 : -1;
      *(_DWORD *)(v11 - 12) = v12;
      v13 = *result;
      if (*result)
      {
        v14 = 6 * *(_DWORD *)(v13 - 12);
        v15 = *(_DWORD *)(v13 - 4);
        if (v14 < v15 && v15 >= 9)
          return WTF::HashTable<WebCore::OverlapTestRequestClient *,WTF::KeyValuePair<WebCore::OverlapTestRequestClient *,WebCore::IntRect>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::OverlapTestRequestClient *,WebCore::IntRect>>,WTF::DefaultHash<WebCore::OverlapTestRequestClient *>,WTF::HashMap<WebCore::OverlapTestRequestClient *,WebCore::IntRect,WTF::DefaultHash<WebCore::OverlapTestRequestClient *>,WTF::HashTraits<WebCore::OverlapTestRequestClient *>,WTF::HashTraits<WebCore::IntRect>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::OverlapTestRequestClient *>>::rehash(result, v15 >> 1, 0);
      }
    }
  }
  return result;
}

_QWORD *WTF::HashTable<WebCore::OverlapTestRequestClient *,WTF::KeyValuePair<WebCore::OverlapTestRequestClient *,WebCore::IntRect>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::OverlapTestRequestClient *,WebCore::IntRect>>,WTF::DefaultHash<WebCore::OverlapTestRequestClient *>,WTF::HashMap<WebCore::OverlapTestRequestClient *,WebCore::IntRect,WTF::DefaultHash<WebCore::OverlapTestRequestClient *>,WTF::HashTraits<WebCore::OverlapTestRequestClient *>,WTF::HashTraits<WebCore::IntRect>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::OverlapTestRequestClient *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  _QWORD *v21;
  __int128 v22;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_QWORD *)(v6 + 24 * v11);
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 8);
        else
          v15 = 0;
        v16 = (~(*v13 << 32) + *v13) ^ ((~(*v13 << 32) + *v13) >> 22);
        v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((unint64_t)(v16 + ~(v16 << 13)) >> 8));
        v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
        v19 = v15 & ((v18 >> 31) ^ v18);
        v20 = 1;
        do
        {
          v21 = (_QWORD *)(v14 + 24 * v19);
          v19 = (v19 + v20++) & v15;
        }
        while (*v21);
        v22 = *(_OWORD *)v13;
        v21[2] = v13[2];
        *(_OWORD *)v21 = v22;
        if (v13 == a3)
          v12 = v21;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

int *WebCore::ClipRect::intersect(int *this, const WebCore::ClipRect *a2)
{
  int *v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  BOOL v7;

  v3 = this;
  v4 = *(_DWORD *)a2 == -1073741808 && *((_DWORD *)a2 + 1) == -1073741808;
  if (!v4 || (*((_DWORD *)a2 + 2) == 2147483615 ? (v5 = *((_DWORD *)a2 + 3) == 2147483615) : (v5 = 0), !v5))
  {
    v6 = *this == -1073741808 && this[1] == -1073741808;
    if (v6 && (this[2] == 2147483615 ? (v7 = this[3] == 2147483615) : (v7 = 0), v7))
      *(_OWORD *)this = *(_OWORD *)a2;
    else
      this = WebCore::LayoutRect::intersect(this, a2);
  }
  if (*((_BYTE *)a2 + 16))
    *((_BYTE *)v3 + 16) = 1;
  return this;
}

unint64_t WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect(WebCore::SVGBoundingBoxComputation *this, const WebCore::RenderLayerModelObject *a2, double a3)
{
  WTF *v4;
  void *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  WTF *v13;
  uint64_t v14;
  unsigned int v15;
  float v16;
  int v17;
  unsigned int v18;
  float v19;
  int v20;
  unsigned int v21;
  float v22;
  float v23;
  int v24;
  float v25;
  int v26;
  int v27;
  int v28;
  void *v30;
  WTF *v31;
  __int16 v32;
  WTF *v33;

  v32 = 767;
  v4 = (WTF *)*((_QWORD *)this + 1);
  if (!v4)
  {
    v4 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v4 = 1;
    *((_QWORD *)v4 + 1) = this;
    v31 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v4;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
      {
        WTF::fastFree(v31, v30);
        v4 = (WTF *)*((_QWORD *)this + 1);
      }
      else
      {
        --*(_DWORD *)v31;
      }
    }
  }
  ++*(_DWORD *)v4;
  v33 = v4;
  v6 = WebCore::SVGBoundingBoxComputation::computeDecoratedBoundingBox((uint64_t)&v33, &v32, 0, a3);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = v33;
  v33 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
      WTF::fastFree(v13, v5);
    else
      --*(_DWORD *)v13;
  }
  v14 = 0;
  if (v10 <= 0.0)
  {
    v15 = 0;
    return v15 | (unint64_t)(v14 << 32);
  }
  v15 = 0;
  if (v12 > 0.0)
  {
    v16 = floorf(v6 * 64.0);
    if (v16 > -2147500000.0)
      v17 = (int)v16;
    else
      v17 = 0x80000000;
    if (v16 < 2147500000.0)
      v18 = v17;
    else
      v18 = 0x7FFFFFFF;
    v19 = floorf(v8 * 64.0);
    if (v19 > -2147500000.0)
      v20 = (int)v19;
    else
      v20 = 0x80000000;
    if (v19 < 2147500000.0)
      v21 = v20;
    else
      v21 = 0x7FFFFFFF;
    v22 = floorf((*(float (**)(WebCore::SVGBoundingBoxComputation *))(*(_QWORD *)this + 248))(this) * 64.0);
    if (v22 >= 2147500000.0)
    {
      v24 = 0x7FFFFFFF;
    }
    else if (v22 <= -2147500000.0)
    {
      v24 = 0x80000000;
    }
    else
    {
      v24 = (int)v22;
    }
    v25 = floorf(v23 * 64.0);
    if (v25 >= 2147500000.0)
    {
      if (v24 == 0x80000000)
        v27 = 0x7FFFFFFF;
      else
        v27 = -v24;
      v28 = -2147483647;
      goto LABEL_29;
    }
    if (v25 <= -2147500000.0)
    {
      if (v24 == 0x80000000)
        v27 = 0x7FFFFFFF;
      else
        v27 = -v24;
    }
    else
    {
      v26 = (int)v25;
      if (v24 == 0x80000000)
        v27 = 0x7FFFFFFF;
      else
        v27 = -v24;
      if (v26 != 0x80000000)
      {
        v28 = -v26;
        goto LABEL_29;
      }
    }
    v28 = 0x7FFFFFFF;
LABEL_29:
    v15 = v18 + v27;
    if (__OFADD__(v18, v27))
      v15 = (v18 >> 31) + 0x7FFFFFFF;
    v14 = v21 + v28;
    if (__OFADD__(v21, v28))
      v14 = (v21 >> 31) + 0x7FFFFFFF;
  }
  return v15 | (unint64_t)(v14 << 32);
}

unsigned int *WTF::Vector<WebCore::LayerAncestorClippingStack::ClippingStackEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;
  _DWORD *v7;
  WTF *v8;
  WTF *v9;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v4 = 96 * v3;
    v5 = (_DWORD **)(*(_QWORD *)a1 + 88);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[2];
      }
      v7 = *(v5 - 1);
      *(v5 - 1) = 0;
      if (v7)
      {
        if (v7[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
        else
          --v7[2];
      }
      v8 = (WTF *)*(v5 - 11);
      *(v5 - 11) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
          WTF::fastFree(v8, a2);
        else
          --*(_DWORD *)v8;
      }
      v5 += 12;
      v4 -= 96;
    }
    while (v4);
  }
  v9 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

void WebCore::CompositedClipData::~CompositedClipData(WTF **this, void *a2)
{
  WTF *v3;

  v3 = *this;
  *this = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
}

uint64_t WebCore::patternForDescription(uint64_t *a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
  unint64_t v10;
  uint64_t result;
  WebCore::GraphicsContext *v12;
  _DWORD *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WebCore *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WebCore *v23;
  uint64_t v24;
  WebCore *v25;
  int v26;
  char v27;
  void *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unsigned int *v32;
  double v33;
  double v34;
  float v35;
  float v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v40;
  int v41;
  double v42;
  double v43;
  void *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  int v54;
  uint64_t v55;
  WTF::StringImpl **v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  WebCore *v64;
  WTF::StringImpl *v65;
  int v66;
  char v67;
  uint64_t v68;
  int v69;
  char v70;
  char v71;
  WTF::StringImpl *v72;
  long double v73;
  long double v74;
  long double v75;
  unsigned __int8 v76;
  uint64_t v77[13];
  char v78;
  _DWORD *v79;
  __int16 v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int16 v85;
  int v86;
  unsigned int v87;
  __int16 v88;
  char v89;
  WTF *v90;
  int v91;
  __int16 v92;
  uint64_t v93;
  uint64_t v94;

  v94 = 0x4190000042000000;
  v10 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v10 != -1)
  {
    v72 = (WTF::StringImpl *)&v64;
    v77[0] = (uint64_t)&v72;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, v77, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, uint64_t *, _QWORD))(*(_QWORD *)a3 + 336))(&v93, a3, &v94, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 0);
  result = v93;
  if (!v93)
  {
    *a1 = 0;
    return result;
  }
  v12 = (WebCore::GraphicsContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v93 + 16))(v93);
  v77[12] = 256;
  memset(v77, 0, 96);
  v78 = 0;
  v13 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v13 += 2;
  v79 = v13;
  v80 = 0;
  v81 = 2143289344;
  v82 = 0;
  v83 = 0;
  v84 = 26216000;
  v85 = 257;
  v86 = 0;
  v87 = v87 & 0x80000000 | 0xE000;
  v88 = 0;
  v89 &= 0xFCu;
  v14 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v14 = 0x100000001;
  *(_QWORD *)(v14 + 8) = 0;
  v90 = (WTF *)v14;
  v91 = 0;
  v92 &= 0xFC00u;
  WTF::AtomStringImpl::add();
  if (!*(_DWORD *)(v14 + 4))
  {
    __break(0xC471u);
    JUMPOUT(0x196401984);
  }
  v16 = v72;
  if (v72)
    *(_DWORD *)v72 += 2;
  v17 = *(WTF::StringImpl **)(v14 + 8);
  *(_QWORD *)(v14 + 8) = v16;
  if (!v17)
  {
LABEL_12:
    if (!v16)
      goto LABEL_15;
    goto LABEL_13;
  }
  if (*(_DWORD *)v17 != 2)
  {
    *(_DWORD *)v17 -= 2;
    goto LABEL_12;
  }
  WTF::StringImpl::destroy(v17, v15);
  if (!v16)
    goto LABEL_15;
LABEL_13:
  if (*(_DWORD *)v16 == 2)
    WTF::StringImpl::destroy(v16, v15);
  else
    *(_DWORD *)v16 -= 2;
LABEL_15:
  v91 = 1092616192;
  v86 = 1092616192;
  LOWORD(v84) = 2000;
  v18 = (WebCore *)WebCore::FontCascade::FontCascade((uint64_t)&v72, v77);
  v64 = 0;
  v19 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v19 || (v20 = *(_QWORD *)(v19 + 96)) == 0)
    v20 = WebCore::threadGlobalDataSlow(v18);
  v21 = *(_QWORD *)(v20 + 80);
  if (!v21)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v20);
    v21 = *(_QWORD *)(v20 + 80);
  }
  WebCore::FontCache::updateFontCascade(v21, (uint64_t)&v72, &v64);
  v23 = v64;
  v64 = 0;
  if (v23)
  {
    if (*((_DWORD *)v23 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v23 + 8))(v23);
    else
      --*((_DWORD *)v23 + 2);
  }
  v24 = *(_QWORD *)(a2 + 8);
  if (!v24 || (v22 = (WTF::StringImpl *)(v24 - 1), (_DWORD)v24 == 1))
  {
    v25 = (WebCore *)MEMORY[0x1E0CBEF70];
    v26 = *MEMORY[0x1E0CBEF70] + 2;
    *MEMORY[0x1E0CBEF70] = v26;
    LODWORD(v64) = 0;
LABEL_25:
    v27 = 0;
    *(_DWORD *)v25 = v26 + 2;
    goto LABEL_26;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v25 = v64;
  LODWORD(v64) = 0;
  if (v25)
  {
    v26 = *(_DWORD *)v25;
    goto LABEL_25;
  }
  v27 = 1;
LABEL_26:
  v65 = v25;
  v66 = 0;
  v67 = 1;
  v68 = 0x3F80000000000000;
  v69 = 0;
  v70 = 4;
  v71 = v71 & 0xE0 | 8;
  if ((v27 & 1) == 0)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v22);
    else
      *(_DWORD *)v25 -= 2;
  }
  v63 = bswap32(*(_DWORD *)(a2 + 24)) | 0x1104000000000000;
  WebCore::GraphicsContext::setFillColor(v12, (const WebCore::Color *)&v63);
  if ((v63 & 0x8000000000000) != 0)
  {
    v60 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFLL);
    do
    {
      v61 = __ldaxr(v60);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, v60));
    if (!v62)
    {
      atomic_store(1u, v60);
      WTF::fastFree((WTF *)v60, v28);
    }
  }
  v63 = 0x4140000040800000;
  (*(void (**)(WebCore::GraphicsContext *, WTF::StringImpl **, WebCore **, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)v12 + 520))(v12, &v72, &v64, &v63, 0, 0);
  v30 = v65;
  v65 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v29);
    else
      *(_DWORD *)v30 -= 2;
  }
  WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)&v72, v29);
  v32 = (unsigned int *)v90;
  v90 = 0;
  if (v32)
  {
    if (*v32 == 1)
    {
      v55 = v32[1];
      if ((_DWORD)v55)
      {
        v56 = (WTF::StringImpl **)(v32 + 2);
        v57 = 8 * v55;
        do
        {
          v58 = *v56;
          *v56 = 0;
          if (v58)
          {
            if (*(_DWORD *)v58 == 2)
              WTF::StringImpl::destroy(v58, v31);
            else
              *(_DWORD *)v58 -= 2;
          }
          ++v56;
          v57 -= 8;
        }
        while (v57);
      }
      WTF::fastFree((WTF *)v32, v31);
    }
    else
    {
      --*v32;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v77, v31);
  v33 = (float)(a4 + *(float *)(a2 + 16));
  v34 = (float)(a5 + *(float *)(a2 + 20));
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a3 + 672))(&v72, a3, 0);
  v35 = hypot(*(long double *)&v72, v73);
  v36 = hypot(v74, v75);
  v37 = v93;
  v93 = 0;
  v38 = (float)(1.0 / v35);
  v39 = (float)(1.0 / v36);
  v77[0] = v37;
  LODWORD(v77[1]) = 1;
  LOBYTE(v72) = 0;
  LODWORD(v73) = -1;
  _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ImageBufferENSC_ISH_EENSE_ISH_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SP_EEEOS15_EEEDcSX_DpT0_((uint64_t)&v64, &v72, v77);
  LODWORD(v73) = 1;
  LOBYTE(v74) = 0;
  v76 = 0;
  result = WTF::fastMalloc((WTF *)0x68);
  v40 = result;
  *(_BYTE *)(result + 8) = 0;
  *(_DWORD *)result = 1;
  *(_DWORD *)(result + 16) = -1;
  v41 = LODWORD(v73);
  if (LODWORD(v73) != -1)
  {
    result = ((uint64_t (*)(WebCore **, uint64_t, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JSU_ST_EEEDcmSW_DpOT0____fdiagonal[LODWORD(v73)])(&v64, result + 8, &v72);
    *(_DWORD *)(v40 + 16) = v41;
  }
  v42 = v33 + 0.0;
  v43 = v34 + 0.0;
  *(_BYTE *)(v40 + 24) = 0;
  v44 = (void *)(v40 + 24);
  *(_BYTE *)(v40 + 40) = 0;
  v45 = v76;
  if (v76)
  {
    *(_DWORD *)(v40 + 32) = -1;
    v46 = LODWORD(v75);
    if (LODWORD(v75) == -1)
    {
      v45 = 1;
    }
    else
    {
      result = ((uint64_t (*)(WebCore **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JSU_ST_EEEDcmSW_DpOT0____fdiagonal[LODWORD(v75)])(&v64);
      *(_DWORD *)(v40 + 32) = v46;
      v45 = v76;
    }
    *(_BYTE *)(v40 + 40) = 1;
  }
  *(_WORD *)(v40 + 48) = 257;
  *(double *)(v40 + 56) = v38;
  *(double *)(v40 + 64) = v38 * 0.0;
  *(double *)(v40 + 72) = v39 * 0.0;
  *(double *)(v40 + 80) = v39;
  *(double *)(v40 + 88) = v42;
  *(double *)(v40 + 96) = v43;
  *a1 = v40;
  if (v45)
  {
    if (LODWORD(v75) != -1)
      result = ((uint64_t (*)(WebCore **, long double *))off_1E3429060[LODWORD(v75)])(&v64, &v74);
    LODWORD(v75) = -1;
  }
  if (LODWORD(v73) != -1)
    result = ((uint64_t (*)(WebCore **, WTF::StringImpl **))off_1E3429060[LODWORD(v73)])(&v64, &v72);
  LODWORD(v73) = -1;
  if (LODWORD(v77[1]) != -1)
    result = ((uint64_t (*)(WebCore **, uint64_t *))off_1E3429060[LODWORD(v77[1])])(&v64, v77);
  v47 = v93;
  v93 = 0;
  if (v47)
  {
    v48 = *(_QWORD *)(v47 + 8);
    if (__ldaxr((unsigned __int8 *)v48))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v48))
    {
      goto LABEL_57;
    }
    result = MEMORY[0x19AEA534C](v48);
LABEL_57:
    v50 = *(_QWORD *)(v48 + 8);
    v51 = v50 - 1;
    *(_QWORD *)(v48 + 8) = v50 - 1;
    if (v50 == 1)
    {
      v59 = *(_QWORD *)(v48 + 16);
      v52 = *(_QWORD *)(v48 + 24);
      *(_QWORD *)(v48 + 24) = 0;
      v53 = v59 != 0;
    }
    else
    {
      v52 = 0;
      v53 = 1;
    }
    v54 = __ldxr((unsigned __int8 *)v48);
    if (v54 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v48))
      {
        if (v51)
          return result;
LABEL_65:
        if (v52)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
        if (!v53)
          return WTF::fastFree((WTF *)v48, v44);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v48);
    if (v51)
      return result;
    goto LABEL_65;
  }
  return result;
}

_QWORD *std::make_unique[abi:sn180100]<WebCore::TransformAnimationValue,double &,WebCore::RotateTransformOperation *,WebCore::TimingFunction *&>(_QWORD *a1, _QWORD *a2, _DWORD **a3, uint64_t *a4)
{
  _QWORD *result;
  _QWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  v9 = result;
  v10 = *a3;
  v11 = *a4;
  result[1] = *a2;
  if (v11)
    ++*(_DWORD *)(v11 + 8);
  result[2] = v11;
  *result = off_1E34290A8;
  v12 = result + 3;
  if (v10)
  {
    ++v10[2];
    *v12 = 0;
    result[4] = 0;
    result = (_QWORD *)WTF::fastMalloc((WTF *)8);
    v9[3] = result;
    v13 = *((unsigned int *)v9 + 9);
    v14 = v10[2];
    v10[2] = v14 + 1;
    result[v13] = v10;
    *((_DWORD *)v9 + 8) = 1;
    *((_DWORD *)v9 + 9) = v13 + 1;
    if (v14)
      v10[2] = v14;
    else
      result = (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
  }
  else
  {
    *v12 = 0;
    result[4] = 0;
  }
  *a1 = v9;
  return result;
}

_QWORD *WebCore::TransformAnimationValue::clone@<X0>(WebCore::TransformAnimationValue *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = off_1E34290D0;
  *(_QWORD *)(v4 + 8) = *((_QWORD *)this + 1);
  result = (_QWORD *)*((_QWORD *)this + 2);
  if (result)
  {
    result = (*(_QWORD *(**)(uint64_t *__return_ptr))*result)(&v11);
    v6 = v11;
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)(v4 + 16) = v6;
  *(_QWORD *)v4 = off_1E34290A8;
  v7 = *((unsigned int *)this + 9);
  if (!(_DWORD)v7)
  {
    LODWORD(v9) = 0;
    v8 = 0;
LABEL_9:
    *(_QWORD *)(v4 + 24) = v8;
    *(_DWORD *)(v4 + 32) = v7;
    *(_DWORD *)(v4 + 36) = v9;
    *a2 = v4;
    return result;
  }
  if (!(v7 >> 29))
  {
    result = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v7));
    v8 = result;
    LODWORD(v9) = *((_DWORD *)this + 9);
    if ((_DWORD)v9)
    {
      v9 = 0;
      do
      {
        v10 = v9;
        result = (*(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 3) + 8 * v9) + 16))(&v11);
        v9 = v10 + 1;
        v8[v10] = v11;
      }
      while (v10 + 1 < (unint64_t)*((unsigned int *)this + 9));
    }
    goto LABEL_9;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::make_unique[abi:sn180100]<WebCore::TransformAnimationValue,double &,WebCore::TransformOperations const&,WebCore::TimingFunction *&>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  result = WTF::fastMalloc((WTF *)0x28);
  v9 = result;
  v10 = *a4;
  *(_QWORD *)(result + 8) = *a2;
  if (v10)
    ++*(_DWORD *)(v10 + 8);
  *(_QWORD *)result = off_1E34290A8;
  v11 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = v10;
  *(_DWORD *)(result + 36) = v11;
  if (!(_DWORD)v11)
    goto LABEL_8;
  if (!(v11 >> 29))
  {
    result = WTF::fastMalloc((WTF *)(8 * v11));
    *(_DWORD *)(v9 + 32) = v11;
    *(_QWORD *)(v9 + 24) = result;
    v12 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v12)
    {
      v13 = *(uint64_t **)a3;
      v14 = 8 * v12;
      do
      {
        v15 = *v13++;
        ++*(_DWORD *)(v15 + 8);
        *(_QWORD *)result = v15;
        result += 8;
        v14 -= 8;
      }
      while (v14);
    }
LABEL_8:
    *a1 = v9;
    return result;
  }
  __break(0xC471u);
  return result;
}

void WebCore::FloatAnimationValue::~FloatAnimationValue(WebCore::FloatAnimationValue *this)
{
  _DWORD *v2;

  *(_QWORD *)this = off_1E34290D0;
  v2 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[2];
  }
}

float WebCore::FloatAnimationValue::clone@<S0>(WebCore::FloatAnimationValue *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void (***v5)(uint64_t *__return_ptr);
  uint64_t v6;
  float result;
  uint64_t v8;

  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v4 = off_1E34290D0;
  *(_QWORD *)(v4 + 8) = *((_QWORD *)this + 1);
  v5 = (void (***)(uint64_t *__return_ptr))*((_QWORD *)this + 2);
  if (v5)
  {
    (**v5)(&v8);
    v6 = v8;
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)(v4 + 16) = v6;
  *(_QWORD *)v4 = off_1E34290F8;
  result = *((float *)this + 6);
  *(float *)(v4 + 24) = result;
  *a2 = v4;
  return result;
}

uint64_t std::make_unique[abi:sn180100]<WebCore::FilterAnimationValue,double &,WebCore::FilterOperations const&,WebCore::TimingFunction *&>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;

  result = WTF::fastMalloc((WTF *)0x28);
  v9 = *a4;
  *(_QWORD *)(result + 8) = *a2;
  if (v9)
    ++*(_DWORD *)(v9 + 8);
  *(_QWORD *)result = off_1E3429120;
  v10 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = v9;
  *(_DWORD *)(result + 36) = v10;
  if (!(_DWORD)v10)
    goto LABEL_4;
  if (!(v10 >> 29))
  {
    v11 = result;
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v10));
    result = v11;
    *(_DWORD *)(v11 + 32) = v10;
    *(_QWORD *)(v11 + 24) = v12;
    v13 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v13)
    {
      v14 = *(_QWORD **)a3;
      v15 = *(_QWORD *)a3 + 8 * v13;
      do
      {
        v16 = *v14;
        v17 = (unsigned int *)(*v14 + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 + 1, v17));
        *v12++ = v16;
        ++v14;
      }
      while (v14 != (_QWORD *)v15);
    }
LABEL_4:
    *a1 = result;
    return result;
  }
  __break(0xC471u);
  return result;
}

void WebCore::FilterAnimationValue::~FilterAnimationValue(WebCore::FilterAnimationValue *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  unsigned int **v6;
  unsigned int **v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int **v12;
  unsigned int **v13;

  *(_QWORD *)this = off_1E3429120;
  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v6 = (unsigned int **)*((_QWORD *)this + 3);
    v7 = &v6[v3];
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        v9 = v8 + 2;
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v8 + 2);
          v12 = v7;
          v13 = v6;
          (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
          v7 = v12;
          v6 = v13;
        }
      }
      ++v6;
    }
    while (v6 != v7);
  }
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  *(_QWORD *)this = off_1E34290D0;
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[2];
  }
}

{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  unsigned int **v6;
  unsigned int **v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int **v12;
  unsigned int **v13;

  *(_QWORD *)this = off_1E3429120;
  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v6 = (unsigned int **)*((_QWORD *)this + 3);
    v7 = &v6[v3];
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        v9 = v8 + 2;
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v8 + 2);
          v12 = v7;
          v13 = v6;
          (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
          v7 = v12;
          v6 = v13;
        }
      }
      ++v6;
    }
    while (v6 != v7);
  }
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  *(_QWORD *)this = off_1E34290D0;
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[2];
  }
  WTF::fastFree(this, a2);
}

_QWORD *WebCore::FilterAnimationValue::clone@<X0>(WebCore::FilterAnimationValue *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = off_1E34290D0;
  *(_QWORD *)(v4 + 8) = *((_QWORD *)this + 1);
  result = (_QWORD *)*((_QWORD *)this + 2);
  if (result)
  {
    result = (*(_QWORD *(**)(uint64_t *__return_ptr))*result)(&v11);
    v6 = v11;
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)(v4 + 16) = v6;
  *(_QWORD *)v4 = off_1E3429120;
  v7 = *((unsigned int *)this + 9);
  if (!(_DWORD)v7)
  {
    v8 = 0;
    LODWORD(v9) = 0;
LABEL_11:
    *(_QWORD *)(v4 + 24) = v8;
    *(_DWORD *)(v4 + 32) = v7;
    *(_DWORD *)(v4 + 36) = v9;
    *a2 = v4;
    return result;
  }
  if (!(v7 >> 29))
  {
    result = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v7));
    v8 = result;
    LODWORD(v9) = *((_DWORD *)this + 9);
    if ((_DWORD)v9)
    {
      v9 = 0;
      do
      {
        v10 = v9;
        result = (*(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 3) + 8 * v9) + 16))(&v11);
        v9 = v10 + 1;
        v8[v10] = v11;
      }
      while (v10 + 1 < (unint64_t)*((unsigned int *)this + 9));
    }
    goto LABEL_11;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::default_delete<WebCore::LegacyWebKitScrollingLayerCoordinator>::operator()[abi:sn180100](WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF **v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  WTF **v9;
  WTF *v10;

  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF **)*((_QWORD *)this + 3);
      do
      {
        v6 = *v5;
        if (*v5 != (WTF *)-1)
        {
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
              WTF::fastFree(v6, a2);
            else
              --*(_DWORD *)v6;
          }
        }
        ++v5;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v8)
    {
      v9 = (WTF **)*((_QWORD *)this + 1);
      do
      {
        v10 = *v9;
        if (*v9 != (WTF *)-1)
        {
          *v9 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 1)
              WTF::fastFree(v10, a2);
            else
              --*(_DWORD *)v10;
          }
        }
        ++v9;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::KeyValuePair<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>::~KeyValuePair(uint64_t *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;

  v1 = result[1];
  if (v1)
  {
    v2 = *(_DWORD *)(v1 + 8);
    if (!v2)
      goto LABEL_8;
    *(_DWORD *)(v1 + 8) = v2 - 1;
  }
  v3 = *result;
  if (!*result)
    return result;
  v4 = *(_DWORD *)(v3 + 8);
  if (!v4)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x196402370);
  }
  *(_DWORD *)(v3 + 8) = v4 - 1;
  return result;
}

uint64_t WTF::Vector<WebCore::LayerOverlapMap::LayerAndBounds,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 24 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v9 = (unint64_t)a2;
      if (v9 <= v7)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      if (v9 < 3)
      {
        v11 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 2;
        goto LABEL_31;
      }
      if (v9 < 0xAAAAAAB)
      {
        v10 = 24 * v9;
        v11 = WTF::fastMalloc((WTF *)(24 * v9));
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
        *(_QWORD *)a1 = v11;
LABEL_31:
        v21 = 0;
        do
        {
          v22 = v11 + v21;
          v23 = *(_OWORD *)((char *)v5 + v21);
          *(_QWORD *)(v22 + 16) = *(_QWORD *)((char *)v5 + v21 + 16);
          *(_OWORD *)v22 = v23;
          v21 += 24;
        }
        while (24 * v6 != v21);
        if ((WTF *)(a1 + 16) != v5 && v5)
        {
          if (*(WTF **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, a2);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_40:
      __break(0xC471u);
      JUMPOUT(0x1964025C8);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v14 = (unint64_t)a2;
  if (v14 > v12)
  {
    v15 = *(unsigned int *)(a1 + 12);
    if (v14 < 3)
    {
      v17 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 2;
      if (!(_DWORD)v15)
        goto LABEL_25;
    }
    else
    {
      if (v14 >= 0xAAAAAAB)
        goto LABEL_40;
      v16 = 24 * v14;
      v17 = WTF::fastMalloc((WTF *)(24 * v14));
      *(_DWORD *)(a1 + 8) = (v16 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v17;
      if (!(_DWORD)v15)
        goto LABEL_25;
    }
    v18 = 24 * v15;
    v19 = v5;
    do
    {
      v20 = *(_OWORD *)v19;
      *(_QWORD *)(v17 + 16) = *((_QWORD *)v19 + 2);
      *(_OWORD *)v17 = v20;
      v17 += 24;
      v19 = (WTF *)((char *)v19 + 24);
      v18 -= 24;
    }
    while (v18);
LABEL_25:
    if ((WTF *)(a1 + 16) != v5 && v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
  }
  return v3;
}

char *WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  WTF *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  WTF *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(_DWORD *)(a1 + 12);
    if ((unint64_t)v5 + 84 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v19 = *(WTF **)a1;
        return (char *)v19 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      }
      if (v9 < 0x30C30C4)
      {
        v10 = 84 * v9;
        v11 = WTF::fastMalloc((WTF *)(84 * v9));
        v13 = 0;
        *(_DWORD *)(a1 + 8) = v10 / 0x54;
        *(_QWORD *)a1 = v11;
        do
        {
          v14 = v11 + v13;
          v15 = *(_OWORD *)((char *)v5 + v13 + 16);
          *(_OWORD *)v14 = *(_OWORD *)((char *)v5 + v13);
          *(_OWORD *)(v14 + 16) = v15;
          v16 = *(_OWORD *)((char *)v5 + v13 + 32);
          v17 = *(_OWORD *)((char *)v5 + v13 + 48);
          v18 = *(_OWORD *)((char *)v5 + v13 + 64);
          *(_DWORD *)(v14 + 80) = *(_DWORD *)((char *)v5 + v13 + 80);
          *(_OWORD *)(v14 + 48) = v17;
          *(_OWORD *)(v14 + 64) = v18;
          *(_OWORD *)(v14 + 32) = v16;
          v13 += 84;
        }
        while (84 * v6 != v13);
        v19 = *(WTF **)a1;
        if (v5)
        {
          if (v19 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12);
          v19 = *(WTF **)a1;
        }
        return (char *)v19 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      }
LABEL_33:
      __break(0xC471u);
      JUMPOUT(0x1964027E0);
    }
  }
  v20 = *(unsigned int *)(a1 + 8);
  v21 = v20 + (v20 >> 2);
  if (v21 >= 0x10)
    v22 = v21 + 1;
  else
    v22 = 16;
  if (v22 <= a2)
    v22 = a2;
  if (v22 > v20)
  {
    if (v22 >= 0x30C30C4)
      goto LABEL_33;
    v23 = *(_DWORD *)(a1 + 12);
    v24 = 84 * v22;
    v25 = WTF::fastMalloc((WTF *)(84 * v22));
    *(_DWORD *)(a1 + 8) = v24 / 0x54;
    *(_QWORD *)a1 = v25;
    if (v23)
    {
      v27 = 84 * v23;
      v28 = v5;
      do
      {
        v29 = *((_OWORD *)v28 + 1);
        *(_OWORD *)v25 = *(_OWORD *)v28;
        *(_OWORD *)(v25 + 16) = v29;
        v30 = *((_OWORD *)v28 + 2);
        v31 = *((_OWORD *)v28 + 3);
        v32 = *((_OWORD *)v28 + 4);
        *(_DWORD *)(v25 + 80) = *((_DWORD *)v28 + 20);
        *(_OWORD *)(v25 + 48) = v31;
        *(_OWORD *)(v25 + 64) = v32;
        *(_OWORD *)(v25 + 32) = v30;
        v25 += 84;
        v28 = (WTF *)((char *)v28 + 84);
        v27 -= 84;
      }
      while (v27);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v26);
    }
  }
  return (char *)v3;
}

__int128 *WebCore::AbsoluteRectsGeneratorContext::addRect(WebCore::AbsoluteRectsGeneratorContext *this, const WebCore::FloatRect *a2, int a3, const WebCore::FloatRect *a4)
{
  int v5;
  __int128 *result;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v5 = (int)a2;
  result = (__int128 *)WebCore::LayoutRect::LayoutRect((int *)&v13, a4);
  v8 = (v13 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__((_DWORD)v13, v5))
    v8 = v13 + v5;
  v9 = (DWORD1(v13) >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(DWORD1(v13), a3))
    v9 = DWORD1(v13) + a3;
  *(_QWORD *)&v13 = __PAIR64__(v9, v8);
  v10 = *((unsigned int *)this + 3);
  if ((_DWORD)v10 == *((_DWORD *)this + 2))
  {
    result = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v10 + 1, (unint64_t)&v13);
    v10 = *((unsigned int *)this + 3);
    v11 = *(_QWORD *)this;
    v12 = *result;
  }
  else
  {
    v11 = *(_QWORD *)this;
    v12 = v13;
  }
  *(_OWORD *)(v11 + 16 * v10) = v12;
  ++*((_DWORD *)this + 3);
  return result;
}

void WebCore::`anonymous namespace'::AbsoluteQuadsGeneratorContext::addRect(WebCore::_anonymous_namespace_::AbsoluteQuadsGeneratorContext *this, const WebCore::FloatRect *a2)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  unint64_t v11;
  float v12;
  float v13;

  v2 = *(_QWORD *)this;
  v3 = WebCore::RenderGeometryMap::absoluteRect((WebCore::_anonymous_namespace_::AbsoluteQuadsGeneratorContext *)((char *)this + 8), a2);
  v11 = __PAIR64__(LODWORD(v4), LODWORD(v3));
  v12 = v5;
  v13 = v6;
  v7 = *(unsigned int *)(v2 + 12);
  if ((_DWORD)v7 == *(_DWORD *)(v2 + 8))
  {
    WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatRect>(v2, (float32x2_t *)&v11);
  }
  else
  {
    v8 = *(_QWORD *)v2 + 32 * v7;
    *(float *)v8 = v3;
    *(float *)(v8 + 4) = v4;
    v9 = v3 + v5;
    *(float *)(v8 + 8) = v9;
    *(float *)(v8 + 12) = v4;
    v10 = v4 + v6;
    *(float *)(v8 + 16) = v9;
    *(float *)(v8 + 20) = v10;
    *(float *)(v8 + 24) = v3;
    *(float *)(v8 + 28) = v10;
    ++*(_DWORD *)(v2 + 12);
  }
}

uint64_t WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatRect>(uint64_t a1, float32x2_t *a2)
{
  WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1);
  WebCore::FloatQuad::FloatQuad((float32x2_t *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12)), a2);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

char *std::__stable_sort<std::_ClassicAlgPolicy,WebCore::RenderLayer::rebuildZOrderLists(std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,WTF::OptionSet<WebCore::RenderLayer::Compositing> &)::$_0 &,WebCore::RenderLayer**>(char *result, char *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t *v23;
  char *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;

  if (a3 >= 2)
  {
    v6 = result;
    if (a3 == 2)
    {
      v7 = *((_QWORD *)a2 - 1);
      v8 = *(_QWORD *)result;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 88) + 8) + 64) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 32) + 88) + 8) + 64))
      {
        *(_QWORD *)result = v7;
        *((_QWORD *)a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v19 = (char *)a4;
      v20 = a3 >> 1;
      v21 = &result[8 * (a3 >> 1)];
      v22 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::RenderLayer::rebuildZOrderLists(std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,WTF::OptionSet<WebCore::RenderLayer::Compositing> &)::$_0 &,WebCore::RenderLayer**>((uint64_t)result, v21, v22, a4);
        v23 = (uint64_t *)&v19[8 * v20];
        result = (char *)std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::RenderLayer::rebuildZOrderLists(std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,WTF::OptionSet<WebCore::RenderLayer::Compositing> &)::$_0 &,WebCore::RenderLayer**>((uint64_t)&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v23);
        v24 = &v19[8 * a3];
        v25 = v23;
        while (v25 != (uint64_t *)v24)
        {
          v26 = v25;
          v27 = *v25;
          v28 = *(_QWORD *)v19;
          v29 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 32) + 88) + 8) + 64);
          v30 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v19 + 32) + 88) + 8) + 64);
          if (v29 < v30)
            v28 = v27;
          v19 += 8 * (v29 >= v30);
          v25 = &v26[v29 < v30];
          *(_QWORD *)v6 = v28;
          v6 += 8;
          if (v19 == (char *)v23)
          {
            if (v25 != (uint64_t *)v24)
            {
              v31 = 0;
              if (v29 < v30)
                v32 = 1;
              else
                v32 = 2;
              v33 = &v26[v32 & 1];
              do
              {
                *(_QWORD *)&v6[v31 * 8] = v33[v31];
                ++v31;
              }
              while (&v33[v31] != (uint64_t *)v24);
            }
            return result;
          }
        }
        if (v19 != (char *)v23)
        {
          v34 = 0;
          do
          {
            *(_QWORD *)&v6[v34] = *(_QWORD *)&v19[v34];
            v34 += 8;
          }
          while (&v19[v34] != (char *)v23);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,WebCore::RenderLayer::rebuildZOrderLists(std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,WTF::OptionSet<WebCore::RenderLayer::Compositing> &)::$_0 &,WebCore::RenderLayer**>(result, v21, v22, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,WebCore::RenderLayer::rebuildZOrderLists(std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,WTF::OptionSet<WebCore::RenderLayer::Compositing> &)::$_0 &,WebCore::RenderLayer**>(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v19, a5);
        return std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::RenderLayer::rebuildZOrderLists(std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,WTF::OptionSet<WebCore::RenderLayer::Compositing> &)::$_0 &,WebCore::RenderLayer**>(v6, &v6[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v19, a5);
      }
    }
    else if (result != a2)
    {
      v10 = result + 8;
      if (result + 8 != a2)
      {
        v11 = 8;
        v12 = result;
        do
        {
          v14 = *(_QWORD *)v12;
          v13 = *((_QWORD *)v12 + 1);
          v12 = v10;
          if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 32) + 88) + 8) + 64) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 32) + 88) + 8) + 64))
          {
            v15 = v11;
            while (1)
            {
              *(_QWORD *)&result[v15] = v14;
              v16 = v15 - 8;
              if (v15 == 8)
                break;
              v14 = *(_QWORD *)&result[v15 - 16];
              v15 -= 8;
              if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 32) + 88) + 8) + 64) >= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 32) + 88) + 8) + 64))
              {
                v17 = &result[v16];
                goto LABEL_15;
              }
            }
            v17 = result;
LABEL_15:
            *(_QWORD *)v17 = v13;
          }
          v10 = v12 + 8;
          v11 += 8;
        }
        while (v12 + 8 != a2);
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::RenderLayer::rebuildZOrderLists(std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,WTF::OptionSet<WebCore::RenderLayer::Compositing> &)::$_0 &,WebCore::RenderLayer**>(uint64_t result, _QWORD *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  if (a3)
  {
    v4 = a4;
    v6 = result;
    if (a3 == 1)
    {
LABEL_8:
      *v4 = *(_QWORD *)v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = *(a2 - 1);
      v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 88) + 8) + 64);
      v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 32) + 88) + 8) + 64);
      if (v9 >= v10)
        v8 = *(_QWORD *)result;
      *a4 = v8;
      v4 = a4 + 1;
      if (v9 >= v10)
        v6 = (uint64_t)(a2 - 1);
      goto LABEL_8;
    }
    if ((uint64_t)a3 > 8)
    {
      v20 = result + 8 * (a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::RenderLayer::rebuildZOrderLists(std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,WTF::OptionSet<WebCore::RenderLayer::Compositing> &)::$_0 &,WebCore::RenderLayer**>(result, v20, a3 >> 1, a4, a3 >> 1);
      result = std::__stable_sort<std::_ClassicAlgPolicy,WebCore::RenderLayer::rebuildZOrderLists(std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,WTF::OptionSet<WebCore::RenderLayer::Compositing> &)::$_0 &,WebCore::RenderLayer**>(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v21 = (_QWORD *)(v6 + 8 * (a3 >> 1));
      while (v21 != a2)
      {
        v22 = v21;
        v23 = *v21;
        v24 = *(_QWORD *)v6;
        v25 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 32) + 88) + 8) + 64);
        v26 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 32) + 88) + 8) + 64);
        if (v25 < v26)
          v24 = v23;
        v21 = &v22[v25 < v26];
        v6 += 8 * (v25 >= v26);
        *v4++ = v24;
        if (v6 == v20)
        {
          if (v21 != a2)
          {
            v27 = 0;
            v28 = &v22[v25 < v26];
            do
            {
              v4[v27] = v28[v27];
              ++v27;
            }
            while (&v28[v27] != a2);
          }
          return result;
        }
      }
      if (v6 != v20)
      {
        v29 = 0;
        do
        {
          v4[v29] = *(_QWORD *)(v6 + v29 * 8);
          ++v29;
        }
        while (v6 + v29 * 8 != v20);
      }
    }
    else if ((_QWORD *)result != a2)
    {
      v11 = result + 8;
      *a4 = *(_QWORD *)result;
      if ((_QWORD *)(result + 8) != a2)
      {
        v12 = 0;
        v13 = a4;
        v14 = a4;
        do
        {
          v16 = *v14++;
          v15 = v16;
          if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 32) + 88) + 8) + 64) >= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 88) + 8) + 64))
          {
            *v14 = *(_QWORD *)v11;
          }
          else
          {
            v13[1] = v15;
            v17 = a4;
            if (v13 != a4)
            {
              v18 = v12;
              while (1)
              {
                v17 = (uint64_t *)((char *)a4 + v18);
                v19 = *(uint64_t *)((char *)a4 + v18 - 8);
                if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 32) + 88) + 8) + 64) >= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 32) + 88) + 8) + 64))
                  break;
                *v17 = v19;
                v18 -= 8;
                if (!v18)
                {
                  v17 = a4;
                  break;
                }
              }
            }
            *v17 = *(_QWORD *)v11;
          }
          v11 += 8;
          v12 += 8;
          v13 = v14;
        }
        while ((_QWORD *)v11 != a2);
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::RenderLayer::rebuildZOrderLists(std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,WTF::OptionSet<WebCore::RenderLayer::Compositing> &)::$_0 &,WebCore::RenderLayer**>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v7;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  BOOL v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  _BOOL4 v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  if (a5)
  {
    v7 = a5;
    while (a4 > a7 && v7 > a7)
    {
      if (!a4)
        return result;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *(_QWORD *)&result[8 * v11];
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 32) + 88) + 8) + 64) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 88) + 8) + 64))
          break;
        ++v11;
        v10 -= 8;
        if (a4 == v11)
          return result;
      }
      v13 = a4 - v11;
      v14 = &result[-v10];
      if (a4 - v11 >= v7)
      {
        if (a4 - 1 == v11)
        {
          *(_QWORD *)&result[8 * v11] = *(_QWORD *)a2;
          *(_QWORD *)a2 = v12;
          return result;
        }
        if (v13 >= 0)
          v25 = a4 - v11;
        else
          v25 = v13 + 1;
        v26 = v25 >> 1;
        v27 = &result[8 * (v25 >> 1)];
        if (a3 == a2)
        {
          v17 = a3;
          v33 = a3;
        }
        else
        {
          v28 = (a3 - a2) >> 3;
          v17 = a2;
          do
          {
            v29 = v28 >> 1;
            v30 = (uint64_t *)&v17[8 * (v28 >> 1)];
            v32 = *v30;
            v31 = (char *)(v30 + 1);
            v28 += ~(v28 >> 1);
            if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 32) + 88) + 8) + 64) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v27[8 * v11] + 32) + 88) + 8) + 64))
              v17 = v31;
            else
              v28 = v29;
          }
          while (v28);
          v33 = a2;
        }
        v19 = &v27[-v10];
        v16 = (v17 - v33) >> 3;
      }
      else
      {
        if (v7 >= 0)
          v15 = v7;
        else
          v15 = v7 + 1;
        v16 = v15 >> 1;
        v17 = &a2[8 * (v15 >> 1)];
        if (v14 == a2)
        {
          v19 = a2;
          v24 = a2;
        }
        else
        {
          v18 = (uint64_t)(a2 - result + v10) >> 3;
          v19 = v14;
          do
          {
            v20 = v18 >> 1;
            v21 = (uint64_t *)&v19[8 * (v18 >> 1)];
            v23 = *v21;
            v22 = (char *)(v21 + 1);
            v18 += ~(v18 >> 1);
            if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v17 + 32) + 88) + 8) + 64) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 32) + 88) + 8) + 64))
              v18 = v20;
            else
              v19 = v22;
          }
          while (v18);
          v24 = v14;
        }
        v26 = (v19 - v24) >> 3;
      }
      v34 = v17;
      if (v19 != a2)
      {
        v34 = v19;
        if (a2 != v17)
        {
          if (v19 + 8 == a2)
          {
            v81 = *(_QWORD *)v19;
            v83 = v16;
            v41 = v17 - a2;
            v42 = a6;
            v43 = a3;
            v85 = a7;
            v44 = v14;
            v45 = v26;
            memmove(v19, a2, v17 - a2);
            v26 = v45;
            v16 = v83;
            a7 = v85;
            v14 = v44;
            a3 = v43;
            a6 = v42;
            v34 = &v19[v41];
            *(_QWORD *)v34 = v81;
          }
          else if (a2 + 8 == v17)
          {
            v46 = *((_QWORD *)v17 - 1);
            v34 = v19 + 8;
            if (v17 - 8 != v19)
            {
              v82 = a6;
              v84 = v16;
              v47 = a3;
              v86 = a7;
              v48 = v14;
              v49 = v26;
              memmove(v19 + 8, v19, v17 - 8 - v19);
              v26 = v49;
              v16 = v84;
              a7 = v86;
              v14 = v48;
              a3 = v47;
              a6 = v82;
            }
            *(_QWORD *)v19 = v46;
          }
          else
          {
            v35 = (a2 - v19) >> 3;
            if (v35 == (v17 - a2) >> 3)
            {
              v36 = 0;
              do
              {
                v37 = *(_QWORD *)&v19[v36];
                *(_QWORD *)&v19[v36] = *(_QWORD *)&a2[v36];
                v38 = (uint64_t)&v19[v36 + 8];
                *(_QWORD *)&a2[v36] = v37;
                v39 = (uint64_t)&a2[v36 + 8];
                v36 += 8;
              }
              while ((char *)v38 != a2 && v39 != (_QWORD)v17);
              v34 = a2;
            }
            else
            {
              v50 = (v17 - a2) >> 3;
              v51 = (a2 - v19) >> 3;
              do
              {
                v52 = v51;
                v51 = v50;
                v50 = v52 % v50;
              }
              while (v50);
              if (v51)
              {
                v53 = &v19[8 * v51];
                do
                {
                  v55 = *((_QWORD *)v53 - 1);
                  v53 -= 8;
                  v54 = v55;
                  v56 = &v53[8 * v35];
                  v57 = v53;
                  do
                  {
                    v58 = v57;
                    v57 = v56;
                    *(_QWORD *)v58 = *(_QWORD *)v56;
                    v59 = __OFSUB__(v35, (v17 - v56) >> 3);
                    v61 = v35 - ((v17 - v56) >> 3);
                    v60 = (v61 < 0) ^ v59;
                    v56 = &v19[8 * v61];
                    if (v60)
                      v56 = &v57[8 * v35];
                  }
                  while (v56 != v53);
                  *(_QWORD *)v57 = v54;
                }
                while (v53 != v19);
              }
              v34 = &v19[8 * ((v17 - a2) >> 3)];
            }
          }
        }
      }
      v62 = a4 - v26 - v11;
      v63 = v7 - v16;
      if (v26 + v16 >= v7 + a4 - (v26 + v16) - v11)
      {
        v67 = v26;
        v68 = a4 - v26 - v11;
        v69 = v16;
        v70 = v7 - v16;
        v64 = a6;
        v65 = a7;
        v71 = v14;
        std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::RenderLayer::rebuildZOrderLists(std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,WTF::OptionSet<WebCore::RenderLayer::Compositing> &)::$_0 &,WebCore::RenderLayer**>(v34, v17, a3, v68, v70);
        result = v71;
        v17 = v19;
        v63 = v69;
        v62 = v67;
        a3 = v34;
      }
      else
      {
        v64 = a6;
        v65 = a7;
        v66 = a3;
        std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::RenderLayer::rebuildZOrderLists(std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,WTF::OptionSet<WebCore::RenderLayer::Compositing> &)::$_0 &,WebCore::RenderLayer**>(v14, v19, v34, v26, v16);
        a3 = v66;
        result = v34;
      }
      a4 = v62;
      v7 = v63;
      a2 = v17;
      a6 = v64;
      a7 = v65;
      if (!v63)
        return result;
    }
    if (a4 <= v7)
    {
      if (result != a2)
      {
        v76 = 0;
        do
        {
          *(_QWORD *)&a6[v76] = *(_QWORD *)&result[v76];
          v76 += 8;
        }
        while (&result[v76] != a2);
        if (v76)
        {
          v77 = a6;
          while (a2 != a3)
          {
            v78 = *(_QWORD *)a2;
            v79 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 32) + 88) + 8) + 64) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v77 + 32) + 88) + 8) + 64);
            if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 32) + 88) + 8) + 64) >= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v77 + 32) + 88) + 8) + 64))
              v78 = *(_QWORD *)v77;
            v77 += 8
                 * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 32) + 88) + 8) + 64) >= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v77 + 32) + 88) + 8) + 64));
            a2 += 8 * v79;
            *(_QWORD *)result = v78;
            result += 8;
            if (&a6[v76] == v77)
              return result;
          }
          return (char *)memmove(result, v77, a6 - v77 + v76);
        }
      }
    }
    else if (a2 != a3)
    {
      v72 = 0;
      do
      {
        *(_QWORD *)&a6[v72] = *(_QWORD *)&a2[v72];
        v72 += 8;
      }
      while (&a2[v72] != a3);
      if (v72)
      {
        v73 = &a6[v72];
        v74 = a3 - 8;
        while (a2 != result)
        {
          v75 = *((_QWORD *)a2 - 1);
          if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v73 - 1) + 32) + 88) + 8) + 64) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v75 + 32) + 88) + 8) + 64))
          {
            a2 -= 8;
          }
          else
          {
            v75 = *((_QWORD *)v73 - 1);
            v73 -= 8;
          }
          *(_QWORD *)v74 = v75;
          v74 -= 8;
          if (v73 == a6)
            return result;
        }
        v80 = 0;
        do
        {
          *(_QWORD *)&v74[v80] = *(_QWORD *)&v73[v80 - 8];
          v80 -= 8;
        }
        while (&v73[v80] != a6);
      }
    }
  }
  return result;
}

__n128 WTF::Vector<WebCore::LayerFragment,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::LayerFragment&>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;

  v3 = WTF::Vector<WebCore::LayerFragment,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2);
  v4 = *(_QWORD *)a1 + 104 * *(unsigned int *)(a1 + 12);
  v6 = *(_OWORD *)(v3 + 64);
  v5 = *(_OWORD *)(v3 + 80);
  v7 = *(_OWORD *)(v3 + 48);
  *(_QWORD *)(v4 + 96) = *(_QWORD *)(v3 + 96);
  *(_OWORD *)(v4 + 64) = v6;
  *(_OWORD *)(v4 + 80) = v5;
  *(_OWORD *)(v4 + 48) = v7;
  v9 = *(_OWORD *)(v3 + 16);
  result = *(__n128 *)(v3 + 32);
  *(_OWORD *)v4 = *(_OWORD *)v3;
  *(_OWORD *)(v4 + 16) = v9;
  *(__n128 *)(v4 + 32) = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<WebCore::LayerFragment,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(_DWORD *)(a1 + 12);
    if ((unint64_t)v5 + 104 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v9 = (unint64_t)a2;
      if (v9 <= v7)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      if (v9 < 2)
      {
        v11 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 1;
        goto LABEL_31;
      }
      if (v9 < 0x2762763)
      {
        v10 = 104 * v9;
        v11 = WTF::fastMalloc((WTF *)(104 * v9));
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x68;
        *(_QWORD *)a1 = v11;
LABEL_31:
        v25 = 0;
        do
        {
          v26 = v11 + v25;
          v27 = *(_OWORD *)((char *)v5 + v25);
          v28 = *(_OWORD *)((char *)v5 + v25 + 32);
          *(_OWORD *)(v26 + 16) = *(_OWORD *)((char *)v5 + v25 + 16);
          *(_OWORD *)(v26 + 32) = v28;
          *(_OWORD *)v26 = v27;
          v29 = *(_OWORD *)((char *)v5 + v25 + 48);
          v30 = *(_OWORD *)((char *)v5 + v25 + 64);
          v31 = *(_OWORD *)((char *)v5 + v25 + 80);
          *(_QWORD *)(v26 + 96) = *(_QWORD *)((char *)v5 + v25 + 96);
          *(_OWORD *)(v26 + 64) = v30;
          *(_OWORD *)(v26 + 80) = v31;
          *(_OWORD *)(v26 + 48) = v29;
          v25 += 104;
        }
        while (104 * v6 != v25);
        if ((WTF *)(a1 + 16) != v5 && v5)
        {
          if (*(WTF **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, a2);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_40:
      __break(0xC471u);
      JUMPOUT(0x1964036BCLL);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v14 = (unint64_t)a2;
  if (v14 > v12)
  {
    v15 = *(_DWORD *)(a1 + 12);
    if (v14 < 2)
    {
      v17 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
      if (!v15)
        goto LABEL_25;
    }
    else
    {
      if (v14 >= 0x2762763)
        goto LABEL_40;
      v16 = 104 * v14;
      v17 = WTF::fastMalloc((WTF *)(104 * v14));
      *(_DWORD *)(a1 + 8) = (v16 & 0xFFFFFFF8) / 0x68;
      *(_QWORD *)a1 = v17;
      if (!v15)
        goto LABEL_25;
    }
    v18 = 104 * v15;
    v19 = v5;
    do
    {
      v20 = *(_OWORD *)v19;
      v21 = *((_OWORD *)v19 + 2);
      *(_OWORD *)(v17 + 16) = *((_OWORD *)v19 + 1);
      *(_OWORD *)(v17 + 32) = v21;
      *(_OWORD *)v17 = v20;
      v22 = *((_OWORD *)v19 + 3);
      v23 = *((_OWORD *)v19 + 4);
      v24 = *((_OWORD *)v19 + 5);
      *(_QWORD *)(v17 + 96) = *((_QWORD *)v19 + 12);
      *(_OWORD *)(v17 + 64) = v23;
      *(_OWORD *)(v17 + 80) = v24;
      *(_OWORD *)(v17 + 48) = v22;
      v17 += 104;
      v19 = (WTF *)((char *)v19 + 104);
      v18 -= 104;
    }
    while (v18);
LABEL_25:
    if ((WTF *)(a1 + 16) != v5 && v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
  }
  return v3;
}

uint64_t WTF::RefCounted<WebCore::Model>::deref(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  void *v5;

  v2 = (uint64_t *)result;
  if (*(_DWORD *)result == 1)
  {
    v3 = *(WTF::StringImpl **)(result + 24);
    v2[3] = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = (WTF::StringImpl *)v2[2];
    v2[2] = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v2 + 1, a2);
    return WTF::fastFree((WTF *)v2, v5);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::GraphicsLayer *,6ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      if (v10 < 7)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 6;
        goto LABEL_30;
      }
      if (!(v10 >> 29))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 8 * v6);
        if ((void *)(a1 + 16) != v5 && v5)
        {
          if (*(void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v19);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x1964038E4);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 7)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 6;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if ((void *)(a1 + 16) != v5 && v5)
    {
      if (*(void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return v3;
}

_QWORD *WTF::Vector<WebCore::GraphicsLayer *,6ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GraphicsLayer *>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<WebCore::GraphicsLayer *,6ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

BOOL WTF::Detail::CallableWrapper<WebCore::RenderLayerBacking::isPaintDestinationForDescendantLayers(WebCore::RenderLayer::PaintedContentRequest &)::$_0,WebCore::LayerTraversal,WebCore::RenderLayer const&>::call(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  const WebCore::RenderLayerModelObject *v5;
  uint64_t v6;
  uint64_t v7;
  const WebCore::RenderLayerModelObject *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  double v15;
  uint64_t v16;
  int v17;
  int v18;
  signed int v22;
  signed int v23;
  int v24;
  int v25;
  _DWORD *v26;
  int v28;
  unint64_t v29;

  v4 = *(_QWORD **)(a1 + 24);
  v28 = 0;
  if (!WebCore::RenderLayer::isVisuallyNonEmpty(a2, (uint64_t *)&v28))
    return **(_BYTE **)(a1 + 8) && **(_DWORD **)(a1 + 16) != 0;
  v5 = (const WebCore::RenderLayerModelObject *)v4[1];
  v6 = v4[22];
  v7 = v4[23];
  if (v5 != (const WebCore::RenderLayerModelObject *)a2)
  {
    v8 = (const WebCore::RenderLayerModelObject *)a2;
    do
    {
      v9 = *((_QWORD *)v8 + 4);
      v10 = *(_DWORD *)(v9 + 20);
      if ((v10 & 0x20000) != 0)
      {
        v12 = *((_QWORD *)v8 + 4);
        if ((*(_BYTE *)(v9 + 45) & 2) != 0)
          v12 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8);
        v13 = *(_QWORD *)(v12 + 88);
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 32) + 40) + 20))
          goto LABEL_44;
        v14 = *(_QWORD **)(v13 + 40);
        if (v14[41] || v14[38] || v14[39] || v14[40] || (v10 & 0x100000) != 0)
          goto LABEL_44;
      }
      v11 = *(unsigned __int8 *)(v9 + 46);
      if (v11 == 83 || v11 == 103)
        goto LABEL_44;
      v8 = (const WebCore::RenderLayerModelObject *)*((_QWORD *)v8 + 5);
    }
    while (v8 && v8 != v5);
  }
  v29 = WebCore::RenderLayer::offsetFromAncestor(a2, (uint64_t)v5, 0);
  v16 = WebCore::RenderLayer::boundingBox(a2, v5, &v29, 128, v15);
  if (v17 >= 1 && v18 >= 1 && (int)v7 >= 1 && SHIDWORD(v7) >= 1)
  {
    v22 = v6 + v7;
    if (__OFADD__((_DWORD)v6, (_DWORD)v7))
      v22 = (v6 >> 31) + 0x7FFFFFFF;
    if (v22 > (int)v16)
    {
      v23 = (v16 >> 31) + 0x7FFFFFFF;
      if (!__OFADD__((_DWORD)v16, v17))
        v23 = v16 + v17;
      if (v23 > (int)v6)
      {
        v24 = HIDWORD(v6) + HIDWORD(v7);
        if (__OFADD__(HIDWORD(v6), HIDWORD(v7)))
          v24 = (HIDWORD(v6) >> 31) + 0x7FFFFFFF;
        if (v24 > SHIDWORD(v16))
        {
          v25 = HIDWORD(v16) + v18;
          if (__OFADD__(HIDWORD(v16), v18))
            v25 = (HIDWORD(v16) >> 31) + 0x7FFFFFFF;
          if (v25 > SHIDWORD(v6))
          {
LABEL_44:
            v26 = *(_DWORD **)(a1 + 16);
            **(_BYTE **)(a1 + 8) = 1;
            *v26 = 3;
          }
        }
      }
    }
  }
  return **(_BYTE **)(a1 + 8) && **(_DWORD **)(a1 + 16) != 0;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RenderLayerBacking::hasVisibleNonCompositedDescendants(void)::$_0,WebCore::LayerTraversal,WebCore::RenderLayer const&>::call(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  unsigned int v3;
  uint64_t result;

  v2 = *(_BYTE **)(a1 + 8);
  v3 = *v2;
  result = (*(_DWORD *)(a2 + 24) >> 19) & 1 | v3;
  *v2 = ((*(_DWORD *)(a2 + 24) & 0x80000) != 0) | v3;
  return result;
}

uint64_t WTF::HashTable<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::KeyValuePair<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::HashMap<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::KeyValuePair<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::HashMap<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::KeyValuePair<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::HashMap<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = v5;
    v10 = (uint64_t *)v4;
    do
    {
      if (*v10 != -1)
      {
        if (*v10)
          WTF::HashTable<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::KeyValuePair<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::HashMap<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>>::reinsert(*a1, v10);
        WTF::KeyValuePair<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>::~KeyValuePair(v10);
      }
      v10 += 2;
      --v9;
    }
    while (v9);
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::HashTable<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::KeyValuePair<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::HashMap<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>>>::reinsert(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  uint64_t v14;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = *a2;
  v4 = ~(*a2 << 32) + *a2;
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v2 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = *(_QWORD *)(a1 + 16 * v7);
    v7 = (v7 + v8++) & v2;
  }
  while (v10);
  result = a1 + 16 * v9;
  v12 = *(_QWORD *)(result + 8);
  if (!v12)
    goto LABEL_8;
  v13 = *(_DWORD *)(v12 + 8);
  if (v13)
  {
    *(_DWORD *)(v12 + 8) = v13 - 1;
LABEL_8:
    *a2 = 0;
    *(_QWORD *)result = v3;
    v14 = a2[1];
    a2[1] = 0;
    *(_QWORD *)(result + 8) = v14;
    return result;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RenderLayerCompositor::setIsInWindow(BOOL)::$_0,void,WebCore::GraphicsLayer &>::call(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a1 + 8);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 832))(a2);
  if (result)
    return (*(uint64_t (**)(uint64_t, BOOL))(*(_QWORD *)result + 144))(result, v2 != 0);
  return result;
}

WTF *WebCore::RenderLayerCompositor::computeAncestorClippingStack(WebCore::RenderLayer const&,WebCore::RenderLayer const*)const::$_0::operator()(uint64_t a1, WTF **a2, WTF *a3, int a4)
{
  void *v7;
  WTF *result;
  WTF *v9;
  int v10;
  unsigned int *v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v19;
  unsigned int v20;
  unint64_t v21;
  void *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int v47;
  BOOL v48;
  WTF *v49;
  WTF *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  __int128 v55;
  __int128 v56;
  char v57;
  WTF *v58;

  v50 = a3;
  v51 = 5;
  LOBYTE(v52) = a4 == 1;
  WebCore::RenderLayer::parentClipRects((WTF *)&v58, (uint64_t)a2, (uint64_t)&v50);
  result = v58;
  v9 = a2[4];
  v10 = (*((_DWORD *)v9 + 24) >> 19) & 7;
  v11 = (unsigned int *)((char *)v58 + 8);
  if (v10 == 6)
    v11 = (unsigned int *)((char *)v58 + 28);
  if (v10 == 2)
    v11 = (unsigned int *)((char *)v58 + 48);
  v12 = *v11;
  v13 = v11[1];
  v14 = v11[2];
  v15 = v11[3];
  if (*((_BYTE *)v58 + 4))
  {
    v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 3) + 8) + 40) + 8) + 1944);
    if (*((_QWORD *)a3 + 4) == v40)
    {
      v41 = *v11 == -1073741808 && v11[1] == -1073741808;
      v42 = v41 && v14 == 2147483615;
      v43 = v42 && v15 == 2147483615;
      v12 = -1073741808;
      v13 = -1073741808;
      if (!v43)
      {
        v49 = v58;
        v44 = v11[1];
        v45 = *v11;
        v46 = WebCore::LocalFrameView::scrollPositionForFixedPosition(*(int32x2_t **)(v40 + 248));
        if (__OFADD__(v45, (_DWORD)v46))
          v12 = (v45 >> 31) + 0x7FFFFFFF;
        else
          v12 = v45 + v46;
        v47 = v44;
        v48 = __OFADD__(v44, HIDWORD(v46));
        v13 = v44 + HIDWORD(v46);
        if (v48)
          v13 = (v47 >> 31) + 0x7FFFFFFF;
        result = v49;
      }
    }
  }
  if (*(_DWORD *)result == 1)
    result = (WTF *)WTF::fastFree(result, v7);
  else
    --*(_DWORD *)result;
  if (v12 != -1073741808 || v13 != -1073741808 || v14 != 2147483615 || v15 != 2147483615)
  {
    if (v14 == 2147483615)
    {
      v14 = 134217725;
      v12 = -67108863;
    }
    if (v15 == 2147483615)
      v19 = 134217725;
    else
      v19 = v15;
    if (v15 == 2147483615)
      v20 = -67108863;
    else
      v20 = v13;
    v21 = WebCore::RenderLayer::convertToLayerCoords(*(WebCore::RenderLayer **)a1, a3, 0, 1);
    if (HIDWORD(v21) == 0x80000000)
      v23 = 0x7FFFFFFF;
    else
      v23 = -HIDWORD(v21);
    if ((_DWORD)v21 == 0x80000000)
      v24 = 0x7FFFFFFF;
    else
      v24 = -(int)v21;
    v25 = v12 + v24;
    if (__OFADD__(v12, v24))
      v25 = (v12 >> 31) + 0x7FFFFFFF;
    v26 = v20 + v23;
    if (__OFADD__(v20, v23))
      v26 = (v20 >> 31) + 0x7FFFFFFF;
    v27 = *a2;
    if (!*a2)
    {
      v27 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v27 = 1;
      *((_QWORD *)v27 + 1) = a2;
      v39 = *a2;
      *a2 = v27;
      if (v39)
      {
        if (*(_DWORD *)v39 == 1)
        {
          WTF::fastFree(v39, v22);
          v27 = *a2;
          if (!*a2)
            goto LABEL_38;
        }
        else
        {
          --*(_DWORD *)v39;
        }
      }
    }
    ++*(_DWORD *)v27;
LABEL_38:
    v50 = v27;
    v51 = v25;
    v52 = v26;
    v53 = v14;
    v54 = v19;
    v55 = 0u;
    v56 = 0u;
    v57 = 0;
    v28 = *(_QWORD *)(a1 + 8);
    v29 = *(unsigned int *)(v28 + 12);
    if ((_DWORD)v29 == *(_DWORD *)(v28 + 8))
    {
      v30 = WTF::Vector<WebCore::CompositedClipData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28, v29 + 1, (unint64_t)&v50);
      LODWORD(v29) = *(_DWORD *)(v28 + 12);
    }
    else
    {
      v30 = (uint64_t)&v50;
    }
    v31 = *(_QWORD *)v28;
    if ((_DWORD)v29)
    {
      v36 = (unint64_t)v29 << 6;
      do
      {
        v37 = v31 + v36;
        v38 = *(_QWORD *)(v31 + v36 - 64);
        *(_QWORD *)(v37 - 64) = 0;
        *(_QWORD *)v37 = v38;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)(v31 + v36 - 56);
        *(_OWORD *)(v37 + 24) = *(_OWORD *)(v31 + v36 - 40);
        *(_OWORD *)(v37 + 40) = *(_OWORD *)(v31 + v36 - 24);
        *(_BYTE *)(v37 + 56) = *(_BYTE *)(v31 + v36 - 8);
        v36 -= 64;
      }
      while (v36);
    }
    v32 = *(_QWORD *)v30;
    *(_QWORD *)v30 = 0;
    *(_QWORD *)v31 = v32;
    v33 = *(_OWORD *)(v30 + 8);
    v34 = *(_OWORD *)(v30 + 24);
    v35 = *(_OWORD *)(v30 + 40);
    *(_BYTE *)(v31 + 56) = *(_BYTE *)(v30 + 56);
    *(_OWORD *)(v31 + 40) = v35;
    *(_OWORD *)(v31 + 24) = v34;
    *(_OWORD *)(v31 + 8) = v33;
    ++*(_DWORD *)(v28 + 12);
    result = v50;
    v50 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        return (WTF *)WTF::fastFree(result, v22);
      else
        --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::CompositedClipData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 26)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(v5 << 6));
      *(_DWORD *)(v6 + 8) = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = result;
        result = (uint64_t)v7;
        do
        {
          v11 = *(WTF **)result;
          *(_QWORD *)result = 0;
          *(_QWORD *)v10 = v11;
          v12 = *(_OWORD *)(result + 8);
          v13 = *(_OWORD *)(result + 24);
          v14 = *(_OWORD *)(result + 40);
          *(_BYTE *)(v10 + 56) = *(_BYTE *)(result + 56);
          *(_OWORD *)(v10 + 40) = v14;
          *(_OWORD *)(v10 + 24) = v13;
          *(_OWORD *)(v10 + 8) = v12;
          WebCore::CompositedClipData::~CompositedClipData((WTF **)result, v9);
          result = v15 + 64;
          v10 += 64;
        }
        while ((WTF *)result != (WTF *)((char *)v7 + 64 * v8));
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
        }
        return WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::RenderLayerCompositor::resetTrackedRepaintRects(void)::$_0,void,WebCore::GraphicsLayer &>::call(int a1, WebCore::GraphicsLayer *this)
{
  return WebCore::GraphicsLayer::resetTrackedRepaints((uint64_t *)this);
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, unint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  _OWORD *v32;
  uint64_t v33;
  WTF *v34;
  _QWORD *v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 24 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (unint64_t *)(v6 + 24 * v13);
      v16 = v15[1];
      if (v16 != -1)
      {
        v17 = *v15;
        if (*(_OWORD *)v15 == 0)
        {
          v18 = v6 + 24 * v13;
          v19 = *(WTF **)(v18 + 16);
          *(_QWORD *)(v18 + 16) = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 1)
              WTF::fastFree(v19, v10);
            else
              --*(_DWORD *)v19;
          }
        }
        else
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = 0;
          v23 = (v17 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v17 - 1640531527) << 16) ^ ((unsigned __int16)v17 - 1640531527);
          v24 = (v17 >> 37) & 0x7FFF800 ^ ((v23 + WORD2(v17) + (v23 >> 11)) << 16) ^ (v23 + WORD2(v17) + (v23 >> 11));
          v25 = (v16 >> 5) & 0x7FFF800 ^ ((v24 + (v24 >> 11) + (unsigned __int16)v16) << 16) ^ (v24 + (v24 >> 11) + (unsigned __int16)v16);
          v26 = (v16 >> 37) & 0x7FFF800 ^ ((v25 + WORD2(v16) + (v25 >> 11)) << 16) ^ (v25 + WORD2(v16) + (v25 >> 11));
          v27 = (v26 + (v26 >> 11)) ^ (8 * (v26 + (v26 >> 11)));
          v28 = (v27 + (v27 >> 5)) ^ (4 * (v27 + (v27 >> 5)));
          v29 = (v28 + (v28 >> 15)) ^ ((v28 + (v28 >> 15)) << 10);
          if (v29)
            v30 = v29;
          else
            v30 = 0x800000;
          do
          {
            v31 = v30 & v21;
            v32 = (_OWORD *)(v20 + 24 * (v30 & v21));
            v30 = ++v22 + (v30 & v21);
          }
          while (*v32 != 0);
          v33 = v20 + 24 * v31;
          v36 = *(WTF **)(v33 + 16);
          v35 = (_QWORD *)(v33 + 16);
          v34 = v36;
          *v35 = 0;
          if (v36)
          {
            if (*(_DWORD *)v34 == 1)
              WTF::fastFree(v34, v10);
            else
              --*(_DWORD *)v34;
          }
          *v32 = *(_OWORD *)v15;
          v37 = v6 + 24 * v13;
          v38 = *(_QWORD *)(v37 + 16);
          *(_QWORD *)(v37 + 16) = 0;
          *v35 = v38;
          v39 = *(WTF **)(v37 + 16);
          *(_QWORD *)(v37 + 16) = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 1)
              WTF::fastFree(v39, v10);
            else
              --*(_DWORD *)v39;
          }
          if (v15 == a3)
            v14 = v32;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

void WebCore::RenderLayerFilters::~RenderLayerFilters(WebCore::RenderLayerFilters *this, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  unsigned int **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;

  WebCore::RenderLayerFilters::removeReferenceFilterClients((uint64_t)this, a2);
  v4 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
LABEL_7:
      v8 = *(_QWORD *)(v6 + 8);
      v9 = v8 - 1;
      *(_QWORD *)(v6 + 8) = v8 - 1;
      if (v8 == 1)
      {
        v22 = *(_QWORD *)(v6 + 16);
        v10 = *(_QWORD *)(v6 + 24);
        *(_QWORD *)(v6 + 24) = 0;
        v11 = v22 != 0;
      }
      else
      {
        v10 = 0;
        v11 = 1;
      }
      v12 = __ldxr((unsigned __int8 *)v6);
      if (v12 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v6))
          goto LABEL_11;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_11:
      if (!v9)
      {
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        if (!v11)
          WTF::fastFree((WTF *)v6, v3);
      }
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v6);
    goto LABEL_7;
  }
LABEL_12:
  v13 = *((unsigned int *)this + 13);
  if ((_DWORD)v13)
  {
    v19 = (unsigned int **)*((_QWORD *)this + 5);
    v20 = 8 * v13;
    do
    {
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v19, v3);
      v19 = (unsigned int **)(v21 + 8);
      v20 -= 8;
    }
    while (v20);
  }
  v14 = (WTF *)*((_QWORD *)this + 5);
  if (v14)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v14, v3);
  }
  v15 = *((unsigned int *)this + 9);
  if ((_DWORD)v15)
  {
    v23 = (uint64_t *)*((_QWORD *)this + 3);
    v24 = 8 * v15;
    do
    {
      v25 = *v23;
      *v23 = 0;
      if (v25)
      {
        if (*(_DWORD *)(v25 + 24) == 2)
        {
          if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v25);
        }
        else
        {
          *(_DWORD *)(v25 + 24) -= 2;
        }
      }
      ++v23;
      v24 -= 8;
    }
    while (v24);
  }
  v16 = (WTF *)*((_QWORD *)this + 3);
  if (v16)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v16, v3);
  }
  *(_QWORD *)this = &off_1E33F87C8;
  v17 = *((_QWORD *)this + 1);
  if (v17)
  {
    *(_QWORD *)(v17 + 8) = 0;
    v18 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        WTF::fastFree(v18, v3);
      else
        --*(_DWORD *)v18;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::RenderLayerFilters::~RenderLayerFilters(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::RenderLayerFilters::removeReferenceFilterClients(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::CachedResource *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = this;
  v3 = *(unsigned int *)(this + 52);
  if ((_DWORD)v3)
  {
    v7 = *(_QWORD *)(this + 40);
    v8 = 8 * v3;
    do
    {
      if (*(_QWORD *)v7)
        v9 = *(WebCore::CachedResource **)(*(_QWORD *)v7 + 8);
      else
        v9 = 0;
      this = WebCore::CachedResource::removeClient(v9, (unsigned int **)v2);
      v7 += 8;
      v8 -= 8;
    }
    while (v8);
  }
  if (*(_DWORD *)(v2 + 48))
  {
    v10 = *(unsigned int *)(v2 + 52);
    this = *(_QWORD *)(v2 + 40);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this, a2);
        this = v12 + 8;
        v11 -= 8;
      }
      while (v11);
      *(_DWORD *)(v2 + 52) = 0;
      this = *(_QWORD *)(v2 + 40);
    }
    if (this)
    {
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 48) = 0;
      this = WTF::fastFree((WTF *)this, a2);
    }
  }
  v5 = (uint64_t *)(v2 + 24);
  v4 = *(_QWORD *)(v2 + 24);
  v6 = *(unsigned int *)(v2 + 36);
  if ((_DWORD)v6)
  {
    v13 = 8 * v6;
    do
    {
      this = *(_QWORD *)(*(_QWORD *)v4 + 64) & 0xFFFFFFFFFFFFLL;
      if (this)
      {
        if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0
          || (*(_BYTE *)((*(_QWORD *)(*(_QWORD *)v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 4
          || (~*(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 9) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1964047C4);
        }
        v14 = v4;
        this = WebCore::LegacyRenderSVGResourceContainer::removeClientRenderLayer((WebCore::LegacyRenderSVGResourceContainer *)this, *(WebCore::RenderLayer **)(v2 + 16));
        v4 = v14;
      }
      v4 += 8;
      v13 -= 8;
    }
    while (v13);
  }
  if (*(_DWORD *)(v2 + 32))
  {
    if (*(_DWORD *)(v2 + 36))
      WTF::Vector<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(v2 + 24, 0);
    this = *v5;
    if (*v5)
    {
      *(_QWORD *)(v2 + 24) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      return WTF::fastFree((WTF *)this, a2);
    }
  }
  return this;
}

BOOL WebCore::RenderLayerFilters::hasFilterThatShouldBeRestrictedBySecurityOrigin(WebCore::RenderLayerFilters *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 17);
  return v1 && *(_BYTE *)(v1 + 77) != 0;
}

uint64_t WebCore::RenderLayerFilters::notifyFinished(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  WebCore::Node *ElementSibling;
  WebCore::Element *v9;
  _BYTE v10[20];
  __int128 v11;
  char v12;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
  if (v2)
  {
    while (1)
    {
      if ((*(_BYTE *)(v2 + 45) & 1) == 0)
      {
        v3 = *(_QWORD *)(v2 + 24);
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
          break;
      }
      v5 = *(_QWORD *)(v2 + 32);
      if (v5)
      {
        v2 = *(_QWORD *)(v5 + 8);
        if (v2)
          continue;
      }
      goto LABEL_9;
    }
    if ((*(_WORD *)(v4 + 28) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19640492CLL);
    }
    WebCore::Node::invalidateStyle(*(_QWORD *)(v3 + 8), 3u, 1);
    if ((*(_BYTE *)(v4 + 71) & 1) != 0)
    {
      v7 = *(_QWORD *)(v4 + 32);
      if (!v7 || (*(_WORD *)(v7 + 28) & 8) == 0 || (*(_BYTE *)(v7 + 70) & 4) == 0)
      {
        ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling(v4);
        WebCore::invalidateForSiblingCombinators(ElementSibling, v9);
      }
    }
  }
LABEL_9:
  result = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8) + 40)
                                                                                         + 8)
                                                                             + 1944)
                                                                 + 24)
                                                     + 8)
                                         + 40)
                             + 8)
                 + 3382))
  {
    LOBYTE(v11) = 0;
    v12 = 0;
    v10[0] = 0;
    v10[16] = 0;
    return WebCore::RenderObject::issueRepaint(result, &v11, 0, 0, (uint64_t)v10);
  }
  return result;
}

uint64_t WebCore::RenderLayerFilters::updateReferenceFilterClients(WebCore::RenderLayerFilters *this, const WebCore::FilterOperations *a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::CachedResource *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  WebCore::Node *v20;
  unsigned int **v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  WebCore::Node *v33;
  WebCore::CachedResourceHandleBase *v34;
  WebCore::CachedResource *v35;
  int v36;
  unsigned int v37;
  WebCore::CachedResource *v38;
  WTF *v39;
  int v40;
  unsigned int **v41;
  WebCore::Node *v42;
  _BYTE v43[24];

  result = WebCore::RenderLayerFilters::removeReferenceFilterClients((uint64_t)this, a2);
  v5 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD **)a2;
    v7 = *(_QWORD *)a2 + 8 * v5;
    do
    {
      v8 = *v6;
      v9 = (unsigned int *)(*v6 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      if (*(_BYTE *)(v8 + 12))
      {
        do
        {
          v11 = __ldaxr(v9);
          v12 = --v11 == 0;
        }
        while (__stlxr(v11, v9));
        goto LABEL_7;
      }
      v13 = *(_QWORD *)(v8 + 32);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 24);
        if (v14)
        {
          v15 = *(WebCore::CachedResource **)(v14 + 8);
          if (v15)
          {
            if (WebCore::CachedResource::addClientToSet(*(WebCore::CachedResource **)(v14 + 8), this))
              (*(void (**)(WebCore::CachedResource *, WebCore::RenderLayerFilters *))(*(_QWORD *)v15 + 88))(v15, this);
            v16 = *((unsigned int *)this + 13);
            if ((_DWORD)v16 == *((_DWORD *)this + 12))
            {
              v38 = v15;
              v17 = v16 + (v16 >> 2);
              if (v17 >= 0x10)
                v18 = v17 + 1;
              else
                v18 = 16;
              if (v18 <= v16 + 1)
                v18 = v16 + 1;
              if (v18 >> 29)
              {
LABEL_63:
                __break(0xC471u);
                JUMPOUT(0x196404CE0);
              }
              v39 = (WTF *)*((_QWORD *)this + 5);
              v40 = v18;
              v20 = (WebCore::Node *)WTF::fastMalloc((WTF *)(8 * v18));
              *((_DWORD *)this + 12) = v40;
              *((_QWORD *)this + 5) = v20;
              if ((_DWORD)v16)
              {
                v41 = (unsigned int **)((char *)v39 + 8 * v16);
                v21 = (unsigned int **)v39;
                do
                {
                  v22 = *v21;
                  if (*v21)
                  {
                    do
                      v23 = __ldaxr(v22);
                    while (__stlxr(v23 + 1, v22));
                    *(_QWORD *)v20 = v22;
                    v24 = *((_QWORD *)v22 + 1);
                    if (v24)
                    {
                      v42 = v20;
                      ++*(_DWORD *)(v24 + 548);
                      v25 = *(_QWORD *)(v24 + 488);
                      if (v25)
                      {
                        if (*(_QWORD *)(v25 + 8))
                          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v24 + 464), (uint64_t *)&v42, (uint64_t)v43);
                      }
                    }
                  }
                  else
                  {
                    *(_QWORD *)v20 = 0;
                  }
                  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v21, v19);
                  v20 = (WebCore::Node *)((char *)v20 + 8);
                  ++v21;
                }
                while (v21 != v41);
                v20 = (WebCore::Node *)*((_QWORD *)this + 5);
              }
              if (v39)
              {
                if (v20 == v39)
                {
                  *((_QWORD *)this + 5) = 0;
                  *((_DWORD *)this + 12) = 0;
                }
                WTF::fastFree(v39, v19);
                v20 = (WebCore::Node *)*((_QWORD *)this + 5);
              }
              v34 = (WebCore::Node *)((char *)v20 + 8 * *((unsigned int *)this + 13));
              v35 = v38;
            }
            else
            {
              v34 = (WebCore::CachedResourceHandleBase *)(*((_QWORD *)this + 5) + 8 * v16);
              v35 = v15;
            }
            result = (uint64_t)WebCore::CachedResourceHandleBase::CachedResourceHandleBase(v34, v35);
            ++*((_DWORD *)this + 13);
            goto LABEL_52;
          }
        }
      }
      v26 = *(_QWORD *)(v8 + 24);
      if (v26)
      {
        if (*(_DWORD *)(v26 + 4))
        {
          v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 32) + 24) + 8)
                                      + 40)
                          + 8);
          result = *(_QWORD *)(v27 + 120);
          if (result)
          {
            WebCore::TreeScopeOrderedMap::getElementById((unsigned int *)result, (const WTF::AtomString *)(v8 + 24), (const WebCore::TreeScope *)(v27 + 96), (uint64_t *)&v42);
            result = (uint64_t)v42;
            if (v42)
            {
              v29 = *((_QWORD *)v42 + 8) & 0xFFFFFFFFFFFFLL;
              if (!v29)
                goto LABEL_54;
              if ((*(_BYTE *)((*((_QWORD *)v42 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                goto LABEL_63;
              if (*(_BYTE *)((*((_QWORD *)v42 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 96)
              {
                ++*(_DWORD *)((*((_QWORD *)v42 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
                WTF::WeakHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderLayer>(v29 + 248, *((WTF ***)this + 2), (uint64_t)v43);
                v30 = *((unsigned int *)this + 9);
                if ((_DWORD)v30 == *((_DWORD *)this + 8))
                {
                  v31 = WTF::Vector<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)this + 3, v30 + 1, (unint64_t)&v42);
                  v30 = *((unsigned int *)this + 9);
                  v32 = *((_QWORD *)this + 3);
                  v33 = *(WebCore::Node **)v31;
                  *(_QWORD *)v31 = 0;
                }
                else
                {
                  v32 = *((_QWORD *)this + 3);
                  v33 = v42;
                  v42 = 0;
                }
                *(_QWORD *)(v32 + 8 * v30) = v33;
                *((_DWORD *)this + 9) = v30 + 1;
                v36 = *(_DWORD *)(v29 + 16);
                if (!v36)
                {
                  __break(0xC471u);
                  JUMPOUT(0x196404D00);
                }
                *(_DWORD *)(v29 + 16) = v36 - 1;
                result = (uint64_t)v42;
                v42 = 0;
                if (!result)
                  goto LABEL_52;
              }
              else
              {
LABEL_54:
                v42 = 0;
              }
              if (*(_DWORD *)(result + 24) == 2)
              {
                if ((*(_WORD *)(result + 30) & 0x400) == 0)
                  result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v28);
              }
              else
              {
                *(_DWORD *)(result + 24) -= 2;
              }
            }
          }
        }
      }
      do
      {
LABEL_52:
        v37 = __ldaxr(v9);
        v12 = --v37 == 0;
      }
      while (__stlxr(v37, v9));
LABEL_7:
      if (v12)
      {
        atomic_store(1u, (unsigned int *)(v8 + 8));
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      ++v6;
    }
    while (v6 != (_QWORD *)v7);
  }
  return result;
}

uint64_t WebCore::RenderLayerFilters::calculateOutsets(WebCore::RenderLayerFilters *this, WebCore::RenderElement *a2, const WebCore::FloatRect *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v10;
  const WebCore::FloatRect *v11;

  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 32);
  v6 = *(_QWORD **)(v3 + 8);
  v4 = v3 + 8;
  v5 = v6;
  v7 = *(unsigned int *)(v4 + 12);
  if (!(_DWORD)v7)
    return 0;
  v10 = 8 * v7;
  while (!(*(unsigned int (**)(_QWORD, WebCore::RenderElement *, const WebCore::FloatRect *))(*(_QWORD *)*v5 + 80))(*v5, a2, a3))
  {
    ++v5;
    v10 -= 8;
    if (!v10)
      return 0;
  }
  return WebCore::CSSFilter::calculateOutsets(this, (unsigned int ***)v4, a2, v11);
}

uint64_t WebCore::RenderLayerFilters::beginFilterEffect(WebCore::RenderLayerFilters *this, WebCore::RenderElement *a2, WebCore::GraphicsContext *a3, const WebCore::LayoutRect *a4, const WebCore::LayoutRect *a5, const WebCore::LayoutRect *a6, int32x4_t *a7)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  signed int v14;
  unsigned int v15;
  unint64_t v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  int v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int32x4_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  const WebCore::FloatRect *v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  unint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t result;
  uint64_t v73;
  uint64_t v74;
  char v75;
  int32x4_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  int v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  int v104;
  unsigned int v105;
  int v106;
  int v107;
  unsigned int v108;
  uint64_t v109;
  _OWORD *v110;
  float v111;
  float v112;
  float v113;
  float v114;
  double v115;
  uint64_t v116;
  _OWORD *v117;
  int v118;
  int v119;
  int v120;
  int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  unsigned int v134;
  signed int v135;
  unsigned int v136;
  uint64_t v137;
  int v138;
  int v139;
  int v140;
  WebCore::RenderElement *v141;
  int v142;
  int v143;
  signed int v144;
  unsigned int v145;
  uint64_t v146;
  int v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  int v153;
  float v154;
  unsigned int v155;
  float v156;
  float v157;
  float v158;
  unsigned int v159;
  float v160;
  unsigned int v161;
  int v162;
  int v163;
  float32x4_t v164;
  unint64_t v165;
  uint64_t v166;
  int v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  WebCore::Filter *v172;
  uint64_t v173;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  BOOL v178;
  int v179;
  float32x4_t v180;
  float32x4_t v181;
  __int32 v182;
  unsigned int v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  float32x4_t v192;
  float32x4_t v193;
  char v194;
  float32x4_t *v195;

  v11 = *(_DWORD *)a5;
  v10 = *((_DWORD *)a5 + 1);
  v12 = *((_DWORD *)a5 + 2);
  v13 = *((_DWORD *)a5 + 3);
  v15 = *(_DWORD *)a4;
  v14 = *((_DWORD *)a4 + 1);
  v16 = *((_QWORD *)a4 + 1);
  if (*(_DWORD *)a4 <= *(_DWORD *)a5)
    v17 = *(_DWORD *)a5;
  else
    v17 = *(_DWORD *)a4;
  if (v14 <= (int)v10)
    v18 = *((_DWORD *)a5 + 1);
  else
    v18 = *((_DWORD *)a4 + 1);
  v19 = __OFADD__(v15, (_DWORD)v16);
  v20 = v15 + v16;
  v21 = (v15 >> 31) + 0x7FFFFFFF;
  if (!v19)
    v21 = v20;
  v22 = v11 + v12;
  if (__OFADD__(v11, v12))
    v22 = (v11 >> 31) + 0x7FFFFFFF;
  if (v22 < v21)
    v21 = v22;
  v23 = HIDWORD(v16);
  v19 = __OFADD__(v14, (_DWORD)v23);
  v24 = v14 + v23;
  v25 = (v14 >> 31) + 0x7FFFFFFF;
  if (!v19)
    v25 = v24;
  v26 = v10 + v13;
  if (__OFADD__(v10, v13))
    v26 = (v10 >> 31) + 0x7FFFFFFF;
  if (v26 < v25)
    v25 = v26;
  v27 = v17 < v21 && v18 < v25;
  if (v27)
  {
    v28 = v17;
  }
  else
  {
    v21 = 0;
    v25 = 0;
    v28 = 0;
  }
  if (v27)
    v29 = v18;
  else
    v29 = 0;
  v19 = __OFSUB__(v21, v28);
  v30 = v21 - v28;
  v31 = (v21 >> 31) + 0x7FFFFFFF;
  if (!v19)
    v31 = v30;
  v19 = __OFSUB__(v25, v29);
  v32 = v25 - v29;
  v33 = (v25 >> 31) + 0x7FFFFFFF;
  if (!v19)
    v33 = v32;
  v34.i64[0] = __PAIR64__(v29, v28);
  v34.i64[1] = __PAIR64__(v33, v31);
  v193 = vmulq_f32(vcvtq_f32_s32(v34), (float32x4_t)vdupq_n_s32(0x3C800000u));
  v35 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 32) + 32);
  v38 = *(_QWORD **)(v35 + 8);
  v37 = v35 + 8;
  v36 = v38;
  v39 = *(unsigned int *)(v37 + 12);
  if (!(_DWORD)v39)
  {
LABEL_38:
    v42 = 0;
    v43 = 0;
LABEL_43:
    v46 = 0;
    goto LABEL_80;
  }
  v40 = 8 * v39;
  while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v36 + 80))(*v36) & 1) == 0)
  {
    ++v36;
    v40 -= 8;
    if (!v40)
      goto LABEL_38;
  }
  v44 = WebCore::CSSFilter::calculateOutsets(a2, (unsigned int ***)v37, (const WebCore::FilterOperations *)&v193, v41);
  v42 = HIDWORD(v44);
  v43 = v45;
  v46 = v44;
  if (!HIDWORD(v44) && !(_DWORD)v44 && !(_DWORD)v45 && !HIDWORD(v45))
    goto LABEL_43;
  v47 = (_DWORD)v45 << 6;
  if ((int)v45 < -33554432)
    v47 = 0x80000000;
  if ((int)v45 > 0x1FFFFFF)
    v47 = 0x7FFFFFFF;
  v48 = HIDWORD(v45) << 6;
  if (SHIDWORD(v45) < -33554432)
    v48 = 0x80000000;
  if (SHIDWORD(v45) > 0x1FFFFFF)
    v48 = 0x7FFFFFFF;
  v49 = (_DWORD)v44 << 6;
  if ((int)v44 < -33554432)
    v49 = 0x80000000;
  if ((int)v44 > 0x1FFFFFF)
    v49 = 0x7FFFFFFF;
  if (SHIDWORD(v44) >= -33554432)
    v50 = HIDWORD(v44) << 6;
  else
    v50 = 0x80000000;
  if (SHIDWORD(v44) <= 0x1FFFFFF)
    v51 = v50;
  else
    v51 = 0x7FFFFFFF;
  if (v51 == 0x80000000)
    v52 = 0x7FFFFFFF;
  else
    v52 = -v51;
  if (v47 == 0x80000000)
    v53 = 0x7FFFFFFF;
  else
    v53 = -v47;
  if (__OFADD__(v11, v52))
    v11 = (v11 >> 31) + 0x7FFFFFFF;
  else
    v11 += v52;
  if (__OFADD__(v10, v53))
    v10 = (v10 >> 31) + 0x7FFFFFFF;
  else
    v10 += v53;
  v19 = __OFADD__(v51, v48);
  v54 = v51 + v48;
  if (v19)
    v54 = (v51 >> 31) + 0x7FFFFFFF;
  v19 = __OFADD__(v47, v49);
  v55 = v47 + v49;
  if (v19)
    v55 = (v47 >> 31) + 0x7FFFFFFF;
  if (__OFADD__(v12, v54))
    v12 = (v12 >> 31) + 0x7FFFFFFF;
  else
    v12 += v54;
  if (__OFADD__(v13, v55))
    v13 = (v13 >> 31) + 0x7FFFFFFF;
  else
    v13 += v55;
LABEL_80:
  if ((*((_BYTE *)a2 + 52) & 7) == 4 && (*((_BYTE *)a2 + 53) & 1) == 0 && (*((_BYTE *)a2 + 53) & 0x10) != 0)
  {
    v148 = (*(float (**)(WebCore::RenderElement *))(*(_QWORD *)a2 + 232))(a2);
    v152 = floorf(v148 * 64.0);
    if (v152 > -2147500000.0)
      v153 = (int)v152;
    else
      v153 = 0x80000000;
    if (v152 < 2147500000.0)
      v59 = v153;
    else
      v59 = 0x7FFFFFFF;
    v154 = floorf(v149 * 64.0);
    if (v154 > -2147500000.0)
      v155 = (int)v154;
    else
      v155 = 0x80000000;
    if (v154 < 2147500000.0)
      v60 = v155;
    else
      v60 = 0x7FFFFFFFLL;
    v156 = v148 + v150;
    v157 = v149 + v151;
    v158 = ceilf(v156 * 64.0);
    if (v158 >= 2147500000.0)
    {
      v159 = 0x7FFFFFFF;
    }
    else if (v158 <= -2147500000.0)
    {
      v159 = 0x80000000;
    }
    else
    {
      v159 = (int)v158;
    }
    v160 = ceilf(v157 * 64.0);
    if (v160 >= 2147500000.0)
    {
      v161 = 0x7FFFFFFF;
    }
    else if (v160 <= -2147500000.0)
    {
      v161 = 0x80000000;
    }
    else
    {
      v161 = (int)v160;
    }
    v19 = __OFSUB__(v159, v59);
    v162 = v159 - v59;
    v69 = (v159 >> 31) + 0x7FFFFFFF;
    if (!v19)
      v69 = v162;
    LODWORD(v71) = (v161 >> 31) + 0x7FFFFFFF;
    if (__OFSUB__(v161, (_DWORD)v60))
      v71 = v71;
    else
      v71 = v161 - v60;
  }
  else
  {
    v56 = *(_DWORD *)a4;
    v57 = *((_DWORD *)a4 + 1);
    v58 = *((_QWORD *)a4 + 1);
    if (*(_DWORD *)a4 <= (signed int)v11)
      v59 = v11;
    else
      v59 = *(_DWORD *)a4;
    if ((int)v57 <= (int)v10)
      v60 = v10;
    else
      v60 = v57;
    v19 = __OFADD__(v56, (_DWORD)v58);
    v61 = v56 + v58;
    v62 = (v56 >> 31) + 0x7FFFFFFF;
    if (!v19)
      v62 = v61;
    v63 = v11 + v12;
    if (__OFADD__(v11, v12))
      v63 = (v11 >> 31) + 0x7FFFFFFF;
    if (v63 < v62)
      v62 = v63;
    v64 = HIDWORD(v58);
    v19 = __OFADD__(v57, (_DWORD)v64);
    v65 = v57 + v64;
    v66 = (v57 >> 31) + 0x7FFFFFFF;
    if (!v19)
      v66 = v65;
    v67 = v10 + v13;
    if (__OFADD__(v10, v13))
      v67 = (v10 >> 31) + 0x7FFFFFFF;
    if (v67 < v66)
      v66 = v67;
    if (v59 >= v62 || (int)v60 >= v66)
    {
      v62 = 0;
      v66 = 0;
      v59 = 0;
      v60 = 0;
    }
    v19 = __OFSUB__(v62, v59);
    v68 = v62 - v59;
    v69 = (v62 >> 31) + 0x7FFFFFFF;
    if (!v19)
      v69 = v68;
    v19 = __OFSUB__(v66, (_DWORD)v60);
    v70 = v66 - v60;
    LODWORD(v71) = (v66 >> 31) + 0x7FFFFFFF;
    if (v19)
      v71 = v71;
    else
      v71 = v70;
  }
  result = 0;
  if (v69 < 1 || (int)v71 < 1)
    return result;
  v73 = *((_QWORD *)this + 17);
  if (!v73
    || *((_DWORD *)this + 14) != v59
    || *((_DWORD *)this + 15) != (_DWORD)v60
    || *((_DWORD *)this + 16) != v69
    || *((_DWORD *)this + 17) != (_DWORD)v71)
  {
    *((_QWORD *)this + 7) = v59 | (unint64_t)(v60 << 32);
    *((_QWORD *)this + 8) = v69 | (unint64_t)(v71 << 32);
    v74 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 32) + 32) + 8;
    v75 = *((_BYTE *)this + 104);
    v76.i64[0] = __PAIR64__(v60, v59);
    v76.i64[1] = __PAIR64__(v71, v69);
    v193 = vmulq_f32(vcvtq_f32_s32(v76), (float32x4_t)vdupq_n_s32(0x3C800000u));
    WebCore::CSSFilter::create((uint64_t)a2, v74, v75, (WebCore::RenderLayerFilters *)((char *)this + 108), v193.f32, a3, (uint64_t *)&v192);
    v73 = v192.i64[0];
    v192.i64[0] = 0;
    v78 = *((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = v73;
    if (!v78)
      goto LABEL_148;
    v79 = *(_QWORD *)(v78 + 8);
    if (__ldaxr((unsigned __int8 *)v79))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v79))
    {
      goto LABEL_118;
    }
    MEMORY[0x19AEA534C](v79);
LABEL_118:
    v81 = *(_QWORD *)(v79 + 8);
    v82 = v81 - 1;
    *(_QWORD *)(v79 + 8) = v81 - 1;
    if (v81 == 1)
    {
      v185 = *(_QWORD *)(v79 + 16);
      v83 = *(_QWORD *)(v79 + 24);
      *(_QWORD *)(v79 + 24) = 0;
      v84 = v185 != 0;
    }
    else
    {
      v83 = 0;
      v84 = 1;
    }
    v85 = __ldxr((unsigned __int8 *)v79);
    if (v85 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v79))
      {
        if (v82)
          goto LABEL_130;
LABEL_126:
        if (v83)
          (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
        if (!v84)
          WTF::fastFree((WTF *)v79, v77);
LABEL_130:
        v86 = v192.i64[0];
        v192.i64[0] = 0;
        if (!v86)
          goto LABEL_147;
        v87 = *(_QWORD *)(v86 + 8);
        if (__ldaxr((unsigned __int8 *)v87))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v87))
        {
          goto LABEL_135;
        }
        MEMORY[0x19AEA534C](v87);
LABEL_135:
        v89 = *(_QWORD *)(v87 + 8);
        v90 = v89 - 1;
        *(_QWORD *)(v87 + 8) = v89 - 1;
        if (v89 == 1)
        {
          v186 = *(_QWORD *)(v87 + 16);
          v91 = *(_QWORD *)(v87 + 24);
          *(_QWORD *)(v87 + 24) = 0;
          v92 = v186 != 0;
        }
        else
        {
          v91 = 0;
          v92 = 1;
        }
        v93 = __ldxr((unsigned __int8 *)v87);
        if (v93 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v87))
          {
            if (!v90)
              goto LABEL_143;
            goto LABEL_147;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v87);
        if (!v90)
        {
LABEL_143:
          if (v91)
            (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
          if (!v92)
            WTF::fastFree((WTF *)v87, v77);
        }
LABEL_147:
        v73 = *((_QWORD *)this + 17);
LABEL_148:
        if (!v73)
          return 0;
        goto LABEL_149;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v79);
    if (v82)
      goto LABEL_130;
    goto LABEL_126;
  }
LABEL_149:
  v94 = *((_DWORD *)this + 14);
  v95 = *((unsigned int *)this + 15);
  v96 = *((_QWORD *)this + 8);
  if (*(_BYTE *)(v73 + 76))
  {
    v97 = v46 << 6;
    if (v46 < -33554432)
      v97 = 0x80000000;
    if (v46 > 0x1FFFFFF)
      v97 = 0x7FFFFFFF;
    v98 = v42 << 6;
    if (v42 < -33554432)
      v98 = 0x80000000;
    if (v42 <= 0x1FFFFFF)
      v99 = v98;
    else
      v99 = 0x7FFFFFFF;
    v100 = HIDWORD(v43) << 6;
    if (SHIDWORD(v43) < -33554432)
      v100 = 0x80000000;
    if (SHIDWORD(v43) <= 0x1FFFFFF)
      v101 = v100;
    else
      v101 = 0x7FFFFFFF;
    if ((int)v43 >= -33554432)
      v102 = (_DWORD)v43 << 6;
    else
      v102 = 0x80000000;
    if (v101 == 0x80000000)
      v103 = 0x7FFFFFFF;
    else
      v103 = -v101;
    if (v97 == 0x80000000)
      v104 = 0x7FFFFFFF;
    else
      v104 = -v97;
    v19 = __OFADD__(v94, v103);
    v105 = v94 + v103;
    if (v19)
      v94 = (v94 >> 31) + 0x7FFFFFFF;
    else
      v94 = v105;
    if (__OFADD__((_DWORD)v95, v104))
      v95 = (v95 >> 31) + 0x7FFFFFFF;
    else
      v95 = (v95 + v104);
    v19 = __OFADD__(v101, v99);
    v106 = v101 + v99;
    if (v19)
      v106 = (v101 >> 31) + 0x7FFFFFFF;
    if ((int)v43 > 0x1FFFFFF)
      v102 = 0x7FFFFFFF;
    v19 = __OFADD__(v97, v102);
    v107 = v97 + v102;
    if (v19)
      v107 = (v97 >> 31) + 0x7FFFFFFF;
    v108 = v96 + v106;
    if (__OFADD__((_DWORD)v96, v106))
      v108 = (v96 >> 31) + 0x7FFFFFFF;
    v19 = __OFADD__(HIDWORD(v96), v107);
    v109 = (HIDWORD(v96) + v107);
    if (v19)
      v109 = ((HIDWORD(v96) >> 31) + 0x7FFFFFFF);
    v96 = v108 | (unint64_t)(v109 << 32);
  }
  else if ((*((_BYTE *)a2 + 52) & 7) == 4 && (*((_BYTE *)a2 + 53) & 1) == 0 && (*((_BYTE *)a2 + 53) & 0x10) != 0)
  {
    v94 = *((_DWORD *)a2 + 38);
    v95 = *((unsigned int *)a2 + 39);
    v96 = *((_QWORD *)a2 + 20);
  }
  result = 0;
  if ((int)v96 >= 1 && SHIDWORD(v96) >= 1)
  {
    v110 = (_OWORD *)((char *)this + 116);
    v111 = (float)(int)v94 * 0.015625;
    v112 = (float)(int)v95 * 0.015625;
    v113 = (float)(int)v96 * 0.015625;
    v114 = (float)SHIDWORD(v96) * 0.015625;
    if (*((float *)this + 29) == v111
      && *((float *)this + 30) == v112
      && *((float *)this + 31) == v113
      && *((float *)this + 32) == v114)
    {
      *(_OWORD *)(v73 + 60) = *v110;
      *(float32x2_t *)&v115 = WebCore::Filter::clampFilterRegionIfNeeded((WebCore::Filter *)v73);
      if (*(_BYTE *)(v73 + 76))
      {
        v116 = *((_QWORD *)this + 18);
        if (v116 && ((*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v116 + 24))(v116, v115) & 1) != 0)
        {
          v117 = (_OWORD *)((char *)this + 88);
          *(_OWORD *)((char *)this + 88) = *(_OWORD *)a5;
          v118 = *((_DWORD *)a6 + 2);
          if (v118 >= 1)
          {
            v119 = *((_DWORD *)a6 + 3);
            if (v119 >= 1)
            {
              v120 = *((_DWORD *)this + 24);
              if (v120 < 1 || (v121 = *((_DWORD *)this + 25), v121 <= 0))
              {
                *v117 = *(_OWORD *)a6;
              }
              else
              {
                v122 = *((_DWORD *)this + 22);
                v123 = *((_DWORD *)this + 23);
                v125 = *(_DWORD *)a6;
                v124 = *((_DWORD *)a6 + 1);
                if (*(_DWORD *)a6 >= (signed int)v122)
                  v126 = v122;
                else
                  v126 = v125;
                if ((int)v124 >= (int)v123)
                  v127 = v123;
                else
                  v127 = v124;
                v19 = __OFADD__(v122, v120);
                v128 = v122 + v120;
                if (v19)
                  v128 = (v122 >> 31) + 0x7FFFFFFF;
                v19 = __OFADD__(v125, v118);
                v129 = v125 + v118;
                if (v19)
                  v129 = (v125 >> 31) + 0x7FFFFFFF;
                if (v128 > v129)
                  v129 = v128;
                v19 = __OFADD__(v123, v121);
                v130 = v123 + v121;
                if (v19)
                  v130 = (v123 >> 31) + 0x7FFFFFFF;
                v19 = __OFADD__(v124, v119);
                v131 = v124 + v119;
                if (v19)
                  v131 = (v124 >> 31) + 0x7FFFFFFF;
                if (v130 > v131)
                  v131 = v130;
                *(_QWORD *)v117 = v126 | (v127 << 32);
                v19 = __OFSUB__(v129, (_DWORD)v126);
                v132 = v129 - v126;
                if (v19)
                  v132 = (v129 >> 31) + 0x7FFFFFFF;
                *((_DWORD *)this + 24) = v132;
                v19 = __OFSUB__(v131, (_DWORD)v127);
                v133 = v131 - v127;
                if (v19)
                  v133 = (v131 >> 31) + 0x7FFFFFFF;
                *((_DWORD *)this + 25) = v133;
              }
            }
          }
          v135 = *((_DWORD *)this + 22);
          v134 = *((_DWORD *)this + 23);
          if (v135 <= (int)v94)
            v136 = v94;
          else
            v136 = *((_DWORD *)this + 22);
          if ((int)v134 <= (int)v95)
            v137 = v95;
          else
            v137 = v134;
          v138 = *((_DWORD *)this + 24);
          v19 = __OFADD__(v135, v138);
          v139 = v135 + v138;
          if (v19)
            v139 = (v135 >> 31) + 0x7FFFFFFF;
          v140 = v94 + v96;
          if (__OFADD__(v94, (_DWORD)v96))
            v140 = (v94 >> 31) + 0x7FFFFFFF;
          v141 = a2;
          if (v140 < v139)
            v139 = v140;
          v142 = *((_DWORD *)this + 25);
          v19 = __OFADD__(v134, v142);
          v143 = v134 + v142;
          if (v19)
            v143 = (v134 >> 31) + 0x7FFFFFFF;
          v144 = v95 + HIDWORD(v96);
          if (__OFADD__((_DWORD)v95, HIDWORD(v96)))
            v144 = (v95 >> 31) + 0x7FFFFFFF;
          if (v144 >= v143)
            v144 = v143;
          if ((int)v136 >= v139 || (int)v137 >= v144)
          {
            v139 = 0;
            v144 = 0;
            v136 = 0;
            v137 = 0;
          }
          *(_QWORD *)v117 = v136 | (unint64_t)(v137 << 32);
          v145 = v139 - v136;
          if (__OFSUB__(v139, v136))
            v145 = (v139 >> 31) + 0x7FFFFFFF;
          v19 = __OFSUB__(v144, (_DWORD)v137);
          v146 = (v144 - v137);
          if (v19)
            v146 = (v144 >> 31) + 0x7FFFFFFF;
          *((_QWORD *)this + 12) = v145 | (unint64_t)(v146 << 32);
          v147 = 1;
LABEL_284:
          *((_QWORD *)this + 9) = 0;
          *((_QWORD *)this + 10) = 0;
          if (v147)
          {
            result = *((_QWORD *)this + 18);
            if (result)
            {
LABEL_319:
              v180 = (float32x4_t)vdupq_n_s32(0x3C800000u);
              v181 = vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)((char *)this + 88)), v180);
              v192 = vmulq_f32(vcvtq_f32_s32(*a7), v180);
              v193 = v181;
              (*(void (**)(uint64_t, WebCore::GraphicsContext *, float32x4_t *, float32x4_t *))(*(_QWORD *)result + 32))(result, a3, &v193, &v192);
              return (*(uint64_t (**)(_QWORD, WebCore::GraphicsContext *))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), a3);
            }
          }
          if ((*((_BYTE *)v141 + 52) & 7) == 4
            && (*((_BYTE *)v141 + 53) & 1) == 0
            && (*((_BYTE *)v141 + 53) & 0x10) != 0)
          {
            (*(void (**)(WebCore::RenderElement *))(*(_QWORD *)v141 + 240))(v141);
            v164.i32[1] = v182;
            v164.i64[1] = __PAIR64__(v184, v183);
          }
          else
          {
            v164 = vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)((char *)this + 56)), (float32x4_t)vdupq_n_s32(0x3C800000u));
          }
          v193 = v164;
          v165 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
          if (v165 != -1)
          {
            v192.i64[0] = (uint64_t)&v194;
            v195 = &v192;
            std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v195, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
          }
          v166 = *(_QWORD *)(v73 + 8);
          if (__ldaxr((unsigned __int8 *)v166))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v166))
          {
            goto LABEL_294;
          }
          MEMORY[0x19AEA534C](v166);
LABEL_294:
          ++*(_QWORD *)(v166 + 8);
          v168 = __ldxr((unsigned __int8 *)v166);
          if (v168 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v166))
            {
LABEL_299:
              v195 = (float32x4_t *)v73;
              WebCore::GraphicsContextSwitcher::create((uint64_t)a3, (const WebCore::FloatRect *)&v193, (uint64_t)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, (WebCore::Filter **)&v195, 0, (WTF ***)&v192);
              v170 = v192.i64[0];
              v192.i64[0] = 0;
              v171 = *((_QWORD *)this + 18);
              *((_QWORD *)this + 18) = v170;
              if (v171)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v171 + 8))(v171);
                v192.i64[0] = 0;
              }
              v172 = (WebCore::Filter *)v195;
              v195 = 0;
              if (!v172)
              {
LABEL_318:
                result = *((_QWORD *)this + 18);
                if (!result)
                  return result;
                goto LABEL_319;
              }
              v173 = *((_QWORD *)v172 + 1);
              if (__ldaxr((unsigned __int8 *)v173))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v173))
              {
                goto LABEL_306;
              }
              MEMORY[0x19AEA534C](v173);
LABEL_306:
              v175 = *(_QWORD *)(v173 + 8);
              v176 = v175 - 1;
              *(_QWORD *)(v173 + 8) = v175 - 1;
              if (v175 == 1)
              {
                v187 = *(_QWORD *)(v173 + 16);
                v177 = *(_QWORD *)(v173 + 24);
                *(_QWORD *)(v173 + 24) = 0;
                v178 = v187 != 0;
              }
              else
              {
                v177 = 0;
                v178 = 1;
              }
              v179 = __ldxr((unsigned __int8 *)v173);
              if (v179 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v173))
                {
LABEL_313:
                  if (!v176)
                  {
                    if (v177)
                      (*(void (**)(uint64_t))(*(_QWORD *)v177 + 8))(v177);
                    if (!v178)
                      WTF::fastFree((WTF *)v173, v169);
                  }
                  goto LABEL_318;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v173);
              goto LABEL_313;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v166);
          goto LABEL_299;
        }
        v147 = 1;
        goto LABEL_280;
      }
      v163 = 1;
    }
    else
    {
      *((float *)this + 29) = v111;
      *((float *)this + 30) = v112;
      *((float *)this + 31) = v113;
      *((float *)this + 32) = v114;
      *(_OWORD *)(v73 + 60) = *v110;
      WebCore::Filter::clampFilterRegionIfNeeded((WebCore::Filter *)v73);
      v163 = 0;
      v147 = 0;
      if (*(_BYTE *)(v73 + 76))
      {
LABEL_280:
        *((_QWORD *)this + 11) = v94 | (unint64_t)(v95 << 32);
        *((_QWORD *)this + 12) = v96;
LABEL_283:
        v141 = a2;
        goto LABEL_284;
      }
    }
    *(_OWORD *)((char *)this + 88) = *(_OWORD *)a5;
    v147 = v163;
    goto LABEL_283;
  }
  return result;
}

double WebCore::RenderLayerModelObject::destroyLayer(WebCore::RenderLayerModelObject *this, void *a2)
{
  WebCore::RenderLayer *v3;
  uint64_t v4;
  void *v5;
  double result;

  v3 = (WebCore::RenderLayer *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
  {
    WebCore::RenderLayer::~RenderLayer(v3, a2);
    if (*(_DWORD *)(v4 + 8))
    {
      result = 0.0;
      *(_OWORD *)(v4 + 256) = 0u;
      *(_OWORD *)(v4 + 272) = 0u;
      *(_OWORD *)(v4 + 224) = 0u;
      *(_OWORD *)(v4 + 240) = 0u;
      *(_OWORD *)(v4 + 192) = 0u;
      *(_OWORD *)(v4 + 208) = 0u;
      *(_OWORD *)(v4 + 160) = 0u;
      *(_OWORD *)(v4 + 176) = 0u;
      *(_OWORD *)(v4 + 128) = 0u;
      *(_OWORD *)(v4 + 144) = 0u;
      *(_OWORD *)(v4 + 96) = 0u;
      *(_OWORD *)(v4 + 112) = 0u;
      *(_OWORD *)(v4 + 64) = 0u;
      *(_OWORD *)(v4 + 80) = 0u;
      *(_OWORD *)(v4 + 32) = 0u;
      *(_OWORD *)(v4 + 48) = 0u;
      *(_OWORD *)v4 = 0u;
      *(_OWORD *)(v4 + 16) = 0u;
    }
    else
    {
      bmalloc::api::isoDeallocate((bmalloc::api *)v4, v5);
    }
  }
  return result;
}

uint64_t WebCore::RenderLayerModelObject::hasSelfPaintingLayer(WebCore::RenderLayerModelObject *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 18);
  if (v1)
    return (*(unsigned __int8 *)(v1 + 25) >> 3) & 1;
  else
    return 0;
}

uint64_t WebCore::RenderLayerModelObject::cachedLayerClippedOverflowRect@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  char v2;
  uint64_t v3;

  if ((*(_BYTE *)(this + 21) & 0x80) != 0 && (v3 = *(_QWORD *)(this + 144), (*(_BYTE *)(v3 + 30) & 2) != 0))
  {
    *(_OWORD *)a2 = *(_OWORD *)(v3 + 112);
    v2 = 1;
  }
  else
  {
    v2 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v2;
  return this;
}

uint64_t WebCore::RenderLayerModelObject::animationPaused(uint64_t this, double a2, const WTF::String *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 144);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 256);
    if (v4)
      return (*(uint64_t (**)(_QWORD, const WTF::String *, double))(**(_QWORD **)(v4 + 72) + 432))(*(_QWORD *)(v4 + 72), a3, a2);
  }
  return this;
}

WebCore::RenderLayerBacking *WebCore::RenderLayerModelObject::animationFinished(WebCore::RenderLayerBacking *this, const WTF::String *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 18);
  if (v2)
  {
    this = *(WebCore::RenderLayerBacking **)(v2 + 256);
    if (this)
      return (WebCore::RenderLayerBacking *)WebCore::RenderLayerBacking::animationFinished(this, a2);
  }
  return this;
}

uint64_t WebCore::RenderLayerModelObject::transformRelatedPropertyDidChange(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(this + 144);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 256);
    if (v2)
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 72) + 448))(*(_QWORD *)(v2 + 72));
  }
  return this;
}

uint64_t WebCore::RenderLayerModelObject::suspendAnimations(uint64_t this, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(this + 144);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 256);
    if (v3)
      return (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(v3 + 72) + 456))(*(_QWORD *)(v3 + 72), a2);
  }
  return this;
}

BOOL WebCore::RenderLayerModelObject::shouldPaintSVGRenderer(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t v6;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 80) + 40))(*(_QWORD *)(a2 + 80)) & 1) != 0
    || a3 && (*(_WORD *)(a2 + 16) & a3) == 0)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 != a1)
      return 0;
  }
  return (*(_BYTE *)(*(_QWORD *)(a1 + 104) + 239) & 4) == 0
      && (*(_DWORD *)(a1 + 120) & 0x30) != 0x10
      && (*(_QWORD *)(a1 + 96) & 0x1FLL) != 26;
}

uint64_t WebCore::RenderLayerModelObject::computeVisibleRectsInSVGContainer@<X0>(WebCore::RenderLayerModelObject *a1@<X2>, uint64_t result@<X0>, __int128 *a3@<X1>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _BYTE *v10;
  __int128 v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  __int128 v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  WebCore::TransformationMatrix *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  BOOL v34;

  if (a1 == (WebCore::RenderLayerModelObject *)result
    || (v9 = result, v34 = 0,
                     (result = WebCore::RenderObject::container((WebCore::RenderObject *)result, a1, &v34)) == 0))
  {
    v16 = a3[1];
    *(_OWORD *)a5 = *a3;
    *(_OWORD *)(a5 + 16) = v16;
    v17 = *((_DWORD *)a3 + 8);
    goto LABEL_12;
  }
  v10 = (_BYTE *)result;
  v11 = a3[1];
  v31 = *a3;
  v32 = v11;
  v33 = *((_DWORD *)a3 + 8);
  if (!v9)
    goto LABEL_42;
  v12 = *(_BYTE *)(v9 + 52) & 7;
  v13 = *(unsigned __int8 *)(v9 + 53);
  v14 = (v13 & 1) == 0 && v12 == 4;
  if (!v14)
  {
    v14 = v12 == 1;
    v18 = (v13 >> 3) & 1;
    if (!v14)
      v18 = 0;
    if (v18 == 1)
    {
      v15 = *(_DWORD *)(v9 + 16);
      *(_DWORD *)(v9 + 16) = v15 + 1;
      if (v15 == -1)
        goto LABEL_44;
      goto LABEL_17;
    }
LABEL_42:
    v20 = 0;
    LODWORD(v19) = 0;
    goto LABEL_18;
  }
  v15 = *(_DWORD *)(v9 + 16);
  *(_DWORD *)(v9 + 16) = v15 + 1;
  if (v15 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x196405F30);
  }
LABEL_17:
  v19 = *(_QWORD *)(v9 + 152);
  v20 = HIDWORD(v19);
  *(_DWORD *)(v9 + 16) = v15;
LABEL_18:
  if ((*(_BYTE *)(v9 + 21) & 0x80) != 0)
  {
    v21 = *(_QWORD *)(v9 + 144);
    v22 = *(WebCore::TransformationMatrix **)(v21 + 200);
    if (v22)
    {
      *(_QWORD *)&v31 = WebCore::TransformationMatrix::mapRect(*(WebCore::TransformationMatrix **)(v21 + 200), (const WebCore::LayoutRect *)&v31);
      *((_QWORD *)&v31 + 1) = v23;
      if ((_BYTE)v33)
      {
        v24 = WebCore::TransformationMatrix::mapRect(v22, (const WebCore::LayoutRect *)&v32);
        if ((_BYTE)v33)
        {
          *(_QWORD *)&v32 = v24;
          *((_QWORD *)&v32 + 1) = v25;
          goto LABEL_23;
        }
        __break(1u);
LABEL_44:
        __break(0xC471u);
        JUMPOUT(0x1964060D0);
      }
    }
  }
LABEL_23:
  v26 = (v31 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__((_DWORD)v31, (_DWORD)v19))
    v26 = v31 + v19;
  v27 = (DWORD1(v31) >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(DWORD1(v31), v20))
    v27 = DWORD1(v31) + v20;
  *(_QWORD *)&v31 = __PAIR64__(v27, v26);
  if ((_BYTE)v33)
  {
    v28 = (v32 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__((_DWORD)v32, (_DWORD)v19))
      v28 = v32 + v19;
    v29 = DWORD1(v32) + v20;
    if (__OFADD__(DWORD1(v32), v20))
      v29 = (DWORD1(v32) >> 31) + 0x7FFFFFFF;
    *(_QWORD *)&v32 = __PAIR64__(v29, v28);
  }
  if ((v10[22] & 1) != 0)
  {
    if ((v10[45] & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1964060F0);
    }
    result = (*(uint64_t (**)(_BYTE *, __int128 *, WebCore::RenderLayerModelObject *, uint64_t))(*(_QWORD *)v10 + 816))(v10, &v31, a1, a4);
    if ((result & 1) == 0)
    {
      if ((a4 & 0x100000000) != 0)
      {
        *(_BYTE *)a5 = 0;
        *(_BYTE *)(a5 + 36) = 0;
        return result;
      }
      v30 = v32;
      *(_OWORD *)a5 = v31;
      *(_OWORD *)(a5 + 16) = v30;
      v17 = v33;
LABEL_12:
      *(_DWORD *)(a5 + 32) = v17;
      *(_BYTE *)(a5 + 36) = 1;
      return result;
    }
  }
  return (*(uint64_t (**)(_BYTE *, __int128 *, WebCore::RenderLayerModelObject *, uint64_t))(*(_QWORD *)v10 + 472))(v10, &v31, a1, a4);
}

WebCore::RenderObject *WebCore::RenderLayerModelObject::mapLocalToSVGContainer(WebCore::RenderObject *result, const WebCore::RenderLayerModelObject *a2, uint64_t a3, int a4, _BYTE *a5)
{
  float32x2_t v5;
  float32x2_t v6;
  uint64_t v11;
  double (*v12)[4][4];
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float64x2_t *v26;
  double v27;
  int v28;
  int v29;
  double v30;
  int v31;
  __int128 *v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  BOOL v37;
  _QWORD v38[16];
  char v39;
  float64x2_t v40[8];
  float32x2_t v41[11];

  if (a2 != result)
  {
    v41[9] = v5;
    v41[10] = v6;
    v11 = (uint64_t)result;
    v37 = 0;
    result = (WebCore::RenderObject *)WebCore::RenderObject::container(result, a2, &v37);
    if (result)
    {
      v13 = (uint64_t)result;
      v14 = *(_DWORD *)(v11 + 20);
      if ((v14 & 0x20000) != 0)
      {
        v15 = v11;
        if ((*(_BYTE *)(v11 + 45) & 2) != 0)
          v15 = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8);
        v16 = *(_QWORD *)(v15 + 88);
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 40) + 20)
          || (v17 = *(_QWORD **)(v16 + 40), v17[41])
          || v17[38]
          || v17[39]
          || v17[40]
          || (v14 & 0x100000) != 0)
        {
          a4 &= ~1u;
        }
      }
      if (a5)
        *a5 = a4 & 1;
      v18 = *(_DWORD *)(a3 + 112);
      if (v18)
      {
        v19 = *(_DWORD *)(a3 + 96);
        v20 = *(_DWORD *)(a3 + 100);
        if (v19 == 0x80000000)
          v21 = 0x7FFFFFFFLL;
        else
          v21 = -v19;
        if (v20 == 0x80000000)
          v22 = 0x7FFFFFFFLL;
        else
          v22 = -v20;
        v23 = v21 | (v22 << 32);
      }
      else
      {
        v23 = *(_QWORD *)(a3 + 96);
      }
      v24 = (float)((float)(int)v23 * 0.015625) + *(float *)a3;
      v25 = (float)((float)SHIDWORD(v23) * 0.015625) + *(float *)(a3 + 4);
      v41[0].f32[0] = v24;
      v41[0].f32[1] = v25;
      v26 = *(float64x2_t **)(a3 + 80);
      if (v26)
      {
        if (v18)
        {
          WebCore::TransformationMatrix::inverse(v26->f64, v12, (uint64_t)v38);
          if (v39)
            v32 = (__int128 *)v38;
          else
            v32 = &constinit_5;
          v33 = (float64x2_t)v32[5];
          v40[4] = (float64x2_t)v32[4];
          v40[5] = v33;
          v34 = (float64x2_t)v32[7];
          v40[6] = (float64x2_t)v32[6];
          v40[7] = v34;
          v35 = (float64x2_t)v32[1];
          v40[0] = (float64x2_t)*v32;
          v40[1] = v35;
          v36 = (float64x2_t)v32[3];
          v40[2] = (float64x2_t)v32[2];
          v40[3] = v36;
          LODWORD(v24) = WebCore::TransformationMatrix::projectPoint(v40, (const WebCore::FloatPoint *)v41, 0).u32[0];
        }
        else
        {
          LODWORD(v24) = WebCore::TransformationMatrix::mapPoint(v26, v41).u32[0];
        }
      }
      v27 = v24 * 64.0;
      if (v27 > -2147483650.0)
        v28 = (int)v27;
      else
        v28 = 0x80000000;
      if (v27 < 2147483650.0)
        v29 = v28;
      else
        v29 = 0x7FFFFFFF;
      LODWORD(v40[0].f64[0]) = v29;
      v30 = v25 * 64.0;
      if (v30 >= 2147483650.0)
      {
        v31 = 0x7FFFFFFF;
      }
      else if (v30 <= -2147483650.0)
      {
        v31 = 0x80000000;
      }
      else
      {
        v31 = (int)v30;
      }
      HIDWORD(v40[0].f64[0]) = v31;
      v38[0] = (*(uint64_t (**)(uint64_t, uint64_t, float64x2_t *, _QWORD))(*(_QWORD *)v11 + 360))(v11, v13, v40, 0);
      WebCore::RenderObject::pushOntoTransformState(v11, (WebCore::TransformState *)a3, a4, 0, v13, (const WebCore::LayoutSize *)v38, 0);
      return (WebCore::RenderObject *)(*(uint64_t (**)(uint64_t, const WebCore::RenderLayerModelObject *, uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v13 + 576))(v13, a2, a3, a4 & 0xFFFFFFFB, a5);
    }
  }
  return result;
}

void WebCore::RenderLayerModelObject::applySVGTransform(WebCore::MotionPath *a1, float64x2_t *a2, _QWORD *a3, WebCore::RenderStyle *a4, const WebCore::FloatRect *a5, uint64_t a6, uint64_t a7, char a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12)
{
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  double *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double *v41;
  const WebCore::RenderElement *v42;
  const WebCore::AffineTransform *v43;
  uint64_t v44;
  _BOOL4 v45;
  double v46;
  double v47;
  _QWORD *v48;
  _BOOL4 v49;
  BOOL v50;
  BOOL v51;
  char v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  float v59;
  float v60;
  BOOL v61;
  BOOL v62;
  float64x2_t v63;
  _BOOL4 v64;
  const double *v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  int v74;
  char v75;
  float64x2_t v76;
  double v77;
  double v78;
  double v79;
  float64x2_t v80;
  float64x2_t v81;
  uint64_t *v82;
  uint64_t v83;
  double v84;
  double v85;
  _OWORD v86[4];
  char v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  double v94;
  double v95;
  __int128 v96;
  float64x2x4_t v97;
  float64x2x4_t v98;
  float64x2x4_t v99;
  float64x2x4_t v100;

  v19 = (_QWORD *)a3[26];
  v20 = v19[3];
  if (!v20 || !*(_DWORD *)(v20 - 12))
    goto LABEL_2;
  v56 = *(unsigned int *)(v20 - 4);
  if ((_DWORD)v56)
  {
    v57 = 8 * v56;
    v58 = (uint64_t *)v19[3];
    while ((unint64_t)(*v58 + 1) <= 1)
    {
      ++v58;
      v57 -= 8;
      if (!v57)
        goto LABEL_2;
    }
  }
  else
  {
    v58 = (uint64_t *)v19[3];
  }
  v82 = (uint64_t *)(v20 + 8 * v56);
  if (v58 == v82)
    goto LABEL_2;
  v83 = *v58;
LABEL_95:
  if (!*(_QWORD *)(v83 + 8))
  {
    while (++v58 != v82)
    {
      v83 = *v58;
      if ((unint64_t)(*v58 + 1) > 1)
      {
        if (v58 != v82)
          goto LABEL_95;
        break;
      }
    }
LABEL_2:
    v21 = v19 + 5;
    goto LABEL_3;
  }
  v21 = v19 + 6;
LABEL_3:
  v22 = *v21;
  v23 = *(unsigned int *)(v22 + 44);
  if ((_DWORD)v23)
  {
    v24 = *(uint64_t **)(v22 + 32);
    v25 = 8 * v23;
    a9.n128_u64[0] = 1.0;
    v26 = 0.0;
    v27 = 0.0;
    a10.n128_u64[0] = 0;
    a11.n128_u64[0] = 0;
    a12.n128_u64[0] = 1.0;
    do
    {
      v28 = *v24++;
      v29 = *(double **)(v28 + 40);
      v30 = v29[4];
      v31 = v29[5];
      v32 = a11.n128_f64[0] * v31 + v30 * a12.n128_f64[0];
      v33 = a9.n128_f64[0] * v31 + v30 * a10.n128_f64[0];
      v34 = v29[6];
      v35 = v29[7];
      v36 = a11.n128_f64[0] * v35 + v34 * a12.n128_f64[0];
      v37 = a9.n128_f64[0] * v35 + v34 * a10.n128_f64[0];
      v38 = v29[8];
      v39 = v29[9];
      v27 = v27 + a11.n128_f64[0] * v39 + v38 * a12.n128_f64[0];
      v40 = a9.n128_f64[0] * v39 + v38 * a10.n128_f64[0];
      a9.n128_f64[0] = v37;
      v26 = v26 + v40;
      a10.n128_f64[0] = v33;
      a11.n128_f64[0] = v36;
      a12.n128_f64[0] = v32;
      v25 -= 8;
    }
    while (v25);
  }
  else
  {
    v37 = 1.0;
    v26 = 0.0;
    v27 = 0.0;
    v36 = 0.0;
    v33 = 0.0;
    v32 = 1.0;
  }
  v84 = v26;
  v85 = v27;
  v41 = (double *)(*(uint64_t (**)(_QWORD *, __n128, __n128, __n128, __n128))(*a3 + 1264))(a3, a9, a10, a11, a12);
  v43 = (const WebCore::AffineTransform *)v41;
  v44 = *((_QWORD *)a4 + 1);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 32) + 40) + 20))
  {
    v45 = 1;
    v46 = v84;
    v47 = v85;
  }
  else
  {
    v48 = *(_QWORD **)(v44 + 40);
    v46 = v84;
    v47 = v85;
    v45 = v48[41] || v48[38] || v48[40] || v48[39] != 0;
  }
  v49 = v32 != 1.0;
  if (v33 != 0.0)
    v49 = 1;
  if (v36 != 0.0)
    v49 = 1;
  if (v37 != 1.0)
    v49 = 1;
  if (v49
    || v47 != 0.0
    || (v46 == 0.0 ? (v50 = *(_BYTE *)(a6 + 48) == 0) : (v50 = 0),
        v50 ? (v51 = *(_BYTE *)(a7 + 48) == 0) : (v51 = 0),
        !v51 || v45 || v41))
  {
    v52 = !v45;
    v53 = 0.0;
    if ((a8 & 1) == 0)
    {
LABEL_33:
      v54 = 0.0;
      v55 = 0.0;
LABEL_54:
      v61 = v55 == 0.0;
      if (v54 != 0.0)
        v61 = 0;
      v62 = v53 == 0.0 && v61;
      if (!v62)
      {
        v63 = vaddq_f64(a2[7], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a2[3], v54), a2[1], v55), a2[5], v53));
        a2[6] = vaddq_f64(a2[6], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a2[2], v54), *a2, v55), a2[4], v53));
        a2[7] = v63;
      }
      if (v43)
        WebCore::TransformationMatrix::multiplyAffineTransform(a2, v43);
      if (*(_BYTE *)(a6 + 48))
        WebCore::TransformationMatrix::multiplyAffineTransform(a2, (const WebCore::AffineTransform *)a6);
      if ((v52 & 1) != 0)
      {
        v64 = v32 == 1.0;
        if (v33 != 0.0)
          v64 = 0;
        if (v36 != 0.0)
          v64 = 0;
        if (v37 != 1.0)
          v64 = 0;
        if (!v64 || v85 != 0.0 || v84 != 0.0)
        {
          if (v64)
          {
            v76 = vaddq_f64(a2[7], vmlaq_n_f64(vmulq_n_f64(a2[3], v84), a2[1], v85));
            a2[6] = vaddq_f64(a2[6], vmlaq_n_f64(vmulq_n_f64(a2[2], v84), *a2, v85));
            a2[7] = v76;
          }
          else
          {
            *(double *)&v88 = v32;
            *((double *)&v88 + 1) = v33;
            v89 = 0uLL;
            *(double *)&v90 = v36;
            *((double *)&v90 + 1) = v37;
            v91 = 0uLL;
            v92 = constinit_13;
            v93 = unk_1969F8D70;
            v94 = v85;
            v95 = v84;
            v96 = xmmword_1968A14C0;
            v65 = (const double *)&v88;
            v66 = *a2;
            v67 = a2[1];
            v68 = a2[2];
            v69 = a2[3];
            v70 = a2[4];
            v71 = a2[5];
            v72 = a2[6];
            v73 = a2[7];
            v99 = vld4q_dup_f64(v65);
            v65 += 4;
            v97 = vld4q_dup_f64(v65);
            v65 += 4;
            *a2 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v99.val[0], *a2), v99.val[1], v68), v99.val[2], v70), v99.val[3], v72);
            a2[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v99.val[0], v67), v99.val[1], v69), v99.val[2], v71), v99.val[3], v73);
            v100 = vld4q_dup_f64(v65);
            v65 += 4;
            a2[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v97.val[0], v66), v97.val[1], v68), v97.val[2], v70), v97.val[3], v72);
            a2[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v97.val[0], v67), v97.val[1], v69), v97.val[2], v71), v97.val[3], v73);
            v98 = vld4q_dup_f64(v65);
            a2[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v100.val[0], v66), v100.val[1], v68), v100.val[2], v70), v100.val[3], v72);
            a2[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v100.val[0], v67), v100.val[1], v69), v100.val[2], v71), v100.val[3], v73);
            a2[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v98.val[0], v66), v98.val[1], v68), v98.val[2], v70), v98.val[3], v72);
            a2[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v98.val[0], v67), v98.val[1], v69), v98.val[2], v71), v98.val[3], v73);
          }
        }
      }
      else
      {
        v88 = *(_OWORD *)a5;
        LOBYTE(v89) = 0;
        LOBYTE(v93) = 0;
        BYTE4(v93) = 0;
        if (a1)
        {
          WebCore::MotionPath::motionPathDataForRenderer(a1, v42, v86);
          v91 = v86[2];
          v92 = v86[3];
          LOBYTE(v93) = v87;
          v89 = v86[0];
          v90 = v86[1];
          v74 = *((_BYTE *)a1 + 52) & 7;
          if (v74 == 4 && (*((_BYTE *)a1 + 53) & 1) == 0)
            v75 = 1;
          else
            v75 = (v74 == 4) & *((_BYTE *)a1 + 53);
          BYTE4(v93) = v75;
        }
        WebCore::RenderStyle::applyCSSTransform(a4, a2, (WebCore::FloatRect *)&v88, a8);
      }
      if (*(_BYTE *)(a7 + 48))
        WebCore::TransformationMatrix::multiplyAffineTransform(a2, (const WebCore::AffineTransform *)a7);
      if (!v62)
      {
        v77 = (float)-v55;
        v78 = (float)-v54;
        v79 = (float)-v53;
        v80 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a2[2], v78), *a2, v77), a2[4], v79);
        v81 = vaddq_f64(a2[7], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a2[3], v78), a2[1], v77), a2[5], v79));
        a2[6] = vaddq_f64(a2[6], v80);
        a2[7] = v81;
      }
      return;
    }
    if ((!*(_BYTE *)(a6 + 48)
       || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)a6, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(*(float64x2_t *)(a6 + 16), (float64x2_t)xmmword_1968A14C0))))) & 1) == 0)&& (!*(_BYTE *)(a7 + 48)|| (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)a7, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(*(float64x2_t *)(a7 + 16), (float64x2_t)xmmword_1968A14C0))))) & 1) == 0)&& (!v41 || *v41 == 1.0 && v41[1] == 0.0 && v41[2] == 0.0 && v41[3] == 1.0))
    {
      if (v45)
      {
        if (!WebCore::RenderStyle::affectedByTransformOrigin(a4))
        {
          v52 = 0;
          goto LABEL_33;
        }
      }
      else if (!v49)
      {
        v52 = 1;
        goto LABEL_33;
      }
    }
    v55 = WebCore::RenderStyle::computeTransformOrigin(a4, a5);
    v54 = v59;
    v53 = v60;
    goto LABEL_54;
  }
}

uint64_t WebCore::RenderLayerModelObject::updateHasSVGTransformFlags(WebCore::RenderLayerModelObject *this)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  unsigned int *v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  float v11;
  int v12;

  result = (*(uint64_t (**)(WebCore::RenderLayerModelObject *))(*(_QWORD *)this + 832))(this);
  if ((result & 1) != 0
    || (v3 = *((_QWORD *)this + 11), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 40) + 20))
    || (v10 = *(_QWORD *)(v3 + 40), *(_QWORD *)(v10 + 328))
    || *(_QWORD *)(v10 + 320)
    || *(_QWORD *)(v10 + 312)
    || *(_QWORD *)(v10 + 304)
    || (*(_DWORD *)(v10 + 636) & 0x180) == 0x80)
  {
    v6 = *((_DWORD *)this + 5);
    v5 = (unsigned int *)((char *)this + 20);
    v4 = v6;
LABEL_4:
    v7 = 0x20000;
    goto LABEL_5;
  }
  v11 = *(float *)(v10 + 260);
  v12 = *((_DWORD *)this + 5);
  v5 = (unsigned int *)((char *)this + 20);
  v4 = v12;
  if (v11 != -1.0)
    goto LABEL_4;
  v7 = 0;
LABEL_5:
  v8 = v4 & 0xFFEDFFFF;
  if ((_DWORD)result)
    v9 = 0x100000;
  else
    v9 = 0;
  *v5 = v8 | v7 | v9;
  return result;
}

uint64_t WebCore::RenderLayerModelObject::svgClipperResourceFromStyle(WebCore::RenderLayerModelObject *this)
{
  WebCore::ReferencedSVGResources *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::Node *v13;

  v2 = *(WebCore::ReferencedSVGResources **)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40);
  if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 1) + 680) + 680) & 0x800000000000) == 0)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 264);
  if (!v3 || *(_DWORD *)(v3 + 12))
    return 0;
  ++*(_DWORD *)(v3 + 8);
  v5 = *(_QWORD *)v2;
  if (*(_QWORD *)v2)
    v6 = (*(_WORD *)(*(_QWORD *)v2 + 28) & 0x80) == 0;
  else
    v6 = 1;
  if (!v6 && !*(_BYTE *)(v5 + 193))
  {
    v11 = *(_QWORD *)(v5 + 200);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        if (*(_WORD *)(*(_QWORD *)(v12 + 96) + 10) == 242)
          v2 = (WebCore::ReferencedSVGResources *)*((_QWORD *)v2 + 2);
      }
    }
  }
  WebCore::ReferencedSVGResources::referencedClipPathElement(v2, (WebCore::TreeScope *)v3, &v13);
  if (v13)
  {
    result = *((_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFLL;
    if (result)
    {
      if ((*(_BYTE *)((*((_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        goto LABEL_37;
      if (*(_BYTE *)((*((_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 75)
      {
        if (*((_DWORD *)v13 + 6) == 2)
        {
          v10 = *((_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFLL;
          if ((*((_WORD *)v13 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v13);
          result = v10;
        }
        else
        {
          *((_DWORD *)v13 + 6) -= 2;
        }
        goto LABEL_24;
      }
    }
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v13);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
  }
  if ((*((_BYTE *)this + 45) & 1) == 0)
  {
    v7 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v7)
    {
      v8 = *(_WORD *)(v7 + 28);
      if ((v8 & 8) != 0)
      {
        if ((v8 & 0x20) != 0)
          WebCore::TreeScope::addPendingSVGResource((WebCore::TreeScope *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 96), (WTF::StringImpl **)(v3 + 32), (WebCore::SVGElement *)v7);
        goto LABEL_23;
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x196406C40);
    }
  }
LABEL_23:
  result = 0;
LABEL_24:
  if (*(_DWORD *)(v3 + 8) == 1)
  {
    v9 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    return v9;
  }
  else
  {
    --*(_DWORD *)(v3 + 8);
  }
  return result;
}

uint64_t WebCore::RenderLayerModelObject::svgFilterResourceFromStyle(WebCore::RenderLayerModelObject *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v6;
  unsigned int v7;
  WebCore::ReferencedSVGResources *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  __int16 v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::Node *v17;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) == 0)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 32);
  if (*(_DWORD *)(v2 + 20) != 1)
    return 0;
  v3 = **(_QWORD **)(v2 + 8);
  if (!v3 || *(_BYTE *)(v3 + 12))
    return 0;
  v6 = (unsigned int *)(v3 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(WebCore::ReferencedSVGResources **)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40);
  v9 = *(_QWORD *)v8;
  if (*(_QWORD *)v8)
    v10 = (*(_WORD *)(*(_QWORD *)v8 + 28) & 0x80) == 0;
  else
    v10 = 1;
  if (!v10 && !*(_BYTE *)(v9 + 193))
  {
    v15 = *(_QWORD *)(v9 + 200);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 8);
      if (v16)
      {
        if (*(_WORD *)(*(_QWORD *)(v16 + 96) + 10) == 242)
          v8 = (WebCore::ReferencedSVGResources *)*((_QWORD *)v8 + 2);
      }
    }
  }
  WebCore::ReferencedSVGResources::referencedFilterElement(v8, (WebCore::TreeScope *)v3, &v17);
  if (v17)
  {
    v4 = *((_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFLL;
    if (v4)
    {
      if ((*(_BYTE *)((*((_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        goto LABEL_40;
      if (*(_BYTE *)((*((_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 76)
      {
        if (*((_DWORD *)v17 + 6) == 2)
        {
          if ((*((_WORD *)v17 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v17);
        }
        else
        {
          *((_DWORD *)v17 + 6) -= 2;
        }
        goto LABEL_28;
      }
    }
    if (*((_DWORD *)v17 + 6) == 2)
    {
      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v17);
    }
    else
    {
      *((_DWORD *)v17 + 6) -= 2;
    }
  }
  if ((*((_BYTE *)this + 45) & 1) == 0)
  {
    v11 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v11)
    {
      v12 = *(_WORD *)(v11 + 28);
      if ((v12 & 8) != 0)
      {
        if ((v12 & 0x20) != 0)
          WebCore::TreeScope::addPendingSVGResource((WebCore::TreeScope *)(*(_QWORD *)(*(_QWORD *)(v11 + 40) + 8) + 96), (WTF::StringImpl **)(v3 + 24), (WebCore::SVGElement *)v11);
        goto LABEL_27;
      }
LABEL_40:
      __break(0xC471u);
      JUMPOUT(0x196406E48);
    }
  }
LABEL_27:
  v4 = 0;
  do
  {
LABEL_28:
    v13 = __ldaxr(v6);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v6));
  if (!v14)
  {
    atomic_store(1u, (unsigned int *)(v3 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return v4;
}

uint64_t WebCore::RenderLayerModelObject::svgMaskerResourceFromStyle(WebCore::RenderLayerModelObject *this)
{
  WebCore::TreeScope *v2;
  WTF::StringImpl *v3;
  double v4;
  double v5;
  float v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v10;
  const WebCore::StyleImage *v11;
  WebCore::ReferencedSVGResources *v12;
  uint64_t v13;
  BOOL v14;
  WebCore::Node *v15;
  uint64_t v16;
  __int16 v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::Node *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23[5];

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) == 0)
    return 0;
  v2 = *(WebCore::TreeScope **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 48) + 16);
  if (v2)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::TreeScope *))(*(_QWORD *)v2 + 88))(v23, v2);
  }
  else
  {
    v23[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v23);
  }
  v7 = v23[0];
  if (!v23[0])
    return 0;
  if (!*((_DWORD *)v23[0] + 1))
  {
    v8 = 0;
    v23[0] = 0;
LABEL_35:
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v3);
    else
      *(_DWORD *)v7 -= 2;
    return v8;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  *(_DWORD *)(v10 + 24) += 2;
  WebCore::SVGURIReference::fragmentIdentifierFromIRIString((WTF::StringImpl *)v23, (const WTF::String *)v10, &v22, v4, v5, v6);
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v10);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  v12 = *(WebCore::ReferencedSVGResources **)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40);
  v13 = *(_QWORD *)v12;
  if (*(_QWORD *)v12)
    v14 = (*(_WORD *)(*(_QWORD *)v12 + 28) & 0x80) == 0;
  else
    v14 = 1;
  if (!v14 && !*(_BYTE *)(v13 + 193))
  {
    v19 = *(_QWORD *)(v13 + 200);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 8);
      if (v20)
      {
        if (*(_WORD *)(*(_QWORD *)(v20 + 96) + 10) == 242)
          v12 = (WebCore::ReferencedSVGResources *)*((_QWORD *)v12 + 2);
      }
    }
  }
  WebCore::ReferencedSVGResources::referencedMaskElement(v12, v2, v11, &v21);
  v15 = v21;
  if (!v21)
    goto LABEL_25;
  v8 = *((_QWORD *)v21 + 8) & 0xFFFFFFFFFFFFLL;
  if (!v8)
    goto LABEL_23;
  if ((*(_BYTE *)((*((_QWORD *)v21 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    goto LABEL_52;
  if (*(_BYTE *)((*((_QWORD *)v21 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) != 80)
  {
LABEL_23:
    v21 = 0;
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v15);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
LABEL_25:
    if ((*((_BYTE *)this + 45) & 1) != 0 || (v16 = *(_QWORD *)(*((_QWORD *)this + 3) + 8)) == 0)
    {
LABEL_30:
      v8 = 0;
      goto LABEL_31;
    }
    v17 = *(_WORD *)(v16 + 28);
    if ((v17 & 8) != 0)
    {
      if ((v17 & 0x20) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1964070F4);
      }
      WebCore::TreeScope::addPendingSVGResource((WebCore::TreeScope *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 8) + 96), &v22, (WebCore::SVGElement *)v16);
      goto LABEL_30;
    }
LABEL_52:
    __break(0xC471u);
    JUMPOUT(0x1964070D4);
  }
  v21 = 0;
  if (*((_DWORD *)v15 + 6) == 2)
  {
    if ((*((_WORD *)v15 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v15);
  }
  else
  {
    *((_DWORD *)v15 + 6) -= 2;
  }
LABEL_31:
  v18 = v22;
  v22 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v3);
    else
      *(_DWORD *)v18 -= 2;
  }
  v7 = v23[0];
  v23[0] = 0;
  if (v7)
    goto LABEL_35;
  return v8;
}

uint64_t WebCore::RenderLayerModelObject::svgMarkerResourceFromStyle(WebCore::RenderLayerModelObject *this, const WTF::String *a2, double a3, double a4, float a5)
{
  uint64_t v5;
  WebCore::ReferencedSVGResources *v8;
  uint64_t v10;
  BOOL v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  WebCore::TreeScope *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;

  if (!*(_QWORD *)a2)
    return 0;
  if (!*(_DWORD *)(*(_QWORD *)a2 + 4))
    return 0;
  v8 = *(WebCore::ReferencedSVGResources **)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40);
  if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 1) + 680) + 680) & 0x800000000000) == 0)
    return 0;
  v10 = *(_QWORD *)v8;
  if (*(_QWORD *)v8)
    v11 = (*(_WORD *)(*(_QWORD *)v8 + 28) & 0x80) == 0;
  else
    v11 = 1;
  if (!v11 && !*(_BYTE *)(v10 + 193))
  {
    v21 = *(_QWORD *)(v10 + 200);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 8);
      if (v22)
      {
        if (*(_WORD *)(*(_QWORD *)(v22 + 96) + 10) == 242)
          v8 = (WebCore::ReferencedSVGResources *)*((_QWORD *)v8 + 2);
      }
    }
  }
  WebCore::ReferencedSVGResources::referencedMarkerElement(v8, a2, &v23, a3, a4, a5);
  v13 = v23;
  if (!v23)
    goto LABEL_43;
  v5 = *((_QWORD *)v23 + 8) & 0xFFFFFFFFFFFFLL;
  if (!v5)
    goto LABEL_16;
  if ((*(_BYTE *)((*((_QWORD *)v23 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    goto LABEL_39;
  if (*(_BYTE *)((*((_QWORD *)v23 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 79)
  {
    v14 = 0;
  }
  else
  {
LABEL_16:
    v5 = 0;
    v14 = 1;
  }
  v23 = 0;
  if (*((_DWORD *)v13 + 6) == 2)
  {
    if ((*((_WORD *)v13 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v13);
  }
  else
  {
    *((_DWORD *)v13 + 6) -= 2;
  }
  if (v14)
  {
LABEL_43:
    if ((*((_BYTE *)this + 45) & 1) == 0)
    {
      v15 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
      if (v15)
      {
        v16 = *(_WORD *)(v15 + 28);
        if ((v16 & 8) != 0)
        {
          if ((v16 & 0x20) != 0)
          {
            v17 = (WebCore::TreeScope *)(*(_QWORD *)(*(_QWORD *)(v15 + 40) + 8) + 96);
            v18 = *(WTF::StringImpl **)a2;
            if (*(_QWORD *)a2)
            {
              if ((*((_BYTE *)v18 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v18 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase(v18, v12);
                v18 = v23;
              }
            }
            v23 = v18;
            WebCore::TreeScope::addPendingSVGResource(v17, &v23, (WebCore::SVGElement *)v15);
            v20 = v23;
            v23 = 0;
            if (v20)
            {
              if (*(_DWORD *)v20 == 2)
                WTF::StringImpl::destroy(v20, v19);
              else
                *(_DWORD *)v20 -= 2;
            }
          }
          return 0;
        }
LABEL_39:
        __break(0xC471u);
        JUMPOUT(0x1964072E0);
      }
    }
    return 0;
  }
  return v5;
}

uint64_t WebCore::RenderLayerModelObject::svgFillPaintServerResourceFromStyle(WebCore::RenderLayerModelObject *this, const WebCore::RenderStyle *a2, double a3, double a4, float a5)
{
  WebCore::ReferencedSVGResources *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;

  v6 = *(WebCore::ReferencedSVGResources **)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40);
  if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 1) + 680) + 680) & 0x800000000000) == 0)
    return 0;
  v7 = *((_QWORD *)a2 + 7);
  v8 = *(_QWORD *)(v7 + 16);
  if (*(unsigned __int8 *)(v8 + 56) < 3u)
    return 0;
  v9 = *(_QWORD *)v6;
  if (*(_QWORD *)v6)
    v10 = (*(_WORD *)(*(_QWORD *)v6 + 28) & 0x80) == 0;
  else
    v10 = 1;
  if (!v10 && !*(_BYTE *)(v9 + 193))
  {
    v25 = *(_QWORD *)(v9 + 200);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
      {
        if (*(_WORD *)(*(_QWORD *)(v26 + 96) + 10) == 242)
          v6 = (WebCore::ReferencedSVGResources *)*((_QWORD *)v6 + 2);
      }
    }
  }
  WebCore::ReferencedSVGResources::referencedPaintServerElement(v6, (WebCore::TreeScope *)(v8 + 40), (unsigned int *)&v27, a3, a4, a5);
  v12 = v27;
  if (!v27)
  {
LABEL_19:
    if ((*((_BYTE *)this + 45) & 1) == 0)
    {
      v18 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
      if (v18)
      {
        v19 = *(_WORD *)(v18 + 28);
        if ((v19 & 8) != 0)
        {
          v20 = *(_QWORD *)(*(_QWORD *)(v18 + 40) + 8);
          v21 = *(WTF::StringImpl **)(*(_QWORD *)(v7 + 16) + 40);
          if (v21)
          {
            if ((*((_BYTE *)v21 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v21 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase(v21, v11);
              v21 = v27;
              v19 = *(_WORD *)(v18 + 28);
            }
          }
          v27 = v21;
          if ((v19 & 0x20) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196407518);
          }
          WebCore::TreeScope::addPendingSVGResource((WebCore::TreeScope *)(v20 + 96), &v27, (WebCore::SVGElement *)v18);
          v23 = v27;
          v27 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v22);
            else
              *(_DWORD *)v23 -= 2;
          }
          return 0;
        }
LABEL_44:
        __break(0xC471u);
        JUMPOUT(0x1964074F8);
      }
    }
    return 0;
  }
  v13 = *((_QWORD *)v27 + 8) & 0xFFFFFFFFFFFFLL;
  if (!v13)
    goto LABEL_17;
  if ((*(_BYTE *)((*((_QWORD *)v27 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    goto LABEL_44;
  v14 = *(unsigned __int8 *)((*((_QWORD *)v27 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) - 76;
  v15 = v14 > 6;
  v16 = (1 << v14) & 0x65;
  if (v15 || v16 == 0)
  {
LABEL_17:
    v27 = 0;
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v12, v11);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
    goto LABEL_19;
  }
  v27 = 0;
  if (*((_DWORD *)v12 + 6) == 2)
  {
    if ((*((_WORD *)v12 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v12, v11);
  }
  else
  {
    *((_DWORD *)v12 + 6) -= 2;
  }
  return v13;
}

uint64_t WebCore::RenderLayerModelObject::svgStrokePaintServerResourceFromStyle(WebCore::RenderLayerModelObject *this, const WebCore::RenderStyle *a2, double a3, double a4, float a5)
{
  WebCore::ReferencedSVGResources *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;

  v6 = *(WebCore::ReferencedSVGResources **)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40);
  if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 1) + 680) + 680) & 0x800000000000) == 0)
    return 0;
  v7 = *((_QWORD *)a2 + 7);
  v8 = *(_QWORD *)(v7 + 24);
  if (*(unsigned __int8 *)(v8 + 80) < 3u)
    return 0;
  v9 = *(_QWORD *)v6;
  if (*(_QWORD *)v6)
    v10 = (*(_WORD *)(*(_QWORD *)v6 + 28) & 0x80) == 0;
  else
    v10 = 1;
  if (!v10 && !*(_BYTE *)(v9 + 193))
  {
    v25 = *(_QWORD *)(v9 + 200);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
      {
        if (*(_WORD *)(*(_QWORD *)(v26 + 96) + 10) == 242)
          v6 = (WebCore::ReferencedSVGResources *)*((_QWORD *)v6 + 2);
      }
    }
  }
  WebCore::ReferencedSVGResources::referencedPaintServerElement(v6, (WebCore::TreeScope *)(v8 + 40), (unsigned int *)&v27, a3, a4, a5);
  v12 = v27;
  if (!v27)
  {
LABEL_19:
    if ((*((_BYTE *)this + 45) & 1) == 0)
    {
      v18 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
      if (v18)
      {
        v19 = *(_WORD *)(v18 + 28);
        if ((v19 & 8) != 0)
        {
          v20 = *(_QWORD *)(*(_QWORD *)(v18 + 40) + 8);
          v21 = *(WTF::StringImpl **)(*(_QWORD *)(v7 + 24) + 40);
          if (v21)
          {
            if ((*((_BYTE *)v21 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v21 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase(v21, v11);
              v21 = v27;
              v19 = *(_WORD *)(v18 + 28);
            }
          }
          v27 = v21;
          if ((v19 & 0x20) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196407750);
          }
          WebCore::TreeScope::addPendingSVGResource((WebCore::TreeScope *)(v20 + 96), &v27, (WebCore::SVGElement *)v18);
          v23 = v27;
          v27 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v22);
            else
              *(_DWORD *)v23 -= 2;
          }
          return 0;
        }
LABEL_44:
        __break(0xC471u);
        JUMPOUT(0x196407730);
      }
    }
    return 0;
  }
  v13 = *((_QWORD *)v27 + 8) & 0xFFFFFFFFFFFFLL;
  if (!v13)
    goto LABEL_17;
  if ((*(_BYTE *)((*((_QWORD *)v27 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    goto LABEL_44;
  v14 = *(unsigned __int8 *)((*((_QWORD *)v27 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) - 76;
  v15 = v14 > 6;
  v16 = (1 << v14) & 0x65;
  if (v15 || v16 == 0)
  {
LABEL_17:
    v27 = 0;
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v12, v11);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
    goto LABEL_19;
  }
  v27 = 0;
  if (*((_DWORD *)v12 + 6) == 2)
  {
    if ((*((_WORD *)v12 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v12, v11);
  }
  else
  {
    *((_DWORD *)v12 + 6) -= 2;
  }
  return v13;
}

uint64_t WebCore::RenderLayerModelObject::pointInSVGClippingArea(WebCore::RenderLayerModelObject *this, const WebCore::FloatPoint *a2)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::RenderSVGResourceClipper *v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  float v10;
  double v11;
  int v12;
  int v13;
  double v14;
  int v15;
  _BOOL8 v17;
  int v18;
  unsigned int v19;
  int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  unsigned int v25;
  int v26;
  float v27;
  float v28;
  float v29;
  float v30;
  const WebCore::SVGElement *v31;
  __int16 v32;
  void *v33;
  unint64_t v34;
  char v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  const WebCore::SVGElement *v39;
  __int16 v40;
  void *v41;
  unint64_t v42;
  char v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  float v47;
  float v48;
  float v49;
  uint64_t v53;
  char v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  __n128 v62;
  int v63;
  uint64_t v64;
  uint64_t v66;
  WTF *v67;
  uint64_t v68;
  WTF *v69;
  WTF *v70;
  WTF *v71;
  float v72;
  float v73;
  float v74;
  float v75;
  __int128 v76;
  __int128 v77;
  char v78;
  unint64_t v79;
  unint64_t v80[7];
  int v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 264);
  if (!v4)
    goto LABEL_2;
  v18 = *(_DWORD *)(v4 + 12);
  if (v18 == 2)
  {
    v25 = *(unsigned __int8 *)(v4 + 16);
    if (v25 > 7)
    {
      v28 = 0.0;
      v29 = 0.0;
      v30 = 0.0;
    }
    else
    {
      v26 = 1 << v25;
      if ((v26 & 0x47) != 0)
      {
        (*(void (**)(WebCore::RenderLayerModelObject *))(*(_QWORD *)this + 240))(this);
        goto LABEL_72;
      }
      if ((v26 & 0x38) != 0
        || (*((_BYTE *)this + 45) & 1) != 0
        || (v39 = *(const WebCore::SVGElement **)(*((_QWORD *)this + 3) + 8)) == 0)
      {
        (*(void (**)(WebCore::RenderLayerModelObject *))(*(_QWORD *)this + 232))(this);
        goto LABEL_72;
      }
      v40 = *((_WORD *)v39 + 14);
      if ((v40 & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196407BF8);
      }
      if ((v40 & 0x20) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196407C38);
      }
      WebCore::SVGLengthContext::SVGLengthContext((uint64_t)&v79, v39);
      v42 = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)&v79);
      v43 = (char)v41;
      v44 = (unsigned int *)v79;
      v79 = 0;
      if (v44)
      {
        do
        {
          v45 = __ldaxr(v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v44));
        if (!v46)
        {
          atomic_store(1u, v44);
          v71 = (WTF *)v44;
          v68 = v44[7];
          if ((_DWORD)v68)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v71 + 2), (WTF::StringImpl *)(*((_QWORD *)v71 + 2) + 32 * v68));
          v69 = (WTF *)*((_QWORD *)v71 + 2);
          if (v69)
          {
            *((_QWORD *)v71 + 2) = 0;
            *((_DWORD *)v71 + 6) = 0;
            WTF::fastFree(v69, v41);
          }
          WTF::fastFree(v71, v41);
        }
      }
      v28 = 0.0;
      v30 = *((float *)&v42 + 1);
      if (v43)
        v29 = *(float *)&v42;
      else
        v29 = 0.0;
      if (!v43)
        v30 = 0.0;
    }
    v27 = 0.0;
LABEL_72:
    v58 = *((float *)a2 + 1);
    if (v27 > *(float *)a2 || (float)(v29 + v27) < *(float *)a2 || v28 > v58 || (float)(v28 + v30) < v58)
      return 0;
    v77 = 0u;
    v76 = 0u;
    v72 = v27;
    v73 = v28;
    v74 = v29;
    v75 = v30;
    v81 = 0;
    v62.n128_f64[0] = WebCore::Path::addRoundedRect((WebCore::Path *)&v79, (WebCore::FloatRect *)&v72, 0);
    v63 = v81;
    if (v81 == 2)
    {
      if (v80[0]
        && ((*(uint64_t (**)(unint64_t, double))(*(_QWORD *)v80[0] + 200))(v80[0], v62.n128_f64[0]) & 1) != 0)
      {
        v17 = 0;
LABEL_89:
        v63 = v81;
        if (v81 == -1)
          return v17;
LABEL_90:
        ((void (*)(char *, unint64_t *, __n128))off_1E342A600[v63])(&v78, v80, v62);
        return v17;
      }
    }
    else if (!v81)
    {
      v17 = 0;
      goto LABEL_90;
    }
    v64 = WebCore::Path::ensurePlatformPathImpl((WebCore::Path *)&v79);
    v17 = WebCore::PathCG::contains(v64, (float *)a2, 0);
    goto LABEL_89;
  }
  if (v18 == 1)
  {
    v19 = *(unsigned __int8 *)(v4 + 16);
    if (v19 > 7)
    {
      v22 = 0.0;
      v23 = 0.0;
      v24 = 0.0;
    }
    else
    {
      v20 = 1 << v19;
      if ((v20 & 0x47) != 0)
      {
        (*(void (**)(WebCore::RenderLayerModelObject *))(*(_QWORD *)this + 240))(this);
        goto LABEL_55;
      }
      if ((v20 & 0x38) != 0
        || (*((_BYTE *)this + 45) & 1) != 0
        || (v31 = *(const WebCore::SVGElement **)(*((_QWORD *)this + 3) + 8)) == 0)
      {
        (*(void (**)(WebCore::RenderLayerModelObject *))(*(_QWORD *)this + 232))(this);
        goto LABEL_55;
      }
      v32 = *((_WORD *)v31 + 14);
      if ((v32 & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196407BD8);
      }
      if ((v32 & 0x20) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196407C18);
      }
      WebCore::SVGLengthContext::SVGLengthContext((uint64_t)&v79, v31);
      v34 = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)&v79);
      v35 = (char)v33;
      v36 = (unsigned int *)v79;
      v79 = 0;
      if (v36)
      {
        do
        {
          v37 = __ldaxr(v36);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, v36));
        if (!v38)
        {
          atomic_store(1u, v36);
          v70 = (WTF *)v36;
          v66 = v36[7];
          if ((_DWORD)v66)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v70 + 2), (WTF::StringImpl *)(*((_QWORD *)v70 + 2) + 32 * v66));
          v67 = (WTF *)*((_QWORD *)v70 + 2);
          if (v67)
          {
            *((_QWORD *)v70 + 2) = 0;
            *((_DWORD *)v70 + 6) = 0;
            WTF::fastFree(v67, v33);
          }
          WTF::fastFree(v70, v33);
        }
      }
      v22 = 0.0;
      v24 = *((float *)&v34 + 1);
      if (v35)
        v23 = *(float *)&v34;
      else
        v23 = 0.0;
      if (!v35)
        v24 = 0.0;
    }
    v21 = 0.0;
LABEL_55:
    v79 = __PAIR64__(LODWORD(v22), LODWORD(v21));
    v80[0] = __PAIR64__(LODWORD(v24), LODWORD(v23));
    v47 = *((float *)a2 + 1);
    v48 = v23 + v21;
    v49 = v22 + v24;
    if (v21 > *(float *)a2 || v48 < *(float *)a2 || v22 > v47 || v49 < v47)
      return 0;
    v53 = (*(uint64_t (**)(_QWORD, unint64_t *))(**(_QWORD **)(v4 + 24) + 32))(*(_QWORD *)(v4 + 24), &v79);
    v54 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 24) + 40))(*(_QWORD *)(v4 + 24));
    v55 = *(_DWORD *)(v53 + 64);
    if (v55 == 2)
    {
      v56 = *(_QWORD *)(v53 + 8);
      if (v56 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 200))(v56) & 1) != 0)
        return 0;
    }
    else if (!v55)
    {
      return 0;
    }
    v57 = WebCore::Path::ensurePlatformPathImpl((WebCore::Path *)v53);
    return WebCore::PathCG::contains(v57, (float *)a2, v54);
  }
LABEL_2:
  v5 = WebCore::RenderLayerModelObject::svgClipperResourceFromStyle(this);
  if (!v5)
    return 1;
  v6 = (WebCore::RenderSVGResourceClipper *)v5;
  LODWORD(v79) = (*(float (**)(WebCore::RenderLayerModelObject *))(*(_QWORD *)this + 232))(this);
  HIDWORD(v79) = v7;
  v80[0] = __PAIR64__(v9, v8);
  v10 = *((float *)a2 + 1);
  v11 = *(float *)a2 * 64.0;
  if (v11 > -2147483650.0)
    v12 = (int)v11;
  else
    v12 = 0x80000000;
  if (v11 < 2147483650.0)
    v13 = v12;
  else
    v13 = 0x7FFFFFFF;
  v72 = *(float *)&v13;
  v14 = v10 * 64.0;
  if (v14 >= 2147483650.0)
  {
    v15 = 0x7FFFFFFF;
  }
  else if (v14 <= -2147483650.0)
  {
    v15 = 0x80000000;
  }
  else
  {
    v15 = (int)v14;
  }
  v73 = *(float *)&v15;
  return WebCore::RenderSVGResourceClipper::hitTestClipContent(v6, (const WebCore::FloatRect *)&v79, (const WebCore::LayoutPoint *)&v72);
}

void WebCore::RenderLayerModelObject::repaintOrRelayoutAfterSVGTransformChange(WebCore::RenderLayerModelObject *this)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  float64x2_t *v9;
  double v10;
  double v11;
  void *v12;
  int v13;
  float64x2_t *v14;
  double v15;
  double v16;
  float64x2_t v17;
  float64x2_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  __n128 v23;
  double v24;
  double v25;
  double v26;
  BOOL v28;
  double v29;
  BOOL v31;
  uint64_t v33;
  float v34;
  double v35;
  double v36;
  BOOL v38;
  double v39;
  BOOL v41;
  WebCore::SVGElement *v42;
  uint64_t v43;
  void *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  WebCore::SVGElement *v50;
  uint64_t v51;
  uint64_t v52;
  WebCore::RenderLayerModelObject *v53;
  uint64_t v54;
  WebCore::RenderLayerModelObject *v55;
  uint64_t v56;
  uint64_t v57;
  WebCore::RenderLayerModelObject *v58;
  BOOL v59;
  uint64_t v60;
  uint64_t i;
  WebCore::RenderLayerModelObject *v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WebCore::RenderLayerModelObject *v67;
  uint64_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t __x;
  __int128 v74;
  float64x2_t v75;
  __int128 v76;
  __int128 v77;
  float64x2_t v78;
  __int128 v79;

  v2 = (*(uint64_t (**)(WebCore::RenderLayerModelObject *))(*(_QWORD *)this + 832))(this);
  if ((v2 & 1) != 0
    || (v3 = *((_QWORD *)this + 11), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 40) + 20))
    || (v33 = *(_QWORD *)(v3 + 40), *(_QWORD *)(v33 + 328))
    || *(_QWORD *)(v33 + 320)
    || *(_QWORD *)(v33 + 312)
    || *(_QWORD *)(v33 + 304)
    || (*(_DWORD *)(v33 + 636) & 0x180) == 0x80)
  {
    v4 = *((_DWORD *)this + 5);
LABEL_4:
    v5 = 0x20000;
    goto LABEL_5;
  }
  v34 = *(float *)(v33 + 260);
  v4 = *((_DWORD *)this + 5);
  if (v34 != -1.0)
    goto LABEL_4;
  v5 = 0;
LABEL_5:
  v6 = v4 & 0xFFEDFFFF;
  if (v2)
    v7 = 0x100000;
  else
    v7 = 0;
  v8 = v6 | v5 | v7;
  *((_DWORD *)this + 5) = v8;
  if ((v8 & 0x8000) != 0 && (v9 = *(float64x2_t **)(*((_QWORD *)this + 18) + 200)) != 0)
  {
    v10 = v9->f64[0];
    v11 = v9->f64[1];
    *(float64_t *)&v77 = v9->f64[0];
    *((double *)&v77 + 1) = v11;
    v72 = v9[6];
    __x = v9[2];
    v78 = __x;
    v79 = (__int128)v72;
  }
  else
  {
    v77 = WebCore::identity;
    v78 = (float64x2_t)unk_1969FCD20;
    v79 = xmmword_1969FCD30;
    v72 = 0u;
    __x = (float64x2_t)xmmword_1968A14C0;
    v10 = 1.0;
    v11 = 0.0;
  }
  (*(void (**)(WebCore::RenderLayerModelObject *))(*(_QWORD *)this + 856))(this);
  v13 = *((_DWORD *)this + 5);
  if ((v13 & 0x8000) != 0 && (v14 = *(float64x2_t **)(*((_QWORD *)this + 18) + 200)) != 0)
  {
    v15 = v14->f64[0];
    v16 = v14->f64[1];
    *(float64_t *)&v74 = v14->f64[0];
    *((double *)&v74 + 1) = v16;
    v17 = v14[2];
    v18 = v14[6];
    v75 = v17;
    v76 = (__int128)v18;
  }
  else
  {
    v74 = WebCore::identity;
    v75 = (float64x2_t)unk_1969FCD20;
    v76 = xmmword_1969FCD30;
    v17 = (float64x2_t)xmmword_1968A14C0;
    v18 = 0uLL;
    v15 = 1.0;
    v16 = 0.0;
  }
  if (v10 == 1.0
    && (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(__x, (float64x2_t)xmmword_1968A14C0), (int32x4_t)vceqzq_f64(v72)))) & 0xF) == 0&& v11 == 0.0)
  {
    v45 = (v15 == 1.0) & ~vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v17, (float64x2_t)xmmword_1968A14C0), (int32x4_t)vceqzq_f64(v18)))));
    if (v16 != 0.0)
      v45 = 0;
    if ((v13 & 0x8000) != 0 && (v45 & 1) == 0)
    {
      v71 = v17;
      WebCore::RenderLayer::forceStackingContextIfNeeded(*((WTF **)this + 18), v12);
      v17 = v71;
    }
  }
  v19 = 0;
  do
  {
    v20 = *(double *)((char *)&v77 + v19);
    v21 = *(double *)((char *)&v74 + v19);
    if (v20 != v21)
      break;
    v59 = v19 == 40;
    v19 += 8;
  }
  while (!v59);
  if (v20 == v21)
    goto LABEL_24;
  v70 = v17;
  v22 = hypot(v10, v11);
  v23.n128_f64[0] = hypot(v15, v16);
  if (v22 == v23.n128_f64[0])
    goto LABEL_46;
  v35 = vabdd_f64(v22, v23.n128_f64[0]);
  v36 = fabs(v22);
  if (v36 >= 1.0 || v36 * 1.79769313e308 >= v35)
  {
    v38 = v36 * 2.22507386e-308 <= v35 || v36 <= 1.0;
    v39 = v35 / v36;
    if (!v38 || v39 <= 2.22044605e-16)
    {
      v23.n128_f64[0] = fabs(v23.n128_f64[0]);
      if (v23.n128_f64[0] >= 1.0 || v23.n128_f64[0] * 1.79769313e308 >= v35)
      {
        v41 = v23.n128_f64[0] * 2.22507386e-308 <= v35 || v23.n128_f64[0] <= 1.0;
        if (!v41 || (v23.n128_f64[0] = v35 / v23.n128_f64[0], v23.n128_f64[0] <= 2.22044605e-16))
        {
LABEL_46:
          v24 = hypot(__x.f64[0], __x.f64[1]);
          v23.n128_f64[0] = hypot(v70.f64[0], v70.f64[1]);
          if (v24 == v23.n128_f64[0])
            goto LABEL_24;
          v25 = vabdd_f64(v24, v23.n128_f64[0]);
          v26 = fabs(v24);
          if (v26 >= 1.0 || v26 * 1.79769313e308 >= v25)
          {
            v28 = v26 * 2.22507386e-308 <= v25 || v26 <= 1.0;
            v29 = v25 / v26;
            if (!v28 || v29 <= 2.22044605e-16)
            {
              v23.n128_f64[0] = fabs(v23.n128_f64[0]);
              if (v23.n128_f64[0] >= 1.0 || v23.n128_f64[0] * 1.79769313e308 >= v25)
              {
                v31 = v23.n128_f64[0] * 2.22507386e-308 <= v25 || v23.n128_f64[0] <= 1.0;
                v23.n128_f64[0] = v25 / v23.n128_f64[0];
                if (!v31 || v23.n128_f64[0] <= 2.22044605e-16)
                  goto LABEL_24;
              }
            }
          }
        }
      }
    }
  }
  if (*((_BYTE *)this + 46) == 85)
  {
    *((_BYTE *)this + 248) |= 8u;
    v42 = (WebCore::SVGElement *)WebCore::RenderSVGText::textElement(this);
    v43 = *(_QWORD *)(*((_QWORD *)v42 + 5) + 8);
    *(_DWORD *)(v43 + 24) += 2;
    WebCore::Document::updateSVGRenderer((WebCore::Document *)v43, v42);
    if (*(_DWORD *)(v43 + 24) == 2)
    {
      if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v43, v44);
    }
    else
    {
      *(_DWORD *)(v43 + 24) -= 2;
    }
  }
  else
  {
    v46 = *((unsigned int *)this + 16);
    if (!(v46 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)))
      goto LABEL_24;
    v47 = *(_QWORD *)((v46 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    if (!v47)
      goto LABEL_24;
    if (*(_BYTE *)(v47 + 46) != 85)
    {
      while (1)
      {
        v48 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v47 + 112))(v47, v23);
        if (!v48)
        {
          if ((WebCore::RenderLayerModelObject *)v47 == this)
            goto LABEL_24;
          v65 = *(unsigned int *)(v47 + 47);
          if (!(v65 | ((unint64_t)*(unsigned __int8 *)(v47 + 51) << 32)))
            break;
          v48 = *(_QWORD *)((v65 | ((unint64_t)*(unsigned __int8 *)(v47 + 51) << 32)) + 8);
          if (!v48)
            break;
        }
LABEL_126:
        v47 = v48;
        if (*(_BYTE *)(v48 + 46) == 85)
          goto LABEL_88;
      }
      v66 = *(_QWORD *)(v47 + 32);
      if (v66)
      {
        while (1)
        {
          v67 = *(WebCore::RenderLayerModelObject **)(v66 + 8);
          if (!v67 || v67 == this)
            break;
          v69 = *(unsigned int *)((char *)v67 + 47);
          if (v69 | ((unint64_t)*((unsigned __int8 *)v67 + 51) << 32))
          {
            v48 = *(_QWORD *)((v69 | ((unint64_t)*((unsigned __int8 *)v67 + 51) << 32)) + 8);
            if (v48)
              goto LABEL_126;
          }
          v66 = *((_QWORD *)v67 + 4);
          if (!v66)
            goto LABEL_24;
        }
      }
      goto LABEL_24;
    }
    v48 = *(_QWORD *)((v46 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
LABEL_88:
    v49 = 0;
    while (1)
    {
LABEL_89:
      *(_BYTE *)(v48 + 248) |= 8u;
      v50 = (WebCore::SVGElement *)WebCore::RenderSVGText::textElement((WebCore::RenderSVGText *)v48);
      v51 = *(_QWORD *)(*((_QWORD *)v50 + 5) + 8);
      *(_DWORD *)(v51 + 24) += 2;
      WebCore::Document::updateSVGRenderer((WebCore::Document *)v51, v50);
      if (*(_DWORD *)(v51 + 24) == 2)
      {
        if ((*(_WORD *)(v51 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v51, v12);
      }
      else
      {
        *(_DWORD *)(v51 + 24) -= 2;
      }
      if ((v49 & 1) == 0)
        v49 = 1;
      v52 = *(unsigned int *)(v48 + 64);
      if (!(v52 | ((unint64_t)*(unsigned __int8 *)(v48 + 68) << 32))
        || (v53 = *(WebCore::RenderLayerModelObject **)((v52 | ((unint64_t)*(unsigned __int8 *)(v48 + 68) << 32))
                                                      + 8)) == 0)
      {
        if ((WebCore::RenderLayerModelObject *)v48 == this)
          goto LABEL_140;
        v54 = *(unsigned int *)(v48 + 47);
        if (!(v54 | ((unint64_t)*(unsigned __int8 *)(v48 + 51) << 32)))
          break;
        v53 = *(WebCore::RenderLayerModelObject **)((v54 | ((unint64_t)*(unsigned __int8 *)(v48 + 51) << 32)) + 8);
        if (!v53)
          break;
      }
LABEL_98:
      v48 = (uint64_t)v53;
      if (*((_BYTE *)v53 + 46) != 85)
      {
        while (1)
        {
          v55 = v53;
          v53 = (WebCore::RenderLayerModelObject *)(*(uint64_t (**)(WebCore::RenderLayerModelObject *))(*(_QWORD *)v53 + 112))(v53);
          if (!v53)
          {
            if (v55 == this)
              goto LABEL_140;
            v56 = *(unsigned int *)((char *)v55 + 47);
            if (!(v56 | ((unint64_t)*((unsigned __int8 *)v55 + 51) << 32)))
              break;
            v53 = *(WebCore::RenderLayerModelObject **)((v56 | ((unint64_t)*((unsigned __int8 *)v55 + 51) << 32))
                                                      + 8);
            if (!v53)
              break;
          }
LABEL_100:
          if (*((_BYTE *)v53 + 46) == 85)
          {
            v48 = (uint64_t)v53;
            goto LABEL_89;
          }
        }
        v57 = *((_QWORD *)v55 + 4);
        if (v57)
        {
          while (1)
          {
            v58 = *(WebCore::RenderLayerModelObject **)(v57 + 8);
            v59 = !v58 || v58 == this;
            if (v59)
              break;
            v60 = *(unsigned int *)((char *)v58 + 47);
            if (v60 | ((unint64_t)*((unsigned __int8 *)v58 + 51) << 32))
            {
              v53 = *(WebCore::RenderLayerModelObject **)((v60 | ((unint64_t)*((unsigned __int8 *)v58 + 51) << 32))
                                                        + 8);
              if (v53)
                goto LABEL_100;
            }
            v57 = *((_QWORD *)v58 + 4);
            if (!v57)
              goto LABEL_140;
          }
        }
        goto LABEL_140;
      }
    }
    for (i = *(_QWORD *)(v48 + 32); i; i = *((_QWORD *)v62 + 4))
    {
      v62 = *(WebCore::RenderLayerModelObject **)(i + 8);
      if (!v62 || v62 == this)
        break;
      v64 = *(unsigned int *)((char *)v62 + 47);
      if (v64 | ((unint64_t)*((unsigned __int8 *)v62 + 51) << 32))
      {
        v53 = *(WebCore::RenderLayerModelObject **)((v64 | ((unint64_t)*((unsigned __int8 *)v62 + 51) << 32)) + 8);
        if (v53)
          goto LABEL_98;
      }
    }
LABEL_140:
    if ((v49 & 1) == 0)
LABEL_24:
      WebCore::RenderElement::repaintRendererOrClientsOfReferencedSVGResources(this, (WebCore::SVGElement *)v12);
  }
}

uint64_t WebCore::RenderLayerModelObject::paintSVGClippingMask(uint64_t this, WebCore::PaintInfo *a2, const WebCore::FloatRect *a3)
{
  uint64_t v3;
  BOOL v4;
  WebCore::RenderLayerModelObject *v5;

  v3 = *((_QWORD *)a2 + 3);
  if (v3)
    v4 = v3 == this;
  else
    v4 = 1;
  if (v4)
  {
    v5 = (WebCore::RenderLayerModelObject *)this;
    if ((*(_BYTE *)(*(_QWORD *)(this + 104) + 239) & 4) == 0 && (*(_BYTE *)(this + 120) & 0x30) == 0)
    {
      this = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 10) + 40))(*((_QWORD *)a2 + 10));
      if ((this & 1) == 0)
      {
        this = WebCore::RenderLayerModelObject::svgClipperResourceFromStyle(v5);
        if (this)
          return (uint64_t)WebCore::RenderSVGResourceClipper::applyMaskClipping((WebCore::RenderLayerModelObject *)this, a2, v5, a3);
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderLayerModelObject::paintSVGMask(uint64_t this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  uint64_t v3;
  BOOL v4;
  WebCore::RenderLayerModelObject *v7;

  v3 = *((_QWORD *)a2 + 3);
  if (v3)
    v4 = v3 == this;
  else
    v4 = 1;
  if (v4)
  {
    v7 = (WebCore::RenderLayerModelObject *)this;
    this = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 10) + 40))(*((_QWORD *)a2 + 10));
    if ((this & 1) == 0)
    {
      this = WebCore::RenderLayerModelObject::svgMaskerResourceFromStyle(v7);
      if (this)
        return (uint64_t)WebCore::RenderSVGResourceMasker::applyMask((uint64_t *)this, a2, v7, a3);
    }
  }
  return this;
}

WebCore::ScrollAnchoringController **std::unique_ptr<WebCore::ScrollAnchoringController>::operator=[abi:sn180100](WebCore::ScrollAnchoringController **a1, const WebCore::RenderObject *a2)
{
  WebCore::ScrollAnchoringController *v3;
  WebCore::ScrollAnchoringController *v4;
  WTF *v5;
  void *v6;

  v3 = *(WebCore::ScrollAnchoringController **)a2;
  *(_QWORD *)a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    WebCore::ScrollAnchoringController::~ScrollAnchoringController(v4, a2);
    WTF::fastFree(v5, v6);
  }
  return a1;
}

WebCore::ScrollAnchoringController **std::unique_ptr<WebCore::ScrollAnchoringController>::~unique_ptr[abi:sn180100](WebCore::ScrollAnchoringController **a1, const WebCore::RenderObject *a2)
{
  WebCore::ScrollAnchoringController *v3;
  WTF *v4;
  void *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    WebCore::ScrollAnchoringController::~ScrollAnchoringController(v3, a2);
    WTF::fastFree(v4, v5);
  }
  return a1;
}

uint64_t *std::unique_ptr<WebCore::RenderMarquee>::~unique_ptr[abi:sn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(v2 + 88) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v2 + 84));
    }
    *(_QWORD *)(v2 + 8) = off_1E31F7378;
    v3 = *(_QWORD *)(v2 + 56);
    *(_QWORD *)(v2 + 56) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v2 + 8));
    WTF::fastFree((WTF *)v2, v4);
  }
  return a1;
}

_QWORD *WebCore::Element::setSavedLayerScrollPosition(_QWORD *this, const WebCore::IntPoint *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this;
  if (*(_QWORD *)a2)
  {
    v4 = this[9];
  }
  else
  {
    v4 = this[9];
    if ((v4 & 0xFFFFFFFFFFFFLL) == 0)
      return this;
  }
  v5 = v4 & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    this = (_QWORD *)WebCore::Node::materializeRareData((WebCore::Node *)this);
    v5 = v3[9] & 0xFFFFFFFFFFFFLL;
  }
  *(_QWORD *)(v5 + 36) = *(_QWORD *)a2;
  return this;
}

uint64_t *WebCore::RenderLayerScrollableArea::destroyScrollbar(uint64_t *result, int a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  if (a2)
    v3 = result + 17;
  else
    v3 = result + 16;
  v4 = *v3;
  if (*v3)
  {
    if (!*(_BYTE *)(v4 + 137))
    {
      result = (uint64_t *)WebCore::ScrollableArea::willRemoveScrollbar(result, v4, a2);
      v4 = *v3;
    }
    v5 = *(_QWORD *)(v4 + 32);
    if (v5 && (result = *(uint64_t **)(v5 + 8)) != 0)
    {
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 336))(result);
      v4 = *v3;
      *v3 = 0;
      if (!v4)
        return result;
    }
    else
    {
      *v3 = 0;
    }
    if (*(_DWORD *)(v4 + 8) == 1)
      return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    else
      --*(_DWORD *)(v4 + 8);
  }
  return result;
}

uint64_t *WebCore::RenderLayerScrollableArea::clearResizer(WebCore::RenderLayerScrollableArea *this, void *a2)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t *v7;

  v4 = *((_QWORD *)this + 20);
  result = (uint64_t *)((char *)this + 160);
  v3 = v4;
  if (v4)
  {
    v7 = result;
    v5 = *(WTF **)(v3 + 32);
    *(_QWORD *)(v3 + 32) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
        WTF::fastFree(v5, a2);
      else
        --*(_DWORD *)v5;
    }
    result = v7;
    v6 = *v7;
    *v7 = 0;
    if (v6)
      return (uint64_t *)WebCore::RenderObjectDeleter::operator()((uint64_t)v7, v6);
  }
  return result;
}

uint64_t WebCore::RenderLayerScrollableArea::shouldPlaceVerticalScrollbarOnLeft(WebCore::RenderLayerScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::RenderLayerScrollableArea::handleTouchEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 79))
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    v5 = WTF::fastMalloc((WTF *)0xB0);
    *(_QWORD *)v5 = off_1E3405EF0;
    *(_QWORD *)(v5 + 8) = a1;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = &off_1E3406D78;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_QWORD *)(v5 + 80) = 0;
    *(_QWORD *)(v5 + 88) = v5;
    *(_QWORD *)(v5 + 96) = 0;
    *(_QWORD *)(v5 + 104) = 0;
    *(_QWORD *)(v5 + 110) = 0;
    *(_QWORD *)(v5 + 120) = 0;
    v6 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v6 = 0;
    *(_DWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = a1;
    *(_BYTE *)(v6 + 24) = 0;
    *(_QWORD *)(v5 + 128) = v6;
    *(_BYTE *)(v5 + 136) = 0;
    *(_QWORD *)v5 = off_1E3354B08;
    *(_QWORD *)(v5 + 168) = 0;
    *(_DWORD *)(v5 + 140) = 0;
    *(_DWORD *)(v5 + 143) = 0;
    *(_QWORD *)(v5 + 156) = 0;
    *(_QWORD *)(v5 + 148) = 0;
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v5;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v5 = *(_QWORD *)(a1 + 16);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 208))(v5, a2);
}

unint64_t WebCore::RenderLayerScrollableArea::scrollableAreaBoundingBox(WebCore::RenderLayerScrollableArea *this, BOOL *a2)
{
  return WebCore::RenderObject::absoluteBoundingBoxRect(*(WebCore::RenderObject **)(*((_QWORD *)this + 12) + 32), 1, a2);
}

BOOL WebCore::RenderLayerScrollableArea::scrollsOverflow(WebCore::RenderLayerScrollableArea *this)
{
  _BOOL8 result;
  uint64_t v3;

  result = 0;
  if (this && (*((_BYTE *)this + 45) & 4) != 0)
  {
    if ((*((_BYTE *)this + 22) & 1) != 0)
    {
      v3 = *((_QWORD *)this + 12);
      return ((v3 >> 10) & 7) - 3 < 2 || ((unsigned __int16)v3 >> 13) - 3 < 2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::RenderLayerScrollableArea::scrollingNodeID(WebCore::RenderLayerScrollableArea *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 12) + 256);
  if (v1)
    return *(_QWORD *)(v1 + 224);
  else
    return 0;
}

uint64_t WebCore::RenderLayerScrollableArea::isRubberBandInProgress(WebCore::RenderLayerScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::RenderLayerScrollableArea::forceUpdateScrollbarsOnMainThreadForPerformanceTesting(WebCore::RenderLayerScrollableArea *this)
{
  return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32) + 24) + 8) + 40)
                                                                                            + 8)
                                                                                + 528)
                                                                    + 8)
                                                        + 24)
                                            + 8)
                                + 112)
                    + 688) >> 62) & 1;
}

uint64_t WebCore::RenderLayerScrollableArea::usesAsyncScrolling(WebCore::RenderLayerScrollableArea *this)
{
  WebCore::RenderView *v2;
  WebCore::RenderLayerCompositor *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  WebCore::RenderLayerCompositor *v7;
  WTF *v8;
  void *v9;

  v2 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12)
                                                                                           + 32)
                                                                               + 24)
                                                                   + 8)
                                                       + 40)
                                           + 8)
                               + 1944);
  v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
  if (!v3)
  {
    v3 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    WebCore::RenderLayerCompositor::RenderLayerCompositor(v3, v2);
    v7 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
    *((_QWORD *)v2 + 50) = v3;
    if (v7)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v7);
      WTF::fastFree(v8, v9);
      v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
    }
  }
  v4 = *((_QWORD *)this + 12);
  if ((*(_BYTE *)(v4 + 24) & 1) != 0)
  {
    v6 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 1) + 24) + 8) + 40) + 8) + 528)
                                                                                       + 8)
                                                                           + 24)
                                                               + 8));
    if (v6)
    {
      if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(*((_QWORD *)v3 + 1) + 248)) & 1) != 0)return 1;
    }
  }
  result = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 1) + 24) + 8) + 40) + 8) + 528)
                                                                                         + 8)
                                                                             + 24)
                                                                 + 8));
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 48))(result, v4);
  return result;
}

uint64_t WebCore::RenderLayerScrollableArea::setPostLayoutScrollPosition(uint64_t result, uint64_t a2, char a3)
{
  *(_QWORD *)(result + 112) = a2;
  *(_BYTE *)(result + 120) = a3;
  return result;
}

unint64_t WebCore::RenderLayerScrollableArea::scrollToOffset(WebCore::ScrollableArea *this, WebCore::IntPoint *a2, _BYTE *a3)
{
  unint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::ScrollAnimator *v17;
  int v18;
  unint64_t v19;
  float32x2_t v20;
  unint64_t v21;

  if (*((_BYTE *)this + 45) == 1)
  {
    v17 = (WebCore::ScrollAnimator *)WebCore::ScrollableArea::scrollAnimator(this);
    WebCore::ScrollAnimator::cancelAnimations(v17);
    WebCore::RenderLayerScrollableArea::stopAsyncAnimatedScroll(this);
  }
  if (a3[1])
    v6 = WebCore::RenderLayerScrollableArea::clampScrollOffset(this, a2);
  else
    v6 = *(_QWORD *)a2;
  v7 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 416))(this);
  if (v6 != (((*((_QWORD *)this + 4) & 0xFFFFFFFF00000000) + v7) & 0xFFFFFFFF00000000 | (*((_QWORD *)this + 4)
                                                                                            + v7)))
  {
    v9 = *((_BYTE *)this + 44);
    *((_BYTE *)this + 44) = *a3;
    v10 = WebCore::ScrollableArea::scrollAnimator(this);
    *(float *)&v21 = (float)(int)v6;
    *((float *)&v21 + 1) = (float)SHIDWORD(v6);
    v11 = ceilf(WebCore::ScrollAnimator::scrollOffsetAdjustedForSnapping(v10, (float *)&v21, a3[3]));
    if (v11 >= 2147500000.0)
    {
      v13 = 0x7FFFFFFFLL;
    }
    else if (v11 <= -2147500000.0)
    {
      v13 = 0x80000000;
    }
    else
    {
      v13 = (int)v11;
    }
    v14 = ceilf(v12);
    if (v14 >= 2147500000.0)
    {
      v15 = 0x7FFFFFFF00000000;
    }
    else if (v14 <= -2147500000.0)
    {
      v15 = 0x8000000000000000;
    }
    else
    {
      v15 = (unint64_t)(int)v14 << 32;
    }
    v6 = v15 | v13;
    v16 = WebCore::ScrollableArea::scrollPositionFromOffset((uint64_t)this, v15 | v13);
    v21 = v16;
    if (a3[2])
    {
      v18 = v16;
      v19 = HIDWORD(v16);
      WebCore::RenderLayerScrollableArea::registerScrollableAreaForAnimatedScroll((unsigned int *)this);
      v20.f32[0] = (float)v18;
      v20.f32[1] = (float)(int)v19;
      WebCore::ScrollableArea::scrollToPositionWithAnimation(this, (float *)&v20, (uint64_t)a3);
    }
    else if ((WebCore::RenderLayerScrollableArea::requestScrollToPosition((uint64_t)this, (uint64_t)&v21, (uint64_t)a3) & 1) == 0)
    {
      v20 = vcvt_f32_s32((int32x2_t)v21);
      WebCore::ScrollableArea::scrollToPositionWithoutAnimation(this, (float *)&v20, a3[1]);
    }
    *((_BYTE *)this + 44) = v9;
  }
  return v6;
}

unint64_t WebCore::RenderLayerScrollableArea::setScrollPosition(WebCore::ScrollableArea *a1, _QWORD *a2, _BYTE *a3)
{
  unint64_t v4;

  v4 = ((*((_QWORD *)a1 + 4) & 0xFFFFFFFF00000000) + *a2) & 0xFFFFFFFF00000000 | (*((_QWORD *)a1 + 4)
                                                                                    + *a2);
  return WebCore::RenderLayerScrollableArea::scrollToOffset(a1, (WebCore::IntPoint *)&v4, a3);
}

unint64_t WebCore::RenderLayerScrollableArea::scrollToYPosition(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  unint64_t v4;

  v4 = ((*(_QWORD *)(a1 + 32) & 0xFFFFFFFF00000000) + (a2 << 32)) | (*(_DWORD *)(a1 + 104)
                                                                     + *(_QWORD *)(a1 + 32));
  return WebCore::RenderLayerScrollableArea::scrollToOffset((WebCore::ScrollableArea *)a1, (WebCore::IntPoint *)&v4, a3);
}

unint64_t WebCore::RenderLayerScrollableArea::clampScrollOffset(WebCore::RenderLayerScrollableArea *this, const WebCore::IntPoint *a2)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;

  v4 = (*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)this + 496))(this);
  v5 = v4;
  v6 = HIDWORD(v4);
  v7 = (*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)this + 528))(this);
  v8 = v7 + (*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)this + 536))(this) + v6;
  v9 = (*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)this + 488))(this);
  v10 = v5 - v9;
  v11 = v8 - HIDWORD(v9);
  if (*(_DWORD *)a2 < v5 - (int)v9)
    v10 = *(_DWORD *)a2;
  v12 = v10 & ~(v10 >> 31);
  if (*((_DWORD *)a2 + 1) < v11)
    v11 = *((_DWORD *)a2 + 1);
  return v12 | ((unint64_t)(v11 & ~(v11 >> 31)) << 32);
}

uint64_t WebCore::RenderLayerScrollableArea::requestScrollToPosition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 24) + 8) + 40) + 8) + 528)
                                                                                         + 8)
                                                                             + 24)
                                                                 + 8));
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 200))(result, a1, a2, a3);
  return result;
}

uint64_t WebCore::RenderLayerScrollableArea::requestStartKeyboardScrollAnimation(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 24) + 8) + 40) + 8) + 528)
                                                                                         + 8)
                                                                             + 24)
                                                                 + 8));
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 184))(result, a1, a2);
  return result;
}

uint64_t WebCore::RenderLayerScrollableArea::requestStopKeyboardScrollAnimation(WebCore::RenderLayerScrollableArea *this, uint64_t a2)
{
  uint64_t result;

  result = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32) + 24) + 8) + 40) + 8) + 528)
                                                                                         + 8)
                                                                             + 24)
                                                                 + 8));
  if (result)
    return (*(uint64_t (**)(uint64_t, WebCore::RenderLayerScrollableArea *, uint64_t))(*(_QWORD *)result + 192))(result, this, a2);
  return result;
}

uint64_t WebCore::RenderLayerScrollableArea::stopAsyncAnimatedScroll(WebCore::RenderLayerScrollableArea *this)
{
  uint64_t result;

  result = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32) + 24) + 8) + 40) + 8) + 528)
                                                                                         + 8)
                                                                             + 24)
                                                                 + 8));
  if (result)
    return (*(uint64_t (**)(uint64_t, WebCore::RenderLayerScrollableArea *))(*(_QWORD *)result + 208))(result, this);
  return result;
}

unsigned int *WebCore::RenderLayerScrollableArea::registerScrollableAreaForAnimatedScroll(unsigned int *this)
{
  unsigned int *v1;

  if (!*((_BYTE *)this + 78))
  {
    v1 = this;
    this = WebCore::LocalFrameView::addScrollableAreaForAnimatedScroll(*(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32) + 24)+ 8)+ 40)+ 8)+ 1944)+ 248), (WebCore::ScrollableArea *)this);
    *((_BYTE *)v1 + 84) = 1;
  }
  return this;
}

uint64_t WebCore::RenderLayerScrollableArea::scrollTo(WebCore::RenderLayerScrollableArea *this, unint64_t a2)
{
  uint64_t result;
  BOOL v4;
  unint64_t v6;
  BOOL v7;
  WebCore::RenderElement *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::LocalFrame *v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  WTF *v21;
  uint64_t *v22;
  WebCore::ContainerNode *v23;
  unsigned int *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32[5];
  WTF *v33[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _QWORD v37[2];

  result = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  if (result)
    v4 = (*(_BYTE *)(result + 45) & 4) == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v6 = HIDWORD(a2);
    result = WebCore::RenderObject::isHTMLMarquee((WebCore::RenderObject *)result);
    if ((result & 1) == 0 && *((_BYTE *)this + 76))
      result = WebCore::RenderLayerScrollableArea::computeScrollDimensions(this);
    v7 = *((_DWORD *)this + 26) == (_DWORD)a2 && *((_DWORD *)this + 27) == (_DWORD)v6;
    if (!v7 || *((_BYTE *)this + 45))
    {
      *((_QWORD *)this + 13) = a2;
      v8 = *(WebCore::RenderElement **)(*((_QWORD *)this + 12) + 32);
      v9 = (_QWORD *)WebCore::RenderElement::element(v8);
      if (v9)
        WebCore::Element::setSavedLayerScrollPosition(v9, (WebCore::RenderLayerScrollableArea *)((char *)this + 104));
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 3) + 8) + 40) + 8);
      v12 = *(_QWORD *)(v11 + 1944);
      if (*(_BYTE *)(*(_QWORD *)(v12 + 248) + 480) != 2)
      {
        WebCore::RenderLayer::updateLayerPositionsAfterOverflowScroll(*((WebCore::RenderLayer **)this + 12), v10);
        WebCore::LocalFrameView::scheduleUpdateWidgetPositions(*(WebCore::LocalFrameView **)(v12 + 248));
        if (!*((_BYTE *)this + 83))
        {
          if (*((_BYTE *)this + 79))
          {
            v28 = *((_QWORD *)this + 12);
            if (*(_QWORD *)(v28 + 256))
            {
              *(_DWORD *)(v28 + 12) |= 0x40u;
              WebCore::RenderLayer::setAncestorsHaveCompositingDirtyFlag(v28, 2);
              v29 = *((_QWORD *)this + 12);
              while (1)
              {
                v29 = *(_QWORD *)(v29 + 40);
                if (!v29)
                  break;
                if ((*(_BYTE *)(v29 + 24) & 0x4A) != 0)
                {
                  *(_DWORD *)(v29 + 12) |= 0x800u;
                  WebCore::RenderLayer::setAncestorsHaveCompositingDirtyFlag(v29, 2);
                  break;
                }
              }
            }
          }
          WebCore::RenderLayerScrollableArea::updateCompositingLayersAfterScroll((WebCore::RenderLayer **)this);
        }
        WebCore::Document::invalidateRenderingDependentRegions(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 3) + 8)
                                                                                                 + 40)
                                                                                     + 8));
        WebCore::DebugPageOverlays::didLayout(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 3) + 8) + 40) + 8) + 528)+ 8), v13);
        v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 3) + 8) + 40) + 8);
      }
      v14 = *(_QWORD *)(v11 + 528);
      if (v14)
        v15 = *(_QWORD *)(v14 + 8);
      else
        v15 = 0;
      WebCore::RenderObject::containerForRepaint(v8, (uint64_t)v33);
      v16 = v33[1];
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 296) + 3064) + 24) = 1;
      v17 = *((_QWORD *)this + 12);
      if ((*(_BYTE *)(v17 + 30) & 2) != 0)
      {
        v18 = *(_QWORD *)(v17 + 112);
        v19 = *(_QWORD *)(v17 + 120);
      }
      else
      {
        v18 = (*(uint64_t (**)(WebCore::RenderElement *, WTF *, uint64_t))(*(_QWORD *)v8 + 440))(v8, v16, 0xC00000000);
      }
      v37[0] = v18;
      v37[1] = v19;
      *(float *)&v35 = (float)(int)v18 * 0.015625;
      *((float *)&v35 + 1) = (float)SHIDWORD(v18) * 0.015625;
      *((float *)&v35 + 2) = *(float *)&v35 + (float)((float)(int)v19 * 0.015625);
      *((float *)&v35 + 3) = *((float *)&v35 + 1);
      *(float *)&v36 = *((float *)&v35 + 2);
      *((float *)&v36 + 1) = *((float *)&v35 + 1) + (float)((float)SHIDWORD(v19) * 0.015625);
      *((float *)&v36 + 2) = *(float *)&v35;
      *((float *)&v36 + 3) = *((float *)&v36 + 1);
      if (v16)
      {
        WebCore::RenderObject::localToContainerQuad((uint64_t)v16, (float *)&v35, 0, 2u, v33);
        v35 = *(_OWORD *)v33;
        v36 = v34;
      }
      JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::singletonFlag(*(_QWORD *)(v15 + 640));
      if (!*((_BYTE *)this + 79)
        || (v26 = *((_QWORD *)this + 12), !*(_QWORD *)(v26 + 256))
        || (*(_DWORD *)(v26 + 12) |= 0x40u,
            WebCore::RenderLayer::setAncestorsHaveCompositingDirtyFlag(v26, 2),
            v27 = *((_QWORD *)this + 12),
            *(_DWORD *)(v27 + 12) |= 0x800u,
            WebCore::RenderLayer::setAncestorsHaveCompositingDirtyFlag(v27, 2),
            WebCore::RenderLayerBacking::needsRepaintOnCompositedScroll(*(WebCore::RenderLayerBacking **)(*((_QWORD *)this + 12) + 256))))
      {
        WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)v33, (uint64_t)v16);
        WebCore::RenderObject::repaintUsingContainer((uint64_t)v8, (uint64_t *)v33, (WebCore::LayoutRect *)v37, 1);
        v21 = v33[0];
        v33[0] = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 1)
            WTF::fastFree(v21, v20);
          else
            --*(_DWORD *)v21;
        }
        v22 = *(uint64_t **)(*(_QWORD *)(v12 + 248) + 568);
        if (v22)
        {
          WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v22, (uint64_t **)v33);
          WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v22, v32);
          while (v33[1] != (WTF *)v32[1])
          {
            v31 = *(_QWORD *)(*(_QWORD *)v33[1] + 8);
            if (WebCore::RenderLayerScrollableArea::scrollTo(WebCore::IntPoint const&)::$_1::operator()(v31, *((_QWORD *)this + 12)))WebCore::RenderObject::repaint(v31, 0);
            WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(v33);
          }
        }
      }
      v23 = (WebCore::ContainerNode *)WebCore::RenderElement::element(v8);
      if (v23)
        WebCore::Document::addPendingScrollEventTarget(*(uint64_t **)(*((_QWORD *)v23 + 5) + 8), v23);
      if (WebCore::RenderLayerScrollableArea::scrollsOverflow(*(WebCore::RenderLayerScrollableArea **)(*((_QWORD *)this + 12) + 32)))
        WebCore::LocalFrameView::didChangeScrollOffset(*(WebCore::LocalFrameView **)(v12 + 248));
      WebCore::LocalFrameView::viewportContentsChanged(*(WebCore::LocalFrameView **)(v12 + 248));
      v24 = (unsigned int *)WebCore::Document::editor(*(WebCore::Document **)(v15 + 296));
      result = (uint64_t)WebCore::Editor::renderLayerDidScroll(v24, *((const WebCore::RenderLayer **)this + 12));
      if (v16)
      {
        v25 = *((_DWORD *)v16 + 4);
        if (!v25)
        {
          __break(0xC471u);
          JUMPOUT(0x196409380);
        }
        *((_DWORD *)v16 + 4) = v25 - 1;
      }
    }
    else if (*((_BYTE *)this + 81))
    {
      v30 = *((_QWORD *)this + 12);
      *(_DWORD *)(v30 + 12) |= 0x40u;
      WebCore::RenderLayer::setAncestorsHaveCompositingDirtyFlag(v30, 2);
      return WebCore::RenderLayerScrollableArea::updateCompositingLayersAfterScroll((WebCore::RenderLayer **)this);
    }
  }
  return result;
}

uint64_t WebCore::RenderLayerScrollableArea::updateCompositingLayersAfterScroll(WebCore::RenderLayer **this)
{
  uint64_t result;
  WebCore::RenderLayer *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::RenderLayerCompositor *v6;
  unsigned int v7;

  result = (uint64_t)WebCore::RenderLayer::compositor(this[12]);
  if (*(_DWORD *)(result + 200))
  {
    v3 = this[12];
    v4 = (uint64_t)v3;
    do
      v4 = *(_QWORD *)(v4 + 40);
    while (v4 && (*(_BYTE *)(v4 + 24) & 0x4A) == 0);
    result = WebCore::RenderLayer::enclosingCompositingLayer(v4, 0);
    if (result)
    {
      v5 = result;
      if (*((_BYTE *)this + 79) && *((_QWORD *)v3 + 32))
      {
        v6 = WebCore::RenderLayer::compositor(v3);
        v7 = 3;
      }
      else
      {
        *(_DWORD *)(result + 12) |= 0x800u;
        WebCore::RenderLayer::setAncestorsHaveCompositingDirtyFlag(result, 2);
        v6 = WebCore::RenderLayer::compositor(this[12]);
        v7 = 2;
      }
      return WebCore::RenderLayerCompositor::updateCompositingLayers((unint64_t)v6, v7, v5);
    }
  }
  return result;
}

